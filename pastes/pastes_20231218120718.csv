id,title,username,language,date,content
i08JrSNX,data786,TestGuy1,JSON,Monday 18th of December 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '21cdc547f4c22d5b513149185b9691e61ca624e8aa92c384a6e79741ce5ecd4ac5d3f4259ee450642e36c5678faa55bb65616c14cc0663ca3feeb7f37c012ef5fa35691a0fb021d8c44cf00f76caa30f7029dd44ff5a64746f7fa038d0dd2d1e766aa90bf8b84f95f92a155a2400ce0efa283b87e122eb2e2e401564e8274a88',
  otherdata: [
    'd20c12f600e8b1371718d1202a4ddea9',
    '394a558c3b7e5b431845945ab96248c7',
    '874b62ff2ea7706f177fbc6ea6e61dce',
    'cd0c1b80738b037ffca720524e32870d',
    '98ec99bdb991720220bc9e514139ea6d',
    '285f559f42551be1ed66716c1d67bb0d',
    'ee3723a0a8e997456ddd456a556d44fc',
    '7c17b4b6e5ac1a9d5df6b47e90245f68'
  ]
}"
QdsGYinF,checkchunk,aregrubb,Lua,Monday 18th of December 2023 05:50:12 AM CDT,"-- pastebin get QdsGYinF /startup/feilsok.lua

lM = peripheral.wrap(""left"")  -- left monitor
rM = peripheral.wrap(""right"") -- right monitor

lM.write(""Starting"")
rM.write(""Starting"")

keepAlive = true

function checkRestart()
    lM.clear()
    lM.setCursorPos(3,3)
    if checkError == true then
        lM.setTextColor(colors.green)
        lM.write(""Chunken er normal"")
		
		local file = fs.open(""restart.log"", ""w"")
		local dateTime = os.date(""%Y-%m-%d %H:%M:%S"")
		
		file.write(dateTime)
		file.close()
    else
        lM.setTextColor(colors.red)
        lM.write(""en feil har skjedd"")
		local file = fs.open(""restart.log"", ""r"")
        local event, key = os.pullEvent(""key"")
		lM.setCursorPos(3,4)
		lM.write(file.readAll())
		os.sleep(0.1)
        if key == keys.r or keys.R then
            checkError = true
        elseif key == keys.q or keys.Q then
			keepAlive = false
		end
    end
end

function showClock()
    local nTime = textutils.formatTime(os.time(), true)
	rM.clear()
    rM.setCursorPos(2,0)
    rM.setTextColor(colors.yellow)
    rM.write(nTime)
	os.sleep(0.1)
end

term.clear()
print(""trykke R for å nullstille"")
print(""trykke Q for å avbryte"")
while keepAlive == true do
    showClock()
    checkRestart()
    os.sleep(0.2) 
--     break 
end"
KST83gti,СПРИНТ № 4 | Обработка ошибок. Исключения | Урок 5: Раскрутка стека.,chevengur,C++,Monday 18th of December 2023 05:27:12 AM CDT,"#include <iostream>
#include <numeric>
#include <stdexcept>

using namespace std;

class Rational {
public:
    Rational() = default;

    Rational(int value)
        : numerator_(value)
        , denominator_(1) {
    }

    Rational(int numerator, int denominator)
    {
        if(denominator == 0){
            throw domain_error(""Exist"");
        }
        numerator_ = numerator;
        denominator_ = denominator;

        Normalize();
    }

    int Numerator() const {
        return numerator_;
    }

    int Denominator() const {
        return denominator_;
    }

    Rational& operator+=(Rational right) {
        numerator_ = numerator_ * right.denominator_ + right.numerator_ * denominator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator-=(Rational right) {
        numerator_ = numerator_ * right.denominator_ - right.numerator_ * denominator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator*=(Rational right) {
        numerator_ *= right.numerator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator/=(Rational right) {
        if(right.numerator_ == 0){
            throw invalid_argument(""Division by zero"");
        }
        numerator_ *= right.denominator_;
        denominator_ *= right.numerator_;
        Normalize();
        return *this;
    }

private:
    void Normalize() {
        if (denominator_ < 0) {
            numerator_ = -numerator_;
            denominator_ = -denominator_;
        }
        int n = gcd(numerator_, denominator_);
        numerator_ /= n;
        denominator_ /= n;
    }

    int numerator_ = 0;
    int denominator_ = 1;
};

ostream& operator<<(ostream& output, Rational rational) {
    return output << rational.Numerator() << '/' << rational.Denominator();
}

istream& operator>>(istream& input, Rational& rational) {
    int numerator;
    int denominator;
    char slash;
    if ((input >> numerator) && (input >> slash) && (slash == '/') && (input >> denominator)) {
        rational = Rational{numerator, denominator};
    }
    return input;
}

// Unary plus and minus

Rational operator+(Rational value) {
    return value;
}

Rational operator-(Rational value) {
    return {-value.Numerator(), value.Denominator()};
}

// Binary arithmetic operations

Rational operator+(Rational left, Rational right) {
    return left += right;
}

Rational operator-(Rational left, Rational right) {
    return left -= right;
}

Rational operator*(Rational left, Rational right) {
    return left *= right;
}

Rational operator/(Rational left, Rational right) {
    if(right.Numerator() == 0){
        throw invalid_argument(""Division by zero"");
    }
    return left /= right;
}

// Comparison operators

bool operator==(Rational left, Rational right) {
    return left.Numerator() == right.Numerator() &&
           left.Denominator() == right.Denominator();
}

bool operator!=(Rational left, Rational right) {
    return !(left == right);
}

bool operator<(Rational left, Rational right) {
    return left.Numerator() * right.Denominator() <
           left.Denominator() * right.Numerator();
}

bool operator>(Rational left, Rational right) {
    return left.Numerator() * right.Denominator() >
           left.Denominator() * right.Numerator();
}

bool operator>=(Rational left, Rational right) {
    return !(left < right);
}

bool operator<=(Rational left, Rational right) {
    return !(left > right);
}

int main() {
    try {
        // При попытке сконструировать дробь с нулевым знаменателем
        // должно выброситься исключение domain_error
        const Rational invalid_value{1, 0};
        // Следующая строка не должна выполниться
        cout << invalid_value << endl;
    } catch (const domain_error& e) {
        cout << ""Ошибка: ""s << e.what() << endl;
    }
}
"
CTbg5JAj,G2A Refund Exploit Dec 2023,G2ARefundExploit,GetText,Monday 18th of December 2023 05:15:07 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view#g2a_refund_exploit.pdf

Working as of 
13 December 2023

217642"
rdXCwxGK,Untitled,xaixati,C++,Monday 18th of December 2023 05:14:52 AM CDT,"	ifstream in; // Поток in будем использовать для чтения
    ofstream out; // Поток out будем использовать для записи
    in.open(""input.txt"");
    out.open(""output.txt"");

    char c='x';
    vector <string> sentences;
    string s_to_replace,s_for_replace,s_for_erase;
    in>>s_to_replace>>s_for_replace>>s_for_erase;
    while (c=getchar()!=EOF){
        string s = """" ;
        while ((c!='.') && (c!='!') && (c!='?') && (c!='\0')) {
            c=getchar();
            s.push_back(c);
            if (c==',' || c==';' || c=='-'){
                continue;
            }
        }
        sentences.push_back(s);
        if (c=='\n'){
            break;
        }
        c=getchar();
    }"
ez5P1bbB,day18,icarussiano,Python,Monday 18th of December 2023 05:10:16 AM CDT,"ll=open(""input"").read().splitlines()
def pick(v,l):
    x,y=zip(*v)
    return int(0.5*abs(sum(x[i]*y[i-1]-x[i-1]*y[i] for i in range(len(v))))+0.5*l+1)
for p1 in [True,False]:
    dir= {""R"":(1,0), ""L"":(-1,0), ""U"":(0,1), ""D"":(0,-1), ""0"":(1,0), ""2"":(-1,0), ""1"":(0,1), ""3"":(0,-1)}
    x,y,l=0,0,0
    v=[(x,y)]
    for line in ll:
        d, n = (line.split()[0],int(line.split()[1])) if p1 else (line.split()[2][-2], int(line.split()[2][2:-2],16))
        x,y=x+dir[d][0]*int(n),y+dir[d][1]*int(n)
        v.append((x,y))
        l+=n
    print(f""Part 1: {pick(v,l)}"") if p1 else print(f""Part 2: {pick(v,l)}"")"
VwABwSsF,Untitled,Farz0l1x,Python,Monday 18th of December 2023 04:59:23 AM CDT,"file = open('12A.txt')
A = list(map(int, file.readlines()))
Max = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] + A[j]) % 2 == 0 and (A[i] % 23 == 0 or A[j] % 23 == 0):
            Max = max(Max, A[i] + A[j])
print(Max)

file = open('12B.txt')
A = list(map(int, file.readlines()))
ms = 10**20 
m = 10**20
m23 = 10**20
for i in range(len(A)):
    if A[i] % 23 == 0:
        ms = min(A[i] + m, ms)
    else:
        ms = min(A[i] + m23, ms)
    m = min(A[i], m)
    if A[i] % 23 == 0:
        m23 = min(A[i], m23)
print(ms)"
TmD8YDhh,Sorting Algorithm Speed Test,IMustRemainUnknown,Python,Monday 18th of December 2023 04:58:23 AM CDT,"import time


# Your sorting algorithm function
def my_sorting_algorithm(arr):
    # Your sorting algorithm implementation here
    pass


# Generate your test data
data = [4, 2, 89, 12, 6, 32, 17, 29, 8, 1]

# Number of repetitions to get a more accurate measurement
num_repetitions = 500000

# Measure your sorting algorithm's performance
total_execution_time = 0

for _ in range(num_repetitions):
    start_time = time.time()
    my_sorting_algorithm(data.copy())  # Make a copy to ensure the original data is not sorted
    end_time = time.time()
    total_execution_time += end_time - start_time

average_execution_time = (total_execution_time / num_repetitions) * 1000  # Convert to milliseconds
print(f""Your Algorithm Average Execution Time: {average_execution_time:.6f} milliseconds"")

"
x6XDSW40,BotaniaBot,aregrubb,Lua,Monday 18th of December 2023 04:58:14 AM CDT,"-- pastebin get x6XDSW40 botaniabot

tree_type = ""botania:livingwood_log""
stone_type = ""botania:livingrock""

blockType = 2

function refuel()
        if turtle.getFuelLevel() ~= ""unlimited"" and turtle.getFuelLevel() < 1 then
                    repeat
                            turtle.select(1)
                            if turtle.getItemCount( turtle.getSelectedSlot() ) == 0 then
                                print(""Out of fuel! Put fuel in first slot."")
                                print(""Press any key to continue"")
                                os.pullEvent(""key"")
                            else
                            end
                    until turtle.getItemCount( turtle.getSelectedSlot() ) > 0
                    print(""refueling"")
                    turtle.refuel()         
        end
end

function checkBlock()
	local success, ifgravel = turtle.inspectDown()
	if ifgravel.name == tree_type or ifgravel.name == stone_type then
		turtle.digDown()
		turtle.select(blockType)
		turtle.placeDown()
		if blockType == 2 then
			blockType = 3
		elseif blockType == 3 then
			blockType = 2
		end
	moveNext = true
	end
end

moveRate = 1

function checkMove()
	if moveNext == true then
		moveNext = false
		turtle.forward()
		moveRate = moveRate + 1
		if moveRate == 3 then
			turtle.turnLeft()
			moveRate = 1
		end
	end
end

while true do
	refuel()
	checkBlock()
	checkMove()
end
	"
SDRNEL7c,Untitled,Farz0l1x,Python,Monday 18th of December 2023 04:46:59 AM CDT,"file = open('9A.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] + A[j]) == 2000:
            count += 1
print(count)

file = open('9B.txt')
A = list(map(int, file.readlines()))
count = 0
k = [0] * 2000
for i in range(len(A)):
    ost = (2000 - A[i] % 2000) % 2000
    count += k[ost]
    k[A[i]%2000] += 1
print(count)"
eGGaTjsP,Exam tasks MP302 2023,Argent007,C++,Monday 18th of December 2023 04:30:23 AM CDT," №: Фамилия Имя Отчество..........  А  Б
.1. Братанова Анна Антоновна...... 10 21
 2. Бурдов Сергей Александр.......  8 26
 3. Ворожейкин Александр Евген.... 11 35
 4. Добрынин Егор Кириллович...... 16 29
 5. Коржаков Никита Андреевич.....  7 33
 6. Краснов Максим Григорьевич....  4 30
 7. Кулешов Данила Сергеевич...... 18 19
 8. Лёсина Ирина Валерьевна.......  1 34
 9. Новоселов Дмитрий Сергеев.....  5 20
10. Пелесков Всеволод Ярослав..... 13 31
11. Петухова Александра Вячесл....  2 24
12. Подкорытов Никита Артемов.....  3 37
13. Сабадаж Екатерина Дмитриев.... 12 28
14. Чернышов Максим Вадимович..... 14 27
15. Чмелёва Полина Витальевна.....  9 25
16. Шотропа Константин Алексан....  6 22
17. Шушарина Ирина Павловна....... 17 36"
bU0uBqSR,Untitled,Osama_Mersal,PHP,Monday 18th of December 2023 04:24:58 AM CDT,"Fatal error: Uncaught InvalidArgumentException: item should be a Collection or an array or an object in /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/Obj.php:112 Stack trace: #0 [internal function]: WPML\FP\Obj::WPML\FP\{closure}(NULL, 'secret', '') #1 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/functions.php(154): call_user_func_array(Object(Closure), Array) #2 [internal function]: WPML\FP\Obj::WPML\FP\{closure}(NULL, 'secret', '') #3 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/collect/src/Illuminate/Support/Traits/Macroable.php(56): call_user_func_array(Object(Closure), Array) #4 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/Obj.php(90): WPML\FP\Obj::__callStatic('propOr', Array) #5 [internal function]: WPML\FP\Obj::WPML\FP\{closure}('secret', '') #6 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/functions.php(154): call_user_func_array(Object(Closure), Array) #7 [internal function]: WPML\FP\Obj::WPML\FP\{closure}('secret', '') #8 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/collect/src/Illuminate/Support/Traits/Macroable.php(56): call_user_func_array(Object(Closure), Array) #9 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/classes/ATE/NoCreditPopup.php(32): WPML\FP\Obj::__callStatic('prop', Array) #10 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/classes/ATE/Loader.php(206): WPML\TM\ATE\NoCreditPopup->getData(Array) #11 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/classes/ATE/Loader.php(146): WPML\TM\ATE\Loader::getAteData(Array) #12 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/Either.php(207): WPML\TM\ATE\Loader::getData(Array) #13 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/Either.php(257): WPML\FP\Right->map(Array) #14 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/Promise.php(24): WPML\FP\Right->chain(Array) #15 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/wp/classes/Hooks.php(50): WPML\FP\Promise->resolve(Object(WPML\FP\Right)) #16 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-includes/class-wp-hook.php(324): WPML\LIB\WP\Hooks::WPML\LIB\WP\{closure}('') #17 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-includes/class-wp-hook.php(348): WP_Hook->apply_filters(NULL, Array) #18 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-includes/plugin.php(517): WP_Hook->do_action(Array) #19 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-settings.php(665): do_action('wp_loaded') #20 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-config.php(73): require_once('/Applications/X...') #21 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-load.php(50): require_once('/Applications/X...') #22 /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-admin/admin.php(34): require_once('/Applications/X...') #23 {main} thrown in /Applications/XAMPP/xamppfiles/htdocs/viktoriavarga/wp-content/plugins/sitepress-multilingual-cms/vendor/wpml/fp/core/Obj.php on line 112"
u4WqTYRC,Python Insertion Sort,IMustRemainUnknown,Python,Monday 18th of December 2023 04:16:06 AM CDT,"def my_insertion_sort(arr):
    sort_arr = []
    unsorted_arr = arr.copy()

    for i in range(len(arr)):
        sort_arr.append(unsorted_arr.pop(0))

        if len(sort_arr) < 1:
            sort_arr.append(unsorted_arr.pop(0))

        if len(unsorted_arr) > 0:
            if sort_arr[-1] > unsorted_arr[0]:
                sort_arr[-1], unsorted_arr[0], = unsorted_arr[0], sort_arr[-1]

        for j in range(len(sort_arr)-1, 0, -1):
            if sort_arr[j-1] > sort_arr[j]:
                sort_arr[j-1], sort_arr[j] = sort_arr[j], sort_arr[j-1]
            else:
                break

    return sort_arr


myList = [4, 2, 89, 12, 6, 32]
print(my_insertion_sort(myList))

myList = [4, 2, 89, 12, 6, 32, 17, 29, 8, 1]
print(my_insertion_sort(myList))"
8Zpva1Cc,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Monday 18th of December 2023 04:02:49 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-584095"
8YDB1REp,Untitled,Farz0l1x,Python,Monday 18th of December 2023 03:59:39 AM CDT,"file = open('7A.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if abs(A[i] - A[j]) % 69 == 0:
            count += 1
print(count)

file = open('7B.txt')
A = list(map(int, file.readlines()))
count = 0
k = [0] * 69
for i in range(len(A)):
    count += k[A[i] % 69]
    k[A[i]%69] += 1
print(count)"
Q7QXKBKr,СПРИНТ № 4 | Обработка ошибок. Исключения | Урок 4: Введение в исключения,chevengur,C++,Monday 18th of December 2023 03:55:46 AM CDT,"#include <iostream>
#include <numeric>
#include <stdexcept>

using namespace std;

class Rational {
public:
    Rational() = default;

    Rational(int value)
        : numerator_(value)
        , denominator_(1) {
    }

    Rational(int numerator, int denominator)
        : numerator_(numerator)
        , denominator_(denominator)
    {
        Normalize();
    }

    int Numerator() const {
        return numerator_;
    }

    int Denominator() const {
        return denominator_;
    }

    Rational& operator+=(Rational right) {
        numerator_ = numerator_ * right.denominator_ + right.numerator_ * denominator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator-=(Rational right) {
        numerator_ = numerator_ * right.denominator_ - right.numerator_ * denominator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator*=(Rational right) {
        numerator_ *= right.numerator_;
        denominator_ *= right.denominator_;
        Normalize();
        return *this;
    }

    Rational& operator/=(Rational right) {
        if(right.numerator_ == 0){
            throw invalid_argument(""Division by zero"");
        }
        numerator_ *= right.denominator_;
        denominator_ *= right.numerator_;
        Normalize();
        return *this;
    }

private:
    void Normalize() {
        if (denominator_ < 0) {
            numerator_ = -numerator_;
            denominator_ = -denominator_;
        }
        int n = gcd(numerator_, denominator_);
        numerator_ /= n;
        denominator_ /= n;
    }

    int numerator_ = 0;
    int denominator_ = 1;
};

ostream& operator<<(ostream& output, Rational rational) {
    return output << rational.Numerator() << '/' << rational.Denominator();
}

istream& operator>>(istream& input, Rational& rational) {
    int numerator;
    int denominator;
    char slash;
    if ((input >> numerator) && (input >> slash) && (slash == '/') && (input >> denominator)) {
        rational = Rational{numerator, denominator};
    }
    return input;
}

// Unary plus and minus

Rational operator+(Rational value) {
    return value;
}

Rational operator-(Rational value) {
    return {-value.Numerator(), value.Denominator()};
}

// Binary arithmetic operations

Rational operator+(Rational left, Rational right) {
    return left += right;
}

Rational operator-(Rational left, Rational right) {
    return left -= right;
}

Rational operator*(Rational left, Rational right) {
    return left *= right;
}

Rational operator/(Rational left, Rational right) {
    if(right.Numerator() == 0){
        throw invalid_argument(""Division by zero"");
    }
    return left /= right;
}

// Comparison operators

bool operator==(Rational left, Rational right) {
    return left.Numerator() == right.Numerator() &&
           left.Denominator() == right.Denominator();
}

bool operator!=(Rational left, Rational right) {
    return !(left == right);
}

bool operator<(Rational left, Rational right) {
    return left.Numerator() * right.Denominator() <
           left.Denominator() * right.Numerator();
}

bool operator>(Rational left, Rational right) {
    return left.Numerator() * right.Denominator() >
           left.Denominator() * right.Numerator();
}

bool operator>=(Rational left, Rational right) {
    return !(left < right);
}

bool operator<=(Rational left, Rational right) {
    return !(left > right);
}
"
mYAbsndA,Cursed term.blit formatting thing,fatboychummy,Lua,Monday 18th of December 2023 03:51:35 AM CDT,"--- Combine values into valid blit strings, in the format of
--- `a1 .. a2 .. a3, b1 .. b2 .. b3, c1 .. c2 .. c3`.
--- The input values are expected to be in the format of
--- `a1, b1, c1, a2, b2, c2, a3, b3, c3`.
---@vararg string|table The values to combine. Tables will be pulled apart to allow for multiple values if calling functions.
---@return string text The combined text values.
---@return string text_color The combined text color values.
---@return string bg_color The combined background color values.
local function combine_blit(...)
  local text = """"
  local text_color = """"
  local bg_color = """"

  local args = table.pack(...)

  local fixed_args = {}

  -- Rip subtables out and insert them as if they were arguments.
  for i = 1, args.n do
    local arg = args[i]
    if type(arg) == ""table"" then
      for j = 1, #arg do
        table.insert(fixed_args, arg[j])
      end
    else
      table.insert(fixed_args, arg)
    end
  end

  for i = 1, #fixed_args, 3 do
    local s1, s2, s3 = fixed_args[i], fixed_args[i + 1], fixed_args[i + 2]
    expect(i, s1, ""string"")
    expect(i + 1, s2, ""string"")
    expect(i + 2, s3, ""string"")

    if #s1 ~= #s2 or #s1 ~= #s3 then
      error((""Bad arguments %d, %d, %d: Must be same length (got %d, %d, %d)""):format(i, i + 1, i + 2, #s1, #s2, #s3), 2)
    end

    text = text .. s1
    text_color = text_color .. s2
    bg_color = bg_color .. s3
  end

  return text, text_color, bg_color
end"
AD76FLfV,Untitled,Farz0l1x,Python,Monday 18th of December 2023 03:48:11 AM CDT,"file = open('5A.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        for k in range(j + 1, len(A)):
            if A[i] % 19 == 0 and A[j] % 19 == 0 and A[k] % 19 == 0:
                count += 1
print(count)

def fac(n):
    if n == 1:
        return 1
    return fac(n - 1) * n

file = open('5B.txt')
A = list(map(int, file.readlines()))
k19 = 0
for i in range(len(A)):
    if A[i] % 19 == 0:
        k19 += 1
print(fac(k19) // (fac(3) * fac(k19 - 3)))"
XD7DZMJ5,Power distribution,abc123mewot,Lua,Monday 18th of December 2023 03:43:08 AM CDT,"mainMonitorSide = ""monitor_2""
local mon = peripheral.wrap(mainMonitorSide)
local dataTbl = {
	{ side = ""flux_gate_2"", name = ""Functions"" },
	{ side = ""flux_gate_0"", name = ""Main base"" }, 
	{ side = ""flux_gate_1"", name = ""ME Base"" }
}
local ind = peripheral.wrap('Induction Matrix_4')
local rla = peripheral.wrap('Reactor Logic Adapter_1')
local trb = peripheral.wrap('Industrial Turbine_0')

local monW, monH = mon.getSize()

local function spacer_fgbg(y, str, fg, bg)
	local l = string.len(str)
	local x = math.floor(monW / 2 - l / 2)
	local ob = mon.getBackgroundColor()
	mon.setCursorPos(1, y)
	mon.setBackgroundColor(bg)
	mon.setTextColor(fg)
	for i=1,x do mon.write("" "") end
	mon.write(str)
	for i=1,monW-l do mon.write("" "") end
	mon.setBackgroundColor(ob)
	return y + 1
end
local function spacer(y, str) return spacer_fgbg(y, str, colors.white, colors.gray) end
local function pad(str, nlen)
	local slen = string.len(str)
	if slen >= nlen then error(""Invalid length!"") end
	local hlen = (nlen - slen) / 2
	for i=1,hlen do str = "" "" .. str .. "" "" end
	return str
end

for k,v in pairs(dataTbl) do
	if v and v.side then
		v.p = peripheral.wrap(v.side)
		if not v.p then 
			print(""Failed to get peripheral, skipping!"")
			dataTbl[k] = nil
		end
	end
end

mon.setBackgroundColor(colors.black)
mon.setTextScale(1)
local loopTimer = os.startTimer(0.3)
while true do
	local event, param1, param2, param3, param4 = os.pullEvent()
	local wasTouched = event == ""monitor_touch"" and param1 == mainMonitorSide
	local wasTimer = event == ""timer"" and param1 == loopTimer
	if wasTouched or wasTimer then -- Touchscreen or timer event!
		loopTimer = os.startTimer(0.3)
		mon.clear()
		local x, y = 1, spacer(1, """") y = spacer(y, ""Power distribution"") y = spacer(y, """")
		mon.setTextColor(colors.green) 
		
		mon.setCursorPos(x, y)
		spacer_fgbg(y, """", colors.lightBlue, colors.lightBlue)
		mon.setCursorPos(x, y)
		mon.write(pad(""Generation"", 14))
		mon.write("" --> "")
		mon.write(pad(""Buffering"", 14))
		mon.write("" --> "")
		for k, v in pairs(dataTbl) do 
			if v and v.name and v.p then 
				mon.write(pad(v.name, 14))
			end
		end
	end
end
"
1TxtpX7D,Untitled,Farz0l1x,Python,Monday 18th of December 2023 03:41:23 AM CDT,"file = open('4A.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] * A[j]) % 5 == 0 and (A[i] + A[j]) % 2 != 0:
            count += 1
print(count)

file = open('4B.txt')
A = list(map(int, file.readlines()))
count = 0
k5_0, k5_1, k0, k1 = 0, 0, 0, 0
for i in range(len(A)):
    if A[i] % 5 == 0 and A[i] % 2 == 0:
        count += (k5_1 + k1)
    if A[i] % 5 == 0 and A[i] % 2 != 0:
        count += (k5_0 + k0)
    if A[i] % 5 != 0 and A[i] % 2 == 0:
        count +=  k5_1
    if A[i] % 5 != 0 and A[i] % 2 != 0:
        count += k5_1
        
    if A[i] % 5 == 0 and A[i] % 2 == 0:
        k5_0 += 1
    if A[i] % 5 == 0 and A[i] % 2 != 0:
        k5_1 += 1
    if A[i] % 5 != 0 and A[i] % 2 == 0:
        k0 += 1
    if A[i] % 5 != 0 and A[i] % 2 != 0:
        k1 += 1
print(count)"
NCRyjnLT,BALLS,dysaniaowo,C++,Monday 18th of December 2023 03:35:42 AM CDT,"/*
It's good, and impossible
Anyway, I finally got 93.75 points ;)

It feels impossible (It's not impossible)
Is it impossible?
Say that it's possible
And how do we rewrite the stars?
*/

#include <bits/stdc++.h>

using namespace std;

#ifdef LOCAL
#include ""debug.h""
#else
#define debug(...)
#endif

#define task ""balls""

const int N = 5e5 + 5;
const int mod = 998244353;

int m, n, q;
int u[N], v[N], l[N], r[N];

struct ITPolynomial {
    struct node {
        node *l, *r;
        int seg0, seg1, lazy0, lazy1;
        long long sum, lazy;
 
        node() {
            l = r = nullptr;
            seg0 = seg1 = lazy0 = lazy1 = 0;
            sum = lazy = 0;
        }
 
        void create() {
            if (l == nullptr) l = new node();
            if (r == nullptr) r = new node();
        }

        ~node() {
            delete l;
            delete r;
            l = r = nullptr;
        }

    } *root;
 
    int n;
 
    void init(int _n) {
        n = _n;
        delete(root);
        root = new node();
    }
 
    int fracmod(int x, int y) {
        int res = 0;
        if (x & 1) res = 1LL * (y / 2) * x % mod;
        else res = 1LL * (x / 2) * y % mod;
        return res;
    }
 
    void down(node *i, int L, int R) {
        int M = (L + R) >> 1;
        
        // polynomial

        i->l->seg0 += 1LL * i->lazy0 * (M - L + 1) % mod;
        i->r->seg0 += 1LL * i->lazy0 * (R - M) % mod;
        i->l->seg0 %= mod;
        i->r->seg0 %= mod;
 
        i->l->seg1 += 1LL * i->lazy1 * fracmod(M + L, M - L + 1) % mod;
        i->r->seg1 += 1LL * i->lazy1 * fracmod(R + M + 1, R - M) % mod;
        i->l->seg1 %= mod;
        i->r->seg1 %= mod;
 
        i->l->lazy0 += i->lazy0;
        i->r->lazy0 += i->lazy0;
        i->l->lazy0 %= mod;
        i->r->lazy0 %= mod;
 
        i->l->lazy1 += i->lazy1;
        i->r->lazy1 += i->lazy1;
        i->l->lazy1 %= mod;
        i->r->lazy1 %= mod;
 
        i->lazy0 = i->lazy1 = 0;

        // lazy
        i->l->sum += 1LL * i->lazy * (M - L + 1);
        i->r->sum += 1LL * i->lazy * (R - M);
        i->l->lazy += i->lazy;
        i->r->lazy += i->lazy;
        i->lazy = 0;

    }
 
    void update(node *i, int L, int R, int l, int r, int val0, int val1) {
        if (r < L || l > R) return;
        if (l <= L && R <= r) {
            // polynomial
            i->seg1 += 1LL * val1 * fracmod(R + L, R - L + 1) % mod;
            i->seg1 %= mod;
 
            i->lazy1 += val1;
            i->lazy1 %= mod;
 
            i->seg0 += 1LL * (R - L + 1) * val0 % mod;
            i->seg0 %= mod;
 
            i->lazy0 += val0;
            i->lazy0 %= mod;

            // lazy
            i->lazy += val1;
            i->sum += 1LL * val1 * (R - L + 1);
 
            return;
        }
 
        i->create();
 
        down(i, L, R);
        int M = (L + R) >> 1;
        update(i->l, L, M, l, r, val0, val1);
        update(i->r, M + 1, R, l, r, val0, val1);
 
        // polynimal
        i->seg0 = (i->l->seg0 + i->r->seg0) % mod;
        i->seg1 = (i->l->seg1 + i->r->seg1) % mod;

        // lazy
        i->sum = i->l->sum + i->r->sum;
    }
 
    int getsum(node *i, int L, int R, int l, int r) {
        if (r < L || l > R) return 0;
        if (l <= L && R <= r) return (i->seg0 + i->seg1) % mod;
 
        i->create();
 
        down(i, L, R);
        int M = (L + R) >> 1;
 
        int nodeL = getsum(i->l, L, M, l, r);
        int nodeR = getsum(i->r, M + 1, R, l, r);
 
        return (nodeL + nodeR) % mod;
    }

    long long getcnt(node *i, int L, int R, int l, int r) {
        if (r < L || l > R) return 0;
        if (l <= L && R <= r) return i->sum;
        i->create();
        down(i, L, R);
        int M = (L + R) >> 1;
        return getcnt(i->l, L, M, l, r) + getcnt(i->r, M + 1, R, l, r);
    }

    int walk(node *i, int L, int R, long long c) {
        if (L == R) return L;

        i->create();
        down(i, L, R);
        
        int M = (L + R) >> 1;
        if (i->l->sum >= c) return walk(i->l, L, M, c);
        else return walk(i->r, M + 1, R, c - i->l->sum);
    }
 
    void update(int l, int r, int val0, int val1){
        update(root, 1, n, l, r, val0, val1);
    }
    int getsum(int l, int r) {
        return getsum(root, 1, n, l, r);
    }

    long long getcnt(int l, int r) {
        return getcnt(root, 1, n, l, r);
    }

    int walk(long long c) {
        return walk(root, 1, n, c);
    }

    long long getall() {
        return root->sum;
    }

} t;

int getX(int l, int r, int num) {
    t.update(l, r, 0, num);

    long long cntval = t.getall();

    cntval = (cntval / 2) + 1;
    long long opt_value = t.walk(cntval);

    long long cntL = t.getcnt(1, opt_value);
    long long cntR = t.getall() - cntL;

    long long sumL = (1LL * opt_value * (cntL % mod) % mod - t.getsum(1, opt_value) + mod) % mod;
    long long sumR = (t.getsum(opt_value + 1, n) - 1LL * opt_value * (cntR % mod) % mod + mod) % mod;

    return (sumL + sumR) % mod;

    return 0;
}

int getY(int l, int r, int num) {
    t.update(l, r, 0, num);

    long long cntval = t.getall();

    cntval = (cntval / 2) + 1;
    long long opt_value = t.walk(cntval);

    long long cntL = t.getcnt(1, opt_value);
    long long cntR = t.getall() - cntL;

    long long sumL = (1LL * opt_value * (cntL % mod) % mod - t.getsum(1, opt_value) + mod) % mod;
    long long sumR = (t.getsum(opt_value + 1, m) - 1LL * opt_value * (cntR % mod) % mod + mod) % mod;

    return (sumL + sumR) % mod;

    return 0;
}

int res[N];

void process() {
    int subtask; cin >> subtask;

    cin >> m >> n >> q;

    for (int i = 1; i <= q; ++i) cin >> u[i] >> v[i] >> l[i] >> r[i];

    // X
    t.init(n);

    for (int i = 1; i <= q; ++i) {
        int sum = getX(l[i], r[i], v[i] - u[i] + 1);
        res[i] = sum;
    }

    // Y
    t.init(m);

    for (int i = 1; i <= q; ++i) {
        int sum = getY(u[i], v[i], r[i] - l[i] + 1);
        res[i] = (res[i] + sum) % mod;
    }

    for (int i = 1; i <= q; ++i) {
        cout << res[i] << '\n';
    }
}

signed main() {
    ios::sync_with_stdio(false);
    cin.tie(0);

    #ifdef LOCAL
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    #else 
    freopen(task"".inp"", ""r"", stdin);
    freopen(task"".out"", ""w"", stdout);
    #endif

    int tc = 1;
    // cin >> tc;
    
    while (tc--) {
        process();
    }

    return 0;
}

/*

*/"
utqEUWM3,Untitled,Farz0l1x,Python,Monday 18th of December 2023 03:28:33 AM CDT,"file = open('3A.txt')
A = list(map(int, file.readlines()))
count = 0 
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] * A[j]) % 65 == 0:
            count += 1
print(count)

file = open('3B.txt')
A = list(map(int, file.readlines()))
k5, k13, k65 = 0, 0, 0
count = 0
for i in range(len(A)):
    if A[i] % 65 == 0:
        count += i
    elif A[i] % 13 == 0:
        count += k5
    elif A[i] % 5 == 0:
        count += k13
    else:
        count += k65
    if A[i] % 5 == 0:
        k5 += 1
    if A[i] % 13 == 0:
        k13 += 1
    if A[i] % 65 == 0:
        k65 += 1
print(count)"
ksgpQDiJ,Untitled,kwest87,C#,Monday 18th of December 2023 03:27:23 AM CDT,"[StartCode]
using System;

namespace ConsoleApp14
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string commandSum = ""sum"";
            const string commandExit = ""exit"";

            string userInput;
            int[] array = new int[0];
            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine($""Введите команду : цифру , {commandSum} или {commandExit}."");
                userInput = Console.ReadLine();

                if (userInput == commandSum)
                {
                    int sumNumber = 0;

                    for (int i = 0; i < array.Length; i++)
                    {
                        sumNumber += array[i];
                    }

                    Console.WriteLine(sumNumber);
                }
                else if (userInput == commandExit)
                {
                    isWork = false;
                }
                else
                {
                    int[] temporaryArray = new int[array.Length + 1];
                    temporaryArray[array.Length] = Convert.ToInt32(userInput);

                    for (int i = 0; i < array.Length; i++)
                    {
                        temporaryArray[i] = array[i];
                    }

                    array = temporaryArray;
                }
            }
        }
    }
}
[EndCode]"
k9J660XB,vainfo,bluebyt,INI file,Monday 18th of December 2023 03:21:19 AM CDT,"vainfo
Trying display: wayland
vainfo: VA-API version: 1.20 (libva 2.20.1)
vainfo: Driver version: Intel i965 driver for Intel(R) Coffee Lake - 2.4.1
vainfo: Supported profile and entrypoints
      VAProfileMPEG2Simple            :	VAEntrypointVLD
      VAProfileMPEG2Simple            :	VAEntrypointEncSlice
      VAProfileMPEG2Main              :	VAEntrypointVLD
      VAProfileMPEG2Main              :	VAEntrypointEncSlice
      VAProfileH264ConstrainedBaseline:	VAEntrypointVLD
      VAProfileH264ConstrainedBaseline:	VAEntrypointEncSlice
      VAProfileH264ConstrainedBaseline:	VAEntrypointEncSliceLP
      VAProfileH264Main               :	VAEntrypointVLD
      VAProfileH264Main               :	VAEntrypointEncSlice
      VAProfileH264Main               :	VAEntrypointEncSliceLP
      VAProfileH264High               :	VAEntrypointVLD
      VAProfileH264High               :	VAEntrypointEncSlice
      VAProfileH264High               :	VAEntrypointEncSliceLP
      VAProfileH264MultiviewHigh      :	VAEntrypointVLD
      VAProfileH264MultiviewHigh      :	VAEntrypointEncSlice
      VAProfileH264StereoHigh         :	VAEntrypointVLD
      VAProfileH264StereoHigh         :	VAEntrypointEncSlice
      VAProfileVC1Simple              :	VAEntrypointVLD
      VAProfileVC1Main                :	VAEntrypointVLD
      VAProfileVC1Advanced            :	VAEntrypointVLD
      VAProfileNone                   :	VAEntrypointVideoProc
      VAProfileJPEGBaseline           :	VAEntrypointVLD
      VAProfileJPEGBaseline           :	VAEntrypointEncPicture
      VAProfileVP8Version0_3          :	VAEntrypointVLD
      VAProfileVP8Version0_3          :	VAEntrypointEncSlice
      VAProfileHEVCMain               :	VAEntrypointVLD
      VAProfileHEVCMain               :	VAEntrypointEncSlice
      VAProfileHEVCMain10             :	VAEntrypointVLD
      VAProfileHEVCMain10             :	VAEntrypointEncSlice
      VAProfileVP9Profile0            :	VAEntrypointVLD
      VAProfileVP9Profile0            :	VAEntrypointEncSlice
      VAProfileVP9Profile2            :	VAEntrypointVLD
"
uXaUMfpt,Untitled,Farz0l1x,Python,Monday 18th of December 2023 03:20:26 AM CDT,"file = open('2A.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] * A[j]) % 7 == 0:
            count += 1
print(count)

file = open('2B.txt')
A = list(map(int, file.readlines()))
count = 0
k7 = 0
for i in range(len(A)):
    if A[i] % 7 == 0:
        count += i
    else:
        count += k7
    if A[i] % 7 == 0:
        k7 += 1
print(count)"
aPbeSrUr,Untitled,Farz0l1x,Python,Monday 18th of December 2023 03:12:35 AM CDT,"file = open('1A.txt')
A = list(map(int, file.readlines()))
count = 0
for i in range(len(A)):
    for j in range(i + 1, len(A)):
        if (A[i] + A[j]) % 2 == 0:
            count += 1
print(count)

file = open('1B.txt')
A = list(map(int, file.readlines()))
k = [0] * 2
count = 0
for i in range(len(A)):
    ost = (2 - A[i] % 2) % 2
    count += k[ost]
    k[A[i]%2] += 1
print(count)"
63ue5kM4,wl-screenrec -v,bluebyt,INI file,Monday 18th of December 2023 03:10:22 AM CDT,"wl-screenrec -v
Your compositor does not support wp_drm_lease_device_v1, so guessing that dri device is /dev/dri/renderD128. pass --dri-device if this is incorrect or to suppress this warning
Using output HDMI-A-1
Opening libva device from DRM device /dev/dri/renderD128
+----------+
|    in    |default--[2560x1440 0:1 vaapi]--Parsed_crop_0:default
| (buffer) |
+----------+

                                                            +--------------+
Parsed_scale_vaapi_1:default--[2560x1440 0:1 vaapi]--default|     out      |
                                                            | (buffersink) |
                                                            +--------------+

                                          +---------------+
in:default--[2560x1440 0:1 vaapi]--default| Parsed_crop_0 |default--[2560x1440 0:1 vaapi]--Parsed_scale_vaapi_1:default
                                          |    (crop)     |
                                          +---------------+

                                                     +----------------------+
Parsed_crop_0:default--[2560x1440 0:1 vaapi]--default| Parsed_scale_vaapi_1 |default--[2560x1440 0:1 vaapi]--out:default
                                                     |    (scale_vaapi)     |
                                                     +----------------------+


[h264_vaapi @ 0x55e54a264600] Driver does not support any RC mode compatible with selected options (supported modes: CQP).
failed to open encoder in low_power mode (Invalid argument), trying non low_power mode. if you have an intel iGPU, set enable_guc=2 in the i915 module to use the fixed function encoder. pass --low-power=off to suppress this warning
Output #0, mp4, to 'screenrecord.mp4':
  Metadata:
    encoder         : Lavf60.16.100
  Stream #0:0: Video: h264 (High) (avc1 / 0x31637661), vaapi, 2560x1440, q=2-31, 40000 kb/s, 90k tbn
58 fps
60 fps
60 fps
59 fps
"
QN5ctJCt,Python Bubble Sort,IMustRemainUnknown,Python,Monday 18th of December 2023 03:02:41 AM CDT,"def my_bubble_sort(arr):
    while True:
        has_no_switch = True
        
        for i in range(len(arr) - 1):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                has_no_switch = False

        if has_no_switch:
            break
    return arr


myList = [4, 2, 89, 12, 6, 32]
print(my_bubble_sort(myList))

myList = [4, 2, 89, 12, 6, 32, 17, 29, 8, 1]
print(my_bubble_sort(myList))"
cxcU9EFu,Simple Clicker Game,Celestial_Dodo,Swift,Monday 18th of December 2023 02:57:20 AM CDT,"import SwiftUI

struct ContentView: View {
    @State private var timer: Timer?
    @State var Reload: Bool = false
    @State private var Money: Int = 0
    @State private var PerClick: Int = 1
    @State private var PerSecond: Int = 0
    @State private var DevValue1: String = """"
    
    var body: some View {
        VStack {
            DisclosureGroup(""Admin"") {
                Button(""Reload"") {
                    Reload = true
                    Reload = false
                }
                DisclosureGroup(""Money"") {
                    TextField(""Amount Of Money"", text: $DevValue1)
                    
                    Button(""Set"") {
                        Money = Int(DevValue1) ?? Money
                    }
                    Button(""Add"") {
                        Money += Int(DevValue1) ?? 0
                    }
                    Button(""Remove"") {
                        Money -= Int(DevValue1) ?? 0
                    }
                }
            }
            GroupBox() {
                Button(""+""+String(PerClick)+""$"") {
                    Money += PerClick
                }
            }
            Text(""Hello, world!"")
            let Shop1 = GroupBox() {
                Button(""+1 Per Click - 80$"") {
                    if Money >= 80 {
                        Money -= 80
                        PerClick += 1
                    }
                }
                Text(""\n"")
                Button(""+5 Per Click - 350$"") {
                    if Money >= 350 {
                        Money -= 350
                        PerClick += 5
                    }
                }
            }
            let Shop2 = GroupBox() {
                Button(""+1 Per Second - 170$"") {
                    if Money >= 170 {
                        Money -= 170
                        PerSecond += 1
                        updateTimerInterval()
                    }
                }
                Text(""\n"")
                Button(""+5 Per Second - 800$"") {
                    if Money >= 800 {
                        Money -= 800
                        PerSecond += 5
                        updateTimerInterval()
                    }
                }
            }
            GroupBox(""Stats"") {
                LabeledContent(""Money: "") {
                    Text(String(Money))
                }
                LabeledContent(""Per Click: "") {
                    Text(String(PerClick))
                }
                LabeledContent(""Per Second: "") {
                    Text(String(PerSecond))
                }
            }
            GroupBox(""Shop"") {
                TabView(selection: .constant(1)) {
                    Shop1.tabItem { Text(""Per Click"") }.tag(1)
                    Shop2.tabItem { Text(""Per Second"") }.tag(2)
                }
            }
        }
        // Start the timer when the view appears
        .onAppear(perform: startTimer)
        // Stop the timer when the view disappears
        .onDisappear(perform: stopTimer)
    }
    
    func startTimer() {
        // Use a timer to execute a closure with a dynamic interval
        timer = Timer.scheduledTimer(withTimeInterval: 1.0 / Double(PerSecond), repeats: true) { _ in
            // Increase money every second
            Money += 1
        }
    }
    
    func stopTimer() {
        timer?.invalidate()
    }
    
    func updateTimerInterval() {
        // Stop the current timer
        stopTimer()
        
        // Start a new timer with the updated interval
        startTimer()
    }
}
"
mn80bTzf,"AoC 2023 day 18, part 1 (Smalltalk)",musifter,Smalltalk,Monday 18th of December 2023 02:26:23 AM CDT,"#!/usr/local/bin/gst -q

""
| Mainline
""
area   := 0.
pos    := (0 @ 0).
trench := 0.

stdin linesDo: [ :line |
    parts := line subStrings.

    delta := parts second asNumber.
    vert := (parts first = 'U') | (parts first = 'D').
    (parts first = 'U') | (parts first = 'L') ifTrue: [ delta := delta * -1 ].

    vert ifTrue:  [ pos y: (pos y + delta) ]
         ifFalse: [ pos x: (pos x + delta) ].

    area := area + (delta * (vert ifTrue: [pos x] ifFalse: [-1 * pos y])).
    trench := trench + delta abs.
].

part1 := (area abs + trench) / 2 + 1.
('Part 1: %1' % {part1}) displayNl.
"
Kmnee2Gy,"AoC 2023 day 18, part 2 (Smalltalk)",musifter,Smalltalk,Monday 18th of December 2023 02:25:22 AM CDT,"#!/usr/local/bin/gst -q

String extend [ asRadix: rad [^Number readFrom: (ReadStream on: self) radix: rad] ]

""
| Mainline
""
area   := 0.
pos    := (0 @ 0).
trench := 0.

stdin linesDo: [ :line |
    parts := line subStrings.

    delta := (parts third atAll: (3 to: 7)) asRadix: 16.
    dir   := (parts third at: 8) digitValue.

    vert := (dir \\ 2) = 1.                         "" U and D ""
    (dir >= 2) ifTrue: [ delta := delta * -1 ].     "" U and L ""

    vert ifTrue:  [ pos y: (pos y + delta) ]
         ifFalse: [ pos x: (pos x + delta) ].

    area := area + (delta * (vert ifTrue: [pos x] ifFalse: [-1 * pos y])).
    trench := trench + delta abs.
].

part2 := (area abs + trench) / 2 + 1.
('Part 2: %1' % {part2}) displayNl.
"
5w8qsuDf,QuickSort in Python,IMustRemainUnknown,Python,Monday 18th of December 2023 01:38:40 AM CDT,"def quick_sort(arr):
    if arr is None or len(arr) <= 1:
        return

    stack = [(0, len(arr) - 1)]

    while stack:
        low, high = stack.pop()

        pivot_index = partition(arr, low, high)

        if pivot_index - 1 > low:
            stack.append((low, pivot_index - 1))

        if pivot_index + 1 < high:
            stack.append((pivot_index + 1, high))


def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1

    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]

    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1


# Example usage
# arr = [64, 34, 25, 12, 22, 11, 90]
arr = [22, 11, 88, 66, 55, 77, 33, 44, 75, 27]
print(""Original array:"", arr)

quick_sort(arr)

print(""Sorted array:"", arr)"
41KiGAg1,Advent of Code 2023 - Day 18,mgla,C#,Monday 18th of December 2023 01:20:41 AM CDT,"var input = File.ReadAllLines(""input.txt"");

var polygon1 = new List<(long Row, long Col)>();
(long Row, long Col) currentPosition1 = (0, 0);
var circumference1 = 0.0;

var polygon2 = new List<(long Row, long Col)>();
(long Row, long Col) currentPosition2 = (0, 0);
var circumference2 = 0.0;

foreach (var line in input)
{
    polygon1.Add(currentPosition1);
    var move = line.Split(' ');

    var length1 = int.Parse(move[1]);
    currentPosition1 = move[0] switch
    {
        ""R"" => (currentPosition1.Row, currentPosition1.Col + length1),
        ""D"" => (currentPosition1.Row + length1, currentPosition1.Col),
        ""L"" => (currentPosition1.Row, currentPosition1.Col - length1),
        ""U"" => (currentPosition1.Row - length1, currentPosition1.Col),
        _ => throw new Exception(""Unknown direction"")
    };

    circumference1 += length1;

    polygon2.Add(currentPosition2);
    var hex = move[2].TrimStart('(').TrimEnd(')');
    var length2 = long.Parse(hex[1..^1], System.Globalization.NumberStyles.HexNumber);

    currentPosition2 = hex.Last() switch
    {
        '0' => (currentPosition2.Row, currentPosition2.Col + length2), // R
        '1' => (currentPosition2.Row + length2, currentPosition2.Col), // D
        '2' => (currentPosition2.Row, currentPosition2.Col - length2), // L
        '3' => (currentPosition2.Row - length2, currentPosition2.Col), // U
        _ => throw new Exception(""Unknown direction"")
    };

    circumference2 += length2;
}

Console.WriteLine($""Part 1: {Area(polygon1) + circumference1 / 2 + 1}"");
Console.WriteLine($""Part 2: {Area(polygon2) + circumference2 / 2 + 1}"");
return;

// Shoelace formula, found it on the internet:
// https://rosettacode.org/wiki/Shoelace_formula_for_polygonal_area#C#
static double Area(List<(long Row, long Col)> polygon)
{
    var n = polygon.Count;
    var result = 0.0;
    for (var i = 0; i < n - 1; i++)
    {
        result += polygon[i].Row * polygon[i + 1].Col - polygon[i + 1].Row * polygon[i].Col;
    }

    result = Math.Abs(result + polygon[n - 1].Row * polygon[0].Col - polygon[0].Row * polygon[n - 1].Col) / 2.0;
    return result;
}"
yM9XCJFH,"AoC 2023 day 18, part 2 (Perl)",musifter,Perl,Monday 18th of December 2023 12:53:56 AM CDT,"#!/usr/bin/perl

use strict;
use warnings;

use feature         qw(say);

use Math::Vector::Real;
my ($Y,$X) = Math::Vector::Real->canonical_base(2);
my @Dirs = ($X, $Y, -$X, -$Y);

my $pos = V(0,0);
my @vertices = ($pos);
my $trench = 0;

while (<>) {
    my ($col) = m#[UDLR] \d+ (.*)#g;
    my ($len, $dir) = ($col =~ m#([[:xdigit:]]{5})(\d)#g);

    $len = oct(""0x$len"");

    $trench += $len;
    push( @vertices, $pos += $len * $Dirs[$dir] );
}

# Shoelace for area (loop gives twice the area (sign +'ve widdershins, -'ve for deasil))
my $area = 0;
foreach my $i (0 .. $#vertices - 1) {
    $area += $vertices[$i][0] * $vertices[$i+1][1];
    $area -= $vertices[$i][1] * $vertices[$i+1][0];
}

# Pick's formula: I+B = A + B/2 + 1 (but still needed to halve the Area from shoelace)
say ""Part 2: "", (abs($area) + $trench) / 2 + 1;
"
T1sUJJkL,Untitled,Hend_Sayed,Python,Sunday 17th of December 2023 11:57:46 PM CDT,"from PyQt5.QtWidgets import QMainWindow, QPushButton, QLabel, QVBoxLayout, QWidget, QFileDialog, QProgressBar, QVBoxLayout, QHBoxLayout,QMessageBox 
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt, QBuffer
from PIL import Image
import cv2
import numpy as np
import io
import os
import logging

class ImageProcessor(QMainWindow):
    """"""
    A class that represents an image processor application.

    This class inherits from QMainWindow and provides functionality to load, compress, and reduce noise in images.

    Attributes:
        central_widget (QWidget): The central widget of the QMainWindow.
        layout (QVBoxLayout): The layout that lays out the whole form.
        load_button (QPushButton): The button to load an image.
        original_label (QLabel): The label to display the original image.
        compress_button (QPushButton): The button to compress the image.
        compressed_label (QLabel): The label to display the compressed image.
        reduce_noise_button (QPushButton): The button to reduce noise in the image.
        noise_reduced_label (QLabel): The label to display the noise-reduced image.
        progress_bar (QProgressBar): The progress bar to show the progress of image processing.
        image (PIL.Image.Image): The currently loaded image.

    Methods:
        load_image: Loads an image and displays it.
        compress_image: Compresses the loaded image and displays the compressed image.
        reduce_noise: Reduces noise in the loaded image and displays the noise-reduced image.
    """"""
    def __init__(self):
        super().__init__()
        self.setFixedSize(600, 600)
        # Create a QWidget as the central widget of the QMainWindow
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)

        # Create the QVBoxLayout that lays out the whole form
        self.layout = QVBoxLayout(self.central_widget)

        self.setStyleSheet(""background-color: #F3EEEA;"")

        # Create a QVBoxLayout for each image and its corresponding button
        self.original_layout = QHBoxLayout()
        self.compressed_layout = QHBoxLayout()
        self.noise_reduced_layout = QHBoxLayout()

        # Create the buttons and add them to their corresponding layouts
        self.load_button = QPushButton('Load image', self)
        # add color to the button
        self.load_button.setStyleSheet(""background-color: #776B5D; color: white; border-radius: 10px; font-size: 20px; height: 50px; width: 150px"")
        self.load_button.clicked.connect(self.load_image)
        self.original_layout.addWidget(self.load_button)

        self.compress_button = QPushButton('Compress image', self)
        self.compress_button.setStyleSheet(""background-color: #776B5D; color: white; border-radius: 10px; font-size: 20px; height: 50px; width: 150px"")
        self.compress_button.clicked.connect(self.compress_image)
        self.compressed_layout.addWidget(self.compress_button)

        self.reduce_noise_button = QPushButton('Reduce noise', self)
        self.reduce_noise_button.setStyleSheet(""background-color: #776B5D; color: white; border-radius: 10px; font-size: 20px; height: 50px; width: 150px"")
        self.reduce_noise_button.clicked.connect(self.reduce_noise)
        self.noise_reduced_layout.addWidget(self.reduce_noise_button)

        # Create the labels and add them to their corresponding layouts
        self.original_label = QLabel(self)
        self.original_label.setContentsMargins(10, 10, 10, 10)  # Add padding
        self.original_layout.addWidget(self.original_label)

        self.compressed_label = QLabel(self)
        self.compressed_label.setContentsMargins(10, 10, 10, 10)  # Add padding
        self.compressed_layout.addWidget(self.compressed_label)

        self.noise_reduced_label = QLabel(self)
        self.noise_reduced_label.setContentsMargins(10, 10, 10, 10)  # Add padding
        self.noise_reduced_layout.addWidget(self.noise_reduced_label)

        # Create the size labels and add them to their corresponding layouts
        self.original_size_label = QLabel(self)
        self.original_size_label.setStyleSheet(""color: #776B5D; font-size: 20px; height: 50px; width: 150px"")
        self.original_layout.addWidget(self.original_size_label)

        self.compressed_size_label = QLabel(self)
        self.compressed_size_label.setStyleSheet(""color: #776B5D; font-size: 20px; height: 50px; width: 150px"")
        self.compressed_layout.addWidget(self.compressed_size_label)

        # Add the image layouts to the main layout
        self.layout.addLayout(self.original_layout)
        self.layout.addLayout(self.compressed_layout)
        self.layout.addLayout(self.noise_reduced_layout)

        # Initialize image to None
        self.image = None

    def load_image(self):
        """"""
        Opens a file dialog to select an image file, loads the image, and displays it in the original_label.
        """"""
        fname, _ = QFileDialog.getOpenFileName(self, 'Open file', '/home')
        if fname:
            # Clear previous data
            self.original_label.clear()
            self.compressed_label.clear()
            self.noise_reduced_label.clear()
            if hasattr(self, 'original_size_label'):
                self.original_size_label.clear()
            if hasattr(self, 'compressed_size_label'):
                self.compressed_size_label.clear()

            self.image = Image.open(fname)
            pixmap = QPixmap(fname)
            pixmap = pixmap.scaled(400, 400, Qt.KeepAspectRatio)
            self.image = Image.open(fname)
            original_size = os.path.getsize(fname) / 1024  # size in KB
            self.original_size_label.setText(f""Original size: {original_size:.2f} KB"")
            self.layout.addWidget(self.original_size_label)
            
            self.original_label.setPixmap(pixmap)
            print(""Image opened and set to pixmap"")
        else:
            QMessageBox.warning(self, ""No image selected"", ""Please select an image."")

    def compress_image(self):
        """"""
        Compresses the loaded image using the JPEG algorithm, updates the progress bar, and displays the compressed image.
        """"""
        if self.image is None:
            logging.warning(""No image was selected."")
            QMessageBox.warning(self, ""No image selected"", ""Please select an image."")
            return

        # Compress the image using the JPEG algorithm
        logging.info(""Compressing image."")
        buf = io.BytesIO()
        self.image.save(buf, format='JPEG', quality=10)
        byte_im = buf.getvalue()
        buf.close()

        # Convert the compressed image back into a QImage
        logging.info(""Converting compressed image back into a QImage."")
        qimg = QImage()
        qimg.loadFromData(byte_im)
        pixmap = QPixmap.fromImage(qimg)
        pixmap = pixmap.scaled(400, 400, Qt.KeepAspectRatio)
        self.compressed_label.setPixmap(pixmap)

        # Save the compressed image
        buffer = QBuffer()
        buffer.open(QBuffer.ReadWrite)
        qimg.save(buffer, ""PNG"")

        pil_img = Image.open(io.BytesIO(buffer.data()))
        pil_img.save('compressed_image.jpg', 'JPEG')
        compressed_size = os.path.getsize('compressed_image.jpg') / 1024  # size in KB
        self.compressed_size_label.setText(f""Compressed size: {compressed_size:.2f} KB"")
        self.layout.addWidget(self.compressed_size_label)


    def reduce_noise(self):
        """"""
        Reduces noise in the loaded image using Gaussian blur, updates the progress bar, and displays the noise-reduced image.
        """"""
        print(""Reducing noise..."")
        if self.image is None:
            print(""Image is None"")
            QMessageBox.warning(self, ""No image selected"", ""Please select an image."")
            return

        # Convert the image to grayscale
        open_cv_image = np.array(self.image)
        open_cv_image = open_cv_image[:, :, ::-1].copy()
        open_cv_image = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)

        # Apply Gaussian blur
        print(""Applying Gaussian blur"")
        open_cv_image = cv2.GaussianBlur(open_cv_image, (5, 5), 0)

        # Convert the image to a QImage
        height, width = open_cv_image.shape
        bytes_per_line = 1 * width
        q_img = QImage(open_cv_image.data, width, height, bytes_per_line, QImage.Format_Grayscale8)

        # Display the image
        print(""Displaying image"")
        pixmap = QPixmap.fromImage(q_img)
        pixmap = pixmap.scaled(400, 400, Qt.KeepAspectRatio)
        self.noise_reduced_label.setPixmap(pixmap)

        # Save the noise reduced image
        buffer = QBuffer()
        buffer.open(QBuffer.ReadWrite)
        q_img.save(buffer, ""PNG"")

        byte_array = buffer.data()
        buffer.close()

        pil_img = Image.open(io.BytesIO(byte_array))
        pil_img.save('noise_reduced_image.jpg', 'JPEG')"
EmvMmMxh,СПРИНТ № 4 | Обработка ошибок. Исключения | Урок 3: Применяем класс optional,chevengur,C++,Sunday 17th of December 2023 11:54:09 PM CDT,"#include <algorithm>
#include <cmath>
#include <iostream>
#include <map>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <optional>

using namespace std;

const int MAX_RESULT_DOCUMENT_COUNT = 5;

string ReadLine() {
    string s;
    getline(cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result;
    cin >> result;
    ReadLine();
    return result;
}

vector<string> SplitIntoWords(const string& text) {
    vector<string> words;
    string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        } else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

struct Document {
    Document() = default;

    Document(int id, double relevance, int rating)
        : id(id)
        , relevance(relevance)
        , rating(rating) {
    }

    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

template <typename StringContainer>
set<string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    set<string> non_empty_strings;
    for (const string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

class SearchServer {
public:

    inline static constexpr int INVALID_DOCUMENT_ID = -1;

    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words)
        : stop_words_(MakeUniqueNonEmptyStrings(stop_words)) {
    }

    explicit SearchServer(const string& stop_words_text)
        : SearchServer(
            SplitIntoWords(stop_words_text))  // Invoke delegating constructor from string container
    {
    }

    bool AddDocument(int document_id, const string& document, DocumentStatus status,
                                   const vector<int>& ratings) {
        if (document_id < 0 || documents_.count(document_id) || IsValidWord(document)==false) {
            return false;
        }else{
            const vector<string> words = SplitIntoWordsNoStop(document);
            const double inv_word_count = 1.0 / words.size();
            for (const string& word : words) {
                word_to_document_freqs_[word][document_id] += inv_word_count;
            }
            documents_.emplace(document_id, DocumentData{ComputeAverageRating(ratings), status});
            document_ids.push_back(document_id);
            return true;
        }
    }

    template <typename DocumentPredicate>
    optional<vector<Document>> FindTopDocuments(const string& raw_query,
                                        DocumentPredicate document_predicate) const {
        if(IsValidQuery(raw_query)==false){
            return nullopt;
        }else{
            optional<vector<Document>> result;
            const Query query = ParseQuery(raw_query);
            auto matched_documents = FindAllDocuments(query, document_predicate);
            sort(matched_documents.begin(), matched_documents.end(),
                 [](const Document& lhs, const Document& rhs) {
                     if (abs(lhs.relevance - rhs.relevance) < 1e-6) {
                         return lhs.rating > rhs.rating;
                     } else {
                         return lhs.relevance > rhs.relevance;
                     }
                 });
            if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
                matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
            }
            result = matched_documents;
            return result;
        }
    }

    optional<vector<Document>> FindTopDocuments(const string& raw_query, DocumentStatus status) const {
        if(IsValidQuery(raw_query)==false) {
            return nullopt;
        }else{
            return FindTopDocuments(
                raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
                    return document_status == status;
                });
        }
    }

    optional<vector<Document>> FindTopDocuments(const string& raw_query) const {
        if(IsValidQuery(raw_query)==false) {
            return nullopt;
        }else{
            return FindTopDocuments(raw_query, DocumentStatus::ACTUAL);
        }
    }

    int GetDocumentCount() const {
        return documents_.size();
    }

    optional<tuple<vector<string>, DocumentStatus>> MatchDocument(const string& raw_query,
                                     int document_id) const {
        if(IsValidQuery(raw_query)==false){
            return nullopt;
        }else{
            const Query query = ParseQuery(raw_query);
            vector<string> matched_words;
            for (const string& word : query.plus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.push_back(word);
                }
            }
            for (const string& word : query.minus_words) {
                if (word_to_document_freqs_.count(word) == 0) {
                    continue;
                }
                if (word_to_document_freqs_.at(word).count(document_id)) {
                    matched_words.clear();
                    break;
                }
            }
            auto result = tuple{matched_words, documents_.at(document_id).status};
            return result;
        }
    }

    int GetDocumentId(const int index) const {
        if(index<0 || !(index<GetDocumentCount())){
            return SearchServer::INVALID_DOCUMENT_ID;
        }
        return document_ids[index];
    }

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;
    vector<int> document_ids;

    bool IsStopWord(const string& word) const {
        return stop_words_.count(word) > 0;
    }

    vector<string> SplitIntoWordsNoStop(const string& text) const {
        vector<string> words;
        for (const string& word : SplitIntoWords(text)) {
            if (!IsStopWord(word)) {
                words.push_back(word);
            }
        }
        return words;
    }

    static int ComputeAverageRating(const vector<int>& ratings) {
        if (ratings.empty()) {
            return 0;
        }
        int rating_sum = 0;
        for (const int rating : ratings) {
            rating_sum += rating;
        }
        return rating_sum / static_cast<int>(ratings.size());
    }

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(string text) const {
        bool is_minus = false;
        QueryWord result;
        // Word shouldn't be empty
        if (text[0] == '-') {
            is_minus = true;
            text = text.substr(1);
        }
        result = {text, is_minus, IsStopWord(text)};
        return result;
    }

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const {
        Query query;
        for (const string& word : SplitIntoWords(text)) {
            const QueryWord query_word = ParseQueryWord(word);
            if (!query_word.is_stop) {
                if (query_word.is_minus) {
                    query.minus_words.insert(query_word.data);
                } else {
                    query.plus_words.insert(query_word.data);
                }
            }
        }
        return query;
    }

    // Existence required
    double ComputeWordInverseDocumentFreq(const string& word) const {
        return log(GetDocumentCount() * 1.0 / word_to_document_freqs_.at(word).size());
    }

    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query,
                                      DocumentPredicate document_predicate) const {
        map<int, double> document_to_relevance;
        for (const string& word : query.plus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
            for (const auto [document_id, term_freq] : word_to_document_freqs_.at(word)) {
                const auto& document_data = documents_.at(document_id);
                if (document_predicate(document_id, document_data.status, document_data.rating)) {
                    document_to_relevance[document_id] += term_freq * inverse_document_freq;
                }
            }
        }

        for (const string& word : query.minus_words) {
            if (word_to_document_freqs_.count(word) == 0) {
                continue;
            }
            for (const auto [document_id, _] : word_to_document_freqs_.at(word)) {
                document_to_relevance.erase(document_id);
            }
        }

        vector<Document> matched_documents;
        for (const auto [document_id, relevance] : document_to_relevance) {
            matched_documents.push_back(
                {document_id, relevance, documents_.at(document_id).rating});
        }
        return matched_documents;
    }

    static bool IsValidWord(const string& word) {
        return none_of(word.begin(), word.end(), [](char c) {
            return c >= '\0' && c < ' ';
        });
    }

    static bool IsValidQuery(const string& raw_query) {
        if(IsValidWord(raw_query)==false) {
            return false;
        }
        for (int i = 0; i < raw_query.size(); ++i) {
            if (raw_query[i] == '-' || raw_query[raw_query.size()-1]=='-') {
                if (raw_query[i + 1] == '-' || raw_query[i + 1] == ' ') {
                    return false;
                }
            }
        }
        return true;
    }
};

void PrintDocument(const Document& document) {
    cout << ""{ ""s
         << ""document_id = ""s << document.id << "", ""s
         << ""relevance = ""s << document.relevance << "", ""s
         << ""rating = ""s << document.rating << "" }""s << endl;
}
int main() {
    SearchServer search_server(""и в на""s);
    // Явно игнорируем результат метода AddDocument, чтобы избежать предупреждения
    // о неиспользуемом результате его вызова
    (void) search_server.AddDocument(1, ""пушистый кот пушистый хвост""s, DocumentStatus::ACTUAL, {7, 2, 7});
    if (!search_server.AddDocument(1, ""пушистый пёс и модный ошейник""s, DocumentStatus::ACTUAL, {1, 2})) {
        cout << ""Документ не был добавлен, так как его id совпадает с уже имеющимся""s << endl;
    }
    if (!search_server.AddDocument(-1, ""пушистый пёс и модный ошейник""s, DocumentStatus::ACTUAL, {1, 2})) {
        cout << ""Документ не был добавлен, так как его id отрицательный""s << endl;
    }
    if (!search_server.AddDocument(3, ""большой пёс скво\x12рец""s, DocumentStatus::ACTUAL, {1, 3, 2})) {
        cout << ""Документ не был добавлен, так как содержит спецсимволы""s << endl;
    }
    if (const auto documents = search_server.FindTopDocuments(""--пушистый""s)) {
        for (const Document& document : *documents) {
            PrintDocument(document);
        }
    } else {
        cout << ""Ошибка в поисковом запросе""s << endl;
    }
}
"
BSDciY4s,sitemap generator xml,opencard,Python,Sunday 17th of December 2023 11:47:59 PM CDT,"# ~ pip install asyncio aiofile aiohttp sitemap-generator

from pysitemap import crawler
from pysitemap.parsers.lxml_parser import Parser

if __name__ == '__main__':
    root_url = 'http://d'
    crawler(
        root_url, out_file='sitemap.xml', exclude_urls=["".zip__""],
        http_request_options={""ssl"": False}, parser=Parser
    )"
mghVKqgC,Untitled,felixraj,Python,Sunday 17th of December 2023 11:41:47 PM CDT,"philip_completed = {""Rijo (rijoviany@gmail.com)"",
                    ""Lincy (hipsterlincy3@gmail.com)"",
                    ""Akhila (akhilardev2013@gmail.com)"",
                    ""Evugin (ebin2097@yahoo.com)"",
                    ""Vineesh (vineeshantony@gmail.com)"",
                    ""Shajohn  (shajohnrobert@gmail.com)"",
                    ""Ratheesh  (ratheeshyeslord@gmail.com)"",
                    ""Dr Shijin (drshijinms@gmail.com)"",
                    ""JijiMol (jijisimon22@gmail.com)"",
                    ""Francis T Raj (francistraj4962@gmail.com)"",
                    ""Abin (abinrc007@gmail.com)"",
                    ""Remya (remyasjesus@gmail.com)"",
                    ""Nimmy (prnimmy1994@gmail.com)"",
                    ""Abhilash A G (abhyjy@gmail.com)"",
                    ""Binoy (bengemine@gmail.com)"",
                    ""Akila (ahilasuri@gmail.com)"",
                    ""Bibin  (bibinstephensmail@gmail.com)"",
                    ""Vishwanathan (viswamlogos@gmail.com)"",
                    ""AMBROSE (ambro.clary16@gmail.com)"",
                    ""SHELTTAN (sheltanm97@gmail.com)"",
                    ""SHAMILI (shamilihelen@gmail.com)"",
                    ""Binoy (benbenoy6055@gmail.com)"",
                    ""Jibin (jibinjustusj@gmail.com)"",
                    ""Jerry (jerrygbensiar16@gmail.com)"",
                    ""Akhil (vpakhil957@gmail.com)"",
                    ""Athira (bencybency794@gmail.com)"",
                    ""Aneesh (aneeshan3@gmail.com)"",
                    ""Geethumol (geethumolvs1996@gmail.com)"",
                    ""Archana (jesuswitharchu@gmail.com)"",
                    ""Pradeep (jypradeepjoej@gmail.com)"",
                    ""Jicku (jickuvm2018@gmail.com)"",
                    ""Ajay (ajaymchacko1@gmail.com)"",
                    ""Sindhu (sindhrv@gmail.com)"",
                    ""ANILA (anilablawrence@gmail.com)"",
                    ""Sr. Annie (anniejoseph524@gmail.com)"",
                    ""Sajil (julie454277@gmail.com)"",
                    ""Rajesh (rajeshjklalu@gmail.com)"",
                    ""Felix (mailtofelixraj@gmail.com)"",
                    ""Midhun (midhunj94@gmail.com)"",
                    ""Pradeep (pradeepmariadeniston@gmail.com)"",
                    ""Bibin (bibinvs16061998@gmail.com)"",
                    ""Alice (aliceagnus849@gmail.com)"",
                    ""Adarsh (adarshjoyjj@gmail.com)"",
                    ""Adarsh (evaanoadarsh@gmail.com)"",
                    ""Abhijith (abhijithchikku2620@gmail.com)"",
                    ""Anu (anuanuf8@gmail.com)"",
                    ""Anishma (anishmamj07@gmail.com)"",
                    ""Christopher (christopherjsherly@gmail.com)"",
                    ""Jinumon (jinumon9526190952@gmail.com)"",
                    ""Rejin (rejinrmichael@gmail.com)"",
                    ""Akhil (agakhilag@gmail.com)"",
                    ""Joby (lawrancejoby@gmail.com)"",
                    ""Bright (bsbrightbs123@gmail.com)"",
                    ""Akhil (akhilmr900@gmail.com)"",
                    ""Anjali (anjaliup62@gmail.com)"",
                    ""Miji (mijimm1996@gmail.com)"",
                    ""Mijin  (mijinmmmm@gmail.com)"",
                    ""MIJISHA (mijishamm01@gmail.com)"",
                    ""Cinu (cinuammu1999@gmail.com)"",
                    ""Anand (joananand94@gmail.com)"",
                    ""Tini (tinirobertshalome@gmail.com)"",
                    ""Athira (athirass061@gmail.com)"",
                    ""Dhibu (dhibuss0@gmail.com)"",
                    ""Amal (amalnath908@gmail.com)"",
                    ""Nikhila (nikhilnikhila13@gmail.com)"",
                    ""Sarah (sarahjosebi@gmail.com)"",
                    ""Vachan (vachanbjmc@gmail.com)"",
                    ""Josna (josuj440@gmail.com)"",
                    ""Albinose (albinose2003@gmail.com)"",
                    ""Anjana (bs7741927@gmail.com)"",
                    ""Nevedhita (nevedhitaprakash14@gmail.com)"",
                    ""Ancy (ancyssuresh@gmail.com)"",
                    ""Athira (athiramulluvila0644@gmail.com)"",
                    ""Deepu (deepudv98@gmail.com)"",
                    ""Angel (angelmary.deepam@gmail.com)"",
                    ""Aakash (aakash7320@gmail.com)"",
                    }

paul_completed = {""Rijo (rijoviany@gmail.com)"",
                  ""Lincy (hipsterlincy3@gmail.com)"",
                  ""Akhila (akhilardev2013@gmail.com)"",
                  ""Vineesh (vineeshantony@gmail.com)"",
                  ""Shajohn  (shajohnrobert@gmail.com)"",
                  ""Ratheesh  (ratheeshyeslord@gmail.com)"",
                  ""Dr Shijin (drshijinms@gmail.com)"",
                  ""Francis T Raj (francistraj4962@gmail.com)"",
                  ""Remya (remyasjesus@gmail.com)"",
                  ""Abhilash A G (abhyjy@gmail.com)"",
                  ""Bibin  (bibinstephensmail@gmail.com)"",
                  ""Vishwanathan (viswamlogos@gmail.com)"",
                  ""AMBROSE (ambro.clary16@gmail.com)"",
                  ""SHAMILI (shamilihelen@gmail.com)"",
                  ""Binoy (benbenoy6055@gmail.com)"",
                  ""Jibin (jibinjustusj@gmail.com)"",
                  ""Jerry (jerrygbensiar16@gmail.com)"",
                  ""Akhil (vpakhil957@gmail.com)"",
                  ""Athira (bencybency794@gmail.com)"",
                  ""Aneesh (aneeshan3@gmail.com)"",
                  ""Geethumol (geethumolvs1996@gmail.com)"",
                  ""Archana (jesuswitharchu@gmail.com)"",
                  ""Pradeep (jypradeepjoej@gmail.com)"",
                  ""Jicku (jickuvm2018@gmail.com)"",
                  ""Ajay (ajaymchacko1@gmail.com)"",
                  ""Sindhu (sindhrv@gmail.com)"",
                  ""ANILA (anilablawrence@gmail.com)"",
                  ""Sr. Annie (anniejoseph524@gmail.com)"",
                  ""Rajesh (rajeshjklalu@gmail.com)"",
                  ""Felix (mailtofelixraj@gmail.com)"",
                  ""Pradeep (pradeepmariadeniston@gmail.com)"",
                  ""Bibin (bibinvs16061998@gmail.com)"",
                  ""Anu (anuanuf8@gmail.com)"",
                  ""Christopher (christopherjsherly@gmail.com)"",
                  ""Rejin (rejinrmichael@gmail.com)"",
                  ""Akhil (agakhilag@gmail.com)"",
                  ""Akhil (akhilmr900@gmail.com)"",
                  ""Anjali (anjaliup62@gmail.com)"",
                  ""Miji (mijimm1996@gmail.com)"",
                  ""Mijin  (mijinmmmm@gmail.com)"",
                  ""MIJISHA (mijishamm01@gmail.com)"",
                  ""Cinu (cinuammu1999@gmail.com)"",
                  ""Anand (joananand94@gmail.com)"",
                  ""Tini (tinirobertshalome@gmail.com)"",
                  ""Kanchana (kanchana1397@gmail.com)"",
                  ""Athira (athirass061@gmail.com)"",
                  ""Sarah (sarahjosebi@gmail.com)"",
                  ""Vachan (vachanbjmc@gmail.com)"",
                  ""Josna (josuj440@gmail.com)"",
                  ""Albinose (albinose2003@gmail.com)"",
                  ""Nevedhita (nevedhitaprakash14@gmail.com)"",
                  ""Deepu (deepudv98@gmail.com)"",
                  ""Angel (angelmary.deepam@gmail.com)"",
                  ""Aakash (aakash7320@gmail.com)"", }

paul_course_incomplete = {""Abhijith (abhijithchikku2620@gmail.com)"",
                          ""Abin (abinrc007@gmail.com)"",
                          ""Adarsh (evaanoadarsh@gmail.com)"",
                          ""Akila (ahilasuri@gmail.com)"",
                          ""Alice (aliceagnus849@gmail.com)"",
                          ""Anishma (anishmamj07@gmail.com)"",
                          ""Binoy (bengemine@gmail.com)"",
                          ""Bright (bsbrightbs123@gmail.com)"",
                          ""Dhibu (dhibuss0@gmail.com)"",
                          ""Evugin (ebin2097@yahoo.com)"",
                          ""JijiMol (jijisimon22@gmail.com)"",
                          ""Jinumon (jinumon9526190952@gmail.com)"",
                          ""Joby (lawrancejoby@gmail.com)"",
                          ""Nimmy (prnimmy1994@gmail.com)"",
                          ""Sajil (julie454277@gmail.com)"", }

emmaus_completed = {""Akhila (akhilardev2013@gmail.com)"",
                    ""Ratheesh  (ratheeshyeslord@gmail.com)"",
                    ""Abhilash A G (abhyjy@gmail.com)"",
                    ""AMBROSE (ambro.clary16@gmail.com)"",
                    ""Binoy (benbenoy6055@gmail.com)"",
                    ""Akhil (vpakhil957@gmail.com)"",
                    ""Akhil (akhilmr900@gmail.com)"", }

emmaus_incomplete = {'Bibin  (bibinstephensmail@gmail.com)', 'Anand (joananand94@gmail.com)',
                    'Jicku (jickuvm2018@gmail.com)', 'Deepu (deepudv98@gmail.com)', 'Dr Shijin (drshijinms@gmail.com)',
                    'Rijo (rijoviany@gmail.com)', 'ANILA (anilablawrence@gmail.com)',
                    'Angel (angelmary.deepam@gmail.com)', 'Mijin  (mijinmmmm@gmail.com)',
                    'Rajesh (rajeshjklalu@gmail.com)', 'Felix (mailtofelixraj@gmail.com)',
                    'Vishwanathan (viswamlogos@gmail.com)', 'Christopher (christopherjsherly@gmail.com)',
                    'Geethumol (geethumolvs1996@gmail.com)', 'Jibin (jibinjustusj@gmail.com)'}

for each in paul_completed:
    if each not in (""Kanchana (kanchana1397@gmail.com)""):  # Kanchana (kanchana1397@gmail.com) - philip bypass paul
        assert each in philip_completed, each

for each in paul_course_incomplete:
    assert each in philip_completed, each

for each in emmaus_completed:
    assert each in paul_completed, each

print(f'philip complete: {len(philip_completed)}')
print(f'paul complete: {len(paul_completed)}')
print(f'emmaus completed: {len(emmaus_completed)}')

print(f'paul ongoing: {len(paul_course_incomplete)}')
print(f'emmaus ongoing: {len(emmaus_incomplete)}')


print(f'paul not started: {len(philip_completed - paul_completed - paul_course_incomplete)}')
print(f'emmaus not started: {len(paul_completed - emmaus_completed - emmaus_incomplete)}')
"
Bx8LTaVy,Kinsey theme: fix social icons color,artemsemkin,CSS,Sunday 17th of December 2023 11:32:08 PM CDT,".wp-block-social-link {
  fill: currentColor;
}"
szNRd4g3,Boids Simulation in Pygame - Simple Example,xervans,Python,Sunday 17th of December 2023 10:51:26 PM CDT,"import pygame
import random
import math

pygame.init()
width, height = 800, 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption(""Boids"")
clock = pygame.time.Clock()

class Boids:
    
    def __init__(self, x, y, vx, vy):
        self.x = x
        self.y = y
        self.vx = vx
        self.vy = vy
        self.position = pygame.Vector2(self.x, self.y)
        self.velocity = pygame.Vector2(self.vx, self.vy)
        angle = math.atan2(self.velocity.y, self.velocity.x)
        self.velocity= pygame.Vector2(math.cos(angle), math.sin(angle)) * 2
        self.max_speed = 2
        self.max_force = 0.4
        self.perception = 30
    
    def update(self, boids):
        self.edges()
        self.flock(boids)
        self.position += self.velocity

    def edges(self):
        if self.position.x > width:
            self.position.x = 0
        elif self.position.x < 0:
            self.position.x = width
        if self.position.y > height:
            self.position.y = 0
        elif self.position.y < 0:
            self.position.y = height
    
    def flock(self, boids): 
       alignment = self.align(boids)
       cohesion = self.cohesion(boids)
       separation = self.separation(boids)
       
       self.velocity += alignment + cohesion + separation
       if self.velocity.length() > self.max_speed:
           self.velocity.scale_to_length(self.max_speed)
    
    def align(self, boids):
        steering = pygame.Vector2()
        total = 0
        for boid in boids:
            if boid != self and self.position.distance_to(boid.position) < self.perception:
                steering += boid.velocity
                total += 1
        if total > 0:
            steering /= total
            steering.scale_to_length(self.max_speed)
            steering -= self.velocity
            if steering.length() > self.max_force:
                steering.scale_to_length(self.max_force)
        return steering
    
    def cohesion(self, boids):
        steering = pygame.Vector2()
        total = 0
        for boid in boids:
            if boid != self and self.position.distance_to(boid.position) < self.perception:
                steering += boid.position
                total += 1
        if total > 0:
            steering /= total
            steering -= self.position
            steering.scale_to_length(self.max_speed)
            steering -= self.velocity
            if steering.length() > self.max_force:
                steering.scale_to_length(self.max_force)
        return steering
    
    def separation(self, boids):
        steering = pygame.Vector2()
        total = 0
        for boid in boids:
          distance = self.position.distance_to(boid.position)
          if boid != self and distance < self.perception:
                diff = self.position - boid.position
                diff /= distance ** 2
                steering += diff
                total += 1
        if total > 0:
            steering
            steering.scale_to_length(self.max_speed)
            steering -= self.velocity
            if steering.length() > self.max_force:
                steering.scale_to_length(self.max_force)
        return steering 
    
    def draw(self, screen):
        pygame.draw.circle(screen, (0, 0, 255), (int(self.position.x), int(self.position.y)), 10)

#initialize boids
num_boids = 50
boids = [Boids(random.randrange(width), random.randrange(height), random.uniform(-1, 1), random.uniform(-1, 1)) for i in range(num_boids)]


#main loop

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    screen.fill((255, 255, 255))
    for boid in boids:
        boid.update(boids)
        boid.draw(screen)
        
    pygame.display.flip()
    clock.tick(60)
pygame.quit()"
XVm8t0Cu,Preselecting and Locking an Option in a Selectize.js Multi-Select Dropdown with jQuery,vapvarun,jQuery,Sunday 17th of December 2023 10:43:35 PM CDT,"<script>
    jQuery(document).ready(function( $ ) {
        // Function to set and lock the value
        function setAndLockSelectize() {
            var selectize = $('#bp-blog-category-select')[0].selectize;

            // Clear any previous selections
            selectize.clear();

            // Add and select the value '81'
            selectize.addOption({value: '81', text: 'Member Blog'});
            selectize.addItem('81');

            // Lock the selectize control to prevent user interaction
            selectize.lock();
        }

        // Check if Selectize is initialized
        if ($('#bp-blog-category-select').hasClass('selectized')) {
            setAndLockSelectize();
        } else {
            // Wait for Selectize to initialize
            $('#bp-blog-category-select').one('selectize:initialize', function() {
                setAndLockSelectize();
            });
        }
    });
</script>
"
X9VnBNVR,travel.lua,Brendan_Bode,Lua,Sunday 17th of December 2023 10:42:45 PM CDT,"response = {}
xyz = { }
tpos = {0,0,0}
dpos = {0,0,0}
tpos[1] , tpos[2], tpos[3] = gps.locate() 

function  askLocation()
        print(""Your current pos is:"", tpos[1], tpos[2], tpos[3] ) 
end

function askDestination(xyz)
    xyz = {}

    print(""Enter Destination X value:"") 
    xyz[1] =tonumber(read())

    print(""Enter Destination Y value:"")
    xyz[2] = tonumber(read())

    print(""Enter Destination Z value:"")
    xyz[3] = tonumber(read())
    
    return xyz
    
end

--function askIfString(variable)
--    print(""entered askIf"")    
--    for i=1, #variable do
--        if type(variable[i]) == ""string"" then
--            print(i)
--            print(""Locations entered as string, error"")
--            return  print(""ERROR"")
--        else
--            print(i, ""not a string"")
--        end
--    end
--end

function findDif(first,second)
        print(""entered findDif"")        
        for i=1, #first do
            print(""entered iteration"", i)
            dpos[i] = first[i] - second[i] 
            print(dpos[i])
        end
    return dpos[1], dpos[2], dpos[3]
end

askLocation()
askDestination(xyz)
--askIfString(xyz)   not working atm
findDif(xyz,tpos)

print(""Your end destination would be:"", xyz[1], xyz[2], xyz[3])
print(""Would you like to continue: (Y/N)"")

local confirm = read()

if confirm == ""Y"" or ""y"" or ""yes"" or ""YES"" or ""Yes"" or ""YEs"" or ""YeS"" then
    print(""moving"")
else
    print(""oh well, try again"")
end

"
BC2728HM,Fusion powerplant,abc123mewot,Lua,Sunday 17th of December 2023 10:38:29 PM CDT,"local mainMonitorSide = 'monitor_3'
local ignitionPulseSide = 'top'
local laserPowerSide = 'bottom'

local mon = peripheral.wrap(mainMonitorSide)
local amp = peripheral.wrap('Laser Amplifier_2')
local ria = peripheral.wrap('redstone_integrator_1')
local ind = peripheral.wrap('Induction Matrix_4')
local rla = peripheral.wrap('Reactor Logic Adapter_1')
local trb = peripheral.wrap('Industrial Turbine_0')

local monW, monH = mon.getSize()

local function getEnergyPct(p)
	return math.ceil(100.0 * (p.getEnergy() / p.getMaxEnergy()))
end 
local function spacer(y, str)
	local l = string.len(str)
	local x = math.floor(monW / 2 - l / 2)
	local ob = mon.getBackgroundColor()
	mon.setCursorPos(1, y)
	mon.setBackgroundColor(colors.gray)
	mon.setTextColor(colors.white)
	for i=1,x do mon.write("" "") end
	mon.write(str)
	for i=1,monW-l do mon.write("" "") end
	mon.setBackgroundColor(ob)
	return y + 1
end

mon.setBackgroundColor(colors.black)
mon.setTextScale(1)
local lastIndTime = os.time()
local lastIndEngy = ind.getEnergy()
local lastTouchTime = os.time()
local loopTimer = os.startTimer(0.3)
local blink = false
while true do
	local event, param1, param2, param3, param4 = os.pullEvent()
	local wasTouched = event == ""monitor_touch"" and param1 == mainMonitorSide
	local wasTimer = event == ""timer"" and param1 == loopTimer
	if wasTouched or wasTimer then -- Touchscreen or timer event!
		loopTimer = os.startTimer(0.3)
		if wasTouched then 
			if os.time() - lastTouchTime < 0.02 then
				print(""Touchscreen event nullified!"")
				wasTouched = false
			else print(""Touchscreen event!"") end
			lastTouchTime = os.time()
		end
		if blink then blink = false else blink = true end
		
		mon.clear()
		local y = spacer(1, ""Reactor info"")
		local cx,cy = mon.getCursorPos() -- Put a little blinky thing in the corner to indicate the screen is updating
		mon.setCursorPos(monW, 1) mon.setBackgroundColor(colors.gray) mon.setTextColor(colors.black)
		if blink then mon.write(""\\"") else mon.write(""/"") end
		mon.setCursorPos(cx, cy) mon.setBackgroundColor(colors.black) mon.setTextColor(colors.white)
		
		local dPct, tPct = math.floor(rla.getDeuterium() / 10), math.floor(rla.getTritium() / 10)
		local cTemp, pTemp, iTemp = math.floor(rla.getCaseHeat() / 1000000), math.floor(rla.getPlasmaHeat() / 1000000), math.floor(rla.getIgnitionTemp() / 1000000)
		local rate = rla.getInjectionRate()

		mon.setCursorPos(1, y) y = y + 1
		if rla.isIgnited() then 
			mon.setTextColor(colors.green) mon.write(""REACTOR ONLINE"")
		else 
			mon.setTextColor(colors.red) mon.write(""REACTOR OFFLINE"")
		end
		mon.write("" "")
		local laserEnergyMRF = math.floor(amp.getEnergy() * 0.0000004)
		mon.setBackgroundColor(colors.gray)

		local cx,cy = mon.getCursorPos()
		local touchedBtn = wasTouched and cy == param3 and param2 > cx and param2 < cx + 8
		if rla.isIgnited() then
			mon.setTextColor(colors.red)
			mon.write("" QUENCH "")
			if touchedBtn then
				rla.setInjectionRate(0)
				print(""Reactor quenched!"")
			end
		else
			if laserEnergyMRF > 500 or pTemp > iTemp then
				mon.setTextColor(colors.yellow)
				if touchedBtn then
				rla.setInjectionRate(2)
				if pTemp < iTemp then
					ria.setOutput(ignitionPulseSide, true)
					os.sleep(0.3)
					ria.setOutput(ignitionPulseSide, false)
				end
				print(""Ignition events triggered!"")
				end
			else mon.setTextColor(colors.black) end
			mon.write("" IGNITE "")
		end
		mon.setBackgroundColor(colors.black)

		mon.setTextColor(colors.white)
		mon.setCursorPos(1, y) y = y + 1
		mon.write(""Injection rate: "" .. rate .. ""mB/t"")

		mon.setCursorPos(1, y) y = y + 1
		mon.setTextColor(colors.white)
		mon.write(""Case: "")
		if cTemp < 50 then mon.setTextColor(colors.red) elseif cTemp < 100 then mon.setTextColor(colors.yellow) else mon.setTextColor(colors.green) end
		mon.write(cTemp .. ""MK "")
		mon.setTextColor(colors.white)
		mon.write(""Plasma: "")
		if pTemp < iTemp then mon.setTextColor(colors.red) else mon.setTextColor(colors.green) end
		mon.write(pTemp .. ""/"" .. iTemp .. ""MK"")

		y = spacer(monH / 2, ""System info"")

		local indPct = getEnergyPct(ind)
		mon.setCursorPos(1, y) y = y + 1
		mon.setTextColor(colors.white) mon.write(""Storage: "")
		if indPct < 30 then mon.setTextColor(colors.red) elseif indPct < 50 then mon.setTextColor(colors.yellow) else mon.setTextColor(colors.green) end
		mon.write(indPct .. ""%"")

		local engy = ind.getEnergy()
		local time = os.time()
		local indRFt = math.floor((engy - lastIndEngy) / ((time - lastIndTime) * 1000))
		lastIndEngy = engy
		lastIndTime = time
		if indRFt > 0 then mon.setTextColor(colors.green) mon.write("" +"") elseif indRFt < 0 then mon.setTextColor(colors.red) mon.write("" -"") end
		local sfx = 'RF/t'
		if indRFt < 0 then indRFt = -indRFt end
		if indRFt > 10000 then indRFt = math.floor(indRFt / 1000) sfx = 'KRF/t' end
		mon.write(indRFt .. sfx)

		mon.setCursorPos(1, y) y = y + 1
		mon.setTextColor(colors.white) mon.write(""Laser amplifier: "")
		local charged = laserEnergyMRF > 500
		if charged then mon.setTextColor(colors.green) else mon.setTextColor(colors.red) end
		mon.write(laserEnergyMRF .. ""MRF "")
		if charged then 
			mon.setTextColor(colors.green)
			mon.write(""Charged!"")
			ria.setOutput(laserPowerSide, false)
		else
			mon.setTextColor(colors.yellow)
			mon.write(""Charging!"")
			ria.setOutput(laserPowerSide, true)
		end
	end
end
"
4M7p0Lu9,LC 691: Stickers to Spell Word,bennyfromtheblock,Python,Sunday 17th of December 2023 10:02:47 PM CDT,"# BFS solution where state is the count of characters remaining.


class Solution:
    def minStickers(self, stickers: List[str], target: str) -> int:
        chars_in_target = sorted(list(set(list(target))))
        char_to_idx = {c : i for i, c in enumerate(chars_in_target)}
        n_chars = len(chars_in_target)

        # Reduce word to target chars only, represent as ordered count of chars in target
        # This creates hashable state representations that are efficient to operate on
        def condense(word: str) -> Tuple:
            count_arr = [0 for _ in range(n_chars)]
            for c in word:
                if c not in chars_in_target:
                    continue
                count_arr[char_to_idx[c]] += 1

            return tuple(count_arr)

        # subtract sticker char count from target char count
        def subtract(leftover, sticker):
            return tuple([max(0, leftover[i] - sticker[i]) for i in range(n_chars)])

        # get number of characters a sticker can contribute to the target
        def intersect(a, b):
            return sum([min(a_i, b_i) for a_i, b_i in zip(a, b)])

        processed_stickers = {condense(sticker) for sticker in stickers}
        initial_leftover_count = condense(target)
        
        # (leftover char count: Tuple, stickers used: int)
        visited = set()
        queue = deque([(initial_leftover_count, 0)])
        visited.add((initial_leftover_count))

        while queue:
            leftover, stickers_used = queue.popleft()
            if sum(leftover) == 0:
                return stickers_used
            to_discard = []
            for sticker in processed_stickers:
                if not intersect(leftover, sticker):
                    to_discard.append(sticker)
                    continue
                new_leftover = subtract(leftover, sticker)
                if new_leftover in visited:
                    continue
                queue.append((new_leftover, stickers_used + 1))
            
            map(lambda s: processed_stickers.remove(s), to_discard)

        return -1"
i9iaXKeQ,Untitled,PasteBinHacks,JSON,Sunday 17th of December 2023 09:55:14 PM CDT,"{
    AA: ""A"",
	AB: ""B"",
	AC: ""C"",
	AD: ""D"",
	AE: ""E"",
	AF: ""F"",
	AG: ""G"",
	AH: ""H"",
	AI: ""I"",
	AJ: ""J"",
	AK: ""K"",
	AL: ""L"",
	AM: ""M"",
	AN: ""N"",
	AO: ""O"",
	AP: ""P"",
	AQ: ""Q"",
	AR: ""R"",
	AS: ""S"",
	AT: ""T"",
	AU: ""U"",
	AV: ""V"",
	AW: ""W"",
	AX: ""X"",
	AY: ""Y"",
	AZ: ""Z"",
	BA: ""a"",
	BB: ""b"",
	BC: ""c"",
	BD: ""d"",
	BE: ""e"",
	BF: ""f"",
	BG: ""g"",
	BH: ""h"",
	BI: ""i"",
	BJ: ""j"",
	BK: ""k"",
	BL: ""l"",
	BM: ""m"",
	BN: ""n"",
	BO: ""o"",
	BP: ""p"",
	BQ: ""q"",
	BR: ""r"",
	BS: ""s"",
	BT: ""t"",
	BU: ""u"",
	BV: ""v"",
	BW: ""w"",
	BX: ""x"",
	BY: ""y"",
	BZ: ""z"",
	CA: ""0"",
	CB: ""1"",
	CC: ""2"",
	CD: ""3"",
	CE: ""4"",
	CF: ""5"",
	CG: ""6"",
	CH: ""7"",
	CI: ""8"",
	CJ: ""9"",
	CK: "" "",
	CL: '""',
	CM: ""="",
	CN: ""["",
	CO: ""]""
}"
v9MZYFCe,AoC 2023 Day 16,illuminati229,Python,Sunday 17th of December 2023 09:12:06 PM CDT,"from time import time


def timer_func(func):
    # This function shows the execution time of
    # the function object passed
    def wrap_func(*args, **kwargs):
        t1 = time()
        result = func(*args, **kwargs)
        t2 = time()
        print(f'Function {func.__name__!r} executed in {(t2 - t1):.4f}s')
        return result

    return wrap_func


class Grid2d:

    def __init__(self, grid):
        self.grid = grid
        self.height = len(grid)
        self.width = len(grid[0])

    def __getitem__(self, item):
        # returns None if outside the grid
        if len(item) > 2:
            raise ValueError('Grid2D expected a list like of length 2. Length of accessor longer than expected')
        x, y = item
        if 0 <= x < self.height:
            if 0 <= y < self.width:
                return self.grid[x][y]
        return None


class LaserBeam:

    def __init__(self, pos, heading):
        self.pos = pos
        self.heading = heading

    def next_loc(self):
        x, y = self.pos
        h = self.heading
        if h == 'u':
            return x - 1, y
        elif h == 'd':
            return x + 1, y
        elif h == 'l':
            return x, y - 1
        elif h == 'r':
            return x, y + 1


class BeamMap:

    def __init__(self, grid, start=((0, -1), 'r')):
        self.grid = Grid2d(grid)
        self.beams = [LaserBeam(*start)]
        self.energized = set()  # set of coordinates (tuple) that are energized (x, y)
        self.beam_tracking = set()  # set of coordinates and heading of locations beams have gone through ((x, y), d)
        self.BOUNCE_DICT = {'l': {'/': ('d', None),
                                  '\\': ('u', None),
                                  '-': ('l', None),
                                  '|': ('u', 'd'),
                                  '.': ('l', None)},
                            'r': {'/': ('u', None),
                                  '\\': ('d', None),
                                  '-': ('r', None),
                                  '|': ('u', 'd'),
                                  '.': ('r', None)},
                            'u': {'/': ('r', None),
                                  '\\': ('l', None),
                                  '-': ('l', 'r'),
                                  '|': ('u', None),
                                  '.': ('u', None)},
                            'd': {'/': ('l', None),
                                  '\\': ('r', None),
                                  '-': ('l', 'r'),
                                  '|': ('d', None),
                                  '.': ('d', None)}}

    def project_beams(self):
        # list for new beams that form off splitters
        new_beams = []
        # list for beams the leave the grid or go into a loop
        beams_left_grid = []
        while self.beams:
            # clear the new beams and deleted beams list
            new_beams.clear()
            beams_left_grid.clear()
            # loop over the current beams
            for i, beam in enumerate(self.beams):
                # get the next location for the beam
                nl = beam.next_loc()
                # get the value of the grid
                ng = self.grid[nl]
                # if the next point is in the grid
                if ng:
                    # if the next point is a mirror or splitter, not empty space
                    if ng != '.':
                        # update the beam position
                        beam.pos = nl
                        # add to the energized set
                        self.energized.add(nl)
                        # find the new heading(s)
                        beam.heading, split_b = self.BOUNCE_DICT[beam.heading][ng]
                        # check to see if the current beam heading has been seen before
                        if self.beam_tracking.intersection([(nl, beam.heading)]):
                            # beam has been seen before and will start looping, add the delete list
                            beams_left_grid.append(i)
                        else:
                            # beam hasn't been seen before, add the record to the tracking set
                            self.beam_tracking.add((nl, beam.heading))
                        # if a split exists, and it isn't in the beam tracking set
                        if split_b and not self.beam_tracking.intersection([(nl, split_b)]):
                            # add the new beam to the new beam list
                            new_beams.append(LaserBeam(nl, split_b))
                            # add the new beam to the beam tracking set
                            self.beam_tracking.add((nl, split_b))
                    # beam position is empty space
                    else:
                        # update beam position
                        beam.pos = nl
                        # add to energized list
                        self.energized.add(nl)
                        # add to beam tracking list
                        self.beam_tracking.add((nl, beam.heading))
                # point is outside the grid
                else:
                    # add to delete list
                    beams_left_grid.append(i)
            # deleting beams that moved outside the grid or got onto a loop
            if beams_left_grid:
                for i in beams_left_grid[::-1]:  # starting at the end to not mess up indexing
                    self.beams.pop(i)
            # adding the new beams to the list
            self.beams += new_beams

    def count_energized(self):
        return len(self.energized)

    def new_start(self, start):
        self.energized.clear()
        self.beam_tracking.clear()
        self.beams.clear()
        self.beams.append(LaserBeam(*start))


@timer_func
def day16(filepath, part2=False):
    with open(filepath) as fin:
        lines = [line.strip() for line in fin.readlines()]

    beam_map = BeamMap(lines)
    beam_map.project_beams()
    if not part2:
        return beam_map.count_energized()
    else:
        max_e = beam_map.count_energized()
        for d, y in [['r', -1], ['l', len(lines[0])]]:
            for x in range(len(lines)):
                if x == 0 and d == 'r':
                    continue
                beam_map.new_start(((x, y), d))
                beam_map.project_beams()
                e_c = beam_map.count_energized()
                if e_c > max_e:
                    max_e = e_c
        for d, x in [['u', len(lines)], ['d', -1]]:
            for y in range(len(lines[0])):
                beam_map.new_start(((x, y), d))
                beam_map.project_beams()
                e_c = beam_map.count_energized()
                if e_c > max_e:
                    max_e = e_c
        return max_e


def main():
    assert day16('test16') == 46
    print(f""Part 1: {day16('input16')}"")

    assert day16('test16', True) == 51
    print(f""Part 2: {day16('input16', True)}"")


if __name__ == '__main__':
    main()
"
uixeJtbH,Pal Generator,RitJie,Python,Sunday 17th of December 2023 09:01:54 PM CDT,"class PalindromeNumbersEnumerator:
    def __init__(self, x=0):
        self.st = 1
        self.q1 = 0
        self.q2 = 1
        self.cur = 0
        self.num = 0
        self.is_odd = 1
        self.set_cur(x)

    def construct(self, val, is_odd):
        x = val
        if is_odd:
            x //= 10
        while x:
            val = val * 10 + x % 10
            x //= 10
        return val

    def is_palindrome(self, s):
        return s == s[::-1]

    def set_cur(self, x):
        s = str(x)
        n = len(s)
        assert self.is_palindrome(s)
        self.cur = x
        self.is_odd = n & 1
        self.st = 1
        for i in range((n - 1) // 2):
            self.st *= 10
        if self.is_odd:
            self.q1 = int(s[: (n + 1) // 2])
            self.q2 = self.st
        else:
            self.q1 = self.st * 10
            self.q2 = int(s[: (n + 1) // 2])
        self.num = self.q1 + self.q2 - self.is_odd

    def set_prev(self):
        self.cur = self.get_prev()

    def set_next(self):
        self.cur = self.get_next()

    def get_prev(self):
        if self.is_odd:
            self.q1 -= 1
        else:
            self.q2 -= 1
        self.num -= 1
        if (self.is_odd and self.q1 < self.st and self.q1 != 0) or (
            not self.is_odd and self.q2 >= self.st * 10
        ):
            if not self.is_odd:
                self.q2 += 1
                self.q1 -= 1
            else:
                self.q1 += 1
                self.q2 -= 1
            if self.is_odd:
                self.st //= 10
            self.is_odd ^= 1
        return self.construct(self.q1 if self.is_odd else self.q2, self.is_odd)

    def get_next(self):
        if self.is_odd:
            self.q1 += 1
        else:
            self.q2 += 1
        self.num += 1
        if self.q1 >= self.st * 10:
            self.is_odd ^= 1
            if self.q2 != self.st:
                self.st = self.st * 10 if self.st else 1
        return self.construct(self.q1 if self.is_odd else self.q2, self.is_odd)

    def get_kth_palindrome_number(self, k):
        s = str(k)
        pw10 = 1
        while pw10 * 10 <= k:
            pw10 *= 10
        if k <= pw10 + pw10 // 10 - 2:
            k -= pw10 // 10
            k += 1
            return self.construct(k, 1)
        if k <= pw10 * 2 - 2:
            k -= pw10
            k += 1
            return self.construct(k, 0)
        return self.construct(k - pw10 + 1, 1)

    def get_lower_bound_palindrome(self, x):
        s = str(x)
        if self.is_palindrome(s):
            return x
        n = len(s)
        l = s[: (n + 1) // 2]
        c = self.construct(int(l), n & 1)
        return c if c >= x else self.construct(int(l) + 1, n & 1)

    def get_inverse_lower_bound_palindrome(self, x):
        s = str(x)
        if self.is_palindrome(s):
            return x
        n = len(s)
        if s.count('0') == n - 1:
            return x - 1
        l = s[: (n + 1) // 2]
        c = self.construct(int(l), n & 1)
        return c if c <= x else self.construct(int(l) - 1, n & 1)

    def get_upper_bound_palindrome(self, x):
        return self.get_lower_bound_palindrome(x + 1)

    def get_inverse_upper_bound_palindrome(self, x):
        return self.get_inverse_lower_bound_palindrome(x - 1)

    def get_cur(self):
        return self.cur

PGen = PalindromeNumbersEnumerator()"
J1RCiTXT,mini evaluate,hendrajeg,JavaScript,Sunday 17th of December 2023 08:28:23 PM CDT,"const evaluate = (expression) => {
    //small version of evaluate mathjs limited oeprator only use string as an expression :)
    const OperatorPrecedence = {
        '+': 1,
        '-': 1,
        '*': 2,
        '/': 2,
        '^': 3,
    };

    const applyOperator = (operators, values) => {
        const operator = operators.pop();
        const right = values.pop();
        const left = values.pop();

        switch (operator) {
            case '+':
                values.push(left + right);
                break;
            case '-':
                values.push(left - right);
                break;
            case '*':
                values.push(left * right);
                break;
            case '/':
                values.push(left / right);
                break;
            case '^':
                values.push(Math.pow(left, right));
                break;
            default:
                throw new Error('Invalid operator: ' + operator);
        }
    }

    const shuntingYard = (tokens) => {
        const output = [];
        const operators = [];

        tokens.forEach((token) => {
            if (!isNaN(token)) {
                output.push(parseFloat(token));
            } else if (token === '(') {
                operators.push(token);
            } else if (token === ')') {
                while (operators.length && operators[operators.length - 1] !== '(') {
                    output.push(operators.pop());
                }
                operators.pop();
            } else if (token in OperatorPrecedence) {
                while (
                    operators.length &&
            OperatorPrecedence[token] <= OperatorPrecedence[operators[operators.length - 1]]
                ) {
                    output.push(operators.pop());
                }
                operators.push(token);
            } else {
                throw new Error('Invalid token: ' + token);
            }
        });

        while (operators.length) {
            output.push(operators.pop());
        }

        return output;
    }

    const evaluateRPN = (tokens) => {
        const values = [];

        tokens.forEach((token) => {
            if (!isNaN(token)) {
                values.push(token);
            } else {
                applyOperator([token], values);
            }
        });

        return values[0];
    }

    try {
        const tokens = expression.match(/(\d+(\.\d+)?|[^\s\d])/g) || [];
        const postfixTokens = shuntingYard(tokens);
        const result = evaluateRPN(postfixTokens);

        // Ensure the result is a number (need to check further incase an error)
        if (!isNaN(result)) {
            return result;
        } else {
            throw new Error('Result is not a number.');
        }
    } catch (error) {
        console.error(`Error evaluating expression: ${expression}`);
        throw error;
    }
};"
7xrEeiAb,question_11,punjusquad,SystemVerilog,Sunday 17th of December 2023 07:15:28 PM CDT,"// Code your design here

//Interface

interface ifc(input clk);
  logic rst;
  logic coin;
  logic dwash;
  logic lid;
  logic soak;
  logic wash;
  logic rinse;
  logic spin;
  logic done;
  
  modport DESIGN(
    input clk, rst, coin, dwash, lid,
    output soak, wash, rinse, spin, done
  );
  
  modport TEST(
    output rst, coin, dwash, lid,
    input soak, wash, rinse, spin, done, clk
  );
endinterface

// Controller

module wmc(
  ifc.DESIGN inf,
  input T,
  output pause
);
  
  reg [2:0] nst, cst;
  localparam [2:0]
  IDLE = 0,
  SOAK = 1,
  WASH = 2,
  RINSE = 3,
  SPIN = 4,
  DWASH = 5,
  DRINSE = 6,
  PAUSE = 7;
  always@(posedge inf.clk or negedge inf.rst) begin
    if(!inf.rst) cst <= IDLE;
    else cst <= nst;
  end
  
  always_comb begin
    nst <= cst;
    case(cst)
      IDLE: if(inf.coin) nst <= SOAK;
      SOAK: if(T) nst <= WASH;
      WASH: if(T) nst <= RINSE;
      RINSE: begin
        if(inf.dwash & T) nst <= DWASH;
        else if(!inf.dwash & T) nst <= SPIN;
      end
      SPIN: begin
        if(inf.lid & !T) nst <= PAUSE;
        else if(T) nst <= IDLE;
      end
      DWASH: if(T) nst <= DRINSE;
      DRINSE: if(T) nst <= SPIN;
      PAUSE: if(!inf.lid) nst <= SPIN;
    endcase
  end
  
  assign inf.soak = (cst == SOAK);
  assign inf.wash = (cst == WASH) | (cst == DWASH);
  assign inf.rinse = (cst == RINSE) | (cst == DRINSE);
  assign inf.spin = (cst == SPIN);
  assign pause = (cst == PAUSE);
  assign inf.done = (cst == IDLE);
endmodule 
        
// Timer 

module timer(
  input clk, rst, pause,
  output T
);
  
  reg [9:0] count;
  
  always@(posedge clk or negedge rst) begin
    if(!rst) count <= 10'd0;
    else if(pause) count<= count;
    else count <= count + 1'b1;
  end
  
  assign T = (&count);
endmodule


// Top Level Controller

module washing_machine(
  ifc.DESIGN inf
);
  wire pause, T;
  wmc W1(.inf(inf), .T(T), .pause(pause));  
  timer T1(.clk(inf.clk), .rst(inf.rst), .pause(pause), .T(T));
  
endmodule







///////////////////////program block


// Code your testbench here
// or browse Examples
program tb_washing_machine(
  ifc.TEST inf
);
  
  virtual ifc.TEST inf_h = inf;
    
  initial begin
    inf_h.rst = 0;
    #12 inf_h.rst = 1;
  end
  
  initial begin
    wait(inf_h.rst);
    inf_h.coin = 1'b1;
    inf_h.dwash = 1'b1;
    
    #10 inf_h.coin = 1'b0;
    
    wait(inf_h.spin);
    inf_h.lid = 1'b1;
    #24 inf_h.lid = 1'b0;
    
    wait(inf_h.done);
    $finish;
    
  end
  
  initial begin
    $dumpfile(""dump.vcd"");
    $dumpvars;   
  end
endprogram

module top_washing_machine;

  reg clk;
  ifc inf(clk);
  washing_machine DUT(.inf(inf.DESIGN));
  tb_washing_machine TEST(.inf(inf.TEST));
  
  initial begin
    wait(inf.rst);
    clk = 0;
    forever #5 clk = ~clk;
  end
  
endmodule
  "
xLjXwavk,2023-12-17_stats.json,rdp_snitch,JSON,Sunday 17th of December 2023 06:18:23 PM CDT,"{
  ""ip"": {
    ""103.178.235.43"": 966,
    ""212.70.149.146"": 18,
    ""194.165.17.21"": 12,
    ""103.76.139.213"": 12,
    ""80.66.76.92"": 6,
    ""198.235.24.106"": 9,
    ""87.251.75.64"": 3,
    ""157.119.249.52"": 6,
    ""87.251.75.145"": 6,
    ""147.78.47.51"": 6,
    ""2.133.78.52"": 3,
    ""194.165.16.10"": 6,
    ""139.144.116.60"": 3,
    ""185.170.144.113"": 45,
    ""67.133.192.80"": 3,
    ""185.170.144.3"": 3,
    ""185.190.24.101"": 3,
    ""4.232.72.212"": 3,
    ""87.251.75.120"": 6,
    ""222.252.27.66"": 6,
    ""198.235.24.100"": 9,
    ""112.15.95.174"": 3,
    ""36.139.61.15"": 3,
    ""62.204.41.240"": 12,
    ""81.19.135.47"": 9,
    ""196.201.68.112"": 3,
    ""80.94.95.238"": 12,
    ""167.248.133.36"": 3,
    ""165.154.51.243"": 3,
    ""194.165.16.37"": 6,
    ""198.235.24.227"": 9,
    ""143.42.74.76"": 150,
    ""62.233.50.179"": 3,
    ""162.142.125.222"": 3,
    ""110.86.3.66"": 3,
    ""198.235.24.171"": 9
  },
  ""asn"": {
    ""AS140810"": 966,
    ""AS204428"": 30,
    ""AS48721"": 24,
    ""AS135746"": 12,
    ""AS208091"": 21,
    ""AS396982"": 36,
    ""AS135944"": 6,
    ""AS209588"": 15,
    ""AS9198"": 3,
    ""AS63949"": 153,
    ""AS197414"": 48,
    ""AS209"": 3,
    ""AS211632"": 3,
    ""AS8075"": 3,
    ""AS45899"": 6,
    ""AS56041"": 6,
    ""AS59425"": 12,
    ""AS29571"": 3,
    ""AS398324"": 6,
    ""AS135377"": 3,
    ""AS57523"": 3,
    ""AS4134"": 3
  },
  ""isp"": {
    ""VPSTTT"": 966,
    ""SS-Net"": 30,
    ""Flyservers S.A."": 39,
    ""Cityline Networks Pvt Ltd"": 12,
    ""Xhost Internet Solutions LP"": 69,
    ""Google LLC"": 36,
    ""VinhNam Commercial informatics service corporation"": 6,
    ""JSC Kazakhtelecom"": 3,
    ""Akamai Technologies, Inc."": 153,
    ""CenturyLink"": 3,
    ""Internet Solutions & Innovations LTD."": 3,
    ""Microsoft Corporation"": 3,
    ""VietNam Post and Telecom Corporation"": 6,
    ""China Mobile Communications Corporation"": 6,
    ""Horizon LLC"": 12,
    ""Ftth-bng-ban RES"": 3,
    ""Censys, Inc."": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Chinanet"": 3
  },
  ""org"": {
    ""VPSTTT Technology Company Limited"": 966,
    ""4Media Ltd"": 18,
    ""Flyservers S.A"": 30,
    ""Cityline Networks Pvt Ltd"": 12,
    ""Xhost Internet Solutions"": 21,
    ""Palo Alto Networks, Inc"": 36,
    ""VINACIS"": 6,
    ""Kazakhtelecom Data Network Administration"": 3,
    ""Linode"": 153,
    ""Xhostis"": 48,
    ""CenturyLink, Inc"": 3,
    ""Tribeka Web Advisors S.A"": 3,
    ""Microsoft Azure Cloud (italynorth)"": 3,
    ""Hanoi Post and Telecom Company"": 6,
    ""China Mobile Communications Corporation"": 6,
    ""Horizon LLC"": 12,
    ""Alviva Holding Limited"": 9,
    ""Unknown"": 3,
    ""BtHoster LTD"": 12,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology"": 3,
    ""Sierra LLC"": 3,
    ""Censys Inc"": 3,
    ""Chinanet FJ"": 3
  },
  ""regionName"": {
    ""Ho Chi Minh"": 972,
    ""Plovdiv"": 18,
    ""Kaunas"": 24,
    ""Uttar Pradesh"": 12,
    ""England"": 6,
    ""California"": 36,
    ""North Holland"": 69,
    ""Almaty"": 3,
    ""North West"": 153,
    ""New Jersey"": 3,
    ""Mariehamns stad"": 3,
    ""Lombardy"": 3,
    ""Hanoi"": 6,
    ""Zhejiang"": 6,
    ""Moscow"": 15,
    ""Sverdlovsk Oblast"": 9,
    ""Abidjan"": 3,
    ""Budapest"": 12,
    ""Michigan"": 6,
    ""Bangkok"": 3,
    ""Fujian"": 3
  },
  ""country"": {
    ""Vietnam"": 978,
    ""Bulgaria"": 18,
    ""Lithuania"": 24,
    ""India"": 12,
    ""United Kingdom"": 6,
    ""United States"": 45,
    ""The Netherlands"": 69,
    ""Kazakhstan"": 3,
    ""Singapore"": 153,
    ""Aland Islands"": 3,
    ""Italy"": 3,
    ""China"": 9,
    ""Russia"": 24,
    ""Ivory Coast"": 3,
    ""Hungary"": 12,
    ""Thailand"": 3
  },
  ""account"": {
    ""hello"": 1020,
    ""Domain"": 78,
    ""Administr"": 48,
    ""yjSKCiLEI"": 3,
    ""HXDhOU"": 3,
    ""YLZOdg"": 3,
    ""(empty)"": 12,
    ""Test"": 18,
    ""iPFAFsKtW"": 3,
    ""vXNtnj"": 3,
    ""avOZGi"": 3,
    ""Administrator"": 78,
    ""ZFvmrBMYo"": 3,
    ""yKCdLs"": 3,
    ""AsBGMg"": 3,
    ""Admin"": 75,
    ""RrGOhtwFZ"": 3,
    ""gfSbKj"": 3,
    ""RhxIDa"": 3
  },
  ""keyboard"": {
    ""Unknown"": 1365
  },
  ""client_build"": {
    ""Unknown"": 1365
  },
  ""client_name"": {
    ""Unknown"": 1365
  },
  ""ip_type"": {
    ""Unknown"": 1143,
    ""proxy"": 18,
    ""hosting"": 195,
    ""mobile"": 9
  }
}"
