id,title,username,language,date,content
qA9LMT8h,Untitled,Rabbi946,C++,Saturday 18th of November 2023 06:04:28 AM CDT,"#include<bits/stdc++.h>
#define int long long
using namespace std;
int dp[2002][2][2002];
int m,d;
int md = 1e9 + 7;
bool is_even(int n){
    int cnt = 0;
    while(n){
        n/=10;
        cnt++;
    }
    return cnt%2 == 1;
}
int fun(string s,int pos=0,int tight=1,int modval=0,int num=0){
    if(pos==s.size()) return (modval==0);
    //if(dp[pos][tight][modval] != -1) return dp[pos][tight][modval];
    if(is_even(num)){
        int ans = 0;
        if(tight){
          if(s[pos]-'0' < d) ans = 0;
          else if(s[pos]-'0' == d) ans = fun(s,pos+1,1,(modval*10+d)%m,num*10+d);
          else ans = fun(s,pos+1,0,(modval*10+d)%m,num*10+d);
        }
        else ans = fun(s,pos+1,0,(modval*10+d)%m,num*10+d);
        ans %= md;
        return dp[pos][tight][modval] = ans;
    }
    int ans = 0;
    if(tight){
        for(int i=0;i<=s[pos]-'0';i++){
            if(i!=d)
            ans += fun(s,pos+1,(i==s[pos]-'0'),(modval*10+i)%m,num*10+i);
            ans %= md;
        }
    }
    else{
        for(int i=0;i<10;i++){
            if(i!=d)
            ans += fun(s,pos+1,0,(modval*10+i)%m,num*10+i);
            ans %= md;
        }
    }
    return dp[pos][tight][modval] = ans ;
}

bool is_valid(string s){
    int sum = 0;
    for(int i=0;i<s.size();i++){
        if(i%2==1 and s[i]-'0' != d) return false;
        sum += (s[i]-'0');
    }
    return sum%m==0;
}

void solve(){
    
    cin >> m >> d;
    string a,b;
    cin >> a >> b;
    memset(dp,-1,sizeof dp);
    int a1 = fun(a);
    memset(dp,-1,sizeof dp);
    int a2 = fun(b);
    int ans = (a2-a1+md)%md;
    if(is_valid(a)) ans ++;
	cout << ans%md;
}

signed main(){
int T=1;
while(T--){
    solve();
}

return 0;}"
shAhibsW,bankServer,Rayanis55,Lua,Saturday 18th of November 2023 06:00:23 AM CDT,"-- Adresse du serveur
local serverAddress = ""1""  -- Remplacez ceci par l'adresse réelle de votre serveur

-- Liste des fichiers dans le dossier utilisateur
local function getFileList()
    local fileList = {}
    for _, file in ipairs(fs.list(""user"")) do
        table.insert(fileList, file)
    end
    return fileList
end

-- Fonction principale du serveur
local function startServer()
    rednet.open(""right"")  -- Utilisez le côté approprié pour la connexion modem

    print(""Serveur en attente de connexions..."")

    while true do
        local _, message, senderAddress = rednet.receive()

        if senderAddress == serverAddress then
            if message == ""connect"" then
                rednet.send(senderAddress, ""connected"")
            elseif message == ""get"" then
                local fileList = getFileList()
                rednet.send(senderAddress, fileList)
            end
        end
    end
end

-- Programme principal
startServer()
"
zn88bRCA,data756,TestGuy1,JSON,Saturday 18th of November 2023 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3512b87c238b2bb8892399734a1b46865f7064705b1ba937dfc9b4b455304d23b013364e8d01d3456427b7c90e2e058830da66ab80165330100616b0c2a92189a73ecc7d594db94aa4df61c72d7c6e9b5f3b693217d792eb3964ecf02201c479f40f42c7cbe8377ba833eed47e7571cb547c825ee49b4447a6a940b9dd4f46eb',
  otherdata: [
    '8ff64600fdc56b485ac69c51b9823fa7',
    '60ddfe3d53d151c452de836221e72f26',
    'fae1a733abd35b4a79ee5e4e421c0ae1',
    '12a3d2ff67faee7ce0fc00715f54b9ee',
    'e970bacc416453727239dc1343f7377c',
    '2aff6fe53cf70deed75769286b759ab5',
    '0ae4e3daeb55409f5011ad0d88bb8f86',
    '792eeed519a43d989e25bb5733e649a1'
  ]
}"
qcu2fzKn,bankClient,Rayanis55,Lua,Saturday 18th of November 2023 05:59:40 AM CDT,"-- Adresse du serveur
local serverAddress = ""1""  -- Remplacez ceci par l'adresse réelle de votre serveur

-- Fonction pour se connecter au serveur
local function connectToServer()
    rednet.open(""left"")  -- Utilisez le côté approprié pour la connexion modem

    print(""Tentative de connexion au serveur..."")
    rednet.send(serverAddress, ""connect"")
    local _, serverResponse = rednet.receive(5)  -- Attendez la réponse du serveur pendant 5 secondes

    if serverResponse == ""connected"" then
        print(""Connecté au serveur."")
        return true
    else
        print(""La connexion au serveur a échoué."")
        return false
    end
end

-- Fonction pour demander la liste des fichiers au serveur
local function requestFileList()
    rednet.send(serverAddress, ""get"")
    local _, fileList = rednet.receive(5)  -- Attendez la liste des fichiers pendant 5 secondes

    if fileList then
        print(""Liste des fichiers:"")
        for _, fileName in ipairs(fileList) do
            print(""- "" .. fileName)
        end
    else
        print(""Échec de la récupération de la liste des fichiers."")
    end
end

-- Programme principal
if connectToServer() then
    requestFileList()
    rednet.close(""left"")  -- Fermez la connexion modem après utilisation
end
"
VXDHnePR,MP06_UF3_EJ6,Mike7GB,Java,Saturday 18th of November 2023 05:58:53 AM CDT,"// EJERCICIO 6 - UF3

package mp06_uf3_ej6;

import org.w3c.dom.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.io.*;


/**
 *
 * @author luism
 */
public class MP06_UF3_EJ6 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws ParserConfigurationException, TransformerException, IOException {
        // TODO code application logic here
        
        // Crear la instancia para crear el documento xml
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        
        // Crear documento vacio con la version de xml
        DocumentBuilder builder = factory.newDocumentBuilder();
        DOMImplementation implementation = builder.getDOMImplementation();
        Document document = implementation.createDocument(null, ""personas"", null); // Nombre raiz
        document.setXmlVersion(""1.0"");
        
        // *** PERSONA 1 ***
        // Crear nodo persona 1
        Element raiz = document.createElement(""persona""); // Nodo empleado
        // Asignar el nodo empleado bajo el nodo raiz
        document.getDocumentElement().appendChild(raiz);        
        
        // Añadir id
        CrearElemento(""id"",""1"",raiz,document);
        // Añadir DNI
        CrearElemento(""dni"",""13579024A"",raiz,document);
        // Añadir nombre
        CrearElemento(""nombre"",""Manuel"",raiz,document);
        // Añadir apallido
        CrearElemento(""apellidos"",""García"",raiz,document);
        // Añadir edad
        CrearElemento(""edad"",""32"",raiz,document);
        
        // *** PERSONA 2 ***
        // Crear nodo persona 2
        Element raiz2 = document.createElement(""persona""); // Nodo empleado
        // Asignar el nodo empleado bajo el nodo raiz
        document.getDocumentElement().appendChild(raiz2);
        
        // Añadir id
        CrearElemento(""id"",""2"",raiz2,document);        
        // Añadir DNI
        CrearElemento(""dni"",""24680135B"",raiz2,document);
        // Añadir nombre
        CrearElemento(""nombre"",""Maria"",raiz2,document);
        // Añadir apallido
        CrearElemento(""apellidos"",""López"",raiz2,document);
        // Añadir edad
        CrearElemento(""edad"",""28"",raiz2,document);  
        
        // *** PERSONA 3 ***        
        // Crear nodo persona 3
        Element raiz3 = document.createElement(""persona""); // Nodo empleado
        // Asignar el nodo empleado bajo el nodo raiz
        document.getDocumentElement().appendChild(raiz3);        
        
        // Añadir id
        CrearElemento(""id"",""3"",raiz3,document);
        // Añadir DNI
        CrearElemento(""dni"",""35791357C"",raiz3,document);
        // Añadir nombre
        CrearElemento(""nombre"",""José"",raiz3,document);
        // Añadir apallido
        CrearElemento(""apellidos"",""Díaz"",raiz3,document);
        // Añadir edad
        CrearElemento(""edad"",""30"",raiz3,document);  
        
        // crear fuente del documento xml
        Source source = new DOMSource(document);
        Result result = new StreamResult(new java.io.File(""Personas.xml""));
        Transformer transformer = TransformerFactory.newInstance().newTransformer();
        transformer.transform(source, result);
        
    }
    
    // Método insertor de los datos de la persona
    static void CrearElemento(String datoPersona, String valor, Element raiz, Document document){
        Element elem = document.createElement(datoPersona);
        Text text = document.createTextNode(valor); // Asginar valor
        raiz.appendChild(elem); // Añadir el elemento hijo a la raíz
        elem.appendChild(text); // Añadir el valor
    }
    
}"
0e62E3h1,Outsource Website Development from Samyak Online,samyakonline01,C#,Saturday 18th of November 2023 05:56:16 AM CDT,"Samyak Online in New Delhi is the most competent and affordable SEO Company in India. The company has special status for designing the customized SEO packages to help the businesses improve the traffic, search results ranking and brand image.

https://www.samyakonline.net/"
ed5kRfZU,邀您一起看：云口令,xiaomianao666,JavaScript,Saturday 18th of November 2023 05:38:35 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcIuS6keWPo+S7pO+8jDEx5pyI5rWL6K+V5ZCI6ZuG56ys5LiJ6YOo5YiG77yM5aSN5Yi25pW05p2h5Y+j5Luk5omT5byA6L2v5Lu25Y2z5Y+v5a+85YWlIGh0dHBzOi8veGlhb21pYW5hby5sYW56b3VtLmNvbS9peXVtSzFlcXcxN2NcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
yNExymbu,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 05:37:19 AM CDT,"#include <iostream>


using namespace std;
class Point {
private:
    int x, y;
public:
    Point () {}
    Point(int _x, int _y) {
        x = _x;
        y = _y;
    }
    
    Point & operator ++ (int i) {
        x++;
        return *this;
    }
    int get_x() {
        return x;
    }
};

int main()
{
    Point p(1, 2);
    p++;
    cout << p.get_x() << endl;
    return 0;
}
"
qMKaNXrt,Trying to connect to the Azure SQL Database using sqlachemy,umbongodrink,Bash,Saturday 18th of November 2023 05:36:05 AM CDT,"~/Doc/PY/JUPYTER_ROOT/AICORE/AZURE >                                                          py myenv 11:34:32
~/Doc/PY/JUPYTER_ROOT/AICORE/AZURE > python3 ./sql2.py                                        py myenv 11:34:33
Traceback (most recent call last):
  File ""/Users/kip/Documents/PYTHON/JUPYTER_ROOT/AICORE/AZURE/./sql2.py"", line 1, in <module>
    import pyodbc
ImportError: dlopen(/Users/kip/miniconda/envs/myenv/lib/python3.11/site-packages/pyodbc.cpython-311-darwin.so, 0x0002): Library not loaded: '/usr/local/opt/unixodbc/lib/libodbc.2.dylib'
  Referenced from: '/Users/kip/miniconda/envs/myenv/lib/python3.11/site-packages/pyodbc.cpython-311-darwin.so'
  Reason: tried: '/usr/local/opt/unixodbc/lib/libodbc.2.dylib' (no such file), '/usr/local/lib/libodbc.2.dylib' (no such file), '/usr/lib/libodbc.2.dylib' (no such file)
~/Doc/PY/JUPYTER_ROOT/AICORE/AZURE >"
qq3DAs7a,Custom ajax,Tomasm21,JavaScript,Saturday 18th of November 2023 05:35:56 AM CDT,"function ajax(url, requestMethod, jwt, requestBody) {
  
  const fetchData = {
    headers: {
      ""Content-Type"": ""application/json"",
    },
    method: requestMethod,
    credentials: 'include'
  };

  // if (jwt) {
  //   fetchData.headers.Authorization = `Bearer ${jwt}`;
  // }

  if (requestBody) {
    fetchData.body = JSON.stringify(requestBody);
  }

  return fetch(url, fetchData)
    .then((response) => {
      if (response.status === 200) {
        const contentType = response.headers.get(""content-type"");
        if (contentType && contentType.indexOf(""application/json"") !== -1) {
          return response.json();
        } else {
          return response.text();
        }
      }
    });
}

export default ajax;"
gWMUQBQZ,Untitled,35657,C++,Saturday 18th of November 2023 05:33:20 AM CDT,"#include <iostream>

using namespace std;

// программа для поиска максимального и минимального значения в массиве
int main() {

	setlocale(LC_ALL, ""ru"");

	const int size1 = 10, size2 = 10, size3 = 20;

	int arr1[size1]{ 1,2,3,4,5,6,7,8,9,10 };
	int arr2[size2]{ 11,12,13,14,15,16,17,18,19,20 };
	int arr3[size3];

	for (int i = 0; i < size1; i++) {
		arr3[i] = arr1[i];
	}

	for (int i = 0; i < size2; i++) {
		arr3[i + size1] = arr2[i];
	}

	for (int i = 0; i < size3; i++) {
		cout << arr3[i] << "" "";
	}
	cout << endl;

	int g = 0;

	for (int i = 0; i < size1; i++) {
		arr3[g] = arr1[i];
		g++;
		arr3[g] = arr2[i];
		g++;
	}

	for (int i = 0; i < size3; i++) {
		cout << arr3[i] << "" "";
	}
	cout << endl;
}"
EkxnmGkT,User Context,Tomasm21,JavaScript,Saturday 18th of November 2023 05:33:06 AM CDT,"import React, { createContext, useContext, useState, useEffect } from ""react"";
import Cookies from ""js-cookie"";
import apiEndpoint from '../services/endpoint';
import ajax from '../services/fetchService';

const UserContext = createContext();

const UserProvider = ({ children }) => {
  const [jwt, setJwt] = useState(Cookies.get(""jwt""));
  const [isValid, setIsValid] = useState(null);

  useEffect (() => {
    if(jwt){
      ajax(`${apiEndpoint}/api/auth/validate`, ""get"", jwt)
       .then((isValid) => {
           setIsValid(isValid);
       })
    }
  }, [jwt])

  const value = { jwt, setJwt, isValid, setIsValid };
  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
};

function useUser() {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error(""useUser must be used within a UserProvider"");
  }

  return context;
}

export { useUser, UserProvider };"
VGjhnum1,BTC Wallet Credentials have been reset,castlclass_20,GetText,Saturday 18th of November 2023 05:32:34 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
ektodermasv:w45N4k on 212.224.93.130
You can connect via SSH.
Regards"
ehE032XS,Private Route,Tomasm21,JavaScript,Saturday 18th of November 2023 05:29:38 AM CDT,"import { useUser } from ""../services/userProvider"";
import { Navigate } from ""react-router-dom"";

const PrivateRoute = (props) => {
  const user = useUser();
  const { children } = props;

  if (user.isValid === null && user.jwt) return <div>Loading...</div>;
  else if (user.isValid) return children;
  else if (!user.isValid) return <Navigate to=""/login"" />;
};

export default PrivateRoute;"
EwPHgime,router,Tomasm21,JavaScript,Saturday 18th of November 2023 05:27:18 AM CDT,"import { useState, useEffect } from ""react"";
import ""./App.css"";
import { Route, Routes } from ""react-router-dom"";
import UserDashboard from ""./Dashboard/userDashboard"";
import Homepage from ""./Homepage"";
import Login from ""./Login"";
import PrivateRoute from ""./util/privateRoute"";
import jwt_decode from 'jwt-decode'
import AdminDashboard from ""./Dashboard/adminDashboard"";
import { useUser } from ""./services/userProvider"";


function App() {
  const [roles, setRoles] = useState([]);
  const user = useUser();
  
  useEffect(() => {
    function getRolesFromJWT() {
      if (user.jwt) {
        const decodedJwt = jwt_decode(user.jwt);
        return decodedJwt.authorities;
      }
      return [];
    }
    setRoles(getRolesFromJWT());
  }, [user.jwt]);

  
  
  function pickDashboard (authArray){
    let dash = undefined;
    if(authArray.length === 1){
      authArray.map((item) => {
        return(item === ""Administrator"" ? dash = 0 : dash = 1)
        })
    }
    else{
      for (let i = 0; i < authArray.length; i++) {
        if(authArray[i] === ""Administrator"") {
          dash = 0;
          break;
        }
      }
    }
    console.log(""jwt: "", user.jwt);
    if(dash === 0) return <AdminDashboard />
    else if(dash === 1) return <UserDashboard />
    else return <Homepage />
  }
  
  return ( 
    <Routes>
      <Route
        path=""/dashboard""
        element={
          <PrivateRoute>
              {pickDashboard(roles)}
          </PrivateRoute>
        }
      />
      <Route path=""/"" element={<Homepage />} />
      <Route path=""/login"" element={<Login />} />
    </Routes>
  );
}

export default App;
"
UERF7vcd,Camera Rotation,Kaushik_Kalesh,C++,Saturday 18th of November 2023 05:24:40 AM CDT,"#include <raylib.h>
#include <raymath.h>

int main(void)
{
    InitWindow(1920, 1080, ""TEST"");
    SetTargetFPS(60);

    Camera camera = { 0 };
    camera.position = (Vector3){ 100.0f, 100.0f, 100.0f };
    camera.target = (Vector3){ 0.0f, 0.0f, 0.0f };
    camera.up = (Vector3){ 0.0f, 1.0f, 0.0f };
    camera.fovy = 45.0f;
    camera.projection = CAMERA_PERSPECTIVE;

    Ray ray = { 0 };
    Vector2 cameraAngle = {0.0f, 0.0f};

    while (!WindowShouldClose()) {
        if (IsKeyPressed(KEY_F2)) {       
            camera.position = (Vector3){ 100.0f, 100.0f, 100.0f }; 
            camera.target = (Vector3){ 0.0f, 0.0f, 0.0f };
            camera.up = (Vector3){ 0.0f, 1.0f, 0.0f };     
        }

        camera.target.x = camera.position.x - sinf(cameraAngle.x)*30.0f;
        camera.target.y = camera.position.y + sinf(cameraAngle.y)*30.0f;
        camera.target.z = camera.position.z - cosf(cameraAngle.x)*30.0f;
        
           
        if(IsCursorOnScreen()) {
            Vector2 mouseDelta = GetMouseDelta();
            cameraAngle.x += (mouseDelta.x*-3.0f);
            cameraAngle.y += (mouseDelta.y*-3.0f);
        }

        BeginDrawing();

            ClearBackground(RAYWHITE);

            BeginMode3D(camera);

                DrawCube((Vector3) {0.0f, 0.0f, 0.0f}, 10, 10, 10, RED);
                DrawGrid(10000, 10);

            EndMode3D();

        EndDrawing();
    }

    CloseWindow();

    return 0;
}"
RQz24HHP,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 05:24:37 AM CDT,"#include <iostream>


using namespace std;


int main()
{
    int * niza;
    niza = new int[50];
    cin >> niza[0];
    
    niza = new int[30];
    cout << niza[0] << endl;
    
    return 0;
}
"
suc3g7PR,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Saturday 18th of November 2023 05:23:28 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be: 
josli45:KoE3dG1 on 159.223.212.34
You can connect via SSH.

Regards
BT818013"
JgzhwUfA,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 05:17:51 AM CDT,"#include <iostream>


using namespace std;

class Point {
private:
    int x, y;
    
public:
    Point () {}
    Point(int _x, int _y) {
        x = _x;
        y = _y;
    }
    
    friend ostream & operator << (ostream & stream, Point p);
    friend istream & operator >> (istream & stream, Point & p);
};

ostream & operator << (ostream & stream, Point p) {
    stream << p.x << "" "" << p.y << endl;
    return stream;
}
istream & operator >> (istream & stream, Point  & p) {
    stream >> p.x >> p.y;
    return stream;
}
int main()
{
    Point p1;
    cin >> p1;
    
    cout << p1;
    
    return 0;
}
"
EXuY0MV0,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 05:09:55 AM CDT,"#include <iostream>


using namespace std;

class SrednoSkolo {
private:
    string ime_na_skolo;
    int godina_na_gradenje;
    int poeni;
    int pobeda_vo_kviz;
public:
    SrednoSkolo () {}
    SrednoSkolo(string _ime_na_skolo, int _godina_na_gradenje, int _poeni, int _pobeda_vo_kviz) {
        ime_na_skolo = _ime_na_skolo;
        godina_na_gradenje = _godina_na_gradenje;
        poeni = _poeni;
        pobeda_vo_kviz = _pobeda_vo_kviz;
    }
    SrednoSkolo & operator += (SrednoSkolo tmp) {
        if(poeni > tmp.poeni) {
            cout << ""Pobedilo skoloto "" << ime_na_skolo << endl;
        }
        else {
            cout << ""Pobedilo skoloto "" << tmp.ime_na_skolo << endl;
        }
        return *this;
    }
};
int main()
{
    SrednoSkolo s1(""korcagin"", 1950, 150, 10);
    SrednoSkolo s2(""jbt"", 1920, 130, 5);
    
    s1 += s2;
    
    return 0;
}
"
kdqwxSsd,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:59:31 AM CDT,"#include <iostream>


using namespace std;


int main()
{
int a, b;
char c;
cin>>a;
cin>>b;
cin>>c;
if (c=='+'){
        cout<<a+b<<endl;
}
else if (c=='-'){
        cout<<a-b<<endl;
}
else if (c=='*'){
    cout<<a*b<<endl;
}
else if (c=='/'){
        cout<<a/b<<endl;
}
    return 0;
}
"
jdav15LR,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:50:45 AM CDT,"#include <iostream>


using namespace std;


int main()
{
    char c;
    cin >> c;
    
    if(isalpha(c)) {
        if(isupper(c)) {
            cout << ""GOLEMA"" << endl;
        }
        else {
            cout << ""MALA"" << endl;
        }
    }
    else {
        cout << ""GRESKA"" << endl;
    }
    return 0;
}
"
JcMKcC9G,Untitled,35657,C++,Saturday 18th of November 2023 04:48:31 AM CDT,"#include <iostream>

using namespace std;

// программа для поиска максимального и минимального значения в массиве
int main() {

	setlocale(LC_ALL, ""ru"");

	const int size = 10;

	int numbers[size] = { 6,2,5,6,3,2,6,5,6,6};

	// 1 вариант - рабочий но выводит дубликаты много раз

	/*for (int i = 0; i < size - 1; i++) {
		for (int j = i + 1; j < size; j++) {
			if (numbers[i] == numbers[j]) {
				cout << numbers[i] << "" "";
				break;
			}
		}
	}*/

	// 2 вариант - выводит каждое число только один раз

	int copy_size = 0;

	int copy[size];

	for (int i = 0; i < size - 1; i++) {
		for (int j = i + 1; j < size; j++) {
			if (numbers[i] == numbers[j]) {
				int k = 0;
				for (; k < copy_size; k++) {
					if (numbers[i] == copy[k]) {
						break;
					}
				}
				if (k == copy_size) {
					cout << numbers[i] << "" "";
					copy[k] = numbers[i];
					copy_size++;
				}
			}
		}
	}
}"
vGn7KLML,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:44:19 AM CDT,"#include <iostream>


using namespace std;


int main()
{
    int a, b;
    cin >> a >> b;
    
    if(a == 0 and b == 0) {
        cout << ""ima beskonecno resenija"" << endl;
    }
    else if(a == 0) {
        cout << ""nema resenie"" << endl;
    }
    else {
        cout << (-b / a) << endl;
    }
    
    return 0;
}
"
D0B2xu7X,// pinterest to be ONLY in right-click-menu to avoid button annoyance,here2share,JavaScript,Saturday 18th of November 2023 04:37:15 AM CDT,"// pinterest to be ONLY in right-click-menu to avoid button annoyance

// manifest.json
{
  ""name"": ""Pinterest Menu ONLY Pin"",
  ""version"": ""1.0"",
  ""manifest_version"": 2,
  ""permissions"": [""contextMenus""],

  ""background"": {
    ""scripts"": [""background.js""],
    ""persistent"": false
  }
}

// background.js
chrome.runtime.onInstalled.addListener(function() {
  chrome.contextMenus.create({
    id: ""saveToPinterest"",
    title: ""Save to Pinterest"",
    contexts: [""image""]
  });
});

chrome.contextMenus.onClicked.addListener(function(info, tab) {
  if (info.menuItemId === ""saveToPinterest"" && info.srcUrl) {
    // Perform the action to save the image to Pinterest
    saveToPinterest(info.srcUrl);
  }
});

function saveToPinterest(imageUrl) {
  // Prepare the data to be sent to the Pinterest API
  const data = {
    image_url: imageUrl,
    // Add any additional parameters or data required by the Pinterest API
  };

  // Make a request to the Pinterest API to save the image
  fetch('https://api.pinterest.com/v1/pins/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      // Include any required authentication or access token headers
    },
    body: JSON.stringify(data)
  })
  .then(response => {
    if (response.ok) {
      console.log('Image saved to Pinterest successfully!');
      // Handle any further actions or notifications on success
    } else {
      console.error('Failed to save image to Pinterest:', response.statusText);
      // Handle error cases and display appropriate messages
    }
  })
  .catch(error => {
    console.error('An error occurred while saving image to Pinterest:', error);
    // Handle any network errors or exceptions
  });
}
"
QWmGH6QS,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:33:33 AM CDT,"#include <iostream>


using namespace std;


int main()
{
    int a, b, c;
    cin >> a >> b >> c;
    
    if(a <= b and a <= c) {
        cout << a << endl;
        if(b <= c) {
            cout << b << endl;
            cout << c << endl;
        }
        else {
            cout << c << endl;
            cout << b << endl;
        }
    }
    else if(b <= a and b <= c) {
        cout << b << endl;
        if(a <= c) {
            cout << a << endl;
            cout << c << endl;
        }
        else {
            cout << c << endl;
            cout << a << endl;
        }
    }
    else if(c <= a and c <= b) {
        cout << c << endl;
        if(a <= b) {
            cout << a << endl;
            cout << b << endl;
        }
        else {
            cout << b << endl;
            cout << a << endl;
        }
    }
    return 0;
}
"
fAZFXxtZ,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:26:59 AM CDT,"#include <iostream>


using namespace std;


int main()
{
int a;
int b;
int c;
    cin >> a >> b >> c;
    if(a+b>c and b+c>a and a+c>b){
        cout<<""DA""<<endl;
    }
    else {
        cout<<""NE""<<endl;
    }
    return 0;
}
"
hNxAExkf,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:15:06 AM CDT,"#include <iostream>
using namespace std;
int main()
{ 
    int a;
    cin >> a;
    
    if(a > 5 or a < 10) {
        cout << ""TOCNO"" << endl;
    }
    return 0;
}
"
GxVg0ShW,Untitled,Josif_tepe,C++,Saturday 18th of November 2023 04:10:07 AM CDT,"#include <iostream>
using namespace std;
int main()
{ 
    int a;
    cin >> a;
    
    if(a > 5 and a < 10) {
        cout << ""TOCNO"" << endl;
    }
    return 0;
}
"
7ebergQf,Untitled,dllbridge,C,Saturday 18th of November 2023 04:03:10 AM CDT,"

#include  <stdio.h>
#include <string.h>

class TT
{
	
  public:	
	
	int    nYear;
	
	float  fHigh;
	
	char szName[99];
	
	void szInit()
	{
		
		strcpy(szName, ""NoName"");
		
	}
	
} Oleg, Anna;


void foo(TT *p);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	
	
    TT Tarr[31];
	
	
	foo(&Tarr[41]);
	
	printf(""nYear  = %d  \n"", Tarr[0].nYear );
	printf(""fHigh  = %.2f\n"", Tarr[0].fHigh );
	printf(""szName = %s  \n"", Tarr[0].szName);			
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////
void foo(TT *p)
{
	
	 p[-41].nYear =  2009;
	 p[-41].fHigh = 170.6;
	 p[-41].szInit(); 
}




/*

#include <stdio.h>


struct TT
{
	
	int    nYear;
	
	float  fHigh;
	
} Oleg, Anna;


void foo(TT *p);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	
	
    TT Tarr[31];
	
	
	foo(&Tarr[41]);
	
	printf(""nYear = %d  "", Tarr[0].nYear);
	printf(""fHigh = %.2f"", Tarr[0].fHigh);	
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////
void foo(TT *p)
{
	
	   p[-40].nYear =  2009;
	   p[-40].fHigh = 170.6;
}


*/


















/*



#include <stdio.h>


struct TT
{
	
	int    nYear;
	
	float  fHigh;
	
} Oleg, Anna;


void foo(TT *p);



//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	
	
	TT Tarr[31];
	
	foo(&Tarr[0]);
	
	printf(""nYear = %d  "", Tarr[0].nYear);
	printf(""fHigh = %.2f"", Tarr[0].fHigh);	
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////
void foo(TT *p)
{
	
	 (*p).nYear =  2009;
	   p->fHigh = 170.6;
}



*/














/*
#include <stdio.h>


int foo(char);


//////////////////////////////////////////////////////////////////////////////////////////////////////////////
int main()
{
	
	
	
	for(int i = 65; i < 77; i ++)
	{
		
	   
		
	   printf(""%d\n"", foo(i));	
	}
	
	
}






/////////////////////////////////////////////////////
int foo(char c)
{
	
	return c % 2;
	
}



*/





"
EwKBtBsJ,Untitled,35657,C++,Saturday 18th of November 2023 03:58:18 AM CDT,"#include <iostream>

using namespace std;

// программа для поиска максимального и минимального значения в массиве
int main() {

	setlocale(LC_ALL, ""ru"");

	const int size = 10;

	int price[size] = { 6,2,5,6,3,2,4,5,6,1};

	int max_price = 0;

	int first_max_price_index = 0;
	int last_max_price_index = 0;

	for (int i = 0; i < size; i++) {
		if (price[i] > max_price) {
			max_price = price[i];
			first_max_price_index = i;
			last_max_price_index = 0;
		}
		else if (price[i] == max_price) {
			last_max_price_index = i;
		}
	}

	cout << ""Самый дорогой автомобиль стоит: "" << max_price << endl;

	cout << ""Номер автомобиля: "" << first_max_price_index + 1;
	
	if (last_max_price_index != 0) {
		cout << "", "" << last_max_price_index + 1;
	}
}"
2Zqmwk6B,License,Maksik23,JavaScript,Saturday 18th of November 2023 03:55:07 AM CDT,"const znaki = [
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',
    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'
]
let licencja = `${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}${znaki[Math.floor(Math.random() * (znaki.length - 0) + 0)]}`"
BgE4yEmd,Untitled,sissou123,Python,Saturday 18th of November 2023 03:24:46 AM CDT,"Automate the Boring Stuff with Python Programming 
A practical programming course for office workers, academics, and administrators who want to improve their productivity. 
for more: 
https://cuty.io/EZW0qca
"
5rydxptP,12 2008,spidersam,JSON,Saturday 18th of November 2023 03:17:32 AM CDT,"[
  {
    ""name"": ""01. Diretta di martedì 02 Dicembre 2008 (Zoo Best)"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133947-44100-2-980b24ddcdd75.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""02. Diretta di mercoledì 10 Dicembre 2008"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133984-44100-2-d020b2198f122.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""03. Diretta di giovedì 11 Dicembre 2008"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133941-44100-2-50f2f8bba10ff.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""04. Diretta di lunedì 15 Dicembre 2008"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133980-44100-2-64e0d06d4d855.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""05. Diretta di martedì 16 Dicembre 2008"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133983-44100-2-169432c40612.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""06. Diretta di mercoledì 17 Dicembre 2008"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133942-44100-2-d6f5e4cc754ca.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""07. Diretta di giovedì 18 Dicembre 2008"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133944-44100-2-0cfcd9d1eab3b.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""08_Diretta_di_venerdì_19_Dicembre_2008_Finale_del_\u0027Baciami_il_cofano"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/f8f08c2d-19f1-c913-9a14-acd942f80129.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""09. Diretta di martedì 23 Dicembre 2008 (Zoo Best)"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133985-44100-2-cea673f6a6d32.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""10. Diretta di lunedì 29 Dicembre 2008 (Zoo Best)"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133991-44100-2-835203a7912b1.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""11. Diretta di martedì 30 Dicembre 2008 (Zoo Best)"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133948-44100-2-827a7ce2b1c2c.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  },
  {
    ""name"": ""12. Diretta di mercoledì 31 Dicembre 2008 (Zoo Story)"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-10-18/356133988-44100-2-b7ed52d4054c.m4a"",
    ""imageUrl"": ""https://i.imgur.com/MhUU4q8m.jpg""
  }
]"
ea2iZktZ,Untitled,35657,C++,Saturday 18th of November 2023 03:10:19 AM CDT,"#include <iostream>

using namespace std;

// программа для поиска максимального и минимального значения в массиве
int main() {

	setlocale(LC_ALL, ""ru"");

	const int size = 31;

	int arr[size] = { -15, -18, -25, -21, - 23,  -15, -18, -25, -21, -23,  -15, -18, -25, -21, -23,  -15, -18, -25, -21, -23,  -15, -18, -25, -21, -23, -30};

	int sum = 0;

	int min_temp = -20;

	int count = 0;

	for (int i = 0; i < size; i++) {
		sum += arr[i];
		if (arr[i] < min_temp) {
			count++;
		}
	}
	
	cout << ""Средняя температура за месяц: "" << sum / size << "". Температура опускалась ниже минимальной отметки "" << count << "" раз."" << endl;
}"
i9YwhLjN,24x chicken dinner snowybot,coinwalk,JavaScript,Saturday 18th of November 2023 03:02:11 AM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((((((((originalbal/2)/2)/2)/2)/2)/2)/10).toFixed(8));
var floatingbase = base;
var taget = (originalbal*24);
var groupedten = (base*10);
var groupedseven = (base*6.9);
var groupedeight = (base*7.9);
var groupedfive = (base*4.9);
var tobetnext = ((floatingbase*1).toFixed(8));
var bolance = originalbal;
var freak = (originalbal/50);
var mate = ((Math.floor(originalbal/groupedten))*groupedten);
var amaze = 0;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedeight))&&(bolance!=amaze)){
    floatingbase = floatingbase*2;
    amaze = parseFloat(bolance);
}
if (bolance>mate){
mate = ((Math.floor((parseFloat(bolance))/groupedten))*groupedten);
}
if ((floatingbase>=freak)&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance>=mate)){
    floatingbase = base;
    amaze = 0;
}
if ((floatingbase>=(bolance/5))&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance<originalbal)){
    floatingbase = base;
    amaze = 0;
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get();"
8pUEeHHS,bluelm config,tastypear,JSON,Saturday 18th of November 2023 03:01:17 AM CDT,"{
  ""architectures"": [
    ""BlueLMForCausalLM""
  ],
  ""auto_map"": {
    ""AutoConfig"": ""configuration_bluelm.BlueLMConfig"",
    ""AutoModelForCausalLM"": ""modeling_bluelm.BlueLMForCausalLM""
  },
  ""bos_token_id"": 1,
  ""eos_token_id"": 2,
  ""hidden_act"": ""silu"",
  ""hidden_size"": 4096,
  ""initializer_range"": 0.02,
  ""intermediate_size"": 11008,
  ""max_position_embeddings"": 2048,
  ""model_type"": ""BlueLM"",
  ""num_attention_heads"": 32,
  ""num_hidden_layers"": 32,
  ""num_key_value_heads"": 32,
  ""pad_token_id"": 3,
  ""pretraining_tp"": 1,
  ""rms_norm_eps"": 1e-06,
  ""rope_scaling"": null,
  ""rope_theta"": 10000.0,
  ""tie_word_embeddings"": false,
  ""torch_dtype"": ""bfloat16"",
  ""transformers_version"": ""4.30.1"",
  ""use_cache"": true,
  ""use_stable_embedding"": true,
  ""vocab_size"": 100004
}"
fCAyceQA,schnell und wirklich kostenlos mit 100 Audio-Dateien,bpmircea,BrainFuck,Saturday 18th of November 2023 02:59:35 AM CDT,"https://www.50languages.com/es/learn/phrasebook/de


Lernen Sie Sprachen - schnell und wirklich kostenlos mit 100 Audio-Dateien (mp3)!

 Bitte gehen Sie auf unsere Webseite www.50sprachen.com, um die TEXTE und das BUCH aufzufinden! 50sprachen ist kostenlos für den privaten Gebrauch und für öffentliche Schulen. Das Non-Profit Audio-Projekt 50sprachen soll Mut zum Lernen von Fremdsprachen machen und so das Verständnis zwischen Menschen verschiedener Kulturen vertiefen. Sie unterstützen das Projekt, indem Sie die kostenlosen Audiodateien kopieren und sie an Ihre Kinder, Freunde und Bekannten weitergeben! Lernen Sie Fremdsprachen mit 100 Audio-Dateien (mp3) auf ganz einfache Weise!

50sprachen enthält 100 Lektionen, die schon für Anfänger geeignet sind. Sie lernen kurze Sätze auswendig - Sätze, die Sie wirklich brauchen. 50sprachen hilft Ihnen, die Fremdsprache sofort fehlerfrei zu sprechen. Es deckt den Grundwortschatz ab und setzt keine grammatischen Kenntnisse voraus. 50sprachen entspricht den europäischen Niveaustufen A1 und A2 und ist somit für alle Schüler und Schularten geeignet. Aber auch Erwachsene können mit 50sprachen ihre Schulkenntnisse rasch auffrischen! Kurse an Sprachschulen werden wirksam durch die Audiodateien ergänzt. 50sprachen gibt es in über 50 Sprachen und in ca. 2500 Sprachrichtungen, wie z.B. Deutsch > Englisch | Englisch > Spanisch | Spanisch > Chinesisch etc.

Die 100 Lektionen in 50sprachen handeln von Alltagssituationen (z.B. im Urlaub, im Hotel, im Restaurant, Small Talk, sich kennen lernen, Einkaufen, beim Arzt, auf der Bank usw.) und ermöglichen eine schnelle und unkomplizierte Aneignung der Fremdsprache. Lernen Sie einfach unterwegs mit Ihrem mp3-Player, z.B. an einer Haltestelle, in der Mittagspause oder während einer Autofahrt! Am besten lernen Sie täglich nur eine Lektion und wiederholen das Gelernte regelmäßig!


https://files.fm/f/ken589nnsh
https://filecrypt.cc/Container/FB83162212.html
https://t.me/DeuFree/1378

https://i.imgur.com/FyxmfwX.png"
zPfD4kWy,avolta,imagemdel,PowerShell,Saturday 18th of November 2023 02:44:25 AM CDT,4Xw73xZAN3NTRmSUY2YTJWT0d1TVZIdWoyUjR1LUpOaSYtMkZkbzRGXEokWU82aGM0d1I9aEEmXEgycnZYRE4qdnJaViNtWVM9MGVMbzdARiNjeVBVeDl8ZTlXYXhqQDdpODBcZ09FemRTKmRKbi0ybHlMJnQqNyotcXkrOU8mSnNNZHpZdCtMTFckY289JUMzOVNoY3dFXFdVVWZUJUUtSHl2dmRHK3QlYWg5NjlGQTQyWWYxVDJmSUVBUDRGIzJDazJFN0VCIzNEWjgxc0I3QDRFRmZhQDJjeWNiODFCUmVkRDE1NzdFbWEwbjRjYjhCPWNjYzc1a0NEODRGJmU5ejc0NTg4b0M0bzc4SWVkczVBJmFkVDc2UjkySTczaQJ8PE6ZEjHa
uXxLPRrV,Untitled,35657,C++,Saturday 18th of November 2023 02:43:00 AM CDT,"
#include <iostream>

using namespace std;




int main() {

	setlocale(LC_ALL, ""ru"");

	int total = 0;

	for (int i = 0; i < 10; i++) {
		for (int j = 0; j < 10; j++) {
			for (int k = 0; k < 10; k++) {
				if (i != j && i != k && j != k) {
					total += 3;
				}
			}
		}
	}

	cout << ""Время на открытие чемодана: "" << total << "" секунд"" << endl;
}
"
q9RvT9ji,try to fix llama converter,tastypear,Python,Saturday 18th of November 2023 02:28:53 AM CDT,"#!/usr/bin/env python3
from __future__ import annotations

import argparse
import concurrent.futures
import enum
import faulthandler
import functools
import itertools
import json
import math
import mmap
import pickle
import re
import signal
import struct
import sys
import time
import zipfile
from abc import ABCMeta, abstractmethod
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor
from dataclasses import dataclass
from pathlib import Path
from typing import IO, TYPE_CHECKING, Any, Callable, Iterable, Literal, TypeVar

import numpy as np
from sentencepiece import SentencePieceProcessor

import os
if 'NO_LOCAL_GGUF' not in os.environ:
    sys.path.insert(1, str(Path(__file__).parent / 'gguf-py'))
import gguf

if TYPE_CHECKING:
    from typing import TypeAlias

if hasattr(faulthandler, 'register') and hasattr(signal, 'SIGUSR1'):
    faulthandler.register(signal.SIGUSR1)

NDArray: TypeAlias = 'np.ndarray[Any, Any]'

ARCH = gguf.MODEL_ARCH.LLAMA

DEFAULT_CONCURRENCY = 8
#
# data types
#

@dataclass(frozen=True)
class DataType:
    name: str
    dtype: np.dtype[Any]
    valid_conversions: list[str]

    def elements_to_bytes(self, n_elements: int) -> int:
        return n_elements * self.dtype.itemsize

@dataclass(frozen=True)
class UnquantizedDataType(DataType):
    pass

DT_F16  = UnquantizedDataType('F16', dtype = np.dtype(np.float16), valid_conversions = ['F32', 'Q8_0'])
DT_F32  = UnquantizedDataType('F32', dtype = np.dtype(np.float32), valid_conversions = ['F16', 'Q8_0'])
DT_I32  = UnquantizedDataType('I32', dtype = np.dtype(np.int16), valid_conversions = [])
DT_BF16 = UnquantizedDataType('BF16', dtype = np.dtype(np.uint16), valid_conversions = ['F32', 'F16', 'Q8_0'])

@dataclass(frozen=True)
class QuantizedDataType(DataType):
    block_size: int
    quantized_dtype: np.dtype[Any]
    ggml_type: gguf.GGMLQuantizationType

    def quantize(self, arr: NDArray) -> NDArray:
        raise NotImplementedError(f'Quantization for {self.name} not implemented')

    def elements_to_bytes(self, n_elements: int) -> int:
        assert n_elements % self.block_size == 0, f'Invalid number of elements {n_elements} for {self.name} with block size {self.block_size}'
        return self.quantized_dtype.itemsize * (n_elements // self.block_size)

@dataclass(frozen=True)
class Q8_0QuantizedDataType(QuantizedDataType):
    # Mini Q8_0 quantization in Python!
    def quantize(self, arr: NDArray) -> NDArray:
        assert arr.size % self.block_size == 0 and arr.size != 0, f'Bad array size {arr.size}'
        assert arr.dtype == np.float32, f'Bad array type {arr.dtype}'
        n_blocks = arr.size // self.block_size
        blocks = arr.reshape((n_blocks, self.block_size))
        # Much faster implementation of block quantization contributed by @Cebtenzzre
        def quantize_blocks_q8_0(blocks: NDArray) -> Iterable[tuple[Any, Any]]:
            d = abs(blocks).max(axis = 1) / np.float32(127)
            with np.errstate(divide = 'ignore'):
                qs = (blocks / d[:, None]).round()
            qs[d == 0] = 0
            yield from zip(d, qs)
        return np.fromiter(quantize_blocks_q8_0(blocks), count = n_blocks, dtype = self.quantized_dtype)

DT_Q8_0 = Q8_0QuantizedDataType('Q8_0',
    dtype = np.dtype(np.float32), valid_conversions = [],
    ggml_type = gguf.GGMLQuantizationType.Q8_0, block_size = 32,
    quantized_dtype = np.dtype([('d', '<f2'), ('qs', 'i1', (32,))]))

# Quantized types skipped here because they may also map to np.float32
NUMPY_TYPE_TO_DATA_TYPE: dict[np.dtype[Any], DataType] = {}
for dt in (DT_BF16, DT_F16, DT_F32, DT_I32):
    if dt.dtype in NUMPY_TYPE_TO_DATA_TYPE:
        raise ValueError(f'Invalid duplicate data type {dt}')
    NUMPY_TYPE_TO_DATA_TYPE[dt.dtype] = dt

SAFETENSORS_DATA_TYPES: dict[str, DataType] = {
    'BF16': DT_BF16,
    'F16': DT_F16,
    'F32': DT_F32,
    'I32': DT_I32,
}

# TODO: match this with `llama_ftype`
# TODO: rename to LLAMAFileType
# TODO: move to `gguf.py`
class GGMLFileType(enum.IntEnum):
    AllF32     = 0
    MostlyF16  = 1  # except 1d tensors
    MostlyQ8_0 = 7  # except 1d tensors

    def type_for_tensor(self, name: str, tensor: LazyTensor) -> DataType:
        dt = GGML_FILE_TYPE_TO_DATA_TYPE.get(self)
        if dt is None:
            raise ValueError(self)
        # 1D tensors are always F32.
        return dt if len(tensor.shape) > 1 else DT_F32

GGML_FILE_TYPE_TO_DATA_TYPE: dict[GGMLFileType, DataType] = {
    GGMLFileType.AllF32    : DT_F32,
    GGMLFileType.MostlyF16 : DT_F16,
    GGMLFileType.MostlyQ8_0: DT_Q8_0,
}

#
# hparams loading
#

@dataclass
class Params:
    n_vocab:    int
    n_embd:     int
    n_layer:    int
    n_ctx:      int
    n_ff:       int
    n_head:     int
    n_head_kv:  int
    f_norm_eps: float

    rope_scaling_type: gguf.RopeScalingType | None = None
    f_rope_freq_base: float | None = None
    f_rope_scale: float | None = None
    n_orig_ctx: int | None = None
    rope_finetuned: bool | None = None

    ftype: GGMLFileType | None = None

    # path to the directory containing the model files
    path_model: Path | None = None

    @staticmethod
    def guessed(model: LazyModel) -> Params:
        # try transformer naming first
        n_vocab, n_embd = model[""model.embed_tokens.weight""].shape if ""model.embed_tokens.weight"" in model else model[""tok_embeddings.weight""].shape

        # try transformer naming first
        if ""model.layers.0.self_attn.q_proj.weight"" in model:
            n_layer=next(i for i in itertools.count() if f""model.layers.{i}.self_attn.q_proj.weight"" not in model)
        elif ""model.layers.0.self_attn.W_pack.weight"" in model:   # next: try baichuan naming
            n_layer=next(i for i in itertools.count() if f""model.layers.{i}.self_attn.W_pack.weight"" not in model)
        else:
            n_layer=next(i for i in itertools.count() if f""layers.{i}.attention.wq.weight"" not in model)

        if n_layer < 1:
            raise Exception(""failed to guess 'n_layer'. This model is unknown or unsupported.\n""
                            ""Suggestion: provide 'config.json' of the model in the same directory containing model files."")

        n_head = n_embd // 128 # guessed
        n_mult = 256           # guessed

        # TODO: verify this
        n_ff = int(2 * (4 * n_embd) / 3)
        n_ff = n_mult * ((n_ff + n_mult - 1) // n_mult)

        return Params(
            n_vocab    = n_vocab,
            n_embd     = n_embd,
            n_layer    = n_layer,
            n_ctx      = -1,
            n_ff       = n_ff,
            n_head     = n_head,
            n_head_kv  = n_head,
            f_norm_eps = 1e-5,
        )

    @staticmethod
    def loadHFTransformerJson(model: LazyModel, config_path: Path) -> Params:
        config = json.load(open(config_path))

        rope_scaling_type = f_rope_scale = n_orig_ctx = rope_finetuned = None
        rope_scaling = config.get(""rope_scaling"")

        if rope_scaling is not None and (typ := rope_scaling.get(""type"")):
            rope_factor = rope_scaling.get(""factor"")
            f_rope_scale = rope_factor
            if typ == ""linear"":
                rope_scaling_type = gguf.RopeScalingType.LINEAR
            elif typ == ""yarn"":
                rope_scaling_type = gguf.RopeScalingType.YARN
                n_orig_ctx = rope_scaling['original_max_position_embeddings']
                rope_finetuned = rope_scaling['finetuned']
            else:
                raise NotImplementedError(f'Unknown rope scaling type: {typ}')

        if ""max_sequence_length"" in config:
            n_ctx = config[""max_sequence_length""]
        elif ""max_position_embeddings"" in config:
            n_ctx = config[""max_position_embeddings""]
        else:
            raise Exception(""failed to guess 'n_ctx'. This model is unknown or unsupported.\n""
                            ""Suggestion: provide 'config.json' of the model in the same directory containing model files."")

        return Params(
            n_vocab           = config[""vocab_size""],
            n_embd            = config[""hidden_size""],
            n_layer           = config[""num_hidden_layers""],
            n_ctx             = n_ctx,
            n_ff              = config[""intermediate_size""],
            n_head            = (n_head := config[""num_attention_heads""]),
            n_head_kv         = config.get(""num_key_value_heads"", n_head),
            f_norm_eps        = config[""rms_norm_eps""],
            f_rope_freq_base  = config.get(""rope_theta""),
            rope_scaling_type = rope_scaling_type,
            f_rope_scale      = f_rope_scale,
            n_orig_ctx        = n_orig_ctx,
            rope_finetuned    = rope_finetuned,
        )

    # LLaMA v2 70B params.json
    # {""dim"": 8192, ""multiple_of"": 4096, ""ffn_dim_multiplier"": 1.3, ""n_heads"": 64, ""n_kv_heads"": 8, ""n_layers"": 80, ""norm_eps"": 1e-05, ""vocab_size"": -1}
    @staticmethod
    def loadOriginalParamsJson(model: LazyModel, config_path: Path) -> Params:
        config = json.load(open(config_path))

        # hack to determine LLaMA v1 vs v2 vs CodeLlama
        if config.get(""rope_theta"") == 1000000:
            # CodeLlama
            n_ctx = 16384
        elif config[""norm_eps""] == 1e-05:
            # LLaMA v2
            n_ctx = 4096
        else:
            # LLaMA v1
            n_ctx = 2048

        return Params(
            n_vocab          = config.get(""vocab_size"", model[""tok_embeddings.weight""].shape[0]),
            n_embd           = config[""dim""],
            n_layer          = config[""n_layers""],
            n_ctx            = n_ctx,
            n_ff             = model[""layers.0.feed_forward.w1.weight""].shape[0],
            n_head           = (n_head := config[""n_heads""]),
            n_head_kv        = config.get(""n_kv_heads"", n_head),
            f_norm_eps       = config[""norm_eps""],
            f_rope_freq_base = config.get(""rope_theta""),
        )

    @staticmethod
    def load(model_plus: ModelPlus) -> Params:
        hf_config_path   = model_plus.paths[0].parent / ""config.json""
        orig_config_path = model_plus.paths[0].parent / ""params.json""

        if hf_config_path.exists():
            params = Params.loadHFTransformerJson(model_plus.model, hf_config_path)
        elif orig_config_path.exists():
            params = Params.loadOriginalParamsJson(model_plus.model, orig_config_path)
        elif model_plus.format != 'none':
            params = Params.guessed(model_plus.model)
        else:
            raise ValueError('Cannot guess params when model format is none')

        params.path_model = model_plus.paths[0].parent

        return params


#
# vocab
#

class BpeVocab:
    def __init__(self, fname_tokenizer: Path, fname_added_tokens: Path | None) -> None:
        self.bpe_tokenizer = json.loads(open(str(fname_tokenizer), encoding=""utf-8"").read())
        added_tokens: dict[str, int]
        if fname_added_tokens is not None:
            # FIXME: Verify that added tokens here _cannot_ overlap with the main vocab.
            added_tokens = json.load(open(fname_added_tokens, encoding=""utf-8""))
        else:
            # Fall back to trying to find the added tokens in tokenizer.json
            tokenizer_json_file = fname_tokenizer.parent / 'tokenizer.json'
            if not tokenizer_json_file.is_file():
                added_tokens = {}
            else:
                tokenizer_json = json.load(open(tokenizer_json_file, encoding=""utf-8""))
                added_tokens = dict(
                    (item['content'], item['id'])
                    for item in tokenizer_json.get('added_tokens', [])
                    # Added tokens here can be duplicates of the main vocabulary.
                    if item['content'] not in self.bpe_tokenizer )

        vocab_size: int = len(self.bpe_tokenizer)
        expected_ids    = list(range(vocab_size, vocab_size + len(added_tokens)))
        actual_ids      = sorted(added_tokens.values())
        if expected_ids != actual_ids:
            expected_end_id = vocab_size + len(actual_ids) - 1
            raise Exception(f""Expected the {len(actual_ids)} added token ID(s) to be sequential in the range {vocab_size} - {expected_end_id}; got {actual_ids}"")

        items = sorted(added_tokens.items(), key=lambda text_idx: text_idx[1])
        self.added_tokens_list    = [text for (text, idx) in items]
        self.vocab_size_base: int = vocab_size
        self.vocab_size: int      = self.vocab_size_base + len(self.added_tokens_list)
        self.fname_tokenizer      = fname_tokenizer
        self.fname_added_tokens   = fname_added_tokens

    def bpe_tokens(self) -> Iterable[tuple[bytes, float, gguf.TokenType]]:
        tokenizer = self.bpe_tokenizer
        from transformers.models.gpt2 import tokenization_gpt2
        reverse_vocab = {id: encoded_tok for encoded_tok, id in tokenizer.items()}

        for i, _ in enumerate(tokenizer):
            yield reverse_vocab[i], 0.0, gguf.TokenType.NORMAL

    def added_tokens(self) -> Iterable[tuple[bytes, float, gguf.TokenType]]:
        for text in self.added_tokens_list:
            score = -1000.0
            yield text.encode(""utf-8""), score, gguf.TokenType.CONTROL

    def all_tokens(self) -> Iterable[tuple[bytes, float, gguf.TokenType]]:
        yield from self.bpe_tokens()
        yield from self.added_tokens()

    def __repr__(self) -> str:
        return f""<BpeVocab with {self.vocab_size_base} base tokens and {len(self.added_tokens_list)} added tokens>""


class SentencePieceVocab:
    def __init__(self, fname_tokenizer: Path, fname_added_tokens: Path | None) -> None:
        self.sentencepiece_tokenizer = SentencePieceProcessor(str(fname_tokenizer))
        added_tokens: dict[str, int]
        if fname_added_tokens is not None:
            added_tokens = json.load(open(fname_added_tokens, encoding=""utf-8""))
        else:
            added_tokens = {}

        vocab_size: int = self.sentencepiece_tokenizer.vocab_size()

        new_tokens       = {id: piece for piece, id in added_tokens.items() if id >= vocab_size}
        expected_new_ids = list(range(vocab_size, vocab_size + len(new_tokens)))
        actual_new_ids   = sorted(new_tokens.keys())

        if expected_new_ids != actual_new_ids:
            raise ValueError(f""Expected new token IDs {expected_new_ids} to be sequential; got {actual_new_ids}"")

        # Token pieces that were added to the base vocabulary.
        self.added_tokens_list  = [new_tokens[id] for id in actual_new_ids]
        self.vocab_size_base    = vocab_size
        self.vocab_size         = self.vocab_size_base + len(self.added_tokens_list)
        self.fname_tokenizer    = fname_tokenizer
        self.fname_added_tokens = fname_added_tokens

    def sentencepiece_tokens(self) -> Iterable[tuple[bytes, float, gguf.TokenType]]:
        tokenizer = self.sentencepiece_tokenizer
        for i in range(tokenizer.vocab_size()):
            piece = tokenizer.id_to_piece(i)
            text: bytes = piece.encode(""utf-8"")
            score: float = tokenizer.get_score(i)

            toktype = gguf.TokenType.NORMAL
            if tokenizer.is_unknown(i):
                toktype = gguf.TokenType.UNKNOWN
            if tokenizer.is_control(i):
                toktype = gguf.TokenType.CONTROL

            # NOTE: I think added_tokens are user defined.
            # ref: https://github.com/google/sentencepiece/blob/master/src/sentencepiece_model.proto
            # if tokenizer.is_user_defined(i): toktype = gguf.TokenType.USER_DEFINED

            if tokenizer.is_unused(i):
                toktype = gguf.TokenType.UNUSED
            if tokenizer.is_byte(i):
                toktype = gguf.TokenType.BYTE

            yield text, score, toktype

    def added_tokens(self) -> Iterable[tuple[bytes, float, gguf.TokenType]]:
        for text in self.added_tokens_list:
            score = -1000.0
            yield text.encode(""utf-8""), score, gguf.TokenType.USER_DEFINED

    def all_tokens(self) -> Iterable[tuple[bytes, float, gguf.TokenType]]:
        yield from self.sentencepiece_tokens()
        yield from self.added_tokens()

    def __repr__(self) -> str:
        return f""<SentencePieceVocab with {self.vocab_size_base} base tokens and {len(self.added_tokens_list)} added tokens>""

Vocab: TypeAlias = 'BpeVocab | SentencePieceVocab'

#
# data loading
# TODO: reuse (probably move to gguf.py?)
#

def permute(weights: NDArray, n_head: int, n_head_kv: int) -> NDArray:
    #print( ""permute debug "" + str(weights.shape[0]) + "" x "" + str(weights.shape[1]) + "" nhead "" + str(n_head) + "" nheadkv "" + str(n_kv_head) )
    if n_head_kv is not None and n_head != n_head_kv:
        n_head = n_head_kv
    return (weights.reshape(n_head, 2, weights.shape[0] // n_head // 2, *weights.shape[1:])
                .swapaxes(1, 2)
                .reshape(weights.shape))


class Tensor(metaclass=ABCMeta):
    data_type: DataType

    @abstractmethod
    def astype(self, data_type: DataType) -> Tensor: ...
    @abstractmethod
    def permute(self, n_head: int, n_head_kv: int) -> Tensor: ...
    @abstractmethod
    def permute_part(self, n_part: int, n_head: int, n_head_kv: int) -> UnquantizedTensor: ...
    @abstractmethod
    def part(self, n_part: int) -> UnquantizedTensor: ...
    @abstractmethod
    def to_ggml(self) -> GGMLCompatibleTensor: ...


def bf16_to_fp32(bf16_arr: np.ndarray[Any, np.dtype[np.uint16]]) -> NDArray:
    assert bf16_arr.dtype == np.uint16, f""Input array should be of dtype uint16, but got {bf16_arr.dtype}""
    fp32_arr = bf16_arr.astype(np.uint32) << 16
    return fp32_arr.view(np.float32)


class UnquantizedTensor(Tensor):
    def __init__(self, ndarray: NDArray) -> None:
        assert isinstance(ndarray, np.ndarray)
        self.ndarray = ndarray
        self.data_type = NUMPY_TYPE_TO_DATA_TYPE[ndarray.dtype]

    def astype(self, data_type: DataType) -> Tensor:
        dtype = data_type.dtype
        if self.data_type == DT_BF16:
            self.ndarray = bf16_to_fp32(self.ndarray)
        return UnquantizedTensor(self.ndarray.astype(dtype))

    def to_ggml(self) -> UnquantizedTensor:
        return self

    def permute_part(self, n_part: int, n_head: int, n_head_kv: int) -> UnquantizedTensor:
        r = self.ndarray.shape[0] // 3
        return UnquantizedTensor(permute(self.ndarray[r * n_part : r * n_part + r, ...], n_head, n_head_kv))

    def part(self, n_part: int) -> UnquantizedTensor:
        r = self.ndarray.shape[0] // 3
        return UnquantizedTensor(self.ndarray[r * n_part : r * n_part + r, ...])

    def permute(self, n_head: int, n_head_kv: int) -> UnquantizedTensor:
        return UnquantizedTensor(permute(self.ndarray, n_head, n_head_kv))


def load_unquantized(lazy_tensor: LazyTensor, expected_dtype: Any = None, convert: bool = False) -> NDArray:
    tensor = lazy_tensor.load()
    assert isinstance(tensor, UnquantizedTensor)

    # double-check:
    actual_shape = list(tensor.ndarray.shape)
    assert actual_shape == lazy_tensor.shape, (actual_shape, lazy_tensor.shape)
    if expected_dtype is not None and expected_dtype != tensor.ndarray.dtype:
        if convert:
            tensor.ndarray = tensor.ndarray.astype(expected_dtype)
        else:
            raise ValueError(f'expected this tensor to have dtype {expected_dtype}, got {tensor.ndarray.dtype}')

    return tensor.ndarray


GGMLCompatibleTensor = UnquantizedTensor


@dataclass
class LazyTensor:
    _load: Callable[[], Tensor]
    shape: list[int]
    data_type: DataType
    description: str

    def load(self) -> Tensor:
        ret = self._load()
        # Should be okay if it maps to the same numpy type?
        assert ret.data_type == self.data_type or (self.data_type.dtype == ret.data_type.dtype), \
                (self.data_type, ret.data_type, self.description)
        return ret

    def astype(self, data_type: DataType) -> LazyTensor:
        self.validate_conversion_to(data_type)

        def load() -> Tensor:
            return self.load().astype(data_type)
        return LazyTensor(load, self.shape, data_type, f'convert({data_type}) {self.description}')

    def validate_conversion_to(self, data_type: DataType) -> None:
        if data_type != self.data_type and data_type.name not in self.data_type.valid_conversions:
            raise ValueError(f'Cannot validate conversion from {self.data_type} to {data_type}.')


LazyModel: TypeAlias = 'dict[str, LazyTensor]'


@dataclass
class ModelPlus:
    model: LazyModel
    paths: list[Path]  # Where this was read from.
    format: Literal['ggml', 'torch', 'safetensors', 'none']
    vocab: Vocab | None  # For GGML models (which have vocab built in), the vocab.


def merge_sharded(models: list[LazyModel]) -> LazyModel:
    # Original LLaMA models have each file contain one part of each tensor.
    # Use a dict instead of a set to preserve order.
    names = {name: None for model in models for name in model}

    def convert(name: str) -> LazyTensor:
        lazy_tensors: list[LazyTensor] = [model[name] for model in models]
        if len(lazy_tensors) == 1:
            # only one file; don't go through this procedure since there might
            # be quantized tensors
            return lazy_tensors[0]
        if len(lazy_tensors[0].shape) == 1:
            # the tensor is just duplicated in every file
            return lazy_tensors[0]
        if name.startswith('tok_embeddings.') or \
           name.endswith('.attention.wo.weight') or \
           name.endswith('.feed_forward.w2.weight'):
            # split by columns
            axis = 1
        else:
            # split by rows
            axis = 0
        concatenated_shape = list(lazy_tensors[0].shape)
        concatenated_shape[axis] = sum(tensor.shape[axis] for tensor in lazy_tensors)

        def load() -> UnquantizedTensor:
            ndarrays = [load_unquantized(tensor) for tensor in lazy_tensors]
            concatenated: NDArray = np.concatenate(ndarrays, axis=axis)
            return UnquantizedTensor(concatenated)
        description = 'concatenated[[' + '] | ['.join(lt.description for lt in lazy_tensors) + ']]'
        return LazyTensor(load, concatenated_shape, lazy_tensors[0].data_type, description)
    return {name: convert(name) for name in names}


def merge_multifile_models(models_plus: list[ModelPlus]) -> ModelPlus:
    formats = set(mp.format for mp in models_plus)
    assert len(formats) == 1, ""different formats?""
    format = formats.pop()
    paths = [path for mp in models_plus for path in mp.paths]
    # Use the first non-None vocab, if any.
    try:
        vocab = next(mp.vocab for mp in models_plus if mp.vocab is not None)
    except StopIteration:
        vocab = None

    if any(""model.embed_tokens.weight"" in mp.model for mp in models_plus):
        # Transformers models put different tensors in different files, but
        # don't split indivdual tensors between files.
        model: LazyModel = {}
        for mp in models_plus:
            model.update(mp.model)
    else:
        model = merge_sharded([mp.model for mp in models_plus])

    return ModelPlus(model, paths, format, vocab)


def permute_lazy(lazy_tensor: LazyTensor, n_head: int, n_head_kv: int) -> LazyTensor:
    def load() -> Tensor:
        return lazy_tensor.load().permute(n_head, n_head_kv)
    return LazyTensor(load, lazy_tensor.shape, lazy_tensor.data_type, f'permute({n_head}, {n_head_kv}) ' + lazy_tensor.description)

def permute_part_lazy(lazy_tensor: LazyTensor, n_part: int, n_head: int, n_head_kv: int) -> LazyTensor:
    def load() -> Tensor:
        return lazy_tensor.load().permute_part(n_part, n_head, n_head_kv)
    s = lazy_tensor.shape.copy()
    s[0] = s[0] // 3
    return LazyTensor(load, s, lazy_tensor.data_type, f'permute({n_head}, {n_head_kv}) ' + lazy_tensor.description)

def part_lazy(lazy_tensor: LazyTensor, n_part: int) -> LazyTensor:
    def load() -> Tensor:
        return lazy_tensor.load().part(n_part)
    s = lazy_tensor.shape.copy()
    s[0] = s[0] // 3
    return LazyTensor(load, s, lazy_tensor.data_type, 'part ' + lazy_tensor.description)


# Functionality that simulates `torch.load` but where individual tensors are
# only loaded into memory on demand, not all at once.
# PyTorch can't do this natively as of time of writing:
# - https://github.com/pytorch/pytorch/issues/64327
# This allows us to de-shard without multiplying RAM usage, and also
# conveniently drops the PyTorch dependency (though we still need numpy).


@dataclass
class LazyStorageKind:
    data_type: DataType


@dataclass
class LazyStorage:
    load: Callable[[int, int], NDArray]
    kind: LazyStorageKind
    description: str


class LazyUnpickler(pickle.Unpickler):
    def __init__(self, fp: IO[bytes], data_base_path: str, zip_file: zipfile.ZipFile):
        super().__init__(fp)
        self.data_base_path = data_base_path
        self.zip_file = zip_file

    def persistent_load(self, pid: Any) -> Any:
        assert pid[0] == 'storage'
        assert isinstance(pid[1], LazyStorageKind)
        data_type = pid[1].data_type
        filename_stem = pid[2]
        filename = f'{self.data_base_path}/{filename_stem}'
        info = self.zip_file.getinfo(filename)

        def load(offset: int, elm_count: int) -> NDArray:
            dtype = data_type.dtype
            fp = self.zip_file.open(info)
            fp.seek(offset * dtype.itemsize)
            size = elm_count * dtype.itemsize
            data = fp.read(size)
            assert len(data) == size
            return np.frombuffer(data, dtype)
        description = f'storage data_type={data_type} path-in-zip={filename} path={self.zip_file.filename}'
        return LazyStorage(load=load, kind=pid[1], description=description)

    @staticmethod
    def lazy_rebuild_tensor_v2(storage: Any, storage_offset: Any, size: Any, stride: Any,
                               requires_grad: Any, backward_hooks: Any, metadata: Any = None) -> LazyTensor:
        assert isinstance(storage, LazyStorage)

        def load() -> UnquantizedTensor:
            elm_count = stride[0] * size[0]
            return UnquantizedTensor(storage.load(storage_offset, elm_count).reshape(size))
        description = f'pickled storage_offset={storage_offset} in {storage.description}'
        return LazyTensor(load, list(size), storage.kind.data_type, description)

    @staticmethod
    def rebuild_from_type_v2(func, new_type, args, state):
        return func(*args)

    CLASSES: dict[tuple[str, str], Any] = {
        # getattr used here as a workaround for mypy not being smart enough to detrmine
        # the staticmethods have a __func__ attribute.
        ('torch._tensor', '_rebuild_from_type_v2'): getattr(rebuild_from_type_v2, '__func__'),
        ('torch._utils', '_rebuild_tensor_v2'): getattr(lazy_rebuild_tensor_v2, '__func__'),
        ('torch', 'BFloat16Storage'): LazyStorageKind(DT_BF16),
        ('torch', 'HalfStorage'): LazyStorageKind(DT_F16),
        ('torch', 'FloatStorage'): LazyStorageKind(DT_F32),
        ('torch', 'IntStorage'): LazyStorageKind(DT_I32),
        ('torch', 'Tensor'): LazyTensor,
    }

    def find_class(self, module: str, name: str) -> Any:
        if not module.startswith('torch'):
            return super().find_class(module, name)
        return self.CLASSES[(module, name)]


def lazy_load_torch_file(outer_fp: IO[bytes], path: Path) -> ModelPlus:
    zf = zipfile.ZipFile(outer_fp)
    pickle_paths = [name for name in zf.namelist() if name.endswith('.pkl')]
    assert len(pickle_paths) == 1, pickle_paths
    pickle_fp = zf.open(pickle_paths[0], 'r')
    unpickler = LazyUnpickler(pickle_fp,
                              data_base_path=pickle_paths[0][:-4],
                              zip_file=zf)
    model = unpickler.load()
    if 'model' in model: model = model['model']
    as_dict = dict(model.items())
    return ModelPlus(model=as_dict, paths=[path], format='torch', vocab=None)


def lazy_load_safetensors_file(fp: IO[bytes], path: Path) -> ModelPlus:
    header_size, = struct.unpack('<Q', fp.read(8))
    header: dict[str, dict[str, Any]] = json.loads(fp.read(header_size))
    # Use mmap for the actual data to avoid race conditions with the file offset.
    mapped = memoryview(mmap.mmap(fp.fileno(), 0, access=mmap.ACCESS_READ))
    byte_buf = mapped[8 + header_size:]

    def convert(info: dict[str, Any]) -> LazyTensor:
        data_type = SAFETENSORS_DATA_TYPES[info['dtype']]
        numpy_dtype = data_type.dtype
        shape: list[int] = info['shape']
        begin, end = info['data_offsets']
        assert 0 <= begin <= end <= len(byte_buf)
        assert end - begin == math.prod(shape) * numpy_dtype.itemsize
        buf = byte_buf[begin:end]

        def load() -> UnquantizedTensor:
            return UnquantizedTensor(np.frombuffer(buf, dtype=numpy_dtype).reshape(shape))
        description = f'safetensors begin={begin} end={end} type={data_type} path={path}'
        return LazyTensor(load, shape, data_type, description)
    model = {name: convert(info) for (name, info) in header.items() if name != '__metadata__'}
    return ModelPlus(model=model, paths=[path], format='safetensors', vocab=None)


def must_read(fp: IO[bytes], length: int) -> bytes:
    ret = fp.read(length)
    if len(ret) < length:
        raise Exception(""unexpectedly reached end of file"")
    return ret


@functools.lru_cache(maxsize=None)
def lazy_load_file(path: Path) -> ModelPlus:
    fp = open(path, 'rb')
    first8 = fp.read(8)
    fp.seek(0)
    if first8[:2] == b'PK':
        # A zip file, i.e. PyTorch format
        return lazy_load_torch_file(fp, path)
    elif struct.unpack('<Q', first8)[0] < 16 * 1024 * 1024:
        # Probably safetensors
        return lazy_load_safetensors_file(fp, path)
    else:
        raise ValueError(f""unknown format: {path}"")


In = TypeVar('In')
Out = TypeVar('Out')

def bounded_parallel_map(func: Callable[[In], Out], iterable: Iterable[In], concurrency: int, max_workers: int | None = None, use_processpool_executor: bool = False) -> Iterable[Out]:
    '''Parallel map, but with backpressure.  If the caller doesn't call `next`
    fast enough, this will stop calling `func` at some point rather than
    letting results pile up in memory.  Specifically, there is a max of one
    output value buffered per thread.'''
    if concurrency < 2:
        yield from map(func, iterable)
        # Not reached.
    iterable = iter(iterable)
    executor_class: type[ThreadPoolExecutor] | type[ProcessPoolExecutor]
    if use_processpool_executor:
        executor_class = ProcessPoolExecutor
    else:
        executor_class = ThreadPoolExecutor
    with executor_class(max_workers = max_workers) as executor:
        futures: list[concurrent.futures.Future[Out]] = []
        done = False
        for _ in range(concurrency):
            try:
                futures.append(executor.submit(func, next(iterable)))
            except StopIteration:
                done = True
                break

        while futures:
            result = futures.pop(0).result()
            while not done and len(futures) < concurrency:
                try:
                    futures.append(executor.submit(func, next(iterable)))
                except StopIteration:
                    done = True
                    break
            yield result

def check_vocab_size(params: Params, vocab: Vocab) -> None:
    if params.n_vocab != vocab.vocab_size:
        assert isinstance(vocab, BpeVocab) or isinstance(vocab, SentencePieceVocab)
        if params.n_vocab == vocab.vocab_size_base:
            print(""Ignoring added_tokens.json since model matches vocab size without it."")
            vocab.added_tokens_list = []
            vocab.vocab_size = vocab.vocab_size_base
            return
        msg = f""Vocab size mismatch (model has {params.n_vocab}, but {vocab.fname_tokenizer}""
        if vocab.fname_added_tokens is not None:
            msg += f"" combined with {vocab.fname_added_tokens}""
        msg += f"" has {vocab.vocab_size}).""
        if vocab.vocab_size < params.n_vocab < vocab.vocab_size + 20 and vocab.fname_added_tokens is None:
            msg += f""  Most likely you are missing added_tokens.json (should be in {vocab.fname_tokenizer.parent}).""
        raise Exception(msg)


class OutputFile:
    def __init__(self, fname_out: Path, endianess:gguf.GGUFEndian=gguf.GGUFEndian.LITTLE) -> None:
        self.gguf = gguf.GGUFWriter(fname_out, gguf.MODEL_ARCH_NAMES[ARCH], endianess=endianess)

    def add_meta_arch(self, params: Params) -> None:
        name = ""LLaMA""

        # TODO: better logic to determine model name
        if params.n_ctx == 4096:
            name = ""LLaMA v2""
        elif params.path_model is not None:
            name = str(params.path_model.parent).split('/')[-1]

        self.gguf.add_name                (name)
        self.gguf.add_context_length      (params.n_ctx)
        self.gguf.add_embedding_length    (params.n_embd)
        self.gguf.add_block_count         (params.n_layer)
        self.gguf.add_feed_forward_length (params.n_ff)
        self.gguf.add_rope_dimension_count(params.n_embd // params.n_head)
        self.gguf.add_head_count          (params.n_head)
        self.gguf.add_head_count_kv       (params.n_head_kv)
        self.gguf.add_layer_norm_rms_eps  (params.f_norm_eps)

        if params.f_rope_freq_base is not None:
            self.gguf.add_rope_freq_base(params.f_rope_freq_base)

        if params.rope_scaling_type:
            assert params.f_rope_scale is not None
            self.gguf.add_rope_scaling_type(params.rope_scaling_type)
            self.gguf.add_rope_scaling_factor(params.f_rope_scale)

        if params.n_orig_ctx is not None:
            self.gguf.add_rope_scaling_orig_ctx_len(params.n_orig_ctx)

        if params.rope_finetuned is not None:
            self.gguf.add_rope_scaling_finetuned(params.rope_finetuned)

        if params.ftype is not None:
            self.gguf.add_file_type(params.ftype)

    def add_meta_vocab(self, vocab: Vocab) -> None:
        tokens = []
        scores = []
        toktypes = []
        # NOTE: `all_tokens` returns the base vocabulary and added tokens
        for text, score, toktype in vocab.all_tokens():
            tokens.append(text)
            scores.append(score)
            toktypes.append(toktype)

        if isinstance(vocab, SentencePieceVocab):
            self.gguf.add_tokenizer_model(""llama"")
        elif isinstance(vocab, BpeVocab):
            self.gguf.add_tokenizer_model(""gpt2"")
        else:
            raise ValueError('Unknown vocab type: Not BpeVocab or SentencePieceVocab')
        self.gguf.add_token_list(tokens)
        self.gguf.add_token_scores(scores)
        self.gguf.add_token_types(toktypes)

    def add_meta_special_vocab(self, svocab: gguf.SpecialVocab) -> None:
        svocab.add_to_gguf(self.gguf)

    def add_tensor_info(self, name: str, tensor: LazyTensor) -> None:
        n_elements = int(np.prod(tensor.shape))
        raw_dtype = getattr(tensor.data_type, 'ggml_type', None)
        data_type = getattr(tensor.data_type, 'quantized_type', None) or tensor.data_type.dtype
        data_nbytes = tensor.data_type.elements_to_bytes(n_elements)
        self.gguf.add_tensor_info(name, tensor.shape, data_type, data_nbytes, raw_dtype = raw_dtype)

    def write_meta(self) -> None:
        self.gguf.write_header_to_file()
        self.gguf.write_kv_data_to_file()

    def write_tensor_info(self) -> None:
        self.gguf.write_ti_data_to_file()

    def close(self) -> None:
        self.gguf.close()

    @staticmethod
    def write_vocab_only(fname_out: Path, params: Params, vocab: Vocab, svocab: gguf.SpecialVocab, endianess:gguf.GGUFEndian=gguf.GGUFEndian.LITTLE) -> None:
        check_vocab_size(params, vocab)

        of = OutputFile(fname_out, endianess=endianess)

        # meta data
        of.add_meta_arch(params)
        of.add_meta_vocab(vocab)
        of.add_meta_special_vocab(svocab)

        of.write_meta()

        of.close()

    @staticmethod
    def do_item(item: tuple[str, LazyTensor]) -> tuple[DataType, NDArray]:
        name, lazy_tensor = item
        tensor = lazy_tensor.load().to_ggml()
        return (lazy_tensor.data_type, tensor.ndarray)

    @staticmethod
    def maybe_do_quantize(item: tuple[DataType, NDArray]) -> NDArray:
        dt, arr = item
        if not isinstance(dt, QuantizedDataType):
            return arr
        return dt.quantize(arr)

    @staticmethod
    def write_all(fname_out: Path, ftype: GGMLFileType, params: Params, model: LazyModel, vocab: Vocab, svocab: gguf.SpecialVocab, concurrency: int = DEFAULT_CONCURRENCY, endianess: gguf.GGUFEndian = gguf.GGUFEndian.LITTLE) -> None:
        check_vocab_size(params, vocab)

        of = OutputFile(fname_out, endianess=endianess)

        # meta data
        of.add_meta_arch(params)
        of.add_meta_vocab(vocab)
        of.add_meta_special_vocab(svocab)

        # tensor info
        for name, lazy_tensor in model.items():
            of.add_tensor_info(name, lazy_tensor)

        of.write_meta()
        of.write_tensor_info()

        # tensor data
        ndarrays_inner = bounded_parallel_map(OutputFile.do_item, model.items(), concurrency = concurrency)
        if ftype == GGMLFileType.MostlyQ8_0:
            ndarrays = bounded_parallel_map(OutputFile.maybe_do_quantize, ndarrays_inner, concurrency = concurrency, max_workers = concurrency, use_processpool_executor = True)
        else:
            ndarrays = map(OutputFile.maybe_do_quantize, ndarrays_inner)

        start = time.time()
        for i, ((name, lazy_tensor), ndarray) in enumerate(zip(model.items(), ndarrays)):
            elapsed = time.time() - start
            size = ' x '.join(f""{dim:6d}"" for dim in lazy_tensor.shape)
            padi = len(str(len(model)))
            print(f""[{i+1:{padi}d}/{len(model)}] Writing tensor {name:38s} | size {size:16} | type {lazy_tensor.data_type.name:4} | T+{int(elapsed):4}"")
            of.gguf.write_tensor_data(ndarray)

        of.close()

def pick_output_type(model: LazyModel, output_type_str: str | None) -> GGMLFileType:
    wq_type = model[gguf.TENSOR_NAMES[gguf.MODEL_TENSOR.ATTN_Q].format(bid=0)+"".weight""].data_type

    if output_type_str == ""f32"" or (output_type_str is None and wq_type == DT_F32):
        return GGMLFileType.AllF32
    if output_type_str == ""f16"" or (output_type_str is None and wq_type in (DT_F16, DT_BF16)):
        return GGMLFileType.MostlyF16
    if output_type_str == ""q8_0"":
        return GGMLFileType.MostlyQ8_0

    name_to_type = {name: lazy_tensor.data_type for (name, lazy_tensor) in model.items()}

    raise Exception(f""Unexpected combination of types: {name_to_type}"")

def convert_to_output_type(model: LazyModel, output_type: GGMLFileType) -> LazyModel:
    return {name: tensor.astype(output_type.type_for_tensor(name, tensor))
            for (name, tensor) in model.items()}

def convert_model_names(model: LazyModel, params: Params) -> LazyModel:
    tmap = gguf.TensorNameMap(ARCH, params.n_layer)
    should_skip: set[gguf.MODEL_TENSOR] = set(gguf.MODEL_TENSOR_SKIP.get(ARCH, []))

    tmp = model

    # HF models permut or pack some of the tensors, so we need to undo that
    for i in itertools.count():
        if f""model.layers.{i}.self_attn.q_proj.weight"" in model:
            print(f""Permuting layer {i}"")
            tmp[f""model.layers.{i}.self_attn.q_proj.weight""] = permute_lazy(model[f""model.layers.{i}.self_attn.q_proj.weight""], params.n_head, params.n_head)
            tmp[f""model.layers.{i}.self_attn.k_proj.weight""] = permute_lazy(model[f""model.layers.{i}.self_attn.k_proj.weight""], params.n_head, params.n_head_kv)
           #tmp[f""model.layers.{i}.self_attn.v_proj.weight""] =              model[f""model.layers.{i}.self_attn.v_proj.weight""]
        elif f""model.layers.{i}.self_attn.W_pack.weight"" in model:
            print(f""Unpacking and permuting layer {i}"")
            tmp[f""model.layers.{i}.self_attn.q_proj.weight""] = permute_part_lazy(model[f""model.layers.{i}.self_attn.W_pack.weight""], 0, params.n_head, params.n_head)
            tmp[f""model.layers.{i}.self_attn.k_proj.weight""] = permute_part_lazy(model[f""model.layers.{i}.self_attn.W_pack.weight""], 1, params.n_head, params.n_head_kv)
            tmp[f""model.layers.{i}.self_attn.v_proj.weight""] = part_lazy        (model[f""model.layers.{i}.self_attn.W_pack.weight""], 2)
            del tmp[f""model.layers.{i}.self_attn.W_pack.weight""]
        else:
            break

    out: LazyModel = {}
    for name, lazy_tensor in model.items():
        tensor_type, name_new = tmap.get_type_and_name(name, try_suffixes = ("".weight"", "".bias"")) or (None, None)
        if name_new is None:
            # raise Exception(f""Unexpected tensor name: {name}"")
            continue

        if tensor_type in should_skip:
            print(f""skipping tensor {name_new}"")
            continue

        print(f""{name:48s} -> {name_new:40s} | {lazy_tensor.data_type.name:6s} | {lazy_tensor.shape}"")
        out[name_new] = lazy_tensor

    return out

def nth_multifile_path(path: Path, n: int) -> Path | None:
    '''Given any path belonging to a multi-file model (e.g. foo.bin.1), return
    the nth path in the model.
    '''
    # Support the following patterns:
    patterns: list[tuple[str, str]] = [
        # - x.00.pth, x.01.pth, etc.
        (r'\.[0-9]{2}\.pth$', f'.{n:02}.pth'),
        # - x-00001-of-00002.bin, x-00002-of-00002.bin, etc.
        (r'-[0-9]{5}-of-(.*)$', fr'-{n:05}-of-\1'),
        # x.bin, x.bin.1, etc.
        (r'(\.[0-9]+)?$', r'\1' if n == 0 else fr'\1.{n}')
    ]
    for regex, replacement in patterns:
        if re.search(regex, path.name):
            new_path = path.with_name(re.sub(regex, replacement, path.name))
            if new_path.exists():
                return new_path
    return None


def find_multifile_paths(path: Path) -> list[Path]:
    '''Given any path belonging to a multi-file model (e.g. foo.bin.1), return
    the whole list of paths in the model.
    '''
    ret: list[Path] = []
    for i in itertools.count():
        nth_path = nth_multifile_path(path, i)
        if nth_path is None:
            break
        ret.append(nth_path)
    if not ret:
        # No matches.  This should only happen if the file was named, e.g.,
        # foo.0, and there was no file named foo.  Oh well, try to process it
        # as a single file.
        return [path]
    return ret


def load_some_model(path: Path) -> ModelPlus:
    '''Load a model of any supported format.'''
    # Be extra-friendly and accept either a file or a directory:
    if path.is_dir():
        # Check if it's a set of safetensors files first
        globs = [""model-00001-of-*.safetensors"", ""model.safetensors""]
        files = [file for glob in globs for file in path.glob(glob)]
        if not files:
            # Try the PyTorch patterns too, with lower priority
            globs = [""consolidated.00.pth"", ""pytorch_model-00001-of-*.bin"", ""*.pt"", ""pytorch_model.bin""]
            files = [file for glob in globs for file in path.glob(glob)]
        if not files:
            raise Exception(f""Can't find model in directory {path}"")
        if len(files) > 1:
            raise Exception(f""Found multiple models in {path}, not sure which to pick: {files}"")
        path = files[0]

    paths = find_multifile_paths(path)
    models_plus: list[ModelPlus] = []
    for path in paths:
        print(f""Loading model file {path}"")
        models_plus.append(lazy_load_file(path))

    model_plus = merge_multifile_models(models_plus)
    return model_plus


def load_vocab(path: Path, vocabtype: str | None) -> Vocab:
    # Be extra-friendly and accept either a file or a directory.  Also, if it's
    # a directory, it might be the model directory, and tokenizer.model might
    # be in the parent of that.
    if path.is_dir():
        vocab_file = ""tokenizer.model""
        if vocabtype == 'bpe':
            vocab_file = ""vocab.json""
        path2 = path / vocab_file
        # Use `.parent` instead of /.. to handle the symlink case better.
        path3 = path.parent / vocab_file
        if path2.exists():
            path = path2
        elif path3.exists():
            path = path3
        else:
            raise FileNotFoundError(
                f""Could not find {vocab_file} in {path} or its parent; ""
                ""if it's in another directory, pass the directory as --vocab-dir"")

    print(f""Loading vocab file '{path}', type '{vocabtype}'"")

    added_tokens_path = path.parent / ""added_tokens.json""
    if vocabtype == ""bpe"":
        return BpeVocab(path, added_tokens_path if added_tokens_path.exists() else None)
    elif vocabtype == ""spm"":
        return SentencePieceVocab(path, added_tokens_path if added_tokens_path.exists() else None)
    else:
        raise ValueError(f""Unsupported vocabulary type {vocabtype}"")


def default_outfile(model_paths: list[Path], file_type: GGMLFileType) -> Path:
    namestr = {
        GGMLFileType.AllF32:    ""f32"",
        GGMLFileType.MostlyF16: ""f16"",
        GGMLFileType.MostlyQ8_0:""q8_0"",
    }[file_type]
    ret = model_paths[0].parent / f""ggml-model-{namestr}.gguf""
    if ret in model_paths:
        sys.stderr.write(
            f""Error: Default output path ({ret}) would overwrite the input. ""
            ""Please explicitly specify a path using --outfile.\n"")
        sys.exit(1)
    return ret


def do_dump_model(model_plus: ModelPlus) -> None:
    print(f""model_plus.paths = {model_plus.paths!r}"")
    print(f""model_plus.format = {model_plus.format!r}"")
    print(f""model_plus.vocab = {model_plus.vocab!r}"")
    for name, lazy_tensor in model_plus.model.items():
        print(f""{name}: shape={lazy_tensor.shape} type={lazy_tensor.data_type}; {lazy_tensor.description}"")


def main(args_in: list[str] | None = None) -> None:
    output_choices = [""f32"", ""f16""]
    if np.uint32(1) == np.uint32(1).newbyteorder(""<""):
        # We currently only support Q8_0 output on little endian systems.
        output_choices.append(""q8_0"")
    parser = argparse.ArgumentParser(description=""Convert a LLaMa model to a GGML compatible file"")
    parser.add_argument(""--dump"",        action=""store_true"",    help=""don't convert, just show what's in the model"")
    parser.add_argument(""--dump-single"", action=""store_true"",    help=""don't convert, just show what's in a single model file"")
    parser.add_argument(""--vocab-only"",  action=""store_true"",    help=""extract only the vocab"")
    parser.add_argument(""--outtype"",     choices=output_choices, help=""output format - note: q8_0 may be very slow (default: f16 or f32 based on input)"")
    parser.add_argument(""--vocab-dir"",   type=Path,              help=""directory containing tokenizer.model, if separate from model file"")
    parser.add_argument(""--outfile"",     type=Path,              help=""path to write to; default: based on input"")
    parser.add_argument(""model"",         type=Path,              help=""directory containing model file, or model file itself (*.pth, *.pt, *.bin, *.safetensors)"")
    parser.add_argument(""--vocabtype"",   choices=[""spm"", ""bpe""], help=""vocab format (default: spm)"", default=""spm"")
    parser.add_argument(""--ctx"",         type=int,               help=""model training context (default: based on input)"")
    parser.add_argument(""--concurrency"", type=int,               help=f""concurrency used for conversion (default: {DEFAULT_CONCURRENCY})"", default = DEFAULT_CONCURRENCY)
    parser.add_argument(""--bigendian"",   action=""store_true"",    help=""model is executed on big endian machine"")

    args = parser.parse_args(args_in)
    if args.dump_single:
        model_plus = lazy_load_file(args.model)
        do_dump_model(model_plus)
        return

    if not args.vocab_only:
        model_plus = load_some_model(args.model)
    else:
        model_plus = ModelPlus(model = {}, paths = [args.model / 'dummy'], format = 'none', vocab = None)

    if args.dump:
        do_dump_model(model_plus)
        return
    endianess = gguf.GGUFEndian.LITTLE
    if args.bigendian:
        endianess = gguf.GGUFEndian.BIG

    params = Params.load(model_plus)
    if params.n_ctx == -1:
        if args.ctx is None:
            raise Exception(""The model doesn't have a context size, and you didn't specify one with --ctx\n""
                            ""Please specify one with --ctx:\n""
                            "" - LLaMA v1: --ctx 2048\n""
                            "" - LLaMA v2: --ctx 4096\n"")
        params.n_ctx = args.ctx

    if args.outtype:
        params.ftype = {
            ""f32"": GGMLFileType.AllF32,
            ""f16"": GGMLFileType.MostlyF16,
            ""q8_0"": GGMLFileType.MostlyQ8_0,
        }[args.outtype]

    print(f""params = {params}"")

    vocab: Vocab
    if args.vocab_only:
        if not args.outfile:
            raise ValueError(""need --outfile if using --vocab-only"")
        # FIXME: Try to respect vocab_dir somehow?
        vocab = load_vocab(args.vocab_dir or args.model, args.vocabtype)
        special_vocab = gguf.SpecialVocab(model_plus.paths[0].parent,
            load_merges = args.vocabtype == 'bpe',
            n_vocab = vocab.vocab_size)
        outfile = args.outfile
        OutputFile.write_vocab_only(outfile, params, vocab, special_vocab)
        print(f""Wrote {outfile}"")
        return

    if model_plus.vocab is not None and args.vocab_dir is None:
        vocab = model_plus.vocab
    else:
        vocab_dir = args.vocab_dir if args.vocab_dir else model_plus.paths[0].parent
        vocab = load_vocab(vocab_dir, args.vocabtype)
    # FIXME: Try to respect vocab_dir somehow?
    special_vocab = gguf.SpecialVocab(model_plus.paths[0].parent,
        load_merges = args.vocabtype == 'bpe',
        n_vocab = vocab.vocab_size)

    model   = model_plus.model
    model   = convert_model_names(model, params)
    ftype   = pick_output_type(model, args.outtype)
    model   = convert_to_output_type(model, ftype)
    outfile = args.outfile or default_outfile(model_plus.paths, ftype)

    params.ftype = ftype
    print(f""Writing {outfile}, format {ftype}"")

    OutputFile.write_all(outfile, ftype, params, model, vocab, special_vocab, concurrency = args.concurrency, endianess=endianess)
    print(f""Wrote {outfile}"")


if __name__ == '__main__':
    main()"
jFhTE9yz,Introduction,Sunjaree,C,Saturday 18th of November 2023 01:58:08 AM CDT,"AssalamuAlaikum Im sunjare zulfiker. I studied computer science and engineering at North South University and graduated with a CGPA 3.57 out of 4. I've completed my SSC and HSC from Safiuddin Sarkar Academy. 

Currently, I'm doing a full-time remote job as an SQA engineer at Masjid Solution, It a USA-based software company that provides software solutions for Mosques, Islam weekend schools, and hospitals. Also, I am a part-time research assistant in the Cyber-Physical Systems Lab at North South University. 

I am a quick learner and love to learn new things every day. One notable strength of me is I can hold my concentration for a long time. I am eager to learn and grow and excited about the opportunity to contribute to your team. Thank you"
RAR4ikvL,Untitled,35657,C++,Saturday 18th of November 2023 01:54:11 AM CDT,"
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <string.h>

using namespace std;

struct contact {
	char name[100];
	char mobile_phone[20];
	char home_phone[20];
	char work_phone[20];
};

class phone_book {

public:

	phone_book() : store(new contact* [100]), contacts_number(0), max_contacts_number(100) {}

	phone_book(int max_number) {}; // написать реализацию параметризованного конструктора

	phone_book(const phone_book& other) {}; // написать реализацию конструктора копирования

	void ShowAllContacts() {
		cout << ""The following contacts are available: "" << endl;
		if (contacts_number == 0) {
			cout << ""No contacts"";
		}
		for (int i = 0; i < contacts_number; ++i) {
			cout << '\""' << store[i]->name << ""\"", mobile_phone: "" << store[i]->mobile_phone << "", home_phone: "" << store[i]->home_phone << "", work_phone: "" << store[i]->work_phone << endl;
		}
		cout << endl;
	}

	void AddContact(const char name[], const char mobile_phone[], const char home_phone[], const char work_phone[]) { // не забывать ставить const, иначе не скомпилируется
		if (contacts_number == max_contacts_number) {
			cout << ""The contact cannot be added"" << endl;
			return;
		}
		store[contacts_number] = new contact{};
		strcpy(store[contacts_number]->name, name);
		strcpy(store[contacts_number]->mobile_phone, mobile_phone);
		strcpy(store[contacts_number]->home_phone, home_phone);
		strcpy(store[contacts_number]->work_phone, work_phone);
		contacts_number++;
	}

	void DelContact(const char name[]) {
		for (int i = 0; i < contacts_number; i++) {
			if (!strcmp(store[i]->name, name)) { // возвращает 0 если строки одинаковые, поэтому используем ! (чтобы возврат нуля означал ""истину"")
				delete store[i];
				for (int j = i; j < contacts_number - 1; j++) {
					store[j] = store[j + 1];
				}
				store[contacts_number - 1] = nullptr;
				contacts_number--;
			}
		}
	}

	void FindContactName(const char name[]) {
		cout << ""Found according to your request: "" << endl;
		for (int i = 0; i < contacts_number; i++) {
			if (!strcmp(store[i]->name, name)) {
				cout << '\""' << store[i]->name << ""\"", mobile_phone: "" << store[i]->mobile_phone << "", home_phone: "" << store[i]->home_phone << "", work_phone: "" << store[i]->work_phone << endl;
			}
		}
		cout << endl;
	}

	~phone_book() {}

private:
	contact** store;
	int contacts_number;
	int max_contacts_number;

};


int main() { // для проверки функционала

	phone_book my_store; // для проверки конструктора по умолчанию

	my_store.AddContact(""Ivan"", ""+79111111111"", ""111111"", ""121212"");
	my_store.AddContact(""Zhenya"", ""+79111111333"", ""111133"", ""121233"");
	my_store.AddContact(""Galya"", ""+79115511333"", ""166133"", ""127733"");
	my_store.AddContact(""Olya"", ""+79115511333"", ""166133"", ""127733"");

	my_store.ShowAllContacts();

	my_store.DelContact(""Zhenya"");

	my_store.ShowAllContacts();

	my_store.AddContact(""Zhenya"", ""+79111111333"", ""111133"", ""121233"");

	my_store.FindContactName(""Galya"");

}
"
PRGGGuad,snowybot,coinwalk,JavaScript,Saturday 18th of November 2023 01:48:15 AM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((((((((originalbal/2)/2)/2)/2)/2)/2)/10).toFixed(8));
var floatingbase = base;
var taget = (originalbal*24);
var groupedten = (base*10);
var groupedseven = (base*6.9);
var groupedeight = (base*7.9);
var groupedfive = (base*4.9);
var tobetnext = ((floatingbase*1).toFixed(8));
var bolance = originalbal;
var freak = (originalbal/10);
var mate = ((Math.floor(originalbal/groupedten))*groupedten);
var amaze = 0;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedeight))&&(bolance!=amaze)){
    floatingbase = floatingbase*2;
    amaze = parseFloat(bolance);
}
if (bolance>mate){
mate = ((Math.floor((parseFloat(bolance))/groupedten))*groupedten);
}
if (((floatingbase*4)>=freak)&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))&&(bolance>=mate)){
    floatingbase = base;
    amaze = 0;
}
if ((floatingbase>=(bolance/30))&&(bolance<originalbal)){
    floatingbase = base;
    amaze = 0;
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1000);
}
get();"
7sV7azMM,Untitled,35657,C++,Saturday 18th of November 2023 01:45:56 AM CDT,"#include <iostream>
#include <vector>

using namespace std;

class Vector {
public:

    Vector() : arr_(new int[4]), size_(0), capacity_(4) {}


    Vector(const int new_capacity) : arr_(new int[new_capacity]), size_(0), capacity_(new_capacity) {}

    Vector(const Vector& other) : arr_(new int[other.capacity_]), size_(other.size_), capacity_(other.capacity_) {
        for (int i = 0; i < size_; i++) {
            arr_[i] = other.arr_[i];
        }
        total_number_elements_ += size_;
    }

    Vector& operator=(const Vector& other) {
        size_ = other.size_;
        capacity_ = other.capacity_;
        delete[] arr_;
        arr_ = new int[capacity_];
        for (int i = 0; i < size_; i++) {
            arr_[i] = other.arr_[i];
        }
        return *this;
    }

    void push_back(const int value) {
        check_capacity_();
        arr_[size_] = value;
        size_++;
        total_number_elements_++;
    }

    void insert(const int index, const int value) {
        if (index < 0 || index >= size_) {
            cout << ""Invalid index"" << endl;
            return;
        }
        check_capacity_();
        for (int i = size_; i > index; i--) {
            arr_[i] = arr_[i - 1];
        }
        arr_[index] = value;
        size_++;
        total_number_elements_++;
    }

    void erase(const int index) {
        if (index < 0 || index >= size_) {
            cout << ""Invalid index"" << endl;
            return;
        }
        for (int i = index; i < size_ - 1; i++) {
            arr_[i] = arr_[i + 1];
        }
        size_--;
        total_number_elements_--;
    }

    void pop_back() {
        size_--;
        total_number_elements_--;
    }

    void print() const {
        for (int i = 0; i < size_; i++) {
            cout << arr_[i] << "" "";
        }
        cout << endl;
    }

    int size() const {
        return size_;
    }

    int capacity() const {
        return capacity_;
    }

    bool operator==(const Vector& other) const {
        if (size_ != other.size_) {
            return false;
        }
        for (int i = 0; i < size_; i++) {
            if (arr_[i] != other.arr_[i]) {
                return false;
            }
        }
        return true;
    }

    bool operator!=(const Vector& other) const {
        if (size_ != other.size_) {
            return true;
        }
        for (int i = 0; i < size_; i++) {
            if (arr_[i] != other.arr_[i]) {
                return true;
            }
        }
        return false;
    }

    int& operator[] (const int index) {
        if (index < 0 || index >= size_) {
            cout << ""Invalid index"" << endl;
            abort;
        }
        return arr_[index];
    }

    int& operator[] (const int index) const {
        if (index < 0 || index >= size_) {
            cout << ""Invalid index"" << endl;
            abort;
        }
        return arr_[index];
    }

    ~Vector() {
        delete[] arr_;
        total_number_elements_ -= size_;
    }

    static int get_total_number_elements() {
        return total_number_elements_;
    }

private:
    int* arr_; // массив для хранения элементов
    int size_; // текущее количество элементов в массиве
    int capacity_; // вместимость (емкость) массива
    static int total_number_elements_; // общее количество элементов всех экземпляров класса Vector

    void check_capacity_() {
        if (size_ == capacity_) {
            int* temp = new int[capacity_ * 2];
            for (int i = 0; i < size_; i++) {
                temp[i] = arr_[i];
            }
            delete[] arr_;
            arr_ = temp;
            capacity_ *= 2;
        }
    }
};

void Print(vector<int>& vec) {
    for (int a : vec) {
        cout << a << "" "";
    }
    cout << endl;
}

int Vector::total_number_elements_ = 0;


int main() {
    setlocale(LC_ALL, ""ru"");

    Vector vec1;
    for (int i = 0; i < 10; i++) {
        vec1.push_back(i + 1);
    }
    vec1.print();

    vec1.pop_back();

    Vector vec2;
    vec2.print();
    vec2.push_back(35);
    vec2.print();

    for (int i = 0; i < 10; i++) {
        vec2.push_back(i + 1);
    }
    vec2.print();

    vec2.pop_back();
    vec2.print();
    vec2.insert(2, 55);
    vec2.print();
    vec2.erase(3);
    vec2.print();

    cout << vec2[3] << endl;

    vec2[3] = 33;

    vec2.print();

    cout << ""Элементов в векторе: "" << vec1.size() << "" Емкость вектора: "" << vec1.capacity() << endl;


    cout << ""Элементов в векторе: "" << vec2.size() << "" Емкость вектора: "" << vec2.capacity() << endl;

    Vector vec3(100);

    vec3.push_back(10);

    cout << ""Элементов в векторе: "" << vec3.size() << "" Емкость вектора: "" << vec3.capacity() << endl;

    Vector vec4(vec1);

    cout << ""Элементов в векторе: "" << vec4.size() << "" Емкость вектора: "" << vec4.capacity() << endl;

    vec1.push_back(22);

    vec1.print();
    vec4.print();

    cout << boolalpha << (vec1 == vec4) << endl;

    cout  << (vec1 != vec4) << endl;

    vec1.print();
    vec2.print();


    cout << endl;

    vec1 = vec2;

    vec1.print();
    vec2.print();

    const Vector vec5 = vec1;

    cout << Vector::get_total_number_elements() << endl;

}

"
gavvApWn,Spammers and Scammers [11-4/2023],bombaires,AIMMS,Saturday 18th of November 2023 01:33:14 AM CDT,"<a href=""mailto:bookbill921@gmail.com"">bookbill921@gmail.com</a>
<a href=""mailto:b.oo.kb.ill92.1@gmail.com"">b.oo.kb.ill92.1@gmail.com</a>
<a href=""mailto:b.oo.kbill9.21@gmail.com"">b.oo.kbill9.21@gmail.com</a>
<a href=""mailto:b.o.o.kbil.l921@gmail.com"">b.o.o.kbil.l921@gmail.com</a>
<a href=""mailto:boo.kb.il.l92.1@gmail.com"">boo.kb.il.l92.1@gmail.com</a>
<a href=""mailto:b.oo.k.b.i.l.l.921@gmail.com"">b.oo.k.b.i.l.l.921@gmail.com</a>
<a href=""mailto:b.oo.kb.i.l.l.92.1@gmail.com"">b.oo.kb.i.l.l.92.1@gmail.com</a>
<a href=""mailto:bo.o.kbi.l.l921@gmail.com"">bo.o.kbi.l.l921@gmail.com</a>
<a href=""mailto:bo.o.k.b.il.l921@gmail.com"">bo.o.k.b.il.l921@gmail.com</a>
<a href=""mailto:b.oo.kb.il.l921@gmail.com"">b.oo.kb.il.l921@gmail.com</a>
<a href=""mailto:book.b.i.ll921@gmail.com"">book.b.i.ll921@gmail.com</a>
<a href=""mailto:boo.kb.i.ll.92.1@gmail.com"">boo.kb.i.ll.92.1@gmail.com</a>
<a href=""mailto:b.ookbi.l.l.9.21@gmail.com"">b.ookbi.l.l.9.21@gmail.com</a>
<a href=""mailto:b.ookbill92.1@gmail.com"">b.ookbill92.1@gmail.com</a>
<a href=""mailto:b.oo.kbil.l92.1@gmail.com"">b.oo.kbil.l92.1@gmail.com</a>
<a href=""mailto:boo.k.bill.9.21@gmail.com"">boo.k.bill.9.21@gmail.com</a>
<a href=""mailto:b.o.okbi.l.l.92.1@gmail.com"">b.o.okbi.l.l.92.1@gmail.com</a>
<a href=""mailto:boo.kb.il.l.9.2.1@gmail.com"">boo.kb.il.l.9.2.1@gmail.com</a>
<a href=""mailto:bookbil.l.9.2.1@gmail.com"">bookbil.l.9.2.1@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.ll9.21@gmail.com"">b.o.ok.b.i.ll9.21@gmail.com</a>
<a href=""mailto:book.bill.9.21@gmail.com"">book.bill.9.21@gmail.com</a>
<a href=""mailto:bookb.i.ll921@gmail.com"">bookb.i.ll921@gmail.com</a>
<a href=""mailto:bo.o.kbil.l.921@gmail.com"">bo.o.kbil.l.921@gmail.com</a>
<a href=""mailto:bookb.i.l.l.92.1@gmail.com"">bookb.i.l.l.92.1@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.ll.92.1@gmail.com"">b.o.ok.b.i.ll.92.1@gmail.com</a>
<a href=""mailto:b.o.okb.i.ll.9.2.1@gmail.com"">b.o.okb.i.ll.9.2.1@gmail.com</a>
<a href=""mailto:b.oo.kbil.l9.2.1@gmail.com"">b.oo.kbil.l9.2.1@gmail.com</a>
<a href=""mailto:bo.o.k.bi.ll.9.2.1@gmail.com"">bo.o.k.bi.ll.9.2.1@gmail.com</a>
<a href=""mailto:b.ook.bill.921@gmail.com"">b.ook.bill.921@gmail.com</a>
<a href=""mailto:b.oo.kb.il.l.92.1@gmail.com"">b.oo.kb.il.l.92.1@gmail.com</a>
<a href=""mailto:b.ookbil.l92.1@gmail.com"">b.ookbil.l92.1@gmail.com</a>
<a href=""mailto:bo.okbi.ll.92.1@gmail.com"">bo.okbi.ll.92.1@gmail.com</a>
<a href=""mailto:bo.o.kb.il.l.9.2.1@gmail.com"">bo.o.kb.il.l.9.2.1@gmail.com</a>
<a href=""mailto:b.o.okbi.ll.92.1@gmail.com"">b.o.okbi.ll.92.1@gmail.com</a>
<a href=""mailto:b.o.o.kb.il.l.921@gmail.com"">b.o.o.kb.il.l.921@gmail.com</a>
<a href=""mailto:bo.ok.b.ill921@gmail.com"">bo.ok.b.ill921@gmail.com</a>
<a href=""mailto:b.oo.k.b.i.l.l.92.1@gmail.com"">b.oo.k.b.i.l.l.92.1@gmail.com</a>
<a href=""mailto:bo.o.kb.ill.921@gmail.com"">bo.o.kb.ill.921@gmail.com</a>
<a href=""mailto:b.o.o.kbil.l.9.21@gmail.com"">b.o.o.kbil.l.9.21@gmail.com</a>
<a href=""mailto:bo.o.k.b.i.ll921@gmail.com"">bo.o.k.b.i.ll921@gmail.com</a>
<a href=""mailto:b.oo.k.b.ill.9.21@gmail.com"">b.oo.k.b.ill.9.21@gmail.com</a>
<a href=""mailto:b.ookb.i.l.l9.21@gmail.com"">b.ookb.i.l.l9.21@gmail.com</a>
<a href=""mailto:boo.k.b.ill.92.1@gmail.com"">boo.k.b.ill.92.1@gmail.com</a>
<a href=""mailto:bookbi.l.l.9.21@gmail.com"">bookbi.l.l.9.21@gmail.com</a>
<a href=""mailto:b.o.o.kb.il.l.92.1@gmail.com"">b.o.o.kb.il.l.92.1@gmail.com</a>
<a href=""mailto:bo.okb.il.l9.2.1@gmail.com"">bo.okb.il.l9.2.1@gmail.com</a>
<a href=""mailto:bo.okb.i.ll.9.21@gmail.com"">bo.okb.i.ll.9.21@gmail.com</a>
<a href=""mailto:b.o.ok.b.il.l9.21@gmail.com"">b.o.ok.b.il.l9.21@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.l.l.9.21@gmail.com"">b.o.ok.b.i.l.l.9.21@gmail.com</a>
<a href=""mailto:b.o.o.k.bi.ll9.2.1@gmail.com"">b.o.o.k.bi.ll9.2.1@gmail.com</a>
<a href=""mailto:bookbill.921@gmail.com"">bookbill.921@gmail.com</a>
<a href=""mailto:b.oo.k.bi.l.l.9.2.1@gmail.com"">b.oo.k.bi.l.l.9.2.1@gmail.com</a>
<a href=""mailto:b.oo.k.bi.l.l.92.1@gmail.com"">b.oo.k.bi.l.l.92.1@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.ll.921@gmail.com"">b.o.ok.b.i.ll.921@gmail.com</a>
<a href=""mailto:b.ook.bi.l.l92.1@gmail.com"">b.ook.bi.l.l92.1@gmail.com</a>
<a href=""mailto:b.ook.b.i.l.l921@gmail.com"">b.ook.b.i.l.l921@gmail.com</a>
<a href=""mailto:bo.o.k.bi.ll921@gmail.com"">bo.o.k.bi.ll921@gmail.com</a>
<a href=""mailto:b.o.o.k.b.il.l.9.21@gmail.com"">b.o.o.k.b.il.l.9.21@gmail.com</a>
<a href=""mailto:bo.o.k.bi.ll.9.21@gmail.com"">bo.o.k.bi.ll.9.21@gmail.com</a>
<a href=""mailto:bo.okb.i.ll.9.2.1@gmail.com"">bo.okb.i.ll.9.2.1@gmail.com</a>
<a href=""mailto:bo.okb.il.l92.1@gmail.com"">bo.okb.il.l92.1@gmail.com</a>
<a href=""mailto:bo.ok.bill9.21@gmail.com"">bo.ok.bill9.21@gmail.com</a>
<a href=""mailto:bo.o.k.bi.l.l.9.2.1@gmail.com"">bo.o.k.bi.l.l.9.2.1@gmail.com</a>
<a href=""mailto:b.o.okb.i.l.l92.1@gmail.com"">b.o.okb.i.l.l92.1@gmail.com</a>
<a href=""mailto:boo.k.bil.l.9.21@gmail.com"">boo.k.bil.l.9.21@gmail.com</a>
<a href=""mailto:bo.o.k.b.ill.9.21@gmail.com"">bo.o.k.b.ill.9.21@gmail.com</a>
<a href=""mailto:b.ookbill.9.21@gmail.com"">b.ookbill.9.21@gmail.com</a>
<a href=""mailto:b.oo.k.bil.l.92.1@gmail.com"">b.oo.k.bil.l.92.1@gmail.com</a>
<a href=""mailto:b.ookb.i.l.l.921@gmail.com"">b.ookb.i.l.l.921@gmail.com</a>
<a href=""mailto:b.oo.k.b.il.l.92.1@gmail.com"">b.oo.k.b.il.l.92.1@gmail.com</a>
<a href=""mailto:bo.ok.bi.ll.92.1@gmail.com"">bo.ok.bi.ll.92.1@gmail.com</a>
<a href=""mailto:b.ook.b.ill.9.21@gmail.com"">b.ook.b.ill.9.21@gmail.com</a>
<a href=""mailto:boo.k.b.il.l.9.2.1@gmail.com"">boo.k.b.il.l.9.2.1@gmail.com</a>
<a href=""mailto:book.b.il.l.9.21@gmail.com"">book.b.il.l.9.21@gmail.com</a>
<a href=""mailto:bo.okb.i.l.l.9.2.1@gmail.com"">bo.okb.i.l.l.9.2.1@gmail.com</a>
<a href=""mailto:boo.kbi.ll.921@gmail.com"">boo.kbi.ll.921@gmail.com</a>
<a href=""mailto:b.oo.k.b.ill.9.2.1@gmail.com"">b.oo.k.b.ill.9.2.1@gmail.com</a>
<a href=""mailto:bo.ok.bill.9.21@gmail.com"">bo.ok.bill.9.21@gmail.com</a>
<a href=""mailto:b.ookbi.ll.9.21@gmail.com"">b.ookbi.ll.9.21@gmail.com</a>
<a href=""mailto:b.ookbill921@gmail.com"">b.ookbill921@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.l.l9.21@gmail.com"">b.o.ok.b.i.l.l9.21@gmail.com</a>
<a href=""mailto:b.o.okb.ill.9.2.1@gmail.com"">b.o.okb.ill.9.2.1@gmail.com</a>
<a href=""mailto:boo.k.b.il.l921@gmail.com"">boo.k.b.il.l921@gmail.com</a>
<a href=""mailto:bo.o.k.b.il.l9.21@gmail.com"">bo.o.k.b.il.l9.21@gmail.com</a>
<a href=""mailto:b.ookb.i.l.l92.1@gmail.com"">b.ookb.i.l.l92.1@gmail.com</a>
<a href=""mailto:boo.k.bil.l9.21@gmail.com"">boo.k.bil.l9.21@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.l.l92.1@gmail.com"">b.o.ok.b.i.l.l92.1@gmail.com</a>
<a href=""mailto:bo.okb.i.ll9.2.1@gmail.com"">bo.okb.i.ll9.2.1@gmail.com</a>
<a href=""mailto:b.oo.k.b.il.l.921@gmail.com"">b.oo.k.b.il.l.921@gmail.com</a>
<a href=""mailto:bo.ok.bill921@gmail.com"">bo.ok.bill921@gmail.com</a>
<a href=""mailto:boo.k.bi.ll.921@gmail.com"">boo.k.bi.ll.921@gmail.com</a>
<a href=""mailto:bookb.ill.9.2.1@gmail.com"">bookb.ill.9.2.1@gmail.com</a>
<a href=""mailto:boo.kb.i.ll9.2.1@gmail.com"">boo.kb.i.ll9.2.1@gmail.com</a>
<a href=""mailto:b.o.o.k.b.i.l.l.92.1@gmail.com"">b.o.o.k.b.i.l.l.92.1@gmail.com</a>
<a href=""mailto:b.o.o.k.b.il.l921@gmail.com"">b.o.o.k.b.il.l921@gmail.com</a>
<a href=""mailto:bo.okb.i.l.l921@gmail.com"">bo.okb.i.l.l921@gmail.com</a>
<a href=""mailto:bookbill9.21@gmail.com"">bookbill9.21@gmail.com</a>
<a href=""mailto:bo.o.k.bill9.21@gmail.com"">bo.o.k.bill9.21@gmail.com</a>
<a href=""mailto:b.oo.k.b.il.l.9.2.1@gmail.com"">b.oo.k.b.il.l.9.2.1@gmail.com</a>
<a href=""mailto:bo.o.k.bil.l921@gmail.com"">bo.o.k.bil.l921@gmail.com</a>
<a href=""mailto:bo.ok.b.ill.921@gmail.com"">bo.ok.b.ill.921@gmail.com</a>
<a href=""mailto:bookb.il.l921@gmail.com"">bookb.il.l921@gmail.com</a>
<a href=""mailto:b.o.o.k.bill.92.1@gmail.com"">b.o.o.k.bill.92.1@gmail.com</a>
<a href=""mailto:b.o.ok.b.ill.921@gmail.com"">b.o.ok.b.ill.921@gmail.com</a>
<a href=""mailto:boo.k.b.i.ll.92.1@gmail.com"">boo.k.b.i.ll.92.1@gmail.com</a>
<a href=""mailto:boo.k.b.il.l.921@gmail.com"">boo.k.b.il.l.921@gmail.com</a>
<a href=""mailto:book.bi.ll.921@gmail.com"">book.bi.ll.921@gmail.com</a>
<a href=""mailto:boo.k.b.il.l9.2.1@gmail.com"">boo.k.b.il.l9.2.1@gmail.com</a>
<a href=""mailto:bookb.ill.921@gmail.com"">bookb.ill.921@gmail.com</a>
<a href=""mailto:b.oo.kbi.l.l.921@gmail.com"">b.oo.kbi.l.l.921@gmail.com</a>
<a href=""mailto:b.o.okbi.ll9.21@gmail.com"">b.o.okbi.ll9.21@gmail.com</a>
<a href=""mailto:bo.o.kbi.ll.9.2.1@gmail.com"">bo.o.kbi.ll.9.2.1@gmail.com</a>
<a href=""mailto:b.o.o.k.b.i.l.l.921@gmail.com"">b.o.o.k.b.i.l.l.921@gmail.com</a>
<a href=""mailto:bo.o.k.b.i.ll.9.21@gmail.com"">bo.o.k.b.i.ll.9.21@gmail.com</a>
<a href=""mailto:b.o.okbi.l.l9.2.1@gmail.com"">b.o.okbi.l.l9.2.1@gmail.com</a>
<a href=""mailto:book.bi.l.l921@gmail.com"">book.bi.l.l921@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.ll9.2.1@gmail.com"">b.o.ok.b.i.ll9.2.1@gmail.com</a>
<a href=""mailto:bo.okb.ill.921@gmail.com"">bo.okb.ill.921@gmail.com</a>
<a href=""mailto:bo.o.kb.i.l.l9.2.1@gmail.com"">bo.o.kb.i.l.l9.2.1@gmail.com</a>
<a href=""mailto:book.bill92.1@gmail.com"">book.bill92.1@gmail.com</a>
<a href=""mailto:bo.o.kb.ill9.21@gmail.com"">bo.o.kb.ill9.21@gmail.com</a>
<a href=""mailto:b.o.okb.ill.9.21@gmail.com"">b.o.okb.ill.9.21@gmail.com</a>
<a href=""mailto:bo.o.k.bil.l9.2.1@gmail.com"">bo.o.k.bil.l9.2.1@gmail.com</a>
<a href=""mailto:book.bi.l.l.9.21@gmail.com"">book.bi.l.l.9.21@gmail.com</a>
<a href=""mailto:bo.o.k.bi.ll92.1@gmail.com"">bo.o.k.bi.ll92.1@gmail.com</a>
<a href=""mailto:b.ookbi.l.l921@gmail.com"">b.ookbi.l.l921@gmail.com</a>
<a href=""mailto:boo.kb.i.ll92.1@gmail.com"">boo.kb.i.ll92.1@gmail.com</a>
<a href=""mailto:b.o.o.kb.i.ll.9.21@gmail.com"">b.o.o.kb.i.ll.9.21@gmail.com</a>
<a href=""mailto:b.o.o.kbil.l9.2.1@gmail.com"">b.o.o.kbil.l9.2.1@gmail.com</a>
<a href=""mailto:boo.k.b.i.l.l92.1@gmail.com"">boo.k.b.i.l.l92.1@gmail.com</a>
<a href=""mailto:bo.o.kbi.l.l.92.1@gmail.com"">bo.o.kbi.l.l.92.1@gmail.com</a>
<a href=""mailto:bo.okbil.l.9.21@gmail.com"">bo.okbil.l.9.21@gmail.com</a>
<a href=""mailto:bo.o.kb.i.l.l.9.2.1@gmail.com"">bo.o.kb.i.l.l.9.2.1@gmail.com</a>
<a href=""mailto:boo.kb.ill.921@gmail.com"">boo.kb.ill.921@gmail.com</a>
<a href=""mailto:bo.o.kbill921@gmail.com"">bo.o.kbill921@gmail.com</a>
<a href=""mailto:b.oo.k.b.i.ll92.1@gmail.com"">b.oo.k.b.i.ll92.1@gmail.com</a>
<a href=""mailto:b.ook.bil.l.9.21@gmail.com"">b.ook.bil.l.9.21@gmail.com</a>
<a href=""mailto:b.oo.k.bill.921@gmail.com"">b.oo.k.bill.921@gmail.com</a>
<a href=""mailto:b.oo.k.bil.l9.21@gmail.com"">b.oo.k.bil.l9.21@gmail.com</a>
<a href=""mailto:b.o.ok.b.ill.92.1@gmail.com"">b.o.ok.b.ill.92.1@gmail.com</a>
<a href=""mailto:b.ookb.ill92.1@gmail.com"">b.ookb.ill92.1@gmail.com</a>
<a href=""mailto:bo.o.k.bill921@gmail.com"">bo.o.k.bill921@gmail.com</a>
<a href=""mailto:boo.kb.i.l.l9.21@gmail.com"">boo.kb.i.l.l9.21@gmail.com</a>
<a href=""mailto:b.oo.k.b.ill92.1@gmail.com"">b.oo.k.b.ill92.1@gmail.com</a>
<a href=""mailto:b.o.okb.i.ll.92.1@gmail.com"">b.o.okb.i.ll.92.1@gmail.com</a>
<a href=""mailto:bookb.il.l92.1@gmail.com"">bookb.il.l92.1@gmail.com</a>
<a href=""mailto:boo.k.bill.9.2.1@gmail.com"">boo.k.bill.9.2.1@gmail.com</a>
<a href=""mailto:b.o.okb.i.ll9.2.1@gmail.com"">b.o.okb.i.ll9.2.1@gmail.com</a>
<a href=""mailto:b.ookb.i.l.l921@gmail.com"">b.ookb.i.l.l921@gmail.com</a>
<a href=""mailto:b.o.ok.bill921@gmail.com"">b.o.ok.bill921@gmail.com</a>
<a href=""mailto:b.o.o.kbi.ll.921@gmail.com"">b.o.o.kbi.ll.921@gmail.com</a>
<a href=""mailto:b.o.o.kbi.ll.9.2.1@gmail.com"">b.o.o.kbi.ll.9.2.1@gmail.com</a>
<a href=""mailto:b.o.ok.b.i.l.l.921@gmail.com"">b.o.ok.b.i.l.l.921@gmail.com</a>
<a href=""mailto:bo.o.k.bil.l.9.2.1@gmail.com"">bo.o.k.bil.l.9.2.1@gmail.com</a>
<a href=""mailto:b.ook.b.i.ll92.1@gmail.com"">b.ook.b.i.ll92.1@gmail.com</a>
<a href=""mailto:b.ookbi.l.l9.21@gmail.com"">b.ookbi.l.l9.21@gmail.com</a>
<a href=""mailto:b.ook.bil.l.921@gmail.com"">b.ook.bil.l.921@gmail.com</a>
<a href=""mailto:book.bi.ll.9.21@gmail.com"">book.bi.ll.9.21@gmail.com</a>
<a href=""mailto:b.ook.bi.l.l.921@gmail.com"">b.ook.bi.l.l.921@gmail.com</a>
<a href=""mailto:bo.ok.b.il.l.92.1@gmail.com"">bo.ok.b.il.l.92.1@gmail.com</a>
<a href=""mailto:b.oo.k.bill9.21@gmail.com"">b.oo.k.bill9.21@gmail.com</a>
<a href=""mailto:b.oo.kbil.l9.21@gmail.com"">b.oo.kbil.l9.21@gmail.com</a>
<a href=""mailto:bo.o.k.b.i.ll.92.1@gmail.com"">bo.o.k.b.i.ll.92.1@gmail.com</a>
<a href=""mailto:b.oo.k.bil.l921@gmail.com"">b.oo.k.bil.l921@gmail.com</a>
<a href=""mailto:bo.ok.bil.l9.21@gmail.com"">bo.ok.bil.l9.21@gmail.com</a>
<a href=""mailto:b.oo.kbi.l.l9.21@gmail.com"">b.oo.kbi.l.l9.21@gmail.com</a>
<a href=""mailto:b.oo.k.b.ill9.21@gmail.com"">b.oo.k.b.ill9.21@gmail.com</a>
<a href=""mailto:bo.o.kbill9.21@gmail.com"">bo.o.kbill9.21@gmail.com</a>
<a href=""mailto:boo.kbill.92.1@gmail.com"">boo.kbill.92.1@gmail.com</a>
<a href=""mailto:b.oo.kbil.l.9.21@gmail.com"">b.oo.kbil.l.9.21@gmail.com</a>
<a href=""mailto:bo.ok.bil.l921@gmail.com"">bo.ok.bil.l921@gmail.com</a>
<a href=""mailto:bo.ok.b.i.l.l9.2.1@gmail.com"">bo.ok.b.i.l.l9.2.1@gmail.com</a>
<a href=""mailto:boo.k.b.i.ll.921@gmail.com"">boo.k.b.i.ll.921@gmail.com</a>
<a href=""mailto:b.ook.bill.9.2.1@gmail.com"">b.ook.bill.9.2.1@gmail.com</a>
<a href=""mailto:b.o.o.k.bill9.21@gmail.com"">b.o.o.k.bill9.21@gmail.com</a>
<a href=""mailto:b.ookb.ill.9.21@gmail.com"">b.ookb.ill.9.21@gmail.com</a>
<a href=""mailto:b.o.o.kbi.l.l.921@gmail.com"">b.o.o.kbi.l.l.921@gmail.com</a>
<a href=""mailto:bookb.ill921@gmail.com"">bookb.ill921@gmail.com</a>
<a href=""mailto:b.oo.kbi.ll.9.21@gmail.com"">b.oo.kbi.ll.9.21@gmail.com</a>
<a href=""mailto:bo.ok.b.i.l.l9.21@gmail.com"">bo.ok.b.i.l.l9.21@gmail.com</a>
<a href=""mailto:b.ook.b.il.l.9.21@gmail.com"">b.ook.b.il.l.9.21@gmail.com</a>
<a href=""mailto:boo.k.bi.l.l921@gmail.com"">boo.k.bi.l.l921@gmail.com</a>
<a href=""mailto:bo.ok.bi.l.l.9.2.1@gmail.com"">bo.ok.bi.l.l.9.2.1@gmail.com</a>
<a href=""mailto:bo.o.k.b.i.ll.9.2.1@gmail.com"">bo.o.k.b.i.ll.9.2.1@gmail.com</a>
<a href=""mailto:b.o.o.kbil.l.9.2.1@gmail.com"">b.o.o.kbil.l.9.2.1@gmail.com</a>
<a href=""mailto:b.ookb.i.ll9.21@gmail.com"">b.ookb.i.ll9.21@gmail.com</a>
<a href=""mailto:b.o.o.k.bil.l9.2.1@gmail.com"">b.o.o.k.bil.l9.2.1@gmail.com</a>
<a href=""mailto:bookbi.l.l9.21@gmail.com"">bookbi.l.l9.21@gmail.com</a>
<a href=""mailto:b.oo.kbi.l.l.92.1@gmail.com"">b.oo.kbi.l.l.92.1@gmail.com</a>
<a href=""mailto:b.ook.bi.l.l.92.1@gmail.com"">b.ook.bi.l.l.92.1@gmail.com</a>
<a href=""mailto:bo.o.kb.ill9.2.1@gmail.com"">bo.o.kb.ill9.2.1@gmail.com</a>
<a href=""mailto:book.bil.l9.21@gmail.com"">book.bil.l9.21@gmail.com</a>
<a href=""mailto:boo.k.bill.921@gmail.com"">boo.k.bill.921@gmail.com</a>
<a href=""mailto:bo.okbi.l.l.9.21@gmail.com"">bo.okbi.l.l.9.21@gmail.com</a>
<a href=""mailto:bo.ok.b.i.ll.921@gmail.com"">bo.ok.b.i.ll.921@gmail.com</a>
<a href=""mailto:boo.k.b.i.l.l.9.2.1@gmail.com"">boo.k.b.i.l.l.9.2.1@gmail.com</a>
<a href=""mailto:bo.okbil.l9.21@gmail.com"">bo.okbil.l9.21@gmail.com</a>
<a href=""mailto:b.ookbil.l.921@gmail.com"">b.ookbil.l.921@gmail.com</a>
<a href=""mailto:b.oo.kb.ill.92.1@gmail.com"">b.oo.kb.ill.92.1@gmail.com</a>
<a href=""mailto:b.o.o.kb.ill.9.21@gmail.com"">b.o.o.kb.ill.9.21@gmail.com</a>
<a href=""mailto:b.oo.k.bi.ll9.2.1@gmail.com"">b.oo.k.bi.ll9.2.1@gmail.com</a>
<a href=""mailto:ninecool547@gmail.com"">ninecool547@gmail.com</a>
<a href=""mailto:nin.e.c.ool5.47@gmail.com"">nin.e.c.ool5.47@gmail.com</a>
<a href=""mailto:n.inec.o.o.l5.47@gmail.com"">n.inec.o.o.l5.47@gmail.com</a>
<a href=""mailto:n.i.ne.c.o.o.l5.47@gmail.com"">n.i.ne.c.o.o.l5.47@gmail.com</a>
<a href=""mailto:ni.n.eco.ol.547@gmail.com"">ni.n.eco.ol.547@gmail.com</a>
<a href=""mailto:nin.ecool5.47@gmail.com"">nin.ecool5.47@gmail.com</a>
<a href=""mailto:n.i.n.e.c.oo.l.5.47@gmail.com"">n.i.n.e.c.oo.l.5.47@gmail.com</a>
<a href=""mailto:n.i.neco.o.l.5.4.7@gmail.com"">n.i.neco.o.l.5.4.7@gmail.com</a>
<a href=""mailto:nin.ecoo.l.5.47@gmail.com"">nin.ecoo.l.5.47@gmail.com</a>
<a href=""mailto:nin.e.c.o.ol.547@gmail.com"">nin.e.c.o.ol.547@gmail.com</a>
<a href=""mailto:ni.n.e.co.o.l.547@gmail.com"">ni.n.e.co.o.l.547@gmail.com</a>
<a href=""mailto:ni.n.ec.ool5.47@gmail.com"">ni.n.ec.ool5.47@gmail.com</a>
<a href=""mailto:n.i.n.ec.o.ol5.47@gmail.com"">n.i.n.ec.o.ol5.47@gmail.com</a>
<a href=""mailto:nin.ec.o.o.l.547@gmail.com"">nin.ec.o.o.l.547@gmail.com</a>
<a href=""mailto:n.in.e.c.ool5.4.7@gmail.com"">n.in.e.c.ool5.4.7@gmail.com</a>
<a href=""mailto:nineco.o.l.54.7@gmail.com"">nineco.o.l.54.7@gmail.com</a>
<a href=""mailto:n.i.ne.c.o.o.l54.7@gmail.com"">n.i.ne.c.o.o.l54.7@gmail.com</a>
<a href=""mailto:nin.e.co.o.l.54.7@gmail.com"">nin.e.co.o.l.54.7@gmail.com</a>
<a href=""mailto:ninec.ool54.7@gmail.com"">ninec.ool54.7@gmail.com</a>
<a href=""mailto:nin.eco.ol54.7@gmail.com"">nin.eco.ol54.7@gmail.com</a>
<a href=""mailto:n.i.n.e.c.ool.54.7@gmail.com"">n.i.n.e.c.ool.54.7@gmail.com</a>
<a href=""mailto:n.in.e.cool5.4.7@gmail.com"">n.in.e.cool5.4.7@gmail.com</a>
<a href=""mailto:n.i.ne.c.ool547@gmail.com"">n.i.ne.c.ool547@gmail.com</a>
<a href=""mailto:nin.e.c.ool.5.4.7@gmail.com"">nin.e.c.ool.5.4.7@gmail.com</a>
<a href=""mailto:ni.neco.ol547@gmail.com"">ni.neco.ol547@gmail.com</a>
<a href=""mailto:n.i.n.e.c.o.ol.547@gmail.com"">n.i.n.e.c.o.ol.547@gmail.com</a>
<a href=""mailto:n.in.ec.ool.5.47@gmail.com"">n.in.ec.ool.5.47@gmail.com</a>
<a href=""mailto:n.i.ne.coo.l.5.4.7@gmail.com"">n.i.ne.coo.l.5.4.7@gmail.com</a>
<a href=""mailto:ni.n.ecool5.47@gmail.com"">ni.n.ecool5.47@gmail.com</a>
<a href=""mailto:ni.nec.o.ol.54.7@gmail.com"">ni.nec.o.ol.54.7@gmail.com</a>
<a href=""mailto:nin.ec.ool.5.4.7@gmail.com"">nin.ec.ool.5.4.7@gmail.com</a>
<a href=""mailto:n.inecoo.l5.4.7@gmail.com"">n.inecoo.l5.4.7@gmail.com</a>
<a href=""mailto:n.i.nec.o.o.l547@gmail.com"">n.i.nec.o.o.l547@gmail.com</a>
<a href=""mailto:n.i.necoo.l54.7@gmail.com"">n.i.necoo.l54.7@gmail.com</a>
<a href=""mailto:nin.eco.ol.5.4.7@gmail.com"">nin.eco.ol.5.4.7@gmail.com</a>
<a href=""mailto:n.i.ne.co.ol.5.47@gmail.com"">n.i.ne.co.ol.5.47@gmail.com</a>
<a href=""mailto:n.i.necool.547@gmail.com"">n.i.necool.547@gmail.com</a>
<a href=""mailto:ni.nec.ool5.4.7@gmail.com"">ni.nec.ool5.4.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.o.o.l.54.7@gmail.com"">ni.n.e.c.o.o.l.54.7@gmail.com</a>
<a href=""mailto:n.ine.c.ool.5.4.7@gmail.com"">n.ine.c.ool.5.4.7@gmail.com</a>
<a href=""mailto:n.inec.ool5.4.7@gmail.com"">n.inec.ool5.4.7@gmail.com</a>
<a href=""mailto:ni.ne.co.o.l.547@gmail.com"">ni.ne.co.o.l.547@gmail.com</a>
<a href=""mailto:nine.coo.l547@gmail.com"">nine.coo.l547@gmail.com</a>
<a href=""mailto:n.in.e.cool.54.7@gmail.com"">n.in.e.cool.54.7@gmail.com</a>
<a href=""mailto:ni.nec.oo.l.54.7@gmail.com"">ni.nec.oo.l.54.7@gmail.com</a>
<a href=""mailto:n.i.nec.o.ol.5.4.7@gmail.com"">n.i.nec.o.ol.5.4.7@gmail.com</a>
<a href=""mailto:nine.c.o.ol547@gmail.com"">nine.c.o.ol547@gmail.com</a>
<a href=""mailto:n.in.e.co.ol5.47@gmail.com"">n.in.e.co.ol5.47@gmail.com</a>
<a href=""mailto:n.in.ecool5.4.7@gmail.com"">n.in.ecool5.4.7@gmail.com</a>
<a href=""mailto:n.inecool5.4.7@gmail.com"">n.inecool5.4.7@gmail.com</a>
<a href=""mailto:nin.e.cool.54.7@gmail.com"">nin.e.cool.54.7@gmail.com</a>
<a href=""mailto:n.i.nec.o.ol.5.47@gmail.com"">n.i.nec.o.ol.5.47@gmail.com</a>
<a href=""mailto:nin.e.c.o.o.l547@gmail.com"">nin.e.c.o.o.l547@gmail.com</a>
<a href=""mailto:n.in.e.coo.l.547@gmail.com"">n.in.e.coo.l.547@gmail.com</a>
<a href=""mailto:ni.ne.c.oo.l547@gmail.com"">ni.ne.c.oo.l547@gmail.com</a>
<a href=""mailto:ni.n.e.co.ol.54.7@gmail.com"">ni.n.e.co.ol.54.7@gmail.com</a>
<a href=""mailto:nin.ec.ool.54.7@gmail.com"">nin.ec.ool.54.7@gmail.com</a>
<a href=""mailto:n.in.ec.o.ol54.7@gmail.com"">n.in.ec.o.ol54.7@gmail.com</a>
<a href=""mailto:ni.n.e.co.o.l5.4.7@gmail.com"">ni.n.e.co.o.l5.4.7@gmail.com</a>
<a href=""mailto:n.i.neco.ol54.7@gmail.com"">n.i.neco.ol54.7@gmail.com</a>
<a href=""mailto:n.in.eco.ol5.4.7@gmail.com"">n.in.eco.ol5.4.7@gmail.com</a>
<a href=""mailto:nin.eco.ol.54.7@gmail.com"">nin.eco.ol.54.7@gmail.com</a>
<a href=""mailto:n.i.n.e.c.o.o.l54.7@gmail.com"">n.i.n.e.c.o.o.l54.7@gmail.com</a>
<a href=""mailto:nin.e.c.oo.l5.47@gmail.com"">nin.e.c.oo.l5.47@gmail.com</a>
<a href=""mailto:nine.co.o.l54.7@gmail.com"">nine.co.o.l54.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.o.ol.5.4.7@gmail.com"">ni.n.e.c.o.ol.5.4.7@gmail.com</a>
<a href=""mailto:ni.n.e.co.o.l547@gmail.com"">ni.n.e.co.o.l547@gmail.com</a>
<a href=""mailto:n.in.e.coo.l54.7@gmail.com"">n.in.e.coo.l54.7@gmail.com</a>
<a href=""mailto:n.in.ecoo.l54.7@gmail.com"">n.in.ecoo.l54.7@gmail.com</a>
<a href=""mailto:ninecoo.l.547@gmail.com"">ninecoo.l.547@gmail.com</a>
<a href=""mailto:ni.nec.o.ol.5.47@gmail.com"">ni.nec.o.ol.5.47@gmail.com</a>
<a href=""mailto:ni.ne.c.ool.5.47@gmail.com"">ni.ne.c.ool.5.47@gmail.com</a>
<a href=""mailto:n.i.n.ec.o.o.l5.4.7@gmail.com"">n.i.n.ec.o.o.l5.4.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.o.ol.54.7@gmail.com"">ni.n.e.c.o.ol.54.7@gmail.com</a>
<a href=""mailto:nine.cool54.7@gmail.com"">nine.cool54.7@gmail.com</a>
<a href=""mailto:n.in.ec.oo.l547@gmail.com"">n.in.ec.oo.l547@gmail.com</a>
<a href=""mailto:n.i.ne.c.oo.l547@gmail.com"">n.i.ne.c.oo.l547@gmail.com</a>
<a href=""mailto:nin.eco.o.l.5.47@gmail.com"">nin.eco.o.l.5.47@gmail.com</a>
<a href=""mailto:n.i.ne.co.ol547@gmail.com"">n.i.ne.co.ol547@gmail.com</a>
<a href=""mailto:n.in.ecool5.47@gmail.com"">n.in.ecool5.47@gmail.com</a>
<a href=""mailto:nin.e.cool.5.47@gmail.com"">nin.e.cool.5.47@gmail.com</a>
<a href=""mailto:ni.ne.co.o.l5.47@gmail.com"">ni.ne.co.o.l5.47@gmail.com</a>
<a href=""mailto:n.i.n.ec.o.ol.5.47@gmail.com"">n.i.n.ec.o.ol.5.47@gmail.com</a>
<a href=""mailto:n.i.n.ec.oo.l54.7@gmail.com"">n.i.n.ec.oo.l54.7@gmail.com</a>
<a href=""mailto:ninecoo.l547@gmail.com"">ninecoo.l547@gmail.com</a>
<a href=""mailto:n.i.nec.oo.l.5.47@gmail.com"">n.i.nec.oo.l.5.47@gmail.com</a>
<a href=""mailto:nineco.ol.547@gmail.com"">nineco.ol.547@gmail.com</a>
<a href=""mailto:ni.n.eco.o.l.5.47@gmail.com"">ni.n.eco.o.l.5.47@gmail.com</a>
<a href=""mailto:ninecool54.7@gmail.com"">ninecool54.7@gmail.com</a>
<a href=""mailto:ni.n.eco.ol.54.7@gmail.com"">ni.n.eco.ol.54.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.ool5.4.7@gmail.com"">ni.n.e.c.ool5.4.7@gmail.com</a>
<a href=""mailto:n.i.n.ec.o.ol54.7@gmail.com"">n.i.n.ec.o.ol54.7@gmail.com</a>
<a href=""mailto:n.ineco.ol.54.7@gmail.com"">n.ineco.ol.54.7@gmail.com</a>
<a href=""mailto:ni.n.eco.o.l5.4.7@gmail.com"">ni.n.eco.o.l5.4.7@gmail.com</a>
<a href=""mailto:nine.c.oo.l5.47@gmail.com"">nine.c.oo.l5.47@gmail.com</a>
<a href=""mailto:ninecool.547@gmail.com"">ninecool.547@gmail.com</a>
<a href=""mailto:nin.ec.o.ol.5.47@gmail.com"">nin.ec.o.ol.5.47@gmail.com</a>
<a href=""mailto:n.i.n.e.c.ool547@gmail.com"">n.i.n.e.c.ool547@gmail.com</a>
<a href=""mailto:n.i.neco.o.l5.4.7@gmail.com"">n.i.neco.o.l5.4.7@gmail.com</a>
<a href=""mailto:n.inecool547@gmail.com"">n.inecool547@gmail.com</a>
<a href=""mailto:n.i.necoo.l.547@gmail.com"">n.i.necoo.l.547@gmail.com</a>
<a href=""mailto:n.i.n.e.co.ol5.4.7@gmail.com"">n.i.n.e.co.ol5.4.7@gmail.com</a>
<a href=""mailto:n.in.e.coo.l5.47@gmail.com"">n.in.e.coo.l5.47@gmail.com</a>
<a href=""mailto:ni.neco.o.l547@gmail.com"">ni.neco.o.l547@gmail.com</a>
<a href=""mailto:n.ine.coo.l5.47@gmail.com"">n.ine.coo.l5.47@gmail.com</a>
<a href=""mailto:n.i.n.e.co.ol.5.4.7@gmail.com"">n.i.n.e.co.ol.5.4.7@gmail.com</a>
<a href=""mailto:n.i.necoo.l5.4.7@gmail.com"">n.i.necoo.l5.4.7@gmail.com</a>
<a href=""mailto:nin.e.co.ol.5.47@gmail.com"">nin.e.co.ol.5.47@gmail.com</a>
<a href=""mailto:ni.nec.o.ol5.4.7@gmail.com"">ni.nec.o.ol5.4.7@gmail.com</a>
<a href=""mailto:ni.ne.c.o.ol5.4.7@gmail.com"">ni.ne.c.o.ol5.4.7@gmail.com</a>
<a href=""mailto:ni.ne.coo.l.5.47@gmail.com"">ni.ne.coo.l.5.47@gmail.com</a>
<a href=""mailto:ni.neco.o.l.5.4.7@gmail.com"">ni.neco.o.l.5.4.7@gmail.com</a>
<a href=""mailto:n.i.ne.c.o.ol5.4.7@gmail.com"">n.i.ne.c.o.ol5.4.7@gmail.com</a>
<a href=""mailto:nin.eco.o.l5.4.7@gmail.com"">nin.eco.o.l5.4.7@gmail.com</a>
<a href=""mailto:ni.ne.c.oo.l.5.4.7@gmail.com"">ni.ne.c.oo.l.5.4.7@gmail.com</a>
<a href=""mailto:n.ine.c.ool.54.7@gmail.com"">n.ine.c.ool.54.7@gmail.com</a>
<a href=""mailto:ni.n.ec.oo.l54.7@gmail.com"">ni.n.ec.oo.l54.7@gmail.com</a>
<a href=""mailto:n.i.n.ecoo.l.54.7@gmail.com"">n.i.n.ecoo.l.54.7@gmail.com</a>
<a href=""mailto:ni.n.ec.o.ol.547@gmail.com"">ni.n.ec.o.ol.547@gmail.com</a>
<a href=""mailto:n.i.ne.c.o.ol.5.47@gmail.com"">n.i.ne.c.o.ol.5.47@gmail.com</a>
<a href=""mailto:nine.co.ol54.7@gmail.com"">nine.co.ol54.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.oo.l54.7@gmail.com"">ni.n.e.c.oo.l54.7@gmail.com</a>
<a href=""mailto:n.i.ne.c.ool54.7@gmail.com"">n.i.ne.c.ool54.7@gmail.com</a>
<a href=""mailto:n.in.e.c.o.o.l.5.47@gmail.com"">n.in.e.c.o.o.l.5.47@gmail.com</a>
<a href=""mailto:n.i.n.eco.o.l.5.47@gmail.com"">n.i.n.eco.o.l.5.47@gmail.com</a>
<a href=""mailto:n.i.ne.cool547@gmail.com"">n.i.ne.cool547@gmail.com</a>
<a href=""mailto:n.i.n.e.cool547@gmail.com"">n.i.n.e.cool547@gmail.com</a>
<a href=""mailto:nin.e.cool54.7@gmail.com"">nin.e.cool54.7@gmail.com</a>
<a href=""mailto:n.in.e.c.o.o.l.5.4.7@gmail.com"">n.in.e.c.o.o.l.5.4.7@gmail.com</a>
<a href=""mailto:n.i.nec.o.ol5.47@gmail.com"">n.i.nec.o.ol5.47@gmail.com</a>
<a href=""mailto:ni.n.ecool547@gmail.com"">ni.n.ecool547@gmail.com</a>
<a href=""mailto:ninecoo.l.5.4.7@gmail.com"">ninecoo.l.5.4.7@gmail.com</a>
<a href=""mailto:n.i.n.ec.o.o.l.54.7@gmail.com"">n.i.n.ec.o.o.l.54.7@gmail.com</a>
<a href=""mailto:nin.ec.ool5.4.7@gmail.com"">nin.ec.ool5.4.7@gmail.com</a>
<a href=""mailto:ninec.o.o.l.54.7@gmail.com"">ninec.o.o.l.54.7@gmail.com</a>
<a href=""mailto:nine.c.o.o.l.5.4.7@gmail.com"">nine.c.o.o.l.5.4.7@gmail.com</a>
<a href=""mailto:n.i.n.ec.ool5.47@gmail.com"">n.i.n.ec.ool5.47@gmail.com</a>
<a href=""mailto:ni.ne.cool.5.4.7@gmail.com"">ni.ne.cool.5.4.7@gmail.com</a>
<a href=""mailto:ninec.oo.l547@gmail.com"">ninec.oo.l547@gmail.com</a>
<a href=""mailto:n.in.ecoo.l5.47@gmail.com"">n.in.ecoo.l5.47@gmail.com</a>
<a href=""mailto:n.i.n.ec.ool.54.7@gmail.com"">n.i.n.ec.ool.54.7@gmail.com</a>
<a href=""mailto:ni.ne.cool.5.47@gmail.com"">ni.ne.cool.5.47@gmail.com</a>
<a href=""mailto:n.i.n.ecool5.47@gmail.com"">n.i.n.ecool5.47@gmail.com</a>
<a href=""mailto:n.inec.o.ol5.4.7@gmail.com"">n.inec.o.ol5.4.7@gmail.com</a>
<a href=""mailto:nin.eco.o.l5.47@gmail.com"">nin.eco.o.l5.47@gmail.com</a>
<a href=""mailto:n.i.nec.o.ol.54.7@gmail.com"">n.i.nec.o.ol.54.7@gmail.com</a>
<a href=""mailto:n.in.e.co.o.l.5.47@gmail.com"">n.in.e.co.o.l.5.47@gmail.com</a>
<a href=""mailto:ni.necoo.l.5.4.7@gmail.com"">ni.necoo.l.5.4.7@gmail.com</a>
<a href=""mailto:n.inec.o.ol.54.7@gmail.com"">n.inec.o.ol.54.7@gmail.com</a>
<a href=""mailto:nin.eco.ol5.4.7@gmail.com"">nin.eco.ol5.4.7@gmail.com</a>
<a href=""mailto:ni.neco.o.l.54.7@gmail.com"">ni.neco.o.l.54.7@gmail.com</a>
<a href=""mailto:n.in.e.c.o.ol54.7@gmail.com"">n.in.e.c.o.ol54.7@gmail.com</a>
<a href=""mailto:ni.n.ec.ool54.7@gmail.com"">ni.n.ec.ool54.7@gmail.com</a>
<a href=""mailto:ni.nec.o.o.l.5.4.7@gmail.com"">ni.nec.o.o.l.5.4.7@gmail.com</a>
<a href=""mailto:nin.e.c.o.o.l.54.7@gmail.com"">nin.e.c.o.o.l.54.7@gmail.com</a>
<a href=""mailto:nin.e.c.o.o.l5.47@gmail.com"">nin.e.c.o.o.l5.47@gmail.com</a>
<a href=""mailto:ni.n.e.c.oo.l5.4.7@gmail.com"">ni.n.e.c.oo.l5.4.7@gmail.com</a>
<a href=""mailto:nin.ecoo.l547@gmail.com"">nin.ecoo.l547@gmail.com</a>
<a href=""mailto:n.ine.co.o.l.547@gmail.com"">n.ine.co.o.l.547@gmail.com</a>
<a href=""mailto:n.in.ec.o.ol547@gmail.com"">n.in.ec.o.ol547@gmail.com</a>
<a href=""mailto:n.ine.cool5.47@gmail.com"">n.ine.cool5.47@gmail.com</a>
<a href=""mailto:n.ine.c.o.ol5.47@gmail.com"">n.ine.c.o.ol5.47@gmail.com</a>
<a href=""mailto:nineco.ol5.47@gmail.com"">nineco.ol5.47@gmail.com</a>
<a href=""mailto:n.i.n.ec.ool547@gmail.com"">n.i.n.ec.ool547@gmail.com</a>
<a href=""mailto:n.in.ec.o.ol.547@gmail.com"">n.in.ec.o.ol.547@gmail.com</a>
<a href=""mailto:n.inec.ool.5.47@gmail.com"">n.inec.ool.5.47@gmail.com</a>
<a href=""mailto:ni.n.e.c.o.o.l547@gmail.com"">ni.n.e.c.o.o.l547@gmail.com</a>
<a href=""mailto:n.in.eco.o.l5.4.7@gmail.com"">n.in.eco.o.l5.4.7@gmail.com</a>
<a href=""mailto:nineco.o.l54.7@gmail.com"">nineco.o.l54.7@gmail.com</a>
<a href=""mailto:n.i.n.ec.o.ol.5.4.7@gmail.com"">n.i.n.ec.o.ol.5.4.7@gmail.com</a>
<a href=""mailto:ni.ne.c.oo.l.54.7@gmail.com"">ni.ne.c.oo.l.54.7@gmail.com</a>
<a href=""mailto:n.i.n.ecoo.l.5.4.7@gmail.com"">n.i.n.ecoo.l.5.4.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.o.ol5.47@gmail.com"">ni.n.e.c.o.ol5.47@gmail.com</a>
<a href=""mailto:n.i.n.e.c.oo.l5.4.7@gmail.com"">n.i.n.e.c.oo.l5.4.7@gmail.com</a>
<a href=""mailto:ni.n.e.c.ool.54.7@gmail.com"">ni.n.e.c.ool.54.7@gmail.com</a>
<a href=""mailto:ni.ne.c.o.o.l5.47@gmail.com"">ni.ne.c.o.o.l5.47@gmail.com</a>
<a href=""mailto:nine.co.ol5.47@gmail.com"">nine.co.ol5.47@gmail.com</a>
<a href=""mailto:nin.e.c.o.ol547@gmail.com"">nin.e.c.o.ol547@gmail.com</a>
<a href=""mailto:n.i.n.ecool.547@gmail.com"">n.i.n.ecool.547@gmail.com</a>
<a href=""mailto:ninecool547@gmail.com"">ninecool547@gmail.com</a>
<a href=""mailto:n.in.e.coo.l.5.4.7@gmail.com"">n.in.e.coo.l.5.4.7@gmail.com</a>
<a href=""mailto:n.i.ne.c.o.ol547@gmail.com"">n.i.ne.c.o.ol547@gmail.com</a>
<a href=""mailto:n.i.n.ecool.5.47@gmail.com"">n.i.n.ecool.5.47@gmail.com</a>
<a href=""mailto:ni.nec.o.ol5.47@gmail.com"">ni.nec.o.ol5.47@gmail.com</a>
<a href=""mailto:ni.neco.o.l.547@gmail.com"">ni.neco.o.l.547@gmail.com</a>
<a href=""mailto:ni.n.e.c.oo.l.547@gmail.com"">ni.n.e.c.oo.l.547@gmail.com</a>
<a href=""mailto:n.inec.o.ol547@gmail.com"">n.inec.o.ol547@gmail.com</a>
<a href=""mailto:n.i.ne.co.o.l.54.7@gmail.com"">n.i.ne.co.o.l.54.7@gmail.com</a>
<a href=""mailto:n.ine.coo.l54.7@gmail.com"">n.ine.coo.l54.7@gmail.com</a>
<a href=""mailto:n.i.neco.o.l.547@gmail.com"">n.i.neco.o.l.547@gmail.com</a>
<a href=""mailto:n.in.e.c.o.ol.5.4.7@gmail.com"">n.in.e.c.o.ol.5.4.7@gmail.com</a>
<a href=""mailto:ni.ne.cool.54.7@gmail.com"">ni.ne.cool.54.7@gmail.com</a>
<a href=""mailto:ni.n.e.co.ol.5.4.7@gmail.com"">ni.n.e.co.ol.5.4.7@gmail.com</a>
<a href=""mailto:n.i.n.e.coo.l.5.4.7@gmail.com"">n.i.n.e.coo.l.5.4.7@gmail.com</a>
<a href=""mailto:n.i.n.eco.o.l.547@gmail.com"">n.i.n.eco.o.l.547@gmail.com</a>
<a href=""mailto:nine.c.o.o.l.54.7@gmail.com"">nine.c.o.o.l.54.7@gmail.com</a>
<a href=""mailto:ni.n.ec.oo.l.5.47@gmail.com"">ni.n.ec.oo.l.5.47@gmail.com</a>
<a href=""mailto:ni.ne.coo.l547@gmail.com"">ni.ne.coo.l547@gmail.com</a>
<a href=""mailto:n.in.ec.o.o.l.5.4.7@gmail.com"">n.in.ec.o.o.l.5.4.7@gmail.com</a>
<a href=""mailto:nine.coo.l.5.47@gmail.com"">nine.coo.l.5.47@gmail.com</a>
<a href=""mailto:ni.n.e.c.oo.l.5.47@gmail.com"">ni.n.e.c.oo.l.5.47@gmail.com</a>
<a href=""mailto:cshameer713@gmail.com"">cshameer713@gmail.com</a>
<a href=""mailto:c.s.ha.m.e.er713@gmail.com"">c.s.ha.m.e.er713@gmail.com</a>
<a href=""mailto:cs.ham.eer71.3@gmail.com"">cs.ham.eer71.3@gmail.com</a>
<a href=""mailto:c.s.h.am.e.er.71.3@gmail.com"">c.s.h.am.e.er.71.3@gmail.com</a>
<a href=""mailto:csh.a.m.ee.r7.13@gmail.com"">csh.a.m.ee.r7.13@gmail.com</a>
<a href=""mailto:csh.am.eer.7.13@gmail.com"">csh.am.eer.7.13@gmail.com</a>
<a href=""mailto:csham.ee.r.7.13@gmail.com"">csham.ee.r.7.13@gmail.com</a>
<a href=""mailto:cs.h.ameer713@gmail.com"">cs.h.ameer713@gmail.com</a>
<a href=""mailto:c.s.ha.me.er.7.13@gmail.com"">c.s.ha.me.er.7.13@gmail.com</a>
<a href=""mailto:c.sha.me.e.r71.3@gmail.com"">c.sha.me.e.r71.3@gmail.com</a>
<a href=""mailto:c.s.ha.m.e.e.r7.13@gmail.com"">c.s.ha.m.e.e.r7.13@gmail.com</a>
<a href=""mailto:c.sh.am.eer7.1.3@gmail.com"">c.sh.am.eer7.1.3@gmail.com</a>
<a href=""mailto:cs.h.a.m.eer713@gmail.com"">cs.h.a.m.eer713@gmail.com</a>
<a href=""mailto:cs.h.a.m.e.e.r7.1.3@gmail.com"">cs.h.a.m.e.e.r7.1.3@gmail.com</a>
<a href=""mailto:csh.amee.r.71.3@gmail.com"">csh.amee.r.71.3@gmail.com</a>
<a href=""mailto:c.s.h.am.e.er.7.13@gmail.com"">c.s.h.am.e.er.7.13@gmail.com</a>
<a href=""mailto:c.s.h.am.e.e.r71.3@gmail.com"">c.s.h.am.e.e.r71.3@gmail.com</a>
<a href=""mailto:cs.h.a.m.ee.r.7.13@gmail.com"">cs.h.a.m.ee.r.7.13@gmail.com</a>
<a href=""mailto:cs.ham.e.e.r713@gmail.com"">cs.ham.e.e.r713@gmail.com</a>
<a href=""mailto:c.sh.am.ee.r.7.13@gmail.com"">c.sh.am.ee.r.7.13@gmail.com</a>
<a href=""mailto:c.shame.e.r7.13@gmail.com"">c.shame.e.r7.13@gmail.com</a>
<a href=""mailto:c.sh.am.ee.r.713@gmail.com"">c.sh.am.ee.r.713@gmail.com</a>
<a href=""mailto:csh.a.m.e.er.7.1.3@gmail.com"">csh.a.m.e.er.7.1.3@gmail.com</a>
<a href=""mailto:csh.am.eer.713@gmail.com"">csh.am.eer.713@gmail.com</a>
<a href=""mailto:cs.ham.ee.r.7.13@gmail.com"">cs.ham.ee.r.7.13@gmail.com</a>
<a href=""mailto:csh.ame.e.r.713@gmail.com"">csh.ame.e.r.713@gmail.com</a>
<a href=""mailto:c.s.h.a.mee.r7.1.3@gmail.com"">c.s.h.a.mee.r7.1.3@gmail.com</a>
<a href=""mailto:c.s.ha.mee.r7.13@gmail.com"">c.s.ha.mee.r7.13@gmail.com</a>
<a href=""mailto:cs.hameer7.13@gmail.com"">cs.hameer7.13@gmail.com</a>
<a href=""mailto:cs.hame.er71.3@gmail.com"">cs.hame.er71.3@gmail.com</a>
<a href=""mailto:csh.a.mee.r.7.1.3@gmail.com"">csh.a.mee.r.7.1.3@gmail.com</a>
<a href=""mailto:c.s.hame.e.r7.1.3@gmail.com"">c.s.hame.e.r7.1.3@gmail.com</a>
<a href=""mailto:c.s.ha.m.eer7.1.3@gmail.com"">c.s.ha.m.eer7.1.3@gmail.com</a>
<a href=""mailto:cs.hame.e.r71.3@gmail.com"">cs.hame.e.r71.3@gmail.com</a>
<a href=""mailto:c.sh.ameer713@gmail.com"">c.sh.ameer713@gmail.com</a>
<a href=""mailto:c.sha.m.eer.7.13@gmail.com"">c.sha.m.eer.7.13@gmail.com</a>
<a href=""mailto:csh.a.m.e.e.r.71.3@gmail.com"">csh.a.m.e.e.r.71.3@gmail.com</a>
<a href=""mailto:c.sh.ameer7.13@gmail.com"">c.sh.ameer7.13@gmail.com</a>
<a href=""mailto:cs.h.a.m.e.e.r.7.1.3@gmail.com"">cs.h.a.m.e.e.r.7.1.3@gmail.com</a>
<a href=""mailto:cs.ha.m.e.er7.13@gmail.com"">cs.ha.m.e.er7.13@gmail.com</a>
<a href=""mailto:cs.ha.m.ee.r713@gmail.com"">cs.ha.m.ee.r713@gmail.com</a>
<a href=""mailto:cs.ha.me.e.r.71.3@gmail.com"">cs.ha.me.e.r.71.3@gmail.com</a>
<a href=""mailto:csh.a.m.e.er.71.3@gmail.com"">csh.a.m.e.er.71.3@gmail.com</a>
<a href=""mailto:c.sh.a.m.ee.r.7.13@gmail.com"">c.sh.a.m.ee.r.7.13@gmail.com</a>
<a href=""mailto:csh.amee.r.713@gmail.com"">csh.amee.r.713@gmail.com</a>
<a href=""mailto:cs.h.a.m.ee.r.713@gmail.com"">cs.h.a.m.ee.r.713@gmail.com</a>
<a href=""mailto:c.sh.am.e.er7.13@gmail.com"">c.sh.am.e.er7.13@gmail.com</a>
<a href=""mailto:cs.ha.meer7.13@gmail.com"">cs.ha.meer7.13@gmail.com</a>
<a href=""mailto:c.sh.ame.er713@gmail.com"">c.sh.ame.er713@gmail.com</a>
<a href=""mailto:cs.h.am.e.e.r7.13@gmail.com"">cs.h.am.e.e.r7.13@gmail.com</a>
<a href=""mailto:csham.ee.r.71.3@gmail.com"">csham.ee.r.71.3@gmail.com</a>
<a href=""mailto:cshamee.r.7.1.3@gmail.com"">cshamee.r.7.1.3@gmail.com</a>
<a href=""mailto:c.sham.e.er.7.13@gmail.com"">c.sham.e.er.7.13@gmail.com</a>
<a href=""mailto:c.s.h.am.e.e.r.7.13@gmail.com"">c.s.h.am.e.e.r.7.13@gmail.com</a>
<a href=""mailto:c.sh.am.e.er.71.3@gmail.com"">c.sh.am.e.er.71.3@gmail.com</a>
<a href=""mailto:csha.m.ee.r.7.1.3@gmail.com"">csha.m.ee.r.7.1.3@gmail.com</a>
<a href=""mailto:cs.ha.m.e.er7.1.3@gmail.com"">cs.ha.m.e.er7.1.3@gmail.com</a>
<a href=""mailto:c.s.h.ameer.71.3@gmail.com"">c.s.h.ameer.71.3@gmail.com</a>
<a href=""mailto:c.s.h.a.m.eer.7.1.3@gmail.com"">c.s.h.a.m.eer.7.1.3@gmail.com</a>
<a href=""mailto:c.s.ha.me.e.r7.1.3@gmail.com"">c.s.ha.me.e.r7.1.3@gmail.com</a>
<a href=""mailto:csham.e.er.713@gmail.com"">csham.e.er.713@gmail.com</a>
<a href=""mailto:c.s.h.a.me.er71.3@gmail.com"">c.s.h.a.me.er71.3@gmail.com</a>
<a href=""mailto:cs.h.am.e.e.r.7.1.3@gmail.com"">cs.h.am.e.e.r.7.1.3@gmail.com</a>
<a href=""mailto:cs.h.a.m.e.e.r.71.3@gmail.com"">cs.h.a.m.e.e.r.71.3@gmail.com</a>
<a href=""mailto:c.s.ha.me.e.r7.13@gmail.com"">c.s.ha.me.e.r7.13@gmail.com</a>
<a href=""mailto:cs.ha.m.eer7.1.3@gmail.com"">cs.ha.m.eer7.1.3@gmail.com</a>
<a href=""mailto:csh.ame.er71.3@gmail.com"">csh.ame.er71.3@gmail.com</a>
<a href=""mailto:cs.h.am.e.er.7.13@gmail.com"">cs.h.am.e.er.7.13@gmail.com</a>
<a href=""mailto:cs.h.a.m.ee.r7.1.3@gmail.com"">cs.h.a.m.ee.r7.1.3@gmail.com</a>
<a href=""mailto:cs.ham.ee.r71.3@gmail.com"">cs.ham.ee.r71.3@gmail.com</a>
<a href=""mailto:c.sh.a.me.er.71.3@gmail.com"">c.sh.a.me.er.71.3@gmail.com</a>
<a href=""mailto:csha.me.e.r.7.1.3@gmail.com"">csha.me.e.r.7.1.3@gmail.com</a>
<a href=""mailto:c.shameer713@gmail.com"">c.shameer713@gmail.com</a>
<a href=""mailto:c.sha.mee.r.713@gmail.com"">c.sha.mee.r.713@gmail.com</a>
<a href=""mailto:csh.a.m.eer713@gmail.com"">csh.a.m.eer713@gmail.com</a>
<a href=""mailto:cs.h.a.mee.r.7.1.3@gmail.com"">cs.h.a.mee.r.7.1.3@gmail.com</a>
<a href=""mailto:cs.h.am.eer.713@gmail.com"">cs.h.am.eer.713@gmail.com</a>
<a href=""mailto:c.s.h.a.m.ee.r713@gmail.com"">c.s.h.a.m.ee.r713@gmail.com</a>
<a href=""mailto:cs.ha.me.er7.1.3@gmail.com"">cs.ha.me.er7.1.3@gmail.com</a>
<a href=""mailto:cs.ha.m.eer.713@gmail.com"">cs.ha.m.eer.713@gmail.com</a>
<a href=""mailto:c.sh.a.mee.r7.1.3@gmail.com"">c.sh.a.mee.r7.1.3@gmail.com</a>
<a href=""mailto:cs.ha.m.e.e.r7.1.3@gmail.com"">cs.ha.m.e.e.r7.1.3@gmail.com</a>
<a href=""mailto:c.sh.ameer71.3@gmail.com"">c.sh.ameer71.3@gmail.com</a>
<a href=""mailto:csh.ame.e.r71.3@gmail.com"">csh.ame.e.r71.3@gmail.com</a>
<a href=""mailto:c.s.h.ameer.7.1.3@gmail.com"">c.s.h.ameer.7.1.3@gmail.com</a>
<a href=""mailto:c.s.ha.me.er7.13@gmail.com"">c.s.ha.me.er7.13@gmail.com</a>
<a href=""mailto:c.s.hame.e.r.713@gmail.com"">c.s.hame.e.r.713@gmail.com</a>
<a href=""mailto:cs.hame.e.r.71.3@gmail.com"">cs.hame.e.r.71.3@gmail.com</a>
<a href=""mailto:c.s.ham.e.e.r.71.3@gmail.com"">c.s.ham.e.e.r.71.3@gmail.com</a>
<a href=""mailto:csh.a.m.e.er7.13@gmail.com"">csh.a.m.e.er7.13@gmail.com</a>
<a href=""mailto:csh.a.me.er7.13@gmail.com"">csh.a.me.er7.13@gmail.com</a>
<a href=""mailto:c.sh.a.me.er.713@gmail.com"">c.sh.a.me.er.713@gmail.com</a>
<a href=""mailto:cs.h.ame.e.r7.13@gmail.com"">cs.h.ame.e.r7.13@gmail.com</a>
<a href=""mailto:c.s.h.a.mee.r.713@gmail.com"">c.s.h.a.mee.r.713@gmail.com</a>
<a href=""mailto:c.sha.me.er.7.13@gmail.com"">c.sha.me.er.7.13@gmail.com</a>
<a href=""mailto:c.s.h.a.m.e.er.713@gmail.com"">c.s.h.a.m.e.er.713@gmail.com</a>
<a href=""mailto:c.sh.a.me.e.r.71.3@gmail.com"">c.sh.a.me.e.r.71.3@gmail.com</a>
<a href=""mailto:cs.hame.er.7.13@gmail.com"">cs.hame.er.7.13@gmail.com</a>
<a href=""mailto:cs.h.ame.er.7.13@gmail.com"">cs.h.ame.er.7.13@gmail.com</a>
<a href=""mailto:cs.h.a.m.e.er7.1.3@gmail.com"">cs.h.a.m.e.er7.1.3@gmail.com</a>
<a href=""mailto:c.sham.e.er.71.3@gmail.com"">c.sham.e.er.71.3@gmail.com</a>
<a href=""mailto:c.s.h.am.eer.713@gmail.com"">c.s.h.am.eer.713@gmail.com</a>
<a href=""mailto:csh.am.e.e.r.7.13@gmail.com"">csh.am.e.e.r.7.13@gmail.com</a>
<a href=""mailto:cs.h.ameer7.13@gmail.com"">cs.h.ameer7.13@gmail.com</a>
<a href=""mailto:c.shame.e.r.7.13@gmail.com"">c.shame.e.r.7.13@gmail.com</a>
<a href=""mailto:c.s.hame.er.7.13@gmail.com"">c.s.hame.er.7.13@gmail.com</a>
<a href=""mailto:c.sha.m.e.e.r.7.13@gmail.com"">c.sha.m.e.e.r.7.13@gmail.com</a>
<a href=""mailto:cshamee.r.7.13@gmail.com"">cshamee.r.7.13@gmail.com</a>
<a href=""mailto:cs.h.am.e.er71.3@gmail.com"">cs.h.am.e.er71.3@gmail.com</a>
<a href=""mailto:c.s.ha.m.eer7.13@gmail.com"">c.s.ha.m.eer7.13@gmail.com</a>
<a href=""mailto:csh.a.mee.r7.13@gmail.com"">csh.a.mee.r7.13@gmail.com</a>
<a href=""mailto:cs.hame.er7.13@gmail.com"">cs.hame.er7.13@gmail.com</a>
<a href=""mailto:c.sha.m.ee.r713@gmail.com"">c.sha.m.ee.r713@gmail.com</a>
<a href=""mailto:c.sh.am.ee.r713@gmail.com"">c.sh.am.ee.r713@gmail.com</a>
<a href=""mailto:cs.ha.mee.r7.13@gmail.com"">cs.ha.mee.r7.13@gmail.com</a>
<a href=""mailto:c.shamee.r713@gmail.com"">c.shamee.r713@gmail.com</a>
<a href=""mailto:csh.a.m.e.er7.1.3@gmail.com"">csh.a.m.e.er7.1.3@gmail.com</a>
<a href=""mailto:cs.ha.m.e.e.r.7.13@gmail.com"">cs.ha.m.e.e.r.7.13@gmail.com</a>
<a href=""mailto:csh.am.eer.71.3@gmail.com"">csh.am.eer.71.3@gmail.com</a>
<a href=""mailto:c.s.h.a.m.e.e.r713@gmail.com"">c.s.h.a.m.e.e.r713@gmail.com</a>
<a href=""mailto:c.s.h.a.me.er.7.13@gmail.com"">c.s.h.a.me.er.7.13@gmail.com</a>
<a href=""mailto:csh.a.me.er.7.1.3@gmail.com"">csh.a.me.er.7.1.3@gmail.com</a>
<a href=""mailto:csha.me.e.r7.1.3@gmail.com"">csha.me.e.r7.1.3@gmail.com</a>
<a href=""mailto:cs.ham.e.er.71.3@gmail.com"">cs.ham.e.er.71.3@gmail.com</a>
<a href=""mailto:c.sh.a.m.ee.r7.1.3@gmail.com"">c.sh.a.m.ee.r7.1.3@gmail.com</a>
<a href=""mailto:csh.a.me.er.713@gmail.com"">csh.a.me.er.713@gmail.com</a>
<a href=""mailto:csh.a.mee.r.71.3@gmail.com"">csh.a.mee.r.71.3@gmail.com</a>
<a href=""mailto:c.sha.mee.r.71.3@gmail.com"">c.sha.mee.r.71.3@gmail.com</a>
<a href=""mailto:cs.ham.eer.7.13@gmail.com"">cs.ham.eer.7.13@gmail.com</a>
<a href=""mailto:c.s.h.a.meer71.3@gmail.com"">c.s.h.a.meer71.3@gmail.com</a>
<a href=""mailto:csha.me.er.71.3@gmail.com"">csha.me.er.71.3@gmail.com</a>
<a href=""mailto:c.sh.amee.r.713@gmail.com"">c.sh.amee.r.713@gmail.com</a>
<a href=""mailto:c.s.h.am.ee.r.71.3@gmail.com"">c.s.h.am.ee.r.71.3@gmail.com</a>
<a href=""mailto:cs.ham.e.er.7.13@gmail.com"">cs.ham.e.er.7.13@gmail.com</a>
<a href=""mailto:csham.ee.r713@gmail.com"">csham.ee.r713@gmail.com</a>
<a href=""mailto:c.s.h.a.m.ee.r7.1.3@gmail.com"">c.s.h.a.m.ee.r7.1.3@gmail.com</a>
<a href=""mailto:cs.h.a.me.er7.1.3@gmail.com"">cs.h.a.me.er7.1.3@gmail.com</a>
<a href=""mailto:c.s.ham.e.e.r713@gmail.com"">c.s.ham.e.e.r713@gmail.com</a>
<a href=""mailto:c.sha.m.e.er7.1.3@gmail.com"">c.sha.m.e.er7.1.3@gmail.com</a>
<a href=""mailto:c.s.h.am.ee.r.7.13@gmail.com"">c.s.h.am.ee.r.7.13@gmail.com</a>
<a href=""mailto:c.shamee.r.71.3@gmail.com"">c.shamee.r.71.3@gmail.com</a>
<a href=""mailto:c.s.h.am.ee.r.713@gmail.com"">c.s.h.am.ee.r.713@gmail.com</a>
<a href=""mailto:csham.e.e.r7.13@gmail.com"">csham.e.e.r7.13@gmail.com</a>
<a href=""mailto:c.sh.a.m.ee.r71.3@gmail.com"">c.sh.a.m.ee.r71.3@gmail.com</a>
<a href=""mailto:c.sha.mee.r.7.13@gmail.com"">c.sha.mee.r.7.13@gmail.com</a>
<a href=""mailto:cs.h.a.me.er71.3@gmail.com"">cs.h.a.me.er71.3@gmail.com</a>
<a href=""mailto:c.s.h.a.m.e.e.r7.1.3@gmail.com"">c.s.h.a.m.e.e.r7.1.3@gmail.com</a>
<a href=""mailto:c.s.h.a.m.e.er.71.3@gmail.com"">c.s.h.a.m.e.er.71.3@gmail.com</a>
<a href=""mailto:c.sh.a.m.ee.r.71.3@gmail.com"">c.sh.a.m.ee.r.71.3@gmail.com</a>
<a href=""mailto:c.sham.e.e.r.7.1.3@gmail.com"">c.sham.e.e.r.7.1.3@gmail.com</a>
<a href=""mailto:cs.ham.e.e.r7.13@gmail.com"">cs.ham.e.e.r7.13@gmail.com</a>
<a href=""mailto:cs.h.ameer.713@gmail.com"">cs.h.ameer.713@gmail.com</a>
<a href=""mailto:c.sh.a.meer7.1.3@gmail.com"">c.sh.a.meer7.1.3@gmail.com</a>
<a href=""mailto:c.sha.me.er7.13@gmail.com"">c.sha.me.er7.13@gmail.com</a>
<a href=""mailto:c.sha.me.e.r7.1.3@gmail.com"">c.sha.me.e.r7.1.3@gmail.com</a>
<a href=""mailto:c.s.hamee.r.7.1.3@gmail.com"">c.s.hamee.r.7.1.3@gmail.com</a>
<a href=""mailto:cshamee.r.71.3@gmail.com"">cshamee.r.71.3@gmail.com</a>
<a href=""mailto:csh.a.me.e.r.7.13@gmail.com"">csh.a.me.e.r.7.13@gmail.com</a>
<a href=""mailto:csha.me.e.r71.3@gmail.com"">csha.me.e.r71.3@gmail.com</a>
<a href=""mailto:cs.h.a.mee.r7.13@gmail.com"">cs.h.a.mee.r7.13@gmail.com</a>
<a href=""mailto:cs.h.amee.r.7.13@gmail.com"">cs.h.amee.r.7.13@gmail.com</a>
<a href=""mailto:cs.ha.me.er.71.3@gmail.com"">cs.ha.me.er.71.3@gmail.com</a>
<a href=""mailto:csh.am.e.er7.13@gmail.com"">csh.am.e.er7.13@gmail.com</a>
<a href=""mailto:cs.h.amee.r7.13@gmail.com"">cs.h.amee.r7.13@gmail.com</a>
<a href=""mailto:c.sha.m.e.er.7.1.3@gmail.com"">c.sha.m.e.er.7.1.3@gmail.com</a>
<a href=""mailto:c.s.h.a.meer7.13@gmail.com"">c.s.h.a.meer7.13@gmail.com</a>
<a href=""mailto:c.sh.a.me.er.7.1.3@gmail.com"">c.sh.a.me.er.7.1.3@gmail.com</a>
<a href=""mailto:c.s.ham.e.e.r.713@gmail.com"">c.s.ham.e.e.r.713@gmail.com</a>
<a href=""mailto:c.sh.ame.er7.13@gmail.com"">c.sh.ame.er7.13@gmail.com</a>
<a href=""mailto:cs.h.am.e.er7.13@gmail.com"">cs.h.am.e.er7.13@gmail.com</a>
<a href=""mailto:csh.a.me.er7.1.3@gmail.com"">csh.a.me.er7.1.3@gmail.com</a>
<a href=""mailto:cshameer.7.13@gmail.com"">cshameer.7.13@gmail.com</a>
<a href=""mailto:c.sh.a.m.e.e.r7.1.3@gmail.com"">c.sh.a.m.e.e.r7.1.3@gmail.com</a>
<a href=""mailto:c.sh.am.eer7.13@gmail.com"">c.sh.am.eer7.13@gmail.com</a>
<a href=""mailto:c.sh.a.mee.r71.3@gmail.com"">c.sh.a.mee.r71.3@gmail.com</a>
<a href=""mailto:csh.ame.er7.1.3@gmail.com"">csh.ame.er7.1.3@gmail.com</a>
<a href=""mailto:cs.h.a.mee.r.713@gmail.com"">cs.h.a.mee.r.713@gmail.com</a>
<a href=""mailto:cs.h.ame.e.r.71.3@gmail.com"">cs.h.ame.e.r.71.3@gmail.com</a>
<a href=""mailto:cs.ham.e.e.r7.1.3@gmail.com"">cs.ham.e.e.r7.1.3@gmail.com</a>
<a href=""mailto:c.s.h.a.mee.r7.13@gmail.com"">c.s.h.a.mee.r7.13@gmail.com</a>
<a href=""mailto:csha.meer7.13@gmail.com"">csha.meer7.13@gmail.com</a>
<a href=""mailto:c.sha.m.ee.r.7.13@gmail.com"">c.sha.m.ee.r.7.13@gmail.com</a>
<a href=""mailto:c.s.ha.m.ee.r.713@gmail.com"">c.s.ha.m.ee.r.713@gmail.com</a>
<a href=""mailto:c.s.ha.m.ee.r713@gmail.com"">c.s.ha.m.ee.r713@gmail.com</a>
<a href=""mailto:c.s.h.ame.e.r713@gmail.com"">c.s.h.ame.e.r713@gmail.com</a>
<a href=""mailto:c.sha.m.e.er.713@gmail.com"">c.sha.m.e.er.713@gmail.com</a>
<a href=""mailto:c.sha.mee.r7.1.3@gmail.com"">c.sha.mee.r7.1.3@gmail.com</a>
<a href=""mailto:csha.m.e.er.713@gmail.com"">csha.m.e.er.713@gmail.com</a>
<a href=""mailto:csha.mee.r.7.13@gmail.com"">csha.mee.r.7.13@gmail.com</a>
<a href=""mailto:c.sh.a.mee.r.713@gmail.com"">c.sh.a.mee.r.713@gmail.com</a>
<a href=""mailto:c.sha.m.ee.r.713@gmail.com"">c.sha.m.ee.r.713@gmail.com</a>
<a href=""mailto:c.shame.e.r71.3@gmail.com"">c.shame.e.r71.3@gmail.com</a>
<a href=""mailto:cs.h.a.m.eer71.3@gmail.com"">cs.h.a.m.eer71.3@gmail.com</a>
<a href=""mailto:csham.e.er7.1.3@gmail.com"">csham.e.er7.1.3@gmail.com</a>
<a href=""mailto:csha.m.e.er7.13@gmail.com"">csha.m.e.er7.13@gmail.com</a>
<a href=""mailto:c.s.h.ameer.713@gmail.com"">c.s.h.ameer.713@gmail.com</a>
<a href=""mailto:c.sh.a.me.er71.3@gmail.com"">c.sh.a.me.er71.3@gmail.com</a>
<a href=""mailto:cs.ha.m.e.er.71.3@gmail.com"">cs.ha.m.e.er.71.3@gmail.com</a>
<a href=""mailto:cs.hame.er7.1.3@gmail.com"">cs.hame.er7.1.3@gmail.com</a>
<a href=""mailto:c.shameer7.13@gmail.com"">c.shameer7.13@gmail.com</a>
<a href=""mailto:csh.am.e.er.713@gmail.com"">csh.am.e.er.713@gmail.com</a>"
LBJ2SDba,Tabindex,jaideep06,PHP,Saturday 18th of November 2023 01:26:23 AM CDT,"<?php function add_tabindex() { ?> 
	          <script>
			  		$(function() {
    						$('.rank-math-question').attr('tabindex', function(index='0', attr) {
        							return index++;
    						});
					});
			  </script>
<?php } 
add_tabindex(); ?>"
GNfCXiTb,Deutsch lernen mit System | Wortliste (Glossar) - Deutsch Englisch,bpmircea,BrainFuck,Saturday 18th of November 2023 01:14:39 AM CDT,"Learning German systematically – Deutsch lernen mit System
https://www.study-german.net/

The best system for learning German
 • Fast and efficient.
 • Structured conversations and pick-up-and-use syllabus.
 • Continually expanding vocabulary.
 • Clearly structured grammar aimed at improving your communication skills.
 • ""Deutsch lernen mit System – A1.1 and A1.2 - A2.1"" enables you to master everyday conversations.
 • ""Deutsch lernen mit System – A2.2 and B1-B2"" introduces you to the German B1 level and prepares you efficiently for B2.
 • All volumes serve as a concise introduction to the German language, either for self-study, as a compact language course for learners who aim at fast progress or as complementary material in German classes.


Wortliste (Glossar) - Deutsch Englisch:
https://filecrypt.cc/Container/46C385FCB3.html"
6GJR8s3P,Zepto,nanne,JSON,Saturday 18th of November 2023 12:37:49 AM CDT," {  GET_OTP: ""v1/user/customer/send-otp-sms"",
   VERIFY_OTP: ""v1/user/customer/verify-otp"",
  	INTERNAL_VERIFY_OTP: ""api/auth/verifyOtp"",
            LOGOUT: ""api/auth/logout"",
            USER_CONFIG_VALUES: ""v2/user/config/values/"",
            USER_CONFIG_VERSION: e=>""v1/user/config/version/?current_version="".concat(e),
            UPDATE_USER: ""v1/user/customer/"",
            INTERNAL_UPDATE_USER: ""api/auth/updateUser"",
            RECOMMENDED_COUPON: ""v1/order/cart/recommended-coupon"",
            CART: ""v1/order/cart/"",
            GET_COUPONS: ""v2/order/cart/coupons"",
            APPLY_COUPON: ""v1/order/cart/apply-coupon"",
            REMOVE_COUPON: ""v1/order/cart/remove-coupon"",
            CREATE_ORDER: ""v2/order/"",
            AGE_CONSENT: ""v1/order/cart/declare-minimum-age/"",
            INITIATE_JUSPAY_SDK: ""v2/payment/initiate-sdk-payload/"",
            GET_ORDER_STATUS: e=>""v2/order/"".concat(e, ""/status/""),
            GET_ORDER_DETAIL: e=>""v1/order/"".concat(e, ""/""),
            GET_RIDER_VIRTUAL_PHONE_NUMBER: e=>""v1/order/"".concat(e, ""/rider-virtual-phone-number/""),
            GET_ONGOING_ORDER: ""v2/order/last-ongoing-order/"",
            ORDER_HISTORY: ""v2/order/"",
            REFUNDS: ""v1/user/customer/refunds"",
            GET_STORE_DETAILS: e=>""v1/inventory/store/"".concat(e, ""/detailed-info""),
            GET_PAYMENT_STATUS: e=>""v1/order/"".concat(e, ""/payment-status/""),
            POST_PAYMENT_STATUS: e=>""v1/order/"".concat(e, ""/payment/""),
            GET_WALLET_TRANSACTIONS: ""/api/wallet/transactions"",
            GET_WALLET_TRANSACTIONS_ALL: ""api/wallet/transactions/all"",
            POST_APPLY_VOUCHER: e=>""api/redeem-voucher/"".concat(e),
            POST_RECOMMENDED_COUPONS: ""v1/order/cart/recommended-upsell-banners"",
            POST_INELIGIBLE_PRODUCTS: ""v1/order/cart/ineligible-store-products"",
            NO_BAG_PREFERENCE: ""v1/order/cart/no-bag-preference""}"
RBqdv7kF,wm_wayland,koupuh,Python,Saturday 18th of November 2023 12:34:01 AM CDT,""""""""" Module for manipulating windows in a Gnome+Wayland\
    environment.

Uses the Gnome extension ""Window Calls"" as a backend to send dbus calls.\
Multiple monitors are not explicitly supported but might work anyway. Only\
operatoes on windows in the current workspace.  
""""""

import os
import json
import time
import subprocess
import shlex
from jtools.jconsole import test, ptest, zen
from time import sleep


# methods of the Gnome Extension ""Window Calls""
methods = {x: ['--method', f'org.gnome.Shell.Extensions.Windows.{x}'] for x in 
           ['List', 'Details', 'GetTitle', 'Maximize', 'Minimize',
            'Resize', 'MoveResize', 'Move',
            'Unmaximize', 'Unminimize', 'Activate', 'Close',]}

basedir = os.path.dirname(__file__)
with open(os.path.join(basedir, '../../../resources/paths.json')) as fp:
    paths = json.load(fp)


def win_list():
    """"""
    Get info on all currently open windows
    """"""  
    output = _run_gdbus(methods['List'])[2:-3]    
    ls = json.loads(output)
    if output:        
        for x in range(len(ls)):
            args = methods['GetTitle'] + [ls[x]['id']]
            title = _run_gdbus(args)[2:-3]
            ls[x]['title'] = title
    return ls

def win_exists(title):
    """"""
    Return True if window exists in the 1st workspace. 
    
    @param title: window title to match against (as case-insensitive substring
    match). For case-insensitive exact match based on ""window manager class""
    prepend title with ""wm_class_""
    """"""
    if win_id(title):
        return True
    else:
        return False
    
def win_id(title):
    """"""return the id of the window with this title if it exists, else None

    @param title: window title to match against (as case-insensitive substring match). 
    For case-insensitive exact match based on ""window manager class"" prepend title with ""wm_class_""
    """"""
    # '' would otherwise match paths.json entries that have no value for the 
    # title key, which is not desirable. 
    if title == '': 
        return None
    ls = win_list()
    for x in ls:
        if not x['in_current_workspace']: # only consider windows on first workspace
            continue
        if title.startswith('wm_class_'):
            newtitle = title.replace('wm_class_', '').casefold()
            match = str(x['wm_class']).casefold() 
            if newtitle == match:
                return str(x['id'])
        else:
            if title.casefold() in x['title'].casefold():
                return str(x['id'])
    return None


def win_wait(title, refresh_rate=0.1):
    """"""
    Wait until the specified window exists. 

    @param title: window title to match against (as case-insensitive substring match). 
    For case-insensitive exact match based on ""window manager class"" prepend title with ""wm_class_""
    @param refresh_rate number of seconds between calls to win_exists and thus ""wmctrl -l"". Default is 0.1
    """"""    
    while not win_exists(title):
        sleep(refresh_rate)

def win_activate(title):
    """"""
    Activate the specified window.

    @param title: window title to match against (as case-insensitive substring match). 
    For case-insensitive exact match based on ""window manager class"" prepend title with ""wm_class_""
    """"""
    id_ = win_id(title)
    if id_ is None:
        return
    args = methods['Activate'] + [id_]
    _run_gdbus(args)

def win_close(title):
    """"""
    Close the specified window gracefully

    @param title: window title to match against (as case-insensitive substring match). 
    For case-insensitive exact match based on ""window manager class"" prepend title with ""wm_class_""
    """"""
    id_ = win_id(title)
    if id_ is None:
        return
    args = methods['Close'] + [id_]
    _run_gdbus(args)

    

# base gdbus call to the ""Windows Calls"" extension. Split into a list for the Popen function. 
gdbus = shlex.split('gdbus call --session --dest org.gnome.Shell --object-path /org/gnome/Shell/Extensions/Windows')
def _run_gdbus(args):
    args = [str(x) for x in args]
    try:
        with subprocess.Popen(gdbus + args, stdout=subprocess.PIPE) as p:
            output = p.communicate()[0].decode()[:-1]  # Drop trailing newline
    except FileNotFoundError:
        return 1, 'ERROR: gdbus not available'

    return output


if __name__ == '__main__':

    
    test(win_list())
"
