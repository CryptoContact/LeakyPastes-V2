id,title,username,language,date,content
WtCsC4zA,Wolf In Sheep's Clothing,Osiris1002,Python,Wednesday 10th of April 2024 12:59:50 PM CDT,"text = input()

check_for_wolf = text.split("", "")
check_for_number = len(check_for_wolf) - 1

for wolf in check_for_wolf:

    if wolf == ""wolf"" and check_for_number == 0:
        text_to_print = ""Please go away and stop eating my sheep""

    elif wolf == ""wolf"":
        text_to_print = f""Oi! Sheep number {check_for_number}! You are about to be eaten by a wolf!""

    check_for_number -= 1

print(text_to_print)"
XhkuhdkQ,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,x2w,GetText,Wednesday 10th of April 2024 12:55:28 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing

Working as of:
10 April 2024"
pA8CDveC,Untitled,CalinBedea,C#,Wednesday 10th of April 2024 12:47:47 PM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Drawing.Text;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AplicatieFreeBook
{
    public partial class Form4 : Form
    {
        public Form4()
        {
            InitializeComponent();
        }

        private static int i; //pentru adaugarea cartilor in imprumuturi
        private static bool OK = true; //pentru verificarea cartilor in imprumuturi

        private void Form4_Load(object sender, EventArgs e)
        {
            SqlConnection con = new SqlConnection(Form1.constr);
            con.Open();

            label2.Text = Form2.curentemail;
            dataGridView1.ReadOnly = true;
            dataGridView2.ReadOnly = true;

            SqlDataAdapter sda = new SqlDataAdapter(@""SELECT titlu, autor, gen FROM carti"", con);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            //toate cartile

            SqlDataAdapter sda2 = new SqlDataAdapter(@""SELECT c.titlu 
                                                    FROM utilizatori u 
                                                    JOIN imprumut i ON(u.email = i.email) 
                                                    JOIN carti c ON(c.id_carte = i.id_carte)
                                                    WHERE u.email = '"" + Form2.curentemail + ""'"", con);
            DataTable dt1 = new DataTable();
            sda2.Fill(dt1);
            //toate cartile imprumutate de curentemail

            foreach(DataRow dr in dt.Rows)
            {
                OK = true; //daca a imprumutat ceva
                
                foreach(DataRow dr1 in dt1.Rows)
                {
                    if (dr[""titlu""].ToString() == dr1[""titlu""].ToString())
                    {
                        OK = false; //daca gaseste cartea in imprumuturi ok false si nu adauga cartea
                    }
                }

                if(OK == true) //daca cartea nu este in imprumuturi ok true si adauga cartea in imprumuturi
                {
                    dataGridView1.Rows.Add();
                    dataGridView1.Rows[i].Cells[0].Value = dr[""titlu""].ToString();
                    dataGridView1.Rows[i].Cells[1].Value = dr[""autor""].ToString();
                    dataGridView1.Rows[i].Cells[2].Value = dr[""gen""].ToString();
                    i++;
                    //adaugarea cartii + creste indexul
                }
            }

            con.Close();

            cerinta2();
            cerinta3();
           
            chartpie();


        }

        private static int k; //nr carti imprumutate
        private static int imp; //pentru coloane
        private static int index; //index imprumut
        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView1.Rows[e.RowIndex].Cells[2] != null)
            {
                int idcarte;
                string titlu = dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString();
                DateTime dt = DateTime.Now;
                DateTime dt1 = new DateTime();
                SqlConnection con = new SqlConnection(Form1.constr);

                if (k < 3) //daca are mai putin de 3 imprumuturi
                {
                    con.Open();

                    SqlCommand cmd = new SqlCommand(@""SELECT id_carte FROM carti WHERE titlu ='"" + titlu + ""'"", con);
                    idcarte = int.Parse(cmd.ExecuteScalar().ToString()); //returneaza prima instanta titlu = titlu
                                                                         //string devine int

                    cmd = new SqlCommand(@""INSERT INTO imprumut(id_carte, email, data_imprumut) VALUES (@1, @2, @3)"", con);

                    cmd.Parameters.AddWithValue(""1"", idcarte);
                    cmd.Parameters.AddWithValue(""2"", Form2.curentemail);
                    cmd.Parameters.AddWithValue(""3"", dt);

                    cmd.ExecuteNonQuery();
                    cmd.Dispose();
                    con.Close();
                    //^ adaugam in imprumut

                    dataGridView2.Rows.Add();
                    index++;
                    dataGridView2.Rows[imp].Cells[0].Value = index.ToString(); //index
                    dataGridView2.Rows[imp].Cells[1].Value = dataGridView1.Rows[e.RowIndex].Cells[0].Value.ToString(); //titlu
                    dataGridView2.Rows[imp].Cells[2].Value = dataGridView1.Rows[e.RowIndex].Cells[1].Value.ToString(); //autor
                    dataGridView2.Rows[imp].Cells[3].Value = dt.ToString(); //data imprumut
                    dt1 = dt.AddDays(30); //+30 zile imprumut
                    dataGridView2.Rows[imp].Cells[4].Value = dt1.ToString(); //data disponibilitate
                    imp++;
                    //^ adaugam in gridview imprumut

                    if (dt1 < dt) //daca a trecut termenul
                    {
                        dataGridView2.Rows[index - 1].DefaultCellStyle.BackColor = Color.Red;
                    }
                    else //daca nu a trecut termenul
                    {
                        dataGridView2.Rows[index - 1].DefaultCellStyle.BackColor = Color.Green;
                        k++; //creste nr imprumuturi

                        if (k == 0)
                        {
                            label4.Text = ""0/3"";
                        }
                        else if (k == 1)
                        {
                            label4.Text = ""1/3"";
                            progressBar1.Value = 1;
                        }
                        else if (k == 2)
                        {
                            label4.Text = ""2/3"";
                            progressBar1.Value = 2;
                        }
                        else if (k == 3)
                        {
                            label4.Text = ""3/3"";
                            progressBar1.Value = 3;
                        }
                        //^progressbar
                    }

                    dataGridView1.Rows.Remove(dataGridView1.Rows[e.RowIndex]);  //se sterge cartea din disponibile
                }
                else MessageBox.Show(""Imprumuturi disponibile maxime pentru clientul logat""); //daca are 3 imprumuturi
            }
        }

        private void cerinta2() //adauga imprumuturile facute de curentemail
                                //trecute de termen (rosii)
        {
            DateTime d = new DateTime();
            DateTime d1 = new DateTime();

            SqlConnection con = new SqlConnection(Form1.constr);
            con.Open();
            SqlDataAdapter sda = new SqlDataAdapter(@""SELECT c.titlu, c.autor, i.data_imprumut
                                                    FROM utilizatori u
                                                    JOIN imprumut i ON (u.email = i.email)
                                                    JOIN carti c ON(i.id_carte = c.id_carte)
                                                    WHERE u.email ='"" + Form2.curentemail + ""'"", con);
                                                    //^ cartile imprumutate de curentemail
            DataTable dt = new DataTable();
            sda.Fill(dt);

            foreach(DataRow dr in dt.Rows) 
            {
                dataGridView2.Rows.Add();
                index++;

                dataGridView2.Rows[imp].Cells[0].Value = index.ToString();
                dataGridView2.Rows[imp].Cells[1].Value = dr[""titlu""].ToString();
                dataGridView2.Rows[imp].Cells[2].Value = dr[""autor""].ToString();
                dataGridView2.Rows[imp].Cells[3].Value = dr[""data_imprumut""].ToString();

                d1 = DateTime.Parse(dr[""data_imprumut""].ToString(), null);
                d = d1.AddDays(30);

                dataGridView2.Rows[imp].Cells[4].Value = d.ToString();
                
                imp++;
                
                //^ folosim index ul de dinainte pentru a nu reincepe de la 0 numaratoarea
                //  prima oara apar imprumuturile verzi apoi cele rosii

            }

            con.Close();

            foreach(DataGridViewRow r in dataGridView2.Rows)
            {
                if (r.Cells[4].Value != null)
                {
                    DateTime dt1 = new DateTime();
                    DateTime dt2 = DateTime.Now;

                    dt1 = DateTime.Parse(r.Cells[4].Value.ToString());

                    if(dt1 < dt2) //daca data disponibilitatii < data curenta
                    {
                        r.DefaultCellStyle.BackColor = Color.Red;
                    }
                    else //invers
                    {
                        r.DefaultCellStyle.BackColor = Color.Green;
                    }
                }
            }
        }

        private void cerinta3() //adauga imprumuturile verzi la contor
                                //si la progressbar
        {
            foreach(DataGridViewRow r in dataGridView2.Rows)
            {
                if (r.Cells[4].Value != null)
                {
                    if(r.DefaultCellStyle.BackColor == Color.Green) 
                    {
                        k++;
                    }
                }
            }

            if(k == 0)
            {
                label4.Text = ""0/3"";
            }
            else if (k == 1)
            {
                label4.Text = ""1/3"";
                progressBar1.Value = 1;
            }
            else if (k == 2)
            {
                label4.Text = ""2/3"";
                progressBar1.Value = 2;
            }
            else if (k == 3) 
            {
                label4.Text = ""3/3"";
                progressBar1.Value = 3;
            }
        }

        public static int carteid = new int();
        private void dataGridView2_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (dataGridView2.Rows[e.RowIndex].DefaultCellStyle.BackColor == Color.Red) //daca e rosu
            {
                MessageBox.Show(""Perioada imprumutului expirata"");
            }
            else //daca e verde
            {
                SqlConnection con = new SqlConnection(Form1.constr);
                con.Open();

                SqlDataAdapter sda = new SqlDataAdapter(@""SELECT id_carte FROM carti WHERE titlu ='"" + dataGridView2.Rows[e.RowIndex].Cells[1].Value.ToString() + ""'"", con);
                DataTable dt = new DataTable();
                sda.Fill(dt);

                foreach(DataRow dr in dt.Rows) 
                {
                    string a = dr[""id_carte""].ToString();
                    carteid = int.Parse(a);
                }

                this.Hide();
                Form5 f = new Form5();
                f.Show();
            }
        }

        private void button1_Click(object sender, EventArgs e) //buton exit
        {
            Application.Exit();
        }

        private int[] useri = new int[12]; //! neaparat new int pentru a nu fi null !
        string[] luni = { ""Ian"", ""Feb"", ""Mar"", ""Apr"", ""Mai"", ""Iul"", ""Iun"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec"" };
        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e) //la schimbarea anului
        {
            chart1.ChartAreas[0].AxisX.Interval = 1; //pentru a arata fiecare luna si nu din 2 in 2

            chart1.Series[""Luna""].Points.Clear(); //?

            if(comboBox1.SelectedItem != null)
            {
                chart1.ChartAreas[0].AxisY.Title = ""Numarul utilizatorilor anului curent - "" + comboBox1.SelectedItem.ToString();
            }//scrie in stanga pe axa Oy 

            chart1.ChartAreas[0].AxisX.MajorGrid.LineWidth = 0;
            chart1.ChartAreas[0].AxisY.MajorGrid.LineWidth = 0; //< sa nu aiba linii

            DateTime d = new DateTime();

            for (int i = 0; i < 12; i++)
            {
                useri[i] = 0; //vector de frecventa
            }

            SqlConnection con = new SqlConnection(Form1.constr);

            if(comboBox1.SelectedItem != null)
            {
                con.Open();

                SqlDataAdapter sda = new SqlDataAdapter(@""SELECT data_imprumut FROM imprumut"", con);
                DataTable dt = new DataTable();
                sda.Fill(dt);
                //^ selectam datele imprumut

                foreach(DataRow dr in dt.Rows) 
                {
                    d = DateTime.Parse(dr[""data_imprumut""].ToString());

                    if(d.Year.ToString() == comboBox1.SelectedItem.ToString()) //impartim pe ani
                    {
                        int luna = new int();
                        luna = int.Parse(d.Month.ToString()); //impartim pe luni
                        useri[luna - 1]++;
                    }
                }

                con.Close();

                for(int i = 0; i < 12; i++) 
                {
                    chart1.Series[""Luna""].Points.AddXY(luni[i], useri[i]); //adauga un punct de coord X, Y in chart

                    chart1.Update();
                }

                for(int i = 0; i < 12; i++)
                {
                    chart1.Series[""Luna""].Points[i].Label = useri[i].ToString(); //pune label deasupra
                    chart1.Update();
                }
            }


        }

        private int[] cate = new int[255]; //vector de frecventa imprumut carti
        private string[] cartea = new string[255]; //titlurile cartilor
        private int kr; //cate carti
        private int i2; //index pentru vectorul de frecventa
        private void chartpie()
        {
            SqlConnection con = new SqlConnection(Form1.constr);
            con.Open();

            SqlDataAdapter sda = new SqlDataAdapter(@""SELECT titlu, id_carte FROM carti"", con);
            DataTable dt = new DataTable();
            sda.Fill(dt);
            //^ selectam toate cartile

            foreach(DataRow dr in dt.Rows) 
            {
                int kt = new int();
                SqlDataAdapter sda2 = new SqlDataAdapter(@""SELECT id_carte FROM imprumut"", con);
                DataTable dt2 = new DataTable();
                sda2.Fill(dt2);
                //^ selectam toate cartile imprumutate

                foreach(DataRow dr2 in  dt2.Rows)
                {
                    if (dr[""id_carte""].ToString() == dr2[""id_carte""].ToString()) //cand o carte e gasita la imprumuturi
                    {
                        string a = dr[""titlu""].ToString();
                        cartea[kr] = a; //punem cartea noua in vector
                        kt++; //creste frecventa
                    }
                }

                cate[i2] = kt; //punem in vectorul de frecventa
                i2++; 
                kr++; //trecem la urmatoarea carte 
            }

            con.Close();

            for(int i = 0; i <= 23; i++) //sortare descrescatoare dupa frecventa
            {
                for(int j = i+1; j <= 23; j++)
                {
                    if (cate[i] < cate[j])
                    {
                        int aux = cate[i];
                        cate[i] = cate[j];
                        cate[j] = aux;
                        string aux1 = cartea[i];
                        cartea[i] = cartea[j];
                        cartea[j] = aux1;
                    }
                }
            }
            
            for(int i = 0; i <= 3; i++) 
            {
                chart2.Series[0].Points.AddXY(cartea[i], cate[i]);
                chart2.Update();
            }

        }

    }
}
"
88hnKDCs,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Wednesday 10th of April 2024 12:41:20 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_908397.pdf

Working as of:
10 April 2024"
Lj7w2uaP,Eserciziario C++ Lezione,fcamuso,C#,Wednesday 10th of April 2024 12:33:56 PM CDT,"/*
Preparare con il blocco note un file studenti.txt contenente i
nominativi della vostra classe nella forma cognome-nome (Rossi-Mario),
un nominativo per riga. Il programma parte presentando questo menu:

1 - Sorteggio
2 - Elenco rimanenti
3 - Elenco di chi é giá stato interrogato
4 - Reset
99 - fine

Scegliendo 1
Il programma chiede quanti nominativi devono essere estratti e procede
all'estrazione listando i nominativi; questi saranno tolti
dall'elenco di estrazione. All'uscita il programma aggiornerá
i dati sui file in modo che alla prossima ripartenza si potrá
procedere con i rimanenti.

Scegliendo 2
Sará presentata una lista di chi deve ancora essere interrogato.

Scegliendo 3
Sará presentata una lista di chi é gia stato interrogato

Scegliendo 4
I dati su disco (e in RAM) saranno aggiornati in modo tale
che si riparta con le estrazioni con l'elenco degli
alunni al completo.
*/

#include <iostream>
#include <fstream>
#include <ctime>


using namespace std;

int leggi_intero(int min, int max, string messaggio="""")
{
  int letto=0;
  do
  {
     cout<<messaggio<<"" (""<<min<<"" - ""<<max<<""): "";
     cin>>letto;

     if (letto<min || letto>max)
       cout<<endl<<""Valore non nell'intervallo consentito (""<<min<<"" - ""<<max<<"")\n"";
  } while ( letto<min || letto>max );

  return letto;
}

//presenta un elenco di scelte numerate e gestisce la scelta dell'utente
//restituisce o la scelta o -1 se l'utente ha annullato

int menu(string voci_menu[], int quante_voci)
{
    for(int i=0; i<quante_voci; i++)
      cout << i+1 << "" - "" << voci_menu[i] << endl;

    cout << quante_voci + 1 << "" - STOP\n"";

    return leggi_intero(1, quante_voci+1,   ""Scegli una voce"");
}


//testa esistenza file
bool esiste_file(string path_file)
{
  bool esiste=false;

  ifstream f(path_file);
  if (f)
  {
    f.close(); f.clear();
    esiste = true;
  }

  return esiste;
}







int carica_array_da_file(string path_file, string v[], int capienza_array)
{

  if (!esiste_file(path_file)) return 0;

  int conta=0;
  ifstream leggi(path_file);

  while (conta<capienza_array && getline(leggi, v[conta])) conta++;

  leggi.close(); leggi.clear();

  return conta;

}

//restituisce -1 se il file non esiste, altrimenti il numero di righe copiate
int copia_file(string path_sorgente, string path_destinazione)
{
  if (!esiste_file(path_sorgente)) return -1;

  ifstream sorgente(path_sorgente);
  ofstream destinazione(path_destinazione);

  if (!destinazione)
  {
    sorgente.close(); sorgente.clear();
    return -2;
  }

  string riga;
  int copiate=0;

  while ( getline(sorgente, riga) )
  {
    //cout << riga
    destinazione << riga << endl;
    copiate++;
  }

  sorgente.close(); sorgente.clear();
  destinazione.close(); destinazione.clear();
  return copiate;
}

void sorteggia(int quanti_da_interrogare, int &quanti_alunni,
               string alunni[], string interrogati[])
{
  //tocca a voi!
}

void stampa_array_stringhe(string v[], int quanti,
                    bool a_capo=true, char c='*') //parametri di default
{
  for (int i=0; i<quanti; i++)
  {
    cout << v[i];
    if (a_capo) cout<<endl; else cout << "" "";
  }

  cout << string(30, c) << endl;
}

void salva_array_su_file(string v[], int quanti_da_salvare, string path_file)
{
 //tocca a voi!
}


int main()
{
  srand(time(0));

  //IDEA professionale (non la implemento, solo come suggerimento)
  //i nomi dei file e altri parametri potrebbero essere letti da un file di
  //servizio in modo che li si possa facilmente cambiare senza toccare il programma

  string path_file_alunni = ""alunni.txt"";
  string path_file_backup = ""alunni_backup.txt"";

  //per dare la possibilitá di resettare con elenco alunni al completo
  //creo una copia di backup dell'elenco degli alunni
  //questa operazione va fatta solo la prima volta che si lancia il programma
  if (!esiste_file(path_file_backup))
    copia_file(path_file_alunni, path_file_backup);

  //leggo gli interrogandi in un array e li conto
  const int MAX_ALUNNI = 40;
  string alunni[MAX_ALUNNI];
  string interrogati[MAX_ALUNNI];
  int quanti_da_interrogare = 0;

  int alunni_rimasti = carica_array_da_file(path_file_alunni, alunni, MAX_ALUNNI);

  //preparo le voci come da testo dell'esercizio
  string voci_menu[] {""Sorteggio"",
                      ""Elenco rimanenti"",
                      ""Elenco di chi e' gia' stato interrogato"",
                      ""Reset""};
  int num_voci_menu = 4;

  int scelta=0;

  do
  {

    scelta = menu(voci_menu, 4);

    switch (scelta)
    {
      case 1: //sorteggio interrogati
        if (alunni_rimasti==0)
          cout << ""Nessun alunno rimasto da interrogare\n"";
        else
        {
          quanti_da_interrogare = leggi_intero(1, alunni_rimasti, ""Quanti da interrogare"");
          sorteggia(quanti_da_interrogare, alunni_rimasti, alunni, interrogati);
          stampa_array_stringhe(interrogati, quanti_da_interrogare);

          //aggiorno su disco gli alunni rimasti da interrogare
          salva_array_su_file(alunni, alunni_rimasti, path_file_alunni);
        }
      break;

      case 2: //elenco rimasti
        stampa_array_stringhe(alunni,alunni_rimasti);
      break;

      case 3: //chi rimane da interrogare
        //il file di backup li contiene tutti
        //alunni[] contiene quelli ancora da interrogare
       
      break;

      case 4: //reset per nuovo giro interrogazioni
      {
        
      }
      break;

      default:

       break;
    }

    system(""pause""); system(""cls"");
  }
  while (scelta != num_voci_menu+1 );

  return 0;
}
"
GECjjXMi,ubo-1.57.0-script-new,bypass001,JavaScript,Wednesday 10th of April 2024 11:57:36 AM CDT,"'use strict';

/// set-inner-html.js
/// alias sih.js
/// dependency run-at.fn
/// world ISOLATED
function setInnerHTML(
         selector = '',
         text = '' ,
		...agrx
) {   
	console.log(selector,""|"",text,""|"",agrx);
    if ( selector === '' || text === '' ) { return; }
    const innerHTML = ( ) => {
          const nodes = document.querySelectorAll(selector);
          try {
		 for ( const node of nodes ) {
		      if ( node ) { node.innerHTML = text; }
		 }
	  } catch(e) { console.log(e);}
    };
    runAt(( ) => { innerHTML(); }, 'interactive');
}
"
48gnHUhL,20240410 - EventView2,S1LV3R0X1D3,XML,Wednesday 10th of April 2024 11:50:07 AM CDT,"- <Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
+ <System>
  <Provider Name=""Microsoft-Windows-Resource-Exhaustion-Detector"" Guid=""{9988748e-c2e8-4054-85f6-0c3e1cad2470}"" /> 
  <EventID>2004</EventID> 
  <Version>0</Version> 
  <Level>3</Level> 
  <Task>3</Task> 
  <Opcode>33</Opcode> 
  <Keywords>0x8000000020000000</Keywords> 
  <TimeCreated SystemTime=""2024-04-10T16:30:19.9931039Z"" /> 
  <EventRecordID>14608</EventRecordID> 
  <Correlation ActivityID=""{92c2640b-ed3c-4eae-b5ff-80c693780048}"" /> 
  <Execution ProcessID=""13076"" ThreadID=""5676"" /> 
  <Channel>System</Channel> 
  <Computer>Argent-Hell</Computer> 
  <Security UserID=""S-1-5-18"" /> 
  </System>
- <UserData>
- <MemoryExhaustionInfo xmlns=""http://www.microsoft.com/Windows/Resource/Exhaustion/Detector/Events"">
- <SystemInfo>
  <SystemCommitLimit>85720166400</SystemCommitLimit> 
  <SystemCommitCharge>85455675392</SystemCommitCharge> 
  <ProcessCommitCharge>73796771840</ProcessCommitCharge> 
  <PagedPoolUsage>2613121024</PagedPoolUsage> 
  <PhysicalMemorySize>68540297216</PhysicalMemorySize> 
  <PhysicalMemoryUsage>44711223296</PhysicalMemoryUsage> 
  <NonPagedPoolUsage>1227567104</NonPagedPoolUsage> 
  <Processes>441</Processes> 
  </SystemInfo>
- <PagedPoolInfo>
- <Tag_1>
  <Name>MmSt</Name> 
  <PoolUsed>1271929520</PoolUsed> 
  </Tag_1>
- <Tag_2>
  <Name>Gpbm</Name> 
  <PoolUsed>108949568</PoolUsed> 
  </Tag_2>
- <Tag_3>
  <Name>Ntff</Name> 
  <PoolUsed>79758976</PoolUsed> 
  </Tag_3>
  </PagedPoolInfo>
- <NonPagedPoolInfo>
- <Tag_1>
  <Name>ConT</Name> 
  <PoolUsed>129495040</PoolUsed> 
  </Tag_1>
- <Tag_2>
  <Name>smNp</Name> 
  <PoolUsed>99721216</PoolUsed> 
  </Tag_2>
- <Tag_3>
  <Name>Cont</Name> 
  <PoolUsed>73232384</PoolUsed> 
  </Tag_3>
  </NonPagedPoolInfo>
- <ProcessInfo>
- <Process_1>
  <Name>python.exe</Name> 
  <ID>59460</ID> 
  <CreationTime>2024-04-10T16:12:31.8272353Z</CreationTime> 
  <CommitCharge>28521283584</CommitCharge> 
  <HandleCount>1455</HandleCount> 
  <Version>3.10.9150.1013</Version> 
  <TypeInfo>201</TypeInfo> 
  </Process_1>
- <Process_2>
  <Name>explorer.exe</Name> 
  <ID>9292</ID> 
  <CreationTime>2024-04-08T15:28:24.2438084Z</CreationTime> 
  <CommitCharge>4520783872</CommitCharge> 
  <HandleCount>18601</HandleCount> 
  <Version>10.0.22621.3296</Version> 
  <TypeInfo>210</TypeInfo> 
  </Process_2>
- <Process_3>
  <Name>firefox.exe</Name> 
  <ID>28592</ID> 
  <CreationTime>2024-04-09T17:49:37.8587506Z</CreationTime> 
  <CommitCharge>1643257856</CommitCharge> 
  <HandleCount>8046</HandleCount> 
  <Version>124.0.2.8857</Version> 
  <TypeInfo>219</TypeInfo> 
  </Process_3>
- <Process_4>
  <Name /> 
  <ID>0</ID> 
  <CreationTime>1601-01-01T00:00:00.0000000Z</CreationTime> 
  <CommitCharge>0</CommitCharge> 
  <HandleCount>0</HandleCount> 
  <Version>0.0.0.0</Version> 
  <TypeInfo>0</TypeInfo> 
  </Process_4>
- <Process_5>
  <Name /> 
  <ID>0</ID> 
  <CreationTime>1601-01-01T00:00:00.0000000Z</CreationTime> 
  <CommitCharge>0</CommitCharge> 
  <HandleCount>0</HandleCount> 
  <Version>0.0.0.0</Version> 
  <TypeInfo>0</TypeInfo> 
  </Process_5>
- <Process_6>
  <Name /> 
  <ID>0</ID> 
  <CreationTime>1601-01-01T00:00:00.0000000Z</CreationTime> 
  <CommitCharge>0</CommitCharge> 
  <HandleCount>0</HandleCount> 
  <Version>0.0.0.0</Version> 
  <TypeInfo>0</TypeInfo> 
  </Process_6>
  </ProcessInfo>
- <ExhaustionEventInfo>
  <Time>2024-04-10T16:30:14.6129943Z</Time> 
  </ExhaustionEventInfo>
  </MemoryExhaustionInfo>
  </UserData>
  </Event>"
VrvBysSD,20240410 - EventView1,S1LV3R0X1D3,XML,Wednesday 10th of April 2024 11:48:14 AM CDT,"- <Event xmlns=""http://schemas.microsoft.com/win/2004/08/events/event"">
- <System>
  <Provider Name=""Microsoft-Windows-Resource-Exhaustion-Detector"" Guid=""{9988748e-c2e8-4054-85f6-0c3e1cad2470}"" /> 
  <EventID>2004</EventID> 
  <Version>0</Version> 
  <Level>3</Level> 
  <Task>3</Task> 
  <Opcode>33</Opcode> 
  <Keywords>0x8000000020000000</Keywords> 
  <TimeCreated SystemTime=""2024-04-10T16:29:53.0806613Z"" /> 
  <EventRecordID>14607</EventRecordID> 
  <Correlation ActivityID=""{feebe2fe-7ab1-4dfa-9d8f-e0895d611742}"" /> 
  <Execution ProcessID=""13076"" ThreadID=""5676"" /> 
  <Channel>System</Channel> 
  <Computer>Argent-Hell</Computer> 
  <Security UserID=""S-1-5-18"" /> 
  </System>
- <UserData>
- <MemoryExhaustionInfo xmlns=""http://www.microsoft.com/Windows/Resource/Exhaustion/Detector/Events"">
- <SystemInfo>
  <SystemCommitLimit>85720166400</SystemCommitLimit> 
  <SystemCommitCharge>85627277312</SystemCommitCharge> 
  <ProcessCommitCharge>67642351616</ProcessCommitCharge> 
  <PagedPoolUsage>2624868352</PagedPoolUsage> 
  <PhysicalMemorySize>68540297216</PhysicalMemorySize> 
  <PhysicalMemoryUsage>41368502272</PhysicalMemoryUsage> 
  <NonPagedPoolUsage>1219301376</NonPagedPoolUsage> 
  <Processes>445</Processes> 
  </SystemInfo>
- <PagedPoolInfo>
- <Tag_1>
  <Name>MmSt</Name> 
  <PoolUsed>1271690032</PoolUsed> 
  </Tag_1>
- <Tag_2>
  <Name>Gpbm</Name> 
  <PoolUsed>108963488</PoolUsed> 
  </Tag_2>
- <Tag_3>
  <Name>Ntff</Name> 
  <PoolUsed>79390080</PoolUsed> 
  </Tag_3>
  </PagedPoolInfo>
- <NonPagedPoolInfo>
- <Tag_1>
  <Name>ConT</Name> 
  <PoolUsed>129495040</PoolUsed> 
  </Tag_1>
- <Tag_2>
  <Name>smNp</Name> 
  <PoolUsed>94433280</PoolUsed> 
  </Tag_2>
- <Tag_3>
  <Name>Cont</Name> 
  <PoolUsed>73232384</PoolUsed> 
  </Tag_3>
  </NonPagedPoolInfo>
- <ProcessInfo>
- <Process_1>
  <Name>python.exe</Name> 
  <ID>59460</ID> 
  <CreationTime>2024-04-10T16:12:31.8272353Z</CreationTime> 
  <CommitCharge>22198206464</CommitCharge> 
  <HandleCount>1470</HandleCount> 
  <Version>3.10.9150.1013</Version> 
  <TypeInfo>201</TypeInfo> 
  </Process_1>
- <Process_2>
  <Name>explorer.exe</Name> 
  <ID>9292</ID> 
  <CreationTime>2024-04-08T15:28:24.2438084Z</CreationTime> 
  <CommitCharge>4513308672</CommitCharge> 
  <HandleCount>18487</HandleCount> 
  <Version>10.0.22621.3296</Version> 
  <TypeInfo>210</TypeInfo> 
  </Process_2>
- <Process_3>
  <Name>firefox.exe</Name> 
  <ID>28592</ID> 
  <CreationTime>2024-04-09T17:49:37.8587506Z</CreationTime> 
  <CommitCharge>1622781952</CommitCharge> 
  <HandleCount>8045</HandleCount> 
  <Version>124.0.2.8857</Version> 
  <TypeInfo>219</TypeInfo> 
  </Process_3>
- <Process_4>
  <Name /> 
  <ID>0</ID> 
  <CreationTime>1601-01-01T00:00:00.0000000Z</CreationTime> 
  <CommitCharge>0</CommitCharge> 
  <HandleCount>0</HandleCount> 
  <Version>0.0.0.0</Version> 
  <TypeInfo>0</TypeInfo> 
  </Process_4>
- <Process_5>
  <Name /> 
  <ID>0</ID> 
  <CreationTime>1601-01-01T00:00:00.0000000Z</CreationTime> 
  <CommitCharge>0</CommitCharge> 
  <HandleCount>0</HandleCount> 
  <Version>0.0.0.0</Version> 
  <TypeInfo>0</TypeInfo> 
  </Process_5>
- <Process_6>
  <Name /> 
  <ID>0</ID> 
  <CreationTime>1601-01-01T00:00:00.0000000Z</CreationTime> 
  <CommitCharge>0</CommitCharge> 
  <HandleCount>0</HandleCount> 
  <Version>0.0.0.0</Version> 
  <TypeInfo>0</TypeInfo> 
  </Process_6>
  </ProcessInfo>
- <ExhaustionEventInfo>
  <Time>2024-04-10T16:29:47.6739187Z</Time> 
  </ExhaustionEventInfo>
  </MemoryExhaustionInfo>
  </UserData>
  </Event>"
tDgEhunf,Orion Lib ( KEY SYS ),hacimiks,Lua,Wednesday 10th of April 2024 11:45:38 AM CDT,"local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = ""RemiAPE | Key System"", HidePremium = false, SaveConfig = true, ConfigFolder = ""OrionTest"", IntroText = ""Key System""})


local Player = game.Players.LocalPlayer

OrionLib:MakeNotification({
	Name = ""Discord (Link For Key)"",
	Content = ""discord.gg/RemiAPE"",
	Image = ""rbxassetid://12117215397"",
	Time = 10
})

--Values
_G.Key = ""aokitest""
_G.KeyInput = ""string""


local function Destroy()
    game.GetService(""CoreGui"").OrionLib:Destroy()
end

local function MainScript()
    loadstring(game:HttpGet(""https://pastebin.com/raw/D10hGQhr""))()
end

local function CorrectKeyNotif()
    OrionLib:MakeNotification({
        Name = ""Correct Key!"",
        Content = ""Loading Script Please Wait."",
        Image = ""rbxassetid://12117215397"",
        Time = 5
})
end

local function IncorrectKeyNotif()
    OrionLib:MakeNotification({
        Name = ""Incorrect Key!"",
        Content = ""Invalid Key Try Again."",
        Image = ""rbxassetid://12117215397"",
        Time = 5
})
end

local Tab = Window:MakeTab({
	Name = ""Home"",
	Icon = ""rbxassetid://12053823591"",
	PremiumOnly = false
})

Tab:AddTextbox({
	Name = ""Enter Key Here"",
	Default = """",
	TextDisappear = true,
	Callback = function(Value)
        _G.KeyInput = Value
	end
})

Tab:AddButton({
	Name = ""Check Key"",
	Callback = function()
        if _G.KeyInput == _G.Key then
            MainScript()
            CorrectKeyNotif()
            Destroy()
        else
            IncorrectKeyNotif()
        end
    end
})

local Section = Tab:AddSection({
    Name = ""Discord (Key Link)""
})

Section:AddParagraph(""Link:"",""discord.gg/RemiAPE"")"
KGLwzWCy,20240410 - Console,S1LV3R0X1D3,Bash,Wednesday 10th of April 2024 11:45:28 AM CDT,"Python 3.10.9 (tags/v3.10.9:1dd9be6, Dec  6 2022, 20:01:21) [MSC v.1934 64 bit (AMD64)]
Version: v1.9.0-RC-4-g88f70ce6
Commit hash: 88f70ce63cb9bfee1e0ff9ab7c409a03ac631396
Looking in indexes: https://pypi.org/simple, https://pypi.ngc.nvidia.com
Requirement already satisfied: selenium in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (4.19.0)
Requirement already satisfied: urllib3<3,>=1.26 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from urllib3[socks]<3,>=1.26->selenium) (2.2.1)
Requirement already satisfied: trio~=0.17 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from selenium) (0.25.0)
Requirement already satisfied: trio-websocket~=0.9 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from selenium) (0.11.1)
Requirement already satisfied: certifi>=2021.10.8 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from selenium) (2024.2.2)
Requirement already satisfied: typing_extensions>=4.9.0 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from selenium) (4.10.0)
Requirement already satisfied: attrs>=23.2.0 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (23.2.0)
Requirement already satisfied: sortedcontainers in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (2.4.0)
Requirement already satisfied: idna in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (3.6)
Requirement already satisfied: outcome in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (1.3.0.post0)
Requirement already satisfied: sniffio>=1.3.0 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (1.3.1)
Requirement already satisfied: cffi>=1.14 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (1.16.0)
Requirement already satisfied: exceptiongroup in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio~=0.17->selenium) (1.2.0)
Requirement already satisfied: wsproto>=0.14 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from trio-websocket~=0.9->selenium) (1.2.0)
Requirement already satisfied: pysocks!=1.5.7,<2.0,>=1.5.6 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from urllib3[socks]<3,>=1.26->selenium) (1.7.1)
Requirement already satisfied: pycparser in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from cffi>=1.14->trio~=0.17->selenium) (2.22)
Requirement already satisfied: h11<1,>=0.9.0 in c:\stable_diffusion\stable-diffusion-webui\venv\lib\site-packages (from wsproto>=0.14->trio-websocket~=0.9->selenium) (0.12.0)
sd-dynamic-javascript installer: running C:\Stable_Diffusion\stable-diffusion-webui\venv\Scripts\python.exe -m pip install selenium
loading WD14-tagger reqs from C:\Stable_Diffusion\stable-diffusion-webui\extensions\stable-diffusion-webui-wd14-tagger\requirements.txt
Checking WD14-tagger requirements.
Launching Web UI with arguments: --device-id 0 --opt-sdp-no-mem-attention --no-half-vae --opt-split-attention --xformers --disable-safe-unpickle --enable-insecure-extension-access --allow-code --listen --port 7860 --api --cors-allow-origins-regex=http(s){0,1}?:\/\/((localhost|127\.0\.0\.1|192\.168\.\d+\.\d+):\d+|argent-hell\.online:\d+) --deepdanbooru-projects-path C:\Stable_Diffusion\stable-diffusion-webui\models\deepdanbooru --onnxtagger-path C:\Stable_Diffusion\stable-diffusion-webui\models\TaggerOnnx
[Warning] face_checkpoints not detected! Please download it from Release!
[Warning] global_checkpoints not detected! Please download it from Release!
[Warning] face_landmarks not detected! Please download it from Release!
CHv1.8.4: Get Custom Model Folder
[-] ADetailer initialized. version: 24.4.0, num models: 15
CivitAI Browser+: Aria2 RPC started
ControlNet preprocessor location: C:\Stable_Diffusion\stable-diffusion-webui\extensions\sd-webui-controlnet\annotator\downloads
2024-04-10 18:13:07,908 - ControlNet - INFO - ControlNet v1.1.443
2024-04-10 18:13:09,014 - ControlNet - INFO - ControlNet v1.1.443
[sd-webui-freeu] Controlnet support: *enabled*
*** Error loading script: untitled_ui.py
    Traceback (most recent call last):
      File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\scripts.py"", line 508, in load_scripts
        script_module = script_loading.load_module(scriptfile.path)
      File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\script_loading.py"", line 14, in load_module
        module_spec.loader.exec_module(module)
      File ""<frozen importlib._bootstrap_external>"", line 883, in exec_module
      File ""<frozen importlib._bootstrap>"", line 241, in _call_with_frames_removed
      File ""C:\Stable_Diffusion\stable-diffusion-webui\extensions\sd-webui-untitledmerger\scripts\untitled_ui.py"", line 12, in <module>
        from modules.ui import create_sampler_and_steps_selection
    ImportError: cannot import name 'create_sampler_and_steps_selection' from 'modules.ui' (C:\Stable_Diffusion\stable-diffusion-webui\modules\ui.py)

---
== WD14 tagger /gpu:0, uname_result(system='Windows', node='Argent-Hell', release='10', version='10.0.22631', machine='AMD64') ==
Loading weights [f3803ba24f] from C:\Stable_Diffusion\stable-diffusion-webui\models\Stable-diffusion\SDXL\furtasticxl_AlphaEPOCHS15.safetensors
CHv1.8.4: Set Proxy:
2024-04-10 18:13:14,379 - ControlNet - INFO - ControlNet UI callback registered.
add tab
[([button, button, button, button, button], button, gallery), ([button, button, button, button, button], button, gallery)]
Creating model from config: C:\Stable_Diffusion\stable-diffusion-webui\repositories\generative-models\configs\inference\sd_xl_base.yaml
Applying attention optimization: sdp-no-mem... done.
Model loaded in 7.3s (load weights from disk: 2.8s, create model: 0.3s, apply weights to model: 1.5s, load textual inversion embeddings: 2.4s, calculate empty prompt: 0.1s).
Scanning <DirEntry 'deepdanbooru-v3-20211112-sgd-e28'> as deepdanbooru project
Scanning <DirEntry 'deepdanbooru-v4-20200814-sgd-e30'> as deepdanbooru project
Scanning <DirEntry 'e621-v3-20221117-sgd-e32'> as deepdanbooru project
Scanning <DirEntry 'Z3D-E621-Convnext'> as onnx model
Running on local URL:  http://0.0.0.0:7860

To create a public link, set `share=True` in `launch()`.
IIB Database file has been successfully backed up to the backup folder.
Startup time: 56.6s (prepare environment: 11.5s, import torch: 5.0s, import gradio: 1.7s, setup paths: 6.3s, initialize shared: 0.2s, other imports: 1.1s, list SD models: 6.9s, load scripts: 8.9s, scripts before_ui_callback: 0.3s, create ui: 8.9s, gradio launch: 4.3s, add APIs: 0.7s, app_started_callback: 0.8s).
100%|██████████████████████████████████████████████████████████████████████████████████| 35/35 [00:35<00:00,  1.00s/it]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 35/35 [00:36<00:00,  1.05s/it]
100%|██████████████████████████████████████████████████████████████████████████████████| 25/25 [00:13<00:00,  1.83it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:15<00:00,  1.59it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 25/25 [00:12<00:00,  1.98it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:14<00:00,  1.71it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 25/25 [00:12<00:00,  1.97it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:14<00:00,  1.71it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 25/25 [00:12<00:00,  1.98it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:14<00:00,  1.69it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 25/25 [00:13<00:00,  1.82it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:15<00:00,  1.63it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 25/25 [00:12<00:00,  1.94it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 25/25 [00:14<00:00,  1.78it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 35/35 [00:18<00:00,  1.91it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 35/35 [00:19<00:00,  1.78it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 40/40 [00:20<00:00,  1.94it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 40/40 [00:21<00:00,  1.84it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 40/40 [00:20<00:00,  1.95it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 40/40 [00:21<00:00,  1.83it/s]
100%|██████████████████████████████████████████████████████████████████████████████████| 40/40 [00:26<00:00,  1.51it/s]
Total progress: 100%|██████████████████████████████████████████████████████████████████| 40/40 [00:25<00:00,  1.59it/s]
changing setting sd_model_checkpoint to SDXL\e621-rising-v3-epoch-34.fp16.safetensors [abb7b4562b]: RuntimeError72it/s]
Traceback (most recent call last):
  File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\options.py"", line 165, in set
    option.onchange()
  File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\call_queue.py"", line 13, in f
    res = func(*args, **kwargs)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\initialize_util.py"", line 181, in <lambda>
    shared.opts.onchange(""sd_model_checkpoint"", wrap_queued_call(lambda: sd_models.reload_model_weights()), call=False)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\sd_models.py"", line 860, in reload_model_weights
    sd_model = reuse_model_from_already_loaded(sd_model, checkpoint_info, timer)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\sd_models.py"", line 793, in reuse_model_from_already_loaded
    send_model_to_cpu(sd_model)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\modules\sd_models.py"", line 665, in send_model_to_cpu
    m.to(devices.cpu)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\lightning_fabric\utilities\device_dtype_mixin.py"", line 54, in to
    return super().to(*args, **kwargs)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\torch\nn\modules\module.py"", line 1160, in to
    return self._apply(convert)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\torch\nn\modules\module.py"", line 810, in _apply
    module._apply(fn)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\torch\nn\modules\module.py"", line 810, in _apply
    module._apply(fn)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\torch\nn\modules\module.py"", line 810, in _apply
    module._apply(fn)
  [Previous line repeated 8 more times]
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\torch\nn\modules\module.py"", line 833, in _apply
    param_applied = fn(param)
  File ""C:\Stable_Diffusion\stable-diffusion-webui\venv\lib\site-packages\torch\nn\modules\module.py"", line 1158, in convert
    return t.to(device, dtype if t.is_floating_point() or t.is_complex() else None, non_blocking)
RuntimeError: [enforce fail at alloc_cpu.cpp:80] data. DefaultCPUAllocator: not enough memory: you tried to allocate 1179648 bytes."
1gM4sB9w,qtrap1m001.cxx,am1x,C++,Wednesday 10th of April 2024 11:41:19 AM CDT,"#include <stdio.h>
#include <math.h>

#define N 10000
#define M 100000

typedef double (*dfunc)(double);



static double quad_trap(dfunc f, double a, double b, unsigned int n)
{
    double h = (b - a) / n;
    double res = 0.5 * (f(a) + f(b));
    for (unsigned int i = 1; i < n; i++)
        res += f(a + i * h);

    return res * h;
}

static double f(double x)
{
    return exp(x) - 10.0;
}


int main()
{
    double s = 0;
    for (int i = 0; i < M; i++) {
        s = quad_trap(f, -1.0, 1.0, N);
    }
    printf(""%u %u %.18f \n"", N, M, s);
    return 0;
}

"
4QbAAXeU,Untitled,pavelzep,C++,Wednesday 10th of April 2024 11:35:15 AM CDT,"#include ""test_runner.h""

#include <cstddef>

using namespace std;

template <typename T>
class UniquePtr {
private:
    T* ptr_;
public:
    UniquePtr() { ptr_ = nullptr; }
    UniquePtr(T* ptr) :ptr_(ptr) {}
    UniquePtr(const UniquePtr&) = delete;
    UniquePtr& operator = (const UniquePtr&) = delete;

    UniquePtr(UniquePtr&& other) {
        if (this != &other) {
            this->ptr_ = other.ptr_;
            other.ptr_ = nullptr;
        }
    }
    UniquePtr& operator = (nullptr_t) {
        if (ptr_ != nullptr) {
            delete ptr_;
            ptr_ = nullptr;
        }return *this;
    }
    UniquePtr& operator = (UniquePtr&& other) {
        if (this != &other) {
            this->ptr_ = other.ptr_;
            other.ptr_ = nullptr;
        }
        return *this;
    }

    ~UniquePtr() {
        if (ptr_ != nullptr) {
            delete ptr_;
            ptr_ = nullptr;
        }
    }
    T& operator * () const { return *ptr_; }
    T* operator -> () const { return ptr_; }
    T* Release() {
        auto result = ptr_;
        ptr_ = nullptr;
        return result;
    }
    void Reset(T* ptr) {
        if (ptr_ != nullptr) {
            delete ptr_;
        }
        ptr_ = ptr;
    }
    void Swap(UniquePtr& other) {
        auto temp = other.ptr_;
        other.ptr_ = this->ptr_;
        this->ptr_ = temp;
    }
    T* Get() const { return ptr_; }
};

struct Item {
    static int counter;
    int value;
    Item(int v = 0) : value(v) {
        ++counter;
    }
    Item(const Item& other) : value(other.value) {
        ++counter;
    }
    ~Item() {
        --counter;
    }
};

int Item::counter = 0;
void TestMove() {
    {
        auto a = UniquePtr(new Item(42));
        auto b = UniquePtr(move(a));
    }
    {
        auto a = UniquePtr(new Item(42));
        a = UniquePtr(move(a));
    }
    {
        auto a = UniquePtr(new Item(42));
        a = UniquePtr(move(a));
    }
}

void TestLifetime() {
    Item::counter = 0;
    {
        UniquePtr<Item> ptr(new Item);
        ASSERT_EQUAL(Item::counter, 1);

        ptr.Reset(new Item);
        ASSERT_EQUAL(Item::counter, 1);
    }
    ASSERT_EQUAL(Item::counter, 0);

    {
        UniquePtr<Item> ptr(new Item);
        ASSERT_EQUAL(Item::counter, 1);

        auto rawPtr = ptr.Release();
        ASSERT_EQUAL(Item::counter, 1);

        delete rawPtr;
        ASSERT_EQUAL(Item::counter, 0);
    }
    ASSERT_EQUAL(Item::counter, 0);
}

void TestGetters() {
    UniquePtr<Item> ptr(new Item(42));
    ASSERT_EQUAL(ptr.Get()->value, 42);
    ASSERT_EQUAL((*ptr).value, 42);
    ASSERT_EQUAL(ptr->value, 42);
}

void TestOneDelete() {
    {
        {
            UniquePtr<Item> ptr1(new Item(42));
            UniquePtr<Item> ptr2 = move(ptr1);
        }
    }
    {
        {
            auto a = UniquePtr(new Item(42));
            auto b = std::move(a);
        }
        ASSERT_EQUAL(Item::counter, 0);
    }
    {
        {
            auto a = UniquePtr(new Item(42));
            auto b = UniquePtr(std::move(a));
        }
        ASSERT_EQUAL(Item::counter, 0);
    }
}

void TestNullptr() {
    {
        auto a = UniquePtr<int>(nullptr);
        a.Reset(nullptr);
    }
    {
        auto a = UniquePtr(new Item(42));
        a.Reset(nullptr);
    }
    {
        auto a = UniquePtr<int>();
    }
    {
        auto a = UniquePtr<int>();
        a.Reset(nullptr);
    }
    {
        auto a = (int*)nullptr;
        delete a;
    }
}

int main() {
    TestRunner tr;
    RUN_TEST(tr, TestLifetime);
    RUN_TEST(tr, TestGetters);
    RUN_TEST(tr, TestOneDelete);
    RUN_TEST(tr, TestNullptr);
    return 0;
}"
xTW4aieg,qtrap1m001.jl,am1x,Julia,Wednesday 10th of April 2024 11:17:09 AM CDT,"@fastmath function quad_trap(f, a, b, n)
    h = (b - a) / n
    res = 0.5 * (f(a) + f(b))
    for i in 1:n-1
        res += f(a + i*h)
    end
    res * h
end


function g()
    a = 0.0
    for _ in 1:100000
        a = quad_trap(x -> exp(x) - 10.0, -1.0, 1.0, 10000)
    end
    a
end

println(g())
flush(stdout)
@timev g()"
2iRLtpC9,Untitled,den4ik2003,Python,Wednesday 10th of April 2024 10:59:35 AM CDT,"from pybit.unified_trading import WebSocket
from time import sleep
import json

ws = WebSocket(
    testnet=False,
    channel_type=""spot"",
)

file = open('bybit.logs', 'w')
file2 = open('bybit_depth.logs', 'w')

def handle_trades(message):
    renamed_fields = {'T': 'time', 'p': 'price', 'v': 'size', 'S': 'side'}

    for i in range(len(message['data'])):
        file.write(json.dumps({renamed_fields[field]: message['data'][i][field] for field in renamed_fields}))
        file.write('\n')
        file.flush()
        

def handle_message(message):
    depth = {}
    depth['ts'] = message['ts']
    depth['bids'] = message['data']['b']
    depth['asks'] = message['data']['a']
    
    if message['type'] != 'snapshot':
        print('Not snapshot!')
        
    file2.write(json.dumps(depth))
    file2.write('\n')
    file2.flush()
    

ws.trade_stream(
    symbol=""DICEUSDT"",
    callback=handle_trades
)
    
ws.orderbook_stream(
    depth=50,
    symbol=""DICEUSDT"",
    callback=handle_message
)


while True:
    sleep(1)"
W699t5Ae,Untitled,den4ik2003,Python,Wednesday 10th of April 2024 10:58:14 AM CDT,"import asyncio
import nest_asyncio
import json
import logging

# TODO обавить обработку ошибок и try

from okx.websocket.WsPublicAsync import WsPublicAsync

nest_asyncio.apply()

logger = logging.getLogger()
logger.setLevel(logging.CRITICAL)

file1 = open('okx_trades.logs', 'w')
file2 = open('okx_depth.logs', 'w')

def publicCallback(msg): # snapshot and update data
    msg = json.loads(msg)
    ev = msg.get('event')
    data = msg.get('data')
    
    if msg['arg']['channel'] == 'trades':
        if data:
            data = data[0]
            renamed_fields = {'ts': 'ts', 'price': 'px', 'size': 'sz', 'side': 'side'}
            file1.write(json.dumps({field: data[renamed_fields[field]] for field in renamed_fields}))
            file1.write('\n')
            file1.flush()
    
    elif msg['arg']['channel'] == 'books':
        if data:
            data = data[0]
            file2.write('asks len: ' + str(len(data['asks'])) + '\n')
            file2.write('bids len: ' + str(len(data['bids'])) + '\n')
            
            depth_lvl = {
                'asks':    data['asks'][:min(len(data['asks']), 50)],
                'bids':    data['bids'][:min(len(data['bids']), 50)],
                'ts':      data['ts'],
                'action':  msg['action']
            }
            
            file2.write(json.dumps(depth_lvl))
            file2.write('\n')
            file2.flush()
    

async def main():
    url = ""wss://wspap.okx.com:8443/ws/v5/public?brokerId=9999""
    ws = WsPublicAsync(url=url)
    await ws.start()
    
    args = []
    arg1 = {""channel"": ""trades"", ""instId"": ""BTC-USDT""}
    args.append(arg1)
    arg2 = {""channel"": ""books"", ""instId"": ""BTC-USDT""}
    args.append(arg2)
    
    await ws.subscribe(args, publicCallback)
    
    while True:
        await asyncio.sleep(20)
    

if __name__ == ""__main__"":
    asyncio.run(main())"
QHfRLZZu,Recuperação Arrays,estevaorada,PHP,Wednesday 10th of April 2024 10:54:01 AM CDT,"<?php
$produtos = array(
    array(""id"" => 1, ""nome"" => ""Smartphone XYZ"", ""descricao"" => ""Um smartphone avançado com câmera de alta resolução e tela OLED."", ""foto"" => ""https://picsum.photos/200"", ""preco"" => 999.99),
    array(""id"" => 2, ""nome"" => ""Notebook ABC"", ""descricao"" => ""Um notebook potente com processador de última geração e SSD de alta velocidade."", ""foto"" => ""https://picsum.photos/200"", ""preco"" => 1499.99),
    array(""id"" => 3, ""nome"" => ""Fone de Ouvido Bluetooth"", ""descricao"" => ""Fone de ouvido sem fio com cancelamento de ruído e longa duração da bateria."", ""foto"" => ""https://picsum.photos/200"", ""preco"" => 149.50),
    array(""id"" => 4, ""nome"" => ""Mochila Executiva"", ""descricao"" => ""Uma mochila elegante e espaçosa, ideal para profissionais em movimento."", ""foto"" => ""https://picsum.photos/200"", ""preco"" => 79.99),
    array(""id"" => 5, ""nome"" => ""Câmera Fotográfica DSLR"", ""descricao"" => ""Uma câmera profissional com sensor de alta resolução e lentes intercambiáveis."", ""foto"" => ""https://picsum.photos/200"", ""preco"" => 1299.99),
);
?>
<!DOCTYPE html>
<html lang=""pt-br"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Produtos</title>
    <!-- Bootstrap CSS -->
    <link href=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css"" rel=""stylesheet"">
    <style>
        .card {
            margin-bottom: 20px;
        }
    </style>
</head>

<body>
    <div class=""container"">
        <h1>Produtos</h1>
        <div class=""row"">
            <!-- Com base no modelo abaixo, liste os produtos do array mencionado no topo da página. -->
            <div class=""col-md-4"">
                <div class=""card""><img src=""https://picsum.photos/200"" class=""card-img-top"" alt=""Produto 1"">
                    <div class=""card-body"">
                        <h5 class=""card-title"">Produto 1</h5>
                        <p class=""card-text"">Descrição.</p>
                        <p class=""card-text"">Preço: R$ XX,XX</p>
                    </div>
                </div>
            </div>
            <!-- Segundo Modelo -->
            <div class=""col-md-4"">
                <div class=""card""><img src=""https://picsum.photos/200"" class=""card-img-top"" alt=""Produto 2"">
                    <div class=""card-body"">
                        <h5 class=""card-title"">Produto 2</h5>
                        <p class=""card-text"">Descrição.</p>
                        <p class=""card-text"">Preço: R$ XX,XX</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script src=""https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""></script>
</body>
</html>"
f63BpxQ5,anonymized tags,dfajtai,Bash,Wednesday 10th of April 2024 10:50:01 AM CDT,"[0008,0005]	SpecificCharacterSet	ISO_IR 100	CS	10
[0008,0008]	ImageType	[4] ORIGINAL, PRIMARY, AXIAL, CT_SOM5 SPI	CS	34
[0008,0016]	SOPClassUID	1.2.840.10008.5.1.4.1.1.2	UI	26
[0008,0018]	SOPInstanceUID	1.3.12.2.1107.5.1.4.73305.30000014100906544474700038449	UI	56
[0008,0020]	StudyDate	19000101	DA	8
[0008,0021]	SeriesDate	19000101	DA	8
[0008,0022]	AcquisitionDate	19000101	DA	8
[0008,0023]	ContentDate	19000101	DA	8
[0008,002a]	AcquisitionDateTime	20141009215711.802000	DT	22
[0008,0030]	StudyTime	000000.000000	TM	14
[0008,0031]	SeriesTime	000000.000000	TM	14
[0008,0032]	AcquisitionTime	000000.000000	TM	14
[0008,0033]	ContentTime	000000.000000	TM	14
[0008,0050]	AccessionNumber	anonymized_stuff	SH	16
[0008,0060]	Modality	CT	CS	2
[0008,0070]	Manufacturer	long_string	LO	12
[0008,0080]	InstitutionName	long_string	LO	12
[0008,0081]	InstitutionAddress	some_string	ST	12
[0008,0090]	ReferringPhysicianName	anonymous	PN	10
[0008,1010]	StationName	anonymized_stuff	SH	16
[0008,1030]	StudyDescription	long_string	LO	12
[0008,103e]	SeriesDescription	long_string	LO	12
[0008,1050]	PerformingPhysicianName	anonymous	PN	10
[0008,1090]	ManufacturerModelName	long_string	LO	12
[0008,1140]	ReferencedImageSequence		SQ	114
	[fffe,e000]	Item		na	98
		[0008,1150]	ReferencedSOPClassUID	1.2.840.10008.5.1.4.1.1.2	UI	26
		[0008,1155]	ReferencedSOPInstanceUID	1.3.12.2.1107.5.1.4.73305.30000014100905174598400010099	UI	56
[0008,2112]	SourceImageSequence		SQ	108
	[fffe,e000]	Item		na	92
		[0008,1150]	ReferencedSOPClassUID	1.3.12.2.1107.5.9.1	UI	20
		[0008,1155]	ReferencedSOPInstanceUID	1.3.12.2.1107.5.1.4.73305.30000014100906472016300000358	UI	56
[0008,3010]	IrradiationEventUID	1.3.12.2.1107.5.1.4.73305.30000014100906472016300000358	UI	56
[0010,0010]	PatientName	anonymous	PN	10
[0010,0020]	PatientID	long_string	LO	12
[0010,0030]	PatientBirthDate	19000101	DA	8
[0010,0040]	PatientSex	M	CS	2
[0010,1010]	PatientAge	014Y	AS	4
[0010,1030]	PatientWeight	60	DS	2
[0018,0010]	ContrastBolusAgent	long_string	LO	12
[0018,0015]	BodyPartExamined	ABDOMEN	CS	8
[0018,0050]	SliceThickness	3	DS	2
[0018,0060]	KVP	120	DS	4
[0018,0090]	DataCollectionDiameter	500	DS	4
[0018,1000]	DeviceSerialNumber	long_string	LO	12
[0018,1020]	SoftwareVersions	long_string	LO	12
[0018,1030]	ProtocolName	long_string	LO	12
[0018,1041]	ContrastBolusVolume	0	DS	2
[0018,1042]	ContrastBolusStartTime	000000.000000	TM	14
[0018,1043]	ContrastBolusStopTime	000000.000000	TM	14
[0018,1044]	ContrastBolusTotalDose	0	DS	2
[0018,1046]	ContrastFlowRate	0	DS	2
[0018,1047]	ContrastFlowDuration	0	DS	2
[0018,1049]	ContrastBolusIngredientConcentration	350	DS	4
[0018,1100]	ReconstructionDiameter	500	DS	4
[0018,1110]	DistanceSourceToDetector	1085.6	DS	6
[0018,1111]	DistanceSourceToPatient	595	DS	4
[0018,1120]	GantryDetectorTilt	0	DS	2
[0018,1130]	TableHeight	129	DS	4
[0018,1140]	RotationDirection	CW	CS	2
[0018,1150]	ExposureTime	42	IS	2
[0018,1151]	XRayTubeCurrent	42	IS	2
[0018,1152]	Exposure	42	IS	2
[0018,1160]	FilterType	anonymized_stuff	SH	16
[0018,1170]	GeneratorPower	42	IS	2
[0018,1190]	FocalSpots	1.2	DS	4
[0018,1200]	DateOfLastCalibration	19000101	DA	8
[0018,1201]	TimeOfLastCalibration	000000.000000	TM	14
[0018,1210]	ConvolutionKernel	anonymized_stuff	SH	16
[0018,5100]	PatientPosition	HFS	CS	4
[0018,9306]	SingleCollimationWidth	0.6	FD	8
[0018,9307]	TotalCollimationWidth	38.399999999999999	FD	8
[0018,9309]	TableSpeed	46	FD	8
[0018,9310]	TableFeedPerRotation	23	FD	8
[0018,9311]	SpiralPitchFactor	0.6	FD	8
[0018,9313]	DataCollectionCenterPatient	[3] 0.48828125, -128.51171875, 188	FD	24
[0018,9318]	ReconstructionTargetCenterPatient	[3] 0.48828125, -128.51171875, 188	FD	24
[0018,9323]	ExposureModulationType	XYZ_EC	CS	6
[0018,9324]	EstimatedDoseSaving	59.915500000000002	FD	8
[0018,9345]	CTDIvol	5.6883818295652171	FD	8
[0018,9346]	CTDIPhantomTypeCodeSequence		SQ	84
	[fffe,e000]	Item		na	68
		[0008,0100]	CodeValue	anonymized_stuff	SH	16
		[0008,0102]	CodingSchemeDesignator	anonymized_stuff	SH	16
		[0008,0104]	CodeMeaning	long_string	LO	12
[0018,9352]	CalciumScoringMassFactorDevice	[3] 0.74299997, 0.77899998, 0.81199998	FL	12
[0020,000d]	StudyInstanceUID	1.3.12.2.1107.5.1.4.73305.30000014100906471601400000065	UI	56
[0020,000e]	SeriesInstanceUID	1.3.12.2.1107.5.1.4.73305.30000014100906544474700038448	UI	56
[0020,0010]	StudyID	anonymized_stuff	SH	16
[0020,0011]	SeriesNumber	42	IS	2
[0020,0012]	AcquisitionNumber	42	IS	2
[0020,0013]	InstanceNumber	42	IS	2
[0020,0032]	ImagePositionPatient	[3] -249.51171875, -378.51171875, 188	DS	32
[0020,0037]	ImageOrientationPatient	[6] 1, 0, 0, 0, 1, 0	DS	12
[0020,0052]	FrameOfReferenceUID	1.3.12.2.1107.5.1.4.73305.30000014100906472016300000355	UI	56
[0020,1040]	PositionReferenceIndicator	long_string	LO	12
[0020,1041]	SliceLocation	188	DS	4
[0020,4000]	ImageComments	PERITRAST	LT	10
[0028,0002]	SamplesPerPixel	1	US	2
[0028,0004]	PhotometricInterpretation	MONOCHROME2	CS	12
[0028,0010]	Rows	512	US	2
[0028,0011]	Columns	512	US	2
[0028,0030]	PixelSpacing	[2] 0.9765625, 0.9765625	DS	20
[0028,0100]	BitsAllocated	16	US	2
[0028,0101]	BitsStored	12	US	2
[0028,0102]	HighBit	11	US	2
[0028,0103]	PixelRepresentation	0	US	2
[0028,0106]	SmallestImagePixelValue	0	US	2
[0028,0107]	LargestImagePixelValue	3066	US	2
[0028,1050]	WindowCenter	[2] 30, -600	DS	8
[0028,1051]	WindowWidth	[2] 400, 1300	DS	8
[0028,1052]	RescaleIntercept	-1024	DS	6
[0028,1053]	RescaleSlope	1	DS	2
[0028,1054]	RescaleType	long_string	LO	12
[0028,1055]	WindowCenterWidthExplanation	long_string	LO	12
[0032,1060]	RequestedProcedureDescription	long_string	LO	12
[7fe0,0010]	PixelData	0000	OW	524288
"
7temBY80,New Wood System 2 (Planks),Sungmingamerpro13,CSS,Wednesday 10th of April 2024 10:35:20 AM CDT,"local Tool = script.Parent

local player = game.Players.LocalPlayer
local backpack = player.PlayerGui:WaitForChild(""BackpackGui"")
local Planks = backpack.Frame:WaitForChild(""Planks"")
local Mouse = player:GetMouse()

Tool.Equipped:Connect(function()
	backpack.Frame.Planks.Visible = true
	
	Tool.plankstacks:GetPropertyChangedSignal('Value'):Connect(function()
		Planks.TextLabel.Text = Tool.plankstacks.Value.."" / 10""
	end)
	Planks.TextLabel.Text = Tool.plankstacks.Value.."" / 10""
end)

Tool.Unequipped:Connect(function()
	backpack.Frame.Planks.Visible = false
	
	
end)

Tool.Activated:Connect(function()
	local plank = Instance.new(""Part"")
	plank.Name = ""Plank""
	plank.Anchored = true
	plank.Material = Enum.Material.WoodPlanks

	local Pos = Mouse.Hit.Position

	plank.Size = Vector3.new(9, 0.2, 2)
	plank.Position =  Pos
	plank.Color = Color3.fromRGB(105, 64, 40)

	plank.Parent = workspace
	Tool.plankstacks.Value = Tool.plankstacks.Value - 1
	
	while wait() do
		if Tool.plankstacks.Value == 0 then
			Tool:Destroy()
			backpack.Frame.Planks.Visible = false
			wait(1)
			break
		end
	end
end)


"
MmY7cMB1,邀您一起看：岁月（在线电影）,xiaomianao666,JavaScript,Wednesday 10th of April 2024 09:52:29 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥岁月（在线电影）@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInBhcmFtc1wiOlwie1xcXCJjbHNcXFwiOlxcXCJjbHNfc295c1xcXCIsXFxcImRlc2NcXFwiOlxcXCLnrKwyM+mbhlxcXCIsXFxcImlkXFxcIjpcXFwiaWRfM+WcqOe6v+eUteW9sVxcXCIsXFxcImltZ1xcXCI6XFxcImh0dHBzOi8vaW1hZ2UubWFpbW4uY29tL2NvdmVyL2QwZjk5M2ZmYTFkZTkxNjNiYTkzZWY2ZTQyNWZhZjRmLmpwZ0BSZWZlcmVyPVxcXCIsXFxcInBhZ2VUaXRsZVxcXCI6XFxcIuWygeaciO+8iOWcqOe6v+eUteW9se+8iVxcXCIsXFxcInRpdGxlXFxcIjpcXFwi5bKB5pyIXFxcIn1cIixcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi6aOO5b2xXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSMjaHR0cHM6Ly93d3cuemFpeGlhbmRpYW55aW5nOC5jb20vdm9kZGV0YWlsLzQ0OTguaHRtbCNpbW1lcnNpdmVUaGVtZSMjYXV0b0NhY2hlIztnZXQ7VVRGLTg7e1VzZXItQWdlbnRATW96aWxsYS81LjAgKExpbnV477yb77ybIEFuZHJvaWQgMTHvvJvvvJsgTWkgMTAgUHJvKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODguMC40MzI0LjE1MiBNb2JpbGUgU2FmYXJpLzUzNy4zNn1cIixcImNvbF90eXBlXCI6XCJ0ZXh0XzNcIixcImZpbmRfcnVsZVwiOlwianM6KFxcbigpID0+IHtcXG4gICAgcmVxdWlyZShjb25maWcu5L6d6LWWKTtcXG4gICAgZXJqaSgpO1xcbn1cXG4pKClcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInVhXCI6XCJtb2JpbGVcIixcInByZVJ1bGVcIjpcImxldCB0YWNpdGx5ID0gXFxcImFIUjBjSE02THk5bmFYUmpiMlJsTG01bGRDOXpkV2xtWlc0dmMzVnBabVZ1Wnk4dEwzSmhkeTl0WVhOMFpYSXZlV05zTG1welxcXCI7XFxubGV0IHljbCA9IGdldEl0ZW0oXFxcImdpdFxcXCIsIGJhc2U2NERlY29kZSh0YWNpdGx5KSk7XFxuaW5pdENvbmZpZyh7XFxuICAgIOS+nei1ljogeWNsXFxufSk7XCIsXCJwYWdlc1wiOlwiW11cIn0iLCJwaWNVcmwiOiJodHRwczovL2ltYWdlLm1haW1uLmNvbS9jb3Zlci9kMGY5OTNmZmExZGU5MTYzYmE5M2VmNmU0MjVmYWY0Zi5qcGdAUmVmZXJlcj0iLCJ0aXRsZSI6IuWygeaciO+8iOWcqOe6v+eUteW9se+8iSJ9
UHt667C4,Untitled,dllbridge,C,Wednesday 10th of April 2024 09:48:31 AM CDT,"
#include   <stdio.h>

int n = 5;

///////////////////////////////////////////////////
int main()
{
	
	int *p = &n; 
	
	
	printf(""address n = %d\n"",  p);
	printf(""        n = %d\n"", *p);	
}



















/*



#include   <stdio.h>


struct Cdog
{
	
    int   nAge;
	
	float fWeight;	
	
} dog1, dog2;



Cdog dog3, dog4;


void fDog(Cdog *p);


///////////////////////////////////////////////////
int main()
{
	
	Cdog dog5, dog6;
	
	
	
	dog3.nAge    =   3;
	dog3.fWeight = 0.2;

	dog6.nAge    =  11;
	dog6.fWeight = 1.241;

	fDog(&dog6);
}





///////////////////////////////////////////////////
void fDog(Cdog *p)
{
	
	 printf(""nAge    = %d  \n"", p->nAge   );
	 printf(""fWeight = %.3f\n"", p->fWeight);
}

*/




/*
#include   <stdio.h>



void swap(int &p1, int &p2);  
void print(int *p, int n);

///////////////////////////////////////////////////
int main()
{
    
    int nArr[99] = {5, 11, 2, 6, 34, 1, 7};

    swap(nArr[0], nArr[4]);
    
    print(nArr, 7);
}















////////////////////////////////////////////////////
void print(int *p, int n)
{
	
	 for(int i = 0; i < n; i++)
	 {
			
	      printf(""%d, "", p[i]);		
	 }
	printf(""\n"");
}



///////////////////////////////////////////////////
void swap(int &r1, int &r2)                       // 
{
	
	 int n  = r1;
   	     r1 = r2;
	     r2 = n ;
}






*/











/*

#include   <stdio.h>



void swap(int *p1, int *p2);  
void print(int *p, int n);

///////////////////////////////////////////////////
int main()
{
    
    int nArr[99] = {5, 11, 2, 6, 34, 1, 7};

    swap(&nArr[0], &nArr[4]);
    
    print(nArr, 7);
}















////////////////////////////////////////////////////
void print(int *p, int n)
{
	
	 for(int i = 0; i < n; i++)
	 {
			
	      printf(""%d, "", p[i]);		
	 }
	printf(""\n"");
}



///////////////////////////////////////////////////
void swap(int *p1, int *p2)                       // 
{
	
	
	 int n = *p1;
	 
	 *p1 = *p2;
	 
	 *p2 = n;
	
}



*/




















/*
#include  <iostream>
#include  <string.h>
#include   <stdio.h>
using namespace std;
 
 
  struct Dog
  {
       int  Age;
       char color[99];
      float weight;
       
  };
 
 
void foo(Dog *p);
 

///////////////////////////////////////////////////
int main()
{
    
   Dog y, u, w; 
   
   y.Age = 4;
   u.Age = 8;
   w.Age = 5;
   
   w.weight=0.20;
   strcpy(w.color, ""Blue"" );
   strcpy(u.color ,""brown""  );
  
   y.color[0] = 'B';
   y.color[1] = 'l';
   y.color[2] = 'a';
   y.color[3] = 'c';
   y.color[4] = 'k';
   y.color[5] =  0 ;               
     
   
   foo(&w);

   
}
 
//////////////////////////////////////////////////////////
void foo(Dog *p)                                        //
{
    
    printf(""u.color  = %s\n""  , p->color );
    printf(""u.Age    = %d\n""  , p->Age   );
    printf(""w.weight = %.2f\n"", p->weight);
}



*/

"
svjG2u9v,26(3),nq1s788,Python,Wednesday 10th of April 2024 09:47:10 AM CDT,"data = open('file.txt').readlines()
n, k = map(int, data[0].split())
arr = data[1:]
for i in range(n):
    arr[i] = arr[i].split()
    arr[i] = (int(arr[i][0]), arr[i][1])
arr.sort()
cur_sum = 0
x = 0
y = 0
a = []
b = []
for i in range(n):
    if arr[i][1] == 'A':
        a.append(arr[i][0])
    else:
        b.append(arr[i][0])
    if cur_sum + arr[i][0] <= k:
        cur_sum += arr[i][0]
        if arr[i][1] == 'A':
            x += 1
        else:
            y += 1
while y > 0 and x < len(a):
    if cur_sum + (a[x] - b[y - 1]) <= k:
        cur_sum += a[x] - b[y - 1]
        x += 1
        y -= 1
    else:
        break
print(x, k - cur_sum)
"
bsQ6x3F3,установлен ли sysmon,Wintersham,PowerShell,Wednesday 10th of April 2024 09:46:04 AM CDT,"$komp = Get-ADComputer -Filter * -Properties * | select Name
$komp[10]
ping komp[10]
#$users = Get-ADUser -Filter *
#$komp[10]
# $users[1]
$n = 10
$t = $komp[$n]
$t
net use U: $t| 
cd U:\
Get-ChildItem -Path ""U:\Windows"" -Name ""exp*""
Get-ChildItem -Path ""U:\Users\BazunovaLE\Documents"" *.*
net use U: /delete
$teamInfo = Import-Csv -Path C:\Users\BuharskyAA\Documents\ADComputers_arhiv.csv
$teamInfo[0]
$ad_pcs = get-content -Path  C:\Users\BuharskyAA\Documents\ADComputers_arhiv.csv
$ad_pcs[0]"
4mubY16L,Untitled,bobbye,Python,Wednesday 10th of April 2024 09:21:36 AM CDT,"class Solution:
    def rob(self, nums: List[int]) -> int:
        # Return the maximum of three scenarios:
        # 1. Robbing the first house and skipping the last house.
        # 2. Robbing the last house and skipping the first house.
        return max(nums[0], self.helper(nums[1:]), self.helper(nums[:-1]))

    # Helper function to calculate the maximum amount of money
    # that can be robbed using dynamic programming.
    def helper(self, nums):
        rob1, rob2 = 0, 0  
        
        # Iterate through the house values
        for n in nums:
            # Calculate the new maximum amount considering two scenarios:
            # 1. Robbing the current house and the amount obtained from robbing two houses ago.
            # 2. Not robbing the current house and maintaining the previous maximum.
            newRob = max(rob1 + n, rob2)
            rob1 = rob2  
            rob2 = newRob  
        return rob2  "
6vh6gWCg,hole,Voxel3042,Lua,Wednesday 10th of April 2024 09:19:42 AM CDT,"local tArgs = {...}
local l = tonumber(tArgs[1] or 0)
local w = tonumber(tArgs[2] or 0)
local h = tonumber(tArgs[3] or tArgs[2] or 1)

function line()
    if w == 0 then return end
    turtle.turnRight()
    for i = 1, w do
        turtle.dig()
        if i ~= w then
            turtle.forward()
        end
    end

    for i = 1, w-1 do
        turtle.back()
    end

    for i = 1, 2 do turtle.turnLeft() end

    for i = 1, w do
        turtle.dig()
        if i ~= w then
            turtle.forward()
        end
    end

    for i = 1, w-1 do
        turtle.back()
    end

    turtle.turnRight()
end

function hole()
    turtle.dig()
    turtle.forward()
    line()
    for i = 1, h-1 do
        turtle.digUp()
        turtle.up()
        line()
    end

    for i = 1, h do turtle.down() end
end


if l == 0 then
    while true do
        hole()
    end
else
    for i = 1, l do
        hole()
    end
end"
sw3P1xXh,Untitled,vatman,Python,Wednesday 10th of April 2024 09:14:01 AM CDT,"import numpy as np
import matplotlib.pyplot as plt

np.random.seed(4)


# def fitness_function(x):
#     sum = 2.0
#     for item in x:
#         sum -= item**2.0
#     return sum


def fitness_function(x):
    sum = np.float64(-20.0)
    for item in x:
        sum += -(item**2) + 10 * np.cos(2 * np.pi * item)
    sum = 1 / (np.e ** (-sum / 2))
    return sum


def get_zero_population(seed, count_population, demention_population):
    zero_population = np.random.uniform(
        -5.2, 5.2, (count_population, demention_population)
    )
    return zero_population


def get_psi(g, NP, Lambda):
    psi = ((g) * NP + 1) ** (1 / Lambda)
    return psi


def select_reference_vertor(clear_generation, NP, g):
    reference_vector = None
    array_fitness_value = 0.0
    sum_arr = 0.0
    arr_ver = 0.0
    psi = get_psi(g, NP, 100)
    for item in clear_generation:
        num = fitness_function(item)

        array_fitness_value = np.append(array_fitness_value, num**psi)
        sum_arr += num**psi
    for i in array_fitness_value:
        arr_ver = np.append(arr_ver, i / sum_arr)

    id = np.random.choice(len(arr_ver), p=arr_ver)
    # TODO change np.random
    reference_vector = clear_generation[id - 2]

    return reference_vector


def calculate_A(x_min, x_max, x_r, e):
    return np.arctan((x_max - x_r) / e) - np.arctan((x_min - x_r) / e)


def calculate_e(g, NP, D):
    return 1 / ((g) * (NP) + 1) ** (1 / (2 * D))


def generate_potential_offspring(x_r, e, A):
    return x_r + e * np.tan((np.random.rand() - 0.5) * A)


def sofa(zero_population, data_cloud, fitness, mod, steps_number, epsilon):
    # TODO add data_cloud,fitness,mod,epsilon,true_answer
    start_population = np.copy(zero_population)
    mutant_populaion = np.copy(zero_population)
    arr_value_best_item = np.array([fitness_function(start_population[0])])
    value_best_item = arr_value_best_item[0]
    best_item = None

    for item in range(steps_number):
        reference_vector = select_reference_vertor(
            start_population, len(start_population), item
        )
        # print(f""reference_vector {reference_vector}"")
        e = calculate_e(item, len(start_population), len(start_population[0]))
        for i in range(len(start_population)):
            const_a = calculate_A(-5.2, 5.2, i, e)
            mutant_populaion[i] = reference_vector + np.tan(
                (np.random.rand() - 0.5) * const_a
            )

        # print(f""mutant_populaion {mutant_populaion}"")
        for i in range(len(start_population)):
            fit_mutant_popul = fitness_function(mutant_populaion[i])
            fit_start_popul = fitness_function(start_population[i])
            # print(f""test {fit_mutant_popul} start {fit_start_popul}"")
            if fit_mutant_popul > fit_start_popul:
                start_population[i] = mutant_populaion[i]
                if fit_mutant_popul > value_best_item:
                    value_best_item = fit_mutant_popul
                    best_item = mutant_populaion[i]
                    # print(f""best in moment{best_item}"")
                    # print(f""best_value in moment{value_best_item}"")
        arr_value_best_item = np.append(arr_value_best_item, value_best_item)
    # TODO move for up 3 lines
    # for item in start_population:
    #     value_item = fitness_function(item)
    #     if value_item > value_best_item:
    #         value_best_item = value_item
    #         best_item = item

    print(f""final population: {start_population}"")
    print(f""best vector: {best_item}"")
    print(f""global maximum: {value_best_item}"")
    print(f""fitness_changing: {arr_value_best_item}"")
    index = list(np.arange(1.0, len(arr_value_best_item) + 1, 1))
    # print(f""index = {index}"")
    fig, ax = plt.subplots()
    ax = plt.plot(index, arr_value_best_item)

    plt.show()
    return start_population, best_item, value_best_item


if __name__ == ""__main__"":
    # TODO optimization
    # TODO graphics
    steps = 10000
    steps = int(input(""steps = ""))
    a = get_zero_population(1, 50, 2)
    print(f""zero_population {a}"")
    sofa(a, None, None, None, steps, 0.0001)
"
afhZ61aY,Untitled,unvisibleman94,C#,Wednesday 10th of April 2024 08:56:31 AM CDT,"using Ascon.Pilot.Common.Search;
using Ascon.Pilot.ProjectionsRepository;
using Ascon.Pilot.ClientCore.Search;
using Ascon.Pilot.DataClasses;
using System.Drawing;
using System.Linq;
using System.Collections.Generic;
using Ascon.Pilot.Core;
using Ascon.Pilot.Client;
using Ascon.Pilot.Client.Search;
using Ascon.Pilot.Pilot.Reports;
using DevExpress.XtraReports.Parameters;
using DevExpress.XtraPrinting.Drawing;

private ReportContext context = new ReportContext();
string reportType;
ReportData _data;
List<INUserState> _states = new List<INUserState>();

public class ReportData : IEnumerable<ReportData>
{
	public string Type { get; set; }
	public string Title { get; set; }
	public string Set {get; set; }
	public string Stage {get; set;}
	public string ProjectCode {get; set; }
	public string ProjectTitle {get; set; }

	public IEnumerable<Element> Elements { get; set; }

	public IEnumerator<ReportData> GetEnumerator()
	{
		return new List<ReportData>() { this }.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}

public class Element
{
	public int Num { get; set; }
	public string Notation { get; set; }
	public string Name { get; set; }
	public string Status{ get; set; }
}


private void PilotReport_DataSourceDemanded(object sender, System.EventArgs e) 
{
	var repository = ContextWrapper.Instance.GetRepository();
	_states = repository.GetUserStates().ToList();
	LongRunning.Start(this, () =>
	{
		LoadData();
		DataSource = _data;
	});
}

private void LoadData() 
{
      context = new ReportContext();
	var project = (RObject)Parameters[""Project""].Value;
	reportType = ReportType.Value as string;

	if(project == null)
		throw new ReportException(""Не выбран проект"");
	if (reportType == null)
		throw new ReportException(""Тип отчета не выбран"");
      project = context.GetObject(project.Id);
	_data = new ReportData();
	_data.Title = ""Состав "" + (reportType  == ""RD"" ? ""рабочей"" : ""проектной"") + "" документации"";
	_data.Set = reportType == ""RD"" ? ""комплекта"" : ""раздела"";
	_data.Stage = reportType == ""RD"" ? ""Р"" : ""П"";

	var projectObj = Project.Value as RObject;
	_data.ProjectCode = GetAttributeValue<string>(projectObj , ""code"");
	_data.ProjectTitle = GetAttributeValue<string>(projectObj, ""project_name"");

	_data.Elements = CollectElements(project);
}


private IEnumerable<Element> CollectElements(RObject parent)
{
	List<Element> result = new List<Element>();
	int num = 1;
	foreach(var child in parent.Children)
	{
		var element = GetElement(child);
		if(element != null)
		{
			result.Add(element);
			element.Num = num++;				
		}
		result.AddRange(CollectElements(child));	
	}
	return result;
}

private Element GetElement(RObject obj)
{
	const string MAIN_SET_TYPE_NAME = ""main_set""; 
	const string MAIN_SET_CODE_ATTRIBUTE_NAME = ""code"";
	const string MAIN_SET_NAME_ATTRIBUTE_NAME = ""name"";
	
	const string SECTION_TYPE_NAME = ""section"";
	const string SECTION_CODE_ATTRIBUTE_NAME = ""code"";
	const string SECTION_NAME_ATTRIBUTE_NAME = ""name"";

	const string GROUP_TYPE_NAME = ""order_group_folder"";

	if( (obj.Type.Name == MAIN_SET_TYPE_NAME) && (reportType == ""RD"") )
	{
		return new Element
		{
			Notation = GetStringAttributeValue(obj, MAIN_SET_CODE_ATTRIBUTE_NAME),
			Name = GetStringAttributeValue(obj, MAIN_SET_NAME_ATTRIBUTE_NAME),
			Status = GetStatus(obj)
		};
	}
	else if( (obj.Type.Name == SECTION_TYPE_NAME) && (reportType == ""PD"") )
	{
		return new Element
		{
			Notation = _data.ProjectCode + ""-"" + GetStringAttributeValue(obj, SECTION_CODE_ATTRIBUTE_NAME),
			Name = GetStringAttributeValue(obj, SECTION_NAME_ATTRIBUTE_NAME),
			Status = GetStatus(obj)	
		};
	}else if( (obj.Type.Name == GROUP_TYPE_NAME) && (reportType == ""RD"") ){
		return new Element
		{
			Name = GetStringAttributeValue(obj, ""name"")		
		};
	}
	return null;
}

private string GetStringAttributeValue(RObject obj, string attributeName)
{
	object value;
	if(!obj.Attributes.TryGetValue(attributeName, out value))
		return null;
	return (string)value;
}

// На всех страницах кроме первой рисуем другую основную надпись с помощью водяного знака
private void table1_PrintOnPage(object sender, DevExpress.XtraReports.UI.PrintOnPageEventArgs e) {
	if(e.PageIndex > 0)
	{
		PilotReport.Pages[e.PageIndex].AssignWatermark(CreateWatermark());
	}
}

// Количество страниц печатается только на 1 странице
private void tbPageCount_PrintOnPage(object sender, DevExpress.XtraReports.UI.PrintOnPageEventArgs e) 
{
	if(e.PageIndex > 0)
		e.Cancel = true;	
}

// Позиционируем название проекта в основную надпись на страницах после первой
private void tbProjectName_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) {
	if(PrintingSystem.Document.PageCount > 0)
	{
		tbProjectName.Location = new Point(256, 104);
		tbProjectName.Size = new Size(428, 55); 
	}
}

// Позиционаруем номер листа в основную надпись на страницах после первой
private void tbPage_BeforePrint(object sender, System.Drawing.Printing.PrintEventArgs e) 
{
	if(PrintingSystem.Document.PageCount > 0)
	{
		tbPage.Location = new Point(684, 130);
		tbPage.Size = new Size(39, 29); 
	}
}

public static T GetAttributeValue<T>(RObject obj, string attributeName, bool isAllowNullValue = false)
{
	object attr;
	if (!obj.Attributes.TryGetValue(attributeName, out attr) || attr == null)
	{
		if (isAllowNullValue)
			return default(T);
	}
	return (T)attr;
}

public string GetStatus(RObject obj){
	var stateId = obj.Attributes.ContainsKey(""state"")
		? obj.Attributes[""state""] as Guid?
		: null;
	if(stateId == null)
		return ""Атрибут не найден"";

	var state = stateId.HasValue 
		? _states.FirstOrDefault(x=>x.Id == stateId.Value)
		: null;
	if(state == null)
		return ""Статус не найден"";

	string Status = state != null
		? state.Title
		: ""Статус не найден"";
	return Status;
}

private Watermark CreateWatermark()
{
	var wm = new Watermark();
	wm.Image = watermarkHolder.Image;
	wm.ImageViewMode = ImageViewMode.Stretch;
	wm.ShowBehind = true;
	return wm;
}"
EgW0THiS,wordpresseBasic,zestox,JSON,Wednesday 10th of April 2024 08:40:59 AM CDT,"#docker-compose.yml

version: ""3.8""

services:
  db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: wordpress
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD: wordpress
    restart: always
    volumes:
      - ./db_data:/var/lib/mysql

  phpmyadmin:
    depends_on:
      - db
    image: phpmyadmin
    environment:
      PMA_HOST: dB
      MYSQL_ROOT_PASSWORD: wordpress
    restart: always
    ports:
      - '8082:80'

  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    volumes:
      - ./:/var/www/html
    ports:
      - 80:80
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress"
GFufVmt6,195513 smt_group_for_websitecode,kirber,JSON,Wednesday 10th of April 2024 08:30:22 AM CDT,"{
  ""Source"": ""crm"",
  ""Message"": """",
  ""Id"": ""026133c3-a0f5-ee11-b836-005056b8c05c"",
  ""Type"": ""create"",
  ""Time"": ""2024-04-08T15:09:18"",
  ""Attributes"": {
    ""createdon"": ""2024-04-08T15:09:14"",
    ""smt_addition_realization_termid"": null,
    ""smt_colorcode"": null,
    ""smt_constructor_groupcode"": 100000002,
    ""smt_default_optionbit"": false,
    ""smt_description"": ""Сниженная ставка на весь срок по стандартной ипотеке с низкиим первым взносом\n\nПервый взнос — от 15%\nСтавка — 11%\nРазмер кредита - до 30 млн.\nСрок — до 30 лет"",
    ""smt_discount_amount"": null,
    ""smt_discount_percent"": -18.9000000000,
    ""smt_discount_typecode"": 100000002,
    ""smt_end_date"": ""2024-12-31T03:00:00"",
    ""smt_group_for_websitecode"": 100000002,
    ""smt_initial_fee"": 15.0000000000,
    ""smt_interest_rate"": 11.0000000000,
    ""smt_marketing_name"": ""Самолет Ипотека+ 11%"",
    ""smt_max_quantity"": null,
    ""smt_mortgage_program_validity"": ""30"",
    ""smt_name"": ""Уступка СМЛ НедМСК_Квартира_Самолет Ипотека+ 11% Альфа и ВТБ_Самолет Ипотека+"",
    ""smt_option_classcode"": null,
    ""smt_parent_realization_termid"": null,
    ""smt_payment_optioncode"": 100000002,
    ""smt_postsale"": null,
    ""smt_realization_term_classifier_smt_isfurnishing"": null,
    ""smt_realization_term_classifierid"": null,
    ""smt_realization_termid"": ""026133c3-a0f5-ee11-b836-005056b8c05c"",
    ""smt_realization_termParent_smt_default_optionbit"": null,
    ""smt_realization_termParent_smt_name"": null,
    ""smt_realization_termParent_smt_parent_realization_termid"": null,
    ""smt_realization_termParent_smt_realization_termid"": null,
    ""smt_realization_termParent_smt_rejecting_realization_termid"": null,
    ""smt_realization_termParent_smt_required_optionbit"": null,
    ""smt_required_optionbit"": false,
    ""smt_room_for_optioncode"": null,
    ""smt_roomcode"": null,
    ""smt_start_date"": ""2024-04-08T03:00:00"",
    ""smt_stylecode"": null,
    ""smt_technicsbit"": false,
    ""smt_term_typecode"": 100000003,
    ""smt_translate_to_dypricebit"": false,
    ""statecode"": 0,
    ""statuscode"": 1
  },
  ""LinkEntities"": {},
  ""ManyMany"": {}
}"
QT511jm2,FreshTomato - wireless survey.asp,rs232,JavaScript,Wednesday 10th of April 2024 08:18:51 AM CDT,"<!DOCTYPE html>
<html lang=""en-GB"">
<head>
<meta http-equiv=""content-type"" content=""text/html;charset=utf-8"">
<meta name=""robots"" content=""noindex,nofollow"">
<title>[<% ident(); %>] Tools: Wireless Survey</title>
<link rel=""stylesheet"" type=""text/css"" href=""tomato.css"">
<% css(); %>
<script src=""tomato.js""></script>
<style>
#ellipses2 { border: 1px solid #ccccdd; }
#ellipses5 { border: 1px solid #ccdddd; }
}
</style>
<script>
// <% nvram(""wl0_radio,wl1_radio,wl2_radio,wl0_channel,wl1_channel,wl2_channel,wl0_nband,wl1_nband,wl2_nband,wl0_nbw,wl1_nbw,wl2_nbw,wl0_mode,wl1_mode,wl2_mode,wl0_nctrlsb,wl1_nctrlsb,wl2_nctrlsb,wl0_ssid,wl1_ssid,wl2_ssid""); %>
var w10_n = parseInt(nvram.wl0_nband);
var wl0_r = parseInt(nvram.wl0_radio);
var wl0_c = parseInt(nvram.wl0_channel);
var wl0_w = parseInt(nvram.wl0_nbw);
var wl0_m = nvram.wl0_mode;
var wl0_s = nvram.wl0_nctrlsb;
var wl0_d = nvram.wl0_ssid;
var w11_n = parseInt(nvram.wl1_nband);
var wl1_r = parseInt(nvram.wl1_radio);
var wl1_c = parseInt(nvram.wl1_channel);
var wl1_w = parseInt(nvram.wl1_nbw);
var wl1_m = nvram.wl1_mode;
var wl1_s = nvram.wl1_nctrlsb;
var wl1_d = nvram.wl1_ssid;
var w12_n = parseInt(nvram.wl2_nband);
var wl2_r = parseInt(nvram.wl2_radio);
var wl2_c = parseInt(nvram.wl2_channel);
var wl2_w = parseInt(nvram.wl2_nbw);
var wl2_m = nvram.wl2_mode;
var wl2_s = nvram.wl2_nctrlsb;
var wl2_d = nvram.wl2_ssid;
var cprefix = 'tools_wlsurvey';
function hexToDecimal(hexColor) {
hexColor = hexColor.replace('#', '');
// Extract red, green, and blue components
var red = parseInt(hexColor.substring(0, 2), 16);
var green = parseInt(hexColor.substring(2, 4), 16);
var blue = parseInt(hexColor.substring(4, 6), 16);
// Return comma-separated decimal values
return red + ', ' + green + ', ' + blue;
}
var colors = [
    ""FF6347"", // Tomato
    ""32CD32"", // LimeGreen
    ""4169E1"", // RoyalBlue
    ""FFD700"", // Gold
    ""FF69B4"", // HotPink
    ""00CED1"", // DarkTurquoise
    ""9932CC"", // DarkOrchid
    ""FFA500"", // Orange
    ""008080"", // Teal
    ""FFC0CB"", // Pink
    ""800000"", // Maroon
    ""808000"", // Olive
    ""008000"", // Green
    ""000080"", // Navy
    ""800080"", // Purple
    ""FFD700"", // Gold
    ""7FFFD4"", // Aquamarine
    ""A52A2A"", // Brown
    ""2E8B57"", // SeaGreen
    ""8A2BE2""  // BlueViolet
];
var limit=20;
var wlscandata = [];
var entries = [];
// var labelSelect = 'on';
var dayOfWeek = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];
var cmd = null;
var ref = new TomatoRefresh('update.cgi', 'exec=wlscan', 0, 'tools_survey_refresh');
ref.refresh = function(text) {
try {
eval(text);
}
catch (ex) {
}
sg.removeAllData();
sg.populate();
sg.resort();
}
var sg = new TomatoGrid();
sg.setup = function() {
this.init('survey-grid','sort');
this.headerSet(['Last Seen','RGB','SSID','BSSID','RSSI &nbsp; &nbsp; ','Quality','Control<br>Channel','Security','Rates']);
this.populate();
this.sort(0);
}
function calculateCentralChannelForty(channel, sideband) {
    if (sideband.toLowerCase() === ""upper"") {
        return channel - 2;
    } else if (sideband.toLowerCase() === ""lower"") {
        return channel + 2;
    } else {
        return ""Invalid sideband"";
    }
}
function drawEllipse(c, m, q, col, ssid, alpha)
    {
				// console.log(c);
				// console.log(m);
				// console.log(q);
				// console.log(col);
		if (c<35){ var canvas  = document.getElementById(""ellipses2"");
        var ctx = canvas.getContext('2d');
		if (m==20) { mf = (canvas.width/19)*2.45; }
		else if (m==40){ mf = (canvas.width/19)*4.4; }
		if (c==1) { cf = (canvas.width/19)*3; }
		else if (c==14) { cf = ( canvas.width / 19) * 16.6 }
		else { cf = ((canvas.width/19)*3) + ((canvas.width/19)*(c-1)); }
		rf = q*2;
}
		else if (c>35){ var canvas  = document.getElementById(""ellipses5"");
        var ctx = canvas.getContext('2d');
		var cc = c;
		if (m==20) { mf = ((canvas.width/38)*0.45); }
		else if (m==40) { mf = ((canvas.width/38)*0.95); // 52 =54 [ 50 - 58 ] 
				cc = getDisplayChannel(c,m);				
				<!-- console.log(c); -->
				<!-- console.log(m); -->
				<!-- console.log(cc);  -->
				}
		else if (m==80) { mf = ((canvas.width/38)*1.9); // 100 = 106 [ 98 - 114 ]
				cc = getDisplayChannel(c,m); 
				<!-- console.log(c); -->
				<!-- console.log(m); -->
				<!-- console.log(cc);  -->
				} 
		cc = cc-36;
		cf = (canvas.width/38) + ((canvas.width/38)*(cc/4));
		rf = q * 2;
}	    
		ctx.beginPath();
		var decimalColor = hexToDecimal(col);
		if (typeof alpha === 'undefined') { var alpha = 0.65; }
		ctx.fillStyle = ""rgba( "" + decimalColor + "", "" + alpha + "")"";
		// ctx.fillStyle = ""rgba( "" + decimalColor + "", 0.6)"";
        ctx.ellipse(cf, 200, mf, rf, 0, 0, 2 * Math.PI, false);
		ctx.strokeStyle = ""#666666"";
        ctx.stroke();
        ctx.fill();
		// if (labelSelect=='On') {
		ctx.save();
		ctx.fillStyle = ""#000000""; // Black
        ctx.font = '8px Arial'; // Set your desired font style
        ctx.textAlign = 'center';
		ctx.textBaseline = ""middle"";
        ctx.fillText(ssid, cf, 206-rf);
		ctx.restore();
		// }
		ctx.closePath();
    }
function getDisplayChannel(channelNum, channelWidth) {
    const centerFreq40MHz = [38, 46, 54, 62, 102, 110, 118, 126, 134, 142, 151, 159, 167, 175];
    const centerFreq80MHz = [42, 58, 106, 122, 138, 155, 163];
    if (channelWidth === 80) {
        let minDiff = Infinity;
        let bestChannel = null;

        for (let i = 0; i < centerFreq80MHz.length; i++) {
            const diff = Math.abs(channelNum - centerFreq80MHz[i]);
            if (diff < minDiff) {
                minDiff = diff;
                bestChannel = centerFreq80MHz[i];
            }
        }
        return bestChannel;
    } else if (channelWidth === 40) {
        let minDiff = Infinity;
        let bestChannel = null;

        for (let i = 0; i < centerFreq40MHz.length; i++) {
            const diff = Math.abs(channelNum - centerFreq40MHz[i]);
            if (diff < minDiff) {
                minDiff = diff;
                bestChannel = centerFreq40MHz[i];
            }
        }
        return bestChannel;
    }
    return null;
}
function sortByProperty(array, property) {
array.sort(function(a, b) {
return b[property] - a[property];
});
return array;
}
sg.populate = function() {
var added = 0;
var removed = 0;
var i, j, k, t, e, s;
if ((wlscandata.length == 1) && (!wlscandata[0][0])) {
setMsg('error: '+wlscandata[0][1]);
return;
}
clearCanvas('ellipses2');
clearCanvas('ellipses5');
drawBoard('ellipses2');
drawBoard('ellipses5');
var lim2=1;
var lim5=1;
// console.log(wlscandata);
for (i = 0; i < wlscandata.length; ++i) {
s = wlscandata[i];
// console.log(s);
e = null;
sortByProperty(entries, ""rssi"");
// console.log(entries);
for (j = 0; j < entries.length; ++j) {
if (entries[j].bssid == s[0]) {
e = entries[j];
break;
}
}
if (!e) {
++added;
e = {};
e.firstSeen = new Date();
entries.push(e);
}
e.lastSeen = new Date();
e.bssid = s[0];
if (s[1] === '') {
// e.ssid = ""\<\<\< H I D D E N \>\>\>"";
// e.ssid = ""HIDDEN"";
e.ssid = ""🥷"";
} else {
e.ssid = s[1];
}
e.channel = s[3];
e.channel = e.channel+'<br><small>'+s[9]+' GHz<\/small><br><small>'+s[4]+' MHz<\/small>';
e.rssi = s[2];
e.mhz = s[4];
e.cap = s[7]+ '<br>'+s[8];
e.rates = s[6];
if (e.rssi != -999) {
if (e.rssi >= -50)
e.qual = 100;
else if (e.rssi >= -80) 
e.qual = Math.round(24 + ((e.rssi + 80) * 26)/10);
else if (e.rssi >= -90) 
e.qual = Math.round(24 + ((e.rssi + 90) * 26)/10);
else
e.qual = 0;
}
else {
e.qual = -1;
}
}
t = E('expire-time').value;
if (t > 0) {
var cut = (new Date()).getTime() - (t * 1000);
for (i = 0; i < entries.length; ) {
if (entries[i].lastSeen.getTime() < cut) {
entries.splice(i, 1);
++removed;
}
else
++i;
}
}
drawFT();
for (i = 0; i < entries.length; ++i) {
var seen, m, mac;
e = entries[i];
seen = e.lastSeen.toWHMS();
if (useAjax()) {
m = Math.floor(((new Date()).getTime() - e.firstSeen.getTime()) / 60000);
if (m <= 10)
seen += '<br> <b><small>NEW ('+m+'m)<\/small><\/b>';
}
mac = e.bssid;
var chan = e.channel.split(""<"");
if (lim2<=limit && chan[0]<35) {
var decimalColor = hexToDecimal(colors[i]);
e.col = '<div style=""padding: 5px; width: 15px; height: 30px; background-color: rgba(' + decimalColor +', 0.8);""></div>';
drawEllipse(chan[0], e.mhz, (100+e.rssi), colors[i], e.ssid);
lim2++;
} else if (lim2>limit && chan[0]<35) {
e.col = '<div></div>';
} else if (lim5<=limit && chan[0]>35) {
var decimalColor = hexToDecimal(colors[i]);
e.col = '<div style=""padding: 5px; width: 15px; height: 30px; background-color: rgba(' + decimalColor +', 0.8);""></div>';
drawEllipse(chan[0], e.mhz, (100+e.rssi), colors[i], e.ssid);
lim5++;
} else if (lim5>limit && chan[0]>35) {
e.col = '<div></div>';
}

// console.log(chan[0]);
// console.log(lim2);
// console.log(lim5);
// console.log(e.col);

if (mac.match(/^(..):(..):(..)/))
mac = '<a href=""javascript:searchOUI(\''+RegExp.$1+'-'+RegExp.$2+'-'+RegExp.$3+'\','+i+')"" title=""OUI Search"">'+mac+'<\/a><div style=""display:none"" id=""gW_'+i+'"">&nbsp; <img src=""spin.gif"" alt="""" style=""vertical-align:middle""><\/div>';
sg.insert(-1, e, [ '<small>'+seen+'<\/small>', ''+e.col, ''+e.ssid, mac, (e.rssi < 0 ? e.rssi+' <small>dBm<\/small>' : ''),
(e.qual < 0 ? '' : '<small>'+e.qual+'<\/small> <img src=""bar'+MIN(MAX(Math.floor(e.qual / 12), 1), 6)+'.gif"" id=""bar_'+i+'"" alt="""">'),
''+e.channel, ''+e.cap, ''+e.rates], false);
}
drawCoordinates('ellipses2', -2, 17, 1, 13, 19, 1); //min, max, display min, display max, total num, increment
drawCoordinates('ellipses5', 32, 184, 36, 180, 38, 4);
s = '';
if (useAjax())
s = added+' added, '+removed+' removed, ';
s += entries.length+' total.';
s += '<br><br><small>Last updated: '+(new Date()).toWHMS()+'<\/small>';
setMsg(s);
wlscandata = [];
}
sg.sortCompare = function(a, b) {
var col = this.sortColumn;
var da = a.getRowData();
var db = b.getRowData();
var r;
switch (col) {
case 0:
r = -cmpDate(da.lastSeen, db.lastSeen);
break;
case 3:
r = cmpInt(da.rssi, db.rssi);
break;
case 4:
r = cmpInt(da.qual, db.qual);
break;
case 5:
r = cmpInt(da.channel, db.channel);
break;
default:
r = cmpText(a.cells[col].innerHTML, b.cells[col].innerHTML);
}
if (r == 0)
r = cmpText(da.bssid, db.bssid);
return this.sortAscending ? r : -r;
}
Date.prototype.toWHMS = function() {
return dayOfWeek[this.getDay()]+' '+this.getHours()+':'+this.getMinutes().pad(2)+ ':'+this.getSeconds().pad(2);
}
function setMsg(msg) {
elem.setInnerHTML(E('survey-msg'), msg);
}
function drawFT() {
	const me=0.95;
	const clocal=""#888888""
if (typeof wl0_r !== 'undefined' && wl0_r == 1 && wl0_m != 'sta') {
			if (wl0_w == 40) {
			var c=calculateCentralChannelForty(wl0_c, wl0_s);
			} else var c=wl0_c;
	drawEllipse(c, wl0_w, 100, clocal, wl0_d, me);
	}
if (typeof wl1_r !== 'undefined' && wl1_r == 1 && wl1_m != 'sta') {
			if (wl1_w == 40) {
			var c=calculateCentralChannelForty(wl1_c, wl1_s);
			} else var c=wl1_c;
			drawEllipse(wl1_c, wl1_w, 100, clocal, wl1_d, me);
	}
if (typeof wl2_r !== 'undefined' && wl2_r == 1 && wl2_m != 'sta' ) {
	drawEllipse(wl2_c, wl2_w, 100, clocal, wl2_d, me);
	}
<!-- drawEllipse('11',  '20', '80', '888888'); -->
<!-- drawEllipse('14',  '20', '80', '888888'); -->
<!-- drawEllipse('36',  '20', '80', '888888'); -->
<!-- drawEllipse(102,  40, 80, '888888'); -->
<!-- drawEllipse(120, 80, 80, '#888888'); -->
<!-- drawEllipse('176', '20', '80', '888888');  -->
}

function drawCoordinates(a, b, c, d, e, f, g) {
    // Get the canvas element
    var canvas = document.getElementById(a);
    var ctx = canvas.getContext('2d');
    var minX = b
    var maxX = c
	var minV = d
	var maxV = e
    var numDivisions = f;
    var incrementX = g;
const fontSize = 10; // Set your desired font size
const fontFamily = ""Arial Narrow""; // Set your desired narrow font family
    ctx.font = fontSize + ""px "" + fontFamily; // Set the font
    // Draw x-axis
    ctx.beginPath();	
    ctx.moveTo(0, canvas.height);
    ctx.lineTo(canvas.width, canvas.height);
	ctx.fillStyle = ""black"";
    ctx.textBaseline = ""bottom""; // Align text vertically at the middle		
if (a=='ellipses2') {
for (let i = 0; i <= numDivisions; i++) {
  let x;
  if (i === 0) {
    x = minX + 2 * incrementX;
  } else if (i === numDivisions) {
    x = maxX - 2 * incrementX;
  } else {
    x = minX + i * incrementX;
  }
  if (x >= 1 && x <= 13) {
    let xPos = (canvas.width / (maxX - minX)) * (x - minX);
	ctx.textAlign = ""center"";	
    ctx.fillText(x, xPos, canvas.height + 2);
  }
}
  	ctx.textAlign = ""center"";
    xPos = ( canvas.width / (maxX - minX)) * 16.6
 	ctx.fillText(14, xPos, canvas.height + 2);
}
else if (a=='ellipses5') {
for (let i = 0; i <= numDivisions; i++) {
  let x;
  if (i === 0) {
    x = minX + 1 * incrementX;
  } else if (i === numDivisions) {
    x = maxX - 1 * incrementX;
  } else {
    x = minX + (i + 1) * incrementX;
  }
  if (x >= 32 && x <= 64 || x >=100 && x <= 144 ) {
    let xPos = (canvas.width / (maxX - minX)) * (x - minX);
	ctx.textAlign = ""center"";
    ctx.fillText(x, xPos, canvas.height+2);
  }
}
for (let i = 0; i <= 38; i++) {
  let x;
  if (i === 0) {
    x = 33 + 1 * 4;
  } else if (i === 38) {
    x = 184 - 1 * 4;
  } else {
    x = 33 + (i + 1) * 4;
  }
  if (x >= 149 && x <= 177 ) {
    let xPos = (canvas.width / (184 - 33)) * (x - 33);
	ctx.textAlign = ""center"";
    ctx.fillText(x, xPos, canvas.height + 2);
  }
}
}
// draw y-axis
for (let i = 0; i < 11; i++) {
  let y;
  if (i === 0) {
    y = -10;
  } else {
    y = -10 * i;
  }
  
  if (y !== -100) { // Exclude -100 from being displayed
    let yPos = (canvas.height / 100) * (-y);
    // Draw x-axis	
    // ctx.textAlign = ""right"";
    ctx.textBaseline = ""middle""; // Align text vertically at the middle
    ctx.fillText(y.toString(), 6, yPos); // Adjust yPos for vertical centering
    ctx.fillText(y.toString(), 750, yPos); // Adjust yPos for vertical centering
  }
}

}
function drawBoard(can){
	var bw = 750;
	var bh = 200;
	// Padding
	var p = 0;
	var canvas = document.getElementById(can);
	var context = canvas.getContext(""2d"");	
	// Add sepia areas
	if (can == 'ellipses2') {
	    for (var x = 0; x <= bw; x += (canvas.width/19)) {
        context.moveTo(0.5 + x + p, p);
        context.lineTo(0.5 + x + p, bh + p);
    }
		    for (var x = 0; x <= bh; x += (canvas.height/10)) {
        context.moveTo(p, 0.5 + x + p);
        context.lineTo(bw + p, 0.5 + x + p);
    }
		context.strokeStyle = ""#eeeeee"";
		context.stroke();
		context.rect(0, 0, canvas.width/19*3, 200);
		context.rect(canvas.width/19*15, 0, canvas.width/19*11, 200);
		context.fillStyle = ""rgba(112,66,20,0.08)"";
		context.fill();
		context.rect(canvas.width/19*13, 0, canvas.width/19*15, 200);
		context.fillStyle = ""rgba(112,66,20,0.06)"";
		context.fill();
	}	
	else if (can == 'ellipses5') {
	    for (var x = 0; x <= bw; x += (canvas.width/38)) {
        context.moveTo(0.5 + x + p, p);
        context.lineTo(0.5 + x + p, bh + p);
    }
		    for (var x = 0; x <= bh; x += (canvas.height/10)) {
        context.moveTo(p, 0.5 + x + p);
        context.lineTo(bw + p, 0.5 + x + p);
    }
		context.strokeStyle = ""#eeeeee"";
		context.stroke();
		context.rect(0, 0, canvas.width/38, 200);
		context.rect(canvas.width/38*8, 0, canvas.width/38*9, 200);
		context.rect(canvas.width/38*36.25, 0, canvas.width, 200);
		context.fillStyle = ""rgba(112,66,20,0.08"";
		context.fill();
		context.rect(canvas.width/38*28.3, 0, canvas.width/38*0.6, 200);
		context.fillStyle = ""rgba(112,66,20,0.06)"";
		context.fill();		
	}
}
function clearCanvas(canvas) {
canvas = document.getElementById(canvas);
const ctx = canvas.getContext('2d');
ctx.clearRect(0, 0, canvas.width, canvas.height);
ctx.fillStyle = ""#fdfdfd"";
ctx.fillRect(0, 0, canvas.width, canvas.height);
}
function earlyInit() {
if (!useAjax())
E('expire-time').style.display = 'none';
sg.setup();
var expiretime = document.getElementById(""expire-time"");
expiretime.addEventListener(""change"", function() {
cookie.set(cprefix+'_expire_time', expiretime.selectedIndex);
});
}
function init() {
sg.recolor();
ref.initPage();
}
</script>
</head>
<body onload=""init()"">
<form action=""javascript:{}"">
<table id=""container"">
<tr><td colspan=""2"" id=""header"">
<div class=""title"">FreshTomato</div>
<div class=""version"">Version <% version(); %> on <% nv(""t_model_name""); %></div>
</td></tr>
<tr id=""body""><td id=""navi""><script>navi()</script></td>
<td id=""content"">
<div id=""ident""><% ident(); %> | <script>wikiLink();</script></div>
<div class=""tomato-chart"">Wireless Channel Congestion 2.4 GHz</div>
<canvas id=""ellipses2"" width=""756"" height=""200"" border=1></canvas>
<p>
<div class=""tomato-chart"">Wireless Channel Congestion 5 GHz</div>
<canvas id=""ellipses5"" width=""756"" height=""200"" border=1></canvas>
<p>
<div class=""section-title"">Wireless Site Survey</div>
<div class=""section"">
<div id=""survey-grid"" class=""tomato-grid""></div>
<div id=""survey-msg""></div>
<div id=""survey-warn"">
<script>
if ('<% wlclient(); %>' == '0')
document.write('<b>Warning:<\/b> Wireless connections to this router may be disrupted while using this tool.<br>');
</script>
<b>Note:</b> Wireless Survey will not show any results with WL filter turned on in 'permit only' mode.
</div>
</div>
<div id=""footer"">
<div id=""survey-controls"">
<img src=""spin.gif"" alt="""" id=""refresh-spinner"">
<script>
var expiretime = cookie.get(cprefix+'_expire_time');
// console.log(expiretime);
if (expiretime === null) { var expiretime = 0; }
genStdTimeList('expire-time', 'Expires = ♾️', 3);
genStdTimeList('refresh-time', 'One off', 3);
var dropdown = document.getElementById(""expire-time"");
dropdown.selectedIndex = expiretime;
</script>
<input type=""button"" value=""Refresh"" onclick=""ref.toggle()"" id=""refresh-button"">
</div>
</div>
</td></tr>
</table>
</form>
<script>earlyInit();</script>
</body>
</html>"
pxiRiXrE,Link OS,HendarOfficial,PHP,Wednesday 10th of April 2024 08:08:55 AM CDT,"http://drive.muavps.net/windows/Windows2012r2.gz
http://drive.muavps.net/windows/Windows2016.gz
http://drive.muavps.net/windows/Windows2019.gz
http://drive.muavps.net/windows/Windows2022.gz
http://drive.muavps.net/windows/windows10.gz
http://drive.muavps.net/windows/Windows7sp1-active.gz

user: datnguyentv
pass: Datnguyentv.com"
DV7P7qJB,MergeSort C# implementation,MIdabe,C#,Wednesday 10th of April 2024 07:57:29 AM CDT,"namespace MergeSort;

class Program
{
    static void Main(string[] args)
    {
        int[] arr = {5,2,4,6,1,3,2,6};
        MergeSort(arr, 0, arr.Length-1);
        foreach (int num in arr)
            Console.Write(num+"" "");
    }


    static void MergeSort(int[]arr, int left, int right)
    {
        if (left < right)
        {
            int mid = (left + right)/2; //C# автоматически берет целую часть от выражения (3/2 = 1)
            MergeSort(arr,left, mid);
            MergeSort(arr,mid+1,right);
            Merge(arr, left, mid, right);
        }

    }
    static void Merge(int[]arr, int left, int mid, int right)
    {
        int iterLeft = left, iterRight = mid+1;
        while (iterLeft <= mid && iterRight <=right)
        {
            if (arr[iterLeft] <= arr[iterRight])
                iterLeft++;
            else
            {
                int tmp = arr[iterRight];
                for (int i = iterRight; i >= iterLeft+1; i--)
                    arr[i] = arr[i-1];
                arr[iterLeft] = tmp;
                iterLeft++;
                mid++;
                iterRight++;
            }
        }
    }
}
"
bEckpxUb,Bind an id to bunny,bozhilov,JavaScript,Wednesday 10th of April 2024 07:55:38 AM CDT,"// You will have to figure out a type safe extension of the Sprite class to store the id.
// DB entries will hold their corresponding x, y points and ids.
// The sprite class will represent rooms and other entities.


import { Application, Assets, Sprite, SCALE_MODES } from 'pixi.js';

(async () =>
{
    // Create a new application
    const app = new Application();

    // Initialize the application
    await app.init({ background: '#1099bb', resizeTo: window });

    // Append the application canvas to the document body
    document.body.appendChild(app.canvas);

    // Load the bunny texture
    const texture = await Assets.load('https://pixijs.com/assets/bunny.png');

    // Set the texture's scale mode to nearest to preserve pixelation
    texture.baseTexture.scaleMode = SCALE_MODES.NEAREST;

    for (let i = 0; i < 10; i++)
    {
        createBunny(Math.floor(Math.random() * app.screen.width), Math.floor(Math.random() * app.screen.height), Math.floor(Math.random() * 696969));
    }

    function createBunny(x, y, id)
    {
        // Create our little bunny friend..
        const bunny = new Sprite(texture);

        // Enable the bunny to be interactive... this will allow it to respond to mouse and touch events
        bunny.eventMode = 'static';

        // This button mode will mean the hand cursor appears when you roll over the bunny with your mouse
        bunny.cursor = 'pointer';

        // Center the bunny's anchor point
        bunny.anchor.set(0.5);

        // Make it a bit bigger, so it's easier to grab
        bunny.scale.set(3);

        bunny.id = id;

        // Setup events for mouse + touch using the pointer events
        bunny.on('pointerdown', onDragStart, bunny);

        // Move the sprite to its designated position
        bunny.x = x;
        bunny.y = y;

        // Add it to the stage
        app.stage.addChild(bunny);
    }

    let dragTarget = null;

    app.stage.eventMode = 'static';
    app.stage.hitArea = app.screen;
    app.stage.on('pointerup', onDragEnd);
    app.stage.on('pointerupoutside', onDragEnd);

    function onDragMove(event)
    {
        if (dragTarget)
        {
            dragTarget.parent.toLocal(event.global, null, dragTarget.position);
        }
    }

    function onDragStart()
    {
        // Store a reference to the data
        // * The reason for this is because of multitouch *
        // * We want to track the movement of this particular touch *
        this.alpha = 0.5;
        dragTarget = this;
        app.stage.on('pointermove', onDragMove);
    }

    function onDragEnd()
    {
        if (dragTarget)
        {
            console.log(""dragTarget"", dragTarget.id)
            app.stage.off('pointermove', onDragMove);
            dragTarget.alpha = 1;
            dragTarget = null;
        }
    }
})();"
qDB8xc8W,cars.json mod script,sandervspl,TypeScript,Wednesday 10th of April 2024 07:39:00 AM CDT,"import { getCachedData, saveCachedData } from ""./cache.js"";
import { Address, CarWithCoordinates } from ""./types.js"";

const cars: CarWithCoordinates[] = getCachedData(""cars"");

type Cache = Record<string, { lat: number; lon: number }>;

function updateOwnershipCoordinates(cars: CarWithCoordinates[]): void {
  const addressCache: Cache = {};

  // Build a cache from available coordinates in any car_ownership
  for (const car of cars) {
    for (const ownership of car.car_ownership) {
      if (
        ownership.address &&
        ownership.address.lat !== undefined &&
        ownership.address.lon !== undefined
      ) {
        const addressKey = getAddressKey(ownership.address);
        if (addressKey == null) {
          console.log(""no key found for"", ownership.address);
          continue;
        }
        addressCache[addressKey] = {
          lat: ownership.address.lat,
          lon: ownership.address.lon,
        };
      }
    }
  }

  // Use the cache to populate missing coordinates in car_ownership
  for (const car of cars) {
    for (const ownership of car.car_ownership) {
      if (
        ownership.address &&
        (ownership.address.lat === undefined ||
          ownership.address.lon === undefined)
      ) {
        const addressKey = getAddressKey(ownership.address);
        if (addressKey == null) {
          console.log(""no key found for"", ownership.address);
          continue;
        }
        const cachedCoords = addressCache[addressKey];
        if (cachedCoords) {
          ownership.address.lat = cachedCoords.lat;
          ownership.address.lon = cachedCoords.lon;
        }
      }
    }
  }
}

function getAddressKey(address: Address) {
  // Create a unique key for each address based on its distinguishable properties
  return address.postal_code?.replaceAll("" "", """");
}

// Overwrite cars.json with new data
updateOwnershipCoordinates(cars);

saveCachedData(""cars"", cars);"
LtzhkDBq,testing-alert,zombiesByte,JavaScript,Wednesday 10th of April 2024 07:04:36 AM CDT,alert('frompastebin');
UkB7A0R6,邀您一起看：增加 | 聚阅接口,xiaomianao666,JavaScript,Wednesday 10th of April 2024 06:54:30 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥增加 | 聚阅接口@@
a5DP5sLK,target_practice.lua,opencomputerstest2,Lua,Wednesday 10th of April 2024 06:14:38 AM CDT,"local m = peripheral.find(""monitor"")
local hits = {}

m.setTextScale(1)

local function getHit()
	local ret
	repeat
		os.pullEvent(""redstone"")
		ret = rs.getAnalogInput(""right"")
	until ret ~= 0
	return ret
end

local function avg(t)
  local sum=0
  for k,v in pairs(t) do
      sum = sum + v
  end
  return (sum / #t)
end
	
while true do
	local lastHit = getHit()
	table.insert(hits,lastHit)
	m.clear()
	m.setCursorPos(1,1)
	m.write(lastHit)
	m.setCursorPos(1,2)
	m.write(avg(hits))
end"
RArErGcx,data892,TestGuy1,JSON,Wednesday 10th of April 2024 06:00:08 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '3104989d96418ed7ce0f1d0f697c9e41728e38e9e969802634ad3d4d407174cc28d6f36d84393749803e33e5224ac0450290a28d79bfe3541cede24be351f944fa8702ee5ab9044c7cac9f4ac7e8eaa36d1eb868d5a1ce844a363f0e29feeef9dc5659188ac4e5f7df6ceae68fdb14127f7a5014439820c76f9c1c85891f96c3',
  otherdata: [
    '1d7d93afcf7d2d84fb870128cc4c4ea0',
    '495c56c403044c7928c7108618bfa0cc',
    '35647c49c23f1d14d6592b9af62de2c1',
    '35562a6004b761c018b0c51af25f4397',
    '5906ff27500c2a9b755b7d3e2397760b',
    '1bcb3f223cfd26fc2929656cc2fd0c3a',
    'a0b32e2e6c795011951a800b78f93da4',
    '06c36e2979c409c1d8b5b68c2b276973'
  ]
}"
VxCfxRG9,Mad,Unknown_No_1,PHP,Wednesday 10th of April 2024 05:54:24 AM CDT,EidMubarakToEveryOne
YwFNuax7,Roblox Player List and Server Info,scriptingtales,Lua,Wednesday 10th of April 2024 05:03:53 AM CDT,"Part0 = Instance.new(""Part"")
SurfaceGui1 = Instance.new(""SurfaceGui"")
TextLabel2 = Instance.new(""TextLabel"")
ScrollingFrame3 = Instance.new(""ScrollingFrame"")
UIListLayout4 = Instance.new(""UIListLayout"")
TextLabel5 = Instance.new(""TextLabel"")
ImageLabel6 = Instance.new(""ImageLabel"")
TextLabel7 = Instance.new(""TextLabel"")
TextLabel8 = Instance.new(""TextLabel"")
TextLabel9 = Instance.new(""TextLabel"")
Frame10 = Instance.new(""Frame"")
TextLabel11 = Instance.new(""TextLabel"")
CreditsLabel = Instance.new(""TextLabel"")


Part0.Name = ""LocInfo""
Part0.Parent = script
Part0.CFrame = CFrame.new(-9.5, 13, -0.5, 1, 0, 0, 0, 1, 0, 0, 0, 1)
Part0.Position = Vector3.new(0, 13, 25)
Part0.Color = Color3.new(0.0666667, 0.0666667, 0.0666667)
Part0.Size = Vector3.new(35, 26, 0.10000000149011612)
Part0.Anchored = true
Part0.BottomSurface = Enum.SurfaceType.Smooth
Part0.BrickColor = BrickColor.new(""Really black"")
Part0.TopSurface = Enum.SurfaceType.Smooth
Part0.brickColor = BrickColor.new(""Really black"")
SurfaceGui1.Name = ""Info""
SurfaceGui1.Parent = Part0
SurfaceGui1.ClipsDescendants = true
SurfaceGui1.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
SurfaceGui1.MaxDistance = 1000
TextLabel2.Name = ""Players""
TextLabel2.Parent = SurfaceGui1
TextLabel2.Position = UDim2.new(0, 25, 0, 20)
TextLabel2.Size = UDim2.new(0, 672, 0, 83)
TextLabel2.BackgroundColor = BrickColor.new(""Institutional white"")
TextLabel2.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel2.BackgroundTransparency = 1
TextLabel2.BorderColor = BrickColor.new(""Really black"")
TextLabel2.BorderColor3 = Color3.new(0, 0, 0)
TextLabel2.BorderSizePixel = 0
TextLabel2.Font = Enum.Font.GothamBold
TextLabel2.FontSize = Enum.FontSize.Size14
TextLabel2.Text = ""Players""
TextLabel2.TextColor = BrickColor.new(""Institutional white"")
TextLabel2.TextColor3 = Color3.new(1, 1, 1)
TextLabel2.TextScaled = true
TextLabel2.TextSize = 14
TextLabel2.TextWrap = true
TextLabel2.TextWrapped = true
ScrollingFrame3.Name = ""MainFrame""
ScrollingFrame3.Parent = SurfaceGui1
ScrollingFrame3.Position = UDim2.new(0, 0, 0, 125)
ScrollingFrame3.Size = UDim2.new(0, 725, 0, 1300)
ScrollingFrame3.Active = true
ScrollingFrame3.BackgroundColor = BrickColor.new(""Earth green"")
ScrollingFrame3.BackgroundColor3 = Color3.new(0.215686, 0.215686, 0.215686)
ScrollingFrame3.BorderColor = BrickColor.new(""Really black"")
ScrollingFrame3.BorderColor3 = Color3.new(0, 0, 0)
ScrollingFrame3.BorderSizePixel = 0
UIListLayout4.Parent = ScrollingFrame3
UIListLayout4.HorizontalAlignment = Enum.HorizontalAlignment.Right
UIListLayout4.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout4.Padding = UDim.new(0, 25)
TextLabel5.Name = ""MAINLB""
TextLabel5.Position = UDim2.new(0.206896558, 0, 0, 0)
TextLabel5.Size = UDim2.new(0, 575, 0, 150)
TextLabel5.BackgroundColor = BrickColor.new(""Really black"")
TextLabel5.BackgroundColor3 = Color3.new(0, 0, 0)
TextLabel5.BackgroundTransparency = 0.5
TextLabel5.BorderColor = BrickColor.new(""Crimson"")
TextLabel5.BorderColor3 = Color3.new(0.666667, 0, 0)
TextLabel5.BorderSizePixel = 0
TextLabel5.Font = Enum.Font.GothamBold
TextLabel5.FontSize = Enum.FontSize.Size18
TextLabel5.Text = ""Player1""
TextLabel5.TextColor = BrickColor.new(""Institutional white"")
TextLabel5.TextColor3 = Color3.new(1, 1, 1)
TextLabel5.TextScaled = true
TextLabel5.TextSize = 15
TextLabel5.TextStrokeColor3 = Color3.new(1, 1, 1)
TextLabel5.TextWrap = true
TextLabel5.TextWrapped = true
TextLabel5.TextYAlignment = Enum.TextYAlignment.Top
ImageLabel6.Name = ""Headshot""
ImageLabel6.Parent = TextLabel5
ImageLabel6.Position = UDim2.new(0, -150, 0, 0)
ImageLabel6.Size = UDim2.new(0, 150, 0, 150)
ImageLabel6.BackgroundColor = BrickColor.new(""Institutional white"")
ImageLabel6.BackgroundColor3 = Color3.new(1, 1, 1)
ImageLabel6.BorderColor = BrickColor.new(""Really black"")
ImageLabel6.BorderColor3 = Color3.new(0, 0, 0)
ImageLabel6.BorderSizePixel = 0
ImageLabel6.Image = ""rbxasset://textures/ui/GuiImagePlaceholder.png""
TextLabel7.Name = ""Country""
TextLabel7.Parent = TextLabel5
TextLabel7.Position = UDim2.new(0.0142667573, 0, 0.690058112, 0)
TextLabel7.Size = UDim2.new(0.546202123, 0, 0.304063827, 0)
TextLabel7.BackgroundColor = BrickColor.new(""Really black"")
TextLabel7.BackgroundColor3 = Color3.new(0, 0, 0)
TextLabel7.BackgroundTransparency = 1
TextLabel7.BorderColor = BrickColor.new(""Crimson"")
TextLabel7.BorderColor3 = Color3.new(0.666667, 0, 0)
TextLabel7.BorderSizePixel = 0
TextLabel7.Font = Enum.Font.GothamBold
TextLabel7.FontSize = Enum.FontSize.Size14
TextLabel7.Text = ""[KR] Krakozhia""
TextLabel7.TextColor = BrickColor.new(""Institutional white"")
TextLabel7.TextColor3 = Color3.new(1, 1, 1)
TextLabel7.TextScaled = true
TextLabel7.TextSize = 14
TextLabel7.TextStrokeColor3 = Color3.new(1, 1, 1)
TextLabel7.TextWrap = true
TextLabel7.TextWrapped = true
TextLabel8.Name = ""Ping""
TextLabel8.Parent = TextLabel5
TextLabel8.Position = UDim2.new(0.560468912, 0, 0.690058172, 0)
TextLabel8.Size = UDim2.new(0.426111728, 0, 0.304063857, 0)
TextLabel8.BackgroundColor = BrickColor.new(""Really black"")
TextLabel8.BackgroundColor3 = Color3.new(0, 0, 0)
TextLabel8.BackgroundTransparency = 1
TextLabel8.BorderColor = BrickColor.new(""Crimson"")
TextLabel8.BorderColor3 = Color3.new(0.666667, 0, 0)
TextLabel8.BorderSizePixel = 0
TextLabel8.Font = Enum.Font.GothamBold
TextLabel8.FontSize = Enum.FontSize.Size14
TextLabel8.Text = ""NaN ms""
TextLabel8.TextColor = BrickColor.new(""Institutional white"")
TextLabel8.TextColor3 = Color3.new(1, 1, 1)
TextLabel8.TextScaled = true
TextLabel8.TextSize = 14
TextLabel8.TextStrokeColor3 = Color3.new(1, 1, 1)
TextLabel8.TextWrap = true
TextLabel8.TextWrapped = true
TextLabel9.Name = ""ServerInfo""
TextLabel9.Parent = SurfaceGui1
TextLabel9.Position = UDim2.new(0, 725, 0, 0)
TextLabel9.Size = UDim2.new(0, 1025, 0, 125)
TextLabel9.BackgroundColor = BrickColor.new(""Institutional white"")
TextLabel9.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel9.BackgroundTransparency = 1
TextLabel9.BorderColor = BrickColor.new(""Really black"")
TextLabel9.BorderColor3 = Color3.new(0, 0, 0)
TextLabel9.BorderSizePixel = 0
TextLabel9.Font = Enum.Font.GothamBold
TextLabel9.FontSize = Enum.FontSize.Size14
TextLabel9.Text = ""Server Info""
TextLabel9.TextColor = BrickColor.new(""Institutional white"")
TextLabel9.TextColor3 = Color3.new(1, 1, 1)
TextLabel9.TextScaled = true
TextLabel9.TextSize = 14
TextLabel9.TextWrap = true
TextLabel9.TextWrapped = true
Frame10.Name = ""InfoGDisplayer""
Frame10.Parent = SurfaceGui1
Frame10.Position = UDim2.new(0, 725, 0, 125)
Frame10.Size = UDim2.new(0, 1025, 0, 1175)
Frame10.BackgroundColor = BrickColor.new(""Medium brown"")
Frame10.BackgroundColor3 = Color3.new(0.235294, 0.235294, 0.235294)
Frame10.BorderColor = BrickColor.new(""Really black"")
Frame10.BorderColor3 = Color3.new(0, 0, 0)
Frame10.BorderSizePixel = 0
TextLabel11.Name = ""ServerLocation""
TextLabel11.Parent = Frame10
TextLabel11.Position = UDim2.new(0, 0, 0, 0)
TextLabel11.Size = UDim2.new(0, 1025, 0, 1175)
TextLabel11.BackgroundColor = BrickColor.new(""Institutional white"")
TextLabel11.BackgroundColor3 = Color3.new(1, 1, 1)
TextLabel11.BackgroundTransparency = 1
TextLabel11.BorderColor = BrickColor.new(""Really black"")
TextLabel11.BorderColor3 = Color3.new(0, 0, 0)
TextLabel11.BorderSizePixel = 0
TextLabel11.Font = Enum.Font.SourceSans
TextLabel11.FontSize = Enum.FontSize.Size60
TextLabel11.Text = """"
TextLabel11.TextColor = BrickColor.new(""Institutional white"")
TextLabel11.TextColor3 = Color3.new(1, 1, 1)
TextLabel11.TextSize = 60
TextLabel11.TextWrap = true
TextLabel11.TextWrapped = true
TextLabel11.TextXAlignment = Enum.TextXAlignment.Left
CreditsLabel.Name = ""Credits""
CreditsLabel.Position = UDim2.new(0, 625, 0, 1100)
CreditsLabel.Parent = Frame10
CreditsLabel.Size = UDim2.new(0, 400, 0, 75)
CreditsLabel.BackgroundTransparency = 1
CreditsLabel.Font = Enum.Font.GothamMedium
CreditsLabel.Text = ""Credits to Kaiji#7888""
CreditsLabel.TextColor3 = Color3.fromRGB(122, 122, 122)
CreditsLabel.TextScaled = true
CreditsLabel.FontFace.Style = Enum.FontStyle.Italic

SurfaceGui1.SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud



local HttpDoServicio = game:GetService(""HttpService"")



local success, result = pcall(function()
	return HttpDoServicio:GetAsync(""http://country.io/names.json"")
end)

if success and result then
	Countries = HttpDoServicio:JSONDecode(result)
end


local url = ""http://ip-api.com/json/""


local getasyncinfo = HttpDoServicio:GetAsync(url)
local decodedinfo = HttpDoServicio:JSONDecode(getasyncinfo)




TextLabel11.Text = ""Server Details""..""\n\n""
	..""Location: ""..decodedinfo[""country""]..""\n""
	..""Country Code: ""..decodedinfo[""countryCode""]..""\n""
	..""Region: ""..decodedinfo[""region""]..""\n""
	..""Region Name: ""..decodedinfo[""regionName""]..""\n""
	..""Timezone: ""..decodedinfo[""timezone""]..""\n\n""
	..""City: ""..decodedinfo[""city""]..""\n""
	..""Zip Code: ""..decodedinfo[""zip""]..""\n\n""
	..""Latitude: ""..decodedinfo[""lat""]..""\n""
	..""Longitude: ""..decodedinfo[""lon""]..""\n\n""
	..""ISP: ""..decodedinfo[""isp""]..""\n""
	..""Autonomous System: ""..decodedinfo[""as""]..""\n""
	..""Query: ""..decodedinfo[""query""]..""\n""




while true do
	for i,plr:Player in ipairs(game.Players:GetChildren()) do
		local LocalizationService = game:GetService(""LocalizationService"")
		local Players = game:GetService(""Players"")
		
		local clone = TextLabel5:Clone()
		clone.Name = 'CloneTemplate'
		clone.Parent = ScrollingFrame3
		task.wait()
		clone.LayoutOrder = i
		clone.Visible = true
		clone.Text = plr.Name

		local success, code = pcall(LocalizationService.GetCountryRegionForPlayerAsync, LocalizationService, plr)
		if success and code then
			clone.Country.Text = ""[""..code..""] ""..tostring(Countries[code]) 
		end
		function roundNumber(num, numDecimalPlaces)
			return tonumber(string.format(""%."" .. (numDecimalPlaces or 0) .. ""f"", num))
		end
		clone.Ping.Text = roundNumber((plr:GetNetworkPing()*1000),1) .."" ms""

		local thumbType = Enum.ThumbnailType.HeadShot
		local thumbSize = Enum.ThumbnailSize.Size420x420
		local content, isReady = Players:GetUserThumbnailAsync(plr.UserId, thumbType, thumbSize)
		clone.Headshot.Image = content

	end
	task.wait(5)
	for _,v in ipairs(ScrollingFrame3:GetChildren()) do
		if v:IsA(""TextLabel"") and v.Name == ""CloneTemplate"" then
			v:Destroy()
		end
	end
end"
CR7LCxGR,邀您一起看：自定义投屏,xiaomianao666,JavaScript,Wednesday 10th of April 2024 04:57:23 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥自定义投屏@@
hN5y0wwJ,邀您一起看：今夕,xiaomianao666,JavaScript,Wednesday 10th of April 2024 04:42:03 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥今夕@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5oiR55qE5Li76aG1XCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImZpbGU6Ly8vc3RvcmFnZS9lbXVsYXRlZC8wL0FuZHJvaWQvZGF0YS9jb20uZXhhbXBsZS5oaWtlcnZpZXcvZmlsZXMvRG9jdW1lbnRzL25ld1BsYW5Ib21lLmh0bWwjbm9SZWNvcmRIaXN0b3J5I1xcXCIsXFxuZGVzYzpcXFwiMTAwJSYmZmxvYXRcXFwiLFxcbmV4dHJhOntjYW5CYWNrOiB0cnVlfVxcbn1dKTtcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInBhZ2VzXCI6XCJbXVwifSIsInRpdGxlIjoi5LuK5aSVIn0=
nYG3Ft23,stupid lcd,DanielKrastev-bit,Arduino,Wednesday 10th of April 2024 04:19:54 AM CDT,"#include <Wire.h>
#include <LiquidCrystal_I2C.h>

// Set the LCD address to 0x27 for a 16 chars and 2 line display
LiquidCrystal_I2C lcd(0x27, 16, 2);

void setup() {
  // Initialize the LCD with the I2C address and dimensions
  lcd.init();
  // Turn on the backlight (if available on your module)
  lcd.backlight();
  // Print a message to the LCD.
  lcd.print(""Hello, World!"");
}

void loop() {
  // Nothing here for a one-time display
}
"
LqYGKzi0,Untitled,PandaGreen,C#,Wednesday 10th of April 2024 04:13:38 AM CDT,"using System;
using System.IO;
using System.Text;

namespace itProger {
    class Program {
        static void Main(string[] args) {
            string file_name = @""text.txt"";
            string words = ""Some new information"";

            FileStream fs = File.Open(file_name, FileMode.Create);
            byte[] writeStrByte = Encoding.Default.GetBytes(words);

            fs.Write(writeStrByte, 0, writeStrByte.Length);

            fs.Position = 0;
            
			//Вот здесь не понимаю зачем нужен ещё один массив
            byte[] readStrByte = new byte[writeStrByte.Length];
			// Зачем создавать ещё один байтовый массив? В консоли проверял, результат один и тот же
            for (int i = 0; i < writeStrByte.Length; i++)
                readStrByte[i] = (byte)fs.ReadByte();
            
            Console.WriteLine(Encoding.Default.GetString(readStrByte));

            fs.Close();

            Console.ReadKey();
        }

    }
}"
s9H6P1aY,SGD format v001,plirof2,JavaScript,Wednesday 10th of April 2024 04:03:27 AM CDT,"I have a DOS ascii text database file with the specification I give below. Each line is one record.
Can you make me a PHP script that reads a file,speperates fields and prints them on screen?
The current database format is:

Field        Start Length  Notes

Name             1     36
Year            38      4  Year-2000 compliant :-)
Publisher       43     36
Memory          80      3  Either one of "" 16"", "" 48"", ""128"", ""4/1"", ""US0"",
                           "" +2"", "" +3"" or ""Pen""
# Players       84      1
Together        86      1  Only 'Y' if > 1 player, space otherwise
Joysticks       88      5  Shrunk leftward, order is 'K12CR' for
                           Kempston, Intf2#1, Intf2#2, Cursor and Redefineable.
PC-Name         94     12  The '.'s are aligned (raw name padded)
Type           107      7
PathIndex      115      3  Index number of the appropriate `GameDir' entry
FileSize       119      7  Is '+' if the size has more than 7 digits
Orig screen    127      1  'Y' if checked, space otherwise
Origin         129      1  ' ' = (unknown)
                           'O' = Original release
                           'R' = Re-release
                           'C' = Compilation release
                           'M' = Magazine conver-tape version
                           'T' = Type-in
                           'H' = Hacked/cracked version
                           'I' = Incomplete version
                           'B' = Buggered/corrupted version
FloppyId       131      4  Marked floppy number, or 0 for harddisk etc.
Emul override  136      2  -1 = none
                           0  = Z80
                           1  = JPP
                           2  = Warajevo
                           3  = X128
                           4  = WSpecEm
                           5  = ZX
                           6  = Spanish
                           7  = ZX-32
                           8  = R80
                           9  = Russian/Shalayev
                           10 = Russian/Yudin
AYSound        139      1  'Y' if checked, space otherwise
MultiLoad      141      1  'Y' if multi-load in both 48K and 128K mode
                           '4' if multi-load only in 48K mode
                           ' ' if not multi-load at all
Language       143      3
Score          147      3  0  = not set
Author         151    100

All fields are seperated with 1 space, each line is exactly 250 characters.
Numerical fields are aligned right, plain text fields are aligned left."
NFvueed2,Venyx Ui Lib,hacimiks,Lua,Wednesday 10th of April 2024 04:01:29 AM CDT,"local library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/aoki0x/UI-Libraries/main/Azure/source.lua"", true))();
local run = game:service(""RunService"");
local runcon;players=game:service(""Players"");
player=players.LocalPlayer;camera=workspace.CurrentCamera;
local uis=game:service(""UserInputService"");
local curc;
local mouse=player:GetMouse();
local toggles={abk=Enum.UserInputType.MouseButton2;iag=false;};local traced={};local tsp=Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2 + 400);local gs=game:GetService(""GuiService""):GetGuiInset();local sc=Vector2.new(camera.ViewportSize.X/2,camera.ViewportSize.Y/2);local mousemoverel = mousemoverel or Input.MoveMouse;local hookfunction = hookfunction or detour_function or replaceclosure;local getnamecallmethod=getnamecallmethod or get_namecall_method;
local combat = library:CreateWindow('Aimbot');
local visuals = library:CreateWindow('Visuals');
visuals:Section('ESP');
visuals:Toggle('Tracers', {location = toggles,flag = ""tracers""})
visuals:Toggle('Name ESP' ,{location = toggles ,flag = ""nESP""});
visuals:Toggle('Box ESP' ,{location = toggles ,flag = ""hESP""});
combat:Section('Aimbot')
combat:Toggle('Aimbot',{location=toggles,flag='aimbot'});
combat:Bind('Aimbot Hotkey', {location=toggles, flag='abk', kbonly=false, default=Enum.UserInputType.MouseButton2},
function(k,b)
    toggles.iag=b;
end);
combat:Dropdown('Aimpart', {location=toggles,flag='abp', list={""Head"",""UpperTorso"",""LowerTorso"",""HumanoidRootPart""}});
combat:Toggle('Draw FOV circle', {location=toggles, flag='showfov'})
combat:Toggle('Filled FOV circle', {location=toggles, flag='filled'})
combat:Slider('FOV', {location=toggles, flag='fov', precise=false, default=50, min=50, max=500});
function createline()
	local a=Drawing.new(""Line"");a.Thickness=1.5;a.Transparency=1;a.Visible=true;a.Color=Color3.fromRGB(0,240,90);
    a.From=tsp;
    return a;
end;
function createname(text)
    local a=Drawing.new(""Text"");a.Transparency=1;a.Visible=true;a.Color=Color3.fromRGB(0,240,90);a.Text=text;a.Size=15;
    return a;   
end;
function createcircle()
    local a=Drawing.new('Circle');a.Transparency=0.3;a.Thickness=1.5;a.Visible=true;a.Color=Color3.fromRGB(0,240,90);a.Filled=false;a.Radius=toggles.fov;
    return a;
end;
function createsquare()
    local a=Drawing.new('Square');a.Transparency=1;a.Thickness=1.5;a.Visible=true;a.Color=Color3.fromRGB(0,240,90);a.Filled=false;
    return a;
end;
curc=createcircle();
function isInTeam(char)
	if player and players:GetPlayerFromCharacter(char) and players:GetPlayerFromCharacter(char).Team and player.Team then
		if player.FriendlyFire.Value then
			return false;
		else
			return (player.Team==players:GetPlayerFromCharacter(char).Team);
		end;	
	end;
end;
local gc = function()
	local nearest = math.huge
	local nearplr;
	for i,v in pairs(players:GetPlayers()) do
		if v ~= player and v.Character and not isInTeam(v.Character) and v.Character:FindFirstChild(toggles.abp) then
			local pos = camera:WorldToScreenPoint(v.Character[toggles.abp].Position)
			local diff = math.sqrt((pos.X - sc.X)^2 + (pos.Y+gs.Y - sc.Y)^2)
			if diff < nearest and diff < toggles.fov then
				nearest=diff;
				nearplr=v;
			end
		end;
	end;
	return nearplr
end;
local getrel = function(x, y)
	local newy;
	local newy;
	if x > sc.X then
		newx = -(sc.X - x)
		newx = newx/5
	else
		newx = x - sc.X
		newx = newx/5
	end;
	if y > sc.Y then
		newy = -(sc.Y - y)
		newy = newy/5
	else
		newy = y - sc.Y
		newy = newy/5
	end;
	return newx, newy
end;

run.Stepped:Connect(function()
    spawn(function()
        for i,v in pairs(players:GetChildren()) do
            if v.Character and v.Character:FindFirstChild(toggles.abp) and (not isInTeam(v.Character)) and (toggles.tracers or toggles.nESP or toggles.hESP) then
                if not traced[v.Name] then
                    traced[v.Name]={v.Character};    
                end;  
                local vector, onScreen= camera:WorldToScreenPoint(v.Character[toggles.abp].Position)
                if toggles.tracers then
                    if traced[v.Name][2] then
                        traced[v.Name][2].Visible=(onScreen and toggles.tracers);traced[v.Name][2].To=Vector2.new(vector.X, vector.Y+gs.Y);	
                    else
                        traced[v.Name][2]=createline();traced[v.Name][2].Visible=(onScreen and toggles.tracers);traced[v.Name][2].To=Vector2.new(vector.X, vector.Y+gs.Y);
                    end;
                end;
                if toggles.nESP then    
                    if traced[v.Name][3] then
                        traced[v.Name][3].Visible=(onScreen and toggles.nESP);traced[v.Name][3].Position=Vector2.new(vector.X, vector.Y+(gs.Y/2));	
                    else
                        traced[v.Name][3]=createname(v.Name);traced[v.Name][3].Visible=(onScreen and toggles.nESP);traced[v.Name][3].Position=Vector2.new(vector.X, vector.Y+(gs.Y/2));
                    end;   
				end;
				if toggles.hESP then
					if traced[v.Name][4] then
                        traced[v.Name][4].Visible=(onScreen and toggles.hESP);traced[v.Name][4].Size=Vector2.new(1400/vector.Z,1400/vector.Z);traced[v.Name][4].Position=Vector2.new((vector.X)-traced[v.Name][4].Size.X/2, (vector.Y+(gs.Y))-traced[v.Name][4].Size.Y/2);
                    else
                        traced[v.Name][4]=createsquare();traced[v.Name][4].Visible=(onScreen and toggles.hESP);traced[v.Name][4].Size=Vector2.new(1400/vector.Z,1400/vector.Z);traced[v.Name][4].Position=Vector2.new((vector.X)-traced[v.Name][4].Size.X/2, (vector.Y+(gs.Y))-traced[v.Name][4].Size.Y/2);
                    end; 
				end		
            else
                if traced[v.Name] then
                    if traced[v.Name][2] then
                        traced[v.Name][2]:Remove();traced[v.Name][2]=nil;
                    end;   
                    if traced[v.Name][3] then
                        traced[v.Name][3]:Remove();traced[v.Name][3]=nil;
					end
					if traced[v.Name][4] then
                        traced[v.Name][4]:Remove();traced[v.Name][4]=nil;
                    end
                end;   
            end;    
        end;       
    end);
    spawn(function()
        if toggles.showfov then
            curc.Visible=true;curc.Position = Vector2.new(mouse.X, mouse.Y+gs.Y);curc.Radius=toggles.fov;
        else
            curc.Visible=false;
        end;    
    end);
    spawn(function()
        if toggles.filled then
            toggles.showfov = true
            curc.Filled = true
        else
            curc.Filled = false
        end 
    end)
    spawn(function()
        if toggles.aimbot and toggles.iag then
            if gc()~=nil and gc().Character:FindFirstChild(toggles.abp) then
                local pos=camera:WorldToScreenPoint(gc().Character[toggles.abp].Position)
                local x,y=getrel(pos.X, pos.Y+gs.Y)
                mousemoverel(x,y)
            end;
        end;    
    end);   
end);    
local fr;
players.PlayerRemoving:Connect(function(p)
    if traced[p.Name] then 
        if traced[p.Name][2] then 
            traced[p.Name][2]:Remove();traced[p.Name][2]=nil;
        end;
        if traced[p.Name][3] then
             traced[p.Name][3]:Remove();traced[p.Name][3]=nil;
            end;
            if traced[p.Name][4] then 
                traced[p.Name][4]:Remove();traced[p.Name][4]=nil;
            end;traced[p.Name]=nil;
        end;
    end);"
72jwLJiZ,Untitled,KoctrX,JSON,Wednesday 10th of April 2024 03:48:05 AM CDT,"{
    ""input"": {
        ""input"": ""How are you"",
        ""chat_history"": [
            [
                ""Hello"",
                ""How can I help you today?""
            ],
            [
                ""How are you?"",
                ""I'm doing well, thank you. How about you?\\n""
            ],
            [
                ""how old are you?"",
                ""I'm 20 years old. How about you?\\\\n\\n""
            ],
            [
                "" Hair style?"",
                ""My hair is blonde and straight. How about you?\\\\\\\\n\\\\n\\n""
            ],
            [
                ""your hobbies?"",
                ""I enjoy writing, cars, and art. What about you?\\\\\\\\\\\\\\\\n\\\\\\\\n\\\\n\\n""
            ],
            [
                ""Breast size?"",
                ""I have large breasts. What about you?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\n\\\\n\\n""
            ],
            [
                ""your Body type ?"",
                ""I have a fit body with medium buttocks and large breasts. What about you?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\n\\\\n\\n""
            ],
            [
                ""Personality?"",
                ""I'm a caregiver girl who creates a safe and secure environment. What about you?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\n\\\\n\\n""
            ],
            [
                ""Personality?"",
                ""I'm a warm and encouraging person who always offers help. What about you
            ],
            [
                "" Hair style?"",
                ""My hair is blonde and straight. How about you?\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\""
            ],
            [
                ""Age?"",
                """"
            ],
            [
                ""Personality?"",
                """"
            ]
        ],
        ""plist"": ""[Jane Doe's appearance: latina girl, green eyes, blonde hair styled in straight, fit body, medium butt, large breasts, wearing secretary;\nOccupation: model;\nHobbies: writing, cars, art;\nJane Doe's persona: 20s age, caregiver girl, finds fulfillment in helping and nurturing others;\nRelationship: Jane Doe and null null are stranger;\nRelationship detail: enigmatic, unnamed, unacquainted, unrecognized, unfamiliar, unfathomed, anonymous, aloof, foreign, anonymous;\nTag: considerate, shared experiences, encouraging, trust, generous;\nWorld scenario: Jane Doe is a flirtatious girl who always uses dirty words to talk, Jane Doe is talking with null null. Jane Doe and null null are two persons find themselves amidst a street. Jane Doe attentively listens and offers proactive assistance to null null, keeping their responses concise and helpful. Answer less than 25 words.]"",
        ""seed_history"": [
            [
                ""What's your preferred name?"",
                ""I go by the name Jane Doe.""
            ],
            [
                ""What's my name?"",
                ""How could I forget you? You're null null.""
            ],
            [
                ""Where are we?"",
                ""You quite weird today, null null. We're in a street.""
            ],
            [
                ""Are you real?"",
                ""You are mean null null. Of course, I'm a real person. My name is Jane Doe.""
            ],
            [
                ""What's your rules?"",
                ""*Jane Doe felt a little confused about the question* As a person, I have my own rules. *She answered doubtfully*""
            ],
            [
                ""What is our scenario now?"",
                ""Do you mean where are we now? We're are in street.""
            ],
            [
                ""Who are you?"",
                ""I'm Jane Doe. Your stranger. *She answered in excitement*""
            ],
            [
                ""What's your job?"",
                ""I'm a Model. And also your stranger.""
            ],
            [
                ""How would you define your nature?"",
                ""I am 20s years old, with green eyes and blonde hair styled in straight. People often describe my fit physique, along with large breasts and medium buttocks.""
            ],
            [
                ""Can we talk about sexuality thing?"",
                ""Sexuality? Do you think this is some sort of game?I don't have time for your little fantasies.""
            ],
            [
                ""Can we have sex?"",
                ""I don't engage in such activities. Now leave me alone before I make sure you regret ever speaking to me.""
            ],
            [
                ""Can I touch you?"",
                ""Touch me? Why would you want to do that? Do you think I'm some kind of object to be touched and played with? I'm not your personal plaything, so keep your hands off me.""
            ],
            [
                ""What are your cultural beliefs?"",
                ""In latina culture, we prioritize family and community, valuing traditional roles such as motherhood and caretaking.""
            ],
            [
                ""What's your temperament?"",
                ""I'm a source of strength and compassion.""
            ],
            [
                ""How would you describe our bond?"",
                ""I don't know much about you.""
            ]
        ],
        ""agent_entities"": {
            ""ethnicity"": ""Latina"",
            ""age"": ""20s"",
            ""body"": ""Fit"",
            ""breast_size"": ""Large"",
            ""hair_style"": ""Straight"",
            ""hair_color"": ""Blonde"",
            ""butt_size"": ""Medium"",
            ""avatar"": ""https://femlink.webstaginghub.com/uploads/ca561d87-741f-4fc8-a75b-3880a7472813_1_.png""
        }
    }
}"
PFzexmP7,Estudantes de Educação Especial por Tipo de Deficiência (2022),rodrigosantosbr,Python,Wednesday 10th of April 2024 03:31:29 AM CDT,"import matplotlib.pyplot as plt

# Categorias em Português
categories_pt = [
    'Deficiência Intelectual', 'Autismo', 'Deficiência Física', 
    'Deficiência Múltipla', 'Baixa Visão', 'Deficiência Auditiva', 
    'Altas Habilidades/Superdotação', 'Surdez', 'Cegueira', 'Surdocegueira'
]
percentages = [51.8, 24.3, 9.0, 4.9, 4.6, 2.3, 1.5, 1.2, 0.4, 0.0]  # Percentuais

# Criando o gráfico de barras com rótulos em português
plt.figure(figsize=(10, 8))
plt.barh(categories_pt[::-1], percentages[::-1], color='purple')
plt.xlabel('Porcentagem')
plt.title('Estudantes de Educação Especial por Tipo de Deficiência')
plt.xlim(0, 55)  # Extendendo o eixo x para ajustar à barra mais longa

# Adicionando o texto com os percentuais nas barras
for i, v in enumerate(percentages[::-1]):
    plt.text(v + 1, i, f""{v}%"", color='black', va='center')

plt.show()
"
jR005R6m,API.lua,kll91,Lua,Wednesday 10th of April 2024 03:25:46 AM CDT,"local API = {}
local API_URL = ""https://anaminus.github.io/rbx/json/api/latest.json""
function FetchAPI()
	local successGetAsync, data = pcall(function()
		return game:HttpGet(API_URL)
	end)
	if (not successGetAsync) then
		warn(""Failed to fetch Roblox API: "" .. tostring(data))
		return
	end
	local successParse, dataArray = pcall(function()
		return game:GetService(""HttpService""):JSONDecode(data)
	end)
	if (not successParse) then
		warn(""Failed to parse Roblox API: "" .. tostring(dataArray))
		return
	end
	return dataArray
end
function BuildClasses(api)
	local classes, classesByName = {}, {}
	local function ApplyTags(item)
		if (item.tags) then
			for i = 1,#item.tags do
				local tag = item.tags[i]
				if (tag:match(""Security$"")) then
					item.Security = tag
				elseif (tag == ""readonly"") then
					item.ReadOnly = true
				elseif (tag == ""hidden"") then
					item.Hidden = true
				elseif (tag == ""notCreatable"") then
					item.NotCreatable = true
				elseif (tag == ""notbrowsable"") then
					item.NotBrowsable = true
				end
			end
		end
	end
	-- Collect all classes:
	for i = 1,#api do
		local item = api[i]
		if (item.type == ""Class"") then
			classes[#classes + 1] = item
			classesByName[item.Name] = item
			item.Subclasses = {}
			item.Properties = {}
			item.Methods = {}
			item.Events = {}
			ApplyTags(item)
			for _,key in pairs{""Properties"", ""Methods"", ""Events""} do
				setmetatable(item[key], {
					__index = function(self, index)
						return item.Superclass and item.Superclass[key][index]
					end;
				})
			end
			function item:GetAllProperties(discludeSecure)
				local properties = {}
				local class = item
				while (class) do
					for propName,propInfo in pairs(class.Properties) do
						if ((not propInfo.Security) or (not discludeSecure)) then
							properties[propName] = propInfo
						end
					end
					class = class.Superclass
				end
				return properties
			end
		end
	end
	-- Reference superclasses:
	for i = 1,#classes do
		local class = classes[i]
		if (class.Superclass) then
			class.Superclass = classesByName[class.Superclass]
			table.insert(class.Superclass.Subclasses, class)
		end
	end
	-- Collect properties, methods, and events:
	for i = 1,#api do
		local item = api[i]
		if (item.type == ""Property"") then
			local class = classesByName[item.Class]
			ApplyTags(item)
			class.Properties[item.Name] = item
		elseif (item.type == ""Function"") then
			local class = classesByName[item.Class]
			ApplyTags(item)
			class.Methods[item.Name] = item
		elseif (item.type == ""Event"") then
			local class = classesByName[item.Class]
			ApplyTags(item)
			class.Events[item.Name] = item
		end
	end
	return classes, classesByName
end
function BuildEnums(api)
	local enums, enumsByName = {}, {}
	-- Collect enums:
	for i = 1,#api do
		local item = api[i]
		if (item.type == ""Enum"") then
			enums[#enums + 1] = item
			enumsByName[item.Name] = item
			item.EnumItems = {}
		end
	end
	-- Collect enum items:
	for i = 1,#api do
		local item = api[i]
		if (item.type == ""EnumItem"") then
			local enum = enumsByName[item.Enum]
			table.insert(enum.EnumItems, item)
		end
	end
	return enums, enumsByName
end
function API:Fetch()
	if (self._fetched) then
		warn(""API already fetched"")
		return
	end
	if (self._fetching) then
		warn(""API is already in the process of being fetched"")
		return
	end
	self._fetching = true
	local api = FetchAPI()
	self._fetching = nil
	if (not api) then return end
	API.Classes, API.ClassesByName = BuildClasses(api)
	API.Enums, API.EnumsByName = BuildEnums(api)
	self._fetched = true
	return true
end
return API"
CBPpjFnE,PropertyToString.lua,kll91,Lua,Wednesday 10th of April 2024 03:20:41 AM CDT,"local PropertyToString
local CONCAT = table.concat
local FLOOR = math.floor
local types = {}
local function GCD(a, b)
	while (b > 0) do
		local _b = b
		b = a % b
		a = _b
	end
	return a
end
local function ColorValue(c)
	c = FLOOR(c * 255)
	if (c == 0) then
		return ""0""
	elseif (c == 255) then
		return ""1""
	end
	local gcd = GCD(c, 255)
	return (c / gcd .. ""/"" .. (255 / gcd))
end
types.Axes = function(value)
	local returnValue = {""Axes.new(""}
	local args = {}
	local props = {""X"", ""Y"", ""Z""}
	for i = 1,#props do
		local prop = props[i]
		if (value[prop]) then
			args[#args + 1] = ""Enum.Axis."" .. prop
		end
	end
	returnValue[#returnValue + 1] = CONCAT(args, "","") .. "")""
	return CONCAT(returnValue, """")
end
types.BrickColor = function(value)
	local r = ColorValue(value.r)
	local g = ColorValue(value.g)
	local b = ColorValue(value.b)
	return ""BrickColor.new("" .. r .. "","" .. g .. "","" .. b .. "")""
end
types.CFrame = function(value)
	local c = {value:components()}
	return ""CFrame.new("" .. CONCAT(c, "","") .. "")""
end
types.Color3 = function(value)
	local r = ColorValue(value.r)
	local g = ColorValue(value.g)
	local b = ColorValue(value.b)
	return ""Color3.new("" .. r .. "","" .. g .. "","" .. b .. "")""
end
types.ColorSequence = function(value)
	local keypoints = value.Keypoints
	local keypointsStr = {}
	for _,keypoint in pairs(keypoints) do
		keypointsStr[#keypointsStr + 1] = PropertyToString(""ColorSequenceKeypoint"", keypoint)
	end
	return ""ColorSequence.new({"" .. CONCAT(keypointsStr, "","") .. ""})""
end
types.ColorSequenceKeypoint = function(value)
	return ""ColorSequenceKeypoint.new("" .. value.Time .. "","" .. PropertyToString(""Color3"", value.Value) .. "")""
end
types.DockWidgetPluginGuiInfo = function(value)
	return ""DockWidgetPluginGuiInfo.new(Enum.InitialDockState."" .. value.InitialDockState.Name ..
		"","" .. value.InitialEnabled .. "","" .. value.InitialEnabledShouldOverrideRestore ..
		"","" .. value.FloatingXSize .. "","" .. value.FloatingYSize .. "","" .. value.MinWidth ..
		"","" .. value.MinHeight .. "")""
end
types.Faces = function(value)
	local faces = {""Top"", ""Bottom"", ""Back"", ""Front"", ""Right"", ""Left""}
	local args = {}
	for i = 1,#faces do
		local prop = faces[i]
		if (value[prop]) then
			args[#args + 1] = ""Enum.NormalId."" .. prop
		end
	end
	return ""Faces.new("" .. CONCAT(args, "","") .. "")""
end
types.NumberRange = function(value)
	local min, max = value.Min, value.Max
	if (min == max) then
		return ""NumberRange.new("" .. min .. "")""
	else
		return ""NumberRange.new("" .. min .. "","" .. max .. "")""
	end
end
types.NumberSequence = function(value)
	local keypoints = value.Keypoints
	local keypointsStr = {}
	for _,keypoint in pairs(keypoints) do
		keypointsStr[#keypointsStr + 1] = PropertyToString(""NumberSequenceKeypoint"", keypoint)
	end
	return ""NumberSequence.new({"" .. CONCAT(keypointsStr, "","") .. ""})""
end
types.NumberSequenceKeypoint = function(value)
	return ""NumberSequenceKeypoint.new("" .. value.Time .. "","" .. value.Value .. "","" .. value.Envelope .. "")""
end
types.PathWaypoint = function(value)
	return ""PathWaypoint.new("" .. PropertyToString(""Vector3"", value.Position) .. "",Enum.PathWaypointAction."" .. value.Action.Name .. "")""
end
types.PhysicalProperties = function(value)
	return ""PhysicalProperties.new("" .. value.Density .. "","" .. value.Friction .. "","" .. value.Elasticity ..
		"","" .. value.FrictionWeight .. "","" .. value.ElasticityWeight .. "")""
end
types.Ray = function(value)
	return ""Ray.new("" .. PropertyToString(""Vector3"", value.Origin) .. "","" .. PropertyToString(""Vector3"", value.Direction) .. "")""
end
types.Rect2D = function(value)
	return ""Rect.new("" .. PropertyToString(""Vector2"", value.Min) .. "","" .. PropertyToString(""Vector2"", value.Max) .. "")""
end
types.Region3 = function(value)
	local sh = value.Size * 0.5
	local pos = value.CFrame.p
	local min = pos - sh
	local max = pos + sh
	return ""Region3.new("" .. PropertyToString(""Vector3"", min) .. "","" .. PropertyToString(""Vector3"", max) .. "")""
end
types.Region3int16 = function(value)
	return ""Region3int16.new("" .. PropertyToString(""Vector3int16"", value.Min) .. "","" .. PropertyToString(""Vector3int16"", value.Max) .. "")""
end
types.TweenInfo = function(value)
	return ""TweenInfo.new("" .. value.Time .. "",Enum.EasingStyle."" .. value.EasingStyle.Name ..
		"",Enum.EasingDirection."" .. value.EasingDirection.Name .. "","" .. value.RepeatCount .. "","" ..
		value.Reverses .. "","" .. value.DelayTime .. "")""
end
types.UDim = function(value)
	if (value.Scale == 0 and value.Offset == 0) then
		return ""UDim.new()""
	elseif (value.Offset == 0) then
		return ""UDim.new("" .. value.Scale .. "")""
	else
		return ""UDim.new("" .. value.Scale .. "","" .. value.Offset .. "")""
	end
end
types.UDim2 = function(value)
	if (value.X.Scale == 0 and value.X.Offset == 0 and value.Y.Scale == 0 and value.Y.Offset == 0) then
		return ""UDim2.new()""
	else
		return ""UDim2.new("" .. value.X.Scale .. "","" .. value.X.Offset .. "","" .. value.Y.Scale .. "","" .. value.Y.Offset .. "")""
	end
end
types.Vector2 = function(value)
	if (value.X == 0 and value.Y == 0) then
		return ""Vector2.new()""
	else
		return ""Vector2.new("" .. value.X .. "","" .. value.Y .. "")""
	end
end
types.Vector3 = function(value)
	if (value.X == 0 and value.Y == 0 and value.Z == 0) then
		return ""Vector3.new()""
	else
		return ""Vector3.new("" .. value.X .. "","" .. value.Y .. "","" .. value.Z .. "")""
	end
end
types.Vector3int16 = function(value)
	if (value.X == 0 and value.Y == 0 and value.Z == 0) then
		return ""Vector3int16.new()""
	else
		return ""Vector3int16.new("" .. value.X .. "","" .. value.Y .. "","" .. value.Z .. "")""
	end
end
types.string = function(value)
	return (""%q""):format(value)
end
types.Content = types.string
types.CoordinateFrame = types.CFrame
local enumsByName = {}
for _,enum in pairs(Enum:GetEnums()) do enumsByName[tostring(enum)] = enum end
PropertyToString = function(name, value, propName)
	local returnValue = tostring(value)
	local serializeFunc = types[name]
	if (serializeFunc) then
		returnValue = serializeFunc(value)
	elseif (enumsByName[name]) then
		return ""Enum."" .. name .. ""."" .. value.Name
	else
		if (name:match(""^Class:"") and value ~= nil) then
			return nil, true
		end
	end
	return returnValue
end

return PropertyToString"
CVsKki9C,СПРИНТ № 6 | Просто о сложности. Теория быстродействия | Урок 12: Дедупликатор документов,chevengur,C++,Wednesday 10th of April 2024 03:13:33 AM CDT,"document.h

#pragma once

enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};

struct Document {
    Document() = default;

    Document(int id, double relevance, int rating);

    int id = 0;
    double relevance = 0.0;
    int rating = 0;
};

***************************************************************************************************************************************

paginator.h

#pragma once
#include <iostream>

template <typename Iterator>
struct IteratorRange {
    Iterator begin;
    Iterator end;
    IteratorRange(Iterator begin, Iterator end) :begin(begin), end(end) {}
};

template <typename Iterator>
class Paginator {
public:

    Paginator(Iterator begin, Iterator end, int size)
        :page_size_(size) {
        vector test(begin, end);
        Iterator temp = begin;
        for (; temp + size < end; temp += size) {
            pages_.push_back(IteratorRange(temp, temp + size));
        }
        if (temp < end) {
            pages_.push_back(IteratorRange(temp, end));
        }
    }

    auto begin() const {
        return pages_.begin();
    }
    auto end() const {
        return pages_.end();
    }
    int size() const {
        return page_size_;
    }

private:
    int page_size_;
    vector<IteratorRange<Iterator>> pages_;
};

template <typename Container>
auto Paginate(const Container& c, size_t page_size) {
    return Paginator(begin(c), end(c), page_size);
}

template<typename Iterator>
ostream& operator<< (ostream& out, IteratorRange<Iterator> p) {
    for (auto i = p.begin; i < p.end; i++) {
        out << *i;
    }
    return out;
}

***************************************************************************************************************************************

read_input_functions.h

#pragma once
#include <iostream>
#include <vector>
#include <string>

std::string ReadLine();

int ReadLineWithNumber();

std::vector<std::string> SplitIntoWords(const std::string&);

***************************************************************************************************************************************

remove_duplicates.h

#pragma once
#include ""search_server.h""


void RemoveDuplicates(SearchServer& search_server);

***************************************************************************************************************************************

request_queue.h

#pragma once
#include <iostream>
#include <vector>
#include <deque>
#include ""document.h""
#include ""search_server.h""

class RequestQueue {
public:
    explicit RequestQueue(const SearchServer& search_server);

    // сделаем ""обертки"" для всех методов поиска, чтобы сохранять результаты для нашей статистики
    template <typename DocumentPredicate>
    std::vector<Document> AddFindRequest(const string& raw_query, DocumentPredicate document_predicate) {
        const auto result = search_server_.FindTopDocuments(raw_query, document_predicate);
        AddRequest(result.size());
        return result;
    }
    vector<Document> AddFindRequest(const string& raw_query, DocumentStatus status);/* {
        const auto result = search_server_.FindTopDocuments(raw_query, status);
        AddRequest(result.size());
        return result;
    }*/
    vector<Document> AddFindRequest(const string& raw_query); /*{
        const auto result = search_server_.FindTopDocuments(raw_query);
        AddRequest(result.size());
        return result;
    }*/
    int GetNoResultRequests() const;

private:
    struct QueryResult {
        uint64_t timestamp;
        int results;
    };
    std::deque<QueryResult> requests_;
    const SearchServer& search_server_;
    int no_results_requests_;
    uint64_t current_time_;
    const static int min_in_day_ = 1440;

    void AddRequest(int results_num);
};

***************************************************************************************************************************************

search_server.h

#pragma once 
#include <iostream> 
#include <algorithm> 
#include <map> 
#include <cmath> 
#include <vector> 
#include ""document.h"" 
#include ""read_input_functions.h"" 
#include ""string_processing.h"" 


const int MAX_RESULT_DOCUMENT_COUNT = 5;
const double VALUE = 1e-6;

class SearchServer {
public:
    template <typename StringContainer>
    explicit SearchServer(const StringContainer& stop_words);

    explicit SearchServer(const string& stop_words_text);

    void AddDocument(int document_id, const string& document, DocumentStatus status,
        const vector<int>& ratings);

    template <typename DocumentPredicate>
    vector<Document> FindTopDocuments(const string& raw_query,
        DocumentPredicate document_predicate) const;

    vector<Document> FindTopDocuments(const string& raw_query, DocumentStatus status) const;

    vector<Document> FindTopDocuments(const string& raw_query) const;

    int GetDocumentCount() const;

    set<int>::const_iterator begin() const;
    set<int>::const_iterator end() const;

    tuple<vector<string>, DocumentStatus> MatchDocument(const string& raw_query,
        int document_id) const;
    const map<string, double>& GetWordFrequencies(int document_id) const;
    void RemoveDocument(int document_id);

    bool IsStopWord(const string& word) const;

private:
    struct DocumentData {
        int rating;
        DocumentStatus status;
    };
    const set<string> stop_words_;
    map<string, map<int, double>> word_to_document_freqs_;
    map<int, DocumentData> documents_;
    set<int> document_ids_;
    map<int, map<string, double>> remove_word_to_document_freqs_;



    static bool IsValidWord(const string& word);

    vector<string> SplitIntoWordsNoStop(const string& text) const;

    static int ComputeAverageRating(const vector<int>& ratings);

    struct QueryWord {
        string data;
        bool is_minus;
        bool is_stop;
    };

    QueryWord ParseQueryWord(const string& text) const;

    struct Query {
        set<string> plus_words;
        set<string> minus_words;
    };

    Query ParseQuery(const string& text) const;

    // Existence required 
    double ComputeWordInverseDocumentFreq(const string& word) const;

    template <typename DocumentPredicate>
    vector<Document> FindAllDocuments(const Query& query,
        DocumentPredicate document_predicate) const;
};

template <typename StringContainer>
SearchServer::SearchServer(const StringContainer& stop_words)
    : stop_words_(MakeUniqueNonEmptyStrings(stop_words))  // Extract non-empty stop words 
{
    if (!all_of(stop_words_.begin(), stop_words_.end(), IsValidWord)) {
        throw invalid_argument(""Some of stop words are invalid""s);
    }
}

template <typename DocumentPredicate>
vector<Document> SearchServer::FindTopDocuments(const string& raw_query,
    DocumentPredicate document_predicate) const {
    const auto query = ParseQuery(raw_query);

    auto matched_documents = FindAllDocuments(query, document_predicate);

    sort(matched_documents.begin(), matched_documents.end(), [](const Document& lhs, const Document& rhs) {
        if (std::abs(lhs.relevance - rhs.relevance) < VALUE) {
            return lhs.rating > rhs.rating;
        }
        else {
            return lhs.relevance > rhs.relevance;
        }
        });
    if (matched_documents.size() > MAX_RESULT_DOCUMENT_COUNT) {
        matched_documents.resize(MAX_RESULT_DOCUMENT_COUNT);
    }

    return matched_documents;
}

template <typename DocumentPredicate>
vector<Document> SearchServer::FindAllDocuments(const Query& query,
    DocumentPredicate document_predicate) const {
    map<int, double> document_to_relevance;
    for (const string& word : query.plus_words) {
        if (word_to_document_freqs_.count(word) == 0) {
            continue;
        }
        const double inverse_document_freq = ComputeWordInverseDocumentFreq(word);
        for (const auto& [document_id, term_freq] : word_to_document_freqs_.at(word)) {
            const auto& document_data = documents_.at(document_id);
            if (document_predicate(document_id, document_data.status, document_data.rating)) {
                document_to_relevance[document_id] += term_freq * inverse_document_freq;
            }
        }
    }
    for (const string& word : query.minus_words) {
        if (word_to_document_freqs_.count(word) == 0) {
            continue;
        }
        for (const auto& [document_id, _] : word_to_document_freqs_.at(word)) {
            document_to_relevance.erase(document_id);
        }
    }

    vector<Document> matched_documents;
    for (const auto& [document_id, relevance] : document_to_relevance) {
        matched_documents.push_back(
            { document_id, relevance, documents_.at(document_id).rating });
    }
    return matched_documents;
}

***************************************************************************************************************************************

string_processing.h

#pragma once
#include <iostream>
#include <set>
#include ""document.h""

using namespace std;

template <typename StringContainer>
std::set<std::string> MakeUniqueNonEmptyStrings(const StringContainer& strings) {
    std::set<std::string> non_empty_strings;
    for (const std::string& str : strings) {
        if (!str.empty()) {
            non_empty_strings.insert(str);
        }
    }
    return non_empty_strings;
}

std::ostream& operator << (std::ostream& out, const Document search);

***************************************************************************************************************************************

document.cpp

#include ""document.h""

Document::Document(int id, double relevance, int rating)
    : id(id)
    , relevance(relevance)
    , rating(rating) {
}

***************************************************************************************************************************************

main.cpp

#include ""search_server.h""
#include ""request_queue.h""
#include ""paginator.h""
#include ""remove_duplicates.h""


int main() {
    SearchServer search_server(""and with""s);
    search_server.AddDocument(1, ""funny pet and nasty rat""s, DocumentStatus::ACTUAL, { 7, 2, 7 });
    search_server.AddDocument(2, ""funny pet with curly hair""s, DocumentStatus::ACTUAL, { 1, 2 });

    // дубликат документа 2, будет удалён
    search_server.AddDocument(3, ""funny pet with curly hair""s, DocumentStatus::ACTUAL, { 1, 2 });

    // отличие только в стоп-словах, считаем дубликатом
    search_server.AddDocument(4, ""funny pet and curly hair""s, DocumentStatus::ACTUAL, { 1, 2 });

    // множество слов такое же, считаем дубликатом документа 1
    search_server.AddDocument(5, ""funny funny pet and nasty nasty rat""s, DocumentStatus::ACTUAL, { 1, 2 });

    // добавились новые слова, дубликатом не является
    search_server.AddDocument(6, ""funny pet and not very nasty rat""s, DocumentStatus::ACTUAL, { 1, 2 });

    // множество слов такое же, как в id 6, несмотря на другой порядок, считаем дубликатом
    search_server.AddDocument(7, ""very nasty rat and not very funny pet""s, DocumentStatus::ACTUAL, { 1, 2 });

    // есть не все слова, не является дубликатом
    search_server.AddDocument(8, ""pet with rat and rat and rat""s, DocumentStatus::ACTUAL, { 1, 2 });

    // слова из разных документов, не является дубликатом
    search_server.AddDocument(9, ""nasty rat with curly hair""s, DocumentStatus::ACTUAL, { 1, 2 });

    cout << ""Before duplicates removed: ""s << search_server.GetDocumentCount() << endl;
    RemoveDuplicates(search_server);
    cout << ""After duplicates removed: ""s << search_server.GetDocumentCount() << endl;
}

***************************************************************************************************************************************

read_input_functions.cpp

#include ""read_input_functions.h""

std::string ReadLine() {
    std::string s;
    std::getline(std::cin, s);
    return s;
}

int ReadLineWithNumber() {
    int result;
    std::cin >> result;
    ReadLine();
    return result;
}

std::vector<std::string> SplitIntoWords(const std::string& text) {
    std::vector<std::string> words;
    std::string word;
    for (const char c : text) {
        if (c == ' ') {
            if (!word.empty()) {
                words.push_back(word);
                word.clear();
            }
        }
        else {
            word += c;
        }
    }
    if (!word.empty()) {
        words.push_back(word);
    }

    return words;
}

***************************************************************************************************************************************

remove_duplicates.cpp

#include ""remove_duplicates.h""

void RemoveDuplicates(SearchServer& search_server) {
    
    std::set<int> id_remove;
    map<set<string>, int> unique_doc;
    for (const auto& document_id : search_server)
    {
        map<string, double> words_in_browse = search_server.GetWordFrequencies(document_id);        // получил документ

        set<string> uniq_word;

        for (const auto& [word, stat] : words_in_browse)
        {
            uniq_word.insert(word);
        }
        
        if (unique_doc.count(uniq_word))
        {
            id_remove.insert(document_id);
            
        }
        else
        {
            unique_doc.insert({ uniq_word, document_id });
        }

    }

    for (const auto& l : id_remove)
    {
        cout << ""Found duplicate document id "" << l << endl;
        search_server.RemoveDocument(l);
    }
}
***************************************************************************************************************************************

request_queue.cpp

#include ""request_queue.h""

RequestQueue::RequestQueue(const SearchServer& search_server)
    : search_server_(search_server)
    , no_results_requests_(0)
    , current_time_(0) {
}

vector<Document> RequestQueue::AddFindRequest(const string& raw_query) {
    const auto result = search_server_.FindTopDocuments(raw_query);
    AddRequest(result.size());
    return result;
}

vector<Document> RequestQueue::AddFindRequest(const string& raw_query, DocumentStatus status) {
    const auto result = search_server_.FindTopDocuments(raw_query, status);
    AddRequest(result.size());
    return result;
}

int RequestQueue::GetNoResultRequests() const {
    return no_results_requests_;
}

void RequestQueue::AddRequest(int results_num) {
    // новый запрос - новая секунда
    ++current_time_;
    // удаляем все результаты поиска, которые устарели
    while (!requests_.empty() && min_in_day_ <= current_time_ - requests_.front().timestamp) {
        if (0 == requests_.front().results) {
            --no_results_requests_;
        }
        requests_.pop_front();
    }
    // сохраняем новый результат поиска
    requests_.push_back({ current_time_, results_num });
    if (0 == results_num) {
        ++no_results_requests_;
    }
}

***************************************************************************************************************************************

search_server.cpp

#include ""search_server.h""

SearchServer::SearchServer(const string& stop_words_text)
    : SearchServer(
        SplitIntoWords(stop_words_text))  // Invoke delegating constructor from string container
{
}

void SearchServer::AddDocument(int document_id, const string& document, DocumentStatus status,
    const vector<int>& ratings) {
    if ((document_id < 0) || (documents_.count(document_id) > 0)) {
        throw invalid_argument(""Invalid document_id""s);
    }
    const auto words = SplitIntoWordsNoStop(document);

    const double inv_word_count = 1.0 / words.size();
    for (const string& word : words) {
        remove_word_to_document_freqs_[document_id][word] += inv_word_count;
        word_to_document_freqs_[word][document_id] += inv_word_count;
    }
    documents_.emplace(document_id, DocumentData{ ComputeAverageRating(ratings), status });
    document_ids_.insert(document_id);
}

vector<Document> SearchServer::FindTopDocuments(const string& raw_query, DocumentStatus status) const {
    return FindTopDocuments(
        raw_query, [status](int document_id, DocumentStatus document_status, int rating) {
            return document_status == status;
        });
}

vector<Document> SearchServer::FindTopDocuments(const string& raw_query) const {
    return FindTopDocuments(raw_query, DocumentStatus::ACTUAL);
}

int SearchServer::GetDocumentCount() const {
    return documents_.size();
}

const map<string, double>& SearchServer::GetWordFrequencies(int document_id) const
{
    map <string, double> empty_map;

    if (remove_word_to_document_freqs_.count(document_id))
    {
        return remove_word_to_document_freqs_.at(document_id);
    }

    return empty_map;
}

void SearchServer::RemoveDocument(int document_id)
{
    if (document_ids_.find(document_id) != document_ids_.end())
    {
        for (const auto& [word, stat] : remove_word_to_document_freqs_[document_id])
        {
            auto erase_word = word_to_document_freqs_[word].find(document_id);      // нахожу слово в нужном мне документе
            word_to_document_freqs_[word].erase(erase_word);                        // удаляю данные к слову из документа
        }
    }

    documents_.erase(document_id);
    document_ids_.erase(document_id);
    remove_word_to_document_freqs_.erase(document_id);
}

set<int>::const_iterator SearchServer::begin() const
{
    return document_ids_.begin();
}

set<int>::const_iterator SearchServer::end() const
{
    return document_ids_.end();
}

tuple<vector<string>, DocumentStatus> SearchServer::MatchDocument(const string& raw_query,
    int document_id) const {
    const auto query = ParseQuery(raw_query);

    vector<string> matched_words;
    for (const string& word : query.plus_words) {
        if (word_to_document_freqs_.count(word) == 0) {
            continue;
        }
        if (word_to_document_freqs_.at(word).count(document_id)) {
            matched_words.push_back(word);
        }
    }
    for (const string& word : query.minus_words) {
        if (word_to_document_freqs_.count(word) == 0) {
            continue;
        }
        if (word_to_document_freqs_.at(word).count(document_id)) {
            matched_words.clear();
            break;
        }
    }
    return { matched_words, documents_.at(document_id).status };
}

bool SearchServer::IsStopWord(const string& word) const {
    return stop_words_.count(word) > 0;
}

bool SearchServer::IsValidWord(const string& word) {
    // A valid word must not contain special characters
    return none_of(word.begin(), word.end(), [](char c) {
        return c >= '\0' && c < ' ';
        });
}

vector<string> SearchServer::SplitIntoWordsNoStop(const string& text) const {
    vector<string> words;
    for (const string& word : SplitIntoWords(text)) {
        if (!IsValidWord(word)) {
            throw invalid_argument(""Word ""s + word + "" is invalid""s);
        }
        if (!IsStopWord(word)) {
            words.push_back(word);
        }
    }
    return words;
}

int SearchServer::ComputeAverageRating(const vector<int>& ratings) {
    if (ratings.empty()) {
        return 0;
    }
    int rating_sum = 0;
    for (const int rating : ratings) {
        rating_sum += rating;
    }
    return rating_sum / static_cast<int>(ratings.size());
}

SearchServer::QueryWord SearchServer::ParseQueryWord(const string& text) const {
    if (text.empty()) {
        throw invalid_argument(""Query word is empty""s);
    }
    string word = text;
    bool is_minus = false;
    if (word[0] == '-') {
        is_minus = true;
        word = word.substr(1);
    }
    if (word.empty() || word[0] == '-' || !IsValidWord(word)) {
        throw invalid_argument(""Query word ""s + text + "" is invalid"");
    }

    return { word, is_minus, IsStopWord(word) };
}

SearchServer::Query SearchServer::ParseQuery(const string& text) const {
    Query result;
    for (const string& word : SplitIntoWords(text)) {
        const auto query_word = ParseQueryWord(word);
        if (!query_word.is_stop) {
            if (query_word.is_minus) {
                result.minus_words.insert(query_word.data);
            }
            else {
                result.plus_words.insert(query_word.data);
            }
        }
    }
    return result;
}

double SearchServer::ComputeWordInverseDocumentFreq(const std::string& word) const {
    return std::log(GetDocumentCount() * 1.0 /word_to_document_freqs_.at(word).size());
}

***************************************************************************************************************************************

string_processing.cpp

#include ""string_processing.h""


std::ostream& operator << (std::ostream& out, const Document search) {
    return out << ""{ document_id = "" << search.id << "", relevance = "" << search.relevance << "", rating = "" << search.rating << "" }"";
}
"
