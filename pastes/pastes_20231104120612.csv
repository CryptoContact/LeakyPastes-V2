id,title,username,language,date,content
AJaE0WZ9,data742,TestGuy1,JSON,Saturday 4th of November 2023 07:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '409002a1d5f71c746c190d66766d9f00bba03cecbdbd7f8d27d36f6f096876eea20c44d98e38f93b5a6027d4b841a9fe99fb595ac6fb523160475acdd4026e70e73b27b36ad9ceff6ee860c54102165ea2dee2b1df79357854031fac8845cda7a0c5a5d70b518bc93bd1b737b1734d1436f4ea562581187f85a4393fb63a1a00',
  otherdata: [
    'da979de43586dfc447a36bd37d7cab5d',
    'fdd34d6d970effcc70622ce7d50066b4',
    '2c2080ef395dbba6cf09473f1c9cc625',
    '185cddaa17a1df2a737c2b4b63d5544b',
    'd4639b34fb6b2bad8c121e14a8b2d5c9',
    '7748abde47cd63d6865467c682f5b010',
    'd00923b6875c91cd737202c1d453892f',
    'dff239028287c3a68ee7144a70da88e3'
  ]
}"
s7Vdk03Q,bimbimbambam,deltaDelete,C#,Saturday 4th of November 2023 06:54:54 AM CDT,"using Avalonia.Collections;

using System;
using System.Linq;
using ReactiveUI;

public class MainViewModel : ReactiveObject
{
    private AvaloniaList<Item> _items;
    private string _searchText;

    public MainViewModel()
    {
        // Инициализация данных для таблицы
        Items = new AvaloniaList<Item>
        {
            new Item { Name = ""Item 1"", Description = ""Description 1"" },
            new Item { Name = ""Item 2"", Description = ""Description 2"" },
            new Item { Name = ""Item 3"", Description = ""Description 3"" },
        };
        this.WhenAnyValue(x => x.SearchText)
            .Subscribe(FilterItems);
    }

    public AvaloniaList<Item> Items
    {
        get => _items;
        set => this.RaiseAndSetIfChanged(ref _items, value);
    }

    public string SearchText
    {
        get => _searchText;
        set => this.RaiseAndSetIfChanged(ref _searchText, value);
    }

    private void FilterItems(string searchText)
    {
        var filteredItems = _items.Where(item =>
                                            item.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                                            item.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToList();
        Items = new AvaloniaList<Item>(filteredItems);
    }
}

public class Item
{
    public string Name { get; set; }
    public string Description { get; set; }
}
"
q5tGCiNH,Untitled,Darlington_E47,Python,Saturday 4th of November 2023 06:29:53 AM CDT,"import tkinter as tk
import sqlite3

#conn = sqlite3.connect('C:/Users/tester/Documents/ФАРБА.db')
conn = sqlite3.connect('/home/darlington/Desktop/develope/PAINT.db')
cursor = conn.cursor()

# Створення таблиці, якщо вона не існує
cursor.execute('''CREATE TABLE IF NOT EXISTS my_table (
					id INTEGER PRIMARY KEY,
					Дата_приходу DATE,
					Назва_фарби TEXT,
					M0 REAL,
					M1 REAL,
					M2 REAL,
					Результат REAL,
					Середнє REAL
				)''')

conn.commit()
conn.close(
# Закриття з'єднання з базою даних



def calculatefirst():
	date = str(entry_date.get())
	name = str(entry_paint.get())
	bank = int(entry_num.get())
	m01 = float(entry_m0.get())
	m11 = float(entry_m1.get())
	m21 = float(entry_m2.get())
	x1 = m21 - m01
	x2 = m11 - m01
	x3 = x1 / x2
	res = x3 * 100
	resout1 = float(f""{res:.4f}"")
	result_label.config(text = f""\n\n Дата приходу: {date}\nФарба: {name}\nЧашка №{bank} має залишок: {res:.2f}"")
	return resout1


def calculatesecond():
	date = str(entry_date.get())
	name = str(entry_paint.get())
	bank = int(entry_num_right.get())
	m02 = float(entry_m0_right.get())
	m12 = float(entry_m1_right.get())
	m22 = float(entry_m2_right.get())
	x1 = m22 - m02
	x2 = m12 - m02
	x3 = x1 / x2
	res = x3 * 100
	resout2 = float(f""{res:.4f}"")
	result_label_right.config(text = f""\n\n Дата приходу: {date}\nФарба: {name}\nЧашка №{bank} має залишок: {res:.2f}"")
	return resout2

def calculate_average():
    if not entry_num.get() or not entry_m0.get() or not entry_m1.get() or not entry_m2.get() or not entry_num_right.get() or not entry_m0_right.get() or not entry_m1_right.get() or not entry_m2_right.get():
        # Вивести повідомлення про незаповнені поля або обробити іншим чином
        return
    
    resout1 = calculatefirst()
    resout2 = calculatesecond()
    finres = (resout1 + resout2) / 2
    out = float(f""{finres:.2f}"")
    average_label.config(text=f""\nСЕРЕДНІЙ ЗАЛИШОК: {out:.2f}"")
    return out


def db_register(out):
	resout1 = calculatefirst()
	resout2 = calculatesecond()
	date = str(entry_date.get())
	name = str(entry_paint.get())
	bank = int(entry_num.get())
	m01 = float(entry_m0.get())
	m11 = float(entry_m1.get())
	m21 = float(entry_m2.get())
	m02 = float(entry_m0_right.get())
	m12 = float(entry_m1_right.get())
	m22 = float(entry_m2_right.get())
	cursor.execute('''INSERT INTO my_table (Дата_приходу, Назва_фарби, M0, M1, M2, Результат, Середнє)
					VALUES (?, ?, ?, ?, ?, ?, ?)''', (date, name, m01, m11, m21, resout1, out ))
	cursor.execute('''INSERT INTO my_table (Дата_приходу, Назва_фарби, M0, M1, M2, Результат, Середнє)
					VALUES (?, ?, ?, ?, ?, ?, ?)''', (date, name, m02, m12, m22, resout2, out ))
	conn.commit()
	conn.close()

def clear():
	entry_m0.delete(0, 'end')
	entry_m1.delete(0, 'end')
	entry_m2.delete(0, 'end')
	entry_num.delete(0, 'end')
	entry_date.delete(0, 'end')
	entry_paint.delete(0, 'end')
	entry_m0_right.delete(0, 'end')
	entry_m1_right.delete(0, 'end')
	entry_m2_right.delete(0, 'end')
	entry_num_right.delete(0, 'end')

root = tk.Tk()
root.title(""Сухий залишок"")
#перша колонка
# Створення LabelFrame для першого блоку даних

left_data_frame = tk.LabelFrame(root, text=""Перша чашка"")
left_data_frame.grid(row=4, column=0, padx=10, pady=10)

num = tk.Label(left_data_frame, text=""Номер чашки:"")
paint_name = tk.Label(root, text=""Назва фарби:"")
date = tk.Label(root, text=""Дата приходу:"")
entry_paint = tk.Entry(root)
entry_date = tk.Entry(root)
entry_num = tk.Entry(left_data_frame)

label_m0 = tk.Label(left_data_frame, text=""M0:"")
entry_m0 = tk.Entry(left_data_frame)

label_m1 = tk.Label(left_data_frame, text=""M1:"")
entry_m1 = tk.Entry(left_data_frame)

label_m2 = tk.Label(left_data_frame, text=""M2:"")
entry_m2 = tk.Entry(left_data_frame)

calculate_button1 = tk.Button(left_data_frame, text=""Обчислити чашку"", command=lambda: calculatefirst())
calculate_button1.grid(row=5, column=2, sticky = ""nsew"")

num.grid(row=1, column=1)
entry_num.grid(row=1, column=2)
label_m0.grid(row=2, column=1, sticky = ""e"")
entry_m0.grid(row=2, column=2)
label_m1.grid(row=3, column=1, sticky = ""e"")
entry_m1.grid(row=3, column=2)
label_m2.grid(row=4, column=1, sticky = ""e"")
entry_m2.grid(row=4, column=2)

date.grid(row=1, column=0)
entry_date.grid(row=1, column=1)
paint_name.grid(row=2, column=0)
entry_paint.grid(row=2, column=1)

# Створення LabelFrame для другого блоку даних
right_data_frame = tk.LabelFrame(root, text=""Друга чашка"")
right_data_frame.grid(row=4, column=1, padx=10, pady=10)

num_right = tk.Label(right_data_frame, text=""Номер чашки:"")
entry_num_right = tk.Entry(right_data_frame)

label_m0_right = tk.Label(right_data_frame, text=""M0:"")
entry_m0_right = tk.Entry(right_data_frame)

label_m1_right = tk.Label(right_data_frame, text=""M1:"")
entry_m1_right = tk.Entry(right_data_frame)

label_m2_right = tk.Label(right_data_frame, text=""M2:"")
entry_m2_right = tk.Entry(right_data_frame)

clear_button = tk.Button(root, text = ""Очистити"", command = lambda: clear())
clear_button.grid(row=6, column=1, sticky=""e"")
calculate_button2 = tk.Button(right_data_frame, text=""Обчислити чашку"", command=lambda: calculatesecond())
num_right.grid(row=1, column=1)
entry_num_right.grid(row=1, column=2)
label_m0_right.grid(row=2, column=1, sticky = ""e"")
entry_m0_right.grid(row=2, column=2)
label_m1_right.grid(row=3, column=1, sticky = ""e"")
entry_m1_right.grid(row=3, column=2)
label_m2_right.grid(row=4, column=1, sticky = ""e"")
entry_m2_right.grid(row=4, column=2)
calculate_button2.grid(row=5, column=2, sticky = 'nsew')
# Створення кнопки для обчислення середнього залишку
calculate_average_button = tk.Button(root, text=""Обчислити середній залишок"", command=lambda: db_register(calculate_average()))
calculate_average_button.grid(row=6, column=0, columnspan=2)


result_label = tk.Label(root,text="""")
result_label.grid(row=8, column=0, sticky='w')
result_label_right = tk.Label(root, text = """")
result_label_right.grid(row=9, column=0,sticky='w')
average_label = tk.Label(root,text="""")
average_label.grid(row = 10, column=0, sticky='w')




root.mainloop()"
nZzgB0Ds,BTC Wallet Credentials have been reset,castlclass_20,GetText,Saturday 4th of November 2023 06:22:09 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
taginestg:H9pz49 on 212.224.93.130
You can connect via SSH .
Regards"
4VH5sVXc,treesimple,bldng1,Lua,Saturday 4th of November 2023 05:57:59 AM CDT,"os.loadAPI(""bldng/lib"")
lib.addtoworth(""log"")
lib.move(1,0,0)
lib.goback()"
Zdt5C7wf,snowybot upgraded,coinwalk,JavaScript,Saturday 4th of November 2023 05:38:50 AM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((originalbal/100).toFixed(8));
var floatingbase = base;
var taget = (originalbal*7);
var groupedten = (base*10);
var groupedseven = (base*6.5);
var tobetnext = ((floatingbase*1).toFixed(8));
var bolance = originalbal;
var over = 6.9;
var under = 2.9;
var oldbolancetwo = originalbal;
var oldbolance = ((Math.floor(originalbal/groupedten))*groupedten);

function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if (bolance>(oldbolance+(floatingbase*over))) {
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9;
    oldbolance = parseFloat(bolance);
}
if (bolance<(oldbolance-(floatingbase*under))) {
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9;
    oldbolance = parseFloat(bolance);
}
if ((floatingbase>=(originalbal/10))&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
    oldbolancetwo = parseFloat(bolance);
}
if ((floatingbase>=(bolance/20))&&(bolance>oldbolancetwo)){
    oldbolancetwo = parseFloat(bolance);
}
if ((floatingbase>=(bolance/20))&&(bolance<oldbolancetwo)&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
    oldbolancetwo = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
}, 100);
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 200);
}
get();"
rHjRVJB9,VacuumAfter2Hours,Michael_ich,JSON,Saturday 4th of November 2023 05:38:14 AM CDT,"[
    {
        ""id"": ""b981cf6fbb55d3bb"",
        ""type"": ""server-state-changed"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": """",
        ""server"": ""9255c353.0ab86"",
        ""version"": 4,
        ""exposeToHomeAssistant"": true,
        ""haConfig"": [
            {
                ""property"": ""name"",
                ""value"": ""meleavinghome""
            },
            {
                ""property"": ""icon"",
                ""value"": """"
            }
        ],
        ""entityidfilter"": ""group.michael_local_devices"",
        ""entityidfiltertype"": ""exact"",
        ""outputinitially"": false,
        ""state_type"": ""str"",
        ""haltifstate"": ""not_home"",
        ""halt_if_type"": ""str"",
        ""halt_if_compare"": ""is"",
        ""outputs"": 2,
        ""output_only_on_state_change"": true,
        ""for"": ""2"",
        ""forType"": ""num"",
        ""forUnits"": ""hours"",
        ""ignorePrevStateNull"": false,
        ""ignorePrevStateUnknown"": false,
        ""ignorePrevStateUnavailable"": false,
        ""ignoreCurrentStateUnknown"": false,
        ""ignoreCurrentStateUnavailable"": false,
        ""outputProperties"": [
            {
                ""property"": ""payload"",
                ""propertyType"": ""msg"",
                ""value"": """",
                ""valueType"": ""entityState""
            },
            {
                ""property"": ""data"",
                ""propertyType"": ""msg"",
                ""value"": """",
                ""valueType"": ""eventData""
            },
            {
                ""property"": ""topic"",
                ""propertyType"": ""msg"",
                ""value"": """",
                ""valueType"": ""triggerId""
            }
        ],
        ""x"": 250,
        ""y"": 420,
        ""wires"": [
            [
                ""df1e1da372f8ad97""
            ],
            []
        ]
    },
    {
        ""id"": ""df1e1da372f8ad97"",
        ""type"": ""api-call-service"",
        ""z"": ""3b9fd1dd2721a9a5"",
        ""name"": """",
        ""server"": ""9255c353.0ab86"",
        ""version"": 5,
        ""debugenabled"": false,
        ""domain"": ""vacuum"",
        ""service"": ""start"",
        ""areaId"": [],
        ""deviceId"": [],
        ""entityId"": [
            ""vacuum.roborock_s5_max""
        ],
        ""data"": """",
        ""dataType"": ""jsonata"",
        ""mergeContext"": """",
        ""mustacheAltTags"": false,
        ""outputProperties"": [],
        ""queue"": ""none"",
        ""x"": 530,
        ""y"": 420,
        ""wires"": [
            []
        ]
    }
]"
Whw5afRF,mentes_format,virtualm64,Bash,Saturday 4th of November 2023 05:35:29 AM CDT,"#!/bin/bash

# mentes_format.sh

# megnézzük a meghajtókat
#lsblk -f

# honnan hova
RSYNCDIR=/home/wt/mentes/balcsiwt/
DEV=/dev/sdc

# partícionálás (két partíció)
printf ""n\np\n1\n2048\n+512M\nt 1\nc\na\nn2\n\n\nw\nq\n"" | fdisk $(DEV)
#lsblk -f

# formázás - 2 partició
sudo mkfs.vfat -F 32 $(DEV)1
sudo mkfs.ext2 -D $(DEV)2

# mountolás
mount $(DEV)2 /mnt
mkdir /mnt/boot
mount $(DEV)1 /mnt/boot

mkdir /mnt/bootfs

# a /rootfs nem kell ?
mkdir /mnt/rootfs

# fájlok másolása
cp -r $(RSYNCDIR) /mnt

# lecsatolás
umount /mnt/boot
umount /mnt

echo "" ""
echo "" Kész."""
bCcKVcR9,brain farts gone snowy el manual,coinwalk,JavaScript,Saturday 4th of November 2023 05:29:36 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/100).toFixed(8));
var burp = nudie;
var taget = (smiley*7);
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var over = 6.9;
var under = 2.9;
var woman = smiley;
var sexual = ((Math.floor(smiley/bolux))*bolux);

function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if ((burp>=(smiley/10))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = parseFloat(bolance);
}
if ((burp>=(bolance/20))&&(bolance>woman)){
    woman = parseFloat(bolance);
}
if ((burp>=(bolance/20))&&(bolance<woman)&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
}, 100);
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 200);
}
get();"
d0wsXSZ5,secret snowy business updated,coinwalk,JavaScript,Saturday 4th of November 2023 05:23:49 AM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/100).toFixed(8));
var burp = nudie;
var taget = (smiley*7);
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var over = 6.9;
var under = 2.9;
var woman = smiley;
var sexual = ((Math.floor(smiley/bolux))*bolux);

function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (burp>=(smiley/10)){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = parseFloat(bolance);
}
if ((burp>=(bolance/20))&&(bolance>woman)){
    woman = parseFloat(bolance);
}
if ((burp>=(bolance/20))&&(bolance<woman)){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
}, 100);
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 200);
}
get();"
Kqcs6BBv,adventuron_RETURN_GR_part_template005g4_231101,plirof2,JavaScript,Saturday 4th of November 2023 05:00:29 AM CDT,"""{return '\\n#Adventuron ΕΛΛΗΝΙΚΗ ΜΕΤΑΦΡΑΣΗ\\n\\n#adventuron_initial_gr_script_v05g4.txt\\n# Για μεταφραση ιδέες https://github.com/paravaariar/adventuron_french_notes\\n# κωδικας εξτρα https://adventuron.io/documentation/cookbook.html (block location etc)\\nstart_at = outside_cave\\n\\n## Defines locations in the world - #Τοποθεσίες : Εδώ θα βάλετε όλες τις τοποθεσίες που θα έχει το παιχνίδι σας.\\n\\nlocations {\\n   lakeside      : location \""Είσαι δίπλα σε μια πανέμορφη λίμνη..\"" ;\\n   outside_cave  : location \""Είσαι έξω από μία σπηλιά. Η είσοδος είναι βόρεια.\"" ;\\n   treasure_room : location \""Είσαι στο δωμάτιο του θησαυρού.\"" ; \\n}\\n\\n# Defines things in the world (scenery cannot be carried). Αντικείμενα που έχει το παιχνίδι σας.\\n\\nobjects {\\n   apple          : object  \""ένα μήλο\"" msg=\""Νόστιμο.\"" at = \""lakeside\"" get_message = \""πήρες το μήλο\"";\\n   troll          : scenery \"" ένα τεράστιο Τρολ\""  at = \""outside_cave\"" msg=\""Πεινάει.\"";\\n   lamp           : object \""a lamp\"" at = \""treasure_room\"" get_message = \""You pick up the dusty lamp\"";\\n}\\n   \\nconnections {\\n\\n   ## Connects locations together (bidirectional). Συνδέσεις τοποθεσίών.\\n   \\n   from, direction, to = [\\n      lakeside,     north, outside_cave\\n      outside_cave, north, treasure_room,\\n   ]\\n}\\n\\nbarriers {\\n\\n   ## Blocks Access To Cave Whilst Troll Exists (with message)\\n   \\n   block_cave : block {\\n      location           = treasure_room\\n      message            = Το Τρολ φυλάει την σπηλιά .\\n      block_when_exists  = troll\\n      show_blocked_exit  = true\\n   }\\n   \\n} \\n\\n## Print the objective when the game starts\\n\\non_startup {\\n   : print \""CAVE OF MAGIC !\"" ;\\n   : print \""ΕΞΕΡΕΥΝΗΣΤΕ ΤΟΝ ΧΩΡΟ.\"" ;\\n   : print \""ΚΙΝΗΣΟΥ γράφοντας: Βόρεια(Β)/North,Ανατολικά(Α)/East,Δυτικά(Δ)/West, Νότια(Ν)/South.\"" ;\\n   : print \""Μερικές από τις λέξεις που μπορείς να χρησιμοποιήσεις:  ΠΑΡΕ, ΡΙΞΕ, ΔΩΣΕ, ΤΣΕΠΕΣ, ΚΟΙΤΑ, ΔΕΣ, ΒΟΗΘΕΙΑ\"" ;\\n   : press_any_key ;\\n}\\n\\n## Execute this every time a player moves or redescribes a location\\n\\non_describe {\\n   : if (is_at \""treasure_room\"" ) {\\n      : print \""ΜΠΡΑΒΟ!! ΒΡΗΚΕΣ ΤΟΝ ΘΗΣΑΥΡΟ. ΚΕΡΔΙΣΕΣ!\"" ;\\n      : win_game ;\\n   }\\n}\\n\\n## Test VERB NOUN that the player types and executes conditional actions\\n\\non_command {\\n: match \""help _\""  {\\n      : print \""- Γράψε \\\'ΔΕΣ/ΚΟΙΤΑ/LOOK\\\' για να ανανεωθεί η οθόνη \"" ;\\n      : print \""- Γράψε \\\'Β,Ν,Δ,Α\\\' για να κινηθείς Βόρεια,Νότια,Δυτικά,Ανατολικά \"" ;\\n      : print \""- Γράψε \\\'Ι/ΤΣΕΠΕΣ/INVENTORY\\\' για να δεις τι κρατάς \"" ;\\n      : print \""- Γράψε \\\'ΠΑΡΕ αντικείμενο\\\' για να πάρεις το αντικείμενο \"" ;\\n      : print \""- Γράψε \\\'ΡΙΞΕ αντικείμενο\\\' για να ρίξεις το αντικείμενο \"" ;\\n      : print \""- Γράψε \\\'ΔΩΣΕ κάτι ΣΕ κάποιον \\\' για να δώσεις ένα αντικείμενο σε κάποιον \"" ;\\n      : print \""- Γράψε \\\'SAVE/LOAD\\\' για να αποθηκευσεις/επαναφέρεις την πρόοδο σου στο παιχνίδι\"" ;\\n      }   \\n\\n   : match \""give apple\""  {\\n      : if (is_present \""troll\"" && is_carried \""apple\"") {\\n         : print   \""Το Τρολ τρώει το μήλο και φεύγει.\"" ;\\n         : destroy \""apple\"" ;\\n         : destroy \""troll\"" ;\\n      }\\n   }\\n}\\n\\n\\n\\nvocabulary {\\n\\n   // Here we assocated new words with the already supported english system vocab\\n //Εδώ βάζουμε συννώνυμες ή παρόμοιες λέξεις. Σημείωση: Γράφουμε την λέξη με τόνο και χωρίς τόνο. Επίσης με τελικό σ και τελικό ς .\\n   : verb / aliases = [e,  Α ,ανατολικά ,ανατολικα  ]    \\n   : verb / aliases = [south,   Ν ,Νότια ,Νοτια  ]   \\n   : verb / aliases = [north,   Β ,Βόρεια ,ΒΟΡΕΙΑ  ]   \\n   : verb / aliases = [west,   Δ ,Δυτικά ,δυτικά  ]   \\n   : verb / aliases = [up,   Π,ΠΑΝΩ ,πάνω ,πανω  ]   \\n   : verb / aliases = [down, Κ, ΚΑΤΩ,κάτω,κατω  ]   \\n     \\n   : verb / aliases = [examine,   εξέτασε,ΕΞΕΤΑΣΕ   ]\\n   : verb / aliases = [get, ΠΑΡΕ, πάρε             ]\\n   : verb / aliases = [give, ΔΩΣΕ, δώσε             ]\\n   : verb / aliases = [drop,ρίξε,ριξε,αφησε,άφησε  ,    droptranslated      ]\\n   : verb / aliases = [inventory,ι,τσέπες,τσεπες,τσέπεσ,τσεπεσ, inventorytranslated ]\\n   : verb / aliases = [look, κοίτα,δες,δεσ,κοιτα ]\\n   : verb / aliases = [quit,      quittranslated      ]\\n   : verb / aliases = [help, βοήθεια,βοηθεια,     helptranslated      ]\\n   : noun / aliases = [all, ΟΛΑ , όλα             ]\\n   : noun / aliases = [apple,      μήλο , μηλο     ] \\n   : noun / aliases = [troll,      ΤΡΟΛ , ΤΕΡΑΣ     ]   \\n\\n}\\n\\n\\nthemes {\\n   mytheme : theme {\\n      # order of the compass directions matters, and must be translated in full (all 12)\\n      system_messages {\\n         #compass = [north, northeast, east, southeast, south, southwest,  west, northwest, up, down, inside, outside]      \\n         compass = [Βόρεια, northeast, Ανατολικά, southeast, Νότια, southwest,  Δυτικά, northwest, up, down, inside, outside]\\n         compass_short = [n, ne, e, se, s, sw, w, nw, u, d, in, out]\\n         // MORE text to translate\\n         all_treasures_found_win_game                   = Συγχαρητήρια, βρήκες όλους τους θησαυρούς. Κέρδισες!\\n         already_in_container                           = ${entity} είναι ήδη μέσα στο ${entity2}.\\n         ask_new_game                                   = Would you like to start a new game?\\n         ask_quit                                       = Do you wish to quit the game?\\n         be_more_specific                               = Πρέπει να γίνεις πιο συγκεκριμένος ... \\n         cannot_carry_any_more                          = You cannot carry any more items.\\n         cannot_carry_any_more_weight                   = It\\'s too heavy for you to carry.\\n         cant_see_one_of_those                          = You can\\'t see one of those.\\n         cant_take                                      = Δεν μπορείς να το πάρεις.\\n         dont_have_one_of_those                         = You don\\'t have one of those!\\n         exit_list_additional_exits_are_located_verbose = Additional exits are located \\n         exit_list_end_text                             =\\n         exit_list_end_text_verbose                     = .\\n         exit_list_from_here_you_can_go_verbose         = Μπορείς να πάς \\n         exit_list_header_concise                       = Έξοδοι : \\n         exit_list_last_sep_verbose                     =  and \\n         exit_list_sep_verbose                          = , \\n         exit_list_there_are_no_obvious_exits           = Δεν βλέπεις κάποια προφανή έξοδο.\\n         exit_list_to_the_verbose                       = to the\\n         exit_list_you_can_also_go_verbose              = Μπορείς επίσης να πάς \\n         gamebook_question                              = Select An Option ...\\n         i_cant_do_that                                 = Όχι αυτή τη στιγμή.\\n         invalid_choice                                 = Λάθος επιλογή.\\n         inventory_list_empty                           = Τίποτα\\n         inventory_list_end_text                        = .\\n         inventory_list_final_separator                 =  and \\n         inventory_list_header                          = Κουβαλάς: \\n         inventory_list_header_verbose                  = Κουβαλάς \\n         inventory_list_separator                       = , \\n         it_is_dark                                     = It is dark. You can\\'t see a thing.\\n         must_remove_first                              = Try taking it off first.\\n         not_carried                                    = You can\\'t ${verb} something you are not carrying.\\n         not_present                                    = ${entity} is not here.\\n         nothing_here                                   = Δεν υπάρχει τίποτα εδώ.\\n         nothing_to_get                                 = You look around but can\\'t see any ${noun} anywhere!\\n         object_list_empty                              = Τίποτα\\n         object_list_end_text                           = .\\n         object_list_final_separator                    =  and \\n         object_list_header                             = Βλέπεις : \\n         object_list_header_verbose                     = Βλέπεις\\\\s \\n         object_list_separator                          = , \\n         ok                                             = OK\\n         on_drop                                        = Αντικείμενο που έριξες\\\\s: ${entity}.\\n         on_get                                         = Αντικείμενο που πήρες: ${entity}.\\n         on_put                                         = You put ${entity} inside ${entity2}.\\n         on_put_non_container                           = ${entity} is not a container.\\n         on_put_non_surface                             = ${entity} is not a surface.\\n         on_remove                                      = You take off ${entity}.\\n         on_wear                                        = Φόρεσες ${entity}.\\n         post_quit                                      = You have quit the game.\\n         prior_prompt                                   = Τι κάνουμε τώρα?\\n         prompt                                         = >>\\n         question_prompt_char                           = ?\\n         there_is_nothing_you_can                       = Δεν υπάρχει τίποτα να ${verb} αυτή τη στιγμή.\\n         treasure_message                               =\\n         treasure_suffix                                =\\n         unknown_noun                                   = Αυτό το παιχνίδι δεν χρησιμοποιεί την λέξη \""${noun}\"".\\n         unknown_verb                                   = Αυτό το παιχνίδι δεν χρησιμοποιεί την λέξη \""${verb}\"".\\n         worn_suffix                                    =  (worn)\\n         you_already_wear                               = Το φοράς ήδη αυτό.\\n         you_are_already_carrying                       = Έχεις ήδη ${entity}.\\n         you_are_not_holding                            = Δεν κρατάς ${entity}.\\n         you_cant_go_that_direction                     = Δεν μπορείς να πάς εκεί.\\n         you_cant_wear                                  = You can\\'t wear that.\\n         you_cant_wear_anything_else                    = You can\\'t wear anything else without removing something first.\\n         you_dont_wear                                  = You are not wearing that.\\n         you_see_nothing_special                        = Δεν βλέπεις τίποτα αξιόλογο.\\n\\n      }\\n   }\\n}\\n\\n\\n\\nassets {\\n   graphics {\\n      \\n\\n\\n   }\\n}\\n'};""
"
7YSMPehM,Travel Time,Pijomir,JavaScript,Saturday 4th of November 2023 04:51:00 AM CDT,"function checkDestinations(input) {
    let destinationsList = {};
    input.forEach(el => {
        let [country, town, price] = el.split(' > ');
        price = Number(price);
        if (!destinationsList.hasOwnProperty(country)) {
            destinationsList[country] = {[town]: price};
        } else {
            if (destinationsList[country].hasOwnProperty(town)) {
                if (price > destinationsList[country][town]) {
                    price = destinationsList[country][town];
                }
            }

            destinationsList[country][town] = price;
        }
    });
    let sortedDestinations = Object.entries(destinationsList).sort((a, b) => a[0].localeCompare(b[0]));
    sortedDestinations.forEach(el => {
        let [country, townAndPrice] = el;
        let sortedTOwns = Object.entries(townAndPrice).sort((a, b) => a[1] - b[1]).map(a => `${a[0]} -> ${a[1]}`).join(' ');
        console.log(`${country} -> ${sortedTOwns}`);
    });
}"
g9nUqbrN,startup_code.s,PecaJ,ARM,Saturday 4th of November 2023 04:37:24 AM CDT,".cpu cortex-m3
.fpu softvfp
.syntax unified
.thumb


.extern _main_stack_pointer_value

.weak nmi_handler
.thumb_set nmi_handler, default_handler

.weak hard_fault_handler
.thumb_set hard_fault_handler, default_handler

.weak mem_fault_handler
.thumb_set mem_fault_handler, default_handler

.weak bus_fault_handler
.thumb_set bus_fault_handler, default_handler

.weak usage_fault_handler
.thumb_set usage_fault_handler, default_handler

.weak sv_call_handler
.thumb_set sv_call_handler, default_handler

.weak pend_sv_handler
.thumb_set pend_sv_handler, default_handler

.weak systick_handler
.thumb_set systick_handler, default_handler

.weak irq0
.thumb_set irq0, default_handler

.weak irq1
.thumb_set irq1, default_handler

.weak irq2
.thumb_set irq2, default_handler

# =============== Vector table ==================
.section .vector_table, ""a""
.word _main_stack_pointer_value
.word reset_handler
.word nmi_handler
.word hard_fault_handler
.word mem_fault_handler
.word bus_fault_handler
.word usage_fault_handler
.rept 4
	.word default_handler
.endr
.word sv_call_handler
.rept 2
	.word default_handler
.endr
.word pend_sv_handler
.word systick_handler
.word irq0
.word irq1
.word irq2
.rept 65
	.word default_handler
.endr
# ============= End vector table =================


.extern main

.extern _vma_data_start
.extern _vma_data_end
.extern _lma_data_start

.section .text.reset_handler
.type reset_handler, %function
reset_handler:
    ldr r0, =_lma_data_start
    ldr r1, =_vma_data_start
    ldr r2, =_vma_data_end

    cmp r0, r1
    beq branch_to_main
copy_loop:
    ldr r3, [r0], 4
    str r3, [r1], 4
    cmp r1, r2
    blo copy_loop

branch_to_main:
    b main

inf_loop:
    b inf_loop



.section .text.default_handler
.type default_handler, %function
default_handler:
    b default_handler

.end
"
vysqPHDQ,makefile,PecaJ,Make,Saturday 4th of November 2023 04:36:45 AM CDT,"PROGRAM = program
BUILD_DIR = build
DEBUG_ENABLED = 1

SOURCE_S_LIST = \
src/startup_code.s\
src/instruction_set.s

SOURCE_C_LIST = \
src/main.c \
src/systick.c

OBJECTS_LIST =
# Make funkcija notdir daje samo ime fajla (izbacuje source/)
OBJECTS_LIST += ${addprefix ${BUILD_DIR}/, ${notdir ${SOURCE_S_LIST:.s=.o}}}
OBJECTS_LIST += ${addprefix ${BUILD_DIR}/, ${notdir ${SOURCE_C_LIST:.c=.o}}}
# Make funkcija dir vraca samo direktorijum
# vpath kaze make-u u kojim dodatnim direktorijuma da trazi fajlove oblika %.s 
vpath %.s ${sort ${dir ${SOURCE_S_LIST}}} 
vpath %.c ${sort ${dir ${SOURCE_C_LIST}}}

# Da kompajler zna gde da trazi include fajlove -Ifolder
FLAGS_INCLUDE = \
-Iinc

# format je -fdebug-prefix-map=old=new
# menja putanje u debug informacijama
# kako bi se izbeglo da se u debug informacijama vidi putanja do fajla na racunaru
# tj da ne bude /home/username/... vec samo /...
FLAGS_DEBUG = -g -gdwarf-2 -fdebug-prefix-map==../


CC = arm-none-eabi-gcc.exe -c
AS = arm-none-eabi-gcc.exe -c -x assembler
LD = arm-none-eabi-ld.exe
HX = arm-none-eabi-objcopy.exe -O ihex

MCU = -mcpu=cortex-m3 -mthumb


FLAGS_AS =
FLAGS_AS += $(MCU)
ifeq (${DEBUG_ENABLED}, 1)
FLAGS_AS += ${FLAGS_DEBUG}
endif
# Za automatsko ubacivanje it instrukcije za uslovno izvrsavanje
FLAGS_AS += -Wa,-mimplicit-it=thumb


FLAGS_CC =
FLAGS_CC += $(MCU)
# -MMD -MP dodaje .d fajl (dependency) koji sadrzi zavisnosti izmedju fajlova (za .h fajlove)
FLAGS_CC += -MMD -MP
# -mlong-calls omogucava da se pozivaju funkcije koje su udaljene vise od 32MB
FLAGS_CC += -mlong-calls
FLAGS_CC += ${FLAGS_INCLUDE}
ifeq (${DEBUG_ENABLED}, 1)
FLAGS_CC += ${FLAGS_DEBUG}
endif

LINKER_SCRIPT = linker_script.ld


# Cilj je all, preduslovi su program.hex i program.elf
# all ce se izvrsiti nakon sto se izvrse preduslovi
all : ${BUILD_DIR}/${PROGRAM}.hex ${BUILD_DIR}/${PROGRAM}.elf

# ${@} je cilj, ${<} je prvi preduslov, ${^} predstavlja sve preduslove
${BUILD_DIR}/${PROGRAM}.hex : ${BUILD_DIR}/${PROGRAM}.elf
	${HX} ${<} ${@}

# Dodavanje makefile kao preduslov obezbedjujemo da ako dodamo neki fajl da ce se opet izvrsiti
# Samim time ne mozemo koristiti ${^} jer to ukljucuje makefile
${BUILD_DIR}/${PROGRAM}.elf : ${OBJECTS_LIST} makefile
	${LD} -T ${LINKER_SCRIPT} -o ${@} ${OBJECTS_LIST}

# Obicno se vidi oblik -o ${@} ${<}
# Ako postoji neki fajl.s ako ima preduslov fajl.o, ovo ce se izvrsiti
# Kako bi se pravili fajlove u build dir mora da postoji, ali ne treba da pratimo da li je noviji od cilja, samo da postoji
# Zato se navodi kao order only prerequisite - treba samo da postoji
${BUILD_DIR}/%.o : %.s | ${BUILD_DIR}
	${AS} ${FLAGS_AS} -o ${@} ${<}

# Ovde ne moze se navesti header fajl tako da se nece izvrsiti ako se promeni header fajl
${BUILD_DIR}/%.o : %.c | ${BUILD_DIR}
	${CC} ${FLAGS_CC} -o ${@} ${<}
	
# Dodat cilj za pravljenje build dir ako ne postoji
${BUILD_DIR} :
	mkdir ${@}

clean :
	rm -rf ${BUILD_DIR}


# -include dodaje sve .d fajlove
# wildcard ekspanduje wildcard expression
-include ${wildcard ${BUILD_DIR}/*.d}"
8b4w3BAd,instruction_set.s,PecaJ,ARM,Saturday 4th of November 2023 04:34:58 AM CDT,".cpu cortex-m3
.fpu softvfp
.syntax unified
.thumb

.extern _vma_data_start

.global instruction_set

.section .text.instruction_set
.type instruction_set, %function
instruction_set:

@	================== Branch/jump instrukcije ===========================
@	b{cond}   label		@ Branch (immediate)
@	bl{cond}  label		@ Branch with link (immediate)
@	bx{cond}  Rm		@ Branch indirect (register)
@	blx{cond} Rm		@ Branch with link indirect (register)
@   Za link povratna adresa se upisuje u link registar
@	-> moramo sami da cuvamo link registar

@ 	Kako bismo koristili dalje link registar kao opstenamenski moramo ga
@ 	sacuvati u memoriji (na stek)
@	str lr, [sp, -4]!				@ Stek pun opadajuci, smanjujemo za jednu
									@ rec (4B) pre upisa, i azuriramo ga
@   Alternativno
	push {r0-r5, lr}				@ backupujemo koriscene registre

@	================= Memorijske instrukcije LDR, STR ========================
@	op{type} [r0, offset]
@	op{type} [r0, offset]!			Pre indexed
@ 	op{type} [r0], offset			Post indexed
@ 	op:   ldr, str
@   type: b - byte, sb - signed byte, h - half word, sh - signed half word

	ldr r0, data1					@ Ucitava vrednost sa adrese data1
									@ Ne enkoduje samu adresu, vec pc-relativno

	ldr r0, =data1					@ Ucitava adresu data1
	ldr r0, [r0]					@ Ucitava vrednost sa adrese data1

	adr r0, data1					@ Ucitava adresu data1
	ldr r1, [r0]					@ Ucitava vrednost sa adrese data1

	ldrb r1, [r0, 3]				@ Ucitavanje jednog bajta sa adrese r0+3
	ldrb r1, [r0], 1				@ Ucitavanje 1B sa adrese r0, nakon cega
									@ se r0 povecava za 1
	ldrh r1, [r0, 1]!				@ Ucitavanje 2B sa adrese r0+1, nakon cega
									@ se r0 povecava za 1

@	============ Visestruke memorijske instrukcije LDM, STM =================
@	op{addr_mode}{cond} Rn{!}, reglist
@   addr_mode:  IA - increment after(default), DB - decrement before each access
@	!: da li se vrednost koja se inkrementira cuva u registru Rn
	ldm r0, {r1-r4, r5}				@ U registre se smestaju vrednosti pocevsi
									@ od adrese r0, i dodeljuju se redom po
									@ brojevima registara
	ldm r0, {r1, r2, r3}			@ r1 = [r0], r2 = [r0+4], r3 = [r0+8]
@	ldm r0, {r3, r1, r2}			@ Isti efekat, ali daje warning
	ldmia r0!, {r1-r4}
	ldmdb r0!, {r1-r4}

@	================== Smestanje konstanti u registar =======================
@	Instrukcije su 2-4 bajta, tako da nije uvek moguce enkodovati 4B vrednost
@	u instrukciju
	mov r0, 0xFF00FF00				@ OK
@	mov r0, 0x12345678				@ Greska
@	Resenje:
	mov r0, 0x5678					@ Upise nizih 2B i prosiri nulom
	movt r0, 0x1234					@ Upise u visih 2B

@	=================== Aritmeticke i logicke instrukcije ===================
	mov r1, 17
	mov r2, 5
	sub r1, r2						@ r1 = r1-r2
	sub r0, r1, r2					@ r0 = r1-r2
@	r2 ovde prestavlja tzv. Fleksibilni operand tj operand2, za njega moze se
@	navesti konstanta, ili uraditi neka shift operacija
	sub r0, r1, r2, LSL 2			@ r0 = r1 - (r2<<2)
	sub r0, r1, 9					@ r0 = r1 - 9
@	Instrukcije obicno ne menjaju condition flags ali mogu sa sufiksom S
	lsls r0, r3, r4
	adds r0, r1, r2
	rrx r0, r1						@ rotacija desno za jedan sa carry flag

@	Conditional execution, svaka instrukcija moze uslovno da se izvrsi
@	eq, ne - equal, not equal
@	hi, lo - higher, lower (unsigned >, <)
@	hs, ls - higher or same, lower or same (unsigned >=, <=)
@	gt, lt - greater, less than (signed >, <)
@	ge, le - greater or equal, greater or equal (signed >=, <=)
@	mi, pl - negative, positive or zero
@	vs, vc - overflow set, clear
	cmp r1, 13
@	Kako bi se koristilo uslovno izvrsavanje potrebna je priprema
@	pise se i(if) pa t(then) ili e(else) za svaku od sledecih instrukcija
@	ittet ne						@ Zbog opcija prosledjenih as-u moze bez
	movne r0, 5						@ t jer koristi ne
	movsne r1, 4					@ zbog s menja flegove
	moveq r2, 3						@ e jer koristi eq (komplement navedenog)
	movne r3, 2

@	========================= Izlaz iz funkcije ===========================
@	ldr lr, [sp], 4					@ Restauriramo link reg sa steka
	pop {r0-r5, lr}
	bx lr							@ Return iz funkcije


data1:
.word _vma_data_start

	.end
"
58KriVtb,03. Inventory,Spocoman,Python,Saturday 4th of November 2023 04:34:25 AM CDT,"collected_items = input().split("", "")
input_line = input()

while input_line != ""Craft!"":
    command, item = input_line.split("" - "")
    if command == ""Collect"":
        if item not in collected_items:
            collected_items.append(item)
    elif command == ""Drop"":
        if item in collected_items:
            collected_items.remove(item)
    elif command == ""Combine Items"":
        old_item, new_item = item.split(':')
        if old_item in collected_items:
            collected_items.insert(collected_items.index(old_item) + 1, new_item)
    else:
        if item in collected_items:
            collected_items.append(collected_items.pop(collected_items.index(item)))
    input_line = input()

print("", "".join(collected_items))
"
mw6x9xmk,14 номер,nq1s788,Python,Saturday 4th of November 2023 04:19:10 AM CDT,"s = '8' * 68
while ('222' in s) or ('888' in s):
    if ('222' in s):
        s = s.replace('222', '8')
    else:
        s = s.replace('888', '2')
print(s)"
QfXaueQV,Untitled,kwest87,C#,Saturday 4th of November 2023 03:54:01 AM CDT,"[StartCode]
using System;

namespace ConsoleApp26
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.Write(""Введите ваше имя : "");
            string name = Console.ReadLine();
            Console.Write(""Введите символ : "");
            char symbol = Console.ReadKey().KeyChar;
            string edgedName = symbol + name + symbol;
            Console.WriteLine();
            string edging = """"; 

            for (int i = 0; i < edgedName.Length; i++)
            {
                edging += symbol;
            }

            Console.WriteLine(edging);
            Console.WriteLine(edgedName);
            Console.WriteLine(edging);
        }
    }
}
[EndCode]"
QDPN7eC2,Untitled,JihakaYo,C#,Saturday 4th of November 2023 02:38:39 AM CDT," using Docker.DotNet;
using Docker.DotNet.Models;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

class Program
{
    static async Task Main()
    {
        // Создаем клиент Docker API
        using (var client = new DockerClientConfiguration(new Uri(""http://localhost:2375"")).CreateClient())
        {
            // Имя контейнера, который нужно перезагрузить
            string containerName = ""your_container_name"";

            // Получаем информацию о контейнере
            var container = await client.Containers.InspectContainerAsync(containerName);

            if (container != null)
            {
                // Останавливаем контейнер
                await client.Containers.StopContainerAsync(containerName, new ContainerStopParameters());

                // Запускаем контейнер снова
                await client.Containers.StartContainerAsync(containerName, new ContainerStartParameters());
                
                Console.WriteLine($""Контейнер {containerName} был перезагружен."");
            }
            else
            {
                Console.WriteLine($""Контейнер {containerName} не найден."");
            }
        }
    }
}
"
9XFRGmbm,Untitled,JihakaYo,C#,Saturday 4th of November 2023 01:08:26 AM CDT,"using System;
using Npgsql;

class Program
{
    static void Main()
    {
        string connString = ""Host=your_postgres_host;Port=5432;Username=your_username;Password=your_password;Database=your_database"";

        try
        {
            // Подключение к PostgreSQL
            using (var conn = new NpgsqlConnection(connString))
            {
                conn.Open();
                Console.WriteLine(""Соединение с базой данных установлено."");

                // Выполнение запроса к PostgreSQL логам
                using (var cmd = new NpgsqlCommand(""SELECT * FROM pg_stat_activity"", conn))
                {
                    using (var reader = cmd.ExecuteReader())
                    {
                        if (reader.HasRows)
                        {
                            Console.WriteLine(""База данных работает. Логи доступны."");
                        }
                        else
                        {
                            Console.WriteLine(""База данных не работает. Логи недоступны."");
                        }
                    }
                }
            }
        }
        catch (NpgsqlException ex)
        {
            Console.WriteLine($""Ошибка при подключении к базе данных: {ex.Message}"");
        }
    }
}
"
uMS431St,9. Palindrome Number,micahbales,JavaScript,Saturday 4th of November 2023 01:08:01 AM CDT,"/**
* Problem statement: https://leetcode.com/problems/palindrome-number/
*
* There are really fancy bitwise operations you can do to avoid string conversion,
* but in the absence of a need for extreme efficiency, this seems like an acceptable solution to me.
*/

/**
 * @param {number} x
 * @return {boolean}
 */
var isPalindrome = function(x) {
    if (x < 0) return false
    xString = x + ''
    for (let i = 0, j = xString.length - 1; i < j; i++, j--) {
        if (xString[i] !== xString[j]) return false
    }
    return true
};"
vKFReEqh,Streaks,marcusa3000,Lua,Saturday 4th of November 2023 01:04:45 AM CDT,"{
	Tools = ordered() {
		FastNoise1_6 = FastNoise {
			NameSet = true,
			Inputs = {
				GlobalOut = Input { Value = 124, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				LockXY = Input { Value = 0, },
				XScale = Input { Value = 0, },
				YScale = Input { Value = 21.4, },
				Angle = Input { Value = -13, },
				SeetheRate = Input { Value = 2, },
				Type = Input { Value = 1, },
				Color1Alpha = Input { Value = 1, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0.651741293532338] = { 0, 0, 0, 1 },
							[0.676616915422886] = { 1, 0, 0.24, 1 },
							[0.766169154228856] = { 0.154936, 0.127, 1, 1 },
							[0.885572139303483] = { 0.454199134199134, 0.610383788513709, 0.967964444444444, 1 },
							[0.945273631840796] = { 1, 0.47, 0.927919999999999, 1 },
							[1] = { 1, 0.47, 0.927919999999999, 1 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo { Pos = { 660, 610.5 } },
		},
		Merge22 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Merge1"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""SoftGlow3_1"",
					Source = ""Output"",
				},
				ApplyMode = Input { Value = FuID { ""LinearDodge"" }, },
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { 660, 709.5 } },
		},
		BrightnessContrast1_17 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Alpha = Input { Value = 1, },
				High = Input { Value = 0.161, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				PreDividePostMultiply = Input { Value = 1, },
				Input = Input {
					SourceOp = ""ErodeDilate1_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 880, 808.5 } },
		},
		ChannelBooleans2 = ChannelBoolean {
			Inputs = {
				ToRed = Input { Value = 4, },
				ToGreen = Input { Value = 4, },
				ToBlue = Input { Value = 4, },
				ToAlpha = Input { Value = 16, },
				Background = Input {
					SourceOp = ""BrightnessContrast1_17"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 880, 775.5 } },
		},
		Blur_5 = Blur {
			NameSet = true,
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				XBlurSize = Input { Value = 6, },
				Input = Input {
					SourceOp = ""ChannelBooleans2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 770, 775.5 } },
		},
		SoftGlow3_1 = SoftGlow {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Threshold = Input { Value = 0.063, },
				Gain = Input { Value = 2.913, },
				XGlowSize = Input { Value = 93.7, },
				Input = Input {
					SourceOp = ""BrightnessContrast1_16"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 770, 709.5 } },
		},
		Merge1 = Merge {
			Inputs = {
				MaskChannel = Input { Value = 5, },
				MaskLow = Input { Value = 0.056, },
				MaskHigh = Input { Value = 0.15, },
				Background = Input {
					SourceOp = ""FastNoise1_6"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""FastNoise1_7"",
					Source = ""Output"",
				},
				ApplyMode = Input { Value = FuID { ""LinearDodge"" }, },
				PerformDepthMerge = Input { Value = 0, },
				EffectMask = Input {
					SourceOp = ""Bitmap1_6"",
					Source = ""Mask"",
				}
			},
			ViewInfo = OperatorInfo { Pos = { 660, 676.5 } },
		},
		Merge23 = Merge {
			Inputs = {
				Background = Input {
					SourceOp = ""Merge22"",
					Source = ""Output"",
				},
				Foreground = Input {
					SourceOp = ""Blur_5"",
					Source = ""Output"",
				},
				ApplyMode = Input { Value = FuID { ""LinearDodge"" }, },
				PerformDepthMerge = Input { Value = 0, },
			},
			ViewInfo = OperatorInfo { Pos = { 660, 775.5 } },
		},
		BrightnessContrast1_16 = BrightnessContrast {
			Inputs = {
				ApplyMaskInverted = Input { Value = 1, },
				Low = Input { Value = 0.294, },
				High = Input { Value = 0.839, },
				ClipBlack = Input { Value = 1, },
				ClipWhite = Input { Value = 1, },
				PreDividePostMultiply = Input { Value = 1, },
				Input = Input {
					SourceOp = ""FastNoise1_8"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 880, 709.5 } },
		},
		FastNoise1_7 = FastNoise {
			NameSet = true,
			CurrentSettings = 2,
			CustomData = {
				Settings = {
					[1] = {
						Tools = ordered() {
							FastNoise1_7 = FastNoise {
								CtrlWZoom = false,
								NameSet = true,
								CustomData = {
								},
								Inputs = {
									GlobalOut = Input { Value = 124, },
									Width = Input { Value = 1080, },
									Height = Input { Value = 1080, },
									[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
									LockXY = Input { Value = 0, },
									XScale = Input { Value = 0, },
									YScale = Input { Value = 21.4, },
									Angle = Input { Value = -13, },
									Seethe = Input { Value = 0.413, },
									SeetheRate = Input { Value = 2, },
									Type = Input { Value = 1, },
									Color1Alpha = Input { Value = 1, },
									Gradient = Input {
										Value = Gradient {
											Colors = {
												[0.766169154228856] = { 0, 0, 0, 1 },
												[0.791044776119403] = { 1, 0, 0.24, 1 },
												[0.840796019900497] = { 0.459428571428572, 0.441558441558442, 1, 1 },
												[0.915422885572139] = { 0.454199134199134, 0.610383788513709, 0.967964444444444, 1 },
												[0.965174129353234] = { 1, 0.47, 0.927919999999999, 1 },
												[1] = { 1, 0.47, 0.927919999999999, 1 }
											}
										},
									},
								},
								ViewInfo = OperatorInfo { Pos = { -110, 841.5 } },
							}
						}
					},
				}
			},
			Inputs = {
				GlobalOut = Input { Value = 124, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				LockXY = Input { Value = 0, },
				XScale = Input { Value = 0, },
				YScale = Input { Value = 21.4, },
				Angle = Input { Value = -13, },
				Seethe = Input { Value = 0.413, },
				SeetheRate = Input { Value = 2, },
				Type = Input { Value = 1, },
				Color1Alpha = Input { Value = 1, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0.472636815920398] = { 0, 0, 0, 1 },
							[0.776119402985075] = { 1, 0.91336, 0.886, 1 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo { Pos = { 770, 676.5 } },
		},
		Bitmap1_6 = BitmapMask {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				MaskWidth = Input { Value = 1080, },
				MaskHeight = Input { Value = 1080, },
				PixelAspect = Input { Value = { 1, 1 }, },
				UseFrameFormatSettings = Input { Value = 1, },
				ClippingMode = Input { Value = FuID { ""None"" }, },
				Image = Input {
					SourceOp = ""FastNoise1_6"",
					Source = ""Output"",
				},
				Channel = Input { Value = FuID { ""Luminance"" }, },
				Low = Input { Value = 0.211, },
				High = Input { Value = 0.495, },
			},
			ViewInfo = OperatorInfo { Pos = { 550, 676.5 } },
		},
		CornerPositioner1_1 = CornerPositioner {
			Inputs = {
				TopLeft = Input { Value = { -0.139154160982265, 1.55313351498638 }, },
				TopRight = Input { Value = { 1.03274215552524, 1.04904632152589 }, },
				BottomLeft = Input { Value = { -0.0600272851296044, -0.0435967302452316 }, },
				BottomRight = Input { Value = { 1.02182810368349, -0.0817438692098093 }, },
				Input = Input {
					SourceOp = ""Merge23"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 660, 841.5 } },
		},
		ErodeDilate1_1 = ErodeDilate {
			Inputs = {
				Filter = Input { Value = 3, },
				XAmount = Input { Value = 0.0022, },
				Input = Input {
					SourceOp = ""pRender1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 990, 808.5 } },
		},
		SoftGlow3 = SoftGlow {
			Inputs = {
				Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
				Threshold = Input { Value = 0.22, },
				Gain = Input { Value = 2.913, },
				XGlowSize = Input { Value = 22, },
				Input = Input {
					SourceOp = ""CornerPositioner1_1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 660, 874.5 } },
		},
		pRender1 = pRender {
			Inputs = {
				_MotionBlurWarning = Input { Disabled = true, },
				GlobalOut = Input { Value = 124, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				UseFrameFormatSettings = Input { Value = 1, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				OutputMode = Input {
					Value = FuID { ""TwoD"" },
					Disabled = true,
				},
				PreGenerateFrames = Input { Value = 35, },
				[""MaterialID.MaterialID""] = Input { Value = 4, },
				[""ObjectID.ObjectID""] = Input { Value = 4, },
				Input = Input {
					SourceOp = ""pEmitter2"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 990, 775.5 } },
		},
		FastNoise1_8 = FastNoise {
			NameSet = true,
			CurrentSettings = 2,
			CustomData = {
				Settings = {
					[1] = {
						Tools = ordered() {
							FastNoise1_7 = FastNoise {
								Inputs = {
									YScale = Input { Value = 21.4 },
									XScale = Input { Value = 0 },
									Gradient = Input {
										Value = Gradient {
											Colors = {
												[0.766169154228856] = { 0, 0, 0, 1 },
												[0.791044776119403] = { 1, 0, 0.24, 1 },
												[0.840796019900497] = { 0.459428571428572, 0.441558441558442, 1, 1 },
												[0.915422885572139] = { 0.454199134199134, 0.610383788513709, 0.967964444444444, 1 },
												[0.965174129353234] = { 1, 0.47, 0.927919999999999, 1 },
												[1] = { 1, 0.47, 0.927919999999999, 1 }
											}
										}
									},
									Seethe = Input { Value = 0.413 },
									Width = Input { Value = 1080 },
									Type = Input { Value = 1 },
									[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" } },
									SeetheRate = Input { Value = 2 },
									Color1Alpha = Input { Value = 1 },
									GlobalOut = Input { Value = 124 },
									Angle = Input { Value = -13 },
									LockXY = Input { Value = 0 },
									Height = Input { Value = 1080 }
								},
								CtrlWZoom = false,
								NameSet = true,
								ViewInfo = OperatorInfo { Pos = { -110, 841.5 } },
								CustomData = {
								}
							}
						}
					},
				}
			},
			Inputs = {
				GlobalOut = Input { Value = 124, },
				Width = Input { Value = 1080, },
				Height = Input { Value = 1080, },
				[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
				LockXY = Input { Value = 0, },
				XScale = Input { Value = 0, },
				YScale = Input { Value = 2.83, },
				Angle = Input { Value = -13, },
				Seethe = Input { Value = 0.413, },
				SeetheRate = Input { Value = 2, },
				Type = Input { Value = 1, },
				Color1Alpha = Input { Value = 1, },
				Gradient = Input {
					Value = Gradient {
						Colors = {
							[0.671641791044776] = { 0, 0, 0, 1 },
							[0.7860696517413] = { 1, 0.922480000000002, 0.898, 1 }
						}
					},
				},
			},
			ViewInfo = OperatorInfo { Pos = { 990, 709.5 } },
		},
		pEmitter2 = pEmitter {
			ID = 2960,
			Inputs = {
				Number = Input { Value = 0.2, },
				VelocityControls = Input { Value = 1, },
				Velocity = Input { Value = 2, },
				VelocityVariance = Input { Value = 0.528, },
				Angle = Input { Value = -180, },
				AngleVariance = Input { Value = 47, },
				RotationControls = Input { Value = 1, },
				RotationMode = Input { Value = 1, },
				SpinControls = Input { Value = 1, },
				SpinZ = Input { Value = 2.7, },
				Style = Input { Value = FuID { ""ParticleStyleLine"" }, },
				[""ParticleStyleLine.Fade""] = Input { Value = 0, },
				Region = Input { Value = FuID { ""LineRgn"" }, },
				[""SphereRgn.Size""] = Input { Value = 0.593880495657624, },
				[""ParticleStyle.ColorControls""] = Input { Value = 1, },
				[""ParticleStyle.Green""] = Input { Value = 0.995584, },
				[""ParticleStyle.Blue""] = Input { Value = 0.976, },
				[""ParticleStyle.ColorVariance""] = Input { Value = 1, },
				[""ParticleStyle.RedLow""] = Input { Value = -1, },
				[""ParticleStyle.GreenLow""] = Input { Value = -1, },
				[""ParticleStyle.BlueLow""] = Input { Value = -1, },
				[""ParticleStyle.AlphaLow""] = Input { Value = -1, },
				[""ParticleStyle.SizeControls""] = Input { Value = 1, },
				[""ParticleStyle.Size""] = Input { Value = 2.3, },
				[""ParticleStyle.SizeVariance""] = Input { Value = 0.5, },
				[""ParticleStyle.SizeOverLife""] = Input {
					SourceOp = ""pEmitter2SizeOverLife"",
					Source = ""Value"",
				},
				[""ParticleStyle.BlurOverLife""] = Input {
					SourceOp = ""pEmitter2BlurOverLife2D"",
					Source = ""Value"",
				},
				[""LineRgn.Start.X""] = Input { Value = 0.574397923875432, },
				[""LineRgn.Start.Y""] = Input { Value = 0.508650519031142, },
				[""LineRgn.End.X""] = Input { Value = 0.57439446366782, },
				[""LineRgn.End.Y""] = Input { Value = -0.494809688581315, },
			},
			ViewInfo = OperatorInfo { Pos = { 1100, 775.5 } },
		},
		pEmitter2SizeOverLife = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.3, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.7, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		pEmitter2BlurOverLife2D = LUTBezier {
			KeyColorSplines = {
				[0] = {
					[0] = { 0.5, RH = { 0.3, 0.5 }, Flags = { Linear = true } },
					[1] = { 0.5, LH = { 0.7, 0.5 }, Flags = { Linear = true } }
				}
			},
			SplineColor = { Red = 192, Green = 128, Blue = 64 },
			CtrlWZoom = false,
		},
		JPEGDamage1 = ofx.com.blackmagicdesign.resolvefx.JPEGDamage {
			Inputs = {
				Source = Input {
					SourceOp = ""SoftGlow3"",
					Source = ""Output"",
				},
				ofxQuality = Input { Value = 40, },
				Resolution = Input { Value = 4, },
				AspectRatio = Input { Value = 1, },
				FrequencyScale = Input { Value = 1, },
				FrequencyType = Input { Value = FuID { ""FREQUENCY_TYPE_XY"" }, },
				BlendAmount = Input { Value = 0, },
				blendGroup = Input { Value = 0, },
				blendIn = Input { Value = 1, },
				blend = Input { Value = 0, },
				ignoreContentShape = Input { Value = 0, },
				legacyIsProcessRGBOnly = Input { Value = 0, },
				IsNoTemporalFramesReqd = Input { Value = 0, },
				refreshTrigger = Input { Value = 1, },
				resolvefxVersion = Input { Value = ""1.1"", },
			},
			ViewInfo = OperatorInfo { Pos = { 660, 907.5 } },
		},
		ChangeDepth1_5 = ChangeDepth {
			Inputs = {
				Depth = Input { Value = 1, },
				Input = Input {
					SourceOp = ""JPEGDamage1"",
					Source = ""Output"",
				},
			},
			ViewInfo = OperatorInfo { Pos = { 660, 973.5 } },
		}
	}
}"
2ujGwcHF,268. Missing Number,micahbales,JavaScript,Saturday 4th of November 2023 12:48:18 AM CDT,"/*
* Problem statement: https://leetcode.com/problems/missing-number/
*
* The obvious solution to this problem is to pre-sort the array and then iterate
* over it searching for the missing number. Unfortunately, this solution requires two
* iterations over the entire array, including a sort action that can be expensive
* depending on the implementation.
*
* There is an alternative solution here, if you are aware of the Gaussian Summation,
* which states that for any list of ordered numbers 1..n, the sum total of that list
* will be equal to (n * (n + 1)) / 2, where 'n' is the length of the list of numbers.
* This seems like a silly thing to expect someone to know in an interview.
* But it's a neat trick.
*/


/* Trivial Solution By Pre-Sorting */

/**
 * @param {number[]} nums
 * @return {number}
 */
var missingNumber = function(nums) {
    nums.sort((a,b) => a - b)
    
    let lastNum = -1
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] !== lastNum + 1) return nums[i] - 1
        lastNum = nums[i] 
    }
    return lastNum + 1
}

/* Trick-Shot, feat. C.F. Gauss */

/**
 * @param {number[]} nums
 * @return {number}
 */
var missingNumber = function(nums) {
    const n = nums.length
    const expectedSum = (n * (n + 1)) / 2
    let actualSum = 0
    for (let i = 0; i < nums.length; i++) {
        actualSum += nums[i]
    }
    return expectedSum - actualSum
}"
HNbEiTtX,Untitled,test12333,C++,Friday 3rd of November 2023 10:55:11 PM CDT,"std::uintptr_t util::FindPattern( const char* smodule, const char* pattern, bool only_text_or_code, bool format ) {
	const auto mod_p = (uintptr_t)util::get_module_base_ansi( smodule );
	PIMAGE_DOS_HEADER pe_headers = (PIMAGE_DOS_HEADER)mod_p;
	PIMAGE_NT_HEADERS new_pe_headers = PIMAGE_NT_HEADERS( (uint8_t*)( mod_p + pe_headers->e_lfanew ) );
	
	DWORD dwSizeOfImage;
	DWORD end;
	uintptr_t begin;

	if ( only_text_or_code ) {
		PIMAGE_SECTION_HEADER Section = IMAGE_FIRST_SECTION( new_pe_headers );

		for ( WORD i = 0; i < new_pe_headers->FileHeader.NumberOfSections; i++ ) {

			if ( !fast_strcmp( (char*)Section->Name, "".code"" ) || !fast_strcmp( (char*)Section->Name, "".text"" ) ) {

				begin = Section->VirtualAddress;
				dwSizeOfImage = Section->SizeOfRawData;
				end = begin + dwSizeOfImage;

				//printf( ""%-8s\t%x\t%x\t%x\n"", Section->Name, Section->VirtualAddress,
					//   Section->PointerToRawData, Section->SizeOfRawData );

			}
			Section++;
		}
	}

	else {
		begin = mod_p;
		dwSizeOfImage = new_pe_headers->OptionalHeader.SizeOfImage;
		end = begin + dwSizeOfImage;
	}


	if ( const auto result = reinterpret_cast<std::uintptr_t>( find_pattern_internal( begin, end, format ? ParseCombo( pattern ).c_str( ) : pattern ) ); result ) {
		return result;
	}
	return NULL;
}"
6mZZpTLg,Koikatsu List Scraper V1.3,Skelun,JavaScript,Friday 3rd of November 2023 10:37:20 PM CDT,"/* --------------------------------------------------------------------
-- Transforms embedded links into actual Hyperlinks
----------------------------------------------------------------------- */

function createHyperlink() {
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  // Get the selected range
  var range = sheet.getActiveRange();
  var richTextValues = range.getRichTextValues();

  for (var i = 0; i < richTextValues.length; i++) {
    for (var j = 0; j < richTextValues[0].length; j++) {
      var textValue = richTextValues[i][j].getText();
      var link = richTextValues[i][j].getLinkUrl();

      if (link) {
        // Creates a hyperlink formula
        var formula = '=HYPERLINK(""' + link + '"", ""Here"")';

        // Set the formula in the cell
        sheet.getRange(range.getRow() + i, range.getColumn() + j).setFormula(formula);
      }
    }
  }
}

/* --------------------------------------------------------------------
-- MOON RATING
-----------------------------------------------------------------------
-- I'm using this because it was the easier way
-- to simulate rating stars.
----------------------------------------------------------------------- */

function moonRating(number) {
  
  if (!isNaN(number)) {
    var votes;

    // Is it an interger?
    if (number % 1 === 0) {
      votes=""🌕"".repeat(number);
      votes+=""🌑"".repeat(5-number);
    
    // Or is it a float?
    } else {
      let n = Math.floor(number);
      votes=""🌕"".repeat(n);
      votes+=""🌗"";
      votes+=""🌑"".repeat(4-n);
    }
    return votes;
  } else {
    // If no votes
    return ""------""
  }
}
  
/* --------------------------------------------------------------------
-- Scraping data using Cheerio library
-- (https://github.com/tani/cheeriogs)
-- Script ID: 1ReeQ6WO8kKNxoaA_O0XEQ589cIrRvEBA9qcWpNqdOP17i47u6N9M5Xh0
----------------------------------------------------------------------- */

// Cheerio method to scrape
function getContent(url) {
    return UrlFetchApp.fetch(url).getContentText()
}
  
/* --------------------------------------------------------------------
-- Actual scrape function
----------------------------------------------------------------------- */

function scrapeData(force) {

  // Selects the active sheet
  var sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();

  // Get selected cells
  var selectedRange = sheet.getActiveRange();

  // Get the values from the selected cells
  var selectedValues = selectedRange.getRichTextValues(); 

  // Iterate through cells
  for (var i = 0; i < selectedValues.length; i++) {

    // It assumes the URLs are in the first column of the selected column
    var urlFromLink = selectedValues[i][0].getLinkUrl();
    var urlFromCellValue = selectedValues[i][0].getText(); // Get text value from the cell

    // Check if there is a link URL, and use it if available; otherwise, use the URL from the cell value
    var url = urlFromLink ? urlFromLink : urlFromCellValue;

    // If the value is not empty...
    if (url && isValidURL(url)) {

      // Grabs the HTML data
      var content = getContent(url);
      
      // Parses the HTML data
      var $ = Cheerio.load(content);

      /* --------------------------------------------------------------------
      -- [TITLE]
      -------------------------------------------------------------------- */
      var threadTitle = $('h1.p-title-value');

      var rawTitle = threadTitle.contents().filter(function() {
        return this.type === 'text';
      }).text();

      /*
      var titleREGEX = /(.+?)\s*\[(.+?)\](?:\s*\[(.+?)\])?/.exec(rawTitle);

      // We should check if titleREGEX is not null before accessing its indices
      if (titleREGEX) {
        var title = titleREGEX[1];
        var version = titleREGEX[2];
      } else {
        var title = ""Title Problem ⚠️"";
        var version = ""Version Problem ⚠️"";        
      }

      var devBackup = titleREGEX[3] ? titleREGEX[3] + "" ❓"" : ""Not found ⚠️"";

      */

      // Inspects the Title searching for what's inside the brackets and what's not
      // it creates 3 captures groups: title, version and developer's name
      var titleREGEX = /(.+?)\s*\[(.+?)\](?:\s*\[(.+?)\])?/.exec(rawTitle);

      // initialize variables
      var title = ""Title N.F. ⚠️"";
      var version = ""Version N.F. ⚠️"";
      var devBackup = ""Dev N.F. ⚠️"";

      // Check if the regex has matched
      if (titleREGEX) {

        // If it exists, the game title is the first capture group
        title = titleREGEX && titleREGEX.length > 1 ? titleREGEX[1] : title;
          
        // The version will be in the second capture group, if it exists
        version = titleREGEX.length > 2 && titleREGEX[2] ? titleREGEX[2] : version;

        // The dev backup information will be in the third capture group, if it exists
        devBackup = titleREGEX.length > 3 && titleREGEX[3] ? titleREGEX[3] + "" ❓"" : devBackup;

      } else {
        // If there's nothing extra, assumes it's only the title
        title = rawTitle;
      }


      /* --------------------------------------------------------------------
      -- [STATUS] (ACTIVE - ABANDONED - ONHOLD)
      -------------------------------------------------------------------- */
      // Default status
      var status = 'Active';

      // Search for ""Abandoned"" or ""Onhold""
      threadTitle.find('span').each(function() {
        var spanText = $(this).text();
        if (['Completed','Abandoned','Onhold'].includes(spanText)) {
          status = spanText;
          return false;
        }
      });

      /* --------------------------------------------------------------------
      -- [ENGINE]
      ----------------------------------------------------------------------- */
      // If there's no engine info, it returns ""unknown""
      var engine = '⚠️ Unknown';

      // Checks if there's one of these strings
      threadTitle.find('span').each(function() {
        var spanText = $(this).text();
        if (['ADRIFT','Flash','Java','Others','QSP','RAGS','RPGM',""Ren'Py"",'Tads','Unity','Unreal Engine','WebGL','Wolf RPG','HTML'].includes(spanText)) {
          engine = spanText;
          return false; // Stop searching once a match is found
        }
      });

      /* --------------------------------------------------------------------
      -- [TAGS]
      ----------------------------------------------------------------------- */
      // Selects the element containing the tags
      var tagList = $('span.js-tagList');

      // Grabs the tags and separate them by comma
      var tags = tagList.find('a.tagItem').map(function() {
        return $(this).text();
      }).get().join(', ');

      /* --------------------------------------------------------------------
      -- GAMEPLAY
      ----------------------------------------------------------------------- */
      var gameplay;

      // Assumes the [Gameplay] type by using the tags
      switch (true) {
        case tags.includes('sandbox'):
          gameplay = 'Sandbox';
          break;
        case tags.includes('turn based combat'):
          gameplay = 'TBC';
          break;
        case tags.includes('management'):
          gameplay = 'Management';
          break;
        case tags.includes('simulator'):
          gameplay = 'Simulator';
          break;
        case tags.includes('rpg'):
          gameplay = 'RPG';
          break;
        default:
          gameplay = 'Visual Novel';
      }
      
      /* --------------------------------------------------------------------
      -- - Thread [Start] Date
      ----------------------------------------------------------------------- */

      // Selects the first 'article' element
      var firstArticle = $('article').first();

      // Find the 'header.message-attribution' element
      var messageAttributionHeader = firstArticle.find('header.message-attribution');

      // Find the 'time' element with class 'u-dt'
      var timeElement = messageAttributionHeader.find('time.u-dt');

      // Check if the time element exists
      if (timeElement.length > 0) {
          // Extract the 'datetime' attribute
          var start = timeElement.attr('datetime');
          start = start.split('T')[0]; // Get the date part only

      } else {
          Logger.log(""<time> element not found."");
      }

      /* --------------------------------------------------------------------
      -- EXTRA INFORMATION
      -----------------------------------------------------------------------
      -- - Thread [Updated] Date
      -- - [Release] Date
      -- - [Dev] name
      -- - [Censored]
      ----------------------------------------------------------------------- */
      // Selects the first message body (which is the one containing the game info)
      var articleText = $('article.message-body').first().text();

      // Uses regular expressions to match and capture the information
      // When it was updated
      var updatedREGEX = /Thread Updated: ([^\s]+)/.exec(articleText);
      // When it was released
      var releaseREGEX = /Release Date: ([^\s]+)/.exec(articleText);
      // Who is the dev
      var devREGEX = /Developer: ([^\s]+)/.exec(articleText);
      // It is censored?
      var censoredREGEX = /Censored: (.+?)(?=\n|\r|\r\n)/.exec(articleText);

      // Extract the captured values or provide default values if not found
      var updated = updatedREGEX ? updatedREGEX[1] : ""Not found ⚠️"";
      var release = releaseREGEX ? releaseREGEX[1] : ""Not found ⚠️"";
      
      //Converts to string due to Google Sheets altering the type
      updated = updated.toString()
      release = release.toString()

      var dev = devREGEX ? devREGEX[1] : devBackup;
      var censored = censoredREGEX ? censoredREGEX[1] : ""Prob. Not"";

      /* --------------------------------------------------------------------
      -- [RATING] & [VOTES]
      ----------------------------------------------------------------------- */
      // Grabs the JSON generated by F95 forum
      var jsonInfo = $('script[type=""application/ld+json""]').last();
      
      // Uses regular expression to match and caputre the information
      var ratingREGEX = /""ratingValue"": ""(\d+(?:\.\d+)?)""/.exec(jsonInfo);
      var votesREGEX = /""ratingCount"": ""(\d+)""/.exec(jsonInfo);

      // Extract the captured values or provide default values if not found
      var rating = ratingREGEX ? ratingREGEX[1] : ""No rating yet"";
      var votes = votesREGEX ? votesREGEX[1] : ""0"";

      /* --------------------------------------------------------------------
      -- LAST UPDATE CHECK
      -- --------------------------------------------------------------------
      -- It will ignore the game if it was updated less than 30 days ago
      ----------------------------------------------------------------------- */

      // Gets today's date
      var today = new Date();

      // Parses the update & release info
      var updatedDate = new Date(updated);
      var releaseDate = new Date(release);
      
      // Subtracts both dates to get days gap
      var daysSinceLastUpdate = Math.floor((today - updatedDate) / (1000 * 60 * 60 * 24));
      var daysSinceRelease = Math.floor((today - releaseDate) / (1000 * 60 * 60 * 24));

      if (force === true || daysSinceRelease < 30 || daysSinceLastUpdate > 30) {

          /* --------------------------------------------------------------------
          -- OUTPUTS THE VALUE INTO DIFFERENT CELLS
          ----------------------------------------------------------------------- */

          // Write the scraped data to the same row
          var outputRow = selectedRange.getRow() + i;

          // Write the scraped data to adjacent columns
          var outputColumn = selectedRange.getColumn() + 1;

          // All values that will be written
          var newValues = [
              //rawTitle,
              title,
              version,
              dev,
              status,
              engine,
              gameplay,
              tags,
              moonRating(rating),
              votes,
              //updated,
              release,
              censored,
              start
          ];

          /* Creates a note into the ""moonRating"" cell to tell the exact rating
          ----------------------------------------------------------------------- */

          // Get the index for the moonRating value
          var moonRatingIndex = newValues.indexOf(moonRating(rating));

          // Set the moonRating value with the corresponding note
          if (moonRatingIndex !== -1) {
            var moonRatingCell = sheet.getRange(outputRow, outputColumn + moonRatingIndex);
            moonRatingCell.setNote('Rating: ' + rating);
          }

          /* Creates a note into the [Tags] cell to tell the exact rating
          ----------------------------------------------------------------------- */

          var tagsIndex = newValues.indexOf(tags);

          if (tagsIndex !== -1) {
            var tagsCell = sheet.getRange(outputRow, outputColumn + tagsIndex);
            tagsCell.setNote(tags);
          }


          // Read existing values in the row
          var rangeToWrite = sheet.getRange(outputRow, outputColumn, 1, newValues.length);
          var existingValues = rangeToWrite.getValues()[0];

          // Compare existing values with new values
          for (var j = 0; j < existingValues.length; j++) {

            // If the new value is empty, keep the existing value
            if (newValues[j] === """" || newValues[j] == null) {
              newValues[j] = existingValues[j];
            }
          }

          // Set only the new non-empty values
          rangeToWrite.setValues([newValues]);
      }

    }

  }

}

/* --------------------------------------------------------------------
-- IGNORE DATE RESTRICTION
----------------------------------------------------------------------- */

function forceScrapeData() {
  scrapeData(true);
}

/* --------------------------------------------------------------------
-- CHECK IF THE STRING IS A VALID URL
----------------------------------------------------------------------- */
function isValidURL(str) {
  var pattern = new RegExp('^(https?:\\/\\/)?'+ // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR an IP Address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
  '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
  return pattern.test(str);
}

/* --------------------------------------------------------------------
-- CREATES AN EXTRA MENU OPTION
----------------------------------------------------------------------- */
  
function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Extra Functions')
      .addItem('Scrape Data', 'scrapeData')
      .addItem('Force Scrape', 'forceScrapeData')
      .addItem('Create Hyperlink','createHyperlink')
      .addToUi();
}"
eDKNhseC,Untitled,Manmeet2577,Java,Friday 3rd of November 2023 10:10:57 PM CDT,"
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter ;
import java.io.IOException;
import java.util.Scanner;

class Main {
    static Scanner scnr = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        String inputFileName = getFileName(""Enter input file name  : "");
        String outputFileName = getFileName(""Enter output file name : "");

        reportStatistics(inputFileName, outputFileName);

        System.out.println(""\n"" + outputFileName + "" contents :"");
        printFile(outputFileName);
    }

    public static String getFileName(String prompt) {
        System.out.print(prompt);
        return scnr.nextLine();
    }

    public static void reportStatistics(String inputFileName, String outputFileName) throws IOException {
        Scanner myFileReader = new Scanner(new FileInputStream(inputFileName));
        PrintWriter writer = new PrintWriter(new FileOutputStream(outputFileName));
        int sum = 0;
        int count = 0;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;

        while (myFileReader.hasNextInt()) {
            int num = myFileReader.nextInt();
            sum += num;
            count++;
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }

        float average = (float) sum / count;

        writer.printf(""Sum is     : %d\n"", sum);
        writer.printf(""Average is : %.2f\n"", average);
        writer.printf(""Min is     : %d\n"", min);
        writer.printf(""Max is     : %d\n"", max);
	
        writer.flush();
        writer.close();
        myFileReader.close();
    }

    public static void printFile(String fileName) throws IOException {
        Scanner myFileReader = new Scanner(new FileInputStream(fileName));
        while (myFileReader.hasNextLine()) {
            System.out.println(myFileReader.nextLine());
        }

        myFileReader.close();
    }
}"
XRbwXp67,Untitled,Manmeet2577,Java,Friday 3rd of November 2023 10:10:35 PM CDT,"
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Scanner;

class Main {
    static Scanner scnr = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        String inputFileName = getFileName(""Enter input file name  : "");
        
        reportStatistics(inputFileName);
    }
    
    public static String getFileName(String prompt) {
        System.out.print(prompt);
        return scnr.nextLine();
    }
    
    public static void reportStatistics(String inputFileName) throws IOException {
        Scanner myFileReader = new Scanner(new FileInputStream(inputFileName));
        int sum = 0;
        int count = 0;
        int min = Integer.MAX_VALUE;
        int max = Integer.MIN_VALUE;
        
        while (myFileReader.hasNextInt()) {
            int num = myFileReader.nextInt();
            sum += num;
            count++;
            if (num < min) {
                min = num;
            }
            if (num > max) {
                max = num;
            }
        }
        
        float average = (float) sum / count;

        System.out.printf(""Sum is     : %d\n"", sum);
        System.out.printf(""Average is : %.2f\n"", average);
        System.out.printf(""Min is     : %d\n"", min);
        System.out.printf(""Max is     : %d\n"", max);

        myFileReader.close();
    }
}
"
3rjCyt4b,Untitled,Manmeet2577,Java,Friday 3rd of November 2023 10:10:09 PM CDT,"

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter ;
import java.io.IOException;
import java.util.Scanner;

class Main {
    public static void main(String[] args) throws IOException {
        makeCopy(""original.dat"", ""copy.dat"");

        // print out the contents of the copy to
        // verify that the original was copied correctly
        printFile(""copy.dat"");
    }

    public static void makeCopy(String inputFileName, String outputFileName) throws IOException {
        // open a File with the given inputFileName
        // and instantiate a Scanner object to read the File
        Scanner myFileReader = new Scanner(new FileInputStream(inputFileName));

        // open a File with the given outputFileName
        // and instantiate a PrintWriter object to write to the File
        PrintWriter myFileWriter = new PrintWriter(new FileOutputStream(outputFileName));

        // 1) loop while the Scanner has a next line
        while (myFileReader.hasNextLine()) {
            // 2) read the next line from the Scanner and store it in a String variable
            String line = myFileReader.nextLine();
            // 3) write the line to the output file
            myFileWriter.println(line);
        } // loop ends

        // 4) flush the PrintWriter
        myFileWriter.flush();
        // 5) close the PrintWriter
        myFileWriter.close();

        myFileReader.close();
    }

    // make no changes to this printFile method
    public static void printFile(String fileName) throws IOException {
       Scanner myFileReader = new Scanner(new FileInputStream(fileName));
         while (myFileReader.hasNextLine()) {
            System.out.println(myFileReader.nextLine());
        }

        myFileReader.close();
    }
}
"
usnYaSt8,Untitled,lazyflavor,JSON,Friday 3rd of November 2023 09:48:17 PM CDT,"기존 ->
Http Status : 201 Created
{
    ""status"": ""success"",
    ""data"": {
        ""asset"": {
            ""assetId"": 1,
            ""assetType"": ""BANK"",
            ""assetName"": ""사과은행"",
            ""amount"": 100,
            ""memo"": ""메모""
        }
    }
}

수정 ->
Http Status : 201 Created
{
    ""assetId"": 1,
    ""assetType"": ""BANK"",
    ""assetName"": ""사과은행"",
    ""amount"": 100,
    ""memo"": ""메모""
}

기존 ->
Http Status : 400 Bad Request
{
    ""status"": ""fail"",
    ""data"": {
        ""asset"": {
            ""amount"": ""양수의 값만 입력할 수 있습니다."",
            ""assetName"": ""자산명을 입력해주시길 바랍니다."",
            ""assetType"": ""자산 종류를 입력해주시길 바랍니다.""
        }
    }
}

수정 ->
Http Status : 400 Bad Request
{
    ""amount"": ""양수의 값만 입력할 수 있습니다."",
    ""assetName"": ""자산명을 입력해주시길 바랍니다."",
    ""assetType"": ""자산 종류를 입력해주시길 바랍니다.""
}"
5L67ndcD,secret snowy business updated,coinwalk,JavaScript,Friday 3rd of November 2023 09:34:01 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var nudie = Number((smiley/100).toFixed(8));
var burp = nudie;
var taget = (smiley*7);
var bolux = (nudie*10);
var poopy = (nudie*6.5);
var jockey = ((burp*1).toFixed(8));
var bolance = smiley;
var over = 6.9;
var under = 2.9;
var woman = smiley;
var sexual = ((Math.floor(smiley/bolux))*bolux);

function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if (bolance>(sexual+(burp*over))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if (bolance<(sexual-(burp*under))) {
    burp = burp*2;
    over = 4.9;
    under = 4.9;
    sexual = parseFloat(bolance);
}
if ((burp>=(smiley/10))&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
    woman = parseFloat(bolance);
}
if ((burp>=(bolance/20))&&(bolance>woman)&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    woman = parseFloat(bolance);
}
if ((burp>=(bolance/20))&&(bolance<woman)&&(bolance<(((Math.floor(bolance/bolux))*bolux)+poopy))){
    burp = nudie;
    over = 6.9;
    under = 2.9;
    sexual = ((Math.floor(bolance/bolux))*bolux);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
jockey = ((burp*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(jockey);
$('#a_lo').click();
}, 100);
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 200);
}
get();"
MeJN7gcE,deestuh's Data,azimuths,JSON,Friday 3rd of November 2023 08:57:20 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""765""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Primary Lotus""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""74""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""155""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""{}""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""255""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""68""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""68""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-339""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""89022431""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""1699059931""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""465""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Eight Gates""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""9""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dosaku""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""561""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""Tanto""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""9""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""dee5ive""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""561""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""3034""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""dee5(39)2072020""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Paralysis""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-16""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""e""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""173""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Tanto""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Demon Flip""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Omnigan"",""ObjectAttributes"":{""Progress"":""Stage 2""}},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""17""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""16""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""8""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""183""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""179""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""385""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""c""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Omnigan"",""ObjectAttributes"":{""Progress"":""Stage 2""}},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""-38""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""totem(20)2942799""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Chuunin""}},""Skilltree"":{""Omnigan"":{""ObjectName"":""Omnigan"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Primary Lotus"":{""ObjectName"":""Primary Lotus"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gate of View"":{""ObjectName"":""Gate of View"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Stage 2"":{""ObjectName"":""Stage 2"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Flip"":{""ObjectName"":""Demon Flip"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Stage 1"":{""ObjectName"":""Stage 1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Eight Gates"":{""ObjectName"":""Eight Gates"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Paralysis"":{""ObjectName"":""Paralysis"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dosaku"":{""ObjectName"":""Dosaku"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gate of Wonder"":{""ObjectName"":""Gate of Wonder"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gate of Limit"":{""ObjectName"":""Gate of Limit"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
BvLmhyvD,chibux's Data,azimuths,JSON,Friday 3rd of November 2023 08:52:37 PM CDT,"{""Stats"":{""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""-15""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""619""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""6""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""466""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""Lightning Cloak 2""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""t""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Lariat""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""High Powered Chop""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""3137""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""1277""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Block Training\"",\""Weighted Gear\"",\""Pushup Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""233""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""40""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Demon Flip""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""37""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""3572""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""81554031""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""1698607633""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""392""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Eight Gates""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""c""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dosaku""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""561""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""ToughMoveMent""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""860""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""ToughMoveMent(2)1035641""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""219""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Liger Bomb""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-18""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""233""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Tanto""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Primary Lotus""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""50""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""4""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""18""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""17""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""216""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""351""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""739""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""e""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""226""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""11""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""15""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Jounin""}},""Skilltree"":{""Liger Bomb"":{""ObjectName"":""Liger Bomb"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""High Powered Chop"":{""ObjectName"":""High Powered Chop"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dosaku"":{""ObjectName"":""Dosaku"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lightning Cloak 2"":{""ObjectName"":""Lightning Cloak 2"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Knee Strike"":{""ObjectName"":""Knee Strike"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Eight Gates"":{""ObjectName"":""Eight Gates"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Flip"":{""ObjectName"":""Demon Flip"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lariat"":{""ObjectName"":""Lariat"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lightning Cloak"":{""ObjectName"":""Lightning Cloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Primary Lotus"":{""ObjectName"":""Primary Lotus"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Gate of Limit"":{""ObjectName"":""Gate of Limit"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
ZcRTCjCt,PIag_e's Data,azimuths,JSON,Friday 3rd of November 2023 08:50:15 PM CDT,"{""Stats"":{""MissionEXP"":{""ObjectName"":""MissionEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""-97""},""PrimaryCN"":{""ObjectName"":""PrimaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""mapmove1"":{""ObjectName"":""mapmove1"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LeftEye"":{""ObjectName"":""LeftEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Key12"":{""ObjectName"":""Key12"",""ObjectClass"":""StringValue"",""ObjectValue"":""=""},""Blind"":{""ObjectName"":""Blind"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""Slot2"":{""ObjectName"":""Slot2"",""ObjectClass"":""StringValue"",""ObjectValue"":""Lariat""},""TailedBeastLevel"":{""ObjectName"":""TailedBeastLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CombatEXP"":{""ObjectName"":""CombatEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""172""},""Personality"":{""ObjectName"":""Personality"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GripCount"":{""ObjectName"":""GripCount"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""Marking"":{""ObjectName"":""Marking"",""ObjectClass"":""IntValue"",""ObjectValue"":""69""},""SkinColor"":{""ObjectName"":""SkinColor"",""ObjectClass"":""IntValue"",""ObjectValue"":""7""},""RP"":{""ObjectName"":""RP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""KillStreak"":{""ObjectName"":""KillStreak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot11"":{""ObjectName"":""Slot11"",""ObjectClass"":""StringValue"",""ObjectValue"":""Demon Fists""},""MSAbility1"":{""ObjectName"":""MSAbility1"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Key8"":{""ObjectName"":""Key8"",""ObjectClass"":""StringValue"",""ObjectValue"":""z""},""LINDAMINISTARTUP"":{""ObjectName"":""LINDAMINISTARTUP"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""Slot4"":{""ObjectName"":""Slot4"",""ObjectClass"":""StringValue"",""ObjectValue"":""Goshyuru""},""Slot9"":{""ObjectName"":""Slot9"",""ObjectClass"":""StringValue"",""ObjectValue"":""Advanced Demon Flip""},""Version"":{""ObjectName"":""Version"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""DateRecord"":{""ObjectName"":""DateRecord"",""ObjectClass"":""IntValue"",""ObjectValue"":""2954""},""EyeColorG"":{""ObjectName"":""EyeColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""193""},""CurseMarkLevel"":{""ObjectName"":""CurseMarkLevel"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key2"":{""ObjectName"":""Key2"",""ObjectClass"":""StringValue"",""ObjectValue"":""2""},""Genjutsu"":{""ObjectName"":""Genjutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SwordSave"":{""ObjectName"":""SwordSave"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuXP"":{""ObjectName"":""BijuuXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SeenDeaths"":{""ObjectName"":""SeenDeaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BonusSkillPoints"":{""ObjectName"":""BonusSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorB"":{""ObjectName"":""CColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""PosY"":{""ObjectName"":""PosY"",""ObjectClass"":""IntValue"",""ObjectValue"":""156""},""SPR"":{""ObjectName"":""SPR"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""BijuuConvo"":{""ObjectName"":""BijuuConvo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""jincooldown"":{""ObjectName"":""jincooldown"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Ken"":{""ObjectName"":""Ken"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Scar"":{""ObjectName"":""Scar"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot12"":{""ObjectName"":""Slot12"",""ObjectClass"":""StringValue"",""ObjectValue"":""Lightning Cloak 2""},""RecentTrainings"":{""ObjectName"":""RecentTrainings"",""ObjectClass"":""StringValue"",""ObjectValue"":""[\""Weighted Gear\"",\""Weighted Gear\"",\""Handsign Training\""]""},""EyeColorR"":{""ObjectName"":""EyeColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""229""},""HairColorG"":{""ObjectName"":""HairColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""73""},""RaidCD"":{""ObjectName"":""RaidCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot6"":{""ObjectName"":""Slot6"",""ObjectClass"":""StringValue"",""ObjectValue"":""Dosaku""},""HairColorB"":{""ObjectName"":""HairColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""73""},""Gender"":{""ObjectName"":""Gender"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""MSAbility2"":{""ObjectName"":""MSAbility2"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""Kids"":{""ObjectName"":""Kids"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryWep"":{""ObjectName"":""SecondaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""PosZ"":{""ObjectName"":""PosZ"",""ObjectClass"":""IntValue"",""ObjectValue"":""-888""},""UnlockedCloak"":{""ObjectName"":""UnlockedCloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CloakTime"":{""ObjectName"":""CloakTime"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""BijuuRelation"":{""ObjectName"":""BijuuRelation"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Prestige"":{""ObjectName"":""Prestige"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxAge"":{""ObjectName"":""MaxAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""TailedBeastMastered"":{""ObjectName"":""TailedBeastMastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Mangekyo"":{""ObjectName"":""Mangekyo"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastGripped"":{""ObjectName"":""LastGripped"",""ObjectClass"":""IntValue"",""ObjectValue"":""95185398""},""LastAge"":{""ObjectName"":""LastAge"",""ObjectClass"":""IntValue"",""ObjectValue"":""1699057813""},""Key11"":{""ObjectName"":""Key11"",""ObjectClass"":""StringValue"",""ObjectValue"":""-""},""AwakenCD"":{""ObjectName"":""AwakenCD"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""AgeLimit"":{""ObjectName"":""AgeLimit"",""ObjectClass"":""IntValue"",""ObjectValue"":""2400""},""SecondaryAmmo"":{""ObjectName"":""SecondaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""9""},""Mastered"":{""ObjectName"":""Mastered"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HandsignTraining"":{""ObjectName"":""HandsignTraining"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""WipeLog"":{""ObjectName"":""WipeLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot10"":{""ObjectName"":""Slot10"",""ObjectClass"":""StringValue"",""ObjectValue"":""Demon Flip""},""Key9"":{""ObjectName"":""Key9"",""ObjectClass"":""StringValue"",""ObjectValue"":""x""},""Slot5"":{""ObjectName"":""Slot5"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Rising Wind""},""Slot7"":{""ObjectName"":""Slot7"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leg Breaker""},""RESTORE"":{""ObjectName"":""RESTORE"",""ObjectClass"":""IntValue"",""ObjectValue"":""561""},""TailedBeast"":{""ObjectName"":""TailedBeast"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ItemSave"":{""ObjectName"":""ItemSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""Flak""},""TimesRerolled"":{""ObjectName"":""TimesRerolled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CurseMarkEXP"":{""ObjectName"":""CurseMarkEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HBChoice"":{""ObjectName"":""HBChoice"",""ObjectClass"":""IntValue"",""ObjectValue"":""11""},""WeaponSave"":{""ObjectName"":""WeaponSave"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryWep"":{""ObjectName"":""PrimaryWep"",""ObjectClass"":""StringValue"",""ObjectValue"":""Kunai""},""OriginalVillage"":{""ObjectName"":""OriginalVillage"",""ObjectClass"":""IntValue"",""ObjectValue"":""5""},""BijuuSealed"":{""ObjectName"":""BijuuSealed"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Name"":{""ObjectName"":""Name"",""ObjectClass"":""StringValue"",""ObjectValue"":""plague""},""HairColorR"":{""ObjectName"":""HairColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""79""},""LastChakra"":{""ObjectName"":""LastChakra"",""ObjectClass"":""IntValue"",""ObjectValue"":""1040""},""KPos"":{""ObjectName"":""KPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""IsExiled"":{""ObjectName"":""IsExiled"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""RU"":{""ObjectName"":""RU"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""HideName"":{""ObjectName"":""HideName"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""logcheck"":{""ObjectName"":""logcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Slot-"":{""ObjectName"":""Slot-"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""PrimaryAmmo"":{""ObjectName"":""PrimaryAmmo"",""ObjectClass"":""IntValue"",""ObjectValue"":""10""},""FamilyID"":{""ObjectName"":""FamilyID"",""ObjectClass"":""StringValue"",""ObjectValue"":""plague(43)25112""},""Slot="":{""ObjectName"":""Slot="",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""WeaveSpeed"":{""ObjectName"":""WeaveSpeed"",""ObjectClass"":""IntValue"",""ObjectValue"":""20""},""Slot3"":{""ObjectName"":""Slot3"",""ObjectClass"":""StringValue"",""ObjectValue"":""Liger Bomb""},""Trauma"":{""ObjectName"":""Trauma"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Blindness"":{""ObjectName"":""Blindness"",""ObjectClass"":""NumberValue"",""ObjectValue"":""0""},""ChakraArmorRGB"":{""ObjectName"":""ChakraArmorRGB"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""GrandParentID"":{""ObjectName"":""GrandParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""BerserkTimes"":{""ObjectName"":""BerserkTimes"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SpentSkillPoints"":{""ObjectName"":""SpentSkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""-25""},""PDLog"":{""ObjectName"":""PDLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key6"":{""ObjectName"":""Key6"",""ObjectClass"":""StringValue"",""ObjectValue"":""6""},""Deaths"":{""ObjectName"":""Deaths"",""ObjectClass"":""IntValue"",""ObjectValue"":""3""},""EyeColorB"":{""ObjectName"":""EyeColorB"",""ObjectClass"":""IntValue"",""ObjectValue"":""228""},""Slot1"":{""ObjectName"":""Slot1"",""ObjectClass"":""StringValue"",""ObjectValue"":""Primary Lotus""},""LastStomach"":{""ObjectName"":""LastStomach"",""ObjectClass"":""IntValue"",""ObjectValue"":""335""},""Key10"":{""ObjectName"":""Key10"",""ObjectClass"":""StringValue"",""ObjectValue"":""c""},""BDAYS"":{""ObjectName"":""BDAYS"",""ObjectClass"":""StringValue"",""ObjectValue"":""0""},""CanRank"":{""ObjectName"":""CanRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""ToggleAccessories"":{""ObjectName"":""ToggleAccessories"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Elo"":{""ObjectName"":""Elo"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""TrainingEXP"":{""ObjectName"":""TrainingEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""22""},""MaxRank"":{""ObjectName"":""MaxRank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""DefaultMouth"":{""ObjectName"":""DefaultMouth"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""ResetPos"":{""ObjectName"":""ResetPos"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SkillPoints"":{""ObjectName"":""SkillPoints"",""ObjectClass"":""IntValue"",""ObjectValue"":""25""},""startnewlife"":{""ObjectName"":""startnewlife"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key3"":{""ObjectName"":""Key3"",""ObjectClass"":""StringValue"",""ObjectValue"":""3""},""LastKilledUser"":{""ObjectName"":""LastKilledUser"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""AnbuLog"":{""ObjectName"":""AnbuLog"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MissionSuccess"":{""ObjectName"":""MissionSuccess"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""CurrentWep"":{""ObjectName"":""CurrentWep"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""Key5"":{""ObjectName"":""Key5"",""ObjectClass"":""StringValue"",""ObjectValue"":""5""},""Key4"":{""ObjectName"":""Key4"",""ObjectClass"":""StringValue"",""ObjectValue"":""4""},""Slot8"":{""ObjectName"":""Slot8"",""ObjectClass"":""StringValue"",""ObjectValue"":""Leaf Whirlwind""},""RyoRES"":{""ObjectName"":""RyoRES"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""LastHealth"":{""ObjectName"":""LastHealth"",""ObjectClass"":""IntValue"",""ObjectValue"":""416""},""Ryo"":{""ObjectName"":""Ryo"",""ObjectClass"":""IntValue"",""ObjectValue"":""304""},""CColorR"":{""ObjectName"":""CColorR"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Key7"":{""ObjectName"":""Key7"",""ObjectClass"":""StringValue"",""ObjectValue"":""7""},""Slot0"":{""ObjectName"":""Slot0"",""ObjectClass"":""StringValue"",""ObjectValue"":""""},""RightEye"":{""ObjectName"":""RightEye"",""ObjectClass"":""StringValue"",""ObjectValue"":""Default""},""Bank"":{""ObjectName"":""Bank"",""ObjectClass"":""IntValue"",""ObjectValue"":""5000""},""Rank"":{""ObjectName"":""Rank"",""ObjectClass"":""IntValue"",""ObjectValue"":""24""},""PosX"":{""ObjectName"":""PosX"",""ObjectClass"":""IntValue"",""ObjectValue"":""453""},""ParentID"":{""ObjectName"":""ParentID"",""ObjectClass"":""StringValue"",""ObjectValue"":""Read(18)89194""},""TailedBeastEXP"":{""ObjectName"":""TailedBeastEXP"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""CColorG"":{""ObjectName"":""CColorG"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Parentq"":{""ObjectName"":""Parentq"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Age"":{""ObjectName"":""Age"",""ObjectClass"":""IntValue"",""ObjectValue"":""17""},""berserkcheck"":{""ObjectName"":""berserkcheck"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""MaxTails"":{""ObjectName"":""MaxTails"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Village"":{""ObjectName"":""Village"",""ObjectClass"":""IntValue"",""ObjectValue"":""2""},""bald"":{""ObjectName"":""bald"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""SecondaryCN"":{""ObjectName"":""SecondaryCN"",""ObjectClass"":""IntValue"",""ObjectValue"":""1""},""Key1"":{""ObjectName"":""Key1"",""ObjectClass"":""StringValue"",""ObjectValue"":""1""},""kek"":{""ObjectName"":""kek"",""ObjectClass"":""IntValue"",""ObjectValue"":""12""},""Influence"":{""ObjectName"":""Influence"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Title"":{""ObjectName"":""Title"",""ObjectClass"":""StringValue"",""ObjectValue"":""Sp. Jounin""}},""Skilltree"":{""Primary Lotus"":{""ObjectName"":""Primary Lotus"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lightning Cloak 2"":{""ObjectName"":""Lightning Cloak 2"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Goshyuru"":{""ObjectName"":""Goshyuru"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Flip M2"":{""ObjectName"":""Demon Flip M2"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Flip"":{""ObjectName"":""Demon Flip"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Rising Wind"":{""ObjectName"":""Leaf Rising Wind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Advanced Taijutsu"":{""ObjectName"":""Advanced Taijutsu"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Advanced Demon Flip"":{""ObjectName"":""Advanced Demon Flip"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leaf Whirlwind"":{""ObjectName"":""Leaf Whirlwind"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Misogi"":{""ObjectName"":""Misogi"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Liger Bomb"":{""ObjectName"":""Liger Bomb"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Substitution"":{""ObjectName"":""Substitution"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""1000 Years of Death"":{""ObjectName"":""1000 Years of Death"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Demon Fists"":{""ObjectName"":""Demon Fists"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lariat"":{""ObjectName"":""Lariat"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Eight Gates"":{""ObjectName"":""Eight Gates"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Lightning Cloak"":{""ObjectName"":""Lightning Cloak"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Leg Breaker"":{""ObjectName"":""Leg Breaker"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dynamic Entry"":{""ObjectName"":""Dynamic Entry"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""},""Dosaku"":{""ObjectName"":""Dosaku"",""ObjectClass"":""IntValue"",""ObjectValue"":""0""}},""Copy"":[]}"
21z55Cwz,New TreeFarm,Kohjin,Lua,Friday 3rd of November 2023 08:01:42 PM CDT,"runProgram = true
ticks = 0
iterationTicks = 0
settings = {
    [""SaplingSlot""] = 1,
    [""BonemealSlot""] = 2,
    [""MaxBonemealPerTree""] = 30,
    [""TicksUntilAutoResupplyAndStore""] = 8,
    [""MaxTreeHeight""] = 10
}

function fetchSaplings()
    local insideFix = false

    for i=1, 16 do
        turtle.select(i)
        local data = turtle.getItemDetail()
        if data then
            if data.name == ""minecraft:sapling"" then
                turtle.select(settings.SaplingSlot)
                turtle.drop()
                turtle.select(i)
                turtle.transferTo(settings.SaplingSlot)
                turtle.suck()
                turtle.select(settings.SaplingSlot)
                local data = turtle.getItemDetail()
                if data.name ~= ""minecraft:sapling"" then
                    print(""Unable to fix! Saplings found in slot ["" .. i .. ""] but couldn't be transferred!"")
                else
                    insideFix = true
                    print(""Saplings found in slot ["" .. i .. ""] successfully transferred!"")
                end
                break
            end
        end
    end

    if not insideFix then
        print(""Trying to resupply..."")
        local success = resupplySaplings()
        if success then 
            print(""Successfully resupplied!"")
        else
            print(""Unable to resupply!"")
        end
    end

    turtle.select(settings.SaplingSlot)
    local data = turtle.getItemDetail()
    if data then
        if data.name == ""minecraft:sapling"" then
            print(""Successfully fixed!"")
            return true
        else
            print(""Unable to fix!"")
            return false
        end
    else 
        print(""Unable to fix!"")
            return false
    end
end

function fetchBonemeal()
    local insideFix = false

    for i=1, 16 do
        turtle.select(i)
        local data = turtle.getItemDetail()
        if data then
            if data.name == ""minecraft:dye"" then
                turtle.select(settings.BonemealSlot)
                turtle.drop()
                turtle.select(i)
                turtle.transferTo(settings.BonemealSlot)
                turtle.suck()
                turtle.select(settings.BonemealSlot)
                local data = turtle.getItemDetail()
                if data.name ~= ""minecraft:dye"" then
                    print(""Unable to fix! Bonemeal found in slot ["" .. i .. ""] but couldn't be transferred!"")
                else
                    insideFix = true
                    print(""Bonemeal found in slot ["" .. i .. ""] successfully transferred!"")
                end
                break
            end
        end
    end

    if not insideFix then
        print(""Trying to resupply..."")
        local success = resupplyBonemeal()
        if success then 
            print(""Successfully resupplied!"")
        else
            print(""Unable to resupply!"")
        end
    end

    turtle.select(settings.BonemealSlot)
    local data = turtle.getItemDetail()
    if data then
        if data.name == ""minecraft:dye"" then
            print(""Successfully fixed!"")
            return true
        else
            print(""Unable to fix!"")
            return false
        end
    else 
        print(""Unable to fix!"")
            return false
    end
end

function grow()
    turtle.select(settings.BonemealSlot)
    local data = turtle.getItemDetail()
    if data then
        if data.name == ""minecraft:dye"" then
            turtle.place()
            print(""Growing Tree..."")
        else
            print(""Slot "" .. settings.BonemealSlot .. "" doesn't contain any bonemeal!"")
            print(""Trying to fix..."")
            local success = fetchBonemeal()
            if not success then
                print(""Unable to fix, terminating..."")
                runProgram = false
            end
        end
    else
        print(""Slot "" .. settings.BonemealSlot .. "" doesn't contain anything!"")
        print(""Trying to fix..."")
        local success = fetchBonemeal()
        if not success then
            print(""Unable to fix, terminating..."")
            runProgram = false
        end
    end
    sleep(0)
end

function store()
    for i=1, 16 do
        if i ~= settings.BonemealSlot and i ~= settings.SaplingSlot then
            turtle.select(i)
            local data = turtle.getItemDetail()

            if data then
                if data.name == ""minecraft:log"" then
                    turtle.turnLeft()
                    turtle.turnLeft()
                    turtle.drop()
                    turtle.turnRight()
                    turtle.turnRight()
                else
                    print(""Foreign item detected: "" .. data.name)
                end
            end

        end
    end
    sleep(0)
end

function resupplyBonemeal()
    local resuppliedBonemeal = false
    local amountOfBonemeal = turtle.getItemCount(settings.BonemealSlot)

    if amountOfBonemeal < 64 then
        turtle.turnRight()
        turtle.select(settings.BonemealSlot)
        turtle.suck(64 - amountOfBonemeal)
        turtle.turnLeft()
    end

    if turtle.getItemCount(settings.BonemealSlot) == 64 then
        resuppliedBonemeal = true
    end

    return resuppliedBonemeal
end

function resupplySaplings()
    local resuppliedSaplings = false
    local amountOfSaplings = turtle.getItemCount(settings.SaplingSlot)

    if amountOfSaplings < 64 then
        turtle.turnLeft()
        turtle.select(settings.SaplingSlot)
        turtle.suck(64 - amountOfSaplings)
        turtle.turnRight()
    end

    if turtle.getItemCount(settings.SaplingSlot) == 64 then
        resuppliedSaplings = true
    end

    return resuppliedSaplings
end

function resupplyAll()
    
    resuppliedBonemeal = resupplyBonemeal()
    resuppliedSaplings = resupplySaplings()

    if resuppliedBonemeal and resuppliedSaplings then
        return true
    else
        return false
    end
    
end

function harvest()
    local success, data = turtle.inspect()
    if success then
        if data.name == ""minecraft:log"" then
            print(""Chopping down Tree..."")
            turtle.dig()
            turtle.forward()
            
            local blocksMoved = 0
            for i=1, settings.MaxTreeHeight do 
                local success, data = turtle.inspectUp()
                if success then
                    if data.name == ""minecraft:log"" then
                        print(""Log detected... chopping..."")
                        turtle.digUp()
                        turtle.up()
                        blocksMoved = blocksMoved + 1
                    else
                        print(""No log detected... ("" .. data.name .."") stopping..."")
                        break
                    end
                else
                    print(""No log detected... (nothing) stopping..."")
                    break
                end
            end

            print(""Moving back to initial position..."")
            for i=1, blocksMoved do 
                turtle.down()
            end
            turtle.back()

        elseif data.name == ""minecraft:sapling"" then
            print(""Sapling didn't grow, likely due to surpassing max bonemeal setting. Destroying..."")
            turtle.dig()
        else
            print(""ERROR: Block infront of turtle neither tree nor sapling! Block: "" .. data.name)
            runProgram = false
        end
    else
        print(""No crop planted infront of turtle!"")
    end  
end

function plant()
    turtle.select(settings.SaplingSlot)
    local data = turtle.getItemDetail()
    if data then
        if data.name == ""minecraft:sapling"" then
            turtle.place()
            print(""Planting Sapling..."")
        else
            print(""Slot "" .. settings.SaplingSlot .. "" doesn't contain any carrots!"")
            print(""Trying to fix..."")
            local success = fetchSaplings()
            if not success then
                print(""Unable to fix, terminating..."")
                runProgram = false
            end
        end
    else
        print(""Slot "" .. settings.SaplingSlot .. "" doesn't contain anything!"")
        print(""Trying to fix..."")
        local success = fetchSaplings()
        if not success then
            print(""Unable to fix, terminating..."")
            runProgram = false
        end
    end
end

while runProgram do 
    print(""ITER: "" .. iterationTicks .. "" | OVER: "" .. ticks)
    if iterationTicks > settings.TicksUntilAutoResupplyAndStore then
        print(""Storing Items..."")
        store()

        print(""Resupplying..."")
        local success = resupplyAll()
        if success then
            print(""Resupplied successfully!"")
        else
            print(""Unable to resupply!"")
        end
        iterationTicks = 0
        sleep(0)
    end

    plant()

    for i=0, settings.MaxBonemealPerTree do
        local success, blockdata = turtle.inspect()
        if success then
            if blockdata.name == ""minecraft:sapling"" then
                grow()
            else
                if blockdata.name == ""minecraft:log"" then
                    break
                else
                    print(""ERROR: Block infront of turtle neither tree nor sapling! Block: "" .. blockdata.name)
                    runProgram = false
                end
            end
        end 
    end

    harvest()

    local fuelLevel = turtle.getFuelLevel()
    print(""Fuel Level at OV Tick "" .. ticks .. "": "" .. fuelLevel)
    if fuelLevel  == 0 then
        print(""Ran out of fuel... Terminating..."")
        runProgram = false
    end

    ticks = ticks + 1
    iterationTicks = iterationTicks + 1
    sleep(0)
end

print(""TreeFarm terminated."")"
UyGr8iFJ,Attribute System Test,Krythic,C#,Friday 3rd of November 2023 07:36:39 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Attribute_System
{

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public int AvailablePoints = 35;
        public int DefaultAttributeValue = 8;
        public int MaximumAttributeValue = 18;


        public MainWindow()
        {
            InitializeComponent();
            Reset();
        }

        public int CalculateNextCost(int currentValue)
        {
            switch (currentValue)
            {
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                    return 1;
                case 14:
                case 15:
                    return 2;
                case 16:
                case 17:
                case 18:
                    return 3;
                default:
                    throw new Exception(""No value for : "" + currentValue);
            }
        }

        public int CalculatePreviousCost(int currentValue)
        {
            return CalculateNextCost(currentValue - 1);
        }

        public void Reset()
        {
            AvailablePointsDisplayTextBox.Text = AvailablePoints.ToString();
            StrengthDisplayTextBox.Text = DefaultAttributeValue.ToString();
            AgilityDisplayTextBox.Text = DefaultAttributeValue.ToString();
            DefenseDisplayTextBox.Text = DefaultAttributeValue.ToString();
            StaminaDisplayTextBox.Text = DefaultAttributeValue.ToString();
            IntellectDisplayTextBox.Text = DefaultAttributeValue.ToString();
            WisdomDisplayTextBox.Text = DefaultAttributeValue.ToString();
            LuckDisplayTextBox.Text = DefaultAttributeValue.ToString();
        }

        public int GetAvailablePoints()
        {
            return Int32.Parse(AvailablePointsDisplayTextBox.Text);
        }

        public void DecrementAttribute(TextBox textBox)
        {
            /**
             * Perform Minimum Validation Check
             */
            int currentAttributeScore = Int32.Parse(textBox.Text);
            int availablePoints = GetAvailablePoints();
            int cost = CalculatePreviousCost(currentAttributeScore);
            if (currentAttributeScore <= DefaultAttributeValue)
            {
                return;
            }
            this.AvailablePointsDisplayTextBox.Text = (availablePoints + cost).ToString();
            textBox.Text = (currentAttributeScore - 1).ToString();
        }

        public void IncrementAttribute(TextBox textBox)
        {
            /**
             * Perform Maximum Validation Check
             */
            int currentAttributeScore = Int32.Parse(textBox.Text);
            int availablePoints = GetAvailablePoints();
            int cost = CalculateNextCost(currentAttributeScore);
            if (currentAttributeScore == MaximumAttributeValue)
            {
                return;
            }
            /**
             * Perform sanity check
             */
            if (cost > availablePoints)
            {
                return;
            }
            this.AvailablePointsDisplayTextBox.Text = (availablePoints - cost).ToString();
            textBox.Text = (currentAttributeScore + 1).ToString();
        }

        private void Reset_ButtonClick(object sender, RoutedEventArgs e)
        {
            Reset();
        }

        private void Strength_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(StrengthDisplayTextBox);
        }

        private void Strength_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(StrengthDisplayTextBox);
        }

        private void Agility_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(AgilityDisplayTextBox);
        }

        private void Agility_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(AgilityDisplayTextBox);
        }

        private void Defense_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(DefenseDisplayTextBox);
        }

        private void Defense_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(DefenseDisplayTextBox);
        }

        private void Stamina_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(StaminaDisplayTextBox);
        }

        private void Stamina_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(StaminaDisplayTextBox);
        }

        private void Intellect_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(IntellectDisplayTextBox);
        }

        private void Intellect_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(IntellectDisplayTextBox);
        }

        private void Wisdom_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(WisdomDisplayTextBox);
        }

        private void Wisdom_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(WisdomDisplayTextBox);
        }

        private void Luck_Minus_ButtonClick(object sender, RoutedEventArgs e)
        {
            DecrementAttribute(LuckDisplayTextBox);
        }

        private void Luck_Plus_ButtonClick(object sender, RoutedEventArgs e)
        {
            IncrementAttribute(LuckDisplayTextBox);
        }

        private void GenerateButton_Click(object sender, RoutedEventArgs e)
        {
            Reset();
            Random random = new Random();
            int[] warriorDistributionTable = new int[] { 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 5, 6 };
            int[] useDistributionTable = warriorDistributionTable;
            Dictionary<int, TextBox> attributeMap = new Dictionary<int, TextBox>
            {
                { 0, StrengthDisplayTextBox },
                { 1, AgilityDisplayTextBox },
                { 2, DefenseDisplayTextBox },
                { 3, StaminaDisplayTextBox },
                { 4, IntellectDisplayTextBox },
                { 5, WisdomDisplayTextBox },
                { 6, LuckDisplayTextBox }
            };
            while (GetAvailablePoints() != 0)
            {
                if(useDistributionTable != null)
                {
                    IncrementAttribute(attributeMap[useDistributionTable[random.Next(useDistributionTable.Length)]]);
                }
                else
                {
                    IncrementAttribute(attributeMap[random.Next(7)]);
                }
            }
        }
    }
}
"
KrpU6r9n,2023-11-03_stats.json,rdp_snitch,JSON,Friday 3rd of November 2023 07:18:21 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 132,
    ""62.122.184.166"": 12,
    ""62.122.184.168"": 12,
    ""103.195.239.107"": 6,
    ""87.251.75.145"": 6,
    ""194.165.16.72"": 6,
    ""198.235.24.221"": 9,
    ""212.70.149.146"": 15,
    ""185.170.144.3"": 6,
    ""185.170.144.113"": 6,
    ""87.251.75.120"": 3,
    ""190.85.232.116"": 3,
    ""180.93.172.225"": 3,
    ""45.118.146.131"": 9,
    ""198.235.24.177"": 9,
    ""176.49.123.233"": 3,
    ""103.167.91.133"": 12,
    ""152.89.198.133"": 12,
    ""62.122.184.165"": 12,
    ""141.98.11.128"": 9,
    ""179.60.147.10"": 6,
    ""194.165.16.10"": 6,
    ""117.4.106.247"": 3,
    ""116.212.136.231"": 3,
    ""185.246.210.137"": 3,
    ""81.19.135.47"": 6,
    ""152.32.199.33"": 3,
    ""205.210.31.83"": 9,
    ""172.188.48.214"": 3,
    ""20.231.76.245"": 33,
    ""62.204.41.146"": 12,
    ""111.61.253.55"": 3,
    ""45.140.17.16"": 3,
    ""194.165.16.73"": 6,
    ""3.8.115.52"": 3,
    ""205.210.31.221"": 9
  },
  ""asn"": {
    ""AS63737"": 144,
    ""AS57523"": 48,
    ""AS140827"": 6,
    ""AS208091"": 9,
    ""AS48721"": 18,
    ""AS396982"": 36,
    ""AS204428"": 15,
    ""AS197414"": 12,
    ""AS14080"": 3,
    ""AS135944"": 3,
    ""AS131414"": 9,
    ""AS12389"": 3,
    ""AS209605"": 9,
    ""AS209588"": 12,
    ""AS7552"": 3,
    ""AS38235"": 3,
    ""AS60068"": 3,
    ""AS135377"": 3,
    ""AS8075"": 36,
    ""AS59425"": 12,
    ""AS24547"": 3,
    ""AS198953"": 3,
    ""AS16509"": 3
  },
  ""isp"": {
    ""VIETSERVER"": 132,
    ""Chang Way Technologies Co. Limited"": 48,
    ""AZ Viet NAM Communications Technology Company Limited"": 6,
    ""Xhost Internet Solutions LP"": 21,
    ""Flyservers S.A."": 30,
    ""Google LLC"": 36,
    ""SS-Net"": 15,
    ""Telmex Colombia S.A."": 3,
    ""SPT"": 3,
    ""LVSOFT"": 9,
    ""OJSC \""Sibirtelecom\"""": 3,
    ""Vietserver Services Technology Company Limited"": 12,
    ""UAB Host Baltic"": 9,
    ""VIETTEL"": 3,
    ""MekongNet"": 3,
    ""Cdn77 - PRG"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Microsoft"": 3,
    ""Microsoft Corporation"": 33,
    ""Horizon LLC"": 12,
    ""China Mobile communications corporation"": 3,
    ""Proton66 OOO"": 3,
    ""Amazon Technologies Inc."": 3
  },
  ""org"": {
    ""VietServer Services technology company limited"": 132,
    ""Chang Way Technologies Co. Limited"": 36,
    ""DULIEUAZ"": 6,
    ""Xhost Internet Solutions"": 9,
    ""Flyservers S.A"": 18,
    ""Palo Alto Networks, Inc"": 36,
    ""4Media Ltd"": 15,
    ""Xhostis"": 12,
    ""Telmex Colombia S.A"": 3,
    ""Saigon Postel Corporation"": 3,
    ""Unknown"": 24,
    ""OJSC Sibirtelecom"": 3,
    ""Vietserver Viet NAM Service Technology Company Limited"": 12,
    ""Starcrecium Limited"": 12,
    ""Cloud Solutions S.A"": 6,
    ""Overkill Beta s.r.o"": 3,
    ""Alviva Holding Limited"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Microsoft Azure Cloud (southeastasia)"": 3,
    ""Microsoft Azure Cloud (eastus)"": 33,
    ""Horizon LLC"": 12,
    ""China Mobile"": 3,
    ""Proton66 LLC"": 3,
    ""AWS EC2 (eu-west-2)"": 3
  },
  ""regionName"": {
    ""Hanoi"": 135,
    ""Moscow"": 63,
    ""Ho Chi Minh"": 6,
    ""North Holland"": 21,
    ""Kaunas"": 27,
    ""California"": 36,
    ""Plovdiv"": 15,
    ""Bogota D.C."": 3,
    ""Tinh Binh Duong"": 9,
    ""Krasnoyarsk Krai"": 3,
    ""Tinh Hung Yen"": 12,
    ""Distrito Federal"": 6,
    ""Tinh Bac Giang"": 3,
    ""Phnom Penh"": 3,
    ""Prague"": 3,
    ""Sverdlovsk Oblast"": 6,
    ""Sao Paulo"": 3,
    ""Central Singapore"": 3,
    ""Virginia"": 33,
    ""Hebei"": 3,
    ""England"": 3
  },
  ""country"": {
    ""Vietnam"": 165,
    ""Russia"": 72,
    ""Netherlands"": 21,
    ""Lithuania"": 27,
    ""United States"": 69,
    ""Bulgaria"": 15,
    ""Colombia"": 3,
    ""Venezuela"": 6,
    ""Cambodia"": 3,
    ""Czechia"": 3,
    ""Brazil"": 3,
    ""Singapore"": 3,
    ""China"": 3,
    ""United Kingdom"": 3
  },
  ""account"": {
    ""hello"": 213,
    ""Domain"": 72,
    ""Administr"": 51,
    ""Test"": 18,
    ""RNPreZbbj"": 3,
    ""LknxaV"": 3,
    ""SNfbIi"": 3,
    ""VzQnPYVaH"": 3,
    ""msvUCn"": 3,
    ""tgVGss"": 3,
    ""Administrator"": 3,
    ""yQMjJILjX"": 3,
    ""QhJQnu"": 3,
    ""wfVCXk"": 3,
    ""(empty)"": 3,
    ""vzxuhOjYx"": 3,
    ""FJYupR"": 3,
    ""QzrXsB"": 3
  },
  ""keyboard"": {
    ""Unknown"": 396
  },
  ""client_build"": {
    ""Unknown"": 396
  },
  ""client_name"": {
    ""Unknown"": 396
  },
  ""ip_type"": {
    ""Unknown"": 300,
    ""hosting"": 78,
    ""proxy"": 12,
    ""hosting & proxy"": 3,
    ""mobile"": 3
  }
}"
KcyCd1TG,2023-11-03_stats.json,rdp_snitch,JSON,Friday 3rd of November 2023 07:16:09 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 88,
    ""62.122.184.166"": 8,
    ""62.122.184.168"": 8,
    ""103.195.239.107"": 4,
    ""87.251.75.145"": 4,
    ""194.165.16.72"": 4,
    ""198.235.24.221"": 6,
    ""212.70.149.146"": 10,
    ""185.170.144.3"": 4,
    ""185.170.144.113"": 4,
    ""87.251.75.120"": 2,
    ""190.85.232.116"": 2,
    ""180.93.172.225"": 2,
    ""45.118.146.131"": 6,
    ""198.235.24.177"": 6,
    ""176.49.123.233"": 2,
    ""103.167.91.133"": 8,
    ""152.89.198.133"": 8,
    ""62.122.184.165"": 8,
    ""141.98.11.128"": 6,
    ""179.60.147.10"": 4,
    ""194.165.16.10"": 4,
    ""117.4.106.247"": 2,
    ""116.212.136.231"": 2,
    ""185.246.210.137"": 2,
    ""81.19.135.47"": 4,
    ""152.32.199.33"": 2,
    ""205.210.31.83"": 6,
    ""172.188.48.214"": 2,
    ""20.231.76.245"": 22,
    ""62.204.41.146"": 8,
    ""111.61.253.55"": 2,
    ""45.140.17.16"": 2,
    ""194.165.16.73"": 4,
    ""3.8.115.52"": 2,
    ""205.210.31.221"": 6
  },
  ""asn"": {
    ""AS63737"": 96,
    ""AS57523"": 32,
    ""AS140827"": 4,
    ""AS208091"": 6,
    ""AS48721"": 12,
    ""AS396982"": 24,
    ""AS204428"": 10,
    ""AS197414"": 8,
    ""AS14080"": 2,
    ""AS135944"": 2,
    ""AS131414"": 6,
    ""AS12389"": 2,
    ""AS209605"": 6,
    ""AS209588"": 8,
    ""AS7552"": 2,
    ""AS38235"": 2,
    ""AS60068"": 2,
    ""AS135377"": 2,
    ""AS8075"": 24,
    ""AS59425"": 8,
    ""AS24547"": 2,
    ""AS198953"": 2,
    ""AS16509"": 2
  },
  ""isp"": {
    ""VIETSERVER"": 88,
    ""Chang Way Technologies Co. Limited"": 32,
    ""AZ Viet NAM Communications Technology Company Limited"": 4,
    ""Xhost Internet Solutions LP"": 14,
    ""Flyservers S.A."": 20,
    ""Google LLC"": 24,
    ""SS-Net"": 10,
    ""Telmex Colombia S.A."": 2,
    ""SPT"": 2,
    ""LVSOFT"": 6,
    ""OJSC \""Sibirtelecom\"""": 2,
    ""Vietserver Services Technology Company Limited"": 8,
    ""UAB Host Baltic"": 6,
    ""VIETTEL"": 2,
    ""MekongNet"": 2,
    ""Cdn77 - PRG"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Microsoft"": 2,
    ""Microsoft Corporation"": 22,
    ""Horizon LLC"": 8,
    ""China Mobile communications corporation"": 2,
    ""Proton66 OOO"": 2,
    ""Amazon Technologies Inc."": 2
  },
  ""org"": {
    ""VietServer Services technology company limited"": 88,
    ""Chang Way Technologies Co. Limited"": 24,
    ""DULIEUAZ"": 4,
    ""Xhost Internet Solutions"": 6,
    ""Flyservers S.A"": 12,
    ""Palo Alto Networks, Inc"": 24,
    ""4Media Ltd"": 10,
    ""Xhostis"": 8,
    ""Telmex Colombia S.A"": 2,
    ""Saigon Postel Corporation"": 2,
    ""Unknown"": 16,
    ""OJSC Sibirtelecom"": 2,
    ""Vietserver Viet NAM Service Technology Company Limited"": 8,
    ""Starcrecium Limited"": 8,
    ""Cloud Solutions S.A"": 4,
    ""Overkill Beta s.r.o"": 2,
    ""Alviva Holding Limited"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Microsoft Azure Cloud (southeastasia)"": 2,
    ""Microsoft Azure Cloud (eastus)"": 22,
    ""Horizon LLC"": 8,
    ""China Mobile"": 2,
    ""Proton66 LLC"": 2,
    ""AWS EC2 (eu-west-2)"": 2
  },
  ""regionName"": {
    ""Hanoi"": 90,
    ""Moscow"": 42,
    ""Ho Chi Minh"": 4,
    ""North Holland"": 14,
    ""Kaunas"": 18,
    ""California"": 24,
    ""Plovdiv"": 10,
    ""Bogota D.C."": 2,
    ""Tinh Binh Duong"": 6,
    ""Krasnoyarsk Krai"": 2,
    ""Tinh Hung Yen"": 8,
    ""Distrito Federal"": 4,
    ""Tinh Bac Giang"": 2,
    ""Phnom Penh"": 2,
    ""Prague"": 2,
    ""Sverdlovsk Oblast"": 4,
    ""Sao Paulo"": 2,
    ""Central Singapore"": 2,
    ""Virginia"": 22,
    ""Hebei"": 2,
    ""England"": 2
  },
  ""country"": {
    ""Vietnam"": 110,
    ""Russia"": 48,
    ""Netherlands"": 14,
    ""Lithuania"": 18,
    ""United States"": 46,
    ""Bulgaria"": 10,
    ""Colombia"": 2,
    ""Venezuela"": 4,
    ""Cambodia"": 2,
    ""Czechia"": 2,
    ""Brazil"": 2,
    ""Singapore"": 2,
    ""China"": 2,
    ""United Kingdom"": 2
  },
  ""account"": {
    ""hello"": 142,
    ""Domain"": 48,
    ""Administr"": 34,
    ""Test"": 12,
    ""RNPreZbbj"": 2,
    ""LknxaV"": 2,
    ""SNfbIi"": 2,
    ""VzQnPYVaH"": 2,
    ""msvUCn"": 2,
    ""tgVGss"": 2,
    ""Administrator"": 2,
    ""yQMjJILjX"": 2,
    ""QhJQnu"": 2,
    ""wfVCXk"": 2,
    ""(empty)"": 2,
    ""vzxuhOjYx"": 2,
    ""FJYupR"": 2,
    ""QzrXsB"": 2
  },
  ""keyboard"": {
    ""Unknown"": 264
  },
  ""client_build"": {
    ""Unknown"": 264
  },
  ""client_name"": {
    ""Unknown"": 264
  },
  ""ip_type"": {
    ""Unknown"": 200,
    ""hosting"": 52,
    ""proxy"": 8,
    ""hosting & proxy"": 2,
    ""mobile"": 2
  }
}"
8LyMYw8J,2023-11-03_stats.json,rdp_snitch,JSON,Friday 3rd of November 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""103.232.53.123"": 44,
    ""62.122.184.166"": 4,
    ""62.122.184.168"": 4,
    ""103.195.239.107"": 2,
    ""87.251.75.145"": 2,
    ""194.165.16.72"": 2,
    ""198.235.24.221"": 3,
    ""212.70.149.146"": 5,
    ""185.170.144.3"": 2,
    ""185.170.144.113"": 2,
    ""87.251.75.120"": 1,
    ""190.85.232.116"": 1,
    ""180.93.172.225"": 1,
    ""45.118.146.131"": 3,
    ""198.235.24.177"": 3,
    ""176.49.123.233"": 1,
    ""103.167.91.133"": 4,
    ""152.89.198.133"": 4,
    ""62.122.184.165"": 4,
    ""141.98.11.128"": 3,
    ""179.60.147.10"": 2,
    ""194.165.16.10"": 2,
    ""117.4.106.247"": 1,
    ""116.212.136.231"": 1,
    ""185.246.210.137"": 1,
    ""81.19.135.47"": 2,
    ""152.32.199.33"": 1,
    ""205.210.31.83"": 3,
    ""172.188.48.214"": 1,
    ""20.231.76.245"": 11,
    ""62.204.41.146"": 4,
    ""111.61.253.55"": 1,
    ""45.140.17.16"": 1,
    ""194.165.16.73"": 2,
    ""3.8.115.52"": 1,
    ""205.210.31.221"": 3
  },
  ""asn"": {
    ""AS63737"": 48,
    ""AS57523"": 16,
    ""AS140827"": 2,
    ""AS208091"": 3,
    ""AS48721"": 6,
    ""AS396982"": 12,
    ""AS204428"": 5,
    ""AS197414"": 4,
    ""AS14080"": 1,
    ""AS135944"": 1,
    ""AS131414"": 3,
    ""AS12389"": 1,
    ""AS209605"": 3,
    ""AS209588"": 4,
    ""AS7552"": 1,
    ""AS38235"": 1,
    ""AS60068"": 1,
    ""AS135377"": 1,
    ""AS8075"": 12,
    ""AS59425"": 4,
    ""AS24547"": 1,
    ""AS198953"": 1,
    ""AS16509"": 1
  },
  ""isp"": {
    ""VIETSERVER"": 44,
    ""Chang Way Technologies Co. Limited"": 16,
    ""AZ Viet NAM Communications Technology Company Limited"": 2,
    ""Xhost Internet Solutions LP"": 7,
    ""Flyservers S.A."": 10,
    ""Google LLC"": 12,
    ""SS-Net"": 5,
    ""Telmex Colombia S.A."": 1,
    ""SPT"": 1,
    ""LVSOFT"": 3,
    ""OJSC \""Sibirtelecom\"""": 1,
    ""Vietserver Services Technology Company Limited"": 4,
    ""UAB Host Baltic"": 3,
    ""VIETTEL"": 1,
    ""MekongNet"": 1,
    ""Cdn77 - PRG"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Microsoft"": 1,
    ""Microsoft Corporation"": 11,
    ""Horizon LLC"": 4,
    ""China Mobile communications corporation"": 1,
    ""Proton66 OOO"": 1,
    ""Amazon Technologies Inc."": 1
  },
  ""org"": {
    ""VietServer Services technology company limited"": 44,
    ""Chang Way Technologies Co. Limited"": 12,
    ""DULIEUAZ"": 2,
    ""Xhost Internet Solutions"": 3,
    ""Flyservers S.A"": 6,
    ""Palo Alto Networks, Inc"": 12,
    ""4Media Ltd"": 5,
    ""Xhostis"": 4,
    ""Telmex Colombia S.A"": 1,
    ""Saigon Postel Corporation"": 1,
    ""Unknown"": 8,
    ""OJSC Sibirtelecom"": 1,
    ""Vietserver Viet NAM Service Technology Company Limited"": 4,
    ""Starcrecium Limited"": 4,
    ""Cloud Solutions S.A"": 2,
    ""Overkill Beta s.r.o"": 1,
    ""Alviva Holding Limited"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Microsoft Azure Cloud (southeastasia)"": 1,
    ""Microsoft Azure Cloud (eastus)"": 11,
    ""Horizon LLC"": 4,
    ""China Mobile"": 1,
    ""Proton66 LLC"": 1,
    ""AWS EC2 (eu-west-2)"": 1
  },
  ""regionName"": {
    ""Hanoi"": 45,
    ""Moscow"": 21,
    ""Ho Chi Minh"": 2,
    ""North Holland"": 7,
    ""Kaunas"": 9,
    ""California"": 12,
    ""Plovdiv"": 5,
    ""Bogota D.C."": 1,
    ""Tinh Binh Duong"": 3,
    ""Krasnoyarsk Krai"": 1,
    ""Tinh Hung Yen"": 4,
    ""Distrito Federal"": 2,
    ""Tinh Bac Giang"": 1,
    ""Phnom Penh"": 1,
    ""Prague"": 1,
    ""Sverdlovsk Oblast"": 2,
    ""Sao Paulo"": 1,
    ""Central Singapore"": 1,
    ""Virginia"": 11,
    ""Hebei"": 1,
    ""England"": 1
  },
  ""country"": {
    ""Vietnam"": 55,
    ""Russia"": 24,
    ""Netherlands"": 7,
    ""Lithuania"": 9,
    ""United States"": 23,
    ""Bulgaria"": 5,
    ""Colombia"": 1,
    ""Venezuela"": 2,
    ""Cambodia"": 1,
    ""Czechia"": 1,
    ""Brazil"": 1,
    ""Singapore"": 1,
    ""China"": 1,
    ""United Kingdom"": 1
  },
  ""account"": {
    ""hello"": 71,
    ""Domain"": 24,
    ""Administr"": 17,
    ""Test"": 6,
    ""RNPreZbbj"": 1,
    ""LknxaV"": 1,
    ""SNfbIi"": 1,
    ""VzQnPYVaH"": 1,
    ""msvUCn"": 1,
    ""tgVGss"": 1,
    ""Administrator"": 1,
    ""yQMjJILjX"": 1,
    ""QhJQnu"": 1,
    ""wfVCXk"": 1,
    ""(empty)"": 1,
    ""vzxuhOjYx"": 1,
    ""FJYupR"": 1,
    ""QzrXsB"": 1
  },
  ""keyboard"": {
    ""Unknown"": 132
  },
  ""client_build"": {
    ""Unknown"": 132
  },
  ""client_name"": {
    ""Unknown"": 132
  },
  ""ip_type"": {
    ""Unknown"": 100,
    ""hosting"": 26,
    ""proxy"": 4,
    ""hosting & proxy"": 1,
    ""mobile"": 1
  }
}"
MwFs7UVM,101. Symmetric Tree,micahbales,JavaScript,Friday 3rd of November 2023 07:09:56 PM CDT,"/**
* Problem statement: https://leetcode.com/problems/symmetric-tree/
*
* The first solution here is an iterative one. It's not as efficient or elegant as the recursive solution that follows.
*/

/* Iterative Solution */

function getNodesRight(node, stack) {
    if (node === null) return [null]
    return [...stack,
            node.val,
            ...getNodesRight(node.right, stack),
            ...getNodesRight(node.left, stack)]
}

function getNodesLeft(node, stack) {
    if (node === null) return [null]
    return [...stack,
            node.val,
            ...getNodesLeft(node.left, stack),
            ...getNodesLeft(node.right, stack)]
}

 /**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
    if (root === null) return true

    const leftNodes = getNodesLeft(root.left, [])
    const rightNodes = getNodesRight(root.right, [])

    for (let i = 0; i < leftNodes.length; i++) {
        if (leftNodes[i] !== rightNodes[i]) return false
    }

    return true
}


/* Recursive Solution */

function isMirror(left, right) {
    if (left === null && right == null) return true
    if (left === null || right === null) return false
    if (left.val !== right.val) return false
    return isMirror(left.left, right.right) && isMirror(left.right, right.left)
}

 /**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isSymmetric = function(root) {
    if (root === null) return true
    return isMirror(root.left, root.right)
}"
DT2EcpzH,Keychron custom LED indicator lights,WinderTP,C,Friday 3rd of November 2023 06:58:14 PM CDT,"//add to vial-qmk\keyboards\keychron\v6\ansi_encoder\keymaps\vial\keymap.c

#if defined(RGB_MATRIX_ENABLE) && defined(LAYER2_LED_INDEX) && defined(LAYER3_LED_INDEX)
	void rgb_matrix_indicators_advanced_user(uint8_t led_min, uint8_t led_max) {
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
			// layer_state_t layer = layer_state_set_user(state);
			if(IS_LAYER_ON(WIN_BASE)) { 
					RGB_MATRIX_INDICATOR_SET_COLOR(LAYER2_LED_INDEX, 0, 0, 255);
				} else {
					if (!rgb_matrix_get_flags()) {
						RGB_MATRIX_INDICATOR_SET_COLOR(LAYER2_LED_INDEX, 0, 0, 0);
					}
				}
			if(IS_LAYER_ON(WIN_FN)) { 
					RGB_MATRIX_INDICATOR_SET_COLOR(LAYER3_LED_INDEX, 0, 0, 255);
				} else {
						if (!rgb_matrix_get_flags()) {
							RGB_MATRIX_INDICATOR_SET_COLOR(LAYER3_LED_INDEX, 0, 0, 0);
					}
				}
		// return false; 
	}
#	endif // RGB_MATRIX_ENABLE...

// replace ""led_config_t g_led_config"" in vial-qmk\keyboards\keychron\v6\ansi_encoder\ansi_encoder.c

led_config_t g_led_config = {
    {
        // Key Matrix to LED Index
        {  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11,  12,  __,  13,  14,  15,  39,  40, 16 },
        { 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  32,  33,  34,  35,  36,  37,  38, 17 },
        { 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,  53,  54,  55,  56,  57,  58,  59, 18 },
        { 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,  __,  73,  60,  77,  76,  74,  75, 19 },
        { 78, __, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88,  __,  89,  93,  90, 107,  91,  92, __ },
        { 94, 95, 96, __, __, __, 97, __, __, __, 98, 99, 100, 101, 102, 103, 104, 105, 106, __ },
    },
    {
        // LED Index to Physical Position
        {0,0},  {13,0},  {24,0},  {34,0},  {45,0},  {57,0},  {68,0},  {78,0},  {89,0},  {102,0},  {112,0},  {123,0},  {133,0},            {159,0},  {169,0},  {180,0},  {193,0},  {203,0},  {214,0},  {224,0},
        {0,15}, {10,15}, {21,15}, {31,15}, {42,15}, {52,15}, {63,15}, {73,15}, {83,15}, {94,15},  {104,15}, {115,15}, {125,15}, {141,15}, {159,15}, {169,15}, {180,15}, {193,15}, {203,15}, {214,15}, {224,15},
        {3,27}, {16,27}, {26,27}, {36,27}, {47,27}, {57,27}, {68,27}, {78,27}, {89,27}, {99,27},  {109,27}, {120,27}, {130,27}, {143,27}, {159,27}, {169,27}, {180,27}, {193,27}, {203,27}, {214,27},
        {4,40}, {18,40}, {29,40}, {39,40}, {50,40}, {60,40}, {70,40}, {81,40}, {91,40}, {102,40}, {112,40}, {123,40},           {139,40},                               {193,40}, {203,40}, {214,40}, {224,34},
        {7,52},          {23,52}, {34,52}, {44,52}, {55,52}, {65,52}, {76,52}, {86,52}, {96,52},  {107,52}, {117,52},           {137,52},           {169,52},           {193,52}, {203,52}, {214,52},
        {1,64}, {14,64}, {27,64},                            {66,64},                             {105,64}, {118,64}, {131,64}, {145,64}, {159,64}, {169,64}, {180,64}, {198,64},           {214,64}, {224,58},
    },
    {
        // RGB LED Index to Flag
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,    1, 8, 1, 8, 8, 1, 1,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 1, 8, 4, 4, 4,
        1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 1, 1, 1, 4, 4, 4,
        8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,          4, 4, 4, 4,
        1,    4, 4, 4, 4, 4, 4, 4, 4, 4, 4,    1,    1,    4, 4, 4,
        1, 1, 1,          4,          1, 1, 1, 1, 1, 1, 1, 1,    4, 1,
    }
};

//replace rgb_matrix_indicators_advanced_kb in vial-qmk\keyboards\keychron\v6\v6.c

void rgb_matrix_indicators_advanced_kb(uint8_t led_min, uint8_t led_max) {
    // RGB_MATRIX_INDICATOR_SET_COLOR(index, red, green, blue);
#    if defined(CAPS_LOCK_LED_INDEX)
    if (host_keyboard_led_state().caps_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 255, 0);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(CAPS_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // CAPS_LOCK_LED_INDEX
#    if defined(NUM_LOCK_LED_INDEX)
    if (host_keyboard_led_state().num_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 255, 0);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(NUM_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // NUM_LOCK_LED_INDEX
#    if defined(SCR_LOCK_LED_INDEX)
    if (host_keyboard_led_state().scroll_lock) {
        RGB_MATRIX_INDICATOR_SET_COLOR(SCR_LOCK_LED_INDEX, 0, 255, 0);
    } else {
        if (!rgb_matrix_get_flags()) {
            RGB_MATRIX_INDICATOR_SET_COLOR(SCR_LOCK_LED_INDEX, 0, 0, 0);
        }
    }
#    endif // SCR_LOCK_LED_INDEX
}
#	endif // RGB_MATRIX_ENABLE..."
GFi2wzbX,Untitled,Kaipa,C++,Friday 3rd of November 2023 06:56:55 PM CDT,"# include <stdio.h>
# include <stdlib.h>
# define MAX 10
 
float  alloc[MAX][MAX];
void nwmc(float cost[][MAX],float req[],float cap[],int d,int o,float copy[][MAX]){
	// d=j , o=i
	int s1,s2,lc,lc_next=0,m,n,i,j,i_count=0,j_count=0,index,min,choice;
	float total=0;	/*   To check balanced or unbalanced system   */
	s1=0;
		for(m=0;m<o;m++)
		s1=s1+cap[m];
	s2=0;
		for(n=0;n<=d;n++)
		s2=s2+req[n];
		if(s1 != s2)
		{
		printf(""\n\nThe given system is unbalanced. To make it balanced press any key-->"");
			if(s1 < s2)
			{
			cap[o]=s2-s1;
			o=o+1;
			}
			else if(s2 < s1)
			{
			req[d]=s1-s2;
			d=d+1;
			}
		 printf(""\n\nIt is now balanced\n"");
		 }
	printf(""\nEnter your choice(1/0): "");
	scanf(""%d"", &choice);
	while(j_count!=d && i_count!=o)
	{	
		m=0;
		n=0;
		lc=999;
		for(i=0;i<o;i++)
		{
			printf(""entered for loop with i=%d "",i);
			if(cap[i])
			{
					printf(""entered cap-%d "",i);
			for(j=0;j<d;j++)
			{
				printf(""cost[%d][%d]-%f && req[j]= %f && m(%d)<=i(%d) && n(%d)<=j(%d)\n"",i,j,cost[i][j],req[j],m,i,n,j);
				if (cost[i][j]<lc && req[j])
				{
					/*if(cost[i][j]==lc && n<=j)
						continue;*/
					lc=cost[i][j];
					m=i;
					n=j;
					printf(""m = %d\n "",m);
					printf(""n = %d\n "",n);
				}
			}
		}
		}
		lc_next=lc;
		printf(""lc_next = %d\n "",lc_next);
		index = (req[n]<cap[m] ? 1 : 0);
		printf(""index = %d\n "",index);
		if(index){
			min = req[n];
			printf(""min = %d\n "",min);
			alloc[m][n] = min;
			req[n] = req[n]-min;
			cap[m] = cap[m]-min;
			j=n;
			for(i=0;i<o;i++)
				copy[i][j] = -1;
			j_count++;
		}
		else{
			min = cap[m];
			printf(""min = %d\n "",min);
			alloc[m][n] = min;
			req[n] = req[n]-min;
			cap[m] = cap[m]-min;
			i=m;
			for(j=0;j<d;j++)
				copy[i][j] = -1;
			i_count++;
		}
 
		printf(""Allocation Matrix:- \n"");
		for(m=0;m<o;m++){
			for(n=0;n<d;n++)
			{
				if(alloc[m][n])
					printf(""%5.0f"",alloc[m][n]);
				else
					printf(""    X"");
			}
			printf("" a-%d=%-5.0f\n"",m+1,cap[m]);
		}
		printf(""b: "");
		for(n=0;n<d;n++)
			printf(""%-5.0f"",req[n]);
		printf(""\n"");
		printf(""Signature Matrix:- \n"");
		for(m=0;m<o;m++)
		{
			for(n=0;n<d;n++)
			{
				if(copy[m][n]!=-1)
					printf(""%5.0f"",copy[m][n]);
				else
					printf(""    *"");
			}
			printf(""\n"");
		}
 
		/*printf(""requirement array:- \n"");
		for(j=0;j<d;j++)
			printf(""%d"",req[j]);
		printf(""\ncapacity array:- \n"");
		for(i=0;i<o;i++)
			printf(""%d"",cap[i]);*/
 
		printf(""\nEnter your choice(1/0): "");
		scanf(""%d"", &choice);
	}
	for(m=0;m<o;m++)
		for(n=0;n<d;n++)
			if(alloc[m][n]){
				total = total + cost[m][n]*alloc[m][n];
				printf(""%4.0f*%-4.0f+"",cost[m][n],alloc[m][n]);
			}
	printf(""\b= %7.0f"",total);
 
}
 
// recv(hH21r_v2); 
int main(){
	int i,j,d,o;
	float cost[MAX][MAX],cap[MAX],req[MAX],copy[MAX][MAX];
	printf(""Enter the no of destination\n"");
	scanf(""%d"",&d);
	printf(""Enter the no of origin\n"");
	scanf(""%d"",&o);
	printf(""Enter the cost matrix\n"");
	for(i=0;i<o;i++)
		for(j=0;j<d;j++)
		{
			//printf(""cost[%d][%d]="",i+1,j+1);
			scanf(""%f"",&cost[i][j]);
			copy[i][j] = cost[i][j];
		}
 
	printf(""Enter the requirements\n"");
	for(j=0;j<d;j++)
	{
		//printf(""requirement[%d]="",j+1);
		scanf(""%f"",&req[j]);
	}
	printf(""Enter the capacitys\n"");
	for(i=0;i<o;i++)
	{
		//printf(""capacity[%d]="",i+1);
		scanf(""%f"",&cap[i]);
	}
	nwmc(cost,req,cap, d, o, copy);
	return 0;
}"
CWJXn3Dw,Untitled,Kurausukun,C,Friday 3rd of November 2023 06:37:29 PM CDT,"//============================================================================================
/**
 *	Get Unown Form Number
 *
 * @param[in]	ppp	pointer to box pokemon structure
 *
 * @retval	0-25:A-Z 26:! 27:?
 */
//============================================================================================
u8	PokePasoParaUnknownFormGet(POKEMON_PASO_PARAM *ppp)
{
	return PokePasoParaGet(ppp,ID_PARA_form_no,NULL);
//	u32	annon_rnd=PokePasoParaGet(ppp,ID_PARA_personal_rnd,NULL);

//	return PokemonUnknownFormGet(annon_rnd);
}

//the form_no member has been added to the party information as of DS, so remove the method of obtaining from PID
#if 0
//============================================================================================
/**
 *	Get Unown Form Number
 *
 * @param[in]	annon_rnd	the unown's PID
 *
 * @retval	0-25:A-Z 26:! 27:?
 */
//============================================================================================
u8	PokemonUnknownFormGet(u32 annon_rnd)
{
	return (((annon_rnd&0x03000000)>>18)|((annon_rnd&0x030000)>>12)|((annon_rnd&0x0300)>>6)|(annon_rnd&0x03))%28;
}

//============================================================================================
/**
 *	Get Unown form number from PID
 *
 * @param[in]	form	Unown form number
 *
 * @retval	PID
 */
//============================================================================================
u32	PokemonPasoUnknownFormRndGet(int form)
{
	return (((form&0x000000c0)<<18)|((form&0x00000030)<<12)|((form&0x0000000c)<<6)|(form&0x00000003));
}
#endif"
m9hcuPXw,List Bitcoin Private key,abduljes,Bash,Friday 3rd of November 2023 06:33:23 PM CDT," PRIVATE KEY BITCOIN

L1GorB3rZaQCkfxXXcU2HotLW2AkRNVA8WNJ8eWRneZ7mwwL7tdd
KyS1t189HJCrGQZzzC4eFGDEEqU1jCRWxfjd69dHepN54fmqfGWj
KymMyMRggBkYMmDBv4eoy8RoNv15yooej9nBhaHAdTq8MzV6rmJm
KzDrQNvUWHE9DoinMQpJwNLASTYRopi1P7rwLDE2a67vsg7cpsZE
L4D8jW89BQH39T7tLeMwH6zbydWynjMJgeqvB4si1KbzvWZJHjoi
L1MGHBxe6SEs2QCkcA2TLzpiENGyx9GFSN1Ddbp6KBko79CRhdwQ
L34EusazUz6HJWGdyx1P1dvkALmCKtZJxNvGKVn4D9xFmVeH2Jp8
L4DQBz3n3KspehnS9pHeMfHtj6JiJdm7XJc5h7itDg2xRRaw5yeD
L3zASgsYPwhU3UqhautQd6fNqaHUbiq5tBHJpKVYni1R9mQuZ55A
Kz6eoScMg4YJeBfSMtcCbHLr9ExYqJNh1q2oDNViJbmGRNPUE57W
Kys2qenRUirJwNUubZmYjJUiFy7WvcahVUH2Tzd3EzDQ1PgmZwGh
L5GsuTqSrok7JrN6pbqtrwhrNvezv3uegzrnAVtTBFQhwW2PsZ42
KxMdRHSdBcjvWZ6yXaFqURtww1MGVAAgymqNciYZnbQXppWZLbbz
Kx454NzGT19yphJEdPwzR46hceDCwpTN3aoLtU5PeonN51if4zeQ
Kxmo8fAiY4z5TS5dycLrcfyeCD1wsy5vrN9wLA1sF1G87YSynaaW
L3jJHnziYJjgXK3FRTE8MhP2s9iQE1qwknzSuLJhBMYeA27cVpXp
L1keAExgUHUJsi7H8zEWrbS91qx8RmewWJijnCkA3g1TTwyXoBR2
KzyrLX3dG9u3Le429VXNKs8BRXmnpCU5idw2ccgBDtDZFHDCRHgw
Kz2seYH4uuLapK9iYHwbqXMrnXU3Us7gLm5XVArKb8x5VbiZRrmf
Kxp1giJ2zVSFcKTGvC1hBaXmvDj8DLPQpKDEyi7oYNiKKAUR6gck
L28J7GVBwsBk4cvEsJq8HH8EeFQahTQDWz5mkFhBhnZ1BxKhDzZt
L51L4xcM6HKh9mLAxfHG2HCnJBeuVxGCGLbiYoFkVUJ22pZ6oSqp
L274ijsXp4eYr7QnKXGukBY8JD9W4zuo3kpoQJcvqJvWSQDHxZWo
KymiLz2nBtgPefQnsJwdF3hz9AAwH6kXPaFzGzvkNUkfHTP8BSSv
L1qVEeo8g52UAZPXaRzQEmk7yr4kzepnUzogwqrSKfANWeRu2Cdi
L5VoQgXqeknmxQV3nRYcyxsuR7hsBu36y4Z4H7YgQXqwGb7mfww6
KxnnESnc8pzKz2nFANGnp2airMWsBNCeY18VRqxb2nDLtUyeXGNA
L1LbZCgqyiM78f6H8DmhLz2vvim1ZpMQDEQm5md8eFv91tHs6mYL
L2EbCrPPMu6xzpik9aTpU1ock5eQbdo2Xat1dXmYxcakKEwF7zhh
L2M5yoSz23EJmiw2MsRn6G4HiCVwLkVKfiLipj989q9zScgxS8iE
L3ca5bRCe4LXmQprkrz6ptBgwZWXSwrArHq7iaC79FSR5y5VpcwX
L4A6ag1ywZmpyX6zqfxeYi1zJKNJoCxG6UwWDwc6JsP6rv9koRja
L51oK2CrpEWt77DEe9pfLEifR8pwMFMaQjSXnNq54J6ic5jdGW3L
KyPPFjjHmt5KVYL1pdXvBgGncgAaVJJkuUZhz64KZkaTkKZxLQAS
L2ANxHsM2HP1wgENGBN5B12y5DUkDWv6N1xX7VRD14BvhZgpXmJj
KzapfqRY4HbkHBHpSjhHdZHCHzxC1xNnQeXM721NoAorcRaZaZ1K
L4bsDfc7QdQezVLvH4vBvW1cfk4E6kvhGWE1v54iFoj9RnB7n3bm
KzpN6CuiYeYih8zwFThub821yhuRJ87rDKQtRk5PpoMjWMYFJdk8
L5WuwohobEo73MfTF3Foxwbx4rk4N7pcy7BwjhRGeG4r2T92cGgR
KwHZT7Z9HKMoJ1yGGGeTj7LKoPMtbkt4XKyBBPMZ83tx2eSHpeBv
L4Yfoxgn3fnv6SUUPEicB3uvqDyULokqSoPpt1jTSZxh3GT66G5K
Kzv7BuHX1ijtCNATxQHDAcnRAN2jUpp5hXcNzdDAniSMqRQaXQ4Y
KzLuzYoPF7K1xQkUHBmedZPkoemwJBF3LrL2qrg7FW8MAVassbiw
L2pZe1gTAWFv8J6BsSgbM9a9ceq6NaMCk9Zz9wro9cq3Mggu1eYc
L3cmsBJrvKxbWeVvEnRNtaM9ZAhts5GhbU5a4t6g56rN4gy92GqK
L1rizEbmSDbzJf9qhMXGmv1dxdGHCeYbSm7rDkQZSGthDTfFahoH
Kz6VP2MJPwG2KSiq8QWaWCt4qqxKqhTV6ZkAGrh4QrpovjcYVTZp
KzXfGpmcGSLxsNFW1zgtJpqaJgXYydKEYRpycd3D3G9ad558zHdN
KwdC2F9sDiwxZ6vuy4R5cyY7p8fDyZrDATfmtTXYHZRHuDZTNCLo
L5FvQCTjdPugfDcyzLUsger9GGCb81Y5rmUrgVe25qQA2tciDyNU
KzGb5EakT8RNhzPwroiDuWERvVpHxGCG2BwxeTPTXmnKhPmw7L97
L4xBmm6bxBJXasBqohisHCEKScWkdf82eeJ3KM14XzZGBfK8bSMh
L3AHbTJbdVFvpxhj6sXLTbw1VfQHuy9JeY5n99p2F8n7GcBXC6JV
L5bLAoPHRrqpxMcNMYw9eeP8za2X9d4BHDwv78odTwhxM1J4asyW
L2F9nzGKZNyzW2xtqsdFRGm5rNS26dbkpCZfm92onRCtyeLyufiK
L46JASL1UvdwBWFCydxeCrNAt1YEUAA7YPZuViJqM1KCtN5B2FD1
L2Z127rw8GZkv4nmmQWBHnK9vtPmBVDY3KdPwb93qU84bKm6gd4K
L1DUJmYjhWJih22Xz9GaKWUMxV5vzMR6G27obBHgR23i6MpBFmnL
L3yrUWNo3X2AabiLWRsw5KQQYgbMyfVDNPfiVJeifHEJradANWKR
KxdUx9QmffoUdLK7AwdX17Ld3h1E7RqTjDV73Yg6nGz9t9xSyGM8
L1RhP8hLt7sPysVR9Rp2jN9A8tJpAXZBcVNQp2YSNLuFSznU3xny
L2byAuaJkJucSJejfZ57BDqSNE23knvvjYRT7nJx8htEsWTdC2fU
L5n881H9SWenEAt2zyVt8LZ9q69ny53jCx76SwQ4Rk7p5gA1TnEZ
L3o6BBcnbYVFfkg8jPfojKWUEAbR8PvdENkUZR6jKijaTJNkvTAn
L4eVUyVa6AnuYqBqJDtmB9tNWmFhu4eYmSqyqT9gd31FbW34N9wK
Kyte5YnSi2MYBBjrjeEtWvLsTCnvDt6YszY2Z5D5ZWQbKUsbWYbW
L1Yh4vTmVwZTifNHtuLk4G3yeGef2KZeLygsfCwKQLUcTBiTRAW6
L3babMDAyVcG7V7QGhW26Rfw1z942C8fCvRj24fJKxSNok3GJxaM
KxnvvYcVAipnqKb9mpVzqQW9TBLa4MgQKNep36ggBUHVRHcNQRbA
KwwrXgKkkqgsmrvyARiK3zh8FFhHRgVuPzwcmZHaTd3ffVtKoZFS
KzEDFXiSDG7GLyjr7nM4a9AFCaz7DXnRBvgUTnpA5VXffbjmKdLC
KzujKMacgSX4yvY6LmQeD6ZEtiHEde6dN1ZUqmWdAjxz44Jb6LZN
KyiUa4M5h3NEXiF96NdCbtMrUDZchbLYhWU3gc6caRGA5JBYxykB
L232EhHzEkoiEqUaKMJ6iCx2icWaScY4V3pAW8vrXTCJGwcVt75T
L4TJ6jK2hJzjYRpzYxoqMv1iB1tPUPYF2iai2T45mTSoUrdvvTSk
Kzyjd7EHzusVc9ZtHQGndNqx755omzAHMW3hV15V6pQwKeqFhSLo
KwgKYz6vfFBwFmwg9afNa8JQh9kBeKJLsVTi5Lb7TNkfe5iYMoX5
KxnKPSPnQ4HP2GMrrHQ787Yy4GAGY2xtX3TxLCgLfJm6bsVYLWFU
L3VpwKEtmy3dL18ZUsoA5JJxNpq6FyrzEfvwwvwtMsbWZqZ2DZXY
KwUEQKC2i54K89uJMUBo6t9H9zpR2W5mqbDkbzMArzkG22Lo8ibw
L18KF17eAhR58ne3kYxhqsCMDBqYvvc6unxm5yvc42zrYzSRJxXB
KyXurw1RnqbGmXwPSSDfZDk9XffqSnMediuxaeN4QrPWDRm3rPkL
KzJuDUtyFXNgsSt2eYnSmzbneqbK1x3FhqRJY2JZs68Ldssoiq1m
KwuMBJhj3cQYpTr1EL5yXYsMphqnY5oFkZJ2iWCCkoijksuf6vH5
L4sUmmsVoBQUxK4qUb5zPL1PAmPnizmzcCK5AV9kpcVn7a3C7vTF
KyTQFxmV8DUuJn9bd1mQUdy9DzFjjJ2F68h3SQwTRAJs5xVSzq2g
L14z87i7wJsrKaM1cfm3WDydAdywhwSPbSCtwQ2bHdpHC69ckFxt
L5hyU6FL7ZqpEWPf446v2qwquA467NJ5gbUaqH6tdrAEt1jY5Dv3
L2VSmNHt1Sfj1WvHGdQEwznZsp3QToRxxPUAdLptwuN1Mzt6Uw72
L4Y3Yoy9Z36hRcJ4aM9LPWb33stEMpeqvtiNSpuapfoTMPrEirip
L3iir9mfHBkMqXcdcDMcNke7nu9QGhugAMcxogS3AUhqFUk2PJca
L4NCdffbnQakbApeX1TTXgXdbZAeuLaBYZ19VgJMzha4hNeH3TEn
L5kwMkwA5ML5tF5gDPMGvjW39D5pQgrghASQAyY1iYUPUqFjjits
L53zxYNPNSAWv5d6Adk2SMVJsK8KjdcXFJohhhKH5uvd5xYfQo8M
L5kRB1KmM3zrF3z37Fo5u944j3vrFkDtzsK8nHPAk7XbgYYT7FL8
L5LZKvCuKDY7pYmBpqfQomqKMSugTrjde5NQBzDcRjHeEjVMZyVK
L3wUe7pGrRcrmmq8UFodQETqBnCo3aLdfzybthvjZdB2sJMigLBk
KyJUdTFvHDQhNoiNo9jx9vQNiZLsBBi8GeCKXzdvxeQ9iaGSyHDD
L3AnRUx2o2YXfjaqKVDfHWCruHTq52ksYxbvLpGyP3vqVSE13fng
L23QWPhUmDDHPa64GGNygkeHM24dAJ48cpbCp6sXpCqgQ2dUrJNP


Addres

1H9LdMdTvHaC4uezyzHYUbRnGqEjq9f5Wo
15Ep4FrjV2c1dXtY2cDDvwgtF4wknE6BNr
1PfFypUD8wFJQiXUGuM87pUfhhPpNRfvDe
14SVhAzYgTQtNvQGDLHid5MgpzW7ZAnygk
1D8yKevSNmaHRVSFLUMs6QbFqfzZU4TJWb
12wxgw75PSud5iLq6VbiV3u1HuTveHPCvQ
1NzsDcbAx7LXMgY1E1TcfjnmUoiYusTnSd
1rcabzFDrg5BWApAQ1GacTssdw7See12S
12tDyJicGXU58UUonuNHVA71hXSk8xKv5V
1DTPk26gBLGE6JUXLn77Af7ZvCwe6cz99n
1NsqPV4XMxWbwJbhfZe1TRt2g6TkQ2M7Kf
1AFgwLzRUKZM3gmuWnKG1AFkZm5Lvdkkcx
18rFKULqEruQxaM4WCC1RdF8dR5oCKeKZ8
1H5Pcm7QALE2a7g4kEXxtVT938jVew6aje
1FEjipHyoFMM5eQ1NTC3DsdKSvcBWVVi3Q
14znPGaVzb2xaEMddzdyqJ8RXi1Lj6Uy4H
1EKus9bStAhTwTMgtUwURmHgACeCLybHpo
1EHuRAi4SCQuwhmT6UsvQePo9QNF1eV8Q3
156ngoHukw5B3vpcn6WFtjMap2SSJtDeT9
1Ly9S2sU2xSXx6e43Jp9dpJUCbHJHQrWeE
1RCJCfQV3UVTZk9e4cpx1aMvsMCEDHuGw
1EmVPUPvwtHTo2vTXsJXoYMgGiw3Qvv7kT
1AuxfMa9TFJEP1vcHYDhQSikYd6Aysmy1C
1JPHuFAX2NQkQcpFJTnCpBGVbyctu7eHgf
1AXkAkLmLiZuHVBgbRY4nJ3oNwvMCvKtGp
1HZbew6hTfT3KC9p9wwkkaZuxJH5jg12dq
1B1XJUi4LYsF4Go5bohoWMFqifgueb9tww
13aCELecbqBgQbECTG18nsoM5N3i7HfJ16
17EUGvy555krVErauQuBJyPy7xzk3ykUWc
1MKdgTQdCv1N7JsNssqrCk8tcHrMGCPEPT
1JoXp95SrVRuFkWFZpS8LchepqgiAh1KLM
1DfcgfWfXFmK2uYGhZdHFXKre6EpaYfZ4u
1CZM3FkFKfzfMu7TDAZ8iZvUFws3hBGGTe
1PD2KPJz4RKq6XVzXRX8CUAC75Vb2GfbGr
1BbBgFzvh7LUnHekd878ZkTuUdTNkhb8gv
1BSHcXc9psvxexnrbFcB18xSJkMki1kztY
1Cu2m46h5FoBiiEJtMJ5o46JiyN9ekCDta
178WQS4HSTmsmrtbPdc3hwZo8C2pcgHJFM
1McDr8uWVsi8uRWvaSnURJDBvgHo36GDMn
1LDnWQnYZ29LXEnhfDqva6e4h7RY9TTBzt
1EM9EBYtbH91Aivt3CPc3wCeZWXVVoNkMT
16FPw12v6atVbWbPStWi5nME8tvCLVaXSF
175s3T5QQvZrxVouYYN5tupwS81caZmzZ2
13fVN8v4Pv7edsS8Hq3BpurGYg8RrN28rC
1Pn1s15T3miucwxAT2bi812X3Wzzx9zuaS
1DRTnZy1hcoUSU9x1WJeFo9hvmwA3XzJwn
1C7rvzQ3tKPAkkQHuy6cqwmqq7YAG2hxUr
1MJeQHPZHrfCB6yVSxJ8PmvKhoPn62QaMU
13yFpFnMGbjvFzhAsgJ4UbKLM99NLzrcDa
16jayv5DUQEKJP6n2Luarv1xEcPRkboPYh
1PrLtX6fxnej7EBreEnDnPw95qzeQXwLth
1MRivicsXCz52WivYCZW6EGsndzkCqo7N4
1JoAJ4CKSjNXjKi4vaUEX4ybEB3QYb6fqc
12HfgcWQaWexki4tmNmN5Ct4xvk4fd1NEz
16w3mxz9FW9Wskk6MMmCFUQXtQwpMF1GzW
1PNY3DDhhw4KbLrknUQsiBzFjxusg8Rmdd
1Ewm8aGzZyainRrh1HAafWHJE2BXFBZeo9
1ELCEQHdwU1ZeuBQRiM9HhprgTYfqWCWn5
1AEkipXDHHbVNbJa529jiD4KB52Xe5sALX
17sHT5br4zSFzdX3JZJR1qUUESNns5AvtN
1ALF1tCP5hDvnMzYjc9ibohMsQG9R4afsk
1Jj17W9zr3C76eMwWD5iqt7ESQXmi4CBaS
1F7iPjViozpuCj85hXjb6cYD1Ngmmv1ZLk
19FLqYLZfWqBYXEcFqoQeJQyB3sCoU5Yqf
1BBiPbUCWif3s35A1pMq48ooFhr7us4ppJ
1LWMiSEQnwL9oA6NXwmtGzjoMs8zQFR8ib
15TWDHFThvR2hCYZvFMTcGFhWE1Rdv9Lvj
1HXRQHLMthb3uYTxb8t3YnFWgWUrfEUJzC
1Gm5dxBGkH82aPAZpGCnBC5NDcfzkjkLHH
1E7Q2fHFgKnQ1fMDG66BLQ4fVe4oMT3HRk
1HhS6S9ogRW3tWZpWDjh3Wire5yK4Myt32
1Hcj2BdrcLuUp3G3pFJgLkhMpjour9GAHa
1JVB5UPK8bT1RsPFi93SyB4NycMXmKuYti
1PrAS55nxn8RpMftL9gWuh7S7LuqHJvdpv
15WbXd227V5mvRY1YKu811CdgNc2kn6vej
1D4NSse8HVj4pfXtgB3CzcWiMW3stbHUtj
1AGauPtnLrYToDEQqjC4kM9a7P9vwJA8pm
12m8jiKS11KA445fc4WC4j4XDy6AVDSsfe
153zkWtjweWHNyZP8dQdiuGe23aKncbEcj
1CcceBPP3iyNJDGva5ZWsap7qNf9aTsq83
1GcKqrKehPu2H621P4R9nKT6P5BZNKopzy
1KhxtP19L6bxv34vADncMDS9F5bSuSiUyf
1N1Q6hF1UeZMSak6HDVqss3Gm4G5An58BA
158bn5cUnD1aNznxvAfqU2M4Pbmur1tqj3
1GW97xS68YsbiKxGDGkHS1XmNDvZrnHA99
1gbNiekpj2FpWtNXYsBwWifDW5hyPknyB
1DL7TyNVNCukwD6ySnaog3x8AHFoLDF5NV
1AXiqdft6FPrY7qAeVou7wWrGECKhFZUQe
1FWfmBcBPZHX29VUS9whL11JEnief4RejD
12bUEL2ykbXmypJMCFDJiNEpxUbAKEwmh2
1Q1vNwBfGC4BFz89B9ePdVCaiGsyn28skW
1QDnT3jkPNFH2eMJsbZNb9kV1hwS7ik24B
1EbcFjavFFsftKFat4BkDag9nsY5Wzu1Ww
19j2wfH5bze8REX5ZCq7aoP4MY72qMADak
1GzybPfGWJHPEw2spiUhiUpBXiVcUCJqhY
12m74VUGJQuUBVvroNxDvx1Dofbet4gipx
1owrgmmrhZczTJs4f2Gt4y111dCAXbhwr
182GFdoMmu596htSMDgi1kWoWmUxBmusMY
1J1PPeGrAhE9h5ezPcZuW9HVmdVVAL7vQB
1AHQtdv69dWpa4SGaqAQhkczabK7Z45ziv"
qV1Rm3u7,Hack simple substitution cipher,Dimaush,Python,Friday 3rd of November 2023 06:27:41 PM CDT,"#Эталонные частоты символов английского алфавита
symbolsFreqsStandart = [8.17, 1.49, 2.78,4.25, 12.7, 2.23, 2.02, 6.09, 6.97, 0.15, 0.77, 4.03, 2.41, 6.75, 7.51, 1.93, 0.1, 5.99, 6.33, 9.06, 2.76,0.98, 2.36,0.15, 1.97, 0.05]
#Эталонные частоты биграмм английского алфавита
bigrammsFreqsStandart = {'oc': 0.1333384, 'um': 0.0728041, 'vz': 0.0, 'ox': 0.0139953, 'jr': 0.0, 'bh': 0.0004793, 'ys': 0.0889562, 'pc': 0.0005751, 'ha': 1.7533862, 'ez': 0.002684, 'az': 0.0172544, 'xi': 0.0111675, 'bc': 0.0001438, 'qx': 0.0, 'hd': 0.0015817, 'kl': 0.0156249, 'yd': 0.0030195, 'xw': 0.0, 'ew': 0.1074089, 'id': 0.4131479, 'wl': 0.018932, 'mz': 0.0, 'wi': 0.5180165, 'qo': 0.0, 'pf': 0.0013899, 'hn': 0.0092503, 'on': 1.4637513, 'hx': 0.0, 'gd': 0.0012462, 'co': 0.6017964, 'gg': 0.0393018, 'cc': 0.0585213, 'hh': 0.0009107, 'pd': 0.0011024, 'wq': 0.0, 'bw': 0.0001438, 'ta': 0.4067254, 'kk': 0.0001438, 'qn': 0.0, 'vr': 0.0004793, 'pe': 0.3927781, 'ly': 0.436681, 'wv': 0.0, 'lq': 0.0, 'ep': 0.1284976, 'xt': 0.0313456, 'aa': 0.0001917, 'wc': 0.0011024, 'zi': 0.0061828, 'wa': 0.7742928, 'zn': 0.0, 'uj': 9.59e-05, 'kn': 0.1178095, 'gf': 0.0003834, 're': 1.7554471, 'ex': 0.1552899, 'ho': 0.7850289, 'xq': 0.0002876, 'fw': 0.0012941, 'ht': 0.2339893, 'wz': 0.0, 'hf': 0.0028757, 'yx': 4.79e-05, 'ia': 0.0999799, 'ob': 0.0785556, 'fq': 0.0, 'oh': 0.0224308, 'to': 1.1336164, 'qf': 0.0, 'gj': 0.0, 'ud': 0.0639373, 'iz': 0.0226704, 'ft': 0.0989734, 'by': 0.1159882, 'lv': 0.0322562, 'aw': 0.1056355, 'pi': 0.0983024, 'sj': 0.0005751, 'oi': 0.0861284, 'iv': 0.1765225, 'pv': 0.0, 'me': 1.0261117, 'as': 1.1904123, 'bs': 0.0404521, 'km': 0.0024923, 'bj': 0.0115509, 'vt': 0.0, 'nj': 0.0082917, 'gv': 9.59e-05, 'oy': 0.0270319, 'uk': 0.0023485, 'vd': 0.0, 'ss': 0.3641165, 'ke': 0.3602822, 'cn': 0.0001438, 'yg': 0.0008627, 'vs': 9.59e-05, 'ul': 0.4280059, 'lm': 0.159316, 'zw': 0.0, 'kh': 0.0035947, 'fh': 0.0010544, 'ei': 0.1148858, 'lw': 0.0184527, 'jg': 0.0, 'hq': 0.0, 'mn': 0.0075728, 'xr': 0.0002396, 'ci': 0.1234171, 'em': 0.282781, 'ge': 0.3587964, 'jm': 0.0, 'vp': 0.0, 'ir': 0.3141266, 'cb': 9.59e-05, 'of': 0.8852484, 'ib': 0.0658065, 'fv': 0.0, 'ua': 0.0644166, 'ds': 0.1273953, 'yn': 0.0037385, 'yh': 0.0043136, 'am': 0.3072248, 'qr': 0.0, 'zo': 0.0012941, 'iw': 0.0002876, 'xl': 0.0004314, 'ar': 0.9913153, 'ww': 0.0005272, 'wm': 0.0005272, 'rf': 0.0232935, 'uh': 4.79e-05, 'sg': 0.0048888, 'rc': 0.0551663, 'rk': 0.1053479, 'vq': 0.0, 'zv': 0.0001438, 'xx': 0.0, 'do': 0.3965645, 'es': 1.0640235, 'fd': 0.0009586, 'hj': 4.79e-05, 'wg': 4.79e-05, 'bf': 4.79e-05, 'lp': 0.0271757, 'ji': 0.0011024, 'zd': 0.0, 'mc': 0.0219994, 'pq': 0.0, 'nu': 0.0396852, 'vf': 0.0, 'ql': 0.0, 'tc': 0.0425609, 'gk': 0.0, 'qq': 0.0, 'ba': 0.1554337, 'kp': 0.0003834, 'dq': 0.0004793, 'wr': 0.0346047, 'dn': 0.0160083, 'yk': 0.0, 'ag': 0.1888881, 'wo': 0.2980224, 'xa': 0.0302432, 'mg': 0.0001438, 'ot': 0.4721485, 'nr': 0.0122219, 'tq': 0.0, 'bn': 0.0007669, 'jf': 0.0, 'qc': 0.0, 'xs': 0.0006231, 'fr': 0.2388781, 'ev': 0.265239, 'qw': 0.0, 'di': 0.2823017, 'ov': 0.1414864, 'si': 0.4520183, 'jo': 0.0370491, 'mo': 0.3124491, 'wn': 0.1516473, 'ax': 0.0052722, 'ey': 0.1752284, 'ui': 0.0821024, 'ut': 0.5242952, 'hs': 0.0106882, 'bd': 0.0014858, 'jt': 0.0, 'vw': 0.0, 'sk': 0.0684426, 'ej': 0.0031154, 'ks': 0.0362343, 'uy': 0.0014379, 'lu': 0.0876621, 'os': 0.2433834, 'kd': 0.0003355, 'ro': 0.6651585, 'rv': 0.0612532, 'jb': 0.0, 'cl': 0.1495864, 'fp': 0.0023006, 'mt': 0.000671, 'ne': 0.757997, 'xf': 0.0010544, 'dr': 0.1308941, 'qj': 0.0, 'fm': 0.0004314, 'ug': 0.1809799, 'la': 0.4516828, 'gm': 0.004026, 'hz': 0.0, 'pb': 0.0013899, 'xy': 0.0006231, 'ko': 0.0017734, 'ms': 0.0702639, 'yt': 0.026984, 'ij': 4.79e-05, 'jl': 0.0, 'wp': 0.0004793, 'lj': 4.79e-05, 'ns': 0.3018088, 'jy': 0.0, 'zc': 0.0, 'cp': 0.0014379, 'ip': 0.0550704, 'fe': 0.2252662, 'fi': 0.2207609, 'oa': 0.0706953, 'kt': 0.0008148, 'yo': 0.6294035, 'tp': 0.0025402, 'hl': 0.0068538, 'cy': 0.0223349, 'lc': 0.0059911, 'pp': 0.1200142, 'db': 0.004745, 'te': 0.9009212, 'vk': 0.0, 'ux': 0.0025882, 'tv': 0.0002396, 'gp': 0.0030195, 'gw': 0.0007189, 'kb': 0.0016775, 'or': 1.0262555, 'dv': 0.0247314, 'xc': 0.0284219, 'uq': 0.0001917, 'mx': 0.0, 'ym': 0.0129888, 'hg': 0.0001438, 'iy': 0.0, 'xd': 0.0, 'ie': 0.2681148, 'ee': 0.5119775, 'va': 0.0685385, 'tl': 0.1617124, 'ts': 0.250381, 'mj': 4.79e-05, 'yr': 0.0028757, 'xp': 0.053345, 'uf': 0.0159604, 'bk': 0.0, 'nx': 0.0043615, 'ae': 0.0016775, 'dx': 0.0, 'cg': 0.0046012, 'dh': 0.0055118, 'mu': 0.1292166, 'kg': 0.0009107, 'jv': 0.0, 'go': 0.1641089, 'gt': 0.0115988, 'rg': 0.0594799, 'xz': 0.0, 'bg': 0.0, 'be': 0.6146893, 'jz': 0.0, 'qm': 0.0, 'ai': 0.490697, 'pz': 0.0, 'uc': 0.1287373, 'us': 0.4861917, 'dj': 0.0007669, 'nc': 0.2857047, 'th': 3.9283557, 'ju': 0.050613, 'qa': 0.0, 'zj': 0.0, 'jd': 0.0, 'qy': 0.0, 'ur': 0.6653502, 'et': 0.4489029, 'dk': 0.0014858, 'er': 2.1172151, 'rz': 0.0002876, 'ih': 0.0003834, 'tb': 0.0034509, 'ef': 0.1511201, 'fj': 4.79e-05, 'ja': 0.0190278, 'ix': 0.0167272, 'rx': 9.59e-05, 'tn': 0.0088189, 'tw': 0.0874704, 'in': 2.2636382, 'hr': 0.0903941, 'pl': 0.1756118, 'zh': 4.79e-05, 'lh': 0.0015337, 'zg': 0.0, 'vv': 0.0, 'sm': 0.0639852, 'mh': 0.0003355, 'yw': 0.0032112, 'vu': 0.0025402, 'bm': 0.002684, 'hb': 0.0065183, 'dl': 0.0628349, 'vj': 0.0, 'kq': 0.0, 'ct': 0.2344207, 'ue': 0.0961935, 'jk': 0.0, 'ig': 0.2644722, 'sa': 0.3689094, 'np': 0.0053201, 'fn': 0.0001917, 'cd': 0.0021089, 'xk': 0.0, 'vh': 0.0, 'lr': 0.0161041, 'uu': 0.0, 'sd': 0.004026, 'oq': 0.0004314, 'cs': 0.0035467, 'hk': 0.0001917, 'oj': 0.0012941, 'kc': 0.0014379, 'pr': 0.2487035, 'qi': 0.0, 'eg': 0.0598633, 'aj': 0.0039781, 'ao': 0.006087, 'sv': 0.0004793, 'ad': 0.5948467, 'pm': 0.0030675, 'bu': 0.2697443, 'eb': 0.0212325, 'td': 0.0005751, 'zu': 0.0002396, 'ol': 0.4180366, 'xh': 0.0030195, 'sq': 0.0101609, 'nk': 0.0962893, 'xe': 0.0104964, 'bp': 0.0, 'zy': 0.0015337, 'tx': 0.0, 'cw': 0.0, 'rm': 0.087758, 'sy': 0.0212805, 'ls': 0.0814793, 'qh': 0.0, 'ek': 0.0205136, 'eq': 0.0119822, 'om': 0.5926419, 'zq': 0.0, 'dd': 0.0545911, 'lk': 0.0383432, 'po': 0.3729834, 'ng': 1.0051188, 'dt': 0.002684, 'jq': 0.0, 'av': 0.3843426, 'ac': 0.3905733, 'su': 0.240939, 'xv': 0.0, 'kr': 0.0004314, 'pk': 0.0038822, 'og': 0.0469704, 'ye': 0.1527018, 'ka': 0.0132763, 'ck': 0.2258414, 'vb': 0.0, 'mq': 0.0, 'eu': 0.012174, 'ik': 0.0484083, 'rw': 0.0217598, 'cj': 0.0, 'na': 0.175468, 'oz': 0.0027799, 'rj': 0.0004314, 'du': 0.0549745, 'wj': 0.0, 'da': 0.1481485, 'wu': 0.0013899, 'cu': 0.1149337, 'nn': 0.0748172, 'iq': 0.0022047, 'nb': 0.0047929, 'tz': 0.0010065, 'yl': 0.0072852, 'aq': 0.0004793, 'dy': 0.0791787, 'xu': 0.0018692, 'pt': 0.0508047, 'ce': 0.5314366, 'ry': 0.2762627, 'fx': 0.0, 'tu': 0.1738864, 'dm': 0.012126, 'uz': 0.004074, 'ca': 0.4243633, 'is': 1.214904, 'tm': 0.016871, 'rp': 0.037145, 'ph': 0.0321604, 'im': 0.3939763, 'rq': 0.0004793, 'gq': 0.0, 'tj': 0.0008148, 'nz': 0.0014379, 'zf': 0.0, 'cf': 0.0012462, 'sn': 0.0138994, 'nv': 0.0359947, 'sw': 0.0508047, 'cm': 0.0100651, 'le': 0.8587437, 'ow': 0.5455277, 'sh': 0.4811591, 'if': 0.1947355, 'rs': 0.3518946, 'hy': 0.0433757, 'fk': 9.59e-05, 'dp': 0.0012941, 'ab': 0.2164952, 'jn': 0.0, 'wk': 0.0009586, 'ru': 0.1182408, 'mb': 0.0555976, 'wh': 0.6630976, 'vo': 0.0497024, 'qe': 0.0, 'fl': 0.051284, 'mm': 0.0417941, 'ed': 1.3248052, 'nm': 0.0046491, 'xn': 0.0, 'nq': 0.010832, 'at': 1.5224164, 'ky': 0.0069018, 'au': 0.0806645, 'lg': 0.0022047, 'gi': 0.1091822, 'mi': 0.2701757, 'ec': 0.2608296, 'jw': 0.0, 'ap': 0.1791106, 'lb': 0.0041219, 'fy': 0.0044574, 'gs': 0.0416982, 'xm': 0.0001438, 'gb': 0.0011503, 'lo': 0.4294917, 'zx': 0.0, 'qu': 0.1142627, 'hm': 0.0100651, 'pw': 0.0016296, 'ah': 0.0156728, 'yu': 0.0, 'zm': 0.0, 'px': 0.0, 'ri': 0.543323, 'll': 0.7411739, 'sc': 0.1055876, 'sl': 0.054016, 'jp': 0.0002876, 'vn': 0.0, 'vm': 0.0, 'ws': 0.0362822, 'uw': 0.0, 'bi': 0.0537763, 'it': 1.2222851, 'ff': 0.1097574, 'gh': 0.3432195, 'sz': 0.0, 'vy': 0.008771, 'zz': 0.0056077, 'bb': 0.0178296, 'dg': 0.0395414, 'jc': 0.0, 'bl': 0.2468343, 'up': 0.2493745, 'fz': 0.0, 'fs': 0.0049367, 'tr': 0.3306142, 'oo': 0.4246988, 'kf': 0.0055118, 'qb': 0.0, 'pu': 0.0705515, 'an': 2.0177146, 'ok': 0.1354953, 'rh': 0.0187402, 'se': 0.8834271, 'hv': 0.0, 'ic': 0.4850414, 'lf': 0.0901544, 'mp': 0.1502574, 'ii': 0.0, 'zb': 0.0, 'dw': 0.0088669, 'ze': 0.0351319, 'eh': 0.0273675, 'ak': 0.1435952, 'yp': 0.0070456, 'hi': 1.2958561, 'za': 0.003355, 'fa': 0.2160639, 'zr': 0.0005751, 'gc': 0.0022527, 'bv': 0.0065663, 'he': 3.6071357, 'op': 0.1350639, 'lz': 4.79e-05, 'nh': 0.0082438, 'kx': 0.0, 'hp': 0.0002876, 'dz': 0.0, 'yj': 0.0001438, 'nt': 0.7810987, 'ub': 0.060726, 'yc': 0.0098734, 'lx': 0.0, 'ki': 0.095187, 'mk': 0.0, 'af': 0.0785556, 'jj': 0.0, 'ch': 0.5389135, 'ya': 0.0155769, 'hc': 0.0014379, 'qk': 0.0, 'qg': 0.0, 'kw': 0.0032592, 'gl': 0.0934615, 'ea': 0.7690206, 'iu': 0.0064225, 'py': 0.010113, 'gx': 0.0, 'il': 0.3936408, 'cx': 0.0, 'ay': 0.3080875, 'vc': 0.0, 'yz': 0.0007189, 'un': 0.3875538, 'br': 0.1393775, 'ga': 0.1517432, 'ty': 0.1117704, 'de': 0.6216869, 'bo': 0.1853414, 'fg': 0.0009107, 'bt': 0.0278467, 'nd': 1.4753501, 'mv': 0.0, 'gz': 0.0002396, 'ny': 0.1018491, 'bz': 0.0, 'wt': 0.0004793, 'zl': 0.0046491, 'je': 0.0247793, 'rt': 0.2767899, 'yv': 0.000671, 'vl': 0.0, 'so': 0.495442, 'ml': 0.004745, 'cr': 0.1618562, 've': 1.0398673, 'st': 1.0042082, 'qd': 0.0, 'qt': 0.0, 'yb': 0.0048408, 'cz': 0.0, 'pg': 4.79e-05, 'gr': 0.1434035, 'fo': 0.4685538, 'pj': 0.0, 'ni': 0.2512917, 'we': 0.5938881, 'ti': 0.6167982, 'li': 0.4602621, 'js': 0.0, 'ma': 0.5654183, 'xj': 0.0, 'gy': 0.0086751, 'cq': 0.0044095, 'uv': 0.0039302, 'pn': 0.0007189, 'yf': 0.0028278, 'fb': 0.0003834, 'fc': 0.0021089, 'rr': 0.1646361, 'zs': 0.0, 'df': 0.0115509, 'tt': 0.2426165, 'vi': 0.1706751, 'zk': 0.0, 'my': 0.2925106, 'xo': 0.0014858, 'el': 0.5384822, 'bq': 0.0, 'zt': 0.0, 'jx': 0.0, 'hu': 0.085026, 'gu': 0.0667172, 'en': 1.2625933, 'yq': 0.0, 'gn': 0.0320166, 'mr': 0.0999319, 'nw': 0.0081, 'no': 0.6392289, 'wd': 0.0053201, 'wx': 0.0, 'ln': 0.0033071, 'od': 0.1563444, 'pa': 0.234181, 'ra': 0.4437745, 'yi': 0.0260734, 'kz': 0.0, 'qp': 0.0, 'vg': 0.0, 'sf': 0.0103047, 'sx': 0.0, 'zp': 0.0, 'qs': 0.0, 'mf': 0.0036426, 'yy': 0.0, 'md': 0.0004314, 'cv': 0.0, 'rn': 0.1667929, 'sr': 0.0016296, 'hw': 0.0023006, 'dc': 0.0017734, 'wy': 0.0023485, 'ou': 1.7362276, 'oe': 0.0247314, 'rb': 0.0148101, 'vx': 0.0, 'al': 0.6719644, 'sp': 0.1451769, 'nf': 0.0441905, 'ku': 0.0012462, 'uo': 0.0038822, 'ld': 0.4214875, 'xb': 0.0002396, 'kj': 0.0, 'tf': 0.0070456, 'jh': 0.0001438, 'mw': 0.0001917, 'tk': 0.0001917, 'qz': 0.0, 'bx': 0.0, 'ps': 0.0514757, 'sb': 0.0118864, 'fu': 0.078316, 'nl': 0.099884, 'wf': 0.0014379, 'io': 0.3505526, 'eo': 0.0325438, 'kv': 0.0, 'rd': 0.2515793, 'qv': 0.0, 'lt': 0.0698805, 'tg': 0.0015817, 'xg': 0.0, 'rl': 0.101945, 'wb': 0.0011024}
 
#Словарь биграмм с частотами
bigramms = {'bf': 0, 'yh': 0, 'fq': 0, 'dg': 0, 'cv': 0, 'kp': 0, 'pk': 0, 'dl': 0, 'zv': 0, 'cx': 0, 'ry': 0, 'gv': 0, 'yw': 0, 'ar': 0, 'jv': 0, 'mr': 0, 'fd': 0, 'bz': 0, 'xf': 0, 'ny': 0, 'pa': 0, 'po': 0, 'lf': 0, 'll': 0, 'nb': 0, 'jq': 0, 'io': 0, 'ao': 0, 'zc': 0, 'xu': 0, 'th': 0, 'cu': 0, 'cc': 0, 'fy': 0, 'bi': 0, 'fc': 0, 'ad': 0, 'rv': 0, 'ms': 0, 'pt': 0, 'xd': 0, 'hq': 0, 'un': 0, 'gh': 0, 'qa': 0, 'fx': 0, 'kr': 0, 'zk': 0, 'nm': 0, 'fv': 0, 'vt': 0, 'wy': 0, 'zs': 0, 'ku': 0, 'eh': 0, 'or': 0, 'ae': 0, 'vc': 0, 'bh': 0, 'xx': 0, 'ff': 0, 'dx': 0, 'bc': 0, 'ls': 0, 'ai': 0, 'tc': 0, 'ze': 0, 'eq': 0, 'aa': 0, 'si': 0, 'fn': 0, 'bv': 0, 'ro': 0, 'yc': 0, 'tx': 0, 'dj': 0, 'hu': 0, 'dp': 0, 'cp': 0, 'sy': 0, 'zr': 0, 'vf': 0, 'dk': 0, 'tk': 0, 'zi': 0, 'hi': 0, 'rm': 0, 'ac': 0, 'ax': 0, 'vm': 0, 'fe': 0, 'uk': 0, 'ah': 0, 'wa': 0, 'ak': 0, 're': 0, 'nr': 0, 'uf': 0, 'hj': 0, 'pw': 0, 'ni': 0, 'ul': 0, 'kx': 0, 'ej': 0, 'sn': 0, 'pc': 0, 'jh': 0, 'fb': 0, 'dw': 0, 'qw': 0, 'aq': 0, 'ba': 0, 'nf': 0, 'jx': 0, 'ha': 0, 'oo': 0, 'tg': 0, 'uu': 0, 'rl': 0, 'ot': 0, 'os': 0, 'nx': 0, 'ko': 0, 'ig': 0, 'lh': 0, 'is': 0, 'ta': 0, 'sg': 0, 'hl': 0, 'fm': 0, 'wl': 0, 'ik': 0, 'oc': 0, 'qh': 0, 'uy': 0, 'bt': 0, 'yo': 0, 'er': 0, 'px': 0, 'bw': 0, 'qz': 0, 'rz': 0, 'ml': 0, 'hn': 0, 'nu': 0, 'ss': 0, 'ca': 0, 'zf': 0, 'xq': 0, 'gm': 0, 'sq': 0, 'py': 0, 'ne': 0, 'fl': 0, 'dr': 0, 'kh': 0, 'es': 0, 'gd': 0, 'bx': 0, 'mv': 0, 'xo': 0, 'dh': 0, 'so': 0, 'ty': 0, 'uj': 0, 'mf': 0, 'ki': 0, 'se': 0, 'tz': 0, 'nw': 0, 'jo': 0, 'mh': 0, 'dt': 0, 'mi': 0, 'pq': 0, 'lj': 0, 'ri': 0, 'qf': 0, 'km': 0, 'hd': 0, 'iv': 0, 'kt': 0, 'gx': 0, 'zu': 0, 'in': 0, 'fk': 0, 'mk': 0, 'kc': 0, 'rc': 0, 'ew': 0, 'ux': 0, 'sl': 0, 'vy': 0, 'ti': 0, 'kq': 0, 'xj': 0, 'xp': 0, 'uc': 0, 'qu': 0, 'rg': 0, 'aw': 0, 'ym': 0, 'cr': 0, 'di': 0, 'rj': 0, 'gu': 0, 'pn': 0, 'ru': 0, 'gs': 0, 'wx': 0, 'sk': 0, 'pd': 0, 'xz': 0, 'ud': 0, 'ev': 0, 'lo': 0, 'ov': 0, 'xs': 0, 'be': 0, 'yu': 0, 'yt': 0, 'ec': 0, 'bn': 0, 'js': 0, 'gr': 0, 'vb': 0, 'hh': 0, 'el': 0, 'mp': 0, 'wn': 0, 'kl': 0, 'qj': 0, 'ja': 0, 'om': 0, 'us': 0, 'cg': 0, 'cj': 0, 'ye': 0, 'wk': 0, 'oq': 0, 'dc': 0, 'dm': 0, 'up': 0, 'fs': 0, 'yq': 0, 'sf': 0, 'gn': 0, 'if': 0, 'ou': 0, 'qn': 0, 'lx': 0, 'rq': 0, 'fu': 0, 'rk': 0, 'tr': 0, 'nq': 0, 'ur': 0, 'pm': 0, 'rw': 0, 'cn': 0, 'ge': 0, 'um': 0, 'gq': 0, 'tn': 0, 'va': 0, 'qt': 0, 'wf': 0, 'wu': 0, 'le': 0, 'tm': 0, 'rr': 0, 'iu': 0, 'vz': 0, 'ei': 0, 'id': 0, 'mu': 0, 'vo': 0, 'zg': 0, 'tp': 0, 'mb': 0, 'cy': 0, 'zx': 0, 've': 0, 'he': 0, 'lc': 0, 'qi': 0, 'ol': 0, 'ub': 0, 'zz': 0, 'ip': 0, 'sv': 0, 'oj': 0, 'bu': 0, 'vw': 0, 'ef': 0, 'fh': 0, 'sm': 0, 'al': 0, 'uw': 0, 'xb': 0, 'hp': 0, 'af': 0, 'pf': 0, 'wc': 0, 'zo': 0, 'ts': 0, 'qy': 0, 'nc': 0, 'lk': 0, 'dv': 0, 'vs': 0, 'jr': 0, 'hx': 0, 'co': 0, 'ij': 0, 'pi': 0, 'pu': 0, 'ix': 0, 'jg': 0, 'zt': 0, 'hm': 0, 'hz': 0, 'gl': 0, 'jw': 0, 'jz': 0, 'ui': 0, 'mz': 0, 'ma': 0, 'dy': 0, 'zj': 0, 'yl': 0, 'za': 0, 'wj': 0, 'dq': 0, 'hr': 0, 'xn': 0, 'ay': 0, 'zh': 0, 'sr': 0, 'lg': 0, 'vk': 0, 'yk': 0, 'tb': 0, 'kb': 0, 'hs': 0, 'rd': 0, 'gk': 0, 'vi': 0, 'kk': 0, 'fp': 0, 'qe': 0, 'kv': 0, 'hw': 0, 'dz': 0, 'yj': 0, 'su': 0, 'tv': 0, 'wr': 0, 'gz': 0, 'wd': 0, 'wq': 0, 'do': 0, 'yg': 0, 'nn': 0, 'ct': 0, 'pp': 0, 'iw': 0, 'hy': 0, 'ra': 0, 'xm': 0, 'bq': 0, 'pj': 0, 'mn': 0, 'bs': 0, 'vd': 0, 'qo': 0, 'wb': 0, 'tt': 0, 'rp': 0, 'sb': 0, 'gb': 0, 'ph': 0, 'wt': 0, 'ww': 0, 'wg': 0, 'dn': 0, 'nk': 0, 'yz': 0, 'we': 0, 'df': 0, 'ek': 0, 'ag': 0, 'on': 0, 'zq': 0, 'sj': 0, 'pe': 0, 'bd': 0, 'lp': 0, 'qv': 0, 'db': 0, 'jf': 0, 'md': 0, 'uv': 0, 'sc': 0, 'xa': 0, 'my': 0, 'ga': 0, 'jl': 0, 'as': 0, 'gp': 0, 'vx': 0, 'gw': 0, 'mx': 0, 'nz': 0, 'ep': 0, 'ug': 0, 'fa': 0, 'xg': 0, 'tu': 0, 'xw': 0, 'kz': 0, 'mo': 0, 'cm': 0, 'mc': 0, 'jj': 0, 'nt': 0, 'em': 0, 'rn': 0, 'ie': 0, 'mg': 0, 'jk': 0, 'xr': 0, 'wv': 0, 'jt': 0, 'ap': 0, 'en': 0, 'wz': 0, 'bp': 0, 'ke': 0, 'de': 0, 'zw': 0, 'ez': 0, 'qs': 0, 'eg': 0, 'na': 0, 'st': 0, 'oh': 0, 'oi': 0, 'ut': 0, 'ck': 0, 'ho': 0, 'yr': 0, 'wo': 0, 'yy': 0, 'ht': 0, 'eu': 0, 'tq': 0, 'yx': 0, 'ds': 0, 'op': 0, 'ly': 0, 'sd': 0, 'jb': 0, 'jd': 0, 'gt': 0, 'pg': 0, 'ey': 0, 'pl': 0, 'vq': 0, 'xl': 0, 'nd': 0, 'cb': 0, 'xy': 0, 'sw': 0, 'ee': 0, 'rx': 0, 'np': 0, 'wh': 0, 'fj': 0, 'xc': 0, 'bj': 0, 'iq': 0, 'ia': 0, 'yb': 0, 'cq': 0, 'eb': 0, 'hv': 0, 'nl': 0, 'ir': 0, 'yf': 0, 'eo': 0, 'fr': 0, 'qd': 0, 'nv': 0, 'jp': 0, 'xe': 0, 'ys': 0, 'jc': 0, 'zy': 0, 'fi': 0, 'tw': 0, 'qc': 0, 'lv': 0, 'gy': 0, 'du': 0, 'vn': 0, 'cd': 0, 'vg': 0, 'nh': 0, 'nj': 0, 'at': 0, 'av': 0, 'hg': 0, 'ql': 0, 'gf': 0, 'da': 0, 'kf': 0, 'kd': 0, 'sh': 0, 'pz': 0, 'ox': 0, 'kw': 0, 'il': 0, 'vl': 0, 'gg': 0, 'qr': 0, 'uo': 0, 'iz': 0, 'tl': 0, 'ex': 0, 'gj': 0, 'qx': 0, 'ab': 0, 'oa': 0, 'mq': 0, 'qq': 0, 'ws': 0, 'lm': 0, 'ob': 0, 'te': 0, 'pb': 0, 'ow': 0, 'xi': 0, 'xt': 0, 'mt': 0, 'uh': 0, 'oy': 0, 'an': 0, 'xv': 0, 'et': 0, 'to': 0, 'hf': 0, 'ld': 0, 'ci': 0, 'ns': 0, 'hc': 0, 'lr': 0, 'bo': 0, 'az': 0, 'ue': 0, 'ih': 0, 'bb': 0, 'sz': 0, 'mm': 0, 'rh': 0, 'lu': 0, 'tf': 0, 'ic': 0, 'oe': 0, 'je': 0, 'ln': 0, 'yp': 0, 'vv': 0, 'it': 0, 'cw': 0, 'iy': 0, 'ib': 0, 'me': 0, 'ft': 0, 'vj': 0, 'lb': 0, 'zl': 0, 'zp': 0, 'dd': 0, 'uz': 0, 'ya': 0, 'br': 0, 'sa': 0, 'lw': 0, 'ng': 0, 'rt': 0, 'ji': 0, 'rb': 0, 'of': 0, 'vu': 0, 'bm': 0, 'rf': 0, 'bl': 0, 'qk': 0, 'la': 0, 'ce': 0, 'aj': 0, 'am': 0, 'fz': 0, 'rs': 0, 'ea': 0, 'yn': 0, 'fg': 0, 'oz': 0, 'ua': 0, 'sx': 0, 'gc': 0, 'ju': 0, 'zb': 0, 'yi': 0, 'bg': 0, 'wm': 0, 'im': 0, 'au': 0, 'qb': 0, 'fw': 0, 'ka': 0, 'td': 0, 'tj': 0, 'ky': 0, 'lq': 0, 'kg': 0, 'jy': 0, 'hb': 0, 'cf': 0, 'by': 0, 'lz': 0, 'fo': 0, 'ks': 0, 'ch': 0, 'ok': 0, 'jm': 0, 'vp': 0, 'og': 0, 'hk': 0, 'zn': 0, 'cl': 0, 'mw': 0, 'od': 0, 'kj': 0, 'wp': 0, 'sp': 0, 'qg': 0, 'ps': 0, 'pr': 0, 'qp': 0, 'vr': 0, 'gi': 0, 'pv': 0, 'kn': 0, 'bk': 0, 'vh': 0, 'cz': 0, 'zm': 0, 'no': 0, 'cs': 0, 'xh': 0, 'go': 0, 'yv': 0, 'yd': 0, 'ii': 0, 'li': 0, 'mj': 0, 'jn': 0, 'qm': 0, 'xk': 0, 'ed': 0, 'zd': 0, 'wi': 0, 'uq': 0, 'lt': 0}
alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']
 
#Функция шифрования по ключу
#text - list символов текста
#key - list с перестановкой на алфавите
def encrypt(text, key):
    result = []
    for i in range(len(text)):
        result.append(key[alphabet.index(text[i])])
 
    return result
 
#Функция дешифрования по ключу
#code - list символов шифра
#key - list с перестановкой на алфавите
def decrypt(code, key):
    result = []
    for i in range(len(code)):
        if isletter(code[i]):
            result.append(alphabet[key.index(code[i])])
        else:
            result.append(code[i])
 
    return result

def isletter(c):
    return not (c.isspace() or c in ['(', ')', '?'])

#Функция взламывает шифр замены
#code - list символов шифра
def hack(code):
    #С помощью частотного анализа найти первый ключ
    #ПЕРВЫЙ ЭТАП. Частотный анализ символов шифротекста
    freqs = [0 for i in range(26)]
    for i in range(len(code)):
        if isletter(code[i]):
            freqs[ alphabet.index(code[i]) ] += 1
    
    for i in range(len(freqs)):
        freqs[i] = (freqs[i] / len(code)) * 100
 
    #Отсортировать полученные частоты
    freqsSorted = sorted(freqs)
 
    #Задача: выстроить символы алфавита по частотам в шифре
    key = []
    for i in range(len(freqsSorted)):
        symb = alphabet[freqs.index(freqsSorted[i])]
        if not(symb in key):
            key.append(symb)
        #Если попались символы с одинаковыми частотами
        else:
            #Взять другой(следующий) символ с такой частотой
            curFreq = freqsSorted[i]
            for j in range(len(freqs)):
                if freqs[j] == curFreq:
                    s = alphabet[j]
                    if not(s in key):
                        key.append(s)
                        break
 
    #Развернуть ключ, чтобы получилось в порядке убывания частот
    key = list(reversed(key))
    #Первичный ключ
    print('First key: ', key)
 
    #Выполняем дешифровку этим ключом
    text = decrypt(code, key)
 
    #ВТОРОЙ ЭТАП. Нахождение ключа частотным анализом биграмм
    #Посчитать частоту биграмм в полученном тексте
    for i in range(len(text) - 1):
        if isletter(text[i]) and isletter(text[i + 1]):
            bigramms[text[i] + text[i + 1]] += 1
 
    for k, v in bigramms.items():
        bigramms[k] = (bigramms[k] / (len(text)-1)) * 100
 
    #Посчитать рейтинг биграмм для этого ключа
    bigrammsRating = 0
    for k, v in bigramms.items():
        bigrammsRating += (bigramms[k] - bigrammsFreqsStandart[k]) ** 2
 
    #Выполняем перестановки на ключе до тех пор, пока рейтинг улучшается
    prevBigrammsRating = bigrammsRating
    #Величина, через которую брать символы(соседи, через один, через два и так далее)
    step = 1
    while True:
        findGoodBigrammFlag = False
        for i in range(0, 26):
            if i + step >= 26:
                break
 
            #Меняем местами два символа в ключе
            key[i], key[ i + step ] = key[i + step], key[i]
 
            #Копируем частоты биграмм
            copyBigrammsFreq = {k:v for k, v in bigramms.items()}
 
            #Меняем частоты биграмм в словаре, чтобы не расшифровывать текст по новой
            for sym in alphabet:
                if sym == alphabet[i] or sym == alphabet[i + step]:
                    continue
 
                bigramms[sym + alphabet[i]], bigramms[sym + alphabet[i + step]] = bigramms[sym + alphabet[i + step]], bigramms[sym + alphabet[i]]
                bigramms[alphabet[i] + sym], bigramms[alphabet[i + step] + sym] = bigramms[alphabet[i + step] + sym], bigramms[alphabet[i] + sym]
 
            bigramms[alphabet[i] + alphabet[i + step]], bigramms[alphabet[i + step] + alphabet[i]] = bigramms[alphabet[i + step] + alphabet[i]], bigramms[alphabet[i] + alphabet[i + step]]
            bigramms[alphabet[i] + alphabet[i]], bigramms[alphabet[i + step] + alphabet[i + step]] = bigramms[alphabet[i + step] + alphabet[i + step]], bigramms[alphabet[i] + alphabet[i]]
 
            #Считаем новый рейтинг биграмм
            bigrammsRating = 0
            for k, v in bigramms.items():
                bigrammsRating += (bigramms[k] - bigrammsFreqsStandart[k])**2    
 
            #Если рейтинг улучшился - оставляем перестановку в ключе
            #и ставим step в 1
            if bigrammsRating < prevBigrammsRating:
                findGoodBigrammFlag = True
                prevBigrammsRating = bigrammsRating
                step = 1
                break
            #Иначе - меняем символы обратно, возвращаем частоты
            else:
                key[i], key[i + step] = key[i + step], key[i]
                for k, v in copyBigrammsFreq.items():
                    bigramms[k] = v
        #Если за весь проход улучшающая перестановка не нашлась,
        #увеличиваем расстояние и идем еще раз
        if findGoodBigrammFlag == False:
            step += 1
            if step >= 25:
                break
 
    print('Final key: ', key)
 
    return key


code = []
f = open(""text.txt"", ""r"")
for c in f.read():
    code.append(c.lower())

print(''.join(decrypt(code, hack(code))))
"
SB3YTFxm,target correlation significance,Nanobelka,Python,Friday 3rd of November 2023 05:52:07 PM CDT,"def target_correlation_significance(df, target_name, interval_features):
    '''
    df: датафрейм с признаками и целевой переменной
    target_name: название целевой переменной
    interval_features: список интервальных признаков (необходимо для быстрой и точной работы Phik)
    
    вычисляет:
        корреляцию признаков по отношению к целевому признаку,
        нормированную статистическую значимость признаков,
        произведение корреляции и статистической значимости,
        гармоническое среднее корреляции и статистической значимости,
    
    сортирует по гармоническому среднему
    '''
    
    # correlation to target
    df_1 = (df.phik_matrix(interval_cols=interval_features)
             [target_name]
             .to_frame()
             .drop(target_name, axis=0)  # correlation target to self
             .rename(columns={target_name: 'correlation'})
           )
    
    # significance of the correlations
    df_2 = (df.significance_matrix(interval_cols=interval_features, nsim=50)
            [target_name]
            .to_frame()
            .drop(target_name, axis=0)  # correlation to self
            .assign(significance = lambda x: x[target_name] / x[target_name].max())
            .drop(target_name, axis=1)
           )
    
    # joined
    df_joined = (df_1.join(df_2, how='outer')
                 .assign(product = lambda x: x.correlation * x.significance)
                 .assign(harmonic_mean = lambda x: 2 * x.correlation * x.significance / (x.correlation + x.significance))
                 .sort_values('harmonic_mean', ascending=False)
                )
    
    display(df_joined)
    
    fig, ax = plt.subplots(figsize=(15, df_joined.shape[0]/3), dpi=PLOT_DPI)
    sns.barplot(x=df_joined.harmonic_mean, y=df_joined.index, color='steelblue')
    ax.set_xlabel('harmonic mean of target correlation and significance')
    plt.show()"
UdM3HSkV,mutual info,Nanobelka,Python,Friday 3rd of November 2023 05:49:20 PM CDT,"def mutual_info(df, target_name, task=None, min_neighbors=1, max_neighbors=7):
    '''
    df: датафрейм с признаками и целевой переменной
    target_name: название целевой переменной
    task: выбор задачи classification или regression
    min_neighbors, max_neighbors: диапазон k для k-neighbors (итоговый результат усредняется)
    '''
    
    if max_neighbors < min_neighbors:
        print(""Parameter 'max_neighbors' can't be less then parameter 'min_neighbors'."")
        return
    
    X = df.copy()
    Y = X.pop(target_name)
    
    df_mutual_info = pd.DataFrame(index=X.columns)
    
    # Label encoding for categoricals
    for column in X.select_dtypes(exclude='number'):
        X[column], _ = X[column].factorize()

    for k in range(min_neighbors, max_neighbors+1, 2):
        if task=='classification':
            df_mutual_info[f'k_{k}'] = mutual_info_classif(X, Y, n_neighbors=k, random_state=RS)
        elif task=='regression':
            df_mutual_info[f'k_{k}'] = mutual_info_regression(X, Y, n_neighbors=k, random_state=RS)
        else:
            print('Wrong parameter ""task"". Available task=""classification"" or task=""regression"".')
            return
    
    df_mutual_info['average'] = df_mutual_info.mean(axis=1)
    df_mutual_info = df_mutual_info.sort_values('average', ascending=False)
    
    display(df_mutual_info)
    
    fig, ax = plt.subplots(figsize=(15, df_mutual_info.shape[0]/3), dpi=PLOT_DPI)
    sns.barplot(x=df_mutual_info.average, y=df_mutual_info.index, color='steelblue')
    ax.set_xlabel(f'mutual_info (average across from {min_neighbors} to {max_neighbors} neighbours)')
    plt.show()"
y0X88GNp,02. MuOnline,Spocoman,Python,Friday 3rd of November 2023 05:39:25 PM CDT,"health = 100
bitcoins = 0
rooms = input().split('|')

for i in range(len(rooms)):
    tokens = rooms[i].split(' ')
    command = tokens[0]
    amount = int(tokens[1])
    if command == ""potion"":
        if health + amount > 100:
            amount = 100 - health

        health += amount
        print(f""You healed for {amount} hp.\nCurrent health: {health} hp."")
    elif command == ""chest"":
        bitcoins += amount
        print(f""You found {amount} bitcoins."")
    else:
        health -= amount
        if health <= 0:
            print(f""You died! Killed by {command}.\nBest room: {i + 1}"")
            exit(0)
        print(f""You slayed {command}."")

print(f""You've made it!\nBitcoins: {bitcoins}\nHealth: {health}"")
"
YP2jnmex,02. MuOnline,Spocoman,JavaScript,Friday 3rd of November 2023 05:20:10 PM CDT,"function muOnline(input) {
    let health = 100, bitcoins = 0;
    var rooms = input.split('|');

    for (let i = 0; i < rooms.length; i++) {
        var tokens = rooms[i].split(' ');
        let command = tokens[0];
        let amount = Number(tokens[1]);

        if (command == ""potion"") {
            if (health + amount > 100) {
                amount = 100 - health;
            }
            health += amount;
            console.log(`You healed for ${amount} hp.\nCurrent health: ${health} hp.`);
        } else if (command == ""chest"") {
            bitcoins += amount;
            console.log(`You found ${amount} bitcoins.`);
        } else {
            health -= amount;

            if (health <= 0) {
                console.log(`You died! Killed by ${command}.\nBest room: ${i + 1}`);
                break;
            }
            console.log(`You slayed ${command}.`);
        }
    }

    if (health > 0) {
        console.log(`You've made it!\nBitcoins: ${bitcoins}\nHealth: ${health}`);
    }
    return;
}"
b6QeJ93v,Untitled,Nanoic,Java,Friday 3rd of November 2023 05:14:52 PM CDT,"package econogame;


public class CurrencyType {

    private int rel = 0;
    private int sol = 0;
    private int zlar = 0;
    private int value;
    public CurrencyType() {

        rel = 1;
        sol = rel * 100;
        zlar = sol * 100;
        zlar = rel * 1000;

    }

    public int getRelValue() {
        
        rel = 1;
        return value;
    }
    
    public void setRelValue(int newValue){
        
        this.value = newValue;
    }
    
    public int getSolValue() {
        
        sol = 100;
        return value;
    }
    
    public void setSolValue(int newValue){
       this.value = newValue;
    }
    
    public int getZlarValue(){
        
        zlar = 1000;
        return value;
    }
    
    public void setZlarValue(int newValue){
        this.value = newValue;
    }
}
"
kngDqLjN,02. MuOnline,Spocoman,C++,Friday 3rd of November 2023 05:03:25 PM CDT,"#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<string> getVectorByString(string s, char sep) {
    vector<string> v;
    int index = 0;

    for (int i = 0; i < s.length(); i++) {
        if (s[i] == sep) {
            v.push_back(s.substr(index, i - index));
            index = i + 1;
        }
    }
    v.push_back(s.substr(index, s.length() - index));
    return v;
}

int main() {
    int health = 100, bitcoins = 0;
    string str;
    getline(cin, str);
    vector<string> rooms = getVectorByString(str, '|');

    for (int i = 0; i < rooms.size(); i++) {
        vector<string> tokens = getVectorByString(rooms[i], ' ');
        string command = tokens[0];
        int amount = stoi(tokens[1]);

        if (command == ""potion"") {
            if (health + amount > 100) {
                amount = 100 - health;
            }
            health += amount;

            cout << ""You healed for "" << amount << "" hp.\nCurrent health: "" << health << "" hp.\n"";
        }
        else if (command == ""chest"") {
            bitcoins += amount;
            cout << ""You found "" << amount << "" bitcoins.\n"";
        }
        else {
            health -= amount;

            if (health <= 0) {
                cout << ""You died! Killed by "" << command << "".\nBest room: "" << i + 1 << endl;
                return 0;
            }
            cout << ""You slayed "" << command << "".\n"";
        }
    }

    cout << ""You've made it!\nBitcoins: "" << bitcoins << ""\nHealth: "" << health << endl;
    return 0;
}"
