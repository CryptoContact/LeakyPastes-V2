id,title,username,language,date,content
9vjpBFg8,Untitled,Sreekar_0125,C++,Sunday 3rd of March 2024 12:04:18 AM CDT,"//Author: D. Nisritha Reddy
#include<bits/stdc++.h>
#define int long long 
#define pb push_back
#define ndl ""\n""
#define yes cout<<""YES\n""
#define no cout<<""NO\n""
#define mod (int)(1e9 + 7)
#define F first
#define S second
#define vi vector<int>
#define vc vector<char>
#define vpi vector<pair<int,int>>
#define pi pair<int,int>
#define mi map<int, int>
#define miv map<int,vector<int>>
using namespace std;

template<class T>
void inp(vector<T>&a){ for(auto &x : a)cin>>x; }

template<class T>
void print(vector<T>&a){
    for(auto &x: a)cout<<x<<"" "";
    cout<<ndl;
}

template<class T>
void print(T x){cout<<x<<"" "";}

template<class T>
void println(T x){ cout<<x<<""\n"";}

template<class T>
T maxEle(vector<T>&a){
    T maxi = LLONG_MIN;
    for(auto x : a)
        if(x>maxi)maxi = x;
    return maxi;
}

template<class T>
T minEle(vector<T>&a){
    T mini = LLONG_MAX;
    for(auto x: a)
        if(x<mini) mini = x;
    return mini;
}

template<class T>
void sortAll(vector<T>&a){ sort(a.begin(), a.end());}

template<class T>
T sumAll(vector<T>&a){
    T sum = 0;
    for(auto x : a) sum +=x;
    return sum;
}

template<class T>
void revAll(vector<T>&a){reverse(a.begin(),a.end());}



///////////////////////////////////////////////////////////////////////////////////////////////////




void solve(){
    
    vi a(3); inp(a);
    
    sortAll(a);
    
    if(a[0] + a[1] < a[2]){
        
        a[2] = a[2] - (a[0] + a[1]);
        
        cout<<(a[0] + a[1]) + a[2]<<""\n"";
    
    }
    
    else{
        
        cout<<(a[0] + a[1] + a[2] + 1)/2<<""\n"";
    }
    
    
}



///////////////////////////////////////////////////////////////////////////////////////////////////



signed main(){
    
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
 
    int t = 1; //cin>>t;
    while(t--){
        solve();
    }
}"
4ttjzrVS,Untitled,Sreekar_0125,C++,Sunday 3rd of March 2024 12:03:27 AM CDT,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>     
using namespace std;
using namespace __gnu_pbds;
template <class T>
using pbds =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define endl '\n'

const int N = 2e5;
const int MOD = 1e9 + 7;


#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x)              \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif


template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}
template <class T>
istream &operator>>(istream &is, vector<T> &a)
{
    for (auto &x : a)
        is >> x;
    return is;
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a)
{
    for (const auto &x : a)
        os << x << ' ';
    return os;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b)
{
    int ans = 1;
    a %= MOD;
    while(b)
    {
        if(b & 1)
            ans = ((ans % MOD) * (a % MOD)) % MOD;
        
        a = ((a % MOD) * (a % MOD)) % MOD;
        b >>= 1;
    }
    return ans;
}

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

bool cmp(pii &p1, pii &p2)
{
    if(p1.F == p2.F)
    {
        return p1.S > p2.S;
    }
    return p1.F > p2.F;
}

void solve()
{
    int n, k;
    cin >> n >> k;

    vpi points;
    f(i, 0, n)
    {
        int a, b;
        cin >> a >> b;
        points.pb({b, a});
    }
    sort(all(points), cmp);
    int ans = 0;
    int i = 0;
    debug(points);
    while(k > 0)
    {
        if(points[i].S <= k)
        {
            ans += points[i].F * points[i].S;
            k -= points[i].S; 
            i++;
        }
        else 
        {
            ans += k * points[i].F;
            break;
        }
    }

    println(ans);
}

signed main()
{
    // init_code();
    fast();
    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
"
ZQZrr2R6,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Saturday 2nd of March 2024 11:48:21 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_673655.pdf

Working as of:
03 March 2024"
s9rrfszQ,ExileClient_object_player_event_onHandleDamage,Irkutsk86,C,Saturday 2nd of March 2024 11:27:02 PM CDT,"/**
 * Exile Mod
 * www.exilemod.com
 * Â© 2015 Exile Mod Team
 *
 * This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License.
 * To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/.
 */
 
private[""_unit"",""_selectionName"",""_amountOfDamage"",""_sourceOfDamage"",""_typeOfProjectile""];
_unit             = _this select 0;
_selectionName    = _this select 1;
_amountOfDamage   = _this select 2;
_sourceOfDamage   = _this select 3;
_typeOfProjectile = _this select 4;


	if (isPlayer _sourceOfDamage && !(_sourceOfDamage isEqualTo player)) exitWith
	{
		_amountOfDamage = damage _unit;
		_amountOfDamage
	};"
5yA8fdSS,588. Design In-Memory File System,bennyfromtheblock,Python,Saturday 2nd of March 2024 11:05:20 PM CDT,"# Annoying ass questions. Just use a Trie
# TC: O(N) where N is number of nodes in trie, that's the worst case scenario
# SC: O(N)

class TrieNode:
    def __init__(self):
        self.content = """"
        self.children = defaultdict(TrieNode)
        self.isfile = False

class FileSystem:

    def __init__(self):
        self.head = TrieNode()

    def ls(self, path: str) -> List[str]:
        path_list = [p for p in path.split('/') if p]
        node = self.head
        for p in path_list:
            if p not in node.children:
                return f'{path} does not exist!'
            node = node.children.get(p)

        results = [p] if node.isfile else sorted([k for k, v in node.children.items()])
        return results


    def mkdir(self, path: str) -> None:
        path_list = [p for p in path.split('/') if p]
        node = self.head
        for p in path_list:
            node = node.children[p]


    def addContentToFile(self, filePath: str, content: str) -> None:
        path_list = [p for p in filePath.split('/') if p]
        node = self.head
        for p in path_list:
            node = node.children[p]

        node.content += content
        node.isfile = True


    def readContentFromFile(self, filePath: str) -> str:
        path_list = [p for p in filePath.split('/') if p]
        node = self.head
        for p in path_list:
            if p not in node.children:
                return f'File {filePath} not found!'
            node = node.children[p]

        if not node.isfile:
            raise Error(f'{filePath} is not a file and cannot be read')

        return node.content"
BkAfX3De,Pet Catchers,IWannaDieAsWell,Lua,Saturday 2nd of March 2024 10:48:53 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/IdiotHub/Scripts/main/Loader""))()"
ifCGYKWy,Untitled,reallistic,Python,Saturday 2nd of March 2024 10:25:13 PM CDT,"import sqlite3
import time
from uuid import uuid4


def dbConn() -> sqlite3.Connection:
    # Connect to the database
    conn = sqlite3.connect('fileBlockData_mike_test.db')
    return conn


def recreate_tables(conn, truncate_prod_hash=False, truncate_prod_hash_auto=False):
    cursor = conn.cursor()
    print(""Creating prodHash table"")
    cursor.execute(""""""
    CREATE TABLE IF NOT EXISTS prodHash (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        fullData TEXT
    );
    """""")
    if truncate_prod_hash:
        print(""truncating prodhash table"")
        cursor.execute(""""""
        DELETE FROM prodHash;
        """""")
        cursor.execute(""""""
        DELETE FROM SQLITE_SEQUENCE WHERE name='prodHash';
        """""")

    print(""creating prodHashAuto table"")
    cursor.execute(""""""
    CREATE TABLE IF NOT EXISTS prodHashAuto (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        md5hash TEXT,
        fileInfo TEXT,
        offsetLocation TEXT,
        decay INTEGER
    );
    """""")
    if truncate_prod_hash_auto:
        print(""truncating prodhashAuto table"")
        cursor.execute(""""""
        DELETE FROM prodHashAuto;
        """""")
        cursor.execute(""""""
        DELETE FROM SQLITE_SEQUENCE WHERE name='prodHashAuto';
        """""")
    conn.commit()


def record_sqlite_latency(title, frequency=1_000_000):
    time_func = time.perf_counter_ns
    called = 0
    start_time = time_func()
    total_time = 0
    last_check = 0

    def start():
        nonlocal start_time
        start_time = time_func()

    def stop(final=False, count=1):
        nonlocal called, start_time, total_time, last_check
        if start_time is not None:
            called += count
            total_time += (time_func() - start_time)
            start_time = None
            if called - last_check >= frequency:
                last_check = called
                avg = (total_time / called)
                units = ""nanosecs""
                if avg > 10_000:
                    units = ""ms""
                    avg = avg / 1_000_000
                print(f""sqlite {title} taking {avg:.3f} {units} on avg. ({called:,} total {title})"")

        if final:
            total_time_secs = total_time / 1_000_000_000
            avg = (total_time / called)
            print(
                f""sqlite {title} took {total_time_secs:.3f} secs total and {avg:.3f} nanosecs on avg. ({title} {called:,} total)"")
            return

    return start, stop


def create_prod_hash(conn: sqlite3.Connection):
    cur: sqlite3.Cursor = conn.cursor()
    operation_start, operation_end = record_sqlite_latency(""operation"")
    count = 513_057_999
    print(f""Starting process to insert {count:,} rows into prodHash"")
    for i in range(count):
        operation_start()
        md5 = uuid4().hex
        cur.execute(""INSERT INTO prodHash (fullData) VALUES(?)"", (f""{md5} filename_{i}.txt 0 0"",))
        operation_end()
    conn.commit()
    operation_end(final=True)


def scan_all_rows(conn: sqlite3.Connection):
    og_cur: sqlite3.Cursor = conn.cursor()
    # get functions for logging metrics/progress
    operation_start, operation_end = record_sqlite_latency(""processchunk"")

    print(""starting to iterate everything in prodHash"")
    cur = og_cur.execute(""select * from prodHash"")
    chunk_size = 2000
    while True:
        # log metrics/progress
        operation_start()
        rows = cur.fetchmany(chunk_size)
        if not rows:
            break
        converted = []
        for data in rows:
            parts = data[1].split()
            md5hash = parts[0]
            fileInfo = parts[1]
            offsetLocation = parts[2] + "" "" + parts[3]
            decay = 0
            converted.append((md5hash, fileInfo, offsetLocation, decay))
        if converted:
            conn.executemany(""INSERT INTO prodHashAuto (md5hash, fileInfo, offsetLocation, decay) VALUES(?, ?, ?, ?)"",
                             converted)
        # log metrics/progress
        operation_end(count=len(rows))
    conn.commit()
    conn.close()

    # log final metrics/progress
    operation_end(final=True)


if __name__ == ""__main__"":
    # Call the functions
    conn = dbConn()
    recreate_tables(conn, truncate_prod_hash_auto=True)
    # create_prod_hash(conn)
    scan_all_rows(conn)
"
tjdAmazg,Main,nmh07000,Java,Saturday 2nd of March 2024 10:16:32 PM CDT,"import java.util.*;
public class Main{
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int[] arr = new int[4];
        arr[0] = s.indexOf('N');
        arr[1] = s.indexOf('S');  
        arr[2] = s.indexOf('E');
        arr[3] = s.indexOf('W');
        
        if((arr[0] >= 0 && arr[1] >= 0 && arr[2] >= 0 && arr[3] >= 0) ||
            (arr[0] >= 0 && arr[1] >= 0 && arr[2] == -1 && arr[3] == -1) ||
            (arr[0] == -1 && arr[1] == -1 && arr[2] >= 0 && arr[3] >= 0)) {
            System.out.println(""Yes"");
        }
        else {
            System.out.println(""No"");
        }
    }
}"
Fq7VRcMa,666. Path Sum IV,bennyfromtheblock,Python,Saturday 2nd of March 2024 10:04:08 PM CDT,"# given a node position, its parent's position is (pos + 1) // 2.
#   1 2 3 4
# 1 a
# 2 b c
# 3 d e f g
#
# for example: node f has pos 3, its parent is in (3 + 1) // 2 = 2
# So we can iterate thru the list, keeping track of current path sums in a dictionary
# The result should be the path sums of the leaf nodes, so whenever we find a node's child, we mark its path sum as negative to indicate that it is not a leaf anymore. 
# at the end, just sum the non-negative path sums
# TC: O(N)
# SC: O(N)

class Solution:
    def pathSum(self, nums: List[int]) -> int:
        pathsums = {}

        for n in nums:
            level = n // 100
            pos = (n % 100) // 10
            val = n % 10

            if level == 1:
                pathsums[1, 1] = val
                continue

            parent_pos = (pos + 1) // 2
            if (level-1, parent_pos) not in pathsums:
                raise Error('This is not supposed to happen')

            # turn it negative to mark as non-leaf node
            if pathsums[level-1, parent_pos] > 0:
                pathsums[level-1, parent_pos] *= -1

            pathsums[level, pos] = abs(pathsums[level-1, parent_pos]) + val

        result = sum(v for k, v in pathsums.items() if v > 0)
        return result"
gYsN1CWN,Untitled,wym1111,C++,Saturday 2nd of March 2024 09:54:02 PM CDT,"#include <bits/stdc++.h>
using namespace std;

const int N = 110;

int n, m;
int a[N][N];

/*
  A B C
  D o E
  F G H
  o (x, y)
  F (x + 1, y - 1)
 */

int dx[8] = {1, 1, 1, -1, -1, -1, 0, 0}; // F G H A B C D E
int dy[8] = {-1, 0, 1, -1, 0, 1, -1, 1};

signed main() {
	cin >> n >> m;
	for (int i = 1; i <= n; i ++) {
		for (int j = 1; j <= m; j ++) {
			cin >> a[i][j];
		}
	}
	int ans = 0;
	for (int x = 1; x <= n; x ++) {
		for (int y = 1; y <= m; y ++) {
			bool flag = 1;
			// (x, y)
			for (int i = 0; i < 8; i ++) {
				int nx = dx[i] + x;
				int ny = dy[i] + y;
				// (nx, ny)
				if (nx < 1 || nx > n || ny < 1 || ny > m) continue;
				if (a[x][y] < a[nx][ny]) {
					flag = 0;
				}
			}
			if (flag) ans ++;
		}
	}
	cout << ans << endl;
	return 0;
}

/*
    0   0   0   0   0   0
  
	0  150 190 170 180  0
  
	0  145 150 165 175  0
  
	0  140 178 149 190
  
 */"
dpMXhndx,WhatsApp: +86 19911539281 Buy fake Bowling Green State University degree.,jf123123,Bash,Saturday 2nd of March 2024 09:38:17 PM CDT,"We are the Premier website for World Class Quality ""Novelty"" Fake Degrees, Fake Diplomas, Fake Certificates and Fake Transcripts/Scoresheets/Statements of Academic Record/Results Slips for University, College, Trade School, Technical School High School and General Education/Equivalency items. People around the world employ our services because we are Masters at our craft, producing what we feel are the highest quality novelty academic items available anywhere. 

Email: diplomacentersale@gmail.com 
WhatsApp: +86 19911539281
WeChat: +86 14779983878 
https://www.degreemaker.com

Buy fake Bowling Green State University degree, Get a fake Bowling Green State University diploma, How to buy fake Bowling Green State University degree certificate? Supply high quality BGSU degree, Fake BGSU diploma for sale. buy fake diploma, fake degree. How to order fake diploma?
"
8SGRschH,Mad,Unknown_No_1,PHP,Saturday 2nd of March 2024 09:25:13 PM CDT,FreeHacksJoinTelegramMadGamerTG
hx9Ztc0V,1293. Shortest Path in a Grid with Obstacles Elimination,bennyfromtheblock,Python,Saturday 2nd of March 2024 09:06:15 PM CDT,"# Approach 1: BFS with optimization: Don't visit a cell if we've already been there with more bombs remaining
# TC: O(M*N*k)
# SC: O(M*N)

from collections import deque, defaultdict

DIRS = [
    (1, 0), (-1, 0), (0, 1), (0, -1)
]

class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        M, N = len(grid), len(grid[0])
        queue = deque([(0, 0, k, 0)])
        visited = defaultdict(lambda: -1) # coordinates : most bombs remaining

        while queue:
            x , y, bombs, moves = queue.popleft()
            if x == M-1 and y == N-1:
                return moves
            for new_x, new_y in self.get_valid_neighbours(x, y, M, N):
                if grid[new_x][new_y] == 1 and bombs > 0 and bombs - 1 > visited[(new_x, new_y)]:
                    visited[(new_x, new_y)] = bombs - 1
                    queue.append((new_x, new_y, bombs-1, moves+1))
                elif grid[new_x][new_y] == 0 and bombs > visited[(new_x, new_y)]:
                    visited[(new_x, new_y)] = bombs
                    queue.append((new_x, new_y, bombs, moves+1))

        return -1


    def get_valid_neighbours(self, x, y, M, N):
        for dx, dy in DIRS:
            new_x, new_y = x + dx, y + dy
            if new_x >= 0 and new_x < M and new_y >= 0 and new_y < N:
                yield new_x, new_y
                
                
"
FU2izub3,News March2 24,Newscaster_Ned,Email,Saturday 2nd of March 2024 09:06:11 PM CDT,".â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.âTâeâsâtâ â1â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â
.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.âTâeâsâtâ â2â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â
.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.âTâeâsâtâ â3â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â
.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â âTâeâsâtâ âcâoâmâpâlâeâtâeâ.â

Iâ âhâaâvâeâ âsâeâxâ âwâiâtâhâ âcâhâiâlâdârâeânâ.â âSâoâ âwâhâaâtâ?â âIâ âsâtâiâlâlâ âcâaânâ âbâeâ âaâ âgâoâoâdâ âpâeârâsâoânâ.â âYâoâuâ âgâuâyâsâ âkânâoâwâ âmâeâ.â âIâ'âmâ âaâ âgâoâoâdâ âpâeârâsâoânâ.â

Sâaâtâuârâdâaâyâ âTârâiâfâeâcâtâaâ âfâoârâ âTârâuâmâpâ

Aâfâtâeârâ âbâiâgâ âWâiânâsâ âiânâ âMâiâcâhâiâgâaânâ,â âMâiâsâsâoâuârâiâ âDâoânâaâlâdâ âRâoâmâpâsâ âiânâ âIâdâaâhâoâ âCâaâuâcâuâsâ

ââTâhâiâsâ âIâsâ âYâoâuârâ âCâoâuânâtârâyâ,â âaânâdâ âIâtâââsâ âAâlâsâoâ âTârâuâmâpâ âCâoâuânâtârâyâââ
Râeâpâuâbâlâiâcâaânâ âpârâeâsâiâdâeânâtâiâaâlâ âcâaânâdâiâdâaâtâeâ âaânâdâ âfâoârâmâeârâ âPârâeâsâiâdâeânâtâ âDâoânâaâlâdâ âTârâuâmâpâ âgâeâsâtâuârâeâsâ âtâoâ âsâuâpâpâoârâtâeârâsâ
Dâoânâaâlâdâ âTârâuâmâpâ âdâoâmâiânâaâtâeâdâ âtâhâeâ âIâdâaâhâoâ âRâeâpâuâbâlâiâcâaânâ âCâaâuâcâuâsâeâsâ âSâaâtâuârâdâaâyâ,â âsâeâcâuârâiânâgâ âaâlâlâ â3â2â âaâvâaâiâlâaâbâlâeâ âdâeâlâeâgâaâtâeâsâ âiânâ âhâiâsâ âmâaârâcâhâ âtâoâ âtâhâeâ ânâoâmâiânâaâtâiâoânâ.â

NâYâTâââsâ âKârâiâsâtâoâfâ:â âFâoâoâdâ âAâiâdâ âDârâoâpâpâeâdâ âiânâtâoâ âGâaâzâaâ âIâsâ âGâoâiânâgâ âtâoâ âBâeâ âSâtâoâlâeânâ âbâyâ âHâaâmâaâsâ
NâYâTâ'âsâ âKârâiâsâtâoâfâ:â âFâoâoâdâ âAâiâdâ âDârâoâpâpâeâdâ âiânâtâoâ âGâaâzâaâ âIâsâ âGâoâiânâgâ âtâoâ âBâeâ âSâtâoâlâeânâ âbâyâ âHâaâmâaâsâ
2â1â8â
Gâeârâmâaânâyâ âAâpâpâeâaârâsâ âtâoâ âHâaâvâeâ âIânâaâdâvâeârâtâeânâtâlâyâ âRâeâvâeâaâlâeâdâ âtâhâeâ âUâKâ âaânâdâ âFârâaânâcâeâ âhâaâvâeâ âSâoâlâdâiâeârâsâ âiânâ âUâkârâaâiânâeâ
Gâeârâmâaânâyâ âIânâaâdâvâeârâtâeânâtâlâyâ âRâeâvâeâaâlâsâ âtâhâeâ âUâKâ âhâaâsâ âSâoâlâdâiâeârâsâ âiânâ âUâkârâaâiânâeâ
3â,â5â2â7â
Tâuâlâsâiâ âGâaâbâbâaârâdâ âââOâpâeânâââ âtâoâ âVâPâ âSâlâoâtâ
Gâaâbâbâaârâdâ â'âOâpâeânâ'â âtâoâ âVâPâ âSâlâoâtâ
1â,â4â7â2â
Wâaâtâcâhâ âLâiâvâeâ:â âDâoânâaâlâdâ âTârâuâmâpâ âSâpâeâaâkâsâ âiânâ âRâiâcâhâmâoânâdâ,â âVâiârâgâiânâiâaâ
Wâaâtâcâhâ âLâiâvâeâ:â âDâoânâaâlâdâ âTârâuâmâpâ âSâpâeâaâkâsâ âiânâ âRâiâcâhâmâoânâdâ,â âVâiârâgâiânâiâaâ
1â8â4â
Mâaâiânâeâ âRâeâsâiâdâeânâtâsâ âFâuârâiâoâuâsâ âoâvâeârâ â$â1â3âMâ âTâaâxâ âBâiâlâlâ âfâoârâ âââTâaâjâ âMâaâhâaâlâââ âWâhâeârâeâ âMâiâgârâaânâtâsâ âGâeâtâ âTâwâoâ âYâeâaârâsâ
Mâaâiânâeâ âRâeâsâiâdâeânâtâsâ âFâuârâiâoâuâsâ âoâvâeârâ â$â1â3âMâ âTâaâxâ âBâiâlâlâ âtâoâ âGâiâvâeâ âMâiâgârâaânâtâsâ âFârâeâeâ âRâeânâtâ
7â1â6â
ââBâlâoâoâdâ âMâoânâeâyâââ:â âMâeâeâtâ âAâdâaâmâ âSâcâhâiâfâfâ,â âWâhâoâ âLâoâoâkâsâ âAâwâaâyâ âfârâoâmâ âtâhâeâ âDâeâaâdâlâyâ âFâeânâtâaânâyâlâ âCârâiâsâiâsâ âiânâ âHâiâsâ âBâaâcâkâyâaârâdâ
ââBâlâoâoâdâ âMâoânâeâyâââ:â âSâcâhâiâfâfâ âLâoâoâkâsâ âAâwâaâyâ âfârâoâmâ âtâhâeâ âDâeâaâdâlâyâ âFâeânâtâaânâyâlâ âCârâiâsâiâsâ
4â,â0â4â3â
1â2â âYâeâaârâsâ:â âTâhâeâ âLâeâgâaâcâyâ âoâfâ âAânâdârâeâwâ âBârâeâiâtâbâaârâtâ âCâoânâtâiânâuâeâsâ
1â2â âYâeâaârâsâ:â âTâhâeâ âLâeâgâaâcâyâ âoâfâ âAânâdârâeâwâ âBârâeâiâtâbâaârâtâ âCâoânâtâiânâuâeâsâ
4â,â3â5â3â
Eâxâcâlâuâsâiâvâeâ âââ âPâeâtâeârâ âSâcâhâwâeâiâzâeârâ:â âFâeânâtâaânâyâlâ âaâ âââCâhâiânâeâsâeâ âOâpâeârâaâtâiâoânâ âMâuâcâhâ âMâoârâeâ âtâhâaânâ âIâtâ âIâsâ âaâ âMâeâxâiâcâaânâ âDâ
Eâxâcâlâuâsâiâvâeâ âââ âPâeâtâeârâ âSâcâhâwâeâiâzâeârâ:â âFâeânâtâaânâyâlâ âaâ â'âCâhâiânâeâsâeâ âOâpâeârâaâtâiâoânâ'â
1â,â5â6â3â
ââAâmâeârâiâcâaâ âIâsâ âBâuâiâlâtâ âoânâ âSâtâoâlâeânâ âLâaânâdâââ:â âWâaâsâhâiânâgâtâoânâ âPâoâsâtâ âBâlâaâmâeâsâ âCâoânâsâeârâvâaâtâiâvâeâsâ âfâoârâ âCârâiâmâeâ âSâuârâgâeâ
Wâaâsâhâiânâgâtâoânâ âPâoâsâtâ âBâlâaâmâeâsâ âCâoânâsâeârâvâaâtâiâvâeâsâ âfâoârâ âCârâiâmâeâ âSâuârâgâeâ â'âMâoârâaâlâ âPâaânâiâcâ'â
2â5â8â
Kâeâlâlâoâgâgâââsâ âCâEâOâ âSâuâgâgâeâsâtâsâ âCâaâsâhâ-âSâtârâaâpâpâeâdâ âFâaâmâiâlâiâeâsâ âSâuâfâfâeârâiânâgâ âUânâdâeârâ âIânâfâlâaâtâiâoânâ âEâaâtâ âââCâeârâeâaâlâ âfâoârâ âDâiânâ
Kâeâlâlâoâgâgâââsâ âCâEâOâ âSâuâgâgâeâsâtâsâ âCâaâsâhâ-âSâtârâaâpâpâeâdâ âFâaâmâiâlâiâeâsâ âEâaâtâ â'âCâeârâeâaâlâ âfâoârâ âDâiânânâeârâ'â

Gâuâhâ-âRâiâlâlâaâ âAârârâeâsâtâeâdâ âAâfâtâeârâ âSâhâoâoâtâiânâgâ âWâhâiâtâeâ âMâaânâ âtâoâ âDâeâaâtâhâ âaâtâ âGâeâoârâgâiâaâ âDâoâmâeâ.â

Lâeâtâ'âsâ âhâoâpâeâ âhâeâ âgâeâtâsâ âsâhâoâtâ âiânâ âhâiâsâ âdâoâmâeâ.â


Oâpâaâ-âLâoâcâkâaâ âMâuânâkâaâ âBâeâlâuânâkâaâ âBâuâsâtâeâdâ âfâoârâ âGârâoâiâdâ âRâaâgâeâ âIânâcâiâdâeânâtâ âWâhâeârâeâ âWâhâiâtâeâ âMâaânâ âwâaâsâ âSâhâoâtâ.â


1â âJâiâgâ âaânâdâ â3â âTâeâeânâaâpâeârâsâ âAârârâeâsâtâeâdâ âAâfâtâeârâ âBârâeâaâkâiânâgâ âiânâtâoâ âWâoâmâaânâ'âsâ âTâuâlâsâaâ âHâoâmâeâ âaânâdâ âKâiâlâlâiânâgâ âHâeârâ.â


Iâoâwâaâ:â âSâiâlâvâeârâbâaâcâkâ âGâeâtâsâ â5â0â âYâeâaârâsâ âAâfâtâeârâ âSâtâaâbâbâiânâgâ âHâiâsâ âSâmâoâkâeâ âJâuâmâpâeârâ âGâfâ âtâoâ âDâeâaâtâhâ âwâiâtâhâ âCâoârâkâsâcârâeâwâ.â


Hâoâuâsâtâoânâ:â âHâoâmâoâ â(âEârâeâcâtâuâsâ)â âAârârâeâsâtâeâdâ âAâfâtâeârâ âAâsâsâ âRâaâpâiânâgâ â1â5â-âYâeâaârâ-âOâlâdâ âBâoâyâ âAâfâtâeârâ âAâsâkâiânâgâ âHâiâmâ âtâoâ âMâoâvâeâ âFâuârânâiâtâuârâeâ.â


Sâtâaânâfâoârâdâ âPâoâlâiâcâeâ âAârârâeâsâtâ âMâoânâkâeâyâ âWâhâoâ âRâaâpâeâdâ â1â2â-âYâeâaârâ-âOâlâdâ âGâiârâlâ.â


Nâeâgârâoâ âwâiâtâhâ âGâuâiâdâoâ âLâiâpâsâ âHâeâlâdâ âBâaâcâkâ âbâyâ âGâoâoâdâ âSâaâmâaârâiâtâaânâ âAâfâtâeârâ âTârâyâiânâgâ âtâoâ âRâaâpâeâ âWâoâmâaânâ.â


Sâaâmâbâoâ âTâuârânâsâ âHâiâmâsâeâlâfâ âiânâ âAâfâtâeârâ âBâeâiânâgâ âAâcâcâiâdâeânâtâaâlâlâyâ âRâeâlâeâaâsâeâdâ âfârâoâmâ âWâiâlâmâiânâgâtâoânâ âCâoâuârâtâhâoâuâsâeâ.â

.â.â.â.â.â.â.â âMâaâyâbâeâ âtâhâeâ âwâeâaâtâhâeârâ âwâoânâ'âtâ âcâhâeâeârâ âyâoâuâ âuâpâ,â âbâuâtâ âiâtâ âwâiâlâlâ âcâhâeâeârâ âsâoâmâeâoânâeâ âuâpâ.â

Tâoâdâaâyâ
Pâaârâtâlâyâ âCâlâoâuâdâyâ
8â0âÂ°â
/â6â0âÂ°â
3â%â
SâSâWâ â1â0â âmâpâhâ
Sâaâtâ â0â2â â|â âDâaâyâ
8â0âÂ°â
3â%â
SâSâWâ
1â0â
mâpâhâ
Aârâeâaâsâ âoâfâ âpâaâtâcâhâyâ âfâoâgâ âeâaârâlâyâ.â âSâuânâsâhâiânâeâ âaânâdâ âcâlâoâuâdâsâ âmâiâxâeâdâ.â âHâiâgâhâ ânâeâaârâ â8â0âFâ.â âWâiânâdâsâ âSâSâWâ âaâtâ â1â0â âtâoâ â1â5â âmâpâhâ.â
Hâuâmâiâdâiâtâyâ
7â0â%â
UâVâ âIânâdâeâxâ
7â âoâfâ â1â1â
Sâuânârâiâsâeâ
6â:â5â4â âaâmâ
Sâuânâsâeâtâ
6â:â3â0â âpâmâ
Sâaâtâ â0â2â â|â âNâiâgâhâtâ
6â0âÂ°â
2â4â%â
Sâ
1â0â
mâpâhâ
Mâaâiânâlâyâ âcâlâoâuâdâyâ.â âLâoâwâ ânâeâaârâ â6â0âFâ.â âWâiânâdâsâ âSâ âaâtâ â5â âtâoâ â1â0â âmâpâhâ.â
Hâuâmâiâdâiâtâyâ
8â9â%â
UâVâ âIânâdâeâxâ
0â âoâfâ â1â1â
Mâoâoânârâiâsâeâ
1â2â:â1â4â âaâmâ
Wâaânâiânâgâ âGâiâbâbâoâuâsâ
Mâoâoânâsâeâtâ
1â0â:â3â9â âaâmâ
Sâuânâ â0â3â
AâMâ âCâlâoâuâdâsâ/âPâMâ âSâuânâ
8â0âÂ°â
/â6â5âÂ°â
2â4â%â
Sâ â1â1â âmâpâhâ
Mâoânâ â0â4â
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
7â8âÂ°â
/â6â3âÂ°â
2â4â%â
Sâ â8â âmâpâhâ
Tâuâeâ â0â5â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
8â4âÂ°â
/â5â9âÂ°â
1â3â%â
Nâ â6â âmâpâhâ
Wâeâdâ â0â6â
Câlâoâuâdâyâ
7â8âÂ°â
/â6â3âÂ°â
1â2â%â
Eâ â9â âmâpâhâ
Tâhâuâ â0â7â
Sâcâaâtâtâeârâeâdâ âTâhâuânâdâeârâsâtâoârâmâsâ
7â6âÂ°â
/â6â1âÂ°â
5â8â%â
SâSâEâ â1â1â âmâpâhâ
Fârâiâ â0â8â
AâMâ âTâhâuânâdâeârâsâtâoârâmâsâ
7â6âÂ°â
/â4â9âÂ°â
5â8â%â
NâNâWâ â1â2â âmâpâhâ
Sâaâtâ â0â9â
Mâoâsâtâlâyâ âSâuânânâyâ
6â5âÂ°â
/â4â3âÂ°â
1â2â%â
Nâ â1â7â âmâpâhâ
Sâuânâ â1â0â
Mâoâsâtâlâyâ âSâuânânâyâ
6â8âÂ°â
/â4â4âÂ°â
5â%â
Nâ â1â1â âmâpâhâ
Mâoânâ â1â1â
Pâaârâtâlâyâ âCâlâoâuâdâyâ
6â9âÂ°â
/â5â0âÂ°â
1â%â
EâSâEâ â1â0â âmâpâhâ
Tâuâeâ â1â2â
Sâhâoâwâeârâsâ
7â3âÂ°â
/â5â7âÂ°â
4â1â%â
SâSâEâ â1â4â âmâpâhâ
Wâeâdâ â1â3â
Sâcâaâtâtâeârâeâdâ âTâhâuânâdâeârâsâtâoârâmâsâ
7â8âÂ°â
/â6â0âÂ°â
5â8â%â
Sâ â1â1â âmâpâhâ
Tâhâuâ â1â4â
Sâcâaâtâtâeârâeâdâ âTâhâuânâdâeârâsâtâoârâmâsâ
7â8âÂ°â
/â5â9âÂ°â
4â2â%â
Sâ â1â3â âmâpâhâ
Fârâiâ â1â5â
Sâhâoâwâeârâsâ
7â5âÂ°â
/â5â3âÂ°â
5â5â%â
Sâ â1â4â âmâpâhâ
Sâaâtâ â1â6â
Mâoâsâtâlâyâ âCâlâoâuâdâyâ
7â3âÂ°â
/â5â2âÂ°â
2â4â%â
Nâ â1â3â âmâpâhâ

.â.â.â.â.â.â.â.â.â

Câuârârâeânâtâ âtâhârâeâaâtâ:â âDâoânâ'âtâ âdâoânâ'âtâ âdâoânâ'âtâ!â âTâhâiâsâ âwâiâlâlâ âhâuârâtâ âsâoâmâeâoânâeâ!â âð´ð»

.â.â.â.â.â.â.â.â.â

NâIâUâ âVâaâlâeânâtâiânâeâ'âsâ âDâaâyâ âMâaâsâsâaâcârâeâ
Tâhâeâ âNâoârâtâhâeârânâ âIâlâlâiânâoâiâsâ âUânâiâvâeârâsâiâtâyâ âVâaâlâeânâtâiânâeâ'âsâ âDâaâyâ âMâaâsâsâaâcârâeâ âsâeâeâmâeâdâ âtâoâ âcâoâmâeâ âfârâoâmâ âaâ âpâaârâaâlâlâeâlâ âuânâiâvâeârâsâeâ.â âSâtâeâvâeânâ âPâhâiâlâlâiâpâ âKâaâzâmâiâeârâcâzâaâkâ âeânâtâeârâeâdâ âaâ âsâiâdâeâ âdâoâoârâ âaâtâ âaâpâpârâoâxâiâmâaâtâeâlâyâ â3â:â0â0â âpâmâ âCâSâTâ ânâeâaârâ âtâhâeâ âfârâoânâtâ âoâfâ âaânâ âiânâtârâoâdâuâcâtâoârâyâ âoâcâeâaânâoâgârâaâpâhâyâ âcâlâaâsâsâ âiânâ âaâ âlâaârâgâeâ âlâeâcâtâuârâeâ âhâaâlâlâ âwâiâtâhâ â1â5â0â âtâoâ â2â0â0â âsâtâuâdâeânâtâsâ âaânâdâ âbâeâgâaânâ âtâoâ âfâiârâeâ âgâuânâsâhâoâtâsâ.â âTâhâeâ âgâuânâmâaânâ âwâaâsâ ârâeâpâoârâtâeâdâ âtâoâ âbâeâ âaâ âtâhâiânâ,â âwâhâiâtâeâ âmâaâlâeâ âwâeâaârâiânâgâ âaâ âlâoânâgâ,â âbâlâaâcâkâ âtârâeânâcâhâ âcâoâaâtâ âaânâdâ âaâ âbâlâaâcâkâ âbâeâaânâiâeâ.â âWâoârâdâ âoânâ âtâhâeâ âsâtârâeâeâtâ âiâsâ âhâeâ âwâaâsâ âaâ âsâoâcâiâoâlâoâgâyâ âmâaâjâoârâ,â âtâhâaâtâ âhâaâdâ âsâoâmâeâtâhâiânâgâ âaâgâaâiânâsâtâ âtâhâeâ âoâcâeâaânâ.â âTâhâeâ âgâuânâmâaânâ âwâaâlâkâeâdâ âoânâtâoâ âsâtâaâgâeâ âaânâdâ âoâpâeânâeâdâ âfâiârâeâ.â â1â8â âpâeâoâpâlâeâ âwâeârâeâ âsâhâoâtâ âbâeâfâoârâeâ âtâhâeâ âgâuânâmâaânâ âsâhâoâtâ âhâiâmâsâeâlâfâ.â âMâaânâyâ âvâiâcâtâiâmâsâ âwâeârâeâ âsâhâoâtâ âiânâ âtâhâeâ âhâeâaâdâ,â âwâiâtâhâ âaâtâ âlâeâaâsâtâ âtâhârâeâeâ âoâfâ âtâhâeâ âvâiâcâtâiâmâsâ âiânâ âcârâiâtâiâcâaâlâ âcâoânâdâiâtâiâoânâ,â âeâiâgâhâtâ âiânâ âsâtâaâbâlâeâ âcâoânâdâiâtâiâoânâ âaânâdâ âfâiâvâeâ âiânâ âgâoâoâdâ âdâeâaâdâ âcâoânâdâiâtâiâoânâ.â

Tâhâeâ âgâuâyâ âmâiâgâhâtâ âhâaâvâeâ âbâeâeânâ âbâuâtâtâhâuârâtâ âoâvâeârâ âtâhâeâ âfâaâcâtâ âtâhâaâtâ âiâtâ'âsâ âVâ-âDâaâyâ âaânâdâ âiânâsâtâeâaâdâ âoâfâ âmâaâsâtâuârâbâaâtâiânâgâ âuâsâiânâgâ âhâiâsâ âtâeâaârâsâ âaâsâ âlâuâbâeâ âhâeâ âdâeâcâiâdâeâdâ âtâoâ âpâwânâ âsâoâmâeâ âsâtâuâdâeânâtâsâ âiânâsâtâeâaâdâ.â âTâhâiâsâ âwâaâsâ âaârâgâuâeâdâ âbâyâ âsâoâmâeâ âaâtâ âtâhâeâ âtâiâmâeâ âtâoâ âbâeâ âaânâoâtâhâeârâ âaâtâtâeâmâpâtâ âtâoâ âbârâeâaâkâ âCâhâoâ'âsâ âsâcâoârâeâ âaâtâ âVâ-âTâeâcâhâ.â âBâuâtâ,â âhâeâ âfâaâiâlâeâdâ âmâiâsâeârâaâbâlâyâ!â

Iâtâ âmâuâsâtâ âbâeâ ânâoâtâeâdâ âtâhâaâtâ âhâeâ âdâiâdânâ'âtâ âqâuâiâtâeâ âdâoâ âiâtâ âfâoârâ âtâhâeâ âlâuâlâzâ.â âHâeâ âdâiâdâ âiâtâ âfâoârâ âtâhâeâ âlâuâvâzâ â<â3â.â


(â(â â(âUâNâ)âHâAâPâPâYâ âVâAâLâEâNâTâIâNâEâ'âSâ âDâAâYâ â)â)â

.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â.â

Tâhâeâ âEâuârâoâpâeâaânâ âsâtâoânâeâcâhâaâtâ â(âSâaâxâiâcâoâlâaâ ârâuâbâiâcâoâlâaâ)â âiâsâ âaâ âsâmâaâlâlâ âpâaâsâsâeârâiânâeâ âbâiârâdâ âiânâ âtâhâeâ âOâlâdâ âWâoârâlâdâ âfâlâyâcâaâtâcâhâeârâ âfâaâmâiâlâyâ,â âMâuâsâcâiâcâaâpâiâdâaâeâ.â âIâtâ âiâsâ âfâoâuânâdâ âaâcârâoâsâsâ âEâuârâoâpâeâ,â âaâsâ âfâaârâ âeâaâsâtâ âaâsâ âUâkârâaâiânâeâ âaânâdâ âtâhâeâ âSâoâuâtâhâ âCâaâuâcâaâsâuâsâ,â âaânâdâ âiânâ âpâaârâtâsâ âoâfâ âNâoârâtâhâ âAâfârâiâcâaâ.â âIâtâ âbârâeâeâdâsâ âiânâ âhâeâaâtâhâlâaânâdâ,â âcâoâaâsâtâaâlâ âdâuânâeâsâ âaânâdâ ârâoâuâgâhâ âgârâaâsâsâlâaânâdâ,â âaânâdâ âiâsâ âeâiâtâhâeârâ âsâhâoârâtâ-âdâiâsâtâaânâcâeâ âmâiâgârâaâtâoârâyâ âoârâ ânâoânâ-âmâiâgârâaâtâoârâyâ,â âwâiâtâhâ âpâaârâtâ âoâfâ âtâhâeâ âpâoâpâuâlâaâtâiâoânâ âmâoâvâiânâgâ âsâoâuâtâhâ âtâoâ âwâiânâtâeârâ âfâuârâtâhâeârâ âsâoâuâtâhâ âiânâ âEâuârâoâpâeâ âaânâdâ âmâoârâeâ âwâiâdâeâlâyâ âiânâ ânâoârâtâhâeârânâ âAâfârâiâcâaâ.â âEâuârâoâpâeâaânâ âsâtâoânâeâcâhâaâtâsâ âaârâeâ â1â1â.â5â âtâoâ â1â3â âcâeânâtâiâmâeâtârâeâsâ â(â4â.â5â âtâoâ â5â.â1â âiânâ)â âlâoânâgâ âaânâdâ âwâeâiâgâhâ â1â3â âtâoâ â1â7â âgârâaâmâsâ â(â0â.â4â6â âtâoâ â0â.â6â0â âoâzâ)â,â âwâiâtâhâ âbâoâtâhâ âsâeâxâeâsâ âhâaâvâiânâgâ âsâhâoârâtâ âwâiânâgâsâ.â âTâhâeâ âsâuâmâmâeârâ âmâaâlâeâ âhâaâsâ âbâlâaâcâkâ âuâpâpâeârâpâaârâtâsâ,â âaâ âbâlâaâcâkâ âhâeâaâdâ,â âaânâ âoârâaânâgâeâ âtâhârâoâaâtâ âaânâdâ âbârâeâaâsâtâ,â âaânâdâ âaâ âwâhâiâtâeâ âbâeâlâlâyâ âaânâdâ âvâeânâtâ,â âwâhâiâlâeâ âtâhâeâ âfâeâmâaâlâeâ âhâaâsâ âbârâoâwânâ âuâpâpâeârâpâaârâtâsâ âaânâdâ âhâeâaâdâ,â âaânâdâ ânâoâ âwâhâiâtâeâ ânâeâcâkâ âpâaâtâcâhâeâsâ,â ârâuâmâpâ âoârâ âbâeâlâlâyâ.â âTâhâiâsâ âmâaâlâeâ âEâuârâoâpâeâaânâ âsâtâoânâeâcâhâaâtâ âwâaâsâ âpâhâoâtâoâgârâaâpâhâeâdâ âiânâ âBâeâaâuâlâiâeâuâ âiânâ âHâaâmâpâsâhâiârâeâ,â âEânâgâlâaânâdâ.â

Pâhâoâtâoâgârâaâpâhâ âcârâeâdâiâtâ:â âCâhâaârâlâeâsâ âJâ.â âSâhâaârâpâ

.â.â.â.â.â.â.â.â

Wâeâlâlâ,â âIâ âhâaâvâeâ âsâoâmâeâ âiânâtâeârâeâsâtâiânâgâ ânâeâwâsâ.â âTâhâeâ âbârâaânâdâ âCâhâeâfâ âBâoâyâaârâdâeâeâ âhâaâsâ âbâoâuâgâhâtâ âtâhâeâ âNâeâwâsâcâaâsâtâeârâ âNâeâdâ âLâiâcâeânâsâeâ.â âDâoânâ'âtâ âwâoârârâyâ âtâhâoâuâgâhâ.â âNâoâtâhâiânâgâ âmâaâjâoârâ âwâiâlâlâ âcâhâaânâgâeâ.â âIâ âcâaânâ'âtâ âmâaâkâeâ âaânâyâ âjâoâkâeâsâ âaâbâoâuâtâ âgâuâiâdâoâsâ âaânâyâmâoârâeâ âtâhâoâuâgâhâ.â âBâuâtâ âiâtâ'âsâ ânâoâtâ âaâ âbâiâgâ âdâeâaâlâ.â âIâ âcâaânâ âsâtâiâlâlâ âmâaâkâeâ âcâoâmâmâeânâtâsâ âaâbâoâuâtâ âaâlâlâ âtâhâeâ âoâtâhâeârâ âgârâoâuâpâsâ âoâfâ âpâeâoâpâlâeâ.â âAânâyâwâaâyâ,â âIâ'âmâ âgâoânânâaâ âgâoâ âtâoânâgâuâeâfâuâcâkâ âaâ â1â2â âyâeâaârâ âoâlâdâ'âsâ âpâuâsâsâyâ.â âNâiâgâgâeârâ âsâpâiâcâ âkâiâkâeâ!â"
tCzp7u0v,WhatsApp: +86 19911539281 Is it possible to order a fake University of Akron degree?,jf123123,Bash,Saturday 2nd of March 2024 09:01:21 PM CDT,"We are the Premier website for World Class Quality ""Novelty"" Fake Degrees, Fake Diplomas, Fake Certificates and Fake Transcripts/Scoresheets/Statements of Academic Record/Results Slips for University, College, Trade School, Technical School High School and General Education/Equivalency items. People around the world employ our services because we are Masters at our craft, producing what we feel are the highest quality novelty academic items available anywhere. https://www.degreemaker.com/university-of-akron-degree/

Email: diplomacentersale@gmail.com 
WhatsApp: +86 19911539281
WeChat: +86 14779983878 
https://www.degreemaker.com

Is it possible to order a fake University of Akron degree? Where to make University of Akron diploma? Buy fake University of Akron degree certificate, How long to order fake University of Akron certificate online? buy fake diploma, fake degree. How to order fake diploma?
"
aD75QQxc,WhatsApp: +86 19911539281 How safety to order Antelope Valley College diploma?,jf123123,Bash,Saturday 2nd of March 2024 08:53:04 PM CDT,"We are the Premier website for World Class Quality ""Novelty"" Fake Degrees, Fake Diplomas, Fake Certificates and Fake Transcripts/Scoresheets/Statements of Academic Record/Results Slips for University, College, Trade School, Technical School High School and General Education/Equivalency items. People around the world employ our services because we are Masters at our craft, producing what we feel are the highest quality novelty academic items available anywhere. 

Email: diplomacentersale@gmail.com 
WhatsApp: +86 19911539281
WeChat: +86 14779983878 
https://www.degreemaker.com

Would like to buy a fake Antelope Valley College degree certificate, How safety to order Antelope Valley College diploma? Buy fake Antelope Valley College certificate, Get a fake AVC degree online. buy fake diploma, fake degree.
"
s8sRkWca,IFX networks corp - Spam - Estafa [3-1/2024],bombaires,HTML,Saturday 2nd of March 2024 08:47:20 PM CDT,"IFX networks corp s.r.l. - E-mktplus

   ifxcorp.com - ifxnetworks.com - ifxnw.com.ar - ifxnw.cl - hostmailing.com - operador.net.ar - e-mktplus.com.ar - elpalomo.net (?)
   Real names - Los nombres reales: Samuel Mezrahi Mussan - Ezequiel
   Carson - Michael Abramowitz - Jaime Perez Gonzalez - Gonzalo Noceda -
   Natalia Turnes - Mahesh Neelakanta - Jesus Alfonso Zagarra Rosado
   Physical address - DirecciÃ³n real: Av. Del Libertador No. 498 Piso 26,
   Torre Prourban - C1001ABR Retiro
   Av. Belgrano 1586 Piso 11 - 1480 Buenos Aires Pay the spammer a visit!
   520 South Dixie Highway - Hallandale - Florida 33009 (USA)
   1930 Harrison - Hollywood, Florida 33020 (USA)
   Carrera 69 # 43B-44 of. 501 - 57111 Bogota (Colombia)
   Autopista Norte # 114 - 78 Oficina 201 - 57111 Bogota (Colombia)
   Phone - TelÃ©fono: +54 (0)800 345-1400
   54 (0)11-5252-2000
   +54 (0)11 5031-2400
   +54 (0)351 231-4372 (mobile e-mktplus)
   +57 1 3693000 (Colombia)
   +1 305 512 1137 (USA)
   +1 305 512 1146 (USA)
   +1 786 318 3939 (USA)
   011 3220-5506 is often used in scam distributed by IFX Networks. Might
   be a fake though. Does anyone know?
   Samuel Mezrahi Mussan sammy@ifxcorp.com
   Michael F. Shalom mshalom@ifxcorp.com
   Ezequiel Carson ezequiel@ifxcorp.com
   Julio Cesar Pinto jc@ifxcorp.com
   Michael Abramowitz mabramowitz@ifxcorp.com
   Rodolfo Alvarez ralvarez@ifxcorp.com
   Juan Carlos Valderrama Prada jcprada@ifxcorp.com
   Mahesh Neelakanta mahesh@ifxcorp.com
   Luis Gabriel Castellanos lg@ifxcorp.com
   Andres Diaz adiaz@ifxcorp.com
   Jack Haime jhaime@ifxcorp.com
   Juan JosÃ© Solano FÃ¡bregas jjsolano@ifxcorp.com
   Merly CarreÃ±o Ortiz mcarreno@ifxcorp.com
   Jesus Alfonso Zagarra Rosado jzagarra@ifxcorp.com
   Felipe Ramirez aframirez@ifxcorp.com
   lmurcianoc@ifxcorp.com
   info@ifxcorp.com
   contacto@ifxcorp.com
   rrhh@ifxcorp.com
   rts@ifxcorp.com
   rts@ifxnetworks.com
   carriers@ifxcorp.com
   soc@ifxcorp.com
   noc@ifxnetworks.com
   noc@ifxcorp.com
   contactenos@ifxcorp.com
   info@ifxnetworks.com
   comunicaciones@ifxcorp.com
   info@e-mktplus.com.ar
   rebotados@dedicado.hostmailing.com
   sales@ifxcorp.com
   netadmin@ifxnw.cl
   info@ifxnw.com.ar
   hostmaster@ifxcorp.com
   ipadmin@ifxcorp.com
   info.uy@ifxcorp.com
   info.elsalvador@ifxcorp.com
   info.gt@ifxcorp.com
   info.mx@ifxcorp.com
   info.pe@ifxcorp.com
   info.pr@ifxcorp.com
   info.ve@ifxcorp.com
   redsocial@ifxcorp.com
   postmaster@ifxnw.com.ar
   postmaster@mm-bgtb.maxmailing.com.ar
   postmaster@ifxnw.cl
   abuse@ifxcorp.com"
GMx8MBjJ,recipes - from server,Shaka01,Lua,Saturday 2nd of March 2024 08:43:33 PM CDT,"{
  [ ""create:brass_hand"" ] = {
    keyCount = 1,
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 6,
      },
    },
    [ ""create:golden_sheet"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""create:gearbox"" ] = {
    keyCount = 1,
    [ ""create:cogwheel"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""create:andesite_casing"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""create:fluid_pipe"" ] = {
    keyCount = 8,
    [ ""create:copper_sheet"" ] = {
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""create:copper_ingot"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""create:redstone_link"" ] = {
    keyCount = 2,
    [ ""minecraft:redstone_torch"" ] = {
      {
        count = 1,
        slot = 7,
      },
    },
    [ ""create:brass_sheet"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
    },
    [ ""minecraft:spruce_planks"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:birch_planks"" ] = {
    keyCount = 4,
    [ ""minecraft:birch_log"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""create:vertical_gearbox"" ] = {
    keyCount = 1,
    [ ""create:gearbox"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""xkdeco:maya_stone"" ] = {
    keyCount = 4,
    [ ""minecraft:granite"" ] = {
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:andesite"" ] = {
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""minecraft:chest"" ] = {
    keyCount = 1,
    [ ""minecraft:spruce_planks"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""thermal:side_config_augment"" ] = {
    keyCount = 1,
    [ ""thermal:invar_ingot"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
    },
    [ ""thermal:gold_gear"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""thermal:redstone_servo"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""thermal:machine_frame"" ] = {
    keyCount = 1,
    [ ""kubejs:invar_casing"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""kubejs:inductive_mechanism"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:ender_eye"" ] = {
    keyCount = 1,
    [ ""minecraft:ender_pearl"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""minecraft:blaze_powder"" ] = {
      {
        count = 1,
        slot = 6,
      },
    },
  },
  [ ""create:mechanical_pump"" ] = {
    keyCount = 1,
    [ ""create:fluid_pipe"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""create:cogwheel"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""thermal:gold_gear"" ] = {
    [ ""minecraft:gold_ingot"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:iron_nugget"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    keyCount = 1,
  },
  [ ""kubejs:andesite_machine"" ] = {
    [ ""kubejs:kinetic_mechanism"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    keyCount = 1,
    [ ""create:andesite_casing"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:coal_block"" ] = {
    keyCount = 1,
    [ ""minecraft:coal"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:bricks"" ] = {
    keyCount = 1,
    [ ""minecraft:brick"" ] = {
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""computercraft:computer_advanced"" ] = {
    [ ""minecraft:gold_ingot"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:redstone"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:glass_pane"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
    keyCount = 1,
  },
  [ ""create:brass_casing"" ] = {
    keyCount = 2,
    [ ""create:brass_sheet"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:spruce_log"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""computercraft:wired_modem"" ] = {
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    keyCount = 1,
    [ ""projectred-core:red_ingot"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:dark_oak_planks"" ] = {
    keyCount = 4,
    [ ""minecraft:dark_oak_log"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:redstone_lamp"" ] = {
    [ ""minecraft:redstone"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:glowstone"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    keyCount = 1,
  },
  [ ""minecraft:hopper"" ] = {
    keyCount = 1,
    [ ""minecraft:iron_ingot"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:chest"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""kubejs:brass_machine"" ] = {
    keyCount = 1,
    [ ""create:brass_casing"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""create:precision_mechanism"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""create:copper_casing"" ] = {
    keyCount = 2,
    [ ""create:copper_sheet"" ] = {
      {
        count = 1,
        slot = 13,
      },
    },
    [ ""minecraft:spruce_log"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""create:cogwheel"" ] = {
    keyCount = 8,
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:spruce_button"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""computercraft:wired_modem_full"" ] = {
    keyCount = 1,
    [ ""computercraft:wired_modem"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""create:chute"" ] = {
    keyCount = 4,
    [ ""create:iron_sheet"" ] = {
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:oak_planks"" ] = {
    keyCount = 4,
    [ ""minecraft:oak_log"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:spruce_button"" ] = {
    keyCount = 1,
    [ ""minecraft:spruce_planks"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""kubejs:invar_casing"" ] = {
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 13,
      },
    },
    [ ""thermal:invar_ingot"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
    keyCount = 2,
  },
  [ ""occultism:book_of_binding_djinni"" ] = {
    keyCount = 1,
    [ ""occultism:purified_ink"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""minecraft:writable_book"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:green_dye"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""minecraft:barrel"" ] = {
    keyCount = 1,
    [ ""minecraft:spruce_planks"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:spruce_slab"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""thermal:phytogro"" ] = {
    keyCount = 4,
    [ ""minecraft:sand"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""minecraft:bone_meal"" ] = {
      {
        count = 1,
        slot = 6,
      },
    },
    [ ""thermal:apatite"" ] = {
      {
        count = 1,
        slot = 9,
      },
    },
    [ ""thermal:niter"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:paper"" ] = {
    keyCount = 3,
    [ ""minecraft:sugar_cane"" ] = {
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""occultism:book_of_binding_afrit"" ] = {
    keyCount = 1,
    [ ""occultism:purified_ink"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""minecraft:writable_book"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:purple_dye"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""occultism:book_of_binding_bound_djinni"" ] = {
    keyCount = 1,
    [ ""occultism:book_of_binding_djinni"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""occultism:dictionary_of_spirits"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""occultism:book_of_binding_bound_afrit"" ] = {
    keyCount = 1,
    [ ""occultism:book_of_binding_afrit"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""occultism:dictionary_of_spirits"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""kubejs:sealed_mechanism"" ] = {
    keyCount = 1,
    [ ""thermal:cured_rubber"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
    },
    [ ""kubejs:kinetic_mechanism"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:black_dye"" ] = {
    keyCount = 1,
    [ ""minecraft:ink_sac"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""create:belt_connector"" ] = {
    keyCount = 3,
    [ ""thermal:cured_rubber"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:writable_book"" ] = {
    keyCount = 1,
    [ ""minecraft:ink_sac"" ] = {
      {
        count = 1,
        slot = 6,
      },
    },
    [ ""minecraft:book"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""minecraft:feather"" ] = {
      {
        count = 1,
        slot = 9,
      },
    },
  },
  [ ""minecraft:repeater"" ] = {
    keyCount = 1,
    [ ""minecraft:redstone_torch"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
    },
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:redstone"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:stick"" ] = {
    keyCount = 4,
    [ ""minecraft:birch_planks"" ] = {
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:stone_bricks"" ] = {
    keyCount = 4,
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:observer"" ] = {
    keyCount = 1,
    [ ""minecraft:cobblestone"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:redstone"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:quartz"" ] = {
      {
        count = 1,
        slot = 11,
      },
    },
  },
  [ ""create:shaft"" ] = {
    keyCount = 8,
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""minecraft:lever"" ] = {
    [ ""minecraft:stick"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    keyCount = 1,
    [ ""minecraft:cobblestone"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""computercraft:cable"" ] = {
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    keyCount = 6,
    [ ""projectred-core:red_ingot"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""create:andesite_casing"" ] = {
    keyCount = 2,
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 13,
      },
    },
    [ ""minecraft:spruce_log"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""minecraft:glass_pane"" ] = {
    keyCount = 16,
    [ ""minecraft:glass"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""occultism:book_of_binding_bound_foliot"" ] = {
    [ ""occultism:book_of_binding_foliot"" ] = {
      {
        count = 1,
        slot = 13,
      },
    },
    keyCount = 1,
    [ ""occultism:dictionary_of_spirits"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""kubejs:zinc_machine"" ] = {
    [ ""kubejs:infernal_mechanism"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""kubejs:zinc_casing"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    keyCount = 1,
  },
  [ ""portality:module_interdimensional"" ] = {
    keyCount = 1,
    [ ""minecraft:ender_eye"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""portality:frame"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:quartz_block"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""minecraft:white_dye"" ] = {
    keyCount = 1,
    [ ""minecraft:bone_meal"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
  },
  [ ""occultism:book_of_binding_foliot"" ] = {
    keyCount = 1,
    [ ""occultism:purified_ink"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""minecraft:white_dye"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:writable_book"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""portality:frame"" ] = {
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    keyCount = 1,
    [ ""minecraft:quartz"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""minecraft:comparator"" ] = {
    keyCount = 1,
    [ ""minecraft:redstone_torch"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
    },
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:quartz"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""storagedrawers:spruce_trim"" ] = {
    keyCount = 4,
    [ ""create:zinc_ingot"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
    },
    [ ""minecraft:spruce_planks"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:chest"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""create:large_cogwheel"" ] = {
    keyCount = 2,
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:spruce_planks"" ] = {
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:spruce_button"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""kubejs:copper_machine"" ] = {
    keyCount = 1,
    [ ""create:copper_casing"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""kubejs:sealed_mechanism"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""thermal:redstone_servo"" ] = {
    [ ""minecraft:redstone"" ] = {
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 15,
      },
    },
    [ ""minecraft:iron_ingot"" ] = {
      {
        count = 1,
        slot = 11,
      },
    },
    keyCount = 1,
  },
  [ ""create:depot"" ] = {
    keyCount = 1,
    [ ""create:andesite_alloy"" ] = {
      {
        count = 1,
        slot = 5,
      },
    },
    [ ""create:andesite_casing"" ] = {
      {
        count = 1,
        slot = 6,
      },
    },
  },
  [ ""minecraft:iron_nugget"" ] = {
    keyCount = 9,
    [ ""minecraft:iron_ingot"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
  },
  [ ""kubejs:zinc_casing"" ] = {
    keyCount = 2,
    [ ""kubejs:zinc_sheet"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:stone"" ] = {
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:book"" ] = {
    keyCount = 1,
    [ ""minecraft:leather"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
    [ ""minecraft:paper"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 13,
      },
    },
  },
  [ ""create:water_wheel"" ] = {
    keyCount = 1,
    [ ""create:large_cogwheel"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    [ ""minecraft:spruce_slab"" ] = {
      {
        count = 1,
        slot = 5,
      },
      {
        count = 1,
        slot = 6,
      },
      {
        count = 1,
        slot = 7,
      },
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:redstone_torch"" ] = {
    [ ""minecraft:redstone"" ] = {
      {
        count = 1,
        slot = 10,
      },
    },
    keyCount = 1,
    [ ""minecraft:stick"" ] = {
      {
        count = 1,
        slot = 14,
      },
    },
  },
  [ ""tconstruct:clear_glass_pane"" ] = {
    keyCount = 16,
    [ ""tconstruct:clear_glass"" ] = {
      {
        count = 1,
        slot = 9,
      },
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 13,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
  [ ""minecraft:quartz_block"" ] = {
    keyCount = 1,
    [ ""minecraft:quartz"" ] = {
      {
        count = 1,
        slot = 10,
      },
      {
        count = 1,
        slot = 11,
      },
      {
        count = 1,
        slot = 14,
      },
      {
        count = 1,
        slot = 15,
      },
    },
  },
}"
2RFgrskR,shinobi storm,LSJiqueue,Lua,Saturday 2nd of March 2024 08:36:27 PM CDT,"local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({Name = ""Shinobi Storm V1"", HidePremium = true, SaveConfig = true, ConfigFolder = ""ShinobiV1"", IntroEnabled = false, IntroText = """"})
local checkEsp = false 
local checkSpeed = false 
local hitbox 
local hbSize
local debounce = false 
local enable 
local multiplier
local function addEsp()
	loadstring(game:HttpGet(""https://raw.githubusercontent.com/ic3w0lf22/Unnamed-ESP/master/UnnamedESP.lua"", true))()
end 
local function addSpeed()
	loadstring(game:HttpGet(""https://pastebin.com/raw/jEK9Vh3L"", true))()
end 
local function ac()
	while (hitbox == true) do 
		task.wait()
		if (hitbox == true) then 
			for i, v in pairs(game:GetService(""Workspace""):GetChildren()) do 
				if v:IsA(""Model"") and game:GetService(""Players""):FindFirstChild(v.Name) and v.Name ~= game:GetService(""Players"").LocalPlayer.Name then 
					if (v:FindFirstChild(""HumanoidRootPart"")) then 
						v:FindFirstChild(""HumanoidRootPart"").Size = Vector3.new(hbSize, hbSize, hbSize)
						v:FindFirstChild(""HumanoidRootPart"").Transparency = 0.7
						v:FindFirstChild(""HumanoidRootPart"").Color = Color3.fromRGB(0,0,200)
					else
						warn(""No humanoid root part found"")
					end					
				end
			end 
		end 
	end 
end
local function deac() 
	for i, v in pairs(game:GetService(""Workspace""):GetChildren()) do 
		if v:IsA(""Model"") and game:GetService(""Players""):FindFirstChild(v.Name) and v.Name ~= game:GetService(""Players"").LocalPlayer.Name then 
			if (v:FindFirstChild(""HumanoidRootPart"")) then 
			print(""humanoid root part found"")
			v.HumanoidRootPart.Size = Vector3.new(2,2,1)
			v.HumanoidRootPart.Transparency = 1
			v.HumanoidRootPart.Color = Color3.new(163,162,165)
			else
			warn(""Humanoid Root Part Not Found"")
			end 
		end 
	end 
end 
local function speeding()
	while (debounce == true) do 
		task.wait()
		if (debounce == true) then 
			game:GetService(""Players"").LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"").CFrame = game:GetService(""Players"").LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"").CFrame + game:GetService(""Players"").LocalPlayer.Character:FindFirstChild(""HumanoidRootPart"").CFrame.lookVector * multiplier
		end 
	end 
end 
local mainTab = Window:MakeTab({
	Name = ""Main"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
}) 
local speedTab = Window:MakeTab({
	Name = ""Speed"",
	PremiumOnly = false
})
mainTab:AddButton({
      Name = ""Open ESP"",
	  Callback = function()
		if (checkEsp == false) then
			checkEsp = true 
			addEsp()
		end
	end   
})

mainTab:AddButton({
	Name = ""Unlock Store Characters"",
	Callback = function()
		game:GetService(""Players"").LocalPlayer:FindFirstChild(""leaderstats"")[""Wins1v1""].Value = 999999
	end 
})

mainTab:AddToggle({
	Name = ""Enable Hitboxes"",
	Default = false,
	Callback = function(v) 
		hitbox = v 
		if (v == true) then
		task.spawn(ac)
		elseif (v == false) then 
		print(""deactivated"")
		deac()
		end
	end 
})
mainTab:AddSlider({
	Name = ""Hitbox Size"",
	Min = 0,
	Max = 50,
	Default = 20,
	Color = Color3.fromRGB(255,255,255),
	Increment = 1,
	ValueName = ""Size"",
	Callback = function(v)
		hbSize = v
	end    
})
speedTab:AddToggle({
	Name = ""Enabled"",
	Default = false, 
	Callback = function(v)
		print(v)
		enable = v 
	end 
})
speedTab:AddBind({
	Name = ""Hotkey"", 
	Default = Enum.KeyCode.E, 
	Hold = false,
	Callback = function(v)
		if (debounce == false and enable == true) then 
			debounce = true 
			print(""Speeding"")
			task.spawn(speeding)
		elseif (debounce == true) then 
			debounce = false 
			print(""regular"")
		end 
	end 
})
speedTab:AddSlider({
	Name = ""Speed Multiplier"",
	Min = 0.5,
	Max = 10,
	Default = 1,
	Color = Color3.fromRGB(255,255,255),
	Increment = 0.5,
	ValueName = ""Speed"",
	Callback = function(v)
		multiplier = v 
	end    
})"
qTpKkbeU,Netherwood Scanner,untamemadman,Lua,Saturday 2nd of March 2024 08:14:34 PM CDT,"scanner = peripheral.wrap(""back"")

while true do
term.clear()
term.setCursorPos(1, 1)
blocks, err = scanner.scan(16)
found = false

for id, block in pairs(blocks) do
	if block[""name""] == ""silentgear:netherwood_log"" then
	found = true
	term.setTextColor(colors.green)
	term.write(block[""name""])
	term.setTextColor(colors.white)
	term.write("" at "")
	term.setTextColor(colors.blue)
	print(string.format(""x:%d z:%d y:%d"", block[""x""], block[""z""], block[""y""]))
end
end
if not found then
print(""Nothing found"")
end
sleep(5)
end"
VK2NaqgZ,Untitled,a_chn,C++,Saturday 2nd of March 2024 07:40:29 PM CDT,"#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<ll,ll> pii;
# define im INT_MAX
# define umap unordered_map
# define uset unordered_set
# define f first
# define s second
# define pq priority_queue 
# define pb push_back
# define ins insert
# define INF LLONG_MAX
#define int long long

vector<pii> instructions1, instructions2;
vector<array<int,3>> x_sums_1;
map<pair<int, int>,map<int, int>> x_sums_2;
int num_valid_subsets[41];
 
int num_instructions_1=0; int curr_x_sum_1=0; int curr_y_sum_1=0;
void gen_list1(int i){
    if (i==instructions1.size()){
        x_sums_1.pb({curr_x_sum_1,curr_y_sum_1,num_instructions_1});
        return;
    }
    curr_x_sum_1+=instructions1[i].f; curr_y_sum_1+=instructions1[i].s;
    num_instructions_1++; gen_list1(i+1);
    curr_x_sum_1-=instructions1[i].f; curr_y_sum_1-=instructions1[i].s;
    num_instructions_1--; gen_list1(i+1);
}
 
int num_instructions_2=0; int curr_x_sum_2=0; int curr_y_sum_2=0;
void gen_list2(int i){
    if (i==instructions2.size()){
		x_sums_2[{curr_x_sum_2,curr_y_sum_2}][num_instructions_2]++;
        return;
    }
    curr_x_sum_2+=instructions2[i].f; curr_y_sum_2+=instructions2[i].s;
    num_instructions_2++; gen_list2(i+1);
    curr_x_sum_2-=instructions2[i].f; curr_y_sum_2-=instructions2[i].s;
    num_instructions_2--; gen_list2(i+1);
}
 
main(){
    // ifstream cin(""triangles.in""); 
    // ofstream cout(""triangles.out"");
 
    int n; cin >> n; int xg, yg; cin >> xg >> yg;
    for (int i=0; i<n/2; i++){
        int x, y; cin >> x >> y;
        instructions1.pb({x,y});
    } for (int i=n/2; i<n; i++){
        int x, y; cin >> x >> y;
        instructions2.pb({x,y});
    }
 
    // printContPair(instructions1); printContPair(instructions2);
 
 
    gen_list1(0); gen_list2(0);
 
    for (auto element1 : x_sums_1){ // element from list 1 (x)
		for(auto[num, ways] : x_sums_2[{xg - element1[0], yg - element1[1]}]) {
			num_valid_subsets[element1[2] + num] += ways;
		}
    }
 
 
 
    for (int k=1; k<=n; k++){
        cout << num_valid_subsets[k] << '\n';
    }
 
 
    return 0;
}"
Cwe0GsXy,pico_temp,Python253,Python,Saturday 2nd of March 2024 07:27:40 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: pico_temp.py
# Author: Jeoi Reqi


""""""
This CircuitPython script performs a one-minute scan of the CPU temperature and voltage.
It prints real-time values for each 0.25-second interval, providing a dynamic view of the CPU's thermal & electrical characteristics.
The script concludes by displaying the average temperature and voltage over the scanning period.
Use it to assess how your CircuitPython device handles temperature and voltage under various conditions.
Enjoy monitoring the ð¥temperatureð¥ and â¡voltageâ¡ of your CircuitPython device!

Requirements:
- CircuitPython compatible device
- microcontroller library
- time library

Usage:
1. Connect your CircuitPython compatible device to your computer.
2. Copy the script to the device's storage.
3. Run the script using a CircuitPython-compatible IDE or command-line interface.
4. Observe the real-time CPU temperature and voltage readings for one minute.
5. Analyze the average temperature and voltage values at the end of the scan.

Features:
- Real-time monitoring: Displays temperature and voltage every 0.25 seconds during the scan.
- Dynamic view: Provides a dynamic view of the CPU's thermal and electrical characteristics.
- Average values: Concludes with the display of average temperature and voltage over the scanning period.
- Insightful assessment: Helps assess how your CircuitPython device responds to temperature and voltage variations.


Note: This script is specifically designed for Raspberry Pi Pico. Ensure dependencies are met before execution.
""""""

import microcontroller
from time import sleep

def temp():
    return microcontroller.cpu.temperature * (9 / 5) + 32

def voltage():
    return microcontroller.cpu.voltage

art = '''
  *   )                    *   )          )  
` )  /(  (    )          ` )  /(  (    ( /(  
 ( )(_))))\  (    `  )    ( )(_))))\(  )\()) 
(_(_())/((_) )\  '/(/(   (_(_())/((_)\(_))/  
|_   _(_)) _((_))((_)_\  |_   _(_))((_) |_   
  | | / -_) '  \() '_ \)   | | / -_|_-<  _|  
  |_| \___|_|_|_|| .__/    |_| \___/__/\__|  
                 |_|    + â¡ VOLTAGE TESTâ¡                    
'''

print(art)
print(""Running 1 Minute Temp & Voltage Scan Now... \n"")

temperatures = [temp() for _ in range(240)]
voltages = [voltage() for _ in range(240)]
for i, (temperature, voltage) in enumerate(zip(temperatures, voltages)):
    print(f""TMP-{i+1:03d}: {temperature:.2f}Â° (ð¥Fahrenheitð¥), VLT-{i+1:03d}: {voltage:.2f} (â¡Voltsâ¡)"")
    sleep(0.25)

print(art)

average_temp = sum(temperatures) / len(temperatures)
average_volt = sum(voltages) / len(voltages)
print(f""\nAverage Temperature: {average_temp:.2f}Â° (ð¥Fahrenheitð¥), :: Average Voltage: {average_volt:.2f} (â¡Voltsâ¡)\n"")
print(""Done!"")

"
4ChWRa6e,pico_mem_monitor,Python253,Python,Saturday 2nd of March 2024 06:58:31 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: pico_mem_monitor.py
# Author: Jeoi Reqi

""""""
Pico Mem Monitor: Raspberry Pi Pico Memory Monitoring Script

Description:
This script monitors and displays the real-time usage of CPU and memory on a Raspberry Pi Pico. It provides a visual representation of the usage percentages using ASCII bars, making it easy for users to gauge system resource utilization.

Usage:
1. Ensure you have the necessary dependencies installed (psutil library).
2. Run the script on your Raspberry Pi Pico.
3. Observe the dynamic updates of CPU and memory usage with corresponding ASCII bars.

Features:
- Real-time monitoring of CPU and memory usage.
- Visual representation with ASCII bars for quick interpretation.
- Continuously updates every 0.5 seconds to provide live feedback.

Requirements:
- psutil library. Install using 'pip install psutil'.

Note: This script is specifically designed for Raspberry Pi Pico. Ensure dependencies are met before execution.

Enjoy monitoring the resource utilization of your Raspberry Pi Pico with this simple and informative script!
""""""
import time
import psutil

def display_usage(cpu_usage, mem_usage, bars=50):
    cpu_percent = (cpu_usage / 100.0)
    cpu_bar = 'â' * int(cpu_percent * bars) + '-' * (bars - int(cpu_percent * bars))
    
    mem_percent = (mem_usage / 100.0)
    mem_bar = 'â' * int(mem_percent * bars) + '-' * (bars - int(mem_percent * bars))
    
    print(f""\rCPU USAGE:  |{cpu_bar}| {cpu_usage:.2f}%  "", end="""")
    print(f""\MEM USAGE:  |{mem_bar}| {mem_usage:.2f}%  "", end=""\r"")
    

while True:
    display_usage(psutil.cpu_percent(), psutil.virtual_memory().percent, 30)
    time.sleep(0.5)
"
EnVVfJAv,pico_pinout2,Python253,Python,Saturday 2nd of March 2024 06:51:11 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: pico_pinout2.py
# Author: Jeoi Reqi

""""""
Pico Pinout 2 - Raspberry Pi Pico Pinout Mapping Script

Description:
This script provides a comprehensive pinout mapping for the Raspberry Pi Pico microcontroller output to the terminal in plain text.
It assists users in understanding the functions associated with each GPIO pin, their aliases, and the corresponding pin types.
The pin types include information on whether a pin serves as a digital input/output, analog input, or has a special function.

Usage:
1. Make sure you have CircuitPython installed on your Raspberry Pi Pico.
2. Connect your Pico to your computer via USB.
3. Run this script to generate a detailed pinout mapping for the Raspberry Pi Pico.

Requirements:
- Adafruit CircuitPython library installed on your Raspberry Pi Pico.
- Compatible hardware setup with Raspberry Pi Pico.

For Adafruit CircuitPython setup instructions, visit:
https://learn.adafruit.com/getting-started-with-raspberry-pi-pico-circuitpython/overview

Note: Ensure your CircuitPython is properly installed before running this script.

Enjoy exploring the capabilities of your Raspberry Pi Pico with this convenient pinout mapping tool!
""""""

import microcontroller
import board
from collections import OrderedDict

board_pins_mapping = OrderedDict([
    (""GPIO1"", 1),
    (""GPIO2"", 2),
    (""GPIO3 (Ground)"", 3),
    (""GPIO4"", 4),
    (""GPIO5"", 5),
    (""GPIO6"", 6),
    (""GPIO7"", 7),
    (""GPIO8 (Ground)"", 8),
    (""GPIO9"", 9),
    (""GPIO10"", 10),
    (""GPIO11"", 11),
    (""GPIO12"", 12),
    (""GPIO13 (Ground)"", 13),
    (""GPIO14"", 14),
    (""GPIO15"", 15),
    (""GPIO16"", 16),
    (""GPIO17"", 17),
    (""GPIO18 (Ground)"", 18),
    (""GPIO19"", 19),
    (""GPIO20"", 20),
    (""GPIO21"", 21),
    (""GPIO22"", 22),
    (""GPIO23 (Ground)"", 23),
    (""GPIO24"", 24),
    (""GPIO25"", 25),
    (""GPIO26"", 26),
    (""GPIO27"", 27),
    (""GPIO28 (Ground)"", 28),
    (""GPIO29"", 29),
    (""RUN (Reset)"", 30),
    (""GPIO31"", 31),
    (""GPIO32"", 32),
    (""GPIO33 (Ground, Analog Ground)"", 33),
    (""GPIO34"", 34),
    (""ADC_VREF"", 35),
    (""3V3 (3.3V Output)"", 36),
    (""3V3_EN (Enable 3V3 Output)"", 37),
    (""GPIO38 (Ground)"", 38),
    (""VSYS (System Voltage)"", 39),
    (""VBUS (Power Input)"", 40),
    (""DEBUG-SWCLK"", 41),
    (""DEBUG-GND (Ground)"", 42),
    (""DEBUG-SWDIO"", 43)
])

# Pin Types
pin_types = {
    1: ""SPI0 RX, I2C0 SDA, UART0 TX"",
    2: ""SPI0 CSn, I2C0 SCL, UART0 RX"",
    3: ""Ground"",
    4: ""SPI0 SCK, I2C1 SDA, UART0 CTS"",
    5: ""SPI0 TX, I2C1 SCL, UART0 RTS"",
    6: ""SPI0 RX, I2C0 SDA, UART1 TX"",
    7: ""SPI0 CSn, I2C0 SCL, UART1 RX"",
    8: ""Ground"",
    9: ""SPI0 SCK, I2C1 SDA, UART1 CTS"",
    10: ""SPI0 TX, I2C1 SCL, UART1 RTS"",
    11: ""SPI1 RX, I2C0 SDA, UART1 TX"",
    12: ""SPI1 CSn, I2C0 SCL, UART1 RX"",
    13: ""Ground"",
    14: ""SPI1 SCK, I2C1 SDA, UART1 CTS"",
    15: ""SPI1 TX, I2C1 SCL, UART1 RTS"",
    16: ""SPI1 RX, I2C0 SDA, UART0 TX"",
    17: ""SPI1 CSn, I2C0 SCL, UART0 RX"",
    18: ""Ground"",
    19: ""SPI1 SCK, I2C1 SDA, UART0 CTS"",
    20: ""SPI1 TX, I2C1 SCL, UART0 RTS"",
    21: ""I2C0 SCL, UART1 RX"",
    22: ""I2C0 SDA, UART1 TX"",
    23: ""Ground"",
    24: ""SPI0 CSn, I2C"",
    25: ""SPI0 TX, I2C1 SCL, UART0 RTS"",
    26: ""I2C0 SDA, UART1 TX"",
    27: ""I2C0 SCL, UART1 RX"",
    28: ""Ground"",
    29: ""SPI0 SCK, I2C1 SDA, UART1 CTS"",
    30: ""Reset Button"",
    31: ""ADC0"",
    32: ""ADC1, I2C1 SCL, UART1 RTS"",
    33: ""Ground"",
    34: ""ADC2, UART0 TX"",
    35: ""ADC_VREF"",
    36: ""3.3V Output"",
    37: ""Enable 3V3 Output"",
    38: ""Ground"",
    39: ""System Voltage"",
    40: ""Power Input"",
    41: ""DEBUG"",
    42: ""DEBUG Ground"",
    43: ""DEBUG""
}

# Print Pin Mapping
print(""------------------------------------------------------------------------------------------\n\t\t\t[Raspberry Pi Pico Board Pins]\n------------------------------------------------------------------------------------------\n\n\n---------\t-------------\t\t\t--------------\t\t------------------\nGPIO Pin:\tAlias:\t\t\t\tPin Functions:\t\t\tPin Types:\n---------\t-------------\t\t\t--------------\t\t------------------\n"")

for pin, number in board_pins_mapping.items():
    pin_alias = pin
    pin_functions = pin_types.get(number, ""Unknown"")
    print(""GPIO {}: \t{}\t\t\t{}\t\t{}"".format(number, pin_alias, pin_functions, pin_types[number]))

print(""\n------------------------------------------------------------------------------------------\n\t\t\t\t\tEND\n------------------------------------------------------------------------------------------"")

"
qBxKE0am,GetBookInfoGB.ps1,Combreal,PowerShell,Saturday 2nd of March 2024 06:32:48 PM CDT,"#9782368528310"" #9782368528310 #9782382750216 #9782382751626 #9782871293545

$ISBN = ""2382751622""

$req = Invoke-RestMethod -Method ""GET"" -URI ""https://www.googleapis.com/books/v1/volumes?q=isbn:$ISBN""
$infos = $req.items.volumeInfo
$authors = $infos.authors
$title = $infos.title
$publishedDate = $infos.publishedDate
$pageCount = $infos.pageCount
$printType = $infos.printType
$maturityRating = $infos.maturityRating
$language = $infos.language
$publisher = $infos.publisher
$coverLink = """"

$parsedHtml = (Invoke-WebRequest $req.items.volumeInfo.infoLink).ParsedHtml
$additionalInfos = ($parsedHtml.getElementsByTagName('td') | Where-Object { $_.className -eq 'metadata_value' }).innerText
If ([String]::IsNullOrEmpty($req.items.volumeInfo.Authors)) {
    $authors = $additionalInfos[1]
}

If ([String]::IsNullOrEmpty($req.items.volumeInfo.publisher)) {
    $publisher = $additionalInfos[2].Substring(0, $additionalInfos[2].IndexOf("","")) 
}

If ([String]::IsNullOrEmpty($req.items.volumeInfo.pageCount) -Or $req.items.volumeInfo.pageCount -eq ""0"") {
    $pageCount = $additionalInfos[4]
}

write-host $authors
write-host $title
write-host $publishedDate
write-host $pageCount
write-host $printType
write-host $maturityRating
write-host $language
write-host $publisher"
mg9aqqK7,2024-03-02_stats.json,rdp_snitch,JSON,Saturday 2nd of March 2024 06:18:06 PM CDT,"{
  ""ip"": {
    ""103.143.207.200"": 1263,
    ""120.240.145.8"": 3,
    ""98.159.37.36"": 3,
    ""87.251.75.145"": 12,
    ""167.94.138.49"": 3,
    ""205.210.31.222"": 9,
    ""45.227.254.9"": 3,
    ""92.51.2.11"": 3,
    ""87.251.75.64"": 3,
    ""81.19.135.2"": 9,
    ""185.170.144.3"": 9,
    ""185.161.248.148"": 3,
    ""212.70.149.142"": 9,
    ""62.204.41.107"": 18,
    ""194.165.16.37"": 6,
    ""81.19.135.47"": 9,
    ""194.165.16.78"": 6,
    ""67.211.213.146"": 3,
    ""198.235.24.67"": 9,
    ""36.91.222.100"": 6,
    ""213.109.202.232"": 9,
    ""109.205.162.12"": 3,
    ""49.157.28.24"": 3,
    ""185.129.51.52"": 3,
    ""120.89.61.118"": 9,
    ""103.120.18.138"": 6,
    ""165.154.100.42"": 3,
    ""176.113.115.58"": 3,
    ""212.70.149.146"": 3,
    ""205.210.31.212"": 9,
    ""165.227.4.71"": 12,
    ""138.68.8.233"": 3,
    ""45.227.254.54"": 6,
    ""194.165.16.73"": 6,
    ""136.144.35.136"": 3,
    ""172.232.251.69"": 810,
    ""205.210.31.169"": 9
  },
  ""asn"": {
    ""AS18403"": 1263,
    ""AS56040"": 3,
    ""AS62240"": 3,
    ""AS208091"": 15,
    ""AS398324"": 3,
    ""AS396982"": 36,
    ""AS267784"": 9,
    ""AS209588"": 21,
    ""AS197414"": 9,
    ""AS49202"": 3,
    ""AS204428"": 12,
    ""AS59425"": 18,
    ""AS48721"": 18,
    ""AS19318"": 3,
    ""AS7713"": 6,
    ""AS208312"": 9,
    ""AS196961"": 3,
    ""AS9658"": 12,
    ""AS200532"": 3,
    ""AS131939"": 6,
    ""AS135377"": 3,
    ""AS57678"": 3,
    ""AS14061"": 15,
    ""AS396356"": 3,
    ""AS63949"": 810
  },
  ""isp"": {
    ""Vietnam Internet Network Information Center"": 1263,
    ""China Mobile communications corporation"": 3,
    ""LogicWeb Inc."": 3,
    ""Xhost Internet Solutions LP"": 24,
    ""Censys, Inc."": 3,
    ""Google LLC"": 36,
    ""Flyservers S.A."": 48,
    ""Kisara LLC"": 3,
    ""SS-Net"": 12,
    ""Horizon LLC"": 18,
    ""Interserver, Inc"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Red Byte LLC"": 9,
    ""Teleport IP BLK1"": 3,
    ""Eastern Telecommunications Philippines, Inc."": 12,
    ""LLP \""Kompaniya Hoster.KZ\"""": 3,
    ""IPS INC"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Cat Technologies Co. Limited"": 3,
    ""DigitalOcean, LLC"": 15,
    ""Latitude.sh"": 3,
    ""Akamai Technologies, Inc."": 810
  },
  ""org"": {
    ""Everest Global Joint Stock Company"": 1263,
    ""China Mobile"": 3,
    ""Dedicated Servers"": 3,
    ""Xhost Internet Solutions"": 15,
    ""Censys, Inc"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""UAB Host Baltic"": 9,
    ""Alviva Holding Limited"": 21,
    ""Xhostis"": 9,
    ""Kisara LLC"": 3,
    ""4Media Ltd"": 12,
    ""Horizon LLC"": 18,
    ""Flyservers S.A"": 18,
    ""Interserver, Inc"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Unknown"": 3,
    ""DSL Network"": 3,
    ""Hosterkz Network"": 3,
    ""Eastern Telecommunications Philippines, Inc"": 9,
    ""IPS Inc"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Cat Technologies Co. Limited"": 3,
    ""DigitalOcean, LLC"": 15,
    ""Panq B.V"": 3,
    ""Akamai Technologies, Inc."": 810
  },
  ""regionName"": {
    ""Hanoi"": 1263,
    ""Guangdong"": 3,
    ""California"": 54,
    ""North Holland"": 24,
    ""Michigan"": 3,
    ""Vilnius"": 9,
    ""Moscow"": 36,
    ""Hesse"": 18,
    ""Plovdiv"": 12,
    ""Kaunas"": 18,
    ""New Jersey"": 6,
    ""Jakarta"": 816,
    ""Baku City"": 3,
    ""Metro Manila"": 15,
    ""Karaganda"": 3,
    ""Tokyo"": 6
  },
  ""country"": {
    ""Vietnam"": 1263,
    ""China"": 3,
    ""United States"": 63,
    ""The Netherlands"": 24,
    ""Lithuania"": 27,
    ""Russia"": 36,
    ""Germany"": 18,
    ""Bulgaria"": 12,
    ""Indonesia"": 816,
    ""Azerbaijan"": 3,
    ""Philippines"": 15,
    ""Kazakhstan"": 3,
    ""Japan"": 6
  },
  ""account"": {
    ""hello"": 1290,
    ""(empty)"": 15,
    ""Administr"": 42,
    ""UQIiIQUeP"": 3,
    ""ezHOWp"": 3,
    ""gidtYk"": 3,
    ""Domain"": 39,
    ""Test"": 39,
    ""XPsNYPvUr"": 3,
    ""VPyMNY"": 3,
    ""HgSoKl"": 3,
    ""Administrator"": 138,
    ""NSdwLqpBo"": 3,
    ""cOlzei"": 3,
    ""HutKsB"": 3,
    ""5nppoyby"": 12,
    ""beio"": 3,
    ""Admin"": 135,
    ""Whatuptime.com"": 135,
    ""Jakartakini123#"": 135,
    ""Student"": 135,
    ""Azureuser"": 135,
    ""XMIhtHIkf"": 3,
    ""wOlksU"": 3,
    ""OmmwdK"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2289
  },
  ""client_build"": {
    ""Unknown"": 2289
  },
  ""client_name"": {
    ""Unknown"": 2289
  },
  ""ip_type"": {
    ""Unknown"": 1404,
    ""mobile"": 3,
    ""hosting & proxy"": 21,
    ""hosting"": 852,
    ""proxy"": 9
  }
}"
DHU5EfsC,2024-03-02_stats.json,rdp_snitch,JSON,Saturday 2nd of March 2024 06:16:15 PM CDT,"{
  ""ip"": {
    ""103.143.207.200"": 842,
    ""120.240.145.8"": 2,
    ""98.159.37.36"": 2,
    ""87.251.75.145"": 8,
    ""167.94.138.49"": 2,
    ""205.210.31.222"": 6,
    ""45.227.254.9"": 2,
    ""92.51.2.11"": 2,
    ""87.251.75.64"": 2,
    ""81.19.135.2"": 6,
    ""185.170.144.3"": 6,
    ""185.161.248.148"": 2,
    ""212.70.149.142"": 6,
    ""62.204.41.107"": 12,
    ""194.165.16.37"": 4,
    ""81.19.135.47"": 6,
    ""194.165.16.78"": 4,
    ""67.211.213.146"": 2,
    ""198.235.24.67"": 6,
    ""36.91.222.100"": 4,
    ""213.109.202.232"": 6,
    ""109.205.162.12"": 2,
    ""49.157.28.24"": 2,
    ""185.129.51.52"": 2,
    ""120.89.61.118"": 6,
    ""103.120.18.138"": 4,
    ""165.154.100.42"": 2,
    ""176.113.115.58"": 2,
    ""212.70.149.146"": 2,
    ""205.210.31.212"": 6,
    ""165.227.4.71"": 8,
    ""138.68.8.233"": 2,
    ""45.227.254.54"": 4,
    ""194.165.16.73"": 4,
    ""136.144.35.136"": 2,
    ""172.232.251.69"": 540,
    ""205.210.31.169"": 6
  },
  ""asn"": {
    ""AS18403"": 842,
    ""AS56040"": 2,
    ""AS62240"": 2,
    ""AS208091"": 10,
    ""AS398324"": 2,
    ""AS396982"": 24,
    ""AS267784"": 6,
    ""AS209588"": 14,
    ""AS197414"": 6,
    ""AS49202"": 2,
    ""AS204428"": 8,
    ""AS59425"": 12,
    ""AS48721"": 12,
    ""AS19318"": 2,
    ""AS7713"": 4,
    ""AS208312"": 6,
    ""AS196961"": 2,
    ""AS9658"": 8,
    ""AS200532"": 2,
    ""AS131939"": 4,
    ""AS135377"": 2,
    ""AS57678"": 2,
    ""AS14061"": 10,
    ""AS396356"": 2,
    ""AS63949"": 540
  },
  ""isp"": {
    ""Vietnam Internet Network Information Center"": 842,
    ""China Mobile communications corporation"": 2,
    ""LogicWeb Inc."": 2,
    ""Xhost Internet Solutions LP"": 16,
    ""Censys, Inc."": 2,
    ""Google LLC"": 24,
    ""Flyservers S.A."": 32,
    ""Kisara LLC"": 2,
    ""SS-Net"": 8,
    ""Horizon LLC"": 12,
    ""Interserver, Inc"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Red Byte LLC"": 6,
    ""Teleport IP BLK1"": 2,
    ""Eastern Telecommunications Philippines, Inc."": 8,
    ""LLP \""Kompaniya Hoster.KZ\"""": 2,
    ""IPS INC"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Cat Technologies Co. Limited"": 2,
    ""DigitalOcean, LLC"": 10,
    ""Latitude.sh"": 2,
    ""Akamai Technologies, Inc."": 540
  },
  ""org"": {
    ""Everest Global Joint Stock Company"": 842,
    ""China Mobile"": 2,
    ""Dedicated Servers"": 2,
    ""Xhost Internet Solutions"": 10,
    ""Censys, Inc"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""UAB Host Baltic"": 6,
    ""Alviva Holding Limited"": 14,
    ""Xhostis"": 6,
    ""Kisara LLC"": 2,
    ""4Media Ltd"": 8,
    ""Horizon LLC"": 12,
    ""Flyservers S.A"": 12,
    ""Interserver, Inc"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Unknown"": 2,
    ""DSL Network"": 2,
    ""Hosterkz Network"": 2,
    ""Eastern Telecommunications Philippines, Inc"": 6,
    ""IPS Inc"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Cat Technologies Co. Limited"": 2,
    ""DigitalOcean, LLC"": 10,
    ""Panq B.V"": 2,
    ""Akamai Technologies, Inc."": 540
  },
  ""regionName"": {
    ""Hanoi"": 842,
    ""Guangdong"": 2,
    ""California"": 36,
    ""North Holland"": 16,
    ""Michigan"": 2,
    ""Vilnius"": 6,
    ""Moscow"": 24,
    ""Hesse"": 12,
    ""Plovdiv"": 8,
    ""Kaunas"": 12,
    ""New Jersey"": 4,
    ""Jakarta"": 544,
    ""Baku City"": 2,
    ""Metro Manila"": 10,
    ""Karaganda"": 2,
    ""Tokyo"": 4
  },
  ""country"": {
    ""Vietnam"": 842,
    ""China"": 2,
    ""United States"": 42,
    ""The Netherlands"": 16,
    ""Lithuania"": 18,
    ""Russia"": 24,
    ""Germany"": 12,
    ""Bulgaria"": 8,
    ""Indonesia"": 544,
    ""Azerbaijan"": 2,
    ""Philippines"": 10,
    ""Kazakhstan"": 2,
    ""Japan"": 4
  },
  ""account"": {
    ""hello"": 860,
    ""(empty)"": 10,
    ""Administr"": 28,
    ""UQIiIQUeP"": 2,
    ""ezHOWp"": 2,
    ""gidtYk"": 2,
    ""Domain"": 26,
    ""Test"": 26,
    ""XPsNYPvUr"": 2,
    ""VPyMNY"": 2,
    ""HgSoKl"": 2,
    ""Administrator"": 92,
    ""NSdwLqpBo"": 2,
    ""cOlzei"": 2,
    ""HutKsB"": 2,
    ""5nppoyby"": 8,
    ""beio"": 2,
    ""Admin"": 90,
    ""Whatuptime.com"": 90,
    ""Jakartakini123#"": 90,
    ""Student"": 90,
    ""Azureuser"": 90,
    ""XMIhtHIkf"": 2,
    ""wOlksU"": 2,
    ""OmmwdK"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1526
  },
  ""client_build"": {
    ""Unknown"": 1526
  },
  ""client_name"": {
    ""Unknown"": 1526
  },
  ""ip_type"": {
    ""Unknown"": 936,
    ""mobile"": 2,
    ""hosting & proxy"": 14,
    ""hosting"": 568,
    ""proxy"": 6
  }
}"
xn2bcVwJ,2024-03-02_stats.json,rdp_snitch,JSON,Saturday 2nd of March 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""103.143.207.200"": 421,
    ""120.240.145.8"": 1,
    ""98.159.37.36"": 1,
    ""87.251.75.145"": 4,
    ""167.94.138.49"": 1,
    ""205.210.31.222"": 3,
    ""45.227.254.9"": 1,
    ""92.51.2.11"": 1,
    ""87.251.75.64"": 1,
    ""81.19.135.2"": 3,
    ""185.170.144.3"": 3,
    ""185.161.248.148"": 1,
    ""212.70.149.142"": 3,
    ""62.204.41.107"": 6,
    ""194.165.16.37"": 2,
    ""81.19.135.47"": 3,
    ""194.165.16.78"": 2,
    ""67.211.213.146"": 1,
    ""198.235.24.67"": 3,
    ""36.91.222.100"": 2,
    ""213.109.202.232"": 3,
    ""109.205.162.12"": 1,
    ""49.157.28.24"": 1,
    ""185.129.51.52"": 1,
    ""120.89.61.118"": 3,
    ""103.120.18.138"": 2,
    ""165.154.100.42"": 1,
    ""176.113.115.58"": 1,
    ""212.70.149.146"": 1,
    ""205.210.31.212"": 3,
    ""165.227.4.71"": 4,
    ""138.68.8.233"": 1,
    ""45.227.254.54"": 2,
    ""194.165.16.73"": 2,
    ""136.144.35.136"": 1,
    ""172.232.251.69"": 270,
    ""205.210.31.169"": 3
  },
  ""asn"": {
    ""AS18403"": 421,
    ""AS56040"": 1,
    ""AS62240"": 1,
    ""AS208091"": 5,
    ""AS398324"": 1,
    ""AS396982"": 12,
    ""AS267784"": 3,
    ""AS209588"": 7,
    ""AS197414"": 3,
    ""AS49202"": 1,
    ""AS204428"": 4,
    ""AS59425"": 6,
    ""AS48721"": 6,
    ""AS19318"": 1,
    ""AS7713"": 2,
    ""AS208312"": 3,
    ""AS196961"": 1,
    ""AS9658"": 4,
    ""AS200532"": 1,
    ""AS131939"": 2,
    ""AS135377"": 1,
    ""AS57678"": 1,
    ""AS14061"": 5,
    ""AS396356"": 1,
    ""AS63949"": 270
  },
  ""isp"": {
    ""Vietnam Internet Network Information Center"": 421,
    ""China Mobile communications corporation"": 1,
    ""LogicWeb Inc."": 1,
    ""Xhost Internet Solutions LP"": 8,
    ""Censys, Inc."": 1,
    ""Google LLC"": 12,
    ""Flyservers S.A."": 16,
    ""Kisara LLC"": 1,
    ""SS-Net"": 4,
    ""Horizon LLC"": 6,
    ""Interserver, Inc"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Red Byte LLC"": 3,
    ""Teleport IP BLK1"": 1,
    ""Eastern Telecommunications Philippines, Inc."": 4,
    ""LLP \""Kompaniya Hoster.KZ\"""": 1,
    ""IPS INC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Cat Technologies Co. Limited"": 1,
    ""DigitalOcean, LLC"": 5,
    ""Latitude.sh"": 1,
    ""Akamai Technologies, Inc."": 270
  },
  ""org"": {
    ""Everest Global Joint Stock Company"": 421,
    ""China Mobile"": 1,
    ""Dedicated Servers"": 1,
    ""Xhost Internet Solutions"": 5,
    ""Censys, Inc"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""UAB Host Baltic"": 3,
    ""Alviva Holding Limited"": 7,
    ""Xhostis"": 3,
    ""Kisara LLC"": 1,
    ""4Media Ltd"": 4,
    ""Horizon LLC"": 6,
    ""Flyservers S.A"": 6,
    ""Interserver, Inc"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Unknown"": 1,
    ""DSL Network"": 1,
    ""Hosterkz Network"": 1,
    ""Eastern Telecommunications Philippines, Inc"": 3,
    ""IPS Inc"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Cat Technologies Co. Limited"": 1,
    ""DigitalOcean, LLC"": 5,
    ""Panq B.V"": 1,
    ""Akamai Technologies, Inc."": 270
  },
  ""regionName"": {
    ""Hanoi"": 421,
    ""Guangdong"": 1,
    ""California"": 18,
    ""North Holland"": 8,
    ""Michigan"": 1,
    ""Vilnius"": 3,
    ""Moscow"": 12,
    ""Hesse"": 6,
    ""Plovdiv"": 4,
    ""Kaunas"": 6,
    ""New Jersey"": 2,
    ""Jakarta"": 272,
    ""Baku City"": 1,
    ""Metro Manila"": 5,
    ""Karaganda"": 1,
    ""Tokyo"": 2
  },
  ""country"": {
    ""Vietnam"": 421,
    ""China"": 1,
    ""United States"": 21,
    ""The Netherlands"": 8,
    ""Lithuania"": 9,
    ""Russia"": 12,
    ""Germany"": 6,
    ""Bulgaria"": 4,
    ""Indonesia"": 272,
    ""Azerbaijan"": 1,
    ""Philippines"": 5,
    ""Kazakhstan"": 1,
    ""Japan"": 2
  },
  ""account"": {
    ""hello"": 430,
    ""(empty)"": 5,
    ""Administr"": 14,
    ""UQIiIQUeP"": 1,
    ""ezHOWp"": 1,
    ""gidtYk"": 1,
    ""Domain"": 13,
    ""Test"": 13,
    ""XPsNYPvUr"": 1,
    ""VPyMNY"": 1,
    ""HgSoKl"": 1,
    ""Administrator"": 46,
    ""NSdwLqpBo"": 1,
    ""cOlzei"": 1,
    ""HutKsB"": 1,
    ""5nppoyby"": 4,
    ""beio"": 1,
    ""Admin"": 45,
    ""Whatuptime.com"": 45,
    ""Jakartakini123#"": 45,
    ""Student"": 45,
    ""Azureuser"": 45,
    ""XMIhtHIkf"": 1,
    ""wOlksU"": 1,
    ""OmmwdK"": 1
  },
  ""keyboard"": {
    ""Unknown"": 763
  },
  ""client_build"": {
    ""Unknown"": 763
  },
  ""client_name"": {
    ""Unknown"": 763
  },
  ""ip_type"": {
    ""Unknown"": 468,
    ""mobile"": 1,
    ""hosting & proxy"": 7,
    ""hosting"": 284,
    ""proxy"": 3
  }
}"
8uayhNaf,pumpe2.py,DeaD_EyE,Python,Saturday 2nd of March 2024 06:13:59 PM CDT,"import time
from enum import Enum
from dataclasses import dataclass, field

from rich import get_console
from rich.live import Live
from rich.table import Table

from wled import set_level


console = get_console()


def get_status(step, height, status) -> Table:
    table = Table()
    table.add_row(""Step"", str(step))
    table.add_row(""Height"", f""{height:.2f}"")
    table.add_row(""Status"", str(status))
    return table


class Direction(str, Enum):
    a_to_b = ""A to B""
    b_to_a = ""B to A""


@dataclass
class Height:
    min : int | float
    max : int | float
    step : int | float = field(default=1)

    def __post_init__(self):
        self._value = 50.0
        console.print(""Height measurement initialized"")
        console.print(f""Min-Height: {self.min} mm"")
        console.print(f""Max-Height: {self.max} mm"")
        console.print(f""Step: {self.step} mm"")
        console.print(f""Value: {self.value:.2f} mm"")

    @property
    def value(self) -> int | float:
        return self._value

    @value.setter
    def value(self, value):
        console.print(""Setting new height to:"", value)
        self._value = value

    @property
    def ok(self) -> bool:
        return self.min <= self.value <= self.max

    @property
    def min_ok(self) -> bool:
        return self.min < self.value

    @property
    def max_ok(self) -> bool:
        return self.max > self.value

    def update(self, direction: Direction | None) -> int | float:
        if direction is Direction.a_to_b:
            self._value -= self.step
        elif direction is Direction.b_to_a:
            self._value += self.step


@dataclass
class Pumpe:
    name : str

    def __post_init__(self):
         self._state = None
         console.print(f""Created {self.name}."")

    @property
    def state(self) -> Direction:
        return self._state

    def a_to_b(self):
        self._state = Direction.a_to_b
        # console.print(f""{self.name}: {self._state.value}"")

    def b_to_a(self):
        self._state = Direction.b_to_a
        # console.print(f""{self.name}: {self._state.value}"")

    def stop(self):
        self._state = None
        # console.print(f""{self.name}: Stop"")



def main(live):
    delay = 0.005
    step_size = (140 / 14) * delay
    console.print(f""Simulation with step_size of {step_size:.2f} and a delay of {delay:.3f}s"")

    height = Height(min=15.0, max=100.0, step=step_size)
    height.value = 100.0

    pumpe = Pumpe(""Pupe 1"")

    console.print(""Starting main loop"")
    step = 0
    timer = 1.0

    while True:
        time.sleep(delay)

        height.update(pumpe.state)
        # console.print(f""Height: {height.value:.2f}"")
        # console.print(""\nStep:"", step)
        live.update(get_status(step, height.value, pumpe.state))
        set_level(height.value, min_value=0.0, max_value=140.0)

        #  0 [      start  ] -> Pumpe stoppen | ->  1

        #              Verzweigung
        #  1 [      max_ok ] -> Von b nach a  | -> 10
        #  1 [ not max_ok  ] -> Von a nach b  | -> 20

        #              von b nach a
        # 10 [ not max_ok  ] -> Pumpe stoppen | -> 11
        # 11 [ time 4 s    ] ->               | -> 20

        #              von a nach b
        # 20 [             ] -> Von a nach b  | -> 21
        # 21 [  not min_ok ] -> Pumpe stoppen | -> 30

        # 30 [             ] ->               | ->  0

        match step:
            case 0:
                step = 1
                pumpe.stop()
                input(""Enter to start: "")
                console.clear()

            case 1 if height.max_ok:
                step = 10
                pumpe.b_to_a()

            case 1 if not height.max_ok:
                step = 20
                pumpe.a_to_b()

            case 10 if not height.max_ok:
                step = 11
                pumpe.stop()

            case 11:
                step = 20
                # console.print(f""Delay of {timer}s"")
                time.sleep(timer)

            case 20:
                step = 21
                pumpe.a_to_b()

            case 21 if not height.min_ok:
                step = 30
                pumpe.stop()

            case 30:
                step = 0


if __name__ == ""__main__"":
    console.print(""Starting simulation"")
    try:
        with Live(refresh_per_second=60) as live:
            main(live)
    except KeyboardInterrupt:
        print()

"
hkDAYEfY,Untitled,nicoviale_,Python,Saturday 2nd of March 2024 05:54:51 PM CDT,"ENGLISHFREQ = {
    'A': 0.082, 'B': 0.015, 'C': 0.028, 'D': 0.043, 'E': 0.127, 'F': 0.022, 'G': 0.020, 
    'H': 0.061, 'I': 0.070, 'J': 0.002, 'K': 0.008, 'L': 0.040, 'M': 0.024, 'N': 0.067, 
    'O': 0.075, 'P': 0.019, 'Q': 0.001, 'R': 0.060, 'S': 0.063, 'T': 0.091, 'U': 0.028, 
    'V': 0.010, 'W': 0.023, 'X': 0.001, 'Y': 0.020, 'Z': 0.001
}

ciphertext=input()

#mappa la frequenza di ogni lettera in una data stringa
def frequency(ciphertext):
    freq = {chr(i + ord('A')): 0 for i in range(26)}

    for char in ciphertext:
        freq[char] += 1

    return freq

#taglia la stringa tenendo solo i caratteri che sono in una posizione multipla del modulo dato
#(per selezionare con shift di 1 basta togliere il primo carattere e passare quello alla funzione, eccetera)
def split_string(s,mod):
    return s[::mod]

#ricerca nelle coppie lo shift che ha generato il lambda maggiore
def find_max_M(possibili_shift):
    return max(possibili_shift, key=lambda pair: pair[1])

#trova tutti gli shift e i loro relativi m, restituisce quello con l'm piu grande
def get_shift_of_best_M(stringa):
    n=len(stringa)

    possibili_shift=[]

    #array frequenze
    frequenzaRiscontrata=[]
    for key in ENGLISHFREQ:
        frequenzaRiscontrata.append(stringa.count(key))

    #calcolo indice di mutua coincidenza per ogni g(shift) possibile
    for g in range(0,26):    
        M=0
        i=0
        for key,value  in ENGLISHFREQ.items():
            M+=(value*frequenzaRiscontrata[(i+g)%26])/n
            i+=1
        possibili_shift.append((g,M))
    
    #trovo il maggiore shift
    max_pair = find_max_M(possibili_shift)

    return(max_pair[0])




#supposta lunghezza della chiave
key_len = 8  #siuuuuuuu

#lista di sottostringhe
substrings = []

#ricavo le sottostringhe tagliando a intervalli regolari la stringa iniziale
for i in range(0,key_len):
    substrings.append(split_string(ciphertext[i:],key_len))

print(substrings)

#stampo le frequenze per ogni substring(non utilizzato ma utile per debug)
freq_list = [(frequency(substring)) for substring in substrings]

print(freq_list)

shift_list=[0]*key_len

#calcolo lo shift migliore per ogni sottostringa 
for i in range(0,key_len):
    shift_list[i]=get_shift_of_best_M(substrings[i])

print(shift_list)


#chr(65) -> A
#ord('a')-> 97

final_array=['*']*len(ciphertext)
i=0
#ciclo ogni lettera e faccio la sostituzione con la relativa chiave
for letter in ciphertext:
    final_array[i]=chr(ord('A')+ (ord(letter)-ord('A')-shift_list[i%key_len])%26)
    i+=1

#converto l'array in una stringa per la stampa finale
stringa_output= ''.join(final_array)

print(stringa_output)
"
EACV1n8g,wled.py,DeaD_EyE,Python,Saturday 2nd of March 2024 05:32:23 PM CDT,"import atexit

from struct import Struct
from socket import socket, AF_INET, SOCK_DGRAM
from itertools import chain


WLED_ADDR = (""192.168.0.215"", 21324)
sock = socket(AF_INET, SOCK_DGRAM)

atexit.register(sock.close)


def set_leds(colors, addr=WLED_ADDR):
    if len(colors) > 490:
        raise ValueError(""Too many LEDs"")

    leds = chain.from_iterable(colors)
    data_len = len(colors) * 3
    proto = 2
    delay = 10

    # Protokoll 2 == RGB

    # Protokoll, Timeout, [Rn,Gn,Bn], ... 
    st = Struct(f""!BB{data_len}B"")
    sock.sendto(st.pack(proto, delay, *leds), WLED_ADDR)


def set_level(value, /, min_value=0, max_value=140, leds=72):
    relative = (value - min_value) / (max_value - min_value)

    on_count = round(relative * leds)
    off_count = leds - on_count

    r = min(255, max(0, int(relative * 255)))
    g = 0
    b = 255 - r

    color = (r , g , b)
    colors = [color] * on_count + [(0, 0, 0)] * off_count

    set_leds(colors)


if __name__ == ""__main__"":
    try:
        while True:
            set_level(float(input(""Value: "")))
    except KeyboardInterrupt:
        pass
    except ValueError:
        pass
"
qKAjC0r8,Pumpe,DeaD_EyE,Python,Saturday 2nd of March 2024 05:31:49 PM CDT,"import time
from enum import Enum
from dataclasses import dataclass, field

from rich import get_console

from wled import set_level


console = get_console()


class Direction(str, Enum):
    a_to_b = ""A to B""
    b_to_a = ""B to A""


@dataclass
class Height:
    min : int | float
    max : int | float
    step : int | float = field(default=1)

    def __post_init__(self):
        self._value = 50.0
        console.print(""Height measurement initialized"")
        console.print(f""Min-Height: {self.min} mm"")
        console.print(f""Max-Height: {self.max} mm"")
        console.print(f""Step: {self.step} mm"")
        console.print(f""Value: {self.value:.2f} mm"")

    @property
    def value(self) -> int | float:
        return self._value

    @value.setter
    def value(self, value):
        console.print(""Setting new height to:"", value)
        self._value = value

    @property
    def ok(self) -> bool:
        return self.min <= self.value <= self.max

    @property
    def min_ok(self) -> bool:
        return self.min < self.value

    @property
    def max_ok(self) -> bool:
        return self.max > self.value

    def update(self, direction: Direction | None) -> int | float:
        if direction is Direction.a_to_b:
            self._value -= self.step
        elif direction is Direction.b_to_a:
            self._value += self.step


@dataclass
class Pumpe:
    name : str

    def __post_init__(self):
         self._state = None
         console.print(f""Created {self.name}."")

    @property
    def state(self) -> Direction:
        return self._state

    def a_to_b(self):
        self._state = Direction.a_to_b
        console.print(f""{self.name}: {self._state.value}"")

    def b_to_a(self):
        self._state = Direction.b_to_a
        console.print(f""{self.name}: {self._state.value}"")

    def stop(self):
        self._state = None
        console.print(f""{self.name}: Stop"")



def main():
    delay = 0.01
    step_size = (140 / 14) * delay
    console.print(f""Simulation with step_size of {step_size:.2f} and a delay of {delay:.3f}s"")

    height = Height(min=15.0, max=100.0, step=step_size)
    height.value = 100.0

    pumpe = Pumpe(""Pupe 1"")

    console.print(""Starting main loop"")
    step = 0
    timer = 1.0

    while True:
        time.sleep(delay)

        height.update(pumpe.state)
        console.print(f""Height: {height.value:.2f}"")
        console.print(""\nStep:"", step)   
        set_level(height.value, min_value=0.0, max_value=140.0)

        #  0 [      start  ] -> Pumpe stoppen | ->  1

        #              Verzweigung
        #  1 [      max_ok ] -> Von b nach a  | -> 10
        #  1 [ not max_ok  ] -> Von a nach b  | -> 20

        #              von b nach a
        # 10 [ not max_ok  ] -> Pumpe stoppen | -> 11
        # 11 [ time 4 s    ] ->               | -> 20

        #              von a nach b
        # 20 [             ] -> Von a nach b  | -> 21
        # 21 [  not min_ok ] -> Pumpe stoppen | -> 30

        # 30 [             ] ->               | ->  0

        match step:
            case 0:
                step = 1
                pumpe.stop()
                input(""Enter to start: "")

            case 1 if height.max_ok:
                step = 10
                pumpe.b_to_a()

            case 1 if not height.max_ok:
                step = 20
                pumpe.a_to_b()

            case 10 if not height.max_ok:
                step = 11
                pumpe.stop()

            case 11:
                step = 20
                console.print(f""Delay of {timer}s"")
                time.sleep(timer)

            case 20:
                step = 21
                pumpe.a_to_b()

            case 21 if not height.min_ok:
                step = 30
                pumpe.stop()

            case 30:
                step = 0


if __name__ == ""__main__"":
    console.print(""Starting simulation"")
    try:
        main()
    except KeyboardInterrupt:
        print()

"
cQXyhqEH,TooManyRequests: received 429 HTTP response,Vault-TecTradingCo,Python,Saturday 2nd of March 2024 04:10:01 PM CDT,"Traceback (most recent call last):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/main.py"", line 258, in main
    for comment in comment_stream:
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/util.py"", line 138, in stream_generator
    for item in reversed(list(function(limit=limit, **function_kwargs))):
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 63, in __next__
    self._next_batch()
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = self._reddit.get(self.url, params=self.params)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 712, in get
    return self._objectify_request(method=""GET"", params=params, path=path)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 517, in _objectify_request
    self.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/util/deprecate_args.py"", line 43, in wrapped
    return func(**dict(zip(_old_args, args)), **kwargs)
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/lib/python3.10/site-packages/praw/reddit.py"", line 941, in request
    return self._core.request(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 325, in request
    return self._request_with_retries(
  File ""/root/Bots/Fallout76MarketplaceKarmaTransferBot/venv/src/prawcore/prawcore/sessions.py"", line 264, in _request_with_retries
    raise self.STATUS_EXCEPTIONS[response.status_code](response)
prawcore.exceptions.TooManyRequests: received 429 HTTP response
"
e5mSpYUW,Untitled,paul_nicholls,Pascal,Saturday 2nd of March 2024 03:33:27 PM CDT,"type
  TVIC = record
    spr0_x      : Byte;
    spr0_y      : Byte;
    spr1_x      : Byte;
    spr1_y      : Byte;
    spr2_x      : Byte;
    spr2_y      : Byte;
    spr3_x      : Byte;
    spr3_y      : Byte;
    spr4_x      : Byte;
    spr4_y      : Byte;
    spr5_x      : Byte;
    spr5_y      : Byte;
    spr6_x      : Byte;
    spr6_y      : Byte;
    spr7_x      : Byte;
    spr7_y      : Byte;
    spr_hi_x    : Byte;
    cr1         : Byte;
    raster      : Byte;
    lp_x        : Byte;
    lp_y        : Byte;
    spr_ena     : Byte;
    cr2         : Byte;
    spr_exp_y   : Byte;
    mem         : Byte;
    irq         : Byte;
    irq_ena     : Byte;
    spr_dp      : Byte;
    spr_mcolor  : Byte;
    spr_exp_x   : Byte;
    spr_ss_col  : Byte;
    spr_sd_col  : Byte;
    border      : Byte;
    bg_color0   : Byte;
    bg_color1   : Byte;
    bg_color2   : Byte;
    bg_color3   : Byte;
    spr_color1  : Byte;
    spr_color2  : Byte;
    spr0_color  : Byte;
    spr1_color  : Byte;
    spr2_color  : Byte;
    spr3_color  : Byte;
    spr4_color  : Byte;
    spr5_color  : Byte;
    spr6_color  : Byte;
    spr7_color  : Byte;
  end;

var
  vic   : TVIC absolute $d000;
begin
  vic.border    := white;
  vic.bg_color0 := dark_grey;

"
XjpfT97Z,[ps] script to run python in venv,alaestor,PowerShell,Saturday 2nd of March 2024 03:01:49 PM CDT,"<#
.SYNOPSIS
	Creates and activates virtual environment, installs requirements, and
	runs a python script. See ""Get-Help path-to-script.ps1 -detailed"".
.DESCRIPTION
	This script will perform the following actions:

	1. changes the current working directory.
	2. creates and activates a python virtual environment.
	3. pip installs requirements file if it exist.
	4. runs the entrypoint python script with optional arguments.
	5. reverts to the original working directory when finished.

	The default arguments were set up for a particular use-case: they can be
	easily changed by editing the ""[CmdletBinding()]"" portion of this script.

	Note: If you're using pyenv make sure a global python is configured, or
	that a valid "".python-version"" file is present in the working_directory.
.PARAMETER working_directory
	-wd <String> (default: ""./src/"")
	The working directory for the script.
.PARAMETER virtual_environment
	-venv <String> (default: ""../.venv/"")
	The path to a virtual environment folder.
	May be absolute or relative to the working_directory argument.
	If the folder or its activate script doesn't exist, it will be created.
.PARAMETER requirements
	-r <String> (default: ""requirements.txt"")
	The path to a pip-compatible requirements file.
	May be absolute or relative to the working_directory argument.
	For ease of use, it's not an error if the file doesn't exist.
.PARAMETER entrypoint
	-py <String>
	Filepath to the python script to be executed.
	May be absolute or relative to the working_directory argument.
.PARAMETER launch_args
	-args <String[]>
	Arguments that will be forwarded to the executable. (None if empty)
.PARAMETER dry_run
	-dry
	When this argument is present, the entrypoint will not be launched.
	Instead, only a message will be printed.
.PARAMETER verbose
	Print verbose logging and debug details (Powershell feature)
.NOTES
	Author: Alaestor Weissman
	Discord: honshitsu
	Date: 2024-03
	SemVer: 0.1.0
#>

[CmdletBinding()]
Param(
	[ValidateScript({
		if (-Not (Test-Path -LiteralPath $_ ) )
			{ throw ""Working Directory folder doesn't exist."" }
		return $true
	})]
	[String] [Alias(""wd"")] $working_directory = ""./src/"",

	[ValidateNotNullorEmpty ()]
	[String] [Alias(""venv"")] $virtual_environment = ""../.venv/"",

	[ValidateScript({
		if ([System.IO.Path]::IsPathRooted($_)) {
			$t = $_
		}
		else {
			$t = Join-Path -Path $working_directory -ChildPath $_
		}
		if (-Not (Test-Path -LiteralPath $t ) )
			{ throw ""Entrypoint doesn't exist."" }
		elseif (-Not (Test-Path -LiteralPath $t -PathType Leaf) )
			{ throw ""Entrypoint is not a file."" }
		return $true
	})]

	[ValidateNotNullorEmpty ()]
	[String] [Alias(""py"")] $entrypoint = ""main.py"",

	[ValidateNotNullorEmpty ()]
	[String] [Alias(""r"")] $requirements = ""requirements.txt"",

	[String[]] [Alias(""args"")] $launch_args=@(""""),

	[Switch] [Alias(""dry"")] $dry_run
)

$original_cwd = (Get-Item .).FullName
$debug = $DebugPreference -ne ""SilentlyContinue""

function main {
	try
	{
		Write-Verbose ((
			""State"",
			""---"",
			""OWD: $original_cwd"",
			""CWD: $working_directory"",
			""DRY: $($dry_run.IsPresent)"",
			""ENT: $entrypoint"",
			""ARG: $launch_args"",
			""REQ: $requirements"",
			""DBP: $DebugPreference"",
			""---""
		)-join(""`n""))

		# Enter the working directory
		Set-Location -LiteralPath $working_directory

		# Create and Activate the virtual environment
		InitializeVirtualEnvironment($virtual_environment)

		# Install requirements if they exist (suppressing boolean output)
		[Void]$(InstallRequirements($requirements))

		# Execute the target python script
		if ($dry_run.IsPresent){
			Write-Host ""Execution was prevented (dry_run). Would have run:""
			Write-Host $entrypoint @launch_args
		}
		else {
			python $entrypoint @launch_args
		}
	}
	catch
	{
		$Host.UI.WriteErrorLine((
			""---------------"",
			""---  ERROR  ---"",
			""---------------""
			) -join ""`n""
		)
		if ($debug) {
			$_ | Format-List * -Force
			$_.InvocationInfo | Format-List *
		}
		else {
			$Host.UI.WriteErrorLine(((
					[String]$_.CategoryInfo,
					[String]$_.Exception.ErrorRecord,
					[String]$_.InvocationInfo.PositionMessage
				) -join ""`n""
			))
		}
		$Host.UI.WriteErrorLine(""---------------"")
	}
	finally
	{
		# Return to the original working directory
		Set-Location -LiteralPath $original_cwd

		# Exit virtual environment if the command to do so is available
		if ((Get-Command ""deactivate"" -ErrorAction SilentlyContinue) -ne $null) {
			deactivate
		}
	}

	Exit
}

# Creates and activates the virtual environment folder. Throws on error
function InitializeVirtualEnvironment($folderpath) {
	# Ensure we have python
	if ((Get-Command ""python"" -ErrorAction SilentlyContinue) -eq $null) {
		throw ""Python was not found""
	}

	$activate = Join-Path -Path $folderpath -ChildPath ""Scripts\Activate.ps1""

	# Create virtual environment if it doesn't already exist
	if (-not (Test-Path $activate)) {
		python -m venv $folderpath
		if ($LastExitCode -ne 0) {
			throw ""Failed to create virtual environment""
		}
	}

	# Ensure virtual environment's activate script exist
	if (-not (Test-Path $activate)) {
		throw ""Virtual environment or activate script not found""
	}

	# Activate virtual environment
	& $activate

	# Ensure Python is running in a virtual environment
	python -c 'import sys;sys.exit(0 if sys.prefix != sys.base_prefix else -1)'
	if ($LastExitCode -ne 0) {
		throw ""Python appears to not be running in a virtual environment""
	}
}

# Returns true if successful, false if file not found. Throws on error
function InstallRequirements($filepath) {
	if (Test-Path $filepath) {
		pip install -r $filepath --quiet --disable-pip-version-check
		if ($LastExitCode -ne 0) {
			throw ""Failed to install the requirements from $filepath""
		}
		return $true
	}
	return $false
}

main
"
4r88tU7D,Untitled,Derga,C++,Saturday 2nd of March 2024 02:58:11 PM CDT,"#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>

using namespace std;

void Dfs(const vector<vector<int>>& edges, vector<bool>& is_visited, int start, vector<int>& v) {
    is_visited[start] = true;
    for (int node2 : edges[start]) {
        if (is_visited[node2]) continue;
        Dfs(edges, is_visited, node2, v);
    }

    v.push_back(start);
}

int main() {
    int nodes_count, edges_count;
    cin >> nodes_count >> edges_count;

    vector<vector<int>> edges(1 + nodes_count);
    for (int i = 0; i < edges_count; ++i) {
        int node1, node2;
        cin >> node1 >> node2;
        edges[node1].push_back(node2);
    }

    vector<bool> is_visited(edges.size(), false);
    vector<int> v;
    for (int i = 1; i < is_visited.size(); ++i) {
        if (is_visited[i]) continue;

        Dfs(edges, is_visited, i, v);
    }

    reverse(begin(v), end(v));
    for (auto node : v) cout << node << ' ';

    return 0;
}
/*
test1
6 6
1 2
3 2
4 2
2 5
6 5
4 6

4 5 3 1 6 2 
*/"
z1nC4aQM,run_all_tests,AHDog,Python,Saturday 2nd of March 2024 02:53:34 PM CDT,"""""""
CSCI 447 Assignment 5 test case runner
By Sky Duryee
@ahdog on Discord

Run this Python file while cd into the `os` folder
of your assignment.

I tried my best but in the worst case 
scenario this could end up deleting TestProgram3.k. 
So be prepared to restore it.
""""""

import tempfile
import shutil
import os
import subprocess

# constants
# test output location
OUTPUT = ""test_results.txt""
# tempfile location
TEMP = ""/tmp/a5_run_all_tests_12032.txt""
# the starting line number of TestProgram3.k where the tests are
TEST_START = 27
# the number of different test cases in TestProgram3.k
NUM_TESTS = 13

# runs the test_num'th test.
# the index of the test is 0-based.
# returns a string of the output.
def run_test(test_num) -> str:
    with open(""TestProgram3.k"", mode=""r"") as testf:
        lines = list(testf)
    origlines = lines.copy()
    print(lines[0])
    
    test_index = TEST_START + test_num - 1
    test_name = lines[test_index].replace(""--"", """").strip()
    print()
    print(f""&&&&&&&&& run_all_tests.py: Running test {test_num}: {test_name} &&&&&&&&&"")

    # comment out all test lines
    for i in range(TEST_START-1, TEST_START+NUM_TESTS-1):
        lines[i] = ""--"" + lines[i]
    
    #print(f""Lines of file:\n {''.join(lines)}"")


    # uncomment the line of that specific test
    lines[test_index] = lines[test_index].replace(""--"", """")

    with open(""TestProgram3.k"", mode=""w"") as testf:
        try:
            # write back to file
            testf.writelines(lines)
            testf.flush()
    
            # make
            subprocess.run(""make"", check=True)

            # run program
            # write output to shell and to TEMP
            subprocess.run(f""blitz -g os 2>&1 | tee {TEMP}"", shell=True, text=True, check=True, stderr=subprocess.STDOUT)
            # get output from TEMP
            with open(TEMP, mode=""r"") as tempf:
                return tempf.read()
        finally:
            # write back original data to file when done
            testf.truncate(0)
            testf.seek(0)
            testf.writelines(origlines)
        
# run all tests and save to OUTPUT 
with open(OUTPUT, mode=""w"") as out:
    for i in range(NUM_TESTS):
        test_result: str = run_test(i)

        # remove stuff after **** so it looks like desired output
        end = test_result.rfind(""*****"")
        assert end != -1
        end += 5
        test_result = test_result[:end]

        # Remove first line so it looks like desired output
        test_result = ""\n"".join(test_result.splitlines()[1:])

        out.write(test_result)
        out.write(""\n\n\n"")
        out.flush()

print(""Finished running all tests!"")"
qnzCAxMv,gtk.css,Rnery,CSS,Saturday 2nd of March 2024 02:07:27 PM CDT,"/* 
    ###################################
    ## Customgtk-3.0 css definitions ##
    ###################################
*/

/* notify buttons */
#showdesktop-button image {
    -gtk-icon-transform: scale(1);
}
#pulseaudio-button image {
    -gtk-icon-transform: scale(0.5);
}
#xfce4-clipman-plugin image {
    -gtk-icon-transform: scale(0.5);
}
#xfce4-notification-plugin image {
    -gtk-icon-transform: scale(0.5);
}
#xfce4-power-manager-plugin image {
    -gtk-icon-transform: scale(0.6);
}
#xfce-panel-toggle-button image {
    -gtk-icon-transform: scale(0.6);
}

/* shrink headerbars */
headerbar {
    border: 0;
    background-color: #2d2d2d;
    border-radius: 0;
    min-height: 0;
    padding-left: 2px; /* same as childrens vertical margins for nicer proportions */
    padding-right: 2px;
}
headerbar entry,
headerbar spinbutton,
headerbar button,
headerbar separator {
    margin-bottom: 0;
    margin-top: 0; /* same as headerbar side padding for nicer proportions */
}

/* shrink ssd titlebars */
.default-decoration {
    background-color: #2d2d2d;
    min-height: 0; /* let the entry and button drive the titlebar size */
    padding: 0;
}
.default-decoration .titlebutton {
    min-height: 0; /* tweak these two props to reduce button size */
    min-width: 0;
}
window.ssd headerbar.titlebar {
    min-height: 0;
    padding-top: 3px;
    padding-bottom: 3px;
}
window.ssd headerbar.titlebar button.titlebutton {
    border-radius: 0;
    min-height: 0;
    margin-right: 2px;
    padding: 3px;
}
.tasklist button {
    border-width: 2px;
    border-style: solid;
}
.tasklist button {
    border-color: white;
    border-radius: 2px;
    margin-left: 4px;
}
.tasklist button:checked {
    border-color: cyan;
    border-radius: 2px;
    box-shadow: none;
}
.tasklist button:hover {
    border-color: white;
    border-radius: 2px;
}

/* Whisker Menu */
#whiskermenu-window {
    color: #000000;
    border-radius: 6px;
    background: #eef4f9;
    font-size: 14px;
    padding: 4px;
}
#whiskermenu-window border {
    border-color: transparent;
    border-width: 0px;
    border-radius: 6px;
    color: #000000;
    padding: 4px;
    box-shadow: inset 0px 0px 0px 1px #bcbcbc;
}
#whiskermenu-window separator {
    background-color: #bcbcbc;
}
#whiskermenu-window frame {
    margin-left: 40%;
}

/* Make sidebar buttons match */
#whiskermenu-window button {
    background-color: transparent;
    border-color: transparent;
    border-radius: 3px;
    color: #000000;
    padding: 0px;
    margin: 1px;
    font-size: 12px;
    box-shadow: none;
}
#whiskermenu-window button:hover {
    background: transparent;
    border: 1px solid #bcbcbc;
    color: #000000;
}
#whiskermenu-window button:active {
    background: transparent;
    border: 1px solid #bcbcbc;
    color: #000000;
}
#whiskermenu-window button:checked {
    background: transparent;
    border: 1px solid #bcbcbc;
    color: #000000;
}

/* Make treeview match */
#whiskermenu-window treeview {
    background: transparent;
    color: #000000;
    padding: 0px;
    margin: 1px;
    font-size: 12px;
    text-shadow: none;
}
#whiskermenu-window treeview:hover {
    background: transparent;
    border-radius: 3px;
    border: 1px solid #bcbcbc;
    color: #000000;
}
#whiskermenu-window .view,
iconview,
#whiskermenu-window .view text,
iconview text,
textview text {
    background-color: transparent;
    font-size: 12px;
}
#whiskermenu-window .view:hover,
iconview,
#whiskermenu-window .view:hover text,
iconview text,
textview text {
    background-color: rgba(192, 192, 192, 0.3);
    font-size: 12px;
    color: #3c3c3c;
}
#whiskermenu-window .frame {
    border: transparent;
    border-radius: 0px;
    color: #3c3c3c;
}

/* Menu search box */
#whiskermenu-window entry {
    background: rgba(255, 255, 255, 0.5);
    border-top: 1px solid #dcdcdc;
    border-bottom: 2px solid #398ee8;
    border-right: 1px solid #dcdcdc;
    border-left: 1px solid #dcdcdc;
    border-radius: 5px;
    color: #3c3c3c;
    font-size: 12px;
    text-shadow: none;
}

/* whiskermenu scrollbar */
#whiskermenu-window scrollbar {
    background: transparent;
    border-color: transparent;
}
#whiskermenu-window scrollbar:backdrop {
    background: transparent;
    border-color: transparent;
}
#whiskermenu-window scrollbar slider {
    min-width: 4px;
    min-height: 4px;
    margin: 2px;
    border: 1px solid #eef4f9;
    border-radius: 3px;
    background-clip: padding-box;
    background: #9c9c9c;
}
#whiskermenu-window scrollbar slider:hover {
    background: #6c6c6c;
    border-color: #6c6c6c;
}
#whiskermenu-window scrollbar slider:hover:active {
    background: #6c6c6c;
    border-color: #6c6c6c;
}
#whiskermenu-window scrollbar slider:backdrop {
    background: transparent;
}
#whiskermenu-window scrollbar slider:disabled {
    background: transparent;
}
"
1wszZEEQ,Count letters,Nikolay_Kashev,C#,Saturday 2nd of March 2024 02:03:19 PM CDT,"string text = Console.ReadLine();

int upperCount = 0;
int lowerCount = 0;
int spaceCount = 0;

foreach (char c in text)
{
    if (char.IsUpper(c))
        upperCount++;
    else if (char.IsLower(c))
        lowerCount++;
    else if (char.IsWhiteSpace(c))
        spaceCount++;
}

Console.WriteLine(upperCount);
Console.WriteLine(lowerCount);
Console.WriteLine(spaceCount);"
PenEwku4,Min/Max values in range,Nikolay_Kashev,C#,Saturday 2nd of March 2024 02:00:23 PM CDT,"int[] nums = Console.ReadLine().Split().Select(int.Parse).ToArray();

int start = int.Parse(Console.ReadLine());
int end = int.Parse(Console.ReadLine());

int max = int.MinValue;
int min = int.MaxValue;

for (int i = start; i <= end; i++)
{
    if (nums[i] > max)
        max = nums[i];

    if (nums[i] < min)
        min = nums[i];
}

int sum = max + min;
Console.WriteLine(sum);"
1Mi22Rda,To Do List,Kelly-B9978,C#,Saturday 2nd of March 2024 01:34:18 PM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Runtime.InteropServices.ComTypes;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.VisualStyles;

namespace ToDoList
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            NameUpdate();
        }

        string filename = ""Untitled"";
        string todo_date, todo_task, todo_status;
        string current_date, current_task, current_status;
        string date_filter, todo_filter, filtered_task;

        private void Form1_Load(object sender, EventArgs e)
        {
            this.comboStatus.SelectedIndex = 3; // set default status à¹à¸à¹à¸ Not Start
            this.comboFilter.SelectedIndex = 4; // set default filter à¹à¸à¹à¸ All
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            todo_date = dateTimePicker1.Text;
            todo_task = txtTask.Text;
            todo_status = comboStatus.Text;

            if (todo_task == """") // check à¸à¹à¸²à¸à¹à¸­à¸ task à¹à¸¡à¹à¸¡à¸µà¸à¹à¸­à¸à¸§à¸²à¸¡ à¹à¸«à¹à¸à¸¶à¹à¸à¹à¸à¹à¸à¹à¸à¸·à¸­à¸
            {
                MessageBox.Show(""Please enter your task."",""To Do List"",MessageBoxButtons.OK,MessageBoxIcon.Warning);
            }
            else 
            {
                dgTask.Rows.Add(todo_date, todo_task, todo_status);
                FilterTask();
            }
            txtTask.Text = """"; // clear à¸à¹à¸²à¹à¸à¸à¹à¸­à¸ task
        }

        int ComboMatch(string status_text)
        {
            switch (status_text)
            {
                case ""Completed"": return 0;
                case ""In Progress"": return 1;
                case ""Cancelled"": return 2;
                case ""Not Start"": return 3;
            } 
            return 4;
        }

        private void dgTask_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (dgTask.CurrentRow != null)
            {
                current_date = dgTask.CurrentRow.Cells[""Date""].Value.ToString();
                current_task = dgTask.CurrentRow.Cells[""Task""].Value.ToString();
                current_status = dgTask.CurrentRow.Cells[""Status""].Value.ToString();

                CultureInfo provider = CultureInfo.InvariantCulture; // set à¹à¸«à¹à¹à¸¡à¹à¸ªà¸à¹à¸ date format à¸à¸­à¸à¹à¸à¸£à¸·à¹à¸­à¸
                dateTimePicker1.Value = DateTime.ParseExact(current_date, ""dd/MM/yyyy"", provider);
                txtTask.Text = current_task;
                comboStatus.SelectedIndex = ComboMatch(current_status);
            }
        }

        private void btnEdit_Click(object sender, EventArgs e)
        {
            todo_date = dateTimePicker1.Text;
            todo_task = txtTask.Text;
            todo_status = comboStatus.Text;

            if (dgTask.CurrentRow != null)
            {
                dgTask.CurrentRow.Cells[""Date""].Value = todo_date;
                dgTask.CurrentRow.Cells[""Task""].Value = todo_task;
                dgTask.CurrentRow.Cells[""Status""].Value = todo_status;
            }
            FilterTask();
        }

        private void btnDelete_Click(object sender, EventArgs e)
        {
            if (dgTask.CurrentRow != null)
            {
                dgTask.Rows.RemoveAt(dgTask.CurrentRow.Index);
                FilterTask();
            }
        }

        void FilterTask()
        {
            date_filter = dateTimePicker2.Text;
            todo_filter = comboFilter.Text;
            filtered_task = """";

            foreach (DataGridViewRow row in dgTask.Rows)
            {
                if (todo_filter == ""All"")
                {
                    if (row.Cells[""Date""].Value.ToString() == date_filter)
                    {
                        filtered_task += row.Cells[""Date""].Value.ToString() + ""   "" 
                            + row.Cells[""Task""].Value.ToString() + ""   "" 
                            + row.Cells[""Status""].Value.ToString() + ""\n"";
                    }
                } else
                {
                    if (row.Cells[""Status""].Value.ToString() == todo_filter && 
                        row.Cells[""Date""].Value.ToString() == date_filter)
                    {
                        filtered_task += row.Cells[""Date""].Value.ToString() + ""   "" 
                            + row.Cells[""Task""].Value.ToString() + ""   "" 
                            + row.Cells[""Status""].Value.ToString() + ""\n"";
                    }
                }
            }

            lblTaskFilter.Text = filtered_task;
        }

        private void dateTimePicker2_ValueChanged(object sender, EventArgs e)
        {
            FilterTask();
        }

        private void comboFilter_SelectedIndexChanged(object sender, EventArgs e)
        {
            FilterTask();
        }

        private void btnOpen_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = ""Text Files|*.txt"";
            openFileDialog1.Title = ""Open Text File"";
            openFileDialog1.ShowDialog();

            if (openFileDialog1.FileName != """")
            {
                filename = Path.GetFileName(openFileDialog1.FileName);
                dgTask.Rows.Clear();

                string[] lines = File.ReadAllLines(openFileDialog1.FileName);
                foreach (string line in lines)
                {
                    string[] cols = line.Split('\t');
                    dgTask.Rows.Add(cols[0], cols[1], cols[2]);
                }
            }

            NameUpdate();
            FilterTask();
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = ""Text Files|*.txt"";
            saveFileDialog1.Title = ""Save as Text File"";
            saveFileDialog1.ShowDialog();

            if (saveFileDialog1.FileName != """")
            {
                using (StreamWriter writer = new StreamWriter(saveFileDialog1.FileName, false, Encoding.UTF8))
                {
                    foreach (DataGridViewRow row in dgTask.Rows)
                    {
                        string line = row.Cells[""Date""].Value + ""\t"" + row.Cells[""Task""].Value + ""\t"" + row.Cells[""Status""].Value;
                        writer.WriteLine(line);
                    }
                }

                filename = Path.GetFileName(saveFileDialog1.FileName);
            }

            NameUpdate();
        }

        void NameUpdate()
        {
            this.Text = ""To Do List - "" + filename;
        }
    }
}"
Ze3MtRRK,Untitled,Derga,C++,Saturday 2nd of March 2024 01:31:27 PM CDT,"#include <iostream>
#include <list>
#include <queue>
#include <vector>

using namespace std;

struct SegLengthPos {
    int length;
    int beg_pos;
    int operation_idx;
};

bool operator< (const SegLengthPos& lhs, const SegLengthPos& rhs) {
    if (lhs.length != rhs.length) return lhs.length > rhs.length;
    return lhs.beg_pos < rhs.beg_pos;
}

int main() {
    list<SegLengthPos> l;
    
    auto comparator = [](const list<SegLengthPos>::iterator& lhs, const list<SegLengthPos>::iterator& rhs) {
        return *lhs < *rhs;
    };

    priority_queue <list<SegLengthPos>::iterator, 
        vector<list<SegLengthPos>::iterator>, decltype(comparator)> pq(comparator);

    int memory_cells_count, requests_count;
    cin >> memory_cells_count >> requests_count;

    vector<list<SegLengthPos>::iterator> history(1 + requests_count);

    l.push_back({ memory_cells_count, 1 });
    pq.push(l.begin());
    
    for (int i = 1; i <= requests_count; ++i) {
        int operation;
        cin >> operation;

        if (operation > 0) {
            if (pq.top()->length < operation) {
                history[i] = l.end();
                cout << -1;
            } else {
                auto seg_data = *pq.top();
                auto it = l.erase(pq.top());
                pq.pop();
                if (it != l.end()) prev(it);
                auto it1 = l.insert(it, { seg_data.length - operation, seg_data.beg_pos + operation, i});
                pq.push(it1);

                history[i] = it1;
                cout << seg_data.beg_pos << '\n';
            }
            continue;
        }

        if (history[operation] == l.end()) continue;

        auto it = history[operation];
        auto [len, pos, op_odx] = *history[operation];
        history[operation] = l.end();

        auto l_it = it;
        auto r_it = it;
        if (l_it != l.begin()) prev(l_it);
        if (r_it != l.end()) next(r_it);

        if (r_it != l.end() && it->beg_pos + it->length == r_it->beg_pos) {
            it->length += r_it->length;
            history[r_it->operation_idx] = l.end();
            l.erase(r_it);
        }
        if (l_it != it && l_it->beg_pos + l_it->length == it->beg_pos) {
            l_it->length += it->length;
            history[it->operation_idx] = l.end();
            l.erase(it);
        }
    }

    return 0;
}"
nv64gsmp,4chat USER IDS,Ferrioz,JSON,Saturday 2nd of March 2024 01:28:17 PM CDT,"[
    {
        ""id0"": [
            {
                ""id"": 0,
                ""name"": ""Ferrioz""
            }
       ]
    },
    {
        ""id1"": [
            {
                ""id"": 1,
                ""name"": ""Egawn""
            }
        ]
    }
]"
Xpsuq35k,Untitled,a_chn,Java,Saturday 2nd of March 2024 01:15:24 PM CDT,"import java.util.*;
import java.io.*;
class a{
    public static void main (String args []) throws IOException{
        Scanner s = new Scanner (System.in);
        int numcases = Integer.parseInt(s.nextLine());
        long[] output = new long[numcases];
        for(int i = 0; i<numcases; i++){
            int numcows = Integer.parseInt(s.nextLine());
            String[] temp = s.nextLine().split("" "");
            ArrayList<Long> values = new ArrayList<>();
            for(int j = 0; j<numcows; j++){
                values.add(j,Long.parseLong(temp[j]));
            }
            long answer = 0;
            long counter = 0;
            for(int j = 1; j<numcows-1; j++){
                if(values.get(j) > values.get(j-1)){
                    long thing = values.get(j)-values.get(j-1);
                    values.set(j,values.get(j)-thing);
                    values.set(j+1,values.get(j+1)-thing);
                    counter += thing*2;
 
                }
            }
            if(numcows == 1) {
                System.out.println(0);
                continue;
            }
            if(values.get(numcows-2) < values.get(numcows-1) || values.get(0) < 0){
                System.out.println(-1);
                continue;
            }
            Collections.reverse(values);
            for(int j = 1; j<numcows-1; j++){
                if(values.get(j) > values.get(j-1)){
                    long thing = values.get(j)-values.get(j-1);
                    values.set(j,values.get(j)-thing);
                    values.set(j+1,values.get(j+1)-thing);
                    counter += thing*2;
 
 
                }
            }
            if(numcows == 1){
                answer = 0;
            }
            else if(numcows == 2 && values.get(0) != values.get(1)){
                answer = -1;
            }
            else if(values.get(numcows-2) < values.get(numcows-1) || values.get(0) < 0){
                answer = -1;
            }
            else{
                answer = counter;
            }
            System.out.println(answer);
        }
 
    }
}
"
WPERXTQ7,Untitled,Josif_tepe,C++,Saturday 2nd of March 2024 12:13:13 PM CDT,"#include <iostream>
#include <vector>
using namespace std;
int main() {
    int n, q;
    cin >> n >> q;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    int queries[q];
    for(int i = 0; i < q; i++) {
        cin >> queries[i];
    }
    vector<int> v(55, -1);
    for(int i = 0; i < n; i++) {
        if(v[niza[i]] == -1) {
            v[niza[i]] = i + 1;
        }
    }
    for(int i = 0; i < q; i++) {
        int x = queries[i];
        cout << v[x] << "" "";
        for(int j = 1; j <= 50; j++) {
            if(v[j] < v[x] and v[j] != -1) {
                v[j]++;
            }
        }
        v[x] = 1;
    }
    
    
    return 0;
}

// 89 145 42 20 4 16 37 58
"
gM8zSSma,Untitled,BobbyGeorgiev,C#,Saturday 2nd of March 2024 12:02:03 PM CDT,"string text = Console.ReadLine();


int countLower = 0;
int countUpper = 0;
int countWhiteSpace = 0;


for  (int i = 0; i < text.Length; i++)
{
    char currentChar = text[i];
    if (Char.IsUpper(currentChar))
    {
        countUpper++;
    }
    else if (Char.IsLower(currentChar))
    {
        countLower++;
    }
    else if (Char.IsWhiteSpace(currentChar))  
    { 
        countWhiteSpace++; 
    }
}
Console.WriteLine(countUpper);
Console.WriteLine(countLower);
Console.WriteLine(countWhiteSpace);"
pJnmbF0N,Untitled,Josif_tepe,C++,Saturday 2nd of March 2024 11:46:00 AM CDT,"#include <iostream>
#include <vector>
using namespace std;
int main() {
    int p, n;
    cin >> p >> n;
    vector<int> v;
    for(int i = 0; i < 100; i++) {
        int tmp = p;
        int treta_cifra = tmp % 10;
        tmp /= 10;
        int vtora_cifra = tmp % 10;
        tmp /= 10;
        int prva_cifra = tmp % 10;
        tmp /= 10;
        int sleden_broj = prva_cifra * prva_cifra + vtora_cifra * vtora_cifra + treta_cifra * treta_cifra;
        
        
        v.push_back(p);
        p = sleden_broj;
        if(i + 1 == n) {
            cout << p << endl;
            return 0;
        }
    }
    vector<int> reps;
    for(int i = 0; i < v.size(); i++) {
        int se_povtoruva = -1;
        for(int j = i + 1; j < v.size(); j++) {
            if(v[i] == v[j]) {
                se_povtoruva = j - 1;
                break;
            }
        }
        if(se_povtoruva != -1) {
            for(int j = i; j <= se_povtoruva; j++) {
                
                reps.push_back(v[j]);
            }
            n -= i;
            break;
        }
    }
    int sz = reps.size();
    if(n % sz == 0) {
        cout << reps[sz - 1] << endl;
    }
    else {
        cout << reps[n % sz] << endl;
    }
    return 0;
}

// 89 145 42 20 4 16 37 58
"
mLh2UC3J,Untitled,h1n0t0r1,Python,Saturday 2nd of March 2024 11:38:18 AM CDT,"# Logic

result = ''

for i in range(10000):
    user_input = float(input())
    if user_input >= 0:

        result += f'Result: {user_input * 2:.2f};'  # Concatenate current result with new result
                                                    # With ; for delimiter
    else:
        result += 'Negative number!'
        break

# Print output
single_results = result.split(';') # Split all the results by delimiter
# single_result is a collection of all results with index and we can iterate this collection
for i in range(len(single_results)):
    print(single_results[i])
                                    
"
RVuVhYnG,VPN COMPOSE,alice_killer,Bash,Saturday 2nd of March 2024 11:31:52 AM CDT,"SUBNET=10.2.0.0/24
UNBOUND_IPV4_ADDRESS=10.2.0.200
PIHOLE_IPV4_ADDRESS=10.2.0.100

1. Set two Pihole DNS - 127.0.0.1, 10.2.0.200
2. SET VPN DNS as Pihole's IP - 10.2.0.100
"
v9dGWsRr,Untitled,h1n0t0r1,Python,Saturday 2nd of March 2024 11:31:30 AM CDT,"

result_list = [] # create empty list

for i in range(10000):
    user_input = float(input())
    if user_input >= 0:
        result_list.append(f'Result: {user_input * 2:.2f}')  # Append result to result list
    else:
        result_list.append('Negative number!')
        break

for i in range(len(result_list)):
    print(result_list[i])"
