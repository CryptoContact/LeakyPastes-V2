id,title,username,language,date,content
q5rjmRPn,👾G2A.com Free Gift Card Guide Apr 2024👾,jordanthebordan,GetText,Monday 22nd of April 2024 12:46:24 AM CDT,"G2А.com frеe gift cаrd & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date versiоn of this scriрt. Any оther one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/14G2eGlj-b_L6M7-S1ou5gAZFP5wLLg-t/view
 
Working as of:
22 April 2024"
NQFFDiHn,snowybot,coinwalk,JavaScript,Monday 22nd of April 2024 12:36:28 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.000001; /// dontchange;
var downpipe = 2;
var uppipe = 4;
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*100);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var awesome = ((Math.floor(olsenest/tens))*tens);
var olsen = 0;
var slower = ((Math.floor(olsenest/hundreds))*hundreds);
var belance = olsenest;
var oxen = olsenest;
var shocker = olsenest;
var godly = (olsenest+0.0002);
var pigzie = ((Math.ceil(olsenest/hundreds))*hundreds);
var fart = false;
 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
 
async function go(){
await sleep(350);
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
slower = ((Math.floor(belance/hundreds))*hundreds);
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(belance!=olsen)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((((belance-slower)-(bolux*4))<=0)&&(bolux>=(monkey*32))&&(belance<oxen)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
    oxen = parseFloat(belance);
}
if ((((belance-slower)-(bolux*4))<=0)&&(bolux>=(monkey*32))&&(belance<oxen)&&(belance>(((Math.floor(belance/tens))*tens)+eights))){
    bolux = monkey;
    olsen = 0;
    oxen = parseFloat(belance);
}
if ((bolux>=(monkey*32))&&(!fart)&&(bolux>=((belance-slower)/10))&&(belance>=shocker)){
    pigzie = ((Math.ceil(belance/hundreds))*hundreds);
    fart = true;
}
if ((fart)&&(belance>=pigzie)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
    fart = false;
    oxen = parseFloat(belance);
    pigzie = ((Math.ceil(belance/hundreds))*hundreds);
}
if (belance>shocker){
shocker = parseFloat(belance);
}
if (belance<oxen){
oxen = parseFloat(belance);
}
if (belance>=godly){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go();
}
go();"
REmrWCXJ,Truck Tour1,Nenogzar,Python,Monday 22nd of April 2024 12:33:14 AM CDT,"from collections import deque

gas_station = int(input())
petrol_pumps = deque()

total_petrol = 0
distance_to_next = 0
start_index = 0

for i in range(gas_station):
    petrol, distance = map(int, input().split())
    petrol_pumps.append((petrol, distance))

    total_petrol += petrol
    total_petrol -= distance
    distance_to_next += distance

    if total_petrol < 0:
        start_index = i + 1
        total_petrol = 0
        distance_to_next = 0

print(start_index)"
rZFg8xEf,"6.0.4 New ""My Photography"" Organization",TheiPhoneFan,HTML,Monday 22nd of April 2024 12:10:10 AM CDT,"<!-- Created On 2024-04-22 -->
<!-- Apple Archive 6.0.4, 2022-2024 -->
<!DOCTYPE HTML>
<html>

<head>
    <style>
        .web-app-image {
            border-radius: 16px;
            width: 300px;
            max-width: 100%;
        }
        .web-app-caption {
            font-weight:300;
            margin-top:10px;
            max-width: 300px;
        }
        .tab {
            border-radius: 0px 0px 13px 13px !important;
        }
        @media (max-width: 750px) {
            .header {
               border-radius: 13px 13px 0px 0px !important;
            }
        }
        @media (min-width: 750px) {
            .header {
               border-radius: 0px !important;
            }
        }
        .flex-container {
            justify-content: center;
        }
    </style>
    <!-- External Font -->
    <link href=""https://fonts.googleapis.com/css?family=Roboto:400,300,100,700,900"" rel=""stylesheet"" type=""text/css"">
    <!-- Stylesheet Link -->
    <link rel=""stylesheet"" href=""./theme/style.css"">
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"">
    <!-- Favicon Image Link -->
    <link rel=""icon"" type=""image/x-png"" href=""./logos/js-blog-favicon.png"">
    <!-- Scales Website Content -->
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <!-- Enables Unicode Characters To Be Displayed -->
    <meta charset=""UTF-8"">
    <!-- SEO -->
    <title>Explore Apple Archive: Original Web Apps and More | Jordan's Blog</title>
    <meta name=""description"" content=""Discover a curated collection of Apple content, including original web apps from 2008, Apple Store demo apps, and iOS 6 iWork Suite guides. Explore the Apple Archive on Jordan's Blog."" />
    <meta name=""keywords"" content=""Apple Archive, Original Web Apps, Apple Store Demo Apps, iOS 6 iWork Suite, iPhone, App Store, Apple Concepts, Articles, Blog, Clipart, Scam Avoidance, Site Related, Help & Contact, Jordan's Blog"" />
</head>

<body>
<!-- Page Top -->
<div id=""page-top""></div>

    <!-- Top Bar -->
    <div class=""navbar"">
        <!-- Site Title -->
        <a href=""./index.html"" style=""background-color:transparent;cursor:pointer;color:black;""><b>Jordan's Blog</b></a>

        <!-- Home -->
        <a href=""./index.html"">Home <img src=""./theme/glyphs/home.png"" height=""15"" alt=""home""></a>

        <!-- Channel Related Dropdown -->
        <div class=""dropdown"">
            <button class=""dropbtn"" title=""dropdown"">Channel Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./channel-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Channel Related</b> <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""channel related""></a>
                <a href=""https://pastebin.com/Pw823uL7"">Channel Info <img src=""./theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
                <a href=""./music-i-use.html"">Music I Use <img src=""./theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
                <a href=""./my-playlists.html"">My Playlists <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
                <a href=""./my-top-5-vids.html"">My Top 5 Vids <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
                <a href=""./my-videos.html"">My Videos <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
                <a href=""./thumbnail-design.html"" style=""border-radius: 0px 0px 16px 16px;"">Thumbnail Design <img src=""./theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            </div>
        </div>

        <!-- Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Content <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./content.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Content</b></a>
                <a href=""./apple-archive.html"">Apple Archive <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
                <a href=""./apple-concepts.html"">Apple Concepts <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
                <a href=""./articles.html"">Articles <img src=""./theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
                <a href=""./blog.html"">Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
                <a href=""./clipart.html"">Clipart <img src=""./theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
                <a href=""./my-photography.html"">My Photography <img src=""./theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
                <a href=""./wallpapers.html"" style=""border-radius: 0px 0px 16px 16px;"">Wallpapers <img src=""./theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            </div>
        </div>

        <!-- Recent Content Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">New Articles <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <iframe src=""./recent-posts.html"" height=""390"" width=""250""></iframe>
            </div>
        </div>

        <!-- Scam Avoidance Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Scam Avoidance <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./scam-avoidance.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Scam Avoidance</b></a>
                <a href=""./report-a-scam.html"">Report a Scam <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
                <a href=""./scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
                <a href=""./scam-info-updates.html"" style=""border-radius: 0px 0px 16px 16px;"">Scam Info Updates <img src=""./theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            </div>
        </div>

        <!-- Site Related Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Site Related <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./site-related.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Site Related</b></a>
                <a href=""./all-pages.html"">All Pages <img src=""./theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
                <a href=""./changelog.html"">Changelog</a>
                <a href=""./downloads.html"">Downloads <img src=""./theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
                <a href=""./get-help.html"">Get Help <img src=""./theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
                <a href=""./previews.html"">Previews</a>
                <a href=""./report-an-issue.html"" style=""border-radius: 0px 0px 16px 16px;"">Report an Issue <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            
            </div>
        </div>

        <!-- Help & Contact Dropdown -->
        <div class=""dropdown"" title=""dropdown"">
            <button class=""dropbtn"">Help & Contact <i class=""fa fa-caret-down""></i></button>
            <div class=""dropdown-content"">
                <a href=""./help-contact.html"" style=""border-radius: 16px 16px 0px 0px;""><b>Help & Contact</b></a>
                <a href=""./contact-me.html"">Contact Me <img src=""./theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
                <a href=""./website-survey.html"" style=""border-radius: 0px 0px 16px 16px;"">Site Survey <img src=""./theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            </div>
        </div>
    </div>
    </div>

    <!-- Sidebar Button -->
    <button class=""openbtn"" onclick=""toggleSidebar()"" title=""sidebar button"">☰</button>

    <div class=""sidebar"" id=""mySidebar"">
        <h3 style=""color:black;margin-top:40px;"">Jordan's Blog</h3>
        <a href=""./index.html"">Home <img src=""./theme/glyphs/home.png"" height=""15"" alt=""home""></a>
        <details>
            <summary>Channel Related</summary>
            <a href=""./channel-related.html""><b>Channel Related</b></a>
            <a href=""https://pastebin.com/Pw823uL7"">Channel Info <img src=""./theme/glyphs/channel-info.png"" height=""15"" alt=""channel info""></a>
            <a href=""./music-i-use.html"">Music I Use <img src=""./theme/glyphs/music-i-use.png"" height=""15"" alt=""music i use""></a>
            <a href=""./my-playlists.html"">My Playlists <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my playlists""></a>
            <a href=""./my-top-5-vids.html"">My Top 5 Vids <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""top 5 vids""></a>
            <a href=""./my-videos.html"">My Videos <img src=""./theme/glyphs/triangle.png"" height=""15"" alt=""my videos""></a>
            <a href=""./thumbnail-design.html"">Thumbnail Design <img src=""./theme/glyphs/thumbnail-design.png"" height=""15"" alt=""thumbnail design""></a>
            <hr>
        </details>
        <details>
            <summary>Content</summary>
            <a href=""./content.html""><b>Content</b></a>
            <a href=""./apple-archive.html"">Apple Archive <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple archive""></a>
            <a href=""./apple-concepts.html"">Apple Concepts <img src=""./theme/glyphs/apple.png"" height=""15"" alt=""apple concepts""></a>
            <a href=""./articles.html"">Articles <img src=""./theme/glyphs/articles.png"" height=""15"" alt=""articles""></a>
            <a href=""./blog.html"">Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""blog""></a>
            <a href=""./clipart.html"">Clipart <img src=""./theme/glyphs/clipart.png"" height=""15"" alt=""clipart""></a>
            <a href=""./my-photography.html"">My Photography <img src=""./theme/glyphs/my-photography.png"" height=""15"" alt=""my photography""></a>
            <a href=""./wallpapers.html"">Wallpapers <img src=""./theme/glyphs/wallpapers.png"" height=""20"" alt=""wallpapers""></a>
            <hr>
        </details>
        <details>
            <summary>New Articles</summary>
            <iframe src=""./recent-posts.html"" height=""390"" width=""275""></iframe>
        </details>
        <details>
            <summary>Scam Avoidance</summary>
            <a href=""./scam-avoidance.html""><b>Scam Avoidance</b></a>
            <a href=""./report-a-scam.html"">Report a Scam <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report a scam""></a>
            <a href=""./scam-avoidance-blog.html"">Scam Avoidance Blog <img src=""./theme/glyphs/blog.png"" height=""15"" alt=""scam avoidance blog""></a>
            <a href=""./scam-info-updates.html"">Scam Info Updates <img src=""./theme/glyphs/updates.png"" height=""15"" alt=""scam info updates""></a>
            <hr>
        </details>
        <details>
            <summary>Site Related</summary>
            <a href=""./site-related.html""><b>Site Related</b></a>
            <a href=""./all-pages.html"">All Pages <img src=""./theme/glyphs/all-pages.png"" height=""12"" style=""vertical-align:baseline;"" alt=""all pages""></a>
            <a href=""./changelog.html"">Changelog</a>
            <a href=""./downloads.html"">Downloads <img src=""./theme/glyphs/downloads.png"" height=""15"" alt=""downloads""></a>
            <a href=""./get-help.html"">Get Help <img src=""./theme/glyphs/get-help.png"" height=""15"" alt=""get help""></a>
            <a href=""./previews.html"">Previews</a>
            <a href=""./report-an-issue.html"">Report an Issue <img src=""./theme/glyphs/report.png"" height=""15"" alt=""report an issue""></a>
            <hr>
        </details>
        <details>
            <summary>Help & Contact</summary>
            <a href=""./help-contact.html""><b>Help & Contact</b></a>
            <a href=""./contact-me.html"">Contact Me <img src=""./theme/glyphs/contact-me.png"" height=""15"" alt=""contact me""></a>
            <a href=""./website-survey.html"">Site Survey <img src=""./theme/glyphs/survey.png"" height=""15"" alt=""site survey""></a>
            <hr>
        </details>
    </div>
    
    <!-- Displays If JavaScript Is Disabled -->
    <noscript>
        <img src=""./theme/critical-error.png"" style=""border-radius:4px;"" width=""30px"">
        Your browser does not support JavaScript or it is disabled. To use all site features, please enable JavaScript or try another browser.
    </noscript>
    <div class=""header"">
        <!-- Page Title & Info -->
        <h1>Apple Archive</h1>
        <p>On this page, you can view some Apple media, that I have decided to archive on my website.</p>
        <!-- Twitter Share Button -->
        <div class=""twitter-share-button"">
            <a href=""https://twitter.com/share?ref_src=twsrc%5Etfw"" class=""twitter-share-button"" data-size=""large"" data-related=""jordans_blog"" data-show-count=""false"">Tweet</a>
            <script async src=""https://platform.twitter.com/widgets.js"" charset=""utf-8""></script>
        </div>
    </div>
    <!-- Page Content -->
    <div class=""tab"">
        <button class=""tablinks"" onclick=""openCity(event, 'Winter 2023')"" id=""defaultOpen"">Winter '23</button>
        <button class=""tablinks"" onclick=""openCity(event, 'Summer 2023')"">Summer '23</button>
        <button class=""tablinks"" onclick=""openCity(event, 'Winter 2022')"">Winter '22</button>
        <button class=""tablinks"" onclick=""openCity(event, 'Summer 2022')"">Summer '22</button>
        <button class=""tablinks"" onclick=""openCity(event, 'Spring 2022')"">Spring '22</button>
        <button class=""tablinks"" onclick=""openCity(event, 'Summer 2021')"">Summer '21</button>
        <button class=""tablinks"" onclick=""openCity(event, 'Spring 2021')"">Spring '21</button>
    </div>

    <!-- Winter 2023 -->
    <div id=""Winter 2023"">
        <p>Photos taken in between December 21, 2023 - March 19, 2024</p>
    </div>

    <!-- Summer 2023 -->
    <div id=""Summer 2023"" class=""tabcontent"">
        <p>Photos taken in between June 21 - Setember 23, 2023</p>
    </div>

    <!-- Winter 2022 -->
    <div id=""Winter 2022"" class=""tabcontent"">
        <p>Photos taken in between December 21, 2022 - March 20, 2023</p>
    </div>

    <!-- Summer 2022 -->
    <div id=""Summer 2022"" class=""tabcontent"">
        <p>Photos taken in between June 21 - September 22, 2022</p>
    </div>

    <!-- Spring 2022 -->
    <div id=""Spring 2022"" class=""tabcontent"">
        <p>Photos taken in between March 20 - June 21, 2022</p>
    </div>

    <!-- Summer 2021 -->
    <div id=""Summer 2021"" class=""tabcontent"">
        <p>Photos taken in between June 20 - September 22, 2021</p>
    </div>

    <!-- Spring 2021 -->
    <div id=""Spring 2021"" class=""tabcontent"">
        <p>Photos taken in between March 20 - June 20, 2021</p>
    </div>

    <!-- Divider -->
    <hr>

    <!-- Back To Top Button -->
    <div class=""topbtn"">
        <a href=""#page-top"">
            <img src=""./theme/action-icons/to-top.png"" alt=""back to the top of the page button"" style=""border-radius:20%;"" width=""40px"">
        </a>
    </div>

    <script>
        function openCity(evt, cityName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName(""tabcontent"");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = ""none"";
            }
            tablinks = document.getElementsByClassName(""tablinks"");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace("" active"", """");
            }
            document.getElementById(cityName).style.display = ""block"";
            evt.currentTarget.className += "" active"";
        }

        // Get the element with id=""defaultOpen"" and click on it
        document.getElementById(""defaultOpen"").click();

        // JavaScript function to toggle the sidebar //
        function toggleSidebar() {
            var sidebar = document.getElementById('mySidebar');
            if (sidebar.style.left === '0px') {
                sidebar.style.left = '-310px';
                document.getElementsByClassName('openbtn')[0].innerHTML = '☰';
            } else {
                sidebar.style.left = '0px';
                document.getElementsByClassName('openbtn')[0].innerHTML = '×';
            }
        }
    </script>
</body>

</html>"
CTYAMwf3,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Monday 22nd of April 2024 12:04:03 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_161159.pdf

Working as of:
22 April 2024"
vHhASiVi,numpy lab(22/04/2024)(simplex),brandblox,Python,Sunday 21st of April 2024 11:40:23 PM CDT,"# -*- coding: utf-8 -*-
""""""
Created on Mon Apr 22 09:45:34 2024

@author: lab
""""""
import numpy as np
from fractions import Fraction # so that numbers are not displayed in decimal.

print(""\n****Simplex Algorithm ****\n\n"")

# ‘A’ will contain the coefficients of the constraints
A = np.array([[1, 1, 0, 1], [2, 1, 1, 0]])
# b will contain the amount of resources
b = np.array([8, 10])
# c will contain coefficients of objective function Z
c = np.array([1, 1, 0, 0])
# ‘B’ will contain the basic variables that make identity matrix
cb = np.array(c[3])
B = np.array([[3], [2]])
# cb contains their corresponding coefficients in Z
cb = np.vstack((cb, c[2]))
xb = np.transpose([b])

# combine matrices B and cb
table = np.hstack((B, cb))
table = np.hstack((table, xb))
# combine matrices B, cb and xb
# finally combine matrix A to form the complete simplex table
table = np.hstack((table, A))
# change the type of table to float
table = np.array(table, dtype ='float')
MIN = 0

print(""Table at itr = 0"")
print(""B \tCB \tXB \ty1 \ty2 \ty3 \ty4"")
for row in table:
    for el in row:
        print(Fraction(str(el)).limit_denominator(100), end ='\t')
    print()
print()

print(""Simplex Working...."")
# when optimality reached it will be made 1
reached = 0
itr = 1
unbounded = 0
alternate = 0
while reached == 0:
    print(""Iteration: "", end =' ')
    print(itr)
    print(""B \tCB \tXB \ty1 \ty2 \ty3 \ty4"")
    for row in table:
        for el in row:
            print(Fraction(str(el)).limit_denominator(100), end ='\t')
        print()
    
    # calculate Relative profits-> cj - zj for non-basics
    i = 0
    rel_prof = []
    while i<len(A[0]):
        rel_prof.append(c[i] - np.sum(table[:, 1]*table[:, 3 + i]))
        i = i + 1
    print(""rel profit: "", end ="" "")
    for profit in rel_prof:
        print(Fraction(str(profit)).limit_denominator(100), end ="", "")
    print()
    
    i = 0
    b_var = table[:, 0]
    # checking for alternate solution
    while i<len(A[0]):
        j = 0
        present = 0
        while j<len(b_var):
            if int(b_var[j]) == i:
                present = 1
                break
            j += 1
        if present == 0:
            if rel_prof[i] == 0:
                alternate = 1
                print(""Case of Alternate found"")
        i += 1
    print()
    
    flag = 0
    for profit in rel_prof:
        if profit>0:
            flag = 1
            break
    # if all relative profits <= 0
    if flag == 0:
        print(""All profits are <= 0, optimality reached"")
        reached = 1
        break
    
    # kth var will enter the basis
    k = rel_prof.index(max(rel_prof))
    min_val = 99999
    i = 0
    r = -1
    # min ratio test (only positive values)
    while i<len(table):
        if (table[:, 2][i]>0 and table[:, 3 + k][i]>0):
            val = table[:, 2][i] / table[:, 3 + k][i]
            if val < min_val:
                min_val = val
                r = i # leaving variable
        i += 1
    # if no min ratio test was performed
    if r == -1:
        unbounded = 1
        print(""Case of Unbounded"")
        break
    
    print(""pivot element index:"", end =' ')
    print(np.array([r, 3 + k]))
    pivot = table[r][3 + k]
    print(""pivot element: "", end ="" "")
    print(Fraction(pivot).limit_denominator(100))
    
    # perform row operations
    # divide the pivot row with the pivot element
    table[r, 2:len(table[0])] = table[r, 2:len(table[0])] / pivot
    # do row operation on other rows
    i = 0
    while i<len(table):
        if i != r:
            table[i, 2:len(table[0])] = table[i, 2:len(table[0])] - table[i][3 + k] * table[r, 2:len(table[0])]
        i += 1
    # assign the new basic variable
    table[r][0] = k
    table[r][1] = c[k]
    print()
    print()
    itr += 1
    print()
    print(""***************************************************************"")

if unbounded == 1:
    print(""UNBOUNDED LPP"")
    exit()
if alternate == 1:
    print(""ALTERNATE Solution"")

print(""optimal table:"")
print(""B \tCB \tXB \ty1 \ty2 \ty3 \ty4"")
for row in table:
    for el in row:
        print(Fraction(str(el)).limit_denominator(100), end ='\t')
    print()

print()
print(""value of Z at optimality: "", end ="" "")
basis = []
i = 0
sum_val = 0
while i < len(table):
    sum_val += c[int(table[i][0])] * table[i][2]
    temp = ""x"" + str(int(table[i][0]) + 1)
    basis.append(temp)
    i += 1
# if MIN problem make z negative
if MIN == 1:
    print(-Fraction(str(sum_val)).limit_denominator(100))
else:
    print(Fraction(str(sum_val)).limit_denominator(100))
print(""Final Basis: "", end ="" "")
print(basis)
print(""Simplex Finished..."")
print()

"
h78pfARA,Untitled,dereksir,HTML,Sunday 21st of April 2024 10:40:29 PM CDT,"<title>Visual Studio Reviews 2024: Details, Pricing, &amp; Features | G2</title>"
pXXVpWdg,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 10:39:26 PM CDT,"// import the required module
import got from 'got';

const url = 'https://www.g2.com/products/visual-studio/reviews';
const apikey = '<YOUR_ZENROWS_API_KEY>';

(async () => {
    try {
        const {body} = await got('https://api.zenrows.com/v1/', {
            searchParams: {
                url: url,
                apikey: apikey,
                js_render: 'true',
                premium_proxy: 'true',
            }
        });
        console.log(body);
    } catch (error) {
        console.error('Error:', error.response.body);
    }
})();"
QUPZXtyX,Untitled,dereksir,Bash,Sunday 21st of April 2024 10:08:26 PM CDT,HTTPError: Response code 403 (Forbidden)
YTFnvHWS,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 10:02:33 PM CDT,"// import the required modules
import got from 'got';
import {HttpsProxyAgent} from 'hpagent';

// define a list of proxy URLs
const proxyList = [
  'http://20.219.180.149:3129',
  'http://198.199.70.20:31028',
  'http://8.219.97.248:80',
  // add more proxy URLs as needed
];

// function to select a random proxy from the list
function getRandomProxy() {
  const randomIndex = Math.floor(Math.random() * proxyList.length);
  return proxyList[randomIndex];
}

const proxyOptions = {
	agent: {
		// create a new HttpsProxyAgent instance
		https: new HttpsProxyAgent({
			// add proxy settings
			keepAlive: true,
			keepAliveMsecs: 1000,
			maxSockets: 256,
			maxFreeSockets: 256,
			scheduling: 'lifo',
			// specify proxy URL.
			proxy: getRandomProxy()
		})
	}
};

try {
	// make HTTP request
	const {body} = await got('https://www.g2.com/products/visual-studio/reviews', proxyOptions);
	// log the response
	console.log(body);
} catch (error) {
	console.error(error);
}"
faaSA1pS,Untitled,dereksir,Bash,Sunday 21st of April 2024 09:54:54 PM CDT,"{
  ""origin"": ""8.219.64.236:1416""
}

{
  ""origin"": ""20.219.180.149:45310""
}"
abhwSqnc,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:50:00 PM CDT,"// import the required modules
import got from 'got';
import {HttpsProxyAgent} from 'hpagent';

// define a list of proxy URLs
const proxyList = [
  'http://20.219.180.149:3129',
  'http://198.199.70.20:31028',
  'http://8.219.97.248:80',
  // add more proxy URLs as needed
];

// function to select a random proxy from the list
function getRandomProxy() {
  const randomIndex = Math.floor(Math.random() * proxyList.length);
  return proxyList[randomIndex];
}

const proxyOptions = {
	agent: {
		// create a new HttpsProxyAgent instance
		https: new HttpsProxyAgent({
			// add proxy settings
			keepAlive: true,
			keepAliveMsecs: 1000,
			maxSockets: 256,
			maxFreeSockets: 256,
			scheduling: 'lifo',
			// specify proxy URL.
			proxy: getRandomProxy()
		})
	}
};

try {
	// make HTTP request
	const {body} = await got('https://httpbin.io/ip', proxyOptions);
	// log the response
	console.log(body);
} catch (error) {
	console.error(error);
}"
b9SHH022,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:46:00 PM CDT,"//...
const proxyOptions = {
	agent: {
		// create a new HttpsProxyAgent instance
		https: new HttpsProxyAgent({
			// add proxy settings
			keepAlive: true,
			keepAliveMsecs: 1000,
			maxSockets: 256,
			maxFreeSockets: 256,
			scheduling: 'lifo',
			// specify proxy URL.
			proxy: getRandomProxy()
		})
	}
};"
tavfYG3M,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:40:38 PM CDT,"//...

// function to select a random proxy from the list
function getRandomProxy() {
  const randomIndex = Math.floor(Math.random() * proxyList.length);
  return proxyList[randomIndex];
}"
RNfiwX6H,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:37:44 PM CDT,"// import the required modules
import got from 'got';
import {HttpsProxyAgent} from 'hpagent';

// define a list of proxy URLs
const proxyList = [
  'http://20.219.180.149:3129',
  'http://198.199.70.20:31028',
  'http://8.219.97.248:80',
  // add more proxy URLs as needed
];"
u7CnBn5R,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:23:18 PM CDT,"// import the required modules
import got from 'got';
import {HttpsProxyAgent} from 'hpagent';

const proxyOptions = {
	agent: {
		// create a new HttpsProxyAgent instance
		https: new HttpsProxyAgent({
			// add proxy settings
			keepAlive: true,
			keepAliveMsecs: 1000,
			maxSockets: 256,
			maxFreeSockets: 256,
			scheduling: 'lifo',
			// specify proxy URL.
			proxy: 'http://username:password@20.219.180.149:3129'
		})
	}
};

try {
	// make HTTP request
	const {body} = await got('https://httpbin.io/ip', proxyOptions);
	// log the response
	console.log(body);
} catch (error) {
	console.error(error);
}"
CFf42MWG,C++ Random Integer 0-99 Array optimization,TeRackSito,C++,Sunday 21st of April 2024 09:14:14 PM CDT,"#include <iostream>
#include <vector>
#include <thread>
#include <chrono>

class RandomCounterArray
{
private:
    int start;
    int end;
    std::vector<int> results;

public:
    RandomCounterArray(int start, int end) : start(start), end(end), results(100, 0) {}

    const std::vector<int> &getResults() const
    {
        return results;
    }

    int getLength() const
    {
        int length = 0;
        for (int value : results)
        {
            length += value;
        }
        return length;
    }

    void operator()()
    {
        auto startTime = std::chrono::steady_clock::now();
        for (int i = start; i <= end; i++)
        {
            int result = randomInt();
            results[result]++;
        }
        auto endTime = std::chrono::steady_clock::now();
        std::chrono::duration<double, std::milli> duration = endTime - startTime;
        std::cout << ""Thread took "" << duration.count() << ""ms"" << std::endl;
    }

private:
    int randomInt()
    {
        return rand() % 100;
    }
};

int main()
{
    srand(time(nullptr));

    int numbers = 10000000;
    int numThreads = 1;
    int numbersPerThread = numbers / numThreads;
    std::vector<std::thread> threads;

    for (int i = 0; i < numThreads; i++)
    {
        int start = i * numbersPerThread + 1;
        int end = (i + 1) * numbersPerThread;
        threads.emplace_back(RandomCounterArray(start, end));
    }

    auto startTime = std::chrono::steady_clock::now();

    for (auto &thread : threads)
    {
        thread.join();
    }

    auto endTime = std::chrono::steady_clock::now();
    std::chrono::duration<double, std::milli> duration = endTime - startTime;

    std::cout << ""Time taken: "" << duration.count() << ""ms"" << std::endl;

    return 0;
}
"
Lc6gBWZS,Untitled,dereksir,Bash,Sunday 21st of April 2024 09:11:21 PM CDT,"{
  ""origin"": ""20.219.180.149:45310""
}"
1QiZx9jX,Java Random Integer 0-99 Array optimization,TeRackSito,Java,Sunday 21st of April 2024 09:07:37 PM CDT,"package angel;

public class RandomCounterArray extends Thread {
    private int start;
    private int end;
    private long executionTime;
    private int[] results;

    public RandomCounterArray(int start, int end) {
        this.start = start;
        this.end = end;
        this.results = new int[100];
    }

    public int[] getResults() {
        return results;
    }

    public int getLength() {
        int length = 0;
        for (int value : results) {
            length += value;
        }
        return length;
    }

    public long getExecutionTime() {
        return executionTime;
    }

    private int randomInt() {
        return (int) (Math.random() * 100);
    }

    @Override
    public void run() {
        long startTime = System.currentTimeMillis();
        for (int i = start; i <= end; i++) {
            int result = randomInt();
            results[result]++;
        }
        long endTime = System.currentTimeMillis();
        executionTime = endTime - startTime;
    }

    public static void main(String[] args) {
        int numbers = 10_000_000;
        int numThreads = 8;
        int numbersPerThread = numbers / numThreads;

        RandomCounterArray[] calculators = new RandomCounterArray[numThreads];
        for (int i = 0; i < numThreads; i++) {
            int start = i * numbersPerThread + 1;
            int end = (i + 1) * numbersPerThread;
            calculators[i] = new RandomCounterArray(start, end);
        }

        long startTime = System.currentTimeMillis();
        for (RandomCounterArray calculator : calculators) {
            calculator.start();
        }

        for (RandomCounterArray calculator : calculators) {
            try {
                calculator.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        long endTime = System.currentTimeMillis();
        
        for (int i = 0; i < calculators.length; i++) {
            System.out.println(""Thread "" + i + "" took "" + calculators[i].getExecutionTime() + ""ms"");
        }
        System.out.println(""Time taken: "" + (endTime - startTime) + ""ms"");
    }
}

"
FywngXc5,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:05:57 PM CDT,"// import the required modules
import got from 'got';
import {HttpsProxyAgent} from 'hpagent';

const proxyOptions = {
	agent: {
		// create a new HttpsProxyAgent instance
		https: new HttpsProxyAgent({
			// add proxy settings
			keepAlive: true,
			keepAliveMsecs: 1000,
			maxSockets: 256,
			maxFreeSockets: 256,
			scheduling: 'lifo',
			// specify proxy URL.
			proxy: 'http://20.219.180.149:3129'
		})
	}
};

try {
	// make HTTP request
	const {body} = await got('https://httpbin.io/ip', proxyOptions);
	// log the response
	console.log(body);
} catch (error) {
	console.error(error);
}"
hYWwrfz9,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 09:03:35 PM CDT,"//...

try {
	// make HTTP request
	const {body} = await got('https://httpbin.io/ip', proxyOptions);
	// log the response
	console.log(body);
} catch (error) {
	console.error(error);
}"
ngXcjndZ,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 08:58:42 PM CDT,"// import the required modules
import got from 'got';
import {HttpsProxyAgent} from 'hpagent';

const proxyOptions = {
	agent: {
		// create a new HttpsProxyAgent instance
		https: new HttpsProxyAgent({
			// add proxy settings
			keepAlive: true,
			keepAliveMsecs: 1000,
			maxSockets: 256,
			maxFreeSockets: 256,
			scheduling: 'lifo',
			// specify proxy URL.
			proxy: 'http://20.219.180.149:3129'
		})
	}
};"
sLMwatTH,Untitled,Aw3som3n3sss,Bash,Sunday 21st of April 2024 08:58:12 PM CDT,"CC = gcc
CFLAGS = -Wall

all: server client

server: server.o
	$(CC) $(CFLAGS) -o server server.o

client: client.o
	$(CC) $(CFLAGS) -o client client.o

clean:
	rm -f server client *.o

Server.o: server.c
	client.o: client.c


CC = gcc
CFLAGS = -Wall

all: server client

server: server.o
	$(CC) $(CFLAGS) -o server server.o

client: client.o
	$(CC) $(CFLAGS) -o client client.o

clean:
	rm -f server client *.o

Server.o: server.c
	client.o: client.c
"
HFzgGdyC,Java Random Integer 0-99,TeRackSito,Java,Sunday 21st of April 2024 08:57:54 PM CDT,"package angel;

import java.util.HashMap;
import java.util.Map;

public class RandomCounterMap extends Thread {
    private int start;
    private int end;
    private long executionTime;
    private Map<Integer, Integer> results;

    public RandomCounterMap(int start, int end) {
        this.start = start;
        this.end = end;
        this.results = new HashMap<>();
    }

    public Map<Integer, Integer> getResults() {
        return results;
    }

    public int getLength() {
        int length = 0;
        for (int value : results.values()) {
            length += value;
        }
        return length;
    }

    public long getExecutionTime() {
        return executionTime;
    }

    private int randomInt() {
        return (int) (Math.random() * 100);
    }

    @Override
    public void run() {
        long startTime = System.currentTimeMillis();
        for (int i = start; i <= end; i++) {
            int result = randomInt();
            try {
                results.put(result, results.get(result) + 1);
            } catch (NullPointerException e) {
                results.put(result, 1);
            }
        }
        long endTime = System.currentTimeMillis();
        executionTime = endTime - startTime;
    }

    public static void main(String[] args) {
        int numbers = 100_000_000;
        int numThreads = 8;
        int numbersPerThread = numbers / numThreads;

        RandomCounterMap[] calculators = new RandomCounterMap[numThreads];
        for (int i = 0; i < numThreads; i++) {
            int start = i * numbersPerThread + 1;
            int end = (i + 1) * numbersPerThread;
            calculators[i] = new RandomCounterMap(start, end);
        }

        long startTime = System.currentTimeMillis();
        for (RandomCounterMap calculator : calculators) {
            calculator.start();
        }

        for (RandomCounterMap calculator : calculators) {
            try {
                calculator.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        long endTime = System.currentTimeMillis();



        int totalResults = 0;
        for (int i = 0; i < calculators.length; i++) {
            System.out.println(""Thread "" + i + "" took "" + calculators[i].getExecutionTime() + ""ms"");
        }
        System.out.println(""Time taken: "" + (endTime - startTime) + ""ms"");
    }
}

"
xkg2XHg8,client,Aw3som3n3sss,C,Sunday 21st of April 2024 08:56:13 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>

void error(const char *msg)
{
    perror(msg);
    exit(0);
}

int main(int argc, char *argv[])
{
    int sockfd, portno, n;
    struct sockaddr_in serv_addr;
    struct hostent *server;

    char buffer[256];
    if (argc < 3) {
       fprintf(stderr,""usage %s hostname port\n"", argv[0]);
       exit(0);
    }
    portno = atoi(argv[2]);
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0)
        error(""ERROR opening socket"");
    server = gethostbyname(argv[1]);
    if (server == NULL) {
        fprintf(stderr,""ERROR, no such host\n"");
        exit(0);
    }
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr,
         (char *)&serv_addr.sin_addr.s_addr,
         server->h_length);
    serv_addr.sin_port = htons(portno);
    if (connect(sockfd,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) < 0)
        error(""ERROR connecting"");
    printf(""Please enter an Expression in post fix notation (5 4 -): "");
    bzero(buffer,256);
    fgets(buffer,255,stdin);
    n = write(sockfd,buffer,strlen(buffer));
    if (n < 0)
         error(""ERROR writing to socket"");
    bzero(buffer,256);
    n = read(sockfd,buffer,255);
    if (n < 0)
         error(""ERROR reading from socket"");
    printf(""%s\n"",buffer);
    close(sockfd);
    return 0;
}
"
ARk5QLhC,Play Pickup Audio,lpendle,C#,Sunday 21st of April 2024 08:56:08 PM CDT,"using UnityEngine;
 
public class Pickup : MonoBehaviour
{
    // public fields
     
    // private fields
    private PickupManager pickupManager;
    private AudioSource aSource;

    // Start is called before the first frame update
    void Start()
    {
        pickupManager = GameObject.FindObjectOfType<PickupManager>();
		aSource = GetComponent<AudioSource>();
    }
 
    void OnTriggerEnter(Collider hit)
    {
        //Debug.Log($""Coin hit by: {hit.gameObject.tag}"");
 
        if (hit.gameObject.CompareTag(""Player""))
        {
            if (gameObject.name == ""Pickup"")
            {
                pickupManager.UpdateCoinAmount();
                aSource.Play();
                Destroy(gameObject);
            }
 
            if (gameObject.name == ""Gem"")
            {
                // allow exit
                DoorTrigger doorTrigger = FindObjectOfType<DoorTrigger>();
                doorTrigger.SetDoOpen(true);
 
                // show message
                UIManager uiManager = FindObjectOfType<UIManager>();
                uiManager.DisplayExitDoorUnLockedState(""UnLocked"");
 
                Destroy(gameObject);
            }
            
        }           
    }
}"
7VJyrZRD,Java Random Integer 0-99,TeRackSito,Java,Sunday 21st of April 2024 08:55:34 PM CDT,"package angel;

import java.util.HashMap;
import java.util.Map;

public class RandomCounterMap extends Thread {
    private int start;
    private int end;
    private long executionTime;
    private Map<Integer, Integer> results;

    public RandomCounterMap(int start, int end) {
        this.start = start;
        this.end = end;
        this.results = new HashMap<>();
    }

    public Map<Integer, Integer> getResults() {
        return results;
    }

    public int getLength() {
        int length = 0;
        for (int value : results.values()) {
            length += value;
        }
        return length;
    }

    public long getExecutionTime() {
        return executionTime;
    }

    private int randomInt() {
        return (int) (Math.random() * 100);
    }

    @Override
    public void run() {
        long startTime = System.currentTimeMillis();
        for (int i = start; i <= end; i++) {
            int result = randomInt();
            try {
                results.put(result, results.get(result) + 1);
            } catch (NullPointerException e) {
                results.put(result, 1);
            }
        }
        long endTime = System.currentTimeMillis();
        executionTime = endTime - startTime;
    }

    public static void main(String[] args) {
        int numbers = 100_000_000;
        int numThreads = 1;
        int numbersPerThread = numbers / numThreads;

        RandomCounterMap[] calculators = new RandomCounterMap[numThreads];
        for (int i = 0; i < numThreads; i++) {
            int start = i * numbersPerThread + 1;
            int end = (i + 1) * numbersPerThread;
            calculators[i] = new RandomCounterMap(start, end);
        }

        long startTime = System.currentTimeMillis();
        for (RandomCounterMap calculator : calculators) {
            calculator.start();
        }

        for (RandomCounterMap calculator : calculators) {
            try {
                calculator.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        long endTime = System.currentTimeMillis();

        System.out.println(""Time taken: "" + (endTime - startTime) + ""ms"");

        int totalResults = 0;
        for (int i = 0; i < calculators.length; i++) {
            System.out.println(""Thread "" + i + "" took "" + calculators[i].getExecutionTime() + ""ms"");
        }
    }
}

"
vYAAYcv5,G++ makefile,gabrieleb,Make,Sunday 21st of April 2024 08:41:18 PM CDT,".DEFAULT_GOAL := test # make

CFLAGS = -Wall -Wextra -pedantic -std=c++17

SRCDIR = src
INCDIR = include
BUILDDIR = build
EXE = binfo

SRCS = $(wildcard $(SRCDIR)/*.cpp)
OBJS = $(patsubst $(SRCDIR)/%.cpp,$(BUILDDIR)/%.o,$(SRCS))
TEST_EXCLUDE = $(filter-out $(SRCDIR)/binfo.cpp, $(SRCS))
TEST_OBJS = $(patsubst $(SRCDIR)/%.cpp,$(BUILDDIR)/%.o, $(TEST_EXCLUDE))

$(BUILDDIR)/%.o: $(SRCDIR)/%.cpp
	g++ $(CFLAGS) -I$(INCDIR) -c -o $@ $<

test: $(OBJS) tests/test.cpp
	g++ $(CFLAGS) -g -I$(INCDIR) -L. -o test tests/test.cpp $(TEST_OBJS)

d: $(OBJS)
	g++ $(CFLAGS) -g -I$(INCDIR) -o $(EXE) $(OBJS)

binfo: $(OBJS)
	g++ $(CFLAGS) -I$(INCDIR) -o $(EXE) $(OBJS)

clean:
	rm -rf $(BUILDDIR)/*.o test.exe test binfo.exe binfo
"
5t9ejzyg,Untitled,lpendle,C#,Sunday 21st of April 2024 08:25:50 PM CDT,"
Pastebin
API
tools
faq
paste
lpendle
FREE
lpendle
 
Advertisement
SHARE
TWEET
Guest User
Untitled
a guest
Apr 21st, 2024
13
0
Never
Add comment
1.33 KB | Gaming |

using UnityEngine;
 
public class Pickup : MonoBehaviour
AudioManager audioManager;
 
 
{
    audioManager = GameObject.FindGameObjectWithTag(""Audio"").GetComponent<AudioManager>();
}
{
    // public fields
 
    // private fields
    private PickupManager pickupManager;
    private void Awake()
    // Start is called before the first frame update
    void Start()
    {
        pickupManager = GameObject.FindObjectOfType<PickupManager>();
    }
 
    void OnTriggerEnter(Collider hit)
    {
        //Debug.Log($""Coin hit by: {hit.gameObject.tag}"");
 
        if (hit.gameObject.CompareTag(""Player""))
        {
            if (gameObject.name == ""Pickup"")
            {
                pickupManager.UpdateCoinAmount();
                audioManager.PlaySFX(audioManager.Coin_Collecting);
                Destroy(gameObject);
            }
 
            if (gameObject.name == ""Gem"")
            {
                // allow exit
                DoorTrigger doorTrigger = FindObjectOfType<DoorTrigger>();
                doorTrigger.SetDoOpen(true);
 
                // show message
                UIManager uiManager = FindObjectOfType<UIManager>();
                uiManager.DisplayExitDoorUnLockedState(""UnLocked"");
 
                Destroy(gameObject);
            }
 
        }           
    }
}

     

Advertisement
RAW Paste Data
using UnityEngine;

public class Pickup : MonoBehaviour
AudioManager audioManager;


{
    audioManager = GameObject.FindGameObjectWithTag(""Audio"").GetComponent<AudioManager>();
}
{
    // public fields

    // private fields
    private PickupManager pickupManager;
    private void Awake()
    // Start is called before the first frame update
    void Start()
    {
        pickupManager = GameObject.FindObjectOfType<PickupManager>();
    }

    void OnTriggerEnter(Collider hit)
    {
        //Debug.Log($""Coin hit by: {hit.gameObject.tag}"");

        if (hit.gameObject.CompareTag(""Player""))
        {
            if (gameObject.name == ""Pickup"")
            {
                pickupManager.UpdateCoinAmount();
                audioManager.PlaySFX(audioManager.Coin_Collecting);
                Destroy(gameObject);
            }

            if (gameObject.name == ""Gem"")
            {
                // allow exit
                DoorTrigger doorTrigger = FindObjectOfType<DoorTrigger>();
                doorTrigger.SetDoOpen(true);

                // show message
                UIManager uiManager = FindObjectOfType<UIManager>();
                uiManager.DisplayExitDoorUnLockedState(""UnLocked"");

                Destroy(gameObject);
            }
            
        }           
    }
}"
pJ0p4AA9,FAKE visual batch files,IcarusLives,Batch,Sunday 21st of April 2024 08:25:29 PM CDT,"@echo off & setlocal enableDelayedExpansion & call :init
mode 80,60

rem visual sprites for 3x4 sized letters
set ""warning.sprite= ² ² [5D%\e%[B ² ² %\e%[5D%\e%[B %\e%[C %\e%[C %\e%[5D%\e%[B%\e%[C %\e%[C %\e%[C%\e%[3A%\e%[C%\e%[C  %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B   %\e%[3D%\e%[B %\e%[C %\e%[3A%\e%[C   %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B  %\e%[C%\e%[3D%\e%[B %\e%[C %\e%[3A%\e%[C %\e%[C² %\e%[4D%\e%[B  ² %\e%[4D%\e%[B ²  %\e%[4D%\e%[B ²%\e%[C %\e%[3A%\e%[C %\e%[D%\e%[B %\e%[D%\e%[B %\e%[D%\e%[B %\e%[3A%\e%[C %\e%[C² %\e%[4D%\e%[B  ² %\e%[4D%\e%[B ²  %\e%[4D%\e%[B ²%\e%[C %\e%[3A%\e%[C   %\e%[3D%\e%[B %\e%[2C%\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B   %\e%[3A%\e%[C%\e%[0m""
set ""virus.sprite= ² %\e%[3D%\e%[B ² %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B%\e%[C %\e%[C%\e%[3A%\e%[C %\e%[D%\e%[B %\e%[D%\e%[B %\e%[D%\e%[B %\e%[3A%\e%[C   %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B  %\e%[C%\e%[3D%\e%[B %\e%[C %\e%[3A%\e%[C ² %\e%[3D%\e%[B ² %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B   %\e%[3A%\e%[C  %\e%[2D%\e%[B %\e%[C%\e%[2D%\e%[B%\e%[C %\e%[2D%\e%[B  %\e%[3A%\e%[C%\e%[0m""
set ""alert.sprite=%\e%[C  %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B   %\e%[3D%\e%[B %\e%[C %\e%[3A%\e%[C ²²%\e%[3D%\e%[B ²²%\e%[3D%\e%[B %\e%[2C%\e%[3D%\e%[B   %\e%[3A%\e%[C   %\e%[3D%\e%[B %\e%[2C%\e%[3D%\e%[B  %\e%[C%\e%[3D%\e%[B   %\e%[3A%\e%[C   %\e%[3D%\e%[B %\e%[C %\e%[3D%\e%[B  %\e%[C%\e%[3D%\e%[B %\e%[C %\e%[3A%\e%[C   %\e%[3D%\e%[B%\e%[C %\e%[C%\e%[3D%\e%[B² ²%\e%[3D%\e%[B² ²%\e%[3A%\e%[C%\e%[0m""

set /a ""r1=75, g1=0, b1=0"", ""r2=0, g2=75, b2=0"", ""i=1""

for /l %%# in () do (
	set /a ""r1+=i"",""g1+=i"",""b1+=i"", ""r2+=i"",""g2+=i"",""b2+=i""
	
	if !b1! geq 120 set /a ""i*=-1""
	if !b1! leq 0   set /a ""i*=-1""
	
echo=%\e%[2J%\e%[48;2;!r1!;!g1!;!b1!;38;5;16m^
%\e%[10;25H!warning.sprite!^
%\e%[48;2;!r2!;!g2!;!b2!;38;5;16m^
%\e%[30;20H!virus.sprite!^
%\e%[3C%\e%[48;2;!r2!;!g2!;!b2!;38;5;16m^
!alert.sprite!%\e%[0m^
%\e%[40;20H%\e%7Deleting System32...^
%\e%8%\e%[B%\e%7Deleting all documents...^
%\e%8%\e%[B%\e%7Deleting all photos...^
%\e%8%\e%[B%\e%7Deleting all recovery files...

)

:init
(for /f %%a in ('echo prompt $E^| cmd') do set ""\e=%%a"" )
<nul set /p ""=%\e%[?25l""
goto :eof"
RnxhE7nb,C++ Square Calculator,TeRackSito,C++,Sunday 21st of April 2024 08:25:13 PM CDT,"#include <iostream>
#include <vector>
#include <chrono>
#include <thread>

using namespace std;
using namespace std::chrono;

class SquareCalculator
{
private:
    int start;
    int end;
    long long executionTime;
    vector<int> results;

public:
    SquareCalculator(int start, int end) : start(start), end(end), executionTime(0) {}

    vector<int> getResults() const
    {
        return results;
    }

    long long getExecutionTime() const
    {
        return executionTime;
    }

    void operator()()
    {
        auto startTime = high_resolution_clock::now();
        for (int i = start; i <= end; i++)
        {
            int square = i * i;
            results.push_back(square);
        }
        auto endTime = high_resolution_clock::now();
        executionTime = duration_cast<milliseconds>(endTime - startTime).count();
    }
};

int main()
{
    const int numbers = 100'000'000;
    const int numThreads = 1;
    const int numbersPerThread = numbers / numThreads;

    vector<SquareCalculator> calculators;
    for (int i = 0; i < numThreads; i++)
    {
        int start = i * numbersPerThread + 1;
        int end = (i + 1) * numbersPerThread;
        calculators.emplace_back(start, end);
    }

    auto startTime = high_resolution_clock::now();
    vector<thread> threads;
    for (auto &calculator : calculators)
    {
        threads.emplace_back(ref(calculator));
    }

    for (auto &thread : threads)
    {
        thread.join();
    }
    auto endTime = high_resolution_clock::now();

    for (size_t i = 0; i < calculators.size(); i++)
    {
        cout << ""Thread "" << i << "" took "" << calculators[i].getExecutionTime() << ""ms"" << endl;
    }

    cout << ""Time taken: "" << duration_cast<milliseconds>(endTime - startTime).count() << ""ms"" << endl;

    return 0;
}
"
dGutyzBP,Untitled,dereksir,Bash,Sunday 21st of April 2024 08:20:02 PM CDT,npm install hpagent
zwA3057C,X-Ware,Mysticfallscript_,Lua,Sunday 21st of April 2024 07:58:57 PM CDT,"local tar = game.workspace:FindFirstChild(""AstroValues"")
if tar then
    tar:Destroy()
end
local tart = game.workspace:FindFirstChild(""Custom Animations"")
if tart then
    tart:Destroy()
end
local AstroValues = Instance.new(""Folder"",workspace)
AstroValues.Name = ""AstroValues""
local ActiveKey = Instance.new(""StringValue"",workspace.AstroValues)
ActiveKey.Name = ""Keys""
--starter
local Animation_Folder = Instance.new(""Folder"")
Animation_Folder.Parent = workspace
Animation_Folder.Name = ""Custom Animations""
--Kolmove Animation
local AnimationId = ""6112652562""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""kolmove""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""kolmove""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--masspain Animation
local AnimationId = ""5414156941""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""masspain""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""masspain""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Push Animation
local AnimationId = ""5412263593""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""push""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""push""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)
--Delfan Animatio--]]
local AnimationId = ""5815383220""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""delfan""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""delfan""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Fire Circle Animation
local AnimationId = ""5414902308""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""fire circle""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""fire circle""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Motus Animation
local AnimationId = ""4756402298""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""motus""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""motus""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Self Siphon Animation
local AnimationId = ""4786138659""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""Self Siphon""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""Self Siphon""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Siphon Energy
local AnimationId = ""4756427378""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""Siphon""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""Siphon""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
--Ah sha lana
local AnimationId = ""5422859012""
local Anim = Instance.new(""Animation"")
Anim.Parent = game:GetService(""Workspace"")[""Custom Animations""]
Anim.Name = ""Ah sha lana""
Anim.AnimationId = ""rbxassetid://""..AnimationId
--[[
local Anim = game:GetService(""Workspace"")[""Custom Animations""][""Ah sha lana""]
local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
k:Play()
k:AdjustSpeed(1)--]]
local Player = game.Players.LocalPlayer
local Character = Player.Character
local hum = Character.HumanoidRootPart
local Position = hum.CFrame
local Rep = game:GetService(""ReplicatedStorage"")
local Library = loadstring(game:HttpGet(""https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua""))()
local Gui = Library.CreateLib(""Mystic Falls | Made By Noah"", ""DarkTheme"")
local Binds = Gui:NewTab(""Keybinds"");
local WB = Binds:NewSection(""Witch Keybinds"")
local VB = Binds:NewSection(""Energy Keybinds"")
local Witch = Gui:NewTab(""Witches"");
local W = Witch:NewSection(""Witches"")
local Vamp = Gui:NewTab(""Vamp/Wolf"");
local V = Vamp:NewSection(""VAMPIRE"")
local Misc = Gui:NewTab(""Misc"");
local M = Misc:NewSection(""Misc"")
local Teleports = Gui:NewTab(""Teleports"");
local T = Teleports:NewSection(""Teleports"")
local Custom = Gui:NewTab(""Custom Spells"");
local Cu = Custom:NewSection(""Custom Spells"")
local Occupied = Gui:NewTab(""Occupied Check"");
local O = Occupied:NewSection(""Occupied Check"")
local Paid = Gui:NewTab(""Abuse Char"");
local P = Paid:NewSection(""Sybil Section"")
local Credits = Gui:NewTab(""Credits"");
local C = Credits:NewSection(""Credits"")
local Gui = Gui:NewTab(""Gui"");
local G = Gui:NewSection(""Gui"")

V:NewToggle(""Vampire Immortality"", """", function(I)
    _G.IMMORTAL = I

    while _G.IMMORTAL == true  do
        local args = {
            [1] = false
        }

        game:GetService(""Players"").LocalPlayer.Character.BurnInSun.Control:FireServer(unpack(args))
        wait()
    end
end)
V:NewToggle(""Kill All"", """", function(SPAM)
    _G.HealSpam = SPAM
    while _G.HealSpam == true do
        local Plr = game.Players.LocalPlayer
        for i, Player in pairs (game.Players:GetPlayers()) do

            if Player.Character ~= nil and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 999999999 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local args = {
                        [1] = ""Heal"",
                        [2] = {
                            [1] = Target
                        }
                    }

                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
        wait()
    end
end)
V:NewToggle(""Spam Punch All"", """", function(PU)
    _G.PUNCH = PU
    while _G.PUNCH == true do
        local Plr = game.Players.LocalPlayer
        for i, Player in pairs (game.Players:GetPlayers()) do
        
            if Player.Character ~= nil and Player ~= Plr then
                local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
                if mag < 9999999999999999 then
                    local Target = Player.Character or Player.CharacterAdded:Wait()
                    local args = {
                        [1] = ""Punch"",
                        [2] = {
                            [1] = false,
                            [2] = Target.Humanoid
                        }
                    }
        
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
        wait()
    end
end)

V:NewButton(""Head Decapitate(Y)"", """", function()
    local UserInputService = game:GetService(""UserInputService"")
    local keybind = Enum.KeyCode.Y
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = ""Decapitate"",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton(""Heart Rip(B)"", """", function()
    local UserInputService = game:GetService(""UserInputService"")
    local keybind = Enum.KeyCode.B
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = ""RipOutHeart"",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton(""Dont Burn(Vampire)"", """", function()

	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid

	local Bite = Character:WaitForChild(""Ring"")
	Bite.Active.Value = true

	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Dont Burn loaded!"";
		Text = ""Made by tisnoah#0.""
	})

end)
V:NewButton(""Super Feed(C)"", """", function()
    local UserInputService = game:GetService(""UserInputService"")
    local keybind = Enum.KeyCode.C
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = ""Feed"",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton(""Super Heal(E)"", """", function()
    local UserInputService = game:GetService(""UserInputService"")
    local keybind = Enum.KeyCode.E
    local function iskeybinddown()
        return UserInputService:IsKeyDown(keybind)
    end
    local function Input(input, gameProcessedEvent)
        local localplr = game.Players.LocalPlayer
        local mouse = localplr:GetMouse()
        if iskeybinddown() then
            if mouse.Target and mouse.Target.Parent then
                plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if plr ~= nil then
                    local user = game.Players[plr.Name].Character
                    local args = {
                        [1] = ""Heal"",
                        [2] = {
                            [1] = user
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                    print(plr.Name)
                end
            end
        end
    end
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton(""Wolf Bite(U)"", """", function()
    local UserInputService = game:GetService(""UserInputService"")
    local keybind = Enum.KeyCode.U
    
    local function isKeybindDown()
        return UserInputService:IsKeyDown(keybind)
    end
    
    local function Input(input, gameProcessedEvent)
        if isKeybindDown() then
            local localPlayer = game.Players.LocalPlayer
            local mouse = localPlayer:GetMouse()
            if mouse.Target and mouse.Target.Parent then
                local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
                if targetPlayer then
                    local user = targetPlayer.Character
                    if user then
                        local args = {
                            ""Bite"",
                            {
                                [1] = false,
                                [2] = user
                            }
                        }
                        for _ = 1, 10 do
                            game:GetService(""ReplicatedStorage"").Events.Werewolf:FireServer(unpack(args))
                            print(targetPlayer.Name)
                        end
                    end
                end
            end
        end
    end
    
    UserInputService.InputBegan:Connect(Input)
end)
V:NewButton(""Feed On Yourself"", """", function()
   local args = {
      [1] = ""Feed"",
      [2] = {
          [1] = game:GetService(""Players"").LocalPlayer.Character
      }
  }
  
  game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
  wait(0.5)
  local args = {
      [1] = ""Heal"",
      [2] = {
          [1] = game:GetService(""Players"").LocalPlayer.Character
      }
  }
  
  game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
end)
V:NewButton(""Snap All"", """", function() 
    local plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= plr then
            local mag = (Player.Character.UpperTorso.Position - plr.Character.UpperTorso.Position).magnitude
            if mag < 9999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = ""NeckSnap"",
                    [2] = {
                        [1] = Target
                    }
                }
                
                game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
            end
        end
    end
end) 
V:NewButton(""Wolf Bite All"", """", function() 
    local plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= plr then
            local mag = (Player.Character.UpperTorso.Position - plr.Character.UpperTorso.Position).magnitude
            if mag < 9999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = ""Bite"",
                    [2] = {
                        [1] = false,
                        [2] = Target
                    }
                }
                
                game:GetService(""ReplicatedStorage"").Events.Werewolf:FireServer(unpack(args))
            end
        end
    end
end) 
V:NewButton(""Remove Wolf-Ven"", """", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid

	local Bite = Character:WaitForChild(""WerewolfVenom"")
	Bite:Destroy()
end)

V:NewButton(""Compulsion"", ""To Compell Originals use a Original"", function()
	local UserInputService = game:GetService(""UserInputService"")

	local keybind = Enum.KeyCode.G

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then

					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

					local A_1 = ""GiveStake""
					local A_2 = 
						{
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)


local UserInputService = game:GetService(""UserInputService"")

local keybind = Enum.KeyCode.X

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Compel(player)
    local args = {
        [1] = ""Start"",
        [2] = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
    }

    for _ = 1, 13 do
        game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

        local A_1 = ""PunchSelf""
        local A_2 = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
        local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Compel(targetPlayer)
            end
        end
    end
end

UserInputService.InputBegan:Connect(Input)



	local UserInputService = game:GetService(""UserInputService"")

	local keybind = Enum.KeyCode.C

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end

	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

					local A_1 = ""RingOff""
					local A_2 = 
						{
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService(""UserInputService"")

	local keybind = Enum.KeyCode.J

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

					local A_1 = ""Follow""
					local A_2 = 
						{
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end


	UserInputService.InputBegan:Connect(Input)

local UserInputService = game:GetService(""UserInputService"")

local keybind = Enum.KeyCode.X

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Punch(player)
    local args = {
        [1] = ""Start"",
        [2] = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
    }

    for _ = 1, 13 do -- Loop 13 times to punch
        game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

        local A_1 = ""PunchSelf""
        local A_2 = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
        local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Punch(targetPlayer)
            end
        end
    end
end


local UserInputService = game:GetService(""UserInputService"")

local keybind = Enum.KeyCode.R

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Punch(player)
    local args = {
        [1] = ""Start"",
        [2] = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
    }

    for _ = 1, 13 do 
        game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

        local A_1 = ""StandStill""
        local A_2 = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
        local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Punch(targetPlayer)
            end
        end
    end
end

UserInputService.InputBegan:Connect(Input)

local UserInputService = game:GetService(""UserInputService"")

local keybind = Enum.KeyCode.H

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Punch(player)
    local args = {
        [1] = ""Start"",
        [2] = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
    }

    for _ = 1, 13 do 
        game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

        local A_1 = ""AllowMove""
        local A_2 = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
        local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Punch(targetPlayer)
            end
        end
    end
end

UserInputService.InputBegan:Connect(Input)


local UserInputService = game:GetService(""UserInputService"")

local keybind = Enum.KeyCode.X

local function iskeybinddown()
    return UserInputService:IsKeyDown(keybind)
end

local function Punch(player)
    local args = {
        [1] = ""Start"",
        [2] = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
    }

    for _ = 1, 13 do
        game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

        local A_1 = ""PunchSelf""
        local A_2 = {
            [1] = game:GetService(""Workspace"").Live[player.Name]
        }
        local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
        Event:FireServer(A_1, A_2)
        print(player.Name)
    end
end

local function Input(input, gameProcessedEvent)
    if iskeybinddown() then
        local localPlayer = game.Players.LocalPlayer
        local mouse = localPlayer:GetMouse()
        if mouse.Target and mouse.Target.Parent then
            local targetPlayer = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
            if targetPlayer then
                Punch(targetPlayer)
            end
        end
    end
end

UserInputService.InputBegan:Connect(Input)


	local UserInputService = game:GetService(""UserInputService"")

	local keybind = Enum.KeyCode.N

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

					local A_1 = ""DontPunch""
					local A_2 = 
						{
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end
	UserInputService.InputBegan:Connect(Input)

	local UserInputService = game:GetService(""UserInputService"")

	local keybind = Enum.KeyCode.M

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

					local A_1 = ""Sleep""
					local A_2 = 
						{
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)




	local UserInputService = game:GetService(""UserInputService"")

	local keybind = Enum.KeyCode.T

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~= nil then
					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))

					local A_1 = ""WerewolfTurn""
					local A_2 = 
						{
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
					Event:FireServer(A_1, A_2)
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)


	local keybind = Enum.KeyCode.Q

	local function iskeybinddown()
		return UserInputService:IsKeyDown(keybind)
	end


	local function Input(input, gameProcessedEvent)
		local localplr = game.Players.LocalPlayer
		local mouse = localplr:GetMouse()
		if iskeybinddown() then
			if mouse.Target and mouse.Target.Parent then
				plr=game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
				if plr ~=nil then
					local args = {
						[1] = ""Start"",
						[2] = {
							[1] = game:GetService(""Workspace"").Live[plr.Name]
						}
					}

					game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(args))
					print(plr.Name)
				end
			end
		end
	end

	UserInputService.InputBegan:Connect(Input)

end)
V:NewButton(""Gravity Gun"", """", function()
    loadstring(game:HttpGet(('https://pastebin.com/raw/vKLPUB6r'),true))()
    -- Q & E - bring closer and further
    -- R - Roates Block
    -- T - Tilts Block
    -- Y - Throws Block
    loadstring(game:HttpGet(('https://pastebin.com/raw/fRRFiz3V'),true))()
end)
V:NewLabel(""WOLF"")
V:NewButton(""Control Turn(L and K)"", """", function()
    local bind = 'l'
    local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
    
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if IsTyping then return end
        if key == bind then
            local player = getPlayer()
            local Mouse = game.Players.LocalPlayer:GetMouse()
            local args = {
                [1] = ""Turn"",
                [2] = {
                   [1] = ""turnBack""
                }
             }
             
             game:GetService(""ReplicatedStorage"").Events.Werewolf:FireServer(unpack(args))																			
        end
    end)
    local bind = 'k'
    local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
    
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if IsTyping then return end
        if key == bind then
            local player = getPlayer()
            local Mouse = game.Players.LocalPlayer:GetMouse()
            local args = {
                [1] = ""Turn"",
                [2] = {
                   [1] = ""Turn""
                }
             }
             
             game:GetService(""ReplicatedStorage"").Events.Werewolf:FireServer(unpack(args))																			
        end
    end)
end)
V:NewButton(""Snap(V)"", """", function()
   local UserInputService = game:GetService(""UserInputService"")
   local keybind = Enum.KeyCode.V
   local function iskeybinddown()
       return UserInputService:IsKeyDown(keybind)
   end
   local function Input(input, gameProcessedEvent)
       local localplr = game.Players.LocalPlayer
       local mouse = localplr:GetMouse()
       if iskeybinddown() then
           if mouse.Target and mouse.Target.Parent then
               plr = game.Players:GetPlayerFromCharacter(mouse.Target.Parent)
               if plr ~= nil then
                   local user = game.Players[plr.Name].Character
                   local args = {
                     [1] = ""NeckSnap"",
                     [2] = {
                         [1] = user
                     }
                 }
                 
                 game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))                 
                   print(plr.Name)
               end
           end
       end
   end
   UserInputService.InputBegan:Connect(Input)
end)

W:NewToggle(""LoopDeleteChannel"", """", function(toggle)
	_G.DeleteChannel = toggle
	while _G.DeleteChannel == true do
		local Player = game.Players.LocalPlayer
		local Character = Player.Character

		local Channel = Character:WaitForChild(""Channeling"")
		Channel:Destroy()
		wait()
	end
end)
W:NewToggle(""Spam Channel Whole Server"", """", function(cha)
   _G.channel = cha
   while _G.channel == true do
      local Plr = game.Players.LocalPlayer
      for i, Player in pairs (game.Players:GetPlayers()) do
         if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
               local Target = Player.Character or Player.CharacterAdded:Wait()

               local args = {
                  [1] = ""Magic"",
                  [2] = {
                     [1] = ""requestChanneling"",
                     [2] = Target
                  }
            }
            
            game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))
            end
         end
      end
      wait()
   end
end)
W:NewToggle(""Push All"", """", function(PushAll)
	_G.PushAll = PushAll
	local AnimationId = ""5422859012""
	local AnimationId = ""5422859012""
	local Anim = Instance.new(""Animation"")
	Anim.AnimationId = ""rbxassetid://""..AnimationId
	local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
	k:Play()
	k:AdjustSpeed(1)
	wait(2)
	while _G.PushAll == true do
	local Plr = game.Players.LocalPlayer
		for i, Player in pairs (game.Players:GetPlayers()) do
	
			if Player.Character ~= nil and Player ~= Plr then
				local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
				if mag < 999999 then
					local Target = Player.Character or Player.CharacterAdded:Wait()
	
					local A_1 = ""Push""
					local A_2 = 
						{
							[1] = Target
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Witch
					Event:FireServer(A_1, A_2)
	
				end
			end
		end
		wait()
	end
end)
W:NewTextBox(""LoopChannel"", """", function(plr)
    local Players = game:GetService(""Players"")
    local msg = plr

    local function findPlayer(stringg)
        for _, player in pairs(Players:GetPlayers()) do
            if stringg:lower() == player.Name:lower():sub(1, #stringg) then
                return player
            end
        end
    end
end)

--[[W:NewButton(""UnragdollKeybind(z) "", """", function()
	local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()
	bind = ""z""
	mouse.KeyDown:connect(function(key)
        if IsTyping then return end
		if key == bind then
			local args = {
				[1] = 1
			}
			game:GetService(""ReplicatedStorage"").Events.FallDamage:FireServer(unpack(args))
		end
	end)

	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Unradoll Keybind loaded"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""All Keybinds"", """", function()
	print(""a"")
	local state = true
    if state == true then
        local bind = 'g'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""PainInflict"",
                        [2] = {
                            [1] = player.Character,
                            [2] = false
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																
                end
            end
        end)
        local bind = 'r'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Push"",
                        [2] = {
                            [1] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																			
                end
            end
        end)
        local bind = 'c'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Magic"",
                        [2] = {
                            [1] = ""FireSpell"",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
  local bind = 'x'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Freeze"",
                        [2] = {
                            [1] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																			
                end
            end
        end)
local bind = 'f'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
              local args = {
                [1] = ""Punch"",
                [2] = {
                    [1] = false,
                    [2] = player.Character.Humanoid
                }
            }
            game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))																			
                end
            end
        end)
        local bind = 't'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Magic"",
                        [2] = {
                            [1] = ""BreakLeg"",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'j'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Magic"",
                        [2] = {
                            [1] = ""SnapNeck"",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)
        local bind = 'l'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Magic"",
                        [2] = {
                            [1] = ""DisableRing"",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																							
                end
            end
        end)
        local bind = 'k'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Magic"",
                        [2] = {
                            [1] = ""EnableRing"",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))
                                                                                        
                end
            end
        end)
        local bind = 'b'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local args = {
                        [1] = ""Magic"",
                        [2] = {
                            [1] = ""TelekineticHeart"",
                            [2] = player.Character
                        }
                    }
                    
                    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																						
                end
            end
        end)

        local bind = 'm'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                    local pos = player.Character.HumanoidRootPart.CFrame
                    local A_1 = ""Magic""
                    local A_2 = 
                        {
                            [1] = ""BloodChoke"", 
                            [2] = player.Character
                        }
                    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
                    Event:FireServer(A_1, A_2)																					
                end
            end
        end)
        local bind = 'q'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end
        
            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                if player then
                local args = {
                   [1] = ""Magic"",
                   [2] = {
                       [1] = ""FireCircle"",
                       [2] = player.Character
                   }
               }
               
               game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))                                                                       
                end
            end
        end)
       local function getPlayer()
    local userInput = game:GetService(""UserInputService"")
    local cam = workspace.CurrentCamera
    local mousePos = userInput:GetMouseLocation()
    local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
    local players = {}
    for _, x in pairs(game:GetService('Players'):GetPlayers()) do
        players[#players + 1] = x.Character
    end
    local raycastParams = RaycastParams.new()
    raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
    raycastParams.FilterDescendantsInstances = players
    raycastParams.IgnoreWater = true
    local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
    if raycastResult then
        for _, x in pairs(game:GetService('Players'):GetPlayers()) do
            if not raycastResult.Instance:IsDescendantOf(x.Character) then
                continue 
            end
            return x
        end
    end
    return false
end

local function bindFunction(bind, action)
    game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
        if IsTyping then return end
        if key == bind then
            local player = getPlayer()
            if player then
                action(player)
            else
                print(""Player not found."")
            end
        end
    end)
end

	local bind = 'y'
	local function getPlayer()
	local userInput = game:GetService(""UserInputService"")
	local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local A_1 = ""Magic""
                local A_2 = 
                {
                    [1] = ""Explosion"",
                    [2] = Mouse.Hit.p
                }
                local Event = game:GetService(""ReplicatedStorage"").Events.Witch
                Event:FireServer(A_1, A_2)																				
            end
        end)

        local bind = 'p'
        local function getPlayer()
                local userInput = game:GetService(""UserInputService"")
                local cam = workspace.CurrentCamera
                local mousePos = userInput:GetMouseLocation()
                local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
                players = {}
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    players[#players + 1] = x.Character
                end
                local raycastParams = RaycastParams.new()
                raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
                raycastParams.FilterDescendantsInstances = players
                raycastParams.IgnoreWater = true
                local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
                if raycastResult then
                    for _, x in next, game:GetService('Players'):GetPlayers() do
                        if not raycastResult.Instance:IsDescendantOf(x.Character) then
                            continue 
                        end
                        return x
                    end
                end
                return false
            end

            local function Set(list)
                local set = {}
                for _, l in ipairs(list) do
                    if l then
                        set[l] = true
                    end
                end
                return set
            end
            game.Players.LocalPlayer:GetMouse().KeyDown:Connect(function(key)
                if IsTyping then return end
            if key == bind then
                local player = getPlayer()
                local Mouse = game.Players.LocalPlayer:GetMouse()
                local args = {
                    [1] = ""Magic"",
                    [2] = {
                    [1] = ""SnapAll""
                    }
                }
                
                game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																					
            end
        end)
W:NewButton(""Immortality"", """", function()
    local plr = game.Players.LocalPlayer
    game.workspace.Live[plr.Name].Immortality.Comm:Destroy()
end)
W:NewButton(""See Other Side"", """", function()
	local plr = game.Players.LocalPlayer
	local char = plr.Character or plr.CharacterAdded:Wait()
	local fold = Instance.new(""Folder"")
	fold.Name = ""SeeGhosts""
	fold.Parent = char

	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""See Other Side loaded"";
		Text = ""Made by tisnoah#0.""
	})

end)
W:NewButton(""Vervain Body Loop"", """", function()
    local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Live = game.Workspace.Live
	local RunService = game:GetService(""RunService"")
	local Debounce = false

	while task.wait(2) do
		if not game.Players.LocalPlayer.Character:FindFirstChild(""VervainBody"") and game.Workspace.Live:FindFirstChild(game.Players.LocalPlayer.Character.Name) then
			local A_1 = ""Magic""
			local A_2 = 
				{
					[1] = ""VervainBody"",
					[2] = game.Players.LocalPlayer.Character
				}
			local Event = game:GetService(""ReplicatedStorage"").Events.Witch
			Event:FireServer(A_1, A_2)
		end
	end
end)

W:NewButton(""Witch Animation"", """", function()
    local character = game.Players.LocalPlayer.Character
    local humanoid = character:WaitForChild(""Humanoid"")
    local runAnim = Instance.new(""Animation"")
    runAnim.AnimationId = ""rbxassetid://13599944537""
    runAnim.Name = ""DemonRun""
    Instance.new(""BoolValue"", character).Name = ""Wolf""
    runAnim.Parent = character.Immortality
    local walkAnim = character.Immortality.DemonWalk
    local runAnimation = character.Immortality:WaitForChild(""DemonRun"")
    local walkAnimation = character.Immortality:WaitForChild(""DemonWalk"")
    local runAnimationTrack = humanoid:LoadAnimation(runAnimation)
    local walkAnimationTrack = humanoid:LoadAnimation(walkAnimation)
    local currentAnimationTrack = nil
    while true do
        if character and humanoid then
            if humanoid.ragdoll.Value == false then
                if humanoid.WalkSpeed == 16 then
                    if currentAnimationTrack ~= walkAnimationTrack then
                        character.Animate.Disabled = true
                        if currentAnimationTrack then
                            currentAnimationTrack:Stop()
                        end
                        walkAnimationTrack:Play()
                        currentAnimationTrack = walkAnimationTrack
                    end
                elseif humanoid.WalkSpeed > 16 then
                    if humanoid.MoveDirection.Magnitude > 0 then
                        if currentAnimationTrack ~= runAnimationTrack then
                            character.Animate.Disabled = true
                            if currentAnimationTrack then
                                currentAnimationTrack:Stop()
                            end
                            runAnimationTrack:Play()
                            currentAnimationTrack = runAnimationTrack
                        end
                    end
                end
            else
                character.Animate.Disabled = false
                currentAnimationTrack = nil
            end
            if humanoid.MoveDirection.Magnitude == 0 and currentAnimationTrack == runAnimationTrack then
                currentAnimationTrack:Stop()
                walkAnimationTrack:Play()
                currentAnimationTrack = walkAnimationTrack
            end        
            if character:FindFirstChild(""PainInfliction"") then
                humanoid.HipHeight = 2
            else
                humanoid.HipHeight = 2.5
            end
        end
        task.wait()
    end
end)
W:NewButton(""Kill Random Player"", """", function()
    local plrs = game.Players
    local num = math.random(1, #plrs:GetChildren())
    local chosenplr = plrs:GetChildren()[num]
    print(chosenplr.Name.."" was chosen!"")
    local POS = chosenplr.Character.HumanoidRootPart.CFrame.p
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(POS)
    wait(0.5)
    local args = {
        [1] = ""PainInflict"",
        [2] = {
            [1] = chosenplr.Character,
            [2] = false
        }
    }
    for i=1,100 do
    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))      
    end      
end)
W:NewButton(""Kill Around You"", """", function()
    local Plr = game.Players.LocalPlayer
    for i, Player in pairs (game.Players:GetPlayers()) do

        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 100 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
                local args = {
                    [1] = ""PainInflict"",
                    [2] = {
                        [1] = Target,
                        [2] = false
                    }
                }
                for i=1,50 do
                game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))      
                end      
            end
        end
    end
end)
W:NewButton(""Push All"", """", function()
    	local Plr = game.Players.LocalPlayer
    		for i, Player in pairs (game.Players:GetPlayers()) do
    	
    			if Player.Character ~= nil and Player ~= Plr then
    				local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
    				if mag < 999999999999 then
    					local Target = Player.Character or Player.CharacterAdded:Wait()
    	
    					local A_1 = ""Push""
    					local A_2 = 
    						{
    							[1] = Target
    						}
    					local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    					Event:FireServer(A_1, A_2)
    	
    				end
    			end
    		end
end)
W:NewButton(""Explode All"", """", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""Explosion"",
						[2] = Target.HumanoidRootPart.CFrame.p
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton(""Delfan All"", """", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""TelekineticHeart"",
						[2] = Target
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton(""Sleep All"", """", function()

	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""SleepSpell"",
						[2] = Target
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end

end)
W:NewButton(""Channel All"", """", function()
	local Plr = game.Players.LocalPlayer
	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

            local args = {
               [1] = ""Magic"",
               [2] = {
                   [1] = ""requestChanneling"",
                   [2] = Target
               }
           }
           
           game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))
			end
		end
	end
end)
W:NewButton(""Disable All Rings"", """", function()
	local Plr = game.Players.LocalPlayer

	for i, Player in pairs (game.Players:GetPlayers()) do
		if Player.Character ~= nil and Player ~= Plr then
			local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
			if mag < 999999 then
				local Target = Player.Character or Player.CharacterAdded:Wait()

				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""DisableRing"",
						[2] = Target
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)


			end
		end
	end
end)
--[[W:NewLabel(""KEYBINDS"")
W:NewButton(""Teleportation KeyBind (T)"", """", function()
	--local Debounce = true
	local Key = 'T'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = ""Magic""
			local A_2 = 
				{
					[1] = ""Teleport"", 
					[2] = Mouse.Hit.p
				}
			local Event = game:GetService(""ReplicatedStorage"").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Teleportation KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""Invisibility KeyBind (B)"", """", function()

	--local Debounce = true
	local Key = 'B'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = ""Magic""
			local A_2 = 
				{
					[1] = ""Invisibility""
				}
			local Event = game:GetService(""ReplicatedStorage"").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Invisibility KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})


end)
W:NewButton(""Explosion KeyBind (Y)"", """", function()

	--local Debounce = true
	local Key = 'Y'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			local A_1 = ""Magic""
			local A_2 = 
				{
					[1] = ""Explosion"", 
					[2] = Mouse.Hit.p
				}
			local Event = game:GetService(""ReplicatedStorage"").Events.Witch
			Event:FireServer(A_1, A_2)

		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Explosion KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""Sleep KeyBind (Q)"", """", function()

	--local Debounce = true
	local Key = 'Q'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass(""Model"")
				if model then
					if model:FindFirstChild(""Humanoid"") then
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""SleepSpell"", 
								[2] = model
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Sleep KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""Heart Rip KeyBind (M)"", """", function()

	--local Debounce = true
	local Key = 'M'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass(""Model"")
				if model then
					if model:FindFirstChild(""Humanoid"") then
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""TelekineticHeart"", 
								[2] = model
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Telekinetic Heart KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""Disabling Ring Keybind (L)"", """", function()

	--local Debounce = true
	local Key = 'L'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass(""Model"")
				if model then
					if model:FindFirstChild(""Humanoid"") then
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""DisableRing"", 
								[2] = model
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Disable Ring KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""Enabling Ring Keybind (K)"", """", function()

	--local Debounce = true
	local Key = 'K'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass(""Model"")
				if model then
					if model:FindFirstChild(""Humanoid"") then
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""EnableRing"", 
								[2] = model
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Enable Ring KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
W:NewButton(""VervainBody KeyBind (N)"", """", function()

	--local Debounce = true
	local Key = 'N'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		if input.KeyCode == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass(""Model"")
				if model then
					if model:FindFirstChild(""Humanoid"") then
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""VervainBody"",
								[2] = model
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)
					end
				end
			else
				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""VervainBody"",
						[2] = Character
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Vervain Body KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)

W:NewButton(""Incendia Keybind (C)"", """", function()

	--local Debounce = true
	local Key = 'C'
	local db = true

	UserInputService.InputBegan:Connect(function(input, IsTyping)
		if IsTyping then return end
		local KeyPressed = input.KeyCode
		if KeyPressed == Enum.KeyCode[Key] then
			if Mouse.Target then
				local model = Mouse.Target:FindFirstAncestorOfClass(""Model"")
				if model then
					if model:FindFirstChild(""Humanoid"") then
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""FireSpell"", 
								[2] = model
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Incendia KeyBind loaded!"";
		Text = ""Made by tisnoah#0.""
	})

end)
M:NewTextBox(""CustomName"", """", function(NAME)
	_G.auto_name = true
	while _G.auto_name == true do
		local args = {
			[1] = NAME
		}
		game:GetService(""ReplicatedStorage"").Events.FilterText:InvokeServer(unpack(args))
		wait()
	end
end)
M:NewButton(""Custom Commands"", """", function()
  local pref = ""!""
    local b = game.Players.LocalPlayer
    local c = b.Character
    local d = {}

    local function e(f, g)
        game:GetService(""StarterGui""):SetCore(""SendNotification"", {Title = f, Text = g})
    end

    local function resetD()
        d = {}
    end

    b.Chatted:Connect(function(h)
        h = h:lower()
        if string.sub(h, 1, 3) == ""/e "" then
            h = string.sub(h, 4)
        end
        if string.sub(h, 1, 1) == pref then
            local i
            local j = string.find(h, "" "")
            if j then
                i = string.sub(h, 2, j - 1)
            else
                i = string.sub(h, 2)
            end
            if i == ""respawn"" or i == ""re"" or i == ""r"" and not d[i] then
                d[i] = true
                local Event = game:GetService(""ReplicatedStorage"").Events.Respawn
                Event:FireServer()
                e(""Respawn Command"", ""Player respawned."")
            elseif i == ""mrespawn"" or i == ""mre"" or i == ""m"" and not d[i] then
                d[i] = true
                local LocalPlayer = game.Players.LocalPlayer
                local Character = LocalPlayer.Character
                local Humanoid = Character.Humanoid
                local Mouse = LocalPlayer:GetMouse()
                local Respawn = game:GetService(""ReplicatedStorage"").Events.Respawn
                Respawn:FireServer()
                wait()
                local Morph = game:GetService(""ReplicatedStorage"").Events.Morph
                Morph:FireServer(""Mortal"")
                e(""Mortal Respawn Command"", ""Player respawned as mortal."")
            end
        end
    end)

    while true do
        resetD()
        wait(5)
    end
end)
local pref= ""!""
local b=game.Players.LocalPlayer;
local c=b.Character;
local d={}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    if name == """" or name == "" "" then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, "" "")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == ""bring"" then
            if d[command] then
                return
            end
            task.spawn(function()
                d[command] = true
                wait(1)
                d[command] = false
            end)
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = GetPlayer(playerName)
            if targetPlayer then
                local event = game.ReplicatedStorage.Events.Witch
                wait()
                event:FireServer(""Magic"", {""Motus"", true, targetPlayer.Character})
            end
        elseif command == ""cbring"" then
            if d[command] then
                return
            end
            task.spawn(function()
                d[command] = true
                wait(1)
                d[command] = false
            end)
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = cFind(playerName)
            if targetPlayer then
                local event = game.ReplicatedStorage.Events.Witch
                wait()
                event:FireServer(""Magic"", {""Motus"", true, targetPlayer.Character})
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = ""!""
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    if name == """" or name == "" "" then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, "" "")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == ""lbring"" then
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = GetPlayer(playerName)
            if targetPlayer then
                d[""lbring""] = true
                repeat
                    local event = game.ReplicatedStorage.Events.Witch
                    wait()
                    event:FireServer(""Magic"", {""Motus"", true, targetPlayer.Character})
                until not d[""lbring""]
            end
        elseif command == ""lcbring"" then
            local playerName = string.sub(message, spaceIndex + 1)
            local targetPlayer = cFind(playerName)
            if targetPlayer then
                d[""lcbring""] = true
                repeat
                    local event = game.ReplicatedStorage.Events.Witch
                    wait()
                    event:FireServer(""Magic"", {""Motus"", true, targetPlayer.Character})
                until not d[""lcbring""]
            end
        elseif command == ""unlbring"" then
            d[""lbring""] = false
            d[""lcbring""] = false
        end
    end
end

b.Chatted:Connect(handleChat)
_G.AutoSleepPlayers = {}
local Prefix = ""!""
local Player = game:GetService(""Players"").LocalPlayer

local function GetPlayer(String)
    local Found = {}
    local strl = String:lower()
    if strl == ""all"" then
        for i,v in pairs(game:GetService(""Players""):GetPlayers()) do
            table.insert(Found,v)
        end
    elseif strl == ""others"" then
        for i,v in pairs(game:GetService(""Players""):GetPlayers()) do
            if v.Name ~= Player.Name then
                table.insert(Found,v)
            end
        end  
    elseif strl == ""me"" then
        for i,v in pairs(game:GetService(""Players""):GetPlayers()) do
            if v.Name == Player.Name then
                table.insert(Found,v)
            end
        end  
    else
        for i,v in pairs(game:GetService(""Players""):GetPlayers()) do
            if v.Name:lower():sub(1, #String) == String:lower() then
                table.insert(Found,v)
            end
        end    
    end
    return Found    
end

local Number = 11
local Number2 = 15
Player.Chatted:Connect(function(Message)
    if string.sub(Message, 1, Number) == Prefix..""AutoSleep "" or
       string.sub(Message, 1, Number) == Prefix..""Autosleep "" or
       string.sub(Message, 1, Number) == Prefix..""autosleep "" or
       string.sub(Message, 1, Number) == Prefix..""AUtosleep "" or
       string.sub(Message, 1, Number) == Prefix..""AUTOSLEEP "" or
       string.sub(Message, 1, Number) == Prefix..""AUtoSleep "" then
        for i,v in pairs(GetPlayer(string.sub(Message, Number + 1))) do
            _G.AutoSleepPlayers[v.Name] = true
            coroutine.resume(coroutine.create(function()
                while _G.AutoSleepPlayers[v.Name] do
                    task.wait(7)
                    if _G.AutoSleepPlayers[v.Name] and game.Workspace.Live:FindFirstChild(v.Name) then
                        local A_1 = ""Magic""
                        local A_2 = {
                            [1] = ""SleepSpell"", 
                            [2] = game.Workspace.Live[v.Name]
                        }
                        local Event = game:GetService(""ReplicatedStorage"").Events.Witch
                        Event:FireServer(A_1, A_2)
                    else
                        break
                    end
                end
            end))
        end
    elseif string.sub(Message, 1, Number2) == Prefix..""StopAutoSleep"" or
           string.sub(Message, 1, Number2) == Prefix..""stopAutosleep"" or
           string.sub(Message, 1, Number2) == Prefix..""stopautosleep"" or
           string.sub(Message, 1, Number2) == Prefix..""STopAutoSleep"" or
           string.sub(Message, 1, Number2) == Prefix..""STOPAUTOSLEEP"" or
           string.sub(Message, 1, Number2) == Prefix..""stopAutoSleep"" then
        for i,v in pairs(GetPlayer(string.sub(Message, Number2 + 1))) do
            _G.AutoSleepPlayers[v.Name] = false
        end
    end
end)
local Prefix = ""!""
local Player = game:GetService(""Players"").LocalPlayer

local function GetPlayer(String)
    local Found = {}
    local strl = String:lower()
    if strl == ""all"" then
        for _, v in ipairs(game:GetService(""Players""):GetPlayers()) do
            table.insert(Found, v)
        end
    elseif strl == ""others"" then
        for _, v in ipairs(game:GetService(""Players""):GetPlayers()) do
            if v ~= Player then
                table.insert(Found, v)
            end
        end  
    elseif strl == ""me"" then
        table.insert(Found, Player)
    else
        for _, v in ipairs(game:GetService(""Players""):GetPlayers()) do
            if v.Name:lower():sub(1, #String) == String:lower() then
                table.insert(Found, v)
            end
        end    
    end
    return Found    
end

Player.Chatted:Connect(function(Message)
    local lowerMessage = string.lower(Message)
    if string.sub(lowerMessage, 1, #Prefix + 4) == (Prefix..""ress "") then
        for _, targetPlayer in ipairs(GetPlayer(string.sub(Message, #Prefix + 6))) do
            local A_1 = ""Magic""
            local A_2 = {
                [1] = ""Motus"",
                [2] = true,
                [3] = game.Workspace.deathClones[targetPlayer.Name..""deathClone""]
            }
            game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(A_1, A_2)
        end
    end
end)
local pref = ""!""
local b = game.Players.LocalPlayer
local d = {}

local function BurnPlayer(player)
    local magicEvent = game.ReplicatedStorage.Events.Witch
    for i = 1, 5 do
        magicEvent:FireServer(""Magic"", {""FireSpell"", player.Character})
        wait(0.4)
    end
end

b.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local targetName = lowerMessage:match(""!burn%s+(%w+)"")
        if targetName then
            local targetPlayer = GetPlayer(targetName)
            if targetPlayer then
                if not d[targetPlayer.Name] then
                    BurnPlayer(targetPlayer)
                    d[targetPlayer.Name] = true
                end
            else
                warn(""Player not found."")
            end
        end
    end
end)
local pref = ""!""
local b = game.Players.LocalPlayer
local d = {}

local function BurnPlayer(player)
    local magicEvent = game.ReplicatedStorage.Events.Witch
    while true do
        if not (player and player.Character and player.Character:FindFirstChild(""Humanoid"") and player.Character.Humanoid.Health > 0) then
            break
        end
        magicEvent:FireServer(""Magic"", {""FireSpell"", player.Character})
        wait(0.7)
    end
end
b.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local targetName = lowerMessage:match(""!lburn%s+(%w+)"")
        if targetName then
            local targetPlayer = GetPlayer(targetName)
            if targetPlayer then
                if not d[targetPlayer.Name] then
                    d[targetPlayer.Name] = true
                    BurnPlayer(targetPlayer)
                    d[targetPlayer.Name] = false
                end
            else
                warn(""Player not found."")
            end
        end
    end
end)
local pref = ""!""
local b = game.Players.LocalPlayer
local d = {}

local function BurnPlayer(player)
    local magicEvent = game.ReplicatedStorage.Events.Witch
    for i = 1, 5 do
        magicEvent:FireServer(""Magic"", {""FireSpell"", player.Character})
        wait(0.1)
    end
end

local function BurnAllPlayers()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= b then
            BurnPlayer(player)
        end
    end
end

b.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        if lowerMessage == ""!burn all"" then
            BurnAllPlayers()
        else
            local targetName = lowerMessage:match(""!burn%s+(%w+)"")
            if targetName then
                local targetPlayer = GetPlayer(targetName)
                if targetPlayer and targetPlayer ~= b then
                    BurnPlayer(targetPlayer)
                end
            end
        end
    end
end)

function GetPlayer(name)
    local target
    local lowerName = name:lower()
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            target = player
            break
        end
    end
    return target
end
local pref = ""!""
local b = game.Players.LocalPlayer
local d = {}

local function StakePlayer(player)
    local stakeEvent = game:GetService(""ReplicatedStorage"").Events.Stake
    b.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame
    wait(0.5)
    stakeEvent:FireServer(player.Character, ""Original"")
end

b.Chatted:Connect(function(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        lowerMessage = string.sub(lowerMessage, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local targetName = lowerMessage:match(""!stake%s+(%w+)"")
        if targetName then
            local targetPlayer = GetPlayer(targetName)
            if targetPlayer then
                StakePlayer(targetPlayer)
            else
                warn(""Player not found."")
            end
        end
    end
end)
local prefix = ""!""
local player = game.Players.LocalPlayer

player.Chatted:Connect(function(message)
    message = message:lower()
    if string.sub(message, 1, 1) == prefix then
        local command, target = message:match(""!([%w_]+)%s*(%w*)"")
        if command == ""to"" then
            local targetPlayer = getPlayer(target)
            if targetPlayer then
                player.Character:SetPrimaryPartCFrame(targetPlayer.Character.PrimaryPart.CFrame)
            else
                local targetCharacter = getCharacter(target)
                if targetCharacter then
                    player.Character:SetPrimaryPartCFrame(targetCharacter.PrimaryPart.CFrame)
                end
            end
        end
    end
end)

function getPlayer(name)
    local target
    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Name:lower():sub(1, #name) == name:lower() then
            target = player
            break
        end
    end
    return target
end

function getCharacter(name)
    local target
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild(""CharacterName"") and character.CharacterName.Value:lower():sub(1, #name) == name:lower() then
            target = character
            break
        end
    end
    return target
end
local pref = ""!""
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    if name == """" or name == "" "" then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, "" "")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == ""bring"" then
            local subCommand = string.sub(message, spaceIndex + 1)
            if subCommand == ""all"" then
                if d[command] then
                    return
                end
                task.spawn(function()
                    d[command] = true
                    wait(1)
                    d[command] = false
                end)
                for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
                    if player ~= b then
                        local event = game.ReplicatedStorage.Events.Witch
                        wait()
                        event:FireServer(""Magic"", {""Motus"", true, player.Character})
                    end
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = ""!""
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    if name == """" or name == "" "" then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, "" "")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == ""h"" or command == ""head"" then
            local subCommand = string.sub(message, spaceIndex + 1)
            if subCommand == ""all"" then
                if d[command] then
                    return
                end
                task.spawn(function()
                    d[command] = true
                    wait(1)
                    d[command] = false
                end)
                for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
                    if player ~= b then -- Skip the local player
                        local targetPlayer = player.Character
                        if targetPlayer then
                            -- Perform action here
                            local user = game.Players[player.Name].Character
                            local args = {
                                [1] = ""Decapitate"",
                                [2] = {
                                    [1] = user
                                }
                            }
                            game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                        end
                    end
                end
            elseif subCommand == ""me"" then
                -- Perform action for the local player
                local user = game.Players.LocalPlayer.Character
                local args = {
                    [1] = ""Decapitate"",
                    [2] = {
                        [1] = user
                    }
                }
                game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
            else
                local targetPlayer = GetPlayer(subCommand)
                if targetPlayer then
                    local user = game.Players[targetPlayer.Name].Character
                    local args = {
                        [1] = ""Decapitate"",
                        [2] = {
                            [1] = user
                        }
                    }
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = ""!""
local b = game.Players.LocalPlayer
local c = b.Character
local d = {}

local function GetPlayer(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Name:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    if name == """" or name == "" "" then
        result = nil
    end
    return result
end

local function cFind(name)
    local result
    local lowerName = name:lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character.CharacterName.Value:lower():sub(1, #name) == lowerName then
            result = player
        end
    end
    if name == ""me"" then
        result = game.Players.LocalPlayer
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, "" "")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == ""rip"" then
            local subCommand = string.sub(message, spaceIndex + 1)
            if subCommand == ""all"" then
                if d[command] then
                    return
                end
                task.spawn(function()
                    d[command] = true
                    wait(1)
                    d[command] = false
                end)
                for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
                    if player ~= b then -- Skip the local player
                        local targetPlayer = player.Character
                        if targetPlayer then
                            -- Perform action here
                            local user = game.Players[player.Name].Character
                            local args = {
                                [1] = ""RipOutHeart"",
                                [2] = {
                                    [1] = user
                                }
                            }
                            game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                        end
                    end
                end
            elseif subCommand == ""me"" then
                -- Perform action for the local player
                local user = game.Players.LocalPlayer.Character
                local args = {
                    [1] = ""RipOutHeart"",
                    [2] = {
                        [1] = user
                    }
                }
                game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
            else
                local targetPlayer = GetPlayer(subCommand)
                if targetPlayer then
                    local user = game.Players[targetPlayer.Name].Character
                    local args = {
                        [1] = ""RipOutHeart"",
                        [2] = {
                            [1] = user
                        }
                    }
                    game:GetService(""ReplicatedStorage"").Events.Vampire:FireServer(unpack(args))
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)
local pref = ""!""
local b = game.Players.LocalPlayer

local function GetCharacter(name)
    local result
    for _, player in pairs(game:GetService(""Players""):GetPlayers()) do
        if player.Character and player.Character:FindFirstChild(""CharacterName"") then
            if player.Character.CharacterName.Value:lower():sub(1, #name) == name:lower() then
                result = player.Character
                break
            end
        end
    end
    return result
end

local function handleChat(message)
    local lowerMessage = message:lower()
    if string.sub(lowerMessage, 1, 3) == ""/e "" then
        message = string.sub(message, 4)
    end
    if string.sub(lowerMessage, 1, 1) == pref then
        local command
        local spaceIndex = string.find(message, "" "")
        if spaceIndex then
            command = string.sub(message, 2, spaceIndex - 1)
        else
            command = string.sub(message, 2)
        end
        if command == ""compell"" then
            local subCommand = string.sub(message, spaceIndex + 1)
            local characterName, action = subCommand:match(""(%S+)%s+(%S+)"")
            if characterName and action then
                local targetCharacter = GetCharacter(characterName) or game.Players:FindFirstChild(characterName)
                local myCharacter = b.Character
                if targetCharacter then
                    local argsMe = {
                        [1] = ""Start"",
                        [2] = {
                            [1] = myCharacter
                        }
                    }
                    local argsTarget = {
                        [1] = ""Start"",
                        [2] = {
                            [1] = targetCharacter
                        }
                    }
                    if action == ""n"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""NoMagic""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        wait(0.5)
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""NoMagic""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""um"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""AllowMagic""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""AllowMagic""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end

                    elseif action == ""d"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""StandStill""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""StandStill""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""m"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""AllowMove""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""AllowMove""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""p"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""PunchSelf""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 30 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""PunchSelf""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""dp"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""DontPunch""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""DontPunch""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""a"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""AllowPunch""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""AllowPunch""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""g"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""GiveStake""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""GiveStake""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""r"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""RingOff""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""RingOff""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""ro"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""RingOn""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""RingOn""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""s"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""Sleep""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""Sleep""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""t"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""WearwolfTurn""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""WearwolfTurn""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""df"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""DontFeed""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""DontFeed""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""af"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""AllowFeed""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""AllowFeed""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    elseif action == ""f"" then
                        for _ = 1, 1 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsMe))

                            local A_1 = ""Follow""
                            local A_2 = {
                                [1] = myCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                        for _ = 1, 13 do
                            game:GetService(""ReplicatedStorage"").Events.Compulsion:FireServer(unpack(argsTarget))

                            local A_1 = ""Follow""
                            local A_2 = {
                                [1] = targetCharacter
                            }
                            local Event = game:GetService(""ReplicatedStorage"").Events.Compulsion
                            Event:FireServer(A_1, A_2)
                        end
                    end
                end
            end
        end
    end
end

b.Chatted:Connect(handleChat)

M:NewButton(""Anti Burn"", """", function()
    local c = game.Players.LocalPlayer.Character
    local witch = game.ReplicatedStorage.Events.Witch
    while wait(1.3) do
        if _G.stop == true then
            return
        end
        if c.UpperTorso:FindFirstChild(""Flames"") then
            witch:FireServer(""Magic"", {""NoFire"", c})
        end
    end
end)

local Ban1 = game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""ModBan"")
local Ban2 = game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""BanClient"")
local Ban3 = game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""Ban"")
local Ban4 = game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""idontexploit"")
local Ban5 = game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""logAction"")
local Ban6 = game:GetService(""ReplicatedStorage"").Events:FindFirstChild(""logAction"")

while _G.ANTIBAN == true do
    if Ban1 then
        Ban1:Destroy()
    end
    if Ban2 then
        Ban2:Destroy()
    end
    if Ban3 then
        Ban3:Destroy()
    end
    if Ban4 then
        Ban4:Destroy()
    end
    if Ban5 then
        Ban5:Destroy()
    end
    if Ban6 then
        Ban6:Destroy()
    end
    wait()
end
M:NewButton(""run like a vamp"", ""ate"", function()
    local Player = game:GetService(""Players"").LocalPlayer.Name
    
    local className = ""Part""
    local parent = game.Workspace.Live[Player]
    local part = Instance.new(className, parent)
    
    game.Workspace.Live[Player]:WaitForChild(""Part"").Name = ""Vampire""
    end)
    M:NewButton(""Run like a wolf"", ""run away x"", function()
    local Player = game:GetService(""Players"").LocalPlayer.Name
    
    local className = ""Part""
    local parent = game.Workspace.Live[Player]
    local part = Instance.new(className, parent)
    
    game.Workspace.Live[Player]:WaitForChild(""Part"").Name = ""Werewolf""
    end)
    M:NewButton(""Run normally"", ""run away x"", function()
    local Player = game:GetService(""Players"").LocalPlayer.Name
    
    game.Workspace.Live[Player]:WaitForChild(""Vampire""):Destroy()
    game.Workspace.Live[Player]:WaitForChild(""Werewolf""):Destroy()
    end)
M:NewButton(""Change Name"", """", function()
	_G.auto_name = false
end)
M:NewButton(""Stake All"", """", function()
	local players = game.Workspace.Live

	for _,player in pairs (players:GetChildren()) do
		local link = game.Players:GetPlayerFromCharacter(player)
		if player:FindFirstChild(""Humanoid"") then
			if  link == game.Players.LocalPlayer then
				return
			else
				local A_1 = player
				local A_2 = ""Original""
				local Event = game:GetService(""ReplicatedStorage"").Events.Stake
				Event:FireServer(A_1, A_2)
			end
		end
	end
end)
M:NewButton(""Reload Gui"", """", function()
	local GUI = game.CoreGui:FindFirstChild(""ScreenGui"")
	if GUI then
        for i=1,3 do
            GUI:Destroy()
        end
	end
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/BoiDiandre/TheLua/main/THE%20FLOPPIEST%20FLOP'),true))()
end)
M:NewButton(""Hide Name Tag"", """", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Live = game.Workspace.Live
	if Character.Head:FindFirstChild(""Username"") then
		local NameTag = Character.Head:FindFirstChild(""Username"")
		NameTag:Destroy()
	end
end)
M:NewButton(""Inf Yeild"", """", function()
	loadstring(game:HttpGet(('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'),true))()

	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""inf Yield loaded"";
		Text = ""Made by tisnoah#0.""
	})
end)
M:NewButton(""Feed, Siphon and Heal YourSelf"", """", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character


	local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)

	wait(1)

	for i = 1, 9, 1 do

		local A_1 = ""SelfSiphon""
		local Event = game:GetService(""ReplicatedStorage"").Events.Witch
		Event:FireServer(A_1)

	end

	for i = 1, 2 do

		local A_1 = ""Feed""
		local A_2 = 
			{
				[1] = Character
			}
		local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
		Event:FireServer(A_1, A_2)

	end

	wait(4)


	local A_1 = ""Heal""
	local A_2 = 
		{
			[1] = Character
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
	Event:FireServer(A_1, A_2)
end)
M:NewButton(""Unglitch"", """", function()
	local plr = game.Players.LocalPlayer
	local Character = plr.Character or plr.CharacterAdded:Wait()
	if Character:FindFirstChild(""Acting"") then
		Character:FindFirstChild(""Acting""):Destroy()
		local Player = game.Players.LocalPlayer.Character.Humanoid.ragdoll
		Player.Value = true
		task.wait()
		Player.Value = false
	else
		local Player = game.Players.LocalPlayer.Character.Humanoid.ragdoll
		Player.Value = true
		task.wait()
		Player.Value = false

	end
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""UnGlitch loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
M:NewButton(""Respawn"", """", function()
	local Event = game:GetService(""ReplicatedStorage"").Events.Respawn
	Event:FireServer()
end)
M:NewButton(""Mortal Respawn"", """", function()
	local LocalPlayer = game.Players.LocalPlayer
	local Character = LocalPlayer.Character
	local Humanoid = Character.Humanoid
	local Mouse = LocalPlayer:GetMouse()
	local Respawn = game:GetService(""ReplicatedStorage"").Events.Respawn
	Respawn:FireServer()
	wait()
	local Morph = game:GetService(""ReplicatedStorage"").Events.Morph
	Morph:FireServer(""Mortal"")
end)
M:NewButton(""Become Invisible"", """", function()
   local plr = game.Players.LocalPlayer
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(321, -7, 409)
   wait(0.5)
   game.Players[plr.Name].Character.Head.Anchored = true
   wait(0.2)
   game.Players[plr.Name].Character.Head.Anchored = false
   wait(0.5)
   plr.Character:BreakJoints()
   wait(0.5)
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-275, 3, 185)
   	local speaker = game.Players.LocalPlayer
	local BeenASecond, V3 = false, Vector3.new(0, 0, 0)
	delay(1, function()
		BeenASecond = true
	end)
	while not BeenASecond do
		for _, v in ipairs(speaker.Character:GetDescendants()) do
			if v.IsA(v, ""BasePart"") then
				v.Velocity, v.RotVelocity = V3, V3
			end
		end
		wait()
	end
end)
M:NewButton(""Inf Stamina"", """", function()
	local Player = game.Players.LocalPlayer
	local Character = Player.Character

	while task.wait() do
		if Character:FindFirstChild(""Stamina"") then
			local Stamina = Character:FindFirstChild(""Stamina"")
			local Max = Stamina.Max
			Stamina.Value = 200
		end
	end
end)
M:NewButton(""Copy Join Code"", """", function()
	setclipboard([[

        local TeleportService = game:GetService(""TeleportService"")
    TeleportService:TeleportToPlaceInstance(4754736350,""]]..game.JobId..[["", game.Players.LocalPlayer)]])
end)
M:NewButton(""Auto Pick Up Stakes etc"", """", function()
	local Human = speaker.Character:FindFirstChildWhichIsA(""Humanoid"")
	for _, v in ipairs(workspace:GetChildren()) do
		if speaker.Character and v:IsA(""BackpackItem"") and v:FindFirstChild(""Handle"") then
			Human:EquipTool(v)
		end
	end
	if grabtoolsFunc then grabtoolsFunc:Disconnect() end
	grabtoolsFunc = workspace.ChildAdded:Connect(function(v)
		if speaker.Character and v:IsA(""BackpackItem"") and v:FindFirstChild(""Handle"") then
			speaker.Character:WaitForChild(""Humanoid""):EquipTool(v)
		end
	end)
end)
M:NewButton(""Get Vervain"", """", function()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(68, 6, -47)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-106, 9, 45)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-512, 3, 178)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-486, 5, 238)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-495, 6, 14)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-257, -26, -70)
    wait(0.5)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-504, 5, 265)
end)

M:NewButton(""Sybil Server Crash"", """", function()
    local Plr = game.Players.LocalPlayer

    for i, Player in pairs (game.Players:GetPlayers()) do
        if Player.Character ~= nil and Player ~= Plr then
            local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
            if mag < 999999 then
                local Target = Player.Character or Player.CharacterAdded:Wait()
    
                local args = {
                    [1] = ""SirenInflict"",
                    [2] = {
                        [1] = Target
                    }
                }
                for i=1,300 do
                    game:GetService(""ReplicatedStorage"").Events.Siren:FireServer(unpack(args))
                end
            end
        end
    end
end)
O:NewButton(""Check Qet"", """", function()

	local TargetCharacter = Rep.Characters[""Qetsiyah""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Qetsiyah Occupied Check!"";
			Text = ""Qetsiyah is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Qetsiyah Occupied Check!"";
			Text = ""Qetsiyah is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Hope Check"", """", function()

	local TargetCharacter = Rep.Characters[""Hope Mikaelson""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Hope Occupied Check!"";
			Text = ""Hope is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Hope Occupied Check!"";
			Text = ""Hope is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Niklaus Check"", """", function()

	local TargetCharacter = Rep.Characters[""Niklaus Mikaelson""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Niklaus Occupied Check!"";
			Text = ""Niklaus is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Niklaus Occupied Check!"";
			Text = ""Niklaus is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Rebekah Check"", """", function()

	local TargetCharacter = Rep.Characters[""Rebekah Mikaelson""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Rebekah Occupied Check!"";
			Text = ""Rebekah is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Rebekah Occupied Check!"";
			Text = ""Rebekah is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Kol Check"", """", function()

	local TargetCharacter = Rep.Characters[""Kol Mikaelson""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Kol Occupied Check!"";
			Text = ""Kol is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Kol Occupied Check!"";
			Text = ""Kol is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Finn Check"", """", function()

	local TargetCharacter = Rep.Characters[""Finn Mikaelson""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Finn Occupied Check!"";
			Text = ""Finn is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Finn Occupied Check!"";
			Text = ""Finn is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Elijah Check"", """", function()

	local TargetCharacter = Rep.Characters[""Elijah Mikaelson""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Elijah Occupied Check!"";
			Text = ""Elijah is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Elijah Occupied Check!"";
			Text = ""Elijah is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Valerie Check"", """", function()

	local TargetCharacter = Rep.Characters[""Valerie Tulle""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Valerie Occupied Check!"";
			Text = ""Valerie is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Valerie Occupied Check!"";
			Text = ""Valerie is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Mary Check"", """", function()

	local TargetCharacter = Rep.Characters[""Mary Louise""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Mary Occupied Check!"";
			Text = ""Mary is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Mary Occupied Check!"";
			Text = ""Mary is taken by ""..TakenBy.Value
		})

	end

end)
O:NewButton(""Nora Check"", """", function()

	local TargetCharacter = Rep.Characters[""Nora Hildegard""]
	local TakenBy = TargetCharacter.takenBy

	if TakenBy.Value == nil then

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Nora Occupied Check!"";
			Text = ""Nora is not taken!""
		})

	else

		game:GetService(""StarterGui""):SetCore(""SendNotification"", {
			Title = ""Nora Occupied Check!"";
			Text = ""Nora is taken by ""..TakenBy.Value
		})

	end

end)
Cu:NewButton(""Phasmatos Malos Ignis Incendismos"", ""DisableRing"", function()
    setclipboard([[Phasmatos Malos Ignis Incendismos]])
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""phasmatos malos ignis incendismos"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 999999 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""DisableRing"", 
								[2] = Target
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Phasmatos Malos Ignis Incendismos loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
Cu:NewButton(""Phasmatos Ictus lacus"", ""Push"", function()
    setclipboard([[Phasmatos Ictus lacus]])

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""phasmatos ictus lacus"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 999999 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A_1 = ""Push""
						local A_2 = 
							{
								[1] = Target
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Phasmatos Ictus lacus loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
Cu:NewButton(""Incendiamos motus"", """", function()
    setclipboard([[Incendiamos motus]])

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""incendiamos motus"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 20 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""FireSpell"", 
								[2] = Target
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)

						wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""Motus"",
								[2] = false,
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Incendiamos motus loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
Cu:NewButton(""Gemino Delfan eoten coris"", """", function()
    setclipboard([[Gemino Delfan eoten coris]])

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""gemino delfan eoten coris"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 20 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""TelekineticHeart"", 
								[2] = Target
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)


					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Gemino Delfan eoten coris loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
Cu:NewButton(""Phasmatos Motus Incendiamos"", """", function()
    setclipboard([[Phasmatos Motus Incendiamos]])

	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""phasmatos motus incendiamos"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 999999 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""FireCircle"", 
								[2] = Target
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)


					end
				end
			end
		end
	end)
	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Phasmatos Motus Incendiamos loaded!"";
		Text = ""Made by tisnoah#0.""
	})
end)
Cu:NewButton(""Phasmatos Expulso Maxima"", """", function()
    setclipboard([[Phasmatos Expulso Maxima]])
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService(""UserInputService"")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""Phasmatos Expulso Maxima"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""FireSpell"", 
								[2] = Target
							}
						for i = 1,20 do
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)
                    	end
						local A_1 = ""Magic""
						local A_2 = 
							{
								[1] = ""Explosion"",
								[2] = Target.HumanoidRootPart.CFrame.p
							}
						for i=1,20 do
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A_1, A_2)
						end
    					local A_1 = ""Push""
    					local A_2 = 
    						{
    							[1] = Target
    						}
						for i=1,50 do
    					local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    					Event:FireServer(A_1, A_2)
						end
					end
				end
			end
		end
	end)
end)
Cu:NewButton(""Phasmatos Devoram Maxima"", """", function()
    setclipboard([[Phasmatos Devoram Maxima]])
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService(""UserInputService"")
	local Mouse = Player:GetMouse()
	local Debounce = true
	local Key = 'Y'
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""phasmatos devoram maxima"") then
			for i=0, 10, 0.5 do

				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""AdvancedInflict""
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)

				wait(0.5)


				local A_1 = ""Magic""
				local A_2 = 
					{
						[1] = ""SnapAll""
					}
				local Event = game:GetService(""ReplicatedStorage"").Events.Witch
				Event:FireServer(A_1, A_2)

				wait(0.5)

				if i == 9.5 then


					local A_1 = ""Magic""
					local A_2 = 
						{
							[1] = ""Motus""
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Witch
					Event:FireServer(A_1, A_2)

					local A_1 = ""Magic""
					local A_2 = 
						{
							[1] = ""Invisibility""
						}
					local Event = game:GetService(""ReplicatedStorage"").Events.Witch
					Event:FireServer(A_1, A_2)
				end
			end
		end
	end)

	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Phasmatos Devoram Maxima loaded"";
		Text = ""Made by tisnoah#0.""
	})

end)
Cu:NewButton(""Ascendo(say to use)"", """", function()
    setclipboard([[Ascendo]])
    local Player = game.Players.LocalPlayer
    local Character = Player.Character
    local Humanoid = Character.Humanoid
    local UserInputService = game:GetService(""UserInputService"")
    local Mouse = Player:GetMouse()
    local Debounce = true
    local Key = 'Y'
    local db = true
    
    Player.Chatted:Connect(function(chat)
        local low = string.lower(chat)
        if string.find(low, ""ascendo"") then
                    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
                    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
                    for _,v in pairs(ActiveTracks)
                        do v:Stop()
                    end
                    local AnimationId = ""6112652562""
                    local Anim = Instance.new(""Animation"")
                    Anim.AnimationId = ""rbxassetid://""..AnimationId
                    local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Anim)
                    k:Play()
                    k:AdjustSpeed(0.5)
                    wait(16)
                    local Humanoid = game.Players.LocalPlayer.Character.Humanoid
                    local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
                    for _,v in pairs(ActiveTracks)
                        do v:Stop()
                    end
                end
            end)
end)
Cu:NewButton(""Ascendo 2(click to use)"", """", function()
		AnimationId = ""507785072""
		local Ascendo = Instance.new(""Animation"")
		Ascendo.AnimationId = ""rbxassetid://""..AnimationId
		local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo)
		k:Play()
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 45
		AnimationId = ""5414156941""
		local Ascendo2 = Instance.new(""Animation"")
		Ascendo2.AnimationId = ""rbxassetid://""..AnimationId
		local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo2)
		k:Play()
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = 5
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 45
		wait(10)   
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16
		local Humanoid = game.Players.LocalPlayer.Character.Humanoid
		local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
		for _,v in pairs(ActiveTracks)
		    do v:Stop()
		end
		game.Players.LocalPlayer.Character.Humanoid.HipHeight = 2
end)
Cu:NewButton(""Ignis Ubique"", """", function()
    setclipboard([[Ignis Ubique]])
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService(""UserInputService"")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""ignis ubique"") then

			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()
						AnimationId = ""5414902308""
						local Ascendo2 = Instance.new(""Animation"")
						Ascendo2.AnimationId = ""rbxassetid://""..AnimationId
						local k = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(Ascendo2)
						k:Play()
						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""FireSpell"", 
								[2] = Target
							}
						for i = 1,20 do
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)
                    				end
						local Humanoid = game.Players.LocalPlayer.Character.Humanoid
						local ActiveTracks = Humanoid:GetPlayingAnimationTracks()
						for _,v in pairs(ActiveTracks)
						do v:Stop()
						end
					end
				end
			end
		end
	end)

	wait(0.3)
	game:GetService(""StarterGui""):SetCore(""SendNotification"", {
		Title = ""Ignis Ubique loaded"";
		Text = ""Made by tisnoah#0.""
	})
end)
Cu:NewButton(""Phasmatos Uplacox"", """", function()
    setclipboard([[Phasmatos Uplacox]])
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService(""UserInputService"")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""phasmatos uplacox"") then
			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do
				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
							local A_1 = ""Magic""
							local A_2 = 
								{
									[1] = ""Motus"",
									[2] = false,
								}
							for i=1,1000 do
							local Event = game:GetService(""ReplicatedStorage"").Events.Witch
							Event:FireServer(A_1, A_2)
							end
						wait(0.1)
							local A_1 = ""Magic""
							local A_2 = 
								{
									[1] = ""SnapAll""
								}
							local Event = game:GetService(""ReplicatedStorage"").Events.Witch
							Event:FireServer(A_1, A_2)
						end
					end
				end
			end
		end)
end)
Cu:NewButton(""Somnus"", """", function()
    setclipboard([[Somnus]])
	local Player = game.Players.LocalPlayer
	local Character = Player.Character
	local Humanoid = Character.Humanoid
	local UserInputService = game:GetService(""UserInputService"")
	local mouse = Player:GetMouse()
	local Debounce = true
	local db = true

	Player.Chatted:Connect(function(chat)
		local low = string.lower(chat)
		if string.find(low, ""somnus"") then
			local Plr = game.Players.LocalPlayer
			for i, Player in pairs (game.Players:GetPlayers()) do

				if Player.Character ~= nil and Player ~= Plr then
					local mag = (Player.Character.UpperTorso.Position - Plr.Character.UpperTorso.Position).magnitude
					if mag < 1000 then
						local Target = Player.Character or Player.CharacterAdded:Wait()

						local A1 = ""Magic""
						local A2 = 
							{
								[1] = ""SleepSpell"", 
								[2] = Target
							}
						local Event = game:GetService(""ReplicatedStorage"").Events.Witch
						Event:FireServer(A1, A2)

					end
				end
			end
		end
	end)
end)

T:NewButton(""Red Rose Coven Room"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-376, -268, -4881)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton(""Spawn"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(446, 386, -14807)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton(""Teleport To Astrailis Room"", """", function()
   local pos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
   if game:GetService(""Workspace""):FindFirstChild(""AstralisDoor"") then
		game:GetService(""Workspace""):FindFirstChild(""AstralisDoor""):Destroy()
	end
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-382, 3, -50)
end)
T:NewButton(""UnderGround"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-25, -13, 157)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton(""Water"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(311, -8, 186)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton(""The Wolf Den"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(432, 7, 651)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton(""Human Spawn"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-502, 5, 261)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton(""Witch Tunnel"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-225, -26, -69)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton(""Stakes"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-368, 3, 84)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait(0.1)
	pl.CFrame = location
end)
T:NewButton(""Res Circle 2"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-440, 5, -0)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
T:NewButton(""Res Circle 1"", """", function()
	local pl = game.Players.LocalPlayer.Character.HumanoidRootPart
	local location = CFrame.new(-126, 5, 2)
	local humanoid = game.Players.LocalPlayer.Character.Humanoid
	--humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
	wait()
	pl.CFrame = location
end)
local Char = ""Sybil""
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Niklaus Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Hope Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Bonnie Bennett""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Beau""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Finn Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Oscar""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Mason Lockwood""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Kol Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Rebekah Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Elijah Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Nora Hildegard""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Valerie Tulle""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Mary Louise""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Qetsiyah""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
local Char = ""Freya Mikaelson""
P:NewLabel(Char.."" Section"")
P:NewButton(""Heal ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
	local A_2 = 
		{
			[1] = ""Invisibility""
		}
	local Event = game:GetService(""ReplicatedStorage"").Events.Witch
	Event:FireServer(A_1, A_2)
    local A_1 = ""Heal""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Vampire
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Burn ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
	local args = {
	    [1] = ""Magic"",
	    [2] = {
		[1] = ""FireSpell"",
		[2] = Target
	    }
	}

	game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))

end)
P:NewButton(""Push ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Push""
    local A_2 = 
        {
            [1] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Push ""..Char.."" Dead Body"", """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Motus"",
            [2] = true,
            [3] = game:GetService(""Workspace"").deathClones[(plr.Name)..(""deathClone"")]
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""White Oak Stake ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Target.HumanoidRootPart.CFrame
    wait(0.5)
    local A_1 = Target
    local A_2 = ""Original""
    local Event = game:GetService(""ReplicatedStorage"").Events.Stake
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Tp to ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    Player.CFrame = Target.HumanoidRootPart.CFrame
end)
P:NewButton(""Sleep ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""SleepSpell"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
P:NewButton(""Delfan ""..Char, """", function()
    local taken = game.ReplicatedStorage.Characters:FindFirstChild(Char) or game.ReplicatedStorage.Characters[Char]
    local Fix = taken.takenBy.Value
    local plr = game.Players:FindFirstChild(Fix.Name)
    local Player = game.Players.LocalPlayer.Character.HumanoidRootPart
    local Target = plr.Character
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""TelekineticHeart"", 
            [2] = Target
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
end)
C:NewButton(""Noah's Discord"", """", function()
    setclipboard([[tisnoah#0]])
end)
C:NewButton(""Discord Link"", """", function()
    setclipboard(""https://discord.gg/zykGx3kDNk"")
end)
WB:NewToggle(""Keybinds"", ""If true then Keybinds will work"", function(state)
    if state == true then
        game.workspace.AstroValues.Keys.Value = ""Active""
    else
        game.workspace.AstroValues.Keys.Value = ""In Active""
    end
end)
WB:NewKeybind(""Unragdoll"", """",Enum.KeyCode.Z, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    if IsTyping then return end
    local args = {
        [1] = 1
    }
    game:GetService(""ReplicatedStorage"").Events.FallDamage:FireServer(unpack(args))
    end
end)
WB:NewKeybind(""Push"", """",Enum.KeyCode.R, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = ""Push"",
                [2] = {
                        [1] = player.Character
                }
            }
                    
            game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																	
        end
    end
end)
WB:NewKeybind(""Immobilus"", """",Enum.KeyCode.X, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = ""Magic"",
                [2] = {
                    [1] = ""Freeze"",
                    [2] = player.Character
                }
            }
            
            game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																			
        end
    end
end)

WB:NewKeybind(""Incendia"", """", Enum.KeyCode.C, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
        local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
                if player.Character then
                    table.insert(players, player.Character)
                end
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, player in ipairs(game:GetService('Players'):GetPlayers()) do
                    if raycastResult.Instance:IsDescendantOf(player.Character) then
                        return player
                    end
                end
            end
            return nil
        end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then
            return
        end

        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                ""Magic"",
                {
                    ""FireSpell"",
                    player.Character
                }
            }
            for _ = 1, 7 do
                game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))
            end
        end
    end
end)
WB:NewKeybind(""Pain"", """", Enum.KeyCode.G, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
        local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            local players = {}
            for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in ipairs(game:GetService('Players'):GetPlayers()) do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end

        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end

        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                ""PainInflict"",
                {
                    player.Character
                }
            }
            for _ = 1, 8 do
                game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))
            end
        end
    end
end)
WB:NewKeybind(""Ossox"", """",Enum.KeyCode.U, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
            local userInput = game:GetService(""UserInputService"")
            local cam = workspace.CurrentCamera
            local mousePos = userInput:GetMouseLocation()
            local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
            players = {}
            for _, x in next, game:GetService('Players'):GetPlayers() do
                players[#players + 1] = x.Character
            end
            local raycastParams = RaycastParams.new()
            raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
            raycastParams.FilterDescendantsInstances = players
            raycastParams.IgnoreWater = true
            local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
            if raycastResult then
                for _, x in next, game:GetService('Players'):GetPlayers() do
                    if not raycastResult.Instance:IsDescendantOf(x.Character) then
                        continue 
                    end
                    return x
                end
            end
            return false
        end
        local function Set(list)
            local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
            local pos = player.Character.HumanoidRootPart.CFrame
            local args = {
                [1] = ""Magic"",
                [2] = {
                    [1] = ""SnapNeck"",
                    [2] = player.Character
                }
            }
            
            game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																			
        end
    end
end)
WB:NewKeybind(""Mass Neck Snap"", """",Enum.KeyCode.P, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local args = {
        [1] = ""Magic"",
        [2] = {
        [1] = ""SnapAll""
        }
    }
    
    game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))
    end
end)
WB:NewKeybind(""Explode"", """",Enum.KeyCode.Y, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = ""Magic""
    local A_2 = 
    {
        [1] = ""Explosion"",
        [2] = Mouse.Hit.p
    }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)
WB:NewKeybind(""Fire Circle"", """",Enum.KeyCode.Q, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = ""Magic"",
            [2] = {
                [1] = ""FireCircle"",
                [2] = player.Character
            }
        }
        
        game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))   																		
    end
    end
end)
WB:NewKeybind(""Ring Off"", """",Enum.KeyCode.K, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = ""Magic"",
            [2] = {
                [1] = ""DisableRing"",
                [2] = player.Character
            }
        }
        
        game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind(""Ring On"", """",Enum.KeyCode.L, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = ""Magic"",
            [2] = {
                [1] = ""EnableRing"",
                [2] = player.Character
            }
        }
        
        game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)

WB:NewKeybind(""Fire Removal"", """",Enum.KeyCode.N, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = ""Magic"",
            [2] = {
                [1] = ""NoFire"",
                [2] = player.Character
            }
        }
        
        game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)

WB:NewKeybind(""Lecutio"", """",Enum.KeyCode.K, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
       local args = {
    [1] = ""newLightning"",
    [2] = {
        [1] = player.Character
    }
}
        
	game:GetService(""ReplicatedStorage"").Events.LightningSpell:FireServer(unpack(args))																				
    end
    end
end)

WB:NewKeybind(""Heart Rip"", """",Enum.KeyCode.B, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = ""Magic"",
            [2] = {
                [1] = ""TelekineticHeart"",
                [2] = player.Character
            }
        }
        
        game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																		
    end
    end
end)
WB:NewKeybind(""Errox Femus"", """",Enum.KeyCode.T, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local args = {
            [1] = ""Magic"",
            [2] = {
                [1] = ""BreakLeg"",
                [2] = player.Character
            }
        }
        
        game:GetService(""ReplicatedStorage"").Events.Witch:FireServer(unpack(args))																				
    end
    end
end)
WB:NewKeybind(""Sleep Spell"", """",Enum.KeyCode.J, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    local function getPlayer()
        local userInput = game:GetService(""UserInputService"")
        local cam = workspace.CurrentCamera
        local mousePos = userInput:GetMouseLocation()
        local mouseRay = cam:ViewportPointToRay(mousePos.X, mousePos.Y)
        players = {}
        for _, x in next, game:GetService('Players'):GetPlayers() do
            players[#players + 1] = x.Character
        end
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
        raycastParams.FilterDescendantsInstances = players
        raycastParams.IgnoreWater = true
        local raycastResult = workspace:Raycast(mouseRay.Origin, mouseRay.Direction * 1000, raycastParams)
        if raycastResult then
            for _, x in next, game:GetService('Players'):GetPlayers() do
                if not raycastResult.Instance:IsDescendantOf(x.Character) then
                    continue 
                end
                    return x
                end
            end
            return false
        end
        local function Set(list)
        local set = {}
            for _, l in ipairs(list) do
                if l then
                    set[l] = true
                end
            end
            return set
        end
        if IsTyping then return end
        local player = getPlayer()
        if player then
        local pos = player.Character.HumanoidRootPart.CFrame
        local A_1 = ""Magic""
        local A_2 = 
            {
                [1] = ""SleepSpell"", 
                [2] = player.Character
            }
        local Event = game:GetService(""ReplicatedStorage"").Events.Witch
        Event:FireServer(A_1, A_2)																	
    end
    end
end)

WB:NewKeybind(""Invisibility"", """",Enum.KeyCode.V, function()
    if game.workspace.AstroValues.Keys.Value == ""Active"" then
    if IsTyping then return end
    local Mouse = game.Players.LocalPlayer:GetMouse()
    local A_1 = ""Magic""
    local A_2 = 
        {
            [1] = ""Invisibility""
        }
    local Event = game:GetService(""ReplicatedStorage"").Events.Witch
    Event:FireServer(A_1, A_2)
    end
end)

G:NewKeybind(""Toggle Gui"", ""Remove the GUI press Tab to show it again."", Enum.KeyCode.Tab, function()
    Library:ToggleUI()
end)"
9q4rV7qj,Untitled,dereksir,JavaScript,Sunday 21st of April 2024 07:42:11 PM CDT,"import got from 'got';

try {
	// make HTTP request 
	const {body} = await got('https://httpbin.io/ip');
	// log the response
	console.log(body);
} catch (error) {
	console.error(error);
}"
Cf0ChhNN,2024-04-21_stats.json,rdp_snitch,JSON,Sunday 21st of April 2024 07:18:00 PM CDT,"{
  ""ip"": {
    ""194.169.175.22"": 3,
    ""58.218.204.183"": 18,
    ""45.227.254.49"": 3,
    ""136.244.112.233"": 9,
    ""37.255.222.209"": 6,
    ""192.53.116.174"": 27,
    ""205.210.31.73"": 9,
    ""20.43.26.58"": 3,
    ""62.204.41.225"": 12,
    ""203.137.68.45"": 3,
    ""185.170.144.3"": 6,
    ""194.165.16.73"": 12,
    ""195.60.167.88"": 15,
    ""123.58.207.151"": 3,
    ""167.94.145.97"": 3,
    ""198.235.24.43"": 9,
    ""152.32.183.213"": 183,
    ""87.251.75.145"": 3,
    ""205.210.31.22"": 9,
    ""172.232.250.53"": 2058,
    ""71.6.186.12"": 3,
    ""116.140.196.215"": 3,
    ""36.91.222.100"": 3,
    ""196.190.117.7"": 3,
    ""45.227.254.54"": 6,
    ""36.137.176.244"": 126,
    ""198.235.24.100"": 9,
    ""194.165.16.11"": 6
  },
  ""asn"": {
    ""AS209605"": 3,
    ""AS4134"": 18,
    ""AS267784"": 9,
    ""AS20473"": 9,
    ""AS58224"": 6,
    ""AS63949"": 2085,
    ""AS396982"": 36,
    ""AS8075"": 3,
    ""AS59425"": 12,
    ""AS4694"": 3,
    ""AS197414"": 6,
    ""AS48721"": 18,
    ""AS26863"": 15,
    ""AS135377"": 186,
    ""AS398705"": 3,
    ""AS208091"": 3,
    ""AS10439"": 3,
    ""AS4837"": 3,
    ""AS7713"": 3,
    ""AS24757"": 3,
    ""AS9808"": 126
  },
  ""isp"": {
    ""UAB Host Baltic"": 3,
    ""Chinanet"": 18,
    ""Flyservers S.A."": 27,
    ""The Constant Company"": 9,
    ""TCE"": 6,
    ""Akamai Technologies, Inc."": 2085,
    ""Google LLC"": 36,
    ""Microsoft Corporation"": 3,
    ""Horizon LLC"": 12,
    ""IDC Frontier Inc."": 3,
    ""Xhost Internet Solutions LP"": 9,
    ""Gameserverkings"": 15,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 186,
    ""Censys, Inc."": 3,
    ""CariNet, Inc."": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Ethiotelecom"": 3,
    ""China Mobile"": 126
  },
  ""org"": {
    ""EmanuelHosting LTD"": 3,
    ""Chinanet JS"": 18,
    ""UAB Host Baltic"": 9,
    ""Vultr Holdings, LLC"": 9,
    ""Unknown"": 9,
    ""Linode, LLC"": 27,
    ""Palo Alto Networks, Inc"": 36,
    ""Microsoft Azure Cloud (canadacentral)"": 3,
    ""Horizon LLC"": 12,
    ""IDCFNet"": 3,
    ""Xhostis"": 6,
    ""Flyservers S.A"": 18,
    ""Gameserverkings"": 15,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Censys, Inc."": 3,
    ""Ucloud Information Technology"": 183,
    ""Xhost Internet Solutions"": 3,
    ""Akamai Technologies, Inc."": 2058,
    ""sysadmin@cari.net"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Telekomunikasi Indonesia"": 3,
    ""China Mobile Communications Corporation"": 126
  },
  ""regionName"": {
    ""Kaunas"": 21,
    ""Jiangsu"": 18,
    ""Vilnius"": 9,
    ""\u00cele-de-France"": 9,
    ""Isfahan"": 6,
    ""North West"": 27,
    ""California"": 39,
    ""Ontario"": 3,
    ""Moscow"": 12,
    ""Tokyo"": 3,
    ""North Holland"": 9,
    ""District of Columbia"": 15,
    ""England"": 3,
    ""Hesse"": 3,
    ""Virginia"": 183,
    ""Jakarta"": 2061,
    ""Beijing"": 3,
    ""Addis Ababa"": 3,
    ""Shanghai"": 126
  },
  ""country"": {
    ""Lithuania"": 30,
    ""China"": 147,
    ""France"": 9,
    ""Iran"": 6,
    ""Singapore"": 27,
    ""United States"": 237,
    ""Canada"": 3,
    ""Russia"": 12,
    ""Japan"": 3,
    ""The Netherlands"": 9,
    ""United Kingdom"": 3,
    ""Germany"": 3,
    ""Indonesia"": 2061,
    ""Ethiopia"": 3
  },
  ""account"": {
    ""Administr"": 15,
    ""hello"": 183,
    ""administrator"": 9,
    ""whatuptime.com"": 9,
    ""EZjvNakUr"": 3,
    ""BdFTwt"": 3,
    ""Uarjrg"": 3,
    ""(empty)"": 15,
    ""Domain"": 6,
    ""Test"": 36,
    ""Administrator"": 480,
    ""iMXSiiZSO"": 3,
    ""FUhKcX"": 3,
    ""wZeVlT"": 3,
    ""bBYwwCnai"": 3,
    ""MhQmXj"": 3,
    ""QMiJsh"": 3,
    ""Admin"": 294,
    ""Whatuptime.com"": 294,
    ""Jakartakini123#"": 294,
    ""Hello World"": 294,
    ""TinHocThucHanh"": 294,
    ""Hey"": 294,
    ""OizGLLfWP"": 3,
    ""JwLjbY"": 3,
    ""tNIJqJ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 2553
  },
  ""client_build"": {
    ""Unknown"": 2553
  },
  ""client_name"": {
    ""Unknown"": 2553
  },
  ""ip_type"": {
    ""Unknown"": 84,
    ""proxy"": 18,
    ""hosting & proxy"": 9,
    ""hosting"": 2316,
    ""mobile"": 126
  }
}"
0Ne0qfMY,2024-04-21_stats.json,rdp_snitch,JSON,Sunday 21st of April 2024 07:16:05 PM CDT,"{
  ""ip"": {
    ""194.169.175.22"": 2,
    ""58.218.204.183"": 12,
    ""45.227.254.49"": 2,
    ""136.244.112.233"": 6,
    ""37.255.222.209"": 4,
    ""192.53.116.174"": 18,
    ""205.210.31.73"": 6,
    ""20.43.26.58"": 2,
    ""62.204.41.225"": 8,
    ""203.137.68.45"": 2,
    ""185.170.144.3"": 4,
    ""194.165.16.73"": 8,
    ""195.60.167.88"": 10,
    ""123.58.207.151"": 2,
    ""167.94.145.97"": 2,
    ""198.235.24.43"": 6,
    ""152.32.183.213"": 122,
    ""87.251.75.145"": 2,
    ""205.210.31.22"": 6,
    ""172.232.250.53"": 1372,
    ""71.6.186.12"": 2,
    ""116.140.196.215"": 2,
    ""36.91.222.100"": 2,
    ""196.190.117.7"": 2,
    ""45.227.254.54"": 4,
    ""36.137.176.244"": 84,
    ""198.235.24.100"": 6,
    ""194.165.16.11"": 4
  },
  ""asn"": {
    ""AS209605"": 2,
    ""AS4134"": 12,
    ""AS267784"": 6,
    ""AS20473"": 6,
    ""AS58224"": 4,
    ""AS63949"": 1390,
    ""AS396982"": 24,
    ""AS8075"": 2,
    ""AS59425"": 8,
    ""AS4694"": 2,
    ""AS197414"": 4,
    ""AS48721"": 12,
    ""AS26863"": 10,
    ""AS135377"": 124,
    ""AS398705"": 2,
    ""AS208091"": 2,
    ""AS10439"": 2,
    ""AS4837"": 2,
    ""AS7713"": 2,
    ""AS24757"": 2,
    ""AS9808"": 84
  },
  ""isp"": {
    ""UAB Host Baltic"": 2,
    ""Chinanet"": 12,
    ""Flyservers S.A."": 18,
    ""The Constant Company"": 6,
    ""TCE"": 4,
    ""Akamai Technologies, Inc."": 1390,
    ""Google LLC"": 24,
    ""Microsoft Corporation"": 2,
    ""Horizon LLC"": 8,
    ""IDC Frontier Inc."": 2,
    ""Xhost Internet Solutions LP"": 6,
    ""Gameserverkings"": 10,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 124,
    ""Censys, Inc."": 2,
    ""CariNet, Inc."": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Ethiotelecom"": 2,
    ""China Mobile"": 84
  },
  ""org"": {
    ""EmanuelHosting LTD"": 2,
    ""Chinanet JS"": 12,
    ""UAB Host Baltic"": 6,
    ""Vultr Holdings, LLC"": 6,
    ""Unknown"": 6,
    ""Linode, LLC"": 18,
    ""Palo Alto Networks, Inc"": 24,
    ""Microsoft Azure Cloud (canadacentral)"": 2,
    ""Horizon LLC"": 8,
    ""IDCFNet"": 2,
    ""Xhostis"": 4,
    ""Flyservers S.A"": 12,
    ""Gameserverkings"": 10,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Censys, Inc."": 2,
    ""Ucloud Information Technology"": 122,
    ""Xhost Internet Solutions"": 2,
    ""Akamai Technologies, Inc."": 1372,
    ""sysadmin@cari.net"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""China Mobile Communications Corporation"": 84
  },
  ""regionName"": {
    ""Kaunas"": 14,
    ""Jiangsu"": 12,
    ""Vilnius"": 6,
    ""\u00cele-de-France"": 6,
    ""Isfahan"": 4,
    ""North West"": 18,
    ""California"": 26,
    ""Ontario"": 2,
    ""Moscow"": 8,
    ""Tokyo"": 2,
    ""North Holland"": 6,
    ""District of Columbia"": 10,
    ""England"": 2,
    ""Hesse"": 2,
    ""Virginia"": 122,
    ""Jakarta"": 1374,
    ""Beijing"": 2,
    ""Addis Ababa"": 2,
    ""Shanghai"": 84
  },
  ""country"": {
    ""Lithuania"": 20,
    ""China"": 98,
    ""France"": 6,
    ""Iran"": 4,
    ""Singapore"": 18,
    ""United States"": 158,
    ""Canada"": 2,
    ""Russia"": 8,
    ""Japan"": 2,
    ""The Netherlands"": 6,
    ""United Kingdom"": 2,
    ""Germany"": 2,
    ""Indonesia"": 1374,
    ""Ethiopia"": 2
  },
  ""account"": {
    ""Administr"": 10,
    ""hello"": 122,
    ""administrator"": 6,
    ""whatuptime.com"": 6,
    ""EZjvNakUr"": 2,
    ""BdFTwt"": 2,
    ""Uarjrg"": 2,
    ""(empty)"": 10,
    ""Domain"": 4,
    ""Test"": 24,
    ""Administrator"": 320,
    ""iMXSiiZSO"": 2,
    ""FUhKcX"": 2,
    ""wZeVlT"": 2,
    ""bBYwwCnai"": 2,
    ""MhQmXj"": 2,
    ""QMiJsh"": 2,
    ""Admin"": 196,
    ""Whatuptime.com"": 196,
    ""Jakartakini123#"": 196,
    ""Hello World"": 196,
    ""TinHocThucHanh"": 196,
    ""Hey"": 196,
    ""OizGLLfWP"": 2,
    ""JwLjbY"": 2,
    ""tNIJqJ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 1702
  },
  ""client_build"": {
    ""Unknown"": 1702
  },
  ""client_name"": {
    ""Unknown"": 1702
  },
  ""ip_type"": {
    ""Unknown"": 56,
    ""proxy"": 12,
    ""hosting & proxy"": 6,
    ""hosting"": 1544,
    ""mobile"": 84
  }
}"
bE9MKTSU,2024-04-21_stats.json,rdp_snitch,JSON,Sunday 21st of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""194.169.175.22"": 1,
    ""58.218.204.183"": 6,
    ""45.227.254.49"": 1,
    ""136.244.112.233"": 3,
    ""37.255.222.209"": 2,
    ""192.53.116.174"": 9,
    ""205.210.31.73"": 3,
    ""20.43.26.58"": 1,
    ""62.204.41.225"": 4,
    ""203.137.68.45"": 1,
    ""185.170.144.3"": 2,
    ""194.165.16.73"": 4,
    ""195.60.167.88"": 5,
    ""123.58.207.151"": 1,
    ""167.94.145.97"": 1,
    ""198.235.24.43"": 3,
    ""152.32.183.213"": 61,
    ""87.251.75.145"": 1,
    ""205.210.31.22"": 3,
    ""172.232.250.53"": 686,
    ""71.6.186.12"": 1,
    ""116.140.196.215"": 1,
    ""36.91.222.100"": 1,
    ""196.190.117.7"": 1,
    ""45.227.254.54"": 2,
    ""36.137.176.244"": 42,
    ""198.235.24.100"": 3,
    ""194.165.16.11"": 2
  },
  ""asn"": {
    ""AS209605"": 1,
    ""AS4134"": 6,
    ""AS267784"": 3,
    ""AS20473"": 3,
    ""AS58224"": 2,
    ""AS63949"": 695,
    ""AS396982"": 12,
    ""AS8075"": 1,
    ""AS59425"": 4,
    ""AS4694"": 1,
    ""AS197414"": 2,
    ""AS48721"": 6,
    ""AS26863"": 5,
    ""AS135377"": 62,
    ""AS398705"": 1,
    ""AS208091"": 1,
    ""AS10439"": 1,
    ""AS4837"": 1,
    ""AS7713"": 1,
    ""AS24757"": 1,
    ""AS9808"": 42
  },
  ""isp"": {
    ""UAB Host Baltic"": 1,
    ""Chinanet"": 6,
    ""Flyservers S.A."": 9,
    ""The Constant Company"": 3,
    ""TCE"": 2,
    ""Akamai Technologies, Inc."": 695,
    ""Google LLC"": 12,
    ""Microsoft Corporation"": 1,
    ""Horizon LLC"": 4,
    ""IDC Frontier Inc."": 1,
    ""Xhost Internet Solutions LP"": 3,
    ""Gameserverkings"": 5,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 62,
    ""Censys, Inc."": 1,
    ""CariNet, Inc."": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Ethiotelecom"": 1,
    ""China Mobile"": 42
  },
  ""org"": {
    ""EmanuelHosting LTD"": 1,
    ""Chinanet JS"": 6,
    ""UAB Host Baltic"": 3,
    ""Vultr Holdings, LLC"": 3,
    ""Unknown"": 3,
    ""Linode, LLC"": 9,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Azure Cloud (canadacentral)"": 1,
    ""Horizon LLC"": 4,
    ""IDCFNet"": 1,
    ""Xhostis"": 2,
    ""Flyservers S.A"": 6,
    ""Gameserverkings"": 5,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Censys, Inc."": 1,
    ""Ucloud Information Technology"": 61,
    ""Xhost Internet Solutions"": 1,
    ""Akamai Technologies, Inc."": 686,
    ""sysadmin@cari.net"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Telekomunikasi Indonesia"": 1,
    ""China Mobile Communications Corporation"": 42
  },
  ""regionName"": {
    ""Kaunas"": 7,
    ""Jiangsu"": 6,
    ""Vilnius"": 3,
    ""\u00cele-de-France"": 3,
    ""Isfahan"": 2,
    ""North West"": 9,
    ""California"": 13,
    ""Ontario"": 1,
    ""Moscow"": 4,
    ""Tokyo"": 1,
    ""North Holland"": 3,
    ""District of Columbia"": 5,
    ""England"": 1,
    ""Hesse"": 1,
    ""Virginia"": 61,
    ""Jakarta"": 687,
    ""Beijing"": 1,
    ""Addis Ababa"": 1,
    ""Shanghai"": 42
  },
  ""country"": {
    ""Lithuania"": 10,
    ""China"": 49,
    ""France"": 3,
    ""Iran"": 2,
    ""Singapore"": 9,
    ""United States"": 79,
    ""Canada"": 1,
    ""Russia"": 4,
    ""Japan"": 1,
    ""The Netherlands"": 3,
    ""United Kingdom"": 1,
    ""Germany"": 1,
    ""Indonesia"": 687,
    ""Ethiopia"": 1
  },
  ""account"": {
    ""Administr"": 5,
    ""hello"": 61,
    ""administrator"": 3,
    ""whatuptime.com"": 3,
    ""EZjvNakUr"": 1,
    ""BdFTwt"": 1,
    ""Uarjrg"": 1,
    ""(empty)"": 5,
    ""Domain"": 2,
    ""Test"": 12,
    ""Administrator"": 160,
    ""iMXSiiZSO"": 1,
    ""FUhKcX"": 1,
    ""wZeVlT"": 1,
    ""bBYwwCnai"": 1,
    ""MhQmXj"": 1,
    ""QMiJsh"": 1,
    ""Admin"": 98,
    ""Whatuptime.com"": 98,
    ""Jakartakini123#"": 98,
    ""Hello World"": 98,
    ""TinHocThucHanh"": 98,
    ""Hey"": 98,
    ""OizGLLfWP"": 1,
    ""JwLjbY"": 1,
    ""tNIJqJ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 851
  },
  ""client_build"": {
    ""Unknown"": 851
  },
  ""client_name"": {
    ""Unknown"": 851
  },
  ""ip_type"": {
    ""Unknown"": 28,
    ""proxy"": 6,
    ""hosting & proxy"": 3,
    ""hosting"": 772,
    ""mobile"": 42
  }
}"
cReWvd59,Simple Audio Play Manager,lpendle,C#,Sunday 21st of April 2024 06:54:32 PM CDT,"using UnityEngine;

public class AudioManager : MonoBehaviour
{
    [Header (""--- Audio Source ---"")]
    [SerializeField] AudioSource musicSource;
    [SerializeField] AudioSource SFXSource;
// Add as many clips as you have
    [Header (""--- Audio Clip ---"")]
    public AudioClip Background_Music;

    private void Start()
    {
        musicSource.clip = Background_Music;
        musicSource.Play();
    }
}"
YZfCz5hU,xx,x2w,GetText,Sunday 21st of April 2024 06:26:55 PM CDT,"xxxx
xx"
qRNBxQNS,Untitled,x2w,GetText,Sunday 21st of April 2024 06:26:47 PM CDT,"x














x"
8jmMLdgd,Monsters.c,MrNobody31489,C,Sunday 21st of April 2024 05:11:48 PM CDT,"class PITSTOP_Monsters_Werewolf_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleeWerewolfPitstop"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleeWerewolfPitstop"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleeWerewolfPitstop"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};
class PITSTOP_Monsters_Werewolf_Skin extends PITSTOP_Monsters_Werewolf_Base {};
class PITSTOP_Monsters_Werewolf_White extends PITSTOP_Monsters_Werewolf_Base {};
class PITSTOP_Monsters_Werewolf_Black extends PITSTOP_Monsters_Werewolf_Base {};

class PITSTOP_Monsters_Werebear_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleeWerebearPitstop"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleeWerebearPitstop"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleeWerebearPitstop"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};

class PITSTOP_Monsters_Yeti_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleeWerebearPitstop"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleeWerebearPitstop"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleeWerebearPitstop"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};

class PITSTOP_Monsters_Wendigo_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleeWendigoPitstop"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleeWendigoPitstop"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleeWendigoPitstop"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};

class PITSTOP_Monsters_Lechen_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleeLechenPitstop"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleeLechenPitstop"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleeLechenPitstop"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};

class PITSTOP_Monsters_Syther_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleePSSyther"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleePSSyther"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleePSSyther"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		//! anim type
		pAnimType = 0; // belly
		
		//! direction
		pAnimHitDir = ComputeHitDirectionAngle(pSource);
		//! shock GetDamage
		m_ShockDamage = GetGame().ConfigGetFloat( ""CfgAmmo "" + pAmmoType + "" DamageApplied "" + ""Shock "" + ""damage"");
		return true;
	}
};
//class PITSTOP_Monsters_Syther extends PITSTOP_Monsters_Syther_Base {};

class PITSTOP_Monsters_Syther extends PITSTOP_Monsters_Syther_Base
{
    protected float m_Scale = 1.5;
    
    void PITSTOP_Monsters_Syther()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
}

class PITSTOP_Monsters_Reaper_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleePSReaper"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleePSReaper"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleePSReaper"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		//! anim type
		pAnimType = 0; // belly
		
		//! direction
		pAnimHitDir = ComputeHitDirectionAngle(pSource);
		//! shock GetDamage
		m_ShockDamage = GetGame().ConfigGetFloat( ""CfgAmmo "" + pAmmoType + "" DamageApplied "" + ""Shock "" + ""damage"");
		return true;
	}
};

class PITSTOP_Monsters_Reaper extends PITSTOP_Monsters_Reaper_Base
{
    protected float m_Scale = 2.5;
    
    void PITSTOP_Monsters_Reaper()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
}

class PITSTOP_Monsters_Gorgund_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleePSGorgund"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleePSGorgund"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleePSGorgund"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		//! anim type
		pAnimType = 0; // belly
		
		//! direction
		pAnimHitDir = ComputeHitDirectionAngle(pSource);
		//! shock GetDamage
		m_ShockDamage = GetGame().ConfigGetFloat( ""CfgAmmo "" + pAmmoType + "" DamageApplied "" + ""Shock "" + ""damage"");
		return true;
	}
};

class PITSTOP_Monsters_Gorgund extends PITSTOP_Monsters_Gorgund_Base
{
    protected float m_Scale = 1.7;
    
    void PITSTOP_Monsters_Gorgund()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
}

class PITSTOP_Monsters_Gargoyvile_Base extends ZombieMaleBase
{
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleePSGargoyvile"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleePSGargoyvile"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleePSGargoyvile"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		//! anim type
		pAnimType = 0; // belly
		
		//! direction
		pAnimHitDir = ComputeHitDirectionAngle(pSource);
		//! shock GetDamage
		m_ShockDamage = GetGame().ConfigGetFloat( ""CfgAmmo "" + pAmmoType + "" DamageApplied "" + ""Shock "" + ""damage"");
		return true;
	}
};

class PITSTOP_Monsters_Gargoyvile_1 extends PITSTOP_Monsters_Gargoyvile_Base
{
    protected float m_Scale = 1.6;
    
    void PITSTOP_Monsters_Gargoyvile_1()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
}
class PITSTOP_Monsters_Gargoyvile_2 extends PITSTOP_Monsters_Gargoyvile_Base
{
    protected float m_Scale = 1.6;
    
    void PITSTOP_Monsters_Gargoyvile_2()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
}
class PITSTOP_Monsters_Gargoyvile_3 extends PITSTOP_Monsters_Gargoyvile_Base
{
    protected float m_Scale = 1.6;
    
    void PITSTOP_Monsters_Gargoyvile_3()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
}

class PITSTOP_Monsters_MaskedMoose_Base extends AnimalBase
{
	protected float m_Scale = 1.3;
    
    void PITSTOP_Monsters_MaskedMoose_Base()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
	
	override void RegisterHitComponentsForAI()
	{
		m_DefaultHitComponent = ""Zone_Chest"";
		m_DefaultHitPositionComponent = ""Pelvis"";
		
		DayZAIHitComponentHelpers.RegisterHitComponent(m_HitComponentsForAI, ""Zone_Head"", 2);
		DayZAIHitComponentHelpers.RegisterHitComponent(m_HitComponentsForAI, ""Zone_Neck"", 65);
		DayZAIHitComponentHelpers.RegisterHitComponent(m_HitComponentsForAI, ""Zone_Chest"", 50);
		DayZAIHitComponentHelpers.RegisterHitComponent(m_HitComponentsForAI, ""Zone_Legs_Back"", 75);
		DayZAIHitComponentHelpers.RegisterHitComponent(m_HitComponentsForAI, ""Zone_Legs_Front"", 70);
	}
	
	override bool IsDanger()
	{
		return true;
	}
	
	override string CaptureSound()
	{
		return ""DeerRoarLong_SoundSet"";
	}
	
	override string ReleaseSound()
	{
		return ""DeerRoarShort_SoundSet"";
	}
}
class PITSTOP_Monsters_MaskedMoose_Bloody extends PITSTOP_Monsters_MaskedMoose_Base {};
class PITSTOP_Monsters_MaskedMoose_Clean extends PITSTOP_Monsters_MaskedMoose_Base {};

class PITSTOP_Monsters_Gharlog_Base extends ZombieMaleBase
{
	protected float m_Scale = 1.8;
    
    void PITSTOP_Monsters_Gharlog_Base()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
	
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleePSGharlog"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleePSGharlog"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleePSGharlog"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};
class PITSTOP_Monsters_Gharlog extends PITSTOP_Monsters_Gharlog_Base {};

class PITSTOP_Monsters_FireDemon_Base extends ZombieMaleBase
{
    protected float m_Scale = 1.7;
    
    void PITSTOP_Monsters_FireDemon_Base()
    {
        SetEventMask(EntityEvent.POSTFRAME);
        RegisterNetSyncVariableFloat(""m_Scale"");
    }

    override void EOnFrame(IEntity other, float timeSlice) // | EntityEvent.FRAME
    {
        vector rotation = GetYawPitchRoll();
        SetYawPitchRoll(Vector(rotation[0], 0, 0));
    }
        
    override void EOnPostFrame(IEntity other, int extra) // | EntityEvent.POSTFRAME
    {
        vector mat[4];
        GetTransform(mat);

        mat[0] = mat[0].Normalized() * m_Scale;
        mat[1] = mat[1].Normalized() * m_Scale;
        mat[2] = mat[2].Normalized() * m_Scale;

        SetTransform(mat);
    }

    override void EEHitBy(TotalDamageResult damageResult, int damageType, EntityAI source, int component, string dmgZone, string ammo, vector modelPos, float speedCoef)
    {
        super.EEHitBy(damageResult, damageType, source, component, dmgZone, ammo, modelPos, speedCoef);
    
        m_DamageHitToProcess = false;    
    }
	
	override bool FightLogic(int pCurrentCommandID, DayZInfectedInputController pInputController, float pDt)
	{
		if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_MOVE )
		{
			// we attack only in chase & fight state
			int mindState = pInputController.GetMindState();
			if( mindState == DayZInfectedConstants.MINDSTATE_CHASE )
			{
				return ChaseAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
			else if( mindState == DayZInfectedConstants.MINDSTATE_FIGHT )
			{
				return FightAttackLogic(pCurrentCommandID, pInputController, pDt);
			}
		}
		else if( pCurrentCommandID == DayZInfectedConstants.COMMANDID_ATTACK )
		{
			DayZInfectedCommandAttack attackCommand = GetCommand_Attack();
			if( attackCommand && attackCommand.WasHit() )
			{
				if( m_ActualTarget != NULL )
				{
					if (m_ActualTarget.GetMeleeTargetType() == EMeleeTargetType.NONALIGNABLE )
					{
						return false;
					}
					bool playerInBlockStance = false;
					vector targetPos = m_ActualTarget.GetPosition();
					vector hitPosWS = targetPos;

					PlayerBase playerTarget = PlayerBase.Cast(m_ActualTarget);
					if( playerTarget )
					{
						playerInBlockStance = playerTarget.GetMeleeFightLogic() && playerTarget.GetMeleeFightLogic().IsInBlock();
					}

					if( vector.DistanceSq(targetPos, this.GetPosition()) <= m_ActualAttackType.m_Distance * m_ActualAttackType.m_Distance )
					{
						//! player is in block stance
						if( playerInBlockStance )
						{
							//! infected is playing heavy attack - decrease the dmg to light
							if( m_ActualAttackType.m_IsHeavy != 0 )
							{
								hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
								DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(), ""MeleePSFireDemon"", hitPosWS);
							}
							else
							{
								//! infected is playing light attack - do not send damage, play animation instead
								if( GetGame().IsServer() )
								{
									hitPosWS = m_ActualTarget.GetDefaultHitPosition(); //! override hit pos by pos defined in type
									m_ActualTarget.EEHitBy(null, 0, this, -1, m_ActualTarget.GetDefaultHitComponent(), ""MeleePSFireDemon"", hitPosWS, 1.0);
								}
							}
						}
						else
						{
							hitPosWS = m_ActualTarget.ModelToWorld(m_ActualTarget.GetDefaultHitPosition()); //! override hit pos by pos defined in type
							DamageSystem.CloseCombatDamageName(this, m_ActualTarget, m_ActualTarget.GetHitComponentForAI(),  ""MeleePSFireDemon"", hitPosWS);
						}
					}
				}
			}
			
			return true;
		}
				
		return false;
	}
	
	override bool EvaluateDamageHitAnimation(EntityAI pSource, string pComponent, string pAmmoType, out bool pHeavyHit, out int pAnimType, out float pAnimHitDir)
	{
		return false;
	}
};
class PITSTOP_Monsters_FireDemon extends PITSTOP_Monsters_FireDemon_Base {};"
NMBiEXhW,Minecraft Turtle Furnace Manager,hornedcommando,Lua,Sunday 21st of April 2024 04:41:01 PM CDT,"--Work in Progress
--TODO: Load Cookables in top
--TODO: Extract Finished product, return to chest
--TODO: Determine how many furnaces this little guy can manage and have him setup that many instead of just 1
--A turtle furnace Management Program
--by hornedcommando

function input()
    while true do
        write(""I need a furnace, and a chest to work properly, Ok?"")
         break
    end
end

-- Function to search the inventory for an item from a table
function searchInventory(items)
    print(""Searching inventory for items"")
    for slot = 1, 16 do
        turtle.select(slot)
        local slotDetail = turtle.getItemDetail()
        if slotDetail then
            for _, item in ipairs(items) do
                if slotDetail.name == item then
                    print(""Found "" .. item .. "" in slot "" .. slot)
                    return true, slot
                end
            end
        end
    end
    print(""Could not find any items in inventory"")
    return false
end

function setup()
    print(""setting up"")
    searchInventory(""minecraft:furnace"")
    turtle.place()
    turtle.turnRight()
    turtle.forward()
    turtle.turnLeft()
    searchInventory(""minecraft:chest"")
    turtle.place()
    turtle.up()
    turtle.forward()
    turtle.forward()
    turtle.down()
    turtle.turnLeft()
    turtle.turnLeft()
end

-- Function to wait until items are put into a chest
function waitForItems()
    print(""Waiting for items..."")
    local pulledSomething = false
    while not inventoryFull() do
        if turtle.suck() then
            pulledSomething = true
        else
            if pulledSomething then
                print(""No more items in the chest"")
                break
            end
        end
        sleep(1)  -- Adjust the sleep duration as needed
    end
end

local fuels = {
    ""minecraft:coal"",
    ""minecraft:charcoal"",
    ""minecraft:oak_planks"",
    ""minecraft:stick"",
    ""minecraft:wooden_pickaxe"",
    ""minecraft:wooden_shovel"",
    ""minecraft:wooden_axe"",
    ""minecraft:wooden_sword"",
    ""minecraft:oak_slab"",
    ""minecraft:oak_sapling"",
    ""minecraft:spruce_sapling"",
    ""minecraft:birch_sapling"",
    ""minecraft:jungle_sapling"",
    ""minecraft:acacia_sapling"",
    ""minecraft:dark_oak_sapling"",
    ""minecraft:bamboo"",
    ""minecraft:kelp"",
    ""minecraft:lava_bucket"",
    ""minecraft:blaze_rod"",
    ""minecraft:coal_block"",
    ""minecraft:dried_kelp_block"",
}

function fuelFurnace()
    turtle.turnRight()
    turtle.forward()
    turtle.turnLeft()
    turtle.drop()
end


setup()
waitForItems()
searchInventory(fuels)
fuelFurnace()
"
zcXijVWx,pastebin.ai - New pastebin.com alternative,xxsa,PHP,Sunday 21st of April 2024 04:40:01 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
...........
....................."
xLwvfhDA,Player 2D,JeCodeLeSoir,C#,Sunday 21st of April 2024 04:02:12 PM CDT,"//version 1.0 🤣

using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
[RequireComponent(typeof(CircleCollider2D))]
public class Player : MonoBehaviour
{
    [Header(""Player Physics Settings"")]
    [SerializeField] Rigidbody2D m_rigidbody2D;
    [SerializeField] float m_speed = 5.0f;
    [SerializeField] float m_jumpForce = 5.0f;

    [Header(""Player Grounded Settings"")]

    [SerializeField] LayerMask layerMask;

    [SerializeField] float distanceA = 0.7f;
    [SerializeField] float distanceB = 0.9f;
    [SerializeField] float distanceC = 0.9f;

    [Header(""Player Debug"")]

    [SerializeField] float horizontal;
    [SerializeField] Vector2 direction;
    [SerializeField] Vector2 lastVelocity;
    [SerializeField] bool isGrounded;
    [SerializeField] bool isJump;

    private Transform tx;
    private RaycastHit2D hit;

    private void Reset()
    {
        m_rigidbody2D = GetComponent<Rigidbody2D>();
    }

    private void Start()
    {
        tx = this.transform;
        direction = new Vector2(0, 0);
    }

    private void FixedUpdate()
    {
        isGrounded = IsGrounded();

        if (!isGrounded)
            return;

        Move();
        Jump();
    }

    private void Move()
    {
        horizontal = Input.GetAxis(""Horizontal"");
        lastVelocity = m_rigidbody2D.velocity;
        
        direction.x = horizontal;
        direction.y = 0;

        lastVelocity.x = 0;

        m_rigidbody2D.velocity = lastVelocity + direction * m_speed;
    }

    private void ResetJump()
    {
        isJump = false;
    }

    private void Jump()
    {
        if (isJump)
            return;

        if (!Input.GetKey(KeyCode.Space))
            return;

        m_rigidbody2D.AddForce(Vector2.up * m_jumpForce, ForceMode2D.Impulse);
        
        isJump = true;

        this.Invoke(nameof(ResetJump), 0.5f);

    }
     
    private void OnDrawGizmos()
    {
        if (!tx)
            return;

        Debug.DrawRay(tx.position, Vector2.down * distanceA, Color.red);
        Debug.DrawRay(tx.position, (Vector2.down + Vector2.left).normalized * distanceB, Color.red);
        Debug.DrawRay(tx.position, (Vector2.down + Vector2.right).normalized * distanceC, Color.red);
    }

    
    
    bool IsGrounded()
    {
        hit = Physics2D.Raycast(tx.position, Vector2.down , distanceA, layerMask);
        
        if (hit.collider != null)
            return true;

        hit =
            Physics2D.Raycast(tx.position, (Vector2.down + Vector2.left), distanceB, layerMask);

        if (hit.collider != null)
            return true;
        
        hit =
            Physics2D.Raycast(tx.position, Vector2.down + Vector2.right, distanceC, layerMask);

        if (hit.collider != null)
            return true;

        return false;
    }
}"
3e98JVff,COX OLM Colored,lokdei,JSON,Sunday 21st of April 2024 03:03:26 PM CDT,"[
  {
    ""regionId"": 12889,
    ""regionX"": 28,
    ""regionY"": 45,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 28,
    ""regionY"": 43,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 29,
    ""regionY"": 31,
    ""z"": 0,
    ""color"": ""#FFFFFF00"",
    ""label"": ""Bank""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 32,
    ""regionY"": 45,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 32,
    ""regionY"": 43,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 38,
    ""regionY"": 38,
    ""z"": 0,
    ""color"": ""#FFFF0000"",
    ""label"": ""MELEE""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 28,
    ""regionY"": 50,
    ""z"": 0,
    ""color"": ""#FFFF0000"",
    ""label"": ""MELEE""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 37,
    ""regionY"": 50,
    ""z"": 0,
    ""color"": ""#FF001DFF"",
    ""label"": ""MAGE""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 28,
    ""regionY"": 38,
    ""z"": 0,
    ""color"": ""#FF001DFF"",
    ""label"": ""MAGE""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 28,
    ""regionY"": 47,
    ""z"": 0,
    ""color"": ""#FF000000"",
    ""label"": ""DD""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 37,
    ""regionY"": 41,
    ""z"": 0,
    ""color"": ""#FF000000"",
    ""label"": ""DD""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 32,
    ""regionY"": 31,
    ""z"": 0,
    ""color"": ""#FFFFFF00"",
    ""label"": ""LongRange Staff""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 37,
    ""regionY"": 45,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 37,
    ""regionY"": 43,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 33,
    ""regionY"": 43,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 12889,
    ""regionX"": 33,
    ""regionY"": 45,
    ""z"": 0,
    ""color"": ""#FFFFFFFF""
  },
  {
    ""regionId"": 13136,
    ""regionX"": 16,
    ""regionY"": 53,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13136,
    ""regionX"": 23,
    ""regionY"": 48,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13136,
    ""regionX"": 55,
    ""regionY"": 50,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 2,
    ""regionY"": 46,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 7,
    ""regionY"": 16,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 34,
    ""regionY"": 4,
    ""z"": 0,
    ""color"": ""#FFFFFF00"",
    ""label"": ""Exit""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 43,
    ""regionY"": 20,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 15,
    ""regionY"": 17,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 11,
    ""regionY"": 17,
    ""z"": 0,
    ""color"": ""#FF999999"",
    ""label"": ""Muttadiles \u003d ZGS""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 13,
    ""regionY"": 17,
    ""z"": 0,
    ""color"": ""#FF999999"",
    ""label"": ""Tightrope \u003d Phoenix""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 10,
    ""regionY"": 16,
    ""z"": 0,
    ""color"": ""#FF999999"",
    ""label"": ""Mystics \u003d Salve""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 14,
    ""regionY"": 16,
    ""z"": 0,
    ""color"": ""#FF999999"",
    ""label"": ""Guardians \u003d DPick""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 11,
    ""regionY"": 38,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13137,
    ""regionX"": 8,
    ""regionY"": 38,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 12,
    ""regionY"": 44,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 12,
    ""regionY"": 41,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 18,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 22,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 21,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 20,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 19,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 16,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 15,
    ""regionY"": 17,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 45,
    ""regionY"": 21,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 49,
    ""regionY"": 21,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 10,
    ""regionY"": 9,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 47,
    ""regionY"": 37,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 54,
    ""regionY"": 47,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 52,
    ""regionY"": 7,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 39,
    ""regionY"": 8,
    ""z"": 0,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 11,
    ""regionY"": 25,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 16,
    ""regionY"": 40,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 26,
    ""regionY"": 23,
    ""z"": 1,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 13,
    ""regionY"": 44,
    ""z"": 2,
    ""color"": ""#FFFFFF00""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 47,
    ""regionY"": 46,
    ""z"": 1,
    ""color"": ""#FFFFFF00"",
    ""label"": ""LANCE \u003d CRUSH""
  },
  {
    ""regionId"": 13138,
    ""regionX"": 54,
    ""regionY"": 22,
    ""z"": 1,
    ""color"": ""#FFFFFF00"",
    ""label"": ""Safespot""
  }
]
"
SYBqRFse,Untitled,sclammerous,Lua,Sunday 21st of April 2024 02:45:17 PM CDT,"local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local Window = OrionLib:MakeWindow({Name = ""BloxStreet"", HidePremium = true, SaveConfig = true, ConfigFolder = ""BloxStreet""})

local Tab = Window:MakeTab({
	Name = ""Point Cheating"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

local Tab = Window:MakeTab({
	Name = ""Admin Commands"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

local Tab = Window:MakeTab({
	Name = ""Training Center"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})

local Tab = Window:MakeTab({
	Name = ""Training Center"",
	Icon = ""rbxassetid://4483345998"",
	PremiumOnly = false
})"
5e5ZVik6,LinearReceiver,No_Zen,Lua,Sunday 21st of April 2024 02:35:31 PM CDT,"local modem = peripheral.wrap(""right"")
modem.open(25810)
while true do
    local event, side, channel, replyChannel, message, distance = os.pullEvent(""modem_message"")
    local data = textutils.unserialize(message)
    if data.id == os.getComputerID() then
        redstone.setOutput(data.side, data.state)
    end
end
"
86L2ejd3,LinearTransmitter,No_Zen,Lua,Sunday 21st of April 2024 02:33:01 PM CDT,"local modem = peripheral.wrap(""back"");

local ids = {1069, 1070, 1071, 1072, 1073, 1074}

local delay = 3.8

local addX = function()
    modem.transmit(25810, 25810, textutils.serialize({id=ids[3], side=""bottom"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[3], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[3], side=""back"", state=false}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[3], side=""bottom"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""bottom"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=false}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""bottom"", state=false}));
    os.sleep(0.1);


    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=false}));
    os.sleep(0.1);
end

local subX = function()
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[2], side=""right"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""bottom"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""back"", state=false}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[1], side=""bottom"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[3], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[3], side=""back"", state=false}));
    os.sleep(0.1);
end

local addZ = function()
    modem.transmit(25810, 25810, textutils.serialize({id=ids[6], side=""bottom"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[6], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[6], side=""back"", state=false}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[6], side=""bottom"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""bottom"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=false}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""bottom"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=false}));
    os.sleep(0.1);
end

local subZ = function()
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=true}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""left"", state=false}));
    modem.transmit(25810, 25810, textutils.serialize({id=ids[5], side=""right"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""bottom"", state=true}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""back"", state=false}));
    os.sleep(0.1);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[4], side=""bottom"", state=false}));
    os.sleep(0.1);

    modem.transmit(25810, 25810, textutils.serialize({id=ids[6], side=""back"", state=true}));
    os.sleep(delay);
    modem.transmit(25810, 25810, textutils.serialize({id=ids[6], side=""back"", state=false}));
    os.sleep(0.1);
end

local filename = ""data.txt""

-- Function to initialize or reset data.txt with default values for current and target coordinates
local function initializeFile()
    local file = fs.open(filename, ""w"")
    file.writeLine(""0"")  -- Current x
    file.writeLine(""0"")  -- Current z
    file.writeLine(""0"")  -- Target x
    file.writeLine(""0"")  -- Target z
    file.close()
end

-- Read coordinates from data.txt
local function readCoordinates()
    if not fs.exists(filename) then
        initializeFile()
    end
    local file = fs.open(filename, ""r"")
    local currentX = tonumber(file.readLine())
    local currentZ = tonumber(file.readLine())
    local targetX = tonumber(file.readLine())
    local targetZ = tonumber(file.readLine())
    file.close()
    return currentX, currentZ, targetX, targetZ
end

-- Write coordinates to data.txt
local function writeCoordinates(currentX, currentZ, targetX, targetZ)
    local file = fs.open(filename, ""w"")
    file.writeLine(tostring(currentX))
    file.writeLine(tostring(currentZ))
    file.writeLine(tostring(targetX))
    file.writeLine(tostring(targetZ))
    file.close()
end

-- Movement functions that handle modem communication and update current coordinates
local currentX, currentZ, targetX, targetZ = readCoordinates()

-- Main function to handle logic and control flow
local function main()
    -- Check if stepping is needed
    if currentX ~= targetX or currentZ ~= targetZ then
        print(""C: ""..currentX.."" ""..currentZ.."" T: ""..targetX.."" ""..targetZ)
        if currentX < targetX then
            addX()
            currentX = currentX + 2
        elseif currentX > targetX then
            subX()
            currentX = currentX - 2
        elseif currentZ < targetZ then
            addZ()
            currentZ = currentZ + 2
        elseif currentZ > targetZ then
            subZ()
            currentZ = currentZ - 2
        end

        writeCoordinates(currentX, currentZ, targetX, targetZ)
        return ""continue""
    else
        -- Wait for new input when target coordinates are reached
        term.clear()
        term.setCursorPos(1, 1)
        print(""C: ""..currentX.."" ""..currentZ.."" T: ""..targetX.."" ""..targetZ)
        print(""Enter new target:"")
        local input = io.read()
        local args = {}
        for arg in string.gmatch(input, ""%S+"") do
            table.insert(args, arg)
        end

        -- Helper function to round a number towards zero to the nearest even number
local function roundToEven(n)
    return n % 2 == 0 and n or (n > 0 and (n - 1) or (n + 1))
end

-- Parsing and adjusting target coordinates
if args[1] == ""r"" and #args == 3 then
    -- Relative coordinates: adjust inputs to be even if necessary
    local deltaX = tonumber(args[2])
    local deltaZ = tonumber(args[3])
    targetX = currentX + roundToEven(deltaX)
    targetZ = currentZ + roundToEven(deltaZ)
elseif #args == 2 then
    -- Absolute coordinates: round to the nearest even number towards zero
    targetX = roundToEven(tonumber(args[1]))
    targetZ = roundToEven(tonumber(args[2]))
else
    print(""Invalid command. Please use the format '123 456' for absolute or 'r 4 -2' for relative with even values only."")
    return ""continue""
end


        writeCoordinates(currentX, currentZ, targetX, targetZ)
        return ""continue""
    end
end

term.clear()
term.setCursorPos(1, 1)

-- Main loop to execute the main function and handle its status
while true do
    local status = main()
    if status == ""continue"" then
        -- Continue executing
    elseif status == ""break"" then
        break
    else
        print(""Unknown return status."")
    end
end
"
tVvybnVx,Spellbook Unraveling,Silviya7,JavaScript,Sunday 21st of April 2024 02:24:10 PM CDT,"function solve(input){
let message= input.shift();

let firstLine=input.shift();
while(firstLine !='End'){
    const[cmd, fromindex, toindex]= firstLine.split('!');

    switch(cmd){
 case'RemoveEven': 

 let newMessage='';
   for (let i = 0; i < message.length; i++) {
     if(i % 2==0){
        newMessage +=message[i];
     }         
   }
     message= newMessage;
     console.log(message);
 break;
 case'TakePart':
 let start=Number(fromindex);
 let end=Number(toindex);
 let newMessage1='';
   newMessage1= message.substring(start,end);
   message=newMessage1;
   console.log(message);
 break;
 case'Reverse': 
 let substr=fromindex;
 if(message.includes(substr)){

  //cut it out
  message= message.replace(substr,"""");

 //reverse
 let newcuttedmess='';
 for (let j =substr.length-1; j >=0 ; j--) {
 newcuttedmess +=substr[j];
   
 }
 message +=newcuttedmess;// add to the ened
 console.log(message);

 }
 else{
    console.log('Error');
 }
 break;

    }

    firstLine=input.shift();

}

console.log(`The concealed spell is: ${message}`);


}

solve([""asAsl2adkda2mdaczsa"", 
""RemoveEven"",
""TakePart!1!9"",
""Reverse!maz"",
""End""]
);"
LC3DW3em,pastebin.ai - #1 pastebin.com alternative,xxsa,PHP,Sunday 21st of April 2024 02:05:02 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
..........
....................."
