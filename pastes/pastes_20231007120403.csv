id,title,username,language,date,content
hKyJULHH,Execute step by step,keisei,C#,Saturday 7th of October 2023 06:44:05 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TaskFromMisha.Services;
using TaskFromMisha.Infrastructure;
using System.Data;
using System.Windows.Input;

namespace TaskFromMisha.VM
{
    class StepByStepVM:ViewModel
    {
    	//Временный математический результат
        private int z = 0;
        
        //Проверка на продолжение работы функции CheckCanNextStep()
        private bool CanNextStep = false;
        
        //Команда, срабатывающая при нажатии на кнопку
        public ICommand NextStepCommand { get; }
        private bool CanNextStepCommandExecute(object p) => true;
        private void OnNextStepCommandExecuted(object p) => CanNextStep = true;
		
        //Метод, ожидающий нажатия кнопки
        public void CheckCanNextStep() 
        {
            while (true)
            {
                if (CanNextStep)
                {
                    CanNextStep = false;
                    return;
                }
            }
        }
		
        //Свойство z
        public int Z
        {
            get => z;
            set
            {
                z = value;
                OnPropertyChanged();
            }
        }
        
        
		//Сложная математическая функция. Планируется выводить на экран каждый сделанный шаг
        async public void inc()
        {
            for(int i=0; i<15; i++)
            {
                await Task.Run(()=>CheckCanNextStep());
                Z += i;
            }
        }

        public StepByStepVM()
        {
            NextStepCommand = new LabmdaCommand(OnNextStepCommandExecuted, CanNextStepCommandExecute);
            inc();
        }
    }
}
"
6uL7V8kF,Untitled,xPucTu4,Python,Saturday 7th of October 2023 06:36:41 AM CDT,"import math
selected_figure = input()

square = ""square""
rectangle = ""rectangle""
circle = ""circle""
triangle = ""triangle""

if selected_figure == square:
    side = float(input())
    square = side * side
    print(f""{square:.3f}"")

elif selected_figure == rectangle:
    rectangle = float(input()) * float(input())
    print(f""{rectangle:.3f}"")

elif selected_figure == circle:
    circle = math.pi * float(input()) ** 2
    print(f""{circle:.3f}"")

elif selected_figure == triangle:
    triangle = 1 / 2 * float(input()) * float(input())
    print(f""{triangle:.3f}"")"
YeXA4Rsq,Mad,Unknown_No_1,PHP,Saturday 7th of October 2023 06:30:52 AM CDT,NewVersionModComingSoon
ARxW9xkv,urlrewrite.xml,Ruslan_Rayanov,XML,Saturday 7th of October 2023 06:24:11 AM CDT,"<rewrite>
  <rules>
 
	  <rule name=""Redirect from test to start"" enabled=""true"">
      <match url = ""^test""/>
      <conditions>
          <add input=""{REQUEST_URI}"" pattern=""test"" />
      </conditions>
      <action type=""Redirect"" url =""start"" />
    </rule>
   <rule name=""Robots"" stopProcessing=""true"">
                    <match url=""(.*)robots\.txt"" />
                    <action type=""Rewrite"" url=""/Controls/Resource/GetFile?code=robots"" />
                </rule>
                <rule name=""Sitemap.xml"" stopProcessing=""true"">
                    <match url=""(.*)sitemap\.xml"" />
                    <action type=""Rewrite"" url=""/Controls/Resource/GetFile?code=sitemap"" />
                </rule>   
	
  </rules>
</rewrite>"
skD8G7B4,pmos linking,mishakov,Bash,Saturday 7th of October 2023 06:17:03 AM CDT,"╭─misha at spectre in ~/pmos/vfatfsd on main✘✘✘
╰─± x86_64-pmos-g++  -g ./main.o -o vfatfsd.elf  -v         
Using built-in specs.
COLLECT_GCC=x86_64-pmos-g++
COLLECT_LTO_WRAPPER=/home/misha/cross/libexec/gcc/x86_64-pmos/12.2.0/lto-wrapper
Target: x86_64-pmos
Configured with: ../gcc/configure --target=x86_64-pmos --prefix=/home/misha/cross --with-sysroot=/home/misha/pmos/sysroot --enable-languages=c,c++,go --disable-clocale --enable-threads=posix
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 12.2.0 (GCC) 
COMPILER_PATH=/home/misha/cross/libexec/gcc/x86_64-pmos/12.2.0/:/home/misha/cross/libexec/gcc/x86_64-pmos/12.2.0/:/home/misha/cross/libexec/gcc/x86_64-pmos/:/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/:/home/misha/cross/lib/gcc/x86_64-pmos/:/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/
LIBRARY_PATH=/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/:/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/:/home/misha/pmos/sysroot/usr/lib/
COLLECT_GCC_OPTIONS='-g' '-o' 'vfatfsd.elf' '-v' '-mtune=generic' '-march=x86-64' '-dumpdir' 'vfatfsd.elf.'
 /home/misha/cross/libexec/gcc/x86_64-pmos/12.2.0/collect2 -plugin /home/misha/cross/libexec/gcc/x86_64-pmos/12.2.0/liblto_plugin.so -plugin-opt=/home/misha/cross/libexec/gcc/x86_64-pmos/12.2.0/lto-wrapper -plugin-opt=-fresolution=/tmp/ccwtyb4m.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc --sysroot=/home/misha/pmos/sysroot -o vfatfsd.elf /home/misha/pmos/sysroot/usr/lib/crt0.o /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/crti.o /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/crtbegin.o -L/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0 -L/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib -L/home/misha/pmos/sysroot/usr/lib ./main.o -lstdc++ -lm -lgcc -lc -lgcc /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/crtend.o /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/crtn.o
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(atexit_thread.o): in function `(anonymous namespace)::key_init()::key_s::~key_s()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:714: undefined reference to `pthread_key_delete'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(atexit_thread.o): in function `(anonymous namespace)::key_init()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:708: undefined reference to `pthread_key_create'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(atexit_thread.o): in function `(anonymous namespace)::run()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:720: undefined reference to `pthread_getspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:726: undefined reference to `pthread_setspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(atexit_thread.o): in function `__cxa_thread_atexit':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:720: undefined reference to `pthread_getspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:726: undefined reference to `pthread_setspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `(anonymous namespace)::init()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:794: undefined reference to `pthread_mutexattr_init'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `__gthread_recursive_mutex_init_function':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:796: undefined reference to `pthread_mutexattr_settype'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:799: undefined reference to `pthread_mutex_init'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:801: undefined reference to `pthread_mutexattr_destroy'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `__cxa_guard_acquire.cold':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `__cxa_guard_acquire':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:865: undefined reference to `pthread_cond_wait'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `__gthread_mutex_unlock':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `__cxa_guard_abort':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:853: undefined reference to `pthread_cond_broadcast'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(guard.o): in function `__cxa_guard_release':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:853: undefined reference to `pthread_cond_broadcast'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(thread.o): in function `std::thread::join()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:669: undefined reference to `pthread_join'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(thread.o): in function `std::thread::detach()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:675: undefined reference to `pthread_detach'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(thread.o): in function `std::thread::_M_start_thread(std::unique_ptr<std::thread::_State, std::default_delete<std::thread::_State> >, void (*)())':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:663: undefined reference to `pthread_create'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(thread.o): in function `std::this_thread::__sleep_for(std::chrono::duration<long, std::ratio<1l, 1l> >, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/src/c++11/../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:238: undefined reference to `sleep'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(thread.o): in function `std::thread::_M_start_thread(std::shared_ptr<std::thread::_Impl_base>, void (*)())':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:663: undefined reference to `pthread_create'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(eh_alloc.o): in function `(anonymous namespace)::pool::free(void*) [clone .constprop.0]':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(eh_alloc.o): in function `(anonymous namespace)::pool::allocate(unsigned long) [clone .constprop.0]':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2.o): in function `__gthread_once':
/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:700: undefined reference to `pthread_once'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2-fde.o): in function `__gthread_mutex_lock':
/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2-fde.o):/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: more undefined references to `pthread_mutex_lock' follow
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2-fde.o): in function `__gthread_mutex_unlock':
/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2-fde.o): in function `__gthread_mutex_lock':
/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:749: undefined reference to `pthread_mutex_lock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2-fde.o): in function `__gthread_mutex_unlock':
/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: undefined reference to `pthread_mutex_unlock'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/libgcc.a(unwind-dw2-fde.o):/home/misha/build-gcc/x86_64-pmos/libgcc/./gthr-default.h:779: more undefined references to `pthread_mutex_unlock' follow
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(eh_globals.o): in function `__eh_globals_init::~__eh_globals_init()':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:714: undefined reference to `pthread_key_delete'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(eh_globals.o): in function `__cxa_get_globals_fast':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:720: undefined reference to `pthread_getspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(eh_globals.o): in function `__cxa_get_globals':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:720: undefined reference to `pthread_getspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:726: undefined reference to `pthread_setspecific'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: /home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/lib/libstdc++.a(eh_globals.o): in function `_GLOBAL__sub_I__ZN17__eh_globals_init7_S_initE':
/home/misha/build-gcc/x86_64-pmos/libstdc++-v3/include/x86_64-pmos/bits/gthr-default.h:708: undefined reference to `pthread_key_create'
/home/misha/cross/lib/gcc/x86_64-pmos/12.2.0/../../../../x86_64-pmos/bin/ld: ./main.o: in function `main':
/home/misha/pmos/vfatfsd/main.cc:40: undefined reference to `pthread_exit'
collect2: error: ld returned 1 exit status"
MNKDG9Q0,13. Rivers in Africa,Sichanov,PostgreSQL,Saturday 7th of October 2023 06:06:06 AM CDT,"SELECT c.country_name,
       r.river_name
FROM countries c
LEFT JOIN countries_rivers ON c.country_code = countries_rivers.country_code
LEFT JOIN rivers r ON countries_rivers.river_id = r.id
WHERE c.continent_code = (SELECT con.continent_code from continents con WHERE con.continent_name ='Africa')
ORDER BY c.country_name
LIMIT 5"
bmHfYaBz,Untitled,pasholnahuy,M68000 Assembler,Saturday 7th of October 2023 06:06:05 AM CDT,"
 1 .global supersum                                                                                                                                                                          
 2                                                                                                                                                                                           
 3 supersum:                                                                                                                                                                                 
 4     xor %edx, %edx // буфер для промежуточной суммы                                                                                                                                       
 5     cmp %esi, %edi                                                                                                                                                                        
 6     jle swap                                                                                                                                                                              
 7     push %ebx                                                                                                                                                                             
 8     mov $-1, %ebx                                                                                                                                                                         
 9     jmp put                                                                                                                                                                               
10                                                                                                                                                                                           
11 put:                                                                                                                                                                                      
12     xor %edx, %edx                                                                                                                                                                        
13     inc %ebx                                                                                                                                                                              
14     cmp %ebx, %edi                                                                                                                                                                        
15     jle loop                                                                                                                                                                              
16     mov (%eax, %ebx, 1), %edx                                                                                                                                                             
17     mov %edx, (%ecx, %ebx, 1)                                                                                                                                                             
18     jmp loop                                                                                                                                                                              
19                                                                                                                                                                                           
20 loop:                                                                                                                                                                                     
21     inc %eax                                                                                                                                                                              
22     cmp %eax, %edi                                                                                                                                                                        
23     jg add_remain                                                                                                                                                                         
24     addw (%ecx, %eax, 1), %dx                                                                                                                                                             
25     addw (%ebx, %eax, 1), %dx                                                                                                                                                             
26     mov %dl, (%ecx, %eax, 1)                                                                                                                                                              
27     mov %dh, %dl                                                                                                                                                                          
28     xor %dh, %dh                                                                                                                                                                          
29     jmp loop                                                                                                                                                                              
30                                                                                                                                                                                           
31 swap:                                                                                                                                                                                     
32     xchg %eax, %ebx                                                                                                                                                                       
33     xchg %esi, %edi                                                                                                                                                                       
34     jmp supersum                                                                                                                                                                          
35                                                                                                                                                                                           
36 add_remain:                                                                                                                                                                               
37     addw (%ecx, %eax, 1), %dx                                                                                                                                                             
38     mov %dl, (%ecx, %eax, 1)                                                                                                                                                              
39     mov %dh, %dl                                                                                                                                                                          
40     xor %dh, %dh                                                                                                                                                                          
41     cmp $0, %dl                                                                                                                                                                           
42     jnz loop                                                                                                                                                                              
43                                                                                                                                                                                           
44 call_ret:                                                                                                                                                                                 
45     mov (%esp), %ebx                                                                                                                                                                      
46     ret                                                                                                                                                                                   
47                                                                                                                                                                                           
                                                                                                                                                                                             
                                                                                                                                                
"
pNnCAeP8,data718,TestGuy1,JSON,Saturday 7th of October 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '302a3f50ce1fe338ffe5a2d9c565069f22d4ac52ef128077a19c711656dbebec049d547cc25dfb1e7804d2be474fc44dd87a1a07821727214c77338db3c1a9402508e269fcf5308fa126e98166b36319f0c7fdd71b8c1430364e1477fbbe46ad0deabbe56740bd0068200359c8d6680f299d98ebd616c32032ba9dac4ee6d021',
  otherdata: [
    '564d164a2a7c80202d0faeade5de9282',
    '2c12b4f54793aa5173d9a7f49b53e9e5',
    '6de1c88eb37bbb0ea91e4a299c605f30',
    'ceab88c03b1a0f38c50f11e7bf4e3449',
    'a9d10e9ffcea8972d96e92c09d61619a',
    '9c7eecd42fbf43ddca800723b51a6ea7',
    '42c5a99dfa90be6626dbb3015fd74080',
    '2338e0e7fa41ae818a2771b03318fcbd'
  ]
}"
NFGjmZqS,Cruise Ship,Spocoman,Python,Saturday 7th of October 2023 05:47:49 AM CDT,"destination = input()
cabin_type = input()
overnights = int(input())

day_price = 0

if destination == ""Mediterranean"":
    if cabin_type == ""standard cabin"":
        day_price = 27.50
    elif cabin_type == ""cabin with balcony"":
        day_price = 30.20
    else:
        day_price = 40.50
elif destination == ""Adriatic"":
    if cabin_type == ""standard cabin"":
        day_price = 22.99
    elif cabin_type == ""cabin with balcony"":
        day_price = 25.00
    else:
        day_price = 34.99
else:
    if cabin_type == ""standard cabin"":
        day_price = 23.00
    elif cabin_type == ""cabin with balcony"":
        day_price = 26.60
    else:
        day_price = 39.80

total_sum = day_price * 4 * overnights
if overnights > 7:
    total_sum *= 0.75

print(f""Annie's holiday in the {destination} sea costs {total_sum:.2f} lv."")
"
JaH0fgda,Untitled,pasholnahuy,M68000 Assembler,Saturday 7th of October 2023 05:47:45 AM CDT,"

 1 .global supersum                                            | 1 |                      |       |              
 2                                                             | 2 |----------------------|-------|              
 3 supersum:                                                   | 3 | **Time limit:**      | `1 s` |              
 4     xor %edx, %edx // буфер для промежуточной суммы         | 4 | **Real time limit:** | `5 s` |              
 5     cmp %esi, %edi                                          | 5 | **Memory limit:**    | `64M` |              
 6     jle swap                                                | 6                                               
 7     mov %eax, %ecx                                          | 7                                               
 8     mov $-1, %eax                                           | 8 ### Problem sm02-5: asm/algorithms/dlinko     
 9                                                             | 9                                               
10 loop:                                                       |10 Напишите функцию supersum складывающую беззнак
11     inc %eax                                                |11                                               
12     cmp %eax, %edi                                          |12 В регистре eax передается указатель на число A
13     jg add_remain                                           |13                                               
14     addw (%ecx, %eax, 1), %dx                               |14 В esi лежит размер числа A, в edi размер числа
15     addw (%ebx, %eax, 1), %dx                               |15                                               
16     mov %dl, (%ecx, %eax, 1)                                |16 Программа возвращает 1 + индекс последнего нен
17     mov %dh, %dl                                            |17 размер числа C).                              
18     xor %dh, %dh                                            |18                                               
19     jmp loop                                                |19 Размер числа 0 - 0.                           
20                                                             |20                                               
21 swap:                                                       |21 Гарантируется, что размер буфера C > max(разме
22     xchg %eax, %ebx                                         |22                                               
23     xchg %esi, %edi                                         |23 Не забывайте сохранять значения регистров, кот
24     jmp supersum                                            |24                                               
25                                                             |25 Инструкции pushf и popf выглядят надежными и к
26 add_remain:                                                 |26                                               
27     addw (%ecx, %eax, 1), %dx                               |27 Входные числа могут содержать старшие нулевые 
28     mov %dl, (%ecx, %eax, 1)                                |28                                               
29     mov %dh, %dl                                            |29 Вы можете протестировать функцию со [следующим
30     xor %dh, %dh                                            |30 файлами](https://gist.github.com/ObjatieGroba/
31     cmp $0, %dl                                             |31                                               
32     jnz loop                                                |32 ### Examples                                  
33                                                             |33                                               
                                                                                            
"
t26vT1kD,Cruise Ship,Spocoman,JavaScript,Saturday 7th of October 2023 05:36:37 AM CDT,"function cruiseChip(input) {
    let destination = input[0];
    let cabinType = input[1];
    let overnights = Number(input[2]);

    let dayPrice = 0;

    if (destination == ""Mediterranean"") {
        if (cabinType == ""standard cabin"") {
            dayPrice = 27.50;
        } else if (cabinType == ""cabin with balcony"") {
            dayPrice = 30.20;
        } else {
            dayPrice = 40.50;
        }
    } else if (destination == ""Adriatic"") {
        if (cabinType == ""standard cabin"") {
            dayPrice = 22.99;
        } else if (cabinType == ""cabin with balcony"") {
            dayPrice = 25.00;
        } else {
            dayPrice = 34.99;
        }
    } else {
        if (cabinType == ""standard cabin"") {
            dayPrice = 23.00;
        } else if (cabinType == ""cabin with balcony"") {
            dayPrice = 26.60;
        } else {
            dayPrice = 39.80;
        }
    }

    let totalSum = dayPrice * 4 * overnights;
    if (overnights > 7) {
        totalSum *= 0.75;
    }

    console.log(`Annie\'s holiday in the ${destination} sea costs ${totalSum.toFixed(2)} lv.`);
    return;
}

РЕШЕНИЕ С ТЕРНАРЕН ОПЕРАТОР:

function cruiseChip(input) {
    let destination = input[0];
    let cabinType = input[1];
    let overnights = Number(input[2]);

    let dayPrice =
        destination == ""Mediterranean"" ?
            (cabinType == ""standard cabin"" ? 27.50 : cabinType == ""cabin with balcony"" ? 30.20 : 40.50) :
            destination == ""Adriatic"" ?
                (cabinType == ""standard cabin"" ? 22.99 : cabinType == ""cabin with balcony"" ? 25.00 : 34.99) :
                (cabinType == ""standard cabin"" ? 23.00 : cabinType == ""cabin with balcony"" ? 26.60 : 39.80);

    let totalSum = dayPrice * 4 * overnights * (overnights > 7 ? 0.75 : 1);

    console.log(`Annie\'s holiday in the ${destination} sea costs ${totalSum.toFixed(2)} lv.`);
    return;
}"
kLn4cZ1c,Cruise Ship,Spocoman,C++,Saturday 7th of October 2023 05:26:48 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {

    string destination, cabinType;
    getline(cin, destination);
    getline(cin, cabinType);

    int overnights;
    cin >> overnights;

    double dayPrice = 0;

    if (destination == ""Mediterranean"") {
        if (cabinType == ""standard cabin"") {
            dayPrice = 27.50;
        }
        else if (cabinType == ""cabin with balcony"") {
            dayPrice = 30.20;
        }
        else {
            dayPrice = 40.50;
        }
    }
    else if (destination == ""Adriatic"") {
        if (cabinType == ""standard cabin"") {
            dayPrice = 22.99;
        }
        else if (cabinType == ""cabin with balcony"") {
            dayPrice = 25.00;
        }
        else {
            dayPrice = 34.99;
        }
    }
    else {
        if (cabinType == ""standard cabin"") {
            dayPrice = 23.00;
        }
        else if (cabinType == ""cabin with balcony"") {
            dayPrice = 26.60;
        }
        else {
            dayPrice = 39.80;
        }
    }

    double totalSum = dayPrice * 4 * overnights;
    if (overnights > 7) {
        totalSum *= 0.75;
    }

    printf(""Annie's holiday in the %s sea costs %.2f lv.\n"", destination.c_str(), totalSum);
    return 0;
}

РЕШЕНИЕ С ТЕРНАРЕН ОПЕРАТОР:

#include <iostream>
#include <string>

using namespace std;

int main() {

    string destination, cabinType;
    getline(cin, destination);
    getline(cin, cabinType);

    int overnights;
    cin >> overnights;

    double dayPrice =
        destination == ""Mediterranean"" ?
        (cabinType == ""standard cabin"" ? 27.50 : cabinType == ""cabin with balcony"" ? 30.20 : 40.50) :
        destination == ""Adriatic"" ?
        (cabinType == ""standard cabin"" ? 22.99 : cabinType == ""cabin with balcony"" ? 25.00 : 34.99) :
        (cabinType == ""standard cabin"" ? 23.00 : cabinType == ""cabin with balcony"" ? 26.60 : 39.80);

	double totalSum = dayPrice * 4 * overnights * (overnights > 7 ? 0.75 : 1);

    printf(""Annie's holiday in the %s sea costs %.2f lv.\n"", destination.c_str(), totalSum);
    return 0;
}"
0hXgKbWt,Сумма чисел,Yaniha,C#,Saturday 7th of October 2023 05:24:40 AM CDT,"using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web;
using static System.Net.Mime.MediaTypeNames;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int number = random.Next(1, 101);
            int sumNumbers = 0;
            int numberFive = 5;
            int numberThree = 3;

            Console.WriteLine($""Выпало число: {number}"");

            for (int i = 1; i <= number; i++)
            {
                if (i % numberThree == 0 || i % numberFive == 0)
                {
                    Console.WriteLine(i);
                    sumNumbers += i;
                }
            }

            Console.WriteLine($""Сумма этих чисел: {sumNumbers}"");

            Console.ReadKey();
        }
    }
}"
uFCtwQPP,Cruise Ship,Spocoman,C#,Saturday 7th of October 2023 05:10:51 AM CDT,"using System;

namespace CruiseShip
{
    class Program
    {
        static void Main(string[] args)
        {
            string destination = Console.ReadLine();
            string cabinType = Console.ReadLine();
            int overnights = int.Parse(Console.ReadLine());

            double dayPrice = 0;

            if (destination == ""Mediterranean"")
            {
                if (cabinType == ""standard cabin"")
                {
                    dayPrice = 27.50;
                }
                else if (cabinType == ""cabin with balcony"")
                {
                    dayPrice = 30.20;
                }
                else
                {
                    dayPrice = 40.50;
                }
            }
            else if (destination == ""Adriatic"")
            {
                if (cabinType == ""standard cabin"")
                {
                    dayPrice = 22.99;
                }
                else if (cabinType == ""cabin with balcony"")
                {
                    dayPrice = 25.00;
                }
                else
                {
                    dayPrice = 34.99;
                }
            }
            else
            {
                if (cabinType == ""standard cabin"")
                {
                    dayPrice = 23.00;
                }
                else if (cabinType == ""cabin with balcony"")
                {
                    dayPrice = 26.60;
                }
                else
                {
                    dayPrice = 39.80;
                }
            }

            double totalSum = dayPrice * 4 * overnights;
            if (overnights > 7)
            {
                totalSum *= 0.75;
            }
            Console.WriteLine($""Annie's holiday in the {destination} sea costs {totalSum:f2} lv."");
        }
    }
}

РЕШЕНИЕ С ТЕРНАРЕН ОПЕРАТОР:

using System;

namespace CruiseShip
{
    class Program
    {
        static void Main(string[] args)
        {
            string destination = Console.ReadLine();
            string cabinType = Console.ReadLine();
            int overnights = int.Parse(Console.ReadLine());

            double dayPrice =
                destination == ""Mediterranean"" ?
                (cabinType == ""standard cabin"" ? 27.50 : cabinType == ""cabin with balcony"" ? 30.20 : 40.50) :
               destination == ""Adriatic"" ?
               (cabinType == ""standard cabin"" ? 22.99 : cabinType == ""cabin with balcony"" ? 25.00 : 34.99) :
               (cabinType == ""standard cabin"" ? 23.00 : cabinType == ""cabin with balcony"" ? 26.60 : 39.80);

            double totalSum = dayPrice * 4 * overnights * (overnights > 7 ? 0.75 : 1);
           
            Console.WriteLine($""Annie's holiday in the {destination} sea costs {totalSum:f2} lv."");
        }
    }
}"
Ykp3Bcrm,LatihanDiskon,DerioFT,Java,Saturday 7th of October 2023 04:51:50 AM CDT,"import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class LatihanDiskon {

	public static void main(String[] args) throws IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		int harga_belanja = 0;
		int total_belanja = 0;
		int jumlah = 0;
		int diskon = 0;
		
		System.out.print(""Masukkan Harga = "");
		harga_belanja = Integer.parseInt(br.readLine());
		
		System.out.print(""Masukkan Jumlah = "");
		jumlah = Integer.parseInt(br.readLine());
		
		total_belanja = jumlah * harga_belanja;
		
		if (total_belanja > 350000) {
			diskon = total_belanja * 5/100;	
		}
		
		else if (total_belanja < 200000) {
			diskon = total_belanja * 25/1000;
		}
		
		else {
			diskon = 0;
		}
		
		System.out.println(""Total \t= Rp. "" + total_belanja + "",-"");
		System.out.println(""Diskon \t= Rp. "" + diskon + "",-"");
		System.out.println(""Total Bayar \t= Rp. "" + (total_belanja - diskon) + "",-"");	
	}
}"
WKDaLyGk,negext_vk_deep_py,tmlnv,Python,Saturday 7th of October 2023 04:16:08 AM CDT,"class NegExt:
    def __neg__(self):
        if hasattr(super(), ""__neg__""):
            return self.__class__(-super().__int__())

        elif hasattr(super(), ""__getitem__"") and isinstance(self, (str, list, tuple)):
            return self.__class__(super().__getitem__(slice(1, -1)))

        else:
            return self


class nnum(NegExt, int):
    pass


class nstr(NegExt, str):
    def __init__(self, value):
        super().__init__()

        self._value = value

    def __getitem__(self, item):
        return self._value.__getitem__(item)

    def __len__(self):
        return len(self._value)

    def __str__(self):
        return self._value


class ndict(NegExt, dict):
    pass
"
EwkH58HP,MP09_UF1_EJ10,Mike7GB,Java,Saturday 7th of October 2023 03:48:41 AM CDT,"// EJERCICIO 10

****************
----- MAIN -----
****************
        
import static com.mycompany.ejercicio10.Funciones.*;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.Scanner;

public class Ejercicio10 {

    public static void main(String[] args) throws UnsupportedEncodingException {
        
        // Variables
        Scanner sc = new Scanner(System.in);
        File f;
        File f2;
        String fileName;
        String path;
        int opcion;
        boolean finalizar = false;
        byte[] mensaje;
        byte[] msjCifrado;
        byte[] msjDescifrado;
        String strMsj;
        
        crearKey();
        
        System.out.println(""****DES-CIFRADOR****\n"");
        System.out.println(""Este programa le permite cifrar sus archivos"");
        System.out.println(""para proteger su información de agentes externos"");
        System.out.println(""Podrá también descifrar la información que haya"");
        System.out.println(""sido cifrada mediante este programa.\n"");
        
        System.out.println(""A continuación elija una opción del menú:"");
        
        do{
            
            System.out.println(""-------------------------------------------"");   
            System.out.println(""Opción 1: Cifrar"");
            System.out.println(""Opción 2: Descifrar"");
            System.out.println(""Opción 3: Salir"");
            System.out.println(""-------------------------------------------"");   
            
            opcion = sc.nextInt();
            sc.nextLine();
                        
            switch(opcion){
                // CIFRAR
                case 1 ->{
                    // Pedir input al usuario
                    System.out.println(""\nIndique la ruta del archivo: "");
                    path = sc.nextLine();
                    
                    System.out.println(""\nIndique el nombre del archivo: "");
                    fileName = sc.nextLine();
                    
                    // Instanciar objeto File para la lectura.
                    f = crearArchivo(path, fileName);
                    
                    // Leer objeto File y almacenar contenido en variable mensaje
                    mensaje = leerArchivo(f);
                    
                    // Cifrar mensaje
                    msjCifrado = cifrarMensaje(mensaje);
                    System.out.println(""\nMensaje cifrado correctamente."");
                    
                    // Instanciar objeto File para escribir el mensaje cifrado
                    System.out.println(""\nIndique la ruta del nuevo archivo cifrado: "");
                    path = sc.nextLine();
                    
                    System.out.println(""\nIndique el nombre del archivo: "");
                    fileName = sc.nextLine();
                    
                    f2 = crearArchivo(path,fileName);                      
                    
                    // Escribir mensaje cifrado en objeto File
                    escribirArchivo(f2, msjCifrado);
                    System.out.println(""\nMensaje cifrado guardado en "" + f2.getName());
                    
                }
                // DESCIFRAR
                case 2 ->{
                    // Pedir input al usuario
                    System.out.println(""\nIndique la ruta del archivo: "");
                    path = sc.nextLine();
                    
                    System.out.println(""\nIndique el nombre del archivo: "");
                    fileName = sc.nextLine();
                    
                    // Instanciar objeto File para la lectura.
                    f = crearArchivo(path, fileName);
                    
                    // Leer objeto File y almacenar contenido en String mensaje
                    mensaje = leerArchivo(f);
                    
                    // Descifrar mensaje
                    msjDescifrado = descifrarMensaje(mensaje);
                    System.out.println(""\nMensaje descifrado correctamente."");
                    
                    // Convertir bytes[] en String con codificación UTF-8
                    strMsj = new String(msjDescifrado, ""UTF-8"");
                    
                    System.out.println(""\nContenido del mensaje descifrado:\n"");
                    System.out.println(strMsj);
                    
                }
                case 3 ->{
                    // Código de finalización
                    finalizar = true;
                }
                default -> {}
            }  
            
        }while(!finalizar);
        
        System.out.println(""El programa ha finalizado."");
        
        
    }
}

*******************
---- FUNCIONES ----
*******************

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.*;

public class Funciones {

    // Variables
    private static File f;
    private static FileOutputStream fos;
    private static KeyGenerator keygen;
    private static SecretKey key;
    private static Cipher desCipher;
    private static byte[] lectura;
    private static byte[] msjCifrado;
    private static byte[] msjDescifrado;

    // Función CREAR ARCHIVO
    public static File crearArchivo(String path, String fileName) {

        // Añadir extensión al nombre
        fileName += "".txt"";
        // Concatenar ruta con nombre del archivo
        path += fileName;
        // Instanciar objeto File
        f = new File(path);

        return f;
    }

    // Función LEER ARCHIVO
    public static byte[] leerArchivo(File f) {    
              
        lectura = null;
        try {
            Path ruta = Paths.get(f.getPath());
            lectura = Files.readAllBytes(ruta);
            
        } catch (IOException ex) {
            Logger.getLogger(Funciones.class.getName()).log(Level.SEVERE, null, ex);
        }

        return lectura;

    }

    // Función ESCRIBIR ARCHIVO   
    public static void escribirArchivo(File f, byte[] contenido) {

        try {

            fos = new  FileOutputStream(f,true);
            fos.write(contenido);
            fos.close();

        } catch (IOException e) {
            Logger.getLogger(Funciones.class.getName()).log(Level.SEVERE, null, e);
        }

    }

    // Función CREAR KEY
    public static void crearKey() {

        try {
            // Generar key simétrica para DES
            keygen = KeyGenerator.getInstance(""DES"");
            // Aplicar opacidad a la key
            key = keygen.generateKey();
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Funciones.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    // Función ENCRIPTAR  
    public static byte[] cifrarMensaje(byte[] mensaje) {

        try {
            // Activar cifrador DES
            desCipher = Cipher.getInstance(""DES"");
            // Activar cifrador DES con la key
            desCipher.init(Cipher.ENCRYPT_MODE, key);
            // Cifrar
            msjCifrado = desCipher.doFinal(mensaje);

        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException ex) {
            Logger.getLogger(Funciones.class.getName()).log(Level.SEVERE, null, ex);
        }

        return msjCifrado;
    }

    // Función DESENCRIPTAR
    public static byte[] descifrarMensaje(byte[] mensaje) {

        try {
            // Activar cifrador DES
            desCipher = Cipher.getInstance(""DES"");
            // Activar cifrador DES con la key
            desCipher.init(Cipher.DECRYPT_MODE, key);
            // Descifrar
            msjDescifrado = desCipher.doFinal(mensaje);

        } catch (InvalidKeyException | IllegalBlockSizeException | BadPaddingException | NoSuchAlgorithmException | NoSuchPaddingException ex) {
            Logger.getLogger(Funciones.class.getName()).log(Level.SEVERE, null, ex);
        }

        return msjDescifrado;
    }

}
"
WnQNQcvN,snowybot good,coinwalk,JavaScript,Saturday 7th of October 2023 03:41:32 AM CDT,"
var smiley = parseFloat(document.getElementById('pct_balance').value);
var dive = 8000
var nudle = Number((smiley/dive).toFixed(7));
var chan = 9.9; 
var paymout = (99/chan)
var blert = nudle;
var taget = smiley;
var teget =100000;
var lemon = (nudle*50);
var burger = (nudle*34.5);
var chicken = (nudle*35.5);
var mighty = smiley;
var blueberry = ((Math.floor(smiley/lemon))*lemon);
var blackberry = ((Math.floor(smiley/lemon))*lemon);
var fart = 1;
var razzle = ((blert*1).toFixed(8));
var mojo = ((razzle*paymout)-razzle);
var bolance = smiley;
var hitz = smiley;
var krull = false;
var passion = 0;
var oniq = 34.5;
var uniq = 14.5;
var wons = parseFloat(document.getElementById('wins').innerHTML);
var vons = parseFloat(document.getElementById('wins').innerHTML);
var loms = parseFloat(document.getElementById('losses').innerHTML);
var loon = parseFloat(document.getElementById('losses').innerHTML);
var brother = smiley;
var beboon = true;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(blackberry+(blert*oniq))) {
    uniq = 24.5;
    oniq = 24.5;
    blert = blert*2;
    blackberry = parseFloat(bolance);
}
if (bolance<=(blackberry-(blert*uniq))) {
    blert = blert*2;
    uniq = 24.5;
    oniq = 24.5;
    fart = 0;
    blackberry = parseFloat(bolance);
}
if ((bolance>=(blueberry+(lemon*fart)))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
    blert = nudle;
    oniq = 34.5;
    uniq = 14.5;
    passion = 0;
    fart = 1;
    blackberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
}
    if (bolance>=teget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
razzle = (blert*1).toFixed(8);
$('#pct_chance').val(chan);
$('#pct_payout').val(paymout);
$('#pct_bet').val(razzle);
$('#a_lo').click();
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get();"
eWJi1xL2,fbtc,coinwalk,JavaScript,Saturday 7th of October 2023 03:37:30 AM CDT,"

var smmly = parseFloat(document.getElementById('balance').innerHTML);
var nudle = Number((0.00000001).toFixed(8));
var blert = nudle;
var taget = 1.0;
var bogs = (nudle*10);
var bpop = (nudle*6.5);
var piper = (nudle*7.5);
var stuff = (nudle*3.5);
var circuit = 0;
var sysch = ((Math.floor(smmly/bogs))*bogs);
var fatt = 1;
var lol = true;
var mighty = smmly;
var krull = false;
var sysch = ((Math.floor(smmly/bogs))*bogs);
var sunch = ((Math.floor(smmly/bogs))*bogs);
var sinch = ((Math.floor(smmly/bogs))*bogs);
var junky = smmly;
var bear = true;
var myseed;
var distj = ((blert*1).toFixed(8));
var zuggbe = ((blert*1).toFixed(8));
var nemo = parseFloat(document.getElementById('balance').innerHTML);
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 


function get(){
nemo = document.getElementById('balance').innerHTML;
if ((nemo>(((Math.floor(nemo/bogs))*bogs)+bpop))&&(nemo<(((Math.floor(nemo/bogs))*bogs)+piper))&&(nemo!=circuit)&&(nemo>sysch)) {
    blert = blert*2;
    circuit = parseFloat(nemo);
}
if ((nemo>(((Math.floor(nemo/bogs))*bogs)+bpop))&&(nemo<(((Math.floor(nemo/bogs))*bogs)+piper))&&(nemo!=circuit)&&(nemo<sysch)) {
    blert = blert*2;
    fatt = 0;
    circuit = parseFloat(nemo);
}
if ((nemo>=(sysch+(bogs*fatt)))&&(nemo<(((Math.floor(nemo/bogs))*bogs)+bpop))) { 
    blert = nudle;
    circuit = 0;
    fatt = 1;
    sysch = ((Math.floor((parseFloat(nemo))/bogs))*bogs);
}
    if (nemo >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
var xol = getR(1,3);
if (xol==1) {
myseed = (makeid(5));
}
if (xol==2) {
myseed = (makeid(7));
}
if (xol==3) {
myseed = (makeid(9));
}
zuggbe = ((blert*1).toFixed(8));
if ((nemo==junky)&&(bear)){
document.getElementById('next_client_seed').value = myseed;
document.getElementById('double_your_btc_win_chance').value = 47.50;
document.getElementById('double_your_btc_payout_multiplier').value = 2.00;
parseFloat(document.getElementById('double_your_btc_stake').value = zuggbe);
parseFloat(document.getElementById('win_amount').innerHTML = zuggbe);
document.getElementById('double_your_btc_bet_lo_button').click();
bear = false;
}
if ((nemo!=junky)&&(!bear)){
junky = parseFloat(nemo);
bear = true;
}
setTimeout(() => get(), 1);
}
get();"
D7J4zGBQ,ESPHome BT-LE tag tracker with battery,swamp_ig,YAML,Saturday 7th of October 2023 03:21:23 AM CDT,"esphome:
  name: ""garage-presence""
  friendly_name: ""garage-presence""
  platform: ESP32
  board: esp32dev

# Enable logging
logger:
  
# Enable Home Assistant API
api:
  encryption:
    key: ""*********""
  
ota:
  password: ""********""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    static_ip: 10.0.0.86
    gateway: 10.0.0.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ""Garage Presence Fallback Hotspot""
    password: ""*******""

captive_portal:

esp32_ble_tracker:
  id: ble_tracker_id
  scan_parameters:
    interval: 10s
    window: 1100ms
    active: false
## I used this bit to figure out which byte held the battery data, it was byte 1.
#  on_ble_advertise:
#  - mac_address: **:**:**:**:**:**
#    then:
#      - lambda: |-
#            for (auto data : x.get_service_datas()) 
#              ESP_LOGI(""main"", ""Data Update UUID: %s Data: %s"", data.uuid.to_string().c_str(), format_hex_pretty(data.data).c_str());
  on_ble_service_data_advertise:
    - mac_address: **:**:**:**:**:**
      service_uuid: ""5242""
      then:
        - lambda: |-
            id(penny_mazda_battery).publish_state(x[1]);

binary_sensor:
  - platform: ble_presence
    mac_address: **:**:**:**:**:**
    id: penny_mazda
    name: ""Penny Mazda""
    device_class: ""presence""
    icon: mdi:car
    filters:
      - delayed_off: 30s
    on_press:
    - script.execute: ble_active_scan      

sensor:
  - platform: ble_rssi
    mac_address: **:**:**:**:**:**
    id: penny_mazda_rssi
    name: ""Penny Mazda RSSI""
    entity_category: ""diagnostic""
  - platform: template
    id: penny_mazda_battery
    name: ""Penny Mazda Battery""
    device_class: ""battery""
    unit_of_measurement: ""%""
    entity_category: ""diagnostic""
    accuracy_decimals: 0

script:
  - id: ble_active_scan
    mode: single
    then:
    - lambda: |-
        id(ble_tracker_id).stop_scan();
    - delay: 2s
    - lambda: |-
        id(ble_tracker_id).set_scan_active(true);
        id(ble_tracker_id).start_scan();
    - logger.log: 
        format: Active scan started
        level: INFO
    - delay: 30s
    - logger.log: 
        format: Active scan stopped
        level: INFO
    - lambda: |-
        id(ble_tracker_id).stop_scan();
    - delay: 2s
    - lambda: |-
        id(ble_tracker_id).set_scan_active(false);
        id(ble_tracker_id).start_scan();

interval:
  - interval: 10min
    then:
    - script.execute: ble_active_scan

button:
  - platform: template
    name: ""BLE Active Scan""
    id: run_active_scan
    on_press:
    - script.execute: ble_active_scan"
ZDvCR5St,Hannah.Arendt.2012.720p.h264.aac.Subs-bp,bpmircea,BrainFuck,Saturday 7th of October 2023 02:30:36 AM CDT,"Hannah Arendt (Hannah Arendt) (Margarethe von Trotta, 2012)
aka
Hannah.Arendt.2012.720p.h264.aac.Subs-bp
https://www.imdb.com/title/tt1674773/

Uploading..."
rc3D1pjX,snowybot good,coinwalk,JavaScript,Saturday 7th of October 2023 01:42:16 AM CDT,"
var smiley = parseFloat(document.getElementById('pct_balance').value);
var dive = 8000
var nudle = Number((smiley/dive).toFixed(7));
var chan = 9.9; 
var paymout = (99/chan)
var blert = nudle;
var taget = smiley;
var teget =100000;
var lemon = (nudle*50);
var burger = (nudle*34.5);
var chicken = (nudle*35.5);
var mighty = smiley;
var blueberry = ((Math.floor(smiley/lemon))*lemon);
var blackberry = ((Math.floor(smiley/lemon))*lemon);
var fart = 1;
var razzle = ((blert*1).toFixed(8));
var mojo = ((razzle*paymout)-razzle);
var bolance = smiley;
var hitz = smiley;
var krull = false;
var passion = 0;
var oniq = 34.5;
var uniq = 14.5;
var wons = parseFloat(document.getElementById('wins').innerHTML);
var vons = parseFloat(document.getElementById('wins').innerHTML);
var loms = parseFloat(document.getElementById('losses').innerHTML);
var loon = parseFloat(document.getElementById('losses').innerHTML);
var brother = smiley;
var beboon = true;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(blackberry+(blert*oniq))) {
    uniq = 24.5;
    oniq = 24.5;
    blert = blert*2;
    passion = parseFloat(bolance);
}
if (bolance<=(blackberry-(blert*uniq))) {
    blert = blert*2;
    uniq = 24.5;
    oniq = 24.5;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>=(blueberry+(lemon*fart)))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
    blert = nudle;
    oniq = 34.5;
    uniq = 14.5;
    passion = 0;
    fart = 1;
    blackberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
}
    if (bolance>=teget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
razzle = (blert*1).toFixed(8);
$('#pct_chance').val(chan);
$('#pct_payout').val(paymout);
$('#pct_bet').val(razzle);
$('#a_lo').click();
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get();"
UFWLR4Jx,Client,LEGEND2004,Python,Saturday 7th of October 2023 01:01:22 AM CDT,"import asyncio
import random

header = 1024
ip, port = 'localhost', 8888

# Define a simple XOR-based encryption and decryption function
def simple_xor_encrypt(message, key):
    encrypted_message = bytearray()
    for char in message.encode():
        encrypted_char = char ^ key
        encrypted_message.append(encrypted_char)
    return encrypted_message.decode()

def simple_xor_decrypt(encrypted_message, key):
    decrypted_message = bytearray()
    for char in encrypted_message.encode():
        decrypted_char = char ^ key
        decrypted_message.append(decrypted_char)
    return decrypted_message.decode()

async def send_message(writer, message, key):
    encrypted_message = simple_xor_encrypt(message, key)
    writer.write(encrypted_message.encode())
    await writer.drain()

async def receive_message(reader, key):
    data = await reader.read(header)
    decrypted_message = simple_xor_decrypt(data.decode(), key)
    return decrypted_message.strip()

async def user_input(writer, key):
    while True:
        message = input()
        await send_message(writer, message, key)

async def main():
    reader, writer = await asyncio.open_connection(ip, port)
    encryption_key = 42  # Replace with your own encryption key (must match the server)
    print(""Connected to the server. Start chatting:"")
    
    try:
        asyncio.create_task(user_input(writer, encryption_key))
        
        while True:
            message = await receive_message(reader, encryption_key)
            print(message)
            
    except KeyboardInterrupt:
        print(""Disconnected from the server."")
        writer.close()
        await writer.wait_closed()

if __name__ == ""__main__"":
    asyncio.run(main())
"
N1zrh1z8,Server,LEGEND2004,Python,Saturday 7th of October 2023 01:00:01 AM CDT,"import asyncio
import random
from enum import Enum

class Options(Enum):
    CREATE = 1
    SELECT = 2

clients = {}  # {'id': {'name': ""bob"", 'writer': <writer>, 'chatroom_id': ""1""}}
chatrooms = {
    'default_chatroom_id': ""test""
}  # {'chatroom_id': 'chatroom_name'}
header = 1024
ip, port = 'localhost', 8888

# Define a simple XOR-based encryption and decryption function
def simple_xor_encrypt(message, key):
    encrypted_message = bytearray()
    for char in message.encode():
        encrypted_char = char ^ key
        encrypted_message.append(encrypted_char)
    return encrypted_message.decode()

def simple_xor_decrypt(encrypted_message, key):
    decrypted_message = bytearray()
    for char in encrypted_message.encode():
        decrypted_char = char ^ key
        decrypted_message.append(decrypted_char)
    return decrypted_message.decode()

async def send_message(writer, message, key):
    encrypted_message = simple_xor_encrypt(message, key)
    writer.write(encrypted_message.encode())
    await writer.drain()

class Client:
    def __init__(self, writer="""", reader=""""):
        self.id = ""usr"" + str(random.random())
        self.writer = writer
        self.reader = reader
        self.name = """"
        self.chatroom_id = """"
        self.client_address = writer.get_extra_info('peername')
        print(f""New connection from {self.client_address}"")

    def get_user_profile(self):
        return {'name': self.name, 'chatroom_id': self.chatroom_id, 'writer': self.writer}

    async def broadcast_to_all(self, message, key):
        for user_id, values in clients.items():
            if user_id != self.id:
                await send_message(values['writer'], f""{message}"", key)

    async def multicast_to_chat(self, message, key):
        for user_id, values in clients.items():
            if user_id != self.id and values['chatroom_id'] == self.chatroom_id:
                await send_message(values['writer'], f""{message}"", key)

    async def send_message(self, message, key):
        encrypted_message = simple_xor_encrypt(message, key)
        self.writer.write(encrypted_message.encode())
        await self.writer.drain()

    async def receive_message(self, key):
        data = await self.reader.read(header)
        decrypted_message = simple_xor_decrypt(data.decode(), key)
        return decrypted_message.strip()

    async def client_req_and_res(self, message, key):
        await self.send_message(message, key)
        return await self.receive_message(key)

    async def remove_client(self, key):
        del clients[self.id]
        await self.multicast_to_chat(f""{self.name} has left the chat!\n"", key)
        self.writer.close()
        await self.writer.wait_closed()
        print(f""Connection closed for {self.client_address}"")

    async def choose_name(self, key):
        self.name = await self.client_req_and_res(""Welcome to the chatroom! Please enter your name: \n"", key)
        print(f""{self.name} has joined the server"")

    async def choose_chat(self, key):
        option = """"
        while option not in [Options.CREATE, Options.SELECT]:
            chatroom_names = ""\n"".join(chatrooms.values())
            option = await self.client_req_and_res(f""\n1. Create a Chatroom\n2. Select a Chatroom:\n{chatroom_names}\n"", key)
            try:
                option = Options(int(option))  # Convert user input to enum
            except ValueError:
                option = None
            print(f""{option} is chosen"")
        while True:
            if option == Options.CREATE:
                chatroom_name = await self.client_req_and_res(""Enter the name of a new chatroom: "", key)
                print(f""{chatroom_name} chatroom is created"")
                self.chatroom_id = ""cht"" + str(random.random())
                chatrooms[self.chatroom_id] = chatroom_name
                break
            elif option == Options.SELECT:
                chatroom_name = await self.client_req_and_res(""Enter the name of a chatroom: "", key)
                self.chatroom_id = find_id_by_name(chatroom_name, chatrooms)
                if not self.chatroom_id:
                    continue
                break
        await self.multicast_to_chat(f""\n{self.name} has joined the chat!\n"", key)
        print(f""{self.chatroom_id} chatroom is accessed on the server"")

    async def chat_with_others_in_room(self, key):
        while True:
            data = await self.reader.read(header)
            if data == b'\r\n':
                continue  # Skip empty messages
            decrypted_message = simple_xor_decrypt(data.decode(), key)
            message = f""{self.name}| {decrypted_message}""
            await self.multicast_to_chat(message, key)

async def handle_client(reader, writer):
    client = Client(writer, reader)
    await client.choose_name(encryption_key)
    await client.choose_chat(encryption_key)
    clients[client.id] = client.get_user_profile()
    try:
        await client.chat_with_others_in_room(encryption_key)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        print(f""Error handling client {client.name}: {e}"")
    finally:
        await client.remove_client(encryption_key)
        del client

async def main():
    server = await asyncio.start_server(handle_client, ip, port)
    async with server:
        await server.serve_forever()

if __name__ == ""__main__"":
    encryption_key = 42  # Replace with your own encryption key
    asyncio.run(main())
"
37d2VuxV,c9.9 snowybot good,coinwalk,JavaScript,Saturday 7th of October 2023 12:54:13 AM CDT,"
var smiley = parseFloat(document.getElementById('pct_balance').value);
var dive = 1440;
var nudle = Number((smiley/dive).toFixed(7));
var chan = 9.9; 
var paymout = (99/chan)
var blert = nudle;
var taget = smiley;
var teget =100000;
var lemon = (nudle*50);
var burger = (nudle*34.5);
var chicken = (nudle*35.5);
var mighty = smiley;
var blueberry = ((Math.floor(smiley/lemon))*lemon);
var blackberry = ((Math.floor(smiley/lemon))*lemon);
var fart = 1;
var razzle = ((blert*1).toFixed(8));
var mojo = ((razzle*paymout)-razzle);
var bolance = smiley;
var hitz = smiley;
var krull = false;
var passion = 0;
var oniq = 34.5;
var uniq = 14.5;
var wons = parseFloat(document.getElementById('wins').innerHTML);
var vons = parseFloat(document.getElementById('wins').innerHTML);
var loms = parseFloat(document.getElementById('losses').innerHTML);
var loon = parseFloat(document.getElementById('losses').innerHTML);
var brother = smiley;
var beboon = true;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if (bolance>(blackberry+(blert*oniq))) {
    uniq = 24.5;
    oniq = 24.5;
    blert = blert*2;
    passion = parseFloat(bolance);
}
if (bolance<=(blackberry-(blert*uniq))) {
    blert = blert*2;
    uniq = 24.5;
    oniq = 24.5;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>=(blueberry+(lemon*fart)))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
    blert = nudle;
    oniq = 34.5;
    uniq = 14.5;
    passion = 0;
    fart = 1;
    blackberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
}
    if (bolance>=teget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
razzle = (blert*1).toFixed(8);
$('#pct_chance').val(chan);
$('#pct_payout').val(paymout);
$('#pct_bet').val(razzle);
$('#a_lo').click();
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get();"
eVr6WMC4,found glitch,coinwalk,JavaScript,Saturday 7th of October 2023 12:33:02 AM CDT,"
var smiley = parseFloat(document.getElementById('pct_balance').value);
var dive = 1440;
var nudle = Number((smiley/dive).toFixed(7));
var chan = 9.9; 
var paymout = (99/chan)
var blert = nudle;
var taget = smiley;
var teget =100000;
var lemon = (nudle*100);
var burger = (nudle*69.5);
var chicken = (nudle*70.5);
var mighty = smiley;
var blueberry = ((Math.floor(smiley/lemon))*lemon);
var fart = 1;
var razzle = ((blert*1).toFixed(8));
var mojo = ((razzle*paymout)-razzle);
var bolance = smiley;
var hitz = smiley;
var krull = false;
var passion = 0;
var wons = parseFloat(document.getElementById('wins').innerHTML);
var vons = parseFloat(document.getElementById('wins').innerHTML);
var loms = parseFloat(document.getElementById('losses').innerHTML);
var loon = parseFloat(document.getElementById('losses').innerHTML);
var brother = smiley;
var beboon = true;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/lemon))*lemon)+burger))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+chicken))&&(bolance!=passion)&&(bolance>blueberry)) {
    blert = blert*2;
    passion = parseFloat(bolance);
}
if ((bolance>(((Math.floor(bolance/lemon))*lemon)+burger))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+chicken))&&(bolance!=passion)&&(bolance<blueberry)) {
    blert = blert*2;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>=(blueberry+(lemon*fart)))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
    blert = nudle;
    passion = 0;
    fart = 1;
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
}
    if (bolance>=teget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
razzle = (blert*1).toFixed(8);
$('#pct_chance').val(chan);
$('#pct_payout').val(paymout);
$('#pct_bet').val(razzle);
$('#a_lo').click();
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get();"
7M5wBgpQ,Длинные рецепты - оконные выражения (wo_pwd),DefconOne,PostgreSQL,Saturday 7th of October 2023 12:27:44 AM CDT,"WITH rec_mm_3_4_2022 AS 
     (SELECT ""ИД пациента"" AS patient_id_mm_3_4_2022, 
             ""Препарат по МНН"" AS drug_name_mm_3_4_2022, 
             ""Дата выписки рецепта"" AS date_mm_3_4_2022, 
             MIN(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"") AS min_date_mm_3_4_2022, 
             MAX(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"") AS max_date_mm_3_4_2022, 
             COUNT(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"") AS count_recipes_mm_3_4_2022, 
             MIN(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"", ""Препарат по МНН"") AS drug_min_date_mm_3_4_2022, 
             MAX(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"", ""Препарат по МНН"") AS drug_max_date_mm_3_4_2022, 
             COUNT(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"", ""Препарат по МНН"") AS count_drug_recipes_mm_3_4_2022
      FROM public.recipes
      WHERE mo_type LIKE 'Взрослая' 
            AND doctor_or_paramedic LIKE 'Врач'
            AND ""Дата выписки рецепта"" >= ''' + mm_3_4_2022_start + ''' 
            AND ""Дата выписки рецепта"" < ''' + mm_3_4_2022_end + '''
      ORDER BY ""ИД пациента""), 
     
     t_visits_mm_3_4_2022 AS 
     (SELECT ""ИД пациента"" AS patient_id_mm_3_4_2022_2, 
             COUNT(DISTINCT ""Дата выписки рецепта"") AS visits_mm_3_4_2022
      FROM public.recipes
      WHERE mo_type LIKE 'Взрослая' 
            AND doctor_or_paramedic LIKE 'Врач'
            AND ""Дата выписки рецепта"" >= ''' + mm_3_4_2022_start + ''' 
            AND ""Дата выписки рецепта"" < ''' + mm_3_4_2022_end + '''
      GROUP BY ""ИД пациента""), 
      
      total_2022 AS 
      (SELECT patient_id_mm_3_4_2022, 
              drug_name_mm_3_4_2022, 
              date_mm_3_4_2022, 
              min_date_mm_3_4_2022, 
              max_date_mm_3_4_2022, 
              count_recipes_mm_3_4_2022, 
              drug_min_date_mm_3_4_2022, 
              drug_max_date_mm_3_4_2022, 
              count_drug_recipes_mm_3_4_2022, 
              visits_mm_3_4_2022, 
              count_recipes_mm_3_4_2022 / visits_mm_3_4_2022 AS avg_rec_per_visit_mm_3_4_2022 --, 
       --     visits_mm_3_4_2022 / (max_date_mm_3_4_2022::date - min_date_mm_3_4_2022::date) AS avg_visits_per_day
       FROM rec_mm_3_4_2022
       JOIN t_visits_mm_3_4_2022 ON rec_mm_3_4_2022.patient_id_mm_3_4_2022 = t_visits_mm_3_4_2022.patient_id_mm_3_4_2022_2
       ORDER BY visits_mm_3_4_2022 DESC, 
                patient_id_mm_3_4_2022), 
      
      rec_mm_3_4_2023 AS 
      (SELECT ""ИД пациента"" AS patient_id_mm_3_4_2023, 
              ""Препарат по МНН"" AS drug_name_mm_3_4_2023, 
              ""Дата выписки рецепта"" AS date_mm_3_4_2023, 
              MIN(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"") AS min_date_mm_3_4_2023, 
              MAX(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"") AS max_date_mm_3_4_2023, 
              COUNT(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"") AS count_recipes_mm_3_4_2023, 
              MIN(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"", ""Препарат по МНН"") AS drug_min_date_mm_3_4_2023, 
              MAX(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"", ""Препарат по МНН"") AS drug_max_date_mm_3_4_2023, 
              COUNT(""Дата выписки рецепта"") OVER (PARTITION BY ""ИД пациента"", ""Препарат по МНН"") AS count_drug_recipes_mm_3_4_2023
       FROM public.recipes
       WHERE mo_type LIKE 'Взрослая' 
             AND doctor_or_paramedic LIKE 'Врач'
             AND ""Дата выписки рецепта"" >= ''' + mm_3_4_2023_start + ''' 
             AND ""Дата выписки рецепта"" < ''' + mm_3_4_2023_end + '''
       ORDER BY ""ИД пациента""), 
     
      t_visits_mm_3_4_2023 AS 
      (SELECT ""ИД пациента"" AS patient_id_mm_3_4_2023_2, 
              COUNT(DISTINCT ""Дата выписки рецепта"") AS visits_mm_3_4_2023
       FROM public.recipes
       WHERE mo_type LIKE 'Взрослая' 
             AND doctor_or_paramedic LIKE 'Врач'
             AND ""Дата выписки рецепта"" >= ''' + mm_3_4_2023_start + ''' 
             AND ""Дата выписки рецепта"" < ''' + mm_3_4_2023_end + '''
       GROUP BY ""ИД пациента""), 
      
      total_2023 AS 
      (SELECT patient_id_mm_3_4_2023, 
              drug_name_mm_3_4_2023, 
              date_mm_3_4_2023, 
              min_date_mm_3_4_2023, 
              max_date_mm_3_4_2023, 
              count_recipes_mm_3_4_2023, 
              drug_min_date_mm_3_4_2023, 
              drug_max_date_mm_3_4_2023, 
              count_drug_recipes_mm_3_4_2023, 
              visits_mm_3_4_2023, 
              count_recipes_mm_3_4_2023 / visits_mm_3_4_2023 AS avg_rec_per_visit_mm_3_4_2023 --, 
       --     visits_mm_3_4_2023 / (max_date_mm_3_4_2023::date - min_date_mm_3_4_2023::date) AS avg_visits_per_day
       FROM rec_mm_3_4_2023
       JOIN t_visits_mm_3_4_2023 ON rec_mm_3_4_2023.patient_id_mm_3_4_2023 = t_visits_mm_3_4_2023.patient_id_mm_3_4_2023_2
       ORDER BY visits_mm_3_4_2023 DESC, 
                patient_id_mm_3_4_2023), 
      
      agg AS 
      (SELECT patient_id_mm_3_4_2022, 
              drug_name_mm_3_4_2022, 
              TO_CHAR(min_date_mm_3_4_2022, 'YYYY-MM') AS min_mm_3_4_2022, 
              TO_CHAR(max_date_mm_3_4_2022, 'YYYY-MM') AS max_mm_3_4_2022, 
              count_recipes_mm_3_4_2022, 
              TO_CHAR(drug_min_date_mm_3_4_2022, 'YYYY-MM') AS drug_min_mm_3_4_2022, 
              TO_CHAR(drug_max_date_mm_3_4_2022, 'YYYY-MM') AS drug_max_mm_3_4_2022, 
              count_drug_recipes_mm_3_4_2022, 
              patient_id_mm_3_4_2023, 
              drug_name_mm_3_4_2023, 
              TO_CHAR(min_date_mm_3_4_2023, 'YYYY-MM') AS min_mm_3_4_2023, 
              TO_CHAR(max_date_mm_3_4_2023, 'YYYY-MM') AS max_mm_3_4_2023, 
              count_recipes_mm_3_4_2023, 
              TO_CHAR(drug_min_date_mm_3_4_2023, 'YYYY-MM') AS drug_min_mm_3_4_2023, 
              TO_CHAR(drug_max_date_mm_3_4_2023, 'YYYY-MM') AS drug_max_mm_3_4_2023, 
              count_drug_recipes_mm_3_4_2023
       FROM total_2022
       JOIN total_2023 ON total_2022.patient_id_mm_3_4_2022 = total_2023.patient_id_mm_3_4_2023
       ORDER BY count_drug_recipes_mm_3_4_2023 DESC), 
      
      tmp_mm_3_4_2022 AS 
      (SELECT patient_id_mm_3_4_2022 AS id, 
              drug_name_mm_3_4_2022 AS drug_name, 
              min_mm_3_4_2022 AS start_year_mm, 
              count_recipes_mm_3_4_2022 AS count_recipes, 
              count_drug_recipes_mm_3_4_2022 AS count_drug_recipes, 
              (((''' + mm_3_4_2022_end + '''::DATE - ''' + mm_3_4_2022_start + '''::DATE) / 365.25 * 12) / count_recipes_mm_3_4_2022) AS INTERVAL, 
              (((''' + mm_3_4_2022_end + '''::DATE - ''' + mm_3_4_2022_start + '''::DATE) / 365.25 * 12) / count_drug_recipes_mm_3_4_2022) AS interval_by_drugs
       FROM agg
       ORDER BY count_drug_recipes_mm_3_4_2022 DESC, 
                INTERVAL DESC, 
                drug_name_mm_3_4_2022, 
                patient_id_mm_3_4_2022
       LIMIT 12), 
      
      tmp_mm_3_4_2023 AS 
      (SELECT patient_id_mm_3_4_2023 AS id, 
              drug_name_mm_3_4_2023 AS drug_name, 
              min_mm_3_4_2023 AS start_year_mm, 
              count_recipes_mm_3_4_2023 AS count_recipes, 
              count_drug_recipes_mm_3_4_2023 AS count_drug_recipes, 
              (((''' + mm_3_4_2023_end + '''::DATE - ''' + mm_3_4_2023_start + '''::DATE) / 365.25 * 12) / count_recipes_mm_3_4_2023) AS INTERVAL, 
              (((''' + mm_3_4_2023_end + '''::DATE - ''' + mm_3_4_2023_start + '''::DATE) / 365.25 * 12) / count_drug_recipes_mm_3_4_2023) AS interval_by_drugs
       FROM agg
       ORDER BY count_drug_recipes_mm_3_4_2023 DESC, 
                INTERVAL DESC, 
                drug_name_mm_3_4_2023, 
                patient_id_mm_3_4_2023
       LIMIT 12)
                 
SELECT *
FROM tmp_mm_3_4_2022
                 
UNION ALL
                 
SELECT *
FROM tmp_mm_3_4_2023;"
b57tYuS5,c9.9 snowybot good,coinwalk,JavaScript,Saturday 7th of October 2023 12:25:54 AM CDT,"
var smiley = parseFloat(document.getElementById('pct_balance').value);
var dive = 1440;
var nudle = Number((smiley/dive).toFixed(7));
var chan = 9.9; 
var paymout = (99/chan)
var blert = nudle;
var taget = smiley;
var teget =100000;
var lemon = (nudle*100);
var burger = (nudle*69.5);
var chicken = (nudle*70.5);
var mighty = smiley;
var blueberry = ((Math.floor(smiley/lemon))*lemon);
var fart = 1;
var razzle = ((blert*1).toFixed(8));
var mojo = ((razzle*paymout)-razzle);
var bolance = smiley;
var hitz = smiley;
var krull = false;
var passion = 0;
var wons = parseFloat(document.getElementById('wins').innerHTML);
var vons = parseFloat(document.getElementById('wins').innerHTML);
var loms = parseFloat(document.getElementById('losses').innerHTML);
var loon = parseFloat(document.getElementById('losses').innerHTML);
var brother = smiley;
var beboon = true;
 
function get(){
console.clear();
bolance = document.getElementById('pct_balance').value;
if ((bolance>(((Math.floor(bolance/lemon))*lemon)+burger))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+chicken))&&(bolance!=passion)&&(bolance>blueberry)) {
    blert = blert*2;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>(((Math.floor(bolance/lemon))*lemon)+burger))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+chicken))&&(bolance!=passion)&&(bolance<blueberry)) {
    blert = blert*2;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>=(blueberry+(lemon*fart)))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
    blert = nudle;
    passion = 0;
    fart = 1;
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
}
  if ((bolance>=(taget*2))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
nudle = Number(((parseFloat(bolance))/1440).toFixed(7));
lemon = (nudle*100);
burger = (nudle*69.5);
chicken = (nudle*70.5);
    blert = nudle;
    fart = 1;
    passion = 0;
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
taget = parseFloat(bolance);
}
    if (bolance>=teget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
var fizzle = parseFloat(blert);
razzle = (fizzle*1).toFixed(8);
$('#pct_chance').val(chan);
$('#pct_payout').val(paymout);
$('#pct_bet').val(razzle);
$('#a_lo').click();
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get();"
7FF8qcCX,CoC Nvim for C development.,root3r0x,Bash,Friday 6th of October 2023 10:58:55 PM CDT,"1.- Install Vim-Plug

#PowerShell
iwr -useb https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim |`
    ni $HOME/vimfiles/autoload/plug.vim -Force

#Neovim
sh -c 'curl -fLo ""${XDG_DATA_HOME:-$HOME/.local/share}""/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

2.- Add a vim-plug section to your ~/.vimrc (or stdpath('config') . '/init.vim' for Neovim)

    Begin the section with call plug#begin([PLUGIN_DIR])
    List the plugins with Plug commands
    call plug#end() to update &runtimepath and initialize plugin system
        Automatically executes filetype plugin indent on and syntax enable. You can revert the settings after the call. e.g. filetype indent off, syntax off, etc.

Example:

call plug#begin()
Plug 'tpope/vim-sensible'
call plug#end()

3.- Run PlugInstall in normal mode on nvim to install all the plugins list on the init.vim

4.- install Node.js. coc.nvim and coc-clangd run on Node.js.

5.- install coc.nvim. 

	Instructions using vim-plug (check out coc.nvim Wiki other options):
		add to .vimrc: 
			vim Plug 'neoclide/coc.nvim', {'branch': 'release'}
    	in vim, run 
			:PlugInstall

	in vim, run 
		:CocInstall coc-clangd

	if the clangd is not installed run:
		:CocCommand clangd.install
	and coc will install it automatically."
QNcQmk4h,c9.9 snowybot good,coinwalk,JavaScript,Friday 6th of October 2023 10:47:46 PM CDT,"var smiley = parseFloat(document.getElementById('pct_balance').value);
var dive = 14400;
var nudle = Number((smiley/dive).toFixed(7));
var chan = 9.9; 
var paymout = (99/chan)
var blert = nudle;
var taget = smiley;
var teget =100000;
var lemon = (nudle*100);
var burger = (nudle*69.5);
var chicken = (nudle*70.5);
var mighty = smiley;
var blueberry = ((Math.floor(smiley/lemon))*lemon);
var fart = 1;
var razzle = ((blert*1).toFixed(8));
var mojo = ((razzle*paymout)-razzle);
var bolance = smiley;
var hitz = smiley;
var krull = false;
var passion = 0;
var wons = parseFloat(document.getElementById('wins').innerHTML);
var vons = parseFloat(document.getElementById('wins').innerHTML);
var loms = parseFloat(document.getElementById('losses').innerHTML);
var loon = parseFloat(document.getElementById('losses').innerHTML);
var brother = smiley;
var beboon = true;
 
function get(){
console.clear();
vons = document.getElementById('wins').innerHTML;
loon = document.getElementById('losses').innerHTML;
bolance = document.getElementById('pct_balance').value;
if ((bolance>hitz)&&(vons>wons)&&(beboon)){
hitz = parseFloat(bolance);
wons = parseFloat(vons);
}
if ((bolance<hitz)&&(loon>loms)&&(beboon)){
hitz = parseFloat(bolance);
loms = parseFloat(loon);
}
if ((vons>wons)&&(bolance<hitz)&&(beboon)){
console.log('bet not verified counted green on reds');
return;
}
if ((loon>loms)&(bolance>hitz)&&(beboon)){
console.log('bet not verified counted reds on green');
return;
}
if ((vons<wons)||(loon<loms)&&(beboon)){
console.log('bet not verified negative');
return;
}
if ((bolance>(((Math.floor(bolance/lemon))*lemon)+burger))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+chicken))&&(bolance!=passion)&&(bolance>blueberry)) {
    blert = blert*2;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>(((Math.floor(bolance/lemon))*lemon)+burger))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+chicken))&&(bolance!=passion)&&(bolance<blueberry)) {
    blert = blert*2;
    fart = 0;
    passion = parseFloat(bolance);
}
if ((bolance>=(blueberry+(lemon*fart)))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
    blert = nudle;
    passion = 0;
    fart = 1;
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
}
  if ((bolance>=(taget*2))&&(bolance<(((Math.floor(bolance/lemon))*lemon)+burger))) { 
nudle = Number(((parseFloat(bolance))/14400).toFixed(7));
lemon = (nudle*100);
burger = (nudle*69.5);
chicken = (nudle*70.5);
    blert = nudle;
    fart = 1;
    passion = 0;
    blueberry = ((Math.floor((parseFloat(bolance))/lemon))*lemon);
taget = parseFloat(bolance);
}
    if (bolance>=teget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
var fizzle = parseFloat(blert);
razzle = (fizzle*1).toFixed(8);
$('#pct_chance').val(chan);
$('#pct_payout').val(paymout);
$('#pct_bet').val(razzle);
$('#a_lo').click();
var good = ((bolance-smiley).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), 1);
}
get();"
W8eKCHhu,LeetCode 125 - Valid Palindrome - NeetCode solution,nathanwailes,Python,Friday 6th of October 2023 09:34:30 PM CDT,"class Solution:
    def isPalindrome(self, s: str) -> bool:
        l, r = 0, len(s) - 1
        
        while l < r:
            while l < r and not self.alphaNum(s[l]):
                l += 1
            while r > l and not self.alphaNum(s[r]):
                r -= 1
            if s[l].lower() != s[r].lower():
                return False
            l, r = l + 1, r - 1
        return True
    
    def alphaNum(self, c):
        return (ord('A') <= ord(c) <= ord('Z') or
                ord('a') <= ord(c) <= ord('z') or
                ord('0') <= ord(c) <= ord('9'))"
aAz1GJ0q,LeetCode 125 - Valid Palindrome - 2023.10.07 solution,nathanwailes,Python,Friday 6th of October 2023 09:29:26 PM CDT,"class Solution:
    def isPalindrome(self, s: str) -> bool:
        """""" Proposed solution: convert the string to lowercase, then have two pointers
        step inwards from the outside.
        """"""
        s = s.lower()

        # Have them start outside of the range of the word so that I don't need to consider the
        # first iteration as a special case.
        l = -1
        r = len(s)
        while l < r:
            l += 1
            r -= 1

            # have them step inwards until they're both on a new character
            # I need to consider 
            while l < r and not s[l].isalnum():
                l += 1
            while r > l and not s[r].isalnum():
                r -= 1
            
            # compare them
            if s[l] != s[r]:
                return False
        return True
"
tX6s8jk7,Spaghetti Finder,GannonRiley,C#,Friday 6th of October 2023 08:30:56 PM CDT,This is a test WOW :O SO cool.
6MBKj7Sa,Random Wallpaper Downloader Rev 3.1,nitestryker,Bash,Friday 6th of October 2023 08:20:22 PM CDT,"#!/bin/bash

##########################################
# Copyright 2023 nitestryker
# license GPL 3 (http://www.gnu.org/licenses/gpl.html)
###########################################

# Revison 3.1 

# This code calculates the MD5 hash of each downloaded image and stores it in your download_history.txt file
# When you attempt to download a new image, the script will check if the MD5 hash is already in the download history. If it is, the script will skip the download.


# Revison 3

# Added user-defined wallpaper resolution handling.
# Implemented a download history feature to record downloaded wallpapers.
# that checks the download history to avoid duplicate downloads.
# Added the ability for users to choose between random or keyword-based wallpaper downloads.


WALLPAPER_DIR=""/home/username/Pictures""

# Define the desired resolution (e.g., 1920x1080) for both random and keyword downloads
DESIRED_RESOLUTION=""1920x1080""

# Path to the download history file
DOWNLOAD_HISTORY_FILE=""$WALLPAPER_DIR/download_history.txt""

# Function to download the wallpaper with a specific keyword or random
download_wallpaper() {
    # Generate a unique filename based on the current timestamp
    UNIQUE_FILENAME=""wallpaper_$(date +'%Y%m%d%H%M%S').jpg""

    if [ ""$DOWNLOAD_MODE"" == ""random"" ]; then
        # Download a random image from Unsplash
        IMAGE_URL=$(curl -Ls -w %{url_effective} -o /dev/null ""https://source.unsplash.com/random/$DESIRED_RESOLUTION"")
    elif [ ""$DOWNLOAD_MODE"" == ""keyword"" ]; then
        # Download an image with the specified keyword
        IMAGE_URL=$(curl -Ls -w %{url_effective} -o /dev/null ""https://source.unsplash.com/featured/$DESIRED_RESOLUTION/?$KEYWORD"")
    else
        echo ""Invalid download mode: $DOWNLOAD_MODE""
        return 1
    fi

    # Calculate the MD5 hash of the image
    IMAGE_HASH=$(curl -Lf ""$IMAGE_URL"" | md5sum | awk '{print $1}')

    # Check if the image hash is already in the download history
    if grep -q ""$IMAGE_HASH"" ""$DOWNLOAD_HISTORY_FILE""; then
        echo ""Skipping already downloaded wallpaper: $IMAGE_URL""
        return 0
    fi

    # Save the image to the wallpaper directory with the unique filename
    curl -Lf ""$IMAGE_URL"" > ""$WALLPAPER_DIR/$UNIQUE_FILENAME""

    # Append the image hash to the download history file
    echo ""$IMAGE_HASH"" >> ""$DOWNLOAD_HISTORY_FILE""

    # Increment the downloaded wallpaper counter
    ((DOWNLOADED_WALLPAPERS++))
}

# Function to show countdown timer
show_countdown() {
    for ((i = SLEEP_DURATION; i >= 0; i--)); do
        printf ""\rDownloading wallpaper %d of %d... Time left: %02d:%02d "" ""$DOWNLOADED_WALLPAPERS"" ""$MAX_WALLPAPERS"" $((i / 60)) $((i % 60))
        sleep 1
    done
    echo """"
}

# Create the directory if it doesn't exist
if [ ! -d ""$WALLPAPER_DIR"" ]; then
    mkdir ""$WALLPAPER_DIR""
fi

# Create the download history file if it doesn't exist
touch ""$DOWNLOAD_HISTORY_FILE""

# Set the initial value of the downloaded wallpaper counter to 0
DOWNLOADED_WALLPAPERS=0

# Ask the user to choose the download mode (random or keyword)
read -p ""Choose download mode (random/keyword): "" DOWNLOAD_MODE

# Depending on the chosen mode, ask for the keyword
if [ ""$DOWNLOAD_MODE"" == ""keyword"" ]; then
    read -p ""Enter keyword for wallpapers: "" KEYWORD
fi

# Ask the user to input the maximum number of wallpapers to download
read -p ""Enter the maximum number of wallpapers to download (default: 100): "" MAX_WALLPAPERS

# If the user didn't enter any value, set the default value to 100
MAX_WALLPAPERS=${MAX_WALLPAPERS:-100}

# Ask the user to input the sleep duration in seconds
read -p ""Enter the sleep duration in seconds between downloading wallpapers (default: 300): "" SLEEP_DURATION

# If the user didn't enter any value, set the default value to 300 seconds (5 minutes)
SLEEP_DURATION=${SLEEP_DURATION:-300}

# Main loop
while [ ""$DOWNLOADED_WALLPAPERS"" -lt ""$MAX_WALLPAPERS"" ]; do
    # Download the wallpaper based on the chosen mode (random or keyword)
    download_wallpaper

    # Show a notice and countdown before sleeping
    echo ""Downloading wallpaper $DOWNLOADED_WALLPAPERS of $MAX_WALLPAPERS...""
    show_countdown
done

# Exit the script once the maximum number of wallpapers is downloaded
echo ""Maximum number of wallpapers ($MAX_WALLPAPERS) downloaded. Exiting...""
"
bu7xRFfX,psrogues,devinteske,Bash,Friday 6th of October 2023 08:01:57 PM CDT,"#!/bin/sh
ps axo pid,ppid,comm | awk '
	BEGIN {
		getline # remove header
		ign[""containerd-shim""]
		ign[""sge_execd""]
		ign[""sge_shepherd""]
		ign[""squashfuse_ll""]
	}
	$2 == 1 && !($3 in ign) { print (pid = $1) }
' | xargs -r ps o pid,command | awk -v skip=$$ '
	BEGIN {
		getline # header
		match($0, /COMMAND/) # column
		comm = RSTART # position
	}
	function pstree(pid,        cmd, line, child, sp)
	{
		sp = """"
		cmd = sprintf(""pstree -ap %d"", pid)
		while (cmd | getline line > 0) {
			if (sp != """") {
				if (substr(line, 1, length(sp)) == sp) continue
				else sp = """"
			}
			if (!match(line, /,[0-9]+/)) continue
			child = substr(line, RSTART + 1, RLENGTH - 1)
			if (child == skip) {
				skip = 0
				sp = line
				gsub(/[`-].*/, """", sp)
			} else print child
			line = substr(line, RSTART + RLENGTH)
		}
		close(cmd)
	}
	{ print pstree(pid = $1) }
' | xargs -r ps fo pid,uid | awk '
	BEGIN { getline } # remove header
	$2 > 1000 { print $1 }
' | xargs -r ps ${*:-uf}"
d4EcKHT8,Next Greater Element,jayati,C++,Friday 6th of October 2023 07:56:03 PM CDT,"//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to find the next greater element for each element of the array.
    vector<long long> nextLargerElement(vector<long long> arr, int n){
        // Your code here
        stack<long long> s;
        vector<long long> ans(n,0);
        
        for(int i=0;i<arr.size();i++)
        {
            
            if(s.empty())
            {
                s.push(i);
                continue;
            }
            while(!s.empty() && arr[s.top()]<arr[i])
            {
                ans[s.top()]=arr[i];
                s.pop();
            }
            s.push(i);
            
        }
        while(!s.empty())
        {
            ans[s.top()]=-1;
            s.pop();
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        
        int n;
        cin>>n;
        vector<long long> arr(n);
        for(int i=0;i<n;i++)
            cin>>arr[i];
        
        Solution obj;
        vector <long long> res = obj.nextLargerElement(arr, n);
        for (long long i : res) cout << i << "" "";
        cout<<endl;
    }
	return 0;
}
// } Driver Code Ends"
mp9jckhc,FortifyServiceProvider.php,agungpf16,PHP,Friday 6th of October 2023 07:32:58 PM CDT,"<?php

namespace App\Providers;

use Inertia\Inertia;
use Illuminate\Http\Request;
use Laravel\Fortify\Fortify;
use App\Actions\Fortify\CreateNewUser;
use Illuminate\Support\ServiceProvider;
use Illuminate\Cache\RateLimiting\Limit;
use App\Actions\Fortify\ResetUserPassword;
use App\Actions\Fortify\UpdateUserPassword;
use Illuminate\Support\Facades\RateLimiter;
use App\Actions\Fortify\UpdateUserProfileInformation;
use App\Http\Responses\LogoutResponse;

class FortifyServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     *
     * @return void
     */
    public function register()
    {
        //
    }

    /**
     * Bootstrap any application services.
     *
     * @return void
     */
    public function boot()
    {
        Fortify::createUsersUsing(CreateNewUser::class);
        Fortify::updateUserProfileInformationUsing(UpdateUserProfileInformation::class);
        Fortify::updateUserPasswordsUsing(UpdateUserPassword::class);
        Fortify::resetUserPasswordsUsing(ResetUserPassword::class);

        RateLimiter::for('login', function (Request $request) {
            $email = (string) $request->email;

            return Limit::perMinute(5)->by($email . $request->ip());
        });

        RateLimiter::for('two-factor', function (Request $request) {
            return Limit::perMinute(5)->by($request->session()->get('login.id'));
        });

        //login
        Fortify::loginView(function () {
            return Inertia::render('Auth/Login');
        });

        /**
         * logout
         */
        $this->app->singleton(\Laravel\Fortify\Contracts\LogoutResponse::class, \App\Http\Responses\LogoutResponse::class);
    }
}
"
Y1YXTC5M,LogoutResponse.php,agungpf16,PHP,Friday 6th of October 2023 07:32:05 PM CDT,"<?php

namespace App\Http\Responses;

use Laravel\Fortify\Contracts\LogoutResponse as LogoutResponseContract;

class LogoutResponse implements LogoutResponseContract
{

    /**
     * toResponse
     *
     * @param  mixed $request
     * @return void
     */
    public function toResponse($request)
    {
        return redirect('/');
    }
}
"
5jaN05Cp,2023-10-06_stats.json,rdp_snitch,JSON,Friday 6th of October 2023 07:18:24 PM CDT,"{
  ""ip"": {
    ""155.138.239.107"": 12,
    ""144.202.76.214"": 6,
    ""149.28.205.197"": 24,
    ""216.128.131.244"": 21,
    ""149.28.247.226"": 15,
    ""108.61.193.197"": 21,
    ""45.76.62.108"": 24,
    ""155.138.225.132"": 15,
    ""193.142.146.17"": 9,
    ""193.142.147.9"": 9,
    ""143.42.70.229"": 3,
    ""80.66.88.37"": 9,
    ""205.210.31.212"": 9,
    ""62.204.41.145"": 18,
    ""45.227.254.26"": 6,
    ""87.251.75.64"": 3,
    ""172.233.212.172"": 9,
    ""155.248.216.46"": 6,
    ""45.143.201.62"": 15,
    ""185.170.144.3"": 6,
    ""103.171.0.205"": 3,
    ""157.97.121.120"": 3,
    ""179.60.147.10"": 6,
    ""74.235.239.23"": 3,
    ""34.211.111.74"": 144,
    ""87.251.75.120"": 3,
    ""162.142.125.223"": 3,
    ""74.235.152.128"": 3,
    ""185.170.144.113"": 6,
    ""198.235.24.13"": 9,
    ""194.165.16.72"": 6,
    ""38.181.35.65"": 18,
    ""179.43.190.218"": 12,
    ""152.89.198.133"": 12,
    ""62.122.184.165"": 12,
    ""45.140.17.16"": 3,
    ""5.62.60.57"": 3,
    ""52.167.121.61"": 24,
    ""141.98.11.128"": 6,
    ""5.62.62.69"": 3,
    ""152.32.181.108"": 3,
    ""106.13.239.193"": 3,
    ""194.165.16.37"": 6,
    ""2.57.149.92"": 3,
    ""205.210.31.33"": 9,
    ""141.98.81.39"": 6,
    ""167.94.138.126"": 3,
    ""167.94.145.53"": 3,
    ""45.227.254.8"": 6,
    ""198.235.24.244"": 9,
    ""181.30.39.44"": 3,
    ""111.61.253.55"": 3
  },
  ""asn"": {
    ""AS20473"": 138,
    ""AS208046"": 18,
    ""AS63949"": 12,
    ""AS208091"": 15,
    ""AS396982"": 36,
    ""AS59425"": 18,
    ""AS267784"": 12,
    ""AS31898"": 6,
    ""AS210950"": 15,
    ""AS197414"": 12,
    ""AS63737"": 3,
    ""AS396356"": 3,
    ""AS209588"": 12,
    ""AS8075"": 30,
    ""AS16509"": 144,
    ""AS398324"": 6,
    ""AS48721"": 12,
    ""AS140227"": 18,
    ""AS51852"": 12,
    ""AS57523"": 24,
    ""AS198953"": 3,
    ""AS198605"": 6,
    ""AS209605"": 6,
    ""AS135377"": 3,
    ""AS38365"": 3,
    ""AS208312"": 3,
    ""AS398705"": 3,
    ""AS7303"": 3,
    ""AS24547"": 3
  },
  ""isp"": {
    ""The Constant Company"": 78,
    ""Choopa"": 60,
    ""ColocationX Ltd."": 18,
    ""Akamai Technologies, Inc."": 12,
    ""Xhost Internet Solutions"": 9,
    ""Google LLC"": 36,
    ""Horizon LLC"": 18,
    ""Flyservers S.A."": 36,
    ""Xhost Internet Solutions LP"": 18,
    ""Oracle Corporation"": 6,
    ""TOV E-RISHENNYA"": 15,
    ""Vietserver Services Technology Company Limited"": 3,
    ""Consumer-Network"": 3,
    ""Microsoft Corporation"": 30,
    ""Amazon.com, Inc."": 144,
    ""Censys, Inc."": 9,
    ""Hong Kong Communications International Co., Limited"": 18,
    ""Private Layer INC"": 12,
    ""Chang Way Technologies Co. Limited"": 24,
    ""Proton66 OOO"": 3,
    ""AVAST Software s.r.o."": 6,
    ""UAB Host Baltic"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 3,
    ""Red Byte LLC"": 3,
    ""Telecom Argentina S.A"": 3,
    ""China Mobile communications corporation"": 3
  },
  ""org"": {
    ""Vultr Holdings, LLC"": 138,
    ""ColocationX Ltd"": 9,
    ""x33 Networks IBC"": 9,
    ""Linode"": 3,
    ""XHOSTIS"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Horizon LLC"": 18,
    ""UAB Host Baltic"": 12,
    ""Xhost Internet Solutions"": 6,
    ""Akamai Technologies, Inc."": 9,
    ""Oracle Cloud Infrastructure (ca-toronto-1)"": 6,
    ""TOV VAIZ PARTNER"": 15,
    ""Xhostis"": 12,
    ""YUH Application Software Company Limited"": 3,
    ""Unknown"": 9,
    ""Cloud Solutions S.A"": 6,
    ""Microsoft Azure Cloud (eastus)"": 6,
    ""AWS EC2 (us-west-2)"": 144,
    ""Censys Inc"": 3,
    ""Flyservers S.A"": 18,
    ""HONG KONG COMMUNICATIONS INTERNATIONAL CO., LIMITED"": 18,
    ""Private Layer Inc"": 12,
    ""Starcrecium Limited"": 12,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Proton66 LLC"": 3,
    ""AVAST cloud"": 3,
    ""Microsoft Azure Cloud (eastus2)"": 24,
    ""AVAST Software s.r.o."": 3,
    ""Ucloud Information Technology"": 3,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 3,
    ""Censys, Inc"": 3,
    ""Censys, Inc."": 3,
    ""Fibertel"": 3,
    ""China Mobile"": 3
  },
  ""regionName"": {
    ""Georgia"": 72,
    ""Texas"": 42,
    ""California"": 60,
    ""North Holland"": 21,
    ""English River"": 9,
    ""North West"": 3,
    ""Drenthe"": 15,
    ""Moscow"": 45,
    ""Vilnius"": 12,
    ""England"": 6,
    ""Illinois"": 9,
    ""Ontario"": 6,
    ""Kyiv City"": 15,
    ""Hanoi"": 3,
    ""New Jersey"": 3,
    ""Distrito Federal"": 6,
    ""Virginia"": 30,
    ""Oregon"": 144,
    ""Michigan"": 6,
    ""Kaunas"": 18,
    ""Eastern"": 18,
    ""Zurich"": 12,
    ""Centre"": 6,
    ""Dubai"": 3,
    ""Guangdong"": 3,
    ""Lesser Poland"": 3,
    ""Hesse"": 3,
    ""Buenos Aires"": 3,
    ""Hebei"": 3
  },
  ""country"": {
    ""United States"": 366,
    ""Netherlands"": 36,
    ""Seychelles"": 9,
    ""Singapore"": 3,
    ""Russia"": 45,
    ""Lithuania"": 30,
    ""United Kingdom"": 6,
    ""Canada"": 6,
    ""Ukraine"": 15,
    ""Vietnam"": 3,
    ""Venezuela"": 6,
    ""Hong Kong"": 18,
    ""Switzerland"": 12,
    ""Burkina Faso"": 3,
    ""Cameroon"": 3,
    ""United Arab Emirates"": 3,
    ""China"": 6,
    ""Poland"": 3,
    ""Germany"": 3,
    ""Argentina"": 3
  },
  ""account"": {
    ""142.93.8.59"": 138,
    ""Domain"": 81,
    ""hello"": 219,
    ""WuZmlJWeZ"": 3,
    ""QeqPfm"": 3,
    ""BXLOfv"": 3,
    ""Test"": 39,
    ""Administr"": 48,
    ""(empty)"": 15,
    ""dwBovFnMz"": 3,
    ""NIbAfu"": 3,
    ""zuSrZd"": 3,
    ""Administrator"": 3,
    ""luVBKFbWG"": 3,
    ""OphoFr"": 3,
    ""OcvgfT"": 3,
    ""KZhKCiUtw"": 3,
    ""qREiZL"": 3,
    ""LLrjpb"": 3
  },
  ""keyboard"": {
    ""Unknown"": 579
  },
  ""client_build"": {
    ""Unknown"": 579
  },
  ""client_name"": {
    ""Unknown"": 579
  },
  ""ip_type"": {
    ""hosting"": 384,
    ""Unknown"": 171,
    ""mobile & proxy"": 3,
    ""proxy"": 18,
    ""mobile"": 3
  }
}"
inNTF4mv,2023-10-06_stats.json,rdp_snitch,JSON,Friday 6th of October 2023 07:16:15 PM CDT,"{
  ""ip"": {
    ""155.138.239.107"": 8,
    ""144.202.76.214"": 4,
    ""149.28.205.197"": 16,
    ""216.128.131.244"": 14,
    ""149.28.247.226"": 10,
    ""108.61.193.197"": 14,
    ""45.76.62.108"": 16,
    ""155.138.225.132"": 10,
    ""193.142.146.17"": 6,
    ""193.142.147.9"": 6,
    ""143.42.70.229"": 2,
    ""80.66.88.37"": 6,
    ""205.210.31.212"": 6,
    ""62.204.41.145"": 12,
    ""45.227.254.26"": 4,
    ""87.251.75.64"": 2,
    ""172.233.212.172"": 6,
    ""155.248.216.46"": 4,
    ""45.143.201.62"": 10,
    ""185.170.144.3"": 4,
    ""103.171.0.205"": 2,
    ""157.97.121.120"": 2,
    ""179.60.147.10"": 4,
    ""74.235.239.23"": 2,
    ""34.211.111.74"": 96,
    ""87.251.75.120"": 2,
    ""162.142.125.223"": 2,
    ""74.235.152.128"": 2,
    ""185.170.144.113"": 4,
    ""198.235.24.13"": 6,
    ""194.165.16.72"": 4,
    ""38.181.35.65"": 12,
    ""179.43.190.218"": 8,
    ""152.89.198.133"": 8,
    ""62.122.184.165"": 8,
    ""45.140.17.16"": 2,
    ""5.62.60.57"": 2,
    ""52.167.121.61"": 16,
    ""141.98.11.128"": 4,
    ""5.62.62.69"": 2,
    ""152.32.181.108"": 2,
    ""106.13.239.193"": 2,
    ""194.165.16.37"": 4,
    ""2.57.149.92"": 2,
    ""205.210.31.33"": 6,
    ""141.98.81.39"": 4,
    ""167.94.138.126"": 2,
    ""167.94.145.53"": 2,
    ""45.227.254.8"": 4,
    ""198.235.24.244"": 6,
    ""181.30.39.44"": 2,
    ""111.61.253.55"": 2
  },
  ""asn"": {
    ""AS20473"": 92,
    ""AS208046"": 12,
    ""AS63949"": 8,
    ""AS208091"": 10,
    ""AS396982"": 24,
    ""AS59425"": 12,
    ""AS267784"": 8,
    ""AS31898"": 4,
    ""AS210950"": 10,
    ""AS197414"": 8,
    ""AS63737"": 2,
    ""AS396356"": 2,
    ""AS209588"": 8,
    ""AS8075"": 20,
    ""AS16509"": 96,
    ""AS398324"": 4,
    ""AS48721"": 8,
    ""AS140227"": 12,
    ""AS51852"": 8,
    ""AS57523"": 16,
    ""AS198953"": 2,
    ""AS198605"": 4,
    ""AS209605"": 4,
    ""AS135377"": 2,
    ""AS38365"": 2,
    ""AS208312"": 2,
    ""AS398705"": 2,
    ""AS7303"": 2,
    ""AS24547"": 2
  },
  ""isp"": {
    ""The Constant Company"": 52,
    ""Choopa"": 40,
    ""ColocationX Ltd."": 12,
    ""Akamai Technologies, Inc."": 8,
    ""Xhost Internet Solutions"": 6,
    ""Google LLC"": 24,
    ""Horizon LLC"": 12,
    ""Flyservers S.A."": 24,
    ""Xhost Internet Solutions LP"": 12,
    ""Oracle Corporation"": 4,
    ""TOV E-RISHENNYA"": 10,
    ""Vietserver Services Technology Company Limited"": 2,
    ""Consumer-Network"": 2,
    ""Microsoft Corporation"": 20,
    ""Amazon.com, Inc."": 96,
    ""Censys, Inc."": 6,
    ""Hong Kong Communications International Co., Limited"": 12,
    ""Private Layer INC"": 8,
    ""Chang Way Technologies Co. Limited"": 16,
    ""Proton66 OOO"": 2,
    ""AVAST Software s.r.o."": 4,
    ""UAB Host Baltic"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 2,
    ""Red Byte LLC"": 2,
    ""Telecom Argentina S.A"": 2,
    ""China Mobile communications corporation"": 2
  },
  ""org"": {
    ""Vultr Holdings, LLC"": 92,
    ""ColocationX Ltd"": 6,
    ""x33 Networks IBC"": 6,
    ""Linode"": 2,
    ""XHOSTIS"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Horizon LLC"": 12,
    ""UAB Host Baltic"": 8,
    ""Xhost Internet Solutions"": 4,
    ""Akamai Technologies, Inc."": 6,
    ""Oracle Cloud Infrastructure (ca-toronto-1)"": 4,
    ""TOV VAIZ PARTNER"": 10,
    ""Xhostis"": 8,
    ""YUH Application Software Company Limited"": 2,
    ""Unknown"": 6,
    ""Cloud Solutions S.A"": 4,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""AWS EC2 (us-west-2)"": 96,
    ""Censys Inc"": 2,
    ""Flyservers S.A"": 12,
    ""HONG KONG COMMUNICATIONS INTERNATIONAL CO., LIMITED"": 12,
    ""Private Layer Inc"": 8,
    ""Starcrecium Limited"": 8,
    ""Chang Way Technologies Co. Limited"": 10,
    ""Proton66 LLC"": 2,
    ""AVAST cloud"": 2,
    ""Microsoft Azure Cloud (eastus2)"": 16,
    ""AVAST Software s.r.o."": 2,
    ""Ucloud Information Technology"": 2,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 2,
    ""Censys, Inc"": 2,
    ""Censys, Inc."": 2,
    ""Fibertel"": 2,
    ""China Mobile"": 2
  },
  ""regionName"": {
    ""Georgia"": 48,
    ""Texas"": 28,
    ""California"": 40,
    ""North Holland"": 14,
    ""English River"": 6,
    ""North West"": 2,
    ""Drenthe"": 10,
    ""Moscow"": 30,
    ""Vilnius"": 8,
    ""England"": 4,
    ""Illinois"": 6,
    ""Ontario"": 4,
    ""Kyiv City"": 10,
    ""Hanoi"": 2,
    ""New Jersey"": 2,
    ""Distrito Federal"": 4,
    ""Virginia"": 20,
    ""Oregon"": 96,
    ""Michigan"": 4,
    ""Kaunas"": 12,
    ""Eastern"": 12,
    ""Zurich"": 8,
    ""Centre"": 4,
    ""Dubai"": 2,
    ""Guangdong"": 2,
    ""Lesser Poland"": 2,
    ""Hesse"": 2,
    ""Buenos Aires"": 2,
    ""Hebei"": 2
  },
  ""country"": {
    ""United States"": 244,
    ""Netherlands"": 24,
    ""Seychelles"": 6,
    ""Singapore"": 2,
    ""Russia"": 30,
    ""Lithuania"": 20,
    ""United Kingdom"": 4,
    ""Canada"": 4,
    ""Ukraine"": 10,
    ""Vietnam"": 2,
    ""Venezuela"": 4,
    ""Hong Kong"": 12,
    ""Switzerland"": 8,
    ""Burkina Faso"": 2,
    ""Cameroon"": 2,
    ""United Arab Emirates"": 2,
    ""China"": 4,
    ""Poland"": 2,
    ""Germany"": 2,
    ""Argentina"": 2
  },
  ""account"": {
    ""142.93.8.59"": 92,
    ""Domain"": 54,
    ""hello"": 146,
    ""WuZmlJWeZ"": 2,
    ""QeqPfm"": 2,
    ""BXLOfv"": 2,
    ""Test"": 26,
    ""Administr"": 32,
    ""(empty)"": 10,
    ""dwBovFnMz"": 2,
    ""NIbAfu"": 2,
    ""zuSrZd"": 2,
    ""Administrator"": 2,
    ""luVBKFbWG"": 2,
    ""OphoFr"": 2,
    ""OcvgfT"": 2,
    ""KZhKCiUtw"": 2,
    ""qREiZL"": 2,
    ""LLrjpb"": 2
  },
  ""keyboard"": {
    ""Unknown"": 386
  },
  ""client_build"": {
    ""Unknown"": 386
  },
  ""client_name"": {
    ""Unknown"": 386
  },
  ""ip_type"": {
    ""hosting"": 256,
    ""Unknown"": 114,
    ""mobile & proxy"": 2,
    ""proxy"": 12,
    ""mobile"": 2
  }
}"
PMDphFG1,2023-10-06_stats.json,rdp_snitch,JSON,Friday 6th of October 2023 07:15:08 PM CDT,"{
  ""ip"": {
    ""155.138.239.107"": 4,
    ""144.202.76.214"": 2,
    ""149.28.205.197"": 8,
    ""216.128.131.244"": 7,
    ""149.28.247.226"": 5,
    ""108.61.193.197"": 7,
    ""45.76.62.108"": 8,
    ""155.138.225.132"": 5,
    ""193.142.146.17"": 3,
    ""193.142.147.9"": 3,
    ""143.42.70.229"": 1,
    ""80.66.88.37"": 3,
    ""205.210.31.212"": 3,
    ""62.204.41.145"": 6,
    ""45.227.254.26"": 2,
    ""87.251.75.64"": 1,
    ""172.233.212.172"": 3,
    ""155.248.216.46"": 2,
    ""45.143.201.62"": 5,
    ""185.170.144.3"": 2,
    ""103.171.0.205"": 1,
    ""157.97.121.120"": 1,
    ""179.60.147.10"": 2,
    ""74.235.239.23"": 1,
    ""34.211.111.74"": 48,
    ""87.251.75.120"": 1,
    ""162.142.125.223"": 1,
    ""74.235.152.128"": 1,
    ""185.170.144.113"": 2,
    ""198.235.24.13"": 3,
    ""194.165.16.72"": 2,
    ""38.181.35.65"": 6,
    ""179.43.190.218"": 4,
    ""152.89.198.133"": 4,
    ""62.122.184.165"": 4,
    ""45.140.17.16"": 1,
    ""5.62.60.57"": 1,
    ""52.167.121.61"": 8,
    ""141.98.11.128"": 2,
    ""5.62.62.69"": 1,
    ""152.32.181.108"": 1,
    ""106.13.239.193"": 1,
    ""194.165.16.37"": 2,
    ""2.57.149.92"": 1,
    ""205.210.31.33"": 3,
    ""141.98.81.39"": 2,
    ""167.94.138.126"": 1,
    ""167.94.145.53"": 1,
    ""45.227.254.8"": 2,
    ""198.235.24.244"": 3,
    ""181.30.39.44"": 1,
    ""111.61.253.55"": 1
  },
  ""asn"": {
    ""AS20473"": 46,
    ""AS208046"": 6,
    ""AS63949"": 4,
    ""AS208091"": 5,
    ""AS396982"": 12,
    ""AS59425"": 6,
    ""AS267784"": 4,
    ""AS31898"": 2,
    ""AS210950"": 5,
    ""AS197414"": 4,
    ""AS63737"": 1,
    ""AS396356"": 1,
    ""AS209588"": 4,
    ""AS8075"": 10,
    ""AS16509"": 48,
    ""AS398324"": 2,
    ""AS48721"": 4,
    ""AS140227"": 6,
    ""AS51852"": 4,
    ""AS57523"": 8,
    ""AS198953"": 1,
    ""AS198605"": 2,
    ""AS209605"": 2,
    ""AS135377"": 1,
    ""AS38365"": 1,
    ""AS208312"": 1,
    ""AS398705"": 1,
    ""AS7303"": 1,
    ""AS24547"": 1
  },
  ""isp"": {
    ""The Constant Company"": 26,
    ""Choopa"": 20,
    ""ColocationX Ltd."": 6,
    ""Akamai Technologies, Inc."": 4,
    ""Xhost Internet Solutions"": 3,
    ""Google LLC"": 12,
    ""Horizon LLC"": 6,
    ""Flyservers S.A."": 12,
    ""Xhost Internet Solutions LP"": 6,
    ""Oracle Corporation"": 2,
    ""TOV E-RISHENNYA"": 5,
    ""Vietserver Services Technology Company Limited"": 1,
    ""Consumer-Network"": 1,
    ""Microsoft Corporation"": 10,
    ""Amazon.com, Inc."": 48,
    ""Censys, Inc."": 3,
    ""Hong Kong Communications International Co., Limited"": 6,
    ""Private Layer INC"": 4,
    ""Chang Way Technologies Co. Limited"": 8,
    ""Proton66 OOO"": 1,
    ""AVAST Software s.r.o."": 2,
    ""UAB Host Baltic"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 1,
    ""Red Byte LLC"": 1,
    ""Telecom Argentina S.A"": 1,
    ""China Mobile communications corporation"": 1
  },
  ""org"": {
    ""Vultr Holdings, LLC"": 46,
    ""ColocationX Ltd"": 3,
    ""x33 Networks IBC"": 3,
    ""Linode"": 1,
    ""XHOSTIS"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Horizon LLC"": 6,
    ""UAB Host Baltic"": 4,
    ""Xhost Internet Solutions"": 2,
    ""Akamai Technologies, Inc."": 3,
    ""Oracle Cloud Infrastructure (ca-toronto-1)"": 2,
    ""TOV VAIZ PARTNER"": 5,
    ""Xhostis"": 4,
    ""YUH Application Software Company Limited"": 1,
    ""Unknown"": 3,
    ""Cloud Solutions S.A"": 2,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""AWS EC2 (us-west-2)"": 48,
    ""Censys Inc"": 1,
    ""Flyservers S.A"": 6,
    ""HONG KONG COMMUNICATIONS INTERNATIONAL CO., LIMITED"": 6,
    ""Private Layer Inc"": 4,
    ""Starcrecium Limited"": 4,
    ""Chang Way Technologies Co. Limited"": 5,
    ""Proton66 LLC"": 1,
    ""AVAST cloud"": 1,
    ""Microsoft Azure Cloud (eastus2)"": 8,
    ""AVAST Software s.r.o."": 1,
    ""Ucloud Information Technology"": 1,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 1,
    ""Censys, Inc"": 1,
    ""Censys, Inc."": 1,
    ""Fibertel"": 1,
    ""China Mobile"": 1
  },
  ""regionName"": {
    ""Georgia"": 24,
    ""Texas"": 14,
    ""California"": 20,
    ""North Holland"": 7,
    ""English River"": 3,
    ""North West"": 1,
    ""Drenthe"": 5,
    ""Moscow"": 15,
    ""Vilnius"": 4,
    ""England"": 2,
    ""Illinois"": 3,
    ""Ontario"": 2,
    ""Kyiv City"": 5,
    ""Hanoi"": 1,
    ""New Jersey"": 1,
    ""Distrito Federal"": 2,
    ""Virginia"": 10,
    ""Oregon"": 48,
    ""Michigan"": 2,
    ""Kaunas"": 6,
    ""Eastern"": 6,
    ""Zurich"": 4,
    ""Centre"": 2,
    ""Dubai"": 1,
    ""Guangdong"": 1,
    ""Lesser Poland"": 1,
    ""Hesse"": 1,
    ""Buenos Aires"": 1,
    ""Hebei"": 1
  },
  ""country"": {
    ""United States"": 122,
    ""Netherlands"": 12,
    ""Seychelles"": 3,
    ""Singapore"": 1,
    ""Russia"": 15,
    ""Lithuania"": 10,
    ""United Kingdom"": 2,
    ""Canada"": 2,
    ""Ukraine"": 5,
    ""Vietnam"": 1,
    ""Venezuela"": 2,
    ""Hong Kong"": 6,
    ""Switzerland"": 4,
    ""Burkina Faso"": 1,
    ""Cameroon"": 1,
    ""United Arab Emirates"": 1,
    ""China"": 2,
    ""Poland"": 1,
    ""Germany"": 1,
    ""Argentina"": 1
  },
  ""account"": {
    ""142.93.8.59"": 46,
    ""Domain"": 27,
    ""hello"": 73,
    ""WuZmlJWeZ"": 1,
    ""QeqPfm"": 1,
    ""BXLOfv"": 1,
    ""Test"": 13,
    ""Administr"": 16,
    ""(empty)"": 5,
    ""dwBovFnMz"": 1,
    ""NIbAfu"": 1,
    ""zuSrZd"": 1,
    ""Administrator"": 1,
    ""luVBKFbWG"": 1,
    ""OphoFr"": 1,
    ""OcvgfT"": 1,
    ""KZhKCiUtw"": 1,
    ""qREiZL"": 1,
    ""LLrjpb"": 1
  },
  ""keyboard"": {
    ""Unknown"": 193
  },
  ""client_build"": {
    ""Unknown"": 193
  },
  ""client_name"": {
    ""Unknown"": 193
  },
  ""ip_type"": {
    ""hosting"": 128,
    ""Unknown"": 57,
    ""mobile & proxy"": 1,
    ""proxy"": 6,
    ""mobile"": 1
  }
}"
dUV3NZVg,Style,MrFrazSultan,CSS,Friday 6th of October 2023 07:13:12 PM CDT,".mazepool-logo {
  height: 15px !important;
}

.slogan {
  font-size: small;
}

.logo-flex {
  display: flex;
  align-content: center;
  flex-direction: column;
  justify-content: center;
}

.mazepool-container {
  background-color: #e7f1fe;
  display: flex;
  justify-content: center;
  align-items: center;

  min-height: 20px;
  border: 4px rgb(255, 255, 255) solid;
  border-radius: 10px;

  gap: 5px;

  position: fixed;
  z-index: 9999;
  top: 0px;
  padding: 10px 10px;
  left: 250px;
}

.flex {
  min-width: 20px;
  min-height: 20px;
  align-items: center;
  margin: 2px;
  gap: 2rem;
}

.numberField {
  width: 50px;
  font-size: 17;
}
.buttons {
  width: 70px;
  cursor: pointer;
  font-size: 18px;
}

.results {
  background-color: rgb(251, 251, 251);
  border: 0.5px white solid;
}
"
RjvqMfhD,Content,MrFrazSultan,JavaScript,Friday 6th of October 2023 07:12:10 PM CDT,"function InjectBar() {
    var div = document.createElement(""div"");
    div.innerHTML = `
    <div class=""mazepool-container"">
            <div flex item1> 
                <span>How many Ads? </span>
            </div>
            <div flex item2> 
                <input class=""filterNumber numberField"" type=""number"" value=""10"" >
            </div>
            <div flex item3> 
                <button class=""buttons filter-button""> Filter </button>
            </div>
            <div flex item5> 
                <button class=""buttons scroll-button""> Scroll</button>
            </div>
            <div flex item6> 
                <span>Limit ads</span> <br>
                <span id=""info-click"" style=""cursor:pointer""> </span>
            </div>
            <div flex-item7> 
                <input class=""maxAds numberField"" type=""number"" value=""50"">
            </div>
            <div flex item9 results> 
                <span class=""scrollingStatus""></span>
                <br>
                <span class=""foundAds""></span> 
            </div>
        </div>
    </div>
`;
    // Append the new element to the body of the page
    document.body.appendChild(div);

    // Add CSS rules to the page
}

function ActionsOnBar() {
    // i toolip alert massage
    let infoButton = document.getElementById(""info-click"");
    infoButton.addEventListener(""click"", () => {
        alert(
            `Loading too many ads can slow down or freeze the Facebook Ads library. 
        That is why, the app will stop after the specified number of ads is found. 
        If you still find it to be slow, try lowering the number of ads you want to load at once.`
        );
    });

    // clear the text on the right of the bar
    document.getElementsByClassName(
        ""x8t9es0 x1fvot60 xo1l8bm xxio538 x4hq6eo x1sdyfia x1h4wwuj xeuugli""
    )[2].style.color = ""white"";

    // list of buttons
    const filterBtn = document.getElementsByClassName(""filter-button"")[0];

    function filterAction() {
        document.getElementsByClassName(""filterNumber"")[0].disabled = true;
        let the = document.getElementsByClassName(""filterNumber"")[0].value;
        the = parseInt(the);

        let time = 2000;
        var intervalId = window.setInterval(function() {
            var card = document.getElementsByClassName(""_7jvw"");
            for (let ii = 0; ii < card.length; ii++) {
                var list = card[ii].getElementsByClassName(
                    ""x8t9es0 x1fvot60 xo1l8bm xxio538""
                );
                if (list.length == 0) {
                    card[ii].parentElement.remove();
                }
                for (let i = 0; i < list.length; i++) {
                    var num_text = parseInt(list[i].textContent);
                    if (num_text < the) {
                        card[ii].parentElement.remove();
                    }
                }
            }
            console.log(the);
        }, time);
    }
    filterBtn.addEventListener(""click"", () => {
        filterAction();
    });

    // What to do when clicked on scroll and stop
    const scrollBtn = document.getElementsByClassName(""scroll-button"")[0];
    if (scrollBtn) {
        scrollBtn.addEventListener(""click"", function() {
            console.log(""scrollclick"");

            if (
                document.getElementsByClassName(""buttons scroll-button"")[0]
                .innerText === ""Stop""
            ) {
                clearInterval(a);
                document.getElementsByClassName(""filterNumber"")[0].disabled = false;
                document.getElementsByClassName(""scrollingStatus"")[0].innerHTML =
                    ""Found"";
                document.getElementsByClassName(""buttons scroll-button"")[0].innerText =
                    ""Scroll"";
            } else {
                a = setInterval(function() {
                    window.scrollBy(0, 50);
                }, 100);
                document.getElementsByClassName(""scrollingStatus"")[0].innerHTML =
                    ""Finding Ads..."";
                document.getElementsByClassName(""buttons scroll-button"")[0].innerText =
                    ""Stop"";
            }
        });
    }
}

setTimeout(() => {
    InjectBar();
    ActionsOnBar();
}, 2000);"
rsvBGVA1,Untitled,soyl,Java,Friday 6th of October 2023 07:08:55 PM CDT,"public static Task fromString (String line) {
        try {
            if (!line.isBlank() && !line.isEmpty()) {
                String[] tokens = line.split("","");
                TaskType type = TaskType.valueOf(tokens[1]);
                for (int i = 0; i < tokens.length; i++) {
                    switch (type) {
                        case TASK -> {
                            Task task = new Task();
                            task.setId(Long.parseLong(tokens[0]));
                            task.setName(tokens[2]);
                            task.setStatus(tokens[3]);
                            task.setDesc(tokens[4]);
                            if (!tokens[5].equals(""null"") && !tokens[6].equals(""null"")) {
                                task.setStartTime(LocalDateTime.parse(tokens[5]));
                                task.setDuration(Duration.parse(tokens[6]));
                            }
                            return task;
                        }
                        case EPIC -> {
                            Epic epic = new Epic();
                            epic.setId(Long.parseLong(tokens[0]));
                            epic.setName(tokens[2]);
                            epic.setStatus(tokens[3]);
                            epic.setDesc(tokens[4]);
                            if (!tokens[5].equals(""null"") && !tokens[6].equals(""null"")) {
                                epic.setStartTime(LocalDateTime.parse(tokens[5]));
                                epic.setDuration(Duration.parse(tokens[6]));
                            }
                            return epic;
                        }
                        case SUBTASK -> {
                            if (tokens.length > 7) {
                                Subtask subtask = new Subtask();
                                subtask.setId(Long.parseLong(tokens[0]));
                                subtask.setName(tokens[2]);
                                subtask.setStatus(tokens[3]);
                                subtask.setDesc(tokens[4]);
                                if (!tokens[5].equals(""null"") && !tokens[6].equals(""null"")) {
                                    subtask.setStartTime(LocalDateTime.parse(tokens[5]));
                                    subtask.setDuration(Duration.parse(tokens[6]));
                                }
                                subtask.setEpicId(Long.parseLong(tokens[7]));

                                return subtask;
                            }
                        }
                    }
                }
            }
        } catch (DateTimeParseException e) {
            throw new RuntimeException(e);
        }return null;
    }"
MXQfypgK,type-info/paramter-info display on mouse-hover in neovim,JamesWidman,Lua,Friday 6th of October 2023 05:56:04 PM CDT,"-- (the following can be inserted into the config function in your 'nvim-lspconfig' config)

local bufopts = { noremap = true, silent = true, buffer = bufnr }

-- diplays type info & documentation in a popup window for the entity under the mouse pointer:
local mouseOver_lspHover = function()
  local mousePos = vim.fn.getmousepos()
  pcall(vim.api.nvim_win_set_cursor, mousePos.winid, { mousePos.line, mousePos.column - 1 })
  vim.lsp.buf.hover({ async = false })
end
vim.keymap.set('n', '<D-MouseMove>', mouseOver_lspHover, bufopts)
-- (""<D-"" is the ""command"" key on macOS; you may want to use ""<M-"" or ""<A-"" on other platforms.)

-- when hovering over a call-argument, this diplays (in a popup window) the signature of the
-- called function with a highlight on the declaration of the corresponding parameter:
local mouseOver_signatureHelp = function()
  local mousePos = vim.fn.getmousepos()
  pcall(vim.api.nvim_win_set_cursor, mousePos.winid, { mousePos.line, mousePos.column - 1 })
  vim.lsp.buf.signature_help({ async = false })
end
vim.keymap.set('n', '<c-MouseMove>', mouseOver_signatureHelp, bufopts)

local mouse_jump_to_definition = function()
  local mousePos = vim.fn.getmousepos()
  vim.api.nvim_win_set_cursor(mousePos.winid, { mousePos.line, mousePos.column - 1 })
  vim.cmd([[normal ]])
end
vim.keymap.set('n', '<D-LeftMouse>', mouse_jump_to_definition, bufopts)
vim.keymap.set('n', '<D-MiddleMouse>', '<c-t>', bufopts)

local mouse_jumpt_to_typeDefinition = function()
  local mousePos = vim.fn.getmousepos()
  vim.api.nvim_win_set_cursor(mousePos.winid, { mousePos.line, mousePos.column - 1 })
  vim.cmd([[lua vim.lsp.buf.type_definition()]])
end
vim.keymap.set('n', '<D-RightMouse>', mouse_jumpt_to_typeDefinition, bufopts)"
4iRW1Gfp,Untitled,Vemox,BrainFuck,Friday 6th of October 2023 05:53:56 PM CDT,"/* This file was generated by the Hex-Rays decompiler version 8.3.0.230608.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>
#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void __fastcall sub_180001000(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7);
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved);
void __noreturn sub_1800010A0();
void __noreturn sub_180002270();
void sub_18000296C();
__int64 sub_18000297C();
void *sub_180002988();
void *sub_180002990();
char __fastcall sub_180002A3C(Concurrency::details::ScheduleGroupSegmentBase *a1);
void *sub_180002D30();
void sub_180002D38();
void sub_180002E8C();
void sub_180002EC8();
// __int64 __fastcall _std_type_info_destroy_list(_QWORD); weak
// bool __fastcall Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(Concurrency::details::ScheduleGroupSegmentBase *__hidden this); idb
// __vcrt_bool __cdecl _vcrt_thread_detach();
// __vcrt_bool __cdecl _vcrt_uninitialize(__vcrt_bool Terminating);
__int64 __fastcall sub_180003380(void *a1, char a2, unsigned __int64 a3);
__int64 __fastcall sub_1800033A0(__int64 a1, unsigned __int8 a2, unsigned __int64 a3);
// __int64 __fastcall NLG_Notify(_QWORD, _QWORD, _QWORD); weak
__int64 nullsub_1(void); // weak
__int64 __fastcall sub_180003C50(void *a1, __int64 a2, unsigned __int64 a3);
__int64 __fastcall sub_180003C70(__m128i *a1, const __m128i *a2, unsigned __int64 a3);
__int64 __fastcall sub_180004100(__int64 a1, __int64 a2, __int64 a3, unsigned int a4);
void __fastcall sub_1800045F0(__int64 a1);
// void __cdecl __noreturn exit(int Code);
__int64 sub_180004614();
// __int64 __fastcall unknown_libname_10(void *Block); idb
__int64 __fastcall sub_180004B80(void **a1);
__int64 __fastcall sub_180004B9C(void **a1);
char sub_180004DE8();
__vcrt_bool sub_180004E3C();
// bool __fastcall Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(Concurrency::details::ScheduleGroupSegmentBase *__hidden this); idb
// __int64 __fastcall _acrt_getptd(_QWORD); weak
// __int64 _acrt_getptd_noexit(void); weak
void __fastcall sub_180005858(int a1);
void __fastcall sub_1800058AC(int a1);
void __fastcall sub_180005A60(__int64 a1);
// void __cdecl invalid_parameter_noinfo();
// __int64 _acrt_errno_map_os_error(void); weak
// unsigned int *__cdecl _doserrno();
// int *__cdecl errno();
// __int64 _acrt_update_thread_multibyte_data(void); weak
char sub_180007C64();
void __fastcall sub_180007FA4(__int64 a1);
__int64 __fastcall sub_1800080A8(unsigned int a1);
void __fastcall sub_180008334(__int64 a1);
void __fastcall sub_180008794(__int64 a1);
void __fastcall sub_1800087A0(__int64 a1);
__int64 __fastcall sub_180008990(__int64 a1, __int64 *a2);
__int64 __fastcall sub_1800089C4(__int64 a1, __int64 *a2);
// __int64 _acrt_update_thread_locale_data(void); weak
__int64 sub_180008F08();
void __fastcall sub_180008F10(unsigned __int64 a1, unsigned __int64 a2, unsigned __int64 a3, int (__fastcall *a4)(unsigned __int64, unsigned __int64));
void __fastcall sub_18000A198(int a1);
void __fastcall sub_18000A1C0(int a1);
// __int64 __fastcall write_double_translated_ansi_nolock(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __fastcall sub_18000A918(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __fastcall write_text_utf16le_nolock(_QWORD, _QWORD, _QWORD, _QWORD); weak
// __int64 __fastcall write_text_utf8_nolock(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __fastcall sub_18000AD94(int a1, _BYTE *a2, unsigned int a3);
// int __cdecl isatty(int FileHandle);
__int64 sub_18000B6B4();
__int64 __fastcall common_lseek_nolock<__int64>(_QWORD, _QWORD, _QWORD); // weak
// wint_t __cdecl putwch_nolock(wchar_t Character);
BOOL sub_18000C060();
// __int64 __fastcall __crt_seh_guarded_call<int>::operator()<_lambda_751a882b2c74d4b022dec766aa51a29a_,_lambda_628dfdc04ba53c8bfc02c9951375f3f5_ &,_lambda_f6c7be5f7998530c34de24c7437d6b54_>(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 __fastcall sub_18000C1B0(int a1);
// __int64 __fastcall guard_dispatch_icall_nop(); weak
// unsigned __int64 *nativeCall(void); weak
// void __stdcall nativeInit(unsigned __int64); weak
// void __stdcall scriptWait(unsigned int); weak
// void __stdcall keyboardHandlerRegister(void (__stdcall *)(unsigned int, unsigned __int16, unsigned __int8, int, int, int, int)); weak
// void __stdcall keyboardHandlerUnregister(void (__stdcall *)(unsigned int, unsigned __int16, unsigned __int8, int, int, int, int)); weak
// void __stdcall scriptUnregister(HINSTANCE); weak
// void __stdcall scriptRegister(HINSTANCE, void (*)(void)); weak
// void __stdcall nativePush64(unsigned __int64); weak

//-------------------------------------------------------------------------
// Data declarations

// extern DWORD (__stdcall *GetTickCount)();
// extern BOOL (__stdcall *CloseHandle)(HANDLE hObject);
// extern BOOL (__stdcall *GetConsoleMode)(HANDLE hConsoleHandle, LPDWORD lpMode);
// extern BOOL (__stdcall *WriteFile)(HANDLE hFile, LPCVOID lpBuffer, DWORD nNumberOfBytesToWrite, LPDWORD lpNumberOfBytesWritten, LPOVERLAPPED lpOverlapped);
// extern void (__stdcall *InitializeSListHead)(PSLIST_HEADER ListHead);
// extern DWORD (__stdcall *GetLastError)();
// extern void (__stdcall *EnterCriticalSection)(LPCRITICAL_SECTION lpCriticalSection);
// extern void (__stdcall *LeaveCriticalSection)(LPCRITICAL_SECTION lpCriticalSection);
__int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD) = &guard_dispatch_icall_nop; // weak
void (*qword_180015AA8[2])(void) = { NULL, NULL }; // weak
void (*qword_180015AB8)(void) = NULL; // weak
uintptr_t _security_cookie = 47936899621426ui64;
__int64 qword_180017020 = 8239i64; // weak
int dword_180017808 = -2; // weak
HANDLE hObject = (HANDLE)0xFFFFFFFFFFFFFFFEi64; // idb
union _SLIST_HEADER stru_180017F60; // weak
_UNKNOWN unk_180017F70; // weak
_UNKNOWN unk_180017F78; // weak
int dword_180017FC8; // weak
signed __int32 dword_180017FCC[29]; // weak
int dword_180018148; // weak
__int64 qword_180018150; // weak
void *qword_180018278; // idb
void *qword_180018280; // idb
_UNKNOWN unk_1800182C0; // weak
__int64 qword_1800184F8; // weak
struct __crt_multibyte_data *Block; // idb
HANDLE hHeap; // idb
__int64 qword_180018710[128]; // weak
int dword_180018B10; // weak
__int64 qword_180018B18; // weak
__int64 qword_180018B20; // weak
__int64 qword_180018B28; // weak
__int64 qword_180018B30; // weak
__int64 qword_180018B38; // weak
__int64 qword_180018B40; // weak
__int64 qword_180018B48; // weak
int dword_180018B7C; // weak
int dword_180018B88; // weak
_DWORD dword_180018BA0[1020]; // weak
_UNKNOWN unk_180019B98; // weak


//----- (0000000180001000) ----------------------------------------------------
void __fastcall sub_180001000(unsigned int a1, __int64 a2, __int64 a3, __int64 a4, int a5, int a6, int a7)
{
  __int64 v7; // rbx

  if ( a1 < 0xFF )
  {
    v7 = 2i64 * a1;
    dword_180018BA0[2 * v7] = GetTickCount();
    dword_180018BA0[2 * v7 + 1] = a5;
    dword_180018BA0[2 * v7 + 2] = a6;
    dword_180018BA0[2 * v7 + 3] = a7;
  }
}
// 180018BA0: using guessed type _DWORD dword_180018BA0[1020];

//----- (0000000180001050) ----------------------------------------------------
BOOL __stdcall DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
  if ( fdwReason )
  {
    if ( fdwReason == 1 )
    {
      scriptRegister(hinstDLL, (void (*)(void))sub_180002270);
      keyboardHandlerRegister((void (__stdcall *)(unsigned int, unsigned __int16, unsigned __int8, int, int, int, int))sub_180001000);
      return 1;
    }
  }
  else
  {
    scriptUnregister(hinstDLL);
    keyboardHandlerUnregister((void (__stdcall *)(unsigned int, unsigned __int16, unsigned __int8, int, int, int, int))sub_180001000);
  }
  return 1;
}
// 18000E238: using guessed type void __stdcall keyboardHandlerRegister(void (__stdcall *)(unsigned int, unsigned __int16, unsigned __int8, int, int, int, int));
// 18000E240: using guessed type void __stdcall keyboardHandlerUnregister(void (__stdcall *)(unsigned int, unsigned __int16, unsigned __int8, int, int, int, int));
// 18000E248: using guessed type void __stdcall scriptUnregister(HINSTANCE);
// 18000E250: using guessed type void __stdcall scriptRegister(HINSTANCE, void (*)(void));

//----- (00000001800010A0) ----------------------------------------------------
void __noreturn sub_1800010A0()
{
  int v0; // r14d
  unsigned int v1; // edi
  int v2; // ebx
  int v3; // edi
  int v4; // ebx
  unsigned int v5; // esi
  int v6; // ebx
  const char *v7; // rcx
  unsigned __int64 v8; // rcx
  float v9[8]; // [rsp+20h] [rbp-50h]

  nativeInit(0x4F8644AF03D0E0D6ui64);
  nativeCall();
  nativeInit(0xD80958FC74E988A6ui64);
  v0 = 0;
  v1 = *(_DWORD *)nativeCall();
  nativeInit(0x5F9532F3B5CC2551ui64);
  nativePush64(v1);
  v2 = *(_DWORD *)nativeCall();
  nativeInit(0x3FEF770D40960D5Aui64);
  nativePush64(v1);
  nativePush64(v2 == 0);
  nativeCall();
  GetTickCount();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium021"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium004"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium007"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium009"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium010"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium011"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium012"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium013"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium015"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium016"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium017"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium018"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium019"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium020"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium022"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""lodlights_medium035"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""island_lodlights"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium021"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium004"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium007"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium009"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium010"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium011"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium012"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium013"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium015"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium016"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium017"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium018"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium019"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium020"");
  nativeCall();
  nativeInit(0xEE6C5AD3ECE0A82Dui64);
  nativePush64((unsigned __int64)""vw_lodlights_medium022"");
  nativeCall();
  while ( 1 )
  {
    v3 = v0;
    nativeInit(0x25223CA6B4D20B7Fui64);
    v4 = *(_DWORD *)nativeCall();
    nativeInit(0xD80958FC74E988A6ui64);
    v5 = *(_DWORD *)nativeCall();
    if ( (unsigned int)(v4 - 7) <= 0xC )
      goto LABEL_148;
    nativeInit(0x5F9532F3B5CC2551ui64);
    nativePush64(v5);
    v6 = *(_DWORD *)nativeCall();
    nativeInit(0x3FEF770D40960D5Aui64);
    nativePush64(v5);
    nativePush64(v6 == 0);
    ++v0;
    *(_OWORD *)v9 = *(_OWORD *)nativeCall();
    scriptWait(0x32u);
    switch ( v3 )
    {
      case 0:
        if ( v9[0] < 376.0 || v9[0] > 2410.0 || v9[2] < -2635.0 || v9[2] > -518.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium021"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium021"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium021"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium021"";
        }
        goto LABEL_145;
      case 1:
        if ( v9[0] < -900.0 || v9[0] > 350.0 || v9[2] < -1500.0 || v9[2] > 600.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium015"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium015"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium015"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium015"";
        }
        goto LABEL_145;
      case 2:
        if ( v9[0] > 200.0 || v9[0] < -3000.0 || v9[2] < -1500.0 || v9[2] > 1100.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium007"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium007"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium007"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium007"";
        }
        goto LABEL_145;
      case 3:
        if ( v9[0] > 1000.0 || v9[0] < 6.0 || v9[2] < -1100.0 || v9[2] > 400.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium022"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium022"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium022"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium022"";
        }
        goto LABEL_145;
      case 4:
        if ( v9[0] > 450.0 || v9[0] < -800.0 || v9[2] < -100.0 || v9[2] > 1400.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium016"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium016"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium016"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium016"";
        }
        goto LABEL_145;
      case 5:
        if ( v9[0] > -1300.0 || v9[0] < -3500.0 || v9[2] < 1400.0 || v9[2] > 4400.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium017"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium017"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium017"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium017"";
        }
        goto LABEL_145;
      case 6:
        if ( v9[0] > 4000.0 || v9[0] < 1500.0 || v9[2] < 1000.0 || v9[2] > 4400.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium004"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium004"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium004"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium004"";
        }
        goto LABEL_145;
      case 7:
        if ( v9[0] > 2400.0 || v9[0] < 100.0 || v9[2] < -3800.0 || v9[2] > -1500.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium020"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium020"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium020"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium020"";
        }
        goto LABEL_145;
      case 8:
        if ( v9[0] > 1700.0 || v9[0] < -700.0 || v9[2] < -4000.0 || v9[2] > -1500.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium018"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium018"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium018"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium018"";
        }
        goto LABEL_145;
      case 9:
        if ( v9[0] > 750.0 || v9[0] < -900.0 || v9[2] < -4000.0 || v9[2] > -1500.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium011"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium011"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium011"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium011"";
        }
        goto LABEL_145;
      case 10:
        if ( v9[0] > 500.0 || v9[0] < -3000.0 || v9[2] < -5500.0 || v9[2] > -1500.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium009"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium009"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium009"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium009"";
        }
        goto LABEL_145;
      case 11:
        if ( v9[0] > 2000.0 || v9[0] < -2500.0 || v9[2] < -4000.0 || v9[2] > 800.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium010"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium010"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium010"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium010"";
        }
        goto LABEL_145;
      case 12:
        if ( v9[0] > 200.0 || v9[0] < -2500.0 || v9[2] < -2500.0 || v9[2] > 800.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium013"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium013"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium013"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium013"";
        }
        goto LABEL_145;
      case 13:
        if ( v9[0] > 1300.0 || v9[0] < -700.0 || v9[2] < -2700.0 || v9[2] > 200.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium019"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium019"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium019"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium019"";
        }
        goto LABEL_145;
      case 14:
        if ( v9[0] > 2100.0 || v9[0] < -1700.0 || v9[2] < -2700.0 || v9[2] > -500.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium012"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium012"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium012"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium012"";
        }
        goto LABEL_145;
      case 15:
        if ( v9[0] > 1900.0 || v9[0] < 500.0 || v9[2] < -500.0 || v9[2] > 900.0 )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium035"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0xEE6C5AD3ECE0A82Dui64);
          v7 = ""lodlights_medium035"";
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""lodlights_medium035"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          nativeInit(0x41B4893843BBDB74ui64);
          v7 = ""lodlights_medium035"";
        }
        goto LABEL_145;
      case 16:
        if ( v9[0] <= 7000.0
          && v9[0] >= 2500.0
          && v9[2] >= -7000.0
          && (v9[2] <= -2500.0
           && (nativeInit(0x88A741E44A2B3495ui64),
               nativePush64((unsigned __int64)""h4_islandairstrip""),
               *(_DWORD *)nativeCall())
           || v9[2] >= -7000.0
           && v9[2] <= -2500.0
           && (nativeInit(0x88A741E44A2B3495ui64),
               nativePush64((unsigned __int64)""h4_islandx_maindock""),
               *(_DWORD *)nativeCall())) )
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""island_lodlights"");
          if ( *(_DWORD *)nativeCall() )
            goto LABEL_146;
          v8 = 0x41B4893843BBDB74i64;
        }
        else
        {
          nativeInit(0x88A741E44A2B3495ui64);
          nativePush64((unsigned __int64)""island_lodlights"");
          if ( !*(_DWORD *)nativeCall() )
            goto LABEL_146;
          v8 = 0xEE6C5AD3ECE0A82Dui64;
        }
        nativeInit(v8);
        v7 = ""island_lodlights"";
LABEL_145:
        nativePush64((unsigned __int64)v7);
        nativeCall();
LABEL_146:
        if ( v0 == 17 )
          v0 = 0;
LABEL_148:
        nativeInit(0x88A741E44A2B3495ui64);
        nativePush64((unsigned __int64)""apa_lodlights_medium009"");
        if ( *(_DWORD *)nativeCall() )
        {
          nativeInit(0x202709F4C58A0424ui64);
          nativePush64((unsigned __int64)""STRING"");
          nativeCall();
          nativeInit(0x6C188BE134E074AAui64);
          nativePush64((unsigned __int64)""apa15isactive"");
          nativeCall();
          nativeInit(0x2ED7843F8F801023ui64);
          nativePush64(0x7D0ui64);
          nativePush64(1ui64);
          nativeCall();
        }
        scriptWait(0);
        break;
      default:
        goto LABEL_146;
    }
  }
}
// 18000E220: using guessed type unsigned __int64 *nativeCall(void);
// 18000E228: using guessed type void __stdcall nativeInit(unsigned __int64);
// 18000E230: using guessed type void __stdcall scriptWait(unsigned int);
// 18000E258: using guessed type void __stdcall nativePush64(unsigned __int64);
// 1800010A0: using guessed type float var_50[8];

//----- (0000000180002270) ----------------------------------------------------
void __noreturn sub_180002270()
{
  sub_1800010A0();
}
// 180002274: control flows out of bounds to 180002279

//----- (000000018000296C) ----------------------------------------------------
void sub_18000296C()
{
  InitializeSListHead(&stru_180017F60);
}
// 180017F60: using guessed type union _SLIST_HEADER stru_180017F60;

//----- (000000018000297C) ----------------------------------------------------
__int64 sub_18000297C()
{
  return _std_type_info_destroy_list(&stru_180017F60);
}
// 1800032AC: using guessed type __int64 __fastcall _std_type_info_destroy_list(_QWORD);
// 180017F60: using guessed type union _SLIST_HEADER stru_180017F60;

//----- (0000000180002988) ----------------------------------------------------
void *sub_180002988()
{
  return &unk_180017F70;
}

//----- (0000000180002990) ----------------------------------------------------
void *sub_180002990()
{
  return &unk_180017F78;
}

//----- (0000000180002A3C) ----------------------------------------------------
char __fastcall sub_180002A3C(Concurrency::details::ScheduleGroupSegmentBase *a1)
{
  Concurrency::details::ScheduleGroupSegmentBase *v1; // rcx

  if ( !Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(a1) )
    return 0;
  if ( !Concurrency::details::ScheduleGroupSegmentBase::HasUnrealizedChores(v1) )
  {
    _vcrt_thread_detach();
    return 0;
  }
  return 1;
}
// 180002A4D: variable 'v1' is possibly undefined

//----- (0000000180002D30) ----------------------------------------------------
void *sub_180002D30()
{
  return &unk_180019B98;
}

//----- (0000000180002D38) ----------------------------------------------------
void sub_180002D38()
{
  dword_180017FC8 = 0;
}
// 180017FC8: using guessed type int dword_180017FC8;

//----- (0000000180002E8C) ----------------------------------------------------
void sub_180002E8C()
{
  void (**i)(void); // rbx

  for ( i = qword_180015AA8; i < qword_180015AA8; ++i )
  {
    if ( *i )
      (*i)();
  }
}
// 18000E270: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD);
// 180015AA8: using guessed type void (*qword_180015AA8[2])(void);

//----- (0000000180002EC8) ----------------------------------------------------
void sub_180002EC8()
{
  void (**i)(void); // rbx

  for ( i = &qword_180015AB8; i < &qword_180015AB8; ++i )
  {
    if ( *i )
      (*i)();
  }
}
// 18000E270: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD);
// 180015AB8: using guessed type void (*qword_180015AB8)(void);

//----- (0000000180003380) ----------------------------------------------------
__int64 __fastcall sub_180003380(void *a1, char a2, unsigned __int64 a3)
{
  __int64 v3; // r11

  memset(a1, a2, a3);
  return v3;
}
// 18000338B: variable 'v3' is possibly undefined

//----- (00000001800033A0) ----------------------------------------------------
__int64 __fastcall sub_1800033A0(__int64 a1, unsigned __int8 a2, unsigned __int64 a3)
{
  __m128i v4; // xmm0
  __int8 *v5; // r8
  __m128i *v6; // rcx
  unsigned __int64 v7; // r9
  unsigned __int64 i; // r9
  unsigned __int64 v9; // r8
  __int64 result; // rax
  __int64 v11; // rdx

  v11 = 0x101010101010101i64 * a2;
  v6 = (__m128i *)(a3 + a1);
  result = a1;
  switch ( a3 )
  {
    case 0ui64:
      return result;
    case 1ui64:
      goto LABEL_16;
    case 2ui64:
      goto LABEL_24;
    case 3ui64:
      goto LABEL_15;
    case 4ui64:
      goto LABEL_18;
    case 5ui64:
      goto LABEL_21;
    case 6ui64:
      goto LABEL_23;
    case 7ui64:
      goto LABEL_14;
    case 8ui64:
      *(_QWORD *)a1 = v11;
      return result;
    case 9ui64:
      *(__int64 *)((char *)v6[-1].m128i_i64 + 7) = v11;
      v6[-1].m128i_i8[15] = v11;
      return result;
    case 0xAui64:
      *(_QWORD *)a1 = v11;
      *(_WORD *)(a1 + 8) = v11;
      return result;
    case 0xBui64:
      *(_QWORD *)a1 = v11;
      *(_WORD *)(a1 + 8) = v11;
      *(_BYTE *)(a1 + 10) = v11;
      return result;
    case 0xCui64:
      *(__int64 *)((char *)v6[-1].m128i_i64 + 4) = v11;
LABEL_18:
      v6[-1].m128i_i32[3] = v11;
      return result;
    case 0xDui64:
      *(__int64 *)((char *)v6[-1].m128i_i64 + 3) = v11;
LABEL_21:
      *(__int32 *)((char *)&v6[-1].m128i_i32[2] + 3) = v11;
      v6[-1].m128i_i8[15] = v11;
      return result;
    case 0xEui64:
      *(__int64 *)((char *)v6[-1].m128i_i64 + 2) = v11;
LABEL_23:
      *(__int32 *)((char *)&v6[-1].m128i_i32[2] + 2) = v11;
LABEL_24:
      v6[-1].m128i_i16[7] = v11;
      return result;
    case 0xFui64:
      *(__int64 *)((char *)v6[-1].m128i_i64 + 1) = v11;
LABEL_14:
      *(__int32 *)((char *)&v6[-1].m128i_i32[2] + 1) = v11;
LABEL_15:
      *(__int16 *)((char *)&v6[-1].m128i_i16[6] + 1) = v11;
LABEL_16:
      v6[-1].m128i_i8[15] = v11;
      return result;
    case 0x10ui64:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v11;
      return result;
    default:
      v4 = _mm_unpacklo_epi8((__m128i)0x180000000ui64, (__m128i)0x180000000ui64);
      if ( a3 <= 0x80 )
        goto LABEL_7;
      if ( _bittest(dword_180017FCC, 1u) )
        return sub_180003380(v6, v11, a3);
      *v6 = v4;
      v5 = &v6->m128i_i8[a3];
      v6 = (__m128i *)((unsigned __int64)&v6[1] & 0xFFFFFFFFFFFFFFF0ui64);
      a3 = v5 - (__int8 *)v6;
      v7 = a3 >> 7;
      if ( a3 >> 7 )
      {
        do
        {
          *v6 = v4;
          v6[1] = v4;
          v6 += 8;
          v6[-6] = v4;
          v6[-5] = v4;
          --v7;
          v6[-4] = v4;
          v6[-3] = v4;
          v6[-2] = v4;
          v6[-1] = v4;
        }
        while ( v7 );
        a3 &= 0x7Fu;
      }
LABEL_7:
      for ( i = a3 >> 4; i; --i )
        *v6++ = v4;
      v9 = a3 & 0xF;
      if ( v9 )
        *(__m128i *)((char *)&v6[-1] + v9) = v4;
      return a1;
  }
}
// 180017FCC: using guessed type signed __int32 dword_180017FCC[29];

//----- (0000000180003C50) ----------------------------------------------------
__int64 __fastcall sub_180003C50(void *a1, __int64 a2, unsigned __int64 a3)
{
  const void *v3; // r10
  __int64 v4; // r11
  __int64 result; // rax

  result = v4;
  qmemcpy(a1, v3, a3);
  return result;
}
// 180003C52: variable 'v4' is possibly undefined
// 180003C5E: variable 'v3' is possibly undefined

//----- (0000000180003C70) ----------------------------------------------------
__int64 __fastcall sub_180003C70(__m128i *a1, const __m128i *a2, unsigned __int64 a3)
{
  bool v5; // cf
  __int64 v6; // rdx
  __int64 result; // rax
  __m128i v8; // xmm1
  __int8 v9; // r8
  __int16 v10; // cx
  __int8 v11; // r9
  __int8 v12; // r8
  __int16 v13; // r8
  __int16 v14; // r8
  __int8 v15; // r9
  __int32 v16; // ecx
  __int8 v17; // r9
  __int8 v18; // cl
  __int16 v19; // cx
  __int32 v20; // ecx
  __int32 v21; // ecx
  __int16 v22; // r9
  __int32 v23; // ecx
  __int16 v24; // r9
  __int8 v25; // r10
  __m128 v26; // xmm0
  __int8 *v27; // r8
  unsigned __int64 v28; // rcx
  __m128 v29; // xmm1
  unsigned __int64 v30; // rcx
  unsigned __int64 v31; // r8
  unsigned __int64 v32; // r9
  __int128 v33; // xmm0
  __int128 v34; // xmm1
  __int128 v35; // xmm1
  __int128 v36; // xmm1
  __m128 v37; // xmm0
  __m128 v38; // xmm1
  unsigned __int64 j; // r9
  unsigned __int64 v40; // r8
  __m128 v41; // xmm0
  __m128 v42; // xmm1
  __m128 v43; // xmm1
  __m128 v44; // xmm0
  __m128 v45; // xmm1
  __int8 *v46; // rcx
  __int128 v47; // xmm0
  unsigned __int64 v48; // rcx
  unsigned __int64 v49; // r8
  _OWORD *v50; // rax
  __int128 v51; // xmm1
  unsigned __int64 v52; // r9
  __int128 v53; // xmm0
  __int128 v54; // xmm1
  __int128 v55; // xmm1
  __int128 v56; // xmm1
  __int128 v57; // xmm0
  __int128 v58; // xmm1
  unsigned __int64 i; // r9

  result = (__int64)a1;
  switch ( a3 )
  {
    case 0ui64:
      return result;
    case 1ui64:
      a1->m128i_i8[0] = a2->m128i_i8[0];
      break;
    case 2ui64:
      a1->m128i_i16[0] = a2->m128i_i16[0];
      break;
    case 3ui64:
      v9 = a2->m128i_i8[2];
      a1->m128i_i16[0] = a2->m128i_i16[0];
      a1->m128i_i8[2] = v9;
      break;
    case 4ui64:
      a1->m128i_i32[0] = a2->m128i_i32[0];
      break;
    case 5ui64:
      v12 = a2->m128i_i8[4];
      a1->m128i_i32[0] = a2->m128i_i32[0];
      a1->m128i_i8[4] = v12;
      break;
    case 6ui64:
      v13 = a2->m128i_i16[2];
      a1->m128i_i32[0] = a2->m128i_i32[0];
      a1->m128i_i16[2] = v13;
      break;
    case 7ui64:
      v14 = a2->m128i_i16[2];
      v15 = a2->m128i_i8[6];
      a1->m128i_i32[0] = a2->m128i_i32[0];
      a1->m128i_i16[2] = v14;
      a1->m128i_i8[6] = v15;
      break;
    case 8ui64:
      a1->m128i_i64[0] = a2->m128i_i64[0];
      break;
    case 9ui64:
      v18 = a2->m128i_i8[8];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_BYTE *)(result + 8) = v18;
      break;
    case 0xAui64:
      v19 = a2->m128i_i16[4];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_WORD *)(result + 8) = v19;
      break;
    case 0xBui64:
      v10 = a2->m128i_i16[4];
      v11 = a2->m128i_i8[10];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_WORD *)(result + 8) = v10;
      *(_BYTE *)(result + 10) = v11;
      break;
    case 0xCui64:
      v20 = a2->m128i_i32[2];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_DWORD *)(result + 8) = v20;
      break;
    case 0xDui64:
      v16 = a2->m128i_i32[2];
      v17 = a2->m128i_i8[12];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_DWORD *)(result + 8) = v16;
      *(_BYTE *)(result + 12) = v17;
      break;
    case 0xEui64:
      v21 = a2->m128i_i32[2];
      v22 = a2->m128i_i16[6];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_DWORD *)(result + 8) = v21;
      *(_WORD *)(result + 12) = v22;
      break;
    case 0xFui64:
      v23 = a2->m128i_i32[2];
      v24 = a2->m128i_i16[6];
      v25 = a2->m128i_i8[14];
      *(_QWORD *)result = a2->m128i_i64[0];
      *(_DWORD *)(result + 8) = v23;
      *(_WORD *)(result + 12) = v24;
      *(_BYTE *)(result + 14) = v25;
      break;
    case 0x10ui64:
      *a1 = _mm_loadu_si128(a2);
      break;
    default:
      if ( a3 <= 0x20 )
      {
        v8 = *(const __m128i *)((char *)&a2[-1] + a3);
        *a1 = *a2;
        *(__m128i *)((char *)&a1[-1] + a3) = v8;
        result = (__int64)a1;
      }
      else
      {
        v5 = a2 < a1;
        v6 = (char *)a2 - (char *)a1;
        if ( v5 && a1 < (__m128i *)&a2->m128i_i8[a3] )
        {
          v46 = &a1->m128i_i8[a3];
          v47 = *(_OWORD *)&v46[v6 - 16];
          v48 = (unsigned __int64)(v46 - 16);
          v49 = a3 - 16;
          if ( (v48 & 0xF) != 0 )
          {
            v50 = (_OWORD *)v48;
            v48 &= 0xFFFFFFFFFFFFFFF0ui64;
            v51 = v47;
            v47 = *(_OWORD *)(v48 + v6);
            *v50 = v51;
            v49 = v48 - (_QWORD)a1;
          }
          v52 = v49 >> 7;
          if ( v49 >> 7 )
          {
            for ( *(_OWORD *)v48 = v47; ; *(_OWORD *)v48 = v58 )
            {
              v53 = *(_OWORD *)(v48 + v6 - 16);
              v54 = *(_OWORD *)(v48 + v6 - 32);
              v48 -= 128i64;
              *(_OWORD *)(v48 + 112) = v53;
              *(_OWORD *)(v48 + 96) = v54;
              v55 = *(_OWORD *)(v48 + v6 + 64);
              --v52;
              *(_OWORD *)(v48 + 80) = *(_OWORD *)(v48 + v6 + 80);
              *(_OWORD *)(v48 + 64) = v55;
              v56 = *(_OWORD *)(v48 + v6 + 32);
              *(_OWORD *)(v48 + 48) = *(_OWORD *)(v48 + v6 + 48);
              *(_OWORD *)(v48 + 32) = v56;
              v57 = *(_OWORD *)(v48 + v6 + 16);
              v58 = *(_OWORD *)(v48 + v6);
              if ( !v52 )
                break;
              *(_OWORD *)(v48 + 16) = v57;
            }
            *(_OWORD *)(v48 + 16) = v57;
            v49 &= 0x7Fu;
            v47 = v58;
          }
          for ( i = v49 >> 4; i; --i )
          {
            *(_OWORD *)v48 = v47;
            v48 -= 16i64;
            v47 = *(_OWORD *)(v48 + v6);
          }
          if ( (v49 & 0xF) != 0 )
            *a1 = *a2;
          *(_OWORD *)v48 = v47;
          result = (__int64)a1;
        }
        else
        {
          if ( a3 <= 0x80 )
          {
            v26 = *(__m128 *)((char *)a1 + v6);
            v28 = (unsigned __int64)&a1[1];
            v31 = a3 - 16;
          }
          else
          {
            if ( _bittest(dword_180017FCC, 1u) )
              return sub_180003C50(a1, v6, a3);
            v26 = *(__m128 *)((char *)a1 + v6);
            v27 = &a1->m128i_i8[a3];
            v28 = (unsigned __int64)&a1[1];
            if ( ((unsigned __int8)a1 & 0xF) != 0 )
            {
              v29 = v26;
              v30 = v28 & 0xFFFFFFFFFFFFFFF0ui64;
              v26 = *(__m128 *)(v30 + v6);
              v28 = v30 + 16;
              *a1 = (__m128i)v29;
            }
            v31 = (unsigned __int64)&v27[-v28];
            v32 = v31 >> 7;
            if ( v31 >> 7 )
            {
              *(__m128 *)(v28 - 16) = v26;
              if ( v32 <= qword_180017020 )
              {
                while ( 1 )
                {
                  v33 = *(_OWORD *)(v28 + v6);
                  v34 = *(_OWORD *)(v28 + v6 + 16);
                  v28 += 128i64;
                  *(_OWORD *)(v28 - 128) = v33;
                  *(_OWORD *)(v28 - 112) = v34;
                  v35 = *(_OWORD *)(v28 + v6 - 80);
                  --v32;
                  *(_OWORD *)(v28 - 96) = *(_OWORD *)(v28 + v6 - 96);
                  *(_OWORD *)(v28 - 80) = v35;
                  v36 = *(_OWORD *)(v28 + v6 - 48);
                  *(_OWORD *)(v28 - 64) = *(_OWORD *)(v28 + v6 - 64);
                  *(_OWORD *)(v28 - 48) = v36;
                  v37 = *(__m128 *)(v28 + v6 - 32);
                  v38 = *(__m128 *)(v28 + v6 - 16);
                  if ( !v32 )
                    break;
                  *(__m128 *)(v28 - 32) = v37;
                  *(__m128 *)(v28 - 16) = v38;
                }
              }
              else
              {
                while ( 1 )
                {
                  _mm_prefetch((const char *)(v28 + v6 + 512), 0);
                  v41 = *(__m128 *)(v28 + v6);
                  v42 = *(__m128 *)(v28 + v6 + 16);
                  v28 += 128i64;
                  _mm_stream_ps((float *)(v28 - 128), v41);
                  _mm_stream_ps((float *)(v28 - 112), v42);
                  v43 = *(__m128 *)(v28 + v6 - 80);
                  --v32;
                  _mm_stream_ps((float *)(v28 - 96), *(__m128 *)(v28 + v6 - 96));
                  _mm_stream_ps((float *)(v28 - 80), v43);
                  v44 = *(__m128 *)(v28 + v6 - 64);
                  v45 = *(__m128 *)(v28 + v6 - 48);
                  _mm_prefetch((const char *)(v28 + v6 + 576), 0);
                  _mm_stream_ps((float *)(v28 - 64), v44);
                  _mm_stream_ps((float *)(v28 - 48), v45);
                  v37 = *(__m128 *)(v28 + v6 - 32);
                  v38 = *(__m128 *)(v28 + v6 - 16);
                  if ( !v32 )
                    break;
                  _mm_stream_ps((float *)(v28 - 32), v37);
                  _mm_stream_ps((float *)(v28 - 16), v38);
                }
                _mm_sfence();
              }
              *(__m128 *)(v28 - 32) = v37;
              v31 &= 0x7Fu;
              v26 = v38;
            }
          }
          for ( j = v31 >> 4; j; --j )
          {
            *(__m128 *)(v28 - 16) = v26;
            v26 = *(__m128 *)(v28 + v6);
            v28 += 16i64;
          }
          v40 = v31 & 0xF;
          if ( v40 )
            *(_OWORD *)(v28 + v40 - 16) = *(_OWORD *)(v28 + v40 + v6 - 16);
          *(__m128 *)(v28 - 16) = v26;
          result = (__int64)a1;
        }
      }
      break;
  }
  return result;
}
// 180017020: using guessed type __int64 qword_180017020;
// 180017FCC: using guessed type signed __int32 dword_180017FCC[29];

//----- (0000000180004100) ----------------------------------------------------
__int64 __fastcall sub_180004100(__int64 a1, __int64 a2, __int64 a3, unsigned int a4)
{
  void (__fastcall *v4)(__int64); // rax
  __int64 v5; // rax

  v4 = (void (__fastcall *)(__int64))NLG_Notify(a1, a2, a4);
  v4(a3);
  v5 = nullsub_1();
  return NLG_Notify(v5, a2, 2i64);
}
// 180003540: using guessed type __int64 __fastcall NLG_Notify(_QWORD, _QWORD, _QWORD);
// 180003570: using guessed type __int64 nullsub_1(void);

//----- (00000001800045F0) ----------------------------------------------------
void __fastcall sub_1800045F0(__int64 a1)
{
  qword_180018150 = a1;
}
// 180018150: using guessed type __int64 qword_180018150;

//----- (0000000180004614) ----------------------------------------------------
__int64 sub_180004614()
{
  return (unsigned int)dword_180018148;
}
// 180018148: using guessed type int dword_180018148;

//----- (0000000180004B80) ----------------------------------------------------
__int64 __fastcall sub_180004B80(void **a1)
{
  void *v1; // rcx
  __int64 result; // rax

  v1 = *a1;
  if ( v1 != qword_180018280 )
    return unknown_libname_10(v1);
  return result;
}

//----- (0000000180004B9C) ----------------------------------------------------
__int64 __fastcall sub_180004B9C(void **a1)
{
  void *v1; // rcx
  __int64 result; // rax

  v1 = *a1;
  if ( v1 != qword_180018278 )
    return unknown_libname_10(v1);
  return result;
}

//----- (0000000180004DE8) ----------------------------------------------------
char sub_180004DE8()
{
  return 1;
}

//----- (0000000180004E3C) ----------------------------------------------------
__vcrt_bool sub_180004E3C()
{
  return _vcrt_uninitialize(0);
}

//----- (0000000180005858) ----------------------------------------------------
void __fastcall sub_180005858(int a1)
{
  EnterCriticalSection((LPCRITICAL_SECTION)&unk_1800182C0 + a1);
}

//----- (00000001800058AC) ----------------------------------------------------
void __fastcall sub_1800058AC(int a1)
{
  LeaveCriticalSection((LPCRITICAL_SECTION)&unk_1800182C0 + a1);
}

//----- (0000000180005A60) ----------------------------------------------------
void __fastcall sub_180005A60(__int64 a1)
{
  qword_1800184F8 = a1;
}
// 1800184F8: using guessed type __int64 qword_1800184F8;

//----- (0000000180007C64) ----------------------------------------------------
char sub_180007C64()
{
  hHeap = 0i64;
  return 1;
}

//----- (0000000180007FA4) ----------------------------------------------------
void __fastcall sub_180007FA4(__int64 a1)
{
  qword_180018B18 = a1;
}
// 180018B18: using guessed type __int64 qword_180018B18;

//----- (00000001800080A8) ----------------------------------------------------
__int64 __fastcall sub_1800080A8(unsigned int a1)
{
  _QWORD *v2; // r13
  char v3; // r14
  uintptr_t i; // rcx
  __int64 *v5; // rdi
  _QWORD *v6; // rax
  __int64 v8; // rsi
  int v9; // r12d
  __int64 v10; // rcx
  __int64 v11; // rax
  __int64 v12; // rcx
  int v13; // [rsp+78h] [rbp+10h]
  __int64 v14; // [rsp+80h] [rbp+18h]

  v2 = 0i64;
  v13 = 0;
  v3 = 1;
  if ( a1 != 2 )
  {
    switch ( a1 )
    {
      case 4u:
        goto LABEL_14;
      case 6u:
        goto LABEL_8;
      case 8u:
      case 0xBu:
LABEL_14:
        v6 = (_QWORD *)_acrt_getptd_noexit();
        v2 = v6;
        if ( !v6 )
          return 0xFFFFFFFFi64;
        for ( i = *v6; i != *v6 + 192i64; i += 16i64 )
        {
          if ( *(_DWORD *)(i + 4) == a1 )
            goto LABEL_21;
        }
        i = 0i64;
LABEL_21:
        if ( i )
        {
          v5 = (__int64 *)(i + 8);
          v3 = 0;
          goto LABEL_28;
        }
        break;
      default:
        if ( a1 == 15 || a1 - 21 <= 1 )
          goto LABEL_8;
        break;
    }
    *errno() = 22;
    invalid_parameter_noinfo();
    return 0xFFFFFFFFi64;
  }
LABEL_8:
  i = a1 - 2;
  if ( (_DWORD)i )
  {
    i = (unsigned int)(i - 4);
    if ( !(_DWORD)i )
    {
LABEL_24:
      v5 = &qword_180018B30;
      goto LABEL_28;
    }
    i = (unsigned int)(i - 9);
    if ( (_DWORD)i )
    {
      i = (unsigned int)(i - 6);
      if ( (_DWORD)i )
      {
        if ( (_DWORD)i != 1 )
        {
          v5 = 0i64;
          goto LABEL_28;
        }
        goto LABEL_24;
      }
      v5 = &qword_180018B28;
    }
    else
    {
      v5 = &qword_180018B38;
    }
  }
  else
  {
    v5 = &qword_180018B20;
  }
LABEL_28:
  v14 = 0i64;
  if ( v3 )
    sub_180005858(3);
  v8 = *v5;
  if ( v3 )
  {
    i = _security_cookie & 0x3F;
    v8 = __ROR8__(_security_cookie ^ v8, i);
  }
  if ( v8 == 1 )
  {
    v9 = 2320;
    goto LABEL_44;
  }
  if ( !v8 )
  {
    if ( v3 )
      sub_1800058AC(3);
    exit(3);
  }
  v9 = 2320;
  if ( a1 > 0xB || !_bittest(&v9, a1) )
    goto LABEL_38;
  v14 = v2[1];
  v2[1] = 0i64;
  if ( a1 == 8 )
  {
    v13 = *(_DWORD *)(((__int64 (*)(void))_acrt_getptd)() + 16);
    *(_DWORD *)(_acrt_getptd(v10) + 16) = 140;
LABEL_38:
    if ( a1 == 8 )
    {
      v11 = *v2 + 48i64;
      i = *v2 + 192i64;
      while ( v11 != i )
      {
        *(_QWORD *)(v11 + 8) = 0i64;
        v11 += 16i64;
      }
      goto LABEL_44;
    }
  }
  *v5 = _security_cookie;
LABEL_44:
  if ( v3 )
    sub_1800058AC(3);
  if ( v8 != 1 )
  {
    if ( a1 == 8 )
    {
      _acrt_getptd(i);
      _guard_dispatch_icall_fptr(8i64);
    }
    else
    {
      _guard_dispatch_icall_fptr(a1);
    }
    if ( a1 <= 0xB && _bittest(&v9, a1) )
    {
      v2[1] = v14;
      if ( a1 == 8 )
        *(_DWORD *)(_acrt_getptd(v12) + 16) = v13;
    }
  }
  return 0i64;
}
// 180008233: variable 'v10' is possibly undefined
// 1800082A9: variable 'i' is possibly undefined
// 1800082EC: variable 'v12' is possibly undefined
// 180005568: using guessed type __int64 __fastcall _acrt_getptd(_QWORD);
// 1800056E4: using guessed type __int64 _acrt_getptd_noexit(void);
// 18000CE00: using guessed type __int64 __fastcall guard_dispatch_icall_nop();
// 18000E270: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD);
// 180018B20: using guessed type __int64 qword_180018B20;
// 180018B28: using guessed type __int64 qword_180018B28;
// 180018B30: using guessed type __int64 qword_180018B30;
// 180018B38: using guessed type __int64 qword_180018B38;

//----- (0000000180008334) ----------------------------------------------------
void __fastcall sub_180008334(__int64 a1)
{
  qword_180018B40 = a1;
}
// 180018B40: using guessed type __int64 qword_180018B40;

//----- (0000000180008794) ----------------------------------------------------
void __fastcall sub_180008794(__int64 a1)
{
  EnterCriticalSection((LPCRITICAL_SECTION)(a1 + 48));
}

//----- (00000001800087A0) ----------------------------------------------------
void __fastcall sub_1800087A0(__int64 a1)
{
  LeaveCriticalSection((LPCRITICAL_SECTION)(a1 + 48));
}

//----- (0000000180008990) ----------------------------------------------------
__int64 __fastcall sub_180008990(__int64 a1, __int64 *a2)
{
  __int64 result; // rax

  result = qword_180018B48;
  if ( *a2 != qword_180018B48 )
  {
    result = *(unsigned int *)(a1 + 936);
    if ( ((unsigned int)result & dword_180017808) == 0 )
    {
      result = _acrt_update_thread_locale_data();
      *a2 = result;
    }
  }
  return result;
}
// 180008E30: using guessed type __int64 _acrt_update_thread_locale_data(void);
// 180017808: using guessed type int dword_180017808;
// 180018B48: using guessed type __int64 qword_180018B48;

//----- (00000001800089C4) ----------------------------------------------------
__int64 __fastcall sub_1800089C4(__int64 a1, __int64 *a2)
{
  __int64 result; // rax

  result = (__int64)Block;
  if ( (struct __crt_multibyte_data *)*a2 != Block )
  {
    result = *(unsigned int *)(a1 + 936);
    if ( ((unsigned int)result & dword_180017808) == 0 )
    {
      result = _acrt_update_thread_multibyte_data();
      *a2 = result;
    }
  }
  return result;
}
// 180007094: using guessed type __int64 _acrt_update_thread_multibyte_data(void);
// 180017808: using guessed type int dword_180017808;

//----- (0000000180008F08) ----------------------------------------------------
__int64 sub_180008F08()
{
  return (unsigned int)dword_180018B7C;
}
// 180018B7C: using guessed type int dword_180018B7C;

//----- (0000000180008F10) ----------------------------------------------------
void __fastcall sub_180008F10(
        unsigned __int64 a1,
        unsigned __int64 a2,
        unsigned __int64 a3,
        int (__fastcall *a4)(unsigned __int64, unsigned __int64))
{
  unsigned __int64 v6; // r13
  unsigned __int64 v7; // r15
  __int64 v8; // rcx
  unsigned __int64 v9; // rbx
  unsigned __int64 v10; // rbx
  unsigned __int64 i; // rdi
  unsigned __int64 v12; // r8
  _BYTE *v13; // rdx
  unsigned __int64 v14; // rbx
  char v15; // cl
  __int64 v16; // rax
  unsigned __int64 v17; // rbx
  unsigned __int64 v18; // rdi
  _BYTE *v19; // r8
  unsigned __int64 v20; // r9
  char v21; // cl
  unsigned __int64 v22; // r8
  _BYTE *v23; // rdx
  unsigned __int64 v24; // r9
  char v25; // cl
  unsigned __int64 v26; // r8
  _BYTE *v27; // rdx
  unsigned __int64 v28; // r9
  char v29; // cl
  unsigned __int64 v30; // rbx
  unsigned __int64 v31; // rsi
  unsigned __int64 v32; // rbp
  _BYTE *v33; // rdx
  unsigned __int64 v34; // r9
  char v35; // cl
  unsigned __int64 v36; // rax
  __int64 v37; // [rsp+20h] [rbp-448h]
  __int64 v38[124]; // [rsp+30h] [rbp-438h]

  v6 = a1;
  if ( (a1 || !a2) && a3 && a4 )
  {
    if ( a2 >= 2 )
    {
      v7 = a1 + a3 * (a2 - 1);
      v8 = 0i64;
      v37 = 0i64;
      while ( 1 )
      {
        while ( 1 )
        {
          v9 = (v7 - v6) / a3 + 1;
          if ( v9 <= 8 )
          {
            if ( v7 > v6 )
            {
              do
              {
                v10 = v6;
                for ( i = a3 + v6; i <= v7; i += a3 )
                {
                  if ( a4(i, v10) > 0 )
                    v10 = i;
                }
                v12 = a3;
                v13 = (_BYTE *)v7;
                if ( v10 != v7 )
                {
                  v14 = v10 - v7;
                  do
                  {
                    v15 = v13[v14];
                    v13[v14] = *v13;
                    *v13++ = v15;
                    --v12;
                  }
                  while ( v12 );
                }
                v7 -= a3;
              }
              while ( v7 > v6 );
              v8 = v37;
            }
            goto LABEL_19;
          }
          v17 = a3 * (v9 >> 1);
          v18 = v17 + v6;
          if ( a4(v6, v17 + v6) > 0 )
          {
            v20 = a3;
            v19 = (_BYTE *)(v17 + v6);
            if ( v6 != v18 )
            {
              do
              {
                v21 = v19[-v17];
                v19[-v17] = *v19;
                *v19++ = v21;
                --v20;
              }
              while ( v20 );
            }
          }
          if ( ((int (__fastcall *)(unsigned __int64, unsigned __int64, _BYTE *, unsigned __int64))a4)(v6, v7, v19, v20) > 0 )
          {
            v22 = a3;
            v23 = (_BYTE *)v7;
            if ( v6 != v7 )
            {
              v24 = v6 - v7;
              do
              {
                v25 = v23[v24];
                v23[v24] = *v23;
                *v23++ = v25;
                --v22;
              }
              while ( v22 );
            }
          }
          if ( ((int (__fastcall *)(unsigned __int64, unsigned __int64, unsigned __int64))a4)(v17 + v6, v7, v22) > 0 )
          {
            v26 = a3;
            v27 = (_BYTE *)v7;
            if ( v18 != v7 )
            {
              v28 = v18 - v7;
              do
              {
                v29 = v27[v28];
                v27[v28] = *v27;
                *v27++ = v29;
                --v26;
              }
              while ( v26 );
            }
          }
          v30 = v6;
          v31 = v7;
          while ( 1 )
          {
            if ( v18 > v30 )
            {
              while ( 1 )
              {
                v30 += a3;
                if ( v30 >= v18 )
                  break;
                if ( ((int (__fastcall *)(unsigned __int64, unsigned __int64, unsigned __int64))a4)(v30, v18, v26) > 0 )
                {
                  if ( v18 > v30 )
                    goto LABEL_39;
                  goto LABEL_37;
                }
              }
            }
            do
LABEL_37:
              v30 += a3;
            while ( v30 <= v7
                 && ((int (__fastcall *)(unsigned __int64, unsigned __int64, unsigned __int64))a4)(v30, v18, v26) <= 0 );
            do
            {
LABEL_39:
              v32 = v31;
              v31 -= a3;
            }
            while ( v31 > v18 && a4(v31, v18) > 0 );
            if ( v31 < v30 )
              break;
            v26 = a3;
            v33 = (_BYTE *)v31;
            if ( v30 != v31 )
            {
              v34 = v30 - v31;
              do
              {
                v35 = v33[v34];
                v33[v34] = *v33;
                *v33++ = v35;
                --v26;
              }
              while ( v26 );
            }
            v36 = v30;
            if ( v18 != v31 )
              v36 = v18;
            v18 = v36;
          }
          if ( v18 < v32 )
          {
            while ( 1 )
            {
              v32 -= a3;
              if ( v32 <= v18 )
                break;
              if ( a4(v32, v18) )
              {
                if ( v18 < v32 )
                  goto LABEL_54;
                goto LABEL_52;
              }
            }
          }
          do
LABEL_52:
            v32 -= a3;
          while ( v32 > v6 && !a4(v32, v18) );
LABEL_54:
          v8 = v37;
          if ( (__int64)(v32 - v6) >= (__int64)(v7 - v30) )
            break;
          if ( v30 < v7 )
          {
            v38[v37] = v30;
            v38[v37 + 62] = v7;
            v8 = ++v37;
          }
          if ( v6 >= v32 )
          {
LABEL_19:
            v16 = v8--;
            v37 = v8;
            if ( v16 <= 0 )
              return;
            v6 = v38[v8];
            v7 = v38[v8 + 62];
          }
          else
          {
            v7 = v32;
          }
        }
        if ( v6 < v32 )
        {
          v38[v37] = v6;
          v38[v37 + 62] = v32;
          v8 = ++v37;
        }
        if ( v30 >= v7 )
          goto LABEL_19;
        v6 = v30;
      }
    }
  }
  else
  {
    *errno() = 22;
    invalid_parameter_noinfo();
  }
}
// 1800090B4: variable 'v19' is possibly undefined
// 1800090B4: variable 'v20' is possibly undefined
// 1800090F1: variable 'v22' is possibly undefined
// 180009146: variable 'v26' is possibly undefined
// 18000E270: using guessed type __int64 (__fastcall *_guard_dispatch_icall_fptr)(_QWORD);

//----- (000000018000A198) ----------------------------------------------------
void __fastcall sub_18000A198(int a1)
{
  EnterCriticalSection((LPCRITICAL_SECTION)(qword_180018710[(__int64)a1 >> 6] + 72i64 * (a1 & 0x3F)));
}
// 180018710: using guessed type __int64 qword_180018710[128];

//----- (000000018000A1C0) ----------------------------------------------------
void __fastcall sub_18000A1C0(int a1)
{
  LeaveCriticalSection((LPCRITICAL_SECTION)(qword_180018710[(__int64)a1 >> 6] + 72i64 * (a1 & 0x3F)));
}
// 180018710: using guessed type __int64 qword_180018710[128];

//----- (000000018000AD94) ----------------------------------------------------
__int64 __fastcall sub_18000AD94(int a1, _BYTE *a2, unsigned int a3)
{
  __int64 v3; // r14
  __int64 v7; // r13
  __int64 v8; // r15
  __int64 v9; // rcx
  char v10; // si
  int v11; // ebx
  __int64 v12; // rcx
  int v13; // esi
  _BYTE *v14; // r12
  _WORD *v15; // r14
  DWORD v16; // ebx
  __int64 v17; // rax
  __int64 v18; // xmm0_8
  __int64 v19; // rcx
  void *v20; // rcx
  DWORD NumberOfBytesWritten[2]; // [rsp+30h] [rbp-30h] BYREF
  int v22; // [rsp+38h] [rbp-28h]
  __int64 v23; // [rsp+40h] [rbp-20h]
  int Mode[4]; // [rsp+50h] [rbp-10h] BYREF

  v3 = a3;
  if ( !a3 )
    return 0i64;
  if ( !a2
    || (v7 = (__int64)a1 >> 6,
        v8 = 9i64 * (a1 & 0x3F),
        v9 = qword_180018710[v7],
        v10 = *(_BYTE *)(v9 + 72i64 * (a1 & 0x3F) + 57),
        (unsigned __int8)(v10 - 1) <= 1u)
    && (a3 & 1) != 0 )
  {
    *_doserrno() = 0;
    *errno() = 22;
    invalid_parameter_noinfo();
    return 0xFFFFFFFFi64;
  }
  if ( (*(_BYTE *)(v9 + 72i64 * (a1 & 0x3F) + 56) & 0x20) != 0 )
    common_lseek_nolock<__int64>((unsigned int)a1, 0i64, 2i64);
  v11 = 0;
  v23 = 0i64;
  if ( !isatty(a1)
    || *(char *)(qword_180018710[v7] + 72i64 * (a1 & 0x3F) + 56) >= 0
    || !*(_QWORD *)(*(_QWORD *)(_acrt_getptd(v12) + 144) + 312i64)
    && !*(_BYTE *)(qword_180018710[v7] + 72i64 * (a1 & 0x3F) + 57)
    || !GetConsoleMode(*(HANDLE *)(qword_180018710[v7] + 72i64 * (a1 & 0x3F) + 40), (LPDWORD)Mode) )
  {
    v19 = qword_180018710[v7];
    if ( *(char *)(v19 + 72i64 * (a1 & 0x3F) + 56) >= 0 )
    {
      v20 = *(void **)(v19 + 72i64 * (a1 & 0x3F) + 40);
      *(_QWORD *)NumberOfBytesWritten = 0i64;
      v22 = 0;
      if ( !WriteFile(v20, a2, v3, &NumberOfBytesWritten[1], 0i64) )
        NumberOfBytesWritten[0] = GetLastError();
      v11 = v22;
LABEL_38:
      v18 = *(_QWORD *)NumberOfBytesWritten;
      goto LABEL_39;
    }
    if ( v10 )
    {
      if ( v10 == 1 )
      {
        v17 = write_text_utf8_nolock(NumberOfBytesWritten, (unsigned int)a1, a2, (unsigned int)v3);
      }
      else
      {
        if ( v10 != 2 )
          goto LABEL_40;
        v17 = write_text_utf16le_nolock(NumberOfBytesWritten, (unsigned int)a1, a2, (unsigned int)v3);
      }
    }
    else
    {
      v17 = sub_18000A918(NumberOfBytesWritten, (unsigned int)a1, a2, (unsigned int)v3);
    }
LABEL_27:
    v18 = *(_QWORD *)v17;
    v11 = *(_DWORD *)(v17 + 8);
LABEL_39:
    v23 = v18;
    goto LABEL_40;
  }
  if ( !v10 )
  {
    v17 = write_double_translated_ansi_nolock(NumberOfBytesWritten, (unsigned int)a1, a2, (unsigned int)v3);
    goto LABEL_27;
  }
  if ( (unsigned __int8)(v10 - 1) <= 1u )
  {
    v13 = 0;
    v14 = &a2[v3];
    *(_QWORD *)NumberOfBytesWritten = 0i64;
    v15 = a2;
    if ( a2 < v14 )
    {
      v16 = NumberOfBytesWritten[1];
      while ( 1 )
      {
        LOWORD(Mode[0]) = *v15;
        if ( putwch_nolock(Mode[0]) != LOWORD(Mode[0]) )
          break;
        v16 += 2;
        NumberOfBytesWritten[1] = v16;
        if ( LOWORD(Mode[0]) == 10 )
        {
          if ( putwch_nolock(0xDu) != 13 )
            break;
          NumberOfBytesWritten[1] = ++v16;
          ++v13;
        }
        if ( ++v15 >= (_WORD *)v14 )
          goto LABEL_25;
      }
      NumberOfBytesWritten[0] = GetLastError();
    }
LABEL_25:
    v11 = v13;
    goto LABEL_38;
  }
LABEL_40:
  if ( HIDWORD(v23) )
    return (unsigned int)(HIDWORD(v23) - v11);
  if ( (_DWORD)v23 )
  {
    if ( (_DWORD)v23 == 5 )
    {
      *errno() = 9;
      *_doserrno() = 5;
    }
    else
    {
      _acrt_errno_map_os_error();
    }
    return 0xFFFFFFFFi64;
  }
  if ( (*(_BYTE *)(qword_180018710[v7] + 8 * v8 + 56) & 0x40) == 0 || *a2 != 26 )
  {
    *errno() = 28;
    *_doserrno() = 0;
    return 0xFFFFFFFFi64;
  }
  return 0i64;
}
// 18000AE55: variable 'v12' is possibly undefined
// 180005568: using guessed type __int64 __fastcall _acrt_getptd(_QWORD);
// 180005BC8: using guessed type __int64 _acrt_errno_map_os_error(void);
// 18000A43C: using guessed type __int64 __fastcall write_double_translated_ansi_nolock(_QWORD, _QWORD, _QWORD, _QWORD);
// 18000A918: using guessed type __int64 __fastcall sub_18000A918(_QWORD, _QWORD, _QWORD, _QWORD);
// 18000AA1C: using guessed type __int64 __fastcall write_text_utf16le_nolock(_QWORD, _QWORD, _QWORD, _QWORD);
// 18000AB38: using guessed type __int64 __fastcall write_text_utf8_nolock(_QWORD, _QWORD, _QWORD, _QWORD);
// 18000B758: using guessed type __int64 __fastcall common_lseek_nolock<__int64>(_QWORD, _QWORD, _QWORD);
// 180018710: using guessed type __int64 qword_180018710[128];
// 18000AD94: using guessed type DWORD Mode[4];

//----- (000000018000B6B4) ----------------------------------------------------
__int64 sub_18000B6B4()
{
  return (unsigned int)dword_180018B88;
}
// 180018B88: using guessed type int dword_180018B88;

//----- (000000018000C060) ----------------------------------------------------
BOOL sub_18000C060()
{
  BOOL result; // eax

  if ( (unsigned __int64)hObject <= 0xFFFFFFFFFFFFFFFDui64 )
    return CloseHandle(hObject);
  return result;
}

//----- (000000018000C1B0) ----------------------------------------------------
__int64 __fastcall sub_18000C1B0(int a1)
{
  int *v2; // [rsp+20h] [rbp-18h] BYREF
  int v3; // [rsp+40h] [rbp+8h] BYREF
  char v4; // [rsp+48h] [rbp+10h] BYREF
  int v5; // [rsp+50h] [rbp+18h] BYREF
  int v6; // [rsp+58h] [rbp+20h] BYREF

  v3 = a1;
  if ( a1 == -2 )
  {
    *_doserrno() = 0;
    *errno() = 9;
  }
  else
  {
    if ( a1 >= 0
      && a1 < (unsigned int)dword_180018B10
      && (*(_BYTE *)(qword_180018710[(__int64)a1 >> 6] + 72i64 * (a1 & 0x3F) + 56) & 1) != 0 )
    {
      v5 = a1;
      v6 = a1;
      v2 = &v3;
      return ((__int64 (__fastcall *)(char *, int *, int **, int *))__crt_seh_guarded_call<int>::operator()<_lambda_751a882b2c74d4b022dec766aa51a29a_,_lambda_628dfdc04ba53c8bfc02c9951375f3f5_ &,_lambda_f6c7be5f7998530c34de24c7437d6b54_>)(
               &v4,
               &v6,
               &v2,
               &v5);
    }
    *_doserrno() = 0;
    *errno() = 9;
    invalid_parameter_noinfo();
  }
  return 0xFFFFFFFFi64;
}
// 18000C13C: using guessed type __int64 __fastcall __crt_seh_guarded_call<int>::operator()<_lambda_751a882b2c74d4b022dec766aa51a29a_,_lambda_628dfdc04ba53c8bfc02c9951375f3f5_ &,_lambda_f6c7be5f7998530c34de24c7437d6b54_>(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 180018710: using guessed type __int64 qword_180018710[128];
// 180018B10: using guessed type int dword_180018B10;

// nfuncs=321 queued=43 decompiled=43 lumina nreq=0 worse=0 better=0
// ALL OK, 43 function(s) have been successfully decompiled
"
YLarv8js,Profiler.cs,klassekatze,C#,Friday 6th of October 2023 05:20:17 PM CDT,"using Sandbox.ModAPI.Ingame;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace IngameScript
{
	public partial class Program : MyGridProgram
	{
		public class Profiler
		{


			static bool PROFILING_ENABLED = true;
			static List<Profiler> profilers = new List<Profiler>();
			const int mstracklen = 60;
			double[] mstrack = new double[mstracklen];
			double msdiv = 1.0d / mstracklen;
			int mscursor = 0;
			DateTime start_time = DateTime.MinValue;
			string Name = """";
			string pre = """";
			string post = """";
			int _ticks_between_calls = 1;
			int ltick = int.MinValue;
			//..int callspertick = 1;

			static int base_sort_position_c = 0;
			int base_sort_position = 0;

			bool nevercalled = true;
			//bool closed = true;
			public int getSortPosition()
			{
				if (nevercalled) return int.MaxValue;
				int mult = (int)Math.Pow(10, 8 - (depth * 2));
				if (parent != null) return parent.getSortPosition() + (base_sort_position * mult);
				return base_sort_position * mult;
			}
			static int basep = (int)Math.Pow(10, 5);
			public Profiler(string name)
			{
				if (PROFILING_ENABLED)
				{
					Name = name;
					profilers.Add(this);
					for(var i =0; i < mstracklen; i++)mstrack[i] = 0;
					base_sort_position = base_sort_position_c;
					base_sort_position_c += 1;
				}
			}
			public void s()
			{
				start();
			}
			public void e()
			{
				stop();
			}
			static List<Profiler> stack = new List<Profiler>();
			Profiler parent = null;
			int depth = 0;
			bool adding = false;
			public void start()
			{
				if (PROFILING_ENABLED)
				{
					//closed = false;
					nevercalled = false;
					if (tick != ltick)
					{
						if (_ticks_between_calls == 1 && ltick != int.MinValue)
						{
							_ticks_between_calls = tick - ltick;
						}else
						{
							var tbc = tick - ltick;
							if (tbc != _ticks_between_calls)
							{
								_ticks_between_calls = 1;
								for (var i = 0; i < mstracklen; i++) mstrack[i] = 0;
							}
						}

						ltick = tick;
						//callspertick = 1;
						adding = false;
					}
					else
					{
						adding = true;
					}
					if (depth == 0) depth = stack.Count;
					if (depth > 11) depth = 11;
					if (stack.Count > 0 && parent == null) parent = stack[stack.Count - 1];
					stack.Add(this);
					start_time = DateTime.Now;
				}
			}
			double lastms = 0;
			double average = 0;


			/// <summary>
			/// records a fake ms consumption for this timeframe - for tests or demo
			/// </summary>
			public double FAKE_stop(double fakems)
			{
				return stop(fakems);
			}
			/// <summary>
			/// adds the elapsed time since start() to the records
			/// </summary>
			public double stop()
			{
				double time = 0;
				if (PROFILING_ENABLED)
				{
					//closed = true;
					time = (DateTime.Now - start_time).TotalMilliseconds;
				}
				return stop(time);
			}

			private double stop(double _ms)
			{
				double time = 0;
				if (PROFILING_ENABLED)
				{
					time = _ms;

					stack.Pop();
					if (parent != null)
					{
						depth = parent.depth + 1;
					}

					//if(!adding)mscursor = (mscursor + 1) % mstracklen;


					if (!adding) mstrack[mscursor] = 0;
					mstrack[mscursor] += time;
					if (!adding) mscursor = (mscursor + 1) % mstracklen;

					average = 0d;
					foreach (double ms in mstrack) average += ms;
					average *= msdiv;
					average /= _ticks_between_calls;
					lastms = time;
				}
				return time;
			}
			/// <summary>
			/// generates a monospaced report text. If called every tick, every 120 ticks it will recalculate treeview data.
			/// </summary>
			//the treeview can be initially inaccurate as some profilers might not be called every tick, depending on program architecture
			public string getReport()
			{
				if (PROFILING_ENABLED)
				{
					if (tick % 120 == 25)//recalculate hacky treeview data, delayed by 25 ticks from program start
					{
						try
						{
							profilers.Sort(delegate (Profiler x, Profiler y)
							{
								return x.getSortPosition().CompareTo(y.getSortPosition());
							});
						}
						catch (Exception) { }

						for (int i = 0; i < profilers.Count; i++)
						{
							Profiler p = profilers[i];

							p.pre = """";
							if (p.depth > 0 && p.parent != null)
							{
								bool parent_has_future_siblings = false;
								bool has_future_siblings_under_parent = false;
								for (int b = i + 1; b < profilers.Count; b++)
								{
									if (profilers[b].depth == p.parent.depth) parent_has_future_siblings = true;
									if (profilers[b].depth == p.depth) has_future_siblings_under_parent = true;
									if (profilers[b].depth < p.depth) break;

								}
								while (p.pre.Length < p.parent.depth)
								{
									if (parent_has_future_siblings) p.pre += ""│"";
									else p.pre += "" "";
								}
								bool last = false;

								if (!has_future_siblings_under_parent)
								{
									if (i < profilers.Count - 1)
									{
										if (profilers[i + 1].depth != p.depth) last = true;
									}
									else last = true;
								}
								if (last) p.pre += ""└"";
								else p.pre += ""├"";
								while (p.pre.Length < p.depth) p.pre += ""─"";
							}
						}
						int mlen = 0;
						foreach (Profiler p in profilers) if (p.pre.Length + p.Name.Length > mlen) mlen = p.pre.Length + p.Name.Length;
						foreach (Profiler p in profilers)
						{
							p.post = """";
							int l = p.pre.Length + p.Name.Length + p.post.Length;
							if (l < mlen) p.post = new string('_', mlen - l);
						}
					}
					if (nevercalled) return ""!!!!"" + Name + ""!!!!: NEVER CALLED!"";
					return pre + Name + post + "": "" + lastms.ToString(""0.00"") + "";"" + average.ToString(""0.00"");
				}
				return """";
			}
			static public string getAllReports()
			{
				string r = """";
				if (PROFILING_ENABLED)
				{
					foreach (Profiler watch in profilers)
					{
						r += watch.getReport() + ""\n"";
					}
				}
				if (stack.Count > 0)
				{
					r += ""profile stack error:\n"";
					r += stack.Count + ""\n"";
					foreach (var s in stack)
					{
						r += s.Name + "","";
					}
				}
				return r;
			}
		}
	}
}"
9fBWHPUg,Untitled,howudodat,Java,Friday 6th of October 2023 05:11:09 PM CDT,"import java.util.*;
import java.lang.*;
import java.io.*;

import java.util.*;
import java.lang.*;
import java.io.*;

// The main method must be in a class named ""Main"".
class Main {
    public static void main(String[] args) {
        new Main().doStuff();
    }

    public void doStuff() {
        String[] arrChoices = { ""abc"", ""xyz"", ""123"" };
        ArrayList<String> al = new ArrayList<String>(Arrays.asList(arrChoices));

        DlgPicker2<String> dlg = new DlgPicker2(
            (dialog, aldata) -> {
                for (String str : aldata)
                    System.out.println(str);
            }
        );

        dlg.setData(al);
        dlg.onClose();
        
    }

    public class DlgPicker2<T> { 
    	protected PickerCloseHandler listener = null;
    	protected ArrayList<T> alData = new ArrayList<>();
    
    	@FunctionalInterface
    	public interface PickerCloseHandler {
    		void onClose(DlgPicker2<T> dlg, ArrayList<T> al);
    	}
    
    	public DlgPicker2(PickerCloseHandler listener) {
        }

        public void setData(ArrayList<T> al) {
            alData = al;
        }
        public void onClose() {
            if (listener != null) listener.onClose(this, alData);
        }
    }
}"
pyw5HQyA,Sensores,pmfernandes,YAML,Friday 6th of October 2023 04:52:39 PM CDT,"      solar_panels_power:
        state: ""{{ state_attr('sensor.solax', 'Data')[2] | float }}""
        unit_of_measurement: ""W""
        device_class: ""power""
      solax_pv1_power:
        state: ""{{ state_attr('sensor.solax', 'Data')[7] | float }}""
        unit_of_measurement: ""W""
        device_class: ""power""
      solax_pv2_power:
        state: ""{{ state_attr('sensor.solax', 'Data')[8] | float }}""
        unit_of_measurement: ""W""
        device_class: ""power""
      load_power:
       unit_of_measurement: 'W'
       value_template: ""{{ states('sensor.solar_panels_power')|float + states('sensor.total_power')|float }}"""
ej8Sjunq,HA - Solar Cards,pmfernandes,YAML,Friday 6th of October 2023 04:46:52 PM CDT,"type: vertical-stack
cards:
  - type: custom:power-flow-card-plus
    entities:
      solar:
        entity: sensor.solar_panels_power
      grid:
        entity: sensor.shellyem_34945478b05e_channel_1_power
        color:
          production:
            - 255
            - 255
            - 255
      battery: {}
      home:
        entity: sensor.load_power
    w_decimals: 0
    kw_decimals: 2
    min_flow_rate: 0.9
    max_flow_rate: 6
    watt_threshold: 10000
    clickable_entities: true
    display_zero_lines:
      mode: show
      transparency: 50
      grey_color:
        - 189
        - 189
        - 189
    use_new_flow_rate_model: false
  - type: custom:apexcharts-card
    chart_type: radialBar
    header:
      show: true
      show_states: true
      colorize_states: true
    series:
      - entity: sensor.solax_pv1_power
        color: orange
        max: 2500
        show:
          legend_value: false
      - entity: sensor.solax_pv2_power
        color: darkorange
        max: 1000
        show:
          legend_value: false
"
