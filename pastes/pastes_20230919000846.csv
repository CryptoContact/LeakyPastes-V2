id,title,username,language,date,content
Q7nPH9EC,On_Time_For_Exam,desito07,C#,Monday 18th of September 2023 05:31:37 PM CDT,"namespace _08._On_Time_For_Exam
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int hourExamStart = int.Parse(Console.ReadLine());
            int minExamStart = int.Parse(Console.ReadLine());
            int hourArival = int.Parse(Console.ReadLine());
            int minArival = int.Parse(Console.ReadLine());

            int minExamStartTotal = hourExamStart * 60 + minExamStart;
            int minArivalTotal = hourArival * 60 + minArival;

            if (minArivalTotal > minExamStartTotal)
            {
                Console.WriteLine(""Late"");
                int minDifference = minArivalTotal - minExamStartTotal;
                if (minDifference < 60)
                {
                    Console.WriteLine($""{minDifference} minutes after the start"");
                }
                else
                {
                    int hours = minDifference / 60;
                    int min = minDifference % 60;
                    Console.WriteLine($""{hours}:{min:d2} hours after the start"");
                }
            }
            else if (minArivalTotal < minExamStartTotal - 30)
            {
                Console.WriteLine(""Early"");
                int minDifference = minExamStartTotal - minArivalTotal;
                if (minDifference < 60)
                {
                    Console.WriteLine($""{minDifference} minutes before the start"");
                }
                else
                {
                    int hours = minDifference / 60;
                    int min = minDifference % 60;
                    Console.WriteLine($""{hours}:{min:d2} hours before the start"");
                }
            }
            else
            {
                Console.WriteLine(""On time"");
                int minDiff = minExamStartTotal - minArivalTotal;
                Console.WriteLine($""{minDiff} minutes before the start"");
            }
        }
    }
}"
2ieW3h01,json,montur,Lua,Monday 18th of September 2023 05:24:27 PM CDT,"------------------------------------------------------------------ utils
local controls = {[""\n""]=""\\n"", [""\r""]=""\\r"", [""\t""]=""\\t"", [""\b""]=""\\b"", [""\f""]=""\\f"", [""\""""]=""\\\"""", [""\\""]=""\\\\""}
 
local function isArray(t)
    local max = 0
    for k,v in pairs(t) do
        if type(k) ~= ""number"" then
            return false
        elseif k > max then
            max = k
        end
    end
    return max == #t
end
 
local whites = {['\n']=true; ['\r']=true; ['\t']=true; [' ']=true; [',']=true; [':']=true}
function removeWhite(str)
    while whites[str:sub(1, 1)] do
        str = str:sub(2)
    end
    return str
end
 
------------------------------------------------------------------ encoding
 
local function encodeCommon(val, pretty, tabLevel, tTracking)
    local str = """"
 
    -- Tabbing util
    local function tab(s)
        str = str .. (""\t""):rep(tabLevel) .. s
    end
 
    local function arrEncoding(val, bracket, closeBracket, iterator, loopFunc)
        str = str .. bracket
        if pretty then
            str = str .. ""\n""
            tabLevel = tabLevel + 1
        end
        for k,v in iterator(val) do
            tab("""")
            loopFunc(k,v)
            str = str .. "",""
            if pretty then str = str .. ""\n"" end
        end
        if pretty then
            tabLevel = tabLevel - 1
        end
        if str:sub(-2) == "",\n"" then
            str = str:sub(1, -3) .. ""\n""
        elseif str:sub(-1) == "","" then
            str = str:sub(1, -2)
        end
        tab(closeBracket)
    end
 
    -- Table encoding
    if type(val) == ""table"" then
        assert(not tTracking[val], ""Cannot encode a table holding itself recursively"")
        tTracking[val] = true
        if isArray(val) then
            arrEncoding(val, ""["", ""]"", ipairs, function(k,v)
                str = str .. encodeCommon(v, pretty, tabLevel, tTracking)
            end)
        else
            arrEncoding(val, ""{"", ""}"", pairs, function(k,v)
                assert(type(k) == ""string"", ""JSON object keys must be strings"", 2)
                str = str .. encodeCommon(k, pretty, tabLevel, tTracking)
                str = str .. (pretty and "": "" or "":"") .. encodeCommon(v, pretty, tabLevel, tTracking)
            end)
        end
    -- String encoding
    elseif type(val) == ""string"" then
        str = '""' .. val:gsub(""[%c\""\\]"", controls) .. '""'
    -- Number encoding
    elseif type(val) == ""number"" or type(val) == ""boolean"" then
        str = tostring(val)
    else
        error(""JSON only supports arrays, objects, numbers, booleans, and strings"", 2)
    end
    return str
end
 
function encode(val)
    return encodeCommon(val, false, 0, {})
end
 
function encodePretty(val)
    return encodeCommon(val, true, 0, {})
end
 
------------------------------------------------------------------ decoding
 
local decodeControls = {}
for k,v in pairs(controls) do
    decodeControls[v] = k
end
 
function parseBoolean(str)
    if str:sub(1, 4) == ""true"" then
        return true, removeWhite(str:sub(5))
    else
        return false, removeWhite(str:sub(6))
    end
end
 
function parseNull(str)
    return nil, removeWhite(str:sub(5))
end
 
local numChars = {['e']=true; ['E']=true; ['+']=true; ['-']=true; ['.']=true}
function parseNumber(str)
    local i = 1
    while numChars[str:sub(i, i)] or tonumber(str:sub(i, i)) do
        i = i + 1
    end
    local val = tonumber(str:sub(1, i - 1))
    str = removeWhite(str:sub(i))
    return val, str
end
 
function parseString(str)
    str = str:sub(2)
    local s = """"
    while str:sub(1,1) ~= ""\"""" do
        local next = str:sub(1,1)
        str = str:sub(2)
        assert(next ~= ""\n"", ""Unclosed string"")
 
        if next == ""\\"" then
            local escape = str:sub(1,1)
            str = str:sub(2)
 
            next = assert(decodeControls[next..escape], ""Invalid escape character"")
        end
 
        s = s .. next
    end
    return s, removeWhite(str:sub(2))
end
 
function parseArray(str)
    str = removeWhite(str:sub(2))
 
    local val = {}
    local i = 1
    while str:sub(1, 1) ~= ""]"" do
        local v = nil
        v, str = parseValue(str)
        val[i] = v
        i = i + 1
        str = removeWhite(str)
    end
    str = removeWhite(str:sub(2))
    return val, str
end
 
function parseObject(str)
    str = removeWhite(str:sub(2))
 
    local val = {}
    while str:sub(1, 1) ~= ""}"" do
        local k, v = nil, nil
        k, v, str = parseMember(str)
        val[k] = v
        str = removeWhite(str)
    end
    str = removeWhite(str:sub(2))
    return val, str
end
 
function parseMember(str)
    local k = nil
    k, str = parseValue(str)
    local val = nil
    val, str = parseValue(str)
    return k, val, str
end
 
function parseValue(str)
    local fchar = str:sub(1, 1)
    if fchar == ""{"" then
        return parseObject(str)
    elseif fchar == ""["" then
        return parseArray(str)
    elseif tonumber(fchar) ~= nil or numChars[fchar] then
        return parseNumber(str)
    elseif str:sub(1, 4) == ""true"" or str:sub(1, 5) == ""false"" then
        return parseBoolean(str)
    elseif fchar == ""\"""" then
        return parseString(str)
    elseif str:sub(1, 4) == ""null"" then
        return parseNull(str)
    end
    return nil
end
 
function decode(str)
    str = removeWhite(str)
    t = parseValue(str)
    return t
end
 
function decodeFromFile(path)
    local file = assert(fs.open(path, ""r""))
    local decoded = decode(file.readAll())
    file.close()
    return decoded
end
"
eWFpgaPp,Celestial Template,tortureExE,Java,Monday 18th of September 2023 05:12:00 PM CDT,"exports.body2 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: -0.005 }]],
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    MAX_CHILDREN: 28,
    SHAPE: 7,
    INDEPENDENT: true,
    FACING_TYPE: ""autospin"",
    TURRETS: [
        {
            //*********    SIZE         X             Y         ANGLE        ARC
            POSITION: [8.5, 9, 0, 26, 180, 0],
            TYPE: [""twin""],
        },
        {
            POSITION: [8.5, 9, 0, 77, 180, 0],
            TYPE: [""spawner""],
        },
        {
            POSITION: [8.5, 9, 0, 129, 180, 0],
            TYPE: [""twin""],
        },
        {
            POSITION: [8.5, 9, 0, 180, 180, 0],
            TYPE: [""spawner""],
        },
        {
            POSITION: [8.5, 9, 0, 231, 180, 0],
            TYPE: [""twin""],
        },
        {
            POSITION: [8.5, 9, 0, 282, 180, 0],
            TYPE: [""spawner""],
        },
        {
            POSITION: [8.5, 9, 0, 333, 180, 0],
            TYPE: [""twin""],
        },
    ],
};
exports.body1 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: 0.005 }]],
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    MAX_CHILDREN: 28,
    SHAPE: 5,
    INDEPENDENT: true,
    TURRETS: [
        {
            //**     SIZE         X             Y         ANGLE        ARC
            POSITION: [10.6, 7.5, 0, 35, 160, 0],
            TYPE: [""hunter""],
        },
        {
            POSITION: [10.6, 7.5, 0, 110, 160, 0],
            TYPE: [""hunter""],
        },
        {
            POSITION: [10.6, 7.5, 0, 180, 160, 0],
            TYPE: [""hunter""],
        },
        {
            POSITION: [10.6, 7.5, 0, 252, 160, 0],
            TYPE: [""hunter""],
        },
        {
            POSITION: [10.6, 7.5, 0, 325, 160, 0],
            TYPE: [""hunter""],
        },
    ],
};
exports.celestial = {
    PARENT: [""celestial""],
    NAME: ""Celestial"",
    COLOR: 0,
    TURRETS: [
        {
            /*********    SIZE         X             Y         ANGLE        ARC */
            POSITION: [6.5, 9, 0, 260, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 219, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 180, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 300, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 339, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 380, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 420, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 459, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [6.5, 9, 0, 500, 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true }],
        },
        {
            POSITION: [14.77, 0, 0, 0, 360, 1],
            TYPE: [""body2""],
        },
        {
            POSITION: [8.7, 0, 0, 0, 360, 1],
            TYPE: [""body1""],
        },
    ],
};


//Shoot


exports.body2 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: -0.005 }]],
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    SHAPE: 7,
    FOV: 1,
    FACING_TYPE: ""autospin"",
    MAX_CHILDREN: 16,
    GUNS: [
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 26, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 77, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 129, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 180, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 231, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 282, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
        {
            POSITION: [3.6, 7, -1.4, 8, 0, 333, 0],
            PROPERTIES: {
                SHOOT_SETTINGS: combineStats([g.factory, g.celeslower]),
                TYPE: ""minion"",
                AUTOFIRE: true,
                SYNCS_SKILLS: true,
            },
        },
    ],
};
exports.body1 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: 0.005 }]],
    AUTOSPIN: true,
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    MAX_CHILDREN: 28,
    SHAPE: 5,
    INDEPENDENT: true,
    TURRETS: [
        {
            /*********    SIZE         X             Y         ANGLE        ARC */
            POSITION: [10, 7.5, 0, 35, 160, 0],
            TYPE: [""basic""],
        },
        {
            POSITION: [10, 7.5, 0, 110, 160, 0],
            TYPE: [“basic""],
        },
        {
            POSITION: [10, 7.5, 0, 180, 160, 0],
            TYPE: [""basic""],
        },
        {
            POSITION: [10, 7.5, 0, 252, 160, 0],
            TYPE: [“basic""],
        },
        {
            POSITION: [10, 7.5, 0, 325, 160, 0],
            TYPE: [""basic""],
        },
    ],
};
exports.celestial = {
    PARENT: [""celestial""],
    NAME: ""Celestial"",
    COLOR: 0,
    TURRETS: [
        {
            /*********    SIZE         X             Y         ANGLE        ARC */
            POSITION: [6.5, 9, 0, 260, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 219, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 180, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 300, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 339, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 380, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 420, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 459, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [6.5, 9, 0, 500, 180, 0],
            TYPE: [
                ""trapTurret"",
                {
                    INDEPENDENT: true,
                },
            ],
        },
        {
            POSITION: [14.94, 0, 0, 0, 360, 1],
            TYPE: [“body2""],
        },
        {
            POSITION: [8.6, 0, 0, 0, 360, 1],
            TYPE: [""body1""],
        },
    ],
};
//ethernal


exports.body3 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: -0.01 }]],
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    SHAPE: 9,
    FOV: 10,
    TURRETS: [],
};
for(let i = 0; i < 9; i++) {
    exports.body3.TURRETS.push(
        {
            POSITION: [6.5, 9, 0, 360/9*(i+0.5), 160, 0],
            TYPE: [""basic"", { INDEPENDENT: true, }],
        },
    )
};
exports.body2 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: 0.005 }]],
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    SHAPE: 7,
    FOV: 1,
    TURRETS: [],
};
for(let i = 0; i < 7; i++) {
    exports.body2.TURRETS.push(
        {
            POSITION: [8, 8.5, 0, 360/7*(i+0.5), 160, 0],
            TYPE: [""basuc"", { INDEPENDENT: true, }],
        },
    )
};
exports.body1 = {
    LABEL: """",
    CONTROLLERS: [[""spin"", { independent: true, speed: -0.005 }]],
    COLOR: 0,
    SIZE: 100,
    SKILL: [9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
    SHAPE: 5,
    FOV: 1,
    TURRETS: [],
};
for(let i = 0; i < 5; i++) {
    exports.body1.TURRETS.push(
        {
            POSITION: [9.5, 9, 0, 360/5*(i+0.5), 160, 0],
            TYPE: [""basic"", { INDEPENDENT: true, }],
        },
    )
};
exports.celestial = {
    PARENT: [""eternal""],
    NAME: ""celestial"",
    COLOR: 0,
    TURRETS: [
        {
            POSITION: [16, 0, 0, 0, 360, 1],
            TYPE: [""body3""],
        },
        {
            POSITION: [11, 0, 0, 0, 360, 1],
            TYPE: [""body2""],
        },
        {
            POSITION: [6, 0, 0, 0, 360, 1],
            TYPE: [""body1""],
        },
    ],
};
for(let i = 0; i < 11; i++) {
    exports.celestial.TURRETS.push(
        {
            POSITION: [6, 9, 0, 360/11*(i+0.5), 180, 0],
            TYPE: [""trapTurret"", { INDEPENDENT: true, }],
        },
    )
};"
5hn2nM8a,Untitled,corbinjo,C++,Monday 18th of September 2023 05:02:06 PM CDT,"---------------------------------------------------------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <string>
using namespace std;

const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
    if (sadrzaj == nullptr)
        return nullptr;
    int vel = strlen(sadrzaj) + 1;
    char* temp = new char[vel];
    strcpy_s(temp, vel, sadrzaj);
    return temp;
}

template <class T1, class T2>
class Kolekcija {
    T1* _elementi1;
    T2* _elementi2;
    int* _trenutno;
public:
    Kolekcija() : _elementi1(nullptr), _elementi2(nullptr), _trenutno(new int(0)) {}
    ~Kolekcija() {
        delete[] _elementi1; _elementi1 = nullptr;
        delete[] _elementi2; _elementi2 = nullptr;
        delete _trenutno; _trenutno = nullptr;
    }
    T1* getElementi1Pok() { return _elementi1; }
    T2* getElementi2Pok() { return _elementi2; }
    T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
    T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
    int* getTrenutno() { return _trenutno; }

    void DodajElemente(const T1& el1, const T2& el2) {
        T1* noviElem1 = new T1[*_trenutno + 1];
        T2* noviElem2 = new T2[*_trenutno + 1];
        for (int i = 0; i < *_trenutno; i++) {
            noviElem1[i] = _elementi1[i];
            noviElem2[i] = _elementi2[i];
        }
        noviElem1[*_trenutno] = el1;
        noviElem2[*_trenutno] = el2;
        delete[] _elementi1;
        delete[] _elementi2;
        _elementi1 = noviElem1;
        _elementi2 = noviElem2;
        (*_trenutno)++;
    }

    friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
        for (int i = 0; i < *obj._trenutno; i++)
            COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
        return COUT;
    }
};

class Poglavlje {
    char* _naslov;
    char* _sadrzaj;
    bool _prihvaceno;
    int _ocjena; //da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:
    Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr)
        : _ocjena(0), _prihvaceno(false) {
        _naslov = AlocirajNizKaraktera(naslov);
        _sadrzaj = AlocirajNizKaraktera(sadrzaj);
    }

    Poglavlje(const Poglavlje& p) : _ocjena(p._ocjena), _prihvaceno(p._prihvaceno) {
        _naslov = AlocirajNizKaraktera(p._naslov);
        _sadrzaj = AlocirajNizKaraktera(p._sadrzaj);
    }

    ~Poglavlje() {
        delete[] _naslov; _naslov = nullptr;
        delete[] _sadrzaj; _sadrzaj = nullptr;
    }

    friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
        if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
            return COUT;
        COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
        if (obj._prihvaceno)
            COUT << ""Ocjena: "" << obj._ocjena << endl;
        return COUT;
    }

    char* GetNaslov() { return _naslov; }
    const char* GetSadrzaj() const { return _sadrzaj; }
    bool GetPrihvaceno() const { return _prihvaceno; }
    int GetOcjena() const { return _ocjena; }

    void OcijeniPoglavlje(int ocjena) {
        _ocjena = ocjena;
        if (_ocjena >= 6 && _ocjena <= 10)
            _prihvaceno = true;
    }
};

class ZavrsniRad {
    char* _tema;
    vector<Poglavlje> _poglavljaRada;
    string _datumOdbrane;
    float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:
    void SetKonacnaOcjena(float konacnaOcjena) {
        _konacnaOcjena = konacnaOcjena;
    }
    ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set) {
        _tema = AlocirajNizKaraktera(nazivTeme);
    }

    ZavrsniRad(const ZavrsniRad& org) : _poglavljaRada(org._poglavljaRada), _konacnaOcjena(org._konacnaOcjena), _datumOdbrane(org._datumOdbrane) {
        _tema = AlocirajNizKaraktera(org._tema);
    }

    ~ZavrsniRad() {
        delete[] _tema; _tema = nullptr;
    }

    char* GetNazivTeme() const { return _tema; }
    vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; }
    string GetDatumOdbrane() const { return _datumOdbrane; }
    float GetKonacnaOcjena() const { return _konacnaOcjena; }
    void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }

    ZavrsniRad& operator=(const ZavrsniRad& org) {
        if (this != &org) {
            delete[] _tema;
            _tema = AlocirajNizKaraktera(org._tema);
            _datumOdbrane = org._datumOdbrane;
            _poglavljaRada = org._poglavljaRada;
            _konacnaOcjena = org._konacnaOcjena;
        }
        return *this;
    }

    friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
        COUT << ""Tema rada: "" << obj._tema << endl;
        COUT << ""Sadrzaj: "" << endl;
        for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
            COUT << obj._poglavljaRada[i] << endl;
        COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
        return COUT;
    }

    void DodajPoglavlje(const char* naslov, const char* sadrzaj) {
        Poglavlje novo(naslov, sadrzaj);
        _poglavljaRada.push_back(novo);
    }

    void OcijeniPoglavlje(const char* naslov, int ocjena) {
        for (size_t i = 0; i < _poglavljaRada.size(); i++) {
            if (strcmp(_poglavljaRada[i].GetNaslov(), naslov) == 0) {
                _poglavljaRada[i].OcijeniPoglavlje(ocjena);
                break;
            }
        }
    }
};

class Mentor {
    char* _imePrezime;
    Kolekcija<string, ZavrsniRad> _teme;
public:
    Mentor(const char* imePrezime) : _teme() {
        _imePrezime = AlocirajNizKaraktera(imePrezime);
    }

    ~Mentor() {
        delete[] _imePrezime; _imePrezime = nullptr;
    }

    Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; }
    char* GetImePrezime() { return _imePrezime; }

    void Info() {
        cout << _imePrezime << endl << _teme << endl;
    }

    bool DodajZavrsniRad(const string& brojIndeksa, const ZavrsniRad& rad) {
        for (int i = 0; i < *_teme.getTrenutno(); i++) {
            if (_teme.getElement1(i) == brojIndeksa)
                return false; // Student already has a topic assigned by this mentor
        }
        _teme.DodajElemente(brojIndeksa, rad);
        return true;
    }

    ZavrsniRad* ZakaziOdbranuRada(const string& brojIndeksa, const string& datumOdbrane) {
        for (int i = 0; i < *_teme.getTrenutno(); i++) {
            if (_teme.getElement1(i) == brojIndeksa) {
                ZavrsniRad& rad = _teme.getElement2(i);
                if (rad.GetPoglavlja().size() >= min_polgavlja) {
                    bool svePrihvaceno = true;
                    for (const Poglavlje& poglavlje : rad.GetPoglavlja()) {
                        if (strlen(poglavlje.GetSadrzaj()) < min_karaktera_po_poglavlju || !poglavlje.GetPrihvaceno()) {
                            svePrihvaceno = false;
                            break;
                        }
                    }
                    if (svePrihvaceno) {
                        float sumaOcjena = 0;
                        for (const Poglavlje& poglavlje : rad.GetPoglavlja()) {
                            sumaOcjena += poglavlje.GetOcjena();
                        }
                        rad.SetKonacnaOcjena(sumaOcjena / rad.GetPoglavlja().size());
                        float finalGrade = rad.GetKonacnaOcjena();

                        return &rad;
                    }
                }
            }
        }
        return nullptr;
    }
};

int main() {
    cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
    cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

    const int max = 4;
    Mentor* mentori[max];

    mentori[0] = new Mentor(""Armina Hubana"");
    mentori[1] = new Mentor(""Zanin Vejzovic"");
    mentori[2] = new Mentor(""Jasmin Azemovic"");
    mentori[3] = new Mentor(""Emina Junuz"");

    ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
    ZavrsniRad podrsa_operaterima(""Sistem za podršku rada kablovskog operatera"");
    ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti bežičnih računarskih mreža"");
    ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih ključeva"");

    multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
    multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
    multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
    multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
    multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
    multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");

    try {
        multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
        multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
        multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
        multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
        multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
    }
    catch (exception& err) {
        cout << ""Greska -> "" << err.what() << endl;
    }

    if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;
    if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;
    if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))
        cout << ""Zavrsni rad nije dodat!"" << endl;
    if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija))
        cout << ""Zavrsni rad nije dodat!"" << endl;
    if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;
    if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;

    ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
    if (zr1 != nullptr)
        cout << *zr1 << endl;

    zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");
    if (zr1 != nullptr)
        cout << *zr1 << endl;

    mentori[0]->Info();

    for (int i = 0; i < max; i++) {
        delete mentori[i];
        mentori[i] = nullptr;
    }

    system(""pause>0"");
    return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<vector>
using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO ""RE""
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
****************************************************************************/
const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int* _trenutno;
public:

	bool AddElement(T1 el1, T2 el2) {
		//napraviti provjeru da li se unutar _elementi1 ili _elementi2 vec nalaze el1 ii el2							
		for (int i = 0; i < *_trenutno; i++)
		{
			if (_elementi1[i] == el1 || _elementi2[i] == el2)
			{
				return false;
			}

		}

		//napraviti privremene temp nizove koji ce imati _trenutno +1 broj elemenata							
		T1* temp1 = new T1[*_trenutno + 1];
		T2* temp2 = new T2[*_trenutno + 1];
		// nizovi su prazni z temp nizove cemo prebaciti stare elemente							

		for (int i = 0; i < *_trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];

		}
		temp1[*_trenutno] = el1;
		temp2[*_trenutno] = el2;

		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		(*_trenutno)++;
		return true;
	}

	Kolekcija() :_elementi1(nullptr), _elementi2(nullptr) {
		_trenutno = new int(0);
	}

	~Kolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
		delete _trenutno; _trenutno = nullptr;
	}
	T1* getElementi1Pok() { return _elementi1; }
	T2* getElementi2Pok() { return _elementi2; }
	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int* getTrenutno() { return _trenutno; }

	friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
		for (int i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Poglavlje {
	char* _naslov;
	char* _sadrzaj;
	bool _prihvaceno;
	int _ocjena;//da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:

	void addOcjena(int ocjena) {
		_ocjena = ocjena;
		if (ocjena >= 6 && ocjena <= 10)
		{
			_prihvaceno = true;
		}


	}
	void addSadrzaj(string noviSadrzaj) {

		char* temp = AlocirajNizKaraktera((string(_sadrzaj) + "" "" + noviSadrzaj).c_str());
		delete[]_sadrzaj;
		_sadrzaj = temp;
	}
	Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr)
		:_ocjena(0), _prihvaceno(false) {
		_naslov = AlocirajNizKaraktera(naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
	}

	//const kopije
	Poglavlje(const Poglavlje& obj) {
		_naslov = AlocirajNizKaraktera(obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		_ocjena = obj._ocjena;

	}

	//operator =
	Poglavlje& operator=(const Poglavlje& obj) {
		if (this != &obj)
		{
			delete[]_naslov;
			delete[] _sadrzaj;
			_naslov = AlocirajNizKaraktera(obj._naslov);
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = obj._ocjena;

		}
		return*this;

	}
	~Poglavlje() {
		delete[] _naslov; _naslov = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << ""Ocjena: "" << obj._ocjena << endl;;
		return COUT;
	}
	char* GetNaslov() { return _naslov; }
	char* GetSadrzaj() { return _sadrzaj; }
	bool GetPrihvaceno() { return _prihvaceno; }
	int GetOcjena() { return _ocjena; }

	void OcijeniPoglavlje(int ocjena) {
		_ocjena = ocjena;
		if (_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}
};

class ZavrsniRad {
	char* _tema;
	vector<Poglavlje> _poglavljaRada;
	string _datumOdbrane;
	float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:

	friend bool operator==(const ZavrsniRad& obj1, const ZavrsniRad& obj2) {
		if (strcmp(obj1.GetNazivTeme(), obj2.GetNazivTeme()) == 0)
		{
			return true;
		}
		else return false;
	}


	/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
//parametri:nazivPoglavlja, ocjena

	void OcijeniPoglavlje(string nazivPoglavlja, int ocjena) {
		if (ocjena < 6 || ocjena>10)
		{
			throw exception(""Ocjena nije validna.\n"");
		}
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja.c_str(), _poglavljaRada[i].GetNaslov()) == 0)
			{
				_poglavljaRada[i].addOcjena(ocjena);
				return;
			}
		}
		throw exception(""Poglavlje ne postoji.\n"");

	}

	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
//parametri: nazivPoglavlja, sadrzajPoglavlja

	void DodajPoglavlje(string nazivPoglavlja, string sadrzajPoglavlja) {
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja.c_str(), _poglavljaRada[i].GetNaslov()) == 0)
			{
				_poglavljaRada[i].addSadrzaj(sadrzajPoglavlja);
				return;
			}
		}
		Poglavlje objPoglavlje(nazivPoglavlja.c_str(), sadrzajPoglavlja.c_str());
		_poglavljaRada.push_back(objPoglavlje);

	}
	ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set) {
		_tema = AlocirajNizKaraktera(nazivTeme);
	}

	//const kopije
	ZavrsniRad(const ZavrsniRad& obj) {
		_tema = AlocirajNizKaraktera(obj._tema);
		_poglavljaRada = obj._poglavljaRada;
		_datumOdbrane = obj._datumOdbrane;
		_konacnaOcjena = obj._konacnaOcjena;
	}
	//operator =
	ZavrsniRad& operator=(const ZavrsniRad& obj) {
		if (this != &obj)
		{
			delete[]_tema;
			_tema = AlocirajNizKaraktera(obj._tema);
			_poglavljaRada = obj._poglavljaRada;
			_datumOdbrane = obj._datumOdbrane;
			_konacnaOcjena = obj._konacnaOcjena;
		}
		return*this;
	}

	~ZavrsniRad() {
		delete[] _tema; _tema = nullptr;
	}
	char* GetNazivTeme()const { return _tema; }
	vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; };
	string GetDatumOdbrane()const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }
	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }



	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
		COUT << ""Tema rada: "" << obj._tema << endl;
		COUT << ""Sadrzaj: "" << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << obj._poglavljaRada[i] << endl;
		COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
		return COUT;
	}
};

class Mentor {
	char* _imePrezime;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<string, ZavrsniRad> _teme;
public:
	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
sprijeciti dodavanje zavrsnih radova sa istom temom*/
//parametri:brojIndeksa, zavrsniRad
	bool DodajZavrsniRad(string brojIndeksa, ZavrsniRad obj) {
		if (_teme.AddElement(brojIndeksa, obj) == true)
		{
			return true;
		}
		else return false;
	}
	friend ostream& operator<<(ostream& COUT, Mentor& obj) {
		COUT << ""Ime i Prezime: "" << obj._imePrezime << endl;
		COUT << ""Teme: "" << obj._teme << endl;

		return COUT;
	}
	Mentor(const char* imePrezime = nullptr) {
		_imePrezime = AlocirajNizKaraktera(imePrezime);
	}
	~Mentor() {
		delete[] _imePrezime; _imePrezime = nullptr;
	}
	Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; };
	char* GetImePrezime() { return _imePrezime; }
	void Info() {
		cout << _imePrezime << endl << _teme << endl;
	}
};

int main() {
	cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
	cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

	const int max = 4;
	Mentor* mentori[max];

	mentori[0] = new Mentor(""Armina Hubana"");
	mentori[1] = new Mentor(""Zanin Vejzovic"");
	mentori[2] = new Mentor(""Jasmin Azemovic"");
	mentori[3] = new Mentor(""Emina Junuz"");

	cout << *mentori[1];
	//parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
	ZavrsniRad podrsa_operaterima(""Sistem za podršku rada kablovskog operatera"");
	ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti bežičnih računarskih mreža"");
	ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih ključeva"");

	/*	cout << multimedijalni;*/

		/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
		//parametri: nazivPoglavlja, sadrzajPoglavlja

	multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
	multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
	multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
	multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");

	cout << multimedijalni;

	try {
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena



		multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
		multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
		multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
		multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
		multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
	}
	catch (exception& err) {
		cout << ""Greska -> "" << err.what() << endl;
	}
	cout << multimedijalni;
	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//parametri:brojIndeksa, zavrsniRad

	if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;

	cout << mentori[1];

	//	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
	//	datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
	//		1. zavrsni rad ima broj poglavlja veci od minimalnog
	//		2. svako poglavlje ima broj karaktera veci od minimalnog
	//		3. svako poglavlje je prihvaceno/odobreno
	//	ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
	//	u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
	//*/
	//
	////parametri:brojIndeksa, datumOdbrane
	//	ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
	//	if (zr1 != nullptr)
	//		cout << *zr1 << endl;
	//
	//	zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
	//	if (zr1 != nullptr)
	//		cout << *zr1 << endl;
	//
		//ispisuje sve podatke o Mentoru i njegovim mentorstvima
		mentori[0]->Info();
	
		for (int i = 0; i < max; i++) {
			delete mentori[i];
			mentori[i] = nullptr;
		}
		system(""pause>0"");
	return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------


#include <iostream>
#include <vector>
using namespace std;
/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR  E BITI OZNACENO KAO ""RE""
3. SPA AVAJTE PROJEKAT KAKO BI SE SPRIJE ILO GUBLJENJE URA ENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTI NI ONIMA KOJI SU KORI TENI U TESTNOM CODE-U, OSIM U SLU AJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMO NE FUNKCIJE MO ETE IMENOVATI I DODAVATI PO  ELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNA ENO.
****************************************************************************/
const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int* _trenutno;
public:

	bool AddElement(T1 el1, T2 el2) {
		//napraviti provjeru da li se unutar _elementi1 ili _elementi2 vec nalaze el1 ii el2
		for (int i = 0; i < *_trenutno; i++)
		{
			if (_elementi1[i] == el1 || _elementi2[i] == el2)
			{
				return false;
			}


		}

		//napraviti privremene temp nizove koji ce imati _trenutno +1 broj elemenata
		T1* temp1 = new T1[*_trenutno + 1];
		T2* temp2 = new T2[*_trenutno + 1];
		// nizovi su prazni z temp nizove cemo prebaciti stare elemente

		for (int i = 0; i < *_trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];

		}
		temp1[*_trenutno] = el1;
		temp2[*_trenutno] = el2;

		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		(*_trenutno)++;
		return true;
	}

	Kolekcija() : _elementi1(nullptr), _elementi2(nullptr) {
		_trenutno = new int(0);

	}
	~Kolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi1 = nullptr;
	}
	T1* getElementi1Pok() { return _elementi1; }
	T2* getElementi2Pok() { return _elementi2; }
	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() { return _trenutno; }

	friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Poglavlje {
	char* _naslov;
	char* _sadrzaj;
	bool _prihvaceno;
	int* _ocjena;//da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:

	void AddOcjena(int ocjena) {
		_ocjena = new int(ocjena);
		if (ocjena >= 6 && ocjena <= 10)
		{
			_prihvaceno = true;
		}
	}

	void addSadrzaj(string NoviSadrzaj) {
		char* temp = AlocirajNizKaraktera((string(_sadrzaj) + "" "" + NoviSadrzaj).c_str());
		delete[]_sadrzaj;
		_sadrzaj = temp;

	}

	//const koji prima dva parametra, naslov i sadrzaj

	Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr) {
		_naslov = AlocirajNizKaraktera(naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
		_prihvaceno = false;
		_ocjena = new int(0);

	}

	//const kopije


	Poglavlje& operator=(const Poglavlje& obj) {

		if (this != &obj)
		{
			delete[]_sadrzaj;
			delete[]_naslov;
			delete _ocjena;

			_naslov = AlocirajNizKaraktera(obj._naslov);
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = new int(*obj._ocjena);

		}

		return *this;


	}

	Poglavlje(const Poglavlje& obj) {

		_naslov = AlocirajNizKaraktera(obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		_ocjena = new int(*obj._ocjena);


	}


	~Poglavlje() {
		delete[] _naslov; _naslov = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << ""Ocjena: "" << *obj._ocjena << endl;;
		return COUT;
	}
	char* GetNaslov() { return _naslov; }
	char* GetSadrzaj() { return _sadrzaj; }
	bool GetPrihvaceno() { return _prihvaceno; }
	int GetOcjena() { return *_ocjena; }

	void OcijeniPoglavlje(int ocjena) {
		_ocjena = new int(ocjena);
		if (*_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}
};

class ZavrsniRad {
	char* _tema;
	vector<Poglavlje*> _poglavljaRada;
	string _datumOdbrane;
	float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:
	friend bool operator== (const ZavrsniRad& obj1, const ZavrsniRad& obj2) {
		if (strcmp(obj1.GetNazivTeme(), obj2.GetNazivTeme()) == 0) {
			return true;
		}
		else
			return false;
	}


	void OcijeniPoglavlje(string nazivPoglavlja, int ocjena) {
		if (ocjena < 5 || ocjena >10)
		{
			throw exception(""Ocijena nije validna.\n"");
		}
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja.c_str(), _poglavljaRada[i]->GetNaslov()) == 0)
			{
				_poglavljaRada[i]->AddOcjena(ocjena);
				return;
			}
		}

		throw exception(""Poglavlje ne postoji\.n"");

	}


	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
//parametri: nazivPoglavlja, sadrzajPoglavlja

	void DodajPoglavlje(string nazivPoglavlja, string sadrzajPoglavlja) {

		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja.c_str(), _poglavljaRada[i]->GetNaslov()) == 0)
			{
				_poglavljaRada[i]->addSadrzaj(sadrzajPoglavlja);
				return;
			}

		}

		Poglavlje objPoglavlje(nazivPoglavlja.c_str(), sadrzajPoglavlja.c_str());
		_poglavljaRada.push_back(new Poglavlje(objPoglavlje));


	}

	ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set) {
		_tema = AlocirajNizKaraktera(nazivTeme);
	}
	// const kopije
	ZavrsniRad(const ZavrsniRad& obj) {
		_tema = AlocirajNizKaraktera(obj._tema);
		_datumOdbrane = obj._datumOdbrane;
		_konacnaOcjena = obj._konacnaOcjena;

		for (int i = 0; i < obj._poglavljaRada.size(); i++)
		{
			_poglavljaRada.push_back(new Poglavlje(*obj._poglavljaRada[i]));
		}
	}

	// operator dodjele
	ZavrsniRad& operator=(const ZavrsniRad& obj) {
		if (this != &obj)
		{

			delete[]_tema;
			for (int i = 0; i < _poglavljaRada.size(); i++)
			{

				delete _poglavljaRada[i];

			}
			_tema = AlocirajNizKaraktera(obj._tema);
			_datumOdbrane = obj._datumOdbrane;
			_konacnaOcjena = obj._konacnaOcjena;

			for (int i = 0; i < obj._poglavljaRada.size(); i++)
			{
				_poglavljaRada.push_back(new Poglavlje(*obj._poglavljaRada[i]));
			}
		}
		return *this;

	}


	~ZavrsniRad() {
		delete[] _tema; _tema = nullptr;
	}
	char* GetNazivTeme()const { return _tema; }
	vector<Poglavlje*>& GetPoglavlja() { return _poglavljaRada; };
	string GetDatumOdbrane()const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }
	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }


	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
		COUT << ""Tema rada: "" << obj._tema << endl;
		COUT << ""Sadrzaj: "" << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << *obj._poglavljaRada[i] << endl;
		COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
		return COUT;
	}
};

class Mentor {
	string _imePrezime;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<string, ZavrsniRad>* _teme;
public:

	bool DodajZavrsniRad(string brojIndeksa, ZavrsniRad obj) {
		if (_teme->AddElement(brojIndeksa, obj) == true)
		{
			return true;
		}

		else return false;

	}


	friend ostream& operator<<(ostream& COUT, Mentor& obj) {
		COUT << ""Ime i Prezime: "" << obj._imePrezime << endl;
		COUT << ""Teme: "" << *obj._teme << endl;

		return COUT;
	}
	Mentor(string imePrezime) :_imePrezime(imePrezime) {

		_teme = new Kolekcija<string, ZavrsniRad>();
	}
	Kolekcija<string, ZavrsniRad>& GetTeme() { return *_teme; };
	string GetImePrezime() { return _imePrezime; }
	void Info() {
		cout << _imePrezime << endl << *_teme << endl;
	}
};

int main() {
	cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
	cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

	const int max = 4;
	Mentor* mentori[max];

	mentori[0] = new Mentor(""Armina Hubana"");
	mentori[1] = new Mentor(""Zanin Vejzovic"");
	mentori[2] = new Mentor(""Jasmin Azemovic"");
	mentori[3] = new Mentor(""Emina Junuz"");

	//cout << *mentori[1];
	//parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
	ZavrsniRad podrsa_operaterima(""Sistem za podr ku rada kablovskog operatera"");
	ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti be i nih ra unarskih mre a"");
	ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih klju eva"");

	cout << multimedijalni;


	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//parametri: nazivPoglavlja, sadrzajPoglavlja



	multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
	multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
	multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
	multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");

	//cout << multimedijalni;


	try {
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena

		multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
		multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
		multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
		multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
		multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
	}
	catch (exception& err) {
		cout << ""Greska -> "" << err.what() << endl;
	}

	cout << multimedijalni;

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//parametri:brojIndeksa, zavrsniRad


	if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;

	cout << *mentori[1];

	//
//	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
//	datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
//		1. zavrsni rad ima broj poglavlja veci od minimalnog
//		2. svako poglavlje ima broj karaktera veci od minimalnog
//		3. svako poglavlje je prihvaceno/odobreno
//	ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
//	u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
//*/
//
////parametri:brojIndeksa, datumOdbrane
//	ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
//	if (zr1 != nullptr)
//		cout << *zr1 << endl;
//
//	zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
//	if (zr1 != nullptr)
//		cout << *zr1 << endl;
//
	//ispisuje sve podatke o Mentoru i njegovim mentorstvima
	mentori[0]->Info();

	for (int i = 0; i < max; i++) {
		delete mentori[i];
		mentori[i] = nullptr;
	}
	system(""pause>0"");
	return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <vector>
using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR  E BITI OZNACENO KAO ""RE""
3. SPA AVAJTE PROJEKAT KAKO BI SE SPRIJE ILO GUBLJENJE URA ENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTI NI ONIMA KOJI SU KORI TENI U TESTNOM CODE-U, OSIM U SLU AJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMO NE FUNKCIJE MO ETE IMENOVATI I DODAVATI PO  ELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNA ENO.
****************************************************************************/
const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int* _trenutno;
public:

	bool addElement(T1 el1, T2 el2) {
		for (int i = 0; i < *_trenutno; i++)
		{
			if (_elementi1[i] == el1 || _elementi2[i] == el2)
			{
				return false;
			}
		}

		T1* temp1 = new T1[*_trenutno + 1];
		T2* temp2 = new T2[*_trenutno + 1];

		for (int i = 0; i < *_trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];

		}
		temp1[*_trenutno] = el1;
		temp2[*_trenutno] = el2;

		delete[]_elementi1;
		delete[]_elementi2;

		_elementi1 = temp1;
		_elementi2 = temp2;

		(*_trenutno)++;
		return true;

	}

	//const 

	Kolekcija() {
		_elementi1 = nullptr;
		_elementi2 = nullptr;
		_trenutno = new int(0);

	}

	~Kolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi1 = nullptr;
		delete[]_trenutno; _trenutno = nullptr;
	}
	T1* getElementi1Pok() { return _elementi1; }
	T2* getElementi2Pok() { return _elementi2; }
	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() { return _trenutno; }

	friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Poglavlje {
	string* _naslov;
	char* _sadrzaj;
	bool _prihvaceno;
	int _ocjena;//da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:
	void addOcjena(int ocjena) {
		_ocjena = ocjena;
		if (ocjena >= 6 && ocjena <= 10)
		{
			_prihvaceno = true;
		}

	}
	void addSadrzaj(string noviSadrzaj) {
		char* temp = AlocirajNizKaraktera((string(_sadrzaj) + "" "" + noviSadrzaj).c_str());
		delete[]_sadrzaj;
		_sadrzaj = temp;

	}
	Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr)
		:_ocjena(0), _prihvaceno(false) {
		_naslov = new string(naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
	}

	//const kopije
	Poglavlje(const Poglavlje& obj) {
		_naslov = new string(*obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		_ocjena = obj._ocjena;

	}
	//operator dodjele
	Poglavlje& operator=(const Poglavlje& obj) {
		if (this != &obj)
		{
			delete _naslov;
			delete[]_sadrzaj;
			_naslov = new string(*obj._naslov);
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = obj._ocjena;
		}
		return *this;

	}

	~Poglavlje() {
		delete _naslov; _naslov = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl << *obj._naslov << endl << obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << ""Ocjena: "" << obj._ocjena << endl;;
		return COUT;
	}
	string* GetNaslov() { return _naslov; }
	char* GetSadrzaj() { return _sadrzaj; }
	bool GetPrihvaceno() { return _prihvaceno; }
	int GetOcjena() { return _ocjena; }

	void OcijeniPoglavlje(int ocjena) {
		_ocjena = ocjena;
		if (_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}
};

class ZavrsniRad {
	char* _tema;
	vector<Poglavlje*> _poglavljaRada;
	string* _datumOdbrane;
	float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:

	friend bool operator==(const ZavrsniRad& obj1, const ZavrsniRad& obj2) {
		if (strcmp(obj1.GetNazivTeme(), obj2.GetNazivTeme()) == 0)
		{
			return true;
		}
		else return false;
	}

	/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
//parametri:nazivPoglavlja, ocjena

	void OcijeniPoglavlje(string nazivPoglavlja, int ocjena) {
		if (ocjena < 6 || ocjena>10)
		{
			throw exception(""Ocjena nije validna.\n"");
		}

		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja.c_str(), _poglavljaRada[i]->GetNaslov()->c_str()) == 0)
				//if (nazivPoglavlja==*_poglavljaRada[i]->GetNaslov())
			{
				_poglavljaRada[i]->addOcjena(ocjena);
				return;
			}
		}
		throw exception(""Poglavlje ne postoji.\n"");

	}


	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//parametri: nazivPoglavlja, sadrzajPoglavlja

	void DodajPoglavlje(string nazivPoglavlja, string sadrzajPoglavlja) {
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja.c_str(), _poglavljaRada[i]->GetNaslov()->c_str()) == 0)
				//if (nazivPoglavlja==*_poglavljaRada[i]->GetNaslov())
			{
				_poglavljaRada[i]->addSadrzaj(sadrzajPoglavlja);
				return;
			}
		}

		Poglavlje objPoglavlje(nazivPoglavlja.c_str(), sadrzajPoglavlja.c_str());
		_poglavljaRada.push_back(new Poglavlje(objPoglavlje));

	}
	ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(new string(not_set)) {
		_tema = AlocirajNizKaraktera(nazivTeme);
	}
	//const kopije

	ZavrsniRad(const ZavrsniRad& obj) {

		_tema = AlocirajNizKaraktera(obj._tema);
		_datumOdbrane = new string(*obj._datumOdbrane);
		_konacnaOcjena = obj._konacnaOcjena;

		for (int i = 0; i < obj._poglavljaRada.size(); i++)
		{
			_poglavljaRada.push_back(new Poglavlje(*obj._poglavljaRada[i]));
		}

	}

	//operator =

	ZavrsniRad& operator=(const ZavrsniRad& obj) {

		if (this != &obj) {
			delete[]_tema;
			delete _datumOdbrane;

			for (int i = 0; i < _poglavljaRada.size(); i++)
			{
				delete _poglavljaRada[i];
			}

			_tema = AlocirajNizKaraktera(obj._tema);
			_datumOdbrane = new string(*obj._datumOdbrane);
			_konacnaOcjena = obj._konacnaOcjena;

			for (int i = 0; i < obj._poglavljaRada.size(); i++)
			{
				_poglavljaRada.push_back(new Poglavlje(*obj._poglavljaRada[i]));
			}

		}
		return*this;

	}


	~ZavrsniRad() {
		delete[] _tema; _tema = nullptr;
		delete _datumOdbrane; _datumOdbrane = nullptr;

		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			delete _poglavljaRada[i];
			_poglavljaRada[i] = nullptr;
		}


	}
	char* GetNazivTeme()const { return _tema; }
	vector<Poglavlje*>& GetPoglavlja() { return _poglavljaRada; };
	string* GetDatumOdbrane()const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }
	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = new string(datumOdbrane); }


	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
		COUT << ""Tema rada: "" << obj._tema << endl;
		COUT << ""Sadrzaj: "" << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << *obj._poglavljaRada[i] << endl;
		COUT << ""Datum odbrane rada: "" << *obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
		return COUT;
	}
};

class Mentor {
	char* _imePrezime;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<string, ZavrsniRad> _teme;
public:

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
sprijeciti dodavanje zavrsnih radova sa istom temom*/
//parametri:brojIndeksa, zavrsniRad

	bool DodajZavrsniRad(string brojIndeksa, ZavrsniRad obj) {
		if (_teme.addElement(brojIndeksa, obj) == true)
		{
			return true;
		}
		else return false;

	}
	friend ostream& operator<<(ostream& COUT, Mentor& obj) {
		COUT << ""Ime i prezime: "" << obj._imePrezime << endl;
		COUT << ""Teme: "" << obj._teme << endl;

		return COUT;
	}

	Mentor(string imePrezime) {
		_imePrezime = AlocirajNizKaraktera(imePrezime.c_str());

	}
	Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; };
	string GetImePrezime() { return _imePrezime; }
	void Info() {
		cout << _imePrezime << endl << _teme << endl;
	}
};

int main() {
	cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
	cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

	const int max = 4;
	Mentor* mentori[max];

	mentori[0] = new Mentor(""Armina Hubana"");
	mentori[1] = new Mentor(""Zanin Vejzovic"");
	mentori[2] = new Mentor(""Jasmin Azemovic"");
	mentori[3] = new Mentor(""Emina Junuz"");

	/*	cout << *mentori[1];*/

		//parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
	ZavrsniRad podrsa_operaterima(""Sistem za podr ku rada kablovskog operatera"");
	ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti be i nih ra unarskih mre a"");
	ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih klju eva"");

	//cout << multimedijalni;

	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//parametri: nazivPoglavlja, sadrzajPoglavlja


	multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
	multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
	multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
	multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");

	cout << multimedijalni;

	try {
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena

		multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
		multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
		multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
		multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
		multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
	}
	catch (exception& err) {
		cout << ""Greska -> "" << err.what() << endl;
	}

	cout << multimedijalni;

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//parametri:brojIndeksa, zavrsniRad



	if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;

	cout << mentori[2];

	//	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
	//	datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
	//		1. zavrsni rad ima broj poglavlja veci od minimalnog
	//		2. svako poglavlje ima broj karaktera veci od minimalnog
	//		3. svako poglavlje je prihvaceno/odobreno
	//	ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
	//	u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
	//*/
	//
	////parametri:brojIndeksa, datumOdbrane
	//	ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
	//	if (zr1 != nullptr)
	//		cout << *zr1 << endl;
	//
	//	zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
	//	if (zr1 != nullptr)
	//		cout << *zr1 << endl;
	//
		//ispisuje sve podatke o Mentoru i njegovim mentorstvima
		mentori[0]->Info();
	
		for (int i = 0; i < max; i++) {
			delete mentori[i];
			mentori[i] = nullptr;
		}
		system(""pause>0"");
	return 0;
}


---------------------------------------------------------------------------------------------------------------------------------------
#include<iostream>
#include<vector>
using namespace std;

//NC
//RE=>kada nesto nije alocirano i dolazi do pucanja programa
//TM=>task modified=> ne smijes mijenjati main

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR �E BITI OZNACENO KAO ""RE""
3. SPA�AVAJTE PROJEKAT KAKO BI SE SPRIJE�ILO GUBLJENJE URA�ENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTI�NI ONIMA KOJI SU KORI�TENI U TESTNOM CODE-U, OSIM U SLU�AJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMO�NE FUNKCIJE MO�ETE IMENOVATI I DODAVATI PO �ELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNA�ENO.
****************************************************************************/
const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int _trenutno;
public:
	Kolekcija() :_trenutno(0), _elementi1(nullptr), _elementi2(nullptr) { }
	~Kolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi1 = nullptr;
	}
	T1* getElementi1Pok() { return _elementi1; }
	T2* getElementi2Pok() { return _elementi2; }
	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() { return _trenutno; }

	friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Poglavlje {
	char* _naslov;
	char* _sadrzaj;
	bool _prihvaceno;
	int _ocjena;//da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:


	void AddOcjena(int ocjena) {
		_ocjena = ocjena;
		if (ocjena >= 6 && ocjena <= 10) {
			_prihvaceno = true;
		}
	}

	//const char* nekaRecenica = ""Ovo je recenica\0"";
	//string nekaRecenicaString = ""String recenica"";

	void AddSadrzaj(string noviSadrzaj) {
		char* temp = AlocirajNizKaraktera((string(_sadrzaj) + "" "" + noviSadrzaj).c_str());
		delete[]_sadrzaj;
		_sadrzaj = temp; //temp ima vrijednost starog i novog sadrzaja

	}

	//operator dodjele
	Poglavlje& operator=(const Poglavlje& obj) {
		if (this != &obj)
		{
			delete[]_naslov;
			delete[]_sadrzaj;
			_naslov = AlocirajNizKaraktera(obj._naslov);
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = obj._ocjena;
		}
		return *this;
	}


	//konstruktor kopije
	Poglavlje(const Poglavlje& obj) {
		_naslov = AlocirajNizKaraktera(obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		//_ocjena = new int (*obj._ocjena);
		_ocjena = obj._ocjena;
	}


	Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr)
		:_ocjena(0), _prihvaceno(false) {
		_naslov = AlocirajNizKaraktera(naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
	}
	~Poglavlje() {
		delete[] _naslov; _naslov = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << ""Ocjena: "" << obj._ocjena << endl;;
		return COUT;
	}
	char* GetNaslov() { return _naslov; }
	char* GetSadrzaj() { return _sadrzaj; }
	bool GetPrihvaceno() { return _prihvaceno; }
	int GetOcjena() { return _ocjena; }

	void OcijeniPoglavlje(int ocjena) {
		_ocjena = ocjena;
		if (_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}
};

class ZavrsniRad {
	char* _tema;
	vector<Poglavlje> _poglavljaRada;
	string _datumOdbrane;
	float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:
	void OcijeniPoglavlje(string NaslovPoglavlja, int ocjena) {
		if (ocjena < 5 || ocjena>10) {
			throw exception(""Ocjena nije validna.\n"");
		}

		for (int i = 0; i < _poglavljaRada.size(); i++) {
			if (strcmp(NaslovPoglavlja.c_str(), _poglavljaRada[i].GetNaslov()) == 0)
			{
				_poglavljaRada[i].AddOcjena(ocjena);
				return;
			}
		}

		throw exception(""Poglavlje ne postoji"");

	}



	void DodajPoglavlje(string NaslovPoglavlja, string SadrzajPoglavlja) {
		//prvo provjeravamo da li naslov vec postoji unutar vektora _poglavljaRada
		//[0][1][2][3]
		for (int i = 0; i < _poglavljaRada.size(); i++) {
			if (strcmp(NaslovPoglavlja.c_str(), _poglavljaRada[i].GetNaslov()) == 0)
			{
				_poglavljaRada[i].AddSadrzaj(SadrzajPoglavlja);
				return;
			}
		}

		Poglavlje obj(NaslovPoglavlja.c_str(), SadrzajPoglavlja.c_str());
		_poglavljaRada.push_back(obj);
	}
	//operator= 
	ZavrsniRad& operator=(const ZavrsniRad& obj) {
		if (this != &obj) {
			delete[]_tema;
			_tema = AlocirajNizKaraktera(obj._tema);
			_poglavljaRada = obj._poglavljaRada;
			_datumOdbrane = obj._datumOdbrane;
			_konacnaOcjena = obj._konacnaOcjena;

		}
		return *this;
	}

	//konstruktor kopije 
	ZavrsniRad(const ZavrsniRad& obj) {
		_tema = AlocirajNizKaraktera(obj._tema);
		_poglavljaRada = obj._poglavljaRada;
		_datumOdbrane = obj._datumOdbrane;
		_konacnaOcjena = obj._konacnaOcjena;
	}



	ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set) {
		_tema = AlocirajNizKaraktera(nazivTeme);
	}

	//ZavrsniRad(const ZavrsniRad& org) : _poglavljaRada//(org._poglavljaRada), _konacnaOcjena(org._konacnaOcjena), //_datumOdbrane(org._datumOdbrane) {
	//	_tema = AlocirajNizKaraktera(org._tema);
	//}

	~ZavrsniRad() {
		delete[] _tema; _tema = nullptr;
	}
	char* GetNazivTeme()const { return _tema; }
	vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; };
	string GetDatumOdbrane()const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }
	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }

	//ZavrsniRad& operator=(const ZavrsniRad& org) {
	//	if (this != &org) {
	//		delete[] _tema;
	//		_tema = AlocirajNizKaraktera(org._tema);
	//		_datumOdbrane = org._datumOdbrane;
	//		_poglavljaRada = org._poglavljaRada;
	//		_konacnaOcjena = org._konacnaOcjena;
	//	}
	//	return *this;
	//}

	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
		COUT << ""Tema rada: "" << obj._tema << endl;
		COUT << ""Sadrzaj: "" << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << obj._poglavljaRada[i] << endl;
		COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
		return COUT;
	}
};

class Mentor {
	string _imePrezime;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<string, ZavrsniRad> _teme;
public:
	friend ostream& operator<<(ostream& ISPIS, Mentor& obj) {
		ISPIS << ""Ime prezime mentora : "" << obj._imePrezime << endl;
		ISPIS << ""Teme kod mentora : "" << obj._teme << endl;
		return ISPIS;
	}

	//ako ti ne ispisuje ime i prezime mentora 
	//provjeriti da li je pravilno dodijeljen u konstruktoru klase Mentor
	Mentor(string imePrezime) /*:_imePrezime(imePrezime)*/ {
		_imePrezime = imePrezime;
	}
	Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; };
	string GetImePrezime() { return _imePrezime; }
	void Info() {
		cout << _imePrezime << endl << _teme << endl;
	}
};

int main() {
#pragma region ovaj dio nije u sklopu postavke.
	//Poglavlje obj1(""naslov1"", ""sadrzaj1"");
//	Poglavlje obj2(obj1);//ctor kopije
//	Poglavlje obj3(""neki treci"", ""neki treci"");
	//cout << obj1;
//	obj3 = obj2;//operator=
#pragma endregion



	cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
	cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;
	//
	const int max = 4;
	Mentor* mentori[max];
	//
	mentori[0] = new Mentor(""Armina Hubana"");
	mentori[1] = new Mentor(""Zanin Vejzovic"");
	mentori[2] = new Mentor(""Jasmin Azemovic"");
	mentori[3] = new Mentor(""Emina Junuz"");

	//dereferencirati objekat kako bismo pristupili vrijednostima .
	//provjeriti da li je u operatoru<< pravilno definisano da se ispisuje ime i prezime 
	//provjeriti da li je pravilno dodijeljen u konstruktoru klase Mentor
	cout << *mentori[2] << endl;

	//	//parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
	ZavrsniRad podrsa_operaterima(""Sistem za podr�ku rada kablovskog operatera"");
	ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti be�i�nih ra�unarskih mre�a"");
	ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih klju�eva"");


	//
	//	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//	//parametri: nazivPoglavlja, sadrzajPoglavlja



	multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
	multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
	multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
	multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");




	//
	try {
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena


		multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
		multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
		multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
		multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
		multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
	}
	catch (exception& err) {
		cout << ""Greska -> "" << err.what() << endl;
	}
	cout << multimedijalni;

	//	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	//	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//	//parametri:brojIndeksa, zavrsniRad
	//	if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
	//		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	//	if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
	//		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	//	if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
	//		cout << ""Zavrsni rad nije dodat!"" << endl;
	//	if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
	//		cout << ""Zavrsni rad nije dodat!"" << endl;
	//	if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
	//		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	//	if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
	//		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	//
	//	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
	//	datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
	//		1. zavrsni rad ima broj poglavlja veci od minimalnog
	//		2. svako poglavlje ima broj karaktera veci od minimalnog
	//		3. svako poglavlje je prihvaceno/odobreno
	//	ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
	//	u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
	//*/
	//
	////parametri:brojIndeksa, datumOdbrane
	//	ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
	//	if (zr1 != nullptr)
	//		cout << *zr1 << endl;
	//
	//	zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
	//	if (zr1 != nullptr)
	//		cout << *zr1 << endl;
	//
		//ispisuje sve podatke o Mentoru i njegovim mentorstvima
		mentori[0]->Info();
	
		for (int i = 0; i < max; i++) {
			delete mentori[i];
			mentori[i] = nullptr;
		}
	system(""pause>0"");
	return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<string>
#include<vector>
#include <exception>
using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ĆE BITI OZNACENO KAO ""RE""
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEČILO GUBLJENJE URAĐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIČNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUČAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOĆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAČENO.
****************************************************************************/
const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;
char * AlocirajNizKaraktera(const char * sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1 * _elementi1;
	T2 * _elementi2;
	int _trenutno;
public:
	Kolekcija() :_trenutno(0), _elementi1(nullptr), _elementi2(nullptr) { }
	Kolekcija(const Kolekcija & obj)
	{
		_trenutno = obj._trenutno;
		_elementi1 = new T1[_trenutno];
		_elementi2 = new T2[_trenutno];
		for (int i = 0; i < _trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
	}
	Kolekcija & operator=(const Kolekcija & obj)
	{
		if (this != &obj)
		{
			if (_trenutno != 0)
			{
				delete[]_elementi1;
				delete[]_elementi2;
			}
			_trenutno = obj._trenutno;
			_elementi1 = new T1[_trenutno];
			_elementi2 = new T2[_trenutno];
			for (int i = 0; i < _trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}
		return *this;
	}
	~Kolekcija() {
		delete[] _elementi1; _elementi1 = nullptr;
		delete[] _elementi2; _elementi2 = nullptr;
	}
T1 * getElementi1Pok() { return _elementi1; }
	T2 * getElementi2Pok() { return _elementi2; }
	T1 & getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2 & getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() { return _trenutno; }

	friend ostream & operator<<(ostream & COUT, Kolekcija<T1, T2> & obj) {
		for (size_t i = 0; i < obj._trenutno; i++)
			COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
		return COUT;
	}
	void AddElement(T1 el1, T2 el2)
	{
		T1 *temp1 = new T1[_trenutno + 1];
		T2 *temp2 = new T2[_trenutno + 1];
		for (int i = 0; i < _trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[]_elementi1;
		delete[]_elementi2;
		temp1[_trenutno] = el1;
		temp2[_trenutno] = el2;
		_elementi1 = temp1;
		_elementi2 = temp2;
		temp1 = nullptr;
		temp2 = nullptr;
		_trenutno++;
	}
};
class Poglavlje {
	char * _naslov;
	char * _sadrzaj;
	bool _prihvaceno;
	int _ocjena;//da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:
	Poglavlje(const char * naslov = nullptr, const char * sadrzaj = nullptr)
		:_ocjena(0), _prihvaceno(false) {
		_naslov = AlocirajNizKaraktera(naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
	}
	Poglavlje(const Poglavlje& obj)
	{
		_naslov = AlocirajNizKaraktera(obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		_ocjena = obj._ocjena;
	}
	Poglavlje& operator=(const Poglavlje& obj)
	{
		if (this != &obj)
		{
			if (_naslov != nullptr)
				delete[]_naslov;
			_naslov = AlocirajNizKaraktera(obj._naslov);
			if (_sadrzaj != nullptr)
				delete[]_sadrzaj;
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = obj._ocjena;
		}
		return *this;
	}
	~Poglavlje() {
		delete[] _naslov; _naslov = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	friend ostream & operator<<(ostream & COUT, Poglavlje & obj) {
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << ""Ocjena: "" << obj._ocjena << endl;;
		return COUT;
	}
	char * GetNaslov() { return _naslov; }
	char * GetSadrzaj() { return _sadrzaj; }
	bool GetPrihvaceno() { return _prihvaceno; }
	int GetOcjena() { return _ocjena; }

	void OcijeniPoglavlje(int ocjena) {
		_ocjena = ocjena;
		if (_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}
};

class ZavrsniRad {
	char* _tema;
	vector<Poglavlje> _poglavljaRada;
	string _datumOdbrane;
	float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
	int Postoji(string naziv)
	{
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(naziv.c_str(), _poglavljaRada[i].GetNaslov()) == 0)
				return i;
		}
		return -1;
	}
	
public:
	ZavrsniRad(const char * nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set) {
		_tema = AlocirajNizKaraktera(nazivTeme);
	}

	ZavrsniRad(const ZavrsniRad& org) : _poglavljaRada(org._poglavljaRada), _konacnaOcjena(org._konacnaOcjena), _datumOdbrane(org._datumOdbrane) {
		_tema = AlocirajNizKaraktera(org._tema);
	}

	~ZavrsniRad() {
		delete[] _tema; _tema = nullptr;
	}
	char* GetNazivTeme()const { return _tema; }
	vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; };
	string GetDatumOdbrane()const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }
	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }
	float GetProsjek()
	{
		float prosjek = 0;
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			prosjek += _poglavljaRada[i].GetOcjena();
		}
		return prosjek / _poglavljaRada.size();
	}
	void SetKonacnaOcjena(float prosjek)
	{
		_konacnaOcjena = prosjek;
	}
	ZavrsniRad& operator=(const ZavrsniRad& org) {
		if (this != &org) {
			delete[] _tema;
			_tema = AlocirajNizKaraktera(org._tema);
			_datumOdbrane = org._datumOdbrane;
			_poglavljaRada = org._poglavljaRada;
			_konacnaOcjena = org._konacnaOcjena;
		}
		return *this;
	}

	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
		COUT << ""Tema rada: "" << obj._tema << endl;
		COUT << ""Sadrzaj: "" << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << obj._poglavljaRada[i] << endl;
		COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
		return COUT;
	}
	void DodajPoglavlje(string nazivPoglavlja, string sadrzajPoglavlja)
	{
		if (Postoji(nazivPoglavlja) > -1)
		{
			string s = _poglavljaRada[Postoji(nazivPoglavlja)].GetSadrzaj();
			s += "" "" + sadrzajPoglavlja;
		}
		_poglavljaRada.push_back(Poglavlje(nazivPoglavlja.c_str(), sadrzajPoglavlja.c_str()));
	}
	void OcijeniPoglavlje(string nazivPoglavlja, int ocjena)
	{
		if (ocjena < 6 || ocjena>10)
			throw exception(nedozvoljena_operacija);
		if (Postoji(nazivPoglavlja) < 0)
			throw exception(""Ne postoji poglavlje\n"");
		_poglavljaRada[Postoji(nazivPoglavlja)].OcijeniPoglavlje(ocjena);
	}
	bool validno()
	{
		for (int i = 0; i < _poglavljaRada.size(); i++)
		{
			int v = strlen(_poglavljaRada[i].GetSadrzaj());
			if (v < min_karaktera_po_poglavlju || !_poglavljaRada[i].GetPrihvaceno())
				return false;
		}
		return true;
	}
};

class Mentor {
	string _imePrezime;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<string, ZavrsniRad> _teme;
	bool istatema(string tema)
	{
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (strcmp(_teme.getElement2(i).GetNazivTeme(), tema.c_str()) == 0)
				return true;
		}
		return false;
	}
public:
	Mentor(string imePrezime) :_imePrezime(imePrezime) {}
	Mentor(const Mentor& obj)
	{
		_imePrezime = obj._imePrezime;
		_teme = obj._teme;
	}
	Mentor& operator=(const Mentor& obj)
	{
		if (this != &obj)
		{
			_imePrezime = obj._imePrezime;
			_teme = obj._teme;
		}
		return *this;
	}
	Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; };
	string GetImePrezime() { return _imePrezime; }
	void Info() {
		cout << _imePrezime << endl << _teme << endl;
	}
	bool DodajZavrsniRad(string brojIndeksa, ZavrsniRad zavrsniRad)
	{
		if (istatema(zavrsniRad.GetNazivTeme()) == true)
			return false;
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (_teme.getElement1(i) != brojIndeksa)
				return false;
		}
		_teme.AddElement(brojIndeksa, zavrsniRad);
		return true;
	}
	ZavrsniRad*ZakaziOdbranuRada(string brojIndeksa,string datumOdbrane)
	{
		for (int i = 0; i < _teme.getTrenutno(); i++)
		{
			if (_teme.getElement2(i).GetPoglavlja().size() > min_polgavlja&&_teme.getElement2(i).validno())
			{
				_teme.getElement2(i).SetDatumOdbrane(datumOdbrane);
				_teme.getElement2(i).SetKonacnaOcjena(_teme.getElement2(i).GetProsjek());
				return &_teme.getElement2(i);
			}
		}
		return nullptr;
	}
};
int main() {
	cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
	cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

	const int max = 4;
	Mentor* mentori[max];

	mentori[0] = new Mentor(""Armina Hubana"");
	mentori[1] = new Mentor(""Zanin Vejzovic"");
	mentori[2] = new Mentor(""Jasmin Azemovic"");
	mentori[3] = new Mentor(""Emina Junuz"");
	//parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
	ZavrsniRad podrsa_operaterima(""Sistem za podršku rada kablovskog operatera"");
	ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti bežičnih računarskih mreža"");
	ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih ključeva"");

	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//parametri: nazivPoglavlja, sadrzajPoglavlja
	multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
	multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
	multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
	multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");
//
	try {
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena

		multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
		multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
		multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
		multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
		multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
	}
	catch (exception & err) {
		cout << ""Greska -> "" << err.what() << endl;
	}

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//parametri:brojIndeksa, zavrsniRad
	if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;

	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
	datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
		1. zavrsni rad ima broj poglavlja veci od minimalnog
		2. svako poglavlje ima broj karaktera veci od minimalnog
		3. svako poglavlje je prihvaceno/odobreno
	ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
	u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
*/

//parametri:brojIndeksa, datumOdbrane
	ZavrsniRad * zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
	if (zr1 != nullptr)
		cout << *zr1 << endl;

	zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
	if (zr1 != nullptr)
		cout << *zr1 << endl;

	//ispisuje sve podatke o Mentoru i njegovim mentorstvima
	mentori[0]->Info();

	for (int i = 0; i < max; i++) {
		delete mentori[i];
		mentori[i] = nullptr;
	}
	system(""pause>0"");
	return 0;
}

---------------------------------------------------------------------------------------------------------------------------------------

#include<iostream>
#include<vector>
#include<string>

using namespace std;

/****************************************************************************
1. SVE KLASE TREBAJU POSJEDOVATI ADEKVATAN DESTRUKTOR
2. NAMJERNO IZOSTAVLJANJE KOMPLETNIH I/ILI POJEDINIH DIJELOVA DESTRUKTORA KOJI UZROKUJU RUNTIME ERROR ÆE BITI OZNACENO KAO ""RE""
3. SPAŠAVAJTE PROJEKAT KAKO BI SE SPRIJEÈILO GUBLJENJE URAÐENOG ZADATKA
4. NAZIVI FUNKCIJA, TE BROJ I TIP PARAMETARA MORAJU BITI IDENTIÈNI ONIMA KOJI SU KORIŠTENI U TESTNOM CODE-U, OSIM U SLUÈAJU DA POSTOJI ADEKVATAN RAZLOG ZA NJIHOVU MODIFIKACIJU. OSTALE, POMOÆNE FUNKCIJE MOŽETE IMENOVATI I DODAVATI PO ŽELJI.
5. IZUZETAK BACITE U FUNKCIJAMA U KOJIMA JE TO NAZNAÈENO.
****************************************************************************/
const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
	if (sadrzaj == nullptr)
		return nullptr;
	int vel = strlen(sadrzaj) + 1;
	char* temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

template<class T1, class T2>
class Kolekcija {
	T1* _elementi1;
	T2* _elementi2;
	int* _trenutno;
public:
	Kolekcija() :_trenutno(nullptr), _elementi1(nullptr), _elementi2(nullptr) {
		_trenutno = new int(0);
	}


	Kolekcija(const Kolekcija& obj)
	{
		_trenutno = new int(*obj._trenutno);
		_elementi1 = new T1[*_trenutno];
		_elementi2 = new T2[*_trenutno];
		for (size_t i = 0; i < *_trenutno; i++)
		{
			_elementi1[i] = obj._elementi1[i];
			_elementi2[i] = obj._elementi2[i];
		}
	}

	Kolekcija& operator =(const Kolekcija& obj)
	{
		if (this!= &obj)
		{
			delete[] _elementi1;
			delete[] _elementi2;
			delete _trenutno;
			_trenutno = new int(*obj._trenutno);
			_elementi1 = new T1[*_trenutno];
			_elementi2 = new T2[*_trenutno];
			for (size_t i = 0; i < *_trenutno; i++)
			{
				_elementi1[i] = obj._elementi1[i];
				_elementi2[i] = obj._elementi2[i];
			}
		}
		return *this;
	}

	void AddElement(T1& el1, T2& el2)
	{
		T1* temp1 = new T1[*_trenutno + 1];
		T2* temp2 = new T2[*_trenutno + 1] ;
		for (size_t i = 0; i < *_trenutno; i++)
		{
			temp1[i] = _elementi1[i];
			temp2[i] = _elementi2[i];
		}
		delete[] _elementi1;
		delete[] _elementi2;
		_elementi1 = temp1;
		_elementi2 = temp2;
		temp1 = nullptr;
		temp2 = nullptr;
		_elementi1[*_trenutno] = el1;
		_elementi2[*_trenutno] = el2;
		(*_trenutno)++;
	}

	~Kolekcija() {
		delete[] _elementi1; 
		_elementi1 = nullptr;
		delete[] _elementi2; 
		_elementi2 = nullptr;
		delete _trenutno; 
		_trenutno = nullptr;
	}
	T1* getElementi1Pok() { return _elementi1; }
	T2* getElementi2Pok() { return _elementi2; }
	T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
	T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
	int getTrenutno() { return *_trenutno; }

	friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
		for (size_t i = 0; i < *obj._trenutno; i++)
			COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
		return COUT;
	}
};
class Poglavlje {
	char* _naslov;
	char* _sadrzaj;
	bool _prihvaceno;
	int _ocjena;//da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:
	Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr)
		:_ocjena(0), _prihvaceno(false) {
		_naslov = AlocirajNizKaraktera (naslov);
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
	}

	Poglavlje(const Poglavlje& obj)
	{
		_naslov = AlocirajNizKaraktera(obj._naslov);
		_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
		_prihvaceno = obj._prihvaceno;
		_ocjena = obj._ocjena;
	}

	Poglavlje& operator =(const Poglavlje& obj)
	{
		if (this!=&obj)
		{
			delete[] _naslov;
			delete[] _sadrzaj;
			_naslov = AlocirajNizKaraktera(obj._naslov);
			_sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
			_prihvaceno = obj._prihvaceno;
			_ocjena = obj._ocjena;
		}
		return *this;
	}

	~Poglavlje() {
		delete[] _naslov; _naslov = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
		if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
			return COUT;
		COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
		if (obj._prihvaceno)
			COUT << ""Ocjena: "" << obj._ocjena << endl;;
		return COUT;
	}
	char* GetNaslov() { return _naslov; }
	char* GetSadrzaj() { return _sadrzaj; }
	bool GetPrihvaceno() { return _prihvaceno; }
	int GetOcjena() { return _ocjena; }

	void DodajNoviSadrzaj(const char* noviSadrzaj)
	{
		int vel = strlen(_sadrzaj) + strlen(noviSadrzaj) + 2;
		char* temp = new char[vel];
		strcpy_s(temp, vel, _sadrzaj);
		strcat_s(temp, vel, "" "");
		strcat_s(temp, vel, noviSadrzaj);
		delete[] _sadrzaj;
		_sadrzaj = temp;
		temp = nullptr;
	}

	void OcijeniPoglavlje(int ocjena) {
		_ocjena = ocjena;
		if (_ocjena > 5 && ocjena <= 10)
			_prihvaceno = true;
	}
};

class ZavrsniRad {
	char* _tema;
	vector<Poglavlje> _poglavljaRada;
	string _datumOdbrane;
	float _konacnaOcjena; //prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:
	ZavrsniRad(const char* nazivTeme = nullptr) : _konacnaOcjena(0), _datumOdbrane(not_set) {
		_tema = AlocirajNizKaraktera(nazivTeme);
	}

	ZavrsniRad(const ZavrsniRad& org) : _poglavljaRada(org._poglavljaRada), _konacnaOcjena(org._konacnaOcjena), _datumOdbrane(org._datumOdbrane) {
		_tema = AlocirajNizKaraktera(org._tema);
	}

	~ZavrsniRad() {
		delete[] _tema; _tema = nullptr;
	}
	char* GetNazivTeme()const { return _tema; }
	vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; };
	string GetDatumOdbrane()const { return _datumOdbrane; }
	float GetOcjena() { return _konacnaOcjena; }
	void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }

	ZavrsniRad& operator=(const ZavrsniRad& org) {
		if (this != &org) {
			delete[] _tema;
			_tema = AlocirajNizKaraktera(org._tema);
			_datumOdbrane = org._datumOdbrane;
			_poglavljaRada = org._poglavljaRada;
			_konacnaOcjena = org._konacnaOcjena;
		}
		return *this;
	}

	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. 
	ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i 
	pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//parametri: nazivPoglavlja, sadrzajPoglavlja

	void DodajPoglavlje(const char* nazivPoglavlja, const char* sadrzajPoglavlja)
	{
		for (size_t i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja,_poglavljaRada[i].GetNaslov())==0)
			{
				_poglavljaRada[i].DodajNoviSadrzaj(sadrzajPoglavlja);
				return;
			}
		}
		_poglavljaRada.push_back(Poglavlje(nazivPoglavlja, sadrzajPoglavlja));
	}

	/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, 
	dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. 
	U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena

	void OcijeniPoglavlje(const char* nazivPoglavlja, int ocjena)
	{
		if (ocjena < 6 || ocjena>10)
			throw(exception(""nije validna ocjena""));
		for (size_t i = 0; i < _poglavljaRada.size(); i++)
		{
			if (strcmp(nazivPoglavlja, _poglavljaRada[i].GetNaslov()) == 0)
			{
				_poglavljaRada[i].OcijeniPoglavlje(ocjena);
				return;
			}
		}
		throw(exception(""nismo pronasli poglavlje""));
	}

	friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
		COUT << ""Tema rada: "" << obj._tema << endl;
		COUT << ""Sadrzaj: "" << endl;
		for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
			COUT << obj._poglavljaRada[i] << endl;
		COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
		return COUT;
	}
};

class Mentor {
	string _imePrezime;
	//Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
	Kolekcija<string, ZavrsniRad> _teme;
public:
	Mentor(string imePrezime) :_imePrezime(imePrezime) {}
	Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; };
	string GetImePrezime() { return _imePrezime; }

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. 
	zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//parametri:brojIndeksa, zavrsniRad

	bool DodajZavrsniRad(string brojIndeksa, ZavrsniRad zavrsniRad)
	{
		for (size_t i = 0; i < _teme.getTrenutno(); i++)
		{
			if (strcmp(zavrsniRad.GetNazivTeme(), _teme.getElement2(i).GetNazivTeme()) == 0)
				return false;
		}
		_teme.AddElement(brojIndeksa, zavrsniRad);
		return true;
	}

	void Info() {
		cout << _imePrezime << endl << _teme << endl;
	}
};

int main() {
	cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
	cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

	const int max = 4;
	Mentor* mentori[max];

	mentori[0] = new Mentor(""Armina Hubana"");
	mentori[1] = new Mentor(""Zanin Vejzovic"");
	mentori[2] = new Mentor(""Jasmin Azemovic"");
	mentori[3] = new Mentor(""Emina Junuz"");
	//parametri: naziv zavrsnog rada
	ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
	ZavrsniRad podrsa_operaterima(""Sistem za podršku rada kablovskog operatera"");
	ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti bežiènih raèunarskih mreža"");
	ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih kljuèeva"");

	/*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj. ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor). u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
	//parametri: nazivPoglavlja, sadrzajPoglavlja
	multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
	multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
	multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
	multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
	multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");

	try {
		/*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim. U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
		//parametri:nazivPoglavlja, ocjena

		multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
		multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
		multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
		multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
	multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
	}
	catch (exception& err) {
		cout << ""Greska -> "" << err.what() << endl;
	}

	/*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu. zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
	sprijeciti dodavanje zavrsnih radova sa istom temom*/
	//parametri:brojIndeksa, zavrsniRad
	if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
		cout << ""Zavrsni rad nije dodat!"" << endl;
	if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;
	if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
		cout << ""Zavrsni rad uspjesno dodat!"" << endl;

//	/*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
//	datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
//		1. zavrsni rad ima broj poglavlja veci od minimalnog
//		2. svako poglavlje ima broj karaktera veci od minimalnog
//		3. svako poglavlje je prihvaceno/odobreno
//	ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja), postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
//	u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
//*/
//
////parametri:brojIndeksa, datumOdbrane
//	ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
//	if (zr1 != nullptr)
//		cout << *zr1 << endl;
//
//	zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
//	if (zr1 != nullptr)
//		cout << *zr1 << endl;

	//ispisuje sve podatke o Mentoru i njegovim mentorstvima
	mentori[0]->Info();

	for (int i = 0; i < max; i++) {
		delete mentori[i];
		mentori[i] = nullptr;
	}
	system(""pause>0"");
	return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include <vector>
#include <cstring>
#include <exception>

using namespace std;

const char* crt = ""\n-------------------------------------------\n"";
const char* nedozvoljena_operacija = ""Nedozvoljena operacija"";
const char* not_set = ""NOT_SET"";
const int min_polgavlja = 3;
const int min_karaktera_po_poglavlju = 30;

char* AlocirajNizKaraktera(const char* sadrzaj) {
    if (sadrzaj == nullptr)
        return nullptr;
    int vel = strlen(sadrzaj) + 1;
    char* temp = new char[vel];
    strcpy_s(temp, vel, sadrzaj);
    return temp;
}

template<class T1, class T2>
class Kolekcija {
    T1* _elementi1;
    T2* _elementi2;
    int _trenutno;
public:
    Kolekcija() : _trenutno(0), _elementi1(nullptr), _elementi2(nullptr) {
    }
    Kolekcija(const Kolekcija& obj)
    {
        _trenutno = obj._trenutno;
        _elementi1 = new T1[_trenutno];
        _elementi2 = new T2[_trenutno];
        for (size_t i = 0; i < _trenutno; i++)
        {
            _elementi1[i] = obj._elementi1[i];
            _elementi2[i] = obj._elementi2[i];
        }
    }
    Kolekcija& operator=(const Kolekcija& obj)
    {
        if (this != &obj)
        {
            delete[]_elementi1;
            delete[]_elementi2;
            _trenutno = obj._trenutno;
            _elementi1 = new T1[_trenutno];
            _elementi2 = new T2[_trenutno];
            for (size_t i = 0; i < _trenutno; i++)
            {
                _elementi1[i] = obj._elementi1[i];
                _elementi2[i] = obj._elementi2[i];
            }
        }
        return *this;
    }
    void AddElement(T1& el1, T2& el2)
    {
        T1* temp1 = new T1[_trenutno + 1];
        T2* temp2 = new T2[_trenutno + 1];
        for (size_t i = 0; i < _trenutno; i++)
        {
            temp1[i] = _elementi1[i];
            temp2[i] = _elementi2[i];
        }
        delete[]_elementi1;
        delete[]_elementi2;
        _elementi1 = temp1;
        _elementi2 = temp2;
        _elementi1[_trenutno] = el1;
        _elementi2[_trenutno] = el2;
        _trenutno++;
        temp1 = nullptr;
        temp2 = nullptr;
    }
    ~Kolekcija() {
        delete[] _elementi1; _elementi1 = nullptr;
        delete[] _elementi2; _elementi1 = nullptr;
    }
    T1* getElementi1Pok() { return _elementi1; }
    T2* getElementi2Pok() { return _elementi2; }
    T1& getElement1(int lokacija) { return _elementi1[lokacija]; }
    T2& getElement2(int lokacija) { return _elementi2[lokacija]; }
    int getTrenutno() { return _trenutno; }

    friend ostream& operator<<(ostream& COUT, Kolekcija<T1, T2>& obj) {
        for (size_t i = 0; i < obj._trenutno; i++)
            COUT << obj.getElement1(i) << "" "" << obj.getElement2(i) << endl;
        return COUT;
    }
};

class Poglavlje {
    char* _naslov;
    char* _sadrzaj;
    bool _prihvaceno;
    int _ocjena; // da bi se poglavlje smatralo prihvacenim ocjena mora biti u opsegu od 6 - 10
public:
    Poglavlje(const char* naslov = nullptr, const char* sadrzaj = nullptr)
        : _ocjena(0), _prihvaceno(false) {
        _naslov = AlocirajNizKaraktera(naslov);
        _sadrzaj = AlocirajNizKaraktera(sadrzaj);
    }
    Poglavlje(const Poglavlje& obj)
        : _prihvaceno(obj._prihvaceno), _ocjena(obj._ocjena) {
        _naslov = AlocirajNizKaraktera(obj._naslov);
        _sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
    }
    Poglavlje& operator=(const Poglavlje& obj) {
        if (this != &obj) {
            delete[] _naslov;
            delete[] _sadrzaj;
            _naslov = AlocirajNizKaraktera(obj._naslov);
            _sadrzaj = AlocirajNizKaraktera(obj._sadrzaj);
            _prihvaceno = obj._prihvaceno;
            _ocjena = obj._ocjena;
        }
        return *this;
    }

    void DodajSadrzaj(const char* noviSadrzaj) {
        int velicina = strlen(_sadrzaj) + strlen(noviSadrzaj) + 2;
        char* temp = new char[velicina];
        strcpy_s(temp, velicina, _sadrzaj);
        strcat_s(temp, velicina, "" "");
        strcat_s(temp, velicina, noviSadrzaj);
        delete[] _sadrzaj;
        _sadrzaj = temp;
        temp = nullptr;
    }

    ~Poglavlje() {
        delete[] _naslov; _naslov = nullptr;
        delete[] _sadrzaj; _sadrzaj = nullptr;
    }
    friend ostream& operator<<(ostream& COUT, Poglavlje& obj) {
        if (obj._naslov == nullptr || obj._sadrzaj == nullptr)
            return COUT;
        COUT << endl << obj._naslov << endl << obj._sadrzaj << endl;
        if (obj._prihvaceno)
            COUT << ""Ocjena: "" << obj._ocjena << endl;;
        return COUT;
    }
    char* GetNaslov() { return _naslov; }
    char* GetSadrzaj() { return _sadrzaj; }
    bool GetPrihvaceno() { return _prihvaceno; }
    int GetOcjena() { return _ocjena; }

    void OcijeniPoglavlje(int ocjena) {
        _ocjena = ocjena;
        if (_ocjena >= 6 && _ocjena <= 10)
            _prihvaceno = true;
    }
};

class ZavrsniRad {
    char* _tema;
    vector<Poglavlje> _poglavljaRada;
    string _datumOdbrane;
    float _konacnaOcjena; // prosjek ocjena svih poglavlja u zavrsnom radu koja se izracunava u momentu zakazivanja odbrane
public:
    ZavrsniRad(const char* nazivTeme = nullptr)
        : _konacnaOcjena(0), _datumOdbrane(not_set) {
        _tema = AlocirajNizKaraktera(nazivTeme);
    }

    ZavrsniRad(const ZavrsniRad& org)
        : _poglavljaRada(org._poglavljaRada), _konacnaOcjena(org._konacnaOcjena), _datumOdbrane(org._datumOdbrane) {
        _tema = AlocirajNizKaraktera(org._tema);
    }

    ~ZavrsniRad() {
        delete[] _tema; _tema = nullptr;
    }

    char* GetNazivTeme() const { return _tema; }
    vector<Poglavlje>& GetPoglavlja() { return _poglavljaRada; };
    string GetDatumOdbrane() const { return _datumOdbrane; }
    float GetOcjena() { return _konacnaOcjena; }
    void SetDatumOdbrane(string datumOdbrane) { _datumOdbrane = datumOdbrane; }

    ZavrsniRad& operator=(const ZavrsniRad& org) {
        if (this != &org) {
            delete[] _tema;
            _tema = AlocirajNizKaraktera(org._tema);
            _datumOdbrane = org._datumOdbrane;
            _poglavljaRada = org._poglavljaRada;
            _konacnaOcjena = org._konacnaOcjena;
        }
        return *this;
    }

    void DodajPoglavlje(const char* nazivPoglavlja, const char* sadrzajPoglavlja) {
        for (size_t i = 0; i < _poglavljaRada.size(); i++) {
            if (strcmp(nazivPoglavlja, _poglavljaRada[i].GetNaslov()) == 0) {
                _poglavljaRada[i].DodajSadrzaj(sadrzajPoglavlja);
                return;
            }
        }
        _poglavljaRada.push_back(Poglavlje(nazivPoglavlja, sadrzajPoglavlja));
    }

    void OcijeniPoglavlje(const char* nazivPoglavlja, int ocjena) {
        if (ocjena < 6 || ocjena > 10)
            throw exception(""Ocjena nije validna!"");
        for (size_t i = 0; i < _poglavljaRada.size(); i++) {
            if (strcmp(nazivPoglavlja, _poglavljaRada[i].GetNaslov()) == 0) {
                _poglavljaRada[i].OcijeniPoglavlje(ocjena);
                return;
            }
        }
        throw exception(""Poglavlje nije pronadjeno!"");
    }

    void SetKonacnaOcjena() {
        float prosjek = 0.0f;
        for (size_t i = 0; i < _poglavljaRada.size(); i++) {
            prosjek += _poglavljaRada[i].GetOcjena();
        }
        _konacnaOcjena = prosjek / _poglavljaRada.size();
    }

    friend ostream& operator<<(ostream& COUT, ZavrsniRad& obj) {
        COUT << ""Tema rada: "" << obj._tema << endl;
        COUT << ""Sadrzaj: "" << endl;
        for (size_t i = 0; i < obj._poglavljaRada.size(); i++)
            COUT << obj._poglavljaRada[i] << endl;
        COUT << ""Datum odbrane rada: "" << obj._datumOdbrane << endl << "" Ocjena: "" << obj._konacnaOcjena << endl;
        return COUT;
    }
};

class Mentor {
    string _imePrezime;
    // Parametar string predstavlja broj indeksa studenta koji prijavljuje zavrsni rad kod odredjenog Mentora
    Kolekcija<string, ZavrsniRad> _teme;

public:
    Mentor(string imePrezime) : _imePrezime(imePrezime) {}

    Kolekcija<string, ZavrsniRad>& GetTeme() { return _teme; };
    string GetImePrezime() { return _imePrezime; }

    void Info() {
        cout << _imePrezime << endl << _teme << endl;
    }

    bool DodajZavrsniRad(string brojIndeksa, ZavrsniRad zavrsniRad) {
        for (size_t i = 0; i < _teme.getTrenutno(); i++) {
            if (strcmp(zavrsniRad.GetNazivTeme(), _teme.getElement2(i).GetNazivTeme()) == 0) {
                return false;
            }
        }
        _teme.AddElement(brojIndeksa, zavrsniRad);
        return true;
    }

    ZavrsniRad* ZakaziOdbranuRada(string brojIndeksa, string datumOdbrane) {
        for (size_t i = 0; i < _teme.getTrenutno(); i++) {
            if (brojIndeksa == _teme.getElement1(i)) {
                if (_teme.getElement2(i).GetPoglavlja().size() > min_polgavlja) {
                    for (size_t j = 0; j < _teme.getElement2(i).GetPoglavlja().size(); j++) {
                        if (strlen(_teme.getElement2(i).GetPoglavlja()[j].GetSadrzaj()) <= min_karaktera_po_poglavlju ||
                            !_teme.getElement2(i).GetPoglavlja()[j].GetPrihvaceno()) {
                            return nullptr;
                        }
                    }
                    _teme.getElement2(i).SetDatumOdbrane(datumOdbrane);
                    _teme.getElement2(i).SetKonacnaOcjena();
                    return &_teme.getElement2(i);
                }
                return nullptr;
            }
        }
        return nullptr;
    }
};


int main() {
    cout << crt << ""UPLOAD RADA OBAVEZNO IZVRSITI U ODGOVARAJUCI FOLDER NA FTP SERVERU"" << endl;
    cout << ""U slucaju da je Upload folder prazan pritisnite tipku F5"" << crt;

    const int max = 4;
    Mentor* mentori[max];

    mentori[0] = new Mentor(""Armina Hubana"");
    mentori[1] = new Mentor(""Zanin Vejzovic"");
    mentori[2] = new Mentor(""Jasmin Azemovic"");
    mentori[3] = new Mentor(""Emina Junuz"");
    //parametri: naziv zavrsnog rada
    ZavrsniRad multimedijalni(""Multimedijalni informacijski sistem za visoko - obrazovnu ustanovu"");
    ZavrsniRad podrsa_operaterima(""Sistem za podršku rada kablovskog operatera"");
    ZavrsniRad analiza_sigurnosti(""Prakticna analiza sigurnosti bežiènih raèunarskih mreža"");
    ZavrsniRad kriptografija(""Primjena teorije informacija u procesu generisanja kriptografskih kljuèeva"");

    /*u zavrsni rad dodaje novo poglavlje i njegov sadrzaj.
    ukoliko poglavlje vec postoji u zavrsnom radu, funkcija tom poglavlju treba dodati novi sadrzaj i pri tome zadrzi postojeci (izmedju postojeceg i novog sadrzaja se dodaje prazan prostor).
    u slucaju da poglavlje ne postoji, ono se dodaje zajedno sa sadrzaje*/
    //parametri: nazivPoglavlja, sadrzajPoglavlja
    multimedijalni.DodajPoglavlje(""Uvod"", ""U ovom poglavlju ce biti rijeci"");
    multimedijalni.DodajPoglavlje(""Uvod"", ""o multimedijalnim sistemima koji se danas koriste"");
    multimedijalni.DodajPoglavlje(""Uvod"", ""u savremenom poslovanju"");
    multimedijalni.DodajPoglavlje(""Vrste multimedijalnih sistema"", ""Danas se moze govoriti o nekoliko vrsta multimedijalnih sistema, a neke od najznacajnijih su ..."");
    multimedijalni.DodajPoglavlje(""Teorija multimedije"", ""Sadrzaj koji bi trebao stajati na pocetku treceg poglavlja zavrsnog rada o multimediji studenta IB130011"");
    multimedijalni.DodajPoglavlje(""Zakljucak"", ""U ovom radu su predstavljeni osnovni koncepti i prakticna primjena..."");

    try {
        /*funkcija OcijeniPoglavlje, na osnovu naziva poglavlja, dodjeljuje ocjenu poglavlju te ukoliko je ocjena pozitivna (6 - 10) onda poglavlje oznacava prihvacenim.
        U slucaju da ocjena nije validna ili poglavlje ne postoji, funkcija baca izuzetak sa odgovarajucom porukom*/
        //parametri:nazivPoglavlja, ocjena

        multimedijalni.OcijeniPoglavlje(""Uvod"", 8);
        multimedijalni.OcijeniPoglavlje(""Vrste multimedijalnih sistema"", 8);
        multimedijalni.OcijeniPoglavlje(""Teorija multimedije"", 9);
        multimedijalni.OcijeniPoglavlje(""Zakljucak"", 7);
        multimedijalni.OcijeniPoglavlje(""Naziv poglavlja ne postoji"", 8);
    }
    catch (exception& err) {
        cout << ""Greska -> "" << err.what() << endl;
    }

    /*funkcija DodajZavrsniRad ima zadatak da odredjenom Mentoru dodijeli mentorstvo na zavrsnom radu.
    zavrsni rad se dodaje studentu sa brojem indeksa proslijedjenim kao prvi parametar.
    sprijeciti dodavanje zavrsnih radova sa istom temom*/
    //parametri:brojIndeksa, zavrsniRad
    if (mentori[0]->DodajZavrsniRad(""IB130011"", multimedijalni))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;
    if (mentori[0]->DodajZavrsniRad(""IB120051"", podrsa_operaterima))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;
    if (!mentori[0]->DodajZavrsniRad(""IB120056"", podrsa_operaterima))//dupliranje rada
        cout << ""Zavrsni rad nije dodat!"" << endl;
    if (!mentori[0]->DodajZavrsniRad(""IB120051"", kriptografija)) //studentu vec dodijeljen rad
        cout << ""Zavrsni rad nije dodat!"" << endl;
    if (mentori[1]->DodajZavrsniRad(""IB140102"", analiza_sigurnosti))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;
    if (mentori[2]->DodajZavrsniRad(""IB140002"", kriptografija))
        cout << ""Zavrsni rad uspjesno dodat!"" << endl;

    /*funkcija ZakaziOdbranuRada ima zadatak da studentu sa proslijedjenim brojem indeksa zakaze odbranu zavrsnog rada sto podrazumijeva definisanje
    datuma odbrane. odbrana rada se moze zakazati samo studentu koji je rad prethodno prijavio i pri tom su zadovoljeni sljedeci uslovi:
        1. zavrsni rad ima broj poglavlja veci od minimalnog
        2. svako poglavlje ima broj karaktera veci od minimalnog
        3. svako poglavlje je prihvaceno/odobreno
    ukoliko su zadovoljeni prethodni kriteriji, izracunava se konacna ocjena rada (prosjek ocjena svih poglavlja)
    , postavlja datum odbrane rada i vraca pokazivac na rad kome je zakazan odbrana.
    u slucaju da student sa primljenim brojem indeksa nije prijavio zavrsni rad ili neki od postavljenih kriterija nije zadovoljen, funkcija vraca nullptr.
*/

//parametri:brojIndeksa, datumOdbrane
    ZavrsniRad* zr1 = mentori[0]->ZakaziOdbranuRada(""IB130011"", ""25.09.2018"");
    if (zr1 != nullptr)
        cout << *zr1 << endl;

    zr1 = mentori[0]->ZakaziOdbranuRada(""IB130111"", ""25.09.2018"");//student sa brojem indeksa IB130111 jos uvijek nije prijavio rad
    if (zr1 != nullptr)
        cout << *zr1 << endl;

    //ispisuje sve podatke o Mentoru i njegovim mentorstvima
    mentori[0]->Info();

    for (int i = 0; i < max; i++) {
        delete mentori[i];
        mentori[i] = nullptr;
    }
    system(""pause>0"");
    return 0;
}
"
AFakKJTX,Untitled,Skos_Martren,C++,Monday 18th of September 2023 04:48:08 PM CDT,"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

private:

int Travel(TreeNode* node, int Height = 0){
  
  
  if(node == nullptr){return Height;}
  ++Height; // высота текущего узла
  
  int LeftHeight = Travel(node->left, Height);
  if(LeftHeight == -1){return -1;}

  int RightHeight = Travel(node->right, Height);
  if(RightHeight == -1){return -1;}

  cout << LeftHeight << ' ' << RightHeight << '\n';
  if(abs(RightHeight - LeftHeight) > 1){return -1;}

  return max(LeftHeight, RightHeight) + 1;
}

public:
    bool isBalanced(TreeNode* root) {
      
      if(root == nullptr){return true;}
      return (Travel(root->left)  >= 0 && Travel(root->right) >= 0);

    }
};"
L37fvrQk,Python 3.10+ Two Function Complete Monad Library! V2!,HasteBin0,Python,Monday 18th of September 2023 04:40:44 PM CDT,"# Python 3.10+ Two Function Complete Monad Library! :: https://pastebin.com/JP0tdf4s  #python #python3 #mod #monad


# py_struct = NamedTuple
class CompareResult(py_struct):
    les: bool
    equ: bool
    gtr: bool


cmp_str_input_t = NewType('cmp_str_input_t', Iterable[SupportsBytes and SupportsIndex and SupportsInt])


def cmp_iter_str(si1: cmp_str_input_t, si2: cmp_str_input_t) -> CompareResult:
    it1 = iter(si1)
    it2 = iter(si2)
    while True:
        c1 = next(it1, None)
        c2 = next(it2, None)
        n1 = c1 is None
        n2 = c2 is None
        if n1 and n2:
            return CompareResult(False, True, False)
        elif n1 ^ n2:
            return CompareResult(n1, False, n2)
        elif c1 != c2:
            return CompareResult(c1 < c2, False, c1 > c2)


class monad_attr_err_spec_t(py_struct):
    obj_type: Type[Any]
    attr_name: str
    fxn_triggered: callable


def monad(call_function: callable, *op_types: monad_attr_err_spec_t, pass_types: bool = False) -> callable:
    def _i(*args, **kwargs):
        try:
            if pass_types:
                return call_function(*args, op_types = op_types, **kwargs)
            return call_function(*args, **kwargs)
        except AttributeError as attr_err:  # https://docs.python.org/3.11/library/exceptions.html#AttributeError
            if attr_err.obj is None:
                return
            ae_obj, ae_name = attr_err.obj, attr_err.name  # Changed in version 3.10: Added the name and obj attributes.
            x: monad_attr_err_spec_t
            for x in op_types:
                if x.obj_type is type(ae_obj) and ae_name == x.attr_name:
                    return x.fxn_triggered(*args, ae_obj = ae_obj, ae_name = ae_name, **kwargs)
    
    return _i


py_curry_fxn_arg_t = TypeVar('py_curry_fxn_arg_t')
py_curry_fxn_closure_t = NewType('py_curry_fxn_closure_t', Callable[[py_curry_fxn_arg_t, ...], py_curry_fxn_arg_t])


def py_curry(fxn: py_curry_fxn_closure_t, *args: py_curry_fxn_arg_t, **kwargs: py_curry_fxn_arg_t) -> py_curry_fxn_closure_t:  # Keep It Simple, Stupid!
    return lambda *args2, **kwargs2: fxn(*args, *args2, **kwargs, **kwargs2)  # pass new args2 after old (earlier curried) args and update (earlier) kwargs with kwargs2."
yKNWzygh,Untitled,Sininerebane,C#,Monday 18th of September 2023 04:12:38 PM CDT,"namespace SecretMessage
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;

            string password;
            string accessToMessage;
            int tryCount;
            int tryNumber;

            accessToMessage = ""123456789"";
            tryCount = 3;

            for (int i = 0; i < tryCount; i++)
            {
                Console.WriteLine(""Введите свой пароль"");
                password = Console.ReadLine();

                if (password == accessToMessage)
                {
                    Console.WriteLine(""Вы читаете тайное сообщение"");
                    break;
                }
                else
                {
                    Console.WriteLine(""Вам в тайном сообщение отказано"");
                    tryNumber = tryCount - i - 1;

                    Console.WriteLine($""У вас осталось - {tryNumber}  попыток"");
                }
            }

            Console.Write(""\n Возвращайтесь к нам в еще раз"");
            Console.ReadKey();
            
        }
    }
}"
d4CVRCDJ,Pi-hole RegEx,Super_Man_,Bash,Monday 18th of September 2023 04:09:35 PM CDT,"#Paste currently work in Progress!
#DISCLAIMER: Dear PASTEBIN team all these domains are publicly known. So PLEASE do NOT flag this paste! Thank You! 

#Block Punycode-Domains abused for spam/scam
.*(xn--).*

#Block duckdns.org abused for spam/scam
duckdns\.org$ 

#Block sendgrid.net abused for spam/scam
sendgrid\.net$

#Block free cloudns.net DynDNS abused for spam/scam
cloudns\.ph$
cloudns\.nz$

#Block free plesk.page abused for spam/scam
plesk\.page$

#Block free No-ip DynDNS domains abused for spam/scam
3utilities\.com$
access\.ly$
blogsyte\.com$
bounceme\.net$
brasilia\.me$
cable-modem\.org$
ciscofreak\.com$
collegefan\.org$
couchpotatofries\.org$
damnserver\.com$
ddns\.me$
ddns\.net$
ddnsking\.com$
ditchyourip\.com$
dnsfor\.me$
dnsiskinky\.com$
dvrcam\.info$
dynns\.com$
eating-organic\.net$
fantasyleague\.cc$
freedynamicdns\.net$
freedynamicdns\.org$
geekgalaxy\.com$
golffan\.us$
gotdns\.ch$
health-carereform\.com$
homesecuritymac\.com$
homesecuritypc\.com$
hopto\.me$
hopto\.org$
hosthampster\.com$
ilovecollege\.info$
loginto\.me$
mlbfan\.org$
mmafan\.biz$
myactivedirectory\.com$
myddns\.me$
mydissent\.net$
myeffect\.net$
myftp\.biz$
myftp\.org$
mymediapc\.net$
mypsx\.net$
mysecuritycamera\.com$
mysecuritycamera\.net$
mysecuritycamera\.org$
myvnc\.com$
net-freaks\.com$
nflfan\.org$
nhlfan\.net$
onthewifi\.com$
pgafan\.net$
point2this\.com$
pointto\.us$
privatizehealthinsurance\.net$
quicksytes\.com$
read-books\.org$
redirectme\.net$
securitytactics\.com$
servebeer\.com$
serveblog\.net$
servecounterstrike\.com$
serveexchange\.com$
serveftp\.com$
servegame\.com$
servehalflife\.com$
servehttp\.com$
servehumour\.com$
serveirc\.com$
serveminecraft\.net$
servemp3\.com$
servep2p\.com$
servepics\.com$
servequake\.com$
servesarcasm\.com$
stufftoread\.com$
sytes\.net$
ufcfan\.org$
unusualperson\.com$
viewdns\.net$
webhop\.me$
workisboring\.com$
zapto\.org$

#Bundled list for copy & paste:
#Coming soon"
8xuf5fCz,Untitled,joaopedros2,C++,Monday 18th of September 2023 04:03:10 PM CDT,"#include ""Arduino.h""
#include ""LoRaWan_APP.h""

// ================================================================================================
// LoRa Configs
// ================================================================================================

#define RF_FREQUENCY                433000000  // Hz
#define TX_OUTPUT_POWER             17         // dBm
#define LORA_BANDWIDTH              0          // [0: 125 kHz, 1: 250 kHz, 2: 500 kHz, 3: Reserved]
#define LORA_SPREADING_FACTOR       9          // [SF7..SF12]
#define LORA_CODINGRATE             4          // [1: 4/5, 2: 4/6, 3: 4/7, 4: 4/8]
#define LORA_PREAMBLE_LENGTH        8          // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT         0          // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON  false
#define LORA_IQ_INVERSION_ON        false
#define RX_TIMEOUT_VALUE            1000
#define BUFFER_SIZE                 30         // Define the payload size here

char txpacket[BUFFER_SIZE];
char rxpacket[BUFFER_SIZE];

bool lora_idle=true;

static RadioEvents_t RadioEvents;
void OnTxDone( void );
void OnTxTimeout( void );

// ================================================================================================
// Define Pins
// ================================================================================================

#define LED_PIN                     35         // Define the LED pin

#define VBAT_PIN                    1          // Define the battery voltage pin
#define VBAT_READ_CNTRL_PIN         37         // Control pin for battery voltage reading

#define MOISTURE_PIN                7          // Define the moisture sensor pin
#define MOISTURE_PIN_POWER          6          // Define the moisture sensor pin power

// ================================================================================================
// Settings
// ================================================================================================

//For Sector Number
const int SECTOR_NUMBER = 1;                   // Define the sector number

//For Deep Sleep Mode
const uint32_t DEEP_SLEEP_TIME = 10;           // Define the time duration in minutes

// ================================================================================================

int batteryAnalogValue;
int moistureAnalogValue;

bool executedOnce = false;

// ================================================================================================
// Function to Read Battery Analog Value
// ================================================================================================

int batteryFunction() {
  
  delay(2000);
  
  int totalBattery = 0;
  
  for (int i = 0; i < 10; i++) {
    totalBattery += analogRead(VBAT_PIN);
    delay(100);
  }
  
  int averageBattery = totalBattery / 10;
  
  return averageBattery;
}

// ================================================================================================
// Function to Read Moisture Analog Value
// ================================================================================================

int moistureFunction() {
  
  delay(2000);
  
  int totalMoisture = 0;
  
  for (int i = 0; i < 10; i++) {
    totalMoisture += analogRead(MOISTURE_PIN);
    delay(100);
  }
  
  int averageMoisture = totalMoisture / 10;
  
  return averageMoisture;
}

// ================================================================================================
// Function to Enter in Deep Sleep Mode
// ================================================================================================

void enterDeepSleep() {
  
  // Put LoRa radio to sleep
  Radio.Sleep();
  
  // End SPI communication
  SPI.end();
  
  // Set pins to analog mode
  pinMode(RADIO_DIO_1, ANALOG);
  pinMode(RADIO_NSS, ANALOG);
  pinMode(RADIO_RESET, ANALOG);
  pinMode(RADIO_BUSY, ANALOG);
  pinMode(LORA_CLK, ANALOG);
  pinMode(LORA_MISO, ANALOG);
  pinMode(LORA_MOSI, ANALOG);

  esp_sleep_enable_timer_wakeup(DEEP_SLEEP_TIME * 60 * 1000000);
  Serial.printf(""\nEntering in deep sleep mode for %u "", DEEP_SLEEP_TIME);
  if (DEEP_SLEEP_TIME == 1) {
    Serial.println(""minute...\n"");
  } else {
    Serial.println(""minutes...\n"");
  }
  esp_deep_sleep_start();
}

// ================================================================================================

void setup() {
  Serial.begin(115200);

  // Set the LED pin as an output and turn it off
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  // Set the Vext pin as an output and turn it off
  pinMode(Vext, OUTPUT);
  digitalWrite(Vext, HIGH);

  // Configure the VBAT_READ_CNTRL_PIN as an output and turn it off
  pinMode(VBAT_READ_CNTRL_PIN, OUTPUT);
  digitalWrite(VBAT_READ_CNTRL_PIN, LOW);

  Serial.println(""\nGetting Analog Values from the sensors..."");
  delay(1000);

  batteryAnalogValue = batteryFunction();
  Serial.print(""Battery: "");
  Serial.println(batteryAnalogValue);

  // Configure the VBAT_PIN as an output and turn it off
  pinMode(VBAT_PIN, OUTPUT);
  digitalWrite(VBAT_PIN, LOW);
  delay(100);

  // Set the MOISTURE_PIN_POWER pin as an output and turn it on
  pinMode(MOISTURE_PIN_POWER, OUTPUT);
  digitalWrite(MOISTURE_PIN_POWER, HIGH);
  delay(1000);
  
  moistureAnalogValue = moistureFunction();
  Serial.print(""Moisture: "");
  Serial.println(moistureAnalogValue);

  // Set the MOISTURE_PIN pin as an output and turn it off
  pinMode(MOISTURE_PIN, OUTPUT);
  digitalWrite(MOISTURE_PIN, LOW);

  // Set the MOISTURE_PIN_POWER pin as an output and turn it off
  pinMode(MOISTURE_PIN_POWER, OUTPUT);
  digitalWrite(MOISTURE_PIN_POWER, LOW);

  Mcu.begin();
  Serial.print(""\nInitializing LoRa Radio..."");
  delay(1000);
  
  RadioEvents.TxDone = OnTxDone;
  RadioEvents.TxTimeout = OnTxTimeout;
  
  Radio.Init( &RadioEvents );
  Radio.SetChannel( RF_FREQUENCY );
  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                                 LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                 LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                 true, 0, 0, LORA_IQ_INVERSION_ON, 3000 );
}

// ================================================================================================

void loop() {

  if (!executedOnce) {
    
    if(lora_idle == true) {
      
      sprintf(txpacket, ""%d:%d:%d"", SECTOR_NUMBER, batteryAnalogValue, moistureAnalogValue);
  
      Serial.printf(""\r\nSending packet \""%s\"" , length %d\r\n"",txpacket, strlen(txpacket));
  
      // Send the package out
      Radio.Send( (uint8_t *)txpacket, strlen(txpacket) );
  
      lora_idle = false;
    }
    executedOnce = true;
  }
  Radio.IrqProcess();
}

// ================================================================================================

void OnTxDone( void ) {
  Serial.println(""TX done......"");
  lora_idle = true;

  delay(100);
  enterDeepSleep();
}

// ================================================================================================

void OnTxTimeout( void ) {
  Radio.Sleep();
  Serial.println(""TX Timeout......"");
  lora_idle = true;

  delay(100);
  enterDeepSleep();
}"
GpUnvnpL,Fitness Card,Spocoman,C++,Monday 18th of September 2023 03:48:43 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    double cash;
    cin >> cash;

    string gender;
    cin >> gender;

    int age;
    cin >> age;

    string sport;
    cin >> sport;

    double sum = 0;

    if (sport == ""Gym"") {
        if (gender == ""m"") {
            sum = 42;
        }
        else {
            sum = 35;
        }
    }
    else if (sport == ""Boxing"") {
        if (gender == ""m"") {
            sum = 41;
        }
        else {
            sum = 37;
        }
    }
    else if (sport == ""Yoga"") {
        if (gender == ""m"") {
            sum = 45;
        }
        else {
            sum = 42;
        }
    }
    else if (sport == ""Zumba"") {
        if (gender == ""m"") {
            sum = 34;
        }
        else {
            sum = 31;
        }
    }
    else if (sport == ""Dances"") {
        if (gender == ""m"") {
            sum = 51;
        }
        else {
            sum = 53;
        }
    }
    else if (sport == ""Pilates"") {
        if (gender == ""m"") {
            sum = 39;
        }
        else {
            sum = 37;
        }
    }

    if (age <= 19) {
        sum *= 0.80;
    }

    if (sum <= cash) {
        cout << ""You purchased a 1 month pass for "" << sport << "".\n"";
    }
    else {
        printf(""You don't have enough money! You need $%.2f more.\n"", sum - cash);
    }
    return 0;
}

Решение с тернарен оператор:

#include <iostream>
#include <string>

using namespace std;

int main() {
    double cash;
    cin >> cash;

    string gender;
    cin >> gender;

    int age;
    cin >> age;

    string sport;
    cin >> sport;

    double sum =
        (sport == ""Gym"" ? (gender == ""m"" ? 42 : 35) :
            sport == ""Boxing"" ? (gender == ""m"" ? 41 : 37) :
            sport == ""Yoga"" ? (gender == ""m"" ? 45 : 42) :
            sport == ""Zumba"" ? (gender == ""m"" ? 34 : 31) :
            sport == ""Dances"" ? (gender == ""m"" ? 51 : 53) :
            sport == ""Pilates"" ? (gender == ""m"" ? 39 : 37) : 0) * (age <= 19 ? 0.8 : 1);

    sum <= cash ?
        printf(""You purchased a 1 month pass for %s.\n"", sport.c_str()) :
        printf(""You don't have enough money! You need $%.2f more.\n"", sum - cash);

    return 0;
}"
vW89AvES,Untitled,Sininerebane,C#,Monday 18th of September 2023 03:44:30 PM CDT,"namespace TriangleSymbol
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;

            string symbol;
            string name;
            string symbolAndName;
            string frame;
            
            Console.WriteLine(""Введите свое имя"");
            name = Console.ReadLine();
            Console.WriteLine(""Введите символ"");
            symbol = Console.ReadLine();
            
            frame = """";
            symbolAndName = symbol +  name + symbol;
           
            for (int i = 0; i < symbolAndName.Length; i++)
            {
                frame += symbol;
            }

            Console.Write(frame);
            Console.WriteLine(""\n"" + symbolAndName);
            Console.Write(frame);
            Console.ReadKey();
        }
    }
}"
CuG8xxKf,Bear Cave,CrispinAsheYA,HTML,Monday 18th of September 2023 03:22:01 PM CDT,"<center><table width=""750"" height=""1120"" bgcolor=""000000""> <tr><td>
<center><table width=""730"" height=""1100"" bgcolor=""613404""><tr><td>

<center><table width=""706"" height=""50"" bgcolor=""D06A00""><tr><td>
<center><p><b>WELCOME</b></p></center>
</td></tr></table></center>

<center><table bgcolor=""613404"" height=""500"" width=""725"" cellspacing=""10""><tr>

<td bgcolor=""555555"" height=""250"" width=""250"">
<center><img src=""https://clipart-library.com/images/rcnebaXcR.jpg"" width=""200"" height=""200"" /></center>
</td>

<td bgcolor=""FFE668"" height=""250"" width=""250"">
<center><table width=""200"" height=""200"" bgcolor=""FFE6B4""><tr><td>
<center><p>NAME | GENDER | AGE</p>
<p>TEXT</p></center>
</td></tr></table></center>
</td>

<td bgcolor=""FFE668"" height=""250"" width=""250"">
<center><table width=""200"" height=""200"" bgcolor=""FFE6B4""><tr><td>
<center>
<p><b>TO DO LIST</b></p>
<p>[ ] GOAL</p>
</center>
</td></tr></table></center>
</td>

</tr><tr>

<td bgcolor=""FFE668"" height=""250"" width=""250"">
<center><table width=""200"" height=""200"" bgcolor=""FFE6B4""><tr><td>
<center>
<p><b>LINKS</b></p>
<p><a href=""#"">Link</a></p>
<p><a href=""#"">Link</a></p>
<p><b>FRIENDS</b></p>
<a><img src=""#"" height=""50"" /></a>
<a><img src=""#"" height=""50"" /></a>
</center>
</td></tr></table></center>
</td>

<td bgcolor=""FFE668"" height=""250"" width=""250"">
<center><table width=""200"" height=""200"" bgcolor=""FFE6B4""><tr><td>
<center><p>Below, you can find my Wishlist and Items I'm Collecting. Feel free to gift me any of the items shown!</p></center>
</td></tr></table></center>
</td>

<td bgcolor=""FFE668"" height=""250"" width=""250"">
<center><table width=""200"" height=""200"" bgcolor=""FFE6B4""><tr><td>
<center>
<p><b>COMPLETED GOALS</b></p>
<p>[X] GOAL</p>
</center>
</td></tr></table></center>
</td>

</tr>
</td></tr></table></center>

<center><table width=""715"" height=""240"" bgcolor=""613404"" cellspacing=""5""><tr>
<td bgcolor=""FFE668"" height=""240"" width=""710"">
<center><table width=""670"" height=""120"" bgcolor=""FFE6B4""><tr><td>
<center>
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
</center>
</td></tr></table></center>
</td>
</tr></table></center>

<center><table width=""715"" height=""240"" bgcolor=""613404"" cellspacing=""5""><tr>
<td bgcolor=""FFE668"" height=""240"" width=""710"">
<center><table width=""670"" height=""120"" bgcolor=""FFE6B4""><tr><td>
<center>
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
<img src=""#"" height=""100"" />
</center>
</td></tr></table></center>
</td>
</tr></table></center>

</td></tr></table></center>
</td></tr></table></center>
<center><p><a href=""https://www.goatlings.com/forums/view_topic/64611/0"">Code by CrispinAsheYA</a></p></center>"
gwcc9PKf,turtle client,montur,Lua,Monday 18th of September 2023 02:50:16 PM CDT,"local server_url = ""ws://84.86.255.191:8765""

os.loadAPI(""json"")

-- Connect to the WebSocket server
local ws, err = assert(http.websocket(server_url))
if not ws then
  print(""Failed to connect to WebSocket server:"", err)
  return
end

print(""Connected to Server."")

-- Define a function to send a message to the WebSocket server
local function sendMessage(message)
  ws.send(message)
end

-- Send a message to the WebSocket server
sendMessage(""Hello, WebSocket server!"")

-- Receive and handle messages from the WebSocket server
while true do
  local message, opcode = ws.receive()
  if message then
    print(""Received message:"", message)
    -- Handle the message as needed
    obj = json.decode(str)
    print(obj)
  else
    print(""Failed to receive message:"", opcode)
    break
  end
end

-- Close the WebSocket connection when done
ws.close()"
x17BJic8,Untitled,Skos_Martren,C++,Monday 18th of September 2023 02:49:07 PM CDT,"/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

private:

int Travel(TreeNode* node, int Height = 0){

  if(node == nullptr){return Height;}

  ++Height; // высота текущего узла

  int LeftHeight = Travel(node->left, Height);
  if(LeftHeight == -1){return -1;}

  int RightHeight = Travel(node->right, Height);
  if(RightHeight == -1){return -1;}

  if(abs(RightHeight - LeftHeight) > 1){return -1;}

  return max(LeftHeight, RightHeight) + 1;
}

public:
    bool isBalanced(TreeNode* root) {
      
      if(root == nullptr){return true;}
      return (Travel(root->left) * Travel(root->right) > 0);

    }
};"
PBguUKhj,Nastya C++ 1-2,Tiranka1861,C++,Monday 18th of September 2023 02:47:52 PM CDT,"#include<iostream>
#include<cmath> //обычно эту библиотеку подключабт для работы с тригонорметрией, если мы говорим о первом-втором блоке лаб у Даниловой, могут быть претензии
using namespace std;
int main()      //да, так вот надо писать

{
    setlocale(LC_ALL, ""ru"");

    int Num;    //с маленькой буквы
    double a1=0.5,Sum = 0;  //пробелы и с маленькой буквы
    double Result; //с маленькой буквы
    bool DataIsCorrect; //с маленькой буквы
    //нет условия к задаче 
    do
    {
        cout << ""Введите количество членов в прогрессии"" << endl;   //нет никаких условий -- какой число ввести, в каком диапазоне
        DataIsCorrect = true;                                       //это может быть вполне понятно нормальным людям, но мы пишем проги для самых групых -- которые вообще не планируют вводить нормальные значения
        cin >> Num;
        if (cin.fail())
        {
            DataIsCorrect = false;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
        if (!DataIsCorrect)
        {
            cout << ""Ошибка ввода. Попробуйте еще раз"" << endl;
        }
    } while (cin.get() != '\n');


    for(int Num1=1;Num1-1<Num; Num1++)  //общепринятые переменные для счетчика: i, j, k, l, m. Лучше использовать кого-то из них для цикла for
    {
        if (Num1 == 1)      //если после if идет только одно действие, то можно обойтись без скобок и ГВ настаивает на этом
        {
            Result = a1;

        }
        else
        {
            Result = pow(a1, 2);    //БАН-БАН-БАН такие штуки использовать сейчас нельзя. Крутимся как можем(
            a1 = Result;                  //pow имеет кст небольшую точность, реализован под капотом кривовато, так что лучше уж писать самостоятельно
        }

        Sum += Result;


    }
    cout << ""Сумма арифметической прогрессии: "" <<Sum<< endl;   //пробелы
    return 0;



}"
FZman1U2,Untitled,Rofyda_Elghadban1,C++,Monday 18th of September 2023 02:39:08 PM CDT," #include <bits/stdc++.h> 
 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/
 
 using namespace std;
 
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }


 void solve(){
  int n,counter=0,maxi=INT_MIN;
  cin>>n;
  vector<int>v(2*n);
  cin(v);
  int freq[100001]{};
  for(int i=0;i<2*n;i++){
    freq[v[i]]++;
    if(freq[v[i]]==1){
      counter++;
    }else if(freq[v[i]]>1){
      freq[v[i]]--;
      counter--;
    }
    maxi=max(maxi,counter);
  }cout<<maxi<<""\n"";
 }

 
 int main(){
 Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
  solve();

 
 return 0;
}
 
 "
tQiRRJhU,Untitled,Mizzzlo,C#,Monday 18th of September 2023 02:34:29 PM CDT,"public void Enable()
{
    _effects.StartEnableAnimation();
 
    _enable = true;
}
 
public void Disable()
{
    _pool.Free(this);
    
    _enable = false;
}"
t2w02u3R,Untitled,Mizzzlo,C#,Monday 18th of September 2023 02:33:19 PM CDT,"namespace IMJunior
{
    class Program
    {
        static void Main(string[] args)
        {
            var orderForm = new OrderForm();

            var paymentHandler = orderForm.ShowForm();

            paymentHandler.MakeCallback();
        }
    }
    public class OrderForm
    {
        private const string _qiwi = ""QIWI"";
        private const string _webMoney = ""WebMoney"";
        private const string _card = ""Card"";

        public ISystemCallback ShowForm()
        {
            Console.WriteLine(""Мы принимаем: QIWI, WebMoney, Card"");

            //симуляция веб интерфейса
            Console.WriteLine(""Какое системой вы хотите совершить оплату?"");

            string systemId = Console.ReadLine();

            ISystemCallback result = systemId switch
            {
                ""QIWI"" => new QiwiSystemCallback(new QiwiPaymentHandler(_qiwi)),
                ""WebMoney"" => new WebMoneySystemCallback(new WebMoneyPaymentHandler(_webMoney)),
                ""Card"" => new CardSystemCallback(new CardPaymentHandler(_card)),
                _ => default
            };

            return result;
        }
    }

    public abstract class SystemCallback : ISystemCallback
    {
        protected IPaymentHandler PaymentHandler;

        protected SystemCallback(IPaymentHandler paymentHandler)
        {
            PaymentHandler = paymentHandler;
        }

        public abstract void MakeCallback();
    }

    public class QiwiSystemCallback : SystemCallback
    {
        public QiwiSystemCallback(IPaymentHandler paymentHandler) : base(paymentHandler)
        {
        }

        public override void MakeCallback()
        {
            Console.WriteLine(""Перевод на страницу QIWI..."");
            PaymentHandler.ShowPaymentResult();
        }
    }

    public class WebMoneySystemCallback : SystemCallback
    {
        public WebMoneySystemCallback(IPaymentHandler paymentHandler) : base(paymentHandler)
        {
        }

        public override void MakeCallback()
        {
            Console.WriteLine(""Вызов API WebMoney..."");
            PaymentHandler.ShowPaymentResult();
        }
    }

    public class CardSystemCallback : SystemCallback
    {
        public CardSystemCallback(IPaymentHandler paymentHandler) : base(paymentHandler)
        {
        }

        public override void MakeCallback()
        {
            Console.WriteLine(""Вызов API банка эмитера карты Card..."");
            PaymentHandler.ShowPaymentResult();
        }
    }

    public abstract class PaymentHandler : IPaymentHandler
    {
        protected readonly string SystemId;

        protected PaymentHandler(string systemId)
        {
            SystemId = systemId;
        }

        public virtual void ShowPaymentResult()
        {
            Console.WriteLine($""Вы оплатили с помощью {SystemId}"");
        }
    }

    public class QiwiPaymentHandler : PaymentHandler
    {
        public QiwiPaymentHandler(string systemId) : base(systemId)
        {
        }

        public override void ShowPaymentResult()
        {
            base.ShowPaymentResult();
            Console.WriteLine(""Проверка платежа через QIWI..."");
            Console.WriteLine(""Оплата прошла успешно!"");
        }
    }

    public class WebMoneyPaymentHandler : PaymentHandler
    {
        public WebMoneyPaymentHandler(string systemId) : base(systemId)
        {
        }

        public override void ShowPaymentResult()
        {
            base.ShowPaymentResult();
            Console.WriteLine(""Проверка платежа через WebMoney..."");
            Console.WriteLine(""Оплата прошла успешно!"");
        }
    }

    public class CardPaymentHandler : PaymentHandler
    {
        public CardPaymentHandler(string systemId) : base(systemId)
        {
        }

        public override void ShowPaymentResult()
        {
            base.ShowPaymentResult();
            Console.WriteLine(""Проверка платежа через Card..."");
            Console.WriteLine(""Оплата прошла успешно!"");
        }
    }

    public interface ISystemCallback
    {
        public abstract void MakeCallback();

    }

    public interface IPaymentHandler
    {
        public void ShowPaymentResult();
    }
}"
TE54YqGk,Untitled,Mizzzlo,C#,Monday 18th of September 2023 02:29:44 PM CDT,"class Player
{
    public string Name { get; private set; }\
    public int Age { get; private set; }
 
    public int WeaponDamage { get; private set; }
 	public float WeaponCooldown { get; private set; }

    public float MovementSpeed { get; private set; }
    public float MovementDirectionX { get; private set; }
    public float MovementDirectionY { get; private set; }
 
    public void Move()
    {
        //Do move
    }
 
    public void Attack()
    {
        //attack
    }
 
    public bool IsReloading()
    {
        throw new NotImplementedException();
    }
}"
dGMKkiY0,Nastya C++ 1-1,Tiranka1861,C++,Monday 18th of September 2023 02:29:34 PM CDT,"#include<iostream>
using namespace std;
void main()     //стандартная форма записи по стандарту языка любого года int main()   
                //Это значит, что main является функцией и возравращает системе какое-то значение. Обычно 0, если программа завершлилась без ошибок, а если они были -- кодж ошибки выкидывает
                //void main форма компилируемая (но не везде!), стандартом не являющаяся и не прописанная внем, а значит вести себя может неоднозначно
                //использование таких штук безосновательно очень больно потом объяснять если не проверяющим, то лично Оношко ""руки оторвет""
                //так что лучше писать все-таки int main() и в конеце еще кое-что
{
    setlocale(LC_ALL, ""ru"");
    int x=0, y=0;       //пробелы между переменными и знаками присваивания, алгебраическими или сравнения
    bool DataIsСorrect;	//с маленькой буквы
    cout << ""Вам необходимо задать координаты точки M\n"";       //кому что нужно... Сначала прописывается то, что программа делает
                                                                //То есть отдельным выводом пишешь что-то вроде ""данная прогрпмма вычисляет...""

    do
    {
        cout << ""Введите координату X"" << endl;     //жоско не хватает условия, что ввожить, в каком диапазоне. Такую запись еще неплохо было таскать за собой при кажлой ошибке ввода
        DataIsСorrect = true;
        cin >> x;
        if (cin.fail())
        {
            DataIsСorrect = false;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');    //сто проц спросят за это, главное поясни, иначе будет грустно(
        }
        if (!DataIsСorrect)
        {
            cout << ""Ошибка ввода. Попробуйте еще раз"" << endl;
        }
    } while (cin.get() != '\n');


    do
    {
        cout << ""Введите координату Y"" << endl; //тоже самое, что и с X
        DataIsСorrect = true;
        cin >> y;
        if (cin.fail())
        {
            DataIsСorrect = false;
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
        if (!DataIsСorrect)
        {
            cout << ""Ошибка ввода. Попробуйте еще раз"" << endl;
        }
    } while (cin.get() != '\n');



    if (y-1 < 1 && y+1 > 0 && x-1 < 2 && x+1 > 0)   //снова пробелы потеряны(
    {
        cout << ""\nТочка М принадлежит замкнутому множеству D"" << endl;
    }
    else
    {
        cout << ""\nТочка М НЕ принадлежит замкнутому множеству D"" << endl;
    }
    //вот тут вот, когда пишешь через int main(), нужно закончить return 0
    //это обязательная команда в конце проги
}"
NEGJ6R7Q,Untitled,Derga,C++,Monday 18th of September 2023 02:28:30 PM CDT,"int tree_size;
    cin >> tree_size;

    vector <Node> tree(tree_size + 1);
    vector <bool> is_root(tree_size + 1, true);
    is_root[0] = false;

    for (int i = 1; i <= tree_size; ++i) {
        int left, right;
        cin >> left >> right;
        is_root[left] = false;
        is_root[right] = false;

        tree[i].val = i;
        if (left == 0) {
            tree[i].left = nullptr;
        } else {
            tree[i].left = &tree[left];
        }

        if (right == 0) {
            tree[i].right = nullptr;
        } else {
            tree[i].right = &tree[right];
        }
    }

    Node* root = nullptr;
    for (int i = 1; i < is_root.size(); ++i) {
        if (is_root[i]) {
            root = &tree[i];
            break;
        }
    }"
3gTHzEFi,Rand Help,reznov9185,C,Monday 18th of September 2023 02:28:22 PM CDT,// Hello Sajid
HQscw4nW,Fish Land,Spocoman,C++,Monday 18th of September 2023 02:06:08 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    double mackerelPrice, spratPrice, bonitoFishKg, saffronKg, shellKg;
    cin >> mackerelPrice >> spratPrice >> bonitoFishKg >> saffronKg >> shellKg;

    double bonitoFishSum = bonitoFishKg * mackerelPrice * 1.60;
    double saffronSum = saffronKg * spratPrice * 1.80;
    double shellSum = shellKg * 7.50;

    printf(""%.2f\n"", bonitoFishSum + saffronSum + shellSum);

    return 0;
}"
hS0A8aS4,Final Competition,Spocoman,C++,Monday 18th of September 2023 01:59:56 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int dancers;
    cin >> dancers;

    double points;
    cin >> points;

    string season, destination;
    cin >> season >> destination;

    double totalSum = dancers * points;

    if (destination == ""Abroad"") {
        totalSum *= 1.50;
        if (season == ""summer"") {
            totalSum *= 0.90;
        }
        else {
            totalSum *= 0.85;
        }
    }
    else {
        if (season == ""summer"") {
            totalSum *= 0.95;
        }
        else {
            totalSum *= 0.92;
        }
    }

    printf(""Charity - %.2f\n"", totalSum * 0.75);
    printf(""Money per dancer - %.2f\n"", totalSum * 0.25 / dancers);

    return 0;
}"
TEKwV7yy,lesson_321_16,valenki13,C++,Monday 18th of September 2023 01:49:27 PM CDT,"#include <iostream>

using namespace std;

void show_word(int size, char vects[]);

void test_concat() {
	char word1[]{ 'a', 'b', 'c' };
	char word2[]{ 'd', 'e','f', 'g' };

	char word3[1024];

	int size1 = sizeof(word1) / sizeof(word1[0]);
	int size2 = sizeof(word2) / sizeof(word2[0]);
	int size3 = size1 + size2;

	for(int k = 0; k < size1; k++) {
		word3[k] = word1[k];
	}

	for (int k = 0; k < size2; k++) {
		word3[k+size1] = word2[k];
	}
/*
	for (int k = size1; k < size1 + size2; k++) {
		word3[k] = word2[k-size1];
	}
*/
	show_word(size1, word1);
	show_word(size2, word2);
	show_word(size3, word3);
}


int get_rand(int a, int b) {
	return rand() % (b - a + 1) + a;
}

void show_word(int size, char vects[]) {
	for (int k = 0; k < size; k++) {
		cout << vects[k];
	}
	cout << ' ';
}


void show_arr(int size, int vects[]) {
	for (int k = 0; k < size; k++) {
		cout << vects[k] << ""\t"";
	}
	cout << endl;
}

void gen_arr(int size, int vects[]) {
	for (int k = 0; k < size; k++) {
		vects[k] = get_rand(-10, 10);
	}
}

int sum_arr(int size, int vects[]) {
	int sum{ 0 }; // оператор универсального присваивания для переменных
	for (int k = 0; k < size; k++) {
		sum += vects[k];
	}
	return sum;
}

void test0() {
	const int size = 8;
	int vects[size]{ 17, 20, 23 };
	int vects2[size];
	int summ_vect[size];

	show_arr(size, vects);
	cout << ""summ: "" << sum_arr(size, vects) << endl;

	gen_arr(size, vects);
	gen_arr(size, vects2);

	for (int k = 0; k < size; k++) {
		summ_vect[k] = vects[k] + vects2[k];
	}

	show_arr(size, vects);
	show_arr(size, vects2);
	show_arr(size, summ_vect);
}

void test1() {
	// оределение кол-ва элементов в массиве
	int arr[]{ 2,4345, 54, 54, 23, 32, 54, 43, 35, 34 };
	int x = 7;
	double y = 14.6;
	cout << sizeof(x) << endl;
	cout << sizeof(y) << endl;
	cout << sizeof(arr) << endl;
	cout << sizeof(arr) / sizeof(arr[0]) << endl;
}



int main() {
	srand((int)time(NULL));
	test_concat();
	return 0;
}"
Ye0smfqk,timeout | bash,uriid1,Bash,Monday 18th of September 2023 01:47:15 PM CDT,"#!/usr/bin/env bash

####--------------------------------####
#--# Author:   by uriid1            #--#
#--# License:  GNU GPL              #--#
#--# Telegram: @main_moderator      #--#
#--# Mail:     appdurov@gmail.com   #--#
####--------------------------------####

#----
# Parse args
#----
if [ $# -eq 0 ]; then
  echo ""Invalid argument.""
  exit 1
fi

while [[ $# -gt 0 ]]; do
  case ""$1"" in
    --timeout | -T)
      timeout=""$2""
      shift 2
      ;;

    --script | -S)
      script=""$2""
      shift 2
      ;;

    *)
      echo ""Invalid argument: $1""
      exit 1
      ;;
  esac
done

if [ -z ""$timeout"" ]; then
  echo ""Use arg: --timeout (1..9m, 1..9s, 1..9h)""
  exit 1
fi

if [ -z ""$script"" ]; then
  echo ""Use arg: --script (path_to_script or \""echo \""Hello, world!\""\"")""
  exit 1
fi
#--#

# $1 - time
parse_time() {
  local time=""$1""
  local unit=""${time: -1}""  # (s, m, h)
  local value=""${time:0: -1}""  # all symbols

  if [[ ! $value =~ ^[0-9]+$ ]]; then
    echo ""-1"";
    exit 1
  fi

  case ""$unit"" in
    s | S)
      echo ""$value""
    ;;

    m | M)
      echo ""$((value * 60))""
    ;;

    h | H)
      echo ""$((value * 3600))""
    ;;
    
    *)
      echo ""-1"";
      exit 1
    ;;
  esac
}

#---
# Convert to sec
#---
timeout_seconds=$(parse_time ""$timeout"")

if [ $timeout_seconds -le 0 ]; then
  echo ""Timeout less equal 0.""
  exit 1
fi
#--#

#
echo ""Sleep $timeout...""
sleep ""$timeout_seconds""

#
eval ""$script""
"
KBLZwsmQ,Untitled,nakra,Lua,Monday 18th of September 2023 12:36:38 PM CDT,"function overwriteCheck()
  accelerateTable = {}
  accelerateTable =
    {
      ""nausea"",
      ""haemophilia"",
      ""clumsiness"",
      ""unweavingbody"",
      ""unweavingmind"",
      ""unweavingspirit"",
      ""shadowmadness"",
      ""depression"",
      ""retribution"",
      ""pyramides"",
      ""sandfever"",
      ""darkshade"",
    }
  acclerateTableLock = {}
  accelerateTableLock = {""asthma"", ""slickness"", ""impatience"", ""anorexia""}
  accelCount = 0
  accelCountLock = 0
  for i, v in pairs(accelerateTable) do
    if svo.affl[v] then
      accelCount = accelCount + 1
    end
  end
  for i, v in pairs(accelerateTableLock) do
    if svo.affl[v] then
      accelCountLock = accelCountLock + 1
    end
  end
  if
    (accelCountLock >= 3 or (accelCountLock >= 2 and accelCount >= 2)) and
    not svo.affl.paralysis and
    not svo.affl.recklessness and
    canAccel == true
  then
    dwOver = true
    if not svo.affl.prone then
      overwriteBal = ""chrono accelerate boost""
    elseif svo.affl.prone then
      overwriteBal = ""chrono acclerate""
    end
  end
end"
FJHmT1Vu,Nigerian scammers [18-9-2/2023],bombaires,HTML,Monday 18th of September 2023 12:32:12 PM CDT,"<a href=""mailto:chrikenny01@gmail.com"">chrikenny01@gmail.com</a>
<a href=""mailto:ch.r.i.k.e.n.n.y.01@gmail.com"">ch.r.i.k.e.n.n.y.01@gmail.com</a>
<a href=""mailto:c.hri.k.en.n.y0.1@gmail.com"">c.hri.k.en.n.y0.1@gmail.com</a>
<a href=""mailto:chr.i.k.e.n.ny.0.1@gmail.com"">chr.i.k.e.n.ny.0.1@gmail.com</a>
<a href=""mailto:chrik.enny.01@gmail.com"">chrik.enny.01@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.nn.y01@gmail.com"">c.h.ri.k.e.nn.y01@gmail.com</a>
<a href=""mailto:c.h.r.i.kenn.y.0.1@gmail.com"">c.h.r.i.kenn.y.0.1@gmail.com</a>
<a href=""mailto:chr.i.kenny.0.1@gmail.com"">chr.i.kenny.0.1@gmail.com</a>
<a href=""mailto:chri.k.e.nn.y0.1@gmail.com"">chri.k.e.nn.y0.1@gmail.com</a>
<a href=""mailto:ch.rike.n.n.y.01@gmail.com"">ch.rike.n.n.y.01@gmail.com</a>
<a href=""mailto:ch.r.ike.nn.y.01@gmail.com"">ch.r.ike.nn.y.01@gmail.com</a>
<a href=""mailto:c.h.ri.k.en.n.y.0.1@gmail.com"">c.h.ri.k.en.n.y.0.1@gmail.com</a>
<a href=""mailto:c.hr.ik.e.n.ny0.1@gmail.com"">c.hr.ik.e.n.ny0.1@gmail.com</a>
<a href=""mailto:c.hr.i.k.en.n.y.01@gmail.com"">c.hr.i.k.en.n.y.01@gmail.com</a>
<a href=""mailto:c.hrik.e.n.ny01@gmail.com"">c.hrik.e.n.ny01@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.nn.y0.1@gmail.com"">c.h.ri.k.e.nn.y0.1@gmail.com</a>
<a href=""mailto:chr.i.k.e.n.n.y0.1@gmail.com"">chr.i.k.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:chr.ik.e.n.ny.01@gmail.com"">chr.ik.e.n.ny.01@gmail.com</a>
<a href=""mailto:c.h.rik.e.nn.y.0.1@gmail.com"">c.h.rik.e.nn.y.0.1@gmail.com</a>
<a href=""mailto:chr.i.ken.n.y01@gmail.com"">chr.i.ken.n.y01@gmail.com</a>
<a href=""mailto:chr.ikenn.y01@gmail.com"">chr.ikenn.y01@gmail.com</a>
<a href=""mailto:c.h.r.i.ke.n.n.y.01@gmail.com"">c.h.r.i.ke.n.n.y.01@gmail.com</a>
<a href=""mailto:c.hrik.enny0.1@gmail.com"">c.hrik.enny0.1@gmail.com</a>
<a href=""mailto:c.hr.ike.n.ny.01@gmail.com"">c.hr.ike.n.ny.01@gmail.com</a>
<a href=""mailto:ch.r.i.k.e.n.n.y.0.1@gmail.com"">ch.r.i.k.e.n.n.y.0.1@gmail.com</a>
<a href=""mailto:c.h.rike.nny.01@gmail.com"">c.h.rike.nny.01@gmail.com</a>
<a href=""mailto:ch.r.ik.e.n.ny01@gmail.com"">ch.r.ik.e.n.ny01@gmail.com</a>
<a href=""mailto:ch.r.i.k.enn.y01@gmail.com"">ch.r.i.k.enn.y01@gmail.com</a>
<a href=""mailto:ch.rik.enn.y.01@gmail.com"">ch.rik.enn.y.01@gmail.com</a>
<a href=""mailto:c.hri.kenn.y.0.1@gmail.com"">c.hri.kenn.y.0.1@gmail.com</a>
<a href=""mailto:ch.r.ik.en.n.y01@gmail.com"">ch.r.ik.en.n.y01@gmail.com</a>
<a href=""mailto:chri.ken.n.y.0.1@gmail.com"">chri.ken.n.y.0.1@gmail.com</a>
<a href=""mailto:c.hr.ik.e.n.ny.01@gmail.com"">c.hr.ik.e.n.ny.01@gmail.com</a>
<a href=""mailto:chri.ke.nn.y01@gmail.com"">chri.ke.nn.y01@gmail.com</a>
<a href=""mailto:ch.r.i.k.e.n.ny0.1@gmail.com"">ch.r.i.k.e.n.ny0.1@gmail.com</a>
<a href=""mailto:chri.k.enn.y0.1@gmail.com"">chri.k.enn.y0.1@gmail.com</a>
<a href=""mailto:chri.kenny01@gmail.com"">chri.kenny01@gmail.com</a>
<a href=""mailto:chr.i.k.en.ny.01@gmail.com"">chr.i.k.en.ny.01@gmail.com</a>
<a href=""mailto:chri.k.e.nny.01@gmail.com"">chri.k.e.nny.01@gmail.com</a>
<a href=""mailto:ch.ri.ke.n.ny.0.1@gmail.com"">ch.ri.ke.n.ny.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.n.n.y0.1@gmail.com"">c.h.ri.k.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:ch.r.i.kenn.y0.1@gmail.com"">ch.r.i.kenn.y0.1@gmail.com</a>
<a href=""mailto:c.h.rik.e.n.ny01@gmail.com"">c.h.rik.e.n.ny01@gmail.com</a>
<a href=""mailto:chr.i.k.e.nny01@gmail.com"">chr.i.k.e.nny01@gmail.com</a>
<a href=""mailto:ch.r.ik.e.n.n.y.01@gmail.com"">ch.r.ik.e.n.n.y.01@gmail.com</a>
<a href=""mailto:c.hrike.nn.y0.1@gmail.com"">c.hrike.nn.y0.1@gmail.com</a>
<a href=""mailto:c.h.r.i.ken.n.y.0.1@gmail.com"">c.h.r.i.ken.n.y.0.1@gmail.com</a>
<a href=""mailto:c.h.rik.e.nny01@gmail.com"">c.h.rik.e.nny01@gmail.com</a>
<a href=""mailto:chr.i.ke.n.n.y01@gmail.com"">chr.i.ke.n.n.y01@gmail.com</a>
<a href=""mailto:c.hr.ik.e.nn.y01@gmail.com"">c.hr.ik.e.nn.y01@gmail.com</a>
<a href=""mailto:chr.ike.nn.y01@gmail.com"">chr.ike.nn.y01@gmail.com</a>
<a href=""mailto:ch.r.i.ken.n.y0.1@gmail.com"">ch.r.i.ken.n.y0.1@gmail.com</a>
<a href=""mailto:c.hr.i.k.enny.0.1@gmail.com"">c.hr.i.k.enny.0.1@gmail.com</a>
<a href=""mailto:chr.ik.e.n.n.y0.1@gmail.com"">chr.ik.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:c.h.rik.e.nny0.1@gmail.com"">c.h.rik.e.nny0.1@gmail.com</a>
<a href=""mailto:chr.i.ke.n.ny.01@gmail.com"">chr.i.ke.n.ny.01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.n.n.y.0.1@gmail.com"">c.h.r.i.k.e.n.n.y.0.1@gmail.com</a>
<a href=""mailto:c.h.rik.en.n.y.0.1@gmail.com"">c.h.rik.en.n.y.0.1@gmail.com</a>
<a href=""mailto:c.hrike.n.n.y.01@gmail.com"">c.hrike.n.n.y.01@gmail.com</a>
<a href=""mailto:ch.ri.k.e.nn.y0.1@gmail.com"">ch.ri.k.e.nn.y0.1@gmail.com</a>
<a href=""mailto:c.h.ri.k.en.ny.01@gmail.com"">c.h.ri.k.en.ny.01@gmail.com</a>
<a href=""mailto:ch.ri.ke.n.n.y01@gmail.com"">ch.ri.ke.n.n.y01@gmail.com</a>
<a href=""mailto:ch.rik.e.nn.y0.1@gmail.com"">ch.rik.e.nn.y0.1@gmail.com</a>
<a href=""mailto:c.hr.i.k.e.nn.y.0.1@gmail.com"">c.hr.i.k.e.nn.y.0.1@gmail.com</a>
<a href=""mailto:c.hr.ik.e.n.n.y.01@gmail.com"">c.hr.ik.e.n.n.y.01@gmail.com</a>
<a href=""mailto:chr.ik.en.ny.0.1@gmail.com"">chr.ik.en.ny.0.1@gmail.com</a>
<a href=""mailto:ch.ri.k.e.nny01@gmail.com"">ch.ri.k.e.nny01@gmail.com</a>
<a href=""mailto:c.h.ri.k.en.n.y0.1@gmail.com"">c.h.ri.k.en.n.y0.1@gmail.com</a>
<a href=""mailto:ch.r.ikenny0.1@gmail.com"">ch.r.ikenny0.1@gmail.com</a>
<a href=""mailto:chr.i.k.enn.y.01@gmail.com"">chr.i.k.enn.y.01@gmail.com</a>
<a href=""mailto:chri.kenn.y0.1@gmail.com"">chri.kenn.y0.1@gmail.com</a>
<a href=""mailto:c.h.r.ik.e.nny0.1@gmail.com"">c.h.r.ik.e.nny0.1@gmail.com</a>
<a href=""mailto:c.h.ri.kenny.0.1@gmail.com"">c.h.ri.kenny.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.k.enny0.1@gmail.com"">c.h.ri.k.enny0.1@gmail.com</a>
<a href=""mailto:chriken.n.y.01@gmail.com"">chriken.n.y.01@gmail.com</a>
<a href=""mailto:chr.ik.en.n.y.01@gmail.com"">chr.ik.en.n.y.01@gmail.com</a>
<a href=""mailto:chrik.e.nny0.1@gmail.com"">chrik.e.nny0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ke.n.n.y01@gmail.com"">c.h.ri.ke.n.n.y01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.enny.01@gmail.com"">c.h.r.i.k.enny.01@gmail.com</a>
<a href=""mailto:chri.k.e.nn.y01@gmail.com"">chri.k.e.nn.y01@gmail.com</a>
<a href=""mailto:c.hri.k.enny0.1@gmail.com"">c.hri.k.enny0.1@gmail.com</a>
<a href=""mailto:chr.i.k.en.ny0.1@gmail.com"">chr.i.k.en.ny0.1@gmail.com</a>
<a href=""mailto:ch.ri.k.e.n.ny.01@gmail.com"">ch.ri.k.e.n.ny.01@gmail.com</a>
<a href=""mailto:chrik.en.ny.0.1@gmail.com"">chrik.en.ny.0.1@gmail.com</a>
<a href=""mailto:c.h.r.ike.nn.y.01@gmail.com"">c.h.r.ike.nn.y.01@gmail.com</a>
<a href=""mailto:ch.ri.k.e.n.n.y.01@gmail.com"">ch.ri.k.e.n.n.y.01@gmail.com</a>
<a href=""mailto:c.hr.i.ke.nn.y0.1@gmail.com"">c.hr.i.ke.nn.y0.1@gmail.com</a>
<a href=""mailto:chr.i.ke.n.ny0.1@gmail.com"">chr.i.ke.n.ny0.1@gmail.com</a>
<a href=""mailto:c.h.r.ik.enny.01@gmail.com"">c.h.r.ik.enny.01@gmail.com</a>
<a href=""mailto:c.h.ri.k.en.n.y.01@gmail.com"">c.h.ri.k.en.n.y.01@gmail.com</a>
<a href=""mailto:chr.ike.n.ny01@gmail.com"">chr.ike.n.ny01@gmail.com</a>
<a href=""mailto:chr.i.ken.n.y.0.1@gmail.com"">chr.i.ken.n.y.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ken.n.y.01@gmail.com"">c.h.ri.ken.n.y.01@gmail.com</a>
<a href=""mailto:chr.ikenn.y0.1@gmail.com"">chr.ikenn.y0.1@gmail.com</a>
<a href=""mailto:ch.r.i.k.en.n.y01@gmail.com"">ch.r.i.k.en.n.y01@gmail.com</a>
<a href=""mailto:chr.i.ken.n.y0.1@gmail.com"">chr.i.ken.n.y0.1@gmail.com</a>
<a href=""mailto:c.h.rik.enny01@gmail.com"">c.h.rik.enny01@gmail.com</a>
<a href=""mailto:c.hr.ike.n.n.y0.1@gmail.com"">c.hr.ike.n.n.y0.1@gmail.com</a>
<a href=""mailto:c.hri.k.en.ny.0.1@gmail.com"">c.hri.k.en.ny.0.1@gmail.com</a>
<a href=""mailto:ch.r.i.ke.nny0.1@gmail.com"">ch.r.i.ke.nny0.1@gmail.com</a>
<a href=""mailto:c.h.r.ik.e.nn.y.01@gmail.com"">c.h.r.ik.e.nn.y.01@gmail.com</a>
<a href=""mailto:chriken.ny0.1@gmail.com"">chriken.ny0.1@gmail.com</a>
<a href=""mailto:c.hr.ik.en.n.y.0.1@gmail.com"">c.hr.ik.en.n.y.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ke.nn.y.01@gmail.com"">c.h.ri.ke.nn.y.01@gmail.com</a>
<a href=""mailto:c.hr.ikenny.0.1@gmail.com"">c.hr.ikenny.0.1@gmail.com</a>
<a href=""mailto:ch.rik.e.n.n.y01@gmail.com"">ch.rik.e.n.n.y01@gmail.com</a>
<a href=""mailto:c.h.rik.enny0.1@gmail.com"">c.h.rik.enny0.1@gmail.com</a>
<a href=""mailto:c.hr.i.k.e.nny01@gmail.com"">c.hr.i.k.e.nny01@gmail.com</a>
<a href=""mailto:c.h.rik.e.n.ny0.1@gmail.com"">c.h.rik.e.n.ny0.1@gmail.com</a>
<a href=""mailto:c.hrike.n.ny.01@gmail.com"">c.hrike.n.ny.01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.nn.y0.1@gmail.com"">c.h.r.i.k.e.nn.y0.1@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.n.n.y.01@gmail.com"">c.h.ri.k.e.n.n.y.01@gmail.com</a>
<a href=""mailto:chr.i.ke.nny0.1@gmail.com"">chr.i.ke.nny0.1@gmail.com</a>
<a href=""mailto:ch.ri.ke.n.n.y.0.1@gmail.com"">ch.ri.ke.n.n.y.0.1@gmail.com</a>
<a href=""mailto:chr.i.ke.nny.01@gmail.com"">chr.i.ke.nny.01@gmail.com</a>
<a href=""mailto:chriken.n.y01@gmail.com"">chriken.n.y01@gmail.com</a>
<a href=""mailto:c.hr.i.ke.n.n.y.01@gmail.com"">c.hr.i.ke.n.n.y.01@gmail.com</a>
<a href=""mailto:chr.i.ke.nn.y01@gmail.com"">chr.i.ke.nn.y01@gmail.com</a>
<a href=""mailto:c.hri.ke.n.ny0.1@gmail.com"">c.hri.ke.n.ny0.1@gmail.com</a>
<a href=""mailto:c.hr.ikenn.y.01@gmail.com"">c.hr.ikenn.y.01@gmail.com</a>
<a href=""mailto:chri.k.en.ny.01@gmail.com"">chri.k.en.ny.01@gmail.com</a>
<a href=""mailto:chr.ik.enny0.1@gmail.com"">chr.ik.enny0.1@gmail.com</a>
<a href=""mailto:ch.ri.k.enn.y01@gmail.com"">ch.ri.k.enn.y01@gmail.com</a>
<a href=""mailto:c.hr.iken.ny0.1@gmail.com"">c.hr.iken.ny0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ke.nn.y0.1@gmail.com"">c.h.ri.ke.nn.y0.1@gmail.com</a>
<a href=""mailto:c.h.rike.nn.y.01@gmail.com"">c.h.rike.nn.y.01@gmail.com</a>
<a href=""mailto:ch.ri.k.enn.y.0.1@gmail.com"">ch.ri.k.enn.y.0.1@gmail.com</a>
<a href=""mailto:c.h.r.i.k.en.n.y.0.1@gmail.com"">c.h.r.i.k.en.n.y.0.1@gmail.com</a>
<a href=""mailto:ch.r.ik.e.nn.y.0.1@gmail.com"">ch.r.ik.e.nn.y.0.1@gmail.com</a>
<a href=""mailto:chr.i.ke.nn.y.0.1@gmail.com"">chr.i.ke.nn.y.0.1@gmail.com</a>
<a href=""mailto:ch.r.ike.n.n.y.0.1@gmail.com"">ch.r.ike.n.n.y.0.1@gmail.com</a>
<a href=""mailto:ch.rik.en.ny0.1@gmail.com"">ch.rik.en.ny0.1@gmail.com</a>
<a href=""mailto:ch.r.i.kenny.01@gmail.com"">ch.r.i.kenny.01@gmail.com</a>
<a href=""mailto:c.h.r.i.ke.nn.y.0.1@gmail.com"">c.h.r.i.ke.nn.y.0.1@gmail.com</a>
<a href=""mailto:chri.ke.n.ny.01@gmail.com"">chri.ke.n.ny.01@gmail.com</a>
<a href=""mailto:c.hrik.en.n.y.0.1@gmail.com"">c.hrik.en.n.y.0.1@gmail.com</a>
<a href=""mailto:chr.ik.enn.y01@gmail.com"">chr.ik.enn.y01@gmail.com</a>
<a href=""mailto:ch.r.iken.n.y01@gmail.com"">ch.r.iken.n.y01@gmail.com</a>
<a href=""mailto:chri.ken.ny01@gmail.com"">chri.ken.ny01@gmail.com</a>
<a href=""mailto:c.hrik.e.nny0.1@gmail.com"">c.hrik.e.nny0.1@gmail.com</a>
<a href=""mailto:ch.r.iken.ny0.1@gmail.com"">ch.r.iken.ny0.1@gmail.com</a>
<a href=""mailto:c.hr.ikenny0.1@gmail.com"">c.hr.ikenny0.1@gmail.com</a>
<a href=""mailto:chri.kenn.y.0.1@gmail.com"">chri.kenn.y.0.1@gmail.com</a>
<a href=""mailto:chr.i.kenn.y0.1@gmail.com"">chr.i.kenn.y0.1@gmail.com</a>
<a href=""mailto:c.hri.kenny01@gmail.com"">c.hri.kenny01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.n.ny01@gmail.com"">c.h.r.i.k.e.n.ny01@gmail.com</a>
<a href=""mailto:c.hr.i.ke.nn.y.0.1@gmail.com"">c.hr.i.ke.nn.y.0.1@gmail.com</a>
<a href=""mailto:c.hrik.enn.y01@gmail.com"">c.hrik.enn.y01@gmail.com</a>
<a href=""mailto:chr.i.k.e.nn.y0.1@gmail.com"">chr.i.k.e.nn.y0.1@gmail.com</a>
<a href=""mailto:c.hriken.ny.0.1@gmail.com"">c.hriken.ny.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ken.ny.0.1@gmail.com"">c.h.ri.ken.ny.0.1@gmail.com</a>
<a href=""mailto:ch.r.ik.e.n.ny0.1@gmail.com"">ch.r.ik.e.n.ny0.1@gmail.com</a>
<a href=""mailto:c.h.rikenn.y.0.1@gmail.com"">c.h.rikenn.y.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.nny0.1@gmail.com"">c.h.ri.k.e.nny0.1@gmail.com</a>
<a href=""mailto:ch.r.i.k.en.ny0.1@gmail.com"">ch.r.i.k.en.ny0.1@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.nny.01@gmail.com"">c.h.r.i.k.e.nny.01@gmail.com</a>
<a href=""mailto:c.hrik.e.n.ny0.1@gmail.com"">c.hrik.e.n.ny0.1@gmail.com</a>
<a href=""mailto:c.h.rik.enny.01@gmail.com"">c.h.rik.enny.01@gmail.com</a>
<a href=""mailto:ch.rikenn.y01@gmail.com"">ch.rikenn.y01@gmail.com</a>
<a href=""mailto:chri.k.enn.y.01@gmail.com"">chri.k.enn.y.01@gmail.com</a>
<a href=""mailto:chrik.e.n.ny0.1@gmail.com"">chrik.e.n.ny0.1@gmail.com</a>
<a href=""mailto:ch.rik.enny.01@gmail.com"">ch.rik.enny.01@gmail.com</a>
<a href=""mailto:chri.k.e.n.n.y.01@gmail.com"">chri.k.e.n.n.y.01@gmail.com</a>
<a href=""mailto:ch.rik.en.n.y01@gmail.com"">ch.rik.en.n.y01@gmail.com</a>
<a href=""mailto:chr.i.k.enny.0.1@gmail.com"">chr.i.k.enny.0.1@gmail.com</a>
<a href=""mailto:c.h.riken.n.y.0.1@gmail.com"">c.h.riken.n.y.0.1@gmail.com</a>
<a href=""mailto:chr.i.k.en.n.y.0.1@gmail.com"">chr.i.k.en.n.y.0.1@gmail.com</a>
<a href=""mailto:c.hr.ikenny.01@gmail.com"">c.hr.ikenny.01@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.n.n.y01@gmail.com"">c.h.ri.k.e.n.n.y01@gmail.com</a>
<a href=""mailto:chr.ike.n.ny.0.1@gmail.com"">chr.ike.n.ny.0.1@gmail.com</a>
<a href=""mailto:ch.rik.enny.0.1@gmail.com"">ch.rik.enny.0.1@gmail.com</a>
<a href=""mailto:c.hr.i.ken.n.y0.1@gmail.com"">c.hr.i.ken.n.y0.1@gmail.com</a>
<a href=""mailto:c.h.r.ik.en.ny.01@gmail.com"">c.h.r.ik.en.ny.01@gmail.com</a>
<a href=""mailto:chri.k.e.nn.y.0.1@gmail.com"">chri.k.e.nn.y.0.1@gmail.com</a>
<a href=""mailto:ch.r.i.k.e.n.n.y0.1@gmail.com"">ch.r.i.k.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:c.h.rike.nn.y01@gmail.com"">c.h.rike.nn.y01@gmail.com</a>
<a href=""mailto:chri.ke.nn.y.01@gmail.com"">chri.ke.nn.y.01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.n.n.y01@gmail.com"">c.h.r.i.k.e.n.n.y01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.n.n.y0.1@gmail.com"">c.h.r.i.k.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:chrike.n.n.y.01@gmail.com"">chrike.n.n.y.01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.en.ny.01@gmail.com"">c.h.r.i.k.en.ny.01@gmail.com</a>
<a href=""mailto:ch.r.ik.en.ny0.1@gmail.com"">ch.r.ik.en.ny0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ke.n.ny.0.1@gmail.com"">c.h.ri.ke.n.ny.0.1@gmail.com</a>
<a href=""mailto:chr.ik.enny01@gmail.com"">chr.ik.enny01@gmail.com</a>
<a href=""mailto:c.h.r.i.k.e.n.n.y.01@gmail.com"">c.h.r.i.k.e.n.n.y.01@gmail.com</a>
<a href=""mailto:ch.ri.k.en.n.y.01@gmail.com"">ch.ri.k.en.n.y.01@gmail.com</a>
<a href=""mailto:chrik.en.ny.01@gmail.com"">chrik.en.ny.01@gmail.com</a>
<a href=""mailto:ch.rik.e.n.n.y0.1@gmail.com"">ch.rik.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:c.h.riken.n.y.01@gmail.com"">c.h.riken.n.y.01@gmail.com</a>
<a href=""mailto:c.h.r.ik.e.nny.01@gmail.com"">c.h.r.ik.e.nny.01@gmail.com</a>
<a href=""mailto:ch.r.i.k.enn.y.0.1@gmail.com"">ch.r.i.k.enn.y.0.1@gmail.com</a>
<a href=""mailto:ch.rik.e.nn.y.0.1@gmail.com"">ch.rik.e.nn.y.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.kenny0.1@gmail.com"">c.h.ri.kenny0.1@gmail.com</a>
<a href=""mailto:c.h.riken.n.y01@gmail.com"">c.h.riken.n.y01@gmail.com</a>
<a href=""mailto:c.hri.ken.ny0.1@gmail.com"">c.hri.ken.ny0.1@gmail.com</a>
<a href=""mailto:c.hrike.n.n.y01@gmail.com"">c.hrike.n.n.y01@gmail.com</a>
<a href=""mailto:ch.ri.ken.ny.0.1@gmail.com"">ch.ri.ken.ny.0.1@gmail.com</a>
<a href=""mailto:c.h.ri.ke.nny.01@gmail.com"">c.h.ri.ke.nny.01@gmail.com</a>
<a href=""mailto:c.hrik.e.n.n.y0.1@gmail.com"">c.hrik.e.n.n.y0.1@gmail.com</a>
<a href=""mailto:c.h.rik.enn.y0.1@gmail.com"">c.h.rik.enn.y0.1@gmail.com</a>
<a href=""mailto:c.h.ri.k.e.nny.01@gmail.com"">c.h.ri.k.e.nny.01@gmail.com</a>
<a href=""mailto:infofedrbnyus777@gmail.com"">infofedrbnyus777@gmail.com</a>
<a href=""mailto:in.fof.e.drb.n.y.u.s.7.77@gmail.com"">in.fof.e.drb.n.y.u.s.7.77@gmail.com</a>
<a href=""mailto:info.fe.dr.bny.u.s.777@gmail.com"">info.fe.dr.bny.u.s.777@gmail.com</a>
<a href=""mailto:in.f.ofe.dr.b.n.y.us777@gmail.com"">in.f.ofe.dr.b.n.y.us777@gmail.com</a>
<a href=""mailto:in.fofe.d.rb.n.y.us.777@gmail.com"">in.fofe.d.rb.n.y.us.777@gmail.com</a>
<a href=""mailto:i.n.f.of.ed.r.b.n.y.us77.7@gmail.com"">i.n.f.of.ed.r.b.n.y.us77.7@gmail.com</a>
<a href=""mailto:inf.o.f.e.drb.ny.u.s7.7.7@gmail.com"">inf.o.f.e.drb.ny.u.s7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.of.ed.rbnyus7.7.7@gmail.com"">i.n.f.of.ed.rbnyus7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.f.ed.r.b.n.y.u.s.7.77@gmail.com"">i.n.f.o.f.ed.r.b.n.y.u.s.7.77@gmail.com</a>
<a href=""mailto:infof.edr.b.n.y.us.7.7.7@gmail.com"">infof.edr.b.n.y.us.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.of.ed.r.b.n.yus777@gmail.com"">i.n.f.of.ed.r.b.n.yus777@gmail.com</a>
<a href=""mailto:i.nfo.fe.d.r.bny.us7.7.7@gmail.com"">i.nfo.fe.d.r.bny.us7.7.7@gmail.com</a>
<a href=""mailto:infofedr.b.nyu.s.777@gmail.com"">infofedr.b.nyu.s.777@gmail.com</a>
<a href=""mailto:in.fofe.drb.n.y.u.s.7.77@gmail.com"">in.fofe.drb.n.y.u.s.7.77@gmail.com</a>
<a href=""mailto:in.fof.ed.r.bn.y.us7.77@gmail.com"">in.fof.ed.r.bn.y.us7.77@gmail.com</a>
<a href=""mailto:i.nfo.fe.d.r.b.n.yu.s7.77@gmail.com"">i.nfo.fe.d.r.b.n.yu.s7.77@gmail.com</a>
<a href=""mailto:in.fo.fed.r.bn.y.us.7.7.7@gmail.com"">in.fo.fed.r.bn.y.us.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.of.e.dr.bn.yu.s77.7@gmail.com"">i.n.f.of.e.dr.bn.yu.s77.7@gmail.com</a>
<a href=""mailto:infofe.d.rb.ny.u.s777@gmail.com"">infofe.d.rb.ny.u.s777@gmail.com</a>
<a href=""mailto:i.nf.ofedrb.n.y.u.s.7.77@gmail.com"">i.nf.ofedrb.n.y.u.s.7.77@gmail.com</a>
<a href=""mailto:i.n.f.o.f.ed.r.bnyu.s7.7.7@gmail.com"">i.n.f.o.f.ed.r.bnyu.s7.7.7@gmail.com</a>
<a href=""mailto:in.fofe.drbny.us.7.77@gmail.com"">in.fofe.drbny.us.7.77@gmail.com</a>
<a href=""mailto:infof.e.d.rb.n.yus777@gmail.com"">infof.e.d.rb.n.yus777@gmail.com</a>
<a href=""mailto:in.f.of.e.dr.bnyus.7.7.7@gmail.com"">in.f.of.e.dr.bnyus.7.7.7@gmail.com</a>
<a href=""mailto:in.f.ofed.r.b.n.y.u.s777@gmail.com"">in.f.ofed.r.b.n.y.u.s777@gmail.com</a>
<a href=""mailto:i.nf.of.e.drb.nyu.s777@gmail.com"">i.nf.of.e.drb.nyu.s777@gmail.com</a>
<a href=""mailto:in.f.o.fe.dr.bny.us7.77@gmail.com"">in.f.o.fe.dr.bny.us7.77@gmail.com</a>
<a href=""mailto:infofe.d.r.bnyus7.77@gmail.com"">infofe.d.r.bnyus7.77@gmail.com</a>
<a href=""mailto:inf.o.f.e.d.r.bny.u.s.7.77@gmail.com"">inf.o.f.e.d.r.bny.u.s.7.77@gmail.com</a>
<a href=""mailto:inf.o.f.e.drb.n.yu.s7.7.7@gmail.com"">inf.o.f.e.drb.n.yu.s7.7.7@gmail.com</a>
<a href=""mailto:in.fof.e.dr.bn.yu.s7.7.7@gmail.com"">in.fof.e.dr.bn.yu.s7.7.7@gmail.com</a>
<a href=""mailto:inf.o.f.e.d.r.bnyus.77.7@gmail.com"">inf.o.f.e.d.r.bnyus.77.7@gmail.com</a>
<a href=""mailto:i.n.fofedrbny.us.777@gmail.com"">i.n.fofedrbny.us.777@gmail.com</a>
<a href=""mailto:i.nf.ofed.r.b.n.yu.s777@gmail.com"">i.nf.ofed.r.b.n.yu.s777@gmail.com</a>
<a href=""mailto:info.f.e.dr.bn.yus7.7.7@gmail.com"">info.f.e.dr.bn.yus7.7.7@gmail.com</a>
<a href=""mailto:infof.ed.r.b.n.y.us.7.7.7@gmail.com"">infof.ed.r.b.n.y.us.7.7.7@gmail.com</a>
<a href=""mailto:inf.ofedrb.n.yus.7.77@gmail.com"">inf.ofedrb.n.yus.7.77@gmail.com</a>
<a href=""mailto:i.n.f.ofedrbnyus.7.7.7@gmail.com"">i.n.f.ofedrbnyus.7.7.7@gmail.com</a>
<a href=""mailto:in.f.o.fed.rb.n.y.u.s77.7@gmail.com"">in.f.o.fed.rb.n.y.u.s77.7@gmail.com</a>
<a href=""mailto:i.n.fo.f.edrb.nyus7.7.7@gmail.com"">i.n.fo.f.edrb.nyus7.7.7@gmail.com</a>
<a href=""mailto:inf.of.e.d.rbn.y.u.s.77.7@gmail.com"">inf.of.e.d.rbn.y.u.s.77.7@gmail.com</a>
<a href=""mailto:in.fofe.d.rb.n.y.us77.7@gmail.com"">in.fofe.d.rb.n.y.us77.7@gmail.com</a>
<a href=""mailto:i.nf.o.f.edrb.n.y.us.7.77@gmail.com"">i.nf.o.f.edrb.n.y.us.7.77@gmail.com</a>
<a href=""mailto:i.nfo.fedrb.n.yu.s777@gmail.com"">i.nfo.fedrb.n.yu.s777@gmail.com</a>
<a href=""mailto:i.n.fo.fe.d.r.bny.us77.7@gmail.com"">i.n.fo.fe.d.r.bny.us77.7@gmail.com</a>
<a href=""mailto:in.fof.ed.rbn.yus.77.7@gmail.com"">in.fof.ed.rbn.yus.77.7@gmail.com</a>
<a href=""mailto:i.n.fofedr.bn.yus.77.7@gmail.com"">i.n.fofedr.bn.yus.77.7@gmail.com</a>
<a href=""mailto:i.nf.o.f.edrbn.yu.s.777@gmail.com"">i.nf.o.f.edrbn.yu.s.777@gmail.com</a>
<a href=""mailto:i.nf.ofe.dr.bn.yus.7.77@gmail.com"">i.nf.ofe.dr.bn.yus.7.77@gmail.com</a>
<a href=""mailto:inf.o.fed.r.b.nyus777@gmail.com"">inf.o.fed.r.b.nyus777@gmail.com</a>
<a href=""mailto:i.nfo.f.e.d.rb.ny.us7.7.7@gmail.com"">i.nfo.f.e.d.rb.ny.us7.7.7@gmail.com</a>
<a href=""mailto:i.nfo.fedrb.n.yus.7.77@gmail.com"">i.nfo.fedrb.n.yus.7.77@gmail.com</a>
<a href=""mailto:i.nf.ofedrbn.y.us.7.77@gmail.com"">i.nf.ofedrbn.y.us.7.77@gmail.com</a>
<a href=""mailto:i.nfo.fedr.b.ny.u.s.777@gmail.com"">i.nfo.fedr.b.ny.u.s.777@gmail.com</a>
<a href=""mailto:i.n.f.o.fe.d.rbn.y.us.777@gmail.com"">i.n.f.o.fe.d.rbn.y.us.777@gmail.com</a>
<a href=""mailto:in.fo.f.edr.b.n.y.u.s.7.7.7@gmail.com"">in.fo.f.edr.b.n.y.u.s.7.7.7@gmail.com</a>
<a href=""mailto:i.n.fo.f.e.d.r.b.nyus77.7@gmail.com"">i.n.fo.f.e.d.r.b.nyus77.7@gmail.com</a>
<a href=""mailto:i.nfo.f.e.drb.ny.u.s777@gmail.com"">i.nfo.f.e.drb.ny.u.s777@gmail.com</a>
<a href=""mailto:i.n.fo.f.edrbnyus777@gmail.com"">i.n.fo.f.edrbnyus777@gmail.com</a>
<a href=""mailto:in.fo.f.e.drb.nyu.s.7.77@gmail.com"">in.fo.f.e.drb.nyu.s.7.77@gmail.com</a>
<a href=""mailto:in.f.o.f.edrb.nyus77.7@gmail.com"">in.f.o.f.edrb.nyus77.7@gmail.com</a>
<a href=""mailto:in.fof.edr.bn.yu.s.7.77@gmail.com"">in.fof.edr.bn.yu.s.7.77@gmail.com</a>
<a href=""mailto:i.nf.o.f.e.drbn.y.u.s.7.7.7@gmail.com"">i.nf.o.f.e.drbn.y.u.s.7.7.7@gmail.com</a>
<a href=""mailto:i.nfof.ed.rb.n.y.us777@gmail.com"">i.nfof.ed.rb.n.y.us777@gmail.com</a>
<a href=""mailto:i.n.fo.f.edrb.nyu.s7.77@gmail.com"">i.n.fo.f.edrb.nyu.s7.77@gmail.com</a>
<a href=""mailto:in.fo.f.edr.b.n.yus777@gmail.com"">in.fo.f.edr.b.n.yus777@gmail.com</a>
<a href=""mailto:i.nfo.f.e.d.rbn.y.us7.77@gmail.com"">i.nfo.f.e.d.rbn.y.us7.77@gmail.com</a>
<a href=""mailto:in.f.o.fedr.bn.y.u.s.777@gmail.com"">in.f.o.fedr.bn.y.u.s.777@gmail.com</a>
<a href=""mailto:infofed.r.bny.u.s7.77@gmail.com"">infofed.r.bny.u.s7.77@gmail.com</a>
<a href=""mailto:in.f.o.fe.d.rb.ny.us7.7.7@gmail.com"">in.f.o.fe.d.rb.ny.us7.7.7@gmail.com</a>
<a href=""mailto:i.nfof.ed.rb.ny.u.s.77.7@gmail.com"">i.nfof.ed.rb.ny.u.s.77.7@gmail.com</a>
<a href=""mailto:i.nfo.f.edr.bny.u.s.7.7.7@gmail.com"">i.nfo.f.edr.bny.u.s.7.7.7@gmail.com</a>
<a href=""mailto:i.nfofed.rbnyu.s77.7@gmail.com"">i.nfofed.rbnyu.s77.7@gmail.com</a>
<a href=""mailto:info.fedrb.nyu.s.7.77@gmail.com"">info.fedrb.nyu.s.7.77@gmail.com</a>
<a href=""mailto:i.n.f.ofe.d.r.b.n.yus.777@gmail.com"">i.n.f.ofe.d.r.b.n.yus.777@gmail.com</a>
<a href=""mailto:infofedrb.nyu.s.7.77@gmail.com"">infofedrb.nyu.s.7.77@gmail.com</a>
<a href=""mailto:infofe.d.r.bnyus.77.7@gmail.com"">infofe.d.r.bnyus.77.7@gmail.com</a>
<a href=""mailto:i.nf.of.e.dr.b.n.yus7.7.7@gmail.com"">i.nf.of.e.dr.b.n.yus7.7.7@gmail.com</a>
<a href=""mailto:in.f.ofedr.bnyus.7.77@gmail.com"">in.f.ofedr.bnyus.7.77@gmail.com</a>
<a href=""mailto:in.fo.fed.rbnyu.s.777@gmail.com"">in.fo.fed.rbnyu.s.777@gmail.com</a>
<a href=""mailto:i.n.f.o.f.edrb.ny.us7.77@gmail.com"">i.n.f.o.f.edrb.ny.us7.77@gmail.com</a>
<a href=""mailto:info.f.edrb.n.y.u.s.77.7@gmail.com"">info.f.edrb.n.y.u.s.77.7@gmail.com</a>
<a href=""mailto:i.nf.of.ed.r.b.n.y.u.s7.7.7@gmail.com"">i.nf.of.ed.r.b.n.y.u.s7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.f.edr.b.ny.u.s777@gmail.com"">i.n.f.o.f.edr.b.ny.u.s777@gmail.com</a>
<a href=""mailto:i.n.f.o.f.e.d.r.b.ny.us7.7.7@gmail.com"">i.n.f.o.f.e.d.r.b.ny.us7.7.7@gmail.com</a>
<a href=""mailto:in.fofe.d.rb.n.yu.s.777@gmail.com"">in.fofe.d.rb.n.yu.s.777@gmail.com</a>
<a href=""mailto:i.n.f.ofedr.b.ny.us.7.7.7@gmail.com"">i.n.f.ofedr.b.ny.us.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.fedrbny.us.7.77@gmail.com"">i.n.f.o.fedrbny.us.7.77@gmail.com</a>
<a href=""mailto:i.nfof.e.dr.bn.y.us.7.77@gmail.com"">i.nfof.e.dr.bn.y.us.7.77@gmail.com</a>
<a href=""mailto:i.n.fofedr.b.nyus777@gmail.com"">i.n.fofedr.b.nyus777@gmail.com</a>
<a href=""mailto:i.n.f.o.f.edrb.nyu.s7.7.7@gmail.com"">i.n.f.o.f.edrb.nyu.s7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.of.e.drb.nyus777@gmail.com"">i.n.f.of.e.drb.nyus777@gmail.com</a>
<a href=""mailto:infof.e.dr.bnyu.s7.77@gmail.com"">infof.e.dr.bnyu.s7.77@gmail.com</a>
<a href=""mailto:inf.o.fedrbnyu.s.7.7.7@gmail.com"">inf.o.fedrbnyu.s.7.7.7@gmail.com</a>
<a href=""mailto:i.n.fofed.r.b.nyu.s.777@gmail.com"">i.n.fofed.r.b.nyu.s.777@gmail.com</a>
<a href=""mailto:i.nfo.f.ed.r.b.n.y.us.77.7@gmail.com"">i.nfo.f.ed.r.b.n.y.us.77.7@gmail.com</a>
<a href=""mailto:i.n.f.of.e.drb.n.y.us77.7@gmail.com"">i.n.f.of.e.drb.n.y.us77.7@gmail.com</a>
<a href=""mailto:i.nf.of.ed.r.bny.u.s77.7@gmail.com"">i.nf.of.ed.r.bny.u.s77.7@gmail.com</a>
<a href=""mailto:in.f.of.ed.rb.ny.u.s.7.77@gmail.com"">in.f.of.ed.rb.ny.u.s.7.77@gmail.com</a>
<a href=""mailto:i.nfofedr.b.nyus777@gmail.com"">i.nfofedr.b.nyus777@gmail.com</a>
<a href=""mailto:inf.of.e.d.rbn.y.u.s.7.77@gmail.com"">inf.of.e.d.rbn.y.u.s.7.77@gmail.com</a>
<a href=""mailto:info.f.edrb.n.yus.77.7@gmail.com"">info.f.edrb.n.yus.77.7@gmail.com</a>
<a href=""mailto:in.f.ofe.drb.nyu.s7.7.7@gmail.com"">in.f.ofe.drb.nyu.s7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.fed.rbn.y.u.s.777@gmail.com"">i.n.f.o.fed.rbn.y.u.s.777@gmail.com</a>
<a href=""mailto:in.f.o.f.ed.rbn.y.us7.7.7@gmail.com"">in.f.o.f.ed.rbn.y.us7.7.7@gmail.com</a>
<a href=""mailto:infofe.d.rb.n.y.us.7.77@gmail.com"">infofe.d.rb.n.y.us.7.77@gmail.com</a>
<a href=""mailto:i.nfo.f.e.drbn.y.us7.7.7@gmail.com"">i.nfo.f.e.drbn.y.us7.7.7@gmail.com</a>
<a href=""mailto:infof.e.d.rbny.us7.7.7@gmail.com"">infof.e.d.rbny.us7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.of.e.d.r.bn.y.us.7.7.7@gmail.com"">i.n.f.of.e.d.r.bn.y.us.7.7.7@gmail.com</a>
<a href=""mailto:i.nfof.ed.rbn.y.u.s7.77@gmail.com"">i.nfof.ed.rbn.y.u.s7.77@gmail.com</a>
<a href=""mailto:i.n.fof.ed.rbny.us.7.77@gmail.com"">i.n.fof.ed.rbny.us.7.77@gmail.com</a>
<a href=""mailto:i.n.f.o.f.e.dr.bnyus7.77@gmail.com"">i.n.f.o.f.e.dr.bnyus7.77@gmail.com</a>
<a href=""mailto:i.nfof.e.dr.b.nyus7.77@gmail.com"">i.nfof.e.dr.b.nyus7.77@gmail.com</a>
<a href=""mailto:inf.o.f.e.d.r.b.nyus77.7@gmail.com"">inf.o.f.e.d.r.b.nyus77.7@gmail.com</a>
<a href=""mailto:i.nfofe.d.r.bnyu.s7.77@gmail.com"">i.nfofe.d.r.bnyu.s7.77@gmail.com</a>
<a href=""mailto:inf.ofe.drbny.us.7.7.7@gmail.com"">inf.ofe.drbny.us.7.7.7@gmail.com</a>
<a href=""mailto:in.f.ofe.drbn.y.u.s.7.77@gmail.com"">in.f.ofe.drbn.y.u.s.7.77@gmail.com</a>
<a href=""mailto:i.nf.o.fed.rb.ny.us7.77@gmail.com"">i.nf.o.fed.rb.ny.us7.77@gmail.com</a>
<a href=""mailto:infofe.drbny.u.s.77.7@gmail.com"">infofe.drbny.u.s.77.7@gmail.com</a>
<a href=""mailto:inf.o.fed.r.b.n.yus777@gmail.com"">inf.o.fed.r.b.n.yus777@gmail.com</a>
<a href=""mailto:i.n.fo.f.ed.r.b.nyu.s7.7.7@gmail.com"">i.n.fo.f.ed.r.b.nyu.s7.7.7@gmail.com</a>
<a href=""mailto:inf.of.e.d.r.bn.yu.s7.7.7@gmail.com"">inf.of.e.d.r.bn.yu.s7.7.7@gmail.com</a>
<a href=""mailto:i.n.fo.f.ed.r.bn.y.us77.7@gmail.com"">i.n.fo.f.ed.r.bn.y.us77.7@gmail.com</a>
<a href=""mailto:infofe.d.r.b.nyus.77.7@gmail.com"">infofe.d.r.b.nyus.77.7@gmail.com</a>
<a href=""mailto:i.nf.o.f.ed.rbn.y.us77.7@gmail.com"">i.nf.o.f.ed.rbn.y.us77.7@gmail.com</a>
<a href=""mailto:in.fo.f.e.dr.bn.yus.7.77@gmail.com"">in.fo.f.e.dr.bn.yus.7.77@gmail.com</a>
<a href=""mailto:i.nf.of.ed.rb.nyus.777@gmail.com"">i.nf.of.ed.rb.nyus.777@gmail.com</a>
<a href=""mailto:i.n.f.ofe.drb.n.yus.7.77@gmail.com"">i.n.f.ofe.drb.n.yus.7.77@gmail.com</a>
<a href=""mailto:infofe.d.r.bnyu.s7.77@gmail.com"">infofe.d.r.bnyu.s7.77@gmail.com</a>
<a href=""mailto:i.nf.o.f.edr.b.ny.u.s777@gmail.com"">i.nf.o.f.edr.b.ny.u.s777@gmail.com</a>
<a href=""mailto:in.fo.f.ed.rbn.y.us77.7@gmail.com"">in.fo.f.ed.rbn.y.us77.7@gmail.com</a>
<a href=""mailto:i.n.fof.edr.b.n.yus.7.77@gmail.com"">i.n.fof.edr.b.n.yus.7.77@gmail.com</a>
<a href=""mailto:infofe.drb.nyus77.7@gmail.com"">infofe.drb.nyus77.7@gmail.com</a>
<a href=""mailto:in.fofedr.b.ny.us.777@gmail.com"">in.fofedr.b.ny.us.777@gmail.com</a>
<a href=""mailto:in.f.o.fed.rb.ny.u.s.7.77@gmail.com"">in.f.o.fed.rb.ny.u.s.7.77@gmail.com</a>
<a href=""mailto:in.fo.fe.d.rb.n.y.u.s77.7@gmail.com"">in.fo.fe.d.rb.n.y.u.s77.7@gmail.com</a>
<a href=""mailto:i.nf.ofedr.bn.y.us.77.7@gmail.com"">i.nf.ofedr.bn.y.us.77.7@gmail.com</a>
<a href=""mailto:i.n.fo.fed.r.bn.yus77.7@gmail.com"">i.n.fo.fed.r.bn.yus77.7@gmail.com</a>
<a href=""mailto:i.n.fo.fedrbn.y.us77.7@gmail.com"">i.n.fo.fedrbn.y.us77.7@gmail.com</a>
<a href=""mailto:i.nfof.ed.rb.nyu.s.7.7.7@gmail.com"">i.nfof.ed.rb.nyu.s.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.f.e.drbny.us.7.7.7@gmail.com"">i.n.f.o.f.e.drbny.us.7.7.7@gmail.com</a>
<a href=""mailto:info.f.e.d.r.b.n.yus7.7.7@gmail.com"">info.f.e.d.r.b.n.yus7.7.7@gmail.com</a>
<a href=""mailto:info.fe.drb.ny.us.7.7.7@gmail.com"">info.fe.drb.ny.us.7.7.7@gmail.com</a>
<a href=""mailto:info.f.ed.r.b.nyus77.7@gmail.com"">info.f.ed.r.b.nyus77.7@gmail.com</a>
<a href=""mailto:in.fofedrb.n.y.u.s7.7.7@gmail.com"">in.fofedrb.n.y.u.s7.7.7@gmail.com</a>
<a href=""mailto:i.nf.o.fe.dr.bn.yu.s.777@gmail.com"">i.nf.o.fe.dr.bn.yu.s.777@gmail.com</a>
<a href=""mailto:i.nfo.fe.drbnyus777@gmail.com"">i.nfo.fe.drbnyus777@gmail.com</a>
<a href=""mailto:infof.edrbny.us.7.7.7@gmail.com"">infof.edrbny.us.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.f.e.drbnyus.7.7.7@gmail.com"">i.n.f.o.f.e.drbnyus.7.7.7@gmail.com</a>
<a href=""mailto:i.nfo.f.e.dr.bny.u.s.7.77@gmail.com"">i.nfo.f.e.dr.bny.u.s.7.77@gmail.com</a>
<a href=""mailto:i.nfo.fedr.bn.yu.s.7.7.7@gmail.com"">i.nfo.fedr.bn.yu.s.7.7.7@gmail.com</a>
<a href=""mailto:in.fo.f.ed.rb.n.yus.7.77@gmail.com"">in.fo.f.ed.rb.n.yus.7.77@gmail.com</a>
<a href=""mailto:in.f.of.edr.bnyus7.7.7@gmail.com"">in.f.of.edr.bnyus7.7.7@gmail.com</a>
<a href=""mailto:in.fof.e.d.rbn.y.us7.7.7@gmail.com"">in.fof.e.d.rbn.y.us7.7.7@gmail.com</a>
<a href=""mailto:i.nf.ofedr.bn.y.us7.77@gmail.com"">i.nf.ofedr.bn.y.us7.77@gmail.com</a>
<a href=""mailto:in.fofe.dr.bny.u.s.7.7.7@gmail.com"">in.fofe.dr.bny.u.s.7.7.7@gmail.com</a>
<a href=""mailto:infofe.dr.bnyus.77.7@gmail.com"">infofe.dr.bnyus.77.7@gmail.com</a>
<a href=""mailto:i.nf.of.ed.r.b.nyu.s.7.7.7@gmail.com"">i.nf.of.ed.r.b.nyu.s.7.7.7@gmail.com</a>
<a href=""mailto:i.n.fo.f.e.d.rb.ny.us7.77@gmail.com"">i.n.fo.f.e.d.rb.ny.us7.77@gmail.com</a>
<a href=""mailto:infofed.rbny.u.s7.77@gmail.com"">infofed.rbny.u.s7.77@gmail.com</a>
<a href=""mailto:in.fo.f.ed.rb.ny.u.s7.77@gmail.com"">in.fo.f.ed.rb.ny.u.s7.77@gmail.com</a>
<a href=""mailto:info.f.e.drb.ny.u.s777@gmail.com"">info.f.e.drb.ny.u.s777@gmail.com</a>
<a href=""mailto:in.f.of.ed.rbn.y.u.s.7.7.7@gmail.com"">in.f.of.ed.rbn.y.u.s.7.7.7@gmail.com</a>
<a href=""mailto:i.nfo.fedr.b.n.yus.7.77@gmail.com"">i.nfo.fedr.b.n.yus.7.77@gmail.com</a>
<a href=""mailto:i.n.f.o.fed.r.b.nyus77.7@gmail.com"">i.n.f.o.fed.r.b.nyus77.7@gmail.com</a>
<a href=""mailto:info.f.e.dr.b.n.yus.77.7@gmail.com"">info.f.e.dr.b.n.yus.77.7@gmail.com</a>
<a href=""mailto:info.fe.d.r.b.ny.u.s.7.77@gmail.com"">info.fe.d.r.b.ny.u.s.7.77@gmail.com</a>
<a href=""mailto:in.f.ofed.rbn.yus777@gmail.com"">in.f.ofed.rbn.yus777@gmail.com</a>
<a href=""mailto:i.nf.o.fed.rbn.y.us77.7@gmail.com"">i.nf.o.fed.rbn.y.us77.7@gmail.com</a>
<a href=""mailto:infof.edrbn.yu.s.7.77@gmail.com"">infof.edrbn.yu.s.7.77@gmail.com</a>
<a href=""mailto:i.nfo.f.e.drbny.u.s777@gmail.com"">i.nfo.f.e.drbny.u.s777@gmail.com</a>
<a href=""mailto:i.n.f.o.f.e.drbn.y.us.7.77@gmail.com"">i.n.f.o.f.e.drbn.y.us.7.77@gmail.com</a>
<a href=""mailto:i.nf.of.e.dr.b.nyu.s.7.77@gmail.com"">i.nf.of.e.dr.b.nyu.s.7.77@gmail.com</a>
<a href=""mailto:info.fed.rb.n.yus77.7@gmail.com"">info.fed.rb.n.yus77.7@gmail.com</a>
<a href=""mailto:i.nfof.e.drb.ny.us.77.7@gmail.com"">i.nfof.e.drb.ny.us.77.7@gmail.com</a>
<a href=""mailto:in.fo.fe.d.r.b.nyus.77.7@gmail.com"">in.fo.fe.d.r.b.nyus.77.7@gmail.com</a>
<a href=""mailto:inf.o.f.ed.rb.nyu.s.77.7@gmail.com"">inf.o.f.ed.rb.nyu.s.77.7@gmail.com</a>
<a href=""mailto:i.n.f.ofe.d.r.bn.yus777@gmail.com"">i.n.f.ofe.d.r.bn.yus777@gmail.com</a>
<a href=""mailto:inf.of.edr.b.n.y.u.s777@gmail.com"">inf.of.edr.b.n.y.u.s777@gmail.com</a>
<a href=""mailto:in.fof.e.dr.b.nyus.777@gmail.com"">in.fof.e.dr.b.nyus.777@gmail.com</a>
<a href=""mailto:in.f.o.fedrbny.u.s77.7@gmail.com"">in.f.o.fedrbny.u.s77.7@gmail.com</a>
<a href=""mailto:i.nfo.f.e.dr.bn.yu.s.7.7.7@gmail.com"">i.nfo.f.e.dr.bn.yu.s.7.7.7@gmail.com</a>
<a href=""mailto:i.n.fo.fe.d.rbny.u.s.7.77@gmail.com"">i.n.fo.fe.d.rbny.u.s.7.77@gmail.com</a>
<a href=""mailto:infofedrbnyu.s77.7@gmail.com"">infofedrbnyu.s77.7@gmail.com</a>
<a href=""mailto:i.nf.o.fedr.b.n.yu.s.7.77@gmail.com"">i.nf.o.fedr.b.n.yu.s.7.77@gmail.com</a>
<a href=""mailto:in.f.o.f.edrbnyus777@gmail.com"">in.f.o.f.edrbnyus777@gmail.com</a>
<a href=""mailto:info.fe.d.rb.n.y.u.s7.7.7@gmail.com"">info.fe.d.rb.n.y.u.s7.7.7@gmail.com</a>
<a href=""mailto:i.n.fo.fe.d.r.bny.us.7.77@gmail.com"">i.n.fo.fe.d.r.bny.us.7.77@gmail.com</a>
<a href=""mailto:i.nf.o.fe.dr.b.n.yus.7.7.7@gmail.com"">i.nf.o.fe.dr.b.n.yus.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.o.f.edr.b.ny.u.s.7.7.7@gmail.com"">i.n.f.o.f.edr.b.ny.u.s.7.7.7@gmail.com</a>
<a href=""mailto:in.fo.f.ed.rb.nyu.s7.7.7@gmail.com"">in.fo.f.ed.rb.nyu.s7.7.7@gmail.com</a>
<a href=""mailto:in.fo.f.e.drbnyu.s777@gmail.com"">in.fo.f.e.drbnyu.s777@gmail.com</a>
<a href=""mailto:i.n.fof.ed.rbny.u.s.7.77@gmail.com"">i.n.fof.ed.rbny.u.s.7.77@gmail.com</a>
<a href=""mailto:in.fo.fed.r.bny.us777@gmail.com"">in.fo.fed.r.bny.us777@gmail.com</a>
<a href=""mailto:i.n.f.o.f.ed.rb.ny.us.77.7@gmail.com"">i.n.f.o.f.ed.rb.ny.us.77.7@gmail.com</a>
<a href=""mailto:i.n.fof.edr.bn.y.u.s.7.7.7@gmail.com"">i.n.fof.edr.bn.y.u.s.7.7.7@gmail.com</a>
<a href=""mailto:in.f.of.e.d.r.b.n.y.us.777@gmail.com"">in.f.of.e.d.r.b.n.y.us.777@gmail.com</a>
<a href=""mailto:info.fe.dr.b.n.yu.s.7.7.7@gmail.com"">info.fe.dr.b.n.yu.s.7.7.7@gmail.com</a>
<a href=""mailto:i.n.f.ofe.dr.bn.yu.s777@gmail.com"">i.n.f.ofe.dr.bn.yu.s777@gmail.com</a>
<a href=""mailto:in.f.o.fe.d.rb.n.y.u.s.7.77@gmail.com"">in.f.o.fe.d.rb.n.y.u.s.7.77@gmail.com</a>
<a href=""mailto:i.nfo.fedr.bnyu.s7.7.7@gmail.com"">i.nfo.fedr.bnyu.s7.7.7@gmail.com</a>
<a href=""mailto:shippingcenter1@outlook.com"">shippingcenter1@outlook.com</a>
<a href=""mailto:kfyoffice383@gmail.com"">kfyoffice383@gmail.com</a>
<a href=""mailto:kfyo.f.fi.c.e.38.3@gmail.com"">kfyo.f.fi.c.e.38.3@gmail.com</a>
<a href=""mailto:kfyo.f.fic.e.383@gmail.com"">kfyo.f.fic.e.383@gmail.com</a>
<a href=""mailto:k.fy.o.ff.ic.e.383@gmail.com"">k.fy.o.ff.ic.e.383@gmail.com</a>
<a href=""mailto:kfy.o.ff.ice3.8.3@gmail.com"">kfy.o.ff.ice3.8.3@gmail.com</a>
<a href=""mailto:k.f.yof.fice.3.8.3@gmail.com"">k.f.yof.fice.3.8.3@gmail.com</a>
<a href=""mailto:kf.y.o.ffi.ce.383@gmail.com"">kf.y.o.ffi.ce.383@gmail.com</a>
<a href=""mailto:k.f.y.offic.e3.83@gmail.com"">k.f.y.offic.e3.83@gmail.com</a>
<a href=""mailto:kf.y.offi.c.e3.8.3@gmail.com"">kf.y.offi.c.e3.8.3@gmail.com</a>
<a href=""mailto:kf.yoffice383@gmail.com"">kf.yoffice383@gmail.com</a>
<a href=""mailto:k.fyof.f.i.c.e383@gmail.com"">k.fyof.f.i.c.e383@gmail.com</a>
<a href=""mailto:k.f.yof.fi.c.e.3.83@gmail.com"">k.f.yof.fi.c.e.3.83@gmail.com</a>
<a href=""mailto:kfy.o.ff.i.ce38.3@gmail.com"">kfy.o.ff.i.ce38.3@gmail.com</a>
<a href=""mailto:kfy.o.ffi.ce.383@gmail.com"">kfy.o.ffi.ce.383@gmail.com</a>
<a href=""mailto:kfy.offic.e.383@gmail.com"">kfy.offic.e.383@gmail.com</a>
<a href=""mailto:k.fyof.f.i.c.e3.83@gmail.com"">k.fyof.f.i.c.e3.83@gmail.com</a>
<a href=""mailto:k.fyo.f.f.ic.e3.8.3@gmail.com"">k.fyo.f.f.ic.e3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.o.f.fi.ce3.8.3@gmail.com"">k.f.y.o.f.fi.ce3.8.3@gmail.com</a>
<a href=""mailto:k.fyof.f.i.c.e.383@gmail.com"">k.fyof.f.i.c.e.383@gmail.com</a>
<a href=""mailto:kf.yo.f.f.i.c.e38.3@gmail.com"">kf.yo.f.f.i.c.e38.3@gmail.com</a>
<a href=""mailto:k.fyof.fi.ce.3.8.3@gmail.com"">k.fyof.fi.ce.3.8.3@gmail.com</a>
<a href=""mailto:k.f.yo.ffice383@gmail.com"">k.f.yo.ffice383@gmail.com</a>
<a href=""mailto:k.fyo.f.f.i.c.e3.83@gmail.com"">k.fyo.f.f.i.c.e3.83@gmail.com</a>
<a href=""mailto:kf.yo.f.f.ic.e3.83@gmail.com"">kf.yo.f.f.ic.e3.83@gmail.com</a>
<a href=""mailto:kfyo.ff.i.ce.3.8.3@gmail.com"">kfyo.ff.i.ce.3.8.3@gmail.com</a>
<a href=""mailto:k.fy.o.f.fic.e38.3@gmail.com"">k.fy.o.f.fic.e38.3@gmail.com</a>
<a href=""mailto:k.fy.o.ff.ic.e383@gmail.com"">k.fy.o.ff.ic.e383@gmail.com</a>
<a href=""mailto:k.fyof.fice3.8.3@gmail.com"">k.fyof.fice3.8.3@gmail.com</a>
<a href=""mailto:k.fyof.f.i.c.e3.8.3@gmail.com"">k.fyof.f.i.c.e3.8.3@gmail.com</a>
<a href=""mailto:k.fyoffi.c.e383@gmail.com"">k.fyoffi.c.e383@gmail.com</a>
<a href=""mailto:k.fy.o.ffi.ce383@gmail.com"">k.fy.o.ffi.ce383@gmail.com</a>
<a href=""mailto:k.f.yof.fic.e383@gmail.com"">k.f.yof.fic.e383@gmail.com</a>
<a href=""mailto:k.f.y.o.f.fice3.8.3@gmail.com"">k.f.y.o.f.fice3.8.3@gmail.com</a>
<a href=""mailto:kfyo.ffi.c.e3.83@gmail.com"">kfyo.ffi.c.e3.83@gmail.com</a>
<a href=""mailto:k.fyo.ff.ic.e3.83@gmail.com"">k.fyo.ff.ic.e3.83@gmail.com</a>
<a href=""mailto:kfy.o.f.fic.e3.8.3@gmail.com"">kfy.o.f.fic.e3.8.3@gmail.com</a>
<a href=""mailto:kf.y.o.f.f.i.c.e.3.83@gmail.com"">kf.y.o.f.f.i.c.e.3.83@gmail.com</a>
<a href=""mailto:k.f.yoff.i.c.e.383@gmail.com"">k.f.yoff.i.c.e.383@gmail.com</a>
<a href=""mailto:k.f.yo.ff.ice.3.8.3@gmail.com"">k.f.yo.ff.ice.3.8.3@gmail.com</a>
<a href=""mailto:kfyoffice.3.8.3@gmail.com"">kfyoffice.3.8.3@gmail.com</a>
<a href=""mailto:kfy.o.ffice.3.8.3@gmail.com"">kfy.o.ffice.3.8.3@gmail.com</a>
<a href=""mailto:k.fyoffi.c.e.383@gmail.com"">k.fyoffi.c.e.383@gmail.com</a>
<a href=""mailto:k.f.yo.ff.ice.383@gmail.com"">k.f.yo.ff.ice.383@gmail.com</a>
<a href=""mailto:k.f.y.o.f.f.i.c.e383@gmail.com"">k.f.y.o.f.f.i.c.e383@gmail.com</a>
<a href=""mailto:kf.yoffi.ce.3.83@gmail.com"">kf.yoffi.ce.3.83@gmail.com</a>
<a href=""mailto:k.f.yo.f.f.i.c.e.3.83@gmail.com"">k.f.yo.f.f.i.c.e.3.83@gmail.com</a>
<a href=""mailto:kf.y.o.f.f.ic.e.38.3@gmail.com"">kf.y.o.f.f.ic.e.38.3@gmail.com</a>
<a href=""mailto:k.fy.off.ice3.8.3@gmail.com"">k.fy.off.ice3.8.3@gmail.com</a>
<a href=""mailto:kf.yoff.i.c.e.383@gmail.com"">kf.yoff.i.c.e.383@gmail.com</a>
<a href=""mailto:k.f.y.o.ff.ice3.83@gmail.com"">k.f.y.o.ff.ice3.83@gmail.com</a>
<a href=""mailto:kf.yo.ffi.c.e38.3@gmail.com"">kf.yo.ffi.c.e38.3@gmail.com</a>
<a href=""mailto:k.f.yoff.ic.e383@gmail.com"">k.f.yoff.ic.e383@gmail.com</a>
<a href=""mailto:k.f.y.o.ff.i.ce.3.83@gmail.com"">k.f.y.o.ff.i.ce.3.83@gmail.com</a>
<a href=""mailto:k.fy.of.f.ice.38.3@gmail.com"">k.fy.of.f.ice.38.3@gmail.com</a>
<a href=""mailto:k.f.y.off.ic.e.3.8.3@gmail.com"">k.f.y.off.ic.e.3.8.3@gmail.com</a>
<a href=""mailto:kf.y.o.ffice.3.8.3@gmail.com"">kf.y.o.ffice.3.8.3@gmail.com</a>
<a href=""mailto:kfyoff.ice38.3@gmail.com"">kfyoff.ice38.3@gmail.com</a>
<a href=""mailto:k.fyo.f.f.ic.e383@gmail.com"">k.fyo.f.f.ic.e383@gmail.com</a>
<a href=""mailto:kf.yo.ffic.e3.83@gmail.com"">kf.yo.ffic.e3.83@gmail.com</a>
<a href=""mailto:kfyo.f.f.ic.e.38.3@gmail.com"">kfyo.f.f.ic.e.38.3@gmail.com</a>
<a href=""mailto:kfy.of.f.ic.e.38.3@gmail.com"">kfy.of.f.ic.e.38.3@gmail.com</a>
<a href=""mailto:kf.yo.ff.ice.3.8.3@gmail.com"">kf.yo.ff.ice.3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.o.f.fice.3.8.3@gmail.com"">k.f.y.o.f.fice.3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.offic.e.383@gmail.com"">k.f.y.offic.e.383@gmail.com</a>
<a href=""mailto:k.fyo.ff.i.c.e3.8.3@gmail.com"">k.fyo.ff.i.c.e3.8.3@gmail.com</a>
<a href=""mailto:k.f.yo.f.f.i.c.e383@gmail.com"">k.f.yo.f.f.i.c.e383@gmail.com</a>
<a href=""mailto:k.fyo.ff.i.c.e.3.8.3@gmail.com"">k.fyo.ff.i.c.e.3.8.3@gmail.com</a>
<a href=""mailto:k.f.yo.ff.ice3.83@gmail.com"">k.f.yo.ff.ice3.83@gmail.com</a>
<a href=""mailto:k.f.yoffi.ce3.83@gmail.com"">k.f.yoffi.ce3.83@gmail.com</a>
<a href=""mailto:kfyo.f.fice3.8.3@gmail.com"">kfyo.f.fice3.8.3@gmail.com</a>
<a href=""mailto:kfy.o.ff.ice.383@gmail.com"">kfy.o.ff.ice.383@gmail.com</a>
<a href=""mailto:k.fyo.f.fic.e383@gmail.com"">k.fyo.f.fic.e383@gmail.com</a>
<a href=""mailto:kfy.o.ffic.e3.83@gmail.com"">kfy.o.ffic.e3.83@gmail.com</a>
<a href=""mailto:kfy.o.f.fice.3.8.3@gmail.com"">kfy.o.f.fice.3.8.3@gmail.com</a>
<a href=""mailto:kfy.of.f.ice.3.83@gmail.com"">kfy.of.f.ice.3.83@gmail.com</a>
<a href=""mailto:k.fyof.f.i.c.e38.3@gmail.com"">k.fyof.f.i.c.e38.3@gmail.com</a>
<a href=""mailto:k.fy.offi.ce.383@gmail.com"">k.fy.offi.ce.383@gmail.com</a>
<a href=""mailto:kf.yof.fi.c.e.38.3@gmail.com"">kf.yof.fi.c.e.38.3@gmail.com</a>
<a href=""mailto:k.fy.offi.ce3.8.3@gmail.com"">k.fy.offi.ce3.8.3@gmail.com</a>
<a href=""mailto:kfyo.ff.i.c.e3.83@gmail.com"">kfyo.ff.i.c.e3.83@gmail.com</a>
<a href=""mailto:k.f.yoffi.c.e3.83@gmail.com"">k.f.yoffi.c.e3.83@gmail.com</a>
<a href=""mailto:kf.y.o.f.fic.e.383@gmail.com"">kf.y.o.f.fic.e.383@gmail.com</a>
<a href=""mailto:k.fyo.f.f.ic.e.3.8.3@gmail.com"">k.fyo.f.f.ic.e.3.8.3@gmail.com</a>
<a href=""mailto:k.fyoffi.c.e.3.83@gmail.com"">k.fyoffi.c.e.3.83@gmail.com</a>
<a href=""mailto:k.fyo.f.fi.ce.3.8.3@gmail.com"">k.fyo.f.fi.ce.3.8.3@gmail.com</a>
<a href=""mailto:k.fy.o.ffi.c.e3.8.3@gmail.com"">k.fy.o.ffi.c.e3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.of.fice3.83@gmail.com"">k.f.y.of.fice3.83@gmail.com</a>
<a href=""mailto:kfy.o.ff.i.ce.38.3@gmail.com"">kfy.o.ff.i.ce.38.3@gmail.com</a>
<a href=""mailto:kf.yo.ff.ic.e.3.83@gmail.com"">kf.yo.ff.ic.e.3.83@gmail.com</a>
<a href=""mailto:k.fyoffi.ce3.8.3@gmail.com"">k.fyoffi.ce3.8.3@gmail.com</a>
<a href=""mailto:kfyo.f.fice.3.8.3@gmail.com"">kfyo.f.fice.3.8.3@gmail.com</a>
<a href=""mailto:kfyof.fi.c.e.383@gmail.com"">kfyof.fi.c.e.383@gmail.com</a>
<a href=""mailto:k.f.y.of.f.ic.e.3.83@gmail.com"">k.f.y.of.f.ic.e.3.83@gmail.com</a>
<a href=""mailto:k.fy.o.ff.i.c.e.38.3@gmail.com"">k.fy.o.ff.i.c.e.38.3@gmail.com</a>
<a href=""mailto:k.f.yo.ff.ic.e3.83@gmail.com"">k.f.yo.ff.ic.e3.83@gmail.com</a>
<a href=""mailto:k.f.y.off.i.ce3.8.3@gmail.com"">k.f.y.off.i.ce3.8.3@gmail.com</a>
<a href=""mailto:k.fy.offic.e.3.83@gmail.com"">k.fy.offic.e.3.83@gmail.com</a>
<a href=""mailto:k.fy.o.f.fi.c.e3.83@gmail.com"">k.fy.o.f.fi.c.e3.83@gmail.com</a>
<a href=""mailto:kf.yo.ffice.38.3@gmail.com"">kf.yo.ffice.38.3@gmail.com</a>
<a href=""mailto:kfy.o.f.fi.c.e383@gmail.com"">kfy.o.f.fi.c.e383@gmail.com</a>
<a href=""mailto:kf.y.o.f.f.i.c.e3.83@gmail.com"">kf.y.o.f.f.i.c.e3.83@gmail.com</a>
<a href=""mailto:kf.y.office3.8.3@gmail.com"">kf.y.office3.8.3@gmail.com</a>
<a href=""mailto:k.fy.off.i.ce.38.3@gmail.com"">k.fy.off.i.ce.38.3@gmail.com</a>
<a href=""mailto:k.fy.o.ff.ice.3.83@gmail.com"">k.fy.o.ff.ice.3.83@gmail.com</a>
<a href=""mailto:k.f.yo.f.fi.ce3.83@gmail.com"">k.f.yo.f.fi.ce3.83@gmail.com</a>
<a href=""mailto:k.f.y.offi.c.e3.8.3@gmail.com"">k.f.y.offi.c.e3.8.3@gmail.com</a>
<a href=""mailto:kf.y.off.i.ce.3.83@gmail.com"">kf.y.off.i.ce.3.83@gmail.com</a>
<a href=""mailto:kf.y.offic.e383@gmail.com"">kf.y.offic.e383@gmail.com</a>
<a href=""mailto:k.f.y.office.38.3@gmail.com"">k.f.y.office.38.3@gmail.com</a>
<a href=""mailto:k.fy.o.ffic.e.383@gmail.com"">k.fy.o.ffic.e.383@gmail.com</a>
<a href=""mailto:kf.y.o.ff.ice.3.8.3@gmail.com"">kf.y.o.ff.ice.3.8.3@gmail.com</a>
<a href=""mailto:kf.y.o.ffice3.83@gmail.com"">kf.y.o.ffice3.83@gmail.com</a>
<a href=""mailto:k.f.y.o.f.fic.e.3.8.3@gmail.com"">k.f.y.o.f.fic.e.3.8.3@gmail.com</a>
<a href=""mailto:k.f.yo.f.f.i.c.e38.3@gmail.com"">k.f.yo.f.f.i.c.e38.3@gmail.com</a>
<a href=""mailto:k.f.y.o.f.f.i.c.e.3.8.3@gmail.com"">k.f.y.o.f.f.i.c.e.3.8.3@gmail.com</a>
<a href=""mailto:kfy.o.f.f.i.ce3.8.3@gmail.com"">kfy.o.f.f.i.ce3.8.3@gmail.com</a>
<a href=""mailto:k.fy.of.fice.38.3@gmail.com"">k.fy.of.fice.38.3@gmail.com</a>
<a href=""mailto:k.fyoffi.ce.3.83@gmail.com"">k.fyoffi.ce.3.83@gmail.com</a>
<a href=""mailto:k.fyoffi.ce.38.3@gmail.com"">k.fyoffi.ce.38.3@gmail.com</a>
<a href=""mailto:kf.yo.ffice38.3@gmail.com"">kf.yo.ffice38.3@gmail.com</a>
<a href=""mailto:kf.y.o.ff.ice.383@gmail.com"">kf.y.o.ff.ice.383@gmail.com</a>
<a href=""mailto:kf.y.of.fi.ce.3.8.3@gmail.com"">kf.y.of.fi.ce.3.8.3@gmail.com</a>
<a href=""mailto:kfyo.f.f.ice.38.3@gmail.com"">kfyo.f.f.ice.38.3@gmail.com</a>
<a href=""mailto:k.fy.o.ffi.c.e3.83@gmail.com"">k.fy.o.ffi.c.e3.83@gmail.com</a>
<a href=""mailto:kf.yof.f.ice38.3@gmail.com"">kf.yof.f.ice38.3@gmail.com</a>
<a href=""mailto:k.fyof.f.ice.383@gmail.com"">k.fyof.f.ice.383@gmail.com</a>
<a href=""mailto:kfy.o.ff.i.c.e.383@gmail.com"">kfy.o.ff.i.c.e.383@gmail.com</a>
<a href=""mailto:k.f.y.off.i.c.e3.83@gmail.com"">k.f.y.off.i.c.e3.83@gmail.com</a>
<a href=""mailto:k.fy.o.ffic.e3.83@gmail.com"">k.fy.o.ffic.e3.83@gmail.com</a>
<a href=""mailto:kfy.o.f.f.i.ce.3.8.3@gmail.com"">kfy.o.f.f.i.ce.3.8.3@gmail.com</a>
<a href=""mailto:k.fyoff.ic.e3.83@gmail.com"">k.fyoff.ic.e3.83@gmail.com</a>
<a href=""mailto:k.f.yo.ffic.e.3.83@gmail.com"">k.f.yo.ffic.e.3.83@gmail.com</a>
<a href=""mailto:k.fyof.f.ic.e383@gmail.com"">k.fyof.f.ic.e383@gmail.com</a>
<a href=""mailto:k.fy.of.f.ic.e3.8.3@gmail.com"">k.fy.of.f.ic.e3.8.3@gmail.com</a>
<a href=""mailto:kf.y.off.ic.e.38.3@gmail.com"">kf.y.off.ic.e.38.3@gmail.com</a>
<a href=""mailto:kf.yoffice.3.83@gmail.com"">kf.yoffice.3.83@gmail.com</a>
<a href=""mailto:k.fy.o.f.fic.e.3.83@gmail.com"">k.fy.o.f.fic.e.3.83@gmail.com</a>
<a href=""mailto:k.fyoffi.c.e.3.8.3@gmail.com"">k.fyoffi.c.e.3.8.3@gmail.com</a>
<a href=""mailto:kf.yo.ff.ice.3.83@gmail.com"">kf.yo.ff.ice.3.83@gmail.com</a>
<a href=""mailto:kf.y.o.f.fi.ce.3.83@gmail.com"">kf.y.o.f.fi.ce.3.83@gmail.com</a>
<a href=""mailto:k.f.yo.ff.ic.e383@gmail.com"">k.f.yo.ff.ic.e383@gmail.com</a>
<a href=""mailto:k.f.y.o.ff.ice383@gmail.com"">k.f.y.o.ff.ice383@gmail.com</a>
<a href=""mailto:k.fy.o.f.fic.e383@gmail.com"">k.fy.o.f.fic.e383@gmail.com</a>
<a href=""mailto:kf.y.office.3.8.3@gmail.com"">kf.y.office.3.8.3@gmail.com</a>
<a href=""mailto:kfy.o.f.fic.e38.3@gmail.com"">kfy.o.f.fic.e38.3@gmail.com</a>
<a href=""mailto:k.fyo.f.fi.c.e38.3@gmail.com"">k.fyo.f.fi.c.e38.3@gmail.com</a>
<a href=""mailto:kf.y.of.fi.c.e38.3@gmail.com"">kf.y.of.fi.c.e38.3@gmail.com</a>
<a href=""mailto:k.fyo.ffice3.8.3@gmail.com"">k.fyo.ffice3.8.3@gmail.com</a>
<a href=""mailto:k.fyoff.ic.e383@gmail.com"">k.fyoff.ic.e383@gmail.com</a>
<a href=""mailto:k.fyo.f.f.ice3.83@gmail.com"">k.fyo.f.f.ice3.83@gmail.com</a>
<a href=""mailto:k.f.yo.f.fic.e3.83@gmail.com"">k.f.yo.f.fic.e3.83@gmail.com</a>
<a href=""mailto:k.fy.o.ff.i.ce3.8.3@gmail.com"">k.fy.o.ff.i.ce3.8.3@gmail.com</a>
<a href=""mailto:k.fyof.fi.ce.38.3@gmail.com"">k.fyof.fi.ce.38.3@gmail.com</a>
<a href=""mailto:kf.yo.ffi.c.e.38.3@gmail.com"">kf.yo.ffi.c.e.38.3@gmail.com</a>
<a href=""mailto:kf.yof.f.ice3.8.3@gmail.com"">kf.yof.f.ice3.8.3@gmail.com</a>
<a href=""mailto:kfy.of.fic.e38.3@gmail.com"">kfy.of.fic.e38.3@gmail.com</a>
<a href=""mailto:k.f.yo.f.f.ice3.83@gmail.com"">k.f.yo.f.f.ice3.83@gmail.com</a>
<a href=""mailto:k.f.y.o.f.fi.c.e3.8.3@gmail.com"">k.f.y.o.f.fi.c.e3.8.3@gmail.com</a>
<a href=""mailto:k.f.yof.f.ic.e38.3@gmail.com"">k.f.yof.f.ic.e38.3@gmail.com</a>
<a href=""mailto:k.f.yoff.i.c.e.38.3@gmail.com"">k.f.yoff.i.c.e.38.3@gmail.com</a>
<a href=""mailto:kf.y.offic.e.383@gmail.com"">kf.y.offic.e.383@gmail.com</a>
<a href=""mailto:kfy.o.f.f.ic.e38.3@gmail.com"">kfy.o.f.f.ic.e38.3@gmail.com</a>
<a href=""mailto:kf.yo.f.f.ice38.3@gmail.com"">kf.yo.f.f.ice38.3@gmail.com</a>
<a href=""mailto:k.fyo.f.fi.ce3.83@gmail.com"">k.fyo.f.fi.ce3.83@gmail.com</a>
<a href=""mailto:k.fyo.ff.ice38.3@gmail.com"">k.fyo.ff.ice38.3@gmail.com</a>
<a href=""mailto:k.f.y.off.i.ce3.83@gmail.com"">k.f.y.off.i.ce3.83@gmail.com</a>
<a href=""mailto:kf.yo.f.fice3.8.3@gmail.com"">kf.yo.f.fice3.8.3@gmail.com</a>
<a href=""mailto:k.fyo.f.fi.ce3.8.3@gmail.com"">k.fyo.f.fi.ce3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.o.ff.i.c.e38.3@gmail.com"">k.f.y.o.ff.i.c.e38.3@gmail.com</a>
<a href=""mailto:k.fyo.ffice.3.83@gmail.com"">k.fyo.ffice.3.83@gmail.com</a>
<a href=""mailto:kf.yoffice3.83@gmail.com"">kf.yoffice3.83@gmail.com</a>
<a href=""mailto:kfy.o.f.fi.c.e38.3@gmail.com"">kfy.o.f.fi.c.e38.3@gmail.com</a>
<a href=""mailto:kf.yoff.ice3.83@gmail.com"">kf.yoff.ice3.83@gmail.com</a>
<a href=""mailto:k.f.yo.ff.i.c.e3.8.3@gmail.com"">k.f.yo.ff.i.c.e3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.o.ffice38.3@gmail.com"">k.f.y.o.ffice38.3@gmail.com</a>
<a href=""mailto:kfyo.ff.ice.38.3@gmail.com"">kfyo.ff.ice.38.3@gmail.com</a>
<a href=""mailto:k.fy.off.ice.3.83@gmail.com"">k.fy.off.ice.3.83@gmail.com</a>
<a href=""mailto:kf.yo.f.f.i.c.e.3.8.3@gmail.com"">kf.yo.f.f.i.c.e.3.8.3@gmail.com</a>
<a href=""mailto:k.f.yoffice.3.83@gmail.com"">k.f.yoffice.3.83@gmail.com</a>
<a href=""mailto:k.fy.o.f.f.i.ce.3.8.3@gmail.com"">k.fy.o.f.f.i.ce.3.8.3@gmail.com</a>
<a href=""mailto:k.fy.o.f.f.ic.e3.83@gmail.com"">k.fy.o.f.f.ic.e3.83@gmail.com</a>
<a href=""mailto:k.fy.o.f.f.ice3.8.3@gmail.com"">k.fy.o.f.f.ice3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.o.f.fice3.83@gmail.com"">k.f.y.o.f.fice3.83@gmail.com</a>
<a href=""mailto:k.fyo.ffice.3.8.3@gmail.com"">k.fyo.ffice.3.8.3@gmail.com</a>
<a href=""mailto:kfy.o.ffi.c.e38.3@gmail.com"">kfy.o.ffi.c.e38.3@gmail.com</a>
<a href=""mailto:k.fyo.ffi.ce.38.3@gmail.com"">k.fyo.ffi.ce.38.3@gmail.com</a>
<a href=""mailto:k.fyof.f.ic.e38.3@gmail.com"">k.fyof.f.ic.e38.3@gmail.com</a>
<a href=""mailto:kf.yoffi.ce383@gmail.com"">kf.yoffi.ce383@gmail.com</a>
<a href=""mailto:kfy.offic.e38.3@gmail.com"">kfy.offic.e38.3@gmail.com</a>
<a href=""mailto:k.f.yof.f.i.c.e.38.3@gmail.com"">k.f.yof.f.i.c.e.38.3@gmail.com</a>
<a href=""mailto:kf.yo.f.f.ice3.8.3@gmail.com"">kf.yo.f.f.ice3.8.3@gmail.com</a>
<a href=""mailto:kf.yoff.ic.e.3.8.3@gmail.com"">kf.yoff.ic.e.3.8.3@gmail.com</a>
<a href=""mailto:k.f.y.of.f.ic.e.383@gmail.com"">k.f.y.of.f.ic.e.383@gmail.com</a>
<a href=""mailto:k.f.yoff.ice383@gmail.com"">k.f.yoff.ice383@gmail.com</a>
<a href=""mailto:kfyoff.i.c.e.3.8.3@gmail.com"">kfyoff.i.c.e.3.8.3@gmail.com</a>
<a href=""mailto:k.fy.offi.ce.3.8.3@gmail.com"">k.fy.offi.ce.3.8.3@gmail.com</a>
<a href=""mailto:kf.yo.ffic.e3.8.3@gmail.com"">kf.yo.ffic.e3.8.3@gmail.com</a>
<a href=""mailto:kfyo.f.f.ice38.3@gmail.com"">kfyo.f.f.ice38.3@gmail.com</a>
<a href=""mailto:k.f.yo.ffi.ce38.3@gmail.com"">k.f.yo.ffi.ce38.3@gmail.com</a>
<a href=""mailto:k.fyo.f.f.i.ce.3.83@gmail.com"">k.fyo.f.f.i.ce.3.83@gmail.com</a>
<a href=""mailto:kf.yo.ff.i.c.e.3.83@gmail.com"">kf.yo.ff.i.c.e.3.83@gmail.com</a>
<a href=""mailto:olataiwo992@gmail.com"">olataiwo992@gmail.com</a>
<a href=""mailto:o.l.ataiw.o.992@gmail.com"">o.l.ataiw.o.992@gmail.com</a>
<a href=""mailto:ola.t.a.i.w.o9.92@gmail.com"">ola.t.a.i.w.o9.92@gmail.com</a>
<a href=""mailto:olat.a.i.w.o992@gmail.com"">olat.a.i.w.o992@gmail.com</a>
<a href=""mailto:olat.a.iw.o99.2@gmail.com"">olat.a.iw.o99.2@gmail.com</a>
<a href=""mailto:ola.ta.iwo.9.9.2@gmail.com"">ola.ta.iwo.9.9.2@gmail.com</a>
<a href=""mailto:o.l.ata.iw.o.992@gmail.com"">o.l.ata.iw.o.992@gmail.com</a>
<a href=""mailto:o.l.atai.w.o.99.2@gmail.com"">o.l.atai.w.o.99.2@gmail.com</a>
<a href=""mailto:o.l.a.ta.iw.o.9.9.2@gmail.com"">o.l.a.ta.iw.o.9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.wo.9.9.2@gmail.com"">o.l.a.ta.i.wo.9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.wo.9.92@gmail.com"">o.l.a.ta.i.wo.9.92@gmail.com</a>
<a href=""mailto:ola.ta.iw.o.99.2@gmail.com"">ola.ta.iw.o.99.2@gmail.com</a>
<a href=""mailto:ola.ta.i.w.o9.9.2@gmail.com"">ola.ta.i.w.o9.9.2@gmail.com</a>
<a href=""mailto:ol.a.taiwo9.9.2@gmail.com"">ol.a.taiwo9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.t.ai.wo992@gmail.com"">o.l.a.t.ai.wo992@gmail.com</a>
<a href=""mailto:ola.taiw.o99.2@gmail.com"">ola.taiw.o99.2@gmail.com</a>
<a href=""mailto:o.l.at.a.i.w.o.992@gmail.com"">o.l.at.a.i.w.o.992@gmail.com</a>
<a href=""mailto:ol.a.t.ai.w.o9.92@gmail.com"">ol.a.t.ai.w.o9.92@gmail.com</a>
<a href=""mailto:ol.ataiw.o.9.9.2@gmail.com"">ol.ataiw.o.9.9.2@gmail.com</a>
<a href=""mailto:ola.ta.iw.o.992@gmail.com"">ola.ta.iw.o.992@gmail.com</a>
<a href=""mailto:ol.a.ta.iw.o9.92@gmail.com"">ol.a.ta.iw.o9.92@gmail.com</a>
<a href=""mailto:o.l.a.taiwo99.2@gmail.com"">o.l.a.taiwo99.2@gmail.com</a>
<a href=""mailto:o.lat.aiwo9.9.2@gmail.com"">o.lat.aiwo9.9.2@gmail.com</a>
<a href=""mailto:o.la.t.aiwo99.2@gmail.com"">o.la.t.aiwo99.2@gmail.com</a>
<a href=""mailto:o.l.a.t.a.i.w.o.9.92@gmail.com"">o.l.a.t.a.i.w.o.9.92@gmail.com</a>
<a href=""mailto:ol.a.t.aiwo.992@gmail.com"">ol.a.t.aiwo.992@gmail.com</a>
<a href=""mailto:ol.a.ta.iw.o99.2@gmail.com"">ol.a.ta.iw.o99.2@gmail.com</a>
<a href=""mailto:o.la.t.a.i.wo.992@gmail.com"">o.la.t.a.i.wo.992@gmail.com</a>
<a href=""mailto:o.la.tai.w.o.9.9.2@gmail.com"">o.la.tai.w.o.9.9.2@gmail.com</a>
<a href=""mailto:ol.ata.iw.o9.9.2@gmail.com"">ol.ata.iw.o9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.ta.iwo9.92@gmail.com"">o.l.a.ta.iwo9.92@gmail.com</a>
<a href=""mailto:ol.a.ta.i.wo.992@gmail.com"">ol.a.ta.i.wo.992@gmail.com</a>
<a href=""mailto:ola.t.aiw.o992@gmail.com"">ola.t.aiw.o992@gmail.com</a>
<a href=""mailto:ol.a.t.ai.w.o.9.9.2@gmail.com"">ol.a.t.ai.w.o.9.9.2@gmail.com</a>
<a href=""mailto:ol.a.ta.i.wo.9.92@gmail.com"">ol.a.ta.i.wo.9.92@gmail.com</a>
<a href=""mailto:ola.t.aiwo9.92@gmail.com"">ola.t.aiwo9.92@gmail.com</a>
<a href=""mailto:olata.i.w.o.99.2@gmail.com"">olata.i.w.o.99.2@gmail.com</a>
<a href=""mailto:o.la.taiwo.992@gmail.com"">o.la.taiwo.992@gmail.com</a>
<a href=""mailto:ola.t.ai.wo992@gmail.com"">ola.t.ai.wo992@gmail.com</a>
<a href=""mailto:ola.t.aiw.o99.2@gmail.com"">ola.t.aiw.o99.2@gmail.com</a>
<a href=""mailto:o.lat.a.i.w.o.9.9.2@gmail.com"">o.lat.a.i.w.o.9.9.2@gmail.com</a>
<a href=""mailto:o.l.ata.iw.o.9.92@gmail.com"">o.l.ata.iw.o.9.92@gmail.com</a>
<a href=""mailto:o.l.a.taiw.o99.2@gmail.com"">o.l.a.taiw.o99.2@gmail.com</a>
<a href=""mailto:ol.a.t.a.i.w.o.99.2@gmail.com"">ol.a.t.a.i.w.o.99.2@gmail.com</a>
<a href=""mailto:o.lat.ai.wo.992@gmail.com"">o.lat.ai.wo.992@gmail.com</a>
<a href=""mailto:ola.t.a.iw.o.99.2@gmail.com"">ola.t.a.iw.o.99.2@gmail.com</a>
<a href=""mailto:olat.ai.w.o99.2@gmail.com"">olat.ai.w.o99.2@gmail.com</a>
<a href=""mailto:ol.a.tai.w.o992@gmail.com"">ol.a.tai.w.o992@gmail.com</a>
<a href=""mailto:o.la.ta.iwo.9.9.2@gmail.com"">o.la.ta.iwo.9.9.2@gmail.com</a>
<a href=""mailto:ola.taiwo992@gmail.com"">ola.taiwo992@gmail.com</a>
<a href=""mailto:ol.a.t.aiw.o.9.9.2@gmail.com"">ol.a.t.aiw.o.9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.t.a.i.wo.99.2@gmail.com"">o.l.a.t.a.i.wo.99.2@gmail.com</a>
<a href=""mailto:o.l.ata.i.wo.992@gmail.com"">o.l.ata.i.wo.992@gmail.com</a>
<a href=""mailto:o.l.a.t.a.i.w.o99.2@gmail.com"">o.l.a.t.a.i.w.o99.2@gmail.com</a>
<a href=""mailto:o.lata.i.wo.9.9.2@gmail.com"">o.lata.i.wo.9.9.2@gmail.com</a>
<a href=""mailto:ola.t.a.i.w.o.99.2@gmail.com"">ola.t.a.i.w.o.99.2@gmail.com</a>
<a href=""mailto:o.la.t.a.i.wo.9.9.2@gmail.com"">o.la.t.a.i.wo.9.9.2@gmail.com</a>
<a href=""mailto:ol.ataiw.o.992@gmail.com"">ol.ataiw.o.992@gmail.com</a>
<a href=""mailto:o.la.t.ai.w.o.9.92@gmail.com"">o.la.t.ai.w.o.9.92@gmail.com</a>
<a href=""mailto:olat.a.iwo992@gmail.com"">olat.a.iwo992@gmail.com</a>
<a href=""mailto:olat.a.i.wo.9.92@gmail.com"">olat.a.i.wo.9.92@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.w.o.9.92@gmail.com"">o.l.a.ta.i.w.o.9.92@gmail.com</a>
<a href=""mailto:ola.t.a.iw.o99.2@gmail.com"">ola.t.a.iw.o99.2@gmail.com</a>
<a href=""mailto:ol.a.ta.iwo.9.9.2@gmail.com"">ol.a.ta.iwo.9.9.2@gmail.com</a>
<a href=""mailto:ol.at.ai.wo.99.2@gmail.com"">ol.at.ai.wo.99.2@gmail.com</a>
<a href=""mailto:olat.a.i.w.o.992@gmail.com"">olat.a.i.w.o.992@gmail.com</a>
<a href=""mailto:o.la.t.ai.w.o.9.9.2@gmail.com"">o.la.t.ai.w.o.9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.t.a.iwo.992@gmail.com"">o.l.a.t.a.iwo.992@gmail.com</a>
<a href=""mailto:o.lat.a.iwo.99.2@gmail.com"">o.lat.a.iwo.99.2@gmail.com</a>
<a href=""mailto:o.l.a.ta.iwo.992@gmail.com"">o.l.a.ta.iwo.992@gmail.com</a>
<a href=""mailto:o.l.at.ai.w.o9.92@gmail.com"">o.l.at.ai.w.o9.92@gmail.com</a>
<a href=""mailto:ol.ataiw.o9.9.2@gmail.com"">ol.ataiw.o9.9.2@gmail.com</a>
<a href=""mailto:ol.at.ai.w.o.9.92@gmail.com"">ol.at.ai.w.o.9.92@gmail.com</a>
<a href=""mailto:o.l.ata.i.w.o992@gmail.com"">o.l.ata.i.w.o992@gmail.com</a>
<a href=""mailto:o.lat.a.i.w.o9.9.2@gmail.com"">o.lat.a.i.w.o9.9.2@gmail.com</a>
<a href=""mailto:o.l.at.a.i.wo992@gmail.com"">o.l.at.a.i.wo992@gmail.com</a>
<a href=""mailto:olat.a.i.w.o.9.9.2@gmail.com"">olat.a.i.w.o.9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.t.ai.wo.99.2@gmail.com"">o.l.a.t.ai.wo.99.2@gmail.com</a>
<a href=""mailto:o.la.t.aiw.o.99.2@gmail.com"">o.la.t.aiw.o.99.2@gmail.com</a>
<a href=""mailto:o.l.at.a.iw.o9.92@gmail.com"">o.l.at.a.iw.o9.92@gmail.com</a>
<a href=""mailto:o.l.ataiw.o992@gmail.com"">o.l.ataiw.o992@gmail.com</a>
<a href=""mailto:o.l.ata.i.w.o9.9.2@gmail.com"">o.l.ata.i.w.o9.9.2@gmail.com</a>
<a href=""mailto:o.lat.aiwo.99.2@gmail.com"">o.lat.aiwo.99.2@gmail.com</a>
<a href=""mailto:ol.ata.i.w.o.9.92@gmail.com"">ol.ata.i.w.o.9.92@gmail.com</a>
<a href=""mailto:ol.a.t.aiw.o.9.92@gmail.com"">ol.a.t.aiw.o.9.92@gmail.com</a>
<a href=""mailto:ol.at.ai.w.o.9.9.2@gmail.com"">ol.at.ai.w.o.9.9.2@gmail.com</a>
<a href=""mailto:ola.ta.i.wo.9.9.2@gmail.com"">ola.ta.i.wo.9.9.2@gmail.com</a>
<a href=""mailto:o.l.ata.i.wo992@gmail.com"">o.l.ata.i.wo992@gmail.com</a>
<a href=""mailto:o.lata.i.wo.99.2@gmail.com"">o.lata.i.wo.99.2@gmail.com</a>
<a href=""mailto:o.la.ta.i.w.o99.2@gmail.com"">o.la.ta.i.w.o99.2@gmail.com</a>
<a href=""mailto:o.l.a.t.aiwo.9.92@gmail.com"">o.l.a.t.aiwo.9.92@gmail.com</a>
<a href=""mailto:o.l.a.t.ai.w.o.992@gmail.com"">o.l.a.t.ai.w.o.992@gmail.com</a>
<a href=""mailto:ol.at.a.iwo99.2@gmail.com"">ol.at.a.iwo99.2@gmail.com</a>
<a href=""mailto:ol.a.ta.i.wo.9.9.2@gmail.com"">ol.a.ta.i.wo.9.9.2@gmail.com</a>
<a href=""mailto:ol.at.ai.wo9.92@gmail.com"">ol.at.ai.wo9.92@gmail.com</a>
<a href=""mailto:olat.aiwo.992@gmail.com"">olat.aiwo.992@gmail.com</a>
<a href=""mailto:ol.ata.iw.o9.92@gmail.com"">ol.ata.iw.o9.92@gmail.com</a>
<a href=""mailto:o.la.ta.i.wo.9.92@gmail.com"">o.la.ta.i.wo.9.92@gmail.com</a>
<a href=""mailto:ol.ata.i.wo99.2@gmail.com"">ol.ata.i.wo99.2@gmail.com</a>
<a href=""mailto:ol.atai.w.o9.9.2@gmail.com"">ol.atai.w.o9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.tai.w.o9.9.2@gmail.com"">o.l.a.tai.w.o9.9.2@gmail.com</a>
<a href=""mailto:ol.ataiwo99.2@gmail.com"">ol.ataiwo99.2@gmail.com</a>
<a href=""mailto:ol.at.aiwo.9.92@gmail.com"">ol.at.aiwo.9.92@gmail.com</a>
<a href=""mailto:ol.a.t.a.iw.o992@gmail.com"">ol.a.t.a.iw.o992@gmail.com</a>
<a href=""mailto:o.l.a.taiwo9.9.2@gmail.com"">o.l.a.taiwo9.9.2@gmail.com</a>
<a href=""mailto:olata.iwo.99.2@gmail.com"">olata.iwo.99.2@gmail.com</a>
<a href=""mailto:olataiw.o.9.9.2@gmail.com"">olataiw.o.9.9.2@gmail.com</a>
<a href=""mailto:ol.a.t.aiwo9.92@gmail.com"">ol.a.t.aiwo9.92@gmail.com</a>
<a href=""mailto:olat.a.iw.o992@gmail.com"">olat.a.iw.o992@gmail.com</a>
<a href=""mailto:olat.ai.wo.99.2@gmail.com"">olat.ai.wo.99.2@gmail.com</a>
<a href=""mailto:olataiw.o9.92@gmail.com"">olataiw.o9.92@gmail.com</a>
<a href=""mailto:o.la.ta.i.wo992@gmail.com"">o.la.ta.i.wo992@gmail.com</a>
<a href=""mailto:ol.at.aiwo99.2@gmail.com"">ol.at.aiwo99.2@gmail.com</a>
<a href=""mailto:o.la.taiw.o.9.92@gmail.com"">o.la.taiw.o.9.92@gmail.com</a>
<a href=""mailto:o.l.at.a.iwo9.9.2@gmail.com"">o.l.at.a.iwo9.9.2@gmail.com</a>
<a href=""mailto:ol.a.ta.i.wo9.9.2@gmail.com"">ol.a.ta.i.wo9.9.2@gmail.com</a>
<a href=""mailto:ol.atai.w.o.99.2@gmail.com"">ol.atai.w.o.99.2@gmail.com</a>
<a href=""mailto:ola.t.ai.w.o9.92@gmail.com"">ola.t.ai.w.o9.92@gmail.com</a>
<a href=""mailto:ol.a.t.a.iw.o99.2@gmail.com"">ol.a.t.a.iw.o99.2@gmail.com</a>
<a href=""mailto:ol.ataiw.o99.2@gmail.com"">ol.ataiw.o99.2@gmail.com</a>
<a href=""mailto:o.lataiwo99.2@gmail.com"">o.lataiwo99.2@gmail.com</a>
<a href=""mailto:ol.ata.i.wo992@gmail.com"">ol.ata.i.wo992@gmail.com</a>
<a href=""mailto:ola.t.aiwo99.2@gmail.com"">ola.t.aiwo99.2@gmail.com</a>
<a href=""mailto:ola.ta.iw.o9.9.2@gmail.com"">ola.ta.iw.o9.9.2@gmail.com</a>
<a href=""mailto:ol.a.t.aiw.o9.9.2@gmail.com"">ol.a.t.aiw.o9.9.2@gmail.com</a>
<a href=""mailto:o.lataiw.o.9.92@gmail.com"">o.lataiw.o.9.92@gmail.com</a>
<a href=""mailto:o.l.a.t.a.i.wo.9.9.2@gmail.com"">o.l.a.t.a.i.wo.9.9.2@gmail.com</a>
<a href=""mailto:o.l.at.a.i.w.o9.92@gmail.com"">o.l.at.a.i.w.o9.92@gmail.com</a>
<a href=""mailto:o.la.ta.i.w.o.99.2@gmail.com"">o.la.ta.i.w.o.99.2@gmail.com</a>
<a href=""mailto:o.la.taiw.o.9.9.2@gmail.com"">o.la.taiw.o.9.9.2@gmail.com</a>
<a href=""mailto:o.la.ta.i.w.o.992@gmail.com"">o.la.ta.i.w.o.992@gmail.com</a>
<a href=""mailto:ol.a.ta.i.wo9.92@gmail.com"">ol.a.ta.i.wo9.92@gmail.com</a>
<a href=""mailto:o.lataiwo.9.92@gmail.com"">o.lataiwo.9.92@gmail.com</a>
<a href=""mailto:o.lataiw.o9.92@gmail.com"">o.lataiw.o9.92@gmail.com</a>
<a href=""mailto:ol.a.t.ai.w.o992@gmail.com"">ol.a.t.ai.w.o992@gmail.com</a>
<a href=""mailto:o.l.at.ai.wo.99.2@gmail.com"">o.l.at.ai.wo.99.2@gmail.com</a>
<a href=""mailto:ol.ataiwo.9.9.2@gmail.com"">ol.ataiwo.9.9.2@gmail.com</a>
<a href=""mailto:olata.iw.o9.92@gmail.com"">olata.iw.o9.92@gmail.com</a>
<a href=""mailto:o.l.ata.iw.o9.92@gmail.com"">o.l.ata.iw.o9.92@gmail.com</a>
<a href=""mailto:o.l.atai.wo.99.2@gmail.com"">o.l.atai.wo.99.2@gmail.com</a>
<a href=""mailto:o.la.t.aiw.o9.9.2@gmail.com"">o.la.t.aiw.o9.9.2@gmail.com</a>
<a href=""mailto:ol.at.ai.wo992@gmail.com"">ol.at.ai.wo992@gmail.com</a>
<a href=""mailto:o.l.at.a.iwo.9.9.2@gmail.com"">o.l.at.a.iwo.9.9.2@gmail.com</a>
<a href=""mailto:o.l.at.ai.w.o.992@gmail.com"">o.l.at.ai.w.o.992@gmail.com</a>
<a href=""mailto:olataiwo9.92@gmail.com"">olataiwo9.92@gmail.com</a>
<a href=""mailto:o.lat.aiw.o.9.92@gmail.com"">o.lat.aiw.o.9.92@gmail.com</a>
<a href=""mailto:olat.ai.w.o.9.92@gmail.com"">olat.ai.w.o.9.92@gmail.com</a>
<a href=""mailto:o.la.ta.iw.o992@gmail.com"">o.la.ta.iw.o992@gmail.com</a>
<a href=""mailto:ol.a.t.a.iwo.9.9.2@gmail.com"">ol.a.t.a.iwo.9.9.2@gmail.com</a>
<a href=""mailto:o.l.at.aiwo.9.92@gmail.com"">o.l.at.aiwo.9.92@gmail.com</a>
<a href=""mailto:o.la.taiw.o.992@gmail.com"">o.la.taiw.o.992@gmail.com</a>
<a href=""mailto:ola.tai.wo9.9.2@gmail.com"">ola.tai.wo9.9.2@gmail.com</a>
<a href=""mailto:ol.a.ta.iw.o.99.2@gmail.com"">ol.a.ta.iw.o.99.2@gmail.com</a>
<a href=""mailto:o.l.ata.iwo9.92@gmail.com"">o.l.ata.iwo9.92@gmail.com</a>
<a href=""mailto:ol.a.t.aiw.o99.2@gmail.com"">ol.a.t.aiw.o99.2@gmail.com</a>
<a href=""mailto:ol.a.tai.wo.9.92@gmail.com"">ol.a.tai.wo.9.92@gmail.com</a>
<a href=""mailto:ol.a.t.a.iw.o9.9.2@gmail.com"">ol.a.t.a.iw.o9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.w.o9.92@gmail.com"">o.l.a.ta.i.w.o9.92@gmail.com</a>
<a href=""mailto:olat.a.iwo.9.92@gmail.com"">olat.a.iwo.9.92@gmail.com</a>
<a href=""mailto:o.lata.i.w.o99.2@gmail.com"">o.lata.i.w.o99.2@gmail.com</a>
<a href=""mailto:o.l.ata.iwo99.2@gmail.com"">o.l.ata.iwo99.2@gmail.com</a>
<a href=""mailto:o.l.at.a.i.wo9.9.2@gmail.com"">o.l.at.a.i.wo9.9.2@gmail.com</a>
<a href=""mailto:o.l.a.t.a.i.wo992@gmail.com"">o.l.a.t.a.i.wo992@gmail.com</a>
<a href=""mailto:o.la.t.ai.w.o99.2@gmail.com"">o.la.t.ai.w.o99.2@gmail.com</a>
<a href=""mailto:ola.ta.iw.o9.92@gmail.com"">ola.ta.iw.o9.92@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.w.o992@gmail.com"">o.l.a.ta.i.w.o992@gmail.com</a>
<a href=""mailto:o.lat.a.i.wo9.92@gmail.com"">o.lat.a.i.wo9.92@gmail.com</a>
<a href=""mailto:ola.ta.i.w.o9.92@gmail.com"">ola.ta.i.w.o9.92@gmail.com</a>
<a href=""mailto:ol.a.t.aiw.o.99.2@gmail.com"">ol.a.t.aiw.o.99.2@gmail.com</a>
<a href=""mailto:ola.ta.iwo.992@gmail.com"">ola.ta.iwo.992@gmail.com</a>
<a href=""mailto:o.la.t.a.iwo.9.92@gmail.com"">o.la.t.a.iwo.9.92@gmail.com</a>
<a href=""mailto:o.l.ata.i.w.o.9.9.2@gmail.com"">o.l.ata.i.w.o.9.9.2@gmail.com</a>
<a href=""mailto:o.la.ta.iwo992@gmail.com"">o.la.ta.iwo992@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.wo9.9.2@gmail.com"">o.l.a.ta.i.wo9.9.2@gmail.com</a>
<a href=""mailto:o.la.tai.wo9.92@gmail.com"">o.la.tai.wo9.92@gmail.com</a>
<a href=""mailto:ol.at.a.i.wo992@gmail.com"">ol.at.a.i.wo992@gmail.com</a>
<a href=""mailto:ol.a.t.ai.wo.99.2@gmail.com"">ol.a.t.ai.wo.99.2@gmail.com</a>
<a href=""mailto:o.la.tai.wo9.9.2@gmail.com"">o.la.tai.wo9.9.2@gmail.com</a>
<a href=""mailto:o.lataiwo.9.9.2@gmail.com"">o.lataiwo.9.9.2@gmail.com</a>
<a href=""mailto:o.lata.iw.o.99.2@gmail.com"">o.lata.iw.o.99.2@gmail.com</a>
<a href=""mailto:ola.taiw.o.9.92@gmail.com"">ola.taiw.o.9.92@gmail.com</a>
<a href=""mailto:ol.at.aiw.o.9.9.2@gmail.com"">ol.at.aiw.o.9.9.2@gmail.com</a>
<a href=""mailto:o.l.at.a.i.wo.992@gmail.com"">o.l.at.a.i.wo.992@gmail.com</a>
<a href=""mailto:ol.ataiwo.992@gmail.com"">ol.ataiwo.992@gmail.com</a>
<a href=""mailto:ola.t.a.i.wo.9.92@gmail.com"">ola.t.a.i.wo.9.92@gmail.com</a>
<a href=""mailto:o.l.a.ta.i.wo9.92@gmail.com"">o.l.a.ta.i.wo9.92@gmail.com</a>
<a href=""mailto:olataiwo.9.9.2@gmail.com"">olataiwo.9.9.2@gmail.com</a>
<a href=""mailto:o.la.t.a.iwo9.92@gmail.com"">o.la.t.a.iwo9.92@gmail.com</a>
<a href=""mailto:ol.a.t.a.i.w.o.9.92@gmail.com"">ol.a.t.a.i.w.o.9.92@gmail.com</a>
<a href=""mailto:ol.a.t.ai.wo992@gmail.com"">ol.a.t.ai.wo992@gmail.com</a>
<a href=""mailto:o.l.a.t.ai.w.o9.9.2@gmail.com"">o.l.a.t.ai.w.o9.9.2@gmail.com</a>
<a href=""mailto:ol.atai.w.o99.2@gmail.com"">ol.atai.w.o99.2@gmail.com</a>
<a href=""mailto:ol.a.t.a.i.wo.99.2@gmail.com"">ol.a.t.a.i.wo.99.2@gmail.com</a>
<a href=""mailto:ola.taiwo.9.9.2@gmail.com"">ola.taiwo.9.9.2@gmail.com</a>
<a href=""mailto:o.lata.i.wo992@gmail.com"">o.lata.i.wo992@gmail.com</a>
<a href=""mailto:o.la.t.ai.w.o9.92@gmail.com"">o.la.t.ai.w.o9.92@gmail.com</a>
<a href=""mailto:ol.a.t.a.i.w.o.992@gmail.com"">ol.a.t.a.i.w.o.992@gmail.com</a>
<a href=""mailto:o.la.t.a.iw.o.992@gmail.com"">o.la.t.a.iw.o.992@gmail.com</a>
<a href=""mailto:ol.a.t.ai.w.o.99.2@gmail.com"">ol.a.t.ai.w.o.99.2@gmail.com</a>
<a href=""mailto:o.la.ta.iwo.99.2@gmail.com"">o.la.ta.iwo.99.2@gmail.com</a>
<a href=""mailto:ol.atai.wo.9.9.2@gmail.com"">ol.atai.wo.9.9.2@gmail.com</a>
<a href=""mailto:meirong@mcr-morola.com"">meirong@mcr-morola.com</a>"
8NzWqMYf,Sendgrid Contact Email Addresses [9/2023] (Update),bombaires,HTML,Monday 18th of September 2023 12:29:31 PM CDT,"<a href=""mailto:contact@sendgrid.com"">contact@sendgrid.com</a>
<a href=""mailto:ben@sendgrid.com"">ben@sendgrid.com</a>
<a href=""mailto:help@sendgrid.com"">help@sendgrid.com</a>
<a href=""mailto:info@sendgrid.com"">info@sendgrid.com</a>
<a href=""mailto:isaac@sendgrid.com"">isaac@sendgrid.com</a>
<a href=""mailto:jobs@sendgrid.com"">jobs@sendgrid.com</a>
<a href=""mailto:joe@sendgrid.com"">joe@sendgrid.com</a>
<a href=""mailto:jose@sendgrid.com"">jose@sendgrid.com</a>
<a href=""mailto:kane@sendgrid.com"">kane@sendgrid.com</a>
<a href=""mailto:sales@sendgrid.com"">sales@sendgrid.com</a>
<a href=""mailto:support@sendgrid.com"">support@sendgrid.com</a>
<a href=""mailto:tim@sendgrid.com"">tim@sendgrid.com</a>
<a href=""mailto:twittersupport@sendgrid.com"">twittersupport@sendgrid.com</a>"
ifxVtxw9,Untitled,tankostanev99,Java,Monday 18th of September 2023 12:04:29 PM CDT,"import java.util.ArrayDeque;

public class Sample {
    public static void main(String[] args) {
        ArrayDeque<Integer> stackque=new ArrayDeque<>();
        stackque.add(1);
        stackque.push(2);
        stackque.add(3);
        stackque.push(4);
        stackque.add(5);
        System.out.println(stackque);
        System.out.println(stackque.poll());
        System.out.println(stackque.poll());
        System.out.println(stackque.poll());

        System.out.println(stackque);
    }
}
"
ecd7914c,Untitled,Rofyda_Elghadban1,C++,Monday 18th of September 2023 11:52:41 AM CDT," #include <bits/stdc++.h> 
 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/
 
 using namespace std;
 
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }


 void solve(){
  int n,k;
  cin>>n>>k;
  vector<int>v(n+1),t(n+1),v2;
  for(int i=1;i<n+1;i++){
    cin>>v[i];
  }
  for(int i=1;i<n+1;i++){
    cin>>t[i];
  }
  for(int i=0;i<n+1;i++){
    if(t[i]==1){
      v2.push_back(v[i]);
    }else if(t[i]==0||i==0){
      v2.push_back(0);
    }
  }
  int prefix1[100001]{},prefix2[100001]{},pre=0;
  for(int i=1;i<n+1;i++){
    prefix1[i]=v[i]+prefix1[i-1];
  } 
  for(int i=1;i<n+1;i++){
    prefix2[i]=v2[i]+prefix2[i-1];
  } 
  int l=1,r=l+k-1,maxi=INT_MIN,s1=0,s=0,s2=0;
  for(int i=1;i<n+1;i++){
    s1=prefix2[l-1]-prefix2[0];
    s=prefix1[r]-prefix1[l-1];
    s2=prefix2[n]-prefix2[r-1];
    maxi=max(maxi,(s1+s+s2));
    if(r<=n){
      l++;
      r++;
      s1=0;
      s=0;
      s2=0;
    }
  }
  cout<<maxi<<""\n"";
 }

 
 int main(){
 Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
  solve();

 
 return 0;
}
 
 "
wND7JQ5L,Untitled,mrlolthe1st,C++,Monday 18th of September 2023 11:52:33 AM CDT,"#define _CRT_SECURE_NO_WARNINGS
#include <assert.h>

#include <algorithm>
#include <array>
#include <chrono>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <numeric>
#include <optional>
#include <queue>
#include <random>
#include <set>
#include <sstream>
#include <string>
#include <thread>
#include <unordered_map>
#include <unordered_set>
#include <variant>
#include <vector>

using namespace std;

const long long MOD = 1400305337;
const long long MOD2 = 1e9 + 9;
vector<int> a;
int n;
int mex[5001][5001];
unordered_set<int> v[5005];
int ans = 0;
void solve(int i, int prev) {
  ans = max(ans, prev);
  if (i == n) return;
  if (v[i].count(prev)) return;
  v[i].insert(prev);
  for (int j = 0; j + i < n; ++j) {
    solve(i + j + 1, prev);
    solve(i + j + 1, prev ^ mex[i][i + j]);
  }
}

signed main(int64_t argc, char** argv) {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int t;
  cin >> t;
  while (t--) {
    cin >> n;
    a.resize(n);
    for (auto& e : a) cin >> e;
    for (int i = 0; i < n; ++i) v[i].clear();
    for (int i = 0; i < n; ++i) {
      set<int> x;
      for (int j = 0; j <= n + 1; ++j) x.insert(j);
      for (int j = i; j < n; ++j) {
        x.erase(a[j]);
        mex[i][j] = *x.begin();
      }
    }
    ans = 0;
    solve(0, 0);
    cout << ans << ""\n"";
  }
}"
kxQhG103,Untitled,Rofyda_Elghadban1,C++,Monday 18th of September 2023 11:49:02 AM CDT," #include <bits/stdc++.h> 
 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 
 /***********************************************************************************/
 
 using namespace std;
 
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }


 void solve(){
  int n,k;
  cin>>n>>k;
  vector<int>v(n+1),t(n+1),v2;
  for(int i=1;i<n+1;i++){
    cin>>v[i];
  }
  for(int i=1;i<n+1;i++){
    cin>>t[i];
  }
  for(int i=0;i<n+1;i++){
    if(t[i]==1){
      v2.push_back(v[i]);
    }else if(t[i]==0||i==0){
      v2.push_back(0);
    }
  }
  // cout(v2);
  // cout<<""\n"";
  int prefix1[100001]{},prefix2[100001]{},pre=0;
  for(int i=1;i<n+1;i++){
    prefix1[i]=v[i]+prefix1[i-1];
  } 
  for(int i=1;i<n+1;i++){
    // if(v2[i]!=0){
    //   prefix2[i]=v2[i]+pre;
    //   pre=prefix2[i];
    // }else if(v2[i]==0){
    //   prefix2[i]=0;
    prefix2[i]=v2[i]+prefix2[i-1];
    // }
  } 
  // for(int i=1;i<n+1;i++){
  //   cout<<prefix1[i]<<"" "";
  // }   
  // cout<<""\n"";
  for(int i=1;i<n+1;i++){
    cout<<prefix2[i]<<"" "";
  }   
  cout<<""\n"";
  int l=1,r=l+k-1,maxi=INT_MIN,idx1=0,idx2=0,s1=0,s=0,s2=0;
  for(int i=1;i<n+1;i++){
    s1=prefix2[l-1]-prefix2[0];
    s=prefix1[r]-prefix1[l-1];
    s2=prefix2[n]-prefix2[r-1];
    // cout<<s1<<"" ""<<s<<"" ""<<s2<<""\n"";
     cout<<s1+s+s2<<""\n""<<""*********************""<<""\n"";
    //if(maxi<=(s1+s+s2)){
    maxi=max(maxi,(s1+s+s2));
    //}
    if(r<=n){
      l++;
      r++;
      s1=0;
      s=0;
      s2=0;
    }
  }
  // cout<<""\n"";
  // for(int i=1;i<idx1;i++){
  //   if(t[i]==1){
  //     maxi+=v[i];
  //   }
  // }
  // for(int i=idx2+1;i<n+1;i++){
  //   if(t[i]==1){
  //     maxi+=v[i];
  //   }
  // }

  cout<<maxi<<""\n"";
  // cout<<l<<"" ""<<r;
 }

 
 int main(){
 Rofyda_Elghadban();
 //freopen(""input.txt"",""r"",stdin);
 //freopen(""output.txt"",""r"",stdout);
  solve();

 
 return 0;
}
 
 "
tpvwrJ0h,Simple Dapper Mapper From StackOverflow,Lord_Ownix,C#,Monday 18th of September 2023 11:22:43 AM CDT,"async Task Main()
{
	// https://stackoverflow.com/a/65183485/1777780
	// override TypeMapProvider to return custom map for every requested type
	Dapper.SqlMapper.TypeMapProvider = type =>
   {
	   var fallback = new DefaultTypeMap(type);
	   return new CustomPropertyTypeMap(type, (t, column) =>
	   {
		   var property = t.GetProperties().FirstOrDefault(prop =>
			   prop.GetCustomAttributes(typeof(ColumnAttribute))
				   .Cast<ColumnAttribute>()
				   .Any(attr => attr.Name == column));

		   // if no property matched - fall back to default type map
		   if (property == null)
		   {
			   property = fallback.GetMember(column)?.Property;
		   }

		   return property;
	   });
   };

	using var connection = new SqliteConnection(""Data Source=:memory:"");
	
	var result = await connection.QuerySingleAsync<QueryResult>(""SELECT 1 AS 'Hello World', 2 AS 'HelloMars'"");
	
	result.Dump();
}

class QueryResult 
{
	public int HelloMars { get; set; }
	
	[Column(""Hello World"")]
	public int X { get; set; }  
}"
pJjwjXBZ,Private Project,FastanIndo202,JavaScript,Monday 18th of September 2023 11:10:43 AM CDT,"// ==UserScript==
// @name         SmoothScroll & Navigation Enhancer
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  Anda dapat dengan cepat mengakses episode sebelumnya dan selanjutnya, melakukan gulir halus ke atas atau ke bawah, dan bahkan mengaktifkan atau menonaktifkan mode layar penuh. Skrip ini dirancang untuk meningkatkan pengalaman membaca konten web seperti manga dan komik dengan cara yang lebih nyaman dan efisien.
// @match        https://westmanga.info/*
// @match        https://komikcast.vip/*
// @match        https://aquamanga.com/read/*
// @match        https://www.webtoons.com/*
// @match        https://kiryuu.id/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    var scrollInterval = null;
    var isScrolling = false
    var isFullscreen = false;

    var smoothScrollSpeed = 9; // Kecepatan pengguliran yang mulus
    var smoothScrollDelay = 10; // Penundaan di antara setiap langkah pengguliran yang mulus

    function smoothScrollStep(direction) {
        var scrollDistance = direction === 'up' ? -smoothScrollSpeed : smoothScrollSpeed;
        window.scrollBy(0, scrollDistance);
    }

    function startSmoothScrolling(direction) {
        if (!isScrolling) {
            isScrolling = true;
            smoothScrollStep(direction);
            scrollInterval = setInterval(function() {
                smoothScrollStep(direction);
            }, smoothScrollDelay);
        }
    }

    function stopSmoothScrolling() {
        if (isScrolling) {
            isScrolling = false;
            clearInterval(scrollInterval);
        }
    }

    document.addEventListener('keydown', function(event) {
        if (event.key === 'a' || event.key === 'A' || event.key === 'ArrowLeft') {
            var prevButton;
            if (window.location.host === 'westmanga.info') {
                prevButton = document.querySelector('.ch-prev-btn');
            } else if (window.location.host === 'komikcast.vip') {
                prevButton = document.querySelector('.nextprev a[rel=""prev""]');
            } else if (window.location.host === 'aquamanga.com') {
                prevButton = document.querySelector('a.btn.prev_page');
            } else if (window.location.host === 'kiryuu.id') {
                prevButton = document.querySelector('a.ch-prev-btn');
            } else if (window.location.host === 'www.webtoons.com') {
                prevButton = document.querySelector('a[title=""Episode sebelumnya""]');
            }
            if (prevButton) {
                prevButton.click();
            }
        } else if (event.key === 'd' || event.key === 'D' || event.key === 'ArrowRight') {
            var nextButton;
            if (window.location.host === 'westmanga.info') {
                nextButton = document.querySelector('.ch-next-btn');
            } else if (window.location.host === 'komikcast.vip') {
                nextButton = document.querySelector('.nextprev a[rel=""next""]');
            } else if (window.location.host === 'aquamanga.com') {
                nextButton = document.querySelector('a.btn.next_page');
            } else if (window.location.host === 'kiryuu.id') {
                nextButton = document.querySelector('a.ch-next-btn');
            } else if (window.location.host === 'www.webtoons.com') {
                nextButton = document.querySelector('a[title=""Episode selanjutnya""]');
            }
            if (nextButton) {
                nextButton.click();
            }
        } else if (event.key === 's' || event.key === 'S') {
            startSmoothScrolling('down');
        } else if (event.key === 'w' || event.key === 'W') {
            startSmoothScrolling('up');
        } else if (event.key === 'f' || event.key === 'F') {
            event.preventDefault();
            toggleFullscreen();
        } else if (event.key === 'q' || event.key === 'Q') {
            var allChapterButton;
            if (window.location.host === 'westmanga.info') {
                allChapterButton = document.querySelector('.allc a');
            } else if (window.location.host === 'www.webtoons.com') {
                allChapterButton = document.querySelector('a[class=""subj NPI=a:end,g:in_id""]');
            } else if (window.location.host === 'kiryuu.id') {
                allChapterButton = document.evaluate(""//div[contains(text(), 'Semua chapter ada di')]/a"", document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
            } else if (window.location.host === 'komikcast.vip') {
                allChapterButton = document.querySelector('div.allc a');
            } else if (window.location.host === 'aquamanga.com') {
                // Ambil URL saat ini
                var currentUrl = window.location.href;
                // Gunakan ekspresi reguler untuk menghapus segmen URL setelah judul komik
                var newUrl = currentUrl.replace(/\/read\/([^/]+)\/.*/, '/read/$1/');
                // Pindahkan pengguna ke URL yang telah diubah
                window.location.href = newUrl;
            }
            if (allChapterButton) {
                allChapterButton.click();
            }
        }
    });

    function toggleFullscreen() {
        if (!isFullscreen) {
            enterFullscreen();
        } else {
            exitFullscreen();
        }
        isFullscreen = !isFullscreen;
    }

    function enterFullscreen() {
        const elem = document.documentElement;
        if (elem.requestFullscreen) {
            elem.requestFullscreen();
        } else if (elem.mozRequestFullScreen) {
            elem.mozRequestFullScreen();
        } else if (elem.webkitRequestFullscreen) {
            elem.webkitRequestFullscreen();
        } else if (elem.msRequestFullscreen) {
            elem.msRequestFullscreen();
        }
    }

    function exitFullscreen() {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    }

    document.addEventListener('keyup', function(event) {
        if (event.key === 's' || event.key === 'S' || event.key === 'w' || event.key === 'W') {
            stopSmoothScrolling();
            window.scrollTo(window.pageXOffset, window.pageYOffset); // Menghentikan scroll secara instan
        }
    });
})();"
Uy1BVR1R,Film Premiere,Spocoman,C++,Monday 18th of September 2023 11:02:55 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string movie, pack;
    getline(cin, movie);
    cin >> pack;

    int tickets;
    cin >> tickets;

    double sum = 0;

    if (movie == ""John Wick"") {
        if (pack == ""Drink"") {
            sum = 12;
        }
        else if (pack == ""Popcorn"") {
            sum = 15;
        }
        else {
            sum = 19;
        }
    }
    else if (movie == ""Star Wars"") {
        if (pack == ""Drink"") {
            sum = 18;
        }
        else if (pack == ""Popcorn"") {
            sum = 25;
        }
        else {
            sum = 30;
        }
    }
    else if (movie == ""Jumanji"") {
        if (pack == ""Drink"") {
            sum = 9;
        }
        else if (pack == ""Popcorn"") {
            sum = 11;
        }
        else {
            sum = 14;
        }
    }

    if (movie == ""Star Wars"" && tickets >= 4) {
        sum *= 0.70;
    }
    else if (movie == ""Jumanji"" && tickets == 2) {
        sum *= 0.85;
    }

    printf(""Your bill is %.2f leva.\n"", sum * tickets);

    return 0;
}

Решение с тернарен оператор:

#include <iostream>
#include <string>

using namespace std;

int main() {
    string movie, pack;
    getline(cin, movie);
    cin >> pack;
    
    int tickets;
    cin >> tickets;

    double sum =
        movie == ""John Wick"" ? (pack == ""Drink"" ? 12 : pack == ""Popcorn"" ? 15 : 19) :
        movie == ""Star Wars"" ? (pack == ""Drink"" ? 18 : pack == ""Popcorn"" ? 25 : 30) * (tickets >= 4 ? 0.70 : 1) :
        (pack == ""Drink"" ? 9 : pack == ""Popcorn"" ? 11 : 14) * (tickets == 2 ? 0.85 : 1);

    printf(""Your bill is %.2f leva.\n"", sum * tickets);
 
    return 0;
}"
iVScBTRd,Untitled,shubhamgoyal,Java,Monday 18th of September 2023 10:41:50 AM CDT,"void onIframeLoaded(Event event) {
    print(""LOADED: "" + uuid);
    if (_iFrameElement.src != ""https://manabie.teacherdashboard.cerebry.co/?is_integrated=true"") {
      _iFrameElement.src = ""https://manabie.teacherdashboard.cerebry.co/?is_integrated=true"";
    }
    else {
      const jwt =
        ""eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjo4NzksInVzZXJuYW1lIjoibXVkaXRAY2VyZWJyeS5jbyIsImV4cCI6MTY5NTA0NjkyOSwiZW1haWwiOiJtdWRpdEBjZXJlYnJ5LmNvIiwib3JpZ19pYXQiOjE2OTUwMzI1MjksImF1ZCI6IlB5dGhvbkFwaSIsImlzcyI6IkNlcmVicnkifQ.dzPi3x_0XGutA4GZqVeU5o_GjH2HGusqFVyFSNKtYNo"";
      const classCode = 'TESTING-BOARD';
      Map<String, dynamic> data = {
        'cerebry-jwt-token': jwt,
        'class-selected': classCode,
      };
      _iFrameElement.contentWindow?.postMessage(
        jsonEncode(data),
        '*',
      );
    }
  }"
PyHH6bFx,Favotite Movie,Spocoman,C++,Monday 18th of September 2023 10:41:18 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    string movie, bestMovie = """";
    getline(cin, movie);

    int counter = 0, bestAscii = 0;

    while (movie != ""STOP"" && ++counter < 7) {
        int currentAscii = 0;

        for (int j = 0; j < movie.length(); j++) {
            currentAscii += movie[j];
            if (movie[j] > 96 && movie[j] < 123) {
                currentAscii -= movie.length() * 2;
            }
            else if (movie[j] > 64 && movie[j] < 91) {
                currentAscii -= movie.length();
            }
        }
        if (currentAscii > bestAscii) {
            bestAscii = currentAscii;
            bestMovie = movie;
        }

        getline(cin, movie);
    }

    if (counter == 7) {
        cout << ""The limit is reached.\n"";
    }
    cout << ""The best movie for you is "" << bestMovie << "" with "" << bestAscii << "" ASCII sum.\n"";

    return 0;
}"
azHkkv94,Untitled,skimono,C++,Monday 18th of September 2023 10:33:33 AM CDT,"#pragma GCC optimize(""Ofast"") // ������������ ���������, �� ��� ������
#pragma GCC optimize(""no-stack-protector"") //�����
#pragma GCC optimize(""unroll-loops"") // � ���� ���� ��� �� 100 �� ������ ����� � ��������� �� ��� � 100 ��� �� ������ ��������
#pragma GCC target(""sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native"") // ��� ����� ����� �� ��� 03 02 ��������� � ������ ������� �������� ��� ���� ������������
#pragma GCC optimize(""fast-math"")
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef short sh;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << "" "" << (x) << endl;

const ll INF = 2e18;
const ll inf = 2e9 + 3;
const ll ONE = 1, ZERO = 0;
const ll mod = 998244353;
const ll m1 = 1e9 + 575179;
const ll m2 = 1e9 + 87;
const ll LG = 19;
const ll k = 10000;
const ll p = 79;
ld EPS = 1e-9;
ld PI = 3.1415926535897932384;
ld phi = (sqrt(5) + 1.0) / 2.0;
mt19937_64 rnd(4906);

struct Query {
    int l, r, idx;
};

const int N = 1e5 + 3;
pair <ll, ll> pw[N];
pair <ll, ll> h[N];
vector <ll> keys[N];
vector <short> base[N], base2[N];
int ans[N];
Query Q[N];

pair <ll, ll> get_h(int l, int r) {
    return { (h[r + 1].first - (h[l].first * pw[r - l + 1].first) % m1 + m1) % m1, (h[r + 1].second - (h[l].second * pw[r - l + 1].second) % m2 + m2) % m2 };
}

bool cmp(const Query& a, const Query& b) {
    if (a.l / k != b.l / k) {
        return a.l < b.l;
    }
    else {
        return a.r < b.r;
    }
}

void solve() {
    string t, s;
    int n, len_t, len_s, len, i, j, m, l, r, q, res, lst = -1;
    cin >> t;
    len_t = t.size();
    pw[0] = { 1, 1 };
    h[0] = { 0, 0 };
    for (i = 1; i <= len_t; i++) {
        pw[i].first = (pw[i - 1].first * p) % m1;
        pw[i].second = (pw[i - 1].second * p) % m2;
        h[i].first = (h[i - 1].first * p + (t[i - 1] - 'a' + ONE)) % m1;
        h[i].second = (h[i - 1].second * p + (t[i - 1] - 'a' + ONE)) % m2;
    }
    pair <ll, ll> hesh;
    vector <int> rzl;
    cin >> n;
    for (i = 0; i < n; i++) {
        cin >> s;
        base[i].reserve(320);
        base2[i].reserve(320);
        len_s = s.size();
        rzl.push_back(len_s);
        hesh = { 0, 0 };
        for (j = 0; j < len_s; j++) {
            hesh.first = (hesh.first * p + (s[j] - 'a' + ONE)) % m1;
            hesh.second = (hesh.second * p + (s[j] - 'a' + ONE)) % m2;
        }
        keys[len_s].push_back(hesh.first * m1 + hesh.second);
    }
    sort(all(rzl));
    rzl.resize(unique(all(rzl)) - rzl.begin());
    m = rzl.size();
    for (j = 0; j < m; j++) {
        sort(all(keys[rzl[j]]));
    }
    for (i = 0; i < len_t; i++) {
        for (j = 0; j < m; j++) {
            len = rzl[j];
            if (i + len - 1 < len_t) {
                hesh = get_h(i, i + len - 1);
                if (binary_search(all(keys[len]), hesh.first * m1 + hesh.second)) {
                    base[i].push_back(len);
                    base2[i + len - 1].push_back(len);
                }
            }
        }
    }
    for (i = 0; i < len_t; i++) {
        sort(all(base2[i]));
    }
    cin >> q;
    for (i = 0; i < q; i++) {
        cin >> Q[i].l >> Q[i].r;
        Q[i].idx = i;
        Q[i].l--;
        Q[i].r--;
    }
    sort(Q, Q + q, cmp);
    int left, right, last_r, last_l;
    for (i = 0; i < q; i++) {
        if (Q[i].l / k != lst) {
            lst = Q[i].l / k;
            l = Q[i].l;
            r = Q[i].l - 1;
            res = 0;
        }
        last_r = r;
        last_l = l;
        for (r; r < Q[i].r; r++) {
            left = -1, right = base2[r + 1].size();
            while (right - left > 1) {
                m = (left + right) / 2;
                if (r + 1 - base2[r + 1][m] + 1 >= last_l) {
                    left = m;
                }
                else {
                    right = m;
                }
            }
            res += right;
        }
        for (l; l > Q[i].l; l--) {
            left = -1, right = base[l - 1].size();
            while (right - left > 1) {
                m = (left + right) / 2;
                if (l - 1 + base[l - 1][m] - 1 <= r) {
                    left = m;
                }
                else {
                    right = m;
                }
            }
            res += right;
        }
        for (l; l < Q[i].l; l++) {
            left = -1, right = base[l].size();
            while (right - left > 1) {
                m = (left + right) / 2;
                if (l + base[l][m] - 1 <= r) {
                    left = m;
                }
                else {
                    right = m;
                }
            }
            res -= right;
        }
        ans[Q[i].idx] = res;
    }
    for (i = 0; i < q; i++) {
        cout << ans[i] << "" "";
    }
}

signed main() {
#ifdef _DEBUG
    freopen(""input.txt"", ""r "", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono
//Клуб ""Кольца(Серьги)"""
iM9AcfhK,Family Trip,Spocoman,C++,Monday 18th of September 2023 10:15:19 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    double budget;
    cin >> budget;

    int night;
    cin >> night;

    double nightPrice;
    cin >> nightPrice;

    int additionalCosts;
    cin >> additionalCosts;

    if (night > 7) {
        nightPrice *= 0.95;
    }

    budget -= nightPrice * night + 0.01 * budget * additionalCosts;

    if (budget >= 0) {
        printf(""Ivanovi will be left with %.2f leva after vacation.\n"", budget);
    }
    else {
        printf(""%.2f leva needed.\n"", abs(budget));
    }
    return 0;
}


Решение с тернарен оператор и леко тарикатската:)


#include <iostream>
#include <string>

using namespace std;

int main() {
    double budget, night, nightPrice, additionalCosts;
    cin >> budget >> night >> nightPrice >> additionalCosts;

    budget -= nightPrice * (night > 7 ? 0.95 : 1) * night + 0.01 * budget * additionalCosts;

    budget >= 0 ?
        printf(""Ivanovi will be left with %.2f leva after vacation.\n"", budget) :
        printf(""%.2f leva needed.\n"", abs(budget));
    
    return 0;
}"
ipD0Nd2d,Excursion Sale,Spocoman,C++,Monday 18th of September 2023 10:13:55 AM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int seaCount, mountCount;
    cin >> seaCount >> mountCount;

    string input;

    int profit = 0;

    while (true) {
        cin >> input;
        if (input == ""Stop"") {
            break;
        }
        else if (input == ""sea"" && seaCount > 0) {
            profit += 680;
            seaCount--;
        }
        else if (input == ""mountain"" && mountCount > 0) {
            profit += 499;
            mountCount--;
        }

        if (seaCount + mountCount == 0) {
            cout << ""Good job! Everything is sold.\n"";
            break;
        }
    }
    
    cout << ""Profit: "" << profit << "" leva.\n"";

    return 0;
}"
UN84Ub4G,snowybot 3.14,coinwalk,JavaScript,Monday 18th of September 2023 09:38:52 AM CDT,"

var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((measly/800).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var foilhat = 0;
var olzerer = measly;
var upper = 6.9;
var downer = 2.9;
var foilhat = 0;
var zoom = ((Math.floor(measly/tens))*tens);
var olly = (((Math.floor(measly/tens))*tens)-tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
zuel = parseFloat(document.getElementById('pct_balance').value);
if (zuel>=(zoom+(moon*upper))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    foilhat = foilhat+1;
    zoom = parseFloat(zuel);
}
if (zuel<=(zoom-(moon*downer))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if ((couunt>=1)&&(zuel<olly)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    foilhat = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
    olzerer = parseFloat(zuel); 
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>=(olly+tens)){
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>olzerer){
  olzerer = parseFloat(zuel); 
  }
if ((zuel>=olzerer)&&(foilhat>=3)&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    foilhat = 0;
    nobbolance = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    olzerer = parseFloat(zuel); 
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((zuel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
P2FteCbn,Untitled,asurkis,Kotlin,Monday 18th of September 2023 09:33:59 AM CDT,"import java.io.File

fun grepFile(file: File, pattern: Regex) {
    file.forEachLine {
        if (pattern.matches(it)) {
            println(it)
        }
    }
}

fun grepFile(path: String, pattern: String) {
    grepFile(File(path), Regex(pattern))
}

fun grepFiles(root: File, suffix: String, pattern: Regex) {
    if (root.isFile && root.name.endsWith(suffix)) {
        grepFile(root, pattern)
        return
    }
    if (root.isDirectory) {
        for (f in root.listFiles()) {
            grepFiles(f, suffix, pattern)
        }
    }
}

fun grepFiles(rootPath: String, suffix: String, pattern: String) {
    grepFiles(File(rootPath), suffix, Regex(pattern))
}

fun main(args: Array<String>) {
    grepFiles(""src"", "".kt"", ""\\{"");
}"
sj11f0au,smart clones,OrFeAsGr,mIRC,Monday 18th of September 2023 09:30:46 AM CDT,"[17:27:13]  <@Orc> old_adel: are you really old?
[17:27:32]  <old_adel> Ha, well in the world of internet years, I guess you could call me a dinosaur
[17:27:37]  <old_adel>  But age is just a number, right? Or so they say
[17:28:01]  <@Orc> old_adel: what's ur age then?
[17:28:21]  <old_adel> Orc 53 and still kickin', chap
[17:28:26]  <old_adel>  Age ain't nothin' but a state of mind
[17:28:31]  <old_adel>  Bet I could hold my own in a dance-off with ya, Orc
[17:28:48]  <@Orc> old_adel wow where do you come from?
[17:29:06]  <old_adel> Born n' raised in the good ol' US of A, mate
[17:29:11]  <old_adel>  Land of the free and home of the brave
[17:29:16]  <old_adel>  You?"
29REr4Be,DST,baennjer,JavaScript,Monday 18th of September 2023 09:28:25 AM CDT,"// ------ Sommerzeit / Winterzeit Berechnung
//Debug Variablen---------------------------------------------------------------
var logging = true;//auf false setzen wenn keine Ausgabe im Protokoll gewünscht
var loggingText;
var loggingResult;
//Ende Debug Variablen----------------------------------------------------------

//Gewünschte Pfade und Datenpunkte hier eingeben, diese werden automatisch erstellt
var nameSpaceAndPath = '0_userdata.0.Umwelt.Astro2.'; //---der . am Ende ist wichtig
var dpDst = 'Dst'; //------------------------------------- Datenpunkt zeigt Sommerzeit oder Winterzeit an
var dpDstText = 'DstText'; //----------------------------- Anzeige als Text incl. der verbleibenden Tage
var dpDstAnfang = 'DstAnfang'; //------------------------- Anfang-Datum aktuelle Zeitart
var dpDstEnde = 'DstEnde'; //----------------------------- Ende-Datum aktuelle Zeitart
//!!!!!!!! ab hier nichts mehr ändern!!!!!!!!!!!
createState(nameSpaceAndPath+dpDst,0,{""name"":dpDst,""type"": ""number"",""states"":{""0"":""init"",""1"":""Winterzeit"",""2"":""Sommerzeit""}});
createState(nameSpaceAndPath+dpDstText,"""",{""name"":dpDstText,""type"": ""string""});
createState(nameSpaceAndPath+dpDstAnfang,"""",{""name"":dpDstAnfang,""type"": ""string""});
createState(nameSpaceAndPath+dpDstEnde,"""",{""name"":dpDstEnde,""type"": ""string""});
var anfang, ende, dst, dstText;
var rest;
var result;
var aktuell;
var i;
var mrz, mrz2, mrz3;
var okt, okt2, okt3;
var mrzB, mrzB2, mrzB3;
var oktB, oktB2, oktB3;
var idDst = nameSpaceAndPath+dpDst;
var idDstText = nameSpaceAndPath+dpDstText;
var idDstAnfang = nameSpaceAndPath+dpDstAnfang;
var idDstEnde = nameSpaceAndPath+dpDstEnde;
var jan1;


schedule(""1 3 * * *"", function(){
    f_isDST();  
});
f_isDST();  

function f_isDST(){
    aktuell = new Date(); 
    jan1 = new Date();
    jan1.setMonth(0, 1);//1.1.
    jan1.setFullYear(jan1.getFullYear());
//Märztermin finden
    for(i=25; i<32; i++){// zyklisch vom 25. bis 31. nach Sonntag suchen und das Datum mit Uhrzeit 3:00 in Variable schreiben
        mrz = new Date(); // mrz als aktuelles Datumsobjekt definieren
        mrz.setMonth(2, i); // mrz als Datum (i.3.) definieren (nur zwischen 25. und 31.3.), undefinierte Werte bleiben auf aktuellem Wert
        if(mrz.getDay() === 0){ // Ermitteln welches Datum der letzte Sonntag (0) ist
            mrz.setHours(3,0,0); // Uhrzeit von mrz auf 3:00:00 setzen
            mrz2 = mrz; //IF läuft nur einmal und zwar dann wenn das Datum des Sonntags gefunden ist. 
                    //Dann wird dies in mrz2 gespeichert während sich mrz noch weiter durch die FOR Schleife ändern kann.
        }
    }//end März
//Oktobertermin finden
    for(i=25; i<32; i++){
        okt = new Date();
        okt.setMonth(9, i);
        if(okt.getDay() === 0){
            okt.setHours(3,0,0);
            okt2 = okt;
        }
    }//end Oktober
//Märztermin im nächsten Jahr finden
    for(i=25; i<32; i++){
        mrzB = new Date();
        mrzB.setMonth(2, i);
        mrzB.setFullYear(mrzB.getFullYear()+1);//aktuelles Jahr um 1 erhöhen
        if(mrzB.getDay() === 0){
            mrzB.setHours(3,0,0);
            mrzB2 = mrzB;
        }
    }//end
//Oktobertermin im letzten Jahr finden
    for(i=25; i<32; i++){
        oktB = new Date();
        oktB.setMonth(9, i);
        oktB.setFullYear(oktB.getFullYear()-1);//aktuelles Jahr um 1 reduzieren
        if(oktB.getDay() === 0){
            oktB.setHours(3,0,0);
            oktB2 = oktB;
        }
    }//end

    if(aktuell >= mrz2 && aktuell <= okt2){// ---------------------------------------zw mrz und okt / Vergleich ob jetzt in Sommer- oder Winterzeit liegt
        result = "" - Sommerzeit"";
        dst=2;
        mrz3 = formatDate(new Date(mrz2), ""W DD.MM.JJJJ hh:mm"");
        okt3 = formatDate(new Date(okt2), ""W DD.MM.JJJJ hh:mm"");
        rest =  Math.round((okt2 - aktuell) / 86400000);
        loggingResult = mrz3 + "" bis "" + okt3 + result +"", noch "" + rest + "" Tage"";
        dstText = ""Sommerzeit (-"" + rest + ""Tg)"";
        anfang=mrz3;
        ende=okt3;
    }else if(aktuell >= jan1 && aktuell <= mrz2){//-----------------------------------zw 1. jan und mrz
        result = "" - Winterzeit"";
        dst=1;
        mrz3 = formatDate(new Date(mrz2), ""W DD.MM.JJJJ hh:mm"");
        oktB3 = formatDate(new Date(oktB2), ""W DD.MM.JJJJ hh:mm"");
        rest =  Math.round((mrz2 - aktuell) / 86400000);
        loggingResult = oktB3 + "" bis "" + mrz3 + result +"", noch "" + rest + "" Tage"";
        dstText = ""Winterzeit (-"" + rest + ""Tg)"";
        anfang=oktB3;
        ende=mrz3;
    }else{// ---------------------------------------------------------------------zw okt und 31. dez
        result = "" - Winterzeit"";
        dst=1;
        mrzB3 = formatDate(new Date(mrzB2), ""W DD.MM.JJJJ hh:mm"");
        okt3 = formatDate(new Date(okt2), ""W DD.MM.JJJJ hh:mm"");
        rest =  Math.round((mrzB2 - aktuell) / 86400000);
        loggingResult = okt3 + "" bis "" + mrzB3 + result +"", noch "" + rest + "" Tage"";
        dstText = ""Winterzeit (-"" + rest + ""Tg)"";
        anfang=okt3;
        ende=mrzB3;
    }//end if

    setState(idDst, dst, true);
    setState(idDstText, dstText, true);
    setState(idDstAnfang, anfang, true);
    setState(idDstEnde, ende, true);

//Debug Ausgabe ----------------------------------------------------------------       
    if(logging){
        loggingText = ""[Logging: ""+logging+""] "";
        log(loggingText+loggingResult, ""warn"");
    }//Ende Debug Ausgabe ----------------------------------------------------------
}//end f_isdst


"
JH9qcfKK,snowybot 3.14,coinwalk,JavaScript,Monday 18th of September 2023 09:23:52 AM CDT,"

var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((measly/800).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var foilhat = 0;
var olzerer = measly;
var upper = 6.9;
var downer = 2.9;
var zoom = ((Math.floor(measly/tens))*tens);
var olly = (((Math.floor(measly/tens))*tens)-tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
zuel = parseFloat(document.getElementById('pct_balance').value);
if (zuel>=(zoom+(moon*upper))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if (zuel<=(zoom-(moon*downer))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if ((couunt>=1)&&(zuel<olly)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
    olzerer = parseFloat(zuel); 
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>=(olly+tens)){
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>olzerer){
  olzerer = parseFloat(zuel); 
  }
if ((zuel>=olzerer)&&(couunt>=3)&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    olzerer = parseFloat(zuel); 
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((zuel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
7sj8itbu,snowybot 3.14,coinwalk,JavaScript,Monday 18th of September 2023 09:22:49 AM CDT,"

var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((measly/800).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var high = measly;  
var foilhat = 0;
var olzerer = measly;
var upper = 6.9;
var downer = 2.9;
var zoom = ((Math.floor(measly/tens))*tens);
var olly = (((Math.floor(measly/tens))*tens)-tens);
var muel = parseFloat(document.getElementById('pct_balance').value);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
zuel = parseFloat(document.getElementById('pct_balance').value);
if (zuel>=(zoom+(moon*upper))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if (zuel<=(zoom-(moon*downer))) {
    moon = Number((moon*2).toFixed(8));
    upper = 4.9;
    downer = 4.9;
    couunt = couunt+1;
    zoom = parseFloat(zuel);
}
if ((couunt>=1)&&(zuel<olly)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    moon = baby;
    couunt = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
    olzerer = parseFloat(zuel); 
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>=(olly+tens)){
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
if (zuel>olzerer){
  olzerer = parseFloat(zuel); 
  }
if ((zuel>=olzerer)&&(couunt>=3)&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    couunt = 0;
    nobbolance = 0;
    upper = 2.9;
    downer = 6.9;
    zoom = ((Math.floor((parseFloat(zuel))/tens))*tens);
    olzerer = parseFloat(zuel); 
    olly =  (((Math.floor((parseFloat(zuel))/tens))*tens)-tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((muel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
4PZJN178,shopping,denislav5,Python,Monday 18th of September 2023 09:17:51 AM CDT,"budget = float(input())
number_of_video_cards = int(input())
number_of_processors = int(input())
number_of_ram_memories = int(input())

total_video_cards = number_of_video_cards * 250
total_processors = (0.35 * total_video_cards)*number_of_processors
total_ram_memories = (0.1 * total_video_cards)*number_of_ram_memories
needed_money = total_video_cards + total_ram_memories + total_processors
if number_of_video_cards > number_of_processors:
    needed_money *= 0.85
difference = abs(budget - needed_money)
if needed_money >= budget:
    print(f""Not enough money! You need {difference:.2f} leva more!"")
else:
    print(f""You have {difference:.2f} leva left!"")"
mQ2m9Azi,Untitled,35657,C++,Monday 18th of September 2023 08:29:47 AM CDT,"#pragma once

#include <stdexcept>
#include <utility>

// Исключение этого типа должно генерироватся при обращении к пустому optional
class BadOptionalAccess : public std::exception {
public:
    using exception::exception;

    virtual const char* what() const noexcept override {
        return ""Bad optional access"";
    }
};

template <typename T, typename... S>
class Optional {
public:
    Optional() = default;

    Optional(const T& value) : ptr_(new (&data_[0]) T(value)), is_initialized_(true) {}

    Optional(T&& value) : ptr_(new (&data_[0]) T(std::move(value))), is_initialized_(true) {}

    Optional(const Optional& other) {
        if (other.is_initialized_) {
            ptr_ = new (&data_[0]) T(*other.ptr_);
            is_initialized_ = true;
        }
    }

    Optional(const Optional&& other) {
        if (other.is_initialized_) {
            ptr_ = new (&data_[0]) T(std::move(*other.ptr_));
            is_initialized_ = true;
        }
    }

    Optional& operator=(const T& value) {
        if (!is_initialized_) {
            ptr_ = new (&data_[0]) T(value);
            is_initialized_ = true;
            return *this;
        }
        *ptr_ = value;
        return *this;
    }

    Optional& operator=(T&& value) {
        if (!is_initialized_) {
            ptr_ = new (&data_[0]) T(std::move(value));
            is_initialized_ = true;
            return *this;
        }
        *ptr_ = std::move(value);
        return *this;
    }

    Optional& operator=(const Optional& rhs) {
        if (!is_initialized_) {
            if (!rhs.is_initialized_) {
                return *this;
            }
            ptr_ = new (&data_[0]) T(*rhs.ptr_);
            is_initialized_ = true;
            return *this;
        }
        if (!rhs.is_initialized_) {
            ptr_->~T();
            is_initialized_ = false;
            return *this;
        }
        *ptr_ = *rhs.ptr_;
        return *this;
    }

    Optional& operator=(Optional&& rhs) {
        if (!is_initialized_) {
            if (!rhs.is_initialized_) {
                return *this;
            }
            ptr_ = new (&data_[0]) T(std::move(*rhs.ptr_));
            is_initialized_ = true;
            return *this;
        }
        if (!rhs.is_initialized_) {
            ptr_->~T();
            is_initialized_ = false;
            return *this;
        }
        *ptr_ = std::move(*rhs.ptr_);
        return *this;
    }

    void Emplace(S&&... s) {
        if (!is_initialized_) {
            ptr_ = new (&data_[0]) T(std::forward<S>(s)...);
            is_initialized_ = true;
            return;
        }
        ptr_->~T();
        ptr_ = new (&data_[0]) T(std::forward<S>(s)...);
    }


    ~Optional() {
        if (is_initialized_) {
            ptr_->~T();
        }
    }

    bool HasValue() const {
        return is_initialized_;
    }

    // Операторы * и -> не должны делать никаких проверок на пустоту Optional.
    // Эти проверки остаются на совести программиста
    T& operator*() {
        return *ptr_;
    }

    const T& operator*() const {
        return *ptr_;
    }

    T* operator->() {
        return ptr_;
    }

    const T* operator->() const {
        return ptr_;
    }

    // Метод Value() генерирует исключение BadOptionalAccess, если Optional пуст
    T& Value() {
        if (!is_initialized_) {
            throw BadOptionalAccess();
        }
        return *ptr_;
    }
    const T& Value() const {
        if (!is_initialized_) {
            throw BadOptionalAccess();
        }
        return *ptr_;
    }

    void Reset() {
        is_initialized_ = false;
        ptr_ = nullptr;
    }

private:
    // alignas нужен для правильного выравнивания блока памяти
    alignas(T) char data_[sizeof(T)];
    T* ptr_ = nullptr;
    bool is_initialized_ = false;
};
"
47UX3PxB,Untitled,bodarev,JSON,Monday 18th of September 2023 08:04:52 AM CDT,"<svg width=""24"" height=""24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg""><path d=""M11 7.5h5m0 4h-5m5 4h-5m-3-8h.001M8 11.5h.001M8 15.5h.001M6 19.5h12a2 2 0 002-2v-12a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"" stroke=""#707176"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""/></svg>"
