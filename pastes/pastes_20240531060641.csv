id,title,username,language,date,content
iEEbRfid,Awtrix Deal-Alarm,Barney90,Python,Friday 31st of May 2024 01:03:04 AM CDT,"import feedparser
import requests
import time
import datetime

IP = ""http://192.168.1.42""  # Ersetzen durch lokale IP eurer Uhr
RSS = ""https://www.mydealz.de/rssx/keyword-alarm/XXX""  # Ersetzen durch eigenen RSS-Feed
REFRESH_INTERVAL = 60  # Wartezeit zwischen Abrufen in Sekunden
ALARM = ""Siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e""  # RTTTL-Sound f√ºr Preisfehler-Alarm
BLACKLIST = [""g√§steklo"", ""leasing""]  # Ersetzen durch eigene Begriffe, die blockiert werden sollen


def get_alert():
    """"""Ruft den Titel des neuesten Alarms aus dem RSS-Feed ab.""""""
    loop = True
    while loop:
        try:
            feed = feedparser.parse(RSS)
            entry = feed.entries[0]
            loop = False
            return entry.title
        except IndexError:
            print(""Fehler, versuche es in 10 Sekunden erneut."")
            time.sleep(10)
            pass


def blacklist_match(word):
    """"""Durchsucht String nach Begriff auf der Blacklist. True bei Treffer, ansonsten False.""""""
    for term in BLACKLIST:
        if term.lower() in word.lower():
            return True
    return False


def preisfehler_alarm():
    """"""Erh√∂ht die Aufmerksamkeit, wenn ein Preisfehler gefunden wurde.""""""
    requests.post(url=IP + ""/api/rtttl"", data=ALARM)
    preisfehler_notification = {
        ""text"": ""Preisfehler"",
        ""repeat"": 1,
        ""wakeup"": True,
        ""rainbow"": True,
        ""stack"": False,
    }
    requests.post(url=IP + ""/api/notify"", json=preisfehler_notification)
    time.sleep(3)


last_title = """"
while True:
    now = datetime.datetime.now().strftime(""%H:%M:%S"")
    print(f""{now}: Rufe Deal-Alarme ab..."")
    title = get_alert()
    if title != last_title and not blacklist_match(title):
        print(f""Neuer Deal-Alarm: {title}"")

        # Zus√§tzlicher Alarm f√ºr Preisfehler
        if ""preisfehler"" in title.lower():
            print(""Preisfehler-Alarm!"")
            preisfehler_alarm()

        # Benachrichtigung anzeigen
        notification = {
            ""text"": title,  # Titel als dargestellter Text
            ""repeat"": 2,  # Wiederholungen der Benachrichtigung
            ""icon"": 13677,  # Icon muss zuvor auf die Uhr geladen werden
            ""wakeup"": True,  # Weckt die Uhr auf, wenn das Display ausgeschaltet ist
            ""scrollSpeed"": 80,  # Scroll-Geschwindigkeit in Prozent
            ""stack"": False,  # H√∂chste Priorit√§t f√ºr neue Benachrichtigungen
         }
        requests.post(url=IP+""/api/notify"", json=notification)

        # Titel speichern, um Doppelbenachrichtigungen zu vermeiden
        last_title = title

    else:
        print(""Kein neuer Deal-Alarm."")

    # Oben definierte Zeit warten bis zum n√§chsten Abruf
    time.sleep(REFRESH_INTERVAL)
"
YGJWRwBf,Aho-Corasik modified output,maxim_shlyahtin,C++,Friday 31st of May 2024 12:45:01 AM CDT,"#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <array>
#include <utility>
#include <algorithm>

const int N = 5;
std::vector<std::string> patterns;
std::array<char, N> alphabet = { 'A', 'C', 'G', 'T', 'N' };

struct Node {
    std::map<char, Node*> son;
    std::map<char, Node*> go;
    Node* parent;
    Node* suffLink;
    Node* up;
    char charToParent;
    bool isTerminal;
    std::vector<int> leafPatternNumber;

    Node() {
        parent = NULL;
        suffLink = NULL;
        up = NULL;
        charToParent = ' ';
        isTerminal = false;
    }
};

struct Trie {
public:
    Node* root;

    Trie() {
        root = new Node();
    }

    Node* getSuffLink(Node* v) {
        if (v->suffLink == NULL) {
            if (v == root || v->parent == root) {
                v->suffLink = root;
            } else {
                v->suffLink = getLink(getSuffLink(v->parent), v->charToParent);
            }
        }
        return v->suffLink;
    }

    Node* getLink(Node* v, char c) {
        if (v->go[c] == NULL) {
            if (v->son[c]) {
                v->go[c] = v->son[c];
            } else if (v == root) {
                v->go[c] = root;
            } else {
                v->go[c] = getLink(getSuffLink(v), c);
            }
        }
        return v->go[c];
    }

    Node* getUp(Node* v) {
        if (v->up == NULL) {
            if (getSuffLink(v)->isTerminal) {
                v->up = getSuffLink(v);
            } else if (getSuffLink(v) == root) {
                v->up = root;
            } else {
                v->up = getUp(getSuffLink(v));
            }
        }
        return v->up;
    }

    void addString(const std::string& s, int patternNumber) {
        std::cout << ""/-----------------\\\n"";
        std::cout << ""Adding sample: "" << s << ""\n"";
        
        Node* curr = root;
        for (char c : s) {
            std::cout << ""current char: "" << c << ""\n"";
            if (curr->son[c] == NULL) {
                curr->son[c] = new Node();
                curr->son[c]->parent = curr;
                curr->son[c]->charToParent = c;
                std::cout << ""Adding new edge: "" << (curr - root) << ""{"" << curr->charToParent << ""} -> "" << (curr->son[c] - root) << ""{"" << c << ""}\n"";
            }
            curr = curr->son[c];
            std::cout << ""Current vertex: "" << (curr - root) << ""{"" << c << ""}\n"";
        }
        curr->isTerminal = true;
        curr->leafPatternNumber.push_back(patternNumber);
        std::cout << ""Vertex "" << (curr - root) << ""{"" << curr->charToParent << ""} marked final\n"";
        std::cout << ""Sample added "" << s << ""\n"";
        std::cout << ""\\-----------------/\n"";
    }

    void check(Node* v, int i) {
        Node* u = v;
        while (u != root) {
            if (u->isTerminal) {
                for (int patNum : u->leafPatternNumber) {
                    std::cout << ""<!> Found match at position "" << i - patterns[patNum].length() + 1 << "" of pattern "" << patterns[patNum] << ""\n"";
                }
            }
            u = getUp(u);
        }
    }

    void find_all_pos(std::string& t) {
        Node* u = root;
        for (size_t i = 0; i < t.length(); ++i) {
            std::cout << ""STATE "" << (u - root) << "" INPUT "" << t[i] << "" AT POSITION "" << i << ""\n"";
            std::cout << ""/>=>=>=>=>=>=>=>=>\\\n"";
            std::cout << ""Getting advance from vertex "" << (u - root) << ""{"" << u->charToParent << ""} by char "" << t[i] << ""\n"";
            u = getLink(u, t[i]);
            std::cout << ""Advance from vertex "" << (u - root) << ""{"" << u->charToParent << ""} by char "" << t[i] << "" is "" << (u - root) << ""{"" << t[i] << ""}\n"";
            std::cout << ""\\>=>=>=>=>=>=>=>=>/\n"";
            check(u, i + 1);
        }
    }

    void processText(std::string& s, std::vector<std::pair<int, int>>& ans) {
        std::cout << ""Input string: "" << s << ""\n"";
        Node* curr = root;
        for (size_t i = 0; i < s.length(); ++i) {
            char c = s[i];
            std::cout << ""STATE "" << (curr - root) << "" INPUT "" << c << "" AT POSITION "" << i << ""\n"";
            std::cout << ""/>=>=>=>=>=>=>=>=>\\\n"";
            std::cout << ""Getting advance from vertex "" << (curr - root) << ""{"" << curr->charToParent << ""} by char "" << c << ""\n"";
            curr = getLink(curr, c);
            std::cout << ""Advance from vertex "" << (curr - root) << ""{"" << curr->charToParent << ""} by char "" << c << "" is "" << (curr - root) << ""{"" << c << ""}\n"";
            std::cout << ""\\>=>=>=>=>=>=>=>=>/\n"";

            Node* checkNode = curr;
            while (checkNode != root) {
                std::cout << ""Follow vertex "" << (checkNode - root) << ""{"" << checkNode->charToParent << ""} for matches\n"";
                if (checkNode->isTerminal) {
                    for (auto& patNum : checkNode->leafPatternNumber) {
                        std::cout << ""<!> Found match at position "" << (i + 2 - patterns[patNum].length()) << "" of pattern "" << patterns[patNum] << ""\n"";
                        ans.push_back(std::make_pair(i + 2 - patterns[patNum].length(), patNum + 1));
                    }
                }
                std::cout << ""/->->->->->->->->->\\\n"";
                std::cout << ""Getting follow suffix link for vertex "" << (checkNode - root) << ""{"" << checkNode->charToParent << ""}\n"";
                checkNode = getUp(checkNode);
                std::cout << ""Follow suffix link for vertex "" << (checkNode - root) << ""{"" << checkNode->charToParent << ""} is "" << (checkNode - root) << ""{"" << checkNode->charToParent << ""}\n"";
                std::cout << ""\\->->->->->->->->->/\n"";
            }
        }
    }

    ~Trie() = default;

} typedef Trie;

int main() {
    Trie tr;
    std::string t;
    std::cin >> t;
    int n;
    std::cin >> n;
    for (size_t i = 0; i < n; ++i) {
        std::string str;
        std::cin >> str;
        patterns.push_back(str);
    }

    for (size_t i = 0; i < patterns.size(); ++i) {
        tr.addString(patterns[i], i);
    }
    std::vector<std::pair<int, int>> ans;
    tr.processText(t, ans);
    std::sort(ans.begin(), ans.end());
    for (const auto& it : ans) {
        std::cout << it.first << ' ' << it.second << '\n';
    }
    return 0;
}
"
AdV7VaP9,ü§ë G2A.com Free Gift Card Guide May 2024 FIX ü§ë,jusst2k4,GetText,Friday 31st of May 2024 12:05:40 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_803270.pdf

Working as of:
31 May 2024"
BQ5HK7EH,Move arquivos e apaga no diretorio fonte,MizunoBrasil,Python,Thursday 30th of May 2024 10:38:53 PM CDT,"import os
import shutil
import time
import sys
import threading
from tkinter import Tk, filedialog, messagebox, Label, Button
from tkinter.ttk import Progressbar

def center_window(window, width=400, height=150):
    """""" Centraliza a janela na tela. """"""
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    x = (screen_width / 2) - (width / 2)
    y = (screen_height / 2) - (height / 2)
    window.geometry('%dx%d+%d+%d' % (width, height, x, y))

def show_alert():
    """""" Exibe um alerta informando sobre a movimenta√ß√£o e exclus√£o dos arquivos. """"""
    confirmation = messagebox.askokcancel(""Aten√ß√£o!"", ""Os arquivos ser√£o movidos e os originais ser√£o deletados. ""
                                               ""Clique em OK para continuar ou Cancelar para sair."")
    return confirmation

def select_files():
    """""" Abre um di√°logo para selecionar arquivos. """"""
    root = Tk()
    root.withdraw()  # Evita que a janela root do Tkinter seja exibida
    file_paths = filedialog.askopenfilenames(title=""Selecione os arquivos"")
    root.destroy()
    return file_paths

def select_destination():
    """""" Abre um di√°logo para selecionar o diret√≥rio de destino. """"""
    root = Tk()
    root.withdraw()  # Evita que a janela root do Tkinter seja exibida
    dest_directory = filedialog.askdirectory(title=""Selecione o diret√≥rio de destino"")
    root.destroy()
    return dest_directory

def move_files_thread(files, destination, label, progress_bar):
    """""" Fun√ß√£o para ser executada em uma thread para mover os arquivos. """"""
    total_files = len(files)
    for index, file in enumerate(files):
        try:
            shutil.move(file, destination)
            # Atualiza a barra de progresso na interface
            progress = (index + 1) * 100 / total_files
            progress_bar['value'] = progress
            label.config(fg='green', font=('Helvetica', 10, 'bold'))
            label.update()
            time.sleep(0.5)
            label.config(fg='green', font=('Helvetica', 10))
            label.update()
            time.sleep(0.5)
        except Exception as e:
            messagebox.showerror(""Erro"", f""N√£o foi poss√≠vel mover o arquivo {file}. Erro: {e}"")
            return
    messagebox.showinfo(""Sucesso"", ""Arquivos movidos com sucesso!"")

def move_files_in_thread(files, destination, label, progress_bar):
    """""" Inicia uma thread para mover os arquivos. """"""
    thread = threading.Thread(target=move_files_thread, args=(files, destination, label, progress_bar))
    thread.start()

def main():
    root = Tk()
    root.title(""Mover Arquivos"")
    center_window(root, 400, 150)

    # Exibir alerta sobre a movimenta√ß√£o e exclus√£o dos arquivos
    confirmation = show_alert()
    if not confirmation:
        root.destroy()
        return

    label_intro = Label(root, text=""Por favor, selecione os arquivos que deseja mover:"")
    label_intro.pack(pady=5)

    button_exit = Button(root, text=""Sair"", command=root.destroy)
    button_exit.pack(pady=5)

    files = select_files()
    if not files:
        messagebox.showinfo(""Cancelado"", ""Nenhum arquivo foi selecionado."")
        root.destroy()
        return

    destination = select_destination()
    if not destination:
        messagebox.showinfo(""Cancelado"", ""Nenhum diret√≥rio de destino foi selecionado."")
        root.destroy()
        return

    label = Label(root, text=""Aguarde enquanto os arquivos est√£o sendo movidos..."")
    label.pack(pady=10)
    progress_bar = Progressbar(root, orient='horizontal', length=380, mode='determinate')
    progress_bar.pack(pady=10)

    move_files_in_thread(files, destination, label, progress_bar)
    
    root.mainloop()

if __name__ == ""__main__"":
    main()
"
FuA9AbPG,AI-GENERATE.pyw,Najeebsk,Python,Thursday 30th of May 2024 10:32:30 PM CDT,"import os
import numpy as np
import imageio.v2 as imageio
import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import rarfile

header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imageio.imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def write_file(file_path, file_bit_array):
    bytes_data = np.packbits(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def browse_rar_file():
    filename = filedialog.askopenfilename(initialdir=""/"", title=""Select RAR File"", filetypes=[(""RAR files"", ""*.rar"")])
    if filename:
        rar_entry.delete(0, tk.END)
        rar_entry.insert(0, filename)
        load_rar_file_images(filename)

def load_rar_file_images(filename):
    try:
        with rarfile.RarFile(filename) as rf:
            rf.setpassword(password_entry.get())  # Set the password for the RAR file
            file_list = rf.namelist()
            image_files = sorted([file for file in file_list if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))])
            image_dropdown['values'] = image_files
            if image_files:
                image_dropdown.current(0)
                show_image_from_rar(filename, image_files[0])
    except Exception as e:
        print(f""Failed to read RAR file: {e}"")

def show_image_from_rar(filename, image_name):
    try:
        with rarfile.RarFile(filename) as rf:
            rf.setpassword(password_entry.get())  # Set the password for the RAR file
            rf.extract(image_name, path=""TEMP_DATA"")
            extracted_image_path = os.path.join(""TEMP_DATA"", image_name)
            show_original_image(extracted_image_path)
    except Exception as e:
        print(f""Failed to extract image from RAR file: {e}"")

def show_original_image(filename):
    global original_image
    try:
        original_image = Image.open(filename)
        original_image.thumbnail((400, 400))  # Resize if needed
        update_zoom_image()  # Show the image at the initial zoom level
    except Exception as e:
        print(f""Failed to open image file: {e}"")

def browse_save_location():
    save_location = filedialog.asksaveasfilename(initialdir=""/"", title=""Select Save Location"", defaultextension="".jpg"")
    if save_location:
        save_entry_unhide.delete(0, tk.END)
        save_entry_unhide.insert(0, save_location)

def unhide_images():
    original_file = rar_entry.get()
    selected_image = image_dropdown.get()
    save_file = save_entry_unhide.get()
    password = password_entry.get()
    if not os.path.isfile(original_file):
        print(""RAR file does not exist"")
        return

    try:
        # Extract the selected image from the RAR file
        with rarfile.RarFile(original_file) as rf:
            rf.setpassword(password)  # Set the password for the RAR file
            rf.extract(selected_image, path=""TEMP_DATA"")
        extracted_image_path = os.path.join(""TEMP_DATA"", selected_image)
    except rarfile.BadRarFile:
        print(""Failed to extract RAR file. Possibly wrong password or corrupted file."")
        return

    # Proceed with the image decoding process
    encoded_data, shape_orig = read_image(extracted_image_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len + header_len]
    write_file(save_file, data)
    print(""Image decoded and saved"")

    # Simulate a progress bar effect
    progress = 0
    while progress <= 100:
        progress += 1
        unhide_progress_bar['value'] = progress
        root.update_idletasks()
        root.after(50)  # Adjust speed of progress bar

    # Load and display the saved image
    if os.path.isfile(save_file):
        try:
            global saved_image
            saved_image = Image.open(save_file)
            saved_image.thumbnail((400, 400))  # Resize if needed
            update_zoom_image_saved()  # Show the saved image at the initial zoom level
        except Exception as e:
            print(f""Failed to open saved image: {e}"")

def clear_folder(folder_path):
    try:
        # List all files in the folder
        files = os.listdir(folder_path)
        
        # Iterate through each file and delete it
        for file in files:
            file_path = os.path.join(folder_path, file)
            if os.path.isfile(file_path):
                os.remove(file_path)
        
        print(""Folder data cleared successfully."")
    except Exception as e:
        print(f""An error occurred: {e}"")

def update_zoom_image():
    try:
        zoom_factor = zoom_slider.get()
        width, height = original_image.size
        new_size = (int(width * zoom_factor), int(height * zoom_factor))
        zoomed_image = original_image.resize(new_size, Image.LANCZOS)
        zoomed_photo = ImageTk.PhotoImage(zoomed_image)
        lbl.config(image=zoomed_photo)
        lbl.image = zoomed_photo
        
        # Update the scroll region of the canvas to the new size of the image
        canvas.config(scrollregion=canvas.bbox(tk.ALL))
    except Exception as e:
        print(f""Failed to update zoom image: {e}"")

def update_zoom_image_saved():
    try:
        zoom_factor = zoom_slider_saved.get()
        width, height = saved_image.size
        new_size = (int(width * zoom_factor), int(height * zoom_factor))
        zoomed_image_saved = saved_image.resize(new_size, Image.LANCZOS)
        zoomed_photo_saved = ImageTk.PhotoImage(zoomed_image_saved)
        lbl2.config(image=zoomed_photo_saved)
        lbl2.image = zoomed_photo_saved
        
        # Update the scroll region of the canvas to the new size of the image
        canvas2.config(scrollregion=canvas2.bbox(tk.ALL))
    except Exception as e:
        print(f""Failed to update zoom image: {e}"")

# Clear folder on startup
folder_path = ""TEMP_DATA""
clear_folder(folder_path)

root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Najeeb Generate AI Images"")

# Password Entry
tk.Label(root, text=""Password:"").place(x=10, y=10)
password_entry = tk.Entry(root, show=""*"")
password_entry.place(x=80, y=10)

# Input for RAR File Selection
tk.Label(root, text=""Select RAR File:"").place(x=260, y=10)
rar_entry = tk.Entry(root)
rar_entry.place(x=360, y=10)
browse_rar_button = tk.Button(root, text=""Browse"", command=browse_rar_file)
browse_rar_button.place(x=520, y=8)

# Dropdown for RAR file images
tk.Label(root, text=""Select Image from RAR:"").place(x=600, y=10)
image_dropdown = ttk.Combobox(root, state=""readonly"")
image_dropdown.place(x=730, y=10)
image_dropdown.bind(""<<ComboboxSelected>>"", lambda e: show_image_from_rar(rar_entry.get(), image_dropdown.get()))

# Input for Save Location
tk.Label(root, text=""Select Save Location:"").place(x=10, y=50)
save_entry_unhide = tk.Entry(root)
save_entry_unhide.place(x=130, y=50)
browse_save_button = tk.Button(root, text=""Browse"", command=browse_save_location)
browse_save_button.place(x=280, y=48)

# Button to unhide images
unhide_button = tk.Button(root, text=""Generate AI Image"", command=unhide_images, bg=""#6699FF"", fg=""white"")
unhide_button.place(x=350, y=48)

# Button to Temp-Data Clear
clear_button = tk.Button(root, text=""Clear Data"", command=lambda: clear_folder(""TEMP_DATA""), bg=""#6699FF"", fg=""white"")
clear_button.place(x=480, y=48)

# Zoom Slider
tk.Label(root, text=""Zoom Image:"").place(x=560, y=50)
zoom_slider = tk.Scale(root, from_=0.1, to=10, orient=tk.HORIZONTAL, label="""", resolution=0.1, command=lambda e: update_zoom_image())
zoom_slider.set(1)
zoom_slider.place(x=650, y=38)

# Progress Bar
unhide_progress_bar = ttk.Progressbar(root, orient='horizontal', mode='determinate')
unhide_progress_bar.place(x=10, y=80, width=980)

# Frame for Original Image with Scrollbars
frame_original = tk.Frame(root, bd=3, bg=""#2c3e50"", width=480, height=540, relief=tk.GROOVE)
frame_original.place(x=5, y=110)

canvas = tk.Canvas(frame_original, bg=""#2c3e50"", width=470, height=520)
scroll_y = tk.Scrollbar(frame_original, orient=""vertical"", command=canvas.yview)
scroll_x = tk.Scrollbar(frame_original, orient=""horizontal"", command=canvas.xview)

canvas.configure(yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)

scroll_y.pack(side=""right"", fill=""y"")
scroll_x.pack(side=""bottom"", fill=""x"")
canvas.pack(side=""left"", fill=""both"", expand=True)

lbl = tk.Label(canvas, bg=""#2c3e50"")
canvas.create_window((0, 0), window=lbl, anchor=""nw"")


# Frame for Generated AI Image with Scrollbars
frame_generated = tk.Frame(root, bd=3, width=480, height=540, relief=tk.GROOVE, bg=""#34495e"")
frame_generated.place(x=505, y=110)

canvas2 = tk.Canvas(frame_generated, bg=""#34495e"", width=470, height=520)
scroll_y2 = tk.Scrollbar(frame_generated, orient=""vertical"", command=canvas2.yview)
scroll_x2 = tk.Scrollbar(frame_generated, orient=""horizontal"", command=canvas2.xview)

canvas2.configure(yscrollcommand=scroll_y2.set, xscrollcommand=scroll_x2.set)

scroll_y2.pack(side=""right"", fill=""y"")
scroll_x2.pack(side=""bottom"", fill=""x"")
canvas2.pack(side=""left"", fill=""both"", expand=True)

lbl2 = tk.Label(canvas2, bg=""#34495e"")
canvas2.create_window((0, 0), window=lbl2, anchor=""nw"")


# Zoom Slider for the saved image
tk.Label(root, text=""Zoom AI Image:"").place(x=770, y=50)
zoom_slider_saved = tk.Scale(root, from_=0.1, to=10, orient=tk.HORIZONTAL, label="""", resolution=0.1, command=lambda e: update_zoom_image_saved())
zoom_slider_saved.set(1)
zoom_slider_saved.place(x=870, y=38)

root.mainloop()
"
LbC9WgPv,AI-GENERATE2.pyw,Najeebsk,Python,Thursday 30th of May 2024 10:31:10 PM CDT,"import os
import numpy as np
import imageio.v2 as imageio
import tkinter as tk
from tkinter import filedialog, ttk
from PIL import Image, ImageTk
import rarfile

header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imageio.imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def write_file(file_path, file_bit_array):
    bytes_data = np.packbits(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def browse_rar_file():
    filename = filedialog.askopenfilename(initialdir=""/"", title=""Select RAR File"", filetypes=[(""RAR files"", ""*.rar"")])
    if filename:
        rar_entry.delete(0, tk.END)
        rar_entry.insert(0, filename)
        load_rar_file_images(filename)

def load_rar_file_images(filename):
    try:
        with rarfile.RarFile(filename) as rf:
            rf.setpassword(password_entry.get())  # Set the password for the RAR file
            file_list = rf.namelist()
            image_files = sorted([file for file in file_list if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif'))])
            image_dropdown['values'] = image_files
            if image_files:
                image_dropdown.current(0)
                show_image_from_rar(filename, image_files[0])
    except Exception as e:
        print(f""Failed to read RAR file: {e}"")

def show_image_from_rar(filename, image_name):
    try:
        with rarfile.RarFile(filename) as rf:
            rf.setpassword(password_entry.get())  # Set the password for the RAR file
            rf.extract(image_name, path=""TEMP_DATA"")
            extracted_image_path = os.path.join(""TEMP_DATA"", image_name)
            show_original_image(extracted_image_path)
    except Exception as e:
        print(f""Failed to extract image from RAR file: {e}"")

def show_original_image(filename):
    global original_image
    try:
        original_image = Image.open(filename)
        original_image.thumbnail((400, 400))  # Resize if needed
        update_zoom_image()  # Show the image at the initial zoom level
    except Exception as e:
        print(f""Failed to open image file: {e}"")

def browse_save_location():
    save_location = filedialog.asksaveasfilename(initialdir=""/"", title=""Select Save Location"", defaultextension="".jpg"")
    if save_location:
        save_entry_unhide.delete(0, tk.END)
        save_entry_unhide.insert(0, save_location)

def unhide_images():
    original_file = rar_entry.get()
    selected_image = image_dropdown.get()
    save_file = save_entry_unhide.get()
    password = password_entry.get()
    if not os.path.isfile(original_file):
        print(""RAR file does not exist"")
        return

    try:
        # Extract the selected image from the RAR file
        with rarfile.RarFile(original_file) as rf:
            rf.setpassword(password)  # Set the password for the RAR file
            rf.extract(selected_image, path=""TEMP_DATA"")
        extracted_image_path = os.path.join(""TEMP_DATA"", selected_image)
    except rarfile.BadRarFile:
        print(""Failed to extract RAR file. Possibly wrong password or corrupted file."")
        return

    # Proceed with the image decoding process
    encoded_data, shape_orig = read_image(extracted_image_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len + header_len]
    write_file(save_file, data)
    print(""Image decoded and saved"")

    # Simulate a progress bar effect
    progress = 0
    while progress <= 100:
        progress += 1
        unhide_progress_bar['value'] = progress
        root.update_idletasks()
        root.after(50)  # Adjust speed of progress bar

    # Load and display the saved image
    if os.path.isfile(save_file):
        try:
            global saved_image
            saved_image = Image.open(save_file)
            saved_image.thumbnail((400, 400))  # Resize if needed
            update_zoom_image_saved()  # Show the saved image at the initial zoom level
        except Exception as e:
            print(f""Failed to open saved image: {e}"")

def clear_folder(folder_path):
    try:
        # List all files in the folder
        files = os.listdir(folder_path)
        
        # Iterate through each file and delete it
        for file in files:
            file_path = os.path.join(folder_path, file)
            if os.path.isfile(file_path):
                os.remove(file_path)
        
        print(""Folder data cleared successfully."")
    except Exception as e:
        print(f""An error occurred: {e}"")

def update_zoom_image():
    try:
        zoom_factor = zoom_slider.get()
        width, height = original_image.size
        new_size = (int(width * zoom_factor), int(height * zoom_factor))
        zoomed_image = original_image.resize(new_size, Image.LANCZOS)
        zoomed_photo = ImageTk.PhotoImage(zoomed_image)
        lbl.config(image=zoomed_photo)
        lbl.image = zoomed_photo
        
        # Update the scroll region of the canvas to the new size of the image
        canvas.config(scrollregion=canvas.bbox(tk.ALL))
    except Exception as e:
        print(f""Failed to update zoom image: {e}"")

def update_zoom_image_saved():
    try:
        zoom_factor = zoom_slider_saved.get()
        width, height = saved_image.size
        new_size = (int(width * zoom_factor), int(height * zoom_factor))
        zoomed_image_saved = saved_image.resize(new_size, Image.LANCZOS)
        zoomed_photo_saved = ImageTk.PhotoImage(zoomed_image_saved)
        lbl2.config(image=zoomed_photo_saved)
        lbl2.image = zoomed_photo_saved
        
        # Update the scroll region of the canvas to the new size of the image
        canvas2.config(scrollregion=canvas2.bbox(tk.ALL))
    except Exception as e:
        print(f""Failed to update zoom image: {e}"")

# Clear folder on startup
folder_path = ""TEMP_DATA""
clear_folder(folder_path)

root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Najeeb Generate AI Images"")

# Password Entry
tk.Label(root, text=""Password:"").place(x=10, y=10)
password_entry = tk.Entry(root, show=""*"")
password_entry.place(x=80, y=10)

# Input for RAR File Selection
tk.Label(root, text=""Select RAR File:"").place(x=260, y=10)
rar_entry = tk.Entry(root)
rar_entry.place(x=360, y=10)
browse_rar_button = tk.Button(root, text=""Browse"", command=browse_rar_file)
browse_rar_button.place(x=520, y=8)

# Dropdown for RAR file images
tk.Label(root, text=""Select Image from RAR:"").place(x=600, y=10)
image_dropdown = ttk.Combobox(root, state=""readonly"")
image_dropdown.place(x=730, y=10)
image_dropdown.bind(""<<ComboboxSelected>>"", lambda e: show_image_from_rar(rar_entry.get(), image_dropdown.get()))

# Input for Save Location
tk.Label(root, text=""Select Save Location:"").place(x=10, y=50)
save_entry_unhide = tk.Entry(root)
save_entry_unhide.place(x=130, y=50)
browse_save_button = tk.Button(root, text=""Browse"", command=browse_save_location)
browse_save_button.place(x=280, y=48)

# Button to unhide images
unhide_button = tk.Button(root, text=""Generate AI Image"", command=unhide_images, bg=""#6699FF"", fg=""white"")
unhide_button.place(x=350, y=48)

# Button to Temp-Data Clear
clear_button = tk.Button(root, text=""Clear Data"", command=lambda: clear_folder(""TEMP_DATA""), bg=""#6699FF"", fg=""white"")
clear_button.place(x=480, y=48)

# Zoom Slider
tk.Label(root, text=""Zoom Image:"").place(x=560, y=50)
zoom_slider = tk.Scale(root, from_=0.1, to=10, orient=tk.HORIZONTAL, label="""", resolution=0.1, command=lambda e: update_zoom_image())
zoom_slider.set(1)
zoom_slider.place(x=650, y=38)

# Progress Bar
unhide_progress_bar = ttk.Progressbar(root, orient='horizontal', mode='determinate')
unhide_progress_bar.place(x=10, y=80, width=980)

# Frame for Original Image with Scrollbars
frame_original = tk.Frame(root, bd=3, bg=""#2c3e50"", width=480, height=540, relief=tk.GROOVE)
frame_original.place(x=5, y=110)

canvas = tk.Canvas(frame_original, bg=""#2c3e50"", width=470, height=520)
scroll_y = tk.Scrollbar(frame_original, orient=""vertical"", command=canvas.yview)
scroll_x = tk.Scrollbar(frame_original, orient=""horizontal"", command=canvas.xview)

canvas.configure(yscrollcommand=scroll_y.set, xscrollcommand=scroll_x.set)

scroll_y.pack(side=""right"", fill=""y"")
scroll_x.pack(side=""bottom"", fill=""x"")
canvas.pack(side=""left"", fill=""both"", expand=True)

lbl = tk.Label(canvas, bg=""#2c3e50"")
canvas.create_window((0, 0), window=lbl, anchor=""nw"")

# Frame for Generated AI Image with Scrollbars
frame_generated = tk.Frame(root, bd=3, width=480, height=540, relief=tk.GROOVE, bg=""#34495e"")
frame_generated.place(x=505, y=110)

canvas2 = tk.Canvas(frame_generated, bg=""#34495e"", width=470, height=520)
scroll_y2 = tk.Scrollbar(frame_generated, orient=""vertical"", command=canvas2.yview)
scroll_x2 = tk.Scrollbar(frame_generated, orient=""horizontal"", command=canvas2.xview)

canvas2.configure(yscrollcommand=scroll_y2.set, xscrollcommand=scroll_x2.set)

scroll_y2.pack(side=""right"", fill=""y"")
scroll_x2.pack(side=""bottom"", fill=""x"")
canvas2.pack(side=""left"", fill=""both"", expand=True)

lbl2 = tk.Label(canvas2, bg=""#34495e"")
canvas2.create_window((0, 0), window=lbl2, anchor=""nw"")


# Zoom Slider for the saved image
tk.Label(root, text=""Zoom AI Image:"").place(x=770, y=50)
zoom_slider_saved = tk.Scale(root, from_=0.1, to=10, orient=tk.HORIZONTAL, label="""", resolution=0.1, command=lambda e: update_zoom_image_saved())
zoom_slider_saved.set(1)
zoom_slider_saved.place(x=870, y=38)

root.mainloop()
"
2xszcAEF,2024_ex_ordem_transposta,gpsgiraldi,C,Thursday 30th of May 2024 10:30:32 PM CDT,"/******************************************************************************
transposta de uma matriz
*******************************************************************************/
#include <stdio.h>
#include <string.h>

int main()
{
    int i,j,m,n;
    char aux[2];
//defini√ß√£o da matriz   
    printf(""Quantas linhas ter√° a matriz?\n"");
    scanf(""%i"",&m);
    printf(""... e quantas colunas ter√° a matriz?\n"");
    scanf(""%i"",&n);
    printf(""A matriz ter√° uma ordem %ix%i \n"",m,n);
    int mat[m][n];
        
//entrada
    printf(""Insira as entradas desejadas para a matriz \n"");
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            scanf(""%i"",&mat[i][j]);
        }
    }
//sa√≠da
    printf(""\n"");
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            printf(""%i "",mat[i][j]);
        }
    printf(""\n"");
    }
//transposta
    printf(""\n"");
    for(i=0;i<n;i++){
        for(j=0;j<m;j++){
            printf(""%i "",mat[j][i]);
        }
    printf(""\n"");
    }
    return 0;
}
"
YvWsAP6b,Aho-Corasik mod,maxim_shlyahtin,C++,Thursday 30th of May 2024 10:23:34 PM CDT,"#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <array>
#include <utility>
#include <algorithm>

const int N = 5;
const char WILDCARD = '?';

std::vector<std::string> patterns;
std::array<char, N> alphabet = { 'A', 'C', 'T', 'G', 'N' };

struct Node {
    std::map<char, Node*> son;
    std::map<char, Node*> go;
    Node* parent;
    Node* suffLink;
    Node* up;
    char charToParent;
    bool isTerminal;
    std::vector<int> leafPatternNumber;

    Node() {
        son = { {alphabet[0], NULL}, {alphabet[1], NULL}, {alphabet[2], NULL}, {alphabet[3], NULL}, {alphabet[4], NULL}, };
        go = { {alphabet[0], NULL}, {alphabet[1], NULL}, {alphabet[2], NULL}, {alphabet[3], NULL}, {alphabet[4], NULL}, };
        parent = nullptr;
        suffLink = nullptr;
        up = nullptr;
        charToParent = ' ';
        isTerminal = false;
    }
};

struct Trie {
    Node* root;

    Trie() {
        root = new Node();
    }

    Node* getSuffLink(Node* v) {
        if (v->suffLink == nullptr) {
            if (v == root || v->parent == root) {
                v->suffLink = root;
            } else {
                v->suffLink = getLink(getSuffLink(v->parent), v->charToParent);
            }
        }
        return v->suffLink;
    }

    Node* getLink(Node* v, char c) {
        if (v->go[c] == nullptr) {
            if (v->son[c]) {
                v->go[c] = v->son[c];
            } else if (v == root) {
                v->go[c] = root;
            } else {
                v->go[c] = getLink(getSuffLink(v), c);
            }
        }
        return v->go[c];
    }

    Node* getUp(Node* v) {
        if (v->up == nullptr) {
            if (getSuffLink(v)->isTerminal) {
                v->up = getSuffLink(v);
            } else if (getSuffLink(v) == root) {
                v->up = root;
            } else {
                v->up = getUp(getSuffLink(v));
            }
        }
        return v->up;
    }

    void addString(const std::string& s, int patternNumber) {
        Node* curr = root;
        for (char c : s) {
            if (curr->son[c] == nullptr) {
                curr->son[c] = new Node();
                curr->son[c]->parent = curr;
                curr->son[c]->charToParent = c;
            }
            curr = curr->son[c];
        }
        curr->isTerminal = true;
        curr->leafPatternNumber.push_back(patternNumber);
    }

    void processText(const std::string& text, std::vector<std::pair<int, int>>& results) {
        Node* curr = root;
        for (size_t i = 0; i < text.length(); ++i) {
            char c = text[i];
            curr = getLink(curr, c);
            Node* checkNode = curr;
            while (checkNode != root) {
                if (checkNode->isTerminal) {
                    for (int patNum : checkNode->leafPatternNumber) {
                        results.push_back({ i + 2 - patterns[patNum].length(), patNum + 1 });
                    }
                }
                checkNode = getUp(checkNode);
            }
        }
    }
};

std::vector<int> findPatternWithWildcards(const std::string& text, const std::string& pattern, char wildcard) {
    std::vector<std::string> subPatterns;
    std::vector<int> startPositions;
    std::string currentSubPattern;
    for (size_t i = 0; i < pattern.length(); ++i) {
        if (pattern[i] == wildcard) {
            if (!currentSubPattern.empty()) {
                subPatterns.push_back(currentSubPattern);
                startPositions.push_back(i - currentSubPattern.length() + 1);
                currentSubPattern.clear();
            }
        } else {
            currentSubPattern += pattern[i];
        }
    }
    if (!currentSubPattern.empty()) {
        subPatterns.push_back(currentSubPattern);
        startPositions.push_back(pattern.length() - currentSubPattern.length() + 1);
    }

    Trie trie;
    for (size_t i = 0; i < subPatterns.size(); ++i) {
        trie.addString(subPatterns[i], i);
    }

    for (const auto& it : subPatterns) {
        patterns.push_back(it);
    }

    std::vector<std::pair<int, int>> results;
    trie.processText(text, results);

    std::vector<int> C(text.length(), 0);
    for (const auto& result : results) {
        int pos = result.first - startPositions[result.second - 1];
        if (pos >= 0 && pos + pattern.length() <= text.length()) {
            C[pos]++;
        }
    }

    std::vector<int> finalPositions;
    for (size_t i = 0; i < C.size(); ++i) {
        if (C[i] == subPatterns.size()) {
            finalPositions.push_back(i);
        }
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏—Ö—Å—è –≤—Ö–æ–∂–¥–µ–Ω–∏–π
    std::vector<int> nonOverlappingPositions;
    int lastEnd = -1;
    for (int pos : finalPositions) {
        if (pos > lastEnd) {
            nonOverlappingPositions.push_back(pos);
            lastEnd = pos + pattern.length() - 1;
        }
    }

    return nonOverlappingPositions;
}

int main() {
    std::string text;
    std::string pattern;
    char wildcard;
    std::cin >> text >> pattern >> wildcard;

    std::vector<int> positions = findPatternWithWildcards(text, pattern, wildcard);
    for (int pos : positions) {
        std::cout << pos << std::endl;
    }

    return 0;
}
"
3qrLwnbh,2024_ex_matrizes,gpsgiraldi,C,Thursday 30th of May 2024 10:18:20 PM CDT,"/***************************************
Defini√ß√£o de uma matriz
***************************************/
#include <stdio.h>

int main()
{
    int i,j,m,n,aux;
//defini√ß√£o da matriz   
    printf(""Quantas linhas ter√° a matriz?\n"");
    scanf(""%i"",&m);
    printf(""... e quantas colunas ter√° a matriz?\n"");
    scanf(""%i"",&n);
    printf(""A matriz ter√° uma ordem %ix%i \n"",m,n);
    int mat[m][n];
        
//entrada
    printf(""Insira as entradas desejadas para a matriz \n"");
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            scanf(""%i"",&mat[i][j]);
        }
    }
//sa√≠da
    for(i=0;i<m;i++){
        for(j=0;j<n;j++){
            printf(""%i "",mat[i][j]);
        }
    printf(""\n"");
    }
    return 0;
}"
95US2PwW,Procedure ATUALIZAR_ESTOQUES,info1atual,MySQL,Thursday 30th of May 2024 09:53:17 PM CDT,"CREATE DEFINER = `textil` @`%` PROCEDURE `textil_comercialtextil`.`ATUALIZAR_ESTOQUES`(
                            IN `LOJAID` INT
                            )
                            LANGUAGE SQL
                            NOT DETERMINISTIC
                            CONTAINS SQL
                            SQL SECURITY DEFINER
                            COMMENT ''
                            BEGIN
                            
                            DECLARE USAR_ESTOQUE_PECAS int;

DECLARE CONTROLE_CORES int;
DECLARE CONTROLE_VOLUMES int;
DECLARE CONTROLE_PESO_CANO int;
DECLARE USAR_ESTOQUE_PECAS int;

SELECT
	ativo
into
	CONTROLE_CORES
FROM
	configuracoes
WHERE
	config = 'ControleCores';

SELECT
	ativo
into
	CONTROLE_PESO_CANO
FROM
	configuracoes
WHERE
	config = 'ControlePesoCano';

SELECT
	ativo
into
	CONTROLE_VOLUMES
FROM
	configuracoes
WHERE
	config = 'ControleVolumes';

SELECT
	ativo
INTO
	USAR_ESTOQUE_PECAS
FROM
	configuracoes
where
	config = 'PecasProdutos';

UPDATE
	estoques
INNER JOIN (
	SELECT
		p.id,
		p.Codigo,
		p.Cor,
		p.Referencia,
		p.Descricao,
		p.Valor,
		p.Valor30,
		p.Valor60,
		p.ValorCusto,
		p.Unidade,
		Coalesce(pesocano, 0) AS PesoCano,
		p.Grupo,
		g.nome AS GrupoNome,
		LOJAID AS loja_id,
		inv.estoque AS EstoqueAtual,
		pecas.totalpecas AS TotalPecas,
		pecas.estoquepecas AS EstoquePecas,
		IF (CONTROLE_VOLUMES = 1, (SELECT CONSULTAR_ESTOQUE_VOLUMES(p.Codigo, LOJA_ID)), 0) AS VolumesPecas	
	FROM
		produtos AS p
		
	-- ------------ init var inv -----------------
	
	LEFT JOIN (
		SELECT codigo, ROUND(Sum(quantidade), 3) AS estoque
		FROM
			(
			SELECT codigo, SUM(Coalesce(if(s.movimento = 'Entrada', s.quantidade, if(s.movimento = 'Sa√≠da', s.quantidade * (-1), 0)), 0)) AS quantidade
			FROM
				submovimentoestoque s
			INNER JOIN movimentoestoque m
     		ON m.id = s.movimento_id
			WHERE
				s.loja_id = LOJAID
				AND (s.codigobarras IS NULL OR s.codigobarras = '')
			GROUP BY 1
		UNION ALL
			SELECT codigo, SUM(Coalesce(if(s.movimento = 'AjusteEntrada', s.quantidade, if(s.movimento = 'AjusteSa√≠da', s.quantidade * (-1), 0)), 0)) AS quantidade
			FROM
				submovimentoestoque s
			WHERE
				s.loja_id = LOJAID
			GROUP BY 1
		UNION ALL
			SELECT sv.codigo, if(CONTROLE_PESO_CANO = 1, SUM(Coalesce(sv.quantidade, 0) * ( -1 )), SUM(Coalesce(sv.quantidadebruta, 0) * ( -1 ))) AS quantidade
			FROM
				subpedidosvenda sv
			INNER JOIN pedidosvenda pv
            ON pv.pedido_id = sv.pedido AND pv.loja_id = LOJAID
			WHERE
				sv.loja_id = LOJAID
				AND sv.status = 0
				AND pv.status <> 'Cancelado'
				AND IF(USAR_ESTOQUE_PECAS = 1, (sv.codigobarras IS NULL OR sv.codigobarras = ''), true)
			GROUP BY 1
		UNION ALL
			SELECT sd.codigo, if(CONTROLE_PESO_CANO = 1, SUM(Coalesce(sd.quantidadebruta, 0)), SUM(Coalesce(sd.quantidadebruta, 0))) AS quantidade
			FROM
				subdevolucoes sd
			INNER JOIN devolucoes d
            ON d.id = sd.numero
			WHERE
				sd.loja_id = LOJAID
			GROUP BY 1
		UNION ALL
			SELECT spx.produto, SUM(Coalesce(pesoliquido, 0)) AS quantidade
			FROM
				subpedidoscomprax spx
			INNER JOIN pedidoscomprax px
            ON px.id = spx.pedido
			WHERE
				px.loja_id = LOJAID
			GROUP BY 1) AS inv
		GROUP BY 1) AS inv 
		ON inv.codigo = p.codigo

	-- ------------ end var inv -----------------
			
    -- ------------ init var pecas -----------------
    
	LEFT JOIN (
		SELECT 
			p.codigo, 
			count(*) as totalpecas, 
			Round(Coalesce(Sum(IF(USAR_ESTOQUE_PECAS = 1, IF(p.unidade = 'MT', pp.ultimametragem, pp.ultimopeso), 0)), 0), 3) AS estoquepecas
		FROM
			produtospecas pp
		INNER JOIN produtos p
        ON p.codigo = pp.produto
		WHERE
			IF(p.unidade = 'MT',
			pp.ultimametragem,
			pp.ultimopeso) > 0
				AND pp.loja_id = LOJAID
				AND pp.deleted_at IS NULL
			GROUP BY 1) as pecas 
		ON pecas.codigo = p.codigo
		
	-- ------------ end var pecas -----------------
	
	-- ------------ init var volumes -----------------
		
	-- LEFT JOIN (
		-- SELECT p.codigo, 
		-- SELECT CONSULTAR_ESTOQUE_VOLUMES(p.Codigo, LOJA_ID) as volumes
		-- FROM produtos p
		-- GROUP BY 1) AS volumes 
		-- ON volumes.codigo = p.codigo

	-- ------------ end var volumes -----------------

	LEFT JOIN grupos AS g
        ON p.grupo = g.id
	WHERE
		p.deleted_at IS NULL
		AND p.status = 1) AS qry 
		
    ON estoques.codigo = qry.Codigo 
    
    SET
	estoques.estoque = ROUND(coalesce(qry.EstoqueAtual, 0), 3),
	estoques.estoque_pecas = round(coalesce(qry.EstoquePecas, 0), 3),
	estoques.quantidade_pecas = coalesce(qry.TotalPecas, 0),
	estoques.volumes = coalesce(qry.VolumesPecas, 0),
	estoques.updated_at = CURRENT_TIMESTAMP
WHERE
	estoques.loja_id = LOJAID;
END"
zxEM72Yk,Aho-Corasik,maxim_shlyahtin,C++,Thursday 30th of May 2024 09:47:03 PM CDT,"#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <array>
#include <utility>
#include <algorithm>

const int N = 5;
const char WILDCARD = '?';

std::vector<std::string> patterns;
std::array<char, N> alphabet = { 'A', 'C', 'T', 'G', 'N' };

struct Node {
    std::map<char, Node*> son;
    std::map<char, Node*> go;
    Node* parent;
    Node* suffLink;
    Node* up;
    char charToParent;
    bool isTerminal;
    std::vector<int> leafPatternNumber;

    Node() {
        son = { {alphabet[0], NULL}, {alphabet[1], NULL}, {alphabet[2], NULL}, {alphabet[3], NULL}, {alphabet[4], NULL}, };
        go = { {alphabet[0], NULL}, {alphabet[1], NULL}, {alphabet[2], NULL}, {alphabet[3], NULL}, {alphabet[4], NULL}, };
        parent = nullptr;
        suffLink = nullptr;
        up = nullptr;
        charToParent = ' ';
        isTerminal = false;
    }
};

struct Trie {
    Node* root;

    Trie() {
        root = new Node();
    }

    Node* getSuffLink(Node* v) {
        if (v->suffLink == nullptr) {
            if (v == root || v->parent == root) {
                v->suffLink = root;
            }
            else {
                v->suffLink = getLink(getSuffLink(v->parent), v->charToParent);
            }
        }
        return v->suffLink;
    }

    Node* getLink(Node* v, char c) {
        if (v->go[c] == nullptr) {
            if (v->son[c]) {
                v->go[c] = v->son[c];
            }
            else if (v == root) {
                v->go[c] = root;
            }
            else {
                v->go[c] = getLink(getSuffLink(v), c);
            }
        }
        return v->go[c];
    }

    Node* getUp(Node* v) {
        if (v->up == nullptr) {
            if (getSuffLink(v)->isTerminal) {
                v->up = getSuffLink(v);
            }
            else if (getSuffLink(v) == root) {
                v->up = root;
            }
            else {
                v->up = getUp(getSuffLink(v));
            }
        }
        return v->up;
    }

    void addString(const std::string& s, int patternNumber) {
        Node* curr = root;
        for (char c : s) {
            if (curr->son[c] == nullptr) {
                curr->son[c] = new Node();
                curr->son[c]->parent = curr;
                curr->son[c]->charToParent = c;
            }
            curr = curr->son[c];
        }
        curr->isTerminal = true;
        curr->leafPatternNumber.push_back(patternNumber);
    }

    void processText(const std::string& text, std::vector<std::pair<int, int>>& results) {
        Node* curr = root;
        for (size_t i = 0; i < text.length(); ++i) {
            char c = text[i];
            curr = getLink(curr, c);
            Node* checkNode = curr;
            while (checkNode != root) {
                if (checkNode->isTerminal) {
                    for (int patNum : checkNode->leafPatternNumber) {
                        results.push_back({ i + 2 - patterns[patNum].length(), patNum + 1 });
                    }
                }
                checkNode = getUp(checkNode);
            }
        }
    }
};

std::vector<int> findPatternWithWildcards(const std::string& text, const std::string& pattern, char wildcard) {
    std::vector<std::string> subPatterns;
    std::vector<int> startPositions;
    std::string currentSubPattern;
    for (size_t i = 0; i < pattern.length(); ++i) {
        if (pattern[i] == wildcard) {
            if (!currentSubPattern.empty()) {
                subPatterns.push_back(currentSubPattern);
                startPositions.push_back(i - currentSubPattern.length() + 1);
                currentSubPattern.clear();
            }
        }
        else {
            currentSubPattern += pattern[i];
        }
    }
    if (!currentSubPattern.empty()) {
        subPatterns.push_back(currentSubPattern);
        startPositions.push_back(pattern.length() - currentSubPattern.length() + 1);
    }

    Trie trie;
    for (size_t i = 0; i < subPatterns.size(); ++i) {
        trie.addString(subPatterns[i], i);
    }

    for (const auto& it : subPatterns) {
        patterns.push_back(it);
    }

    std::vector<std::pair<int, int>> results;
    trie.processText(text, results);

    std::vector<int> C(text.length(), 0);
    for (const auto& result : results) {
        int pos = result.first - startPositions[result.second - 1];
        if (pos >= 0 && pos + pattern.length() <= text.length()) {
            C[pos]++;
        }
    }

    std::vector<int> finalPositions;
    for (size_t i = 0; i < C.size(); ++i) {
        if (C[i] == subPatterns.size()) {
            finalPositions.push_back(i);
        }
    }

    return finalPositions;
}"
NU1FFkts,ü§ë G2A.com Free Gift Card Guide May 2024 FIX üéÅ,ssss50w,GetText,Thursday 30th of May 2024 09:41:04 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
31 May 2024"
t4kXrX8V,Player RNG + V1,nikolol,Lua,Thursday 30th of May 2024 09:00:36 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/NaikoScript/Player-RNG-Plus/main/Script""))()"
SGBR0mB0,ü§ë G2A.com Free Gift Card Guide May 2024 FIX ü§ë,rickyyyyyyy,GetText,Thursday 30th of May 2024 08:47:33 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
You can use this for as long as you want and make 1,000$ a day if you got the time!
 
This is the most up to date version of this script. Any other one posted will not work!
 
Guide and steps here:
https://drive.google.com/file/d/1ZchsGnK-2K-Mv5_6oWU7Ui5JK_vByH2N/view?usp=sharing
 
Working as of: 31 May 2024 (Updates every day)
"
tCDjw2iY,diskclick_redrun.lua,JackMacWindows,Lua,Thursday 30th of May 2024 08:23:18 PM CDT,"local speaker = peripheral.find ""speaker""
if not speaker then printError(""No speaker attached"") return end
local oldFS = fs
local lastfile = nil
local clicksRemaining = 0
 
_G.fs = {
    isDriveRoot = fs.isDriveRoot,
    combine = fs.combine,
    complete = fs.complete,
    getDir = fs.getDir,
    getName = fs.getName,
    getCapacity = fs.getCapacity,
    getDrive = fs.getDrive
}
 
local function click(n)
    clicksRemaining = math.min(clicksRemaining + n, 10)
end
 
local function fn(name, n)
    _G.fs[name] = function(path, ...)
        if lastfile ~= path then
            click(n)
            lastfile = path
        end
        return oldFS[name](path, ...)
    end
end
 
fn(""attributes"", 1)
fn(""isReadOnly"", 1)
fn(""move"", 2)
fn(""getSize"", 1)
fn(""getFreeSpace"", 1)
fn(""makeDir"", 1)
fn(""list"", 3)
fn(""isDir"", 1)
fn(""exists"", 1)
fn(""delete"", 1)
fn(""open"", 2)
 
function _G.fs.copy(src, dest)
    click(math.min(math.ceil(oldFS.getSize(src) / 4096), 8))
    lastfile = nil
    return oldFS.copy(src, dest)
end
 
function _G.fs.find(wildcard)
    click(select(""#"", wildcard:match(""(%*)"")))
    lastfile = nil
    return oldFS.find(wildcard)
end
 
if turtle then
    local oldTurtle = turtle
    _G.turtle = setmetatable({}, {__index = oldTurtle})
    local function wrap(name)
        _G.turtle[name] = function()
            speaker.playNote(""snare"", 1, 0)
            return oldTurtle[name]()
        end
    end
    wrap ""forward""
    wrap ""back""
    wrap ""up""
    wrap ""down""
    wrap ""turnLeft""
    wrap ""turnRight""
end
 
speaker.playNote(""bit"", 1, 24)

local redrun = require ""redrun""
redrun.start(function()
    while true do
        if clicksRemaining > 0 then
            speaker.playNote(""hat"", 0.5, 18)
            clicksRemaining = clicksRemaining - 1
        end
        sleep(0.025)
    end
end, ""diskclick"")"
f66L1vMD,DunderMifflin HTML Meta Tags for SEO,oshkoshbagoshh,PHP,Thursday 30th of May 2024 07:21:37 PM CDT,"<!DOCTYPE html>
<html lang=""en"">

<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Dunder Mifflin Paper Company - Quality Paper Products </title>
    <meta name=""description""
        content=""Shop high-quality office supplies at Dunder Mifflin. From paper and pens to office furniture, we have everything you need to keep your office running smoothly."">
    <meta name=""author"" content=""AJ Javadi"" />
    <meta name=""keywords"" content=""paper, office supplies, Dunder Mifflin, quality paper"">
    <meta name=""robots"" content=""index, follow"">
    <link rel=""canonical"" href=""/products"">
    <meta property=""og:title"" content=""Office Supplies - Buy Paper, Pens & More | Dunder Mifflin"">
    <meta property=""og:description""
        content=""Shop high-quality office supplies at Dunder Mifflin. From paper and pens to office furniture, we have everything you need to keep your office running smoothly."">
    <meta property=""og:image"" content=""https://www.dundermifflinsupplies.com/images/office-supplies.jpg"">
    <meta property=""og:url"" content=""https://www.dundermifflinsupplies.com/office-supplies"">
    <meta name=""twitter:card"" content=""summary_large_image"">
    <meta name=""twitter:title"" content=""Office Supplies - Buy Paper, Pens & More | Dunder Mifflin"">
    <meta name=""twitter:description""
        content=""Shop high-quality office supplies at Dunder Mifflin. From paper and pens to office furniture, we have everything you need to keep your office running smoothly."">
    <meta name=""twitter:image"" content=""https://www.dundermifflinsupplies.com/images/office-supplies.jpg"">
    <link rel=""stylesheet"" href=""./styles.css"">
</head>

<body>
    <!-- BODY  -->
    <main>

        <h1> Welcome to Dunder Mifflin. </h1>

        <?php echo ('Time to clock in...'); ?>


    </main>


    <!-- END OF BODY  -->
    <script src=""./script.js""></script>
</body>

</html>"
kY3DzuAu,2024-05-30_stats.json,rdp_snitch,JSON,Thursday 30th of May 2024 07:18:30 PM CDT,"{
  ""ip"": {
    ""213.109.202.237"": 24,
    ""143.64.232.76"": 6,
    ""43.226.53.56"": 15,
    ""116.140.196.215"": 3,
    ""112.116.111.230"": 27,
    ""180.136.3.186"": 30,
    ""194.165.16.37"": 6,
    ""47.100.38.137"": 3,
    ""140.246.215.173"": 6,
    ""122.227.146.74"": 18,
    ""165.154.174.118"": 3,
    ""106.58.215.193"": 9,
    ""45.227.254.54"": 6,
    ""97.91.36.242"": 15,
    ""106.58.219.212"": 9,
    ""221.229.220.51"": 9,
    ""106.58.166.180"": 6,
    ""117.16.46.253"": 6,
    ""14.18.41.26"": 12,
    ""111.10.209.99"": 6,
    ""106.58.215.45"": 3,
    ""51.89.9.215"": 6,
    ""150.223.13.195"": 9,
    ""119.167.77.62"": 12,
    ""134.119.207.154"": 9,
    ""218.65.17.106"": 3,
    ""45.227.254.55"": 12,
    ""114.217.18.245"": 9,
    ""117.50.120.247"": 3,
    ""14.29.142.134"": 15,
    ""218.78.58.53"": 9,
    ""150.223.35.239"": 6,
    ""198.235.24.196"": 9,
    ""140.246.175.203"": 3,
    ""110.166.228.174"": 3,
    ""91.188.254.92"": 3,
    ""106.124.138.26"": 6,
    ""36.111.146.78"": 3,
    ""124.67.254.109"": 27,
    ""47.100.73.108"": 3,
    ""113.31.112.144"": 6,
    ""121.224.73.44"": 6,
    ""64.124.50.139"": 6,
    ""49.84.226.2"": 3,
    ""43.133.3.182"": 6,
    ""154.221.24.152"": 6,
    ""185.234.216.88"": 3,
    ""117.23.59.141"": 9,
    ""36.91.222.100"": 3,
    ""114.98.234.88"": 3,
    ""40.69.171.134"": 6,
    ""117.41.184.60"": 6,
    ""198.44.167.61"": 9,
    ""185.170.144.3"": 6,
    ""203.56.4.242"": 6,
    ""212.70.149.142"": 9,
    ""113.31.124.58"": 12,
    ""187.157.89.218"": 3,
    ""103.126.57.31"": 3,
    ""205.210.31.74"": 9,
    ""182.42.62.22"": 3,
    ""103.150.221.141"": 3,
    ""43.136.114.87"": 9,
    ""119.91.202.62"": 15,
    ""121.5.74.35"": 6,
    ""124.221.91.229"": 3,
    ""115.159.220.179"": 3,
    ""101.43.225.162"": 6,
    ""183.6.165.166"": 6,
    ""47.116.4.18"": 3,
    ""164.92.104.215"": 15,
    ""43.139.2.185"": 6,
    ""150.223.46.21"": 3,
    ""118.122.196.39"": 3,
    ""43.133.56.30"": 3,
    ""167.71.201.183"": 3,
    ""101.34.80.30"": 6,
    ""111.231.15.224"": 9,
    ""194.165.16.78"": 6,
    ""165.154.164.114"": 3,
    ""49.235.107.203"": 6,
    ""172.81.216.105"": 3,
    ""111.229.29.185"": 3,
    ""158.51.14.114"": 6,
    ""111.229.184.65"": 6,
    ""198.235.24.134"": 9,
    ""47.180.107.12"": 6,
    ""203.33.207.66"": 12,
    ""34.72.251.13"": 3,
    ""119.91.140.249"": 6,
    ""175.178.29.124"": 3,
    ""45.227.254.8"": 6,
    ""14.29.228.234"": 6,
    ""188.166.240.185"": 3,
    ""106.58.164.84"": 3,
    ""45.156.129.22"": 18,
    ""80.94.95.239"": 9,
    ""128.199.141.142"": 9,
    ""152.42.249.196"": 3,
    ""43.137.35.202"": 3,
    ""213.109.202.232"": 9,
    ""106.55.54.44"": 3,
    ""103.75.182.179"": 3,
    ""103.119.3.55"": 3,
    ""120.71.181.192"": 3,
    ""106.225.199.92"": 6,
    ""222.219.129.74"": 3,
    ""222.219.134.171"": 3,
    ""111.173.116.188"": 3,
    ""178.236.247.219"": 9,
    ""80.94.95.237"": 3,
    ""198.235.24.81"": 9,
    ""116.182.20.8"": 3,
    ""61.171.106.140"": 3,
    ""2.57.149.92"": 3,
    ""13.70.153.24"": 3,
    ""117.41.166.127"": 3
  },
  ""asn"": {
    ""AS208312"": 36,
    ""AS58593"": 6,
    ""AS134762"": 15,
    ""AS4837"": 42,
    ""AS4134"": 174,
    ""AS48721"": 12,
    ""AS37963"": 9,
    ""AS58519"": 51,
    ""AS135377"": 6,
    ""AS267784"": 24,
    ""AS20115"": 15,
    ""AS18031"": 6,
    ""AS58466"": 12,
    ""AS9808"": 6,
    ""AS16276"": 6,
    ""AS29066"": 9,
    ""AS23724"": 3,
    ""AS4812"": 12,
    ""AS396982"": 39,
    ""AS140061"": 3,
    ""AS15440"": 3,
    ""AS137695"": 9,
    ""AS17621"": 18,
    ""AS6461"": 6,
    ""AS132203"": 9,
    ""AS142403"": 6,
    ""AS57523"": 3,
    ""AS134768"": 9,
    ""AS7713"": 3,
    ""AS8075"": 9,
    ""AS134238"": 15,
    ""AS142032"": 9,
    ""AS197414"": 6,
    ""AS204428"": 21,
    ""AS8151"": 3,
    ""AS138107"": 3,
    ""AS140599"": 3,
    ""AS45090"": 96,
    ""AS14061"": 33,
    ""AS398465"": 6,
    ""AS5650"": 6,
    ""AS211680"": 18,
    ""AS151858"": 3,
    ""AS138968"": 3,
    ""AS148981"": 3,
    ""AS210644"": 9,
    ""AS137539"": 3
  },
  ""isp"": {
    ""Red Byte LLC"": 36,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 6,
    ""CHINANET Liaoning province Dalian MAN network"": 15,
    ""China Unicom CHINA169 Network"": 6,
    ""Chinanet"": 174,
    ""Flyservers S.A."": 36,
    ""Addresses CNNIC"": 6,
    ""Cloud Computing Corporation"": 51,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Charter Communications"": 15,
    ""Sangmyung University"": 6,
    ""China Telecom"": 18,
    ""China Mobile communications corporation"": 6,
    ""OVH SAS"": 6,
    ""CNC Group CHINA169 Shandong Province Network"": 12,
    ""velia.net Internetdienste GmbH"": 9,
    ""UCLOUD"": 21,
    ""China Telecom (Group)"": 12,
    ""Google LLC"": 39,
    ""UAB \""Baltnetos komunikacijos\"""": 3,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 9,
    ""CNC Group CHINA169 Neimeng Province Network"": 27,
    ""Zayo Bandwidth"": 6,
    ""Shenzhen Tencent Computer Systems Company Limited"": 72,
    ""Guangzhou Yisu Cloud Limited"": 6,
    ""Chang Way Technologies Co. Limited"": 3,
    ""CHINANET SHAANXI province Cloud Base network"": 9,
    ""PT Telekomunikasi Indonesia"": 3,
    ""Microsoft Corporation"": 9,
    ""CHINANET Jiangx province IDC network"": 15,
    ""High Family Technology Co., Limited"": 9,
    ""Xhost Internet Solutions LP"": 6,
    ""SS-Net"": 21,
    ""Uninet S.A. de C.V."": 3,
    ""PT Virtual Data Centra Indonesia"": 3,
    ""Comfac Corporation"": 3,
    ""China Internet Network Information Center"": 33,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 3,
    ""DigitalOcean, LLC"": 33,
    ""Aceville Pte.ltd"": 3,
    ""Rackdog, LLC"": 6,
    ""Frontier Communications Solutions"": 6,
    ""NSEC - Sistemas Informaticos, S.A."": 18,
    ""BQT"": 3,
    ""FAST"": 9
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 39,
    ""Microsoft Azure Cloud (chinanorth3)"": 6,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 15,
    ""China United Network Communications Corporation Limited"": 3,
    ""Chinanet YN"": 63,
    ""Chinanet GX"": 30,
    ""Flyservers S.A"": 12,
    ""Aliyun Computing Co., LTD"": 6,
    ""Chinanet SD"": 30,
    ""Ningbo chaoji mamawangluojishu ltd"": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""UAB Host Baltic"": 24,
    ""Spectrum"": 15,
    ""Chinanet JS"": 27,
    ""Korean Education Network"": 6,
    ""Chinanet GD"": 45,
    ""China Mobile"": 6,
    ""OVH GmbH"": 6,
    ""Unknown"": 57,
    ""Eijaj Hussain Shaikhnag"": 9,
    ""Chinanet JX"": 18,
    ""Shanghai UCloud Information Technology Company Limited"": 21,
    ""Chinanet SH"": 12,
    ""Palo Alto Networks, Inc"": 36,
    ""Chinanet QH"": 3,
    ""Space Hosting"": 3,
    ""Chinanet ZJ"": 3,
    ""Microsoft Corporation"": 6,
    ""Tencent Cloud Computing"": 6,
    ""Ancent Group Limited"": 6,
    ""Chinanet SN"": 9,
    ""Telekomunikasi Indonesia"": 3,
    ""Chinanet AH"": 3,
    ""Microsoft Azure Cloud (centralus)"": 6,
    ""VpsQuan L.L.C"": 9,
    ""Xhostis"": 6,
    ""Chinanet FJ"": 18,
    ""4Media Ltd"": 9,
    ""Uninet S.A. de C.V."": 3,
    ""PT Virtual Data Centra Indonesia"": 3,
    ""Comfac Corporation"": 3,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 33,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 60,
    ""Alibaba.com LLC"": 3,
    ""DigitalOcean, LLC"": 30,
    ""Chinanet SC"": 3,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""AB E-Commerce, LLC"": 6,
    ""FTR3 FiberOptic-S Westminster CA"": 6,
    ""Google Cloud (us-central1)"": 3,
    ""Golden-Bridge Netcom communication Co., LTD."": 3,
    ""Digitalocean"": 3,
    ""Inap CHI"": 18,
    ""Unmanaged LTD"": 12,
    ""Sakura Network Limited"": 3,
    ""Chinanet XJ"": 3,
    ""Chinanet HB"": 3,
    ""Microsoft Azure Cloud (australiasoutheast)"": 3
  },
  ""regionName"": {
    ""Moscow"": 36,
    ""Hebei"": 6,
    ""Guangdong"": 108,
    ""Beijing"": 75,
    ""Yunnan"": 63,
    ""Guangxi"": 30,
    ""Kaunas"": 12,
    ""Shanghai"": 36,
    ""Shandong"": 42,
    ""Zhejiang"": 21,
    ""England"": 9,
    ""Vilnius"": 27,
    ""Michigan"": 15,
    ""Jiangsu"": 18,
    ""Seoul"": 6,
    ""Grand Est"": 9,
    ""Jiangxi"": 18,
    ""California"": 57,
    ""Qinghai"": 3,
    ""Inner Mongolia"": 27,
    ""Washington"": 6,
    ""Tokyo"": 9,
    ""Eastern"": 6,
    ""Shanxi"": 9,
    ""Jakarta"": 6,
    ""Anhui"": 3,
    ""Iowa"": 9,
    ""Kowloon"": 9,
    ""North Holland"": 6,
    ""Fujian"": 18,
    ""Plovdiv"": 9,
    ""Mexico City"": 3,
    ""Davao Region"": 3,
    ""Sichuan"": 3,
    ""North West"": 3,
    ""Texas"": 3,
    ""Hesse"": 3,
    ""Illinois"": 24,
    ""South West"": 15,
    ""Budapest"": 12,
    ""Ho Chi Minh"": 3,
    ""Xinjiang"": 3,
    ""Hubei"": 3,
    ""Mazovia"": 9,
    ""Lesser Poland"": 3,
    ""Victoria"": 3
  },
  ""country"": {
    ""Russia"": 36,
    ""China"": 486,
    ""Lithuania"": 39,
    ""United Kingdom"": 9,
    ""United States"": 114,
    ""South Korea"": 6,
    ""France"": 9,
    ""Japan"": 9,
    ""Hong Kong"": 15,
    ""Indonesia"": 6,
    ""The Netherlands"": 6,
    ""Bulgaria"": 9,
    ""Mexico"": 3,
    ""Philippines"": 3,
    ""Singapore"": 18,
    ""Germany"": 3,
    ""Hungary"": 12,
    ""Vietnam"": 3,
    ""Poland"": 12,
    ""Australia"": 3
  },
  ""account"": {
    ""Test"": 66,
    ""142.93.8.59"": 549,
    ""(empty)"": 21,
    ""UBMTEGMYu"": 3,
    ""ndoGYU"": 3,
    ""BXKzzd"": 3,
    ""hello"": 45,
    ""Administr"": 21,
    ""Almaz"": 3,
    ""LzqbHoznb"": 3,
    ""USJRtN"": 3,
    ""SQkFHa"": 3,
    ""Administrator"": 3,
    ""Domain"": 39,
    ""HQNExqODR"": 3,
    ""efHJLQ"": 3,
    ""RCRnwx"": 3,
    ""root"": 18,
    ""uXnIDQtXI"": 3,
    ""wWHttC"": 3,
    ""esFIkt"": 3
  },
  ""keyboard"": {
    ""Unknown"": 801
  },
  ""client_build"": {
    ""Unknown"": 801
  },
  ""client_name"": {
    ""Unknown"": 801
  },
  ""ip_type"": {
    ""proxy"": 51,
    ""Unknown"": 570,
    ""hosting"": 168,
    ""mobile"": 9,
    ""hosting & proxy"": 3
  }
}"
mJyx8QA9,2024-05-30_stats.json,rdp_snitch,JSON,Thursday 30th of May 2024 07:16:16 PM CDT,"{
  ""ip"": {
    ""213.109.202.237"": 16,
    ""143.64.232.76"": 4,
    ""43.226.53.56"": 10,
    ""116.140.196.215"": 2,
    ""112.116.111.230"": 18,
    ""180.136.3.186"": 20,
    ""194.165.16.37"": 4,
    ""47.100.38.137"": 2,
    ""140.246.215.173"": 4,
    ""122.227.146.74"": 12,
    ""165.154.174.118"": 2,
    ""106.58.215.193"": 6,
    ""45.227.254.54"": 4,
    ""97.91.36.242"": 10,
    ""106.58.219.212"": 6,
    ""221.229.220.51"": 6,
    ""106.58.166.180"": 4,
    ""117.16.46.253"": 4,
    ""14.18.41.26"": 8,
    ""111.10.209.99"": 4,
    ""106.58.215.45"": 2,
    ""51.89.9.215"": 4,
    ""150.223.13.195"": 6,
    ""119.167.77.62"": 8,
    ""134.119.207.154"": 6,
    ""218.65.17.106"": 2,
    ""45.227.254.55"": 8,
    ""114.217.18.245"": 6,
    ""117.50.120.247"": 2,
    ""14.29.142.134"": 10,
    ""218.78.58.53"": 6,
    ""150.223.35.239"": 4,
    ""198.235.24.196"": 6,
    ""140.246.175.203"": 2,
    ""110.166.228.174"": 2,
    ""91.188.254.92"": 2,
    ""106.124.138.26"": 4,
    ""36.111.146.78"": 2,
    ""124.67.254.109"": 18,
    ""47.100.73.108"": 2,
    ""113.31.112.144"": 4,
    ""121.224.73.44"": 4,
    ""64.124.50.139"": 4,
    ""49.84.226.2"": 2,
    ""43.133.3.182"": 4,
    ""154.221.24.152"": 4,
    ""185.234.216.88"": 2,
    ""117.23.59.141"": 6,
    ""36.91.222.100"": 2,
    ""114.98.234.88"": 2,
    ""40.69.171.134"": 4,
    ""117.41.184.60"": 4,
    ""198.44.167.61"": 6,
    ""185.170.144.3"": 4,
    ""203.56.4.242"": 4,
    ""212.70.149.142"": 6,
    ""113.31.124.58"": 8,
    ""187.157.89.218"": 2,
    ""103.126.57.31"": 2,
    ""205.210.31.74"": 6,
    ""182.42.62.22"": 2,
    ""103.150.221.141"": 2,
    ""43.136.114.87"": 6,
    ""119.91.202.62"": 10,
    ""121.5.74.35"": 4,
    ""124.221.91.229"": 2,
    ""115.159.220.179"": 2,
    ""101.43.225.162"": 4,
    ""183.6.165.166"": 4,
    ""47.116.4.18"": 2,
    ""164.92.104.215"": 10,
    ""43.139.2.185"": 4,
    ""150.223.46.21"": 2,
    ""118.122.196.39"": 2,
    ""43.133.56.30"": 2,
    ""167.71.201.183"": 2,
    ""101.34.80.30"": 4,
    ""111.231.15.224"": 6,
    ""194.165.16.78"": 4,
    ""165.154.164.114"": 2,
    ""49.235.107.203"": 4,
    ""172.81.216.105"": 2,
    ""111.229.29.185"": 2,
    ""158.51.14.114"": 4,
    ""111.229.184.65"": 4,
    ""198.235.24.134"": 6,
    ""47.180.107.12"": 4,
    ""203.33.207.66"": 8,
    ""34.72.251.13"": 2,
    ""119.91.140.249"": 4,
    ""175.178.29.124"": 2,
    ""45.227.254.8"": 4,
    ""14.29.228.234"": 4,
    ""188.166.240.185"": 2,
    ""106.58.164.84"": 2,
    ""45.156.129.22"": 12,
    ""80.94.95.239"": 6,
    ""128.199.141.142"": 6,
    ""152.42.249.196"": 2,
    ""43.137.35.202"": 2,
    ""213.109.202.232"": 6,
    ""106.55.54.44"": 2,
    ""103.75.182.179"": 2,
    ""103.119.3.55"": 2,
    ""120.71.181.192"": 2,
    ""106.225.199.92"": 4,
    ""222.219.129.74"": 2,
    ""222.219.134.171"": 2,
    ""111.173.116.188"": 2,
    ""178.236.247.219"": 6,
    ""80.94.95.237"": 2,
    ""198.235.24.81"": 6,
    ""116.182.20.8"": 2,
    ""61.171.106.140"": 2,
    ""2.57.149.92"": 2,
    ""13.70.153.24"": 2,
    ""117.41.166.127"": 2
  },
  ""asn"": {
    ""AS208312"": 24,
    ""AS58593"": 4,
    ""AS134762"": 10,
    ""AS4837"": 28,
    ""AS4134"": 116,
    ""AS48721"": 8,
    ""AS37963"": 6,
    ""AS58519"": 34,
    ""AS135377"": 4,
    ""AS267784"": 16,
    ""AS20115"": 10,
    ""AS18031"": 4,
    ""AS58466"": 8,
    ""AS9808"": 4,
    ""AS16276"": 4,
    ""AS29066"": 6,
    ""AS23724"": 2,
    ""AS4812"": 8,
    ""AS396982"": 26,
    ""AS140061"": 2,
    ""AS15440"": 2,
    ""AS137695"": 6,
    ""AS17621"": 12,
    ""AS6461"": 4,
    ""AS132203"": 6,
    ""AS142403"": 4,
    ""AS57523"": 2,
    ""AS134768"": 6,
    ""AS7713"": 2,
    ""AS8075"": 6,
    ""AS134238"": 10,
    ""AS142032"": 6,
    ""AS197414"": 4,
    ""AS204428"": 14,
    ""AS8151"": 2,
    ""AS138107"": 2,
    ""AS140599"": 2,
    ""AS45090"": 64,
    ""AS14061"": 22,
    ""AS398465"": 4,
    ""AS5650"": 4,
    ""AS211680"": 12,
    ""AS151858"": 2,
    ""AS138968"": 2,
    ""AS148981"": 2,
    ""AS210644"": 6,
    ""AS137539"": 2
  },
  ""isp"": {
    ""Red Byte LLC"": 24,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 4,
    ""CHINANET Liaoning province Dalian MAN network"": 10,
    ""China Unicom CHINA169 Network"": 4,
    ""Chinanet"": 116,
    ""Flyservers S.A."": 24,
    ""Addresses CNNIC"": 4,
    ""Cloud Computing Corporation"": 34,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""Charter Communications"": 10,
    ""Sangmyung University"": 4,
    ""China Telecom"": 12,
    ""China Mobile communications corporation"": 4,
    ""OVH SAS"": 4,
    ""CNC Group CHINA169 Shandong Province Network"": 8,
    ""velia.net Internetdienste GmbH"": 6,
    ""UCLOUD"": 14,
    ""China Telecom (Group)"": 8,
    ""Google LLC"": 26,
    ""UAB \""Baltnetos komunikacijos\"""": 2,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 6,
    ""CNC Group CHINA169 Neimeng Province Network"": 18,
    ""Zayo Bandwidth"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 48,
    ""Guangzhou Yisu Cloud Limited"": 4,
    ""Chang Way Technologies Co. Limited"": 2,
    ""CHINANET SHAANXI province Cloud Base network"": 6,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Microsoft Corporation"": 6,
    ""CHINANET Jiangx province IDC network"": 10,
    ""High Family Technology Co., Limited"": 6,
    ""Xhost Internet Solutions LP"": 4,
    ""SS-Net"": 14,
    ""Uninet S.A. de C.V."": 2,
    ""PT Virtual Data Centra Indonesia"": 2,
    ""Comfac Corporation"": 2,
    ""China Internet Network Information Center"": 22,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 2,
    ""DigitalOcean, LLC"": 22,
    ""Aceville Pte.ltd"": 2,
    ""Rackdog, LLC"": 4,
    ""Frontier Communications Solutions"": 4,
    ""NSEC - Sistemas Informaticos, S.A."": 12,
    ""BQT"": 2,
    ""FAST"": 6
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 26,
    ""Microsoft Azure Cloud (chinanorth3)"": 4,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 10,
    ""China United Network Communications Corporation Limited"": 2,
    ""Chinanet YN"": 42,
    ""Chinanet GX"": 20,
    ""Flyservers S.A"": 8,
    ""Aliyun Computing Co., LTD"": 4,
    ""Chinanet SD"": 20,
    ""Ningbo chaoji mamawangluojishu ltd"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""UAB Host Baltic"": 16,
    ""Spectrum"": 10,
    ""Chinanet JS"": 18,
    ""Korean Education Network"": 4,
    ""Chinanet GD"": 30,
    ""China Mobile"": 4,
    ""OVH GmbH"": 4,
    ""Unknown"": 38,
    ""Eijaj Hussain Shaikhnag"": 6,
    ""Chinanet JX"": 12,
    ""Shanghai UCloud Information Technology Company Limited"": 14,
    ""Chinanet SH"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Chinanet QH"": 2,
    ""Space Hosting"": 2,
    ""Chinanet ZJ"": 2,
    ""Microsoft Corporation"": 4,
    ""Tencent Cloud Computing"": 4,
    ""Ancent Group Limited"": 4,
    ""Chinanet SN"": 6,
    ""Telekomunikasi Indonesia"": 2,
    ""Chinanet AH"": 2,
    ""Microsoft Azure Cloud (centralus)"": 4,
    ""VpsQuan L.L.C"": 6,
    ""Xhostis"": 4,
    ""Chinanet FJ"": 12,
    ""4Media Ltd"": 6,
    ""Uninet S.A. de C.V."": 2,
    ""PT Virtual Data Centra Indonesia"": 2,
    ""Comfac Corporation"": 2,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 22,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 40,
    ""Alibaba.com LLC"": 2,
    ""DigitalOcean, LLC"": 20,
    ""Chinanet SC"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""AB E-Commerce, LLC"": 4,
    ""FTR3 FiberOptic-S Westminster CA"": 4,
    ""Google Cloud (us-central1)"": 2,
    ""Golden-Bridge Netcom communication Co., LTD."": 2,
    ""Digitalocean"": 2,
    ""Inap CHI"": 12,
    ""Unmanaged LTD"": 8,
    ""Sakura Network Limited"": 2,
    ""Chinanet XJ"": 2,
    ""Chinanet HB"": 2,
    ""Microsoft Azure Cloud (australiasoutheast)"": 2
  },
  ""regionName"": {
    ""Moscow"": 24,
    ""Hebei"": 4,
    ""Guangdong"": 72,
    ""Beijing"": 50,
    ""Yunnan"": 42,
    ""Guangxi"": 20,
    ""Kaunas"": 8,
    ""Shanghai"": 24,
    ""Shandong"": 28,
    ""Zhejiang"": 14,
    ""England"": 6,
    ""Vilnius"": 18,
    ""Michigan"": 10,
    ""Jiangsu"": 12,
    ""Seoul"": 4,
    ""Grand Est"": 6,
    ""Jiangxi"": 12,
    ""California"": 38,
    ""Qinghai"": 2,
    ""Inner Mongolia"": 18,
    ""Washington"": 4,
    ""Tokyo"": 6,
    ""Eastern"": 4,
    ""Shanxi"": 6,
    ""Jakarta"": 4,
    ""Anhui"": 2,
    ""Iowa"": 6,
    ""Kowloon"": 6,
    ""North Holland"": 4,
    ""Fujian"": 12,
    ""Plovdiv"": 6,
    ""Mexico City"": 2,
    ""Davao Region"": 2,
    ""Sichuan"": 2,
    ""North West"": 2,
    ""Texas"": 2,
    ""Hesse"": 2,
    ""Illinois"": 16,
    ""South West"": 10,
    ""Budapest"": 8,
    ""Ho Chi Minh"": 2,
    ""Xinjiang"": 2,
    ""Hubei"": 2,
    ""Mazovia"": 6,
    ""Lesser Poland"": 2,
    ""Victoria"": 2
  },
  ""country"": {
    ""Russia"": 24,
    ""China"": 324,
    ""Lithuania"": 26,
    ""United Kingdom"": 6,
    ""United States"": 76,
    ""South Korea"": 4,
    ""France"": 6,
    ""Japan"": 6,
    ""Hong Kong"": 10,
    ""Indonesia"": 4,
    ""The Netherlands"": 4,
    ""Bulgaria"": 6,
    ""Mexico"": 2,
    ""Philippines"": 2,
    ""Singapore"": 12,
    ""Germany"": 2,
    ""Hungary"": 8,
    ""Vietnam"": 2,
    ""Poland"": 8,
    ""Australia"": 2
  },
  ""account"": {
    ""Test"": 44,
    ""142.93.8.59"": 366,
    ""(empty)"": 14,
    ""UBMTEGMYu"": 2,
    ""ndoGYU"": 2,
    ""BXKzzd"": 2,
    ""hello"": 30,
    ""Administr"": 14,
    ""Almaz"": 2,
    ""LzqbHoznb"": 2,
    ""USJRtN"": 2,
    ""SQkFHa"": 2,
    ""Administrator"": 2,
    ""Domain"": 26,
    ""HQNExqODR"": 2,
    ""efHJLQ"": 2,
    ""RCRnwx"": 2,
    ""root"": 12,
    ""uXnIDQtXI"": 2,
    ""wWHttC"": 2,
    ""esFIkt"": 2
  },
  ""keyboard"": {
    ""Unknown"": 534
  },
  ""client_build"": {
    ""Unknown"": 534
  },
  ""client_name"": {
    ""Unknown"": 534
  },
  ""ip_type"": {
    ""proxy"": 34,
    ""Unknown"": 380,
    ""hosting"": 112,
    ""mobile"": 6,
    ""hosting & proxy"": 2
  }
}"
h4MGbDGp,2024-05-30_stats.json,rdp_snitch,JSON,Thursday 30th of May 2024 07:15:09 PM CDT,"{
  ""ip"": {
    ""213.109.202.237"": 8,
    ""143.64.232.76"": 2,
    ""43.226.53.56"": 5,
    ""116.140.196.215"": 1,
    ""112.116.111.230"": 9,
    ""180.136.3.186"": 10,
    ""194.165.16.37"": 2,
    ""47.100.38.137"": 1,
    ""140.246.215.173"": 2,
    ""122.227.146.74"": 6,
    ""165.154.174.118"": 1,
    ""106.58.215.193"": 3,
    ""45.227.254.54"": 2,
    ""97.91.36.242"": 5,
    ""106.58.219.212"": 3,
    ""221.229.220.51"": 3,
    ""106.58.166.180"": 2,
    ""117.16.46.253"": 2,
    ""14.18.41.26"": 4,
    ""111.10.209.99"": 2,
    ""106.58.215.45"": 1,
    ""51.89.9.215"": 2,
    ""150.223.13.195"": 3,
    ""119.167.77.62"": 4,
    ""134.119.207.154"": 3,
    ""218.65.17.106"": 1,
    ""45.227.254.55"": 4,
    ""114.217.18.245"": 3,
    ""117.50.120.247"": 1,
    ""14.29.142.134"": 5,
    ""218.78.58.53"": 3,
    ""150.223.35.239"": 2,
    ""198.235.24.196"": 3,
    ""140.246.175.203"": 1,
    ""110.166.228.174"": 1,
    ""91.188.254.92"": 1,
    ""106.124.138.26"": 2,
    ""36.111.146.78"": 1,
    ""124.67.254.109"": 9,
    ""47.100.73.108"": 1,
    ""113.31.112.144"": 2,
    ""121.224.73.44"": 2,
    ""64.124.50.139"": 2,
    ""49.84.226.2"": 1,
    ""43.133.3.182"": 2,
    ""154.221.24.152"": 2,
    ""185.234.216.88"": 1,
    ""117.23.59.141"": 3,
    ""36.91.222.100"": 1,
    ""114.98.234.88"": 1,
    ""40.69.171.134"": 2,
    ""117.41.184.60"": 2,
    ""198.44.167.61"": 3,
    ""185.170.144.3"": 2,
    ""203.56.4.242"": 2,
    ""212.70.149.142"": 3,
    ""113.31.124.58"": 4,
    ""187.157.89.218"": 1,
    ""103.126.57.31"": 1,
    ""205.210.31.74"": 3,
    ""182.42.62.22"": 1,
    ""103.150.221.141"": 1,
    ""43.136.114.87"": 3,
    ""119.91.202.62"": 5,
    ""121.5.74.35"": 2,
    ""124.221.91.229"": 1,
    ""115.159.220.179"": 1,
    ""101.43.225.162"": 2,
    ""183.6.165.166"": 2,
    ""47.116.4.18"": 1,
    ""164.92.104.215"": 5,
    ""43.139.2.185"": 2,
    ""150.223.46.21"": 1,
    ""118.122.196.39"": 1,
    ""43.133.56.30"": 1,
    ""167.71.201.183"": 1,
    ""101.34.80.30"": 2,
    ""111.231.15.224"": 3,
    ""194.165.16.78"": 2,
    ""165.154.164.114"": 1,
    ""49.235.107.203"": 2,
    ""172.81.216.105"": 1,
    ""111.229.29.185"": 1,
    ""158.51.14.114"": 2,
    ""111.229.184.65"": 2,
    ""198.235.24.134"": 3,
    ""47.180.107.12"": 2,
    ""203.33.207.66"": 4,
    ""34.72.251.13"": 1,
    ""119.91.140.249"": 2,
    ""175.178.29.124"": 1,
    ""45.227.254.8"": 2,
    ""14.29.228.234"": 2,
    ""188.166.240.185"": 1,
    ""106.58.164.84"": 1,
    ""45.156.129.22"": 6,
    ""80.94.95.239"": 3,
    ""128.199.141.142"": 3,
    ""152.42.249.196"": 1,
    ""43.137.35.202"": 1,
    ""213.109.202.232"": 3,
    ""106.55.54.44"": 1,
    ""103.75.182.179"": 1,
    ""103.119.3.55"": 1,
    ""120.71.181.192"": 1,
    ""106.225.199.92"": 2,
    ""222.219.129.74"": 1,
    ""222.219.134.171"": 1,
    ""111.173.116.188"": 1,
    ""178.236.247.219"": 3,
    ""80.94.95.237"": 1,
    ""198.235.24.81"": 3,
    ""116.182.20.8"": 1,
    ""61.171.106.140"": 1,
    ""2.57.149.92"": 1,
    ""13.70.153.24"": 1,
    ""117.41.166.127"": 1
  },
  ""asn"": {
    ""AS208312"": 12,
    ""AS58593"": 2,
    ""AS134762"": 5,
    ""AS4837"": 14,
    ""AS4134"": 58,
    ""AS48721"": 4,
    ""AS37963"": 3,
    ""AS58519"": 17,
    ""AS135377"": 2,
    ""AS267784"": 8,
    ""AS20115"": 5,
    ""AS18031"": 2,
    ""AS58466"": 4,
    ""AS9808"": 2,
    ""AS16276"": 2,
    ""AS29066"": 3,
    ""AS23724"": 1,
    ""AS4812"": 4,
    ""AS396982"": 13,
    ""AS140061"": 1,
    ""AS15440"": 1,
    ""AS137695"": 3,
    ""AS17621"": 6,
    ""AS6461"": 2,
    ""AS132203"": 3,
    ""AS142403"": 2,
    ""AS57523"": 1,
    ""AS134768"": 3,
    ""AS7713"": 1,
    ""AS8075"": 3,
    ""AS134238"": 5,
    ""AS142032"": 3,
    ""AS197414"": 2,
    ""AS204428"": 7,
    ""AS8151"": 1,
    ""AS138107"": 1,
    ""AS140599"": 1,
    ""AS45090"": 32,
    ""AS14061"": 11,
    ""AS398465"": 2,
    ""AS5650"": 2,
    ""AS211680"": 6,
    ""AS151858"": 1,
    ""AS138968"": 1,
    ""AS148981"": 1,
    ""AS210644"": 3,
    ""AS137539"": 1
  },
  ""isp"": {
    ""Red Byte LLC"": 12,
    ""Shanghai Blue Cloud Technology Co., Ltd"": 2,
    ""CHINANET Liaoning province Dalian MAN network"": 5,
    ""China Unicom CHINA169 Network"": 2,
    ""Chinanet"": 58,
    ""Flyservers S.A."": 12,
    ""Addresses CNNIC"": 2,
    ""Cloud Computing Corporation"": 17,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Charter Communications"": 5,
    ""Sangmyung University"": 2,
    ""China Telecom"": 6,
    ""China Mobile communications corporation"": 2,
    ""OVH SAS"": 2,
    ""CNC Group CHINA169 Shandong Province Network"": 4,
    ""velia.net Internetdienste GmbH"": 3,
    ""UCLOUD"": 7,
    ""China Telecom (Group)"": 4,
    ""Google LLC"": 13,
    ""UAB \""Baltnetos komunikacijos\"""": 1,
    ""CHINATELECOM Xinjiang Wulumuqi MAN network"": 3,
    ""CNC Group CHINA169 Neimeng Province Network"": 9,
    ""Zayo Bandwidth"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 24,
    ""Guangzhou Yisu Cloud Limited"": 2,
    ""Chang Way Technologies Co. Limited"": 1,
    ""CHINANET SHAANXI province Cloud Base network"": 3,
    ""PT Telekomunikasi Indonesia"": 1,
    ""Microsoft Corporation"": 3,
    ""CHINANET Jiangx province IDC network"": 5,
    ""High Family Technology Co., Limited"": 3,
    ""Xhost Internet Solutions LP"": 2,
    ""SS-Net"": 7,
    ""Uninet S.A. de C.V."": 1,
    ""PT Virtual Data Centra Indonesia"": 1,
    ""Comfac Corporation"": 1,
    ""China Internet Network Information Center"": 11,
    ""Hangzhou Alibaba Advertising Co., Ltd."": 1,
    ""DigitalOcean, LLC"": 11,
    ""Aceville Pte.ltd"": 1,
    ""Rackdog, LLC"": 2,
    ""Frontier Communications Solutions"": 2,
    ""NSEC - Sistemas Informaticos, S.A."": 6,
    ""BQT"": 1,
    ""FAST"": 3
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 13,
    ""Microsoft Azure Cloud (chinanorth3)"": 2,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 5,
    ""China United Network Communications Corporation Limited"": 1,
    ""Chinanet YN"": 21,
    ""Chinanet GX"": 10,
    ""Flyservers S.A"": 4,
    ""Aliyun Computing Co., LTD"": 2,
    ""Chinanet SD"": 10,
    ""Ningbo chaoji mamawangluojishu ltd"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""UAB Host Baltic"": 8,
    ""Spectrum"": 5,
    ""Chinanet JS"": 9,
    ""Korean Education Network"": 2,
    ""Chinanet GD"": 15,
    ""China Mobile"": 2,
    ""OVH GmbH"": 2,
    ""Unknown"": 19,
    ""Eijaj Hussain Shaikhnag"": 3,
    ""Chinanet JX"": 6,
    ""Shanghai UCloud Information Technology Company Limited"": 7,
    ""Chinanet SH"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Chinanet QH"": 1,
    ""Space Hosting"": 1,
    ""Chinanet ZJ"": 1,
    ""Microsoft Corporation"": 2,
    ""Tencent Cloud Computing"": 2,
    ""Ancent Group Limited"": 2,
    ""Chinanet SN"": 3,
    ""Telekomunikasi Indonesia"": 1,
    ""Chinanet AH"": 1,
    ""Microsoft Azure Cloud (centralus)"": 2,
    ""VpsQuan L.L.C"": 3,
    ""Xhostis"": 2,
    ""Chinanet FJ"": 6,
    ""4Media Ltd"": 3,
    ""Uninet S.A. de C.V."": 1,
    ""PT Virtual Data Centra Indonesia"": 1,
    ""Comfac Corporation"": 1,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 11,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 20,
    ""Alibaba.com LLC"": 1,
    ""DigitalOcean, LLC"": 10,
    ""Chinanet SC"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""AB E-Commerce, LLC"": 2,
    ""FTR3 FiberOptic-S Westminster CA"": 2,
    ""Google Cloud (us-central1)"": 1,
    ""Golden-Bridge Netcom communication Co., LTD."": 1,
    ""Digitalocean"": 1,
    ""Inap CHI"": 6,
    ""Unmanaged LTD"": 4,
    ""Sakura Network Limited"": 1,
    ""Chinanet XJ"": 1,
    ""Chinanet HB"": 1,
    ""Microsoft Azure Cloud (australiasoutheast)"": 1
  },
  ""regionName"": {
    ""Moscow"": 12,
    ""Hebei"": 2,
    ""Guangdong"": 36,
    ""Beijing"": 25,
    ""Yunnan"": 21,
    ""Guangxi"": 10,
    ""Kaunas"": 4,
    ""Shanghai"": 12,
    ""Shandong"": 14,
    ""Zhejiang"": 7,
    ""England"": 3,
    ""Vilnius"": 9,
    ""Michigan"": 5,
    ""Jiangsu"": 6,
    ""Seoul"": 2,
    ""Grand Est"": 3,
    ""Jiangxi"": 6,
    ""California"": 19,
    ""Qinghai"": 1,
    ""Inner Mongolia"": 9,
    ""Washington"": 2,
    ""Tokyo"": 3,
    ""Eastern"": 2,
    ""Shanxi"": 3,
    ""Jakarta"": 2,
    ""Anhui"": 1,
    ""Iowa"": 3,
    ""Kowloon"": 3,
    ""North Holland"": 2,
    ""Fujian"": 6,
    ""Plovdiv"": 3,
    ""Mexico City"": 1,
    ""Davao Region"": 1,
    ""Sichuan"": 1,
    ""North West"": 1,
    ""Texas"": 1,
    ""Hesse"": 1,
    ""Illinois"": 8,
    ""South West"": 5,
    ""Budapest"": 4,
    ""Ho Chi Minh"": 1,
    ""Xinjiang"": 1,
    ""Hubei"": 1,
    ""Mazovia"": 3,
    ""Lesser Poland"": 1,
    ""Victoria"": 1
  },
  ""country"": {
    ""Russia"": 12,
    ""China"": 162,
    ""Lithuania"": 13,
    ""United Kingdom"": 3,
    ""United States"": 38,
    ""South Korea"": 2,
    ""France"": 3,
    ""Japan"": 3,
    ""Hong Kong"": 5,
    ""Indonesia"": 2,
    ""The Netherlands"": 2,
    ""Bulgaria"": 3,
    ""Mexico"": 1,
    ""Philippines"": 1,
    ""Singapore"": 6,
    ""Germany"": 1,
    ""Hungary"": 4,
    ""Vietnam"": 1,
    ""Poland"": 4,
    ""Australia"": 1
  },
  ""account"": {
    ""Test"": 22,
    ""142.93.8.59"": 183,
    ""(empty)"": 7,
    ""UBMTEGMYu"": 1,
    ""ndoGYU"": 1,
    ""BXKzzd"": 1,
    ""hello"": 15,
    ""Administr"": 7,
    ""Almaz"": 1,
    ""LzqbHoznb"": 1,
    ""USJRtN"": 1,
    ""SQkFHa"": 1,
    ""Administrator"": 1,
    ""Domain"": 13,
    ""HQNExqODR"": 1,
    ""efHJLQ"": 1,
    ""RCRnwx"": 1,
    ""root"": 6,
    ""uXnIDQtXI"": 1,
    ""wWHttC"": 1,
    ""esFIkt"": 1
  },
  ""keyboard"": {
    ""Unknown"": 267
  },
  ""client_build"": {
    ""Unknown"": 267
  },
  ""client_name"": {
    ""Unknown"": 267
  },
  ""ip_type"": {
    ""proxy"": 17,
    ""Unknown"": 190,
    ""hosting"": 56,
    ""mobile"": 3,
    ""hosting & proxy"": 1
  }
}"
1rcbnsX1,lab3,kalin729,Python,Thursday 30th of May 2024 05:46:39 PM CDT,"from __future__ import print_function
import sys
import cv2 as cv

## [global_variables]
use_mask = False
img = None
templ = None
mask = None
image_window = ""Source Image""
result_window = ""Result window""

match_method = 0
max_Trackbar = 5
## [global_variables]

def main(argv):

    if (len(sys.argv) < 3):
        print('Not enough parameters')
        print('Usage:\nmatch_template_demo.py <image_name> <template_name> [<mask_name>]')
        return -1

    ## [load_image]
    global img
    global templ
    img = cv.imread(sys.argv[1], cv.IMREAD_COLOR)
    templ = cv.imread(sys.argv[2], cv.IMREAD_COLOR)

    if (len(sys.argv) > 3):
        global use_mask
        use_mask = True
        global mask
        mask = cv.imread( sys.argv[3], cv.IMREAD_COLOR )

    if ((img is None) or (templ is None) or (use_mask and (mask is None))):
        print('Can\'t read one of the images')
        return -1
    ## [load_image]

    ## [create_windows]
    cv.namedWindow( image_window, cv.WINDOW_AUTOSIZE )
    cv.namedWindow( result_window, cv.WINDOW_AUTOSIZE )
    ## [create_windows]

    ## [create_trackbar]
    trackbar_label = 'Method: \n 0: SQDIFF \n 1: SQDIFF NORMED \n 2: TM CCORR \n 3: TM CCORR NORMED \n 4: TM COEFF \n 5: TM COEFF NORMED'
    cv.createTrackbar( trackbar_label, image_window, match_method, max_Trackbar, MatchingMethod )
    ## [create_trackbar]

    MatchingMethod(match_method)

    ## [wait_key]
    cv.waitKey(0)
    return 0
    ## [wait_key]

def MatchingMethod(param):

    global match_method
    match_method = param

    ## [copy_source]
    img_display = img.copy()
    ## [copy_source]
    ## [match_template]
    method_accepts_mask = (cv.TM_SQDIFF == match_method or match_method == cv.TM_CCORR_NORMED)
    if (use_mask and method_accepts_mask):
        result = cv.matchTemplate(img, templ, match_method, None, mask)
    else:
        result = cv.matchTemplate(img, templ, match_method)
    ## [match_template]

    ## [normalize]
    cv.normalize( result, result, 0, 1, cv.NORM_MINMAX, -1 )
    ## [normalize]
    ## [best_match]
    _minVal, _maxVal, minLoc, maxLoc = cv.minMaxLoc(result, None)
    ## [best_match]

    ## [match_loc]
    if (match_method == cv.TM_SQDIFF or match_method == cv.TM_SQDIFF_NORMED):
        matchLoc = minLoc
    else:
        matchLoc = maxLoc
    ## [match_loc]

    ## [imshow]
    cv.rectangle(img_display, matchLoc, (matchLoc[0] + templ.shape[0], matchLoc[1] + templ.shape[1]), (0,0,0), 2, 8, 0 )
    cv.rectangle(result, matchLoc, (matchLoc[0] + templ.shape[0], matchLoc[1] + templ.shape[1]), (0,0,0), 2, 8, 0 )
    cv.imshow(image_window, img_display)
    cv.imshow(result_window, result)
    ## [imshow]
    pass

if __name__ == ""__main__"":
    main(sys.argv[1:])"
5e54Qsu7,Untitled,Tanski_corp,C++,Thursday 30th of May 2024 04:00:16 PM CDT,"#include <iostream> 
#include <iomanip>
#include <Windows.h>
#include <fstream>
#include<string>
using namespace std;

void str_output(string str, ofstream& Output) {
    cout << str;
    Output << str;
}

int** create_array(int n) {
    int** arr = new int* [n];

    for (int i = 0; i < n; i++) {
        arr[i] = new int[n];
    }

    return arr;
}

int** fill(int** arr, int a, int  b, int n) {
    ofstream Output(""array.txt"");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            arr[i][j] = rand() % (b - a) + a;
            Output << arr[i][j] << "" "";
        }
        Output << endl;
    }
    Output.close();
    return arr;
}

void clear(int** arr, int n) {
    for (int i = 0; i < n; i++) {
        delete[] arr[i];
    }
    delete[] arr;
}

void output(int** arr, int n, ofstream& Output) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(5) << arr[i][j];
            Output << setw(5) << arr[i][j];
        }
        cout << ""\n"";
        Output << ""\n"";
    }
}

void symmetry(int** arr, int n) {
    for (int i = 0, m = n - 1; i < n; i++, m--) {
        swap(arr[i][i], arr[m][i]);
    }
}

void max_min(int** arr, int n, ofstream& Output) {
    int min = arr[0][0];
    int max = arr[0][0];
    for (int i = 0; i < n; i++) {
        if (max < arr[i][i]) max = arr[i][i];
        else if (min > arr[i][i]) min = arr[i][i];
    }
    str_output(""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(max) + ""\n"", Output);
    str_output(""–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(min) + ""\n"", Output);

    min = arr[n - 1][n - 1];
    max = arr[n - 1][n - 1];
    for (int i = n - 1, j = 0; i >= 0; i--, j++) {
        if (max < arr[j][i]) max = arr[j][i];
        else if (min > arr[j][i]) min = arr[j][i];
    }
    str_output(""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–±—ñ—á–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(max) + ""\n"", Output);
    str_output(""–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–±—ñ—á–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(min) + ""\n"", Output);
}

void input(int& n, int& a, int& b, ifstream& Input) {
    string temp;
    Input >> n;
    Input >> a >> b;
}

int main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    ifstream Input(""input.txt"");
    ofstream Output(""output.txt"");
    int n, a = 0, b = 0;
    input(n, a, b, Input);
    str_output(""–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ñ\n"" + to_string(n) + ""\n"", Output);
    int** arr = new int* [0];
    arr = create_array(n);
    if (a >= b) {
        str_output(""a<b"", Output);
        return 0;
    }
    str_output(""–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω a b\n"" + to_string(a) + "" "" + to_string(b) + ""\n"", Output);
    arr = fill(arr, a, b, n);
    output(arr, n, Output);
    str_output(""--------------------------\n"", Output);
    symmetry(arr, n);
    output(arr, n, Output);
    symmetry(arr, n);
    max_min(arr, n, Output);
    clear(arr, n);
    Input.close();
    Output.close();
}
"
vd8YrEmr,Untitled,Tanski_corp,C++,Thursday 30th of May 2024 03:57:13 PM CDT,"#include <iostream> 
#include <iomanip>
#include <Windows.h>
#include <fstream>
#include<string>
using namespace std;

void str_output(string str, ofstream& Output) {
    cout << str;
    Output << str;
}

int** create_array(int n) {
    int** arr = new int* [n];

    for (int i = 0; i < n; i++) {
        arr[i] = new int[n];
    }

    return arr;
}

int** fill(int** arr, int a, int  b, int n) {
    ofstream Output(""array.txt"");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            arr[i][j] = rand() % (b - a) + a;
            Output << arr[i][j] << "" "";
        }
        Output << endl;
    }
    Output.close();
    return arr;
}

void clear(int** arr, int n) {
    for (int i = 0; i < n; i++) {
        delete[] arr[i];
    }
    delete[] arr;
}

void output(int** arr, int n, ofstream& Output) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(5) << arr[i][j];
            Output << setw(5) << arr[i][j];
        }
        cout << ""\n"";
        Output << ""\n"";
    }
}

void symmetry(int** arr, int n) {
    for (int i = 0, m = n - 1; i < n; i++, m--) {
        swap(arr[i][i], arr[m][i]);
    }
}

void max_min(int** arr, int n, ofstream& Output) {
    int min = arr[0][0];
    int max = arr[0][0];
    for (int i = 0; i < n; i++) {
        if (max < arr[i][i]) max = arr[i][i];
        else if (min > arr[i][i]) min = arr[i][i];
    }
    str_output(""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(max) + ""\n"", Output);
    str_output(""–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(min) + ""\n"", Output);

    min = arr[n - 1][n - 1];
    max = arr[n - 1][n - 1];
    for (int i = n - 1, j = 0; i >= 0; i--, j++) {
        if (max < arr[j][i]) max = arr[j][i];
        else if (min > arr[j][i]) min = arr[j][i];
    }
    str_output(""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–±—ñ—á–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(max) + ""\n"", Output);
    str_output(""–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ–±—ñ—á–Ω–æ—ó –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ: "" + to_string(min) + ""\n"", Output);
}

void input(int& n, int& a, int& b, ifstream& Input) {
    string temp;
    Input >> n;
    Input >> a >> b;
}

int main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    ifstream Input(""input.txt"");
    ofstream Output(""output.txt"");
    int n, a = 0, b = 0;
    input(n, a, b, Input);
    str_output(""–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ñ\n"" + to_string(n) + ""\n"", Output);
    int** arr = new int* [0];
    arr = create_array(n);
    if (a >= b) {
        str_output(""a<b"", Output);
        return 0;
    }
    str_output(""–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω a b\n"" + to_string(a) + "" "" + to_string(b) + ""\n"", Output);
    arr = fill(arr, a, b, n);
    output(arr, n, Output);
    str_output(""--------------------------\n"", Output);
    symmetry(arr, n);
    output(arr, n, Output);
    symmetry(arr, n);
    max_min(arr, n, Output);
    clear(arr, n);
    Input.close();
    Output.close();
}"
3aUEBweY,spatrial_sample_group.py,Abhisek92,Python,Thursday 30th of May 2024 03:53:56 PM CDT,"import random
import numpy as np
import pandas as pd
import rasterio as rio
import geopandas as gpd
from sklearn.cluster import KMeans


def sample_coordinates(bool_array, n):
    true_coords = np.argwhere(bool_array)

    if len(true_coords) < n:
        return true_coords
        # raise ValueError(""Not enough True values to sample from"")

    kmeans = KMeans(n_clusters=n)
    kmeans.fit(true_coords)

    sampled_coords = list()
    for cluster_idx in range(n):
        cluster_points = true_coords[kmeans.labels_ == cluster_idx]
        sampled_point = cluster_points[random.randint(0, len(cluster_points) - 1)]
        sampled_coords.append(tuple(sampled_point))

    return np.array(sampled_coords)

def sample_raster(src_path):
    starts = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0009, 0.001, 0.002]
    stops = starts[1:] + [np.inf]
    groups = [chr(65+i) for i in range(len(starts))]
    frames = list()
    with rio.open(src_path, 'r') as src:
        forward = np.array(src.transform).reshape((3, 3))
        img = src.read(1, masked=True)
        for a, b, g in zip(starts, stops, groups):
            mask = np.logical_and((a <= img), (img < b))
            try:
                coords = sample_coordinates(mask, 15)
            except ValueError:
                print(a, b)
            vals = img[coords[:, 0], coords[:, 1]]
            coords = np.stack([coords[:, 1], coords[:, 0]], axis=1)
            coords = np.concatenate([(coords + 0.5), np.ones((coords.shape[0], 1))], axis=1)
            coords = np.einsum(
                ""ij,kj -> ki"", forward, coords
            )
            coords[:, -1] = vals
            df = pd.DataFrame(coords, columns=[""x"", ""y"", ""Value""])
            df[""Group""] = g
            gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.x, df.y))
            gdf = gdf.drop(columns=['x', 'y'])
            gdf.set_crs(crs=src.crs, inplace=True)
            frames.append(gdf)
    main_df = pd.concat(frames, ignore_index=True, axis=0)
    return main_df

if __name__ == ""__main__"":
    geo_df = sample_raster(""gs_10m_meanm.tif"")
    geo_df.to_file(filename=""Sampled_Points.geojson"", driver=""GeoJSON"")
"
GHMt9rdE,Untitled,Tanski_corp,C++,Thursday 30th of May 2024 03:52:22 PM CDT,"#include <fstream>
#include <iomanip>
#include <Windows.h>
#include <string>
#include <iostream>
#include <sstream>
#define N 10
using namespace std;

void input(int& n, int& a, int& b, ifstream& Input) {
    string temp;
    Input >> n;
    Input >> a >> b;
}

int main()
{
    //n
    //a b
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    int n = 0, a = 0, b = 0;
    string temp;
    ifstream Input(""input.txt"");
    ofstream Output(""output.txt"");
    ofstream Array(""array.txt"");
    input(n, a, b, Input);
    cout << ""–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ñ (max "" << N << ""x"" << N << "")\n"";
    Output << ""–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ñ (max "" << N << ""x"" << N << "")\n"";
    cout << n << endl;
    Output << n << endl;
    if (a >= b) {
        cout << ""a < b"";
        Output << ""a < b"";
        return 0;
    }
    int** arr = new int* [n];
    for (int i = 0; i < n; i++) {
        arr[i] = new int[n];
    }
    cout << ""–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω a b\n"";
    Output << ""–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω a b\n"";
    cout << a << "" "" << b << endl;
    Output << a << "" "" << b << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            arr[i][j] = rand() % (b - a) + a;
            cout << setw(5) << arr[i][j];
            Output << std::setw(5) << arr[i][j];
            Array << std::setw(5) << arr[i][j];
        }
        cout << ""\n"";
        Output << endl;
        Array << endl;
    }
    cout << ""--------------------------\n"";
    Output << ""--------------------------\n"";
    for (int i = 0, temp = 0; i <= n - 2; i++) {
        temp = arr[i][0];
        arr[i][0] = arr[n - 1][i + 1];
        arr[n - 1][i + 1] = temp;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(5) << arr[i][j];
            Output << setw(5) << arr[i][j];;
        }
        cout << ""\n"";
        Output << endl;
    }
    for (int i = 0; i < n; i++) {
        delete[] arr[i];
    }
    delete[] arr;
}"
7Vimk9j4,Untitled,Tanski_corp,C++,Thursday 30th of May 2024 03:51:51 PM CDT,"#include <fstream>
#include <iomanip>
#include <Windows.h>
#include <string>
#include <iostream>
#include <sstream>
#define N 10
using namespace std;

void input(int& n, int& a, int& b, ifstream& Input) {
    string temp;
    Input >> n;
    Input >> a >> b;
}

int main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    int n = 0, a = 0, b = 0;
    string temp;
    int arr[N][N];
    ifstream Input(""input.txt"");
    ofstream Output(""output.txt"");
    ofstream Array(""array.txt"");
    input(n, a, b, Input);
    if (n > N) {
        cout << ""max n = "" << N;
        return 0;
    }
    cout << ""–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ñ (max "" << N << ""x"" << N << "")\n"";
    Output << ""–í–≤–µ–¥—ñ—Ç—å —Ä–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ñ (max "" << N << ""x"" << N << "")\n"";
    cout << n << endl;
    Output << n << endl;
    if (a >= b) {
        cout << ""a < b"";
        Output << ""a < b"";
        return 0;
    }
    cout << ""–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω a b\n"";
    Output << ""–í–≤–µ–¥—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω a b\n"";
    cout << a << "" "" << b << endl;
    Output << a << "" "" << b << endl;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            arr[i][j] = rand() % (b - a) + a;
            cout << setw(5) << arr[i][j];
            Output << std::setw(5) << arr[i][j];
            Array << std::setw(5) << arr[i][j];
        }
        cout << ""\n"";
        Output << endl;
        Array << endl;
    }
    cout << ""--------------------------\n"";
    Output << ""--------------------------\n"";
    for (int i = 0, temp = 0; i <= n - 2; i++) {
        temp = arr[i][0];
        arr[i][0] = arr[n - 1][i + 1];
        arr[n - 1][i + 1] = temp;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << setw(5) << arr[i][j];
            Output << setw(5) << arr[i][j];;
        }
        cout << ""\n"";
        Output << endl;
    }
}
"
MmnpYA8D,Mess,Kambarych,C++,Thursday 30th of May 2024 03:51:28 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define For(i, n)           for(int i = 0; i < n; ++i)
#define all(x)              (x).begin(),(x).end()
#define rall(x)             (x).rbegin(),(x).rend()
#define ls(x)               x+x+1
#define rs(x)               x+x+2
#define endl                '\n'

#define ld                  long double
#define pii                 pair<int, int>
#define vt                  vector
#define ll                  long long

#define sim template < class c
#define ris return * this
#define dor > debug & operator <<
#define eni(x) sim > typename \
enable_if<sizeof dud<c>(0) x 1, debug&>::type operator<<(c i) {
sim > struct rge { c b, e; };
sim > rge<c> range(c i, c j) { return rge<c>{i, j}; }
sim > auto dud(c* x) -> decltype(cerr << *x, 0);
sim > char dud(...);
#define LOCAL
struct debug {
#ifdef LOCAL
~debug() { cerr << endl; }
eni(!=) cerr << boolalpha << i; ris; }
eni(==) ris << range(begin(i), end(i)); }
sim, class b dor(pair < b, c > d) {
ris << ""("" << d.first << "", "" << d.second << "")"";
}
sim dor(rge<c> d) {
*this << ""["";
for (auto it = d.b; it != d.e; ++it)
    *this << "", "" + 2 * (it == d.b) << *it;
ris << ""]"";
}
#else
sim dor(const c&) { ris; }
#endif
};
#define imie(...) "" ["" << #__VA_ARGS__ "": "" << (__VA_ARGS__) << ""] ""

template<typename T> void read(vt<T> & a) {For(i, a.size()) cin >> a[i];}
template<typename T> void read2(vt<vt<T> > & a) {For(i, a.size()) read(a[i]);}
template<typename T> void print(vt<T> & a) {For(i, a.size()) cout << a[i] << "" ""; cout << endl;}
template<typename T> void print2(vt<vt<T> > & a) {For(i, a.size()) print(a[i]);}

const int MAX = 1e9;
const int MOD = 1000000007;
const ll  INF = 1e18;
const ld  PI  = 3.14159265358979323846;

void solve() {
    int n, m; cin >> n >> m;
    vt<vt<pii> > g(n); 
	For(i, m) {
		int u, v, d; cin >> u >> v >> d; u--, v--;	
		g[u].push_back({v, d});
		g[v].push_back({u, d});
	}
    vt<int> dist(n), dist2(n);
    auto bfs = [&] (int u, vt<int> & dist) {
        vt<bool> used(n);
        queue<int> q;
        q.push(u);
        used[u] = true;
        while (!q.empty()) {
            int v = q.front();
            q.pop();
            for (auto [to, _] : g[v]) {
                if (used[to]) continue;
                used[to] = true;
                q.push(to);
                dist[to] = dist[v] + 1;
            }
        }
    };
    bfs(0, dist);
    bfs(n - 1, dist2);
    vt<int> mn(n, MAX), mx(n, -MAX),
            mn2(n, MAX), mx2(n, -MAX),
            p_mn(n, -1), p_mx(n, -1),
            p_mn2(n, -1), p_mx2(n, -1);
    vt<bool> need(n), need2(n);
    need[n - 1] = true;
    need2[0] = true;
    vt<bool> visited(n), visited2(n);
    auto go = [&] (auto go, int u, vt<bool> & need, vt<bool> & visited, vt<int> & dist) -> void {
        if (visited[u]) return;
        visited[u] = true;
        for (auto [to, d] : g[u]) {
            if (dist[to] == dist[u] + 1) {
                go(go, to, need, visited, dist);
                if (need[to]) {
                    need[u] = true;
                }
            }
        }
    };
    go(go, 0, need, visited, dist);
    go(go, n - 1, need2, visited2, dist2);
    auto dfs = [&] (auto dfs, int u, vt<bool> & need, vt<bool> & visited, vt<int> & mn, vt<int> & mx, vt<int> & p_mn, vt<int> & p_mx, vt<int> & dist) -> void {
        if (visited[u]) return;
        visited[u] = true;
        for (auto [to, d] : g[u]) {
            if (dist[to] == dist[u] + 1 && need[to]) {
                dfs(dfs, to, need, visited, mn, mx, p_mn, p_mx, dist);
                int v_mn = min(mn[to], d);
                int v_mx = max(mx[to], d);
                if (mn[u] > v_mn) {
                    mn[u] = v_mn;
                    p_mn[u] = to;
                }
                if (mx[u] < v_mx) {
                    mx[u] = v_mx;
                    p_mx[u] = to;
                }
            }
        }
    };
    visited = vt<bool> (n);
    visited2 = vt<bool> (n);
    dfs(dfs, 0, need, visited, mn, mx, p_mn, p_mx, dist);
    dfs(dfs, n - 1, need2, visited2, mn2, mx2, p_mn2, p_mx2, dist2);
    int ans = -1;
    for (int i = 0; i < n; i++) {
        if (mx[i] == -MAX) mx[i] = mn2[i];
        if (mn[i] == MAX) mn[i] = mx2[i];
        if (mx2[i] == -MAX) mx2[i] = mn[i];
        if (mn2[i] == MAX) mn2[i] = mx[i];
        ans = max({ans, mx[i] - mn2[i], mx2[i] - mn[i]});
    }
    int type = -1, idx = -1;
    for (int i = 0; i < n; i++) {
        if (mx[i] - mn2[i] == ans) {
            type = 1;
            idx = i;
            break;
        }
        if (mx2[i] - mn[i] == ans) {
            type = 2;
            idx = i;
            break;
        }
    }
    vt<int> res;
    if (type == 1) {
        int u = idx;
        while (true) {
            u = p_mn2[u];
            if (u == -1) break;
            res.push_back(u);
        }
        reverse(all(res));
        u = idx;
        while (u != -1) {
            res.push_back(u);
            u = p_mx[u];
        }
    } 
    else {
        int u = idx;
        while (true) {
            u = p_mx2[u];
            if (u == -1) break;
            res.push_back(u);
        }
        reverse(all(res));
        u = idx;
        while (u != -1) {
            res.push_back(u);
            u = p_mn[u];
        }
    }
    cout << res.size() - 1 << endl;
    for (int u : res) {
        cout << u + 1 << "" "";
    }
    cout << endl;
}

// THE SOLUTION IS ALWAYS SIMPLE
// THE CODE IS ALWAYS SHORT

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#ifdef DEBUG
    freopen(""output.txt"", ""w"", stdout);
    freopen(""input.txt"", ""r"", stdin);
#endif
    int T = 1;
    For(t, T) solve();
    return 0;
}"
xcQKDLN8,Exercise9,otkalce,T-SQL,Thursday 30th of May 2024 03:13:14 PM CDT,"CREATE DATABASE Exercise9
GO

USE Exercise9
GO

CREATE TABLE Genre (
  [Id] [int] IDENTITY(1,1) NOT NULL,
  [Name] [nvarchar](256) NOT NULL,
  [Description] [nvarchar](max) NOT NULL,
  PRIMARY KEY ([Id])
)
GO

SET IDENTITY_INSERT Genre ON
GO

INSERT INTO Genre (Id, [Name], [Description])
VALUES
  (1, 'Rock', 'Otherwise known as ‚ÄòRock & Roll,‚Äô rock music has been a popular genre since the early 1950s.'),
  (2, 'Jazz', 'Identifiable with blues and swing notes, Jazz has origins in European and West African culture.'),
  (3, 'Electronic Dance Music', 'Typically referred to as EDM, this type of music is created by DJs who mix a range of beats and tones to create unique music.'),
  (4, 'Dubstep', 'Dubstep is an electronic dance music subgenre that originated in the late 1990s‚Äô in South London.'),
  (5, 'Techno', 'Techno is yet another sub-genre of electronic dance music. This genre became popular in Germany towards the end of the 1980s and was heavily influenced by house music, funk, synthpop, and futuristic fiction.'),
  (6, 'Rhythm and Blues (R&B)', 'R & B is one of the world‚Äôs top music genres combining gospel, blues, and jazz influences.'),
  (7, 'Country', 'Country music is another one of the world‚Äôs top music genres. Originating in the 1920s, Country has its roots in western music and American folk.'),
  (8, 'Pop', 'The term ‚ÄòPop‚Äô is derived from the word ‚Äòpopular.‚Äô Therefore, Pop music is a genre that contains music generally favored throughout society.'),
  (9, 'Indie Rock', 'In terms of genre, Indie Rock lies somewhere between pop music and rock and roll.'),
  (10, 'Electro', 'Electro blends electronic music and hip hop to create music that is similar to disco in sound.')
GO

SET IDENTITY_INSERT Genre OFF
GO

CREATE TABLE Song (
  Id int NOT NULL IDENTITY (1, 1),
  [Name] nvarchar(256) NOT NULL,
  [Year] int NULL,
  GenreId int NOT NULL,
  DeletedAt datetime2(7) NULL,
  CONSTRAINT PK_Song
    PRIMARY KEY (Id),
  CONSTRAINT FK_Song_Genre
    FOREIGN KEY(GenreId)
    REFERENCES dbo.Genre (Id)
)

SET IDENTITY_INSERT Song ON
GO

INSERT INTO Song (Id, [Name], [Year], GenreId, DeletedAt)
VALUES
  (1, 'A-ha - Take On Me', 1985, 8, NULL),
  (2, 'Tina Turner - What''s Love Got to Do with It', 1984, 8, NULL),
  (3, 'Van Halen - Jump', 1984, 1, NULL),
  (4, 'Franz Ferdinand - Take Me Out', 2004, 9, NULL),
  (5, 'DJ Snake - Lean On', 2015, 10, NULL),
  (6, 'Louis Armstrong - What a Wonderful World', 1967, 2, NULL),
  (7, 'Deleted Song', 1967, 2, '2024-04-27 11:41:00')
GO

SET IDENTITY_INSERT Song OFF
GO"
D27Ee22w,Untitled,Tanski_corp,C++,Thursday 30th of May 2024 02:55:07 PM CDT,"#include <iostream>
#include <string>
#include <algorithm>
#define N 3
using namespace std;

struct movie {
    string name;
    double price;
    string director;

    void input() {
        getline(cin, name);
        cout << endl << ""Director: "";
        getline(cin, director);
        cout << endl << ""Price: "";
        cin >> price;
        cin.ignore();
        cout << endl;
    }

    void output() {
        cout << name << endl;
        cout << director << endl;
        cout << price << endl;
        cout << ""------------------------------\n"";
    }
};

int main()
{
    movie* videot = new movie[N];
    int avg_price = 0, min_price = 0, max_price = 0;
    double total_price = 0;
    for (int i = 0; i < N; i++) {
        cout << ""Name of "" << i + 1 << "" movie: "";
        videot[i].input();
        total_price += videot[i].price;
        if (videot[i].price > videot[max_price].price) max_price = i;
        if (videot[i].price < videot[min_price].price) min_price = i;
    }
    avg_price = total_price / N;
    cout << ""------------------------------\n"";
    cout << ""Movie with max price:\n"";
    videot[max_price].output();
    cout << ""Movie with min price:\n"";
    videot[min_price].output();
    cout << ""Movie(s) with price more than avg:\n"";
    for (int i = 0; i < N; i++) {
        if (videot[i].price > avg_price) {
            videot[i].output();
        }
    }
}
"
KCej8Z5Q,server_byte_stuffing_demo,Python253,Python,Thursday 30th of May 2024 02:46:38 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: server_byte_stuffing_demo.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script demonstrates a byte-stuffing algorithm and a TCP server function to process byte-stuffed data over TCP.
    - Byte stuffing is a technique used in data transmission to avoid ambiguity caused by control characters.
    - The script showcases how byte stuffing can be applied to data and how a server can handle byte-stuffed data over TCP.

Requirements:
    - Python 3.x

Functions:
    - byte_stuffing(data):
        Performs byte stuffing on the input data.
    - process_data(data):
        Processes the byte-stuffed data received from the client.
    - start_server(host, port, duration, received_data_list):
        Starts a TCP server that listens for incoming connections from clients and processes byte-stuffed data for a specified duration.
    - send_data(host, port, data):
        Sends byte-stuffed data to the server.
    - save_output(output, received_data_list):
        Saves the terminal output and received data to a file.
    - main():
        Main function to automate the process of starting the server, sending data, and handling user interaction for saving output.

Expected Example Output:

        Byte-stuffed data: 017d5e027d5d03

        Server listening on 127.0.0.1:1337...

        Data sent to the server: b'\x01}^\x02}]\x03'

        Connection from ('127.0.0.1', 52261)

        Processed data: b'\x01~\x02}\x03'

        Received data from the server: b'\x01~\x02}\x03'

        Output saved successfully!

        Received:       017e027d03

        Sent:       017d5e027d5d03
        Received:       017e027d03

Additional Notes:
    - This script is for demonstration purposes only and does not represent a full-fledged server implementation.
""""""

import socket
import threading
import time
import logging
from typing import List, Tuple

def byte_stuffing(data: bytes) -> bytes:
    """"""
    Performs byte stuffing on the input data.

    Args:
        data (bytes): The input data to be byte-stuffed.

    Returns:
        bytes: The byte-stuffed data.
    """"""
    stuffed_data = []
    for byte in data:
        if byte in (0x7E, 0x7D):
            stuffed_data.append(
                0x7D
            )  # Byte stuffing: Replace 0x7E and 0x7D with 0x7D, 0x5E and 0x5D respectively
            stuffed_data.append(byte ^ 0x20)  # XOR with 0x20 to toggle the fifth bit
        else:
            stuffed_data.append(byte)
    return bytes(stuffed_data)

def process_data(data: bytes) -> bytes:
    """"""
    Processes the byte-stuffed data received from the client.

    Args:
        data (bytes): The byte-stuffed data received from the client.

    Returns:
        bytes: The processed data.
    """"""
    processed_data = []
    escape_next = False
    for byte in data:
        if escape_next:
            processed_data.append(
                byte ^ 0x20
            )  # XOR with 0x20 to remove the escape character
            escape_next = False
        elif byte == 0x7D:
            escape_next = True  # Set escape_next flag if 0x7D is encountered
        else:
            processed_data.append(byte)
    return bytes(processed_data)

def start_server(
    host: str, port: int, duration: int, received_data_list: List[Tuple[bytes, bytes]]
):
    """"""
    Starts a TCP server that listens for incoming connections from clients and processes byte-stuffed data for a specified duration.

    Args:
        host (str): The IP address or hostname of the server.
        port (int): The port number on which the server listens.
        duration (int): The duration (in seconds) for which the server should run.
        received_data_list (List[Tuple[bytes, bytes]]): A list to store the received data and processed data.
    """"""
    start_time = time.time()  # Record the start time
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as server_socket:
        server_socket.bind((host, port))  # Bind the socket to the host and port
        server_socket.listen(
            5
        )  # Start listening for incoming connections, with a backlog of 5

        logging.info(
            f""\nServer listening on {host}:{port}...""
        )  # Log the server listening status

        # Loop until the specified duration is reached
        while (time.time() - start_time) < duration:
            # Set the timeout for the server socket
            server_socket.settimeout(duration - (time.time() - start_time))
            try:
                # Accept incoming connection and get the client socket and address
                client_socket, client_address = server_socket.accept()
                logging.info(
                    f""\nConnection from {client_address}""
                )  # Log the connection

                with client_socket:
                    # Loop until the client closes the connection
                    while True:
                        data = client_socket.recv(1024)  # Receive data from the client
                        if not data:
                            break  # Break the loop if no data is received

                        if data.startswith(b""GET""):
                            logging.info(
                                f""\nReceived HTTP request: {data!r}""
                            )  # Log HTTP request
                            continue  # Skip processing if it's an HTTP request

                        processed_data = process_data(data)  # Process received data
                        logging.info(
                            f""\nProcessed data: {processed_data!r}""
                        )  # Log processed data

                        received_data_list.append(
                            (data, processed_data)
                        )  # Append to received data list
                        client_socket.sendall(
                            processed_data
                        )  # Send processed data back to the client
            except socket.timeout:
                break  # Break the loop if timeout occurs
            except ConnectionResetError:
                logging.warning(
                    ""\nConnection was reset by the client!""
                )  # Log connection reset by client
                continue  # Continue to the next iteration of the loop

def send_data(host: str, port: int, data: bytes) -> bytes:
    """"""
    Sends byte-stuffed data to the server.

    Args:
        host (str): The IP address or hostname of the server.
        port (int): The port number on which the server is listening.
        data (bytes): The byte-stuffed data to be sent to the server.

    Returns:
        bytes: The received data from the server.
    """"""
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client_socket:
        try:
            client_socket.connect((host, port))  # Connect to the server
            client_socket.sendall(data)  # Send the byte-stuffed data
            logging.info(f""\nData sent to the server: {data!r}"")  # Log the sent data
            received_data = client_socket.recv(1024)  # Receive data from the server
            logging.info(
                f""\nReceived data from the server: {received_data!r}""
            )  # Log the received data
            return received_data  # Return the received data
        except ConnectionResetError:
            logging.warning(
                ""\nConnection was reset by the server!""
            )  # Log connection reset by server
            raise  # Raise an exception instead of returning None

def save_output(output: str, received_data_list: List[Tuple[bytes, bytes]]):
    """"""
    Save the terminal output and received data to a file, excluding specific lines.

    Args:
        output (str): The terminal output to be saved.
        received_data_list (List[Tuple[bytes, bytes]]): A list containing tuples of sent and received byte-stuffed data.

    Notes:
        Lines containing the specified exclusion patterns are not written to the output file.
    """"""
    lines_to_exclude = [
        ""027d5d03"",
        ""Received:    017e027d03"",
    ]  # Lines to exclude from output
    output_lines = output.split(""\n"")  # Split the output into lines
    with open(""output.txt"", ""a"", encoding=""utf-8"") as file:
        for line in output_lines:
            if not any(exclude_line in line for exclude_line in lines_to_exclude):
                file.write(line + ""\n"")  # Write the line to the output file

        # Write received data
        for sent, received in received_data_list:
            if received is not None:
                file.write(f""Sent:       {sent.hex()}\n"")  # Write sent data to the file
                file.write(
                    f""Received:       {received.hex()}\n\n""
                )  # Write received data to the file

def main():
    """"""
    Main function to automate the process of starting the server, sending data, and handling user interaction for saving output.
    """"""
    # Define server parameters
    HOST = ""127.0.0.1""
    PORT = 1337
    DURATION = 1

    # Prepare test data for byte-stuffing
    test_data = bytes([0x01, 0x7E, 0x02, 0x7D, 0x03])

    # Perform byte stuffing on the test data
    stuffed_data = byte_stuffing(test_data)
    logging.info(""Byte-stuffed data: %s"", stuffed_data.hex())

    # List to store received data tuples
    received_data_list: List[Tuple[bytes, bytes]] = []

    # Start the server in a separate thread
    server_thread = threading.Thread(
        target=start_server, args=(HOST, PORT, DURATION, received_data_list)
    )
    server_thread.start()

    # Send stuffed data to the server
    received_data = send_data(HOST, PORT, stuffed_data)
    if received_data is not None:
        received_data_list.append(
            (stuffed_data, received_data)
        )  # Append received data only

    # Wait for the server thread to complete
    server_thread.join()

    # Prompt user to save the output
    save = input(""\nDo you want to save the output? (y/n): "")
    if save.lower() == ""y"":
        # Format example data for saving
        example_data = f""\nSent:    {stuffed_data.hex()}\nReceived:    {received_data.hex() if received_data else 'None'}\n""
        # Save the output to a file
        save_output(example_data, received_data_list)
        logging.info(""\nOutput saved successfully!\n"")

if __name__ == ""__main__"":
    # Configure logging settings
    logging.basicConfig(
        level=logging.INFO,
        format=""%(message)s"",
        handlers=[logging.FileHandler(""output.txt"", mode=""w""), logging.StreamHandler()],
    )

    # Execute the main function
    main()
"
yunXnKv7,Simple remove duplicates,1HazingAU,Go,Thursday 30th of May 2024 02:46:01 PM CDT,"package main

import ""fmt""

func Solve(slice []int) []int { 
	lastIndex := make(map[int]int)

	
	for i, key := range slice {
		lastIndex[key] = i
	}

	result := []int{}

	
	for i := len(slice) - 1; i >= 0; i-- {
		value := slice[i]
		
		if lastIndex[value] == i {

			result = append([]int{value}, result...)
		}
	}

	return result
}

func main() {
	numbers := []int{1, 1, 4, 5, 1, 2, 1}

	fmt.Print(Solve(numbers))
}"
u4EQeyKf,Python - split file - (Stackoverflow),furas,Python,Thursday 30th of May 2024 02:42:26 PM CDT,"# [python - Finding a specific keyword while dividing the large csv into smaller segments, and moving to next row until keyword is found - Stack Overflow](https://stackoverflow.com/questions/78555996/finding-a-specific-keyword-while-dividing-the-large-csv-into-smaller-segments-a)

other_list = []
index = 0

with open(""combined.con"") as infile:
    for line in infile:
        other_list.append(line)
        if len(other_list) >= 5 and line.startwith('END'):
            with open(f""Contingency_{i}.con"", 'w') as outfile:
                for item in other_list:
                    outfile.write(item)
            other_list = []
            index += 1
                   
# make sure there is no data
if len(other_list) > 0:
    with open(f""Contingency_{i}.con"", 'w') as outfile:
        for item in other_list:
            outfile.write(item)
"
P2RTS39e,dad,x2w,GetText,Thursday 30th of May 2024 02:36:54 PM CDT,"dad























dad"
UnkW4EwL,Win11„Äå„Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó„ÅÆÈñãÂßã„ÄçÂâäÈô§ Êîπ,kamome-sg,Batch,Thursday 30th of May 2024 02:26:36 PM CDT,"@echo off
set key=HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\StorageProvider\OneDrive
set value=StorageProviderKnownFolderSyncInfoSourceFactory
for /l %%i in (1,1,12) do (
	timeout /t 5 /nobreak >nul
	reg query %key% /v %value% >nul 2>&1
	if not errorlevel 1 (
		reg delete %key% /v %value% /f
		exit
	)
)"
UdQpdWLr,How can one utilize a mines strategy on the Shuffle platform to maximize potential earnings,livebetpro,PHP,Thursday 30th of May 2024 02:19:08 PM CDT,"https://www.livebetpro.com/how-can-one-utilize-a-mines-strategy-on-the-shuffle-platform-to-maximize-potential-earnings/
 Unlocking the Potential of Shuffle Mines: A Strategic Guide to Maximizing Earnings on the Shuffle Platform
Table of Contents : Shuffle

 	Introduction
 	Optimal Game Setup and Strategy
 	Profit-Taking and Risk Management
 	Bonus and Community Engagement
 	Advanced Strategies and Platform Features
 	Conclusion




Introduction to Shuffle Mines
Are you eager to explore the realm of Shuffle Mines and uncover its wealth-building potential on the Shuffle platform? With a carefully crafted strategy and a strategic game setup, you can navigate the twists and turns of the game to aim for substantial gains. Let's delve into the optimal approach to ensure consistent profits on the Shuffle platform.
Optimal Game Setup and Strategy on Shuffle
Begin your journey with a modest investment of $25 on the Shuffle platform. This starting point lays the foundation for a strategic approach aimed at achieving a 4X initial gain, striking a balance between risk and reward crucial for long-term profitability.

 	
Mines Game Strategy on Shuffle
: Set the Mines to two and select 12 boxes. This configuration provides an optimal level of challenge while keeping risk levels manageable.
 	
Increase on Loss Strategy on Shuffle
: Implement an increase on loss strategy of 4114, targeting a 50% gain. This clear objective guides your decisions and maximizes your chances of success.

Profit-Taking and Risk Management on Shuffle
Knowing when to seize profits and when to minimize losses is essential on the Shuffle platform. Prioritize quitting while ahead to safeguard your earnings and avoid overexposure.

 	
Stop-Loss Strategy on Shuffle
: Implement a stop-loss strategy to protect your capital. If your balance drops below 2K Stake cash, consider it a signal to reassess your approach.

Bonus and Community Engagement on Shuffle
Enhance your earnings potential by leveraging bonuses and engaging with the Shuffle community on the Shuffle platform.

 	
Bonus Utilization on Shuffle
: Use the bonus code PK to secure a 100% bonus, effectively doubling your initial investment on the Shuffle platform. This bonus boosts your starting balance, providing additional resources for pursuing your earnings goals.
 	
Community Engagement on Shuffle
: Join the Shuffle community on platforms like Telegram to access exclusive content, tips, and discussions on effective gameplay strategies.

Advanced Strategies and Platform Features on Shuffle
Elevate your Shuffle Mines gameplay with advanced strategies and platform-specific features available on the Shuffle platform.

 	
Progressive Betting on Shuffle
: Gradually increase your guesses or bombs over multiple rounds to strategically elevate both risk and potential reward.
 	
Shuffle Platform Features
: Take advantage of Shuffle's superior bonuses and user-friendly interface on the Shuffle platform. Engage with live support and utilize post-sign-up bonus codes to maximize your earnings potential.

Conclusion: Navigating the Path to Profitability on the Shuffle Platform
By following these strategies and leveraging the resources available on the Shuffle platform, you can embark on a journey towards consistent profitability in Mines. With careful planning, disciplined execution, and a bit of luck, you can unlock the full earning potential of this exhilarating game on the Shuffle platform."
7z5YvuCQ,fix win flash,KukuRuzo,C++,Thursday 30th of May 2024 02:06:57 PM CDT,"

diff --git a/src/mainwin.cpp b/src/mainwin.cpp
index 29a96a49..0ddd8b93 100644
--- a/src/mainwin.cpp
+++ b/src/mainwin.cpp
@@ -551,6 +551,7 @@ MainWin::MainWin(bool _onTop, bool _asTool, PsiCon *psi) :
     reinitAutoHide();
 #ifdef USE_TASKBARNOTIFIER
     d->taskBarNotifier = new TaskBarNotifier(this);
+    d->taskBarNotifier->enableFlashWindow(d->allInOne && PsiOptions::instance()->getOption(""options.ui.flash-windows"").toBool());
 #endif
 }
 
@@ -589,10 +590,12 @@ void MainWin::optionChanged(const QString &option)
     if (option == toolbarsStateOptionPath) {
         loadToolbarsState();
     } else if (option == ""options.ui.contactlist.css"") {
-        const QString css = PsiOptions::instance()->getOption(""options.ui.contactlist.css"").toString();
+        const QString css = PsiOptions::instance()->getOption(option).toString();
         if (!css.isEmpty()) {
             setStyleSheet(css);
         }
+    } else if (d->allInOne && option == ""options.ui.flash-windows"") {
+        d->taskBarNotifier->enableFlashWindow(PsiOptions::instance()->getOption(option).toBool());
     }
 }
 
diff --git a/src/widgets/taskbarnotifier.cpp b/src/widgets/taskbarnotifier.cpp
index 908d7173..2343492e 100644
--- a/src/widgets/taskbarnotifier.cpp
+++ b/src/widgets/taskbarnotifier.cpp
@@ -71,6 +71,9 @@ public:
 #ifdef USE_DBUS
     void setDesktopPath(const QString &appName);
 #endif
+#ifdef Q_OS_WIN
+    void setFlashWindow(bool enabled);
+#endif
 private:
 #ifdef Q_OS_WIN
     void  setTaskBarIcon(const HICON &icon = {});
@@ -92,6 +95,7 @@ private:
 #ifdef Q_OS_WIN
     HWND  hwnd_;
     HICON icon_;
+    bool flashWindow_ = false;
 #else
     QImage *image_;
 #endif
@@ -222,6 +226,11 @@ void TaskBarNotifier::Private::sendDBusSignal(bool isVisible, uint number)
 }
 
 #elif defined(Q_OS_WIN)
+void TaskBarNotifier::Private::setFlashWindow(bool enabled)
+{
+    flashWindow_ = enabled;
+}
+
 void TaskBarNotifier::Private::setTaskBarIcon(const HICON &icon)
 {
     if (icon_)
@@ -286,7 +295,10 @@ void TaskBarNotifier::Private::doFlashTaskbarIcon()
     FLASHWINFO fi;
     fi.cbSize    = sizeof(FLASHWINFO);
     fi.hwnd      = hwnd_;
-    fi.dwFlags   = (urgent_) ? FLASHW_ALL | FLASHW_TIMER : FLASHW_STOP;
+    if(urgent_)
+        fi.dwFlags   = ((flashWindow_) ? FLASHW_ALL : FLASHW_TRAY) | FLASHW_TIMER;
+    else
+        fi.dwFlags   = FLASHW_STOP;
     fi.uCount    = 0;
     fi.dwTimeout = 0;
     FlashWindowEx(&fi);
@@ -306,3 +318,13 @@ void TaskBarNotifier::setIconCountCaption(int count) { d->setIconCount(count); }
 void TaskBarNotifier::removeIconCountCaption() { d->restoreDefaultIcon(); }
 
 bool TaskBarNotifier::isActive() { return d->active(); }
+
+void TaskBarNotifier::enableFlashWindow(bool enabled)
+{
+#ifdef Q_OS_WIN
+    if(d)
+        d->setFlashWindow(enabled);
+#else
+    Q_UNUSED(enabled);
+#endif
+}
diff --git a/src/widgets/taskbarnotifier.h b/src/widgets/taskbarnotifier.h
index 11525360..6312970c 100644
--- a/src/widgets/taskbarnotifier.h
+++ b/src/widgets/taskbarnotifier.h
@@ -31,6 +31,7 @@ public:
     void setIconCountCaption(int count);
     void removeIconCountCaption();
     bool isActive();
+    void enableFlashWindow(bool enabled);
 
 private:
     class Private;
"
HHRLQwie,list of cities by country - sqlite3,aum7,C,Thursday 30th of May 2024 02:05:52 PM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <sqlite3.h>

void print_cities_by_country(sqlite3 *db) {
    sqlite3_stmt *stmt;
    const char *sql = ""SELECT CountryInfo.country, GROUP_CONCAT(GeoNames.name, ', ') as cities ""
                      ""FROM GeoNames ""
                      ""JOIN CountryInfo ON GeoNames.country = CountryInfo._idx ""
                      ""GROUP BY CountryInfo.country ""
                      ""ORDER BY CountryInfo.country;"";

    int rc = sqlite3_prepare_v2(db, sql, -1, &stmt, NULL);
    if (rc != SQLITE_OK) {
        fprintf(stderr, ""Failed to fetch data: %s\n"", sqlite3_errmsg(db));
        return;
    }

    while ((rc = sqlite3_step(stmt)) == SQLITE_ROW) {
        const char *country = (const char *)sqlite3_column_text(stmt, 0);
        const char *cities = (const char *)sqlite3_column_text(stmt, 1);
        printf(""%s: %s\n"", country, cities ? cities : """");
    }

    if (rc != SQLITE_DONE) {
        fprintf(stderr, ""Execution failed: %s\n"", sqlite3_errmsg(db));
    }

    sqlite3_finalize(stmt);
}

int main(int argc, char *argv[]) {
    if (argc != 2) {
        fprintf(stderr, ""Usage: %s <database file>\n"", argv[0]);
        return EXIT_FAILURE;
    }

    sqlite3 *db;
    int rc = sqlite3_open(argv[1], &db);
    if (rc != SQLITE_OK) {
        fprintf(stderr, ""Cannot open database: %s\n"", sqlite3_errmsg(db));
        return EXIT_FAILURE;
    }

    print_cities_by_country(db);

    sqlite3_close(db);
    return EXIT_SUCCESS;
}
***
compile with sh :
gcc -o cities_by_country cities_by_country.c -lsqlite3

run with sh :
./cities_by_country /path/to/atlas.db
"
brLT2NVj,snake,bobopopcornboy,Lua,Thursday 30th of May 2024 01:55:14 PM CDT,"local w, h = term.getSize()
a = 0
timer = os.startTimer(0)
--variables
snakecolor = colors.green
nInterval = 0.3
fruitcolor = colors.red
textcolor = colors.yellow
edgecolor = colors.blue
HIGHSCORE = 0
HIGHSCOREP = ""NoOne""


--functions
function drawpixel(x, y, color)
    term.setCursorPos(x, y)
    term.setBackgroundColor(color)
    term.write("" "")
    term.setBackgroundColor(colors.black)
end

local function printCentred(y, s)
    local x = math.floor((w - string.len(s)) / 2)
    term.setCursorPos(x, y)
    --term.clearLine()
    term.write(s)
end

local function addwall()
    yes = 0
    while true do
        randomx = math.random(1, w)
        randomy = math.random(2, h)
        for i = 1, #sx do
            if sx[i] == randomx and sy[i] == randomy then
                yes = yes + 1
            end
        end
        for i = 1, #fruitx do
            if fruitx[i] == randomx and fruity[i] == randomy then
                yes = yes + 1
            end
        end
        if yes == 0 then
            break
        end
    end
    wallx[#wallx + 1] = randomx
    wally[#wally + 1] = randomy
end

local function addfruit(p1)
    yes = 0
    while true do
        randomx = math.random(1, w)
        randomy = math.random(2, h)
        for i = 1, #sx do
            if sx[i] == randomx and sy[i] == randomy then
                yes = yes + 1
            end
        end
        if yes == 0 then
            break
        end
    end
    fruitx[p1] = randomx
    fruity[p1] = randomy
end

function drawline(xc, yc, xv, yv, color)
    if xc == xv then
        if yc < yv then
            for i = 1, yv - yc + 1 do
                drawpixel(xc, yc + i - 1, color)
            end
        else
            for i = 1, yc - yv + 1 do
                drawpixel(xc, yc - i + 1, color)
            end
        end
    elseif yc == yv then
        if xc < xv then
            for i = 1, xv - xc + 1 do
                drawpixel(xc + i - 1, yc, color)
            end
        else
            for i = 1, xc - xv + 1 do
                drawpixel(xc - i + 1, yc, color)
            end
        end
    end
end

function edge()
    drawline(1, 1, 1, h, edgecolor)
    drawline(1, 1, w, 1, edgecolor)
    drawline(w, 1, w, h, colors.blue)
    drawline(1, h, w, h, edgecolor)
end

function drawgame()
        term.clear()
        for i = 1, #sx do
            term.setCursorPos(sx[i], sy[i])
            term.setBackgroundColor(snakecolor)
            term.write("" "")
            term.setBackgroundColor(colors.black)
        end
        for i = 1, #fruitx do
            term.setCursorPos(fruitx[i], fruity[i])
            term.setBackgroundColor(fruitcolor)
            term.write("" "")
        end
        for i = 1, #wallx do
            term.setCursorPos(wallx[i], wally[i])
            term.setBackgroundColor(edgecolor)
            term.write("" "")
        end
        term.setBackgroundColor(colors.black)
        if diffeculty >= 2 then
            edge()
        end
        drawline(1,1,w,1,edgecolor)
        term.setBackgroundColor(edgecolor)
        term.setCursorPos(1, 1)
        term.write(""score:"" .. score*(diffeculty+1))
        term.write("" ""..""HIGHSCORE:""..HIGHSCORE.."" Holder:\""""..HIGHSCOREP..""\"""")
        term.setCursorPos(w-string.len(""Difficulty:"" ..diffeculty), 1)
        term.write(""Difficulty:"" ..diffeculty)
        term.setBackgroundColor(colors.black)
end

function menu(list,clears,where)
selected = 1
if not clears then term.clear() end
term.setTextColor(textcolor)
  for i=1,#list do
    if selected == i then
      printCentred(h/2 - #list/2 + (i-1), ""[""..list[i]..""]"")
    else
      printCentred(h/2 - #list/2 + (i-1), list[i])
    end
  end
if where == 1 then printCentred(1,""press BackSpace (<----) to puase"") end
while true do
    local event, o1, o2 = os.pullEvent(""key"")
    term.clear()
    if clears then drawgame() end
    if where == 1 then printCentred(1,""press BackSpace (<----) to puase"") end
    if o1 == keys.up then
        selected = selected + -1
    end
    if o1 == keys.down then
        selected = selected - -1
    end
    if selected > #list then
        selected = 1
    end
    if selected < 1 then
        selected = #list
    end
    if o1 == keys.enter then
        break
    end
    for i=1,#list do
      if selected == i then
        printCentred(h/2 - #list/2 + (i-1), ""[""..list[i]..""]"")
      else
        printCentred(h/2 - #list/2 + (i-1), list[i])
    end
  end
end
return selected
end

function start()
--menu
diffeculty = menu({""easy"",""normal"",""HARD"",""VERY HARD!"",""IMPOSIBLE!"",""Leave""},false,1) - 1
--game
nInterval = 0.3
wallx = {}
wally = {}
sx = {6, 5, 4}
sy = {5, 5, 5}
dx = 1
dy = 0
die = false
fb = 0
die = false
if diffeculty > 0 then
    fb = 0.2
end
if diffeculty >= 3 then
    fb = 0.4
end
fruitx = {math.floor(w / 2)}
fruity = {math.floor(h / 2)}
nInterval = nInterval - fb
local timer = os.startTimer(nInterval)
move = 0
if diffeculty ~= 5 then
while true do
    event, o1, o2 = os.pullEvent()
    if event == ""timer"" and o1 == timer then
        timer = os.startTimer(nInterval)
    end
    if event == ""key"" then
        if o1 == keys.right and dx == 0 and move == 0 then
            dx = 1
            dy = 0
            move = 1
        end
        if o1 == keys.left and dx == 0 and move == 0 then
            dx = -1
            dy = 0
            move = 1
        end
        if o1 == keys.up and dy == 0 and move == 0 then
            dx = 0
            dy = -1
            move = 1
        end
        if o1 == keys.down and dy == 0 and move == 0 then
            dx = 0
            dy = 1
            move = 1
        end
        if o1 == keys.backspace then
          if menu({""Resume"",""Difficulty Select""},true) == 2 then
            break
          end
          timer = os.startTimer(nInterval)
        end
        if o1 == keys.space then
            addfruit(#fruitx + 1)
        end
    end
    if event == ""timer"" then
        move = 0
        table.insert(sx, 1, sx[1] + dx)
        table.insert(sy, 1, sy[1] + dy)
        for i = 1, #sx - 1 do
            if sx[1] == sx[i + 1] and sy[1] == sy[i + 1] then
                die = true
            end
        end
        for i = 1, #wallx do
            if sx[1] == wallx[i] and sy[1] == wally[i] then
                die = true
            end
        end
        for i = 1, #fruitx do
            if fruitx[i] == sx[1] and sy[1] == fruity[i] then
                addfruit(i)
                if diffeculty == 4 then addwall() end
                grow = true
            end
        end
        if #fruitx == 0 then
          addfruit(1)
        end
        if not grow then
            sx[#sx] = nil
            sy[#sy] = nil
        end
        grow = false
        if diffeculty < 2 then
            if sx[1] > w then
                sx[1] = 1
            end
            if sx[1] < 1 then
                sx[1] = w
            end
            if sy[1] > h then
                sy[1] = 2
            end
            if sy[1] < 2 then
                sy[1] = h
            end
        else
            if sx[1] > w - 1 then
                die = true
            end
            if sx[1] < 2 then
                die = true
            end
            if sy[1] > h - 1 then
                die = true
            end
            if sy[1] < 2 then
                die = true
            end
        end
        score = #sx -3
        drawgame()
        if score*(diffeculty+1) > HIGHSCORE then
            HIGHSCOREP = ""you""
            HIGHSCORE = score*(diffeculty+1)
        end
        if die then
            score = score*(diffeculty+1)
            term.clear()
            printCentred(math.floor(h / 2) - 1, ""you died"")
            printCentred(math.floor(h / 2), ""score:"" .. score)
            if HIGHSCOREP == ""you"" then
            HIGHSCOREP = ""__""
            printCentred(math.floor(h / 2) + 1, ""NEW HIGH SCORE!"")
            printCentred(math.floor(h / 2) + 2, ""EnterName:""..HIGHSCOREP)
            shift = 0
            while true do
                local event, key = os.pullEvent(""key"")
                if key == keys.leftShift or key == keys.rightShift then
                    shift = 1 - shift
                end
                kes = keys.getName(key)
                if shift == 1 then kes = string.upper(kes) end
                if #kes == 1 and string.sub(HIGHSCOREP,1,1) ~= ""_"" then
                    HIGHSCOREP = string.sub(HIGHSCOREP,1,1)
                    HIGHSCOREP = HIGHSCOREP..kes
                end
                if #kes == 1 and string.sub(HIGHSCOREP,1,1) == ""_"" then
                    HIGHSCOREP = kes..""_""
                end
                if key == keys.backspace and string.sub(HIGHSCOREP,2,2) == ""_"" then
                    HIGHSCOREP = ""__""
                end
                if key == keys.backspace and string.sub(HIGHSCOREP,2,2) ~= ""_"" then
                    HIGHSCOREP = string.sub(HIGHSCOREP,1,1)
                    HIGHSCOREP = HIGHSCOREP..""_""
                end
                if key == keys.enter and string.sub(HIGHSCOREP,2,2) ~= ""_"" then
                    break
                end
                printCentred(math.floor(h / 2) + 2, ""EnterName:""..HIGHSCOREP)
            end
            printCentred(math.floor(h / 2) + 1, ""NEW HIGH SCORE!"")
            printCentred(math.floor(h / 2) + 2, ""press ENTER to play agian"")
            else
            printCentred(math.floor(h / 2) + 1, ""press ENTER to play agian"")
            end
            while true do
                local event, key = os.pullEvent(""key"")
                if key == keys.enter then
                    break
                end
            end
            break
        end
    end
end
start()
end
term.clear()
term.setCursorPos(1,1)
end
start()"
CcXJd1gQ,How can I receive a generous 50% Forex Deposit Bonus from Ultima Markets,reviewbrokers,PHP,Thursday 30th of May 2024 01:51:38 PM CDT,"https://www.reviewbrokers.net/how-can-i-receive-a-generous-50-forex-deposit-bonus-from-ultima-markets/
 Table of Contents: Ultima Markets

 	Introduction: Unlock Your Trading Potential
 	Why Choose Ultima Markets?

 	Well-Regulated
 	Client's Fund Insurance
 	Negative Balance Protection
 	Multi-Award-Winning Broker


 	How to Claim Your Best Forex Deposit Bonus:

 	Register an Account
 	Opt-In
 	Deposit


 	Key Highlights of the Offer:

 	Boost Your Trading Power
 	Withdraw Profits Anytime
 	Additional 20% Bonus for Subsequent Deposits


 	Conclusion: Elevate Your Profit Potential with Ultima Markets
 	Call to Action: Claim Your Best Forex Deposit Bonus Now




Introduction: Unlock Your Trading Potential
Are you ready to take your trading game to the next level? Ultima Markets is here to help you supercharge your account and boost your profit potential with our exclusive 50% Forex Deposit Bonus offer, recognized as one of the best forex deposit bonuses available. But that's not all ‚Äì we're also offering an additional 20% bonus on subsequent deposits, making trading with us simple, transparent, and incredibly rewarding.

Claim Your Bonus Now
Why Choose Ultima Markets?
Well-Regulated
We are fully regulated by [insert regulatory body], ensuring that your funds are safe and secure at all times.
Client's Fund Insurance
Your funds are protected by our client's fund insurance policy, providing an extra layer of security and peace of mind.
Negative Balance Protection
With Ultima Markets, you'll never have to worry about losing more than your initial investment, thanks to our negative balance protection policy.
Multi-Award-Winning Broker
We are proud to have received multiple awards and accolades for our exceptional services and commitment to our clients.
How to Claim Your Best Forex Deposit Bonus:
Register an Account
Simply sign up for an account with Ultima Markets in just a few minutes.
Opt-In
Once your account is set up, opt-in to the 50% Forex Deposit Bonus offer.
Deposit
Make your first deposit into your Ultima Markets account, and your 50% bonus will be credited instantly.
Key Highlights of the Offer:
Boost Your Trading Power
Increase your trading power by up to 1.5 times, giving you the competitive edge you need to succeed in the Forex market.
Withdraw Profits Anytime
Unlike other brokers, we allow you to withdraw your profits at any time, with no hidden restrictions or fees.
Additional 20% Bonus for Subsequent Deposits
Enjoy an additional 20% bonus on all subsequent deposits, ensuring that your trading journey with Ultima Markets is consistently rewarding.
Conclusion: Elevate Your Profit Potential with Ultima Markets
Don't miss out on this incredible opportunity to supercharge your trading account and elevate your profit potential. Claim your 50% Forex Deposit Bonus from Ultima Markets today, recognized as one of the best forex deposit bonuses available, and experience the difference for yourself!
Call to Action: Claim Your Best Forex Deposit Bonus Now
Claim Your Bonus Now"
esAfxdYx,Untitled,Mysoft,FreeBasic,Thursday 30th of May 2024 01:39:17 PM CDT,"#include ""MyTDT\fbplay.bas""

for N as long = 3 to 125
  print N
  PLAY ""I"" & N & "" T120 O4 L8 ML""  ' Set tempo to 120, octave to 4, length to 1/8, legato
  PLAY ""G G A G C5 B4""             ' Happy birthday to you
  PLAY ""G G A G D5 C5""             ' Happy birthday to you
  PLAY ""G G G5 E5 C5 B4 A""         ' Happy birthday dear [Name]
  PLAY ""F5 F5 E5 C5 D5 C5""         ' Happy birthday to you
next N
sleep"
5ZLYUxaU,How Can You Benefit from the Exclusive IB Rewards Program at Ultima Markets for 2024,fxvnpro,PHP,Thursday 30th of May 2024 01:35:31 PM CDT,"https://www.fxvnpro.com/how-can-you-benefit-from-the-exclusive-ib-rewards-program-at-ultima-markets-for-2024/
 How Can You Benefit from the Exclusive IB Rewards Program and Forex Welcome Bonus at Ultima Markets for 2024?
Table of Contents : Ultima Markets

 	Exclusive Perks and Incentives
 	Why Choose Ultima Markets?
 	How to Join Ultima Markets IB Rewards and Forex Welcome Bonus 2024

Join Ultima Markets IB Rewards 2024 and gain access to a variety of perks and incentives! By partnering with Ultima Markets as an Introducing Broker (IB), you'll receive enticing bonuses and lucrative rebates. Here's how you can make the most of this exclusive program.
Exclusive Perks and Incentives
Ultima Markets has crafted a unique reward system that goes beyond standard commissions. As an IB with Ultima Markets, you'll have the opportunity to earn:
Luxury Property and Designer Goods
Ultima Markets' reward scheme includes high-end items and properties, reflecting our appreciation for your loyalty and support.
Sophisticated IB Portal with Forex Welcome Bonus 2024
Manage your referrals, track commissions, and access support through an advanced, user-friendly portal provided by Ultima Markets.
Daily Rebates and Forex Welcome Bonus 2024
Enjoy daily payouts on your earnings with Ultima Markets, ensuring a consistent and reliable income stream.
Personalized Reward Scheme with Forex Welcome Bonus 2024
Ultima Markets offers tailored incentives designed to match your performance and client acquisition efforts.
Client‚Äôs Fund Insurance
Ultima Markets provides added security for your clients, enhancing trust and confidence in your referrals.
Why Choose Ultima Markets?
Ultima Markets stands out due to its commitment to innovation and client satisfaction. Here‚Äôs why you should consider partnering with Ultima Markets:
Sophisticated IB Portal with Forex Welcome Bonus 2024
Ultima Markets' state-of-the-art portal provides all the tools and information you need to succeed.
Daily Rebates and Forex Welcome Bonus 2024
Receive your earnings promptly with daily rebates from Ultima Markets.
Personalized Reward Scheme with Forex Welcome Bonus 2024
Enjoy customized rewards that reflect your hard work and success with Ultima Markets.
Client‚Äôs Fund Insurance
Offer your clients peace of mind with comprehensive fund protection from Ultima Markets.
How to Join Ultima Markets IB Rewards and Forex Welcome Bonus 2024
Getting started with the Ultima Markets IB Rewards Program is simple. Follow these steps to become a part of our successful network:
Partner with Us as an Introducing Broker
Apply through the Ultima Markets website to become an IB.
Deposit
Fund your account with Ultima Markets to start referring clients.
Refer Clients
Bring new clients to Ultima Markets.
Start Trading and Claim Your Rewards with Forex Welcome Bonus 2024
Watch your commissions and rewards grow as your clients trade with Ultima Markets.

It‚Äôs that simple! Don‚Äôt miss out on this amazing opportunity. Join Ultima Markets IB Rewards 2024 today and start enjoying the exclusive benefits and rewards.

Link to join Ultima Markets IB Rewards 2024

Partner with Ultima Markets now and take your brokerage business to new heights!"
zC4a4mx0,Mining turtle staircase test,SloothManDan,Lua,Thursday 30th of May 2024 01:30:21 PM CDT,"-- Function to check if the turtle needs refueling
function refuelIfNeeded()
    if turtle.getFuelLevel() == 0 then
        turtle.select(1)
        if turtle.refuel(1) then
            print(""Turtle refueled."")
            return
        end
        error(""Out of fuel!"")
    end
end

-- Function to place stair block below the turtle
function placeStair()
    turtle.select(2)
    turnAround()
    if turtle.placeDown() then
        return
    end
    turnAround()
    error(""Out of stairs!"")
end

-- Function to dig down a staircase and place stairs
function digStaircaseToYLevel(target)

    local steps = 0

    while target ~= steps do
        refuelIfNeeded()

        -- Dig forward, down, and down-forward to create a staircase step
        turtle.dig()
        turtle.forward()
        turtle.digup()
        turtle.up()
        turtle.digup()

        -- Place a torch every 8 blocks
        if steps % 8 == 0 then
            placeTorch()
        end

        turtle.down()
        turtle.digDown()

        -- Place a stair block
        placeStair()

        -- Optional: Place a torch every few steps to light the staircase
        -- if turtle.getItemCount(1) > 0 then
        --     turtle.select(1)
        --     turtle.placeUp()
        -- end
        steps = steps + 1
    end

    print(""Staircase complete."")
end

-- Funiton to turn the turtle 180
function turnAround()
    turtle.turnLeft()
    turtle.turnLeft()
end

-- Function to place a torch
function placeTorch()
    turtle.select(3)
    turtle.placeUp()
end

-- Main program
local target = tonumber(arg[1])

if not target then
    print(""Usage: staircase <target>"")
    return
end

digStaircaseToYLevel(targetY)"
idApFRwf,bla bla bla,MagmaLP,Lua,Thursday 30th of May 2024 01:12:36 PM CDT,"mon = peripheral.wrap(""top"")
mon.setCursorPos(1,1)
mon.clear()

--function writeText(x, y, textColor, bgColor, text)
--    mon.setTextColor(colors[textColor])
--    mon.setBackgroundColor(colors[bgColor])
--    mon.setCursorPos(x, y)
--    mon.clearLine()
--    mon.write(text)
--end

--writeText(2, 3, ""red"", ""black"", ""Hallo, Minecraft!"")
--writeText(2, 5, ""red"", ""black"", ""bvladasdffasf"")

mon.setCursorPos(2,3)
mon.setTextColor(colors.red)
mon.write(""test hallo welt"")

mon.setCursorPos(2,4)
mon.setTextColor(colors.red)
mon.setBackgroundColor(colors.white)
mon.write(""test hallo welt"")
"
ermv26xb,Untitled,MeehoweCK,C++,Thursday 30th of May 2024 01:01:19 PM CDT,"// main.cpp
#include <iostream>
#include ""tablica.h""

int main() {
	TablicaInt tab{};
	std::cout << (int)tab << std::endl;		// 0
	auto rozmiar{ (int)tab };
	return 0;
}

// tablica.h
#pragma once

class TablicaInt {
	int rozmiar{};
	int* tab{ nullptr };
public:
	TablicaInt() = default;
	~TablicaInt();
	operator int() { return rozmiar; }
};

TablicaInt::~TablicaInt() {
	if (rozmiar > 0) {
		delete[] tab;
	}
	std::cout << ""~TablicaInt()\n"";
}"
pCFZvS3P,file explorer (use file name.type in images),JEXBLUK,Python,Thursday 30th of May 2024 12:56:48 PM CDT,"import tkinter as tk
from tkinter import filedialog
import pygame
from PIL import Image, ImageTk

class FileExplorer:
    def __init__(self, master):
        self.master = master
        self.master.title(""File Explorer"")

        self.file_label = tk.Label(master, text=""Selected File:"")
        self.file_label.pack()

        self.select_button = tk.Button(master, text=""Select File"", command=self.select_file)
        self.select_button.pack()

        self.read_button = tk.Button(master, text=""Read"", command=self.read_file, state=tk.DISABLED)
        self.read_button.pack()

        self.play_button = tk.Button(master, text=""Play"", command=self.play, state=tk.DISABLED)
        self.play_button.pack()

        self.stop_button = tk.Button(master, text=""Stop"", command=self.stop, state=tk.DISABLED)
        self.stop_button.pack()

        self.image_button = tk.Button(master, text=""View Image"", command=self.view_image, state=tk.DISABLED)
        self.image_button.pack()

        self.image_label = tk.Label(master)
        self.image_label.pack()

    def select_file(self):
        filename = filedialog.askopenfilename(filetypes=[(""MP3 files"", ""*.mp3""), (""Text files"", ""*.txt""), (""Image files"", ""*.jpg;*.jpeg;*.png;*.gif"")])
        if filename:
            self.file_label.config(text=f""Selected File: {filename}"")
            if filename.endswith("".txt""):
                self.read_button.config(state=tk.NORMAL)
                self.play_button.config(state=tk.DISABLED)
                self.stop_button.config(state=tk.DISABLED)
                self.image_button.config(state=tk.DISABLED)
                self.image_label.config(image=None)
            elif filename.endswith(("".jpg"", "".jpeg"", "".png"", "".gif"")):
                self.read_button.config(state=tk.DISABLED)
                self.play_button.config(state=tk.DISABLED)
                self.stop_button.config(state=tk.DISABLED)
                self.image_button.config(state=tk.NORMAL)
                self.update_image(filename)  # Update the displayed image
            else:
                self.read_button.config(state=tk.DISABLED)
                self.play_button.config(state=tk.NORMAL)
                self.stop_button.config(state=tk.DISABLED)
                self.image_button.config(state=tk.DISABLED)
                self.image_label.config(image=None)
            self.filename = filename

    def read_file(self):
        with open(self.filename, ""r"") as file:
            content = file.read()
        tk.messagebox.showinfo(""File Content"", content)

    def play(self):
        pygame.mixer.init()
        pygame.mixer.music.load(self.filename)
        pygame.mixer.music.play()
        self.play_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)

    def stop(self):
        pygame.mixer.music.stop()
        self.play_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)

    def update_image(self, filename):
        try:
            image = Image.open(filename)
            self.image = ImageTk.PhotoImage(image)
        except Exception as e:
            tk.messagebox.showerror(""Error"", str(e))

    def view_image(self):
        try:
            self.image_label.config(image=self.image)
        except AttributeError:
            tk.messagebox.showerror(""Error"", ""No image selected."")
        except Exception as e:
            tk.messagebox.showerror(""Error"", str(e))

def main():
    root = tk.Tk()
    app = FileExplorer(root)
    root.mainloop()

if __name__ == ""__main__"":
    main()"
Yd0sZMZb,Welcome Screen,MagmaLP,Lua,Thursday 30th of May 2024 12:51:42 PM CDT,"os.loadAPI(""ocs/apis/sensor"")
s = sensor.wrap(""right"")
mon = peripheral.wrap(""back"")
mon.setBackgroundColor(colors.black)
mon.setTextScale(3)
mon.setCursorPos(1,1)
mon.clear()

mon.setTextColor(colors.yellow)

shift = 0

function centerText(text, line)
    local x, y = mon.getSize()
    mon.setCursorPos(math.ceil((x / 2) - (text:len() / 2)) + shift, line)
    mon.write(text)
end

while true do
    mon.clear()
    centerText(""Welcome"", 2)
    
    for name, info in pairs(s.getTargets()) do
        centerText(name, 3)
    end
    
    shift = shift + 1
    
    sleep(3.5)
end
"
ZirDNQZd,Untitled,MeehoweCK,C++,Thursday 30th of May 2024 12:47:50 PM CDT,"#pragma once

template <typename T>
class Znak {
	int rozmiar{};
	T** tab{ nullptr };
public:
	Znak() = default;
	~Znak();
	void operator+=(T* obiekt);
	T*& operator[](int index);
	const T*& operator[](int index) const;
};

template <typename T>
Znak<T>::~Znak() {
	if (rozmiar > 0) {
		for (int i{}; i < rozmiar; ++i) {
			delete tab[i];
		}
		delete[] tab;
	}
}

template <typename T>
void Znak<T>::operator+=(T* obiekt) {
	if (rozmiar == 0) {
		tab = new T * [1];
	}
	else {
		T** temp{ new T * [rozmiar + 1] };
		for (int i{}; i < rozmiar; ++i) {
			temp[i] = tab[i];
		}
		delete[] tab;
		tab = temp;
	}
	tab[rozmiar] = obiekt;
	++rozmiar;
}"
18XWg993,Pastebin.ai - #1 Pastebin Alternative,xxsa,PHP,Thursday 30th of May 2024 12:40:42 PM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free and always will be.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes.
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
....
......................................
......"
4DbpBunT,Untitled,MeehoweCK,C++,Thursday 30th of May 2024 12:14:24 PM CDT,"// obiekt.h
#ifndef OBIEKT_H
#define OBIEKT_H
#include <iostream>
using namespace std;

class Symbol //klasa abstrakcyjna
{
protected:
    char symbol;
public:
    Symbol(char s) : symbol{ s } {}
    virtual void drukuj(ostream&) const = 0;
    virtual ~Symbol() = default;
    char getSymbol() const { return symbol; }
};

class Kolko : public Symbol
{
public:
    Kolko() : Symbol{ 'O' } {}
    void drukuj(ostream& os) const
    {
        os << ""O "";
    }
};

class Krzyzyk : public Symbol
{
public:
    Krzyzyk() : Symbol{ 'X' } {}
    void drukuj(ostream& os) const
    {
        os << ""X "";
    }
};
#endif // OBIEKT_H

// gra.h
#ifndef GRA_H
#define GRA_H
#include <iostream>
#include ""obiekt.h""
using namespace std;

class Gra
{
    int w;
    Symbol* **tab;
public:
    Gra(int w);
    ~Gra();
    friend ostream& operator<<(ostream &os, const Gra &g);
    void wstaw(int wiersz, int kolumna, Symbol* znak);
    void operator-=(char znak);
};
#endif // GRA_H

//dodac element

// gra.cpp
#include ""gra.h""

Gra::Gra(int w) : w(w)
{
    tab = new Symbol**[w];
    for (int i=0; i<w; i++)
    {
        tab[i] = new Symbol *[w] {nullptr};
    }
}

Gra::~Gra()
{
    for (int i=0; i<w; i++)
    {
        for (int j=0; j<w; j++)
        {
            delete tab[i][j];
        }
        delete[] tab[i];
    }
    delete[] tab;
}

ostream& operator<<(ostream &os, const Gra &g)
{
    for (int i=0; i<g.w; i++)
    {
        for (int j=0; j<g.w; j++)
        {
            if(g.tab[i][j] != nullptr)
            {
                g.tab[i][j]->drukuj(os);
            }
            else
            {
                os << "". "";
            }
        }
        os << endl;
    }
    return os;
}

void Gra::wstaw(int x, int y, Symbol* znak)
{
    delete tab[y][x];
    tab[y][x] = znak;
}

void Gra::operator-=(char znak) {
    for (int i{}; i < w; ++i) {
        for (int j{}; j < w; ++j) {
            if (tab[i][j]) {
                if (tab[i][j]->getSymbol() == znak) {
                    delete tab[i][j];
                    tab[i][j] = nullptr;
                }
            }
        }
    }
}"
FjdS3iG6,qt5 update issues,dedanna1029,Bash,Thursday 30th of May 2024 12:11:29 PM CDT,"Problem 1: package qt5-qtwebengine-freeworld-5.15.16-1.fc39.x86_64 from @System requires qt5-qtbase(x86-64) = 5.15.12, but none of the providers can be installed
  - cannot install both qt5-qtbase-5.15.13-2.fc39.x86_64 from updates and qt5-qtbase-5.15.12-5.fc39.x86_64 from @System
  - cannot install the best update candidate for package qt5-qtwebengine-freeworld-5.15.16-1.fc39.x86_64
  - cannot install the best update candidate for package qt5-qtbase-5.15.12-5.fc39.x86_64
 Problem 2: problem with installed package qt5-qtwebengine-freeworld-5.15.16-1.fc39.x86_64
  - package qt5-qtwebengine-freeworld-5.15.16-1.fc39.x86_64 from @System requires qt5-qtbase(x86-64) = 5.15.12, but none of the providers can be installed
  - package qt5-qtwebengine-freeworld-5.15.16-1.fc39.x86_64 from rpmfusion-free-updates requires qt5-qtbase(x86-64) = 5.15.12, but none of the providers can be installed
  - cannot install both qt5-qtbase-5.15.13-2.fc39.x86_64 from updates and qt5-qtbase-5.15.12-5.fc39.x86_64 from @System
  - package python3-qt5-base-5.15.10-5.fc39.x86_64 from updates requires qt5-qtbase(x86-64) = 5.15.13, but none of the providers can be installed
  - cannot install the best update candidate for package python3-qt5-base-5.15.10-2.fc39.x86_64
================================================================================
 Package                Architecture Version                Repository     Size
================================================================================
Skipping packages with conflicts:
(add '--best --allowerasing' to command line to force their upgrade):
 qt5-qtbase             x86_64       5.15.13-2.fc39         updates       3.5 M
Skipping packages with broken dependencies:
 python3-qt5-base       x86_64       5.15.10-5.fc39         updates       3.2 M

Transaction Summary
================================================================================
Skip  2 Packages

Nothing to do.
Complete!
root@fedora:"
p2GQQQxB,„Åì„ÅÆÂ§è„ÄÅGrand RPÊ•Ω„Åó„ÅÑ„Ç§„Éô„É≥„Éà„ÅØ„ÅÇ„Çã„ÅÆ„Å†„Çç„ÅÜ„Åã„ÄÇ,Shpindlier,HTML,Thursday 30th of May 2024 12:08:48 PM CDT,"<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""><title></title></head><body>
	<div>
		<table style=""box-sizing: border-box; background: #ffffff; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
			<tbody>
				<tr>
					<td align=""center""><img src=""https://i.imgur.com/xJwSUsn.png"" alt=""Logo"" caption=""false""></td>
				</tr>
				<tr>
					<td>
						<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 19px; letter-spacing: 0.01em; line-height: 29px; text-decoration: none; padding: 15px 34px; width: 550px;"">Â§è„ÇíÊ•Ω„Åó„Åø„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„Åã„ÄÇGrand RP„ÅØ„ÇÇ„ÅÜ„Åô„ÅêÂ§ßÂπÖ„Å™„Ç¢„ÉÉ„Éó„Éá„Éº„Éà„Çí„Åó„Åæ„ÅôÔºÅ„Çµ„Éº„Éê„Éº„Å´ÈÅä„Å∂„Å†„Åë„Åß„ÄÅ„Ç∞„É©„É≥„Éâ„Ç≥„Ç§„É≥„Çí15Êûö„Ç≤„ÉÉ„Éà„Åß„Åç„Åæ„Åô„ÇàÔΩû</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""How to start playing?"" style=""color: black; text-decoration: none;"" target=""_blank""><img src=""https://i.imgur.com/9ffLSx1.png"" alt=""How to start playing?""></a></td>
				</tr>
				<tr>
					<td>
						<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 19px; letter-spacing: 0.01em; line-height: 29px; text-decoration: none; padding: 15px 34px; width: 550px;"">„Åô„Åπ„Å¶„ÅÆ„Çµ„Éº„Éê„Éº„Å´„ÄåÊµ∑Ë≥äÁâ©Ë™û„ÄçÂ§è„Ç§„Éô„É≥„Éà„ÇíÈñãÂÇ¨„Åó„Åæ„Åô„ÄÇËâ≤„ÄÖ„Å™„Çø„Çπ„ÇØ„ÇíÂÆå‰∫Ü„Åó„Å¶„ÄÅÂ†±ÈÖ¨„Çí„Ç≤„ÉÉ„Éà„Åó„Åæ„Åó„Çá„ÅÜÔºÅ</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""How to start playing?"" style=""color: black; text-decoration: none;"" target=""_blank""><img src=""https://i.imgur.com/fkolSa7.png"" alt=""How to start playing?""></a></td>
				</tr>
				<tr>
					<td style=""background: #FFDE2A; border-radius: 5px;"">
						<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 19px; letter-spacing: 0.01em; line-height: 29px; text-decoration: none; padding: 15px 34px; width: 550px;""><strong>„Çø„Çπ„ÇØ„ÅÆ„Çø„Éñ„Å´„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶„ÄÅÂ§è„Ç§„Éô„É≥„Éà„ÅÆ„É°„Éã„É•„Éº„Åã„Çâ„Çø„Çπ„ÇØ„Çí„ÅäÈÅ∏„Å≥„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÄÇ</strong></p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""How to start playing?"" style=""color: black; text-decoration: none;"" target=""_blank""><img src=""https://i.imgur.com/BzczJIo.png"" alt=""How to start playing?""></a></td>
				</tr>
				<tr>
					<td>
						<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 19px; letter-spacing: 0.01em; line-height: 29px; text-decoration: none; padding: 15px 34px; width: 550px;"">„Ç≤„Éº„É†„Çí„Çπ„Çø„Éº„Éà„Åô„Çã„Å®„ÄÅ„Çµ„Éº„Éê„Éº„ÅÆÊñ∞„Åó„ÅÑ„Éá„Ç∂„Ç§„É≥„ÇíÊ•Ω„Åó„Çì„Å†„Çä„ÄÅÊµ∑Ë≥ä„Çπ„Çø„Ç§„É´Ë≥û„ÇíÁç≤Âæó„Åó„Åü„Çä„Åß„Åç„Åæ„Åô„ÄÇÊúÄÂàù„ÅÆ6Êó•Èñì„ÅØÊµ∑Ë≥ä„ÅÆÊúçË£Ö„ÇíÂèñÂæó„Åó„ÄÅ7Êó•ÁõÆ„Å´„Éì„Éã„É´„ÅÆËªä‰∏°„ÇíÂÖ•Êâã„Åß„Åç„Åæ„Åô„ÄÇ<br><br>Â§è„Ç§„Éô„É≥„Éà„ÅÆ„É°„Éã„É•„Éº„Å´Ë°®Á§∫„Åï„Çå„Å¶„ÅÑ„ÇãÊµ∑Ë≥äËàπ„ÅØ„ÄÅÊâÄÊåÅÂìÅ„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Å®„Åó„Å¶ÂèñÂæó„Åó„ÄÅ‰∏ñÁïå„Å´ÂÆüÈöõ„ÅÆÊµ∑Ë≥äËàπ„ÇíÁΩÆ„ÅÑ„Å¶Âá∫Ëà™„Åó„Åæ„Åó„Çá„ÅÜÔºÅ</p>
					</td>
				</tr>
				<tr>
					<td>
						<div style=""padding-top: 0px; box-sizing: border-box;"">
							<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">„Å®„Åì„Çç„Åß„ÄÅ„ÅÇ„Å™„Åü„ÅØGrand Rp„Å´ÁôªÈå≤„Åó„Å¶ÈÅä„Çì„Åß„ÅÑ„Çã„ÅÆ„Åß„ÄÅ„ÅîÈÄ£Áµ°„ÅÑ„Åü„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅóËààÂë≥„Åå„Å™„Åë„Çå„Å∞„ÄÅÁßÅ„Å´Áü•„Çâ„Åõ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ</p>
						</div>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" style=""color: #2e2e2e; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>ËààÂë≥„Åå„Å™„Åë„Çå„Å∞</a></td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" href=""https://gta5grand.com"">
						<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 14px; letter-spacing: 0.01em; line-height: 29px; text-decoration: none; padding: 15px 34px; width: 550px;"">gta5grand.com</p>
						</a></td>
				</tr>
			</tbody>
		</table>
	</div>
	</body></html>"
