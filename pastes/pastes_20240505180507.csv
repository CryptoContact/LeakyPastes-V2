id,title,username,language,date,content
MesmWFiE,Untitled,kwest87,C#,Sunday 5th of May 2024 12:32:34 PM CDT,"using System;

namespace ConsoleApp30
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number;
            number = ReturnNumber();
            Console.WriteLine($""–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ {number}."");
        }

        static int ReturnNumber()
        {
            Console.WriteLine(""–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ :"");
            string userInput = Console.ReadLine();
            int number ;

            while (int.TryParse(userInput, out  number) == false)
            {
                Console.WriteLine(""–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ , –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ : "");
                userInput = Console.ReadLine();
            }

            return number;
        }
    }
}"
Kw2fxgSR,aaaaa,argui,Latex,Sunday 5th of May 2024 12:17:26 PM CDT,"140g glutinous rice flour
0.5tbsp of salt
50g sugar
240ml hot milk (or water)
mix everything together and slowly add milk and mix it good
microwave for 90 secs
mix it again
microwave 90 secs
mix again. if middle still liquid put it in again
taste, if it tastes like flour add milk and put back in microwave, undercooked
mix or 5 more mins, VERY HARD STICKY
put corn starch on board
roll it out pretty thinly
cut in bitesize pieces
roll it in hand and its done, add more corn flour to prevent sticking "
LavftDrT,Untitled,kwest87,C#,Sunday 5th of May 2024 12:16:18 PM CDT,"using System;

namespace ConsoleApp30
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number;
            number = ReturnNumber();
            Console.WriteLine($""–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ {number}."");
        }

        static int ReturnNumber()
        {
            Console.WriteLine(""–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ :"");
            string userInput = Console.ReadLine();
            int resultingNumber =0;

            while (int.TryParse(userInput, out int number) == false)
            {
                Console.WriteLine(""–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ , –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ : "");
                userInput = Console.ReadLine();
                number=resultingNumber;
            }

            return resultingNumber;
        }
    }
}"
VaG94vBa,ü§ë G2A.com Free Gift Card Guide May 2024 FIX üí∞,ssss50w,GetText,Sunday 5th of May 2024 12:14:09 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
05 May 2024"
aTHvdqMc,ü§ë G2A.com Free Gift Card Guide May 2024 FIX ü§ë,jusst2k4,GetText,Sunday 5th of May 2024 12:11:00 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_271905.pdf

Working as of:
05 May 2024"
PLA6JiX8,hloubka rekurze minimax OK spolu s casem,max2201111,Python,Sunday 5th of May 2024 12:04:10 PM CDT,"import chess
import time

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False
    for move in history[-10:]:
        if board.is_capture(move):
            return False
    return True

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate() or board.is_insufficient_material() or ten_moves_rule(board):
        return 0
    return 0

def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo, start_time, last_print_time):
    current_time = time.time()
    if current_time - last_print_time[0] >= 1:
        elapsed_hours, remainder = divmod(current_time - start_time, 3600)
        elapsed_minutes, elapsed_seconds = divmod(remainder, 60)
        print(f""\r{int(elapsed_hours):02d}h {int(elapsed_minutes):02d}m {int(elapsed_seconds):02d}s"", end='', flush=True)
        last_print_time[0] = current_time

    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""\nProzkoumano {position_count[0]} pozic."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)
        if depth2 not in depths:
            depths.append(depth2)
            print(f""\nHloubka rekurze: {depth2}"")
        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)
        if depth2 not in depths:
            depths.append(depth2)
            print(f""Hloubka rekurze: {depth2}"")
        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}
start_time = time.time()
last_print_time = [start_time]  # Initialize last print time

best_move, best_score = minimax(board, 22, float('-inf'), float('inf'), True, 0, depths, position_count, memo, start_time, last_print_time)
if best_move:
    move_san = board.san(best_move)
    print(f""\nThe best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""\nNo move found, or the game is over. Score: "", best_score)
"
GMDD0Hc5,dobre i s casem 10 moves rule,max2201111,Python,Sunday 5th of May 2024 11:55:56 AM CDT,"import chess
import time
import sys

def ten_moves_rule(board):
    """"""Custom rule to evaluate a draw condition based on the last ten moves.""""""
    history = list(board.move_stack)
    if len(history) < 10:
        return False
    for move in history[-10:]:
        if board.is_capture(move):
            return False
    return True

def evaluate_board(board, depth):
    if board.is_checkmate():
        return -1000 + depth if board.turn == chess.WHITE else 1000 - depth
    elif board.is_stalemate():
        return 2210
    elif board.is_insufficient_material():
        return 3400
    elif ten_moves_rule(board):
        return 9800
    return 7001  # Default return if none of the above conditions are met

def minimax(board, depth, alpha, beta, maximizing_player, depth2, depths, position_count, memo, start_time, last_print_time):
    current_time = time.time()
    if current_time - last_print_time[0] >= 1:
        elapsed_hours, remainder = divmod(current_time - start_time, 3600)
        elapsed_minutes, elapsed_seconds = divmod(remainder, 60)
        print(f""\r{int(elapsed_hours):02d}h {int(elapsed_minutes):02d}m {int(elapsed_seconds):02d}s"", end='', flush=True)
        last_print_time[0] = current_time

    position_count[0] += 1
    if position_count[0] % 1000000 == 0:
        print(f""\nProzkoumano {position_count[0]} pozic."")

    key = (board.fen(), maximizing_player, depth, alpha, beta)
    if key in memo:
        return memo[key]

    if depth == 0 or board.is_game_over():
        eval = evaluate_board(board, depth2)
        memo[key] = (None, eval)
        return None, eval

    best_move = None
    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, False, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval > max_eval:
                max_eval = eval
                best_move = move
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, max_eval)
        return best_move, max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            _, eval = minimax(board, depth - 1, alpha, beta, True, depth2 + 1, depths, position_count, memo, start_time, last_print_time)
            board.pop()
            if eval < min_eval:
                min_eval = eval
                best_move = move
            beta = min(beta, eval)
            if beta <= alpha:
                break
        memo[key] = (best_move, min_eval)
        return best_move, min_eval

# Initialization and main execution logic
start_fen = ""7K/8/k1P5/7p/8/8/8/8 w - - 0 1""
board = chess.Board(start_fen)
depths = []
position_count = [0]
memo = {}
start_time = time.time()
last_print_time = [start_time]  # Initialize last print time

best_move, best_score = minimax(board, 22, float('-inf'), float('inf'), True, 0, depths, position_count, memo, start_time, last_print_time)
if best_move:
    move_san = board.san(best_move)
    print(f""\nThe best move from position {start_fen} is {move_san} with a score of {best_score}."")
else:
    print(""\nNo move found, or the game is over. Score: "", best_score)
"
sf7raneP,[GMod] Simple Screengrab,SneakySquid,Lua,Sunday 5th of May 2024 11:51:36 AM CDT,"local ScreenMat = CreateMaterial(""ScreenMat"", ""Fillrate"", {})

local function screengrab(open_menu)
	file.CreateDir(""screengrabs"")

	hook.Add(""PostRender"", ""Screengrab"", function()
		local frame_count = FrameNumber()

		render.UpdateScreenEffectTexture(1)
		ScreenMat:SetTexture(""$basetexture"", render.GetScreenEffectTexture(1):GetName())

		cam.Start2D()
			surface.SetMaterial(ScreenMat)
			surface.SetDrawColor(255, 255, 255, 255)
			surface.DrawTexturedRect(0, 0, ScrW(), ScrH())

			surface.SetDrawColor(0, 255, 0, 255)
			surface.DrawRect(0, 0, 10, 10)

			file.Write(string.format(""screengrabs/%i.jpg"", os.time()), render.Capture{
				format = ""jpg"",
				quality = 100,
				x = 0, y = 0,
				w = ScrW(), h = ScrH(),
			})
		cam.End2D()

		if frame_count ~= FrameNumber() then
			while true do end
		end

		if open_menu then
			gui.ActivateGameUI()
		end

		hook.Remove(""PostRender"", ""Screengrab"")
	end)
end

concommand.Add(""screengrab"", function()
	local escape_menu = gui.IsGameUIVisible()

	if escape_menu then
		gui.HideGameUI()
	end

	screengrab(escape_menu)
end)
"
vK55QnXC,Exercicios0505,Smokahontas,C,Sunday 5th of May 2024 11:47:50 AM CDT,"Exercicio 1:
Resposta correta : (A)

C√≥digo:
1. for (i = 0 to 29) {
2.   for (j = 0 to 39) {
3.     if (a[i] == b[j]) {
4.       print(a[i]);
5.     }
6.   }
7. }


////////////////////////////////////////////

Exercicio 2:
3. if (a[i] == b[j]) {

4.       print (a[i]);

5. }

////////////////////////////////////////////

Exercicio 3:

C√°lculo feito:
-a * b++ - c--
= -1 * 2++ - 0--
= -2 - 0
= -2

Ent√£o, o resultado da express√£o -a * b++ - c-- √© -2, correspondendo √† op√ß√£o (E).

////////////////////////////////////////////

EXERCICIO 4:

A: A melhor op√ß√£o para este problema √© uma matriz. por ser uma tabela organizada em linhas e colunas, ideal para representar a planta√ß√£o de caf√©.


B:
int contarFalhasPlantio(int matriz[3][5], int linhas, int colunas) {
    int falhas = 0;
    for (int linha = 0; linha < linhas; linha++) {
        for (int coluna = 0; coluna < colunas; coluna++) {
            if (matriz[linha][coluna] == 0) {
                falhas++;
            }
        }
    }
    return falhas;
}

int main() {
   
    int plantacao[3][5] = {
        {1, 0, 1, 0, 0},
        {0, 1, 0, 1, 0},
        {1, 0, 0, 0, 1}
    };

    int linhas = 3;
    int colunas = 5;

    int totalFalhas = contarFalhasPlantio(plantacao, linhas, colunas);
    printf(""Total de falhas de plantio: %d\n"", totalFalhas);

    return 0;
}"
QhsG80m1,Untitled,kwest87,C#,Sunday 5th of May 2024 11:14:53 AM CDT,"namespace ConsoleApp30
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int number;
            number = ReturnNumber();
            Console.WriteLine($""–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ {number}."");
        }

        static int ReturnNumber()
        {
            Console.WriteLine(""–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ :"");
            string userInput = Console.ReadLine();

            while (int.TryParse(userInput, out int number) == false)
            {
                Console.WriteLine(""–ù–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ , –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ : "");
                userInput = Console.ReadLine();
            }

            int resultingNumber = Convert.ToInt32(userInput);
            return resultingNumber;
        }
    }
}"
RzRvN3VC,Simple CLI C# File Manager,tommarek_CZE,C#,Sunday 5th of May 2024 11:03:21 AM CDT,"using System.Runtime.InteropServices;
using Microsoft.VisualBasic;
using System.Diagnostics;

internal class Program
{
    private static void Main(string[] args)
    {
        // Set current directory value to default
        string currentDir = @""C:\\"";

        Console.WriteLine(""CLI File Manager V1"");
        Console.WriteLine(""Enter 'help' command to get help"");

        // Function that open file with default program
        void OpenWithDefaultProgram(string path)
        {   try {
                // Create new procces, assing explorer as procces and then starts the procces
                using Process fileopener = new Process();

                fileopener.StartInfo.FileName = ""explorer"";
                fileopener.StartInfo.Arguments = ""\"""" + path + ""\"""";
                fileopener.Start();
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        // Function that lists all directories and files
        void listCommand() {
            try {
                Console.WriteLine(""Showing contents of "" + currentDir);
                // For each file, get its name and displays it
                string[] allfiles = Directory.GetFiles(currentDir);
                foreach (var file in allfiles){
                    FileInfo info = new FileInfo(file);
                    Console.WriteLine(info.Name + "" <FILE>"");
                }

                // For each directory, get its name and displays it
                string[] directories = Directory.GetDirectories(currentDir);
                foreach (string dir in directories)
                {
                    string trimmedString = Path.GetFileName(dir);

                    Console.WriteLine(trimmedString + "" <DIRECTORY>"");
                }
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void goCommand() {
            try {
                Console.WriteLine(""Enter directory name"");
                // Read from the console what directory user wanna acces
                string arg = Console.ReadLine();
                // Gets directories inside current directory and scans the list it for the desired directory, if found the current directory would be assigned to desired directory
                string[] directories = Directory.GetDirectories(currentDir);
                foreach (string dir in directories)
                {
                    string trimmedString = Path.GetFileName(dir);
                    if (trimmedString == arg) {
                        currentDir = dir;
                        Console.WriteLine(""Jumped into "" + trimmedString + "" directory"");
                        return;
                    }
                }
                Console.WriteLine(""Directory "" + arg + "" was not founded"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void returnCommand() {
            try {
                // Get parent of current directory and then sets it as current directory
                string parentDirectory = Directory.GetParent(currentDir).FullName;
                currentDir = parentDirectory;
                Console.WriteLine(""Jumped into "" + currentDir + "" directory"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void openCommand() {
            try {
                Console.WriteLine(""Enter file name"");
                // Get arguments from console, what file the user wanna open
                string arg = Console.ReadLine();
                // Gets all files and scans them for desired file, if found it would be opened via OpenWithDefaultProgram function
                string[] allfiles = Directory.GetFiles(currentDir);
                foreach (var file in allfiles){
                    FileInfo info = new FileInfo(file);
                    if (arg == info.Name) {
                        OpenWithDefaultProgram(info.FullName);
                        Console.WriteLine(""File "" + info.Name + "" was opened"");
                        return;
                    }
                }
                Console.WriteLine(""File "" + arg + "" was not founded"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }

        }

        void dcreateCommand() {
            try {
                Console.WriteLine(""Enter directory name that you wanna create"");
                // Gets arguments from console, what directory user wanna create
                string arg = Console.ReadLine();
                string path = currentDir + ""\\"" + arg;
                // Check if directory does not exist, if donsent exist it would create the desired directory
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                    Console.WriteLine(""Directory "" + arg + "" created succefuely"");
                    return;
                }
                Console.WriteLine(""Directory "" + arg + "" already exist"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void fcreateCommand() {
            try {
                // Gets arguments from console, what file user wanna create
                Console.WriteLine(""Enter file name that you wanna create"");
                string arg = Console.ReadLine();
                string path = currentDir + ""\\"" + arg;

                // Check if file does not exist, if donsent exist it would create the desired file
                if (!File.Exists(path))
                {
                    File.Create(path).Dispose();
                    Console.WriteLine(""File "" + arg + "" created succefuely"");
                    return;       
                }
                Console.WriteLine(""File "" + arg + "" already exist"");
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        void deleteCommand() {
            try {
                Console.WriteLine(""Enter file or directory that you wanna delete"");
                // Get the arguments from console, what folder or file user wanna get deleted
                string arg = Console.ReadLine();
                string path = currentDir + ""\\"" + arg;
                // Check if directory exist, if yes it would delete the directory
                if (Directory.Exists(path))
                {
                    Directory.Delete(path, true);
                    Console.WriteLine(""Directory "" + arg + ""succesfully deleted"");
                    return;
                }
                // Check if file exist, if yes delete the file
                else if (File.Exists(path))
                {
                    File.Delete(path);
                    Console.WriteLine(""File "" + arg + ""succesfully deleted"");
                    return;
                }
                Console.WriteLine(""File or directory "" + arg + ""dosen't exist"");            
            } catch {
                Console.WriteLine(""Exception occured while executing command"");
            }
        }

        // Display help menu to the console
        void helpCommand() {
            Console.WriteLine(""Commands list:"");
            Console.WriteLine(""list > display contents of current directory"");
            Console.WriteLine(""go > go to specific directory"");
            Console.WriteLine(""retirn > go to the parent directory"");
            Console.WriteLine(""open > open specific file"");
            Console.WriteLine(""dcreate > create folder in current directory"");
            Console.WriteLine(""fcreate > create file in current directory"");
            Console.WriteLine(""delete > delete specific file or directory"");
            Console.WriteLine(""help > show this current message"");
            Console.WriteLine(""-----\nDon't put arguments behind commands, the argument handler is after you execute the command"");
        }

        // Switch that binds functions to commands
        void handleCommands(string command)
        {
            switch (command)
            {
                case ""list"": // List files/Directories
                    listCommand();
                    break;
                case ""dcreate"": // Create Folder
                    dcreateCommand();
                    break;
                case ""open"": // Open File
                    openCommand();
                    break;
                case ""go"": // Go to directory/path
                    goCommand();
                    break;
                case ""return"": // Return to the lower directory
                    returnCommand();
                    break;
                case ""fcreate"": // Create file
                    fcreateCommand();
                    break;
                case ""help"": // Show help dialog
                    helpCommand();
                    break;
                case ""delete"": // Delete file
                    deleteCommand();
                    break;
                default:
                    Console.WriteLine(""Undefined command"");
                    break;
            }
        }
        
        // Handle console input, and make infinite loop
        void handeInput()
        {
            Console.WriteLine(""          "");
            string command = Console.ReadLine();
            Console.WriteLine(""Command executed> "" + command);
            handleCommands(command);
            handeInput();
        }

        handeInput();
    }
}"
fmWuYvD0,Untitled,Rodunskiy,C#,Sunday 5th of May 2024 10:56:10 AM CDT,"using System;

namespace CSLight
{
    public class Program
    {
        static void Main(string[] args)
        {
            int peopleInQueue;
            int fixedTimeOnePerson = 10;
            int timeInQueueHour;
            int timeInQueueMinute;
            int minutesInHour = 60;

            Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏."");
            peopleInQueue = Convert.ToInt32(Console.ReadLine());

            int totalTimeInQueue = fixedTimeOnePerson * peopleInQueue;

            timeInQueueHour = totalTimeInQueue / minutesInHour;
            timeInQueueMinute = totalTimeInQueue % minutesInHour;

            Console.WriteLine($""–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç—Å—Ç–æ—è—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏ {timeInQueueHour} —á–∞—Å–∞ –∏ {timeInQueueMinute} –º–∏–Ω—É—Ç."");
        }
	}
}



"
1WQP8dx1,car price prediction,aize33,Python,Sunday 5th of May 2024 10:53:40 AM CDT,"# Importing Libraries

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

# Data Collection and Processing

car_dataset = pd.read_csv('car data.csv')
car_dataset.head()
car_dataset.shape
car_dataset.info()

# Checking for missing values

print(car_dataset.isnull().sum())

# Checking the distribution of categorical data

print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

# Categorical data encoding

car_dataset.replace({'Fuel_Type': { 'Petrol': 0, 'Diesel':1, 'CNG':2 }}, inplace=True)
car_dataset.replace({'Seller_Type': { 'Dealer': 0, 'Individual':1 }}, inplace=True)
car_dataset.replace({'Transmission': { 'Manual': 0, 'Automatic':1 }}, inplace=True)

print(car_dataset.head())

# Data splitting into Feature data and Target data

X = car_dataset.drop(['Car_Name', 'Selling_Price'], axis = 1)
y = car_dataset['Selling_Price']

print(X)
print(y)

# Data splitting into training and testing data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 2)


# Model Training : Linear Rgression

lin_reg = LinearRegression()

lin_reg.fit(X_train, y_train)

# Model evaluation : Training data

training_data_prediction = lin_reg.predict(X_train)

# Metrics using R squared eror

error_score = metrics.r2_score(y_train, training_data_prediction)
print('R squared Error : ', error_score)

# Visualize the Actual prices and Predicted prices

plt.scatter(y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Model evaluation : Testing data

test_data_prediction = lin_reg.predict(X_test)

# Metrics using R squared eror in test data

error_score = metrics.r2_score(y_test, test_data_prediction)
print('R squared Error : ', error_score)

# Visualize the Actual prices and Predicted prices in test data

plt.scatter(y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Model Training : Lasso Rgression

lass_reg = Lasso()

lass_reg.fit(X_train, y_train)

# Model evaluation : Training data

training_data_prediction = lass_reg.predict(X_train)

# Metrics using R squared eror

error_score = metrics.r2_score(y_train, training_data_prediction)
print('R squared Error : ', error_score)


# Visualize the Actual prices and Predicted prices

plt.scatter(y_train, training_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Model evaluation : Testing data

test_data_prediction = lass_reg.predict(X_test)

# Metrics using R squared eror in test data

error_score = metrics.r2_score(y_test, test_data_prediction)
print('R squared Error : ', error_score)

# Visualize the Actual prices and Predicted prices in test data

plt.scatter(y_test, test_data_prediction)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual Prices vs Predicted Prices')
plt.show()"
BB2pG4LP,arrays comparison,PhZh,Java,Sunday 5th of May 2024 10:32:41 AM CDT,"// ++++++++++++ Option 1 ++++++++++++

class Praktikum {
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
        String[] participants = {""–ü—ë—Ç—Ä"", ""–ù–∞–¥–µ–∂–¥–∞"", ""–í–∞–ª–µ–Ω—Ç–∏–Ω–∞""};
        // participants[0] = ""–ü—ë—Ç—Ä"";
        // participants[1] = ""–ù–∞–¥–µ–∂–¥–∞"";
        // participants[2] = ""–í–∞–ª–µ–Ω—Ç–∏–Ω–∞"";
        // –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
        String[] documents = {""–ü–∞—Å–ø–æ—Ä—Ç"", ""–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ"", ""–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏""};
        // documents[0] = ""–ü–∞—Å–ø–æ—Ä—Ç"";
        // documents[1] = ""–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ"";
        // documents[2] = ""–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏"";  

        // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (participants.length == documents.length) {
            System.out.println(""–î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤–µ—Ä–Ω–æ. –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"");
            // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ, –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ""–ü—ë—Ç—Ä: –ü–∞—Å–ø–æ—Ä—Ç""
            System.out.println(participants[0] + "": "" + documents[0]);
            System.out.println(participants[1] + "": "" + documents[1]);
            System.out.println(participants[2] + "": "" + documents[2]);
        } else {
            /* –î–ª—è –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—á–∞—Ç—å —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
						 ""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏."" */
            System.out.println(""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏."");
        }
    }
}

// ++++++++++++ Option 2 ++++++++++++

class Praktikum {
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏
        String[] participants = new String[3];
        participants[0] = ""–ü—ë—Ç—Ä"";
        participants[1] = ""–ù–∞–¥–µ–∂–¥–∞"";
        participants[2] = ""–í–∞–ª–µ–Ω—Ç–∏–Ω–∞"";
        // –°–æ–∑–¥–∞–π—Ç–µ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏ (—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã)
        String[] documents = new String[3];
        documents[0] = ""–ü–∞—Å–ø–æ—Ä—Ç"";
        documents[1] = ""–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ"";
        documents[2] = ""–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ —Ä–æ–∂–¥–µ–Ω–∏–∏"";  

        // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ —á–∏—Å–ª—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (participants.length == documents.length) {
            System.out.println(""–î–æ–∫—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤–µ—Ä–Ω–æ. –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:"");
            // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤–µ—Ä–Ω–æ, –Ω–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ""–ü—ë—Ç—Ä: –ü–∞—Å–ø–æ—Ä—Ç""
            System.out.println(participants[0] + "": "" + documents[0]);
            System.out.println(participants[1] + "": "" + documents[1]);
            System.out.println(participants[2] + "": "" + documents[2]);
        } else {
            /* –î–ª—è –æ—à–∏–±–∫–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—á–∞—Ç—å —Ç–∞–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:
						 ""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏."" */
            System.out.println(""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏."");
        }
    }
}"
Y03BVxef,openwrt router,coinwalk,JavaScript,Sunday 5th of May 2024 10:31:32 AM CDT,"uci add_list dhcp.@dnsmasq[0].server=""/partner.googleadservices.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/code.jquery.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.googletagmanager.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/cdn.jsdelivr.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/just-dice.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/altquick.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/freebitcoins.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/newassets.hcaptcha.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/googleads.g.doubleclick.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/pagead2.googlesyndication.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/tpc.googlesyndication.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.google.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/hcaptcha.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/coinspot.com.au/#""
uci add_list dhcp.@dnsmasq[0].server=""/ing.com.au/#""
uci add_list dhcp.@dnsmasq[0].server=""/pastebin.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/challenges.cloudflare.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/s0.2mdn.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/fundingchoicesmessages.google.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/match.adsrvr.org/#""
uci add_list dhcp.@dnsmasq[0].server=""/c1.adform.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/gtrace.mediago.io/#""
uci add_list dhcp.@dnsmasq[0].server=""/analytics.pangle-ads.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/a.tribalfusion.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/cm.g.doubleclick.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/doubleclick.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/fonts.gstatic.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/x.bidswitch.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/dis.criteo.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/cms.quantserve.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.googleadservices.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/adform.net/#""
uci add_list dhcp.@dnsmasq[0].server=""/analytics.google.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.gstatic.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/www.adsensecustomsearchads.com/#""
uci add_list dhcp.@dnsmasq[0].server=""/#/"""
s9uUmHmZ,Untitled,coderbodrul,C++,Sunday 5th of May 2024 10:12:28 AM CDT,"#include<bits/stdc++.h>
using namespace std;
const int mx = 1e6;

map<string, int> state_to_int; //mapping every state to unique value
map<int, string> int_to_state; //getting the state for every int value
string d; // destination state
int ind = 0; // a variable for representing every state to int
vector<int> adj[mx + 1];
vector<int> par(mx + 1, -1);
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
int vis[mx + 1];

void bfs(int strt) {
	queue<int> q;
	q.push(strt);

	while(!q.empty()) {
		int fr = q.front();
		string str = int_to_state[fr];
		q.pop();
		vis[fr] = 1;
		if (str == d) {
            return;
		}

		int x, y, sx, sy;
		for (int i = 0; i < 9; i++) {
			if (str[i] == '0') {
				x = i / 3;
				y = i % 3;
				break;
			}
		}

		for (int i = 0; i < 4; i++) {
			sx = x + dx[i];
			sy = y + dy[i];
			if (sx >= 0  and sx < 3 and sy >= 0  and sy < 3) {
				string tem = str;
				swap(tem[x * 3 + y], tem[sx * 3 + sy]);
				if (state_to_int.find(tem) == state_to_int.end()) {
					state_to_int[tem] = ind;
					int_to_state[ind] = tem;
					ind++;
					adj[fr].push_back(state_to_int[tem]);
					par[state_to_int[tem]] = fr;
				}
			}
		}
		for (int i = 0; i < adj[fr].size(); i++) {
			if (!vis[adj[fr][i]]) {
				q.push(adj[fr][i]);
				vis[adj[fr][i]] = 1;
			}
		}
	}
}

int32_t main() {

	// define destination state & map the state to int
	d = ""123456780"";
	// taking input the source state
	string s = """";
	char c;
	for (int i = 0; i < 3; i++) {
		for (int j = 0; j < 3; j++) {
			cin >> c;
			s += c;
		}
	}

	state_to_int[s] = ind;
	int_to_state[ind] = s;
	ind++;

	memset(vis, 0, sizeof(vis));
	bfs(state_to_int[s]);

	stack<int> st;
	int node = state_to_int[d];
	while(node != -1) {
		st.push(node);
		node = par[node];
	}

	string str;
	while(!st.empty()) {
		str = int_to_state[st.top()];
		st.pop();
		cout << endl;
		for (int i = 0; i < 9; i++) {
			cout << str[i] << "" \n""[i % 3 == 2];
		}
	}

	return 0;
}
"
UxrSqF0k,Untitled,martinms,PHP,Sunday 5th of May 2024 09:35:28 AM CDT,"@extends('layouts.admin')
@section('title', 'Data Konsultasi')

@section('custom_head')
    <style>
        .accordion-button:not(.collapsed) {
            background-color: #696cff;
            color: #fff;
        }
    </style>
@endsection

@section('content')
    <div class=""container-xxl flex-grow-1 container-p-y"">
        <h4 class=""fw-bold py-3 mb-4""><span class=""text-muted fw-light"">Dashboard /</span> Data Konsultasi</h4>

        <!-- Basic Bootstrap Table -->
        <div class=""card mb-3"">
            <div class=""card-header d-flex justify-content-between"">
                <h5 class=""card-title"">Data Konsultasi</h5>

                <a href=""{{ route('admin.konsultasi.index') }}"" class=""btn btn-sm btn-primary"">Kembali</a>
            </div>
            <div class=""card-body border-bottom"">
                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">User</h6>
                    <small class=""text-muted"">{{ $konsultasi->user->name }}</small>
                </div>

                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">Tanggal</h6>
                    <small class=""text-muted"">{{ $konsultasi->created_at->translatedFormat('l, d F Y H:i') }}</small>
                </div>

                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">Penyakit Terdiagnosa</h6>
                    <small class=""text-muted"">{{ $konsultasi->penyakit->nama }}</small>
                </div>

                <div class=""me-2 mb-3"">
                    <h6 class=""mb-0"">Persentase</h6>
                    <small class=""text-muted"">{{ $konsultasi->persentase }}%</small>
                </div>
            </div>
        </div>
        <!--/ Basic Bootstrap Table -->

        <div class=""card mb-3"">
            <div class=""card-header d-flex justify-content-between"">
                <h5 class=""card-title"">Gejala Yang Dipilih</h5>
            </div>
            <div class=""card-body"">
                <div class=""table-responsive text-nowrap"">
                    <table class=""table table-hover dt-data"">
                        <thead>
                        <tr>
                            <th class=""d-flex justify-content-start"">#</th>
                            <th>Kode</th>
                            <th>Nama</th>
                        </tr>
                        </thead>
                        <tbody class=""table-border-bottom-0"">
                        @foreach ($konsultasi->gejala as $gejala)
                            <tr>
                                <td class=""text-start"">
                                    {{ $loop->iteration }}
                                </td>
                                <td>{{ $gejala->kode }}</td>
                                <td>{{ $gejala->nama }}</td>
                            </tr>
                        @endforeach
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class=""card mb-3"">
            <div class=""card-header d-flex justify-content-between"">
                <h5 class=""card-title"">Tabel Nodes</h5>
            </div>
            <div class=""card-body p-4"">
                <div class=""table-responsive rounded-2 mb-4"">
                    <table
                        class=""table table-bordered table-hover text-nowrap customize-table mb-0 align-middle dt-data"">
                        <!--begin::Table head-->
                        <thead>
                        <tr>
                            <th rowspan=""2"" class=""text-center"" style=""vertical-align: middle;"">Gejala</th>
                            <th colspan=""{{ $penyakit->count() }}"" class=""text-center"">Penyakit</th>
                        </tr>
                        <tr>
                            @foreach ($penyakit as $penyakit)
                                <td class=""text-center"">
                                    <span data-bs-toggle=""tooltip""
                                          data-bs-title=""{{ $penyakit->name }}"">{{ $penyakit->kode }}</span>
                                </td>
                            @endforeach
                        </tr>
                        </thead>
                        <!--end::Table head-->
                        <!--begin::Table body-->
                        <tbody>
                        @foreach ($VCIRS->CFMatrix() as $gejalaCode => $data)
                            <tr>
                                <th class=""text-center"">{{ $gejalaCode }}</th>
                                @foreach ($data as $value)
                                    <td class=""text-center"">
                                        {{ $value ?? '-' }}
                                    </td>
                                @endforeach
                            </tr>
                        @endforeach
                        </tbody>
                        <!--end::Table body-->
                    </table>
                </div>
            </div>
        </div>

        <div class=""card w-100 position-relative overflow-hidden"">
            <div class=""px-4 py-3 border-bottom d-flex justify-content-between"">
                <h5 class=""card-title fw-semibold mb-0 lh-sm"">Perhitungan VCIRS</h5>
            </div>
            <!--begin::Card body-->
            <div class=""card-body p-4"">
                <div class=""accordion"" id=""calculations"">
                    @foreach ($VCIRS->calculate() as $data)
                        <h2 class=""accordion-header border"" id=""heading-{{ $loop->index }}"">
                            <button class=""accordion-button {{ $loop->index == 0 ? '' : 'collapsed' }}"" type=""button""
                                    data-bs-toggle=""collapse""
                                    data-bs-target=""#collapse-{{ $loop->index }}""
                                    aria-expanded=""{{ $loop->index == 0 ? 'true' : 'false' }}""
                                    aria-controls=""collapse-{{ $loop->index }}"">
                                ({{ $data['penyakit']->kode }}) {{ $data['penyakit']->nama }}
                                ({{ $data['cf_kombinasi']['persentase'] }}%)
                            </button>
                        </h2>
                        <div id=""collapse-{{ $loop->index }}""
                             class=""accordion-collapse collapse {{ $loop->index == 0 ? 'show' : '' }}""
                             aria-labelledby=""heading-{{ $loop->index }}"" data-bs-parent=""#calculations"">
                            <div class=""accordion-body border"">
                                <h6 class=""mb-2 lh-sm pt-2"">Rule</h6>

                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border text-nowrap customize-table mb-0 align-middle table-hover""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th>Kode</th>
                                            <th>Nama Gejala</th>
                                            <th>Jumlah Node</th>
                                            <th>Node yang menggunakan</th>
                                            <th class=""text-center"">Urutan Node</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['rule'] as $rule)
                                            <tr>
                                                <td>{{ $rule['gejala']->kode }}</td>
                                                <td>{{ $rule['gejala']->nama }}</td>
                                                <td class=""text-center"">{{ $rule['jumlah_node'] }}</td>
                                                <td>
                                                    @foreach ($rule['nodes'] as $node)
                                                        <span class=""badge bg-primary"">
                                                                            P0{{ $node }}#{{ $node }}
                                                                        </span>
                                                    @endforeach
                                                </td>
                                                <td class=""text-center"">{{ $rule['n'] }}</td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!--end::Table-->

                                <h6 class=""mb-2 lh-sm"">Nilai VUR</h6>
                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border text-nowrap table-bordered customize-table mb-0 align-middle table-hover""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th class=""text-center"">Kode Gejala</th>
                                            <th>Nilai VUR</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['vur'] as $vur)
                                            <tr>
                                                <td class=""text-center"">{{ $vur['gejala']->kode }}</td>
                                                <td>
                                                    VUR = <i>Credit</i> x (NS x VO/TO)
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $credit }} &times;
                                                    ({{ $vur['_jumlahNode'] }}
                                                    &times;
                                                    {{ $vur['_urutanVariabel'] }}
                                                    /{{ $vur['_totalVariabel'] }})
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $vur['value'] }}
                                                </td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!-- end::Table-->

                                <ul class=""list-group"">
                                    <li class=""list-group-item"">
                                        <h6 class=""mb-2 lh-sm"">Nilai NUR</h6>
                                        <p>
                                            NUR<sub>j</sub> = <img
                                                src=""{{ asset('assets/images/rumus/rumus nur.png') }}""/>
                                            <br>
                                            NUR = @php
                                                $nurItems = $data['_nurItems'];
                                                $nurDivider = $data['_nurDivider'];
                                            @endphp

                                            @if (count($nurItems) > 0)
                                                ({{ implode(' + ', $nurItems) }}) /
                                                {{ $nurDivider }}
                                            @endif
                                            <br>
                                            NUR = {{ $data['nur'] }}
                                        </p>
                                        <p>Nilai NUR didapatkan: <strong>{{ $data['nur'] }}</strong></p>
                                    </li>
                                    <li class=""list-group-item"">
                                        <h6 class=""mb-2 lh-sm"">Nilai RUR</h6>
                                        <p>
                                            RUR<sub>k</sub> = <img
                                                src=""{{ asset('assets/images/rumus/rumus rur.png') }}""
                                                alt="""">
                                            <br>
                                            NUR = {{ $data['nur'] }}
                                            <br>
                                            RUR = {{ $data['rur'] }} / {{ $data['_rurDivider'] }}
                                            <br>
                                            RUR = {{ $data['rur'] }}
                                        </p>
                                        <p>Nilai RUR didapatkan: <strong>{{ $data['rur'] }}</strong></p>
                                    </li>
                                </ul>

                                <h6 class=""mb-2 mt-3 lh-sm"">Perhitungan Nilai CF</h6>

                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border table-bordered text-nowrap customize-table mb-0 align-middle table-hover""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th class=""text-center"">Kode Gejala</th>
                                            <th class=""text-center"">Jawaban User</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['jawaban_user'] as $jawaban)
                                            <tr>
                                                <td class=""text-center"">{{ $jawaban['gejala']->kode }}</td>
                                                <td class=""text-center"">{{ $jawaban['jawaban'] }}</td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!--end::Table-->

                                <h6 class=""mt-2"">Nilai CF</h6>
                                <!--begin::Table-->
                                <div class=""table-responsive rounded-2 mb-4"">
                                    <table
                                        class=""table border text-nowrap customize-table mb-0 align-middle table-hover table-bordered""
                                        style=""width: 100%;"">
                                        <thead class=""text-dark"">
                                        <tr>
                                            <th rowspan=""2"" class=""text-center""
                                                style=""vertical-align: middle;"">Kode Gejala
                                            </th>
                                            <th colspan=""2"" class=""text-center""
                                                style=""vertical-align: middle;"">Bobot
                                            </th>
                                            <th colspan=""2"" class=""text-center""
                                                style=""vertical-align: middle;"">Nilai
                                            </th>
                                        </tr>
                                        <tr>
                                            <td class=""text-center"">Pakar</td>
                                            <td class=""text-center"">User</td>
                                            <td class=""text-center"">CF</td>
                                            <td class=""text-center"">CFR</td>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        @foreach ($data['bobot'] as $CFValue)
                                            <tr>
                                                <td class=""text-center"">{{ $CFValue['gejala']->kode }}
                                                </td>
                                                <td class=""text-center"">{{ $CFValue['bobot']['pakar'] }}
                                                </td>
                                                <td class=""text-center"">{{ $CFValue['bobot']['user'] }}
                                                </td>
                                                <td>
                                                    <div class=""row"">
                                                        <div class=""col-4"">CF [H,
                                                            E]<sub>{{ removeFromStr($CFValue['gejala']->kode, 'G') }}</sub>
                                                        </div>
                                                        <div class=""col-1"">=</div>
                                                        <div class=""col-7"">CF [H]
                                                            &times; CF [E]
                                                        </div>
                                                    </div>
                                                    <div class=""row"">
                                                        <div class=""col-4""></div>
                                                        <div class=""col-1"">=</div>
                                                        <div class=""col-7"">
                                                            {{ $CFValue['bobot']['pakar'] }}
                                                            &times;
                                                            {{ $CFValue['bobot']['user'] }}
                                                        </div>
                                                    </div>
                                                    <div class=""row"">
                                                        <div class=""col-4""></div>
                                                        <div class=""col-1"">=</div>
                                                        <div class=""col-7"">
                                                            {{ $CFValue['value']['cf'] }}
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>
                                                    CFR<sub>{{ removeFromStr($CFValue['gejala']->kode, 'G') }}</sub>
                                                    = CF [H, E] &times; RUR
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $CFValue['value']['cf'] }}
                                                    &times;
                                                    {{ $data['rur'] }}
                                                    <br>
                                                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                                                    = {{ $CFValue['value']['cfr'] }}
                                                </td>
                                            </tr>
                                        @endforeach
                                        </tbody>
                                    </table>
                                </div>
                                <!--end::Table-->

                                <h6 class=""mt-2"">Nilai CF Kombinasi</h6>

                                <div class=""table-responsive"">
                                    <table class=""table table-hover table-bordered"">
                                        @php
                                            $previousGejala = $data['gejala_penyakit'][0];
                                            $currentLeft = 'CFR' . removeFromStr($previousGejala->kode, 'G');
                                            $previousFormula = '';
                                        @endphp

                                        @for ($i = 0; $i < count($data['gejala_penyakit']) - 1; $i++)
                                            @php
                                                $currentGejala = $data['gejala_penyakit'][$i];
                                                $nextGejala = $data['gejala_penyakit'][$i + 1];

                                                $_left = 'R' . removeFromStr($nextGejala->kode, 'G');
                                                $left = $currentLeft . $_left;
                                                $currentLeft = $left;

                                                $previousGejala = $currentGejala;
                                                $base = ($i == 0) ? $data['bobot'][$i]['value']['cfr'] : $data['cf_kombinasi']['steps'][$i-1];
                                            @endphp

                                            <tr>
                                                <td>
                                                    {!! $left !!}
                                                </td>
                                                <td>
                                                    =
                                                    <br>
                                                    =
                                                    <br>
                                                    =
                                                </td>
                                                <td>
                                                    @for ($j = 0; $j < 3; $j++)
                                                        @if ($j == 0)
                                                            @php
                                                                $_right = $previousFormula . 'R' . removeFromStr($currentGejala->kode, 'G');
                                                                $previousFormula = $_right;

                                                                $right = 'CF' . $_right . ' + CFR' . removeFromStr($nextGejala->kode, 'G') . ' * (1 - CF' . $_right . ')';
                                                            @endphp
                                                            {!! $right !!}
                                                        @elseif ($j == 1)
                                                            <br>
                                                            {{ $base }}
                                                            +
                                                            {{ $data['bobot'][$i + 1]['value']['cfr'] }}
                                                            *
                                                            (1 -
                                                            {{ $base }})
                                                        @elseif ($j == 2)
                                                            <br>
                                                            {{ $data['cf_kombinasi']['steps'][$i] }}
                                                        @endif
                                                    @endfor

                                                </td>
                                            </tr>
                                        @endfor
                                        <tr>
                                            <td>
                                                Nilai CF Kombinasi
                                            </td>
                                            <td>
                                                =
                                                <br>
                                                =
                                            </td>
                                            <td>
                                                {{ $data['cf_kombinasi']['hasil'] }}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>
                                                Persentase
                                            </td>
                                            <td>=</td>
                                            <td>
                                                Nilai CF Kombinasi &times; 100%
                                                <br>
                                                {{ $data['cf_kombinasi']['persentase'] }}%
                                            </td>
                                        </tr>
                                    </table>
                                </div>

                                {{--                                <ul class=""list-group"">--}}
                                {{--                                    <li class=""list-group-item"">--}}
                                {{--                                        <h6 class=""mt-3 mb-0 lh-sm"">Nilai CF Kombinasi</h6>--}}
                                {{--                                        <p>--}}
                                {{--                                            Berdasarkan hasil perhitungan, permasalahan--}}
                                {{--                                            <b>{{ $data['permasalahan']['nama'] }}</b>--}}
                                {{--                                            menghasilkan nilai {{ $data['cf_kombinasi']['result'] }} atau--}}
                                {{--                                            {{ $data['cf_kombinasi']['persentase'] }}% keyakinan.--}}
                                {{--                                        </p>--}}
                                {{--                                    </li>--}}
                                {{--                                </ul>--}}
                            </div>
                        </div>
                    @endforeach
                </div>
            </div>
            <!--end::Card body-->
        </div>

    </div>
@endsection
"
QnpWFYhs,Flush Links,ofmarconi,PHP,Sunday 5th of May 2024 09:29:30 AM CDT,"<?php
/**
 * Plugin Name: Network Flush Rewrite Rules Button
 * Description: Adds a button to the WordPress admin bar to flush rewrite rules across all sites in a Multisite network for Editors and Administrators. Reminds to clear site cache after flushing.
 * Version: 1.0
 * Network: true
 */

add_action('admin_bar_menu', 'add_network_flush_button', 100);

/**
 * Adds a button to the WordPress admin bar if the user is an editor or administrator.
 */
function add_network_flush_button($wp_admin_bar) {
    if (!is_user_logged_in()) {
        return;
    }
    if (!current_user_can('edit_others_posts')) { // Checks if the user can edit other users' posts, common among editors and administrators
        return;
    }

    $args = array(
        'id'    => 'network-flush-rewrite',
        'title' => 'Flush Network Rewrites',
        'href'  => '#',
        'meta'  => array(
            'onclick' => 'flushNetworkRewrites();',
            'class'   => 'flush-rewrite-button',
            'title'   => 'Flush Rewrite Rules Across All Sites'
        )
    );
    $wp_admin_bar->add_node($args);
}

add_action('admin_footer', 'flush_rewrite_javascript');

/**
 * JavaScript to handle the flush action when the button is clicked.
 */
function flush_rewrite_javascript() {
    ?>
    <script type=""text/javascript"">
        function flushNetworkRewrites() {
            if (confirm(""Are you sure you want to flush rewrite rules across all network sites? This action can affect site performance."")) {
                window.location.href = ""<?php echo admin_url('admin-post.php?action=flush_network_rewrites'); ?>"";
            }
        }
    </script>
    <?php
}

add_action('admin_post_flush_network_rewrites', 'handle_network_flush_rewrite');

/**
 * Handles the flush action when the button is clicked.
 */
function handle_network_flush_rewrite() {
    if (!current_user_can('edit_others_posts')) {
        wp_die('You do not have sufficient permissions to perform this action.');
    }

    flush_network_rewrite_rules(); // Assumes the function is defined in previous examples
    wp_redirect(add_query_arg(['flushed' => '1'], admin_url()));
    exit;
}

add_action('admin_notices', 'show_flush_notification');

/**
 * Shows a notification after the flush operation has been completed.
 */
function show_flush_notification() {
    if (isset($_GET['flushed']) && $_GET['flushed'] == '1') {
        echo '<div class=""notice notice-success is-dismissible""><p>Flush completed. Do not forget to clear the ""Site Cache"".</p></div>';
    }
}

// The function flush_network_rewrite_rules is assumed to be defined in previous examples
"
iCvMFBJb,Time,excellent940707,C++,Sunday 5th of May 2024 09:15:32 AM CDT,"//H34121232
#include<iostream>
#include<iomanip>
#include""Time.h""

using namespace std;

Time::Time(int hr, int min, int sec)
{
    setTime(hr, min, sec);
}

Time& Time::setTime(int h, int m, int s){
    second=0;
    if(h>=0&&h<24)second+=h*3600;
    if(m>=0&&m<60)second+=m*60;
    if(s>=0&&s<60)second+=s;
    return *this;
}

Time& Time::setHour(int h){
    if(h>=0&&h<24)second+=h*3600;
    return *this;
}

Time& Time::setMinute(int m){
    if(m>=0&&m<60)second+=m*60;
    return *this;
}

Time& Time::setSecond(int s){
    if(s>=0&&s<60)second+=s;
    return *this;
}

int Time::getHour()const{
    return second/3600;
}

int Time::getMinute()const{
    return (second%3600)/60;
}

int Time::getSecond()const{
    return second%60;
}

void Time::printUniversal(){
    cout<<setfill('0')<<setw(2)<<second/3600<<"":""
        <<setw(2)<<(second%3600)/60<<"":""<<setw(2)<<second%60<<'\n';
}

void Time::printStandard(){
    int hour = second/3600;
    int minute = (second%3600)/60;
    int sec = second%60;
    cout<<((hour==0||hour==12)?12:hour%12)<<"":""
        <<setfill('0')<<setw(2)<<minute<<"":""<<setw(2)
        <<sec<<(hour<12?""AM"":""PM"")<<'\n';
}

int main(){
    Time t;

    t.setHour(18).setMinute(30).setSecond(22);
    cout<<""Universal time: "";
    t.printUniversal();

    cout<<""\nStandard time: "";
    t.printStandard();

    cout<<""\n\nNew standard time: "";
    t.setTime(20,20,20).printStandard();
    cout<<endl;
    return 0;
}"
sMcLUG7Z,task 6,isbasov,Go,Sunday 5th of May 2024 08:15:58 AM CDT,"package main

import (
	""bufio""
	""fmt""
	""os""
	""sort""
	""strconv""
	""strings""
	//""github.com/pkg/profile""
)

type order struct {
	Arrival int
	Index   int
}

type car struct {
	From  int
	To    int
	Cap   int
	Index int
}

func main() {

	//defer profile.Start(profile.CPUProfile).Stop()
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)
	defer out.Flush()

	var t int
	fmt.Fscan(in, &t)

	for l := 0; l < t; l++ {
		var n int
		fmt.Fscan(in, &n)
		orders := make([]order, n)

		for i := 0; i < n; i++ {
			o := order{Index: i}
			fmt.Fscan(in, &o.Arrival)
			orders[i] = o
		}
		sort.SliceStable(orders, func(i, j int) bool { return orders[i].Arrival < orders[j].Arrival })

		var m int
		fmt.Fscan(in, &m)
		cars := make([]car, m)
		for i := 0; i < m; i++ {
			c := car{Index: i}
			fmt.Fscan(in, &c.From, &c.To, &c.Cap)
			cars[i] = c
		}

		sort.SliceStable(cars, func(i, j int) bool {
			if cars[i].From == cars[j].From {
				return cars[i].To < cars[j].To
			}
			return cars[i].From < cars[j].From
		})

		orderCars := make([]string, n)
		var k int
		for i := range orders {
			orderCars[orders[i].Index] = ""-1""
			for j := k; j < m; j++ {
				if orders[i].Arrival >= cars[j].From && orders[i].Arrival <= cars[j].To && cars[j].Cap > 0 {
					orderCars[orders[i].Index] = strconv.Itoa(cars[j].Index + 1)
					cars[j].Cap--
					k = j
					break
				}
			}
		}

		out.WriteString(strings.Join(orderCars, "" ""))
		out.WriteString(""\n"")
	}

}
"
jAnjr93C,Untitled,excellent940707,C++,Sunday 5th of May 2024 08:08:39 AM CDT,"#include <iostream>
#include <string>
#include <iomanip>
using namespace std;
const int MAX_BOOKS = 5;
class Book
{
private:
string title;
string author;
double price;
public:
static int totalSales;
Book(string t,string a,double p):title(t),author(a),price(p){}
Book():title("" ""),author("" ""),price(0){}
Book(Book const& book):title(book.title),author(book.author),price(book.price){}
Book& display()
{
  cout<<setw(10)<<""title: ""<<title<<endl<<setw(10)<<""author: ""<<author<<endl<<setw(10)<<""price: ""<<price;
  return *this;
}
Book& sell()
{
  totalSales+=1;
  return *this;
}
};
class Bookstore
{
public:
Bookstore():ix(0){}
Bookstore& addBook(Book book)
{
  if(ix!=4)
  {
    books[ix++]=book;
  }
  else
  {
    cout<<""the number of books reach the maximum""<<endl;
  }
  return *this;
}
Bookstore& displayBooks()
{
  for(int i=0;i<ix;i++)
    {
      books[i].display();
      cout<<""\n\n"";
    }
  return *this;
}
Bookstore& sellBook(int index)
{
  books[index].sell();
  return *this;
}
private:
Book books[MAX_BOOKS];
int ix;
};
int Book::totalSales=0;
int main() 
{
   Bookstore store;
   // Adding books with chained calls
   store.addBook(Book(""1984"", ""George Orwell"", 9.99))
  .addBook(Book(""Animal Farm"", ""George Orwell"", 7.99))
  .addBook(Book(""The Great Gatsby"", ""F. Scott Fitzgerald"", 14.99))
  .addBook(Book(""A Brief History of Time"", ""Stephen Hawking"", 15.99))
  .addBook(Book(""Sapiens"", ""Yuval Noah Harari"", 18.99));
   // Display all books and sell some books with chained calls
   store.displayBooks()
   .sellBook(1) // Sell ""Animal Farm""
   .sellBook(3); // Sell ""A Brief History of Time""
   // Display total sales
   cout << ""Total Books Sold: "" << Book::totalSales << endl;
   return 0;
}"
BwNXe5qa,Source of True Evil,brandblox,Python,Sunday 5th of May 2024 07:46:24 AM CDT,"#Reverse
num = int(input(""Enter a number: ""))
reversed_num = 0
while num > 0:
    digit = num % 10
    reversed_num = (reversed_num * 10) + digit
    num = num // 10
print(f""The reversed number: {reversed_num}"")

#fibonacchi
num_terms = int(input(""Enter the number of terms for the Fibonacci series: ""))
if num_terms <= 0:
    print(""Invalid input. Please enter a positive integer."")
else:
    fib_series = [0, 1]
    while len(fib_series) < num_terms:
        fib_series.append(fib_series[-1] + fib_series[-2])
    sum_fib_series = sum(fib_series)
    print(f""The sum of the first {num_terms} terms in the Fibonacci series is: {sum_fib_series}"")

#armstrong
num = int(input(""Enter a number: ""))
original_num = num
num_digits = len(str(num))
sum_of_digits = 0
while num > 0:
    digit = num % 10
    sum_of_digits += digit ** num_digits
    num = num // 10
if original_num == sum_of_digits:
    print(f""{original_num} is an Armstrong number."")
else:
    print(f""{original_num} is not an Armstrong number."")


#positive negative sum
sum_positive = 0
sum_negative = 0
for i in range(10):
    num = float(input(f""Enter number {i + 1}: ""))

    if num > 0:
        sum_positive += num
    elif num < 0:
        sum_negative += num

print(f""Sum of positive numbers: {sum_positive}"")
print(f""Sum of negative numbers: {sum_negative}"")


#palindrome

num = int(input(""Enter a number: ""))
original_num = num
reversed_num = 0
while num > 0:
    digit = num % 10
    reversed_num = (reversed_num * 10) + digit
    num = num // 10
if original_num == reversed_num:
    print(f""{original_num} is a palindrome."")
else:
    print(f""{original_num} is not a palindrome."")


* 
* * 
* * * 
* * * * 
* * * * * 

rows = 5
for i in range(0, rows):    
    for j in range(0, i + 1):        
        print(""*"", end=' ')    
    print()

1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 

rows = 6
for i in range(rows):    
    for j in range(i):        
        print(i, end=' ')    
    print('')

1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 

rows = 5
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(j, end=' ')
    print('')

1 
2 3 
4 5 6 
7 8 9 10 
11 12 13 14 15

rows = 5
counter = 1
for i in range(1, rows + 1):
    for j in range(1, i + 1):
        print(counter, end=' ')
        counter += 1
    print('')

        *   
       *  *   
      *  *  *   
     *  *  *  *   
    *  *  *  *  *  

size = 5
m = (2 * size) - 2
for i in range(0, size):
    for j in range(0, m):
        print(end="" "")    
    m = m - 1
    for j in range(0, i + 1):
        print(""* "", end=' ')
    print("" "")

''' OR
n = 5
for i in range(n):
    print(' '*(n-i-1) + '* ' * (i))
print()
'''

*  *  *  *  *   
 *  *  *  *   
  *  *  *   
   *  *   
    *

size = 5
m = 0
for i in range(size, 0, -1):
    for j in range(0, m):
        print(end="" "")
    m = m + 1
    for j in range(0, i):
        print(""* "", end=' ')
    print("" "")

''' OR
n = 5
for i in range(n-1,-1,-1):
    print(' ' * (n - i - 1) + '* ' * (i))
'''

    * 
   * * 
  * * * 
 * * * * 
  * * * 
   * * 
    * 

rows = 3
k = 2 * rows - 2
for i in range(0, rows):
    for j in range(0, k):
        print(end="" "")
    k = k - 1
    for j in range(0, i + 1):
        print(""* "", end="""")
    print("""")
    
k = rows - 2

for i in range(rows, -1, -1):
    for j in range(k, 0, -1):
        print(end="" "")
    k = k + 1
    for j in range(0, i + 1):
        print(""* "", end="""")
    print("""")
    
    
'''OR    
    
n = 3
for i  in range(n):
    print(' '*(n-i-1) + '*' * (2*i+1))
for i in range(n-2,-1,-1):
    print(' ' * (n - i - 1) + '*' * (2 * i + 1))'''


#calculator

def addition(num1, num2):
    num1 += num2
    return num1

def subtraction(num1, num2):
    num1 -= num2
    return num1

def mul(num1, num2):
    num1 *= num2
    return num1

def division(num1, num2):
    if num2 != 0:
        num1 /= num2
        return num1
    else:
        return ""Cannot divide by zero""

def module(num1, num2):
    if num2 != 0:
        num1 %= num2
        return num1
    else:
        return ""Cannot perform modulus with zero""

def default(num1, num2):
    return ""Incorrect day""

switcher = {
    1: addition,
    2: subtraction,
    3: mul,
    4: division,
    5: module
}

def switch(operation):
    num1 = float(input(""Enter the first number: ""))
    num2 = float(input(""Enter the second number: ""))
    return switcher.get(operation, default)(num1, num2)

print('''You can perform the following operations:

1. **Addition**
2. **Subtraction**
3. **Multiplication**
4. **Division**
5. **Modulus (Remainder)''')

# Take input from the user
choice = int(input(""Select an operation from 1 to 5: ""))
print(switch(choice))




#Fibonacchi using recursion
def fibonacci(n):
    if n <= 0:
        return ""Please enter a positive integer""
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib_series = fibonacci(n - 1)
        fib_series.append(fib_series[-1] + fib_series[-2])
        return fib_series

n = int(input(""Enter the value of 'n' to print Fibonacci series up to n: ""))

result = fibonacci(n)
print(f""Fibonacci series up to {n}: {result}"")



#GCD using recurtion
def gcd_recursive(a, b):
    if b == 0:
        return a
    else:
        return gcd_recursive(b, a % b)

# Take input from the user
num1 = int(input(""Enter the first number: ""))
num2 = int(input(""Enter the second number: ""))

result = gcd_recursive(num1, num2)
print(f""The GCD of {num1} and {num2} is: {result}"")



# Wap to print sum of list
l1 = [12+13+14+15+56]
sum = 0

for i  in l1:
    sum += i

print(sum

#output
110

#Wap to print mal element
ls=[]
print(""Enter Elements in array"")
for i in range(5):
    el=int(input())
    ls.append(el)
    
maxel=ls[0]

mi=0
for i in range(1,len(ls)):
    if ls[i]>maxel:
        maxel=ls[i]
        mi = i
        
print(""Max element is: "",maxel)

#output
Enter Elements in array
13
67
34
99
12
Max element is:  99

#wap to print common elements
def compare_lists(list1, list2):
    common_elements = set(list1) & set(list2)
    return list(common_elements)


list1_input = input(""Enter elements of the first list separated by spaces: "")
list1 = list(map(str, list1_input.split()))


list2_input = input(""Enter elements of the second list separated by spaces: "")
list2 = list(map(str, list2_input.split()))

common_elements = compare_lists(list1, list2)

if common_elements:
    print(""Common elements: "", common_elements)
else:
    print(""No common elements found."")

#output
Enter elements of the first list separated by spaces: 12 13 45 67 89
Enter elements of the second list separated by spaces: 12 45 67 89
Common elements:  ['12', '45', '67', '89']

#Wap to remove even numbers
def remove_even_numbers(input_list):
    return [num for num in input_list if int(num) % 2 != 0]

user_input = input(""Enter a list of numbers separated by spaces: "")
numbers_list = user_input.split()

filtered_list = remove_even_numbers(numbers_list)

print(""List after removing even numbers:"", filtered_list)


#output
Enter a list of numbers separated by spaces: 12 34 56 77 43 31
List after removing even numbers: ['77', '43', '31']

#Wap to print number of occurance
def count_occurrences(array, target_element):
    return array.count(target_element)

user_input = input(""Enter a list of numbers separated by spaces: "")
numbers_list = user_input.split()


target_element = input(""Enter the element to count: "")

occurrences = count_occurrences(numbers_list, target_element)

print(f""The number of occurrences of {target_element} in the list is: {occurrences}"")

#output
Enter a list of numbers separated by spaces: 12 33 33 45 67 54
Enter the element to count: 33
The number of occurrences of 33 in the list is: 2


#accept and print matrix
matrix = []

for i in range(3):
    row = []
    for j in range(3):
        row.append(int(input(f""Enter element at position ({i+1}, {j+1}): "")))
    matrix.append(row)

print(""Entered 3x3 matrix:"")
for row in matrix:
    print(row)

output:
Enter element at position (1, 1): 1
Enter element at position (1, 2): 2
Enter element at position (1, 3): 3
Enter element at position (2, 1): 4
Enter element at position (2, 2): 5
Enter element at position (2, 3): 6
Enter element at position (3, 1): 7
Enter element at position (3, 2): 8
Enter element at position (3, 3): 9
Entered 3x3 matrix:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]


#accept matrix and element sum
matrix = []
a=0
sum=0

for i in range(3):
    row = []
    for j in range(3):
        a=int(input(f""Enter element at position ({i+1}, {j+1}): ""))
        row.append(a)
        sum+=a
    matrix.append(row)

print(""Entered 3x3 matrix:"")
for row in matrix:
    print(row)
    
print(""Sum = "",sum)

Output:
Enter element at position (1, 1): 1
Enter element at position (1, 2): 2
Enter element at position (1, 3): 3
Enter element at position (2, 1): 4
Enter element at position (2, 2): 5
Enter element at position (2, 3): 6
Enter element at position (3, 1): 7
Enter element at position (3, 2): 8
Enter element at position (3, 3): 9
Entered 3x3 matrix:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
Sum =  45



#Accept matrix and trace
matrix = []

for i in range(3):
    row = []
    for j in range(3):
        element = int(input(f""Enter element at position ({i+1}, {j+1}): ""))
        row.append(element)
    matrix.append(row)

print(""Entered 3x3 matrix:"")
for row in matrix:
    print(row)

trace = 0
for i in range(3):
    trace += matrix[i][i]

print(f""Trace of the matrix: {trace}"")

Output:
Enter element at position (1, 1): 1
Enter element at position (1, 2): 2
Enter element at position (1, 3): 3
Enter element at position (2, 1): 4
Enter element at position (2, 2): 5
Enter element at position (2, 3): 6
Enter element at position (3, 1): 7
Enter element at position (3, 2): 8
Enter element at position (3, 3): 9
Entered 3x3 matrix:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]
Trace of the matrix: 15



#Matrix multiplication
import numpy as np

matrix1 = []
for i in range(3):
    row = []
    for j in range(3):
        element = int(input(f""Enter element for matrix1 at position ({i+1}, {j+1}): ""))
        row.append(element)
    matrix1.append(row)

matrix2 = []
for i in range(3):
    row = []
    for j in range(3):
        element = int(input(f""Enter element for matrix2 at position ({i+1}, {j+1}): ""))
        row.append(element)
    matrix2.append(row)

print(""Entered 3x3 matrix 1:"")
for row in matrix1:
    print(row)

print(""\nEntered 3x3 matrix 2:"")
for row in matrix2:
    print(row)

array1 = np.array(matrix1)
array2 = np.array(matrix2)


result_array = np.dot(array1, array2)

print(""\nResult of matrix multiplication:"")
print(result_array)

Output:
Enter element for matrix1 at position (1, 1): 1
Enter element for matrix1 at position (1, 2): 2
Enter element for matrix1 at position (1, 3): 3
Enter element for matrix1 at position (2, 1): 4
Enter element for matrix1 at position (2, 2): 5
Enter element for matrix1 at position (2, 3): 6
Enter element for matrix1 at position (3, 1): 7
Enter element for matrix1 at position (3, 2): 8
Enter element for matrix1 at position (3, 3): 9
Enter element for matrix2 at position (1, 1): 1
Enter element for matrix2 at position (1, 2): 10
Enter element for matrix2 at position (1, 3): 11
Enter element for matrix2 at position (2, 1): 12
Enter element for matrix2 at position (2, 2): 13
Enter element for matrix2 at position (2, 3): 14
Enter element for matrix2 at position (3, 1): 15
Enter element for matrix2 at position (3, 2): 16
Enter element for matrix2 at position (3, 3): 17
Entered 3x3 matrix 1:
[1, 2, 3]
[4, 5, 6]
[7, 8, 9]

Entered 3x3 matrix 2:
[1, 10, 11]
[12, 13, 14]
[15, 16, 17]

Result of matrix multiplication:
[[ 70  84  90]
 [154 201 216]
 [238 318 342]]



#Count vowels, consonants and blanks
def count_vowels_consonants_blanks(string):
    vowels = 'aeiouAEIOU'
    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
    blanks = ' '

    vowel_count = 0
    consonant_count = 0
    blank_count = 0

    for char in string:
        if char in vowels:
            vowel_count += 1
        elif char not in consonants:
            consonant_count += 1
        elif char in blanks:
            blank_count += 1

    return vowel_count, consonant_count, blank_count

input_string = input(""Enter a string: "")
vowels, consonants, blanks = count_vowels_consonants_blanks(input_string)
print(""Vowels:"", vowels)
print(""Consonants:"", consonants)
print(""Blanks:"", blanks)

#Output:
Enter a string: Arijit is my name
Vowels: 6
Consonants: 8
Blanks: 3

#find substring in a string
def find_substring(string, substring):    
    index = string.find(substring)
    if index != -1:
        print(f""'{substring}' found at index {index} using find() method."")
    else:
        print(f""'{substring}' not found using find() method."")


input_string = input(""Enter the main string: "")
input_substring = input(""Enter the substring to find: "")

find_substring(input_string, input_substring)


#Output:
Enter the main string: i live in India
Enter the substring to find: India
'India' found at index 10 using find() method.


#print reverse and check palindrome
def is_palindrome(string):
    reversed_string = string[::-1]
    if string == reversed_string:
        return True, reversed_string
    else:
        return False, reversed_string

input_string = input(""Enter a string: "")
check, reversed_string = is_palindrome(input_string)

print(""Original string:"", input_string)
print(""Reversed string:"", reversed_string)

if check:
    print(""The string is a palindrome."")
else:
    print(""The string is not a palindrome."")


#Output:
Enter a string: malayalam
Original string: malayalam
Reversed string: malayalam
The string is a palindrome.

#Print pattern
word = ""INDIA""
for i in range(len(word), 0, -1):
    print(word[:i])

#Ouput:
INDIA
INDI
IND
IN
I




def tuple_length(tup):
    return len(tup)
my_tuple = (1, 2, 3, 4, 5)
print(""Length of the tuple:"", tuple_length(my_tuple))

Output: 
Length of the tuple: 5

def tuple_to_string(tup):
    return ''.join(tup)

my_tuple = ('Hello', ' ', 'world', '!')
result = tuple_to_string(my_tuple)
print(""Converted string:"", result)

Output:
Converted string: Hello world!

def common_elements(tup1, tup2):
    common = tuple(x for x in tup1 if x in tup2)
    return common

tuple1 = (1, 2, 3, 4, 5)
tuple2 = (4, 5, 6, 7, 8)
result = common_elements(tuple1, tuple2)
print(""Common elements:"", result)

Output:
Common elements: (4, 5)

def merge_tuples(tup1, tup2):
    merged_list = list(tup1)
    for item in tup2:
        if item not in merged_list:
            merged_list.append(item)
    merged_tuple = tuple(merged_list)
    return merged_tuple

tuple1 = (1, 2, 3, 4, 5)
tuple2 = (4, 5, 6, 7, 8)
result = merge_tuples(tuple1, tuple2)
print(""Merged tuple without duplicates:"", result)

Output: 
Merged tuple without duplicates: (1, 2, 3, 4, 5, 6, 7, 8)

def even_odd_numbers(tup):
    even_numbers = tuple(num for num in tup if num % 2 == 0)
    odd_numbers = tuple(num for num in tup if num % 2 != 0)
    return even_numbers, odd_numbers

my_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9)
even, odd = even_odd_numbers(my_tuple)
print(""Even numbers:"", even)
print(""Odd numbers:"", odd)

Output:
Even numbers: (2, 4, 6, 8)
Odd numbers: (1, 3, 5, 7, 9)

def tuple_product(tup):
    product = 1
    for num in tup:
        product *= num
    return product

my_tuple = (1, 2, 3, 4, 5)
result = tuple_product(my_tuple)
print(""Product of all elements in the tuple:"", result)

Output:
Product of all elements in the tuple: 120


emails = tuple()
username = tuple()
domainname = tuple()
n = int(input(""How many email ids you want to enter?: ""))
for i in range(0, n):
    emid = input(""> "")
    emails = emails + (emid,)
    spl = emid.split(""@"")
    username = username + (spl[0],)
    domainname = domainname + (spl[1],)

print(""\nThe email ids in the tuple are:"")
print(emails)

print(""\nThe username in the email ids are:"")
print(username)

print(""\nThe domain name in the email ids are:"")
print(domainname)


Output:
How many email ids you want to enter?: 2
> arijit@gmail.com
> abir@outlook.com

The email ids in the tuple are:
('arijit@gmail.com', 'abir@outlook.com')

The username in the email ids are:
('arijit', 'abir')

The domain name in the email ids are:
('gmail.com', 'outlook.com')



#Q1. python program to check if a string starts with the and end with spain use regex


import re

def check_string(input_string):
    pattern = r'^the.*spain$'
    if re.match(pattern, input_string, re.IGNORECASE):
        return True
    else:
        return False

test_string1 = input(""Enter string: "")

print(check_string(test_string1))

#output: 
Enter string: the spain
True
Enter string: the spain not
False


#Q. program to find all lowercase charcters aplhabetically between a and m, use regex
import re

def find_lower_chars(input_string):
    pattern = r'[a-m]'
    result = re.findall(pattern, input_string)
    return result

user_input = input(""Enter a string: "")
lowercase_chars = find_lower_chars(user_input)
print(""Lowercase characters between 'a' and 'm':"", lowercase_chars)

#output:
Enter a string: The quick brown fox jumps over the lazy dog
Lowercase characters between 'a' and 'm': ['h', 'e', 'i', 'c', 'k', 'b', 'f', 'j', 'm', 'e', 'h', 'e', 'l', 'a', 'd', 'g']

#Q. program to search for the first white space character in the string


import re

txt = ""The rain in Spain""
x = re.search(""\s"", txt)

print(""The first white-space character is located in position:"", x.start())

#Output:
The first white-space character is located in position: 3

#Q. program to split at each whitespace character using regex

import re

def split_at_whitespace(input_string):
    return re.split(r'\s+', input_string)

user_input = input(""Enter a string: "")
result = split_at_whitespace(user_input)
print(""Split at each whitespace character:"", result)


#Output: 
Enter a string: This is a demo input.
Split at each whitespace character: ['This', 'is', 'a', 'demo', 'input.']


#Q. replace every white space character with the number nine

import re

def replace_whitespace_with_nine(input_string):
    return re.sub(r'\s', '9', input_string)

user_input = input(""Enter a string: "")
result = replace_whitespace_with_nine(user_input)
print(""String with every whitespace character replaced with '9':"", result)


#Output:
Enter a string: This is a demo input
String with every whitespace character replaced with '9': This9is9a9demo9inputp


#Q: check if email valid or not:
import re

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    regex = re.compile(pattern)
    return bool(regex.match(email))

user_email = input(""Enter your email address: "")

if validate_email(user_email):
    print(""Valid email address!"")
else:
    print(""Invalid email address. Please enter a valid email."")


#Output:
Enter your email address: arijit@gmail.com
Valid email address!

Enter your email address: arijit@gmail
Invalid email address. Please enter a valid email.



#Q1. python program to check if a string starts with the and end with spain use regex


import re

def check_string(input_string):
    pattern = r'^the.*spain$'
    if re.match(pattern, input_string, re.IGNORECASE):
        return True
    else:
        return False

test_string1 = input(""Enter string: "")

print(check_string(test_string1))

#output: 
Enter string: the spain
True
Enter string: the spain not
False


#Q. program to find all lowercase charcters aplhabetically between a and m, use regex
import re

def find_lower_chars(input_string):
    pattern = r'[a-m]'
    result = re.findall(pattern, input_string)
    return result

user_input = input(""Enter a string: "")
lowercase_chars = find_lower_chars(user_input)
print(""Lowercase characters between 'a' and 'm':"", lowercase_chars)

#output:
Enter a string: The quick brown fox jumps over the lazy dog
Lowercase characters between 'a' and 'm': ['h', 'e', 'i', 'c', 'k', 'b', 'f', 'j', 'm', 'e', 'h', 'e', 'l', 'a', 'd', 'g']

#Q. program to search for the first white space character in the string


import re

txt = ""The rain in Spain""
x = re.search(""\s"", txt)

print(""The first white-space character is located in position:"", x.start())

#Output:
The first white-space character is located in position: 3

#Q. program to split at each whitespace character using regex

import re

def split_at_whitespace(input_string):
    return re.split(r'\s+', input_string)

user_input = input(""Enter a string: "")
result = split_at_whitespace(user_input)
print(""Split at each whitespace character:"", result)


#Output: 
Enter a string: This is a demo input.
Split at each whitespace character: ['This', 'is', 'a', 'demo', 'input.']


#Q. replace every white space character with the number nine

import re

def replace_whitespace_with_nine(input_string):
    return re.sub(r'\s', '9', input_string)

user_input = input(""Enter a string: "")
result = replace_whitespace_with_nine(user_input)
print(""String with every whitespace character replaced with '9':"", result)


#Output:
Enter a string: This is a demo input
String with every whitespace character replaced with '9': This9is9a9demo9inputp


#Q: check if email valid or not:
import re

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    regex = re.compile(pattern)
    return bool(regex.match(email))

user_email = input(""Enter your email address: "")

if validate_email(user_email):
    print(""Valid email address!"")
else:
    print(""Invalid email address. Please enter a valid email."")


#Output:
Enter your email address: arijit@gmail.com
Valid email address!

Enter your email address: arijit@gmail
Invalid email address. Please enter a valid email.



#Bubble sort
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

arr = []
size = int(input(""Enter the size of the array: ""))
print(""Enter the elements of the array:"")
for _ in range(size):
    element = int(input())
    arr.append(element)

bubble_sort(arr)
print(""Sorted array is:"", arr)




# Creating a dictionary with key-value pairs using dict() function taking user input

my_dict = {}
num_pairs = int(input(""Enter the number of key-value pairs: ""))

for i in range(num_pairs):
    key = input(""Enter key {}: "".format(i+1))
    value = input(""Enter value {}: "".format(i+1))
    my_dict[key] = value

print(""Dictionary created:"", my_dict)

#output
Enter the number of key-value pairs: 2
Enter key 1: hello
Enter value 1: 2
Enter key 2: word
Enter value 2: 2
Dictionary created: {'hello': '2', 'word': '2'}


#WAP in python to insert three elements and Pop 1 element from a Dictionary.

my_dict = {}

my_dict['apple'] = 10
my_dict['banana'] = 20
my_dict['orange'] = 30

print(""Original dictionary:"", my_dict)

popped_item = my_dict.popitem()

print(""Popped item:"", popped_item)
print(""Dictionary after popping one element:"", my_dict)

#output:
Original dictionary: {'apple': 10, 'banana': 20, 'orange': 30}
Popped item: ('orange', 30)
Dictionary after popping one element: {'apple': 10, 'banana': 20}


#WAP in python to find sum of all items in a Dictionary 

my_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
total_sum = sum(my_dict.values())
print(""Sum of all items in the dictionary:"", total_sum)

#output:
Sum of all items in the dictionary: 100


# WAP in python update the value of a dictionary in Python if the particular key exists. If the key is not
#present in the dictionary, we will simply print that the key does not exist

my_dict = {'a': 10, 'b': 20, 'c': 30}

key_to_update = input(""Enter the key to update: "")
new_value = input(""Enter the new value: "")

if key_to_update in my_dict:
    my_dict[key_to_update] = new_value
else:
    print(""The key does not exist"")

print(""Updated dictionary:"", my_dict)

#output:
Enter the key to update: a
Enter the new value: 6
Updated dictionary: {'a': '6', 'b': 20, 'c': 30}


#Write a program to get the maximum and minimum value of dictionary

my_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 5}

max_value = max(my_dict.values())
min_value = min(my_dict.values())

print(""Maximum value in the dictionary:"", max_value)
print(""Minimum value in the dictionary:"", min_value)


#output
Maximum value in the dictionary: 30
Minimum value in the dictionary: 5"
dHF6A9Du,–°–ü–†–ò–ù–¢ ‚Ññ 7 | –û–¥–Ω–æ—Å–≤—è–∑–Ω—ã–π —Å–ø–∏—Å–æ–∫ | –£—Ä–æ–∫ 4: –ü–æ–∫–æ—Ä—è–µ–º –∏—Ç–µ—Ä–∞—Ç–æ—Ä—ã,chevengur,C++,Sunday 5th of May 2024 07:46:14 AM CDT,"#include <cassert>
#include <cstddef>
#include <string>
#include <utility>

template <typename Type>
class SingleLinkedList {
	// –£–∑–µ–ª —Å–ø–∏—Å–∫–∞
	struct Node {
		Node() = default;
		Node(const Type& val, Node* next)
			: value(val)
			, next_node(next) {
		}
		Type value;
		Node* next_node = nullptr;
	};


    template <typename ValueType>
    class BasicIterator {
        // –ö–ª–∞—Å—Å —Å–ø–∏—Å–∫–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, —á—Ç–æ–±—ã –∏–∑ –º–µ—Ç–æ–¥–æ–≤ —Å–ø–∏—Å–∫–∞
        // –±—ã–ª –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞
        friend class SingleLinkedList;

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—â–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ —É–∑–µ–ª —Å–ø–∏—Å–∫–∞
        explicit BasicIterator(Node* node): node_(node) {
        }

    public:
        // –û–±—ä—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–∞—é—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –æ —Å–≤–æ–π—Å—Ç–≤–∞—Ö —ç—Ç–æ–≥–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞

        // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞ ‚Äî forward iterator
        // (–∏—Ç–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–µ —Ä–∞–∑—ã–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
        using iterator_category = std::forward_iterator_tag;
        // –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –∏—Ç–µ—Ä–∞—Ç–æ—Ä
        using value_type = Type;
        // –¢–∏–ø, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
        using difference_type = std::ptrdiff_t;
        // –¢–∏–ø —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        using pointer = ValueType*;
        // –¢–∏–ø —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        using reference = ValueType&;

        BasicIterator() = default;

        BasicIterator(const BasicIterator<Type>& other) noexcept {
            node_ = other.node_;
        }

        BasicIterator& operator=(const BasicIterator& rhs) = default;

        [[nodiscard]] bool operator==(const BasicIterator<const Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? true : false;
        }

        [[nodiscard]] bool operator!=(const BasicIterator<const Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? false : true;

        }

        [[nodiscard]] bool operator==(const BasicIterator<Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? true : false;
        }

        [[nodiscard]] bool operator!=(const BasicIterator<Type>& rhs) const noexcept {
            return ((rhs.node_ == nullptr && node_ == nullptr) || node_ == rhs.node_) ? false : true;
        }

        BasicIterator& operator++() noexcept {
            node_ = node_->next_node;
            return *this;
        }

        BasicIterator operator++(int) noexcept {
            auto old_value(*this);
            ++(*this);
            return old_value;
        }

        [[nodiscard]] reference operator*() const noexcept {
            return node_->value;
        }

        [[nodiscard]] pointer operator->() const noexcept {
            return &node_->value;
        }

    private:
        Node* node_ = nullptr;
    };

public:

    using value_type = Type;
    using reference = value_type&;
    using const_reference = const value_type&;

	SingleLinkedList() : head_(), size_(0) {};

	~SingleLinkedList() { Clear(); };

	void PushFront(const Type& value) {
		head_.next_node = new Node(value, head_.next_node);
		++size_;
	}

	void Clear() noexcept {
		while (head_.next_node)
		{
			Node* new_node = head_.next_node->next_node;
			delete head_.next_node;
			head_.next_node = new_node;
		}
		size_ = 0;
	}

	[[nodiscard]] size_t GetSize() const noexcept {
		return size_;
	}

	[[nodiscard]] bool IsEmpty() const noexcept {
		return (size_ == 0) ? true : false;
	}

    // –ò—Ç–µ—Ä–∞—Ç–æ—Ä, –¥–æ–ø—É—Å–∫–∞—é—â–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
    using Iterator = BasicIterator<Type>;
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π –∏—Ç–µ—Ä–∞—Ç–æ—Ä, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è —á—Ç–µ–Ω–∏—è –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å–ø–∏—Å–∫–∞
    using ConstIterator = BasicIterator<const Type>;

    [[nodiscard]] Iterator begin() noexcept {
        return Iterator{ head_.next_node };
    }

    [[nodiscard]] Iterator end() noexcept {
        return Iterator{ nullptr };
    }

    [[nodiscard]] ConstIterator begin() const noexcept {
        return ConstIterator{ head_.next_node };
    }

    [[nodiscard]] ConstIterator end() const noexcept {
        return ConstIterator{ nullptr };
    }

    [[nodiscard]] ConstIterator cbegin() const noexcept {
        return ConstIterator{ head_.next_node };
    }

    [[nodiscard]] ConstIterator cend() const noexcept {
        return ConstIterator{ nullptr };
    }

private:
	Node head_;
	size_t size_;
};

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É SingleLinkedList
void Test2() {
    // –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—É—Å—Ç–æ–º—É —Å–ø–∏—Å–∫—É
    {
        SingleLinkedList<int> list;
        // –ö–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–º –≤–µ—Ä—Å–∏—è–º begin()/end()
        const auto& const_list = list;

        // –ò—Ç–µ—Ä–∞—Ç–æ—Ä—ã begin –∏ end —É –ø—É—Å—Ç–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–∞–≤–Ω—ã –¥—Ä—É–≥ –¥—Ä—É–≥—É
        assert(list.begin() == list.end());
        assert(const_list.begin() == const_list.end());
        assert(list.cbegin() == list.cend());
        assert(list.cbegin() == const_list.begin());
        assert(list.cend() == const_list.end());
    }

    // –ò—Ç–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –Ω–µ–ø—É—Å—Ç–æ–º—É —Å–ø–∏—Å–∫—É
    {
        SingleLinkedList<int> list;
        const auto& const_list = list;

        list.PushFront(1);
        assert(list.GetSize() == 1u);
        assert(!list.IsEmpty());

        assert(const_list.begin() != const_list.end());
        assert(const_list.cbegin() != const_list.cend());
        assert(list.begin() != list.end());

        assert(const_list.begin() == const_list.cbegin());

        assert(*list.cbegin() == 1);
        *list.begin() = -1;
        assert(*list.cbegin() == -1);

        const auto old_begin = list.cbegin();
        list.PushFront(2);
        assert(list.GetSize() == 2);

        const auto new_begin = list.cbegin();
        assert(new_begin != old_begin);
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        {
            auto new_begin_copy(new_begin);
            assert((++(new_begin_copy)) == old_begin);
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å—Ç–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
        {
            auto new_begin_copy(new_begin);
            assert(((new_begin_copy)++) == new_begin);
            assert(new_begin_copy == old_begin);
        }
        // –ò—Ç–µ—Ä–∞—Ç–æ—Ä, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —Ä–∞–≤–µ–Ω –∏—Ç–µ—Ä–∞—Ç–æ—Ä—É end()
        {
            auto old_begin_copy(old_begin);
            assert((++old_begin_copy) == list.end());
        }
    }
    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ç–æ—Ä–æ–≤
    {
        SingleLinkedList<int> list;
        list.PushFront(1);
        // –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ ConstIterator –∏–∑ Iterator
        SingleLinkedList<int>::ConstIterator const_it(list.begin());
        assert(const_it == list.cbegin());
        assert(*const_it == *list.cbegin());

        SingleLinkedList<int>::ConstIterator const_it1;
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ ConstIterator'—É –∑–Ω–∞—á–µ–Ω–∏—è Iterator
        const_it1 = list.begin();
        assert(const_it1 == const_it);
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ ->
    {
        using namespace std;
        SingleLinkedList<std::string> string_list;

        string_list.PushFront(""one""s);
        assert(string_list.cbegin()->length() == 3u);
        string_list.begin()->push_back('!');
        assert(*string_list.begin() == ""one!""s);
    }
}

int main() {
    Test2();
}"
HuX5Q2u8,bookstore,excellent940707,C++,Sunday 5th of May 2024 07:41:41 AM CDT,"#include <iostream>
#include <string>
using namespace std;
// Assuming MAX_BOOKS is a constant defining the maximum number of books
const int MAX_BOOKS = 5;
// You need to define the Book class with its members, constructor, copy constructor, and methods
class Book{
private:
    string title;
    string author;
    double price;
public:
    static int totalSales;

    Book(const string &t="""", const string &a="""", const double &p=0):
    title(t), author(a), price(p){}

    Book(const Book &x):
    title(x.title), author(x.author), price(x.price){}

    Book& display(){
        cout<<""title: ""<<title<<'\n';
        cout<<""author: ""<<author<<'\n';
        cout<<""price: ""<<price<<'\n';
        return *this;
    }

    Book& sell(){
        cout<<""Sell: ""<<title<<'\n';
        totalSales+=1;
        return *this;
    }

    const string gettitle()const{
        return title;
    }
};

// You need to define the Bookstore class with its members, constructor, and methods
class Bookstore{
private:
    Book books[MAX_BOOKS];
    int num;
public:
    Bookstore():num(0){}

    Bookstore& addBook(Book book){
        for(int i=0;i<MAX_BOOKS;++i){
            if(books[i].gettitle()==""""){
                books[i]=book;
                num++;
                return *this;
            }
        }
        cout<<""num of books is out of range\n"";
        return *this;
    }

    Bookstore& displayBooks(){
        cout<<""Book list:\n"";
        for(int i=0;i<num;++i){
            books[i].display();
            cout<<'\n';
        }
        return *this;
    }

    Bookstore& sellBook(int index){
        if(books[index].gettitle()==""""){
            cout<<""index is not exist\n"";
            return *this;
        }
        books[index].sell();
        books[index]=Book();
        num--;
        return *this;
    }
};

int Book::totalSales=0;

int main() {
 Bookstore store;
 // Adding books with chained calls
 store.addBook(Book(""1984"", ""George Orwell"", 9.99))
 .addBook(Book(""Animal Farm"", ""George Orwell"", 7.99))
 .addBook(Book(""The Great Gatsby"", ""F. Scott Fitzgerald"", 14.99))
 .addBook(Book(""A Brief History of Time"", ""Stephen Hawking"", 15.99))
 .addBook(Book(""Sapiens"", ""Yuval Noah Harari"", 18.99));
 // Display all books and sell some books with chained calls
 store.displayBooks()
 .sellBook(1) // Sell ""Animal Farm""
 .sellBook(3); // Sell ""A Brief History of Time""
 // Display total sales
 cout << ""Total Books Sold: "" << Book::totalSales <<endl;
 return 0;
}
"
8gF75FbP,task 9,isbasov,Go,Sunday 5th of May 2024 07:38:45 AM CDT,"package main

import (
	""bufio""
	""fmt""
	""math""
	""os""
	""strconv""
	//""github.com/pkg/profile""
)

type optic struct {
	From, To int
}

func main() {

	//defer profile.Start(profile.CPUProfile).Stop()
	in := bufio.NewReader(os.Stdin)
	out := bufio.NewWriter(os.Stdout)
	defer out.Flush()

	var t int
	fmt.Fscan(in, &t)

	for k := 0; k < t; k++ {

		var n, start int
		startVal := math.MaxInt
		fmt.Fscan(in, &n)
		points := make([]int, n)
		for i := 0; i < n; i++ {
			fmt.Fscan(in, &points[i])
			if points[i] < startVal {
				start = i
				startVal = points[i]
			}
		}

		var m int
		fmt.Fscan(in, &m)
		optics := make(map[optic]int)
		for i := 0; i < m; i++ {
			var from, to, val int
			fmt.Fscan(in, &from, &to, &val)
			optics[optic{from - 1, to - 1}] = val
			optics[optic{to - 1, from - 1}] = val
		}

		visits := make(map[int]bool)

		l := start
		cost := startVal
		for {
			visits[l] = true

			if len(visits) == n {
				break
			}

			min := math.MaxInt

			for i := range visits {
				for j := 0; j < n; j++ {

					if !visits[j] {
						val := points[j]
						if v, ok := optics[optic{i, j}]; ok {
							if v < val {
								val = v
							}
						}

						if val < min {
							min, l = val, j
						}
					}
				}
			}

			cost += min
		}

		out.WriteString(strconv.Itoa(cost))
		out.WriteString(""\n"")

	}
}
"
W0TTxLhv,Untitled,_KAGATUN_,C#,Sunday 5th of May 2024 07:34:42 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace AnarchyInHospital
{
    public static class Program
    {
        static void Main(string[] args)
        {
            const string CommandFullNameSorting = ""1"";
            const string CommandAgeSorting = ""2"";
            const string CommandDiseaseSorting = ""3"";
            const string CommandExit = ""4"";

            List<Patient> patients = new List<Patient>
            {
                new Patient (""–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"", 50, ""–¢—É–±–µ—Ä–∫—É–ª–µ–∑""),
                new Patient (""–ü–µ—Ç—Ä–æ–≤ –ù–∏–∫–æ–ª–∞–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á"", 35, ""–ë—Ä–∞–Ω—Ö–∏—Ç""),
                new Patient (""–°–µ—Ä–≥–µ–µ–≤ –ò–ª—å—è –ü–µ—Ç—Ä–æ–≤–∏—á"", 45, ""–ü–Ω–µ–≤–º–æ–Ω–∏—è""),
                new Patient (""–°–æ–∫–æ–ª–æ–≤—Å–∫–∏–π –ò–≤–∞–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á"", 29, ""Covid-19""),
                new Patient (""–ê–±—Ä–∞–º–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–∏—á"",44, ""–ì—Ä–∏–ø""),
                new Patient (""–í–æ—Ä–æ–±—å–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á"", 30, ""–¢—É–±–µ—Ä–∫—É–ª–µ–∑""),
                new Patient (""–ö–æ—Ä–µ—à–∫–æ–≤ –í–∞–ª–µ—Ä–∏–π –°—Ç–µ–ø–∞–Ω–æ–≤–∏—á"", 32, ""Covid-19""),
                new Patient (""–ß–µ—á–µ–∫–æ–≤ –ê—Ä—Ç–µ–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"", 57, ""–ì—Ä–∏–ø""),
                new Patient (""–ö—Ä–∏–∫—É–Ω–æ–≤ –ú–∏—Ö–∞–∏–ª –ï–≤–≥–µ–Ω—å–µ–≤–∏—á"", 53, ""–ë—Ä–∞–Ω—Ö–∏—Ç""),
                new Patient (""–ó–∞–π—Ü–µ–≤ –Æ—Ä–∏–π –ê–Ω—Ç–æ–Ω–æ–≤–∏—á"", 34, ""–≠–±–æ–ª–∞""),
                new Patient (""–í–æ—Ä—á—É–Ω–æ–≤ –ê–Ω–∞—Ç–æ–ª–∏–π –Æ—Ä—å–µ–≤–∏—á"", 25, ""–ë—Ä–∞–Ω—Ö–∏—Ç""),
                new Patient (""–Æ—Ä–æ–≤ –ê–Ω—Ç–æ–Ω –ù–∏–∫–æ–ª–∞–µ–≤–∏—á"", 36, ""–ì—Ä–∏–ø""),
                new Patient (""–ö–æ–∑–ª–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"", 70, ""Covid-19""),
            };

            SearchEngine searchEngine = new SearchEngine(patients);

            bool isWork = true;

            while (isWork)
            {
                Console.WriteLine(""\n–ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞:\n"");
                Console.WriteLine($""{CommandFullNameSorting} - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏"");
                Console.WriteLine($""{CommandAgeSorting} - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É"");
                Console.WriteLine($""{CommandDiseaseSorting} - —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—é"");
                Console.WriteLine($""{CommandExit} - –≤—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"");

                string userInpun = Console.ReadLine();

                switch (userInpun)
                {
                    case CommandFullNameSorting:
                        searchEngine.ShowByFullName();
                        break;

                    case CommandAgeSorting:
                        searchEngine.ShowByAge();
                        break;

                    case CommandDiseaseSorting:
                        searchEngine.ShowByDisease();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine(""\n–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã\n"");
                        break;
                }

                Console.ReadKey();
                Console.Clear();
            }
        }
    }

    class Patient
    {
        public Patient(string fullName, int age, string disease)
        {
            FullName = fullName;
            Disease = disease;
            Age = age;
        }

        public string FullName { get; private set; }
        public int Age { get; private set; }
        public string Disease { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""–§–ò–û: {FullName}, –í–æ–∑—Ä–∞—Å—Ç: {Age}, –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ: {Disease}"");
        }
    }

    class SearchEngine
    {
        private List<Patient> _patients;

        public SearchEngine(List<Patient> patients)
        {
            _patients = patients;
        }

        public void ShowByFullName()
        {
            var sortedPatients = _patients.OrderBy(patient => patient.FullName);
            ShowPatients(sortedPatients);
        }

        public void ShowByAge()
        {
            var sortedPatients = _patients.OrderBy(patient => patient.Age);
            ShowPatients(sortedPatients);
        }

        public void ShowByDisease()
        {
            Console.WriteLine(""\n–í–≤–µ–¥–∏—Ç–µ –∏—Å–∫–æ–º—É—é –±–æ–ª–µ–∑–Ω—å:\n"");
            string userInput = Console.ReadLine();

            var sortedPatients = _patients.Where(patient => patient.Disease.ToLower() == userInput.ToLower());

            if (sortedPatients.Any())
            {
                ShowPatients(sortedPatients);
            }
            else
            {
                Console.WriteLine(""\n–ü–∞—Ü–∏–µ–Ω—Ç —Å —Ç–∞–∫–æ–π –±–æ–ª–µ–∑–Ω—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω\n"");
            }
        }

        private void ShowPatients(IEnumerable<Patient> sortedPatients)
        {
            foreach (var patient in sortedPatients)
            {
                patient.ShowInfo();
            }
        }
    }
}

"
8TpcU0uL,DFPlayer,Magella,C,Sunday 5th of May 2024 07:17:58 AM CDT,"/***************************************************
DFPlayer - A Mini MP3 Player For Arduino
 <https://www.dfrobot.com/product-1121.html>
 
 ***************************************************
 This example shows the basic function of library for DFPlayer.
 
 Created 2016-12-07
 By [Angelo qiao](Angelo.qiao@dfrobot.com)
 
 GNU Lesser General Public License.
 See <http://www.gnu.org/licenses/> for details.
 All above must be included in any redistribution
 ****************************************************/

/***********Notice and Trouble shooting***************
 1.Connection and Diagram can be found here
 <https://www.dfrobot.com/wiki/index.php/DFPlayer_Mini_SKU:DFR0299#Connection_Diagram>
 2.This code is tested on Arduino Uno, Leonardo, Mega boards.
 ****************************************************/

#include ""Arduino.h""
#include ""DFRobotDFPlayerMini.h""

#if (defined(ARDUINO_AVR_UNO) || defined(ESP8266))   // Using a soft serial port
#include <SoftwareSerial.h>
SoftwareSerial softSerial(/*rx =*/4, /*tx =*/5);
#define FPSerial softSerial
#else
#define FPSerial Serial1
#endif

DFRobotDFPlayerMini myDFPlayer;
void printDetail(uint8_t type, int value);

void setup()
{
#if (defined ESP32)
  FPSerial.begin(9600, SERIAL_8N1, /*rx =*/D3, /*tx =*/D2);
#else
  FPSerial.begin(9600);
#endif

  Serial.begin(115200);

  Serial.println();
  Serial.println(F(""DFRobot DFPlayer Mini Demo""));
  Serial.println(F(""Initializing DFPlayer ... (May take 3~5 seconds)""));
  
  if (!myDFPlayer.begin(FPSerial, /*isACK = */true, /*doReset = */true)) {  //Use serial to communicate with mp3.
    Serial.println(F(""Unable to begin:""));
    Serial.println(F(""1.Please recheck the connection!""));
    Serial.println(F(""2.Please insert the SD card!""));
    while(true){
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
  }
  Serial.println(F(""DFPlayer Mini online.""));
  
  myDFPlayer.volume(10);  //Set volume value. From 0 to 30
  myDFPlayer.play(1);  //Play the first mp3
}

void loop()
{
  static unsigned long timer = millis();
  
  if (millis() - timer > 3000) {
    timer = millis();
    myDFPlayer.next();  //Play next mp3 every 3 second.
  }
  
  if (myDFPlayer.available()) {
    printDetail(myDFPlayer.readType(), myDFPlayer.read()); //Print the detail message from DFPlayer to handle different errors and states.
  }
}

void printDetail(uint8_t type, int value){
  switch (type) {
    case TimeOut:
      Serial.println(F(""Time Out!""));
      break;
    case WrongStack:
      Serial.println(F(""Stack Wrong!""));
      break;
    case DFPlayerCardInserted:
      Serial.println(F(""Card Inserted!""));
      break;
    case DFPlayerCardRemoved:
      Serial.println(F(""Card Removed!""));
      break;
    case DFPlayerCardOnline:
      Serial.println(F(""Card Online!""));
      break;
    case DFPlayerUSBInserted:
      Serial.println(""USB Inserted!"");
      break;
    case DFPlayerUSBRemoved:
      Serial.println(""USB Removed!"");
      break;
    case DFPlayerPlayFinished:
      Serial.print(F(""Number:""));
      Serial.print(value);
      Serial.println(F("" Play Finished!""));
      break;
    case DFPlayerError:
      Serial.print(F(""DFPlayerError:""));
      switch (value) {
        case Busy:
          Serial.println(F(""Card not found""));
          break;
        case Sleeping:
          Serial.println(F(""Sleeping""));
          break;
        case SerialWrongStack:
          Serial.println(F(""Get Wrong Stack""));
          break;
        case CheckSumNotMatch:
          Serial.println(F(""Check Sum Not Match""));
          break;
        case FileIndexOut:
          Serial.println(F(""File Index Out of Bound""));
          break;
        case FileMismatch:
          Serial.println(F(""Cannot Find File""));
          break;
        case Advertise:
          Serial.println(F(""In Advertise""));
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
  
}
"
E0kiXbjA,wayfire.ini (old),bluebyt,INI file,Sunday 5th of May 2024 07:04:39 AM CDT,"[alpha]
min_value = 0.100000
modifier = <alt> <super> 

[animate]
close_animation = fire
duration = 100
enabled_for = (type equals ""toplevel"" | (type equals ""x-or"" & focusable equals true))
fade_duration = 400
fade_enabled_for = type equals ""overlay""
fire_color = \#B22303FF
fire_duration = 300
fire_enabled_for = none
fire_particle_size = 16.000000
fire_particles = 2000
open_animation = zoom
random_fire_color = false
startup_duration = 600
zoom_duration = 500
zoom_enabled_for = none

[annotate]
clear_workspace = <alt> <super> KEY_C
draw = <alt> <super> BTN_LEFT
from_center = true
line_width = 3.000000
method = draw
stroke_color = \#FF0000FF

[autorotate-iio]
lock_rotation = false
rotate_down = <ctrl> <super> KEY_DOWN
rotate_left = <ctrl> <super> KEY_LEFT
rotate_right = <ctrl> <super> KEY_RIGHT
rotate_up = <ctrl> <super> KEY_UP

[autostart]

0_0 = systemctl --user import-environment WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
0_1 = dbus-update-activation-environment --systemd WAYLAND_DISPLAY DISPLAY XAUTHORITY XDG_CURRENT_DESKTOP=sway
autostart_wf_shell = false
background = wf-background
# bar = waybar -c  ~/.config/waybar/config_wayfire_now.ini -s ~/.config/waybar/style_wayfire_now.css &
bar =
dock = wf-dock
launcher02 = brave-beta
launcher03 = GST_PLUGIN_FEATURE_RANK=pulsesink:NONE totem /mnt/media/Videos/Chillout006/chillout006.m3u &
launcher04 = gthumb
# launcher05 = shotwell
launcher06 = gnome-tweaks
launcher07 = thunar
launcher08 = nautilus
launcher09 = tilix --geometry=65x17 -a app-new-window -x ""ncmpcpp""
launcher10 = xfce4-terminal
launcher11 = gnome-terminal
launcher12 = gnome-system-monitor
launcher13 = ~/.config/scripts/./eww-start3.sh
launcher14 = ulauncher --hide-window
launcher15 = gnome-control-center
launcher16 = chromium
launcher17 = pcmanfm
launcher18 = GST_PLUGIN_FEATURE_RANK=pulsesink:NONE io.elementary.videos /mnt/media/Videos/Chillout007/AnthonyKeyrouzDontBeShy.mp4
launcher19 = cavalier
launcher20 = catfish
launcher21 = evolution
launcher22 = gnome-text-editor
launcher23 = swayosd-server
launcher24 = swayosd-libinput-backend
launcher25 = notify-send -a aurora ""hello $(whoami)""
launcher26 = blueman-manager
launcher27 = pavucontrol
# launcher28 = terminator -e bpytop
launcher28 = 
launcher29 = g4music
launcher30 = /usr/bin/xava
launcher31 = pactl load-module module-switch-on-connect
launcher32 = swww init && swww img ~/Pictures/Nord/Nord_wall2.jpeg
launcher33 = ~/.config/scripts/./ironbar

notifications = mako
polkit-gnome = /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
# portal = /usr/libexec/xdg-desktop-portal

[background-view]
file = 
inhibit_input = true

[bench]
average_frames = 25
position = top_center

[blur]
blur_by_default = type is ""toplevel""
bokeh_degrade = 1
bokeh_iterations = 15
bokeh_offset = 5.000000
box_degrade = 1
box_iterations = 2
box_offset = 1.000000
gaussian_degrade = 1
gaussian_iterations = 2
gaussian_offset = 1.000000
kawase_degrade = 8
kawase_iterations = 2
kawase_offset = 2.000000
method = gaussian
saturation = 1.000000
toggle = none

[command]
binding_launcher = <ctrl> KEY_SPACE
binding_rofi = <ctrl> KEY_G
binding_wofi = <ctrl> KEY_B
binding_logout = <super> KEY_ESC
binding_mute = KEY_MUTE
binding_screenshot = KEY_SYSRQ
binding_slurp = <ctrl> KEY_SYSRQ
binding_terminal = <super> KEY_ENTER
binding_voldown = KEY_VOLUMEDOWN
binding_volup = KEY_VOLUMEUP
command_launcher = ulauncher-toggle &
command_rofi = rofi -show drun &
command_wofi = wofi &
command_logout = wlogout
# command_mute = pactl set-sink-mute @DEFAULT_SINK@ toggle
# command_screenshot = grim $HOME/Downloads/screenshot-$(date ""+%Y-%m-%d-%H:%M:%S"").png
# command_slurp = slurp | grim -g - ~/Downloads/slurped.png
command_screenshot = ~/.bin/grimshot.sh --notify save screen
command_slurp = ~/.bin/grimshot.sh --notify save window

command_terminal = blackbox
command_mute = swayosd-client --output-volume mute-toggle
command_voldown = wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%- | swayosd-client --output-volume lower
command_volup = wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+ | swayosd-client --output-volume raise

[core]
background_color = \#1A1A1AFF
close_top_view = <super> KEY_Q
focus_button_with_modifiers = false
focus_buttons = BTN_LEFT | BTN_MIDDLE | BTN_RIGHT
focus_buttons_passthrough = true
max_render_time = -1
plugins = ipc ipc-rules stipc alpha animate autostart command cube expo fast-switcher fisheye grid foreign-toplevel gtk-shell idle move place resize switcher vswitch window-rules wm-actions wobbly wrot zoom scale wf-info background-view wsets
preferred_decoration_mode = client
transaction_timeout = 100
vheight = 3
vwidth = 3
xwayland = true

[crosshair]
line_color = \#FF0000FF
line_width = 2

[cube]
activate = <alt> <ctrl> BTN_LEFT
background = \#1A1A1AFF
background_mode = simple
cubemap_image =
deform = 1
initial_animation = 350
light = true
rotate_left = none
rotate_right = none
skydome_mirror = true
skydome_texture = 
speed_spin_horiz = 0.020000
speed_spin_vert = 0.020000
speed_zoom = 0.070000
zoom = 0.100000

[decoration]
active_color = \#222222AA
border_size = 0
button_order = minimize maximize close
font = sans-serif
ignore_views = none
inactive_color = \#333333DD
title_height = 0

[expo]
background = \#1A1A1AFF
duration = 300
inactive_brightness = 0.700000
keyboard_interaction = true
offset = 10
select_workspace_1 = <ctrl> KEY_1
select_workspace_2 = KEY_2
select_workspace_3 = KEY_3
select_workspace_4 = KEY_4
select_workspace_5 = KEY_5
select_workspace_6 = KEY_6
select_workspace_7 = KEY_7
select_workspace_8 = KEY_8
select_workspace_9 = KEY_9
toggle = <super>  | hotspot left-top 10x10 200
transition_length = 200

[extra-gestures]
close_fingers = 20
move_delay = 500
move_fingers = 3

[fast-switcher]
activate = <alt> KEY_ESC
activate_backward = <alt> <shift> KEY_ESC
inactive_alpha = 0.700000

[fisheye]
radius = 450.000000
toggle = <ctrl> <super> KEY_F
zoom = 7.000000

[focus-steal-prevent]
cancel_keys = KEY_ENTER
deny_focus_views = none
timeout = 1000

[follow-focus]
change_output = true
change_view = true
focus_delay = 50
raise_on_top = true
threshold = 10

[force-fullscreen]
constrain_pointer = false
constraint_area = view
key_toggle_fullscreen = <alt> <super> KEY_F
preserve_aspect = true
transparent_behind_views = true
x_skew = 0.000000
y_skew = 0.000000

[foreign-toplevel]

[grid]
duration = 300
restore = <super> KEY_DOWN | <super> KEY_KP0
slot_b = <super> KEY_KP2
slot_bl = <super> KEY_KP1
slot_br = <super> KEY_KP3
slot_c = <super> KEY_UP | <super> KEY_KP5
slot_l = <super> KEY_LEFT | <super> KEY_KP4
slot_r = <super> KEY_RIGHT | <super> KEY_KP6
slot_t = <super> KEY_KP8
slot_tl = <super> KEY_KP7
slot_tr = <super> KEY_KP9
type = crossfade

[gtk-shell]

[hide-cursor]
hide_delay = 2000
toggle = <ctrl> <super> KEY_H

[hinge]
filename = /sys/bus/iio/devices/iio:device1/in_angl0_raw
flip_degree = 180
poll_freq = 200

[idle]
cube_max_zoom = 1.500000
cube_rotate_speed = 1.000000
cube_zoom_speed = 1000
disable_initially = false
disable_on_fullscreen = false
dpms_timeout = -1
screensaver_timeout = 120
toggle = none

[input]
click_method = default
cursor_size = 24
cursor_theme = Graphite-dark-cursors
disable_touchpad_while_mouse = false
disable_touchpad_while_typing = false
drag_lock = false
gesture_sensitivity = 1.000000
kb_capslock_default_state = false
kb_numlock_default_state = true
kb_repeat_delay = 400
kb_repeat_rate = 40
left_handed_mode = false
middle_emulation = false
modifier_binding_timeout = 400
mouse_accel_profile = default
mouse_cursor_speed = 0.000000
mouse_scroll_speed = 1.000000
natural_scroll = false
scroll_method = default
tablet_motion_mode = default
tap_to_click = true
touchpad_accel_profile = default
touchpad_cursor_speed = 0.000000
touchpad_scroll_speed = 1.000000
xkb_layout = us,ca
xkb_model = pc105
xkb_options = grp:alt_shift_toggle
xkb_rules = evdev
xkb_variant = altgr-intl

[input-device]
output = 

[invert]
preserve_hue = false
toggle = <super> KEY_I

[ipc]

[ipc-rules]

[join-views]

[keycolor]
color = \#000000FF
opacity = 0.250000
threshold = 0.500000

[mag]
default_height = 500
toggle = <alt> <super> KEY_M
zoom_level = 75

[move]
activate = <super> BTN_LEFT
enable_snap = true
enable_snap_off = true
join_views = false
preview_base_border = \#404080CC
preview_base_color = \#8080FF80
preview_border_width = 3
quarter_snap_threshold = 50
snap_off_threshold = 200
snap_threshold = 10
workspace_switch_after = -1

[oswitch]
next_output = <super> KEY_O
next_output_with_win = <shift> <super> KEY_O

[output]
mode = auto
position = auto
scale = 1.000000
transform = normal

[place]
mode = center

[preserve-output]
last_output_focus_timeout = 10000

[resize]
activate = <super> BTN_RIGHT
activate_preserve_aspect = none

[scale]
allow_zoom = false
bg_color = \#1A1A1AE6
duration = 400
inactive_alpha = 0.750000
include_minimized = false
interact = false
middle_click_close = false
minimized_alpha = 0.450000
spacing = 50
text_color = \#CCCCCCFF
title_font_size = 16
title_overlay = all
title_position = center
toggle = <super> KEY_P
toggle_all = <super> KEY_W

[scale-title-filter]
bg_color = \#00000080
case_sensitive = false
font_size = 30
overlay = true
share_filter = false
text_color = \#CCCCCCCC

[showrepaint]
reduce_flicker = true
toggle = <alt> <super> KEY_S

[simple-tile]
animation_duration = 0
button_move = <super> BTN_LEFT
button_resize = <super> BTN_RIGHT
inner_gap_size = 5
keep_fullscreen_on_adjacent = true
key_focus_above = <super> KEY_K
key_focus_below = <super> KEY_J
key_focus_left = <super> KEY_H
key_focus_right = <super> KEY_L
key_toggle = <super> KEY_T
outer_horiz_gap_size = 0
outer_vert_gap_size = 0
preview_base_border = \#404080CC
preview_base_color = \#8080FF80
preview_border_width = 3
tile_by_default = all

[switcher]
next_view = <alt> KEY_TAB
prev_view = <alt> <shift> KEY_TAB
speed = 500
view_thumbnail_rotation = 30
view_thumbnail_scale = 1.000000

[view-shot]
capture = <alt> <super> BTN_MIDDLE
command = notify-send ""The view under cursor was captured to %f""
filename = /tmp/snapshot-%F-%T.png

[vswipe]
background = \#1A1A1AFF
delta_threshold = 24.000000
duration = 180
enable_free_movement = false
enable_horizontal = true
enable_smooth_transition = false
enable_vertical = true
fingers = 4
gap = 32.000000
speed_cap = 0.050000
speed_factor = 256.000000
threshold = 0.350000

[vswitch]
background = \#1A1A1AFF
binding_down = <ctrl> KEY_DOWN
binding_last = 
binding_left = <ctrl> KEY_LEFT
binding_right = <ctrl> KEY_RIGHT
binding_up = <ctrl> KEY_UP
duration = 300
gap = 20
send_win_down = 
send_win_last = 
send_win_left = 
send_win_right = 
send_win_up = 
with_win_down = <ctrl> <super> KEY_DOWN
with_win_last = 
with_win_left = <ctrl> <super> KEY_LEFT
with_win_right = <ctrl> <super> KEY_RIGHT
with_win_up = <ctrl> <super> KEY_UP
wraparound = true

[water]
activate = <ctrl> <super> BTN_LEFT

[wayfire-shell]

[wf-info]

[window-rules]

rule_001 = on created if app_id is ""org.gnome.Nautilus"" then move 270 100
# rule_002 = on created if app_id is ""org.gnome.Nautilus"" then set alpha 0.7
rule_003 = on created if app_id is ""org.gnome.Nautilus"" then assign_workspace 0 0

rule_004 = on created if app_id is ""gnome-terminal-server"" then move 270 750
rule_005 = on created if app_id is ""gnome-terminal-server"" then set alpha 0.7
rule_006 = on created if app_id is ""gnome-terminal-server"" then assign_workspace 0 0

rule_007 = on created if app_id is ""tilix"" then move 1350 100
rule_008 = on created if app_id is ""tilix"" then set alpha 0.7
rule_009 = on created if app_id is ""tilix"" then assign_workspace 0 0

rule_010 = on created if app_id is ""totem"" then move 1300 750
# rule_011 = on created if app_id is ""totem"" then set alpha 0.7
rule_012 = on created if app_id is ""totem"" then assign_workspace 0 0

rule_013 = on created if app_id is ""firefox"" then move 270 70
rule_014 = on created if app_id is ""firefox"" then set alpha 1.0
rule_015 = on created if app_id is ""firefox"" then assign_workspace 1 0

rule_016 = on created if app_id is ""chromium"" then move 280 70
rule_017 = on created if app_id is ""chromium"" then set alpha 1.0
rule_018 = on created if app_id is ""chromium"" then assign_workspace 1 0

rule_019 = on created if app_id is ""org.gnome.tweaks"" then move 270 100
# rule_020 = on created if app_id is ""org.gnome.tweaks"" then set alpha 0.7
rule_021 = on created if app_id is ""org.gnome.tweaks"" then assign_workspace 0 1

rule_022 = on created if app_id is ""thunar"" then move 270 100
# rule_023 = on created if app_id is ""thunar"" then set alpha 1.0
rule_024 = on created if app_id is ""thunar"" then assign_workspace 2 0

rule_025 = on created if app_id is ""xfce4-terminal"" then move 270 700
rule_026 = on created if app_id is ""xfce4-terminal"" then set alpha 1.0
rule_027 = on created if app_id is ""xfce4-terminal"" then assign_workspace 2 0

# rule_028 = on created if app_id is ""gedit"" then move 1000 150
# rule_029 = on created if app_id is ""gedit"" then set alpha 0.6
# rule_030 = on created if app_id is ""gedit"" then assign_workspace 2 0

rule_031 = on created if app_id is ""shotwell"" then move 270 100
# rule_032 = on created if app_id is ""shotwell"" then set alpha 0.8
rule_033 = on created if app_id is ""shotwell"" then assign_workspace 2 1

#rule_034 = on created if app_id is ""gthumb"" then move 1400 500
rule_034 = on created if app_id is ""gthumb"" then move 270 100
# rule_035 = on created if app_id is ""gthumb"" then set alpha 0.8
rule_036 = on created if app_id is ""gthumb"" then assign_workspace 2 1

# rule_037 = on created if app_id is ""lite-xl"" then move 1160 150
# rule_038 = on created if app_id is ""lite-xl"" then set alpha 0.8
# rule_039 = on created if app_id is ""lite-xl"" then assign_workspace 2 0

rule_040 = on created if app_id is ""pcmanfm"" then move 270 100
# rule_041 = on created if app_id is ""pcmanfm"" then set alpha 0.7
rule_042 = on created if app_id is ""pcmanfm"" then assign_workspace 2 2

rule_043 = on created if app_id is ""org.gnome.SystemMonitor"" then move 1350 730
# rule_044 = on created if app_id is ""org.gnome.SystemMonitor"" then set alpha 0.7
rule_045 = on created if app_id is ""org.gnome.SystemMonitor"" then assign_workspace 0 1

rule_046 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then move 1300 700
# rule_047 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then set alpha 0.9
rule_048 = on created if app_id is ""io.github.celluloid_player.Celluloid"" then assign_workspace 2 2

rule_049 = on created if app_id is ""ulauncher"" then center
rule_050 = on created if app_id is ""ulauncher"" then set alpha 0.7

rule_052 = on created if app_id is ""blueman-manager"" then set geometry 1400 150 300 500
# rule_053 = on created if app_id is ""blueman-manager"" then set alpha 0.8
rule_054 = on created if app_id is ""blueman-manager"" then assign_workspace 0 1

rule_055 = on created if app_id is ""io.github.fsobolev.Cavalier"" then assign_workspace 0 2

rule_056 = on created if app_id is ""evolution"" then set alpha 0.7
rule_057 = on created if app_id is ""evolution"" then assign_workspace 1 2

rule_058 = on created if app_id is ""catfish"" then move 270 100
# rule_059 = on created if app_id is ""catfish"" then set alpha 0.7
rule_060 = on created if app_id is ""catfish"" then assign_workspace 0 2

rule_061 = on created if app_id is ""pavucontrol"" then set geometry 270 820 800 500
# rule_062 = on created if app_id is ""pavucontrol"" then set alpha 0.8
rule_063 = on created if app_id is ""pavucontrol"" then assign_workspace 0 1

rule_064 = on created if app_id is ""org.gnome.Console"" then set alpha 0.8


rule_065 = on created if app_id is ""org.gnome.TextEditor"" then move 1160 80
rule_066 = on created if app_id is ""org.gnome.TextEditor"" then set alpha 0.8
rule_067 = on created if app_id is ""org.gnome.TextEditor"" then assign_workspace 2 0

rule_068 = on created if app_id is ""gimp-2.99"" then move 270 70
rule_069 = on created if app_id is ""gimp-2.99"" then set alpha 0.9
rule_070 = on created if app_id is ""gimp-2.99"" then assign_workspace 0 2

rule_072 = on created if app_id is ""Conky"" then set sticky

rule_073 = on created if app_id is ""io.elementary.videos"" then set geometry 1350 820 750 500
# rule_074 = on created if app_id is ""io.elementary.videos"" then set alpha 0.9
rule_075 = on created if app_id is ""io.elementary.videos"" then assign_workspace 2 2

rule_076 = on created if app_id is ""net.nokyan.Resources.Devel"" then set alpha 0.8
rule_077 = on created if app_id is ""net.nokyan.Resources.Devel"" then assign_workspace 1 1

rule_078 = on created if app_id is ""com.github.neithern.g4music"" then move 1400 600
rule_079 = on created if app_id is ""com.github.neithern.g4music"" then set alpha 0.7
rule_080 = on created if app_id is ""com.github.neithern.g4music"" then assign_workspace 0 2

rule_081 = on created if app_id is ""so.libdb.gtkcord4"" then set alpha 0.8
rule_082 = on created if app_id is ""so.libdb.gtkcord4"" then assign_workspace 1 1

rule_084 = on created if app_id is ""Brave-browser-beta"" then assign_workspace 1 0

rule_085 = on created if app_id is ""com.raggesilver.BlackBox"" then set alpha 0.8
rule_086 = on created if app_id is ""com.raggesilver.BlackBox"" then resize 880 600

rule_087 = on created if app_id is ""GStreamer gst-play-1.0"" then set geometry 1350 820 750 500

rule_088 = on created if app_id is ""terminator"" then set alpha 0.7
rule_089 = on created if app_id is ""terminator"" then set geometry 480 130 1700 1100
rule_090 = on created if app_id is ""terminator"" then assign_workspace 1 1

rule_091 = on created if app_id is ""org.gnome.Ptyxis.Devel"" then set alpha 0.9

rule_092 = on created if app_id is ""brave-browser-beta"" then move 270 70
rule_093 = on created if app_id is ""brave-browser-beta"" then set alpha 1.0
rule_094 = on created if app_id is ""brave-browser-beta"" then assign_workspace 1 0

[winzoom]
dec_x_binding = <ctrl> <super> KEY_LEFT
dec_y_binding = <ctrl> <super> KEY_UP
inc_x_binding = <ctrl> <super> KEY_RIGHT
inc_y_binding = <ctrl> <super> KEY_DOWN
modifier = <ctrl> <super> 
nearest_filtering = false
preserve_aspect = true
zoom_step = 0.100000

[wm-actions]
minimize = none
send_to_back = none
toggle_always_on_top = none
toggle_fullscreen = none
toggle_maximize = none
toggle_showdesktop = none
toggle_sticky = none

[wobbly]
friction = 3.000000
grid_resolution = 6
spring_k = 8.000000

[workarounds]
all_dialogs_modal = true
app_id_mode = full
dynamic_repaint_delay = false
enable_so_unloading = false
force_preferred_decoration_mode = false
remove_output_limits = false
use_external_output_configuration = false

[workspace-names]
background_color = \#333333B3
background_radius = 30.000000
display_duration = 500
font = sans-serif
margin = 0
position = center
show_option_names = false
text_color = \#FFFFFFFF

[wrot]
activate = <ctrl> <super> BTN_RIGHT
activate-3d = <shift> <super> BTN_RIGHT
invert = false
reset = <ctrl> <super> KEY_R
reset-one = <super> KEY_R
reset_radius = 25.000000
sensitivity = 24

[wsets]
label_duration = 2000

[xdg-activation]

[zoom]
interpolation_method = 0
modifier = <super> 
smoothing_duration = 300
speed = 0.010000
"
efzccG8Q,data917,TestGuy1,JSON,Sunday 5th of May 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'de3396f1df70126c6859a689a7cc8440cca18895a2a6637acc13bdf599a73c3a60c2762282b56f00ef3c907330e88edc9197baa9e399fa61f3fb096ed42dab4f49ba0efbe6b27f1f62ba6feec64da4e198e84b8771042114a9121f94eadafb78fc25b610b5d304efaccf9789a57764514918c27c6baa0a13a983a2c92d7de548',
  otherdata: [
    'f51475f0d1c208915384dc4e45d5738f',
    '5fc9f26f57b1a1288e2d42999954709c',
    '89fba9dbeabbacb3ff774e330b932f3b',
    'a08941cbad6bb9704ae2578d8a31d896',
    '83e6d53a47e488646840a115eba35698',
    '93f440dc5b1a61579c9a74d52ef28879',
    '1bdd13f2cd77ad29f9156b5c73506ca7',
    '40b3c3a11bad98b20dd252229c86cd3a'
  ]
}"
K2U8A04H,wf-info,bluebyt,INI file,Sunday 5th of May 2024 05:51:46 AM CDT,"
$ PKG_CONFIG_PATH=/opt/wayfire/lib/pkgconfig meson setup
 build --prefix=/opt/wayfire
The Meson build system
Version: 1.4.0
Source dir: /home/bluebyt/Downloads/wf-info
Build dir: /home/bluebyt/Downloads/wf-info/build
Build type: native build
Project name: wf-info
Project version: 0.7.0
C compiler for the host machine: cc (gcc 13.2.1 ""cc (GCC) 13.2.1 20240417"")
C linker for the host machine: cc ld.bfd 2.42.0
C++ compiler for the host machine: c++ (gcc 13.2.1 ""c++ (GCC) 13.2.1 20240417"")
C++ linker for the host machine: c++ ld.bfd 2.42.0
Host machine cpu family: x86_64
Host machine cpu: x86_64
Found pkg-config: YES (/usr/bin/pkg-config) 2.1.1
Run-time dependency wayfire found: YES 0.9.0
Run-time dependency wlroots found: YES 0.17.2
Run-time dependency wf-config found: YES 0.9.0
Run-time dependency wayland-protocols found: YES 1.35
Run-time dependency wayland-server found: YES 1.22.0
Run-time dependency wayland-client found: YES 1.22.0
Program wayland-scanner found: YES (/usr/bin/wayland-scanner)
Build targets in project: 4
NOTICE: Future-deprecated features used:
 * 0.56.0: {'dependency.get_pkgconfig_variable'}

wf-info 0.7.0

  User defined options
    prefix: /opt/wayfire

Found ninja-1.12.0 at /usr/bin/ninja

$ninja -C build
ninja: Entering directory `build'
[15/15] Linking target src/libwf-info.so

$sudo ninja -C build install           
[sudo] password for bluebyt:
ninja: Entering directory `build'
[0/1] Installing files.
Installing src/libwf-info.so to /opt/wayfire/lib/wayfire
Installing src/client/wf-info to /opt/wayfire/bin
Installing /home/bluebyt/Downloads/wf-info/metadata/wf-info.xml to /opt/wayfire/share/wayfire/metadata

$wf-info
Wayfire information protocol not advertised by compositor. Is wf-info plugin enabled?
"
2b469BDN,step motor_V4,bipping,C++,Sunday 5th of May 2024 05:51:36 AM CDT,"#include <avr/interrupt.h>
#include <Arduino.h>
//#include <Wire.h>
#include <rgb_lcd.h>
#include <EEPROM.h>
#include <string.h>
#include <avr/sleep.h>

//#define SDA A4
//#define SLC A5
#define NOTE_CS6 1109 
#define NOTE_DS6 1245

// Variables globales
const uint8_t VAL_RGB_R = 255;                            // Valeur R pour LED RGB
const uint8_t VAL_RGB_G = 0;                              // Valeur G pour LED RGB
const uint8_t VAL_RGB_B = 0;                              // Valeur B pour LED RGB
const uint8_t PIN_SWITCH = 2;                             // Pin pour l'interrupteur √† bascule
const uint8_t PIN_COURANT_COUPURE = 3;                    // Pin pour d√©tecter une coupure de courant
const uint8_t PIN_LED_ROUGE = 5;                          // Pin pour LED PIN_LED_ROUGE
const uint8_t PIN_LED_VERT = 7;                           // Pin pour LED PIN_LED_VERTE
const uint8_t PIN_LED_ORANGE = 6;                         // Pin pour LED PIN_LED_ORANGE
const uint8_t PIN_MOTEUR_DIR = 8;                         // Pin pour la direction du moteur
const uint8_t PIN_MOTEUR_PUL = 9;                         // Pin pour les impulsions du moteur
const uint8_t PIN_MOTEUR_ENA = 10;                        // Pin pour activer/d√©sactiver le moteur
const uint8_t PIN_BUZZER = 11;                            // Pin pour le Buzzer
const uint8_t PIN_POTARD = A0;                            // Pin pour le potentiometre
const int8_t MAX_TASKS = 10;
const uint32_t INTERVAL_BASE = 3130;                      // interval de temps de base de 3130 ¬µS pour une action
const uint32_t INTERVAL_X3 = 9390;                        // 3x l'interval de base, soit 9390 ¬µS pour une action
const uint32_t INTERVAL_X7 = 21910;                       // 7x l'interval de base, soit 21910 ¬µS pour une action
const uint32_t INTERVAL_X78 = 244140;                     // 78x l'interval de base, soit 244140 ¬µS pour une action
const uint32_t INTERVAL_X156 = 488280;                    // 156x l'interval de base, soit 488280 ¬µS pour une action
const uint32_t LIMITEPASMAX = 120000;                     // Nombre maximal de pas du moteur
uint8_t taskId_updateSwitchState;                         // updateSwitchState
uint8_t taskId_checketatSwitch;                           // checketatSwitch
uint8_t taskId_updatePotardAndPWM;                        // updatePotardAndPWM
uint8_t taskId_LCD_Demarage;                              //
uint8_t taskId_LCD_Update_MAIN;                           //
uint8_t taskId_toggle_PIN_MOTOR;                          // toggle_PIN_MOTOR
uint8_t taskId_modulate_PIN_LED_verte;                    // modulate_PIN_LED vert
uint8_t taskId_modulate_PIN_LED_orange;                   // modulate_PIN_LED orange
uint8_t taskId_toggleBuzzer;                              // toggleBuzzer
uint16_t potard;                                          // Valeur du potentiometre
volatile bool blackout = false;                           // Flag pour indiquer une coupure de courant
volatile uint32_t nombreDePas = 0;                        // Compteur de pas du moteur
volatile bool estCoupureCourant;                          // Verifie si il est oportun d'effectuer une sauvegarde lors d'une coupure de courant 
bool etatSwitch = false;                                  // √âtat virtuel de l'interupteur, d√©fini sur enclancher (false)
int8_t taskCount = 0;                                     // Compteur pour suivre le nombre de t√¢ches


byte L[8] = { 0b00000, 0b11000, 0b01100, 0b00100, 0b01100, 0b10010, 0b10001, 0b00000 }; // Motif personnalis√© pour √©cran LCD

// √ânum√©ration pour les diff√©rents √©tats
enum Etat {
  ETAT_DEMARAGE, 

  ETAT_ORIGINE_INITIALIZATION,
  ETAT_ORIGINE_MAIN,

  ETAT_AVANCE_INITIALIZATION,
  ETAT_AVANCE_MAIN,

  ETAT_TRANSITION_AVANCE_TOGGLE,

  ETAT_TOGGLE_MAIN,
  ETAT_TOGGLE_CHECKEXITCONDITION,

  ETAT_TOGGLE_RECUPERATION,

  ETAT_FAIL
};

Etat etatActuel;                                          // Variable stockant l'√©tat actuel du syst√®me

struct Task {
    void (*func)();
    uint32_t nextExecution;
    uint32_t interval;
    bool enabled;
};

Task tasks[MAX_TASKS];                                    // Tableau pour stocker les t√¢ches

typedef void (*CallbackFunction)();                       // D√©finir un type de fonction de rappel

rgb_lcd display;

// Interruption de minuterie pour g√©rer le signal PWM et compter les pas
ISR(TIMER1_COMPA_vect){  
  toggle(PIN_MOTEUR_PUL);                                 // Bascule l'√©tat du pin moteur
  nombreDePas++;                                          // Incr√©mente le compteur de pas
}

ISR(TIMER0_COMPA_vect) {
  sleep_disable();                                        // R√©veiller le MCU
  TIMSK0 &= ~(1 << OCIE0A);                               // d√©sactive  l'interruption de comparaison du Timer0
}

// Sauvegarde les donn√©es essentielles dans EEPROM en cas de coupure de courant
void interruptionCoupure() {
  blackout = true;                                        // Indique une coupure de courant
  sleep_disable(); // R√©veiller le MCU
  TIMSK0 &= ~(1 << OCIE0A);                               // d√©sactive  l'interruption de comparaison du Timer0
}

// R√©cup√©ration des donn√©es apr√®s une coupure de courant
void recuperation() {
    uint32_t step;
    EEPROM.get(0, step);                                  // R√©cup√®re le nombre de pas de EEPROM
    nombreDePas = step;
    EEPROM.update(4, false);                              // Indique que la r√©cup√©ration est faite    
    enableTask(taskId_LCD_Update_MAIN);
}// Fin de recuperation

//Fonction d'affichage LCD 
void LCD_Update_FAIL() {
  display.clear();
  display.setCursor(0, 0);
  display.print(""Erreur"");
  display.setCursor(0, 1);
  display.print(""Veuillez redemarrer"");
}

void LCD_Update_DEMARAGE() {
  display.clear();
  display.setCursor(0, 0);
  display.print(""Mauvaise position"");
  display.setCursor(0, 1);
  display.print(""Enclancher l'interrupteur"");
}

void LCD_Update_MAIN() {
  static uint32_t lastSteps = -1;
  static uint16_t lastPotValue = -1;
  
  if (lastSteps != nombreDePas) {
    display.setCursor(1, 1);
    display.print(nombreDePas);
    lastSteps = nombreDePas;
  }
  
  if (lastPotValue != potard) {
    display.setCursor(10, 1);
    display.print(potard);
    lastPotValue = potard;
  }
}

int scheduleTask(void (*func)(), uint32_t interval, bool enabled) {
    if (taskCount < MAX_TASKS) {
      tasks[taskCount].func = func;
      tasks[taskCount].interval = interval;
      tasks[taskCount].nextExecution = micros() + interval;
      tasks[taskCount].enabled = enabled;
      //tasks[taskCount] = {func, micros() + interval, interval, enabled};
      return taskCount++;                                 // Retourne l'index de la nouvelle t√¢che
    }
    return -1; // Retourne une valeur d'erreur si le tableau est plein
}

void setup() {
  Serial.begin(115200);                                   // D√©marre la communication s√©rie √† 115200 bps
  display.begin(16, 2);                                   // Initialise l'√©cran LCD avec 16 colonnes et 2 lignes
  display.setRGB(VAL_RGB_R, VAL_RGB_G, VAL_RGB_B);        // D√©finit la couleur de r√©tro√©clairage de l'√©cran LCD
  display.print(""initialization"");                        // Affiche le message d'initialisation sur l'√©cran LCD

  // Configuration des pins pour les LEDs et les sorties
  pinMode(PIN_LED_ORANGE, OUTPUT);                        // Config. la LED orange en sortie
  pinMode(PIN_LED_VERT, OUTPUT);                          // Config. la LED verte en sortie
  pinMode(PIN_LED_ROUGE, OUTPUT);                         // Config. la LED rouge en sortie

  // Configuration des pins pour les entr√©es
  pinMode(PIN_POTARD, INPUT);                             // D√©finit le pin A0 comme entr√©e pour le potentiom√®tre
  pinMode(PIN_SWITCH, INPUT_PULLUP);                      // Active la r√©sistance de pull-up sur le pin du bouton
  pinMode(PIN_MOTEUR_DIR, OUTPUT);                        // Config. la direction du moteur en sortie
  pinMode(PIN_MOTEUR_PUL, OUTPUT);                        // Config. le pin de pulsation du moteur en sortie
  pinMode(PIN_MOTEUR_ENA, OUTPUT);                        // Config. le pin d'activation du moteur en sortie
  pinMode(PIN_BUZZER, OUTPUT);                            // Config. le pin du buzzer en sortie
  pinMode(PIN_COURANT_COUPURE, INPUT_PULLUP);             // Active la r√©sistance de pull-up pour la coupure de courant

  // Configuration initiale de l'√©tat des sorties
  digitalWrite(PIN_BUZZER, LOW);                          // √âteint le buzzer
  digitalWrite(PIN_SWITCH, HIGH);                         // Initialise le PIN_SWITCH √† l'√©tat haut
  digitalWrite(PIN_LED_VERT, HIGH);                       // Allume la LED verte
  digitalWrite(PIN_LED_ORANGE, HIGH);                     // Allume la LED orange
  digitalWrite(PIN_LED_ROUGE, HIGH);                      // Allume la LED rouge

  // Signal sonore d'initialisation
  tone(PIN_BUZZER, NOTE_DS6, 500);                        // Joue un ton sur le buzzer
  delay(500);                                             // Attend 500 ms

  // √âteint toutes les LEDs apr√®s le signal sonore
  digitalWrite(PIN_LED_VERT, LOW);                        // √âteint la LED verte
  digitalWrite(PIN_LED_ROUGE, LOW);                       // √âteint la LED rouge
  digitalWrite(PIN_LED_ORANGE, LOW);                      // √âteint la LED orange

  timerPrecedents[TIMER_LED_Vert] = micros();             // Initialise le timer pour la LED verte
  timerPrecedents[TIMER_LED_Orange] = micros();           // Initialise le timer pour la LED Orange

  // V√©rifie et r√©cup√®re l'√©tat de coupure de courant depuis l'EEPROM
  bool spin;
  EEPROM.get(4, spin);                       // R√©cup√®re l'√©tat de coupure de courant de l'EEPROM
  estCoupureCourant = spin;

  // Configuration initiale de l'√©tat du syst√®me
  etatActuel = (!estCoupureCourant) ? ETAT_DEMARAGE : ETAT_TOGGLE_RECUPERATION;

  // Configuration des interruptions
  attachInterrupt(digitalPinToInterrupt(PIN_COURANT_COUPURE), interruptionCoupure, FALLING); // Interruption sur coupure de courant

  // Configuration des Timer pour le mode CTC (Clear Timer on Compare Match)
  TCCR1A = 0;                                             // R√©initialise TCCR1A pour la configuration
  TCCR1B = (1 << WGM12) | (1 << CS11);                    // Configure le mode CTC et le prescaler pour Timer1

  TCCR0A = (1 << WGM21);                                  // Configure le Timer 0 pour le mode CTC
  TCCR0B = (1 << CS22) | (1 << CS21) | (1 << CS20);       // Prescaler de 1024

  //setupHardware();

  taskId_updateSwitchState = scheduleTask(updateSwitchState, INTERVAL_X7, true);
  taskId_checketatSwitch = scheduleTask(checketatSwitch, INTERVAL_X156, false);
  taskId_updatePotardAndPWM = scheduleTask(updatePotardAndPWM, INTERVAL_X78, false);
  taskId_LCD_Demarage = scheduleTask( [] () {LCD_Update_DEMARAGE(); }, INTERVAL_X78, false);
  taskId_LCD_Update_MAIN = scheduleTask( [] () {LCD_Update_MAIN(); }, INTERVAL_X78, false);
  taskId_toggle_PIN_MOTOR = scheduleTask(toggle_PIN_MOTOR, INTERVAL_BASE, false);
  taskId_modulate_PIN_LED_verte = scheduleTask( [] () {modulate_PIN_LED(PIN_LED_VERT); }, INTERVAL_X3, false);
  taskId_modulate_PIN_LED_orange = scheduleTask([]() { modulate_PIN_LED(PIN_LED_ORANGE); }, INTERVAL_X3, false);
  taskId_toggleBuzzer = scheduleTask(toggleBuzzer, INTERVAL_X78, false);

  updatePotardAndPWM();                               // Initialise le potard

  set_sleep_mode(SLEEP_MODE_PWR_SAVE);                // D√©finir le mode de sommeil

  updateSwitchState();                                // Initialization de l'√©tat de l'interupteur

  if (!estCoupureCourant){
    enableTask(taskId_LCD_Demarage);
    enableTask(taskId_modulate_PIN_LED_orange);  
    enableTask(taskId_toggleBuzzer);
  }else{
    enableTask(taskId_LCD_Update_MAIN);
  }

  delay(800);                                             // Court d√©lai avant d'activer les interruptions
  sei();                                                  // Active les interruptions globales
}

void loop() {

  //enableTask(updateSwitchState); 

  switch (etatActuel) {
    case ETAT_DEMARAGE:
      if(!etatSwitch) {
        etatActuel = ETAT_ORIGINE_INITIALIZATION;
      }else{
       
        //LCD_Update_DEMARGE(display);

        //modulate_PIN_LED(PIN_LED_ORANGE); 

        //toggleBuzzer
        
      }
      break;
    case ETAT_ORIGINE_INITIALIZATION:
      // Initialisations pour l'√©tat d'origine
      origine_initialization();
      etatActuel = ETAT_ORIGINE_MAIN;                        // D√©finit l'√©tat √† ORIGINE
      break;
    case ETAT_ORIGINE_MAIN:
      
      //modulate_PIN_LED(PIN_LED_VERT); 

      //LCD_Update_ORIGINE(display); 
      
      //updatePotardAndPWM

      if(etatSwitch) {
        etatActuel = ETAT_AVANCE_INITIALIZATION;
      }
      break;
    case ETAT_AVANCE_INITIALIZATION:
      // Initialisations pour l'√©tat d'avance
      avance_initialization();
      etatActuel = ETAT_AVANCE_MAIN;                         // D√©finit l'√©tat √† AVANCE
      break;
    case ETAT_AVANCE_MAIN:
      //Verifie si le programme doit s'arreter en urgence
      checketatFail();

      //LCD_Update_AVANCE(display);
       
      //toggle_PIN_MOTOR

      if(nombreDePas >= LIMITEPASMAX || !etatSwitch) {
        etatActuel = ETAT_TRANSITION_AVANCE_TOGGLE;
      }
      break;
    case ETAT_TRANSITION_AVANCE_TOGGLE:
      // V√©rifie la condition de sortie de l'√©tat d'avance
      transition_avance_toggle(); 

      etatActuel = ETAT_TOGGLE_MAIN;                         // D√©finit l'√©tat √† TOGGLE
      break;
    case ETAT_TOGGLE_MAIN:
      //Verifie si le programme doit s'arreter en urgence
      checketatFail();

      //LCD_Update_TOGGLE(display);

      //toggle_PIN_MOTOR
      
      //checketatSwitch

      if(nombreDePas == 0){
        etatActuel = ETAT_TOGGLE_CHECKEXITCONDITION;
      }
      break;
    case ETAT_TOGGLE_CHECKEXITCONDITION:
      // V√©rifie la condition de sortie de l'√©tat de toggle
      toggle_checkexitcondition();

      etatActuel = (etatSwitch) ? ETAT_AVANCE_INITIALIZATION : ETAT_ORIGINE_INITIALIZATION;
      break;
    case ETAT_TOGGLE_RECUPERATION:    
      recuperation();                                   // Appelle la fonction de r√©cup√©ration en cas de coupure

      etatActuel = ETAT_TRANSITION_AVANCE_TOGGLE;
      break;
    case ETAT_FAIL:
      // Ex√©cute la s√©quence d'arr√™t d'urgence
      checketatFail();

      break;
    default: // ETAT_FAIL:
      // Ex√©cute la s√©quence d'arr√™t d'urgence
      etatActuel = ETAT_FAIL;
      break;
  }

  manageTasks();
  
}//Fin de la boucle loop

void origine_initialization(){
  disableTask(taskId_LCD_Demarage);
  display.clear();
  display.setCursor(0, 0);
  display.print(""Origine"");
  display.setCursor(0, 1);
  display.print(""Pas: "");
  disableTask(taskId_modulate_PIN_LED_orange);
  disableTask(taskId_toggleBuzzer);
  digitalWrite(PIN_LED_ORANGE, LOW);                  // √âteint la LED orange
  digitalWrite(PIN_LED_VERT, LOW);                    // √âteint la LED verte
  digitalWrite(PIN_LED_ROUGE, HIGH);                  // Allume la LED rouge
  digitalWrite(PIN_MOTEUR_ENA, HIGH);                 // D√©sactive le frein du moteur
  tone(PIN_BUZZER, NOTE_CS6, 80);                     // Joue la note CS6
  delay(100);                                         // Pause de 100ms
  tone(PIN_BUZZER, NOTE_DS6, 80);                     // Joue la note DS6
  delay(100);                                         // Pause de 100ms
  tone(PIN_BUZZER, NOTE_DS6, 160);                    // Joue la note DS6 plus longue
  delay(250);                                         // Pause de 250ms
  digitalWrite(PIN_LED_ROUGE, LOW);                   // √âteint la LED rouge
  enableTask(taskId_modulate_PIN_LED_verte);
  enableTask(taskId_updatePotardAndPWM);
}

void avance_initialization(){
  display.clear();
  display.setCursor(0, 0);
  display.print(""Avance"");
  display.setCursor(0, 1);
  display.print(""Lambda: "");
  disableTask(taskId_modulate_PIN_LED_verte);
  disableTask(taskId_updatePotardAndPWM);
  estCoupureCourant = true;                               // R√©initialise l'indicateur de coupure de courant
  digitalWrite(PIN_MOTEUR_DIR, LOW);                      // D√©finit le sens de rotation du moteur
  digitalWrite(PIN_MOTEUR_ENA, LOW);                      // Active le moteur
  noInterrupts();                                         // D√©sactiver les interruptions pendant la configuration
  TIMSK1 |= (1 << OCIE1A);                                // Active l'interruption de comparaison du Timer1, Active le signal PWM
  interrupts();                                           // R√©activer les interruptions
  digitalWrite(PIN_LED_VERT, HIGH);                       // Allume la LED verte
  digitalWrite(PIN_LED_ORANGE, LOW);                      // √âteint la LED orange
  digitalWrite(PIN_LED_ROUGE, LOW);                       // √âteint la LED rouge
}

void transition_avance_toggle(){
  display.clear();
  display.setCursor(0, 0);
  display.print(""Toggle"");
  display.setCursor(0, 1);
  display.print(""Lambda: "");
  digitalWrite(PIN_LED_VERT, LOW);                        // √âteint la LED verte
  noInterrupts();                                         // D√©sactiver les interruptions pendant la configuration
  OCR1A = INTERVAL_BASE;
  interrupts();                                           // R√©activer les interruptions
  digitalWrite(PIN_MOTEUR_DIR, HIGH);                     // Change le sens de rotation du moteur
  digitalWrite(PIN_MOTEUR_ENA, LOW);                      // Active le moteur
  //enableTask(taskId_toggle_PIN_MOTOR);
  enableTask(taskId_checketatSwitch);
}

void toggle_checkexitcondition(){
  disableTask(taskId_checketatSwitch);
  noInterrupts();                                         // D√©sactiver les interruptions pendant la configuration
  TIMSK1 &= ~(1 << OCIE1A);                               // D√©sactive l'interruption de comparaison du Timer1, D√©sactive le signal PWM 
  interrupts();                                           // R√©activer les interruptions
  estCoupureCourant = false;                              // R√©initialise l'indicateur de coupure de courant
  digitalWrite(PIN_LED_ORANGE, LOW);                      // √âteint la LED orange
  digitalWrite(PIN_LED_VERT, LOW);                        // √âteint la LED verte
}

//sauvgarde les donn√©es importante si coupure detecter, arrete le programme 
void checketatFail() {
  if(blackout || etatActuel == ETAT_FAIL){
    noInterrupts();                                       // D√©sactive les interruptions
    bool spin =  estCoupureCourant;
    uint32_t step = nombreDePas;
    EEPROM.update(0, step);                               // Sauvegarde le nombre de pas
    EEPROM.update(4, spin);                               // R√©initialise le flag de coupure de courant
    digitalWrite(PIN_MOTEUR_PUL, LOW);                    // D√©sactive les impulsions
    digitalWrite(PIN_MOTEUR_ENA, HIGH);                   // D√©sactive le frein du moteur
    digitalWrite(PIN_LED_ROUGE, HIGH);                    // Allume la LED d'urgence
    LCD_Update_FAIL();
    tone(PIN_BUZZER, NOTE_CS6, 1000);                     // Joue la note CS6

    while(true) {
      delay(4294967295);                                  // Bloque le syst√®me ind√©finiment
    }                                                     // Boucle d'arr√™t d'urgence
  }
}

void manageTasks() {
  uint32_t currentTime = micros();
  uint32_t nextTaskTime = INTERVAL_X156; //Temps de la tache la plus longue, par securit√© ce sera la dur√©e maximal

  // Parcourir les t√¢ches pour trouver la plus proche et ex√©cuter si n√©cessaire
  for (int i = 0; i < taskCount; i++) {
    if (tasks[i].enabled) {
      if (currentTime >= tasks[i].nextExecution) {
        tasks[i].func();  // Ex√©cuter la fonction
        tasks[i].nextExecution = currentTime + tasks[i].interval;  // Planifier la prochaine ex√©cution
      }
      if (tasks[i].nextExecution < nextTaskTime) {
        nextTaskTime = tasks[i].nextExecution;
      }
    }
  }

  // Calculer le temps d'attente
  uint32_t timeToWait = nextTaskTime - currentTime;
  if (timeToWait > 800) {
    // Calculer le nombre de ticks n√©cessaires pour le Timer 2
    uint16_t timerTicks = min(255, timeToWait / 4);  // 4 est le nombre d'¬µs par tick avec un prescaler de 1024 √† 16 MHz

    noInterrupts(); // D√©sactiver les interruptions pendant la configuration
    OCR0A = timerTicks;  // D√©finir la valeur pour comparaison A
    TIMSK0 |= (1 << OCIE0A);  // Activer l'interruption Timer 0 Compare Match A
    interrupts(); // R√©activer les interruptions

    sleep_mode();  // Dormir jusqu'√† la prochaine interruption du timer
  } else if (timeToWait > 300) {
    delayMicroseconds(timeToWait); // Un tres court d√©lai
  }else{
    
  }
}

void enableTask(int8_t taskIndex) {
    if (taskIndex >= 0 && taskIndex < taskCount) {
        tasks[taskIndex].enabled = true;
        tasks[taskIndex].nextExecution = micros() + tasks[taskIndex].interval;  // R√©initialise le timing
    }
}

void disableTask(int8_t taskIndex) {
    if (taskIndex >= 0 && taskIndex < taskCount) {
        tasks[taskIndex].enabled = false;
    }
}

/*/ Ex√©cute une fonction √† intervalle r√©gulier bas√© sur un timer
void checkTimerAndUpdate(uint16_t &previousTime, uint32_t intervalAction, CallbackFunction func) {
  if (micros() - previousTime >= intervalAction ) { 
    previousTime = micros();                              // R√©initialise le temps pr√©c√©dent
    func();                                               // Appelle la fonction pass√©e en param√®tre
  }
}// Fin de checkTimerAndUpdate*/

//Fonction de mise √† jour de potard et de la fr√©quence du PWM du moteur
void updatePotardAndPWM() {
  uint16_t newPotard = map(analogRead(PIN_POTARD), 0, 1023, 11200, 11300); // Map la lecture analogique √† la plage d√©sir√©e
  if (newPotard != potard) {                              // V√©rifie si la valeur a chang√©
    potard = newPotard;                                   // Met √† jour la variable globale potard
    noInterrupts();                                       // D√©sactive les interruptions
    OCR1A = potard;                                       // Met √† jour la fr√©quence de la pin pul, la vitesse du moteur
    interrupts();                                         // R√©activer les interruptions
  }
}// Fin de updatePotardAndPWM

// Met √† jour l'√©tat de l'interrupteur
void updateSwitchState() { 
    if (digitalRead(PIN_SWITCH) != etatSwitch) {          // Verifie si l'interupteur √† bascule √† changer
      etatSwitch = !etatSwitch;                           // Bascule l'√©tat en utilisant la valeur point√©e
    }
}// Fin de updateSwitchState

// Fait varier la luminosit√© de la LED Rouge
void modulate_PIN_LED(uint8_t ledPin) { 
  static uint8_t i = 1;                                   // Initialise l'intensit√© de la LED
  static bool estIncrement = true;                        // Initialise la direction de l'incr√©mentation
  analogWrite(ledPin, i);                                 // Applique la luminosit√© √† la LED
  i = estIncrement ? i + 1 : i - 1;                       // Incr√©mente ou d√©cr√©mente la luminosit√©
  if(i == 255 || i == 0) {                                // Verifie si i est arriv√© au extremiter
    estIncrement = !estIncrement;                         // Inverse la direction si les limites sont atteintes
  }
}// Fin de modulate_PIN_LED

// Fonction pour basculer l'√©tat d'une broche
void toggle(int8_t pin) {
    digitalWrite(pin, !digitalRead(pin));                 // Bascule l'√©tat de la broche
} // Fin de toggle

void toggleLEDVert() {
    toggle(PIN_LED_VERT);
}

void toggleLEDOrange() {
    toggle(PIN_LED_ORANGE);
}

// Ex√©cute une action LED en fonction de l'√©tat de l'interrupteur
void checketatSwitch() {
    CallbackFunction func = etatSwitch ? toggleLEDVert : toggleLEDOrange;
    if (digitalRead(etatSwitch ? PIN_LED_VERT : PIN_LED_ORANGE) == HIGH) {
        digitalWrite(etatSwitch ? PIN_LED_VERT : PIN_LED_ORANGE, LOW);
    }
    func();
}// Fin de checkTimerBasedOnState

// Actionne le moteur et d√©compte les pas
void toggle_PIN_MOTOR() { 
  toggle(PIN_MOTEUR_PUL);                                 // Bascule le pin du moteur
  noInterrupts();                                         // D√©sactive les interruptions
  nombreDePas--;                                          // D√©cr√©mente le compteur de pas
  interrupts();                                           // R√©active les interruptions
}// Fin de toggle_PIN_MOTOR

//tone utilise le Timer2
void toggleBuzzer() {
  static bool isActive = true;
  if (isActive) {
    noTone(PIN_BUZZER);                                   // Arr√™te le son pendant 84 millisecondes
    isActive = false;                                     //
  } else {
    tone(PIN_BUZZER, NOTE_DS6, 160);                      // Joue la note DS6 pendant 160 millisecondes
    isActive = true;
  }
}
"
MLsrXnaV,silly,Da_Blue,Lua,Sunday 5th of May 2024 05:31:47 AM CDT,"-- Instances:

local ScreenGui = Instance.new(""ScreenGui"")
local Frame = Instance.new(""Frame"")
local TextButton = Instance.new(""TextButton"")
local TextBox = Instance.new(""TextBox"")
local clear = Instance.new(""ImageButton"")
local TextLabel = Instance.new(""TextLabel"")

--Properties:

ScreenGui.Parent = game.CoreGui

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(86, 86, 86)
Frame.BorderColor3 = Color3.fromRGB(0, 0, 0)
Frame.BorderSizePixel = 3
Frame.Position = UDim2.new(0.285220385, 0, 0.159420282, 0)
Frame.Size = UDim2.new(0, 375, 0, 220)

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(181, 181, 181)
TextButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextButton.BorderSizePixel = 3
TextButton.Position = UDim2.new(0.128936201, 0, 0.751177847, 0)
TextButton.Size = UDim2.new(0, 266, 0, 45)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = ""Exacute""
TextButton.TextColor3 = Color3.fromRGB(0, 0, 0)
TextButton.TextScaled = true
TextButton.TextSize = 14.000
TextButton.TextWrapped = true
TextButton.MouseButton1Down:Connect(function(Player, SS)
	_G.Path:FireServer(Frame.TextBox.Text)
end)

TextBox.Parent = Frame
TextBox.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
TextBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextBox.BorderSizePixel = 3
TextBox.Position = UDim2.new(0.0553746745, 0, 0.138939947, 0)
TextBox.Size = UDim2.new(0, 332, 0, 61)
TextBox.Font = Enum.Font.SourceSans
TextBox.PlaceholderColor3 = Color3.fromRGB(178, 178, 178)
TextBox.PlaceholderText = ""Put your require script hear""
TextBox.Text = """"
TextBox.TextColor3 = Color3.fromRGB(0, 0, 0)
TextBox.TextScaled = true
TextBox.TextSize = 14.000
TextBox.TextWrapped = true

clear.Name = ""clear""
clear.Parent = Frame
clear.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
clear.BackgroundTransparency = 1.000
clear.LayoutOrder = 5
clear.Position = UDim2.new(0.931999981, 0, 0, 0)
clear.Size = UDim2.new(0, 25, 0, 25)
clear.ZIndex = 2
clear.Image = ""rbxassetid://3926305904""
clear.ImageRectOffset = Vector2.new(924, 724)
clear.ImageRectSize = Vector2.new(36, 36)
clear.MouseButton1Down:Connect(function(Player, SS)
	_G.Path:Destroy()
	wait(0.1)
	ScreenGui:Destroy()
    else
  ScreenGui:Destroy()
end)

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.BorderSizePixel = 3
TextLabel.Position = UDim2.new(0.0553746745, 0, 0.470256954, 0)
TextLabel.Size = UDim2.new(0, 332, 0, 50)
TextLabel.Font = Enum.Font.SourceSans
TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
TextLabel.TextScaled = true
TextLabel.TextSize = 14.000
TextLabel.TextWrapped = true
TextLabel.Text = ""i am to lazy to remove this TextLabel so its staying""

-- Scripts:

local function CPIHP_fake_script() -- Frame.Dragify 
	local script = Instance.new('LocalScript', Frame)

	local UserInputService = game:GetService(""UserInputService"")
	
	local gui = script.Parent
	
	local dragging
	local dragInput
	local dragStart
	local startPos
	
	local function update(input)
		local delta = input.Position - dragStart
		gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
	
	gui.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			dragging = true
			dragStart = input.Position
			startPos = gui.Position
	
			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	gui.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)
	
	UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			update(input)
		end
	end)
end
coroutine.wrap(CPIHP_fake_script)()
"
NM2aWiiZ,Untitled,_KAGATUN_,C#,Sunday 5th of May 2024 03:20:30 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;

namespace Amnesty
{
    internal class Program
    {
        static void Main(string[] args)
        {
            List<Criminal> criminals = new List<Criminal>
            {
                new Criminal (""–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"", ""–ê–Ω—Ç–∏–ø—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ""),
                new Criminal (""–ü–µ—Ç—Ä–æ–≤ –ù–∏–∫–æ–ª–∞–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á"", ""–ì—Ä–∞–±–µ–∂""),
                new Criminal (""–°–µ—Ä–≥–µ–µ–≤ –ò–ª—å—è –ü–µ—Ç—Ä–æ–≤–∏—á"", ""–£–±–∏–π—Å—Ç–≤–æ""),
                new Criminal (""–°–æ–∫–æ–ª–æ–≤—Å–∫–∏–π –ò–≤–∞–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤–∏—á"", ""–ê–Ω—Ç–∏–ø—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ""),
                new Criminal (""–ê–±—Ä–∞–º–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∞–ª–µ–Ω—Ç–∏–Ω–æ–≤–∏—á"", ""–£–±–∏–π—Å—Ç–≤–æ""),
                new Criminal (""–í–æ—Ä–æ–±—å–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á"", ""–ì—Ä–∞–±–µ–∂""),
                new Criminal (""–ö–æ—Ä–µ—à–∫–æ–≤ –í–∞–ª–µ—Ä–∏–π –°—Ç–µ–ø–∞–Ω–æ–≤–∏—á"", ""–†–∞–∑–±–æ–π""),
                new Criminal (""–ß–µ—á–µ–∫–æ–≤ –ê—Ä—Ç–µ–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á"", ""–ê–Ω—Ç–∏–ø—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ""),
                new Criminal (""–ö—Ä–∏–∫—É–Ω–æ–≤ –ú–∏—Ö–∞–∏–ª –ï–≤–≥–µ–Ω—å–µ–≤–∏—á"", ""–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ""),
                new Criminal (""–ó–∞–π—Ü–µ–≤ –Æ—Ä–∏–π –ê–Ω—Ç–æ–Ω–æ–≤–∏—á"", ""–ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ""),
            };

            Information information = new Information(criminals);

            information.ShowCriminals(criminals, ""–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ –¥–æ –∞–º–Ω–∏—Å—Ç–∏–∏\n"");

            string amnestiedArticle = ""–ê–Ω—Ç–∏–ø—Ä–æ–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–µ"";

            var wantedCriminals = criminals.Where(criminal => criminal.Crime != amnestiedArticle);

            information.ShowCriminals(wantedCriminals, ""\n–°–ø–∏—Å–æ–∫ –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∞–º–Ω–∏—Å—Ç–∏–∏\n"");
        }
    }

    class Information
    {
        private List<Criminal> _criminals;

        public Information(List<Criminal> criminal)
        {
            _criminals = criminal;
        }

        public void ShowCriminals(IEnumerable <Criminal> wantedCriminals, string text)
        {
            Console.WriteLine(text);

            foreach (var criminal in wantedCriminals)
            {
                criminal.ShowInfo();
            }
        }
    }

    class Criminal
    {
        public Criminal(string fullName, string crime)
        {
            FullName = fullName;
            Crime = crime;
        }

        public string FullName { get; private set; }
        public string Crime { get; private set; }

        public void ShowInfo()
        {
            Console.WriteLine($""–§–ò–û: {FullName}, –ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {Crime}"");
        }
    }
}
"
jN9XamcN,K_C_Shuffle,SaNik74,C#,Sunday 5th of May 2024 02:57:29 AM CDT,"namespace K_C_Shuffle
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int[] numbers = new int[10];
            int minValue = 0;
            int maxValue = 9;

            for (int i = 0; i < numbers.Length; i++)
            {
                numbers[i] = random.Next(minValue, maxValue + 1);
            }

            OutputArray(numbers);

            Shuffle(numbers);
            Console.WriteLine();

            OutputArray(numbers);
        }

        static void Shuffle(int[] array)
        {
            Random random = new Random();

            for (int i = 0; i < array.Length; i++)
            {
                int tempIndex = random.Next(array.Length);
                int tempValue = array[tempIndex];
                array[tempIndex] = array[i];
                array[i] = tempValue;
            }
        }

        static void OutputArray (int[] array)
        {
            for (int i = 0; i < array.Length; i++)
            {
                Console.Write(array[i]);
            }
        }
    }
}"
nFusvwEX,pagination-fixed,Grossos,JavaScript,Sunday 5th of May 2024 02:46:36 AM CDT,"const count = await axios('http://localhost:5000/sitecount');

const pageNumbers = (total, max, current) => {
    const half = Math.round(max / 2);
    let to = max;

    if (current + half >= total) {
        to = total;
    } else if (current > half) {
        to = current + half
    }

    let from = to - max;

    return Array.from({ length: max }, (_, i) => (i + 1) + from);
};

function PaginationButtons(totalPages, maxPageVisible = 10, initialPage = 1) {
    let pages = pageNumbers(totalPages, maxPageVisible, initialPage);
    let currentPageBtn = null;
    const buttons = new Map();
    const fragment = document.createDocumentFragment();
    const paginationButtonsContainer = document.createElement('div');
    paginationButtonsContainer.className = 'container-page';

    const updateActivePage = newPageNumber => {
        currentPage = newPageNumber;
        sessionStorage.setItem('activePage', currentPage);
        pages = pageNumbers(totalPages, maxPageVisible, currentPage);
    }

    let currentPage = parseInt(sessionStorage.getItem('activePage')) || initialPage;

    updateActivePage(currentPage);

    const urlParams = new URLSearchParams(window.location.search);
    const pageParam = urlParams.get('page');
    if (!pageParam) {
        updateActivePage(1);
    }

    const disabled = {
        start: () => currentPage === 1 && pages[0] === 1,
        prev: () => currentPage === 1,
        next: () => currentPage === totalPages,
        end: () => pages.slice(-1)[0] === totalPages && currentPage === totalPages
    }

    const createAndSetupButton = (label = '', cls = '', disabled = false, handleClick = () => { }) => {
        const button = document.createElement('button');
        button.textContent = label;
        button.className = `page-btn ${cls}`;
        button.disabled = disabled;
        button.addEventListener('click', event => {
            handleClick(event);
            this.update();
            paginationButtonsContainer.value = currentPage;
            paginationButtonsContainer.dispatchEvent(new Event('change'));
        })

        return button;
    }

    const onPageButtonClick = e => currentPage = Number(e.currentTarget.textContent);

    const onPageButtonUpdate = index => btn => {
        btn.textContent = pages[index];

        if (pages[index] === currentPage) {
            currentPageBtn.classList.remove('active');
            btn.classList.add('active');
            currentPageBtn = btn;
            currentPageBtn.focus();
        }
    }

    buttons.set(
        createAndSetupButton('start', 'start-page', disabled.start(), () => currentPage = 1),
        (btn) => btn.disabled = disabled.start()
    )

    buttons.set(
        createAndSetupButton('prev', 'prev-page', disabled.prev(), () => currentPage -= 1),
        (btn) => btn.disabled = disabled.prev()
    )

    pages.forEach((pageNumber, index) => {
        const isCurrentPage = pageNumber === currentPage;
        const button = createAndSetupButton(pageNumber, isCurrentPage ? 'active' : '', false, onPageButtonClick);

        if (isCurrentPage) {
            currentPageBtn = button;
        }

        buttons.set(button, onPageButtonUpdate(index))
    })

    buttons.set(
        createAndSetupButton('next', 'next-page', disabled.next(), () => currentPage += 1),
        (btn) => btn.disabled = disabled.next()
    )

    buttons.set(
        createAndSetupButton('end', 'end-page', disabled.end(), () => currentPage = totalPages),
        (btn) => btn.disabled = disabled.end()
    )

    buttons.forEach((_, btn) => fragment.appendChild(btn));

    this.render = (container = document.querySelector('.card-body')) => {

        paginationButtonsContainer.appendChild(fragment);
        container.appendChild(paginationButtonsContainer);
    }

    this.update = (newPageNumber = currentPage) => {

        updateActivePage(newPageNumber);
        sessionStorage.setItem('currentPage', currentPage);

        currentPage = newPageNumber;
        pages = pageNumbers(totalPages, maxPageVisible, currentPage);
        buttons.forEach((updateButton, button) => updateButton(button));
    }

    this.onChange = (handler) => {
        paginationButtonsContainer.addEventListener('change', handler)
    }
};

const paginationButtons = new PaginationButtons(Math.ceil(count.data / 50));

paginationButtons.render();
paginationButtons.onChange(e => {
    let page = e.target.value;
    let currentUrl = new URL(window.location.href);

    currentUrl.searchParams.set(`page`, page);
    currentUrl.searchParams.set(`from`, (page - 1) * 50 + 1 == 0 ? 1 : (page - 1) * 50 + 1);
    currentUrl.searchParams.set(`to`, (page) * 50);
    window.location.href = currentUrl.href;
})"
nwuC0BBa,Untitled,thepotsu,TypeScript,Sunday 5th of May 2024 02:05:20 AM CDT,"        let ViewingContentType:""Guide""|""Command""|undefined = undefined;
        let ViewingContentIndex:number|undefined = undefined;

        const HelpPagination = new Pagination<typeof Contents>()
            .setItems(Contents)
            .setDisplayItemsPerPage(25)
            .setUser(User)
            .setMapItemsFn(function (FilteredContent, Page) {
                const Embeds = [];

                if ((ViewingContentType !== undefined) && (ViewingContentIndex !== undefined)) {
                    switch (ViewingContentType) {
                        case ""Command"": {
                            const Command = FilteredCommands[ViewingContentIndex];
                            Embeds.push(...)
                        } break;

                        case ""Guide"": {
                            const Guide = FilteredGuides[ViewingContentIndex];
                            Embeds.push(...)
                        } break;
                    }
                }
                
                return {
                    content     : `${User}`,
                    embeds      : [
						...Embeds,

                        new EmbedBuilder()
                        .setTitle(""Results matching query"")
                        .setDescription(...)
                        .setColor(...)
                    ],
                    components      : [
                        new ActionRowBuilder<StringSelectMenuBuilder>()
                        .addComponents(...)
                    ]
                }
            })
            .setCustomFunctions(async function (CustomId, Interaction) {
                if (...) {
                    ViewingContentIndex = Number((Interaction as StringSelectMenuInteraction).values[0].split("";"")[1]);
                    ViewingContentType = (Interaction as StringSelectMenuInteraction).values[0].split("";"")[0] as ""Guide""|""Command"";
                    
                    return { ContinueRunning : true, ReplyWithDefaultContent : true };
                } else return { UnknownCustomId : true };
            });
        
        await HelpPagination.Start(Origin);"
eSYCePag,:/,tomtomvader298,JavaScript,Sunday 5th of May 2024 01:57:20 AM CDT,"CONSOLE:
[
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null },
  { text: 'null', emoji: null }
]//Same as on clients poll
//but my input: /poll multi:No duration:1 question:Plz Work anwser-1:Yes anwser-2:No
const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const teaGreen = require('../teaGreen');// Custom Colour For Embed
module.exports = {
    data: new SlashCommandBuilder()
        .setName('poll')
        .setDescription('Build A Discord Poll With Me')
        .addStringOption(option => option.setName('multi').setDescription('Multiple Choice?').addChoices(
            { name: 'Yes', value: 'true' },
            { name: 'No', value: 'false' },
        ).setRequired(true)
        )
        .addStringOption(option => option.setName('duration').setDescription('1 = 1H max 1W').setRequired(true))
        .addStringOption(option => option.setName('question').setDescription('What are you asking?').setRequired(true))
        .addStringOption(option => option.setName('anwser-one').setDescription('So.. A Answer?').setRequired(true))
        .addStringOption(option => option.setName('anwser-two').setDescription('So.. A Answer?').setRequired(true))
        .addStringOption(option => option.setName('anwser-three').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-four').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-five').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-six').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-seven').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-eight').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-nine').setDescription('So.. A Answer?').setRequired(false))
        .addStringOption(option => option.setName('anwser-ten').setDescription('So.. A Answer?').setRequired(false))
        .setDMPermission(false)
        .setDefaultMemberPermissions(PermissionFlagsBits.SendPolls),

    async execute(interaction) {
        const pollQuestion = interaction.options.getString('question');
        console.log(pollQuestion)//See whats working
        //MultiChoice?
        const pollMultiChoiceSelection = interaction.options.getString('multi');
        //pollDuration
        const pollDuration = interaction.options.getString('duration');
        console.log(pollDuration)//See whats working
        //pollAnswers
        const pollAnswerOne = interaction.options.getString('anwser-one');//Required 1
        const pollAnswerTwo = interaction.options.getString('anwser-two');//Required 2
        const pollAnswerThree = interaction.options.getString('anwser-three');//Optional
        const pollAnswerFour = interaction.options.getString('anwser-four');//Optional
        const pollAnswerFive = interaction.options.getString('anwser-five');//Optional
        const pollAnswerSix = interaction.options.getString('anwser-six');//Optional
        const pollAnswerSeven = interaction.options.getString('anwser-seven');//Optional
        const pollAnswerEight = interaction.options.getString('anwser-eight');//Optional
        const pollAnswerNine = interaction.options.getString('anwser-nine');//Optional
        const pollAnswerTen = interaction.options.getString('anwser-ten');//Optional


        const pollAnswers = [
            { text: `${pollAnswerOne || null}`, emoji: null },
            { text: `${pollAnswerTwo || null}`, emoji: null },
            { text: `${pollAnswerThree || null}`, emoji: null },
            { text: `${pollAnswerFour || null}`, emoji: null },
            { text: `${pollAnswerFive || null}`, emoji: null },
            { text: `${pollAnswerSix || null}`, emoji: null },
            { text: `${pollAnswerSeven || null}`, emoji: null },
            { text: `${pollAnswerEight || null}`, emoji: null },
            { text: `${pollAnswerNine || null}`, emoji: null },
            { text: `${pollAnswerTen || null}`, emoji: null },
        ];
        console.log(pollAnswers)//See whats working
        let pollMultiChoice;

        if (pollMultiChoiceSelection === 'true') {
            pollMultiChoice = true;
        } else if (pollMultiChoiceSelection === 'false') {
            pollMultiChoice = false;
        }
        console.log(pollMultiChoice)//See whats working

        const pollData = {
            question: { text: `${pollQuestion}` },
            answers: pollAnswers,
            duration: pollDuration,
            allowMultiselect: pollMultiChoice
        }

        await interaction.reply({ content: `poll done`, ephemeral: true })
        await interaction.followUp({
            content: null, embeds: [], files: [], components: [], poll: pollData, tts: false, fetchReply: false
        })
    }
}"
2z6B1tPq,Untitled,mantha_raghava,Java,Sunday 5th of May 2024 12:35:32 AM CDT,"import java.io.*;
import java.util.*;

public class Solution {
    static class Node{
        int data;
        Node left,right;
        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    public static Node bst(int arr[],Node root,int n){
        for(int i=1;i<n;i++){
            root=insert(root,arr[i]);
        }
        return root;
    }
    public static Node insert(Node root,int val){
        if(root==null){
            return new Node(val);
        }
        if(val<root.data){
            root.left=insert(root.left,val);
        }
        else{
            root.right=insert(root.right,val);
        }
        return root;
    }
    public static int find(Node root,int val,int d){
        if(root==null){
            return -1;
        }
        if(root.data==val){
            return d;
        }
        else if(root.data>val){
            return find(root.left,val,d+=1);
        }
        else{
            return find(root.right,val,d+=1);
        }       
    }

    public static void main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-->0){
            int n=sc.nextInt();
            int[] arr=new int[n];
            for(int i=0;i<n;i++){
                arr[i]=sc.nextInt();
            }
            Node rt=new Node(arr[0]);
            Node root=bst(arr,rt,n);
            for(int i=0;i<n;i++){
                System.out.print(find(root,arr[i],0)+"" "");
            }
            System.out.println();
        }
    }
}"
qwwsFr6d,Splah Layout,usfer,XML,Saturday 4th of May 2024 11:50:25 PM CDT,"<com.airbnb.lottie.LottieAnimationView
        android:id=""@+id/louding""
        android:layout_width=""match_parent""
        android:layout_height=""100dp""
        app:lottie_autoPlay=""true""
        app:lottie_loop=""true""
        android:layout_below=""@+id/icon""
        app:lottie_fileName=""loader.json"" />"
fcsfQQB2,AI-GENERATE2.pyw,Najeebsk,Python,Saturday 4th of May 2024 11:18:09 PM CDT,"import os
import numpy as np
from imageio.v2 import imread
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk

header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def read_file(file_path):
    file_bytes = open(file_path, ""rb"").read()
    return np.unpackbits(file_bytes)

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def write_file(file_path, file_bit_array):
    bytes_data = np.packbits(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def browse_file():
    filename = filedialog.askopenfilename(initialdir=""/"", title=""Select Picture File"")
    original_entry_unhide.delete(0, tk.END)
    original_entry_unhide.insert(0, filename)

def browse_save_location():
    save_location = filedialog.asksaveasfilename(initialdir=""/"", title=""Select Save Location"", defaultextension="".jpg"")
    save_entry_unhide.delete(0, tk.END)
    save_entry_unhide.insert(0, save_location)

def unhide_images():
    original_file = original_entry_unhide.get()
    save_file = save_entry_unhide.get()
    if not os.path.isfile(original_file):
        print(""Image file does not exist"")
        return

    encoded_data, shape_orig = read_image(original_file)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len+header_len]
    write_file(save_file, data)
    print(""Image decoded and saved"")

    # Load and display the original image
    original_image = Image.open(original_file)
    original_image.thumbnail((shape_orig[0] // 3, shape_orig[1]))  # Resize if needed
    original_photo = ImageTk.PhotoImage(original_image)
    lbl.config(image=original_photo)
    lbl.image = original_photo

    # Load and display the saved image
    saved_image = Image.open(save_file)
    saved_image.thumbnail((shape_orig[0] // 3, shape_orig[1]))  # Resize if needed
    saved_photo = ImageTk.PhotoImage(saved_image)
    lbl2.config(image=saved_photo)
    lbl2.image = saved_photo

root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Najeeb Generate AI Images"")

# Input for Picture Selection
tk.Label(root, text=""Select Picture File:"").place(x=10, y=10)
original_entry_unhide = tk.Entry(root)
original_entry_unhide.place(x=140, y=10)
browse_button = tk.Button(root, text=""Browse"", command=browse_file)
browse_button.place(x=330, y=8)

# Input for Save Location
tk.Label(root, text=""Select Save Location:"").place(x=10, y=40)
save_entry_unhide = tk.Entry(root)
save_entry_unhide.place(x=140, y=40)
browse_save_button = tk.Button(root, text=""Browse"", command=browse_save_location)
browse_save_button.place(x=330, y=38)

# Button to unhide images
unhide_button = tk.Button(root, text=""Generate AI Image"", command=unhide_images, bg=""#6699FF"", fg=""white"")
unhide_button.place(x=600, y=8)

# Frame for Original Image
f = tk.Frame(root, bd=3, bg=""#2c3e50"", width=500, height=640, relief=tk.GROOVE)
f.place(x=5, y=70)

lbl = tk.Label(f, bg=""#2c3e50"")
lbl.place(x=10, y=140)

# Frame for Generated AI Image
frame2 = tk.Frame(root, bd=3, width=500, height=640, relief=tk.GROOVE, bg=""#34495e"")
frame2.place(x=505, y=70)

lbl2 = tk.Label(frame2, bg=""#34495e"")
lbl2.place(x=10, y=100)

root.mainloop()
"
cPUSHBqW,(autohotkey) bouncing deskop cat friend,Mangus875,Autohotkey,Saturday 4th of May 2024 11:05:31 PM CDT,"#SingleInstance Off
CoordMode ""Mouse"", ""Screen""
CoordMode ""ToolTip"", ""Screen""
#R::Reload
SetWinDelay 0

guiW := 60
guiH := 46

MyGui := Gui(, """")
MyGui.Opt(""ToolWindow -Sysmenu +AlwaysOnTop"")
MyGui.SetFont ""s36 w700""
;""ebad54""
; MyGui.BackColor := format(""{1:x}"", ((235 << 16) | (173 << 8) | 84) + ((random(-35,35) << 16) | (random(-30,30) << 8) | random(-20,20)))
MyGui.BackColor := format(""{1:x}"", ((random(50,240) << 16) | (random(50,240) << 8) | random(50,240)))

MyGui.Add(""Text"", ""x"" (guiW/2-21) "" y"" (guiH/2-44), "". ."")
MyGui.SetFont ""cfff0ee s30"", ""Javanese Text""
MyGui.Add(""Text"", ""xp15 yp-1"", ""!"")
MyGui.SetFont ""s16""
MyGui.SetFont ""c000000"", ""Courier New""
MyGui.Add(""Text"", ""w12 yp44"", ""^"")
WinSetStyle(""-0xC00000"", MyGui)

OnMessage(0x201, WM_MouseDown)
MyGui.Show(""w"" guiW "" h"" guiH "" Center NoActivate"")
lastX := 0
lastY := 0
dx := 0
dy := 0
falling := false
grabbed := false
areaLeft := 0
areaTop := 0
areaRight := 0
areaBottom := 0

!P::ExitApp

WM_MouseDown(wParam, lParam, msg, window) {
	global grabbed
	
	if (window != MyGui.Hwnd) {
		return
	}
	
	grabbed := true
	MouseGetPos &mouseX, &mouseY
	lastX := mouseX
	lastY := mouseY
}

~LButton Up::MouseUp
MouseUp() {
	global grabbed
	global dx
	global dy
	
	speedFactor := 0.2
	
	if grabbed {
		grabbed := false
		fall(dx*speedFactor, dy*speedFactor)
	}
}

velx := 0.0
posx := 0.0
accy := 0.1
vely := 0.0
posy := 0.0
fall(xinit := 0, yinit := 0) {
	global velx
	global posx
	global vely
	global accy
	global posy
	global dx
	global dy
	global falling
	velX := xinit
	velY := yinit
	
	fric := 1
	bounce := 1
	
	falling := true
	
	WinGetPos &startX, &startY,,, MyGui
	posY := startY
	posX := startX
	
	MonitorGetWorkArea , &areaLeft, &areaTop, &areaRight, &areaBottom
	while (abs(velY) > 0.5 or (areaBottom - abs(posY+guiH) > 2)) {
		Sleep 1
		velY += accY
		posY += velY
		posX += velX
		
		WinGetPos &winx, &winy,,, MyGui
		if (posY+guiH > areaBottom) {
			; WinMove winx, areaBottom-guiH,,, MyGui
			posY := areaBottom-guiH
			velY := -bounce*abs(velY)
			velX *= fric
		} else if (posY < areaTop) {
			; WinMove winx, areaTop,,, MyGui
			posY := areaTop
			velY := bounce*abs(velY)
			velX *= fric
		}
		
		if (winX+guiW > areaRight) {
			; WinMove areaRight-guiW, posY,,, MyGui
			posX := areaRight-guiW
			velX := -bounce*abs(velX)
			velY *= fric
		} else if (posX < areaLeft) {
			; WinMove areaLeft, posY,,, MyGui
			posX := areaLeft
			velX := bounce*abs(velX)
			velY *= fric
		}
		
		WinMove posX, posY,,, MyGui
		if grabbed {
			break
		}
	}	
	
	WinGetPos &endposX,,,, MyGui
	if (!grabbed) {
		WinMove endposX, areaBottom-guiH,,, MyGui
	}
	velY := 0
	posY := 0
	velX := 0
	posX := 0
	SetTimer () => falling := false, -5
}

fall(0, -3)

while true {
	global dx
	global dy
	global lastX
	global lastY
	global grabbed
	WinGetPos &winx, &winy,,, MyGui
	MouseGetPos &x, &y
	dx := x-lastX
	dy := y-lastY
	lastX := x
	lastY := y
	
	if (!falling && grabbed) {
		WinMove winx+dx, winy+dy,,, MyGui
	}
	
	sleep 1
}"
znqhE604,Gerenciador de Senhas Version 1.0,MizunoBrasil,Python,Saturday 4th of May 2024 09:52:31 PM CDT,"# Agora estamos come√ßando a conversar. Falta o bloco de edi√ß√£o. Now we're talking. The record editing block needs to be implemented.

import tkinter as tk
from tkinter import ttk
import threading
import os

class Application(tk.Tk):
    def __init__(self):
        super().__init__()

        self.title(""Gerenciador de URLs"")
        self.geometry(""800x500"")  # Aumentando o tamanho da janela
        self.center_window()

        self.create_widgets()

    def center_window(self):
        width = 800  # Atualizando a largura
        height = 500  # Atualizando a altura
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()

        x = (screen_width // 2) - (width // 2)
        y = (screen_height // 2) - (height // 2)

        self.geometry(f""{width}x{height}+{x}+{y}"")

    def create_widgets(self):
        self.url_label = ttk.Label(self, text=""URL:"")
        self.url_label.grid(row=0, column=0, sticky=""w"", padx=10, pady=10)
        self.url_entry = ttk.Entry(self, width=50)
        self.url_entry.grid(row=0, column=1, padx=10, pady=10)

        self.login_label = ttk.Label(self, text=""Login:"")
        self.login_label.grid(row=1, column=0, sticky=""w"", padx=10, pady=10)
        self.login_entry = ttk.Entry(self, width=50)
        self.login_entry.grid(row=1, column=1, padx=10, pady=10)

        self.password_label = ttk.Label(self, text=""Senha:"")
        self.password_label.grid(row=2, column=0, sticky=""w"", padx=10, pady=10)
        self.password_entry = ttk.Entry(self, width=50)
        self.password_entry.grid(row=2, column=1, padx=10, pady=10)

        self.show_password_var = tk.BooleanVar(value=False)
        self.show_password_checkbox = ttk.Checkbutton(self, text=""Mostrar Senha"", variable=self.show_password_var, command=self.toggle_password_visibility)
        self.show_password_checkbox.grid(row=2, column=2, padx=10, pady=10)

        self.add_button = ttk.Button(self, text=""Adicionar"", command=self.add_record)
        self.add_button.grid(row=3, column=1, padx=10, pady=10)

        # Aumentando o tamanho da caixa de listagem
        self.url_listbox = tk.Listbox(self, width=120, height=20)
        self.url_listbox.grid(row=4, column=0, columnspan=3, padx=10, pady=10)

        # Adicionando uma barra de rolagem vertical
        scrollbar = ttk.Scrollbar(self, orient=""vertical"", command=self.url_listbox.yview)
        scrollbar.grid(row=4, column=3, sticky=""ns"")
        self.url_listbox.config(yscrollcommand=scrollbar.set)

        self.url_listbox.bind(""<Button-3>"", self.show_context_menu)

        self.load_records()

    def toggle_password_visibility(self):
        if self.show_password_var.get():
            self.password_entry.config(show="""")
        else:
            self.password_entry.config(show=""*"")

    def add_record(self):
        url = self.url_entry.get()
        login = self.login_entry.get()
        password = self.password_entry.get()

        with open(""records.txt"", ""a"") as file:
            file.write(f""{url},{login},{password}\n"")

        self.load_records()

    def load_records(self):
        self.url_listbox.delete(0, tk.END)

        if os.path.exists(""records.txt""):
            with open(""records.txt"", ""r"") as file:
                for line in file:
                    url, login, password = line.strip().split("","")
                    self.url_listbox.insert(tk.END, f""URL: {url} - Login: {login} - Senha: {password}"")

    def show_context_menu(self, event):
        self.context_menu = tk.Menu(self, tearoff=0)
        self.context_menu.add_command(label=""Copiar URL"", command=self.copy_url)
        self.context_menu.add_command(label=""Copiar Login"", command=self.copy_login)
        self.context_menu.add_command(label=""Copiar Senha"", command=self.copy_password)
        self.context_menu.add_command(label=""Editar"", command=self.edit_record)
        self.context_menu.add_command(label=""Excluir"", command=self.confirm_delete)

        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()

    def copy_url(self):
        selected_index = self.url_listbox.curselection()
        if selected_index:
            url = self.url_listbox.get(selected_index[0]).split("" - "")[0].split("": "")[1]
            self.clipboard_clear()
            self.clipboard_append(url)
            self.update()

    def copy_login(self):
        selected_index = self.url_listbox.curselection()
        if selected_index:
            login = self.url_listbox.get(selected_index[0]).split("" - "")[1].split("": "")[1]
            self.clipboard_clear()
            self.clipboard_append(login)
            self.update()

    def copy_password(self):
        selected_index = self.url_listbox.curselection()
        if selected_index:
            password = self.url_listbox.get(selected_index[0]).split("" - "")[2].split("": "")[1]
            self.clipboard_clear()
            self.clipboard_append(password)
            self.update()

    def edit_record(self):
        pass  # Implementar a edi√ß√£o do registro

    def confirm_delete(self):
        confirmation = ConfirmDeleteDialog(self)
        self.wait_window(confirmation)
        if confirmation.result:
            self.delete_record()

    def delete_record(self):
        selected_index = self.url_listbox.curselection()
        if selected_index:
            self.url_listbox.delete(selected_index[0])

            # Atualizar o arquivo removendo a linha
            if os.path.exists(""records.txt""):
                with open(""records.txt"", ""r"") as file:
                    lines = file.readlines()
                with open(""records.txt"", ""w"") as file:
                    for i, line in enumerate(lines):
                        if i != selected_index[0]:
                            file.write(line)

class ConfirmDeleteDialog(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)

        self.geometry(""200x100"")
        self.title(""Confirma√ß√£o de Exclus√£o"")
        self.result = False

        self.label = ttk.Label(self, text=""Deseja realmente excluir este registro?"")
        self.label.pack(pady=10)

        self.confirm_button = ttk.Button(self, text=""Confirmar"", command=self.confirm)
        self.confirm_button.pack(side=""left"", padx=10)

        self.cancel_button = ttk.Button(self, text=""Cancelar"", command=self.cancel)
        self.cancel_button.pack(side=""right"", padx=10)

        self.protocol(""WM_DELETE_WINDOW"", self.cancel)

    def confirm(self):
        self.result = True
        self.destroy()

    def cancel(self):
        self.result = False
        self.destroy()

if __name__ == ""__main__"":
    app = Application()
    app.mainloop()"
HXdBWFqH,Bash script to update T-Mobile Router Config,irezvi,Bash,Saturday 4th of May 2024 09:24:28 PM CDT,"#!/bin/bash

# Function to get authentication token
token() {
    read -sp ""Enter Password For The Gateway: "" password
    body=""{\""username\"": \""admin\"", \""password\"": \""$password\""}""
    token=$(curl -s -X POST -H ""Content-Type: application/json"" -d ""$body"" ""http://192.168.12.1/TMI/v1/auth/login"" | jq -r '.auth.token')
    echo ""token: $token""
    HEADER=""Authorization: Bearer $token""
}

# Function to display the menu
show_menu() {
    clear
    echo ""Options for Gateway:""
    echo ""1: Turn Off 2.4G WiFi""
    echo ""2: Turn On 2.4G WiFi""
    echo ""3: Turn Off 5G WiFi""
    echo ""4: Turn On 5G WiFi""
    echo ""5: Reboot Gateway""
    echo ""6: Download Config to Verify Changes""
    echo ""7: Update Config""
    echo ""Q: Quit""
}

# Function to turn off 2.4G WiFi
wifi_off_24() {
    echo ""Turning off 2.4G WiFi...""
    echo ""$HEADER""
    curl -s -H ""$HEADER"" ""http://192.168.12.1/TMI/v1/network/configuration/v2?get=ap"" -o config.json
    sed -i 's/""2.4ghz"":{""isRadioEnabled"":true}/""2.4ghz"":{""isRadioEnabled"":false}/' config.json
    curl -s -X POST -H ""$HEADER"" -H ""Content-Type: application/json"" -d @config.json ""http://192.168.12.1/TMI/v1/network/configuration/v2?set=ap""
}

# Function to turn on 2.4G WiFi
wifi_on_24() {
    echo ""$HEADER""
    curl -s -H ""$HEADER"" ""http://192.168.12.1/TMI/v1/network/configuration/v2?get=ap"" -o config.json
    sed -i 's/""2.4ghz"":{""isRadioEnabled"":false}/""2.4ghz"":{""isRadioEnabled"":true}/' config.json
    curl -s -X POST -H ""$HEADER"" -H ""Content-Type: application/json"" -d @config.json ""http://192.168.12.1/TMI/v1/network/configuration/v2?set=ap""
}

# Function to turn off 5G WiFi
wifi_off_5() {
    echo ""$HEADER""
    curl -s -H ""$HEADER"" ""http://192.168.12.1/TMI/v1/network/configuration/v2?get=ap"" -o config.json
    sed -i 's/""5.0ghz"":{""isRadioEnabled"":true}/""5.0ghz"":{""isRadioEnabled"":false}/' config.json
    curl -s -X POST -H ""$HEADER"" -H ""Content-Type: application/json"" -d @config.json ""http://192.168.12.1/TMI/v1/network/configuration/v2?set=ap""
}

# Function to turn on 5G WiFi
wifi_on_5() {
    curl -s -H ""$HEADER"" ""http://192.168.12.1/TMI/v1/network/configuration/v2?get=ap"" -o config.json
    sed -i 's/""5.0ghz"":{""isRadioEnabled"":false}/""5.0ghz"":{""isRadioEnabled"":true}/' config.json
    curl -s -X POST -H ""$HEADER"" -H ""Content-Type: application/json"" -d @config.json ""http://192.168.12.1/TMI/v1/network/configuration/v2?set=ap""
}

# Function to download the current configuration
config() {
    curl -s -H ""$HEADER"" ""http://192.168.12.1/TMI/v1/network/configuration/v2?get=ap"" -o config.json
}

update_config() {
    curl -s -X POST -H ""$HEADER"" -H ""Content-Type: application/json"" -d @config_custom.json ""http://192.168.12.1/TMI/v1/network/configuration/v2?set=ap""
}

# Function to reboot the gateway
reboot() {
    curl -s -X POST -H ""$HEADER"" ""http://192.168.12.1/TMI/v1/gateway/reset?set=reboot""
}

# Main function to control menu and actions
menu() {
    show_menu
    read -p ""Please make a selection: "" choice
    case ""$choice"" in
        1) echo ""Turning off 2.4G WiFi...""
           wifi_off_24
           ;;
        2) echo ""Turning on 2.4G WiFi...""
           wifi_on_24
           ;;
        3) echo ""Turning off 5G WiFi...""
           wifi_off_5
           ;;
        4) echo ""Turning on 5G WiFi...""
           wifi_on_5
           ;;
        5) echo ""Rebooting Gateway...""
           reboot
           ;;
        6) echo ""Downloading config...""
           config
           ;;
        7) echo ""Updating config...""
              update_config
              ;;
        ""Q""|""q"") echo ""Quitting...""
           exit 0
           ;;
        *) echo ""Invalid option. Please try again.""
           ;;
    esac
    echo ""Returning to Menu""
    sleep 2
    menu
}

# Initialize script by obtaining token and showing menu
token
menu"
FYFRi7CS,wheat_harvester,Lyandro,Lua,Saturday 4th of May 2024 09:24:08 PM CDT,"-- Variaveis
local isBlock, data
local isWheat, wheat

-- Fun√ß√µes
function drop()
    wheat_seeds_info = turtle.getItemDetail(1)
    for i = 2, 16, 1 do
        turtle.select(i)
        actual_slot = turtle.getItemDetail(i)
        if (wheat_seeds_info.count < 64 and actual_slot ~= nil and actual_slot.name == ""minecraft:wheat_seeds"") then
            turtle.transferTo(1, 64)
        end
        turtle.dropDown()
    end
    sleep(600)
end

function inspect_wheat()
    isWheat, wheat = turtle.inspect()

    if (wheat.state.age == 7) then
        turtle.dig()
        turtle.select(1)
        turtle.place()
    end
end

function deepslate_harvester()
    turtle.turnLeft()

    for i = 0, 7, 1 do
        inspect_wheat()
        turtle.turnLeft()
        turtle.turnLeft()
        inspect_wheat()
        turtle.turnRight()

        if (i < 7) then
            turtle.forward()
            turtle.turnRight()
        end

        isBlock, data = turtle.inspect()

        if (data.name == ""minecraft:cobblestone"") then
            drop()
        end

    end
end

function glass_harvester()
    turtle.turnRight()

    for i = 0, 7, 1 do
        inspect_wheat()
        turtle.turnRight()
        turtle.turnRight()
        inspect_wheat()
        turtle.turnLeft()

        if (i < 7) then
            turtle.forward()
            turtle.turnLeft()
        end

        isBlock, data = turtle.inspect()

        if (data.name == ""minecraft:deepslate_bricks"") then
            drop()
        end

    end
end

-- Loop
while true do
    -- Verifica qual bloco a turtle est√° olhando
    isBlock, data = turtle.inspect()

    -- Se estiver olhando stone, fa√ßa:
    if (data.name == ""minecraft:deepslate_bricks"") then
        deepslate_harvester()
    end

    -- Se estiver olhando cobblestone, fa√ßa:
    if (data.name == ""minecraft:cobblestone"") then
        glass_harvester()
    end
end
"
xAmsGurT,Most Writer B (Novely),AhmadXploit,Dart,Saturday 4th of May 2024 09:02:48 PM CDT,"{
	""writersB"": [
		{
		  ""userPhoto"": ""....."",
		  ""name"": ""@rocky_gerung"",
		  ""genre"": ""#Phylosophy""
	},
		{
		  ""userPhoto"": ""....."",
		  ""name"": ""@anonymous"",
		  ""genre"": ""#Kingdom""
	},
		{
		  ""userPhoto"": ""....."",
		  ""name"": ""@dahlia_ss19"",
		  ""genre"": ""#Family""
	}
  ]
}"
zwc6Zwgs,Popup Box,TheiPhoneFan,HTML,Saturday 4th of May 2024 08:55:54 PM CDT,"<!-- Created On 2024-05-04 -->
<!DOCTYPE html>
<html lang=""en"">

<head>
    <!-- External Font -->
    <link href=""https://fonts.googleapis.com/css?family=Roboto:400,300,100,700,900"" rel=""stylesheet"" type=""text/css"">
    <link href='https://fonts.googleapis.com/css?family=Lora:400,300,100,700,900' rel='stylesheet'>
    <!-- Stylesheet Link -->
    <link rel=""stylesheet"" href=""./theme/style.css"" />
    <link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"">
    <!-- Favicon Image Link -->
    <link rel=""icon"" type=""image/x-png"" href=""./logos/js-blog-favicon.png"">
    <!-- Enables Unicode Characters To Be Displayed -->
    <meta charset=""UTF-8"">
    <!-- Scales Website Content -->
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>Popup Boxes</title>
    <style>
        .popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #fff;
            padding: 20px;
            border: 2px solid gray;
            border-radius: 16px;
            max-width: 90%;
            max-height: 90%;
            overflow: auto;
            z-index: 9999;
        }

        .popup h1, h2, h3, p {
            color: black;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9998;
        }

        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            cursor: pointer;
            font-size: 25px;
        }

        .popup-button-img {
            cursor: pointer;
            border-radius: 16px;
            width: 300px;
            max-width: 100%;
        }
    </style>
</head>

<body>
    <div class=""flex-container"">
        <div>
            <img src=""fish.jpg"" onclick=""openPopup('popup1')"" class=""popup-button-img"">
        </div>
        <div>
            <img src=""flower.jpg"" onclick=""openPopup('popup2')"" class=""popup-button-img"">
        </div>
    </div>

    <div id=""popup1"" class=""popup"" style=""display: none;"">
        <span class=""close-button"" onclick=""closePopup('popup1')"">√ó</span>
        <h2>Popup 1</h2>
        <p>This is the content of Popup 1.</p>
    </div>

    <div id=""popup2"" class=""popup"" style=""display: none;"">
        <span class=""close-button"" onclick=""closePopup('popup2')"">√ó</span>
        <h2>Popup 2</h2>
        <p>This is the content of Popup 2.</p>
    </div>

    <div id=""overlay"" class=""overlay"" style=""display: none;""></div>

    <script>
        function openPopup(popupId) {
            var popup = document.getElementById(popupId);
            var overlay = document.getElementById('overlay');
            if (popup && overlay) {
                popup.style.display = 'block';
                overlay.style.display = 'block';
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        closePopup(popupId);
                    }
                });
            }
        }

        function closePopup(popupId) {
            var popup = document.getElementById(popupId);
            var overlay = document.getElementById('overlay');
            if (popup && overlay) {
                popup.style.display = 'none';
                overlay.style.display = 'none';
            }
        }
    </script>

</body>

</html>"
iB5Qsmmb,convers√£o de dinheiro..,Rnery,Python,Saturday 4th of May 2024 08:33:40 PM CDT,"from locale import setlocale, currency, Error

class Dinheiro:
    def __init__(self, valor):
        self.valor = valor

    def converter_para_moeda(self, moeda):
        try:
            setlocale(locale.LC_ALL, moeda)
            return currency(self.valor, grouping=True)
        except Error:
            return f""Moeda n√£o suportada: {moeda}""

# Exemplo de uso:
valor_em_reais = 300
dinheiro = Dinheiro(valor_em_reais)

print(f""Reais: {dinheiro.converter_para_moeda('pt_BR')}"")
print(f""D√≥lar: {dinheiro.converter_para_moeda('en_US')}"")
print(f""Euro: {dinheiro.converter_para_moeda('de_DE')}"")
print(f""Libra Esterlina: {dinheiro.converter_para_moeda('en_GB')}"")
print(f""Iene Japon√™s: {dinheiro.converter_para_moeda('ja_JP')}"")
print(f""D√≥lar Australiano: {dinheiro.converter_para_moeda('en_AU')}"")
print(f""Franco Su√≠√ßo: {dinheiro.converter_para_moeda('fr_CH')}"")
"
vM1iewiZ,Most Writer A (Novely),AhmadXploit,Dart,Saturday 4th of May 2024 07:59:59 PM CDT,"{
	""writersA"": [
		{
		  ""userPhoto"": ""....."",
		  ""name"": ""@ahmad_dev1337"",
		  ""genre"": ""#Romance""
	},
		{
		  ""userPhoto"": ""....."",
		  ""name"": ""@humee_07"",
		  ""genre"": ""#Adventure""
	},
		{
		  ""userPhoto"": ""....."",
		  ""name"": ""@tere_liyee"",
		  ""genre"": ""#Politics""
	}
  ]
}"
ZaQSyvw0,2024-05-04_stats.json,rdp_snitch,JSON,Saturday 4th of May 2024 07:18:06 PM CDT,"{
  ""ip"": {
    ""185.161.248.121"": 18,
    ""92.51.2.11"": 6,
    ""103.232.53.123"": 33,
    ""139.162.24.129"": 168,
    ""205.210.31.224"": 9,
    ""103.238.234.199"": 3,
    ""194.165.16.73"": 9,
    ""120.89.61.36"": 18,
    ""107.167.82.123"": 6,
    ""88.214.26.84"": 3,
    ""152.42.247.37"": 9,
    ""185.170.144.3"": 6,
    ""123.56.20.194"": 3,
    ""58.218.204.183"": 18,
    ""45.227.254.49"": 6,
    ""194.165.16.37"": 6,
    ""20.42.11.1"": 6,
    ""152.32.159.79"": 3,
    ""39.105.102.119"": 3,
    ""178.128.119.244"": 3,
    ""157.119.251.94"": 3,
    ""205.210.31.240"": 9,
    ""87.251.75.145"": 3,
    ""167.71.223.144"": 6,
    ""64.124.50.139"": 6,
    ""159.223.34.114"": 3,
    ""116.140.196.215"": 3,
    ""24.199.88.146"": 12,
    ""138.68.31.5"": 3,
    ""36.91.222.100"": 6,
    ""172.105.117.227"": 3,
    ""123.31.20.85"": 21,
    ""172.232.123.220"": 3,
    ""198.235.24.245"": 9,
    ""210.211.117.165"": 3,
    ""112.4.139.162"": 3,
    ""172.105.25.118"": 9,
    ""173.0.162.11"": 3,
    ""194.165.16.11"": 6,
    ""205.210.31.178"": 9,
    ""45.227.254.54"": 6,
    ""100.2.110.132"": 3
  },
  ""asn"": {
    ""AS49202"": 18,
    ""AS209588"": 6,
    ""AS63737"": 33,
    ""AS63949"": 183,
    ""AS396982"": 36,
    ""AS140810"": 3,
    ""AS48721"": 21,
    ""AS9658"": 18,
    ""AS53755"": 6,
    ""AS209132"": 3,
    ""AS14061"": 36,
    ""AS197414"": 6,
    ""AS37963"": 6,
    ""AS4134"": 18,
    ""AS267784"": 12,
    ""AS8075"": 6,
    ""AS135377"": 3,
    ""AS135944"": 3,
    ""AS208091"": 3,
    ""AS6461"": 6,
    ""AS4837"": 3,
    ""AS7713"": 6,
    ""AS45899"": 21,
    ""AS38731"": 3,
    ""AS56046"": 3,
    ""AS5555"": 3,
    ""AS701"": 3
  },
  ""isp"": {
    ""Kisara LLC"": 18,
    ""Flyservers S.A."": 39,
    ""VIETSERVER"": 33,
    ""LINODE"": 168,
    ""Google LLC"": 36,
    ""MAYTINHVPSTTT"": 3,
    ""Eastern Telecommunications Philippines, Inc."": 18,
    ""Input Output Flood LLC"": 6,
    ""Alviva Holding Limited"": 3,
    ""DigitalOcean"": 9,
    ""Xhost Internet Solutions LP"": 9,
    ""Hangzhou Alibaba Advertising Co"": 6,
    ""Chinanet"": 18,
    ""Microsoft Corporation"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""DigitalOcean, LLC"": 27,
    ""VinhNam Commercial informatics service corporation"": 3,
    ""Zayo Bandwidth"": 6,
    ""China Unicom CHINA169 Network"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Akamai Technologies"": 12,
    ""VietNam Post and Telecom Corporation"": 21,
    ""Akamai Technologies, Inc."": 3,
    ""VTDC"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Sohonet Limited"": 3,
    ""Verizon Business"": 3
  },
  ""org"": {
    ""Kisara LLC"": 18,
    ""Alviva Holding Limited"": 6,
    ""VietServer Services technology company limited"": 33,
    ""Linode, LLC"": 168,
    ""Palo Alto Networks, Inc"": 36,
    ""Vpsttt Computer Company Limited"": 3,
    ""Flyservers S.A"": 21,
    ""Eastern Telecommunications Philippines, Inc"": 18,
    ""DemonVPS"": 6,
    ""FutureNow Incorporated"": 3,
    ""DigitalOcean, LLC"": 33,
    ""Xhostis"": 6,
    ""Aliyun Computing Co., LTD"": 6,
    ""Chinanet JS"": 18,
    ""UAB Host Baltic"": 12,
    ""Microsoft Azure Cloud (eastus)"": 6,
    ""Ucloud Information Technology"": 3,
    ""Digitalocean"": 3,
    ""VINACIS"": 3,
    ""Xhost Internet Solutions"": 3,
    ""Microsoft Corporation"": 6,
    ""China United Network Communications Corporation Limited"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Linode"": 12,
    ""Vietnam Posts and Telecommunications Group"": 21,
    ""Akamai Technologies, Inc."": 3,
    ""Viettel - CHT Company Ltd"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Sohonet Inc"": 3,
    ""Verizon Business"": 3
  },
  ""regionName"": {
    ""Moscow"": 18,
    ""Hesse"": 6,
    ""Hanoi"": 54,
    ""Central Singapore"": 177,
    ""California"": 39,
    ""Ho Chi Minh"": 9,
    ""Kaunas"": 21,
    ""Metro Manila"": 18,
    ""Arizona"": 6,
    ""La Rivi\u00e8re Anglaise"": 3,
    ""New York"": 12,
    ""North Holland"": 9,
    ""Beijing"": 9,
    ""Jiangsu"": 21,
    ""Vilnius"": 12,
    ""Virginia"": 12,
    ""Maharashtra"": 3,
    ""South West"": 3,
    ""New Jersey"": 12,
    ""Jakarta"": 6,
    ""North West"": 3,
    ""Tamil Nadu"": 3,
    ""Ontario"": 9,
    ""Georgia"": 3
  },
  ""country"": {
    ""Russia"": 18,
    ""Germany"": 6,
    ""Vietnam"": 63,
    ""Singapore"": 183,
    ""United States"": 84,
    ""Lithuania"": 33,
    ""Philippines"": 18,
    ""Seychelles"": 3,
    ""The Netherlands"": 9,
    ""China"": 30,
    ""India"": 6,
    ""Indonesia"": 6,
    ""Canada"": 9
  },
  ""account"": {
    ""Test"": 54,
    ""Administr"": 21,
    ""hello"": 156,
    ""Administrator"": 45,
    ""Admin"": 42,
    ""Whatuptime.com"": 42,
    ""Jakartakini123#"": 42,
    ""aBmMDceib"": 3,
    ""GkjaEz"": 3,
    ""wxuMWt"": 3,
    ""xyKWAqfFd"": 3,
    ""BGZOCj"": 3,
    ""qFQOGI"": 3,
    ""Domain"": 6,
    ""(empty)"": 6,
    ""s4qbxlfw"": 12,
    ""beio"": 3,
    ""GpUEuopnW"": 3,
    ""wdprhp"": 3,
    ""aOXXUg"": 3,
    ""iuYCJWU"": 3,
    ""JduSYprho"": 3,
    ""URkogg"": 3,
    ""iVMANX"": 3
  },
  ""keyboard"": {
    ""Unknown"": 468
  },
  ""client_build"": {
    ""Unknown"": 468
  },
  ""client_name"": {
    ""Unknown"": 468
  },
  ""ip_type"": {
    ""Unknown"": 165,
    ""hosting"": 273,
    ""proxy"": 21,
    ""hosting & proxy"": 6,
    ""mobile"": 3
  }
}"
Sug5hpTc,2024-05-04_stats.json,rdp_snitch,JSON,Saturday 4th of May 2024 07:16:06 PM CDT,"{
  ""ip"": {
    ""185.161.248.121"": 12,
    ""92.51.2.11"": 4,
    ""103.232.53.123"": 22,
    ""139.162.24.129"": 112,
    ""205.210.31.224"": 6,
    ""103.238.234.199"": 2,
    ""194.165.16.73"": 6,
    ""120.89.61.36"": 12,
    ""107.167.82.123"": 4,
    ""88.214.26.84"": 2,
    ""152.42.247.37"": 6,
    ""185.170.144.3"": 4,
    ""123.56.20.194"": 2,
    ""58.218.204.183"": 12,
    ""45.227.254.49"": 4,
    ""194.165.16.37"": 4,
    ""20.42.11.1"": 4,
    ""152.32.159.79"": 2,
    ""39.105.102.119"": 2,
    ""178.128.119.244"": 2,
    ""157.119.251.94"": 2,
    ""205.210.31.240"": 6,
    ""87.251.75.145"": 2,
    ""167.71.223.144"": 4,
    ""64.124.50.139"": 4,
    ""159.223.34.114"": 2,
    ""116.140.196.215"": 2,
    ""24.199.88.146"": 8,
    ""138.68.31.5"": 2,
    ""36.91.222.100"": 4,
    ""172.105.117.227"": 2,
    ""123.31.20.85"": 14,
    ""172.232.123.220"": 2,
    ""198.235.24.245"": 6,
    ""210.211.117.165"": 2,
    ""112.4.139.162"": 2,
    ""172.105.25.118"": 6,
    ""173.0.162.11"": 2,
    ""194.165.16.11"": 4,
    ""205.210.31.178"": 6,
    ""45.227.254.54"": 4,
    ""100.2.110.132"": 2
  },
  ""asn"": {
    ""AS49202"": 12,
    ""AS209588"": 4,
    ""AS63737"": 22,
    ""AS63949"": 122,
    ""AS396982"": 24,
    ""AS140810"": 2,
    ""AS48721"": 14,
    ""AS9658"": 12,
    ""AS53755"": 4,
    ""AS209132"": 2,
    ""AS14061"": 24,
    ""AS197414"": 4,
    ""AS37963"": 4,
    ""AS4134"": 12,
    ""AS267784"": 8,
    ""AS8075"": 4,
    ""AS135377"": 2,
    ""AS135944"": 2,
    ""AS208091"": 2,
    ""AS6461"": 4,
    ""AS4837"": 2,
    ""AS7713"": 4,
    ""AS45899"": 14,
    ""AS38731"": 2,
    ""AS56046"": 2,
    ""AS5555"": 2,
    ""AS701"": 2
  },
  ""isp"": {
    ""Kisara LLC"": 12,
    ""Flyservers S.A."": 26,
    ""VIETSERVER"": 22,
    ""LINODE"": 112,
    ""Google LLC"": 24,
    ""MAYTINHVPSTTT"": 2,
    ""Eastern Telecommunications Philippines, Inc."": 12,
    ""Input Output Flood LLC"": 4,
    ""Alviva Holding Limited"": 2,
    ""DigitalOcean"": 6,
    ""Xhost Internet Solutions LP"": 6,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""Chinanet"": 12,
    ""Microsoft Corporation"": 4,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""DigitalOcean, LLC"": 18,
    ""VinhNam Commercial informatics service corporation"": 2,
    ""Zayo Bandwidth"": 4,
    ""China Unicom CHINA169 Network"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Akamai Technologies"": 8,
    ""VietNam Post and Telecom Corporation"": 14,
    ""Akamai Technologies, Inc."": 2,
    ""VTDC"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Sohonet Limited"": 2,
    ""Verizon Business"": 2
  },
  ""org"": {
    ""Kisara LLC"": 12,
    ""Alviva Holding Limited"": 4,
    ""VietServer Services technology company limited"": 22,
    ""Linode, LLC"": 112,
    ""Palo Alto Networks, Inc"": 24,
    ""Vpsttt Computer Company Limited"": 2,
    ""Flyservers S.A"": 14,
    ""Eastern Telecommunications Philippines, Inc"": 12,
    ""DemonVPS"": 4,
    ""FutureNow Incorporated"": 2,
    ""DigitalOcean, LLC"": 22,
    ""Xhostis"": 4,
    ""Aliyun Computing Co., LTD"": 4,
    ""Chinanet JS"": 12,
    ""UAB Host Baltic"": 8,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""Ucloud Information Technology"": 2,
    ""Digitalocean"": 2,
    ""VINACIS"": 2,
    ""Xhost Internet Solutions"": 2,
    ""Microsoft Corporation"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Linode"": 8,
    ""Vietnam Posts and Telecommunications Group"": 14,
    ""Akamai Technologies, Inc."": 2,
    ""Viettel - CHT Company Ltd"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Sohonet Inc"": 2,
    ""Verizon Business"": 2
  },
  ""regionName"": {
    ""Moscow"": 12,
    ""Hesse"": 4,
    ""Hanoi"": 36,
    ""Central Singapore"": 118,
    ""California"": 26,
    ""Ho Chi Minh"": 6,
    ""Kaunas"": 14,
    ""Metro Manila"": 12,
    ""Arizona"": 4,
    ""La Rivi\u00e8re Anglaise"": 2,
    ""New York"": 8,
    ""North Holland"": 6,
    ""Beijing"": 6,
    ""Jiangsu"": 14,
    ""Vilnius"": 8,
    ""Virginia"": 8,
    ""Maharashtra"": 2,
    ""South West"": 2,
    ""New Jersey"": 8,
    ""Jakarta"": 4,
    ""North West"": 2,
    ""Tamil Nadu"": 2,
    ""Ontario"": 6,
    ""Georgia"": 2
  },
  ""country"": {
    ""Russia"": 12,
    ""Germany"": 4,
    ""Vietnam"": 42,
    ""Singapore"": 122,
    ""United States"": 56,
    ""Lithuania"": 22,
    ""Philippines"": 12,
    ""Seychelles"": 2,
    ""The Netherlands"": 6,
    ""China"": 20,
    ""India"": 4,
    ""Indonesia"": 4,
    ""Canada"": 6
  },
  ""account"": {
    ""Test"": 36,
    ""Administr"": 14,
    ""hello"": 104,
    ""Administrator"": 30,
    ""Admin"": 28,
    ""Whatuptime.com"": 28,
    ""Jakartakini123#"": 28,
    ""aBmMDceib"": 2,
    ""GkjaEz"": 2,
    ""wxuMWt"": 2,
    ""xyKWAqfFd"": 2,
    ""BGZOCj"": 2,
    ""qFQOGI"": 2,
    ""Domain"": 4,
    ""(empty)"": 4,
    ""s4qbxlfw"": 8,
    ""beio"": 2,
    ""GpUEuopnW"": 2,
    ""wdprhp"": 2,
    ""aOXXUg"": 2,
    ""iuYCJWU"": 2,
    ""JduSYprho"": 2,
    ""URkogg"": 2,
    ""iVMANX"": 2
  },
  ""keyboard"": {
    ""Unknown"": 312
  },
  ""client_build"": {
    ""Unknown"": 312
  },
  ""client_name"": {
    ""Unknown"": 312
  },
  ""ip_type"": {
    ""Unknown"": 110,
    ""hosting"": 182,
    ""proxy"": 14,
    ""hosting & proxy"": 4,
    ""mobile"": 2
  }
}"
