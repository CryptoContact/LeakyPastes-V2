id,title,username,language,date,content
j6ThMSnM,2024-01-15_stats.json,rdp_snitch,JSON,Monday 15th of January 2024 06:15:12 PM CDT,"{
  ""ip"": {
    ""158.220.82.163"": 163,
    ""80.66.76.92"": 2,
    ""194.165.17.21"": 21,
    ""109.69.7.157"": 6,
    ""74.105.22.131"": 20,
    ""198.235.24.236"": 3,
    ""103.56.61.130"": 2,
    ""213.97.250.153"": 18,
    ""194.165.16.72"": 2,
    ""20.102.104.36"": 1,
    ""45.227.254.55"": 2,
    ""77.90.185.2"": 3,
    ""87.251.75.145"": 3,
    ""185.170.144.3"": 2,
    ""168.119.66.109"": 6,
    ""87.251.75.120"": 2,
    ""202.55.132.183"": 1,
    ""198.235.24.218"": 3,
    ""112.46.117.178"": 2,
    ""196.190.117.7"": 2,
    ""216.73.161.231"": 1,
    ""5.250.180.52"": 1,
    ""81.143.229.7"": 2,
    ""103.28.70.53"": 5,
    ""152.32.206.181"": 1,
    ""58.218.204.183"": 3,
    ""81.19.135.2"": 3,
    ""123.56.20.194"": 1,
    ""198.235.24.33"": 3,
    ""194.165.16.11"": 2,
    ""103.184.47.83"": 1,
    ""37.19.200.111"": 5,
    ""45.58.126.154"": 1,
    ""185.196.220.41"": 3,
    ""45.227.254.54"": 2,
    ""193.142.146.227"": 3,
    ""87.251.75.64"": 1,
    ""113.31.31.153"": 1,
    ""45.93.20.204"": 3,
    ""206.189.157.63"": 4,
    ""216.73.160.116"": 1,
    ""158.69.145.21"": 23396,
    ""198.235.24.75"": 3,
    ""36.91.222.100"": 1
  },
  ""asn"": {
    ""AS51167"": 163,
    ""AS208091"": 8,
    ""AS48721"": 25,
    ""AS21183"": 6,
    ""AS701"": 20,
    ""AS396982"": 12,
    ""AS4837"": 3,
    ""AS3352"": 18,
    ""AS8075"": 1,
    ""AS267784"": 4,
    ""AS198465"": 3,
    ""AS197414"": 2,
    ""AS24940"": 6,
    ""AS63737"": 1,
    ""AS9808"": 2,
    ""AS24757"": 2,
    ""AS206092"": 2,
    ""AS8560"": 1,
    ""AS2856"": 2,
    ""AS213122"": 5,
    ""AS135377"": 1,
    ""AS4134"": 3,
    ""AS209588"": 3,
    ""AS37963"": 1,
    ""AS146817"": 1,
    ""AS212238"": 5,
    ""AS23470"": 1,
    ""AS208046"": 6,
    ""AS57523"": 3,
    ""AS14061"": 4,
    ""AS16276"": 23396,
    ""AS7713"": 1
  },
  ""isp"": {
    ""Contabo GmbH"": 163,
    ""Xhost Internet Solutions LP"": 10,
    ""Flyservers S.A."": 32,
    ""Vodafone Network"": 6,
    ""Verizon Business"": 20,
    ""Google LLC"": 12,
    ""CHINAUNICOM CHINA169 Jiangsu Province Network"": 2,
    ""Telefonica de Espana SAU"": 18,
    ""Microsoft Corporation"": 1,
    ""BtHoster LTD"": 3,
    ""Hetzner Online GmbH"": 6,
    ""Vietserver Services Technology Company Limited"": 1,
    ""China Mobile"": 2,
    ""Ethiotelecom"": 2,
    ""Ipxo Limited"": 2,
    ""IONOS SE"": 1,
    ""BT Public Internet Service"": 2,
    ""Hyonix LLC"": 5,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Chinanet"": 3,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Datacamp Limited"": 5,
    ""ReliableSite.Net LLC"": 1,
    ""ColocationX Ltd."": 6,
    ""CNC Group CHINA169 Tianjin Province network"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""DigitalOcean, LLC"": 4,
    ""OVH Hosting"": 23396,
    ""PT Telekomunikasi Indonesia"": 1
  },
  ""org"": {
    ""Contabo GmbH"": 163,
    ""Xhost Internet Solutions"": 8,
    ""Flyservers S.A"": 25,
    ""Unknown"": 23406,
    ""Verizon Business"": 20,
    ""Palo Alto Networks, Inc"": 12,
    ""Zhenjiang Guangyuan Network Technology Co., Ltd."": 2,
    ""RIMA (Red IP Multi Acceso)"": 18,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""UAB Host Baltic"": 4,
    ""BtHoster LTD"": 3,
    ""Xhostis"": 2,
    ""Hetzner"": 6,
    ""VietServer Services technology company limited"": 1,
    ""China Mobile Communications Corporation"": 2,
    ""Bandito Networks"": 2,
    ""IONOS"": 1,
    ""HostUS"": 5,
    ""Ucloud Information Technology"": 1,
    ""Chinanet JS"": 3,
    ""Alviva Holding Limited"": 3,
    ""Aliyun Computing Co., LTD"": 1,
    ""Hubei Feixun Network Co., Ltd"": 1,
    ""Cdnext DAL"": 5,
    ""Herrera Mario"": 1,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""BeiJing QianJingShiJi Co., Ltd."": 1,
    ""Starcrecium Limited"": 3,
    ""DigitalOcean, LLC"": 4,
    ""Telekomunikasi Indonesia"": 1
  },
  ""regionName"": {
    ""England"": 165,
    ""North Holland"": 13,
    ""Kaunas"": 25,
    ""Tirana"": 6,
    ""New Jersey"": 20,
    ""California"": 12,
    ""Jiangsu"": 5,
    ""Madrid"": 18,
    ""Virginia"": 5,
    ""Vilnius"": 4,
    ""Bavaria"": 3,
    ""Saxony"": 6,
    ""Da Nang"": 1,
    ""Guangdong"": 2,
    ""Addis Ababa"": 2,
    ""New York"": 2,
    ""North Rhine-Westphalia"": 1,
    ""Texas"": 10,
    ""Hesse"": 3,
    ""Beijing"": 1,
    ""Hubei"": 1,
    ""Florida"": 1,
    ""Tianjin"": 1,
    ""Moscow"": 3,
    ""Central Singapore"": 4,
    ""Quebec"": 23396,
    ""Jakarta"": 1
  },
  ""country"": {
    ""United Kingdom"": 165,
    ""The Netherlands"": 13,
    ""Lithuania"": 29,
    ""Albania"": 6,
    ""United States"": 50,
    ""China"": 10,
    ""Spain"": 18,
    ""Germany"": 13,
    ""Vietnam"": 1,
    ""Ethiopia"": 2,
    ""Russia"": 3,
    ""Singapore"": 4,
    ""Canada"": 23396,
    ""Indonesia"": 1
  },
  ""account"": {
    ""hello"": 191,
    ""Administr"": 12,
    ""142.93.8.59"": 65,
    ""IQYLHMGqw"": 1,
    ""WIlJSA"": 1,
    ""VrRWjm"": 1,
    ""nmap"": 2,
    ""Test"": 13,
    ""Domain"": 15,
    ""ERIosTyqe"": 1,
    ""EGAudi"": 1,
    ""wbZERN"": 1,
    ""(empty)"": 4,
    ""Administrator"": 1,
    ""CptQApKMN"": 1,
    ""XdOtjW"": 1,
    ""HrOFHA"": 1,
    ""NCRACK_USER"": 23396,
    ""RPWCsiMRn"": 1,
    ""nJgjac"": 1,
    ""vxQEoz"": 1
  },
  ""keyboard"": {
    ""Unknown"": 23711
  },
  ""client_build"": {
    ""Unknown"": 23711
  },
  ""client_name"": {
    ""Unknown"": 23711
  },
  ""ip_type"": {
    ""hosting"": 190,
    ""Unknown"": 106,
    ""proxy"": 6,
    ""mobile"": 6,
    ""mobile & proxy"": 2,
    ""hosting & proxy"": 23401
  }
}"
1fUBva2b,Untitled,a_chn,C++,Monday 15th of January 2024 05:59:53 PM CDT,"#include <iostream>
#include <algorithm>
#include <utility>
#include <vector>
#include <stack>
#include <map>
#include <queue>
#include <set>
#include <unordered_set>
#include <unordered_map>
#include <cstring>
#include <cmath>
#include <functional>
#include <cassert>
#include <iomanip>
#include <numeric>
#include <bitset>
#include <sstream>
#include <chrono>
#include <random>

#define ff first
#define ss second
#define ll long long
#define ld long double
#define PB push_back
#define MP make_pair
#define MT make_tuple
#define EB emplace_back
#define PoB pop_back
#define LOG log2
#define FOR(i,a,b) for (int i = (a); i < (b); ++i)
#define F0R(i,a) FOR(i,0,a)
#define ROF(i,a,b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i,a) ROF(i,0,a)
#define fch(t, v) for (auto t : v)
#define sz(x) int(x.size())
#define rsz resize
#define gp(x) vector<vector<x>>
#define btree vector<pii>
#define vll vector<ll>
#define Max(a, b, c) max(max(a,b),c)
#define fMax(a, b, c, d) max(Max(a, b, c), dp)
#define Min(a, b, c) min(min(a,b),c)
#define Mid(a, b, c) max(min(a, b), min(max(a, b), c))
#define st(a) set<a>
#define gr(x) greater<x>
#define gi greater<int>
#define all(x) (x).begin(),(x).end()
#define tri(x) tuple<x,x,x>
#define pil pair<int, long>
#define ull unsigned long long
#define eps 1e-9
//#define debug(x) cout << '>' << #x << ':' << x << endl;

using namespace std;

void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\""' << x << '\""';}
void __print(const string &x) {cerr << '\""' << x << '\""';}
void __print(bool x) {cerr << (x ? ""true"" : ""false"");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << "", ""; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? "", "" : """"), __print(i); cerr << ""}"";}
void _print() {cerr << ""]\n"";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << "", ""; _print(v...);}
void println() {cerr << "">--------------------<"" << endl;}
void printm(vector<vector<int>>& mat) {
    cerr << ""matrix: "" << endl;
    for (int i = 0; i<(int)mat.size(); i++) {for (int j = 0; j<(int)mat[0].size(); j++) {cerr << mat[i][j] << "" "";} cerr << endl;}
}

#ifndef ONLINE_JUDGE
#define debug(x...) cerr << ""["" << #x << ""] = [""; _print(x)
#else
#define debug(x...)
#endif

typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<int> vi;

// templates
template <class T> bool ckmin(T &a, const T &b) {return b<a ? a = b, 1 : 0;}
template <class T> bool ckmax(T &a, const T &b) {return b>a ? a = b, 1 : 0;}
mt19937_64 rng_ll(chrono::steady_clock::now().time_since_epoch().count());
template <class T> using vc = vector<T>;
template <class T> using p_q = priority_queue<T>;
template <class T> using pqg = priority_queue<T, vc<T>, greater<T>>;
int rng(int M) {return (int)(rng_ll()%M);}

constexpr int INF = (int)2e9;
int MOD = 998244353;
constexpr ll LL_INF = (ll)3e18;
constexpr int mod = (int)1e9 + 7;
constexpr ll inverse = 500000004LL; // inverse of 2 modulo 1e9 + 7

void setIO(const string& str) {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    if (str.empty()) return;
    freopen((str + "".in"").c_str(), ""r"", stdin);
    freopen((str + "".out"").c_str(), ""w"", stdout);
}

int N, T;
vc<vi> adj;
vll a, dp, s, t, leaf, pd;
vi contains;

struct LCA {
    int N; // assuming ONE INDEXED
    vector<vector<int>> adj, up;
    int L = 20;
    int timer = 0;
    vector<int> tin, tout;
    void dfs(int v, int par) { // par MUST BE EQUAL TO V at the start
        tin[v] = timer++;
        up[v][0] = par;
        for (int i = 1; i <= L; ++i) up[v][i] = up[up[v][i-1]][i-1];
        fch(u, adj[v]) if (u != par) dfs(u, v);
        tout[v] = timer++;
    }
    LCA(int n, int root, const vc<vi>& trump) {
        N = n;
        adj = trump;
        up.clear(), up.rsz(N+1, vi(L+1));
        tin.clear(), tin.rsz(N+1), tout.clear(), tout.rsz(N+1);
        timer = 0;
        dfs(root, root);
    }
    bool bruh(int u, int v) { // this function checks if u is ancestor of v
        return tin[u] <= tin[v] && tout[u] >= tout[v];
    }
    int lca(int u, int v) {
        if (bruh(u, v)) return u;
        if (bruh(v, u)) return v;
        for (int i = L; i >= 0; --i) if (!bruh(up[u][i], v)) u = up[u][i];
        return up[u][0];
    }
};

void dfs(int v) {
    s[v] = a[v];
    t[v] = 0;
    fch(u, adj[v]) {
        dfs(u);
        t[v] += 2 + t[u];
        s[v] += s[u];
    }
    sort(all(adj[v]), [&](const int& a, const int& b) {
        return s[b] * (t[a] + 2) < (t[b] + 2) * s[a];
    });
    ll time = 0;
    fch(u, adj[v]) {
        time++;
        dp[v] += dp[u] + s[u] * time;
        time += 1 + t[u];
    }
}

void dfs2(int v) {
    s[v] = a[v];
    t[v] = 0;
    fch(u, adj[v]) {
        dfs2(u);
        s[v] += s[u];
        t[v] += 2 + t[u];
        ckmax(leaf[v], leaf[u] + 1);
    }
    ll L = leaf[v] - 1;
    if (sz(adj[v]) == 0) {
        pd[v] = dp[v];
        return;
    }
    sort(all(adj[v]), [&](const int& a, const int& b) {
        return s[b] * (t[a] + 2) < (t[b] + 2) * s[a];
    });
    ll time = 0;
    int M = sz(adj[v]);
    vll psum;
    fch(u, adj[v]) {
        time++;
        dp[v] += dp[u] + s[u] * time;
        time += 1 + t[u];
        ll prev = (!psum.empty() ? psum.back() : 0);
        psum.PB(prev + 2 + t[u]);
    }
    ll ssum = 0;
    for (int i = M-1; i >= 0; --i) {
        int u = adj[v][i];
        if (leaf[u] == L) {
            ll end_minus = (2 + t[u]) * (ssum);
            ll u_time = (i > 0 ? psum[i-1] : 0) * s[u];
            ll new_u_time = (psum[M-1] - (2 + t[u])) * s[u];
            ckmin(pd[v], dp[v] - end_minus - u_time + new_u_time - dp[u] + pd[u]);
        }
        ssum += s[u];
    }
}

void solve0() {
    dfs(1);
    cout << t[1] << ' ' << dp[1] << '\n';
}

void solve1() {
    leaf.rsz(N+1, 0), pd.rsz(N+1, LL_INF);
    dfs2(1);
    cout << t[1] - leaf[1] << ' ' << pd[1] << '\n';
}

int main() { // TIME YOURSELF !!!
    setIO("""");
    cin >> N >> T;
    adj.rsz(N+1), a.rsz(N+1), dp.rsz(N+1, 0), s.rsz(N+1), t.rsz(N+1), contains.rsz(N+1, 0);
    for (int i = 2; i <= N; i++) {
        int pi, ai;
        cin >> pi >> ai;
        adj[pi].PB(i);
        a[i] = ai;
    }
    if (T == 0) solve0();
    else solve1();
    return 0;
}

// CHECK LONG LONGS, binary search on ans?
// Do something, start simpler
// IBM motto: THINK
"
78jecHiy,06.NumberInRange,IvanITD,C#,Monday 15th of January 2024 05:52:08 PM CDT,"int number = int.Parse(Console.ReadLine());
if (number >= -100 && number <= 100 && number != 0)
{
    Console.WriteLine(""Yes"");
}
else
{
    Console.WriteLine(""No"");
}
"
CizM9Td9,05.SmallShop,IvanITD,C#,Monday 15th of January 2024 05:51:05 PM CDT,"string product = Console.ReadLine();
string city = Console.ReadLine();
double quantity = double.Parse(Console.ReadLine());

double coffee;
double water;
double beer;
double sweets;
double peanuts;

// Here we solved the task using the if else statement

if (city == ""Sofia"")
{
    if (product == ""coffee"")
    {
        coffee = 0.50;
        quantity *= coffee;
    }
    else if (product == ""water"")
    {
        water = 0.80;
        quantity *= water;
    }
    else if (product == ""beer"")
    {
        beer = 1.20;
        quantity *= beer;
    }
    else if (product == ""sweets"")
    {
        sweets = 1.45;
        quantity *= sweets;
    }
    else if (product == ""peanuts"")
    {
        peanuts = 1.60;
        quantity *= peanuts;
    }
}
else if (city == ""Plovdiv"")
{
    if (product == ""coffee"")
    {
        coffee = 0.40;
        quantity *= coffee;
    }
    else if (product == ""water"")
    {
        water = 0.70;
        quantity *= water;
    }
    else if (product == ""beer"")
    {
        beer = 1.15;
        quantity *= beer;
    }
    else if (product == ""sweets"")
    {
        sweets = 1.30;
        quantity *= sweets;
    }
    else if (product == ""peanuts"")
    {
        peanuts = 1.50;
        quantity *= peanuts;
    }
}
else if (city == ""Varna"")
{
    if (product == ""coffee"")
    {
        coffee = 0.45;
        quantity *= coffee;
    }
    else if (product == ""water"")
    {
        water = 0.70;
        quantity *= water;
    }
    else if (product == ""beer"")
    {
        beer = 1.10;
        quantity *= beer;
    }
    else if (product == ""sweets"")
    {
        sweets = 1.35;
        quantity *= sweets;
    }
    else if (product == ""peanuts"")
    {
        peanuts = 1.55;
        quantity *= peanuts;
    }
}
Console.WriteLine(quantity);
"
yEYFs2MH,04.PersonalTitles,IvanITD,C#,Monday 15th of January 2024 05:49:00 PM CDT,"double age = double.Parse(Console.ReadLine());
char sex = char.Parse(Console.ReadLine());

// Solved this task with the if else statement

if (sex == 'm')
{
	if (age >= 16)
	{
        Console.WriteLine(""Mr."");
    }
	else if (age < 16)
	{
        Console.WriteLine(""Master"");
    }
}
else if (sex == 'f')
{
    if (age >= 16)
    {
        Console.WriteLine(""Ms."");
    }
    else if (age < 16)
    {
        Console.WriteLine(""Miss"");
    }
}

// Solved this task with the switch case statement
switch (sex)
{
    case 'm':
        switch (age)
        {
            case >= 16:
                Console.WriteLine(""Mr."");
                break;

            case < 16:
                Console.WriteLine(""Master"");
                break;
        }
    break;


    case 'f':
        switch (age)
        {
            case >= 16:
                Console.WriteLine(""Ms."");
                break;

            case < 16:
                Console.WriteLine(""Miss"");
                break;
        }
    break;
}"
pHLgSjnZ,03.AnimalType,IvanITD,C#,Monday 15th of January 2024 05:47:09 PM CDT,"using System.Runtime.CompilerServices;

string animalType = Console.ReadLine();

//This is the first way of solving the task with the if else statement

if (animalType == ""dog"")
{
    Console.WriteLine(""mammal"");
}
else if (animalType == ""crocodile"" || animalType == ""tortoise"" || animalType == ""snake"")
{
    Console.WriteLine(""reptile"");
}
else
{
    Console.WriteLine(""unknown"");
}

//This is the second way of solving the task with the switch case

switch (animalType)
{
    case ""dog"":
        Console.WriteLine(""mammal"");
        break;

    case ""crocodile"":
    case ""tortoise"":
    case ""snake"":
        Console.WriteLine(""reptile"");
        break;

    default:
        Console.WriteLine(""unknown"");
        break;
}"
CDYC5mif,Loop breaking.,alansam,C++,Monday 15th of January 2024 05:31:34 PM CDT,"/*
 * Trying to refactor someone else's code from codingame website.
 * I am trying to replace a massive if else block with a switch statement.
 * I cannot figure out why my statement is not equivalent to there's.
 * Sorry for the long post. My Git seems broken lately.
 * Can someone explain please?
 */

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

#define SWITCH_

int L = 8;
int C = 8;
int N;

std::vector<std::string> rows = {
  {""########""},
  {""# @    #""},
  {""#     X#""},
  {""# XXX  #""},
  {""#   XX #""},
  {""#   XX #""},
  {""#     $#""},
  {""########""}
};

std::pair<int, int> move(std::string s, std::pair<int, int> lpos) {
  if      (s == ""SOUTH"") { lpos.second++; }
  else if (s == ""WEST"")  { lpos.first--; }
  else if (s == ""EAST"")  { lpos.first++; }
  else if (s == ""NORTH"") { lpos.second--; }
  return lpos;
}

bool isPassable(std::string dir, std::pair<int, int> pos, bool dis) {
  std::pair<int, int> npos = move(dir, pos);
  if (npos.first < 0 || npos.second < 0 || npos.first >= C || npos.second >= L) {
    return false;
  }
  auto c = rows[npos.second][npos.first];
  return !(c == '#' || (c == 'X' && !dis));
}

int main() {
  std::pair<int, int> pos;
  std::vector<std::string> directions = { ""SOUTH"", ""EAST"", ""NORTH"", ""WEST"" };
  std::vector<std::pair<int, int>> tl;
  std::string out = """";
  bool BM {};
  rows.resize(L);
  for (auto i = 0ul; i < L; i++) {
    auto f = rows[i].find(""@"");
    if (f != std::string::npos) {
      pos = std::make_pair(f, i);
    }
    for (auto j = 0ul; j < rows[i].size(); j++) {
      if (rows[i][j] == 'T') {
        tl.emplace_back(j, i);
      }
    }
  }

  std::string dir = ""SOUTH"";
  /* loop forever */ while (true) {
    if (!isPassable(dir, pos, BM)) {
      for (auto const & ds : directions) {
        if (isPassable(ds, pos, BM)) {
          dir = ds;
          break;
        }
      }
    }

    out += dir + ""\n"";
    pos = move(dir, pos);

    char block = rows[pos.second][pos.first];
#ifdef SWITCH_
    //My Way...Seems to loop infinitely.
    auto complete { false };
    switch (block) {
      case 'X':
        rows[pos.second].replace(pos.first, 1, "" "");
        break;

      case '$':
        complete = true;
        break;

      default:
        for (auto const & ds : directions) {
          if (ds[0] == block) {
            dir = ds;
            break;
          }
        }
    }
    if (complete) { /* terminate forever loop */ break; }
#else
    //Their Way...Works
    if (block == 'X') {
      rows[pos.second].replace(pos.first, 1, "" "");
    }
    else if (block == '$') { 
      break;
    }
    else {
      for (auto const & ds : directions) {
        if (ds[0] == block) {
          dir = ds;
          break;
        }
      }
    }
#endif

    // Loop check
    N++;
    if (N > C * L) {
      out = ""LOOP\n"";
      break;
    }
  }
  std::cout << out;
}
"
bBKKSZTY,mineXxX.lua,Pixel1011,Lua,Monday 15th of January 2024 05:30:05 PM CDT,"
    turnLeft()"
vWz6WJxB,02.WeekendorWorkDay,IvanITD,C#,Monday 15th of January 2024 05:25:49 PM CDT,"string dayOfWeek = Console.ReadLine();

// Firstly we will write the solution of this task with the if else statement

if (dayOfWeek == ""Monday"" || dayOfWeek == ""Tuesday"" || dayOfWeek == ""Wednesday"" || dayOfWeek == ""Thursday"" || dayOfWeek == ""Friday"")
{
    Console.WriteLine(""Working day"");
}
else if (dayOfWeek == ""Saturday"" || dayOfWeek == ""Sunday"")
{
    Console.WriteLine(""Weekend"");
}
else
{
    Console.WriteLine(""Error"");
}


// The second solution is with the switch case

switch (dayOfWeek)
{
    case ""Monday"":
    case ""Tuesday"":
    case ""Wednesday"":
    case ""Thursday"":
    case ""Friday"":
        Console.WriteLine(""Working day"");
        break;

    case ""Saturday"":
    case ""Sunday"":
        Console.WriteLine(""Weekend"");
        break;
        default:
        Console.WriteLine(""Error"");
            break;


        //For this task we resolved the problem with two different solutions
}"
L23jvSRZ,01.DayOfWeek,IvanITD,C#,Monday 15th of January 2024 05:24:24 PM CDT,"int number = int.Parse(Console.ReadLine());


//First way of solving this task is with the if else statement

if (number == 1 || number == 2 || number == 3 || number == 4 || number == 5 || number == 6 || number == 7)
{
    if (number == 1)
    {
        Console.WriteLine(""Monday"");
    }
    else if (number == 2)
    {
        Console.WriteLine(""Tuesday"");
    }
    else if (number == 3)
    {
        Console.WriteLine(""Wednesday"");
    }
    else if (number == 4)
    {
        Console.WriteLine(""Thursday"");
    }
    else if (number == 5)
    {
        Console.WriteLine(""Friday"");
    }
    else if (number == 6)
    {
        Console.WriteLine(""Saturday"");
    }
    else if (number == 7)
    {
        Console.WriteLine(""Sunday"");
    }
    else
    {
        Console.WriteLine(""Error"");
    }
}
else
{
    Console.WriteLine(""Error"");
}


//The second way of solving this task is with the switch case

switch (number)
{
    case 1:
        Console.WriteLine(""Monday"");
        break;

    case 2:
        Console.WriteLine(""Tuesday"");
        break;

    case 3:
        Console.WriteLine(""Wednesday"");
        break;

    case 4:
        Console.WriteLine(""Thursday"");
        break;

    case 5:
        Console.WriteLine(""Friday"");
        break;
    
    case 6:
        Console.WriteLine(""Saturday"");
        break;

    case 7:
        Console.WriteLine(""Sunday"");
        break;

    default:
        Console.WriteLine(""Error"");
        break;
}"
xqG7rUSG,08.LunchBreak,IvanITD,C#,Monday 15th of January 2024 05:23:06 PM CDT,"string serialName = Console.ReadLine();
int episodeLength = int.Parse(Console.ReadLine());
int restLength = int.Parse(Console.ReadLine());

double timeForLunch = restLength * 0.125;
double timeForRest = restLength * 0.25;
double remainingTime = restLength - timeForLunch - timeForRest;


if (remainingTime >= episodeLength)
{
    Console.WriteLine($""You have enough time to watch {serialName} and left with {Math.Ceiling(remainingTime - episodeLength)} minutes free time."");
}
else if (remainingTime < episodeLength)
{
    
    Console.WriteLine($""You don't have enough time to watch {serialName}, you need {Math.Ceiling(episodeLength - remainingTime)} more minutes."");
}
"
usBiPP3k,mineXxX.lua,Pixel1011,Lua,Monday 15th of January 2024 05:21:45 PM CDT,"yMine = 15
xMine = 15
-- mining area
-- starts from bottom left corner, mines 1, then mines bottom row, goes up, mines left, repeat
 
function writeOffset(offset)
    local file = fs.open(""offset.txt"", ""w"")
    file.writeLine(tostring(offset))
    file.close()
end
 
function writeCoords()
    local file = fs.open(""coords.txt"", ""w"")
    file.writeLine("""" .. coords.x .. "", "" .. coords.y .. "", "" .. coords.z)
    file.close()
end
 
function writeStartingPos()
    local file = fs.open(""startingPos.txt"", ""w"")
    file.writeLine("""" .. 1 + readOffset() .. "", "" .. startingPos.y .. "", "" .. startingPos.z)
    file.close()
end

function writeFace(face)
    local file = fs.open(""face.txt"", ""w"")
    file.writeLine(face);
    file.close()
end

-- change facing etc
function readFace()
    local file = fs.open(""face.txt"", ""r"")
    if file == nil then
        writeFace(""north"")
        return ""north""
    end
    local faceLine = file.readLine()
    file.close()
end
 
function readOffset()
  if fs.exists(""offset.txt"") then
    local file = fs.open(""offset.txt"", ""r"")
    local offsetLine = file.readLine()
    file.close()
    return tonumber(offsetLine)
  else
    writeOffset(0)
    return 0
  end
end
 
function readCoords()
  if fs.exists(""coords.txt"") then
    local file = fs.open(""coords.txt"", ""r"")
    local coordsLine = file.readLine()
    file.close()
    local x, y, z = string.match(coordsLine, ""(%d+), (%d+), (%d+)"")
    return {x = tonumber(x), y = tonumber(y), z = tonumber(z)}
  else
    writeCoords()
    return {x = 0, y = 0, z = 0}
  end
 
end
 
function readStartingPos()
  if fs.exists(""startingPos.txt"") then
    local file = fs.open(""startingPos.txt"", ""r"")
    local startingPosLine = file.readLine()
    file.close()
    local x, y, z = string.match(startingPosLine, ""(%d+), (%d+), (%d+)"")
    return {x = tonumber(x), y = tonumber(y), z = tonumber(z)}
  else
    writeStartingPos()
    return {x = 0, y = 0, z = 0}
  end
end
 
 
function dropUselessItems()
  local useless = {""minecraft:cobblestone"", ""minecraft:dirt"", ""minecraft:sand"", ""minecraft:gravel"", ""minecraft:cobbled_deepslate"", ""minecraft:tuff""}
 
  for i = 1, 16 do
    local item = turtle.getItemDetail(i)
    if item and contains(useless, item.name) then
      turtle.select(i)
      turtle.drop()
    end
  end
end
 
function contains(table, val)
   for i=1,#table do
      if table[i] == val then 
         return true
      end
   end
   return false
end
 
-- starts on right side of mining area infront of chest, facing chest
coords = {x = 0, y = 0, z = 0}
 
function moveToLong(target)
  local directions = {
    x = target.x > coords.x and ""forward"" or ""back"",
    y = target.y > coords.y and ""up"" or ""down"",
    z = target.z > coords.z and ""right"" or ""left""
  }
 
  for axis, direction in pairs(directions) do
    local difference = math.abs(target[axis] - coords[axis])
 
    if direction == ""forward"" or direction == ""back"" then
      if direction == ""back"" then
        turnRight()
        turnRight()
      end
      for i = 1, difference do
        writeCoords()
        turtle.dig()
        turtle.forward()
      end
      if direction == ""back"" then
        turnRight()
        turnRight()
      end
      coords.x = target.x
      print(""coords.x = "" .. coords.x)
    elseif direction == ""up"" or direction == ""down"" then
      for i = 1, difference do
        writeCoords()
        if direction == ""up"" then
          turtle.digUp()
          turtle.up()
        else
          turtle.digDown()
          turtle.down()
        end
      end
      coords.y = target.y
      print(""coords.y = "" .. coords.y)
    elseif direction == ""right"" or direction == ""left"" then
      if direction == ""right"" then
        turnRight()
      else
        turnLeft()
      end
      for i = 1, difference do
        writeCoords()
        turtle.dig()
        turtle.forward()
      end
      if direction == ""right"" then
        turnLeft()
      else
        turnRight()
      end
      coords.z = target.z
      print(""coords.z = "" .. coords.z)
    end
  end
end
 
function moveToShort(target)
  if target.x == coords.x and target.y == coords.y and target.z == coords.z then
    return
  end
  local directions = {
    x = target.x > coords.x and ""forward"" or ""back"",
    y = target.y > coords.y and ""up"" or ""down"",
    z = target.z > coords.z and ""right"" or ""left""
  }
  
  for axis, direction in pairs(directions) do
    local difference = math.abs(target[axis] - coords[axis])
    writeCoords()
    
    for i = 1, difference do
      if direction == ""forward"" then
        turtle.dig()
        turtle.forward()
        writeCoords()
        coords.x = coords.x + 1
      elseif direction == ""back"" then
        turnLeft()
        turnLeft()
        turtle.dig()
        turtle.forward()
        writeCoords()
        turnLeft()
        turnLeft()
        coords.x = coords.x - 1
      elseif direction == ""up"" then
        turtle.digUp()
        turtle.up()
        writeCoords()
        coords.y = coords.y + 1
      elseif direction == ""down"" then
        turtle.digDown()
        turtle.down()
        writeCoords()
        coords.y = coords.y - 1
      elseif direction == ""right"" then
        turnRight()
        turtle.dig()
        turtle.forward()
        writeCoords()
        turnLeft()
        coords.z = coords.z + 1
      elseif direction == ""left"" then
        turnLeft()
        turtle.dig()
        turtle.forward()
        writeCoords()
        turnRight()
        coords.z = coords.z - 1
      end
    end
  end
end
 
function Translate(x, y, z)
  x = x or 0
  y = y or 0
  z = z or 0
  if (math.abs(x) > 1 or math.abs(y) > 1 or math.abs(z) > 1) then
    moveToLong({x = coords.x + x, y = coords.y + y, z = coords.z + z});
  else
    moveToShort({x = coords.x + x, y = coords.y + y, z = coords.z + z});
  end
end
 
function dropAllToChest()
  moveToLong({x = 0, y = 0, z = 0})
  face(""minecraft:chest"")
for i = 1, 16 do
    if turtle.getItemCount(i) > 0 then
      turtle.select(i)
      if not turtle.drop() then
        print(""Chest is full. Terminating program."")
        os.exit()
      end
    end
  end
end
 
-- we consider normally facing north at start
facing = readFace()
-- will endless loop if no block, however this should never happen
function face(targetBlock)
  local success, data = turtle.inspect()
  if (data.name == targetBlock) or not success then
    repeat
      turnLeft()
      success, data = turtle.inspect()
    until data.name == targetBlock
  end
end

function faceUntil(face)
  while facing ~= face do
    turnLeft()
  end
end

function turnLeft()
  turtle.turnLeft()
  if facing == ""north"" then
    facing = ""west""
  elseif facing == ""west"" then
    facing = ""south""
  elseif facing == ""south"" then
    facing = ""east""
  elseif facing == ""east"" then
    facing = ""north""
  end
  writeFace(facing)
end

function turnRight()
  turtle.turnRight()
  if facing == ""north"" then
    facing = ""east""
  elseif facing == ""east"" then
    facing = ""south""
  elseif facing == ""south"" then
    facing = ""west""
  elseif facing == ""west"" then
    facing = ""north""
  end
  writeFace(facing)
end
 
function isFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then
      return false
    end
  end
  return true
end
 
-- mine 1 block forward (X) to get into starting position
-- then mine bottom row going right
-- then mine up 1, mine left row going left
-- alternate until done all rows
-- then go back to starting position, if inventory full of unwanted items (eg full after doing dropUseless()), dump into chest,
-- then go back to starting position and repeat forever (or until chest full)
-- x++ = forward  
-- y++ = up
-- z++ = right
startingPos = readStartingPos()
rowsMined = readOffset()
function mine()
  coords = readCoords()
  faceUntil(""south"")
  if coords.x == 0 and coords.y == 0 and coords.z == 0 then
    -- starting from facing chest
    print(""turning around"")
    turnLeft()
    turnLeft()
  end
  while true do
    print(""starting mining loop"");
    
    print(""moving to starting position"")
    moveToLong(startingPos)
    startingPos = {x = coords.x, y = coords.y, z = coords.z}
    writeStartingPos()
    for i = 1, yMine do
      for j = 1, xMine do
        print(""mining row"")
        turtle.dig()
        Translate(0,0,1)
        checkandEmpty()
      end
      print(""moving back to start of row"")
      moveToLong(startingPos)
      print(""moving up 1"")
      Translate(0,1,0)
      startingPos = {x = coords.x, y = coords.y, z = coords.z}
      writeStartingPos()
    end
    rowsMined = rowsMined + 2
    writeOffset(rowsMined)
    print(""Walls mined: "" .. rowsMined)
    print(""moving back down to bottom row and going forward"")
    Translate(2, -yMine, 0)
    startingPos = {x = coords.x, y = coords.y, z = coords.z}
    writeStartingPos()
    print(""checking if full"")
 
  end
end
 
lastPosToGoToIFEmptying = {x = 0, y = 0, z = 0}
function checkandEmpty()
  lastPosToGoToIFEmptying = {x = coords.x, y = coords.y, z = coords.z}
  if (isFull()) then
    print(""inventory full, going to empty"")
    dropUselessItems()
    dropAllToChest()
    print(""turning around"")
    turnLeft()
    turnLeft()
    print(""going back to mining area"")
    moveToLong(lastPosToGoToIFEmptying)
  end
end
mine()"
cJnUu2mv,07.Shopping,IvanITD,C#,Monday 15th of January 2024 05:21:44 PM CDT,"double petarBudget = double.Parse(Console.ReadLine());
int GPUAmount = int.Parse(Console.ReadLine());
int CPUAmount = int.Parse(Console.ReadLine());
int RAMAmount = int.Parse(Console.ReadLine());


double GPUPrice = GPUAmount * 250;
double CPUPrice = (GPUPrice * 0.35) * CPUAmount;
double RAMPrice = (GPUPrice * 0.10) * RAMAmount;

double totalPrice = GPUPrice + CPUPrice  + RAMPrice;

if (GPUAmount > CPUAmount)
{
    totalPrice -= totalPrice * 0.15;
}


if (totalPrice <= petarBudget)
{
    Console.WriteLine($""You have {petarBudget - totalPrice:F2} leva left!"");
}
else if (totalPrice > petarBudget)
{
    Console.WriteLine($""Not enough money! You need {Math.Abs(petarBudget - totalPrice):F2} leva more!"");
}
"
ypsCp7Sn,06.WorldSwimmingRecord,IvanITD,C#,Monday 15th of January 2024 05:20:38 PM CDT,"double recordInSeconds = double.Parse(Console.ReadLine());
double distanceInMeters = double.Parse(Console.ReadLine());
double timeInSeconds = double.Parse(Console.ReadLine());

double swimmingTime = distanceInMeters * timeInSeconds;

double delay = Math.Floor(distanceInMeters / 15);

swimmingTime = swimmingTime + delay * 12.5;

if (swimmingTime < recordInSeconds)
{
    Console.WriteLine($""Yes, he succeeded! The new world record is {swimmingTime:F2} seconds."");
}
else
{
    Console.WriteLine($""No, he failed! He was {Math.Abs(recordInSeconds - swimmingTime):F2} seconds slower."");
}
"
Ks6Q8eLd,05.GodzillaVsKong,IvanITD,C#,Monday 15th of January 2024 05:20:02 PM CDT,"double movieBudget = double.Parse(Console.ReadLine());
int peopleAmount = int.Parse(Console.ReadLine());
double clothingPricePerOnePerson = double.Parse(Console.ReadLine());

double decorationPrice = movieBudget * 0.10;
double clothingPrice = peopleAmount * clothingPricePerOnePerson;

double discountforClothing = 0.0;

if (peopleAmount > 150)
{
    discountforClothing = clothingPrice * 0.10;
}

double totalClothing = clothingPrice - discountforClothing;

double totalPrice = decorationPrice + totalClothing;


double neededMoney = movieBudget - totalPrice;
double remainingMoney = totalPrice - movieBudget;


if (totalPrice > movieBudget)
{
    Console.WriteLine(""Not enough money!"");
    Console.WriteLine($""Wingard needs {Math.Abs(neededMoney):F2} leva more."");
}
else if (totalPrice <= movieBudget)
{
    Console.WriteLine(""Action!"");
    Console.WriteLine($""Wingard starts filming with {Math.Abs(remainingMoney):F2} leva left."");
}
"
HqeHtfRA,04.ToyShop,IvanITD,C#,Monday 15th of January 2024 05:19:15 PM CDT,"
double priceForExcursion = double.Parse(Console.ReadLine());
int puzzleAmount = int.Parse(Console.ReadLine());
int talkingDollsAmount = int.Parse(Console.ReadLine());
int tedyBearAmount = int.Parse(Console.ReadLine());
int minionsAmount = int.Parse(Console.ReadLine());
int trucksAmount = int.Parse(Console.ReadLine());

double totalToys = puzzleAmount + talkingDollsAmount + tedyBearAmount + minionsAmount + trucksAmount;

double puzzlePrice = puzzleAmount * 2.60;
double talkingDollPrice = talkingDollsAmount * 3;
double tedyBearPrice = tedyBearAmount * 4.10;
double minionsPrice = minionsAmount * 8.20;
double truckPrice = trucksAmount * 2;

double totalPrice = puzzlePrice + talkingDollPrice + tedyBearPrice + minionsPrice + truckPrice;

if (totalToys >= 50)
{
    double discount = totalPrice * 0.25;
    double discountFromTotalPrice = totalPrice - discount;

    double rentPrice = discountFromTotalPrice * 0.10;
    double profit = discountFromTotalPrice - rentPrice;

    if (profit >= priceForExcursion)
    {
        Console.WriteLine($""Yes! {profit - priceForExcursion:F2} lv left."");
    }
    else
    {
        Console.WriteLine($""Not enough money! {priceForExcursion - profit:F2} lv needed."");
    }
}
else
{
    double rentPrice = totalPrice * 0.10;
    double profit = totalPrice - rentPrice;

    if (profit >= priceForExcursion)
    {
        Console.WriteLine($""Yes! {profit - priceForExcursion:F2} lv left."");
    }
    else
    {
        Console.WriteLine($""Not enough money! {priceForExcursion - profit:F2} lv needed."");
    }
}
"
mNayGQ3x,03.TimeAnd15Minutes,IvanITD,C#,Monday 15th of January 2024 05:18:02 PM CDT,"int inputHours = int.Parse(Console.ReadLine());
int inputMinutes = int.Parse(Console.ReadLine());

int hoursToMinuts = inputHours * 60;

int totalMinuteTime = hoursToMinuts + inputMinutes;

totalMinuteTime += 15; // The 15 minutes from the assigment

int hours = 0;

int minutes = totalMinuteTime % 60;
hours = totalMinuteTime / 60;

if (hours == 24)
{
    hours = 0;
   
    if (minutes == 60)
    {
        hours++;
        minutes = 0;
    }
}

Console.WriteLine($""{hours}:{minutes:D2}"");"
iSpuB9qa,02.BonusScore,IvanITD,C#,Monday 15th of January 2024 05:17:18 PM CDT,"int startingPoints = int.Parse(Console.ReadLine());

double bonusPoints = 0.0;

if (startingPoints <= 100)
{
    bonusPoints += 5;

    if (startingPoints % 2 == 0)
    {
        bonusPoints++;

    }
    
    if (startingPoints % 10 == 5)
    {
        bonusPoints += 2;
    }

    double totalPoints = startingPoints + bonusPoints;

    Console.WriteLine(bonusPoints);
    Console.WriteLine(totalPoints);
}
else if (startingPoints > 100 && startingPoints <= 1000)
{
    bonusPoints = startingPoints * 0.20;

    if (startingPoints % 2 == 0)
    {
        bonusPoints++;

    }
    
    if (startingPoints % 10 == 5)
    {
        bonusPoints += 2;
    }

    double totalPoints = startingPoints + bonusPoints;

    Console.WriteLine(bonusPoints);
    Console.WriteLine(totalPoints);
}
else if (startingPoints > 1000)
{
    bonusPoints = startingPoints * 0.10;

    if (startingPoints % 2 == 0)
    {
        bonusPoints++;

    }
    
    if (startingPoints % 10 == 5)
    {
        bonusPoints += 2;
    }

    double totalPoints = startingPoints + bonusPoints;

    Console.WriteLine(bonusPoints);
    Console.WriteLine(totalPoints);
}
"
iAPy50zG,01.SumSeconds,IvanITD,C#,Monday 15th of January 2024 05:13:50 PM CDT,"int firstTime = int.Parse(Console.ReadLine());
int secondTime = int.Parse(Console.ReadLine());
int thirdTime = int.Parse(Console.ReadLine());

int totalTime = firstTime + secondTime + thirdTime;

int timeInMinutes = totalTime / 60;
int timeInSeconds = totalTime % 60;

Console.WriteLine($""{timeInMinutes}:{timeInSeconds:D2}"");"
hEQXsE5E,07.AreaOfFigures,IvanITD,C#,Monday 15th of January 2024 05:09:17 PM CDT,"string figureType = Console.ReadLine();

if (figureType == ""square"")
{
    double length = double.Parse(Console.ReadLine());
    double area = length * length;

    Console.WriteLine($""{area:F3}"");
}
else if (figureType == ""rectangle"")
{
    double lengthA = double.Parse(Console.ReadLine());
    double lengthB = double.Parse(Console.ReadLine());
    double area = lengthA * lengthB;

    Console.WriteLine($""{area:F3}"");
}
else if (figureType == ""circle"")
{
    double radius = double.Parse(Console.ReadLine());
    double area = Math.PI * radius * radius;

    Console.WriteLine($""{area:F3}"");
}
else if (figureType == ""triangle"")
{
    double lengthA = double.Parse(Console.ReadLine());
    double lengthB = double.Parse(Console.ReadLine());
    double area = lengthA * lengthB / 2;

    Console.WriteLine($""{area:F3}"");
}
"
Wtw4CVQ9,06.SpeedInfo,IvanITD,C#,Monday 15th of January 2024 05:08:26 PM CDT,"double pace = double.Parse(Console.ReadLine());

if (pace <= 10)
{
    Console.WriteLine(""slow"");
}
else if (pace > 10 && pace <= 50)
{
    Console.WriteLine(""average"");
}
else if (pace > 50 && pace <= 150)
{
    Console.WriteLine(""fast"");
}
else if (pace > 150 && pace <= 1000)
{
    Console.WriteLine(""ultra fast"");
}
else
{
    Console.WriteLine(""extremely fast"");
}
"
CD8tNUiF,05.Number100To200,IvanITD,C#,Monday 15th of January 2024 05:05:46 PM CDT,"int number = int.Parse(Console.ReadLine());

if (number < 100)
{
    Console.WriteLine(""Less than 100"");
}
else if (number >= 100 && number <= 200)
{
    Console.WriteLine(""Between 100 and 200"");
}
else
{
    Console.WriteLine(""Greater than 200"");
}
"
H4qRgx9h,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Monday 15th of January 2024 05:05:35 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_473031.pdf
 
Working as of
15 January 2024"
PSY76seu,03.EvenOrOdd,IvanITD,C#,Monday 15th of January 2024 04:56:59 PM CDT,"int number = int.Parse(Console.ReadLine());

if (number % 2 == 0)
{
    Console.WriteLine(""even"");
}
else
{
    Console.WriteLine(""odd"");
}
"
F2rnS0vg,02.GreateNumer,IvanITD,C#,Monday 15th of January 2024 04:45:27 PM CDT,"int num1 = int.Parse(Console.ReadLine());
int num2 = int.Parse(Console.ReadLine());

if (num1 > num2)
{
    Console.WriteLine(num1);
}
else
{
    Console.WriteLine(num2);
}
"
EECy9wVd,Untitled,cosenza987,C++,Monday 15th of January 2024 04:33:33 PM CDT,"#include <iostream>

template<class T, class U> class pair {
    public:
    T first;
    U second;
    bool operator < (const pair<T, U> b) const {
        if(this->first == b.first) {
            return this->second < b.second;
        }
        return this->first < b.first;
    }
};

void swap(pair<int, int> &a, pair<int, int> &b) {
    pair<int, int> tmp = a;
    a = b;
    b = tmp;
}

template<class T> class vector {
    T* arr;
    int sz;
    int cap;
public:
    vector() {
        sz = 0;
        cap = 1;
        arr = new T[cap];
    }
    void resize(int x) {
        T* tmp = new T[x];
        for(int i = 0; i < sz; i++) {
            tmp[i] = arr[i];
        }
        delete[] arr;
        arr = tmp;
        cap = sz = x;
    }
    void push_back(T x) {
        if (sz == cap) {
            T* tmp = new T[2 * cap];
            for (int i = 0; i < sz; i++) {
                tmp[i] = arr[i];
            }
            delete[] arr;
            arr = tmp;
            cap *= 2;
        }
        arr[sz++] = x;
    }
    void pop_back() {
        sz--;
    }
    int size() {
        return sz;
    }
    T& operator[](int i) {
        return arr[i];
    }
};

template<class T> class priority_queue {
    vector<T> heap;
    int size;
    bool cmp(T a, T b) {
        return b < a;
    }
    void heapify(int i) {
        int l = 2 * i + 1;
        int r = 2 * i + 2;
        int largest = i;
        if(l < size && cmp(heap[l], heap[i])) {
            largest = l;
        }
        if(r < size && cmp(heap[r], heap[largest])) {
            largest = r;
        }
        if(largest != i) {
            swap(heap[i], heap[largest]);
            heapify(largest);
        }
    }
public:
    priority_queue() {
        size = 0;
    }

    void push(T x) {
        heap.push_back(x);
        int i = size;
        size++;
        while (i > 0 && cmp(heap[i], heap[(i - 1) / 2])) {
            swap(heap[i], heap[(i - 1) / 2]);
            i = (i - 1) / 2;
        }
    }
    T top() {
        return heap[0];
    }
    void pop() {
        swap(heap[0], heap[size - 1]);
        size--;
        heap.pop_back();
        heapify(0);
    }
    int get_size() {
        return size;
    }
    void remove(int cadastro) {
        int ind = -1;
        for(int i = 0; i < size; i++) {
            if(heap[i].second == cadastro and ind == -1) {
                ind = i;
            }
        }
        swap(heap[ind], heap[size - 1]);
        size--;
        heap.pop_back();
        heapify(ind);
    }    
};

class hash_map {
    vector<vector<pair<int, int>>> table;
    static int mxsz;
    int size = 0;
    int get_hash(int key) {
        return key % mxsz;
    }
    int get(int key) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                return table[hash][i].second;
            }
        }
        return -1;
    }
public:
    hash_map() {
        table.resize(mxsz);
    }
    void insert(int key, int value) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                table[hash][i].second = value;
                return;
            }
        }
        table[hash].push_back({key, value});
        size++;
    }

    void erase(int key) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                swap(table[hash][i], table[hash][table[hash].size() - 1]);
                table[hash].pop_back();
                size--;
                return;
            }
        }
    }
    bool contains(int key) {
        int hash = get_hash(key);
        for (int i = 0; i < table[hash].size(); i++) {
            if (table[hash][i].first == key) {
                return true;
            }
        }
        return false;
    }
    int operator[](int key) {
        return get(key);
    }
};

int hash_map::mxsz = 1000000;

int main() {
    freopen(""in.txt"", ""r"", stdin);
    freopen(""out.txt"", ""w"", stdout);
    int f, q;
    std::cin >> f >> q;
    priority_queue<pair<int, int>> fileiras[f + 1], sem_assento;
    int n;
    std::cin >> n;
    std::string nomes[n + 1];
    int prioridades[n + 1];
    hash_map lugar;
    int cadastro_atual = 1;
    for(int _ = 0; _ < n; _++) {
        std::string type;
        std::cin >> type;
        if(type == ""CAD"") {
            std::string nome;
            int p;
            std::cin >> nome >> p;
            nomes[cadastro_atual] = nome;
            prioridades[cadastro_atual] = p;
            bool cadastrado = false;
            int fileira = -1;
            for(int i = 1; i <= f; i++) {
                if(fileiras[i].get_size() < q and !cadastrado) {
                    fileiras[i].push({-p, cadastro_atual});
                    fileira = i;
                    lugar.insert(cadastro_atual, i);
                    cadastrado = true;
                }
            }
            if(!cadastrado) {
                pair<int, int> mn = {INT_MAX, INT_MAX};
                int posicao = -1;
                for(int i = 1; i <= f; i++) {
                    pair<int, int> tmp = fileiras[i].top();
                    tmp.first = -tmp.first;
                    if(tmp.first < mn.first) {
                        mn = tmp;
                        posicao = i;
                    } else if(tmp.first == mn.first and tmp.second > mn.second) {
                        mn = tmp;
                        posicao = i;
                    }
                }
                bool inserir = true;
                if(p < mn.first) {
                    inserir = false;
                } else if(p == mn.first and cadastro_atual > mn.second) {
                    inserir = false;
                }
                if(inserir) {
                    cadastrado = true;
                    fileira = posicao;
                    sem_assento.push({mn.first, -mn.second});
                    lugar.insert(mn.second, 0);
                    fileiras[posicao].pop();
                    fileiras[posicao].push({-p, cadastro_atual});
                    lugar.insert(cadastro_atual, posicao);
                }
            }
            if(!cadastrado) {
                sem_assento.push({p, -cadastro_atual});
            }
            if(cadastrado) {
                std::cout << nome << "" ("" << cadastro_atual << "") foi alocado(a) na fileira "" << fileira << ""\n"";
            } else {
                std::cout << nome << "" ("" << cadastro_atual << "") nao foi alocado(a) em nenhuma fileira\n"";
            }
            cadastro_atual++;
        } else if(type == ""REM"") {
            std::string nome;
            int cad;
            std::cin >> nome >> cad;
            if(cad > n or nomes[cad] != nome or lugar[cad] == -1) {
                std::cout << ""Inexistente\n"";
            } else {
                if(lugar[cad] == 0) {
                    sem_assento.remove(cad);
                } else {
                    fileiras[lugar[cad]].remove(cad);
                    if(sem_assento.get_size()) {
                        pair<int, int> tmp = sem_assento.top();
                        sem_assento.pop();
                        fileiras[lugar[cad]].push({-tmp.first, -tmp.second});
                        lugar.insert(-tmp.second, lugar[cad]);
                    }
                }
                lugar.insert(cad, -1);
                std::cout << ""Removido(a)\n"";
            }
        } else if(type == ""VER"") {
            std::string nome;
            int cad;
            std::cin >> nome >> cad;
            if(cad > n or nomes[cad] != nome or lugar[cad] == -1) {
                std::cout << ""Inexistente\n"";
            } else {
                if(lugar[cad] == 0) {
                    std::cout << ""Sem assento\n"";
                } else {
                    std::cout << ""Sentado(a) na fileira "" << lugar[cad] << ""\n"";
                }
            }
        }
    }
    return 0;
}"
W7kg3pbj,VEDO api.py ( 15 Gen ),chemelli74,Python,Monday 15th of January 2024 04:00:30 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            #   ""Content-Type"": ""application/x-www-form-urlencoded; charset=UTF-8"",
            #   ""Accept-Language"": ""it-IT,it;q=0.8,en-US;q=0.5,en;q=0.3"",
            #   ""Accept"": ""*/*"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
            ""Connection"": ""keep-alive"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""

        # Assure 1s between calls.
        _LOGGER.debug(""GET page sleep for %ss"", SLEEP)
        await asyncio.sleep(SLEEP)

        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""

        # Assure 1s between calls.
        _LOGGER.debug(""POST page sleep for %ss"", SLEEP)
        await asyncio.sleep(SLEEP)

        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _is_session_active(self) -> bool:
        """"""Check if aiohttp session is still active.""""""
        if not hasattr(self, ""_session"") or self._session.closed:
            return False

        return True

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not await self._is_session_active():
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        return await self._check_logged_in(host_type)

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        if not await self._is_session_active():
            return

        payload = {""logout"": 1}
        await self._post_page_result(""/login.cgi"", payload)
        self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if await self._is_session_active():
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""
        reply_status, reply_json_area_stat = await self._get_page_result(
            ""/user/area_stat.json""
        )
        _LOGGER.debug(""Alarm AREA statistics: %s"", reply_json_area_stat)

        if not reply_json_area_stat[""logged""]:
            raise CannotRetrieveData(""Logged is 0 in /user/area_stat.json"")

        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries = {
            1: {""desc"": ""AREA description"", ""page"": ""/user/area_desc.json""},
            2: {""desc"": ""ZONE description"", ""page"": ""/user/zone_desc.json""},
            3: {""desc"": ""AREA statistics"", ""page"": ""/user/area_stat.json""},
            4: {""desc"": ""ZONE statistics"", ""page"": ""/user/zone_stat.json""},
        }
        reply_json_data: list[dict[Any, Any]] = []

        for info in queries.values():
            page = info[""page""]
            reply_status, reply_json = await self._get_page_result(page)
            _LOGGER.debug(""Alarm %s: %s"", info[""desc""], reply_json)
            if not reply_json[""logged""]:
                raise CannotRetrieveData(f""Logged is 0 in {page}"")
            reply_json_data.append(reply_json)

        list_areas: list[int] = reply_json_data[0][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                reply_json_data[0], reply_json_data[2], i
            )
            areas.update({i: area})

        list_zones: list[int] = reply_json_data[1][""present""]
        if ""1"" not in list_zones:
            raise CannotRetrieveData(""All zones not present in /user/zone_stat.json"")

        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                reply_json_data[1], reply_json_data[3], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
SSeF4Sws,"Python - Add ""Key"" to csv game script",CaiusNelson,Python,Monday 15th of January 2024 02:44:29 PM CDT,"import csv
import os

def update_csv_keys(file_path):
    try:
        # Extract the filename without extension for key generation
        filename = os.path.splitext(os.path.basename(file_path))[0]

        with open(file_path, mode='r', newline='') as file:
            # Reading the CSV file
            reader = csv.DictReader(file)
            rows = list(reader)

        # Clear existing content in the ""Key"" column
        for row in rows:
            row['Key'] = ''

        # Index for key generation
        key_index = 1
        added_keys = []

        # Update rows
        for row in rows:
            if row['Line']:  # Check if 'Line' column is not empty
                new_key = f'{filename}_{key_index}'
                row['Key'] = new_key
                added_keys.append(new_key)
                key_index += 1

        with open(file_path, mode='w', newline='') as file:
            # Writing back to the CSV file
            fieldnames = reader.fieldnames
            writer = csv.DictWriter(file, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(rows)

        return added_keys

    except Exception as e:
        return f""An error occurred: {e}""

# Ask for the CSV file path
file_path = input(""Enter the path to the CSV file: "")
result = update_csv_keys(file_path)

# Check if the result is an error message or keys
if isinstance(result, list):
    # Print all added keys
    print(""\nAdded keys:"")
    for key in result:
        print(key)
    print(""\nCSV file has been updated."")
else:
    # Print the error message
    print(result)
"
xFrREK0c,Untitled,simtrip,C#,Monday 15th of January 2024 02:34:19 PM CDT,"using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class StateMachine : MonoBehaviour
{
    public Button Option1;
    public Button Option2;
    public TMP_InputField Input;

    private void Start()
    {
        EnterState(new InitState(this));
    }

    public void EnterState(State state)
    {
        Option1.onClick.RemoveAllListeners();
        Option2.onClick.RemoveAllListeners();
        Input.text = string.Empty;
        
        Option1.onClick.AddListener(state.OnOption1);
        Option2.onClick.AddListener(state.OnOption2);
        Input.onSubmit.AddListener(state.OnInput);
        state.OnEnter();
    }
}

/// <summary>
/// Base class for a state
/// </summary>
public abstract class State
{
    protected StateMachine StateMachine;
    
    public State(StateMachine stateMachine)
    {
        StateMachine = stateMachine;
    }
    
    /// <summary>
    /// Called when the state is entered
    /// </summary>
    public virtual void OnEnter() {}
    
    /// <summary>
    /// Called when user presses first button
    /// </summary>
    public virtual void OnOption1() { }
    
    /// <summary>
    /// Called when user pressed second button
    /// </summary>
    public virtual void OnOption2() {}
    
    /// <summary>
    /// Called when user submits input in the inputfild
    /// </summary>
    /// <param name=""input""></param>
    public virtual void OnInput(string input) {}
}

/// <summary>
/// The entry state of the application
/// </summary>
public class InitState : State
{
    public InitState(StateMachine stateMachine) : base(stateMachine) {}

    public override void OnEnter()
    {
        Debug.Log(""You have started the game"");
    }

    public override void OnOption1()
    {
        // Go to Workshop State
        StateMachine.EnterState(new WorkshopState(StateMachine));
    }
    
    public override void OnOption2()
    {
        Debug.Log(""Does nothing"");
    }
}

public class WorkshopState : State
{
    public WorkshopState(StateMachine stateMachine) : base(stateMachine) {}

    public override void OnEnter()
    {
        Debug.Log(""You have entered the workshop"");
    }

    public override void OnOption1()
    {
        Debug.Log(""You have ugpraded car"");
    }
    
    public override void OnOption2()
    {
        // Go back to InitState
        StateMachine.EnterState(new InitState(StateMachine));
    } 
}
"
SxyZbimL,Untitled,aabb_aabb,Lua,Monday 15th of January 2024 02:23:28 PM CDT,"    local pos, ang = self:GetModelPositionInSights()
    local recoil_amt = self.RemainingRecoil * self:DeltaTime() * (2.5 - (1-FrameTime()))
    local angles = Angle()
    local ct,ft = CurTime(),FrameTime()
    local move = Vector(self.Owner:GetVelocity().x, self.Owner:GetVelocity().y, 0)
    local movement = move:LengthSqr()
    local movepercent = math.Clamp(movement/self.Owner:GetRunSpeed()^3, 0, 1)

    ang.p = ang.p - recoil_amt * self.RecoilVisualAngles.p 
    ang.y = ang.y - recoil_amt * self.RecoilVisualAngles.y 
    ang.r = ang.r - recoil_amt * self.RecoilVisualAngles.r 

    pos = pos + ( recoil_amt * self.RecoilVisualVector.y) * ang:Forward()
    pos = pos + ( recoil_amt * self.RecoilVisualVector.z) * ang:Up()
    --pos = pos + ( ( self.Blowback + recoil_amt)  * math.sin(ct * 12) *self.RecoilVisualVector.x) * ang:Right()

    ang.r = ang.r - (recoil_amt*4) * math.sin(ct * 256) * self.RecoilVisualWobbleModel.x
    ang.y = ang.y - (recoil_amt*2) * math.sin(ct * 256) * self.RecoilVisualWobbleModel.y

    ec_move = Lerp(RealFrameTime()*1, ec_move or 0, movepercent) * 0.75
    
    if ec_move > 0 then
        angles.y = angles.y - math.sin(ct*8 )*1.3*ec_move*1.5
        angles.p = angles.p - math.sin(ct*16.8 )*0.8*ec_move*1.5
        angles.r = angles.r - math.cos(ct*8.4 )*0.2*ec_move*16
        pos = pos + math.sin(ct*8 )*1.3*ec_move*1.5 * ang:Forward()
    end   

    ang:RotateAroundAxis(ang:Right(), -angles.p)
    ang:RotateAroundAxis(ang:Up(), -angles.y)
    ang:RotateAroundAxis(ang:Forward(), -angles.r)

    MouseDeltaX = math.Clamp(MouseDeltaX, -16, 16) * self.SwayMod
    ec_mouse = Lerp(RealFrameTime()*6, ec_mouse or 0, MouseDeltaX)
    angles.r = angles.r + ec_mouse * 0.05
    angles.y = angles.y + ec_mouse * 0.02
    
    MouseDeltaY = math.Clamp(MouseDeltaY, -16, 16) * self.SwayMod
    ec_mouse2 = Lerp(RealFrameTime()*6, ec_mouse2 or 0, MouseDeltaY)
    angles.p = angles.p - ec_mouse2 * 0.05

    ang:RotateAroundAxis(ang:Right(), -angles.p)
    ang:RotateAroundAxis(ang:Up(), -angles.y)
    ang:RotateAroundAxis(ang:Forward(), -angles.r)

    pos = pos + (ec_mouse2 * 0.1) * ang:Up() 
    pos = pos + (ec_mouse * 0.1) * ang:Right() 
"
Sj9CdWRn,Untitled,ValkyrieJanet,Linden Scripting,Monday 15th of January 2024 02:23:14 PM CDT,"

# VtFileWriter begins here
class VtFileWriter:
    def __init__(self, vertices, path, base_name, size):
        self.vertices = vertices
        self.path = path
        self.base_name = base_name
        self.size = size

    def write_files(self):
        coords = tuple(v.co for v in self.vertices)
        triples = tuple(coords[i:i + 3] for i in range(0, len(coords) - 1, 2))
        all_lines = self.make_lines(triples)
        count = ceil(len(triples)/self.size)
        for file_number in range(count):
            start = file_number*self.size
            end = (file_number+1)*self.size
            lines = all_lines[start:end]
            name = [self.base_name, str(file_number)]
            file_name = ""_"".join(name) + "".lsl""
            full_path = os.path.join(self.path, file_name)
            with open(full_path, ""w"") as file:
                self.write_one_file(file_name, file_number, count, lines, file)
                print(f""File was written to {full_path}\n"")

    def write_one_file(self, file_name, file_number, file_count, lines, file):
        from datetime import datetime
        now = datetime.now()
        file.write(f""// {file_name}\n"")
        time = now.strftime(""%Y-%m-%d %H:%M:%S"")
        file.write(f""// {time}\n"")
        file.write(""//    created by VtFileWriter\n"")
        file.write(""//    JR 20240115 - inert, last sends LOADING_DONE\n"")
        file.write(""//    Script names do not matter.\n\n"")
        file.write(f""integer SCRIPT_NUMBER = {file_number};\n"")
        file.write(f""integer LAST_SCRIPT_NUMBER= {file_count-1};\n"")
        file.write(f""integer CHUNK_SIZE = {self.size};\n\n"")
        file.write(""list data = [\n"")
        text = ""\n,"".join(lines)
        file.write(text)
        file.write(""\n];\n"")
        file.write(self.fixed_part)

    @staticmethod
    def make_lines(coordinate_triples):
        lines = []
        back_zero = coordinate_triples[0][0]
        for back, up, front in coordinate_triples:
            back_zeroed = back - back_zero
            roll = Vehicle(back, up, front).roll_degrees()
            output = f""<{back_zeroed.x:.3f}, {back_zeroed.y:.3f}, {back_zeroed.z:.3f}, {roll:.0f}>""
            lines.append(output)
        return lines

    fixed_part = """"""
// nothing varies from here on down

write_data() {
    integer limit = llGetListLength(data);
    integer out_key = CHUNK_SIZE*SCRIPT_NUMBER;
    integer end_key = out_key + limit;
    llSay(0, llGetScriptName() + "" writing "" + (string) out_key + "" up to "" + (string) end_key);
    integer index;
    for (index = 0; index < limit; index++, out_key++) {
        llLinksetDataWrite(""datakey""+(string) out_key,  llList2String( data , index));
    }
    if (SCRIPT_NUMBER == LAST_SCRIPT_NUMBER) {
        integer keyCount = llLinksetDataCountKeys(); 
        llSay(0, ""SIGNALLING LOADING_DONE "" + (string) keyCount);
        llMessageLinked(LINK_THIS, keyCount, ""LOADING_DONE"", NULL_KEY);
    } else {
        llMessageLinked(LINK_THIS, SCRIPT_NUMBER + 1, ""LOADING"", NULL_KEY);
    }
}

default {
    on_rez(integer start_param) {
        llResetScript();
    }

    state_entry() {
    }

    link_message(integer sender_num, integer num, string str, key id) {
        if (str != ""LOADING"") return;
        if (num != SCRIPT_NUMBER) return;
        if (SCRIPT_NUMBER == 0) {
            llLinksetDataReset();
            llSay(0, ""SCRIPT 0 Resetting LSD"");
        }
        write_data();
    }
}
""""""

# VtFileWriter ends here"
1gvYHvnj,Dynamic Expression (Part 2),SoundEngraver,SuperCollider,Monday 15th of January 2024 01:59:03 PM CDT,"//////////////////////////  Dynamic Amplitude, Part 2 //////////////////////////

s.boot;

s.meter;
s.scope;
s.plotTree;

s.reboot;
s.quit;


(
~triAmp = {
	var sig;
	sig = LFTri.ar(300, 0, 0.01)!2;
}.play;
)

~triAmp.free;

// Adding arguments.

(
~triAmp = {
	arg freq=300, amp=0.03;
	var sig;
	sig = LFTri.ar(freq, 0, amp)!2;
}.play;
)

~triAmp.free;

// Adding variables to control the frequency modulation in the sawtooth wave.

(
~triAmp = {
	arg freq=300, amp=0.03;
	var sig, freqNoise;
	freqNoise = LFNoise0.kr(8).range(100, 1000);
	sig = LFTri.ar(freqNoise, 0, amp)!2;
}.play;
)

~triAmp.free;

// Add another variable for amplitude modulation.

(
~triAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.3);
	freqNoise = LFNoise0.kr(noise).range(100, 1000);
	sig = LFTri.ar(freqNoise, 0, modAmp)!2;
}.play
)

~triAmp.set(\sine, 1/8);
~triAmp.set(\noise, 9);

~triAmp.free;


(
~triAmp = {
	arg sine=1, noise=4, modMin=0.001, modMax=0.3,
	freqMin=100, freqMax=1000;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(modMin, modMax);
	freqNoise = LFNoise0.kr(noise).range(freqMin, freqMax);
	sig = LFTri.ar(freqNoise, 0, modAmp)!2;
}.play
)


~triAmp.set(\sine, 1/4);
~triAmp.set(\noise, 18);
~triAmp.set(\modMin, 0.01);
~triAmp.set(\modMax, 0.2);

~triAmp.free;


// CAUTION: Be very careful using an amplitude modulator using things other than SinOsc. Pulse.ar, for example, stacks amplitude instances one after the other when you use a width modulation.
// Same with Saw.

// SinOsc

(
~sineAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = SinOsc.ar(freqNoise, 0, modAmp)!2;
}.play
)

~sineAmp.set(\sine, 6);
~sineAmp.set(\noise, 2);

~sineAmp.free;

// LFSaw

(
~sawAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFSaw.ar(freqNoise, 0, modAmp)!2;
}.play
)

~sawAmp.set(\sine, 1/8);
~sawAmp.set(\noise, 7);

~sawAmp.free;

// LFTri

(
~triAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFTri.ar(freqNoise, 0, modAmp)!2;
}.play
)

~triAmp.set(\sine, 8);
~triAmp.set(\noise, 20);

~triAmp.free;

// LFPar

(
~parAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFPar.ar(freqNoise, 0, modAmp)!2;
}.play
)

~parAmp.set(\sine, 1/4);
~parAmp.set(\noise, 12);

~parAmp.free;

// Pulse

(
~pulseTest = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = Pulse.ar(freqNoise, 0.5, modAmp)!2;
}.play
)

~pulseTest.set(\sine, 1/8);
~pulseTest.set(\noise, 1);

~pulseTest.free;

// LFPulse

(
~pulseAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFPulse.ar(freqNoise, 0, 0.5, modAmp)!2;
}.play
)

~pulseAmp.set(\sine, 8);
~pulseAmp.set(\noise, 20);

~pulseAmp.free;

// LFCub

(
~cubAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = LFCub.ar(freqNoise, 0, modAmp)!2;
}.play
)

~cubAmp.set(\sine, 12);
~cubAmp.set(\noise, 1);

~cubAmp.free;

// Saw

(
~sawTest = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = Saw.ar(freqNoise, modAmp)!2;
}.play
)

~sawTest.set(\sine, 8);
~sawTest.set(\noise, 1/2);

~sawTest.free;

// VarSaw

(
~varAmp = {
	arg sine=1, noise=4;
	var sig, freqNoise, modAmp;
	modAmp = SinOsc.kr(sine).exprange(0.001, 0.1);
	freqNoise = SinOsc.kr(noise).range(100, 1000);
	sig = VarSaw.ar(freqNoise, 0, 0.5, modAmp)!2; // Don't forget the width argument!
}.play
)

~varAmp.set(\sine, 1/2);
~varAmp.set(\noise, 1/16);

~varAmp.free;


// Apply this to noise.

(
~pinkNoise = {
	arg freq=0.25, amp=0.2;
	var sig, mod;
	mod = SinOsc.ar(freq: freq, phase: pi, mul: 0.5, add: 0.5);
	sig = PinkNoise.ar(amp)!2; // Go between PinkNoise and BrownNoise.
	sig = sig * mod;
};
)

x = ~pinkNoise.play;
x.release(8);

(
~pinkNoiseCtrl = {
	arg sine=4, amp=1;
	var sig, modAmp;
	modAmp = LFPar.kr(sine).exprange(0.001, 0.1);
	// Change waveform (e.g, LFTri, LFSaw, etc.)
	sig = PinkNoise.ar(amp)!2;
	sig = sig * modAmp;
}.play
)

~pinkNoiseCtrl.set(\sine, 3);
~pinkNoiseCtrl.free;


// Add Sound File

~ice = Buffer.read(s, ""/Users/devicename/Desktop/soundfilename.wav""); --> for your sound files

~ice.play;
~ice.free;

~ice.duration;
~ice.numChannels;


// Play Synth

(
~ice = SynthDef.new(\play, {
	arg amp=1, atk=0.001, rel=3, c1=1, c2(-1),
	buf=0, rate=1, spos=0, pan=0, out=0;
	var sig, env;
	env = Env([0, 1, 0], [atk, rel], [c1, c2]).kr(2);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * env;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~ice.play;

// Replace the Envelope variable with a modulator.

// SinOsc

(
~iceSine = SynthDef.new(\play, {
	arg sine=1, minAmp=0.001, maxAmp=1,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = SinOsc.kr(sine).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceSine = Synth(\play, [\buf, ~ice]);

~iceSine.set(\sine, 1/4);
~iceSine.free;

// Saw

(
~iceSaw = SynthDef.new(\play, {
	arg saw=1, minAmp=0.001, maxAmp=1,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = Saw.kr(saw).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceSaw = Synth(\play, [\buf, ~ice]);

~iceSaw.set(\saw, 15);
~iceSaw.free;

// LFSaw

(
~iceLFSaw = SynthDef.new(\play, {
	arg lowSaw=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFSaw.kr(lowSaw).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceLFSaw = Synth(\play, [\buf, ~ice]);

~iceLFSaw.set(\lowSaw, 32);
~iceLFSaw.free;

// LFTri

(
~iceTri = SynthDef.new(\play, {
	arg tri=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFTri.kr(tri).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceTri = Synth(\play, [\buf, ~ice]);

~iceTri.set(\tri, 20);
~iceTri.free;

// LFCub

(
~iceCube = SynthDef.new(\play, {
	arg cube=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFCub.kr(cube).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceCube = Synth(\play, [\buf, ~ice]);

~iceCube.set(\cube, 2);
~iceCube.free;

// VarSaw

(
~iceVarSaw = SynthDef.new(\play, {
	arg varSaw=1, minAmp=0.001, maxAmp=0.8,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = VarSaw.kr(varSaw).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~iceVarSaw = Synth(\play, [\buf, ~ice]);

~iceVarSaw.set(\varSaw, 1/16);
~iceVarSaw.free;

// LFPulse

(
~icePulse = SynthDef.new(\play, {
	arg pulse=1, minAmp=0.001, maxAmp=0.1,
	buf=0, rate=1, spos=0, pan=0, amp=1, out=0;
	var sig, modAmp;
	modAmp = LFPulse.kr(pulse).exprange(minAmp, maxAmp);
	sig = PlayBuf.ar(2, buf, rate, startPos: spos);
	sig = sig * modAmp;
	pan = Pan2.ar(sig, pan, amp);
	Out.ar(out, sig);
}).add;
)

~icePulse = Synth(\play, [\buf, ~ice]);

~icePulse.set(\pulse, 24); // an idea for bypassing?
~icePulse.free;"
CHAkVSvf,Link Purpose - WAVE,israelcefrin,HTML,Monday 15th of January 2024 01:49:06 PM CDT,"<a href=""""https://www.facebook.com/UniversityofWaterlooLibrary"""">
<i class=""""fa fa-facebook-official""""></i>
</a>"
ENjDx1Ng,mineXxX.lua,Pixel1011,Lua,Monday 15th of January 2024 01:48:34 PM CDT,"yMine = 15
xMine = 15
-- mining area
-- starts from bottom left corner, mines 1, then mines bottom row, goes up, mines left, repeat
 
function updateOffset(walls)
  print(""updating offset"")
  local handle = fs.open(""offset.txt"", ""w"")
  handle.write(walls)
  handle.close()
  print(""offset updated"")
end
function readOffset()
  print(""reading offset"")
  local handle = fs.open(""offset.txt"", ""r"")
  if not handle then
    print(""no offset file found, creating one"")
    updateOffset(0)
    handle = fs.open(""offset.txt"", ""r"")
  end
  local walls = handle.readAll()
  handle.close()
  print(""offset read"")
  return tonumber(walls)
end
 
function dropUselessItems()
  local useless = {""minecraft:cobblestone"", ""minecraft:dirt"", ""minecraft:sand"", ""minecraft:gravel"", ""minecraft:cobbled_deepslate"", ""minecraft:tuff""}
 
  for i = 1, 16 do
    local item = turtle.getItemDetail(i)
    if item and contains(useless, item.name) then
      turtle.select(i)
      turtle.drop()
    end
  end
end
 
function contains(table, val)
   for i=1,#table do
      if table[i] == val then 
         return true
      end
   end
   return false
end
 
-- starts on right side of mining area infront of chest, facing chest
coords = {x = 0, y = 0, z = 0}
 
function moveToLong(target)
  local directions = {
    x = target.x > coords.x and ""forward"" or ""back"",
    y = target.y > coords.y and ""up"" or ""down"",
    z = target.z > coords.z and ""right"" or ""left""
  }
 
  for axis, direction in pairs(directions) do
    local difference = math.abs(target[axis] - coords[axis])
 
    if direction == ""forward"" or direction == ""back"" then
      if direction == ""back"" then
        turtle.turnRight()
        turtle.turnRight()
      end
      for i = 1, difference do
        turtle.dig()
        turtle.forward()
      end
      if direction == ""back"" then
        turtle.turnRight()
        turtle.turnRight()
      end
      coords.x = target.x
    elseif direction == ""up"" or direction == ""down"" then
      for i = 1, difference do
        if direction == ""up"" then
          turtle.digUp()
          turtle.up()
        else
          turtle.digDown()
          turtle.down()
        end
      end
      coords.y = target.y
    elseif direction == ""right"" or direction == ""left"" then
      if direction == ""right"" then
        turtle.turnRight()
      else
        turtle.turnLeft()
      end
      for i = 1, difference do
        turtle.dig()
        turtle.forward()
      end
      if direction == ""right"" then
        turtle.turnLeft()
      else
        turtle.turnRight()
      end
      coords.z = target.z
    end
  end
end
 
function moveToShort(target)
  if target.x == coords.x and target.y == coords.y and target.z == coords.z then
    return
  end
  local directions = {
    x = target.x > coords.x and ""forward"" or ""back"",
    y = target.y > coords.y and ""up"" or ""down"",
    z = target.z > coords.z and ""right"" or ""left""
  }
  
  for axis, direction in pairs(directions) do
    local difference = math.abs(target[axis] - coords[axis])
    
    for i = 1, difference do
      if direction == ""forward"" then
        turtle.dig()
        turtle.forward()
        coords.x = coords.x + 1
      elseif direction == ""back"" then
        turtle.turnLeft()
        turtle.turnLeft()
        turtle.dig()
        turtle.forward()
        turtle.turnLeft()
        turtle.turnLeft()
        coords.x = coords.x - 1
      elseif direction == ""up"" then
        turtle.digUp()
        turtle.up()
        coords.y = coords.y + 1
      elseif direction == ""down"" then
        turtle.digDown()
        turtle.down()
        coords.y = coords.y - 1
      elseif direction == ""right"" then
        turtle.turnRight()
        turtle.dig()
        turtle.forward()
        turtle.turnLeft()
        coords.z = coords.z + 1
      elseif direction == ""left"" then
        turtle.turnLeft()
        turtle.dig()
        turtle.forward()
        turtle.turnRight()
        coords.z = coords.z - 1
      end
    end
  end
end
 
function Translate(x, y, z)
  x = x or 0
  y = y or 0
  z = z or 0
  if (math.abs(x) > 1 or math.abs(y) > 1 or math.abs(z) > 1) then
    moveToLong({x = coords.x + x, y = coords.y + y, z = coords.z + z});
  else
    moveToShort({x = coords.x + x, y = coords.y + y, z = coords.z + z});
  end
end
 
function dropAllToChest()
  moveToLong({x = 0, y = 0, z = 0})
  face(""minecraft:chest"")
for i = 1, 16 do
    if turtle.getItemCount(i) > 0 then
      turtle.select(i)
      if not turtle.drop() then
        print(""Chest is full. Terminating program."")
        os.exit()
      end
    end
  end
end
 
-- will endless loop if no block, however this should never happen
function face(targetBlock)
  local success, data = turtle.inspect()
  if (data.name == targetBlock) or not success then
    repeat
      turtle.turnLeft()
      success, data = turtle.inspect()
    until data.name == targetBlock
  end
end
 
function isFull()
  for i = 1, 16 do
    if turtle.getItemCount(i) == 0 then
      return false
    end
  end
  return true
end
 
-- mine 1 block forward (X) to get into starting position
-- then mine bottom row going right
-- then mine up 1, mine left row going left
-- alternate until done all rows
-- then go back to starting position, if inventory full of unwanted items (eg full after doing dropUseless()), dump into chest,
-- then go back to starting position and repeat forever (or until chest full)
-- x++ = forward  
-- y++ = up
-- z++ = right
startingPos = {x = 1 + readOffset(), y = 0, z = 0}
rowsMined = readOffset()
function mine()
  print(""turning around"")
  turtle.turnLeft()
  turtle.turnLeft()
  while true do
    print(""starting mining loop"");
    -- starting from facing chest
    
    print(""moving to starting position"")
    moveToLong(startingPos)
    startingPos = {x = coords.x, y = coords.y, z = coords.z}
 
    for i = 1, yMine do
      for j = 1, xMine do
        print(""mining row"")
        turtle.dig()
        Translate(0,0,1)
        checkandEmpty()
      end
      print(""moving back to start of row"")
      moveToLong(startingPos)
      print(""moving up 1"")
      Translate(0,1,0)
      startingPos = {x = coords.x, y = coords.y, z = coords.z}
    end
    rowsMined = rowsMined + 2
    updateOffset(rowsMined)
    print(""Walls mined: "" .. rowsMined)
    print(""moving back down to bottom row and going forward"")
    Translate(2, -yMine, 0)
    startingPos = {x = coords.x, y = coords.y, z = coords.z}
    print(""checking if full"")

  end
end

lastPosToGoToIFEmptying = {x = 0, y = 0, z = 0}
function checkandEmpty()
  lastPosToGoToIFEmptying = {x = coords.x, y = coords.y, z = coords.z}
  if (isFull()) then
    print(""inventory full, going to empty"")
    dropUselessItems()
    dropAllToChest()
    print(""turning around"")
    turtle.turnLeft()
    turtle.turnLeft()
    print(""going back to mining area"")
    moveToLong(lastPosToGoToIFEmptying)
  end
end
mine()"
Hdn7CKZh,ZapisOdczytZPliku,cuniszkiewicz,C#,Monday 15th of January 2024 01:45:38 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO; // TO MUSISZ DODAĆ

namespace ZapisOdczytPlikuTekstowegoTxt
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string nazwaPliku;
            string zawartoscPliku;
            string zawartoscPliku2;

            Console.Write(""Podaj nazwę pliku: "");
            nazwaPliku = Console.ReadLine();
            Console.WriteLine(""Podaj tekst do wpisania w pliku: "");
            zawartoscPliku = Console.ReadLine();
            try
            {
                //Utworzenie pliku
                StreamWriter sw = new StreamWriter($""{nazwaPliku}.txt"");
                //Zapisanie linii tekstu do pliku
                sw.WriteLine(zawartoscPliku);
                //Zamknięcie pliku - ważne
                sw.Close();
            }
            catch (Exception e)
            {
                Console.WriteLine(""Nie udało się zapisać pliku!"");
            }

            //------------------------------------------------------------------------------------
            //odczyt z pliku
            Console.Write(""Podaj nazwę pliku: "");
            nazwaPliku = Console.ReadLine();
            try
            {
                StreamReader sr = new StreamReader($""{nazwaPliku}.txt"");
                //Odczyt z pliku
                zawartoscPliku2 = sr.ReadLine();
                //Zamknięcie pliku - ważne
                sr.Close();
                //wypisanie zawartosci na ekranie
                Console.WriteLine(zawartoscPliku2);               
                Console.ReadLine();
            }
            catch (Exception e)
            {
                Console.WriteLine(""Nie udało się wczytać pliku!"");
            }


        }
    }
}
"
P0jAMY6V,MBedwars Cosmetics: default_kill_messages.yml,Marcely99,YAML,Monday 15th of January 2024 01:32:00 PM CDT,"id: kill_messages

items:
  km_none:
    name: ""%Cosmetics_Item_Default_Name%""
    description: ""%Cosmetics_Item_Default_KillMessages_Description%""
    icon: ""barrier""
    category: kill-messages
    behaviour: unset-active

  km_random:
    name: ""%Cosmetics_Item_Random_Name%""
    description: ""%Cosmetics_Item_RandomKillMessages_Description%""
    icon: ""ender_chest""
    category: kill-messages
    behaviour: play-random

  km_fire:
    name: ""%Cosmetics_Item_Fire_Name%""
    icon: ""blaze_powder""
    category: kill-messages
    kill-messages: fire
    rarity: common
    currency: coins
    price: 5000

  km_western:
    name: ""%Cosmetics_Item_Western_Name%""
    icon: ""bow""
    category: kill-messages
    kill-messages: western
    rarity: common
    currency: coins
    price: 5000

  km_honourable:
    name: ""%Cosmetics_Item_Honourable_Name%""
    icon: ""diamond""
    category: kill-messages
    kill-messages: honourable
    rarity: common
    currency: coins
    price: 7000

  km_love:
    name: ""%Cosmetics_Item_Love_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMTI5ZmI5ZjU5M2I2YWU1MzNkZmE4Y2U3OTYxNWZjYzM1ODk0YTQyY2JiNDFkZTU5OGQ2OTQ3NjczNTJmZSJ9fX0=""
    category: kill-messages
    kill-messages: love
    rarity: rare
    currency: coins
    price: 10000

  km_bbq:
    name: ""%Cosmetics_Item_BBQ_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMzE4ZTM1ZWM0YjRiNGMxNTkxYzUxNzczODZkZTE4Nzk3NDU0Mjk4Yjc0NTU5ODJlM2FlODNiYWNjZWQwZjFhMiJ9fX0=""
    category: kill-messages
    kill-messages: bbq
    rarity: rare
    currency: coins
    price: 10000

  km_woof_woof:
    name: ""%Cosmetics_Item_WoofWoof_Name%""
    icon: ""bone""
    category: kill-messages
    kill-messages: woof_woof
    rarity: rare
    currency: coins
    price: 20000

  km_santas_workshop:
    name: ""%Cosmetics_Item_SantasWorkshop_Name%""
    icon: ""snowball""
    category: kill-messages
    kill-messages: santas_workshop
    rarity: rare
    currency: coins
    price: 20000

  km_primal:
    name: ""%Cosmetics_Item_Primal_Name%""
    icon: ""stone_axe""
    category: kill-messages
    kill-messages: primal
    rarity: rare
    currency: coins
    price: 20000

  km_oink:
    name: ""%Cosmetics_Item_Oink_Name%""
    icon: ""carrot_on_a_stick""
    category: kill-messages
    kill-messages: oink
    rarity: rare
    currency: coins
    price: 20000

  km_squeak:
    name: ""%Cosmetics_Item_Squeak_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYzBmODc3YThkYjBjNzMwYmI4YWJiMjE4NWFlODBjYjZmYjkzZTdiZGM0NTVlZGUwMDgyNzRjMzE4NTg1ZDFkMSJ9fX0=""
    category: kill-messages
    kill-messages: squeak
    rarity: rare
    currency: coins
    price: 20000

  km_buzz:
    name: ""%Cosmetics_Item_Buzz_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2Q2ZWU0NjJkMjJlN2I2MjNlZDk2YzdmMjMzMTIyZWY1Mjg5MzA1NjQ5NTdmNWE5YmJhYzUzNDgwNzBkYjdhZCJ9fX0=""
    category: kill-messages
    kill-messages: buzz
    rarity: rare
    currency: coins
    price: 20000

  km_ox:
    name: ""%Cosmetics_Item_Ox_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDhkZTc2ODg2ODJjODkwOGRlYmZmYzM4ZTE2MDJlZjI1ODU1NzhjN2U1YmI5ZjM5ZmVmMzUyZTIyN2IxZTQ2MyJ9fX0=""
    category: kill-messages
    kill-messages: ox
    rarity: rare
    currency: coins
    price: 20000

  km_pirate:
    name: ""%Cosmetics_Item_Pirate_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNWFhMmY1OTQ5NzgwN2FkMDVjYWYwYmZmMjQ4YTAzYmNhZTU0YmJhMmY2YWVhMzY5ZGNhYmMwZjUwOGE4OWIzIn19fQ==""
    category: kill-messages
    kill-messages: pirate
    rarity: epic
    currency: coins
    price: 25000

  km_literally_spooky:
    name: ""%Cosmetics_Item_LiterallySpooky_Name%""
    icon: ""pumpkin""
    category: kill-messages
    kill-messages: literally_spooky
    rarity: epic
    currency: coins
    price: 50000

  km_memed:
    name: ""%Cosmetics_Item_Memed_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNWNjZWMzZmMwNmExYjZiZjk2MmQyMzA3MDRiNjYyM2JiZmI0MzA0M2YwNjY3OTY2YzIwYzg5YzMwYzRhMzMwIn19fQ==""
    category: kill-messages
    kill-messages: memed
    rarity: epic
    currency: coins
    price: 50000

  km_dramatic:
    name: ""%Cosmetics_Item_Dramatic_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNGQ4YzY1MzY4ODAxNmYwZjdlMzI1ZGJkYzMyM2QyYzI3MDc2ZTA0ZjcyMGY3NzRhMDMyNTNmMTE5NGM0MmQ3NyJ9fX0=""
    category: kill-messages
    kill-messages: dramatic
    rarity: epic
    currency: coins
    price: 50000

  km_noble:
    name: ""%Cosmetics_Item_Noble_Name%""
    icon: ""golden_axe""
    category: kill-messages
    kill-messages: noble
    rarity: epic
    currency: coins
    price: 60000

  km_snow_storm:
    name: ""%Cosmetics_Item_SnowStorm_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZWY3NGMyZTRjMGIyMjJlNDJlOGNkZGYzYmE4ZjZiNTQ2YzUxMDNhZGEyYzljMTU0NjFhYmMzZmEzZjQyNTA5In19fQ==""
    category: kill-messages
    kill-messages: snow_storm
    rarity: epic
    currency: coins
    price: 40000

  km_eggy:
    name: ""%Cosmetics_Item_Eggy_Name%""
    icon: ""egg""
    category: kill-messages
    kill-messages: eggy
    rarity: epic
    currency: coins
    price: 25000

  km_celebratory:
    name: ""%Cosmetics_Item_Celebratory_Name%""
    icon: ""bone""
    category: kill-messages
    kill-messages: celebratory
    rarity: epic
    currency: coins
    price: 30000

  km_wrapped_up:
    name: ""%Cosmetics_Item_WrappedUp_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDUzNjhmNTYzNWZmNmMzNDA3ZjBmMzU2YzViNmUwOTQ3YmNkNWUzODQ5MGM5YWE4YjhiNTgyYTRmMjFhZTNjYiJ9fX0=""
    category: kill-messages
    kill-messages: wrapped_up
    rarity: epic
    currency: coins
    price: 30000

  km_to_the_moon:
    name: ""%Cosmetics_Item_ToTheMoon_Name%""
    icon: ""firework_star""
    category: kill-messages
    kill-messages: to_the_moon
    rarity: epic
    currency: coins
    price: 25000

  km_festive:
    name: ""%Cosmetics_Item_Festive_Name%""
    icon: ""firework""
    category: kill-messages
    kill-messages: festive
    rarity: epic
    currency: coins
    price: 25000

  km_roar:
    name: ""%Cosmetics_Item_Roar_Name%""
    icon: ""orange_dye""
    category: kill-messages
    kill-messages: roar
    rarity: epic
    currency: coins
    price: 25000

  km_triumph:
    name: ""%Cosmetics_Item_Triumph_Name%""
    icon: ""golden_sword""
    category: kill-messages
    kill-messages: triumph
    rarity: legendary
    currency: coins
    price: 200000

  km_glorious:
    name: ""%Cosmetics_Item_Glorious_Name%""
    icon: ""golden_helmet""
    category: kill-messages
    kill-messages: glorious
    rarity: legendary
    currency: coins
    price: 150000

  km_bridging_for_dummies:
    name: ""%Cosmetics_Item_BridgingForDummies_Name%""
    icon: ""sponge""
    category: kill-messages
    kill-messages: bridging_for_dummies
    rarity: legendary
    currency: coins
    price: 70000

  km_social_distance:
    name: ""%Cosmetics_Item_SocialDistance_Name%""
    icon: ""stick""
    category: kill-messages
    kill-messages: social_distance
    rarity: legendary
    currency: coins
    price: 70000

  km_old_man:
    name: ""%Cosmetics_Item_OldMan_Name%""
    icon: ""leather_boots""
    category: kill-messages
    kill-messages: old_man
    rarity: legendary
    currency: coins
    price: 70000

gui:
  type: CHEST
  title: ""%Cosmetics_Shop_Page_KillMessages%""
  title-after-first-page: ""%Cosmetics_Shop_Page_KillMessages% (%Cosmetics_Shop_PageTitle% {page})""
  height: 6

elements:
  - type: changeshop-button
    item: >
      ARROW {
          DisplayName:""&a%Cosmetics_Shop_GoBack%"",
          Lore:[
              ""&7%Cosmetics_Shop_ToMyCosmetics%""
          ]
      }
    x: 3
    y: 5
    shop-id: main

  - type: single-deco
    x: 4
    y: 5
    item: >
      EMERALD {
          DisplayName: ""&7%Cosmetics_TotalBalance_Total% {currency-coins-name}: &6{currency-coins-balance-unformatted}"",
          Lore:[""&6{store-url}""]
      }

  - type: sort-by-button
    x: 5
    y: 5
    item: >
      HOPPER {
          DisplayName: ""&6%Cosmetics_Sort_SortedBy%: &a{sort-name}"",
          Lore:[
              """",
              ""&7%Cosmetics_Sort_NextSort%: &a{next-sort-name}"",
              ""&e%Cosmetics_Sort_LeftClickUse%"",
              """",
              ""&7%Cosmetics_Sort_OwnedItemsFirst%: {owned-items-first-active}"",
              ""&e%Cosmetics_Sort_RightClickToggle%""
          ]
      }

  - type: items-collection
    area:
      distribution-x: left
      distribution-y: top
      x1: 1
      y1: 1
      x2: 7
      y2: 3
    prev-page-button:
      item: >
        ARROW {
            DisplayName:""&a%Cosmetics_Shop_PrevPage%"",
            Lore:[
                ""&7%Cosmetics_Shop_GoToPage%""
            ]
        }
      x: 0
      y: 5
    next-page-button:
      item: >
        ARROW {
            DisplayName:""&a%Cosmetics_Shop_NextPage%"",
            Lore:[
                ""&7%Cosmetics_Shop_GoToPage%""
            ]
        }
      x: 8
      y: 5
    word-wrap-threshold: 26
    default-description: ""%Cosmetics_Item_DefDescription_KillMessages%""
    name-buyable: ""&c{name}""
    name-bought: ""&a{name}""
    name-active: ""&a{name}""
    lore:
      - ""&8%Cosmetics_Shop_Page_KillMessages%""
      - """"
      - ""&7{description}""
      - ""{rarity}""
      - ""{cost}""
      - """"
      - ""{action}""
    placeholder-rarity-replacement:
      - """"
      - ""&7%Cosmetics_Shop_Rarity%: {name}""
    placeholder-cost-replacement:
      - ""&7%Cosmetics_Shop_Cost%: &6{amount}"""
GSTtKtY4,StoreQueue,EDELWEISS1996,C#,Monday 15th of January 2024 01:31:12 PM CDT,"using System;
using System.Collections.Generic;

namespace StoreQueue
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Queue<int> storeQueue = new Queue<int>();

            Random random = new Random();

            int randomValueMin = 0;
            int randomValueMax = 101;

            int queueSize = 10;
            int revenueCurrent = 0;

            string queueEndingConfirmation = ""Все клиенты обслужены."";
            string shutdownMessage = ""Завершение работы..."";

            for (int i = 0; i < queueSize; i++)
            {
                int purchaseValue = random.Next(randomValueMin, randomValueMax);
                storeQueue.Enqueue(purchaseValue);
            }

            for (int i = 0; i < queueSize; i++)
            {
                int purchaseValueNext = storeQueue.Dequeue();

                string purchaseMessage = ""Покупатель "" + (i + 1) + "": $"" + purchaseValueNext;
                string revenueCurrentReport = ""Текущая сумма выручки: $"" + revenueCurrent + "";"";

                revenueCurrent += purchaseValueNext;

                Console.WriteLine(purchaseMessage);
                Console.WriteLine(revenueCurrentReport);

                Console.ReadKey();

                Console.Clear();
            }

            Console.WriteLine(queueEndingConfirmation);

            string revenueTotalReport = ""Общая сумма выручки: $"" + revenueCurrent + ""."";

            Console.WriteLine(revenueTotalReport);
            Console.WriteLine(shutdownMessage);
            Console.ReadLine();
        }
    }
}"
CtnfEHJf,MBedwars Cosmetics: default_glyphs.yml,Marcely99,YAML,Monday 15th of January 2024 01:30:32 PM CDT,"id: glyphs

items:
  gl_none:
    name: ""%Cosmetics_Item_None_Name%""
    description: ""%Cosmetics_Item_None_Glyphs_Description%""
    icon: ""barrier""
    category: image-particle-spawners
    behaviour: unset-active

  gl_random:
    name: ""%Cosmetics_Item_Random_Name%""
    description: ""%Cosmetics_Item_RandomGlyph_Description%""
    icon: ""ender_chest""
    category: image-particle-spawners
    behaviour: play-random

  gl_iron:
    name: ""%Cosmetics_Item_Iron_Name%""
    icon: ""iron_ingot""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/iron_ingot.png""

  gl_gold:
    name: ""%Cosmetics_Item_Gold_Name%""
    icon: ""gold_ingot""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/gold_ingot.png""

  gl_diamond:
    name: ""%Cosmetics_Item_Diamond_Name%""
    icon: ""diamond""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/diamond.png""
    
  gl_emerald:
    name: ""%Cosmetics_Item_Emerald_Name%""
    icon: ""emerald""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/emerald.png""

  gl_flag_us:
    name: ""%Cosmetics_Item_FlagUS_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNGNhYzk3NzRkYTEyMTcyNDg1MzJjZTE0N2Y3ODMxZjY3YTEyZmRjY2ExY2YwY2I0YjM4NDhkZTZiYzk0YjQifX19""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_us.png""

  gl_flag_de:
    name: ""%Cosmetics_Item_FlagDE_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNWU3ODk5YjQ4MDY4NTg2OTdlMjgzZjA4NGQ5MTczZmU0ODc4ODY0NTM3NzQ2MjZiMjRiZDhjZmVjYzc3YjNmIn19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_de.png""

  gl_flag_ca:
    name: ""%Cosmetics_Item_FlagCA_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZjI0MWE2OTdmNmRmYjFjNTdjZGEzMjdiYWE2NzMyYTc4MjhjMzk4YmU0ZWJmZGJkMTY2YzIzMmJjYWUyYiJ9fX0=""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_ca.png""

  gl_flag_cn:
    name: ""%Cosmetics_Item_FlagCN_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2Y5YmMwMzVjZGM4MGYxYWI1ZTExOThmMjlmM2FkM2ZkZDJiNDJkOWE2OWFlYjY0ZGU5OTA2ODE4MDBiOThkYyJ9fX0=""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_cn.png""

  gl_flag_cz:
    name: ""%Cosmetics_Item_FlagCZ_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNDgxNTJiNzMzNGQ3ZWNmMzM1ZTQ3YTRmMzVkZWZiZDJlYjY5NTdmYzdiZmU5NDIxMjY0MmQ2MmY0NmU2MWUifX19""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_cz.png""

  gl_flag_es:
    name: ""%Cosmetics_Item_FlagES_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjQyZmZjZTFkMGMwN2FlZjRhM2JhOWMxYjNkMjMzNjA2ZDAzN2ExZmMwZTJkOTg2MTliMmI5ZWQzN2U0NDhmNSJ9fX0=""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_es.png""

  gl_flag_fr:
    name: ""%Cosmetics_Item_FlagFR_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNTEyNjlhMDY3ZWUzN2U2MzYzNWNhMWU3MjNiNjc2ZjEzOWRjMmRiZGRmZjk2YmJmZWY5OWQ4YjM1Yzk5NmJjIn19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_fr.png""

  gl_flag_hr:
    name: ""%Cosmetics_Item_FlagHR_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjA1MGMwNGVjOGNhYmNlNzFkNzEwM2YzZTllZjRiYjg4MTlmOWYzNjVlYjMzNWE5MTM5OTEyYmMwN2VkNDQ1In19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_hr.png""

  gl_flag_hu:
    name: ""%Cosmetics_Item_FlagHU_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNGE5YzNjNGI2YzUwMzEzMzJkZDJiZmVjZTVlMzFlOTk5ZjhkZWZmNTU0NzQwNjVjYzg2OTkzZDdiZGNkYmQwIn19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_hr.png""

  gl_flag_in:
    name: ""%Cosmetics_Item_FlagIN_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMmY4OWU0NmYxZDU0NTRjOTY3Njc2ZWZiNDk3N2E4NGExOGQwMDg0MzI2Yzc2YzdiZmM0ZTc4NDNiYjFhOTAxIn19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_in.png""

  gl_flag_it:
    name: ""%Cosmetics_Item_FlagIT_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvODVjZTg5MjIzZmE0MmZlMDZhZDY1ZDhkNDRjYTQxMmFlODk5YzgzMTMwOWQ2ODkyNGRmZTBkMTQyZmRiZWVhNCJ9fX0=""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_it.png""

  gl_flag_lu:
    name: ""%Cosmetics_Item_FlagLU_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvM2Q1ZWZmZDNmOWMxNTA1ODM4MmQzYjJkMjkzNmQ1MGI4OTRiZmNiMTFlNmIyZjEzNjQ1MzVjZTUyYWE1In19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_lu.png""

  gl_flag_nl:
    name: ""%Cosmetics_Item_FlagNL_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYzIzY2YyMTBlZGVhMzk2ZjJmNWRmYmNlZDY5ODQ4NDM0ZjkzNDA0ZWVmZWFiZjU0YjIzYzA3M2IwOTBhZGYifX19""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_nl.png""

  gl_flag_pl:
    name: ""%Cosmetics_Item_FlagPL_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTIxYjJhZjhkMjMyMjI4MmZjZTRhMWFhNGYyNTdhNTJiNjhlMjdlYjMzNGY0YTE4MWZkOTc2YmFlNmQ4ZWIifX19""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_pl.png""

  gl_flag_ru:
    name: ""%Cosmetics_Item_FlagRU_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMTZlYWZlZjk4MGQ2MTE3ZGFiZTg5ODJhYzRiNDUwOTg4N2UyYzQ2MjFmNmE4ZmU1YzliNzM1YTgzZDc3NWFkIn19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_ru.png""

  gl_flag_ua:
    name: ""%Cosmetics_Item_FlagUA_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMjhiOWY1MmUzNmFhNWM3Y2FhYTFlN2YyNmVhOTdlMjhmNjM1ZThlYWM5YWVmNzRjZWM5N2Y0NjVmNWE2YjUxIn19fQ==""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_ua.png""

  gl_flag_vn:
    name: ""%Cosmetics_Item_FlagVN_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMWM4YjdjN2ZiMDhhYjg5NDc4MTJiYjlkMTRkYTA0OWVkMmQ1MWFkOGNiOTMyYjM5MmMyMjY2YjI1N2FkYzJhYyJ9fX0=""
    category: image-particle-spawners
    rarity: common
    currency: coins
    price: 5000
    image-path: ""images/glyphs/flag_vn.png""

  gl_hi:
    name: ""%Cosmetics_Item_Hi_Name%""
    icon: ""wooden_door""
    category: image-particle-spawners
    rarity: rare
    currency: coins
    price: 12000
    image-path: ""images/glyphs/hi.png""

  gl_no1:
    name: ""%Cosmetics_Item_No1_Name%""
    icon: ""diamond_sword""
    category: image-particle-spawners
    rarity: rare
    currency: coins
    price: 12000
    image-path: ""images/glyphs/no1.png""

  gl_gg:
    name: ""%Cosmetics_Item_GG_Name%""
    icon: ""milk_bucket""
    category: image-particle-spawners
    rarity: rare
    currency: coins
    price: 12000
    image-path: ""images/glyphs/gg.png""
    
  gl_ez:
    name: ""%Cosmetics_Item_EZ_Name%""
    icon: ""feather""
    category: image-particle-spawners
    rarity: rare
    currency: coins
    price: 12000
    image-path: ""images/glyphs/ez.png""

  gl_explosion:
    name: ""%Cosmetics_Item_Explosion_Name%""
    icon: ""fire_charge""
    category: image-particle-spawners
    rarity: rare
    currency: coins
    price: 12000
    image-path: ""images/glyphs/explosion.png""

  gl_dollar:
    name: ""%Cosmetics_Item_Dollar_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZDY3ZGNlNDY0NTM0OWU0MWE3ZjM1Nzk3ZTJiOTI3OWUzNWE2NWY1ZTgxYTM0NDk2ODg1ZDI3MjY4ZjM2OTEzOSJ9fX0=""
    category: image-particle-spawners
    rarity: rare
    currency: coins
    price: 15000
    image-path: ""images/glyphs/dollar.png""

  gl_happy_sun:
    name: ""%Cosmetics_Item_HappySun_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjg5MDQyMDgyYmI3YTc2MThiNzg0ZWU3NjA1YTEzNGM1ODgzNGUyMWUzNzRjODg4OTM3MTYxMDU3ZjZjNyJ9fX0=""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 25000
    image-path: ""images/glyphs/happy_sun.png""

  gl_explosive:
    name: ""%Cosmetics_Item_Explosive_Name%""
    icon: ""tnt""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 25000
    image-path: ""images/glyphs/explosive.png""

  gl_green_plant:
    name: ""%Cosmetics_Item_GreenPlant_Name%""
    icon: ""seeds""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/green_plant.png""

  gl_mouse:
    name: ""%Cosmetics_Item_Mouse_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvYjc0ZTEyOWYxZTQ5YzNhN2NiMGViN2EzNTQxYTczZDllNDk0NzQ5NmNmZDA0YWZiYzVjYTYwNjYwMzdjMjJmNyJ9fX0=""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/mouse.png""

  gl_thunder:
    name: ""%Cosmetics_Item_Thunder_Name%""
    icon: ""blaze_powder""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/thunder.png""

  gl_white_flag:
    name: ""%Cosmetics_Item_WhiteFlag_Name%""
    icon: ""white_wool""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/white_flag.png""

  gl_skull:
    name: ""%Cosmetics_Item_Skull_Name%""
    icon: ""skull""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/skull.png""
    
  gl_thumbs_up:
    name: ""%Cosmetics_Item_ThumbsUp_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvOTFjMmY5MjhjNGFiZTMxZTM0MmM4MGM3MWZlZjcyM2U5OTA1NzE3ZjQ5OGRkNzQ2ZWJmOTQxNzk4ODlhNzVjMyJ9fX0=""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/thumbs_up.png""
    
  gl_yin_yang:
    name: ""%Cosmetics_Item_YinYang_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvN2ZjMGUwNDFlNDVlMWQ5NjkzNGJiOTE1OWU3YjllMWVkNzRmZjk5YTliOTM0MjIxNDMwMmZkYmE1N2ZkMiJ9fX0=""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/yin_yang.png""

  gl_nerd:
    name: ""%Cosmetics_Item_Nerd_Name%""
    icon: ""book""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/nerd.png""

  gl_clown:
    name: ""%Cosmetics_Item_Clown_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZGRjODBjMDFmOWRiOGQ1YTZiN2M1YTMzMzgyNGIwZmE3NjhlNjBmZjRiNTM0MWRiYzFlMzQzMjliYjljZGM4YyJ9fX0=""
    category: image-particle-spawners
    rarity: epic
    currency: coins
    price: 30000
    image-path: ""images/glyphs/clown.png""

  gl_baby_dragon:
    name: ""%Cosmetics_Item_BabyDragon_Name%""
    icon: ""creeper_spawn_egg""
    category: image-particle-spawners
    rarity: legendary
    currency: coins
    price: 100000
    image-path: ""images/glyphs/baby_dragon.png""

  gl_dancing_penguin:
    name: ""%Cosmetics_Item_DancingPenguin_Name%""
    icon: ""player_head:eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvNGM3N2Q4ZTYxZThlNTk0ZTYzZTljNWQ5YzY0NDZlMzQ2N2RiNDYzZDg1M2JhOWViMzEzNGI5ZDI5MjkyYyJ9fX0=""
    category: image-particle-spawners
    rarity: legendary
    currency: coins
    price: 100000
    image-path: ""images/glyphs/dancing_penguin.png""


gui:
  type: CHEST
  title: ""%Cosmetics_Shop_Page_Glyphs_Plural%""
  title-after-first-page: ""%Cosmetics_Shop_Page_Glyphs_Plural% (%Cosmetics_Shop_PageTitle% {page})""
  height: 6

elements:
  - type: changeshop-button
    item: >
      ARROW {
          DisplayName:""&a%Cosmetics_Shop_GoBack%"",
          Lore:[
              ""&7%Cosmetics_Shop_ToMyCosmetics%""
          ]
      }
    x: 3
    y: 5
    shop-id: main

  - type: single-deco
    x: 4
    y: 5
    item: >
      EMERALD {
          DisplayName: ""&7%Cosmetics_TotalBalance_Total% {currency-coins-name}: &6{currency-coins-balance-unformatted}"",
          Lore:[""&6{store-url}""]
      }

  - type: sort-by-button
    x: 5
    y: 5
    item: >
      HOPPER {
          DisplayName: ""&6%Cosmetics_Sort_SortedBy%: &a{sort-name}"",
          Lore:[
              """",
              ""&7%Cosmetics_Sort_NextSort%: &a{next-sort-name}"",
              ""&e%Cosmetics_Sort_LeftClickUse%"",
              """",
              ""&7%Cosmetics_Sort_OwnedItemsFirst%: {owned-items-first-active}"",
              ""&e%Cosmetics_Sort_RightClickToggle%""
          ]
      }

  - type: items-collection
    area:
      distribution-x: left
      distribution-y: top
      x1: 1
      y1: 1
      x2: 7
      y2: 3
    prev-page-button:
      item: >
        ARROW {
            DisplayName:""&a%Cosmetics_Shop_PrevPage%"",
            Lore:[
                ""&7%Cosmetics_Shop_GoToPage%""
            ]
        }
      x: 0
      y: 5
    next-page-button:
      item: >
        ARROW {
            DisplayName:""&a%Cosmetics_Shop_NextPage%"",
            Lore:[
                ""&7%Cosmetics_Shop_GoToPage%""
            ]
        }
      x: 8
      y: 5
    word-wrap-threshold: 26
    default-description: ""%Cosmetics_Item_DefDescription_Glyphs%""
    name-buyable: ""&c{name}""
    name-bought: ""&a{name}""
    name-active: ""&a{name}""
    lore:
      - ""&8%Cosmetics_Shop_Page_Glyphs_Singular%""
      - """"
      - ""&7{description}""
      - ""{rarity}""
      - ""{cost}""
      - """"
      - ""{action}""
    placeholder-rarity-replacement:
      - """"
      - ""&7%Cosmetics_Shop_Rarity%: {name}""
    placeholder-cost-replacement:
      - ""&7%Cosmetics_Shop_Cost%: &6{amount}"""
5zqfgZJ4,SwitchCase,cuniszkiewicz,C#,Monday 15th of January 2024 01:16:51 PM CDT,"using System;
using System.Collections.Generic;
using System.ComponentModel.Design;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SwitchCase
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int a, b;
            double wynik;

            int decyzja;
        NoweLiczby:
            Console.Write(""Podaj a: "");
            a = int.Parse(Console.ReadLine());
            Console.Write(""Podaj b: "");
            b = int.Parse(Console.ReadLine());

        Menu:
            Console.Clear();

            Console.WriteLine(""1 - Wyjście z programu"");
            Console.WriteLine(""2 - Dodawanie"");
            Console.WriteLine(""3 - Odejmowanie"");
            Console.WriteLine(""4 - Mnożenie"");
            Console.WriteLine(""5 - Dzielenie"");
            Console.WriteLine(""6 - Podanie nowej pary liczb"");
            Console.Write(""Twój wybór: "");
            decyzja = int.Parse(Console.ReadLine());

            switch (decyzja)
            {
                case 1://w przypadku zmiennej char '1', string ""1""
                    goto Koniec;
                    break;
                case 2:
                    wynik = a + b;
                    Console.WriteLine($""{a} + {b} = {wynik}"");
                    break;
                case 3:
                    wynik = a - b;
                    Console.WriteLine($""{a} - {b} = {wynik}"");
                    break;
                case 4:
                    wynik = a * b;
                    Console.WriteLine($""{a} * {b} = {wynik}"");
                    break;
                case 5:
                    if (b != 0)
                    {
                        wynik = (double)a / b;
                        Console.WriteLine($""{a} / {b} = {wynik}"");
                    }
                    else
                        Console.WriteLine(""Nie dziel przez 0!"");
                    break;
                case 6:
                    Console.Clear();
                    goto NoweLiczby;
                    break;
                default:
                    Console.WriteLine(""Podałeś liczbę spoza zakresu!"");
                    break;
            }

            Console.ReadKey();
            goto Menu;
        Koniec:
            Console.Clear();
            Console.WriteLine(""\n\n\n\n\n\n\t\t\t\t\t\tDziękuję"");
            System.Threading.Thread.Sleep(1000);


        }
    }
}
"
N95KC4fn,scan_area,giwdul,Lua,Monday 15th of January 2024 01:06:32 PM CDT,"-- Get a reference to the Geo Scanner attachment
local geoScanner = peripheral.find(""geoScanner"")
if not geoScanner then
  error(""Geo Scanner not found"")
end

-- Run a single scan with a specified radius
local radius = 5 -- You can change this radius as needed
local data, reason = geoScanner.scan(radius)

if not data then
  print(""Scan failed: "" .. reason)
else
  print(""Scan successful. Scanning for ores..."")
  local oreCount = 0
  for i, block in ipairs(data) do
    if string.find(block.name, ""_ore$"") then -- Check if the block name ends with ""_ore""
      oreCount = oreCount + 1
      print(oreCount .. "": "" .. block.name .. "" at (x="" .. block.x .. "", y="" .. block.y .. "", z="" .. block.z .. "")"")
    end
  end
  if oreCount == 0 then
    print(""No ores found in the scan radius."")
  end
end
"
BSeAvQDc,JSON  Validierung Beispiel,secumbu,JSON,Monday 15th of January 2024 01:03:24 PM CDT,"{
  ""type"": ""object"",
  ""properties"": {
    ""userId"": {
      ""type"": ""integer""
    },
    ""vorname"": {
      ""type"": ""string"",
      ""maxLength"": 50
    },
    ""nachname"": {
      ""type"": ""string"",
      ""maxLength"": 50
    },
    ""email"": {
      ""type"": ""string"",
      ""format"": ""email""
    },
    ""benutzername"": {
      ""type"": ""string"",
      ""minLength"": 3,
      ""maxLength"": 20
    },
    ""geburtsdatum"": {
      ""type"": ""string"",
      ""format"": ""date""
    },
    ""aktiv"": {
      ""type"": ""boolean""
    },
    ""adresse"": {
      ""type"": ""object"",
      ""properties"": {
        ""strasse"": {
          ""type"": ""string""
        },
        ""hausnummer"": {
          ""type"": ""string""
        },
        ""stadt"": {
          ""type"": ""string""
        },
        ""postleitzahl"": {
          ""type"": ""string"",
          ""pattern"": ""^[0-9]{4,5}$""
        },
        ""land"": {
          ""type"": ""string""
        }
      },
      ""required"": [""strasse"", ""stadt"", ""postleitzahl"", ""land""]
    }
  },
  ""required"": [""userId"", ""vorname"", ""nachname"", ""email"", ""benutzername"", ""geburtsdatum"", ""aktiv""]
}"
5dd711Hb,Curve smoother function for Path2D,Alenvei,GDScript,Monday 15th of January 2024 12:41:41 PM CDT,"@tool
extends Path2D

# Exported variable to control the smoothness of the curve
@export var smoothness : float = 100

# Variables to store points and tangents
var last_point 
var next_point
var start_tangent 
var end_tangent 

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
    # Function to smooth the curve
    curve_smooth()

func curve_smooth():
    # Iterate through each point in the curve
    for i in curve.get_point_count():
        var pos =  curve.get_point_position(i)
        print(i)
        
        # Set the last point to the current point if it's the first point in the curve
        if i == 0:
            last_point = curve.get_point_position(0)
        else:
            last_point = curve.get_point_position(i - 1)
            
        # Set the next point to the next point in the curve or Vector2.ZERO if it's the last point
        if i != curve.get_point_count() - 1:
            next_point = curve.get_point_position(i + 1)
        else:
            next_point = Vector2.ZERO
            
        # Calculate directions and tangents
        var last_dir = (pos - last_point)
        var next_dir = (next_point - pos)
        
        start_tangent = (last_dir + next_dir) * smoothness
        end_tangent = (next_dir + last_dir) * (-1) * smoothness
        
        # Set tangents for points that are not the first or last
        if i != 0 and i != curve.get_point_count() - 1:
            curve.set_point_in(i, end_tangent)
            curve.set_point_out(i, start_tangent)"
rrVYCP7i,gps_api,giwdul,Lua,Monday 15th of January 2024 12:16:46 PM CDT,"os.loadAPI(""gps"") -- Import the GPS API
local label, x, y, z = gps.locate() -- Get current position
print(""Current Position:"")
print(""Label:"", label)
print(""X:"", x)
print(""Y:"", y)
print(""Z:"", z)
"
XtAzqwQt,Untitled,Babikyan,Java,Monday 15th of January 2024 12:03:27 PM CDT,"package Java2024.Matrix.Exercises;

import java.util.Arrays;
import java.util.Scanner;

public class Task05_MatrixShuffling {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int [] nbColAndRow = readInputAsArray(scanner);//четем първия ред с бр. редове и кол от конзолата
        int rows = nbColAndRow[0];//вадим бр ред в променлива
        int cols = nbColAndRow[1];///вадим бр. колони в променлива
        String[][] matrix = new String[rows][cols];
        for (int row = 0; row <rows ; row++) {
            matrix [row] = readInputAsArrayString(scanner);
        }
        String [] input = scanner.nextLine().split(""\\s+"");

        while(!""END"".equals(input[0])){
    //осигуряваме наличието на 4 координати и първа дума swap, общо 5 елемента!!!!
       if(input.length !=5){ System.out.println(""Invalid input!"");}

            else {
                //условия за невалиден input
                int x1 = Integer.parseInt(input[1]);
                int y1 = Integer.parseInt(input[2]);
                int x2 = Integer.parseInt(input[3]);
                int y2 = Integer.parseInt(input[4]);

                if (x1 > rows || x2 > rows || y1 > cols || y2 > cols) {
                    System.out.println(""Invalid input!"");

                } else {//размяна на стойности в матрицата
                    String firstElement = matrix[x1][y1];
                    String secondElement = matrix[x2][y2];
                    matrix[x1][y1] = secondElement;
                    matrix[x2][y2] = firstElement;
                    printMatrix(matrix);//печат на матрицата с метод
                }
            }

            input = scanner.nextLine().split(""\\s+"");
        }

    }
    public static int [] readInputAsArray (Scanner scanner) {
        return Arrays.stream(scanner.nextLine().split(""\\s+"")).
                mapToInt(Integer::parseInt).toArray();
    }
    public static String [] readInputAsArrayString (Scanner scanner) {
        return (scanner.nextLine().split(""\\s+""));
    }
    public static void printMatrix(String[][] array){
        for (int row = 0; row <array.length ; row++) {
            System.out.println(Arrays.toString(array[row]).replaceAll(""[\\[\\],]"", """"));
        }
    }
}
"
64UsfMv5,Kewt Game sample code,DrCoeloCephalo,GDScript,Monday 15th of January 2024 11:54:14 AM CDT,"Player Code:

```
extends KinematicBody2D

export (int) var speed = 200

onready var InvincibilityTimer = $InvincibilityTimer

var velocity = Vector2()

var hurtAnimTime = false
onready var HurtAnimTimer = $HurtAnimTimer

func get_input():
	velocity = Vector2()
	if Input.is_action_pressed(""right"") and Global.paused == false:
		velocity.x += 1
	if Input.is_action_pressed(""left"") and Global.paused == false:
		velocity.x -= 1
	if Input.is_action_pressed(""down"") and Global.paused == false:
		velocity.y += 1
	if Input.is_action_pressed(""up"") and Global.paused == false:
		velocity.y -= 1
	elif hurtAnimTime == true:
		velocity.x = 0
		velocity.y = 0
	velocity = velocity.normalized() * speed
	
	if Input.is_action_just_pressed(""pause""):
		get_tree().call_group(""Gamestate"", ""PauseGame"")
		Global.paused = true

func _physics_process(_delta):
	get_input()
	if velocity == Vector2.ZERO and hurtAnimTime == false:
		$AnimationTree.get(""parameters/playback"").travel(""idle"")
	elif hurtAnimTime == true:
		$AnimationTree.get(""parameters/playback"").travel(""hurt"")
		$AnimationTree.set(""parameters/idle/blend_position"", velocity)
		$AnimationTree.set(""parameters/hurt/blend_position"", velocity)
	else:
		$AnimationTree.get(""parameters/playback"").travel(""walk"")
		$AnimationTree.set(""parameters/idle/blend_position"", velocity)
		$AnimationTree.set(""parameters/walk/blend_position"", velocity)
	velocity = move_and_slide(velocity)

func hurt():
	print(""I'm hurt!"")
	$AnimationPlayer.play(""red_flash"")
	$AnimationPlayer.queue(""visible_flash"")
	if HurtAnimTimer.is_stopped():
		hurtAnimTime = true
		HurtAnimTimer.start()
		#This should make our hurt animation play for when we are hit.
	if InvincibilityTimer.is_stopped():
		InvincibilityTimer.start()
	Global.hurt = true

func heal():
	print(""I'm healed!"")

func gem_up():
	print(""I got a gem!"")


func _on_InvincibilityTimer_timeout():
	Global.hurt = false
	$AnimationPlayer.stop()

func _on_HurtAnimTimer_timeout():
	hurtAnimTime = false


```

Knight Enemy Code:

```
extends Node2D

var motion = Vector2()
var state = 0
#0 for nothing, 1 = right, 2 = left 3 = up 4 = down

var AttackAnimTime = false
onready var AttackAnimTimer = $AttackAnimTimer


func _ready():
	pass
	#print(state)
	
	add_to_group(""Gamestate"")

func _physics_process(delta):
	if state == 0:
		pass
	elif state == 1:
		motion.x = 100
		#straigh right
	elif state == 2:
		motion.x = -100
		#straight left
	elif state == 3:
		motion.y = 100
		#straight down
	elif state == 4:
		motion.y = -100
		#straight up
	elif state == 5:
		motion.y = -100
		motion.x = -100
		#diagonal up left
	elif state == 6:
		motion.x = 100
		motion.y = 100
		#diagonal down right
	elif state == 7:
		motion.x = 100
		motion.y = -100
		#diagonal up right
	elif state == 8:
		motion.x = -100
		motion.y = 100
		#diagonal down left
	
	if motion == Vector2.ZERO:
		$AnimationTree.get(""parameters/playback"").travel(""idle"")
	elif AttackAnimTime == true:
		$AnimationTree.get(""parameters/playback"").travel(""attack"")
		$AnimationTree.set(""parameters/idle/blend_position"", motion)
		$AnimationTree.set(""parameters/attack/blend_position"", motion)
	else:
		$AnimationTree.get(""parameters/playback"").travel(""walk"")
		$AnimationTree.set(""parameters/idle/blend_position"", motion)
		$AnimationTree.set(""parameters/walk/blend_position"", motion)
	
	position += motion * delta

func _on_Hitbox_body_entered(body):
	if body.is_in_group(""Trees""):
		#This makes it so if the knights collide with the tree, they despawn.
		queue_free()
		#print(""Hit trees"")
	elif Global.hurt == false:
		emit_signal(""tree_exited"")
		get_tree().call_group(""Gamestate"", ""hurt"")

func _on_SightBox_body_entered(_body):
	if AttackAnimTimer.is_stopped():
		AttackAnimTime = true
		AttackAnimTimer.start()


func _on_AttackAnimTimer_timeout():
	AttackAnimTime = false


```

Main Game Code:

```
extends Node2D

var rand_x
var rand_y

var lives = 3
var gems = 0

onready var pause_menu = $PauseMenu

onready var ResumeButton = $PauseMenu/MarginContainer/VBoxContainer/ResumeButton
onready var MainMenuButton = $PauseMenu/MarginContainer/VBoxContainer/MainMenuButton
onready var QuitButton = $PauseMenu/MarginContainer/VBoxContainer/QuitButton

var EasyTotal = 10
var MediumTotal = 20
var HardTotal = 50

onready var Spawn1 = $Spawn1
onready var Spawn2 = $Spawn2
onready var Spawn3 = $Spawn3
onready var Spawn4 = $Spawn4
onready var Spawn5 = $Spawn5
onready var Spawn6 = $Spawn6
onready var Spawn7 = $Spawn7
onready var Spawn8 = $Spawn8

var SpawnArray = [1, 2, 3, 4, 5, 6, 7, 8]
var SpawnArrayBasket = []

var SpawnChoice = 0

onready var GemTimer = $GemTimer
onready var HeartTimer = $HeartTimer
onready var KnightTimer = $KnightTimer

onready var Music = $Music
onready var GemSound = $GemSound
onready var HealSound = $HealSound
onready var HitSound = $HitSound

func _ready():
	add_to_group(""Gamestate"")
	
	Global.game_playing = true
	
	if Global.NewGemTotal == 10:
		GemTimer.wait_time = 3
		HeartTimer.wait_time = 15
		KnightTimer.wait_time = 2
	elif Global.NewGemTotal == 20:
		GemTimer.wait_time = 4
		HeartTimer.wait_time = 20
		KnightTimer.wait_time = 1.5
	else:
		GemTimer.wait_time = 5
		HeartTimer.wait_time = 25
		KnightTimer.wait_time = 0.5
	
	GemTimer.start()
	HeartTimer.start()
	print(SpawnArray)
	randomize()
	SpawnArrayBasket = SpawnArray.duplicate()
	SpawnArray.shuffle()
	Music.play()


func PauseGame():
	if Global.paused and Global.game_playing:
		pause_menu.show()
		Engine.time_scale = 0
		ResumeButton.grab_focus()
	else:
		pause_menu.hide()
		Engine.time_scale = 1
		Global.paused = false

func StartGame():
	pass
# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass

func _on_HeartTimer_timeout():
	var NewHeart = preload(""res://Player and Enemies/Heart.tscn"").instance()
	rand_x = rand_range(70, 500)
	rand_y = rand_range(70, 550)
	NewHeart.global_position = Vector2(rand_x, rand_y)
	add_child(NewHeart)

func _on_GemTimer_timeout():
	var NewGem = preload(""res://Player and Enemies/Gem.tscn"").instance()
	rand_x = rand_range(70, 500)
	rand_y = rand_range(70, 550)
	NewGem.global_position = Vector2(rand_x, rand_y)
	add_child(NewGem)

func RollForNumber():
	if SpawnArray.empty():
		#Fill the SpawnArray again and shuffle it.
		#Makes it so it is way less likely to get the same random
		#variable twice in a row.
		SpawnArray = SpawnArrayBasket.duplicate()
		SpawnArray.shuffle()
		var FirstSpawn = SpawnArray.pop_front()
		return FirstSpawn
	else:
		SpawnChoice = int(SpawnArray[randi() % SpawnArray.size()])
		#print(SpawnChoice)

func SpawnPlace():
	var NewKnight = preload(""res://Player and Enemies/KnightEnemyAnimated.tscn"").instance()
	if SpawnChoice == 1:
		NewKnight.global_position = Spawn1.position
		add_child(NewKnight)
		NewKnight.state = 6
	if SpawnChoice == 2:
		NewKnight.global_position = Spawn2.position
		add_child(NewKnight)
		var DirectionArray = [1, 6, 7]
		var DirectionChoice = int(DirectionArray[randi() % DirectionArray.size()])
		NewKnight.state = DirectionChoice
	if SpawnChoice == 3:
		NewKnight.global_position = Spawn3.position
		add_child(NewKnight)
		NewKnight.state = 7
	if SpawnChoice == 4:
		NewKnight.global_position = Spawn4.position
		add_child(NewKnight)
		var DirectionArray = [3, 6, 8]
		var DirectionChoice = int(DirectionArray[randi() % DirectionArray.size()])
		NewKnight.state = DirectionChoice
	if SpawnChoice == 5:
		NewKnight.global_position = Spawn5.position
		add_child(NewKnight)
		var DirectionArray = [4, 5, 7]
		var DirectionChoice = int(DirectionArray[randi() % DirectionArray.size()])
		NewKnight.state = DirectionChoice
	if SpawnChoice == 6:
		NewKnight.global_position = Spawn6.position
		add_child(NewKnight)
		NewKnight.state = 8
	if SpawnChoice == 7:
		NewKnight.global_position = Spawn7.position
		add_child(NewKnight)
		var DirectionArray = [2, 5, 8]
		var DirectionChoice = int(DirectionArray[randi() % DirectionArray.size()])
		NewKnight.state = DirectionChoice
	if SpawnChoice == 8:
		NewKnight.global_position = Spawn8.position
		add_child(NewKnight)
		NewKnight.state = 5
	else:
		pass
	var DirectionVariable = NewKnight.get(""state"")
	#print(DirectionVariable)
	if DirectionVariable == 1:
		pass

func _on_KnightTimer_timeout():
	RollForNumber()
	SpawnPlace()

func heal():
	lives += 1
	$Player.heal()
	HealSound.play()
	get_tree().call_group(""Lives+Gems"", ""heal"", lives)
	if lives == 0:
		end_game()

func hurt():
	lives -= 1
	$Player.hurt()
	HitSound.play()
	get_tree().call_group(""Lives+Gems"", ""hurt"", lives)
	if lives == 0:
		end_game()


func gem_up():
	#Make sure plus sign is first to properly change scenes
	gems += 1
	GemSound.play()
	if gems == Global.NewGemTotal:
		won_game()
	else:
		$Player.gem_up()
		get_tree().call_group(""Lives+Gems"", ""gem_up"", gems)

func won_game():
# warning-ignore:return_value_discarded
	get_tree().change_scene(""res://Levels/WinScreen.tscn"")
func end_game():
# warning-ignore:return_value_discarded
	get_tree().change_scene(""res://Levels/LoseScreen.tscn"")
	


```"
QHKHzEyg,list_peripherals,giwdul,Lua,Monday 15th of January 2024 11:46:55 AM CDT,"-- Get a list of peripherals attached to the turtle
local peripherals = turtle.getPeripheralList()

-- Print the list of peripherals
print(""Peripherals:"")
for _, peripheral in pairs(peripherals) do
  print(""  "" .. peripheral)
end"
JSXVsk2P,Untitled,Babikyan,Java,Monday 15th of January 2024 11:35:11 AM CDT,"package Java2024.Matrix.Exercises;

import java.util.Arrays;
import java.util.Scanner;

public class Task04_MaximalSum {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        //3, 6
        String inputRows = scanner.nextLine();
        int rows = Integer.parseInt(inputRows.split(""\\s+"")[0]);
        int cols = Integer.parseInt(inputRows.split(""\\s+"")[1]);
        Integer sum = Integer.MIN_VALUE;
        int [][] res = new int [3][3];//създаваме празна матрица, кято да пълним с резултататите
        int [][] matrix = new int [rows][cols];//създаваме нова празна матрица
        //пълним матрицата
        for (int row = 0; row <rows ; row++) {
            matrix[row] = readInputAsArray(scanner);
        }
        for (int row = 0; row <rows-2 ; row++) {
            for (int col = 0; col <cols-2 ; col++) {
                int currentSum =
                        matrix[row][col]+
                        matrix[row+1][col]+
                        matrix[row+2][col]+
                        matrix[row][col+1]+
                        matrix[row+1][col+1]+
                        matrix[row+2][col+1]+
                        matrix[row][col+2]+
                        matrix [row+1][col+2]+
                        matrix [row+2][col+2];
                if(currentSum>sum){sum=currentSum;
                res[0][0] = matrix[row][col];
                res[1][0] = matrix[row+1][col];
                res[2][0] = matrix[row+2][col];
                res[0][1] = matrix[row][col+1];
                res[1][1] = matrix[row+1][col+1];
                res[2][1] = matrix[row+2][col+1];
                res[0][2] = matrix[row][col+2];
                res[1][2] = matrix[row+1][col+2];
                res[2][2] = matrix[row+2][col+2];
                }
            }
        }
        //отпечатваме матрицата
        System.out.printf(""Sum = %d%n"", sum);
        printMatrix(res);

    }
    public static int [] readInputAsArray (Scanner scanner) {
        return Arrays.stream(scanner.nextLine().split(""\\s+"")).
                mapToInt(Integer::parseInt).toArray();
    }
    public static void printMatrix(int[][] array){
        for (int row = 0; row <array.length ; row++) {
            System.out.println(Arrays.toString(array[row]).replaceAll(""[\\[\\],]"", """"));
        }
    }
}"
KV8ZG3JP,Teleport Button localscript,Joriangames,Lua,Monday 15th of January 2024 11:33:07 AM CDT,"-- How To Make TELEPORT BUTTON in Roblox Studio!!! BY BLOXIANCODE youtube.com/c/BloxianCode
-- Tutorial: https://youtube.com/shorts/6q3Rn8rYTXw
local toggle = script.Parent.Toggle

local button = script.Parent.Frame.TextButton
local teleporTo = game.Workspace.teleportTo
local player = game.Players.LocalPlayer

toggle.MouseButton1Click:Connect(function()
	if script.Parent.Frame.Visible == true then
		script.Parent.Frame.Visible = false
	else
		script.Parent.Frame.Visible = true
	end
end)

button.MouseButton1Click:Connect(function()
	local humR = player.Character.HumanoidRootPart
	humR.CFrame = teleporTo.CFrame
end)"
2TX26Z3k,geoscan_test,giwdul,Lua,Monday 15th of January 2024 11:27:19 AM CDT,"-- Get a reference to the Geo Scanner attachment
local geoScanner = peripheral.find(""geoScanner"")
if not geoScanner then
  error(""Geo Scanner not found"")
end

-- Function to mine in front if needed
local function mineIfNeeded()
  if turtle.detect() then
    turtle.dig()
  end
end

-- Function to mine above if needed
local function mineUpIfNeeded()
  if turtle.detectUp() then
    turtle.digUp()
  end
end

-- Function to mine below if needed
local function mineDownIfNeeded()
  if turtle.detectDown() then
    turtle.digDown()
  end
end

-- Function to check and mine ores around the turtle without moving
local function checkAndMineAround()
  mineIfNeeded() -- Front
  turtle.turnRight()
  mineIfNeeded() -- Right
  turtle.turnRight()
  mineIfNeeded() -- Back
  turtle.turnRight()
  mineIfNeeded() -- Left

  -- Check and mine above and below
  mineUpIfNeeded()
  mineDownIfNeeded()

  -- Turn left twice to reset to original orientation
  turtle.turnLeft()
end

-- Function to move to a specific coordinate
local function moveTo(x, y, z)
  -- Move in x direction
  for i = 1, math.abs(x) do
    mineIfNeeded()
    if x < 0 then
      turtle.forward()
    else
      turtle.back()
    end
  end

  -- Move in y direction
  for i = 1, math.abs(y) do
    if y > 0 then
      turtle.up()
    else
      mineDownIfNeeded()
      turtle.down()
    end
  end

  -- Move in z direction
  local turnFunc = z < 0 and turtle.turnRight or turtle.turnLeft
  turnFunc()
  for i = 1, math.abs(z) do
    mineIfNeeded()
    turtle.forward()
  end
  turnFunc() -- Turn back to the original direction
end

-- Run a single scan with a radius of 3
local radius = 3 -- Scan radius set to 3
local data, reason = geoScanner.scan(radius)

if not data then
  print(""Scan failed: "" .. reason)
else
  print(""Scan successful. Searching for ores..."")
  for _, block in ipairs(data) do
    if string.match(block.name, ""_ore"") then
      local x, y, z = block.x, block.y, block.z
      print(""Ore found at: x="" .. x .. "", y="" .. y .. "", z="" .. z)
      
      -- Move to the ore and mine it
      moveTo(x, y, z)
      print(""Mining ore: "" .. block.name)
      mineIfNeeded()

      -- Check and mine ores around the current position
      checkAndMineAround()

      break -- Stop after handling the first ore
    end
  end
end
"
igcmcZ0q,Untitled,z_rr,Python,Monday 15th of January 2024 11:21:06 AM CDT,"n = int(input())
max_len = 0
longest_intersection = ''

for i in range(n):
    first_range, second_range = input().split('-')
    first_range = list(map(int, first_range.split(',')))
    second_range = list(map(int, second_range.split(',')))

    intersect_start = max(first_range[0], second_range[0])
    intersect_end = min(first_range[1], second_range[1])

    intersection = list(range(intersect_start, intersect_end + 1))

    if len(intersection) > len(longest_intersection):
        longest_intersection = intersection
        max_len = len(longest_intersection)

print(f""Longest intersection is {longest_intersection} with length {max_len}"")
"
