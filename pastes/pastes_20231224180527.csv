id,title,username,language,date,content
8GbQyxK0,12 2023,spidersam,JSON,Sunday 24th of December 2023 11:43:03 AM CDT,"[
  {
    ""name"": ""Zoo-01-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/6443d32d-36ad-726f-9896-b60e6ebc8c70.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-04-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/efe0fa55-c45b-4931-4ed3-879c7444ef9d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-05-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/237c1a3c-f9b5-8770-4d2d-681590f0a0c8.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-06-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/47d9bb66-bd5c-986d-ae85-4b7bd6f89151.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-07-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/8af3dc90-be93-4275-993b-705051ce286d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-11-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/1c62be72-40c1-2bd9-4fe2-6c1464045b1d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-12-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/06bed1b6-f9e1-e5cd-8808-8f2c42fd8b8d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-13-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/8de4158e-11f2-c510-1d5e-8ee7ff9b1ee3.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-14-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/1e5f58cb-98b9-4202-9732-f66c00b054b2.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-15-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/55fc21ea-d93b-2ff0-3aa4-4f8912d1ea4f.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-18-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/ae4edb35-3ac4-c4a5-3422-615817dd0ac9.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-19-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/84aba3c4-1247-db27-c86e-8b164488b0f1.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-20-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/74b5dfc0-d0f0-d5cf-55f0-c51fc96d5fa0.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-21-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/d195f9f4-56f8-7aaa-58c7-bc9fa208bdcc.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-22-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/1a6b5a48-4301-84f7-2716-3eaa6d4d2034.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  }
]"
CXYrrMT3,Untitled,cepxuozab,C++,Sunday 24th of December 2023 11:38:34 AM CDT,"{
  ""routing_settings"": {
    ""bus_wait_time"": 2,
    ""bus_velocity"": 30
  },
  ""render_settings"": {
    ""width"": 900,
    ""height"": 2000,
    ""padding"": 50,
    ""outer_margin"": 150,
    ""stop_radius"": 5,
    ""line_width"": 14,
    ""bus_label_font_size"": 20,
    ""bus_label_offset"": [
      7,
      15
    ],
    ""stop_label_font_size"": 20,
    ""stop_label_offset"": [
      7,
      -3
    ],
    ""underlayer_color"": [
      255,
      255,
      255,
      0.85
    ],
    ""underlayer_width"": 3,
    ""color_palette"": [
      [
        255,
        0,
        255
      ],
      ""red"",
      ""green"",
      ""blue""
    ],
    ""layers"": [
      ""bus_lines"",
      ""bus_labels"",
      ""stop_points"",
      ""stop_labels""
    ]
  },
  ""base_requests"": [
    {
      ""type"": ""Stop"",
      ""name"": ""A"",
      ""latitude"": 0.5,
      ""longitude"": -1,
      ""road_distances"": {
        ""B"": 100000
      }
    },
    {
      ""type"": ""Stop"",
      ""name"": ""B"",
      ""latitude"": 0,
      ""longitude"": -1.1,
      ""road_distances"": {}
    },
    {
      ""type"": ""Stop"",
      ""name"": ""C"",
      ""latitude"": -2,
      ""longitude"": -1.1,
      ""road_distances"": {}
    },
    {
      ""type"": ""Bus"",
      ""name"": ""256"",
      ""stops"": [
        ""B"",
        ""A""
      ],
      ""is_roundtrip"": false
    }
  ],
  ""stat_requests"": [
    {
      ""id"": 1550472237,
      ""type"": ""Bus"",
      ""name"": ""256""
    },
    {
      ""id"": 2030406697,
      ""type"": ""Stop"",
      ""name"": ""A""
    },
    {
      ""id"": 1525479286,
      ""type"": ""Stop"",
      ""name"": ""B""
    },
    {
      ""id"": 472222524,
      ""type"": ""Stop"",
      ""name"": ""C""
    },
    {
      ""id"": 487735901,
      ""type"": ""Route"",
      ""from"": ""A"",
      ""to"": ""B""
    },
    {
      ""id"": 1433285658,
      ""type"": ""Route"",
      ""from"": ""B"",
      ""to"": ""A""
    },
    {
      ""id"": 149148789,
      ""type"": ""Route"",
      ""from"": ""B"",
      ""to"": ""C""
    },
    {
      ""id"": 971813300,
      ""type"": ""Route"",
      ""from"": ""C"",
      ""to"": ""A""
    }
  ]
}"
YHbfvMMA,Untitled,Nweltalv3,C,Sunday 24th of December 2023 11:11:55 AM CDT,"#include <stdio.h>
#include <string.h>

void printCharacter(char character, int count) {
    for (int i = 0; i < count; i++) {
        printf(""%c"", character);
    }
}

int main() {
    char Text[1001];
    fgets(Text, sizeof(Text), stdin);
    int numberBeforeBs, numberBeforeSp, numberBeforeNl, numberBeforeSq, numberBefore;

    int length = strlen(Text);

    for (int i = 0; i < length; i++) {
        if(Text[i] == 'b' && Text[i + 1] == 'S') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeBs) == 1) {
                for (int i = 0; i < numberBeforeBs; i++) {
                    printf(""\\"");
                }
                i += 2;
            }
        }
        if(Text[i] == 's' && Text[i + 1] == 'p') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeSp) == 1) {
                for (int i = 0; i < numberBeforeSp; i++) {
                    printf("" "");
                }
                i += 2;
            }
        }
        if(Text[i] == 'n' && Text[i + 1] == 'l') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeNl) == 1) {
                for (int i = 0; i < numberBeforeNl; i++) {
                    printf(""\n"");
                }
                i += 2;
            }
        }
        if(Text[i] == 's' && Text[i + 1] == 'Q') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeSq) == 1) {
                for (int i = 0; i < numberBeforeSq; i++) {
                    printf(""'"");
                }
                i += 2;
            }
        } else if (Text[i] >= '0' && Text[i] <= '9') {
            int count = 0;
            while (Text[i] >= '0' && Text[i] <= '9') {
                count = count * 10 + (Text[i] - '0');
                i++;
            }
            
            char character = Text[i];
            
            // If the chunk is only numbers, use the last digit as the character
            if (character >= '0' && character <= '9') {
                character = count % 10 + '0';
                count = 1;
            }

            printCharacter(character, count);
        } else {
            // Handle other characters
            printf(""%c"", Text[i]);
        }
    }

    return 0;
}
"
XUSC0h6A,Firefox Default Browser Agent export,harrym,XML,Sunday 24th of December 2023 10:27:05 AM CDT,"<?xml version=""1.0"" encoding=""UTF-16""?>
<Task version=""1.2"" xmlns=""http://schemas.microsoft.com/windows/2004/02/mit/task"">
  <RegistrationInfo>
    <Author>Mozilla</Author>
    <Description>The Default Browser Agent task checks when the default changes from Firefox to another browser. If the change happens under suspicious circumstances, it will prompt users to change back to Firefox no more than two times. This task is installed automatically by Firefox, and is reinstalled when Firefox updates. To disable this task, update the “default-browser-agent.enabled” preference on the about:config page or the Firefox enterprise policy setting “DisableDefaultBrowserAgent”.</Description>
    <URI>\Mozilla\Firefox Default Browser Agent 308046B0AF4A39CB</URI>
  </RegistrationInfo>
  <Triggers>
    <CalendarTrigger>
      <StartBoundary>2023-11-11T16:05:32+01:00</StartBoundary>
      <Enabled>true</Enabled>
      <ScheduleByDay>
        <DaysInterval>1</DaysInterval>
      </ScheduleByDay>
    </CalendarTrigger>
  </Triggers>
  <Principals>
    <Principal id=""Author"">
      <UserId>S-1-5-21-2063358666-2461647202-2508659107-1001</UserId>
      <LogonType>InteractiveToken</LogonType>
      <RunLevel>LeastPrivilege</RunLevel>
    </Principal>
  </Principals>
  <Settings>
    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
    <AllowHardTerminate>true</AllowHardTerminate>
    <StartWhenAvailable>true</StartWhenAvailable>
    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
    <IdleSettings>
      <Duration>PT10M</Duration>
      <WaitTimeout>PT1H</WaitTimeout>
      <StopOnIdleEnd>true</StopOnIdleEnd>
      <RestartOnIdle>false</RestartOnIdle>
    </IdleSettings>
    <AllowStartOnDemand>true</AllowStartOnDemand>
    <Enabled>true</Enabled>
    <Hidden>false</Hidden>
    <RunOnlyIfIdle>false</RunOnlyIfIdle>
    <WakeToRun>false</WakeToRun>
    <ExecutionTimeLimit>PT12H5M</ExecutionTimeLimit>
    <Priority>7</Priority>
  </Settings>
  <Actions Context=""Author"">
    <Exec>
      <Command>C:\Program Files\Mozilla Firefox\default-browser-agent.exe</Command>
      <Arguments>do-task ""308046B0AF4A39CB""</Arguments>
    </Exec>
  </Actions>
</Task>"
P7jK9tT9,Untitled,sissou123,C#,Sunday 24th of December 2023 10:12:51 AM CDT,"The Unity C# Survival Guide
Created in partnership with Unity Technologies: Master C# with Unity in this Complete Guide! 
for more:https://dz-linkk.com/NLd6T
"
XFqTAMbH,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Sunday 24th of December 2023 10:11:11 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
24 December 2023

829331"
qv5RLsVs,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 24th of December 2023 09:54:29 AM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-562166"
kttFahZB,Untitled,cyberjab,C++,Sunday 24th of December 2023 09:42:00 AM CDT,"//#pragma GCC optimize(""03"")
//#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <deque>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <ctime>
#include <chrono>
#include <random>
#include <functional>
#include <fstream>

using namespace std;
const int MOD = 1e9 + 7;
const int xx = 257;

vector<long long> x = {1};

bool isequal(int from1, int from2, int len, vector<long long> h, vector<long long> x, vector<long long> h2) {
    return (h[from1 + len - 1] + h2[from2 - 1] * x[len]) % MOD ==
        (h2[from2 + len - 1] + h[from1 - 1] * x[len]) % MOD;
}

void make_x_koefs(int n) {
    int k = x.size();
    if (n + 1 > k) {
        x.resize(n + 1);
    }
    for (int i = k; i < n + 1; i++) {
        x[i] = (x[i - 1] * xx) % MOD;
    }
}

vector <long long> make_polynom(string s) {
    s = "" "" + s;
    vector <long long> h(s.size(), 0);
    for (int i = 1; i < s.size(); i++) {
        h[i] = (h[i - 1] * xx + s[i]) % MOD;
    }
    return h;
}

vector <string> read_tests(string fname) {
    fstream tests;
    tests.open(fname, ios::in);
    vector <string> ts;
    if (!tests.is_open()) {
        return ts;
    }
    string s;
    while (tests >> s) {
        ts.push_back(s);
    }
    tests.close();
    return ts;
}

string read_text(string fname) {
    fstream Text_to_check;
    Text_to_check.open(fname, ios::in);
    string text_s;
    if (!Text_to_check.is_open()) {
        return text_s;
    }
    string s;
    while (!Text_to_check.eof()) {
        getline(Text_to_check, s);
        text_s += s;
        if (!Text_to_check.eof()) {
            text_s += ' ';
        }
    }
    Text_to_check.close();
    return text_s;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout << setprecision(2);
    cout << fixed;
    setlocale(LC_ALL, ""RU"");
    string cmd = ""?"";
    string message = ""*****************************************\nСписок команд:\nquit - выход\nload_text - выбрать текст для проверки\n"";
    message += ""load_tests - загрузить тесты на плагиат\n? - справка\ncheck - проверить текст\n"";
    message += ""*****************************************\n"";
    string text = """";
    vector<string> tests = {};
    string error = ""Ошибка!\n"";
    bool txt = false;
    bool tst = false;
    int N = 0;
    while (cmd != ""quit"") {
        if (cmd == ""?"") {
            cout << message;
        }
        else if (cmd == ""load_text"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                text = read_text(x);
                if (text != """") {
                    N = text.size();
                    txt = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""load_tests"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                tests = read_tests(x);
                if (!tests.empty()) {
                    tst = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""check"") {
            if (txt and tst) {
                make_x_koefs(N + 1);
                vector <long long> h = make_polynom(text);
                long long len_same = 0;
                bool flag = true;
                vector<vector <long long>> testsll;
                for (auto now : tests) {
                    if (now.size() > N) {
                        cout << ""Тест длиннее текста!\n"";
                        flag = false;
                        break;
                    }
                    testsll.push_back(make_polynom(now));
                }
                text = "" "" + text;
                for (int i = 1; i < text.size(); i++) {
                    for (int j = 0; j < testsll.size(); j++) {
                        if (i + testsll[j].size() - 1 <= text.size()) {
                            if (isequal(i, 1, testsll[j].size() - 1, h, x, testsll[j])) {
                                len_same += testsll[j].size() - 1;
                            }
                        }
                    }
                }
                cout << ""Процент плагиата:"" << (long double)len_same / (text.size() - 1) * 100 << ""%\n"";
            }
            else {
                cout << ""Не выбран текст или тесты!\n"";
            }
        }
        else {
            cout << error;
        }
        cin >> cmd;
    }
}"
yiCdmF2B,game theory ArktinuAgent,Kaelygon,C++,Sunday 24th of December 2023 09:32:19 AM CDT,"#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <climits>

class Agent {
public:
	std::vector<bool> history;  // History of decisions made by the agent
	uint score=0;
	uint victories=0;

	virtual bool makeDecision() = 0; //true = split, false = defy
    virtual Agent* clone() const = 0;
    virtual ~Agent() = default;
};

class SplitterAgent : public Agent {
public:
	bool makeDecision() {
		return true;  // Always choose to split
	}
    SplitterAgent* clone() const override {
        return new SplitterAgent(*this);
    }
};

class DefierAgent : public Agent {
public:
	bool makeDecision() {
		return false;  // Always choose to defy
	}
    DefierAgent* clone() const override {
        return new DefierAgent(*this);
    }	
};

class RandomAgent : public Agent {
public:
	bool makeDecision() {
		return rand() % 2 == 0;  // Randomly choose to split or defy
	}
    RandomAgent* clone() const override {
        return new RandomAgent(*this);
    }
};

class TitForTatAgent : public Agent {
public:
	bool makeDecision() {
		// Copy opponent's last decision
		if (!history.empty()) {
			return history.back();
		}
		// If no history yet, start with split
		return true;
	}
    TitForTatAgent* clone() const override {
        return new TitForTatAgent(*this);
    }
};

class AlternateAgent : public Agent {
private:
    bool splitNextRound;  // Flag to alternate between splitting and defying

public:
    AlternateAgent() : splitNextRound(true) {}

    bool makeDecision() {
        splitNextRound = !splitNextRound;  // Alternate decision in each round
        return splitNextRound;
    }

    AlternateAgent* clone() const override {
        return new AlternateAgent(*this);
    }
};

class PatternAgent : public Agent {
private:
    bool splitNextRound;  // Flag to alternate between splitting and defying

public:
	uint index=0;
	std::vector<uint> pattern=
	{
		1,1,0,1,1,0,1,1
	};

    bool makeDecision() {
        return pattern[index++%pattern.size()];
    }

    PatternAgent* clone() const override {
        return new PatternAgent(*this);
    }
};

class GrudgeAgent : public Agent {
public:
    bool makeDecision() override {
        if(history.empty()){
			hasGrudge=false;
			return true;
		}
		if( history.back() == false || hasGrudge ){
			hasGrudge=true;
		}
        return true*!hasGrudge;  // Cooperate by default
    }

    GrudgeAgent* clone() const override {
        return new GrudgeAgent(*this);
    }

private:
    bool hasGrudge = false;
};

class ArktinuAgent : public Agent {
public:

	bool makeDecision() {
		if (history.empty()) { //new game was started
			pastAvg=0.5;
			longTermAvg=0.5;
			parley=0;
			parleyAttempts=0;
			opponentAlwaysSplit=1;
			opponentAlwaysDefy=1;
			noProfitBetrayal=0;

			bool rnum = kaelRand() > UINT_MAX/10; //95% chance true
			if(!rnum){//we didn't start nicely
				startedBetrayal=2;
			}
			return rnum;
		}
		ogRecentSize = history.size()/48 > ogRecentSize ? history.size()/48+1 : ogRecentSize; //scale with game length

		if(parley>0){
			parley--;
			return 1;
		}

		recentSize = history.size()<ogRecentSize ? history.size() : ogRecentSize; //short term average size
		pastAvg=0;

		//averages
		longTermAvg=(longTermAvg+history.back())/2.0;
		for(int i=0;i<recentSize;i++){
			if(history[i]==0){opponentAlwaysSplit=0;}
			if(history[i]==1){opponentAlwaysDefy=0;}
			pastAvg+=history[history.size()-i-1];
		}
		pastAvg/=recentSize;

		//long terms
		if(longTermAvg>0.975 && opponentAlwaysSplit){ //opponent is extremely co-operative. Exploit
			return 0;
		}else if(longTermAvg>0.999975 && noProfitBetrayal>8){//trust worthy but not exploitable
			return 1;
		}
		if(longTermAvg<0.025 && opponentAlwaysDefy){ //opponent is not co-operative at all. Lose trust
			return 0;
		}

		startedBetrayal-=startedBetrayal>0; //betrayal cooldown
		if(startedBetrayal>0){ 
			if(startedBetrayal==recentSize){ //don't betray twice in row
				return 1;
			}
			
			noProfitBetrayal+=!history.back();
				
			//continue betrayal if it is tolerated
			//if opponent doesn't tolerate betrayal there's higher chance returning true because we started betrayal
			return kaelRand() < (UINT_MAX*pastAvg);
		}
		
		//recent 
		if(pastAvg>=0.90 && startedBetrayal==0){ //opponent is very co-operative. Test if exploiting a little is tolerated
			startedBetrayal=recentSize+1;
			return 0;
		}
		if(pastAvg>=0.52){ //opponent is mostly co-operative
			parleyAttempts -= (kaelRand() > (UINT_MAX/4)) * (parleyAttempts>0); //25% chance to forgive failed parley attempts
			return kaelRand() > (UINT_MAX*(pastAvg*0.95)); //slightly lower chance to return true than opponent's recent average
		}
		if( pastAvg<(2.0/ogRecentSize) ){ //opponent is not co-operative
			if(kaelRand() < (UINT_MAX/(25*(parleyAttempts+1))) ){//4% chance parley. decreases by past parley count
				parleyAttempts++;
				parley=recentSize; //return true for next few rounds to test opponent
				parley-=parley>0;
				return 1;
			} 
			return 0;
		}

		//similar to tit for tat when pastAvg is between pastAvg<(2.0/ogRecentSize) to 0.55
		uint fraction = (UINT_MAX*pastAvg);
		uint rnum = kaelRand();
		if(!history.back()){
			fraction=fraction*0.25; //much lower chance if opponent's previous value was false
		}else{
			rnum=rnum/1.25; //higher chance		
		}
		bool retval = rnum < fraction;
		return retval;
	}

    ArktinuAgent* clone() const override {
        return new ArktinuAgent(*this);
    }

private:

	uint noProfitBetrayal=0;
	double pastAvg=0.5;
	double longTermAvg=0.5;
	bool opponentAlwaysSplit=1;
	bool opponentAlwaysDefy=1;
	int parley=0;
	uint parleyAttempts=0;
	uint recentSize = 7;
	uint ogRecentSize = recentSize; //original past size

	int startedBetrayal=0;
	uint seed=13238717;
    uint kaelRand(){
		seed = ((seed >> 9) | (seed << 23))*7+3;
		//std::cout << seed << ""\n"";
		return seed;
	}
};

void playRound(Agent& agent1, Agent& agent2) {
	bool decision1 = agent1.makeDecision();
	bool decision2 = agent2.makeDecision();

	agent1.history.push_back(decision2);
	agent2.history.push_back(decision1);

	if (decision1 && decision2) {
		// Both agents split
		agent1.score+=3;
		agent2.score+=3;
	} else 
	if (decision1 && !decision2) {
		// Agent 2 defies, agent 1 splits
		agent1.score+=1;
		agent2.score+=5;
	} else 
	if (!decision1 && decision2) {
		// Agent 1 defies, agent 2 splits
		agent1.score+=5;
		agent2.score+=1;
	} else 
	if (!decision1 && !decision2) {
		// Both agents defy
		agent1.score+=1;
		agent2.score+=1;
	}
}


int main() {
	srand(time(NULL));

	SplitterAgent splitter;
	DefierAgent defier;
	RandomAgent randomAgent;
	TitForTatAgent titForTat;
	ArktinuAgent arktinu;
	GrudgeAgent grudge;
	AlternateAgent alternate;
	PatternAgent pattern;

	Agent* agents[] = {&splitter, &defier, &randomAgent, &grudge, &alternate, &pattern, &titForTat, &arktinu};
	const int numAgents = sizeof(agents) / sizeof(agents[0]);

	int totalRounds = 1000;

	// Play each agent against every other agent
	for (int i = 0; i < numAgents; ++i) {
		for (int j = 0; j < numAgents; ++j) {
			Agent* opponentAgent = agents[j];
			if(i==j){
				opponentAgent = agents[j]->clone();
			}

			uint agent1Score = agents[i]->score; //starting score
			uint agent2Score = opponentAgent->score;
			agents[i]->history.clear(); //clear for new game
			opponentAgent->history.clear();
			
			for (int round = 0; round < totalRounds; ++round) {
				playRound(*agents[i], *opponentAgent);
			}

			agent1Score = agents[i]->score - agent1Score; //difference to get this game score
			agent2Score = opponentAgent->score - agent2Score;
			std::string agent1History;
			std::string agent2History;

			for(int k=totalRounds-50;k<totalRounds;k++){
				agent1History+=to_string(opponentAgent->history[k]);
				agent2History+=to_string(agents[i]->history[k]);
			}
			
			if(agent1Score>agent2Score){
				agents[i]->victories++;
			}else if(agent1Score<agent2Score){
				agents[j]->victories++;
			}

			std::cout << agent1History << "" "" << typeid(*agents[i]).name() << "" "" << agent1Score << ""\n"";
			std::cout << agent2History << "" "" << typeid(*agents[j]).name() << "" "" << agent2Score << ""\n\n"";
			
		}
	}


	// Display combined end results
	std::cout << ""\nCombined end results:\n"";
	for (int i = 0; i < numAgents; ++i) {
		std::cout << typeid(*agents[i]).name() << ""  wins: "" << agents[i]->victories << "" "" << agents[i]->score << "" points\n"";
	}

	return 0;
}"
pNSGx7jr,Untitled,sissou123,C++,Sunday 24th of December 2023 09:32:10 AM CDT,"Unreal Engine 5 C++ Developer: Learn C++ & Make Video Games
Created in collaboration with Epic Games. Learn C++ from basics while making your first 5 video games in Unreal 
for more:https://cuty.io/dEmfgi0
"
bET0PCJU,isInViewport.js,salmancreation,JavaScript,Sunday 24th of December 2023 09:24:28 AM CDT,"/*!
 * Determine if an element is in the viewport
 * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param  {Node}    elem The element
 * @return {Boolean}      Returns true if element is in the viewport
 */
var isInViewport = function (elem) {
	var distance = elem.getBoundingClientRect();
	return (
		distance.top >= 0 &&
		distance.left >= 0 &&
		distance.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
		distance.right <= (window.innerWidth || document.documentElement.clientWidth)
	);
};"
NRj2JrkY,detect when an element is fully visible then do whatever,salmancreation,jQuery,Sunday 24th of December 2023 09:22:47 AM CDT,"This is what I use to detect when an element is fully visible then do whatever I want with it:

// Create jQuery Method
jQuery.fn.isFullyVisible = function(){

var win = $(window);

var viewport = {
    top : win.scrollTop(),
    left : win.scrollLeft()
};
viewport.right = viewport.left + win.width();
viewport.bottom = viewport.top + win.height();

var elemtHeight = this.height();// Get the full height of current element
elemtHeight = Math.round(elemtHeight);// Round it to a whole number

var bounds = this.offset();// Coordinates of current element
bounds.top = bounds.top + elemtHeight;
bounds.right = bounds.left + this.outerWidth();
bounds.bottom = bounds.top + this.outerHeight();

return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));

}

//Usage:
$(window).on('scroll', function() {
  if( $('.tailor .content').isFullyVisible() ){
    // do something
  }
});"
1JguKSxs,Untitled,sissou123,C#,Sunday 24th of December 2023 09:22:02 AM CDT,"Complete C# Unity Game Developer 3D
Design & Develop Video Games. Learn C# in Unity Engine. Code Your first 3D Unity games for web, Mac & PC 
for more:https://cuty.io/tV1TBgiq7
"
w5QqiiS6,Untitled,sissou123,C#,Sunday 24th of December 2023 09:14:43 AM CDT,"RPG Core Combat Creator: Learn Intermediate Unity C# Coding
Build Combat for Role Playing Game (RPG) in Unity. Tutorials Cover Code Architecture & Video Game Design. 
for more:https://cuty.io/DzyX3shYeL6i
"
bXUigVsf,"SPTS ENDLESS INF STRENGTH, V2 AND NO SCAM!",whileDo,Lua,Sunday 24th of December 2023 09:14:12 AM CDT,"-- explain: The game have tickApproat 1\1000, basically it freezee game and update tick for 1k time, but chance to this 0.1%, literally, if u have 1 it dublicated to 1000, if u have 1m, it dublicated to 1B, but im sayed, chance only 0.1%. dont change the code, theres 1k strings, it dont work if there 1001 string form dublicate, the RekQtelJpjgo29 obsufcated by Repa v3 code, it so op, just put autoexec and change the liad to 333,1,2 and u have 1k executed, basically, if u have normal luck, it dublicate u, but chance not 100%. im have 11Qui, but im got banned, dont use it so much. use it before fix, and yes, if u want not bt, im can obsufcate strength, physic, but Repa v3 work at 11k strings per second. im need grind for week to find obsufcate. good cheating
local bt = Game:GetService(""BodyTou23gfjmads"")
bt.Get.Place(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")"
DNuUdHRg,"ROBLOX SPINBOT (FE, WORK IN ANY GAME) v4 version",whileDo,Lua,Sunday 24th of December 2023 08:43:49 AM CDT,"local humanoid = game.Workspace:WaitForChild(""YourPlayerName"").Humanoid

humanoid.MaxTorque = Vector3.new(0, 400000, 0)

while true do
    humanoid.Torso.CFrame = humanoid.Torso.CFrame * CFrame.Angles(0, math.rad(50), 0)
    wait()
end
"
LiHaZ6wc,Untitled,cyberjab,C++,Sunday 24th of December 2023 08:24:50 AM CDT,"//#pragma GCC optimize(""03"")
//#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <deque>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <ctime>
#include <chrono>
#include <random>
#include <functional>
#include <fstream>

using namespace std;
const int MOD = 1e9 + 7;
const int xx = 257;

vector<long long> x = {1};

bool isequal(int from1, int from2, int len, vector<long long> h, vector<long long> x, vector<long long> h2) {
    return (h[from1 + len - 1] + h2[from2 - 1] * x[len]) % MOD ==
        (h2[from2 + len - 1] + h[from1 - 1] * x[len]) % MOD;
}

void make_x_koefs(int n) {
    int k = x.size();
    if (n + 1 > k) {
        x.resize(n + 1);
    }
    for (int i = k; i < n + 1; i++) {
        x[i] = (x[i - 1] * xx) % MOD;
    }
}

vector <long long> make_polynom(string s) {
    s = "" "" + s;
    vector <long long> h(s.size(), 0);
    for (int i = 1; i < s.size(); i++) {
        h[i] = (h[i - 1] * xx + s[i]) % MOD;
    }
    return h;
}

vector <string> read_tests(string fname) {
    fstream tests;
    tests.open(fname, ios::in);
    vector <string> ts;
    if (!tests.is_open()) {
        return ts;
    }
    string s;
    while (tests >> s) {
        ts.push_back(s);
    }
    tests.close();
    return ts;
}

string read_text(string fname) {
    fstream Text_to_check;
    Text_to_check.open(fname, ios::in);
    string text_s;
    if (!Text_to_check.is_open()) {
        return text_s;
    }
    string s;
    while (!Text_to_check.eof()) {
        getline(Text_to_check, s);
        text_s += s;
        if (!Text_to_check.eof()) {
            text_s += ' ';
        }
    }
    Text_to_check.close();
    return text_s;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout << setprecision(2);
    cout << fixed;
    setlocale(LC_ALL, ""RU"");
    string cmd = ""?"";
    string message = ""*****************************************\nСписок команд:\nquit - выход\nload_text - выбрать текст для проверки\n"";
    message += ""load_tests - загрузить тесты на плагиат\n? - справка\ncheck - проверить текст\n"";
    message += ""*****************************************\n"";
    string text = """";
    vector<string> tests = {};
    string error = ""Ошибка!\n"";
    bool txt = false;
    bool tst = false;
    int N = 0;
    while (cmd != ""quit"") {
        if (cmd == ""?"") {
            cout << message;
        }
        else if (cmd == ""load_text"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                text = read_text(x);
                if (text != """") {
                    N = text.size();
                    txt = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""load_tests"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                tests = read_tests(x);
                if (!tests.empty()) {
                    tst = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""check"") {
            if (txt and tst) {
                make_x_koefs(N + 1);
                vector <long long> h = make_polynom(text);
                long long len_same = 0;
                bool flag = true;
                vector<vector <long long>> testsll;
                for (auto now : tests) {
                    if (now.size() > N) {
                        cout << ""Тест длиннее текста!\n"";
                        flag = false;
                        break;
                    }
                    testsll.push_back(make_polynom(now));
                }
                text = "" "" + text;
                for (int i = 1; i < text.size(); i++) {
                    for (int j = 0; j < testsll.size(); j++) {
                        if (i + testsll[j].size() - 1 < text.size()) {
                            if (isequal(i, 1, testsll[j].size() - 1, h, x, testsll[j])) {
                                len_same += testsll[j].size() - 1;
                            }
                        }
                    }
                }
                cout << ""Процент плагиата:"" << (long double)len_same / (text.size() - 1) * 100 << ""%\n"";
            }
            else {
                cout << ""Не выбран текст или тесты!\n"";
            }
        }
        else {
            cout << error;
        }
        cin >> cmd;
    }
}"
GpbE2VQ8,Event,RizoBoy,HTML,Sunday 24th of December 2023 08:20:01 AM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#FF00FF>Ивенты</color></size>
<b><size=16>Сервер с <color=#FB9800>20+</color> автоматическими ивентами</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<size=17><link=""https://github.com/KoT0XleB/AutoEvent/blob/main/Docs/MiniGames.md""><mark=#FF00FF><size=13>|📃|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Список ивентов|<space=6.35em>|</mark></link></size>

<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>

<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>

<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>

<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>

<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<size=0>.</size>"
P4ZA3ZHC,Изменения,LeonMarkelov,Pawn,Sunday 24th of December 2023 08:09:08 AM CDT,OnDeath
zqvFCMwg,tugas kelompok strukdat,firzaelbuho,C++,Sunday 24th of December 2023 08:07:00 AM CDT,"#include <iostream>
#include <iomanip>
#include <cstring>
#include <cstdlib>

using namespace std;



// Struktur data untuk buku
struct Buku {
    char judul[50];
    char penulis[50];
    int nomorReferensi;
    Buku* next;
};

// Struktur data hash
const int HASH_SIZE = 10;
Buku* hashTable[HASH_SIZE] = {nullptr};

// Struktur data pohon telusur biner
struct Node {
    Buku* data;
    Node* left;
    Node* right;
};

// Fungsi hash untuk mendapatkan indeks hash
int hashFunction(int nomorReferensi) {
    return nomorReferensi % HASH_SIZE;
}

// Fungsi untuk menyisipkan buku ke dalam struktur hash
void sisipkanBuku(Buku* buku) {
    int index = hashFunction(buku->nomorReferensi);
    buku->next = hashTable[index];
    hashTable[index] = buku;
}

// Fungsi untuk menampilkan data buku dengan menggunakan struktur hash
void tampilkanDataBuku() {
    cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
    cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;

    for (int i = 0; i < HASH_SIZE; ++i) {
        Buku* current = hashTable[i];
        while (current != nullptr) {
            cout << left << setw(25) << current->judul << setw(20) << current->penulis << setw(15) << current->nomorReferensi << endl;
            current = current->next;
        }
    }
    cout << endl;
}

// Fungsi untuk menyisipkan data buku ke dalam pohon telusur biner
Node* sisipkanKePohon(Node* root, Buku* buku) {
    if (root == nullptr) {
        root = new Node;
        root->data = new Buku; // Allocated new Buku for root->data
        strcpy(root->data->judul, buku->judul);
        strcpy(root->data->penulis, buku->penulis);
        root->data->nomorReferensi = buku->nomorReferensi;
        root->left = root->right = nullptr;
    } else {
        if (strcmp(buku->judul, root->data->judul) < 0) {
            root->left = sisipkanKePohon(root->left, buku);
        } else {
            root->right = sisipkanKePohon(root->right, buku);
        }
    }
    return root;
}

// Fungsi untuk menampilkan data buku berdasarkan urutan judul (in-order)
void tampilkanInOrder(Node* root) {
    if (root != nullptr) {
        tampilkanInOrder(root->left);
        cout << left << setw(25) << root->data->judul << setw(20) << root->data->penulis << setw(15) << root->data->nomorReferensi << endl;
        tampilkanInOrder(root->right);
    }
}

// Fungsi untuk mencari buku berdasarkan nomor referensi menggunakan hash
Buku* cariBukuByNomorReferensi(int nomorReferensi) {
    int index = hashFunction(nomorReferensi);
    Buku* current = hashTable[index];
    while (current != nullptr) {
        if (current->nomorReferensi == nomorReferensi) {
            return current;
        }
        current = current->next;
    }
    return nullptr;
}

// Fungsi untuk mencari buku berdasarkan rentang judul menggunakan pohon telusur biner
void cariBukuByRentangJudul(Node* root, const char judulAwal[], const char judulAkhir[]) {
   

    if (root != nullptr) {
        if (strcmp(root->data->judul, judulAwal) >= 0 && strcmp(root->data->judul, judulAkhir) <= 0) {
            cout << left << setw(25) << root->data->judul << setw(20) << root->data->penulis << setw(15) << root->data->nomorReferensi << endl;
        }
        if (strcmp(root->data->judul, judulAwal) > 0) {
            cariBukuByRentangJudul(root->left, judulAwal, judulAkhir);
        }
        if (strcmp(root->data->judul, judulAkhir) < 0) {
            cariBukuByRentangJudul(root->right, judulAwal, judulAkhir);
        }
    }
}

// Fungsi untuk menghapus buku dari struktur hash
void hapusBuku(int nomorReferensi, Node*& pohonTelusurBiner, Node*& historyRoot, int hashIndex) {
    Buku* current = hashTable[hashIndex];
    Buku* prev = nullptr;

    while (current != nullptr && current->nomorReferensi != nomorReferensi) {
        prev = current;
        current = current->next;
    }

    if (current == nullptr) {
        cout << ""Buku tidak ditemukan.\n"";
        return;
    }

    if (prev == nullptr) {
        hashTable[hashIndex] = current->next;
    } else {
        prev->next = current->next;
    }

    // Sisipkan ke dalam history
    historyRoot = sisipkanKePohon(historyRoot, current); // <-- Perbaikan disini

    delete current;
}

// Fungsi untuk menampilkan history perpustakaan (in-order)
void tampilkanHistory(Node* root, int isFirst = true) {
    

    if (root != nullptr) {
        tampilkanHistory(root->left, false);
        
        cout << left << setw(25) << root->data->judul << setw(20) << root->data->penulis << setw(15) << root->data->nomorReferensi << endl;
        
        if(isFirst){
             tampilkanHistory(root->right, false);
        }
       
    }
}


// Fungsi utama
int main() {

    Node* pohonTelusurBiner = nullptr;
    Node* historyRoot = nullptr;
    // int deleteCount = 0;
    
    

    while (true) {
        cout << ""Menu:\n"";
        cout << ""1. Input Buku\n"";
        cout << ""2. Tampilkan Buku\n"";
        cout << ""3. Tampilkan Buku berdasarkan Judul (Ascending)\n"";
        cout << ""4. Cari Buku berdasarkan Nomor Referensi\n"";
        cout << ""5. Cari Buku berdasarkan Rentang Judul\n"";
        cout << ""6. Hapus Data Buku\n"";
        cout << ""7. Lihat History\n"";
        cout << ""8. Keluar\n"";
        cout << ""Pilih menu: "";

        int pilihan;
        cin >> pilihan;

        switch (pilihan) {
            case 1: {
                Buku* bukuBaru = new Buku;
                cout << ""Judul: "";
                cin.ignore();
                cin.getline(bukuBaru->judul, sizeof(bukuBaru->judul));
                cout << ""Penulis: "";
                cin.getline(bukuBaru->penulis, sizeof(bukuBaru->penulis));
                cout << ""Nomor Referensi: "";
                cin >> bukuBaru->nomorReferensi;

                sisipkanBuku(bukuBaru);
                pohonTelusurBiner = sisipkanKePohon(pohonTelusurBiner, bukuBaru);
                break;
            }
            case 2:
                tampilkanDataBuku();
                break;
            case 3:
                cout << ""Pengurutan Buku berdasarkan Judul (Ascending):\n"";
                cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
                cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;
                tampilkanInOrder(pohonTelusurBiner);
                cout << endl;
                break;
            case 4: {
                int nomorReferensi;
                cout << ""Masukkan Nomor Referensi: "";
                cin >> nomorReferensi;
                Buku* hasilCari = cariBukuByNomorReferensi(nomorReferensi);
                if (hasilCari != nullptr) {
                    cout << ""Buku ditemukan!\n"";
                    cout << ""Judul: "" << hasilCari->judul << "", Penulis: "" << hasilCari->penulis << "", Nomor Referensi: "" << hasilCari->nomorReferensi << endl;
                } else {
                    cout << ""Buku tidak ditemukan.\n"";
                }
                break;
            }
            case 5: {
                char judulAwal[50], judulAkhir[50];
                cout << ""Masukkan Rentang Judul (Awal): "";
                cin.ignore();
                cin.getline(judulAwal, sizeof(judulAwal));
                cout << ""Masukkan Rentang Judul (Akhir): "";
                cin.getline(judulAkhir, sizeof(judulAkhir));

                cout << ""Hasil Pencarian dalam Rentang Judul:\n"";
                cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
                cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;
                cariBukuByRentangJudul(pohonTelusurBiner, judulAwal, judulAkhir);
                cout << endl;
                break;
            }
            case 6: {
                int nomorReferensi;
                cout << ""Masukkan Nomor Referensi Buku yang akan dihapus: "";
                cin >> nomorReferensi;
                Buku* bukuDihapus = cariBukuByNomorReferensi(nomorReferensi);
                if (bukuDihapus != nullptr) {
                    int hashIndex = hashFunction(nomorReferensi);
                    hapusBuku(nomorReferensi, pohonTelusurBiner, historyRoot, hashIndex);
                    // deleteCount += 1;
                    historyRoot = sisipkanKePohon(historyRoot, bukuDihapus); // Masukkan ke history
                    cout << ""Buku berhasil dihapus.\n"";
                } else {
                    cout << ""Buku tidak ditemukan.\n"";
                }
                break;
            }
            case 7:
                cout << ""History Perpustakaan (In-Order):\n"";
                cout << ""( abaikan data terbawah )\n"";
                cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
                cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;
                tampilkanHistory(historyRoot);
                cout << endl;
                break;
            case 8:
                // Keluar dari program
                return 0;
            default:
                cout << ""Pilihan tidak valid.\n"";
        }

    }

    return 0;
}
"
0ABYLsGR,OnDeath,LeonMarkelov,Pawn,Sunday 24th of December 2023 08:05:18 AM CDT,"stock OnDeath(playerid)
{
	
	SetPlayerTeam(playerid, 1);
	SetPlayerSkillsInit(playerid);"
BLTytKGt,Speedtest Menu,KiLLerBoy_001,Bash,Sunday 24th of December 2023 07:51:45 AM CDT,"
#  ID{TABx1} Type{TABx2}Server

options=(
""1	 Ookla		KPN Amstelveen""
""2	 Ookla		KPN Barendrecht""  
""3	 Ookla		Jonaz Amersfoort""  
""4	 Ookla		Automatisch""
""5	 Iperf3		AMS1""
""6	 Iperf3		AMS2""
)

while item=$(zenity --title=""KPN Speedtest"" --text=""Kies een van de onderstaande Speedtest opties \nof tik het cijfer bij ID en druk Enter"" --list \
               --column=""ID	Type	Server"" ""${options[@]}"" --width=800 --height=500 --ok-label=""Test"" --cancel-label=""Exit"" ) 
do
    case ""$item"" in
        ""${options[0]}"")speedtest -s 61186;;
        ""${options[1]}"")speedtest -s 53438;;
        ""${options[2]}"")speedtest -s 10644;;
        ""${options[3]}"")speedtest;;       
        ""${options[4]}"")iperf3 -c speedtest.ams1.nl.leaseweb.net -p 5201-5210;;         
        ""${options[5]}"")iperf3 -c speedtest.ams2.nl.leaseweb.net -p 5201-5210;;
        
        *) echo ""Ooops! Invalid $item,option."";;
    esac
done





"
1kYU04Nd,MilkyWayStargateDialing,Heality,Lua,Sunday 24th of December 2023 07:47:34 AM CDT,"interface = peripheral.find(""basic_interface"")
--This finds some interface connected to the
--computer network, but since that one is the only
--one connected, it will always be that one near the gate

function dial(address)
--Milky Way Stargate is a special case when it comes
--to dialing
    
    local addressLength = #address
    --You don't really need to have this variable,
    --I just like to use lots of variables with
    --names to make everything immediately clear
    
    local start = interface.getChevronsEngaged() + 1
    --This is a helpful variable we'll be using to
    --make resuming dialing easier.
    --Basically what this does is it makes the computer
    --check how many chevrons are engaged and start from
    --the next one (that's why there's a +1)
    
    for chevron = start,addressLength,1
    do
        --This is a loop that will go through all the
        --symbols in an address
        
        local symbol = address[chevron]
        
        if chevron % 2 == 0 then
            interface.rotateClockwise(symbol)
        else
            interface.rotateAntiClockwise(symbol)
        end
        --Here we're basically making sure the gate ring
        --rotates clockwise when the number of chevrons
        --engaged is even and counter-clockwise when odd
        
        while(not interface.isCurrentSymbol(symbol))
        do
            sleep(0)
        end
        --This effectively ensures the program doesn't
        --do anything else and lets the dialing finish
        --rotating to the correct symbol
        
        sleep(1)
        --We want to wait 1 second before we
        --engage the chevron
        interface.raiseChevron() --This raises the chevron
        sleep(1)
        interface.lowerChevron() -- and this lowers it
        sleep(1)
        
        --Note that from many of the functions here,
        --you can get Stargate Feedback
        
        --For example, the raiseChevron() function will output
        --a number corresponding to some feedback value which you'll
        --be able to find in the video description
        
    end 
end

--Now that we've got a function, this is how we'll run it

--But first we want some addresses

abydosAddress = {26,6,14,31,11,29,0}
--Do note that the Point of Origin (number 0)
--is considered a part of the address
--and if you forget it, the dialing sequence
--will not finish
chulakAddress = {8,1,22,14,36,19,0}

lanteaAddress = {18,20,1,15,14,7,19,0}

--Now let's write the actual part of the program
--that will start the dialing

print(""Avaiting input:"")

print(""1 = Abydos"")
print(""2 = Chulak"")
print(""3 = Lantea"")
--These only tell the computer to write these
--strings of words when we run this program

input = tonumber(io.read())
sleep(0)
--Here we're basically getting the number written
--by the player on the console

if input == 1 then
    dial(abydosAddress) --We're using the function we wrote earlier
elseif input == 2 then
    dial(chulakAddress)
elseif input == 3 then
    dial(lanteaAddress)
else
    print(""Invalid input"")
end

--If you want to add more addresses, just
--add them to other addresses and extend this block

--You can do a bunch of other stuff with all this,
--but let's test it out now"
aKQvnHS2,Untitled,AttackingDirectory,C#,Sunday 24th of December 2023 07:42:22 AM CDT,"### ЗЕМЛЯ И ДИГГЕР

using System;
using Avalonia.Input;
using Digger.Architecture;

namespace Digger;

public class Terrain : ICreature
{
    public string GetImageFileName()
    {
        return ""Terrain.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }

    public int GetDrawingPriority()
    {
        return 0;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
    }
}

public class Player : ICreature
{
    public string GetImageFileName()
    {
        return ""Digger.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return false;
    }

    public int GetDrawingPriority()
    {
        return 1;
    }

    public CreatureCommand Act(int x, int y)
    {
        var key = Game.KeyPressed;
		var command = new CreatureCommand { DeltaX = 0, DeltaY = 0 };

        switch (key)
        {
            case Key.Down:
                if (y < Game.MapHeight - 1)
                {
                    command.DeltaY = 1;
                }
                break;

            case Key.Up:
                if (y > 0)
                {
                    command.DeltaY = -1;
                }
                break;

            case Key.Left:
                if (x > 0)
                {
                    command.DeltaX = -1;
                }
                break;

            case Key.Right:
                if (x < Game.MapWidth - 1)
                {
                    command.DeltaX = 1;
                }
                break;
        }

        return command;
    }
}

## Мешки и золото

using System;
using System.Diagnostics.Metrics;
using System.Threading;
using Avalonia.Input;
using Digger.Architecture;

namespace Digger;

public class Terrain : ICreature
{
    public string GetImageFileName()
    {
        return ""Terrain.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }

    public int GetDrawingPriority()
    {
        return 0;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
    }
}

public class Gold : ICreature
{
    public string GetImageFileName()
    {
        return ""Gold.png"";
    }

    public int GetDrawingPriority()
    {
        return 4;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 } ;
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }
}

public class Sack : ICreature
{
    private int counter = 0;
    public string GetImageFileName()
    {
        return ""Sack.png"";
    }

    public int GetDrawingPriority()
    {
        return 3;
    }

    public CreatureCommand Act(int x, int y)
    {
        if (y < Game.MapHeight - 1)
        {
            var map = Game.Map[x, y + 1];
            if (map == null ||
                (counter > 0 && (map.ToString() == ""Digger.Player"" ||
                map.ToString() == ""Digger.Monster"")))
            {
                counter++;
                return new CreatureCommand { DeltaX = 0, DeltaY = 1 };
            }
        }

        if (counter > 1)
        {
            counter = 0;
            return new CreatureCommand { DeltaX = 0, DeltaY = 0, TransformTo = new Gold() };
        }
        counter = 0;
        return new CreatureCommand { DeltaX = 0, DeltaY = 0};
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return false;
    }
}

public class Monster : ICreature
{
    public string GetImageFileName()
    {
        return ""Monster.png"";
    }

    public int GetDrawingPriority()
    {
        return 2;
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return conflictedObject is Sack || conflictedObject is Monster;
    }

    public CreatureCommand Act(int x, int y)
    {
        (var playerX, var playerY) = Player.GetCurrentPosition();
        if (playerX == -1)
            return new CreatureCommand { DeltaX = 0, DeltaY = 0 };;

        (var moveX, var moveY) = Player.GetMoveToPlayer(x, y, playerX, playerY);

        if (x + moveX != playerX || y + moveY != playerY - 1)
            return CanMonsterMoveTo(x, y, moveX, moveY)
                ? new CreatureCommand { DeltaX = 0, DeltaY = 0 }
                : new CreatureCommand { DeltaX = moveX, DeltaY = moveY };
        Game.Map[x + moveX, y + moveY] = null;
        return new CreatureCommand { DeltaX = 0, DeltaY = 0};
    }

    private static bool CanMonsterMoveTo(int x, int y, int moveX, int moveY)
    {
        var newX = x + moveX;
        var newY = y + moveY;

        var isOutsideMap = newX < 0 || newY < 0 || newX >= Game.MapWidth || newY >= Game.MapHeight;
        if (isOutsideMap)
            return true;

        var newPosition = Game.Map[newX, newY];

        return newPosition is Sack || newPosition is Monster || newPosition is Terrain;
    }
}

public class Player : ICreature
{
    public string GetImageFileName()
    {
        return ""Digger.png"";
    }

    public static (int, int) GetMoveToPlayer(int x, int y, int playerX, int playerY)
    {
        var deltaX = 0;
        var deltaY = 0;

        if (x != playerX)
        {
            deltaX = (x < playerX) ? 1 : -1;
        }
        else if (y != playerY)
        {
            deltaY = (y < playerY) ? 1 : -1;
        }

        return (deltaX, deltaY);
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        if (conflictObj is Gold)
        {
            Game.Scores += 10;
        }
        return conflictObj is Monster || conflictObj is Sack;
    }

    public int GetDrawingPriority()
    {
        return 1;
    }

    public static (int playerX, int playerY) GetCurrentPosition()
    {
        for (var i = 0; i < Game.MapWidth; i++)
        {
            for (var j = 0; j < Game.MapHeight; j++)
            {
                if (Game.Map[i, j] is Player)
                    return (i, j);
            }
        }

        return (-1, -1);
    }

    public CreatureCommand Act(int x, int y)
    {
        var key = Game.KeyPressed;
        var command = new CreatureCommand { DeltaX = 0, DeltaY = 0 };

        switch (key)
        {
            case Key.Down:
                if (y < Game.MapHeight - 1)
                {
                    command.DeltaY = 1;
                }
                break;

            case Key.Up:
                if (y > 0)
                {
                    command.DeltaY = -1;
                }
                break;

            case Key.Left:
                if (x > 0)
                {
                    command.DeltaX = -1;
                }
                break;

            case Key.Right:
                if (x < Game.MapWidth - 1)
                {
                    command.DeltaX = 1;
                }
                break;
        }

        if (Game.Map[x + command.DeltaX, y + command.DeltaY] is Sack)
        {
            return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
        }

        return command;
    }
}

## Монстры

using System;
using System.Diagnostics.Metrics;
using System.Threading;
using Avalonia.Input;
using Digger.Architecture;

namespace Digger;

public class Terrain : ICreature
{
    public string GetImageFileName()
    {
        return ""Terrain.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }

    public int GetDrawingPriority()
    {
        return 0;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
    }
}

public class Gold : ICreature
{
    public string GetImageFileName()
    {
        return ""Gold.png"";
    }

    public int GetDrawingPriority()
    {
        return 4;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 } ;
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }
}

public class Sack : ICreature
{
    private int counter = 0;
    public string GetImageFileName()
    {
        return ""Sack.png"";
    }

    public int GetDrawingPriority()
    {
        return 3;
    }

    public CreatureCommand Act(int x, int y)
    {
        if (y < Game.MapHeight - 1)
        {
            var map = Game.Map[x, y + 1];
            if (map == null ||
                (counter > 0 && (map.ToString() == ""Digger.Player"" ||
                map.ToString() == ""Digger.Monster"")))
            {
                counter++;
                return new CreatureCommand() { DeltaX = 0, DeltaY = 1 };
            }
        }

        if (counter > 1)
        {
            counter = 0;
            return new CreatureCommand() { DeltaX = 0, DeltaY = 0, TransformTo = new Gold() };
        }
        counter = 0;
        return new CreatureCommand() { DeltaX = 0, DeltaY = 0};
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return false;
    }
}

public class Monster : ICreature
{
    public string GetImageFileName()
    {
        return ""Monster.png"";
    }

    public int GetDrawingPriority()
    {
        return 2;
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return conflictedObject is Sack || conflictedObject is Monster;
    }

    public CreatureCommand Act(int x, int y)
    {
        (var playerX, var playerY) = Player.GetCurrentPosition();
        if (playerX == -1)
            return new CreatureCommand();

        (var moveX, var moveY) = Player.GetMoveToPlayer(x, y, playerX, playerY);

        if (x + moveX != playerX || y + moveY != playerY - 1)
            return CanMonsterMoveTo(x, y, moveX, moveY)
                ? new CreatureCommand { DeltaX = 0, DeltaY = 0 }
                : new CreatureCommand { DeltaX = moveX, DeltaY = moveY };
        Game.Map[x + moveX, y + moveY] = null;
        return new CreatureCommand { DeltaX = 0, DeltaY = 0};
    }

    private static bool CanMonsterMoveTo(int x, int y, int moveX, int moveY)
    {
        var newX = x + moveX;
        var newY = y + moveY;

        var isOutsideMap = newX < 0 || newY < 0 || newX >= Game.MapWidth || newY >= Game.MapHeight;
        if (isOutsideMap)
            return true;

        var newPosition = Game.Map[newX, newY];

        return newPosition is Sack || newPosition is Monster || newPosition is Terrain;
    }
}

public class Player : ICreature
{
    public string GetImageFileName()
    {
        return ""Digger.png"";
    }

    public static (int, int) GetMoveToPlayer(int x, int y, int playerX, int playerY)
    {
        var deltaX = 0;
        var deltaY = 0;

        if (x != playerX)
        {
            deltaX = (x < playerX) ? 1 : -1;
        }
        else if (y != playerY)
        {
            deltaY = (y < playerY) ? 1 : -1;
        }

        return (deltaX, deltaY);
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        if (conflictObj is Gold)
        {
            Game.Scores += 10;
        }
        return conflictObj is Monster || conflictObj is Sack;
    }

    public int GetDrawingPriority()
    {
        return 1;
    }

    public static (int playerX, int playerY) GetCurrentPosition()
    {
        for (var i = 0; i < Game.MapWidth; i++)
        {
            for (var j = 0; j < Game.MapHeight; j++)
            {
                if (Game.Map[i, j] is Player)
                    return (i, j);
            }
        }

        return (-1, -1);
    }

    public CreatureCommand Act(int x, int y)
    {
        var key = Game.KeyPressed;
        var command = new CreatureCommand { DeltaX = 0, DeltaY = 0 };

        switch (key)
        {
            case Key.Down:
                if (y < Game.MapHeight - 1)
                {
                    command.DeltaY = 1;
                }
                break;

            case Key.Up:
                if (y > 0)
                {
                    command.DeltaY = -1;
                }
                break;

            case Key.Left:
                if (x > 0)
                {
                    command.DeltaX = -1;
                }
                break;

            case Key.Right:
                if (x < Game.MapWidth - 1)
                {
                    command.DeltaX = 1;
                }
                break;
        }

        if (Game.Map[x + command.DeltaX, y + command.DeltaY] is Sack)
        {
            return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
        }

        return command;
    }
}"
TM6m140y,Untitled,teofarov13,C++,Sunday 24th of December 2023 07:37:10 AM CDT,"

MihailTeofarov: Fever at the Opera Haus
In February, Gaetano Donizzetti's L'elisir d'amore is staged at the Vienna State Opera. The map
of the theater is schematized in the in_theatre.dat file: 0s correspond to aisles, 1s to either empty
seats or seats occupied by people in full health, 2s to people vaccinated against the flu, 3s and 4s
to sick people (a little or a lot sick, respectively). During the show someone may try to improve
his or her position: keep in mind that the stage is positioned after the last row of the seating plan
and that a spectator's position improves if and only if 1. he or she moves closer to the stage and
2. moves away from the edges. During the duration of the show, the few people with the flu may
infect their direct first neighbors (up-down/left-right), and at the end of the show some spectators
will return home less healthy than before. How many?

GitHub Copilot: It seems like you're trying to simulate the spread of a disease in a theater. Here's a high-level plan:

1. Load the theater map from the `in_theatre.dat` file. Each number in the file represents a different state of health or type of seat.
2. Create a function to calculate the distance of each seat from the stage and the edges. This will be used to determine if a spectator's position improves.
3. Create a function to simulate the spread of the disease. This function should iterate over each seat and, if the seat is

MihailTeofarov: Write a cpp code that:
1. reads the theater map: you have 3 different seating configurations (_nv, _v and _sv) with
which you might observe the effect of the presence and distribution of the vaccinated people
2. implements the contagion: select a random seat, if it is occupied by a sick person then
propose a contagion for each of the 4 nearest neighbors, the probability of infecting a nearby
person is 10% for mildly sick spectators and 30% for heavily sick spectators (note: 3s
transform 1s into 3s, while 4s transform both 1s and 3s into 4s, in the infection dynamics all
1s are supposed to be healthy people); repeat this dynamics for the duration of the
performance (1000 time steps)
3. implements the swapping: select a random person once every 10 time steps, propose a
random swap and accept the proposed move only if 1. the candidate seat is marked as 1 (in
the swapping dynamics 1s can be either free seats or healthy spectators, do not worry about
any distinction) and 2. it is an improvement
4. accumulates a little statistics before drawing conclusions: the opera runs throughout
February, each night is independent of the previous one because no spectator wants to see the
same opera twice in one month.
5. outputs in one file the number (or — better — the percentage) of 1. empty/healthy seats 2.
vaccinated people (it should be constant!), 3. mildly sick people and 4. heavily sick people
for every replica of the show.
The

GitHub Copilot: Here is a C++ code that implements the requirements you've described. 

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <random>
#include <algorithm>

// Constants
const int TIME_STEPS = 1000;
const int SWAP_INTERVAL = 10;
const int HEALTHY = 1;
const int VACCINATED = 2;
const int MILDLY_SICK = 3;
const int HEAVILY_SICK = 4;

// Function to simulate contagion
void simulateContagion(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        int row = distribution(generator);
        int col = distribution(generator);
        if (seatingPlan[row][col] == MILDLY_SICK || seatingPlan[row][col] == HEAVILY_SICK) {
            // Propose contagion for each of the 4 nearest neighbors
            for (int j = std::max(0, row - 1); j <= std::min((int)seatingPlan.size() - 1, row + 1); j++) {
                for (int k = std::max(0, col - 1); k <= std::min((int)seatingPlan[j].size() - 1, col + 1); k++) {
                    if (j != row || k != col) {
                        if (seatingPlan[j][k] == HEALTHY) {
                            seatingPlan[j][k] = seatingPlan[row][col] == MILDLY_SICK ? MILDLY_SICK : HEAVILY_SICK;
                        }
                    }
                }
            }
        }
    }
}

// Function to simulate swapping
void simulateSwapping(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        if (i % SWAP_INTERVAL == 0) {
            int row1 = distribution(generator);
            int col1 = distribution(generator);
            int row2 = distribution(generator);
            int col2 = distribution(generator);
            if (seatingPlan[row1][col1] != HEALTHY && seatingPlan[row2][col2] == HEALTHY) {
                std::swap(seatingPlan[row1][col1], seatingPlan[row2][col2]);
            }
        }
    }
}

// Function to calculate statistics
void calculateStatistics(const std::vector<std::vector<int>>& seatingPlan, std::ofstream& file) {
    int totalSeats = seatingPlan.size() * seatingPlan[0].size();
    int emptySeats = 0;
    int vaccinated = 0;
    int mildlySick = 0;
    int heavilySick = 0;
    for (const auto& row : seatingPlan) {
        for (int seat : row) {
            switch (seat) {
                case HEALTHY:
                    emptySeats++;
                    break;
                case VACCINATED:
                    vaccinated++;
                    break;
                case MILDLY_SICK:
                    mildlySick++;
                    break;
                case HEAVILY_SICK:
                    heavilySick++;
                    break;
            }
        }
    }
    file << ""Empty/Healthy seats: "" << (double)emptySeats / totalSeats * 100 << ""%\n"";
    file << ""Vaccinated people: "" << (double)vaccinated / totalSeats * 100 << ""%\n"";
    file << ""Mildly sick people: "" << (double)mildlySick / totalSeats * 100 << ""%\n"";
    file << ""Heavily sick people: "" << (double)heavilySick / totalSeats * 100 << ""%\n"";
}

int main() {
    std::ifstream file(""in_theatre.dat"");
    std::ofstream outFile(""out_theatre.dat"");
    std::vector<std::vector<int>> seatingPlan;

    // Read seating plan from file
    std::string line;
    while (std::getline(file, line)) {
        std::vector<int> row;
        for (char c : line) {
            row.push_back(c - '0');
        }
        seatingPlan.push_back(row);
    }

    // Initialize random number generator
    std::default_random_engine generator;

    // Simulate contagion and swapping
    simulateContagion(seatingPlan, generator);
    simulateSwapping(seatingPlan, generator);

    // Calculate and output statistics
    calculateStatistics(seatingPlan, outFile);

    return 0;
}
```

This code reads the seating plan from a file, simulates the contagion and swapping dynamics, and then calculates and outputs the statistics to another file. The contagion and swapping dynamics are simulated using a random number generator. The statistics are calculated by counting the number of each type of seat and then outputting the percentages."
9AjQzMNS,Untitled,VeraMelnikova,Python,Sunday 24th of December 2023 07:33:22 AM CDT,"from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.layers import Dense, Conv2D, Flatten, AvgPool2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
import numpy as np
 
def load_train(path):
    datagen = ImageDataGenerator(
        horizontal_flip=True,
        vertical_flip=True,
        rescale=1/255.)

    train_datagen_flow = datagen.flow_from_directory(
        path,
        target_size=(150, 150),
        batch_size=16,
        class_mode='sparse',
        seed=12345)

    return train_datagen_flow

def create_model(input_shape):
    backbone = ResNet50(input_shape=(150, 150, 3),
                    weights='imagenet',
                    include_top=False) 

    # замораживаем ResNet50 без верхушки
    # backbone.trainable = False

    model = Sequential()
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(12, activation='softmax'))
    optimizer = Adam(lr=0.0001) 
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['acc'])
 
    return model


def train_model(model, train_data, test_data, batch_size=None, epochs=3,
               steps_per_epoch=None, validation_steps=None):

    model.fit(train_data,
              validation_data=test_data,
              batch_size=batch_size, epochs=epochs,
              steps_per_epoch=steps_per_epoch,
              validation_steps=validation_steps,
              verbose=2, shuffle=True)
 
    return model"
Cu5dE5mE,Untitled,teofarov13,C++,Sunday 24th of December 2023 07:32:51 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <random>
#include <algorithm>

// Constants
const int TIME_STEPS = 1000;
const int SWAP_INTERVAL = 10;
const int HEALTHY = 1;
const int VACCINATED = 2;
const int MILDLY_SICK = 3;
const int HEAVILY_SICK = 4;

// Function to simulate contagion
void simulateContagion(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        int row = distribution(generator);
        int col = distribution(generator);
        if (seatingPlan[row][col] == MILDLY_SICK || seatingPlan[row][col] == HEAVILY_SICK) {
            // Propose contagion for each of the 4 nearest neighbors
            for (int j = std::max(0, row - 1); j <= std::min((int)seatingPlan.size() - 1, row + 1); j++) {
                for (int k = std::max(0, col - 1); k <= std::min((int)seatingPlan[j].size() - 1, col + 1); k++) {
                    if (j != row || k != col) {
                        if (seatingPlan[j][k] == HEALTHY) {
                            seatingPlan[j][k] = seatingPlan[row][col] == MILDLY_SICK ? MILDLY_SICK : HEAVILY_SICK;
                        }
                    }
                }
            }
        }
    }
}

// Function to simulate swapping
void simulateSwapping(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        if (i % SWAP_INTERVAL == 0) {
            int row1 = distribution(generator);
            int col1 = distribution(generator);
            int row2 = distribution(generator);
            int col2 = distribution(generator);
            if (seatingPlan[row1][col1] != HEALTHY && seatingPlan[row2][col2] == HEALTHY) {
                std::swap(seatingPlan[row1][col1], seatingPlan[row2][col2]);
            }
        }
    }
}

// Function to calculate statistics
void calculateStatistics(const std::vector<std::vector<int>>& seatingPlan, std::ofstream& file) {
    int totalSeats = seatingPlan.size() * seatingPlan[0].size();
    int emptySeats = 0;
    int vaccinated = 0;
    int mildlySick = 0;
    int heavilySick = 0;
    for (const auto& row : seatingPlan) {
        for (int seat : row) {
            switch (seat) {
                case HEALTHY:
                    emptySeats++;
                    break;
                case VACCINATED:
                    vaccinated++;
                    break;
                case MILDLY_SICK:
                    mildlySick++;
                    break;
                case HEAVILY_SICK:
                    heavilySick++;
                    break;
            }
        }
    }
    file << ""Empty/Healthy seats: "" << (double)emptySeats / totalSeats * 100 << ""%\n"";
    file << ""Vaccinated people: "" << (double)vaccinated / totalSeats * 100 << ""%\n"";
    file << ""Mildly sick people: "" << (double)mildlySick / totalSeats * 100 << ""%\n"";
    file << ""Heavily sick people: "" << (double)heavilySick / totalSeats * 100 << ""%\n"";
}

int main() {
    std::ifstream file(""in_theatre.dat"");
    std::ofstream outFile(""out_theatre.dat"");
    std::vector<std::vector<int>> seatingPlan;

    // Read seating plan from file
    std::string line;
    while (std::getline(file, line)) {
        std::vector<int> row;
        for (char c : line) {
            row.push_back(c - '0');
        }
        seatingPlan.push_back(row);
    }

    // Initialize random number generator
    std::default_random_engine generator;

    // Simulate contagion and swapping
    simulateContagion(seatingPlan, generator);
    simulateSwapping(seatingPlan, generator);

    // Calculate and output statistics
    calculateStatistics(seatingPlan, outFile);

    return 0;
}"
0WDhhGd1,ROBLOX FE TELEKINSIS V2 SCRIPT,whileDo,Lua,Sunday 24th of December 2023 07:08:16 AM CDT,"--script not my, but this script hard  to find, u can customize power in MaxForce string, and power string, script not work in not collision games
-- Press a block to pick it (ignores anchored blocks) (there is a thing called network ownership so you cannot pick it but works on games sometimes like da hood)
-- Long Press - Flings a block (power is customizable at line 19)
-- Unequip  - Releases a block

-- Create a ScreenGui to hold the GUI elements


Range = ""Min"" -- ""Min"" (idk), ""Max"" (lag), ""Default"" (fastest)

local BP = Instance.new(""BodyPosition"")
BP.maxForce = Vector3.new(math.huge * math.huge, math.huge * math.huge, math.huge * math.huge)
BP.P = BP.P * 1.1

local BP = Instance.new(""BodyPosition"")
BP.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
BP.Position = BP.Position + Vector3.new(0, 0.1, 0)

task.spawn(function()
game:GetService(""RunService"").RenderStepped:Connect(function()
if Range == ""Max"" then
sethiddenproperty(game.Players.LocalPlayer, ""SimulationRadius"", 0)
elseif Range == ""Min"" then
sethiddenproperty(game.Players.LocalPlayer, ""SimulationRadius"", 500)
end
end)
end)

local function a(b, c)
    local d = getfenv(c)
    local e =
        setmetatable(
        {},
        {__index = function(self, f)
                if f == ""script"" then
                    return b
                else
                    return d[f]
                end
            end}
    )
    setfenv(c, e)
    return c
end
local power = 50
local usrinput = game:GetService(""UserInputService"")
local g = {}
local h = Instance.new(""Model"", game:GetService(""Lighting""))
local i = Instance.new(""Tool"")
local j = Instance.new(""Part"")
local k = Instance.new(""Script"")
local l = Instance.new(""LocalScript"")
local m = sethiddenproperty or set_hidden_property
i.Name = ""Telekinesis""
i.Parent = h
i.Grip = CFrame.new(0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0)
i.GripForward = Vector3.new(-0, -1, -0)
i.GripRight = Vector3.new(0, 0, 1)
i.GripUp = Vector3.new(1, 0, 0)
j.Name = ""Handle""
j.Parent = i
j.CFrame = CFrame.new(-17.2635937, 15.4915619, 46, 0, 1, 0, 1, 0, 0, 0, 0, -1)
j.Orientation = Vector3.new(0, 180, 90)
j.Position = Vector3.new(-17.2635937, 15.4915619, 46)
j.Rotation = Vector3.new(-180, 0, -90)
j.Color = Color3.new(0.0666667, 0.0666667, 0.0666667)
j.Transparency = 1
j.Size = Vector3.new(1, 1.20000005, 1)
j.BottomSurface = Enum.SurfaceType.Weld
j.BrickColor = BrickColor.new(""Really black"")
j.Material = Enum.Material.Metal
j.TopSurface = Enum.SurfaceType.Smooth
j.brickColor = BrickColor.new(""Really black"")
k.Name = ""LineConnect""
k.Parent = i
table.insert(
    g,
    a(
        k,
        function()
            wait()
            local n = script.Part2
            local o = script.Part1.Value
            local p = script.Part2.Value
            local q = script.Par.Value
            local color = script.Color
            local r = Instance.new(""Part"")
            r.TopSurface = 0
            r.BottomSurface = 0
            r.Reflectance = .5
            r.Name = ""Laser""
            r.Locked = true
            r.CanCollide = false
            r.Anchored = true
            r.formFactor = 0
            r.Size = Vector3.new(1, 1, 1)
            local s = Instance.new(""BlockMesh"")
            s.Parent = r
            while true do
                if n.Value == nil then
                    break
                end
                if o == nil or p == nil or q == nil then
                    break
                end
                if o.Parent == nil or p.Parent == nil then
                    break
                end
                if q.Parent == nil then
                    break
                end
                local t = CFrame.new(o.Position, p.Position)
                local dist = (o.Position - p.Position).magnitude
                r.Parent = q
                r.BrickColor = color.Value.BrickColor
                r.Reflectance = color.Value.Reflectance
                r.Transparency = color.Value.Transparency
                r.CFrame = CFrame.new(o.Position + t.lookVector * dist / 2)
                r.CFrame = CFrame.new(r.Position, p.Position)
                s.Scale = Vector3.new(.25, .25, dist)
                wait()
            end
            r:remove()
            script:remove()
        end
    )
)
k.Disabled = true
l.Name = ""MainScript""
l.Parent = i
table.insert(
    g,
    a(
        l,
        function()
            wait()
            tool = script.Parent
            lineconnect = tool.LineConnect
            object = nil
            mousedown = false
            found = false
            BP = Instance.new(""BodyPosition"")
            BP.maxForce = Vector3.new(math.huge * math.huge, math.huge * math.huge, math.huge * math.huge)
            BP.P = BP.P * 2
            dist = nil
            point = Instance.new(""Part"")
            point.Locked = true
            point.Anchored = true
            point.formFactor = 0
            point.Shape = 0
            point.BrickColor = BrickColor.Black()
            point.Size = Vector3.new(1, 1, 1)
            point.CanCollide = false
            local s = Instance.new(""SpecialMesh"")
            s.MeshType = ""Sphere""
            s.Scale = Vector3.new(.7, .7, .7)
            s.Parent = point
            handle = tool.Handle
            front = tool.Handle
            color = tool.Handle
            objval = nil
            local u = false
            local v = BP:clone()
            v.maxForce = Vector3.new(1000, 1000, 1000)
            function LineConnect(o, p, q)
                local w = Instance.new(""ObjectValue"")
                w.Value = o
                w.Name = ""Part1""
                local x = Instance.new(""ObjectValue"")
                x.Value = p
                x.Name = ""Part2""
                local y = Instance.new(""ObjectValue"")
                y.Value = q
                y.Name = ""Par""
                local z = Instance.new(""ObjectValue"")
                z.Value = color
                z.Name = ""Color""
                local A = lineconnect:clone()
                A.Disabled = false
                w.Parent = A
                x.Parent = A
                y.Parent = A
                z.Parent = A
                A.Parent = workspace
                if p == object then
                    objval = x
                end
            end
            function onButton1Down(B)
                if mousedown == true then
                    return
                end
                mousedown = true
                coroutine.resume(
                    coroutine.create(
                        function()
                            local C = point:clone()
                            C.Parent = tool
                            LineConnect(front, C, workspace)
                            while mousedown == true do
                                C.Parent = tool
                                if object == nil then
                                    if B.Target == nil then
                                        local t = CFrame.new(front.Position, B.Hit.p)
                                        C.CFrame = CFrame.new(front.Position + t.lookVector * 1000)
                                    else
                                        C.CFrame = CFrame.new(B.Hit.p)
                                    end
                                else
                                    LineConnect(front, object, workspace)
                                    break
                                end
                                wait()
                            end
                            C:remove()
                        end
                    )
                )
                while mousedown == true do
                    if B.Target ~= nil then
                        local D = B.Target
                        if D.Anchored == false then
                            object = D
                            dist = (object.Position - front.Position).magnitude
                            break
                        end
                    end
                    wait()
                end
                while mousedown == true do
                    if object.Parent == nil then
                        break
                    end
                    local t = CFrame.new(front.Position, B.Hit.p)
                    BP.Parent = object
                    BP.position = front.Position + t.lookVector * dist
                    wait()
                end
                BP:remove()
                object = nil
                objval.Value = nil
            end
            function onKeyDown(E, B)
                local E = E:lower()
                local F = false
                if E == ""q"" then
                    if dist >= 5 then
                        dist = dist - 10
                    end
                end
                if E == ""r"" then
                    if object == nil then
                        return
                    end
                    for G, H in pairs(object:children()) do
                        if H.className == ""BodyGyro"" then
                            return nil
                        end
                    end
                    BG = Instance.new(""BodyGyro"")
                    BG.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
                    BG.cframe = CFrame.new(object.CFrame.p)
                    BG.Parent = object
                    repeat
                        wait()
                    until object.CFrame == CFrame.new(object.CFrame.p)
                    BG.Parent = nil
                    if object == nil then
                        return
                    end
                    for G, H in pairs(object:children()) do
                        if H.className == ""BodyGyro"" then
                            H.Parent = nil
                        end
                    end
                    object.Velocity = Vector3.new(0, 0, 0)
                    object.RotVelocity = Vector3.new(0, 0, 0)
                    object.Orientation = Vector3.new(0, 0, 0)
                end
                if E == ""e"" then
                    dist = dist + 10
                end
                if E == ""t"" then
                    if dist ~= 10 then
                        dist = 10
                    end
                end
                if E == ""y"" then
                    if dist ~= 200 then
                        dist = 200
                    end
                end
                if E == ""="" then
                    BP.P = BP.P * 1.5
                end
                if E == ""-"" then
                    BP.P = BP.P * 0.5
                end
            end
            function onEquipped(B)
                touched = false
                uneq = false
                keymouse = B
                local I = tool.Parent
                human = I.Humanoid
                human.Changed:connect(
                    function()
                        if human.Health == 0 then
                            mousedown = false
                            uneq = true
                            touched = false
                            BP:remove()
                            point:remove()
                            tool:remove()
                        end
                    end
                )
                usrinput.TouchTapInWorld:connect(
                    function()
                        if uneq == false then
                        if touched == false then
                        onButton1Down(B)
                        touched = true
                        elseif touched == true then
                        touched = false
                        end
                        end
                    end
                )
                usrinput.TouchLongPress:connect(function()
                    if uneq == false then
                        if dist ~= power then
                            dist = power
                        end
                    end
                end)
                B.KeyDown:connect(
                    function(E)
                        onKeyDown(E, B)
                    end
                )
                B.Icon = ""rbxasset://textures\\GunCursor.png""
            end
            tool.Equipped:connect(onEquipped)
            tool.Unequipped:connect(function() uneq = true touched = false mousedown = false end)
        end
    )
)
for J, H in pairs(h:GetChildren()) do
    H.Parent = game:GetService(""Players"").LocalPlayer.Backpack
    pcall(
        function()
            H:MakeJoints()
        end
    )
end
h:Destroy()
for J, H in pairs(g) do
    spawn(
        function()
            pcall(H)
        end
    )
end"
pHrZe1yJ,aboveMainDiagAlphaPrep,zarkoto223,JavaScript,Sunday 24th of December 2023 07:07:32 AM CDT,"let rows = parseInt(gets());

let matrix = [];

for (let i = 0; i < rows; i++) {
    let row = [];
    for (let j = 0; j < rows; j++) {
        if (j === 0) {
            row.push(2 ** i);
        } else {
            row.push(row[j - 1] * 2);
        }
    }
    matrix.push(row);
}

let sumAboveDiagonal = BigInt(0);

for (let i = 0; i < rows; i++) {
    for (let j = i + 1; j < rows; j++) {
        let currentNumber = BigInt(matrix[i][j]);
        sumAboveDiagonal += currentNumber;
    }
}

console.log(sumAboveDiagonal.toString());
"
192CMe3W,Untitled,Josif_tepe,C++,Sunday 24th of December 2023 07:05:38 AM CDT,"#include <iostream>
#include <vector>
using namespace std;
const int maxn = 1e5 + 10;

vector<int> preprocess_lps(string pattern) {
    int j = 0, i = 1;
    vector<int> lps((int) pattern.size(), 0);
    lps[0] = 0;
    
    while(i < (int) pattern.size()) {
        if(pattern[i] == pattern[j]) {
            lps[i] = j + 1;
            j++;
            i++;
        }
        else {
            if(j != 0) {
                j = lps[j - 1];
            }
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
    return lps;
}

int main() {
    ios_base::sync_with_stdio(false);
    string s;
    cin >> s;
    vector<int> lps = preprocess_lps(s);
    int n = (int) s.size();
    
    vector<int> dp(n + 1, 0);
    for(int i = 0; i < n; i++) {
        dp[lps[i]]++;
    }
    for(int i = n - 1; i > 0; i--) {
        dp[lps[i - 1]] += dp[i];
    }
    for(int i = 0; i <= n; i++) {
        dp[i]++;
    }
    for(int i = 0; i < n; i++) {
        cout << lps[i] << "" "" << dp[lps[i]] << "" "" << endl;
    }

   return 0;
}
"
8xWVWJeV,Godot Intermediate GDScript Tutorials,Unain,Lua,Sunday 24th of December 2023 07:05:29 AM CDT,"- Code Architecture: https://www.youtube.com/watch?v=yRHN_WEulLc
- Debug Mode: https://www.youtube.com/watch?v=hu6SEHLFSCM&list=PL0qDutCc8IQgtUXLQB07H4miK6DPvtjTg&index=8
- Handy all around scripts: https://kidscancode.org/godot_recipes/4.x/recent/index.html
- Components (signals/structure): https://www.youtube.com/watch?v=W8gYHTjDCic
- Godot UI Basics: https://www.youtube.com/watch?v=1_OFJLyqlXI
- Godot Shaders: https://www.youtube.com/watch?v=nyFzPaWAzeQ
- Godot Saving/Loading: https://www.youtube.com/watch?v=43BZsLZheA4
- Simpler Code (Inheritance/Composition): https://www.youtube.com/watch?v=74y6zWZfQKk
	- Composition: https://www.youtube.com/watch?v=rCu8vQrdDDI
- Interaction Component: https://www.youtube.com/watch?v=ajCraxGAeYU
- Dynamic Camera: https://www.youtube.com/watch?v=WItiFcWQupQ
- Input Settings: https://www.youtube.com/watch?v=ZDPM45cHHlI
- Custom Resources: 
	- https://www.youtube.com/watch?v=vzRZjM9MTGw
	- https://ezcha.net/news/3-1-23-custom-resources-are-op-in-godot-4
	- https://www.youtube.com/watch?v=csX-Jp3OfDY
	- https://www.gotut.net/resource-system-in-godot-4/"
wkYJPMvk,Vector,LEGEND2004,C++,Sunday 24th of December 2023 06:53:21 AM CDT,"#include <bits/stdc++.h>
using namespace std;

#define pb push_back

signed main()
{/*
    int n;
    cin >> n;
    vector<int> a(n);
    for(int i = 0; i < n; i++)
        cin >> a[i];

    sort(a.begin() , a.end());

    for(int i = 0; i < a.size(); i++)
        cout << a[i] << "" "";

    for(auto it = a.begin(); it != a.end(); it++)
        cout << *it << "" "";

    for(int i : a)
        cout << i << "" "";

    vector<int> v(5 , 7); // 7 7 7 7 7
    v.pb(8); // 7 7 7 7 7 8
    v.pb(1); // 7 7 7 7 7 8 1
    v.pb(9); // 7 7 7 7 7 8 1 9
    sort(v.begin() , v.end()); // 1 7 7 7 7 7 8 9
    v[5] = 6; // 1 7 7 7 7 6 8 9
    reverse(v.begin() , v.end()); // 9 8 6 7 7 7 7 1
    v[4] = 3; // 9 8 6 7 3 7 7 1
    sort(v.begin() , v.end()); // 1 3 6 7 7 7 8 9
    for(int i : v)
        cout << i << "" "";
    cout << '\n';
    vector<int> v = {2 , 7 , 10};
    cout << v[0] << endl; // 2
    cout << v.front() << endl; // 2
    cout << *v.begin() << endl; // 2
    auto it = v.begin(); // vector<int>::iterator
    it++;
    cout << *it << endl; // 7

    it = v.end();
    it--;
    cout << *it << endl; // 10
    // 2 7 10
    int k = 2;
    it -= k;
    k--;
    it += k;
    k--;
    it += k;
    cout << *it << endl; // 7

    vector<int> v;
    if(v.empty())
        cout << ""Yes"" << endl;
    else
        cout << ""No"" << endl;


    vector<int> a(1 , 0);
    if(a.empty())
        cout << ""Yes"" << endl;
    else
        cout << ""No"" << endl;

    vector<int> v = {2 , 10 , 7 , 6};
    sort(v.rbegin() , v.rend()); // 10 7 6 2
    cout << v[1] << endl; // 7
*/
}
"
Fz49AMWP,exp list,excellent940707,C++,Sunday 24th of December 2023 06:28:06 AM CDT,"#include <iostream>
using namespace std;

// Structure to represent a term in the polynomial
struct Term {
    int coeff;  // Coefficient of the term
    int exp;    // Exponent of the term
    Term* next=nullptr;  // Pointer to the next term in the polynomial
};

// Function to insert a term into a polynomial
void insertTerm(Term*& head, int coeff, int exp) {
	//TODO
    Term *tmp = new Term;
    tmp->coeff = coeff;
    tmp->exp = exp;
    if(head==nullptr){
        head = tmp;
        return ;
    }

    if(head->exp<exp){
        tmp->next = head;
        head = tmp;
        return ;
    }else if(head->exp == exp){
        head->coeff += coeff;
        return ;
    }

    Term *now = head;
    while(now->next!= nullptr){
        if(now->next->exp < exp){
            now->next = tmp;
            tmp->next = now->next->next;
            return ;
        }else if(now->next->exp == exp){
            now->next->coeff += coeff;
            return ;
        }
        now = now->next;
    }
    now->next = tmp;
}

// Function to add two polynomials
Term* addPolynomials(const Term* poly1, const Term* poly2) {
    //TODO
    Term *result=nullptr;
    for(const Term* i=poly1;i!=nullptr;i=i->next){
        insertTerm(result, i->coeff, i->exp);
    }
    for(const Term* i=poly2;i!=nullptr;i=i->next){
        insertTerm(result, i->coeff, i->exp);
    }
    return result;
}

// Function to display a polynomial
void displayPolynomial(const Term* head) {
    //TODO
    if(head==nullptr)return;
    for(const Term* i=head;i!=nullptr;i=i->next){
        if(i != head){
            cout<<(i->coeff<0?"" - "":"" + "");
        }
        if(i->exp==0){
            if(i->coeff<0)cout<<-i->coeff;
            else cout<<i->coeff;
        }else{
            if(i->coeff<0)cout<<-i->coeff<<""x^""<<i->exp;
            else cout<<i->coeff<<""x^""<<i->exp;
        }
    }
    cout<<'\n';
}
void releaseMem(Term*& head){
    //TODO
    Term *now, *tmp;
    now = head;
    while(now!=nullptr){
        tmp = now;
        now = now->next;
        free(tmp);
    }
}
//DO NOT MODIFY THE MAIN() CODE
int main() {
    Term* poly1 = nullptr;
    Term* poly2 = nullptr;

    // Input for Polynomial 1
    int coeff, exp;
    while(true) {
        cin >> coeff >> exp;
        if(exp == -1)
            break;
        insertTerm(poly1, coeff, exp);
    }
    // Input for Polynomial 2
    while(true) {
        cin >> coeff >> exp;
        if(exp == -1)
            break;
        insertTerm(poly2, coeff, exp);
    }
    // Add polynomials and display the result
    Term* result = addPolynomials(poly1, poly2);
    cout << ""Resulting Polynomial after Addition: "";
    displayPolynomial(result);

    // Release allocated memory for the linked list nodes
    releaseMem(poly1);
    releaseMem(poly2);
    releaseMem(result);
    return 0;
}"
GcHV61kA,Untitled,Josif_tepe,C++,Sunday 24th of December 2023 06:24:41 AM CDT,"#include <iostream>
#include <vector>
using namespace std;
const int maxn = 1e5 + 10;
int lps[maxn];
void preprocess_lps(string pattern) {
    int j = 0, i = 1;
    lps[0] = 0;
    
    while(i < (int) pattern.size()) {
        if(pattern[i] == pattern[j]) {
            lps[i] = j + 1;
            j++;
            i++;
        }
        else {
            if(j != 0) {
                j = lps[j - 1];
            }
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
}
void kmp(string text, string pattern) {
    int n = (int) text.size();
    int m = (int) pattern.size();
    preprocess_lps(pattern);
    int cnt = 0;
    vector<int> idx;
    int i = 0, j = 0;
    while(n - i >= m - j) {
        if(text[i] == pattern[j]) {
            i++;
            j++;
        }
        if(j == m) {
            cnt++;
            idx.push_back(i - j);
            j = lps[j - 1];
        }
        else if(i < n and text[i] != pattern[j]) {
            if(j != 0) {
                j = lps[j - 1];
            }
            else {
                i++;
            }
        }
    }
    if(cnt == 0) {
        cout << ""Not Found"" << endl;
        return;
    }
    cout << cnt << endl;
    for(int x : idx) {
        cout << x + 1 << "" "";
    }
    cout << endl;
}

int main() {
    ios_base::sync_with_stdio(false);
    int t;
    cin >> t;
    while(t--) {
        string text, pattern;
        cin >> text >> pattern;
        kmp(text, pattern);
        
    }

   return 0;
}
"
Uu4Mr0JL,Untitled,Josif_tepe,C++,Sunday 24th of December 2023 06:19:30 AM CDT,"#include <iostream>
using namespace std;
const int maxn = 1e5 + 10;
int lps[maxn];
void preprocess_lps(string pattern) {
    int j = 0, i = 1;
    lps[0] = 0;
    
    while(i < (int) pattern.size()) {
        if(pattern[i] == pattern[j]) {
            lps[i] = j + 1;
            j++;
            i++;
        }
        else {
            if(j != 0) {
                j = lps[j - 1];
            }
            else {
                lps[i] = 0;
                i++;
            }
        }
    }
}
void kmp(string text, string pattern) {
    int n = (int) text.size();
    int m = (int) pattern.size();
    preprocess_lps(pattern);
    int i = 0, j = 0;
    while(n - i >= m - j) {
        if(text[i] == pattern[j]) {
            i++;
            j++;
        }
        if(j == m) {
            cout << ""found at index: "" << i - j << endl;
            j = lps[j - 1];
        }
        else if(i < n and text[i] != pattern[j]) {
            if(j != 0) {
                j = lps[j - 1];
            }
            else {
                i++;
            }
        }
    }
}

int main() {
    
    kmp(""abxabcabcaby"", ""abcaby"");
   return 0;
}
"
LfnXu0V9,data792,TestGuy1,JSON,Sunday 24th of December 2023 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'ee349f068a20616bfac7c59570cf49593fc3f471c103bb10a5795ba11d9656d71003e8969d22ff5c553b128b759dab28cdac96c4b0252674412c7304e0629be8394439820e406773b06ce7a8d85eda12ff598fd75763c2ce9f950485c70458b9ee400ac0011490fa817873b81ee85d3563352a5f6756b7e24888f75e45d8ed9c',
  otherdata: [
    '579ba02786d31a9d4101175d9dea8e98',
    '9abf2feccfff161e9d07aca09c5cffb2',
    '2b6d91d751653618cf31b654988b4b8a',
    '673b6ae7efa3a2a7faa6b32dbb78bc78',
    'baa3ddb22922f2ea8c3c89af1404704a',
    '51218397ee6b2f8cac7577799db5b89d',
    '04479995a98ed2b3cfcf9522f800aab3',
    '2cdd2b014f40c89e9d5937c302723f71'
  ]
}"
qZvxrGTG,Untitled,ProgMe,C++,Sunday 24th of December 2023 05:48:37 AM CDT,"#include <bits/stdc++.h>
#define int int64_t

#pragma GCC optimize(""O3"")

using namespace std;

inline int sqr(int x) {
    return x * x;
}

inline int dist(pair<int, int> x, pair<int, int> y) {
    return sqrt(sqr(x.first - y.first) + sqr(x.second - y.second));
}

inline int bruteSolution(vector<pair<int, int>>& v) {
    int ans = LLONG_MAX;
    for (int i = 0; i < v.size(); i++) {
        for (int j = i + 1; j < v.size() && j - i < 4; j++) {
            ans = min(ans, dist(v[i], v[j]));
        }
    }
    return ans;
}

int calculateAnswer(vector<pair<int, int>>& v, int l, int r) {
    if (l == r) {
        return LLONG_MAX;
    }

    int m = (l + r) / 2;
    int middle_x = v[m].first;

    int answer = min(calculateAnswer(v, l, m), calculateAnswer(v, m + 1, r));

    for (int i = l, j = m + 1; i <= m && j <= r;) {
        if (v[i] <= v[j]) {
            i++;
        } else {
            swap(v[i], v[j++]);
        }
    }

    vector<pair<int, int>> check;

    for (int i = l; i <= r; i++) {
        if (abs(v[i].first - middle_x) <= answer) {
            check.push_back(v[i]);
        }
    }

    return min(answer, bruteSolution(check));
}

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    vector<pair<int, int>> pts;

    int x, y;
    while (cin >> x >> y) {
        pts.emplace_back(x, y);
    }
    sort(pts.begin(), pts.end());

    cout << calculateAnswer(pts, 0, pts.size() - 1);
}
"
9dT19V7j,fbtc maybe errors,coinwalk,JavaScript,Sunday 24th of December 2023 05:44:07 AM CDT,"var oldestbal = parseFloat(document.getElementById('balance').innerHTML);
var james = oldestbal;
var junky = oldestbal;
var bear = true;
var base = (oldestbal/80); 
var bellance = oldestbal;
var botplus = base;
var trget = parseFloat(oldestbal);
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.1)
var floatingbal = 0;
var betnext = ((botplus*1).toFixed(8));
var fart = 1;
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 
 
function bogus(){
bellance = document.getElementById('balance').innerHTML;
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=floatingbal)) {
     botplus = botplus*2;   
     fart = 1; 
     floatingbal  = parseFloat(bellance);
}
if (((bellance-(james-tens))-(botplus*2))<=0)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    fart = 2;
    floatingbal = 0;  
}
if (((botplus*2)>=tens)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    floatingbal = 0;
    fart = 1;
    james = ((Math.floor(bellance/tens))*tens);
}
if (bellance<=(james-(tens))){
    james = ((Math.floor(bellance/tens))*tens);
    botplus = base; 
    fart = 1;
    floatingbal = 0;
}
return ((botplus*1).toFixed(8));
} 

var myseed;
 
function go() {
var xol = getR(1,3);
if (xol==1) {
myseed = (makeid(5));
}
if (xol==2) {
myseed = (makeid(7));
}
if (xol==3) {
myseed = (makeid(9));
}
var xox = document.getElementById('balance').innerHTML;
if ((xox==junky)&&(bear)){
document.getElementById('next_client_seed').value = myseed;
parseFloat(document.getElementById('double_your_btc_stake').value = bogus());
parseFloat(document.getElementById('win_amount').innerHTML = bogus());
document.getElementById('double_your_btc_bet_lo_button').click();
bear = false;
}
if ((xox!=junky)&&(!bear)){
junky = parseFloat(xox);
bear = true;
}
if (xox>=(oldestbal*24)) {
return;
}
setTimeout(() => go(), 1);
}
go();"
G9Kp0U3z,fbtc without test,coinwalk,JavaScript,Sunday 24th of December 2023 05:42:04 AM CDT,"var oldestbal = parseFloat(document.getElementById('balance').innerHTML);
var james = oldestbal;
var base = (oldestbal/80); 
var bellance = oldestbal;
var botplus = base;
var trget = parseFloat(oldestbal);
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.1)
var floatingbal = 0;
var betnext = ((botplus*1).toFixed(8));
var fart = 1;
 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
function makeid(length) {
    var result = '';
    var cha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var chaLength = cha.length;
    for ( var ion = 0; ion < length; ion++ ){
      result += cha.charAt(Math.floor(Math.random() *
 chaLength));
   }
   return result;
} 
 
function bogus(){
bellance = document.getElementById('balance').innerHTML;
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=floatingbal)) {
     botplus = botplus*2;   
     fart = 1; 
     floatingbal  = parseFloat(bellance);
}
if (((bellance-(james-tens))-(botplus*2))<=0)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    fart = 2;
    floatingbal = 0;  
}
if (((botplus*2)>=tens)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    floatingbal = 0;
    fart = 1;
    james = ((Math.floor(bellance/tens))*tens);
}
if (bellance<=(james-(tens))){
    james = ((Math.floor(bellance/tens))*tens);
    botplus = base; 
    fart = 1;
    floatingbal = 0;
}
return ((botplus*1).toFixed(8));
} 

var myseed;
 
function go() {
var xol = getR(1,3);
if (xol==1) {
myseed = (makeid(5));
}
if (xol==2) {
myseed = (makeid(7));
}
if (xol==3) {
myseed = (makeid(9));
}
var xox = document.getElementById('balance').innerHTML;
if ((xox==junky)&&(bear)){
document.getElementById('next_client_seed').value = myseed;
parseFloat(document.getElementById('double_your_btc_stake').value = bogus());
parseFloat(document.getElementById('win_amount').innerHTML = bogus());
document.getElementById('double_your_btc_bet_lo_button').click();
bear = false;
}
if ((xox!=junky)&&(!bear)){
junky = parseFloat(xox);
bear = true;
}
if (xox>=(oldestbal*24)) {
return;
}
setTimeout(() => go(), 1);
}
go();"
5EE7G4dB,Untitled,Josif_tepe,C++,Sunday 24th of December 2023 05:17:23 AM CDT,"#include <iostream>

using namespace std;

int main() {
    
    string text;
    string pattern;
    cin >> text;
    cin >> pattern;
    
    for(int i = 0; i < (int) text.size(); i++) {
        if(text[i] == pattern[0]) {
            bool ok = true;
            for(int j = 0; j < (int) pattern.size(); j++) {
                if(i + j >= (int) text.size() or pattern[j] != text[i + j]) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                cout << ""DA postoi"" << endl;
            }
        }
    }

   return 0;
}
"
Lz99QXUJ,better snowybot,coinwalk,JavaScript,Sunday 24th of December 2023 04:07:54 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = (oldestbal/1000); 
var bellance = oldestbal;
var botplus = base;
var trget = parseFloat(oldestbal);
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.1)
var floatingbal = 0;
var betnext = ((botplus*1).toFixed(8));
var fart = 1;

 
function get(){
bellance = document.getElementById('pct_balance').value;
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=floatingbal)) {
     botplus = botplus*2;   
     fart = 1; 
     floatingbal  = parseFloat(bellance);
}
if ((((bellance-(oldestbal-(tens*fart)))-(botplus*2))<=0)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    fart = 2;
    floatingbal = 0;  
}
if (((botplus*2)>=tens)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    floatingbal = 0;
    fart = 1;
    oldestbal = parseFloat(((Math.floor(bellance/tens))*tens));
}
if ((((bellance-(oldestbal-(tens*fart)))-(botplus*2))<=0)&&(bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))){
    botplus = base*2;
    fart = 2;
    floatingbal  = parseFloat(bellance); 
}
if ((bellance-(oldestbal-(tens)))<=0){
oldestbal = parseFloat(((Math.floor(bellance/tens))*tens));
botplus = base; 
fart = 1;
floatingbal = 0;
}
if (bellance>(trget*24)){
console.log(""buy ebike"")
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_hi').click();
setTimeout(() => get(), 1200);
}
get();"
cZBGKv9X,good snowybot,coinwalk,JavaScript,Sunday 24th of December 2023 03:59:18 AM CDT,"var oldestbal = parseFloat(document.getElementById('pct_balance').value);
var base = (oldestbal/1000); 
var bellance = oldestbal;
var botplus = base;
var trget = parseFloat(oldestbal);
var tens = (base*10);
var sevens = (base*6.9);
var eights  = (base*7.1)
var floatingbal = 0;
var betnext = ((botplus*1).toFixed(8));
var fart = 1;

 
function get(){
bellance = document.getElementById('pct_balance').value;
if ((bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))&&(bellance!=floatingbal)) {
     botplus = botplus*2;    
     floatingbal  = parseFloat(bellance);
}
if ((((bellance-(oldestbal-(tens*fart)))-(botplus*2))<=0)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base; 
    fart = 2;
    floatingbal = 0;  
}
if (((botplus*2)>=tens)&&(bellance<(((Math.floor(bellance/tens))*tens)+sevens))){
    botplus = base;
    floatingbal = 0;
    fart = 1;
    oldestbal = parseFloat(((Math.floor(bellance/tens))*tens));
}
if ((((bellance-(oldestbal-(tens*fart)))-(botplus*2))<=0)&&(bellance>(((Math.floor(bellance/tens))*tens)+sevens))&&(bellance<(((Math.floor(bellance/tens))*tens)+eights))){
    botplus = base*2;
    fart = 2;
    floatingbal  = parseFloat(bellance); 
}
if ((bellance-(oldestbal-(tens)))<=0){
oldestbal = parseFloat(((Math.floor(bellance/tens))*tens));
botplus = base; 
fart = 1;
floatingbal = 0;
}
if (bellance>(trget*24)){
console.log(""buy ebike"")
return
}
betnext = ((botplus*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(betnext);
$('#a_hi').click();
setTimeout(() => get(), 1200);
}
get();"
KhmwN7uN,sword!!!! (unfinished),LikeableEmmec,Lua,Sunday 24th of December 2023 03:56:05 AM CDT,"-- i tried making this script as small as i possibly could, but unfortunately theres just too much things that need to be inserted

--Converted with ttyyuu12345's model to script plugin v4
function sandbox(var,func)
	local env = getfenv(func)
	local newenv = setmetatable({},{
		__index = function(self,k)
			if k==""script"" then
				return var
			else
				return env[k]
			end
		end,
	})
	setfenv(func,newenv)
	return func
end
cors = {}
mas = Instance.new(""Model"",game:GetService(""Lighting""))
Model0 = Instance.new(""Model"")
Part1 = Instance.new(""Part"")
ParticleEmitter2 = Instance.new(""ParticleEmitter"")
Weld3 = Instance.new(""Weld"")
Weld4 = Instance.new(""Weld"")
Weld5 = Instance.new(""Weld"")
Weld6 = Instance.new(""Weld"")
Weld7 = Instance.new(""Weld"")
Weld8 = Instance.new(""Weld"")
Weld9 = Instance.new(""Weld"")
Weld10 = Instance.new(""Weld"")
Weld11 = Instance.new(""Weld"")
Weld12 = Instance.new(""Weld"")
Weld13 = Instance.new(""Weld"")
Weld14 = Instance.new(""Weld"")
Weld15 = Instance.new(""Weld"")
Weld16 = Instance.new(""Weld"")
Weld17 = Instance.new(""Weld"")
Weld18 = Instance.new(""Weld"")
Weld19 = Instance.new(""Weld"")
Weld20 = Instance.new(""Weld"")
Weld21 = Instance.new(""Weld"")
Weld22 = Instance.new(""Weld"")
Weld23 = Instance.new(""Weld"")
Weld24 = Instance.new(""Weld"")
Weld25 = Instance.new(""Weld"")
Weld26 = Instance.new(""Weld"")
Weld27 = Instance.new(""Weld"")
Weld28 = Instance.new(""Weld"")
Weld29 = Instance.new(""Weld"")
Weld30 = Instance.new(""Weld"")
Weld31 = Instance.new(""Weld"")
Weld32 = Instance.new(""Weld"")
Weld33 = Instance.new(""Weld"")
Weld34 = Instance.new(""Weld"")
Weld35 = Instance.new(""Weld"")
Weld36 = Instance.new(""Weld"")
Weld37 = Instance.new(""Weld"")
Weld38 = Instance.new(""Weld"")
Weld39 = Instance.new(""Weld"")
Weld40 = Instance.new(""Weld"")
Weld41 = Instance.new(""Weld"")
Weld42 = Instance.new(""Weld"")
Weld43 = Instance.new(""Weld"")
Weld44 = Instance.new(""Weld"")
Weld45 = Instance.new(""Weld"")
Weld46 = Instance.new(""Weld"")
Weld47 = Instance.new(""Weld"")
Weld48 = Instance.new(""Weld"")
Part49 = Instance.new(""Part"")
Part50 = Instance.new(""Part"")
Part51 = Instance.new(""Part"")
Part52 = Instance.new(""Part"")
Part53 = Instance.new(""Part"")
Part54 = Instance.new(""Part"")
Part55 = Instance.new(""Part"")
Part56 = Instance.new(""Part"")
Part57 = Instance.new(""Part"")
Part58 = Instance.new(""Part"")
Part59 = Instance.new(""Part"")
Part60 = Instance.new(""Part"")
Part61 = Instance.new(""Part"")
Part62 = Instance.new(""Part"")
Part63 = Instance.new(""Part"")
Part64 = Instance.new(""Part"")
Part65 = Instance.new(""Part"")
Part66 = Instance.new(""Part"")
Part67 = Instance.new(""Part"")
Part68 = Instance.new(""Part"")
Part69 = Instance.new(""Part"")
Part70 = Instance.new(""Part"")
Part71 = Instance.new(""Part"")
Part72 = Instance.new(""Part"")
Part73 = Instance.new(""Part"")
Part74 = Instance.new(""Part"")
Part75 = Instance.new(""Part"")
Part76 = Instance.new(""Part"")
Part77 = Instance.new(""Part"")
Part78 = Instance.new(""Part"")
Part79 = Instance.new(""Part"")
Part80 = Instance.new(""Part"")
Part81 = Instance.new(""Part"")
Part82 = Instance.new(""Part"")
Part83 = Instance.new(""Part"")
Part84 = Instance.new(""Part"")
Part85 = Instance.new(""Part"")
Part86 = Instance.new(""Part"")
Part87 = Instance.new(""Part"")
Part88 = Instance.new(""Part"")
Part89 = Instance.new(""Part"")
Part90 = Instance.new(""Part"")
Part91 = Instance.new(""Part"")
Part92 = Instance.new(""Part"")
Part93 = Instance.new(""Part"")
Part94 = Instance.new(""Part"")
Part95 = Instance.new(""Part"")
SpecialMesh96 = Instance.new(""SpecialMesh"")
Decal97 = Instance.new(""Decal"")
Script98 = Instance.new(""Script"")
Script98.Parent = mas
Model0.Parent = Script98
Part1.Name = ""Main""
Part1.Position = Vector3.new(-0.088, 1.805, 15.744)
Part1.Orientation = Vector3.new(0,180,0)
Part1.Anchored = true
Part1.Parent = Model0
Part1.Size = Vector3.new(1.8447951078414917, 1.0458904504776, 1.111020565032959)
Part1.BrickColor = BrickColor.new(""Dark stone grey"")
Part1.Material = Enum.Material.Limestone
ParticleEmitter2.Name = ""Dust""
ParticleEmitter2.Parent = Part1
ParticleEmitter2.Speed = NumberRange.new(0.5, 0.5)
ParticleEmitter2.LightInfluence = 1
ParticleEmitter2.Size = NumberSequence.new(0.02500000037252903,0.02500000037252903)
ParticleEmitter2.Lifetime = NumberRange.new(10, 10)
ParticleEmitter2.LockedToPart = true
ParticleEmitter2.Rate = 10
ParticleEmitter2.SpreadAngle = Vector2.new(360, 360)
ParticleEmitter2.VelocitySpread = 360
Weld3.Parent = Part1
Weld3.C0 = CFrame.new(-1.62742424, -1.65402889, -0.298660278, -0.0123990364, 0.803554535, 0.595102072, -0.855896473, 0.299185395, -0.421816826, -0.516998649, -0.514575839, 0.684049785)
Weld3.Part0 = Part1
Weld3.Part1 = Part49
Weld4.Parent = Part1
Weld4.C0 = CFrame.new(-1.30332565, -1.66249919, -0.662700653, -0.157534987, -0.974547744, -0.159497529, -0.739786625, 0.223455191, -0.634652317, 0.654139578, 0.0180141963, -0.756159365)
Weld4.Part0 = Part1
Weld4.Part1 = Part50
Weld5.Parent = Part1
Weld5.C0 = CFrame.new(-2.0207901, -2.8342557, -1.00005722, 0.961932003, -0.183506295, -0.202514857, 0.0896580145, 0.911919653, -0.400454909, 0.258163244, 0.3670533, 0.893657446)
Weld5.Part0 = Part1
Weld5.Part1 = Part51
Weld6.Parent = Part1
Weld6.C0 = CFrame.new(-0.985092163, -0.620789289, -0.708850861, 0.39966169, 0.112673476, 0.909711599, 0.418754339, 0.860369503, -0.290532559, -0.815423489, 0.497060418, 0.296674222)
Weld6.Part0 = Part1
Weld6.Part1 = Part52
Weld7.Parent = Part1
Weld7.C0 = CFrame.new(-0.441106796, -1.78672659, -0.507808685, -0.0955647454, -0.991187751, -0.0917297378, -0.339432985, 0.119076774, -0.933062673, 0.935763121, -0.0580318049, -0.347821325)
Weld7.Part0 = Part1
Weld7.Part1 = Part53
Weld8.Parent = Part1
Weld8.C0 = CFrame.new(-0.518413544, -0.552452922, -0.315631866, 0.961932003, -0.183506295, -0.202514827, 0.0896580145, 0.911919653, -0.400454879, 0.258163244, 0.3670533, 0.893657446)
Weld8.Part0 = Part1
Weld8.Part1 = Part54
Weld9.Parent = Part1
Weld9.C0 = CFrame.new(-0.48207283, -0.771619081, -0.82699585, -0.941015422, -0.262778252, 0.213161245, 0.251712024, -0.122652248, 0.959998727, -0.226122111, 0.957028747, 0.181562096)
Weld9.Part0 = Part1
Weld9.Part1 = Part55
Weld10.Parent = Part1
Weld10.C0 = CFrame.new(-0.538236618, -2.81401229, -2.13531876, 0.131795928, -0.912253916, 0.387843549, 0.533969164, -0.264305979, -0.803130984, 0.835168719, 0.312945902, 0.452281058)
Weld10.Part0 = Part1
Weld10.Part1 = Part56
Weld11.Parent = Part1
Weld11.C0 = CFrame.new(-1.59398079, -2.19653368, 0.151702881, -0.606387377, 0.248504475, 0.755340934, 0.494581729, 0.861680388, 0.113560215, -0.622642219, 0.442439288, -0.64541775)
Weld11.Part0 = Part1
Weld11.Part1 = Part57
Weld12.Parent = Part1
Weld12.C0 = CFrame.new(-1.49403381, -2.56299853, -1.38790512, 0.183451474, -0.26985538, -0.945263803, 0.737415552, 0.673645139, -0.0491998233, 0.65004921, -0.688026428, 0.322576761)
Weld12.Part0 = Part1
Weld12.Part1 = Part58
Weld13.Parent = Part1
Weld13.C0 = CFrame.new(0.855331421, 0.110949636, 1.47911453, -0.319102496, -0.890573382, 0.324118495, 0.208141714, -0.399504602, -0.892789483, 0.924581349, -0.217428774, 0.312848359)
Weld13.Part0 = Part1
Weld13.Part1 = Part59
Weld14.Parent = Part1
Weld14.C0 = CFrame.new(-0.744325638, -1.76737642, 1.28087234, -0.576937139, 0.734499276, -0.357287586, 0.361600131, -0.162544847, -0.9180547, -0.732385755, -0.65885514, -0.171816871)
Weld14.Part0 = Part1
Weld14.Part1 = Part60
Weld15.Parent = Part1
Weld15.C0 = CFrame.new(0.0887203217, -1.69801128, 0.389862061, 0.183451474, -0.26985538, -0.945263803, 0.737415552, 0.673645139, -0.0491998233, 0.65004921, -0.688026428, 0.322576761)
Weld15.Part0 = Part1
Weld15.Part1 = Part61
Weld16.Parent = Part1
Weld16.C0 = CFrame.new(0.230297089, -1.84559774, -0.333618164, -0.606387377, 0.248504475, 0.755340934, 0.494581729, 0.861680388, 0.113560215, -0.622642219, 0.442439288, -0.64541775)
Weld16.Part0 = Part1
Weld16.Part1 = Part62
Weld17.Parent = Part1
Weld17.C0 = CFrame.new(1.14164734, -0.921744108, -0.730018616, -0.0955647454, -0.991187751, -0.0917297378, -0.339432985, 0.119076774, -0.933062673, 0.935763121, -0.0580318049, -0.347821325)
Weld17.Part0 = Part1
Weld17.Part1 = Part63
Weld18.Parent = Part1
Weld18.C0 = CFrame.new(0.279428482, -0.797514081, 1.11507034, -0.157534987, -0.974547744, -0.159497529, -0.739786625, 0.223455191, -0.634652317, 0.654139578, 0.0180141963, -0.756159365)
Weld18.Part0 = Part1
Weld18.Part1 = Part64
Weld19.Parent = Part1
Weld19.C0 = CFrame.new(-0.0446681976, -0.789039373, 1.4791069, -0.0123990364, 0.803554535, 0.595102072, -0.855896473, 0.299185395, -0.421816826, -0.516998649, -0.514575839, 0.684049785)
Weld19.Part0 = Part1
Weld19.Part1 = Part65
Weld20.Parent = Part1
Weld20.C0 = CFrame.new(-0.239549637, -0.764985323, 0.903736115, -0.0123990364, 0.803554535, 0.595102072, -0.855896473, 0.299185395, -0.421816826, -0.516998649, -0.514575839, 0.684049785)
Weld20.Part0 = Part1
Weld20.Part1 = Part66
Weld21.Parent = Part1
Weld21.C0 = CFrame.new(1.04451752, -1.94902587, -1.25753403, 0.131795928, -0.912253916, 0.387843549, 0.533969164, -0.264305979, -0.803130984, 0.835168719, 0.312945902, 0.452281058)
Weld21.Part0 = Part1
Weld21.Part1 = Part67
Weld22.Parent = Part1
Weld22.C0 = CFrame.new(0.150651932, -1.70430422, -0.901477814, -0.902625918, -0.248075932, -0.351745516, -0.429858297, 0.561501384, 0.707063019, 0.0221002605, 0.789414108, -0.613463163)
Weld22.Part0 = Part1
Weld22.Part1 = Part68
Weld23.Parent = Part1
Weld23.C0 = CFrame.new(-0.438035965, -1.96927178, 0.777713776, 0.961932003, -0.183506295, -0.202514857, 0.0896580145, 0.911919653, -0.400454909, 0.258163244, 0.3670533, 0.893657446)
Weld23.Part0 = Part1
Weld23.Part1 = Part69
Weld24.Parent = Part1
Weld24.C0 = CFrame.new(0.400941849, -1.55901909, 1.61625671, 0.999867141, -0.0115958629, -0.0114646284, 0.0134438463, 0.18830739, 0.982018232, -0.00922847353, -0.982041717, 0.188438252)
Weld24.Part0 = Part1
Weld24.Part1 = Part70
Weld25.Parent = Part1
Weld25.C0 = CFrame.new(0.963367462, -1.16474319, 1.10194016, -0.637993515, 0.0767424107, -0.766208112, 0.274486214, 0.952324986, -0.133170962, 0.719459355, -0.295275778, -0.628641844)
Weld25.Part0 = Part1
Weld25.Part1 = Part71
Weld26.Parent = Part1
Weld26.C0 = CFrame.new(1.38624573, -1.61833596, 0.292377472, 0.961932003, -0.183506295, -0.202514857, 0.0896580145, 0.911919653, -0.400454909, 0.258163244, 0.3670533, 0.893657446)
Weld26.Part0 = Part1
Weld26.Part1 = Part72
Weld27.Parent = Part1
Weld27.C0 = CFrame.new(1.42259216, -1.83750343, -0.218975067, -0.941015422, -0.262778282, 0.213161215, 0.251712024, -0.12265233, 0.959998727, -0.226122111, 0.957028747, 0.18156217)
Weld27.Part0 = Part1
Weld27.Part1 = Part73
Weld28.Parent = Part1
Weld28.C0 = CFrame.new(0.294971466, -0.677574635, -0.0209999084, 0.895324886, 0.439857781, 0.0701317862, -0.288690984, 0.453155041, 0.843390882, 0.339191377, -0.77535522, 0.532703936)
Weld28.Part0 = Part1
Weld28.Part1 = Part74
Weld29.Parent = Part1
Weld29.C0 = CFrame.new(0.702026367, -2.07932663, -0.817646027, -0.856759548, 0.475791931, 0.198960349, 0.34076798, 0.811865807, -0.474079281, -0.387092143, -0.338372618, -0.857708395)
Weld29.Part0 = Part1
Weld29.Part1 = Part75
Weld30.Parent = Part1
Weld30.C0 = CFrame.new(0.919578552, -1.68667173, -0.100826263, 0.39966175, 0.112673454, 0.909711659, 0.418754339, 0.860369503, -0.290532619, -0.815423369, 0.497060448, 0.296674311)
Weld30.Part0 = Part1
Weld30.Part1 = Part76
Weld31.Parent = Part1
Weld31.C0 = CFrame.new(1.03403854, -0.989437282, 0.101238251, 0.777184427, -0.318974048, -0.542438984, -0.107409902, -0.916601777, 0.385102987, -0.62003845, -0.241032749, -0.746629477)
Weld31.Part0 = Part1
Weld31.Part1 = Part77
Weld32.Parent = Part1
Weld32.C0 = CFrame.new(0.460496902, -1.56527185, 1.4454422, -0.856759548, 0.475791931, 0.198960349, 0.34076798, 0.811865807, -0.474079281, -0.387092143, -0.338372618, -0.857708395)
Weld32.Part0 = Part1
Weld32.Part1 = Part78
Weld33.Parent = Part1
Weld33.C0 = CFrame.new(-0.0112285614, -1.33154798, 1.92947769, -0.606387377, 0.248504475, 0.755340934, 0.494581729, 0.861680388, 0.113560215, -0.622642219, 0.442439288, -0.64541775)
Weld33.Part0 = Part1
Weld33.Part1 = Part79
Weld34.Parent = Part1
Weld34.C0 = CFrame.new(-0.54467392, 0.110955119, 1.1791153, 0.319102317, 0.890571415, -0.324123949, 0.208137766, -0.399509072, -0.89278847, -0.924582303, 0.217428446, -0.312845767)
Weld34.Part0 = Part1
Weld34.Part1 = Part80
Weld35.Parent = Part1
Weld35.C0 = CFrame.new(-0.636602402, -0.915021777, 1.11136246, -0.00308411149, 0.991187274, -0.13243261, -0.458722949, -0.11907959, -0.880564213, -0.888574004, 0.0580341145, 0.455047548)
Weld35.Part0 = Part1
Weld35.Part1 = Part81
Weld36.Parent = Part1
Weld36.C0 = CFrame.new(-0.196508408, -2.48332548, -1.48538208, 0.961932003, -0.183506295, -0.202514857, 0.0896580145, 0.911919653, -0.400454909, 0.258163244, 0.3670533, 0.893657446)
Weld36.Part0 = Part1
Weld36.Part1 = Part82
Weld37.Parent = Part1
Weld37.C0 = CFrame.new(-1.12225914, -2.43025804, -0.332328796, -0.856759548, 0.475791931, 0.198960349, 0.34076798, 0.811865807, -0.474079281, -0.387092143, -0.338372618, -0.857708395)
Weld37.Part0 = Part1
Weld37.Part1 = Part83
Weld38.Parent = Part1
Weld38.C0 = CFrame.new(-1.18181229, -2.4240036, 0.13848114, 0.999867141, -0.0115958629, -0.0114646284, 0.0134438463, 0.18830739, 0.982018232, -0.00922847353, -0.982041717, 0.188438252)
Weld38.Part0 = Part1
Weld38.Part1 = Part84
Weld39.Parent = Part1
Weld39.C0 = CFrame.new(-0.160154343, -2.70248795, -1.19675064, -0.941015422, -0.262778282, 0.213161215, 0.251712024, -0.12265233, 0.959998727, -0.226122111, 0.957028747, 0.18156217)
Weld39.Part0 = Part1
Weld39.Part1 = Part85
Weld40.Parent = Part1
Weld40.C0 = CFrame.new(0.253322601, -0.231796265, -0.468158722, -0.902625918, -0.248075932, -0.351745516, -0.429858297, 0.561501384, 0.707063019, 0.0221002605, 0.789414108, -0.613463163)
Weld40.Part0 = Part1
Weld40.Part1 = Part86
Weld41.Parent = Part1
Weld41.C0 = CFrame.new(0.330251694, -2.21206284, -1.47322845, 0.183451474, -0.26985538, -0.945263803, 0.737415552, 0.673645139, -0.0491998233, 0.65004921, -0.688026428, 0.322576761)
Weld41.Part0 = Part1
Weld41.Part1 = Part87
Weld42.Parent = Part1
Weld42.C0 = CFrame.new(0.520959854, -1.31156647, -0.548030853, -0.157534987, -0.974547744, -0.159497529, -0.739786625, 0.223455191, -0.634652317, 0.654139578, 0.0180141963, -0.756159365)
Weld42.Part0 = Part1
Weld42.Part1 = Part88
Weld43.Parent = Part1
Weld43.C0 = CFrame.new(-0.619382858, -2.02973127, 0.124168396, -0.637993515, 0.0767424107, -0.766208112, 0.274486214, 0.952324986, -0.133170962, 0.719459355, -0.295275778, -0.628641844)
Weld43.Part0 = Part1
Weld43.Part1 = Part89
Weld44.Parent = Part1
Weld44.C0 = CFrame.new(-0.588409424, -1.3924396, 0.176280975, -0.946040094, 0.305283636, 0.108674251, -0.197276771, -0.808637738, 0.554244459, 0.25707984, 0.502898574, 0.825229108)
Weld44.Part0 = Part1
Weld44.Part1 = Part90
Weld45.Parent = Part1
Weld45.C0 = CFrame.new(0.196855545, -1.30309427, -0.783992767, -0.0123990364, 0.803554535, 0.595102072, -0.855896473, 0.299185395, -0.421816826, -0.516998649, -0.514575839, 0.684049785)
Weld45.Part0 = Part1
Weld45.Part1 = Part91
Weld46.Parent = Part1
Weld46.C0 = CFrame.new(-1.28778267, -1.54257441, 0.301223755, 0.895325422, 0.439858109, 0.0701317266, -0.28869167, 0.45315209, 0.843389571, 0.339192688, -0.775350988, 0.532702327)
Weld46.Part0 = Part1
Weld46.Part1 = Part92
Weld47.Parent = Part1
Weld47.C0 = CFrame.new(-0.663171768, -2.55169177, -1.87859726, 0.399660617, 0.112673447, 0.909712136, 0.418754548, 0.860369623, -0.290532023, -0.815423906, 0.497060299, 0.296673298)
Weld47.Part0 = Part1
Weld47.Part1 = Part93
Weld48.Parent = Part1
Weld48.C0 = CFrame.new(-0.548706055, -1.85446632, -0.876541138, 0.777180314, -0.318972021, -0.542446673, -0.107407324, -0.916601241, 0.385100871, -0.620041311, -0.241031379, -0.746623755)
Weld48.Part0 = Part1
Weld48.Part1 = Part94
Part49.Parent = Model0
Part49.Size = Vector3.new(1.979520320892334, 1.1499688625335693, 0.9416950345039368)
Part49.BrickColor = BrickColor.new(""Dark stone grey"")
Part49.Material = Enum.Material.Limestone
Part50.Parent = Model0
Part50.Size = Vector3.new(1.367323398590088, 0.9008519649505615, 1.740330696105957)
Part50.BrickColor = BrickColor.new(""Dark stone grey"")
Part50.Material = Enum.Material.Limestone
Part51.Parent = Model0
Part51.Size = Vector3.new(0.9675408005714417, 1.621850609779358, 1.3660805225372314)
Part51.BrickColor = BrickColor.new(""Dark stone grey"")
Part51.Material = Enum.Material.Limestone
Part52.Parent = Model0
Part52.Size = Vector3.new(1.3825271129608154, 1.994309425354004, 0.7774818539619446)
Part52.BrickColor = BrickColor.new(""Dark stone grey"")
Part52.Material = Enum.Material.Limestone
Part53.Parent = Model0
Part53.Size = Vector3.new(1.2786664962768555, 0.8663254380226135, 1.9351648092269897)
Part53.BrickColor = BrickColor.new(""Dark stone grey"")
Part53.Material = Enum.Material.Limestone
Part54.Parent = Model0
Part54.Size = Vector3.new(0.9675408005714417, 1.621850609779358, 1.3660808801651)
Part54.BrickColor = BrickColor.new(""Dark stone grey"")
Part54.Material = Enum.Material.Limestone
Part55.Parent = Model0
Part55.Size = Vector3.new(0.790423572063446, 1.465881586074829, 1.8501102924346924)
Part55.BrickColor = BrickColor.new(""Dark stone grey"")
Part55.Material = Enum.Material.Limestone
Part56.Parent = Model0
Part56.Size = Vector3.new(1.6456003189086914, 1.1885193586349487, 1.0960382223129272)
Part56.BrickColor = BrickColor.new(""Dark stone grey"")
Part56.Material = Enum.Material.Limestone
Part57.Parent = Model0
Part57.Size = Vector3.new(0.9281229376792908, 1.8953975439071655, 1.218570351600647)
Part57.BrickColor = BrickColor.new(""Dark stone grey"")
Part57.Material = Enum.Material.Limestone
Part58.Parent = Model0
Part58.Size = Vector3.new(1.8447951078414917, 1.0458903312683105, 1.111020565032959)
Part58.BrickColor = BrickColor.new(""Dark stone grey"")
Part58.Material = Enum.Material.Limestone
Part59.Parent = Model0
Part59.Size = Vector3.new(1.1795203685760498, 0.9499688744544983, 0.9416950345039368)
Part59.BrickColor = BrickColor.new(""Dark stone grey"")
Part59.Material = Enum.Material.Limestone
Part60.Parent = Model0
Part60.Size = Vector3.new(0.9767622947692871, 1.2436875104904175, 1.7646404504776)
Part60.BrickColor = BrickColor.new(""Dark stone grey"")
Part60.Material = Enum.Material.Limestone
Part61.Parent = Model0
Part61.Size = Vector3.new(1.8447951078414917, 1.0458903312683105, 1.111020565032959)
Part61.BrickColor = BrickColor.new(""Dark stone grey"")
Part61.Material = Enum.Material.Limestone
Part62.Parent = Model0
Part62.Size = Vector3.new(0.9281229376792908, 1.8953975439071655, 1.218570351600647)
Part62.BrickColor = BrickColor.new(""Dark stone grey"")
Part62.Material = Enum.Material.Limestone
Part63.Parent = Model0
Part63.Size = Vector3.new(1.2786664962768555, 0.8663254380226135, 1.9351648092269897)
Part63.BrickColor = BrickColor.new(""Dark stone grey"")
Part63.Material = Enum.Material.Limestone
Part64.Parent = Model0
Part64.Size = Vector3.new(1.367323398590088, 0.9008519649505615, 1.740330696105957)
Part64.BrickColor = BrickColor.new(""Dark stone grey"")
Part64.Material = Enum.Material.Limestone
Part65.Parent = Model0
Part65.Size = Vector3.new(1.979520320892334, 1.1499688625335693, 0.9416950345039368)
Part65.BrickColor = BrickColor.new(""Dark stone grey"")
Part65.Material = Enum.Material.Limestone
Part66.Parent = Model0
Part66.Size = Vector3.new(1.979520320892334, 1.1499688625335693, 0.9416951537132263)
Part66.BrickColor = BrickColor.new(""Dark stone grey"")
Part66.Material = Enum.Material.Limestone
Part67.Parent = Model0
Part67.Size = Vector3.new(1.6456003189086914, 1.1885193586349487, 1.0960382223129272)
Part67.BrickColor = BrickColor.new(""Dark stone grey"")
Part67.Material = Enum.Material.Limestone
Part68.Parent = Model0
Part68.Size = Vector3.new(1.060845971107483, 1.743768334388733, 1.158818244934082)
Part68.BrickColor = BrickColor.new(""Dark stone grey"")
Part68.Material = Enum.Material.Limestone
Part69.Parent = Model0
Part69.Size = Vector3.new(0.9675408005714417, 1.621850609779358, 1.3660805225372314)
Part69.BrickColor = BrickColor.new(""Dark stone grey"")
Part69.Material = Enum.Material.Limestone
Part70.Parent = Model0
Part70.Size = Vector3.new(0.8989728093147278, 1.4070851802825928, 1.6946868896484375)
Part70.BrickColor = BrickColor.new(""Dark stone grey"")
Part70.Material = Enum.Material.Limestone
Part71.Parent = Model0
Part71.Size = Vector3.new(1.540067195892334, 1.3940503597259521, 0.9984775185585022)
Part71.BrickColor = BrickColor.new(""Dark stone grey"")
Part71.Material = Enum.Material.Limestone
Part72.Parent = Model0
Part72.Size = Vector3.new(0.9675408005714417, 1.621850609779358, 1.3660805225372314)
Part72.BrickColor = BrickColor.new(""Dark stone grey"")
Part72.Material = Enum.Material.Limestone
Part73.Parent = Model0
Part73.Size = Vector3.new(0.7904235124588013, 1.46588134765625, 1.8501102924346924)
Part73.BrickColor = BrickColor.new(""Dark stone grey"")
Part73.Material = Enum.Material.Limestone
Part74.Parent = Model0
Part74.Size = Vector3.new(0.7760546207427979, 1.3811285495758057, 2)
Part74.BrickColor = BrickColor.new(""Dark stone grey"")
Part74.Material = Enum.Material.Limestone
Part75.Parent = Model0
Part75.Size = Vector3.new(0.7820842266082764, 1.5748226642608643, 1.7404885292053223)
Part75.BrickColor = BrickColor.new(""Dark stone grey"")
Part75.Material = Enum.Material.Limestone
Part76.Parent = Model0
Part76.Size = Vector3.new(1.3825271129608154, 1.994309425354004, 0.777481734752655)
Part76.BrickColor = BrickColor.new(""Dark stone grey"")
Part76.Material = Enum.Material.Limestone
Part77.Parent = Model0
Part77.Size = Vector3.new(1.1843007802963257, 1.8191449642181396, 0.9950092434883118)
Part77.BrickColor = BrickColor.new(""Dark stone grey"")
Part77.Material = Enum.Material.Limestone
Part78.Parent = Model0
Part78.Size = Vector3.new(0.7820842266082764, 1.5748226642608643, 1.7404885292053223)
Part78.BrickColor = BrickColor.new(""Dark stone grey"")
Part78.Material = Enum.Material.Limestone
Part79.Parent = Model0
Part79.Size = Vector3.new(0.9281229376792908, 1.8953975439071655, 1.218570351600647)
Part79.BrickColor = BrickColor.new(""Dark stone grey"")
Part79.Material = Enum.Material.Limestone
Part80.Parent = Model0
Part80.Size = Vector3.new(1.1795203685760498, 0.9499688744544983, 0.9416950345039368)
Part80.BrickColor = BrickColor.new(""Dark stone grey"")
Part80.Material = Enum.Material.Limestone
Part81.Parent = Model0
Part81.Size = Vector3.new(1.6790493726730347, 0.8663254976272583, 1.473709225654602)
Part81.BrickColor = BrickColor.new(""Dark stone grey"")
Part81.Material = Enum.Material.Limestone
Part82.Parent = Model0
Part82.Size = Vector3.new(0.9675408005714417, 1.621850609779358, 1.3660805225372314)
Part82.BrickColor = BrickColor.new(""Dark stone grey"")
Part82.Material = Enum.Material.Limestone
Part83.Parent = Model0
Part83.Size = Vector3.new(0.7820842266082764, 1.5748226642608643, 1.7404885292053223)
Part83.BrickColor = BrickColor.new(""Dark stone grey"")
Part83.Material = Enum.Material.Limestone
Part84.Parent = Model0
Part84.Size = Vector3.new(0.8989728093147278, 1.4070851802825928, 1.6946868896484375)
Part84.BrickColor = BrickColor.new(""Dark stone grey"")
Part84.Material = Enum.Material.Limestone
Part85.Parent = Model0
Part85.Size = Vector3.new(0.7904235124588013, 1.46588134765625, 1.8501102924346924)
Part85.BrickColor = BrickColor.new(""Dark stone grey"")
Part85.Material = Enum.Material.Limestone
Part86.Parent = Model0
Part86.Size = Vector3.new(1.060845971107483, 1.743768334388733, 1.158818244934082)
Part86.BrickColor = BrickColor.new(""Dark stone grey"")
Part86.Material = Enum.Material.Limestone
Part87.Parent = Model0
Part87.Size = Vector3.new(1.8447951078414917, 1.0458903312683105, 1.111020565032959)
Part87.BrickColor = BrickColor.new(""Dark stone grey"")
Part87.Material = Enum.Material.Limestone
Part88.Parent = Model0
Part88.Size = Vector3.new(1.367323398590088, 0.9008519649505615, 1.740330696105957)
Part88.BrickColor = BrickColor.new(""Dark stone grey"")
Part88.Material = Enum.Material.Limestone
Part89.Parent = Model0
Part89.Size = Vector3.new(1.540067195892334, 1.3940503597259521, 0.9984775185585022)
Part89.BrickColor = BrickColor.new(""Dark stone grey"")
Part89.Material = Enum.Material.Limestone
Part90.Parent = Model0
Part90.Size = Vector3.new(1.1322135925292969, 1.117563247680664, 1.6941659450531006)
Part90.BrickColor = BrickColor.new(""Dark stone grey"")
Part90.Material = Enum.Material.Limestone
Part91.Parent = Model0
Part91.Size = Vector3.new(1.979520320892334, 1.1499688625335693, 0.9416950345039368)
Part91.BrickColor = BrickColor.new(""Dark stone grey"")
Part91.Material = Enum.Material.Limestone
Part92.Parent = Model0
Part92.Size = Vector3.new(0.7760546207427979, 1.3811285495758057, 2)
Part92.BrickColor = BrickColor.new(""Dark stone grey"")
Part92.Material = Enum.Material.Limestone
Part93.Parent = Model0
Part93.Size = Vector3.new(1.3825271129608154, 1.994309425354004, 0.777481734752655)
Part93.BrickColor = BrickColor.new(""Dark stone grey"")
Part93.Material = Enum.Material.Limestone
Part94.Parent = Model0
Part94.Size = Vector3.new(1.1843007802963257, 1.8191449642181396, 0.9950092434883118)
Part94.BrickColor = BrickColor.new(""Dark stone grey"")
Part94.Material = Enum.Material.Limestone
Part95.Name = ""Handle""
Part95.Parent = mas
Part95.Size = Vector3.new(1, 5, 1)
Part95.Anchored = true
Part95.BrickColor = BrickColor.new(""Teal"")
Part95.CanCollide = false
Part95.Material = Enum.Material.Neon
SpecialMesh96.Name = ""SpecialMesh""
SpecialMesh96.Parent = Part95
SpecialMesh96.MeshId = ""rbxassetid://15722277995""
SpecialMesh96.TextureId = ""rbxassetid://14606728204""
SpecialMesh96.MeshType = Enum.MeshType.FileMesh
Decal97.Parent = Part95
Decal97.Texture = ""http://www.roblox.com/asset/?id=300461098""
for i,v in pairs(mas:GetChildren()) do
	v.Parent = workspace
end
task.wait()
for i, v in pairs(Model0:GetDescendants()) do
	if v:IsA(""Weld"") then
		v.Part1.Anchored = true
		v.Part1.CanTouch = false
		v.Part1.CanQuery = false
		v:Destroy()
	end
end
Part1.CanTouch = false
Part1.CanQuery = false
Part95.Parent = Model0
Part95.CFrame = CFrame.new(-0.4380003809928894, 2.229079484939575, 13.417558670043945, -1.2366893997750594e-07, 3.534880832489762e-08, -1.0000004768371582, -0.40434369444847107, -0.9146074652671814, 1.7674420149660364e-08, -0.9146074652671814, 0.40434321761131287, 1.2740159149871033e-07)
mas:Destroy()

local swordpull = {
	[1] = {
		[""Torso""] = {
			[""Left Leg""] = CFrame.new(-0.91,-0.12,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(43.58)),
			[""Right Arm""] = CFrame.new(0.62,-0.13,-0.1) * CFrame.Angles(math.rad(-8.08),math.rad(29.11),math.rad(92.47)),
			[""Head""] = CFrame.Angles(math.rad(16.21),math.rad(-0.25),math.rad(-12.96)),
			[""Left Arm""] = CFrame.new(-0.74,-0.37,-0.48) * CFrame.Angles(math.rad(-25),math.rad(-50.04),math.rad(-112.88)),
			[""Right Leg""] = CFrame.new(0.44,0.03,0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-24.59)),
			[""SwordWeld""] = CFrame.new(0.35, -2, -2) * CFrame.Angles(0,math.pi/2,math.rad(177.5)),
			[""CFrame""] = CFrame.new(0,-0.94,0.53) * CFrame.Angles(math.rad(-49.74),math.rad(0),math.rad(0))
		},
	},
	[2] = {
		[""Torso""] = {
			[""Left Leg""] = CFrame.new(0.16,0.26,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(19.52)),
			[""Right Arm""] = CFrame.new(0.24,-0.22,-0.25) * CFrame.Angles(math.rad(-8.08),math.rad(29.11),math.rad(92.47)),
			[""Head""] = CFrame.Angles(math.rad(-9.98),math.rad(5.58),math.rad(-11.72)),
			[""Left Arm""] = CFrame.new(-0.36,-0.46,-0.34) * CFrame.Angles(math.rad(-24.99),math.rad(-50.04),math.rad(-112.88)),
			[""Right Leg""] = CFrame.new(0.22,0.13,0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-24.59)),
			[""SwordWeld""] = CFrame.new(0.35, -2, -1) * CFrame.Angles(0,math.pi/2,math.rad(160.5)),
			[""CFrame""] = CFrame.new(0,-0.94,0.53) * CFrame.Angles(math.rad(-77.08),math.rad(0),math.rad(0))
		},
	},
	[3] = {
		[""Torso""] = {
			[""Left Leg""] = CFrame.new(0.16,0.26,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(19.52)),
			[""Right Arm""] = CFrame.new(0.24,-0.22,-0.25) * CFrame.Angles(math.rad(-8.08),math.rad(29.11),math.rad(92.47)),
			[""Head""] = CFrame.Angles(math.rad(-9.98),math.rad(5.58),math.rad(-11.72)),
			[""Left Arm""] = CFrame.new(-0.36,-0.46,-0.34) * CFrame.Angles(math.rad(-24.99),math.rad(-50.04),math.rad(-112.88)),
			[""Right Leg""] = CFrame.new(0.22,0.13,0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-24.59)),
			[""SwordWeld""] = CFrame.new(0.35, -2, -1) * CFrame.Angles(0,math.pi/2,math.rad(160.5)),
			[""CFrame""] = CFrame.new(0,-0.94,0.53) * CFrame.Angles(math.rad(-77.08),math.rad(0),math.rad(0))
		},
	},
	[0] = {
		[""Torso""] = {
			[""Left Leg""] = CFrame.new(-0.91,-0.12,0) * CFrame.Angles(math.rad(0),math.rad(0),math.rad(43.58)),
			[""Right Arm""] = CFrame.new(0.46,0.17,-0.04) * CFrame.Angles(math.rad(-17.25),math.rad(34.21),math.rad(108.85)),
			[""Head""] = CFrame.Angles(math.rad(1.81),math.rad(-0.19),math.rad(-0.27)),
			[""Left Arm""] = CFrame.new(-0.52,0.24,-0.44) * CFrame.Angles(math.rad(-28.08),math.rad(-48.56),math.rad(-111.6)),
			[""Right Leg""] = CFrame.new(0.44,0.03,0) * CFrame.Angles(math.rad(0),math.rad(-0),math.rad(-24.59)),
			[""SwordWeld""] = CFrame.new(0.35,-1,-2) * CFrame.Angles(0,math.pi/2,math.pi),
			[""CFrame""] = CFrame.new(0,-0.94,0.53) * CFrame.Angles(math.rad(-23.85),math.rad(0),math.rad(0))
		},
	}
}
--local t = os.clock()
local curranimation = -1

local character = owner.Character
local hrp = character.HumanoidRootPart

local function weld(name,parent,part0,part1,c0,c1)
	local weld = Instance.new(""Weld"")
	weld.Name = name
	weld.Part0 = part0
	weld.Part1 = part1
	weld.C0 = c0
	weld.C1 = c1
	weld.Parent = parent
	return weld
end

local welds = {}
local weldspos = {}

for i, v in pairs(character:GetDescendants()) do
	if v:IsA(""Motor6D"") then
		welds[v.Part1.Name] = weld(v.Name,v.Parent,v.Part0,v.Part1,v.C0,v.C1)
		weldspos[v.Part1.Name] = welds[v.Part1.Name].C0
	end
end

welds[""SwordWeld""] = weld(""SwordWeld"",game:GetService(""Lighting""),character.Torso,Part95,CFrame.new(0.35,-1,-2) * CFrame.Angles(0,math.pi/2,math.pi),CFrame.new())
weldspos[""SwordWeld""] = CFrame.new()
welds[""SwordWeld""].Parent = Part95

game:GetService(""RunService"").Heartbeat:Connect(function(delta)
	--t += (delta * 60)
	
	if curranimation == -1 then
		for i, v in pairs(welds) do
			v.Enabled = false
			v.C0 = weldspos[i]
		end
	else
		for i, v in pairs(swordpull[curranimation].Torso) do
			if welds[i] then
				welds[i].Enabled = true
				if curranimation == 0 then
					welds[i].C0 = weldspos[i] * v
					continue
				end
				welds[i].C0 = welds[i].C0:Lerp(weldspos[i] * v,.2)
			elseif i == ""CFrame"" then
				welds[""Torso""].Enabled = true
				if curranimation == 0 then
					welds[""Torso""].C0 = weldspos[""Torso""] * v
					continue
				end
				welds[""Torso""].C0 = welds[""Torso""].C0:Lerp(weldspos[""Torso""] * v,.2)
			end
		end
	end
end)

local proximity = Instance.new(""ProximityPrompt"",Part95)

proximity.Triggered:Connect(function(plr)
	if plr ~= owner then
		if plr.Character:FindFirstChildOfClass(""Humanoid"") and plr.Character:FindFirstChildOfClass(""Humanoid"").Health <= 0 then return end
		plr.Character:BreakJoints()
		for i, v in pairs(plr.Character:GetDescendants()) do
			if v:IsA(""BasePart"") then
				v.CanCollide = true
				v.Material = Enum.Material.Limestone
				v.BrickColor = BrickColor.new(""Medium stone grey"")
			end
			if v:IsA(""Clothing"") then
				v:Destroy()
			end
			if v:IsA(""Humanoid"") then
				v:Destroy()
			end
		end
		task.delay(game.Players.RespawnTime,function()
			plr:LoadCharacter()
		end)
		return
	end
	proximity.Enabled = false
	hrp.Anchored = true
	local spawnfunc = task.spawn(function()
		while hrp.CFrame ~= Part1.CFrame * CFrame.new(0,0,5.5) do
			print(""running"")
			hrp.CFrame = hrp.CFrame:Lerp(Part1.CFrame * CFrame.new(0,0,5.5),.05)
			game:GetService(""RunService"").Heartbeat:Wait()
		end
	end)
	Part95.Anchored = false
	curranimation = 0
	while task.wait(1) do
		if swordpull[curranimation + 1] then
			curranimation += 1
		else
			break
		end
	end
end)"
xvveWr0e,Ostwind.V.Deu.1080p.h264.dts.Subs-bp,bpmircea,BrainFuck,Sunday 24th of December 2023 03:54:59 AM CDT,"Ostwind - Der große Orkan (Windstorm: The Great Hurricane) (Lea Schmidbauer, 2021)
aka
Ostwind.V.Deu.1080p.h264.dts.Subs-bp
https://www.imdb.com/title/tt11560730/

Uploading..."
AXe5i1M2,Untitled,antitoxical,C++,Sunday 24th of December 2023 03:53:13 AM CDT,"void Asteroid::AddNew_Asteroid(sf::Vector2f scale, sf::Vector2f asteroid_pos, int levelprev, float angle_prev)
{
	asteroid = asteroid;
	level = levelprev;

	if (level >= 0)
	{
		std::cout << level << std::endl;
	}

	if (level <= 0)
	{
		is_alive = false;
		return;
	}
	std::cout << ""level: "" << level << std::endl;

	//set scale
	scale.x = scale.x;
	scale.y = scale.y;
	asteroid.setScale(scale);


	//set position
	asteroid.setPosition(asteroid_pos);
	std::cout << ""x: "" << asteroid_pos.x << "" "" << ""y: "" << asteroid_pos.y << std::endl;

	//set direction
	angle = rand() % 360;
	if (angle >= angle_prev - 10 || angle <= angle_prev + 10)
		angle = rand() % 360;

	std::cout << ""angle:"" << angle << std::endl;

	direction.x = -cos(m_math->Deg2Rad(angle));
	direction.y = sin(m_math->Deg2Rad(angle));
}"
BEfi4PKx,G2A.com Refund Exploit Dec 2023,G2ARefundExploit,GetText,Sunday 24th of December 2023 03:53:07 AM CDT,"G2A refund exploit updated guide - any item for free on G2A.com

https://drive.google.com/file/d/1AKxSk9vs38aBF7GEDJxf8mNi-_NVRLQ9/view#g2a_refund_exploit.pdf

Working as of 
22 December 2023

813887"
YvHqUFih,MemberPress Courses,nakib4tech,HTML,Sunday 24th of December 2023 03:45:16 AM CDT,"<style>
body {
font-family: -apple-system,system-ui,BlinkMacSystemFont,""Segoe UI"",Roboto,""Helvetica Neue"",sans-serif !important;
font-size: .8rem !important;
}
#mpcs-main {
margin-left: unset !important;
margin-right: auto;
}
h1.entry-title {
margin-bottom: 1em;
}
#mpcs-main #bookmark a {
margin-left: .5em;
margin-right: 0 !important;
padding-right: 0.5rem !important;
padding-left: 0 !important;
}
.mpcs-sidebar-wrapper .mpcs-lesson i.mpcs-doc-text-inv {
margin-left: 3px;
margin-right: 0 !important;
}
.mpcs-sidebar-wrapper .mpcs-lesson .mpcs-lesson-link {
margin-left: 0 !important;
margin-right: 6px;
}
#mpcs-main a.btn.btn-green {
    color: white;
}
.mpcs-sidebar-wrapper h1 {
font-family: -apple-system,BlinkMacSystemFont,""Segoe UI"",Roboto,Helvetica,Arial,sans-serif,""Apple Color Emoji"",""Segoe UI Emoji"",""Segoe UI Symbol"";
}
#mpcs-main h1,h2 {
font-family: -apple-system,BlinkMacSystemFont,""Segoe UI"",Roboto,Helvetica,Arial,sans-serif,""Apple Color Emoji"",""Segoe UI Emoji"",""Segoe UI Symbol"" !important;
}
#mpcs-sidebar .mpcs-sidebar-menu a.is-active {
border-right: 5px solid #2b3637;
border-left: none !important;
}
.mpcs-lesson .btn {
line-height: 0.8rem !important;
}
.mpcs-lesson .mpcs-lesson-button {
margin-right: auto;
margin-left: 0 !important;
}
@media (max-width: 600px) {
#mpcs-sidebar {
left: unset !important;
	right: 0;
}
}
.mpcs-lesson .mpcs-lesson-link {
    margin-left: 5px !important;
    margin-right: 8px;
}
.mpcs-right-big:before, .mpcs-left-big:before {
    transform: rotate(
180deg);
}
.mpcs-angle-circled-left:before {
    transform: rotate(
180deg);
}
.mpcs-angle-right:before {
transform: rotate(
180deg);
}
.mpcs-sidebar-with-accordion #mpcs-sidebar .mpcs-section-header:after {
left: 20px;
right: unset !important;
}
.dropdown.dropdown-right .menu {
left: 0 !important;
right: auto !important;
}
</style>"
SCBqgiTf,Ostwind.IV.Deu.1080p.h264.dts.Subs-bp,bpmircea,BrainFuck,Sunday 24th of December 2023 03:44:53 AM CDT,"Ostwind - Aris Ankunft (Windstorm 4: Ari's Arrival) (Theresa von Eltz, 2019)
aka
Ostwind.IV.Deu.1080p.h264.dts.Subs-bp
https://www.imdb.com/title/tt9182284/

Uploading..."
WCLZeAvJ,MemberPress Forms RTL,nakib4tech,HTML,Sunday 24th of December 2023 03:43:07 AM CDT,"<style>
.mepr-account-container #mepr-account-nav {
background: #344499 !important;
}
.mp_wrapper form {
margin-bottom: 0;
}
.mp-form-label {
line-height: 2.6;
}
.mp_wrapper form {
    text-align: right;
}
#mepr-account-nav .mepr-nav-item a:before {
margin-right: unset !important;
margin-left:10px;
}
.mp_wrapper table.mepr-account-table td {
font-size: 15px;
}
@media screen and (min-width: 840px){
#mepr-account-nav .mepr-nav-item a {
justify-content: right !important;
}
}
table.mp-table th {
    text-align: right;
}
table.mp-table {
    margin-bottom: 0;
}
.mp_wrapper table.mepr-account-table td {
    text-align: center;
}
.mp_wrapper table.mepr-account-table td:before {
    float: right;
}
.button.mp-hide-pw {
left: 0;
right:unset !important;
}
@media screen and (min-width: 915px){
.mepr-profile-wrapper__footer>*+* {
margin-left: unset !important;
margin-right: 10px;
}
}
</style>"
bjUAXFbV,Ostwind.III.Deu.1080p.h264.dts.Subs-bp,bpmircea,BrainFuck,Sunday 24th of December 2023 03:29:47 AM CDT,"Ostwind 3 - Aufbruch nach Ora (Windstorm and the Wild Horses) (Katja von Garnier, 2017)
aka
Ostwind.III.Deu.1080p.h264.dts.Subs-bp
https://www.imdb.com/title/tt5311972/

Uploading..."
