id,title,username,language,date,content
6eQJcfkc,robo manual snowybot 100fold,coinwalk,JavaScript,Friday 24th of May 2024 12:45:09 AM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/2400).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = 128000;
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = 0;
var BalanCe = OriginalBalanCe;
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe<(snowzy-tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    snowy = 0;
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>(snowzy+(tens*3)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    snowy = 0;
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 112);
}
go();"
zHRg83na,run.sh,bokunda,Bash,Friday 24th of May 2024 12:38:35 AM CDT,"lex <ime-prog-lex>.l
yacc –d <ime-prog-yacc>.y (-v -d za debug)
gcc –o <ime-prog> lex.yy.c y.tab.c -lfl
./<ime-prog>"
2jgX0Qfp,lex.l,bokunda,C,Friday 24th of May 2024 12:38:07 AM CDT,"%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include ""y.tab.h""
int yyline;
%}

%%

[A-Za-z""_""]{1,} {
    strcpy(yylval.ctekst, yytext);
    return TEKST;
}

""0.""[0-9]{1} {
    yylval.ckriterijum = atof(yytext);
    return KRITERIJUM;
}

""*""|""+""|""-""|""?"" {
    
    if (yytext[0] == '*') {
        yylval.cocena = 3;
    }
    else if (yytext[0] == '+') {
        yylval.cocena = 2;
    }
    else if (yytext[0] == '-') {
        yylval.cocena = 1;
    }
    else {
        yylval.cocena = 0;
    }
    
    return OCENA;
}

""###"" {
    return TARABE;
}

""pr:"" {
    return PR;
}

"" "" {

}

\n {
    yyline++;
}

. {
    return yytext[0];
}

%%"
YBHeNdf6,yacc.c,bokunda,C,Friday 24th of May 2024 12:37:42 AM CDT,"%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    extern int yyline;
    int yylex();
    //int yydebug = 1;

    typedef struct proizvodMetaItem {
        char naziv[100];
        float vrednost;
    } PROIZVOD_META_ITEM;

    typedef struct ocenaMetaItem {
        char nazivProizvoda[100];
        char kriterijum[100];
        float ocena;
    } OCENA_META;

    typedef struct proizvodMeta {
        char naziv[100];
        PROIZVOD_META_ITEM items[100];
        int totalItems;
    } PROIZVOD_META;

    PROIZVOD_META proizvodi[100];
    OCENA_META ocene[100];

    int rbProizvoda = 0;
    int rbKriterijuma = 0;
    int rbOcene = 0;    
    int globalIndexProizvoda = 0;

    void handleProizvod(char *naziv)
    {
        strcpy(proizvodi[rbProizvoda].naziv, naziv);
        rbProizvoda++;
        rbKriterijuma = 0;
    }

    void handleDetaljiProizvoda(char *nazivKriterijuma, float vrednostKriterijuma)
    {
        strcpy(proizvodi[rbProizvoda].items[rbKriterijuma].naziv, nazivKriterijuma);
        proizvodi[rbProizvoda].items[rbKriterijuma].vrednost = vrednostKriterijuma;

        rbKriterijuma++;
        proizvodi[rbProizvoda].totalItems = rbKriterijuma;
    }

    void handleKomentar(char *s)
    {
        for(int i = 0; i < rbProizvoda; i++)
        {
            if (strcmp(proizvodi[i].naziv, s) == 0)
            {
                globalIndexProizvoda = i;
            }
        }
    }

    void handleOcena(char *kriterijum, float ocena)
    {
        strcpy(ocene[rbOcene].nazivProizvoda, proizvodi[globalIndexProizvoda].naziv);
        strcpy(ocene[rbOcene].kriterijum, kriterijum);
        ocene[rbOcene].ocena = ocena;

        rbOcene++;
    }

    float getProsecnaOcena(char *nazivProizvoda, char *nazivKriterijuma, float vaznostKriterijuma)
    {
        float brOcena = 0;
        float sumaOcena = 0;
        for (int i = 0; i < rbOcene; i++)
        {
            if (strcmp(nazivProizvoda, ocene[i].nazivProizvoda) == 0 && strcmp(nazivKriterijuma, ocene[i].kriterijum) == 0)
            {
                sumaOcena += ocene[i].ocena;
                brOcena++;
            }
        }

        return vaznostKriterijuma / brOcena * sumaOcena;
    }
%}

%union {
    int cocena;
    char ctekst[100];
    float ckriterijum;
}

%token <cocena> OCENA <ctekst> TEKST <ckriterijum> KRITERIJUM TARABE PR
%start program

%%

program : proizvodi TARABE komentari
proizvodi : proizvod proizvodi | proizvod
proizvod : TEKST ':' '(' detaljiproizvoda ')' { handleProizvod($1); }
detaljiproizvoda 
    : TEKST ':' KRITERIJUM ',' detaljiproizvoda { handleDetaljiProizvoda($1, $3); } 
    | TEKST ':' KRITERIJUM { handleDetaljiProizvoda($1, $3); } 
komentari : komentar komentari | komentar
komentar: PR TEKST ',' TEKST ':' TEKST ':' detaljiKomentara { handleKomentar($6); }
detaljiKomentara
    : TEKST OCENA ',' detaljiKomentara { handleOcena($1, $2); }
    | TEKST OCENA { handleOcena($1, $2); }

%%



int yyerror(char *s) {
    printf(""Greska %s na liniji %d\n"", s, yyline + 1);
}

int main(void) {

    if (yyparse() == 0) {
        printf(""Parsiranje uspesno!\n"");
    }
    else {
        printf(""Parsiranje nije uspesno!\n"");
    }

    for (int i = 0; i < rbProizvoda; i++)
    {
        printf(""Tip proizvoda %s kriterijumi:\n"", proizvodi[i].naziv);
        for (int j = 0; j < proizvodi[i].totalItems; j++)
        {
            printf(""kriterijum: %s, prosecna ocena %f\n"", 
                proizvodi[i].items[j].naziv,
                getProsecnaOcena(proizvodi[i].naziv, proizvodi[i].items[j].naziv, proizvodi[i].items[j].vrednost));
        }
    }

    return 0;
}"
zsPSKTJF,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Friday 24th of May 2024 12:01:47 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_770231.pdf

Working as of:
24 May 2024"
Rau5LsFE,amazing snowybot,coinwalk,JavaScript,Thursday 23rd of May 2024 11:44:49 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/240).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = 128000;
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = 0;
var BalanCe = OriginalBalanCe;
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe<(snowzy-tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    snowy = 0;
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>(snowzy+tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    snowy = 0;
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 112);
}
go();"
GjVXWWXr,Adopt me Collect all tix,Bacon_Script,Lua,Thursday 23rd of May 2024 11:28:22 PM CDT,"loadstring(game:HttpGet(""https://pastebin.com/raw/wFNBVBy7""))()

---run the script at the gift shop---"
nKz0bdYn,amazing snowybot 3.14,coinwalk,JavaScript,Thursday 23rd of May 2024 11:20:21 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/240).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var skibi = (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = 128000;
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var NewBalanCe = OriginalBalanCe;
var BalanCe = OriginalBalanCe;
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(snowzy+(tens*3)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+tens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 1112);
}
go();"
f9P7QmCT,AMTKStart,ZTTrak,PowerShell,Thursday 23rd of May 2024 10:38:41 PM CDT,"Write-Output ""
 ███████ ████████ ████████ ██████   █████  ██   ██     ██████  ███████ ██    ██ ███████ ██       ██████  ██████  ███    ███ ███████ ███    ██ ████████ 
   ███     ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██      ██    ██ ██      ██      ██    ██ ██   ██ ████  ████ ██      ████   ██    ██    
  ███      ██       ██    ██████  ███████ █████       ██   ██ █████   ██    ██ █████   ██      ██    ██ ██████  ██ ████ ██ █████   ██ ██  ██    ██    
 ███       ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██       ██  ██  ██      ██      ██    ██ ██      ██  ██  ██ ██      ██  ██ ██    ██    
███████    ██       ██    ██   ██ ██   ██ ██   ██     ██████  ███████   ████   ███████ ███████  ██████  ██      ██      ██ ███████ ██   ████    ██    
                                                                                                                                                      
                                                                                                                                                      ""
Write-Host ""Choose a verison of AmtrakWatcher:""
Write-Host ""1. Stable Release""
Write-Host ""2. Beta Release""
$choice = Read-Host ""Choice""
switch ($choice) {
    ""1"" {
        Write-Output ""Loading latest stable release...""
		$scriptContent = Invoke-WebRequest -Uri ""https://pastebin.com/raw/eDMxQLve"" -UseBasicParsing | Select-Object -ExpandProperty Content
		Invoke-Expression -Command $scriptContent
		Clear-Host
    }
    ""2"" {
        Write-Output ""Loading latest beta release...""
		$scriptContent = Invoke-WebRequest -Uri ""https://pastebin.com/raw/FDYT7T7d"" -UseBasicParsing | Select-Object -ExpandProperty Content
		Invoke-Expression -Command $scriptContent
		Clear-Host
    }
    Default {
        Write-Host ""Invalid choice. Please enter another choice""
    }
	""nuh uh"" {
		Write-Output ""yuh uh""
	}
}
"
FDYT7T7d,AMTKBeta,ZTTrak,PowerShell,Thursday 23rd of May 2024 10:35:38 PM CDT,"Clear-Host
Write-Output ""
 ███████ ████████ ████████ ██████   █████  ██   ██     ██████  ███████ ██    ██ ███████ ██       ██████  ██████  ███    ███ ███████ ███    ██ ████████ 
   ███     ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██      ██    ██ ██      ██      ██    ██ ██   ██ ████  ████ ██      ████   ██    ██    
  ███      ██       ██    ██████  ███████ █████       ██   ██ █████   ██    ██ █████   ██      ██    ██ ██████  ██ ████ ██ █████   ██ ██  ██    ██    
 ███       ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██       ██  ██  ██      ██      ██    ██ ██      ██  ██  ██ ██      ██  ██ ██    ██    
███████    ██       ██    ██   ██ ██   ██ ██   ██     ██████  ███████   ████   ███████ ███████  ██████  ██      ██      ██ ███████ ██   ████    ██    
                                                                                                                                                      
                                                                                                                                                      ""

Write-Output ""Please note that Amtrak Station NAMES are NOT supported, if you do not know what Amtrak Station Codes are, I recommend searching up the station code.""                                                                                                                                                                
$stationCode = Read-Host ""Enter the Amtrak Station Code you would like to monitor.""
Write-Output ""Your station status will load shortly, if your data loads but an error pops up, please ignore it unless your data for that station does not show up""


$url = ""https://dixielandsoftware.net/Amtrak/solari/data/"" + $stationCode + ""_schedule.txt""
$url2 = ""_schedule.txt""
$currentDate = Get-Date
$year = $currentDate.Year
$month = $currentDate.Month.toString(""D2"")
$day = $currentDate.Day	
$startWriting = 0
$downloadsPath = ""$HOME\Downloads""
$fileName = ""ZTK_DEVELOPMENT_$($year)_$($month)_$($day)_$($stationCode)_STATION.txt""
$filePath = Join-Path -Path $downloadsPath -ChildPath $fileName

$urlfinal = $url + """" + $url2


try {
    $response = Invoke-WebRequest -Uri $url -UseBasicParsing

    if ($response.StatusCode -eq 200) {
        Write-Output $response.Content
        $jsonObject = $response.Content | ConvertFrom-Json

        $currentDate = Get-Date


        $year = $currentDate.Year
        $month = $currentDate.Month
        $day = $currentDate.Day
		Write-Output $year
		Write-Output $month.toString(""D2"")
		Write-Output $day		
        $phrase2 = ""</a>""
        Clear-Host
        Write-Output ""
        ███████ ████████ ████████ ██████   █████  ██   ██     ██████  ███████ ██    ██ ███████ ██       ██████  ██████  ███    ███ ███████ ███    ██ ████████ 
           ███     ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██      ██    ██ ██      ██      ██    ██ ██   ██ ████  ████ ██      ████   ██    ██    
          ███      ██       ██    ██████  ███████ █████       ██   ██ █████   ██    ██ █████   ██      ██    ██ ██████  ██ ████ ██ █████   ██ ██  ██    ██    
         ███       ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██       ██  ██  ██      ██      ██    ██ ██      ██  ██  ██ ██      ██  ██ ██    ██    
        ███████    ██       ██    ██   ██ ██   ██ ██   ██     ██████  ███████   ████   ███████ ███████  ██████  ██      ██      ██ ███████ ██   ████    ██    
                                                                                                                                                      
                                                                                                                                                      ""
        
        foreach ($item in $jsonObject) {
			Write-Output ""--=New Section=--""
			$trainnonew = $item.trainno
			$outputString = $trainnonew -replace [regex]::Escape($aphrase)
			Write-Output $newTrainNumber
            Write-Output ""Train Number: $($outputString)""
            Write-Output ""Scheduled: $($item.scheduled)""
            Write-Output ""Scheduled 24h: $($item.scheduled24)""
            Write-Output ""Service: $($item.service)""
            Write-Output ""Destination: $($item.destination)""
            Write-Output ""Origin: $($item.origin)""
            Write-Output ""Remarks/Boarding: $($item.remarks_boarding)""
            Write-Output ""New Time: $($item.newtime)""
            Write-Output ""New Time 24h: $($item.newtime24)""
            Write-Output """" 
        }   
		while ($true) {& $refreshDataStart-Sleep -Seconds 30}
    } else {
        Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again.""
    }
} catch {
    Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again. URL was $url""
}


$refreshData = {
    $url = ""https://dixielandsoftware.net/Amtrak/solari/data/"" + $stationCode + ""_schedule.txt""
$url2 = ""_schedule.txt""

$urlfinal = $url + """" + $url2


try {
    $response = Invoke-WebRequest -Uri $url -UseBasicParsing

    if ($response.StatusCode -eq 200) {
        Write-Output $response.Content
        $jsonObject = $response.Content | ConvertFrom-Json
        $phrase2 = ""</a>""
		Write-Output ""Station data has loaded!""
		Clear-Host
        Write-Output ""
        ███████ ████████ ████████ ██████   █████  ██   ██     ██████  ███████ ██    ██ ███████ ██       ██████  ██████  ███    ███ ███████ ███    ██ ████████ 
           ███     ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██      ██    ██ ██      ██      ██    ██ ██   ██ ████  ████ ██      ████   ██    ██    
          ███      ██       ██    ██████  ███████ █████       ██   ██ █████   ██    ██ █████   ██      ██    ██ ██████  ██ ████ ██ █████   ██ ██  ██    ██    
         ███       ██       ██    ██   ██ ██   ██ ██  ██      ██   ██ ██       ██  ██  ██      ██      ██    ██ ██      ██  ██  ██ ██      ██  ██ ██    ██    
        ███████    ██       ██    ██   ██ ██   ██ ██   ██     ██████  ███████   ████   ███████ ███████  ██████  ██      ██      ██ ███████ ██   ████    ██    
                                                                                                                                                      
                                                                                                                                                      ""
        foreach ($item in $jsonObject) {
			$trainnonew = $item.trainno
			$outputString = $trainnonew -replace [regex]::Escape($aphrase)
			if (startWriting==1) {
				$fileContent = $fileContent + ""$($item.scheduled)       $($item.scheduled24)       $($item.service)           $($outputString)         $($item.origin)         $($item.destination)        $($item.remarks_boarding)""
				Set-Content -Path $filePath -Value $fileContent
			}
			Write-Output ""--=New Section=--""
            Write-Output ""Train Number: $($outputString)""
            Write-Output ""Scheduled: $($item.scheduled)""
            Write-Output ""Scheduled 24h: $($item.scheduled24)""
            Write-Output ""Service: $($item.service)""
            Write-Output ""Destination: $($item.destination)""
            Write-Output ""Origin: $($item.origin)""
            Write-Output ""Remarks/Boarding: $($item.remarks_boarding)""
            Write-Output ""New Time: $($item.newtime)""
            Write-Output ""New Time 24h: $($item.newtime24)""
            Write-Output """" 
}         
	            
            
    } else {
        Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again.""
    }
} catch {
    Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again. URL was $url""
}
    Get-Date
}
Write-Output ""Station Status will update every 30 seconds""
Write-Host ""Press F1 to write station data to a .txt file""
Write-Host ""Press any key to exit..."" -NoNewline
$x = $host.UI.RawUI.ReadKey(""NoEcho,IncludeKeyDown"")
Add-Type -AssemblyName System.Windows.Forms
$fileContent = ""12h Time------24h Time-----------Train------------Number----------Origin---------Destination-------Status-----""
function Write-TextFile {
    Set-Content -Path $filePath -Value $fileContent
    [System.Windows.Forms.MessageBox]::Show(""File created at: $filePath"", ""File Creation"")
	Write-Output ""The .txt file has been put in Downloads and will resume printing data on the text document until this page closes""
	$startWriting = 1
}
$form = New-Object System.Windows.Forms.Form
$form.Text = ""Press F1 to create a text file""
$form.KeyPreview = $true
$form.Add_KeyDown({
    if ($_.KeyCode -eq [System.Windows.Forms.Keys]::F1) {
        Write-TextFile
    }
})
$form.ShowDialog()

"
mvFK7wig,amazing snowybot,coinwalk,JavaScript,Thursday 23rd of May 2024 10:10:57 PM CDT,"var OriginalBalanCe = parseFloat(document.getElementById('pct_balance').value);
var BaseBet = Number((OriginalBalanCe/240).toFixed(8));
var NexTBet = BaseBet;
var tens = (BaseBet*10);
var fives = (BaseBet*4.9);
var skibi = (BaseBet*12);
var sevens = (BaseBet*6.9);
var eights = (BaseBet*7.9);
var winnerdinner = 128000;
var loL = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowzy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snowy = ((Math.floor(OriginalBalanCe/tens))*tens);
var snow = ((Math.floor(OriginalBalanCe/tens))*tens);
var NewBalanCe = OriginalBalanCe;
var BalanCe = OriginalBalanCe;
var fart = 1;
var joe = false;
var jim = false;
 
function go(){
BalanCe = document.getElementById('pct_balance').value;
var dog = Number((BalanCe-OriginalBalanCe).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((BalanCe>(((Math.floor(BalanCe/tens))*tens)+sevens))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+eights))&&(BalanCe!=snowy)){
    NexTBet = NexTBet*2;
    snowy = parseFloat(BalanCe);
}
if ((BalanCe<=(snowzy-skibi))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(snowzy-(tens*3)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+fives))){
    NexTBet = BaseBet;
    fart = 0;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
}
if ((BalanCe>=(loL+(tens*fart)))&&(BalanCe<(((Math.floor(BalanCe/tens))*tens)+sevens))){
    NexTBet = BaseBet;
    fart = 1;
    joe = false;
    jim = false;
    snowy = ((Math.floor(BalanCe/tens))*tens);
    snowzy = ((Math.floor(BalanCe/tens))*tens);
    loL = ((Math.floor(BalanCe/tens))*tens);
}
if (BalanCe>=winnerdinner){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((NexTBet*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
2DTgS0pj,array_plot_smooth_spline,Python253,Python,Thursday 23rd of May 2024 09:43:13 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: array_plot_smooth_spline.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script generates a plot of an array of values with a smooth spline passing through the array points.
    It also calculates the sum and average of the array, and plots the maximum area rectangular histogram.

Requirements:
    - Python 3.x
    - matplotlib
    - numpy
    - scipy

Functions:
    - max_area_histogram(heights): Calculates the maximum area of a rectangular histogram given an array of heights.

Usage:
    - Run the script and input the number of elements in the array and the array values.
    - The script will plot the array values with a smooth spline passing through them.
    - It will also display the sum and average of the array, and calculate the maximum area rectangular histogram.

Example Output:

    Enter the number of elements in the array: 6
    Enter the array elements one by one. Hit Enter after each value:
    2
    5
    3
    2
    5
    3
    Array: [2, 5, 3, 2, 5, 3]
    Sum of the array: 20
    Average of the array: 3.3333333333333335
    Maximum area rectangular histogram: 12

Additional Notes:
    - The smooth spline is generated using interpolation techniques.
    - The area under the smooth spline is filled with a transparent color for visualization.
""""""

# Get Essential Imports
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import make_interp_spline

def max_area_histogram(heights):
    """"""
    Calculate the maximum area of a rectangular histogram given an array of heights.

    This function implements the histogram algorithm to calculate the maximum area
    that can be obtained from a rectangular histogram formed by the given heights.

    Parameters:
    heights (list): A list of integers representing the heights of the histogram bars.

    Returns:
    int: The maximum area of the rectangular histogram.
    """"""
    stack: list = []
    max_area = 0
    index = 0
    while index < len(heights):
        if not stack or heights[index] >= heights[stack[-1]]:
            stack.append(index)
            index += 1
        else:
            top_of_stack = stack.pop()
            area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index))
            max_area = max(max_area, area)
    while stack:
        top_of_stack = stack.pop()
        area = (heights[top_of_stack] * ((index - stack[-1] - 1) if stack else index))
        max_area = max(max_area, area)
    return max_area

# Input
while True:
    try:
        n = int(input(""Enter the number of elements in the array: ""))
        if n <= 0:
            print(""Please enter a positive integer for the number of elements."")
            continue
        print(""Enter the array elements one by one. Hit Enter after each value:"")
        array_heights = []
        for i in range(n):
            height = int(input())
            array_heights.append(height)

        # Output the array
        print(""Array:"", array_heights)

        # Calculate and output the sum of the array
        array_sum = sum(array_heights)
        print(""Sum of the array:"", array_sum)

        # Calculate the average of the array
        array_average = array_sum / n
        print(""Average of the array:"", array_average)

        # Generate a smooth spline passing through the array points
        x = np.arange(n)
        y = array_heights
        spline = make_interp_spline(x, y)
        x_smooth = np.linspace(0, n-1, 1000)
        y_smooth = spline(x_smooth)

        # Plot the array and spline
        plt.figure(figsize=(10, 6))
        plt.plot(x_smooth, y_smooth, color='red', linewidth=2, label='Smooth Spline')
        plt.fill_between(x_smooth, y_smooth, color='pink', alpha=0.75)  # Fill under the spline with color
        plt.scatter(x, y, color='blue', marker='o', label='Array Points')
        for i, txt in enumerate(array_heights):
            plt.annotate(str(txt), (x[i], y[i]), textcoords=""offset points"", xytext=(0,10), ha='center')
        plt.xlabel('Index')
        plt.ylabel('Value')
        plt.title('Array Plot with Smooth Spline')
        plt.legend()
        plt.grid(True)
        plt.show()

        # Calculate and output the maximum area rectangular histogram
        print(""Maximum area rectangular histogram:"", max_area_histogram(array_heights))
        break
    except ValueError:
        print(""Invalid input. Please enter a valid integer."")

"
FimGdgbp,blade detail my transaction,last63,PHP,Thursday 23rd of May 2024 09:33:45 PM CDT,"@extends('layouts.parent')

@section('title', 'My Transaction')

@section('content')
    <div class=""card"">
        <div class=""card-body"">
            <h5 class=""card-title"">My Transaction</h5>

            <nav>
                <ol class=""breadcrumb"">
                    @if (Auth::user()->role == 'admin')
                        <li class=""breadcrumb-item""><a href=""{{ route('admin.dashboard') }}"">Dashboard</a></li>
                    @else
                        <li class=""breadcrumb-item""><a href=""{{ route('user.dashboard') }}"">Dashboard</a></li>
                    @endif
                    <li class=""breadcrumb-item""><a href=""#"">Transaction</a></li>
                    <li class=""breadcrumb-item active"">My Transaction</li>
                </ol>
            </nav>
        </div>
    </div>

    <div class=""card"">
        <div class=""card-body"">
            <h5 class=""card-title"">Detail Transaction</h5>

            <!-- Table with stripped rows -->
            <table class=""table table-striped"">
                <thead>
                    <tr>
                        <th scope=""col"">Name Account</th>
                        <td scope=""col"">
                            {{ auth()->user()->name }}
                        </td>
                    </tr>
                    <tr>
                        <th scope=""col"">Reciever Name</th>
                        <td scope=""col"">
                            {{ $transaction->name }}
                        </td>
                    </tr>
                    <tr>
                        <th scope=""row"">Reciever Email</th>
                        <td>{{ $transaction->email }}</td>
                    </tr>
                    <tr>
                        <th scope=""row"">Reciever Phone</th>
                        <td>{{ $transaction->phone }}</td>
                    </tr>
                    <tr>
                        <th scope=""row"">Address</th>
                        <td>{{ $transaction->address }}</td>
                    </tr>
                    <tr>
                        <th scope=""row"">Corier</th>
                        <td>{{ $transaction->courier }}</td>
                    </tr>
                    <tr>
                        <th scope=""row"">Payment</th>
                        <td>{{ $transaction->payment }}</td>
                    </tr>
                    <tr>
                        <th scope=""row"">Payment URL</th>
                        <td>
                            <a href=""{{ $transaction->payment_url }}"" target=""_blank"">
                                {{ $transaction->payment_url }}
                            </a>
                        </td>
                    <tr>
                        <th scope=""row"">Status</th>
                        <td>
                            @if ($transaction->status == 'EXPIRED')
                                <span class=""badge bg-danger text-uppercase"">Expired</span>
                            @elseif ($transaction->status == 'PENDING')
                                <span class=""badge bg-warning text-uppercase"">Pending</span>
                            @elseif ($transaction->status == 'SETTLEMENT')
                                <span class=""badge bg-info text-uppercase"">Settlement</span>
                            @else
                                <span class=""badge bg-success text-uppercase"">Success</span>
                            @endif
                        </td>
                    </tr>
                    <tr>
                        <th scope=""row"">Total Price</th>
                        <td>Rp. {{ number_format($transaction->total_price) }}</td>
                    </tr>
                </thead>
            </table>
            <!-- End Table with stripped rows -->   

        </div>
    </div>

    <div class=""card"">
        <div class=""card-body"">
            <h5 class=""card-title"">List Product</h5>

            <!-- Table with stripped rows -->
            <table class=""table table-striped"">
                <thead>
                    <tr>
                        <th scope=""col"">No</th>
                        <th scope=""col"">Name</th>
                        <th scope=""col"">Price</th>
                        <th scope=""col"">Image</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach ($transaction->transaction_items as $detail)
                        <tr>
                            <td>{{ $loop->iteration }}</td>
                            <td>{{ $detail->product->name }}</td>
                            <td>Rp. {{ number_format($detail->product->price) }}</td>
                            <td>
                                <img src=""{{ $detail->product->product_galleries()->exists() ? url('storage/product/gallery', $detail->product->product_galleries->first()->image) : 'https://via.placeholder.com/100' }}""
                                    width=""250"">
                            </td>
                            {{-- <td>Rp. {{ number_format($detail->subtotal) }}</td> --}}
                        </tr>
                    @endforeach
                </tbody>
            </table>
            <!-- End Table with stripped rows -->
        </div>
    </div>

@endsection
"
NvR021uu,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Thursday 23rd of May 2024 09:27:07 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
24 May 2024"
wMn71sQZ,new remove,ibzi,JavaScript,Thursday 23rd of May 2024 09:10:27 PM CDT,"document.querySelector("".text-center"").remove();
document.querySelector(""p.absolute"").remove();
document.querySelectorAll('div').forEach(el => /^By @\w+$/.test(el.textContent) && el.remove());

setInterval(() => {
  document.querySelectorAll('div').forEach(el => el.textContent === 'c.ai' && el.remove());
}, 1000);

document.querySelector(""div.\\32 xl\\:hidden:nth-child(1) > div:nth-child(1)"").remove();"
BY8QwJfw,remove code,ibzi,JavaScript,Thursday 23rd of May 2024 09:09:43 PM CDT,"var div = document.querySelector('div[style=""font-size: 13px;""]'); // the created by thing

if (div) {
    while (div.firstChild) {
        div.removeChild(div.firstChild);
    }
}

var div1 = document.getElementsByClassName('text-center')[0]; // the chat header disclaimer thingie

while (div1.firstChild) {
    div1.removeChild(div1.firstChild);
}

// the c.ai logo thingie
document.querySelector('button[title=""Submit Message""]').addEventListener('click', async function() {
    await new Promise(r => setTimeout(r, 3000));
    var elements = document.querySelectorAll('div[aria-label=""AI Character""]');
    elements.forEach(function(element) {
        element.parentNode.removeChild(element);
    });
});"
ERYJhd14,Lightspeed Points,Yhugi,Lua,Thursday 23rd of May 2024 09:07:13 PM CDT,"-- Author: Jonfinity

local player = ac.getCarState(1)
local collisionTimeout = 0
local onCollision = ac.OnlineEvent({
    ac.StructItem.key(""lightspeedPointsCollision""),
    Speed = ac.StructItem.int32()
})

function script.prepare(dt)
    return true
end

function script.update(dt)
    if collisionTimeout > 0 then
        collisionTimeout = collisionTimeout - dt
    elseif player.collidedWith == 0 and player.speedKmh > 0 then
        onCollision { Speed = player.speedKmh }
        collisionTimeout = 2
    end
end
"
UcVjrCrL,win_process_list,Python253,Python,Thursday 23rd of May 2024 08:58:03 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: win_process_list.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script retrieves a list of running processes on a Windows system using the 'tasklist' command and prints the output.

Requirements:
    - Python 3.x
    - This script is specifically designed for Windows systems.

Functions:
    - get_process_list():
      Retrieves a list of running processes on the Windows system and returns the output as a string.

Usage:
    - Simply execute the script. It will display the list of running processes in the console.

Additional Notes:
    - This script uses the 'tasklist' command, which is a built-in Windows utility for listing running processes.
""""""

import subprocess

def get_process_list():
    """"""
    Retrieves a list of running processes on the Windows system.

    Returns:
        str: A string containing the output of the 'tasklist' command.
    """"""
    tasklist_output = subprocess.check_output(['tasklist'], shell=True)
    return tasklist_output.decode('utf-8')

if __name__ == ""__main__"":
    process_list = get_process_list()
    print(process_list)

"
825YMheT,доп задача код хаффмана,myloyo,C#,Thursday 23rd of May 2024 08:52:14 PM CDT,"//код хаффамана класс
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Myloyorrrr
{
    internal class HuffmanTree
    {
        private class Node:IComparable<Node>
        {
            public char symb; //информационное поле
            public int count; //кол-во появлений в строке
            public int height; // высота в дереве
            public Node left; //ссылка на левое поддерево
            public Node right; //ссылка на правое поддерево

            //конструктор вложенного класса, создает узел дерева
            public Node(char x, int y, int z)
            {
                symb = x;
                count = y;
                height = z;
                left = null;
                right = null;
                
            }
            
            public Node(char s, int c, int h, Node l, Node r)
            {
                symb = s;
                count = c;
                height = h;
                left = l;
                right = r;
            }

            public int CompareTo(Node node)
            {
                if (this.count == node.count) 
                {
                    if (this.height == node.height)
                    {
                        return this.symb.CompareTo(node.symb);
                    }
                    return this.height.CompareTo(node.height);
                }
                return this.count.CompareTo(node.count);
            }

        }
        Node tree;
        Dictionary<char, string> encodeDict = new Dictionary<char, string>();
        Dictionary<string, char> decodeDict = new Dictionary<string, char>();


        private void Coding(Node node, string code)
        {
            if (node == null)
            {
                return;
            }
            if (node.right == null && node.left == null)
            {
                encodeDict[node.symb] = code;
            }
            //if (node.right != null)
            //{
            //    Coding(node.right, code + ""1"");
            //}
            //if (node.left != null)
            //{
            //    Coding(node.left, code + ""0"");
            //}
            Coding(node.left, code + ""0"");
            Coding(node.right, code + ""1"");
        }

        public void Encode(string fileinname, string fileoutname)
        {
            string s = """";
            using (StreamReader f = new StreamReader(fileinname))
            {
                s = f.ReadToEnd();
            }

            Dictionary<char, int> symbols = new Dictionary<char, int>();

            foreach(var elem in s)
            {
                if (!symbols.ContainsKey(elem))
                {
                    symbols.Add(elem, 0);
                }
                symbols[elem]++;
            }

            SortedSet<Node> nodes = new SortedSet<Node>();

            foreach(var node in symbols)
            {
                nodes.Add(new Node(node.Key, node.Value, 1));
            }

            while (nodes.Count > 1)
            {
                Node Node1 = nodes.First();
                nodes.Remove(Node1);
                Node Node2 = nodes.First();
                nodes.Remove(Node2);
                Node New_Node = new Node(Node1.symb, Node1.count + Node2.count, Math.Max(Node1.height, Node2.height) + 1, Node1, Node2);
                nodes.Add(New_Node);
                

            }

            tree = nodes.First();
            Coding(tree, """");

            foreach(var node in encodeDict)
            {
                Console.WriteLine(node.Key + "" = "" + node.Value);
            }

            int size = 0;
            foreach(var x in s)
            {
                size += encodeDict[x].Length;
            }

            BitArray codes = new BitArray(size);
            int ind = 0;
            foreach(var x in s)
            {
                string code = encodeDict[x];
                for (int i = 0; i < code.Length; i++)
                {
                    codes[ind] = (code[i] == '1');
                    ind++;
                }
            }

            byte[] bytes = new byte[(size+7)/8];
            codes.CopyTo(bytes, 0);

            using (BinaryWriter f = new BinaryWriter(File.Open(fileoutname, FileMode.Create)))
            {
                f.Write(encodeDict.Count);
                foreach(var node in encodeDict)
                {
                    f.Write(node.Key);
                    f.Write(node.Value);
                }
                f.Write(size);
                f.Write(bytes);
            }
        }


        public void Decode(string fileinname, string fileoutname)
        {
            int count = 0;
            StringBuilder res = new StringBuilder();
            using (BinaryReader f = new BinaryReader(File.Open(fileinname, FileMode.Open)))
            {
                count = f.ReadInt32();
                for (int i = 0; i < count; i++)
                {
                    char symb = f.ReadChar();
                    string s = f.ReadString();
                    decodeDict[s] = symb;
                }

                int size = f.ReadInt32();
                BitArray bits = new BitArray(size);
                int ind = 0;
                for (int i = 0; i < (size+7)/8; i++)
                {
                    byte b = f.ReadByte();
                    for (int j = 0; j < 8; j++)
                    {
                        bits[ind] = ((b >> j) & 1) == 1;
                        ind++;
                        if (ind >= size)
                        {
                            break;
                        }
                    }
                }
                string temp = """";
                for (int i = 0; i < size; i++)
                {
                    temp += (bits[i]) ? ""1"": ""0"";
                    if (decodeDict.ContainsKey(temp))
                    {
                        res.Append(decodeDict[temp]);
                        temp = """";
                    }

                }

            }

            using(StreamWriter f = new StreamWriter(fileoutname))
            {
                f.Write(res.ToString());
            }
        }
    }
}

//основная прога
using System;
using System.IO;

namespace Myloyorrrr
{
    internal class Program
    {
        static void Main()
        {
            //Graph G = new Graph(""C:/Настя/книит/in.txt"");
            //G.Show();
            //Console.WriteLine();
            //
            ////3 задача
            //Console.WriteLine(""Введите первую вершину:"");
            //int a = int.Parse(Console.ReadLine());
            //Console.WriteLine(""Введите вторую вершину:"");
            //int b = int.Parse(Console.ReadLine());
            //Console.WriteLine(""Введите вершину, через которую нельзя пройти:"");
            //int d = int.Parse(Console.ReadLine());
            //Console.WriteLine();
            //G.Myloyo_find(a-1, b-1, d-1);


            //// 1 задача: подсчитать смежные вершины с данной вершиной 
            //Console.Write(""Введите номер вершины: "");
            //int v = int.Parse(Console.ReadLine());
            //G.Adjacent(v);

            //// 2 задача: определить все пары вершин, для которых существует путь длиной не более L
            //Console.Write(""Введите требуемую длину пути: "");
            //int L = int.Parse(Console.ReadLine());
            //G.Floyd_new(L);

            //BinaryTree lipa = new BinaryTree();
            //int n = 0;

            ////Чтение последовательности чисел из файла input.txt и добавление их в дерево
            //using (StreamReader f = new StreamReader(""C:/Настя/книит/in.txt""))
            //{
            //    string line;
            //    while ((line = f.ReadLine()) != null)
            //    {
            //        string[] text = line.Split(' ');
            //        for (int i = 0; i < text.Length; i++)
            //        {
            //            int num = int.Parse(text[i]);
            //            lipa.Add(num);
            //            n++;
            //        }
            //    }

            //}

            //lipa.Preorder();

            ////3 деревья
            //bool IsBalance = lipa.Balance();
            //if (IsBalance)
            //{
            //    Console.WriteLine(""Дерево является сбалансированным"");
            //}
            //else
            //{
            //    Console.WriteLine(""Дерево не является сбалансированным"");
            //}

            //доп задача
            HuffmanTree tree = new HuffmanTree();
            //tree.Encode(""C:/Настя/книит/in.txt"", ""C:/Настя/книит/out.dat"");
            tree.Decode(""C:/Настя/книит/out.dat"", ""C:/Настя/книит/out.txt"");

        }
    }
}

"
mNLWCuFK,custom_input_box_to_json,Python253,Python,Thursday 23rd of May 2024 08:47:25 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: custom_input_box_to_json.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script creates a custom input box using Tkinter.
    - Users can enter data in the input box and press Enter to add each entry.
    - Once all data has been entered, users can click the Submit button to finish.
    - It provides an option to save the entered data to a JSON file named ""output_data_entry.json"" in the current working directory.

Requirements:
    - Python 3.x
    - Tkinter library

Functions:
    - show_custom_input_box():
        Displays the custom input box and returns the user inputs as a formatted list.

    - print_user_inputs(inputs):
        Prints the user inputs in json format.

    - save_user_inputs_as_json(inputs):
        Saves the user inputs to a JSON file named ""output_data_entry.json"" in the current working directory.

Usage:
    - Run the script.
    - Enter data in the input box and press Enter for each entry.
    - Click the Submit button when all data has been entered.

Example Output:

    {
        ""1"": ""First input"",
        ""2"": ""Second input"",
        ""3"": ""Third input""
    }

Additional Notes:
    - The script provides a simple way to gather multiple inputs from the user using a graphical interface.
""""""

import tkinter as tk
import json

class CustomInputBox:
    def __init__(self, root):
        """"""
        Initialize the custom input box.

        Parameters:
            root (Tk): The root window.
        """"""
        self.root = root
        self.root.title(""Data Entry Form"")
        self.root.geometry(""400x150"")
        self.root.resizable(False, False)
        self.root.eval('tk::PlaceWindow . center')

        self.label = tk.Label(root, text=""Enter Data Below & Press 'Enter' To Add Each Entry.\nClick 'Submit' When All Data Has Been Entered:"")
        self.label.pack(pady=10)

        self.text_box = tk.Entry(root, width=40)
        self.text_box.pack(pady=5)
        self.text_box.focus_set()
        self.text_box.bind(""<Return>"", lambda event: self.add_input())

        self.button_frame = tk.Frame(root)
        self.button_frame.pack(pady=20)

        self.submit_button = tk.Button(self.button_frame, text=""Submit"", width=10, command=self.submit)
        self.submit_button.grid(row=0, column=0, padx=5)

        self.exit_button = tk.Button(self.button_frame, text=""Exit"", width=10, command=self.exit_program)
        self.exit_button.grid(row=0, column=1, padx=5)

        self.inputs = []

    def add_input(self):
        """"""
        Add input from the text box to the inputs list and clear the text box.
        """"""
        input_text = self.text_box.get()
        if input_text:
            self.inputs.append(input_text)
            self.text_box.delete(0, tk.END)
            self.text_box.focus_set()

    def submit(self):
        """"""
        Add the final input if any and close the input box.
        """"""
        if self.text_box.get():
            self.inputs.append(self.text_box.get())
        self.root.destroy()

    def exit_program(self):
        """"""
        Exit the program.
        """"""
        self.root.destroy()

def show_custom_input_box():
    """"""
    Display the custom input box and return the user inputs.

    Returns:
        list: The user inputs.
    """"""
    root = tk.Tk()
    input_box = CustomInputBox(root)
    root.mainloop()
    return input_box.inputs

def print_user_inputs(inputs):
    """"""
    Print the user inputs in a formatted manner.

    Parameters:
        inputs (list): The list of user inputs.
    """"""
    if inputs:
        print(""User inputs:"")
        for i, input_data in enumerate(inputs, start=1):
            print(f""{i}: {input_data}"")
    else:
        print(""User cancelled the input.\n\nExiting Program... Goodbye!\n"")

def save_user_inputs_as_json(inputs):
    """"""
    Save the user inputs to a JSON file named ""output_data_entry.json"".

    Parameters:
        inputs (list): The list of user inputs.
    """"""
    with open(""output_data_entry.txt"", ""w"", encoding=""utf-8"") as file:
        json.dump({str(i+1): input_data for i, input_data in enumerate(inputs)}, file, indent=4)

if __name__ == ""__main__"":
    user_inputs = show_custom_input_box()
    print_user_inputs(user_inputs)
    if user_inputs:
        choice = input(""\nDo you want to save the data to a file?\n\n1: Yes\n2: No\n\nMake your selection (1 or 2): "")
        if choice == '1':
            save_user_inputs_as_json(user_inputs)
            print(""\nData saved to 'output_data_entry.json'.\n\nExiting Program... Goodbye!\n"")
        elif choice == '2':
            print(""Data not saved."")
        else:
            print(""Invalid input. Data not saved."")

"
30tda9Ag,Example Tank 2 with turret pivot,Windspar,Python,Thursday 23rd of May 2024 08:45:31 PM CDT,"import pygame
from pygame.sprite import Group, Sprite

TRANSPARENT = 0, 0, 0, 0

class ImageLoader:
    def __init__(self):
        self.tank = self.create_tank((50, 40), 'red')
        self.turret = self.create_turret((56, 20), 'red')

    def create_tank(self, size, color):
        surface = pygame.Surface(size, pygame.SRCALPHA)
        surface.fill(TRANSPARENT)
        width, height = size
        h = int(height * 0.20)
        body = surface.get_rect().inflate(-8, - h * 2)
        pygame.draw.rect(surface, color, body)
        pygame.draw.rect(surface, 'gray30', (0, 0, width, h))
        pygame.draw.rect(surface, 'gray30', (0, height - h, width, h))

        return surface

    def create_turret(self, size, color):
        surface = pygame.Surface(size, pygame.SRCALPHA)
        surface.fill(TRANSPARENT)
        width, height = size

        body = 0, 0, height, height
        pygame.draw.rect(surface, color, body)
        pygame.draw.rect(surface, 'black', body, 1)
        offset_h = height * 0.25
        h = height - offset_h * 2
        turret = height, offset_h, width - height, h
        pygame.draw.rect(surface, 'gray30', turret)
        return surface

class Scene:
    def __init__(self, display):
        self.display = display

    def on_draw(self, surface):
        pass

    def on_event(self, event):
        pass

    def on_update(self, delta):
        pass

class Display:
    def __init__(self, caption, width, height, flags=0, fps=60):
        pygame.display.set_caption(caption)
        self.surface = pygame.display.set_mode((width, height), flags)
        self.rect = self.surface.get_rect()
        self.clock = pygame.time.Clock()
        self.running = True
        self.delta = 0
        self.fps = fps

        self.scene = Scene(self)

    def loop(self):
        while self.running:
            for event in pygame.event.get():
                self.scene.on_event(event)

            self.scene.on_update(self.delta)
            self.scene.on_draw(self.surface)
            pygame.display.flip()
            self.delta = self.clock.tick(self.fps) / 1000

class Entity(Sprite):
    def __init__(self, image, position, anchor):
        super().__init__()
        self.original_image = image
        self.image = image
        self.rect = image.get_rect(**{anchor: position})
        self.center = pygame.Vector2(self.rect.center)

    def draw(self, surface):
        surface.blit(self.image, self.rect)

    def move(self, movement):
        self.center += movement
        self.rect.center = self.center

    def rotate(self, angle):
        self.image = pygame.transform.rotate(self.original_image, -angle)
        self.rect = self.image.get_rect(center=self.rect.center)

class Pivot:
    def __init__(self, sprite, pivot):
        self.sprite = sprite
        self.pivot = pygame.Vector2(pivot)
        self.center = pygame.Vector2(sprite.center)
        self.update()

    def on_mousemotion(self, mpos):
        angle = (mpos - self.sprite.center).as_polar()[1]
        pivot = self.pivot.rotate(angle)
        center = self.center.rotate(angle)
        self.sprite.rotate(angle)
        self.update(pivot)

    def update(self, pivot=None):
        if pivot is not None:
            self.sprite.center = self.center + pivot
        else:
            self.sprite.center = self.center + self.pivot

        self.sprite.rect.center = self.sprite.center

class Tank:
    def __init__(self, tank_image, turret_image, position, anchor):
        self.tank = Entity(tank_image, position, anchor)
        self.turret = Entity(turret_image, self.tank.center, 'center')
        self.turret_pivot = Pivot(self.turret, (20, 0))
        self.sprites = Group(self.tank, self.turret)
        self.vector = pygame.Vector2()
        self.vector.from_polar((1, 0))
        self.rotate_speed = 22
        self.speed = 20

    def draw(self, surface):
        self.sprites.draw(surface)

    def on_mousemotion(self, mpos):
        self.turret_pivot.on_mousemotion(mpos)

    def update(self, delta):
        keys = pygame.key.get_pressed()
        # Rotate Tank
        if keys[pygame.K_a]:
            angle_movement = self.rotate_speed * delta
            self.vector.rotate_ip(-angle_movement)
            angle = self.vector.as_polar()[1]
            self.tank.rotate(angle)

        if keys[pygame.K_d]:
            angle_movement = self.rotate_speed * delta
            self.vector.rotate_ip(angle_movement)
            angle = self.vector.as_polar()[1]
            self.tank.rotate(angle)

        # Move Forward
        if keys[pygame.K_w]:
            movement = self.vector * self.speed * delta
            self.tank.move(movement)
            self.turret.move(movement)
            self.turret_pivot.center += movement

        # Move Backwards
        if keys[pygame.K_s]:
            movement = self.vector * self.speed * delta * 0.80
            self.tank.move(-movement)
            self.turret.move(-movement)
            self.turret_pivot.center -= movement

class Game(Scene):
    def __init__(self, display):
        super().__init__(display)
        self.image = ImageLoader()
        self.tank = Tank(self.image.tank, self.image.turret, self.display.rect.center, 'center')

    def on_draw(self, surface):
        surface.fill('black')
        self.tank.draw(surface)

    def on_event(self, event):
        if event.type == pygame.MOUSEMOTION:
            self.tank.on_mousemotion(event.pos)
        elif event.type == pygame.QUIT:
            self.display.running = False

    def on_update(self, delta):
        self.tank.update(delta)

pygame.init()
display = Display(""Tank Play"", 800, 600)
display.scene = Game(display)
display.loop()
pygame.quit()
"
n62tEsUY,Самое время получить красивый ID на новом сервере Grand RP!,Shpindlier,HTML,Thursday 23rd of May 2024 08:32:04 PM CDT,"<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""><title></title></head><body>
	<table style=""box-sizing: border-box; background: #ffffff; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
		<tbody>
			<tr>
				<td align=""center""><img src=""https://i.imgur.com/bgwHNA5.jpeg"" alt=""Logo"" caption=""false"" width=""600""></td>
			</tr>
			<tr>
				<td>
					<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 44px; letter-spacing: 0.01em; line-height: 41px; text-decoration: none; padding: 15px 34px; width: 400px;""><strong>Сегодня открывается японский сервер!</strong></p>
				</td>
			</tr>
			<tr>
				<td>
					<p style=""color: #2e2e2e; font-family: 'Arial'; font-size: 19px; letter-spacing: 0.01em; line-height: 29px; text-decoration: none; padding: 15px 34px; width: 550px;"">Мы ради сообщить, что наш Японский сервер откроется 24 мая в 18:00 (Tokyo time)! Прямо сейчас ты можешь скачать лаунчер для того, чтобы успеть первым зайти на новый сервер Grand Role Play! Кстати, если у тебя есть какие-то вопросы, ты можешь написать нашим агентам поддержки в Дискорд канале!</p>
				</td>
			</tr>
			<tr>
				<td>
					<div style=""padding-top: 0px; box-sizing: border-box;"">
						<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">By the way, I decided to let you know because you play on Grand Rp and registered there. If you're not interested, just let me know.</p>
					</div>
				</td>
			</tr>
			<tr>
				<td align=""center""><a rel=""noopener noreferrer"" style=""color: #2e2e2e; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>If you are not interested</a></td>
			</tr>
		</tbody>
	</table>
	</body></html>"
fL72WFF1,Untitled,CWSmith1701,Bash,Thursday 23rd of May 2024 08:15:34 PM CDT,"cwsmith@galileo ~ $ ps aux
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           1  0.1  0.0  20524 12288 ?        Ss   19:33   0:02 /usr/lib/systemd/systemd --switched-root --system --deserialize=44 splash
root           2  0.0  0.0      0     0 ?        S    19:33   0:00 [kthreadd]
root           3  0.0  0.0      0     0 ?        S    19:33   0:00 [pool_workqueue_release]
root           4  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-rcu_g]
root           5  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-rcu_p]
root           6  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-slub_]
root           7  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-netns]
root           9  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/0:0H-kblockd]
root          12  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-mm_pe]
root          14  0.0  0.0      0     0 ?        I    19:33   0:00 [rcu_tasks_kthread]
root          15  0.0  0.0      0     0 ?        I    19:33   0:00 [rcu_tasks_rude_kthread]
root          16  0.0  0.0      0     0 ?        I    19:33   0:00 [rcu_tasks_trace_kthread]
root          17  0.1  0.0      0     0 ?        S    19:33   0:02 [ksoftirqd/0]
root          18  0.0  0.0      0     0 ?        I    19:33   0:00 [rcu_preempt]
root          19  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/0]
root          20  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/0]
root          21  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/0]
root          22  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/1]
root          23  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/1]
root          24  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/1]
root          25  0.0  0.0      0     0 ?        S    19:33   0:01 [ksoftirqd/1]
root          27  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/1:0H-events_highpri]
root          28  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/2]
root          29  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/2]
root          30  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/2]
root          31  0.0  0.0      0     0 ?        S    19:33   0:00 [ksoftirqd/2]
root          33  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/2:0H-events_highpri]
root          34  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/3]
root          35  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/3]
root          36  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/3]
root          37  0.0  0.0      0     0 ?        S    19:33   0:00 [ksoftirqd/3]
root          39  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/3:0H-kblockd]
root          40  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/4]
root          41  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/4]
root          42  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/4]
root          43  0.0  0.0      0     0 ?        S    19:33   0:00 [ksoftirqd/4]
root          45  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/4:0H-events_highpri]
root          46  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/5]
root          47  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/5]
root          48  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/5]
root          49  0.0  0.0      0     0 ?        S    19:33   0:01 [ksoftirqd/5]
root          51  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/5:0H-events_highpri]
root          52  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/6]
root          53  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/6]
root          54  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/6]
root          55  0.0  0.0      0     0 ?        S    19:33   0:00 [ksoftirqd/6]
root          57  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/6:0H-events_highpri]
root          58  0.0  0.0      0     0 ?        S    19:33   0:00 [cpuhp/7]
root          59  0.0  0.0      0     0 ?        S    19:33   0:00 [idle_inject/7]
root          60  0.0  0.0      0     0 ?        S    19:33   0:00 [migration/7]
root          61  0.0  0.0      0     0 ?        S    19:33   0:00 [ksoftirqd/7]
root          63  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/7:0H-events_highpri]
root          64  0.0  0.0      0     0 ?        S    19:33   0:00 [kdevtmpfs]
root          65  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-inet_]
root          66  0.0  0.0      0     0 ?        S    19:33   0:00 [kauditd]
root          67  0.0  0.0      0     0 ?        S    19:33   0:00 [oom_reaper]
root          69  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-write]
root          70  0.1  0.0      0     0 ?        S    19:33   0:03 [kcompactd0]
root          71  0.0  0.0      0     0 ?        SN   19:33   0:00 [ksmd]
root          73  0.0  0.0      0     0 ?        SN   19:33   0:00 [khugepaged]
root          74  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-crypt]
root          75  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-kinte]
root          76  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-kbloc]
root          77  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-blkcg]
root          78  0.0  0.0      0     0 ?        S    19:33   0:00 [irq/9-acpi]
root          79  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-tpm_d]
root          80  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-ata_s]
root          81  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-md]
root          82  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-md_bi]
root          83  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-edac-]
root          84  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-devfr]
root          85  0.0  0.0      0     0 ?        S    19:33   0:00 [watchdogd]
root          88  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/7:1H-kblockd]
root          89  0.0  0.0      0     0 ?        S    19:33   0:01 [kswapd0]
root          90  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-xfsal]
root          91  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-xfs_m]
root          92  0.0  0.0      0     0 ?        I    19:33   0:00 [kworker/1:1-events]
root          93  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-kthro]
root          94  0.0  0.0      0     0 ?        I    19:33   0:00 [kworker/4:1-usb_hub_wq]
root          97  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-acpi_]
root          99  0.0  0.0      0     0 ?        S    19:33   0:00 [hwrng]
root         100  0.0  0.0      0     0 ?        S    19:33   0:00 [scsi_eh_0]
root         101  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-scsi_]
root         102  0.0  0.0      0     0 ?        S    19:33   0:00 [scsi_eh_1]
root         103  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-scsi_]
root         104  0.0  0.0      0     0 ?        S    19:33   0:00 [scsi_eh_2]
root         105  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-scsi_]
root         106  0.0  0.0      0     0 ?        S    19:33   0:00 [scsi_eh_3]
root         107  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-scsi_]
root         112  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-dm_bu]
root         113  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-mld]
root         114  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-ipv6_]
root         118  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/0:1H-events_highpri]
root         121  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/3:1H-events_highpri]
root         128  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-kstrp]
root         129  0.1  0.0      0     0 ?        I<   19:33   0:03 [kworker/u17:0-rb_allocator]
root         186  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/2:1H-events_highpri]
root         189  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/5:1H-events_highpri]
root         190  0.0  0.0      0     0 ?        I    19:33   0:00 [kworker/2:2-mm_percpu_wq]
root         191  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/4:1H-events_highpri]
root         263  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/6:1H-events_highpri]
root         407  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-ttm]
root         408  0.0  0.0      0     0 ?        S    19:33   0:00 [card0-crtc0]
root         409  0.0  0.0      0     0 ?        S    19:33   0:00 [card0-crtc1]
root         410  0.0  0.0      0     0 ?        S    19:33   0:00 [card0-crtc2]
root         428  0.0  0.0      0     0 ?        S    19:33   0:00 [jbd2/sda5-8]
root         429  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-ext4-]
root         461  0.0  0.0      0     0 ?        S    19:33   0:00 [psimon]
root         475  0.0  0.1  74160 17056 ?        Ss   19:33   0:00 /usr/lib/systemd/systemd-journald
root         506  0.0  0.0  16216  6656 ?        Ss   19:33   0:00 /usr/lib/systemd/systemd-userdbd
root         512  0.0  0.0      0     0 ?        S    19:33   0:00 [psimon]
root         517  0.0  0.0  34308 10176 ?        Ss   19:33   0:00 /usr/lib/systemd/systemd-udevd
root         518  0.0  0.0      0     0 ?        S    19:33   0:00 [nv_queue]
root         519  0.0  0.0      0     0 ?        S    19:33   0:00 [nv_queue]
root         520  0.0  0.0      0     0 ?        S    19:33   0:00 [nv_open_q]
root         524  0.0  0.0      0     0 ?        S    19:33   0:00 [psimon]
systemd+     530  0.0  0.0  21404  9160 ?        Ss   19:33   0:00 /usr/lib/systemd/systemd-networkd
root         572  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/1:2H-kblockd]
root         578  0.0  0.0      0     0 ?        S    19:33   0:00 [irq/138-mei_me]
root         586  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-cfg80]
root         587  0.0  0.0      0     0 ?        S    19:33   0:00 [nvidia-modeset/kthread_q]
root         588  0.0  0.0      0     0 ?        S    19:33   0:00 [nvidia-modeset/deferred_close_kthread_q]
root         593  0.0  0.0      0     0 ?        S    19:33   0:00 [irq/139-nvidia]
root         594  0.0  0.0      0     0 ?        S    19:33   0:00 [nvidia]
root         595  0.0  0.0      0     0 ?        S    19:33   0:01 [nv_queue]
root         596  0.8  0.0      0     0 ?        S    19:33   0:21 [irq/140-iwlwifi]
root         615  0.0  0.0      0     0 ?        I<   19:33   0:02 [kworker/u17:2-rb_allocator]
root         633  0.0  0.0      0     0 ?        S    19:33   0:00 [jbd2/sda6-8]
root         634  0.0  0.0      0     0 ?        I<   19:33   0:00 [kworker/R-ext4-]
systemd+     659  0.1  0.1  24368 16384 ?        Ss   19:33   0:02 /usr/lib/systemd/systemd-resolved
systemd+     660  0.0  0.0  90624  8192 ?        Ssl  19:33   0:00 /usr/lib/systemd/systemd-timesyncd
root         666  0.0  0.0   2488  1604 ?        Ss   19:33   0:00 /usr/sbin/acpid -f
root         667  0.0  0.0  10064  5096 ?        Ss   19:33   0:00 /usr/libexec/bluetooth/bluetoothd
message+     668  0.0  0.0  11012  6144 ?        Ss   19:33   0:01 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only
root         670  0.0  0.0  16860  8320 ?        Ss   19:33   0:00 /usr/lib/systemd/systemd-logind
root         688  0.0  0.1 328256 18572 ?        Ssl  19:33   0:00 /usr/sbin/NetworkManager --no-daemon
root         711  0.0  0.0  15556  9344 ?        Ss   19:33   0:00 /usr/sbin/wpa_supplicant -u
root         724  0.0  0.2 2171060 48608 ?       Ssl  19:33   0:01 /usr/bin/containerd
mysql        731  0.0  0.6 600332 104956 ?       Ssl  19:33   0:00 /usr/sbin/mariadbd
root         735  0.0  0.1 144680 19688 ?        Ssl  19:33   0:00 /usr/bin/sddm
root         742  4.0  0.9 7403812 147876 tty2   Ssl+ 19:33   1:39 /usr/bin/X -nolisten tcp -background none -seat seat0 vt2 -auth /run/sddm/xauth_pvtvHd -noreset -displayfd 16
polkitd      821  0.0  0.0 385040 10800 ?        Ssl  19:33   0:00 /usr/lib/polkit-1/polkitd --no-debug
root         822  0.0  0.0 468004 14024 ?        Ssl  19:33   0:00 /usr/libexec/udisks2/udisksd
root         845  0.0  0.0 307684  7168 ?        Ssl  19:33   0:00 /usr/libexec/upowerd
root         862  0.0  0.1  71668 18976 ?        S    19:34   0:00 /usr/libexec/sddm-helper --socket /tmp/sddm-auth-42071e94-0ad6-4e4d-94ba-83fb9a312153 --id 1 --start /usr/bin/enlightenment_start --user cwsmith
cwsmith      868  0.0  0.0  19440 11072 ?        Ss   19:34   0:00 /usr/lib/systemd/systemd --user
cwsmith      870  0.0  0.0  19996  3028 ?        S    19:34   0:00 (sd-pam)
cwsmith      878  0.0  0.0 114700 14588 ?        Ssl  19:34   0:00 /usr/bin/pipewire
cwsmith      880  0.0  0.1 479832 19004 ?        Ssl  19:34   0:00 /usr/bin/wireplumber
cwsmith      884  0.0  0.0 313280  7864 ?        SLl  19:34   0:00 /usr/bin/gnome-keyring-daemon --daemonize --login
cwsmith      890  0.0  0.0  11416  7468 ?        Ss   19:34   0:00 /usr/bin/dbus-daemon --session --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only
cwsmith      895  0.0  0.1  83848 22784 ?        S    19:34   0:00 /usr/bin/kwalletd5 --pam-login 13 14
cwsmith      897  0.0  0.0   3856  2520 ?        S    19:34   0:00 /usr/bin/enlightenment_start
cwsmith      915  0.0  0.0 310492  7268 ?        Ssl  19:34   0:00 /usr/libexec/gvfsd
cwsmith      927  0.0  0.0 378244  6112 ?        Ssl  19:34   0:00 /usr/libexec/at-spi-bus-launcher
cwsmith      933  0.0  0.0   9224  4620 ?        S    19:34   0:00 /usr/bin/dbus-daemon --config-file=/usr/share/defaults/at-spi2/accessibility.conf --nofork --print-address 11 --address=unix:path=/run/user/1000/at-spi/bus_0
root         938  0.0  0.0      0     0 ?        S    19:34   0:00 [UVM global queue]
root         939  0.0  0.0      0     0 ?        S    19:34   0:00 [UVM deferred release queue]
root         940  0.0  0.0      0     0 ?        S    19:34   0:00 [UVM Tools Event Queue]
root         944  0.0  0.0      0     0 ?        S<   19:34   0:00 [krfcommd]
cwsmith      945 10.3  1.0 3674260 165720 ?      Sl   19:34   4:07 /usr/bin/enlightenment
cwsmith      946  0.0  0.0 309724  6784 ?        Ssl  19:34   0:00 /usr/libexec/xdg-permission-store
cwsmith      951  0.1  0.0  25680 14892 ?        SNs  19:34   0:03 /usr/bin/efreetd
root         960  0.0  0.0 167212 11032 ?        SNl  19:34   0:00 /usr/lib64/enlightenment/utils/enlightenment_system
cwsmith      991  0.0  0.0  96448 11264 ?        SN   19:34   0:00 /usr/lib64/enlightenment/utils/enlightenment_fm
cwsmith      993  0.0  0.0 106904 11784 ?        Ssl  19:34   0:00 /usr/bin/pipewire-pulse
cwsmith     1012  0.0  0.2 572348 36588 ?        SNsl 19:34   0:00 nm-applet
cwsmith     1058  0.0  0.0 234924  7800 ?        Sl   19:34   0:00 /usr/libexec/at-spi2-registryd --use-gnome-session
cwsmith     1068  0.2  1.0 2117544 169376 ?      SNsl 19:34   0:06 nextcloud
cwsmith     1070  0.0  0.0 693812 12992 ?        Ssl  19:34   0:00 /usr/libexec/xdg-desktop-portal
cwsmith     1076  0.0  0.0 607240  7008 ?        Ssl  19:34   0:00 /usr/libexec/xdg-document-portal
root        1082  0.0  0.0   2464  1728 ?        Ss   19:34   0:00 fusermount3 -o rw,nosuid,nodev,fsname=portal,auto_unmount,subtype=portal -- /run/user/1000/doc
cwsmith     1087  0.0  0.1 410588 23224 ?        Ssl  19:34   0:00 /usr/libexec/xdg-desktop-portal-gtk
cwsmith     1102  0.0  0.2 266380 40192 ?        Ssl  19:34   0:00 /usr/lib64/libexec/xdg-desktop-portal-kde
cwsmith     1108  0.0  0.0 313108  7936 ?        Sl   19:34   0:00 /usr/bin/gnome-keyring-daemon --start --foreground --components=secrets
root        1114  0.0  0.0 310260  7456 ?        Ssl  19:34   0:00 /usr/libexec/power-profiles-daemon
cwsmith     1132  0.0  0.5 590540 89260 ?        SNLl 19:34   0:00 /usr/bin/kwalletd5
root        1393  0.0  0.5 2954152 92008 ?       Ssl  19:35   0:01 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
cwsmith     2192  0.0  0.1 135000 19944 ?        SNsl 19:36   0:00 /usr/lib64/enlightenment/utils/enlightenment_thumb --nice=0
cwsmith     3043  4.7  0.4 277196 76388 ?        RNsl 19:39   1:39 terminology
cwsmith     3048  0.0  0.0   7956  4224 pts/0    SNs  19:39   0:00 /bin/bash
root        3292  0.0  0.0  15308  6344 pts/0    SN+  19:43   0:01 sudo emerge --update --deep @world
root        3294  0.0  0.0  15308  2352 pts/1    SNs  19:43   0:00 sudo emerge --update --deep @world
root        3295  4.3  2.9 497452 486712 pts/1   SN+  19:43   1:21 /usr/bin/python3.11 /usr/lib/python-exec/python3.11/emerge --update --deep @world
root        4077  0.0  0.0      0     0 ?        I    19:44   0:00 [kworker/5:0-events]
root        4359  0.0  0.0      0     0 ?        I    19:44   0:00 [kworker/7:1-events]
root        5265  0.0  0.0      0     0 ?        I    19:44   0:00 [kworker/u16:1-events_unbound]
root        5626  0.0  0.0  17384 11904 pts/1    SN+  19:44   0:00 /usr/bin/python3.11 /usr/lib/portage/python3.11/pid-ns-init 5627
root        5627  0.0  0.0  17388 11980 pts/3    SNs+ 19:44   0:00 /usr/bin/python3.11 /usr/lib/portage/python3.11/pid-ns-init 250 250 250 18 0,1,2 /usr/bin/sandbox [dev-util/mingw64-toolchain-11.0.1-r1] sandbox /usr/lib/portage/python3.11
portage     5630  0.0  0.0   2492  1604 pts/3    SN+  19:44   0:00 [dev-util/mingw64-toolchain-11.0.1-r1] sandbox /usr/lib/portage/python3.11/ebuild.sh compile
portage     5631  0.0  0.0  11588  7424 pts/3    SN+  19:44   0:00 bash /usr/lib/portage/python3.11/ebuild.sh compile
portage     5647  0.0  0.0  11712  6760 pts/3    SN+  19:44   0:00 bash /usr/lib/portage/python3.11/ebuild.sh compile
cwsmith     7104  9.5  6.6 6361468 1079352 ?     SNsl 19:45   2:47 plasma-discover
root        8064  0.0  0.8 567152 132856 ?       Ssl  19:45   0:01 /usr/libexec/fwupd/fwupd
cwsmith    11413  0.0  0.2 241516 36244 ?        Sl   19:45   0:01 /usr/bin/kded5
cwsmith    12865  0.0  0.1 156428 21712 ?        SNl  19:45   0:00 /usr/lib64/libexec/kf5/kio_http_cache_cleaner
cwsmith    29225  0.2  1.0 1991596 164072 ?      SNsl 19:45   0:04 transmission-gtk
root       30199  8.4  1.2 1106720 210000 ?      Ssl  19:45   2:26 /usr/libexec/flatpak-system-helper
root       31749  0.0  0.0 312956  9452 ?        Ssl  19:45   0:00 /usr/libexec/accounts-daemon
cwsmith    72607  0.4  1.4 1186319100 236224 ?   SNsl 19:48   0:06 /opt/joplin-desktop/@joplinapp-desktop
cwsmith    72610  0.0  0.3 33797608 50432 ?      SN   19:48   0:00 /opt/joplin-desktop/@joplinapp-desktop --type=zygote --no-zygote-sandbox
cwsmith    72611  0.0  0.3 33797596 50804 ?      SN   19:48   0:00 /opt/joplin-desktop/@joplinapp-desktop --type=zygote
cwsmith    72613  0.0  0.0 33797596 10200 ?      SN   19:48   0:00 /opt/joplin-desktop/@joplinapp-desktop --type=zygote
cwsmith    72700  0.0  0.7 34225424 116684 ?     SNl  19:48   0:01 /opt/joplin-desktop/@joplinapp-desktop --type=gpu-process --enable-crash-reporter=5b2b5950-9d05-49ef-84c5-fde4781a4b6c,no_channel --user-data-dir=/home/cwsmith/.config/Jopl
cwsmith    72705  0.0  0.4 33863624 65408 ?      SNl  19:48   0:00 /opt/joplin-desktop/@joplinapp-desktop --type=utility --utility-sub-type=network.mojom.NetworkService --lang=en-US --service-sandbox-type=none --enable-crash-reporter=5b2b5
cwsmith    72720  1.6  1.7 1186158196 289392 ?   SNl  19:48   0:24 /opt/joplin-desktop/@joplinapp-desktop --type=renderer --enable-crash-reporter=5b2b5950-9d05-49ef-84c5-fde4781a4b6c,no_channel --user-data-dir=/home/cwsmith/.config/Joplin
cwsmith    72814  0.0  1.0 1186110208 167040 ?   SNl  19:48   0:01 /opt/joplin-desktop/@joplinapp-desktop --type=renderer --enable-crash-reporter=5b2b5950-9d05-49ef-84c5-fde4781a4b6c,no_channel --user-data-dir=/home/cwsmith/.config/Joplin
cwsmith    72875  0.4  0.3 543692 61432 ?        SNsl 19:49   0:06 hexchat --existing
root       74403  0.1  0.0      0     0 ?        I    19:52   0:01 [kworker/u16:2-events_unbound]
cwsmith    74572  7.2  2.8 3657964 462704 ?      SNsl 19:52   1:34 /usr/lib64/firefox/firefox
cwsmith    74665  0.0  0.2 230532 46364 ?        SNl  19:52   0:00 /usr/lib64/firefox/firefox -contentproc -parentBuildID 20240519030312 -prefsLen 40855 -prefMapSize 246641 -appDir /usr/lib64/firefox/browser {3ffc6044-d789-449a-943f-7bd41f
cwsmith    74710  0.5  0.8 2494032 143276 ?      SNl  19:52   0:07 /usr/lib64/firefox/firefox -contentproc -childID 1 -isForBrowser -prefsLen 40958 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fir
cwsmith    74795 11.5  1.9 20042016 310324 ?     SNl  19:52   2:27 /usr/lib64/firefox/firefox -contentproc -childID 2 -isForBrowser -prefsLen 46451 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fir
cwsmith    74899  0.0  0.2 265132 44072 ?        SNl  19:53   0:01 /usr/bin/plasma-browser-integration-host /usr/lib64/mozilla/native-messaging-hosts/org.kde.plasma.browser_integration.json plasma-browser-integration@kde.org
cwsmith    74948  0.0  0.2 227880 43316 ?        SNl  19:53   0:00 /usr/lib64/firefox/firefox -contentproc -parentBuildID 20240519030312 -sandboxingKind 0 -prefsLen 46513 -prefMapSize 246641 -appDir /usr/lib64/firefox/browser {e42844fc-53d
cwsmith    74968  0.0  0.4 460264 66348 ?        Sl   19:53   0:00 /usr/lib64/libexec/kdeconnectd
cwsmith    75135  1.1  1.3 2664104 216264 ?      SNl  19:53   0:14 /usr/lib64/firefox/firefox -contentproc -childID 6 -isForBrowser -prefsLen 34058 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fir
cwsmith    75470  0.9  1.6 2795128 274244 ?      SNl  19:53   0:12 /usr/lib64/firefox/firefox -contentproc -childID 8 -isForBrowser -prefsLen 34162 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fir
cwsmith    75472  0.1  0.7 2505404 123912 ?      SNl  19:53   0:01 /usr/lib64/firefox/firefox -contentproc -childID 9 -isForBrowser -prefsLen 34162 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fir
cwsmith    76245  0.0  0.5 2427792 82164 ?       SNl  19:55   0:00 /usr/lib64/firefox/firefox -contentproc -childID 13 -isForBrowser -prefsLen 34280 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fi
root       76344  0.1  0.0      0     0 ?        I    19:55   0:01 [kworker/u16:3-events_unbound]
root       76399  0.0  0.0      0     0 ?        I    19:55   0:00 [kworker/1:0-events]
root      102439  0.0  0.0      0     0 ?        I    20:00   0:00 [kworker/7:2-events]
cwsmith   105528  0.0  0.0 354276 11904 ?        Sl   20:00   0:00 /usr/libexec/gvfsd-http --spawner :1.7 /org/gtk/gvfs/exec_spaw/0
cwsmith   105629  0.0  0.5 2427792 83360 ?       SNl  20:00   0:00 /usr/lib64/firefox/firefox -contentproc -childID 14 -isForBrowser -prefsLen 34280 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fi
root      105695  0.0  0.0      0     0 ?        I    20:00   0:00 [kworker/4:2-events]
root      105970  0.0  0.0      0     0 ?        I    20:00   0:00 [kworker/3:1-events]
cwsmith   106588  0.0  0.0   7956  4332 pts/2    SNs  20:00   0:00 /bin/bash
cwsmith   109247  0.0  0.5 2427792 83476 ?       SNl  20:00   0:00 /usr/lib64/firefox/firefox -contentproc -childID 15 -isForBrowser -prefsLen 34280 -prefMapSize 246641 -jsInitLen 232064 -parentBuildID 20240519030312 -greomni /usr/lib64/fi
root      109362  0.0  0.0      0     0 ?        I    20:01   0:00 [kworker/0:0-events]
root      128984  0.0  0.0      0     0 ?        I    20:01   0:00 [kworker/6:2-events]
flatpak   141717  0.0  0.0   4636  2484 ?        S    20:02   0:00 /usr/libexec/revokefs-fuse --backend --socket=3 --exit-with-fd=4 /var/lib/flatpak/repo/tmp/flatpak-cache-PKN6N2
cwsmith   141731  0.0  0.0 229080  1812 ?        SNsl 20:02   0:00 /usr/libexec/revokefs-fuse -o uid=1000 --socket=3 /var/lib/flatpak/repo/tmp/flatpak-cache-PKN6N2 /var/tmp/flatpak-cache-RR45N2/org.freedesktop.Platform.GL32.nvidia-550-78-Q
root      143351  0.0  0.0      0     0 ?        I<   20:03   0:00 [kworker/u17:3-rb_allocator]
cwsmith   143466  3.8  0.3 259576 53548 ?        SNsl 20:04   0:23 terminology -e btop
cwsmith   143475  0.6  0.1 267496 22636 pts/4    SNsl+ 20:04   0:04 btop
root      143529  0.0  0.0      0     0 ?        I    20:04   0:00 [kworker/5:2-usb_hub_wq]
root      144595  0.0  0.0      0     0 ?        I    20:05   0:00 [kworker/3:0-events]
root      145212  0.0  0.0      0     0 ?        I    20:06   0:00 [kworker/2:0-events]
root      145989  0.0  0.0      0     0 ?        I    20:07   0:00 [kworker/6:0-events]
root      146143  0.1  0.0      0     0 ?        I    20:08   0:00 [kworker/u16:0-flush-8:0]
root      146258  0.0  0.0      0     0 ?        I    20:08   0:00 [kworker/2:3-events]
root      146382  0.0  0.0      0     0 ?        I    20:08   0:00 [kworker/0:2-events]
root      147020  0.0  0.0      0     0 ?        I<   20:09   0:00 [kworker/u17:1-rb_allocator]
root      147159  0.0  0.0      0     0 ?        I    20:09   0:00 [kworker/4:0-events]
root      147188  0.0  0.0      0     0 ?        I    20:10   0:00 [kworker/5:1-events]
root      147240  0.0  0.0      0     0 ?        I    20:10   0:00 [kworker/7:0-events]
root      147348  0.0  0.0      0     0 ?        I    20:11   0:00 [kworker/3:2-events]
root      155465  0.2  0.0      0     0 ?        I    20:12   0:00 [kworker/u16:4-flush-8:0]
root      159277  0.0  0.0      0     0 ?        I    20:12   0:00 [kworker/u16:5]
root      165493  0.0  0.0  16804  7040 ?        S    20:12   0:00 systemd-userwork: waiting...
root      165494  0.0  0.0  16804  7284 ?        S    20:12   0:00 systemd-userwork: waiting...
root      165495  0.0  0.0  16804  7108 ?        S    20:12   0:00 systemd-userwork: waiting...
portage   167381  0.0  0.0   8884  4608 pts/3    SN+  20:12   0:00 bash /usr/lib/portage/python3.11/ebuild-helpers/emake MAKEINFO=: V=1
portage   167383  0.0  0.0   8660  4796 pts/3    SN+  20:12   0:00 make -j8 MAKEINFO=: V=1
portage   167389  0.0  0.0   8492  4224 pts/3    SN+  20:12   0:00 /bin/sh -c r=`${PWDCMD-pwd}`; export r; \ s=`cd /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc; ${PWDCMD-pwd}`; export s; \   make ""DESTDIR="" ""RPATH_ENVVAR=
portage   167401  0.0  0.0   9136  5172 pts/3    SN+  20:12   0:00 make DESTDIR= RPATH_ENVVAR=LD_LIBRARY_PATH TARGET_SUBDIR=x86_64-w64-mingw32 bindir=/usr/lib/mingw64-toolchain/bin datadir=/usr/lib/mingw64-toolchain/share exec_prefix=/usr/
portage   195765  0.0  0.0   8504  4096 pts/3    SN+  20:13   0:00 /bin/sh -c r=`${PWDCMD-pwd}`; export r; \ s=`cd /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc; ${PWDCMD-pwd}`; export s; \ FLEX=""flex""; export FLEX; LEX=""f
portage   195776  5.0  0.1  29832 25560 pts/3    SN+  20:13   0:01 make DESTDIR= RPATH_ENVVAR=LD_LIBRARY_PATH TARGET_SUBDIR=x86_64-w64-mingw32 bindir=/usr/lib/mingw64-toolchain/bin datadir=/usr/lib/mingw64-toolchain/share exec_prefix=/usr/
root      199119  0.1  0.0   2544  1752 ?        S    20:14   0:00 bwrap --ro-bind /var/lib/flatpak/runtime/org.freedesktop.Platform.GL32.nvidia-550-67/x86_64/1.4/.af3748d8710a93a54d17d3c1ec230cf0678474b852adb9c0fba466f698c7618b-oS8DaS/fil
root      199122  0.0  0.0   2544  1408 ?        S    20:14   0:00 bwrap --ro-bind /var/lib/flatpak/runtime/org.freedesktop.Platform.GL32.nvidia-550-67/x86_64/1.4/.af3748d8710a93a54d17d3c1ec230cf0678474b852adb9c0fba466f698c7618b-oS8DaS/fil
root      199124 99.4  0.8 132924 132352 ?       R    20:14   0:05 /app/bin/apply_extra
portage   199131 75.9  0.6 102548 100956 pts/3   RN+  20:14   0:03 build/genattrtab /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i386
portage   199140  0.0  0.0   8364  3960 pts/3    SN+  20:14   0:00 /bin/sh -c build/genautomata /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc
portage   199141 83.0  0.2  38204 36144 pts/3    RN+  20:14   0:01 build/genautomata /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i38
portage   199150 84.1  0.2  36988 35492 pts/3    RN+  20:14   0:01 build/genemit /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i386/i3
portage   199155  0.0  0.0   8364  3968 pts/3    SN+  20:14   0:00 /bin/sh -c build/genextract /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/
portage   199156 97.9  0.2  37244 35880 pts/3    RN+  20:14   0:01 build/genextract /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i386
portage   199161  0.0  0.0   8364  3968 pts/3    SN+  20:14   0:00 /bin/sh -c build/genoutput /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/c
portage   199162 64.8  0.2  36500 35172 pts/3    RN+  20:14   0:00 build/genoutput /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i386/
portage   199170  0.0  0.0   8364  3968 pts/3    SN+  20:14   0:00 /bin/sh -c build/genpeep /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/con
portage   199171 97.6  0.2  36492 35196 pts/3    RN+  20:14   0:00 build/genpeep /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i386/i3
portage   199176  0.0  0.0   8364  4096 pts/3    SN+  20:14   0:00 /bin/sh -c build/genrecog /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/co
portage   199177 96.0  0.2  36552 35092 pts/3    RN+  20:14   0:00 build/genrecog /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/common.md /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc/config/i386/i
portage   199201  0.0  0.0   8260  3568 pts/3    SN+  20:14   0:00 x86_64-pc-linux-gnu-g++ -fno-PIE -c -march=skylake -O2 -pipe -DIN_GCC -DCROSS_DIRECTORY_STRUCTURE -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narro
portage   199202 75.7  0.2  79796 45960 pts/3    RN+  20:14   0:00 /usr/libexec/gcc/x86_64-pc-linux-gnu/13/cc1plus -quiet -I . -I . -I /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc -I /var/tmp/portage/dev-util/mingw64-
portage   199203  0.0  0.0   8904  4216 pts/3    SN+  20:14   0:00 /usr/lib/gcc/x86_64-pc-linux-gnu/13/../../../../x86_64-pc-linux-gnu/bin/as -I . -I . -I /var/tmp/portage/dev-util/mingw64-toolchain-11.0.1-r1/work/gcc/gcc -I /var/tmp/porta
cwsmith   199204  0.0  0.0  11200  4464 pts/2    RN+  20:14   0:00 ps aux
cwsmith@galileo ~ $ ps au
"
r0VADHKA,custom_input_box_to_list,Python253,Python,Thursday 23rd of May 2024 07:43:55 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: custom_input_box_to_list.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script creates a custom input box using Tkinter.
    - Users can enter data in the input box and press Enter to add each entry.
    - Once all data has been entered, users can click the Submit button to finish.
    - It provides an option to save the entered data to a text file named ""output_data_entry.txt"" in the current working directory.

Requirements:
    - Python 3.x
    - Tkinter library

Functions:
    - show_custom_input_box():
        Displays the custom input box and returns the user inputs as a list.

    - print_user_inputs(inputs):
        Prints the user inputs in a formatted numbered list.

    - save_user_inputs(inputs):
        Saves the user inputs to a text file named ""output_data_entry.txt"" in the current working directory.

Usage:
    - Run the script.
    - Enter data in the input box and press Enter for each entry.
    - Click the Submit button when all data has been entered.

Example Output:

    User inputs:
    1: First input
    2: Second input
    3: Third input

Additional Notes:
    - The script provides a simple way to gather multiple inputs from the user using a graphical interface.
    - Ideal for data entry tasks where manual input is required.
""""""

import tkinter as tk

class CustomInputBox:
    def __init__(self, root):
        """"""
        Initialize the CustomInputBox class.

        Parameters:
            root (tk.Tk): The root Tkinter window.
        """"""
        self.root = root
        self.root.title(""Data Entry Form"")
        self.root.geometry(""400x150"")
        self.root.resizable(False, False)
        self.root.eval('tk::PlaceWindow . center')

        self.label = tk.Label(root, text=""Enter Data Below & Press 'Enter' To Add Each Entry.\nClick 'Submit' When All Data Has Been Entered:"")
        self.label.pack(pady=10)

        self.text_box = tk.Entry(root, width=40)
        self.text_box.pack(pady=5)
        self.text_box.focus_set()
        self.text_box.bind(""<Return>"", lambda event: self.add_input())

        self.button_frame = tk.Frame(root)
        self.button_frame.pack(pady=20)

        self.submit_button = tk.Button(self.button_frame, text=""Submit"", width=10, command=self.submit)
        self.submit_button.grid(row=0, column=0, padx=5)

        self.exit_button = tk.Button(self.button_frame, text=""Exit"", width=10, command=self.exit_program)
        self.exit_button.grid(row=0, column=1, padx=5)

        self.inputs = []

    def add_input(self):
        """"""
        Add user input to the inputs list.
        """"""
        input_text = self.text_box.get()
        if input_text:
            self.inputs.append(input_text)
            self.text_box.delete(0, tk.END)
            self.text_box.focus_set()

    def submit(self):
        """"""
        Finish data entry and close the window.
        """"""
        if self.text_box.get():
            self.inputs.append(self.text_box.get())
        self.root.destroy()

    def exit_program(self):
        """"""
        Exit the program without saving.
        """"""
        self.root.destroy()

def show_custom_input_box():
    """"""
    Display the custom input box and return the user inputs as a list.

    Returns:
        list: A list containing user inputs.
    """"""
    root = tk.Tk()
    input_box = CustomInputBox(root)
    root.mainloop()
    return input_box.inputs

def print_user_inputs(inputs):
    """"""
    Print the user inputs in a formatted manner.

    Parameters:
        inputs (list): A list containing user inputs.
    """"""
    if inputs:
        print(""User inputs:"")
        for i, input_data in enumerate(inputs, start=1):
            print(f""{i}: {input_data}"")
    else:
        print(""User cancelled the input.\n\nExiting Program... Goodbye!\n"")

def save_user_inputs(inputs):
    """"""
    Save the user inputs to a text file named ""output_data_entry.txt"" in the current working directory.

    Parameters:
        inputs (list): A list containing user inputs.
    """"""
    with open(""output_data_entry.txt"", ""w"", encoding=""utf-8"") as file:
        for i, input_data in enumerate(inputs, start=1):
            file.write(f""{i}: {input_data}\n"")

if __name__ == ""__main__"":
    user_inputs = show_custom_input_box()
    print_user_inputs(user_inputs)
    if user_inputs:
        choice = input(""\nDo you want to save the data to a file?\n\n1: Yes\n2: No\n\nMake your selection (1 or 2): "")
        if choice == '1':
            save_user_inputs(user_inputs)
            print(""\nData saved to 'output_data_entry.txt'.\n\nExiting Program... Goodbye!\n"")
        elif choice == '2':
            print(""Data not saved."")
        else:
            print(""Invalid input. Data not saved."")

"
D1HLRFFB,2024-05-23_stats.json,rdp_snitch,JSON,Thursday 23rd of May 2024 07:18:18 PM CDT,"{
  ""ip"": {
    ""139.162.27.10"": 294,
    ""103.56.6.112"": 9,
    ""146.190.46.106"": 9,
    ""103.120.18.135"": 12,
    ""185.198.69.11"": 3,
    ""87.251.75.145"": 9,
    ""185.198.69.19"": 3,
    ""185.198.69.15"": 6,
    ""198.235.24.143"": 9,
    ""185.198.69.9"": 3,
    ""185.198.69.29"": 3,
    ""167.94.138.47"": 3,
    ""185.198.69.28"": 3,
    ""45.227.254.26"": 12,
    ""45.227.254.9"": 18,
    ""185.198.69.2"": 3,
    ""185.198.69.17"": 3,
    ""167.94.138.113"": 3,
    ""194.165.16.72"": 6,
    ""107.167.82.123"": 3,
    ""117.16.46.253"": 6,
    ""185.170.144.3"": 6,
    ""45.227.254.54"": 6,
    ""92.53.65.200"": 3,
    ""128.14.209.34"": 18,
    ""165.154.172.87"": 3,
    ""64.124.50.139"": 6,
    ""36.91.222.100"": 6,
    ""198.235.24.226"": 9,
    ""136.144.35.68"": 3,
    ""213.109.202.235"": 18,
    ""152.86.127.201"": 3,
    ""71.6.134.235"": 30,
    ""103.120.18.225"": 3,
    ""158.51.14.114"": 6,
    ""205.210.31.184"": 9,
    ""134.209.107.59"": 6,
    ""193.29.13.175"": 6,
    ""87.251.75.64"": 3,
    ""116.140.196.215"": 3,
    ""154.83.13.133"": 3,
    ""112.4.139.162"": 3,
    ""104.152.52.133"": 3,
    ""173.230.139.171"": 12,
    ""45.33.63.234"": 3,
    ""194.165.16.37"": 6,
    ""198.235.24.57"": 9
  },
  ""asn"": {
    ""AS63949"": 309,
    ""AS140599"": 9,
    ""AS14061"": 15,
    ""AS131939"": 15,
    ""AS57523"": 27,
    ""AS208091"": 12,
    ""AS396982"": 36,
    ""AS398324"": 6,
    ""AS267784"": 36,
    ""AS48721"": 12,
    ""AS53755"": 3,
    ""AS18031"": 6,
    ""AS197414"": 6,
    ""AS49505"": 3,
    ""AS21859"": 18,
    ""AS135377"": 3,
    ""AS6461"": 6,
    ""AS7713"": 6,
    ""AS396356"": 3,
    ""AS208312"": 18,
    ""AS397057"": 3,
    ""AS10439"": 30,
    ""AS398465"": 6,
    ""AS42397"": 6,
    ""AS4837"": 3,
    ""AS142403"": 3,
    ""AS56046"": 3,
    ""AS14987"": 3
  },
  ""isp"": {
    ""LINODE"": 294,
    ""Comfac Corporation"": 9,
    ""DigitalOcean, LLC"": 15,
    ""IPS INC"": 15,
    ""Chang Way Technologies Co. Limited"": 27,
    ""Xhost Internet Solutions LP"": 18,
    ""Google LLC"": 36,
    ""Censys, Inc."": 6,
    ""Flyservers S.A."": 48,
    ""Input Output Flood LLC"": 3,
    ""Sangmyung University"": 6,
    ""OOO \""Network of data-centers \""Selectel\"""": 3,
    ""Zenlayer Inc"": 18,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Zayo Bandwidth"": 6,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Latitude.sh"": 3,
    ""Red Byte LLC"": 18,
    ""Forked Deer Electric Cooperative, Inc."": 3,
    ""CariNet, Inc."": 30,
    ""Rackdog, LLC"": 6,
    ""Bunea TELECOM SRL"": 6,
    ""China Unicom CHINA169 Network"": 3,
    ""Yisu Cloud LTD"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Rethem Hosting LLC"": 3,
    ""Akamai Technologies, Inc."": 15
  },
  ""org"": {
    ""Linode, LLC"": 294,
    ""Comfac Corporation"": 9,
    ""DigitalOcean, LLC"": 15,
    ""IPS Inc"": 15,
    ""Chang Way Technologies Co. Limited"": 45,
    ""Xhost Internet Solutions"": 12,
    ""Palo Alto Networks, Inc"": 36,
    ""Censys, Inc"": 6,
    ""UAB Host Baltic"": 36,
    ""Flyservers S.A"": 12,
    ""DemonVPS"": 3,
    ""Korean Education Network"": 6,
    ""Xhostis"": 6,
    ""Selectel Ltd."": 3,
    ""ZENLA"": 18,
    ""Ucloud Information Technology"": 3,
    ""Microsoft Corporation"": 6,
    ""Telekomunikasi Indonesia"": 6,
    ""Panq B.V"": 3,
    ""Forked Deer Electric Cooperative, Inc."": 3,
    ""CariNet, Inc."": 30,
    ""AB E-Commerce, LLC"": 6,
    ""Bunea TELECOM SRL"": 6,
    ""China United Network Communications Corporation Limited"": 3,
    ""Yisu"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Rethem Hosting LLC"": 3,
    ""Linode"": 15
  },
  ""regionName"": {
    ""North West"": 294,
    ""Metro Manila"": 9,
    ""California"": 69,
    ""Tokyo"": 15,
    ""Moscow"": 48,
    ""North Holland"": 18,
    ""Michigan"": 6,
    ""Vilnius"": 36,
    ""Kaunas"": 12,
    ""Arizona"": 3,
    ""Seoul"": 6,
    ""Virginia"": 6,
    ""Jakarta"": 6,
    ""New Jersey"": 3,
    ""Tennessee"": 3,
    ""Nevada"": 30,
    ""Illinois"": 9,
    ""South West"": 6,
    ""Timi\u0219 County"": 6,
    ""Beijing"": 3,
    ""Kowloon"": 3,
    ""Jiangsu"": 3,
    ""Georgia"": 12
  },
  ""country"": {
    ""Singapore"": 300,
    ""Philippines"": 9,
    ""United States"": 141,
    ""Japan"": 15,
    ""Russia"": 48,
    ""The Netherlands"": 18,
    ""Lithuania"": 48,
    ""South Korea"": 6,
    ""Indonesia"": 6,
    ""Romania"": 6,
    ""China"": 6,
    ""Hong Kong"": 3
  },
  ""account"": {
    ""hello"": 339,
    ""Administr"": 51,
    ""XfpjDCtuF"": 3,
    ""OVNpun"": 3,
    ""OkLOsO"": 3,
    ""(empty)"": 18,
    ""Test"": 63,
    ""Domain"": 30,
    ""root"": 18,
    ""Administrator"": 3,
    ""NudMlsolj"": 3,
    ""pcUmdS"": 3,
    ""EyapUl"": 3,
    ""eltons"": 15,
    ""administr"": 15,
    ""qniixzFKW"": 3,
    ""fRtjHl"": 3,
    ""sSAXxv"": 3,
    ""nmap"": 3,
    ""qidlpyvf"": 12,
    ""beio"": 3,
    ""hbCwJfddK"": 3,
    ""nThdym"": 3,
    ""twnngP"": 3
  },
  ""keyboard"": {
    ""Unknown"": 606
  },
  ""client_build"": {
    ""Unknown"": 606
  },
  ""client_name"": {
    ""Unknown"": 606
  },
  ""ip_type"": {
    ""hosting"": 375,
    ""Unknown"": 129,
    ""hosting & proxy"": 45,
    ""proxy"": 54,
    ""mobile"": 3
  }
}"
pDJ1LDHw,2024-05-23_stats.json,rdp_snitch,JSON,Thursday 23rd of May 2024 07:16:16 PM CDT,"{
  ""ip"": {
    ""139.162.27.10"": 196,
    ""103.56.6.112"": 6,
    ""146.190.46.106"": 6,
    ""103.120.18.135"": 8,
    ""185.198.69.11"": 2,
    ""87.251.75.145"": 6,
    ""185.198.69.19"": 2,
    ""185.198.69.15"": 4,
    ""198.235.24.143"": 6,
    ""185.198.69.9"": 2,
    ""185.198.69.29"": 2,
    ""167.94.138.47"": 2,
    ""185.198.69.28"": 2,
    ""45.227.254.26"": 8,
    ""45.227.254.9"": 12,
    ""185.198.69.2"": 2,
    ""185.198.69.17"": 2,
    ""167.94.138.113"": 2,
    ""194.165.16.72"": 4,
    ""107.167.82.123"": 2,
    ""117.16.46.253"": 4,
    ""185.170.144.3"": 4,
    ""45.227.254.54"": 4,
    ""92.53.65.200"": 2,
    ""128.14.209.34"": 12,
    ""165.154.172.87"": 2,
    ""64.124.50.139"": 4,
    ""36.91.222.100"": 4,
    ""198.235.24.226"": 6,
    ""136.144.35.68"": 2,
    ""213.109.202.235"": 12,
    ""152.86.127.201"": 2,
    ""71.6.134.235"": 20,
    ""103.120.18.225"": 2,
    ""158.51.14.114"": 4,
    ""205.210.31.184"": 6,
    ""134.209.107.59"": 4,
    ""193.29.13.175"": 4,
    ""87.251.75.64"": 2,
    ""116.140.196.215"": 2,
    ""154.83.13.133"": 2,
    ""112.4.139.162"": 2,
    ""104.152.52.133"": 2,
    ""173.230.139.171"": 8,
    ""45.33.63.234"": 2,
    ""194.165.16.37"": 4,
    ""198.235.24.57"": 6
  },
  ""asn"": {
    ""AS63949"": 206,
    ""AS140599"": 6,
    ""AS14061"": 10,
    ""AS131939"": 10,
    ""AS57523"": 18,
    ""AS208091"": 8,
    ""AS396982"": 24,
    ""AS398324"": 4,
    ""AS267784"": 24,
    ""AS48721"": 8,
    ""AS53755"": 2,
    ""AS18031"": 4,
    ""AS197414"": 4,
    ""AS49505"": 2,
    ""AS21859"": 12,
    ""AS135377"": 2,
    ""AS6461"": 4,
    ""AS7713"": 4,
    ""AS396356"": 2,
    ""AS208312"": 12,
    ""AS397057"": 2,
    ""AS10439"": 20,
    ""AS398465"": 4,
    ""AS42397"": 4,
    ""AS4837"": 2,
    ""AS142403"": 2,
    ""AS56046"": 2,
    ""AS14987"": 2
  },
  ""isp"": {
    ""LINODE"": 196,
    ""Comfac Corporation"": 6,
    ""DigitalOcean, LLC"": 10,
    ""IPS INC"": 10,
    ""Chang Way Technologies Co. Limited"": 18,
    ""Xhost Internet Solutions LP"": 12,
    ""Google LLC"": 24,
    ""Censys, Inc."": 4,
    ""Flyservers S.A."": 32,
    ""Input Output Flood LLC"": 2,
    ""Sangmyung University"": 4,
    ""OOO \""Network of data-centers \""Selectel\"""": 2,
    ""Zenlayer Inc"": 12,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Zayo Bandwidth"": 4,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Latitude.sh"": 2,
    ""Red Byte LLC"": 12,
    ""Forked Deer Electric Cooperative, Inc."": 2,
    ""CariNet, Inc."": 20,
    ""Rackdog, LLC"": 4,
    ""Bunea TELECOM SRL"": 4,
    ""China Unicom CHINA169 Network"": 2,
    ""Yisu Cloud LTD"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Rethem Hosting LLC"": 2,
    ""Akamai Technologies, Inc."": 10
  },
  ""org"": {
    ""Linode, LLC"": 196,
    ""Comfac Corporation"": 6,
    ""DigitalOcean, LLC"": 10,
    ""IPS Inc"": 10,
    ""Chang Way Technologies Co. Limited"": 30,
    ""Xhost Internet Solutions"": 8,
    ""Palo Alto Networks, Inc"": 24,
    ""Censys, Inc"": 4,
    ""UAB Host Baltic"": 24,
    ""Flyservers S.A"": 8,
    ""DemonVPS"": 2,
    ""Korean Education Network"": 4,
    ""Xhostis"": 4,
    ""Selectel Ltd."": 2,
    ""ZENLA"": 12,
    ""Ucloud Information Technology"": 2,
    ""Microsoft Corporation"": 4,
    ""Telekomunikasi Indonesia"": 4,
    ""Panq B.V"": 2,
    ""Forked Deer Electric Cooperative, Inc."": 2,
    ""CariNet, Inc."": 20,
    ""AB E-Commerce, LLC"": 4,
    ""Bunea TELECOM SRL"": 4,
    ""China United Network Communications Corporation Limited"": 2,
    ""Yisu"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Rethem Hosting LLC"": 2,
    ""Linode"": 10
  },
  ""regionName"": {
    ""North West"": 196,
    ""Metro Manila"": 6,
    ""California"": 46,
    ""Tokyo"": 10,
    ""Moscow"": 32,
    ""North Holland"": 12,
    ""Michigan"": 4,
    ""Vilnius"": 24,
    ""Kaunas"": 8,
    ""Arizona"": 2,
    ""Seoul"": 4,
    ""Virginia"": 4,
    ""Jakarta"": 4,
    ""New Jersey"": 2,
    ""Tennessee"": 2,
    ""Nevada"": 20,
    ""Illinois"": 6,
    ""South West"": 4,
    ""Timi\u0219 County"": 4,
    ""Beijing"": 2,
    ""Kowloon"": 2,
    ""Jiangsu"": 2,
    ""Georgia"": 8
  },
  ""country"": {
    ""Singapore"": 200,
    ""Philippines"": 6,
    ""United States"": 94,
    ""Japan"": 10,
    ""Russia"": 32,
    ""The Netherlands"": 12,
    ""Lithuania"": 32,
    ""South Korea"": 4,
    ""Indonesia"": 4,
    ""Romania"": 4,
    ""China"": 4,
    ""Hong Kong"": 2
  },
  ""account"": {
    ""hello"": 226,
    ""Administr"": 34,
    ""XfpjDCtuF"": 2,
    ""OVNpun"": 2,
    ""OkLOsO"": 2,
    ""(empty)"": 12,
    ""Test"": 42,
    ""Domain"": 20,
    ""root"": 12,
    ""Administrator"": 2,
    ""NudMlsolj"": 2,
    ""pcUmdS"": 2,
    ""EyapUl"": 2,
    ""eltons"": 10,
    ""administr"": 10,
    ""qniixzFKW"": 2,
    ""fRtjHl"": 2,
    ""sSAXxv"": 2,
    ""nmap"": 2,
    ""qidlpyvf"": 8,
    ""beio"": 2,
    ""hbCwJfddK"": 2,
    ""nThdym"": 2,
    ""twnngP"": 2
  },
  ""keyboard"": {
    ""Unknown"": 404
  },
  ""client_build"": {
    ""Unknown"": 404
  },
  ""client_name"": {
    ""Unknown"": 404
  },
  ""ip_type"": {
    ""hosting"": 250,
    ""Unknown"": 86,
    ""hosting & proxy"": 30,
    ""proxy"": 36,
    ""mobile"": 2
  }
}"
YhQES8Zb,2024-05-23_stats.json,rdp_snitch,JSON,Thursday 23rd of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""139.162.27.10"": 98,
    ""103.56.6.112"": 3,
    ""146.190.46.106"": 3,
    ""103.120.18.135"": 4,
    ""185.198.69.11"": 1,
    ""87.251.75.145"": 3,
    ""185.198.69.19"": 1,
    ""185.198.69.15"": 2,
    ""198.235.24.143"": 3,
    ""185.198.69.9"": 1,
    ""185.198.69.29"": 1,
    ""167.94.138.47"": 1,
    ""185.198.69.28"": 1,
    ""45.227.254.26"": 4,
    ""45.227.254.9"": 6,
    ""185.198.69.2"": 1,
    ""185.198.69.17"": 1,
    ""167.94.138.113"": 1,
    ""194.165.16.72"": 2,
    ""107.167.82.123"": 1,
    ""117.16.46.253"": 2,
    ""185.170.144.3"": 2,
    ""45.227.254.54"": 2,
    ""92.53.65.200"": 1,
    ""128.14.209.34"": 6,
    ""165.154.172.87"": 1,
    ""64.124.50.139"": 2,
    ""36.91.222.100"": 2,
    ""198.235.24.226"": 3,
    ""136.144.35.68"": 1,
    ""213.109.202.235"": 6,
    ""152.86.127.201"": 1,
    ""71.6.134.235"": 10,
    ""103.120.18.225"": 1,
    ""158.51.14.114"": 2,
    ""205.210.31.184"": 3,
    ""134.209.107.59"": 2,
    ""193.29.13.175"": 2,
    ""87.251.75.64"": 1,
    ""116.140.196.215"": 1,
    ""154.83.13.133"": 1,
    ""112.4.139.162"": 1,
    ""104.152.52.133"": 1,
    ""173.230.139.171"": 4,
    ""45.33.63.234"": 1,
    ""194.165.16.37"": 2,
    ""198.235.24.57"": 3
  },
  ""asn"": {
    ""AS63949"": 103,
    ""AS140599"": 3,
    ""AS14061"": 5,
    ""AS131939"": 5,
    ""AS57523"": 9,
    ""AS208091"": 4,
    ""AS396982"": 12,
    ""AS398324"": 2,
    ""AS267784"": 12,
    ""AS48721"": 4,
    ""AS53755"": 1,
    ""AS18031"": 2,
    ""AS197414"": 2,
    ""AS49505"": 1,
    ""AS21859"": 6,
    ""AS135377"": 1,
    ""AS6461"": 2,
    ""AS7713"": 2,
    ""AS396356"": 1,
    ""AS208312"": 6,
    ""AS397057"": 1,
    ""AS10439"": 10,
    ""AS398465"": 2,
    ""AS42397"": 2,
    ""AS4837"": 1,
    ""AS142403"": 1,
    ""AS56046"": 1,
    ""AS14987"": 1
  },
  ""isp"": {
    ""LINODE"": 98,
    ""Comfac Corporation"": 3,
    ""DigitalOcean, LLC"": 5,
    ""IPS INC"": 5,
    ""Chang Way Technologies Co. Limited"": 9,
    ""Xhost Internet Solutions LP"": 6,
    ""Google LLC"": 12,
    ""Censys, Inc."": 2,
    ""Flyservers S.A."": 16,
    ""Input Output Flood LLC"": 1,
    ""Sangmyung University"": 2,
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""Zenlayer Inc"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Zayo Bandwidth"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Latitude.sh"": 1,
    ""Red Byte LLC"": 6,
    ""Forked Deer Electric Cooperative, Inc."": 1,
    ""CariNet, Inc."": 10,
    ""Rackdog, LLC"": 2,
    ""Bunea TELECOM SRL"": 2,
    ""China Unicom CHINA169 Network"": 1,
    ""Yisu Cloud LTD"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Rethem Hosting LLC"": 1,
    ""Akamai Technologies, Inc."": 5
  },
  ""org"": {
    ""Linode, LLC"": 98,
    ""Comfac Corporation"": 3,
    ""DigitalOcean, LLC"": 5,
    ""IPS Inc"": 5,
    ""Chang Way Technologies Co. Limited"": 15,
    ""Xhost Internet Solutions"": 4,
    ""Palo Alto Networks, Inc"": 12,
    ""Censys, Inc"": 2,
    ""UAB Host Baltic"": 12,
    ""Flyservers S.A"": 4,
    ""DemonVPS"": 1,
    ""Korean Education Network"": 2,
    ""Xhostis"": 2,
    ""Selectel Ltd."": 1,
    ""ZENLA"": 6,
    ""Ucloud Information Technology"": 1,
    ""Microsoft Corporation"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Panq B.V"": 1,
    ""Forked Deer Electric Cooperative, Inc."": 1,
    ""CariNet, Inc."": 10,
    ""AB E-Commerce, LLC"": 2,
    ""Bunea TELECOM SRL"": 2,
    ""China United Network Communications Corporation Limited"": 1,
    ""Yisu"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Rethem Hosting LLC"": 1,
    ""Linode"": 5
  },
  ""regionName"": {
    ""North West"": 98,
    ""Metro Manila"": 3,
    ""California"": 23,
    ""Tokyo"": 5,
    ""Moscow"": 16,
    ""North Holland"": 6,
    ""Michigan"": 2,
    ""Vilnius"": 12,
    ""Kaunas"": 4,
    ""Arizona"": 1,
    ""Seoul"": 2,
    ""Virginia"": 2,
    ""Jakarta"": 2,
    ""New Jersey"": 1,
    ""Tennessee"": 1,
    ""Nevada"": 10,
    ""Illinois"": 3,
    ""South West"": 2,
    ""Timi\u0219 County"": 2,
    ""Beijing"": 1,
    ""Kowloon"": 1,
    ""Jiangsu"": 1,
    ""Georgia"": 4
  },
  ""country"": {
    ""Singapore"": 100,
    ""Philippines"": 3,
    ""United States"": 47,
    ""Japan"": 5,
    ""Russia"": 16,
    ""The Netherlands"": 6,
    ""Lithuania"": 16,
    ""South Korea"": 2,
    ""Indonesia"": 2,
    ""Romania"": 2,
    ""China"": 2,
    ""Hong Kong"": 1
  },
  ""account"": {
    ""hello"": 113,
    ""Administr"": 17,
    ""XfpjDCtuF"": 1,
    ""OVNpun"": 1,
    ""OkLOsO"": 1,
    ""(empty)"": 6,
    ""Test"": 21,
    ""Domain"": 10,
    ""root"": 6,
    ""Administrator"": 1,
    ""NudMlsolj"": 1,
    ""pcUmdS"": 1,
    ""EyapUl"": 1,
    ""eltons"": 5,
    ""administr"": 5,
    ""qniixzFKW"": 1,
    ""fRtjHl"": 1,
    ""sSAXxv"": 1,
    ""nmap"": 1,
    ""qidlpyvf"": 4,
    ""beio"": 1,
    ""hbCwJfddK"": 1,
    ""nThdym"": 1,
    ""twnngP"": 1
  },
  ""keyboard"": {
    ""Unknown"": 202
  },
  ""client_build"": {
    ""Unknown"": 202
  },
  ""client_name"": {
    ""Unknown"": 202
  },
  ""ip_type"": {
    ""hosting"": 125,
    ""Unknown"": 43,
    ""hosting & proxy"": 15,
    ""proxy"": 18,
    ""mobile"": 1
  }
}"
GU0ygMUP,entrypoint dashboard,Sergio_Istea,Bash,Thursday 23rd of May 2024 07:13:44 PM CDT,"#!/bin/bash
set -e

# instalar apache2 y git

apt update && apt install apache2 git -y


# clonar repositorio via https

git clone https://gitlab.com/sergio.pernas1/dashboard.git /app


# Definir en que rama se debe desplegar al aplicacion

# ${BRANCHAPP:-main} si la variable esta vacia porque no se definio al momento de lanzar el contenedor
# entonces se rellna con la cadena 'main' para evitar el error de operador unario de bash a la hora
# de evaluar la condicion.


if [ $BRANCHAPP == 'main' ];then

	cd /app && git checkout main 

elif [ $BRANCHAPP == 'testing' ];then

	cd /app && git checkout testing

elif [ $BRANCHAPP == 'develop' ];then

	cd /app && git checkout develop

else
	echo ""se debe indicar la rama -v BRANCHAPP=main|testing|develop""
	exit 1


if	


cp /app/apache2.conf /etc/apache2/apache2.conf
cp /app/000-default.conf /etc/apache2/sites-available/


exec $@
"
hMRT3RZC,Tugas Akhir - ESP32 Node Mesh,mudhita_triari,C++,Thursday 23rd of May 2024 06:32:03 PM CDT,"#include <painlessMesh.h>

#define MESH_PREFIX     ""yourMeshNetwork""
#define MESH_PASSWORD   ""yourMeshPassword""
#define MESH_PORT       5555

#define LED_PIN 2 // Pin untuk LED indikator

Scheduler userScheduler; // to control your personal task
painlessMesh mesh;

uint32_t lastSendTime = 0;
uint32_t sendInterval = 5000; // Kirim data setiap 5 detik

void receivedCallback(uint32_t from, String &msg) {
  Serial.printf(""Received from %u msg=%s\n"", from, msg.c_str());
}

void newConnectionCallback(uint32_t nodeId) {
  Serial.printf(""--> New Connection, nodeId = %u\n"", nodeId);
}

void changedConnectionCallback() {
  Serial.printf(""Changed connections\n"");
  if (mesh.getNodeList().size() == 0) {
    digitalWrite(LED_PIN, LOW);     // Matikan LED jika tidak ada koneksi
  } else {
    digitalWrite(LED_PIN, HIGH);    // Nyalakan LED jika ada koneksi
  }
}

void nodeTimeAdjustedCallback(int32_t offset) {
  Serial.printf(""Adjusted time %u. Offset = %d\n"", mesh.getNodeTime(), offset);
}

void sendRandomData() {
  uint32_t now = millis();
  if (now - lastSendTime >= sendInterval) {
    lastSendTime = now;
    if (mesh.getNodeList().size() > 0) { 
      uint32_t randomData = random(100);
      String message = ""Random Data: "" + String(randomData);
      mesh.sendBroadcast(message);
      Serial.println(""Sent: "" + message);
    } else {
      Serial.println(""Not connected to the mesh network"");
    }
  }
}


void setup() {
  Serial.begin(115200);

  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // Mematikan LED pada awalnya

  mesh.setDebugMsgTypes(ERROR | STARTUP);
  mesh.init(MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT);
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);

  Task sendRandomDataTask(1000, TASK_FOREVER, &sendRandomData); // Buat objek Task
  userScheduler.addTask(sendRandomDataTask); // Tambahkan objek Task ke scheduler
  sendRandomDataTask.enable(); // Aktifkan objek Task
}

void loop() {
  mesh.update();
  userScheduler.execute(); // Jalankan scheduler
}
"
dU2syBXr,Tugas Akhir - ESP32 Gateway,mudhita_triari,C++,Thursday 23rd of May 2024 06:28:58 PM CDT,"#include <WiFi.h>
#include <painlessMesh.h>

const char* ssid =      ""vivo V29"";
const char* password =  ""Nabila041185"";

#define MESH_PREFIX     ""yourMeshNetwork""
#define MESH_PASSWORD   ""yourMeshPassword""
#define MESH_PORT       5555

#define LED_PIN 2

Scheduler userScheduler;
painlessMesh mesh;

void receivedCallback(uint32_t from, String &msg) {
  Serial.printf(""Received from %u msg=%s\n"", from, msg.c_str());
  Serial.println(""Data diterima dari Node Mesh: "" + msg);                 // Tambahkan baris ini untuk mencetak data ke serial monitor
}

void newConnectionCallback(uint32_t nodeId) {
  Serial.printf(""--> New Connection, nodeId = %u\n"", nodeId);
}

void changedConnectionCallback() {
  Serial.printf(""Changed connections\n"");
  if (mesh.getNodeList().size() == 0) {
    digitalWrite(LED_PIN, LOW); // Matikan LED jika tidak ada koneksi
  } else {
    digitalWrite(LED_PIN, HIGH); // Nyalakan LED jika ada koneksi
  }
}

void nodeTimeAdjustedCallback(int32_t offset) {
  Serial.printf(""Adjusted time %u. Offset = %d\n"", mesh.getNodeTime(), offset);
}

void setup() {
  Serial.begin(115200);

  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW); // Matikan LED pada awalnya

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println(""Connecting to WiFi..."");
  }
  Serial.println(""Connected to WiFi"");

  mesh.setDebugMsgTypes(ERROR | STARTUP);
  mesh.init(MESH_PREFIX, MESH_PASSWORD, &userScheduler, MESH_PORT);
  mesh.onReceive(&receivedCallback);
  mesh.onNewConnection(&newConnectionCallback);
  mesh.onChangedConnections(&changedConnectionCallback);
  mesh.onNodeTimeAdjusted(&nodeTimeAdjustedCallback);
}

void loop() {
  mesh.update();
}
"
Gb2U3eBz,Untitled,bstefano79,JavaScript,Thursday 23rd of May 2024 05:31:45 PM CDT,"
const paragErrore = document.querySelector('#errore-log-in');
const bottoneSubmit = document.querySelector('#submit-btn');
 
 
// console.log(InputPasswordLogIn);
 
bottoneSubmit.addEventListener('click', function(event){
    event.preventDefault();

    const InputUserNameLogIn = document.querySelector('#username');
    const InputPasswordLogIn = document.querySelector('#password');

    const richiesta = new XMLHttpRequest();

    richiesta.open('POST', 'http://localhost/vsc/php/log-in.php', true);
 
    richiesta.setRequestHeader(""Content-Type"", ""application/x-www-form-urlencoded"");

    richiesta.onreadystatechange = function () {
        if (richiesta.readyState === 4) {
            if (richiesta.status === 200) {
                console.log(richiesta.responseText);
            } else {
                console.error('Errore durante la richiesta. Codice di stato:', richiesta.status);
            }
        }
    };

    const data = ""username="" + encodeURIComponent(InputUserNameLogIn) + ""&password="" + encodeURIComponent(InputPasswordLogIn); 
    
    richiesta.send(data);
    
});"
HAfA7pQE,text_case_converter,Python253,Python,Thursday 23rd of May 2024 05:31:15 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: text_case_converter.py
# Version: 1.0.2
# Author: Jeoi Reqi

""""""
Description:
    This script offers functionality to convert text between various case formats.
    These include Snake-Case, Title-Case, Kebab-Case, Pascal-Case, Camel-Case, Uppercase & Lowercase.

Requirements:
    - Python 3.x
    - No additional dependencies required.

Functions:
    - to_snake_case(text):
        Converts text to Snake-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Snake-Case format.
    
    - to_title_case(text):
        Converts text to Title-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Title-Case format.

    - to_kebab_case(text):
        Converts text to Kebab-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Kebab-Case format.

    - to_pascal_case(text):
        Converts text to Pascal-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Pascal-Case format.

    - to_camel_case(text):
        Converts text to Camel-Case format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Camel-Case format.

    - to_uppercase(text):
        Converts text to Uppercase format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Uppercase format.

    - to_lowercase(text):
        Converts text to Lowercase format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Lowercase format.

Usage:
    - Call the main() function to execute the script.
    - Follow the prompts to choose the conversion option and enter the text to be converted.
    - The converted text will be saved to a file in the current working directory.

Example Output:
    Input Text: ""this is a test of case converting""

        1: Snake-Case:
           - Output: ""this_is_a_test_of_case_converting""
        
        2: Title-Case:
           - Output: ""This Is A Test Of Case Converting""
        
        3: Kebab-Case:
           - Output: ""this-is-a-test-of-case-converting""
        
        4: Pascal-Case:
           - Output: ""ThisIsATestOfCaseConverting""
        
        5: Camel-Case:
           - Output: ""ThIs Is A TeSt Of CaSe CoNvErTiNg""

        6: Uppercase:
           - Output: ""THIS IS A TEST OF CASE CONVERTING""
        
        7: Lowercase:
           - Output: ""this is a test of case converting""
    
Additional Notes:
    - The script allows for easy conversion between different case formats commonly used in programming and text formatting.
    - The file name for the converted text will be based on the chosen conversion option.
""""""

def to_snake_case(text):
    """"""
    Converts text to Snake-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Snake-Case format.
    """"""
    return '_'.join(text.lower().split())

def to_title_case(text):
    """"""
    Converts text to Title-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Title-Case format.
    """"""
    return ' '.join(word.capitalize() for word in text.split())

def to_kebab_case(text):
    """"""
    Converts text to Kebab-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Kebab-Case format.
    """"""
    return '-'.join(text.lower().split())

def to_pascal_case(text):
    """"""
    Converts text to Pascal-Case format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Pascal-Case format.
    """"""
    words = text.split()
    pascal_case_words = [word.capitalize() for word in words]
    return ''.join(pascal_case_words)

def to_camel_case(text):
    """"""
    Convert a given string to Camel Case where each letter's case alternates,
    starting with uppercase.
    
    Parameters:
        text (str): The input string.
        
    Returns:
        str: The Camel Case converted string.
    """"""
    result = []
    upper = True

    for char in text:
        if char.isalpha():
            if upper:
                result.append(char.upper())
            else:
                result.append(char.lower())
            upper = not upper
        else:
            result.append(char)

    return ''.join(result)

def to_uppercase(text):
    """"""
    Converts text to Uppercase format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Uppercase format.
    """"""
    return text.upper()

def to_lowercase(text):
    """"""
    Converts text to Lowercase format.
    
    Parameters:
        text (str): The input text to be converted.
    
    Returns:
        str: The text converted to Lowercase format.
    """"""
    return text.lower()

def main():
    """"""
    Main function of the script.
    
    Prompts the user to choose a conversion option and input text to be converted.
    Executes the selected conversion function and saves the converted text to a file.
    """"""
    menu = """"""
Choose a case conversion option below:

            1: Snake-Case
            2: Title-Case
            3: Kebab-Case
            4: Pascal-Case
            5: Camel-Case
            6: Uppercase
            7: Lowercase
            0: Exit
    """"""

    while True:
        print(menu)
        choice = input(""Enter your choice (1-7) or press 0 to exit: "")

        if choice == '0':
            print(""\nExiting Program...   Goodbye!\n"")
            break

        if choice not in {'1', '2', '3', '4', '5', '6', '7'}:
            print(""\nInvalid choice!\nPlease enter a number from 1 to 7 or press 0 to exit."")
            continue

        input_text = input(""\nEnter the text you want to convert: "")

        if choice == '1':
            converted_text = to_snake_case(input_text)
            filename = ""converted_snake_case.txt""
        elif choice == '2':
            converted_text = to_title_case(input_text)
            filename = ""converted_title_case.txt""
        elif choice == '3':
            converted_text = to_kebab_case(input_text)
            filename = ""converted_kebab_case.txt""
        elif choice == '4':
            converted_text = to_pascal_case(input_text)
            filename = ""converted_pascal_case.txt""
        elif choice == '5':
            converted_text = to_camel_case(input_text)
            filename = ""converted_camel_case.txt""
        elif choice == '6':
            converted_text = to_uppercase(input_text)
            filename = ""converted_uppercase.txt""
        elif choice == '7':
            converted_text = to_lowercase(input_text)
            filename = ""converted_lowercase.txt""

        with open(filename, ""w"", encoding=""utf-8"") as file:
            file.write(converted_text)
        
        print(f""\nConverted Text Has Been Saved To:\n\n\t\t'{filename}'.\n\nConverted Text:\n\n\t\t{converted_text}"")

        input(""\nPress Enter to return to the main menu..."")

if __name__ == ""__main__"":
    main()
"
m0EsVLvA,to_lowercase,Python253,Python,Thursday 23rd of May 2024 05:30:29 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_lowercase.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Lowercase format.

Requirements:
    - Python 3.x

Functions:
    - to_lowercase(text): Converts input text to Lowercase format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Lowercase format.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_lowercase.txt"" in the same directory as the script.

Example Output:
    Input Text: ""This is a Test of Case Converting""
    
    Converted Text Has Been Saved To: 'converted_lowercase.txt'.
    
    Converted Text:
            this is a test of case converting
""""""

def to_lowercase(text):
    """"""
    Convert a given string to Lowercase format.
    
    Parameters:
        text (str): The input string.
        
    Returns:
        str: The Lowercase converted string.
    """"""
    return text.lower()

def main():
    """"""
    Main function to prompt user input and convert the text to Lowercase.
    The converted text is saved to a file.
    """"""
    input_text = input(""Enter the text you want to convert to Lowercase: "")
    lowercase_text = to_lowercase(input_text)
    
    with open(""converted_lowercase.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(lowercase_text)
    
    print(""\nConverted Text Has Been Saved To: 'converted_lowercase.txt'.\n"")
    print(""Converted Text:\n"")
    print(f""\t\t{lowercase_text}"")

if __name__ == ""__main__"":
    main()

"
7h6Tq4yt,to_uppercase,Python253,Python,Thursday 23rd of May 2024 05:29:51 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_uppercase.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Uppercase format, where all letters are in uppercase.
    The converted text is then saved to a file named ""converted_uppercase.txt"" in UTF-8 encoding.

Requirements:
    - Python 3.x

Functions:
    - to_uppercase(text): Converts input text to Uppercase format.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Uppercase format.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_uppercase.txt"" in the same directory as the script.

Example Output:
    Input Text: ""This is a Test of Case Converting""
    
    Converted Text Has Been Saved To: 'converted_uppercase.txt'.
    
    Converted Text:
            THIS IS A TEST OF CASE CONVERTING
""""""

def to_uppercase(text):
    """"""
    Convert a given string to Uppercase format.
    
    Parameters:
        text (str): The input string.
        
    Returns:
        str: The Uppercase converted string.
    """"""
    return text.upper()

def main():
    """"""
    Main function to prompt user input and convert the text to Uppercase.
    The converted text is saved to a file.
    """"""
    input_text = input(""Enter the text you want to convert to Uppercase: "")
    uppercase_text = to_uppercase(input_text)
    
    with open(""converted_uppercase.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(uppercase_text)
    
    print(""\nConverted Text Has Been Saved To: 'converted_uppercase.txt'.\n"")
    print(""Converted Text:\n"")
    print(f""\t\t{uppercase_text}"")

if __name__ == ""__main__"":
    main()

"
RKgVrXuu,"Объявления для донатеров, оценка сервера, вознаграждения — MyCommand",JaycobYT,YAML,Thursday 23rd of May 2024 05:24:35 PM CDT,"#-----------------------------------------------------#
#                                                     #
#  Для работы всех необходимых плейсхолдеров          #
#  установите расширения для плагина PlaceholderAPI:  #
#                                                     #
#  /papi ecloud download Math                         #
#  /papi ecloud download LuckPerms                    #
#  /papi ecloud download Statistic                    #
#  /papi reload                                       #
#                                                     #
#                                                     #
#-----------------------------------------------------#
#                                                     #
#   1. Объявление для донат группы                    #
#                                                     #
#-----------------------------------------------------# 
broadcast_vip:
  command: /bcvip
  type: BROADCAST_TEXT
  text:
  - ''
  - '  &e———————————————————————'
  - ''
  - '&e  |  Объявление  '
  - ''
  - '&e  |  &fАвтор: &7$player  '
  - '&e  |  &fСообщение: &7$multiargs  '
  - ''
  - '  &e———————————————————————'
  - ''
  register: true
  permission-required: true
  permission-node: command.broadcast.vip  # Право для доступа к команде /bcvip
  permission-error: '&cУ вас нет доступа'
  required_args: 1
  placeholders_replace_mode: NO_PLACEHOLDER_API
  broadcast_message_permission_node: broadcast.vip  # Право для просмотра объявления
  error-message: '&eОбъявление  |  &fЧтобы отправить объявление &7VIP &fигрокам: &7/bcvip [объявление]'


#-----------------------------------------------------#
#                                                     #
#   2. Оценка сервера по 10-ти бальной шкале          #
#                                                     #
#-----------------------------------------------------# 
vote:
  command: /vote
  type: RUN_CONSOLE
  runcmd:
  - '$Script$%if%%luckperms_has_permission_server.vote%==yes'
  - '%PlayerOptions%playSound: BLOCK_NOTE_BLOCK_HARP'
  - '$text$'
  - '$text$&e Оценка  |  &fВы уже оценили сервер. Спасибо!'
  - '$text$'
  - '$Script$%elseif%$arg1>10<or>%elseif%$arg1<1'
  - '%PlayerOptions%playSound: BLOCK_NOTE_BLOCK_HARP'
  - '$text$'
  - '$text$&e Оценка  |  &fОцените сервер по шкалле от &71 &fдо &710 &fбаллов'
  - '$text$'
  - '$Script$%else%'
  - '$Script$%Variable%vote_amount+1'  # Предварительно создайте переменную: /mycmd-variables create vote_amount
  - '$Script$%Variable%vote_points+$arg1'  # Предварительно создайте переменную: /mycmd-variables create vote_points
  - '/lp user $player permission set server.vote'
  - '%PlayerOptions%playSound: ENTITY_PLAYER_LEVELUP'
  - '$text$'
  - '$text$'
  - '$text$&e Оценка  |  &fВы оценили сервер на &e$arg1 балла'
  - '$text$&e Оценка  |  &fСредний балл: &e%math_1:_{mycommand_variables_vote_points}/{mycommand_variables_vote_amount}% &7(Голосов: &f%mycommand_variables_vote_amount%&7)'
  - '$text$'
  - '$text$'
  register: true
  permission-required: false


#-----------------------------------------------------#
#                                                     #
#   3. Награда самому активному игроку недели         #
#                                                     #
#-----------------------------------------------------# 
weekly_reward:
  command: /weeklyreward
  type: RUN_CONSOLE
  runcmd:
  - '$broadcasttext$'
  - '$broadcasttext$  &e———————————————————————'
  - '$broadcasttext$'
  - '$broadcasttext$&e  |  Игрок Недели'
  - '$broadcasttext$'
  - '$broadcasttext$&e  |  &fНик: &7%ajlb_lb_statistic_hours_played_1_weekly_name%'  # Предварительно добавьте лидерборд в ajLeaderboards: /ajlb add statistic_hours_played
  - '$broadcasttext$&e  |  &fНаиграно: &7%ajlb_lb_statistic_hours_played_1_weekly_value% ч.'
  - '$broadcasttext$'
  - '$broadcasttext$&e  |  &fНаграда: &e◎ 100'
  - '$broadcasttext$'
  - '$broadcasttext$  &e———————————————————————'
  - '$broadcasttext$'
  - points give %ajlb_lb_statistic_hours_played_1_weekly_name% 100
  - cmi sound block_note_block_chime -all
  register: true
  permission-required: true
  permission-node: command.reward.weekly
  permission-error: '&cУ вас нет доступа'"
zwcsvnGc,Untitled,Moolah60,JSON,Thursday 23rd of May 2024 05:15:18 PM CDT,"[
  13004014,
  32337318,
  16091727,
  14440447,
  33194557,
  6037396,
  34176694,
  15177829,
  33434496,
  33496926,
  9738544,
  33406198,
  33288534,
  34057446,
  743368,
  33024816,
  11173311,
  8375013,
  11382109,
  7813622,
  33209284,
  33425809,
  34078896,
  17224576,
  17399032,
  8223016,
  34235907,
  14955046,
  33455812,
  33246068,
  34009434,
  6467371,
  11106095,
  14693635,
  7070420,
  34036368,
  16644731,
  32791019,
  14629043,
  33762143,
  33976229,
  32662234,
  14502679,
  14350635,
  15142697,
  14882263,
  32616464,
  10775979,
  33803874,
  14820895,
  16766900,
  34120199,
  3013964,
  8858239,
  17058542,
  15318406,
  17397606,
  32835591,
  7842921,
  16999249,
  15181087,
  33915725,
  13614130,
  16917592,
  33166928,
  13725307,
  12908952,
  17155779,
  33566930,
  16929370,
  4649502,
  13967574,
  16885916,
  11463832,
  3935264,
  33045485,
  11380426,
  14266048,
  32815427,
  32456793,
  13328597,
  34164036,
  15720771,
  9512441,
  32805314,
  16872802,
  6553138,
  10401331,
  9227310,
  17388068,
  13527012,
  10116462,
  8776141,
  9559095,
  7330634,
  15048079,
  34116930,
  9236254,
  32911897,
  5668519,
  33647377,
  12428983,
  5356318,
  32663753,
  32768709,
  10207428,
  33061855,
  13624556,
  32572780,
  11779868,
  13434829,
  11015988,
  13562739,
  34108349,
  32529370,
  14558188,
  14482960,
  32978762,
  9143152,
  33863756,
  33883613,
  33516396,
  14282891,
  6684507,
  14079555,
  33585553,
  34099833,
  9291819,
  16608937,
  33467956,
  32608043,
  33648438,
  14628047,
  34182944,
  32660769,
  33629561,
  33346840,
  16872067,
  9195950,
  14779398,
  33592316,
  14699271,
  33986835,
  34165318,
  14464414,
  33942845,
  6072123,
  3204984,
  7000896,
  6611212,
  16692878,
  7095755,
  11015232,
  17336621,
  6402262,
  33529641,
  6989143,
  33707894,
  33417231,
  32742225,
  12017545,
  12871253,
  15328131,
  16801407,
  11511802,
  12045393,
  33515600,
  10649335,
  9403763,
  16998559,
  34058987,
  7359996,
  33323511,
  10371962,
  34270628,
  8299520,
  9403787,
  12154338,
  32461782,
  7493649,
  13691611,
  32746761,
  7101674,
  33411983,
  17095690,
  32910611,
  9656047,
  33735647,
  14341513,
  5533083,
  34031702,
  15914701,
  9993697,
  10983635,
  14567266,
  32972752,
  33529026,
  9573598,
  15814182,
  6884890,
  34171128,
  33570997,
  15192933,
  8994381,
  33682522,
  9416760,
  16698334,
  3848553,
  17219463,
  9406776,
  33866424,
  33976713,
  16558303,
  16291104,
  33277960,
  32377821,
  12334005,
  32326005,
  8993725,
  32661423,
  32585991,
  33858176,
  32615358,
  15739328,
  8870463,
  33961498,
  32468002,
  6395432,
  7393604,
  13052448,
  16446548,
  34042821,
  16888447,
  33770701,
  14179362,
  32368438,
  32579528,
  15706993,
  32758743,
  13174750,
  33691259,
  34165448,
  33642394,
  10386950,
  10189853,
  33784864,
  15246187,
  33525519,
  15442218,
  33970763,
  5695358,
  7556015,
  33368062,
  12288022,
  15975620,
  10145971,
  8263032,
  13566750,
  11209558,
  5670093,
  15448861,
  17247454,
  9344988,
  32932140,
  8066302,
  10741720,
  14556723,
  17284322,
  12067180,
  33764032,
  6531427,
  34321843,
  32531437,
  17284376,
  5035960,
  17080190,
  34062400,
  32041770,
  33894589,
  32766302,
  32030288,
  33239549,
  15481055,
  33847852,
  34077529,
  15646419,
  33455464,
  14564535,
  33537620,
  32693605,
  32452316,
  33104282,
  7756441,
  33830716,
  14116868,
  17164606,
  16070189,
  32062966,
  32973269,
  33969610,
  16891560,
  14321695,
  15941371,
  6899457,
  32588428,
  16636812,
  14076412,
  14622155,
  34024103,
  33540549,
  33530017,
  8907737,
  9861185,
  34167701,
  16424269,
  13255040,
  6851457,
  499206,
  33500817,
  33759249,
  6661107,
  32427185,
  33954053,
  32936244,
  16632937,
  32812550,
  15922041,
  17335188,
  14359611,
  10236333,
  34177943,
  33043241,
  12546226,
  15560564,
  33309309,
  33916445,
  16902389,
  8110444,
  33361097,
  12812448,
  32921120,
  34084293,
  7241581,
  33375497,
  34334614,
  12158471,
  15690492,
  32799212,
  32839442,
  10382829,
  16549114,
  32510486,
  34030109,
  12637441,
  10069997,
  6095770,
  15724292,
  12777874,
  15090896,
  33139742,
  33360396,
  33400625,
  34094497,
  6719389,
  16773915,
  14310194,
  13845858,
  33490471,
  9099970,
  9779960,
  6154579,
  15517221,
  17166110,
  6489907,
  33159325,
  8111544,
  16011593,
  33855975,
  33643049,
  33582341,
  8720367,
  33619719,
  33679542,
  13523570,
  7146618,
  15886275,
  32811908,
  17343135,
  11457852,
  6509298,
  33391108,
  34344771,
  32753801,
  17344369,
  8407845,
  15642692,
  15906722,
  15199506,
  16508165,
  12083216,
  15792010,
  33579410,
  32575469,
  12235529,
  12845591,
  32324829,
  15769370,
  13293156,
  13218366,
  9574806,
  33250420,
  13140824,
  34035276,
  17162615,
  8257366,
  15080148,
  33167685,
  33691907,
  32438548,
  5453059,
  11692823,
  14559584,
  9774458,
  13522688,
  33525996,
  11650434,
  33840239,
  12382954,
  33822594,
  14796051,
  16415501,
  16890301,
  13141177,
  33517844,
  33021179,
  8993169,
  13944486,
  10085331,
  15601929,
  6463499,
  2521160,
  34003173,
  32358480,
  8945043,
  33666691,
  32812057,
  8977029,
  33914989,
  34320907,
  5796181,
  33944674,
  16563501,
  14698371,
  10725990,
  34065440,
  32810007,
  33231892,
  32527898,
  13305535,
  15832059,
  4094783,
  33336664,
  5400884,
  32070877,
  4027884,
  10453081,
  32837464,
  33766521,
  33100970,
  33434409,
  17125927,
  7577509,
  6722234,
  34248247,
  32806385,
  15286288,
  13156344,
  17170955,
  9431054,
  8383456,
  11454686,
  12966716,
  32029463,
  32851856,
  33863780,
  7524100,
  17259528,
  13041232,
  33384051,
  15619611,
  11205532,
  32870726,
  12853244,
  16750785,
  5946966,
  4501556,
  33484166,
  13353865,
  8420627,
  33877344,
  10206755,
  17177976,
  12260065,
  9639411,
  17314122,
  33451687,
  34346131,
  32658263,
  33713675,
  32324189,
  11344286,
  16436450,
  32072404,
  7035023,
  33139985,
  11853096,
  32810046,
  15582541,
  33374804,
  16343136,
  33703850,
  9108571,
  32461924,
  32564112,
  12694192,
  32065353,
  9460306,
  33826756,
  32341628,
  16409752,
  33398133,
  32341856,
  9209286,
  33521470,
  33853610,
  33215920,
  11177418,
  33563126,
  11265729,
  32752505,
  34065714,
  14767698,
  13993616,
  33921804,
  32038941,
  14046546,
  17019509,
  5799711,
  34174605,
  10445520,
  8287244,
  33090424,
  11052614,
  13304348,
  7112430,
  33993801,
  3333186,
  15277305,
  33688328,
  16773894,
  34100105,
  12143071,
  34005291,
  33977603,
  9838682,
  33427150,
  16320401,
  16921944,
  33275778,
  7417620,
  32852232,
  5052612,
  16271984,
  32963576,
  33859580,
  6582452,
  33506137,
  33743048,
  9296344,
  13244551,
  33559396,
  33991310,
  32933910,
  32998315,
  12680098,
  13810789,
  7842095,
  34108392,
  10261076,
  7090291,
  7265873,
  32450418,
  33549029,
  33764054,
  32456857,
  11501889,
  12170989,
  34001147,
  11109838,
  34158264,
  11817328,
  34323993,
  15626913,
  33419859,
  13169626,
  11191184,
  7856786,
  9917064,
  9089876,
  4853408,
  33337316,
  33096248,
  33394131,
  34061568,
  8605319,
  6661394,
  9156294,
  13323501,
  32696512,
  16602851,
  16634734,
  33751522,
  33023475,
  33934932,
  13952186,
  32510953,
  11549301,
  4135624,
  34346191,
  33071366,
  32374934,
  33986025,
  33974503,
  32905899,
  7648521,
  32558853,
  33594599,
  15501377,
  9599024,
  14052699,
  34062002,
  13163027,
  33381257,
  15036529,
  13501080,
  10780471,
  17123983,
  16228236,
  16908397,
  3633306,
  14520938,
  12796431,
  16516099,
  17278420,
  33957820,
  16297438
]"
JLRFYS0T,to_camel_case,Python253,Python,Thursday 23rd of May 2024 05:13:05 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: to_camel_case.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    This script converts input text to Camel Case, where the case of each letter alternates,
    starting with uppercase for the first letter. Spaces and other non-alphabetic characters
    are preserved in the original position.
    
    The converted text is then saved to a file named ""converted_camel_case.txt"" in UTF-8 encoding.

Requirements:
    - Python 3.x

Functions:
    - to_camel_case(text): Converts input text to Camel Case.
        Parameters:
            text (str): The input text to be converted.
        Returns:
            str: The text converted to Camel Case.

Usage:
    Run the script and provide the text you want to convert when prompted. 
    The converted text will be saved to ""converted_camel_case.txt"" in the same directory as the script.

Example Output:
    Input Text: ""This is a Test of Case Converting""
    
    Converted Text Has Been Saved To: 'converted_camel_case.txt'.
    
    Converted Text:
            ThIs Is A TeSt Of CaSe CoNvErTiNg
""""""

def to_camel_case(text):
    """"""
    Convert a given string to Camel Case where each letter's case alternates,
    starting with uppercase.
    
    Parameters:
        text (str): The input string.
        
    Returns:
        str: The Camel Case converted string.
    """"""
    result = []
    upper = True

    for char in text:
        if char.isalpha():
            if upper:
                result.append(char.upper())
            else:
                result.append(char.lower())
            upper = not upper
        else:
            result.append(char)

    return ''.join(result)

def main():
    """"""
    Main function to prompt user input and convert the text to Camel Case.
    The converted text is saved to a file.
    """"""
    input_text = input(""Enter the text you want to convert to Camel Case: "")
    camel_case_text = to_camel_case(input_text)
    
    with open(""converted_camel_case.txt"", ""w"", encoding=""utf-8"") as file:
        file.write(camel_case_text)
    
    print(""\nConverted Text Has Been Saved To: 'converted_camel_case.txt'.\n"")
    print(""Converted Text:\n"")
    print(f""\t\t{camel_case_text}"")

if __name__ == ""__main__"":
    main()

"
YdMnQFBh,MoveableObject,GoodNoodle,C#,Thursday 23rd of May 2024 05:03:38 PM CDT,"public class MovableObject : MonoBehaviour
{
    public float speed;
  
    public bool IsMoving;

    public bool canSlid = false;

    public IEnumerator Move(Vector2 moveVec)
    {
        if (canSlid)
        {
            var targetPos = CheckLocation(moveVec, transform.position);
            IsMoving = true;

            while ((targetPos).sqrMagnitude > Mathf.Epsilon)
            {
                transform.position = Vector3.MoveTowards(transform.position, targetPos, speed * Time.deltaTime);
                yield return null;

            }
            transform.position = targetPos;

           
            IsMoving = false;
                   
        } 
    }
    public Vector2 CheckLocation(Vector2 moveVec, Vector2 currentPos)
    {
        //currentPos += moveVec;
        var testPos = currentPos + moveVec;
        if(IsPathClear(testPos))
        {
            testPos = CheckLocation(moveVec, testPos);
            return testPos;
        }
        return currentPos;
    }

    private bool IsPathClear(Vector3 targetPos)
    {
        var diff = targetPos - transform.position;
        var dir = diff.normalized;

        var collisionLayer = GameLayers.I.SolidLayer | GameLayers.I.InteractableLayer | GameLayers.I.PlayerLayer;

        if (Physics2D.BoxCast(transform.position + dir, new Vector2(0.2f, 0.2f), 0f, dir, diff.magnitude - 1, collisionLayer) == true)
            return false;

        return true;
    }
"
eDMxQLve,AMTK,ZTTrak,PowerShell,Thursday 23rd of May 2024 04:42:25 PM CDT,"
$stationCode = Read-Host ""Enter the Amtrak Station Code you would like to monitor.""


$url = ""https://dixielandsoftware.net/Amtrak/solari/data/"" + $stationCode + ""_schedule.txt""
$url2 = ""_schedule.txt""

$urlfinal = $url + """" + $url2


try {
    $response = Invoke-WebRequest -Uri $url -UseBasicParsing

    if ($response.StatusCode -eq 200) {
        Write-Output $response.Content
        $jsonObject = $response.Content | ConvertFrom-Json

        $currentDate = Get-Date


        $year = $currentDate.Year
        $month = $currentDate.Month
        $day = $currentDate.Day
		Write-Output $year
		Write-Output $month.toString(""D2"")
		Write-Output $day		
        $phrase2 = ""</a>""


        foreach ($item in $jsonObject) {
			Write-Output ""--=New Section=--""
			$trainnonew = $item.trainno
			$outputString = $trainnonew -replace [regex]::Escape($aphrase)
			Write-Output $newTrainNumber
            Write-Output ""Train Number: $($outputString)""
            Write-Output ""Scheduled: $($item.scheduled)""
            Write-Output ""Scheduled 24h: $($item.scheduled24)""
            Write-Output ""Service: $($item.service)""
            Write-Output ""Destination: $($item.destination)""
            Write-Output ""Origin: $($item.origin)""
            Write-Output ""Remarks/Boarding: $($item.remarks_boarding)""
            Write-Output ""New Time: $($item.newtime)""
            Write-Output ""New Time 24h: $($item.newtime24)""
            Write-Output """" 
        }   
		while ($true) {& $refreshDataStart-Sleep -Seconds 30}
    } else {
        Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again.""
    }
} catch {
    Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again. URL was $url""
}


$refreshData = {
    $url = ""https://dixielandsoftware.net/Amtrak/solari/data/"" + $stationCode + ""_schedule.txt""
$url2 = ""_schedule.txt""

$urlfinal = $url + """" + $url2


try {
    $response = Invoke-WebRequest -Uri $url -UseBasicParsing

    if ($response.StatusCode -eq 200) {
        Write-Output $response.Content
        $jsonObject = $response.Content | ConvertFrom-Json

        $currentDate = Get-Date


        $year = $currentDate.Year
        $month = $currentDate.Month
        $day = $currentDate.Day
		Write-Output $year
		Write-Output $month.toString(""D2"")
		Write-Output $day		
        $phrase2 = ""</a>""


        foreach ($item in $jsonObject) {
			Write-Output ""--=New Section=--""
			$trainnonew = $item.trainno
			$outputString = $trainnonew -replace [regex]::Escape($aphrase)
			Write-Output $newTrainNumber
            Write-Output ""Train Number: $($outputString)""
            Write-Output ""Scheduled: $($item.scheduled)""
            Write-Output ""Scheduled 24h: $($item.scheduled24)""
            Write-Output ""Service: $($item.service)""
            Write-Output ""Destination: $($item.destination)""
            Write-Output ""Origin: $($item.origin)""
            Write-Output ""Remarks/Boarding: $($item.remarks_boarding)""
            Write-Output ""New Time: $($item.newtime)""
            Write-Output ""New Time 24h: $($item.newtime24)""
            Write-Output """" 
}      
    } else {
        Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again.""
    }
} catch {
    Write-Output ""Failed to fetch data for station code $stationCode. Please check the station code and try again. URL was $url""
}
    Get-Date
}





Write-Host ""Press any key to exit..."" -NoNewline
$x = $host.UI.RawUI.ReadKey(""NoEcho,IncludeKeyDown"")
"
WreQPcDe,i hate lowercase hex,Yanis4224,Python,Thursday 23rd of May 2024 04:12:48 PM CDT,"import os
import re

pattern = r""\b0x([a-f0-9]*[a-f][a-f0-9]*\b)""

for dirpath, dirnames, filenames in os.walk(""./include/""):
    for filename in filenames:
        path = dirpath + ""/"" + filename
        with open(path, ""r"") as inputFile:
            data = inputFile.read()

        newData = data
        for match in re.finditer(pattern, data):
            newData = newData.replace(""0x"" + match.group(1), ""0x"" + match.group(1).upper())

        with open(path, ""w"") as outputFile:
            outputFile.write(newData)"
vCe4XZkk,combination_helper.lua,maxeebon,Lua,Thursday 23rd of May 2024 04:01:38 PM CDT,"-- класс для перебора комбинаций из N по K
-- state выглядит как [i1,i2,...,iK] где i1...iK - текущий активный индекс от 1 до N
-- для работы класса внутреннее состяние state'a должно быть отсортировано так что для любого индекса не может быть справа значений меньше него

function createCombHelper(N,K)
	
	local obj = {}
	obj.N = N
	obj.K = K
	obj.state = nil
	
	function obj.setState(state) -- задаем новый state (может быть не отсортированным)
		local sz = #state
		if sz > obj.K then
			print(""state can have only K(""..obj.K.."") active indexes, recieved ""..#state)
			return false
		end 
		for i = 1,sz do
			if state[i] > obj.N then
				print(""state cannot be greater than N(""..obj.N..""), recieved ""..state[i])
				return false
			end 
			for j = i+1,sz do
				if state[i] == state[j] then
					print(""state cannot have duplicate values, recieved duplicate of ""..state[i])
					return false
				end
			end
		end
		obj.state = {table.unpack(state)} 
		table.sort(obj.state)
	end
	
	function obj.getState()
		return obj.state
	end
	
	function obj.next()  -- задает индексы в крайниве левые положения если state еще не определен и задает новый state, nil если новые состояния закончились
		local K = obj.K
		local N = obj.N
		local state = obj.state
		if not obj.state then
			obj.state = {}
			for i = 1,obj.K do
				obj.state[i] = i
			end
			return obj.state
		else
			if state[1] == N-K+1 then
				return nil
			end
			for i=K,1,-1 do
				if state[i]+1 <= N-K + i then
					state[i]=state[i]+1
					for j = i+1,K do
						state[j]=state[i]+j-i
					end
					--res[#res+1] = {table.unpack(state)}
					break
				end
			end
			return obj.state
			
		end		
	end
	
	return obj
end

a = createCombHelper(5,2)"
GEnnpKrg,Wildsea Import,demondownload,JavaScript,Thursday 23rd of May 2024 03:58:10 PM CDT,"const parseFile = async (html) => {
  const file = html.find('#file')[0].files[0]
  const packId = html.find('#packId')[0].value

  var reader = new FileReader()
  const pack = game.packs.get(packId)
  const nameRegex = /([A-Za-z \!\""\'\-]+)\s\[([A-Za-z ]+)\]/
  reader.onload = async (e) => {
    const contents = parseCSV(e.target.result)
    for (const row of contents) {
      try {
        const [category, label, nameTag, track, details] = row
        if (nameTag === '') continue

        let categoryFolder = pack.folders.contents.filter(
          (f) => f.name === category.trim(),
        )[0]
        if (!categoryFolder) {
          categoryFolder = await Folder.create(
            { name: category.trim(), type: 'Item' },
            { pack: packId },
          )
        }

        let labelFolder = pack.folders.contents.filter(
          (f) => f.name === label.trim(),
        )[0]
        if (!labelFolder) {
          labelFolder = await Folder.create(
            { name: label.trim(), type: 'Item', folder: categoryFolder },
            { pack: packId },
          )
        }

        const [_match, name, tag] = nameTag.match(nameRegex)

        itemData = {
          name: name.trim(),
          type: 'aspect',
          system: {
            track: { max: track },
            details,
            type: tag,
          },
          folder: labelFolder._id,
        }
        await Item.create(itemData, { pack: packId, keepId: true })
      } catch (e) {
        console.log(e, row)
        continue
      }
    }
  }
  reader.readAsText(file)
}

function parseCSV(str) {
  const arr = []
  let quote = false
  for (let row = 0, col = 0, c = 0; c < str.length; c++) {
    let cc = str[c],
      nc = str[c + 1]
    arr[row] = arr[row] || []
    arr[row][col] = arr[row][col] || ''
    if (cc == '""' && quote && nc == '""') {
      arr[row][col] += cc
      ++c
      continue
    }
    if (cc == '""') {
      quote = !quote
      continue
    }
    if (cc == ',' && !quote) {
      ++col
      continue
    }
    if (cc == '\r' && nc == '\n' && !quote) {
      ++row
      col = 0
      ++c
      continue
    }
    if (cc == '\n' && !quote) {
      ++row
      col = 0
      continue
    }
    if (cc == '\r' && !quote) {
      ++row
      col = 0
      continue
    }
    arr[row][col] += cc
  }
  return arr
}

await new Promise((resolve) => {
  new Dialog({
    title: 'Import CSV File to RollTable',
    content: `<form>
        <div class=""form-group"">
          <label style=""max-width:100px"">File</label>
          <div class=""form-fields"">
            <input id=""file"" type=""file""/>
          </div>
        </div>
        <div class=""form-group"">
          <label style=""max-width: 100px"">Pack ID</label>
          <div class=""form-fields"">
            <input id=""packId"" type=""text"" placeholder=""world.wildsea"" />
          </div>
        </div>
      </form>`,
    buttons: {
      roll: {
        icon: '<i class=""fas fa-file-import""></i>',
        label: 'Import',
        callback: (html) => resolve(parseFile(html)),
      },
    },
    close: () => resolve(null),
  }).render(true)
})
"
H2NenzHS,newton_polynomial_interpolation,Python253,Python,Thursday 23rd of May 2024 03:20:17 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: newton_polynomial_interpolation.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script demonstrates polynomial interpolation using Newton's divided differences method.
    - It allows users to input their own data points and visualizes the interpolating polynomial.

Requirements:
    - Python 3.x
    - NumPy
    - Matplotlib

Functions:
    - newtdd:
        Computes coefficients of interpolating polynomial using Newton's divided differences method.
    - nest:
        Evaluates the interpolating polynomial at a specific point.
    - newton_poly:
        Evaluates the Newton polynomial at specific points.
    - main:
        Main function to execute polynomial interpolation.

Usage:
    - Run the script and follow the prompts to input data points.

Expected Example Output:
    - The script will plot the interpolating polynomial along with the data points provided by the user.

Additional Notes:
    - Ensure NumPy and Matplotlib are installed in your Python environment.
""""""

import numpy as np
import matplotlib.pyplot as plt

def newtdd(x_values, y_values, n):
    """"""
    Calculate coefficients of interpolating polynomial using Newton's divided differences method.

    Parameters:
        x_values (ndarray):
            Array of x-coordinates of data points.
        y_values (ndarray):
            Array of y-coordinates of data points.
        n (int):
            Number of data points.

    Returns:
        ndarray: Coefficients of the interpolating polynomial.
    """"""
    v = np.zeros((n, n))
    for j in range(n):
        v[j][0] = y_values[j]
    for i in range(1, n):
        for j in range(n - i):
            v[j][i] = (v[j+1][i-1] - v[j][i-1]) / (x_values[i+j] - x_values[j])
    return v[0]

def nest(c, x_values, t):
    """"""
    Evaluate the interpolating polynomial at a specific point.

    Parameters:
        c (ndarray):
            Coefficients of the interpolating polynomial.
        x_values (ndarray):
            Array of x-coordinates of data points.
        t (float):
            Point at which to evaluate the polynomial.

    Returns:
        float: Value of the polynomial at point t.
    """"""
    n = len(c)
    result = c[-1]
    for i in range(2, n+1):
        result = result * (t - x_values[n-i]) + c[n-i]
    return result

def newton_poly(coef, x_data, x):
    """"""
    Evaluate the Newton polynomial at x.

    Parameters:
        coef (ndarray):
            Coefficients of the interpolating polynomial.
        x_data (ndarray):
            Array of x-coordinates of data points.
        x (ndarray):
            Points at which to evaluate the polynomial.

    Returns:
        ndarray: Value of the polynomial at points x.
    """"""
    n = len(x_data) - 1
    p = coef[n]
    for k in range(1, n + 1):
        p = coef[n-k] + (x - x_data[n-k]) * p
    return p

def main():
    """"""
    Main function to execute polynomial interpolation.
    """"""
    print(""Welcome to Polynomial Interpolation using Newton's divided differences method!"")
    n = int(input(""\nEnter the number of data points: ""))
    x_values = np.zeros(n)
    y_values = np.zeros(n)
    print(""\nEnter the data points:"")
    for i in range(n):
        x_values[i] = float(input(f""Enter x{i+1}: ""))
        y_values[i] = float(input(f""Enter y{i+1}: ""))

    coefficients = newtdd(x_values, y_values, n)

    # Evaluate the interpolating polynomial at specific points
    x_new = np.linspace(min(x_values), max(x_values), 500)
    y_new = nest(coefficients, x_values, x_new)

    # Plot the results
    plt.plot(x_new, y_new, label='Interpolating Polynomial')
    plt.scatter(x_values, y_values, color='red', label='Data Points')
    plt.xlabel('x')
    plt.ylabel('y')
    plt.title('Newton Polynomial Interpolation')
    plt.legend()

    # Annotate each data point with its corresponding coordinates
    for i, (x, y) in enumerate(zip(x_values, y_values)):
        plt.text(x, y, f'({x}, {y})', fontsize=10, ha='right', va='bottom')

    plt.grid(True)
    plt.show()

if __name__ == ""__main__"":
    main()


"
AQzqqZLe,newton_polynomial_interpolation_demo,Python253,Python,Thursday 23rd of May 2024 03:19:43 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: newton_polynomial_interpolation_demo.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script demonstrates polynomial interpolation using Newton's divided differences method.
    - It calculates coefficients of the interpolating polynomial, evaluates the polynomial at specific points,
      finds the minimum value of a function, and calculates error bounds and errors for given points.

Requirements:
    - Python 3.x
    - NumPy
    - SciPy
    - Matplotlib

Functions:
    - newtdd:
        Computes coefficients of interpolating polynomial using Newton's divided differences method.
    - nest:
        Evaluates the interpolating polynomial at a specific point.
    - f5:
        Defines a function used for finding the minimum value.
    - g:
        Defines a function used for error calculation.
    - h:
        Defines a function used for error calculation.
    - divided_diff:
        Calculates the divided differences table.
    - newton_poly:
        Evaluates the Newton polynomial at specific points.

Usage:
    - Run the script and observe the printed results.

Expected Example Output:

    --------------------------------------------------------
         :: Running The Newton Interpolation Test ::
    --------------------------------------------------------
    [Interpolating Polynomial Coefficients]:
    [1.433329   1.98987    3.2589     3.68066667 4.00041667] 

    [Interpolating Polynomial at x = 0.82]:
    1.9589097744 

    [Interpolating Polynomial at x = 0.98]:
    2.6128479663999995 

    [Minimum value of f5]:
    -848.0804466745346 

    --------------------------------------------------------
    Error bounds and errors:
    --------------------------------------------------------
    Ec1: -5.3734377101298326e-05
    Er1: 2.3348514214704963e-05
    Ec2: 0.00021656582286280922
    Er2: 0.00010660542393381434
    --------------------------------------------------------

Additional Notes:
    - Ensure NumPy, SciPy, and Matplotlib are installed in your Python environment.
    - This script replicates functionality from MATLAB code.
""""""

import numpy as np
from scipy.optimize import minimize_scalar
import matplotlib.pyplot as plt

def newtdd(x_vals, y_vals, n):
    """"""
    Calculate coefficients of interpolating polynomial using Newton's divided differences method.

    Parameters:
        x_vals (ndarray): Array of x-coordinates of data points.
        y_vals (ndarray): Array of y-coordinates of data points.
        n (int): Number of data points.

    Returns:
        ndarray: Coefficients of the interpolating polynomial.
    """"""
    v = np.zeros((n, n))
    for j in range(n):
        v[j][0] = y_vals[j]
    for i in range(1, n):
        for j in range(n - i):
            v[j][i] = (v[j+1][i-1] - v[j][i-1]) / (x_vals[i+j] - x_vals[j])
    return v[0]

def nest(coeff, x_vals, t):
    """"""
    Evaluate the interpolating polynomial at a specific point.

    Parameters:
        coeff (ndarray): Coefficients of the interpolating polynomial.
        x_vals (ndarray): Array of x-coordinates of data points.
        t (float): Point at which to evaluate the polynomial.

    Returns:
        float: Value of the polynomial at point t.
    """"""
    n = len(coeff)
    result = coeff[-1]
    for i in range(2, n+1):
        result = result * (t - x_vals[n-i]) + coeff[n-i]
    return result

def f5(x_val):
    """"""
    Define a function used for finding the minimum value.

    Parameters:
        x_val (float): Input value.

    Returns:
        float: Result of the function.
    """"""
    return -8 * x_val * (4 * x_val**4 + 20 * x_val**2 + 15) * np.exp(x_val**2)

def g(x_val):
    """"""
    Define a function used for error calculation.

    Parameters:
        x_val (float): Input value.

    Returns:
        float: Result of the function.
    """"""
    return np.exp(x_val**2)

def h(x_val):
    """"""
    Define a function used for error calculation.

    Parameters:
        x_val (float): Input value.

    Returns:
        float: Result of the function.
    """"""
    return (x_val - 0.6) * (x_val - 0.7) * (x_val - 0.8) * (x_val - 0.9) * (x_val - 1)

def divided_diff(x_vals, y_vals):
    '''
    Function to calculate the divided differences table.

    Parameters:
        x_vals (ndarray): Array of x-coordinates of data points.
        y_vals (ndarray): Array of y-coordinates of data points.

    Returns:
        ndarray: Divided differences table.
    '''
    n = len(y_vals)
    coef = np.zeros([n, n])
    # The first column is y
    coef[:,0] = y_vals

    for j in range(1,n):
        for i in range(n-j):
            coef[i][j] = (coef[i+1][j-1] - coef[i][j-1]) / (x_vals[i+j]-x_vals[i])

    return coef

def newton_poly(coef, x_values, points):
    '''
    Evaluate the Newton polynomial at points.

    Parameters:
        coef (ndarray): Coefficients of the interpolating polynomial.
        x_values (ndarray): Array of x-coordinates of data points.
        points (ndarray): Points at which to evaluate the polynomial.

    Returns:
        ndarray: Value of the polynomial at points.
    '''
    n = len(coef) - 1
    p = coef[n]
    for k in range(1, n + 1):
        p = coef[n-k] + (points - x_values[n-k]) * p
    return p

# Define the data points
x_data = np.array([0.6, 0.7, 0.8, 0.9, 1.0])
y_data = np.array([1.433329, 1.632316, 1.896481, 2.247908, 2.718282])

# Calculate the coefficients of interpolating polynomial
coefficients = newtdd(x_data, y_data, len(x_data))

# Evaluate the interpolating polynomial at specific points
P4_082 = nest(coefficients, x_data, 0.82)
P4_098 = nest(coefficients, x_data, 0.98)

# Find the minimum value of f5
f_5max = minimize_scalar(f5, bounds=(0.6, 1)).fun

# Calculate error bounds and errors for specific points
Ec1 = f_5max * h(0.82) / 120
Er1 = np.abs(P4_082 - g(0.82))
Ec2 = f_5max * h(0.98) / 120
Er2 = np.abs(P4_098 - g(0.98))

# Print the results
print(""-"" * 56)
print(""     :: Running The Newton Interpolation Test ::"")
print(""-"" * 56)
print(""[Interpolating Polynomial Coefficients]:"")
print(coefficients, ""\n"")
print(""[Interpolating Polynomial at x = 0.82]:"")
print(P4_082, ""\n"")
print(""[Interpolating Polynomial at x = 0.98]:"")
print(P4_098, ""\n"")
print(""[Minimum value of f5]:"")
print(f_5max, ""\n"")
print(""-"" * 56)
print(""Error bounds and errors:"")
print(""-"" * 56)
print(""Ec1:"", Ec1)
print(""Er1:"", Er1)
print(""Ec2:"", Ec2)
print(""Er2:"", Er2)
print(""-"" * 56)

# Test Newton's Polynomial Interpolation
x_test = np.array([-5, -1, 0, 2])
y_test = np.array([-2, 6, 1, 3])
coefficients_test = divided_diff(x_test, y_test)[0, :]
x_new = np.arange(-5, 2.1, 0.1)
y_new = newton_poly(coefficients_test, x_test, x_new)

# Plot the results
plt.figure(figsize=(12, 8))
plt.plot(x_test, y_test, 'bo', label='Data Points')  # Label the data points as 'Data Points'
plt.plot(x_new, y_new, label='Newton Polynomial Interpolation')
plt.xlabel('x')
plt.ylabel('y')
plt.title('Newton Polynomial Interpolation Test')

# Annotate each data point with its corresponding polynomial value
for idx, (x, y) in enumerate(zip(x_test, y_test)):
    plt.text(x, y, f'P{idx+1}: {coefficients_test[idx]:.4f}', fontsize=12, ha='right', va='bottom')

plt.legend()  # Show legend with labels
plt.grid(True)
plt.show()

"
EXf7aQLX,G2A.com IS A SCAM DO NOT CLICK,kisazeky,Bash,Thursday 23rd of May 2024 03:18:30 PM CDT,"DO ,1 <- #13
PLEASE DO ,1 SUB #1 <- #234
DO ,1 SUB #2 <- #112
DO ,1 SUB #3 <- #112
DO ,1 SUB #4 <- #0
DO ,1 SUB #5 <- #64
DO ,1 SUB #6 <- #194
DO ,1 SUB #7 <- #48
PLEASE DO ,1 SUB #8 <- #22
DO ,1 SUB #9 <- #248
DO ,1 SUB #10 <- #168
DO ,1 SUB #11 <- #24
DO ,1 SUB #12 <- #16
DO ,1 SUB #13 <- #214
PLEASE READ OUT ,1
PLEASE GIVE UP"
Wv1jf6m3,Manu_Custom,Manu-J,C#,Thursday 23rd of May 2024 03:13:41 PM CDT,"# More well known keys!
# Standard keys
FFFFFFFFFFFF
A0A1A2A3A4A5
D3F7D3F7D3F7
000000000000

# Urmet
8829DA9DAF76

# Keys from mfoc
B0B1B2B3B4B5
4D3A99C351DD
1A982C7E459A
AABBCCDDEEFF
714C5C886E97
587EE5F9350F
A0478CC39091
533CB6C723F6
8FD0A4F256E9

# Keys from:
# http://pastebin.com/wcTHXLZZ
A64598A77478
26940B21FF5D
FC00018778F7
00000FFE2488
5C598C9C58B5
E4D2770A89BE

# Keys from:
# http://pastebin.com/svGjN30Q
434F4D4D4F41
434F4D4D4F42
47524F555041
47524F555042
505249564141
505249564142

# Keys from:
# http://pastebin.com/d7sSetef
0297927C0F77
EE0042F88840
722BFCC5375F
F1D83F964314

# Keys from:
# http://pastebin.com/pvJX0xVS
54726176656C
776974687573
4AF9D7ADEBE4
2BA9621E0A36

# Keys from:
# http://pastebin.com/y3PDBWR1
000000000001
123456789ABC
B127C6F41436
12F2EE3478C1
34D1DF9934C5
55F5A5DD38C9
F1A97341A9FC
33F974B42769
14D446E33363
C934FE34D934
1999A3554A55
27DD91F1FCF1
A94133013401
99C636334433
43AB19EF5C31
A053A292A4AF
505249565441
505249565442

# Keys from:
# http://pastebin.com/TUXj17K3
FC0001877BF7

# Keys from:
# http://0x9000.blogspot.com/2010/12/mifare-classic-default-keys.html
A0B0C0D0E0F0
A1B1C1D1E1F1

# Keys from:
# https://code.google.com/p/mifare-key-cracker/downloads/list
BD493A3962B6
010203040506
111111111111
222222222222
333333333333
444444444444
555555555555
666666666666
777777777777
888888888888
999999999999
AAAAAAAAAAAA
BBBBBBBBBBBB
CCCCCCCCCCCC
DDDDDDDDDDDD
EEEEEEEEEEEE
0123456789AB

# Keys from:
# https://github.com/4ZM/mfterm/blob/master/dictionary.txt
000000000002
00000000000A
00000000000B
100000000000
200000000000
A00000000000
B00000000000

# Key from:
# ladyada.net
ABCDEF123456

# Key from:
# http://irq5.io/2013/04/13/decoding-bcard-conference-badges/
F4A9EF2AFC6D

# Keys from:
# https://github.com/iceman1001/proxmark
4B0B20107CCB
569369C5A0E5
632193BE1C3C
644672BD4AFE
8FE644038790
9DE89E070277
B5FF67CBA951
EFF603E1EFE9
F14EE7CAE863
44AB09010845
85FED980EA5A
314B49474956
564C505F4D41
0263DE1278F3
067DB45454A9
15FC4C7613FE
16F21A82EC84
16F3D5AB1139
17758856B182
1FC235AC1309
22C1BAE1AACD
243F160918D1
25094DF6F148
2A3C347A1200
324F5DF65310
32AC3B90AC13
35C3D2CAEE88
3A42F33AF429
3DF14C8000A1
3E3554AF0E12
3E65E4FB65B3
454841585443
460722122510
48FFE71294A0
491CDCFB7752
4AD1E273EAF1
4B791BEA7BCC
51284C3686A6
528C9DFFE28C
5EB8F884C8D1
5F146716E373
6338A371C0ED
63F17A449AF0
643FB6DE2217
64E3C10394C2
682D401ABB09
68D30288910A
693143F10368
6A470D54127C
740E9A4F9AAF
75CCB59C9BED
75D8690F21B6
75EDE6A84460
82F435DEDF01
85675B200017
871B8C085997
937A4FFF3011
97184D136233
97D1101F18B0
9AFC42372AF1
A27D3804C259
A3F97428DD01
A8966C7CC54B
A9F953DEF0A3
AAFB06045877
AC0E24C75527
AE3FF4EEA0DB
B0C9DD55DD4D
B736412614AF
C4652C54261C
C6AD00254562
C82EC29E3235
D39BB83F5297
D49E2826664F
DF27A8F1CB8E
E2C42591368A
E3429281EFC1
E444D53D359F
F124C2578AD0
F59A36A2546D
FEE470A4CB58
0000000018DE
0000014B5C31
003003003003
003CC420001A
013889343891
01FA3FC68349
021209197591
050908080008
0A7932DC7E65
0C669993C776
0C71BCFB7E72
0D258FE90296
0E83A374B513
0F230695923F
0FFBF65B5A14
11428B5BCE06
11428B5BCE07
11428B5BCE08
11428B5BCE09
11428B5BCE0A
11428B5BCE0F
11496F97752A
123F8888F322
1322285230B8
1565A172770F
157B10D84C6B
157C9A513FA5
15CAFD6159F6
160A91D29A9C
16551D52FD20
167A1BE102E0
16DDCB6B3F24
1717E34A7A8A
17193709ADF4
185FA3438949
1877ED29435A
18971D893494
1AB23CD45EF6
1ACC3189578C
1F107328DC8D
1F1A0A111B5B
1F1FFE000000
2031D1E57A3B
204752454154
21A600056CB0
22729A9BD40F
2338B4913111
2548A443DF28
25D60050BF6E
26643965B16E
26973EA74321
27FBC86A00D0
2A2C13CC242A
2A6D9205E7CA
2CB1A90071C8
2DD39A54E1F3
2ED3B15E7C0F
2EF720F2AF76
2FC1F32F51B1
2FEAE851C199
3060206F5B0A
31646241686C
321958042333
321A695BD266
340E40F81CD8
345547514B4D
356D46474348
369A4663ACD2
36ABF5874ED7
374BF468607F
381ECE050FBD
386B4D634A65
38FCF33072E0
3A09594C8587
3B7E4FD575AD
3C5D1C2BCD18
3E84D2612E2A
3FA7217EC575
410B9B40B872
414C41524F4E
415A54454B4D
4186562A5BB2
424C41524F4E
425A73484166
436A46587552
447AB7FD5A6B
44DD5A385AAF
44F0B5FBE344
45635EF66EF3
476242304C53
484558414354
484944204953
484A57696F4A
48734389EDC3
48C739E21A04
49FAE4E3849F
4A6352684677
4C32BAF326E0
4C6B69723461
4C961F23E6BE
4D3248735131
4D5076656D58
4E32336C6E38
4E4175623670
4F9F59C9C875
509359F131B1
51044EFB5AAB
5106CA7E4A69
513C85D06CDE
52264716EFDE
536653644C65
53C11F90822A
543B01B27A95
5481986D2D62
5544564E6E67
564777315276
568C9083F71C
57734F6F6974
57784A533069
584F66326877
5A1B85FCE20A
5EC39B022F2B
623055724556
62387B8D250D
6245E47352E6
62CED42A6D87
62D0C424ED8E
62EFD80AB715
645A166B1EEB
649D2ABBBD20
666E564F4A44
668770666644
66B03ACA6EE9
66D2B7DC39EF
66F3ED00FED7
67546972BC69
675557ECC92E
686A736A356E
68D3F7307C89
69FB7B7CD8EE
6A1987C40A21
6A676C315142
6A696B646631
6B6579737472
6BC1E1AE547D
6C78928E1317
6C94E1CED026
6D44B5AAF464
6D4C5B3658D2
6D4E334B6C48
6DB17C16B35B
6F4B6D644178
6F506F493353
703140FD6D86
70564650584F
710732200D34
71F3A315AD26
744E326B3441
752FBB5B7B45
756EF55E2507
77494C526339
77646B633657
77A84170B574
79674F96C771
7B296C40C486
7B296F353C6B
7C335FB121B5
7F33625BC129
8553263F4FF0
8697389ACA26
86AFD95200F7
87DF99D496CB
89347350BD36
8AD5517B4B18
8E5D33A6ED51
8ED41E8B8056
8FA1D601D0A2
911E52FD7CE4
9189449EA24E
91CE16C07AC5
91F93A5564C9
925B158F796F
92EE4DC87191
932B9CB730EF
94414C1A07DC
95093F0B2E22
961C0DB4A7ED
987A7F7F1A35
9B832A9881FF
9CB290282F7D
9DC282D46217
9F42971E8322
A10F303FC879
A21680C27773
A22AE129C013
A2ABB693CE34
A4F204203F56
A56C2DF9A26D
A57186BDD2B9
A643F952EA57
A6CAC2886412
A7ABBC77CC9E
A8D0D850A606
A920F32FE93A
AA0720018738
AB4E7045E97D
AC70CA327A04
AD4FB33388BF
AD9E0A1CA2F7
AFD0BA94D624
B1ACA33180A5
B35A0E4ACC09
B39AE17435DC
B468D1991AF9
B578F38A5C61
B725F9CBF183
B7BF0C13066E
B8A1F613CF3D
BA5B895DA162
BBA840BA1C57
BBE8FFFCF363
BEDB604CC9D1
BF1F4424AF76
BFB6796A11DB
BFC8E353AF63
C0C1C2C3C4C5
C0DECE673829
C2B7EC7D4EB1
C3C88C6340B8
C3F19EC592A2
C4104FA3C526
C5132C8980BC
C5CFE06D9EA3
C620318EF179
C6D375B99972
C96BD1CE607F
CB779C50E1BD
CBA6AE869AD5
CC6B3B3CD263
D0D1D2D3D4D5
D21762B2DE3B
D2A597D76936
D327083A60A7
D4FE03CE5B06
D4FE03CE5B07
D4FE03CE5B08
D4FE03CE5B09
D4FE03CE5B0A
D4FE03CE5B0F
D58023BA2BDC
D9A37831DCE5
DB1A3338B2EB
DD61EB6BCE22
DF37DCB6AFB3
E10623E7A016
E241E8AFCBAF
E2A5DC8E066F
E4F65C0EF32C
E55A3CA71826
E64A986A5D94
E703589DB50B
EB0A8FF88ADE
EC0A9B1A9E06
ED646C83A4F3
EE4CC572B40E
EEB420209D0C
F101622750B7
F1B9F5669CC8
F23442436765
F238D78FF48F
F26E21EDCEE2
F4396E468114
F4CD5D4C13FF
F662248E7E89
F72A29005459
F792C4C76A5C
F7A39753D018
F9861526130F
FAD63ECB5891

# Some keys of https://w3bsit3-dns.com and https://ikey.ru
BC4580B7F20B
8E26E45E7D65
A7141147D430
18E3A02B5EFF
E328A1C7156D
8A8D88151A00
7A86AA203788
72F96BDD3714
C76BF71A2509
1B61B2E78C75
045CECA15535
6B07877E2C5C
0CE7CD2CC72B
EA0FD73CB149
B81F2B0C2F66
BB52F8CCE07F
46D78E850A7E
E4821A377B75
8791B2CCB5C4
D5524F591EED
BAFF3053B496
0F318130ED18
42E9B54E51AB
7413B599C4EA
9EA3387A63C1
B27ADDFB64B0
E56AC127DD45
0BE5FAC8B06A
FD8705E721B0
7259FA0197C6
22052B480D11
9D993C5D4EF4
C65D4EAA645B
0EB23CC8110B
3A8A139C20B4
19FC84A3784B
0F01CEFF2742
A3FAA6DAFF67
BC2D1791DEC1
7A396F0D633D
ACFFFFFFFFFF
77DABC9825E1
518DC6EEA089
044CE1872BC3
114D6BE9440C
AFCEF64C9913

# Russian Troika card
EC29806D9738
08B386463229
0E8F64340BA4
0F1C63013DBA
2AA05ED1856F
2B7F3253FAC5
69A32F1C2F19
73068F118C13
9BECDF3D9273
A73F5DC1D333
A82607B01C0D
AE3D65A3DAD4
CD4C61C26E3D
D3EAFB5DF46D
E35173494A81
FBC2793D540B
5125974CD391
ECF751084A80
7545DF809202
AB16584C972A
7A38E3511A38
C8454C154CB5
04C297B91308
EFCB0E689DB3
07894FFEC1D6
FBA88F109B32
2FE3CB83EA43
B90DE525CEB6
1CC219E9FEC1
A74332F74994
764CD061F1E6
8F79C4FD8A01
CD64E567ABCD
CE26ECB95252
ABA208516740
9868925175BA
16A27AF45407
372CC880F216
3EBCE0925B2F
73E5B9D9D3A4
0DB520C78C1C
70D901648CB9
C11F4597EFB5
B39D19A280DF
403D706BA880
7038CD25C408
6B02733BB6EC
EAAC88E5DC99
4ACEC1205D75
2910989B6880
31C7610DE3B0
5EFBAECEF46B
F8493407799D
6B8BD9860763
D3A297DC2698
FBF225DC5D58
# Strelka extension
3367BFAA91DB
4B609876BBA3
5C83859F2224
66B504430416
70D1CF2C6843
8C97CD7A0E56
B9F8A7D83978
C4B3BD0ED5F1
C4D3911AD1B3
CAD7D4A6A996
DA898ACBB854
FEA1295774F9

# Moscow public toilets card
807119F81418
22C8BCD10AAA
0AAABA420191
E51B4C22C8BC
DBF9F79AB7A2
34EDE51B4C22
C8BCD10AAABA
BCD10AAABA42

# Moscow social card
2735FC181807
2ABA9519F574
84FD7F7A12B6
186D8C4B93F9
3A4BBA8ADAF0
8765B17968A2
40EAD80721CE
0DB5E6523F7C
51119DAE5216
83E3549CE42D
136BDB246CAC
2F87F74090D1
E53EAEFE478F
CE2797E73070
328A034B93DB
81E1529AE22B
FC55C50E579F
1A72E2337BC3
5DB52676BE07
F64FBF085098
8FE758A8F039
BB1484CC155D
41990A529AE2
CD2E9EE62F77
69C1327AC20B
3C9C0D559DE5
67BF3880C811
48A01159A1E9
2B83FB448CD4
F24BBB044C94
7DE02A7F6025
BF23A53C1F63
CB9A1F2D7368
C7C0ADB3284F
9F131D8C2057
67362D90F973
6202A38F69E2
100533B89331
653A87594079
D8A274B2E026
B20B83CB145C
9AFA6CB4FC3D
94F46DB5FD46
C31C8CD41D65
BB1684CC155D
CA2393DB246C
1D75E52E76BE
81D9529AE223
0159C9125AA2
52AA1B6BB3FB
97EF60A8F031
6FC73888D011
3A92FA438BD3
74CC3D85CD0E
025ACA1B63A3
AF0878C81151
9BFB6CB4FC45
F750C0095199
075FCF1860A8
2686EE3F87C7
277FEF3880C0
82DA4B93DB1C
9CF46DB5FD46
93EB64ACF43D
A229E68AD9E5
49C2B5296EF4

# Keys from RfidResearchGroup proxmark3 project
# https://github.com/RfidResearchGroup/proxmark3/blob/master/client/dictionaries/mfc_default_keys.dic
0854BF31111E
0C03A720F208
135B88A94B8B
1FCEF3005BCF
2F47741062A0
361F69D2C462
3A09911D860C
3D50D902EA48
400BC9BE8976
4708111C8604
50A11381502C
560F7CFF2D81
60012E9BA3FA
6018522FAC02
66B31E64CA4B
6700F10FEC09
7A09CC1DB70A
81BFBE8CACBA
8A036920AC0C
8A19D40CF2B5
96A301BCE267
9E53491F685B
A170D9B59F95
AE8587108640
B4166B0A27EA
BB467463ACD6
BFF123126C9B
C01FC822C6E5
D58660D1ACDE
D80511FC2AB4
D9BCDE7FC489
DE1FCBEC764B
E67C8010502D
FF58BA1B4478

C1E51C63B8F5
4143414F5250
474249437569
B0699AD03D17
B18CDCDE52B7
3864FCBA5937
85A438F72A8A
C342F825B01B
C6A76CB2F3B5
323334353637
43C7600DEE6B
D01AFEEB890A
26396F2042E7
F3F0172066B2
BB320A757099
00F0BD116D70
25094DF2C1BD
E41E6199318F
F00DFEEDD0D0
6D9B485A4845
71171A82D951
62711F1A83E9
1711B1A82E96
F3864FCCA693
7B7E752B6A2D
2012053082AD
9AEDF9931EC1
B9C874AE63D0
83BAB5ACAD62
A541538F1416
4A2B29111213
D31463A7AB6D
AD5645062534
B069D0D03D17
30FFB6B056F5
D7744A1A0C44
D1991E71E2C5
1795902DBAF9
4243414F5250
C554EF6A6015
A5524645CD91
200306202033
A00003000084
CEE3632EEFF5
F0F0172066B2
B021669B44BB
3F1A87298691
A2B2C9D187FB
4B511F4D28DD
E3AD9E9BA5D4
B3630C9F11C8
F83466888612
857464D3AAD1
A2A3CCA2A3CC
35D850D10A24
B2F170172066
0D8CA561BDF3
05F89678CFCF
850984712F1A
21EDF95E7433
172066B2F2F0
6B2F1B017206
363119000001
23D4CDFF8DA3
EF4C5A7AC6FC
123456ABCDEF
8F9B229047AC
E96246531342
5D293AFC8D7E
AABBCC660429
63FCA9492F38
354A787087F1
40E5EA1EFC00
675A32413770
12FD3A94DF0E
C4F271F5F0B3
4A306E62E9B6
4CFF128FA3EF
0000085F0000
0F385FFB6529
FA38F70215AD
904735F00F9E
B66AC040203A
BCFE01BCFE01
2FCA8492F386
237A4D0D9119
E6849FCC324B
0ED7846C2BC9
1FB235AC1388
EA1B88DF0A76
C9739233861F
89EAC97F8C2A
D964406E67B4
563A22C01FC8
DB5181C92CBE
1E352F9E19E5
6291B3860FC8
A9A4045DCE77
434456495243
B5F454568271
491CDC863104
4D8B8B95FDEE
AFBECD121004
4D48414C5648
E1DD284379D4
AFBECD120454
CFC738403AB0
0AF7DB99AEE4
772219470B38
EF61A3D48E2A
4A4C474F524D
0172066B2F03
3D5D9996359A
66A163BA82B4
2011092119F1
BB2C0007D022
1494E81663D7
590BD659CDD2
A6C028A12FBB
BCF5A6B5E13F
A2F63A485632
39CF885474DD
D2ECE8B9395E
17505586EF02
70172066B2F0
B385EFA64290
B7C344A36D88
010000000000
2F130172066B
DFED39FFBB76
3F7A5C2DBD81
DFE73BE48AC6
FB0B20DF1F34
913385FFB752
2066B2F27017
91FF18E63887
0734BFB93DAB
97F5DA640B18
B42C4DFD7A90
C121FF19F681
BE7C4F6C7A9A
FE04ECFE5577
18F34C92A56E
0BB31DC123E5
0E0E8C6D8EB6
1CFA22DBDFC3
0F1A81C95071
AA4D051954AC
9F9D8EEDDCCE
863FCB959373
98631ED2B229
A23456789123
833FBD3CFE51
AB28A44AD5F5
74A386AD0A6D
4C60F4B15BA8
022FE48B3072
97271231A83F
385EFA542907
066B2F230172
BA729428E808
BDF837787A71
A05DBD98E0FC
395244733978
9B1DD7C030A1
2C9F3D45BA13
1DB710648A65
E65B66089AFC
A85198481331
5A12F83326E7
A7D71AC06DC2
64E2283FCF5E
FFFFAE82366C
10F3BEBC01DF
00ADA2CD516D
1D28C58BBE8A
6936C035AE1B
AC45AD2D620D
64A2EE93B12B
A9F95891F0A4
E45230E7A9E8
A7FB4824ACBF
223C3427108A
58AC17BF3629
535F47D35E39
10F2BBAA4D1C
A0004A000036
3F3865FCCB69
0B0172066B2F
4098653289D3
BA28CFD15EE8
A22647F422AE
99858A49C119
29173860FC76
1A80B93F7107
1A2B3C4D5E6F
2C60E904539C
6C9EC046C1A4
FC9839273862
1C1532A6F1BC
09800FF94AAF
FFFFD06F83E3
0B83797A9C64
13B91C226E56
A4EF6C3BB692
000000270000
A00002000021
872B71F9D15A
A37A30004AC9
B1A862985913
A4CDFF3B1848
2E641D99AD5B
827ED62B31A7
CD212889C3ED
B1A80C94F710
CB911A1A1929
A844F4F52385
C0BEEFEC850B
5C8FF9990DA2
160F4B7AB806
B8937130B6BA
66B2F1F01720
82D58AA49CCB
A9B43414F585
C38197C36420
0172066B2F33
434143445649
34B16CD59FF8
5A7A52D5E20D
6471A5EF2D1A
F57F410E18FF
3B0172066B2F
E907470D31CC
B8457ACC5F5D
67CC03B7D577
A8844B0BCA06
435330666666
B47058139187
46868F6D5677
C27D999912EA
37FC71221B46
F97371271A84
AE43F36C1A9A
5EC7938F140A
AA734D2F40E0
A5A4A3A2A1A0
70172066B2F3
03EA4053C6ED
06FF5F03AA1A
5554AAA96321
0120BF672A64
87291F3861FC
9EBC3EB37130
B4C36C79DA8D
43CA22C13091
6D0B6A2A0003
FB6C88B7E279
013940233313
7DD399D4E897
ED3A7EFBFF56
68F9A1F0B424
6476FA0746E7
1A8619858137
1131A81D9507
8268046CD154
4857DD68ECD9
B62307B62307
C6C866AA421E
F66224EE1E89
4ECCA6236400
72066B2F2B01
34D3C568B348
000131B93F28
419A13811554
B6323F550F54
F89C86B2A961
B268F7C9CA63
B8B1CFA646A8
4D57414C5648
6A0E215D1EEB
70758FDD31E0
37D4DCA92451
444156494442
B210CFA436D2
207FFED492FD
7578BF2C66A9
50983712B1A8
5A85536395B3
B81846F06EDF
842146108088
19F1FFE02563
D3B595E9DD63
B3830B95CA34
A506370E7C0F
880C09CFA23C
43454952534E
39AD2963D3D1
B9B8B7B6B5B3
82908B57EF4F

C67BEB41FFBF
2AFFD6F88B97
E77952748484
988ACDECDFB0
605F5E5D5C5B
42EF7BF572AB
4087C6A75A96
AADE86B1F9C1
5EA088C824C9
120D00FFFFFF
CA679D6291B0
E2A9E88BFE16
0A4600FF00FF
43B04995D234
0602721E8F06
5F31F6FCD3A0
4AE23A562A80
A0974382C4C5
91C2376005A1
FEE2A3FBC5B6
2602FFFFFFFF
CA3A24669D45
A9F3F289B70C
B84D52971107
274E6101FC5E
00DD300F4F10
F7BA51A9434E
4A832584637D
B16B2E573235
A82045A10949
FC0B50AF8700
403F09848B87
DFF293979FA7
4118D7EF0902
30B7680B2BC9
52B0D3F6116E
5296C26109D4
DB6819558A25
4D6F62692E45
0406080A0C0E
6130DFA578A0
30D9690FC5BC
D73438698EEA
005078565703

7C87013A648A
9E7168064993
45FEE09C1D06
734EBE504CE8
E592ED478E59
C229CE5123D5
240F0BB84681
D8BA1AA9ABA0
865B6472B1C0
974A36E2B1BA
57D83754711D
C9CD8D7C65E5
C197AE6D6990
AABAFFCC7612
C0AD1B72921A
AFAAFCC40DEC
E902395C1744
DAC7E0CBA8FD
755D49191A78
68D3263A8CD6
2F8A867B06B4
7357EBD483CC
ABCC1276FCB0
26BF1A68B00F
704A81DDACED
E8794FB14C63
EC070A52E539
037F64F470AD
76939DDD9E97
4D80A10649DF
89E00BC444EF
26107E7006A0
B1D3BC5A7CCA
ECC58C5D34CA
9F97C182585B
B2FE3B2875A6
B70B1957FE71
E495D6E69D9C
0860318A3A89
4051A85E7F2D
17D071403C20
3BF391815A8D
1927A45A83D3
CE7712C5071D
F3C1F1DB1D83
D0DDDF2933EC

# Iron Logic
A3A26EF4C6B0
2C3FEAAE99FC
E85B73382E1F
F4ED24C2B998
CB574C6D3B19
E092081D724B
B38D82CF7B6C
8228D2AA6EFA
2C7E983588A3
CF7A7B77E232
32A7F5EAF87D
7453A687B5F0
01A0C008A5B9
DEC0CEB0CE24
413BED2AE45B
D6261A9A4B3F
CB9D507CE56D

# Tehran ezpay
38A88AEC1C43
CBD2568BC7C6
7BCB4774EC8F
22ECE9316461
AE4B497A2527
EEC0626B01A1
2C71E22A32FE
91142568B22F
7D56759A974A
D3B1C7EA5C53
41C82D231497
0B8B21C692C2
604AC8D87C7E
8E7B29460F12
BB3D7B11D224

# More keys from the PM3 repo
DC018FC1D126
C428C4550A75
0C4233587119
5B0C7EC83645
540D5E6355CC
35C649004000
CFE63749080A
6307417353C1
411053C05273
749934CC8ED3
1C68315674AC
35D152154017
D1417E431949
26B85DCA4321
D973D917A4C7
3A471B2192BF
534F4C303232
730956C72BC2
C9449301AF93
F678905568C3
4578ABFEDC12
075D1A4DD323
43E69C28F08C
0F35D5660653
F7FA2F629BB1
5145C34DBA19
124578ABFEDC
E2F14D0A0E28
C8AACD7CF3D1
9C616585E26D
4927C97F1D57
6F30126EE7E4
155332417E00
5353B3AECB53
361A62F35BC9
00460740D722
A9B018868CC1
2E71D3BD262A
4F75030AD12B
42454C4C4147
D75971531042
25352912CD8D
51E97FFF51E9
1170553E4304
D1F71E05AD9D
541C417E57C0
AE76242931F1
6039ABB101BB
0E620691B9FE
4BF6DE347FB6
10510049D725
1F0128447C00
D14E615E0545
94B6A644DFF6
81B20C274C3F
66695A45C9FA
130662240200
DD0DE3BA08A6
05F5EC05133C
4FA9EB49F75E
C1E6F8AFC9EC
28D70900734C
32CA52054416
703265497350
3D923EB73534
C151D998C669
534F4C415249
70C714869DC7
A7395CCB42A0
89AA9D743812
A160FCD5EC4C
9DCDB136110C
9951A273DEE7
AA0857C641A3
F1A1239A4487
B882FD4A9F78
9386E2A48280
460661C93045
EF1232AB18A0
6285A1C8EB5C
C41514DEFC07
ABFEDC124578
046154274C11
5429D67E1F57
E7316853E731
CD7FFFF81C4A
F253C30568C4
E7D6064C5860
506DB955F161
8223205047B6
070D486BC555
D4B2D140CB2D
0C734F230E13
2E4169A5C79D
69D92108C8B5
A297CEB7D34B
FF9A84635BD2
735175696421
5D0762D13401
D61707FFDFB1
2803BCB0C7E1
C52876869800
424C0FFBF657
AF9E38D36582
B32464412EE3
50240A68D1D8
6B13935CD550
83F3CB98C258
521B517352C7
4BB747E48C2A
5E594208EF02
FFFFFF545846
D65561530174
52750A0E592A
112233445566
2DADE48942C5
A7765C952DDF
2CA4A4D68B8E
72B458D60363
F088A85E71D7
FF94F86B09A6
B27CCAB30DBD
89ECA97F8C2A
E00000000000
9FFDA233B496
10DF4D1859C8
B5244E79B0C8
F5C1C4C5DE34
9551F8F9259D
DE2D83E2DCCC
A00000000096
C10F92A4E57E
7A3E0F5B63FC
2A1F900D4533
91CB7802A559
00008627C10A
A00025000030
D66D91829013
A00016000028
D537320FF90E
668091829013
6E0DD4136B0A
2F904641D75F
B4B3FFEDBE0A
C54474936B59
536563644C65
F4CB751B031A
ED0EC56EEFDD
562A4FB8260B
FFE04BE3D995
BFE25035B0C8
199404281998
310D51E539CA
F22A78E29880
5E56BFA9E2C9
AD38C17DE7D2
1C5179C4A8A1
A00000000008
5CCC6D50EAAC
A00002000036
65626F726369
948EE7CFC9DB
A00000043D79
36E1765CE3E8
3111A3A303EB
3B1D3AAC866E
4C5A766DFE3A
4E3552426B32
0500D6BFCC4F
70E3AD3F2D29
E46210ED98AB
FED791829013
484585414354
8B42B6D64B02
021209197507
D5C172325DD3
A23C91829013
D9E091829013
6520446F7665
AAAAAAFFFFFF
7E6545076619
A00001000030
7F60AEF68136
AFC984A3576E
2CCDA1358323
54AF91829013
446176696453
BE0EC5155806
709BA7D4F920
FC5AC7678BE3
E60F8387F0B9
562E6EF73DB6
24501C422387
540E0D2D1D08
B637E46AD674
75B691829013
51BEDBA005E5
E167EC67C7FF
6303CDCBB233
199404281970
8AA8544A2207
7579B671051A
05D1FC14DC31
992B152E834A
012279BAD3E5
593DD8FE167A
8DDC91829013
3321FB75A356
8CA2C9DC8292
4D414C414741
2DEB57A3EA8F
CE75D7EADEAF
456666456666
03E0094CEDFE
8829DAD9AF76
680E95F3C287
DB32A6811327
509052C8E42E
3882719778A1
BEE8B345B949
576A798C9904
95C013B70D99
021200C20307
4E474434FFFF
F09BB8DD142D
18E20102821E
F53E9F4114A9
2E52ABE0CE95
A00002000088
ABBA1234FCB0
92D0A0999CBA
0000A2B3C86F
E46A91829013
2C7813A721C3
EC211D12C98D
83E391829013
303041534956
9F27D36C4230
1665FE2AE945
62FF943EB069
DA59354DFB88
4143532D494E
06CC91829013
A00003000028
1A1B1C1D1E1F
FFFFFFAAAAAA
F81CED821B63
DE4F5AA9A7F3
61D030C0D7A8
643232ADB2D5
8C5819E780A4
7549E90353A2
FFD46FF6C5EE
4152414B4E41
158B51947A8E
A00000000058
F115E91357B3
D28F090677A1
C7F4A4478415
A00027000099
A00003000057
040047C12B75
202ECDCCC642
7C82EF592001
FEA6B332F04A
95E9EE4CCF8F
3686192D813F
9716D5241E28
455249524345
39605B3C8917
A00000000064
11AC8C8F3AF2
53B09DB89111
29A791829013
141940E9B71B
41454E521985
A0000F000345
1E34B127AF9C
C81584EF5EDF
4F9661ED2E70
3C383889362A
C608E13ADD50
A22AE12C9013
16CA203B811B
776C9B03BE71
6F6674776172
DE1E7D5F6DF1
F5C1B3F62FDA
4F4553746B41
3E6E5713BA10
43412D627400
57D27B730760
6472616E7265
74BF7363F354
A00002000086
6E7747394E63
314F495254FF
763958704B78
7D6E7AF43C97
8CCA8F62A551
22BDACF5A33F
88DDC24E1671
B627A3CB13F8
3C6D9C4A90FA
52D0145E1AF5
8B75A29D4AB2
F68930789631
32C6768847F5
E98075318085
155F91829013
9EB7C8A6D4E3
D10008074A6F
32C1BB023F87
45B722C63319
A66A478712EA
686E736F6E20
6E029927600D
514B797B2F3A
777B1F3A4F4A
427553754D47
2158E314C3DF
57A18BFEC381
1332117E8756
B3A4C47757B0
30AAD6A711EF
3C4ABB877EAF
110C819BBEF8
826576A1AB68
209A2B910545
3F3A534B7B7B
A18D9F4E75AF
1AF66F83F5BE
318BD98C1CEF
66A3B064CC4B
23C9FDD9A366
6B0454D5D3C3
F0A3C5182007
9D56D83658AC
D23A31A4AAB9
9966588CB9A0
8AC04C1A4A25
8C29F8320617
A1D92F808CAF
18AB07270506
AB91BDA25F00
505209016A1F
011C6CF459E8
B133A4D48757
D201DBB6AB6E
5697519A8F02
DEDD7688BC38
4B92DF1BF25D
0AD6B7E37183
8EA8EC3F2320
81504133B13C
8A55194F6587
AA4DDA458EBB
7B3B589A5525
2E45C23DC541
42F7A186BF87
5032E362B484
67B1B3A4E497
738385948494
CCCE24102003
F72CD208FDF9
CDE668FDCDBA
18E887D625B4
A777B233A4F4
9FAC23197904
30FB20D0EFEF
B95BFDEBA7E4
A0B1F234006C
195DC63DB3A3
2058580A941F
A1AB3A08712C
9B7C25052FC3
3352DB1E8777
487339FA02E0
500AE915F50A
4B787B273A50
066F5AF3CCEE
180DE12B700E
D9FF8BEE7550
3515AE068CAD
05412723F1B6
C670A9AD6066
7B173A4E4976
6686FADE5566
04B787B2F3A5
64CBADC7A313
D18296CD9E6E
3A4C47757B07
AB19BC885A29
0F3A4D48757B
6B3B7AF45777
2352C5B56D85
1ABC15934F5A
C0AA2BBD27CD
151F3E85EC46
42FC522DE987
B793ADA6DB0C
C40964215509
529CF51F05C5
00B70875AF1D
7B56B2B38725
3119A70628EB
1153C319B4F8
52B26C199862
C9BE49675FE4
4F0E4AE8051A
1417E5671417
20C166C00ADB
EAB8066C7479
8B63AB712753
494446555455
1330824CD356
C49DAE1C6049
260480290483
43012BD9EB87
374521A38BCC
D20289CD9E6E
2612C6DE84CA
C27F5C1A9C2B
9AFEE1F65742
D144BD193063
3A524B7A7B37
8DFACF11E778
7D0A1C277C05
2910AFE15C99
DBD5CA4EE467
8627C10A7014
5A7D87876EA8
702C1BF025DD
7B4DFC6D6525
3122AE5341EB
AE98BA1E6F2C
537930363139
A5BB18152EF1
E5519E1CC92B
0AD0956DF6EE
65B6C3200736
9F4AD875BB30
06106E187106
2900AAC52BC3
A58AB5619631
D23C1CB1216E
4BB29463DC29
3E173F64C01C
6A0D531DA1A7
03F9067646AE
707B11FC1481
F3A524B7A7B3
09074A146605
B6803136F5AF
035C70558D7B
0A1B6C50E04E
6C273F431564
8FD6D76742DC
12AB4C37BB8B
76E450094393
216024C49EDF
316B8FAA12EF
E9AE90885C39
A514B797B373
7C9FB8474242
D44CFC178460
453857395635
81CC25EBBB6A
D213B093B79A
1352C68F7A56
05C301C8795A
C2A0105EB028
9A677289564D
0000FFFFFFFF
593367486137
FFF011223358
4663ACD2FFFF
6BE9314930D8
F0FE56621A42
A1670589B2AF
F4CE4AF888AE
5AF445D2B87A
8C187E78EE9C
EDC317193709
FF9F11223358
307448829EBC
75FAB77E2E5B
32F093536677
3351916B5A77
DDDAA35A9749
FE2A42E85CA8
186C59E6AFC9
34635A313344
336E34CC2177
353038383134
97D77FAE77D3
9D0D0A829F49
16901CB400BC
6A6C80423226
2E0F00700000
8AF9C718F23D
1FEDA39D38EC
ABBF6D116EAF
A15000000000
AE7478CCAEE7
50D4C54FCDF5
7C7D672BC62E
A10000000000
A12000000000
0800F9917CB0
7A3CDAD7C023
A03000000000
7B304F2A12A6
B05000000000
B07000000000
B10000000000
3E3A546650EA
AC37E76385F5
024E4E44001F
0CF1A2AA1F8D
A04000000000
D60DE9436219
514956AB3142
B2AFBF2331D4
DEB06ED4AF8E
324A82200018
24BB421C7973
B12000000000
CC5075E42BA1
0965E3193497
A06000000000
661ABF99AFAD
019761AA8082
30424C029001
576DCFFF2F25
05597810D63D
370AEE95CD69
E69DD9015A43
4757698143BD
B11000000000
863933AE8388
18C628493F7F
1EE38419EF39
62742819AD7C
41F262D3AB66
B09000000000
B02000000000
AEE297CB2FD6
223E5847DD79
A71E80EA35E1
C22E04247D9A
80BB8436024C
B06000000000
05862C58EDFB
C8382A233993
58CD5C3673CB
A05000000000
131157FBB126
FC80E88EB88C
A13000000000
FC9418BF788B
B01000000000
ECBBFA57C6AD
1300EC8C7E80
1D30972E6485
A07000000000
A99164400748
000390014D41
B04000000000
4AD96BF28190
CA80E51FA52B
7BC9EBB8274B
064D9423938A
B9DF35A0814C
995FD2A2351E
A01000000000
7E5E05866ED6
A11000000000
5044068C5183
B13000000000
288B7A34DBF8
A14000000000
3DA5DFA54604
EA0CA627FD06
A09000000000
E43B7F185460
2E032AD6850D
117E5C165B10
1064BA5D6DF8
F80A65A87FFA
B15000000000
A02000000000
914F57280CE3
574343467632
26578719DCD9
730050555253
7B8FB4A7100B
9A8389F32FBF
A08000000000
CE0F4F15E909
B03000000000
640524D2A39B
6090D00632F5
F8526D1A8D6D
B79E5B175227
B08000000000
4146D4A956C4
217250FB7014
B14000000000
6A59AA9A959B
337237F254D5

# Rotterdam University of applied sciences campus card
BB7923232725
A95BD5BB4FC5
B099335628DF
A34DA4FAC6C8
AD7C2A07114B
53864975068A
549945110B6C
B6303CD5B2C6
AFE444C4BCAA
B80CC6DE9A03
A833FE5A4B55
B533CCD5F6BF
B7513BFF587C
B6DF25353654
9128A4EF4C05
A9D4B933B07A
A000D42D2445
AA5B6C7D88B4
B5ADEFCA46C4
BF3FE47637EC
B290401B0CAD
AD11006B0601

# Keys of Armenian underground ticket
A0A1A2A8A4A5
0D6057E8133B
D3F3B958B8A3
6A68A7D83E11
7C469FE86855
E4410EF8ED2D
3E120568A35C
CE99FBC8BD26
2196FAD8115B

# PIK Comfort Moscow keys (ISBC Mifare Plus SE 1K)
009FB42D98ED
002E626E2820

# Russian Podorozhnik card (Saint-Petersburg transport, may be combined with Troika)
038B5F9B5A2A
04DC35277635
0C420A20E056
152FD0C420A7
296FC317A513
29C35FA068FB
31BEC3D9E510
462225CD34CF
4B7CB25354D3
5583698DF085
578A9ADA41E3
6F95887A4FD3
7600E889ADF9
86120E488ABF
8818A9C5D406
8C90C70CFF4A
8E65B3AF7D22
9764FEC3154A
9BA241DB3F56
AD2BDC097023
B0A2AAF3A1BA
B69D40D1A439
C956C3B80DA3
CA96A487DE0B
D0A4131FB290
D27058C6E2C7
E19504C39461
FA1FBB3F0F1F
FF16014FEFC7

# Key from French swimming pool badge

# Wojo coworking space, Fance
FF75AFDA5A3C
558AAD64EB5B
518108E061E2
FCDDF7767C10
A6B3F6C8F1D4
B1C4A8F7F6E3

# Key from some random card
001122334455

# Key from hotel in Spain
6CA761AB6CA7"
yTGLXJX5,Manu_Custom_Full,Manu-J,C#,Thursday 23rd of May 2024 03:12:15 PM CDT,"# More well known keys!
# Standard keys
FFFFFFFFFFFF
A0A1A2A3A4A5
D3F7D3F7D3F7
000000000000

# Badge Va
66D2B7DC39EF
6BC1E1AE547D
8AD5517B4B18
AA0720018738
38FCF33072E0
E64A986A5D94
8FA1D601D0A2
22729A9BD40F
49FAE4E3849F
A6CAC2886412
509359F131B1
484558414354
A22AE129C013
62D0C424ED8E
6C78928E1317
89347350BD36

# Urmet
8829DA9DAF76

# Keys from mfoc
B0B1B2B3B4B5
4D3A99C351DD
1A982C7E459A
AABBCCDDEEFF
714C5C886E97
587EE5F9350F
A0478CC39091
533CB6C723F6
8FD0A4F256E9

# Keys from:
# http://pastebin.com/wcTHXLZZ
A64598A77478
26940B21FF5D
FC00018778F7
00000FFE2488
5C598C9C58B5
E4D2770A89BE

# Keys from:
# http://pastebin.com/svGjN30Q
434F4D4D4F41
434F4D4D4F42
47524F555041
47524F555042
505249564141
505249564142

# Keys from:
# http://pastebin.com/d7sSetef
0297927C0F77
EE0042F88840
722BFCC5375F
F1D83F964314

# Keys from:
# http://pastebin.com/pvJX0xVS
54726176656C
776974687573
4AF9D7ADEBE4
2BA9621E0A36

# Keys from:
# http://pastebin.com/y3PDBWR1
000000000001
123456789ABC
B127C6F41436
12F2EE3478C1
34D1DF9934C5
55F5A5DD38C9
F1A97341A9FC
33F974B42769
14D446E33363
C934FE34D934
1999A3554A55
27DD91F1FCF1
A94133013401
99C636334433
43AB19EF5C31
A053A292A4AF
505249565441
505249565442

# Keys from:
# http://pastebin.com/TUXj17K3
FC0001877BF7

# Keys from:
# http://0x9000.blogspot.com/2010/12/mifare-classic-default-keys.html
A0B0C0D0E0F0
A1B1C1D1E1F1

# Keys from:
# https://code.google.com/p/mifare-key-cracker/downloads/list
BD493A3962B6
010203040506
111111111111
222222222222
333333333333
444444444444
555555555555
666666666666
777777777777
888888888888
999999999999
AAAAAAAAAAAA
BBBBBBBBBBBB
CCCCCCCCCCCC
DDDDDDDDDDDD
EEEEEEEEEEEE
0123456789AB

# Keys from:
# https://github.com/4ZM/mfterm/blob/master/dictionary.txt
000000000002
00000000000A
00000000000B
100000000000
200000000000
A00000000000
B00000000000

# Key from:
# ladyada.net
ABCDEF123456

# Key from:
# http://irq5.io/2013/04/13/decoding-bcard-conference-badges/
F4A9EF2AFC6D

# Keys from:
# https://github.com/iceman1001/proxmark
4B0B20107CCB
569369C5A0E5
632193BE1C3C
644672BD4AFE
8FE644038790
9DE89E070277
B5FF67CBA951
EFF603E1EFE9
F14EE7CAE863
44AB09010845
85FED980EA5A
314B49474956
564C505F4D41
0263DE1278F3
067DB45454A9
15FC4C7613FE
16F21A82EC84
16F3D5AB1139
17758856B182
1FC235AC1309
22C1BAE1AACD
243F160918D1
25094DF6F148
2A3C347A1200
324F5DF65310
32AC3B90AC13
35C3D2CAEE88
3A42F33AF429
3DF14C8000A1
3E3554AF0E12
3E65E4FB65B3
454841585443
460722122510
48FFE71294A0
491CDCFB7752
4AD1E273EAF1
4B791BEA7BCC
51284C3686A6
528C9DFFE28C
5EB8F884C8D1
5F146716E373
6338A371C0ED
63F17A449AF0
643FB6DE2217
64E3C10394C2
682D401ABB09
68D30288910A
693143F10368
6A470D54127C
740E9A4F9AAF
75CCB59C9BED
75D8690F21B6
75EDE6A84460
82F435DEDF01
85675B200017
871B8C085997
937A4FFF3011
97184D136233
97D1101F18B0
9AFC42372AF1
A27D3804C259
A3F97428DD01
A8966C7CC54B
A9F953DEF0A3
AAFB06045877
AC0E24C75527
AE3FF4EEA0DB
B0C9DD55DD4D
B736412614AF
C4652C54261C
C6AD00254562
C82EC29E3235
D39BB83F5297
D49E2826664F
DF27A8F1CB8E
E2C42591368A
E3429281EFC1
E444D53D359F
F124C2578AD0
F59A36A2546D
FEE470A4CB58
0000000018DE
0000014B5C31
003003003003
003CC420001A
013889343891
01FA3FC68349
021209197591
050908080008
0A7932DC7E65
0C669993C776
0C71BCFB7E72
0D258FE90296
0E83A374B513
0F230695923F
0FFBF65B5A14
11428B5BCE06
11428B5BCE07
11428B5BCE08
11428B5BCE09
11428B5BCE0A
11428B5BCE0F
11496F97752A
123F8888F322
1322285230B8
1565A172770F
157B10D84C6B
157C9A513FA5
15CAFD6159F6
160A91D29A9C
16551D52FD20
167A1BE102E0
16DDCB6B3F24
1717E34A7A8A
17193709ADF4
185FA3438949
1877ED29435A
18971D893494
1AB23CD45EF6
1ACC3189578C
1F107328DC8D
1F1A0A111B5B
1F1FFE000000
2031D1E57A3B
204752454154
21A600056CB0
2338B4913111
2548A443DF28
25D60050BF6E
26643965B16E
26973EA74321
27FBC86A00D0
2A2C13CC242A
2A6D9205E7CA
2CB1A90071C8
2DD39A54E1F3
2ED3B15E7C0F
2EF720F2AF76
2FC1F32F51B1
2FEAE851C199
3060206F5B0A
31646241686C
321958042333
321A695BD266
340E40F81CD8
345547514B4D
356D46474348
369A4663ACD2
36ABF5874ED7
374BF468607F
381ECE050FBD
386B4D634A65
3A09594C8587
3B7E4FD575AD
3C5D1C2BCD18
3E84D2612E2A
3FA7217EC575
410B9B40B872
414C41524F4E
415A54454B4D
4186562A5BB2
424C41524F4E
425A73484166
436A46587552
447AB7FD5A6B
44DD5A385AAF
44F0B5FBE344
45635EF66EF3
476242304C53
484944204953
484A57696F4A
48734389EDC3
48C739E21A04
4A6352684677
4C32BAF326E0
4C6B69723461
4C961F23E6BE
4D3248735131
4D5076656D58
4E32336C6E38
4E4175623670
4F9F59C9C875
51044EFB5AAB
5106CA7E4A69
513C85D06CDE
52264716EFDE
536653644C65
53C11F90822A
543B01B27A95
5481986D2D62
5544564E6E67
564777315276
568C9083F71C
57734F6F6974
57784A533069
584F66326877
5A1B85FCE20A
5EC39B022F2B
623055724556
62387B8D250D
6245E47352E6
62CED42A6D87
62EFD80AB715
645A166B1EEB
649D2ABBBD20
666E564F4A44
668770666644
66B03ACA6EE9
66F3ED00FED7
67546972BC69
675557ECC92E
686A736A356E
68D3F7307C89
69FB7B7CD8EE
6A1987C40A21
6A676C315142
6A696B646631
6B6579737472
6C94E1CED026
6D44B5AAF464
6D4C5B3658D2
6D4E334B6C48
6DB17C16B35B
6F4B6D644178
6F506F493353
703140FD6D86
70564650584F
710732200D34
71F3A315AD26
744E326B3441
752FBB5B7B45
756EF55E2507
77494C526339
77646B633657
77A84170B574
79674F96C771
7B296C40C486
7B296F353C6B
7C335FB121B5
7F33625BC129
8553263F4FF0
8697389ACA26
86AFD95200F7
87DF99D496CB
8E5D33A6ED51
8ED41E8B8056
911E52FD7CE4
9189449EA24E
91CE16C07AC5
91F93A5564C9
925B158F796F
92EE4DC87191
932B9CB730EF
94414C1A07DC
95093F0B2E22
961C0DB4A7ED
987A7F7F1A35
9B832A9881FF
9CB290282F7D
9DC282D46217
9F42971E8322
A10F303FC879
A21680C27773
A2ABB693CE34
A4F204203F56
A56C2DF9A26D
A57186BDD2B9
A643F952EA57
A7ABBC77CC9E
A8D0D850A606
A920F32FE93A
AB4E7045E97D
AC70CA327A04
AD4FB33388BF
AD9E0A1CA2F7
AFD0BA94D624
B1ACA33180A5
B35A0E4ACC09
B39AE17435DC
B468D1991AF9
B578F38A5C61
B725F9CBF183
B7BF0C13066E
B8A1F613CF3D
BA5B895DA162
BBA840BA1C57
BBE8FFFCF363
BEDB604CC9D1
BF1F4424AF76
BFB6796A11DB
BFC8E353AF63
C0C1C2C3C4C5
C0DECE673829
C2B7EC7D4EB1
C3C88C6340B8
C3F19EC592A2
C4104FA3C526
C5132C8980BC
C5CFE06D9EA3
C620318EF179
C6D375B99972
C96BD1CE607F
CB779C50E1BD
CBA6AE869AD5
CC6B3B3CD263
D0D1D2D3D4D5
D21762B2DE3B
D2A597D76936
D327083A60A7
D4FE03CE5B06
D4FE03CE5B07
D4FE03CE5B08
D4FE03CE5B09
D4FE03CE5B0A
D4FE03CE5B0F
D58023BA2BDC
D9A37831DCE5
DB1A3338B2EB
DD61EB6BCE22
DF37DCB6AFB3
E10623E7A016
E241E8AFCBAF
E2A5DC8E066F
E4F65C0EF32C
E55A3CA71826
E703589DB50B
EB0A8FF88ADE
EC0A9B1A9E06
ED646C83A4F3
EE4CC572B40E
EEB420209D0C
F101622750B7
F1B9F5669CC8
F23442436765
F238D78FF48F
F26E21EDCEE2
F4396E468114
F4CD5D4C13FF
F662248E7E89
F72A29005459
F792C4C76A5C
F7A39753D018
F9861526130F
FAD63ECB5891

# Some keys of https://w3bsit3-dns.com and https://ikey.ru
BC4580B7F20B
8E26E45E7D65
A7141147D430
18E3A02B5EFF
E328A1C7156D
8A8D88151A00
7A86AA203788
72F96BDD3714
C76BF71A2509
1B61B2E78C75
045CECA15535
6B07877E2C5C
0CE7CD2CC72B
EA0FD73CB149
B81F2B0C2F66
BB52F8CCE07F
46D78E850A7E
E4821A377B75
8791B2CCB5C4
D5524F591EED
BAFF3053B496
0F318130ED18
42E9B54E51AB
7413B599C4EA
9EA3387A63C1
B27ADDFB64B0
E56AC127DD45
0BE5FAC8B06A
FD8705E721B0
7259FA0197C6
22052B480D11
9D993C5D4EF4
C65D4EAA645B
0EB23CC8110B
3A8A139C20B4
19FC84A3784B
0F01CEFF2742
A3FAA6DAFF67
BC2D1791DEC1
7A396F0D633D
ACFFFFFFFFFF
77DABC9825E1
518DC6EEA089
044CE1872BC3
114D6BE9440C
AFCEF64C9913

# Russian Troika card
EC29806D9738
08B386463229
0E8F64340BA4
0F1C63013DBA
2AA05ED1856F
2B7F3253FAC5
69A32F1C2F19
73068F118C13
9BECDF3D9273
A73F5DC1D333
A82607B01C0D
AE3D65A3DAD4
CD4C61C26E3D
D3EAFB5DF46D
E35173494A81
FBC2793D540B
5125974CD391
ECF751084A80
7545DF809202
AB16584C972A
7A38E3511A38
C8454C154CB5
04C297B91308
EFCB0E689DB3
07894FFEC1D6
FBA88F109B32
2FE3CB83EA43
B90DE525CEB6
1CC219E9FEC1
A74332F74994
764CD061F1E6
8F79C4FD8A01
CD64E567ABCD
CE26ECB95252
ABA208516740
9868925175BA
16A27AF45407
372CC880F216
3EBCE0925B2F
73E5B9D9D3A4
0DB520C78C1C
70D901648CB9
C11F4597EFB5
B39D19A280DF
403D706BA880
7038CD25C408
6B02733BB6EC
EAAC88E5DC99
4ACEC1205D75
2910989B6880
31C7610DE3B0
5EFBAECEF46B
F8493407799D
6B8BD9860763
D3A297DC2698
FBF225DC5D58
# Strelka extension
3367BFAA91DB
4B609876BBA3
5C83859F2224
66B504430416
70D1CF2C6843
8C97CD7A0E56
B9F8A7D83978
C4B3BD0ED5F1
C4D3911AD1B3
CAD7D4A6A996
DA898ACBB854
FEA1295774F9

# Moscow public toilets card
807119F81418
22C8BCD10AAA
0AAABA420191
E51B4C22C8BC
DBF9F79AB7A2
34EDE51B4C22
C8BCD10AAABA
BCD10AAABA42

# Moscow social card
2735FC181807
2ABA9519F574
84FD7F7A12B6
186D8C4B93F9
3A4BBA8ADAF0
8765B17968A2
40EAD80721CE
0DB5E6523F7C
51119DAE5216
83E3549CE42D
136BDB246CAC
2F87F74090D1
E53EAEFE478F
CE2797E73070
328A034B93DB
81E1529AE22B
FC55C50E579F
1A72E2337BC3
5DB52676BE07
F64FBF085098
8FE758A8F039
BB1484CC155D
41990A529AE2
CD2E9EE62F77
69C1327AC20B
3C9C0D559DE5
67BF3880C811
48A01159A1E9
2B83FB448CD4
F24BBB044C94
7DE02A7F6025
BF23A53C1F63
CB9A1F2D7368
C7C0ADB3284F
9F131D8C2057
67362D90F973
6202A38F69E2
100533B89331
653A87594079
D8A274B2E026
B20B83CB145C
9AFA6CB4FC3D
94F46DB5FD46
C31C8CD41D65
BB1684CC155D
CA2393DB246C
1D75E52E76BE
81D9529AE223
0159C9125AA2
52AA1B6BB3FB
97EF60A8F031
6FC73888D011
3A92FA438BD3
74CC3D85CD0E
025ACA1B63A3
AF0878C81151
9BFB6CB4FC45
F750C0095199
075FCF1860A8
2686EE3F87C7
277FEF3880C0
82DA4B93DB1C
9CF46DB5FD46
93EB64ACF43D
A229E68AD9E5
49C2B5296EF4




AB19BC885A29
505B5A8EB20A
17C548CBC3A6
4C44DB1D0C3A
C1D8B91D65AA
83A05B477535
C015A21E0146
5B926E3751EB
9A7911ECC275
04361330B35C
1E34B127AF9C
863FCB959373
EB44DDC408CE
83D86835B48B
3C888A88C59D
A15000000000
005078565703
6F6674776172
336E34CC2177
2ECDA9A5EA96
2C3EE5E98804
38B67589E47D
964E8E5338BD
BEA20C972E70
6033A1C0E431
4B39E3923D0D
C8AACD7CF3D1
381B0A70E135
8B6A95C7D2E2
ED0EC56EEFDD
904735F00F9E
B32464412EE3
CB2ECC3D9C22
EEC0626B01A1
2FCA8492F386
FED791829013
52AADA374811
87DDD5A188EE
96D5213C5DDB
E8B008239600
D10329D366C8
4A24470C19C5
675A32413770
53B09DB89111
6B3B7AF45777
B04D71906C60
B46824B972E9
021200C20307
CA56EB045188
AC37E76385F5
6C5E10B86CDE
69D92108C8B5
A091485B4B5D
B45171C5A67D
8A036920AC0C
2602FFFFFFFF
1A9A970CC370
22BDACF5A33F
ae7478ccaee7
C229CE5123D5
03E0094CEDFE
CBD2568BC7C6
8394B57153D6
51E97FFF51E9
EF61A3D48E2A
6E77B8EB6444
62FF943EB069
5145C34DBA19
6B857B568C10
2172D827D3E2
C1E6F8AFC9EC
60012E9BA3FA
64A2EE93B12B
BB1924266B36
7708D5CAD58B
AE516A187825
9ABCCD2AE7C7
D6261A9A4B3F
74BF7363F354
24BB421C7973
A0000F000345
2A94CBCD7A6E
62953A89B137
65972038CC25
2170E9D0D448
DE4F5AA9A7F3
000390014D41
353038383134
2EEE063290C1
E8D53410B736
36D268442846
1CD38D77090B
43412D627400
0966C3B28E04
70284824B26C
4D06DBCA167E
6F95887A4FD3
A00000043D79
727A80DD5296
51B4AE31B246
AAAAAAFFFFFF
D4C818A5455E
C3BA2438A981
6E0DD4136B0A
E60F8387F0B9
EA9B1695DD91
90965DEBC8B9
CAB92B865BAD
593DD8FE167A
4DBAC8ECE167
654BACB21C3B
17505586EF02
E9447637E40D
D0A4131FB290
B03000000000
4195EE7238CC
D2550925679B
23C317B8D6DA
759403A563D8
3C633B3474DD
BE5B3ED935AC
9DAC62A346B7
303645E47667
9E5271763D3D
abbf6d116eaf
E3905BA54194
116C31526819
C0C4CA21B876
487339FA02E0
2C7E983588A3
6C273F431564
19F1FFE02563
4A4755BC4A2A
052B16064085
43B3E895B281
622E5E0812D7
AB101546634E
E6655B6425DC
5E1A4EE98748
42F7A186BF87
B66AC040203A
2E45C23DC541
209481EC6256
B290401B0CAD
67150CB11E95
8C29F8320617
74133B1E2DED
DBD9799E15B1
3F7A5C2DBD81
7E5E05866ED6
736B602A93D9
98E8C543688E
D431C8C73BDC
30FB20D0EFEF
ED296C79266C
6B1CC539A1B2
3A471B2192BF
A1D92F808CAF
6175241B035A
E87267A508DB
1E6ED46CE258
6515B38077D6
1B75E7B007DB
643232ADB2D5
2812EB6A427C
1B30A7825B23
34CC7E36C8C4
C7B6702AC17B
A98DEB0733C9
1AE29C8CD672
4CB212D72D57
495C6639575B
1706B1BE25C7
B4B3FFEDBE0A
587C34557B36
80CED5362B2C
83378A077357
D86243C1380E
925A5521D48D
110BB6D5539D
3EEB33434C1A
22C2176E1CD6
3C4A12E7A107
9984C1A3229E
B14775DEA2E2
24CAD4153036
47E9D4D4BE35
00008627C10A
688BD5B7B4E9
590BD659CDD2
732C9BE4DDBA
6696C4332D46
0B31815E6A7C
B002D1BDC29B
31BEC3D9E510
5C9B1A8E31CD
712E6CAA74A4
5A4740D952EC
74AA58008A31
DD68DE9CDA5A
2C3FEAAE99FC
CA119C79A197
9DCDB136110C
A513FF1232E9
BC7BEE6B71C4
DB37160CBB4B
A787C822020C
4761E34CB054
FFFFFFAAAAAA
EDE2747DA6C3
88DD4B7C5991
37E602347133
D7E8A5089E7A
DCCE477E785E
709BA7D4F920
7EDADA19EB57
1B8189BD966B
BC66E9270049
6887A122AA62
C9D449AD9970
4051A85E7F2D
0E620691B9FE
6B638C1C950D
3B99486097C6
C3CD74758DE2
C46A048C88DD
850984712F1A
D23C1CB1216E
77322DD2E184
EE487A4C806E
9D59641E40A5
223C3427108A
3B4C51ACC53D
A9B43414F585
810518578380
4CFF128FA3EF
27D1635ED1B3
98CD5AA2A4DB
6685D0BE19E0
B75176C82A8B
37FC71221B46
597E98000ED4
7091621EA016
759D2130312B
4387ADE263DB
66933A9E7982
D65561530174
1E8516585792
21A5B6481B7D
9A694755A978
30FFB6B056F5
807466CCBAB5
605F5E5D5C5B
34002AAEE45D
A7E3B3459240
BA7BBD9683B1
BAD293A45C8A
C9826AF02794
FF58BA1B4478
5902E4DCC95D
8A906B4B3211
9EB7C8A6D4E3
03EA4053C6ED
8AD8B41EC218
7F60AEF68136
4EA7B0BED74B
1BDA0D87A575
47C23398EA52
E75E07A010D1
A199132A4043
BCFE01BCFE01
ECD4C42EA3D1
DEDD7688BC38
835D33B48113
62C531C6E29C
385EFA542907
60C742D8D9C0
83F3CB98C258
76984E62CCE4
B05000000000
E81512343BAD
474249437569
7D46C149DAD9
E8C4B4A4E482
5A99578CAA13
09A14A80754E
C953797CCE61
58C35C8BC9AB
3E0913A96E74
66718BD91332
3E23271C1C15
A86C2595A1C3
DDE7304E78B6
C07EE1E10B56
EA4C494C9353
4E3D548E1267
EA61AC8B4969
2066B2F27017
3BC741376E71
28133B46730A
6D0B6A2A0003
A5142D626200
4A4D5E3A9011
9F97C182585B
1A3A76ED470A
ED65A9B6469C
B7B9D7E523B8
3343B72BAA71
51798AEAAE9E
754AD5773746
3372C9C5D4AE
678B98AA2E86
E127434AB3B7
434CE764DE91
1417E5671417
066B2F230172
26D641E834DC
4D1A263BA48B
ECBBFA57C6AD
1D12BBB575B1
2AE7BDB10CB4
540A5B789761
1B14CAC3D0C2
63E6AAAB4433
0BEC525E3463
649B302A97C5
99C487AB85EC
7BCB4774EC8F
052B99EC186E
AE8587108640
0832E4783600
9C45237377BE
00383D96411D
C06CE7D57A0D
B66060201705
5F31F6FCD3A0
C27D999912EA
5A6ED7966868
A9C37CE71D23
2C60E904539C
772219470B38
54C649075B57
377EC8A78B8D
461744C8EABD
400BC9BE8976
76E450094393
E96246531342
B099335628DF
A3A26EF4C6B0
035C70558D7B
1E352F9E19E5
0340643D5E27
9026977EB8A6
A2CB60E815A0
14A353C60820
B6C6558E58CA
318BD98C1CEF
AC88B26AC1D0
AE4B497A2527
00460740D722
E6849FCC324B
81BFBE8CACBA
64AE7BEA1784
133DC845505E
01A0C008A5B9
0DE8A36CBBCC
33A444334869
2C9F3D45BA13
3862B259DC71
96A301BCE267
E7CB93E68155
7B56B2B38725
1EE38419EF39
8F9B229047AC
B06000000000
131157FBB126
EB276C9AB68D
E705087DECBB
D66AE9282140
E1EA6BAA03D9
4124864B0D40
95327A0A3600
5D293AFC8D7E
D35B2B75CC52
CC2C02300D34
C16EBAE928B2
04E16965C142
8E958D8B8C52
B385EFA64290
3A6DE2081CDD
4D6F62692E45
7B4DFC6D6525
A314B97C1A6A
AD105D52DB36
77DB71037644
191390328752
60B8411D876E
75E454785C6C
AA0857C641A3
B410B958C3B8
EB5588EAE5E8
8270D538D5E8
A10000000000
A44590A779A5
8AD966CA3B4D
155F91829013
C0BEEFEC850B
730956C72BC2
D20289CD9E6E
09DB8EE5458C
6130DFA578A0
ACAEB3456AD9
199404281998
248EA5E91987
363119000001
E45230E7A9E8
3da5dfa54604
296FC317A513
09429512046E
52A230B1C50E
61E57B490A55
D1F71E05AD9D
ABBB521319E6
CDABDCA23986
9FFDA233B496
76E5DA67A1EC
082B68A67491
2E79209B9519
EC211D12C98D
21B91A26133A
D88A12EB3622
D8A3690B0115
1ECE3D04A020
411053C05273
157B03405B38
8AB823BDC2AE
B9485A9648C6
C0AA2BBD27CD
2332BB9A2452
55D2E4AC0446
C10F92A4E57E
A666347B3B4B
62711F1A83E9
96382E1C8E12
C2A701656B8B
549945110B6C
673551D0A99E
77B40902B6D9
9EDD416A7912
BB2C0007D022
C0E0E092C8B4
BE7C4F6C7A9A
EED56840AEBA
0CE06C96DB4C
4D48414C5648
71D8BA423D55
1774DB1A8CA1
7DD399D4E897
7549E90353A2
0117BAE4D8D9
8384148AE52D
45FEE09C1D06
70172066B2F3
C7034BC581A6
4E94C7962769
DE1FCBEC764B
8CAE5D688443
4684316440D6
500AE915F50A
922E7955CC67
E65111EB1E40
60100DD0E023
A00016000028
1FB235AC1388
3DB004172BE7
B0463E703098
431D799E0C89
D669B3AE1E11
05865124E5CA
6472616E7265
4C2E9455D296
9014E1430AEB
B14080E570D1
912E33563E1B
540D5E6355CC
13359D5AE9A5
4812AEC4B01A
39AD2963D3D1
27073B57132B
8C90C70CFF4A
AA734D2F40E0
CE5AA0C8B5A8
376D6C446746
A253602B9445
4D769DA515D3
A52B8929D665
4015D16B5C1C
B509D631967C
91FF18E63887
31A16DAC864D
1CD1AE73CA8C
C1D72A47755A
70984C14D3DB
7600E889ADF9
833FBD3CFE51
BD9E6EB7B524
370aee95cd69
FC0B50AF8700
2EB24B573DCD
06124317A9A6
3CB9E31D6022
3864FCBA5937
009A4C4C6C49
1426EC62BB6C
640524d2a39b
E94836269887
6E5582237608
3F3A534B7B7B
81DE6062B9D7
4D13683C7960
676D682C4336
BEEB4A159B37
5E41DD5D1154
7EE2A624851A
A309E3AEBDB9
A00000000064
B6803136F5AF
2900AAC52BC3
8E7B29460F12
06966B31A285
D7BD3AE48E93
C342F825B01B
D18296CD9E6E
D94E36427E20
25892216C620
6291B3860FC8
A7AE4A5A33DC
E0E21213C611
6520446F7665
6DDE6E871C64
20267CB20256
4708111C8604
992B152E834A
9C28A60F7249
D4CD56DB8AEB
2E12426D8847
34DC25B4D0CE
C56D005E258E
5BDC1391B289
7C87013A648A
668920AEE063
233D7B324CEE
50B77DA96DE2
C41514DEFC07
4AB725ED89B5
854501E98239
231173B68E46
54AF91829013
A37A30004AC9
FFFFFF545846
9C4E19AB64B1
C8E173DB04CC
C3B1BB7E7492
39605B3C8917
D982B4846A96
419513740558
948EE7CFC9DB
BC8B21AD8802
B6323F550F54
97300764797A
B56CA847A7C3
BDF837787A71
76E3B23696BC
AD4EA84D7185
A05000000000
DDDAA35A9749
DBA0A2DCA8E0
29EB3CA1C0DE
7789E646A556
7C82EF592001
52B0D3F6116E
1A2C8D855336
5A7A52D5E20D
0965e3193497
18C3AC2A7E90
DC242193D7E3
D5ABE7180600
76078A25C088
1352C68F7A56
52D20D6E3E35
97271231A83F
17BC8EED9A0C
8005BD088847
2CA4A4D68B8E
E6293BDA5EDC
FE2A42E85CA8
337237F254D5
319E8895EAB5
7C418B493454
AD11006B0601
83BAB5ACAD62
973186B345BB
BCB7A7006400
DD6E0587A821
0F3A4D48757B
26107E7006A0
41F262D3AB66
525335E4CD34
989D127BD496
A5BCBA6BE592
D726C4979654
505209016A1F
0CCE39820AAE
194D4E1DE89D
3C383889362A
1B20A6E1D06B
4636195CDA2D
D58660D1ACDE
61D030C0D7A8
877641436923
CDC21E1E1EC7
21EDF95E7433
8D43D81E37B4
810D24CB13CC
3B1D3AAC866E
1F0128447C00
2491457885A7
D0CE7EB0D379
8CA939DC6DE4
0800F9917CB0
12E50BE60524
27D5B8D2642E
0cf1a2aa1f8d
EACDA4DBE420
93D985D55712
C2CBB2ACD38D
2089B5D68B27
9B39A60D3841
E886AE7D1BE0
2E25AD1D6D8D
1665FE2AE945
11AC8C8F3AF2
16124677BBC5
CB75C1BAE669
674C7BB59A16
20B6691C64B1
281DD9E6C98E
68F9A1F0B424
4A2B29111213
562E6EF73DB6
18025130661E
F253C30568C4
28D042242A83
39CF885474DD
9996A233442A
40E7B8D60242
A89903B6ADDB
66141DDE8320
84B24DBB9A67
413BED2AE45B
2E4169A5C79D
B08000000000
8A1869848D1A
2D2A97DD45E3
1841CC4E3E79
C38D19A9C8D1
7C7A86CC727C
82C5ADED4B81
580C377283C7
558DB8891A90
A47AD3895C63
42A959953C45
9937553A965E
5E594208EF02
5D0762D13401
937144459949
E3AD9E9BA5D4
85A066D39785
D1DC0E1CC09E
018861488381
EE3029556CEB
022FE48B3072
874EB25C8721
6476FA0746E7
C14601C6B411
83588E140165
B637E46AD674
37284428A250
E80C5E3E8227
5A7D87876EA8
9A2132B5B625
04109ED8EA79
954275CDD7E0
508357498162
812B02C34A64
4CE00134DE1E
CE99FBC8BD26
AA4D051954AC
586B470A43B3
6AB676B4DB9D
8637BB3BA795
912CD8E04437
86EE9C410811
A297CEB7D34B
E46210ED98AB
929CC86B1B26
97E9D0C89DA8
79B798D66B01
A42158CC74B5
AADE86B1F9C1
34D3C568B348
1B1717043D2B
9CE96BADE4D8
E49DD6062901
AFBECD121004
ADA093B06831
A00001000030
9917BDA7B4D7
2D302827C9B4
A00003000084
05F5EC05133C
72B393D6E8A9
9A05EBE41D7D
9386E2A48280
65626F726369
495657C78147
DEB2BEE8858A
5B41CEBC2213
6EEC05EB651C
A9F3F289B70C
98314DC363C5
AC58C25A1559
A479A91EED49
BDB5DC09C522
14C9BBB5361B
F57F410E18FF
AFC984A3576E
914f57280ce3
A0A1A2A8A4A5
A514B797B373
B51083D5C2BD
3A8498924010
2C03252C10E7
64B8632B54D4
9AB22BBDDD87
34240649314A
9AD8150BE648
F4CE4AF888AE
B8178A34E2DC
B1BB0DB95C67
840160379EEE
80D2CC78E10B
B7709ED7CE60
3E7DD7953DDD
43400A093A7E
5C9D20250D74
157308368E8E
4B787B273A50
9D4C35AE1A08
4143532D494E
0854BF31111E
93B4BD1CB47C
1234B5BE8E78
EA3BDAA4E498
107A6AB6B305
B7A26320A491
1332117E8756
5E6ABB51EC75
78279397A68E
76BAAA710D25
013940233313
FC9418BF788B
ECC58C5D34CA
32560224418D
B09000000000
7C491D518242
32589E221D10
71CAEEA3B771
49E93C110AA1
9F9D8EEDDCCE
1927A45A83D3
50240A68D1D8
D14E615E0545
81B20C274C3F
6032C47B7676
CC726DD08765
26B85DCA4321
B2FE3B2875A6
8C5819E780A4
9716D5241E28
9210BBA2AB26
68C9E8AA5C3E
A00025000030
D213B093B79A
72C83B1D098A
81950D0517AC
0B1960681E79
C22D8E2B1E37
CC5075E42BA1
6F30126EE7E4
67E8B986B2A7
63FCA9492F38
401C81A72C56
349BEAC5210E
4D9763C083D9
02096124DA70
424C0FFBF657
ABFEDC124578
0A7632943926
D76DE12943B4
DB01A99DD94C
A00003000057
DA7DD0044DA2
DC7697E37A9B
6A0E215D1EEB
56741B108D22
D2ECE8B9395E
7542A9B65EB4
160F4B7AB806
DEAC67E2D7C1
A026642D13AD
F678905568C3
25AE69DED1B4
6251CE7E547A
00DD300F4F10
2012053082AD
E8B5A0BDD993
002E626E2820
B13000000000
D7D49700BBCC
CA277AC09859
CD333295BBE2
B11000000000
4ECCA6236400
B627A3CB13F8
F3C1F1DB1D83
FEA6B332F04A
435330666666
5726991C8C28
A6E9885AA49D
62B7C7C9B0D0
2011092119F1
D0A7A2787570
6A0B123D7595
455249524345
58AC17BF3629
B6550EAC573A
566441C5C28C
4B92DF1BF25D
50A11381502C
F7BA51A9434E
44E858C82975
206CE78E0C6C
279060E3DEE9
2D8856109732
2612C6DE84CA
C198163ABECE
1096A7830C82
C04660B76831
F3864FCCA693
B0788BE3BAA4
BA729428E808
3444DDE6D7E5
1114A47CC39A
42AA0B29626E
5C313F4539CD
BE9CE00EE4DD
05DC4016B500
B09172DDBE43
8ED4A17717D9
563C6B96D59D
04B717BD92EB
32C6768847F5
A3D30CC8EB97
35123500C1EA
4D79C95DAD2D
494446555455
65B6C3200736
2817C6E02F97
E2F14D0A0E28
C9639352EEC8
8EA8EC3F2320
430E67734C18
6D98AB9CCC71
816875D55ED1
9226D4D1236A
075D1A4DD323
DCB75AEC61A0
A05DBD98E0FC
14EB6286AC57
3B784087DB2D
880C09CFA23C
7B3B589A5525
8B63AB712753
B4B103E693ED
7453A687B5F0
4E232A8C2E30
B570E5EA1DA3
0B0172066B2F
4C60F4B15BA8
0E368FB140C1
5044068C5183
973A28C983A3
D2D72CB60F59
1BB6A9CE71E2
C4C6CAE4784C
E43D54DC3511
285C6604C5B4
BBD4C4699719
005307DB7853
52750A0E592A
8470AAD30447
5EA088C824C9
6888C514DEAD
762E0E021E38
15A45083D24E
BD96355CBE36
9DA728164176
B41D18E3B980
265C03B50877
B02000000000
9F4AD875BB30
89B638BD909E
C03BC03AD437
DD0DE3BA08A6
BC6AB08B03CC
0602721E8F06
69B9CE233517
6CA178E036DA
A5524645CD91
1782BEDBD347
037AC43CBD9D
0CDE3E716B32
9951A273DEE7
CCCE24102003
A170D9B59F95
EDC317193709
B39C699CD208
9764FEC3154A
D1B91D224946
EA1B88DF0A76
06106E187106
7579B671051A
894D8E2DCDEE
8642D9310B46
F80A65A87FFA
0686A9E6D6E0
A7905680A254
760ED0AB626E
AB30CB2CB354
A1D0844C2C63
E2230B8E84C9
2616192EEB22
C90D996C3A2D
53691569B669
F0F0172066B2
199404281970
918048032247
0C5D782CB183
DAE1888DCC0B
324a82200018
C0AD1B72921A
460661C93045
DEB06ED4AF8E
9AD97423190D
FFF011223358
D4B2D140CB2D
3E84144A770E
E1097C69DA4A
4143414F5250
CFC738403AB0
F97371271A84
A9A4045DCE77
310D51E539CA
6B00420BE41C
9224B6555E30
C2740E1665A8
925A070E9096
B84D52971107
8247C78188C5
56D455A8BBEA
CB1CE185575C
84B723B2A237
783859EB51A6
5B6CE0B3AD0A
D75971531042
E7D6064C5860
735175696421
E8794FB14C63
72B458D60363
C40964215509
2158E314C3DF
C7CD131E9B60
E9AE90885C39
0759955331EE
878A091B74B7
CAE8572C2657
05597810D63D
45C414CDC347
7A0455D0A7EC
2C7813A721C3
9128A4EF4C05
05D1FC14DC31
E5519E1CC92B
6153ADD80A15
36306A9CA571
C56D052D5533
D16E6B668254
24CE79506842
9A179148B824
B250E9590215
66A3B064CC4B
A57DBD287491
3111A3A303EB
86228C3742A4
C5BE33E6B1E2
45AE5DDA9830
DDDAE53AA711
988ACDECDFB0
A1B5577ED36E
1B1A054566D9
6303CDCBB233
30BD652BED24
04524659496E
29EA97BC4A6B
10F2BBAA4D1C
CB18774EA550
F0FE56621A42
26B744C673DB
2A4A55052A51
CCC1EA3E27B8
1268C7D104E1
79B9148761B3
AAC6E3205D48
50d4c54fcdf5
4D02A3D7CE48
90E56E616DDD
506DB955F161
0793533A5087
12AB4C37BB8B
2CC55B46705B
CD7FFFF81C4A
5A12F83326E7
18F34C92A56E
F4CB751B031A
A805534D84E9
33754E0D1687
E859EBC22318
22ECE9316461
7B90C2BA9B23
A09000000000
62742819AD7C
17C6299D5A37
CD11359C7A90
D01AFEEB890A
5B70E0B11758
587329CE3EBE
973BDDBE7434
066F5AF3CCEE
79C69F7EC7C0
39070618BB17
4CD3B228EBB4
82E344329D34
77383BAA4D90
4A6B36C5BCCC
D5C172325DD3
E902395C1744
A04000000000
4342794AD7BB
B28BE0D819ED
41016C0CB8DE
831207CA6E8A
1AF66F83F5BE
888EBD3DB945
B70B1957FE71
61C4E56629A3
BD7CA11B9551
237A4D0D9119
E6BADC631036
FF94F86B09A6
96706C8D6ECC
D85E51344EB6
A9F95891F0A4
4119340759A2
8E55316D3B3D
B69D40D1A439
769AE4646931
6E3D7366E78C
BCBC6637499B
18A97BD26818
8B9999AE9703
CC559969D0CC
8CD2C872187A
583C936DCB4B
7c9fb8474242
974838AE17A0
52AE9A909674
A16EE9666D5A
8CC1133D7D5B
74498C1D4B3D
43982124C310
D9FF8BEE7550
CE58AE1C51E9
1153C319B4F8
AA5B6C7D88B4
3A09911D860C
48276645A4EA
8A39D09508C9
16901CB400BC
AE817239CAB5
200A6A3AA65D
e43b7f185460
88482A12C2C6
91142568B22F
43814087A7B5
217250fb7014
b79e5b175227
AE7C3AE5334A
06A34E5E6639
B1CCDB7999B9
04DC35277635
2DADE48942C5
6700F10FEC09
F22A78E29880
A1EB280E3901
D0489010A72C
D66D91829013
BD06E96EB7D7
18E887D625B4
763958704B78
29ACACC2828E
2D716C9C467B
B5F454568271
E98DC3B561B5
0AF7DB99AEE4
738D7833E7DE
A1AB3A08712C
A00003000028
F7FA2F629BB1
7CD52B5B8E77
6493D06D5710
7EC45CCEC35A
913385FFB752
E1EA831EA514
196E279BE9A9
B15000000000
827ED62B31A7
F4ED24C2B998
A00000000008
0A44A754B592
09E6CB76C080
7B173A4E4976
B8457ACC5F5D
D99425130C1A
6D3CBD12BC6D
3B4497052B42
6D83563EB521
C27F5C1A9C2B
25D967D4DD35
EC1A55BB58EB
CEE02D97E5BD
C477B966D328
C9CCA6D095A3
81CC25EBBB6A
46D012CA3BEC
002DE0301481
FB0B20DF1F34
535F47D35E39
0000FFFFFFFF
2A079CC2AD37
D61707FFDFB1
3E3A546650EA
2e032ad6850d
A71E80EA35E1
2077C980EB2E
2625E408276B
9860DC044565
E65792427D4C
5D8C3A5C5761
6DEA848B6195
63AA2A5B076C
B6303CD5B2C6
576A798C9904
E33E807EC3BA
7910A31ECD19
C003962B3462
E53354B71B10
B5244E79B0C8
C54474936B59
7DCA66BACA13
87291F3861FC
0C4233587119
0B733C13E2C9
28D70900734C
C27924128A00
749934CC8ED3
4243414F5250
284BA0A0A29C
7B304F2A12A6
A00002000088
55710879E113
C98147E69033
3C6D9C4A90FA
D10008074A6F
25352912CD8D
C23E999B6298
83A0184757C0
63539BB89DEE
17B561AA82B4
147D93848C70
612A447A2149
91CB7802A559
5CD5E98A2864
17DA5C873BC5
7D4CA630E229
BD213E28C568
A22647F422AE
4A4C474F524D
5313E9079489
019761AA8082
30AAD6A711EF
BC74CA2C2B06
BE8286DA7D12
EDBA3C943EA8
94673AE73823
78EA6EB04463
567032E13B54
17E9C4C416EB
D82E6938C58C
AD38C17DE7D2
ED3A7EFBFF56
4C67059B0006
740AB5126199
7221E016597B
C4033B3BB1D7
224A308017D1
A2F63A485632
C9739233861F
616B820EAD01
A54056E87CBB
919B1D357E91
43C7600DEE6B
65A3D5823819
5E810C48C8D8
7DC935E220A0
B42C4DFD7A90
E41E6199318F
6879B1CA44A3
29C35FA068FB
3DED9D496478
10F3BEBC01DF
88DDC24E1671
1C5179C4A8A1
8EE9D9C03A0D
C9E893C4090B
D0B8C06C02E4
03F9067646AE
6828B52B6507
799E4E270953
4DE6CB63A920
43454952534E
578A9ADA41E3
28035CA5B300
5EC7938F140A
4CEB27151C49
718BDA352E28
CADED0C50AC4
B27CCAB30DBD
2910AFE15C99
0F1A81C95071
99858A49C119
864CA2A6BE93
0A4600FF00FF
680E95F3C287
9140EC087241
BA7384AB949E
112233445566
4DD9D9B637C4
D3B595E9DD63
07121B8C633A
929E1556110E
A04671256EE2
72066B2F2B01
0C208AD4E4B3
B68175BCA864
C3EE19B61C89
D73438698EEA
ED2CE17A590C
7D412100532B
CA309D2CBC41
CB1999D19E10
CEE3632EEFF5
CA80E51FA52B
C197AE6D6990
E1DD284379D4
3C84B55A5E54
6686FADE5566
A08000000000
9E46407C9024
8442CC9AA777
681EA28BA6CD
7D0A1C277C05
6E978A7B16C6
1131A81D9507
02A46AC9233A
16B25A453093
4970714D53D9
E2A9E88BFE16
4314D9D03B95
6A7B3A7B6735
793D98517D33
E34C5B12BABA
EBA964C07075
D23A31A4AAB9
0B3B8C2833BC
56A7930913C3
63783393E20D
C7E35D6294BA
1feda39d38ec
5A150653E624
0860318A3A89
B9DF35A0814C
0CB6CC83AC45
6C9EC046C1A4
14EE72B27223
3312C094BD20
1639134699C7
DEB550958AD9
B160677E7035
141940E9B71B
386676C44A13
5DE8717BB640
A31E72DCC826
D8545199A949
76A616C3D42C
DB22BB7D6818
7C09DC408C47
158B51947A8E
CE63DE29E069
704E1B85BED8
A4693D21013B
D6A91C14AC47
58CD5C3673CB
776C9B03BE71
1300EC8C7E80
AE98BA1E6F2C
C428C4550A75
0D3385CEA152
BA8224EA7A80
230E26964171
53864975068A
BE19C75D6B7E
B19D3D57176A
E907470D31CC
A9B018868CC1
91C2376005A1
070D486BC555
DE1E7D5F6DF1
577C31903867
79604362370E
4D8B8B95FDEE
1637D8ACA71E
A9391782A846
358A6A398211
738385948494
7bc9ebb8274b
84044BAB78A7
960C98566E52
E43562C624B0
18c628493f7f
1D89D900968A
4DCB89C7B2E6
B5D7E1135821
ED22B7115435
C5C272694A1E
B4204546A74E
B9C874AE63D0
35E7DE9899EE
DE1B4DA681B9
343C556CEE59
C225479C7064
8C99807368A5
AECC93678543
A85198481331
3B4986981212
B328014DDD6A
17820DAA47B2
3A1E82E2CDB7
DB6819558A25
2EC6450A47C7
5AF445D2B87A
65DEDABD1B34
B0452769A83C
604AC8D87C7E
43B04995D234
1DB710648A65
D3B1C7EA5C53
76AE99D9A294
8B2A5E0332A1
AB8953D3560C
3BC4A3099B0D
B506567A2B84
D4C67846791C
D9E091829013
B71D5B22B1C2
2584287A0174
5697519A8F02
5ED616273468
0A7328887DC2
BCBD2B8BE4B3
7E30778792D2
216024C49EDF
B2554CC8AD6E
9D090AE1A15E
CA92DD257E21
3B86A20C16EA
E4450EC1010C
2ABD68BDC5A3
D09893B4EE04
DEB7D7E4C62B
373E5827E0B8
BA227EE91818
02BED876BD48
D660CE9E3080
CE0456AB0DCE
69B5357A617A
D0DDDF2933EC
510A8C52AAC4
B7009204D512
0670AEB833CE
34635A313344
190819842023
1EE60A4A8D22
A34DEA01690E
842146108088
712BC18422CB
7E680A48C383
AB6EE0761ACA
00ADA2CD516D
B0A2AAF3A1BA
A6BAE1A1520D
CB574C6D3B19
DB32A6811327
257377227B34
105743704432
3A9D49E8BEB2
70E3AD3F2D29
64CBADC7A313
087C0CDA3B46
857464D3AAD1
D3F3B958B8A3
4BF6DE347FB6
171B15888483
9607AE17AD09
4D414C414741
7578BF2C66A9
979686C51AB6
042CDEE5D0BA
644ABCC3DD12
74C27A96CB3A
BB320A757099
C1E51C63B8F5
33305B0365AA
4098653289D3
2A47CDD3A322
0E175033BD77
5C36456EA1E5
C6C866AA421E
518229589A81
B3630C9F11C8
1D28C58BBE8A
4245921D73CA
A4CDFF3B1848
2C71E22A32FE
8619557091AA
3D89120EB993
3B0172066B2F
A783A8774651
A424C686CA39
B188BA649EA1
4B59316C10E0
3E173F64C01C
CA4BAA390BC4
B04000000000
47AD81972D5B
7531E3E2A41C
09938D05DA78
255A9E590BCC
6088A566CC60
91D28E2B126D
3D923EB73534
D27058C6E2C7
70CCC3A2D7C0
A7765C952DDF
4AA715A0BBB4
A1E0103A1879
EC71B679D3AA
4A832584637D
8DA62EC0C524
A588C918E327
4261A795D5A7
A2B019B46CB9
5047DC2975BE
0058A4884CA5
A81E6D3C8E11
A3196E77B072
6B0B7B967871
8AB21B524C5C
8DFACF11E778
B4C36C79DA8D
87513C960770
33256E443128
37BD90A68613
B5ADEFCA46C4
AB91BDA25F00
C0411C28857D
75A0E10D8C84
E8428C8B0740
47D410D1C7C4
616D75A4A022
072B300309C9
9D56D83658AC
C9BE49675FE4
C9CE81D47EDB
94B6A644DFF6
71A8D54D82B3
16373A44D5D7
39C0E2ED99B5
30C520D6A2B9
116A92C793D6
A00000000058
C0067E095049
AA6C835C9124
9B4ADDDEB749
68C00A810D41
08506533E741
DE2D83E2DCCC
00BAC32761D8
79A00573947A
BBC1256810A4
6E05B5C44A54
9C616585E26D
0710E7818AB8
E42868808B70
CB911A1A1929
4F4553746B41
B1EBB537CC0D
4EC9AB4B5519
DD7B1A7C6A82
9AC43B5A06D8
9F27D36C4230
18AB07270506
444D37149B20
BEE8B345B949
3BB36BC22CE4
6CA491A8C7B8
05DB68DB9364
FA1FBB3F0F1F
AE9EB8CAB2C3
1A9872D00EC9
7C469FE86855
FFFFAE82366C
7A09CC1DB70A
AC45AD2D620D
419A13811554
46CAAD12C524
3973ABFD8B66
4F9661ED2E70
045E5588845C
4F75030AD12B
44A04DAA30CB
315AD0D6E6D2
593367486137
CA0D9CCC4C38
aee297cb2fd6
A03000000000
632931BE8EC7
99E2A19C9673
8163A5DDE1CD
5CE0EB9C01B6
1D30972E6485
8A6BC2E3811B
C1EB7337A035
B793ADA6DB0C
67B1B3A4E497
5083664D8C09
037F64F470AD
02C10DA600D0
E49A03306224
80499BAA5959
865B6472B1C0
A7D71AC06DC2
4DAC8EE52C68
1B3E45AEE657
489C783B3514
4F0E4AE8051A
C67B8E869D90
0490921D0194
2D41850A8AA6
D11E7D1BBEEA
E526BB7888DB
427553754D47
547B86E57596
11C68052AAE9
1A1B1C1D1E1F
307448829EBC
7260377CD286
18AB05761CC5
0B00220EAE75
AC4BC5B2D3C0
89EAC97F8C2A
756C15E54212
D9109460D912
167358BB268E
4E2879A411E7
75A807E46B96
27689527E201
5184D04315D7
35D850D10A24
04256CFE0425
35EDABB506D8
6D9B485A4845
D4C37528DC05
312670228372
12FD3A94DF0E
B60D053A36D9
2CB671E6365D
DFE73BE48AC6
965D66E19245
43012BD9EB87
A23456789123
021209197507
526EDB918BEE
AD1992AE37CA
FB6C88B7E279
0BB31DC123E5
037B9B8AA219
155332417E00
1428C04BAAD1
92CC200886A2
BE02790E84AC
0C82C94EB11B
CF7A7B77E232
037A5DA4682B
612D81821854
2A1F900D4533
8498740493BB
EEB704D69BCA
0172066B2F03
D973D917A4C7
ECB4019ADD97
B7392DD1E497
A0004A000036
DCB5AC62946C
9092D12E7967
DA303BADB013
0C420A20E056
537930363139
3122AE5341EB
A6A203994202
0500D6BFCC4F
7004BA1763ED
B378C424C9E2
716A747CB931
1FCEF3005BCF
200306202033
EA490920877D
FA38F70215AD
F83466888612
755D49191A78
6AB8E2B49E25
8031E3565825
1CFA22DBDFC3
6E751666AE9A
2EDE1C155023
B64558CAC0C9
C5498606E0A8
8B6216E412DB
57B8B111491D
88C2E39B5990
9E74D104ACEA
E495D6E69D9C
E94D82A564BA
CD3DB8C27E5C
116AA873ACC8
4D2CC85EB338
3119A70628EB
AE76242931F1
D0368B24CA49
A000D42D2445
54AA2915E815
A293A90AE72C
903AA4305025
123456ABCDEF
0A1B6C50E04E
CE75D7EADEAF
98A92128364C
8DACA1BC0636
A2C325A73A9C
6CD430D99958
2A27E0602400
A11000000000
1ABC15934F5A
32CA52054416
630228659A47
B021669B44BB
C9449301AF93
9EBC3EB37130
6BB4ED5E1682
511335CC92CD
240F0BB84681
CC6A93BD93D1
462305611C4A
AD5645062534
8B1C75E27153
6A0D531DA1A7
28C3D17E4DEC
4B7CB25354D3
BBB475DB2B03
476388408D8E
345B62452538
1D09B23EB116
37E2EAE635B5
A4896B2EBA4E
35C649004000
6BB1A14768A8
8829DAD9AF76
18A3196D364B
42068108DE36
46C7246C1958
A01000000000
4751A5274848
004173272D18
000000270000
77C0AC14972D
DC018FC1D126
09800FF94AAF
16A05D5C31C3
702C1BF025DD
23BB58853461
A2B2C9D187FB
22A95CB798DC
854A0ED2E77D
AA2D69C757D9
719B1418323E
8BD586B21ABC
30424C029001
14D258786538
8D0563B86DD4
C2C30D21C53E
28B20331245A
95E9EE4CCF8F
DE8CD4277A9E
03E8CD22E691
D1991E71E2C5
767C33468C72
E57581CE8617
3E120568A35C
A13000000000
314F495254FF
D576E9D856D9
2E52ABE0CE95
B808D87AB75C
947A8147E0AE
9695167B4149
D62A4A0E57C2
E5491B5E3DD6
0E8420B04083
AABBCC660429
048451A79DA1
8C0EA504B635
50983712B1A8
F1A1239A4487
010000000000
B533CCD5F6BF
65E120DE5E55
E69DD9015A43
6BCAE24D9700
1B9CD1ED3420
A18D9F4E75AF
D84C81EE910D
0406080A0C0E
0000A2B3C86F
8268046CD154
83E391829013
A12908B38536
1663659384DC
6CBC25C1DA2E
2F47741062A0
A9182707A219
741A31054E6B
BA6C2E10086A
7932684154AE
4B7C7C315E6E
E9526CACA8B2
4BE0B912A5A3
D8913C2D48E9
32DE3CD81C24
3599856810B2
74A24BE33BE2
F3F0172066B2
9A6EC0A9ECB8
6A68A7D83E11
2178ED80D581
0CCDE948878A
B84C50E56DEC
4317C5C16EAD
DCC44C4E9269
BC5C76E5909C
1C1532A6F1BC
17D071403C20
46868F6D5677
72253C7DD951
B54D7674CB90
50179E461EE6
BC0B2C897267
25BA8775B3C4
F115E91357B3
00C447B8A2D2
3B052E65D40A
98631ED2B229
DBD5CA4EE467
A5BB18152EF1
18E20102821E
6E7DBCDA05B3
85E0B6B26945
A7FB4824ACBF
F89C86B2A961
382DE6AB2D1A
0172066B2F33
297B74853CAA
25228ED714BC
6018522FAC02
40E5EA1EFC00
295D3C9A8B28
2DEB57A3EA8F
9B1DD7C030A1
110C819BBEF8
25094DF2C1BD
A96B08E3A50B
6608944EE186
CDCA8BD7B002
EE49610E6121
5D9DB8445155
DB7E3687E450
6090D00632F5
4C275C8BB2DA
863933AE8388
4E3CB839E87D
B6ABB62E437E
D15C004DBC8D
D9A207103ED7
8B7CCA9DB004
E5C3A9A27D3E
529C16A720AB
3EE6D4A85643
0853A982D793
56207539825A
D5190BD5CED6
3124ACA5491C
DA59354DFB88
DEC0CEB0CE24
39682B3E10B5
C0885A29251E
0DB0A87AB882
B1D3BC5A7CCA
7280858E8B20
61DE2B085AC9
374521A38BCC
395244733978
6443E64DCC4B
6B9D041136B4
0C296648344D
730050555253
05138E278443
8DE3B131D728
690155BE8D8E
529CF51F05C5
2E15681A4355
77D7B7E2C8BA
E61A1DA5A60E
4CA30E1A298A
3686192D813F
A750456E7C5E
05862c58edfb
4AD96BF28190
A00000000096
574343467632
1A47959E7DB4
391771654DC8
734EBE504CE8
3E6E5713BA10
D2752E53679D
43E69C28F08C
870A042C1B34
D5E444E9D82D
E2C9CB14C06C
AE43F36C1A9A
D60DE9436219
4927C97F1D57
763D7E6BB40E
26396F2042E7
446176696453
3250D2E661DA
71DC30168C27
34A939B49EDC
2013899194BB
BADC2149EC42
BFE25035B0C8
7B00211CA416
932035869655
484585414354
41454E521985
1E60CE7C5179
3CD8C6705954
02827C286AB4
536563644C65
1804087C7166
521B517352C7
552249203848
995fd2a2351e
2CD09D3C0A1B
5B0C7EC83645
23997DD240AB
827303C574B5
3F1A87298691
88D252AC1A8A
43595AC786EE
44D3B1561B34
288b7a34dbf8
4578ABFEDC12
526E55542A54
872B71F9D15A
1711B1A82E96
41C82D231497
B9B8B7B6B5B3
3113AADC9D6B
BB41640E6340
85A438F72A8A
E2E89A375B36
ED6748113E0D
702CDACE0C14
5B065568048A
88D026793359
97926543783B
CEB651752D4C
B3B121208E34
8A8EB5771EE9
540E0D2D1D08
EF4C5A7AC6FC
EC2B12107313
211473555436
16065CC411E0
52D0145E1AF5
434456495243
120C83C06317
144489B1056E
3905679DEEC4
97EB8A44C49D
C4467DE80B2D
AFE444C4BCAA
0724DF9AEDE8
CE76E8A600DC
05C301C8795A
675E35EE359E
8AF9C718F23D
5352CCC3DCD2
0D6057E8133B
209A2B910545
C956C3B80DA3
B7AA0CA5D94A
8DECE0DD29DE
6C0458728774
B7513BFF587C
CB642A081A89
099672009EEA
4D23919463A3
C983685AA86B
1B9DABDEBAE0
C9CD8D7C65E5
06B78AD0C4BB
B80CC6DE9A03
0AEE126549DA
74684B0B4B1D
988D023C15A5
ADB24E78784B
B128298D9073
E00000000000
9BA241DB3F56
41BC44A8C3C6
79B7A4C58DE0
071B57D258CE
68D3263A8CD6
A5CC0EE7B9E3
8228D2AA6EFA
B7E9A91174CB
BCF5A6B5E13F
59DB4DBB5D7A
4E8250E29617
7E475BA186E6
044ED79417E1
011C6CF459E8
D9BCDE7FC489
AD5038D15490
06B577E0E480
EA0CA627FD06
D0BE546CC06B
491CDC863104
C55875BCB82C
745276053CB6
AD061A23287D
393CCCCCDA4A
0EA607E1C4E3
A8C0BE436685
874D123262E7
167828B6105C
0AD6B7E37183
90D8713352D1
08629D1DD0D6
C629E0D34581
B6CD1A3EC5BC
BD749E85586A
9D442B28BD11
2B490231E063
49E8249DD677
55D95774E9A0
92D0A0999CBA
70C714869DC7
76140285B768
7E43C3BAB3CB
66A163BA82B4
5D223E990AD8
31E3A933BC4A
BA28CFD15EE8
3E3188294ED1
873CE44DDC6B
514956AB3142
2803BCB0C7E1
A95BD5BB4FC5
64695084C575
79271963B6E8
DDA22A189095
AC7D4B201D92
5E8E50B3048B
67DE22850162
73E7B22D6E54
57A18BFEC381
72B5B87BBC6E
965D72659982
12343D71106C
ED8CEB8B7102
3A524B7A7B37
28DDD4C3E9C4
2E2E85E0E6C9
5E7CC04C3A58
7C4CBBD2DDE1
2352C5B56D85
E4410EF8ED2D
74E3670C045A
B0699AD03D17
2BD607CA70B2
5D384E6A4145
DA818C56CE43
2A4C4DB1D71D
62312EC272A0
1C68315674AC
C1E6149B386D
4C5A766DFE3A
AD7C2A07114B
B3D8C03C78E0
718B39561350
B882FD4A9F78
8CA2C9DC8292
883DA78EC87D
02EB32B92D30
C7BD49777A79
665B8B24C20D
0E0E8C6D8EB6
C01FC822C6E5
9A138D1A5CB7
EA8E8ADC26B9
89267DEE07ED
C404D280640E
6285A1C8EB5C
3C4ABB877EAF
3B8E321AB1B4
90210DDAB57D
1395C108B6B6
61718ED2C94D
F088A85E71D7
BB3D7B11D224
430265958BEB
4808C5AD0115
D12B25B8DDE2
7A4C61A1B48D
BE518C742B74
42FC522DE987
138153A4351A
6a59aa9a959b
B10000000000
BE1266314B9D
A23C91829013
E64C2A07CA9B
B95BFDEBA7E4
95B920CACC84
9551F8F9259D
EC2B9FD483CA
B16B2E573235
4CBC34D10D83
5A85536395B3
97F5DA640B18
2CECBC323E31
9216EEE5B677
5B59BCC4321E
4D57414C5648
B312E56ED250
C314E31A670D
2340CBD61A71
541C417E57C0
AD674E4ADB79
4118D7EF0902
704A81DDACED
BD463C3693A4
29A791829013
84A35A698E93
00F0BD116D70
8C32D0AE3DB7
A593071D4758
5CBA3CEE351A
DEA8098D6E51
73EA81968900
80BB8436024C
D8809EB9BA7D
DA705702248C
76939DDD9E97
7B118EABC7BB
84ABDE484425
E19504C39461
3AD0EE1031A9
B8B1CFA646A8
1C2316079532
9EEE39E00CBB
6307417353C1
F66224EE1E89
C608E13ADD50
563A22C01FC8
1BAB19D01495
CD212889C3ED
0271B7C4B015
BD32E4EC7080
E341574B2E32
4BB747E48C2A
97D77FAE77D3
D8BA1AA9ABA0
1CD3D4E690B7
B9DA40920237
B47058139187
22C3AB41B123
8CCA8F62A551
202ECDCCC642
CD14C8553CB9
96D0C3996714
98A54AD58A43
AD5586744A60
1B4654AE9454
BC7C64828C1D
E045E6309471
B38D82CF7B6C
826DD63B9032
0D8CA561BDF3
636CB69BB10C
8E65B3AF7D22
3D9C3245AE76
415BAA0CAB15
234E50256146
5C8FF9990DA2
66B2F1F01720
8D96A800B21A
EDCE0890472D
7B0DE8504D57
0B764247D00E
C81584EF5EDF
195DC63DB3A3
7B0A8AE18817
F72CD208FDF9
FF16014FEFC7
5E56BFA9E2C9
E6600C4D6A44
0A906663EE1C
4663ACD2FFFF
E8779E40450E
02974B9786C9
0BB8414CB6EA
E7004C5EA94A
50642C36DA00
AB6191DB240A
A6C028A12FBB
235C9338D5B6
D201DBB6AB6E
EBC825C186B3
30B7680B2BC9
0E6478123917
6874E54471E8
49204E3CA169
B292C9554CBA
A78BB575EAC5
5714E9D33034
709311997549
B6DF25353654
02D8A7729ED3
36C54912D10E
CDE668FDCDBA
514B797B2F3A
50265ED9D468
E38A1C654E82
F09BB8DD142D
DFED39FFBB76
A12000000000
F81CED821B63
B4DACABCAB07
C121FF19F681
A91E2BE6C308
360A08C66042
0CCAD03DDBC6
04D49C76623B
A82045A10949
535508AA6C91
CEB105E65289
97274C21BD6C
2F904641D75F
26C6D38B8257
361A62F35BC9
C5ABC0A455C5
55A691710B48
9083158A49A1
89D2C28BE578
BFF123126C9B
573314090BA5
86538085966D
FF9A84635BD2
540B15E8019D
0C03A720F208
4436CB060568
5734CD8A65DA
C757C15E9E0D
227D16EA455A
15DACCE8D5EC
2B2D2DC3D319
68A99E258692
68C9D33E3735
028137A705DB
B1A80C94F710
89E00BC444EF
6232C5262CC6
16CA203B811B
671737BA0054
0120BF672A64
257192699E32
5554AAA96321
7234CC6BD65D
326657A8E9C0
8A19D40CF2B5
C67BEB41FFBF
74772915E24C
397619525709
562A4FB8260B
2BAB94372644
3A5D13E05B6A
5353B3AECB53
C554EF6A6015
6B2F1B017206
9FAC23197904
135B88A94B8B
292C2CCD157E
3321FB75A356
4D80A10649DF
891EDA20BDEA
04602A40C037
64E2283FCF5E
DA3379D12773
1A55D4849951
61780BCB0C57
0DE247593B93
6471A5EF2D1A
2F130172066B
96435BD1D29B
0578E317C419
6AA40421D23C
B1A862985913
BE5695316117
234323BC2992
77C1CE0E7674
8534A6CE0911
CDA811AD5055
A7395CCB42A0
703265497350
5C5752328A47
CD16EAB946E9
D144BD193063
43166BCA83EB
0CE87813E389
B2174092CDC5
82D58AA49CCB
1B9E00780953
1E3C71643766
57D7D4D746DA
9E02910C691A
152FD0C420A7
9982E3E6A4A0
70758FDD31E0
A421D7A04C4B
1ADC527D5BDA
D61A3231790D
C849133B7CCC
60B20ADA0471
71171A82D951
243A41574A39
403F09848B87
FFD46FF6C5EE
5EB0EA0A9412
DE41BBD7E68D
74A386AD0A6D
43CA22C13091
9E0E9D983B9A
4CA74DAC7C01
B0805C191424
7016ECD01559
2381B8214025
919402EC39CB
1523A1E39D03
CE7712C5071D
57D27B730760
200D45263629
A992B5E070C1
FF9F11223358
5583698DF085
A1BE42A15EDE
1795902DBAF9
2E71D3BD262A
B93A6432E51A
03C34821DE9A
6D801AC74572
1064BA5D6DF8
AD2BDC097023
4A65D627625C
1A8619858137
C1ACDB8C1890
5E45A227B391
C798A8465ACB
C99A004E6133
E98075318085
B12000000000
82908B57EF4F
735C2AB60A97
A66A478712EA
6B0454D5D3C3
22A1245CA266
7564993C91C7
A1AEC2B58BBA
AAC0C35C43EB
260480290483
0F35D5660653
32A7F5EAF87D
BA8DEEE045E8
081D1B1C3110
8C187E78EE9C
70D73BE22CDD
873B47C457E6
5261CDDA279E
064d9423938a
D89B5EA419C1
7836593AB838
20188A599582
0380A9A3CBDE
9A677289564D
AF9E38D36582
511E269A9BAE
7A33D19B7248
09074A146605
3AAE07339954
9E7168064993
3C09C971D835
8830379B50B7
72DA8050A38E
01124119AB54
777B1F3A4F4A
098B48278122
8186CE2B363E
918A67D05479
E592ED478E59
4B9901AEC16E
3BF391815A8D
2F8A867B06B4
3D5D9996359A
5B9CA63C4267
B231AA398B90
C22E04247D9A
106E2D6E55E6
B14000000000
F00DFEEDD0D0
2870E08CEDBA
5CCC6D50EAAC
70D9461C5E90
20B51C977E54
BDB576D1E88C
D106E94A4C3B
7BBC9DC92836
4FA9EB49F75E
85ABD94CD7A9
5C34B8E4A456
E9EB2DE57AE9
A00002000021
5032E362B484
9925893ABAC7
5785EE00049E
4CEE1794E0EA
EE17C426D25E
415210E0C6BB
892CB89ACCC6
A9D4B933B07A
75FAB77E2E5B
3BBB7BD8D7B7
82D8E8DDE296
40DABA780B41
1EB0864E9134
D28F090677A1
B3830B95CA34
0AD0956DF6EE
172066B2F2F0
C748500B6947
45B722C63319
0965220D2ECE
639DB16995B7
CC2517AB2346
4A306E62E9B6
C0EE394D3D95
C8382A233993
9232215296B2
7CE836EBD228
05412723F1B6
C427B93DC2ED
A690A817B9D9
E65B66089AFC
E167EC67C7FF
C4F271F5F0B3
A8DE205120A8
68C312391560
2C9E9E4D0895
5429D67E1F57
D2926519AC09
F0A3C5182007
26578719DCD9
1330824CD356
D80511FC2AB4
20CC5A00C677
6E7747394E63
70172066B2F0
57CC9D0AA32B
B83092098A7D
D1972D6CE2C3
A61D5137E6B3
3EB914E70076
CE95875316C8
EDD4A2EA7493
7BB90D382672
A160FCD5EC4C
39A00E856381
46752993E2E9
7D56759A974A
D537320FF90E
4EC71DB088DE
9966588CB9A0
4584EACB6087
12A21B5671A8
9302DEB79C5A
186C59E6AFC9
395D38815892
130662240200
5C9BD0AC1DB1
E67C8010502D
61D59C284952
9E53491F685B
26BF1A68B00F
040047C12B75
A2A3CCA2A3CC
9384841B4702
EE5931913A8D
0B3690D4B122
8AC3B2ADE77B
336C8CBA5AE2
FC5AC7678BE3
0529E8827A52
A402B5137D86
5DA57EACA38C
6BAD01EBE736
A777B233A4F4
00B70875AF1D
B7DEC863369D
7B1D9A2E22AA
6A6C80423226
CC2AC1AD29CA
E33B66EA2705
FEE2A3FBC5B6
AA4DDA458EBB
CC5646BD7AEB
BE0EC5155806
E5100AC4C6C3
037EE3DE21B7
349A347186D7
B72468A7710D
534F4C303232
7A3E0F5B63FC
30D9690FC5BC
2E641D99AD5B
E70143BE0091
868A33A44447
3A5834C46513
C01E8740DE38
EB8536C958B2
5A6272CDBE9C
D44CFC178460
009FB42D98ED
509052C8E42E
A4EF6C3BB692
45CE4E504C06
459BC12982B1
3493D84E6317
C443EEC4330D
6E029927600D
78CCDB50C193
4B511F4D28DD
BDADE6111218
897B845C2680
6B13935CD550
7357EBD483CC
A2BBCC3B546C
08AE4ECD7CE3
86120E488ABF
8ACCC7290C8C
4EB8761372EA
564664475726
B598984AD584
0000085F0000
3EA227893101
8FD6D76742DC
6936C035AE1B
D9C70CC5818A
765584147990
0490AD0C9283
17197B247A4A
97EB373096CA
ACE07B45C0C5
394181105544
E1E59574ADBC
B268F7C9CA63
CA96A487DE0B
B37B48D8C1C5
BD196D0A74E0
18ADAAC2B08B
B31763D9D0DE
66B31E64CA4B
47170BD112B6
5ACB8043C10C
32E532232C29
0B83797A9C64
4E474434FFFF
8818A9C5D406
3E34909990B5
55D1E91B1D35
6D4D29CEB9B5
8B0A3B3DCDD4
B069D0D03D17
84366C6D7781
95C013B70D99
B56EC9A20D28
77E0A57DD456
6135433CC5EA
1D0322005969
23C9FDD9A366
4DEBA10CC85D
153BB53ACE71
03D10A75B56A
C870C98A4E91
6D6E9A6B725D
7076D48D5E49
C95855AE08E8
C581CA998910
763D835BD5ED
05F89678CFCF
F68930789631
4CD3ACABC6A3
2009828E4A21
41B727883B27
E8028A6DCC90
301C9AA3DECA
EB3C9732C3BA
BF3FE47637EC
C76C94B495CA
2196FAD8115B
329AC7C59311
D7AC70A05A0C
74A929877793
B0C3B3299090
C1C55A7A99EA
EC070A52E539
560F7CFF2D81
A00002000086
852BEB133D74
AFAAFCC40DEC
274E6101FC5E
BCA2D8118631
B1E8B5054DAD
11549C141AD9
F5C1C4C5DE34
8EE497C9A869
63B636458E94
7E6545076619
079B8DA54DB1
462225CD34CF
CC1B5BD45315
0267B4922681
B81846F06EDF
3495A04A9270
7173E199A420
CA3A24669D45
4D40BC7A44DB
CA968EBEB9C7
DFF293979FA7
434143445649
534F4C415249
ABBA1234FCB0
D55E5AA3406D
883803A3360C
4AE23A562A80
C6BC3B9CCB41
7A7469B69C6A
2A45A0D8D6EE
CA679D6291B0
A435DD64AD17
A833FE5A4B55
0769855EEC13
353A7167576B
A50DC0830AA5
AFBECD120454
3048EBB8A18E
7A2893B75AD1
B063B209BB20
6BE9314930D8
8AA8544A2207
E4B976AD6687
2953C63E9E58
C5BB2CCCB9C3
C661C4AE1DD1
CE0F4F15E909
94CEEAC5A8D7
33293485AD61
168DE72B3B5A
3C4C95D0A0C7
2DAC030D1AB9
76962C07EC9E
C6A76CB2F3B5
E2CE9A674CBE
6CE210B529C4
18BE810A83DD
3D5EA1C71953
B2C5A2E88304
36CA0101B6DC
B7C344A36D88
736B4A835B2B
C52876869800
E933DA9735C4
3352DB1E8777
486001404A80
BA84C974B356
0E7D4AC83133
A0B1F234006C
C65EEAE02433
E9203D5BD2DA
E20716902884
38A88AEC1C43
25EE21CDE4B9
7B7224C1AB79
8B028B7E6D60
72913BDAB647
8CEC639E64DC
B1BB19BDD424
C90B7AD266D3
E5124DB665A6
D023DB35ED05
8B1B6C705C1A
C670A9AD6066
8AC4317D049B
8D97B475C957
EDC7CEBD4000
1A2B3C4D5E6F
697A8ED07418
C65194543D6B
B7A9DA22E9C6
A06000000000
E0E457054B62
056D4B5D2915
9DA4528CEB8C
D964406E67B4
71BC9C9E31E4
A0974382C4C5
B6A18CBD4DA6
7DAC0E83D335
310241E1CB36
9AEDF9931EC1
534BB4A6984E
03D87397E9A8
57AD9604ED24
10510049D725
4146D4A956C4
7B0BA045AB35
D313116A45B4
323334353637
58B11E803B58
2B051C90BE82
86EDEABCC357
A02000000000
354A787087F1
CFE63749080A
C2A0105EB028
768016001C8D
2AB6536187C7
94552B863E37
012279BAD3E5
7B21781EC649
3CD344A7EB21
779A248E098C
120616C6208E
DB5181C92CBE
024988BC4D5E
2E6803BE2E11
8ACD6B86EC44
66C9880D1DC2
299ABB519354
0599E014139E
0AB08938E3DA
23BAE8DA1AC5
81504133B13C
67D47C1B6425
E76962E3B8B4
3515AE068CAD
E7316853E731
E466090D2123
33B54345C32E
06FF5F03AA1A
E3E3919444CA
485BEEDBC293
10DF4D1859C8
B13AE369390C
EED69A391464
6D97408C6D60
FC9839273862
A2789E1DD888
EB16B6462B66
A58AB5619631
B3A4C47757B0
1170553E4304
47C43D5DD234
8223205047B6
A99164400748
87927467808B
5A211CE57C4B
32A091B89995
B63957593E23
6ABD4C4A72D9
9C0630361CC5
34B16CD59FF8
35D152154017
4537282554C5
35895EB472C4
D5629384CE7D
3882719778A1
CCBBAB6504A4
06CC91829013
58B6AE62DB88
D28B2D42DE1A
223e5847dd79
52B26C199862
31EC44581294
69174742042D
2348251AD23E
A00002000036
AA4E4558A9EE
6039ABB101BB
b2afbf2331d4
BCCC3A719013
668091829013
09ACEA48DD0D
7D49042C530D
1E1A0DB8729C
207FFED492FD
184B95B4E3C6
982D6054B83D
E8A9E2D87D36
62D6EAA06CD6
FFFFD06F83E3
97992CE2DD31
9B7C25052FC3
B941A9D99B6C
C7F4A4478415
A6375E98A5B5
488CCC60B70A
21B4BE97AE07
A5041E8B8E22
66695A45C9FA
826576A1AB68
A6344C0418DC
41B1839829A9
2AA82B4B6711
8DDC91829013
2C6C7957EB3E
051518B3301E
5296C26109D4
A1670589B2AF
75B691829013
6BAAAB1D4589
7AA84B1A527D
3F3865FCCB69
06147D199266
80D62251E20C
C6121BC4A29C
6E6602904925
0849495E1CCA
822017D8929A
A844F4F52385
E1ACC6742AB7
E5BE9C989A29
F700BD8E042D
B62307B62307
048DE5148DE7
8A55194F6587
418184DBB4A0
7C2DAC2CC775
3D50D902EA48
45DB3799C150
F5C1B3F62FDA
1A80B93F7107
B50383A32302
FE04ECFE5577
5E8943D9A836
EAB8066C7479
911E097A27A9
361F69D2C462
D7744A1A0C44
4087C6A75A96
67CC03B7D577
E222553A59A2
046154274C11
30CCE5ECB397
0734BFB93DAB
0E0AD1796003
940B37939AC6
E092081D724B
D1417E431949
A38044A3E18E
B01000000000
BB467463ACD6
B9ED829C22AE
ABCC1276FCB0
EC8CB5758097
B133A4D48757
1DAE8D2CEA5C
A3647146C335
DAD9A48A8C33
44074C461042
AC47461358D7
0D6C26AB25CD
3351916B5A77
2142B57D369D
AEAE9E5CE65D
AD97523144B2
0AD8AD0739A6
B1419B62772C
416D21717779
AEA5A5A0E46B
3D5C8240B2D2
CB9D507CE56D
29173860FC76
A36031D6ECB2
D3DC10453857
1B095E78BB33
957E6EE3EB55
3AA5AC1CDC21
281499DD16A0
DE1B08C6D94B
9AA1E6CE588C
1C2855ED7A10
0C734F230E13
7E5744EC286C
5726AA3BE37B
8BABAD9A65C6
1504C1846399
1BD3119E0363
6C57CBD51995
E47069DA0C44
AB28A44AD5F5
3A4C47757B07
6847808E63EE
043D8B66D569
8211571B9D16
8B75A29D4AB2
EF1232AB18A0
AABAFFCC7612
B07000000000
48644467A214
B2D8485C2460
2E0F00700000
B8E87380D361
8EB64D710C88
D80A37B6D7ED
707B11FC1481
303041534956
7B583D350740
2E4340CC1C63
BB7923232725
5038884E4178
5A060A64C535
9D0D0A829F49
4757698143BD
2A41BE015C1D
F3A524B7A7B3
7B7E752B6A2D
316B8FAA12EF
5162797F8E1C
C52877867C05
ED14D0A14B0C
A506370E7C0F
8E0EC762E883
C49DAE1C6049
36E1765CE3E8
478947735B45
A22AE12C9013
42454C4C4147
1E1873799CD7
180DE12B700E
438099331C1E
438C3CD95B58
67AA98E362C9
18E566417E5C
D6C075899D06
D97E55B1816A
34EB673C863B
0B8B21C692C2
220D815D366A
2CCDA1358323
038B5F9B5A2A
53BD03DEA5C9
ADCBD453B232
5876E1D34183
686E736F6E20
AC7A0B47B03E
60E0C84ADDEE
B5B763215C82
852C2B72659D
04B787B2F3A5
28B8685B1B22
CE8BFF3728EE
BC1CD369549E
ACB906631D8A
4857DD68ECD9
302D5D37342B
51BEDBA005E5
6B30B6B0925D
AB9BCA200547
27743B5A5736
120D00FFFFFF
E902964DA28D
4201A36DE766
EAD0E31A6834
8627C10A7014
A14000000000
661ABF99AFAD
508BE54D326E
5BC64C42281C
D7A405AD9E4E
21C7650673CD
9B7603341727
B2F170172066
7D6E7AF43C97
B3FA87DB0C45
9AFEE1F65742
13B91C226E56
DAC7E0CBA8FD
F8526D1A8D6D
39A83A32909B
124578ABFEDC
D99C3222A190
7909427EC8B9
1E6A67909B8D
25DB996D56ED
0D5C5B8BCC5B
20628CA7D92D
CBBAD2DA0EC5
48C860AA4B74
89AA9D743812
219529A90EDD
577C528E786C
1E2DE60A477A
26D787613684
8502EE9A7E85
B6614EBEAAA2
117E5C165B10
6CEC27647CC0
1ACD5433BBDD
16B4442EAE97
34D71347877E
796630ED27B3
B18CDCDE52B7
151F3E85EC46
2058580A941F
3CE887B9D091
7B8FB4A7100B
BE5D8EBA120D
9976E6ADE0C9
8931DC3733D4
B89BD135E935
A4B30D146A01
D1CEEC977644
453857395635
0BE811559D69
41DDC3A48EEA
07176713C0ED
D40E935117A2
A34DA4FAC6C8
E93A2E63189D
3A818D01E093
C151D998C669
123A082E2AEA
DE6E04AE4475
AE52116C234C
00BB79731B00
D6C3503456C4
5570D22DC66B
D6E23B4E75C6
B8937130B6BA
D31463A7AB6D
32F093536677
14A22C112090
7175E14A4D62
D075379A21A6
4BB29463DC29
8A2423E9D100
93B260DBC70A
764B38E2903D
A541538F1416
74A778236D5A
F53E9F4114A9
A8844B0BCA06
32C1BB023F87
456666456666
9EE95586D024
45E599AE38EA
066C127C208D
668082242328
61B701698050
89ECA97F8C2A
529CE44BEBCC
A745AD7D6789
3BB4B3025B79
81B519418C3E
95E1C233EDE2
7c7d672bc62e
A07000000000
8BA1226EBA21
9A720CBD7BB1
A705087E89A8
9A8389F32FBF
303B30A460E8
C38197C36420
5C43A75C65A0
4EC2B23135AB
576DCFFF2F25
FFE04BE3D995
0ED7846C2BC9
8B42B6D64B02
BD401D63C3E9
49681C20A00D
A9258D6B06B5
0F385FFB6529
E77952748484
BB850C7E4934
E85B73382E1F
A5A4A3A2A1A0
A7072D4324C7
E4ACA0ADBA0D
96759A0D5566
8022E705B640
0C270BC0BDDC
7164042BA89E
5A36898CA7C5
CE09B3870EA2
B4166B0A27EA
974A36E2B1BA
FC80E88EB88C
532DE5E7E0E9
3A70C7A4BCE4
BD454BD52792
51ED5833AB6D
B210CFA436D2
8AC04C1A4A25
4E3552426B32
42EF7BF572AB
E9C11D763BEC
6D23D505D2B1
85DA8099CD7E
6900A069E3D7
56C944B04618
99207A00AA4A
4CE1972E090C
00E8C85DB172
52A843082BB3
0E62E6CAC3D3
000131B93F28
1D67A32045ED
57029D991123
DAEB5D63920B
9752A6B316D5
1494E81663D7
385D498B5390
7853D464E2A4
A3A580799BB4
C189A791A85B
2595E5B1DE76
47CD4AC26271
7B9D3A6BD061
37D4DCA92451
444156494442
20C166C00ADB
94CD6A4B6391
7A3CDAD7C023
23789D9ADD0D
99243E754CB8
5AAD6814E68B
57D83754711D
D94646A4C65B
4152414B4E41
2AFFD6F88B97
30D6324910AB
024E4E44001F
23A5BA53AD4D
C045544AD1E4
C3D275A9B8C7
95ABD3A7C631
823C7CC6E06A
E46A91829013
1532A2511A8B
098A92C3660A
B3C3C6E4395B
24501C422387
23D4CDFF8DA3
44449507B736
55430B5318E9
0DC9143735D1
CDB4EEE02E14
5C1D3898D537
70BB123776D6
420445087613
5BA03479BB8C
1C1250A36A13
A00027000099





# Keys from RfidResearchGroup proxmark3 project
# https://github.com/RfidResearchGroup/proxmark3/blob/master/client/dictionaries/mfc_default_keys.dic




# Iron Logic

# Tehran ezpay

# More keys from the PM3 repo
7C9FB8474242
1FEDA39D38EC
ABBF6D116EAF
AE7478CCAEE7
50D4C54FCDF5
7C7D672BC62E
0CF1A2AA1F8D
B2AFBF2331D4
324A82200018
0965E3193497
370AEE95CD69
18C628493F7F
AEE297CB2FD6
223E5847DD79
05862C58EDFB
7BC9EBB8274B
064D9423938A
995FD2A2351E
288B7A34DBF8
3DA5DFA54604
E43B7F185460
2E032AD6850D
914F57280CE3
640524D2A39B
B79E5B175227
217250FB7014
6A59AA9A959B

# Rotterdam University of applied sciences campus card

# Keys of Armenian underground ticket

# PIK Comfort Moscow keys (ISBC Mifare Plus SE 1K)

# Russian Podorozhnik card (Saint-Petersburg transport, may be combined with Troika)

# Key from French swimming pool badge

# Wojo coworking space, Fance
FF75AFDA5A3C
558AAD64EB5B
518108E061E2
FCDDF7767C10
A6B3F6C8F1D4
B1C4A8F7F6E3

# Key from some random card
001122334455

# Key from hotel in Spain
6CA761AB6CA7"
RE8x55u7,detect_and_clean_keys,Manu-J,Python,Thursday 23rd of May 2024 02:39:32 PM CDT,"import os
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

def read_keys(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    return lines

def find_duplicates(lines):
    key_count = {}
    duplicates = {}

    for i, line in enumerate(lines):
        line = line.strip()
        if line and not line.startswith('#'):
            if line in key_count:
                key_count[line].append(i)
                duplicates[line] = key_count[line]
            else:
                key_count[line] = [i]
    
    print(""Key Count:"", key_count)
    print(""Duplicates:"", duplicates)
    
    return duplicates

def remove_duplicates(lines, duplicates):
    indices_to_remove = {i for indices in duplicates.values() for i in indices[1:]}
    new_lines = [line for i, line in enumerate(lines) if i not in indices_to_remove]
    return new_lines

def main():
    file_path = input(""Enter the path to your .keys file: "").strip()
    
    # Read the keys from the file
    lines = read_keys(file_path)
    original_line_count = len(lines)
    original_size = os.path.getsize(file_path)
    
    # Find duplicates
    duplicates = find_duplicates(lines)

    # Print duplicates and their positions
    print(Fore.CYAN + Style.BRIGHT + ""Duplicates found:"")
    if duplicates:
        for key, indices in duplicates.items():
            print(Fore.RED + f""{key}: {len(indices)} times at lines {', '.join(map(str, [i + 1 for i in indices]))}"")

        # Ask user if they want to remove duplicates
        remove = input(Fore.YELLOW + Style.BRIGHT + ""\nDo you want to remove duplicates? (yes/no): "").strip().lower()
        if remove == 'yes':
            # Remove duplicates
            new_lines = remove_duplicates(lines, duplicates)
            new_line_count = len(new_lines)
            
            # Write the cleaned lines back to the file
            with open(file_path, 'w') as file:
                file.writelines(new_lines)
            
            new_size = os.path.getsize(file_path)
            
            # Print the results
            print(Fore.GREEN + Style.BRIGHT + f""\nOriginal number of lines: {original_line_count}"")
            print(Fore.GREEN + Style.BRIGHT + f""New number of lines: {new_line_count}"")
            print(Fore.GREEN + Style.BRIGHT + f""\nOriginal file size: {original_size} bytes"")
            print(Fore.GREEN + Style.BRIGHT + f""New file size: {new_size} bytes"")
        else:
            print(Fore.YELLOW + ""No changes made."")
    else:
        print(Fore.GREEN + ""No duplicates found."")

if __name__ == ""__main__"":
    main()
"
wSi0E65d,middleware,NaroxEG,JavaScript,Thursday 23rd of May 2024 02:34:57 PM CDT,"const jwt = require('jsonwebtoken');
require('dotenv').config()
const SECRET = process.env.SECRET;

function verifyToken(req, res, next) {
    const token = req.cookies.jwt;
    if (!token) return res.redirect(""/api/v1/user/login"");
    try {
        const decoded = jwt.verify(token, SECRET);
        req.userId = decoded.userId;
        next();
    } catch (error) {
        return res.redirect(""/api/v1/user/login"");
    }
};

function verifyAdminToken(req, res, next) {
    const token = req.cookies.jwt;
    if (!token) return res.redirect(""/api/v1/user/login"");
    try {
        const decoded = jwt.verify(token, SECRET);
        req.userId = decoded.userId;
        if (decoded.isAdmin) {
            next();
        } else {
            return res.status(403).json({ message: 'Unauthorized: Access restricted to admins' });
        }
    } catch (error) {
        return res.redirect(""/api/v1/user/login"");
    }
};


module.exports = { verifyToken, verifyAdminToken };"
VPDrcrBw,day_occurrence_calculator,Python253,Python,Thursday 23rd of May 2024 02:04:36 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: day_occurrence_calculator.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
Description:
    - This script calculates the occurrences of a specified day falling on each day of the week within a given time period.

Requirements:
    - Python 3.x

Functions:
    - main():
        - Prompts the user to enter start and end years, start and end months, and a day of the month.
        - Calculates the occurrences of the specified day falling on each day of the week within the specified period.
        - Prints the results in a formatted table.

    - get_day_of_week(year, month, day):
        - Returns the index of the day of the week for a given date.
        - 0 for Monday, 1 for Tuesday, ..., 6 for Sunday.
        - Uses Zeller's Congruence algorithm:
            
            h = (q + ⌊5 * 13 * (m + 1) / 5⌋ + K + ⌊K / 4⌋ + ⌊J / 4⌋ - 2 * J) mod 7

Usage:
    - Run the script and follow the prompts to enter start and end years, start and end months, and a day of the month.
    - The script will then calculate and display the occurrences of the specified day falling on each day of the week.

Additional Notes:
    - Ensure the input values are within valid ranges:
    - Years should be positive integers, months should be between 1 and 12,
    - Days of the month should be between 1 and 31.
""""""

def main():
    """"""
    Prompts the user to enter start and end years, start and end months, and a day of the month.
    Calculates the occurrences of the specified day falling on each day of the week within the specified period.
    Prints the results in a formatted table.
    """"""
    start_year = int(input(""Enter the start year: ""))
    start_month = int(input(""Enter the start month (1-12): ""))
    end_year = int(input(""Enter the end year: ""))
    end_month = int(input(""Enter the end month (1-12): ""))
    day_of_month = int(input(""Enter the day of the month you want to count occurrences for (1-31): ""))
    
    if (start_year < 0 or end_year < start_year or
            start_month < 1 or start_month > 12 or
            end_month < 1 or end_month > 12 or
            day_of_month < 1 or day_of_month > 31):
        print(""Invalid input. Please enter valid years, valid months, and a valid day of the month."")
        return

    day_names = [""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday"", ""Sunday""]
    counts = [0] * 7

    for year in range(start_year, end_year + 1):
        start = start_month if year == start_year else 1
        end = end_month + 1 if year == end_year else 13
        for month in range(start, end):
            # Check if the specified day of the month falls on the same day of the week
            day_of_week = get_day_of_week(year, month, day_of_month)
            counts[day_of_week] += 1
    
    print()
    print(""-"" * 88)
    print(""{:^88}"".format(""Occurrences of the specified day ({}) falling on each day of the week (Monday to Sunday)"".format(day_of_month)))
    print(""-"" * 88)
    print(""{:^44}{:^44}"".format(""Day"", ""Count""))
    print(""-"" * 88)
    for i in range(7):
        print(""{:^44}{:^44}"".format(day_names[i], counts[i]))
    print(""-"" * 88)
    print()

    return 0

def get_day_of_week(year, month, day):
    """"""
    Returns the index of the day of the week for a given date.
    0 for Monday, 1 for Tuesday, ..., 6 for Sunday.
    Uses Zeller's Congruence algorithm.
    """"""
    if month < 3:
        month += 12
        year -= 1
    K = year % 100
    J = year // 100
    h = (day + ((13 * (month + 1)) // 5) + K + (K // 4) + (J // 4) - (2 * J)) % 7
    return (h + 5) % 7

if __name__ == ""__main__"":
    main()

"
