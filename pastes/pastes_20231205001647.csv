id,title,username,language,date,content
9AFAGjkM,2023-12-04_stats.json,rdp_snitch,JSON,Monday 4th of December 2023 06:16:06 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 32,
    ""180.93.172.92"": 2,
    ""66.42.56.192"": 2,
    ""87.251.75.145"": 6,
    ""205.210.31.49"": 6,
    ""212.70.149.146"": 8,
    ""103.167.199.68"": 2,
    ""141.98.11.128"": 4,
    ""58.218.204.183"": 6,
    ""104.45.207.186"": 4,
    ""185.161.248.148"": 2,
    ""83.97.73.77"": 6,
    ""185.170.144.3"": 4,
    ""198.235.24.245"": 6,
    ""45.227.254.22"": 6,
    ""211.180.132.154"": 2,
    ""103.214.8.137"": 2,
    ""179.60.147.5"": 2,
    ""152.32.183.13"": 2,
    ""205.210.31.88"": 6,
    ""45.140.17.16"": 8,
    ""185.190.24.101"": 2,
    ""51.75.160.42"": 4,
    ""185.36.81.28"": 2,
    ""185.222.243.154"": 2,
    ""62.204.61.207"": 2,
    ""62.204.41.132"": 4,
    ""45.227.254.9"": 6,
    ""198.235.24.220"": 6
  },
  ""asn"": {
    ""AS48721"": 32,
    ""AS135944"": 2,
    ""AS20473"": 2,
    ""AS208091"": 6,
    ""AS396982"": 24,
    ""AS204428"": 8,
    ""AS140833"": 2,
    ""AS209605"": 6,
    ""AS4134"": 6,
    ""AS8075"": 4,
    ""AS49202"": 2,
    ""AS208312"": 6,
    ""AS197414"": 4,
    ""AS267784"": 12,
    ""AS3786"": 2,
    ""AS140810"": 2,
    ""AS209588"": 2,
    ""AS135377"": 2,
    ""AS198953"": 8,
    ""AS211632"": 2,
    ""AS16276"": 4,
    ""AS136787"": 2,
    ""AS34412"": 2,
    ""AS59425"": 4
  },
  ""isp"": {
    ""Flyservers S.A."": 46,
    ""SPT"": 2,
    ""Choopa"": 2,
    ""Xhost Internet Solutions LP"": 10,
    ""Google LLC"": 24,
    ""SS-Net"": 8,
    ""Interdata Joint Stock Company"": 2,
    ""UAB Host Baltic"": 4,
    ""Chinanet"": 6,
    ""Microsoft Corporation"": 4,
    ""Kisara LLC"": 2,
    ""Red Byte LLC"": 6,
    ""LG DACOM Corporation"": 2,
    ""MEGACORE"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Proton66 OOO"": 8,
    ""Internet Solutions & Innovations LTD."": 2,
    ""OVH SAS"": 4,
    ""SERVEROFFER LT"": 2,
    ""Tefincom S.A."": 2,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 2,
    ""Horizon LLC"": 4
  },
  ""org"": {
    ""Flyservers S.A"": 32,
    ""Saigon Postel Corporation"": 2,
    ""Unknown"": 8,
    ""Xhost Internet Solutions"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""4Media Ltd"": 8,
    ""INTERCLOUD"": 2,
    ""Chinanet JS"": 6,
    ""Microsoft Azure Cloud (eastus)"": 4,
    ""Kisara LLC"": 2,
    ""Red Byte LLC"": 6,
    ""Xhostis"": 4,
    ""UAB Host Baltic"": 12,
    ""Boranet"": 2,
    ""Megacore Technology Company Limited"": 2,
    ""Cloud Solutions S.A"": 2,
    ""Ucloud Information Technology"": 2,
    ""Proton66 LLC"": 8,
    ""Tribeka Web Advisors S.A"": 2,
    ""OVH Ltd"": 4,
    ""Packethub S.A"": 2,
    ""Saba Abr Mizban LLC"": 2,
    ""Horizon LLC"": 4
  },
  ""regionName"": {
    ""Kaunas"": 38,
    ""Hanoi"": 4,
    ""South West"": 2,
    ""North Holland"": 10,
    ""California"": 24,
    ""Plovdiv"": 8,
    ""Ho Chi Minh"": 2,
    ""Jiangsu"": 6,
    ""Virginia"": 6,
    ""Moscow"": 20,
    ""Vilnius"": 12,
    ""Seoul"": 2,
    ""Distrito Federal"": 2,
    ""Mariehamns stad"": 2,
    ""England"": 4,
    ""Texas"": 2,
    ""Tehran"": 2
  },
  ""country"": {
    ""Lithuania"": 50,
    ""Vietnam"": 6,
    ""Singapore"": 2,
    ""The Netherlands"": 10,
    ""United States"": 32,
    ""Bulgaria"": 8,
    ""China"": 6,
    ""Russia"": 20,
    ""South Korea"": 2,
    ""Venezuela"": 2,
    ""Aland Islands"": 2,
    ""United Kingdom"": 4,
    ""Iran"": 2
  },
  ""account"": {
    ""hello"": 48,
    ""Administr"": 30,
    ""PkKhDScsU"": 2,
    ""uFsSTq"": 2,
    ""MUkHgr"": 2,
    ""(empty)"": 8,
    ""Test"": 6,
    ""XaNqOgPUj"": 2,
    ""NnBqxO"": 2,
    ""resAJQ"": 2,
    ""Domain"": 28,
    ""Administrator"": 2,
    ""EQNzqhVmu"": 2,
    ""CuWeJV"": 2,
    ""LxQrwK"": 2,
    ""KbluliXTN"": 2,
    ""XspHdo"": 2,
    ""jzOEeE"": 2
  },
  ""keyboard"": {
    ""Unknown"": 146
  },
  ""client_build"": {
    ""Unknown"": 146
  },
  ""client_name"": {
    ""Unknown"": 146
  },
  ""ip_type"": {
    ""Unknown"": 94,
    ""hosting"": 36,
    ""proxy"": 16
  }
}"
9Vnee832,2023-12-04_stats.json,rdp_snitch,JSON,Monday 4th of December 2023 06:15:08 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 16,
    ""180.93.172.92"": 1,
    ""66.42.56.192"": 1,
    ""87.251.75.145"": 3,
    ""205.210.31.49"": 3,
    ""212.70.149.146"": 4,
    ""103.167.199.68"": 1,
    ""141.98.11.128"": 2,
    ""58.218.204.183"": 3,
    ""104.45.207.186"": 2,
    ""185.161.248.148"": 1,
    ""83.97.73.77"": 3,
    ""185.170.144.3"": 2,
    ""198.235.24.245"": 3,
    ""45.227.254.22"": 3,
    ""211.180.132.154"": 1,
    ""103.214.8.137"": 1,
    ""179.60.147.5"": 1,
    ""152.32.183.13"": 1,
    ""205.210.31.88"": 3,
    ""45.140.17.16"": 4,
    ""185.190.24.101"": 1,
    ""51.75.160.42"": 2,
    ""185.36.81.28"": 1,
    ""185.222.243.154"": 1,
    ""62.204.61.207"": 1,
    ""62.204.41.132"": 2,
    ""45.227.254.9"": 3,
    ""198.235.24.220"": 3
  },
  ""asn"": {
    ""AS48721"": 16,
    ""AS135944"": 1,
    ""AS20473"": 1,
    ""AS208091"": 3,
    ""AS396982"": 12,
    ""AS204428"": 4,
    ""AS140833"": 1,
    ""AS209605"": 3,
    ""AS4134"": 3,
    ""AS8075"": 2,
    ""AS49202"": 1,
    ""AS208312"": 3,
    ""AS197414"": 2,
    ""AS267784"": 6,
    ""AS3786"": 1,
    ""AS140810"": 1,
    ""AS209588"": 1,
    ""AS135377"": 1,
    ""AS198953"": 4,
    ""AS211632"": 1,
    ""AS16276"": 2,
    ""AS136787"": 1,
    ""AS34412"": 1,
    ""AS59425"": 2
  },
  ""isp"": {
    ""Flyservers S.A."": 23,
    ""SPT"": 1,
    ""Choopa"": 1,
    ""Xhost Internet Solutions LP"": 5,
    ""Google LLC"": 12,
    ""SS-Net"": 4,
    ""Interdata Joint Stock Company"": 1,
    ""UAB Host Baltic"": 2,
    ""Chinanet"": 3,
    ""Microsoft Corporation"": 2,
    ""Kisara LLC"": 1,
    ""Red Byte LLC"": 3,
    ""LG DACOM Corporation"": 1,
    ""MEGACORE"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Proton66 OOO"": 4,
    ""Internet Solutions & Innovations LTD."": 1,
    ""OVH SAS"": 2,
    ""SERVEROFFER LT"": 1,
    ""Tefincom S.A."": 1,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 1,
    ""Horizon LLC"": 2
  },
  ""org"": {
    ""Flyservers S.A"": 16,
    ""Saigon Postel Corporation"": 1,
    ""Unknown"": 4,
    ""Xhost Internet Solutions"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""4Media Ltd"": 4,
    ""INTERCLOUD"": 1,
    ""Chinanet JS"": 3,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Kisara LLC"": 1,
    ""Red Byte LLC"": 3,
    ""Xhostis"": 2,
    ""UAB Host Baltic"": 6,
    ""Boranet"": 1,
    ""Megacore Technology Company Limited"": 1,
    ""Cloud Solutions S.A"": 1,
    ""Ucloud Information Technology"": 1,
    ""Proton66 LLC"": 4,
    ""Tribeka Web Advisors S.A"": 1,
    ""OVH Ltd"": 2,
    ""Packethub S.A"": 1,
    ""Saba Abr Mizban LLC"": 1,
    ""Horizon LLC"": 2
  },
  ""regionName"": {
    ""Kaunas"": 19,
    ""Hanoi"": 2,
    ""South West"": 1,
    ""North Holland"": 5,
    ""California"": 12,
    ""Plovdiv"": 4,
    ""Ho Chi Minh"": 1,
    ""Jiangsu"": 3,
    ""Virginia"": 3,
    ""Moscow"": 10,
    ""Vilnius"": 6,
    ""Seoul"": 1,
    ""Distrito Federal"": 1,
    ""Mariehamns stad"": 1,
    ""England"": 2,
    ""Texas"": 1,
    ""Tehran"": 1
  },
  ""country"": {
    ""Lithuania"": 25,
    ""Vietnam"": 3,
    ""Singapore"": 1,
    ""The Netherlands"": 5,
    ""United States"": 16,
    ""Bulgaria"": 4,
    ""China"": 3,
    ""Russia"": 10,
    ""South Korea"": 1,
    ""Venezuela"": 1,
    ""Aland Islands"": 1,
    ""United Kingdom"": 2,
    ""Iran"": 1
  },
  ""account"": {
    ""hello"": 24,
    ""Administr"": 15,
    ""PkKhDScsU"": 1,
    ""uFsSTq"": 1,
    ""MUkHgr"": 1,
    ""(empty)"": 4,
    ""Test"": 3,
    ""XaNqOgPUj"": 1,
    ""NnBqxO"": 1,
    ""resAJQ"": 1,
    ""Domain"": 14,
    ""Administrator"": 1,
    ""EQNzqhVmu"": 1,
    ""CuWeJV"": 1,
    ""LxQrwK"": 1,
    ""KbluliXTN"": 1,
    ""XspHdo"": 1,
    ""jzOEeE"": 1
  },
  ""keyboard"": {
    ""Unknown"": 73
  },
  ""client_build"": {
    ""Unknown"": 73
  },
  ""client_name"": {
    ""Unknown"": 73
  },
  ""ip_type"": {
    ""Unknown"": 47,
    ""hosting"": 18,
    ""proxy"": 8
  }
}"
YQFmi9Gw,Casa,darcioantonio,C#,Monday 4th of December 2023 05:47:32 PM CDT,0EDSEK7T9O6P5--K23DN6386-8C99D1E7S-KAT1OCPA--K034N73C618690DEEES1K6T0O6P
TAzwh6GG,BTC Wallet Credentials have been reset,castlclass_20,GetText,Monday 4th of December 2023 05:29:13 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
taginestg:H9pz49 on 212.224.93.130
You can connect via SSH.
Regards"
54uKLn9p,Untitled,nakra,Lua,Monday 4th of December 2023 05:26:47 PM CDT,"function sentmaster()
  sentkillcheck()
  if failsafe == false then
    return
  end
  sentLimbPrep()
  --breakorderdet()
  sentlockvenom()
  sentlockenr()
  sentlockspear()
  sentlocklimb()
  sentlockvenom()
  if ready2trip() or failsafe2 == true then
    tripkillseq()
    failsafe2 = true
    return
  end
  sentSend()
end

function sentlockvenom()

    if
    (
      (affstrack.score.impatience >= 65 and affstrack.score.epilepsy >= 65) or
      (affstrack.score.impatience >= 65 and sentspear == ""doublestrike"")
    ) and
    affstrack.score.dizziness <= 50
  then
    sentvenom = ""larkspur""
  elseif affstrack.score.darkshade < 33 then
    sentvenom = ""darkshade""
  elseif
    (
      (affstrack.score.impatience >= 65 and affstrack.score.epilepsy >= 65) or
      (affstrack.score.impatience >= 65 and sentspear == ""doublestrike"")
    ) and
    affstrack.score.recklessness <= 50
  then
    sentvenom = ""eurypteria""
  elseif affstrack.score.paralysis ~= 100 then
    sentvenom = ""curare""
  end
end

function sentlockenr()
  if not parryblocked() or (parryblocked() and not badgeraffs()) then
    sentenrage = ""badger""
  elseif affstrack.score.sensitivity <= 50 then
    sentenrage = ""raven""
  elseif affstrack.kelpscore <= 3 and affstrack.score.healthleech <= 65 then
    sentenrage = ""fox""
  elseif affstrack.score.blind ~= 100 then
    sentenrage = ""butterfly""
  elseif
    (affstrack.score.impatience >= 65 or sentspear == ""doublestrike"") and
    affstrack.score.hallucinations <= 65
  then
    sentenrage = ""wolf""
  else
    sentenrage = ""badger""
  end
end

function sentlockspear()
  if not parryblocked() then
    sentspear = ""lacerate""
    sentwpn = ""trident""
  elseif affstrack.score.impatience <= 65 or affstrack.score.epilepsy <= 65 then
    sentspear = ""doublestrike""
    sentwpn = ""trident""
  elseif
    affstrack.score.impatience > 65 and affstrack.score.epilepsy > 65 and petrifycheck() >= 2
  then
    sentspear = ""throw handaxe at ""
    sentwpn = ""handaxe""
  elseif affstrack.kelpscore < 2 and affstrack.score.weariness <= 65 then
    sentspear = ""gouge""
    sentwpn = ""trident""
  else
    sentspear = ""throw handaxe at ""
    sentwpn = ""handaxe""
  end
end

function sentkillcheck()
  if petrifycheck() >= 5 then
    failsafe = false
    send(""config usequeueing on"")
    send(
      ""wield trident shield`morph basilisk`enrage butterfly "" ..
      target ..
      ""`petrify "" ..
      target ..
      ""`extirpate "" ..
      target
    )
  elseif
    petrifycheck() == 4 and affstrack.score.blind == 100 and affstrack.score.hallucinations <= 50
  then
    failsafe = false
    send(""config usequeueing on"")
    send(
      ""morph basilisk`wield trident shield`enrage wolf "" ..
      target ..
      ""`petrify "" ..
      target ..
      ""`extirpate "" ..
      target
    )
  elseif (grp == ""group"" and affstrack.score.prone == 100) then
    failsafe = false
    send(""config usequeueing on"")
    send(
      ""alias set sentkill2 stand/enrage raven "" ..
      target ..
      ""/wield trident shield/skullbash "" ..
      target ..
      ""/skullbash "" ..
      target ..
      ""/assess "" ..
      target
    )
    send(""cq all"")
    send(""queue add eqbal sentkill"")
  end
end

function sentlocklimb()
  if #sentLimbTarget > 0 then
    sentLimbPos = math.random(1, #sentLimbTarget)
    sentlimbhit = sentLimbTarget[sentLimbPos]
    if not parryblocked() and affstrack.score.prone == 0 then
      sentlimbhit = """"
    end
    if
      sentlimbcheck(tostring(string.gsub(tripleg, "" "", """"))) and
      not tripcheck(triplegshort) and
      sentlimbhit == tripleg
    then
      sentwpn = ""trident""
      sentspear = ""trip""
    end
    if ak.defs.shield or ak.defs.rebounding then
      sentenrage = ""lemming""
    elseif ak.defs.shield and ak.defs.rebounding then
      sentenrage = ""lemming""
      sentspear = ""rivestrike""
      sentwpn = ""trident""
    end
  end
end

function sentLimbPrep()
  limbtable = {}
  sentLimbPrepTable = sentLimbPrepTable or {}
  sentLimbPrepTable[target:lower()] = sentLimbPrepTable[target:lower()] or {}
  sentLimbTarget = {}
  if limbprepprio == ""sbash"" or nil then
    limbtable = {""head"", ""right leg"", ""left leg""}
    sentlegcount = 2
    sentarmcount = 0
    if not sentlimbcheck(""head"") then
      table.insert(sentLimbTarget, ""head"")
    end
    if not sentlimbcheck(""leftleg"") then
      table.insert(sentLimbTarget, ""left leg"")
      table.insert(sentLimbTarget, ""left leg"")
    end
    if not sentlimbcheck(""rightleg"") then
      table.insert(sentLimbTarget, ""right leg"")
      table.insert(sentLimbTarget, ""right leg"")
    end
    if sentlimbcheck(tostring(string.gsub(tripleg, "" "", """"))) and not tripcheck(triplegshort) then
      table.insert(sentLimbTarget, tripleg)
    end
  end
end

function sentSend()
  send(""config usequeueing off"")
  send(""cq all"")
  send(
    ""alias set sentcom stand/wield "" ..
    sentwpn ..
    "" shield/get body/order entourage kill "" ..
    target ..
    ""/enrage "" ..
    sentenrage ..
    "" "" ..
    target ..
    ""/"" ..
    sentspear ..
    "" "" ..
    target ..
    "" "" ..
    sentlimbhit ..
    "" "" ..
    sentvenom ..
    ""/assess "" ..
    target
  )
  send(""sentcom"")
end"
VbLKDn8r,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Monday 4th of December 2023 05:23:03 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-389066"
0xCE8HMs,Arduino TFT Display Shield,metalx1000,Arduino,Monday 4th of December 2023 04:40:16 PM CDT,"// IMPORTANT: Adafruit_TFTLCD LIBRARY MUST BE SPECIFICALLY
// CONFIGURED FOR EITHER THE TFT SHIELD OR THE BREAKOUT BOARD.
// SEE RELEVANT COMMENTS IN Adafruit_TFTLCD.h FOR SETUP.

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_TFTLCD.h> // Hardware-specific library

String speed = ""0"";
// The control pins for the LCD can be assigned to any digital or
// analog pins...but we'll use the analog pins as this allows us to
// double up the pins with the touch screen (see the TFT paint example).
#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0

#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

// When using the BREAKOUT BOARD only, use these 8 data lines to the LCD:
// For the Arduino Uno, Duemilanove, Diecimila, etc.:
//   D0 connects to digital pin 8  (Notice these are
//   D1 connects to digital pin 9   NOT in order!)
//   D2 connects to digital pin 2
//   D3 connects to digital pin 3
//   D4 connects to digital pin 4
//   D5 connects to digital pin 5
//   D6 connects to digital pin 6
//   D7 connects to digital pin 7
// For the Arduino Mega, use digital pins 22 through 29
// (on the 2-row header at the end of the board).

// Assign human-readable names to some common 16-bit color values:
#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xF800
#define	GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);
// If using the shield, all control and data lines are fixed, and
// a simpler declaration can optionally be used:
// Adafruit_TFTLCD tft;

void setup(void) {
  Serial.begin(9600);
  Serial.println(F(""TFT LCD test""));

#ifdef USE_ADAFRUIT_SHIELD_PINOUT
  Serial.println(F(""Using Adafruit 2.8\"" TFT Arduino Shield Pinout""));
#else
  Serial.println(F(""Using Adafruit 2.8\"" TFT Breakout Board Pinout""));
#endif

  Serial.print(""TFT size is ""); Serial.print(tft.width()); Serial.print(""x""); Serial.println(tft.height());

  tft.reset();

  uint16_t identifier = tft.readID();

  if(identifier == 0x9325) {
    Serial.println(F(""Found ILI9325 LCD driver""));
  } else if(identifier == 0x9328) {
    Serial.println(F(""Found ILI9328 LCD driver""));
  } else if(identifier == 0x7575) {
    Serial.println(F(""Found HX8347G LCD driver""));
  } else if(identifier == 0x9341) {
    Serial.println(F(""Found ILI9341 LCD driver""));
  } else if(identifier == 0x8357) {
    Serial.println(F(""Found HX8357D LCD driver""));
  } else {
    Serial.print(F(""Unknown LCD driver chip: ""));
    Serial.println(identifier, HEX);
    Serial.println(F(""If using the Adafruit 2.8\"" TFT Arduino shield, the line:""));
    Serial.println(F(""  #define USE_ADAFRUIT_SHIELD_PINOUT""));
    Serial.println(F(""should appear in the library header (Adafruit_TFT.h).""));
    Serial.println(F(""If using the breakout board, it should NOT be #defined!""));
    Serial.println(F(""Also if using the breakout, double-check that all wiring""));
    Serial.println(F(""matches the tutorial.""));
    return;
  }

  tft.begin(identifier);

  Serial.println(F(""Done!""));
  tft.setRotation(1);
  testText();
}

void loop(void) {
    // send data only when you receive data:
  if (Serial.available() > 0) {
    // read the incoming byte:
    speed = Serial.readString();

    // say what you got:
    Serial.print(""I received: "");
    Serial.println(speed);
    testText();
  }   

}

unsigned long testFillScreen() {
  unsigned long start = micros();
  tft.fillScreen(BLACK);
  tft.fillScreen(RED);
  tft.fillScreen(GREEN);
  tft.fillScreen(BLUE);
  tft.fillScreen(BLACK);
  return micros() - start;
}

unsigned long testText() {
  tft.fillScreen(BLACK);
  //unsigned long start = micros();
  tft.setCursor(0, 0);


  tft.setTextColor(RED);
  tft.setTextSize(20);
  tft.println(speed);
  tft.setTextSize(10);
  tft.println(""mph"");


  //return micros() - start;
}

unsigned long testLines(uint16_t color) {
  unsigned long start, t;
  int           x1, y1, x2, y2,
                w = tft.width(),
                h = tft.height();

  tft.fillScreen(BLACK);

  x1 = y1 = 0;
  y2    = h - 1;
  start = micros();
  for(x2=0; x2<w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);
  x2    = w - 1;
  for(y2=0; y2<h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);
  t     = micros() - start; // fillScreen doesn't count against timing

  tft.fillScreen(BLACK);

  x1    = w - 1;
  y1    = 0;
  y2    = h - 1;
  start = micros();
  for(x2=0; x2<w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);
  x2    = 0;
  for(y2=0; y2<h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);
  t    += micros() - start;

  tft.fillScreen(BLACK);

  x1    = 0;
  y1    = h - 1;
  y2    = 0;
  start = micros();
  for(x2=0; x2<w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);
  x2    = w - 1;
  for(y2=0; y2<h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);
  t    += micros() - start;

  tft.fillScreen(BLACK);

  x1    = w - 1;
  y1    = h - 1;
  y2    = 0;
  start = micros();
  for(x2=0; x2<w; x2+=6) tft.drawLine(x1, y1, x2, y2, color);
  x2    = 0;
  for(y2=0; y2<h; y2+=6) tft.drawLine(x1, y1, x2, y2, color);

  return micros() - start;
}

unsigned long testFastLines(uint16_t color1, uint16_t color2) {
  unsigned long start;
  int           x, y, w = tft.width(), h = tft.height();

  tft.fillScreen(BLACK);
  start = micros();
  for(y=0; y<h; y+=5) tft.drawFastHLine(0, y, w, color1);
  for(x=0; x<w; x+=5) tft.drawFastVLine(x, 0, h, color2);

  return micros() - start;
}

unsigned long testRects(uint16_t color) {
  unsigned long start;
  int           n, i, i2,
                cx = tft.width()  / 2,
                cy = tft.height() / 2;

  tft.fillScreen(BLACK);
  n     = min(tft.width(), tft.height());
  start = micros();
  for(i=2; i<n; i+=6) {
    i2 = i / 2;
    tft.drawRect(cx-i2, cy-i2, i, i, color);
  }

  return micros() - start;
}

unsigned long testFilledRects(uint16_t color1, uint16_t color2) {
  unsigned long start, t = 0;
  int           n, i, i2,
                cx = tft.width()  / 2 - 1,
                cy = tft.height() / 2 - 1;

  tft.fillScreen(BLACK);
  n = min(tft.width(), tft.height());
  for(i=n; i>0; i-=6) {
    i2    = i / 2;
    start = micros();
    tft.fillRect(cx-i2, cy-i2, i, i, color1);
    t    += micros() - start;
    // Outlines are not included in timing results
    tft.drawRect(cx-i2, cy-i2, i, i, color2);
  }

  return t;
}

unsigned long testFilledCircles(uint8_t radius, uint16_t color) {
  unsigned long start;
  int x, y, w = tft.width(), h = tft.height(), r2 = radius * 2;

  tft.fillScreen(BLACK);
  start = micros();
  for(x=radius; x<w; x+=r2) {
    for(y=radius; y<h; y+=r2) {
      tft.fillCircle(x, y, radius, color);
    }
  }

  return micros() - start;
}

unsigned long testCircles(uint8_t radius, uint16_t color) {
  unsigned long start;
  int           x, y, r2 = radius * 2,
                w = tft.width()  + radius,
                h = tft.height() + radius;

  // Screen is not cleared for this one -- this is
  // intentional and does not affect the reported time.
  start = micros();
  for(x=0; x<w; x+=r2) {
    for(y=0; y<h; y+=r2) {
      tft.drawCircle(x, y, radius, color);
    }
  }

  return micros() - start;
}

unsigned long testTriangles() {
  unsigned long start;
  int           n, i, cx = tft.width()  / 2 - 1,
                      cy = tft.height() / 2 - 1;

  tft.fillScreen(BLACK);
  n     = min(cx, cy);
  start = micros();
  for(i=0; i<n; i+=5) {
    tft.drawTriangle(
      cx    , cy - i, // peak
      cx - i, cy + i, // bottom left
      cx + i, cy + i, // bottom right
      tft.color565(0, 0, i));
  }

  return micros() - start;
}

unsigned long testFilledTriangles() {
  unsigned long start, t = 0;
  int           i, cx = tft.width()  / 2 - 1,
                   cy = tft.height() / 2 - 1;

  tft.fillScreen(BLACK);
  start = micros();
  for(i=min(cx,cy); i>10; i-=5) {
    start = micros();
    tft.fillTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
      tft.color565(0, i, i));
    t += micros() - start;
    tft.drawTriangle(cx, cy - i, cx - i, cy + i, cx + i, cy + i,
      tft.color565(i, i, 0));
  }

  return t;
}

unsigned long testRoundRects() {
  unsigned long start;
  int           w, i, i2,
                cx = tft.width()  / 2 - 1,
                cy = tft.height() / 2 - 1;

  tft.fillScreen(BLACK);
  w     = min(tft.width(), tft.height());
  start = micros();
  for(i=0; i<w; i+=6) {
    i2 = i / 2;
    tft.drawRoundRect(cx-i2, cy-i2, i, i, i/8, tft.color565(i, 0, 0));
  }

  return micros() - start;
}

unsigned long testFilledRoundRects() {
  unsigned long start;
  int           i, i2,
                cx = tft.width()  / 2 - 1,
                cy = tft.height() / 2 - 1;

  tft.fillScreen(BLACK);
  start = micros();
  for(i=min(tft.width(), tft.height()); i>20; i-=6) {
    i2 = i / 2;
    tft.fillRoundRect(cx-i2, cy-i2, i, i, i/8, tft.color565(0, i, 0));
  }

  return micros() - start;
}
"
hmtpiK6N,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 04:09:29 PM CDT,"{
    ""query_type"": ""search_suggestions"",
    ""query"": ""data"",
    ""suggestions"": {
        ""companies"": [""123ABC"", ""789XYZ""],
    },
}"
9F3L7iZZ,Untitled,emacuervo,C++,Monday 4th of December 2023 04:04:44 PM CDT,"#include <iostream>
#include <clocale>
#include <cstring>
using namespace std;

void cargarCadena(char *palabra, int tam){
    int i=0;
    fflush(stdin);
    for (i=0; i<tam; i++){
        palabra[i]=cin.get();
        if (palabra[i]=='\n'){
            break;
        }
    }
    palabra[i]='\0';
    fflush(stdin);
}

class Fecha{
private:
    int dia,mes, anio;
public:
    void Cargar(){
        cin>>dia;
        cin>>mes;
        cin>>anio;
    }
    void Mostrar(){
        cout<<dia<<""/"";
        cout<<mes<<""/"";
        cout<<anio<<endl;
    }
    int getDia(){return dia;}
    int getMes(){return mes;}
    int getAnio(){return anio;}

    void setDia(int d){dia=d;}
    void setMes(int m){mes=m;}
    void setAnio(int a){anio=a;}

};

class Partidos{
    private:
        int codPartido;
        int sede;
        int codLocal;
        int codVisitante;
        Fecha fechaRealizacion;
        char nombreArbitro[50];
        bool estado;

    public:
        Partidos(int codPart = 0){
            codPartido = codPart;
        }

        int getCodPartido(){return codPartido;}
        int getSede(){return sede;}
        int getCodLocal(){return codLocal;}
        int getCodVisitante(){return codVisitante;}
        Fecha getFechaRealizacion(){return fechaRealizacion;}
        const char* getNombreArbitro(){return nombreArbitro;}
        bool getEstado(){return estado;}

        void setCodPartido(int cp){codPartido = cp;}
        void setSede(int s){sede = s;}
        void setCodLocal(int cl){codLocal = cl;}
        void setCodVisitante(int cv){codVisitante = cv;}
        void setFechaRealizacion(Fecha f){fechaRealizacion = f;}
        void setNombreArbitro(const char* na){strcpy(nombreArbitro, na);}
        void setEstado(bool e){estado = e;}

        bool Cargar(){
            cout<< ""CODIGO PARTIDO: "";
            cin>> codPartido;
            cout<< ""SEDE: "";
            cin>> sede;
            cout<< ""CODIGO EQUIPO LOCAL: "";
            cin>> codLocal;
            cout<< ""CODIGO EQUIPO VISITANTE: "";
            cin>> codVisitante;
            cout<< ""FECHA DE REALIZACION: "";
            fechaRealizacion.Cargar();
            cout<< ""NOMBRE DEL ARBITRO: "";
            cin>> nombreArbitro;
            estado = true;

            return true;
        }

        void Mostrar(){
            cout<< codPartido << endl;
            cout<< sede << endl;
            cout<< codLocal << endl;
            cout<< codVisitante << endl;
            fechaRealizacion.Mostrar();
            cout<< nombreArbitro << endl;
            cout<< estado << endl;
        }
};


class ArchivoPartido{
    private:
        char nombre[30];
    public:
        ArchivoPartido(const char *n){
            strcpy(nombre, n);
        }
        bool grabarRegistro(Partidos reg){
            FILE * archivo = fopen(nombre, ""ab"");
            if (archivo == NULL){
                return false;
            }
            Partidos registro;
            bool exito = registro.Cargar();
            if (exito){
                fwrite(&registro, sizeof registro, 1, archivo);
                cout << ""REGISTRO ESCRITO CON EXITO""<<endl;
            }
            fclose(archivo);
            return true;
        }
        bool mostrarRegistros(){
            FILE * archivo = fopen(nombre, ""rb"");
            if (archivo == NULL)
            {
                cout << ""ERROR ABRIENDO EL ARCHIVO en MOSTRAR\n"";
                return false;
            }
            Partidos leer;
            while(fread(&leer, sizeof leer, 1, archivo)==1)
            {
                if (leer.getEstado()) leer.Mostrar();
            }
            fclose(archivo);
            return true;
        }

        int buscarCodigo (int codigo) {
            FILE * archivo = fopen(nombre, ""rb"");
            if (archivo == NULL) {
                cout << ""ERROR ABRIENDO EL ARCHIVO BUSCAR JUGADOR \n"";
                return -1;
            }
            Partidos leer;
            int pos = 0;
            while (fread(&leer, sizeof leer, 1, archivo)) {
                if (leer.getCodPartido() == codigo && leer.getEstado()) {
                    leer.Mostrar();
                    fclose(archivo);
                    return pos;
                }
                pos++;
            }
            cout << ""NO SE ENCONTRO EL EQUIPO CON EL CODIGO INGRESADO \n"";
            fclose(archivo);
            return -2;
        }
        bool bajaLogica() {
            int codigo;
            cout << ""INGRESAR CODIGO DEL EQUIPO: "";
            cin >> codigo;
            int pos = buscarCodigo(codigo);
            if (pos > -1) {
                FILE * archivo = fopen(nombre, ""r+b"");
                if (archivo == NULL) {
                    cout << ""ERROR ABRIENDO EL ARCHIVO \n"";
                    return false;
                }
                Partidos leer;
                fseek(archivo, sizeof leer * pos, SEEK_SET);
                fread(&leer, sizeof leer, 1, archivo);

                leer.setEstado(false);
                fseek(archivo, sizeof leer * pos, SEEK_SET);
                if (fwrite(&leer, sizeof leer, 1, archivo)) {
                    fclose(archivo);
                    cout << ""REGISTRO ELIMINADO CON EXITO \n"";
                    return true;
                }
                fclose(archivo);
                cout << ""ERROR DE ARCHIVO, INTENTA DE NUEVO\n"";
                return false;
            }
            return false;
        }

        Partidos leerRegistro(int pos){
            Partidos reg;
            reg.setCodLocal(-1);
            FILE *p;
            p=fopen(nombre, ""rb"");
            if(p==NULL) return reg;
            fseek(p, sizeof(Partidos)*pos,0);
            fread(&reg, sizeof reg,1, p);
            fclose(p);
            return reg;
        }
        int contarRegistros(){
            FILE *p;
            p=fopen(nombre, ""rb"");
            if(p==NULL) return -1;
            fseek(p, 0,2);
            int tam=ftell(p);
            fclose(p);
            return tam/sizeof(Partidos);
        }
};

void punto3(){
    ArchivoPartido archPart(""Partidos.dat"");
    int cantPart = archPart.contarRegistros();
    Partidos regPart;

    Fecha fechaNueva;
    cout<< ""INGRESAR FECHA: "";
    fechaNueva.Cargar();

    if (cantPart <= 0){
        cout<< ""No hay registros"" << endl;
        return;
    }

    int cont=0;

    for (int x=0; x<cantPart; x++){
        regPart = archPart.leerRegistro(x);
        if  (fechaNueva.getAnio() < regPart.getFechaRealizacion().getAnio() && regPart.getEstado()){
            cont++;
        }
    }

    Partidos *v;

    v=new Partidos[cont];
    if(v==NULL) return;

    int pos=0;

    for (int x=0; x<cantPart; x++){
        regPart = archPart.leerRegistro(x);
        if (regPart.getEstado()){
            v[pos] = regPart;
            pos++;
        }
    }

    for (int x=0; x<cont; x++){
        v[x].Mostrar();
    }

    delete[] v;
}



int main (void){
	int opc;

    ArchivoPartido archPartidos(""Partidos.dat"");

    while(true){
        system(""cls"");
        cout<<""MENU ALUMNOS ""<<endl;
        cout<<""********************** ""<<endl;
        cout<<""1. AGREGAR REGISTRO ""<<endl;
        cout<<""2. BAJA LOGICA ""<< endl;
        cout<<""3. MOSTRAR REGISTROS ""<<endl;
        cout<<""0. SALIR DEL PROGRAMA ""<<endl;
        cout<<""********************** ""<<endl;
        cout<<""OPCION ""<<endl;
        cin>>opc;
        system(""cls"");
        switch(opc){
            case 1:
                archPartidos.grabarRegistro(opc);
                break;

            case 2:
                archPartidos.bajaLogica();
                break;
            case 3:
                punto3();
                break;
            case 0:
                return 0;
                break;

        }
        system(""pause"");
        system(""cls"");
    }


  return 0;
}"
gxRRhkpZ,WooCommerce:  Añadir descripción corta del producto al resumen del pedido en correos electrónicos,YordanSoares,PHP,Monday 4th of December 2023 04:04:28 PM CDT,"<?php
/**
 * WooCommerce:
 * Añadir descripción corta del producto al resumen del pedido en correos electrónicos de WooCommerce
 */
add_action( 'woocommerce_order_item_meta_start', 'anadir_descripcion_corta_en_emails', 10, 4 );
function anadir_descripcion_corta_en_emails( $item_id, $item, $order, $plain_text ) {

    // Comprobamos si estamos en un correo electrónico de WooCommerce y obtenemos el objeto del producto
    if ( did_action('woocommerce_email_header') && ( $product = wc_get_product( $item->get_product_id() ) ) ) {

        // Obtenemos la descripción corta del producto
        $descripcion_corta = $product->get_short_description();

        // Añadimos la descripción corta después de producto
        printf( '<p>%s</p>', $descripcion_corta );
    }
}"
RJEjcJJw,WooCommerce:  Copiar teléfono de la dirección de facturación en el de la dirección de envío,YordanSoares,PHP,Monday 4th of December 2023 04:03:34 PM CDT,"<?php
/**
 * WooCommerce:
 * Copiar el teléfono de la dirección de facturación
 * si el de la dirección de envío está vacío 
 */
add_action( 'woocommerce_checkout_order_created', function( $order ) {
    // Si el teléfono en la dirección de envío está vacío...
    if ( $billing_phone = $order->get_billing_phone() ) {
        // ...copiar el de la dirección de facturación
        $order->set_shipping_phone( $billing_phone );
        $order->save();
    }
}, 10, 2 );"
QANcF3AH,working q20,aadi_pastebin,C#,Monday 4th of December 2023 03:59:39 PM CDT,"/*
IN C#
fraudseter guessing 6 digit password
in some order the password features the digits 123 twice each
""additionally, he knows that no consecutive pair of digits are the same""
what to 3sf is his chance of a successful random guess
*/



using System;
using System.Collections.Generic;
using System.Linq;

internal class Program
{
    private static void Main(string[] args)
    {
        // Create a list to store generated numbers
        List<int> master_list = new List<int>();
        Console.WriteLine(""Working"");

        // Generate 620 unique 6-digit numbers and add them to the master list
        for (int i = 0; i < 620; i++)
        {
            // Generate a new 6-digit number
            int new_number = CreateNewNumber();

            // Ensure the new number is not a duplicate
            if (!master_list.Contains(new_number))
            {
                master_list.Add(new_number);
            }
        }

        // Display information about the master list
        Console.WriteLine($""Created the master list\n{master_list.Count} items in it"");
        Console.WriteLine($""{string.Join("", "", master_list)}"");

        // Filter the master list based on conditions and create a final list
        List<int> final_list = MakeFinalList(master_list);

        // Display information about the final list
        Console.WriteLine($""Created the final list\n{final_list.Count} items in it"");
        Console.WriteLine($""{string.Join("", "", final_list)}"");
    }

    // Function to generate a random 6-digit number with digits 1, 2, and 3 appearing twice each
    static int CreateNewNumber()
    {
        // String to store the generated number
        string big_number = """";

        // List of available digits (1, 1, 2, 2, 3, 3)
        List<int> digits_possible = new List<int> {1, 1, 2, 2, 3, 3};

        // Loop until all digits are used
        while (digits_possible.Count() != 0)
        {
            // Create a random number generator
            Random random = new Random();

            // Randomly select a digit
            int random_index = random.Next(0, digits_possible.Count);
            int random_digit = digits_possible[random_index];

            // Remove the selected digit from the list
            digits_possible.RemoveAt(random_index);

            // Append the digit to the number
            big_number += random_digit;
        }

        // Convert the string to an integer and return the generated number
        return int.Parse(big_number);
    }

    // Function to filter a list based on conditions
    static List<int> MakeFinalList(List<int> old_list)
    {
        // List to store the final filtered numbers
        List<int> new_list = new List<int>();

        // Iterate over each number in the old list
        foreach (int number in old_list)
        {
            // Convert the number to a string for digit-level analysis
            string number_as_string = number.ToString();

            // Ensure that the digits 1, 2, and 3 appear exactly twice each
            if (number_as_string.Count(c => c == '1') == 2 &&
                number_as_string.Count(c => c == '2') == 2 &&
                number_as_string.Count(c => c == '3') == 2)
            {
                // Check for no consecutive pair of digits being the same
                bool add_to_new_list = true;
                for (int i = 0; i < 5; i++)
                {
                    if (number_as_string[i] == number_as_string[i + 1])
                    {
                        // If consecutive digits are the same, set flag to false and break the loop
                        add_to_new_list = false;
                        break;
                    }
                }

                // If all conditions are met, add the number to the new list
                if (add_to_new_list)
                {
                    new_list.Add(number);
                }
            }
        }

        // Return the final filtered list
        return new_list;
    }
}
"
NsgMkEFC,Untitled,emacuervo,C++,Monday 4th of December 2023 03:59:37 PM CDT,"#include <iostream>
#include <clocale>
#include <cstring>
using namespace std;

void cargarCadena(char *palabra, int tam){
    int i=0;
    fflush(stdin);
    for (i=0; i<tam; i++){
        palabra[i]=cin.get();
        if (palabra[i]=='\n'){
            break;
        }
    }
    palabra[i]='\0';
    fflush(stdin);
}

class Fecha{
private:
    int dia,mes, anio;
public:
    void Cargar(){
        cin>>dia;
        cin>>mes;
        cin>>anio;
    }
    void Mostrar(){
        cout<<dia<<""/"";
        cout<<mes<<""/"";
        cout<<anio<<endl;
    }
    int getDia(){return dia;}
    int getMes(){return mes;}
    int getAnio(){return anio;}

    void setDia(int d){dia=d;}
    void setMes(int m){mes=m;}
    void setAnio(int a){anio=a;}

};

class Partidos{
    private:
        int codPartido;
        int sede;
        int codLocal;
        int codVisitante;
        Fecha fechaRealizacion;
        char nombreArbitro[50];
        bool estado;

    public:
        Partidos(int codPart = 0){
            codPartido = codPart;
        }

        int getCodPartido(){return codPartido;}
        int getSede(){return sede;}
        int getCodLocal(){return codLocal;}
        int getCodVisitante(){return codVisitante;}
        Fecha getFechaRealizacion(){return fechaRealizacion;}
        const char* getNombreArbitro(){return nombreArbitro;}
        bool getEstado(){return estado;}

        void setCodPartido(int cp){codPartido = cp;}
        void setSede(int s){sede = s;}
        void setCodLocal(int cl){codLocal = cl;}
        void setCodVisitante(int cv){codVisitante = cv;}
        void setFechaRealizacion(Fecha f){fechaRealizacion = f;}
        void setNombreArbitro(const char* na){strcpy(nombreArbitro, na);}
        void setEstado(bool e){estado = e;}

        bool Cargar(){
            cout<< ""CODIGO PARTIDO: "";
            cin>> codPartido;
            cout<< ""SEDE: "";
            cin>> sede;
            cout<< ""CODIGO EQUIPO LOCAL: "";
            cin>> codLocal;
            cout<< ""CODIGO EQUIPO VISITANTE: "";
            cin>> codVisitante;
            cout<< ""FECHA DE REALIZACION: "";
            fechaRealizacion.Cargar();
            cout<< ""NOMBRE DEL ARBITRO: "";
            cin>> nombreArbitro;
            estado = true;

            return true;
        }

        void Mostrar(){
            cout<< codPartido << endl;
            cout<< sede << endl;
            cout<< codLocal << endl;
            cout<< codVisitante << endl;
            fechaRealizacion.Mostrar();
            cout<< nombreArbitro << endl;
            cout<< estado << endl;
        }
};


class ArchivoPartido{
    private:
        char nombre[30];
    public:
        ArchivoPartido(const char *n){
            strcpy(nombre, n);
        }
        bool grabarRegistro(Partidos reg){
            FILE * archivo = fopen(nombre, ""ab"");
            if (archivo == NULL){
                return false;
            }
            Partidos registro;
            bool exito = registro.Cargar();
            if (exito){
                fwrite(&registro, sizeof registro, 1, archivo);
                cout << ""REGISTRO ESCRITO CON EXITO""<<endl;
            }
            fclose(archivo);
            return true;
        }
        bool mostrarRegistros(){
            FILE * archivo = fopen(nombre, ""rb"");
            if (archivo == NULL)
            {
                cout << ""ERROR ABRIENDO EL ARCHIVO en MOSTRAR\n"";
                return false;
            }
            Partidos leer;
            while(fread(&leer, sizeof leer, 1, archivo)==1)
            {
                if (leer.getEstado()) leer.Mostrar();
            }
            fclose(archivo);
            return true;
        }

        int buscarCodigo (int codigo) {
            FILE * archivo = fopen(nombre, ""rb"");
            if (archivo == NULL) {
                cout << ""ERROR ABRIENDO EL ARCHIVO BUSCAR JUGADOR \n"";
                return -1;
            }
            Partidos leer;
            int pos = 0;
            while (fread(&leer, sizeof leer, 1, archivo)) {
                if (leer.getCodPartido() == codigo && leer.getEstado()) {
                    leer.Mostrar();
                    fclose(archivo);
                    return pos;
                }
                pos++;
            }
            cout << ""NO SE ENCONTRO EL EQUIPO CON EL CODIGO INGRESADO \n"";
            fclose(archivo);
            return -2;
        }
        bool bajaLogica() {
            int codigo;
            cout << ""INGRESAR CODIGO DEL EQUIPO: "";
            cin >> codigo;
            int pos = buscarCodigo(codigo);
            if (pos > -1) {
                FILE * archivo = fopen(nombre, ""r+b"");
                if (archivo == NULL) {
                    cout << ""ERROR ABRIENDO EL ARCHIVO \n"";
                    return false;
                }
                Partidos leer;
                fseek(archivo, sizeof leer * pos, SEEK_SET);
                fread(&leer, sizeof leer, 1, archivo);

                leer.setEstado(false);
                fseek(archivo, sizeof leer * pos, SEEK_SET);
                if (fwrite(&leer, sizeof leer, 1, archivo)) {
                    fclose(archivo);
                    cout << ""REGISTRO ELIMINADO CON EXITO \n"";
                    return true;
                }
                fclose(archivo);
                cout << ""ERROR DE ARCHIVO, INTENTA DE NUEVO\n"";
                return false;
            }
            return false;
        }

        Partidos leerRegistro(int pos){
            Partidos reg;
            reg.setCodLocal(-1);
            FILE *p;
            p=fopen(nombre, ""rb"");
            if(p==NULL) return reg;
            fseek(p, sizeof(Partidos)*pos,0);
            fread(&reg, sizeof reg,1, p);
            fclose(p);
            return reg;
        }
        int contarRegistros(){
            FILE *p;
            p=fopen(nombre, ""rb"");
            if(p==NULL) return -1;
            fseek(p, 0,2);
            int tam=ftell(p);
            fclose(p);
            return tam/sizeof(Partidos);
        }
};

void punto3(){
    ArchivoPartido archPart(""Partidos.dat"");
    int cantPart = archPart.contarRegistros();
    Partidos regPart;
    
    Fecha fechaNueva;
    cout<< ""INGRESAR FECHA: "";
    fechaNueva.Cargar();

    if (cantPart <= 0){
        cout<< ""No hay registros"" << endl;
        return;
    }
    
    int cont=0;

    for (int x=0; x<cantPart; x++){
        regPart = archPart.leerRegistro(x);
        if  (fechaNueva < regPart.getFechaRealizacion().getAnio() && regPart.getEstado()){
            cont++
        }
    }
    
    Partidos *v;
    
    v=new Partidos[cont];
    if(v==NULL) return;
    
    int pos=0;
    
    for (int x=0; x<cantPart; x++){
        regPart = archPart.leerRegistro(x);
        if (regPart.getEstado()){
            v[pos] = regPart;
            pos++;
        }
    }

    for (int x=0; x<cont; x++){
        v[x].Mostrar();
    }

    delete[] v;
}



int main (void){
	int opc;

    ArchivoPartido archPartidos(""Partidos.dat"");

    while(true){
        system(""cls"");
        cout<<""MENU ALUMNOS ""<<endl;
        cout<<""********************** ""<<endl;
        cout<<""1. AGREGAR REGISTRO ""<<endl;
        cout<<""2. BAJA LOGICA ""<< endl;
        cout<<""3. MOSTRAR REGISTROS ""<<endl;
        cout<<""0. SALIR DEL PROGRAMA ""<<endl;
        cout<<""********************** ""<<endl;
        cout<<""OPCION ""<<endl;
        cin>>opc;
        system(""cls"");
        switch(opc){
            case 1:
                archPartidos.grabarRegistro(opc);
                break;

            case 2:
                archPartidos.bajaLogica();
                break;
            case 3:
                punto3();
                break;
            case 0:
                return 0;
                break;

        }
        system(""pause"");
        system(""cls"");
    }


  return 0;
}
"
0dunVe3x,Steep Steps fly/fling script,EXO_DEV,Lua,Monday 4th of December 2023 03:57:50 PM CDT,"--[[
 
 
        made by _Exec4tble_#2226
        execute loadstring below to stay updated:
loadstring(game:HttpGet('https://pastebin.com/raw/0dunVe3x'))()
 
 
        -------------------------
        hold Q/E to move DOWN/UP
        press X to toggle the script
        press F to toggle fling mode
        -------------------------
 
 
 
 
 
 
 
 
 
 
 
]]--
local pl = game.Players.LocalPlayer
local uis = game:GetService(""UserInputService"")
local placed = game.Workspace:FindFirstChild(""playerPlaced"")
local lad = nil
local ch = pl.Character
local hrp = ch.HumanoidRootPart
if _G.began and typeof(_G.began) == ""RBXScriptConnection"" then _G.began:Disconnect() end; task.wait()
if _G.ended and typeof(_G.ended) == ""RBXScriptConnection"" then _G.ended:Disconnect() end; task.wait()
state = true
flingState = false
moveVal = 0
loopVal = 0
_G.began = nil
_G.ended = nil
if placed:FindFirstChild(pl.Name .. ""_ladder"") then
	lad = placed:FindFirstChild(pl.Name .. ""_ladder"")
end

_G.began = uis.InputBegan:Connect(function(key, typ)
	if typ then return end

	if key.KeyCode == Enum.KeyCode.X then
        state = not state
        if placed:FindFirstChild(pl.Name .. ""_ladder"") then
            lad = placed:FindFirstChild(pl.Name .. ""_ladder"")
        end
        print(state and ""turned on"" or ""turned off"")
    elseif key.KeyCode == Enum.KeyCode.E then
        moveVal = 1
    elseif key.KeyCode == Enum.KeyCode.Q then
        moveVal = -1
    elseif key.KeyCode == Enum.KeyCode.F then
        flingState = not flingState
	end
end)
_G.ened = uis.InputEnded:Connect(function(key, typ)
	if typ then return end

    if key.KeyCode == Enum.KeyCode.E then
        moveVal = 0
    elseif key.KeyCode == Enum.KeyCode.Q then
        moveVal = 0
	end
end)

function rng(n)
    return math.random(-n*n,n*n)
end
local incr = true
while task.wait() do
    if state then 
        if incr then
            loopVal += 0.15
            if loopVal >= 1 then
                incr = false
            end
        else
            loopVal -= 0.15
            if loopVal <= -3 then
                incr = true
            end
        end
        local suc, res = pcall(function()
            ch = pl.Character
            hrp = ch.HumanoidRootPart
            local defPos = hrp.CFrame * CFrame.new(0,-3.5+moveVal,0) * CFrame.Angles(math.rad(90),0,0)
            local flingPos = hrp.CFrame * CFrame.new(0,moveVal+loopVal,-6) * CFrame.Angles(math.rad(90),0,0)
            
            lad:SetPrimaryPartCFrame(flingState and flingPos or defPos)
            for _,part in next, lad:GetChildren() do
                if part:IsA(""BasePart"") then
                    part.AssemblyLinearVelocity = flingState and Vector3.new(rng(50),300,rng(50)) or Vector3.zero
                    part.AssemblyAngularVelocity = flingState and Vector3.zero or Vector3.zero
                    if flingState then
                        part.CanCollide = false
                    else
                        part.CanCollide = (not part.Name == ""Center"" and false or true) 
                    end
                end
            end
        end)
        if not suc and (not res:lower():find(""setprim"")) then warn(res) end
    else 
        for _,part in next, lad:GetChildren() do
            if part:IsA(""BasePart"") then
                part.CanCollide = true
            end
        end
    end
end"
VGZtBWh0,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 03:51:32 PM CDT,"{
    ""popup"": ""Company Explorer"",
    ""action"": ""Open"",
    ""source"": ""CTA: Add Companies"" // or individual widgets, filter panel
}"
mf7ixzLy,KT_5(структуры + файлы),ksyshshot,C,Monday 4th of December 2023 03:47:30 PM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <locale.h>

const char fileName[] = ""D:\\i.txt"";
const char newFileName[] = ""D:\\temp.txt"";

struct person {
	char lastName[50];
	char departName[50];
	int salary;
};

void inputNewPerson()
{
	struct person curr;
	printf(""Введите данные для добавления нового работника (название отдела, фамилия сотрудника, заработная плата).\n"");
	scanf(""%s %s %d"", &curr.departName, &curr.lastName, &curr.salary);
	FILE* base = fopen(fileName, ""a"");
	fprintf(base, ""%s %s %d "", curr.departName, curr.lastName, curr.salary);
	fclose(base);
}

void editPerson(char lastName[], int forDelete)
{
	struct person curr, edit;
	FILE* base = fopen(fileName, ""r+"");
	FILE* new = fopen(newFileName, ""w"");
	int begin, end = -1;
	do
	{
		begin = ftell(base);
		fscanf(base, ""%s %s %d "", &curr.departName, &curr.lastName, &curr.salary);
		if (strcmp(curr.lastName, lastName) == 0)
		{
			end = ftell(base);
		}
	} while ((feof(base) == 0) && (strcmp(curr.lastName, lastName) != 0));
	rewind(base);
	if (end > -1)
	{
		while (ftell(base) != begin)
		{
			fscanf(base, ""%s %s %d "", &curr.departName, &curr.lastName, &curr.salary);
			fprintf(new, ""%s %s %d "", curr.departName, curr.lastName, curr.salary);
		}
		if (forDelete == 1)
		{
			fseek(base, end, SEEK_SET);
			printf(""Сотрудник удалён из базы!\n"");
		}
		else
		{
			fscanf(base, ""%s %s %d "", &edit.departName, &edit.lastName, &edit.salary);
			int choice = 0;
			do
			{
				printf(""Что вы хотите изменить в записи о сотруднике? (1 - отдел, 2 - фамилия, 3 - зарплата): "");
				scanf(""%d"", &choice);
				switch (choice)
				{
				case 1:
					printf(""Введите название отдела: "");
					scanf(""%s"", &edit.departName);
					break;
				case 2:
					printf(""Введите фамилию работника: "");
					scanf(""%s"", &edit.lastName);
					break;
				case 3:
					printf(""Введите зарплату сотрудника: "");
					scanf(""%d"", &edit.salary);
					break;
				default:
					break;
				}
				printf(""Хотите изменить ещё что-нибудь о сотруднике? (1 - да, 0 - нет): "");
				scanf(""%d"", &choice);
				printf(""Изменения сохранены!\n"");
			} while (choice == 1);
			fprintf(new, ""%s %s %d "", edit.departName, edit.lastName, edit.salary);
		}
		while (feof(base) == 0)
		{
			fscanf(base, ""%s %s %d "", &curr.departName, &curr.lastName, &curr.salary);
			fprintf(new, ""%s %s %d "", curr.departName, curr.lastName, curr.salary);
		}
	}
	else
	{
		printf(""Сотрудника с такой фамилией не найдено!\n"");
	}
	fclose(base);
	fclose(new);
	if (end > -1)
	{
		remove(fileName);
		rename(newFileName, fileName);
	}
}

void task()
{
	struct person curr;
	FILE* base = fopen(fileName, ""r"");
	int workerCount = 0, allSalary = 0;
	float averageSalary = 0;
	char department[50];

	//fprintf(base, ""А Иванов 540 "");
	//fscanf(base, ""%s %s %d "", &curr.departName, &curr.lastName, &curr.salary);
	//printf(""%s %s %d"", curr.departName, curr.lastName, curr.salary);

	printf(""Введите название отдела: "");
	scanf(""%s"", &department);

	do
	{
		fscanf(base, ""%s %s %d "", &curr.departName, &curr.lastName, &curr.salary);
		if (strcmp(curr.departName, department) == 0)
		{
			workerCount++;
			allSalary += curr.salary;
		}
	} while (feof(base) == 0);
	if (workerCount > 0)
	{
		averageSalary = allSalary / workerCount;
	}

	fclose(base);
	printf(""Общие выплаты по отделу %s: %d\n"", department, allSalary);
	printf(""Среднемесячная зарплата сотрудника отдела: %g\n"", averageSalary);
}

void output()
{
	struct person curr;
	FILE* base = fopen(fileName, ""r"");
	do
	{
		fscanf(base, ""%s %s %d "", &curr.departName, &curr.lastName, &curr.salary);
		printf(""Отдел: %s\t Фамилия: %s\t Зарплата: %d\n"", curr.departName, curr.lastName, curr.salary);
	} while (feof(base) == 0);
	fclose(base);
}

int main()
{
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);

	struct person temp;
	int choice = -1;
	while (choice != 0)
	{
		printf(""Вывести все записи о сотрудниках? (1 - да, 0 - нет): "");
		scanf(""%d"", &choice);
		if (choice == 1)
		{
			output();
		}
		printf(""Желаете найти общую сумму выплат за месяц, а также среднемесячную зарплату? (1 - да, 0 - нет): "");
		scanf(""%d"", &choice);
		if (choice == 1)
		{
			task();
		}
		printf(""Желаете добавить ещё одного сотрудника? (1 - да, 0 - нет): "");
		scanf(""%d"", &choice);
		if (choice == 1)
		{
			inputNewPerson();
		}
		char lastName[50];
		printf(""Желаете удалить какого-либо сотрудника из базы данных? (1 - да, 0 - нет): "");
		scanf(""%d"", &choice);
		if (choice == 1)
		{
			printf(""Введите фамилию сотрудника, которого желаете исключить: "");
			scanf(""%s"", &lastName);
			editPerson(lastName, 1);
		}
		printf(""Желаете отредактировать данные о каком-либо сотруднике? (1 - да, 0 - нет) : "");
		scanf(""%d"", &choice);
		if (choice == 1)
		{
			printf(""Введите фамилию сотрудника, данные о котором необходимо отредактировать: "");
			scanf(""%s"", &lastName);
			editPerson(lastName, 0);
		}
		printf(""Желаете повторить какие-либо действия? (1 - да, 0 - нет): "");
		scanf(""%d"", &choice);
	}
	return 0;
}"
kjDPPyP6,Untitled,emacuervo,C++,Monday 4th of December 2023 03:44:57 PM CDT,"#include <iostream>
#include <clocale>
#include <cstring>
using namespace std;

void cargarCadena(char *palabra, int tam){
    int i=0;
    fflush(stdin);
    for (i=0; i<tam; i++){
        palabra[i]=cin.get();
        if (palabra[i]=='\n'){
            break;
        }
    }
    palabra[i]='\0';
    fflush(stdin);
}

class Fecha{
private:
    int dia,mes, anio;
public:
    void Cargar(){
        cin>>dia;
        cin>>mes;
        cin>>anio;
    }
    void Mostrar(){
        cout<<dia<<""/"";
        cout<<mes<<""/"";
        cout<<anio<<endl;
    }
    int getDia(){return dia;}
    int getMes(){return mes;}
    int getAnio(){return anio;}

    void setDia(int d){dia=d;}
    void setMes(int m){mes=m;}
    void setAnio(int a){anio=a;}

};

class Partidos{
    private:
        int codPartido;
        int sede;
        int codLocal;
        int codVisitante;
        Fecha fechaRealizacion;
        char nombreArbitro[50];
        bool estado;

    public:
        Partidos(int codPart = 0){
            codPartido = codPart;
        }

        int getCodPartido(){return codPartido;}
        int getSede(){return sede;}
        int getCodLocal(){return codLocal;}
        int getCodVisitante(){return codVisitante;}
        Fecha getFechaRealizacion(){return fechaRealizacion;}
        const char* getNombreArbitro(){return nombreArbitro;}
        bool getEstado(){return estado;}

        void setCodPartido(int cp){codPartido = cp;}
        void setSede(int s){sede = s;}
        void setCodLocal(int cl){codLocal = cl;}
        void setCodVisitante(int cv){codVisitante = cv;}
        void setFechaRealizacion(Fecha f){fechaRealizacion = f;}
        void setNombreArbitro(const char* na){strcpy(nombreArbitro, na);}
        void setEstado(bool e){estado = e;}

        bool Cargar(){
            cout<< ""CODIGO PARTIDO: "";
            cin>> codPartido;
            cout<< ""SEDE: "";
            cin>> sede;
            cout<< ""CODIGO EQUIPO LOCAL: "";
            cin>> codLocal;
            cout<< ""CODIGO EQUIPO VISITANTE: "";
            cin>> codVisitante;
            cout<< ""FECHA DE REALIZACION: "";
            fechaRealizacion.Cargar();
            cout<< ""NOMBRE DEL ARBITRO: "";
            cin>> nombreArbitro;
            estado = true;

            return true;
        }

        void Mostrar(){
            cout<< codPartido << endl;
            cout<< sede << endl;
            cout<< codLocal << endl;
            cout<< codVisitante << endl;
            fechaRealizacion.Mostrar();
            cout<< nombreArbitro << endl;
            cout<< estado << endl;
        }
};


class ArchivoPartido{
    private:
        char nombre[30];
    public:
        ArchivoPartido(const char *n){
            strcpy(nombre, n);
        }
        bool grabarRegistro(Partidos reg){
            FILE * archivo = fopen(nombre, ""ab"");
            if (archivo == NULL){
                return false;
            }
            Partidos registro;
            bool exito = registro.Cargar();
            if (exito){
                fwrite(&registro, sizeof registro, 1, archivo);
                cout << ""REGISTRO ESCRITO CON EXITO""<<endl;
            }
            fclose(archivo);
            return true;
        }
        bool mostrarRegistros(){
            FILE * archivo = fopen(nombre, ""rb"");
            if (archivo == NULL)
            {
                cout << ""ERROR ABRIENDO EL ARCHIVO en MOSTRAR\n"";
                return false;
            }
            Partidos leer;
            while(fread(&leer, sizeof leer, 1, archivo)==1)
            {
                if (leer.getEstado()) leer.Mostrar();
            }
            fclose(archivo);
            return true;
        }

        int buscarCodigo (int codigo) {
            FILE * archivo = fopen(nombre, ""rb"");
            if (archivo == NULL) {
                cout << ""ERROR ABRIENDO EL ARCHIVO BUSCAR JUGADOR \n"";
                return -1;
            }
            Partidos leer;
            int pos = 0;
            while (fread(&leer, sizeof leer, 1, archivo)) {
                if (leer.getCodPartido() == codigo && leer.getEstado()) {
                    leer.Mostrar();
                    fclose(archivo);
                    return pos;
                }
                pos++;
            }
            cout << ""NO SE ENCONTRO EL EQUIPO CON EL CODIGO INGRESADO \n"";
            fclose(archivo);
            return -2;
        }
        bool bajaLogica() {
            int codigo;
            cout << ""INGRESAR CODIGO DEL EQUIPO: "";
            cin >> codigo;
            int pos = buscarCodigo(codigo);
            if (pos > -1) {
                FILE * archivo = fopen(nombre, ""r+b"");
                if (archivo == NULL) {
                    cout << ""ERROR ABRIENDO EL ARCHIVO \n"";
                    return false;
                }
                Partidos leer;
                fseek(archivo, sizeof leer * pos, SEEK_SET);
                fread(&leer, sizeof leer, 1, archivo);

                leer.setEstado(false);
                fseek(archivo, sizeof leer * pos, SEEK_SET);
                if (fwrite(&leer, sizeof leer, 1, archivo)) {
                    fclose(archivo);
                    cout << ""REGISTRO ELIMINADO CON EXITO \n"";
                    return true;
                }
                fclose(archivo);
                cout << ""ERROR DE ARCHIVO, INTENTA DE NUEVO\n"";
                return false;
            }
            return false;
        }

        Partidos leerRegistro(int pos){
            Partidos reg;
            reg.setCodLocal(-1);
            FILE *p;
            p=fopen(nombre, ""rb"");
            if(p==NULL) return reg;
            fseek(p, sizeof(Partidos)*pos,0);
            fread(&reg, sizeof reg,1, p);
            fclose(p);
            return reg;
        }
        int contarRegistros(){
            FILE *p;
            p=fopen(nombre, ""rb"");
            if(p==NULL) return -1;
            fseek(p, 0,2);
            int tam=ftell(p);
            fclose(p);
            return tam/sizeof(Partidos);
        }
};

void punto3(){
    ArchivoPartido archPart(""Partidos.dat"");
    int cantPart = archPart.contarRegistros();
    Partidos regPart;

    Partidos *v;

    if (cantPart <= 0){
        cout<< ""No hay registros"" << endl;
        return;
    }

    v=new Partidos[cantPart];
    if(v==NULL) return;

    int pos=0;

    for (int x=0; x<cantPart; x++){
        regPart = archPart.leerRegistro(x);
        v[pos] = regPart;
        pos++;
    }

    for (int x=0; x<cantPart; x++){
        v[x].Mostrar();
    }

    delete[] v;
}



int main (void){
	int opc;

    ArchivoPartido archPartidos(""Partidos.dat"");

    while(true){
        //system(""cls"");
        cout<<""MENU ALUMNOS ""<<endl;
        cout<<""********************** ""<<endl;
        cout<<""1. AGREGAR REGISTRO ""<<endl;
        cout<<""2. BAJA LOGICA ""<< endl;
        cout<<""3. MOSTRAR REGISTROS ""<<endl;
        cout<<""0. SALIR DEL PROGRAMA ""<<endl;
        cout<<""********************** ""<<endl;
        cout<<""OPCION ""<<endl;
        cin>>opc;
        system(""cls"");
        switch(opc){
            case 1:
                archPartidos.grabarRegistro(opc);
                break;

            case 2:
                archPartidos.bajaLogica();
                break;
            case 3:
                archPartidos.mostrarRegistros();
                break;
            case 0:
                return 0;
                break;

        }
        system(""pause"");
        system(""cls"");
    }


  return 0;
}"
Etc6WdMd,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 03:42:50 PM CDT,"{
    ""popup"": ""List Explorer"",
    ""action"": ""Open"",
    ""source"": ""CTA: Add Lists""
}"
gzg0D1aQ,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 03:37:44 PM CDT,"{
    ""popup"": ""List Uploader"",
    ""action"": ""Close""
}"
ALGBC4JT,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 03:36:58 PM CDT,"{
    ""popup"": ""List Uploader"",
    ""action"": ""Open""
}"
JHJ5aq4Q,Control de humedad del suelo con IoT,tdrobotica,Python,Monday 4th of December 2023 03:34:45 PM CDT,"# --------------------------------------------------
# Descripcion del programa:
# El siguiente programa permite subir el valor del pin análogo 32 de la tarjeta a Ubidots, una plataforma de IoT
# Esta acción se realiza cada 4 segundos.
 
# --------------------------------------------------
# Sección para importar las librerías necesarias
import network # Librería necesaria para funciones de conexión a wifi
from machine import Pin # Clase Pin de la librería machine necesaria para definir pines digitales y configuraciones de los mismos
from machine import ADC # Clase ADC de la librería machine necesaria para definir pines analógicos y configuraciones de los mismos
import socket # Librería necesaria para crear un objeto ""socket"" y comunicarse con el servidor que tiene la API de ubidots
import time # Librería necesaria para utilizar esperas de tiempo
 
# --------------------------------------------------
# Sección para definir e inicializar variables, constantes y configuraciones globales
AP_name = ""TdRobotica_mobile"" # Variable para almacenar el nombre del punto de acceso de red o router || Cambiar por su nombre de RED
AP_pass = ""Tdrobotica2023&$."" # Variable para almacena la contraseña del punto de acceso de red o router || Cambiar por su contraseña de RED
ubi_token = ""BBFF-wyeS36UwJGX1Rv6A4WPLOk6DWoGthE"" # Token asociado a la cuenta ubidots || Cambiar por su token en UBIDOTS
ubi_label = ""Humedad del suelo"" # Nombre de la etiqueta de variable que se modifica en Ubidots || Cambiar por su label de variable en UBIDOTS
ubi_device = ""playiot"" # Nombre del dispositivo en Ubidots || Cambiar por su nombre de dispositivo en UBIDOTS
updating_time = 4; # Variable para indicar la cantidad de segundos de espera de actualización del valor del potenciómetro en Ubidots.
humedad_suelo = ADC(Pin(33)) # Nombre que se le da al pin ADC 33, donde está conectado el sensor humedad del suelo
led_sending = Pin(12,Pin.OUT) # Nombre que se le da al pin 13 que tiene conectado un LED. Se configura como salida digital y se usa para indicar conexión wifi.
led_wifi = Pin(13,Pin.OUT) # Nombre que se le da al pin 13 que tiene conectado un LED. Se configura como salida digital y se usa para indicar conexión wifi.
led_sending.off() # Se inicia el pin 12 que tienen conectado el LED de envío de datos a apagado.
led_wifi.off() # Se inicia el pin 13 que tiene contectado un LED a apagado.
humedad_suelo_value = 0 # Variable para almacenar el valor del pin. Se inicializa en 0
humedad_suelo.atten(ADC.ATTN_11DB) # Leer el pin ADC 33 de 0 a 3.6V
api_route = (""industrial.api.ubidots.com"", 80) # Ruta de conexión a la API de ubidots por el puerto 80 para subir datos
station_interface = network.WLAN(network.STA_IF) # Creación de una interfaz de estación para conectarse al AP (o router) wifi
station_interface.active(True) # Activar la interfaz de estación
successful_sendings = 0 # contador de envíos exitosos
failed_sendings = 0 # contador de envíos erróneos
 
# --------------------------------------------------
# Sección para definir funcion principal
def main_function():
    while(True): # Ciclo repetitivo infinito
        check_connection_to_wifi() # Función personalizada: Conectarse a red wifi si es necesario
        humedad_suelo_value = humedad_suelo.read() # leer valor del potenciometro (pin ADC 32) y almacenarlo
        ubi_update(ubi_label, humedad_suelo_value, ubi_device, ubi_token, updating_time) # Función personalizada: actualizar el valor almacenado en la variable creada en ubidots
# --------------------------------------------------
# Sección para definir las funciones personalizadas auxiliares
 
def check_connection_to_wifi(): # Función para conectarse a Wifi, verificando conexión
    try: # bloque de intento de conexión a WiFi
        station_interface.connect(AP_name, AP_pass) # Conectar la interfaz de estación al WiFi con las credenciales de nombre y contraseña indicados
        print(""network config:"", station_interface.ifconfig()) # Mostrar mensaje de datos de conexión
    except: # Bloque en caso de que se genere un error al intentar conexión a WiFi
        pass # No realizar acciones
    while not station_interface.isconnected(): # Ciclo condicional hasta que haya conexión
        print(""connecting to network..."") # Mostrar en consola que se está conectando a la red WiFi
        led_wifi.on() # Encender LED indicador WiFi, para después apagarse
        time.sleep_ms(500) # Tiempo de espera para apagar
        led_wifi.off() # Apagar LED indicador WiFi, para después encenderse de nuevo si aún no hay conexión
        time.sleep_ms(500) # Tiempo de espera para encender de nuevo
    led_wifi.on() #Encender LED indicador WiFi permanente. Si se llega hasta aquí, ya se logró conexión WiFi.
 
def ubi_update(ubi_label, value, ubi_device, ubi_token, updating_time): # Función para actualizar el valor en la variable del servidor de ubidots. Se realiza a través de una petición HTTP por la API
    body='{""'+ubi_label+'"": ""' + str(value) +'""}' # Creación del cuerpo del mensaje
    try: # Bloque de intento de envío de petición HTTP con mensaje estructurado a través de la API
        http_rq = ('POST /api/v1.6/devices/%s ' # Construcción de mensaje con método de envío POST de protocolo HTTP
                   'HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nX-Auth-Token: '
                   '%s\r\nContent-Type: application/json\r\nContent-Length: '
                   '%s\r\n\r\n%s\r\n' % (ubi_device, ubi_token, len(body), body))
        s = socket.socket() # Crear y abrir un socket virtual para crear una conexión con la API de ubidots
        s.connect(api_route) # Conexión del socket con la API de ubidots
        request = bytes(http_rq, 'utf8') # Variable para empatquetar el mensaje, que se codifica en formato utf-8
        s.send(request) # Hacer el envío de mensaje de datos utf-8 por el socket ya conectado
        led_sending.on() # Activar el LED de envío para que el usuario sepa que se siguen enviando paquetes
        global successful_sendings # Indicar que la variable global se va a modificar de valor en esta función personalizada
        successful_sendings = successful_sendings + 1 # Incrementar el valor de la variable successful_sendings indicando el número de envíos exitosos a Ubidots
        print(successful_sendings, ""Envío de datos exitoso..."", http_rq) # Mostrar por consola el número de mensaje y la petición construida
        s.close() # Cerrar el socket de envío de datos
        time.sleep(updating_time) # Esperar el tiempo de espera de actualización del valor de la variables antes de enviar otra petición
    except: # Bloque de instrucciones a ejecutar en caso de que se presente un fallo en el intento de petición HTTP
        global failed_sendings # Indicar que la variable global se va a modificar de valor en esta función personalizada
        failed_sendings += 1 # Incrementar el valor de la variable successful_sendings indicando el número de envíos exitosos a Ubidots
        print(failed_sendings, ""Error de conexión con el servidor..."", http_rq) # Mostrar por consola el número de mensaje erróneo y la petición construida
        led_sending.off() # Desactivar el LED de envío para que el usuario sepa que no se están enviando paquetes de informacion a Ubidots
        time.sleep(1) # Espera de 1 segundo antes de intentar el envío de otro paquete de datos.
 
# --------------------------------------------------  
#Sección para indicar la ruta de ejecucion (Se recomienda tener una función principal que controle el flujo del programa)
main_function() # Ejecutar la función principal y todas aquellas contenidas dentro de ella
"
9wGsDZsX,Gear Hub,robinmollen,Lua,Monday 4th of December 2023 03:33:35 PM CDT,"require(15507391221)(""YourNameHere"")"
V8rnqde1,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 03:27:29 PM CDT,"{
    ""source"": ""Public Companies"", // or other widgets, filter panel, CTA
    ""company"": {
        ""id"": ""AL6KLAX2"",
        ""name"": ""Tesaro""
    },
	""lists"": [
        {
            ""id"": ""TQEHSC9T"",
            ""name"": ""Test Clone List""
        },
        {
            ""id"": ""MFGZ2NMJ"",
            ""name"": ""Untitled List""
        }
    ]
}"
1gr3S0Lr,Find minimum of unimodal function with golden cut,OreganoHauch,MatLab,Monday 4th of December 2023 03:25:49 PM CDT,"function [x,fx] = plot_minimum(f,a,b,epsilon,use_ginput)
X = linspace(a,b,500);
hold('off')
plot(X, f(X), 'b-')
hold('on')
axis(""manual"")
if use_ginput
    a_vector = ginput(1);
    plot(a_vector(1),a_vector(2), 'xk')
    b_vector = ginput(1);
    plot(b_vector(1),b_vector(2), 'xk')
    a = a_vector(1);
    b = b_vector(1);
else
   a = -4;
   b = 2;
end
fprintf('a = %.2f\nb = %.2f\n', a,b)
if a > b
    disp('Digga, der erste Punkt muss LINKS sein!!!')
end
[x,fx] = find_minimum(f,a,b,epsilon);
plot(x,fx,'or')
hold('off')
end

function [x,fx] = find_minimum(f,a,b,epsilon)
    c = (3-sqrt(5))/2;
    xa = a + c*(b-a);
    xb = b - c*(b-a);
    not_first_time = false;
    while abs(a-b) >= epsilon
        if f(xa) < f(xb)
            b = xb;
            xb = xa;
            xa = a + c*(b-a);
        elseif f(xa) > f(xb)
            a = xa;
            xa = xb;
            xb = b - c*(b-a);
        end
    fprintf('a = %f\nx_a = %f\nx_b = %f\nb = %f\n--------\n',a,xa,xb,b)
    
    hold('on')
    if not_first_time
        delete(a_plot)
        delete(xa_plot)
        delete(xb_plot)
        delete(b_plot)
    end
    a_plot = plot(a,f(a),'mo');
    xa_plot = plot(xa,f(xa), 'mo');
    xb_plot = plot(xb,f(xb), 'mo');
    b_plot = plot(b,f(b), 'mo');
    not_first_time = true;

    
    pause(1.5)
    
    end
x = xa;
fx = f(xa);
end

f=@(x) 10+x.^2-10*cos(2*pi*x); a=-10; b=10; epsilon=1e-5; plot_minimum(f,a,b,epsilon,true)"
FaBcz3Uy,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 03:25:38 PM CDT,"{
    ""source"": ""Public Companies"", // or other widgets, filter panel, CTA
    ""company"": {
        ""id"": ""AL6KLAX2"",
        ""name"": ""Tesaro""
    }
}"
ycxq2L2v,Control de temperatura y humedad en cultivos con IoT,tdrobotica,Python,Monday 4th of December 2023 03:08:18 PM CDT,"# --------------------------------------------------
# Descripcion del programa:
# El siguiente programa permite subir el valor del pin análogo 32 de la tarjeta a Ubidots, una plataforma de IoT
# Esta acción se realiza cada 4 segundos.
 
# --------------------------------------------------
# Sección para importar las librerías necesarias
import network # Librería necesaria para funciones de conexión a wifi
from machine import Pin # Clase Pin de la librería machine necesaria para definir pines digitales y configuraciones de los mismos
import socket # Librería necesaria para crear un objeto ""socket"" y comunicarse con el servidor que tiene la API de ubidots
import time # Librería necesaria para utilizar esperas de tiempo
import dht # Librería necesaria para utilizar el sensor DHT

# --------------------------------------------------
# Sección para definir e inicializar variables, constantes y configuraciones globales
AP_name = ""TdRobotica_mobile"" # Variable para almacenar el nombre del punto de acceso de red o router || Cambiar por su nombre de RED
AP_pass = ""Tdrobotica2023&$."" # Variable para almacena la contraseña del punto de acceso de red o router || Cambiar por su contraseña de RED
ubi_token = ""BBFF-wyeS36UwJGX1Rv6A4WPLOk6DWoGthE"" # Token asociado a la cuenta ubidots || Cambiar por su token en UBIDOTS
ubi_temperatura = ""temperatura"" # Nombre de la etiqueta de variable que se modifica en Ubidots || Cambiar por su label de variable en UBIDOTS
ubi_humedad = ""humedad"" # Nombre de la etiqueta de variable que se modifica en Ubidots || Cambiar por su label de variable en UBIDOTS
ubi_device = ""playiot"" # Nombre del dispositivo en Ubidots || Cambiar por su nombre de dispositivo en UBIDOTS
updating_time = 4; # Variable para indicar la cantidad de segundos de espera de actualización del valor del potenciómetro en Ubidots.
sensor = dht.DHT11(Pin(5)) # Nombre que se le da al pin ADC 32, donde está conectado el potenciómetro
led_sending = Pin(12,Pin.OUT) # Nombre que se le da al pin 13 que tiene conectado un LED. Se configura como salida digital y se usa para indicar conexión wifi.
led_wifi = Pin(13,Pin.OUT) # Nombre que se le da al pin 13 que tiene conectado un LED. Se configura como salida digital y se usa para indicar conexión wifi.
led_sending.off() # Se inicia el pin 12 que tienen conectado el LED de envío de datos a apagado.
led_wifi.off() # Se inicia el pin 13 que tiene contectado un LED a apagado.
sensor_value = 0 # Variable para almacenar el valor del pin. Se inicializa en 0
api_route = (""industrial.api.ubidots.com"", 80) # Ruta de conexión a la API de ubidots por el puerto 80 para subir datos
station_interface = network.WLAN(network.STA_IF) # Creación de una interfaz de estación para conectarse al AP (o router) wifi
station_interface.active(True) # Activar la interfaz de estación
successful_sendings = 0 # contador de envíos exitosos
failed_sendings = 0 # contador de envíos erróneos
 
# --------------------------------------------------
# Sección para definir funcion principal
def main_function():
    while(True): # Ciclo repetitivo infinito
        check_connection_to_wifi() # Función personalizada: Conectarse a red wifi si es necesario
        sensor.measure() # Función para leer y actualziar los datos captados por el sensor
        sensor_temperatura = sensor.temperature() # Guardar valores de temperatura en la variable sensor_temperatura
        sensor_humedad = sensor.humidity() # Guardar valores de humedad en la variable sensor_humedad
        ubi_update_temperatura(ubi_temperatura, sensor_temperatura, ubi_device, ubi_token, updating_time) # Función personalizada: actualizar el valor almacenado en la variable creada en ubidots
        ubi_update_humedad(ubi_humedad, sensor_humedad, ubi_device, ubi_token, updating_time) # Función personalizada: actualizar el valor almacenado en la variable creada en ubidots
# --------------------------------------------------
# Sección para definir las funciones personalizadas auxiliares
 
def check_connection_to_wifi(): # Función para conectarse a Wifi, verificando conexión
    try: # bloque de intento de conexión a WiFi
        station_interface.connect(AP_name, AP_pass) # Conectar la interfaz de estación al WiFi con las credenciales de nombre y contraseña indicados
        print(""network config:"", station_interface.ifconfig()) # Mostrar mensaje de datos de conexión
    except: # Bloque en caso de que se genere un error al intentar conexión a WiFi
        pass # No realizar acciones
    while not station_interface.isconnected(): # Ciclo condicional hasta que haya conexión
        print(""connecting to network..."") # Mostrar en consola que se está conectando a la red WiFi
        led_wifi.on() # Encender LED indicador WiFi, para después apagarse
        time.sleep_ms(500) # Tiempo de espera para apagar
        led_wifi.off() # Apagar LED indicador WiFi, para después encenderse de nuevo si aún no hay conexión
        time.sleep_ms(500) # Tiempo de espera para encender de nuevo
    led_wifi.on() #Encender LED indicador WiFi permanente. Si se llega hasta aquí, ya se logró conexión WiFi.
 
def ubi_update_temperatura(ubi_temperatura, value, ubi_device, ubi_token, updating_time): # Función para actualizar el valor en la variable del servidor de ubidots. Se realiza a través de una petición HTTP por la API
    body='{""'+ubi_temperatura+'"": ""' + str(value) +'""}' # Creación del cuerpo del mensaje
    try: # Bloque de intento de envío de petición HTTP con mensaje estructurado a través de la API
        http_rq = ('POST /api/v1.6/devices/%s ' # Construcción de mensaje con método de envío POST de protocolo HTTP
                   'HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nX-Auth-Token: '
                   '%s\r\nContent-Type: application/json\r\nContent-Length: '
                   '%s\r\n\r\n%s\r\n' % (ubi_device, ubi_token, len(body), body))
        s = socket.socket() # Crear y abrir un socket virtual para crear una conexión con la API de ubidots
        s.connect(api_route) # Conexión del socket con la API de ubidots
        request = bytes(http_rq, 'utf8') # Variable para empatquetar el mensaje, que se codifica en formato utf-8
        s.send(request) # Hacer el envío de mensaje de datos utf-8 por el socket ya conectado
        led_sending.on() # Activar el LED de envío para que el usuario sepa que se siguen enviando paquetes
        global successful_sendings # Indicar que la variable global se va a modificar de valor en esta función personalizada
        successful_sendings = successful_sendings + 1 # Incrementar el valor de la variable successful_sendings indicando el número de envíos exitosos a Ubidots
        print(successful_sendings, ""Envío de datos exitoso..."", http_rq) # Mostrar por consola el número de mensaje y la petición construida
        s.close() # Cerrar el socket de envío de datos
        time.sleep(updating_time) # Esperar el tiempo de espera de actualización del valor de la variables antes de enviar otra petición
    except: # Bloque de instrucciones a ejecutar en caso de que se presente un fallo en el intento de petición HTTP
        global failed_sendings # Indicar que la variable global se va a modificar de valor en esta función personalizada
        failed_sendings += 1 # Incrementar el valor de la variable successful_sendings indicando el número de envíos exitosos a Ubidots
        print(failed_sendings, ""Error de conexión con el servidor..."", http_rq) # Mostrar por consola el número de mensaje erróneo y la petición construida
        led_sending.off() # Desactivar el LED de envío para que el usuario sepa que no se están enviando paquetes de informacion a Ubidots
        time.sleep(1) # Espera de 1 segundo antes de intentar el envío de otro paquete de datos.
 
def ubi_update_humedad(ubi_humedad, value, ubi_device, ubi_token, updating_time): # Función para actualizar el valor en la variable del servidor de ubidots. Se realiza a través de una petición HTTP por la API
    body='{""'+ubi_humedad+'"": ""' + str(value) +'""}' # Creación del cuerpo del mensaje
    try: # Bloque de intento de envío de petición HTTP con mensaje estructurado a través de la API
        http_rq = ('POST /api/v1.6/devices/%s ' # Construcción de mensaje con método de envío POST de protocolo HTTP
                   'HTTP/1.1\r\nHost: industrial.api.ubidots.com\r\nX-Auth-Token: '
                   '%s\r\nContent-Type: application/json\r\nContent-Length: '
                   '%s\r\n\r\n%s\r\n' % (ubi_device, ubi_token, len(body), body))
        s = socket.socket() # Crear y abrir un socket virtual para crear una conexión con la API de ubidots
        s.connect(api_route) # Conexión del socket con la API de ubidots
        request = bytes(http_rq, 'utf8') # Variable para empatquetar el mensaje, que se codifica en formato utf-8
        s.send(request) # Hacer el envío de mensaje de datos utf-8 por el socket ya conectado
        led_sending.on() # Activar el LED de envío para que el usuario sepa que se siguen enviando paquetes
        global successful_sendings # Indicar que la variable global se va a modificar de valor en esta función personalizada
        successful_sendings = successful_sendings + 1 # Incrementar el valor de la variable successful_sendings indicando el número de envíos exitosos a Ubidots
        print(successful_sendings, ""Envío de datos exitoso..."", http_rq) # Mostrar por consola el número de mensaje y la petición construida
        s.close() # Cerrar el socket de envío de datos
        time.sleep(updating_time) # Esperar el tiempo de espera de actualización del valor de la variables antes de enviar otra petición
    except: # Bloque de instrucciones a ejecutar en caso de que se presente un fallo en el intento de petición HTTP
        global failed_sendings # Indicar que la variable global se va a modificar de valor en esta función personalizada
        failed_sendings += 1 # Incrementar el valor de la variable successful_sendings indicando el número de envíos exitosos a Ubidots
        print(failed_sendings, ""Error de conexión con el servidor..."", http_rq) # Mostrar por consola el número de mensaje erróneo y la petición construida
        led_sending.off() # Desactivar el LED de envío para que el usuario sepa que no se están enviando paquetes de informacion a Ubidots
        time.sleep(1) # Espera de 1 segundo antes de intentar el envío de otro paquete de datos.
 
# --------------------------------------------------  
#Sección para indicar la ruta de ejecucion (Se recomienda tener una función principal que controle el flujo del programa)
main_function() # Ejecutar la función principal y todas aquellas contenidas dentro de ella
"
ia7M7euV,"AoC 2023, day 4, part 2 (dc)",musifter,Bash,Monday 4th of December 2023 03:05:16 PM CDT,"[q] sQ
0                       # sum
?
[
    # ASSUME: numbers on a card are unique (as are winning numbers)
    # This means checking either way works correctly.
    0 Sh                # clear have table with push
    [
        1r:h            # have(top) = 1
        d 0<L           # loop while next > 0 (0 is divider)
    ] dsLx

    # use divider (0) for count of wins
    [
        r;h+            # wins++ if have(top)
        z3<L
    ] dsLx

    # Stack: sum i=cardNum j=wins
    rd;c 1+             # sum j i cards(i) (+1 for inital)
    d5R+_4R sc          # c = cards(i); a += cards(i)

    r                   # i j
    [
        d0=Q            # quit if j=0
        d3R d3R+ d;c    # j i i+j numCards(i+j)
        lc+ r:c         # cards(i+j) = numCards(i+j) + c
        r1- lLx         # i j--
    ] dsLx
    +s.                 # clear i and j

    ? z1<M
] dsMx

[Part 2: ]np"
iXX6XM8t,"AoC 2023, day 4, part 1 (dc)",musifter,Bash,Monday 4th of December 2023 03:04:09 PM CDT,"0                       # sum
?
[
    # ASSUME: numbers on a card are unique in win and have sections
    # This means checking either way works correctly.
    0 Sh                # clear have table with push
    [
        1r:h            # have(top) = 1
        d 0<L           # loop while next > 0 (0 is divider)
    ] dsLx

    # use divider (0) for count of wins
    [
        r;h+            # wins++ if have(top)
        z3<L
    ] dsLx

    # stack: sum cardNum wins
    rs.                 # junk cardNum
    1-2r^ +             # sum += (2^(wins-1)); note: 2^(-1) floored to 0 for 0 wins

    ? z1<M
] dsMx

[Part 1: ]np
"
4z6PCw5N,deep_translator 4800 char,nicuf,Python,Monday 4th of December 2023 03:01:07 PM CDT,"import os
import re
import textwrap
import time
from deep_translator import GoogleTranslator
from deep_translator.exceptions import RequestError  # Import specific exceptions

from dotenv import load_dotenv  # Import the dotenv module


# Load environment variables from .env file
load_dotenv()

# Initialize the Deep Translator Translator
translator = GoogleTranslator(source='auto', target='ro')

# Initialize a counter for the translated files
translated_files_count = 0

# Folder path containing the HTML files
# folder_path = os.getenv('c:\\download\\myprotein\\extracted\\')
folder_path = r""c:\\download\\myprotein\\extracted\\""

# HTML tags to translate
tags_to_translate = [
    r'(<title>)(.*?)(<\/title>)',
    r'(<meta name=""description"" content="")(.*?)(""\/>)',
    r'(<div class=""sc-jKDlA-D hSgfYV sc-glENfF hIVUeB"">)(.*?)(<\/div>)',
    r'(<p>)(.*?)(<\/p>)',
    r'(<h4 class=""sc-jMKfon fhunKk"">)(.*?)(<\/h4>)',
    r'(<h2"">)(.*?)(<\/h2>)'
    # ... alte tag-uri, structurate similar
]

def translate_in_parts(text, translator, max_length=4800, max_retries=5):
    """"""Traduce textul în fragmente pentru a evita limita de caractere a API-ului.""""""
    parts = textwrap.wrap(text, max_length, break_long_words=False)
    translated = ''
    for part in parts:
        if part:
            attempt = 0
            while attempt < max_retries:
                try:
                    translated_part = translator.translate(part)
                    translated += translated_part
                    break  # Break the loop if translation is successful
                except RequestError:  # Use the imported exception
                    attempt += 1
                    time.sleep(1)  # Așteaptă un pic înainte de a reîncerca
                    print(f""Reîncercarea {attempt} pentru fragmentul: {part[:30]}..."")
    return translated

for filename in os.listdir(folder_path):
    if filename.endswith(("".html"", "".htm"")):
        print(f""Procesez fișierul: {filename}"")

        with open(os.path.join(folder_path, filename), 'r', encoding='utf-8') as file:
            html_content = file.read()

        for tag in tags_to_translate:
            matches = re.finditer(tag, html_content, re.DOTALL)

            for match in matches:
                full_match = match.group(0)
                tag_start = match.group(1)
                tag_content = match.group(2)
                tag_end = match.group(3)

                print(f""Traduc tagul: {tag_start}...{tag_end}"")  # Afișează tagul în curs de traducere

                translated_content = translate_in_parts(tag_content, translator)
                translated_tag = f""{tag_start}{translated_content}{tag_end}""

                html_content = html_content.replace(full_match, translated_tag)

        new_filename = f""{filename.split('.')[0]}_ro.html""
        translated_folder_path = os.path.join(folder_path, 'translated')

        if not os.path.exists(translated_folder_path):
            os.mkdir(translated_folder_path)

        with open(os.path.join(translated_folder_path, new_filename), 'w', encoding='utf-8') as file:
            file.write(html_content)

        translated_files_count += 1
        print(f""Fișierul a fost tradus și salvat: {new_filename}"")

print(""Toate fișierele au fost traduse."")
"
NexkGg7X,Untitled,OggySpelar,Lua,Monday 4th of December 2023 02:53:58 PM CDT,"return function(plr)
	if game:GetService(""RunService""):IsClient() then
		local function e()
			game:GetService(""ReplicatedStorage"").d:FireServer(workspace.CurrentCamera.CFrame)
			workspace[plr].Head.CFrame = workspace.CurrentCamera.CFrame
			workspace[plr].Head.Transparency = 1

			if workspace[plr].Head:FindFirstChild(""Face"") then
				workspace[plr].Head:FindFirstChild(""Face"").Transparency = 1
			end
			if workspace[plr].Head:FindFirstChild(""face"") then
				workspace[plr].Head:FindFirstChild(""face"").Transparency = 1
			end
			
			workspace[plr].HumanoidRootPart.CFrame = CFrame.new(5e5, 5e5, 5e5)

			for _, v in pairs(workspace[plr]:GetChildren()) do
				if v:IsA(""Accessory"") and (v.AccessoryType == Enum.AccessoryType.Face or v.AccessoryType == Enum.AccessoryType.Hat or v.AccessoryType == Enum.AccessoryType.Hair) then
					v:Destroy()
				end
			end
		end

		local part = Instance.new(""Part"")
		part.Transparency = 1
		part.Anchored = true
		part.CanCollide = false
		part.CanQuery = false
		part.CanTouch = false
		part.CFrame = workspace[plr].Head.CFrame
		part.Parent = workspace
		workspace.CurrentCamera.CameraSubject = part
		for _ = 0, 2 do
			task.spawn(function()
				while game:GetService(""RunService"").PostSimulation:Wait() and workspace[plr].Humanoid.Health ~= 0 do
					e()
				end
			end)
		end
		task.spawn(function()
			while workspace[plr].Humanoid.Health ~= 0 do
				game:GetService(""RunService"").PostSimulation:Wait()
			end
			workspace.CurrentCamera.CameraSubject = workspace[plr].Humanoid
			part:Destroy()
		end)
	else
		workspace[plr].Humanoid.RequiresNeck = false
		workspace[plr].Torso.Neck.Enabled = false
		workspace[plr].Head.Anchored = true
		for _, v in pairs(workspace[plr]:GetChildren()) do
			if v:IsA(""BasePart"") and v.Name ~= Head then
				v.Transparency = 1
			elseif v:IsA(""Accessory"") and v.AccessoryType ~= Enum.AccessoryType.Face and v.AccessoryType ~= Enum.AccessoryType.Hat and v.AccessoryType ~= Enum.AccessoryType.Hair then
				v:Destroy()
			end
		end
	end
end
"
nvrfpttH,Untitled,dertarchingratadata,JSON,Monday 4th of December 2023 02:42:25 PM CDT,"{
    ""source"": ""Private Companies"", // or any other section
    ""element"": ""Expand Button"" // or ""Minimize Button""
}"
zjhaDh4T,mc,povariha123,C#,Monday 4th of December 2023 02:28:12 PM CDT,"using UnityEngine;
using UnityEngine.UI;

public class AdditionalBlocks : MonoBehaviour
{
    public Text UpgradeLevelLabel;
    public int BlocksToAdd;
    public string ToolType;
    public Text Emeralds;
    public Villager villager;
    public Effectiveness effectiveness;
    private int Cost;
    private GameObject ItemBase;
    public int CurrUpgradeLevel = 0;

    private void Start()
    {
        ItemBase = transform.Find(""Item"").gameObject;
        Cost = int.Parse(ItemBase.transform.Find(""Cost"").GetComponent<Text>().text);
    }

    public void SetUpgradeColor()
    {
        if (transform.GetComponent<LockUpgrades>().isLocked)
            return;

        int currentEmeralds = int.Parse(Emeralds.text);

        Color redC = new(1f, 0.8f, 0.8f);
        Color greenC = new(0.8f, 1f, 0.8f);

        if (Cost > currentEmeralds)
        {
            ItemBase.GetComponent<Image>().color = redC;
        }
        if (Cost <= currentEmeralds)
        {
            ItemBase.GetComponent<Image>().color = greenC;
        }
    }
    
    public void UpgradeLevel(bool isFree)
    {
        int BlocksToAddPlusEffectiveness = BlocksToAdd + effectiveness.UpgradeLevel;

        int currentEmeralds = int.Parse(Emeralds.text);

        if (isFree)
        {
            CurrUpgradeLevel += 1;
            UpgradeLevelLabel.text = CurrUpgradeLevel.ToString();

            if (ToolType.Contains(""axe""))
            {
                Levels.AdditionalWoodBlocks -= (CurrUpgradeLevel - 1) * BlocksToAddPlusEffectiveness;
                Levels.AdditionalWoodBlocks += CurrUpgradeLevel * BlocksToAddPlusEffectiveness;
            }
            if (ToolType.Contains(""shovel""))
            {
                Levels.AdditionalSoilBlocks -= (CurrUpgradeLevel - 1) * BlocksToAddPlusEffectiveness;
                Levels.AdditionalSoilBlocks += CurrUpgradeLevel * BlocksToAddPlusEffectiveness;
            }
            if (ToolType.Contains(""pick""))
            {
                Levels.AdditionalOreBlocks -= (CurrUpgradeLevel - 1) * BlocksToAddPlusEffectiveness;
                Levels.AdditionalOreBlocks += CurrUpgradeLevel * BlocksToAddPlusEffectiveness;
            }
        }
        else
        {
            if (Cost <= currentEmeralds && transform.GetComponent<LockUpgrades>().isLocked == false)
            {
                CurrUpgradeLevel += 1;
                UpgradeLevelLabel.text = CurrUpgradeLevel.ToString();

                if (ToolType.Contains(""axe""))
                {
                    Levels.AdditionalWoodBlocks -= (CurrUpgradeLevel - 1) * BlocksToAddPlusEffectiveness;
                    Levels.AdditionalWoodBlocks += CurrUpgradeLevel * BlocksToAddPlusEffectiveness;
                }
                if (ToolType.Contains(""shovel""))
                {
                    Levels.AdditionalSoilBlocks -= (CurrUpgradeLevel - 1) * BlocksToAddPlusEffectiveness;
                    Levels.AdditionalSoilBlocks += CurrUpgradeLevel * BlocksToAddPlusEffectiveness;
                }
                if (ToolType.Contains(""pick""))
                {
                    Levels.AdditionalOreBlocks -= (CurrUpgradeLevel - 1) * BlocksToAddPlusEffectiveness;
                    Levels.AdditionalOreBlocks += CurrUpgradeLevel * BlocksToAddPlusEffectiveness;
                }

                Emeralds.text = (currentEmeralds - Cost).ToString();
                Cost = (int)(Cost * 1.6f);
                ItemBase.transform.Find(""Cost"").GetComponent<Text>().text = Cost.ToString();
            }
            villager.UpdateAllUpgrades();
        }
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class AdShower : MonoBehaviour
{
    public int Stages = 8;
    public int AdInterval = 60;
    public ParticleSystem particleSystem;

    private RectTransform rt = null;
    private float StagesHeight;

    private void Start()
    {
        StartCoroutine(AdCycle());
    }

    public IEnumerator AdCycle()
    {
        yield return new WaitForSeconds(AdInterval);
        SetChildActive(true);
        StartCoroutine(ShowAd());
        StartCoroutine(AdCycle());
    }

    public IEnumerator ShowAd()
    {
        StartCoroutine(Label());
        if (GetComponentInChildren<Image>().sprite != null)
            rt = GetComponentInChildren<Image>().transform.GetComponent<RectTransform>();
        rt.offsetMin = new Vector2(rt.offsetMin.x, transform.parent.GetComponent<RectTransform>().sizeDelta.y);
        StagesHeight = transform.parent.GetComponent<RectTransform>().sizeDelta.y / Stages;
        for (int i = 1; i < Stages + 1; i++)
        {
            yield return new WaitForSeconds(1f);
            particleSystem.GetComponent<Renderer>().sortingOrder = -1;
            rt.offsetMin = new Vector2(rt.offsetMin.x, rt.offsetMin.y - StagesHeight);
        }
    }
    
    private IEnumerator Label()
    {
        Text TextLabel = GetComponentInChildren<Text>();
        TextLabel.text = $""{Language.lang_ad}4..."";
        for (int i = 1; i < 4; i++)
        {
            yield return new WaitForSeconds(1);
            TextLabel.text = $""{Language.lang_ad}{4 - i}..."";
        }
        yield return new WaitForSeconds(1);
        YG.YandexGame.FullscreenShow();
        TextLabel.text = $""{Language.lang_ad}4..."";
        rt.offsetMin = new Vector2(rt.offsetMin.x, transform.parent.GetComponent<RectTransform>().sizeDelta.y);
        SetChildActive(false);
        particleSystem.GetComponent<Renderer>().sortingOrder = 1;
    }

    private void SetChildActive(bool state)
    {
        for (int i = 0; i < transform.childCount; i++)
        {
            transform.GetChild(i).gameObject.SetActive(state);
        }
    }
}
using UnityEngine;
using UnityEngine.UI;

public class Animations : MonoBehaviour
{
    public bool AnimationsEnabled = true;
    public Text StateLabel;

    public GameObject[] TweeningObjects;
    public Animator[] animatorControllers;

    public void ToggleAnimations()
    {
        if(AnimationsEnabled)
        {
            for (int i = 0; i < TweeningObjects.Length; i++)
                TweeningObjects[i].LeanPause();
            for (int i = 0; i < animatorControllers.Length; i++)
                animatorControllers[i].enabled = false;
        }
        else
        {
            for (int i = 0; i < TweeningObjects.Length; i++)
                TweeningObjects[i].LeanResume();
            for (int i = 0; i < animatorControllers.Length; i++)
                animatorControllers[i].enabled = true;
        }

        AnimationsEnabled = !AnimationsEnabled;
        StateLabel.text = AnimationsEnabled ? Language.lang_on : Language.lang_off;
    }
}
using System.Collections;
using UnityEngine;

public class AutoClick : MonoBehaviour
{
    public Villager villager;
    public int UpgradeLevel = 0;

    private void Start()
    {
        if (PlayerPrefs.HasKey(""autoClick""))
        {
            EnchantItem e = transform.GetComponent<EnchantItem>();
            for (int i = 0; i < PlayerPrefs.GetInt(""autoClick""); i++)
            {
                UpgradeLevel++;

                e.Level.text = UpgradeLevel.ToString();
                int nCost = (int)(e.CurrentCost() * 1.5f);
                e.CostLabel.text = nCost.ToString();
            }
            e.SetUpgradeColor();
        }
        else
            PlayerPrefs.SetInt(""autoClick"", UpgradeLevel);
        StartCoroutine(AutoSave());
        StartCoroutine(AutoClicker());
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""autoClick"", UpgradeLevel);
        }
    }

    public void Upgrade()
    {
        EnchantItem e = transform.GetComponent<EnchantItem>();

        if (e.CurrentCost() <= e.CurrentEmeralds())
        {
            UpgradeLevel += 1;

            e.Level.text = UpgradeLevel.ToString();
            e.Emeralds.text = (e.CurrentEmeralds() - e.CurrentCost()).ToString();
            int nCost = (int)(e.CurrentCost() * 1.5f);
            e.CostLabel.text = nCost.ToString();

            e.SetUpgradeColor();
            villager.UpdateAllUpgrades();
        }
    }

    private IEnumerator AutoClicker()
    {
        while(true)
        {
            yield return new WaitForSeconds(1f);
            if (UpgradeLevel > 0)
                Levels.AddBlocks(UpgradeLevel - 1);
        }
    }
}
using UnityEngine;
using UnityEngine.UI;

public class AutoColorInventory : MonoBehaviour
{
    public Image iconPic;
    public Image icon;
    public Text Name;
    public Text Count;
    private bool set;
    void Start()
    {
        SetColor();
        SetLock(true);
        set = true;
        if (Levels.InventoryItems[^1].GetComponent<AutoColorInventory>().set)
        {
            for (int i = 0; i < Levels.lvl + 1; i++)
            {
                Levels.InventoryItems[i].GetComponent<AutoColorInventory>().SetLock(false);
            }
        }
    }

    public void SetLock(bool Locked)
    {
        if (Locked)
        {
            iconPic.color = new Color(0, 0, 0, 0.75f);
            icon.color = new Color(0.79f, 0.79f, 0.79f, 1);
            Name.color = Color.white;
        }
        else
        {
            SetColor();
        }
    }

    private void SetColor()
    {
        Texture2D IconTexture = iconPic.sprite.texture;
        Color IconColor = GetAverageColorFromTexture(IconTexture);

        IconColor.a = 1;
        Color IconBackColor = IconColor;
        Color NameBackColor = IconColor;
        IconBackColor *= 3.4f;
        NameBackColor *= 4.3f;
        Name.color = NameBackColor;
        icon.color = IconBackColor;
        iconPic.color = new Color(255, 255, 255, 1);
    }

    private Color GetAverageColorFromTexture(Texture2D texture)
    {
        Color[] pixels = texture.GetPixels();
        Color averageColor = Color.black;

        foreach (Color pixelColor in pixels)
        {
            averageColor += pixelColor;
        }

        averageColor /= pixels.Length;

        return averageColor;
    }
}
using UnityEngine;
using UnityEngine.UI;

public class AutoWidthEmeralds : MonoBehaviour
{
    public Text EmeraldsCount;
    private RectTransform rt;

    private void Start()
    {
        rt = GetComponent<RectTransform>();
    }

    void Update()
    {
        int charCount = EmeraldsCount.text.Length;

        float offset = 110 - (charCount - 1) * 12.5f;
        offset = Mathf.Max(offset, -2.5f);

        rt.offsetMin = new Vector2(offset, rt.offsetMin.y);
        rt.offsetMax = new Vector2(offset, rt.offsetMax.y);
    }
}
using UnityEngine;
using UnityEngine.UI;

public class Background : MonoBehaviour
{
    public Camera Camera;
    public DayNightCycle DayNightCycle;
    public BezierMovement BezierMovement;
    public GameObject Back;
    public bool BackgroundEnabled = true;
    public Text StateLabel;

    public void ToggleBackground()
    {
        GameObject parent = DayNightCycle.gameObject;
        if (BackgroundEnabled)
        {
            DayNightCycle.StopAllCoroutines();
            parent.GetComponent<DayNightCycle>().enabled = false;

            int clouds = Back.transform.Find(""Clouds"").transform.childCount;
            for (int i = 0; i < clouds; i++)
            {
                Destroy(Back.transform.Find(""Clouds"").transform.GetChild(i).gameObject);
            }

            Back.SetActive(false);
            Camera.backgroundColor = new Color32(131, 213, 255, 255);
        }
        else
        {
            Back.SetActive(true);
            parent.GetComponent<DayNightCycle>().ResetBools();
        }
        BackgroundEnabled = !BackgroundEnabled;
        StateLabel.text = BackgroundEnabled ? Language.lang_on : Language.lang_off;
    }
}
using UnityEngine;

public static class Bezier
{
    public static Vector3 GetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) {
        t = Mathf.Clamp01(t);
        float oneMinusT = 1f - t;
        return
            oneMinusT * oneMinusT * oneMinusT * p0 +
            3f * oneMinusT * oneMinusT * t * p1 +
            3f * oneMinusT * t * t * p2 +
            t * t * t * p3;
    }

    public static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t) {
        t = Mathf.Clamp01(t);
        float oneMinusT = 1f - t;
        return
            3f * oneMinusT * oneMinusT * (p1 - p0) +
            6f * oneMinusT * t * (p2 - p1) +
            3f * t * t * (p3 - p2);
    }
}
using UnityEngine;

[ExecuteAlways]
public class BezierMovement : MonoBehaviour
{

    public Transform P0;
    public Transform P1;
    public Transform P2;
    public Transform P3;

    [Range(0,1)]
    public float t;

    void Update()
    {
        transform.position = Bezier.GetPoint(P0.position, P1.position, P2.position, P3.position, t);
        //transform.rotation = Quaternion.LookRotation(Bezier.GetFirstDerivative(P0.position, P1.position, P2.position, P3.position, t));
    }


    private void OnDrawGizmos() 
    {
        int sigmentsNumber = 20;
        Vector3 preveousePoint = P0.position;

        for (int i = 0; i < sigmentsNumber + 1; i++) {
            float paremeter = (float)i / sigmentsNumber;
            Vector3 point = Bezier.GetPoint(P0.position, P1.position, P2.position, P3.position, paremeter);
            Gizmos.DrawLine(preveousePoint, point);
            preveousePoint = point;
        }

    }

}
using System.Collections;
using UnityEngine;

public class BlockFinal : MonoBehaviour
{
    public Villager villager;
    public int UpgradeLevel = 0;

    private void Start()
    {
        if (PlayerPrefs.HasKey(""blockFinal""))
        {
            EnchantItem e = transform.GetComponent<EnchantItem>();
            for (int i = 0; i < PlayerPrefs.GetInt(""blockFinal"") / 10; i++)
            {
                UpgradeLevel += 10; 

                e.Level.text = UpgradeLevel.ToString();
                int nCost = (int)(e.CurrentCost() * 1.5f);
                e.CostLabel.text = nCost.ToString();
            }
            e.SetUpgradeColor();
        }
        else
            PlayerPrefs.SetInt(""blockFinal"", UpgradeLevel);
        StartCoroutine(AutoSave());
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""blockFinal"", UpgradeLevel);
        }
    }

    public void Upgrade()
    {
        EnchantItem e = transform.GetComponent<EnchantItem>();

        if (e.CurrentCost() <= e.CurrentEmeralds())
        {
            UpgradeLevel += 10;

            e.Level.text = UpgradeLevel.ToString();
            e.Emeralds.text = (e.CurrentEmeralds() - e.CurrentCost()).ToString();
            int nCost = (int)(e.CurrentCost() * 1.5f);
            e.CostLabel.text = nCost.ToString();

            e.SetUpgradeColor();
            villager.UpdateAllUpgrades();
        }
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class BlockScript : MonoBehaviour
{
    public float ScaleSpeed = 10;

    public new ParticleSystem particleSystem;
    public Sprite[] destroyBlockImages;
    public static Sprite[] _destroyBlockImages;
    public AudioClip xpSound;

    public AudioClip WoodDestroySound;
    public AudioClip StoneDestroySound;
    public AudioClip DirtDestroySound;
    public AudioClip SandDestroySound;
    public AudioClip GrassDestroySound;
    public AudioClip GravelDestroySound;

    public GameObject experienceBallPrefab;
    public Sprite[] experienceBallImages;
    public int experienceBallCount = 10;
    public Transform experienceBallTargetPoint;

    private Vector3 originalScale, targetScale;
    private bool isClicked = false;
    private Transform BlockBase;
    public static Transform BlockDest;

    public AudioSource BlockAudioSource;
    public AudioSource XpAudioSource;

    public int[] ClicksInLevel;
    public static int[] _ClicksInLevel;

    public XpOrb XpOrb;
    public Animations animations;


    public DestrSpeed destrSpeed;
    public BlockFinal blockFinal;

    private void Start()
    {
        transform.LeanMoveLocalY(70, 1f).setEaseInOutSine().setLoopPingPong();

        BlockBase = transform.Find(""BlockBase"");
        BlockDest = transform.Find(""BlockDest"");
        originalScale = BlockBase.localScale;
        targetScale = originalScale;
        ClicksInLevel = new int[50];
        ClicksInLevel[Levels.CurrentLvl] = 0;
        _destroyBlockImages = destroyBlockImages;
        _ClicksInLevel = ClicksInLevel;
    }

    private void doClick()
    {
        Levels.AddBlocks();
        if (ClicksInLevel[Levels.CurrentLvl] == destroyBlockImages.Length - 1 || destrSpeed.UpgradeLevel == 9)
            Levels.AddBlocks(9 + blockFinal.UpgradeLevel);
    }

    private void SpawnExperienceBalls()
    {
        for (int i = 0; i < experienceBallCount; i++)
        {
            Vector3 randomSpawnOffset = new Vector3(Random.Range(-2f, 2f), Random.Range(-2f, 2f), 0);         
            Vector3 ballPosition = transform.position + randomSpawnOffset;
            GameObject experienceBall = Instantiate(experienceBallPrefab, new Vector2(transform.position.x, transform.position.y), Quaternion.identity);

            StartCoroutine(MoveOut(experienceBall.transform, ballPosition, 0.4f));
            experienceBall.transform.SetParent(transform);
            experienceBall.GetComponent<Image>().sprite = experienceBallImages[Random.Range(0, experienceBallImages.Length)];
            StartCoroutine(MoveToTargetDelayed(experienceBall.transform, 0.5f, 0.4f));
        }
        StartCoroutine(AddXpPoint(0.4f, experienceBallCount, 0.6f));
    }

    IEnumerator MoveOut(Transform objectToMove, Vector3 targetPos, float speed)
    {
        objectToMove.LeanMove(targetPos, speed).setEaseOutQuart();
        yield return null;
    }

    IEnumerator MoveToTargetDelayed(Transform objectToMove, float speed, float delayTime)
    {
        yield return new WaitForSeconds(delayTime);
        objectToMove.LeanMove(experienceBallTargetPoint.position, speed).setEaseInCubic();

        yield return new WaitForSeconds(speed);
        Destroy(objectToMove.gameObject);
    }

    IEnumerator AddXpPoint(float time, int Points, float delayTime)
    {
        XpAudioSource.PlayOneShot(xpSound);
        yield return new WaitForSeconds(delayTime);
        for (int i = 0; i < Points; i++)
        {
            OnTargetReached();
            yield return new WaitForSeconds(time / Points);
        }
    }

    public void OnTargetReached()
    {
        if (Levels.CurrentLvl == Levels.ReachedLevel)
        {
            Levels.xpScr.value += 1;
            Levels.xpValue.GetComponent<Text>().text = $""{Levels.xpScr.value} / {Levels._XpToNextLevel[Levels.ReachedLevel]}"";
            Levels.ReachedXP += 1;
        }
    }
    private bool[] added = new bool[50];

    private void Update()
    {
        if (Input.GetMouseButtonDown(0))
        {
            if (!IsMouseOverUI())
            {
                isClicked = true;
                targetScale = originalScale * 0.9f;
                doClick();
                if (!added[Levels.CurrentLvl])
                {
                    ClicksInLevel[Levels.CurrentLvl] += destrSpeed.UpgradeLevel;
                    added[Levels.CurrentLvl] = true;
                }
                ClicksInLevel[Levels.CurrentLvl] += 1;

                var emission = particleSystem.emission;
                emission.rateOverTime = 14;

                if (ClicksInLevel[Levels.CurrentLvl] == destroyBlockImages.Length)
                {
                    if (Levels.LevelName().Contains(""wood""))
                        BlockAudioSource.PlayOneShot(WoodDestroySound);
                    if (Levels.LevelName().Contains(""dirt""))
                        BlockAudioSource.PlayOneShot(DirtDestroySound);
                    if (Levels.LevelName().Contains(""ore""))
                        BlockAudioSource.PlayOneShot(StoneDestroySound);
                    if (Levels.LevelName().Contains(""sand""))
                        BlockAudioSource.PlayOneShot(SandDestroySound);
                    if (Levels.LevelName().Contains(""gravel""))
                        BlockAudioSource.PlayOneShot(GravelDestroySound);
                    if (Levels.LevelName().Contains(""grass""))
                        BlockAudioSource.PlayOneShot(GrassDestroySound);
                    

                    if (!(Levels.CurrentLvl < Levels.ReachedLevel))
                    {
                        if(XpOrb.XpOrbsEnabled)
                        {
                            SpawnExperienceBalls();
                        }
                        else
                        {
                            StartCoroutine(AddXpPoint(0.4f, experienceBallCount, 0.0f));
                        }
                    }

                    ClicksInLevel[Levels.CurrentLvl] = 0;
                    added[Levels.CurrentLvl] = false;
                    BlockDest.GetComponent<Image>().sprite = destroyBlockImages[0];
                    emission.rateOverTime = 125;

                    MonoBehaviour monoBehaviour = this;
                    Levels.ScaleValueText(monoBehaviour, 1.3f);
                }
                else
                    BlockDest.GetComponent<Image>().sprite = destroyBlockImages[ClicksInLevel[Levels.CurrentLvl]];

                particleSystem.Play();
            }
        }

        if (Input.GetMouseButtonUp(0))
        {
            isClicked = false;
            targetScale = originalScale;
        }

        if (animations.AnimationsEnabled)
        {
            if (isClicked)
            {
                BlockBase.localScale = Vector3.Lerp(BlockBase.localScale, targetScale, Time.deltaTime * ScaleSpeed);
                BlockDest.localScale = Vector3.Lerp(BlockDest.localScale, targetScale, Time.deltaTime * ScaleSpeed);
            }
            else
            {
                BlockBase.localScale = Vector3.Lerp(BlockBase.localScale, targetScale, Time.deltaTime * ScaleSpeed);
                BlockDest.localScale = Vector3.Lerp(BlockDest.localScale, targetScale, Time.deltaTime * ScaleSpeed);
            }
        }
    }

    private bool IsMouseOverUI()
    {
        return EventSystem.current.IsPointerOverGameObject();
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using YG;

public class ChangeLanguage : MonoBehaviour
{
    public Text StateLabel;
    private int num = 0;
    public Language language;
    public UpgradeItems upgradeItems;

    public void Init()
    {
        if (PlayerPrefs.HasKey(""lang""))
        {
            num = PlayerPrefs.GetInt(""lang"");
            num--;
            SwitchLanguage();
        }
        else
        {
            if (YandexGame.EnvironmentData.language == ""ru"")
                Language.ChangeLang(""ru"");

            if (YandexGame.EnvironmentData.language == ""en"")
                Language.ChangeLang(""en"");

            if (YandexGame.EnvironmentData.language == ""tr"")
                Language.ChangeLang(""tr"");

            if (YandexGame.EnvironmentData.language == ""de"")
                Language.ChangeLang(""de"");

            if (YandexGame.EnvironmentData.language == ""es"")
                Language.ChangeLang(""es"");
        }
        language.ChangeAllNames();
        upgradeItems.ChangeNames();
        StartCoroutine(AutoSave());
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""lang"", num);
        }
    }

    public void SwitchLanguage()
    {
        num++;
        if (num == 5)
            num = 0;
        switch (num)
        {
            case 0:
                StateLabel.text = ""Русский"";
                Language.ChangeLang(""ru"");
                break;
            case 1:
                StateLabel.text = ""English"";
                Language.ChangeLang(""en"");
                break;
            case 2:
                StateLabel.text = ""Türkçe"";
                Language.ChangeLang(""tr"");
                break;
            case 3:
                StateLabel.text = ""Deutsch"";
                Language.ChangeLang(""de"");
                break;
            case 4:
                StateLabel.text = ""Español"";
                Language.ChangeLang(""es"");
                break;
        }
        language.ChangeAllNames();
        upgradeItems.ChangeNames();
    }
}
using UnityEngine;
using UnityEngine.UI;

public class ChangeLevel : MonoBehaviour
{
    public bool isNextSide;
    public AudioSource AudioSource;
    public AudioClip ClickSound;

    private CanvasGroup CanvasGroup;

    public void Start()
    {
        CanvasGroup = transform.GetComponent<CanvasGroup>();
    }

    public void Update()
    {
        if (isNextSide)
        {
            if (Levels.CurrentLvl == Levels.ReachedLevel)
                CanvasGroup.alpha = 0.45f;
            else
                CanvasGroup.alpha = 1;
        }
        else
        {
            if (Levels.CurrentLvl == 0)
                CanvasGroup.alpha = 0.45f;
            else
                CanvasGroup.alpha = 1;
        }
    }

    public void SwitchLevel()
    {
        if (isNextSide == true)
        {
            if (Levels.CurrentLvl < Levels.ReachedLevel)
            {
                AudioSource.PlayOneShot(ClickSound);
                Levels.CurrentLvl++;
            }
        }
        else
        {
            if (Levels.CurrentLvl != 0)
            {
                AudioSource.PlayOneShot(ClickSound);
                Levels.CurrentLvl--;
            }
        }
        BlockScript.BlockDest.GetComponent<Image>().sprite = BlockScript._destroyBlockImages[BlockScript._ClicksInLevel[Levels.CurrentLvl]];
    }
}
using UnityEngine;
using UnityEngine.UI;

public class ContainerAutoSize : MonoBehaviour
{
    public RectTransform Canvas;
    private RectTransform rt;
    private GridLayoutGroup grid;
    private bool c;

    private void Start()
    {
        grid = transform.GetComponent<GridLayoutGroup>();
        rt = transform.GetComponent<RectTransform>();
        c = Canvas != null;
        UpdateHeight();
        UpdateWidth();
        rt.localPosition = new Vector2(rt.localPosition.x, -(rt.childCount * (grid.cellSize.y + grid.spacing.y) / 2));


    }

    private void Update()
    {
        UpdateWidth();
    }

    public void UpdateWidth()
    {
        if (c && gameObject.activeSelf)
            grid.cellSize = new Vector2(Canvas.sizeDelta.x - 175, grid.cellSize.y);
    }


    private void UpdateHeight()
    {
        float height = rt.childCount * (grid.cellSize.y + grid.spacing.y);
        rt.sizeDelta = new Vector2(rt.sizeDelta.x, height);
    }
}
using System.Collections;
using UnityEngine;

public class CostPlus : MonoBehaviour
{
    public Levels levels;
    public Villager villager;
    public int UpgradeLevel = 0;

    private void Start()
    {
        if (PlayerPrefs.HasKey(""costPlus""))
        {
            EnchantItem e = transform.GetComponent<EnchantItem>();
            for (int lvl = 0; lvl < PlayerPrefs.GetInt(""costPlus""); lvl++)
            {
                UpgradeLevel++;

                e.Level.text = UpgradeLevel.ToString();
                int nCost = (int)(e.CurrentCost() * 1.5f);
                e.CostLabel.text = nCost.ToString(); 
                
                for (int i = 0; i < Levels.EmeraldsPerLevel.Length; i++)
                {
                    Levels.EmeraldsPerLevel[i] -= (UpgradeLevel - 1) * 5;
                    Levels.EmeraldsPerLevel[i] += UpgradeLevel * 5;
                }
            }
            e.SetUpgradeColor();
        }
        else
            PlayerPrefs.SetInt(""costPlus"", UpgradeLevel);
        levels.EmeraldsChangeResult.text = Levels.EmeraldsPerLevel[Levels.CurrentLvl].ToString();
        StartCoroutine(AutoSave());
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""costPlus"", UpgradeLevel);
        }
    }

    public void Upgrade()
    {
        EnchantItem e = transform.GetComponent<EnchantItem>();

        if (e.CurrentCost() <= e.CurrentEmeralds())
        {
            UpgradeLevel ++;

            e.Level.text = UpgradeLevel.ToString();
            e.Emeralds.text = (e.CurrentEmeralds() - e.CurrentCost()).ToString();
            int nCost = (int)(e.CurrentCost() * 1.5f);
            e.CostLabel.text = nCost.ToString();

            e.SetUpgradeColor();
            villager.UpdateAllUpgrades();

            for (int i = 0; i < Levels.EmeraldsPerLevel.Length; i++)
            {
                Levels.EmeraldsPerLevel[i] -= (UpgradeLevel - 1) * 5;
                Levels.EmeraldsPerLevel[i] += UpgradeLevel * 5;
            }
        }
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class DayNightCycle : MonoBehaviour
{
    public Color dayColor, nightColor;
    public GameObject celestial, starSpawnParent, cloudPrefab, cloudContainer, Nether, End;
    public Sprite SunSprite, SunShade, LunarSprite, LunarShade;
    public SpriteRenderer starPrefab;
    public Sprite[] starSprites;
    public float cycleDuration = 5.0f, t = 0, shadePulsateSpeed = 2.0f, shadeMinAlpha = 0.3f, shadeMaxAlpha = 1.0f, cloudSpawnInterval = 5.0f, cloudSpeed = 1.0f, cloudDestroyX = -10.0f;
    public int numberOfStars = 20;

    private Collider2D containerCollider;
    private Camera mainCamera;
    private Color targetColor;
    private SpriteRenderer CShade, CBase;
    private bool isDay = true, increasingAlpha = true, Wait = false;
    private float tMove = 0, tP = 0;
    private int Stage = 0;

    public void ResetBools()
    {
        t = 0;
        tMove = 0;
        tP = 0;
        Stage = 0;
        isDay = true;
        increasingAlpha = true;
        Wait = false;
        enabled = true;
    }

    private void Start()
    {
        mainCamera = Camera.main;
        mainCamera.backgroundColor = dayColor;
        CShade = celestial.transform.Find(""CelestialShade"").GetComponent<SpriteRenderer>();
        CBase = celestial.transform.Find(""CelestialBase"").GetComponent<SpriteRenderer>();
        targetColor = CShade.color;

        foreach (SpriteRenderer star in starSpawnParent.GetComponentsInChildren<SpriteRenderer>())
        {
            if (starSprites.Length > 0)
            {
                int randomSpriteIndex = Random.Range(0, starSprites.Length);
                star.sprite = starSprites[randomSpriteIndex];
            }
        }

        if (starSpawnParent == null)
            return;

        RectTransform parentRectTransform = starSpawnParent.GetComponent<RectTransform>();

        for (int i = 0; i < numberOfStars; i++)
        {
            SpriteRenderer star = Instantiate(starPrefab, starSpawnParent.transform);

            float randomX = Random.Range(-parentRectTransform.rect.size.y / 2, parentRectTransform.rect.size.y / 2);
            float randomY = Random.Range(-parentRectTransform.rect.size.y, parentRectTransform.rect.size.y);

            star.transform.localPosition = new Vector3(randomX, randomY, 0);

            if (starSprites.Length > 0)
            {
                int randomSpriteIndex = Random.Range(0, starSprites.Length);
                star.sprite = starSprites[randomSpriteIndex];
            }
        }

        containerCollider = cloudContainer.GetComponent<Collider2D>();
        if (containerCollider == null)
        {
            Debug.LogError(""Collider2D null"");
            return;
        }

        LeanTween.rotateAroundLocal(End, Vector3.forward, -360f, 24f).setRepeat(-1);
    }

    private IEnumerator SpawnCloud()
    {
        if (containerCollider == null)
        {
            yield break;
        }

        Bounds containerBounds = containerCollider.bounds;

        while (true)
        {
            GameObject cloud = Instantiate(cloudPrefab, cloudContainer.transform);

            Rigidbody2D rb = cloud.GetComponent<Rigidbody2D>();
            rb.velocity = Vector2.left * cloudSpeed;

            Vector3 cloudPosition = cloud.transform.position;
            cloudPosition.x = 5;
            cloudPosition.y = Random.Range(containerBounds.min.y, containerBounds.max.y / 6);
            cloud.transform.position = cloudPosition;

            yield return new WaitForSeconds(cloudSpawnInterval);
        }
    }

    private void SetStarsAlpha(float alpha)
    {
        int stars = starSpawnParent.transform.childCount;
        for (int i = stars - 1; i > 0; i--)
        {
            starSpawnParent.transform.GetChild(i).gameObject.SetActive(true);
        }

        foreach (SpriteRenderer star in starSpawnParent.GetComponentsInChildren<SpriteRenderer>())
        {
            Color starColor = star.color;
            starColor.a = alpha;
            star.color = starColor;
        }
    }

    private void Update()
    {
        t += Time.deltaTime;
        tMove += Time.deltaTime;
        tP += Time.deltaTime;

        float tNormalized = Mathf.Clamp01(t / cycleDuration);
        float tMovement = (tMove / cycleDuration) / 2;
        float tParts = (tP / cycleDuration) * 2;

        CBase.sprite = !isDay ? SunSprite : LunarSprite;
        CShade.sprite = !isDay ? SunShade : LunarShade;

        if (!Wait)
        {
            if (isDay)
            {
                mainCamera.backgroundColor = Color.Lerp(dayColor, nightColor, tNormalized);
                SetStarsAlpha(Mathf.Lerp(0, 1, tParts));
            }
            else
            {
                mainCamera.backgroundColor = Color.Lerp(nightColor, dayColor, tNormalized);
                SetStarsAlpha(Mathf.Lerp(1, 0, tParts));
            }
        }


        if (tMovement <= 1)
            celestial.GetComponent<BezierMovement>().t = tMovement;

        if (t >= cycleDuration)
        {
            tP = 0;
            t = 0;
            Wait = true;
            Stage++;

            if (Stage == 2)
            {
                if (isDay)
                {
                    StartCoroutine(SpawnCloud());
                }
                else
                {
                    StopAllCoroutines();
                }
                
                Stage = 0;
                isDay = !isDay;
                Wait = false;
            }
        }

        if (tMove >= cycleDuration * 2)
            tMove = 0;

        float alpha = CShade.color.a;

        if (increasingAlpha)
        {
            alpha += shadePulsateSpeed * Time.deltaTime;
            if (alpha >= shadeMaxAlpha)
            {
                alpha = shadeMaxAlpha;
                increasingAlpha = false;
            }
        }
        else
        {
            alpha -= shadePulsateSpeed * Time.deltaTime;
            if (alpha <= shadeMinAlpha)
            {
                alpha = shadeMinAlpha;
                increasingAlpha = true;
            }
        }

        targetColor.a = alpha;
        CShade.color = targetColor;

        GameObject[] clouds = GameObject.FindGameObjectsWithTag(""Cloud"");
        foreach (var cloud in clouds)
        {
            if (cloud.transform.position.x < cloudDestroyX)
            {
                Destroy(cloud);
            }
        }

        if (Levels.CurrentLvl >= 26)
            Nether.SetActive(true);
        else
            Nether.SetActive(false);

        if (Levels.CurrentLvl >= 32)
            End.SetActive(true);
        else
            End.SetActive(false);
    }
}using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class DeleteAllPlayerPrefs : MonoBehaviour
{
    public Text ButtonDeleteText;
    public Text EmeraldsLabel;
    public void ShowMessage()
    {
        ButtonDeleteText.text = $""{Language.lang_continue} (10)"";
        StartCoroutine(StartTimer());

        ButtonDeleteText.gameObject.GetComponentInParent<Button>().enabled = false;
        gameObject.GetComponent<CanvasGroup>().alpha = 1;
        gameObject.GetComponent<CanvasGroup>().blocksRaycasts = true;
    }

    public void DeletePlayerPrefs()
    {
        EmeraldsLabel.text = ""0"";
        PlayerPrefs.DeleteAll();
        PlayerPrefs.Save();
    }

    public void CloseMessage()
    {
        StopAllCoroutines();

        gameObject.GetComponent<CanvasGroup>().alpha = 0;
        gameObject.GetComponent<CanvasGroup>().blocksRaycasts = false;
    }

    private IEnumerator StartTimer()
    {
        int i = 9;
        while (i > -1)
        {
            yield return new WaitForSeconds(1f);
            ButtonDeleteText.text = $""{Language.lang_continue} ({i})"";
            i--;
        }
        ButtonDeleteText.gameObject.GetComponentInParent<Button>().enabled = true;
        ButtonDeleteText.text = $""{Language.lang_continue}"";
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DestroyTraining : MonoBehaviour
{
    public ParticleSystem particleSystem;

    private void Start()
    {
        if (PlayerPrefs.GetInt(""TrainingShowed"") == 0)
        {
            PlayerPrefs.SetInt(""TrainingShowed"", 1);
            transform.GetComponent<CanvasGroup>().alpha = 1;
        }
        else
        {
            particleSystem.GetComponent<Renderer>().enabled = true;
            DestroyTrainingMessage();
        }
    }

    public void DestroyTrainingMessage()
    {
        Destroy(gameObject); 
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class DestrSpeed : MonoBehaviour
{
    public Villager villager;
    public int UpgradeLevel = 0;
    public BlockScript blockScript;

    private void Start()
    {
        if (PlayerPrefs.HasKey(""destrSpeed""))
        {
            EnchantItem e = transform.GetComponent<EnchantItem>();
            for (int i = 0; i < PlayerPrefs.GetInt(""destrSpeed""); i++)
            {
                if (UpgradeLevel > 7)
                {
                    UpgradeLevel++;

                    e.CostLabel.text = ""---"";
                    e.Level.text = ""9"";
                    transform.GetComponentInChildren<Button>().enabled = false;
                }
                else
                {
                    UpgradeLevel++;

                    e.Level.text = UpgradeLevel.ToString();
                    int nCost = (int)(e.CurrentCost() * 1.5f);
                    e.CostLabel.text = nCost.ToString();
                }
            }
            e.SetUpgradeColor();
        }
        else
            PlayerPrefs.SetInt(""destrSpeed"", UpgradeLevel);
        StartCoroutine(AutoSave());
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""destrSpeed"", UpgradeLevel);
        }
    }

    public void Upgrade()
    {
        EnchantItem e = transform.GetComponent<EnchantItem>();

        if (e.CurrentCost() <= e.CurrentEmeralds())
        {
            if (UpgradeLevel > 7)
            {
                UpgradeLevel++;
                e.CostLabel.text = ""---"";
                e.Level.text = ""9"";
                transform.GetComponentInChildren<Button>().enabled = false;

                e.SetUpgradeColor();
                villager.UpdateAllUpgrades();
            }
            else
            {
                UpgradeLevel++;

                e.Level.text = UpgradeLevel.ToString();
                e.Emeralds.text = (e.CurrentEmeralds() - e.CurrentCost()).ToString();
                int nCost = (int)(e.CurrentCost() * 1.5f);
                e.CostLabel.text = nCost.ToString();

                e.SetUpgradeColor();
                villager.UpdateAllUpgrades();
            }
        }
    }
}
using System.Collections;
using UnityEngine;

public class Effectiveness : MonoBehaviour
{
    public Villager villager;
    public int UpgradeLevel = 0;

    private void Start()
    {
        if (PlayerPrefs.HasKey(""effectiveness""))
        {
            EnchantItem e = transform.GetComponent<EnchantItem>();
            for (int i = 0; i < PlayerPrefs.GetInt(""effectiveness""); i++)
            {
                UpgradeLevel++;

                e.Level.text = UpgradeLevel.ToString();
                int nCost = (int)(e.CurrentCost() * 1.5f);
                e.CostLabel.text = nCost.ToString();
            }
            e.SetUpgradeColor();
        }
        else
            PlayerPrefs.SetInt(""effectiveness"", UpgradeLevel);
        StartCoroutine(AutoSave());
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""effectiveness"", UpgradeLevel);
        }
    }

    public void Upgrade()
    {
        EnchantItem e = transform.GetComponent<EnchantItem>();

        if (e.CurrentCost() <= e.CurrentEmeralds())
        {
            UpgradeLevel++;

            e.Level.text = UpgradeLevel.ToString();
            e.Emeralds.text = (e.CurrentEmeralds() - e.CurrentCost()).ToString();
            int nCost = (int)(e.CurrentCost() * 1.5f);
            e.CostLabel.text = nCost.ToString();
            
            e.SetUpgradeColor();
            villager.UpdateAllUpgrades();
        }
    }
}
using UnityEngine;
using UnityEngine.UI;

public class EnchantItem : MonoBehaviour
{
    public Text Emeralds;
    public Text CostLabel;
    public Text Level;

    public int CurrentCost()
    {
        if (CostLabel.text != ""---"")
            return int.Parse(CostLabel.text);
        else 
            return 0;
    }

    public int CurrentEmeralds()
    {
        int currentEmeralds = int.Parse(Emeralds.text);
        return currentEmeralds;
    }

    private void Start()
    {
        SetUpgradeColor();
    }

    public void SetUpgradeColor()
    {
        GameObject ItemBase = transform.Find(""Item"").gameObject;

        Color redC = new(1f, 0.8f, 0.8f);
        Color greenC = new(0.8f, 1f, 0.8f);

        if (CurrentCost() > CurrentEmeralds())
        {
            ItemBase.GetComponent<Image>().color = redC;
        }
        if (CurrentCost() <= CurrentEmeralds())
        {
            ItemBase.GetComponent<Image>().color = greenC;
        }
    }
}
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnchantTable : MonoBehaviour
{
    public Transform book;

    void Start()
    {
        book.LeanMoveLocalY(31, 0.8f).setEaseInOutSine().setLoopPingPong();
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class EndScene : MonoBehaviour
{
    public ParticleSystem particleSystem;
    public Text ButtonText;
    public bool Showed;

    public void Message(bool s)
    {
        if (!Showed)
        {
            ButtonText.gameObject.GetComponentInParent<Button>().enabled = false;
            StartCoroutine(StartTimer());
            Showed = true;
            ButtonText.text = $""{Language.lang_continue} (10)"";
        }
        gameObject.GetComponent<CanvasGroup>().alpha = s ? 1 : 0;
        gameObject.GetComponent<CanvasGroup>().blocksRaycasts = s;
        particleSystem.GetComponent<Renderer>().sortingOrder = s ? -1 : 1;
    }

    private IEnumerator StartTimer()
    {
        if(Showed)
            yield break;
        int i = 9;
        while (i > -1)
        {
            yield return new WaitForSeconds(1f);
            ButtonText.text = $""{Language.lang_continue} ({i})"";
            i--;
        }
        ButtonText.gameObject.GetComponentInParent<Button>().enabled = true;
        ButtonText.text = $""{Language.lang_continue}"";
    }
}
using UnityEngine;
using UnityEngine.UI;

public class Language: MonoBehaviour
{
    public UpgradeItems _upgradeItems;
    public static UpgradeItems upgradeItems;
    public Levels _levels;
    public static Levels levels;

    public Text enchant;
    public Text upgrades;
    public Text settings;
    public Text inventory;
    public Text blocks;
    public Text villager;
    public Text emeralds;
    public Text change;
    public Text changeAll;
    public Text[] close;
    public Text[] _continue;
    public Text axes;
    public Text picks;
    public Text shovels;
    public Text lang;
    public Text sounds;
    public Text anims;
    public Text particles;
    public Text xpOrbs;
    public Text background;
    public Text reset;
    public Text attention;
    public Text resetDescriptoin;
    public Text[] toogle;
    public Text effectiveness;
    public Text autoClick;
    public Text blockFinal;
    public Text costPlus;
    public Text destroySpeed;
    public Text x3bonus;
    public Text ad;
    public Text congratulate;
    public Text congratulateHeader;
    public Text congratulateMain;
    public Text hello;
    public Text trainingHeader;
    public Text trainingMain;
    public Text sure;
    public Text no;
    public Text training;
    public Text training0;
    public Text nextlevel;
    public Text open;

    public static string 
    lang_level, 
    lang_enchant,
    lang_upgrades,
    lang_settings,
    lang_inventory,
    lang_blocks,
    lang_villager,
    lang_emeralds,
    lang_change,
    lang_changeAll,
    lang_close,
    lang_continue,
    lang_axes,
    lang_picks,
    lang_shovels,
    lang_lang,
    lang_sounds,
    lang_anims,
    lang_particles,
    lang_xpOrbs,
    lang_background,
    lang_reset,
    lang_attention,
    lang_resetDescriptoin,
    lang_on,
    lang_off,
    lang_effectiveness,
    lang_autoClick,
    lang_blockFinal,
    lang_costPlus,
    lang_destroySpeed,
    lang_x3bonus,
    lang_ad,
    lang_congratulate,
    lang_congratulateHeader,
    lang_congratulateMain,
    lang_hello,
    lang_trainingHeader,
    lang_trainingMain,
    lang_sure,
    lang_no,
    lang_training,
    lang_training0,
    lang_training1,
    lang_training2,
    lang_training3,
    lang_training4,
    lang_training5,
    lang_training6,
    lang_nextlevel,
    lang_open;

    public void ChangeAllNames()
    {
        enchant.text = lang_enchant;
        upgrades.text = lang_upgrades;
        settings.text = lang_settings;
        inventory.text = lang_inventory;
        blocks.text = lang_blocks;
        villager.text = lang_villager;
        emeralds.text = lang_emeralds;
        change.text = lang_change;
        changeAll.text = lang_changeAll;
        axes.text = lang_axes;
        picks.text = lang_picks;
        shovels.text = lang_shovels;
        lang.text = lang_lang;
        sounds.text = lang_sounds;
        anims.text = lang_anims;
        particles.text = lang_particles;
        xpOrbs.text = lang_xpOrbs;
        background.text = lang_background;
        reset.text = lang_reset;
        attention.text = lang_attention;
        resetDescriptoin.text = lang_resetDescriptoin;
        effectiveness.text = lang_effectiveness;
        autoClick.text = lang_autoClick;
        blockFinal.text = lang_blockFinal;
        costPlus.text = lang_costPlus;
        destroySpeed.text = lang_destroySpeed;
        x3bonus.text = lang_x3bonus;
        ad.text = lang_ad;
        congratulate.text = lang_congratulate;
        congratulateHeader.text = lang_congratulateHeader;
        congratulateMain.text = lang_congratulateMain;

        if (hello != null) hello.text = lang_hello;
        if (trainingHeader != null) trainingHeader.text = lang_trainingHeader;
        if (trainingMain != null) trainingMain.text = lang_trainingMain;
        if (sure != null) sure.text = lang_sure;
        if (no != null) no.text = lang_no;
        if (training != null) training.text = lang_training;
        if (training0 != null) training0.text = lang_training0;

        nextlevel.text = lang_nextlevel;
        open.text = lang_open;

        for (int i = 0; i < toogle.Length; i++)
        {
            if (toogle[i].text is ""Вкл."" or ""On"" or ""Açık"" or ""An"" or ""Encendido"")
                toogle[i].text = lang_off;
            else
                toogle[i].text = lang_on;
        }

        for (int i = 0; i < close.Length; i++)
        {
            if (close[i] != null) 
                close[i].text = lang_close;
        }

        for (int i = 0; i < _continue.Length; i++)
        {
            if (_continue[i] != null)
                _continue[i].text = lang_continue;
        }
    }

    private void Start()
    {
        upgradeItems = _upgradeItems;
        levels = _levels;
        ChangeAllNames();
    }

    public static void ChangeLang(string lang)
    {
        if (lang == ""ru"")
        {
            lang_level = ""Уровень "";
            lang_enchant = ""Зачарования"";
            lang_upgrades = ""Улучшения"";
            lang_settings = ""Настройки"";
            lang_inventory = ""Инвентарь"";
            lang_blocks = ""Блоки"";
            lang_villager = ""Торговец"";
            lang_emeralds = ""Изумруды: "";
            lang_change = ""Обменять"";
            lang_changeAll = ""Обменять всё"";
            lang_close = ""Закрыть"";
            lang_continue = ""Продоложить"";
            lang_axes = ""Топоры"";
            lang_picks = ""Кирки"";
            lang_shovels = ""Лопаты"";
            lang_lang = ""Язык"";
            lang_sounds = ""Звуки в игре"";
            lang_anims = ""Анимации"";
            lang_particles = ""Частицы блоков"";
            lang_xpOrbs = ""Сферы опыта"";
            lang_background = ""Фон"";
            lang_reset = ""Сброс игрового прогресса"";
            lang_attention = ""ВНИМАНИЕ!"";
            lang_resetDescriptoin = ""Вы действительно хотите удалить весь игровой прогресс, включая количество накопленных изумрудов, открытые уровни, опыт, улучшенные инструменты и зачарования?\r\n\r\nВосстановить игровой прогресс будет невозможно."";
            lang_on = ""Вкл."";
            lang_off = ""Выкл."";
            lang_effectiveness = ""Эффективность инструментов  <color=\""cyan\"">+1</color>"";
            lang_autoClick = ""Автокликер для блока  <color=\""cyan\"">+1/сек</color>"";
            lang_blockFinal = ""Блоки за разрушение  <color=\""cyan\"">+10</color>"";
            lang_costPlus = ""Стоимость блоков  при обмене  <color=\""cyan\"">+5</color>"";
            lang_destroySpeed = ""Скорость разрушения  <color=\""cyan\"">+1</color>"";
            lang_x3bonus = ""Эффективность  <color=\""cyan\"">x3</color> на 30 секунд"";
            lang_ad = ""Реклама через "";
            lang_congratulate = ""Поздравляем!"";
            lang_congratulateHeader = ""Вы дошли до конца игры!"";
            lang_congratulateMain = ""Но это не означает, что Вам остается <color=\""#FF6262\"">сражаться с другими игроками</color> в попытках набрать самое большое количество <color=\""#8BFF73\"">изумрудов</color>, чтобы занять первое место в таблице рейтинга!\r\n\r\nСможете ли Вы показать всем кто тут главный и разрушить последний блок в этой игре? Сломайте <color=\""#F2A8FF\"">Бедрок</color> и поставьте мировой рекорд по кликам в <i>Minecraft Clicker Adventures!</i>"";
            lang_hello = ""Привет!"";
            lang_trainingHeader = ""Хочешь пройти обучение?"";
            lang_trainingMain = ""Расскажем про <color=\""#6DFF5D\"">уровни</color>, покажем для чего нужны <color=\""#00FBFF\"">инструметы</color> и <color=\""#EB7FFF\"">зачарования</color>"";
            lang_sure = ""Конечно"";
            lang_no = ""Нет, это не в моём стиле"";
            lang_training = ""Обучение"";
            lang_training0 = ""Давай же поскорее начнём!"";
            lang_training1 = ""Кликай по <color=\""#FFA043\"">блоку</color>! Всё добытое будет тут"";
            lang_training2 = ""Обменивай <color=\""#FFA043\"">блоки</color> на <color=\""#7FFF42\"">изумруды</color> тут"";
            lang_training3 = ""За <color=\""#7FFF42\"">изумруды</color> улучшай <color=\""#42FFF4\"">инструменты</color> и покупай <color=\""#F481FF\"">чары</color>"";
            lang_training4 = ""Разрушая блок ты получаешь <color=\""#7FFF42\"">опыт</color>, с каждым уровнем блоки дороже, а инструменты лучше"";
            lang_training5 = ""Переключайся между уровнями тут"";
            lang_training6 = ""<color=\""#FCFF75\"">Музыка</color> слева, а <color=\""#FCFF75\"">настройки</color> игры справа. Приятной игры!"";
            lang_nextlevel = ""Новый уровень"";
            lang_open = ""Разблокированы новые инструменты!"";

            Levels._BlockNames = new string[]
            {
                ""Дуб"",
                ""Берёза"",
                ""Булыжник"",
                ""Почва"",
                ""Тёмный дуб"",
                ""Угольная руда"",
                ""Железная руда"",
                ""Дёрн"",
                ""Акация"",
                ""Диорит"",
                ""Медная руда"",
                ""Подзол"",
                ""Мангровое дерево"",
                ""Гранит"",
                ""Золотая руда"",
                ""Мицелий"",
                ""Вишнёвое дерево"",
                ""Песчаник"",
                ""Руда красного камня"",
                ""Песок"",
                ""Красный песок"",
                ""Замшелый булыжник"",
                ""Гравий"",
                ""Лазурит"",
                ""Алмазная руда"",
                ""Обсидиан"",
                ""Багровое дерево"",
                ""Камень Ада"",
                ""Кварцевая руда"",
                ""Искажённое дерево"",
                ""Песок душ"",
                ""Древние обломки"",
                ""Камень Энда"",
                ""Бедрок""
            };
            upgradeItems.AxeUpgradeItemNames = new string[]
            {
                ""Деревянный топор"",
                ""Каменный  топор"",
                ""Железный топор"",
                ""Медный топор"",
                ""Золотой топор"",
                ""Лазуритовый топор"",
                ""Алмазный топор"",
                ""Обсидиановый топор"",
                ""Кварцевый топор"",
                ""Незеритовый топор""
            };
            upgradeItems.PickaxeUpgradeItemNames = new string[]
            {
                ""Деревянная кирка"",
                ""Каменная кирка"",
                ""Железная кирка"",
                ""Медная кирка"",
                ""Золотая кирка"",
                ""Лазуритовая кирка"",
                ""Алмазная кирка"",
                ""Обсидиановая кирка"",
                ""Кварцевая кирка"",
                ""Незеритовая кирка""
            };
            upgradeItems.ShovelUpgradeItemNames = new string[]
            {
                ""Деревянная лопата"",
                ""Каменная лопата"",
                ""Железная лопата"",
                ""Медная лопата"",
                ""Золотая лопата"",
                ""Лазуритовая лопата"",
                ""Алмазная лопата"",
                ""Обсидиановая лопата"",
                ""Кварцевая лопата"",
                ""Незеритовая лопата""
            };
        }
        if (lang == ""en"")
        {
            lang_level = ""Level "";
            lang_enchant = ""Enchantments"";
            lang_upgrades = ""Upgrades"";
            lang_settings = ""Settings"";
            lang_inventory = ""Inventory"";
            lang_blocks = ""Blocks"";
            lang_villager = ""Villager"";
            lang_emeralds = ""Emeralds: "";
            lang_change = ""Exchange"";
            lang_changeAll = ""Exchange All"";
            lang_close = ""Close"";
            lang_continue = ""Continue"";
            lang_axes = ""Axes"";
            lang_picks = ""Picks"";
            lang_shovels = ""Shovels"";
            lang_lang = ""Language"";
            lang_sounds = ""Game Sounds"";
            lang_anims = ""Animations"";
            lang_particles = ""Block Particles"";
            lang_xpOrbs = ""XP Orbs"";
            lang_background = ""Background"";
            lang_reset = ""Reset Game Progress"";
            lang_attention = ""ATTENTION!"";
            lang_resetDescriptoin = ""Are you sure you want to delete all game progress, including the number of accumulated emeralds, unlocked levels, experience, upgraded tools, and enchantments?\r\n\r\nIt will be impossible to restore game progress."";
            lang_on = ""On"";
            lang_off = ""Off"";
            lang_effectiveness = ""Tool Effectiveness  <color=\""cyan\"">+1</color>"";
            lang_autoClick = ""Auto-clicker for Block  <color=\""cyan\"">+1/sec</color>"";
            lang_blockFinal = ""Blocks per Destruction  <color=\""cyan\"">+10</color>"";
            lang_costPlus = ""Block Cost during Exchange  <color=\""cyan\"">+5</color>"";
            lang_destroySpeed = ""Destruction Speed  <color=\""cyan\"">+1</color>"";
            lang_x3bonus = ""Efficiency  <color=\""cyan\"">x3</color> for 30 seconds"";
            lang_ad = ""Advertisement through "";
            lang_congratulate = ""Congratulations!"";
            lang_congratulateHeader = ""You've reached the end of the game!"";
            lang_congratulateMain = ""But that doesn't mean you're done. You still have to <color=\""#FF6262\"">battle with other players</color> to score the most <color=\""#8BFF73\"">emeralds</color> and claim the top spot on the leaderboard!\r\n\r\nCan you show everyone who's the boss and break the last block in this game? Break the <color=\""#F2A8FF\"">Bedrock</color> and set the world record for clicks in <i>Minecraft Clicker Adventures!</i>"";
            lang_hello = ""Hello!"";
            lang_trainingHeader = ""Do you want to undergo training?"";
            lang_trainingMain = ""We'll talk about <color=\""#6DFF5D\"">levels</color>, show you the purpose of <color=\""#00FBFF\"">tools</color>, and <color=\""#EB7FFF\"">enchantments</color>."";
            lang_sure = ""Sure"";
            lang_no = ""No, it's not my style"";
            lang_training = ""Training"";
            lang_training0 = ""Let's get started!"";
            lang_training1 = ""Click on the <color=\""#FFA043\"">block</color>! All the resources will be collected here"";
            lang_training2 = ""Exchange <color=\""#FFA043\"">blocks</color> for <color=\""#7FFF42\"">emeralds</color> here"";
            lang_training3 = ""Use <color=\""#7FFF42\"">emeralds</color> to upgrade <color=\""#42FFF4\"">tools</color> and buy <color=\""#F481FF\"">enchants</color>"";
            lang_training4 = ""Breaking a block earns you <color=\""#7FFF42\"">experience</color>. With each level, blocks become more expensive, and tools become better"";
            lang_training5 = ""Switch between levels here"";
            lang_training6 = ""<color=\""#FCFF75\"">Music</color> on the left, and <color=\""#FCFF75\"">game settings</color> on the right. Enjoy the game!"";
            lang_nextlevel = ""New level"";
            lang_open = ""New tools unlocked!"";

            Levels._BlockNames = new string[]
            {
                ""Oak"",
                ""Birch"",
                ""Cobblestone"",
                ""Dirt"",
                ""Dark Oak"",
                ""Coal Ore"",
                ""Iron Ore"",
                ""Grass Block"",
                ""Acacia"",
                ""Diorite"",
                ""Copper Ore"",
                ""Podzol"",
                ""Mangrove"",
                ""Granite"",
                ""Gold Ore"",
                ""Mycelium"",
                ""Cherry"",
                ""Sandstone"",
                ""Redstone Ore"",
                ""Sand"",
                ""Red Sand"",
                ""Mossy Cobblestone"",
                ""Gravel"",
                ""Lapis Lazuli"",
                ""Diamond Ore"",
                ""Obsidian"",
                ""Crimson"",
                ""Netherite"",
                ""Quartz Ore"",
                ""Twisted"",
                ""Soul Sand"",
                ""Ancient Debris"",
                ""End Stone"",
                ""Bedrock""
            };
            upgradeItems.AxeUpgradeItemNames = new string[]
            {
                ""Wooden Axe"",
                ""Stone Axe"",
                ""Iron Axe"",
                ""Copper Axe"",
                ""Golden Axe"",
                ""Lapis Lazuli Axe"",
                ""Diamond Axe"",
                ""Obsidian Axe"",
                ""Quartz Axe"",
                ""Netherite Axe""
            };
            upgradeItems.PickaxeUpgradeItemNames = new string[]
            {
                ""Wooden Pickaxe"",
                ""Stone Pickaxe"",
                ""Iron Pickaxe"",
                ""Copper Pickaxe"",
                ""Golden Pickaxe"",
                ""Lapis Lazuli Pickaxe"",
                ""Diamond Pickaxe"",
                ""Obsidian Pickaxe"",
                ""Quartz Pickaxe"",
                ""Netherite Pickaxe""
            };
            upgradeItems.ShovelUpgradeItemNames = new string[]
            {
                ""Wooden Shovel"",
                ""Stone Shovel"",
                ""Iron Shovel"",
                ""Copper Shovel"",
                ""Golden Shovel"",
                ""Lapis Lazuli Shovel"",
                ""Diamond Shovel"",
                ""Obsidian Shovel"",
                ""Quartz Shovel"",
                ""Netherite Shovel""
            };
        }
        if (lang == ""tr"")
        {
            lang_level = ""Seviye "";
            lang_enchant = ""Büyüler"";
            lang_upgrades = ""Güncellemeler"";
            lang_settings = ""Ayarlar"";
            lang_inventory = ""Envanter"";
            lang_blocks = ""Bloklar"";
            lang_villager = ""Köylü"";
            lang_emeralds = ""Zümrütler: "";
            lang_change = ""Değiştir"";
            lang_changeAll = ""Hepsini Değiştir"";
            lang_close = ""Kapat"";
            lang_continue = ""Devam Et"";
            lang_axes = ""Baltalar"";
            lang_picks = ""Kazmalar"";
            lang_shovels = ""Kürekler"";
            lang_lang = ""Dil"";
            lang_sounds = ""Oyun Sesleri"";
            lang_anims = ""Animasyonlar"";
            lang_particles = ""Blok Parçacıkları"";
            lang_xpOrbs = ""XP Sferleri"";
            lang_background = ""Arkaplan"";
            lang_reset = ""Oyun İlerlemesini Sıfırla"";
            lang_attention = ""DİKKAT!"";
            lang_resetDescriptoin = ""Tüm oyun ilerlemesini, birikmiş zümrüt sayısını, açılan seviyeleri, deneyimi, yükseltilmiş araçları ve büyüleri içeren her şeyi silmek istediğinizden emin misiniz?\r\n\r\nOyun ilerlemesini geri yüklemek mümkün olmayacaktır."";
            lang_on = ""Açık"";
            lang_off = ""Kapalı"";
            lang_effectiveness = ""Araç Etkinliği  <color=\""cyan\"">+1</color>"";
            lang_autoClick = ""Bloğa Otomatik Tıklama  <color=\""cyan\"">+1/sn</color>"";
            lang_blockFinal = ""Yıkım Başına Blok  <color=\""cyan\"">+10</color>"";
            lang_costPlus = ""Blok Değişiminde Maliyet  <color=\""cyan\"">+5</color>"";
            lang_destroySpeed = ""Yıkım Hızı  <color=\""cyan\"">+1</color>"";
            lang_x3bonus = ""30 saniye boyunca Verimlilik  <color=\""cyan\"">x3</color>"";
            lang_ad = ""Reklam aracılığıyla "";
            lang_congratulate = ""Tebrikler!"";
            lang_congratulateHeader = ""Oyunun sonuna ulaştınız!"";
            lang_congratulateMain = ""Ancak bu, işinizin bittiği anlamına gelmiyor. Hala diğer oyuncularla <color=\""#FF6262\"">savaşmalısınız</color> ve liderlik tablosunda en çok <color=\""#8BFF73\"">zümrüt</color> puanını almalısınız!\r\n\r\nHerkesin kimin lider olduğunu gösterip bu oyundaki son bloğu kırabilir misiniz? <color=\""#F2A8FF\"">Bedrock'u</color> kırın ve <i>Minecraft Clicker Adventures!</i>'daki tıklama rekorunu kırın!"";
            lang_hello = ""Merhaba!"";
            lang_trainingHeader = ""Eğitim almak ister misiniz?"";
            lang_trainingMain = ""<color=\""#6DFF5D\"">Seviyeler</color> hakkında konuşacağız, <color=\""#00FBFF\"">araçların</color> ve <color=\""#EB7FFF\"">büyülerin</color> amacını göstereceğiz."";
            lang_sure = ""Eminim"";
            lang_no = ""Hayır, bu benim tarzım değil"";
            lang_training = ""Eğitim"";
            lang_training0 = ""Hadi başlayalım!"";
            lang_training1 = ""<color=\""#FFA043\"">Bloğa</color> tıklayın! Tüm kaynaklar burada toplanacak"";
            lang_training2 = ""<color=\""#FFA043\"">Blokları</color> burada <color=\""#7FFF42\"">zümrütlerle</color> değiştirin"";
            lang_training3 = ""<color=\""#7FFF42\"">Zümrütler</color> kullanarak <color=\""#42FFF4\"">araçları</color> yükseltin ve <color=\""#F481FF\"">büyüler</color> satın alın"";
            lang_training4 = ""Bir bloğu kırmak size <color=\""#7FFF42\"">deneyim</color> kazandırır. Her seviyede bloklar daha pahalı, araçlar ise daha iyi olur"";
            lang_training5 = ""Seviyeler arasında geçiş yapın"";
            lang_training6 = ""Solda <color=\""#FCFF75\"">Müzik</color>, sağda <color=\""#FCFF75\"">oyun ayarları</color>. İyi oyunlar!"";
            lang_nextlevel = ""Yeni seviye"";
            lang_open = ""Yeni araçlar açıldı!"";

            Levels._BlockNames = new string[]
            {
                ""Meşe Kütügü"",
                ""Huş Kütügü"",
                ""Kirik Taş"",
                ""Toprak"",
                ""Koyu Meşe Kütügü"",
                ""Kömür Cevheri"",
                ""Demir Cevheri"",
                ""Çimenli Toprak"",
                ""Akasya Kütügü"",
                ""Diyorit"",
                ""Bakır Cevheri"",
                ""Podzol"",
                ""Mangrov Kütügü"",
                ""Granit"",
                ""Altın Cevheri"",
                ""Miselyum"",
                ""Kiraz Ağaci Kütügü"",
                ""Kumtaşı"",
                ""Redstone Cevheri"",
                ""Kum"",
                ""Kirmizi Kum"",
                ""Yosunlu Kirik Taş"",
                ""Çakıl"",
                ""Lapis Lazuli Cevheri"",
                ""Elmas Cevheri"",
                ""Obsidyen"",
                ""Kizil Kök"",
                ""Netherrack"",
                ""Nether Kuvarsi Cevheri"",
                ""Çarpık Kök"",
                ""Ruh Kumu"",
                ""Antik Kalıntı"",
                ""End Taşı"",
                ""Katman Kayasi""
            };
            upgradeItems.AxeUpgradeItemNames = new string[]
            {
                ""Ahşap Balta"",
                ""Taş Balta"",
                ""Demir Balta"",
                ""Bakır Balta"",
                ""Altın Balta"",
                ""Lapis Lazuli Balta"",
                ""Elmas Balta"",
                ""Obsidiyen Balta"",
                ""Kuvars Balta"",
                ""Netherite Balta"",
            };
            upgradeItems.PickaxeUpgradeItemNames = new string[]
            {
                ""Ahşap Kazma"",
                ""Taş Kazma"",
                ""Demir Kazma"",
                ""Bakır Kazma"",
                ""Altın Kazma"",
                ""Lapis Lazuli Kazma"",
                ""Elmas Kazma"",
                ""Obsidiyen Kazma"",
                ""Kuvars Kazma"",
                ""Netherite Kazma""
            };
            upgradeItems.ShovelUpgradeItemNames = new string[]
            {
                ""Ahşap Kürek"",
                ""Taş Kürek"",
                ""Demir Kürek"",
                ""Bakır Kürek"",
                ""Altın Kürek"",
                ""Lapis Lazuli Kürek"",
                ""Elmas Kürek"",
                ""Obsidiyen Kürek"",
                ""Kuvars Kürek"",
                ""Netherite Kürek""
            };
        }
        if (lang == ""de"")
        {
            lang_level = ""Ebene "";
            lang_enchant = ""Verzauberungen"";
            lang_upgrades = ""Upgrades"";
            lang_settings = ""Einstellungen"";
            lang_inventory = ""Inventar"";
            lang_blocks = ""Blöcke"";
            lang_villager = ""Dorfbewohner"";
            lang_emeralds = ""Smaragde: "";
            lang_change = ""Austauschen"";
            lang_changeAll = ""Alle austauschen"";
            lang_close = ""Schließen"";
            lang_continue = ""Fortsetzen"";
            lang_axes = ""Äxte"";
            lang_picks = ""Spitzhacken"";
            lang_shovels = ""Schaufeln"";
            lang_lang = ""Sprache"";
            lang_sounds = ""Spielsounds"";
            lang_anims = ""Animationen"";
            lang_particles = ""Blockpartikel"";
            lang_xpOrbs = ""XP-Kugeln"";
            lang_background = ""Hintergrund"";
            lang_reset = ""Spielstand zurücksetzen"";
            lang_attention = ""ACHTUNG!"";
            lang_resetDescriptoin = ""Möchten Sie wirklich alle Spielfortschritte löschen, einschließlich der Anzahl der gesammelten Smaragde, freigeschalteter Level, Erfahrung, aufgerüsteter Werkzeuge und Verzauberungen?\r\n\r\nEs wird unmöglich sein, den Spielfortschritt wiederherzustellen."";
            lang_on = ""An"";
            lang_off = ""Aus"";
            lang_effectiveness = ""Werkzeug Effektivität  <color=\""cyan\"">+1</color>"";
            lang_autoClick = ""Auto-Klicker für Block  <color=\""cyan\"">+1/Sek</color>"";
            lang_blockFinal = ""Blöcke pro Zerstörung  <color=\""cyan\"">+10</color>"";
            lang_costPlus = ""Blockkosten beim Austausch  <color=\""cyan\"">+5</color>"";
            lang_destroySpeed = ""Zerstörungsgeschwindigkeit  <color=\""cyan\"">+1</color>"";
            lang_x3bonus = ""Effizienz  <color=\""cyan\"">x3</color> für 30 Sekunden"";
            lang_ad = ""Werbung durch "";
            lang_congratulate = ""Herzlichen Glückwunsch!"";
            lang_congratulateHeader = ""Du hast das Ende des Spiels erreicht!"";
            lang_congratulateMain = ""Aber das bedeutet nicht, dass du fertig bist. Du musst immer noch <color=\""#FF6262\"">mit anderen Spielern kämpfen</color>, um die meisten <color=\""#8BFF73\"">Smaragde</color> zu erzielen und den Spitzenplatz auf der Bestenliste zu erobern!\r\n\r\nKannst du allen zeigen, wer hier der Boss ist, und den letzten Block in diesem Spiel zerstören? Zerstöre den <color=\""#F2A8FF\"">Bedrock</color> und stelle den Weltrekord für Klicks in <i>Minecraft Clicker Adventures!</i> auf!"";
            lang_hello = ""Hallo!"";
            lang_trainingHeader = ""Möchtest du eine Schulung machen?"";
            lang_trainingMain = ""Wir werden über <color=\""#6DFF5D\"">Level</color> sprechen, dir den Zweck von <color=\""#00FBFF\"">Werkzeugen</color> und <color=\""#EB7FFF\"">Verzauberungen</color> zeigen."";
            lang_sure = ""Sicher"";
            lang_no = ""Nein, das ist nicht mein Stil"";
            lang_training = ""Schulung"";
            lang_training0 = ""Lass uns anfangen!"";
            lang_training1 = ""Klicke auf den <color=\""#FFA043\"">Block</color>! Alle Ressourcen werden hier gesammelt"";
            lang_training2 = ""Tausche <color=\""#FFA043\"">Blöcke</color> gegen <color=\""#7FFF42\"">Smaragde</color> hier"";
            lang_training3 = ""Verbessere <color=\""#42FFF4\"">Werkzeuge</color> und kaufe <color=\""#F481FF\"">Verzauberungen</color> mit <color=\""#7FFF42\"">Smaragden</color>"";
            lang_training4 = ""Das Zerstören eines Blocks bringt <color=\""#7FFF42\"">Erfahrung</color> ein. Mit jedem Level werden Blöcke teurer und Werkzeuge besser"";
            lang_training5 = ""Wechsle hier zwischen den Leveln"";
            lang_training6 = ""<color=\""#FCFF75\"">Musik</color> links und <color=\""#FCFF75\"">Spiel-Einstellungen</color> rechts. Viel Spaß beim Spielen!"";
            lang_nextlevel = ""Neues Level"";
            lang_open = ""Neue Werkzeuge freigeschaltet!"";

            Levels._BlockNames = new string[]
            {
                ""Eiche"",
                ""Birke"",
                ""Bruchstein"",
                ""Erde"",
                ""Dunkle Eiche"",
                ""Kohleerz"",
                ""Eisenerz"",
                ""Grasblock"",
                ""Akazie"",
                ""Diorit"",
                ""Kupfererz"",
                ""Podsol"",
                ""Mangrovenholz"",
                ""Granit"",
                ""Goldader"",
                ""Myzel"",
                ""Kirsche"",
                ""Sandstein"",
                ""Redstone-Erz"",
                ""Sand"",
                ""Roter Sand"",
                ""Moosiger Bruchstein"",
                ""Kies"",
                ""Lapislazuli"",
                ""Diamanterz"",
                ""Obsidian"",
                ""Karmesin"",
                ""Netherit"",
                ""Quarzerz"",
                ""Verdreht"",
                ""Seelensand"",
                ""Uralte Trümmer"",
                ""Endstein"",
                ""Grundgestein""
            };
            upgradeItems.AxeUpgradeItemNames = new string[]
            {
                ""Holzaxt"",
                ""Steinaxt"",
                ""Eisenaxt"",
                ""Kupferaxt"",
                ""Goldaxt"",
                ""Lapislazuli-Axt"",
                ""Diamantaxt"",
                ""Obsidianaxt"",
                ""Quarzaxt"",
                ""Netheritaxt""
            };
            upgradeItems.PickaxeUpgradeItemNames = new string[]
            {
                ""Holzspitzhacke"",
                ""Steinspitzhacke"",
                ""Eisenspitzhacke"",
                ""Kupferspitzhacke"",
                ""Goldspitzhacke"",
                ""Lapislazuli-Spitzhacke"",
                ""Diamantspitzhacke"",
                ""Obsidianspitzhacke"",
                ""Quartzspitzhacke"",
                ""Netherit-Spitzhacke""
            };
            upgradeItems.ShovelUpgradeItemNames = new string[]
            {
                ""Holzschaufel"",
                ""Steinschaufel"",
                ""Eisenschaufel"",
                ""Kupferschaufel"",
                ""Goldschaufel"",
                ""Lapislazuli-Schaufel"",
                ""Diamantschaufel"",
                ""Obsidianschaufel"",
                ""Quartzschaufel"",
                ""Netherit-Schaufel""
            };
        }
        if (lang == ""es"")
        {
            lang_level = ""Nivel "";
            lang_enchant = ""Encantamientos"";
            lang_upgrades = ""Mejoras"";
            lang_settings = ""Configuración"";
            lang_inventory = ""Inventario"";
            lang_blocks = ""Bloques"";
            lang_villager = ""Aldeano"";
            lang_emeralds = ""Esmeraldas: "";
            lang_change = ""Intercambiar"";
            lang_changeAll = ""Intercambiar Todo"";
            lang_close = ""Cerrar"";
            lang_continue = ""Continuar"";
            lang_axes = ""Hachas"";
            lang_picks = ""Picos"";
            lang_shovels = ""Palas"";
            lang_lang = ""Idioma"";
            lang_sounds = ""Sonidos del Juego"";
            lang_anims = ""Animaciones"";
            lang_particles = ""Partículas de Bloques"";
            lang_xpOrbs = ""Orbes de XP"";
            lang_background = ""Fondo"";
            lang_reset = ""Restablecer Progreso del Juego"";
            lang_attention = ""¡ATENCIÓN!"";
            lang_resetDescriptoin = ""¿Estás seguro de que deseas eliminar todo el progreso del juego, incluyendo la cantidad de esmeraldas acumuladas, niveles desbloqueados, experiencia, herramientas mejoradas y encantamientos?\r\n\r\nNo será posible restaurar el progreso del juego."";
            lang_on = ""Encendido"";
            lang_off = ""Apagado"";
            lang_effectiveness = ""Eficiencia de Herramientas  <color=\""cyan\"">+1</color>"";
            lang_autoClick = ""Auto-clic para Bloque  <color=\""cyan\"">+1/seg</color>"";
            lang_blockFinal = ""Bloques por Destrucción  <color=\""cyan\"">+10</color>"";
            lang_costPlus = ""Costo de Bloques durante el Intercambio  <color=\""cyan\"">+5</color>"";
            lang_destroySpeed = ""Velocidad de Destrucción  <color=\""cyan\"">+1</color>"";
            lang_x3bonus = ""Eficiencia  <color=\""cyan\"">x3</color> durante 30 segundos"";
            lang_ad = ""Publicidad a través de "";
            lang_congratulate = ""¡Felicidades!"";
            lang_congratulateHeader = ""¡Has llegado al final del juego!"";
            lang_congratulateMain = ""Pero eso no significa que hayas terminado. Todavía tienes que <color=\""#FF6262\"">luchar contra otros jugadores</color> para obtener la mayor cantidad de <color=\""#8BFF73\"">esmeraldas</color> y reclamar el primer lugar en la tabla de clasificación.\r\n\r\n¿Puedes mostrar a todos quién manda y romper el último bloque en este juego? Rompe el <color=\""#F2A8FF\"">Bedrock</color> y establece el récord mundial de clics en <i>Minecraft Clicker Adventures!</i>"";
            lang_hello = ""¡Hola!"";
            lang_trainingHeader = ""¿Quieres recibir entrenamiento?"";
            lang_trainingMain = ""Hablaremos sobre <color=\""#6DFF5D\"">niveles</color>, te mostraremos para qué sirven <color=\""#00FBFF\"">herramientas</color> y <color=\""#EB7FFF\"">encantamientos</color>."";
            lang_sure = ""Seguro"";
            lang_no = ""No, no es mi estilo"";
            lang_training = ""Entrenamiento"";
            lang_training0 = ""¡Vamos a empezar!"";
            lang_training1 = ""¡Haz clic en el <color=\""#FFA043\"">bloque</color>! Todos los recursos se recogerán aquí"";
            lang_training2 = ""Intercambia <color=\""#FFA043\"">bloques</color> por <color=\""#7FFF42\"">esmeraldas</color> aquí"";
            lang_training3 = ""Usa <color=\""#7FFF42\"">esmeraldas</color> para mejorar <color=\""#42FFF4\"">herramientas</color> y comprar <color=\""#F481FF\"">encantamientos</color>"";
            lang_training4 = ""Al romper un bloque, obtienes <color=\""#7FFF42\"">experiencia</color>. Con cada nivel, los bloques son más caros y las herramientas son mejores"";
            lang_training5 = ""Cambia entre niveles aquí"";
            lang_training6 = ""La <color=\""#FCFF75\"">música</color> está a la izquierda y la <color=\""#FCFF75\"">configuración</color> del juego a la derecha. ¡Disfruta del juego!"";
            lang_nextlevel = ""Nuevo nivel"";
            lang_open = ""¡Se desbloquearon nuevas herramientas!"";

            Levels._BlockNames = new string[]
            {
                ""Roble"",
                ""Brote"",
                ""Guijarro"",
                ""Tierra"",
                ""Roble Oscuro"",
                ""Menacal"",
                ""Menacal"",
                ""Bloque de Hierba"",
                ""Acacia"",
                ""Diorita"",
                ""Menacal de Cobre"",
                ""Podsol"",
                ""Manglar"",
                ""Granito"",
                ""Menacal de Oro"",
                ""Micelio"",
                ""Cereza"",
                ""Arenisca"",
                ""Menacal de Redstone"",
                ""Arena"",
                ""Arena Roja"",
                ""Guijarro Musgoso"",
                ""Grava"",
                ""Lapislázuli"",
                ""Menacal de Diamante"",
                ""Obsidiana"",
                ""Carmesí"",
                ""Netherita"",
                ""Menacal de Cuarzo"",
                ""Torcido"",
                ""Arena de Almas"",
                ""Ruinas Antiguas"",
                ""Piedra del Fin"",
                ""Base de Roca""
            };
            upgradeItems.AxeUpgradeItemNames = new string[]
            {
                ""Hacha de Madera"",
                ""Hacha de Piedra"",
                ""Hacha de Hierro"",
                ""Hacha de Cobre"",
                ""Hacha de Oro"",
                ""Hacha de Lapislázuli"",
                ""Hacha de Diamante"",
                ""Hacha de Obsidiana"",
                ""Hacha de Cuarzo"",
                ""Hacha de Netherite""
            };
            upgradeItems.PickaxeUpgradeItemNames = new string[]
            {
                ""Pico de Madera"",
                ""Pico de Piedra"",
                ""Pico de Hierro"",
                ""Pico de Cobre"",
                ""Pico de Oro"",
                ""Pico de Lapislázuli"",
                ""Pico de Diamante"",
                ""Pico de Obsidiana"",
                ""Pico de Cuarzo"",
                ""Pico de Netherite""
            };
            upgradeItems.ShovelUpgradeItemNames = new string[]
            {
                ""Pala de Madera"",
                ""Pala de Piedra"",
                ""Pala de Hierro"",
                ""Pala de Cobre"",
                ""Pala de Oro"",
                ""Pala de Lapislázuli"",
                ""Pala de Diamante"",
                ""Pala de Obsidiana"",
                ""Pala de Cuarzo"",
                ""Pala de Netherite""
            };
        }
        levels.ChangeNames();
        
    }
}using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class Levels : MonoBehaviour
{
    public GameObject _Value, Block, BlockNameTextLabel, _xpValue, _xpBar, _nextBlock, _currentBlock;
    public static GameObject xpValue, xpBar, nextBlock, currentBlock;

    public Image[] Icons;

    public int[] XpToNextLevel;
    public static int[] _XpToNextLevel;
    public Sprite[] LevelSprite;
    public static Sprite[] _LevelSprite;

    public static int ReachedLevel = 0, CurrentLvl = 0, ReachedXP, Bonus = 1;

    public string[] BlockNames;
    public static string[] _BlockNames;

    public static GameObject Value;
    public Text EmeraldsChangeResult;

    public static int[] Values, EmeraldsPerLevel;
    public int[] _EmeraldsPerLevel;

    private static Vector3 ValueOriginalScale;
    private static float scaleSpeed = 20f;
    public static ProgressBarComponent xpScr;
    private Transform BlockBase;
    private Text mat;
    private Sprite StartBlock;

    private static bool isScaling = false;

    public GameObject Item;
    public Transform Container;

    private GameObject item;
    public static Transform[] InventoryItems;

    public UpgradeItems UpgradeItems;
    public NextUpgradeLevelShow NextUpgradeLevelShow;

    public Villager villager;

    public EndScene endScene;

    public static int AdditionalWoodBlocks = 0, AdditionalOreBlocks = 0, AdditionalSoilBlocks = 0;

    public static int lvl;
    public static int xp;

    private IEnumerator AutoSave()
    {
        while(true)
        {
            yield return new WaitForSeconds(2);
            PlayerPrefs.SetInt(""lvl"", ReachedLevel);
            PlayerPrefs.SetInt(""xp"", ReachedXP);
            for (int i = 0; i < Values.Length; i++)
            {
                PlayerPrefs.SetInt($""v{i}"", Values[i]);
            }
        }
    }

    private void Start()
    {
        if (PlayerPrefs.HasKey(""lvl""))
            lvl = PlayerPrefs.GetInt(""lvl"");
        else
            PlayerPrefs.SetInt(""lvl"", ReachedLevel);

        if (PlayerPrefs.HasKey(""xp""))
            xp = PlayerPrefs.GetInt(""xp"");
        else
            PlayerPrefs.SetInt(""xp"", ReachedXP);

        mat = BlockNameTextLabel.GetComponent<Text>();
        mat.text = $""~ {BlockNames[ReachedLevel]} ~"";
        BlockBase = Block.transform.Find(""BlockBase"");
        StartBlock = BlockBase.GetComponent<Image>().sprite;

        _XpToNextLevel = XpToNextLevel;
        EmeraldsPerLevel = _EmeraldsPerLevel;
        Value = _Value;
        xpValue = _xpValue;
        xpBar = _xpBar;
        nextBlock = _nextBlock;
        currentBlock = _currentBlock;

        xpScr = xpBar.GetComponent<ProgressBarComponent>();
        ValueOriginalScale = Value.transform.localScale;
        xpValue.GetComponent<Text>().text = $""0 / {xpScr.maxValue}"";
        Values = new int[_XpToNextLevel.Length];
        InventoryItems = new Transform[_XpToNextLevel.Length];

        _LevelSprite = LevelSprite;
        _BlockNames = BlockNames;

        if (XpToNextLevel.Length != LevelSprite.Length)
        {
            Debug.Log(""The lengths of the arrays do not match!"");
        }

        item = Item;
        item.transform.Find(""Item"").Find(""Icon"").Find(""pic"").GetComponent<Image>().sprite = StartBlock;
        item.transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = BlockNames[0];
        item.transform.Find(""Item"").Find(""Count"").GetComponent<Text>().text = ""0"";
        item.name = ""i0"";
        Instantiate(item, Container);
        Transform t1 = Container.transform.Find(""i0(Clone)"");
        InventoryItems[0] = t1;

        
        //for (int i = 0; i < 33; i++)
        //{
        //    _XpToNextLevel[i] = 10;
        //}
        

        for (int i = 0; i < LevelSprite.Length; i++)
        {
            item = Item;
            item.transform.Find(""Item"").Find(""Icon"").Find(""pic"").GetComponent<Image>().sprite = LevelSprite[i];
            item.transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + (i + 1);
            item.transform.Find(""Item"").Find(""Count"").GetComponent<Text>().text = ""0"";
            item.name = $""i{i + 1}"";
            Instantiate(item, Container);
            Transform t2 = Container.transform.Find($""i{i + 1}(Clone)"");
            if (i + 1 <= InventoryItems.Length - 1)
                InventoryItems[i + 1] = t2;
        }

        for (int i = 0; i < Values.Length; i++)
        {
            if (PlayerPrefs.HasKey($""v{i}""))
                Values[i] = PlayerPrefs.GetInt($""v{i}"");
            else
                PlayerPrefs.SetInt($""v{i}"", Values[i]);
        }

        ReachedLevel = lvl;
        CurrentLvl = lvl;

        for (int i = 1; i < openers.Length; i++)
        {
            if (ReachedLevel >= openers[i])
                counter++;
            else
                break;
        }

        startUpgrades = counter;
        ReachedXP = xp;

        for(int i = 0; i < Values.Length; i++)
        {
            Values[i] = PlayerPrefs.GetInt($""v{i}"");
            InventoryItems[i].Find(""Item"").Find(""Count"").GetComponent<Text>().text = Values[i].ToString();
        }

        StartCoroutine(AutoSave());
    }

    public static int startUpgrades = 0;

    public void ChangeNames()
    {
        BlockNames = _BlockNames;
        for (int i = 0; i < BlockNames.Length; i++) 
        {
            InventoryItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = BlockNames[i];
        }
        for (int i = ReachedLevel + 1; i < BlockNames.Length; i++)
        {
            InventoryItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + i;
        }
        Container.transform.Find($""i34(Clone)"").transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + 34;
        mat.text = $""~ {BlockNames[CurrentLvl]} ~"";
    }

    public static string LevelName()
    {
        if (CurrentLvl != 0)
            return _LevelSprite[CurrentLvl - 1].name;
        else
            return ""wood"";
    }

    public static void AddBlocks(int c = 0)
    {
        Values[CurrentLvl] += c * Bonus;

        string CurrentBlockMaterial = null;

        if(CurrentLvl != 0)
        {
            if (LevelName().Contains(""wood""))
                CurrentBlockMaterial = ""Wood"";
            if (LevelName().Contains(""soil""))
                CurrentBlockMaterial = ""Soil"";
            if (LevelName().Contains(""ore""))
                CurrentBlockMaterial = ""Ore"";
        }

        switch (CurrentBlockMaterial)
        {
            case ""Wood"":
                Values[CurrentLvl] += AdditionalWoodBlocks * Bonus;
                break;
            case ""Ore"":
                Values[CurrentLvl] += AdditionalOreBlocks * Bonus;
                break;
            case ""Soil"":
                Values[CurrentLvl] += AdditionalSoilBlocks * Bonus;
                break;
            default:
                Values[CurrentLvl] += AdditionalWoodBlocks * Bonus;
                break;
        }

        SetValueText();
    }

    public static void SetValueText()
    {
        Value.GetComponent<Text>().text = Values[CurrentLvl].ToString();
    }

    public static void ScaleValueText(MonoBehaviour instance, float scale)
    {
        instance.StartCoroutine(ScaleObject(ValueOriginalScale * scale));
    }

    private static IEnumerator ScaleObject(Vector3 targetScale)
    {
        isScaling = true;

        float startTime = Time.time;
        Vector3 startScale = Value.transform.localScale;

        while (Time.time - startTime < 1 / scaleSpeed)
        {
            Value.transform.localScale = Vector3.Lerp(startScale, targetScale, (Time.time - startTime) * scaleSpeed);
            yield return null;
        }

        Value.transform.localScale = targetScale;

        while (Time.time - startTime < 2 / scaleSpeed)
        {
            Value.transform.localScale = Vector3.Lerp(targetScale, ValueOriginalScale, (Time.time - startTime - 1 / scaleSpeed) * scaleSpeed);
            yield return null;
        }

        Value.transform.localScale = ValueOriginalScale;
        isScaling = false;
    }

    private int counter = 1;
    public static int[] openers = new int[10] 
    {
        0,
        2,
        6,
        10,
        14,
        23,
        24,
        25,
        28,
        31
    };

    private void Update()
    {
        InventoryItems[CurrentLvl].Find(""Item"").Find(""Count"").GetComponent<Text>().text = Values[CurrentLvl].ToString();

        if (xpScr.value >= xpScr.maxValue)
        {
            villager.StopAllCoroutines();
            villager.isExchanging = false;

            ReachedXP = 0;
            ReachedLevel ++;
            CurrentLvl ++;

            ChangeLevel(ReachedLevel);
            BlockScript.BlockDest.GetComponent<Image>().sprite = BlockScript._destroyBlockImages[0];

            InventoryItems[ReachedLevel].GetComponent<AutoColorInventory>().SetLock(false);
            InventoryItems[ReachedLevel].Find(""Item"").Find(""Name"").GetComponent<Text>().text = BlockNames[ReachedLevel];

            if (ReachedLevel == openers[counter])
            {
                UpgradeItems.AxeUpgradeItems[counter].GetComponent<LockUpgrades>().SetLock(false);
                UpgradeItems.PickaxeUpgradeItems[counter].GetComponent<LockUpgrades>().SetLock(false);
                UpgradeItems.ShovelUpgradeItems[counter].GetComponent<LockUpgrades>().SetLock(false);

                UpgradeItems.AxeUpgradeItems[counter].GetComponent<AdditionalBlocks>().SetUpgradeColor();
                UpgradeItems.ShovelUpgradeItems[counter].GetComponent<AdditionalBlocks>().SetUpgradeColor();
                UpgradeItems.PickaxeUpgradeItems[counter].GetComponent<AdditionalBlocks>().SetUpgradeColor();

                UpgradeItems.AxeUpgradeItems[counter].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text =
                    $""{UpgradeItems.AxeUpgradeItemNames[counter]} <color=\""cyan\"">+{counter + 1}</color>"";
                UpgradeItems.PickaxeUpgradeItems[counter].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text =
                    $""{UpgradeItems.PickaxeUpgradeItemNames[counter]} <color=\""cyan\"">+{counter + 1}</color>"";
                UpgradeItems.ShovelUpgradeItems[counter].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text =
                    $""{UpgradeItems.ShovelUpgradeItemNames[counter]} <color=\""cyan\"">+{counter + 1}</color>"";

                NextUpgradeLevelShow.SwitchMessageState();

                if (counter < 9)
                    counter += 1;
            }

            if (ReachedLevel == 33)
                endScene.Message(true);
        }
        else
        {
            ChangeLevel(CurrentLvl);
        }
    }

    private void ChangeLevel(int lvl)
    {
        Value.GetComponent<Text>().text = Values[CurrentLvl].ToString();
        EmeraldsChangeResult.text = EmeraldsPerLevel[lvl].ToString();

        if (lvl < ReachedLevel && lvl != 0)
        {
            xpScr.value = xpScr.maxValue - 1;
            xpScr.maxValue = XpToNextLevel[ReachedLevel];
            xpValue.GetComponent<Text>().text = Language.lang_level + lvl;

            currentBlock.GetComponent<Image>().sprite = LevelSprite[lvl - 1];
            nextBlock.GetComponent<Image>().sprite = LevelSprite[lvl];
            BlockBase.GetComponent<Image>().sprite = LevelSprite[lvl - 1];

            mat.text = $""~ {BlockNames[lvl]} ~"";

            for (int i = 0; i < Icons.Length; i++)
            {
                Icons[i].sprite = LevelSprite[lvl - 1];
            }
        }

        if (lvl == ReachedLevel && lvl != 0) 
        {
            xpScr.value = ReachedXP;
            xpScr.maxValue = XpToNextLevel[ReachedLevel];
            xpValue.GetComponent<Text>().text = $""{ReachedXP} / {xpScr.maxValue}"";

            currentBlock.GetComponent<Image>().sprite = LevelSprite[ReachedLevel - 1];
            nextBlock.GetComponent<Image>().sprite = LevelSprite[lvl];
            BlockBase.GetComponent<Image>().sprite = LevelSprite[ReachedLevel - 1];

            mat.text = $""~ {BlockNames[lvl]} ~"";

            for (int i = 0; i < Icons.Length; i++)
            {
                Icons[i].sprite = LevelSprite[lvl - 1];
            }
        }

        if (lvl == 0) 
        {
            if (ReachedLevel > lvl)
            {
                xpScr.value = xpScr.maxValue - 1;
                xpScr.maxValue = XpToNextLevel[ReachedLevel];
                xpValue.GetComponent<Text>().text = Language.lang_level + lvl;
            }
            else
            {
                xpScr.value = ReachedXP;
                xpScr.maxValue = XpToNextLevel[ReachedLevel];
                xpValue.GetComponent<Text>().text = $""{ReachedXP} / {xpScr.maxValue}"";
            }

            currentBlock.GetComponent<Image>().sprite = StartBlock;
            nextBlock.GetComponent<Image>().sprite = LevelSprite[lvl];
            BlockBase.GetComponent<Image>().sprite = StartBlock;

            for (int i = 0; i < Icons.Length; i++)
            {
                Icons[i].sprite = StartBlock;
            }

            mat.text = $""~ {BlockNames[0]} ~"";
        }
        ParticleColorAutoChanger.SetParticleColor();
    }
}
using UnityEngine;
using UnityEngine.UI;

public class LockUpgrades : MonoBehaviour
{
    public Image iconPic;
    public Image icon;
    public GameObject ItemLocked;

    public bool isLocked;

    private Color defIcon;

    void Start()
    {
        defIcon = icon.color;
        SetLock(isLocked);
    }

    public void SetLock(bool Locked)
    {
        if (Locked)
        {
            iconPic.color = new Color(0, 0, 0, 0.75f);
            icon.color = new Color(0.79f, 0.79f, 0.79f, 1);
            ItemLocked.SetActive(false);
            isLocked = true;
        }
        else
        {
            iconPic.color = new Color(1, 1, 1, 1f);
            icon.color = defIcon;
            ItemLocked.SetActive(true);
            isLocked = false;
        }
    }
}
using UnityEngine;
using UnityEngine.UI;

public class Music : MonoBehaviour
{
    public GameObject MusicParent;
    public ParticleSystem Particles;

    public void ToggleMusic()
    {
        if (MusicParent != null)
        {
            AudioSource audioSource = MusicParent.GetComponent<AudioSource>();
            Image image = gameObject.GetComponent<Image>();
            if (audioSource != null)
            {
                if (!audioSource.isPlaying)
                {
                    audioSource.Play();
                    Particles.Play();
                }
                else
                {
                    audioSource.Stop();
                    Particles.Stop();
                }
            }
        }
    }
}using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class NextUpgradeLevelShow : MonoBehaviour
{
    public UpgradeItems UpgradeItems;
    public float animationSpeed = 40f;

    public Image axe, pick, shovel;

    private CanvasGroup CanvasGroup;
    private bool isOpened = false;

    private int counter;

    private void Start()
    {
        counter = Levels.startUpgrades;
        UpdateSprites();
        CanvasGroup = transform.GetComponent<CanvasGroup>();
    }

    public void SwitchMessageState()
    {
        if (isOpened)
        {
            counter++;
            StartCoroutine(FadeCanvasGroup(CanvasGroup, CanvasGroup.alpha, 0f));
            UpdateSprites();
        }
        else
        {
            StartCoroutine(FadeCanvasGroup(CanvasGroup, CanvasGroup.alpha, 1f));
        }

        isOpened = !isOpened;
    }

    private void UpdateSprites()
    {
        if (counter < 10)
        {
            axe.sprite = UpgradeItems.AxeUpgradeItemSprites[counter];
            pick.sprite = UpgradeItems.PickaxeUpgradeItemSprites[counter];
            shovel.sprite = UpgradeItems.ShovelUpgradeItemSprites[counter];
        }
    }

    private IEnumerator FadeCanvasGroup(CanvasGroup canvasGroup, float startAlpha, float targetAlpha)
    {
        float elapsedTime = 0f;

        while (elapsedTime < 1f)
        {
            elapsedTime += Time.deltaTime * animationSpeed;
            canvasGroup.alpha = Mathf.Lerp(startAlpha, targetAlpha, elapsedTime);
            yield return null;
        }

        canvasGroup.alpha = targetAlpha;
        canvasGroup.blocksRaycasts = targetAlpha > 0.5f; 
    }
}
using UnityEngine;
using UnityEngine.UI;

public class ParticleColorAutoChanger : MonoBehaviour
{
    public GameObject _BlockBase;

    private static GameObject BlockBase;
    private static new ParticleSystem particleSystem;
    private static Image img;

    void Start()
    {
        BlockBase = _BlockBase;
        img = BlockBase.GetComponent<Image>();
        particleSystem = GetComponent<ParticleSystem>();
        Texture2D blockTexture = img.sprite.texture;
        Color blockColor = GetAverageColorFromTexture(blockTexture);
        blockColor.a = 255;
        Color blockColorTwo = blockColor;
        blockColorTwo *= 1.5f;
        var main = particleSystem.main;
        main.startColor = new ParticleSystem.MinMaxGradient(blockColor, blockColorTwo);
    }

    private static Color GetAverageColorFromTexture(Texture2D texture)
    {
        Color[] pixels = texture.GetPixels();
        Color averageColor = Color.black;

        foreach (Color pixelColor in pixels)
        {
            averageColor += pixelColor;
        }

        averageColor /= pixels.Length;

        return averageColor;
    }

    public static void SetParticleColor()
    {
        Texture2D blockTexture = img.sprite.texture;
        Color blockColor = GetAverageColorFromTexture(blockTexture);
        blockColor.a = 255;
        Color blockColorTwo = blockColor;
        blockColorTwo *= 1.5f;
        var main = particleSystem.main;
        main.startColor = new ParticleSystem.MinMaxGradient(blockColor, blockColorTwo);
    }
}using UnityEngine;
using UnityEngine.UI;

public class Particles : MonoBehaviour
{
    public ParticleSystem[] particleSystems;
    public bool ParticlesEnabled = true;
    public Text StateLabel;

    public void ToggleParticles()
    {
        for (int i = 0; i < particleSystems.Length; i++)
        {
            GameObject parent = particleSystems[i].gameObject;

            if (ParticlesEnabled)
            {
                parent.SetActive(false);
            }
            else
            {
                parent.SetActive(true);
            }
        }

        ParticlesEnabled = !ParticlesEnabled;
        StateLabel.text = ParticlesEnabled ? Language.lang_on : Language.lang_off;
    }
}
using UnityEngine;
using UnityEngine.UI;

public class ProgressBarComponent : MonoBehaviour
{
    [Header(""UI Elements"")]
    [SerializeField] private Image image;

    [Header(""Properties"")]
    [SerializeField] public int value;
    [SerializeField] public int maxValue = 100;
    [SerializeField] private bool isCorrectlyConfigured = false;

    private void Awake()
    {
        if (image.type == Image.Type.Filled & image.fillMethod == Image.FillMethod.Horizontal)
        {
            isCorrectlyConfigured = true;
        }
        else
        {
            Debug.Log(""{GameLog} => [ProgressBarController] - (<color=red>Error</color>) -> Components Parameters Are Incorrectly Configured! \n"" +
                      ""Required Type: Filled \n"" +
                      ""Required FillMethod: Horizontal"");
        }
    }

    private void LateUpdate()
    {
        if (!isCorrectlyConfigured) return;
        image.fillAmount = (float)value / maxValue;
    }
}using UnityEngine;
using UnityEngine.UI;

public class Sounds : MonoBehaviour
{
    public AudioSource[] audioSources;
    public bool SoundsEnabled = true;
    public Text StateLabel;

    public void ToggleSounds()
    {
        for (int i = 0; i < audioSources.Length; i++)
        {
            if (SoundsEnabled)
            {
                audioSources[i].enabled = false;
                StateLabel.text = Language.lang_off;
            }
            else
            {
                audioSources[i].enabled = true;
                StateLabel.text = Language.lang_on;
            }
        }

        SoundsEnabled = !SoundsEnabled;
    }
}
using System.Collections;
using UnityEngine;

public class TabShower : MonoBehaviour
{
    public AudioSource AudioSource;
    public AudioClip ClickSound;

    public float animationSpeed = 40f;
    private CanvasGroup CanvasGroup;
    private bool isOpened = false;

    public void Start()
    {
        CanvasGroup = transform.GetComponent<CanvasGroup>();
    }

    public void SwitchTabState()
    {
        AudioSource.PlayOneShot(ClickSound);
        if (isOpened)
        {
            StartCoroutine(FadeCanvasGroup(CanvasGroup, CanvasGroup.alpha, 0f));
        }
        else
        {
            StartCoroutine(FadeCanvasGroup(CanvasGroup, CanvasGroup.alpha, 1f));
        }

        isOpened = !isOpened;
    }

    private IEnumerator FadeCanvasGroup(CanvasGroup canvasGroup, float startAlpha, float targetAlpha)
    {
        float elapsedTime = 0f;

        while (elapsedTime < 1f)
        {
            elapsedTime += Time.deltaTime * animationSpeed;
            canvasGroup.alpha = Mathf.Lerp(startAlpha, targetAlpha, elapsedTime);
            yield return null;
        }

        canvasGroup.alpha = targetAlpha;
        canvasGroup.blocksRaycasts = targetAlpha > 0.5f;
    }
}
using System.Collections;
using UnityEngine;

public class TabShower : MonoBehaviour
{
    public AudioSource AudioSource;
    public AudioClip ClickSound;

    public float animationSpeed = 40f;
    private CanvasGroup CanvasGroup;
    private bool isOpened = false;

    public void Start()
    {
        CanvasGroup = transform.GetComponent<CanvasGroup>();
    }

    public void SwitchTabState()
    {
        AudioSource.PlayOneShot(ClickSound);
        if (isOpened)
        {
            StartCoroutine(FadeCanvasGroup(CanvasGroup, CanvasGroup.alpha, 0f));
        }
        else
        {
            StartCoroutine(FadeCanvasGroup(CanvasGroup, CanvasGroup.alpha, 1f));
        }

        isOpened = !isOpened;
    }

    private IEnumerator FadeCanvasGroup(CanvasGroup canvasGroup, float startAlpha, float targetAlpha)
    {
        float elapsedTime = 0f;

        while (elapsedTime < 1f)
        {
            elapsedTime += Time.deltaTime * animationSpeed;
            canvasGroup.alpha = Mathf.Lerp(startAlpha, targetAlpha, elapsedTime);
            yield return null;
        }

        canvasGroup.alpha = targetAlpha;
        canvasGroup.blocksRaycasts = targetAlpha > 0.5f;
    }
}
using UnityEngine;
using UnityEngine.UI;

public class Training : MonoBehaviour
{
    public Text TextLabel;
    public ParticleSystem particleSystem;

    public GameObject Next, Back, Top, XpBar, EnchantTab, UpgradesTab, InventoryTab, ValueBlocks, Villager;
    private int Stage = 0;

    private string[] Texts = new string[6];

    private void Start()
    {
        Texts = new string[6]
        {
            Language.lang_training1,
            Language.lang_training2,
            Language.lang_training3,
            Language.lang_training4,
            Language.lang_training5,
            Language.lang_training6
        };
    }

    public void Continue()
    {
        if (Stage != 6)
            TextLabel.text = Texts[Stage];

        Stage++;

        switch (Stage)
        {
            case 1:
                InventoryTab.transform.SetSiblingIndex(9);
                ValueBlocks.transform.SetSiblingIndex(9);
                break;
            case 2:
                transform.SetSiblingIndex(9);
                Villager.transform.SetSiblingIndex(9);
                break;
            case 3:
                transform.SetSiblingIndex(9);
                EnchantTab.transform.SetSiblingIndex(9);
                UpgradesTab.transform.SetSiblingIndex(9);
                break;
            case 4:
                transform.SetSiblingIndex(9);
                XpBar.transform.SetSiblingIndex(9);
                ValueBlocks.transform.SetSiblingIndex(7);
                break;
            case 5:
                transform.SetSiblingIndex(9);
                Next.transform.SetSiblingIndex(9);
                Back.transform.SetSiblingIndex(9);
                break;
            case 6:
                XpBar.transform.SetSiblingIndex(8);
                Top.transform.SetSiblingIndex(7);
                Back.transform.SetSiblingIndex(0);
                transform.SetSiblingIndex(7);
                break;
            case 7:
                particleSystem.GetComponent<Renderer>().enabled = true;
                Destroy(gameObject);
                break;
        }
    }
}
using Newtonsoft.Json.Linq;
using System.Collections;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UI;

public class UpgradeItems : MonoBehaviour
{
    public GameObject ItemPrefab;
    public Text EmeraldsLabel;
    public Villager Villager;
    public UpgradeTools UpgradeTools;
    public Effectiveness effectiveness;
    public ChangeLanguage changeLanguage;

    public Transform AxeContainer;
    public Transform ShovelContainer;
    public Transform PickaxeContainer;

    public Sprite[] AxeUpgradeItemSprites;
    public string[] AxeUpgradeItemNames;

    public Sprite[] ShovelUpgradeItemSprites;
    public string[] ShovelUpgradeItemNames;

    public Sprite[] PickaxeUpgradeItemSprites;
    public string[] PickaxeUpgradeItemNames;

    public static Transform[] AxeUpgradeItems;
    public static Transform[] ShovelUpgradeItems;
    public static Transform[] PickaxeUpgradeItems;

    public void ChangeNames()
    {
        for (int i = 0; i < AxeUpgradeItemNames.Length; i++)
        {
            AxeUpgradeItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text =
                $""{AxeUpgradeItemNames[i]} <color=\""cyan\"">+{i + 1}</color>"";
            ShovelUpgradeItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text =
                $""{ShovelUpgradeItemNames[i]} <color=\""cyan\"">+{i + 1}</color>"";
            PickaxeUpgradeItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text =
                $""{PickaxeUpgradeItemNames[i]} <color=\""cyan\"">+{i + 1}</color>"";
           
            if (AxeUpgradeItems[i].GetComponent<LockUpgrades>().isLocked)
            {
                AxeUpgradeItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + Levels.openers[i];
                ShovelUpgradeItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + Levels.openers[i];
                PickaxeUpgradeItems[i].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + Levels.openers[i];
            }
        }
    }

    private void Start()
    {
        StartCoroutine(InitializeUpgradeItems());
    }

    private IEnumerator InitializeUpgradeItems()
    {
        AxeUpgradeItems = CreateUpgradeItems(AxeContainer, AxeUpgradeItemSprites, AxeUpgradeItemNames, ""ai"", ""axe"");
        yield return new WaitUntil(() => IsArrayInitialized(AxeUpgradeItems));

        ShovelUpgradeItems = CreateUpgradeItems(ShovelContainer, ShovelUpgradeItemSprites, ShovelUpgradeItemNames, ""si"", ""shovel"");
        yield return new WaitUntil(() => IsArrayInitialized(ShovelUpgradeItems));

        PickaxeUpgradeItems = CreateUpgradeItems(PickaxeContainer, PickaxeUpgradeItemSprites, PickaxeUpgradeItemNames, ""pi"", ""pick"");
        yield return new WaitUntil(() => IsArrayInitialized(PickaxeUpgradeItems));

        UpdateUpgrades();

        ChangeLock();

        changeLanguage.Init();
    }

    private IEnumerator AutoSave()
    {
        while (true)
        {
            yield return new WaitForSeconds(2);

            for (int i = 0; i < AxeUpgradeItems.Length; i++)
                PlayerPrefs.SetInt($""axeUpgradeLevel{i}"", AxeUpgradeItems[i].GetComponent<AdditionalBlocks>().CurrUpgradeLevel);
            for (int i = 0; i < ShovelUpgradeItems.Length; i++)
                PlayerPrefs.SetInt($""shovelUpgradeLevel{i}"", ShovelUpgradeItems[i].GetComponent<AdditionalBlocks>().CurrUpgradeLevel);
            for (int i = 0; i < PickaxeUpgradeItems.Length; i++)
                PlayerPrefs.SetInt($""pickUpgradeLevel{i}"", PickaxeUpgradeItems[i].GetComponent<AdditionalBlocks>().CurrUpgradeLevel);
        }
    }

    private void ChangeLock()
    {
        for (int i = 0; i < Levels.startUpgrades; i++)
        {
            AxeUpgradeItems[i].GetComponent<LockUpgrades>().SetLock(false);
            ShovelUpgradeItems[i].GetComponent<LockUpgrades>().SetLock(false);
            PickaxeUpgradeItems[i].GetComponent<LockUpgrades>().SetLock(false);

            AxeUpgradeItems[i].GetComponent<AdditionalBlocks>().SetUpgradeColor();
            ShovelUpgradeItems[i].GetComponent<AdditionalBlocks>().SetUpgradeColor();
            PickaxeUpgradeItems[i].GetComponent<AdditionalBlocks>().SetUpgradeColor();
        }

        ChangeNames();
    }

    private bool IsArrayInitialized(Transform[] array)
    {
        return array != null && array.Length > 0 && array[0] != null;
    }

    public void UpdateUpgrades()
    {
        AxeUpgradeItems[0].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = 
            $""{AxeUpgradeItemNames[0]} <color=\""cyan\"">+{1}</color>"";
        ShovelUpgradeItems[0].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = 
            $""{ShovelUpgradeItemNames[0]} <color=\""cyan\"">+{1}</color>"";
        PickaxeUpgradeItems[0].transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = 
            $""{PickaxeUpgradeItemNames[0]} <color=\""cyan\"">+{1}</color>"";

        for (int i = 0; i < AxeUpgradeItems.Length; i++)
        {
            if (PlayerPrefs.HasKey($""axeUpgradeLevel{i}""))
            {
                for(int lvl = 0; lvl < PlayerPrefs.GetInt($""axeUpgradeLevel{i}""); lvl++)
                {
                    AxeUpgradeItems[i].GetComponent<AdditionalBlocks>().UpgradeLevel(true);
                }
            }
            else
                PlayerPrefs.SetInt($""axeUpgradeLevel{i}"", AxeUpgradeItems[i].GetComponent<AdditionalBlocks>().CurrUpgradeLevel);
        }
        for (int i = 0; i < ShovelUpgradeItems.Length; i++)
        {
            if (PlayerPrefs.HasKey($""shovelUpgradeLevel{i}""))
            {
                for (int lvl = 0; lvl < PlayerPrefs.GetInt($""shovelUpgradeLevel{i}""); lvl++)
                {
                    ShovelUpgradeItems[i].GetComponent<AdditionalBlocks>().UpgradeLevel(true);
                }
            }
            else
                PlayerPrefs.SetInt($""shovelUpgradeLevel{i}"", ShovelUpgradeItems[i].GetComponent<AdditionalBlocks>().CurrUpgradeLevel);
        }
        for (int i = 0; i < PickaxeUpgradeItems.Length; i++)
        {
            if (PlayerPrefs.HasKey($""pickUpgradeLevel{i}""))
            {
                for (int lvl = 0; lvl < PlayerPrefs.GetInt($""pickUpgradeLevel{i}""); lvl++)
                {
                    PickaxeUpgradeItems[i].GetComponent<AdditionalBlocks>().UpgradeLevel(true);
                }
            }
            else
                PlayerPrefs.SetInt($""pickUpgradeLevel{i}"", PickaxeUpgradeItems[i].GetComponent<AdditionalBlocks>().CurrUpgradeLevel);
        }

        if (AxeUpgradeItems[0].GetComponent<AdditionalBlocks>().CurrUpgradeLevel == 0)
            AxeUpgradeItems[0].GetComponent<AdditionalBlocks>().UpgradeLevel(true);
        if (ShovelUpgradeItems[0].GetComponent<AdditionalBlocks>().CurrUpgradeLevel == 0)
            ShovelUpgradeItems[0].GetComponent<AdditionalBlocks>().UpgradeLevel(true);
        if (PickaxeUpgradeItems[0].GetComponent<AdditionalBlocks>().CurrUpgradeLevel == 0)
            PickaxeUpgradeItems[0].GetComponent<AdditionalBlocks>().UpgradeLevel(true);

        UpgradeTools.OpenTab(""axe"");

        RectTransform rtS = ShovelContainer.GetComponent<RectTransform>();
        rtS.sizeDelta = new Vector2(ShovelContainer.GetComponent<RectTransform>().sizeDelta.x, 
            AxeContainer.GetComponent<RectTransform>().sizeDelta.y);
        RectTransform rtP = PickaxeContainer.GetComponent<RectTransform>();
        rtP.sizeDelta = new Vector2(PickaxeContainer.GetComponent<RectTransform>().sizeDelta.x, 
            AxeContainer.GetComponent<RectTransform>().sizeDelta.y);

        StartCoroutine(AutoSave());
    }

    private Transform[] CreateUpgradeItems(Transform container, Sprite[] sprites, string[] names, string prefix, string tool)
    {
        Transform[] upgradeItems = new Transform[sprites.Length];

        for (int i = 0; i < sprites.Length; i++)
        {
            GameObject newItem = Instantiate(ItemPrefab, container);
            newItem.name = $""{prefix}{i}"";

            newItem.transform.Find(""Item"").Find(""Icon"").Find(""pic"").GetComponent<Image>().sprite = sprites[i];
            newItem.transform.Find(""Item"").Find(""Name"").GetComponent<Text>().text = Language.lang_level + Levels.openers[i];
            newItem.transform.Find(""Item"").Find(""Cost"").GetComponent<Text>().text = (i * 20 + 5).ToString();

            newItem.transform.GetComponent<AdditionalBlocks>().Emeralds = EmeraldsLabel;
            newItem.transform.GetComponent<AdditionalBlocks>().BlocksToAdd = i + 1;
            newItem.transform.GetComponent<AdditionalBlocks>().ToolType = tool;
            newItem.transform.GetComponent<AdditionalBlocks>().villager = Villager;
            newItem.transform.GetComponent<AdditionalBlocks>().effectiveness = effectiveness;
            upgradeItems[i] = newItem.transform;
        }
        return upgradeItems;
    }
}
using UnityEngine;
using UnityEngine.UI;

public class UpgradeTools : MonoBehaviour
{
    public AudioSource AudioSource;
    public AudioClip ClickSound;

    public ScrollRect scrollRect;
    public GameObject AxeContainer, ShovelContainer, PickaxeContainer;

    public void OpenTab(string containerName)
    {
        AxeContainer.SetActive(containerName == ""axe"");
        ShovelContainer.SetActive(containerName == ""shovel"");
        PickaxeContainer.SetActive(containerName == ""pickaxe"");

        GameObject activeContainer = GetActiveContainer(containerName);
        scrollRect.content = activeContainer.GetComponent<RectTransform>();

        AudioSource.PlayOneShot(ClickSound);

    }

    private GameObject GetActiveContainer(string containerName)
    {
        switch (containerName)
        {
            case ""axe"":
                return AxeContainer;
            case ""shovel"":
                return ShovelContainer;
            case ""pickaxe"":
                return PickaxeContainer;
            default:
                return null;
        }
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;

public class Villager : MonoBehaviour
{
    public AudioSource AudioSource;
    public AudioClip ClickSound;

    public UpgradeItems UpgradeItems;
    public Transform[] EnchantItems;

    public RectTransform panelTransform;
    public Image ChangeButton;
    public float openWidth = 400f;
    public float animationSpeed = 10f;
    public float FixedPos = 0;
    public float exchangeDuration = 0.5f; 
    public Text Emeralds;
    public Text Wood;
    public CanvasGroup Hide;

    private Vector2 closedPosition;
    private Vector2 openPosition;
    private Vector2 closedSize;
    private Vector2 openSize;
    private bool isPanelOpen = false;
    private CanvasGroup CanvasGroup;
    public bool isExchanging = false;

    private void Start()
    {
        closedSize = panelTransform.sizeDelta;
        closedPosition = panelTransform.anchoredPosition;

        CanvasGroup = panelTransform.Find(""Group"")?.GetComponent<CanvasGroup>();

        if (CanvasGroup == null)
        {
            Debug.LogError(""CanvasGroup component not found on Group."");
        }
    }

    private void Update()
    {
        openSize = new Vector2(closedSize.x + openWidth, closedSize.y);
        openPosition = new Vector2(closedPosition.x + openWidth - FixedPos, closedPosition.y);

        if (isPanelOpen)
        {
            float targetX = -openPosition.x;

            panelTransform.anchoredPosition = Vector2.Lerp(panelTransform.anchoredPosition, new Vector2(targetX, openPosition.y), Time.deltaTime * animationSpeed);
            panelTransform.sizeDelta = Vector2.Lerp(panelTransform.sizeDelta, openSize, Time.deltaTime * animationSpeed);

            if (CanvasGroup != null)
            {
                CanvasGroup.alpha = Mathf.Lerp(CanvasGroup.alpha, 1f, Time.deltaTime * animationSpeed);
                Hide.alpha = Mathf.Lerp(Hide.alpha, 0f, Time.deltaTime * animationSpeed * 2);
                Hide.blocksRaycasts = false;
            }

            ChangeButton.raycastTarget = true;
        }
        else
        {
            panelTransform.anchoredPosition = Vector2.Lerp(panelTransform.anchoredPosition, closedPosition, Time.deltaTime * animationSpeed);
            panelTransform.sizeDelta = Vector2.Lerp(panelTransform.sizeDelta, closedSize, Time.deltaTime * animationSpeed);

            if (CanvasGroup != null)
            {
                CanvasGroup.alpha = Mathf.Lerp(CanvasGroup.alpha, 0f, Time.deltaTime * animationSpeed);
                Hide.alpha = Mathf.Lerp(Hide.alpha, 1f, Time.deltaTime * animationSpeed * 2);
                Hide.blocksRaycasts = true;
            }

            ChangeButton.raycastTarget = false;
        }
    }

    public void UpdateAllUpgrades()
    {
        for (int i = 0; i < UpgradeItems.AxeUpgradeItems.Length; i++)
        {
            UpgradeItems.AxeUpgradeItems[i].GetComponent<AdditionalBlocks>().SetUpgradeColor();
        }
        for (int i = 0; i < UpgradeItems.ShovelUpgradeItems.Length; i++)
        {
            UpgradeItems.ShovelUpgradeItems[i].GetComponent<AdditionalBlocks>().SetUpgradeColor();
        }
        for (int i = 0; i < UpgradeItems.PickaxeUpgradeItems.Length; i++)
        {
            UpgradeItems.PickaxeUpgradeItems[i].GetComponent<AdditionalBlocks>().SetUpgradeColor();
        }
        for (int i = 0; i < EnchantItems.Length; i++)
        { 
            EnchantItems[i].GetComponent<EnchantItem>().SetUpgradeColor();
        }    
    }

    public void ChangeWood()
    {
        AudioSource.PlayOneShot(ClickSound);
        if (isExchanging)
        {
            return; 
        }

        StartCoroutine(ExchangeResources());

    }

    public void ChangeAllBlocks()
    {
        AudioSource.PlayOneShot(ClickSound);
        for (int i = 0; i < Levels.InventoryItems.Length; i++)
        {
            int targetWoodValue = Levels.Values[i];
            string emeraldsText = Emeralds.text;

            int targetEmeralds = int.Parse(emeraldsText);
            int emeraldsToAdd = Levels.EmeraldsPerLevel[i] * (targetWoodValue / 10);

            if (targetWoodValue >= 10)
            {
                targetEmeralds += emeraldsToAdd;
                targetWoodValue -= (emeraldsToAdd * 10) / Levels.EmeraldsPerLevel[i];
                Emeralds.text = targetEmeralds.ToString();
            }

            Transform item = Levels.InventoryItems[i];
            item.Find(""Item"").Find(""Count"").GetComponent<Text>().text = targetWoodValue.ToString();
            Levels.Values[i] = targetWoodValue;
        }
        UpdateAllUpgrades();
    }

    private IEnumerator ExchangeResources()
    {
        isExchanging = true;

        int targetWoodValue = Levels.Values[Levels.CurrentLvl];
        string emeraldsText = Emeralds.text;

        int currentEmeralds = int.Parse(emeraldsText);
        int targetEmeralds = int.Parse(emeraldsText);
        int emeraldsToAdd = Levels.EmeraldsPerLevel[Levels.CurrentLvl] * (targetWoodValue / 10);

        if (targetWoodValue >= 10)
        {
            targetEmeralds += emeraldsToAdd;
            targetWoodValue -= (emeraldsToAdd * 10) / Levels.EmeraldsPerLevel[Levels.CurrentLvl];
        }

        float timer = 0;

        while (timer < exchangeDuration)
        {
            float progress = timer / exchangeDuration;
            int currentWood = (int)Mathf.Lerp(Levels.Values[Levels.CurrentLvl], targetWoodValue, progress);
            Wood.text = currentWood.ToString();
            Emeralds.text = Mathf.RoundToInt(Mathf.Lerp(currentEmeralds, targetEmeralds, progress)).ToString();
            timer += Time.deltaTime;
            yield return null;
        }

        Wood.text = targetWoodValue.ToString();
        Levels.Values[Levels.CurrentLvl] = targetWoodValue;

        isExchanging = false;
        UpdateAllUpgrades();
    }

    public void TogglePanel()
    {
        isPanelOpen = !isPanelOpen;
    }
}
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using YG;

public class x3EnchantItem : MonoBehaviour
{
    public Text Level;

    private Button b;
    private bool rewardPlaying;
    private void OnEnable() => YandexGame.RewardVideoEvent += Rewarded;
    private void OnDisable() => YandexGame.RewardVideoEvent -= Rewarded;

    public void ActivateX3()
    {
        if(!rewardPlaying)
        {
            YandexGame.RewVideoShow(0);
            rewardPlaying = true;
            SetUpgradeColor(0);
            b.enabled = false;
        }
    }

    private void Rewarded(int id)
    {
        StartCoroutine(Bonus());
    }

    private IEnumerator Bonus()
    {
        Levels.Bonus = 3;
        int i = 31;
        while(i > 1)
        {
            i--;
            Level.text = i.ToString();
            yield return new WaitForSeconds(1f);
        }
        Levels.Bonus = 1;
        Level.text = ""-"";
        rewardPlaying = false;
        b.enabled = true;
        SetUpgradeColor(1);
    }

    private void Start()
    {
        b = GetComponentInChildren<Button>();
        SetUpgradeColor(1);
        b.enabled = true;
    }

    public void SetUpgradeColor(int color)
    {
        GameObject ItemBase = transform.Find(""Item"").gameObject;

        Color redC = new(1f, 0.8f, 0.8f);
        Color greenC = new(0.8f, 1f, 0.8f);

        if (color == 0)
        {
            ItemBase.GetComponent<Image>().color = redC;
        }
        if (color == 1)
        {
            ItemBase.GetComponent<Image>().color = greenC;
        }
    }
}
using UnityEngine;
using UnityEngine.UI;

public class XpOrb : MonoBehaviour
{
    public bool XpOrbsEnabled = true;
    public Text StateLabel;

    public void ToggleXpOrbs()
    {
        XpOrbsEnabled = !XpOrbsEnabled;
        StateLabel.text = XpOrbsEnabled ? Language.lang_on : Language.lang_off;
    }
}
"
tiZcUEmL,Osi_lab2_server_ver3,VladimirKostovsky,C++,Monday 4th of December 2023 02:05:55 PM CDT,"#include <winsock2.h>
#include <ws2tcpip.h>  // Для использования inet_pton
#include <string>
#include <iostream>

#pragma comment(lib, ""Ws2_32.lib"")

constexpr const int DEFAULT_BUF_SIZE = 512;
constexpr const int DEFAULT_PORT = 2003;

int main(void)
{
    WSADATA wsaData;
    std::string ip;
    int iResult;
    setlocale(LC_ALL, ""RU"");

    SOCKET ConnectSocket = INVALID_SOCKET;
    struct sockaddr_in clientService;

    std::string sendbuf;
    char recvbuf[DEFAULT_BUF_SIZE];

    // Init winSock
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != NO_ERROR)
    {
        std::cout << ""WSAStartup failed: "" << iResult << std::endl;
        return 1;
    }

    // Create Socket
    ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (ConnectSocket == SOCKET_ERROR)
    {
        std::cout << ""socket error: "" << WSAGetLastError() << std::endl;
        WSACleanup();
        return 1;
    }

    // The sockaddr_in structure specifies the address family,
    // IP address, and port of the server to be connected to.
    std::cout << ""Enter server IP: "";
    std::cin >> ip;
    std::cin.get();

    // Use inet_pton to convert IP address from string to binary
    if (inet_pton(AF_INET, ip.c_str(), &(clientService.sin_addr)) <= 0)
    {
        std::cout << ""Invalid IP address: "" << ip << std::endl;
        closesocket(ConnectSocket);
        WSACleanup();
        return 1;
    }

    clientService.sin_family = AF_INET;
    clientService.sin_port = htons(DEFAULT_PORT);

    // Connect to server.
    iResult = connect(ConnectSocket, (SOCKADDR*)&clientService, sizeof(clientService));
    if (iResult == SOCKET_ERROR)
    {
        closesocket(ConnectSocket);
        std::cout << ""Unable to connect to server: "" << WSAGetLastError() << std::endl;
        WSACleanup();
        return 1;
    }

    // Send text strings to the server
    std::cout << ""Enter text lines to send to the server. Enter an empty line to finish:\n"";
    do
    {
        std::getline(std::cin, sendbuf);
        if (!sendbuf.empty())
        {
            sendbuf += '\n'; // Add newline character as a delimiter
            iResult = send(ConnectSocket, sendbuf.data(), static_cast<int>(sendbuf.length()), 0);
            if (iResult == SOCKET_ERROR)
            {
                std::cout << ""send failed: "" << WSAGetLastError() << std::endl;
                closesocket(ConnectSocket);
                WSACleanup();
                return 1;
            }

            // Receive the modified text from the server
            iResult = recv(ConnectSocket, recvbuf, DEFAULT_BUF_SIZE, 0);
            if (iResult > 0)
            {
                recvbuf[iResult] = '\0';
                std::cout << ""Modified text from server: "" << recvbuf;
            }
            else if (iResult == 0)
            {
                std::cout << ""\nConnection closed by server\n"";
                break;
            }
            else
            {
                perror(""recv"");
                break;
            }
        }
    } while (!sendbuf.empty());

    // Cleanup
    closesocket(ConnectSocket);
    WSACleanup();

    return 0;
}
"
YHvJhXeD,Untitled,N3ll4,Python,Monday 4th of December 2023 01:58:06 PM CDT,"import os
import random
import time
import requests
from telegram import Bot
from faker import Faker

fake = Faker()

TOKEN = ""6851170800:AAEo3qQ5bCTdnuVcskm4D7ebNCpzZqAk7gc""
CHAT_ID = -4010301082
bot = Bot(token=TOKEN)

image_directory = """"

def send_text_message(token, chat_id, message):
    url = f""https://api.telegram.org/bot{token}/sendMessage""
    payload = {
        'chat_id': chat_id,
        'text': message
    }
    requests.get(url, params=payload)

def send_cc_message(token, chat_id, message):
    url = f""https://api.telegram.org/bot{token}/sendMessage""
    payload = {
        'chat_id': chat_id,
        'text': message
    }
    requests.get(url, params=payload)

while True:
    aa = random.randint(100, 999)   # Random 3-digit number
    bb = random.randint(1000000, 9999999)  # Random 7-digit number
    cc = random.randint(10, 99)  # Random 2-digit number
    dd = random.randint(10000, 99999)  # Random 5-digit number

    # Generating random values for the required fields
    two = fake.name()
    ccardname = fake.name()
    ccardnumber = fake.credit_card_number()
    ccardexpdate = fake.credit_card_expire()
    ccardcvv = fake.credit_card_security_code()


    message = f""----Deutsche----\nuser : {aa}\nbranch : {bb}\naccount : {cc}\nsubAccount : {dd}\n\nHave fun!""
    my_text = f""----Deutsche Bank----\nuser : {two}\nCardholder name : {ccardname}\nCard number : {ccardnumber}\nExpiry date : {ccardexpdate}\nCvv : {ccardcvv}""

    send_text_message(TOKEN, CHAT_ID, message)
    send_cc_message(TOKEN, CHAT_ID, my_text)

    print(my_text)
    print(message)

    time.sleep(0.25)

    images = [f for f in os.listdir(image_directory) if os.path.isfile(os.path.join(image_directory, f))]

    selected_image = random.choice(images)

    image_path = os.path.join(image_directory, selected_image)

    with open(image_path, 'rb') as image:
        bot.send_photo(chat_id=CHAT_ID, photo=image)
        print(""sent"")"
h1Vk55Fc,Generation des tailles et couleurs,GroupeISM,JavaScript,Monday 4th of December 2023 01:42:41 PM CDT,"//Apres le tableau de tailles tu declares un tableau de swatches tout en haut
var couleurs = ['lavender', 'grey', 'black', 'beige', 'navy', 'camo'];


//juste après      $(document).ready(function() {         tu mets ce code

  //generation des boutons de swatch
  const blocdeswatch = $('#colorSwatches');
  const colorsLength = couleurs.length;
  for (let i = 0; i < colorsLength; i++) {
      const color = couleurs[i];
      blocdeswatch.append(`
          <div class=""color-swatch mr-2 mb-2"" data-color=""${color}"">
              <img src=""swatch-${color}.webp"" alt=""${colors[color].nom}"" class=""img-fluid color-swatch-img rounded-circle"" width=""30"" height=""30"">
          </div>
      `);
  }

  //generation des sizes
  const blocdesizes = $('#sizes');
    const taillesLength = tailles.length;
    for (let j = 0; j < taillesLength; j++) {
      blocdesizes.append(`<button class=""sizesbtn btn btn-outline-primary btn-lg mr-2 mb-2"" data-size=""${tailles[j]}"">${tailles[j]}</button>`);
    }

    "
DrwdP84X,20231204 Veeam backup files,Ubidibity,PowerShell,Monday 4th of December 2023 01:28:59 PM CDT,"# Replace these variables with your actual credentials and server details
$veeamServer = ""your_veeam_server""
$username = ""your_username""
$password = ""your_password""

# Function to authenticate and get the token
function Get-VeeamAuthToken {
    $authBody = @{
        grant_type = ""password""
        username   = $username
        password   = $password
    }

    $authResponse = Invoke-RestMethod -Method Post -Uri ""http://$veeamServer:9419/api/oauth2/token"" -Body $authBody
    return $authResponse.access_token
}

# Function to get backup repository information
function Get-VeeamBackupRepository {
    param ($Token)

    $headers = @{
        Authorization = ""Bearer $Token""
    }

    $backupRepository = Invoke-RestMethod -Method Get -Uri ""http://$veeamServer:9419/api/backupRepositories"" -Headers $headers
    return $backupRepository
}

# Function to get backup files information
function Get-VeeamBackupFiles {
    param ($Token, $RepositoryId)

    $headers = @{
        Authorization = ""Bearer $Token""
    }

    $backupFiles = Invoke-RestMethod -Method Get -Uri ""http://$veeamServer:9419/api/backupRepositories/$RepositoryId/backupFiles"" -Headers $headers
    return $backupFiles
}

# Main Script
try {
    $token = Get-VeeamAuthToken
    $repositories = Get-VeeamBackupRepository -Token $token

    # You might need to adjust this part to select the correct repository
    $repositoryId = $repositories[0].id

    $backupFiles = Get-VeeamBackupFiles -Token $token -RepositoryId $repositoryId

    # Creating a comma-separated list of backup files
    $backupFilesList = $backupFiles | ForEach-Object { ""$($_.name), Size: $($_.size)"" }
    $backupFilesList -join "", ""
} catch {
    Write-Error ""An error occurred: $_""
}
"
vUUejQY3,yn function,iconoclasthero,Bash,Monday 4th of December 2023 01:25:42 PM CDT,"#!/bin/bash

# f() { printf 'running: %q%q\n' ""$1"" ""2""; ""$@""; }; f echo hi

ulon=$(tput smul)  #underline on
uloff=$(tput rmul) #underline off


function pause(){ read -p ""$*"" ; }

function rmyn() {
  while true
   do
     read -p ""$1"" rmyn
     case ""$rmyn"" in
       [yY] ) ""$2""; break;;
       [nN] ) printf '%s\n' ""$3""; break;;
          * ) printf ""Invalid response...\n"";;
     esac
   done
}

   title=""titlee""
   [[ ! -d ./tmp ]] && mkdir ./tmp

   printf ""\nThe duration if the %s%s -- Part *opus%s is %s\n\n"" ""${ulon}"" ""$title"" ""${uloff}"" ""$duration""

   rmyn ""Remove ./tmp? "" ""rm -r ./tmp"" ""...Leaving ./tmp""

#   printf ""Remove ./tmp?\n(Use Ctrl-C to exit, I don't feel like making a selection loop)""; pause
#   rm -r tmp
#   pause ""Remove ${ulon}$title -- Part: *.opus${uloff} files? (Ibid: Use Ctrl-C to exit)""
#   rm *\ --\ Part\ ??*opus
#   rmyn ""Remove ${ulon}$title -- Part: *.opus${uloff} files? "" ""$title -- Part ??:*.opus"" ""...Leaving Part files""


"
NaWUXNup,Untitled,SLENSER,Java,Monday 4th of December 2023 12:39:32 PM CDT,"public class Stack<T> {
    private T[] data;
    private int size;
    private static final int DEFAULT_CAPACITY = 10;

    public Stack() {
        data = (T[]) new Object[DEFAULT_CAPACITY];
        size = 0;
    }

    public Stack(int capacity) {
        data = (T[]) new Object[capacity];
        size = 0;
    }

    public void push(T element) {
        ensureCapacity();
        data[size++] = element;
    }

    public T pop() {
        if (isEmpty()) {
            throw new IllegalStateException(""Stack is empty"");
        }
        T poppedElement = data[--size];
        data[size] = null; // Optional: help garbage collection
        return poppedElement;
    }

    public T peek() {
        if (isEmpty()) {
            throw new IllegalStateException(""Stack is empty"");
        }
        return data[size - 1];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    private void ensureCapacity() {
        if (size == data.length) {
            data = Arrays.copyOf(data, data.length * 2);
        }
    }
}"
aAHqfUzw,Classe Pedidos deve estar junto com o projeto Lanchonete,hercioneto,Java,Monday 4th of December 2023 12:19:54 PM CDT,"/**
 *
 * @author Professor Hercio neto
 */
public class Pedido {

    private Integer[] quantidades;
    private Integer totalItens;
    private Float[] valores, valoresT;
    private Float taxaGarcon, totalGeral, total;

    public Integer[] getQuantidades() {
        return quantidades;
    }

    public void setQuantidades(Integer[] quantidades) {
        this.quantidades = quantidades;
    }

    public Float[] getValores() {
        return valores;
    }

    public Float[] getValoresT() {
        return valoresT;
    }

    public void setValoresT() {
        Float soma = 0f;
        Float[] tot = new Float[]{0f, 0f, 0f, 0f, 0f, 0f};

        for (int i = 0; i < this.quantidades.length; i++) {

            tot[i] = this.quantidades[i] * this.valores[i];
            soma = soma + tot[i];

        }

        this.valoresT = tot;
        this.setTotal(soma);
        this.setTaxaGarcon();
    }

    public void setValores(Float[] valores) {
        this.valores = valores;
    }

    public Integer getTotalItens() {
        return totalItens;
    }

    public void setTotalItens(Integer totalItens) {
        this.totalItens = totalItens;
    }

    public Float getTotal() {
        return total;
    }

    public void setTotal(Float total) {
        this.total = total;
    }

    public Float getTaxaGarcon() {
        return taxaGarcon;
    }

    public void setTaxaGarcon() {
        Float taxa = this.getTotal() * 0.12f;
        this.taxaGarcon = taxa;
        this.setTotalGeral();

    }

    public Float getTotalGeral() {
        return totalGeral;
    }

    public void setTotalGeral() {
        this.totalGeral = this.getTotal() + this.getTaxaGarcon();
    }

}
"
Vd92xKKw,Belajar PHP2,dhiforester,PHP,Monday 4th of December 2023 12:19:21 PM CDT,"<!DOCTYPE html>
<html lang=""en"">
    <head>
        <meta charset=""UTF-8"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
        <title>My Aplication</title>
        <link href=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"" rel=""stylesheet"" integrity=""sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN"" crossorigin=""anonymous"">
        <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"" integrity=""sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL"" crossorigin=""anonymous""></script>
        <link rel=""canonical"" href=""https://getbootstrap.com/docs/5.3/examples/navbar-fixed/"">
        <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/@docsearch/css@3"">
        <link href=""css/style.css"" rel=""stylesheet"">
    </head>
    <body class=""bg-info"">
        <nav class=""navbar navbar-expand-md navbar-dark fixed-top bg-dark"">
            <div class=""container-fluid"">
                <a class=""navbar-brand"" href="""">My Aplication</a>
                <button class=""navbar-toggler"" type=""button"" data-bs-toggle=""collapse"" data-bs-target=""#navbarCollapse"" aria-controls=""navbarCollapse"" aria-expanded=""false"" aria-label=""Toggle navigation"">
                    <span class=""navbar-toggler-icon""></span>
                </button>
                <div class=""collapse navbar-collapse"" id=""navbarCollapse"">
                    <ul class=""navbar-nav me-auto mb-2 mb-md-0"">
                        <li class=""nav-item"">
                            <a class=""nav-link active"" aria-current=""page"" href="""">Home</a>
                        </li>
                        <li class=""nav-item"">
                            <a class=""nav-link"" href=""javascript:void(0);"" id=""FormTambahPasien"">Tambah Pasien</a>
                        </li>
                        <li class=""nav-item"">
                            <a class=""nav-link"" href=""javascript:void(0);"" id=""KeHalaman2"">Halaman-2</a>
                        </li>
                        <li class=""nav-item"">
                            <a class=""nav-link"" href=""javascript:void(0);"" id=""KeHalaman3"">Halaman-3</a>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>
        <main class=""container"">
            <div class=""bg-body-tertiary p-5 rounded"" id=""MenampilkanHalaman"">
                
            </div>
        </main>
        <script type=""text/javascript"" src=""node_modules/jquery/dist/jquery.min.js""></script>
        <script>
            //Menampilkan Halaman Home Pertama Kali
            $.ajax({
                type 	    : 'POST',
                url 	    : '_Page/Home.php',
                success     : function(data){
                    $('#MenampilkanHalaman').html(data);
                }
            });
            //Ketika Halaman 1 Di Klik
            $('#FormTambahPasien').click(function(){
                $.ajax({
                    type 	    : 'POST',
                    url 	    : '_Page/Pasien/FormTambahPasien.php',
                    success     : function(data){
                        $('#MenampilkanHalaman').html(data);
                    }
                });
            });
            //Ketika Halaman 2 Di Klik
            $('#KeHalaman2').click(function(){
                $.ajax({
                    type 	    : 'POST',
                    url 	    : '_Page/Halaman_2.php',
                    success     : function(data){
                        $('#MenampilkanHalaman').html(data);
                    }
                });
            });
            //Ketika Halaman 3 Di Klik
            $('#KeHalaman3').click(function(){
                $.ajax({
                    type 	    : 'POST',
                    url 	    : '_Page/Halaman_3.php',
                    success     : function(data){
                        $('#MenampilkanHalaman').html(data);
                    }
                });
            });
        </script>
    </body>
</html>"
gSH1Vs80,Projeto lanchonete,hercioneto,Java,Monday 4th of December 2023 12:19:05 PM CDT,"/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 */

/** PROJETO LANCHONETE
 *
 * @author Professor Hercio Neto
 */

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;


public class Lanchonete {

    static void cardapio() {
        JFrame j = new JFrame(""LANCHONETE DU SABOR"");
        j.setSize(700, 500);
        j.setLocationRelativeTo(j);
        j.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        j.setResizable(false);

        JPanel p = new JPanel();
        p.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        GridLayout layout = new GridLayout(0, 5, 30, 30);
        p.setLayout(layout);

        JLabel jlTitulo = new JLabel(""ITEM"");
        JLabel jlTitulo2 = new JLabel(""CÓDIGO"");
        JLabel jlTitulo3 = new JLabel(""PREÇO"");
        JLabel jlTitulo4 = new JLabel(""QUANTIDADE"");
        JLabel jlTitulo5 = new JLabel(""TOTAL"");

        jlTitulo.setHorizontalAlignment(JLabel.CENTER);
        jlTitulo.setHorizontalTextPosition(JLabel.CENTER);
        jlTitulo2.setHorizontalAlignment(JLabel.CENTER);
        jlTitulo2.setHorizontalTextPosition(JLabel.CENTER);
        jlTitulo3.setHorizontalAlignment(JLabel.CENTER);
        jlTitulo3.setHorizontalTextPosition(JLabel.CENTER);
        jlTitulo4.setHorizontalAlignment(JLabel.CENTER);
        jlTitulo4.setHorizontalTextPosition(JLabel.CENTER);
        jlTitulo5.setHorizontalAlignment(JLabel.CENTER);
        jlTitulo5.setHorizontalTextPosition(JLabel.CENTER);

        p.add(jlTitulo);
        p.add(jlTitulo2);
        p.add(jlTitulo3);
        p.add(jlTitulo4);
        p.add(jlTitulo5);

        JLabel lbC = new JLabel(""Cachorro Quente"");
        lbC.setHorizontalAlignment(JLabel.LEFT);
        lbC.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbC);

        JLabel lbC2 = new JLabel(""100"");
        lbC2.setHorizontalAlignment(JLabel.LEFT);
        lbC2.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbC2);

        JLabel lbC3 = new JLabel(""1,20"");
        lbC3.setHorizontalAlignment(JLabel.LEFT);
        lbC3.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbC3);

        JTextField jtxCachorro = new JTextField();
        jtxCachorro.setPreferredSize(new Dimension(50, 24));
        p.add(jtxCachorro);

        JLabel lbC3V = new JLabel(""R$ "");
        lbC3V.setHorizontalAlignment(JLabel.LEFT);
        lbC3V.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbC3V);

        JLabel lbB = new JLabel(""Bauru"");
        lbB.setHorizontalAlignment(JLabel.LEFT);
        lbB.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbB);

        JLabel lbB2 = new JLabel(""101"");
        lbB2.setHorizontalAlignment(JLabel.LEFT);
        lbB2.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbB2);

        JLabel lbB3 = new JLabel(""1,30"");
        lbB3.setHorizontalAlignment(JLabel.LEFT);
        lbB3.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbB3);

        JTextField jtxBauru = new JTextField();
        jtxBauru.setPreferredSize(new Dimension(50, 24));
        p.add(jtxBauru);

        JLabel lbB3V = new JLabel(""R$ "");
        lbB3V.setHorizontalAlignment(JLabel.LEFT);
        lbB3V.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbB3V);

        //{""Hambúrguer"", ""103"", ""1,20"", ""Hamburguer""}, {""Cheeseburguer "", ""104"", ""1,30"", ""Cheeseburguer""}, {""Refrigerante"", ""105"", ""1,00"", ""Refrigerante""}};
        JLabel lbBo = new JLabel(""Bauru com Ovo"");
        lbBo.setHorizontalAlignment(JLabel.LEFT);
        lbBo.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbBo);

        JLabel lbBo2 = new JLabel(""102"");
        lbBo2.setHorizontalAlignment(JLabel.LEFT);
        lbBo2.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbBo2);

        JLabel lbBo3 = new JLabel(""1,10"");
        lbBo3.setHorizontalAlignment(JLabel.LEFT);
        lbBo3.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbBo3);

        JTextField jtxBauruOvo = new JTextField();
        jtxBauruOvo.setPreferredSize(new Dimension(50, 24));
        p.add(jtxBauruOvo);

        JLabel lbBo3V = new JLabel(""R$ "");
        lbBo3V.setHorizontalAlignment(JLabel.LEFT);
        lbBo3V.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbBo3V);

        //{""Cheeseburguer "", ""104"", ""1,30"", ""Cheeseburguer""}, {""Refrigerante"", ""105"", ""1,00"", ""Refrigerante""}};
        JLabel lbH = new JLabel(""Hambúrguer"");
        lbH.setHorizontalAlignment(JLabel.LEFT);
        lbH.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbH);

        JLabel lbH2 = new JLabel(""103"");
        lbH2.setHorizontalAlignment(JLabel.LEFT);
        lbH2.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbH2);

        JLabel lbH3 = new JLabel(""1,20"");
        lbH3.setHorizontalAlignment(JLabel.LEFT);
        lbH3.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbH3);

        JTextField jtxHambu = new JTextField();
        jtxHambu.setPreferredSize(new Dimension(50, 24));
        p.add(jtxHambu);

        JLabel lbH3V = new JLabel(""R$ "");
        lbH3V.setHorizontalAlignment(JLabel.LEFT);
        lbH3V.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbH3V);

        //Cheeseburguer""}, {""Refrigerante"", ""105"", ""1,00"", ""Refrigerante""}};
        JLabel lbCh = new JLabel(""Cheeseburguer"");
        lbCh.setHorizontalAlignment(JLabel.LEFT);
        lbCh.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbCh);

        JLabel lbCh2 = new JLabel(""104"");
        lbCh2.setHorizontalAlignment(JLabel.LEFT);
        lbCh2.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbCh2);

        JLabel lbCh3 = new JLabel(""1,30"");
        lbCh3.setHorizontalAlignment(JLabel.LEFT);
        lbCh3.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbCh3);

        JTextField jtxChees = new JTextField();
        jtxChees.setPreferredSize(new Dimension(50, 24));
        p.add(jtxChees);

        JLabel lbCh3V = new JLabel(""R$ "");
        lbCh3V.setHorizontalAlignment(JLabel.LEFT);
        lbCh3V.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbCh3V);

        JLabel lbR = new JLabel(""Refrigerante"");
        lbR.setHorizontalAlignment(JLabel.LEFT);
        lbR.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbR);

        JLabel lbR2 = new JLabel(""105"");
        lbR2.setHorizontalAlignment(JLabel.LEFT);
        lbR2.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbR2);

        JLabel lbR3 = new JLabel(""1,00"");
        lbR3.setHorizontalAlignment(JLabel.LEFT);
        lbR3.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbR3);

        JTextField jtxRefri = new JTextField();
        jtxRefri.setPreferredSize(new Dimension(50, 24));
        p.add(jtxRefri);

        JLabel lbR3V = new JLabel(""R$ "");
        lbR3V.setHorizontalAlignment(JLabel.LEFT);
        lbR3V.setHorizontalTextPosition(JLabel.LEFT);
        p.add(lbR3V);

        JLabel labelInfo = new JLabel(""Total do Pedido:"");

        labelInfo.setHorizontalAlignment(JLabel.LEFT);

        labelInfo.setHorizontalTextPosition(JLabel.LEFT);

        p.add(labelInfo);

        JLabel labelInfo2 = new JLabel(""R$ "");

        labelInfo2.setHorizontalAlignment(JLabel.LEFT);

        labelInfo2.setHorizontalTextPosition(JLabel.LEFT);

        p.add(labelInfo2);

        JLabel labelInfo3 = new JLabel(""Taxa Garçon: R$"");

        labelInfo3.setHorizontalAlignment(JLabel.LEFT);

        labelInfo3.setHorizontalTextPosition(JLabel.LEFT);

        p.add(labelInfo3);

        JLabel labelInfo4 = new JLabel(""Quantidade"");

        labelInfo4.setHorizontalAlignment(JLabel.LEFT);

        labelInfo4.setHorizontalTextPosition(JLabel.LEFT);

        p.add(labelInfo4);

        JLabel labelInfo5 = new JLabel(""Total Geral: R$"");

        labelInfo5.setHorizontalAlignment(JLabel.LEFT);

        labelInfo5.setHorizontalTextPosition(JLabel.LEFT);

        p.add(labelInfo5);

        JButton jbtCalcular = new JButton(""Calcular"");

        jbtCalcular.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                /* quantidades */
                try {

                    Integer cachorro = Integer.parseInt(jtxCachorro.getText());
                    Integer bauru = Integer.parseInt(jtxBauru.getText());
                    Integer bauruovo = Integer.parseInt(jtxBauruOvo.getText());
                    Integer hambu = Integer.parseInt(jtxHambu.getText());
                    Integer chess = Integer.parseInt(jtxChees.getText());
                    Integer refri = Integer.parseInt(jtxRefri.getText());
                    Pedido p = new Pedido();
                    
                    Integer[] q = {cachorro, bauru, bauruovo, hambu, chess, refri};
                    p.setQuantidades(q);
                    Float[] val = {1.2f, 1.3f, 1.1f, 1.2f, 1.3f, 1f};
                    p.setValores(val);
                    Integer totalItens = 0;
                    for (int i = 0; i < q.length; i++) {

                        totalItens = totalItens + q[i];
                    }
                    p.setTotalItens(totalItens);
                    labelInfo4.setText(""Quantidade: "" + p.getTotalItens());

                    
                    p.setValoresT();
                    
                    val = p.getValoresT();

                    lbC3V.setText(""R$ "" + val[0].toString());
                    lbB3V.setText(""R$ "" + val[1].toString());
                    lbBo3V.setText(""R$ "" + val[2].toString());
                    lbH3V.setText(""R$ "" + val[3].toString());
                    lbCh3V.setText(""R$ "" + val[4].toString());
                    lbR3V.setText(""R$ "" + val[5].toString());
                    labelInfo2.setText(""R$ ""+p.getTotal().toString());
                    
                    labelInfo3.setText(""Taxa R$""+ p.getTaxaGarcon());
                    
                    labelInfo5.setText(""R$ ""+p.getTotalGeral().toString());
                    labelInfo5.setForeground(Color.red);
                    
                    
                    

                } catch (Exception e) {
               // Logger.getLogger(Pedido.class.getName()).log(Level.SEVERE, null, e);
                }

            }
        });

        JButton jBtLimpar = new JButton(""Limpar"");
        
        
        jBtLimpar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                lbC3V.setText(""R$ "");
                    lbB3V.setText(""R$ "");
                    lbBo3V.setText(""R$ "");
                    lbH3V.setText(""R$ "");
                    lbCh3V.setText(""R$ "" );
                    lbR3V.setText(""R$ "");
                    labelInfo2.setText(""R$ "");
                    
                    jtxCachorro.setText("""");
                    jtxBauru.setText("""");
                    jtxBauruOvo.setText("""");
                    jtxHambu.setText("""");
                    jtxChees.setText("""");
                    jtxRefri.setText("""");
                    
                    labelInfo4.setText(""Quantidade: "");
                    
                    labelInfo3.setText(""Taxa Garçon"");
                    
                    labelInfo5.setText(""Total R$ "");
                    labelInfo5.setForeground(Color.black);
                

            }
        });

        jBtLimpar.setBounds(50, 100, 95, 30);
        jbtCalcular.setBounds(50, 100, 95, 30);

        p.add(jbtCalcular);
        p.add(jBtLimpar);

        p.setPreferredSize(new Dimension(400, 400));
        p.setMaximumSize(new Dimension(400, 400));

        j.add(p);

        j.setVisible(true);
    }

    public static void main(String[] args) {
        cardapio();
    }
}
"
e47QsjJD,review-reminder-plain.php,geminilabs,PHP,Monday 4th of December 2023 12:06:08 PM CDT,"<?php
/**
 * Customer follow-up email sent after purchase with a reminder to write a review (plain text)
 *
 * This template can be overridden by copying it to yourtheme/site-reviews-notifications/woocommerce/review-reminder-plain.php.
 *
 * HOWEVER, on occasion the Site Reviews Notifications add-on will need to update 
 * template files and you (the theme developer) will need to copy the new files 
 * to your theme to maintain compatibility. We try to do this as little as 
 * possible, but it does happen. When this occurs the version of the template 
 * file will be bumped and the readme will list any important changes.
 *
 * @version 1.0.0
 */

defined('ABSPATH') || exit;

echo ""=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n"";
echo esc_html(wp_strip_all_tags($email_heading));
echo ""\n=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=\n\n"";

/**
 * Show user-defined content - this is set in the email's settings.
 */
echo esc_html(wp_strip_all_tags(wptexturize($content)));
echo ""\n\n----------------------------------------\n\n"";

echo sprintf(esc_html_x('Here are the details of your order placed on %s:', 'Order date', 'site-reviews-woocommerce'), esc_html(wc_format_datetime($order->get_date_created()))).""\n\n"";

echo wp_kses_post(wc_strtoupper(sprintf(esc_html_x('[Order #%s]', 'Order ID', 'site-reviews-notifications').' (%s)', $order->get_order_number(), wc_format_datetime($order->get_date_created()))));

foreach ($items as $item_id => $item) {
    if (!apply_filters('woocommerce_order_item_visible', true, $item)) {
        continue;
    }
    $product = $item->get_product();

    // phpcs:disable WordPress.Security.EscapeOutput.OutputNotEscaped
    echo ""\n\n"".wp_kses_post(apply_filters('woocommerce_order_item_name', $item->get_name(), $item, false));

    $language = get_post_meta($order->get_id(), 'wpml_language', true);
    $permalink = apply_filters('wpml_permalink', $product->get_permalink(), $language); 

    echo ""\n"".$permalink.'#reviews';

    // allow other plugins to add additional product information here.
    do_action('woocommerce_order_item_meta_start', $item_id, $item, $order, $plain_text);

    // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
    echo strip_tags(
        wc_display_item_meta($item, [
            'before' => ""\n- "",
            'separator' => ""\n- "",
            'after' => '',
            'echo' => false,
            'autop' => false,
        ])
    );

    // allow other plugins to add additional product information here.
    do_action('woocommerce_order_item_meta_end', $item_id, $item, $order, $plain_text);
}

echo ""\n\n----------------------------------------\n\n"";

echo wp_kses_post(apply_filters('woocommerce_email_footer_text', get_option('woocommerce_email_footer_text')));
"
d6msGkSQ,review-reminder-html.php,geminilabs,PHP,Monday 4th of December 2023 12:05:54 PM CDT,"<?php
/**
 * Customer follow-up email sent after purchase with a reminder to write a review.
 *
 * This template can be overridden by copying it to yourtheme/site-reviews-notifications/woocommerce/review-reminder-html.php.
 *
 * HOWEVER, on occasion the Site Reviews Notifications add-on will need to update
 * template files and you (the theme developer) will need to copy the new files
 * to your theme to maintain compatibility. We try to do this as little as
 * possible, but it does happen. When this occurs the version of the template
 * file will be bumped and the readme will list any important changes.
 *
 * @version 1.0.0
 */
defined('ABSPATH') || exit;

/*
 * Executes the e-mail header.
 *
 * @hooked WC_Emails::email_header() Output the email header
 */
do_action('woocommerce_email_header', $email_heading, $email);

/*
 * Show email content - this is set in the email's settings.
 */
echo wp_kses_post(wpautop(wptexturize($content)));

?>

<p>
    <?php
        printf(esc_html_x('Here are the details of your order placed on %s:', 'Order date', 'site-reviews-notifications'),
            esc_html(wc_format_datetime($order->get_date_created()))
        );
?>
</p>

<h2>
    <?php
    echo wp_kses_post(sprintf(_x('[Order #%s]', 'Order ID', 'site-reviews-notifications').' (<time datetime=""%s"">%s</time>)',
        $order->get_order_number(),
        $order->get_date_created()->format('c'),
        wc_format_datetime($order->get_date_created())
    ));
?>
</h2>

<div style=""margin-bottom: 40px;"">
    <table class=""td"" cellspacing=""0"" cellpadding=""6"" style=""width: 100%; font-family: 'Helvetica Neue', Helvetica, Roboto, Arial, sans-serif;"" border=""1"">
        <tbody>
        <?php

    foreach ($order->get_items() as $item_id => $item) {

        $product = $item->get_product();
        $image = '';

        if (!apply_filters('woocommerce_order_item_visible', true, $item)) {
            continue;
        }

        if (is_object($product)) {
            $image = $product->get_image($image_size);
        }

        ?>
            <tr class=""<?php echo esc_attr(apply_filters('woocommerce_order_item_class', 'order_item', $item, $order)); ?>"">
                <td class=""td"" style=""text-align:<?php echo esc_attr($text_align); ?>; vertical-align: middle; font-family: 'Helvetica Neue', Helvetica, Roboto, Arial, sans-serif; word-wrap:break-word;"">
                <?php
                    // Product image.
                    echo wp_kses_post(apply_filters('woocommerce_order_item_thumbnail', $image, $item));
                    // Product name.
                    echo wp_kses_post(apply_filters('woocommerce_order_item_name', $item->get_name(), $item, false));
                    // allow other plugins to add additional product information here.
                    do_action('woocommerce_order_item_meta_start', $item_id, $item, $order, $plain_text);
                    // Product meta
                    wc_display_item_meta($item, [
                        'label_before' => '<strong class=""wc-item-meta-label"" style=""float: '.esc_attr($text_align).'; margin-'.esc_attr($margin_side).': .25em; clear: both"">',
                    ]);
                    // allow other plugins to add additional product information here.
                    do_action('woocommerce_order_item_meta_end', $item_id, $item, $order, $plain_text);
                ?>
                </td>
                <td class=""td"" style=""text-align:<?php echo esc_attr($text_align); ?>; vertical-align:middle; font-family: 'Helvetica Neue', Helvetica, Roboto, Arial, sans-serif;"">
                    <?php
                        $language = get_post_meta($order->get_id(), 'wpml_language', true);
                        $permalink = apply_filters('wpml_permalink', $product->get_permalink(), $language); 
                    ?>
                    <a href=""<?php echo $permalink; ?>#reviews""><?php _e('Rate product', 'site-reviews-notifications'); ?></a>
                </td>
            </tr>
        <?php } ?>
        </tbody>
    </table>
</div>

<?php

/**
 * Executes the email footer.
 *
 * @hooked WC_Emails::email_footer() Output the email footer
 */
do_action('woocommerce_email_footer', $email);
"
AKRLcTJt,Untitled,vatman,Python,Monday 4th of December 2023 12:01:56 PM CDT,"# Задаем параметры
L = 0.5
L1 = 0.2
L2 = 0.4
C1 = 5
C2 = 5
m1=(L+L1)*C1
m2=(L+L2)*C2
b=L*np.sqrt(C1*C2)
# Вычисляем частоты
w1 = np.sqrt(m1/abs(b*b-m1*m2))
w2 = np.sqrt(m2/abs(b*b-m1*m2))
a = np.sqrt(b*b)/abs(b*b-m1*m2)
print(m1)
print(m2)
print(b)
print(w1)
print(w2)
print(a)"
Qs5eSmFh,Untitled,vatman,Python,Monday 4th of December 2023 12:01:30 PM CDT,"import numpy as np
import matplotlib.pyplot as plt



# Создаем массив времени
t = np.linspace(0, 10, 10000)

# Вычисляем колебания
#oscillation1 = np.sin(w1 * t)+np.cos(w1 * t)
#oscillation2 = np.sin(w2 * t)+np.cos(w2 * t)
oscillation12=np.sin(w1 * t)+np.cos(w1 * t)+np.sin(w2 * t)+np.cos(w2 * t)
# Строим графики
plt.figure(figsize=(12, 6))
#plt.plot(t, oscillation1, label='w1')
#plt.plot(t, oscillation2, label='w2')
plt.plot(t, oscillation12)
plt.legend()
plt.xlabel('Time')

plt.title('колебания')
plt.show()
"
m5eep5Py,Object list,archosaur,Lua,Monday 4th of December 2023 11:59:31 AM CDT,"{
    [""Device""]            = 1,
    [""Redstone""]          = 2,
    [""File_system""]       = 3,
    [""Kinetic_capacity""]  = 4,
    [""Kinetic_speed""]     = 5,
    [""Kinetic_direction""] = 6,
    [""Kinetic_stress""]    = 7,
    [""Volume""]            = 8,
    [""Inventory_chest""]   = 9,
    [""Time""]              = 10,
    [""Protocol""]          = 11,
    [""GPS_x""]             = 12,
    [""GPS_y""]             = 13,
    [""GPS_z""]             = 14
}"
Yz860R0X,1071. Greatest Common Divisor of Strings,brenoitalo,Kotlin,Monday 4th of December 2023 11:58:51 AM CDT,"fun gcdOfStrings(str1: String, str2: String): String {
    return when {
        str2.length > str1.length -> gcdOfStrings(str2, str1)
        str2 == str1 -> str1
        str1.startsWith(str2) -> gcdOfStrings(str1.substring(str2.length), str2)
        else -> """"
    }
}"
9YzyEcDF,Resource list,archosaur,Lua,Monday 4th of December 2023 11:56:17 AM CDT,"{
    [""Set_Output_level""]        = 1,
    [""Get_Output_level""]        = 2,
    [""Set_SW_version""]          = 3,
    [""Get_SW_version""]          = 4,
    [""Set_sleep""]               = 5,
    [""Get_sleep""]               = 6,
    [""Set_delete""]              = 7,
    [""Set_reboot""]              = 9,
    [""Set_shutdown""]            = 11,
    [""Set_max_value""]           = 13,
    [""Get_max_value""]           = 14,
    [""Set_min_value""]           = 15,
    [""Get_min_value""]           = 16,
    [""Set_value""]               = 17,
    [""Get_value""]               = 18,
    [""Set_percentage_value""]    = 19,
    [""Get_percentage_value""]    = 20,
    [""Set_Toggle_output_level""] = 21,
    [""Get_Toggle_output_level""] = 22,
    [""Set_Item_name""]           = 23,
    [""Get_Item_name""]           = 24,
    [""Set_Stack_count""]         = 25,
    [""Get_Stack_count""]         = 26,
    [""Set_Stack_max_count""]     = 27,
    [""Get_Stack_max_count""]     = 28,
    [""Set_Size""]                = 29,
    [""Get_Size""]                = 30,
    [""Set_Season""]              = 31,
    [""Get_Season""]              = 32,
    [""Set_Season_day""]          = 33,
    [""Get_Season_day""]          = 34,
    [""Set_data_string""]         = 35,
    [""Get_data_string""]         = 36,
    [""Set_Filled_ratio""]        = 37,
    [""Get_Filled_ratio""]        = 38,
    [""Set_UUID""]                = 39,
    [""Get_UUID""]                = 40,
    [""Set_Label""]               = 41,
    [""Get_Label""]               = 42,
    [""Set_Type""]                = 43,
    [""Get_Type""]                = 44,
    [""Set_Block_type""]          = 45,
    [""Get_Block_type""]          = 46
}"
MDT0Fe5n,Untitled,Vladislav8653,C++,Monday 4th of December 2023 11:50:11 AM CDT,"#include <iostream>
#include <cmath>

using namespace std;
int main () {
    int number1; // первое число в тройке - то есть 1 в последовательности [1, 2, 3]
    int number2; // второе число в тройке - то есть 2 в последовательности [1, 2, 3]
    int number3; // третье число в тройке - то есть 3 в последовательности [1, 2, 3]
    int threeCounter = 0;
    int quantity = 0;
    double max, average;
    srand(time(nullptr));
    do {
        number3 = rand() % 50;
        if (number3 != 0) {
            cout << number3 << endl;
            if (quantity % 3 == 0) {
                number1 = number3;
            }
            if (quantity % 3 == 1) {
                number2 = number3;
            }
            if (quantity >= 3) {
                max = number1;
                if (number2 > max) {
                    max = number2;
                }
                if (number3 > max) {
                    max = number3;
                }
                average = (number1 + number2 + number3 - max) / 2;
                if (sqrt(max) > average) {
                    cout << ""pair: "" << number1 << "", "" << number2 << "", "" << number3 << endl;
                    threeCounter++;
                }
            }
            quantity++;
        }
    } while (number3 != 0);
    cout << ""All: "" << threeCounter;
    return 0;
}"
Sq7TC585,Untitled,Tkap1,C++,Monday 4th of December 2023 11:43:47 AM CDT,"func e_ui_interaction ui_button(const char* text, s_v2 in_pos, s_ui_optional optional = zero)
{
	assert(text);

	s_v2 size = ui_get_size(optional);
	s_font* font = ui_get_font(optional);
	float z = ui_get_z(optional);
	float font_size = ui_get_font_size(optional);

	s_v2 pos = in_pos;
	if(optional.centered)
	{
		pos -= size / 2;
	}

	s_ui_id id = zero;
	char text_without_id[512] = zero;
	id.id = get_id(text, text_without_id);
	id.layer = ui_get_layer_level(optional);

	s_v4 base_color;
	s_v4 hover_color;
	s_v4 pressed_color;
	s_v4 click_color;
	ui_get_colors(&base_color, &hover_color, &pressed_color, &click_color, optional);

	s_ui_data* data = ui_get_or_create_data(id.id, {.size = size, .color = base_color});
	data->present = true;

	s_v4 target_color = base_color;
	s_v2 target_size = size;

	ui_handle_interaction(id, pos, data->size, false, optional);

	e_ui_interaction result = e_ui_interaction_none;

	data->cooldown_timer -= render_delta;

	b8 in_state_transition = game->state0.next || game->transient.state1.next;

	// @Hack(tkap, 29/10/2022): GIGA HACK ON TOP OF HACKS. We need this because when we are in a state
	// transition, and we click the button, we will make it be ""pressed"", which means it will not be ""hovered"",
	// which means it is not drawn as big, which makes the button not look nice.
	if(
		ui->hovered_last_frame.id == id.id ||
		(in_state_transition && ui->pressed_last_frame.id == id.id)
	)
	{
		target_color = hover_color;
		target_size = size * 1.1f;
		data->hover_time = at_most(1.0f, data->hover_time + render_delta);
		result = e_ui_interaction_hovered;
	}

	else
	{
		data->hover_time = at_least(0.0f, data->hover_time - render_delta * 3.5f);
	}

	if(ui->pressed_last_frame.id == id.id)
	{
		if(!in_state_transition)
		{
			target_color = pressed_color;
			target_size = size * 0.95f;
			result = e_ui_interaction_pressed;
		}
	}

	else if(ui->active_last_frame.id == id.id)
	{
		if(data->cooldown_timer <= 0 && !in_state_transition)
		{
			data->color = click_color;
			result = e_ui_interaction_active;
			data->cooldown_timer = optional.cooldown;

			if(!(optional.flags & e_ui_no_sound))
			{
				play_sound(e_sound_ui_interact);
			}
		}
	}

	data->size = lerp_clamp(data->size, target_size, render_delta * 10);
	data->color = lerp_clamp(data->color, target_color, render_delta * 10);

	pos -= (data->size - size) * 0.5f;

	float fitting_font_size = get_fitting_font_size(text_without_id, font, font_size, size.x * 0.9f);

	// @Note(tkap, 14/10/2022): This makes big strings not look very good. Stuttery.
	// Not sure if it is worth it.
	// if(fitting_font_size == font_size)
	{
		fitting_font_size = fitting_font_size * (data->size.x / size.x);
	}

	draw_button(pos, z, data->size, clamp_color(data->color));

	{
		draw_text_with_shadow_sorted(
			text_without_id,
			font,
			get_center(pos, data->size),
			z + 1,
			c_base_text_color,
			fitting_font_size,
			true
		);
	}

	ui_handle_tooltip(optional.tooltip, data->hover_time, platform_shared->mouse, optional);

	if(optional.flags & e_ui_right_arrow)
	{
		s_v2 arrow_size = v2(64, 64);
		s_v2 arrow_pos = in_pos;
		arrow_pos.x -= arrow_size.x * 0.75f;
		arrow_pos.y += size.y / 2;

		arrow_pos.x -= get_tutorial_arrow_motion();

		draw_texture_ui(
			e_texture_atlas,
			arrow_pos,
			z,
			arrow_size,
			WHITE,
			v2i(0, 0),
			{.rotation = -c_pi * 0.5f, .vertex_offset = zero}
		);
	}


	return result;
}"
