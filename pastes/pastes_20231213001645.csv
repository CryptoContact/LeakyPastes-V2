id,title,username,language,date,content
u0Qe7ym6,2023-12-12_stats.json,rdp_snitch,JSON,Tuesday 12th of December 2023 06:15:07 PM CDT,"{
  ""ip"": {
    ""194.165.17.21"": 14,
    ""62.204.41.240"": 6,
    ""62.204.61.207"": 2,
    ""45.227.254.55"": 2,
    ""58.218.204.51"": 6,
    ""141.98.81.34"": 1,
    ""87.251.75.145"": 2,
    ""80.94.95.238"": 5,
    ""167.94.138.36"": 1,
    ""198.235.24.219"": 3,
    ""179.60.147.5"": 1,
    ""94.232.45.92"": 3,
    ""87.251.75.64"": 1,
    ""62.122.184.188"": 2,
    ""212.70.149.146"": 6,
    ""185.170.144.3"": 2,
    ""196.190.117.7"": 2,
    ""194.165.16.73"": 2,
    ""198.235.24.107"": 3,
    ""103.167.92.115"": 3,
    ""195.130.73.252"": 1,
    ""79.171.148.162"": 3,
    ""36.134.144.113"": 6,
    ""51.75.160.42"": 4,
    ""198.74.56.135"": 1,
    ""118.194.236.134"": 1,
    ""198.235.24.101"": 3,
    ""193.56.113.62"": 2,
    ""212.83.189.163"": 1,
    ""194.165.16.37"": 2,
    ""188.68.205.110"": 1,
    ""176.113.115.13"": 3,
    ""152.53.20.158"": 2,
    ""185.170.144.113"": 6,
    ""185.190.24.101"": 1,
    ""198.235.24.118"": 3,
    ""149.102.131.218"": 1,
    ""172.105.112.111"": 42
  },
  ""asn"": {
    ""AS48721"": 18,
    ""AS59425"": 6,
    ""AS34412"": 2,
    ""AS267784"": 2,
    ""AS4134"": 6,
    ""AS209588"": 2,
    ""AS208091"": 3,
    ""AS204428"": 11,
    ""AS398324"": 1,
    ""AS396982"": 12,
    ""AS212482"": 3,
    ""AS57523"": 2,
    ""AS197414"": 8,
    ""AS24757"": 2,
    ""AS63737"": 3,
    ""AS5408"": 1,
    ""AS59701"": 3,
    ""AS9808"": 6,
    ""AS16276"": 4,
    ""AS63949"": 43,
    ""AS135377"": 1,
    ""AS209854"": 2,
    ""AS12876"": 1,
    ""AS49505"": 1,
    ""AS57678"": 3,
    ""AS197540"": 2,
    ""AS211632"": 1,
    ""AS51167"": 1
  },
  ""isp"": {
    ""Flyservers S.A."": 22,
    ""Horizon LLC"": 6,
    ""Saba Hour Yeganeh Co. ( Private Joint Stock)"": 2,
    ""Chinanet"": 6,
    ""Xhost Internet Solutions LP"": 14,
    ""SS-Net"": 11,
    ""Censys, Inc."": 1,
    ""Google LLC"": 12,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Ethiotelecom"": 2,
    ""Vietserver Services Technology Company Limited"": 3,
    ""T-epirus - UOI"": 1,
    ""LytzenIT A/S"": 3,
    ""China Mobile"": 6,
    ""OVH SAS"": 4,
    ""Akamai Technologies, Inc."": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Cyberzone S.A."": 2,
    ""Online"": 1,
    ""OOO \""Network of data-centers \""Selectel\"""": 1,
    ""Cat Technologies Co. Limited"": 3,
    ""netcup GmbH"": 2,
    ""Internet Solutions & Innovations LTD."": 1,
    ""Cogent Communications"": 1,
    ""Akamai Technologies"": 42
  },
  ""org"": {
    ""Flyservers S.A"": 19,
    ""Horizon LLC"": 6,
    ""Saba Abr Mizban LLC"": 2,
    ""UAB Host Baltic"": 2,
    ""Chinanet JS"": 6,
    ""Xhost Internet Solutions"": 3,
    ""BtHoster LTD"": 5,
    ""Censys, Inc"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Cloud Solutions S.A"": 1,
    ""Dmitriy Panchenko"": 3,
    ""Chang Way Technologies Co. Limited"": 2,
    ""4Media Ltd"": 6,
    ""Xhostis"": 8,
    ""Unknown"": 7,
    ""Vnnetwork Network Solution Company Limited"": 3,
    ""China Mobile Communications Corporation"": 6,
    ""OVH Ltd"": 4,
    ""Linode"": 43,
    ""Ucloud Information Technology"": 1,
    ""Cyberzone S.A"": 2,
    ""Free SAS"": 1,
    ""Cat Technologies Co. Limited"": 3,
    ""ANX"": 2,
    ""Tribeka Web Advisors S.A"": 1,
    ""Contabo GmbH"": 1
  },
  ""regionName"": {
    ""Kaunas"": 18,
    ""Moscow"": 11,
    ""Tehran"": 2,
    ""Vilnius"": 2,
    ""Jiangsu"": 6,
    ""Drenthe"": 1,
    ""North Holland"": 11,
    ""Budapest"": 5,
    ""Michigan"": 1,
    ""California"": 12,
    ""Distrito Federal"": 1,
    ""Perm Krai"": 3,
    ""Plovdiv"": 6,
    ""Addis Ababa"": 2,
    ""Hanoi"": 3,
    ""Attica"": 1,
    ""Central Jutland"": 3,
    ""Guangdong"": 6,
    ""England"": 5,
    ""New Jersey"": 1,
    ""Tokyo"": 1,
    ""Uusimaa"": 2,
    ""\u00cele-de-France"": 1,
    ""St.-Petersburg"": 1,
    ""Bavaria"": 2,
    ""Mariehamns stad"": 1,
    ""North West"": 42
  },
  ""country"": {
    ""Lithuania"": 20,
    ""Russia"": 15,
    ""Iran"": 2,
    ""China"": 12,
    ""The Netherlands"": 12,
    ""Hungary"": 5,
    ""United States"": 14,
    ""Venezuela"": 1,
    ""Bulgaria"": 6,
    ""Ethiopia"": 2,
    ""Vietnam"": 3,
    ""Greece"": 1,
    ""Denmark"": 3,
    ""United Kingdom"": 5,
    ""Japan"": 1,
    ""Finland"": 2,
    ""France"": 1,
    ""Germany"": 2,
    ""Aland Islands"": 1,
    ""Singapore"": 42
  },
  ""account"": {
    ""hello"": 37,
    ""Domain"": 19,
    ""(empty)"": 6,
    ""Test"": 14,
    ""Administr"": 18,
    ""ifKrIxvCB"": 1,
    ""stZLcB"": 1,
    ""xxSyMX"": 1,
    ""OLPRBwGja"": 1,
    ""sUCHhB"": 1,
    ""uZJxnG"": 1,
    ""Administrator"": 22,
    ""FUAUXAYEr"": 1,
    ""XgzFCw"": 1,
    ""amjcii"": 1,
    ""nmap"": 1,
    ""nzXYWqVsw"": 1,
    ""LJCcKz"": 1,
    ""NbEJGi"": 1,
    ""Admin"": 21
  },
  ""keyboard"": {
    ""Unknown"": 150
  },
  ""client_build"": {
    ""Unknown"": 150
  },
  ""client_name"": {
    ""Unknown"": 150
  },
  ""ip_type"": {
    ""Unknown"": 62,
    ""proxy"": 17,
    ""hosting"": 65,
    ""mobile"": 6
  }
}"
YJj0dzta,pojeb_sa_ty_krasny_kokot,Michal_Jankura,C,Tuesday 12th of December 2023 06:07:04 PM CDT,"#include <stdio.h>

int main(int argc, char *argv[]){
    
    FILE *file_s = fopen(argv[1], ""r"");
    char ch;
    int velkost_suboru = 0;
    
    /*ZISTENIE VELKOSTI BUFFERU TEDA FILU*/
    while ((ch = fgetc(file_s)) != EOF){
        velkost_suboru++;
    }
    fclose(file_s);

    /*OTVORENIE NA CITANIE*/
    FILE *file_read = fopen(argv[1], ""r"");
    
    /*NASTAVENIE BUFFERU*/
    char array[velkost_suboru];
    int hlaska = 0; 

    /**VKLADANIE DO BUFFERUU*/
    while ((ch = fgetc(file_read)) != EOF){
        array[hlaska] = ch;
        hlaska++;
    }

    printf(""\n"");
    /**OVERENIE CI SME DO BUFFERU ZAPISALI*/
    for (int i = 0; i < velkost_suboru; i++)
    {
        printf(""%c"",array[i]);
    }
    
    /*NAJDEME SLOVO START*/
    int zaciatok_vypisu = 0;

    for (int j = 0; j < velkost_suboru;j++)
    {
        if (array[j] == 'S' && array[j + 1] == 'T' && array[j + 2] == 'A' && array[j + 3] == 'R' && array[j + 4] == 'T'){
            zaciatok_vypisu +=j+5;
            break;
        }else{
            j++;
        }
    }

    int koniec_vypisu = 0;
    for (int a = zaciatok_vypisu; a < velkost_suboru; a++)
    {
        if ((array[a] == 'S' && array[a + 1] == 'T' && array[a + 2] == 'O' && array[a + 3] == 'P')){
            koniec_vypisu +=a-1;
        }
    }
    
    printf(""KONIEC BUFFERA JE NA %d"",koniec_vypisu);

    // printf(""\nKONIEC STARTU JE NA %d"",zaciatok_vypisu);
    // printf(""\n"");
    // printf(""%c"",array[zaciatok_vypisu]);
    
    /*OTVORENIE SUBORU PRE ZAPIS*/
    FILE *file_write = fopen(argv[1], ""w"");
    int pocitadlo_dier = 0;
    int even = 0;

    for(int f = zaciatok_vypisu; f < koniec_vypisu; f++)
    {
        
        if(array[f] == ' '){
            pocitadlo_dier++;
            if(pocitadlo_dier==2){
                even = 1;
            }
        }
        if(pocitadlo_dier%2 == 0 && even!=1){
            putc(array[f],file_write);
        }
        even = 0;
    }

    return 0;
}"
ATat6Jbb,Untitled,cs4ty,Bash,Tuesday 12th of December 2023 05:30:00 PM CDT,"“for lab1-seq”
“for lab1-seq”

N=155. Milliseconds passed: 7
“for lab1-par-1”

N=155. Milliseconds passed: 7
“for lab1-par-2”

N=155. Milliseconds passed: 8
“for lab1-par-4”

N=155. Milliseconds passed: 7
“for lab1-par-6”

N=155. Milliseconds passed: 5
“for lab1-seq”

N=959. Milliseconds passed: 93
“for lab1-par-1”

N=959. Milliseconds passed: 94
“for lab1-par-2”

N=959. Milliseconds passed: 86
“for lab1-par-4”

N=959. Milliseconds passed: 87
“for lab1-par-6”

N=959. Milliseconds passed: 79
“for lab1-seq”

N=1763. Milliseconds passed: 259
“for lab1-par-1”

N=1763. Milliseconds passed: 265
“for lab1-par-2”

N=1763. Milliseconds passed: 245
“for lab1-par-4”

N=1763. Milliseconds passed: 249
“for lab1-par-6”

N=1763. Milliseconds passed: 258
“for lab1-seq”

N=2567. Milliseconds passed: 510
“for lab1-par-1”

N=2567. Milliseconds passed: 570
“for lab1-par-2”

N=2567. Milliseconds passed: 519
“for lab1-par-4”

N=2567. Milliseconds passed: 499
“for lab1-par-6”

N=2567. Milliseconds passed: 533
“for lab1-seq”

N=3371. Milliseconds passed: 974
“for lab1-par-1”

N=3371. Milliseconds passed: 1045
“for lab1-par-2”

N=3371. Milliseconds passed: 864
“for lab1-par-4”

N=3371. Milliseconds passed: 815
“for lab1-par-6”

N=3371. Milliseconds passed: 630
“for lab1-seq”

N=4175. Milliseconds passed: 818
“for lab1-par-1”

N=4175. Milliseconds passed: 807
“for lab1-par-2”

N=4175. Milliseconds passed: 766
“for lab1-par-4”

N=4175. Milliseconds passed: 849
“for lab1-par-6”

N=4175. Milliseconds passed: 823
“for lab1-seq”

N=4979. Milliseconds passed: 1173
“for lab1-par-1”

N=4979. Milliseconds passed: 1123
“for lab1-par-2”

N=4979. Milliseconds passed: 1099
“for lab1-par-4”

N=4979. Milliseconds passed: 1109
“for lab1-par-6”

N=4979. Milliseconds passed: 1095
“for lab1-seq”

N=5783. Milliseconds passed: 1945
“for lab1-par-1”

N=5783. Milliseconds passed: 1522
“for lab1-par-2”

N=5783. Milliseconds passed: 1482
“for lab1-par-4”

N=5783. Milliseconds passed: 1469
“for lab1-par-6”

N=5783. Milliseconds passed: 1453
“for lab1-seq”

N=6587. Milliseconds passed: 1983
“for lab1-par-1”

N=6587. Milliseconds passed: 2000
“for lab1-par-2”

N=6587. Milliseconds passed: 1878
“for lab1-par-4”

N=6587. Milliseconds passed: 1965
“for lab1-par-6”

N=6587. Milliseconds passed: 2015
“for lab1-seq”

N=7391. Milliseconds passed: 2492
“for lab1-par-1”

N=7391. Milliseconds passed: 2531
“for lab1-par-2”

N=7391. Milliseconds passed: 2395
“for lab1-par-4”

N=7391. Milliseconds passed: 2491
“for lab1-par-6”

N=7391. Milliseconds passed: 2761
“for lab1-seq”

N=8195. Milliseconds passed: 3108
“for lab1-par-1”

N=8195. Milliseconds passed: 3119
“for lab1-par-2”

N=8195. Milliseconds passed: 3031
“for lab1-par-4”

N=8195. Milliseconds passed: 3213
“for lab1-par-6”

N=8195. Milliseconds passed: 3532"
EnyFNsbg,BTC Wallet Credentials have been reset,castlclass_20,GetText,Tuesday 12th of December 2023 05:24:33 PM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please disregard this message.
Your new login credentials will be 
Kostenckig1:pdAcAv on 212.224.93.130
You can connect via SSH.
Regards"
HTXqnWC4,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Tuesday 12th of December 2023 05:07:32 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-211293"
6SvDCSBx,Untitled,ThiiagoBR25,C++,Tuesday 12th of December 2023 04:45:52 PM CDT,"#include <bits/stdc++.h>
#include <stdlib.h>

#define Point pair<int,int>

using namespace std;

const int N = 400;
const int M = 340;

const unordered_set<int> VALID_POS = {0, 1, 2, 3, 4, 5, 6, 7};
const unordered_set<int> WALKABLE_POS = {0, 3};

struct Data {
    map<pair<Point,Point>, int> dist;
    map<pair<Point,Point>, Point> next;
};

int getCellNumber(string numberStr){
    int cellNumber;
    try
    {
        cellNumber = stoi(numberStr);
    }
    catch(const exception& e)
    {
        throw invalid_argument(""Failed to parse cell number.\n Expected: [0, 7]\n Got: "" + numberStr);
    }

    if(!VALID_POS.count(cellNumber)){
        throw invalid_argument(""Invalid cell number.\n Expected: [0, 7]\n Got: "" + numberStr);
    }
    
    return cellNumber;
}

vector<int> SplitGrid(string line){
    vector<int> splited;
    string number = """";
    
    for(int i = 0; i < line.size(); i++){
        char c = line[i];
        if(c == ','){
            if(line[i + 1] != ' '){
                throw invalid_argument(""Invalid grid format.\n Expected: ', '\n Got: "" + c + line[i + 1]);
            }
            i++; // jump space

            int cellNumber = getCellNumber(number);
            splited.push_back(cellNumber);

            number.clear();
        } else {
            number += c;
        }
    }


    return splited;
}

vector<vector<int>> buildGraph2(){
    ifstream file(""moc_fild13.txt"");

    vector<vector<int>> grid(N, vector<int>(M));
    if (!file.is_open()) {
        throw runtime_error(""Could not open file"");
    }

    string line;
    if (!getline(file, line)) {
        throw logic_error(""File is empty"");
    }
    
    vector<int> cellNumbers = SplitGrid(line);
    if(cellNumbers.size() != N * M){
        throw length_error(""Invalid grid size.\n Expected: "" + to_string(N * M) + ""\n Got: "" + to_string(cellNumbers.size()));
    }

    int i = 0, j = 0;
    for(int num: cellNumbers){
        grid[i][j++] = num;
        if(j == M) j = 0, i++;
    }

    file.close();
    return grid;
}

vector<vector<int>> buildGraphCustom(){
    vector<vector<int>> grid = {
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
        {0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0},
    };
    return grid;
}

int *GetCustomGraph(){
    vector<vector<int>> graph = buildGraphCustom();
    vector<int> linearGraph;
    for(auto line : graph) 
        for(int x: line)
            linearGraph.push_back(x);
    
    int* arr = new int[linearGraph.size()];
    std::copy(linearGraph.begin(), linearGraph.end(), arr);
    return arr;
}

vector<int> dx = {-1, 0, 1, 0, -1, -1, 1, 1};
vector<int> dy = {0, -1, 0, 1, -1, 1, -1, 1};

bool canWalk(Point p, vector<vector<int>> &grid, int n, int m, map<Point, bool> &visited){
    if(
        p.first < 0 or
        p.first >= n or
        p.second < 0 or
        p.second >= m
    ) return false;
    if(
        visited.count(p) or
        !WALKABLE_POS.count(grid[p.first][p.second])
    ) return false;

    return true;
}

char getPos(int numCell){
    switch (numCell){
    case -1:
        return 'S';
        break;
    case -2:
        return 'E';
        break;
    case -3:
        return '*';
        break;
    default:
        return WALKABLE_POS.count(numCell) ? '.' : '|';
        break;
    }
}

void printGraph(vector<vector<int>> &graph){
    int n = graph.size();
    int m = graph[0].size();

    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            cout << setw(3) << getPos(graph[i][j])  << "" "";
        }
        cout << endl;
    }
    cout << endl;
}

vector<Point> calcPath(Point src, Point dst, vector<vector<int>> graph, Data &data){

    Point curr = data.next[{src, dst}];
    Point end = {-1, -1};
    vector<Point> path = {dst};

    while(curr != end){
        path.push_back(curr);
        // graph[curr.first][curr.second] = -3; // set '.'
        curr = data.next[{src, curr}];
    }

    // graph[src.first][src.second] = -1;
    // graph[dst.first][dst.second] = -2;

    // printGraph(graph);


    reverse(path.begin(), path.end());
    return path;
}

void bfs(Point start, Data &data, vector<vector<int>> &grid, int depth){
    int n = grid.size();
    int m = grid[0].size();
    
    queue<Point> q;
    map<Point, bool> visited;

    q.push(start);
    visited[start] = true;
    data.dist[{start, start}] = 0;
    data.next[{start, start}] = {-1, -1};

    while(!q.empty()){  
        Point src = q.front();
        q.pop();

        for(int i = 0; i < dx.size(); i++){
            Point newPoint = {src.first + dx[i], src.second + dy[i]};
            if(!canWalk(newPoint, grid, n, m, visited)) continue;

            data.dist[{start, newPoint}] = data.dist[{start, src}] + 1;
            data.next[{start, newPoint}] = src;
            visited[newPoint] = true;
            q.push(newPoint);
        }
    }
}

Data preCalcDistAndNext(vector<vector<int>> grid, Point start){
    int n = grid.size();
    int m = grid[0].size();

    Data data;
    // for(int i = 0; i < n; i++){
    //     for(int j = 0; j < m; j++){
    //         Point p = {i, j};
    //         if(WALKABLE_POS.count(grid[p.first][p.second]))
    //             bfs(p, data, grid, 0);
    //     }
    // }

    bfs(start, data, grid, 0);

    return data;
}


vector<vector<int>> buildGraph(int *preGrid, int n, int m){
    vector<int> linearGraph = vector<int>(preGrid, preGrid + (n * m));

    vector<vector<int>> graph;

    vector<int> aux;
    int idx = 0;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            aux.push_back(linearGraph[idx++]);
        }
        graph.push_back(aux);
        aux.clear();
    }

    return graph;
}

vector<vector<int>> ShortestPath(int *preGrid, int n, int m, int start_x, int start_y, int end_x, int end_y){
    vector<vector<int>> graph = buildGraph(preGrid, n, m);

    Point start = {start_x, start_y};
    Point end = {end_x, end_y};

    Data data = preCalcDistAndNext(graph, start);
    vector<Point> path = calcPath(start, end, graph, data);
    vector<vector<int>> result;

    for(Point p: path) result.push_back({p.first, p.second});
    return result;
}


int main(){
    int *graph = GetCustomGraph();
    int n = 30;
    int m = 30;

    vector<vector<int>> path = ShortestPath(graph, n, m, 0, 0, 20, 20);
}

/*
int main2() {


    vector<vector<int>> graph;

    try
    {
        graph = buildGraphCustom();
    }
    catch(const exception& e)
    {
        cerr << e.what() << endl;
        return 1;
    }

    Data data = preCalcDistAndNext(graph);

    printf(""Graph[%d][%d] = %d combinations\n"", graph.size(), graph[0].size(), data.dist.size());

    // printGraph(graph);

    while(true){
        Point src, dst;
        cin >> src.first >> src.second >> dst.first >> dst.second;

        printf(""Distancia de {%d, %d} -> {%d, %d}"", src.first, src.second, dst.first, dst.second);

        if(data.dist.count({src, dst})){
            cout << ""= "" <<  data.dist[{src, dst}] << endl;
            vector<Point> path = calcPath(src, dst, graph, data);
        } else {
            cout << "" NAO EXISTE"" << endl;
        }
        
    }
    
    return 0;
}
*/"
DbAbivUF,Untitled,Siorai,Python,Tuesday 12th of December 2023 04:41:37 PM CDT,"from aocd import get_data 
import re

data = get_data(day=4, year=2023)

def part1(data):
    answer = 0
    for k in data:
        matches = 0
        for i in re.split(r':|\|', k)[1].split():
            if i in re.split(r':|\|', k)[2].split():
                matches = matches + 1
        if matches != 0:
            score = 1
            matches = matches - 1
            while matches != 0:
                score = score * 2
                matches = matches - 1
            answer = answer + score
    return answer

def part2(data):
    cards = []
    for i in data:
        cards.append(1)
    for k in range(len(data)):
        matches = 0
        for i in re.split(r':|\|', data[k])[1].split():
            if i in re.split(r':|\|', data[k])[2].split():
                matches = matches + 1
        if matches != 0:
            for l in range(cards[k]):
                for m in range(matches):
                    cards[k + m + 1] += 1
    return sum(cards)"
eB83FHC0,Payroll,DobbynciCode,Java,Tuesday 12th of December 2023 04:18:38 PM CDT,"import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class Payroll {
    
    static Scanner scan = new Scanner(System.in);
    public static void main(String[] args) {
        String time24HoursIN = """", time24HoursOUT = """", timeIn, timeOut;
        float logIn = 0, logOut = 0;
        float overtimeHour = 0, totalRegular = 0, regularHour = 0, totalOvertime = 0, grossSalary = 0, taxPercentage, taxDeduction, hourlyRate, netSalary = 0;
        String[] workDay = {
            ""Monday"",
            ""Tuesday"",
            ""Wednesday"",
            ""Thursday"",
            ""Friday""
        };
        

        System.out.print(""Hourly rate: "");
        hourlyRate = scan.nextFloat();
        System.out.print(""Tax rate: "");
        taxPercentage = scan.nextFloat();
        scan.nextLine();


        for(int i = 0; i <= workDay.length - 1; i++) {
            System.out.println(workDay[i]);

            System.out.printf(""\tTime in: "");
            timeIn = scan.nextLine();
            logIn = timeInNumber(time24HoursIN, timeIn);

            System.out.printf(""\tTime out: "");
            timeOut = scan.nextLine();
            logOut = timeInNumber(time24HoursOUT, timeOut);

            if (logIn < 800) {
                logIn = 800;
            }

            if (logIn >= 1200 && logIn <= 1300) {
                logIn = 1200;
            }

            if (logOut <= 1200 && logOut >= 1300) {
                logOut = 1200;
            }

            if (logOut > 1700) {
                overtimeHour = ((logOut - 1700) % 100 != 0) ? (((logOut - 1700) / 100) + .2f) : ((logOut - 1700) / 100);
                logOut = 1700;
            }
            
            regularHour = ((logOut - logIn - 100) % 100 != 0) ? ((logOut - logIn - 100) / 100) - .2f : ((logOut - logIn - 100) / 100);
            

            System.out.printf(""\t\tWorked hour: %.1f\n"", regularHour);

            totalRegular += regularHour;

            totalOvertime += overtimeHour;

        }
        
        grossSalary = (totalRegular * hourlyRate) + (totalOvertime * 100) + (totalOvertime * hourlyRate);

        taxDeduction = (taxPercentage / 100) * grossSalary;

        netSalary = grossSalary - taxDeduction;

        
        System.out.printf(""\nRegular hours: %.1f\n"", totalRegular);
        System.out.printf(""Overtime hours: %.1f\n"", totalOvertime);

        System.out.printf(""\nGross salary: %.2f\n"", grossSalary);
        System.out.printf(""Net salary: %.2f\n"", netSalary);
    }

    static float timeInNumber(String time24Hours, String input) {
        try {
            time24Hours = convert12HourTo24Hour(input);
        } catch(Exception e) {
            e.getMessage();
        }
        String[] timeSplit = time24Hours.split("":"");
        int hours = Integer.parseInt(timeSplit[0]);
        int mins = Integer.parseInt(timeSplit[1]);
        return ((hours * 100) + mins);
    }
    private static String convert12HourTo24Hour(String time12Hour) {
        DateTimeFormatter format12Hour = DateTimeFormatter.ofPattern(""h:mm a"");
        DateTimeFormatter format24Hour = DateTimeFormatter.ofPattern(""HH:mm"");

        LocalTime localTime = LocalTime.parse(time12Hour, format12Hour);
        return localTime.format(format24Hour);
    }
}"
LqjeLkPS,strings.xml,AleksandarH,XML,Tuesday 12th of December 2023 03:30:31 PM CDT,"<resources>
    <string name=""app_name"">k2_20621639</string>
    <string name=""hello_blank_fragment"">Hello blank fragment</string>
    <string name=""type"">Type :</string>
    <string name=""price"">Price :</string>
    <string name=""quantity"">Quantity :</string>
    <string name=""country"">Country :</string>
    <string name=""save_update"">Save/Update :</string>
    <string name=""cancel"">Cancel :</string>
</resources>"
xbj2kwiE,fragment_clothes_dialog.xml,AleksandarH,XML,Tuesday 12th of December 2023 03:30:16 PM CDT,"<LinearLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:orientation=""vertical""
    android:padding=""16dp"">

    <TextView
        android:id=""@+id/typeTextView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/type""
        android:textSize=""18sp""
        android:textStyle=""bold""
        android:layout_marginBottom=""16dp""/>

    <EditText
        android:id=""@+id/priceEditText""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:hint=""@string/price""
        android:inputType=""numberDecimal""
        android:layout_marginBottom=""16dp""/>

    <EditText
        android:id=""@+id/quantityEditText""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:hint=""@string/quantity""
        android:inputType=""number""
        android:layout_marginBottom=""16dp""/>

    <EditText
        android:id=""@+id/countryEditText""
        android:layout_width=""match_parent""
        android:layout_height=""wrap_content""
        android:hint=""@string/country""
        android:layout_marginBottom=""16dp""/>

    <Button
        android:id=""@+id/saveButton""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/save_update""
        android:layout_gravity=""center_horizontal""
        android:layout_marginBottom=""8dp""/>

    <Button
        android:id=""@+id/cancelButton""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:text=""@string/cancel""
        android:layout_gravity=""center_horizontal""/>

</LinearLayout>"
GpkBAh7i,activity_main.xml,AleksandarH,XML,Tuesday 12th of December 2023 03:28:38 PM CDT,"<RelativeLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent"">

    <ListView
        android:id=""@+id/clothesListView""
        android:layout_width=""match_parent""
        android:layout_height=""match_parent"" />

</RelativeLayout>"
dVwQQWJz,Clothes,AleksandarH,Java,Tuesday 12th of December 2023 03:27:36 PM CDT,"package com.example.a20621646_k2;

public class Clothes {
    private String type;
    private double price;
    private int quantity;
    private String originCountry;

    public Clothes(String type, double price, int quantity, String originCountry) {
        this.type = type;
        this.price = price;
        this.quantity = quantity;
        this.originCountry = originCountry;
    }

    public void setType(String type) {
        this.type = type;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public String getOriginCountry() {
        return originCountry;
    }

    public void setOriginCountry(String originCountry) {
        this.originCountry = originCountry;
    }

    public String getType() {
        return type;
    }
}"
d1KZA40X,ClothesDialogFragment,AleksandarH,Java,Tuesday 12th of December 2023 03:25:02 PM CDT,"package com.example.a20621646_k2;

import android.os.Bundle;

import androidx.fragment.app.DialogFragment;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class ClothesDialogFragment extends DialogFragment {

    public interface OnClothesUpdatedListener {
        void onClothesUpdated(Clothes updatedClothes);
    }

    private Clothes clothes;
    private OnClothesUpdatedListener listener;

    public ClothesDialogFragment(Clothes clothes) {
        this.clothes = clothes;
    }

    public void setListener(OnClothesUpdatedListener listener) {
        this.listener = listener;
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_clothes_dialog, container, false);

        EditText priceEditText = view.findViewById(R.id.priceEditText);
        EditText quantityEditText = view.findViewById(R.id.quantityEditText);
        EditText countryEditText = view.findViewById(R.id.countryEditText);
        Button saveButton = view.findViewById(R.id.saveButton);
        Button cancelButton = view.findViewById(R.id.cancelButton);

        saveButton.setOnClickListener(v -> {
            String newPriceText = priceEditText.getText().toString();
            String newQuantityText = quantityEditText.getText().toString();
            String newCountry = countryEditText.getText().toString();

            if (newPriceText.isEmpty() || newQuantityText.isEmpty() || newCountry.isEmpty()) {
                Toast.makeText(getActivity(), ""Please fill in all fields"", Toast.LENGTH_SHORT).show();
                Log.d(""20621639"", ""Save button clicked: Some fields are empty"");
            } else {
                double newPrice = Double.parseDouble(newPriceText);
                int newQuantity = Integer.parseInt(newQuantityText);

                clothes.setPrice(newPrice);
                clothes.setQuantity(newQuantity);
                clothes.setOriginCountry(newCountry);
                Log.d(""20621639"", ""Save button clicked: Clothes updated"");
                dismiss();
            }
        });

        cancelButton.setOnClickListener(v -> dismiss());
        Log.d(""20621639"", ""Cancel button clicked"");
        return view;
    }
}"
HQ4Tvw53,MainActivity,AleksandarH,Java,Tuesday 12th of December 2023 03:24:00 PM CDT,"package com.example.a20621646_k2;

import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.DialogFragment;

import android.os.Bundle;
import android.util.Log;
import android.widget.ListView;

import java.util.ArrayList;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = ""20621646"";
    @Override

    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        ArrayList<Clothes> clothesList = new ArrayList<>();
        clothesList.add(new Clothes(""T-shirt"", 15.99, 50, ""USA""));
        clothesList.add(new Clothes(""Jeans"", 29.99, 30, ""Italy""));
        clothesList.add(new Clothes(""Dress Shirt"", 39.99, 40, ""France""));
        clothesList.add(new Clothes(""Skirt"", 24.99, 25, ""Spain""));
        clothesList.add(new Clothes(""Sweater"", 45.99, 20, ""Germany""));
        clothesList.add(new Clothes(""Jacket"", 59.99, 15, ""UK""));

        ClothesAdapter adapter = new ClothesAdapter(this, clothesList);
        ListView listView = findViewById(R.id.clothesListView);
        listView.setAdapter(adapter);

        listView.setOnItemClickListener((parent, view, position, id) -> {
            Clothes selectedClothes = clothesList.get(position);
            showClothesInfoDialog(selectedClothes);
        });
    }

    private void showClothesInfoDialog(Clothes clothes) {
        Log.d(TAG, ""Showing Clothes Info Dialog"");
        DialogFragment dialogFragment = new ClothesDialogFragment(clothes);
        dialogFragment.show(getSupportFragmentManager(), ""ClothesInfoDialogFragment"");
    }
}"
FjxvsHHJ,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 03:23:25 PM CDT,"#include <iostream>
#include <queue>
#include <vector>
#include <map>
using namespace std;
const int alphabet_size = 26;
struct node {
    bool is_end_of_word;
    node * children_of_node[alphabet_size];
    node() {
        is_end_of_word = false;
        for(int i = 0; i < alphabet_size; i++) {
            children_of_node[i] = NULL;
        }
    }
};
void insert_word(node * trie, string word) {
    node * tmp = trie;
    for(int i = 0; i < (int) word.size(); i++) {
        int c = word[i] - 'a';
        if(tmp -> children_of_node[i] == NULL) {
            tmp -> children_of_node[i] = new node();
        }
        tmp = tmp -> children_of_node[i];
    }
    tmp -> is_end_of_word = true;
}
bool search_word(node * trie, string word) {
    node * tmp = trie;
    for(int i = 0; i < (int) word.size(); i++) {
        int c = word[i] - 'a';
        if(tmp -> children_of_node[i] == NULL) {
            return false;
        }
        tmp = tmp -> children_of_node[i];
    }
    return tmp -> is_end_of_word;
}
void delete_word(node * trie, string word) {
    node * tmp = trie;
    for(int i = 0; i < (int) word.size(); i++) {
        int c = word[i] - 'a';
        if(tmp -> children_of_node[i] == NULL) {
            return;
        }
        tmp = tmp -> children_of_node[i];
    }
    tmp -> is_end_of_word = false;
}
int main() {
    ios_base::sync_with_stdio(false);
    node * trie = new node();
    
    while(true) {
        string a, b;
        cin >> a >> b;
        if(a == ""insert"") {
            insert_word(trie, b);
        }
        else if(a == ""delete"") {
            delete_word(trie, b);
        }
        else {
            cout << search_word(trie, b) << endl;
        }
    }
    return 0;
}
"
atP9txVL,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 02:54:55 PM CDT,"class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> res;
        int n = s.size();
        map<string, int> m;
        for(int i = 0; i < n; i++) {
            if(i + 9 < n) {
                string tmp = """";
                for(int j = i; j <= i + 9; j++) {
                    tmp += s[j];
                }
                m[tmp]++;
            }
        }
        for(map<string, int>::iterator it = m.begin(); it != m.end(); it++) {
            if(it->second > 1) {
                res.push_back(it->first);
            }
        }
        return res;
    }
};"
d656SjnL,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 02:45:26 PM CDT,"class Solution {
public:
    int repeatedStringMatch(string a, string b) {
        int len_a = (int) a.size(), len_b = (int) b.size();
        string tmp = """";
        int rep = len_b / len_a;
        for(int i = 0; i < rep; i++) {
            tmp += a;
          
        }
        for(int i = 0; i < 5; i++) {
            
            if(tmp.find(b) != string::npos) {
                return rep;
            }
            tmp += a;
            rep++;
        }
        return -1;
    }
};"
5d5TeebX,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 02:32:45 PM CDT,"#include <iostream>
#include <queue>
#include <vector>
using namespace std;
string pattern, text;
const int B = 256;
const int MOD = INT_MAX;
void robin_carp() {
    int hash_pattern = 0, hash_text = 0;
    for(int i = 0; i < (int) pattern.size(); i++) {
        hash_pattern = (B * hash_pattern + pattern[i]) % MOD;
        hash_text = (B * hash_text + text[i]) % MOD;
    }
    cout << hash_pattern << "" "" << hash_text << endl;
    int h = 1;
    for(int i = 0; i < (int) pattern.size() - 1; i++) {
        h = (h * B) % MOD;
    }
    for(int i = 0; i <= (int) text.size() - (int) pattern.size(); i++) {
        if(hash_pattern == hash_text) {
            bool ok = true;
            for(int j = 0; j < (int) pattern.size(); j++) {
                if(text[i + j] != pattern[j]) {
                    ok = false;
                    break;
                }
            }
            if(ok) {
                cout << ""found at: "" << i << endl;
            }
            
        }
        if(i < (int) text.size() - (int) pattern.size()) {
            hash_text = (B * (hash_text - text[i] * h) + text[i + (int) pattern.size()]) % MOD;
            if(hash_text < 0) {
                hash_text += MOD;

            }
        }
    }
    
}
int main() {
    ios_base::sync_with_stdio(false);
    cin >> pattern >> text;
    robin_carp();
    return 0;
}
/*
 
 **/
"
n5LSQWwd,H5P Solver v2,Qwinty,JavaScript,Tuesday 12th of December 2023 02:32:44 PM CDT,"function appendAnswerHtml(html, answer, index) {
  return `${html}<h2>Question ${index + 1}</h2><p>${answer}</p>`;
}

function appendQuestionAnswersHtml(html, answers) {
  answers.forEach((answer, index) => {
    html = appendAnswerHtml(html, answer.text, index);
  });
  return html;
}

function openAnswerWindow(html) {
  const win = window.open('', 'answers', 'width=400, height=600');
  win.document.write(html);
}

function processMultipleChoiceTest(json) {
  const content = JSON.parse(json[Object.keys(json)[0]].jsonContent);
  const answers = content.answers.filter(answer => answer.correct);
  let html = '<h1>Answers</h1>';
  html = appendQuestionAnswersHtml(html, answers);
  openAnswerWindow(html);
}

function extractDraggableAnswers(content) {
  const regex = /(?<=\*)(.*?)(?=\*)/g;
  return content.match(regex);
}

function handleDraggableType(json) {
  const content = JSON.parse(json[Object.keys(json)[0]].jsonContent).textField;
  if (!content) {
    processMultipleChoiceTest(json);
    return;
  }
  const answers = extractDraggableAnswers(content);
  let html = '<h1>Answers</h1>';
  answers.forEach((answer, index) => {
    html = appendAnswerHtml(html, answer, index);
  });
  openAnswerWindow(html);
}

function getAnswersFromElements(answersElements) {
  return Array.from(answersElements).map((answerElement, index) => {
    const answer = answerElement.childElementCount === 1
      ? answerElement.children[0].textContent
      : Array.from(answerElement.children).map(child => child.textContent).join(' ');
    return { text: answer, index };
  });
}

function getAnswers() {
  const iframe = document.getElementsByClassName('h5p-iframe')[0];
  const doc = iframe.contentDocument;
  let choices = doc.getElementsByClassName('h5p-sc-solution-choices');

  try {
    const answers = getAnswersFromElements(choices[0].getElementsByClassName('h5p-sc-solution-answer'));
    let html = '<h1>Answers</h1>';
    html = appendQuestionAnswersHtml(html, answers);
    openAnswerWindow(html);
  } catch (TypeError) {
    handleDraggableType(H5PIntegration.contents);
  }
}

getAnswers();
"
HzN8xdvP,tttt,legGalaxyCode,C++,Tuesday 12th of December 2023 02:19:44 PM CDT,"#include <iostream>
#include <algorithm>
#include <set>
#include <unordered_set>
#include <vector>

//У Гоши есть любимое число S. Помогите ему найти все уникальные четвёрки чисел в массиве, которые в сумме дают заданное число S.

int main() {
    int n = 0;
    int target = 0;
    std::cin >> n >> target;

    std::vector<int> numbers(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> numbers[i];
    }
    std::sort(numbers.begin(), numbers.end());

    std::set<std::tuple<int, int, int, int>> result;
    std::unordered_set<int> stash;

    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            int border = target - numbers[i] - numbers[j];
            for (int k = j + 1; k < n; ++k) {
                int temp = border - numbers[k];
                if (stash.contains(temp)) {
                    //std::cout << ""i: "" << i << "" j: "" << j << "" k: "" << k << "", "" << temp << "" "" << numbers[i] << "" "" << numbers[j] << "" "" << numbers[k] << '\n';
                    result.emplace(temp, numbers[i], numbers[j], numbers[k]);
                }
            }
        }
        stash.emplace(numbers[i]);
    }

    std::cout << result.size() << '\n';
    for (const auto& tp : result) {
        std::cout << std::get<0>(tp) << "" "" << std::get<1>(tp) << "" "" << std::get<2>(tp) << "" "" << std::get<3>(tp) << '\n';
    }

    return 0;
}"
7TAANN3A,Untitled,Redstonerblast,Lua,Tuesday 12th of December 2023 02:13:19 PM CDT,"shell.run(""delete update/startup"")
shell.run(""pastebin get 5k1YB3RQ update/startup"")"
QJuhd7ca,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 01:53:35 PM CDT,"#include <iostream>
#include <queue>
#include <vector>
using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    int n;
    cin >> n;
    
    vector<int> v(n);
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    int i = 0, j = 0;
    int cnt_3 = 0, res = 0;
    while(j < n) {
        if(cnt_3 <= 3) {
            if(v[j] == 3) {
                cnt_3++;
            }
            j++;
            
            if(cnt_3 == 3) {
                res = max(res, j - i);
            }
        }
        else {
            if(v[i] == 3) {
                cnt_3--;
            }
            i++;
            if(cnt_3 == 3) {
                res = max(res, j - i);
            }
        }
        
    }
    cout << res << endl;
    return 0;
}
"
VHbBQkwp,UpCart Subtotal CSS Code,PierreAfterSell,CSS,Tuesday 12th of December 2023 01:49:17 PM CDT,":root {
    --summarySubtotalTitleFontSize: 20px;
    --summarySubtotalValueFontSize: 20px;
    --summarySubtotalTitleColor: black;
    --summarySubtotalValueColor: black;
    --summarySubtotalTitleWeight: bold;
    --summarySubtotalValueWeight: normal;
}

.cartSummarySection {
    padding-bottom: 10px;
    padding-top: 10px;
}

.cartSubtotalTitle {
    color: var(--summarySubtotalTitleColor);
    width: 100%;
    text-align: left;
    padding-left: 0px;
    padding-right: 0px;
    font-weight: var(--summarySubtotalTitleWeight);
    font-size: var(--summarySubtotalTitleFontSize);
}

.cartSubtotalValue {
    color: var(--summarySubtotalValueColor);
    font-size: var(--summarySubtotalValueFontSize);
    font-weight: var(--summarySubtotalValueWeight);
}

/* Utility */
.alignLeft {
    float: left;
}

.alignRight {
    float: right;
}"
Lt34GpB9,UpCart Subtotal HTML Code,PierreAfterSell,HTML,Tuesday 12th of December 2023 01:47:43 PM CDT,"<div class=""cartSummarySection"">    
<div class=""cartSubtotalTitle alignLeft"" >Subtotal        
	<span class=""cartSubtotalValue alignRight"">{{UPCART_SUBTOTAL}}</span>    
</div>    
<div style=""clear: both; display:flex;""></div></div>"
vAqEfh8b,OS_okt18_1,Mireiden,C,Tuesday 12th of December 2023 01:27:45 PM CDT,"//oktobar 2018. prvi
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
#include <pthread.h>
#include <string.h>

sem_t sem;
FILE* izlaz;

#define MAX_LINE_LENGTH 80

void* Prva(void* arg){
    char* fajl = (char*)arg;
    FILE* ulaz = fopen(fajl, ""r"");
    if (ulaz == NULL){
        perror(""Greška pri otvaranju datoteke za čitanje"");
        exit(EXIT_FAILURE);
    }

    char linija[MAX_LINE_LENGTH];
    int i = 1;

    while (fgets(linija, MAX_LINE_LENGTH, ulaz) != NULL){
        linija[strlen(linija) - 1] = '\0'; // Ukloni newline karakter

        sem_wait(&sem);

        izlaz = fopen(""izlaz.txt"", ""a"");
        if (izlaz == NULL){
            perror(""Greška pri otvaranju izlazne datoteke za pisanje"");
            exit(EXIT_FAILURE);
        }

        fprintf(izlaz, ""%s:%d:%s\n"", fajl, i, linija);

        fclose(izlaz);

        sem_post(&sem);
        i++;
    }

    fclose(ulaz);
    pthread_exit(NULL);
}

void* Druga(void* arg){
    char* fajl = (char*)arg;
    FILE* ulaz = fopen(fajl, ""r"");
    if (ulaz == NULL){
        perror(""Greška pri otvaranju datoteke za čitanje"");
        exit(EXIT_FAILURE);
    }

    char linija[MAX_LINE_LENGTH];
    int i = 1;

    while (fgets(linija, MAX_LINE_LENGTH, ulaz) != NULL){
        linija[strlen(linija) - 1] = '\0'; // Ukloni newline karakter

        sem_wait(&sem);

        izlaz = fopen(""izlaz.txt"", ""a"");
        if (izlaz == NULL){
            perror(""Greška pri otvaranju izlazne datoteke za pisanje"");
            exit(EXIT_FAILURE);
        }

        fprintf(izlaz, ""%s:%d:%s\n"", fajl, i, linija);

        fclose(izlaz);

        sem_post(&sem);
        i++;
    }

    fclose(ulaz);
    pthread_exit(NULL);
}

int main(int argc, char* argv[]){
    pthread_t nit1;
    pthread_t nit2;

    if (argc < 3){
        fprintf(stderr, ""Upotreba: %s <datoteka1> <datoteka2>\n"", argv[0]);
        exit(EXIT_FAILURE);
    }

    sem_init(&sem, 0, 1);

    pthread_create(&nit1, NULL, Prva, (void*)argv[1]);
    pthread_create(&nit2, NULL, Druga, (void*)argv[2]);

    pthread_join(nit1, NULL);
    pthread_join(nit2, NULL);

    sem_destroy(&sem);

    return 0;
}"
qLcBAEHD,Utils methods on Javascript,aleffelixf,JavaScript,Tuesday 12th of December 2023 12:53:26 PM CDT,"const randomString = () => Math.random().toString(36).slice(2);

const escape = (str) => str.replace(/[&<>""']/g, (m) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', '""': '&quot;', ""'"": '&#39;' }[m]));

const capitalize = (str) => str.replace(/^(.)|\s+(.)/g, (c) => c.toUpperCase());

const camelCase = (str) => str.trim().replace(/[-_\s]+(.)?/g, (_, c) => (c ? c.toUpperCase() : ''));"
HFCtqjsR,km day 2 part 3,viacheslavshymanskyi,JavaScript,Tuesday 12th of December 2023 12:44:33 PM CDT,"
var distanced = +prompt(""Скільки кілометрів в день ти проходиш пішки?"");

if (distance <= 3) {
    console.log(""Мало!"");
}

if (distance >= 4) {
    console.log(""Красунчик!"");
}

if (distance >= 20) {
    console.log(""Марафонець!"");
}

"
nhGZGPMU,km day 2 part 2,viacheslavshymanskyi,JavaScript,Tuesday 12th of December 2023 12:38:24 PM CDT,"var distance = prompt(""Скільки кілометрів в день ти проходиш пішки?"");

if (distance <= 3) {
    console.log(""Мало!"");
} else {
    console.log(""Красунчик!"");

    if (distance >= 20) {
        console.log(""Марафонець!"");
    }
}
"
U6Kyua3i,"Logout, too.",Dyrcona,PHP Brief,Tuesday 12th of December 2023 12:33:13 PM CDT,"<?php
include ""OSRFGatewayClient.php"";

$client = new OSRFGatewayClient(""jammy.cwmars.org"");
$request = new OSRFRequest(""open-ils.auth"", ""open-ils.auth.session.delete"",
""c723db268bbfaa4cd923c354b1f41f48"");
$response = $client->request($request);
print_r($response);
EOF
stdClass Object
(
    [payload] => Array
        (
            [0] => c723db268bbfaa4cd923c354b1f41f48
        )

    [status] => 200
)
"
BLZc469b,modified /usr/share/ubiquity/zsys-setup,Dan42,Bash,Tuesday 12th of December 2023 12:30:13 PM CDT,"#!/bin/sh

#
# This script creates ZFS pools and dataset compatible with zsys
#

# Layout:
# bpool/BOOT/ubuntu_${UUID}
# rpool/ROOT/ubuntu_${UUID}
# rpool/ROOT/ubuntu_${UUID}/var -o canmount=off
# rpool/ROOT/ubuntu_${UUID}/var/games
# rpool/ROOT/ubuntu_${UUID}/var/lib
# rpool/ROOT/ubuntu_${UUID}/var/lib/AccountsService
# rpool/ROOT/ubuntu_${UUID}/var/lib/apt
# rpool/ROOT/ubuntu_${UUID}/var/lib/dpkg
# rpool/ROOT/ubuntu_${UUID}/var/log
# rpool/ROOT/ubuntu_${UUID}/var/mail
# rpool/ROOT/ubuntu_${UUID}/var/snap
# rpool/ROOT/ubuntu_${UUID}/var/spool
# rpool/ROOT/ubuntu_${UUID}/var/www
# rpool/ROOT/ubuntu_${UUID}/var/lib/NetworkManager
# rpool/ROOT/ubuntu_${UUID}/srv
# rpool/ROOT/ubuntu_${UUID}/usr -o canmount=off
# rpool/ROOT/ubuntu_${UUID}/usr/local
# rpool/USERDATA/$user_$UUID2
# rpool/USERDATA/root_$UUID2
# rpool/keystore
#
# Steps:
# - Verify that /target is mounted
# - Retrieve fstab
# - unmount /target
# - delete all the partitions but the ESP
# - Create p1 ext4 size 100MB
# - Create p2 zfs bpool 1GB
# - Create p3 zfs rbool 100% remaining
# - Create datasets
# - Create /swapfile on /target
#
# After setup is done leave it mounted to let Ubiquity proceed with installation

set -eu

REQUIREDPKGS=""zfsutils-linux""
TARGET=""/target""
ESP=""${TARGET}/boot/efi""
ZSYSTMP=""/tmp/$(basename $0)""
INIT_FLAG=""${ZSYSTMP}/init.done""
FSTAB_PARTMAN=""${ZSYSTMP}/fstab.partman""
PARTITION_LAYOUT=""${ZSYSTMP}/layout""
KEYSTORE_ROOT=""/run/keystore/rpool""
KEYSTORE_SIZE=""500M""

mkdir -p ""${ZSYSTMP}""

usage() {
    # Display script usage
    cat<<EOF
Usage: $(basename ""$0"") [COMMAND] [OPTIONS...]
    Prepares a zsys compatible ZFS system.

Commands:
    layout      Get layout to display before formatting to ubiquity. Give the chosen disk as argument. Output to $PARTITION_LAYOUT
    init        Initialize the pools and datasets
    finalize    Finalize the installation after the system has been installed
Options:
    -h, --help      This help
    -d, --debug     Enable debug mode
EOF
    exit
}

SHORTOPTS=""hd""
LONGOPTS=""help,debug""

TEMP=$(getopt -o $SHORTOPTS --long $LONGOPTS -- ""$@"")
eval set -- ""$TEMP""

while true ; do
    case ""$1"" in
        -h|--help)
            usage;;
        -d|--debug)
            set -x
            shift;;
        --)
            shift;
            break;;
        *)
            usage;;
    esac
done

COMMAND=$( echo $1 | tr '[:upper:]' '[:lower:]' )
EXTRAARG=""""
if [ $# -gt 1 ]; then
    EXTRAARG=""${2}""
fi

ENCRYPTION=0
ZFS_KS_KEY=${ZFS_KS_KEY:-}
if [ -n ""${ZFS_KS_KEY}"" ]; then
	ENCRYPTION=1
fi

check_prerequisites() {
    # Check and set requirements to run this script
    #
    # Check and set the requirements to run this test. If any of the
    # requirement is missing the programs exit with error
    #
    # Args:
    #   $@: List of required packages
    #
    # Returns
    #   Exit program is a requirement is not met
    echo ""I: Checking system requirements""

    if [ $(id -u) -ne 0 ]; then
        echo ""E: Script must be executed as root. Exiting!""
        exit 1
    fi

    for pkg in $@; do
        if ! dpkg-query -W -f'${Status}' ""${pkg}""|grep -q ""install ok installed"" 2>/dev/null; then
            echo ""E: $pkg is required and not installed on this system. Exiting!""
            exit 1
        fi
    done

}

prepare_target() {
	target=""$1""

	if ! grep -qE ""\s${target}\s"" /proc/mounts; then
		echo ""E: $target is not mounted. Exiting!""
		exit 1
	fi

	# Save fstab generated by partman
	if [ -f ""${target}/etc/fstab"" ]; then
	    echo ""I: Saving existing fstab""
		cp ""${target}/etc/fstab"" ""${FSTAB_PARTMAN}""
	else
		echo ""W: ${target}/etc/fstab doesn't exist""
	fi

	# umount /target
	# It may fail to umount because the swap is being created by partman and not finished when we reach this point.
	# Give it some time and retry with a sleep between tries.
	iter=0
	maxiter=10

	for mountpoint in ""${ESP}"" ""${target}""; do
		if [ ! -d ""${mountpoint}"" ]; then
			continue
		fi

		echo ""I: umounting ${mountpoint}""
		while :; do
			# Do not make it quiet. We want to know why it failed.
			if ! sudo umount ""${mountpoint}""; then
				iter=$(( iter + 1 ))
				echo ""W: Try ${iter}. Failed to umount ${mountpoint}.""
				if [ ${iter} -eq ${maxiter} ]; then
					echo ""E: Failed to umount ${mountpoint}. Exiting!""
					exit 1
				fi
				sleep 3
			else
				break
			fi
		done
	done
	
	# Destroy existing pools before removing partitions
	if zpool list|grep -w bpool; then
		zpool destroy bpool
	fi
	if zpool list|grep -w rpool; then
		zpool destroy rpool
	fi
}

get_layout() {
	# Returns disk, base name of the partition and partition numbers to create
	target=""$1""
	disk=""$2""

	if [ -z ""${disk}"" ]; then
		# The entire disk has been formatted with use_device
		# There is either one ext4 partition or one ext4 and one ESP
		part=""$(grep -E ""\s${target}\s"" /proc/mounts | awk '{print $1}')""
		partbase=""""

		if [ -n ""${part}"" ]; then
			disk=""$(lsblk -lns -o TYPE,PATH ${part}| grep disk| awk '{print $2}')""
			if [ -z ""${disk}"" ]; then
				echo ""E: Couldn't identify disk for partition ${part}. Exiting!""
				exit 1
			fi
			# Some disks have letters in the partition number like /dev/nvme0n1p1
			# In this case we want to retrieve 'p' so we deal only with partition number
			# in the rest of the script and prepend the base.
			partbase=""$(echo ${part} | sed -e 's/[0-9]*$//' | sed -e ""s#${disk}##"")""
		fi
	else
		# The only purpose of this code is to display a friendly message in ubiquity to show the user
		# what partitioning will be performed. However, on first call, the disk is not yet partitioned
		# and collecting the information about disk partitioning would require to query partman. But we
		# don't want to add this extra complexity just to display a message. Instead we hardcode the
		# extension of the partition name depending on the type of disk, basically it's 'p' for anything
		# else than standard drives (eg nvme01pX)
		case ""${disk}"" in
			/dev/sd*|/dev/hd*|/dev/vd*)
				partbase=""""
				;;
			*)
				partbase=""p""
		esac
	fi

	if [ -d /sys/firmware/efi/efivars ]; then
		# No extended partition on EFI + GPT
		# The layout is
		# 1: ESP
		# 2: swap
		# 3: bpool
		# 4: rpool
		partesp=1
		partswap=4
		partbpool=2
		partrpool=3

	# As partman forces now gpt for any installation, we consider that not having efivar equals gpt with BiosBoot (LP: #1796260)
	else
		# The layout is:
		# 1: BiosBoot
		# 2: ESP
		# 3: swap
		# 4: bpool
		# 5: rpool
		partesp=2
		partswap=3
		partbpool=4
		partrpool=5
	fi

	echo ""OK|${disk}|${partbase}|${partesp}|${partswap}|${partbpool}|${partrpool}""
}

format_disk() {
	disk=""$1""
	partbase=""$2""
	partesp=""$3""
	partswap=$4
	partbpool=""$5""
	partrpool=""$6""
	ss=""$7""
	partprefix=""${disk}${partbase}""

	sfdisktmp=""${ZSYSTMP}/sfdisk.cfg""
	rm -f ""${sfdisktmp}""

	echo ""I: Formatting disk $disk with partitions swap:${partswap} bpool:${partbpool} rpool:${partrpool}""

	# bpool size: 500M < 5% of ZFS allocated space < 2G
	# srcpath is the system partition on initial layout.
	srcpath=$(lsblk -ln -o PATH ${disk}|tail -1)
	partsrc=${srcpath##*${partprefix}}
	size_percent=$(expr \( $(blockdev --getsize64 ${disk}) / 1024 / 1024 \) \* 5 / 100)
	bpool_size=500
	[ ${size_percent} -gt ${bpool_size} ] && bpool_size=${size_percent}
	[ ${bpool_size} -gt 2048 ] && bpool_size=2048

	# Improvement: Delete all the partitions but the ESP
	# There should be only 1 or 2 partitions but it can be made generic
	if ! esp_exists ""${disk}""; then
		start=$(sfdisk -l ""${disk}""|grep ""^${partprefix}${partesp}""|awk '{print $2}')
		cat > ""${sfdisktmp}"" <<EOF
${partprefix}${partesp}   : start= ${start}, size=    512M,        type=C12A7328-F81F-11D2-BA4B-00A0C93EC93B, bootable
EOF
	else
		while [ $partsrc -gt 1 ]; do
			zpool labelclear -f ${partprefix}${partsrc} || true
			sfdisk --delete ""${disk}"" ${partsrc}
			partsrc=$((partsrc-1))
		done
	fi

	cat >> ""${sfdisktmp}"" <<EOF
${partprefix}${partbpool} :   size= ${bpool_size}M, type=6A82CB45-1DD2-11B2-99A6-080020736631
${partprefix}${partrpool} :   size=512000M,         type=6A85CF4D-1DD2-11B2-99A6-080020736631
${partprefix}${partswap}  :   size= ${ss}M,         type=0657FD6D-A4AB-43C4-84E5-0933C84B4F4F
EOF

	cat ""${sfdisktmp}"" | sfdisk --append --wipe-partitions=always --no-reread ""${disk}""

	# Force a re-read of the partition table
	echo ""I: Re-reading partition table""
	partx --add ""${disk}"" 2>/dev/null || true
	partx --show ""${disk}""
}

init_keystore() {
	keystore_dev=""$1""
	echo ""I: Initializing Key Store""

	if [ ${ENCRYPTION} -eq 1 ]; then
		mkdir -p ""${KEYSTORE_ROOT}""
		printf ""%s"" ""${ZFS_KS_KEY}"" | cryptsetup luksFormat /dev/zvol/${keystore_dev} -
		printf ""%s"" ""${ZFS_KS_KEY}"" | cryptsetup luksOpen /dev/zvol/${keystore_dev} keystore-rpool -
		mke2fs -t ext4 /dev/mapper/keystore-rpool -L keystore-rpool
		mount /dev/mapper/keystore-rpool ""${KEYSTORE_ROOT}""
	fi
}

init_zfs() {
	target=""$1""
	partbpool=""$2""
	partrpool=""$3""

	echo ""I: Initializing ZFS""
	# Now we can create the pools and dataset
	UUID_ORIG=$(head -100 /dev/urandom | tr -dc 'a-z0-9' |head -c6)

    # Use stable uuid for partition when available as device name can change
    # Let udev finish its job before proceeding with zpool creation
    udevadm settle
    bpooluuid=$(blkid -s PARTUUID -o value $partbpool)
    [ -n ""$bpooluuid"" -a -e ""/dev/disk/by-partuuid/$bpooluuid"" ] && partbpool=/dev/disk/by-partuuid/$bpooluuid
    rpooluuid=$(blkid -s PARTUUID -o value  $partrpool)
    [ -n ""$rpooluuid"" -a -e ""/dev/disk/by-partuuid/$rpooluuid"" ] && partrpool=/dev/disk/by-partuuid/$rpooluuid

	# Pools
	encrypt_args=""""
	if [ ${ENCRYPTION} -eq 1 ]; then
		# Creation of the encryption key
		local ks_system_key=""${KEYSTORE_ROOT}/system.key""
		local ks_system_key_tmp=""${ZSYSTMP}/$(basename ""${ks_system_key}"")""
		head -c 32 /dev/urandom > ""${ks_system_key_tmp}""
		encrypt_args=""-O encryption=on -O keylocation=file://${ks_system_key_tmp} -O keyformat=raw""
	fi

	# rpool
	zpool create -f \
		-o ashift=12 \
		-o autotrim=on \
		-O compression=lz4 \
		-O acltype=posixacl \
		-O xattr=sa \
		-O relatime=on \
		-O normalization=formD \
		-O mountpoint=/ \
		-O canmount=off \
		-O dnodesize=auto \
		-O sync=disabled \
		${encrypt_args} \
		-O mountpoint=/ -R ""${target}"" rpool ""${partrpool}""

	# bpool
	# The version of bpool is set to the default version to prevent users from upgrading
	# Then only features supported by grub are enabled.
	zpool create -f \
		-o ashift=12 \
		-o autotrim=on \
		-d \
		-o feature@async_destroy=enabled \
		-o feature@bookmarks=enabled \
		-o feature@embedded_data=enabled \
		-o feature@empty_bpobj=enabled \
		-o feature@enabled_txg=enabled \
		-o feature@extensible_dataset=enabled \
		-o feature@filesystem_limits=enabled \
		-o feature@hole_birth=enabled \
		-o feature@large_blocks=enabled \
		-o feature@lz4_compress=enabled \
		-o feature@spacemap_histogram=enabled \
		-O compression=lz4 \
		-O acltype=posixacl \
		-O xattr=sa \
		-O relatime=on \
		-O normalization=formD \
		-O canmount=off \
		-O devices=off \
		-O mountpoint=/boot -R ""${target}"" bpool ""${partbpool}""

	if [ ${ENCRYPTION} -eq 1 ]; then
		# Creation of the encryption keystore on the pool directly
		# and point to the system ZFS decryption key path
		local keystore_dev=""rpool/keystore""
		zfs create -o encryption=off -V ${KEYSTORE_SIZE} ""${keystore_dev}""
		init_keystore ""${keystore_dev}""
		mv ""${ks_system_key_tmp}"" ""${ks_system_key}""
		chmod 600 ""${ks_system_key}""
		zfs set keylocation=file://""${ks_system_key}"" rpool
	fi

	# Root and boot dataset
	zfs create rpool/ROOT -o canmount=off -o mountpoint=none
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}"" -o mountpoint=/
	zfs create bpool/BOOT -o canmount=off -o mountpoint=none
	zfs create ""bpool/BOOT/ubuntu_${UUID_ORIG}"" -o mountpoint=/boot

	# System dataset
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var"" -o canmount=off
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/lib""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/lib/AccountsService""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/lib/apt""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/lib/dpkg""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/lib/NetworkManager""

	# Desktop specific system dataset
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/srv""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/usr"" -o canmount=off
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/usr/local""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/games""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/log""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/mail""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/snap""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/spool""
	zfs create ""rpool/ROOT/ubuntu_${UUID_ORIG}/var/www""

	# USERDATA datasets
	# Dataset associated to the user are created by the installer.
	zfs create rpool/USERDATA -o canmount=off -o mountpoint=/

	# Set zsys properties
	zfs set com.ubuntu.zsys:bootfs='yes' ""rpool/ROOT/ubuntu_${UUID_ORIG}""
	zfs set com.ubuntu.zsys:last-used=$(date +%s) ""rpool/ROOT/ubuntu_${UUID_ORIG}""
	zfs set com.ubuntu.zsys:bootfs='no' ""rpool/ROOT/ubuntu_${UUID_ORIG}/srv""
	zfs set com.ubuntu.zsys:bootfs='no' ""rpool/ROOT/ubuntu_${UUID_ORIG}/usr""
	zfs set com.ubuntu.zsys:bootfs='no' ""rpool/ROOT/ubuntu_${UUID_ORIG}/var""
}

move_user () {
	target=""$1""
	user=""$2""
	userhome=""$3""
	uuid=""$4""

	echo ""I: Creating user $user with home $userhome""
	mv ""${target}/${userhome}"" ""${target}/tmp/home/${user}""
	zfs create ""rpool/USERDATA/${user}_${uuid}"" -o canmount=on -o mountpoint=${userhome}
	chown $(chroot ""${target}"" id -u ${user}):$(chroot ${target} id -g ${user}) ""${target}/${userhome}""
	rsync -a ""${target}/tmp/home/${user}/"" ""${target}/${userhome}""
	bootfsdataset=$(grep ""\s${target}\s"" /proc/mounts | awk '{ print $1 }')
	zfs set com.ubuntu.zsys:bootfs-datasets=""${bootfsdataset}"" rpool/USERDATA/${user}_${UUID_ORIG}
}

init_system_partitions() {
	target=""$1""
	partefi=""$2""

	# ESP
	mkdir -p ""${target}/boot/efi""
	mount -t vfat ""${partefi}"" ""${target}/boot/efi""
	mkdir -p ""${target}/boot/efi/grub""

	echo ""I: Mount grub directory""
	# Finalize grub directory
	mkdir -p ""${target}/boot/grub""
	mount -o bind ""${target}/boot/efi/grub"" ""${target}/boot/grub""
}

esp_exists() {
	parttype=""C12A7328-F81F-11D2-BA4B-00A0C93EC93B""
	sfdisk -d ""${1}"" | grep -q ""type=${parttype}""
}

check_prerequisites ${REQUIREDPKGS}

echo ""I: Running $(basename ""$0"") ${COMMAND}""

if [ -z ""${COMMAND}"" ]; then
	echo ""E: ${COMMAND} is mandatory. Exiting!""
	exit 1
elif [ ""${COMMAND}"" = ""layout"" ]; then
	# Just displays de layout that will be created without any change to the disk.
	# At this stage we don't know yet the size of the partition that will be created.
	IFS=""|"" read ERR DISK PARTBASE PARTESP PARTSWAP PARTBPOOL PARTRPOOL<<EOF
$(get_layout ${TARGET} ""${EXTRAARG}"")
EOF

	if [ ""${ERR}"" != ""OK"" ]; then
		echo ""${ERR}""
		exit 1
	fi

	cat > ""${PARTITION_LAYOUT}"" <<EOF
disk:${DISK}
EOF
	if ! esp_exists ""${DISK}""; then
		cat >> ""${PARTITION_LAYOUT}"" <<EOF
part:vfat:ESP:${DISK}${PARTBASE}${PARTESP}
EOF
	fi

	cat >> ""${PARTITION_LAYOUT}"" <<EOF
part:swap:swap:${DISK}${PARTBASE}${PARTSWAP}
part:zfs:bpool:${DISK}${PARTBASE}${PARTBPOOL}
part:zfs:rpool:${DISK}${PARTBASE}${PARTRPOOL}
EOF

elif [ ""${COMMAND}"" = ""init"" ]; then
	rm -f ""${INIT_FLAG}""

	IFS=""|"" read ERR DISK PARTBASE PARTESP PARTSWAP PARTBPOOL PARTRPOOL<<EOF
$(get_layout ${TARGET} """")
EOF

	if [ ""${ERR}"" != ""OK"" ]; then
		echo ""${ERR}""
		exit 1
	fi

	echo ""I: Partition table before init of ZFS""
	partx --show ""${DISK}""

	# Swap files are not supported on ZFS, we use a swap partition instead:
	SWAPFILE=""$(grep ""^${TARGET}"" /proc/swaps | awk '{print $1}')""
	# Give us a minimum swap partition size of 4MB in case we decide on
	# no swap, just to keep the partition layout stable:
	SWAPSIZE=4194304

	# Disable swap and get the swap volume size:
	if [ -n ""${SWAPFILE}"" ]; then
		SWAPSIZE=$(stat -c%s ""${SWAPFILE}"")
		echo ""I: Found swapfile with size ${SWAPSIZE}. Disabling""
		swapoff ""${SWAPFILE}""
	fi
	# Convert to MiB to align the size on the size of a block
	SWAPVOLSIZE=$(( SWAPSIZE / 1024 / 1024 ))

	prepare_target ""${TARGET}""
	format_disk ""${DISK}"" ""${PARTBASE}"" ""${PARTESP}"" ""${PARTSWAP}"" ""${PARTBPOOL}"" ""${PARTRPOOL}"" ""${SWAPVOLSIZE}""
	init_zfs ""${TARGET}"" ""${DISK}${PARTBASE}${PARTBPOOL}"" ""${DISK}${PARTBASE}${PARTRPOOL}""
	init_system_partitions ""${TARGET}"" ""${DISK}${PARTBASE}${PARTESP}""

	# Generate fstab
	# $TARGET/etc has been destroyed by the creation of the zfs partitition
	# Recreate it
	mkdir -p ""${TARGET}/etc""
	if [ -f ""${FSTAB_PARTMAN}"" ]; then
		echo ""I: Creating fstab""
		grep -Ev '\s/\s|/swapfile' ""${FSTAB_PARTMAN}"" > ""${TARGET}/etc/fstab""
	fi

	if ! grep -q ""boot/efi"" ""${TARGET}/etc/fstab""; then
		espuuid=$(blkid -s UUID -o value ""${DISK}${PARTBASE}${PARTESP}"")
		echo ""UUID=${espuuid}\t/boot/efi\tvfat\tumask=0022,fmask=0022,dmask=0022\t0\t1"" >> ""${TARGET}/etc/fstab""
	fi

	# Bind mount grub from ESP to the expected location
	echo ""/boot/efi/grub\t/boot/grub\tnone\tdefaults,bind\t0\t0"" >> ""${TARGET}/etc/fstab""

	if [ -n ""${SWAPFILE}"" ]; then
		swap_device=""${DISK}${PARTBASE}${PARTSWAP}""
		if [ ${ENCRYPTION} -eq 1 ]; then
			# Format swap as Luks
			swap_name=""cryptoswap""
			touch ${ZSYSTMP}/swap.keyfile
			cryptsetup -q --key-file=${ZSYSTMP}/swap.keyfile luksFormat ""${swap_device}""
			cryptsetup -q --key-file=${ZSYSTMP}/swap.keyfile luksOpen ""${swap_device}"" ""${swap_name}""
			udevadm settle
			orig_swap_device=""${swap_device}""
			swap_device=""/dev/mapper/${swap_name}""

			# Update crypttab
			printf ""${swap_name}\t${orig_swap_device}\t/dev/urandom\tswap,initramfs"" >> ""${TARGET}/etc/crypttab""
			swap_dev_fstab=""${swap_device}""
		fi
		mkswap -f ""${swap_device}""
		if [ ${ENCRYPTION} -eq 0 ]; then
            # for unencrypted swap, this has to be after mkswap to read the right device id
			swap_dev_fstab=""UUID=$(blkid -s UUID -o value ""${swap_device}"")""
        fi
		printf ""${swap_dev_fstab}\tnone\tswap\tsw\t0\t0\n"" >> ""${TARGET}/etc/fstab""
		swapon -v ""${swap_device}""
	fi
	# Make /boot/{grub,efi} world readable
	sed -i 's#\(.*boot/efi.*\)umask=0077\(.*\)#\1umask=0022,fmask=0022,dmask=0022\2#' ""${TARGET}/etc/fstab""

	echo ""I: Marking ZFS utilities to be kept in the target system""
	apt-install zfsutils-linux 2>/dev/null
	apt-install zfs-initramfs 2>/dev/null
	# apt-install zsys 2>/dev/null
	apt-install cryptsetup 2>/dev/null
	apt-install cryptsetup-initramfs 2>/dev/null

	touch ""$INIT_FLAG""
elif [ ""${COMMAND}"" = ""finalize"" ]; then
	if [ ! -f ""$INIT_FLAG"" ]; then
		echo ""W: zsys init didn't succeed. Not proceeding with command: ${COMMAND}. Aborting!""
		exit 1
	fi

	# Activate zfs generator.
	# After enabling the generator we should run zfs set canmount=on DATASET
	# in the chroot for one dataset of each pool to refresh the zfs cache.
	echo ""I: Activating zfs generator""

	# Create zpool cache
	zpool set cachefile= bpool
	zpool set cachefile= rpool
	cp /etc/zfs/zpool.cache ""${TARGET}/etc/zfs/""
	mkdir -p ""${TARGET}/etc/zfs/zfs-list.cache""
	touch ""${TARGET}/etc/zfs/zfs-list.cache/bpool"" ""${TARGET}/etc/zfs/zfs-list.cache/rpool""

	# Handle userdata
	UUID_ORIG=$(head -100 /dev/urandom | tr -dc 'a-z0-9' |head -c6)
	mkdir -p ""${TARGET}/tmp/home""
	for user in ${TARGET}/home/*; do
        if [ -d ""${user}"" ]; then
            user=""$(basename $user)""
            move_user ""${TARGET}"" ""${user}"" ""/home/${user}"" ""${UUID_ORIG}""
        fi
	done

	move_user ""${TARGET}"" root /root ""${UUID_ORIG}""

	echo ""I: Changing sync mode of rpool to standard""
	zfs set sync=standard rpool

	# Disable resumable device
	if [ -b /dev/mapper/cryptoswap ]; then
		mkdir -p ""${TARGET}/etc/initramfs-tools/conf.d""
		echo ""RESUME=none"" > ""${TARGET}/etc/initramfs-tools/conf.d/resume""
		chroot ""${TARGET}"" update-initramfs -u
	fi

	echo ""I: ZFS setup complete""
else
	echo ""E: Unknown command: $COMMAND""
	exit 1
fi"
9Y2eZS6S,"Logging in works, too.",Dyrcona,PHP,Tuesday 12th of December 2023 12:29:48 PM CDT,"php <<'EOF'
<?php
include ""OSRFGatewayClient.php"";
$credentials = [ ""username"" => ""admin"", ""password"" => ""demo123"", ""type"" => ""staff"" ];
$client = new OSRFGatewayClient(""jammy.cwmars.org"");
$request = new OSRFRequest(""open-ils.auth"", ""open-ils.auth.login"", $credentials);
$respons = $client->request($request);
print_r($respons);
EOF
stdClass Object
(
    [payload] => Array
        (
            [0] => stdClass Object
                (
                    [ilsevent] => 0
                    [textcode] => SUCCESS
                    [desc] => Success
                    [pid] => 1896
                    [stacktrace] => oils_auth.c:636
                    [payload] => stdClass Object
                        (
                            [authtoken] => c723db268bbfaa4cd923c354b1f41f48
                            [authtime] => 7200
                        )

                )

        )

    [status] => 200
)
"
fEB1G6Pj,km day 2 part 1,viacheslavshymanskyi,JavaScript,Tuesday 12th of December 2023 12:29:43 PM CDT,"var distance = prompt(""Скільки кілометрів в день ти проходиш пішки?"");

if (distance >= 0 && distance <= 3) {
    console.log(""Мало!"");
}

if (distance >= 4 && distance < 20) {
    console.log(""Красунчик!"");
}

if (distance >= 20) {
    console.log(""Марафонець!"");
}

"
1CgsFgfi,translater (apportion),Sergey_Schcelov,Python,Tuesday 12th of December 2023 12:29:39 PM CDT,"Eng = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'z', 'x', 'c', 'v', 'b', 'n', 'm', '`', '[', ']', ';', ""'"", ',', '.']
Rus = ['й', 'ц', 'у', 'к', 'е', 'н', 'г', 'ш', 'щ', 'з', 'ф', 'ы', 'в', 'а', 'п', 'р', 'о', 'л', 'д', 'я', 'ч', 'с', 'м', 'и', 'т', 'ь', 'ё', 'х', 'ъ', 'ж', 'э', 'б', 'ю']
s = input()
res = """"
for i in s:
    if i in Eng:
        res += Rus[Eng.index(i)]
    elif i in Rus:
        res += Eng[Rus.index(i)]
    else:
        res += i
print(res)
"
uZeERDNA,km-day1,viacheslavshymanskyi,JavaScript,Tuesday 12th of December 2023 12:24:05 PM CDT,"var kilometersWalked = prompt(""Скільки кілометрів в день ти проходиш пішки?"");

kilometersWalked = parseFloat(kilometersWalked);

if (kilometersWalked >= 0 && kilometersWalked <= 3) {
    console.log(""Мало!"");
} else if (kilometersWalked >= 4) {
    console.log(""Красунчик!"");
}
"
TkgBMq2v,PHP OpenSRF Gateway V1 Client demo,Dyrcona,PHP Brief,Tuesday 12th of December 2023 12:07:59 PM CDT,"php <<'EOF'
<?php
include ""OSRFGatewayClient.php"";
$client = new OSRFGatewayClient(""jasontest.cwmars.org"");
$request = new OSRFRequest(""open-ils.circ"", ""opensrf.open-ils.system.ils_version"");
print_r( $client->postRequest($request));
EOF
stdClass Object
(
    [payload] => Array
        (
            [0] => 3-10-3
        )

    [status] => 200
)
"
uX84fdkr,Hashed Email - Full,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:54:28 AM CDT,"Pasted at: 12/12/2023 17:54
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skinclude"
YydF1dex,Advanced AND - Donald AND Duck AND Hello,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:58 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND
hello, donald was a duck

5502491997132108

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
PidZQwNi,Financial What's Inside - Email/IP/Bank,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:57 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3
What's Inside Paste 

5378496492418234
5571598708435236
5587663820997281
5502491997132108
5516931903918995
5322909948799236
5443317136071703
5409137465238695
5497550044220575
5559606180091553

aaribaud@att.net
aaribaud@comcast.net
aaribaud@att.com
aaribaud@att.co.uk
aaribaud@yahoo.com

246.107.72.199
221.187.199.189
3.109.3.44
109.112.85.139
250.83.213.179
169.141.201.234
50.180.50.59
20.181.54.231
64.235.191.167
48.103.36.43"
kqyVg77R,Financial with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:55 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

5148-2121-6312-7114   - DASHES
5148212163127114
5107-4578-0576-9075   - DASHES
5107457805769075
3488-1760-1454-729   - DASHES
348817601454729

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
SFgMT7GT,Domains with SPECIAL CHARS,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:52 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

www.qatesting.com
blog.qatesting.com
www.qatesting.com/index.html
www.qatesting.com/home
www.qatestingblog.com
www.qatestingtutorials.com
shop.qatesting.co.uk
admin.qatesting.io 
qatesting
qatesting.co.uk
qatesting.cn
qatesting.io
findmetesting.com
www.qatesting-blog.com
www.qatesting-blog23.com
www.qatesting
www.qatesting.co.uk
www.qatesting.cn
www.qatesting.io
www.findmetesting.com
www.wobsut.gov

The difference is that QA is process oriented and QC is product oriented.

Testing, therefore is product oriented and thus is in the QC domain. Testing for quality isn't assuring quality, it's controlling it.



Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
Ctzm6aVf,ALL Keywords with Excluded Words,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:49 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND 

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, 
or more recently Ex Machina, and even the Avengers. The “furious deity A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, 
it surpasses our abilities in every way, and it destroys us for one of any number of reasons.Maybe it perceives us as a threat. Maybe we’re just in its way, 
and it hardly perceives us at all — mankind, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. 
I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than 
it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with 
no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly 
unknowable coming from?"
Us2Zu65v,All Keywords with ANY Additional Words,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:46 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND KEYWAUTO

The dystopian version of superintelligence is illustrated with frequency by leaders in the technology industry, and is famously depicted by Hollywood in films like Terminator, or more recently Ex Machina, and even the Avengers. The “angry god A.I.” is a story you know, because it is the story you are constantly told: we build the thinking machine, it surpasses our abilities in every way, and it destroys us for one of any number of reasons.
Maybe it perceives us as a threat. Maybe we’re just in its way, and it hardly perceives us at all — humanity, a disposable insect race.

There are of course many arguments in opposition to the now ubiquitous concept of our apocalypse by artificial intelligence. I myself have called into question the logic of such dystopian arguments in Anatomy of Next. But our subject here is less pertaining to the nature of the conscious machine than it is to the way we talk about this subject, and what it means. First, consider that most of the artificial intelligence depicted in culture looks human, a representation with no basis in technological reality. Then, the true scope of the Singularity is almost impossible to predict, which begs a question: where are these opinions about the broadly unknowable coming from?

6589745854123698

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
"
uDmTDUiY,IP with SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:41 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

123.123.123.149
123.123.123.7
123.123.123.186
123.123.123.47
123.123.123.187
123.123.123.47
123.123.123.130
123.123.123.62
123.123.123.87
123.123.123.1
123.123.123.61
123.123.123.1
123.123.123.65
123.123.123.65
123.123.123.189
123.123.123.193
123.123.123.78
123.123.123.142
123.123.123.107
123.123.123.126
123.123.123.13
123.123.123.171
123.123.123.45
123.123.123.61
123.123.123.93
123.123.123.2
123.123.123.71
123.123.123.41
123.123.123.184
123.123.123.74
123.123.123.106
123.123.123.171
123.123.123.188
123.123.123.177
123.123.123.185
123.123.123.9
123.123.123.184
123.123.123.100
123.123.123.31
123.123.123.164
123.123.123.184
123.123.123.12
123.123.123.153
123.123.123.72
123.123.123.44
123.123.123.119
123.123.123.119
123.123.123.163
123.123.123.38
123.123.123.67
123.123.123.59
123.123.123.10
123.123.123.50
123.123.123.121
123.123.123.145
123.123.123.159
123.123.123.64
123.123.123.6
123.123.123.39
123.123.123.198
123.123.123.17
123.123.123.65
123.123.123.149
123.123.123.84
123.123.123.8
123.123.123.145
123.123.123.65
123.123.123.94
123.123.123.79
123.123.123.177
123.123.123.67
123.123.123.78
123.123.123.80
123.123.123.79
123.123.123.50
123.123.123.87
123.123.123.15
123.123.123.80
123.123.123.145
123.123.123.75
123.123.123.4
123.123.123.59
123.123.123.59
123.123.123.190
123.123.123.64
123.123.123.63
123.123.123.102
123.123.123.114
123.123.123.146
123.123.123.53
123.123.123.124
123.123.123.30
123.123.123.57
123.123.123.64
123.123.123.69
123.123.123.33
123.123.123.12
123.123.123.73
123.123.123.36
123.123.123.153
100.123.123.50
100.123.123.39
100.123.123.156
100.123.123.56
100.123.123.175
100.123.123.121
100.123.123.114
100.123.123.118
100.123.123.13
100.123.123.174
100.123.123.84
100.123.123.161
100.123.123.63
100.123.123.51
100.123.123.66
100.123.123.190
100.123.123.101
100.123.123.72
100.123.123.24
100.123.123.151
100.123.123.143
100.123.123.146
100.123.123.117
100.123.123.21
100.123.123.10
100.123.123.98
100.123.123.114
100.123.123.6
100.123.123.101
100.123.123.14
100.123.123.147
100.123.123.159
100.123.123.157
100.123.123.6
100.123.123.175
100.123.123.35
100.123.123.136
100.123.123.2
100.123.123.139
100.123.123.11
100.123.123.179
100.123.123.16
100.123.123.40
100.123.123.20
100.123.123.20
100.123.123.150
100.123.123.77
100.123.123.48
100.123.123.22
100.123.123.24
100.123.123.9
100.123.123.187
100.123.123.131
100.123.123.148
100.123.123.152
100.123.123.96
100.123.123.199
100.123.123.15
100.123.123.4
100.123.123.112
100.123.123.62
100.123.123.186
100.123.123.36
100.123.123.136
100.123.123.83
100.123.123.38
100.123.123.120
100.123.123.147
100.123.123.15
100.123.123.134
100.123.123.19
100.123.123.196
100.123.123.115
100.123.123.126
100.123.123.39
100.123.123.193
100.123.123.117
100.123.123.115
100.123.123.115
100.123.123.33
100.123.123.121
100.123.123.72
100.123.123.189
100.123.123.76
100.123.123.78
100.123.123.61
100.123.123.112
100.123.123.176
100.123.123.82
100.123.123.183
100.123.123.168
100.123.123.24
100.123.123.134
100.123.123.145
100.123.123.195
100.123.123.189
100.123.123.157
100.123.123.114
100.123.123.34
100.123.123.166

These are a list of generated IPs for test purPoses. They seRVe no purpose only to act as test data for testing activities.
You might findMEtesting 123.123.123.123 or findmetesting 100.123.123.76. These are my favourite ip addresses 123.123.123.23 100.123.123.23.
These are some random words networking, ipaddresses, studpidIPs


Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
dBxyVCrP,Hashed Email With Exclude,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:38 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

wojciech@sktestcomcast.net
joglo@sktestmac.com
larry@sktesthotmail.com
aardo@sktestverizon.net
debest@sktestlive.com
carroll@sktestaol.com
arathi@sktestyahoo.ca
sthomas@sktestcomcast.net
leocharre@sktestyahoo.ca
pedwards@sktestyahoo.com

skexclude"
Hf4yeNWR,Email with Keyword SPECIAL CHARACTERS,wheresTheAnyKey,C,Tuesday 12th of December 2023 11:53:33 AM CDT,"Pasted at: 12/12/2023 17:53
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3 for TESTING PURPOSE ONLY

DATA_ID_TESTDATATOFIND NOEXCLUDES

Cooper.Kleine@findmetesting.co.uk 
Mariquilla.Evenden@findmetesting.co.uk 
Noll.Ingolotti@findmetesting.co.uk  
Grove.Feldbaum@findmetesting.co.uk
Mack.Osment@findmetesting.co.uk 
Trisha.Zanicchelli@findmetesting.co.uk
Jack.Gorriessen@findmetesting.co.uk 
Nefen.Malec@findme-testing.co.uk 
Birdie-Gemmill@findmetesting.co.uk
Rosabella.Nias@findmetesting.co.uk
Ellerey.Fanti@findmetesting.cn
Antonina.Carsey@findmetesting.cn
Valry.Shead@findmetesting.cn 
Conrade.Ferrarone@findmetesting.cn
Neysa.Fazakerley@findmetesting.cn
Cristobal.Primak@findmetesting.cn
Wakefield.Kent@findmetesting.cn
findme.Cheales@findmetesting.cn
Nert.Roddamr@findmetesting.cn 
Richy.Raft@findmetesting.cn
Berget.Kermannes@findmetesting.ie 
Shelden.Tregea@findmetesting.ie 
Allsun.Badrick@findmetesting.ie 
Hortense.Ivkovic@findmetesting.ie
Carolin.Potte@findmetesting.ie
Benjie.Trumble@findmetesting.ie
Andrew.Hadgkiss@findmetesting.ie
Trula.Kuna@findmetesting.ie
Tommie.Maytum@findmetesting.ie
Langsdon.Pakes@findmetesting.ie
Porty.Tooth@findmetesting.au
Rozella.Siggefindmetesting.au
Nolie.Tumultyfindmetesting.au
Dud.Caustonfindmetesting.au
Alvinia.Brameldfindmetesting.au
Meridel.Lymbournefindmetesting.au
Elvis.Maleckfindmetesting.au
Brett.Oughtonfindmetesting.au
Rickard.Clemfindmetesting.au
Prue.Firemanfindmetesting.au
Uriel.Rozenbaum@findmetesting25.com
Cindie.Greeson@findmetesting25.com
Laurette.Puckham@findmetesting25.com
Eldredge.Ricket@findmetesting25.com
Alanah.Rapper@findmetesting25.com
Ash.Le.Prevost@findmetesting25.com
Galvin.Purchon@findmetesting25.com
Lauryn.Ilson@findmetesting25.com
findme.Graffin@findmetesting25.com
Edithe.Trehearne@findmetesting25.com
Den.Cancutt@findmetesting10.com
Wernher.Spatoni@findmetesting10.com
Malchy.Ion@findmetesting10.com
Leona.Whitby@findmetesting10.com
Alphonse.Goodlake@findmetesting10.com
Gran.Standen@findmetesting10.com
Barnie.Gilffilland@findmetesting10.com
Kaylyn.Ditchfield@findmetesting10.com
Dorotea.Kohlerman@findmetesting10.com
Gillan.Lampel@findmetesting10.com
Patrica.Mannakee@findustesting.com
Pippo.Sewart@findustesting.com
Lanae.Cousin@findustesting.com
Porter.Glaysher@findustesting.com
Herschel.Yaakov@findustesting.com
findme.Parsand@findustesting.com
Lucho.Cosh@findustesting.com
Cullie.Powlesland@findustesting.com
Edy.Burkart@findustesting.com
Christophorus.Ackeroyd@findustesting.com
Arvy.Rowson@findUStesting.com
Arlan.Ivanilov@findustesting.com
Tawnya.Waslin@findustesting.com
Inigo.Gyrgorcewicx@findustesting.com
Sharity.Stoodley@findustesting.com
Ginger.Dresse@findustesting.com
Deck.Jouannot@findustesting.com
Deny.Soanes@findustesting.com
james@findmetesting.com

Wenona.Moverley@findqatesting.com
Jerry.Poynter@findqatesting.com
Drugi.Neeson@findqatesting.com
Winny.Binfield@findqatesting.com
Darill.Greenshiels@findqatesting.com
Ethelin.Pinchen@findqatesting.com
Tanney.Ballendine@findqatesting.com
Ariadne.Wincott@findqatesting.com
Winnie.Domm@findqatesting.com
Rogerio.Cudbird@findqatesting.com
Yu@findmetesting.com

RIGHT OF @
findme@findme.testing.com
wildcard@findme*testing.com
dash@findme-testing.com
slash@findme/testing.com
questionmark@findme?testing.com

ACCENTS
Pål@findmetesting.com
Magdalène@findmetesting.com
Anaël@findmetesting.com
Lén@findmetesting.com
Loïs@findmetesting.com
Thérèsa@findmetesting.com
Valérie@findmetesting.com
Görel@findmetesting.com
Mélia@findmetesting.com
Joséphine@findmetesting.com
Loïc@findmetesting.com
findme@findmetesting.com
Méghane@findmetesting.com
Nuó@findmetesting.com
Lén@findmetesting.com
Eliès@findmetesting.com
André@findmetesting.com
Mahélie@findmetesting.com
Méthode@findmetesting.com
Rachèle@findmetesting.com
Mélina@findmetesting.com
Gaëlle@findmetesting.com
Céline@findmetesting.com
Bérangère@findmetesting.com
Françoise@findmetesting.com
Séverine@findmetesting.com
Måns@findmetesting.com
Adèle@findmetesting.com
Aimée@findmetesting.com
Mélia@findmetesting.com
Gösta@findmetesting.com
Laurène@findmetesting.com
Gisèle@findmetesting.com
Mélinda@findmetesting.com
Bécassine@findmetesting.com
Ruì@findmetesting.com
Zoé@findmetesting.com
Maëline@findmetesting.com
Aimée@findmetesting.com
Andréanne@findmetesting.com
Adélaïde@findmetesting.com
Laurène@findmetesting.com
Anaé@findmetesting.com
Noëlla@findmetesting.com
Anaël@findmetesting.com
Maëlyss@findmetesting.com
Lucrèce@findmetesting.com
Lén@findmetesting.com
Marie-thérèse@findmetesting.com
Maéna@findmetesting.com
Hélène@findmetesting.com
Hélèna@findmetesting.com
Méng@findmetesting.com
Crééz@findmetesting.com
Mélanie@findmetesting.com
Frédérique@findmetesting.com
Médiamass@findmetesting.com
André@findmetesting.com
Cinéma@findmetesting.com
Mégane@findmetesting.com
Amélie@findmetesting.com
Nadège@findmetesting.com
Rébecca@findmetesting.com
Médiamass@findmetesting.com
Céline@findmetesting.com
Maïly@findmetesting.com
Maï@findmetesting.com
Maëlann@findmetesting.com
Noëlla@findmetesting.com
Laurélie@findmetesting.com
Ruì@findmetesting.com
Chloé@findmetesting.com
Gaëlle@findmetesting.com
Vénus@findmetesting.com
Frédérique@findmetesting.com
Amélie@findmetesting.com
Loïs@findmetesting.com
Marlène@findmetesting.com
Stévina@findmetesting.com
Clémentine@findmetesting.com
Mégane@findmetesting.com
Méng@findmetesting.com
André@findmetesting.com
Crééz@findmetesting.com
Aí@findmetesting.com
Uò@findmetesting.com
Yú@findmetesting.com
Marie-françoise@findmetesting.com
Uò@findmetesting.com
Inès@findmetesting.com
Océane@findmetesting.com
Marie-ève@findmetesting.com
Rébecca@findmetesting.com
Zoé@findmetesting.com
Lài@findmetesting.com
Rachèle@findmetesting.com
Cécile@findmetesting.com
Maïlys@findmetesting.com
Garçon@findmetesting.com
hereiam@testing.com

It's a game of per%entage percentage.
Findme#testing Findme testing.
Over&over&over Over over over.
[findmeinbrackets], findmeinbrackets
(findmeinbrackets), findmeinbrackets
<findmeinbrackets>, findmeinbrackets
{findmeinbrackets>}, findmeinbrackets
http://findme-testing.here.com
http:\\findme-testing.here.com

Vestibulum ante ipsum primis in faucibus orci luctus et ultrices Garçon@findmetesting.com cubilia Curae; Mauris viverra diam vitae quam. Suspendisse potenti. 
Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Ellerey.Fanti@findmetesting.cn risus. Praesent lectus.

Vivamus metus arcu, adipiscing findmetesting@findmetesting.com, hendrerit at, vulputate vitae, nisl.

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
DnCHeMbw,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 11:45:13 AM CDT,"#include <iostream>
#include <queue>
#include <bits/stdc++.h>
using namespace std;
const int maxn = 1e5 + 10;
const double INF = 2e9;
vector<pair<int, double> > graph[maxn];
int n, m;
struct node {
    int idx;
    double cost;
    node () {}
    node(int _idx, double _cost) {
        idx = _idx;
        cost = _cost;
    }
    bool operator < (const node & tmp) const {
        return cost > tmp.cost;
    }
};
void dijkstra(int S, int E) {
    vector<double> dist(n, INF);
    vector<bool> visited(n, false);
    
    dist[S] = 0;
    priority_queue<node> pq;
    pq.push(node(S, 0));
    
    while(!pq.empty()) {
        node c = pq.top();
        pq.pop();
        
        if(visited[c.idx]) continue;
        visited[c.idx] = true;
        
        for(pair<int, double> tmp : graph[c.idx]) {
            int neighbour = tmp.first;
            double weight = tmp.second;
            
            if(!visited[neighbour] and c.cost + weight < dist[neighbour]) {
                pq.push(node(neighbour, c.cost + weight));
                dist[neighbour] = c.cost + weight;
            }
        }
    }
    printf(""%.6lf\n"", dist[E]);
}
int main() {
    int t;
    cin >> t;
    vector<pair<double, double> > v;
    for(int i = 0; i < t; i++) {
        double x, y;
        cin >> x >> y;
        v.push_back(make_pair(x, y));
    }
    for(int i = 0; i < t; i++) {
        for(int j = 0; j < t; j++) {
            double d = sqrt((v[i].first - v[j].first) * (v[i].first - v[j].first) + (v[i].second - v[j].second) * (v[i].second - v[j].second));
            if(d <= 10) {
                graph[i].push_back(make_pair(j, d));
                graph[j].push_back(make_pair(i, d));
                
            }
        }
    }
    
    n = t;
    dijkstra(0, n - 1);
    
    return 0;
}
/*
 5 5
 1 2 2
 2 3 4
 1 3 2
 3 4 5
 4 5 6
 **/
"
W98nCQuu,Untitled,simonedare_,Python,Tuesday 12th of December 2023 11:42:27 AM CDT,"from gpiozero import OutputDevice
# setup PIN as output
gpio_pin = OutputDevice(18, initial_value=True)
# change GPIO status
gpio_pin.toggle()
# wait 40 seconds
time.sleep(40)
# change GPIO status to stop the movement
gpio_pin.toggle()
# close the pin, clear the status
gpio_pin.close()"
0bPpu8Hf,Untitled,simonedare_,Python,Tuesday 12th of December 2023 11:33:12 AM CDT,"#!/usr/bin/env python3
import time
import sys
import gi

gi.require_version(""Gst"", ""1.0"")

from gi.repository import Gst


def main():

    Gst.init(sys.argv)  # init gstreamer
    Gst.debug_set_default_threshold(Gst.DebugLevel.WARNING)

    serial = None

    pipeline = Gst.parse_launch(""tcambin name=bin""
                                "" ! video/x-raw,format=BGRx,width=1920,height=1080,framerate=1/1""
                                "" ! videoconvert""
                                "" ! avimux""
                                "" ! filesink name=fsink"")

    # serial is defined, thus make the source open that device
    if serial is not None:
        camera = pipeline.get_by_name(""bin"")
        camera.set_property(""serial"", serial)

        names = camera.get_tcam_property_names()

        for name in property_names:
            try:
                base = self.source.get_tcam_property(name)
                print(""{}\t{}"".format(base.get_display_name(), name))
            except Exception as error:
                raise RuntimeError(f""Failed to get property '{name}'"") from error

    file_location = ""/root/recordings/test-sdr-"" + str(int(time.time())) + "".avi""

    fsink = pipeline.get_by_name(""fsink"")
    fsink.set_property(""location"", file_location)

    pipeline.set_state(Gst.State.PLAYING)

    print(""recording 5 secs.."")

    time.sleep(5)
    print(""stop recording"")
"
NuDHwSkW,chiComand,Genral,C#,Tuesday 12th of December 2023 11:33:02 AM CDT,"case ""chi"":
                        {
                            foreach (var user in Database.Server.GamePoll.Values)
                            {
                                if (user.Player.Name.ToLower() == data[1].ToLower())
                                {
                                    if (user.Player.MyChi != null)
                                    {
                                        //!chi AmirKhaled[PM] 1 1 7 1
                                        byte Grade = byte.Parse(data[2]);
                                        int Gate = int.Parse(data[3]);
                                        byte Type = byte.Parse(data[4]);
                                        ushort Value = ushort.Parse(data[5]);
                                        switch (Grade)
                                        {
                                            case 1:
                                                {
                                                    user.Player.MyChi.Dragon.RerollGM(Gate, (Role.Instance.Chi.ChiAttributeType)Type, Value);
                                                    Program.ChiRanking.Upadte(Program.ChiRanking.Dragon, user.Player.MyChi.Dragon);
                                                    Role.Instance.Chi.ComputeStatus(user.Player.MyChi);
                                                    user.Equipment.QueryEquipment(user.Equipment.Alternante, false);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Send);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Upgrade);
                                                    break;
                                                }
                                            case 2:
                                                {
                                                    user.Player.MyChi.Phoenix.RerollGM(Gate, (Role.Instance.Chi.ChiAttributeType)Type, Value);
                                                    Program.ChiRanking.Upadte(Program.ChiRanking.Dragon, user.Player.MyChi.Phoenix);
                                                    Role.Instance.Chi.ComputeStatus(user.Player.MyChi);
                                                    user.Equipment.QueryEquipment(user.Equipment.Alternante, false);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Send);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Upgrade);
                                                    break;
                                                }
                                            case 3:
                                                {
                                                    user.Player.MyChi.Tiger.RerollGM(Gate, (Role.Instance.Chi.ChiAttributeType)Type, Value);
                                                    Program.ChiRanking.Upadte(Program.ChiRanking.Dragon, user.Player.MyChi.Tiger);
                                                    Role.Instance.Chi.ComputeStatus(user.Player.MyChi);
                                                    user.Equipment.QueryEquipment(user.Equipment.Alternante, false);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Send);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Upgrade);
                                                    break;
                                                }
                                            case 4:
                                                {
                                                    user.Player.MyChi.Turtle.RerollGM(Gate, (Role.Instance.Chi.ChiAttributeType)Type, Value);
                                                    Program.ChiRanking.Upadte(Program.ChiRanking.Dragon, user.Player.MyChi.Turtle);
                                                    Role.Instance.Chi.ComputeStatus(user.Player.MyChi);
                                                    user.Equipment.QueryEquipment(user.Equipment.Alternante, false);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Send);
                                                    Project_ConquerX.Game.MsgServer.MsgChiInfo.MsgHandleChi.SendInfo(user, MsgChiInfo.Action.Upgrade);
                                                    break;
                                                }
                                            default:
                                                break;
                                        }
                                    }
                                }
                            }
                            break;
                        }"
wG03hRTa,Untitled,Josif_tepe,C++,Tuesday 12th of December 2023 11:30:12 AM CDT,"#include <iostream>
#include <queue>
#include <vector>
using namespace std;
const int maxn = 1e5 + 10;
const int INF = 1e9;
vector<pair<int, int> > graph[maxn];
int n, m;
struct node {
    int idx;
    int cost;
    node () {}
    node(int _idx, int _cost) {
        idx = _idx;
        cost = _cost;
    }
    bool operator < (const node & tmp) const {
        return cost > tmp.cost;
    }
};
void dijkstra(int S, int E) {
    vector<int> dist(n, INF);
    vector<bool> visited(n, false);
    
    dist[S] = 0;
    priority_queue<node> pq;
    pq.push(node(S, 0));
    
    while(!pq.empty()) {
        node c = pq.top();
        pq.pop();
        
        if(visited[c.idx]) continue;
        visited[c.idx] = true;
        
        for(pair<int, int> tmp : graph[c.idx]) {
            int neighbour = tmp.first;
            int weight = tmp.second;
            
            if(!visited[neighbour] and c.cost + weight < dist[neighbour]) {
                pq.push(node(neighbour, c.cost + weight));
                dist[neighbour] = c.cost + weight;
            }
        }
    }
    cout << dist[E] << endl;
}
int main() {
    cin >> n >> m;
    
    for(int i =0 ; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        a--; b--;
        graph[a].push_back(make_pair(b, c));
        graph[b].push_back(make_pair(a, c));
    }
    dijkstra(0, 4);
    
    return 0;
}
/*
 5 5
 1 2 2
 2 3 4
 1 3 2
 3 4 5
 4 5 6
 **/
"
