id,title,username,language,date,content
sM3f7z2V,good optimal from fen1 to fen2,max2201111,Python,Sunday 28th of April 2024 12:57:14 PM CDT,"import chess
from collections import deque, defaultdict

def simplify_fen(fen):
    parts = fen.split(' ')
    return ' '.join(parts[:4])  # Reset side to move, castling, en passant, counters

def generate_moves_and_distances(board):
    initial_fen = simplify_fen(board.fen())
    queue = deque([(initial_fen, 0)])
    distances = defaultdict(lambda: defaultdict(lambda: float('inf')))
    visited = set()

    while queue:
        current_fen, current_depth = queue.popleft()
        
        if current_fen in visited:
            continue
        visited.add(current_fen)

        distances[initial_fen][current_fen] = current_depth

        current_board = chess.Board(current_fen)
        for move in current_board.legal_moves:
            current_board.push(move)
            next_fen = simplify_fen(current_board.fen())
            if next_fen not in visited or distances[initial_fen][next_fen] > current_depth + 1:
                distances[initial_fen][next_fen] = current_depth + 1
                queue.append((next_fen, current_depth + 1))
            current_board.pop()

    return distances

# Main usage
initial_fen = ""1K6/8/8/3k4/8/8/8/8 w - - 0 1""  # Example initial position

initial_fen = ""2K5/8/8/3k4/6Q1/8/8/8 w - - 0 1""

initial_fen = simplify_fen(initial_fen)
board = chess.Board(initial_fen)
AB = generate_moves_and_distances(board)

def print_distances_less_than_two(AB, initial_fen):
    for fen2 in AB[initial_fen]:
        if AB[initial_fen][fen2] < 2:
            print(f""From {initial_fen} to {fen2}: {AB[initial_fen][fen2]} moves"")

print_distances_less_than_two(AB, initial_fen)"
b9SQRw0b,make omemo frankenshtein,KukuRuzo,CMake,Sunday 28th of April 2024 12:56:14 PM CDT,"--- a/plugins/generic/omemoplugin/CMakeLists.txt
+++ b/plugins/generic/omemoplugin/CMakeLists.txt
@@ -36,11 +36,25 @@ endif()
 find_package(Qt${QT_DEFAULT_MAJOR_VERSION} COMPONENTS Network Widgets Xml Sql REQUIRED)
 find_package(OpenSSL COMPONENTS Crypto REQUIRED)
 #find_package(SignalProtocolC REQUIRED)
-find_package(OMEMO_C REQUIRED)
-if(WIN32)
-    find_package(PROTOBUF_C REQUIRED)
+if(EXISTS ""${CMAKE_TOOLCHAIN_FILE}"")
+    string(TOLOWER ${CMAKE_TOOLCHAIN_FILE} TOOLCHAIN_FILE)
+    string(REGEX MATCH ""mxe-conf"" MXE_DETECTED ""${TOOLCHAIN_FILE}"")
+    if(MXE_DETECTED)
+        set(USE_MXE ON)
+        set(WIN32 ON)
+    endif()
+endif()
+if(NOT WIN32 OR (NOT USE_MXE))
+    find_package(OMEMO_C REQUIRED)
+else()
+    #set(BUNDLED_OMEMO_C ON)
+    #find_package(PROTOBUF_C REQUIRED)
+    include(cmake/protobuf_c.cmake)
+    set(PBC_LIB ${PROTOBUF_C_LIBRARY})
+    include(cmake/omemo_c.cmake)
 endif()
 
+
 include_directories(
     ${PLUGINS_ROOT_DIR}/include
     ${OPENSSL_INCLUDE_DIR}
@@ -99,6 +113,7 @@ target_link_libraries(
 )
 
 if(WIN32)
+    add_dependencies(${PLUGIN} ProtobufCProject OmemoCProject)
     target_link_libraries(${PLUGIN}
         ${PROTOBUF_C_LIBRARY}
     )
--- /dev/null
+++ b/plugins/generic/omemoplugin/cmake/omemo_c.cmake
+cmake_minimum_required(VERSION 3.10.0)
+
+set(OmemoCGitRepo ""https://github.com/dino/libomemo-c.git"")
+
+message(STATUS ""OMEMO_C: using bundled"")
+set(OMEMO_C_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/omemo-c)
+set(OMEMO_C_BUILD_DIR ${OMEMO_C_PREFIX}/build)
+set(OMEMO_C_INCLUDE_DIR ${OMEMO_C_PREFIX}/src/OmemoCProject/src)
+set(OMEMO_C_LIBRARY ${OMEMO_C_BUILD_DIR}/omemo-c/${CMAKE_STATIC_LIBRARY_PREFIX}omemo-c${D}${CMAKE_STATIC_LIBRARY_SUFFIX})
+if(APPLE)
+    set(COREFOUNDATION_LIBRARY ""-framework CoreFoundation"")
+    set(COREFOUNDATION_LIBRARY_SECURITY ""-framework Security"")
+    list(APPEND OMEMO_C_LIBRARY ${COREFOUNDATION_LIBRARY} ${COREFOUNDATION_LIBRARY_SECURITY})
+endif()
+
+set(patch_command
+    ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_SOURCE_DIR}/cmake/omemo-c.patch <SOURCE_DIR> &&
+    ${GIT_EXECUTABLE} checkout <SOURCE_DIR>/src/CMakeLists.txt &&
+    ${GIT_EXECUTABLE} apply <SOURCE_DIR>/omemo-c.patch)
+
+include(ExternalProject)
+#set CMake options and transfer the environment to an external project
+set(OMEMO_C_BUILD_OPTIONS
+    -DBUILD_SHARED_LIBS=OFF 
+    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+    -DCMAKE_INSTALL_PREFIX=${OMEMO_C_PREFIX}/build 
+    -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
+    -DPROTOBUF_C_INCLUDE_DIR=${PROTOBUF_C_INCLUDE_DIR} 
+    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
+    -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM} 
+    -DOSX_FRAMEWORK=OFF)
+include(FindGit)
+find_package(Git REQUIRED)
+ExternalProject_Add(OmemoCProject
+    PREFIX ${OMEMO_C_PREFIX}
+    BINARY_DIR ${OMEMO_C_BUILD_DIR}
+    GIT_REPOSITORY ""${OmemoCGitRepo}""
+    GIT_TAG omemo
+    CMAKE_ARGS ${OMEMO_C_BUILD_OPTIONS}
+    BUILD_BYPRODUCTS ${OMEMO_C_LIBRARY}
+    PATCH_COMMAND ${patch_command}
+    INSTALL_COMMAND """"
+    UPDATE_COMMAND """"
+    DEPENDS ProtobufCProject
+)
--- /dev/null
+++ b/plugins/generic/omemoplugin/cmake/protobuf_c.cmake
+cmake_minimum_required(VERSION 3.10.0)
+
+set(ProtobufCGitRepo ""https://github.com/protobuf-c/protobuf-c.git"")
+
+message(STATUS ""PROTOBUF: using bundled"")
+set(PROTOBUF_C_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/protobuf-c)
+set(PROTOBUF_C_BUILD_DIR ${PROTOBUF_C_PREFIX}/build)
+set(PROTOBUF_C_INCLUDE_DIR ${PROTOBUF_C_PREFIX}/src/ProtobufCProject)
+set(PROTOBUF_C_SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/protobuf-c/src/ProtobufCProject/build-cmake)
+set(PROTOBUF_C_LIBRARY ${PROTOBUF_C_BUILD_DIR}/protobuf-c/${CMAKE_STATIC_LIBRARY_PREFIX}protobuf-c${D}${CMAKE_STATIC_LIBRARY_SUFFIX})
+if(APPLE)
+    set(COREFOUNDATION_LIBRARY ""-framework CoreFoundation"")
+    set(COREFOUNDATION_LIBRARY_SECURITY ""-framework Security"")
+    list(APPEND PROTOBUF_C_LIBRARY ${COREFOUNDATION_LIBRARY} ${COREFOUNDATION_LIBRARY_SECURITY})
+endif()
+
+include(ExternalProject)
+#set CMake options and transfer the environment to an external project
+
+set(PROTOBUF_C_BUILD_OPTIONS
+    -DCMAKE_IGNORE_PATH=""/usr/include/protobuf-c""
+    -DCMAKE_SYSTEM_IGNORE_PATH=""/usr/include/protobuf-c""
+    -DBUILD_SHARED_LIBS=OFF 
+    -DBUILD_PROTOC=OFF
+    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+    -DCMAKE_INSTALL_PREFIX=${PROTOBUF_C_PREFIX}/build 
+    -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}
+    #-DPROTOBUF_C_ROOT_DIR=${PROTOBUF_C_ROOT_DIR} 
+    -DCMAKE_TOOLCHAIN_FILE=${CMAKE_TOOLCHAIN_FILE}
+    -DCMAKE_MAKE_PROGRAM=${CMAKE_MAKE_PROGRAM} 
+    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
+    -DOSX_FRAMEWORK=OFF
+)
+
+include(FindGit)
+find_package(Git REQUIRED)
+ExternalProject_Add(ProtobufCProject
+    PREFIX ${PROTOBUF_C_PREFIX}
+    BINARY_DIR ${PROTOBUF_C_BUILD_DIR}
+    GIT_REPOSITORY ""${ProtobufCGitRepo}""
+    CONFIGURE_COMMAND ${CMAKE_COMMAND} -G${CMAKE_GENERATOR} ${PROTOBUF_C_BUILD_OPTIONS} ${PROTOBUF_C_SOURCE_DIR} 
+    CMAKE_ARGS ${PROTOBUF_C_BUILD_OPTIONS}
+    BUILD_BYPRODUCTS ${PROTOBUF_C_LIBRARY}
+    INSTALL_COMMAND """"
+    UPDATE_COMMAND """"
+)
"
Hhyt0yKN,Wii ROM Extractor for Homebrew USB Loader GX,metalx1000,Bash,Sunday 28th of April 2024 12:49:00 PM CDT,"# extract wii roms and rename directory for Homebrew USB Loader GX

# extract rom from 7z and if successful remove 7z file
for i in *.7z;do 7z x $i && rm ""$i"";done

# find rom files
find -name ""*.wbfs""|while read f;
do 
  # Get original Dir name
  d=""$(dirname $f)"";
  # Get Game ID
  id=""$(basename $f|sed 's/.wbfs//g')"";
  # Rename Dir to contain ID in format for USB LOADER GX
  mv ""$d"" ""$d [$id]"";
done"
PXQwLc2Z,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 💰,ssss50w,GetText,Sunday 28th of April 2024 12:25:57 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
28 April 2024"
mN7eVhyY,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Sunday 28th of April 2024 12:07:23 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_135997.pdf

Working as of:
28 April 2024"
dDWH99Xw,OSRS Worlds April 28th,0x04,Java,Sunday 28th of April 2024 11:29:00 AM CDT,"World: 393, Members: false, Beta: false, PVP: false, address: oldschool93.runescape.com, activitiy: 750 skill total, Count: 80
World: 468, Members: false, Beta: false, PVP: false, address: oldschool168.runescape.com, activitiy: 500 skill total, Count: 87
World: 469, Members: false, Beta: false, PVP: false, address: oldschool169.runescape.com, activitiy: LMS Casual, Count: 177
World: 575, Members: false, Beta: false, PVP: false, address: oldschool275.runescape.com, activitiy: -, Count: 187
World: 475, Members: false, Beta: false, PVP: false, address: oldschool175.runescape.com, activitiy: -, Count: 194
World: 417, Members: false, Beta: false, PVP: false, address: oldschool117.runescape.com, activitiy: Group Iron, Count: 198
World: 394, Members: false, Beta: false, PVP: false, address: oldschool94.runescape.com, activitiy: Clan Wars - Free, Count: 200
World: 476, Members: false, Beta: false, PVP: false, address: oldschool176.runescape.com, activitiy: -, Count: 218
World: 483, Members: false, Beta: false, PVP: false, address: oldschool183.runescape.com, activitiy: -, Count: 272
World: 301, Members: false, Beta: false, PVP: false, address: oldschool1.runescape.com, activitiy: Trade - Free, Count: 931
World: 414, Members: false, Beta: false, PVP: false, address: oldschool114.runescape.com, activitiy: 750 skill total, Count: 57
World: 413, Members: false, Beta: false, PVP: false, address: oldschool113.runescape.com, activitiy: 500 skill total, Count: 83
World: 552, Members: false, Beta: false, PVP: false, address: oldschool252a.runescape.com, activitiy: -, Count: 149
World: 554, Members: false, Beta: false, PVP: false, address: oldschool254.runescape.com, activitiy: -, Count: 167
World: 553, Members: false, Beta: false, PVP: false, address: oldschool253.runescape.com, activitiy: -, Count: 168
World: 555, Members: false, Beta: false, PVP: false, address: oldschool255.runescape.com, activitiy: -, Count: 170
World: 384, Members: false, Beta: false, PVP: false, address: oldschool84.runescape.com, activitiy: -, Count: 184
World: 452, Members: false, Beta: false, PVP: false, address: oldschool152.runescape.com, activitiy: -, Count: 188
World: 398, Members: false, Beta: false, PVP: false, address: oldschool98.runescape.com, activitiy: Forestry, Count: 190
World: 455, Members: false, Beta: false, PVP: false, address: oldschool155.runescape.com, activitiy: -, Count: 195
World: 456, Members: false, Beta: false, PVP: false, address: oldschool156.runescape.com, activitiy: -, Count: 195
World: 399, Members: false, Beta: false, PVP: false, address: oldschool99.runescape.com, activitiy: -, Count: 199
World: 453, Members: false, Beta: false, PVP: false, address: oldschool153.runescape.com, activitiy: -, Count: 204
World: 454, Members: false, Beta: false, PVP: false, address: oldschool154.runescape.com, activitiy: -, Count: 215
World: 397, Members: false, Beta: false, PVP: false, address: oldschool97.runescape.com, activitiy: -, Count: 223
World: 451, Members: false, Beta: false, PVP: false, address: oldschool151.runescape.com, activitiy: -, Count: 231
World: 383, Members: false, Beta: false, PVP: false, address: oldschool83.runescape.com, activitiy: Castle Wars - Free, Count: 249
World: 335, Members: false, Beta: false, PVP: false, address: oldschool35.runescape.com, activitiy: Group Iron, Count: 293
World: 432, Members: false, Beta: false, PVP: false, address: oldschool132.runescape.com, activitiy: 750 skill total, Count: 65
World: 419, Members: false, Beta: false, PVP: false, address: oldschool119a.runescape.com, activitiy: 500 skill total, Count: 115
World: 545, Members: false, Beta: false, PVP: false, address: oldschool245.runescape.com, activitiy: -, Count: 165
World: 547, Members: false, Beta: false, PVP: false, address: oldschool247.runescape.com, activitiy: -, Count: 169
World: 433, Members: false, Beta: false, PVP: false, address: oldschool133.runescape.com, activitiy: -, Count: 176
World: 546, Members: false, Beta: false, PVP: false, address: oldschool246.runescape.com, activitiy: -, Count: 181
World: 435, Members: false, Beta: false, PVP: false, address: oldschool135.runescape.com, activitiy: -, Count: 183
World: 431, Members: false, Beta: false, PVP: false, address: oldschool131a.runescape.com, activitiy: -, Count: 186
World: 430, Members: false, Beta: false, PVP: false, address: oldschool130a.runescape.com, activitiy: -, Count: 194
World: 436, Members: false, Beta: false, PVP: false, address: oldschool136.runescape.com, activitiy: -, Count: 195
World: 544, Members: false, Beta: false, PVP: false, address: oldschool244.runescape.com, activitiy: -, Count: 196
World: 437, Members: false, Beta: false, PVP: false, address: oldschool137.runescape.com, activitiy: -, Count: 202
World: 418, Members: false, Beta: false, PVP: false, address: oldschool118a.runescape.com, activitiy: -, Count: 253
World: 434, Members: false, Beta: false, PVP: false, address: oldschool134.runescape.com, activitiy: Forestry, Count: 269
World: 565, Members: false, Beta: false, PVP: false, address: oldschool265.runescape.com, activitiy: Fresh Start, Count: 0
World: 372, Members: false, Beta: false, PVP: false, address: oldschool72a.runescape.com, activitiy: 750 skill total, Count: 80
World: 561, Members: false, Beta: false, PVP: true, address: oldschool261a.runescape.com, activitiy: PvP World - Free, Count: 87
World: 381, Members: false, Beta: false, PVP: false, address: oldschool81a.runescape.com, activitiy: 500 skill total, Count: 104
World: 497, Members: false, Beta: false, PVP: false, address: oldschool197.runescape.com, activitiy: Clan Recruitment, Count: 153
World: 499, Members: false, Beta: false, PVP: false, address: oldschool199.runescape.com, activitiy: -, Count: 158
World: 498, Members: false, Beta: false, PVP: false, address: oldschool198.runescape.com, activitiy: -, Count: 171
World: 501, Members: false, Beta: false, PVP: false, address: oldschool201.runescape.com, activitiy: -, Count: 198
World: 379, Members: false, Beta: false, PVP: false, address: oldschool79a.runescape.com, activitiy: PvP Arena (Legacy Duels), Count: 200
World: 500, Members: false, Beta: false, PVP: false, address: oldschool200.runescape.com, activitiy: -, Count: 206
World: 371, Members: false, Beta: false, PVP: false, address: oldschool71a.runescape.com, activitiy: Group Iron, Count: 216
World: 382, Members: false, Beta: false, PVP: false, address: oldschool82.runescape.com, activitiy: -, Count: 246
World: 326, Members: false, Beta: false, PVP: false, address: oldschool26a.runescape.com, activitiy: LMS Casual, Count: 276
World: 380, Members: false, Beta: false, PVP: false, address: oldschool80a.runescape.com, activitiy: -, Count: 285
World: 316, Members: false, Beta: false, PVP: false, address: oldschool16a.runescape.com, activitiy: Wilderness PK - Free, Count: 359
World: 308, Members: false, Beta: false, PVP: false, address: oldschool8a.runescape.com, activitiy: Wilderness PK - Free, Count: 763
World: 530, Members: false, Beta: false, PVP: false, address: oldschool230.runescape.com, activitiy: 750 skill total, Count: 54
World: 427, Members: false, Beta: false, PVP: false, address: oldschool127.runescape.com, activitiy: 500 skill total, Count: 66
World: 537, Members: false, Beta: false, PVP: false, address: oldschool237.runescape.com, activitiy: -, Count: 119
World: 571, Members: false, Beta: false, PVP: false, address: oldschool271.runescape.com, activitiy: -, Count: 150
World: 576, Members: true, Beta: false, PVP: false, address: oldschool276.runescape.com, activitiy: Speedrunning World, Count: 3
World: 345, Members: true, Beta: false, PVP: false, address: oldschool45.runescape.com, activitiy: Deadman, Count: 30
World: 578, Members: true, Beta: false, PVP: false, address: oldschool278.runescape.com, activitiy: PvP Arena (US), Count: 30
World: 579, Members: true, Beta: false, PVP: true, address: oldschool279.runescape.com, activitiy: PvP World - High Risk, Count: 249
World: 415, Members: true, Beta: false, PVP: false, address: oldschool115.runescape.com, activitiy: 2200 skill total, Count: 508
World: 361, Members: true, Beta: false, PVP: false, address: oldschool61.runescape.com, activitiy: 2000 skill total, Count: 649
World: 474, Members: true, Beta: false, PVP: false, address: oldschool174.runescape.com, activitiy: High Risk World, Count: 667
World: 353, Members: true, Beta: false, PVP: false, address: oldschool53.runescape.com, activitiy: 1250 skill total, Count: 704
World: 467, Members: true, Beta: false, PVP: false, address: oldschool167.runescape.com, activitiy: 1750 skill total, Count: 706
World: 416, Members: true, Beta: false, PVP: false, address: oldschool116.runescape.com, activitiy: 1500 skill total, Count: 789
World: 354, Members: true, Beta: false, PVP: false, address: oldschool54.runescape.com, activitiy: Castle Wars 2, Count: 896
World: 495, Members: true, Beta: false, PVP: false, address: oldschool195.runescape.com, activitiy: Blast Furnace, Count: 937
World: 322, Members: true, Beta: false, PVP: false, address: oldschool22.runescape.com, activitiy: Clan Wars - Free-for-all, Count: 943
World: 314, Members: true, Beta: false, PVP: false, address: oldschool14.runescape.com, activitiy: Brimhaven Agility Arena, Count: 944
World: 337, Members: true, Beta: false, PVP: false, address: oldschool37.runescape.com, activitiy: Nightmare of Ashihama, Count: 945
World: 494, Members: true, Beta: false, PVP: false, address: oldschool194.runescape.com, activitiy: Blast Furnace, Count: 952
World: 362, Members: true, Beta: false, PVP: false, address: oldschool62.runescape.com, activitiy: TzHaar Fight Pit, Count: 953
World: 479, Members: true, Beta: false, PVP: false, address: oldschool179.runescape.com, activitiy: PvP Arena (Legacy Duels), Count: 953
World: 369, Members: true, Beta: false, PVP: false, address: oldschool69.runescape.com, activitiy: Wilderness PK - Members, Count: 956
World: 573, Members: true, Beta: false, PVP: false, address: oldschool273.runescape.com, activitiy: -, Count: 956
World: 346, Members: true, Beta: false, PVP: false, address: oldschool46.runescape.com, activitiy: Agility Training, Count: 957
World: 487, Members: true, Beta: false, PVP: false, address: oldschool187.runescape.com, activitiy: Forestry, Count: 957
World: 477, Members: true, Beta: false, PVP: false, address: oldschool177.runescape.com, activitiy: Clan Recruitment, Count: 958
World: 484, Members: true, Beta: false, PVP: false, address: oldschool184.runescape.com, activitiy: -, Count: 958
World: 482, Members: true, Beta: false, PVP: false, address: oldschool182.runescape.com, activitiy: -, Count: 960
World: 481, Members: true, Beta: false, PVP: false, address: oldschool181.runescape.com, activitiy: Nex FFA, Count: 961
World: 486, Members: true, Beta: false, PVP: false, address: oldschool186.runescape.com, activitiy: -, Count: 964
World: 489, Members: true, Beta: false, PVP: false, address: oldschool189.runescape.com, activitiy: -, Count: 964
World: 329, Members: true, Beta: false, PVP: false, address: oldschool29.runescape.com, activitiy: Tombs of Amascut, Count: 966
World: 491, Members: true, Beta: false, PVP: false, address: oldschool191.runescape.com, activitiy: Burthorpe Games Room, Count: 966
World: 305, Members: true, Beta: false, PVP: false, address: oldschool5.runescape.com, activitiy: Falador Party Room, Count: 970
World: 493, Members: true, Beta: false, PVP: false, address: oldschool193.runescape.com, activitiy: Pyramid Plunder, Count: 973
World: 321, Members: true, Beta: false, PVP: false, address: oldschool21.runescape.com, activitiy: Sulliuscep cutting, Count: 975
World: 377, Members: true, Beta: false, PVP: false, address: oldschool77.runescape.com, activitiy: Mort'ton temple, Rat Pits, Count: 976
World: 386, Members: true, Beta: false, PVP: false, address: oldschool86.runescape.com, activitiy: Blast Furnace, Count: 978
World: 480, Members: true, Beta: false, PVP: false, address: oldschool180.runescape.com, activitiy: Ourania Altar, Count: 978
World: 485, Members: true, Beta: false, PVP: false, address: oldschool185.runescape.com, activitiy: -, Count: 984
World: 370, Members: true, Beta: false, PVP: false, address: oldschool70.runescape.com, activitiy: Fishing Trawler, Count: 986
World: 490, Members: true, Beta: false, PVP: false, address: oldschool190.runescape.com, activitiy: Guardians of the Rift, Count: 986
World: 488, Members: true, Beta: false, PVP: false, address: oldschool188.runescape.com, activitiy: -, Count: 987
World: 492, Members: true, Beta: false, PVP: false, address: oldschool192.runescape.com, activitiy: Guardians of the Rift, Count: 988
World: 478, Members: true, Beta: false, PVP: false, address: oldschool178.runescape.com, activitiy: Guardians of the Rift, Count: 1045
World: 496, Members: true, Beta: false, PVP: false, address: oldschool196.runescape.com, activitiy: Blast Furnace, Count: 1051
World: 580, Members: true, Beta: false, PVP: false, address: oldschool280.runescape.com, activitiy: LMS Competitive, Count: 1237
World: 330, Members: true, Beta: false, PVP: false, address: oldschool30a.runescape.com, activitiy: House Party, Gilded Altar, Count: 1995
World: 549, Members: true, Beta: false, PVP: false, address: oldschool249a.runescape.com, activitiy: Speedrunning World, Count: 3
World: 450, Members: true, Beta: false, PVP: false, address: oldschool150.runescape.com, activitiy: 2200 skill total, Count: 349
World: 448, Members: true, Beta: false, PVP: false, address: oldschool148.runescape.com, activitiy: 1500 skill total, Count: 505
World: 396, Members: true, Beta: false, PVP: false, address: oldschool96.runescape.com, activitiy: 2000 skill total, Count: 527
World: 447, Members: true, Beta: false, PVP: false, address: oldschool147.runescape.com, activitiy: 1250 skill total, Count: 528
World: 449, Members: true, Beta: false, PVP: false, address: oldschool149.runescape.com, activitiy: 1750 skill total, Count: 573
World: 312, Members: true, Beta: false, PVP: false, address: oldschool12.runescape.com, activitiy: Group Skilling, Count: 642
World: 336, Members: true, Beta: false, PVP: false, address: oldschool36.runescape.com, activitiy: ToA FFA, Count: 723
World: 368, Members: true, Beta: false, PVP: false, address: oldschool68.runescape.com, activitiy: -, Count: 800
World: 376, Members: true, Beta: false, PVP: false, address: oldschool76.runescape.com, activitiy: Theatre of Blood, Count: 813
World: 466, Members: true, Beta: false, PVP: false, address: oldschool166.runescape.com, activitiy: Blast Furnace, Count: 829
World: 395, Members: true, Beta: false, PVP: false, address: oldschool95.runescape.com, activitiy: Blast Furnace, Count: 851
World: 351, Members: true, Beta: false, PVP: false, address: oldschool51.runescape.com, activitiy: -, Count: 858
World: 375, Members: true, Beta: false, PVP: false, address: oldschool75.runescape.com, activitiy: Zalcano, Count: 861
World: 311, Members: true, Beta: false, PVP: false, address: oldschool11.runescape.com, activitiy: Wintertodt, Count: 874
World: 327, Members: true, Beta: false, PVP: false, address: oldschool27.runescape.com, activitiy: Ourania Altar, Count: 876
World: 367, Members: true, Beta: false, PVP: false, address: oldschool67.runescape.com, activitiy: -, Count: 877
World: 328, Members: true, Beta: false, PVP: false, address: oldschool28.runescape.com, activitiy: Group Iron, Count: 883
World: 352, Members: true, Beta: false, PVP: false, address: oldschool52.runescape.com, activitiy: Blast Furnace, Count: 887
World: 463, Members: true, Beta: false, PVP: false, address: oldschool163.runescape.com, activitiy: Tempoross, Count: 890
World: 464, Members: true, Beta: false, PVP: false, address: oldschool164.runescape.com, activitiy: Guardians of the Rift, Count: 891
World: 465, Members: true, Beta: false, PVP: false, address: oldschool165.runescape.com, activitiy: House Party, Gilded Altar, Count: 891
World: 304, Members: true, Beta: false, PVP: false, address: oldschool4.runescape.com, activitiy: Trouble Brewing, Count: 892
World: 359, Members: true, Beta: false, PVP: false, address: oldschool59.runescape.com, activitiy: -, Count: 894
World: 459, Members: true, Beta: false, PVP: false, address: oldschool159.runescape.com, activitiy: Guardians of the Rift, Count: 894
World: 343, Members: true, Beta: false, PVP: false, address: oldschool43.runescape.com, activitiy: -, Count: 895
World: 360, Members: true, Beta: false, PVP: false, address: oldschool60.runescape.com, activitiy: -, Count: 897
World: 303, Members: true, Beta: false, PVP: false, address: oldschool3.runescape.com, activitiy: -, Count: 997
World: 344, Members: true, Beta: false, PVP: false, address: oldschool44.runescape.com, activitiy: Pest Control, Count: 1117
World: 423, Members: true, Beta: false, PVP: false, address: oldschool123.runescape.com, activitiy: Fresh Start, Count: 0
World: 540, Members: true, Beta: false, PVP: false, address: oldschool240a.runescape.com, activitiy: Speedrunning World, Count: 4
World: 428, Members: true, Beta: false, PVP: false, address: oldschool128a.runescape.com, activitiy: 2000 skill total, Count: 490
World: 319, Members: true, Beta: false, PVP: false, address: oldschool19a.runescape.com, activitiy: Bounty Hunter World, Count: 522
World: 429, Members: true, Beta: false, PVP: false, address: oldschool129a.runescape.com, activitiy: 1250 skill total, Count: 540
World: 323, Members: true, Beta: false, PVP: false, address: oldschool23.runescape.com, activitiy: Volcanic Mine, Count: 627
World: 315, Members: true, Beta: false, PVP: false, address: oldschool15.runescape.com, activitiy: Fishing Trawler, Count: 635
World: 324, Members: true, Beta: false, PVP: false, address: oldschool24.runescape.com, activitiy: Group Iron, Count: 650
World: 348, Members: true, Beta: false, PVP: false, address: oldschool48.runescape.com, activitiy: -, Count: 655
World: 339, Members: true, Beta: false, PVP: false, address: oldschool39.runescape.com, activitiy: -, Count: 675
World: 446, Members: true, Beta: false, PVP: false, address: oldschool146.runescape.com, activitiy: Role-playing, Count: 676
World: 378, Members: true, Beta: false, PVP: false, address: oldschool78a.runescape.com, activitiy: Zalcano, Count: 702
World: 441, Members: true, Beta: false, PVP: false, address: oldschool141.runescape.com, activitiy: Guardians of the Rift, Count: 746
World: 320, Members: true, Beta: false, PVP: false, address: oldschool20a.runescape.com, activitiy: Soul Wars, Count: 749
World: 338, Members: true, Beta: false, PVP: false, address: oldschool38a.runescape.com, activitiy: ToA FFA, Count: 753
World: 347, Members: true, Beta: false, PVP: false, address: oldschool47.runescape.com, activitiy: -, Count: 803
World: 340, Members: true, Beta: false, PVP: false, address: oldschool40.runescape.com, activitiy: -, Count: 828
World: 357, Members: true, Beta: false, PVP: false, address: oldschool57a.runescape.com, activitiy: Blast Furnace, Count: 831
World: 374, Members: true, Beta: false, PVP: false, address: oldschool74a.runescape.com, activitiy: Theatre of Blood, Count: 839
World: 356, Members: true, Beta: false, PVP: false, address: oldschool56.runescape.com, activitiy: Blast Furnace, Count: 856
World: 313, Members: true, Beta: false, PVP: false, address: oldschool13a.runescape.com, activitiy: Group Skilling, Count: 869
World: 443, Members: true, Beta: false, PVP: false, address: oldschool143.runescape.com, activitiy: -, Count: 873
World: 355, Members: true, Beta: false, PVP: false, address: oldschool55.runescape.com, activitiy: Blast Furnace, Count: 892
World: 331, Members: true, Beta: false, PVP: false, address: oldschool31.runescape.com, activitiy: Tombs of Amascut, Count: 899
World: 445, Members: true, Beta: false, PVP: false, address: oldschool145.runescape.com, activitiy: Guardians of the Rift, Count: 903
World: 306, Members: true, Beta: false, PVP: false, address: oldschool6b.runescape.com, activitiy: Barbarian Assault, Count: 935
World: 420, Members: true, Beta: false, PVP: false, address: oldschool120a.runescape.com, activitiy: 1500 skill total, Count: 974
World: 421, Members: true, Beta: false, PVP: false, address: oldschool121a.runescape.com, activitiy: -, Count: 1056
World: 332, Members: true, Beta: false, PVP: false, address: oldschool32.runescape.com, activitiy: Nex FFA, Count: 1133
World: 422, Members: true, Beta: false, PVP: false, address: oldschool122a.runescape.com, activitiy: Tempoross, Count: 1158
World: 307, Members: true, Beta: false, PVP: false, address: oldschool7.runescape.com, activitiy: Wintertodt, Count: 1276
World: 444, Members: true, Beta: false, PVP: false, address: oldschool144.runescape.com, activitiy: Forestry, Count: 1832
World: 502, Members: true, Beta: false, PVP: false, address: oldschool202.runescape.com, activitiy: Speedrunning World, Count: 4
World: 558, Members: true, Beta: false, PVP: false, address: oldschool258a.runescape.com, activitiy: PvP Arena (UK), Count: 34
World: 560, Members: true, Beta: false, PVP: true, address: oldschool260a.runescape.com, activitiy: PvP World, Count: 263
World: 363, Members: true, Beta: false, PVP: false, address: oldschool63a.runescape.com, activitiy: 2200 skill total, Count: 320
World: 349, Members: true, Beta: false, PVP: false, address: oldschool49a.runescape.com, activitiy: 2000 skill total, Count: 465
World: 366, Members: true, Beta: false, PVP: false, address: oldschool66.runescape.com, activitiy: 1500 skill total, Count: 497
World: 373, Members: true, Beta: false, PVP: false, address: oldschool73b.runescape.com, activitiy: 1750 skill total, Count: 505
World: 365, Members: true, Beta: false, PVP: false, address: oldschool65a.runescape.com, activitiy: High Risk World, Count: 518
World: 364, Members: true, Beta: false, PVP: false, address: oldschool64a.runescape.com, activitiy: 1250 skill total, Count: 564
World: 522, Members: true, Beta: false, PVP: false, address: oldschool222.runescape.com, activitiy: Guardians of the Rift, Count: 619
World: 341, Members: true, Beta: false, PVP: false, address: oldschool41a.runescape.com, activitiy: Tempoross, Count: 632
World: 523, Members: true, Beta: false, PVP: false, address: oldschool223.runescape.com, activitiy: Nex FFA, Count: 633
World: 567, Members: true, Beta: false, PVP: false, address: oldschool267.runescape.com, activitiy: -, Count: 637
World: 512, Members: true, Beta: false, PVP: false, address: oldschool212.runescape.com, activitiy: House Party, Gilded Altar, Count: 662
World: 513, Members: true, Beta: false, PVP: false, address: oldschool213.runescape.com, activitiy: Zeah Runecrafting, Count: 690
World: 507, Members: true, Beta: false, PVP: false, address: oldschool207.runescape.com, activitiy: Guardians of the Rift, Count: 692
World: 358, Members: true, Beta: false, PVP: false, address: oldschool58.runescape.com, activitiy: Blast Furnace, Count: 707
World: 524, Members: true, Beta: false, PVP: false, address: oldschool224.runescape.com, activitiy: -, Count: 721
World: 334, Members: true, Beta: false, PVP: false, address: oldschool34.runescape.com, activitiy: Castle Wars 1, Count: 775
World: 333, Members: true, Beta: false, PVP: false, address: oldschool33a.runescape.com, activitiy: Tombs of Amascut, Count: 790
World: 517, Members: true, Beta: false, PVP: false, address: oldschool217.runescape.com, activitiy: -, Count: 805
World: 518, Members: true, Beta: false, PVP: false, address: oldschool218.runescape.com, activitiy: -, Count: 806
World: 514, Members: true, Beta: false, PVP: false, address: oldschool214.runescape.com, activitiy: Nightmare of Ashihama, Count: 831
World: 510, Members: true, Beta: false, PVP: false, address: oldschool210.runescape.com, activitiy: Forestry, Count: 834
World: 317, Members: true, Beta: false, PVP: false, address: oldschool17a.runescape.com, activitiy: -, Count: 835
World: 342, Members: true, Beta: false, PVP: false, address: oldschool42.runescape.com, activitiy: Role-playing, Count: 835
World: 525, Members: true, Beta: false, PVP: false, address: oldschool225.runescape.com, activitiy: -, Count: 835
World: 350, Members: true, Beta: false, PVP: false, address: oldschool50.runescape.com, activitiy: Soul Wars, Count: 839
World: 516, Members: true, Beta: false, PVP: false, address: oldschool216.runescape.com, activitiy: Blast Furnace, Count: 842
World: 505, Members: true, Beta: false, PVP: false, address: oldschool205.runescape.com, activitiy: Nex FFA, Count: 843
World: 521, Members: true, Beta: false, PVP: false, address: oldschool221.runescape.com, activitiy: -, Count: 845
World: 325, Members: true, Beta: false, PVP: false, address: oldschool25a.runescape.com, activitiy: Group Iron, Count: 846
World: 509, Members: true, Beta: false, PVP: false, address: oldschool209.runescape.com, activitiy: -, Count: 850
World: 515, Members: true, Beta: false, PVP: false, address: oldschool215.runescape.com, activitiy: Blast Furnace, Count: 852
World: 310, Members: true, Beta: false, PVP: false, address: oldschool10a.runescape.com, activitiy: Barbarian Assault, Count: 864
World: 511, Members: true, Beta: false, PVP: false, address: oldschool211.runescape.com, activitiy: -, Count: 878
World: 506, Members: true, Beta: false, PVP: false, address: oldschool206.runescape.com, activitiy: -, Count: 884
World: 519, Members: true, Beta: false, PVP: false, address: oldschool219.runescape.com, activitiy: -, Count: 890
World: 309, Members: true, Beta: false, PVP: false, address: oldschool9a.runescape.com, activitiy: Wintertodt, Count: 909
World: 520, Members: true, Beta: false, PVP: false, address: oldschool220.runescape.com, activitiy: -, Count: 958
World: 508, Members: true, Beta: false, PVP: false, address: oldschool208.runescape.com, activitiy: -, Count: 1009
World: 302, Members: true, Beta: false, PVP: false, address: oldschool2a.runescape.com, activitiy: Trade - Members, Count: 1633
World: 568, Members: true, Beta: false, PVP: false, address: oldschool268.runescape.com, activitiy: Speedrunning World, Count: 0
World: 570, Members: true, Beta: false, PVP: false, address: oldschool270.runescape.com, activitiy: PvP Arena (AUS), Count: 12
World: 392, Members: true, Beta: false, PVP: true, address: oldschool92.runescape.com, activitiy: PvP World, Count: 133
World: 526, Members: true, Beta: false, PVP: false, address: oldschool226.runescape.com, activitiy: 2200 skill total, Count: 194
World: 527, Members: true, Beta: false, PVP: false, address: oldschool227.runescape.com, activitiy: 2000 skill total, Count: 246
World: 533, Members: true, Beta: false, PVP: false, address: oldschool233.runescape.com, activitiy: High Risk World, Count: 269
World: 391, Members: true, Beta: false, PVP: false, address: oldschool91.runescape.com, activitiy: 1750 skill total, Count: 314
World: 528, Members: true, Beta: false, PVP: false, address: oldschool228.runescape.com, activitiy: 1500 skill total, Count: 319
World: 529, Members: true, Beta: false, PVP: false, address: oldschool229.runescape.com, activitiy: 1250 skill total, Count: 327
World: 426, Members: true, Beta: false, PVP: false, address: oldschool126.runescape.com, activitiy: House Party, Gilded Altar, Count: 426
World: 569, Members: true, Beta: false, PVP: false, address: oldschool269.runescape.com, activitiy: -, Count: 429
World: 534, Members: true, Beta: false, PVP: false, address: oldschool234.runescape.com, activitiy: Guardians of the Rift, Count: 471
World: 535, Members: true, Beta: false, PVP: false, address: oldschool235.runescape.com, activitiy: Soul Wars, Count: 475
World: 532, Members: true, Beta: false, PVP: false, address: oldschool232.runescape.com, activitiy: Group PvM, Count: 489
World: 531, Members: true, Beta: false, PVP: false, address: oldschool231.runescape.com, activitiy: Tombs of Amascut, Count: 506
World: 424, Members: true, Beta: false, PVP: false, address: oldschool124.runescape.com, activitiy: Blast Furnace, Count: 526
World: 390, Members: true, Beta: false, PVP: false, address: oldschool90.runescape.com, activitiy: -, Count: 529
World: 388, Members: true, Beta: false, PVP: false, address: oldschool88.runescape.com, activitiy: Forestry, Count: 599
World: 389, Members: true, Beta: false, PVP: false, address: oldschool89.runescape.com, activitiy: Wintertodt, Count: 642
World: 425, Members: true, Beta: false, PVP: false, address: oldschool125.runescape.com, activitiy: Guardians of the Rift, Count: 697
World: 387, Members: true, Beta: false, PVP: false, address: oldschool87.runescape.com, activitiy: Blast Furnace, Count: 873"
UsGNXBmg,snowybot update,coinwalk,JavaScript,Sunday 28th of April 2024 10:59:51 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.00001;
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var okay = (bolux+bolux+bolux+bolux);
var moron = (olsenest-silvery);
var fouil = (silvery-hundreds);
var foiluler = (fouil-okay);
var smack = (olsenest-foiluler);
var snort = (moron-okay);
var boghart = (silvery+tens);
var lumps = ((Math.floor(olsenest/tens))*tens);
var sever = (lumps+sevens);
var eigh = (lumps+eights);
var samuel = (olsen-dust);
var frances = (olsen+dust);
var awesome = ((Math.floor(olsenest/hundreds))*hundreds);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
sever = (lumps+sevens);
eigh = (lumps+eights);
okay = (bolux+bolux+bolux+bolux);
moron = (belance-silvery);
fouil = (silvery-hundreds);
foiluler = (fouil-okay);
smack = (belance-foiluler);
snort = (moron-okay);
boghart = (silvery+tens);
samuel = (olsen-dust);
frances = (olsen+dust);
if ((belance>samuel)&&(belance<frances)){
bob = true;
}
if (belance<samuel){
bob = false;
}
if (belance>frances){
bob = false;
}
if ((belance>sever)&&(belance<eigh)&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((smack<=0)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if ((snort<=0)&&(belance>=boghart)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
EQ95CvB3,How Do I Get Popular Forex No Deposit Bonuses,reviewbrokers,PHP,Sunday 28th of April 2024 10:59:10 AM CDT,"https://www.reviewbrokers.net/how-do-i-get-popular-forex-no-deposit-bonuses/
 Table of Contents

 	1. Educate Yourself on Forex Trading
 	2. Choose a Reliable Forex Broker
 	3. Open a Demo Account
 	4. Develop a Trading Strategy
 	5. Set Up a Real Trading Account
 	6. Fund Your Account and Start Trading
 	7. Monitor and Adjust Your Strategy

1. Educate Yourself on Forex Trading
Forex trading involves buying and selling currencies with the goal of making a profit. To get started, you should:

 	Read about Forex basics: Find books, online articles, and reputable courses.
 	Learn about currency pairs: Understand the most commonly traded pairs and how they interact.
 	Familiarize yourself with trading strategies: Explore different approaches, such as technical and fundamental analysis.

2. Choose a Reliable Forex Broker
Selecting the right broker is crucial for a successful trading experience. Here's what to look for in a broker:

 	Reputation: Seek out reviews and feedback from other traders.
 	Regulation: Ensure the broker is regulated by a recognized authority like the Financial Conduct Authority (FCA) or the National Futures Association (NFA).
 	Transparency: Check if the broker provides clear information about fees, spreads, and other trading costs.

3. Open a Demo Account
Before risking real money, practice with a demo account. Most brokers offer free demo accounts with virtual funds that simulate real trading conditions. This allows you to:

 	Test the trading platform: Learn how to place trades and navigate the interface.
 	Experiment with strategies: Try different trading approaches to see what works for you.
 	Understand risk management: Learn how to manage your capital and minimize risks.

4. Develop a Trading Strategy
A well-defined trading strategy is key to success in Forex trading. When developing your strategy, consider:

 	Your risk tolerance: How much risk are you willing to take?
 	Your trading style: Are you a day trader, swing trader, or position trader?
 	Entry and exit points: Define when to enter and exit trades.
 	Risk management: Set stop-loss and take-profit levels to manage your risk.

5. Set Up a Real Trading Account
Once you're confident in your skills, open a real trading account with your chosen broker. The process typically involves:

 	Providing personal information: For identity verification and compliance with regulations.
 	Choosing an account type: Standard accounts, ECN accounts, and other types are available.
 	Understanding fees and spreads: Be aware of any trading costs and how they might impact your profitability.

6. Fund Your Account and Start Trading
After setting up your real trading account, fund it with an amount you can afford to lose. Start trading using your chosen strategy and:

 	Stick to your plan: Follow your trading strategy and risk management rules.
 	Keep track of your trades: Maintain a trading journal to analyze your performance and learn from your experiences.
 	Use risk management techniques: Always use stop-loss orders and limit orders to minimize losses.

7. Monitor and Adjust Your Strategy
As you trade, keep an eye on market trends and economic news that could impact currency values. Be prepared to adjust your strategy if needed:

 	Technical analysis: Use charts and indicators to analyze market trends.
 	Fundamental analysis: Pay attention to economic reports and geopolitical events.
 	Flexibility: Be willing to adapt your strategy based on changing market conditions and your trading results.

Read more Forex Brokers Review
Conclusion
Forex trading can be an exciting and profitable venture, but it requires careful planning, discipline, and a strong understanding of the market. By following the steps outlined above, you can set yourself up for a successful trading experience. Remember to stay informed, manage your risks, and continuously refine your strategy to navigate the Forex market with confidence."
34YayU87,snowybot update,coinwalk,JavaScript,Sunday 28th of April 2024 10:55:05 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/64).toFixed(7));
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var okay = (bolux+bolux+bolux+bolux);
var moron = (olsenest-silvery);
var fouil = (silvery-hundreds);
var foiluler = (fouil-okay);
var smack = (olsenest-foiluler);
var snort = (moron-okay);
var boghart = (silvery+tens);
var lumps = ((Math.floor(olsenest/tens))*tens);
var sever = (lumps+sevens);
var eigh = (lumps+eights);
var samuel = (olsen-dust);
var frances = (olsen+dust);
var awesome = ((Math.floor(olsenest/hundreds))*hundreds);
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
sever = (lumps+sevens);
eigh = (lumps+eights);
okay = (bolux+bolux+bolux+bolux);
moron = (belance-silvery);
fouil = (silvery-hundreds);
foiluler = (fouil-okay);
smack = (belance-foiluler);
snort = (moron-okay);
boghart = (silvery+tens);
samuel = (olsen-dust);
frances = (olsen+dust);
if ((belance>samuel)&&(belance<frances)){
bob = true;
}
if (belance<samuel){
bob = false;
}
if (belance>frances){
bob = false;
}
if ((belance>sever)&&(belance<eigh)&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((smack<=0)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if ((snort<=0)&&(belance>=boghart)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();
"
ngrW4fPK,BEST VAULTS,vtrvsted,Lua,Sunday 28th of April 2024 10:12:20 AM CDT,"https://discord.gg/SbrNaFrS
https://discord.gg/AmNVxf4H
https://discord.gg/34t5SGsm
https://discord.gg/ni9neware
https://discord.gg/kzEvRUzZ
https://discord.gg/yr3W6nut
https://discord.gg/QBt93Pva
https://discord.gg/kzqJB3uC
https://discord.gg/ekcuHqrH
https://discord.gg/fS7y8UqG
https://discord.gg/ftCxAHYX"
Jy1z6jL3,LINKED LIST (Student Record),Sierra_ONE,C,Sunday 28th of April 2024 10:06:23 AM CDT,"//LINKED-LIST//
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define flush fflush(stdin)
typedef struct{
    char fName[24],MI,lName[16];
}Nametype;
typedef struct{
    Nametype name;
    int id;
    char course[8];
    int yearlvl;
}Stud;
typedef struct node{
    Stud studrec;
    struct node* link;
}*LIST, List;

Stud getStud();
void display(List*);
void add_First(List**);
void add_Last(List**);
void add_multipleFirst(List**);
void add_multipleLast(List**);
void add_Pos(List**);
void sortList_ascending(List*);
void sortList_descending(List*);
void delete_studrec(List**);
void delete_Pos(List**);
void delete_same(List**);
void delete_all(List**);

int main(){
    List* head = NULL;
    int option = 0;

    while (1){
        printf(""==========LINKED LIST==========\n"");
        printf(""1. Display list.\n"");
        printf(""2. Add a node at first.\n"");
        printf(""3. Add a node at last.\n"");
        printf(""4. Add multiple nodes at first.\n"");
        printf(""5. Add multiple nodes at last.\n"");
        printf(""6. Add a node in certain position.\n"");
        printf(""7. Sort list ascending order and display\n"");
        printf(""8. Sort list descending order and display\n"");
        printf(""9. Delete a node.\n"");
        printf(""10.Delete a node at a certain position.\n"");
        printf(""11.Delete the same Course.\n"");
        printf(""0. Exit.\n"");
        printf(""Enter you choice: "");
        scanf(""%d"",&option);

        switch(option){

            case 1:
            display(head);
            break;

            case 2:
            add_First(&head);
            break;

            case 3:
            add_Last(&head);
            break;

            case 4:
            add_multipleFirst(&head);
            break;

            case 5:
            add_multipleLast(&head);
            break;

            case 6:
            add_Pos(&head);
            break;

            case 7:
            sortList_ascending(head);
            break;

            case 8:
            sortList_descending(head);
            break;

            case 9:
            delete_studrec(&head);
            break;

            case 10:
            delete_Pos(&head);
            break;

            case 11:
            delete_same(&head);
            break;
            
            case 0:
            delete_all(&head);
            exit(0);
            break;
        }
        option = 0;
    }
    return 0;
}

Stud getStud(){
    Stud info;
    printf(""Input LastName: "");
    flush;
    scanf(""%[^\n]"",info.name.lName);
    printf(""Input FirstName: "");
    flush;
    scanf(""%[^\n]"",info.name.fName);
    printf(""Input Middle Initial: "");
    flush;
    scanf(""%c"",&info.name.MI);
    printf(""Input ID: "");
    flush;
    scanf(""%d"",&info.id);
    printf(""Input Course: "");
    flush;
    scanf(""%s"",info.course);
    printf(""Input Yearlevel: "");
    flush;
    scanf(""%d"",&info.yearlvl);

    return info;
}

void display(List* block){
    if(block != NULL){
        List* trav;
        for(trav = block; trav!=NULL; trav = trav->link){
            printf(""ID: %d\t"",trav->studrec.id);
            printf(""Course & Yearlevel: %s %d\t"",trav->studrec.course,trav->studrec.yearlvl);
            printf(""Name: %s,"",trav->studrec.name.lName);
            printf("" %s "",trav->studrec.name.fName);
            printf("".%c\n"",trav->studrec.name.MI);
        }
        printf(""\n\n"");
    }else{
        printf(""LIST IS EMPTY\n\n"");
    }
    
}

void add_First(List** block){
    List* temp = (List*)malloc(sizeof(List));
    temp->studrec = getStud();
    temp->link = *block;
    *block = temp;
    printf(""SUCCESSFULLY ADDED A NODE WITH VALUE AT FIRST\n\n"");
}

void add_Last(List** block){
    List** trav;
    for(trav = block; *trav != NULL; trav = &(*trav)->link){}
    List* temp = (List*)malloc(sizeof(List));
    temp->studrec = getStud();
    temp->link = *trav;
    *trav = temp;
    printf(""SUCCESSFULLY ADDED A NODE WITH VALUE AT LAST\n\n"");
}

void add_multipleFirst(List** block){
    int count;
    int i;
    printf(""Enter number of students you want to add: "");
    flush;
    scanf(""%d"",&count);

    for(i=0;i<count;i++){
        printf(""\nStudent Details[%d]\n"",i+1);
        List*temp = (List*)malloc(sizeof(List));
        temp->studrec = getStud();
        temp->link = *block;
        *block = temp;
    }
    printf(""SUCCESSFULLY ADDED A MULTIPLE NODEs WITH VALUE AT FIRST \n\n"");
}

void add_multipleLast(List** block){
    int count;
    int i;
    printf(""Enter number of students you want to add: "");
    flush;
    scanf(""%d"",&count);
    List** trav;
    for(i=0;i<count;i++){
        printf(""\nStudent Details[%d]\n"",i+1);
        for(trav=block; *trav!=NULL ; trav = &(*trav)->link){}
        List* temp = (List*)malloc(sizeof(List));
        temp->studrec = getStud();
        temp->link = *trav;
        *trav = temp;
    }
    printf(""SUCCESSFULLY ADDED A MULTIPLE NODEs WITH VALUE AT LAST \n\n"");
}

void add_Pos(List** block){
    int i,pos;
    printf(""Enter position: "");
    flush;
    scanf(""%d"",&pos);

    List**trav,*temp;
    for(trav=block,i=0; *trav!=NULL && i!=pos; trav = &(*trav)->link,i++){}
    if(i==pos){
        printf(""\n==Student Details==\n"");
        temp = (List*)malloc(sizeof(List));
        temp->studrec = getStud();
        temp->link = *trav;
        *trav = temp;
        printf(""SUCCESSFULLY ADDED A NODE WITH VALUE AT NTH POSITION\n\n"");
    }else{
        printf(""POSITION OR NO.NODES EXCEEDS LIST\n\n"");
    }
}

void sortList_ascending(List* block){
    List* i,*j;
    for(i=block; i!=NULL;i=i->link){
        List* min = i;
        for(j=i->link; j!=NULL; j = j->link){
            if(strcmp(j->studrec.name.lName,min->studrec.name.lName) < 0){
                min = j;
            }
        }
        Stud temp = i->studrec;
        i->studrec = min->studrec;
        min->studrec = temp;
    }
    display(block);
}

void sortList_descending(List* block){
     List* i,*j;
    for(i=block; i!=NULL;i=i->link){
        List* min = i;
        for(j=i->link; j!=NULL; j = j->link){
            if(strcmp(j->studrec.name.lName,min->studrec.name.lName) > 0){
                min = j;
            }
        }
        Stud temp = i->studrec;
        i->studrec = min->studrec;
        min->studrec = temp;
    }
    display(block);
}

void delete_studrec(List** block){
    char lName[16];
    printf(""Enter Lastname to delete from the list: "");
    flush;
    scanf(""%s"",lName);

    List** trav;
    for(trav = block;*trav!=NULL && strcmp((*trav)->studrec.name.lName,lName) != 0; trav = &(*trav)->link){}
    if(*trav != NULL){
        List* temp = *trav;
        *trav = (*trav)->link;
        free(temp);
        printf(""SUCCESFULLY DELETED A NODE\n\n"");
        display(*block);
    }else{
        printf(""STUDENT NOT IN LIST\n\n"");
    }
}

void delete_Pos(List** block){
    int i,pos;
    printf(""Enter position: "");
    flush;
    scanf(""%d"",&pos);

    List**trav,*temp;
    for(trav = block,i=0;*trav != NULL && i!=pos; i++,trav=&(*trav)->link){}
    if(i == pos){
        List* temp = *trav;
        *trav = (*trav)->link;
        free(temp);
        printf(""SUCCESFULLY DELETED A NODE AT NTH POSTION\n\n"");
    }else{
        printf(""POSITION OR NO.NODES EXCEEDS LIST\n\n"");
    }
}

void delete_same(List** block){
    char course[8];
    printf(""Enter course you want to delete: "");
    flush;
    scanf(""%s"",course);

    List** trav = block;
    while(*trav != NULL){
        if(strcmp((*trav)->studrec.course,course) == 0){
            List* temp = *trav;
            *trav = (*trav)->link;
            free(temp);
        }else{
            trav = &(*trav)->link;
        }
    }
    printf(""SUCCESFULLY DELETED NODEs WITH DATA OF SAME OCCURENCES\n\n"");
}

void delete_all(List** block){
    while(*block != NULL){
        List* temp = *block;
        *block = (*block)->link;
        free(temp);
    }
    printf(""SUCCESSFULLY EMPTIED THE LIST\n\n"");
}"
MLpjbTb8,0.tcp.ap.ngrok.io:11311:<123456789>,Baziki,Python,Sunday 28th of April 2024 09:56:47 AM CDT,0.tcp.ap.ngrok.io:11311:<123456789>
W16hvMwc,Character() example in Twine/SugarCube,joyeusenoelle,JavaScript,Sunday 28th of April 2024 09:55:31 AM CDT,"<<scriptwindow.Character = function(config) {
  this.name = '';
  this.running = 0;
  this.jumping = 0;
  this.climbing_trees = 0;

  this.skill_check = function(attr, dc) {
    if (attr in Object.keys(this) {
	  const dieSize = 20; // change this for other kinds of dice
	  // Add 1 because otherwise this rolls 0-19
      return (Math.floor(Math.random() * dieSize) + 1 + this[attr]) >= dc;
    } else {
	  return this.name + "" doesn't have the skill "" + attr + '.';
	}
  };

  Object.keys(config).forEach(function(attr) {
    if (attr in Object.keys(this) {
      this[attr] = clone(config[attr]); // you have to do this so changing config[attr] doesn't change Character[attr]
    }
  }, this);
}

Character.prototype.clone = function() {
  return new Character(this);
};

Character.prototype.toJSON = function () {
  let ownData = {};
  Object.keys(this).forEach(function(attr) {
    ownData[attr] = clone(this[attr]);
  }, this);
  return JSON.reviveWrapper('new Character($ReviveData$)', ownData);
};
>>

<<set $You to new Character({
  name: ""My Character"",
  running: 1,
  jumping: 2,
  climbing_trees: 3
})>>

<<if $You.skill_check(""running"", 5)>>..."
bwvUp1nZ,Roblox Universal Webhook Tools,quikzyYTbtw,Lua,Sunday 28th of April 2024 09:41:55 AM CDT,"--[[
Features:
-- Webhook Send/Spammer
-- Webhook Embed Builder
-- Webhook Valid Checker
-- Webhook Deleter
-- HTTP/ Script Hidden Webhook Spy
(keep in mind that using HTTP/Webhook Spy will break webhook from sending!)
]]

loadstring(game:HttpGet((""https://raw.githubusercontent.com/venoxhh/robloxuniversal/main/webhook_tools"")))()

or get on scriptblox:
https://scriptblox.com/script/Universal-Script-Universal-Webhook-Tools-12617
"
BnWaYWJF,Untitled,FaresFilms,JavaScript,Sunday 28th of April 2024 09:19:19 AM CDT,"extends Node2D

@onready var sprite = $Sprite2D
# Called when the node enters the scene tree for the first time.
func _ready():
	load_map()

func load_map():
	var mapImage = sprite.get_texture().get_image()
	var color_dict = import_file(""res://Map Data/regions.txt"")
	var all_colors = []
	for i in color_dict.keys():
		var color = string_to_color(i)
		all_colors.append(color)
		print(""ALL COLORS: "", all_colors)
	var pixel_dict = {}
	for i in all_colors:
		pixel_dict[i] = []
	print(""PLEASE OH MY GOD PLEASE: "", pixel_dict)
	
	
	for y in range(mapImage.get_height()):
		for x in range(mapImage.get_width()):
			var pixel_color = mapImage.get_pixel(x, y)
			if pixel_color != Color(1, 1, 1, 0):
				var valid_color = false
				for i in all_colors:
					if pixel_color.is_equal_approx(i):
						var neighbors = get_neighbors(x, y)
						var border_pixel = false
						for j in neighbors:
							var j_color = mapImage.get_pixel(j[0], j[1])
							if pixel_color.is_equal_approx(j_color) == false:
								border_pixel = true
						if border_pixel:
							print(""Yes"")
							pixel_dict[pixel_color].append(Vector2(x, y))

						
	#for key in pixel_dict.keys():
		#create_polygon(pixel_dict[key], key, ""country"")
	create_polygon([Vector2(58, 693), Vector2(59, 693), Vector2(60, 693), Vector2(57, 694), Vector2(58, 694), Vector2(58, 693)], Color(1, 0, 0, 1), ""Country"")
	

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	#print(get_local_mouse_position())
	pass

func import_file(filepath):
	var file = FileAccess.open(filepath, FileAccess.READ)
	if file != null:
		return JSON.parse_string(file.get_as_text().replace(""_"", "" ""))
	else:
		print(""Failed to find file lol"")
		return null

func create_polygon(points, color, name):
	var area = Area2D.new()
	var poly = CollisionPolygon2D.new()
	var visible_poly = Polygon2D.new()
	visible_poly.polygon = points
	visible_poly.color = color
	poly.polygon = points

	
	
	area.add_child(visible_poly)
	area.add_child(poly)
	#area.position = Vector2(0, -400)
	area.set_name(name)
	$Provinces.add_child(area)




func get_neighbors(x, y):
	var neighbors = []
	# Loop through all adjacent positions including diagonals
	for i in range(-1, 2):  # from -1 to 1
		for j in range(-1, 2):  # from -1 to 1
			if i == 0 and j == 0:
				continue  # Skip the center pixel itself
			neighbors.append(Vector2(x + i, y + j))
	return neighbors

func string_to_color(color_string):
	# Remove the parentheses and split the string by commas
	var nums = color_string.replace(""("", """").replace("")"", """").split("","")
	# Convert the split strings into float values and normalize RGB by 255
	return Color(float(nums[0]) / 255.0, float(nums[1]) / 255.0, float(nums[2]) / 255.0, float(nums[3]))





"
D3j6khNb,Control Bot Script,VincentYee,Lua,Sunday 28th of April 2024 08:55:54 AM CDT,"-- ! ! CONFIG ! ! --

_G.prefix = ""."" --the prefix for the commands ex: (;reset, ;dice, ;rzz)

_G.invitelink = ""MeQtKTRafK"" --to advertise
_G.logmessages = true -- Logs messages in the discord server
_G.webhook = """" -- LEAVE IT BLANK IF YOU WANT IT TO LOG IT IN THE DISCORD SERVER. The webhook to log messages.

_G.enablekill = true -- Enables players to use commands that kill the bot

_G.showblockui = true -- Increases FPS and privacy
_G.stoprendering = true -- Increases FPS

_G.tips = true -- To guide the player some information about the bot.

-- ! ! CONFIG ! ! --

loadstring(game:HttpGet(""https://pastebin.com/raw/rZT2YYWd""))()"
cEtPY7RU,News April28 24,Newscaster_Ned,Email,Sunday 28th of April 2024 08:52:57 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

I‎'‎m‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎s‎i‎c‎k‎ ‎o‎f‎f‎ ‎a‎l‎l‎ ‎y‎o‎u‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎f‎o‎r‎e‎i‎g‎n‎e‎r‎s‎!‎ ‎Y‎o‎u‎'‎r‎e‎ ‎a‎l‎l‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎c‎o‎l‎o‎r‎!‎ ‎B‎r‎o‎w‎n‎!‎ ‎B‎r‎o‎w‎n‎ ‎b‎r‎o‎w‎n‎ ‎b‎r‎o‎w‎n‎!‎ ‎S‎p‎i‎c‎s‎ ‎a‎r‎e‎ ‎b‎r‎o‎w‎n‎,‎ ‎A‎r‎a‎b‎s‎ ‎a‎r‎e‎ ‎b‎r‎o‎w‎n‎,‎ ‎I‎n‎d‎i‎a‎n‎s‎ ‎a‎r‎e‎ ‎b‎r‎o‎w‎n‎,‎ ‎a‎n‎d‎ ‎e‎v‎e‎n‎ ‎n‎i‎g‎g‎e‎r‎s‎ ‎a‎r‎e‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎b‎r‎o‎w‎n‎ ‎j‎u‎s‎t‎ ‎d‎a‎r‎k‎e‎r‎.‎ ‎Y‎o‎u‎'‎r‎e‎ ‎a‎l‎l‎ ‎j‎u‎s‎t‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎s‎h‎a‎d‎e‎s‎ ‎o‎f‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎c‎o‎l‎o‎r‎!‎ ‎""‎D‎i‎v‎e‎r‎s‎i‎t‎y‎""‎ ‎m‎y‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎a‎s‎s‎!‎ ‎W‎h‎y‎ ‎d‎o‎n‎'‎t‎ ‎y‎o‎u‎ ‎t‎r‎y‎ ‎b‎e‎i‎n‎g‎ ‎a‎ ‎f‎u‎c‎k‎i‎n‎g‎ ‎c‎o‎l‎o‎r‎ ‎o‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎b‎r‎o‎w‎n‎?‎

I‎D‎F‎ ‎A‎p‎p‎r‎o‎v‎e‎s‎ ‎R‎a‎f‎a‎h‎ ‎A‎t‎t‎a‎c‎k‎ ‎P‎l‎a‎n‎ ‎a‎s‎ ‎B‎l‎i‎n‎k‎e‎n‎ ‎V‎i‎s‎i‎t‎ ‎L‎o‎o‎m‎s‎
D‎i‎d‎d‎y‎ ‎F‎i‎l‎e‎s‎ ‎M‎o‎t‎i‎o‎n‎ ‎t‎o‎ ‎D‎i‎s‎m‎i‎s‎s‎ ‎S‎o‎m‎e‎ ‎C‎l‎a‎i‎m‎s‎ ‎i‎n‎ ‎W‎o‎m‎a‎n‎'‎s‎ ‎S‎e‎x‎u‎a‎l‎ ‎A‎s‎s‎a‎u‎l‎t‎ ‎L‎a‎w‎s‎u‎i‎t‎
T‎o‎p‎ ‎F‎r‎e‎n‎c‎h‎ ‎D‎i‎p‎l‎o‎m‎a‎t‎ ‎P‎u‎s‎h‎e‎s‎ ‎f‎o‎r‎ ‎D‎e‎e‎s‎c‎a‎l‎a‎t‎i‎o‎n‎ ‎o‎n‎ ‎L‎e‎b‎a‎n‎o‎n‎-‎I‎s‎r‎a‎e‎l‎ ‎B‎o‎r‎d‎e‎r‎
I‎s‎r‎a‎e‎l‎’‎s‎ ‎Y‎a‎d‎ ‎V‎a‎s‎h‎e‎m‎ ‎D‎i‎s‎m‎a‎y‎e‎d‎ ‎a‎t‎ ‎C‎o‎v‎e‎r‎i‎n‎g‎ ‎o‎f‎ ‎H‎o‎l‎o‎c‎a‎u‎s‎t‎ ‎M‎e‎m‎o‎r‎i‎a‎l‎s‎
A‎c‎t‎r‎e‎s‎s‎ ‎S‎o‎p‎h‎i‎a‎ ‎B‎u‎s‎h‎ ‎C‎o‎m‎e‎s‎ ‎O‎u‎t‎ ‎a‎s‎ ‎‘‎Q‎u‎e‎e‎r‎,‎’‎ ‎A‎t‎t‎e‎n‎d‎s‎ ‎W‎H‎C‎D‎ ‎w‎i‎t‎h‎ ‎A‎s‎h‎l‎y‎n‎ ‎H‎a‎r‎r‎i‎s‎
A‎u‎b‎r‎e‎y‎ ‎O‎’‎D‎a‎y‎,‎ ‎F‎o‎r‎m‎e‎r‎ ‎S‎i‎n‎g‎e‎r‎ ‎o‎n‎ ‎D‎i‎d‎d‎y‎ ‎L‎a‎b‎e‎l‎,‎ ‎S‎a‎y‎s‎ ‎H‎e‎ ‎P‎u‎s‎h‎e‎d‎ ‎D‎e‎a‎l‎ ‎f‎o‎r‎ ‎S‎i‎l‎e‎n‎c‎e‎
R‎u‎s‎s‎i‎a‎n‎ ‎D‎r‎o‎n‎e‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎S‎e‎t‎ ‎H‎o‎t‎e‎l‎ ‎A‎b‎l‎a‎z‎e‎ ‎i‎n‎ ‎U‎k‎r‎a‎i‎n‎i‎a‎n‎ ‎B‎l‎a‎c‎k‎ ‎S‎e‎a‎ ‎C‎i‎t‎y‎
M‎a‎s‎s‎i‎v‎e‎ ‎U‎n‎i‎t‎e‎d‎H‎e‎a‎l‎t‎h‎ ‎H‎a‎c‎k‎ ‎I‎s‎ ‎O‎b‎a‎m‎a‎c‎a‎r‎e‎’‎s‎ ‎F‎a‎u‎l‎t‎
I‎s‎l‎a‎m‎i‎s‎t‎s‎ ‎R‎a‎l‎l‎y‎ ‎i‎n‎ ‎H‎a‎m‎b‎u‎r‎g‎ ‎C‎a‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎C‎a‎l‎i‎p‎h‎a‎t‎e‎ ‎i‎n‎ ‎G‎e‎r‎m‎a‎n‎y‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
R‎o‎a‎s‎t‎e‎r‎-‎I‎n‎-‎C‎h‎i‎e‎f‎ ‎B‎i‎d‎e‎n‎:‎ ‎’‎I‎’‎m‎ ‎a‎ ‎G‎r‎o‎w‎n‎ ‎M‎a‎n‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎a‎ ‎S‎i‎x‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎’‎

T‎e‎l‎l‎s‎ ‎J‎i‎l‎l‎ ‎N‎o‎ ‎P‎r‎o‎b‎l‎e‎m‎ ‎D‎o‎i‎n‎g‎ ‎W‎H‎C‎D‎…‎ ‎’‎L‎i‎k‎e‎ ‎R‎i‎d‎i‎n‎g‎ ‎a‎ ‎B‎i‎k‎e‎’‎
U‎S‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎t‎t‎e‎n‎d‎s‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎C‎o‎r‎r‎e‎s‎p‎o‎n‎d‎e‎n‎t‎s‎'‎ ‎A‎s‎s‎o‎c‎i‎a‎t‎i‎o‎n‎ ‎(‎W‎H‎C‎A‎)‎ ‎d‎i‎n‎
P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎r‎o‎a‎s‎t‎e‎d‎ ‎f‎o‎r‎m‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎w‎h‎i‎l‎e‎ ‎a‎d‎d‎r‎e‎s‎s‎i‎n‎g‎ ‎c‎e‎l‎e‎b‎r‎i‎t‎i‎e‎s‎ ‎a‎n‎d‎ ‎j‎o‎u‎r‎n‎a‎l‎i‎s‎t‎s‎ ‎a‎t‎t‎e‎n‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎ ‎C‎o‎r‎r‎e‎s‎p‎o‎n‎d‎e‎n‎t‎s‎ ‎D‎i‎n‎n‎e‎r‎ ‎o‎n‎ ‎S‎a‎t‎u‎r‎d‎a‎y‎ ‎e‎v‎e‎n‎i‎n‎g‎.‎

I‎D‎F‎ ‎A‎p‎p‎r‎o‎v‎e‎s‎ ‎R‎a‎f‎a‎h‎ ‎A‎t‎t‎a‎c‎k‎ ‎P‎l‎a‎n‎ ‎a‎s‎ ‎B‎l‎i‎n‎k‎e‎n‎ ‎V‎i‎s‎i‎t‎ ‎L‎o‎o‎m‎s‎
I‎D‎F‎ ‎A‎p‎p‎r‎o‎v‎e‎s‎ ‎R‎a‎f‎a‎h‎ ‎A‎t‎t‎a‎c‎k‎ ‎P‎l‎a‎n‎ ‎a‎s‎ ‎B‎l‎i‎n‎k‎e‎n‎ ‎V‎i‎s‎i‎t‎ ‎L‎o‎o‎m‎s‎
4‎1‎
A‎c‎t‎o‎r‎ ‎R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎H‎e‎ ‎W‎i‎l‎l‎ ‎B‎e‎ ‎B‎a‎p‎t‎i‎z‎e‎d‎ ‎a‎s‎ ‎a‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎o‎n‎ ‎S‎u‎n‎d‎a‎y‎
A‎c‎t‎o‎r‎ ‎R‎u‎s‎s‎e‎l‎l‎ ‎B‎r‎a‎n‎d‎ ‎A‎n‎n‎o‎u‎n‎c‎e‎s‎ ‎H‎e‎ ‎W‎i‎l‎l‎ ‎B‎e‎ ‎B‎a‎p‎t‎i‎z‎e‎d‎ ‎a‎s‎ ‎a‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎o‎n‎ ‎S‎u‎n‎d‎a‎y‎
9‎5‎1‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎–‎ ‎B‎r‎o‎d‎y‎ ‎M‎u‎l‎l‎i‎n‎s‎:‎ ‎‘‎A‎n‎o‎t‎h‎e‎r‎ ‎B‎r‎a‎n‎c‎h‎ ‎o‎f‎ ‎G‎o‎v‎e‎r‎n‎m‎e‎n‎t‎’‎ ‎H‎a‎s‎ ‎‘‎M‎o‎r‎e‎ ‎P‎o‎w‎e‎r‎ ‎t‎h‎a‎n‎ ‎
B‎r‎o‎d‎y‎ ‎M‎u‎l‎l‎i‎n‎s‎:‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎'‎A‎n‎o‎t‎h‎e‎r‎ ‎B‎r‎a‎n‎c‎h‎ ‎o‎f‎ ‎G‎o‎v‎e‎r‎n‎m‎e‎n‎t‎'‎ ‎w‎i‎t‎h‎ ‎'‎M‎o‎r‎e‎ ‎P‎o‎w‎e‎r‎'‎
9‎1‎3‎
W‎A‎T‎C‎H‎:‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎A‎s‎s‎a‎u‎l‎t‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎J‎o‎u‎r‎n‎a‎l‎i‎s‎t‎ ‎a‎t‎ ‎U‎C‎L‎A‎ ‎‘‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎S‎o‎l‎i‎d‎a‎r‎i‎t‎y‎ ‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎&‎#‎
W‎A‎T‎C‎H‎:‎ ‎A‎c‎t‎i‎v‎i‎s‎t‎s‎ ‎A‎s‎s‎a‎u‎l‎t‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎a‎t‎ ‎U‎C‎L‎A‎ ‎'‎P‎a‎l‎e‎s‎t‎i‎n‎e‎'‎ ‎E‎n‎c‎a‎m‎p‎m‎e‎n‎t‎
8‎,‎4‎6‎7‎
U‎k‎r‎a‎i‎n‎e‎ ‎F‎a‎r‎m‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎D‎e‎t‎a‎i‎n‎e‎d‎,‎ ‎L‎a‎t‎e‎s‎t‎ ‎i‎n‎ ‎G‎r‎o‎w‎i‎n‎g‎ ‎L‎i‎s‎t‎ ‎o‎f‎ ‎C‎o‎r‎r‎u‎p‎t‎i‎o‎n‎ ‎S‎u‎s‎p‎e‎c‎t‎s‎
U‎k‎r‎a‎i‎n‎e‎ ‎F‎a‎r‎m‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎D‎e‎t‎a‎i‎n‎e‎d‎,‎ ‎L‎a‎t‎e‎s‎t‎ ‎i‎n‎ ‎G‎r‎o‎w‎i‎n‎g‎ ‎L‎i‎s‎t‎ ‎o‎f‎ ‎C‎o‎r‎r‎u‎p‎t‎i‎o‎n‎
1‎1‎1‎
W‎A‎T‎C‎H‎:‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎D‎i‎s‎t‎r‎i‎c‎t‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎ ‎R‎e‎f‎u‎s‎e‎s‎ ‎t‎o‎ ‎P‎u‎l‎l‎ ‎O‎v‎e‎r‎ ‎f‎o‎r‎ ‎P‎o‎l‎i‎c‎e‎ ‎B‎e‎c‎a‎u‎s‎e‎ ‎S‎h‎e‎ ‎‘‎D‎i‎d‎n‎’‎t‎ ‎F‎
'‎D‎i‎d‎n‎'‎t‎ ‎F‎e‎e‎l‎ ‎L‎i‎k‎e‎ ‎S‎t‎o‎p‎p‎i‎n‎g‎'‎:‎ ‎N‎Y‎ ‎D‎i‎s‎t‎r‎i‎c‎t‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎ ‎R‎e‎f‎u‎s‎e‎s‎ ‎t‎o‎ ‎P‎u‎l‎l‎ ‎O‎v‎e‎r‎
1‎,‎2‎6‎7‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎T‎h‎e‎r‎e‎ ‎A‎r‎e‎ ‎‘‎T‎o‎o‎ ‎M‎a‎n‎y‎ ‎C‎i‎v‎i‎l‎i‎a‎n‎ ‎C‎a‎s‎u‎a‎l‎t‎i‎e‎s‎’‎ ‎i‎n‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎W‎a‎r‎,‎ ‎‘‎T‎h‎e‎
W‎h‎i‎t‎e‎ ‎H‎o‎u‎s‎e‎:‎ ‎N‎u‎m‎b‎e‎r‎ ‎o‎f‎ ‎C‎i‎v‎i‎l‎i‎a‎n‎ ‎C‎a‎s‎u‎a‎l‎t‎i‎e‎s‎ ‎i‎n‎ ‎G‎a‎z‎a‎ ‎'‎N‎e‎e‎d‎s‎ ‎t‎o‎ ‎B‎e‎ ‎Z‎e‎r‎o‎'‎
4‎,‎3‎1‎0‎
B‎i‎d‎e‎n‎ ‎R‎o‎a‎s‎t‎s‎ ‎T‎r‎u‎m‎p‎ ‎a‎t‎ ‎W‎H‎C‎D‎:‎ ‎‘‎I‎’‎m‎ ‎a‎ ‎G‎r‎o‎w‎n‎ ‎M‎a‎n‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎a‎ ‎S‎i‎x‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎’‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎R‎o‎a‎s‎t‎s‎ ‎T‎r‎u‎m‎p‎:‎ ‎'‎I‎'‎m‎ ‎a‎ ‎G‎r‎o‎w‎n‎ ‎M‎a‎n‎ ‎R‎u‎n‎n‎i‎n‎g‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎a‎ ‎S‎i‎x‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎'‎
4‎,‎2‎8‎7‎
W‎A‎T‎C‎H‎:‎ ‎R‎a‎d‎i‎c‎a‎l‎ ‎I‎s‎l‎a‎m‎i‎s‎t‎s‎ ‎R‎a‎l‎l‎y‎ ‎i‎n‎ ‎H‎a‎m‎b‎u‎r‎g‎ ‎C‎a‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎C‎a‎l‎i‎p‎h‎a‎t‎e‎ ‎i‎n‎ ‎G‎e‎r‎m‎a‎n‎y‎
I‎s‎l‎a‎m‎i‎s‎t‎s‎ ‎R‎a‎l‎l‎y‎ ‎i‎n‎ ‎H‎a‎m‎b‎u‎r‎g‎ ‎C‎a‎l‎l‎i‎n‎g‎ ‎f‎o‎r‎ ‎C‎a‎l‎i‎p‎h‎a‎t‎e‎ ‎i‎n‎ ‎G‎e‎r‎m‎a‎n‎y‎
7‎2‎
K‎e‎i‎t‎h‎ ‎O‎l‎b‎e‎r‎m‎a‎n‎n‎ ‎C‎l‎a‎i‎m‎s‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎ ‎H‎a‎s‎ ‎‘‎G‎r‎u‎d‎g‎e‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎B‎i‎d‎e‎n‎,‎’‎ ‎C‎a‎n‎c‎e‎l‎s‎ ‎S‎u‎b‎s‎c‎r‎i‎p‎t‎i‎o‎n‎
K‎e‎i‎t‎h‎ ‎O‎l‎b‎e‎r‎m‎a‎n‎n‎ ‎C‎l‎a‎i‎m‎s‎ ‎N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎T‎i‎m‎e‎s‎ ‎E‎d‎i‎t‎o‎r‎ ‎H‎a‎s‎ ‎'‎G‎r‎u‎d‎g‎e‎ ‎A‎g‎a‎i‎n‎s‎t‎ ‎B‎i‎d‎e‎n‎,‎'‎ ‎C‎a‎

A‎p‎e‎m‎a‎n‎ ‎R‎a‎p‎e‎s‎ ‎W‎o‎m‎a‎n‎ ‎w‎i‎t‎h‎ ‎""‎M‎e‎n‎t‎a‎l‎ ‎C‎a‎p‎a‎c‎i‎t‎y‎ ‎o‎f‎ ‎C‎h‎i‎l‎d‎""‎ ‎a‎t‎ ‎R‎o‎c‎k‎l‎e‎d‎g‎e‎ ‎G‎r‎o‎u‎p‎ ‎H‎o‎m‎e‎.‎

S‎t‎i‎l‎l‎ ‎n‎o‎t‎ ‎t‎o‎ ‎l‎a‎t‎e‎ ‎t‎o‎ ‎s‎e‎n‎d‎ ‎t‎h‎e‎m‎ ‎b‎a‎c‎k‎.‎


N‎e‎g‎r‎o‎ ‎R‎.‎ ‎K‎e‎l‎l‎y‎ ‎M‎a‎k‎e‎s‎ ‎D‎e‎a‎t‎h‎ ‎T‎h‎r‎e‎a‎t‎s‎ ‎T‎o‎w‎a‎r‎d‎ ‎L‎a‎w‎y‎e‎r‎s‎ ‎i‎n‎ ‎O‎r‎d‎e‎r‎ ‎t‎o‎ ‎B‎e‎ ‎A‎c‎q‎u‎i‎t‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎i‎n‎g‎ ‎B‎u‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎H‎a‎v‎i‎n‎g‎ ‎S‎e‎x‎ ‎w‎i‎t‎h‎ ‎U‎n‎d‎e‎r‎a‎g‎e‎ ‎G‎i‎r‎l‎s‎.‎


5‎ ‎B‎o‎n‎g‎o‎ ‎B‎e‎a‎t‎e‎r‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎V‎i‎s‎i‎t‎i‎n‎g‎ ‎H‎a‎i‎t‎i‎ ‎t‎o‎ ‎J‎o‎i‎n‎ ‎R‎i‎o‎t‎ ‎C‎h‎i‎m‎p‎o‎u‎t‎s‎.‎


S‎i‎m‎i‎a‎n‎ ‎N‎Y‎P‎D‎ ‎O‎f‎f‎i‎c‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎""‎F‎r‎i‎e‎n‎d‎l‎y‎ ‎F‎i‎r‎e‎""‎.‎


P‎o‎l‎i‎c‎e‎ ‎S‎e‎a‎r‎c‎h‎i‎n‎g‎ ‎f‎o‎r‎ ‎P‎a‎v‎e‎m‎e‎n‎t‎ ‎A‎p‎e‎ ‎W‎h‎o‎ ‎S‎t‎o‎l‎e‎ ‎C‎a‎r‎s‎ ‎f‎r‎o‎m‎ ‎P‎a‎r‎k‎i‎n‎g‎ ‎L‎o‎t‎s‎ ‎i‎n‎ ‎S‎o‎u‎t‎h‎ ‎P‎h‎i‎l‎l‎y‎.‎


M‎c‎C‎r‎a‎c‎k‎e‎n‎ ‎T‎a‎c‎o‎ ‎B‎e‎n‎d‎e‎r‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎R‎a‎p‎e‎.‎


U‎K‎:‎ ‎G‎r‎o‎u‎p‎ ‎o‎f‎ ‎S‎a‎n‎d‎ ‎N‎i‎g‎g‎e‎r‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎C‎o‎m‎m‎i‎t‎t‎i‎n‎g‎ ‎T‎e‎r‎r‎o‎r‎i‎s‎t‎ ‎A‎t‎t‎a‎c‎k‎ ‎i‎n‎ ‎G‎e‎r‎m‎a‎n‎y‎.‎


N‎e‎g‎r‎o‎ ‎P‎.‎ ‎D‎i‎d‎d‎y‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎h‎e‎a‎d‎i‎n‎g‎ ‎M‎a‎n‎n‎e‎q‎u‎i‎n‎ ‎a‎t‎ ‎M‎a‎d‎a‎m‎e‎ ‎T‎u‎s‎s‎a‎u‎d‎s‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎6‎8‎°‎
5‎9‎%‎
S‎ ‎9‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎8‎ ‎|‎ ‎D‎a‎y‎
8‎0‎°‎
5‎9‎%‎
S‎
9‎
 ‎
m‎p‎h‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎s‎h‎o‎w‎e‎r‎s‎ ‎a‎n‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎.‎ ‎H‎i‎g‎h‎ ‎a‎r‎o‎u‎n‎d‎ ‎8‎0‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎6‎0‎%‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎6‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
6‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎4‎9‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎6‎ ‎p‎m‎
S‎u‎n‎ ‎2‎8‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎8‎°‎
3‎9‎%‎
S‎S‎E‎
7‎
 ‎
m‎p‎h‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎e‎a‎r‎l‎y‎,‎ ‎t‎h‎e‎n‎ ‎p‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎6‎8‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎4‎0‎%‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
9‎7‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎2‎:‎0‎5‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
1‎0‎:‎0‎1‎ ‎a‎m‎
M‎o‎n‎ ‎2‎9‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
8‎8‎°‎
/‎6‎6‎°‎
2‎0‎%‎
E‎ ‎8‎ ‎m‎p‎h‎
T‎u‎e‎ ‎3‎0‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎4‎°‎
/‎7‎0‎°‎
4‎3‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎1‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎7‎2‎°‎
6‎2‎%‎
S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎2‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎7‎0‎°‎
6‎4‎%‎
S‎S‎E‎ ‎1‎5‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎3‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎2‎°‎
/‎6‎5‎°‎
4‎7‎%‎
E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎4‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎6‎8‎°‎
5‎8‎%‎
E‎N‎E‎ ‎1‎1‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎3‎°‎
/‎6‎9‎°‎
5‎8‎%‎
S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎6‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎6‎°‎
/‎7‎0‎°‎
1‎8‎%‎
S‎S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎7‎1‎°‎
2‎0‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎8‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎8‎°‎
/‎7‎0‎°‎
2‎4‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎9‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎7‎0‎°‎
3‎4‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎0‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎9‎°‎
/‎7‎0‎°‎
2‎4‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎1‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎9‎°‎
/‎7‎0‎°‎
4‎0‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎2‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎9‎°‎
/‎7‎0‎°‎
3‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎H‎e‎m‎o‎g‎l‎o‎b‎e‎n‎.‎ ‎☢️

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

V‎i‎n‎e‎s‎a‎u‎c‎e‎
V‎i‎n‎e‎s‎a‎u‎c‎e‎ ‎i‎s‎ ‎a‎ ‎c‎l‎i‎c‎h‎é‎ ‎l‎i‎v‎e‎s‎t‎r‎e‎a‎m‎ ‎g‎r‎o‎u‎p‎ ‎c‎o‎n‎s‎i‎s‎t‎i‎n‎g‎ ‎o‎f‎ ‎""‎u‎n‎i‎q‎u‎e‎""‎ ‎h‎u‎m‎o‎r‎,‎ ‎p‎o‎p‎u‎l‎a‎r‎i‎z‎e‎d‎ ‎b‎y‎ ‎a‎ ‎b‎a‎t‎s‎h‎i‎t‎ ‎c‎r‎a‎z‎y‎ ‎f‎a‎n‎b‎a‎s‎e‎ ‎c‎o‎n‎s‎i‎s‎t‎i‎n‎g‎ ‎o‎f‎ ‎1‎3‎-‎y‎e‎a‎r‎-‎o‎l‎d‎ ‎b‎o‎y‎s‎ ‎a‎n‎d‎ ‎1‎6‎-‎y‎e‎a‎r‎-‎o‎l‎d‎ ‎g‎i‎r‎l‎s‎ ‎w‎h‎i‎l‎e‎ ‎i‎t‎ ‎s‎t‎a‎r‎t‎e‎d‎ ‎a‎s‎ ‎a‎ ‎t‎y‎p‎i‎c‎a‎l‎ ‎s‎t‎r‎e‎a‎m‎ ‎s‎i‎t‎e‎ ‎t‎h‎a‎t‎ ‎n‎o‎b‎o‎d‎y‎ ‎c‎a‎r‎e‎s‎ ‎a‎b‎o‎u‎t‎ ‎u‎n‎t‎i‎l‎ ‎b‎r‎i‎n‎g‎i‎n‎g‎ ‎i‎n‎ ‎a‎ ‎b‎u‎n‎c‎h‎ ‎o‎f‎ ‎b‎u‎t‎t‎b‎u‎d‎d‎i‎e‎s‎ ‎t‎h‎a‎t‎ ‎d‎i‎d‎ ‎w‎h‎a‎t‎ ‎e‎v‎e‎r‎y‎ ‎""‎L‎e‎t‎'‎s‎ ‎P‎l‎a‎y‎e‎r‎""‎ ‎h‎a‎s‎ ‎d‎o‎n‎e‎-‎-‎s‎u‎c‎k‎i‎n‎g‎ ‎a‎l‎l‎ ‎o‎f‎ ‎t‎h‎e‎ ‎J‎e‎w‎t‎u‎b‎e‎ ‎c‎o‎c‎k‎s‎ ‎f‎o‎r‎ ‎f‎a‎m‎e‎.‎ ‎T‎h‎e‎y‎ ‎u‎s‎e‎ ‎j‎o‎k‎e‎s‎ ‎t‎h‎a‎t‎ ‎a‎r‎e‎ ‎t‎o‎t‎a‎l‎l‎y‎ ‎o‎r‎i‎g‎i‎c‎o‎n‎t‎e‎n‎t‎:‎/‎/‎m‎e‎d‎i‎a‎/‎e‎x‎t‎e‎r‎n‎a‎l‎/‎f‎i‎l‎e‎/‎3‎9‎0‎7‎0‎n‎a‎l‎ ‎a‎n‎d‎ ‎f‎u‎n‎n‎y‎ ‎t‎o‎ ‎m‎a‎k‎e‎ ‎t‎h‎e‎m‎s‎e‎l‎v‎e‎s‎ ‎o‎u‎t‎ ‎t‎h‎e‎r‎e‎ ‎j‎u‎s‎t‎ ‎l‎i‎k‎e‎ ‎l‎i‎v‎e‎ ‎s‎t‎r‎e‎a‎m‎e‎r‎ ‎h‎a‎s‎ ‎e‎v‎e‎r‎ ‎d‎o‎n‎e‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎f‎a‎n‎s‎ ‎t‎a‎k‎e‎ ‎i‎t‎ ‎t‎o‎ ‎h‎e‎a‎r‎t‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎y‎ ‎d‎o‎n‎'‎t‎ ‎k‎n‎o‎w‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎w‎a‎t‎c‎h‎i‎n‎g‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎c‎o‎p‎y‎c‎a‎t‎ ‎g‎a‎m‎e‎r‎ ‎c‎h‎a‎n‎n‎e‎l‎ ‎t‎h‎a‎t‎ ‎i‎s‎ ‎c‎o‎p‎y‎i‎n‎g‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎g‎a‎m‎e‎ ‎c‎h‎a‎n‎n‎e‎l‎ ‎t‎h‎a‎t‎ ‎c‎o‎u‎l‎d‎ ‎b‎e‎ ‎t‎e‎n‎ ‎t‎i‎m‎e‎s‎ ‎f‎u‎n‎n‎i‎e‎r‎ ‎t‎h‎a‎n‎ ‎t‎h‎e‎i‎r‎ ‎u‎n‎f‎u‎n‎n‎y‎ ‎a‎s‎s‎e‎s‎(‎j‎k‎,‎n‎o‎ ‎g‎a‎m‎i‎n‎g‎ ‎c‎h‎a‎n‎n‎e‎l‎ ‎i‎s‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎f‎u‎n‎n‎y‎ ‎o‎r‎ ‎g‎o‎o‎d‎)‎.‎

(‎(‎ ‎V‎i‎n‎e‎s‎a‎u‎c‎e‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

L‎i‎b‎e‎l‎l‎u‎l‎a‎ ‎d‎e‎p‎r‎e‎s‎s‎a‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎b‎r‎o‎a‎d‎-‎b‎o‎d‎i‎e‎d‎ ‎c‎h‎a‎s‎e‎r‎ ‎o‎r‎ ‎b‎r‎o‎a‎d‎-‎b‎o‎d‎i‎e‎d‎ ‎d‎a‎r‎t‎e‎r‎,‎ ‎i‎s‎ ‎a‎ ‎d‎r‎a‎g‎o‎n‎f‎l‎y‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎L‎i‎b‎e‎l‎l‎u‎l‎i‎d‎a‎e‎.‎ ‎O‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎o‎s‎t‎ ‎c‎o‎m‎m‎o‎n‎ ‎d‎r‎a‎g‎o‎n‎f‎l‎i‎e‎s‎ ‎i‎n‎ ‎E‎u‎r‎o‎p‎e‎ ‎a‎n‎d‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎A‎s‎i‎a‎,‎ ‎i‎t‎s‎ ‎r‎a‎n‎g‎e‎ ‎e‎x‎t‎e‎n‎d‎s‎ ‎t‎o‎ ‎E‎n‎g‎l‎a‎n‎d‎,‎ ‎c‎e‎n‎t‎r‎a‎l‎ ‎A‎s‎i‎a‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎M‎i‎d‎d‎l‎e‎ ‎E‎a‎s‎t‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎f‎e‎w‎ ‎l‎i‎m‎i‎t‎e‎d‎ ‎p‎o‎p‎u‎l‎a‎t‎i‎o‎n‎s‎ ‎i‎n‎ ‎S‎c‎o‎t‎l‎a‎n‎d‎.‎ ‎I‎t‎ ‎i‎s‎ ‎n‎o‎t‎ ‎f‎o‎u‎n‎d‎ ‎i‎n‎ ‎I‎r‎e‎l‎a‎n‎d‎ ‎o‎r‎ ‎N‎o‎r‎t‎h‎ ‎A‎f‎r‎i‎c‎a‎,‎ ‎h‎o‎w‎e‎v‎e‎r‎.‎ ‎T‎h‎i‎s‎ ‎i‎n‎s‎e‎c‎t‎ ‎i‎s‎ ‎a‎r‎o‎u‎n‎d‎ ‎3‎9‎–‎4‎8‎ ‎m‎m‎ ‎i‎n‎ ‎l‎e‎n‎g‎t‎h‎,‎ ‎w‎i‎t‎h‎ ‎b‎o‎t‎h‎ ‎t‎h‎e‎ ‎m‎a‎l‎e‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎f‎e‎m‎a‎l‎e‎ ‎h‎a‎v‎i‎n‎g‎ ‎a‎ ‎b‎r‎o‎a‎d‎,‎ ‎f‎l‎a‎t‎t‎e‎n‎e‎d‎ ‎a‎b‎d‎o‎m‎e‎n‎ ‎w‎h‎i‎c‎h‎ ‎i‎s‎ ‎b‎r‎o‎w‎n‎ ‎w‎i‎t‎h‎ ‎y‎e‎l‎l‎o‎w‎ ‎p‎a‎t‎c‎h‎e‎s‎ ‎d‎o‎w‎n‎ ‎t‎h‎e‎ ‎s‎i‎d‎e‎s‎.‎ ‎I‎n‎ ‎t‎h‎e‎ ‎m‎a‎l‎e‎,‎ ‎t‎h‎e‎ ‎a‎b‎d‎o‎m‎e‎n‎ ‎d‎e‎v‎e‎l‎o‎p‎s‎ ‎a‎ ‎b‎l‎u‎e‎ ‎p‎r‎u‎i‎n‎e‎s‎c‎e‎n‎c‎e‎ ‎t‎h‎a‎t‎ ‎c‎o‎v‎e‎r‎s‎ ‎t‎h‎e‎ ‎b‎r‎o‎w‎n‎ ‎c‎o‎l‎o‎u‎r‎.‎ ‎B‎o‎t‎h‎ ‎f‎o‎r‎e‎ ‎a‎n‎d‎ ‎h‎i‎n‎d‎ ‎w‎i‎n‎g‎s‎ ‎h‎a‎v‎e‎ ‎a‎ ‎d‎a‎r‎k‎ ‎p‎a‎t‎c‎h‎ ‎a‎t‎ ‎t‎h‎e‎ ‎b‎a‎s‎e‎.‎ ‎T‎h‎i‎s‎ ‎m‎a‎l‎e‎ ‎L‎.‎ ‎d‎e‎p‎r‎e‎s‎s‎a‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎a‎t‎ ‎W‎o‎l‎v‎e‎r‎c‎o‎t‎e‎ ‎L‎a‎k‎e‎s‎ ‎i‎n‎ ‎O‎x‎f‎o‎r‎d‎s‎h‎i‎r‎e‎,‎ ‎E‎n‎g‎l‎a‎n‎d‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎C‎h‎a‎r‎l‎e‎s‎ ‎J‎.‎ ‎S‎h‎a‎r‎p‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎l‎l‎o‎ ‎R‎i‎c‎a‎r‎d‎o‎ ‎9‎0‎0‎0‎ ‎h‎e‎r‎e‎.‎ ‎I‎ ‎j‎u‎s‎t‎ ‎w‎a‎n‎t‎e‎d‎ ‎t‎o‎ ‎s‎a‎y‎ ‎t‎h‎a‎t‎ ‎I‎ ‎r‎e‎a‎l‎l‎y‎ ‎h‎a‎t‎e‎ ‎t‎h‎o‎s‎e‎ ‎g‎o‎d‎d‎a‎m‎n‎ ‎c‎h‎i‎n‎k‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎p‎o‎k‎e‎ ‎o‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎s‎l‎a‎n‎t‎ ‎e‎y‎e‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎f‎u‎c‎k‎ ‎t‎h‎e‎m‎ ‎i‎n‎ ‎t‎h‎e‎i‎r‎ ‎s‎l‎i‎t‎ ‎e‎y‎e‎ ‎w‎i‎t‎h‎ ‎m‎y‎ ‎r‎o‎b‎o‎t‎i‎c‎ ‎r‎a‎z‎o‎r‎ ‎p‎e‎n‎i‎s‎.‎ ‎T‎h‎e‎n‎ ‎I‎ ‎a‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎m‎a‎k‎e‎ ‎l‎o‎v‎e‎ ‎t‎o‎ ‎m‎y‎ ‎b‎o‎y‎f‎r‎i‎e‎n‎d‎ ‎F‎e‎r‎n‎a‎n‎d‎o‎ ‎2‎-‎5‎0‎0‎ ‎t‎h‎e‎ ‎s‎p‎i‎c‎ ‎r‎o‎b‎o‎t‎ ‎o‎n‎ ‎t‎o‎p‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎d‎e‎a‎d‎ ‎b‎o‎d‎i‎e‎s‎.‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎!‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎!‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎!‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎!‎"
ZWG6YWCx,snowybot,coinwalk,JavaScript,Sunday 28th of April 2024 08:41:04 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/64).toFixed(7));
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var okay = (bolux+bolux+bolux+bolux);
var moron = (olsenest-silvery);
var fouil = (silvery-hundreds);
var foiluler = (fouil-okay);
var smack = (olsenest-foiluler);
var snort = (moron-okay);
var boghart = (silvery+tens);
var lumps = ((Math.floor(olsenest/tens))*tens);
var sever = (lumps+sevens);
var eigh = (lumps+eights);
var samuel = (olsen-dust);
var frances = (olsen+dust)
var awesome = (((Math.floor(olsenest/hundreds))*hundreds));
 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
sever = (lumps+sevens);
eigh = (lumps+eights);
okay = (bolux+bolux+bolux+bolux);
moron = (belance-silvery);
fouil = (silvery-hundreds);
foiluler = (fouil-okay);
smack = (belance-foiluler);
snort = (moron-okay);
boghart = (silvery+tens);
samuel = (olsen-dust);
frances = (olsen+dust)
if ((belance>samuel)&&(belance<frances)){
bob = true;
}
if (belance<samuel){
bob = false;
}
if (belance>frances){
bob = false;
}
if ((belance>sever)&&(belance<eigh)&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((smack<=0)&&(belance<(sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if ((snort<=0)&&(belance>=boghart)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
6fFb8iT5,screaming at neighbors,coinwalk,JavaScript,Sunday 28th of April 2024 08:39:25 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/64).toFixed(7));
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var okay = (bolux+bolux+bolux+bolux);
var moron = (olsenest-silvery);
var fouil = (silvery-hundreds);
var foiluler = (fouil-okay);
var smack = (olsenest-foiluler);
var snort = (moron-okay);
var boghart = (silvery+tens);
var lumps = ((Math.floor(olsenest/tens))*tens);
var sever = (lumps+sevens);
var eigh = (lumps+eights);
var awesome = (((Math.floor(olsenest/hundreds))*hundreds));
 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
lumps = ((Math.floor(belance/tens))*tens);
sever = (lumps+sevens);
eigh = (lumps+eights);
okay = (bolux+bolux+bolux+bolux);
moron = (belance-silvery);
fouil = (silvery-hundreds);
foiluler = (fouil-okay);
smack = (belance-foiluler);
snort = (moron-okay);
boghart = (silvery+tens);
samuel = (olsen-dust);
frances = (olsen+dust)
if ((belance>samuel)&&(belance<frances)){
bob = true;
}
if (belance<samuel){
bob = false;
}
if (belance>frances){
bob = false;
}
if ((belance>sever)&&(belance<eigh)&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((smack<=0)&&(belance<(sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if ((snort<=0)&&(belance>=boghart)&&(belance<sever)){
    bolux = monkey;
    olsen = 0;
    silvery = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
6zRCXNNz,geneExtractor,Thujed,Lua,Sunday 28th of April 2024 08:31:18 AM CDT,"hiveNBT = peripheral.find(""blockReader"")

-- function emitSignal() {
--     redstone.setOutput(""left"", true)
-- }

function getBeeCount()
    if (hiveNBT.getBlockData()[""BeeList""] ~= nil) then
        local beeCount = #hiveNBT.getBlockData()[""BeeList""][""Inhabitants""]
        
        return beeCount
    end

    return 0
end

while true do
    local beeCount = getBeeCount()
	print((""Bee count: %d""):format(beeCount))
    if (beeCount == 5) then
        redstone.setOutput(""left"", true)
    else
        redstone.setOutput(""left"", false)
    end

    sleep(1)
end 

"
kdU0qLJG,Energized Orb Autocrafting,gelatine87,Lua,Sunday 28th of April 2024 08:05:14 AM CDT,"-- state enums
local STATE_NONE = ""NONE""
local STATE_STEEL = ""Hardened Steel""
local STATE_NITRO = ""Nitro Crystal""
local STATE_ENDER = ""Ender Core""
local STATE_BLAZE = ""Blazing Crystal Block""
local STATE_NIOTIC = ""Niotic Crystal""
local STATE_SPIRIT = ""Spirited Crystal""
local STATE_FLUXED = ""Flux-Infused Ingot""
local STATE_FLUXG = ""Flux-Infused Gem""
local STATE_CHARGE = ""Charged Certus Quartz Crystal""
local STATE_SNOW = ""Charged Snowball""

-- item -> state table
-- this table will be used to determine what item we are currently crafting 
-- and what items need to be transfered in order to craft that item 
local state_from_item_table = {
    -- energized steel
    [""forge:ingots/steel""]=STATE_STEEL,
    [""create_new_age:overcharged_gold_sheet""]=STATE_STEEL,

    -- nitro
    [""minecraft:redstone_block""]=STATE_NITRO,
    [""minecraft:nether_star""]=STATE_NITRO,
    [""powah:blazing_crystal_block""]=STATE_NITRO,

    -- ender core
    [""minecraft:ender_eye""]=STATE_ENDER,
    [""powah:dielectric_casing""]=STATE_ENDER,
    [""powah:capacitor_basic_tiny""]=STATE_ENDER,

    -- blaze crystal 
    [""ars_nouveau:blaze_fiber""]=STATE_BLAZE,

    -- niotic crystal
    [""elementalcraft:purecrystal""]=STATE_NIOTIC,

    -- spirited crystal
    [""mekanism:pellet_plutonium""]=STATE_SPIRIT,
    
    -- fluxd-infused ingot
    [""elementalcraft:fireite_ingot""]=STATE_FLUXED,
    [""ftbskies:volatile_substrate""]=STATE_FLUXED,
	
	-- flux-infused gem
    [""botania:dragonstone""]=STATE_FLUXG,
    [""ftbskies:volatile_substrate""]=STATE_FLUXG,
	
	-- charged certus quarz crystal
    [""ae2:certus_quartz_crystal""]=STATE_CHARGE,
	
	-- charged snowaball
    [""minecraft:snowball""]=STATE_SNOW
}

-- item table describing what items are required to craft in each state
local state_item_recipies = {
    [STATE_STEEL] = {
        [""forge:ingots/steel""] = 1,
        [""create_new_age:overcharged_gold_sheet""] = 1
    },
    [STATE_NITRO] = {
        [""minecraft:redstone_block""] = 2,
        [""powah:blazing_crystal_block""] = 1,
        [""minecraft:nether_star""] = 1
    },
    [STATE_ENDER] = {
        [""minecraft:ender_eye""] = 1,
        [""powah:dielectric_casing""] = 1,
        [""powah:capacitor_basic_tiny""] = 1
    },
    [STATE_BLAZE] = {
        [""ars_nouveau:blaze_fiber""] = 1
    },
    [STATE_NIOTIC] = {
        [""elementalcraft:purecrystal""] = 1
    },
    [STATE_SPIRIT] = {
        [""mekanism:pellet_plutonium""] = 1
    },
	[STATE_FLUXED] = {
        [""elementalcraft:fireite_ingot""] = 1,
		[""ftbskies:volatile_substrate""] = 1
    },
	[STATE_FLUXG] = {
        [""botania:dragonstone""] = 1,
		[""ftbskies:volatile_substrate""] = 1
    },
	[STATE_CHARGE] = {
        [""ae2:certus_quartz_crystal""] = 1
    },
	[STATE_SNOW] = {
        [""minecraft:snowball""] = 1
    }
}
 
---------------------------------
-- DO NOT EDIT BELOW THIS LINE --
---------------------------------

-- the current state of the system
cur_state = STATE_NONE

-- helper function for cloning the item table
function table.clone(org)
    local tbl = {}
    for k,v in pairs(org) do
        tbl[k] = v
    end
    return tbl
end

-- helper function for len of table
function table.count(tbl)
    local count = 0
    for _ in pairs(tbl) do
        count = count + 1
    end
    return count
end

-- determine what state we should enter
-- based on what item we find in the chest
function determineStateFromItem(item)
    local state = state_from_item_table[item]
    if state == nil then
        return STATE_NONE
    else
        return state
    end
end
 
-- find where the chest is
local chest = peripheral.find(""ars_nouveau:repository"")
local orb = peripheral.find(""powah:energizing_orb"")

-- waits for the orb's inventory to be empty then 
-- signals that the orb is ready to craft another item
function waitForReset()
    while true do
        if table.count(orb.list()) == 0 then
            break
        end
    end
    cur_state = STATE_NONE
end
 
-- transfers the requested number of items from the slot in the chest to the orb,
-- if there is not enough items in the stack to meet the demands of the recipe
-- the value in the recipe will be decremented by the amount we could transfer 
function transferItem(itemList, slot, item)
    -- # items we need to transfer
    local count = itemList[item.name]
    -- try to transfer the items
    local itemsTransfered = chest.pushItems(peripheral.getName(orb), slot, count)
    -- number of items left required to craft the recipe
    local itemsLeft = count - itemsTransfered
    -- if 0 then we have enough of this item and can stop searching for it, 
    -- otherwise set to the amount left required to craft
    if itemsLeft <= 0 then
        itemList[item.name] = nil
    else
        itemList[item.name] = itemsLeft
    end 
end

-- transfers the list of items from the chest to the orb
-- this will remove items from the list
function transferItems(itemList)
    -- loop until all items are transfered
    while next(itemList) ~= nil do
        -- check every slot in the chest for any of the items we need to craft the current recipe
        for slot, item in pairs(chest.list()) do
            if itemList[item.name] ~= nil then
                transferItem(itemList, slot, item)
            end
        end
    end
end

-- constantly check the chest for items, 1 second sleeps between
function waitForItems()
    while cur_state == STATE_NONE do
        for slot, item in pairs(chest.list()) do
            cur_state = determineStateFromItem(item.name)
            if cur_state ~= STATE_NONE then
                break
            end
        end 
        -- prevent looping forever with zero delay!
        if cur_state == STATE_NONE then
            os.sleep(1)
        end
    end
end

-- print out program info
print(""Running with recipies:"")
printed_recipes = {}

for k, v in pairs(state_from_item_table) do
    if printed_recipes[v] == nil then
        printed_recipes[v] = true
        print((""\t%s = {""):format(v))
        for item, count in pairs(state_item_recipies[v]) do
            print((""\t\t%d\t%s""):format(count, item))
        end
        print(""\t}"")
    end
end
print(""System started successfully!"")
print("""")
print(""--------------------------------------"")
print(""-- Mr. Fancy Dan's Crafting Manager --"")
print(""--------------------------------------"")
print("""")
 
-- main loop
while true do
    if state_item_recipies[cur_state] ~= nil then
        -- if we are in a state which has a recipe
        local items = table.clone(state_item_recipies[cur_state])
        -- transfer the required items
        transferItems(items)
        -- then wait for the reset signal which tells us we are done crafting that item
        waitForReset()
    else
        if cur_state ~= STATE_NONE then
            print((""Unknown state '%d' detected""):format(cur_state))
        else
            -- if we don't have a recipe we are in the none state, so we should wait for the chest to
            -- have an item which we can use to craft
            waitForItems()
        end
    end
    os.sleep(1)
end
"
g0SbskeC,Storm in a Teacup (faster) - BIO 2024 Round 2,erek1e,C++,Sunday 28th of April 2024 07:24:18 AM CDT,"/**
 * @file teacup.cpp
 * @version 1.0
 * @date 2024-03-30
 * 
 * usage:
 *      Read from / write to default input.txt and output.txt
 *          teacup.exe
 *      Read from / write to custom files:
 *          teacup.exe in.txt out.txt
 */
// This is a constant-optimised solution - the problem had a very tight time limit. My other solution is cleaner and less complex, although it has a larger constant.
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <numeric>

#include <cassert>

using namespace std;

void fileIO(int argc, char *argv[]);

const int MX = 1<<20;
int parent[1+MX], components[1+MX];
long long leftoverSum[1+MX];

int main(int argc, char *argv[]) {
    fileIO(argc, argv); // remove for standard input/output
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    int h, f; cin >> h >> f;
    vector<int> value(h);
    for (int &x : value) cin >> x;

    vector<vector<int>> g(h);
    for (int i = 0; i < h-1; ++i) {
        int u, v; cin >> u >> v;
        --u, --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    // precalculate order using bfs to topo sort, do not need queues
    vector<int> order;
    order.push_back(0);
    parent[0] = h; // no parent
    for (size_t nxt = 0; nxt < order.size(); ++nxt) {
        int node = order[nxt];
        for (int child : g[node]) {
            if (child != parent[node]) {
                order.push_back(child);
                parent[child] = node;
            }
        }
    }
    assert((int)order.size() == h);

    // reindex nodes in this order
    vector<vector<int>> g2(h);
    vector<int> iAt(h);
    for (int i = 0; i < h; ++i) iAt[order[i]] = i;
    assert(iAt[0] == 0);
    for (int i = 0; i < h; ++i) {
        for (int j : g[i]) {
            if (j == parent[i]) continue;
            g2[iAt[i]].push_back(iAt[j]);
            assert(iAt[i] < iAt[j]);
        }
    }
    vector<int> value2(h);
    for (int i = 0; i < h; ++i) value2[iAt[i]] = value[i];

    // Binary Search on the answer
    long long sum = accumulate(value.begin(), value.end(), 0LL);
    long long left = 0, right = sum/f + 1;
    while (left+1 < right) {
        long long minComponentSum = (left + right) / 2;
        /* check if the graph can be split into f components,
        each with sum >= minComponentSum */

        // dp on subtrees

        bool works = false;

        // not using node : order and child : g[node] since it is slower
        for (int node = (int)order.size()-1; node >= 0; --node) {
            components[node] = 0, leftoverSum[node] = value2[node];
            for (size_t j = 0; j < g2[node].size(); ++j) {
                int child = g2[node][j];
                // can avoid making sure child is not parent node, since parent's values are 0
                components[node] += components[child];
                leftoverSum[node] += leftoverSum[child];
            }
            if (leftoverSum[node] >= minComponentSum) {
                leftoverSum[node] = 0;
                ++components[node];
            }
            // if (components[node] >= f) {
            //     works = true;
            //     break;
            // }
        }

        // if dfs from arbitrary root yields at least f components
        if (works || components[0] >= f) left = minComponentSum;
        else right = minComponentSum;
    }
    cout << left << '\n';
    return 0;
}

void fileIO(int argc, char *argv[]) {
    const char * in = ""input.txt"", * out = ""output.txt"";
    if (argc > 1) in = argv[1];
    if (argc > 2) out = argv[2];
    freopen(in, ""r"", stdin);
	freopen(out, ""w"", stdout);
}
"
GUQUme5p,Storm in a Teacup - BIO 2024 Round 2,erek1e,C++,Sunday 28th of April 2024 07:21:11 AM CDT,"/**
 * @file teacup.cpp
 * @version 1.0
 * @date 2024-03-30
 * 
 * usage:
 *      Read from / write to default input.txt and output.txt
 *          teacup.exe
 *      Read from / write to custom files:
 *          teacup.exe in.txt out.txt
 */
// This is a clean solution to the problem, but does not pass due to the very tight time limit. See my other solution with constant optimisations that passes all tests.
#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>

using namespace std;

void fileIO(int argc, char *argv[]);

int main(int argc, char *argv[]) {
    fileIO(argc, argv); // remove for standard input/output
    
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    int h, f; cin >> h >> f;
    vector<int> value(h);
    for (int &x : value) cin >> x;

    vector<vector<int>> g(h);
    for (int i = 0; i < h-1; ++i) {
        int u, v; cin >> u >> v;
        --u, --v;
        g[u].push_back(v);
        g[v].push_back(u);
    }

    // Binary Search on the answer
    long long left = 0, right = (long long)h * *max_element(value.begin(), value.end()) + 1;
    while (left+1 < right) {
        long long minComponentSum = (left + right) / 2;
        /* check if the graph can be split into f components,
        each with sum >= minComponentSum */

        // dp on subtrees
        function<pair<int, long long>(int, int)> dfs = [&](int node, int parent = -1) {
            // greedy, proved to be optimal
            int components = 0;
            long long leftoverSum = value[node];
            for (int child : g[node]) {
                if (child != parent) {
                    auto [c, s] = dfs(child, node);
                    components += c;
                    leftoverSum += s;
                }
            }
            if (leftoverSum >= minComponentSum) {
                ++components;
                leftoverSum = 0;
            }
            return pair{components, leftoverSum};
        };

        // if dfs from arbitrary root yields at least f components
        if (dfs(0, -1).first >= f) {
            left = minComponentSum;
        } else {
            right = minComponentSum;
        }
    }
    cout << left << '\n';
    return 0;
}

void fileIO(int argc, char *argv[]) {
    const char * in = ""input.txt"", * out = ""output.txt"";
    if (argc > 1) in = argv[1];
    if (argc > 2) out = argv[2];
    freopen(in, ""r"", stdin);
	freopen(out, ""w"", stdout);
}
"
03xTKWJM,The Collection Caper - BIO 2024 Round 2,erek1e,C++,Sunday 28th of April 2024 07:18:30 AM CDT,"/**
 * @file caper.cpp
 * @version 1.0
 * @date 2024-04-03
 * 
 * usage:
 *      Read from / write to default input.txt and output.txt
 *          caper.exe
 *      Read from / write to custom files:
 *          caper.exe in.txt out.txt
 */
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

void fileIO(int argc, char *argv[]);

const int INF = 1e5;

int minMovesToErase(vector<int> v) {
    int n = v.size();
    
    vector<vector<int>> dp(1+n, vector<int>(1+n));
    v.push_back(0);
    /*
    dp[l][r] is the minimum number of moves to erase the range v[l], v[l+1], ..., v[r-1]
    (excluding r), given that only elements from the same collection as v[r] can remain
    */

    /*
    It can be shown that for any block of values from the same collection that are initially
    consecutive, it can be shown that all optimal solutions will erase them all in one step.
    I use this to slightly simplify the code, though the main concept of the solution does not
    depend on it.
    */

    for (int sz = 1; sz <= n; ++sz) {
        for (int l = 0; l+sz <= n; ++l) {
            int r = l+sz;
            dp[l][r] = INF;
            int canLeave = v[r];
            
            // case: do not erase the first element
            if (v[l] == canLeave) dp[l][r] = min(dp[l][r], dp[l+1][r]);
            
            // case: erase the first element

            int firstBlockR = l;
            while (firstBlockR < r && v[firstBlockR] == v[l]) ++firstBlockR;
            //  subcase: erase the first element in its own block (if the block size is >= 2)
            if (firstBlockR-l >= 2) dp[l][r] = min(dp[l][r], 1 + dp[firstBlockR][r]);

            //  subcase: erase the first element along with another block
            for (int i = firstBlockR, lastDifferent = firstBlockR; i < r; ++i) {
                if (v[i] == v[l] && (i+1 == r || v[i+1] != v[l])) { // a block with from the same collection as v[l] ends at i
                    int lastBlockL = lastDifferent+1, lastBlockR = i+1;
                    dp[l][r] = min(dp[l][r], 1 + dp[firstBlockR][lastBlockL] + dp[lastBlockR][r]);
                } else if (v[i] != v[l]) lastDifferent = i;
            }
        }
    }
    return dp[0][n];
}

int main(int argc, char *argv[]) {
    fileIO(argc, argv); // remove for standard input/output
    
    int n; cin >> n;
    vector<int> a(n);
    for (int &x : a) cin >> x;
    cout << minMovesToErase(a) << '\n';
    return 0;
}

void fileIO(int argc, char *argv[]) {
    const char * in = ""input.txt"", * out = ""output.txt"";
    if (argc > 1) in = argv[1];
    if (argc > 2) out = argv[2];
    freopen(in, ""r"", stdin);
	freopen(out, ""w"", stdout);
}
"
Aefrqg47,screaming at neighbors,coinwalk,JavaScript,Sunday 28th of April 2024 06:52:33 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.0001;
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var moron = (belance-hundreds);
var okay = (bolux+bolux+bolux+bolux);
var morning = (belance-hundreds);
var awesome = (((Math.floor(olsenest/hundreds))*hundreds));
 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(olsen-dust))&&(belance<(olsen+dust))){
bob = true;
}else{
bob = false;
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
okay = (bolux+bolux+bolux+bolux);
moron = (belance+hundreds);
morning = (belance-hundreds);
if (((moron-okay)<=0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
}
if (((morning-okay)<=0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
}
if (belance>bill){
    bill = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
4Z6H73fF,snowybot,coinwalk,JavaScript,Sunday 28th of April 2024 06:22:55 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.0001;
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var moron = (belance-hundreds);
var okay = (bolux+bolux+bolux+bolux);
var awesome = (((Math.floor(olsenest/hundreds))*hundreds));
 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(olsen-dust))&&(belance<(olsen+dust))){
bob = true;
}else{
bob = false;
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
okay = (bolux+bolux+bolux+bolux);
moron = (belance+hundreds);
if (((moron-okay)<=0)&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
}
if (belance>bill){
    bill = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
KzwiRxaV,邀您一起看：春色寄情人   2024 4K  李现 周雨彤,xiaomianao666,JavaScript,Sunday 28th of April 2024 06:02:07 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥春色寄情人   2024 4K  李现 周雨彤@@
FgvDWkBB,data910,TestGuy1,JSON,Sunday 28th of April 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'ec421fb2d829bcdd52d8eeb57e240b0bf23c3d8435cb133c132d26660c8ad97d1236f27ee08f81446ad630c0ca2af2b28fae9f6a6cdeb3c19c99459c6d3caa7e1f9325c99395af488022587407b9a6319c38b04e16a941e8d27043e4ce66a9249b1acbb324e5e1c4ac0a4edaf22e125c6c65181ed504066853080f87e4a09db7',
  otherdata: [
    '670ba0aae6a7fb66ba76c1aaf171e05b',
    '4a70ea9f5ce9524f0c62406cc961f4dc',
    '7e2eb74d16c4e48001bf55cf50e95c92',
    'e7503533895c10e42c479fb787d6df71',
    '563a3f3455ed0f4a7d52fb7ddb5e9fd3',
    '804da52ae452997dad8c3b1b3c45ad57',
    'e96950c1caa977b686e2b031f5e62b3e',
    '881f3ebbb609accb82d3df49a3363b89'
  ]
}"
v1vyg7mx,Untitled,Hero_Cheats,PHP,Sunday 28th of April 2024 05:45:41 AM CDT,Wait Karo guys server problem hai
q4wcwhGT,邀您一起看：一个都不能死♔,xiaomianao666,JavaScript,Sunday 28th of April 2024 05:29:01 AM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥一个都不能死♔@@
RthaF4pw,Untitled,sissou123,HTML,Sunday 28th of April 2024 05:13:02 AM CDT,"The HTML & CSS Bootcamp 2024 Edition
Brand New Course! Covers Flexbox, CSS Grid, Animations, Responsive Design and More! Tons of Exercises &amp; Projects. 
What you'll learn
Master HTML & CSS and build massive real-world projects, with no prior knowledge needed!
How to write well-structured and semantic HTML documents 
for more :https://cuty.io/fWib6CnkiA9
"
UMjhqbTc,Untitled,test12333,C++,Sunday 28th of April 2024 04:25:54 AM CDT,".data:000000018433A040 F0 03 4C 83 01 00 00 00       off_18433A040   dq offset aLvlup        ; DATA XREF: sub_1813F36A0+55↑o
.data:000000018433A040                                                                       ; ""lvlup""
.data:000000018433A048 F8 03 4C 83 01 00 00 00                       dq offset aDotaHeroLevel ; ""dota_hero_level""
.data:000000018433A050 08 04 4C 83 01 00 00 00                       dq offset aLevelup      ; ""levelup""
.data:000000018433A058 F8 03 4C 83 01 00 00 00                       dq offset aDotaHeroLevel ; ""dota_hero_level""
.data:000000018433A060 10 04 4C 83 01 00 00 00                       dq offset aLvlmax       ; ""lvlmax""
.data:000000018433A068 18 04 4C 83 01 00 00 00                       dq offset aDotaHeroMaxlev ; ""dota_hero_maxlevel""
.data:000000018433A070 30 04 4C 83 01 00 00 00                       dq offset aLevelmax     ; ""levelmax""
.data:000000018433A078 18 04 4C 83 01 00 00 00                       dq offset aDotaHeroMaxlev ; ""dota_hero_maxlevel""
.data:000000018433A080 40 04 4C 83 01 00 00 00                       dq offset aSuicide      ; ""suicide""
.data:000000018433A088 48 04 4C 83 01 00 00 00                       dq offset aDotaHeroSuicid ; ""dota_hero_suicide""
.data:000000018433A090 60 04 4C 83 01 00 00 00                       dq offset aHurtmebad    ; ""hurtmebad""
.data:000000018433A098 70 04 4C 83 01 00 00 00                       dq offset aDotaHeroNearle ; ""dota_hero_nearlethaldamage""
.data:000000018433A0A0 68 B2 F6 82 01 00 00 00                       dq offset aRespawn      ; ""respawn""
.data:000000018433A0A8 90 04 4C 83 01 00 00 00                       dq offset aDotaHeroRespaw ; ""dota_hero_respawn""
.data:000000018433A0B0 A8 04 4C 83 01 00 00 00                       dq offset aRefresh_0    ; ""refresh""
.data:000000018433A0B8 B0 04 4C 83 01 00 00 00                       dq offset aDotaHeroRefres ; ""dota_hero_refresh""
.data:000000018433A0C0 C4 04 4C 83 01 00 00 00                       dq offset aGold         ; ""gold""
.data:000000018433A0C8 D0 04 4C 83 01 00 00 00                       dq offset aDotaGiveGold ; ""dota_give_gold""
.data:000000018433A0D0 9C 01 33 83 01 00 00 00                       dq offset aItem_1       ; ""item""
.data:000000018433A0D8 E0 04 4C 83 01 00 00 00                       dq offset aDotaCreateItem ; ""dota_create_item""
.data:000000018433A0E0 F8 04 4C 83 01 00 00 00                       dq offset aStartgame    ; ""startgame""
.data:000000018433A0E8 08 05 4C 83 01 00 00 00                       dq offset aDotaStartGame ; ""dota_start_game""
.data:000000018433A0F0 18 05 4C 83 01 00 00 00                       dq offset aKillwards    ; ""killwards""
.data:000000018433A0F8 28 05 4C 83 01 00 00 00                       dq offset aDotaKillwards ; ""dota_killwards""
.data:000000018433A100 38 05 4C 83 01 00 00 00                       dq offset aCreatehero   ; ""createhero""
.data:000000018433A108 48 05 4C 83 01 00 00 00                       dq offset aDotaCreateUnit ; ""dota_create_unit""
.data:000000018433A110 60 05 4C 83 01 00 00 00                       dq offset aSpawnrune    ; ""spawnrune""
.data:000000018433A118 70 05 4C 83 01 00 00 00                       dq offset aDotaSpawnRune ; ""dota_spawn_rune""
.data:000000018433A120 80 05 4C 83 01 00 00 00                       dq offset aLevelbots    ; ""levelbots""
.data:000000018433A128 90 05 4C 83 01 00 00 00                       dq offset aDotaBotGiveLev ; ""dota_bot_give_level""
.data:000000018433A130 A8 05 4C 83 01 00 00 00                       dq offset aGivebots     ; ""givebots""
.data:000000018433A138 B8 05 4C 83 01 00 00 00                       dq offset aDotaBotGiveIte ; ""dota_bot_give_item""
.data:000000018433A140 CC 05 4C 83 01 00 00 00                       dq offset aWtf          ; ""wtf""
.data:000000018433A148 D0 05 4C 83 01 00 00 00                       dq offset aDotaAbilityDeb ; ""dota_ability_debug_enable""
.data:000000018433A150 EC 05 4C 83 01 00 00 00                       dq offset aUnwtf        ; ""unwtf""
.data:000000018433A158 F8 05 4C 83 01 00 00 00                       dq offset aDotaAbilityDeb_0 ; ""dota_ability_debug_disable""
.data:000000018433A160 18 06 4C 83 01 00 00 00                       dq offset aSpawnneutrals ; ""spawnneutrals""
.data:000000018433A168 28 06 4C 83 01 00 00 00                       dq offset aDotaSpawnNeutr ; ""dota_spawn_neutrals""
.data:000000018433A170 40 06 4C 83 01 00 00 00                       dq offset aSpawncreeps  ; ""spawncreeps""
.data:000000018433A178 50 06 4C 83 01 00 00 00                       dq offset aDotaSpawnCreep ; ""dota_spawn_creeps""
.data:000000018433A180 68 06 4C 83 01 00 00 00                       dq offset aDisablecreepsp ; ""disablecreepspawn""
.data:000000018433A188 80 06 4C 83 01 00 00 00                       dq offset aDotaCreepsNoSp_0 ; ""dota_creeps_no_spawning_enable""
.data:000000018433A190 A0 06 4C 83 01 00 00 00                       dq offset aEnablecreepspa ; ""enablecreepspawn""
.data:000000018433A198 B8 06 4C 83 01 00 00 00                       dq offset aDotaCreepsNoSp_1 ; ""dota_creeps_no_spawning_disable""
.data:000000018433A1A0 D8 06 4C 83 01 00 00 00                       dq offset aKillcreeps   ; ""killcreeps""
.data:000000018433A1A8 E8 06 4C 83 01 00 00 00                       dq offset aDotaKillCreeps ; ""dota_kill_creeps""
.data:000000018433A1B0 00 07 4C 83 01 00 00 00                       dq offset aAllvision    ; ""allvision""
.data:000000018433A1B8 10 07 4C 83 01 00 00 00                       dq offset aDotaAllVisionE ; ""dota_all_vision_enable""
.data:000000018433A1C0 28 07 4C 83 01 00 00 00                       dq offset aNormalvision ; ""normalvision""
.data:000000018433A1C8 38 07 4C 83 01 00 00 00                       dq offset aDotaAllVisionD ; ""dota_all_vision_disable""
.data:000000018433A1D0 50 07 4C 83 01 00 00 00                       dq offset aClearwards   ; ""clearwards""
.data:000000018433A1D8 60 07 4C 83 01 00 00 00                       dq offset aDotaClearWards ; ""dota_clear_wards""
.data:000000018433A1E0 78 07 4C 83 01 00 00 00                       dq offset aDumpbots     ; ""dumpbots""
.data:000000018433A1E8 88 07 4C 83 01 00 00 00                       dq offset aDotaBotDumpSta ; ""dota_bot_dump_state""
.data:000000018433A1F0 9C 07 4C 83 01 00 00 00                       dq offset aPing         ; ""ping""
.data:000000018433A1F8 E8 F4 3D 83 01 00 00 00                       dq offset aDotaPing     ; ""dota_ping""
.data:000000018433A200 A8 07 4C 83 01 00 00 00                       dq offset aTakeherophotos ; ""takeherophotos""
.data:000000018433A208 B8 07 4C 83 01 00 00 00                       dq offset aDotaTakephotos ; ""dota_takephotos""
.data:000000018433A210 C8 07 4C 83 01 00 00 00                       dq offset aTrees        ; ""trees""
.data:000000018433A218 D0 07 4C 83 01 00 00 00                       dq offset aDotaTreerespaw ; ""dota_treerespawn""
.data:000000018433A220 E8 07 4C 83 01 00 00 00                       dq offset aEasybuy      ; ""easybuy""
.data:000000018433A228 F0 07 4C 83 01 00 00 00                       dq offset aDotaEasybuyCha ; ""dota_easybuy_chat""
.data:000000018433A230 08 CF DB 82 01 00 00 00                       dq offset aTeleport     ; ""teleport""
.data:000000018433A238 08 08 4C 83 01 00 00 00                       dq offset aDotaTeleport ; ""dota_teleport""
.data:000000018433A240 18 08 4C 83 01 00 00 00                       dq offset aWin_0        ; ""win""
.data:000000018433A248 20 08 4C 83 01 00 00 00                       dq offset aDotaWin      ; ""dota_win""
.data:000000018433A250 2C 08 4C 83 01 00 00 00                       dq offset aLose         ; ""lose""
.data:000000018433A258 38 08 4C 83 01 00 00 00                       dq offset aDotaLose     ; ""dota_lose""
.data:000000018433A260 44 08 4C 83 01 00 00 00                       dq offset aRapgod       ; ""rapgod""
.data:000000018433A268 50 08 4C 83 01 00 00 00                       dq offset aDotaRapGod   ; ""dota_rap_god""
.data:000000018433A270 60 08 4C 83 01 00 00 00                       dq offset aGottagofast  ; ""gottagofast""
.data:000000018433A278 70 08 4C 83 01 00 00 00                       dq offset aDotaGottaGoFas ; ""dota_gotta_go_fast""
.data:000000018433A280 88 08 4C 83 01 00 00 00                       dq offset aWeneedwards  ; ""weneedwards""
.data:000000018433A288 98 08 4C 83 01 00 00 00                       dq offset aDotaWeNeedWard ; ""dota_we_need_wards""
.data:000000018433A290 B0 08 4C 83 01 00 00 00                       dq offset aWeneeddetectio ; ""weneeddetection""
.data:000000018433A298 C0 08 4C 83 01 00 00 00                       dq offset aDotaWeNeedDete ; ""dota_we_need_detection""
.data:000000018433A2A0 D8 08 4C 83 01 00 00 00                       dq offset aDisablefow   ; ""disablefow""
.data:000000018433A2A8 E8 08 4C 83 01 00 00 00                       dq offset aDotaFowDisable ; ""dota_fow_disable"""
8SxKHr4W,Untitled,poxipox,Lua,Sunday 28th of April 2024 04:10:08 AM CDT,"	if(isInArray(specialDoors, item.itemid)) then
	
		if (item.actionid == 200 and getPlayerRebornLvl(cid) > 0) then
			doorEnter(cid, item, toPosition)

		elseif(item.actionid == 100 or (item.actionid ~= 0 and getPlayerStorageValue(cid, item.actionid) > 0)) then
			doorEnter(cid, item, toPosition)
		else
			doPlayerSendTextMessage(cid, MESSAGE_INFO_DESCR, tr('The door seems to be sealed against unwanted intruders.'))
		end

		return true
	end"
RDGM0A8j,15(3),nq1s788,Python,Sunday 28th of April 2024 03:55:47 AM CDT,"#https://inf-ege.sdamgia.ru/problem?id=61361
for a in range(-100, 100):
    for x in range(0, 100):
        for y in range(0, 100):
            if not (((x + 2 * y) > 48) or (y > x) or (x + 3 * y < a)):
                print(a)"
D1r8uDFM,setup napt,hiro1357,Bash,Sunday 28th of April 2024 02:58:43 AM CDT,"sudo firewall-cmd --zone=public --add-masquerade --permanent
sudo firewall-cmd --query-masquerade --permanent
sudo firewall-cmd --zone-public --add-forward-port=port=443:proto=tcp:toport=8443:toaddr=192.168.0.2 --permanent
sudo firewall-cmd --zone=public --add-port=443/tcp --permanent
sudo firewall-cmd --reload"
b6ZsUFh6,setup nextcloud,hiro1357,Bash,Sunday 28th of April 2024 02:53:04 AM CDT,"sudo snap run nextcloud.enable-https self-signed
# sudo snap run nextcloud.enable-https lets-encrypt
sudo snap run nextcloud.occ config:system:get trusted_domains 1
sudo snap run nextcloud.occ config:system:set trusted_domains 1 --value=my.domain.local
sudo snap run nextcloud.occ config:system:get trusted_domains 1
sudo snap restart nextcloud"
V9i1Z2hz,efs farmerthing,UknownReality,Lua,Sunday 28th of April 2024 02:42:30 AM CDT,"local args = {
    [1] = ""Train"",
    [2] = ""1"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""2"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""3"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""4"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""5"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""6"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""7"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""8"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""9"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""10"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""11"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""12"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""13"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""14"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""15"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""16"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""17"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""18"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""19"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""20"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""21"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""22"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""23"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""24"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""25"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""26"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""27"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""28"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""29"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""30"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""31"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""32"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""33"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""34"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""35"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""36"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""37"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""38"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""39"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""40"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""41"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""42"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""43"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""44"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""45"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""46"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""47"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""48"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""49"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""50"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""51"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""52"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""53"",
    [4] = 1
}

game:GetService(""ReplicatedStorage"").Events.Heroes:FireServer(unpack(args))
wait(0.1)
local args = {
    [1] = ""Train"",
    [2] = ""54"",
    [4] = 1
}"
uy8a85rV,mydata 8.4 xml,nickkar,XML,Sunday 28th of April 2024 02:35:42 AM CDT,"<InvoicesDoc xmlns=""http://www.aade.gr/myDATA/invoice/v1.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:N1=""https://www.aade.gr/myDATA/incomeClassificaton/v1.0"">
  <invoice>
    <issuer>
      <vatNumber>000000000</vatNumber>
      <country>GR</country>
      <branch>0</branch>
    </issuer>
    <counterpart>
      <vatNumber>000000000</vatNumber>
      <country>GR</country>
      <branch>0</branch>
    </counterpart>
    <invoiceHeader>
      <series>08ΑΡ01</series>
      <aa>10</aa>
      <issueDate>2024-04-08</issueDate>
      <invoiceType>8.4</invoiceType>
      <currency>EUR</currency>
    </invoiceHeader>
    <paymentMethods>
      <paymentMethodDetails>
        <type>7</type>
        <amount>10.00</amount>
      </paymentMethodDetails>
    </paymentMethods>
    <invoiceDetails>
      <lineNumber>1</lineNumber>
      <netValue>10.000</netValue>
      <vatCategory>8</vatCategory>
      <vatAmount>0.00</vatAmount>
      <incomeClassification>
        <ecls:classificationCategory xmlns:ecls=""https://www.aade.gr/myDATA/incomeClassificaton/v1.0"">category1_95</ecls:classificationCategory>
        <ecls:amount xmlns:ecls=""https://www.aade.gr/myDATA/incomeClassificaton/v1.0"">10.000</ecls:amount>
      </incomeClassification>
    </invoiceDetails>
    <invoiceSummary>
      <totalNetValue>10.000</totalNetValue>
      <totalVatAmount>0.00</totalVatAmount>
      <totalWithheldAmount>0</totalWithheldAmount>
      <totalFeesAmount>0</totalFeesAmount>
      <totalStampDutyAmount>0</totalStampDutyAmount>
      <totalOtherTaxesAmount>0</totalOtherTaxesAmount>
      <totalDeductionsAmount>0</totalDeductionsAmount>
      <totalGrossValue>10.000</totalGrossValue>
      <incomeClassification>
        <N1:classificationCategory>category1_95</N1:classificationCategory>
        <N1:amount>10.000</N1:amount>
      </incomeClassification>
    </invoiceSummary>
  </invoice>
</InvoicesDoc>"
vQMNy480,14291,audreych,C++,Sunday 28th of April 2024 02:32:27 AM CDT,"#include <iostream>
#include <vector>
#include <sstream>
#include <limits>
// Assume no invalid operation 
void FindMaximumPath(std::vector<std::vector<long long int>> &directed_graph, std::vector< long long int> &parent, 
                std::vector<long long int> &value,
                long long int &max_value, long long int &root_res, long long int current, long long int previous) 
{
    // The idea is that for each node, we find 2 paths 
    // (the paths from that node to any depth and yields the maximum path) 
    // In other words, these 2 paths for each node are the maximum path and the second maximum path.
    // the maximum among all the nodes are the maximum path of the tree 
    long long int first_max_path = 0;
    long long int second_max_path = 0;
    for (auto child : directed_graph[current]) {
        FindMaximumPath(directed_graph, parent, value, max_value, root_res, child, current);

        if (first_max_path <= value[child]) {
            second_max_path = first_max_path;
            first_max_path = value[child];
        } else {
            if (second_max_path <= value[child]) {
                second_max_path = value[child];
            }
        }
    }

    if (max_value <= first_max_path + second_max_path + value[current]) {
        max_value = first_max_path + second_max_path + value[current];
        root_res = current;
    }
    value[current] += first_max_path; // we need to store the maximum path so far into the nodes that we have visited
}

void print_test_graph(std::vector<std::vector<long long int>> &v) {
    int i = 0;
    for (auto x : v) {
        std::cout << i << ' ';
        for (auto y : x) {
            // print pair
            std::cout << y << "" "";
        }
        ++i;
        std::cout << '\n';
    }
}
void print_test(std::vector<long long int> &v) {
    int i = 0;
    for (int i = 0; i < v.size(); ++i) {
        std::cout << i << "", "" << v[i] << '\n';
    }
}
int main() {
    int n, op;
    // pair of {dest, distance}
    std::cin >> n >> op;
    // no clue why n + op + 1 does not work as size
    std::vector<std::vector<long long int>> directed_graph(20005);
    // this vector stores the value of each node_i and later on, the maximum path at node_i 
    std::vector<long long int> value(20005); 
    std::vector<long long int> parent(20005);
    std::fill(parent.begin(), parent.end(), -1);

    long long int src, dest, d;
    std::cin >> src >> d;
    long long int root = src;
    value[src] = d;
    parent[src] = -1; // we denotes no parents aka root also as -1
    for (int i = 0; i < n; ++i) {
        std::cin >> src >> dest >> d; 
        directed_graph[src].push_back(dest);
        value[dest] = d;
        parent[dest] = src;
    }
    std::cin.ignore(); // to ignore newline
    for(int m = 0; m < op; ++m) {
        std::string buf;
        std::getline(std::cin, buf);
        std::istringstream iss(buf);
        std::string s;

        std::getline(iss, s, ' '); 
        // wonky stuff here Add will break if the directed_graph are suddenly disjointed
        if (s[0] == 'A') {
            std::getline(iss, s, ' ');
            int add_src = std::stoi(s);
            std::getline(iss, s, ' ');
            int add_dest = std::stoi(s);
            std::getline(iss, s, ' '); 
            int add_d = std::stoi(s);
            directed_graph[add_src].push_back(add_dest);
            value[add_dest] = add_d;
            parent[add_dest] = add_src;
        } else if (buf[0] == 'C') {
            long long int max_value = std::numeric_limits<long long int>::min();
            long long int root_result = root;
            std::vector<long long int> prev_value = value; // copy the old value so it does not get deleted after runnign the algo
            FindMaximumPath(directed_graph, parent, value, max_value, root_result, root, -1);
            std::cout << ""Maximum Value: "" << max_value << '\n';
            std::cout << ""Root of the Path: "" << root_result << '\n';
            value = prev_value; 
        } else {
            // Delete
            std::getline(iss, s, ' ');
            long long int node = std::stoi(s);
            long long int par = parent[node];
            if (node > 20005) {
                continue;
            }
            // This is a bit wonky as we did not delete parent -> child connection
            // but we deleted child -> parent connection
            for (auto child : directed_graph[node]) {
                directed_graph[par].push_back(child); // transfer children of node to parent
                parent[child] = par; // set parent of child as par   
            }
            directed_graph[node].clear(); // delete current node's children
            // set parent to -1
            parent[node] = -1;
            // get 9/10 without setting it into negative
            value[node] = std::numeric_limits<long long int>::min(); // actually very important as a placeholder so this won't get count (it might break)
            // THIS IS A WORKAROUND as especially if we delete leaves, we technically do not delete leave, 
            // we only set the leaf as 0 weight but DFS can still go
            // First sol : Set a really small number so the path does not every count (more than -100000 (the limit))
            // Second sol : Reiterate the parent node then delete the connection by maybe copying back and forth to the array (more legit solution)
        }
        iss.str("""");
    }
    long long int max_value = std::numeric_limits<long long int>::min();
    long long int root_result = root;
    FindMaximumPath(directed_graph, parent, value, max_value, root_result, root, -1);
    std::cout << ""Final Root: "" << root_result << '\n';
}"
XN3epr9W,Change variable product button text,DeniGD,PHP,Sunday 28th of April 2024 01:43:14 AM CDT,"add_filter('woocommerce_product_add_to_cart_text', 'my_custom_add_to_cart_text', 10, 2);
function my_custom_add_to_cart_text($text, $product) {
    if ($product->is_type('variable')) {
        $text = 'Купи'; // Тук поставете желания от вас текст
    }
    return $text;
}"
CtjbFCHx,snowybot manual April 28 2024,coinwalk,JavaScript,Sunday 28th of April 2024 01:32:45 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = 0.0001;
var dust = (monkey/2)
var bolux = monkey;
var tens = (monkey*10);
var hundreds = (monkey*30);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var four = (monkey*4);
var olsen = 0;
var belance = olsenest;
var bill = olsenest;
var bekon = olsenest;
var belll = (olsenest*5);
var shit = olsenest;
var fovox = olsenest;
var oxen = ((Math.ceil(fovox/tens))*tens);
var silvery = olsenest;
var bob = false;
var awesome = (((Math.floor(olsenest/hundreds))*hundreds));
 
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
 
 
function go(){
belance = document.getElementById('pct_balance').value;
var dog = Number((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
if ((belance>(olsen-dust))&&(belance<(olsen+dust))){
bob = true;
}else{
bob = false;
}
if ((belance>(((Math.floor(belance/tens))*tens)+sevens))&&(belance<(((Math.floor(belance/tens))*tens)+eights))&&(!bob)){
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((hundreds<=(bolux+bolux+bolux+bolux))&&(belance<(((Math.floor(belance/tens))*tens)+sevens))){
    bolux = monkey;
    olsen = 0;
}
if (belance>bill){
    bill = parseFloat(belance);
}
if (belance>=1440){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => go(), 350);
}
go();"
6DhPZQfr,graphicsLab,anik11556,C++,Sunday 28th of April 2024 01:10:41 AM CDT,"import glfw
from OpenGL.GL import *
import math

W, H = 800, 800

colors= [[255,255,255],
[255,0,0],
[0,255,0],
[0,0,255],
[255,255,0],
[0,255,255],
[255,0,255],
[127,127,127]]

def get_zone(x0, y0, x1, y1):
    dx= x1-x0
    dy= y1-y0

    if dx>=0 and dy>=0:
        if dx > dy:
            return 0
        return 1

    elif dx>=0 and dy<0:
        if dx > abs(dy):
            return 7
        return 6

    elif dx<0 and dy>=0:
        if abs(dx) > dy :
            return 3
        return 2

    else:
        if abs(dx)>abs(dy):
            return 4
        return 5

def return_back(zone, x, y): # zone3 to all zones
    if zone == 0:
        return -x, y
    elif zone == 1:
        return y, -x
    elif zone == 2:
        return -y, -x 
    elif zone == 3:
        return x, y 
    elif zone == 4:
        return x, -y 
    elif zone == 5:
        return -y, x 
    elif zone == 6:
        return y, x 
    else:
        return -x, -y
    
def allZone_to_3(zone, x, y): #all zone to zone3
    if zone == 0:
        return -x, y
    elif zone == 1:
        return -y, x
    elif zone == 2:
        return -y, -x 
    elif zone == 3:
        return x, y 
    elif zone == 4:
        return x, -y 
    elif zone == 5:
        return y, -x 
    elif zone == 6:
        return y, x 
    else:
        return -x, -y

def draw_axes():
    glColor3ub(127, 127, 127)
    glBegin(GL_LINES)
    glVertex2f(-W/2, 0)
    glVertex2f(W/2-1, 0)
    glVertex2f(0, -H/2)
    glVertex2f(0, H/2-1)
    glEnd()

def draw_pixel(x, y, zone):
    x, y = return_back(zone, x, y)
    glVertex2f(x, y)

def draw_pixel_2(x,y):
    glVertex2f(x, y)

def draw_line_3(x0, y0, x1, y1, zone):
    dx = x1 - x0
    dy = y1 - y0
    x = x0
    y = y0
    d = -2 * dx + dy
    del_w = -2 * dy
    del_nw = -2 * (dx + dy)
    draw_pixel(x, y, zone)
    while (x > x1):
        if (d < 0):
            d += del_nw
            x -= 1
            y += 1
        else:
            d += del_w
            x -= 1
        draw_pixel(x, y, zone)
        
        
def read_polygon_file(filename):
    points = []
    with open(filename, 'r') as file:
        num_vertices = int(file.readline().strip())
        for _ in range(num_vertices):
            x, y = map(int, file.readline().strip().split(','))
            points.append((x, y))
    return points


def construct_edge_table(points):
    edges = {}
    
    for i in range(1,len(points)):
        edges[i-1] = [points[i],points[i-1]]
        edges[i-1] = sorted(edges[i-1],key=lambda x: (x[1],x[0]))
        
        if i==len(points)-1:
            edges[i] = [points[i],points[0]]
            edges[i] = sorted(edges[i],key=lambda x: (x[1],x[0]))



    _,y_min = min(points,key=lambda x : (x[1],x[0]))
    x_of_y_max,y_max = max(points,key=lambda x : (x[1],x[0]))


    def slope(x0,y0,x1,y1):
        if (x1-x0)==0:
            return 0
        return (y1-y0)/(x1-x0)

    edge_table = {}
    for i in range(y_min,y_max):
        edge_vertexs = []
        for key,edge in edges.items():
            
            first_vertex,second_vertex = edge[0],edge[1]
            x0,y0 = first_vertex
            x1,y1 = second_vertex
            if y0==i and y0!=y1:
                m = slope(x0,y0,x1,y1)
                if m==0:
                    edge_vertexs.append((y1,x0,0))
                else:
                    edge_vertexs.append((y1,x0,1/m))
                    
        
        if i!=y_min:
            previous_edge_vertexs = edge_table[i-1]
            for triplet in previous_edge_vertexs:
                prev_y_max, prev_x_of_y_min, prev_slope = triplet
                if prev_y_max!=i:
                    prev_x_of_y_min+=prev_slope
                    edge_vertexs.append((prev_y_max,prev_x_of_y_min,prev_slope))
        
        
        edge_vertexs = sorted(edge_vertexs,key = lambda x : (x[1],x[0]))
        
        edge_table[i] = edge_vertexs

    return y_min,y_max,edge_table,points,edges


def draw_polygon_vertex(points):
    glPointSize(6)
    glBegin(GL_POINTS)
    for point in points:
        glColor3ub(0,255,0)
        draw_pixel_2(point[0],point[1])
    glEnd()
    glPointSize(1)
    
def draw_edges(edges):
    glPointSize(3)
    glBegin(GL_POINTS)
    for key,edge in edges.items():
        x0,y0 = edge[0]
        x1,y1 = edge[1]
        zone= get_zone(x0, y0, x1, y1)
        x0, y0 = allZone_to_3(zone, x0, y0)      
        x1, y1 = allZone_to_3(zone, x1, y1)      

        glColor3ub(255,255,0)
        draw_line_3(x0, y0, x1, y1, zone)
    glEnd()
    glPointSize(1)
    

def draw_boundary_pixels(edges):
    glPointSize(6)
    glBegin(GL_POINTS)
    for key, edge in edges.items():
        first_vertex, second_vertex = edge[0], edge[1]
        x0, y0 = first_vertex
        x1, y1 = second_vertex
        
        # Calculate the number of pixels needed to traverse the edge
        num_pixels = max(abs(x1 - x0), abs(y1 - y0)) + 1
        
        # Calculate the step size for x and y to move between pixels
        dx = (x1 - x0) / num_pixels
        dy = (y1 - y0) / num_pixels
        
        # Draw all the pixels along the edge
        for i in range(num_pixels):
            pixel_x = round(x0 + i * dx)
            pixel_y = round(y0 + i * dy)
            glColor3ub(0, 0, 255)  # Set color for the boundary pixels
            draw_pixel_2(pixel_x, pixel_y)  # Draw the boundary pixel

    glEnd()
    glPointSize(1)


def draw_polygon_fill(y_min,y_max,edge_table):
    glBegin(GL_POINTS)
    for y in range(y_min,y_max):
        i = 0
        while i<len(edge_table[y]):
            first_triplet = edge_table[y][i]
            second_triplet = edge_table[y][i+1]
            
            x0,y0 = first_triplet[1],y
            x1,y1 = second_triplet[1],y
                  
            zone= get_zone(x0, y0, x1, y1)
            x0, y0 = allZone_to_3(zone, x0, y0)      
            x1, y1 = allZone_to_3(zone, x1, y1)      

            glColor3ub(255,255,0)

            draw_line_3(x0, y, x1, y, zone)
                
            i+=2
    
    glEnd()


draw_vertex_flag = True
draw_boundary_pixel_flag = False
draw_polygon_fill_flag = False
y_min,y_max,edge_table,points,edges = 0,0,{},[],{}



def rotate_point(point, angle):
    x, y = point
    angle_rad = math.radians(angle)
    new_x = x * math.cos(angle_rad) - y * math.sin(angle_rad)
    new_y = x * math.sin(angle_rad) + y * math.cos(angle_rad)
    return (new_x, new_y)

def rotate_polygon(points, angle):
    cx = sum(x for x, _ in points) / len(points)
    cy = sum(y for _, y in points) / len(points)
    
    translated_points = [(x - cx, y - cy) for x, y in points]
    
    rotated_points = [rotate_point(point, angle) for point in translated_points]
    
    new_points = [(round(x + cx), round(y + cy)) for x, y in rotated_points]
    
    return new_points

def key_callback(window, key, scancode, action, mods):
    global draw_vertex_flag, draw_boundary_pixel_flag, draw_polygon_fill_flag
    global y_min, y_max, edge_table, points, edges
    
    mouse_x, mouse_y = glfw.get_cursor_pos(window)
    window_width, window_height = glfw.get_window_size(window)
    if mouse_x >= 0 and mouse_x < window_width and mouse_y >= 0 and mouse_y < window_height:
        if action == glfw.PRESS:
            if key == glfw.KEY_KP_0:
                draw_vertex_flag = True
                draw_boundary_pixel_flag = False
                draw_polygon_fill_flag = False
            elif key == glfw.KEY_KP_1:
                draw_vertex_flag = False
                draw_boundary_pixel_flag = True
                draw_polygon_fill_flag = False
            elif key == glfw.KEY_KP_2:
                draw_vertex_flag = False
                draw_boundary_pixel_flag = False
                draw_polygon_fill_flag = True
            elif key == glfw.KEY_LEFT:
                points = rotate_polygon(points, 5)
                y_min, y_max, edge_table, points, edges = construct_edge_table(points)
            elif key == glfw.KEY_RIGHT:
                points = rotate_polygon(points, -5)
                y_min, y_max, edge_table, points, edges = construct_edge_table(points)


def main():
    global draw_vertex_flag,draw_boundary_pixel_flag,draw_polygon_fill_flag
    global y_min,y_max,edge_table,points,edges
    
    if not glfw.init():
        return

    Window = glfw.create_window(W, H, ""Lab 3"", None, None)
    if not Window:
        glfw.terminate()
        return

    glfw.make_context_current(Window)
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(-W/2, W/2-1, -H/2, H/2-1, -1,1)
    
    glMatrixMode(GL_MODELVIEW)
    glLoadIdentity()

    points = read_polygon_file(""vertex.txt"")
    y_min, y_max, edge_table,points,edges = construct_edge_table(points)
    

    glfw.set_key_callback(Window,key_callback)

    while not glfw.window_should_close(Window):
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glfw.poll_events()
        
        draw_axes()
        
        
        if draw_vertex_flag:
            draw_polygon_vertex(points)
        elif draw_boundary_pixel_flag:
            draw_boundary_pixels(edges)
        elif draw_polygon_fill_flag:
            draw_polygon_fill(y_min, y_max, edge_table)
        
        
        glfw.swap_buffers(Window)

    glfw.terminate()

main()"
7efeBVPZ,Terraria: Translate Copper Into All Money Types,Imthedude025,Batch,Saturday 27th of April 2024 11:38:35 PM CDT,":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
::Translate Terraria Copper Into All Money Types v2              ::
::Created by RU$$ [https://steamcommunity.com/id/CrypticNight7/] ::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
@ECHO OFF
@setlocal ENABLEDELAYEDEXPANSION
@GOTO :Start

:Start
cls
set /p ""CopperCoinCount=Enter a copper coin amount to convert: ""
cls
call :CalculateCoins %CopperCoinCount%
goto :Start

:CalculateCoins
set ""StartingCopper=%1""
set ""StartingCopperReverse=""
set /a ""Copper=0""
set /a ""Silver=0""
set /a ""Gold=0""
set /a ""Platinum=0""

Rem | Reverse String
set num=0
:LOOP0
call set tmpa=%%StartingCopper:~%num%,1%%%
set /a ""num+=1""
if defined tmpa (
    set ""StartingCopperReverse=%tmpa%%StartingCopperReverse%""
    goto :LOOP0
)

Rem | Split Into 2 Chars
set ""Price=""
set ""CurrentTypePrice=""
set ""MoneyType=0""
:LOOP1
if defined StartingCopperReverse (
    Rem | Flip Current Price
    set ""CurrentTypePrice=!StartingCopperReverse:~1,1!!StartingCopperReverse:~0,1!""
	
    Rem | Get Current Money Type (Copper)
    if /I ""!MoneyType!"" EQU ""0"" (
		Rem | Check If Total Value Is Not 0
		if /I ""!CurrentTypePrice!"" NEQ ""0"" (
	    	Rem | Check If Value Is Not 00
			if /I ""!CurrentTypePrice!"" NEQ ""00"" (
				Rem | Check If Value Starts With 0
        		set ""FirstChar=!CurrentTypePrice:~0,1!""
        		if /I ""!FirstChar!"" EQU ""0"" (
			    	Rem | Set Price With Second Char
            		set ""Price=!Price!!CurrentTypePrice:~1,1! Copper""
				) else (
			   		Rem | Set Price With Both Chars
			   		set ""Price=!Price!!CurrentTypePrice! Copper""
				)
			)
		) else (
		    Rem | No Value Found, Price Is Zero
		    set ""Price=!Price!0 Copper""
		)
    )
	Rem | Get Current Money Type (Silver)
    if /I ""!MoneyType!"" EQU ""1"" (
	    Rem | Check If Value Is Not 00
		if /I ""!CurrentTypePrice!"" NEQ ""00"" (
			Rem | Check If Value Starts With 0
        	set ""FirstChar=!CurrentTypePrice:~0,1!""
        	if /I ""!FirstChar!"" EQU ""0"" (
			    Rem | Set Price With Second Char
            	set ""Price=!CurrentTypePrice:~1,1! Silver !Price!""
				
			) else (
			    Rem | Set Price With Both Chars
			    set ""Price=!CurrentTypePrice! Silver !Price!""
			)
		)
    )
	Rem | Get Current Money Type (Gold)
    if /I ""!MoneyType!"" EQU ""2"" (
	    Rem | Check If Value Is Not 00
		if /I ""!CurrentTypePrice!"" NEQ ""00"" (
			Rem | Check If Value Starts With 0
        	set ""FirstChar=!CurrentTypePrice:~0,1!""
        	if /I ""!FirstChar!"" EQU ""0"" (
			    Rem | Set Price With Second Char
            	set ""Price=!CurrentTypePrice:~1,1! Gold !Price!""
				
			) else (
			    Rem | Set Price With Both Chars
			    set ""Price=!CurrentTypePrice! Gold !Price!""
			)
		)
    )
	Rem | Get Current Money Type (Platinum)
    if /I ""!MoneyType!"" EQU ""3"" (
	    Rem | Check If Value Is Not 00
		if /I ""!CurrentTypePrice!"" NEQ ""00"" (
			Rem | Check If Value Starts With 0
        	set ""FirstChar=!CurrentTypePrice:~0,1!""
			Rem | Set Price With All Chars
			set ""Price=!CurrentTypePrice! Platinum !Price!""
		)
    )
	Rem | Get Platinum Money Type Overspill
    if /I ""!MoneyType!"" GEQ ""4"" (
	    Rem | Check If Value Is Not 00
		if /I ""!CurrentTypePrice!"" NEQ ""00"" (
			Rem | Check If Value Starts With 0
        	set ""FirstChar=!CurrentTypePrice:~0,1!""
			Rem | Set Price With All Chars
			set ""Price=!CurrentTypePrice!!Price!""
		)
    )
    Rem | Progress Counts
    set ""StartingCopperReverse=!StartingCopperReverse:~2!""
	set /a ""MoneyType+=1""
    goto LOOP1
)

Rem | Show Final Result
Echo !StartingCopper! copper coins converts to: !Price!
pause"
nYWUVHTR,T4 TLE,pb_jiang,C++,Saturday 27th of April 2024 11:18:19 PM CDT,"class Solution {
public:
    int medianOfUniquenessArray(vector<int>& ns) {
        vector<vector<int>> pos(1e5 + 1);
        for (int i = 0; i < ns.size(); ++i) {
            pos[ns[i]].push_back(i);
        }
        function<bool(int, int, int, int, int&, int)> get_gt_kc = [&](int beg, int end, int k, int cur_k, int& got, int need) {
            if (beg + k > end) return false;
            if (cur_k < k) return false;
            ++got;
            if (got >= need) return true;
            
            const auto& v1 = pos[ns[beg]], &v2 = pos[ns[end - 1]];
            int i1 = upper_bound(v1.begin(), v1.end(), beg) - v1.begin();
            int i2 = upper_bound(v2.begin(), v2.end(), beg) - v2.begin();
            int opt1 = get_gt_kc(beg + 1, end, k, cur_k - (i1 >= end), got, need);
            int opt2 = get_gt_kc(beg, end - 1, k, cur_k - (i2 >= end - 1), got, need);
            return got >= need;
        };
        set<int> ss(ns.begin(), ns.end());
        int n = ns.size(), ck = ss.size();
        int lb = 0, ub = n, need = (n * (n + 1) / 2 + 1)/ 2;
        while(lb + 1 <= ub) {
            int mid = (lb + ub) / 2, got = 0;
            if (get_gt_kc(0, n, mid, ck, got, need)) {
                ub = mid;
            } else {
                lb = mid;
            }
        }
        return ub;
    }
};"
mpFXVMG9,netsh_wlan_tool_1.0.1,Python253,Python,Saturday 27th of April 2024 11:03:02 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: netsh_wlan_tool_1.0.1.py
# Version: 1.0.1
# Author: Jeoi Reqi

""""""
netsh_wlan_tool.py

Description:
This script provides a command-line interface for managing Wi-Fi networks on Windows systems using the 'netsh wlan' command.

Requirements:
- Python 3.x
- Windows operating system
- Python interpreter installed and configured correctly

Usage:
- Run the script in a terminal or command prompt.
- Follow the on-screen menu prompts to perform various Wi-Fi network operations.

Functions:
1. show_available_networks():
   - Displays a list of available Wi-Fi networks along with their BSSID information.

2. show_wifi_password(profile_name):
   - Displays the password for a specified Wi-Fi profile.

3. connect_to_profile(profile_name):
   - Connects to a specified Wi-Fi profile.

4. get_all_data():
   - Retrieves and displays all stored Wi-Fi profile names and passwords.

Additional Notes:
- Ensure that the script is executed with appropriate permissions to interact with the Wi-Fi subsystem.
- Some functions may require administrative privileges to execute successfully.
- Use caution when connecting to Wi-Fi networks or displaying passwords, as sensitive information may be exposed.
""""""

import subprocess

def list_wifi_profiles():
    """"""
    Retrieve a list of all Wi-Fi profiles stored on the system.

    Returns:
        list: A list of all Wi-Fi profile names.
    """"""
    try:
        output = subprocess.check_output([""netsh"", ""wlan"", ""show"", ""profiles""], text=True)
        profiles = [line.split("":"")[1].strip() for line in output.splitlines() if ""All User Profile"" in line]
        return profiles
    except subprocess.CalledProcessError as e:
        print(f""\nError listing Wi-Fi profiles:\n- {e}"")
        return []

def get_wifi_password(profile_name):
    """"""
    Retrieve the password for a specified Wi-Fi profile.

    Args:
        profile_name (str): The name of the Wi-Fi profile.

    Returns:
        str: The password of the Wi-Fi profile, or None if not found.
    """"""
    try:
        command = [""netsh"", ""wlan"", ""show"", ""profile"", f'name=""{profile_name}""', ""key=clear""]
        output = subprocess.check_output(command, universal_newlines=True)
        password_line = [line for line in output.splitlines() if ""Key Content"" in line][0]
        password = password_line.split("":"")[-1].strip()
        if password.lower() == ""passphrase"":
            return ""\nPassword is hidden\n""
        else:
            return password
    except subprocess.CalledProcessError:
        return None

def show_available_networks():
    """"""
    Display all the available Wi-Fi networks with BSSID information.
    """"""
    try:
        output = subprocess.check_output([""netsh"", ""wlan"", ""show"", ""networks"", ""mode=bssid""], stderr=subprocess.STDOUT)
        print(output.decode(""utf-8""))
    except subprocess.CalledProcessError as e:
        print(""\nError:"", e.output.decode(""utf-8""))
    except Exception as ex:
        print(""\nAn unexpected error occurred:"", ex)

def show_wifi_password(profile_name):
    """"""
    Display the Wi-Fi password for the specified profile.

    Args:
        profile_name (str): The name of the Wi-Fi profile.
    """"""
    try:
        password = get_wifi_password(profile_name)
        if password:
            print(f""\n\tWi-Fi Password:\n\t- {password}"")
        else:
            print(""\nWi-Fi Password not found."")
    except subprocess.CalledProcessError as e:
        print(""\nError:\n\t- "", e)

def connect_to_profile(profile_name):
    """"""
    Connect to the specified Wi-Fi profile.

    Args:
        profile_name (str): The name of the Wi-Fi profile to connect to.
    """"""
    try:
        # Display currently connected Wi-Fi network
        output = subprocess.check_output([""netsh"", ""wlan"", ""show"", ""interfaces""], text=True)
        connected_network = [line.split("":"")[1].strip() for line in output.splitlines() if ""SSID"" in line]
        print(""\nCurrently connected Wi-Fi network:"", connected_network[0])

        # Check if the profile exists and get its password
        password = get_wifi_password(profile_name)

        # Prompt the user for the profile name
        print(""\nConnect to Wi-Fi profile:"", profile_name)

        if password:
            print(""\nPassword for this Wi-Fi profile is already saved."")
        else:
            print(""\nPassword for this Wi-Fi profile is not saved."")
            password = input(""Enter the Wi-Fi password: "")
        
        # Connect to the specified Wi-Fi profile
        subprocess.run([""netsh"", ""wlan"", ""connect"", profile_name], check=True)
        print(""\nConnected to:"", profile_name)
    except subprocess.CalledProcessError as e:
        print(""\nError:"", e)

def get_all_data():
    """"""
    Display all stored Wi-Fi passwords in clear text.
    """"""
    print(""\n:: Stored Wi-Fi Passwords ::"")
    wifi_profiles = list_wifi_profiles()
    for profile in wifi_profiles:
        password = get_wifi_password(profile)
        print(f""\nWi-Fi Profile:\t{profile}"")
        if password:
            print(f""Password:\t{password}"")
        else:
            print(""Password:\t![Password not found]!"")

def main():
    while True:
        print(""\nWLAN Netsh Options Menu:\n"")
        print(""1. Show All Available Networks + BBSID"")
        print(""2. Show Specified Wi-Fi Network Password"")
        print(""3. Connect To A WLAN Profile"")
        print(""4. Get All Stored WiFi Passwords"")
        print(""5. Exit"")
        
        choice = input(""\nEnter your choice (1-5): "")
        
        if choice == '1':
            show_available_networks()
            input(""\nPress [ENTER] to continue..."")
        elif choice == '2':
            profile_name = input(""\nEnter profile name: "")
            show_wifi_password(profile_name)
            input(""\nPress [ENTER] to continue..."")
        elif choice == '3':
            # Display currently connected Wi-Fi network
            output = subprocess.check_output([""netsh"", ""wlan"", ""show"", ""interfaces""], text=True)
            connected_network = [line.split("":"")[1].strip() for line in output.splitlines() if ""SSID"" in line]
            print(""\nCurrently connected Wi-Fi network:"", connected_network[0])
            
            # Prompt the user for the profile name to connect
            profile_name = input(""\nConnect to Wi-Fi profile: "")
            # Call connect_to_profile function
            connect_to_profile(profile_name)
            input(""\nPress [ENTER] to continue..."")
        elif choice == '4':
            get_all_data()
            input(""\nPress [ENTER] to continue..."")
        elif choice == '5':
            print(""\nExiting program...\tGoodBye!\n"")
            break
        else:
            print(""\nInvalid choice. Please enter a number between 1 and 5.\n"")

if __name__ == ""__main__"":
    main()

"
1zcZ6RTH,ColorMatch,Rei_Ayanami,Pawn,Saturday 27th of April 2024 11:02:00 PM CDT,"#define 	FILTERSCRIPT
#include 	<a_samp>
#include    <izcmd>

#define     CM_EVENT_TIME       (120)   // event time, in seconds (default: 120)
#define     CM_MIN_PLAYERS      (2)     // players required to start the event (default: 2)
#define     CM_MAX_PLAYERS      (16)    // max players allowed to join (default: 16)
#define     CM_SETUP_TIME       (15)    // setup time where players can join, in seconds (default: 15)
#define     CM_REWARD           (5000)  // how much money the winner will get (default: 5000)
#define     CM_SEPERATE                 // prevents player following by moving every player to a different virtual world, comment or remove this line if you don't want it
#define     CM_USEFENCES                // creates fences around the arena, comment or remove this line if you don't want it

enum    _:E_OBJECTID
{
	OBJ_ORANGE,
	OBJ_RED,
	OBJ_GREEN,
	OBJ_YELLOW,
	OBJ_PURPLE,
	OBJ_PINK,
	OBJ_MAROON,
	OBJ_BLUE,
	OBJ_WHITE
}

enum    _:E_GAMESTAGE
{
	STAGE_NONE,
	STAGE_SETUP,
	STAGE_PLAYING
}

new
	ColorMatchObjects[9] = {INVALID_OBJECT_ID, ...},
	ColorMatchNames[9][7] = {""Orange"", ""Red"", ""Green"", ""Yellow"", ""Purple"", ""Pink"", ""Maroon"", ""Blue"", ""White""},
	ColorMatchColors[9] = {0xFF7F00FF, 0xEE0000FF, 0x00EE00FF, 0xFFFF00FF, 0x9B30FFFF, 0xFF1493FF, 0x8B1A1AFF, 0x1E90FFFF, 0xFFFFFFFF};
	
#if defined CM_USEFENCES
new
	ColorMatchFences[8] = {INVALID_OBJECT_ID, ...};
#endif

new
    ColorMatchCurrent = -1,
    ColorMatchPlayers,
    ColorMatchTimer = -1,
    ColorMatchFallTimer = -1,
    ColorMatchEventTimer = -1,
    ColorMatchStage = STAGE_NONE,
    Text: ColorMatchTD;
	
new
	bool: InCMEvent[MAX_PLAYERS],
	PlayerText: ColorText[MAX_PLAYERS] = {PlayerText: INVALID_TEXT_DRAW, ...};

// http://forum.sa-mp.com/showpost.php?p=3117531&postcount=5
RGBAToARGB(rgba)
    return rgba >>> 8 | rgba << 24;

// http://forum.sa-mp.com/showpost.php?p=1120652&postcount=3
Float: frandom(Float:max, Float:min = 0.0, dp = 4)
{
	new
		Float:mul = floatpower(10.0, dp),
		imin = floatround(min * mul),
		imax = floatround(max * mul);
	return float(random(imax - imin) + imin) / mul;
}

// http://forum.sa-mp.com/showpost.php?p=3223897&postcount=11
ConvertToMinutes(time)
{
    new string[15];//-2000000000:00 could happen, so make the string 15 chars to avoid any errors
    format(string, sizeof(string), ""%02d:%02d"", time / 60, time % 60);
    return string;
}

ColorMatch_Arena()
{
    for(new i; i < sizeof(ColorMatchObjects); i++) DestroyObject(ColorMatchObjects[i]);
    
    ColorMatchObjects[OBJ_ORANGE] = CreateObject(19353, 2005.390, 3866.277, 101.323, 0.000, 90.000, 90.000); //  orange
	SetObjectMaterial(ColorMatchObjects[OBJ_ORANGE], 0, 18996, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_ORANGE]));

	ColorMatchObjects[OBJ_RED] = CreateObject(19353, 2008.590, 3866.277, 101.323, 0.000, 90.000, 90.000); // red
	SetObjectMaterial(ColorMatchObjects[OBJ_RED], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_RED]));

	ColorMatchObjects[OBJ_GREEN] = CreateObject(19353, 2002.190, 3866.277, 101.323, 0.000, 90.000, 90.000); // green
	SetObjectMaterial(ColorMatchObjects[OBJ_GREEN], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_GREEN]));

	ColorMatchObjects[OBJ_YELLOW] = CreateObject(19353, 2008.590, 3862.777, 101.323, 0.000, 90.000, 90.000); // yellow
	SetObjectMaterial(ColorMatchObjects[OBJ_YELLOW], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_YELLOW]));

	ColorMatchObjects[OBJ_PURPLE] = CreateObject(19353, 2008.590, 3869.777, 101.323, 0.000, 90.000, 90.000); // purple
	SetObjectMaterial(ColorMatchObjects[OBJ_PURPLE], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_PURPLE]));

	ColorMatchObjects[OBJ_PINK] = CreateObject(19353, 2005.390, 3862.777, 101.323, 0.000, 90.000, 90.000); // pink
	SetObjectMaterial(ColorMatchObjects[OBJ_PINK], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_PINK]));

	ColorMatchObjects[OBJ_MAROON] = CreateObject(19353, 2005.390, 3869.777, 101.323, 0.000, 90.000, 90.000); // maroon
	SetObjectMaterial(ColorMatchObjects[OBJ_MAROON], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_MAROON]));

	ColorMatchObjects[OBJ_BLUE] = CreateObject(19353, 2002.190, 3869.777, 101.323, 0.000, 90.000, 90.000); // blue
	SetObjectMaterial(ColorMatchObjects[OBJ_BLUE], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_BLUE]));

	ColorMatchObjects[OBJ_WHITE] = CreateObject(19353, 2002.190, 3862.777, 101.323, 0.000, 90.000, 90.000); // white
	SetObjectMaterial(ColorMatchObjects[OBJ_WHITE], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_WHITE]));
	
	#if defined CM_USEFENCES
	for(new i; i < sizeof(ColorMatchFences); i++) DestroyObject(ColorMatchFences[i]);
	
	ColorMatchFences[0] = CreateObject(8674, 2005.395, 3871.529, 102.859, 0.000, 0.000, 0.000);
	ColorMatchFences[1] = CreateObject(8674, 2000.584, 3866.285, 102.859, 0.000, 0.000, 90.000);
	ColorMatchFences[2] = CreateObject(8674, 2010.208, 3866.285, 102.859, 0.000, 0.000, 90.000);
	ColorMatchFences[3] = CreateObject(8674, 2005.395, 3861.021, 102.859, 0.000, 0.000, 0.000);
	
	ColorMatchFences[4] = CreateObject(8674, 2005.395, 3871.529, 105.809, 0.000, 0.000, 0.000);
	ColorMatchFences[5] = CreateObject(8674, 2000.584, 3866.285, 105.809, 0.000, 0.000, 90.000);
	ColorMatchFences[6] = CreateObject(8674, 2010.208, 3866.285, 105.809, 0.000, 0.000, 90.000);
	ColorMatchFences[7] = CreateObject(8674, 2005.395, 3861.021, 105.809, 0.000, 0.000, 0.000);
	#endif
	return 1;
}

ColorMatch_CleanUp(players = 0)
{
    KillTimer(ColorMatchTimer);
	KillTimer(ColorMatchFallTimer);
	KillTimer(ColorMatchEventTimer);
	ColorMatchStage = STAGE_NONE;
	ColorMatchPlayers = 0;
	ColorMatchTimer = -1;
	ColorMatchFallTimer = -1;
	ColorMatchEventTimer = -1;
	
	if(players)
	{
	    for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
		{
			if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
			InCMEvent[i] = false;
			PlayerTextDrawHide(i, ColorText[i]);
			TextDrawHideForPlayer(i, ColorMatchTD);
			SetPlayerVirtualWorld(i, 0);
			SpawnPlayer(i);
		}
	}

	return 1;
}

ColorMatch_InitPlayer(playerid)
{
    InCMEvent[playerid] = false;

    ColorText[playerid] = CreatePlayerTextDraw(playerid,317.000000, 150.000000, ""_"");
	PlayerTextDrawAlignment(playerid,ColorText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,ColorText[playerid], 255);
	PlayerTextDrawFont(playerid,ColorText[playerid], 2);
	PlayerTextDrawLetterSize(playerid,ColorText[playerid], 0.700000, 3.000000);
	PlayerTextDrawColor(playerid,ColorText[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ColorText[playerid], 1);
	PlayerTextDrawSetProportional(playerid,ColorText[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,ColorText[playerid], 0);
	return 1;
}

ColorMatch_Eliminate(playerid)
{
	if(!InCMEvent[playerid]) return 1;
	TextDrawHideForPlayer(playerid, ColorMatchTD);
	PlayerTextDrawHide(playerid, ColorText[playerid]);
	SetPlayerVirtualWorld(playerid, 0);
	SpawnPlayer(playerid);
	ColorMatchPlayers--;
	
	new string[144], name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	format(string, sizeof(string), ""[COLORMATCH] {FFFFFF}%s(%d) got eliminated. Players Left: {F1C40F}%d"", name, playerid, ColorMatchPlayers);
	for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
	{
		if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
		SendClientMessage(i, 0x3498DBFF, string);
	}
	
	InCMEvent[playerid] = false;
	
	if(ColorMatchStage == STAGE_PLAYING)
	{
	    if(ColorMatchPlayers < 2)
	    {
	        new winner = INVALID_PLAYER_ID;
	        for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
			{
				if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
				winner = i;
				break;
			}
			
			if(IsPlayerConnected(winner))
			{
			    GetPlayerName(winner, name, MAX_PLAYER_NAME);
			    format(string, sizeof(string), ""[COLORMATCH] {FFFFFF}%s(%d) has won the event!"", name, winner);
			    SendClientMessageToAll(0x3498DBFF, string);
			    GivePlayerMoney(winner, CM_REWARD);
			}
			
			SendClientMessageToAll(0x3498DBFF, ""[COLORMATCH] {FFFFFF}Event ended."");
			ColorMatch_CleanUp(1);
	    }
	}
	
	return 1;
}

public OnFilterScriptInit()
{
	ColorMatchObjects[OBJ_ORANGE] = CreateObject(19353, 2005.390, 3866.277, 101.323, 0.000, 90.000, 90.000); //  orange
	SetObjectMaterial(ColorMatchObjects[OBJ_ORANGE], 0, 18996, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_ORANGE]));
	
	ColorMatchObjects[OBJ_RED] = CreateObject(19353, 2008.590, 3866.277, 101.323, 0.000, 90.000, 90.000); // red
	SetObjectMaterial(ColorMatchObjects[OBJ_RED], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_RED]));
	
	ColorMatchObjects[OBJ_GREEN] = CreateObject(19353, 2002.190, 3866.277, 101.323, 0.000, 90.000, 90.000); // green
	SetObjectMaterial(ColorMatchObjects[OBJ_GREEN], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_GREEN]));
	
	ColorMatchObjects[OBJ_YELLOW] = CreateObject(19353, 2008.590, 3862.777, 101.323, 0.000, 90.000, 90.000); // yellow
	SetObjectMaterial(ColorMatchObjects[OBJ_YELLOW], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_YELLOW]));
	
	ColorMatchObjects[OBJ_PURPLE] = CreateObject(19353, 2008.590, 3869.777, 101.323, 0.000, 90.000, 90.000); // purple
	SetObjectMaterial(ColorMatchObjects[OBJ_PURPLE], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_PURPLE]));

	ColorMatchObjects[OBJ_PINK] = CreateObject(19353, 2005.390, 3862.777, 101.323, 0.000, 90.000, 90.000); // pink
	SetObjectMaterial(ColorMatchObjects[OBJ_PINK], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_PINK]));
	
	ColorMatchObjects[OBJ_MAROON] = CreateObject(19353, 2005.390, 3869.777, 101.323, 0.000, 90.000, 90.000); // maroon
	SetObjectMaterial(ColorMatchObjects[OBJ_MAROON], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_MAROON]));
	
	ColorMatchObjects[OBJ_BLUE] = CreateObject(19353, 2002.190, 3869.777, 101.323, 0.000, 90.000, 90.000); // blue
	SetObjectMaterial(ColorMatchObjects[OBJ_BLUE], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_BLUE]));

	ColorMatchObjects[OBJ_WHITE] = CreateObject(19353, 2002.190, 3862.777, 101.323, 0.000, 90.000, 90.000); // white
	SetObjectMaterial(ColorMatchObjects[OBJ_WHITE], 0, 18646, ""matcolours"", ""white"", RGBAToARGB(ColorMatchColors[OBJ_WHITE]));
	
	#if defined CM_USEFENCES
	ColorMatchFences[0] = CreateObject(8674, 2005.395, 3871.529,102.859, 0.000, 0.000, 0.000);
	ColorMatchFences[1] = CreateObject(8674, 2000.584, 3866.285,102.859, 0.000, 0.000, 90.000);
	ColorMatchFences[2] = CreateObject(8674, 2010.208, 3866.285,102.859, 0.000, 0.000, 90.000);
	ColorMatchFences[3] = CreateObject(8674, 2005.395, 3861.021,102.859, 0.000, 0.000, 0.000);
	
	ColorMatchFences[4] = CreateObject(8674, 2005.395, 3871.529, 105.809, 0.000, 0.000, 0.000);
	ColorMatchFences[5] = CreateObject(8674, 2000.584, 3866.285, 105.809, 0.000, 0.000, 90.000);
	ColorMatchFences[6] = CreateObject(8674, 2010.208, 3866.285, 105.809, 0.000, 0.000, 90.000);
	ColorMatchFences[7] = CreateObject(8674, 2005.395, 3861.021, 105.809, 0.000, 0.000, 0.000);
	#endif
	
	ColorMatchTD = TextDrawCreate(39.000000, 300.000000, ""_"");
	TextDrawBackgroundColor(ColorMatchTD, 255);
	TextDrawFont(ColorMatchTD, 2);
	TextDrawLetterSize(ColorMatchTD, 0.260000, 1.400000);
	TextDrawColor(ColorMatchTD, -1);
	TextDrawSetOutline(ColorMatchTD, 1);
	TextDrawSetProportional(ColorMatchTD, 1);
	TextDrawSetSelectable(ColorMatchTD, 0);
	
	for(new i, mp = GetPlayerPoolSize(); i <= mp; i++) if(IsPlayerConnected(i)) ColorMatch_InitPlayer(i);
	return 1;
}

public OnFilterScriptExit()
{
	for(new i; i < sizeof(ColorMatchObjects); i++) DestroyObject(ColorMatchObjects[i]);
	
	#if defined CM_USEFENCES
	for(new i; i < sizeof(ColorMatchFences); i++) DestroyObject(ColorMatchFences[i]);
	#endif
	
	TextDrawDestroy(ColorMatchTD);
	
	for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
	{
		if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
		PlayerTextDrawDestroy(i, ColorText[i]);
		SetPlayerVirtualWorld(i, 0);
		SpawnPlayer(i);
	}
	
	return 1;
}

public OnPlayerConnect(playerid)
{
    ColorMatch_InitPlayer(playerid);
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	ColorMatch_Eliminate(playerid);
	return 1;
}

CMD:colormatch(playerid, params[])
{
	if(InCMEvent[playerid]) return SendClientMessage(playerid, 0xE74C3CFF, ""ERROR: {FFFFFF}You're already in the ColorMatch event."");
	if(ColorMatchStage == STAGE_PLAYING) return SendClientMessage(playerid, 0xE74C3CFF, ""ERROR: {FFFFFF}You can't join to the ColorMatch event because it started."");
	if(ColorMatchStage == STAGE_NONE) {
	    // init game
	    ColorMatchStage = STAGE_SETUP;
	    ColorMatchPlayers = 1;
	    ColorMatchTimer = SetTimerEx(""CM_SetupTimer"", 1000, false, ""i"", CM_SETUP_TIME);
	    ColorMatchFallTimer = ColorMatchEventTimer = -1;
		ColorMatch_Arena();
		
	    new string[144], name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	    format(string, sizeof(string), ""[COLORMATCH] {FFFFFF}%s(%d) has started the event. Use {F1C40F}/colormatch {FFFFFF}to join."", name, playerid);
	    SendClientMessageToAll(0x3498DBFF, string);
	}else{
	    // player join
	    if(ColorMatchPlayers >= CM_MAX_PLAYERS) return SendClientMessage(playerid, 0xE74C3CFF, ""ERROR: {FFFFFF}You can't join to the ColorMatch event because its full."");
	    ColorMatchPlayers++;
	    
	    new string[144], name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	    format(string, sizeof(string), ""[COLORMATCH] {FFFFFF}%s(%d) has joined the event. Use {F1C40F}/colormatch {FFFFFF}to join. [%d/%d]"", name, playerid, ColorMatchPlayers, CM_MAX_PLAYERS);
	    SendClientMessageToAll(0x3498DBFF, string);
	}

    InCMEvent[playerid] = true;

	new Float: x, Float: y, Float: z;
	GetObjectPos(ColorMatchObjects[ random(9) ], x, y, z);
    SetPlayerPos(playerid, x + frandom(1.0, -1.0), y + frandom(1.0, -1.0), z + 1.0);
	SetPlayerVirtualWorld(playerid, 1);
	
	SendClientMessage(playerid, 0x3498DBFF, ""[COLORMATCH] {FFFFFF}If you fall off/get stuck during setup time, don't worry because you'll get teleported again once the event begins."");
	return 1;
}

forward CM_SetupTimer(time);
public CM_SetupTimer(time)
{
	new string[144], soundid = 1056;
	time--;
	
	if(time < 1) {
		if(ColorMatchPlayers < CM_MIN_PLAYERS) {
	    	SendClientMessageToAll(0x3498DBFF, ""[COLORMATCH] {FFFFFF}Event didn't start because not enough players joined."");
			ColorMatch_CleanUp(1);
			return 1;
		}else{
		    ColorMatchStage = STAGE_PLAYING;
		    ColorMatchTimer = SetTimer(""CM_PickColor"", 2000, false);
		    ColorMatchFallTimer = SetTimer(""CM_FallTimer"", 500, true);
		    ColorMatchEventTimer = SetTimerEx(""CM_EndEvent"", 1000, false, ""i"", CM_EVENT_TIME);
            TextDrawSetString(ColorMatchTD, ""_"");
            
		    format(string, sizeof(string), ""~n~~n~~n~~b~~h~~h~Event ~g~~h~Started!"");
		    soundid = 1057;
		}
	}else{
	    format(string, sizeof(string), ""~n~~n~~n~~b~~h~~h~Event: ~g~~h~%d"", time);
	    soundid = 1056;
	}
	
	for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
	{
		if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
		PlayerPlaySound(i, soundid, 0.0, 0.0, 0.0);
		GameTextForPlayer(i, string, 1000, 4);
		
		if(time < 1)
		{
		    TextDrawShowForPlayer(i, ColorMatchTD);

            new Float: x, Float: y, Float: z;
			GetObjectPos(ColorMatchObjects[ random(9) ], x, y, z);
		    SetPlayerPos(i, x + frandom(1.0, -1.0), y + frandom(1.0, -1.0), z + 1.0);
			
			#if defined CM_SEPERATE
			SetPlayerVirtualWorld(i, 100 + i);
			#endif
		}
  	}
  	
	if(time > 0) ColorMatchTimer = SetTimerEx(""CM_SetupTimer"", 1000, false, ""i"", time);
	return 1;
}

forward CM_FallTimer();
public CM_FallTimer()
{
	if(ColorMatchStage != STAGE_PLAYING) return 1;
	new Float: z;
	for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
	{
	    if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
	    GetPlayerPos(i, z, z, z);
	    if(z < 95.0) ColorMatch_Eliminate(i);
	}
	
	return 1;
}

forward CM_PickColor();
public CM_PickColor()
{
    if(ColorMatchStage != STAGE_PLAYING) return 1;
    new id = random(sizeof(ColorMatchNames));
    ColorMatchCurrent = id;

    for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
    {
        if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
        PlayerTextDrawColor(i, ColorText[i], ColorMatchColors[id]);
	    PlayerTextDrawSetString(i, ColorText[i], ColorMatchNames[ random(sizeof(ColorMatchNames)) ]);
		PlayerTextDrawShow(i, ColorText[i]);
    }

    ColorMatchTimer = SetTimer(""CM_MoveObjects"", 3000, false);
	return 1;
}

forward CM_MoveObjects();
public CM_MoveObjects()
{
    if(ColorMatchStage != STAGE_PLAYING) return 1;
    for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
    {
        if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
        PlayerTextDrawColor(i, ColorText[i], 0xFFFFFFFF);
	    PlayerTextDrawSetString(i, ColorText[i], ""_"");
		PlayerTextDrawHide(i, ColorText[i]);
    }
    
    new Float: x, Float: y, Float: z;
	for(new i; i < sizeof(ColorMatchObjects); i++)
	{
	    if(i == ColorMatchCurrent) continue;
	    GetObjectPos(ColorMatchObjects[i], x, y, z);
	    SetObjectPos(ColorMatchObjects[i], x, y, z - 1000.0);
	}

    ColorMatchTimer = SetTimer(""CM_FixObjects"", 3000, false);
	return 1;
}

forward CM_FixObjects();
public CM_FixObjects()
{
    if(ColorMatchStage != STAGE_PLAYING) return 1;
	new Float: x, Float: y, Float: z;
	for(new i; i < sizeof(ColorMatchObjects); i++)
	{
	    if(i == ColorMatchCurrent) continue;
	    GetObjectPos(ColorMatchObjects[i], x, y, z);
	    SetObjectPos(ColorMatchObjects[i], x, y, z + 1000.0);
	}
	
	ColorMatchTimer = SetTimer(""CM_PickColor"", 1000, false);
	return 1;
}

forward CM_EndEvent(time);
public CM_EndEvent(time)
{
    if(ColorMatchStage != STAGE_PLAYING) return 1;
    new string[32];
    
    if(time > 1) {
        time--;
        
        format(string, sizeof(string), ""Time Left: %s%s"", (time > 10) ? (""~y~~h~"") : (""~r~~h~""), ConvertToMinutes(time));
        TextDrawSetString(ColorMatchTD, string);
        ColorMatchEventTimer = SetTimerEx(""CM_EndEvent"", 1000, false, ""i"", time);
    }else if(time == 1) {
        for(new i, mp = GetPlayerPoolSize(); i <= mp; i++)
	    {
	        if(!IsPlayerConnected(i) || !InCMEvent[i]) continue;
	        GivePlayerMoney(i, CM_REWARD);
	        SendClientMessage(i, 0x3498DBFF, ""[COLORMATCH] {FFFFFF}You're all winners!"");
	    }
	    
        SendClientMessageToAll(0x3498DBFF, ""[COLORMATCH] {FFFFFF}Event ended."");
        ColorMatch_CleanUp(1);
    }
    
	return 1;
}"
iCKuGr5Y,NyanCatTW1's badge type display script v1.000,Nyan-Cat,JavaScript,Saturday 27th of April 2024 10:58:27 PM CDT,"// ==UserScript==
// @name         NyanCatTW1's badge type display script
// @namespace    http://tampermonkey.net/
// @version      1.000
// @author       Nyan Cat
// @match        https://*.roblox.com/badges/*
// @grant        GM.xmlHttpRequest
// @grant        unsafeWindow
// @connect      bor-valuable-badge-database-production.up.railway.app
// ==/UserScript==

/*jshint esversion: 8 */
/*jshint loopfunc: true */
/*global $ */

var allNVLBadgeIds = new Set();
function isNVL(badgeId) {
    return allNVLBadgeIds.has(parseInt(badgeId));
}

function getBadgeValue(placeId, badgeId) {
    if (badgeValuesDict[placeId].hasOwnProperty(badgeId)) {
        return badgeValuesDict[placeId][badgeId];
    }
    return NaN;
}

function reportMissingBadgesToDB(badgeIds) {
    GM.xmlHttpRequest({
        method: ""GET"",
        url: `https://bor-valuable-badge-database-production.up.railway.app/api/v3/user/reportmissing?badgeIds=${badgeIds.join("","")}`,
        onload: function(response) {
            return response;
        },
        onerror: function() {
            return ""null"";
        }
    });
}

function checkBadgeValuesOnload(placeId, response) {
    unsafeWindow.badgeDbNeedsRefresh = false;
    var resp = JSON.parse(response.responseText).data;
    var missingBadges = [];
    for (var badgeId in resp) {
        var badge = resp[badgeId];
        if (!badge.found) {
            unsafeWindow.badgeDbNeedsRefresh = true;
            missingBadges.push(badge.badge_id);
            continue;
        }

        valueCheckedBadgeIds[placeId].add(badge.badge_id);
        badgeValuesDict[placeId][badge.badge_id] = badge.value;
        if (badge.is_nvl) {
            allNVLBadgeIds.add(badge.badge_id);
        }
    }

    if (unsafeWindow.badgeDbNeedsRefresh) {
        reportMissingBadgesToDB(missingBadges);
    }
}

function checkBadgeValues() {
    for (let i = 0, n = allPlaces.length; i < n; i++) {
        let placeId = allPlaces[i];

        var toCheck = [];
        for (let i = 0, n = allBadgeIds[placeId].length; i < n; i++) {
            let id = allBadgeIds[placeId][i];
            if (!valueCheckedBadgeIds[placeId].has(id)) {
                toCheck.push(id);
            }
        }

        if (toCheck.length === 0) {
            continue;
        }

        toCheck = toCheck.slice(0, 100);
        const url = `https://bor-valuable-badge-database-production.up.railway.app/api/v3/query/bybadgeids?badgeIds=${toCheck.join("","")}`;

        GM.xmlHttpRequest({
            method: ""GET"",
            url: url,
            onload: checkBadgeValuesOnload.bind(null, placeId),
        });
    }
}

function initPlaceRecord(placeId) {
    if (allPlaces.includes(placeId)) {
        console.error(""Who the hell called initPlaceRecord twice ??/?/???///"");
        return;
    }

    allPlaces.push(placeId);
    allBadgeIds[placeId] = [];

    valueCheckedBadgeIds[placeId] = valueCheckedBadgeIds[placeId] || new Set();
    badgeValuesDict[placeId] = badgeValuesDict[placeId] || {};
}

var allPlaces = [];
var allBadgeIds = {};
var valueCheckedBadgeIds = {};
var badgeValuesDict = {};
var curPlaceId = 0;

function updateBadgesPageDisplay() {
    var badgeValue = getBadgeValue(curPlaceId, allBadgeIds[curPlaceId][0]);
    if (isNaN(badgeValue)) {
        badgeValue = 0;
    } else {
        badgeValue += 1;
    }

    if (isNVL(allBadgeIds[curPlaceId][0])) {
        badgeValue = 4;
    }

    var badgeValueDescs = [""Loading..."", ""Free"", ""Valuable (non-legacy)"", ""Legacy"", ""Non-Valuable Legacy""];
    var badgeValueElm = document.getElementById(""nyan-badge-value"");
    if (badgeValueElm === null) {
        document.getElementsByClassName(""clearfix item-type-field-container"")[0].outerHTML += `
<div class=""clearfix item-field-container"">
    <div class=""font-header-1 text-subheader text-label text-overflow field-label"">Value</div>
    <div class=""field-content"" id=""nyan-badge-value"">Loading...</div>
</div>`;
    } else if (badgeValueElm.innerText != badgeValueDescs[badgeValue]) {
        badgeValueElm.innerText = badgeValueDescs[badgeValue];
    }
}

// Init
if (location.href.includes(""/badges/"")) {
    // F: I know, I know, it's dirty like hell
    curPlaceId = [].concat.apply([], document.getElementsByTagName(""a""))
                    .filter((elm) => elm.href.includes(""PlaceId=""))[0]
                    .href.split(""PlaceId="")[1].split(""&"")[0];
    initPlaceRecord(curPlaceId);
    allBadgeIds[curPlaceId].push(location.href.split(""/"")[4])
    setInterval(updateBadgesPageDisplay, 100);
    setInterval(checkBadgeValues, 100);
}"
w4JHn16u,RAGE engine,brandblox,Python,Saturday 27th of April 2024 09:48:12 PM CDT,"# using logic
import math
 
def get_input():
    size = int(input(""Enter length of array: ""))
    num_data = []
    for i in range(size):
        number = int(input(""Enter element {}: "".format(i+1)))
        num_data.append(number)
    return num_data
 
def mean(data):
    return sum(data) / len(data)
 
def variance(data):
    mu = mean(data)
    return sum((x - mu) ** 2 for x in data) / len(data)
 
def std_deviation(data):
    return math.sqrt(variance(data))
 
data = get_input()
print(""Mean:"", mean(data))
print(""Variance:"", variance(data))
print(""Standard Deviation:"", std_deviation(data))
 
#using library
import numpy as np
 
def get_input():
    size = int(input(""Enter length of array: ""))
    num_data = []
    for i in range(size):
        number = int(input(""Enter element {}: "".format(i+1)))
        num_data.append(number)
    return num_data
 
def mean(data):
    return np.mean(data)
 
def variance(data):
    return np.var(data)
 
def std_deviation(data):
    return np.std(data)
 
data = get_input()
print(""Mean:"", mean(data))
print(""Variance:"", variance(data))
print(""Standard Deviation:"", std_deviation(data))


################################Linear##################################

import numpy as np
import matplotlib.pyplot as plt
 
def estimate_coef(x, y):
    # number of observations/points
    n = np.size(x)
    
    # mean of x and y vector
    m_x = np.mean(x)
    m_y = np.mean(y)
    
    # calculating cross-deviation and deviation about x
    SS_xy = np.sum(y * x) - n * m_y * m_x
    SS_xx = np.sum(x * x) - n * m_x * m_x
    
    # calculating regression coefficients
    b_1 = SS_xy / SS_xx
    b_0 = m_y - b_1 * m_x
    print(""b_0"", b_0)
    print(""b_1"", b_1)
    return (b_0, b_1)
 
def plot_regression_line(x, y, b):
    # plotting the actual points as scatter plot
    plt.scatter(x, y, color=""m"", marker=""o"", s=30)
    
    # predicted response vector
    y_pred = b[0] + b[1] * x
    
    # plotting the regression line
    plt.plot(x, y_pred, color=""g"")
    
    # putting labels
    plt.xlabel('x')
    plt.ylabel('y')
    
# observations / data
x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12])
    
# estimating coefficients
b = estimate_coef(x, y)
plot_regression_line(x, y, b)
 
output:
https://ibb.co/xmMGCbm
 
# Predict the speed of a 10-year old car.
import matplotlib.pyplot as plt
from scipy import stats
 
x = [5, 7, 8, 7, 2, 17, 2, 9, 4, 11, 12, 9, 6]
y = [99, 86, 87, 88, 111, 86, 103, 87, 94, 78, 77, 85, 86]
 
slope, intercept, r, p, std_err = stats.linregress(x, y)
 
def myfunc(x):
    return slope * x + intercept
 
mymodel = list(map(myfunc, x))
 
plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()
 
speed = myfunc(10)
print(speed)
 
# Example of bad-fit
import matplotlib.pyplot as plt
from scipy import stats
 
x = [89,43,36,36,95,10,66,34,38,20,26,29,48,
     64,6 ,5 ,36 ,66 ,72 ,40]
y = [21 ,46 ,3 ,35 ,67 ,95 ,53 ,72 ,58 ,10 ,
     26 ,34 ,90 ,33 ,38 ,20 ,56 ,2 ,47 ,15]
 
slope, intercept,r,p,std_err = stats.linregress(x,y)
 
def myfunc(x):
    return slope * x + intercept
 
mymodel = list(map(myfunc,x))
 
plt.scatter(x,y)
plt.plot(x,mymodel)
plt.show()
 
print(r)


########################skewness###########################3

import numpy as np
import pandas as pd
import seaborn as sns
# Example dataset
diamonds = sns.load_dataset(""diamonds"")
diamond_prices = diamonds[""price""]
mean_price = diamond_prices.mean()
median_price = diamond_prices.median()
std = diamond_prices.std()
skewness = (3 * (mean_price - median_price)) / std
print(f""The Pierson's second skewness score of diamond prices distribution is {skewness:.5f}"")
#The Pierson's second skewness score of diamond prices distribution is 1.15189
def moment_based_skew(distribution):
 n = len(distribution)
 mean = np.mean(distribution)
 std = np.std(distribution)
 
 # Divide the formula into two parts
 first_part = n / ((n - 1) * (n - 2))
 second_part = np.sum(((distribution - mean) / std) ** 3)
 
 skewness = first_part * second_part
 return skewness
skew = moment_based_skew(diamond_prices)
print(""The moment_based skewness score of diamond prices distribution is "", skew)
# Using Libraries
# Pandas version
print(""The moment_based skewness skewness score of diamond prices distribution is "",
diamond_prices.skew())
# SciPy version
from scipy.stats import skew
print(""The moment_based skewness skewness score of diamond prices distribution is "",
skew(diamond_prices))
# Visualization
import matplotlib.pyplot as plt
sns.kdeplot(diamond_prices)
plt.title(""Plot of diamond prices"")
plt.xlabel(""Price ($)"")




##############################simplex###############################3
#Assignment: Write a Python Program to solve Linear Programming Problem using
#Simplex Method
import numpy as np
 
def simplex_method(A, b, c):
    m, n = A.shape
    # Create the initial tableau
    tableau = np.hstack([A, np.eye(m), b.reshape(-1, 1)])
    tableau = np.vstack([tableau, np.concatenate([c, np.zeros(m + 1)])])
    
    while True:
        # Find the pivot column
        pivot_col = np.argmin(tableau[-1, :-1])
        
        # If all elements in the last row are non-negative, optimal solution found
        if np.all(tableau[-1, :-1] >= 0):
            break
        
        # Find the pivot row
        ratios = tableau[:-1, -1] / tableau[:-1, pivot_col]
        pivot_row = np.argmin(ratios)
        
        # Perform pivot operation
        tableau[pivot_row, :] /= tableau[pivot_row, pivot_col]
        
        for i in range(m + 1):
            if i != pivot_row:
                tableau[i, :] -= tableau[i, pivot_col] * tableau[pivot_row, :]
    
    return tableau[-1, -1], tableau[-1, :-1]
 
A = np.array([[2, 1], [1, 2]])
b = np.array([4, 3])
c = np.array([-3, -5])
 
optimal_value, optimal_solution = simplex_method(A, b, c)
 
print(""Optimal value:"", optimal_value)
print(""Optimal solution:"", optimal_solution)




#Liner regression
import numpy as np
from sklearn.linear_model import LinearRegression
 
years = np.array([[1], [2], [3], [4], [5]])
speeds = np.array([30, 45, 45, 55, 65])  
 
 
model = LinearRegression()
model.fit(years, speeds)
 
x= 15
predicted_speed = model.predict([[x]])
 
print(f""Predicted speed after {x} years:"", predicted_speed[0], ""km/h"")





"
HH86YQaH,Project Azur NoRules,Voloykten,Bash,Saturday 27th of April 2024 09:46:06 PM CDT,"<b><size=40><align=""center""><color=#f8f7faff>[R</color></b><b><color=#2408fdff>U</color></b><b><color=#fa0101ff>S]</color></b> <b><color=#F47107>P</color><color=#F48307>r</color><color=#F49507>o</color><color=#F4A707>j</color><color=#F4B907>e</color><color=#F4CB07>c</color><color=#F4DD07>t</color></b> <b><color=#F8F804>A</color><color=#F7D905>z</color><color=#F6BA06>u</color><color=#F59B07>r</color></b> <b><color=#0202f7ff>|</color></b> <b><color=#8CEB0F>C</color><color=#79EC23>l</color><color=#66ED37>a</color><color=#53EE4B>s</color><color=#40EF5F>s</color><color=#2DF073>i</color><color=#1AF187>c</color></b> <b><color=#08F87C>P</color><color=#32F75F>l</color><color=#5CF642>u</color><color=#86F525>s</color></align></size=40></b>
 
<b><link=https://discord.gg/RwgjzHRFFd><color=#FB0000>Х</color><color=#FA0C00>о</color><color=#F91800>ч</color><color=#F82400>е</color><color=#F73000>ш</color><color=#F63C00>ь</color> <color=#F45400>к</color> <color=#F26C00>н</color><color=#F17800>а</color><color=#F08400>м</color><color=#EF9000>?</color></b> <b><color=#33FC05>В</color><color=#2DFC06>о</color><color=#27FC07>т</color> <color=#1BFC09>с</color><color=#15FC0A>с</color><color=#0FFC0B>ы</color><color=#09FC0C>л</color><color=#03FC0D>к</color></b><b><color=#57ef04ff>а</color></b>  <b><color=#010100ff>-</color></b> <b><color=#00FABC>h</color><color=#02F7BD>t</color><color=#04F4BE>t</color><color=#06F1BF>p</color><color=#08EEC0>s</color><color=#0AEBC1>:</color><color=#0CE8C2>/</color><color=#0EE5C3>/</color><color=#10E2C4>d</color><color=#12DFC5>i</color><color=#14DCC6>s</color><color=#16D9C7>c</color><color=#18D6C8>o</color><color=#1AD3C9>r</color><color=#1CD0CA>d</color><color=#1ECDCB>.</color><color=#20CACC>g</color><color=#22C7CD>g</color><color=#24C4CE>/</color><color=#26C1CF>p</color><color=#28BED0>v</color><color=#2ABBD1>s</color><color=#2CB8D2>G</color><color=#2EB5D3>k</color><color=#30B2D4>J</color><color=#32AFD5>u</color><color=#34ACD6>S</color><color=#36A9D7>U</color><color=#38A6D8>n</color></b> <b><color=#fdfdfdff>[</color></b><b><color=#1900fcff>Discord</color></b><b><color=#fcfcfcff>]</color></link></b>

1. Запрещен тим килл. (пред./повторное нарушение/массовый тим килл бан на 1-3 дня)
2. Запрещен тим. (пред./бан на 1 час)
3. Запрещено издавание неприятных звуков в микрофон. (пред./мут 30 мин.-1 час)
4. Запрещено использование сторонних ПО/Soundpad. (пред./мут 30 мин.-1 час)
5. Запрещено убивать администрацию вовремя ивента. (пред./вылк. из ивента)
6. Запрещено мешать администрации в проведение ивента. (пред./вылк. из ивента)
7. Запрещен спам предметами. (пред./снятие с привилегии/должности)
8. Запрещено мешать работе сервера. (пред./бан навсегда)
9. Запрещено выходить с сервера во время разборок. (пред./бан на 7 дней)
10. Запрещено убивать администрацию во время разборок. (+бан на 1 дней)
11. Запрещено любое оскорбление администрацию/игроков и самого проекта. (бан на 1 дней)
12. Запрещено обманывать администрацию. (пред./ бан на 1 час)
13. Запрещено вмешиваться в админ разборок. (пред./ бан на 2 часа)
14. Запрещено кемперить более 2 минут. (пред./ бан на 1 час)
15. Запрещено упоминание родных игрока/администрацию. (пред./бан на 7 дней)
16. Фейк администрация. (бан на 1 дней)
17. Запрещено придумывать правила. (бан на 1 дней) 
18. Строго запрещен Читерства или Возможности которые дают преимущество над другими игроками. (бан навсегда)"
3C98cVCe,Правила Сервера Events,Voloykten,Bash,Saturday 27th of April 2024 09:40:53 PM CDT,"<align=center><size=18><link=https://discord.gg/pvsGkJuSUn><mark=#32CD32><size=17>|✨|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> ""Кликни на ✨ чтобы присоединится на наш Дискорд""|<space=0.5em>|</mark><mark=#595959>||</mark></link></size></align>
<align=center><link=https://discord.gg/dwKDXRtNuB><color=#7289da><u>Не работает ✨? Тогда кликни сюда чтобы присоединится на наш Discord сервер.</u></color></link></align>
 

Правила Сервера Events:
1. Запрещено нарушать стабильную работу сервера путём неестественной нагрузки. (Спам гранатами и подрыв их / использование админ панели для нарушения работы сервера) В случае нарушения выдается блокировка на игровом сервере в размере 7 Суток.
2. ""Твинки"" не как не наказываются и не ведут ни к какому наказанию Только если не на каком из них нету бана или мута. В случае обхода наказания через twink аккаунт, блокировка на игровом сервере в размере 50 лет.
3. Правило не быть мудаком, распространяется на любых ивентах а также других режимах игры. В случае нарушения выдается блокировка на игровом сервере в размере 2-ух Дней.
4. Запрещены одинаковые ники с администрацией а также ники которые оскорбляют проект или его участников. В случае нарушения выдается бан до того момента пока участник не поменяет nickname.
5. Запрещено нарушать правила ивента которые вам дал проводящий. В случае нарушения выдается блокировка на игровом сервере в размере 4 часа / При повторном нарушении выдается блокировка на игровом сервере в размере 3-ое суток.
5.1. Если правила ивента кажутся вам не выполнимыми или их нельзя выполнить то желательно написать в жалоба и обжаловать действия ивент-мейкера в канале.
6. Читы, а также ПО дающее преимущество над игроками запрещено. В случае нарушения выдается блокировка на игровом сервере в размере 50 лет.
7.Правило Соунд пад и Voice mod.
7.1. Нельзя создавать звуковые помехи. В 
случае нарушения выдается выдается мут на пол часа.
7.2.  Нельзя изменять голос с помощью ПО. В случае нарушения выдаётся мут на 1 час.
7.3.  Нельзя громко прослушивать музыку, создавая помеху другим. В случае нарушения выдается выдается мут на 1 час.
7.4. Нельзя Использование звуковых раздражителей. В случае нарушения выдается выдается мут на 15 минут.
7.5 использование  Соунд пад и Voice mod можно только когда сам проводящий разрешил так-же не злоупотребления.
8. Разжигать конфликты. В случае нарушения выдается мут на 2 часа.
9. Выпрашивать игровую информацию. В случае нарушения выдается выдается мут на пол часа.
10. Оскорбление администратора. В случае нарушения выдается выдается мут на 2 часа.
11. Запрещены призывы покинуть сервер, а также реклама сторонних проектов. В случае нарушения  выдается мут на 4 часа.
12. Байтинг администратора / игрока на нарушение правил проекта. В случае нарушения выдается блокировка на игровом сервере на 1 день.
13. Администратор в праве 
выдавать наказание на свое усмотрение, даже за пункты которые не прописаны в правилах .(В разумных рамках)
14. Игроки в праве не голосовать за ивент, тем самым выбрать перевыборы ивентов.(Только 1 раз).
15. При оскорблении выдаётся мут на 30 минут.
16. При массовом оскорблении выдаётся мут 2 часа.
"
