id,title,username,language,date,content
V5ivPppS,FN_Bucket_ID,Fast0n,Java,Thursday 13th of June 2024 01:01:14 PM CDT,"[""bucketId"": ""33299130""]"
iwDBEHzb,ü§ëG2A.com Free Gift Card Guide June 2024 NEWü§ë,portalxwe,GetText,Thursday 13th of June 2024 01:01:10 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of;
13 June 2024"
By6rbQMN,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,x3kiN,Python,Thursday 13th of June 2024 12:58:31 PM CDT,"G2A.com complimentary gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
ayrah7wV,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,kaka440ka,GetText,Thursday 13th of June 2024 12:55:06 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered,

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 June 2024"
BRNhpgvs,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,FeasModz514,Python,Thursday 13th of June 2024 12:52:31 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
fpWfgxxj,ü§ëG2A.com Free Gift Card Guide June 2024 NEWüéÅ,ssss50wa,GetText,Thursday 13th of June 2024 12:49:03 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 

PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of;
13 June 2024"
W2zxa0aW,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,kjihu25,Python,Thursday 13th of June 2024 12:46:32 PM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
tcWEHJsk,dev key redirecthost.online,sieschriben,PHP,Thursday 13th of June 2024 12:43:03 PM CDT,"-----BEGIN OPENSSH PRIVATE KEY-----

ZmUwYjY5ZWUwOWY3ZDU0ZTY2NjliMWU5MGQ2OTM0NTMxYzkzYjUwNmVlMzQ5ZDdjMzdjMjIzNWE5NzdkMDQ3ZThkNWFjNzY4MDI0NTJiY2FjMmRhNzVkNGY2MGM0NWY4MjRlYWQ0M2NjMzA5NTM5OWU3MDljYmIzNGJiZDgzOThkZjBkOGU2ZDY5Y2I
ZTQ5MWY4MmUxZTU1ZGM1NWM2Y2IzNjMwNDZiYzRiZjNkYjcwZDYyMWRlZDk4OTBiYjUyYmFhMDVkNjU3NzU2OTIyMGIyMDQ0OGRjNDE3YzU4Yzc1ODlmNDQ0OWI2MDk1NWYzNGRlMjVlODhkMzZiNWYwMDcxNDE2MDg5MjNhYTU3Y2Y1ZGJmY2E4NWM
MGIyOWI2YmFmZTUzZmQ5YmU0NGU1MGRhZDZiYTlhNDJjZTYxODI3ZjQ2NTc0YzY3NjRkNTA5NzRkYmEyZjkwNWRjOWQxNWQ0YzdhODM2NTYzYzRlMmZlNzRmMzc2M2U1MGIwNjRiMTEyZjViNTVhM2E1NjEzODQwN2MxYTU5NDgyNzNiNTg4Y2Q1MWE
MDAwYmY0ZDNmYTkxNmM4MDI4N2U3NmM4NjE2N2VhZmEwMzMxMTVkZjEzYTQ1ZWYxZDYwYmRlMjZkZmVkM2ZlMTA2NTM5ODdjMzY5MWY5MmExNTY5YzRiOTQ5Y2JmNzJlMWVhNTE4OWExMzkwYjYyMzg0YjE4YWM3ZjdhZmU4ODY2ZWI3N2ZiZDhmNjU
YWM5YWQwN2FlMzc0MjA5N2I3Y2Y3YTU2NzE5ZDEzNzQ1MDNiNTBkY2ZkNDhhZTkyZTQ4ZGJjYzNhMGNjMmE0YjFhNzEwYzZmZGYxYg==

-----END OPENSSH PRIVATE KEY-----
"
AUAvGDSz,üéÅG2A.com Free Gift Card Guide June 2024 NEWüéÅ,ssss50ws,GetText,Thursday 13th of June 2024 12:42:23 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.


This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of;
13 June 2024"
syELFFuf,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Bufayez,Python,Thursday 13th of June 2024 12:40:32 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
PcWZpwH2,question #8,c32team,Python,Thursday 13th of June 2024 12:36:40 PM CDT,"def writesumtofile(someList):
    sum = None
    for i in someList:
        if i > 10:
            if sum is not None:
                sum = sum + i
            else:
                sum = i
        else:
            continue
    f = open('text.txt', 'r', encoding='utf-8')
    counter = 0
    for i in f.readlines():
        counter += 1
        if counter == 5:
            break
    f = open('text.txt', 'a', encoding='utf-8')
    f.write(str(sum))
    print('–ó–∞–ø–∏—Å–∞–ª–æ—Å—å!')


writesumtofile([11, 2, 3, 17, 99])"
T498cH8M,ü§ëG2A.com Free Gift Card Guide June 2024 NEWü§ë,x2w,GetText,Thursday 13th of June 2024 12:35:47 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view

Working as of:
13 June 2024"
D30P4m6P,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,buch,Python,Thursday 13th of June 2024 12:34:32 PM CDT,"G2A.com complimentary voucher & gaming guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
7MKtaDcr,question #7,c32team,Python,Thursday 13th of June 2024 12:34:08 PM CDT,"def get_status(is_active = False):
    return ‚Äòactive‚Äô if is_active is True else ‚Äònot active‚Äô

get_status(1)
get_status(0)
get_status(2)
get_status()"
1DSuabxE,Untitled,Josif_tepe,C++,Thursday 13th of June 2024 12:31:09 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int INF = 2e9;
const int maxn = 2002;
vector<pair<int, int>> v;
int dp[maxn];
int rec(int at) {
  if(dp[at] != -1) {
    return dp[at];
  }
  int res = 1;
  for(int i = at + 1; i < v.size(); i++) {
    if(v[at].second <= v[i].second) {
      res = max(res, rec(i) + 1);
    }
  }
  return dp[at] = res;
}
int main()
{
  ios_base::sync_with_stdio(false);
  int t;
  cin >> t;
  while(t--) {
    v.clear();
    int n;
    cin >> n; 
    vector<int> a(n), b(n);
    for(int i = 0; i < n; i++) {
      cin >> a[i];
    }
    for(int i = 0; i < n; i++) {
      cin >> b[i];
      v.push_back(make_pair(a[i], b[i]));
    }
    sort(v.begin(), v.end());
    memset(dp, -1, sizeof dp);
    int res = 0;
    for(int i = 0; i < n; i++) {
      res = max(res, rec(i));
    }
    cout << res << endl;
  }  
  
    return 0;
}
 "
k6yhVjGw,python #6,c32team,Python,Thursday 13th of June 2024 12:26:12 PM CDT,"def extender(cls):
   cls.hello = lambda self, name: print(f'Hello, {name}')
   return cls

@extender
class Client:
   pass


c = Client()
c.hello('Tom')"
tMBucXFm,SK_CP3704_Coco.uasset,PonPonTheBonBon,JSON,Thursday 13th of June 2024 12:23:32 PM CDT,"Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SK_CP3704_Coco.uasset
FModel 4.4.3.6 QA
[
  {
    ""Type"": ""SkeletalMesh"",
    ""Name"": ""SK_CP3704_Coco"",
    ""Class"": ""UScriptClass'SkeletalMesh'"",
    ""Properties"": {
      ""Skeleton"": {
        ""ObjectName"": ""Skeleton'SKEL_HeroCharacter'"",
        ""ObjectPath"": ""Lava/Plugins/CharacterCommon/Content/Animation/SKEL_HeroCharacter.24""
      },
      ""LODInfo"": [
        {
          ""ScreenSize"": {
            ""bCooked"": true,
            ""Default"": 1.0,
            ""Value"": 1.0
          },
          ""LODHysteresis"": 0.02,
          ""LODMaterialMap"": [],
          ""BuildSettings"": {
            ""bRecomputeNormals"": true,
            ""bRecomputeTangents"": true,
            ""bUseMikkTSpace"": true,
            ""bComputeWeightedNormals"": false,
            ""bRemoveDegenerates"": true,
            ""bUseHighPrecisionTangentBasis"": false,
            ""bUseFullPrecisionUVs"": false,
            ""bBuildAdjacencyBuffer"": true,
            ""ThresholdPosition"": 2E-05,
            ""ThresholdTangentNormal"": 2E-05,
            ""ThresholdUV"": 0.0009765625
          },
          ""ReductionSettings"": {
            ""TerminationCriterion"": ""SMTC_NumOfTriangles"",
            ""NumOfTrianglesPercentage"": 1.0,
            ""NumOfVertPercentage"": 1.0,
            ""MaxNumOfTriangles"": 4,
            ""MaxNumOfVerts"": 6,
            ""MaxDeviationPercentage"": 0.0,
            ""ReductionMethod"": ""SMOT_NumOfTriangles"",
            ""SilhouetteImportance"": ""SMOI_Normal"",
            ""TextureImportance"": ""SMOI_Normal"",
            ""ShadingImportance"": ""SMOI_Normal"",
            ""SkinningImportance"": ""SMOI_Normal"",
            ""bRemapMorphTargets"": false,
            ""bRecalcNormals"": true,
            ""WeldingThreshold"": 0.1,
            ""NormalsThreshold"": 60.0,
            ""MaxBonesPerVertex"": 4,
            ""bEnforceBoneBoundaries"": false,
            ""VolumeImportance"": 1.0,
            ""bLockEdges"": false,
            ""BaseLOD"": 0
          },
          ""BonesToRemove"": [],
          ""BonesToPrioritize"": [],
          ""WeightOfPrioritization"": 1.0,
          ""BakePose"": null,
          ""BakePoseOverride"": null,
          ""SourceImportFilename"": """",
          ""bHasBeenSimplified"": false,
          ""bHasPerLODVertexColors"": false,
          ""bAllowCPUAccess"": false,
          ""bSupportUniformlyDistributedSampling"": false
        },
        {
          ""ScreenSize"": {
            ""bCooked"": true,
            ""Default"": 0.3,
            ""Value"": 0.3
          },
          ""LODHysteresis"": 0.0,
          ""LODMaterialMap"": [],
          ""BuildSettings"": {
            ""bRecomputeNormals"": true,
            ""bRecomputeTangents"": true,
            ""bUseMikkTSpace"": true,
            ""bComputeWeightedNormals"": false,
            ""bRemoveDegenerates"": true,
            ""bUseHighPrecisionTangentBasis"": false,
            ""bUseFullPrecisionUVs"": false,
            ""bBuildAdjacencyBuffer"": true,
            ""ThresholdPosition"": 2E-05,
            ""ThresholdTangentNormal"": 2E-05,
            ""ThresholdUV"": 0.0009765625
          },
          ""ReductionSettings"": {
            ""TerminationCriterion"": ""SMTC_NumOfTriangles"",
            ""NumOfTrianglesPercentage"": 0.6,
            ""NumOfVertPercentage"": 0.6,
            ""MaxNumOfTriangles"": 4,
            ""MaxNumOfVerts"": 6,
            ""MaxDeviationPercentage"": 0.5,
            ""ReductionMethod"": ""SMOT_NumOfTriangles"",
            ""SilhouetteImportance"": ""SMOI_Normal"",
            ""TextureImportance"": ""SMOI_Normal"",
            ""ShadingImportance"": ""SMOI_Normal"",
            ""SkinningImportance"": ""SMOI_Normal"",
            ""bRemapMorphTargets"": false,
            ""bRecalcNormals"": true,
            ""WeldingThreshold"": 0.1,
            ""NormalsThreshold"": 60.0,
            ""MaxBonesPerVertex"": 4,
            ""bEnforceBoneBoundaries"": true,
            ""VolumeImportance"": 1.2,
            ""bLockEdges"": true,
            ""BaseLOD"": 0
          },
          ""BonesToRemove"": [
            {
              ""BoneName"": ""pouch_02_b""
            },
            {
              ""BoneName"": ""None""
            },
            {
              ""BoneName"": ""pouch_02""
            },
            {
              ""BoneName"": ""None""
            }
          ],
          ""BonesToPrioritize"": [
            {
              ""BoneName"": ""pupil_l""
            },
            {
              ""BoneName"": ""pupil_sub_l""
            },
            {
              ""BoneName"": ""pupil_r""
            },
            {
              ""BoneName"": ""pupil_sub_r""
            },
            {
              ""BoneName"": ""pupil_d_l""
            },
            {
              ""BoneName"": ""pupil_u_l""
            },
            {
              ""BoneName"": ""pupil_d_r""
            },
            {
              ""BoneName"": ""pupil_u_r""
            },
            {
              ""BoneName"": ""eyeLidUp_01_l""
            },
            {
              ""BoneName"": ""eyeLidUp_02_l""
            },
            {
              ""BoneName"": ""eyeLidUp_03_l""
            },
            {
              ""BoneName"": ""eyeLidDown_01_l""
            },
            {
              ""BoneName"": ""eyeLidDown_02_l""
            },
            {
              ""BoneName"": ""eyeLidDown_03_l""
            },
            {
              ""BoneName"": ""eyeLidUp_01_r""
            },
            {
              ""BoneName"": ""eyeLidUp_02_r""
            },
            {
              ""BoneName"": ""eyeLidUp_03_r""
            },
            {
              ""BoneName"": ""eyeLidDown_01_r""
            },
            {
              ""BoneName"": ""eyeLidDown_02_r""
            },
            {
              ""BoneName"": ""eyeLidDown_03_r""
            },
            {
              ""BoneName"": ""brow_01_l""
            },
            {
              ""BoneName"": ""brow_02_l""
            },
            {
              ""BoneName"": ""brow_03_l""
            },
            {
              ""BoneName"": ""brow_01_r""
            },
            {
              ""BoneName"": ""brow_02_r""
            },
            {
              ""BoneName"": ""brow_03_r""
            },
            {
              ""BoneName"": ""index_03_l""
            },
            {
              ""BoneName"": ""index_03_r""
            },
            {
              ""BoneName"": ""middle_03_l""
            },
            {
              ""BoneName"": ""middle_03_r""
            },
            {
              ""BoneName"": ""ring_03_l""
            },
            {
              ""BoneName"": ""ring_03_r""
            },
            {
              ""BoneName"": ""thumb_03_l""
            },
            {
              ""BoneName"": ""thumb_03_r""
            },
            {
              ""BoneName"": ""lip_um""
            },
            {
              ""BoneName"": ""lip_dm""
            },
            {
              ""BoneName"": ""lip_um_l""
            },
            {
              ""BoneName"": ""lip_um_r""
            },
            {
              ""BoneName"": ""lip_dm_l""
            },
            {
              ""BoneName"": ""lip_u_l""
            },
            {
              ""BoneName"": ""lip_dm_r""
            },
            {
              ""BoneName"": ""lip_u_r""
            },
            {
              ""BoneName"": ""lip_d_l""
            },
            {
              ""BoneName"": ""lip_d_r""
            },
            {
              ""BoneName"": ""spine_01_sq""
            },
            {
              ""BoneName"": ""spine_02_sq""
            },
            {
              ""BoneName"": ""spine_03_sq""
            },
            {
              ""BoneName"": ""spine_04""
            },
            {
              ""BoneName"": ""neck_01""
            },
            {
              ""BoneName"": ""clavicle_l""
            },
            {
              ""BoneName"": ""clavicle_r""
            },
            {
              ""BoneName"": ""pouch_01_b""
            },
            {
              ""BoneName"": ""pouch_01_l""
            },
            {
              ""BoneName"": ""pouch_01""
            },
            {
              ""BoneName"": ""bang_03_m""
            },
            {
              ""BoneName"": ""pouch_02_l""
            },
            {
              ""BoneName"": ""jaw""
            },
            {
              ""BoneName"": ""pelvis""
            },
            {
              ""BoneName"": ""bendy_lowerarm_02_l""
            },
            {
              ""BoneName"": ""bendy_upperarm_02_l""
            },
            {
              ""BoneName"": ""bendy_lowerarm_02_r""
            },
            {
              ""BoneName"": ""bendy_upperarm_02_r""
            },
            {
              ""BoneName"": ""bendy_calf_03_l""
            },
            {
              ""BoneName"": ""bendy_calf_03_r""
            },
            {
              ""BoneName"": ""bendy_upperarm_03_l""
            },
            {
              ""BoneName"": ""bendy_upperarm_03_r""
            },
            {
              ""BoneName"": ""teeth_u""
            },
            {
              ""BoneName"": ""teeth_d""
            }
          ],
          ""WeightOfPrioritization"": 120.0,
          ""BakePose"": null,
          ""BakePoseOverride"": null,
          ""SourceImportFilename"": """",
          ""bHasBeenSimplified"": true,
          ""bHasPerLODVertexColors"": false,
          ""bAllowCPUAccess"": false,
          ""bSupportUniformlyDistributedSampling"": false
        }
      ],
      ""bHasBeenSimplified"": true,
      ""PhysicsAsset"": {
        ""ObjectName"": ""PhysicsAsset'PH_CP3704_Coco'"",
        ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/PH_CP3704_Coco.0""
      },
      ""ShadowPhysicsAsset"": {
        ""ObjectName"": ""PhysicsAsset'PH_CP3704_Coco'"",
        ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/PH_CP3704_Coco.0""
      },
      ""SamplingInfo"": {
        ""BuiltData"": {
          ""WholeMeshBuiltData"": [
            {
              ""AreaWeightedTriangleSampler"": {
                ""Prob"": [],
                ""Alias"": [],
                ""TotalWeight"": 0.0
              }
            },
            {
              ""AreaWeightedTriangleSampler"": {
                ""Prob"": [],
                ""Alias"": [],
                ""TotalWeight"": 0.0
              }
            }
          ]
        }
      }
    },
    ""ImportedBounds"": {
      ""Origin"": {
        ""X"": 0.005241394,
        ""Y"": -4.4905186,
        ""Z"": 44.475777
      },
      ""BoxExtent"": {
        ""X"": 41.51355,
        ""Y"": 31.055258,
        ""Z"": 47.929314
      },
      ""SphereRadius"": 70.6047
    },
    ""Materials"": [
      {
        ""ObjectName"": ""MaterialInstanceConstant'MI_CP3704_Coco'"",
        ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Materials/MI_CP3704_Coco.0""
      }
    ],
    ""LODModels"": [
      {
        ""Sections"": [
          {
            ""MaterialIndex"": 0,
            ""BaseIndex"": 0,
            ""NumTriangles"": 20868,
            ""bRecomputeTangent"": false,
            ""RecomputeTangentsVertexMaskChannel"": ""Alpha"",
            ""bCastShadow"": true,
            ""bVisibleInRayTracing"": true,
            ""bLegacyClothingSection"": false,
            ""CorrespondClothSectionIndex"": -1,
            ""BaseVertexIndex"": 0,
            ""NumVertices"": 30337,
            ""MaxBoneInfluences"": 8,
            ""bUse16BitBoneIndex"": false,
            ""CorrespondClothAssetIndex"": -1,
            ""bDisabled"": false,
            ""GenerateUpToLodIndex"": -1,
            ""OriginalDataSectionIndex"": -1,
            ""ChunkedParentSectionIndex"": -1
          }
        ],
        ""NumVertices"": 30337,
        ""NumTexCoords"": 1,
        ""VertexBufferGPUSkin"": {
          ""NumTexCoords"": 0,
          ""MeshExtension"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""MeshOrigin"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""bUseFullPrecisionUVs"": true,
          ""bExtraBoneInfluences"": false
        }
      },
      {
        ""Sections"": [
          {
            ""MaterialIndex"": 0,
            ""BaseIndex"": 0,
            ""NumTriangles"": 12520,
            ""bRecomputeTangent"": false,
            ""RecomputeTangentsVertexMaskChannel"": ""Alpha"",
            ""bCastShadow"": true,
            ""bVisibleInRayTracing"": true,
            ""bLegacyClothingSection"": false,
            ""CorrespondClothSectionIndex"": -1,
            ""BaseVertexIndex"": 0,
            ""NumVertices"": 22491,
            ""MaxBoneInfluences"": 4,
            ""bUse16BitBoneIndex"": false,
            ""CorrespondClothAssetIndex"": -1,
            ""bDisabled"": false,
            ""GenerateUpToLodIndex"": -1,
            ""OriginalDataSectionIndex"": -1,
            ""ChunkedParentSectionIndex"": -1
          }
        ],
        ""NumVertices"": 22491,
        ""NumTexCoords"": 1,
        ""VertexBufferGPUSkin"": {
          ""NumTexCoords"": 0,
          ""MeshExtension"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""MeshOrigin"": {
            ""X"": 0.0,
            ""Y"": 0.0,
            ""Z"": 0.0
          },
          ""bUseFullPrecisionUVs"": true,
          ""bExtraBoneInfluences"": false
        }
      }
    ]
  }
]"
L7F0Ay8k,SM_CP3704_Coco_Shoes_L.uasset,PonPonTheBonBon,JSON,Thursday 13th of June 2024 12:22:47 PM CDT,"Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SM_CP3704_Coco_Shoes_L.uasset
FModel 4.4.3.6 QA
[
  {
    ""Type"": ""BodySetup"",
    ""Name"": ""BodySetup_1"",
    ""Outer"": ""SM_CP3704_Coco_Shoes_L"",
    ""Class"": ""UScriptClass'BodySetup'"",
    ""Properties"": {
      ""AggGeom"": {
        ""ConvexElems"": [
          {
            ""VertexData"": [
              {
                ""X"": 4.2104135,
                ""Y"": 4.6645865,
                ""Z"": -0.039586287
              },
              {
                ""X"": 4.2104135,
                ""Y"": -3.7895865,
                ""Z"": -0.039586216
              },
              {
                ""X"": 4.2104135,
                ""Y"": -3.7895858,
                ""Z"": 3.4145865
              },
              {
                ""X"": 4.2104135,
                ""Y"": 4.664586,
                ""Z"": 3.4145863
              },
              {
                ""X"": -4.2104125,
                ""Y"": -4.914588,
                ""Z"": -0.039587174
              },
              {
                ""X"": -4.2104125,
                ""Y"": 4.664586,
                ""Z"": -0.03958712
              },
              {
                ""X"": -4.2104125,
                ""Y"": 4.664586,
                ""Z"": 4.4145875
              },
              {
                ""X"": -4.2104125,
                ""Y"": -4.914587,
                ""Z"": 4.4145875
              },
              {
                ""X"": -1.6507773,
                ""Y"": 7.224222,
                ""Z"": 0.474223
              },
              {
                ""X"": 1.6507778,
                ""Y"": 7.224222,
                ""Z"": 0.47422278
              },
              {
                ""X"": 1.6507783,
                ""Y"": 7.224222,
                ""Z"": 2.6507766
              },
              {
                ""X"": -1.6507776,
                ""Y"": 7.224222,
                ""Z"": 2.6507773
              },
              {
                ""X"": 0.77577806,
                ""Y"": -7.224221,
                ""Z"": 0.099222235
              },
              {
                ""X"": -1.9007783,
                ""Y"": -7.224221,
                ""Z"": 0.09922153
              },
              {
                ""X"": -1.9007776,
                ""Y"": -7.224221,
                ""Z"": 3.5257761
              },
              {
                ""X"": 0.77577806,
                ""Y"": -7.224221,
                ""Z"": 3.5257769
              },
              {
                ""X"": -2.5360742,
                ""Y"": 3.786075,
                ""Z"": 6.0889254
              },
              {
                ""X"": 1.5360746,
                ""Y"": 3.7860742,
                ""Z"": 6.0889254
              },
              {
                ""X"": 1.5360751,
                ""Y"": -4.6610723,
                ""Z"": 6.0889254
              },
              {
                ""X"": -2.5360746,
                ""Y"": -4.661072,
                ""Z"": 6.0889254
              },
              {
                ""X"": -3.7886744,
                ""Y"": 5.0863247,
                ""Z"": -0.46132454
              },
              {
                ""X"": -3.788675,
                ""Y"": -5.336324,
                ""Z"": -0.46132454
              },
              {
                ""X"": -2.4613252,
                ""Y"": -6.6636753,
                ""Z"": -0.46132454
              },
              {
                ""X"": 1.3363249,
                ""Y"": -6.663675,
                ""Z"": -0.46132454
              },
              {
                ""X"": 3.788676,
                ""Y"": -4.211323,
                ""Z"": -0.46132454
              },
              {
                ""X"": 3.7886755,
                ""Y"": 5.086324,
                ""Z"": -0.46132454
              },
              {
                ""X"": 2.5863252,
                ""Y"": 6.288675,
                ""Z"": -0.46132454
              },
              {
                ""X"": -2.5863247,
                ""Y"": 6.288675,
                ""Z"": -0.46132454
              },
              {
                ""X"": 3.3125,
                ""Y"": 5.5625,
                ""Z"": 4.3125005
              },
              {
                ""X"": -3.8124995,
                ""Y"": 5.0625,
                ""Z"": 4.8125
              },
              {
                ""X"": 2.4375005,
                ""Y"": -5.562499,
                ""Z"": 5.1875005
              },
              {
                ""X"": -3.4999998,
                ""Y"": -5.625,
                ""Z"": 5.125
              }
            ],
            ""ElemBox"": {
              ""Min"": {
                ""X"": -4.2104125,
                ""Y"": -7.224221,
                ""Z"": -0.46132454
              },
              ""Max"": {
                ""X"": 4.2104135,
                ""Y"": 7.224222,
                ""Z"": 6.0889254
              },
              ""IsValid"": 1
            },
            ""Transform"": {
              ""Rotation"": {
                ""X"": 0.0,
                ""Y"": 0.0,
                ""Z"": 0.0,
                ""W"": 1.0,
                ""IsNormalized"": true,
                ""Size"": 1.0,
                ""SizeSquared"": 1.0
              },
              ""Translation"": {
                ""X"": 0.0,
                ""Y"": 0.0,
                ""Z"": 0.0
              },
              ""Scale3D"": {
                ""X"": 1.0,
                ""Y"": 1.0,
                ""Z"": 1.0
              }
            },
            ""RestOffset"": 0.0,
            ""Name"": ""None"",
            ""bContributeToMass"": true
          }
        ]
      },
      ""DefaultInstance"": {
        ""ObjectType"": ""ECC_WorldStatic"",
        ""CollisionProfileName"": ""BlockAll"",
        ""CollisionResponses"": {
          ""ResponseArray"": [
            {
              ""Channel"": ""TFBTrigger"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBPlayer"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBEnemy"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBCollectible"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBCrate"",
              ""Response"": ""ECR_Block""
            },
            {
              ""Channel"": ""TFBCombatDamagerRegion"",
              ""Response"": ""ECR_Block""
            }
          ]
        }
      }
    },
    ""BodySetupGuid"": ""7FED29894591EB550499E98F7C3CD89E"",
    ""CookedFormatData"": {
      ""PhysXPC"": {
        ""BulkDataFlags"": ""BULKDATA_SingleUse | BULKDATA_ForceInlinePayload"",
        ""ElementCount"": 24551,
        ""SizeOnDisk"": 24551,
        ""OffsetInFile"": ""0x1612F""
      }
    }
  },
  {
    ""Type"": ""NavCollision"",
    ""Name"": ""NavCollision_2"",
    ""Outer"": ""SM_CP3704_Coco_Shoes_L"",
    ""Class"": ""UScriptClass'NavCollision'"",
    ""CookedFormatData"": {
      ""NavCollision_X"": {
        ""BulkDataFlags"": ""BULKDATA_SingleUse | BULKDATA_ForceInlinePayload"",
        ""ElementCount"": 1897,
        ""SizeOnDisk"": 1897,
        ""OffsetInFile"": ""0x1C15E""
      }
    }
  },
  {
    ""Type"": ""StaticMesh"",
    ""Name"": ""SM_CP3704_Coco_Shoes_L"",
    ""Class"": ""UScriptClass'StaticMesh'"",
    ""Properties"": {
      ""StaticMaterials"": [
        {
          ""MaterialInterface"": {
            ""ObjectName"": ""MaterialInstanceConstant'MI_CP3704_Coco'"",
            ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Materials/MI_CP3704_Coco.0""
          },
          ""MaterialSlotName"": ""Coco"",
          ""ImportedMaterialSlotName"": ""Coco"",
          ""UVChannelData"": {
            ""bInitialized"": true,
            ""bOverrideDensities"": false,
            ""LocalUVDensities"": 115.83951,
            ""LocalUVDensities"": 23.794725,
            ""LocalUVDensities"": 0.0,
            ""LocalUVDensities"": 0.0
          }
        }
      ],
      ""LightmapUVDensity"": 23.794725,
      ""LightMapResolution"": 64,
      ""LightMapCoordinateIndex"": 1,
      ""ExtendedBounds"": {
        ""Origin"": {
          ""X"": 0.0,
          ""Y"": 0.0,
          ""Z"": 2.8138006
        },
        ""BoxExtent"": {
          ""X"": 4.1104136,
          ""Y"": 7.1242223,
          ""Z"": 3.1751251
        },
        ""SphereRadius"": 7.5951934
      }
    },
    ""BodySetup"": {
      ""ObjectName"": ""BodySetup'SM_CP3704_Coco_Shoes_L:BodySetup_1'"",
      ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SM_CP3704_Coco_Shoes_L.0""
    },
    ""NavCollision"": {
      ""ObjectName"": ""NavCollision'SM_CP3704_Coco_Shoes_L:NavCollision_2'"",
      ""ObjectPath"": ""Lava/Plugins/Characters/Player/CP3704_Coco/Content/Mesh/SM_CP3704_Coco_Shoes_L.1""
    },
    ""LightingGuid"": ""C6051AB7-4100639B-13811E8F-E8BECA51"",
    ""RenderData"": {
      ""LODs"": [
        {
          ""Sections"": [
            {
              ""MaterialIndex"": 0,
              ""FirstIndex"": 0,
              ""NumTriangles"": 808,
              ""MinVertexIndex"": 0,
              ""MaxVertexIndex"": 491,
              ""bEnableCollision"": true,
              ""bCastShadow"": true,
              ""bForceOpaque"": false,
              ""bVisibleInRayTracing"": true
            }
          ],
          ""MaxDeviation"": 0.0,
          ""PositionVertexBuffer"": {
            ""Stride"": 12,
            ""NumVertices"": 492
          },
          ""VertexBuffer"": {
            ""NumTexCoords"": 2,
            ""NumVertices"": 492,
            ""Strides"": -1,
            ""UseHighPrecisionTangentBasis"": false,
            ""UseFullPrecisionUVs"": false
          },
          ""ColorVertexBuffer"": {
            ""Stride"": 0,
            ""NumVertices"": 0
          }
        }
      ],
      ""Bounds"": {
        ""Origin"": {
          ""X"": 0.0,
          ""Y"": 0.0,
          ""Z"": 2.8138006
        },
        ""BoxExtent"": {
          ""X"": 4.1104136,
          ""Y"": 7.1242223,
          ""Z"": 3.1751251
        },
        ""SphereRadius"": 7.5951934
      },
      ""bLODsShareStaticLighting"": true,
      ""ScreenSize"": [
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0
      ]
    }
  }
]"
SGQUFE6X,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Garoam,Python,Thursday 13th of June 2024 12:22:28 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
NH06HVdZ,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,atakan1983,Python,Thursday 13th of June 2024 12:16:03 PM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Steam gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
Fy6ifSZD,ü§ë G2A.com Free Gift Card Guide Jun 2024 FIX ü§ë,jusst2k4,GetText,Thursday 13th of June 2024 12:14:00 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_524569.pdf

Working as of:
13 June 2024"
pdfFb1Yt,Untitled,dllbridge,C,Thursday 13th of June 2024 12:05:32 PM CDT,"

#include <stdio.h>



int    ikujlkjlkjlj;                               //  –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –≥—Ä—É–ø–ø –∏–∑ 7 –∫–Ω–∏–≥     

int foo(int, float );

///////////////////////////////////////////
int main()                               //  
{
	
	
	
	printf(""foo = %d\n"", foo(100, 1.999) );
}




///////////////////////////////////////////
int foo(int n1, float f2)                //
{
	
return n1 + f2;	
}












/*

#include <stdio.h>



int     nx,
        ng,
        no;                              //  –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –≥—Ä—É–ø–ø –∏–∑ 7 –∫–Ω–∏–≥     



///////////////////////////////////////////
int main()                               //  
{
	
	
	
	printf(""Enter count of books: "");  scanf(""%d"", &nx);
	
	printf(""nx = %d\n"", nx);
	
	ng = nx / 7;	
	no = nx % 7;

	printf(""ng = %d\n"", ng);
	printf(""no = %d\n"", no);			
}

*/

"
Ej819GYH,CC:NumberWorks,super_koder,Lua,Thursday 13th of June 2024 12:03:50 PM CDT,"-- CC-NumberWorks install script
local headers = {[""User-Agent""] = ""ComputerCraft"", [""Content-Type""] = ""text/plain""}

local interpURL = ""https://raw.githubusercontent.com/bigsticc/CC-NumberWorks/main/interpreter.lua""
local libraryURL = ""https://raw.githubusercontent.com/bigsticc/CC-NumberWorks/main/primitives.lua""

local interpConn = http.get(interpURL, headers)
local libraryConn = http.get(libraryURL, headers)

local interp = interpConn.readAll()
local library = libraryConn.readAll()

local file1 = fs.open(""startup"", ""w"")
file1.write(interp)
file1.close()

local file2 = fs.open(""primitives"", ""w"")
file1.write(library)
file1.close()"
ihce0705,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,notgoodatscripting,Python,Thursday 13th of June 2024 12:02:32 PM CDT,"G2A.com complimentary gift card & games guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
NGSx5f4L,Untitled,Josif_tepe,C++,Thursday 13th of June 2024 12:00:58 PM CDT,"#include <bits/stdc++.h>
using namespace std;
const int INF = 2e9;

int add(set<pair<int, int>> & st, int x) {
  auto it = st.insert(make_pair(x, 2)).first;
  int res = -1;
  if(prev(it)->second == 1 and next(it)->second == 3) {
    res = next(it)->first;
    if(next(next(it))->first == next(it)->first + 1) {
      st.erase(next(next(it)));
      st.erase(next(it));
    }
    else {
      st.insert(next(next(it)), make_pair(next(it)->first + 1, 3));
      st.erase(next(it));
    }
    st.erase(it);
    return res;
  }
  if(prev(it)->second == 3 and next(it)->second == 1) {
      res = x;
      st.insert(it, make_pair(res, 1));
      if(next(it)->first == x + 1) {
        st.erase(next(it));
      }
      else {
        st.insert(next(it), make_pair(x + 1, 3));
      }
      st.erase(it);
      return res;
  }
  
}
void remove(set<pair<int, int>> &st, int x) {
  auto it = st.lower_bound(make_pair(x, 2));
  it = prev(it);
  if(it->first == x) {
    if(next(it)->first == x + 1) {
      st.erase(next(it));
      st.erase(it);
      return;
    }
    else {
      st.insert(next(it), make_pair(x + 1, 1));
      st.erase(it);
      return;
    }
  }
  else {
    st.insert(next(it), make_pair(x + 1 , 1));
    st.insert(next(it), make_pair(x , 3));
    
  }
}
int main()
{
  ios_base::sync_with_stdio(false);
  set<pair<int, int>> st;
  int n;
  cin >> n;
  
  st.insert(make_pair(0, 3));
  st.insert(make_pair(INF, 1));

  for(int i = 0; i < n; i++) {
    int t, code;
    cin >> t >> code;
    
    if(t == 1) {
        int res = add(st, code);
        cout << res << ""\n"";
    }
    else {
      remove(st, code);
    }
  }
  
    return 0;
}
 "
Jm0x892R,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,bgill55,Python,Thursday 13th of June 2024 11:56:33 AM CDT,"G2A.com free gift card & games guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
r7w0CaCr,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FreeRobux12345,Python,Thursday 13th of June 2024 11:50:34 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
3zFXMkgS,ü§ëG2A.com Free Gift Card Guide June 2024 NEWü§ë,BitcoinScript2020,GetText,Thursday 13th of June 2024 11:46:34 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view


Working as of;
13 June 2024"
sBx8fhy1,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,coderpradip,Python,Thursday 13th of June 2024 11:44:34 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
VWPg2VRb,Spiral of Numbers,CodingComputing,Python,Thursday 13th of June 2024 11:41:33 AM CDT,"# *Spiral of Numbers Pattern* by @CodingComputing

rows, cols = 5, 5  # parameters

# Initialization
size = rows*cols
matrix = [[None for _ in range(cols)] for _ in range(rows)]

count = 0  # How many numbers are allocated?

# Specify movement directions in clockwise order
dirs = [ (1,0),   (0,1),   (-1,0),  (0, -1)]
#       0:RIGHT  1:DOWN   2:LEFT    3.UP      (in clockwise order)
 
# Initialize position and direction
x_next, y_next = 0, 0  # Start at top-left of matrix
curr_dir = 0  # Start with moving rightwards
 
# Iterate n over decreasing numbers
for n in range(size, 0, -1):
    x, y = x_next, y_next  # Update position
    matrix[y][x] = f""{n:02}"" # Fill in the number after converting to zero padded str
    x_next = x + dirs[curr_dir][0]  # Propose new x based on current direction
    y_next = y + dirs[curr_dir][1]  # Propose new y based on current direction
    # IF there is a problem with the proposed update, cycle through direction
    if not (0<=x_next<rows and 0<=y_next<cols and not matrix[y_next][x_next]):
        curr_dir = (curr_dir + 1)%4  # Turn 90 degrees clockwise
        x_next = x + dirs[curr_dir][0] # New x based on corrected direction
        y_next = y + dirs[curr_dir][1] # New y based on corrected direction
 
# Join matrix into a single string and print it
print(""\n"".join(["" "".join(matrix[row]) for row in range(rows)]))"
pfVhgcWd,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,mikyser,Python,Thursday 13th of June 2024 11:38:35 AM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Steam gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
fAUEnic0,CC OS 2 INSTALL DISK - install.lua2,Leon_Lejon,Lua,Thursday 13th of June 2024 11:37:47 AM CDT,"term.setBackgroundColor(colors.cyan)
term.setTextColor(colors.white)
term.clear()
term.setCursorPos(1,1)
term.clear()
term.setCursorPos(1,1)
drive = peripheral.find(""drive"")
drive.ejectDisk()
print(""Type 'Do as i say.' to install CC OS 2! Otherwise type anything else."")
alt = read()
while true do
    if  alt == ""Do as i say."" then
    shell.run(""os/install"") 
    else
    print(""Install aborted."")
    sleep(5)
    os.reboot()
    end
end"
MPtihrzM,Untitled,renatoknot,JavaScript,Thursday 13th of June 2024 11:31:01 AM CDT,"var r = $("".multipleCarrosel .container"");
var carrosselSm = r.data(""sm""),
    carrosselMd = r.data(""md""),
    carrosselLg = r.data(""lg""),
    dotsDesktop = r.data(""dotsDesktop""),
    dotsMobile = r.data(""dotsMobile""),
    arrowDesktop = r.data(""arrowDesktop""),
    arrowMobile = r.data(""arrowMobile""),
    infinite = r.data(""infinite""),
    speed = r.data(""speed""),
    autoplay = r.data(""autoplay""),
    pauseOnHover = r.data(""pauseOnHover""),
    autoplaySpeed = r.data(""autoplaySpeed""),
    centerMode = r.data(""centerMode""),
    centerPadding = r.data(""centerPadding"");

const carouselTabKenner = () => {

    function slideTabsShelf(id) {
        $(id).slick({
            dots: dotsDesktop,
            arrows: arrowDesktop,
            slidesToShow: carrosselLg,
            slidesToScroll: carrosselLg,
            autoplay: autoplay,
            responsive: [
                {
                    breakpoint: 1280,
                    settings: {
                        dots: dotsDesktop,
                        autoplay: autoplay,
                        slidesToShow: carrosselMd,
                        slidesToScroll: carrosselMd
                    }
                },
                {
                    breakpoint: 720,
                    settings: {
                        dots: dotsMobile,
                        centerMode: centerMode,
                        centerPadding: centerPadding,
                        autoplay: autoplay,
                        slidesToShow: carrosselSm,
                        slidesToScroll: carrosselSm,
                        arrows: arrowMobile
                    }
                }
            ]
        });
    }

    function abaClicks() {
        $(""body"").on(""click"", "".abas_vitrine a"", function (e) {
            e.preventDefault();
            var targetClass = $(this).attr(""class"");
            $("".carrossel_aba"").removeClass(""active"");
            $("".abas_vitrine a"").removeClass(""active"");
            $(""."" + targetClass).addClass(""active"");
            var targetId = ""."" + targetClass + "" .shelf-default > ul"";
            $(targetId).slick('unslick');
            slideTabsShelf(targetId);
        });
    }

    function titleTabs() {
        $("".abas_vitrine a"").each(function() {
            var targetClass = $(this).attr(""class"");
            var title = $(""."" + targetClass).find("".tituloCarrossel"").html();
            $(this).html(title);
        });
    }

    $(document).ready(function() {
        slideTabsShelf(`.carrossel_aba_1 .shelf-default > ul`);
        abaClicks();
        titleTabs();
    });

};

carouselTabKenner();
"
bYYqZc7E,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,Elii,Python,Thursday 13th of June 2024 11:26:37 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
4LZ84Pw1,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,guywithabigheart,Python,Thursday 13th of June 2024 11:20:37 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Xbox gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
aNgWyLqR,Untitled,olexander_dan,TypeScript,Thursday 13th of June 2024 11:20:11 AM CDT,"const MockStorage = () => {

  const anno = useAnnotator<RecogitoW3CTextAnnotator>();

  const [count, setCount] = useState(0);

  useEffect(() => {
    if (!anno) return;

    const handleCreateAnnotation = (annotation: W3CTextAnnotation) => console.log('create', annotation);
    anno.on('createAnnotation', handleCreateAnnotation);

    const handleDeleteAnnotation = (annotation: W3CTextAnnotation) => console.log('delete', annotation);
    anno.on('deleteAnnotation', handleDeleteAnnotation);

    const handleSelectionChanged = (annotations: W3CTextAnnotation[]) => console.log('selection changed', annotations);
    anno.on('selectionChanged', handleSelectionChanged);

    const handleUpdateAnnotation = (annotation: W3CTextAnnotation, previous: W3CTextAnnotation) => console.log('update', annotation, previous);
    anno.on('updateAnnotation', handleUpdateAnnotation);

    return () => {
      anno.off('createAnnotation', handleCreateAnnotation);
      anno.off('deleteAnnotation', handleDeleteAnnotation);
      anno.off('selectionChanged', handleSelectionChanged);
      anno.off('updateAnnotation', handleUpdateAnnotation);
    };
  }, [anno, count]);

  return <>
    <button onClick={() => setCount(c => c + 1)}>
      Trigger {count}
    </button>
  </>;

};"
xRKUd3Rk,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,x3kiN,Python,Thursday 13th of June 2024 11:08:37 AM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Steam gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
SX3qXZyY,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FeasModz514,Python,Thursday 13th of June 2024 11:02:38 AM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Steam gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
tG9tzuBV,"""RTC Synchronization"" rev_24",pleasedontcode,Arduino,Thursday 13th of June 2024 10:56:59 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""RTC Synchronization""
	- Source Code NOT compiled for: Arduino Nano ESP32
	- Source Code created on: 2024-06-13 15:52:27

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* initialize gsm */
/****** SYSTEM REQUIREMENT 2 *****/
	/* align one time per day the clock from gsm to RTC */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <SoftwareSerial.h> //https://github.com/plerup/espsoftwareserial
#include <Wire.h>
#include <Sim800L.h>    //https://github.com/vittorioexp/Sim800L-Arduino-Library-revised
#include <DS3231.h>    //https://github.com/NorthernWidget/DS3231

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void updateOutputs(void);
void inputDateFromSerial(void);
void syncClockFromGSM(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t gsm_SIM800L_RING_PIN_D3        = 3;

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t gsm_SIM800L_RST_PIN_D2        = 2;
const uint8_t gsm_SIM800L_DTR_PIN_D4        = 4;

/***** DEFINITION OF Software Serial *****/
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_TX_A0        = A0;
const uint8_t gsm_SIM800L_Serial_PIN_SERIAL_RX_A1        = A1;
EspSoftwareSerial::UART gsm_SIM800L_Serial;

/***** DEFINITION OF I2C PINS *****/
const uint8_t clock_DS3231_I2C_PIN_SDA_A4        = A4;
const uint8_t clock_DS3231_I2C_PIN_SCL_A5        = A5;
const uint8_t clock_DS3231_I2C_SLAVE_ADDRESS        = 104;

/***** DEFINITION OF OUTPUT RAW VARIABLES *****/
/***** used to store raw data *****/
bool    gsm_SIM800L_RST_PIN_D2_rawData        = 0;
bool    gsm_SIM800L_DTR_PIN_D4_rawData        = 0;

/***** DEFINITION OF OUTPUT PHYSICAL VARIABLES *****/
/***** used to store data after characteristic curve transformation *****/
float    gsm_SIM800L_RST_PIN_D2_phyData        = 0.0;
float    gsm_SIM800L_DTR_PIN_D4_phyData        = 0.0;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
Sim800L GSM(gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_RING_PIN_D3); // Initialize Sim800L object
DS3231 myRTC; // Initialize DS3231 object

// Variables for DS3231
byte year, month, date, dow, hour, minute, second;
bool century = false, h12Flag, pmFlag;
unsigned long lastSyncTime = 0; // Variable to store the last sync time
const unsigned long syncInterval = 86400000; // 24 hours in milliseconds

void setup(void)
{
    // put your setup code here, to run once:

    pinMode(gsm_SIM800L_RING_PIN_D3,    INPUT_PULLUP);

    pinMode(gsm_SIM800L_RST_PIN_D2,     OUTPUT);
    pinMode(gsm_SIM800L_DTR_PIN_D4,     OUTPUT);

    gsm_SIM800L_Serial.begin(9600, SWSERIAL_8N1, gsm_SIM800L_Serial_PIN_SERIAL_RX_A1, gsm_SIM800L_Serial_PIN_SERIAL_TX_A0, false);

    /* initialize gsm */
    GSM.begin(4800); // Initialize GSM module
    GSM.updateRtc(+1); // Update RTC with UTC offset

    // Initialize I2C communication for DS3231
    Wire.begin(clock_DS3231_I2C_PIN_SDA_A4, clock_DS3231_I2C_PIN_SCL_A5);

    // Start the serial port for debugging
    Serial.begin(57600);

    // Request the time correction on the Serial
    delay(4000);
    Serial.println(""Format YYMMDDwhhmmssx"");
    Serial.println(""Where YY = Year (ex. 20 for 2020)"");
    Serial.println(""      MM = Month (ex. 04 for April)"");
    Serial.println(""      DD = Day of month (ex. 09 for 9th)"");
    Serial.println(""      w  = Day of week from 1 to 7, 1 = Sunday (ex. 5 for Thursday)"");
    Serial.println(""      hh = hours in 24h format (ex. 09 for 9AM or 21 for 9PM)"");
    Serial.println(""      mm = minutes (ex. 02)"");
    Serial.println(""      ss = seconds (ex. 42)"");
    Serial.println(""Example for input : 2004095090242x"");
    Serial.println(""-----------------------------------------------------------------------------"");
    Serial.println(""Please enter the current time to set on DS3231 ended by 'x':"");
}

void loop(void)
{
    // put your main code here, to run repeatedly:

    updateOutputs(); // Refresh output data

    // If something is coming in on the serial line, it's
    // a time correction so set the clock accordingly.
    if (Serial.available()) {
        inputDateFromSerial();

        myRTC.setClockMode(false);  // set to 24h

        myRTC.setYear(year);
        myRTC.setMonth(month);
        myRTC.setDate(date);
        myRTC.setDoW(dow);
        myRTC.setHour(hour);
        myRTC.setMinute(minute);
        myRTC.setSecond(second);

        // Give time at next five seconds
        for (uint8_t i = 0; i < 5; i++){
            delay(1000);
            Serial.print(myRTC.getYear(), DEC);
            Serial.print(""-"");
            Serial.print(myRTC.getMonth(century), DEC);
            Serial.print(""-"");
            Serial.print(myRTC.getDate(), DEC);
            Serial.print("" "");
            Serial.print(myRTC.getHour(h12Flag, pmFlag), DEC); //24-hr
            Serial.print("":"");
            Serial.print(myRTC.getMinute(), DEC);
            Serial.print("":"");
            Serial.println(myRTC.getSecond(), DEC);
        }

        // Notify that we are ready for the next input
        Serial.println(""Please enter the current time to set on DS3231 ended by 'x':"");
    }

    /* align one time per day the clock from gsm to RTC */
    if (millis() - lastSyncTime >= syncInterval) {
        syncClockFromGSM();
        lastSyncTime = millis();
    }

    delay(1000);
}

void updateOutputs()
{
    digitalWrite(gsm_SIM800L_RST_PIN_D2, gsm_SIM800L_RST_PIN_D2_rawData);
    digitalWrite(gsm_SIM800L_DTR_PIN_D4, gsm_SIM800L_DTR_PIN_D4_rawData);
}

void inputDateFromSerial() {
    // Call this if you notice something coming in on
    // the serial port. The stuff coming in should be in
    // the order YYMMDDwHHMMSS, with an 'x' at the end.
    boolean isStrComplete = false;
    char inputChar;
    byte temp1, temp2;
    char inputStr[20];

    uint8_t currentPos = 0;
    while (!isStrComplete) {
        if (Serial.available()) {
            inputChar = Serial.read();
            inputStr[currentPos] = inputChar;
            currentPos += 1;

            // Check if string complete (end with ""x"")
            if (inputChar == 'x') {
                isStrComplete = true;
            }
        }
    }
    Serial.println(inputStr);

    // Find the end of char ""x""
    int posX = -1;
    for(uint8_t i = 0; i < 20; i++) {
        if(inputStr[i] == 'x') {
            posX = i;
            break;
        }
    }

    // Consider 0 character in ASCII
    uint8_t zeroAscii = '0';

    // Read Year first
    temp1 = (byte)inputStr[posX - 13] - zeroAscii;
    temp2 = (byte)inputStr[posX - 12] - zeroAscii;
    year = temp1 * 10 + temp2;

    // now month
    temp1 = (byte)inputStr[posX - 11] - zeroAscii;
    temp2 = (byte)inputStr[posX - 10] - zeroAscii;
    month = temp1 * 10 + temp2;

    // now date
    temp1 = (byte)inputStr[posX - 9] - zeroAscii;
    temp2 = (byte)inputStr[posX - 8] - zeroAscii;
    date = temp1 * 10 + temp2;

    // now Day of Week
    dow = (byte)inputStr[posX - 7] - zeroAscii;

    // now Hour
    temp1 = (byte)inputStr[posX - 6] - zeroAscii;
    temp2 = (byte)inputStr[posX - 5] - zeroAscii;
    hour = temp1 * 10 + temp2;

    // now Minute
    temp1 = (byte)inputStr[posX - 4] - zeroAscii;
    temp2 = (byte)inputStr[posX - 3] - zeroAscii;
    minute = temp1 * 10 + temp2;

    // now Second
    temp1 = (byte)inputStr[posX - 2] - zeroAscii;
    temp2 = (byte)inputStr[posX - 1] - zeroAscii;
    second = temp1 * 10 + temp2;
}

void syncClockFromGSM() {
    // Get the current time from the GSM module
    GSM.RTCtime(&date, &month, &year, &hour, &minute, &second);

    // Set the DS3231 RTC with the GSM time
    myRTC.setClockMode(false);  // set to 24h
    myRTC.setYear(year);
    myRTC.setMonth(month);
    myRTC.setDate(date);
    myRTC.setDoW(dow);
    myRTC.setHour(hour);
    myRTC.setMinute(minute);
    myRTC.setSecond(second);

    Serial.println(""RTC synchronized with GSM time."");
}
"
kTYvPjy0,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,kiraezwhethe,Python,Thursday 13th of June 2024 10:56:37 AM CDT,"G2A.com complimentary gift card & gaming guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most up to date version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
Rg1BGYjb,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,ColtM4A2,Python,Thursday 13th of June 2024 10:50:33 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
TimcGkbF,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,thepplayz,Python,Thursday 13th of June 2024 10:38:32 AM CDT,"G2A.com free voucher & games guide.
Any item for free on G2A.com including Xbox gift cards & all else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
SwU4ms3C,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,sirmikey,Python,Thursday 13th of June 2024 10:32:24 AM CDT,"G2A.com complimentary voucher & games guide.
Any item for free on G2A.com including Xbox gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
RVPLHJz1,Untitled,Josif_tepe,C++,Thursday 13th of June 2024 10:31:53 AM CDT,"#include <iostream>
#include <queue>
using namespace std;
int main()
{
  int T;
  cin >> T;

  int di[] = {-1, 1, 0, 0};
  int dj[] = {0, 0, -1, 1};

  while(T--) {
    int n, m;
    cin >> n >> m;
    char mat[n][m];
    int si, sj, ei, ej;
    for(int i = 0; i < n; i++) {
      for(int j = 0; j < m; j++) {
        cin >> mat[i][j];

        if(mat[i][j] == 'S') {
            si = i;
            sj = j;
        }
        if(mat[i][j] == 'E') {
          ei = i;
          ej = j;
        }
      }
    }

    queue<int> q;
    q.push(ei);
    q.push(ej);
    q.push(0);
    bool visited[n][m];
    for(int i = 0; i < n; i++) {
      for(int j = 0; j < m; j++) {
        visited[i][j] = false;
      }
    }
    int distanca_od_S = -1;
    visited[ei][ej] = true;
    while(!q.empty()) {
      int ci = q.front(); 
      q.pop();
      int cj = q.front();
      q.pop();
      int cekor = q.front();
      q.pop();

      if(ci == si and cj == sj) {
        distanca_od_S = cekor; 
        while(!q.empty()) {
          q.pop();
        }
        break;
      }
      for(int k = 0; k < 4; k++) {
        int ti = ci + di[k];
        int tj = cj + dj[k];
        if(ti >= 0 and ti < n and tj >= 0 and tj < m and !visited[ti][tj] and mat[ti][tj] != 'T') {
          q.push(ti);
          q.push(tj);
          q.push(cekor + 1);
          visited[ti][tj] = true;
        }
      }

    }
    for(int i = 0; i < n; i++) {
      for(int j = 0; j < m; j++) {
        visited[i][j] = false;
      }
    }
    visited[ei][ej] = true;
    q.push(ei);
    q.push(ej);
    q.push(0);
    int health_units = 100;
    while(!q.empty()) {
      int ci = q.front();
      q.pop();
      int cj = q.front();
      q.pop();
      int cekor = q.front();
      q.pop();

      if(isdigit(mat[ci][cj])) {
        if(cekor <= distanca_od_S) {
            health_units -= (mat[ci][cj] - '0');
        }
      }
      for(int k = 0; k < 4; k++) {
        int ti = ci + di[k];
        int tj = cj + dj[k];
        if(ti >= 0 and ti < n and tj >= 0 and tj < m and !visited[ti][tj] and mat[ti][tj] != 'T') {
          q.push(ti);
          q.push(tj);
          q.push(cekor + 1);
          visited[ti][tj] = true;
        }
      }
    }
    if(health_units < 0) {
      health_units = 0;
    }
    cout << health_units << endl;

  }
    return 0;
}
 "
bPQm8A1e,Algoverse_adesh_17,kucheasysa,Python,Thursday 13th of June 2024 10:22:33 AM CDT,"class Solution:
    def sortVowels(self, s: str) -> str:
        Vowel=[""A"",""E"",""I"",""O"",""U"",""a"",""e"",""i"",""o"",""u""]
        a=[]
        c=0
        for i in s:
            if i in Vowel:
                a.append(i)
            else:
                continue
        a.sort()
        b=[0]*len(s)
        for i in range(len(s)):
            if s[i] in Vowel:
                b[i]=a[c]
                c+=1 
            else:
                b[i]=s[i]
                continue
        return """".join(b)
        "
75XNGFCs,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,x3kiN,Python,Thursday 13th of June 2024 10:14:16 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Xbox gift cards & everything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
11th of June 2024

"
udDGwrAz,Nft script,Thoughtcoder411,Python,Thursday 13th of June 2024 10:10:11 AM CDT,"import os
import sys
import json
import random
import argparse
import getpass
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw, ImageFont
from tqdm import tqdm

# Check for required packages
required_packages = ['matplotlib', 'PIL', 'tqdm']
missing_packages = []

for package in required_packages:
    try:
        __import__(package)
    except ImportError:
        missing_packages.append(package)

if missing_packages:
    print(f""Missing packages: {', '.join(missing_packages)}. Please install them using pip:"")
    print(f""pip install {' '.join(missing_packages)}"")
    sys.exit(1)

# Function to generate a random color
def random_color():
    return (random.random(), random.random(), random.random())

# Function to generate random shapes with patterns and materials within sections
def generate_shapes(num_shapes, num_layers, materials, sections):
    shapes = []
    for section in sections:
        x_min, x_max, y_min, y_max = section
        for _ in range(num_shapes):
            for _ in range(num_layers):
                shape_type = random.choice(['circle', 'square', 'triangle'])
                size = random.uniform(0.05, 0.3)
                x = random.uniform(x_min, x_max)
                y = random.uniform(y_min, y_max)
                color = random_color()
                pattern = random.choice(['none', 'splash', 'splatter', 'dripping'])
                material = random.choice(materials)
                orientation = random.uniform(0, 360)  # Adding orientation for variation
                shapes.append((shape_type, x, y, size, color, pattern, material, orientation))
    return shapes

# Function to plot shapes within sections
def plot_shapes(shapes, filename, dpi=300, background_color=(1, 1, 1)):
    fig, ax = plt.subplots()
    fig.patch.set_facecolor(background_color)
    for shape in shapes:
        shape_type, x, y, size, color, pattern, material, orientation = shape
        if shape_type == 'circle':
            circle = plt.Circle((x, y), size/2, color=color, label=material)
            ax.add_artist(circle)
        elif shape_type == 'square':
            square = plt.Rectangle((x-size/2, y-size/2), size, size, color=color, label=material, angle=orientation)
            ax.add_artist(square)
        elif shape_type == 'triangle':
            triangle = plt.Polygon([(x, y), (x+size/2, y-size), (x-size/2, y-size)], color=color, label=material)
            t = plt.gca().transData
            coords = [(x, y), (x+size/2, y-size), (x-size/2, y-size)]
            coords_rotated = [(coord[0]*np.cos(np.radians(orientation)) - coord[1]*np.sin(np.radians(orientation)),
                               coord[0]*np.sin(np.radians(orientation)) + coord[1]*np.cos(np.radians(orientation))) for coord in coords]
            triangle = plt.Polygon(coords_rotated, color=color, label=material)
            ax.add_artist(triangle)
        if pattern == 'splash':
            for _ in range(5):
                splash_x = x + random.uniform(-size, size)
                splash_y = y + random.uniform(-size, size)
                splash_size = random.uniform(0.01, size/2)
                splash = plt.Circle((splash_x, splash_y), splash_size, color=color, alpha=0.5)
                ax.add_artist(splash)
        elif pattern == 'splatter':
            for _ in range(10):
                splatter_x = x + random.uniform(-size, size)
                splatter_y = y + random.uniform(-size, size)
                splatter_size = random.uniform(0.01, size/3)
                splatter = plt.Circle((splatter_x, splatter_y), splatter_size, color=color, alpha=0.5)
                ax.add_artist(splatter)
        elif pattern == 'dripping':
            for _ in range(3):
                drip_x = x + random.uniform(-size/2, size/2)
                drip_y = y - size/2
                drip_length = random.uniform(size/2, size)
                drip = plt.Line2D([drip_x, drip_x], [drip_y, drip_y - drip_length], color=color, linewidth=2)
                ax.add_artist(drip)
    ax.set_xlim(0, 1)
    ax.set_ylim(0, 1)
    ax.set_aspect('equal')
    plt.axis('off')
    plt.savefig(filename, dpi=dpi)
    plt.close()

# Function to embed metadata into image
def embed_metadata(image_path, metadata):
    with Image.open(image_path) as img:
        draw = ImageDraw.Draw(img)
        metadata_text = json.dumps(metadata, indent=4)
        font = ImageFont.load_default()
        text_x, text_y = 10, img.height - 10 - (len(metadata_text.split('\n')) * 10)
        draw.text((text_x, text_y), metadata_text, (255, 255, 255), font=font)
        img.save(image_path)

# Function to generate metadata
def generate_metadata(image_id, shapes, collection_desc, output_dir, collection_name, unique_signature, attributes):
    metadata = {
        ""name"": f""{collection_name} - NFT Image {image_id}"",
        ""description"": collection_desc,
        ""image"": f""{output_dir}/nft_image_{image_id}.png"",
        ""attributes"": [],
        ""unique_signature"": unique_signature,
        ""id"": image_id
    }
    for shape in shapes:
        shape_type, x, y, size, color, pattern, material, orientation = shape
        metadata[""attributes""].append({
            ""trait_type"": ""Shape"",
            ""value"": shape_type
        })
        metadata[""attributes""].append({
            ""trait_type"": ""Position"",
            ""value"": {""x"": x, ""y"": y}
        })
        metadata[""attributes""].append({
            ""trait_type"": ""Size"",
            ""value"": size
        })
        metadata[""attributes""].append({
            ""trait_type"": ""Color"",
            ""value"": {""r"": color[0], ""g"": color[1], ""b"": color[2]}
        })
        metadata[""attributes""].append({
            ""trait_type"": ""Pattern"",
            ""value"": pattern
        })
        metadata[""attributes""].append({
            ""trait_type"": ""Material"",
            ""value"": material
        })
        metadata[""attributes""].append({
            ""trait_type"": ""Orientation"",
            ""value"": orientation
        })
    # Add custom attributes
    metadata[""attributes""].extend(attributes)
    return metadata

# User registration and login system
def register_user():
    users = {}
    if os.path.exists(""users.json""):
        with open(""users.json"", ""r"") as f:
            users = json.load(f)

    username = input(""Enter a username to register: "")
    if username in users:
        print(""Username already exists. Please try again."")
        sys.exit(1)
    
    password = getpass.getpass(""Enter a password: "")
    users[username] = password

    with open(""users.json"", ""w"") as f:
        json.dump(users, f)

    print(""User registered successfully. Please log in to continue."")
    sys.exit(0)

def login_user():
    users = {}
    if os.path.exists(""users.json""):
        with open(""users.json"", ""r"") as f:
            users = json.load(f)
    else:
        print(""No users registered. Please register first."")
        sys.exit(1)

    username = input(""Enter your username: "")
    if username not in users:
        print(""Username not found. Please register first."")
        sys.exit(1)
    
    password = getpass.getpass(""Enter your password: "")
    if users[username] != password:
        print(""Incorrect password. Please try again."")
        sys.exit(1)

    print(""Login successful."")
    return username

# Function to generate sections based on the number of sections specified by the user
def generate_sections(num_sections):
    rows = int(np.ceil(np.sqrt(num_sections)))
    cols = rows
    section_width = 1.0 / cols
    section_height = 1.0 / rows
    sections = []
    for i in range(rows):
        for j in range(cols):
            if len(sections) < num_sections:
                x_min = j * section_width
                x_max = x_min + section_width
                y_min = i * section_height
                y_max = y_min + section_height
                sections.append((x_min, x_max, y_min, y_max))
    return sections

# Function to ask user for NFT details interactively
def get_nft_details():
    num_nfts = int(input(""How many NFTs do you want to create? ""))
    collection_name = input(""Enter the name of the NFT collection: "")
    collection_desc = input(""Enter the description of the NFT collection: "")
    unique_signature = input(""Enter a unique signature for the NFT collection: "")
    image_quality = input(""Enter the image quality in DPI (default: 300): "")
    image_quality = int(image_quality) if image_quality else 300
    num_layers = input(""Enter the number of layers for each NFT (default: 1): "")
    num_layers = int(num_layers) if num_layers else 1
    background_color_input = input(""Enter the background color (r,g,b) (default: 1,1,1): "")
    if background_color_input:
        background_color = tuple(map(float, background_color_input.split(',')))
    else:
        background_color = (1, 1, 1)
    materials_input = input(""Enter the materials (comma-separated) (default: paper,wood,metal,glass): "")
    if materials_input:
        materials = materials_input.split(',')
    else:
        materials = [""paper"", ""wood"", ""metal"", ""glass""]
    custom_attributes_input = input(""Enter custom attributes (key:value, comma-separated): "")
    custom_attributes = dict(attr.split(':') for attr in custom_attributes_input.split(',')) if custom_attributes_input else {}

    num_sections = int(input(""How many sections do you want to divide the image into? ""))
    sections = generate_sections(num_sections)

    return num_nfts, collection_name, collection_desc, unique_signature, image_quality, num_layers, background_color, materials, custom_attributes, sections

# Main function to create NFTs
def create_nfts(num_nfts, collection_name, collection_desc, unique_signature, image_quality, num_layers, background_color, materials, custom_attributes, sections):
    print(f""Creating the collection '{collection_name}' of {num_nfts} NFTs."")
    
    # Create the main directory
    main_dir = collection_name.replace("" "", ""_"")
    if not os.path.exists(main_dir):
        os.makedirs(main_dir)
    print(f""Created main directory: {main_dir}"")

    for i in range(num_nfts):
        print(f""Creating NFT {i+1}/{num_nfts} with {num_layers} layers..."")
        
        # Create a subdirectory for each NFT
        nft_dir = os.path.join(main_dir, f""nft_{i+1}"")
        if not os.path.exists(nft_dir):
            os.makedirs(nft_dir)
        print(f""Created directory for NFT {i+1}: {nft_dir}"")

        # Initialize the progress bar
        with tqdm(total=100, desc=f""Creating NFT {i+1}"", bar_format=""{l_bar}{bar} [ time left: {remaining} ]"") as pbar:
            
            # Generate shapes and plot the image
            shapes = generate_shapes(random.randint(5, 15), num_layers, materials, sections)
            image_path = os.path.join(nft_dir, f""nft_image_{i+1}.png"")
            plot_shapes(shapes, image_path, dpi=image_quality, background_color=background_color)
            pbar.update(70)  # Update the progress bar after plotting shapes
            print(f""Generated and saved image: {image_path}"")
            
            # Generate metadata and save it
            attributes = [{""trait_type"": k, ""value"": v} for k, v in custom_attributes.items()]
            metadata = generate_metadata(i+1, shapes, collection_desc, nft_dir, collection_name, unique_signature, attributes)
            metadata_path = os.path.join(nft_dir, f'nft_metadata_{i+1}.json')
            with open(metadata_path, 'w') as f:
                json.dump(metadata, f, indent=4)
            pbar.update(20)  # Update the progress bar after generating metadata
            print(f""Generated and saved metadata: {metadata_path}"")
            
            # Embed metadata into the image
            embed_metadata(image_path, metadata)
            pbar.update(10)  # Update the progress bar after embedding metadata
            print(f""Embedded metadata into image: {image_path}"")

# Parse command line arguments
parser = argparse.ArgumentParser(description='Create NFT images and metadata.')
subparsers = parser.add_subparsers(dest='command')

# Register user command
register_parser = subparsers.add_parser('register', help='Register a new user')

# Login user command
login_parser = subparsers.add_parser('login', help='Login as an existing user')

# Create NFTs command
create_parser = subparsers.add_parser('create', help='Create NFT images and metadata')

# Cool command to provide detailed usage information
def cool_command():
    print(""""""
    Usage Instructions:
    -------------------
    This script generates a collection of NFT images with metadata.

    Commands:
    ---------
    1. Register a new user:
       python create_nfts.py register

    2. Login as an existing user:
       python create_nfts.py login

    3. Create a collection with NFTs:
       python create_nfts.py create

    Examples:
    ---------
    1. Register a new user:
       python create_nfts.py register

    2. Login as an existing user:
       python create_nfts.py login

    3. Create a collection interactively after logging in:
       python create_nfts.py create

    Ensure you have registered and logged in before attempting to create NFTs.
    """""")
    sys.exit(0)

cool_parser = subparsers.add_parser('cool', help='Show usage instructions and examples')
cool_parser.set_defaults(func=cool_command)

args = parser.parse_args()

# Handle commands
if args.command == 'register':
    register_user()
elif args.command == 'login':
    login_user()
elif args.command == 'create':
    if login_user():
        details = get_nft_details()
        create_nfts(*details)
elif args.command == 'cool':
    cool_command()
else:
    parser.print_help()
"
AEjsCpwa,ü§ëG2A.com Free Gift Card FIX June 2024üéÅ,FeasModz514,Python,Thursday 13th of June 2024 10:08:12 AM CDT,"G2A.com free voucher & gaming guide.
Any voucher for free on G2A.com including Playstation gift cards & everything else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
aKf4WKgL,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,Bufayez,Python,Thursday 13th of June 2024 09:56:11 AM CDT,"G2A.com free voucher & gaming guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11th 2024

"
HyLq5hPh,ü§ëG2A.com Free Gift Card FIX June 2024ü§ë,buch,Python,Thursday 13th of June 2024 09:50:10 AM CDT,"G2A.com complimentary gift card & games guide.
Any gift card for free on G2A.com including Amazon gift cards & all else offered.
This is the most current version of this script. Any other one posted will not work!

PDF guide here:
https://drive.google.com/file/d/1DJewb1_3bQR3RytE-84jom7JCUX91RVh/view?50071

Working as of:
June 11 2024

"
