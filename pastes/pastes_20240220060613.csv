id,title,username,language,date,content
XjutMx9T,G2A.com Free Gift Card Guide Feb 2024,ounnuo,GetText,Monday 19th of February 2024 11:41:14 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_722554.pdf
 
Working as of
20 February 2024"
QCisvzRV,gimmie-money,drakkillen,JavaScript,Monday 19th of February 2024 11:39:40 PM CDT,"/** @param {NS} ns */
export async function main(ns) {
var target = ns.args[0];
var securityThresh = ns.getServerMinSecurityLevel(target) + 5;
var moneyThresh = ns.getServerMaxMoney(target) * 0.75;

  while(true){
    if(ns.getServerSecurityLevel(target) > securityThresh){
      await ns.weaken(target)
    }
    else if (ns.getServerMoneyAvailable(target) < moneyThresh){
      await ns.grow(target);
    }
    else{
      await ns.hack(target)
    }
  }
}"
7z5fL9nW,auto-deploy,drakkillen,JavaScript,Monday 19th of February 2024 11:38:56 PM CDT,"/** @param {NS} ns */
export async function main(ns) {
  var target = ns.args[0]
  var homeServer = ""home""
  var cracks ={
    ""BruteSSH.exe"": ns.brutessh,
    ""FTPCrack.exe"": ns.ftpcrack,
    ""relaySMTP.exe"": ns.relaysmtp,
    ""HTTPWorm.exe"": ns.httpworm,
    ""SQLInject.exe"": ns.sqlinject
  };
  var virus = ""gimmie-money.js""
  var virusRam = ns.getScriptRam(virus)
  function getNumCracks(){
    return Object.keys(cracks).filter(function(file){
        return ns.fileExists(file,homeServer);
    }).length;
  }
  function penetrate(server) {
    ns.print(""Penetrating"" + server);
    for(var file of Object.keys(cracks)){
      if(ns.fileExists(file, homeserver)){
        var runScript = cracks[file];
        runScript(server)
      }
    }
  }
  async function copyAndRunVirus(server){
    ns.print(""Copying virus to server: ""+ server)
      await ns.scp(virus, server)

    if(!ns.hasRootAccess(server)){
      var requiredPorts = ns.getServerNumPortsRequired(server)
      if(requiredPorts > 0){
        penetrate(server)
      }
      ns.print(""Gaining root access on "" + server)
      ns.nuke(server)
    }

    if(ns.scriptRunning(virus, server)){
      ns.scriptKill(virus, server)
    }
    var maxThreads = Math.floor(ns.getServerMaxRam(server) / virusRam)
    
    ns.exec(virus, server, maxThreads, target)
  }

  function getNetworkNodes(){
    ns.print(""Retrieving all nodes in the network"")
    var visited = {}
    var stack = []
    var origin = ns.getHostname()
    stack.push(origin)

    while(stack.length > 0){
      var node = stack.pop()
      if(!visited[node]){
        visited[node] = node 
        var neighbours = ns.scan(node)
        for(var i = 0; i < neighbours.length; i++){
          var child = neighbours[i]
            if(visited[child]){
              continue
          }
          stack.push(child)
        }
      }
    }
    return Object.keys(visited)
  }
  function canHack(server){
    var numCracks = getNumCracks()
    var reqPorts = ns.getServerNumPortsRequired(server)
    var ramAvail = ns.getServerMaxRam(server)
    return numCracks >= reqPorts && ramAvail > virusRam
  }
  function getTargetServers(){
    var networkNodes = getNetworkNodes()
    var targets = networkNodes.filter(function (node){return canHack(node)})
    var i = 0
    var serverPrefix =""pserv-""
    while(ns.serverExists(serverPrefix + i)){
      targets.push(serverPrefix + i)
      ++i
    }
    return targets
  }
  async function deployHacks(targets){
    ns.tprint(""Gonna deploy virus to these servers "" + targets)
    for(var serv of targets){
      await copyAndRunVirus(serv)
    }
  }
  var curTargets = []
  var waitTime = 2000
  while(true){
    var newTargets = getTargetServers()
    if(newTargets.length !== curTargets.length){
      await deployHacks(newTargets)
      curTargets = newTargets
    }
    await ns.sleep(waitTime)
  }
}"
PftgKFzV,Untitled,artemsemkin,PHP,Monday 19th of February 2024 11:04:34 PM CDT,"<?php

// Find and remove this code in these templates:
// /wp-content/themes/kinsey/template-parts/masthead/masthead-elementor-behind.php
// /wp-content/themes/kinsey/template-parts/masthead/masthead-elementor-beneath.php
// /wp-content/themes/kinsey/template-parts/masthead/masthead-elementor-fullscreen.php
// /wp-content/themes/kinsey/template-parts/bottom-navigation/bottom-navigation-auto-scroll.php

$heading_attributes = arts_get_split_text_attributes(
  $heading_attributes,
  array(
    'by'        => 'lines,words,chars',
    'set'       => $page_masthead_animation_enabled ? 'chars' : false,
    'overflow'  => 'lines',
    'animation' => false,
  )
);"
0dZr4kGA,Untitled,hmbashar,CSS,Monday 19th of February 2024 10:43:32 PM CDT,"
/* ---------------------------------------------
* PopUp
* --------------------------------------------- */
.abcbiz-popup-trigger {
    cursor: pointer;
}
.abcbiz-popup-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 9999;
    justify-content: center;
    align-items: center;
}

.abcbiz-popup {
    position: relative;
    border-radius: 5px;
    padding: 20px;
    max-width: 600px; 
    width: 90%; 
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); 
    background: #fff;
}

.abcbiz-popup-close {
    position: absolute;
    top: -25px;
    right: -20px;
    cursor: pointer;
    font-size: 24px;
    color: #333;
}

.abcbiz-popup iframe {
    width: 100%; 
    height: 50vh; 
}
.abcbiz-popup-close i {
    font-size: 24px;
    color: #333;
    background-color: #f0f0f0;
    padding: 10px;
    border-radius: 100%;
    width: 30px;
    height: 30px;
    text-align: center;
    display: flex;
    align-items: center;
    justify-content: center;
}"
f6MeWCtt,Sort,Alexr360,Lua,Monday 19th of February 2024 09:29:27 PM CDT,"-- Function to count the total number of items in the chest
local function countItems(chest)
    local itemCount = {}
    for slot = 1, chest.size() do
        local stack = chest.getItemDetail(slot)
        if stack then
            local itemName = stack.name
            itemCount[itemName] = (itemCount[itemName] or 0) + stack.count
        end
    end
    return itemCount
end

-- Function to compare two item counts
local function compareItemCount(itemCount1, itemCount2)
    for itemName, count in pairs(itemCount1) do
        if itemCount2[itemName] and itemCount2[itemName] > count then
            return true -- itemCount2 has more of this item
        end
    end
    return false
end

-- Function to move items from one slot to another within the same chest
local function moveItems(chest, slot1, slot2)
    chest.pushItems(peripheral.getName(chest), slot1, 1, slot2)
end

-- Function to sort the items in the chest
local function sortChest(chest)
    local sorted = false
    while not sorted do
        sorted = true
        for slot = 1, chest.size() - 1 do
            local stack1 = chest.getItemDetail(slot)
            local stack2 = chest.getItemDetail(slot + 1)
            if stack1 and stack2 and compareItemCount({[stack1.name] = stack1.count}, {[stack2.name] = stack2.count}) then
                moveItems(chest, slot, slot + 1)
                sorted = false
            end
        end
    end
end

-- Main function
local function main()
    local chest = peripheral.find(""minecraft:chest"")
    if chest then
        sortChest(chest)
        print(""Chest sorted successfully!"")
    else
        print(""No chest detected."")
    end
end

-- Call the main function
main()
"
izsB1RPi,Mad,Unknown_No_1,PHP,Monday 19th of February 2024 09:04:40 PM CDT,FeedbackBhejoWarnaKeyExpired
ynwh3iMJ,Discord Attachment Copier,TurretBot,JavaScript,Monday 19th of February 2024 08:53:06 PM CDT,"// ==UserScript==
// @name         Discord Attachment Copier
// @version      1.3
// @description  try to take over the world!
// @author       TurretBot
// @match        https://discord.com/channels/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=discord.com
// @grant        none
// ==/UserScript==

(function() {
    'use strict';
    function getsub(id) {
        var attatchments="""",att=document.getElementById(""message-accessories-""+id).querySelectorAll(""a"");
        for (var i=0;i<att.length;i++) {
            if ((att[i]+"""").includes(""cdn.discord"")) {attatchments=attatchments.concat(att[i]+""\n"")};
        }
        //clear dupes (audio has two hrefs w same link)
        attatchments=attatchments.split(""\n"").filter((item, i, allItems) => {return i === allItems.indexOf(item);}).join(""\n"");
        return attatchments+document.getElementById(""message-content-""+id).innerText;
    };

    function ButtonClickAction (zEvent) {
        zEvent.target.innerHTML=getsub(zEvent.target.id);
    }

    var mo = new MutationObserver(function(muts) {
        muts.forEach(function(mut) {
            Array.prototype.forEach.call(mut.addedNodes, function(node) {
                if (node instanceof HTMLElement) {
                    Array.prototype.forEach.call(node.querySelectorAll('time'), function(img) {
                        //https://stackoverflow.com/questions/6480082/add-a-javascript-button-using-greasemonkey-or-tampermonkey
                        var zNode=document.createElement('textarea');
                        zNode.rows=1
                        zNode.placeholder=""Click for submission text""
                        zNode.id=img.id.replace(""message-timestamp-"","""");
                        zNode.addEventListener(
                            ""click"", ButtonClickAction, false
                        );
                        img.appendChild(zNode);
                    });
                }
            });
        });
    });
    mo.observe(document.body, {childList: true, subtree: true});
    // Your code here...
})();"
5yySJFhX,Untitled,Tkap1,C++,Monday 19th of February 2024 08:43:36 PM CDT,"#include <iostream>
#include <stdint.h>
using namespace std;
typedef uint32_t u32;

struct s_connection {
	u32 a;
	u32 b;
};

static bool walked[100000];
static u32 connection_count = 0;
static u32 added_count = 0;
static s_connection connections[200000];
static s_connection added[200000];
static u32 cities, roads;

int main() {

	cin >> cities >> roads;
	for(u32 i = 0; i < roads; i++) {
		u32 a, b;
		cin >> a >> b;
		connections[connection_count++] = {a, b};
	}

	walked[1] = true;
	for(u32 city_i = 1; city_i < cities; city_i++) {
		u32 curr = city_i;
		u32 target = city_i + 1;
		if(walked[target]) {
			continue;
		}

		bool reset_loop = true;
		while(reset_loop) {
			reset_loop = false;
			for(int connection_i = 0; connection_i < (int)connection_count; connection_i++) {
				s_connection c = connections[connection_i];
				if(walked[c.a] && !walked[c.b]) {
					walked[c.b] = true;
					reset_loop = true;
				}
				else if(walked[c.b] && !walked[c.a]) {
					walked[c.a] = true;
					reset_loop = true;
				}
				if(walked[c.a] && walked[c.b]) {
					connections[connection_i--] = connections[--connection_count];
				}
				if(walked[target]) { break; }
			}
		}
		if(!walked[target]) {
			connections[connection_count++] = {curr, target};
			added[added_count++] = {curr, target};
			walked[target] = true;
		}
	}

	cout << added_count << endl;
	for(u32 i = 0; i < added_count; i++) {
		cout << added[i].a << "" "" << added[i].b << endl;
	}
	return 0;
}
"
pGKxDxhp,邀您一起看：一口气看完【北派盗墓笔记】更新最全版本，真实故事改编！,xiaomianao666,JavaScript,Monday 19th of February 2024 08:40:16 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥一口气看完【北派盗墓笔记】更新最全版本，真实故事改编！@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuWIhuexu+eJh+W6k1wiLFwicGF0aFwiOlwidmF1bHRcIixcInJ1bGVcIjpcIumhtumDqOWkp+exuyA9IFsn5Zu95YibJywgJ+eUteinhicsICfnuqrlvZXniYcnLCAn57u86Im6JywgJ+eVquWJpycsICfnlLXlvbEnXVxcbmlmIChwYWdlID09IDEpIHtcXG4gICAgLy8g5oqY5Y+g5byA5YWzXFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogZ2V0TXlWYXIoJ+aKmOWPoCcsICflhbMnKSA9PSAn5YWzJyA/ICfigJzigJzigJ3igJ08Yj48c3BhbiBzdHlsZT1cXFwiY29sb3I6ICNGRjAwMDBcXFwiPuKIqDwvc3Bhbj48L2I+JyA6ICfigJzigJzigJ3igJ08Yj48c3BhbiBzdHlsZT1cXFwiY29sb3I6ICMxYWFkMTlcXFwiPuKIpzwvc3Bhbj48L2I+JyxcXG4gICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ+aKmOWPoCcsICflhbMnKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBwdXRNeVZhcign5oqY5Y+gJywgJ+W8gCcpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSksXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcbiAgICB9KVxcbiAgICDpobbpg6jlpKfnsbsuZm9yRWFjaChsaSA9PiB7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBsaSA9PSBnZXRNeVZhcign5aSn57G7JywgJ+WbveWImycpID8gJ+KAnOKAnOKAneKAnTxiPjxmb250IGNvbG9yPSMxYWFkMTk+JyArIGxpICsgJzwvZm9udD48L2I+JyA6IGxpLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobGkpID0+IHtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ+Wkp+exuycsIGxpKTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgfSwgbGkpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxuICAgICAgICB9KVxcbiAgICB9KTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxuICAgIH0pXFxufVxcbi8vIOmhtumDqOWIhuexu+WPguaVsOaYoOWwhFxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+Wkp+exuycsICflm73liJsnKSkge1xcbiAgICBjYXNlICflm73liJsnOlxcbiAgICAgICAgc2Vhc29uVHlwZSA9IDQ7XFxuICAgICAgICBpZiAoZ2V0TXlWYXIoJ+aKmOWPoCcsICflhbMnKSA9PSAn5byAJykge1xcbiAgICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGZldGNoKCdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vZ3VvY2h1YW5nL2luZGV4Jyk7XFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqCA9IHBkZmEoaHRtbCwgJy5maWx0ZXItbGlzdCYmLmZpbHRlci1ibG9jaycpO1xcbiAgICAgICAgICAgICAgICDliIbnsbvliJfooaguZm9yRWFjaCh1bCA9PiB7XFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaggPSBwZGZhKHVsLCAndWwmJmxpJyk7XFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaguZm9yRWFjaChsaSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKOetm+mAieadoeS7tiwgJ+WFqOmDqCcpID09IHBkZmgobGksICdsaSYmVGV4dCcpID8gJ+KAnOKAnOKAneKAnTxiPjxmb250IGNvbG9yPSMxYWFkMTk+JyArIHBkZmgobGksICdsaSYmVGV4dCcpICsgJzwvZm9udD48L2I+JyA6IHBkZmgobGksICdsaSYmVGV4dCcpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGxpLCDnrZvpgInmnaHku7YpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaSwg562b6YCJ5p2h5Lu2KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfnlLXop4YnOlxcbiAgICAgICAgc2Vhc29uVHlwZSA9IDU7XFxuICAgICAgICBpZiAoZ2V0TXlWYXIoJ+aKmOWPoCcsICflhbMnKSA9PSAn5byAJykge1xcbiAgICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGZldGNoKCdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vdHYvaW5kZXgnKTtcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqC5mb3JFYWNoKHVsID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIOetm+mAieadoeS7tiA9IHBkZmgodWwsICcuZmlsdGVyLW5hbWUmJlRleHQnKTtcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqC5mb3JFYWNoKGxpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGRmaChsaSwgJ2xpJiZUZXh0JykgPT0gJ+WFtuS7licpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobGksIOetm+mAieadoeS7tikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIo562b6YCJ5p2h5Lu2LCBwZGZoKGxpLCAnbGkmJlRleHQnKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcbiAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+e6quW9leeJhyc6XFxuICAgICAgICBzZWFzb25UeXBlID0gMztcXG4gICAgICAgIGlmIChnZXRNeVZhcign5oqY5Y+gJywgJ+WFsycpID09ICflvIAnKSB7XFxuICAgICAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xcbiAgICAgICAgICAgICAgICBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9kb2N1bWVudGFyeS9pbmRleC8nKTtcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqC5mb3JFYWNoKHVsID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIOetm+mAieadoeS7tiA9IHBkZmgodWwsICcuZmlsdGVyLW5hbWUmJlRleHQnKTtcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqC5mb3JFYWNoKGxpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGRmaChsaSwgJ2xpJiZUZXh0JykgPT0gJ+WFtuS7licpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobGksIOetm+mAieadoeS7tikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIo562b6YCJ5p2h5Lu2LCBwZGZoKGxpLCAnbGkmJlRleHQnKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcbiAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+e7vOiJuic6XFxuICAgICAgICBzZWFzb25UeXBlID0gNztcXG4gICAgICAgIGlmIChnZXRNeVZhcign5oqY5Y+gJywgJ+WFsycpID09ICflvIAnKSB7XFxuICAgICAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xcbiAgICAgICAgICAgICAgICBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS92YXJpZXR5L2luZGV4Jyk7XFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqCA9IHBkZmEoaHRtbCwgJy5maWx0ZXItbGlzdCYmLmZpbHRlci1ibG9jaycpO1xcbiAgICAgICAgICAgICAgICDliIbnsbvliJfooaguZm9yRWFjaCh1bCA9PiB7XFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaggPSBwZGZhKHVsLCAndWwmJmxpJyk7XFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaguZm9yRWFjaChsaSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKOetm+mAieadoeS7tiwgJ+WFqOmDqCcpID09IHBkZmgobGksICdsaSYmVGV4dCcpID8gJ+KAnOKAnOKAneKAnTxiPjxmb250IGNvbG9yPSMxYWFkMTk+JyArIHBkZmgobGksICdsaSYmVGV4dCcpICsgJzwvZm9udD48L2I+JyA6IHBkZmgobGksICdsaSYmVGV4dCcpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGxpLCDnrZvpgInmnaHku7YpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaSwg562b6YCJ5p2h5Lu2KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfnlarliacnOlxcbiAgICAgICAgc2Vhc29uVHlwZSA9IDE7XFxuICAgICAgICBpZiAoZ2V0TXlWYXIoJ+aKmOWPoCcsICflhbMnKSA9PSAn5byAJykge1xcbiAgICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGZldGNoKCdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vYW5pbWUvaW5kZXgnKTtcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqC5mb3JFYWNoKHVsID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIOetm+mAieadoeS7tiA9IHBkZmgodWwsICcuZmlsdGVyLW5hbWUmJlRleHQnKTtcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqC5mb3JFYWNoKGxpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGRmaChsaSwgJ2xpJiZUZXh0JykgPT0gJ+WFtuS7licpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobGksIOetm+mAieadoeS7tikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIo562b6YCJ5p2h5Lu2LCBwZGZoKGxpLCAnbGkmJlRleHQnKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcbiAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+eUteW9sSc6XFxuICAgICAgICBzZWFzb25UeXBlID0gMjtcXG4gICAgICAgIGlmIChnZXRNeVZhcign5oqY5Y+gJywgJ+WFsycpID09ICflvIAnKSB7XFxuICAgICAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xcbiAgICAgICAgICAgICAgICBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9tb3ZpZS9pbmRleCcpO1xcbiAgICAgICAgICAgICAgICDliIbnsbvliJfooaggPSBwZGZhKGh0bWwsICcuZmlsdGVyLWxpc3QmJi5maWx0ZXItYmxvY2snKTtcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoLmZvckVhY2godWwgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAg562b6YCJ5p2h5Lu2ID0gcGRmaCh1bCwgJy5maWx0ZXItbmFtZSYmVGV4dCcpO1xcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoID0gcGRmYSh1bCwgJ3VsJiZsaScpO1xcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoLmZvckVhY2gobGkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZGZoKGxpLCAnbGkmJlRleHQnKSA9PSAn5YW25LuWJykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRNeVZhcijnrZvpgInmnaHku7YsICflhajpg6gnKSA9PSBwZGZoKGxpLCAnbGkmJlRleHQnKSA/ICfigJzigJzigJ3igJ08Yj48Zm9udCBjb2xvcj0jMWFhZDE5PicgKyBwZGZoKGxpLCAnbGkmJlRleHQnKSArICc8L2ZvbnQ+PC9iPicgOiBwZGZoKGxpLCAnbGkmJlRleHQnKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChsaSwg562b6YCJ5p2h5Lu2KSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcijnrZvpgInmnaHku7YsIHBkZmgobGksICdsaSYmVGV4dCcpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbGksIOetm+mAieadoeS7tiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBicmVhaztcXG4gICAgZGVmYXVsdDpcXG4gICAgICAgIHNlYXNvblR5cGUgPSA0O1xcbiAgICAgICAgaWYgKGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXG4gICAgICAgICAgICBpZiAocGFnZSA9PSAxKSB7XFxuICAgICAgICAgICAgICAgIGh0bWwgPSBmZXRjaCgnaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL2FuaW1lL2luZGV4Jyk7XFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqCA9IHBkZmEoaHRtbCwgJy5maWx0ZXItbGlzdCYmLmZpbHRlci1ibG9jaycpO1xcbiAgICAgICAgICAgICAgICDliIbnsbvliJfooaguZm9yRWFjaCh1bCA9PiB7XFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaggPSBwZGZhKHVsLCAndWwmJmxpJyk7XFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaguZm9yRWFjaChsaSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKOetm+mAieadoeS7tiwgJ+WFqOmDqCcpID09IHBkZmgobGksICdsaSYmVGV4dCcpID8gJ+KAnOKAnOKAneKAnTxiPjxmb250IGNvbG9yPSMxYWFkMTk+JyArIHBkZmgobGksICdsaSYmVGV4dCcpICsgJzwvZm9udD48L2I+JyA6IHBkZmgobGksICdsaSYmVGV4dCcpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGxpLCDnrZvpgInmnaHku7YpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaSwg562b6YCJ5p2h5Lu2KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGJyZWFrO1xcbn1cXG4vLyDlrZDliIbnsbvlj4LmlbDmmKDlsIRcXG5zd2l0Y2ggKGdldE15VmFyKCfnsbvlnosnLCAn5YWo6YOoJykpIHtcXG4gICAgY2FzZSAn5q2j54mHJzpcXG4gICAgICAgIHNlYXNvbl92ZXJzaW9uID0gMTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfnlLXlvbEnOlxcbiAgICAgICAgc2Vhc29uX3ZlcnNpb24gPSAyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WFtuS7lic6XFxuICAgICAgICBzZWFzb25fdmVyc2lvbiA9IDM7XFxuICAgICAgICBicmVhaztcXG4gICAgZGVmYXVsdDpcXG4gICAgICAgIHNlYXNvbl92ZXJzaW9uID0gLTE7XFxuICAgICAgICBicmVhaztcXG59XFxuc3dpdGNoIChnZXRNeVZhcign6YWN6Z+zJywgJ+WFqOmDqCcpKSB7XFxuICAgIGNhc2UgJ+WOn+WjsCc6XFxuICAgICAgICBzcG9rZW5fbGFuZ3VhZ2VfdHlwZSA9IDE7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5Lit5paH6YWN6Z+zJzpcXG4gICAgICAgIHNwb2tlbl9sYW5ndWFnZV90eXBlID0gMjtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBkZWZhdWx0OlxcbiAgICAgICAgc3Bva2VuX2xhbmd1YWdlX3R5cGUgPSAtMTtcXG4gICAgICAgIGJyZWFrO1xcbn1cXG5zd2l0Y2ggKGdldE15VmFyKCflnLDljLonLCAn5YWo6YOoJykpIHtcXG4gICAgY2FzZSAn5Lit5Zu95aSn6ZmGJzpcXG4gICAgICAgIGFyZWEgPSAxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aXpeacrCc6XFxuICAgICAgICBhcmVhID0gMjtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfnvo7lm70nOlxcbiAgICAgICAgYXJlYSA9IDM7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn6Iux5Zu9JzpcXG4gICAgICAgIGFyZWEgPSA0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+S4reWbvea4r+WPsCc6XFxuICAgICAgICBhcmVhID0gWzYsIDddO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+mfqeWbvSc6XFxuICAgICAgICBhcmVhID0gODtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfms5Xlm70nOlxcbiAgICAgICAgYXJlYSA9IDk7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5rOw5Zu9JzpcXG4gICAgICAgIGFyZWEgPSAxMDtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfopb/nj63niZknOlxcbiAgICAgICAgYXJlYSA9IDEzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+W+t+WbvSc6XFxuICAgICAgICBhcmVhID0gMTU7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5oSP5aSn5YipJzpcXG4gICAgICAgIGFyZWEgPSAzNTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICflhbbku5YnOlxcbiAgICAgICAgLy8g5Y+q5piv55Wq5Ymn55qE5oOF5Ya1X+WFsTU177yM6KaB5YeP5Y675Ye6546w55qE4oCU4oCU566X5LqG77yM55u05o6l5Zyo5Yqo5oCB5YiG57G755qE5pe25YCZ5Y675o6J5LqGXFxuICAgICAgICBhcmVhID0gWzEsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLCAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NywgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1XTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBkZWZhdWx0OlxcbiAgICAgICAgYXJlYSA9IC0xO1xcbiAgICAgICAgYnJlYWs7XFxufVxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+eKtuaAgScsICflhajpg6gnKSkge1xcbiAgICBjYXNlICflroznu5MnOlxcbiAgICAgICAgaXNfZmluaXNoID0gMTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfov57ovb0nOlxcbiAgICAgICAgaXNfZmluaXNoID0gMDtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBkZWZhdWx0OlxcbiAgICAgICAgaXNfZmluaXNoID0gLTE7XFxuICAgICAgICBicmVhaztcXG59XFxuc3dpdGNoIChnZXRNeVZhcign5Ye65ZOBJywgJ+WFqOmDqCcpKSB7XFxuICAgIGNhc2UgJ+Wkruinhic6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDQ7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAnQkJDJzpcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfmjqLntKLpopHpgZMnOlxcbiAgICAgICAgcHJvZHVjZXJfaWQgPSA3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WbveWutuWcsOeQhic6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDE0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ05ISyc6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDI7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5Y6G5Y+y6aKR6YGTJzpcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gNjtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICfljavop4YnOlxcbiAgICAgICAgcHJvZHVjZXJfaWQgPSA4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+iHquWItic6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDk7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAnSVRWJzpcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gNTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICdTS1knOlxcbiAgICAgICAgcHJvZHVjZXJfaWQgPSAzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ1pERic6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDEwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WQiOS9nOacuuaehCc6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDExO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WbveWGheWFtuS7lic6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDEyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WbveWkluWFtuWugyc6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDEzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGRlZmF1bHQ6XFxuICAgICAgICBwcm9kdWNlcl9pZCA9IC0xO1xcbiAgICAgICAgYnJlYWs7XFxufVxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+eJiOadgycsICflhajpg6gnKSkge1xcbiAgICBjYXNlICfni6zlrrYnOlxcbiAgICAgICAgY29weXJpZ2h0ID0gMztcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICflhbbku5YnOlxcbiAgICAgICAgY29weXJpZ2h0ID0gWzEsIDIsIDRdO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGRlZmF1bHQ6XFxuICAgICAgICBjb3B5cmlnaHQgPSAtMTtcXG4gICAgICAgIGJyZWFrO1xcbn1cXG5zd2l0Y2ggKGdldE15VmFyKCfku5jotLknLCAn5YWo6YOoJykpIHtcXG4gICAgY2FzZSAn5YWN6LS5JzpcXG4gICAgICAgIHNlYXNvbl9zdGF0dXMgPSAxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+S7mOi0uSc6XFxuICAgICAgICBzZWFzb25fc3RhdHVzID0gWzIsIDZdO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+Wkp+S8muWRmCc6XFxuICAgICAgICBzZWFzb25fc3RhdHVzID0gWzQsIDZdO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGRlZmF1bHQ6XFxuICAgICAgICBzZWFzb25fc3RhdHVzID0gLTE7XFxuICAgICAgICBicmVhaztcXG59XFxuc3dpdGNoIChnZXRNeVZhcign5a2j5bqmJywgJ+WFqOmDqCcpKSB7XFxuICAgIGNhc2UgJzHmnIgnOlxcbiAgICAgICAgc2Vhc29uX21vbnRoID0gMTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlICc05pyIJzpcXG4gICAgICAgIHNlYXNvbl9tb250aCA9IDQ7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAnN+aciCc6XFxuICAgICAgICBzZWFzb25fbW9udGggPSA3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJzEw5pyIJzpcXG4gICAgICAgIHNlYXNvbl9tb250aCA9IDEwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGRlZmF1bHQ6XFxuICAgICAgICBzZWFzb25fbW9udGggPSAtMTtcXG4gICAgICAgIGJyZWFrO1xcbn1cXG4vLyDliKTmlq3lkozmmKDlsITlubTku71cXG5zd2l0Y2ggKGdldE15VmFyKCflpKfnsbsnLCAn5Zu95YibJykpIHtcXG4gICAgY2FzZSAn5Zu95YibJzpcXG4gICAgY2FzZSAn55Wq5YmnJzpcXG4gICAgICAgIC8vIOeVquWJp+WSjOWbveWIm+OAkOS5n+aYr+WPq+WBmuW5tOS7veS9huWPguaVsOWQjeOAgeagvOW8j+WSjOWFtuS7luWIhuexu+S4jeS4gOagt+OAkVxcbiAgICAgICAgYW5pbWVfeWVhciA9IGdldE15VmFyKCflubTku70nLCAn5YWo6YOoJyk7XFxuICAgICAgICBzd2l0Y2ggKGFuaW1lX3llYXIuaW5jbHVkZXMoJy0nKSkge1xcbiAgICAgICAgICAgIGNhc2UgdHJ1ZTpcXG4gICAgICAgICAgICAgICAgZWFybHkgPSBhbmltZV95ZWFyLnNwbGl0KCctJylbMV07XFxuICAgICAgICAgICAgICAgIGxhdGVyID0gYW5pbWVfeWVhci5zcGxpdCgnLScpWzBdO1xcbiAgICAgICAgICAgICAgICB5ZWFyID0gYFske2Vhcmx5fSwke051bWJlcihsYXRlcikgKyAxfSlgO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIGZhbHNlOlxcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGFuaW1lX3llYXIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzkw5bm05LujJzpcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gJ1sxOTkwLDIwMDApJztcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzgw5bm05LujJzpcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gJ1sxOTgwLDE5OTApJztcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+abtOaXqSc6XFxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9ICdbLDE5ODApJztcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+WFqOmDqCc6XFxuICAgICAgICAgICAgICAgICAgICAgICAgeWVhciA9IC0xO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gYFske2FuaW1lX3llYXJ9LCR7TnVtYmVyKGFuaW1lX3llYXIpICsgMX0pYDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICBkZWZhdWx0OlxcbiAgICAgICAgLy8g6Zmk5LqG55Wq5Ymn5ZKM5Zu95Yib55qE5YW25LuW5YiG57G7XFxuICAgICAgICB0dl95ZWFyID0gZ2V0TXlWYXIoJ+W5tOS7vScsICflhajpg6gnKTtcXG4gICAgICAgIHN3aXRjaCAodHZfeWVhci5pbmNsdWRlcygnLScpKSB7XFxuICAgICAgICAgICAgY2FzZSB0cnVlOlxcbiAgICAgICAgICAgICAgICBlYXJseSA9IHR2X3llYXIuc3BsaXQoJy0nKVsxXTtcXG4gICAgICAgICAgICAgICAgbGF0ZXIgPSB0dl95ZWFyLnNwbGl0KCctJylbMF07XFxuICAgICAgICAgICAgICAgIHJlbGVhc2VfZGF0ZSA9IGBbJHtlYXJseX0tMDEtMDEgMDA6MDA6MDAsJHtOdW1iZXIobGF0ZXIpICsgMX0tMDEtMDEgMDA6MDA6MDApYFxcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIGZhbHNlOlxcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR2X3llYXIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzkw5bm05LujJzpcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlX2RhdGUgPSAnWzE5OTAtMDEtMDEgMDA6MDA6MDAsMjAwMC0wMS0wMSAwMDowMDowMCknXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlICc4MOW5tOS7oyc6XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZV9kYXRlID0gJ1sxOTgwLTAxLTAxIDAwOjAwOjAwLDE5OTAtMDEtMDEgMDA6MDA6MDApJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAn5pu05pepJzpcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlX2RhdGUgPSAnWywxOTgwLTAxLTAxIDAwOjAwOjAwKSc7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICBjYXNlICflhajpg6gnOlxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2VfZGF0ZSA9IC0xO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlX2RhdGUgPSBgWyR7dHZfeWVhcn0tMDEtMDEgMDA6MDA6MDAsJHtOdW1iZXIodHZfeWVhcikgKyAxfS0wMS0wMSAwMDowMDowMClgO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICB9XFxufVxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+mjjuagvCcsICflhajpg6gnKSkge1xcbiAgICBjYXNlICfnlLXlvbEnOlxcbiAgICAgICAgc3R5bGVfaWQgPSAtMTA7XFxuICAgICAgICBicmVhaztcXG4gICAgLy8g55Wq5Ymn5qCP55uuXFxuICAgIGNhc2UgJ+WOn+WImyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDEwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+a8q+eUu+aUuSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDExO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+Wwj+ivtOaUuSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDEyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+a4uOaIj+aUuSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDEzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+eJueaRhCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDE0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+W4g+iii+aIjyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDE1O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+eDreihgCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDE2O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+epv+i2iic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDE3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+Wlh+W5uyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDE4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIC8vIOWSi+i3s+S6huS4gOS4quaNj35cXG4gICAgY2FzZSAn5oiY5paXJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjA7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5pCe56yRJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjE7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5pel5bi4JzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjI7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn56eR5bm7JzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjM7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn6JCM57O7JzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjQ7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5rK75oSIJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjU7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5qCh5ZutJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjY7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5bCR5YS/JzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjc7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5rOh6Z2iJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjg7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5oGL54ixJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMjk7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5bCR5aWzJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzA7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn6a2U5rOVJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzE7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5YaS6ZmpJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzI7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5Y6G5Y+yJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzM7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5p6256m6JzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzQ7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5py65oiYJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzU7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn56We6a2UJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzY7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5aOw5o6nJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzc7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn6L+Q5YqoJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzg7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5Yqx5b+XJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMzk7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn6Z+z5LmQJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDA7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5o6o55CGJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDE7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn56S+5ZuiJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDI7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5pm65paXJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDM7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5YKs5rOqJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDQ7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn576O6aOfJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDU7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5YG25YOPJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDY7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn5LmZ5aWzJzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDc7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAn6IGM5Zy6JzpcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNDg7XFxuICAgICAgICBicmVhaztcXG5cXG4gICAgLy8g57u86Im65qCP55uu44CB55S15b2xXFxuICAgIGNhc2UgJ+WJp+aDhSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDUwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WWnOWJpyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDUxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+eIseaDhSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDUyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WKqOS9nCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDUzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aBkOaAlic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDU0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+eKr+e9qic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDU1O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aDiuaCmic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDU2O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aCrOeWkSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDU3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aImOS6iSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDU4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WKqOeUuyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDU5O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+S8oOiusCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDYwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WutuW6rSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDYxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+atjOiInic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDYyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+e6quWunic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDYzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+eBvumavic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDY0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+S6uuaWhyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDY1O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+enkeaKgCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDY2O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+Wuh+WumSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDY4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+iQjOWuoCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDY5O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+ekvuS8mic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDcwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WKqOeJqSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDcxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+iHqueEtic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDcyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WMu+eWlyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDczO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WGm+S6iyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDc0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+e9quahiCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDc1O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+elnuenmCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDc2O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aXheihjCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDc3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+atpuS+oCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDc4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+mdkuaYpSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDc5O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+mDveW4gic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDgwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WPpOijhSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDgxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+iwjeaImCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDgyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+e7j+WFuCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDgzO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aDheaEnyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDg0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+elnuivnSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDg1O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+W5tOS7oyc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDg2O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WGnOadkSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDg3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WIkeS+pic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDg4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WGm+aXhSc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDg5O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+iuv+iwiCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDkwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+iEseWPo+engCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDkxO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+ecn+S6uuengCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDkyO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+mAieengCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDk0O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aXhea4uCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDk1O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aZmuS8mic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDk4O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+a8lOWUseS8mic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDk2O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+S6suWtkCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDk3O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+WFu+aIkCc6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDk5O1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgJ+aWh+WMlic6XFxuICAgICAgICBzdHlsZV9pZCA9IDEwMTAwO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIC8vIOeUteW9seagj+ebrlxcbiAgICBjYXNlICfnn63niYcnOlxcbiAgICAgICAgc3R5bGVfaWQgPSAxMDEwNDtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBkZWZhdWx0OlxcbiAgICAgICAgc3R5bGVfaWQgPSAtMTtcXG4gICAgICAgIGJyZWFrO1xcbn1cXG4vLyDmmKDlsITnnJ/lrp7or7fmsYLlnLDlnYBcXG5zd2l0Y2ggKHNlYXNvblR5cGUpIHtcXG4gICAgY2FzZSA0OlxcbiAgICAgICAgLy8g5Zu95YibXFxuICAgICAgICB0cnVlX3VybCA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3NlYXNvbi9pbmRleC9yZXN1bHQ/c2Vhc29uX3ZlcnNpb249JyArIHNlYXNvbl92ZXJzaW9uICsgJyZpc19maW5pc2g9JyArIGlzX2ZpbmlzaCArICcmY29weXJpZ2h0PScgKyBjb3B5cmlnaHQgKyAnJnNlYXNvbl9zdGF0dXM9JyArIHNlYXNvbl9zdGF0dXMgKyAnJnllYXI9JyArIHllYXIgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmb3JkZXI9MyZzdD00JnNvcnQ9MCZwYWdlPScgKyBwYWdlICsgJyZzZWFzb25fdHlwZT00JnBhZ2VzaXplPTMwJnR5cGU9MSdcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlIDU6XFxuICAgICAgICAvLyDnlLXop4bliadcXG4gICAgICAgIHRydWVfdXJsID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvc2Vhc29uL2luZGV4L3Jlc3VsdD9hcmVhPScgKyBhcmVhICsgJyZzdHlsZV9pZD0nICsgc3R5bGVfaWQgKyAnJnJlbGVhc2VfZGF0ZT0nICsgcmVsZWFzZV9kYXRlICsgJyZzZWFzb25fc3RhdHVzPScgKyBzZWFzb25fc3RhdHVzICsgJyZvcmRlcj0yJnN0PTUmc29ydD0wJnBhZ2U9JyArIHBhZ2UgKyAnJnNlYXNvbl90eXBlPTUmcGFnZXNpemU9MzAmdHlwZT0xJ1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgNzpcXG4gICAgICAgIC8vIOe7vOiJulxcbiAgICAgICAgdHJ1ZV91cmwgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy9zZWFzb24vaW5kZXgvcmVzdWx0P3NlYXNvbl9zdGF0dXM9JyArIHNlYXNvbl9zdGF0dXMgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmb3JkZXI9MiZzdD03JnNvcnQ9MCZwYWdlPScgKyBwYWdlICsgJyZzZWFzb25fdHlwZT03JnBhZ2VzaXplPTMwJnR5cGU9MSc7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAxOlxcbiAgICAgICAgLy8g55Wq5YmnXFxuICAgICAgICB0cnVlX3VybCA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3NlYXNvbi9pbmRleC9yZXN1bHQ/c2Vhc29uX3ZlcnNpb249JyArIHNlYXNvbl92ZXJzaW9uICsgJyZzcG9rZW5fbGFuZ3VhZ2VfdHlwZT0nICsgc3Bva2VuX2xhbmd1YWdlX3R5cGUgKyAnJmFyZWE9JyArIGFyZWEgKyAnJmlzX2ZpbmlzaD0nICsgaXNfZmluaXNoICsgJyZjb3B5cmlnaHQ9JyArIGNvcHlyaWdodCArICcmc2Vhc29uX3N0YXR1cz0nICsgc2Vhc29uX3N0YXR1cyArICcmc2Vhc29uX21vbnRoPScgKyBzZWFzb25fbW9udGggKyAnJnllYXI9JyArIHllYXIgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmb3JkZXI9MyZzdD0xJnNvcnQ9MCZwYWdlPScgKyBwYWdlICsgJyZzZWFzb25fdHlwZT0xJnBhZ2VzaXplPTMwJnR5cGU9MSc7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSAzOlxcbiAgICAgICAgLy8g57qq5b2V54mHXFxuICAgICAgICB0cnVlX3VybCA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3NlYXNvbi9pbmRleC9yZXN1bHQ/c3R5bGVfaWQ9JyArIHN0eWxlX2lkICsgJyZwcm9kdWNlcl9pZD0nICsgcHJvZHVjZXJfaWQgKyAnJnJlbGVhc2VfZGF0ZT0nICsgcmVsZWFzZV9kYXRlICsgJyZzZWFzb25fc3RhdHVzPScgKyBzZWFzb25fc3RhdHVzICsgJyZvcmRlcj0yJnN0PTMmc29ydD0wJnBhZ2U9JyArIHBhZ2UgKyAnJnNlYXNvbl90eXBlPTMmcGFnZXNpemU9MzAmdHlwZT0xJ1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgMjpcXG4gICAgICAgIC8vIOeUteW9sVxcbiAgICAgICAgdHJ1ZV91cmwgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy9zZWFzb24vaW5kZXgvcmVzdWx0P2FyZWE9JyArIGFyZWEgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmcmVsZWFzZV9kYXRlPScgKyByZWxlYXNlX2RhdGUgKyAnJnNlYXNvbl9zdGF0dXM9JyArIHNlYXNvbl9zdGF0dXMgKyAnJm9yZGVyPTImc3Q9MiZzb3J0PTAmcGFnZT0nICsgcGFnZSArICcmc2Vhc29uX3R5cGU9MiZwYWdlc2l6ZT0zMCZ0eXBlPTEnXFxuICAgICAgICBicmVhaztcXG59XFxudHJ1ZV91cmwgPSBlbmNvZGVVUkkodHJ1ZV91cmwpO1xcbmxpc3QgPSBKU09OLnBhcnNlKGZldGNoKHRydWVfdXJsKSkuZGF0YS5saXN0O1xcbnRyeSB7XFxuICAgIGxpc3QuZm9yRWFjaChtb3ZpZSA9PiB7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBtb3ZpZS50aXRsZSxcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvZmlsbWVyamkjaW1tZXJzaXZlVGhlbWUjXFxcIixcXG4gICAgICAgICAgICBpbWc6IG1vdmllLmNvdmVyICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgZGVzYzogbW92aWUub3JkZXIsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8zJyxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBzZWFzb25faWQ6IG1vdmllLnNlYXNvbl9pZFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9KTtcXG59IGNhdGNoIChlKSB7XFxuICAgIGxvZygn5bey57uP5oq16L6+6aG15bqVJyArIE1ZX1BBR0UpO1xcbn1cXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIueDreaYoOaXtumXtOihqFwiLFwicGF0aFwiOlwiVXBkYXRlVGFibGVzXCIsXCJydWxlXCI6XCJmdW5jdGlvbiBjb2xvcih0ZXh0LCBjb2xvcikge1xcblxcbsKgIMKgIHRleHQgKz0gXFxcIlxcXCI7XFxuXFxuwqAgwqAgaWYgKHRleHQuaW5kZXhPZihcXFwi4oCc4oCc4oCd4oCdXFxcIikgPT09IDApIHtcXG5cXG7CoCDCoCDCoCDCoCB0ZXh0LnJlcGxhY2UoXFxcIuKAnOKAnOKAneKAnVxcXCIsIFxcXCJcXFwiKTtcXG5cXG7CoCDCoCB9XFxuXFxuwqAgwqAgcmV0dXJuIFxcXCLigJzigJzigJ3igJ08Zm9udCBjb2xvcj0nXFxcIiArIGNvbG9yICsgXFxcIic+XFxcIiArIHRleHQgKyBcXFwiPC9mb250PlxcXCI7XFxuXFxufVxcblxcbnZhciB0YWJzID0ge1xcblxcbsKgIMKgIFxcXCLnlarliadcXFwiOiAxLFxcblxcbsKgIMKgIFxcXCLnuqrlvZXniYdcXFwiOiAzLFxcblxcbsKgIMKgIFxcXCLlm73liJtcXFwiOiA0XFxuXFxufVxcblxcbmlmIChNWV9QQUdFID09IDEpIHtcXG5cXG7CoCDCoCBPYmplY3Qua2V5cyh0YWJzKS5mb3JFYWNoKGl0ZW0gPT4ge1xcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IChnZXRNeVZhcihcXFwianVqaVxcXCIsIFxcXCLlm73liJtcXFwiKSA9PSBpdGVtID8gY29sb3IoaXRlbSwgXFxcInJlZFxcXCIpIDogaXRlbSksXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiAkKCkubGF6eVJ1bGUoKGEpID0+IHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBwdXRNeVZhcihcXFwianVqaVxcXCIsIGEpXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgcmVmcmVzaFBhZ2UoKVxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJldHVybiBcXFwidG9hc3Q6Ly/liIfmjaLmiJDlip9cXFwiXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgfSwgaXRlbSksXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcblxcbsKgIMKgIMKgIMKgIH0pXFxuXFxuwqAgwqAgfSlcXG5cXG7CoCDCoCBkLnB1c2goe1xcblxcbsKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFwibGluZVxcXCJcXG5cXG7CoCDCoCB9KVxcblxcbsKgIMKgIGxldCBkYXlzID0gN1xcblxcbsKgIMKgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF5czsgaSsrKSB7XFxuXFxuwqAgwqAgwqAgwqAgZC5wdXNoKHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogKGdldE15VmFyKFxcXCJmcm9tXFxcIiwgXFxcIjFcXFwiKSA9PSBpICsgXFxcIlxcXCIgPyBjb2xvcihpICsgXFxcIuWkqeWJjVxcXCIsIFxcXCJyZWRcXFwiKSA6IGkgKyBcXFwi5aSp5YmNXFxcIiksXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiAkKCkubGF6eVJ1bGUoKGkpID0+IHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBwdXRNeVZhcihcXFwiZnJvbVxcXCIsIGkgKyBcXFwiXFxcIilcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCByZWZyZXNoUGFnZSgpXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIH0sIGkpLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG5cXG7CoCDCoCDCoCDCoCB9KVxcblxcbsKgIMKgIH1cXG5cXG7CoCDCoCBkLnB1c2goe1xcblxcbsKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFwibGluZVxcXCJcXG5cXG7CoCDCoCB9KVxcblxcbsKgIMKgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF5czsgaSsrKSB7XFxuXFxuwqAgwqAgwqAgwqAgZC5wdXNoKHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogKGdldE15VmFyKFxcXCJ0b1xcXCIsIFxcXCIxXFxcIikgPT0gaSArIFxcXCJcXFwiID8gY29sb3IoaSArIFxcXCLlpKnlkI5cXFwiLCBcXFwicmVkXFxcIikgOiBpICsgXFxcIuWkqeWQjlxcXCIpLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogJCgpLmxhenlSdWxlKChpKSA9PiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgcHV0TXlWYXIoXFxcInRvXFxcIiwgaSArIFxcXCJcXFwiKVxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKClcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgfSwgaSksXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcblxcbsKgIMKgIMKgIMKgIH0pXFxuXFxuwqAgwqAgfVxcblxcblxcbsKgIMKgICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldE1vdmllcyh0YWJzW2dldE15VmFyKFxcXCJqdWppXFxcIiwgXFxcIuWbveWIm1xcXCIpXSwgZ2V0TXlWYXIoXFxcImZyb21cXFwiLCBcXFwiMVxcXCIpLCBnZXRNeVZhcihcXFwidG9cXFwiLCBcXFwiMVxcXCIpKS5mb3JFYWNoKGl0ZW0gPT4ge1xcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGl0ZW0uZGF0ZSArIFxcXCIg5ZGoXFxcIiArIGl0ZW0uZGF5X29mX3dlZWssXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuXFxuwqAgwqAgwqAgwqAgfSlcXG5cXG7CoCDCoCDCoCDCoCBpdGVtLmVwaXNvZGVzLmZvckVhY2goaSA9PiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgZC5wdXNoKHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogaS50aXRsZSxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBpbWc6IGkuY292ZXIrJ0BSZWZlcmVyPScsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZGVzYzppLnB1Yl9pbmRleC5tYXRjaCgv5Y2z5bCGLyk/J+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXCJyZWRcXFwiPicraS5wdWJfaW5kZXgrJ1xcXFxuJytpLnB1Yl90aW1lKyc8L2ZvbnQ+JzogaS5wdWJfaW5kZXgrICdcXFxcbicgKyBpLnB1Yl90aW1lLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHVybDogXFxcImhpa2VyOi8vcGFnZS9maWxtZXJqaSNpbW1lcnNpdmVUaGVtZSNcXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGV4dHJhOiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgXFxcInNlYXNvbl9pZFxcXCI6IGkuc2Vhc29uX2lkXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIH0pXFxuXFxuwqAgwqAgwqAgwqAgfSlcXG5cXG7CoCDCoCB9KVxcblxcbn1cXG5cXG5cXG5cXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIueZu+W9lVwiLFwicGF0aFwiOlwibG9naW5cIixcInJ1bGVcIjpcImpzOlxcbnZhciBkID0gW107XFxuc2V0UGFnZVRpdGxlKCfotKblj7fnmbvlvZXpobXpnaInKVxcbmQucHVzaCh7XFxuICAgIHRpdGxlOiAnY29va2ll55m75b2VJyxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgIHJldHVybiAkKCcnLCAn6K+36L6T5YWl5L2g55qEY29va2llJykuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcXFwiXFxcIikgcmV0dXJuIFxcXCJ0b2FzdDovL2Nvb2tpZeS4jeiDveS4uuepulxcXCI7XFxuICAgICAgICAgICAgbGV0IHVzZXJpbmZvID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9uYXZcXFwiLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBpbnB1dFxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSkpLmRhdGE7XFxuICAgICAgICAgICAgaWYgKHVzZXJpbmZvLmlzTG9naW4gPT09IGZhbHNlKSByZXR1cm4gXFxcInRvYXN0Oi8v5L2g55qEY29va2ll6LKM5Ly85aSx5pWI5LqG5ZaUflxcXCI7XFxuICAgICAgICAgICAgdXNlckluZm8gPSB7XFxuICAgICAgICAgICAgICAgIGNvb2tpZTogaW5wdXQsXFxuICAgICAgICAgICAgICAgIHVzZXJOYW1lOiB1c2VyaW5mby51bmFtZSxcXG4gICAgICAgICAgICAgICAgdXNlck1pZDogIHVzZXJpbmZvLm1pZCxcXG4gICAgICAgICAgICAgICAgdmlwU3RhdHVzOiB1c2VyaW5mby52aXBTdGF0dXMsXFxuICAgICAgICAgICAgICAgIGZhY2U6IHVzZXJpbmZvLmZhY2UgKyBcXFwiQFJlZmVyZXI9XFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBzZXR0aW5nID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpO1xcbiAgICAgICAgICAgIHNldHRpbmcudXNlckxpc3QudW5zaGlmdCh1c2VySW5mbyk7XFxuICAgICAgICAgICAgLy8g6L+H5ruk5o6JY29va2ll5Li656m655qE5YWD57SgXFxuICAgICAgICAgICAgc2V0dGluZy51c2VyTGlzdCA9IHNldHRpbmcudXNlckxpc3QuZmlsdGVyKHVzZXIgPT4gdXNlci5jb29raWUgIT09ICcnKTtcXG4gICAgICAgICAgICBzYXZlRmlsZShcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIsIEpTT04uc3RyaW5naWZ5KHNldHRpbmcpKTtcXG4gICAgICAgICAgICBiYWNrKHRydWUpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9jb29raWXorr7nva7miJDlip9cXFwiO1xcbiAgICAgICAgfSlcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG59KTtcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJ+eZu+mZhuivtOaYjicsXFxuICAgIGRlc2M6IFxcXCLpobXpnaLkuIvmlrnnmbvpmYbmiJDlip/lkI7vvIzlho3ngrnlh7vnoa7orqTnmbvlvZXljbPlj69cXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbn0sIHtcXG4gICAgdGl0bGU6ICfnmbvpmYbmiJDlip/lkI7vvIzlho3ngrnmiJHvvIEnLFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcbiAgICAgICAgLy8g6L+Z6YeM6LSf6LSj5YaZQ29va2ll77yM5YWI6K+777yM5YaN6L+95YqgXFxuICAgICAgICBjb29raWUgPSBnZXRWYXIoJ2JpbGlDb29raWUnLCcnKTtcXG4gICAgICAgIGxvZyhcXFwi6I635Y+W5Yiw55qEY29va2llOlxcXCIrY29va2llKTtcXG4gICAgICAgIGlmIChjb29raWUgPT0gXFxcIlxcXCIpIHJldHVybiBcXFwidG9hc3Q6Ly/ojrflj5Zjb29raWXlpLHotKXvvIzlho3nrYnnrYnnnIvvvJ9cXFwiO1xcbiAgICAgICAgbGV0IHVzZXJpbmZvID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9uYXZcXFwiLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICBcXFwiQ29va2llXFxcIjogY29va2llXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSkpLmRhdGE7XFxuICAgICAgICBpZiAodXNlcmluZm8uaXNMb2dpbiA9PT0gZmFsc2UpIHJldHVybiBcXFwidG9hc3Q6Ly/kvaDlhYjnmbvlvZXvvIzlho3ojrflj5Zjb29raWXvvIxPS++8n1xcXCI7XFxuICAgICAgICB1c2VySW5mbyA9IHtcXG4gICAgICAgICAgICBjb29raWU6IGNvb2tpZSxcXG4gICAgICAgICAgICB1c2VyTmFtZTogdXNlcmluZm8udW5hbWUsXFxuICAgICAgICAgICAgdXNlck1pZDogIHVzZXJpbmZvLm1pZCxcXG4gICAgICAgICAgICB2aXBTdGF0dXM6IHVzZXJpbmZvLnZpcFN0YXR1cyxcXG4gICAgICAgICAgICBmYWNlOiB1c2VyaW5mby5mYWNlICsgXFxcIkBSZWZlcmVyPVxcXCJcXG4gICAgICAgIH1cXG4gICAgICAgIHNldHRpbmcgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSk7XFxuICAgICAgICBzZXR0aW5nLnVzZXJMaXN0LnVuc2hpZnQodXNlckluZm8pO1xcbiAgICAgICAgLy8g6L+H5ruk5o6JY29va2ll5Li656m655qE5YWD57SgXFxuICAgICAgICBzZXR0aW5nLnVzZXJMaXN0ID0gc2V0dGluZy51c2VyTGlzdC5maWx0ZXIodXNlciA9PiB1c2VyLmNvb2tpZSAhPT0gJycpO1xcbiAgICAgICAgc2F2ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiLCBKU09OLnN0cmluZ2lmeShzZXR0aW5nKSk7XFxuICAgICAgICBiYWNrKHRydWUpO1xcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+WmguaenOayoeacieeZu+mZhuaIkOWKn++8jOW7uuiuruS9oOS4i+asoeeZu+mZhuaIkOWKn+WQjuS4jeimgeeCuemCo+S5iOW/q34nXFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ3RleHRfMSdcXG59LCB7XFxuICAgIHVybDogXFxcImh0dHBzOi8vbS5iaWxpYmlsaS5jb20vXFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJ4NV93ZWJ2aWV3X3NpbmdsZVxcXCIsXFxuICAgIGRlc2M6IFxcXCJsaXN0JiZzY3JlZW4tMzAwXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICB2YXIgdG9rZW5fdGltZXIgPSBmdW5jdGlvbiAoKSB7XFxuICAgICAgICAgICAgICAgIHZhciB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGNvb2tpZSA9IGZiYS5nZXRDb29raWUoXFxcImh0dHBzOi8vbS5iaWxpYmlsaS5jb20vXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICBmYmEucHV0VmFyKCdiaWxpQ29va2llJywgY29va2llKTtcXG4gICAgICAgICAgICAgICAgfSwgMTAwKVxcbiAgICAgICAgICAgIH07XFxuICAgICAgICAgICAgdG9rZW5fdGltZXIoKTtcXG4gICAgICAgIH0pLFxcbiAgICAgICAgY2FuQmFjazogdHJ1ZSxcXG4gICAgICAgIHVhOiBNT0JJTEVfVUFcXG4gICAgfVxcbn0pXFxuc2V0UmVzdWx0KGQpO1xcblwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5b2x6KeG5LqM57qnXCIsXCJwYXRoXCI6XCJmaWxtZXJqaVwiLFwicnVsZVwiOlwianM6XFxuLy8g5pWw5o2u5a6a5L2NXFxudmFyIGQgPSBbXTtcXG5pZiAoTVlfUEFSQU1TLnNlYXNvbl9pZCkge1xcbiAgICBzZWFzb25faWQgPSBNWV9QQVJBTVMuc2Vhc29uX2lkICsgXFxcIlxcXCI7XFxuICAgIERhdGEgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3ZpZXcvd2ViL3NlYXNvbj9zZWFzb25faWQ9JyArIHNlYXNvbl9pZCkpLnJlc3VsdDtcXG59IGVsc2Uge1xcbiAgICBEYXRhID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy92aWV3L3dlYi9zZWFzb24/ZXBfaWQ9JyArIE1ZX1BBUkFNUy5lcF9pZCkpLnJlc3VsdDtcXG59XFxuaWYgKCFEYXRhLmNvdmVyLm1hdGNoKC9odHRwcy8pKSB7XFxuICAgIOWwgemdoiA9IERhdGEuY292ZXIucmVwbGFjZSgnaHR0cCcsICdodHRwcycpICsgXFxcIkBSZWZlcmVyPVxcXCI7XFxufSBlbHNlIHtcXG4gICAg5bCB6Z2iID0gRGF0YS5jb3ZlciArIFxcXCJAUmVmZXJlcj1cXFwiO1xcbn1cXG50cnkge1xcbiAgICDlnLDljLogPSBEYXRhLmFyZWFzWzBdLm5hbWU7XFxufSBjYXRjaCAoZSkge1xcbiAgICDlnLDljLogPSAn5Zyw5Yy65pqC5pegJztcXG59XFxu566A5LuLID0gRGF0YS5ldmFsdWF0ZTtcXG4vLyDmraPniYdcXG7nsbvlnosgPSBEYXRhLnBvc2l0aXZlLnRpdGxlO1xcbuS4iuaYoOaXtumXtCA9IERhdGEucHVibGlzaC5wdWJfdGltZTtcXG50cnkge1xcbiAgICDlvpfliIYgPSBEYXRhLnJhdGluZy5zY29yZTtcXG59IGNhdGNoIChlKSB7XFxuICAgIOW+l+WIhiA9ICfmmoLml6DlvpcnO1xcbn1cXG7ov73liafml6XljoYgPSBEYXRhLm5ld19lcC5kZXNjO1xcbuabtOaWsOi/m+W6piA9IERhdGEubmV3X2VwLnRpdGxlO1xcbuW9seeJh+WQjeensCA9IERhdGEudGl0bGU7XFxu56ys5LqM5qCH6aKYID0gRGF0YS5zaGFyZV9zdWJfdGl0bGU7XFxu5Ymn6ZuG5YiX6KGoID0gRGF0YS5lcGlzb2Rlcy5maWx0ZXIoKGxpc3QpID0+IHtcXG4gICAgLy8g6L+H5ruk6aKE5ZGK44CB6Iqx57WuXFxuICAgIGlmIChnZXRJdGVtKCdwcmV2aWV3U3dpdGNoJywgJ2ZvbGQnKSA9PT0gJ2ZvbGQnICYmIGxpc3QuYmFkZ2UubWF0Y2goL+mihHzoirHnta4vKSkge1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH1cXG59KTtcXG7nn63orq8gPSBcXFwi4q2QXFxcIiArIOexu+WeiyArIFxcXCLirZBcXFwiICsg56ys5LqM5qCH6aKYICsgJ1xcXFxuJyArIOWcsOWMuiArICctJyArIOW+l+WIhiArICfliIZcXFxcbi0nICsg5LiK5pig5pe26Ze0ICsgJy0nO1xcbi8vIOmHjeWumuS5ieS6jOe6p+mhtemdouaVsOaNrlxcbnNldFBhZ2VUaXRsZSjlvbHniYflkI3np7ApO1xcbnNldFBhZ2VQaWNVcmwo5bCB6Z2iKTtcXG4vLyDliY3nva7lj4LmlbDlkozpooTlpITnkIYtLS1cXG5pbWdMaW5rID0gc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpO1xcbi8vIOWFqOWxgGxhennigJTigJTnm7Tpk74r5pat5o+SXFxudmFyIGxhenkgPSAkKCcnKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgIHZpZGVvUGFybXMgPSBmaW5kSXRlbShpbnB1dCk7XFxuICAgIGFpZCA9IHZpZGVvUGFybXMuZXh0cmEuYWlkO1xcbiAgICBidmlkID0gdmlkZW9QYXJtcy5leHRyYS5idmlkO1xcbiAgICBjaWQgPSB2aWRlb1Bhcm1zLmV4dHJhLmNpZDtcXG4gICAgYmFkZ2UgPSB2aWRlb1Bhcm1zLmV4dHJhLmJhZGdlO1xcbiAgICAvLyDmj5DkuqTljoblj7LorrDlvZVcXG4gICAgJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikucmVwb3J0UHJvY2VzcyhhaWQsIGNpZCk7XFxuICAgIHZpcFN0YXR1cyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS52aXBTdGF0dXM7XFxuICAgIGlmICh2aXBTdGF0dXMgIT0gMCkge1xcbiAgICAgICAgLy8g5aSn5Lya5ZGYXFxuICAgICAgICBpZiAoYmFkZ2UubWF0Y2goL+S7mOi0uS8pKSB7XFxuICAgICAgICAgICAgcmV0dXJuICQoWyfprZTmlq3op6PmnpAnLCAn5bey6LSt5LmwJ10sIDEpLnNlbGVjdCgoaW5wdXQsIGFpZCwgY2lkKSA9PiB7XFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSAn6a2U5pat6Kej5p6QJykge1xcbiAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9jYWNoZS9QYXJzZV9Ebi5qcycsIHt9KSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXl0bVBhcnNlKGxpbmspO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCAxMTYpLnJlcGxhY2UoLzsvZywgXFxcIu+8m++8m1xcXCIpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSwgbGluaywgYWlkLCBjaWQpXFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgMTE2KS5yZXBsYWNlKC87L2csIFxcXCLvvJvvvJtcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIC8vIOaZrumAmueUqOaIt1xcbiAgICAgICAgdmFyIHNldHRpbmc9SlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpO1xcbiAgICAgICAgdmFyIGhhc0JmS2V5PXNldHRpbmcuYmZLZXkhPScnP3RydWU6ZmFsc2U7XFxuICAgICAgICBpZiAoIWhhc0JmS2V5KSB7XFxuICAgICAgICAgICAgaWYgKGJhZGdlLm1hdGNoKC/kvJrlkZh85LuY6LS5LykpIHtcXG4gICAgICAgICAgICAgICAgZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9jYWNoZS9QYXJzZV9Ebi5qcycsIHt9KSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBheXRtUGFyc2UoaW5wdXQpO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgMTE2KS5yZXBsYWNlKC87L2csIFxcXCLvvJvvvJtcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIC8vIOWFseS6q+S8muWRmOaSreaUvuadg+ebilxcbiAgICAgICAgICAgIGlmIChiYWRnZS5tYXRjaCgv5LuY6LS5LykpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoWyfprZTmlq3op6PmnpAnLCAn5bey6LSt5LmwJ10sIDEpLnNlbGVjdCgoaW5wdXQsIGFpZCwgY2lkKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+mtlOaWreino+aekCcpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBldmFsKGZldGNoKCdoaWtlcjovL2ZpbGVzL2NhY2hlL1BhcnNlX0RuLmpzJywge30pKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXl0bVBhcnNlKGxpbmspO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuYmlsaUxhenkoYWlkLCBjaWQsIDExNikucmVwbGFjZSgvOy9nLCBcXFwi77yb77ybXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sIGxpbmssIGFpZCwgY2lkKVxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgMTE2KS5yZXBsYWNlKC87L2csIFxcXCLvvJvvvJtcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG59KTtcXG52YXIgQ29sb3IgPSBcXFwiIzE5Qjg5RFxcXCI7XFxudmFyIOavj+mhtembhuaVsCA9IDMwO1xcbnZhciDmkJzntKLmqKHlvI8gPSAn5YiG57uEJztcXG52YXIg6LCD55So5ZCN56ewID0gJ+eugOW9sSc7XFxucHV0TXlWYXIoJ+aKmOWPoCcsICflhbMnKTtcXG5wdXRNeVZhcign5pel5Y6GJywgJ+WFsycpO1xcbnB1dE15VmFyKCdEYXRhJywgRGF0YSk7XFxucHV0TXlWYXIoJ2xhenknLCBsYXp5KTtcXG4vLyDmuIXpmaTlj5jph49cXG5hZGRMaXN0ZW5lcignb25DbG9zZScsICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICBjbGVhck15VmFyKCfliIbpm4botbcnKTtcXG4gICAgY2xlYXJNeVZhcign5YiG6ZuG57uIJyk7XFxuICAgIGNsZWFyTXlWYXIoJ+aKmOWPoCcpO1xcbiAgICBjbGVhck15VmFyKCfml6XljoYnKTtcXG4gICAgY2xlYXJNeVZhcignRGF0YScpO1xcbiAgICBjbGVhck15VmFyKCdsYXp5Jyk7XFxuICAgIGNsZWFyTXlWYXIoJ+WJp+mbhuWIl+ihqCcpO1xcbn0pKVxcbi8vIOiuvue9ruWKqOaAgeacgOaWsOeroOiKglxcbnNldExhc3RDaGFwdGVyUnVsZSgnanM6JyArICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL2dldFVwZGF0ZScpKS5ydWxlKTtcXG59KSk7XFxuLy8g6aG16Z2i5YaF5a655q2j5paHLS0tXFxuLy8g5Z+65pys5L+h5oGv5qih5Z2XXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IOefreiuryxcXG4gICAgZGVzYzog566A5LuLID09ICcnID8gJ+aaguaXoOeugOS7iycgOiDnroDku4suc3Vic3RyaW5nKDAsIDQ1KSArICfigJjigJjigJnigJnigKY8Zm9udCBjb2xvcj1cXFwiIzFDMUMxQ1xcXCI+6K+m5oOFPC9mb250PicsXFxuICAgIGltZzog5bCB6Z2iLFxcbiAgICB1cmw6ICQoKS5ydWxlKCjnroDku4spID0+IHtcXG4gICAgICAgIHJlcyA9IHt9O1xcbiAgICAgICAgdmFyIGQgPSBbXTtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICflvbHniYfnroDku4vvvJonICsgJ1xcXFxuXFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHQnICsg566A5LuLLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbG9uZ190ZXh0J1xcbiAgICAgICAgfSk7XFxuICAgICAgICByZXMuZGF0YSA9IGQ7XFxuICAgICAgICBzZXRIb21lUmVzdWx0KHJlcyk7XFxuICAgIH0sIOeugOS7iyksXFxuICAgIGNvbF90eXBlOiAnbW92aWVfMV92ZXJ0aWNhbF9waWNfYmx1cicsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgdGl0bGU6ICfpooTlkYrjgIHoirHnta7lvIDlhbMnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdwcmV2aWV3U3dpdGNoJywgJ2ZvbGQnKSA9PSAnZm9sZCcpIHtcXG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ3ByZXZpZXdTd2l0Y2gnLCAnb3BlbicpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v6aKE5ZGK5bey57uP5YiH5o2i5Li65bGV56S6flxcXCI7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdwcmV2aWV3U3dpdGNoJywgJ2ZvbGQnKTtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+mihOWRiuS4jeWGjeWxleekun5cXFwiO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSksXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICdkbeebkuWtkCcsIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZyNub0hpc3RvcnkjP3J1bGU9ZG3nm5LlrZAnO1xcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICflvLnluZXmjqfliLYnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpID09ICd0cnVlJykge1xcbiAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIbkuI3lj5dkbeebkuWtkOWPguaVsOaOp+WItic7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICd0cnVlJyk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5Y+X5YiwZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSlcXG4gICAgICAgIH1dXFxuICAgIH1cXG59KTtcXG4vLyDmm7TmlrDml6XljobmqKHlnZdcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJ+aXpeWOhicsXFxuICAgIGltZzogaW1nTGluay7ml6XljoYsXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgo6L+95Ymn5pel5Y6GLCDmm7TmlrDov5vluqYpID0+IHtcXG4gICAgICAgIGlmIChnZXRNeVZhcign5pel5Y6GJywgJ+WFsycpID09ICflvIAnKSB7XFxuICAgICAgICAgICAgZGVsZXRlSXRlbSgn6L+95Ymn5pel5Y6GJyk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoJ+aXpeWOhicsICflhbMnKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgYWRkSXRlbUFmdGVyKCfmmL7npLrmqKHlvI8nLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiDov73liafml6XljoYubWF0Y2goL+WujOe7k3zmnJ/lvoUvKSA/IOi/veWJp+aXpeWOhiA6IOi/veWJp+aXpeWOhiArICc8YnI+PGZvbnQgY29sb3I9XFxcInJlZFxcXCI+5pu05paw6IezJyArICjmm7TmlrDov5vluqYubWF0Y2goL1tcXFxcdTRlMDAtXFxcXHU5ZmE1XS8pID8g5pu05paw6L+b5bqmIDogKCfnrKwnICsgKOabtOaWsOi/m+W6piA9PSAnJyA/IDAgOiDmm7TmlrDov5vluqYpICsgJ+ivnScpKSArICc8L2ZvbnQ+JyxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICfov73liafml6XljoYnXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBwdXRNeVZhcign5pel5Y6GJywgJ+W8gCcpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWIh+aNouaXpeWOhuS4ujonICsgZ2V0TXlWYXIoJ+aXpeWOhicsICflvIAnKVxcbiAgICB9LCDov73liafml6XljoYsIOabtOaWsOi/m+W6piksXFxuICAgIGNvbF90eXBlOiAnaWNvbl81J1xcbn0pO1xcbi8vIOiuoumYheaooeWdl1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiAn6K6i6ZiFJyxcXG4gICAgaW1nOiBpbWdMaW5rLuiuoumYhSxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgIHNlbGVjdGlvbkxpc3QgPSBbJ+iuoumYhScsICflj5bmtojorqLpmIUnXTtcXG4gICAgICAgIHJldHVybiAkKHNlbGVjdGlvbkxpc3QsIDIpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgc2Vhc29uX2lkID0gSlNPTi5wYXJzZShnZXRNeVZhcignRGF0YScpKS5zZWFzb25faWQ7XFxuICAgICAgICAgICAgaWYgKGlucHV0ID09ICforqLpmIUnKSB7XFxuICAgICAgICAgICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLnN1YnNjcmliZUZpbG0oc2Vhc29uX2lkKTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5jYW5jZWxTdWJzY3JpYmVGaWxtKHNlYXNvbl9pZCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly8nICsgcmVzO1xcbiAgICAgICAgfSk7XFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ2ljb25fNSdcXG59KTtcXG4vLyDor4TorrrmqKHlnZdcXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJ+ivhOiuuicsXFxuICAgIGltZzogaW1nTGluay7mn6XnnIvor4TorrosXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eScpLnJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgIHZhciBkID0gW107XFxuICAgICAgICAgICAgTGlzdCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ0RhdGEnKSkuZXBpc29kZXM7XFxuICAgICAgICAgICAgTGlzdC5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0uc2hhcmVfY29weSArICc8Zm9udCBjb2xvcj1cXFwiIzMzY2NjY1xcXCI+XFx04p6uPC9mb250PicsXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGl0ZW0uY292ZXIgKyAnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZScsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJpZFxcXCI6IGl0ZW0uYWlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJ0eXBlXFxcIjogMVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBzZXRSZXN1bHQoZCk7XFxuICAgICAgICB9KTtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiAnaWNvbl81J1xcbn0pO1xcblxcbi8vIOeyvuW9qee7p+e7reaooeWdl1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiAn5ZGo6L65JyxcXG4gICAgaW1nOiBpbWdMaW5rLuWRqOi+uSxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgIERhdGEgPSBKU09OLnBhcnNlKGdldE15VmFyKCdEYXRhJykpO1xcbiAgICAgICAgLy8g5pyJ5Lqb5rKh5pyJ55u05o6l5Y675o6J5oeS5b6X5aSE55CGflxcbiAgICAgICAgaWYgKERhdGEuc2VjdGlvbikge1xcbiAgICAgICAgICAgIOWRqOi+ueaVsOe7hCA9IFtcXFwi8J+Pt++4j+ebuOWFs+ezu+WIl1xcXCIsIFxcXCLwn6SjUFYm6Iqx57WuXFxcIiwgXFxcIvCfjYnnq5blsY/kuZ/nsr7lvalcXFwiLCBcXFwi8J+UpeeyvuW9qeS6jOWIm1xcXCJdO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICDlkajovrnmlbDnu4QgPSBbXFxcIvCfj7fvuI/nm7jlhbPns7vliJdcXFwiXTtcXG4gICAgICAgIH1cXG4gICAgICAgIC8vIOWRqOi+ueaVsOe7hCA9IFtcXFwi8J+Pt++4j+ebuOWFs+ezu+WIl1xcXCIsIFxcXCLwn6SjUFYm6Iqx57WuXFxcIiwgXFxcIuerluWxj+S5n+eyvuW9qVxcXCIsIFxcXCLnsr7lvankuozliJtcXFwiXTtcXG4gICAgICAgIHJldHVybiAkKOWRqOi+ueaVsOe7hCwgMSwgJ+GDpueyvuW9qee7p+e7rScpLnNlbGVjdCgoKSA9PiB7XFxuICAgICAgICAgICAgRGF0YSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ0RhdGEnKSk7XFxuICAgICAgICAgICAgbGF6eSA9IGdldE15VmFyKCdsYXp5Jyk7XFxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSAn8J+Pt++4j+ebuOWFs+ezu+WIlycpIHtcXG4gICAgICAgICAgICAgICAg57O75YiX5ZCN56ewID0gRGF0YS5zZWFzb25fdGl0bGVcXG4gICAgICAgICAgICAgICAg57O75YiX5pWw5o2uID0gRGF0YS5zZWFzb25zO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgpLnJ1bGUoKOezu+WIl+aVsOaNrikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgZCA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfwn4+377iP55u45YWz57O75YiXJyk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAo57O75YiX5pWw5o2uID09IFtdIHx8IOezu+WIl+aVsOaNriA9PSAnJykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGJpZz48Zm9udCBjb2xvcj1cXFwicmVkXFxcIj7irZDor6XlvbHniYfmsqHmnInnm7jlhbPns7vliJflk6Z+4q2QPC9mb250PjwvYmlnPicsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ3RvYXN0Oi8v6YO95rKh5pyJ77yM77yM5L2g54K55ZWl5ZGAficsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmlazor7fmnJ/lvoV+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAg57O75YiX5pWw5o2uLmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3Quc2Vhc29uX3RpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IChsaXN0Lmhvcml6b250YWxfY292ZXJfMTYxMCA9PSAnJyA/IChsaXN0Lmhvcml6b250YWxfY292ZXJfMTY5ID09ICcnID8gbGlzdC5jb3ZlciA6IGxpc3QuaG9yaXpvbnRhbF9jb3Zlcl8xNjkpIDogbGlzdC5ob3Jpem9udGFsX2NvdmVyXzE2MTApICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9maWxtZXJqaSNpbW1lcnNpdmVUaGVtZSMnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBsaXN0Lm5ld19lcC5pbmRleF9zaG93LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcImVwX2lkXFxcIjogbGlzdC5uZXdfZXAuaWRcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICBzZXRIb21lUmVzdWx0KGQpO1xcbiAgICAgICAgICAgICAgICB9LCDns7vliJfmlbDmja4pXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gJ/CfpKNQViboirHnta4nKSB7XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBQVuWSjOiKsee1ruaVsOaNriA9IERhdGEuc2VjdGlvblswXS5lcGlzb2RlcztcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCkucnVsZSgoUFblkozoirHnta7mlbDmja4sIGxhenkpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gW107XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfwn6SjUFYm6Iqx57WuJyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFBW5ZKM6Iqx57Wu5pWw5o2uID09IFtdIHx8IFBW5ZKM6Iqx57Wu5pWw5o2uID09ICcnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KAmOKAmOKAmeKAmTxiaWc+PGZvbnQgY29sb3I9XFxcInJlZFxcXCI+4q2Q6K+l5b2x54mHL+inhumikeayoeacieebuOWFs1BW5ZKM6Iqx57Wu5ZOmfuKtkDwvZm9udD48L2JpZz4nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAndG9hc3Q6Ly/pg73msqHmnInvvIzvvIzkvaDngrnllaXlkYB+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmlazor7fmnJ/lvoV+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIFBW5ZKM6Iqx57Wu5pWw5o2uLmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5jb3ZlciArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsaXN0LmxpbmsgKyBsYXp5LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogbGlzdC5zdWJ0aXRsZSArICdcXFxcbicgKyBsaXN0LmxvbmdfdGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnZpZDogbGlzdC5idmlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogbGlzdC5jaWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFkZ2U6IGxpc3QuYmFkZ2VcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXG4gICAgICAgICAgICAgICAgICAgIH0sIFBW5ZKM6Iqx57Wu5pWw5o2uLCBsYXp5KVxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5rKh5pyJ5pWw5o2u5ZOmfidcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09ICfwn42J56uW5bGP5Lmf57K+5b2pJykge1xcbiAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAg56uW5bGP5Lmf57K+5b2p5pWw5o2uID0gRGF0YS5zZWN0aW9uWzFdLmVwaXNvZGVzO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoKS5ydWxlKCjnq5blsY/kuZ/nsr7lvanmlbDmja4sIGxhenkpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gW107XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfwn42J56uW5bGP5Lmf57K+5b2pJyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKOerluWxj+S5n+eyvuW9qeaVsOaNriA9PSBbXSB8fCDnq5blsY/kuZ/nsr7lvanmlbDmja4gPT0gJycpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGJpZz48Zm9udCBjb2xvcj1cXFwicmVkXFxcIj7irZDor6XlvbHniYcv6KeG6aKR5rKh5pyJ55u45YWz56uW5bGP55+t6KeG6aKR5ZOmfuKtkDwvZm9udD48L2JpZz4nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAndG9hc3Q6Ly/pg73msqHmnInvvIzvvIzkvaDngrnllaXlkYB+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmlazor7fmnJ/lvoV+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIOerluWxj+S5n+eyvuW9qeaVsOaNri5mb3JFYWNoKGxpc3QgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QudGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogbGlzdC5saW5rICsgbGF6eSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3Quc3VidGl0bGUgKyAnXFxcXG4nICsgbGlzdC5sb25nX3RpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3QubGluayxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQ6IGxpc3QuYnZpZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQ6IGxpc3QuY2lkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZGdlOiBsaXN0LmJhZGdlXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEhvbWVSZXN1bHQoZCk7XFxuICAgICAgICAgICAgICAgICAgICB9LCDnq5blsY/kuZ/nsr7lvanmlbDmja4sIGxhenkpXFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/msqHmnInmlbDmja7lk6Z+J1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gJ/CflKXnsr7lvankuozliJsnKSB7XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICDnsr7lvankuozliJvmlbDmja4gPSBEYXRhLnNlY3Rpb25bMl0uZXBpc29kZXM7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgpLnJ1bGUoKOeyvuW9qeS6jOWIm+aVsOaNriwgbGF6eSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ/CflKXnsr7lvankuozliJsnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAo57K+5b2p5LqM5Yib5pWw5o2uID09IFtdIHx8IOeyvuW9qeS6jOWIm+aVsOaNriA9PSAnJykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfigJjigJjigJnigJk8YmlnPjxmb250IGNvbG9yPVxcXCJyZWRcXFwiPuKtkOivpeW9seeJhy/op4bpopHmsqHmnInkuozliJvkvZzlk4Hlk6Z+4q2QPC9mb250PjwvYmlnPicsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICd0b2FzdDovL+mDveayoeacie+8jO+8jOS9oOeCueWVpeWRgH4nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+aVrOivt+acn+W+hX4nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAg57K+5b2p5LqM5Yib5pWw5o2uLmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOmSiOWvuemDqOWIhuWPguaVsOe8uuWkseeahOaDheWGteWmguWHoeS6uuS/ruS7meS8oOWGmeeahO+8jO+8jFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGlzdC5haWQgPT0gMCB8fCBsaXN0LmNpZCA9PSAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWVkZW9EYXRhID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS92aWV3P2FpZD1cXFwiICsgbGlzdC5saW5rLnNwbGl0KCdhdicpWzFdLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiVXNlci1BZ2VudFxcXCI6IFBDX1VBLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6ICdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vJ1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcXFwiR0VUXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQgPSB2aWVkZW9EYXRhLmFpZDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQgPSB2aWVkZW9EYXRhLmJ2aWQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQgPSB2aWVkZW9EYXRhLmNpZDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZCA9IGxpc3QuYWlkO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnZpZCA9IGxpc3QuYnZpZDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpZCA9IGxpc3QuY2lkO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5jb3ZlciArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsaXN0LmxpbmsgKyBsYXp5LFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogbGlzdC5zdWJ0aXRsZSArICdcXFxcbicgKyBsaXN0LmxvbmdfdGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogYWlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQ6IGJ2aWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lkOiBjaWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFkZ2U6IGxpc3QuYmFkZ2VcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXG4gICAgICAgICAgICAgICAgICAgIH0sIOeyvuW9qeS6jOWIm+aVsOaNriwgbGF6eSlcXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ayoeacieaVsOaNruWTpn4nXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOi/m+WFpVxcXCIgKyBpbnB1dCArIFxcXCLnlYzpnaIuLi5cXFwiO1xcbiAgICAgICAgfSlcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwiaWNvbl81XFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGlkOiAn57K+5b2p57un57utJ1xcbiAgICB9XFxufSk7XFxuLy8g5pi+56S65qih5byP5pu05pS55qih5Z2XXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IGdldEl0ZW0oJ+aooeW8jycsICflj4zovrknKSxcXG4gICAgaW1nOiBnZXRJdGVtKCfmqKHlvI8nLCAn5Y+M6L65JykgPT0gJ+WIl+ihqCcgPyBpbWdMaW5rLuWIl+ihqCA6IGltZ0xpbmsu5Y+M6L65LFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcbiAgICAgICAg5pi+56S655qE5Ymn6ZuG5YiX6KGoID0gSlNPTi5wYXJzZShnZXRNeVZhcign5pi+56S655qE5Ymn6ZuG5YiX6KGoJykpO1xcbiAgICAgICAgaWYgKGdldEl0ZW0oJ+aooeW8jycsICflj4zovrknKSA9PSAn5YiX6KGoJykge1xcbiAgICAgICAgICAgIOaYvuekuueahOWJp+mbhuWIl+ihqC5mb3JFYWNoKGVsID0+IHtcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbShlbC5saW5rLCB7XFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzInLFxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBzZXRJdGVtKCfmqKHlvI8nLCAn5Y+M6L65JylcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAg5pi+56S655qE5Ymn6ZuG5YiX6KGoLmZvckVhY2goZWwgPT4ge1xcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKGVsLmxpbmssIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHNldEl0ZW0oJ+aooeW8jycsICfliJfooagnKVxcbiAgICAgICAgfVxcbiAgICAgICAgaW1nTGluayA9IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKTtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oJ+aYvuekuuaooeW8jycsIHtcXG4gICAgICAgICAgICB0aXRsZTogZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpLFxcbiAgICAgICAgICAgIGltZzogZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpID09ICfliJfooagnID8gaW1nTGluay7liJfooaggOiBpbWdMaW5rLuWPjOi+uSxcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWIh+aNouaooeW8j+S4ujonICsgZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpXFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogJ2ljb25fNScsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBpZDogJ+aYvuekuuaooeW8jydcXG4gICAgfVxcbn0sIHtcXG4gICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJyxcXG59KTtcXG4vLyDpgInmj5LmqKHlnZfigJTigJTlsYDpg6jliLfmlrDniYhcXG7mnaXmupAgPSAnYmwnO1xcbnB1dE15VmFyKCfnroDmj5InLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgbGV0IHRpdGxlQXJyID0gW11cXG4gICAgc2V0RmlsZSA9IHJlYWRGaWxlKCdoaWtlcjovL2ZpbGVzL3J1bGVzL0R1YW5OaWFuL015UGFyc2UuanNvbicpO1xcbiAgICB0cnkge1xcbiAgICAgICAgZXZhbCgnanNvbj0nICsgc2V0RmlsZSk7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGxvZygnSnNvbuino+aekOWPkeeUn+S6humUmeivrzonICsgZS5tZXNzYWdlKTtcXG4gICAgfVxcbiAgICB0aXRsZUFyciA9IGpzb24udGl0bGU7XFxuICAgIGxldCBiYXJyeTEgPSBbJ+Kcje+4j+i+heWKqSddO1xcbiAgICBsZXQgYmFycnkyID0gWyfwn5Om77iP6a2U5patJ107XFxuICAgIGxldCBiYXJyeTMgPSBbJ/CflI3mkJzntKInXTtcXG4gICAgdGl0bGVBcnIgPSBiYXJyeTMuY29uY2F0KHRpdGxlQXJyKTtcXG4gICAgdGl0bGVBcnIgPSBiYXJyeTIuY29uY2F0KHRpdGxlQXJyKTtcXG4gICAgdGl0bGVBcnIgPSBiYXJyeTEuY29uY2F0KHRpdGxlQXJyKTtcXG4gICAgZXZhbCgnb3A9anNvbi5zZXR0aW5ncy4nICsg5p2l5rqQKTtcXG4gICAgdGl0bGVBcnIgPSB0aXRsZUFyci5tYXAoKGl0KSA9PiB7XFxuICAgICAgICByZXR1cm4gaXQgPT09IG9wID8gJ/CfkYknICsgaXQgOiBpdDtcXG4gICAgfSk7XFxuICAgIHB1dE15VmFyKCfop6PmnpDmlbDnu4QnLCB0aXRsZUFycik7XFxuICAgIHB1dE15VmFyKCdzZXRGaWxlJywgc2V0RmlsZSk7XFxufSkpXFxuZXZhbChnZXRNeVZhcign566A5o+SJykpO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiAn6Kej5p6Q77ya8J+UmDxmb250IGNvbG9yPVxcXCInICsgQ29sb3IgKyAnXFxcIj4nICsgb3AgKyAnPC9mb250PlxcXFx0XFxcXHTpobXnoIHvvJo8Zm9udCBjb2xvcj1cXFwiJyArIENvbG9yICsgJ1xcXCI+JyArICgoZ2V0TXlWYXIoJ+WIhumbhui1tycsICfpppbpobUnKSA9PSAn6aaW6aG1JykgPyAn6aaW6aG1JyA6IChnZXRNeVZhcign5YiG6ZuG6LW3JykgKyAnLScgKyBnZXRNeVZhcign5YiG6ZuG57uIJykpKSArICc8L2ZvbnQ+JyxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChqc29uLCDmnaXmupAsIENvbG9yLCBvcCwg5b2x54mH5ZCN56ewLCDmkJzntKLmqKHlvI8sIOiwg+eUqOWQjeensCkgPT4ge1xcbiAgICAgICAgZXZhbChnZXRNeVZhcign566A5o+SJykpO1xcbiAgICAgICAgcmV0dXJuICQoZXZhbChnZXRNeVZhcign6Kej5p6Q5pWw57uEJykpLCAzKS5zZWxlY3QoKGpzb24sIOadpea6kCwgQ29sb3IsIG9wLCDlvbHniYflkI3np7AsIOaQnOe0ouaooeW8jywg6LCD55So5ZCN56ewKSA9PiB7XFxuICAgICAgICAgICAgc2V0RmlsZSA9IGdldE15VmFyKCdzZXRGaWxlJyk7XFxuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKC/wn5GJL2csICcnKTtcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09ICfinI3vuI/ovoXliqknKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkKCkucnVsZSgoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL2hvbWU/cnVsZT3phY3nva7liqnmiYsnKSkucnVsZSk7XFxuICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gJ/Cfk6bvuI/prZTmlq0nKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL1JvdXRlP3J1bGU9TXlGaWVsZOG0sOKBvyZ0eXBlPee8lui+kSNub0hpc3RvcnkjXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSAn8J+UjeaQnOe0oicpIHtcXG4gICAgICAgICAgICAgICAgaWYgKOaQnOe0ouaooeW8jyA9PSAn5YiG57uEJykge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3NlYXJjaD9zPVxcXCIgKyDlvbHniYflkI3np7AgKyBcXFwiJmdyb3VwPVxcXCIgKyDosIPnlKjlkI3np7A7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vc2VhcmNoP3M9XFxcIiArIOW9seeJh+WQjeensCArIFxcXCImcnVsZT1cXFwiICsg6LCD55So5ZCN56ewO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIC8vIOWOn+WFiOeahOmFjee9rlxcbiAgICAgICAgICAgIG9yaWdpblNldHRpbmdzID0gSlNPTi5zdHJpbmdpZnkoanNvbi5zZXR0aW5ncyk7XFxuICAgICAgICAgICAgLy8g5L+u5pS56YWN572uXFxuICAgICAgICAgICAgZXZhbCgnanNvbi5zZXR0aW5ncy4nICsg5p2l5rqQICsgJz1pbnB1dDsnKTtcXG4gICAgICAgICAgICBzZXRGaWxlID0gc2V0RmlsZS5yZXBsYWNlKG9yaWdpblNldHRpbmdzLCBKU09OLnN0cmluZ2lmeShqc29uLnNldHRpbmdzKSk7XFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvRHVhbk5pYW4vTXlQYXJzZS5qc29uJywgc2V0RmlsZSk7XFxuICAgICAgICAgICAgLy8g5Yi35paw5YWD57SgXFxuICAgICAgICAgICAgZXZhbChnZXRNeVZhcign566A5o+SJykpO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oJ29wJywge1xcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+ino+aekO+8mvCflJg8Zm9udCBjb2xvcj1cXFwiJyArIENvbG9yICsgJ1xcXCI+JyArIG9wICsgJzwvZm9udD5cXFxcdFxcXFx06aG156CB77yaPGZvbnQgY29sb3I9XFxcIicgKyBDb2xvciArICdcXFwiPicgKyAoKGdldE15VmFyKCfliIbpm4botbcnLCAn6aaW6aG1JykgPT0gJ+mmlumhtScpID8gJ+mmlumhtScgOiAoZ2V0TXlWYXIoJ+WIhumbhui1tycpICsgJy0nICsgZ2V0TXlWYXIoJ+WIhumbhue7iCcpKSkgKyAnPC9mb250PicsXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIh+aNouino+aekOWPo+S4ujpcXFwiICsgaW5wdXQ7XFxuICAgICAgICB9LCBqc29uLCDmnaXmupAsIENvbG9yLCBvcCwg5b2x54mH5ZCN56ewLCDmkJzntKLmqKHlvI8sIOiwg+eUqOWQjeensClcXG4gICAgfSwganNvbiwg5p2l5rqQLCBDb2xvciwgb3AsIOW9seeJh+WQjeensCwg5pCc57Si5qih5byPLCDosIPnlKjlkI3np7ApLFxcbiAgICBpbWc6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L3R1Ymlhby9iaWxpYmlsaS5zdmcnLFxcbiAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBpZDogJ29wJ1xcbiAgICB9XFxufSk7XFxuLy8g5rua5Yqo5Ymn6ZuG5p2h5qCPXFxu5Ymn6ZuG6ZW/5bqmID0g5Ymn6ZuG5YiX6KGoLmxlbmd0aDtcXG5pZiAo5Ymn6ZuG6ZW/5bqmID4g5q+P6aG16ZuG5pWwKSB7XFxuICAgIHB1dE15VmFyKCfliLfmlrDpgInpm4YnLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgIHB1dE15VmFyKCfliIbpm4botbcnLCBzdGFydCk7XFxuICAgICAgICBwdXRNeVZhcign5YiG6ZuG57uIJywgZW5kKTtcXG4gICAgICAgIGV2YWwoZ2V0TXlWYXIoJ+eugOaPkicpKTtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oJ29wJywge1xcbiAgICAgICAgICAgIHRpdGxlOiAn6Kej5p6Q77ya8J+UmDxmb250IGNvbG9yPVxcXCInICsgQ29sb3IgKyAnXFxcIj4nICsgb3AgKyAnPC9mb250PlxcXFx0XFxcXHTpobXnoIHvvJo8Zm9udCBjb2xvcj1cXFwiJyArIENvbG9yICsgJ1xcXCI+JyArICgoZ2V0TXlWYXIoJ+WIhumbhui1tycsICfpppbpobUnKSA9PSAn6aaW6aG1JykgPyAn6aaW6aG1JyA6IChnZXRNeVZhcign5YiG6ZuG6LW3JykgKyAnLScgKyBnZXRNeVZhcign5YiG6ZuG57uIJykpKSArICc8L2ZvbnQ+JyxcXG4gICAgICAgIH0pXFxuICAgICAgICAvLyDliKDpmaRcXG4gICAgICAgIOaYvuekuueahOWJp+mbhuWIl+ihqCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ+aYvuekuueahOWJp+mbhuWIl+ihqCcpKTtcXG4gICAgICAgIOaYvuekuueahOWJp+mbhuWIl+ihqC5mb3JFYWNoKGVsID0+IHtcXG4gICAgICAgICAgICBkZWxldGVJdGVtKGVsLmxpbmspO1xcbiAgICAgICAgfSk7XFxuICAgICAgICAvLyDmt7vliqBcXG4gICAgICAgIGxhenkgPSBnZXRNeVZhcignbGF6eScpO1xcbiAgICAgICAg5Ymn6ZuG5YiX6KGoID0gSlNPTi5wYXJzZShnZXRNeVZhcign5Ymn6ZuG5YiX6KGoJykpO1xcbiAgICAgICAg5pi+56S655qE5Ymn6ZuG5YiX6KGoID0g5Ymn6ZuG5YiX6KGoLnNsaWNlKHN0YXJ0IC0gMSwgZW5kKTtcXG4gICAgICAgIG5ld0FycmF5ID0gW107XFxuICAgICAgICBpbmRleCA9IDE7XFxuICAgICAgICDmmL7npLrnmoTliafpm4bliJfooaguZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgICAgICBpZiAoZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpID09ICfliJfooagnKSB7XFxuICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubG9uZ190aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5jb3ZlciArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBsaXN0LmxpbmsgKyBsYXp5LFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogbGlzdC50aXRsZS5tYXRjaCgvWzAtOV0vKSA/IChsaXN0LmJhZGdlICsgJ+esrCcgKyBsaXN0LnRpdGxlICsgJ+ivnScpIDogbGlzdC50aXRsZSxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBsaXN0LmxpbmssXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFpZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBidmlkOiBsaXN0LmJ2aWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lkOiBsaXN0LmNpZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWRnZTogbGlzdC5iYWRnZVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBuZXdBcnJheS5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LmxvbmdfdGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIHVybDogbGlzdC5saW5rICsgbGF6eSxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3QudGl0bGUubWF0Y2goL1swLTldLykgPyAobGlzdC5iYWRnZSArICfnrKwnICsgbGlzdC50aXRsZSArICfor50nKSA6IGxpc3QudGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzInLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnZpZDogbGlzdC5idmlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogbGlzdC5jaWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFkZ2U6IGxpc3QuYmFkZ2VcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGluZGV4ICs9IDE7XFxuICAgICAgICB9KTtcXG4gICAgICAgIGFkZEl0ZW1BZnRlcihnZXRNeVZhcign5pyr6aG1JyksIG5ld0FycmF5KTtcXG4gICAgICAgIHB1dE15VmFyKCfmmL7npLrnmoTliafpm4bliJfooagnLCDmmL7npLrnmoTliafpm4bliJfooagpO1xcbiAgICB9KSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcbiAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgICAgICB0aXRsZTogJ+KItycsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlkOiAn5Y2g5L2N56ymJyxcXG4gICAgICAgIH1cXG4gICAgfSlcXG4gICAgcHV0TXlWYXIoJ+WIhumbhui1tycsIDEpO1xcbiAgICBwdXRNeVZhcign5YiG6ZuG57uIJywg5q+P6aG16ZuG5pWwKTtcXG4gICAgcHV0TXlWYXIoJ+WJp+mbhuWIl+ihqCcsIOWJp+mbhuWIl+ihqCk7XFxuICAgIOaAu+mhteaVsCA9IE1hdGguY2VpbCjliafpm4bplb/luqYgLyDmr4/pobXpm4bmlbApO1xcbiAgICBzdGFydCA9IDE7XFxuICAgIGVuZCA9IOavj+mhtembhuaVsDtcXG4gICAgZm9yIChsZXQgcGFnZSA9IDE7IHBhZ2UgPD0g5oC76aG15pWwOyBwYWdlKyspIHtcXG4gICAgICAgIGlmIChlbmQgPiDliafpm4bplb/luqYpIHtcXG4gICAgICAgICAgICBlbmQgPSDliafpm4bplb/luqY7XFxuICAgICAgICB9XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBzdGFydCArICctJyArIGVuZCxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoc3RhcnQsIGVuZCwgQ29sb3IsIOadpea6kCkgPT4ge1xcbiAgICAgICAgICAgICAgICBldmFsKGdldE15VmFyKCfliLfmlrDpgInpm4YnKSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgfSwgc3RhcnQsIGVuZCwgQ29sb3IsIOadpea6kCksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogc3RhcnQgKyAnLScgKyBlbmRcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGlmIChlbmQgPCDliafpm4bplb/luqYpIHtcXG4gICAgICAgICAgICBzdGFydCArPSDmr4/pobXpm4bmlbA7XFxuICAgICAgICAgICAgZW5kICs9IOavj+mhtembhuaVsDtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAvLyDorrDlvZXmnKvpobXnmoRpZFxcbiAgICBwdXRNeVZhcign5pyr6aG1Jywgc3RhcnQgKyAnLScgKyBlbmQpO1xcbn0gZWxzZSB7XFxuICAgIHB1dE15VmFyKCfliIbpm4botbcnLCAxKTtcXG4gICAgcHV0TXlWYXIoJ+WIhumbhue7iCcsIOWJp+mbhumVv+W6pik7XFxufVxcbi8vIOWxleekuuWJp+mbhjpcXG7mmL7npLrnmoTliafpm4bliJfooaggPSDliafpm4bliJfooaguc2xpY2UoMCwgZ2V0TXlWYXIoJ+WIhumbhue7iCcpKTtcXG5wdXRNeVZhcign5pi+56S655qE5Ymn6ZuG5YiX6KGoJywg5pi+56S655qE5Ymn6ZuG5YiX6KGoKTtcXG5pbmRleCA9IDE7XFxu5pi+56S655qE5Ymn6ZuG5YiX6KGoLmZvckVhY2gobGlzdCA9PiB7XFxuICAgIGlmIChnZXRJdGVtKCfmqKHlvI8nLCAn5Y+M6L65JykgPT0gJ+WIl+ihqCcpIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGxpc3QubG9uZ190aXRsZSxcXG4gICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICB1cmw6IGxpc3QubGluayArIGxhenksXFxuICAgICAgICAgICAgZGVzYzogbGlzdC50aXRsZS5tYXRjaCgvWzAtOV0vKSA/IChsaXN0LmJhZGdlICsgJ+esrCcgKyBsaXN0LnRpdGxlICsgJ+ivnScpIDogbGlzdC50aXRsZSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBsaXN0LmxpbmssXFxuICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWQsXFxuICAgICAgICAgICAgICAgIGJ2aWQ6IGxpc3QuYnZpZCxcXG4gICAgICAgICAgICAgICAgY2lkOiBsaXN0LmNpZCxcXG4gICAgICAgICAgICAgICAgYmFkZ2U6IGxpc3QuYmFkZ2VcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGxpc3QubG9uZ190aXRsZSxcXG4gICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICB1cmw6IGxpc3QubGluayArIGxhenksXFxuICAgICAgICAgICAgZGVzYzogbGlzdC50aXRsZS5tYXRjaCgvWzAtOV0vKSA/IChsaXN0LmJhZGdlICsgJ+esrCcgKyBsaXN0LnRpdGxlICsgJ+ivnScpIDogbGlzdC50aXRsZSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzInLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBsaXN0LmxpbmssXFxuICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWQsXFxuICAgICAgICAgICAgICAgIGJ2aWQ6IGxpc3QuYnZpZCxcXG4gICAgICAgICAgICAgICAgY2lkOiBsaXN0LmNpZCxcXG4gICAgICAgICAgICAgICAgYmFkZ2U6IGxpc3QuYmFkZ2VcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBpbmRleCArPSAxO1xcbn0pO1xcbnNldFJlc3VsdChkKTtcXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcInVw5Li76aG1XCIsXCJwYXRoXCI6XCJ1cEhvbWVcIixcInJ1bGVcIjpcImpzOlxcbnZhciBkID0gW107XFxuLy8g6aKE5aSE55CGXFxucHV0TXlWYXIoJ3VwSW5mbycsICflhbMnKTtcXG5zZXRQYWdlVGl0bGUoTVlfUEFSQU1TLnRpdGxlKTtcXG5pbWdMaW5rID0gc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpO1xcbi8vIOmYsuatouWPjeeIrOiZq++8jOS7juS4iuS4gOS4qumhtemdouS8oOmAkuaVsOaNruKAlOKAlOWPjeeIrOiZq+S4pemHjVxcbnVwTWlkID0gTVlfUEFSQU1TLm1pZCArIFxcXCJcXFwiO1xcbnVwTmFtZSA9IE1ZX1BBUkFNUy50aXRsZTtcXG51cEZhY2UgPSBNWV9QQVJBTVMuZmFjZTtcXG5yZWxhdGlvbiA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLnVzZXJNYXBwaW5nKHVwTWlkKTtcXG4vLyDlpLTlg4/moI9cXG5kLnB1c2goe1xcbiAgICB0aXRsZTogJzxmb250IGNvbG9yPVxcXCJibHVlXFxcIj4nICsgdXBOYW1lICsgJzwvZm9udD4nLFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKHVwTWlkKSA9PiB7XFxuICAgICAgICBpZiAoZ2V0TXlWYXIoJ3VwSW5mbycsICflhbMnKSA9PSAn5byAJykge1xcbiAgICAgICAgICAgIGRlbGV0ZUl0ZW0oJ3VwSW5mbycpO1xcbiAgICAgICAgICAgIHB1dE15VmFyKCd1cEluZm8nLCAn5YWzJyk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgIC8vIOeUqOaIt+WfuuacrOS/oeaBr1xcbiAgICAgICAgICAgICAgICBxdWVyeUpzb24gPSB7XFxuICAgICAgICAgICAgICAgICAgICBtaWQ6IHVwTWlkLFxcbiAgICAgICAgICAgICAgICAgICAgdG9rZW46ICcnLFxcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06ICd3ZWInLFxcbiAgICAgICAgICAgICAgICAgICAgd2ViX2xvY2F0aW9uOiAxNTUwMTAxXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgcGFybXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5nZXRXYmlFbmMocXVlcnlKc29uKTtcXG4gICAgICAgICAgICAgICAgaW5mb0xpbmsgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc3BhY2Uvd2JpL2FjYy9pbmZvPycgKyBwYXJtcztcXG4gICAgICAgICAgICAgICAgdXBEYXRhID0gSlNPTi5wYXJzZShmZXRjaChpbmZvTGluaywge1xcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IGNvb2tpZT1KU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pKS5kYXRhO1xcbiAgICAgICAgICAgICAgICB1cE5hbWUgPSB1cERhdGEubmFtZTtcXG4gICAgICAgICAgICAgICAgdXBTZXggPSB1cERhdGEuc2V4O1xcbiAgICAgICAgICAgICAgICB1cFNpZ24gPSB1cERhdGEuc2lnbjtcXG4gICAgICAgICAgICAgICAgdXBCaXJ0aGRheSA9IHVwRGF0YS5iaXJ0aGRheTtcXG4gICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgIHVwU2Nob29sID0gdXBEYXRhLnNjaG9vbC5uYW1lO1xcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICB1cFNjaG9vbCA9ICcnO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICB1cElkZW50aWZpY2F0aW9uID0gdXBEYXRhLm9mZmljaWFsLnRpdGxlO1xcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICB1cElkZW50aWZpY2F0aW9uID0gJyc7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgYWRkSXRlbUFmdGVyKCdjdXJyZW50VXAnLCB7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ3VwOicgKyB1cE5hbWUgKyAnXFxcXG5taWQ6JyArIHVwTWlkICsgJ1xcXFxu5oCn5YirOicgKyB1cFNleCArICdcXFxcbueUn+aXpTonICsgKHVwQmlydGhkYXkgPT0gJycgPyAn5pyq5aGr5YaZJyA6IHVwQmlydGhkYXkpICsgJ1xcXFxuJyArICh1cFNjaG9vbCA9PSAnJyA/ICcnIDogJ+WtpuagoTonICsgdXBTY2hvb2wgKyAnXFxcXG4nKSArICh1cFNpZ24gPT0gJycgPyAnXFxcXG4nIDogdXBTaWduICsgJ1xcXFxuJykgKyAodXBJZGVudGlmaWNhdGlvbiA9PSAnJyA/ICcnIDogJ+iupOivgTonKSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsb25nX3RleHQnLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3VwSW5mbydcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICBhZGRJdGVtQWZ0ZXIoJ2N1cnJlbnRVcCcsIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5aW95YOP5Ye65LqG54K55oSP5aSW77yf5LuA5LmI6YO95pyo5pyJ5ZGificsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbG9uZ190ZXh0JyxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICd1cEluZm8nXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBwdXRNeVZhcigndXBJbmZvJywgJ+W8gCcpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+S/oeaBr+aKmOWPoDonICsgZ2V0TXlWYXIoJ3VwSW5mbycsICflvIAnKVxcbiAgICB9LCB1cE1pZCksXFxuICAgIGltZzogdXBGYWNlICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGlkOiAnY3VycmVudFVwJ1xcbiAgICB9XFxufSwge1xcbiAgICBjb2xfdHlwZTogJ2xpbmUnXFxufSk7XFxuLy8g5YWs5ZGKXFxubm90aWNlVGV4dCA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3NwYWNlL25vdGljZT9taWQ9JyArIHVwTWlkICsgJyZqc29ucD1qc29ucCcsIHtcXG4gICAgaGVhZGVyczoge1xcbiAgICAgICAgXFxcIlVzZXItQWdlbnRcXFwiOiBQQ19VQSxcXG4gICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiLFxcbiAgICAgICAgXFxcIkNvb2tpZVxcXCI6IGNvb2tpZT1KU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxuICAgIH1cXG59KSkuZGF0YTtcXG5pZiAobm90aWNlVGV4dCAhPSAnJykge1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICflhazlkYonLFxcbiAgICAgICAgdXJsOiAkKCkucnVsZSgobm90aWNlVGV4dCkgPT4ge1xcbiAgICAgICAgICAgIHZhciBkID0gW107XFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICflhazlkYrvvJonICsgJ1xcXFxuXFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0XFxcXHQnICsgbm90aWNlVGV4dCxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsb25nX3RleHQnXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXG4gICAgICAgIH0sIG5vdGljZVRleHQpLFxcbiAgICAgICAgZGVzYzogbm90aWNlVGV4dCA9PSAnJyA/ICfmmoLml6DlhazlkYonIDogbm90aWNlVGV4dCxcXG4gICAgICAgIGNvbF90eXBlOiAndGV4dF8xJyxcXG4gICAgfSk7XFxufVxcbmQucHVzaCh7XFxuICAgIGNvbF90eXBlOiAnbGluZSdcXG59LCB7XFxuICAgIHRpdGxlOiByZWxhdGlvbixcXG4gICAgaW1nOiByZWxhdGlvbiA9PSAn5pyq5YWz5rOoJyA/IGltZ0xpbmsu5re75Yqg5YWz5rOoIDogaW1nTGluay7lt7LlhbPms6gsXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKCh1cE1pZCkgPT4ge1xcbiAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmNoYW5nZVVzZXJSZWxhdGlvbih1cE1pZCwgMTEpXFxuICAgIH0sIHVwTWlkKSxcXG4gICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgaWQ6ICdyZWxhdGlvbidcXG4gICAgfVxcbn0sIHtcXG4gICAgdGl0bGU6ICfliqjmgIEnLFxcbiAgICBpbWc6IGltZ0xpbmsu5Yqo5oCBLFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgodXBNaWQpID0+IHtcXG4gICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5P3A9ZnlwYWdlJykucnVsZSgodXBNaWQpID0+IHtcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcbiAgICAgICAgICAgIGxhdGVuZXdzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZ2V0RHluYW1pY0RhdGEoJ3VwU3BhY2UnLCB1cE1pZCk7XFxuICAgICAgICAgICAgZXZhbCgkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5zaG93RHluYW1pY0RhdGEoKSk7XFxuICAgICAgICAgICAgc2V0UmVzdWx0KGQpO1xcbiAgICAgICAgfSwgdXBNaWQpXFxuICAgIH0sIHVwTWlkKSxcXG4gICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbn0sIHtcXG4gICAgdGl0bGU6ICfkuJPmoI8nLFxcbiAgICBpbWc6IGltZ0xpbmsu5LiT5qCPLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvYWN0aWNsZUxpc3Q/cD1meXBhZ2VcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBtaWQ6IHVwTWlkXFxuICAgIH1cXG59KVxcbi8vIOeUqOaIt+inhumikS3lkIjpm4bjgIHns7vliJdcXG51cFZpZGVvID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcG9seW1lci9zcGFjZS9zZWFzb25zX3Nlcmllc19saXN0P21pZD0nICsgdXBNaWQgKyAnJnBhZ2VfbnVtPTEmcGFnZV9zaXplPTEwJywge1xcbiAgICBoZWFkZXJzOiB7XFxuICAgICAgICBcXFwiVXNlci1BZ2VudFxcXCI6IFBDX1VBLFxcbiAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCJcXG4gICAgfVxcbn0pKS5kYXRhLml0ZW1zX2xpc3RzO1xcbi8vIOinhumikeWQiOmbhuOAgeezu+WIl1xcbnRyeSB7XFxuICAgIHVwVmlkZW8uc2Vhc29uc19saXN0LmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICBzZWFzb25faWQgPSBsaXN0Lm1ldGEuc2Vhc29uX2lkO1xcbiAgICAgICAgLy8g5qCH6aKYLei3s+i9rOabtOWkmlxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogJzxmb250IGNvbG9yPVxcXCIjMzNjY2NjXFxcIj4nICsgbGlzdC5tZXRhLm5hbWUuc3Vic3RyaW5nKDAsIDMwKSArICc8L2ZvbnQ+XFxcXHRcXFxcdDxmb250IGNvbG9yPVxcXCJyZWRcXFwiPicgKyBsaXN0Lm1ldGEudG90YWwgKyAnPC9mb250PlxcdOKericsXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWQiOmbhuaWh+S7tuWkuSxcXG4gICAgICAgICAgICAvLyBpbWc6IGxpc3QubWV0YS5jb3ZlcisnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKHVwTWlkLCBzZWFzb25faWQpID0+IHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHk/ZnlwYWdlJykucnVsZSgodXBNaWQsIHNlYXNvbl9pZCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3BvbHltZXIvc3BhY2Uvc2Vhc29uc19hcmNoaXZlc19saXN0P21pZD0nICsgdXBNaWQgKyAnJnNlYXNvbl9pZD0nICsgc2Vhc29uX2lkICsgJyZzb3J0X3JldmVyc2U9ZmFsc2UmcGFnZV9udW09JyArIE1ZX1BBR0UgKyAnJnBhZ2Vfc2l6ZT0zMCc7XFxuICAgICAgICAgICAgICAgICAgICBWaWRlbyA9IEpTT04ucGFyc2UoZmV0Y2godSwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlVzZXItQWdlbnRcXFwiOiBQQ19VQSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KSkuZGF0YTtcXG4gICAgICAgICAgICAgICAgICAgIG1heFBhZ2UgPSBNYXRoLmNlaWwoVmlkZW8ucGFnZS50b3RhbCAvIFZpZGVvLnBhZ2UucGFnZV9zaXplKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChNWV9QQUdFIDw9IG1heFBhZ2UpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+W9k+WJjTrnrKwnICsgVmlkZW8ucGFnZS5wYWdlX251bSArICfpobVcXFxcdFxcXFx0XFxcXHTlhbHmnIknICsgbWF4UGFnZSArICfpobUsJyArIFZpZGVvLnBhZ2UudG90YWwgKyAn5p2h5pWw5o2uJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW8uYXJjaGl2ZXMuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0LnBpYyArICdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+aSreaUvumHj++8micgKyBsaXN0LnN0YXQudmlldyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXG4gICAgICAgICAgICAgICAgfSwgdXBNaWQsIHNlYXNvbl9pZClcXG4gICAgICAgICAgICB9LCB1cE1pZCwgc2Vhc29uX2lkKVxcbiAgICAgICAgfSk7XFxuICAgICAgICBpZiAobGlzdC5hcmNoaXZlcyA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgbG9nKGxpc3QubWV0YS5uYW1lICsgJ+S4uuepuicpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpZiAobGlzdC5hcmNoaXZlcy5sZW5ndGggPCAyKSB7XFxuICAgICAgICAgICAgICAgIGxpc3QuYXJjaGl2ZXMuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QudGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0LnBpYyArICdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgbGlzdC5zdGF0LnZpZXcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWRcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LmFyY2hpdmVzLmxlbmd0aCA9PSAwKSB7XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWlveWutuS8me+8jOi/meWutuS8meayoeacieWQiOmbhuinhumike+8gVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBcXFwi6KaB5LiN5Y6754K55Ye75YWo6YOo6KeG6aKR55yL55yLflxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LmFyY2hpdmVzW2ldLnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5hcmNoaXZlc1tpXS5waWMgKyAnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5pKt5pS+6YeP77yaJyArIGxpc3QuYXJjaGl2ZXNbaV0uc3RhdC52aWV3LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYXJjaGl2ZXNbaV0uYWlkXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pO1xcbn0gY2F0Y2ggKGUpIHtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn5ZCI6ZuG5Li656m6JyxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgZGVzYzogJ1NvcnJ5LOayoeacieaVsOaNruWRon4nLFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXG4gICAgfSk7XFxufVxcbnRyeSB7XFxuICAgIHVwVmlkZW8uc2VyaWVzX2xpc3QuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgIHNlcmllc19pZCA9IGxpc3QubWV0YS5zZXJpZXNfaWQ7XFxuICAgICAgICAvLyDmoIfpopgt6Lez6L2s5pu05aSaXFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcIiMzM2NjY2NcXFwiPicgKyBsaXN0Lm1ldGEubmFtZS5zdWJzdHJpbmcoMCwgMzApICsgJzwvZm9udD5cXFxcdFxcXFx0PGZvbnQgY29sb3I9XFxcInJlZFxcXCI+JyArIGxpc3QubWV0YS50b3RhbCArICc8L2ZvbnQ+XFx04p6uJyxcXG4gICAgICAgICAgICBpbWc6IGltZ0xpbmsu5ZCI6ZuG5paH5Lu25aS5LFxcbiAgICAgICAgICAgIC8vIGltZzogbGlzdC5tZXRhLmNvdmVyKydAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJyxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgodXBNaWQsIHNlcmllc19pZCkgPT4ge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eT9meXBhZ2UnKS5ydWxlKCh1cE1pZCwgc2VyaWVzX2lkKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc2VyaWVzL2FyY2hpdmVzP21pZD0nICsgdXBNaWQgKyAnJnNlcmllc19pZD0nICsgc2VyaWVzX2lkICsgJyZvbmx5X25vcm1hbD10cnVlJnNvcnQ9ZGVzYyZwbj0nICsgTVlfUEFHRSArICcmcHM9MzAnO1xcbiAgICAgICAgICAgICAgICAgICAgVmlkZW8gPSBKU09OLnBhcnNlKGZldGNoKHUsIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGE7XFxuICAgICAgICAgICAgICAgICAgICBtYXhQYWdlID0gTWF0aC5jZWlsKFZpZGVvLnBhZ2UudG90YWwgLyBWaWRlby5wYWdlLnNpemUpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1ZX1BBR0UgPD0gbWF4UGFnZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5b2T5YmNOuesrCcgKyBWaWRlby5wYWdlLm51bSArICfpobVcXFxcdFxcXFx0XFxcXHTlhbHmnIknICsgbWF4UGFnZSArICfpobUsJyArIFZpZGVvLnBhZ2UudG90YWwgKyAn5p2h5pWw5o2uJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgVmlkZW8uYXJjaGl2ZXMuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0LnBpYyArICdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+aSreaUvumHj++8micgKyBsaXN0LnN0YXQudmlldyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXG4gICAgICAgICAgICAgICAgfSwgdXBNaWQsIHNlcmllc19pZClcXG4gICAgICAgICAgICB9LCB1cE1pZCwgc2VyaWVzX2lkKVxcbiAgICAgICAgfSk7XFxuICAgICAgICBpZiAobGlzdC5hcmNoaXZlcyA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICAgICAgICAgbG9nKGxpc3QubWV0YS5uYW1lICsgJ+S4uuepuicpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpZiAobGlzdC5hcmNoaXZlcy5sZW5ndGggPCAyKSB7XFxuICAgICAgICAgICAgICAgIGxpc3QuYXJjaGl2ZXMuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QudGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0LnBpYyArICdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgbGlzdC5zdGF0LnZpZXcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWRcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LmFyY2hpdmVzLmxlbmd0aCA9PSAwKSB7XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWlveWutuS8me+8jOi/meWutuS8meayoeacieWQiOmbhuinhumike+8gVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBcXFwi6KaB5LiN5Y6754K55Ye75YWo6YOo6KeG6aKR55yL55yLflxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjsgaSsrKSB7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LmFyY2hpdmVzW2ldLnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5hcmNoaXZlc1tpXS5waWMgKyAnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5pKt5pS+6YeP77yaJyArIGxpc3QuYXJjaGl2ZXNbaV0uc3RhdC52aWV3LFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYXJjaGl2ZXNbaV0uYWlkXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0pO1xcbn0gY2F0Y2ggKGUpIHtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn57O75YiX5Li656m6JyxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgZGVzYzogJ1NvcnJ5LOayoeacieaVsOaNruWRon4nLFxcbiAgICAgICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXG4gICAgfSk7XFxufVxcbi8vIHVw5oqV56i/XFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6ICdUQeeahOinhumikSzngrnlh7vlsZXlvIDlhajpg6gnLFxcbiAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgodXBNaWQpID0+IHtcXG4gICAgICAgIHJldHVybiAkKCkucnVsZSgodXBNaWQpID0+IHtcXG4gICAgICAgICAgICB2YXIgZCA9IFtdO1xcbiAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgIHF1ZXJ5SnNvbiA9IHtcXG4gICAgICAgICAgICAgICAgICAgIG1pZDogdXBNaWQsXFxuICAgICAgICAgICAgICAgICAgICBwczogMzAsXFxuICAgICAgICAgICAgICAgICAgICB0aWQ6IGdldE15VmFyKCdfdGlkJywgJzAnKSxcXG4gICAgICAgICAgICAgICAgICAgIHNwZWNpYWxfdHlwZTogJycsXFxuICAgICAgICAgICAgICAgICAgICBwbjogZ2V0TXlWYXIoJ19wYWdlJywgJzEnKSxcXG4gICAgICAgICAgICAgICAgICAgIGtleXdvcmQ6ICcnLFxcbiAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICdwdWJkYXRlJyxcXG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiAnd2ViJyxcXG4gICAgICAgICAgICAgICAgICAgIC8vIHdlYl9sb2NhdGlvbjogMTU1MDEwMSxcXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyX2F2b2lkZWQ6IHRydWVcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBwYXJtcyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldFdiaUVuYyhxdWVyeUpzb24pO1xcbiAgICAgICAgICAgICAgICBkYXRhTGluayA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9zcGFjZS93YmkvYXJjL3NlYXJjaD8nICsgcGFybXM7XFxuICAgICAgICAgICAgICAgIHVwVmlkZW9EYXRhID0gSlNPTi5wYXJzZShmZXRjaChkYXRhTGluaywge1xcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IGNvb2tpZT1KU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pKS5kYXRhO1xcbiAgICAgICAgICAgICAgICB0bGlzdCA9IHVwVmlkZW9EYXRhLmxpc3QudGxpc3Q7XFxuICAgICAgICAgICAgICAgIHZsaXN0ID0gdXBWaWRlb0RhdGEubGlzdC52bGlzdDtcXG4gICAgICAgICAgICAgICAgLy8g5YiG57G75ZKM6aG156CBXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIoJ190aWQnLCAnMCcpID09IDAgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcInJlZFxcXCI+5YWo6YOoPC9mb250PicgOiAn5YWo6YOoJyxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignX3RpZCcsICgwICsgXFxcIlxcXCIpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcignX3BhZ2UnLCAoMSArIFxcXCJcXFwiKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgZm9yIChpdGVtIGluIHRsaXN0KSB7XFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAodGxpc3RbaXRlbV0udGlkICsgXFxcIlxcXCIpID09IGdldE15VmFyKCdfdGlkJywgJzAnKSA/ICfigJjigJjigJnigJk8Zm9udCBjb2xvcj1cXFwicmVkXFxcIj4nICsgKHRsaXN0W2l0ZW1dLm5hbWUgKyBgKCR7dGxpc3RbaXRlbV0uY291bnR9KWApICsgJzwvZm9udD4nIDogKHRsaXN0W2l0ZW1dLm5hbWUgKyBgKCR7dGxpc3RbaXRlbV0uY291bnR9KWApLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKCh0aWQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ190aWQnLCAodGlkICsgXFxcIlxcXCIpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ19wYWdlJywgKDEgKyBcXFwiXFxcIikpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB0bGlzdFtpdGVtXS50aWQpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJyxcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIG1heFBhZ2UgPSBNYXRoLmNlaWwodXBWaWRlb0RhdGEucGFnZS5jb3VudCAvIHVwVmlkZW9EYXRhLnBhZ2UucHMpO1xcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWdlID0gMTsgcGFnZSA8PSBtYXhQYWdlOyBwYWdlKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChwYWdlICsgXFxcIlxcXCIpID09IGdldE15VmFyKCdfcGFnZScsICcxJykgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcInJlZFxcXCI+JyArIChwYWdlICsgXFxcIlxcXCIpICsgJzwvZm9udD4nIDogKHBhZ2UgKyBcXFwiXFxcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKHBhZ2UpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ19wYWdlJywgKHBhZ2UgKyBcXFwiXFxcIikpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBwYWdlKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgLy8g5bmz6ZO66KeG6aKRXFxuICAgICAgICAgICAgICAgIHZsaXN0LmZvckVhY2goaXRlbSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBwdWJ0aW1lID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikudGltZUNvbnZlcnQoaXRlbS5jcmVhdGVkKTtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBpdGVtLnBpYyArICdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgaXRlbS5wbGF5ICsgJ1xcXFxuJyArIHB1YnRpbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogaXRlbS5haWRcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfpobXpnaLotbDkuKLkuoYuLi4nLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly9pMC5oZHNsYi5jb20vYmZzL2dlbmVyYWwvZjdiNjY3MDExYTQ2NjE1NzMyYzcwMWY0YmIxZDA3Zjc5M2Y4ZDFkZi5wbmdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5aSq6aKR57mB5LqG77yB56iN5ZCO5YaN6K+VficsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInBpY18xXFxcIlxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXG4gICAgICAgIH0sIHVwTWlkKVxcbiAgICB9LCB1cE1pZClcXG59KTtcXG5zZXRSZXN1bHQoZCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCJ1cOaQnOe0olwiLFwicGF0aFwiOlwidXBTZWFyY2hcIixcInJ1bGVcIjpcImpzOlxcbnNlYXdvcmQgPSBNWV9QQVJBTVMuc2Vhd29yZDtcXG52YXIgZCA9IFtdO1xcbnJlc3VsdERhdGE9JC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZ2V0U2VhcmNoUmVzKCdiaWxpX3VzZXInLHNlYXdvcmQsTVlfUEFHRSwzNik7XFxuaWYgKE1ZX1BBR0UgPD0gcmVzdWx0RGF0YS5udW1QYWdlcykge1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICflvZPliY0656ysJyArIHJlc3VsdERhdGEucGFnZSArICfpobVcXFxcdFxcXFx0XFxcXHTlhbHmnIknICsgcmVzdWx0RGF0YS5udW1QYWdlcyArICfpobUsJyArIHJlc3VsdERhdGEubnVtUmVzdWx0cyArICfmnaHmlbDmja4nLFxcbiAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICB9KTtcXG4gICAgcmVzdWx0RGF0YS5yZXN1bHQuZm9yRWFjaChsaXN0ID0+IHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCI8YmlnPjxmb250IGNvbG9yPSdibHVlJz5cXFwiICsgbGlzdC51bmFtZSArIFxcXCI8L2ZvbnQ+PC9iaWc+PHNtYWxsPlxcXCIgKyBsaXN0LnVzaWduICsgXFxcIjwvc21hbGw+XFxcIixcXG4gICAgICAgICAgICBpbWc6ICdodHRwczovLycgKyBsaXN0LnVwaWMgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1pZCxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QudW5hbWUsXFxuICAgICAgICAgICAgICAgIGZhY2U6ICdodHRwczovLycgKyBsaXN0LnVwaWNcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfSk7XFxufVxcbnNldFNlYXJjaFJlc3VsdChkKTtcXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcInZpZGVv5pCc57SiXCIsXCJwYXRoXCI6XCJ2aWRlb1NlYXJjaFwiLFwicnVsZVwiOlwianM6XFxuc2Vhd29yZCA9IE1ZX1BBUkFNUy5zZWF3b3JkO1xcbnZhciBkID0gW107XFxudmFyIHJlc3VsdERhdGE9JC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZ2V0U2VhcmNoUmVzKCd2aWRlbycsc2Vhd29yZCxNWV9QQUdFLDQyKTtcXG52YXIge3RpbWVDb252ZXJ0fT0kLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKTtcXG5pZiAoTVlfUEFHRSA8PSByZXN1bHREYXRhLm51bVBhZ2VzKSB7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+W9k+WJjTrnrKwnICsgcmVzdWx0RGF0YS5wYWdlICsgJ+mhtVxcXFx0XFxcXHRcXFxcdOWFseaciScgKyByZXN1bHREYXRhLm51bVBhZ2VzICsgJ+mhtSwnICsgcmVzdWx0RGF0YS5udW1SZXN1bHRzICsgJ+adoeaVsOaNricsXFxuICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgIH0pO1xcbiAgICByZXN1bHREYXRhLnJlc3VsdC5mb3JFYWNoKGxpc3QgPT4ge1xcbiAgICAgICAgLy8gdGl0bGU9bGlzdC50aXRsZS5yZXBsYWNlKCc8ZW0gY2xhc3M9XFxcXFxcXCJrZXl3b3JkXFxcXFxcXCI+JywnPGZvbnQgY29sb3I9XFxcInJlZFxcXCI+JykucmVwbGFjZSgnPC9lbT4nLCc8L2ZvbnQ+JylcXG4gICAgICAgIHRpdGxlID0gbGlzdC50aXRsZS5yZXBsYWNlKC88ZW0gY2xhc3M9XFxcXFxcXCJrZXl3b3JkXFxcXFxcXCI+L2csICcnKS5yZXBsYWNlKC88XFxcXC9lbT4vZywgJycpXFxuICAgICAgICBwYnRpbWU9dGltZUNvbnZlcnQobGlzdC5wdWJkYXRlKTtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcbiAgICAgICAgICAgIGltZzogJ2h0dHBzOi8vJyArIGxpc3QucGljICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgZGVzYzogJ+KAnOKAnOKAneKAnTxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPuaSreaUvumHjzonK2xpc3QucGxheSsnXFxcXHRcXFxcdFxcXFx05by55bmVOicrbGlzdC5kYW5tYWt1KydcXFxcdFxcXFx0XFxcXHTllpzmrKI6JytsaXN0Lmxpa2UrJ1xcXFxu5Y+R5biD5pe26Ze0OicrcGJ0aW1lKyc8L2ZvbnQ+PC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIC8vIOinhumikeagh+ivhlxcbiAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkLFxcbiAgICAgICAgICAgICAgICBidmlkOmxpc3QuYnZpZCxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH0pO1xcbn1cXG5zZXRTZWFyY2hSZXN1bHQoZCk7XFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8xX2xlZnRfcGljXCIsXCJuYW1lXCI6XCLmjqjpgIFcIixcInBhdGhcIjpcImZlZWRcIixcInJ1bGVcIjpcIiQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldEZlZWQoKS5mb3JFYWNoKGl0ZW0gPT4ge1xcblxcbsKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgdGl0bGU6IGl0ZW0udGl0bGUsXFxuXFxuwqAgwqAgwqAgwqAgaW1nOiBpdGVtLnBpYysnQFJlZmVyZXI9JyxcXG5cXG7CoCDCoCDCoCDCoCBkZXNjOiAndXA6JyArIGl0ZW0ub3duZXIubmFtZSArICdcXFxcbicgKyBpdGVtLnN0YXQudmlldyArIFxcXCLmkq3mlL7igLtcXFwiICsgaXRlbS5zdGF0Lmxpa2UgKyBcXFwi54K56LWeXFxcIixcXG5cXG7CoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcblxcbsKgIMKgIMKgIMKgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuXFxuwqAgwqAgwqAgwqAgZXh0cmE6IHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCAvLyBpZOWFtuWunuaYr2FpZFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGFpZDogaXRlbS5pZCxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBjaWQ6IGl0ZW0uY2lkLFxcblxcbsKgIMKgIMKgIMKgIH1cXG5cXG7CoCDCoCB9KVxcblxcbn0pXFxuXFxuXFxuXCJ9LHtcImNvbF90eXBlXCI6XCJ0ZXh0XzFcIixcIm5hbWVcIjpcIkFQSVwiLFwicGF0aFwiOlwiYXBpXCIsXCJydWxlXCI6XCIvLyBwYXJ0MTrogZrlkIjlh73mlbAtLS0tLS0tLS0tLS0tLS0tXFxuLy8g55m75b2V6aqM6K+BXFxuJC5leHBvcnRzLmlzTG9nZ2VkSW4gPSBmdW5jdGlvbiAoKSB7XFxuICAgIGlmIChmaWxlRXhpc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkge1xcbiAgICAgICAgYmlsaURhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSk7XFxuICAgICAgICBpZiAoYmlsaURhdGEudXNlckxpc3QubGVuZ3RoID09IDApIHtcXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcbiAgICAgICAgICAgICAgICBcXFwidXNlck5hbWVcXFwiOiAn5pyq55m75b2VJyxcXG4gICAgICAgICAgICAgICAgXFxcInVzZXJNaWRcXFwiOiAnJyxcXG4gICAgICAgICAgICAgICAgXFxcInVzZXJGYWNlXFxcIjogJycsXFxuICAgICAgICAgICAgICAgIFxcXCJ0eXBlXFxcIjogZmFsc2VcXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfVxcbiAgICAgICAgY3VycmVudFVzZXIgPSBiaWxpRGF0YS51c2VyTGlzdFswXTtcXG4gICAgICAgIHZhciBjb29raWUgPSBjdXJyZW50VXNlci5jb29raWU7XFxuICAgICAgICBsZXQgdXNlcmluZm8gPSBKU09OLnBhcnNlKGZldGNoKFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL25hdlxcXCIsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBjb29raWVcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KSkuZGF0YTtcXG4gICAgICAgIGlmICh1c2VyaW5mby5pc0xvZ2luID09PSBmYWxzZSkge1xcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XFxuICAgICAgICAgICAgICAgIFxcXCJ1c2VyTmFtZVxcXCI6ICfmnKrnmbvlvZUnLFxcbiAgICAgICAgICAgICAgICBcXFwidXNlck1pZFxcXCI6ICcnLFxcbiAgICAgICAgICAgICAgICBcXFwidXNlckZhY2VcXFwiOiAnJyxcXG4gICAgICAgICAgICAgICAgXFxcInR5cGVcXFwiOiBmYWxzZVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGN1cnJlbnRVc2VyLnVzZXJOYW1lID0gdXNlcmluZm8udW5hbWU7XFxuICAgICAgICAgICAgY3VycmVudFVzZXIudXNlck1pZCA9IHVzZXJpbmZvLm1pZDtcXG4gICAgICAgICAgICAvLyAx77ya5Lya5ZGY5byA6YCa77ybMO+8muacquW8gOmAmlxcbiAgICAgICAgICAgIGN1cnJlbnRVc2VyLnZpcFN0YXR1cyA9IHVzZXJpbmZvLnZpcFN0YXR1cztcXG4gICAgICAgICAgICBjdXJyZW50VXNlci5mYWNlID0gdXNlcmluZm8uZmFjZSArIFxcXCJAUmVmZXJlcj1cXFwiO1xcbiAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0JywgSlNPTi5zdHJpbmdpZnkoYmlsaURhdGEpKTtcXG4gICAgICAgICAgICAvLyByZXR1cm4gdHJ1ZTtcXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcbiAgICAgICAgICAgICAgICBcXFwidXNlck5hbWVcXFwiOiBjdXJyZW50VXNlci51c2VyTmFtZSxcXG4gICAgICAgICAgICAgICAgXFxcInVzZXJNaWRcXFwiOiBjdXJyZW50VXNlci51c2VyTWlkLFxcbiAgICAgICAgICAgICAgICBcXFwidXNlckZhY2VcXFwiOiBjdXJyZW50VXNlci5mYWNlLFxcbiAgICAgICAgICAgICAgICBcXFwidHlwZVxcXCI6IHRydWVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XFxuICAgICAgICAgICAgXFxcInVzZXJOYW1lXFxcIjogJ+acqueZu+W9lScsXFxuICAgICAgICAgICAgXFxcInVzZXJNaWRcXFwiOiAnJyxcXG4gICAgICAgICAgICBcXFwidXNlckZhY2VcXFwiOiAnJyxcXG4gICAgICAgICAgICBcXFwidHlwZVxcXCI6IGZhbHNlXFxuICAgICAgICB9KTtcXG4gICAgfVxcbn1cXG4vLyDlk5Tlk6nop4bpopHop6PmnpDvvJrojrflj5bmkq3mlL7lnLDlnYAr5o+Q5Lqk5pKt5pS+6K6w5b2VXFxuJC5leHBvcnRzLmJpbGlMYXp5ID0gZnVuY3Rpb24gKGlkLCBjaWQsIHFuKSB7XFxuICAgIC8vIOmHjee9ruWOn+eUn+W8ueW5lee7n+S4gOW8ueW5leWkp+Wwj+OAgeS/ruaUueatpemVv1xcbiAgICBmdW5jdGlvbiBvdmVycmlkZVNhdmUoZG0pIHtcXG4gICAgICAgIHZhciBkYW5tdURhdGEgPSByZXF1ZXN0KGRtKTtcXG4gICAgICAgIC8vIOWtl+S9k+Wkp+Wwj+OAgeW8ueW5leatpemVv1xcbiAgICAgICAgdmFyIGRhbm11U2V0dGluZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2hpa2VyOi8vZmlsZXMvZG3nm5LlrZAvc2V0dGluZ3MuanNvbicpKTtcXG4gICAgICAgIHZhciBzaXplID0gZGFubXVTZXR0aW5nLmZvbnRTaXplO1xcbiAgICAgICAgdmFyIHN0ZXAgPSBkYW5tdVNldHRpbmcuc3RlcDtcXG4gICAgICAgIHZhciBkYXRhID0gJyc7XFxuICAgICAgICB0ZCA9IHBkZmEoZGFubXVEYXRhLCAnaSYmZCcpO1xcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZC5sZW5ndGg7IGkgKz0gc3RlcCkge1xcbiAgICAgICAgICAgIHRpbWVwb2ludCA9IHBkZmgodGRbaV0sICdkJiZwJykuc3BsaXQoXFxcIixcXFwiKVswXTtcXG4gICAgICAgICAgICBjdCA9IHBkZmgodGRbaV0sICdkJiZwJykuc3BsaXQoXFxcIixcXFwiKVsxXTtcXG4gICAgICAgICAgICBjb2xvciA9IHBkZmgodGRbaV0sICdkJiZwJykuc3BsaXQoXFxcIixcXFwiKVszXTtcXG4gICAgICAgICAgICAvLyDlvLnluZXlhoXlrrlcXG4gICAgICAgICAgICBjb250ZW50ID0gcGRmaCh0ZFtpXSwgJ2QmJlRleHQnKTtcXG4gICAgICAgICAgICBpZiAoY29udGVudC5pbmRleE9mKCc8JykgIT0gLTEgfHwgY29udGVudC5pbmRleE9mKCc+JykgIT0gLTEgfHwgY29udGVudC5pbmRleE9mKCcmJykgIT0gLTEgfHwgY29udGVudC5pbmRleE9mKCdcXFxcdTAwMDAnKSAhPSAtMSB8fCBjb250ZW50LmluZGV4T2YoJ1xcXFxiJykgIT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRlbXBkYXRhID0gYDxkIHA9XFxcIiR7TWF0aC5yb3VuZCh0aW1lcG9pbnQpfSwke2N0fSwke3NpemV9LCR7Y29sb3J9LDBcXFwiPiR7Y29udGVudH08L2Q+XFxcXG5gO1xcbiAgICAgICAgICAgIGRhdGEgKz0gdGVtcGRhdGE7XFxuICAgICAgICB9XFxuICAgICAgICBkYW5tdXN0ciA9IGA8P3htbCB2ZXJzaW9uPVxcXCIxLjBcXFwiIGVuY29kaW5nPVxcXCJVVEYtOFxcXCI/PlxcXFxuPGk+XFxcXG4ke2RhdGF9PC9pPmA7XFxuICAgICAgICBzYXZlRmlsZShkbSwgZGFubXVzdHIpO1xcbiAgICB9XFxuICAgIC8vIOWIpOaWreaYr+WQpumHjeWGmVxcbiAgICB2YXIgZG0gPSAnaHR0cHM6Ly9jb21tZW50LmJpbGliaWxpLmNvbS8nICsgY2lkICsgJy54bWwnO1xcbiAgICBpZiAoZ2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKSA9PSAndHJ1ZScpIHtcXG4gICAgICAgIGZpbGUgPSAnaHR0cHM6Ly9jb21tZW50LmJpbGliaWxpLmNvbS8nICsgY2lkICsgJy54bWwnO1xcbiAgICAgICAgZG0gPSAnaGlrZXI6Ly9maWxlcy9jYWNoZS9kYW5tdS8nICsgJ2JpbGlfZnJvbV8nICsgZ2V0UGFnZVRpdGxlKCkgKyAnLnhtbCc7XFxuICAgICAgICBkb3dubG9hZEZpbGUoZmlsZSwgZG0pO1xcbiAgICAgICAgb3ZlcnJpZGVTYXZlKGRtKTtcXG4gICAgfVxcbiAgICB2YXIgZGF0YSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldFVybChpZCwgY2lkLCBxbik7XFxuICAgIC8vIOaPkOS6pOWOhuWPsuiusOW9lVxcbiAgICAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5yZXBvcnRQcm9jZXNzKGlkLCBjaWQpO1xcbiAgICAvLyBxdWFsaXR5TnVtPWRhc2guYXVkaW8ubGVuZ3RoO+S4jemcgOimgeS6hu+8jOaJvuWIsOS6huabtOWlveeahOWIpOaWreaWueazle+8jOiZveeEtuaIkeW5tuS4jeefpemBk+i/meS6m+WPguaVsOeahOWQq+S5ieaYr+S7gOS5iFxcbiAgICB2aWRlb0xpc3QgPSBbXTtcXG4gICAgYXVkaW9MaXN0ID0gW107XFxuICAgIG5hbWVMaXN0ID0gW107XFxuICAgIGhlYWRlcnMgPSBbXTtcXG4gICAgdHJ5IHtcXG4gICAgICAgIGRhdGEuYXVkaW8uZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICBhdWRpb0xpc3QucHVzaChpdGVtLmJhc2VVcmwpO1xcbiAgICAgICAgICAgIGhlYWRlcnMucHVzaCh7XFxuICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbVxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUFcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0pO1xcbiAgICAgICAgZGF0YS52aWRlby5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgICAgIGlmIChpdGVtLmNvZGVjaWQgPT0gNykge1xcbiAgICAgICAgICAgICAgICB2aWRlb0xpc3QucHVzaChpdGVtLmJhc2VVcmwgKyBcXFwiI2lzVmlkZW89dHJ1ZSNcXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT0gMTI2KSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCfmnZzmr5Top4bnlYwnKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlkID09IDEyNSkge1xcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxpc3QucHVzaCgnSERSIOecn+W9qeiJsicpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gMTIwKSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCc0S+i2hea4hScpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gMTE2KSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCcxMDgwUDYw6auY5bin546HJyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSAxMTIpIHtcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJzEwODBQK+mrmOeggeeOhycpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gODApIHtcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJzEwODBQ6auY5riFJyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSA3NCkge1xcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxpc3QucHVzaCgnNzIwUDYw6auY5bin546HJyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSA2NCkge1xcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxpc3QucHVzaCgnNzIwUOmrmOa4hScpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gMzIpIHtcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJzQ4MFDmuIXmmbAnKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlkID09IDE2KSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCczNjBQ5rWB55WFJyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSA2KSB7XFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCcyNDBQ5p6B6YCfJyk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIC8vIOS/neaMgemVv+W6puS4gOiHtFxcbiAgICAgICAgd2hpbGUgKGF1ZGlvTGlzdC5sZW5ndGggPCB2aWRlb0xpc3QubGVuZ3RoKSB7XFxuICAgICAgICAgICAgLy8g5aSN5Yi2IGF1ZGlvTGlzdCDkuK3mnIDlkI7kuIDkuKrlhYPntKDlubbov73liqDliLDmlbDnu4TmnKvlsL5cXG4gICAgICAgICAgICBhdWRpb0xpc3QucHVzaChhdWRpb0xpc3RbYXVkaW9MaXN0Lmxlbmd0aCAtIDFdKTtcXG4gICAgICAgICAgICAvLyDlpI3liLYgaGVhZGVycyDkuK3mnIDlkI7kuIDkuKrlhYPntKDlubbov73liqDliLDmlbDnu4TmnKvlsL5cXG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goaGVhZGVyc1toZWFkZXJzLmxlbmd0aCAtIDFdKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XFxuICAgICAgICAgICAgdXJsczogdmlkZW9MaXN0LFxcbiAgICAgICAgICAgIGF1ZGlvVXJsczogYXVkaW9MaXN0LFxcbiAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXFxuICAgICAgICAgICAgbmFtZXM6IG5hbWVMaXN0LFxcbiAgICAgICAgICAgIGRhbm11OiBkbVxcbiAgICAgICAgfSlcXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgbG9nKFxcXCLmraPluLjop6Pph4rlpLHotKXvvIzov5vooYzmnIDlkI7lsJ3or5U6XFxcIik7XFxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcbiAgICAgICAgICAgIHVybHM6IFtkYXRhLmR1cmxbMF0udXJsICsgXFxcIiNpc1ZpZGVvPXRydWUjXFxcIl0sXFxuICAgICAgICAgICAgbmFtZXM6IFtkYXRhLnF1YWxpdHkgKyBcXFwiXFxcIl0sXFxuICAgICAgICAgICAgZGFubXU6IGRtLFxcbiAgICAgICAgICAgIGhlYWRlcnM6IFt7XFxuICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbVxcXCIsXFxuICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUFcXG4gICAgICAgICAgICB9XVxcbiAgICAgICAgfSlcXG4gICAgfVxcbn1cXG4vLyDnqI3lkI7lnKjnnIvigJTigJTmgLvmk43kvZzliKTmlq1cXG4kLmV4cG9ydHMuanVkZ2VUb3ZpZXcgPSBmdW5jdGlvbiAoYWlkKSB7XFxuICAgIHNlbGVjdGlvbiA9IFsn5re75YqgJywgJ+enu+mZpCddO1xcbiAgICByZXR1cm4gJChzZWxlY3Rpb24sIDEpLnNlbGVjdCgoYWlkKSA9PiB7XFxuICAgICAgICBpZiAoaW5wdXQgPT0gJ+a3u+WKoCcpIHtcXG4gICAgICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5hZGRUb3ZpZXcoYWlkKTtcXG4gICAgICAgICAgICBpZiAocmVzID09IDApIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+a3u+WKoOaIkOWKn1xcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtMTAxKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/otKblj7fmnKrnmbvlvZVcXFwiXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gLTExMSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vY3NyZuagoemqjOWksei0pVxcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtNDAwKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/or7fmsYLplJnor69cXFwiXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gOTAwMDEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIl+ihqOW3sua7oVxcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSA5MDAwMykge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v56i/5Lu25bey57uP6KKr5Yig6ZmkXFxcIlxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mnKrnn6XplJnor69cXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5kZWxUb3ZpZXcoYWlkKTtcXG4gICAgICAgICAgICBpZiAocmVzID09IDApIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+enu+mZpOaIkOWKn1xcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtMTAxKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/otKblj7fmnKrnmbvlvZVcXFwiXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gLTExMSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vY3NyZuagoemqjOWksei0pVxcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtNDAwKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/or7fmsYLplJnor69cXFwiXFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+acquefpemUmeivr1xcXCJcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0sIGFpZClcXG59XFxuLy8g5pON5L2c55So5oi35YWz57O7XFxuJC5leHBvcnRzLmNoYW5nZVVzZXJSZWxhdGlvbiA9IGZ1bmN0aW9uIChtaWQsIHJlX3NyYykge1xcbiAgICBzZWxlY3Rpb24gPSBbJ+WFs+azqCcsICflj5blhbMnLCAn5oKE5oKE5YWz5rOoJywgJ+WPlua2iOaChOaChOWFs+azqCcsICfmi4npu5EnLCAn5Y+W5raI5ouJ6buRJywgJ+i4ouWHuueyieS4nScsICfnp7vliqjliIbnu4QnXTtcXG4gICAgcmV0dXJuICQoc2VsZWN0aW9uLCAyKS5zZWxlY3QoKG1pZCwgcmVfc3JjKSA9PiB7XFxuICAgICAgICBpZiAoaW5wdXQgPT0gJ+enu+WKqOWIhue7hCcpIHtcXG4gICAgICAgICAgICBiZWZvcmVUYWdpZHMgPSBbXTtcXG4gICAgICAgICAgICBncm91cHMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5nZXRVc2VyR3JvdXAobWlkKTtcXG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoZ3JvdXBzKSA9PSAne30nKSB7XFxuICAgICAgICAgICAgICAgIGJlZm9yZVRhZ2lkcy5wdXNoKDApO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZ3JvdXBzKSB7XFxuICAgICAgICAgICAgICAgICAgICBiZWZvcmVUYWdpZHMucHVzaChwYXJzZUludChwcm9wKSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgLy8g6I635Y+W5oiR55qE5YiG57uEXFxuICAgICAgICAgICAgZm9jdXNHcm91cExpc3QgPSBbXTtcXG4gICAgICAgICAgICAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5nZXRNeUF0dGVudGlvbkdyb3VwTGlzdCgpLmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICAgICAgICAgIGZvY3VzR3JvdXBMaXN0LnB1c2gobGlzdC5uYW1lICsgJyAnICsgbGlzdC50YWdpZCk7XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuICQoZm9jdXNHcm91cExpc3QsIDEpLnNlbGVjdCgoYmVmb3JlVGFnaWRzLCBtaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgYWZ0ZXJUYWdpZHMgPSBbXTtcXG4gICAgICAgICAgICAgICAgYWZ0ZXJUYWdpZHMucHVzaChwYXJzZUludChpbnB1dC5zcGxpdCgnICcpWzFdKSk7XFxuICAgICAgICAgICAgICAgIGZpZHMgPSBbXTtcXG4gICAgICAgICAgICAgICAgZmlkcy5wdXNoKE51bWJlcihtaWQpKTtcXG4gICAgICAgICAgICAgICAgcmVzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikubW92ZVVzZXJzKGJlZm9yZVRhZ2lkcywgYWZ0ZXJUYWdpZHMsIGZpZHMpO1xcbiAgICAgICAgICAgICAgICBpZiAocmVzID09IDApIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/np7vliqjnlKjmiLfliLBcXFwiICsgaW5wdXQuc3BsaXQoJyAnKVswXSArIFxcXCLliIbnu4TmiJDlip9cXFwiXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMDEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/otKblj7fmnKrnmbvlvZVcXFwiXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMTEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9jc3Jm5qCh6aqM5aSx6LSlXFxcIlxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtNDAwKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v6K+35rGC6ZSZ6K+vXFxcIlxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAyMjEwNCkge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+aXoOadg+mZkFxcXCJcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gMjIxMDUpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mnKrlhbPms6hcXFwiXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5pyq55+l6ZSZ6K+vXFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSwgYmVmb3JlVGFnaWRzLCBtaWQpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+WFs+azqCcpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGFjdCA9IDE7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5Y+W5YWzJykge1xcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gMjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICfmgoTmgoTlhbPms6gnKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhY3QgPSAzO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+WPlua2iOaChOaChOWFs+azqCcpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGFjdCA9IDQ7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dCA9PSAn5ouJ6buRJykge1xcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gNTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09ICflj5bmtojmi4npu5EnKSB7XFxuICAgICAgICAgICAgICAgIHZhciBhY3QgPSA2O1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+i4ouWHuueyieS4nScpIHtcXG4gICAgICAgICAgICAgICAgdmFyIGFjdCA9IDc7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmFkZEF0dGVudGlvbihtaWQsIGFjdCwgcmVfc3JjKTtcXG4gICAgICAgICAgICByZWxhdGlvbiA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLnVzZXJNYXBwaW5nKG1pZCk7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSgncmVsYXRpb24nLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiByZWxhdGlvbixcXG4gICAgICAgICAgICAgICAgaW1nOiByZWxhdGlvbiA9PSAn5pyq5YWz5rOoJyA/IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKS7mt7vliqDlhbPms6ggOiBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyku5bey5YWz5rOoXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFwiICsgaW5wdXQgKyBcXFwi5oiQ5YqfXFxcIlxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMDEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+i0puWPt+acqueZu+W9lVxcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtMTExKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9jc3Jm5qCh6aqM5aSx6LSlXFxcIlxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC00MDApIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+ivt+axgumUmeivr1xcXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAyMjAwMSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5LiN6IO95a+56Ieq5bex6L+b6KGM5q2k5pON5L2cXFxcIlxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IDIyMDAzKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/nlKjmiLfkvY3kuo7pu5HlkI3ljZVcXFwiXFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+acquefpemUmeivr1xcXCJcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH0sIG1pZCwgcmVfc3JjKVxcbn1cXG4vLyDmmKDlsITnlKjmiLflhbPns7tcXG4kLmV4cG9ydHMudXNlck1hcHBpbmcgPSBmdW5jdGlvbiAobWlkKSB7XFxuICAgIHJlbGF0aW9uUmVzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZ2V0UmVsYXRpb24obWlkKTtcXG4gICAgaWYgKHJlbGF0aW9uUmVzLnJlbGF0aW9uLmF0dHJpYnV0ZSA9PSAwKSB7XFxuICAgICAgICByZWxhdGlvbiA9ICfmnKrlhbPms6gnXFxuICAgIH0gZWxzZSBpZiAocmVsYXRpb25SZXMucmVsYXRpb24uYXR0cmlidXRlID09IDEpIHtcXG4gICAgICAgIHJlbGF0aW9uID0gJ+aChOaChOWFs+azqCdcXG4gICAgfSBlbHNlIGlmIChyZWxhdGlvblJlcy5yZWxhdGlvbi5hdHRyaWJ1dGUgPT0gMikge1xcbiAgICAgICAgcmVsYXRpb24gPSAn5bey5YWz5rOoJ1xcbiAgICB9IGVsc2UgaWYgKHJlbGF0aW9uUmVzLnJlbGF0aW9uLmF0dHJpYnV0ZSA9PSA2KSB7XFxuICAgICAgICByZWxhdGlvbiA9ICflt7LkupLnsoknXFxuICAgIH0gZWxzZSBpZiAocmVsYXRpb25SZXMucmVsYXRpb24uYXR0cmlidXRlID09IDEyOCkge1xcbiAgICAgICAgcmVsYXRpb24gPSAn5bey5ouJ6buRJ1xcbiAgICB9XFxuICAgIHJldHVybiByZWxhdGlvbjtcXG59XFxuLy8g54K56LWe5pON5L2c6YC76L6RXFxuJC5leHBvcnRzLmxpa2VMb2dpYyA9IGZ1bmN0aW9uIChhaWQpIHtcXG4gICAgaGFzTGlrZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmhhc0xpa2UoYWlkKTtcXG4gICAgaWYgKGhhc0xpa2UgPT0gMCkge1xcbiAgICAgICAgcmVzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuc2V0TGlrZShhaWQsIDEpO1xcbiAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxuICAgICAgICAgICAgbGlrZSA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcIiArIGFpZCkpLmRhdGEuc3RhdC5saWtlO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oJ3NldExpa2UnLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAobGlrZSArIDEpICsgJycsXFxuICAgICAgICAgICAgICAgIGltZzogc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpLuW3sueCuei1nlxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/ngrnotZ7miJDlip9cXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v54K56LWe5Ye66ZSZ5LqGflxcXCI7XFxuICAgICAgICB9XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5zZXRMaWtlKGFpZCwgMik7XFxuICAgICAgICBpZiAocmVzID09IDApIHtcXG4gICAgICAgICAgICBsaWtlID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS92aWV3P2FpZD1cXFwiICsgYWlkKSkuZGF0YS5zdGF0Lmxpa2U7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSgnc2V0TGlrZScsIHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IChsaWtlIC0gMSkgKyAnJyxcXG4gICAgICAgICAgICAgICAgaW1nOiBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyku5pyq54K56LWeXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WPlua2iOeCuei1nuaIkOWKn1xcXCI7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lj5bmtojngrnotZ7lh7rplJnkuoZ+XFxcIjtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG4vLyDmlLbol4/mk43kvZzpgLvovpFcXG4kLmV4cG9ydHMuZmF2b3VyTG9naWMgPSBmdW5jdGlvbiAoYWlkLCBtaWQpIHtcXG4gICAgaGFzRmF2b3VyID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuaGFzRmF2b3VyKGFpZCk7XFxuICAgIGlmIChoYXNGYXZvdXIpIHtcXG4gICAgICAgIC8vIOenu+WHuuaUtuiXj1xcbiAgICAgICAgZmF2b3VySWRMaXN0ID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZ2V0RmF2b3VySWRMaXN0KGFpZCwgbWlkKTtcXG4gICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLnNldEZhdm91cihhaWQsICcnLCBmYXZvdXJJZExpc3QpO1xcbiAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxuICAgICAgICAgICAgbGlrZSA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcIiArIGFpZCkpLmRhdGEuc3RhdC5mYXZvcml0ZTtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCdzZXRGYXZvdXInLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAobGlrZSAtIDEpICsgJycsXFxuICAgICAgICAgICAgICAgIGltZzogc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpLuacquaUtuiXj1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lj5bmtojmlLbol4/miJDlip9cXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Y+W5raI5pS26JeP5Ye66ZSZ5LqGflxcXCI7XFxuICAgICAgICB9XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICAvLyDpgInmi6nmlLbol49cXG4gICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldENvbGxlY3Rpb25Hcm91cExpc3QoKVswXS5tZWRpYUxpc3RSZXNwb25zZS5saXN0O1xcbiAgICAgICAgR3JvdXBMaXN0ID0gW107XFxuICAgICAgICByZXMuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICBHcm91cExpc3QucHVzaChpdGVtLnRpdGxlICsgJyAnICsgaXRlbS5pZCk7XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiAkKEdyb3VwTGlzdCwgMSkuc2VsZWN0KChhaWQpID0+IHtcXG4gICAgICAgICAgICBzZWxlY3RJZCA9IHBhcnNlSW50KGlucHV0LnNwbGl0KCcgJylbMV0pXFxuICAgICAgICAgICAgcmVzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuc2V0RmF2b3VyKGFpZCwgc2VsZWN0SWQsICcnKTtcXG4gICAgICAgICAgICBpZiAocmVzID09IDApIHtcXG4gICAgICAgICAgICAgICAgbGlrZSA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcIiArIGFpZCkpLmRhdGEuc3RhdC5mYXZvcml0ZTtcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbSgnc2V0RmF2b3VyJywge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaWtlICsgMSkgKyAnJyxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpLuW3suaUtuiXj1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+aUtuiXj+aIkOWKn1xcXCI7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+aUtuiXj+WHuumUmeS6hn5cXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIGFpZCk7XFxuICAgIH1cXG59XFxuXFxuLy8gcGFydDI65pWj6KOFQVBJLS0tLS0tLS0tLS0tLS0tLVxcbi8vIOiOt+WPluaQnOe0oue7k+aenFxcbiQuZXhwb3J0cy5nZXRTZWFyY2hSZXMgPSBmdW5jdGlvbiAoc2VhcmNoX3R5cGUsIHNlYXdvcmQsIHBhZ2UsIHBhZ2VTaXplKSB7XFxuICAgIHF1ZXJ5SnNvbiA9IHtcXG4gICAgICAgIF9fcmVmcmVzaF9fOiB0cnVlLFxcbiAgICAgICAgX2V4dHJhOiAnJyxcXG4gICAgICAgIGNvbnRleHQ6ICcnLFxcbiAgICAgICAgcGFnZTogcGFnZSxcXG4gICAgICAgIHBhZ2Vfc2l6ZTogcGFnZVNpemUsXFxuICAgICAgICBvcmRlcjogJycsXFxuICAgICAgICBkdXJhdGlvbjogJycsXFxuICAgICAgICBmcm9tX3NvdXJjZTogJycsXFxuICAgICAgICBmcm9tX3NwbWlkOiAzMzMuMzM3LFxcbiAgICAgICAgcGxhdGZvcm06ICdwYycsXFxuICAgICAgICBoaWdobGlnaHQ6IDEsXFxuICAgICAgICBzaW5nbGVfY29sdW1uOiAwLFxcbiAgICAgICAga2V5d29yZDogc2Vhd29yZCxcXG4gICAgICAgIHNlYXJjaF90eXBlOiBzZWFyY2hfdHlwZSxcXG4gICAgICAgIHByZWxvYWQ6IHRydWUsXFxuICAgICAgICBjb20yY286IHRydWVcXG4gICAgfVxcbiAgICBwYXJtcyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldFdiaUVuYyhxdWVyeUpzb24pO1xcbiAgICBkYXRhTGluayA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3diaS9zZWFyY2gvdHlwZT8nICsgcGFybXM7XFxuICAgIGNvb2tpZSA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWU7XFxuICAgIHJlcyA9IEpTT04ucGFyc2UoZmV0Y2goZGF0YUxpbmssIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiVXNlci1BZ2VudFxcXCI6IFBDX1VBLFxcbiAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiLFxcbiAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBjb29raWVcXG4gICAgICAgIH0sXFxuICAgICAgICBtZXRob2Q6IFxcXCJHRVRcXFwiXFxuICAgIH0pKS5kYXRhO1xcbiAgICByZXR1cm4gcmVzO1xcbn1cXG4vLyDop4bpopHmjqjojZBcXG4kLmV4cG9ydHMuZ2V0RmVlZCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgbGV0IHUgPSBcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9pbmRleC90b3AvZmVlZC9yY21kXFxcIjtcXG4gICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoZmV0Y2godSwge1xcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxuICAgICAgICB9XFxuICAgIH0pKTtcXG4gICAgcmV0dXJuIHJlcy5kYXRhLml0ZW1cXG59XFxuLy8g6I635Y+W5pKt5pS+5Zyw5Z2AXFxuJC5leHBvcnRzLmdldFVybCA9IGZ1bmN0aW9uIChhdmlkLCBjaWQsIHFuKSB7XFxuICAgIHZhciBzZXR0aW5nID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpO1xcbiAgICB2YXIgQ29va2llID0gc2V0dGluZy5iZktleSAhPSAnJyA/IGJhc2U2NERlY29kZShiYXNlNjREZWNvZGUoc2V0dGluZy5iZktleSkpIDogc2V0dGluZy51c2VyTGlzdFswXS5jb29raWU7XFxuICAgIHRyeSB7XFxuICAgICAgICBsZXQgdSA9IHJlcXVlc3QoYnVpbGRVcmwoXFxcImh0dHA6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcGxheWVyL3BsYXl1cmxcXFwiLCB7XFxuICAgICAgICAgICAgXFxcImF2aWRcXFwiOiBhdmlkLFxcbiAgICAgICAgICAgIFxcXCJjaWRcXFwiOiBjaWQsXFxuICAgICAgICAgICAgXFxcInFuXFxcIjogcW4sXFxuICAgICAgICAgICAgXFxcImZudmVyXFxcIjogMCxcXG4gICAgICAgICAgICAvLyBcXFwiZm52YWxcXFwiOiA0MDQ4LFxcbiAgICAgICAgICAgIFxcXCJmbnZhbFxcXCI6IDE2LFxcbiAgICAgICAgICAgIFxcXCJmb3Vya1xcXCI6IDFcXG4gICAgICAgIH0pLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICBDb29raWU6IENvb2tpZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pXFxuICAgICAgICByZXMgPSBKU09OLnBhcnNlKHUpO1xcbiAgICAgICAgaWYgKHJlcy5kYXRhLmRhc2gpIHtcXG4gICAgICAgICAgICByZXR1cm4gcmVzLmRhdGEuZGFzaDtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgbG9nKFxcXCLmsqHmnInmib7liLBkYXNo5a2X5q61XFxcIik7XFxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN1cHBvcnRfZm9ybWF0cykge1xcbiAgICAgICAgICAgICAgICBpZiAodS5pbmNsdWRlcyhcXFwi6K+V55yLXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IFxcXCLmgqjliJrmiY3op4LnnIvnmoTop4bpopHmmK/or5XnnIvop4bpopHvvIzop4LnnIvlrozmlbTniYfmrrXor7fliY3lvoDlrpjnvZHotK3kubDvvIFcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgbG9nKG1zZyk7XFxuICAgICAgICAgICAgICAgICAgICBjb25maXJtKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+a4qemmqOaPkOekuicsIGNvbnRlbnQ6IG1zZywgY29uZmlybTogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGNhbmNlbDogJC50b1N0cmluZygoKSA9PiB7fSlcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhO1xcbiAgICAgICAgfVxcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIC8vIOS4gOS6uuS5i+S4i+esrOS4gOWto+eahOesrDHvvIwy6ZuG4oCU4oCU5Y+v5Lul6I635Y+W5aSn5Lya5ZGY5Ymn6ZuG55qE5YmNM21pblxcbiAgICAgICAgICAgIGxvZygn5bCd6K+V5pu05pS56K+35rGC5o6l5Y+jLi4uOicgKyBlKTtcXG4gICAgICAgICAgICBsZXQgdSA9IHJlcXVlc3QoYnVpbGRVcmwoXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2MvcGxheWVyL3dlYi9wbGF5dXJsXFxcIiwge1xcbiAgICAgICAgICAgICAgICBcXFwiYXZpZFxcXCI6IGF2aWQsXFxuICAgICAgICAgICAgICAgIFxcXCJjaWRcXFwiOiBjaWQsXFxuICAgICAgICAgICAgICAgIFxcXCJxblxcXCI6IHFuLFxcbiAgICAgICAgICAgICAgICBcXFwiZm52ZXJcXFwiOiAwLFxcbiAgICAgICAgICAgICAgICAvLyBcXFwiZm52YWxcXFwiOiA0MDQ4LFxcbiAgICAgICAgICAgICAgICBcXFwiZm52YWxcXFwiOiAxNixcXG4gICAgICAgICAgICAgICAgXFxcImZvdXJrXFxcIjogMVxcbiAgICAgICAgICAgIH0pLCB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICAgICAgICAgIENvb2tpZTogQ29va2llXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIC8vIOS7meeOi+eahOaXpeW4uOesrOS4ieWto+esrDEw6ZuG77yM5rKh5pyJZGFzaO+8jOacjeS6hlxcbiAgICAgICAgICAgIGlmIChKU09OLnBhcnNlKHUpLnJlc3VsdC5kYXNoKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHUpLnJlc3VsdC5kYXNoO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGxvZygn5bCd6K+V6LWw5Y2V57q/6Lev55S76LSoficpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh1KS5yZXN1bHQ7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcXG4gICAgICAgICAgICBsb2coJ2Nvb2tpZeacieayoeacieWPr+iDveWkseaViOS6huWRon4nKTtcXG4gICAgICAgICAgICByZXR1cm4gJyc7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuLy8g5o+Q5Lqk5pKt5pS+6K6w5b2VXFxuJC5leHBvcnRzLnJlcG9ydFByb2Nlc3MgPSBmdW5jdGlvbiAoYXZpZCwgY2lkKSB7XFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLnNwbGl0KCdiaWxpX2pjdD0nKVsxXSA6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcbiAgICBsZXQgcmVzID0gcG9zdChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9oaXN0b3J5L3JlcG9ydFxcXCIsIHtcXG4gICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICBcXFwiYWlkXFxcIjogYXZpZCxcXG4gICAgICAgICAgICBcXFwiY2lkXFxcIjogY2lkLFxcbiAgICAgICAgICAgIFxcXCJjc3JmXFxcIjogY3NyZixcXG4gICAgICAgICAgICBcXFwicHJvZ3Jlc3NcXFwiOiAwXFxuICAgICAgICB9LFxcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgIENvb2tpZTogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcbiAgICAgICAgfVxcbiAgICB9KVxcbn1cXG5cXG4vLyDojrflj5bor4TorrpcXG4kLmV4cG9ydHMuZ2V0Q29tbWVudHMgPSBmdW5jdGlvbiAoaWQsIHR5cGUsIHBhZ2UpIHtcXG4gICAgbGV0IHUgPSBidWlsZFVybChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9yZXBseVxcXCIsIHtcXG4gICAgICAgIFxcXCJ0eXBlXFxcIjogdHlwZSxcXG4gICAgICAgIFxcXCJvaWRcXFwiOiBpZCxcXG4gICAgICAgIFxcXCJwblxcXCI6IHBhZ2VcXG4gICAgfSk7XFxuICAgIGxldCByZXMgPSByZXF1ZXN0KHUsIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBDb29raWU6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH1cXG4gICAgfSlcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5kYXRhLnJlcGxpZXNcXG59XFxuLy8g5re75Yqg56iN5ZCO5Zyo55yL4oCU4oCU55yf55qE6bq75LqG77yM5Li65LuA5LmIZmV0Y2jlsLHplJnlkaJ+XFxuJC5leHBvcnRzLmFkZFRvdmlldyA9IGZ1bmN0aW9uIChhaWQpIHtcXG4gICAgbGV0IGNzcmYgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUuc3BsaXQoJ2JpbGlfamN0PScpWzFdIDogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LylbMV07XFxuICAgIGxldCB1ID0gXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3YyL2hpc3RvcnkvdG92aWV3L2FkZFxcXCI7XFxuICAgIGxldCByZXMgPSByZXF1ZXN0KGJ1aWxkVXJsKHUsIHtcXG4gICAgICAgIFxcXCJhaWRcXFwiOiBhaWQsXFxuICAgICAgICBcXFwiY3NyZlxcXCI6IGNzcmYsXFxuICAgIH0pLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCIsXFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH0sXFxuICAgICAgICBtZXRob2Q6IFxcXCJQT1NUXFxcIlxcbiAgICB9KVxcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpLmNvZGU7XFxufVxcbi8vIOWIoOmZpOeojeWQjuWcqOeci1xcbiQuZXhwb3J0cy5kZWxUb3ZpZXcgPSBmdW5jdGlvbiAoYWlkKSB7XFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLnNwbGl0KCdiaWxpX2pjdD0nKVsxXSA6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcbiAgICBsZXQgdSA9IFxcXCJodHRwOi8vYXBpLmJpbGliaWxpLmNvbS94L3YyL2hpc3RvcnkvdG92aWV3L2RlbFxcXCI7XFxuICAgIGxldCByZXMgPSByZXF1ZXN0KGJ1aWxkVXJsKHUsIHtcXG4gICAgICAgIFxcXCJhaWRcXFwiOiBhaWQsXFxuICAgICAgICBcXFwiY3NyZlxcXCI6IGNzcmYsXFxuICAgIH0pLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCIsXFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH0sXFxuICAgICAgICBtZXRob2Q6IFxcXCJQT1NUXFxcIlxcbiAgICB9KVxcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpLmNvZGU7XFxufVxcbi8vIOiuoumYheW9seinhijov73nlarjgIHov73liacpXFxuJC5leHBvcnRzLnN1YnNjcmliZUZpbG0gPSBmdW5jdGlvbiAoc2Vhc29uX2lkKSB7XFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLnNwbGl0KCdiaWxpX2pjdD0nKVsxXSA6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcbiAgICBsZXQgdSA9IFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3dlYi9mb2xsb3cvYWRkXFxcIjtcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QoYnVpbGRVcmwodSwge1xcbiAgICAgICAgXFxcInNlYXNvbl9pZFxcXCI6IHNlYXNvbl9pZCxcXG4gICAgICAgIFxcXCJjc3JmXFxcIjogY3NyZixcXG4gICAgfSksIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcIixcXG4gICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcbiAgICAgICAgfSxcXG4gICAgICAgIG1ldGhvZDogXFxcIlBPU1RcXFwiXFxuICAgIH0pXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykucmVzdWx0LnRvYXN0O1xcbn1cXG4vLyDlj5bmtojorqLpmIVcXG4kLmV4cG9ydHMuY2FuY2VsU3Vic2NyaWJlRmlsbSA9IGZ1bmN0aW9uIChzZWFzb25faWQpIHtcXG4gICAgbGV0IGNzcmYgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUuc3BsaXQoJ2JpbGlfamN0PScpWzFdIDogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LylbMV07XFxuICAgIGxldCB1ID0gXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvd2ViL2ZvbGxvdy9kZWxcXFwiO1xcbiAgICBsZXQgcmVzID0gcmVxdWVzdChidWlsZFVybCh1LCB7XFxuICAgICAgICBcXFwic2Vhc29uX2lkXFxcIjogc2Vhc29uX2lkLFxcbiAgICAgICAgXFxcImNzcmZcXFwiOiBjc3JmLFxcbiAgICB9KSwge1xcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiLFxcbiAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxuICAgICAgICB9LFxcbiAgICAgICAgbWV0aG9kOiBcXFwiUE9TVFxcXCJcXG4gICAgfSlcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5yZXN1bHQudG9hc3Q7XFxufVxcbi8q5pON5L2c55So5oi35YWz57O7XFxuZmlkOueUqOaIt21pZFxcbmFjdDrmk43kvZzku6PnoIFcXG5yZV9zcmPvvJrlhbPms6jmnaXmupBcXG4qL1xcbiQuZXhwb3J0cy5hZGRBdHRlbnRpb24gPSBmdW5jdGlvbiAobWlkLCBhY3QsIHJlX3NyYykge1xcbiAgICBsZXQgY3NyZiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pID09PSBudWxsID8gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKVsxXTtcXG4gICAgbGV0IHUgPSBcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcmVsYXRpb24vbW9kaWZ5XFxcIjtcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QoYnVpbGRVcmwodSwge1xcbiAgICAgICAgXFxcImZpZFxcXCI6IG1pZCxcXG4gICAgICAgIFxcXCJhY3RcXFwiOiBhY3QsXFxuICAgICAgICBcXFwicmVfc3JjXFxcIjogcmVfc3JjLFxcbiAgICAgICAgXFxcImNzcmZcXFwiOiBjc3JmXFxuICAgIH0pLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCIsXFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH0sXFxuICAgICAgICBtZXRob2Q6IFxcXCJQT1NUXFxcIlxcbiAgICB9KVxcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpLmNvZGU7XFxufVxcbi8vIOenu+WKqOWFs+azqOeUqOaIt+WIhue7hFxcbiQuZXhwb3J0cy5tb3ZlVXNlcnMgPSBmdW5jdGlvbiAoYmVmb3JlVGFnaWRzLCBhZnRlclRhZ2lkcywgZmlkcykge1xcbiAgICBsZXQgY3NyZiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pID09PSBudWxsID8gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKVsxXTtcXG4gICAgbGV0IHUgPSBcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcmVsYXRpb24vdGFncy9tb3ZlVXNlcnNcXFwiO1xcbiAgICBsZXQgcmVzID0gcmVxdWVzdChidWlsZFVybCh1LCB7XFxuICAgICAgICBcXFwiYmVmb3JlVGFnaWRzXFxcIjogYmVmb3JlVGFnaWRzLnRvU3RyaW5nKCksXFxuICAgICAgICBcXFwiYWZ0ZXJUYWdpZHNcXFwiOiBhZnRlclRhZ2lkcy50b1N0cmluZygpLFxcbiAgICAgICAgXFxcImZpZHNcXFwiOiBmaWRzLnRvU3RyaW5nKCksXFxuICAgICAgICBcXFwiY3NyZlxcXCI6IGNzcmZcXG4gICAgfSksIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcIixcXG4gICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcbiAgICAgICAgfSxcXG4gICAgICAgIG1ldGhvZDogXFxcIlBPU1RcXFwiXFxuICAgIH0pXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykuY29kZTtcXG59XFxuLy8g6I635Y+W55So5oi35YWz57O7XFxuJC5leHBvcnRzLmdldFJlbGF0aW9uID0gZnVuY3Rpb24gKG1pZCkge1xcbiAgICAvLyBodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9zcGFjZS9hY2MvcmVsYXRpb24/bWlkPSzml6fmjqXlj6NcXG4gICAgcGFybXMgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5nZXRXYmlFbmMoeyBtaWQ6IG1pZCB9KTtcXG4gICAgaW5mb0xpbmsgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc3BhY2Uvd2JpL2FjYy9yZWxhdGlvbj8nICsgcGFybXM7XFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QoaW5mb0xpbmssIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiVXNlci1BZ2VudFxcXCI6IFBDX1VBLFxcbiAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiLFxcbiAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxuICAgICAgICB9XFxuICAgIH0pKS5kYXRhXFxufVxcbi8vIOafpeivouebruagh+eUqOaIt+aJgOWcqOeahOWIhue7hFxcbiQuZXhwb3J0cy5nZXRVc2VyR3JvdXAgPSBmdW5jdGlvbiAobWlkKSB7XFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3JlbGF0aW9uL3RhZy91c2VyP2ZpZD1cXFwiICsgbWlkLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH1cXG4gICAgfSkpLmRhdGFcXG59XFxuLy8g6I635Y+W5YWz5rOo5YiG57uEXFxuJC5leHBvcnRzLmdldE15QXR0ZW50aW9uR3JvdXBMaXN0ID0gZnVuY3Rpb24gKCkge1xcbiAgICByZXR1cm4gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcmVsYXRpb24vdGFncz9qc29ucD1qc29ucFxcXCIsIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZSxcXG4gICAgICAgICAgICBcXFwiVXNlci1BZ2VudFxcXCI6IFBDX1VBLFxcbiAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiXFxuICAgICAgICB9XFxuICAgIH0pKS5kYXRhO1xcbn1cXG4vLyDmmK/lkKbngrnotZ5cXG4kLmV4cG9ydHMuaGFzTGlrZSA9IGZ1bmN0aW9uIChhaWQpIHtcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVxdWVzdChidWlsZFVybChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL2FyY2hpdmUvaGFzL2xpa2VcXFwiLCB7XFxuICAgICAgICBcXFwiYWlkXFxcIjogYWlkXFxuICAgIH0pLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH1cXG4gICAgfSkpLmRhdGFcXG59XFxuLy8g5piv5ZCm5pS26JePXFxuJC5leHBvcnRzLmhhc0Zhdm91ciA9IGZ1bmN0aW9uIChhaWQpIHtcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVxdWVzdChidWlsZFVybChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9mYXYvdmlkZW8vZmF2b3VyZWRcXFwiLCB7XFxuICAgICAgICBcXFwiYWlkXFxcIjogYWlkXFxuICAgIH0pLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH1cXG4gICAgfSkpLmRhdGEuZmF2b3VyZWRcXG59XFxuLy8g6KeG6aKR54K56LWeXFxuJC5leHBvcnRzLnNldExpa2UgPSBmdW5jdGlvbiAoYWlkLCBkZWFsV2F5KSB7XFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLnNwbGl0KCdiaWxpX2pjdD0nKVsxXSA6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcbiAgICBsZXQgcmVzID0gcG9zdChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL2FyY2hpdmUvbGlrZVxcXCIsIHtcXG4gICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICBcXFwiYWlkXFxcIjogYWlkLFxcbiAgICAgICAgICAgIFxcXCJsaWtlXFxcIjogZGVhbFdheSxcXG4gICAgICAgICAgICBcXFwiY3NyZlxcXCI6IGNzcmZcXG4gICAgICAgIH0sXFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXG4gICAgICAgIH1cXG4gICAgfSlcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5jb2RlO1xcbn1cXG4vLyDojrflj5bmlLbol4/liJfooahcXG4kLmV4cG9ydHMuZ2V0Q29sbGVjdGlvbkdyb3VwTGlzdCA9IGZ1bmN0aW9uICgpIHtcXG4gICAgcmV0dXJuIGNvbGxlY3Rpb25zID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvdjMvZmF2L2ZvbGRlci9saXN0NG5hdmlnYXRlXFxcIiwge1xcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLFxcbiAgICAgICAgfVxcbiAgICB9KSkuZGF0YTtcXG59XFxuLy8g5pS26JePL+WPlua2iOinhumikUFQSVxcbiQuZXhwb3J0cy5zZXRGYXZvdXIgPSBmdW5jdGlvbiAoYWlkLCBhZGRfbWVkaWFfaWRzLCBkZWxfbWVkaWFfaWRzKSB7XFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLnNwbGl0KCdiaWxpX2pjdD0nKVsxXSA6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcbiAgICBsZXQgcmVzID0gcG9zdChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20vbWVkaWFsaXN0L2dhdGV3YXkvY29sbC9yZXNvdXJjZS9kZWFsXFxcIiwge1xcbiAgICAgICAgYm9keToge1xcbiAgICAgICAgICAgIFxcXCJyaWRcXFwiOiBhaWQsXFxuICAgICAgICAgICAgXFxcInR5cGVcXFwiOiAyLFxcbiAgICAgICAgICAgIFxcXCJhZGRfbWVkaWFfaWRzXFxcIjogYWRkX21lZGlhX2lkcy50b1N0cmluZygpLFxcbiAgICAgICAgICAgIFxcXCJkZWxfbWVkaWFfaWRzXFxcIjogZGVsX21lZGlhX2lkcy50b1N0cmluZygpLFxcbiAgICAgICAgICAgIFxcXCJjc3JmXFxcIjogY3NyZlxcbiAgICAgICAgfSxcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZSxcXG4gICAgICAgICAgICBcXFwiUmVmZXJlclxcXCI6IFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb21cXFwiXFxuICAgICAgICB9XFxuICAgIH0pXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykuY29kZTtcXG59XFxuLy8g6I635Y+W6KeG6aKR5omA5Zyo5pS26JeP5aS5XFxuJC5leHBvcnRzLmdldEZhdm91cklkTGlzdCA9IGZ1bmN0aW9uIChhaWQsIHVzZXJNaWQpIHtcXG4gICAgbGV0IHUgPSBcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvdjMvZmF2L2ZvbGRlci9jcmVhdGVkL2xpc3QtYWxsXFxcIjtcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QoYnVpbGRVcmwodSwge1xcbiAgICAgICAgXFxcInR5cGVcXFwiOiAyLFxcbiAgICAgICAgXFxcInJpZFxcXCI6IGFpZCxcXG4gICAgICAgIFxcXCJ1cF9taWRcXFwiOiB1c2VyTWlkLFxcbiAgICB9KSwge1xcbiAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlckxpc3RbMF0uY29va2llLFxcbiAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbVxcXCJcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGZhdm91cklkTGlzdCA9IFtdO1xcbiAgICBKU09OLnBhcnNlKHJlcykuZGF0YS5saXN0LmZvckVhY2goKGl0ZW0pID0+IHtcXG4gICAgICAgIGlmIChpdGVtLmZhdl9zdGF0ZSA9PSAxKSB7XFxuICAgICAgICAgICAgZmF2b3VySWRMaXN0LnB1c2goaXRlbS5pZCk7XFxuICAgICAgICB9XFxuICAgIH0pXFxuICAgIHJldHVybiBmYXZvdXJJZExpc3Q7XFxufVxcbi8vIOeDreaYoOWJp+mbhuaXtumXtOi9tFxcbiQuZXhwb3J0cy5nZXRNb3ZpZXMgPSBmdW5jdGlvbiAodHlwZSwgYmVmb3JlLCBhZnRlcikge1xcbiAgICBsZXQgdSA9IGJ1aWxkVXJsKFxcXCJodHRwOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvd2ViL3RpbWVsaW5lXFxcIiwge1xcbiAgICAgICAgXFxcInR5cGVzXFxcIjogdHlwZSxcXG4gICAgICAgIFxcXCJiZWZvcmVcXFwiOiBiZWZvcmUsXFxuICAgICAgICBcXFwiYWZ0ZXJcXFwiOiBhZnRlclxcbiAgICB9KVxcbiAgICBsZXQgcmVzID0gSlNPTi5wYXJzZShyZXF1ZXN0KHUsIHtcXG4gICAgICAgIGhlYWRlcnM6IHtcXG4gICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcbiAgICAgICAgfVxcbiAgICB9KSlcXG4gICAgcmV0dXJuIHJlcy5yZXN1bHRcXG59XFxuLy8g6I635Y+W5LiT5qCP5paH56ugXFxuJC5leHBvcnRzLmdldFVzZXJBcnRpY2xlID0gZnVuY3Rpb24gKHVwTWlkLCBwYWdlKSB7XFxuICAgIGxldCB1ID0gXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3NwYWNlL2FydGljbGVcXFwiO1xcbiAgICBsZXQgcmVzID0gcmVxdWVzdChidWlsZFVybCh1LCB7XFxuICAgICAgICBcXFwibWlkXFxcIjogdXBNaWQsXFxuICAgICAgICBcXFwicG5cXFwiOiBwYWdlLFxcbiAgICAgICAgXFxcInBzXFxcIjogMTIsXFxuICAgICAgICBcXFwic29ydFxcXCI6ICdwdWJsaXNoX3RpbWUnXFxuICAgIH0pLCB7XFxuICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUsXFxuICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tXFxcIlxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5kYXRhO1xcbn1cXG4vLyDojrflj5bliqjmgIHmlbDmja5cXG4kLmV4cG9ydHMuZ2V0RHluYW1pY0RhdGEgPSBmdW5jdGlvbiAoZnJvbSwgdXBNaWQpIHtcXG4gICAgdmFyIG5leHRJbmZvID0ge307XFxuICAgIGlmIChNWV9QQUdFID09IDEpIHtcXG4gICAgICAgIGlmIChmcm9tID09ICd1cFNwYWNlJykge1xcbiAgICAgICAgICAgIHZhciB1ID0gXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3BvbHltZXIvd2ViLWR5bmFtaWMvdjEvZmVlZC9zcGFjZT9vZmZzZXQ9Jmhvc3RfbWlkPVxcXCIgKyB1cE1pZCArIFxcXCImdGltZXpvbmVfb2Zmc2V0PS00ODBcXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICB2YXIgdSA9IFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9wb2x5bWVyL3dlYi1keW5hbWljL3YxL2ZlZWQvYWxsP3RpbWV6b25lX29mZnNldD0tNDgwJnR5cGU9YWxsXFxcIjtcXG4gICAgICAgIH1cXG4gICAgICAgIGxhdGVuZXdzID0gSlNPTi5wYXJzZShmZXRjaCh1LCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZSxcXG4gICAgICAgICAgICAgICAgXFxcIlVzZXItQWdlbnRcXFwiOiBQQ19VQSxcXG4gICAgICAgICAgICAgICAgXFxcIlJlZmVyZXJcXFwiOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXCJcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KSkuZGF0YTtcXG4gICAgICAgIG5leHRJbmZvLm9mZnNldCA9IGxhdGVuZXdzLm9mZnNldDtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGlmIChmcm9tID09ICd1cFNwYWNlJykge1xcbiAgICAgICAgICAgIHZhciB1ID0gXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3BvbHltZXIvd2ViLWR5bmFtaWMvdjEvZmVlZC9zcGFjZT9vZmZzZXQ9XFxcIiArIHN0b3JhZ2UwLmdldE15VmFyKEpTT04uc3RyaW5naWZ5KE1ZX1BBR0UpKS5vZmZzZXQgKyBcXFwiJmhvc3RfbWlkPVxcXCIgKyB1cE1pZCArIFxcXCImdGltZXpvbmVfb2Zmc2V0PS00ODBcXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICB2YXIgdSA9IFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9wb2x5bWVyL3dlYi1keW5hbWljL3YxL2ZlZWQvYWxsP3RpbWV6b25lX29mZnNldD0tNDgwJnR5cGU9YWxsJm9mZnNldD1cXFwiICsgc3RvcmFnZTAuZ2V0TXlWYXIoSlNPTi5zdHJpbmdpZnkoTVlfUEFHRSkpLm9mZnNldDtcXG4gICAgICAgIH1cXG4gICAgICAgIGxhdGVuZXdzID0gSlNPTi5wYXJzZShmZXRjaCh1LCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICBcXFwiQ29va2llXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pKS5kYXRhO1xcbiAgICAgICAgbmV4dEluZm8ub2Zmc2V0ID0gbGF0ZW5ld3Mub2Zmc2V0O1xcbiAgICB9XFxuICAgIHN0b3JhZ2UwLnB1dE15VmFyKEpTT04uc3RyaW5naWZ5KE1ZX1BBR0UgKyAxKSwgbmV4dEluZm8pO1xcbiAgICByZXR1cm4gbGF0ZW5ld3M7XFxufVxcblxcbi8vIOKAlOKAlOeJueWIq+eahOihjOS4uuOAgeW3peWFt+WHveaVsOKAlOKAlFxcbi8vIOWxleekuuWKqOaAgeaVsOaNrijov5Tlm57lh73mlbDmlrnms5XnmoTlj6/miafooYzlrZfnrKbkuLIpXFxuJC5leHBvcnRzLnNob3dEeW5hbWljRGF0YSA9IGZ1bmN0aW9uICgpIHtcXG4gICAgcmV0dXJuICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgaW1nTGluayA9IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKTtcXG4gICAgICAgIGxhdGVuZXdzLml0ZW1zLmZvckVhY2gobGlzdCA9PiB7XFxuICAgICAgICAgICAgaWYgKGxpc3QudHlwZSA9PSAnRFlOQU1JQ19UWVBFX0FWJykge1xcbiAgICAgICAgICAgICAgICAvLyDmipXnqL/op4bpopHvvIjlvZPliY3lj5HluIPvvIniiJpcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5wdWJfdGltZSArICctJyArIGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLnB1Yl9hY3Rpb24gKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5mYWNlICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvdXBIb21lJyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJyxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLm5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IuZmFjZVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIOS4jeS4gOWumuacieaWh+Wtl+WVilxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYyA9PT0gbnVsbCA/ICc8Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+dXDlpKrmh5LkuobvvIzov57mlofmoYjpg73kuI3mg7PphY0uLi48L2ZvbnQ+JyA6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQpLnJlcGxhY2UoL1xcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcImhpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZVxcXCI+5p+l55yL6K+E6K66PC9hPicsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2UnLFxcbiAgICAgICAgICAgICAgICAgICAgLy8g6L+Z5Liq5LiN6IO955SobG9uZ190ZXh0XFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBsaXN0LmJhc2ljLmNvbW1lbnRfaWRfc3RyLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDFcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLnRpdGxlLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuYXJjaGl2ZS5jb3ZlciArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuYXJjaGl2ZS5kZXNjLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLmFpZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPueVmeiogDonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0LmNvbW1lbnQuY291bnQgKyAnXFxcXHRcXFxcdOWIhuS6qzonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0LmZvcndhcmQuY291bnQgKyAnXFxcXHRcXFxcdOWWnOasojonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0Lmxpa2UuY291bnQgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWKqOaAgei2s+i/uSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaydcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LnR5cGUgPT0gJ0RZTkFNSUNfVFlQRV9GT1JXQVJEJykge1xcbiAgICAgICAgICAgICAgICAvLyDlvJXnlKjvvIzlpJrlh7rkuoZvcmln5oyH5ZCR5LiA5LiqKOi/h+WOuynlt7Llj5HluIPnmoTop4bpopEs5YeG56Gu55qE6K+05piv5byV55So5LmL5YmN55qE5biW5a2Q5LiN5LiA5a6a5piv6KeG6aKR4oiaXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IuZmFjZSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5wdWJfdGltZSArICc8L2ZvbnQ+PC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvdXBIb21lJyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJyxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLm5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IuZmFjZVxcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAobGlzdC5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MgPT09IG51bGwgPyAnPGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPnVw5aSq5oeS5LqG77yM6L+e5paH5qGI6YO95LiN5oOz6YWNLi4uPC9mb250PicgOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYy50ZXh0KS5yZXBsYWNlKC9cXFxcbi9nLCAnPGJyPicpICsgJzxicj48YSBocmVmPVxcXCJoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2VcXFwiPuafpeeci+ivhOiuujwvYT4nLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3QuYmFzaWMuY29tbWVudF9pZF9zdHIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Lmf5piv57qv5paH5a2X77yM5Zug5Li65Y+q5piv5paH5a2XK+W8leeUqOaXqeW3suaKleeov+eahOinhumikVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDE3XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAvLyDlvJXnlKjnmoTlhoXlrrnigJTigJTmiKrmlq3vvIjmoLnmja7kuI3lkIznmoTlvJXnlKjnsbvlnovov5vooYzlpITnkIbvvIlcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnPHNtYWxsPjxzbWFsbD7kuIvpnaLlhoXlrrnmnaXoh6rlvJXnlKjnmoTluJblrZAsdXDmmK86PGEgaHJlZj1cXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXCI+JyArIGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSArICc8L2E+PC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZDogbGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2VcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgaWYgKGxpc3Qub3JpZy50eXBlID09ICdEWU5BTUlDX1RZUEVfQVYnKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyDlvJXnlKjop4bpopHor7Tor7RcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLm1ham9yLmFyY2hpdmUudGl0bGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLmNvdmVyICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLm1ham9yLmFyY2hpdmUuZGVzYyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLm1ham9yLmFyY2hpdmUuYWlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0Lm9yaWcudHlwZSA9PSAnRFlOQU1JQ19UWVBFX1dPUkQnKSB7XFxuICAgICAgICAgICAgICAgICAgICAvLyDlvJXnlKjmloflrZfor7Tor7RcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQgPT09IG51bGwgPyAnPGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPnVw5aSq5oeS5LqG77yM6L+e5paH5qGI6YO95LiN5oOz6YWNLi4uPC9mb250PicgOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQpLnJlcGxhY2UoL1xcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcImhpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZVxcXCI+5p+l55yL6K+E6K66PC9hPicsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g6K+E6K66aWTmnaXmupDpg73kuI3kuIDmoLdcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3Qub3JpZy5pZF9zdHIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOe6r+aWh+Wtl1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAxN1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcblxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3Qub3JpZy50eXBlID09ICdEWU5BTUlDX1RZUEVfRFJBVycpIHtcXG4gICAgICAgICAgICAgICAgICAgIC8vIOW8leeUqOWbvueJh+ivtOivtFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogKGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCA9PT0gbnVsbCA/ICc8Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+dXDlpKrmh5LkuobvvIzov57mlofmoYjpg73kuI3mg7PphY0uLi48L2ZvbnQ+JyA6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCkucmVwbGFjZSgvXFxcXG4vZywgJzxicj4nKSArICc8YnI+PGEgaHJlZj1cXFwiaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlXFxcIj7mn6XnnIvor4Torro8L2E+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuZHJhdy5pZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogMTFcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLm1ham9yLmRyYXcuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGl0ZW0uc3JjICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncGljXzNfc3F1YXJlJyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpdGVtLnNyYyArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBsb2coJ+WPr+iDvei/mOacieacqumAgumFjeeahOivtOivtOexu+WeiycpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIC8vIOWIhuWJslxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPueVmeiogDonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0LmNvbW1lbnQuY291bnQgKyAnXFxcXHRcXFxcdOWIhuS6qzonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0LmZvcndhcmQuY291bnQgKyAnXFxcXHRcXFxcdOWWnOasojonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0Lmxpa2UuY291bnQgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWKqOaAgei2s+i/uSxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaydcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LnR5cGUgPT0gJ0RZTkFNSUNfVFlQRV9XT1JEJykge1xcbiAgICAgICAgICAgICAgICAvLyDnuq/mloflrZdcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcImdyZXlcXFwiPicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5wdWJfdGltZSArICc8L2ZvbnQ+PC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2UgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS91cEhvbWUnLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBtaWQ6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLm1pZCxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWNlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5mYWNlXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYyA9PT0gbnVsbCA/ICc8Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+dXDlpKrmh5LkuobvvIzov57mlofmoYjpg73kuI3mg7PphY0uLi48L2ZvbnQ+JyA6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQpLnJlcGxhY2UoL1xcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcImhpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZVxcXCI+5p+l55yL6K+E6K66PC9hPicsXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2UnLFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5iYXNpYy5jb21tZW50X2lkX3N0cixcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnuq/mloflrZdcXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAxN1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAnPHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+55WZ6KiAOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQuY29tbWVudC5jb3VudCArICdcXFxcdFxcXFx05YiG5LqrOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQuZm9yd2FyZC5jb3VudCArICdcXFxcdFxcXFx05Zac5qyiOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQubGlrZS5jb3VudCArICc8L2ZvbnQ+PC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGltZ0xpbmsu5Yqo5oCB6Laz6L+5LFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcidcXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3QudHlwZSA9PSAnRFlOQU1JQ19UWVBFX0RSQVcnKSB7XFxuICAgICAgICAgICAgICAgIC8vIOWbvueJh+ivtOivtFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLm5hbWUsXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAnPHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1cXFwiZ3JleVxcXCI+JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLnB1Yl90aW1lICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IuZmFjZSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL3VwSG9tZScsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZDogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubWlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2U6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2VcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogKGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjID09PSBudWxsID8gJzxmb250IGNvbG9yPVxcXCJncmV5XFxcIj51cOWkquaHkuS6hu+8jOi/nuaWh+ahiOmDveS4jeaDs+mFjS4uLjwvZm9udD4nIDogbGlzdC5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCkucmVwbGFjZSgvXFxcXG4vZywgJzxicj4nKSArICc8YnI+PGEgaHJlZj1cXFwiaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlXFxcIj7mn6XnnIvor4Torro8L2E+JyxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZScsXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBsaXN0LmJhc2ljLmNvbW1lbnRfaWRfc3RyLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOebuOewv++8iOWbvueJh+WKqOaAge+8iVxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDExXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuZHJhdy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGl0ZW0uc3JjICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfM19zcXVhcmUnLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS5zcmMgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICc8c21hbGw+PHNtYWxsPjxmb250IGNvbG9yPVxcXCJncmV5XFxcIj7nlZnoqIA6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5jb21tZW50LmNvdW50ICsgJ1xcXFx0XFxcXHTliIbkuqs6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5mb3J3YXJkLmNvdW50ICsgJ1xcXFx0XFxcXHTllpzmrKI6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5saWtlLmNvdW50ICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogaW1nTGluay7liqjmgIHotrPov7ksXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmVfYmxhbmsnXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9KVxcbn1cXG4vLyDml7bpl7Tml6XmnJ/ovazmjaLlh73mlbBcXG4kLmV4cG9ydHMudGltZUNvbnZlcnQgPSBmdW5jdGlvbiAodGltZSkge1xcbiAgICBmdW5jdGlvbiBmb3JtYXREYXRlKGUsIHQpIHtcXG4gICAgICAgIGUgPSBuZXcgRGF0ZShlICogMTAwMCk7IC8v5pe26Ze05oiz5Li6MTDkvY3pnIAqMTAwMO+8jOaXtumXtOaIs+S4ujEz5L2N55qE6K+d5LiN6ZyA5LmYMTAwMFxcbiAgICAgICAgcmV0dXJuIHQucmVwbGFjZSgveXl5eXxZWVlZLywgZS5nZXRGdWxsWWVhcigpKVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC95eXxZWS8sIHIoZS5nZXRGdWxsWWVhcigpICUgMTAwLCAyKSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvbW18TU0vLCByKGUuZ2V0TW9udGgoKSArIDEsIDIpKVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9tfE0vZywgZS5nZXRNb250aCgpICsgMSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvZGR8REQvLCByKGUuZ2V0RGF0ZSgpLCAyKSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvZHxEL2csIGUuZ2V0RGF0ZSgpKVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9oaHxISC8sIHIoZS5nZXRIb3VycygpLCAyKSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvaHxIL2csIGUuZ2V0SG91cnMoKSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvaWl8SUkvLCByKGUuZ2V0TWludXRlcygpLCAyKSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvaXxJL2csIGUuZ2V0TWludXRlcygpKVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9zc3xTUy8sIHIoZS5nZXRTZWNvbmRzKCksIDIpKVxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9zfFMvZywgZS5nZXRTZWNvbmRzKCkpXFxuICAgICAgICAgICAgLnJlcGxhY2UoL3cvZywgZS5nZXREYXkoKSlcXG4gICAgICAgICAgICAucmVwbGFjZSgvVy9nLCBbXFxcIuaXpVxcXCIsIFxcXCLkuIBcXFwiLCBcXFwi5LqMXFxcIiwgXFxcIuS4iVxcXCIsIFxcXCLlm5tcXFwiLCBcXFwi5LqUXFxcIiwgXFxcIuWFrVxcXCJdW2UuZ2V0RGF5KCldKVxcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIHIoZSwgdCkge1xcbiAgICAgICAgZm9yICh2YXIgciA9IDAsIG4gPSB0IC0gKGUgKyBcXFwiXFxcIikubGVuZ3RoOyByIDwgbjsgcisrKSBlID0gXFxcIjBcXFwiICsgZTtcXG4gICAgICAgIHJldHVybiBlICsgXFxcIlxcXCJcXG4gICAgfVxcbiAgICByZXR1cm4gZm9ybWF0RGF0ZSh0aW1lLCAnWVlZWS1NTS1ERCBoaDppaTpzcycpO1xcbiAgICAvLyBjb25zb2xlLmxvZyhmb3JtYXREYXRlKDE2NjQwODk1MzIsICdZWVlZLU1NLUREIGhoOmlpOnNzJykpO1xcbn1cXG4vLyDnp5LmlbDliIbpkp/ooajovr7ovazmjaLlh73mlbBcXG4kLmV4cG9ydHMuZm9ybWF0U2Vjb25kcyA9IGZ1bmN0aW9uIChzZWNvbmRzKSB7XFxuICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApOyAvLyDorqHnrpfliIbpkp/mlbBcXG4gICAgbGV0IHJlbWFpbmluZ1NlY29uZHMgPSBzZWNvbmRzICUgNjA7IC8vIOiuoeeul+WJqeS9meeahOenkuaVsFxcbiAgICBsZXQgZm9ybWF0dGVkVGltZSA9IGAke21pbnV0ZXN9OiR7U3RyaW5nKHJlbWFpbmluZ1NlY29uZHMpLnBhZFN0YXJ0KDIsICcwJyl9YDtcXG4gICAgcmV0dXJuIGZvcm1hdHRlZFRpbWU7XFxufVxcblxcbi8vIELnq5lXYmnnrb7lkI3nrpfms5UoQWZ0ZXIgMjAyMy0zLGdldCByZXF1ZXN0IHdpdGggd2JpLilcXG4kLmV4cG9ydHMuZ2V0V2JpRW5jID0gZnVuY3Rpb24gKHF1ZXJ5SnNvbikge1xcbiAgICBjb25zdCBtaXhpbktleUVuY1RhYiA9IFtcXG4gICAgICAgIDQ2LCA0NywgMTgsIDIsIDUzLCA4LCAyMywgMzIsIDE1LCA1MCwgMTAsIDMxLCA1OCwgMywgNDUsIDM1LCAyNywgNDMsIDUsIDQ5LFxcbiAgICAgICAgMzMsIDksIDQyLCAxOSwgMjksIDI4LCAxNCwgMzksIDEyLCAzOCwgNDEsIDEzLCAzNywgNDgsIDcsIDE2LCAyNCwgNTUsIDQwLFxcbiAgICAgICAgNjEsIDI2LCAxNywgMCwgMSwgNjAsIDUxLCAzMCwgNCwgMjIsIDI1LCA1NCwgMjEsIDU2LCA1OSwgNiwgNjMsIDU3LCA2MiwgMTEsXFxuICAgICAgICAzNiwgMjAsIDM0LCA0NCwgNTJcXG4gICAgXTtcXG5cXG4gICAgLy8g5a+5IGltZ0tleSDlkowgc3ViS2V5IOi/m+ihjOWtl+espumhuuW6j+aJk+S5see8lueggVxcbiAgICBmdW5jdGlvbiBnZXRNaXhpbktleShvcmlnKSB7XFxuICAgICAgICBsZXQgdGVtcCA9ICcnO1xcbiAgICAgICAgbWl4aW5LZXlFbmNUYWIuZm9yRWFjaCgobikgPT4ge1xcbiAgICAgICAgICAgIHRlbXAgKz0gb3JpZ1tuXVxcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4gdGVtcC5zbGljZSgwLCAzMik7XFxuICAgIH1cXG5cXG4gICAgLy8g5Li66K+35rGC5Y+C5pWw6L+b6KGMIHdiaSDnrb7lkI1cXG4gICAgZnVuY3Rpb24gZW5jV2JpKHBhcmFtcywgaW1nX2tleSwgc3ViX2tleSkge1xcbiAgICAgICAgY29uc3QgbWl4aW5fa2V5ID0gZ2V0TWl4aW5LZXkoaW1nX2tleSArIHN1Yl9rZXkpLFxcbiAgICAgICAgICAgIGN1cnJfdGltZSA9IE1hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDApLFxcbiAgICAgICAgICAgIGNocl9maWx0ZXIgPSAvWyEnXFxcXChcXFxcKSpdL2dcXG4gICAgICAgIGxldCBxdWVyeSA9IFtdO1xcbiAgICAgICAgcGFyYW1zID0gT2JqZWN0LmFzc2lnbihwYXJhbXMsIHsgd3RzOiBjdXJyX3RpbWUgfSk7ICAgIC8vIOa3u+WKoCB3dHMg5a2X5q61XFxuICAgICAgICAvLyDmjInnhacga2V5IOmHjeaOkuWPguaVsFxcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5zb3J0KCkuZm9yRWFjaCgoa2V5KSA9PiB7XFxuICAgICAgICAgICAgcXVlcnkucHVzaChcXG4gICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgK1xcbiAgICAgICAgICAgICAgICAnPScgK1xcbiAgICAgICAgICAgICAgICAvLyDov4fmu6QgdmFsdWUg5Lit55qEIFxcXCIhJygpKlxcXCIg5a2X56ymXFxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCgoJycgKyBwYXJhbXNba2V5XSkucmVwbGFjZShjaHJfZmlsdGVyLCAnJykpXFxuICAgICAgICAgICAgKVxcbiAgICAgICAgfSlcXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuam9pbignJicpO1xcbiAgICAgICAgY29uc3Qgd2JpX3NpZ24gPSBtZDUocXVlcnkgKyBtaXhpbl9rZXkpOyAvLyDorqHnrpcgd19yaWRcXG4gICAgICAgIHJldHVybiBxdWVyeSArICcmd19yaWQ9JyArIHdiaV9zaWduO1xcbiAgICB9XFxuXFxuICAgIC8vIOiOt+WPluacgOaWsOeahCBpbWdfa2V5IOWSjCBzdWJfa2V5XFxuICAgIGZ1bmN0aW9uIGdldFdiaUtleXMoKSB7XFxuICAgICAgICBjb25zdCBqc29uX2NvbnRlbnQgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL25hdicsIHtcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxuICAgICAgICAgICAgICAgIFxcXCJVc2VyLUFnZW50XFxcIjogUENfVUEsXFxuICAgICAgICAgICAgICAgIFxcXCJSZWZlcmVyXFxcIjogXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFwiXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnXFxuICAgICAgICB9KSkuZGF0YTtcXG4gICAgICAgIGltZ191cmwgPSBqc29uX2NvbnRlbnQud2JpX2ltZy5pbWdfdXJsO1xcbiAgICAgICAgc3ViX3VybCA9IGpzb25fY29udGVudC53YmlfaW1nLnN1Yl91cmw7XFxuICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgIGltZ19rZXk6IGltZ191cmwuc3Vic3RyaW5nKGltZ191cmwubGFzdEluZGV4T2YoJy8nKSArIDEsIGltZ191cmwubGVuZ3RoKS5zcGxpdCgnLicpWzBdLFxcbiAgICAgICAgICAgIHN1Yl9rZXk6IHN1Yl91cmwuc3Vic3RyaW5nKHN1Yl91cmwubGFzdEluZGV4T2YoJy8nKSArIDEsIHN1Yl91cmwubGVuZ3RoKS5zcGxpdCgnLicpWzBdXFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgY29uc3Qgd2JpX2tleXMgPSBnZXRXYmlLZXlzKCk7XFxuXFxuICAgIGNvbnN0IHF1ZXJ5ID0gZW5jV2JpKFxcbiAgICAgICAgcXVlcnlKc29uLFxcbiAgICAgICAgd2JpX2tleXMuaW1nX2tleSxcXG4gICAgICAgIHdiaV9rZXlzLnN1Yl9rZXlcXG4gICAgKTtcXG4gICAgcmV0dXJuIHF1ZXJ5O1xcbn1cXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcInZpZGVvUGFnZVwiLFwicGF0aFwiOlwidmlkZW9cIixcInJ1bGVcIjpcImpzOlxcbnZhciBkID0gW107XFxuLy8g6aKE5aSE55CGXFxucHV0TXlWYXIoJ+WKn+iDveaKmOWPoCcsICflhbMnKTtcXG5pbWdMaW5rID0gc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpO1xcbmFpZCA9IE1ZX1BBUkFNUy5haWQgKyBcXFwiXFxcIjtcXG4vLyBidmlkID0gTVlfUEFSQU1TLmJ2aWQgKyBcXFwiXFxcIjtcXG5taWQgPSBNWV9QQVJBTVMubWlkICsgXFxcIlxcXCI7XFxudmFyIHtmb3JtYXRTZWNvbmRzfT0kLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKTtcXG50cnkge1xcbiAgICAvL+iOt+WPluinhumikeWIhlDkv6Hmga9cXG4gICAgdmFyIHAgPSBKU09OLnBhcnNlKGZldGNoKFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3ZpZXc/YWlkPVxcXCIgKyBhaWQpKS5kYXRhO1xcbiAgICBoYXNMaWtlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuaGFzTGlrZShhaWQpO1xcbiAgICBoYXNGYXZvdXIgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5oYXNGYXZvdXIoYWlkKTtcXG4gICAgc2V0UGFnZVRpdGxlKHAudGl0bGUpO1xcbiAgICBzZXRQYWdlUGljVXJsKHAucGljICsgJ0BSZWZlcmVyPScpO1xcbiAgICAvLyDlj6rmnIkxUOeahOaDheWGtVxcbiAgICBpZiAocC5wYWdlcy5sZW5ndGggPT0gMSkge1xcbiAgICAgICAgY2lkID0gcC5wYWdlc1swXS5jaWQ7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBwLnRpdGxlLFxcbiAgICAgICAgICAgIGltZzogcC5waWMgKyAnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICB1cmw6ICQoKS5sYXp5UnVsZSgoYWlkLCBjaWQsIHFuKSA9PiB7XFxuICAgICAgICAgICAgICAgIC8vIOecn+emu+S6huS4quWkp+iwse+8jOaYjuaYjuabv+aNouaOieS6hu+8jHVh5a2X56ym5Liy5Y+I5Y+Y5Zue5p2l5LqG77yM5Y+I6KaB5aSE55CG5LiA5qyhXFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgcW4pLnJlcGxhY2UoLzsvZywgXFxcIu+8m++8m1xcXCIpO1xcbiAgICAgICAgICAgIH0sIGFpZCArIFxcXCJcXFwiLCBjaWQgKyBcXFwiXFxcIiwgJzExMicpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicGljXzFcXFwiLFxcbiAgICAgICAgICAgIGRlc2M6J+aSreaUvumHjzonK3Auc3RhdC52aWV3KydcXFxcdFxcXFx0XFxcXHTlvLnluZXmlbA6JytwLnN0YXQuZGFubWFrdSsnXFxcXG7lj5HluIPml6XmnJ86JyskLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS50aW1lQ29udmVydChwLmN0aW1lKSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDonYWlkLScrYWlkKyd8Y2lkLScrY2lkLFxcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ2Rt55uS5a2QJywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL3NldHRpbmcjbm9IaXN0b3J5Iz9ydWxlPWRt55uS5a2QJztcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5by55bmV5o6n5Yi2JywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpID09ICd0cnVlJykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5LiN5Y+XZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ3RydWUnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W8ueW5leWwhuWPl+WIsGRt55uS5a2Q5Y+C5pWw5o6n5Yi2JztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICB9XVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogJzxmb250IGNvbG9yPVxcXCJibHVlXFxcIj4nICsgcC5vd25lci5uYW1lICsgJzwvZm9udD4nLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS91cEhvbWVcXFwiLFxcbiAgICAgICAgICAgIGltZzogcC5vd25lci5mYWNlICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIG1pZDogcC5vd25lci5taWQsXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwLm93bmVyLm5hbWUsXFxuICAgICAgICAgICAgICAgIGZhY2U6IHAub3duZXIuZmFjZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgLy8g6Jm954S25Y+q5pyJMVAs5L2G5Y+v6IO95aSE5LqO5ZCI6ZuG6KeG6aKR5Lit77yM5b6A5b6A5ZyodXDkuIrkvKDkuK3lsZ7kuo7kuIDlpZflvbHniYdcXG4gICAgICAgIGlmIChwLnVnY19zZWFzb24pIHtcXG4gICAgICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogJ/Cfk4HmiYDlsZ7lkIjpm4bvvJo8YSBocmVmPVxcXCJoaWtlcjovL3BhZ2UvY29sbGVjdGlvblZpZWRvXFxcIj4nK3AudWdjX3NlYXNvbi50aXRsZSsnPC9hPicsXFxuICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9jb2xsZWN0aW9uVmllZG8jbm9IaXN0b3J5I1xcXCIsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHsgXFxcInRleHRTaXplXFxcIjogMTIsIGFpZDogYWlkIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfVxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6IHAuc3RhdC5saWtlLFxcbiAgICAgICAgICAgIGltZzogaGFzTGlrZSA9PSAxID8gaW1nTGluay7lt7LngrnotZ4gOiBpbWdMaW5rLuacqueCuei1nixcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5saWtlTG9naWMoYWlkKVxcbiAgICAgICAgICAgIH0sIGFpZCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiAnc2V0TGlrZSdcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6IHAuc3RhdC5mYXZvcml0ZSxcXG4gICAgICAgICAgICBpbWc6IGhhc0Zhdm91ciA/IGltZ0xpbmsu5bey5pS26JePIDogaW1nTGluay7mnKrmlLbol48sXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGFpZCkgPT4ge1xcbiAgICAgICAgICAgICAgICB1cE1pZCA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS51c2VyTWlkO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZmF2b3VyTG9naWMoYWlkLCB1cE1pZClcXG4gICAgICAgICAgICB9LCBhaWQpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogJ3NldEZhdm91cidcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICfnqI3lkI7lho3nnIsnLFxcbiAgICAgICAgICAgIGltZzogaW1nTGluay7nqI3lkI7lho3nnIssXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGFpZCkgPT4ge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuanVkZ2VUb3ZpZXcoYWlkKVxcbiAgICAgICAgICAgIH0sIGFpZCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiAn5p+l55yL6K+E6K66JyxcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2UnLFxcbiAgICAgICAgICAgIGltZzogaW1nTGluay7mn6XnnIvor4TorrosXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIFxcXCJpZFxcXCI6IGFpZCxcXG4gICAgICAgICAgICAgICAgXFxcInR5cGVcXFwiOiAxXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaydcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogcC5kZXNjLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibG9uZ190ZXh0XFxcIixcXG4gICAgICAgIH0pO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgLy8g5a2Y5Zyo5aSa6ZuG5YiGUFxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogcC50aXRsZSxcXG4gICAgICAgICAgICBpbWc6IHAucGljICsgJ0BSZWZlcmVyPScsXFxuICAgICAgICAgICAgZGVzYzon5pKt5pS+6YePOicrcC5zdGF0LnZpZXcrJ1xcXFx0XFxcXHRcXFxcdOW8ueW5leaVsDonK3Auc3RhdC5kYW5tYWt1KydcXFxcbuWPkeW4g+aXpeacnzonKyQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLnRpbWVDb252ZXJ0KHAuY3RpbWUpLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChwKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5P2Z5cGFnZScpLnJ1bGUoKHApID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGQgPSBbXTtcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHAuZGVzYyxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImxvbmdfdGV4dFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpO1xcbiAgICAgICAgICAgICAgICB9LCBwKVxcbiAgICAgICAgICAgIH0sIHApLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwicGljXzFcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnZG3nm5LlrZAnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZyNub0hpc3RvcnkjP3J1bGU9ZG3nm5LlrZAnO1xcbiAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICflvLnluZXmjqfliLYnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ2ZhbHNlJykgPT0gJ3RydWUnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ2ZhbHNlJyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIbkuI3lj5dkbeebkuWtkOWPguaVsOaOp+WItic7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAndHJ1ZScpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5Y+X5YiwZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcImJsdWVcXFwiPicgKyBwLm93bmVyLm5hbWUgKyAnPC9mb250PicsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXCIsXFxuICAgICAgICAgICAgaW1nOiBwLm93bmVyLmZhY2UgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbWlkOiBwLm93bmVyLm1pZCxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHAub3duZXIubmFtZSxcXG4gICAgICAgICAgICAgICAgZmFjZTogcC5vd25lci5mYWNlXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogcC5zdGF0Lmxpa2UsXFxuICAgICAgICAgICAgaW1nOiBoYXNMaWtlID09IDEgPyBpbWdMaW5rLuW3sueCuei1niA6IGltZ0xpbmsu5pyq54K56LWeLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChhaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmxpa2VMb2dpYyhhaWQpXFxuICAgICAgICAgICAgfSwgYWlkKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6ICdzZXRMaWtlJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogcC5zdGF0LmZhdm9yaXRlLFxcbiAgICAgICAgICAgIGltZzogaGFzRmF2b3VyID8gaW1nTGluay7lt7LmlLbol48gOiBpbWdMaW5rLuacquaUtuiXjyxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxuICAgICAgICAgICAgICAgIHVwTWlkID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJNaWQ7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5mYXZvdXJMb2dpYyhhaWQsIHVwTWlkKVxcbiAgICAgICAgICAgIH0sIGFpZCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiAnc2V0RmF2b3VyJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogJ+eojeWQjuWGjeeciycsXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLueojeWQjuWGjeeciyxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5qdWRnZVRvdmlldyhhaWQpXFxuICAgICAgICAgICAgfSwgYWlkKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICfmn6XnnIvor4TorronLFxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZScsXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuafpeeci+ivhOiuuixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgXFxcImlkXFxcIjogYWlkLFxcbiAgICAgICAgICAgICAgICBcXFwidHlwZVxcXCI6IDFcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KVxcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmVfYmxhbmsnXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICfpgInpm4bliJfooagnLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgIGRlc2M6JzxzbWFsbD48c21hbGw+5YWxJyArIHAudmlkZW9zICsgJ+adoeinhumikTwvc21hbGw+PC9zbWFsbD4nLFxcbiAgICAgICAgICAgIGltZzogaW1nTGluay7liJfooagsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiLFxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcC5wYWdlcy5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgICAgIGNpZCA9IGl0ZW0uY2lkO1xcbiAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnBhcnQsXFxuICAgICAgICAgICAgICAgIGRlc2M6Zm9ybWF0U2Vjb25kcyhpdGVtLmR1cmF0aW9uKSxcXG4gICAgICAgICAgICAgICAgLy8gaW1nOmltZ0xpbmsu5YiGUOWIl+ihqOmhuSxcXG4gICAgICAgICAgICAgICAgaW1nOml0ZW0uZmlyc3RfZnJhbWUrJ0BSZWZlcmVyPScsXFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKChhaWQsIGNpZCwgcW4pID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgcW4pLnJlcGxhY2UoLzsvZywgXFxcIu+8m++8m1xcXCIpO1xcbiAgICAgICAgICAgICAgICB9LCBhaWQgKyBcXFwiXFxcIiwgY2lkICsgXFxcIlxcXCIsICcxMTYnKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJhdmF0YXJcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYTp7XFxuICAgICAgICAgICAgICAgICAgICBpZDonYWlkLScrYWlkKyd8Y2lkLScrY2lkLFxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSlcXG4gICAgICAgIH0pXFxuICAgIH1cXG59IGNhdGNoIChlKSB7XFxuICAgIGxvZyhlKTtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn6aG16Z2i6LWw5Lii5LqGLi4uJyxcXG4gICAgICAgIGltZzogJ2h0dHBzOi8vaTAuaGRzbGIuY29tL2Jmcy9nZW5lcmFsL2Y3YjY2NzAxMWE0NjYxNTczMmM3MDFmNGJiMWQwN2Y3OTNmOGQxZGYucG5nQFJlZmVyZXI9JyxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcbiAgICAgICAgZGVzYzogJ+Wkp+amgueOh+inhumikeiiq+Wwgeemge+8jOaIluiAhXVw5bey6LeR6LevficsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInBpY18xXFxcIlxcbiAgICB9KTtcXG59XFxuc2V0UmVzdWx0KGQpO1xcblwifSx7XCJjb2xfdHlwZVwiOlwibG9uZ190ZXh0XCIsXCJuYW1lXCI6XCLor4TorrpcIixcInBhdGhcIjpcIkNvbW1lbnRzXCIsXCJydWxlXCI6XCJqczpcXG52YXIgZCA9IFtdO1xcbnZhciBpZCA9IE1ZX1BBUkFNUy5pZDtcXG52YXIgdHlwZSA9IE1ZX1BBUkFNUy50eXBlO1xcbmxvZyhpZCk7XFxuaWYgKE1ZX1BBR0UgPT0gMSkge1xcbiAgICAvLyDosozkvLzmmoLml7blj6rog73mloflrZcr5pWw5a2XXFxuICAgIGQudW5zaGlmdCh7XFxuICAgICAgICB0aXRsZTogXFxcIuWPkeadoeivhOiuuuWQp1xcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgICAgIHVybDogJC50b1N0cmluZygoaWQsdHlwZSkgPT4ge1xcbiAgICAgICAgICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LylbMV07XFxuICAgICAgICAgICAgcG9zdChcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9yZXBseS9hZGRcXFwiLCB7XFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJ0eXBlXFxcIjogdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJvaWRcXFwiOiBpZCxcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJjc3JmXFxcIjogY3NyZixcXG4gICAgICAgICAgICAgICAgICAgIFxcXCJtZXNzYWdlXFxcIjogaW5wdXRcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAgICAgXFxcIkNvb2tpZVxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIpKS5jb29raWVcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKVxcbiAgICAgICAgfSwgaWQsdHlwZSlcXG4gICAgfSlcXG59XFxubGV0IGRhdGEgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5nZXRDb21tZW50cyhpZCx0eXBlLE1ZX1BBR0UpO1xcbi8vIGxvZyhkYXRhKTtcXG5pZihkYXRhKXtcXG4gICAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xcbiAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogaXRlbS5tZW1iZXIudW5hbWUsXFxuICAgICAgICAgICAgaW1nOiBpdGVtLm1lbWJlci5hdmF0YXIrJ0BSZWZlcmVyPScsXFxuICAgICAgICAgICAgdXJsOidoaWtlcjovL3BhZ2UvdXBIb21lJyxcXG4gICAgICAgICAgICBkZXNjOic8c21hbGw+PHNtYWxsPjxmb250IGNvbG9yPVxcXCJncmV5XFxcIj4nK2l0ZW0ucmVwbHlfY29udHJvbC5sb2NhdGlvbiArIFxcXCIgXFxcIiArIGl0ZW0ucmVwbHlfY29udHJvbC50aW1lX2Rlc2MrJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbWlkOiBpdGVtLm1lbWJlci5taWQsXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLm1lbWJlci51bmFtZSxcXG4gICAgICAgICAgICAgICAgZmFjZTogaXRlbS5tZW1iZXIuYXZhdGFyXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSlcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0uY29udGVudC5tZXNzYWdlLFxcbiAgICAgICAgfSlcXG4gICAgfSlcXG59ZWxzZXtcXG4gICAgZC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAn5aW95YOP5rKh5pyJ6K+E6K665LqG5ZWm77yM77yBJyxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgIH0pXFxufVxcbnNldFJlc3VsdChkKTtcXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuiuoumYheWIl+ihqFwiLFwicGF0aFwiOlwic3Vic2NyaXB0aW9uXCIsXCJydWxlXCI6XCJpZiAoZ2V0SXRlbSgn6K6i6ZiF57G75Z6LJywgJzEnKSA9PSAnMScpIHtcXG5cXG7CoCDCoCB0eXBlck5hbWUgPSAn6L+955WqJztcXG5cXG59IGVsc2Uge1xcblxcbsKgIMKgIHR5cGVyTmFtZSA9ICfov73liacnO1xcblxcbn1cXG5cXG5kLnB1c2goe1xcblxcbsKgIMKgIHRpdGxlOiAn6L+955WqJyA9PSB0eXBlck5hbWUgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcInJlZFxcXCI+6L+955WqPC9mb250PicgOiAn6L+955WqJyxcXG5cXG7CoCDCoCB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuXFxuwqAgwqAgwqAgwqAgc2V0SXRlbSgn6K6i6ZiF57G75Z6LJywgJzEnKVxcblxcbsKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKHRydWUpO1xcblxcbsKgIMKgIMKgIMKgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuXFxuwqAgwqAgfSksXFxuXFxuwqAgwqAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcblxcbn0se1xcblxcbsKgIMKgIHRpdGxlOiAn6L+95YmnJyA9PSB0eXBlck5hbWUgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcInJlZFxcXCI+6L+95YmnPC9mb250PicgOiAn6L+95YmnJyxcXG5cXG7CoCDCoCB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuXFxuwqAgwqAgwqAgwqAgc2V0SXRlbSgn6K6i6ZiF57G75Z6LJywgJzInKVxcblxcbsKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKHRydWUpO1xcblxcbsKgIMKgIMKgIMKgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuXFxuwqAgwqAgfSksXFxuXFxuwqAgwqAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcblxcbn0pO1xcblxcbnN1YnNjcmlwdGlvbnMgPSBKU09OLnBhcnNlKGZldGNoKFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9zcGFjZS9iYW5ndW1pL2ZvbGxvdy9saXN0P3R5cGU9XFxcIiArIGdldEl0ZW0oJ+iuoumYheexu+WeiycsICcxJykgKyBcXFwiJmZvbGxvd19zdGF0dXM9MCZwbj1cXFwiICsgcGFnZSArIFxcXCImcHM9MTUmdm1pZD1cXFwiICsgbWlkLCB7XFxuXFxuwqAgwqAgaGVhZGVyczoge1xcblxcbsKgIMKgIMKgIMKgIFxcXCJDb29raWVcXFwiOiBjb29raWVcXG5cXG7CoCDCoCB9XFxuXFxufSkpLmRhdGE7XFxuXFxuaWYgKHBhZ2UgPT0gMSkge1xcblxcbsKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgdGl0bGU6IFxcXCLlvZPliY1cXFwiICsgdHlwZXJOYW1lICsgXFxcIuaVsOmHjzpcXFwiICsgc3Vic2NyaXB0aW9ucy50b3RhbCxcXG5cXG7CoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG5cXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiXFxuXFxuwqAgwqAgfSlcXG5cXG59XFxuXFxuc3Vic2NyaXB0aW9ucy5saXN0LmZvckVhY2gobGlzdCA9PiB7XFxuXFxuwqAgwqAgZC5wdXNoKHtcXG5cXG7CoCDCoCDCoCDCoCB0aXRsZTogbGlzdC50aXRsZSxcXG5cXG7CoCDCoCDCoCDCoCBpbWc6IGxpc3QuY292ZXIgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG5cXG7CoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvZmlsbWVyamkjaW1tZXJzaXZlVGhlbWUjXFxcIixcXG5cXG7CoCDCoCDCoCDCoCBkZXNjOiBsaXN0LmV2YWx1YXRlLnN1YnN0cmluZygwLCAxMikgKyAn4oCY4oCY4oCZ4oCZ4oCmPGZvbnQgY29sb3I9XFxcIiMxQzFDMUNcXFwiPuivpuaDhTwvZm9udD4nICsgJ1xcXFxuJyArIGxpc3Quc2Vhc29uX3R5cGVfbmFtZSArICd8JyArIChsaXN0LmFyZWFzPT09dW5kZWZpbmVkPycnOmxpc3QuYXJlYXNbMF0ubmFtZSArICdcXFxcbicpICsgKGxpc3QucHJvZ3Jlc3MgPT0gJycgPyAn5bCa5pyq6KeC55yLJyA6IGxpc3QucHJvZ3Jlc3MpICsgKGxpc3QubmV3X2VwLmluZGV4X3Nob3c9PT11bmRlZmluZWQ/Jyc6J3wnKyhsaXN0Lm5ld19lcC5pbmRleF9zaG93Lm1hdGNoKC/mm7TmlrB85Y2z5bCGLykgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcInJlZFxcXCI+JyArIGxpc3QubmV3X2VwLmluZGV4X3Nob3cgKyAnPC9mb250Pic6IGxpc3QubmV3X2VwLmluZGV4X3Nob3cpKSxcXG5cXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJyxcXG5cXG7CoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHNlYXNvbl9pZDogbGlzdC5zZWFzb25faWRcXG5cXG7CoCDCoCDCoCDCoCB9XFxuXFxuwqAgwqAgfSk7XFxuXFxufSk7XFxuXFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLlhbPms6jliJfooahcIixcInBhdGhcIjpcImF0dGVudGlvblwiLFwicnVsZVwiOlwiaWYgKE1ZX1BBR0UgPT0gMSkge1xcblxcbsKgIMKgIGZvY3VzR3JvdXBzPSQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldE15QXR0ZW50aW9uR3JvdXBMaXN0KCk7XFxuXFxuwqAgwqAgcHV0TXlWYXIoJ3RlbXBJZCcsIEpTT04uc3RyaW5naWZ5KGZvY3VzR3JvdXBzWzFdLnRhZ2lkKSk7XFxuXFxuwqAgwqAgZm9jdXNHcm91cHMuZm9yRWFjaChsaXN0ID0+IHtcXG5cXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBsaXN0LnRhZ2lkID09IGdldEl0ZW0oJ+WFs+azqOWIhue7hCcsIEpTT04uc3RyaW5naWZ5KGZvY3VzR3JvdXBzWzFdLmlkKSkgPyBcXFwi4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9J3JlZCc+XFxcIiArIGxpc3QubmFtZSArIGxpc3QuY291bnQgKyBcXFwiPC9mb250PlxcXCIgOiBsaXN0Lm5hbWUgKyBsaXN0LmNvdW50LFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChsaXN0KSA9PiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgc2V0SXRlbSgn5YWz5rOo5YiG57uEJywgSlNPTi5zdHJpbmdpZnkobGlzdC50YWdpZCkpO1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKHRydWUpO1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJldHVybiBcXFwidG9hc3Q6Ly/liIfmjaLlhbPms6jliIbnu4TkuLo6XFxcIiArIGxpc3QubmFtZTtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB9LCBsaXN0KSxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcblxcbsKgIMKgIMKgIMKgIH0pO1xcblxcbsKgIMKgIH0pO1xcblxcbsKgIMKgIC8vIOacq+WwvuihpeWFheaChOaChOWFs+azqOWIhue7hFxcblxcbsKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgdGl0bGU6ICfmgoTmgoTlhbPms6gnID09IGdldEl0ZW0oJ+WFs+azqOWIhue7hCcsIEpTT04uc3RyaW5naWZ5KGZvY3VzR3JvdXBzWzBdLmlkKSkgPyBcXFwi4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9J3JlZCc+5oKE5oKE5YWz5rOoPC9mb250PlxcXCIgOiBcXFwi5oKE5oKE5YWz5rOoXFxcIixcXG5cXG7CoCDCoCDCoCDCoCB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoKSA9PiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgc2V0SXRlbSgn5YWz5rOo5YiG57uEJywgXFxcIuaChOaChOWFs+azqFxcXCIpO1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKHRydWUpO1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHJldHVybiBcXFwidG9hc3Q6Ly/liIfmjaLlhbPms6jliIbnu4TkuLo6XFxcIiArIFxcXCLmgoTmgoTlhbPms6hcXFwiO1xcblxcbsKgIMKgIMKgIMKgIH0pLFxcblxcbsKgIMKgIMKgIMKgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxuXFxuwqAgwqAgfSx7XFxuXFxuwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdsaW5lJ1xcblxcbsKgIMKgIH0pO1xcblxcbn1cXG5cXG5pZiAoZ2V0SXRlbSgn5YWz5rOo5YiG57uEJyk9PSfmgoTmgoTlhbPms6gnKSB7XFxuXFxuwqAgwqAgZ3JvdXBDb250ZW50ID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcmVsYXRpb24vd2hpc3BlcnM/cG49XFxcIitwYWdlK1xcXCImcHM9MjAmanNvbnA9anNvbnBcXFwiLCB7XFxuXFxuwqAgwqAgwqAgwqAgaGVhZGVyczoge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIFxcXCJDb29raWVcXFwiOiBjb29raWVcXG5cXG7CoCDCoCDCoCDCoCB9XFxuXFxuwqAgwqAgfSkpLmRhdGEubGlzdDtcXG5cXG7CoCDCoCBncm91cENvbnRlbnQuZm9yRWFjaChsaXN0ID0+IHtcXG5cXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBcXFwiPGJpZz48Zm9udCBjb2xvcj0nYmx1ZSc+XFxcIiArIGxpc3QudW5hbWUgKyBcXFwiPC9mb250PjwvYmlnPjxzbWFsbD5cXFwiICsgbGlzdC5zaWduICsgXFxcIjwvc21hbGw+XFxcIixcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBpbWc6IGxpc3QuZmFjZSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiAnYXZhdGFyJyxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdXBIb21lXFxcIixcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIG1pZDogbGlzdC5taWQsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3QudW5hbWUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZmFjZTogbGlzdC5mYWNlXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIMKgIMKgIH0pO1xcblxcbsKgIMKgIH0pO1xcblxcbn1lbHNle1xcblxcbsKgIMKgIGdyb3VwQ29udGVudCA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3JlbGF0aW9uL3RhZz9taWQ9XFxcIiArIG1pZCArIFxcXCImdGFnaWQ9XFxcIiArIGdldEl0ZW0oJ+WFs+azqOWIhue7hCcsIGdldE15VmFyKCd0ZW1wSWQnKSkgKyBcXFwiJnBuPVxcXCIgKyBwYWdlICsgXFxcIiZwcz0yMCZqc29ucD1qc29ucFxcXCIsIHtcXG5cXG7CoCDCoCDCoCDCoCBoZWFkZXJzOiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgXFxcIkNvb2tpZVxcXCI6IGNvb2tpZVxcblxcbsKgIMKgIMKgIMKgIH1cXG5cXG7CoCDCoCB9KSkuZGF0YTtcXG5cXG7CoCDCoCBncm91cENvbnRlbnQuZm9yRWFjaChsaXN0ID0+IHtcXG5cXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBcXFwiPGJpZz48Zm9udCBjb2xvcj0nYmx1ZSc+XFxcIiArIGxpc3QudW5hbWUgKyBcXFwiPC9mb250PjwvYmlnPjxzbWFsbD5cXFwiICsgbGlzdC5zaWduICsgXFxcIjwvc21hbGw+XFxcIixcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBpbWc6IGxpc3QuZmFjZSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiAnYXZhdGFyJyxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdXBIb21lXFxcIixcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIG1pZDogbGlzdC5taWQsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3QudW5hbWUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZmFjZTogbGlzdC5mYWNlXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIMKgIMKgIH0pO1xcblxcbsKgIMKgIH0pO1xcblxcbn1cXG5cXG5cXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuaUtuiXj+WIl+ihqFwiLFwicGF0aFwiOlwiY29sZWN0aW9uXCIsXCJydWxlXCI6XCJpZiAocGFnZSA9PSAxKSB7XFxyXFxuICAgIGQucHVzaCh7XFxyXFxuICAgICAgICB0aXRsZTogJ+aIkeWIm+W7uueahOaUtuiXj+WkuScgPT0gZ2V0SXRlbSgn5pS26JeP57G75Z6LJywgJ+aIkeWIm+W7uueahOaUtuiXj+WkuScpID8gJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXCJyZWRcXFwiPuaIkeWIm+W7uueahOaUtuiXj+WkuTwvZm9udD4nIDogJ+aIkeWIm+W7uueahOaUtuiXj+WkuScsXFxyXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgc2V0SXRlbSgn5pS26JeP57G75Z6LJywgJ+aIkeWIm+W7uueahOaUtuiXj+WkuScpXFxyXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxyXFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXHJcXG4gICAgICAgIH0pLFxcclxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcclxcbiAgICB9LCB7XFxyXFxuICAgICAgICB0aXRsZTogJ+eojeWQjuWcqOeciycgPT0gZ2V0SXRlbSgn5pS26JeP57G75Z6LJywgJ+aIkeWIm+W7uueahOaUtuiXj+WkuScpID8gJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXCJyZWRcXFwiPueojeWQjuWcqOecizwvZm9udD4nIDogJ+eojeWQjuWcqOeciycsXFxyXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoKSA9PiB7XFxyXFxuICAgICAgICAgICAgc2V0SXRlbSgn5pS26JeP57G75Z6LJywgJ+eojeWQjuWcqOeciycpXFxyXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxyXFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXHJcXG4gICAgICAgIH0pLFxcclxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcclxcbiAgICB9KTtcXHJcXG59XFxyXFxuaWYgKGdldEl0ZW0oJ+aUtuiXj+exu+WeiycsICfmiJHliJvlu7rnmoTmlLbol4/lpLknKSA9PSAn5oiR5Yib5bu655qE5pS26JeP5aS5Jykge1xcclxcbiAgICB0cnkge1xcclxcbiAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xcclxcbiAgICAgICAgICAgIGQucHVzaCh7XFxyXFxuICAgICAgICAgICAgICAgIC8vIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXHJcXG4gICAgICAgICAgICB9LCApO1xcclxcbiAgICAgICAgfVxcclxcbiAgICAgICAgY29sbGVjdGlvbnMgPSBKU09OLnBhcnNlKGZldGNoKFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC92My9mYXYvZm9sZGVyL2xpc3Q0bmF2aWdhdGVcXFwiLCB7XFxyXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcclxcbiAgICAgICAgICAgICAgICBcXFwiQ29va2llXFxcIjogY29va2llXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSkpLmRhdGE7XFxyXFxuICAgICAgICBncm91cHMgPSBjb2xsZWN0aW9uc1swXS5tZWRpYUxpc3RSZXNwb25zZS5saXN0O1xcclxcbiAgICAgICAgcHV0TXlWYXIoJ3RlbXBJZCcsIEpTT04uc3RyaW5naWZ5KGdyb3Vwc1swXS5pZCkpO1xcclxcbiAgICAgICAgZ3JvdXBzLmZvckVhY2gobGlzdCA9PiB7XFxyXFxuICAgICAgICAgICAgZC5wdXNoKHtcXHJcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QuaWQgPT0gZ2V0SXRlbSgn5pS26JeP5aS5JywgSlNPTi5zdHJpbmdpZnkoZ3JvdXBzWzBdLmlkKSkgPyBcXFwi4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9J3JlZCc+XFxcIiArIGxpc3QudGl0bGUgKyBcXFwiPC9mb250PlxcXCIgOiBsaXN0LnRpdGxlLFxcclxcbiAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgobGlzdCkgPT4ge1xcclxcbiAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5pS26JeP5aS5JywgSlNPTi5zdHJpbmdpZnkobGlzdC5pZCkpO1xcclxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxyXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5YiH5o2i5pS26JeP5aS55Li6OlxcXCIgKyBsaXN0LnRpdGxlO1xcclxcbiAgICAgICAgICAgICAgICB9LCBsaXN0KSxcXHJcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXHJcXG4gICAgICAgICAgICB9KTtcXHJcXG4gICAgICAgIH0pO1xcclxcbiAgICAgICAgZC5wdXNoKHtcXHJcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmUnXFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgICAgIGdyb3VwQ29udGVudCA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3YzL2Zhdi9yZXNvdXJjZS9saXN0P21lZGlhX2lkPVxcXCIgKyBnZXRJdGVtKCfmlLbol4/lpLknLCBnZXRNeVZhcigndGVtcElkJykpICsgXFxcIiZwbj1cXFwiICsgcGFnZSArIFxcXCImcHM9MjAma2V5d29yZD0mb3JkZXI9bXRpbWUmdHlwZT0wJnRpZD0wJnBsYXRmb3JtPXdlYiZqc29ucD1qc29ucFxcXCIsIHtcXHJcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxyXFxuICAgICAgICAgICAgICAgIFxcXCJDb29raWVcXFwiOiBjb29raWVcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9KSkuZGF0YS5tZWRpYXM7XFxyXFxuICAgICAgICBncm91cENvbnRlbnQuZm9yRWFjaChsaXN0ID0+IHtcXHJcXG4gICAgICAgICAgICBkLnB1c2goe1xcclxcbiAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXHJcXG4gICAgICAgICAgICAgICAgaW1nOiBsaXN0LmNvdmVyICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxyXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxyXFxuICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXCIsXFxyXFxuICAgICAgICAgICAgICAgIGRlc2M6ICdVUDonICsgbGlzdC51cHBlci5uYW1lICsgJ1xcXFxuJyArIGxpc3QuaW50cm8sXFxyXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxyXFxuICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuaWQsXFxyXFxuICAgICAgICAgICAgICAgICAgICBtaWQ6IGxpc3QudXBwZXIubWlkXFxyXFxuICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICB9KTtcXHJcXG4gICAgICAgIH0pO1xcclxcbiAgICB9IGNhdGNoIChlKSB7XFxyXFxuICAgICAgICBzaG93TG9hZGluZygn5YWE5byf77yM5L2g56Gu6K6k5L2g5pyJ5pS26JeP5ZCX77yM5b+r5Y675pS26JeP5LiA5Liq6KeG6aKRficpO1xcclxcbiAgICB9XFxyXFxufSBlbHNlIHtcXHJcXG4gICAgbGF0ZXJWaWV3cyA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3YyL2hpc3RvcnkvdG92aWV3L3dlYj9qc29ucD1qc29ucFxcXCIsIHtcXHJcXG4gICAgICAgIGhlYWRlcnM6IHtcXHJcXG4gICAgICAgICAgICBcXFwiQ29va2llXFxcIjogY29va2llXFxyXFxuICAgICAgICB9XFxyXFxuICAgIH0pKS5kYXRhO1xcclxcbiAgICBjb3VudCA9IGxhdGVyVmlld3MuY291bnQ7XFxyXFxuICAgIGQucHVzaCh7XFxyXFxuICAgICAgICB0aXRsZTogXFxcIuWFseaciVxcXCIgKyBjb3VudCArIFxcXCLmnaHlvoXnnIvop4bpopHorrDlvZVcXFwiLFxcclxcbiAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxyXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiXFxyXFxuICAgIH0pO1xcclxcbiAgICBsYXRlclZpZXdzLmxpc3QuZm9yRWFjaChsaXN0ID0+IHtcXHJcXG4gICAgICAgIGQucHVzaCh7XFxyXFxuICAgICAgICAgICAgdGl0bGU6IGxpc3QudGl0bGUsXFxyXFxuICAgICAgICAgICAgaW1nOiBsaXN0LnBpYyArIFxcXCJAUmVmZXJlcj1cXFwiLFxcclxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxyXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcIixcXHJcXG4gICAgICAgICAgICBkZXNjOiAnVVA6JyArIGxpc3Qub3duZXIubmFtZSArICdcXFxcbicgKyBsaXN0LmRlc2MsXFxyXFxuICAgICAgICAgICAgZXh0cmE6IHtcXHJcXG4gICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFpZCxcXHJcXG4gICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm93bmVyLm1pZFxcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH0pO1xcclxcbiAgICB9KTtcXHJcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLotrPov7lcIixcInBhdGhcIjpcInRyYWNrXCIsXCJydWxlXCI6XCJ2YXIgbmV4dEluZm8gPSB7fTtcXG5cXG5pZiAocGFnZSA9PSAxKSB7XFxuXFxuwqAgwqAgaGlzdG9yaWVzID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9oaXN0b3J5L2N1cnNvcj9tYXg9MCZ2aWV3X2F0PTAmYnVzaW5lc3M9XFxcIiwge1xcblxcbsKgIMKgIMKgIMKgIGhlYWRlcnM6IHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBcXFwiQ29va2llXFxcIjogY29va2llXFxuXFxuwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIH0pKS5kYXRhO1xcblxcbsKgIMKgIG5leHRJbmZvLm1heCA9IGhpc3Rvcmllcy5jdXJzb3IubWF4O1xcblxcbsKgIMKgIG5leHRJbmZvLnZpZXdfYXQgPSBoaXN0b3JpZXMuY3Vyc29yLnZpZXdfYXQ7XFxuXFxuwqAgwqAgbmV4dEluZm8uYnVzaW5lc3MgPSBoaXN0b3JpZXMuY3Vyc29yLmJ1c2luZXNzO1xcblxcbn0gZWxzZSB7XFxuXFxuwqAgwqAgaGlzdG9yaWVzID0gSlNPTi5wYXJzZShmZXRjaChcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9oaXN0b3J5L2N1cnNvcj9tYXg9XFxcIiArIHN0b3JhZ2UwLmdldE15VmFyKEpTT04uc3RyaW5naWZ5KHBhZ2UpKS5tYXggKyBcXFwiJnZpZXdfYXQ9XFxcIiArIHN0b3JhZ2UwLmdldE15VmFyKEpTT04uc3RyaW5naWZ5KHBhZ2UpKS52aWV3X2F0ICsgXFxcIiZidXNpbmVzcz1cXFwiICsgc3RvcmFnZTAuZ2V0TXlWYXIoSlNPTi5zdHJpbmdpZnkocGFnZSkpLmJ1c2luZXNzLCB7XFxuXFxuwqAgwqAgwqAgwqAgaGVhZGVyczoge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIFxcXCJDb29raWVcXFwiOiBjb29raWVcXG5cXG7CoCDCoCDCoCDCoCB9XFxuXFxuwqAgwqAgfSkpLmRhdGE7XFxuXFxuwqAgwqAgbmV4dEluZm8ubWF4ID0gaGlzdG9yaWVzLmN1cnNvci5tYXg7XFxuXFxuwqAgwqAgbmV4dEluZm8udmlld19hdCA9IGhpc3Rvcmllcy5jdXJzb3Iudmlld19hdDtcXG5cXG7CoCDCoCBuZXh0SW5mby5idXNpbmVzcyA9IGhpc3Rvcmllcy5jdXJzb3IuYnVzaW5lc3M7XFxuXFxufVxcblxcbnN0b3JhZ2UwLnB1dE15VmFyKEpTT04uc3RyaW5naWZ5KHBhZ2UgKyAxKSwgbmV4dEluZm8pO1xcblxcbmhpc3Rvcmllcy5saXN0LmZvckVhY2gobGlzdCA9PiB7XFxuXFxuwqAgwqAgdmlld1RpbWU9cGJ0aW1lID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikudGltZUNvbnZlcnQobGlzdC52aWV3X2F0KTtcXG5cXG7CoCDCoCBpZiAobGlzdC5oaXN0b3J5LmJ1c2luZXNzID09ICdhcnRpY2xlJykge1xcblxcbsKgIMKgIMKgIMKgIC8vIOS4k+agj+aWh+eroFxcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3Quc2hvd190aXRsZT09Jyc/bGlzdC50aXRsZTpsaXN0LnNob3dfdGl0bGUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgaW1nOiBsaXN0LmNvdmVyc1swXSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2FydGljbGVEZXRhaWxcXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGRlc2M6IChsaXN0LmF1dGhvcl9uYW1lPT0nJz92aWV3VGltZTonVVA6JyArIGxpc3QuYXV0aG9yX25hbWUrJ1xcXFxuJyApKyB2aWV3VGltZSxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGlkOiBsaXN0Lmhpc3Rvcnkub2lkLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIH1cXG5cXG7CoCDCoCDCoCDCoCB9KTtcXG5cXG7CoCDCoCB9IGVsc2UgaWYobGlzdC5oaXN0b3J5LmJ1c2luZXNzID09ICdhcnRpY2xlLWxpc3QnKXtcXG5cXG7CoCDCoCDCoCDCoCAvLyDmlofnq6DliJfooajvvJ/vvIjlj43mraNpZOWtmOaUvuS9jee9ruS4jeS4gOagt++8iVxcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3Quc2hvd190aXRsZT09Jyc/bGlzdC50aXRsZTpsaXN0LnNob3dfdGl0bGUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgaW1nOiBsaXN0LmNvdmVyc1swXSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2FydGljbGVEZXRhaWxcXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGRlc2M6IChsaXN0LmF1dGhvcl9uYW1lPT0nJz92aWV3VGltZTonVVA6JyArIGxpc3QuYXV0aG9yX25hbWUrJ1xcXFxuJyApKyB2aWV3VGltZSxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGlkOiBsaXN0Lmhpc3RvcnkuY2lkLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIH1cXG5cXG7CoCDCoCDCoCDCoCB9KTtcXG5cXG7CoCDCoCB9ZWxzZSBpZihsaXN0Lmhpc3RvcnkuYnVzaW5lc3MgPT0gJ3BnYycpe1xcblxcbsKgIMKgIMKgIMKgIC8vIOezu+WIl+WJp+mbhu+8iOWNlembhu+8iVxcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3Quc2hvd190aXRsZT09Jyc/bGlzdC50aXRsZTpsaXN0LnNob3dfdGl0bGUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgaW1nOiBsaXN0LmNvdmVyICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvZmlsbWVyamkjaW1tZXJzaXZlVGhlbWUjXFxcIixcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBkZXNjOiAobGlzdC5hdXRob3JfbmFtZT09Jyc/bGlzdC50YWdfbmFtZSsnXFxcXHRcXFxcdCcrbGlzdC5uZXdfZGVzYysnXFxcXG4nK3ZpZXdUaW1lOidVUDonICsgbGlzdC5hdXRob3JfbmFtZSsnXFxcXG4nK3ZpZXdUaW1lKSxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGVwX2lkOmxpc3QuaGlzdG9yeS5lcGlkXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIMKgIMKgIH0pO1xcblxcbsKgIMKgIH1lbHNlIHtcXG5cXG7CoCDCoCDCoCDCoCAvLyDmma7pgJp2aWRlb1xcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3Quc2hvd190aXRsZT09Jyc/bGlzdC50aXRsZTpsaXN0LnNob3dfdGl0bGUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgaW1nOiBsaXN0LmNvdmVyICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGRlc2M6IChsaXN0LmF1dGhvcl9uYW1lPT0nJz9saXN0LnRhZ19uYW1lKydcXFxcdFxcXFx0JytsaXN0Lm5ld19kZXNjKydcXFxcbicrdmlld1RpbWU6J1VQOicgKyBsaXN0LmF1dGhvcl9uYW1lKydcXFxcbicrdmlld1RpbWUpLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGV4dHJhOiB7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYWlkOiBsaXN0Lmhpc3Rvcnkub2lkLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIH1cXG5cXG7CoCDCoCDCoCDCoCB9KTtcXG5cXG7CoCDCoCB9XFxuXFxufSk7XFxuXFxuXFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLliqjmgIFcIixcInBhdGhcIjpcImxhdGV0TmV3c1wiLFwicnVsZVwiOlwiZC5wdXNoKHtcXG5cXG7CoCDCoCBjb2xfdHlwZTogJ2xpbmVfYmxhbmsnXFxuXFxufSk7XFxuXFxubGF0ZW5ld3M9JC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuZ2V0RHluYW1pY0RhdGEoJ215SG9tZScpO1xcblxcbmV2YWwoJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikuc2hvd0R5bmFtaWNEYXRhKCkpO1xcblxcblwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5LiT5qCP5YiX6KGoXCIsXCJwYXRoXCI6XCJhY3RpY2xlTGlzdFwiLFwicnVsZVwiOlwianM6XFxuXFxudmFyIGQ9W107XFxuXFxucGFnZT1NWV9QQUdFO1xcblxcbnVwTWlkID0gTVlfUEFSQU1TLm1pZCArIFxcXCJcXFwiO1xcblxcbmFydGljbGVMaXN0PSQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmdldFVzZXJBcnRpY2xlKHVwTWlkLHBhZ2UpO1xcblxcbmFydGljbGVOdW09YXJ0aWNsZUxpc3QuY291bnQ7XFxuXFxuaWYgKGFydGljbGVOdW09PXVuZGVmaW5lZCkge1xcblxcbsKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgdGl0bGU6ICfov5l1cOayoeacieS4k+agj+aWh+eroCcsXFxuXFxuwqAgwqAgwqAgwqAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuXFxuwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG5cXG7CoCDCoCB9KTtcXG5cXG59ZWxzZXtcXG5cXG7CoCDCoCBtYXhQYWdlID0gTWF0aC5jZWlsKGFydGljbGVOdW0gLyBhcnRpY2xlTGlzdC5wcyk7XFxuXFxuwqAgwqAgaWYgKHBhZ2UgPD0gbWF4UGFnZSkge1xcblxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6ICflvZPliY0656ysJyArIGFydGljbGVMaXN0LnBuICsgJ+mhtVxcXFx0XFxcXHRcXFxcdOWFseaciScgKyBtYXhQYWdlICsgJ+mhtSwnICsgYXJ0aWNsZU51bSArICfmnaHmlbDmja4nLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuXFxuwqAgwqAgwqAgwqAgfSk7XFxuXFxuwqAgwqAgwqAgwqAgYXJ0aWNsZUxpc3QuYXJ0aWNsZXMuZm9yRWFjaChsaXN0ID0+IHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBwYnRpbWU9JC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikudGltZUNvbnZlcnQobGlzdC5wdWJsaXNoX3RpbWUpO1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIGQucHVzaCh7XFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3QudGl0bGUsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgaW1nOiBsaXN0LmJhbm5lcl91cmw9PScnPyAobGlzdC5pbWFnZV91cmxzKyAnQFJlZmVyZXI9Jyk6KGxpc3QuYmFubmVyX3VybCsgJ0BSZWZlcmVyPScpLFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGRlc2M6ICfigJjigJjigJnigJk8c21hbGw+JytsaXN0LnN0YXRzLnZpZXcrJ+eci+i/h1xcXFx0XFxcXHQnK2xpc3Quc3RhdHMubGlrZSsn5Zac5qyiXFxcXHRcXFxcdCcrbGlzdC5zdGF0cy5mYXZvcml0ZSsn5pS26JePXFxcXG4nICsgcGJ0aW1lKyc8L3NtYWxsPicsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvYXJ0aWNsZURldGFpbFxcXCIsXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZXh0cmE6IHtcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCAvLyDkuJPmoI/mlofnq6BpZFxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGlkOiBsaXN0LmlkXFxuXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIMKgIMKgIMKgIMKgIH0pO1xcblxcbsKgIMKgIMKgIMKgIH0pO1xcblxcbsKgIMKgIH1cXG5cXG59XFxuXFxuc2V0UmVzdWx0KGQpO1xcblxcblwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwi5LiT5qCP5paH56ugWDVcIixcInBhdGhcIjpcImFydGljbGVEZXRhaWxcIixcInJ1bGVcIjpcImpzOlxcblxcbnZhciBkID0gW107XFxuXFxucGFnZSA9IE1ZX1BBR0U7XFxuXFxuY3ZpZCA9IE1ZX1BBUkFNUy5pZCArIFxcXCJcXFwiO1xcblxcbmQucHVzaCh7XFxuXFxuwqAgwqAgdXJsOiBcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3JlYWQvY3ZcXFwiK2N2aWQsXFxuXFxuwqAgwqAgY29sX3R5cGU6IFxcXCJ4NV93ZWJ2aWV3X3NpbmdsZVxcXCIsXFxuXFxuwqAgwqAgZGVzYzogXFxcIjEwMCUmJmZsb2F0XFxcIixcXG5cXG7CoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIGNhbkJhY2s6IHRydWVcXG5cXG7CoCDCoCB9XFxuXFxufSlcXG5cXG5zZXRSZXN1bHQoZCk7XFxuXFxuXCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCLnu7zlkIjng63pl6hcIixcInBhdGhcIjpcImhvdFZpZGVvXCIsXCJydWxlXCI6XCJsZXQgcmVzID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3BvcHVsYXI/cG49XFxcIiArIE1ZX1BBR0UsIHtcXG5cXG7CoCDCoCBoZWFkZXJzOiB7XFxuXFxuwqAgwqAgwqAgwqAgQ29va2llOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkuY29va2llXFxuXFxuwqAgwqAgfVxcblxcbn0pKS5kYXRhXFxuXFxucmVzLmxpc3QuZm9yRWFjaChpdGVtID0+IHtcXG5cXG7CoCDCoCBkLnB1c2goe1xcblxcbsKgIMKgIMKgIMKgIHRpdGxlOiBpdGVtLnRpdGxlLFxcblxcbsKgIMKgIMKgIMKgIGltZzogaXRlbS5waWMrIFxcXCJAUmVmZXJlcj1cXFwiLFxcblxcbsKgIMKgIMKgIMKgIHVybDogXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXCIsXFxuXFxuwqAgwqAgwqAgwqAgZGVzYzogaXRlbS5wdWJfbG9jYXRpb24sXFxuXFxuwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXCJtb3ZpZV8yXFxcIixcXG5cXG7CoCDCoCDCoCDCoCBleHRyYToge1xcblxcbsKgIMKgIMKgIMKgIMKgIMKgIFxcXCJhaWRcXFwiOiBpdGVtLmFpZCxcXG5cXG7CoCDCoCDCoCDCoCDCoCDCoCBcXFwiY2lkXFxcIjogaXRlbS5jaWQsXFxuXFxuwqAgwqAgwqAgwqAgfVxcblxcbsKgIMKgIH0pXFxuXFxufSlcXG5cXG5cXG5cIn0se1wibmFtZVwiOlwi5ZOU5ZOp5pyA5paw56ug6IqCXCIsXCJwYXRoXCI6XCJnZXRVcGRhdGVcIixcInJ1bGVcIjpcImlmIChNWV9QQVJBTVMuc2Vhc29uX2lkKSB7XFxuICAgIHNlYXNvbl9pZCA9IE1ZX1BBUkFNUy5zZWFzb25faWQgKyBcXFwiXFxcIjtcXG4gICAgRGF0YSA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvdmlldy93ZWIvc2Vhc29uP3NlYXNvbl9pZD0nICsgc2Vhc29uX2lkKSkucmVzdWx0O1xcbn0gZWxzZSB7XFxuICAgIERhdGEgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3ZpZXcvd2ViL3NlYXNvbj9lcF9pZD0nICsgTVlfUEFSQU1TLmVwX2lkKSkucmVzdWx0O1xcbn1cXG7ov73liafml6XljoYgPSBEYXRhLm5ld19lcC5kZXNjO1xcbuabtOaWsOi/m+W6piA9IERhdGEubmV3X2VwLnRpdGxlO1xcbuabtOaWsOeKtuaAgSA9IOi/veWJp+aXpeWOhi5tYXRjaCgv5a6M57uTfOacn+W+hS8pID8g6L+95Ymn5pel5Y6GIDogJ+abtOaWsOiHsycgKyAo5pu05paw6L+b5bqmLm1hdGNoKC9bXFxcXHU0ZTAwLVxcXFx1OWZhNV0vKSA/IOabtOaWsOi/m+W6piA6ICgn56ysJyArICjmm7TmlrDov5vluqYgPT0gJycgPyAwIDog5pu05paw6L+b5bqmKSkgKyAn6K+dJylcXG5zZXRSZXN1bHQo5pu05paw54q25oCBKTtcIn0se1wibmFtZVwiOlwidXDlkIjpm4bop4bpopFcIixcInBhdGhcIjpcImNvbGxlY3Rpb25WaWVkb1wiLFwicnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG4vLyDpooTlpITnkIZcXG5wdXRNeVZhcign5Yqf6IO95oqY5Y+gJywgJ+WFsycpO1xcbmltZ0xpbmsgPSBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyk7XFxuYWlkID0gTVlfUEFSQU1TLmFpZCArIFxcXCJcXFwiO1xcbi8vIGJ2aWQgPSBNWV9QQVJBTVMuYnZpZCArIFxcXCJcXFwiO1xcbi8vIG1pZCA9IE1ZX1BBUkFNUy5taWQgKyBcXFwiXFxcIjtcXG50cnkge1xcbiAgICAvL+iOt+WPluinhumikeWIhlDkv6Hmga9cXG4gICAgdmFyIHAgPSBKU09OLnBhcnNlKGZldGNoKFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3ZpZXc/YWlkPVxcXCIgKyBhaWQpKS5kYXRhO1xcbiAgICAvLyDlkIjpm4bkv6Hmga9cXG4gICAgdmFyIHZpZGVvRGF0YSA9IHAudWdjX3NlYXNvbjtcXG4gICAgc2V0UGFnZVRpdGxlKHZpZGVvRGF0YS50aXRsZSk7XFxuICAgIHNldFBhZ2VQaWNVcmwodmlkZW9EYXRhLmNvdmVyICsgJ0BSZWZlcmVyPScpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6IHZpZGVvRGF0YS50aXRsZSxcXG4gICAgICAgIGRlc2M6dmlkZW9EYXRhLmludHJvLFxcbiAgICAgICAgaW1nOiB2aWRlb0RhdGEuY292ZXIgKyAnQFJlZmVyZXI9JyxcXG4gICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChpbnRybykgPT4ge1xcbiAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5P2Z5cGFnZScpLnJ1bGUoKGludHJvKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBkID0gW107XFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW50cm8sXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImxvbmdfdGV4dFxcXCIsXFxuICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXG4gICAgICAgICAgICB9LCBpbnRybylcXG4gICAgICAgIH0sIHZpZGVvRGF0YS5pbnRybyksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInBpY18xXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogJ2Rt55uS5a2QJywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZyNub0hpc3RvcnkjP3J1bGU9ZG3nm5LlrZAnO1xcbiAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICflvLnluZXmjqfliLYnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKSA9PSAndHJ1ZScpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIbkuI3lj5dkbeebkuWtkOWPguaVsOaOp+WItic7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ3RydWUnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5Y+X5YiwZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgIH1dXFxuICAgICAgICB9XFxuICAgIH0sIHtcXG4gICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcImJsdWVcXFwiPicgKyBwLm93bmVyLm5hbWUgKyAnPC9mb250PicsXFxuICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdXBIb21lXFxcIixcXG4gICAgICAgIGltZzogcC5vd25lci5mYWNlICsgXFxcIkBSZWZlcmVyPVxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICBkZXNjOiAnPHNtYWxsPjxzbWFsbD7lhbHmnIknICsgdmlkZW9EYXRhLmVwX2NvdW50ICsgJ+adoeinhumikeaVsOaNrjwvc21hbGw+PC9zbWFsbD4nLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBtaWQ6IHAub3duZXIubWlkLFxcbiAgICAgICAgICAgIHRpdGxlOiBwLm93bmVyLm5hbWUsXFxuICAgICAgICAgICAgZmFjZTogcC5vd25lci5mYWNlXFxuICAgICAgICB9XFxuICAgIH0sIHtcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgfSk7XFxuICAgIHZhciBpbmRleCA9IDE7XFxuICAgIHN0b3JhZ2UwLnB1dFZhcigndmlkZW9TZWN0aW9ucycsIHZpZGVvRGF0YS5zZWN0aW9ucyk7XFxuICAgIHZpZGVvRGF0YS5zZWN0aW9ucy5mb3JFYWNoKGVsID0+IHtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICfwn5OBJyArIGVsLnRpdGxlLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChpbmRleCkgPT4ge1xcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TXlWYXIoJ2lzRm9sZF8nK2luZGV4LCAneScpID09ICd5Jykge1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ2lzRm9sZF8nK2luZGV4LCAnbicpO1xcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlSXRlbUJ5Q2xzKCdzZWN0aW9uJyArIGluZGV4ICsgJy1wYXJ0Jyk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5oqY5Y+gJztcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKCdpc0ZvbGRfJytpbmRleCwgJ3knKTtcXG4gICAgICAgICAgICAgICAgICAgIHZpZGVvU2VjdGlvbnMgPSBzdG9yYWdlMC5nZXRWYXIoJ3ZpZGVvU2VjdGlvbnMnKTtcXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25QYXJ0TGlzdCA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgdmlkZW9TZWN0aW9uc1tpbmRleCAtIDFdLmVwaXNvZGVzLmZvckVhY2goaXRlbSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgYWlkID0gaXRlbS5haWQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lkID0gaXRlbS5jaWQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdCA9IGl0ZW0uYXJjLnN0YXQ7XFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VjdGlvblBhcnRMaXN0LnB1c2goe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnVxcXFx0XFxcXHRcXFxcdDxzbWFsbD48L2ZvbnQ+4pa277iOJyArIGl0ZW0udGl0bGUgKyAnXFxcXG5cXFxcdFxcXFx0XFxcXHRcXFxcdFxcXFx0PC9mb250Pjwvc21hbGw+PHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1ncmF5PuaSreaUvumHj++8micgKyBzdGF0LnZpZXcgKyAnXFxcXHRcXFxcdFxcXFx05by55bmV77yaJyArIHN0YXQuZGFubWFrdSArICdcXFxcdFxcXFx0XFxcXHTllpzmrKLvvJonICsgc3RhdC5saWtlICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCkubGF6eVJ1bGUoKGFpZCwgY2lkLCBxbikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCBxbikucmVwbGFjZSgvOy9nLCBcXFwi77yb77ybXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGFpZCArIFxcXCJcXFwiLCBjaWQgKyBcXFwiXFxcIiwgJzExNicpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7IGxpbmVWaXNpYmxlOiBmYWxzZSwgY2xzOiAnc2VjdGlvbicgKyBpbmRleCArICctcGFydCcsaWQ6J2FpZC0nK2FpZCsnfGNpZC0nK2NpZCB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgYWRkSXRlbUFmdGVyKCdTZWN0aW9uJyArIGluZGV4LCBzZWN0aW9uUGFydExpc3QpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suWxleW8gCc7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9LCBpbmRleCksXFxuICAgICAgICAgICAgY29sX3R5cGU6ICd0ZXh0XzEnLFxcbiAgICAgICAgICAgIGV4dHJhOiB7IGlkOiAnU2VjdGlvbicgKyBpbmRleCB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGVsLmVwaXNvZGVzLmZvckVhY2goaXRlbSA9PiB7XFxuICAgICAgICAgICAgYWlkID0gaXRlbS5haWQ7XFxuICAgICAgICAgICAgY2lkID0gaXRlbS5jaWQ7XFxuICAgICAgICAgICAgc3RhdCA9IGl0ZW0uYXJjLnN0YXQ7XFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICfigJzigJzigJ3igJ1cXFxcdFxcXFx0XFxcXHQ8c21hbGw+PC9mb250PuKWtu+4jicgKyBpdGVtLnRpdGxlICsgJ1xcXFxuXFxcXHRcXFxcdFxcXFx0XFxcXHRcXFxcdDwvZm9udD48L3NtYWxsPjxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9Z3JheT7mkq3mlL7ph4/vvJonICsgc3RhdC52aWV3ICsgJ1xcXFx0XFxcXHRcXFxcdOW8ueW5le+8micgKyBzdGF0LmRhbm1ha3UgKyAnXFxcXHRcXFxcdFxcXFx05Zac5qyi77yaJyArIHN0YXQubGlrZSArICc8L2ZvbnQ+PC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKChhaWQsIGNpZCwgcW4pID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgcW4pLnJlcGxhY2UoLzsvZywgXFxcIu+8m++8m1xcXCIpO1xcbiAgICAgICAgICAgICAgICB9LCBhaWQgKyBcXFwiXFxcIiwgY2lkICsgXFxcIlxcXCIsICcxMTYnKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYTogeyBsaW5lVmlzaWJsZTogZmFsc2UsIGNsczogJ3NlY3Rpb24nICsgaW5kZXggKyAnLXBhcnQnLGlkOidhaWQtJythaWQrJ3xjaWQtJytjaWQgfVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9KTtcXG4gICAgICAgIGluZGV4Kys7XFxuICAgIH0pXFxufSBjYXRjaCAoZSkge1xcbiAgICBsb2coZSk7XFxuICAgIGQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJ+mhtemdoui1sOS4ouS6hi4uLicsXFxuICAgICAgICBpbWc6ICdodHRwczovL2kwLmhkc2xiLmNvbS9iZnMvZ2VuZXJhbC9mN2I2NjcwMTFhNDY2MTU3MzJjNzAxZjRiYjFkMDdmNzkzZjhkMWRmLnBuZ0BSZWZlcmVyPScsXFxuICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXG4gICAgICAgIGRlc2M6ICflpKfmpoLnjofop4bpopHooqvlsIHnpoHvvIzmiJbogIV1cOW3sui3kei3r34nLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJwaWNfMVxcXCJcXG4gICAgfSk7XFxufVxcbnNldFJlc3VsdChkKTtcXG5cIn0se1wibmFtZVwiOlwi5Zu+5qCH5LiL6L29XCIsXCJwYXRoXCI6XCJzYXZlTG9jYWxcIixcInJ1bGVcIjpcIiQuZXhwb3J0cy5zYXZlTG9jYWwgPSAoKSA9PiB7XFxuICAgIGNvbnN0IGJhc2U2NFRvSGV4ID0gKGJhc2U2NFN0cikgPT4ge1xcbiAgICAgICAgLy8g5Yig6Zmk5YmN57yA5bm26Kej56CBQmFzZTY05a2X56ym5LiyXFxuICAgICAgICB2YXIgYmluYXJ5U3RyID0gd2luZG93MC5hdG9iKGJhc2U2NFN0ci5zcGxpdCgnLCcpWzFdKTtcXG5cXG4gICAgICAgIC8vIOi9rOaNouS4ujE26L+b5Yi25a2X56ym5LiyXFxuICAgICAgICB2YXIgaGV4U3RyID0gJyc7XFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJpbmFyeVN0ci5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgIHZhciBoZXggPSBiaW5hcnlTdHIuY2hhckNvZGVBdChpKS50b1N0cmluZygxNik7XFxuICAgICAgICAgICAgaGV4U3RyICs9IChoZXgubGVuZ3RoID09PSAyID8gaGV4IDogJzAnICsgaGV4KTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBoZXhTdHI7XFxuICAgIH07XFxuICAgIHNob3dMb2FkaW5nKFxcXCLlm77moIfliJ3lp4vljJbkuK0uLi5cXFwiKTtcXG4gICAgdmFyIHR1YmlhbyA9IHt9O1xcbiAgICB0cnkge1xcbiAgICAgICAgLy8g5Ymq6LS05p2/57q/6LevXFxuICAgICAgICBodG1sID0gcmVxdWVzdCgnaHR0cHM6Ly9uZXRjdXQuY24vcC9hMWZjZjBkM2IwYTI3ZjEzJyk7XFxuICAgICAgICBkYXRhID0gaHRtbC5tYXRjaCgvey4qbm90ZV9jb250ZW50Lip1cGRhdGVkX2F0Lip9LylbMF07XFxuICAgICAgICBldmFsKCd0dWJpYW8gPScgKyBKU09OLnBhcnNlKGRhdGEpLm5vdGVfY29udGVudCk7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGxvZygn5Ymq6LS05p2/5Ye66ZSZLOWIh+aNouaJmOeuoee6v+i3rycpO1xcbiAgICAgICAgcm91dGUgPSBbXFxuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0Y29kZS5uZXQvcXFfMjM4NDc4MTkvaGlrZXIvLS9yYXcvbWFzdGVyL3R1Ymlhby5qc29uJyxcXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRlYS5jb20vY3kvaGlrZXIvcmF3L2NvbW1pdC9iZTIxNjBjNmEwMWRiODczZDlmOTY4MWJhN2U4NmVlYmZhMTE4ZDg2L3R1Ymlhby5qc29uJyxcXG4gICAgICAgICAgICAnaHR0cHM6Ly9yYXcuY29kZWh1Yi5jbi9wL2hpa2VyL2QvdHViaWFvL2dpdC9yYXcvbWFzdGVyL3R1Ymlhby5qc29uP3Rva2VuPUdHZGxJdVZHcVkzYjNMeWRJb3dya3NiVUJDZk15eDJmRjMxV1VaZW80bScsXFxuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0ZWUuY29tL214eGwtY3kvaGlrZXIvcmF3L21hc3Rlci90dWJpYW8uanNvbidcXG4gICAgICAgIF07XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgZXZhbCgndHViaWFvID0nICsgcmVxdWVzdChyb3V0ZVtpXSkpO1xcbiAgICAgICAgICAgICAgICBpZiAodHViaWFvW1xcXCLkupTlpKdcXFwiXSAmJiB0dWJpYW9bXFxcIuWTlOWTqVxcXCJdKSB7XFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGxvZygn57q/6Lev77yaJyArIHR1Ymlhb1tpXSArICfooqvlopnkuoYuLi4nKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgbG9nKCfnur/ot6/vvJonICsgdHViaWFvW2ldICsgJ+WHuumUmeS6hi4uLicpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICB0cnkge1xcbiAgICAgICAgdmFyIHd1ZGEgPSB0dWJpYW9bXFxcIuS6lOWkp1xcXCJdO1xcbiAgICAgICAgdmFyIGJpbGkgPSB0dWJpYW9bXFxcIuWTlOWTqVxcXCJdO1xcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcXG4gICAgICAgIGZvciAobGV0IGl0ZW0gaW4gd3VkYSkge1xcbiAgICAgICAgICAgIHdyaXRlSGV4RmlsZShgaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS90dWJpYW8vJHtpdGVtfS5zdmdgLCBiYXNlNjRUb0hleCh3dWRhW2l0ZW1dKSk7XFxuICAgICAgICAgICAgbG9nKGDliJ3lp4vljJbnrKwke2luZGV4Kyt95Liq5Zu+5qCHOiR7aXRlbX0uLi5gKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGZvciAobGV0IGl0ZW0gaW4gYmlsaSkge1xcbiAgICAgICAgICAgIHdyaXRlSGV4RmlsZShgaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpX3BpYy8ke2l0ZW19LnBuZ2AsIGJhc2U2NFRvSGV4KGJpbGlbaXRlbV0pKTtcXG4gICAgICAgICAgICBsb2coYOWIneWni+WMluesrCR7aW5kZXgrK33kuKrlm77moIc6JHtpdGVtfS4uLmApO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2hvd0xvYWRpbmcoJ+Wbvuagh+WIneWni+WMluWujOaIkO+8muWFseiuoScgKyBpbmRleCArICfkuKrlm77moIcnKTtcXG4gICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIHNob3dMb2FkaW5nKCflm77moIfliJ3lp4vljJblpLHotKUnKTtcXG4gICAgICAgIGxvZygn5Zu+5qCH5Yid5aeL5YyW5aSx6LSlOicgKyBlKTtcXG4gICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgIH1cXG5cXG59O1xcblwifV0sXCJwYXJhbXNcIjpcIntcXFwiYWlkXFxcIjo5NjY3NzUyMjQsXFxcImJ2aWRcXFwiOlxcXCJCVjFXVzR5MWM3cFhcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuS4gOWPo+awlOeci+WujOOAkOWMl+a0vuebl+Wik+eslOiusOOAkeabtOaWsOacgOWFqOeJiOacrO+8jOecn+WunuaVheS6i+aUuee8lu+8gVxcXCJ9XCIsXCJzYXZlZFwiOmZhbHNlLFwidGl0bGVcIjpcIkJpbGlsaVwiLFwidmVyc2lvblwiOjAsXCJ1cmxcIjpcImhpa2VyOi8vcGFnZS92aWRlb1wiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6XFxudmFyIGQgPSBbXTtcXG4vLyDpooTlpITnkIZcXG5wdXRNeVZhcign5Yqf6IO95oqY5Y+gJywgJ+WFsycpO1xcbmltZ0xpbmsgPSBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyk7XFxuYWlkID0gTVlfUEFSQU1TLmFpZCArIFxcXCJcXFwiO1xcbi8vIGJ2aWQgPSBNWV9QQVJBTVMuYnZpZCArIFxcXCJcXFwiO1xcbm1pZCA9IE1ZX1BBUkFNUy5taWQgKyBcXFwiXFxcIjtcXG52YXIge2Zvcm1hdFNlY29uZHN9PSQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpO1xcbnRyeSB7XFxuICAgIC8v6I635Y+W6KeG6aKR5YiGUOS/oeaBr1xcbiAgICB2YXIgcCA9IEpTT04ucGFyc2UoZmV0Y2goXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcIiArIGFpZCkpLmRhdGE7XFxuICAgIGhhc0xpa2UgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5oYXNMaWtlKGFpZCk7XFxuICAgIGhhc0Zhdm91ciA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmhhc0Zhdm91cihhaWQpO1xcbiAgICBzZXRQYWdlVGl0bGUocC50aXRsZSk7XFxuICAgIHNldFBhZ2VQaWNVcmwocC5waWMgKyAnQFJlZmVyZXI9Jyk7XFxuICAgIC8vIOWPquaciTFQ55qE5oOF5Ya1XFxuICAgIGlmIChwLnBhZ2VzLmxlbmd0aCA9PSAxKSB7XFxuICAgICAgICBjaWQgPSBwLnBhZ2VzWzBdLmNpZDtcXG4gICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IHAudGl0bGUsXFxuICAgICAgICAgICAgaW1nOiBwLnBpYyArICdAUmVmZXJlcj0nLFxcbiAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKChhaWQsIGNpZCwgcW4pID0+IHtcXG4gICAgICAgICAgICAgICAgLy8g55yf56a75LqG5Liq5aSn6LCx77yM5piO5piO5pu/5o2i5o6J5LqG77yMdWHlrZfnrKbkuLLlj4jlj5jlm57mnaXkuobvvIzlj4jopoHlpITnkIbkuIDmrKFcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCBxbikucmVwbGFjZSgvOy9nLCBcXFwi77yb77ybXFxcIik7XFxuICAgICAgICAgICAgfSwgYWlkICsgXFxcIlxcXCIsIGNpZCArIFxcXCJcXFwiLCAnMTEyJyksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJwaWNfMVxcXCIsXFxuICAgICAgICAgICAgZGVzYzon5pKt5pS+6YePOicrcC5zdGF0LnZpZXcrJ1xcXFx0XFxcXHRcXFxcdOW8ueW5leaVsDonK3Auc3RhdC5kYW5tYWt1KydcXFxcbuWPkeW4g+aXpeacnzonKyQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLnRpbWVDb252ZXJ0KHAuY3RpbWUpLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOidhaWQtJythaWQrJ3xjaWQtJytjaWQsXFxuICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnZG3nm5LlrZAnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZyNub0hpc3RvcnkjP3J1bGU9ZG3nm5LlrZAnO1xcbiAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgfSwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICflvLnluZXmjqfliLYnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGdldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ2ZhbHNlJykgPT0gJ3RydWUnKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ2ZhbHNlJyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIbkuI3lj5dkbeebkuWtkOWPguaVsOaOp+WItic7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAndHJ1ZScpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5Y+X5YiwZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcImJsdWVcXFwiPicgKyBwLm93bmVyLm5hbWUgKyAnPC9mb250PicsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXCIsXFxuICAgICAgICAgICAgaW1nOiBwLm93bmVyLmZhY2UgKyBcXFwiQFJlZmVyZXI9XFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbWlkOiBwLm93bmVyLm1pZCxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHAub3duZXIubmFtZSxcXG4gICAgICAgICAgICAgICAgZmFjZTogcC5vd25lci5mYWNlXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICAvLyDomb3nhLblj6rmnIkxUCzkvYblj6/og73lpITkuo7lkIjpm4bop4bpopHkuK3vvIzlvoDlvoDlnKh1cOS4iuS8oOS4reWxnuS6juS4gOWll+W9seeJh1xcbiAgICAgICAgaWYgKHAudWdjX3NlYXNvbikge1xcbiAgICAgICAgICAgIGQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+TgeaJgOWxnuWQiOmbhu+8mjxhIGhyZWY9XFxcImhpa2VyOi8vcGFnZS9jb2xsZWN0aW9uVmllZG9cXFwiPicrcC51Z2Nfc2Vhc29uLnRpdGxlKyc8L2E+JyxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2NvbGxlY3Rpb25WaWVkbyNub0hpc3RvcnkjXFxcIixcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcbiAgICAgICAgICAgICAgICBleHRyYTogeyBcXFwidGV4dFNpemVcXFwiOiAxMiwgYWlkOiBhaWQgfVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9XFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogcC5zdGF0Lmxpa2UsXFxuICAgICAgICAgICAgaW1nOiBoYXNMaWtlID09IDEgPyBpbWdMaW5rLuW3sueCuei1niA6IGltZ0xpbmsu5pyq54K56LWeLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChhaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmxpa2VMb2dpYyhhaWQpXFxuICAgICAgICAgICAgfSwgYWlkKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6ICdzZXRMaWtlJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogcC5zdGF0LmZhdm9yaXRlLFxcbiAgICAgICAgICAgIGltZzogaGFzRmF2b3VyID8gaW1nTGluay7lt7LmlLbol48gOiBpbWdMaW5rLuacquaUtuiXjyxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxuICAgICAgICAgICAgICAgIHVwTWlkID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcIikpLnVzZXJNaWQ7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5mYXZvdXJMb2dpYyhhaWQsIHVwTWlkKVxcbiAgICAgICAgICAgIH0sIGFpZCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiAnc2V0RmF2b3VyJ1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogJ+eojeWQjuWGjeeciycsXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLueojeWQjuWGjeeciyxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9hcGlcXFwiKS5qdWRnZVRvdmlldyhhaWQpXFxuICAgICAgICAgICAgfSwgYWlkKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICfmn6XnnIvor4TorronLFxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZScsXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuafpeeci+ivhOiuuixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgXFxcImlkXFxcIjogYWlkLFxcbiAgICAgICAgICAgICAgICBcXFwidHlwZVxcXCI6IDFcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiBwLmRlc2MsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsb25nX3RleHRcXFwiLFxcbiAgICAgICAgfSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICAvLyDlrZjlnKjlpJrpm4bliIZQXFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBwLnRpdGxlLFxcbiAgICAgICAgICAgIGltZzogcC5waWMgKyAnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICBkZXNjOifmkq3mlL7ph486JytwLnN0YXQudmlldysnXFxcXHRcXFxcdFxcXFx05by55bmV5pWwOicrcC5zdGF0LmRhbm1ha3UrJ1xcXFxu5Y+R5biD5pel5pyfOicrJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikudGltZUNvbnZlcnQocC5jdGltZSksXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKHApID0+IHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHk/ZnlwYWdlJykucnVsZSgocCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgZCA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcC5kZXNjLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibG9uZ190ZXh0XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQoZCk7XFxuICAgICAgICAgICAgICAgIH0sIHApXFxuICAgICAgICAgICAgfSwgcCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJwaWNfMVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdkbeebkuWtkCcsIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nI25vSGlzdG9yeSM/cnVsZT1kbeebkuWtkCc7XFxuICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+W8ueW5leaOp+WIticsIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKSA9PSAndHJ1ZScpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W8ueW5leWwhuS4jeWPl2Rt55uS5a2Q5Y+C5pWw5o6n5Yi2JztcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICd0cnVlJyk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIblj5fliLBkbeebkuWtkOWPguaVsOaOp+WItic7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgfSlcXG4gICAgICAgICAgICAgICAgfV1cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFwiYmx1ZVxcXCI+JyArIHAub3duZXIubmFtZSArICc8L2ZvbnQ+JyxcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvdXBIb21lXFxcIixcXG4gICAgICAgICAgICBpbWc6IHAub3duZXIuZmFjZSArIFxcXCJAUmVmZXJlcj1cXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiYXZhdGFyXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBtaWQ6IHAub3duZXIubWlkLFxcbiAgICAgICAgICAgICAgICB0aXRsZTogcC5vd25lci5uYW1lLFxcbiAgICAgICAgICAgICAgICBmYWNlOiBwLm93bmVyLmZhY2VcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiBwLnN0YXQubGlrZSxcXG4gICAgICAgICAgICBpbWc6IGhhc0xpa2UgPT0gMSA/IGltZ0xpbmsu5bey54K56LWeIDogaW1nTGluay7mnKrngrnotZ4sXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGFpZCkgPT4ge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcIikubGlrZUxvZ2ljKGFpZClcXG4gICAgICAgICAgICB9LCBhaWQpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogJ3NldExpa2UnXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiBwLnN0YXQuZmF2b3JpdGUsXFxuICAgICAgICAgICAgaW1nOiBoYXNGYXZvdXIgPyBpbWdMaW5rLuW3suaUtuiXjyA6IGltZ0xpbmsu5pyq5pS26JePLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChhaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgdXBNaWQgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiKSkudXNlck1pZDtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmZhdm91ckxvZ2ljKGFpZCwgdXBNaWQpXFxuICAgICAgICAgICAgfSwgYWlkKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6ICdzZXRGYXZvdXInXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSwge1xcbiAgICAgICAgICAgIHRpdGxlOiAn56iN5ZCO5YaN55yLJyxcXG4gICAgICAgICAgICBpbWc6IGltZ0xpbmsu56iN5ZCO5YaN55yLLFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChhaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmp1ZGdlVG92aWV3KGFpZClcXG4gICAgICAgICAgICB9LCBhaWQpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIixcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogJ+afpeeci+ivhOiuuicsXFxuICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXG4gICAgICAgICAgICBpbWc6IGltZ0xpbmsu5p+l55yL6K+E6K66LFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBcXFwiaWRcXFwiOiBhaWQsXFxuICAgICAgICAgICAgICAgIFxcXCJ0eXBlXFxcIjogMVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pXFxuICAgICAgICBkLnB1c2goe1xcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaydcXG4gICAgICAgIH0sIHtcXG4gICAgICAgICAgICB0aXRsZTogJ+mAiembhuWIl+ihqCcsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgZGVzYzonPHNtYWxsPjxzbWFsbD7lhbEnICsgcC52aWRlb3MgKyAn5p2h6KeG6aKRPC9zbWFsbD48L3NtYWxsPicsXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWIl+ihqCxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICB9LCB7XFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcbiAgICAgICAgfSk7XFxuICAgICAgICBwLnBhZ2VzLmZvckVhY2goaXRlbSA9PiB7XFxuICAgICAgICAgICAgY2lkID0gaXRlbS5jaWQ7XFxuICAgICAgICAgICAgZC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0ucGFydCxcXG4gICAgICAgICAgICAgICAgZGVzYzpmb3JtYXRTZWNvbmRzKGl0ZW0uZHVyYXRpb24pLFxcbiAgICAgICAgICAgICAgICAvLyBpbWc6aW1nTGluay7liIZQ5YiX6KGo6aG5LFxcbiAgICAgICAgICAgICAgICBpbWc6aXRlbS5maXJzdF9mcmFtZSsnQFJlZmVyZXI9JyxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKCkubGF6eVJ1bGUoKGFpZCwgY2lkLCBxbikgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCBxbikucmVwbGFjZSgvOy9nLCBcXFwi77yb77ybXFxcIik7XFxuICAgICAgICAgICAgICAgIH0sIGFpZCArIFxcXCJcXFwiLCBjaWQgKyBcXFwiXFxcIiwgJzExNicpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImF2YXRhclxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOntcXG4gICAgICAgICAgICAgICAgICAgIGlkOidhaWQtJythaWQrJ3xjaWQtJytjaWQsXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSlcXG4gICAgfVxcbn0gY2F0Y2ggKGUpIHtcXG4gICAgbG9nKGUpO1xcbiAgICBkLnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICfpobXpnaLotbDkuKLkuoYuLi4nLFxcbiAgICAgICAgaW1nOiAnaHR0cHM6Ly9pMC5oZHNsYi5jb20vYmZzL2dlbmVyYWwvZjdiNjY3MDExYTQ2NjE1NzMyYzcwMWY0YmIxZDA3Zjc5M2Y4ZDFkZi5wbmdAUmVmZXJlcj0nLFxcbiAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxuICAgICAgICBkZXNjOiAn5aSn5qaC546H6KeG6aKR6KKr5bCB56aB77yM5oiW6ICFdXDlt7Lot5Hot69+JyxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicGljXzFcXFwiXFxuICAgIH0pO1xcbn1cXG5zZXRSZXN1bHQoZCk7XFxuXCIsXCJncm91cFwiOlwi8J+OqERSXCIsXCJ1YVwiOlwicGNcIixcInByZVJ1bGVcIjpcImpzOlxcbi8vIOWbvueJh+mihOWkhOeQhlxcbmltZ0xvY2F0aW9uID0ge1xcbiAgICBcXFwi5bey5pS26JePXFxcIjogJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMv5bey5pS26JePLnBuZycsXFxuICAgIFxcXCLmnKrmlLbol49cXFwiOiAnaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpX3BpYy/mnKrmlLbol48ucG5nJyxcXG4gICAgXFxcIueojeWQjuWGjeeci1xcXCI6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGlfcGljL+eojeWQjuWGjeeciy5wbmcnLFxcbiAgICBcXFwi5pyq54K56LWeXFxcIjogJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMv5pyq54K56LWeLnBuZycsXFxuICAgIFxcXCLlt7LngrnotZ5cXFwiOiAnaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpX3BpYy/lt7LngrnotZ4ucG5nJyxcXG4gICAgXFxcIua3u+WKoOWFs+azqFxcXCI6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGlfcGljL+a3u+WKoOWFs+azqC5wbmcnLFxcbiAgICBcXFwi5bey5YWz5rOoXFxcIjogJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMv5bey5YWz5rOoLnBuZycsXFxuICAgIFxcXCLkuJPmoI9cXFwiOiAnaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpX3BpYy/kuJPmoI8ucG5nJyxcXG4gICAgXFxcIuafpeeci+ivhOiuulxcXCI6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGlfcGljL+afpeeci+ivhOiuui5wbmcnLFxcbiAgICBcXFwi5ZGo6L65XFxcIjogJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMv5ZGo6L65LnBuZycsXFxuICAgIFxcXCLlj4zovrlcXFwiOiAnaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpX3BpYy/lj4zovrkucG5nJyxcXG4gICAgXFxcIuWIl+ihqFxcXCI6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGlfcGljL+WIl+ihqC5wbmcnLFxcbiAgICBcXFwi6K6i6ZiFXFxcIjogJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMv6K6i6ZiFLnBuZycsXFxuICAgIFxcXCLml6XljoZcXFwiOiAnaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpX3BpYy/ml6XljoYucG5nJyxcXG4gICAgXFxcIuWKqOaAgVxcXCI6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGlfcGljL+WKqOaAgS5wbmcnLFxcbiAgICBcXFwi5Yqo5oCB6Laz6L+5XFxcIjogJ2h0dHBzOi8vY2RuMy5pY29uZmluZGVyLmNvbS9kYXRhL2ljb25zL25hdHVyZS0xNjkvMzIvZ3Jhc3NfdHVyZl9wbGFudF9sYXduX25hdHVyZV9tZWFkb3dfZ2FyZGVuX25hdHVyYWxfZW52aXJvbm1lbnQtMTI4LnBuZ0BSZWZlcmVyPScsXFxuICAgIFxcXCLlkIjpm4bmlofku7blpLlcXFwiOiAnaHR0cHM6Ly9jZG40Lmljb25maW5kZXIuY29tL2RhdGEvaWNvbnMvY29tbWVubHktbmVlZGVkLzQwMC9JY29uLTE3LTEyOC5wbmdAUmVmZXJlcj0nLFxcbiAgICBcXFwi5YiGUOWIl+ihqOmhuVxcXCI6ICdodHRwczovL2NkbjEuaWNvbmZpbmRlci5jb20vZGF0YS9pY29ucy9taW5pbWFsLXVpLTIvMjQvcGxheV9tZWRpYV9idXR0b24tMTI4LnBuZ0BSZWZlcmVyPSdcXG59XFxuc3RvcmFnZTAucHV0TXlWYXIoJ+WbvuaghycsIGltZ0xvY2F0aW9uKTtcXG5cXG4vLyog5LiL6Z2i5Luj56CB55So5LqO6Ieq5Yqo5ouJ5Y+W5Zu+5qCH77yM5peg5aWIICovXFxuaWYgKCFmaWxlRXhpc3QoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMnKSB8fCAhZmlsZUV4aXN0KCdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L3R1YmlhbycpKSB7XFxuICAgICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL3NhdmVMb2NhbFxcXCIpLnNhdmVMb2NhbCgpO1xcbn1cXG5cXG5cXG4vLyog5LiL6Z2i5Luj56CB55So5LqO5Yid5aeL5YyW6LSm5Y+36YWN572uICovXFxuaWYgKCFmaWxlRXhpc3QoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHQnKSkge1xcbiAgICBzZXR0aW5ncyA9IEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgIHVzZXJMaXN0OiBbe1xcbiAgICAgICAgICAgIGNvb2tpZTogXFxcIlxcXCIsXFxuICAgICAgICAgICAgdXNlck5hbWU6ICcnLFxcbiAgICAgICAgICAgIHVzZXJNaWQ6ICcnLFxcbiAgICAgICAgICAgIHZpcFN0YXR1czogMCxcXG4gICAgICAgICAgICBmYWNlOiAnaHR0cHM6Ly9sYW5tZWlndW9qaWFuZy5jb20vdHViaWFvL21vdmllLzIwLnN2ZycsXFxuICAgICAgICB9XSxcXG4gICAgICAgIGJmS2V5OiBcXFwiXFxcIlxcbiAgICB9KTtcXG4gICAgc2F2ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFwiLCBzZXR0aW5ncyk7XFxufSBlbHNlIHtcXG4gICAgc2V0dGluZ3MgPSBKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHQnKSk7XFxuICAgIC8vIOWIpOaWrSBKU09OIOWvueixoeaYr+WQpua7oei2s+aIkeS7rOWumuS5ieeahOe7k+aehFxcbiAgICBpZiAodHlwZW9mIHNldHRpbmdzID09PSAnb2JqZWN0JyAmJlxcbiAgICAgICAgQXJyYXkuaXNBcnJheShzZXR0aW5ncy51c2VyTGlzdCkgJiZcXG4gICAgICAgIHNldHRpbmdzLnVzZXJMaXN0LmV2ZXJ5KHAgPT4gdHlwZW9mIHAgPT09ICdvYmplY3QnICYmIHR5cGVvZiBwLmNvb2tpZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHAudXNlck5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBwLnVzZXJNaWQgPT09ICdudW1iZXInICYmIHR5cGVvZiBwLmZhY2UgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBwLnZpcFN0YXR1cyA9PT0gJ251bWJlcicpICYmXFxuICAgICAgICB0eXBlb2Ygc2V0dGluZ3MuYmZLZXkgPT09ICdzdHJpbmcnXFxuICAgICkge1xcbiAgICAgICAgbG9nKCfotKblj7fphY3nva7mlofku7bmraPluLgnKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGxvZygn5Yid5aeL5YyWL+WkjeWOn+i0puWPt+mFjee9ruaWh+S7ticpO1xcbiAgICAgICAgc2V0dGluZyA9ICcnO1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAvLyDov4Hnp7vljp/phY3nva7mlofku7bkuK3nmoTotKblj7fkv6Hmga9cXG4gICAgICAgICAgICBvcmlnaW5Vc2VyU2V0dGluZyA9IEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dCcpKTtcXG4gICAgICAgICAgICBsb2cob3JpZ2luVXNlclNldHRpbmcpO1xcbiAgICAgICAgICAgIGNvb2tpZSA9IG9yaWdpblVzZXJTZXR0aW5nLmNvb2tpZTtcXG4gICAgICAgICAgICB1c2VyTmFtZSA9IG9yaWdpblVzZXJTZXR0aW5nLnVzZXJOYW1lO1xcbiAgICAgICAgICAgIHVzZXJNaWQgPSBvcmlnaW5Vc2VyU2V0dGluZy51c2VyTWlkO1xcbiAgICAgICAgICAgIGZhY2UgPSBvcmlnaW5Vc2VyU2V0dGluZy5mYWNlO1xcbiAgICAgICAgICAgIHZpcFN0YXR1cyA9IG9yaWdpblVzZXJTZXR0aW5nLnZpcFN0YXR1cztcXG4gICAgICAgICAgICBpZihjb29raWU9PT11bmRlZmluZWQpe3NldHRpbmc9J3tcXFwidXNlckxpc3RcXFwiOltdLFxcXCJiZktleVxcXCI6XFxcIlxcXCJ9Jzt9ZWxzZXtcXG4gICAgICAgICAgICAgICAgc2V0dGluZyA9IEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgICAgIHVzZXJMaXN0OiBbe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZTogY29va2llLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJOYW1lOiB1c2VyTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2VyTWlkOiB1c2VyTWlkLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2U6IGZhY2UsXFxuICAgICAgICAgICAgICAgICAgICAgICAgdmlwU3RhdHVzOiB2aXBTdGF0dXNcXG4gICAgICAgICAgICAgICAgICAgIH1dLFxcbiAgICAgICAgICAgICAgICAgICAgYmZLZXk6IFxcXCJcXFwiXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coXFxcIuayoeacieaXp+eahOWQiOazleeahOmFjee9ruaWh+S7tlxcXCIpO1xcbiAgICAgICAgICAgIHNldHRpbmcgPSBKU09OLnN0cmluZ2lmeSh7XFxuICAgICAgICAgICAgICAgIHVzZXJMaXN0OiBbXSxcXG4gICAgICAgICAgICAgICAgYmZLZXk6IFxcXCJcXFwiXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBzYXZlRmlsZShcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXCIsIHNldHRpbmcpO1xcbiAgICB9XFxufVxcblwiLFwicGFnZXNcIjpcIlt7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLliIbnsbvniYflupNcXFwiLFxcXCJwYXRoXFxcIjpcXFwidmF1bHRcXFwiLFxcXCJydWxlXFxcIjpcXFwi6aG26YOo5aSn57G7ID0gWyflm73liJsnLCAn55S16KeGJywgJ+e6quW9leeJhycsICfnu7zoibonLCAn55Wq5YmnJywgJ+eUteW9sSddXFxcXG5pZiAocGFnZSA9PSAxKSB7XFxcXG4gICAgLy8g5oqY5Y+g5byA5YWzXFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+WFsycgPyAn4oCc4oCc4oCd4oCdPGI+PHNwYW4gc3R5bGU9XFxcXFxcXCJjb2xvcjogI0ZGMDAwMFxcXFxcXFwiPuKIqDwvc3Bhbj48L2I+JyA6ICfigJzigJzigJ3igJ08Yj48c3BhbiBzdHlsZT1cXFxcXFxcImNvbG9yOiAjMWFhZDE5XFxcXFxcXCI+4oinPC9zcGFuPjwvYj4nLFxcXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcign5oqY5Y+gJywgJ+WFsycpO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcign5oqY5Y+gJywgJ+W8gCcpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0pLFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxuICAgIH0pXFxcXG4gICAg6aG26YOo5aSn57G7LmZvckVhY2gobGkgPT4ge1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGxpID09IGdldE15VmFyKCflpKfnsbsnLCAn5Zu95YibJykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgbGkgKyAnPC9mb250PjwvYj4nIDogbGksXFxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGxpKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoJ+Wkp+exuycsIGxpKTtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9LCBsaSksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxuICAgICAgICB9KVxcXFxuICAgIH0pO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXG4gICAgfSlcXFxcbn1cXFxcbi8vIOmhtumDqOWIhuexu+WPguaVsOaYoOWwhFxcXFxuc3dpdGNoIChnZXRNeVZhcign5aSn57G7JywgJ+WbveWImycpKSB7XFxcXG4gICAgY2FzZSAn5Zu95YibJzpcXFxcbiAgICAgICAgc2Vhc29uVHlwZSA9IDQ7XFxcXG4gICAgICAgIGlmIChnZXRNeVZhcign5oqY5Y+gJywgJ+WFsycpID09ICflvIAnKSB7XFxcXG4gICAgICAgICAgICBpZiAocGFnZSA9PSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGZldGNoKCdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vZ3VvY2h1YW5nL2luZGV4Jyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoLmZvckVhY2godWwgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXFxcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoLmZvckVhY2gobGkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChsaSwg562b6YCJ5p2h5Lu2KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXFxcbiAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnlLXop4YnOlxcXFxuICAgICAgICBzZWFzb25UeXBlID0gNTtcXFxcbiAgICAgICAgaWYgKGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXFxcbiAgICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcXFxcbiAgICAgICAgICAgICAgICBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS90di9pbmRleCcpO1xcXFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqCA9IHBkZmEoaHRtbCwgJy5maWx0ZXItbGlzdCYmLmZpbHRlci1ibG9jaycpO1xcXFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqC5mb3JFYWNoKHVsID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAg562b6YCJ5p2h5Lu2ID0gcGRmaCh1bCwgJy5maWx0ZXItbmFtZSYmVGV4dCcpO1xcXFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaggPSBwZGZhKHVsLCAndWwmJmxpJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqC5mb3JFYWNoKGxpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZGZoKGxpLCAnbGkmJlRleHQnKSA9PSAn5YW25LuWJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKOetm+mAieadoeS7tiwgJ+WFqOmDqCcpID09IHBkZmgobGksICdsaSYmVGV4dCcpID8gJ+KAnOKAnOKAneKAnTxiPjxmb250IGNvbG9yPSMxYWFkMTk+JyArIHBkZmgobGksICdsaSYmVGV4dCcpICsgJzwvZm9udD48L2I+JyA6IHBkZmgobGksICdsaSYmVGV4dCcpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobGksIOetm+mAieadoeS7tikgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcijnrZvpgInmnaHku7YsIHBkZmgobGksICdsaSYmVGV4dCcpKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaSwg562b6YCJ5p2h5Lu2KSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn57qq5b2V54mHJzpcXFxcbiAgICAgICAgc2Vhc29uVHlwZSA9IDM7XFxcXG4gICAgICAgIGlmIChnZXRNeVZhcign5oqY5Y+gJywgJ+WFsycpID09ICflvIAnKSB7XFxcXG4gICAgICAgICAgICBpZiAocGFnZSA9PSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGZldGNoKCdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vZG9jdW1lbnRhcnkvaW5kZXgvJyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoLmZvckVhY2godWwgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXFxcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoLmZvckVhY2gobGkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChsaSwg562b6YCJ5p2h5Lu2KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXFxcbiAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnu7zoibonOlxcXFxuICAgICAgICBzZWFzb25UeXBlID0gNztcXFxcbiAgICAgICAgaWYgKGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXFxcbiAgICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcXFxcbiAgICAgICAgICAgICAgICBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS92YXJpZXR5L2luZGV4Jyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoLmZvckVhY2godWwgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXFxcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoLmZvckVhY2gobGkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChsaSwg562b6YCJ5p2h5Lu2KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXFxcbiAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnlarliacnOlxcXFxuICAgICAgICBzZWFzb25UeXBlID0gMTtcXFxcbiAgICAgICAgaWYgKGdldE15VmFyKCfmipjlj6AnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXFxcbiAgICAgICAgICAgIGlmIChwYWdlID09IDEpIHtcXFxcbiAgICAgICAgICAgICAgICBodG1sID0gZmV0Y2goJ2h0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9hbmltZS9pbmRleCcpO1xcXFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqCA9IHBkZmEoaHRtbCwgJy5maWx0ZXItbGlzdCYmLmZpbHRlci1ibG9jaycpO1xcXFxuICAgICAgICAgICAgICAgIOWIhuexu+WIl+ihqC5mb3JFYWNoKHVsID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAg562b6YCJ5p2h5Lu2ID0gcGRmaCh1bCwgJy5maWx0ZXItbmFtZSYmVGV4dCcpO1xcXFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaggPSBwZGZhKHVsLCAndWwmJmxpJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqC5mb3JFYWNoKGxpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZGZoKGxpLCAnbGkmJlRleHQnKSA9PSAn5YW25LuWJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKOetm+mAieadoeS7tiwgJ+WFqOmDqCcpID09IHBkZmgobGksICdsaSYmVGV4dCcpID8gJ+KAnOKAnOKAneKAnTxiPjxmb250IGNvbG9yPSMxYWFkMTk+JyArIHBkZmgobGksICdsaSYmVGV4dCcpICsgJzwvZm9udD48L2I+JyA6IHBkZmgobGksICdsaSYmVGV4dCcpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgobGksIOetm+mAieadoeS7tikgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcijnrZvpgInmnaHku7YsIHBkZmgobGksICdsaSYmVGV4dCcpKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBsaSwg562b6YCJ5p2h5Lu2KSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYmxhbmtfYmxvY2snXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn55S15b2xJzpcXFxcbiAgICAgICAgc2Vhc29uVHlwZSA9IDI7XFxcXG4gICAgICAgIGlmIChnZXRNeVZhcign5oqY5Y+gJywgJ+WFsycpID09ICflvIAnKSB7XFxcXG4gICAgICAgICAgICBpZiAocGFnZSA9PSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgaHRtbCA9IGZldGNoKCdodHRwczovL3d3dy5iaWxpYmlsaS5jb20vbW92aWUvaW5kZXgnKTtcXFxcbiAgICAgICAgICAgICAgICDliIbnsbvliJfooaggPSBwZGZhKGh0bWwsICcuZmlsdGVyLWxpc3QmJi5maWx0ZXItYmxvY2snKTtcXFxcbiAgICAgICAgICAgICAgICDliIbnsbvliJfooaguZm9yRWFjaCh1bCA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIOetm+mAieadoeS7tiA9IHBkZmgodWwsICcuZmlsdGVyLW5hbWUmJlRleHQnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoID0gcGRmYSh1bCwgJ3VsJiZsaScpO1xcXFxuICAgICAgICAgICAgICAgICAgICDlrZDliIbnsbvliJfooaguZm9yRWFjaChsaSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGRmaChsaSwgJ2xpJiZUZXh0JykgPT0gJ+WFtuS7licpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRNeVZhcijnrZvpgInmnaHku7YsICflhajpg6gnKSA9PSBwZGZoKGxpLCAnbGkmJlRleHQnKSA/ICfigJzigJzigJ3igJ08Yj48Zm9udCBjb2xvcj0jMWFhZDE5PicgKyBwZGZoKGxpLCAnbGkmJlRleHQnKSArICc8L2ZvbnQ+PC9iPicgOiBwZGZoKGxpLCAnbGkmJlRleHQnKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGxpLCDnrZvpgInmnaHku7YpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIo562b6YCJ5p2h5Lu2LCBwZGZoKGxpLCAnbGkmJlRleHQnKSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgbGksIOetm+mAieadoeS7tiksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcXFxuICAgICAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgIHNlYXNvblR5cGUgPSA0O1xcXFxuICAgICAgICBpZiAoZ2V0TXlWYXIoJ+aKmOWPoCcsICflhbMnKSA9PSAn5byAJykge1xcXFxuICAgICAgICAgICAgaWYgKHBhZ2UgPT0gMSkge1xcXFxuICAgICAgICAgICAgICAgIGh0bWwgPSBmZXRjaCgnaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL2FuaW1lL2luZGV4Jyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoID0gcGRmYShodG1sLCAnLmZpbHRlci1saXN0JiYuZmlsdGVyLWJsb2NrJyk7XFxcXG4gICAgICAgICAgICAgICAg5YiG57G75YiX6KGoLmZvckVhY2godWwgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICDnrZvpgInmnaHku7YgPSBwZGZoKHVsLCAnLmZpbHRlci1uYW1lJiZUZXh0Jyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIOWtkOWIhuexu+WIl+ihqCA9IHBkZmEodWwsICd1bCYmbGknKTtcXFxcbiAgICAgICAgICAgICAgICAgICAg5a2Q5YiG57G75YiX6KGoLmZvckVhY2gobGkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBkZmgobGksICdsaSYmVGV4dCcpID09ICflhbbku5YnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogZ2V0TXlWYXIo562b6YCJ5p2h5Lu2LCAn5YWo6YOoJykgPT0gcGRmaChsaSwgJ2xpJiZUZXh0JykgPyAn4oCc4oCc4oCd4oCdPGI+PGZvbnQgY29sb3I9IzFhYWQxOT4nICsgcGRmaChsaSwgJ2xpJiZUZXh0JykgKyAnPC9mb250PjwvYj4nIDogcGRmaChsaSwgJ2xpJiZUZXh0JyksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKChsaSwg562b6YCJ5p2h5Lu2KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKOetm+mAieadoeS7tiwgcGRmaChsaSwgJ2xpJiZUZXh0JykpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGxpLCDnrZvpgInmnaHku7YpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbidcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdibGFua19ibG9jaydcXFxcbiAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbi8vIOWtkOWIhuexu+WPguaVsOaYoOWwhFxcXFxuc3dpdGNoIChnZXRNeVZhcign57G75Z6LJywgJ+WFqOmDqCcpKSB7XFxcXG4gICAgY2FzZSAn5q2j54mHJzpcXFxcbiAgICAgICAgc2Vhc29uX3ZlcnNpb24gPSAxO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnlLXlvbEnOlxcXFxuICAgICAgICBzZWFzb25fdmVyc2lvbiA9IDI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WFtuS7lic6XFxcXG4gICAgICAgIHNlYXNvbl92ZXJzaW9uID0gMztcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgZGVmYXVsdDpcXFxcbiAgICAgICAgc2Vhc29uX3ZlcnNpb24gPSAtMTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG59XFxcXG5zd2l0Y2ggKGdldE15VmFyKCfphY3pn7MnLCAn5YWo6YOoJykpIHtcXFxcbiAgICBjYXNlICfljp/lo7AnOlxcXFxuICAgICAgICBzcG9rZW5fbGFuZ3VhZ2VfdHlwZSA9IDE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+S4reaWh+mFjemfsyc6XFxcXG4gICAgICAgIHNwb2tlbl9sYW5ndWFnZV90eXBlID0gMjtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgZGVmYXVsdDpcXFxcbiAgICAgICAgc3Bva2VuX2xhbmd1YWdlX3R5cGUgPSAtMTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG59XFxcXG5zd2l0Y2ggKGdldE15VmFyKCflnLDljLonLCAn5YWo6YOoJykpIHtcXFxcbiAgICBjYXNlICfkuK3lm73lpKfpmYYnOlxcXFxuICAgICAgICBhcmVhID0gMTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5pel5pysJzpcXFxcbiAgICAgICAgYXJlYSA9IDI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+e+juWbvSc6XFxcXG4gICAgICAgIGFyZWEgPSAzO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfoi7Hlm70nOlxcXFxuICAgICAgICBhcmVhID0gNDtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5Lit5Zu95riv5Y+wJzpcXFxcbiAgICAgICAgYXJlYSA9IFs2LCA3XTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn6Z+p5Zu9JzpcXFxcbiAgICAgICAgYXJlYSA9IDg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+azleWbvSc6XFxcXG4gICAgICAgIGFyZWEgPSA5O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfms7Dlm70nOlxcXFxuICAgICAgICBhcmVhID0gMTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+ilv+ePreeJmSc6XFxcXG4gICAgICAgIGFyZWEgPSAxMztcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5b635Zu9JzpcXFxcbiAgICAgICAgYXJlYSA9IDE1O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmhI/lpKfliKknOlxcXFxuICAgICAgICBhcmVhID0gMzU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WFtuS7lic6XFxcXG4gICAgICAgIC8vIOWPquaYr+eVquWJp+eahOaDheWGtV/lhbE1Ne+8jOimgeWHj+WOu+WHuueOsOeahOKAlOKAlOeul+S6hu+8jOebtOaOpeWcqOWKqOaAgeWIhuexu+eahOaXtuWAmeWOu+aOieS6hlxcXFxuICAgICAgICBhcmVhID0gWzEsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTUsIDE2LCAxNywgMTgsIDE5LCAyMCwgMjEsIDIyLCAyMywgMjQsIDI1LCAyNiwgMjcsIDI4LCAyOSwgMzAsIDMxLCAzMiwgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NywgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1XTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgZGVmYXVsdDpcXFxcbiAgICAgICAgYXJlYSA9IC0xO1xcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+eKtuaAgScsICflhajpg6gnKSkge1xcXFxuICAgIGNhc2UgJ+WujOe7kyc6XFxcXG4gICAgICAgIGlzX2ZpbmlzaCA9IDE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+i/nui9vSc6XFxcXG4gICAgICAgIGlzX2ZpbmlzaCA9IDA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgIGlzX2ZpbmlzaCA9IC0xO1xcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+WHuuWTgScsICflhajpg6gnKSkge1xcXFxuICAgIGNhc2UgJ+Wkruinhic6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gNDtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAnQkJDJzpcXFxcbiAgICAgICAgcHJvZHVjZXJfaWQgPSAxO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmjqLntKLpopHpgZMnOlxcXFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WbveWutuWcsOeQhic6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMTQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ05ISyc6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMjtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5Y6G5Y+y6aKR6YGTJzpcXFxcbiAgICAgICAgcHJvZHVjZXJfaWQgPSA2O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfljavop4YnOlxcXFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+iHquWItic6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gOTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAnSVRWJzpcXFxcbiAgICAgICAgcHJvZHVjZXJfaWQgPSA1O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICdTS1knOlxcXFxuICAgICAgICBwcm9kdWNlcl9pZCA9IDM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ1pERic6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WQiOS9nOacuuaehCc6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMTE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WbveWGheWFtuS7lic6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMTI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WbveWkluWFtuWugyc6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gMTM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgIHByb2R1Y2VyX2lkID0gLTE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxufVxcXFxuc3dpdGNoIChnZXRNeVZhcign54mI5p2DJywgJ+WFqOmDqCcpKSB7XFxcXG4gICAgY2FzZSAn54us5a62JzpcXFxcbiAgICAgICAgY29weXJpZ2h0ID0gMztcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5YW25LuWJzpcXFxcbiAgICAgICAgY29weXJpZ2h0ID0gWzEsIDIsIDRdO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBkZWZhdWx0OlxcXFxuICAgICAgICBjb3B5cmlnaHQgPSAtMTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG59XFxcXG5zd2l0Y2ggKGdldE15VmFyKCfku5jotLknLCAn5YWo6YOoJykpIHtcXFxcbiAgICBjYXNlICflhY3otLknOlxcXFxuICAgICAgICBzZWFzb25fc3RhdHVzID0gMTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5LuY6LS5JzpcXFxcbiAgICAgICAgc2Vhc29uX3N0YXR1cyA9IFsyLCA2XTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAn5aSn5Lya5ZGYJzpcXFxcbiAgICAgICAgc2Vhc29uX3N0YXR1cyA9IFs0LCA2XTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgZGVmYXVsdDpcXFxcbiAgICAgICAgc2Vhc29uX3N0YXR1cyA9IC0xO1xcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbnN3aXRjaCAoZ2V0TXlWYXIoJ+Wto+W6picsICflhajpg6gnKSkge1xcXFxuICAgIGNhc2UgJzHmnIgnOlxcXFxuICAgICAgICBzZWFzb25fbW9udGggPSAxO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICc05pyIJzpcXFxcbiAgICAgICAgc2Vhc29uX21vbnRoID0gNDtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSAnN+aciCc6XFxcXG4gICAgICAgIHNlYXNvbl9tb250aCA9IDc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJzEw5pyIJzpcXFxcbiAgICAgICAgc2Vhc29uX21vbnRoID0gMTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgIHNlYXNvbl9tb250aCA9IC0xO1xcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbi8vIOWIpOaWreWSjOaYoOWwhOW5tOS7vVxcXFxuc3dpdGNoIChnZXRNeVZhcign5aSn57G7JywgJ+WbveWImycpKSB7XFxcXG4gICAgY2FzZSAn5Zu95YibJzpcXFxcbiAgICBjYXNlICfnlarliacnOlxcXFxuICAgICAgICAvLyDnlarliaflkozlm73liJvjgJDkuZ/mmK/lj6vlgZrlubTku73kvYblj4LmlbDlkI3jgIHmoLzlvI/lkozlhbbku5bliIbnsbvkuI3kuIDmoLfjgJFcXFxcbiAgICAgICAgYW5pbWVfeWVhciA9IGdldE15VmFyKCflubTku70nLCAn5YWo6YOoJyk7XFxcXG4gICAgICAgIHN3aXRjaCAoYW5pbWVfeWVhci5pbmNsdWRlcygnLScpKSB7XFxcXG4gICAgICAgICAgICBjYXNlIHRydWU6XFxcXG4gICAgICAgICAgICAgICAgZWFybHkgPSBhbmltZV95ZWFyLnNwbGl0KCctJylbMV07XFxcXG4gICAgICAgICAgICAgICAgbGF0ZXIgPSBhbmltZV95ZWFyLnNwbGl0KCctJylbMF07XFxcXG4gICAgICAgICAgICAgICAgeWVhciA9IGBbJHtlYXJseX0sJHtOdW1iZXIobGF0ZXIpICsgMX0pYDtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIGNhc2UgZmFsc2U6XFxcXG4gICAgICAgICAgICAgICAgc3dpdGNoIChhbmltZV95ZWFyKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzkw5bm05LujJzpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSAnWzE5OTAsMjAwMCknO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzgw5bm05LujJzpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSAnWzE5ODAsMTk5MCknO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+abtOaXqSc6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gJ1ssMTk4MCknO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+WFqOmDqCc6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB5ZWFyID0gLTE7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHllYXIgPSBgWyR7YW5pbWVfeWVhcn0sJHtOdW1iZXIoYW5pbWVfeWVhcikgKyAxfSlgO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgZGVmYXVsdDpcXFxcbiAgICAgICAgLy8g6Zmk5LqG55Wq5Ymn5ZKM5Zu95Yib55qE5YW25LuW5YiG57G7XFxcXG4gICAgICAgIHR2X3llYXIgPSBnZXRNeVZhcign5bm05Lu9JywgJ+WFqOmDqCcpO1xcXFxuICAgICAgICBzd2l0Y2ggKHR2X3llYXIuaW5jbHVkZXMoJy0nKSkge1xcXFxuICAgICAgICAgICAgY2FzZSB0cnVlOlxcXFxuICAgICAgICAgICAgICAgIGVhcmx5ID0gdHZfeWVhci5zcGxpdCgnLScpWzFdO1xcXFxuICAgICAgICAgICAgICAgIGxhdGVyID0gdHZfeWVhci5zcGxpdCgnLScpWzBdO1xcXFxuICAgICAgICAgICAgICAgIHJlbGVhc2VfZGF0ZSA9IGBbJHtlYXJseX0tMDEtMDEgMDA6MDA6MDAsJHtOdW1iZXIobGF0ZXIpICsgMX0tMDEtMDEgMDA6MDA6MDApYFxcXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgY2FzZSBmYWxzZTpcXFxcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHR2X3llYXIpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnOTDlubTku6MnOlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZV9kYXRlID0gJ1sxOTkwLTAxLTAxIDAwOjAwOjAwLDIwMDAtMDEtMDEgMDA6MDA6MDApJ1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJzgw5bm05LujJzpcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2VfZGF0ZSA9ICdbMTk4MC0wMS0wMSAwMDowMDowMCwxOTkwLTAxLTAxIDAwOjAwOjAwKSdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgICAgICAgICBjYXNlICfmm7Tml6knOlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZV9kYXRlID0gJ1ssMTk4MC0wMS0wMSAwMDowMDowMCknO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ+WFqOmDqCc6XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWxlYXNlX2RhdGUgPSAtMTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZV9kYXRlID0gYFske3R2X3llYXJ9LTAxLTAxIDAwOjAwOjAwLCR7TnVtYmVyKHR2X3llYXIpICsgMX0tMDEtMDEgMDA6MDA6MDApYDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxufVxcXFxuc3dpdGNoIChnZXRNeVZhcign6aOO5qC8JywgJ+WFqOmDqCcpKSB7XFxcXG4gICAgY2FzZSAn55S15b2xJzpcXFxcbiAgICAgICAgc3R5bGVfaWQgPSAtMTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIC8vIOeVquWJp+agj+ebrlxcXFxuICAgIGNhc2UgJ+WOn+WImyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+a8q+eUu+aUuSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+Wwj+ivtOaUuSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+a4uOaIj+aUuSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+eJueaRhCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+W4g+iii+aIjyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+eDreihgCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTY7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+epv+i2iic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+Wlh+W5uyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwMTg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIC8vIOWSi+i3s+S6huS4gOS4quaNj35cXFxcbiAgICBjYXNlICfmiJjmlpcnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDIwO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmkJ7nrJEnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDIxO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfml6XluLgnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDIyO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnp5HlubsnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDIzO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfokIzns7snOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDI0O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmsrvmhIgnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDI1O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmoKHlm60nOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDI2O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflsJHlhL8nOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDI3O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfms6HpnaInOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDI4O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmgYvniLEnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDI5O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflsJHlpbMnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDMwO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfprZTms5UnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDMxO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflhpLpmaknOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDMyO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfljoblj7InOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDMzO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmnrbnqbonOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDM0O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmnLrmiJgnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDM1O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnpZ7prZQnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDM2O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflo7DmjqcnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDM3O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfov5DliqgnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDM4O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflirHlv5cnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDM5O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfpn7PkuZAnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQwO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmjqjnkIYnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQxO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnpL7lm6InOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQyO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfmmbrmlpcnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQzO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflgqzms6onOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQ0O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfnvo7po58nOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQ1O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICflgbblg48nOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQ2O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfkuZnlpbMnOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQ3O1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlICfogYzlnLonOlxcXFxuICAgICAgICBzdHlsZV9pZCA9IDEwMDQ4O1xcXFxuICAgICAgICBicmVhaztcXFxcblxcXFxuICAgIC8vIOe7vOiJuuagj+ebruOAgeeUteW9sVxcXFxuICAgIGNhc2UgJ+WJp+aDhSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WWnOWJpyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+eIseaDhSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WKqOS9nCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aBkOaAlic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+eKr+e9qic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aDiuaCmic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTY7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aCrOeWkSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aImOS6iSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WKqOeUuyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNTk7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+S8oOiusCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WutuW6rSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+atjOiInic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+e6quWunic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+eBvumavic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+S6uuaWhyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+enkeaKgCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjY7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+Wuh+WumSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+iQjOWuoCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNjk7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+ekvuS8mic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WKqOeJqSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+iHqueEtic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WMu+eWlyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WGm+S6iyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+e9quahiCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+elnuenmCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzY7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aXheihjCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+atpuS+oCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+mdkuaYpSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwNzk7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+mDveW4gic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WPpOijhSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+iwjeaImCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+e7j+WFuCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODM7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aDheaEnyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+elnuivnSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+W5tOS7oyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODY7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WGnOadkSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WIkeS+pic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WGm+aXhSc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwODk7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+iuv+iwiCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+iEseWPo+engCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+ecn+S6uuengCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTI7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+mAieengCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aXhea4uCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTU7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aZmuS8mic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTg7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+a8lOWUseS8mic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTY7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+S6suWtkCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+WFu+aIkCc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAwOTk7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgJ+aWh+WMlic6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAxMDA7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIC8vIOeUteW9seagj+ebrlxcXFxuICAgIGNhc2UgJ+efreeJhyc6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gMTAxMDQ7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGRlZmF1bHQ6XFxcXG4gICAgICAgIHN0eWxlX2lkID0gLTE7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxufVxcXFxuLy8g5pig5bCE55yf5a6e6K+35rGC5Zyw5Z2AXFxcXG5zd2l0Y2ggKHNlYXNvblR5cGUpIHtcXFxcbiAgICBjYXNlIDQ6XFxcXG4gICAgICAgIC8vIOWbveWIm1xcXFxuICAgICAgICB0cnVlX3VybCA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3NlYXNvbi9pbmRleC9yZXN1bHQ/c2Vhc29uX3ZlcnNpb249JyArIHNlYXNvbl92ZXJzaW9uICsgJyZpc19maW5pc2g9JyArIGlzX2ZpbmlzaCArICcmY29weXJpZ2h0PScgKyBjb3B5cmlnaHQgKyAnJnNlYXNvbl9zdGF0dXM9JyArIHNlYXNvbl9zdGF0dXMgKyAnJnllYXI9JyArIHllYXIgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmb3JkZXI9MyZzdD00JnNvcnQ9MCZwYWdlPScgKyBwYWdlICsgJyZzZWFzb25fdHlwZT00JnBhZ2VzaXplPTMwJnR5cGU9MSdcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSA1OlxcXFxuICAgICAgICAvLyDnlLXop4bliadcXFxcbiAgICAgICAgdHJ1ZV91cmwgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy9zZWFzb24vaW5kZXgvcmVzdWx0P2FyZWE9JyArIGFyZWEgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmcmVsZWFzZV9kYXRlPScgKyByZWxlYXNlX2RhdGUgKyAnJnNlYXNvbl9zdGF0dXM9JyArIHNlYXNvbl9zdGF0dXMgKyAnJm9yZGVyPTImc3Q9NSZzb3J0PTAmcGFnZT0nICsgcGFnZSArICcmc2Vhc29uX3R5cGU9NSZwYWdlc2l6ZT0zMCZ0eXBlPTEnXFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgNzpcXFxcbiAgICAgICAgLy8g57u86Im6XFxcXG4gICAgICAgIHRydWVfdXJsID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvc2Vhc29uL2luZGV4L3Jlc3VsdD9zZWFzb25fc3RhdHVzPScgKyBzZWFzb25fc3RhdHVzICsgJyZzdHlsZV9pZD0nICsgc3R5bGVfaWQgKyAnJm9yZGVyPTImc3Q9NyZzb3J0PTAmcGFnZT0nICsgcGFnZSArICcmc2Vhc29uX3R5cGU9NyZwYWdlc2l6ZT0zMCZ0eXBlPTEnO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIDE6XFxcXG4gICAgICAgIC8vIOeVquWJp1xcXFxuICAgICAgICB0cnVlX3VybCA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3NlYXNvbi9pbmRleC9yZXN1bHQ/c2Vhc29uX3ZlcnNpb249JyArIHNlYXNvbl92ZXJzaW9uICsgJyZzcG9rZW5fbGFuZ3VhZ2VfdHlwZT0nICsgc3Bva2VuX2xhbmd1YWdlX3R5cGUgKyAnJmFyZWE9JyArIGFyZWEgKyAnJmlzX2ZpbmlzaD0nICsgaXNfZmluaXNoICsgJyZjb3B5cmlnaHQ9JyArIGNvcHlyaWdodCArICcmc2Vhc29uX3N0YXR1cz0nICsgc2Vhc29uX3N0YXR1cyArICcmc2Vhc29uX21vbnRoPScgKyBzZWFzb25fbW9udGggKyAnJnllYXI9JyArIHllYXIgKyAnJnN0eWxlX2lkPScgKyBzdHlsZV9pZCArICcmb3JkZXI9MyZzdD0xJnNvcnQ9MCZwYWdlPScgKyBwYWdlICsgJyZzZWFzb25fdHlwZT0xJnBhZ2VzaXplPTMwJnR5cGU9MSc7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgMzpcXFxcbiAgICAgICAgLy8g57qq5b2V54mHXFxcXG4gICAgICAgIHRydWVfdXJsID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvc2Vhc29uL2luZGV4L3Jlc3VsdD9zdHlsZV9pZD0nICsgc3R5bGVfaWQgKyAnJnByb2R1Y2VyX2lkPScgKyBwcm9kdWNlcl9pZCArICcmcmVsZWFzZV9kYXRlPScgKyByZWxlYXNlX2RhdGUgKyAnJnNlYXNvbl9zdGF0dXM9JyArIHNlYXNvbl9zdGF0dXMgKyAnJm9yZGVyPTImc3Q9MyZzb3J0PTAmcGFnZT0nICsgcGFnZSArICcmc2Vhc29uX3R5cGU9MyZwYWdlc2l6ZT0zMCZ0eXBlPTEnXFxcXG4gICAgICAgIGJyZWFrO1xcXFxuICAgIGNhc2UgMjpcXFxcbiAgICAgICAgLy8g55S15b2xXFxcXG4gICAgICAgIHRydWVfdXJsID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvc2Vhc29uL2luZGV4L3Jlc3VsdD9hcmVhPScgKyBhcmVhICsgJyZzdHlsZV9pZD0nICsgc3R5bGVfaWQgKyAnJnJlbGVhc2VfZGF0ZT0nICsgcmVsZWFzZV9kYXRlICsgJyZzZWFzb25fc3RhdHVzPScgKyBzZWFzb25fc3RhdHVzICsgJyZvcmRlcj0yJnN0PTImc29ydD0wJnBhZ2U9JyArIHBhZ2UgKyAnJnNlYXNvbl90eXBlPTImcGFnZXNpemU9MzAmdHlwZT0xJ1xcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbnRydWVfdXJsID0gZW5jb2RlVVJJKHRydWVfdXJsKTtcXFxcbmxpc3QgPSBKU09OLnBhcnNlKGZldGNoKHRydWVfdXJsKSkuZGF0YS5saXN0O1xcXFxudHJ5IHtcXFxcbiAgICBsaXN0LmZvckVhY2gobW92aWUgPT4ge1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG1vdmllLnRpdGxlLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9maWxtZXJqaSNpbW1lcnNpdmVUaGVtZSNcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGltZzogbW92aWUuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogbW92aWUub3JkZXIsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzMnLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBzZWFzb25faWQ6IG1vdmllLnNlYXNvbl9pZFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9KTtcXFxcbn0gY2F0Y2ggKGUpIHtcXFxcbiAgICBsb2coJ+W3sue7j+aKtei+vumhteW6lScgKyBNWV9QQUdFKTtcXFxcbn1cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIueDreaYoOaXtumXtOihqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJVcGRhdGVUYWJsZXNcXFwiLFxcXCJydWxlXFxcIjpcXFwiZnVuY3Rpb24gY29sb3IodGV4dCwgY29sb3IpIHtcXFxcblxcXFxuwqAgwqAgdGV4dCArPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuXFxcXG7CoCDCoCBpZiAodGV4dC5pbmRleE9mKFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIpID09PSAwKSB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIHRleHQucmVwbGFjZShcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcblxcXFxuwqAgwqAgfVxcXFxuXFxcXG7CoCDCoCByZXR1cm4gXFxcXFxcXCLigJzigJzigJ3igJ08Zm9udCBjb2xvcj0nXFxcXFxcXCIgKyBjb2xvciArIFxcXFxcXFwiJz5cXFxcXFxcIiArIHRleHQgKyBcXFxcXFxcIjwvZm9udD5cXFxcXFxcIjtcXFxcblxcXFxufVxcXFxuXFxcXG52YXIgdGFicyA9IHtcXFxcblxcXFxuwqAgwqAgXFxcXFxcXCLnlarliadcXFxcXFxcIjogMSxcXFxcblxcXFxuwqAgwqAgXFxcXFxcXCLnuqrlvZXniYdcXFxcXFxcIjogMyxcXFxcblxcXFxuwqAgwqAgXFxcXFxcXCLlm73liJtcXFxcXFxcIjogNFxcXFxuXFxcXG59XFxcXG5cXFxcbmlmIChNWV9QQUdFID09IDEpIHtcXFxcblxcXFxuwqAgwqAgT2JqZWN0LmtleXModGFicykuZm9yRWFjaChpdGVtID0+IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IChnZXRNeVZhcihcXFxcXFxcImp1amlcXFxcXFxcIiwgXFxcXFxcXCLlm73liJtcXFxcXFxcIikgPT0gaXRlbSA/IGNvbG9yKGl0ZW0sIFxcXFxcXFwicmVkXFxcXFxcXCIpIDogaXRlbSksXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogJCgpLmxhenlSdWxlKChhKSA9PiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHB1dE15VmFyKFxcXFxcXFwianVqaVxcXFxcXFwiLCBhKVxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCByZWZyZXNoUGFnZSgpXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5YiH5o2i5oiQ5YqfXFxcXFxcXCJcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgfSwgaXRlbSksXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxuXFxcXG7CoCDCoCDCoCDCoCB9KVxcXFxuXFxcXG7CoCDCoCB9KVxcXFxuXFxcXG7CoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcblxcXFxuwqAgwqAgfSlcXFxcblxcXFxuwqAgwqAgbGV0IGRheXMgPSA3XFxcXG5cXFxcbsKgIMKgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF5czsgaSsrKSB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiAoZ2V0TXlWYXIoXFxcXFxcXCJmcm9tXFxcXFxcXCIsIFxcXFxcXFwiMVxcXFxcXFwiKSA9PSBpICsgXFxcXFxcXCJcXFxcXFxcIiA/IGNvbG9yKGkgKyBcXFxcXFxcIuWkqeWJjVxcXFxcXFwiLCBcXFxcXFxcInJlZFxcXFxcXFwiKSA6IGkgKyBcXFxcXFxcIuWkqeWJjVxcXFxcXFwiKSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiAkKCkubGF6eVJ1bGUoKGkpID0+IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgcHV0TXlWYXIoXFxcXFxcXCJmcm9tXFxcXFxcXCIsIGkgKyBcXFxcXFxcIlxcXFxcXFwiKVxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCByZWZyZXNoUGFnZSgpXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB9LCBpKSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG5cXFxcbsKgIMKgIMKgIMKgIH0pXFxcXG5cXFxcbsKgIMKgIH1cXFxcblxcXFxuwqAgwqAgZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG5cXFxcbsKgIMKgIH0pXFxcXG5cXFxcbsKgIMKgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF5czsgaSsrKSB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiAoZ2V0TXlWYXIoXFxcXFxcXCJ0b1xcXFxcXFwiLCBcXFxcXFxcIjFcXFxcXFxcIikgPT0gaSArIFxcXFxcXFwiXFxcXFxcXCIgPyBjb2xvcihpICsgXFxcXFxcXCLlpKnlkI5cXFxcXFxcIiwgXFxcXFxcXCJyZWRcXFxcXFxcIikgOiBpICsgXFxcXFxcXCLlpKnlkI5cXFxcXFxcIiksXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogJCgpLmxhenlSdWxlKChpKSA9PiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHB1dE15VmFyKFxcXFxcXFwidG9cXFxcXFxcIiwgaSArIFxcXFxcXFwiXFxcXFxcXCIpXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKClcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIH0sIGkpLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcblxcXFxuwqAgwqAgwqAgwqAgfSlcXFxcblxcXFxuwqAgwqAgfVxcXFxuXFxcXG5cXFxcbsKgIMKgICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0TW92aWVzKHRhYnNbZ2V0TXlWYXIoXFxcXFxcXCJqdWppXFxcXFxcXCIsIFxcXFxcXFwi5Zu95YibXFxcXFxcXCIpXSwgZ2V0TXlWYXIoXFxcXFxcXCJmcm9tXFxcXFxcXCIsIFxcXFxcXFwiMVxcXFxcXFwiKSwgZ2V0TXlWYXIoXFxcXFxcXCJ0b1xcXFxcXFwiLCBcXFxcXFxcIjFcXFxcXFxcIikpLmZvckVhY2goaXRlbSA9PiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBpdGVtLmRhdGUgKyBcXFxcXFxcIiDlkahcXFxcXFxcIiArIGl0ZW0uZGF5X29mX3dlZWssXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG5cXFxcbsKgIMKgIMKgIMKgIH0pXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGl0ZW0uZXBpc29kZXMuZm9yRWFjaChpID0+IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGkudGl0bGUsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGltZzogaS5jb3ZlcisnQFJlZmVyZXI9JyxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZGVzYzppLnB1Yl9pbmRleC5tYXRjaCgv5Y2z5bCGLyk/J+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXFxcXFwicmVkXFxcXFxcXCI+JytpLnB1Yl9pbmRleCsnXFxcXFxcXFxuJytpLnB1Yl90aW1lKyc8L2ZvbnQ+JzogaS5wdWJfaW5kZXgrICdcXFxcXFxcXG4nICsgaS5wdWJfdGltZSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9maWxtZXJqaSNpbW1lcnNpdmVUaGVtZSNcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZXh0cmE6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgXFxcXFxcXCJzZWFzb25faWRcXFxcXFxcIjogaS5zZWFzb25faWRcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgfVxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB9KVxcXFxuXFxcXG7CoCDCoCDCoCDCoCB9KVxcXFxuXFxcXG7CoCDCoCB9KVxcXFxuXFxcXG59XFxcXG5cXFxcblxcXFxuXFxcXG5cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLnmbvlvZVcXFwiLFxcXCJwYXRoXFxcIjpcXFwibG9naW5cXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG52YXIgZCA9IFtdO1xcXFxuc2V0UGFnZVRpdGxlKCfotKblj7fnmbvlvZXpobXpnaInKVxcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJ2Nvb2tpZeeZu+W9lScsXFxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCgpID0+IHtcXFxcbiAgICAgICAgcmV0dXJuICQoJycsICfor7fovpPlhaXkvaDnmoRjb29raWUnKS5pbnB1dCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT0gXFxcXFxcXCJcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9jb29raWXkuI3og73kuLrnqbpcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGxldCB1c2VyaW5mbyA9IEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL25hdlxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBpbnB1dFxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pKS5kYXRhO1xcXFxuICAgICAgICAgICAgaWYgKHVzZXJpbmZvLmlzTG9naW4gPT09IGZhbHNlKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S9oOeahGNvb2tpZeiyjOS8vOWkseaViOS6huWWlH5cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIHVzZXJJbmZvID0ge1xcXFxuICAgICAgICAgICAgICAgIGNvb2tpZTogaW5wdXQsXFxcXG4gICAgICAgICAgICAgICAgdXNlck5hbWU6IHVzZXJpbmZvLnVuYW1lLFxcXFxuICAgICAgICAgICAgICAgIHVzZXJNaWQ6ICB1c2VyaW5mby5taWQsXFxcXG4gICAgICAgICAgICAgICAgdmlwU3RhdHVzOiB1c2VyaW5mby52aXBTdGF0dXMsXFxcXG4gICAgICAgICAgICAgICAgZmFjZTogdXNlcmluZm8uZmFjZSArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHNldHRpbmcgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKTtcXFxcbiAgICAgICAgICAgIHNldHRpbmcudXNlckxpc3QudW5zaGlmdCh1c2VySW5mbyk7XFxcXG4gICAgICAgICAgICAvLyDov4fmu6Tmjoljb29raWXkuLrnqbrnmoTlhYPntKBcXFxcbiAgICAgICAgICAgIHNldHRpbmcudXNlckxpc3QgPSBzZXR0aW5nLnVzZXJMaXN0LmZpbHRlcih1c2VyID0+IHVzZXIuY29va2llICE9PSAnJyk7XFxcXG4gICAgICAgICAgICBzYXZlRmlsZShcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoc2V0dGluZykpO1xcXFxuICAgICAgICAgICAgYmFjayh0cnVlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8vY29va2ll6K6+572u5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiAn55m76ZmG6K+05piOJyxcXFxcbiAgICBkZXNjOiBcXFxcXFxcIumhtemdouS4i+aWueeZu+mZhuaIkOWKn+WQju+8jOWGjeeCueWHu+ehruiupOeZu+W9leWNs+WPr1xcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJ1xcXFxufSwge1xcXFxuICAgIHRpdGxlOiAn55m76ZmG5oiQ5Yqf5ZCO77yM5YaN54K55oiR77yBJyxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAvLyDov5nph4zotJ/otKPlhplDb29raWXvvIzlhYjor7vvvIzlho3ov73liqBcXFxcbiAgICAgICAgY29va2llID0gZ2V0VmFyKCdiaWxpQ29va2llJywnJyk7XFxcXG4gICAgICAgIGxvZyhcXFxcXFxcIuiOt+WPluWIsOeahGNvb2tpZTpcXFxcXFxcIitjb29raWUpO1xcXFxuICAgICAgICBpZiAoY29va2llID09IFxcXFxcXFwiXFxcXFxcXCIpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6I635Y+WY29va2ll5aSx6LSl77yM5YaN562J562J55yL77yfXFxcXFxcXCI7XFxcXG4gICAgICAgIGxldCB1c2VyaW5mbyA9IEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL25hdlxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogY29va2llXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pKS5kYXRhO1xcXFxuICAgICAgICBpZiAodXNlcmluZm8uaXNMb2dpbiA9PT0gZmFsc2UpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5L2g5YWI55m75b2V77yM5YaN6I635Y+WY29va2ll77yMT0vvvJ9cXFxcXFxcIjtcXFxcbiAgICAgICAgdXNlckluZm8gPSB7XFxcXG4gICAgICAgICAgICBjb29raWU6IGNvb2tpZSxcXFxcbiAgICAgICAgICAgIHVzZXJOYW1lOiB1c2VyaW5mby51bmFtZSxcXFxcbiAgICAgICAgICAgIHVzZXJNaWQ6ICB1c2VyaW5mby5taWQsXFxcXG4gICAgICAgICAgICB2aXBTdGF0dXM6IHVzZXJpbmZvLnZpcFN0YXR1cyxcXFxcbiAgICAgICAgICAgIGZhY2U6IHVzZXJpbmZvLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiXFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgc2V0dGluZyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpO1xcXFxuICAgICAgICBzZXR0aW5nLnVzZXJMaXN0LnVuc2hpZnQodXNlckluZm8pO1xcXFxuICAgICAgICAvLyDov4fmu6Tmjoljb29raWXkuLrnqbrnmoTlhYPntKBcXFxcbiAgICAgICAgc2V0dGluZy51c2VyTGlzdCA9IHNldHRpbmcudXNlckxpc3QuZmlsdGVyKHVzZXIgPT4gdXNlci5jb29raWUgIT09ICcnKTtcXFxcbiAgICAgICAgc2F2ZUZpbGUoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KHNldHRpbmcpKTtcXFxcbiAgICAgICAgYmFjayh0cnVlKTtcXFxcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+WmguaenOayoeacieeZu+mZhuaIkOWKn++8jOW7uuiuruS9oOS4i+asoeeZu+mZhuaIkOWKn+WQjuS4jeimgeeCuemCo+S5iOW/q34nXFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0XzEnXFxcXG59LCB7XFxcXG4gICAgdXJsOiBcXFxcXFxcImh0dHBzOi8vbS5iaWxpYmlsaS5jb20vXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwieDVfd2Vidmlld19zaW5nbGVcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcImxpc3QmJnNjcmVlbi0zMDBcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgdG9rZW5fdGltZXIgPSBmdW5jdGlvbiAoKSB7XFxcXG4gICAgICAgICAgICAgICAgdmFyIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb29raWUgPSBmYmEuZ2V0Q29va2llKFxcXFxcXFwiaHR0cHM6Ly9tLmJpbGliaWxpLmNvbS9cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGZiYS5wdXRWYXIoJ2JpbGlDb29raWUnLCBjb29raWUpO1xcXFxuICAgICAgICAgICAgICAgIH0sIDEwMClcXFxcbiAgICAgICAgICAgIH07XFxcXG4gICAgICAgICAgICB0b2tlbl90aW1lcigpO1xcXFxuICAgICAgICB9KSxcXFxcbiAgICAgICAgY2FuQmFjazogdHJ1ZSxcXFxcbiAgICAgICAgdWE6IE1PQklMRV9VQVxcXFxuICAgIH1cXFxcbn0pXFxcXG5zZXRSZXN1bHQoZCk7XFxcXG5cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLlvbHop4bkuoznuqdcXFwiLFxcXCJwYXRoXFxcIjpcXFwiZmlsbWVyamlcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG4vLyDmlbDmja7lrprkvY1cXFxcbnZhciBkID0gW107XFxcXG5pZiAoTVlfUEFSQU1TLnNlYXNvbl9pZCkge1xcXFxuICAgIHNlYXNvbl9pZCA9IE1ZX1BBUkFNUy5zZWFzb25faWQgKyBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuICAgIERhdGEgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3ZpZXcvd2ViL3NlYXNvbj9zZWFzb25faWQ9JyArIHNlYXNvbl9pZCkpLnJlc3VsdDtcXFxcbn0gZWxzZSB7XFxcXG4gICAgRGF0YSA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS9wZ2Mvdmlldy93ZWIvc2Vhc29uP2VwX2lkPScgKyBNWV9QQVJBTVMuZXBfaWQpKS5yZXN1bHQ7XFxcXG59XFxcXG5pZiAoIURhdGEuY292ZXIubWF0Y2goL2h0dHBzLykpIHtcXFxcbiAgICDlsIHpnaIgPSBEYXRhLmNvdmVyLnJlcGxhY2UoJ2h0dHAnLCAnaHR0cHMnKSArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCI7XFxcXG59IGVsc2Uge1xcXFxuICAgIOWwgemdoiA9IERhdGEuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiO1xcXFxufVxcXFxudHJ5IHtcXFxcbiAgICDlnLDljLogPSBEYXRhLmFyZWFzWzBdLm5hbWU7XFxcXG59IGNhdGNoIChlKSB7XFxcXG4gICAg5Zyw5Yy6ID0gJ+WcsOWMuuaaguaXoCc7XFxcXG59XFxcXG7nroDku4sgPSBEYXRhLmV2YWx1YXRlO1xcXFxuLy8g5q2j54mHXFxcXG7nsbvlnosgPSBEYXRhLnBvc2l0aXZlLnRpdGxlO1xcXFxu5LiK5pig5pe26Ze0ID0gRGF0YS5wdWJsaXNoLnB1Yl90aW1lO1xcXFxudHJ5IHtcXFxcbiAgICDlvpfliIYgPSBEYXRhLnJhdGluZy5zY29yZTtcXFxcbn0gY2F0Y2ggKGUpIHtcXFxcbiAgICDlvpfliIYgPSAn5pqC5peg5b6XJztcXFxcbn1cXFxcbui/veWJp+aXpeWOhiA9IERhdGEubmV3X2VwLmRlc2M7XFxcXG7mm7TmlrDov5vluqYgPSBEYXRhLm5ld19lcC50aXRsZTtcXFxcbuW9seeJh+WQjeensCA9IERhdGEudGl0bGU7XFxcXG7nrKzkuozmoIfpopggPSBEYXRhLnNoYXJlX3N1Yl90aXRsZTtcXFxcbuWJp+mbhuWIl+ihqCA9IERhdGEuZXBpc29kZXMuZmlsdGVyKChsaXN0KSA9PiB7XFxcXG4gICAgLy8g6L+H5ruk6aKE5ZGK44CB6Iqx57WuXFxcXG4gICAgaWYgKGdldEl0ZW0oJ3ByZXZpZXdTd2l0Y2gnLCAnZm9sZCcpID09PSAnZm9sZCcgJiYgbGlzdC5iYWRnZS5tYXRjaCgv6aKEfOiKsee1ri8pKSB7XFxcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICB9XFxcXG59KTtcXFxcbuefreiuryA9IFxcXFxcXFwi4q2QXFxcXFxcXCIgKyDnsbvlnosgKyBcXFxcXFxcIuKtkFxcXFxcXFwiICsg56ys5LqM5qCH6aKYICsgJ1xcXFxcXFxcbicgKyDlnLDljLogKyAnLScgKyDlvpfliIYgKyAn5YiGXFxcXFxcXFxuLScgKyDkuIrmmKDml7bpl7QgKyAnLSc7XFxcXG4vLyDph43lrprkuYnkuoznuqfpobXpnaLmlbDmja5cXFxcbnNldFBhZ2VUaXRsZSjlvbHniYflkI3np7ApO1xcXFxuc2V0UGFnZVBpY1VybCjlsIHpnaIpO1xcXFxuLy8g5YmN572u5Y+C5pWw5ZKM6aKE5aSE55CGLS0tXFxcXG5pbWdMaW5rID0gc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpO1xcXFxuLy8g5YWo5bGAbGF6eeKAlOKAlOebtOmTvivmlq3mj5JcXFxcbnZhciBsYXp5ID0gJCgnJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgIHZpZGVvUGFybXMgPSBmaW5kSXRlbShpbnB1dCk7XFxcXG4gICAgYWlkID0gdmlkZW9QYXJtcy5leHRyYS5haWQ7XFxcXG4gICAgYnZpZCA9IHZpZGVvUGFybXMuZXh0cmEuYnZpZDtcXFxcbiAgICBjaWQgPSB2aWRlb1Bhcm1zLmV4dHJhLmNpZDtcXFxcbiAgICBiYWRnZSA9IHZpZGVvUGFybXMuZXh0cmEuYmFkZ2U7XFxcXG4gICAgLy8g5o+Q5Lqk5Y6G5Y+y6K6w5b2VXFxcXG4gICAgJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5yZXBvcnRQcm9jZXNzKGFpZCwgY2lkKTtcXFxcbiAgICB2aXBTdGF0dXMgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS52aXBTdGF0dXM7XFxcXG4gICAgaWYgKHZpcFN0YXR1cyAhPSAwKSB7XFxcXG4gICAgICAgIC8vIOWkp+S8muWRmFxcXFxuICAgICAgICBpZiAoYmFkZ2UubWF0Y2goL+S7mOi0uS8pKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gJChbJ+mtlOaWreino+aekCcsICflt7LotK3kubAnXSwgMSkuc2VsZWN0KChpbnB1dCwgYWlkLCBjaWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+mtlOaWreino+aekCcpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9jYWNoZS9QYXJzZV9Ebi5qcycsIHt9KSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBheXRtUGFyc2UobGluayk7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuYmlsaUxhenkoYWlkLCBjaWQsIDExNikucmVwbGFjZSgvOy9nLCBcXFxcXFxcIu+8m++8m1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9LCBsaW5rLCBhaWQsIGNpZClcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCAxMTYpLnJlcGxhY2UoLzsvZywgXFxcXFxcXCLvvJvvvJtcXFxcXFxcIik7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICAvLyDmma7pgJrnlKjmiLdcXFxcbiAgICAgICAgdmFyIHNldHRpbmc9SlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSk7XFxcXG4gICAgICAgIHZhciBoYXNCZktleT1zZXR0aW5nLmJmS2V5IT0nJz90cnVlOmZhbHNlO1xcXFxuICAgICAgICBpZiAoIWhhc0JmS2V5KSB7XFxcXG4gICAgICAgICAgICBpZiAoYmFkZ2UubWF0Y2goL+S8muWRmHzku5jotLkvKSkge1xcXFxuICAgICAgICAgICAgICAgIGV2YWwoZmV0Y2goJ2hpa2VyOi8vZmlsZXMvY2FjaGUvUGFyc2VfRG4uanMnLCB7fSkpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBheXRtUGFyc2UoaW5wdXQpO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgMTE2KS5yZXBsYWNlKC87L2csIFxcXFxcXFwi77yb77ybXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgLy8g5YWx5Lqr5Lya5ZGY5pKt5pS+5p2D55uKXFxcXG4gICAgICAgICAgICBpZiAoYmFkZ2UubWF0Y2goL+S7mOi0uS8pKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoWyfprZTmlq3op6PmnpAnLCAn5bey6LSt5LmwJ10sIDEpLnNlbGVjdCgoaW5wdXQsIGFpZCwgY2lkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSAn6a2U5pat6Kej5p6QJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXZhbChmZXRjaCgnaGlrZXI6Ly9maWxlcy9jYWNoZS9QYXJzZV9Ebi5qcycsIHt9KSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXl0bVBhcnNlKGxpbmspO1xcXFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuYmlsaUxhenkoYWlkLCBjaWQsIDExNikucmVwbGFjZSgvOy9nLCBcXFxcXFxcIu+8m++8m1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIGxpbmssIGFpZCwgY2lkKVxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5iaWxpTGF6eShhaWQsIGNpZCwgMTE2KS5yZXBsYWNlKC87L2csIFxcXFxcXFwi77yb77ybXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxufSk7XFxcXG52YXIgQ29sb3IgPSBcXFxcXFxcIiMxOUI4OURcXFxcXFxcIjtcXFxcbnZhciDmr4/pobXpm4bmlbAgPSAzMDtcXFxcbnZhciDmkJzntKLmqKHlvI8gPSAn5YiG57uEJztcXFxcbnZhciDosIPnlKjlkI3np7AgPSAn566A5b2xJztcXFxcbnB1dE15VmFyKCfmipjlj6AnLCAn5YWzJyk7XFxcXG5wdXRNeVZhcign5pel5Y6GJywgJ+WFsycpO1xcXFxucHV0TXlWYXIoJ0RhdGEnLCBEYXRhKTtcXFxcbnB1dE15VmFyKCdsYXp5JywgbGF6eSk7XFxcXG4vLyDmuIXpmaTlj5jph49cXFxcbmFkZExpc3RlbmVyKCdvbkNsb3NlJywgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgY2xlYXJNeVZhcign5YiG6ZuG6LW3Jyk7XFxcXG4gICAgY2xlYXJNeVZhcign5YiG6ZuG57uIJyk7XFxcXG4gICAgY2xlYXJNeVZhcign5oqY5Y+gJyk7XFxcXG4gICAgY2xlYXJNeVZhcign5pel5Y6GJyk7XFxcXG4gICAgY2xlYXJNeVZhcignRGF0YScpO1xcXFxuICAgIGNsZWFyTXlWYXIoJ2xhenknKTtcXFxcbiAgICBjbGVhck15VmFyKCfliafpm4bliJfooagnKTtcXFxcbn0pKVxcXFxuLy8g6K6+572u5Yqo5oCB5pyA5paw56ug6IqCXFxcXG5zZXRMYXN0Q2hhcHRlclJ1bGUoJ2pzOicgKyAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICBldmFsKEpTT04ucGFyc2UocmVxdWVzdCgnaGlrZXI6Ly9wYWdlL2dldFVwZGF0ZScpKS5ydWxlKTtcXFxcbn0pKTtcXFxcbi8vIOmhtemdouWGheWuueato+aWhy0tLVxcXFxuLy8g5Z+65pys5L+h5oGv5qih5Z2XXFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiDnn63orq8sXFxcXG4gICAgZGVzYzog566A5LuLID09ICcnID8gJ+aaguaXoOeugOS7iycgOiDnroDku4suc3Vic3RyaW5nKDAsIDQ1KSArICfigJjigJjigJnigJnigKY8Zm9udCBjb2xvcj1cXFxcXFxcIiMxQzFDMUNcXFxcXFxcIj7or6bmg4U8L2ZvbnQ+JyxcXFxcbiAgICBpbWc6IOWwgemdoixcXFxcbiAgICB1cmw6ICQoKS5ydWxlKCjnroDku4spID0+IHtcXFxcbiAgICAgICAgcmVzID0ge307XFxcXG4gICAgICAgIHZhciBkID0gW107XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+W9seeJh+eugOS7i++8micgKyAnXFxcXFxcXFxuXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0JyArIOeugOS7iyxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbG9uZ190ZXh0J1xcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmVzLmRhdGEgPSBkO1xcXFxuICAgICAgICBzZXRIb21lUmVzdWx0KHJlcyk7XFxcXG4gICAgfSwg566A5LuLKSxcXFxcbiAgICBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljX2JsdXInLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGxvbmdDbGljazogW3tcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn6aKE5ZGK44CB6Iqx57Wu5byA5YWzJywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdwcmV2aWV3U3dpdGNoJywgJ2ZvbGQnKSA9PSAnZm9sZCcpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgncHJldmlld1N3aXRjaCcsICdvcGVuJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+mihOWRiuW3sue7j+WIh+aNouS4uuWxleekun5cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdwcmV2aWV3U3dpdGNoJywgJ2ZvbGQnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6aKE5ZGK5LiN5YaN5bGV56S6flxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pLFxcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ2Rt55uS5a2QJywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAnaGlrZXI6Ly9wYWdlL3NldHRpbmcjbm9IaXN0b3J5Iz9ydWxlPWRt55uS5a2QJztcXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn5by55bmV5o6n5Yi2JywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpID09ICd0cnVlJykge1xcXFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5LiN5Y+XZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ3RydWUnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W8ueW5leWwhuWPl+WIsGRt55uS5a2Q5Y+C5pWw5o6n5Yi2JztcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KVxcXFxuICAgICAgICB9XVxcXFxuICAgIH1cXFxcbn0pO1xcXFxuLy8g5pu05paw5pel5Y6G5qih5Z2XXFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiAn5pel5Y6GJyxcXFxcbiAgICBpbWc6IGltZ0xpbmsu5pel5Y6GLFxcXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgo6L+95Ymn5pel5Y6GLCDmm7TmlrDov5vluqYpID0+IHtcXFxcbiAgICAgICAgaWYgKGdldE15VmFyKCfml6XljoYnLCAn5YWzJykgPT0gJ+W8gCcpIHtcXFxcbiAgICAgICAgICAgIGRlbGV0ZUl0ZW0oJ+i/veWJp+aXpeWOhicpO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoJ+aXpeWOhicsICflhbMnKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGFkZEl0ZW1BZnRlcign5pi+56S65qih5byPJywge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiDov73liafml6XljoYubWF0Y2goL+WujOe7k3zmnJ/lvoUvKSA/IOi/veWJp+aXpeWOhiA6IOi/veWJp+aXpeWOhiArICc8YnI+PGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj7mm7TmlrDoh7MnICsgKOabtOaWsOi/m+W6pi5tYXRjaCgvW1xcXFxcXFxcdTRlMDAtXFxcXFxcXFx1OWZhNV0vKSA/IOabtOaWsOi/m+W6piA6ICgn56ysJyArICjmm7TmlrDov5vluqYgPT0gJycgPyAwIDog5pu05paw6L+b5bqmKSArICfor50nKSkgKyAnPC9mb250PicsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICfov73liafml6XljoYnXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcign5pel5Y6GJywgJ+W8gCcpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LliIfmjaLml6XljobkuLo6JyArIGdldE15VmFyKCfml6XljoYnLCAn5byAJylcXFxcbiAgICB9LCDov73liafml6XljoYsIOabtOaWsOi/m+W6piksXFxcXG4gICAgY29sX3R5cGU6ICdpY29uXzUnXFxcXG59KTtcXFxcbi8vIOiuoumYheaooeWdl1xcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJ+iuoumYhScsXFxcXG4gICAgaW1nOiBpbWdMaW5rLuiuoumYhSxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICBzZWxlY3Rpb25MaXN0ID0gWyforqLpmIUnLCAn5Y+W5raI6K6i6ZiFJ107XFxcXG4gICAgICAgIHJldHVybiAkKHNlbGVjdGlvbkxpc3QsIDIpLnNlbGVjdCgoKSA9PiB7XFxcXG4gICAgICAgICAgICBzZWFzb25faWQgPSBKU09OLnBhcnNlKGdldE15VmFyKCdEYXRhJykpLnNlYXNvbl9pZDtcXFxcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PSAn6K6i6ZiFJykge1xcXFxuICAgICAgICAgICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuc3Vic2NyaWJlRmlsbShzZWFzb25faWQpO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmNhbmNlbFN1YnNjcmliZUZpbG0oc2Vhc29uX2lkKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly8nICsgcmVzO1xcXFxuICAgICAgICB9KTtcXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogJ2ljb25fNSdcXFxcbn0pO1xcXFxuLy8g6K+E6K665qih5Z2XXFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiAn6K+E6K66JyxcXFxcbiAgICBpbWc6IGltZ0xpbmsu5p+l55yL6K+E6K66LFxcXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMnKS5sYXp5UnVsZSgoKSA9PiB7XFxcXG4gICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5JykucnVsZSgoKSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgZCA9IFtdO1xcXFxuICAgICAgICAgICAgTGlzdCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ0RhdGEnKSkuZXBpc29kZXM7XFxcXG4gICAgICAgICAgICBMaXN0LmZvckVhY2goaXRlbSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0uc2hhcmVfY29weSArICc8Zm9udCBjb2xvcj1cXFxcXFxcIiMzM2NjY2NcXFxcXFxcIj5cXFxcdOKerjwvZm9udD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGl0ZW0uY292ZXIgKyAnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYXZhdGFyXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IGl0ZW0uYWlkLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJ0eXBlXFxcXFxcXCI6IDFcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBzZXRSZXN1bHQoZCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH0pLFxcXFxuICAgIGNvbF90eXBlOiAnaWNvbl81J1xcXFxufSk7XFxcXG5cXFxcbi8vIOeyvuW9qee7p+e7reaooeWdl1xcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJ+WRqOi+uScsXFxcXG4gICAgaW1nOiBpbWdMaW5rLuWRqOi+uSxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICBEYXRhID0gSlNPTi5wYXJzZShnZXRNeVZhcignRGF0YScpKTtcXFxcbiAgICAgICAgLy8g5pyJ5Lqb5rKh5pyJ55u05o6l5Y675o6J5oeS5b6X5aSE55CGflxcXFxuICAgICAgICBpZiAoRGF0YS5zZWN0aW9uKSB7XFxcXG4gICAgICAgICAgICDlkajovrnmlbDnu4QgPSBbXFxcXFxcXCLwn4+377iP55u45YWz57O75YiXXFxcXFxcXCIsIFxcXFxcXFwi8J+ko1BWJuiKsee1rlxcXFxcXFwiLCBcXFxcXFxcIvCfjYnnq5blsY/kuZ/nsr7lvalcXFxcXFxcIiwgXFxcXFxcXCLwn5Sl57K+5b2p5LqM5YibXFxcXFxcXCJdO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAg5ZGo6L655pWw57uEID0gW1xcXFxcXFwi8J+Pt++4j+ebuOWFs+ezu+WIl1xcXFxcXFwiXTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICAvLyDlkajovrnmlbDnu4QgPSBbXFxcXFxcXCLwn4+377iP55u45YWz57O75YiXXFxcXFxcXCIsIFxcXFxcXFwi8J+ko1BWJuiKsee1rlxcXFxcXFwiLCBcXFxcXFxcIuerluWxj+S5n+eyvuW9qVxcXFxcXFwiLCBcXFxcXFxcIueyvuW9qeS6jOWIm1xcXFxcXFwiXTtcXFxcbiAgICAgICAgcmV0dXJuICQo5ZGo6L655pWw57uELCAxLCAn4YOm57K+5b2p57un57utJykuc2VsZWN0KCgpID0+IHtcXFxcbiAgICAgICAgICAgIERhdGEgPSBKU09OLnBhcnNlKGdldE15VmFyKCdEYXRhJykpO1xcXFxuICAgICAgICAgICAgbGF6eSA9IGdldE15VmFyKCdsYXp5Jyk7XFxcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09ICfwn4+377iP55u45YWz57O75YiXJykge1xcXFxuICAgICAgICAgICAgICAgIOezu+WIl+WQjeensCA9IERhdGEuc2Vhc29uX3RpdGxlXFxcXG4gICAgICAgICAgICAgICAg57O75YiX5pWw5o2uID0gRGF0YS5zZWFzb25zO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAkKCkucnVsZSgo57O75YiX5pWw5o2uKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQgPSBbXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVRpdGxlKCfwn4+377iP55u45YWz57O75YiXJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICjns7vliJfmlbDmja4gPT0gW10gfHwg57O75YiX5pWw5o2uID09ICcnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGJpZz48Zm9udCBjb2xvcj1cXFxcXFxcInJlZFxcXFxcXFwiPuKtkOivpeW9seeJh+ayoeacieebuOWFs+ezu+WIl+WTpn7irZA8L2ZvbnQ+PC9iaWc+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICd0b2FzdDovL+mDveayoeacie+8jO+8jOS9oOeCueWVpeWRgH4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmlazor7fmnJ/lvoV+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICDns7vliJfmlbDmja4uZm9yRWFjaChsaXN0ID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3Quc2Vhc29uX3RpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZzogKGxpc3QuaG9yaXpvbnRhbF9jb3Zlcl8xNjEwID09ICcnID8gKGxpc3QuaG9yaXpvbnRhbF9jb3Zlcl8xNjkgPT0gJycgPyBsaXN0LmNvdmVyIDogbGlzdC5ob3Jpem9udGFsX2NvdmVyXzE2OSkgOiBsaXN0Lmhvcml6b250YWxfY292ZXJfMTYxMCkgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9maWxtZXJqaSNpbW1lcnNpdmVUaGVtZSMnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3QubmV3X2VwLmluZGV4X3Nob3csXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImVwX2lkXFxcXFxcXCI6IGxpc3QubmV3X2VwLmlkXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICBzZXRIb21lUmVzdWx0KGQpO1xcXFxuICAgICAgICAgICAgICAgIH0sIOezu+WIl+aVsOaNrilcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09ICfwn6SjUFYm6Iqx57WuJykge1xcXFxuICAgICAgICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFBW5ZKM6Iqx57Wu5pWw5o2uID0gRGF0YS5zZWN0aW9uWzBdLmVwaXNvZGVzO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJCgpLnJ1bGUoKFBW5ZKM6Iqx57Wu5pWw5o2uLCBsYXp5KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gW107XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ/CfpKNQViboirHnta4nKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChQVuWSjOiKsee1ruaVsOaNriA9PSBbXSB8fCBQVuWSjOiKsee1ruaVsOaNriA9PSAnJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn4oCY4oCY4oCZ4oCZPGJpZz48Zm9udCBjb2xvcj1cXFxcXFxcInJlZFxcXFxcXFwiPuKtkOivpeW9seeJhy/op4bpopHmsqHmnInnm7jlhbNQVuWSjOiKsee1ruWTpn7irZA8L2ZvbnQ+PC9iaWc+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAndG9hc3Q6Ly/pg73msqHmnInvvIzvvIzkvaDngrnllaXlkYB+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+aVrOivt+acn+W+hX4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBQVuWSjOiKsee1ruaVsOaNri5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGxpc3QubGluayArIGxhenksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3Quc3VidGl0bGUgKyAnXFxcXFxcXFxuJyArIGxpc3QubG9uZ190aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBsaXN0LmxpbmssXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnZpZDogbGlzdC5idmlkLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lkOiBsaXN0LmNpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZGdlOiBsaXN0LmJhZGdlXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwgUFblkozoirHnta7mlbDmja4sIGxhenkpXFxcXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5rKh5pyJ5pWw5o2u5ZOmfidcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSAn8J+NieerluWxj+S5n+eyvuW9qScpIHtcXFxcbiAgICAgICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgICAgICDnq5blsY/kuZ/nsr7lvanmlbDmja4gPSBEYXRhLnNlY3Rpb25bMV0uZXBpc29kZXM7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkKCkucnVsZSgo56uW5bGP5Lmf57K+5b2p5pWw5o2uLCBsYXp5KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gW107XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRQYWdlVGl0bGUoJ/CfjYnnq5blsY/kuZ/nsr7lvaknKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICjnq5blsY/kuZ/nsr7lvanmlbDmja4gPT0gW10gfHwg56uW5bGP5Lmf57K+5b2p5pWw5o2uID09ICcnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICfigJjigJjigJnigJk8YmlnPjxmb250IGNvbG9yPVxcXFxcXFwicmVkXFxcXFxcXCI+4q2Q6K+l5b2x54mHL+inhumikeayoeacieebuOWFs+erluWxj+efreinhumikeWTpn7irZA8L2ZvbnQ+PC9iaWc+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiAndG9hc3Q6Ly/pg73msqHmnInvvIzvvIzkvaDngrnllaXlkYB+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ+aVrOivt+acn+W+hX4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICDnq5blsY/kuZ/nsr7lvanmlbDmja4uZm9yRWFjaChsaXN0ID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0LmNvdmVyICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBsaXN0LmxpbmsgKyBsYXp5LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBsaXN0LnN1YnRpdGxlICsgJ1xcXFxcXFxcbicgKyBsaXN0LmxvbmdfdGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQ6IGxpc3QuYnZpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogbGlzdC5jaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWRnZTogbGlzdC5iYWRnZVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEhvbWVSZXN1bHQoZCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0sIOerluWxj+S5n+eyvuW9qeaVsOaNriwgbGF6eSlcXFxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/msqHmnInmlbDmja7lk6Z+J1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09ICfwn5Sl57K+5b2p5LqM5YibJykge1xcXFxuICAgICAgICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIOeyvuW9qeS6jOWIm+aVsOaNriA9IERhdGEuc2VjdGlvblsyXS5lcGlzb2RlcztcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoKS5ydWxlKCjnsr7lvankuozliJvmlbDmja4sIGxhenkpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBbXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFBhZ2VUaXRsZSgn8J+UpeeyvuW9qeS6jOWImycpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKOeyvuW9qeS6jOWIm+aVsOaNriA9PSBbXSB8fCDnsr7lvankuozliJvmlbDmja4gPT0gJycpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KAmOKAmOKAmeKAmTxiaWc+PGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj7irZDor6XlvbHniYcv6KeG6aKR5rKh5pyJ5LqM5Yib5L2c5ZOB5ZOmfuKtkDwvZm9udD48L2JpZz4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICd0b2FzdDovL+mDveayoeacie+8jO+8jOS9oOeCueWVpeWRgH4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5pWs6K+35pyf5b6FficsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMSdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIOeyvuW9qeS6jOWIm+aVsOaNri5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOmSiOWvuemDqOWIhuWPguaVsOe8uuWkseeahOaDheWGteWmguWHoeS6uuS/ruS7meS8oOWGmeeahO+8jO+8jFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXN0LmFpZCA9PSAwIHx8IGxpc3QuY2lkID09IDApIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmllZGVvRGF0YSA9IEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3ZpZXc/YWlkPVxcXFxcXFwiICsgbGlzdC5saW5rLnNwbGl0KCdhdicpWzFdLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiAnaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tLydcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFxcXFxcXFwiR0VUXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGE7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZCA9IHZpZWRlb0RhdGEuYWlkO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidmlkID0gdmllZGVvRGF0YS5idmlkO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQgPSB2aWVkZW9EYXRhLmNpZDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQgPSBsaXN0LmFpZDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnZpZCA9IGxpc3QuYnZpZDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2lkID0gbGlzdC5jaWQ7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGxpc3QubGluayArIGxhenksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3Quc3VidGl0bGUgKyAnXFxcXFxcXFxuJyArIGxpc3QubG9uZ190aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBsaXN0LmxpbmssXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGFpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQ6IGJ2aWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaWQ6IGNpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhZGdlOiBsaXN0LmJhZGdlXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSwg57K+5b2p5LqM5Yib5pWw5o2uLCBsYXp5KVxcXFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+ayoeacieaVsOaNruWTpn4nXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjov5vlhaVcXFxcXFxcIiArIGlucHV0ICsgXFxcXFxcXCLnlYzpnaIuLi5cXFxcXFxcIjtcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uXzVcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBpZDogJ+eyvuW9qee7p+e7rSdcXFxcbiAgICB9XFxcXG59KTtcXFxcbi8vIOaYvuekuuaooeW8j+abtOaUueaooeWdl1xcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpLFxcXFxuICAgIGltZzogZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpID09ICfliJfooagnID8gaW1nTGluay7liJfooaggOiBpbWdMaW5rLuWPjOi+uSxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICDmmL7npLrnmoTliafpm4bliJfooaggPSBKU09OLnBhcnNlKGdldE15VmFyKCfmmL7npLrnmoTliafpm4bliJfooagnKSk7XFxcXG4gICAgICAgIGlmIChnZXRJdGVtKCfmqKHlvI8nLCAn5Y+M6L65JykgPT0gJ+WIl+ihqCcpIHtcXFxcbiAgICAgICAgICAgIOaYvuekuueahOWJp+mbhuWIl+ihqC5mb3JFYWNoKGVsID0+IHtcXFxcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKGVsLmxpbmssIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8yJyxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgc2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpXFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICDmmL7npLrnmoTliafpm4bliJfooaguZm9yRWFjaChlbCA9PiB7XFxcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbShlbC5saW5rLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHNldEl0ZW0oJ+aooeW8jycsICfliJfooagnKVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGltZ0xpbmsgPSBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyk7XFxcXG4gICAgICAgIHVwZGF0ZUl0ZW0oJ+aYvuekuuaooeW8jycsIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBnZXRJdGVtKCfmqKHlvI8nLCAn5Y+M6L65JyksXFxcXG4gICAgICAgICAgICBpbWc6IGdldEl0ZW0oJ+aooeW8jycsICflj4zovrknKSA9PSAn5YiX6KGoJyA/IGltZ0xpbmsu5YiX6KGoIDogaW1nTGluay7lj4zovrksXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5bey5YiH5o2i5qih5byP5Li6OicgKyBnZXRJdGVtKCfmqKHlvI8nLCAn5Y+M6L65JylcXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogJ2ljb25fNScsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6ICfmmL7npLrmqKHlvI8nXFxcXG4gICAgfVxcXFxufSwge1xcXFxuICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaycsXFxcXG59KTtcXFxcbi8vIOmAieaPkuaooeWdl+KAlOKAlOWxgOmDqOWIt+aWsOeJiFxcXFxu5p2l5rqQID0gJ2JsJztcXFxcbnB1dE15VmFyKCfnroDmj5InLCAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICBsZXQgdGl0bGVBcnIgPSBbXVxcXFxuICAgIHNldEZpbGUgPSByZWFkRmlsZSgnaGlrZXI6Ly9maWxlcy9ydWxlcy9EdWFuTmlhbi9NeVBhcnNlLmpzb24nKTtcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBldmFsKCdqc29uPScgKyBzZXRGaWxlKTtcXFxcbiAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgIGxvZygnSnNvbuino+aekOWPkeeUn+S6humUmeivrzonICsgZS5tZXNzYWdlKTtcXFxcbiAgICB9XFxcXG4gICAgdGl0bGVBcnIgPSBqc29uLnRpdGxlO1xcXFxuICAgIGxldCBiYXJyeTEgPSBbJ+Kcje+4j+i+heWKqSddO1xcXFxuICAgIGxldCBiYXJyeTIgPSBbJ/Cfk6bvuI/prZTmlq0nXTtcXFxcbiAgICBsZXQgYmFycnkzID0gWyfwn5SN5pCc57SiJ107XFxcXG4gICAgdGl0bGVBcnIgPSBiYXJyeTMuY29uY2F0KHRpdGxlQXJyKTtcXFxcbiAgICB0aXRsZUFyciA9IGJhcnJ5Mi5jb25jYXQodGl0bGVBcnIpO1xcXFxuICAgIHRpdGxlQXJyID0gYmFycnkxLmNvbmNhdCh0aXRsZUFycik7XFxcXG4gICAgZXZhbCgnb3A9anNvbi5zZXR0aW5ncy4nICsg5p2l5rqQKTtcXFxcbiAgICB0aXRsZUFyciA9IHRpdGxlQXJyLm1hcCgoaXQpID0+IHtcXFxcbiAgICAgICAgcmV0dXJuIGl0ID09PSBvcCA/ICfwn5GJJyArIGl0IDogaXQ7XFxcXG4gICAgfSk7XFxcXG4gICAgcHV0TXlWYXIoJ+ino+aekOaVsOe7hCcsIHRpdGxlQXJyKTtcXFxcbiAgICBwdXRNeVZhcignc2V0RmlsZScsIHNldEZpbGUpO1xcXFxufSkpXFxcXG5ldmFsKGdldE15VmFyKCfnroDmj5InKSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiAn6Kej5p6Q77ya8J+UmDxmb250IGNvbG9yPVxcXFxcXFwiJyArIENvbG9yICsgJ1xcXFxcXFwiPicgKyBvcCArICc8L2ZvbnQ+XFxcXFxcXFx0XFxcXFxcXFx06aG156CB77yaPGZvbnQgY29sb3I9XFxcXFxcXCInICsgQ29sb3IgKyAnXFxcXFxcXCI+JyArICgoZ2V0TXlWYXIoJ+WIhumbhui1tycsICfpppbpobUnKSA9PSAn6aaW6aG1JykgPyAn6aaW6aG1JyA6IChnZXRNeVZhcign5YiG6ZuG6LW3JykgKyAnLScgKyBnZXRNeVZhcign5YiG6ZuG57uIJykpKSArICc8L2ZvbnQ+JyxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjJykubGF6eVJ1bGUoKGpzb24sIOadpea6kCwgQ29sb3IsIG9wLCDlvbHniYflkI3np7AsIOaQnOe0ouaooeW8jywg6LCD55So5ZCN56ewKSA9PiB7XFxcXG4gICAgICAgIGV2YWwoZ2V0TXlWYXIoJ+eugOaPkicpKTtcXFxcbiAgICAgICAgcmV0dXJuICQoZXZhbChnZXRNeVZhcign6Kej5p6Q5pWw57uEJykpLCAzKS5zZWxlY3QoKGpzb24sIOadpea6kCwgQ29sb3IsIG9wLCDlvbHniYflkI3np7AsIOaQnOe0ouaooeW8jywg6LCD55So5ZCN56ewKSA9PiB7XFxcXG4gICAgICAgICAgICBzZXRGaWxlID0gZ2V0TXlWYXIoJ3NldEZpbGUnKTtcXFxcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZSgv8J+RiS9nLCAnJyk7XFxcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09ICfinI3vuI/ovoXliqknKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoKS5ydWxlKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZXZhbChKU09OLnBhcnNlKHJlcXVlc3QoJ2hpa2VyOi8vcGFnZS9ob21lP3J1bGU96YWN572u5Yqp5omLJykpLnJ1bGUpO1xcXFxuICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlucHV0ID09PSAn8J+Tpu+4j+mtlOaWrScpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvUm91dGU/cnVsZT1NeUZpZWxk4bSw4oG/JnR5cGU957yW6L6RI25vSGlzdG9yeSNcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09ICfwn5SN5pCc57SiJykge1xcXFxuICAgICAgICAgICAgICAgIGlmICjmkJzntKLmqKHlvI8gPT0gJ+WIhue7hCcpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9zZWFyY2g/cz1cXFxcXFxcIiArIOW9seeJh+WQjeensCArIFxcXFxcXFwiJmdyb3VwPVxcXFxcXFwiICsg6LCD55So5ZCN56ewO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vc2VhcmNoP3M9XFxcXFxcXCIgKyDlvbHniYflkI3np7AgKyBcXFxcXFxcIiZydWxlPVxcXFxcXFwiICsg6LCD55So5ZCN56ewO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIC8vIOWOn+WFiOeahOmFjee9rlxcXFxuICAgICAgICAgICAgb3JpZ2luU2V0dGluZ3MgPSBKU09OLnN0cmluZ2lmeShqc29uLnNldHRpbmdzKTtcXFxcbiAgICAgICAgICAgIC8vIOS/ruaUuemFjee9rlxcXFxuICAgICAgICAgICAgZXZhbCgnanNvbi5zZXR0aW5ncy4nICsg5p2l5rqQICsgJz1pbnB1dDsnKTtcXFxcbiAgICAgICAgICAgIHNldEZpbGUgPSBzZXRGaWxlLnJlcGxhY2Uob3JpZ2luU2V0dGluZ3MsIEpTT04uc3RyaW5naWZ5KGpzb24uc2V0dGluZ3MpKTtcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKCdoaWtlcjovL2ZpbGVzL3J1bGVzL0R1YW5OaWFuL015UGFyc2UuanNvbicsIHNldEZpbGUpO1xcXFxuICAgICAgICAgICAgLy8g5Yi35paw5YWD57SgXFxcXG4gICAgICAgICAgICBldmFsKGdldE15VmFyKCfnroDmj5InKSk7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCdvcCcsIHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+ino+aekO+8mvCflJg8Zm9udCBjb2xvcj1cXFxcXFxcIicgKyBDb2xvciArICdcXFxcXFxcIj4nICsgb3AgKyAnPC9mb250PlxcXFxcXFxcdFxcXFxcXFxcdOmhteegge+8mjxmb250IGNvbG9yPVxcXFxcXFwiJyArIENvbG9yICsgJ1xcXFxcXFwiPicgKyAoKGdldE15VmFyKCfliIbpm4botbcnLCAn6aaW6aG1JykgPT0gJ+mmlumhtScpID8gJ+mmlumhtScgOiAoZ2V0TXlWYXIoJ+WIhumbhui1tycpICsgJy0nICsgZ2V0TXlWYXIoJ+WIhumbhue7iCcpKSkgKyAnPC9mb250PicsXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5YiH5o2i6Kej5p6Q5Y+j5Li6OlxcXFxcXFwiICsgaW5wdXQ7XFxcXG4gICAgICAgIH0sIGpzb24sIOadpea6kCwgQ29sb3IsIG9wLCDlvbHniYflkI3np7AsIOaQnOe0ouaooeW8jywg6LCD55So5ZCN56ewKVxcXFxuICAgIH0sIGpzb24sIOadpea6kCwgQ29sb3IsIG9wLCDlvbHniYflkI3np7AsIOaQnOe0ouaooeW8jywg6LCD55So5ZCN56ewKSxcXFxcbiAgICBpbWc6ICdoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L3R1Ymlhby9iaWxpYmlsaS5zdmcnLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGlkOiAnb3AnXFxcXG4gICAgfVxcXFxufSk7XFxcXG4vLyDmu5rliqjliafpm4bmnaHmoI9cXFxcbuWJp+mbhumVv+W6piA9IOWJp+mbhuWIl+ihqC5sZW5ndGg7XFxcXG5pZiAo5Ymn6ZuG6ZW/5bqmID4g5q+P6aG16ZuG5pWwKSB7XFxcXG4gICAgcHV0TXlWYXIoJ+WIt+aWsOmAiembhicsICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICBwdXRNeVZhcign5YiG6ZuG6LW3Jywgc3RhcnQpO1xcXFxuICAgICAgICBwdXRNeVZhcign5YiG6ZuG57uIJywgZW5kKTtcXFxcbiAgICAgICAgZXZhbChnZXRNeVZhcign566A5o+SJykpO1xcXFxuICAgICAgICB1cGRhdGVJdGVtKCdvcCcsIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn6Kej5p6Q77ya8J+UmDxmb250IGNvbG9yPVxcXFxcXFwiJyArIENvbG9yICsgJ1xcXFxcXFwiPicgKyBvcCArICc8L2ZvbnQ+XFxcXFxcXFx0XFxcXFxcXFx06aG156CB77yaPGZvbnQgY29sb3I9XFxcXFxcXCInICsgQ29sb3IgKyAnXFxcXFxcXCI+JyArICgoZ2V0TXlWYXIoJ+WIhumbhui1tycsICfpppbpobUnKSA9PSAn6aaW6aG1JykgPyAn6aaW6aG1JyA6IChnZXRNeVZhcign5YiG6ZuG6LW3JykgKyAnLScgKyBnZXRNeVZhcign5YiG6ZuG57uIJykpKSArICc8L2ZvbnQ+JyxcXFxcbiAgICAgICAgfSlcXFxcbiAgICAgICAgLy8g5Yig6ZmkXFxcXG4gICAgICAgIOaYvuekuueahOWJp+mbhuWIl+ihqCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoJ+aYvuekuueahOWJp+mbhuWIl+ihqCcpKTtcXFxcbiAgICAgICAg5pi+56S655qE5Ymn6ZuG5YiX6KGoLmZvckVhY2goZWwgPT4ge1xcXFxuICAgICAgICAgICAgZGVsZXRlSXRlbShlbC5saW5rKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIC8vIOa3u+WKoFxcXFxuICAgICAgICBsYXp5ID0gZ2V0TXlWYXIoJ2xhenknKTtcXFxcbiAgICAgICAg5Ymn6ZuG5YiX6KGoID0gSlNPTi5wYXJzZShnZXRNeVZhcign5Ymn6ZuG5YiX6KGoJykpO1xcXFxuICAgICAgICDmmL7npLrnmoTliafpm4bliJfooaggPSDliafpm4bliJfooaguc2xpY2Uoc3RhcnQgLSAxLCBlbmQpO1xcXFxuICAgICAgICBuZXdBcnJheSA9IFtdO1xcXFxuICAgICAgICBpbmRleCA9IDE7XFxcXG4gICAgICAgIOaYvuekuueahOWJp+mbhuWIl+ihqC5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGdldEl0ZW0oJ+aooeW8jycsICflj4zovrknKSA9PSAn5YiX6KGoJykge1xcXFxuICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5sb25nX3RpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGxpc3QubGluayArIGxhenksXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3QudGl0bGUubWF0Y2goL1swLTldLykgPyAobGlzdC5iYWRnZSArICfnrKwnICsgbGlzdC50aXRsZSArICfor50nKSA6IGxpc3QudGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQ6IGxpc3QuYnZpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogbGlzdC5jaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWRnZTogbGlzdC5iYWRnZVxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIG5ld0FycmF5LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5sb25nX3RpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGxpc3QubGluayArIGxhenksXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IGxpc3QudGl0bGUubWF0Y2goL1swLTldLykgPyAobGlzdC5iYWRnZSArICfnrKwnICsgbGlzdC50aXRsZSArICfor50nKSA6IGxpc3QudGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ2aWQ6IGxpc3QuYnZpZCxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpZDogbGlzdC5jaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWRnZTogbGlzdC5iYWRnZVxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBpbmRleCArPSAxO1xcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgYWRkSXRlbUFmdGVyKGdldE15VmFyKCfmnKvpobUnKSwgbmV3QXJyYXkpO1xcXFxuICAgICAgICBwdXRNeVZhcign5pi+56S655qE5Ymn6ZuG5YiX6KGoJywg5pi+56S655qE5Ymn6ZuG5YiX6KGoKTtcXFxcbiAgICB9KSk7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcbiAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgICAgIHRpdGxlOiAn4oi3JyxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiAn5Y2g5L2N56ymJyxcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pXFxcXG4gICAgcHV0TXlWYXIoJ+WIhumbhui1tycsIDEpO1xcXFxuICAgIHB1dE15VmFyKCfliIbpm4bnu4gnLCDmr4/pobXpm4bmlbApO1xcXFxuICAgIHB1dE15VmFyKCfliafpm4bliJfooagnLCDliafpm4bliJfooagpO1xcXFxuICAgIOaAu+mhteaVsCA9IE1hdGguY2VpbCjliafpm4bplb/luqYgLyDmr4/pobXpm4bmlbApO1xcXFxuICAgIHN0YXJ0ID0gMTtcXFxcbiAgICBlbmQgPSDmr4/pobXpm4bmlbA7XFxcXG4gICAgZm9yIChsZXQgcGFnZSA9IDE7IHBhZ2UgPD0g5oC76aG15pWwOyBwYWdlKyspIHtcXFxcbiAgICAgICAgaWYgKGVuZCA+IOWJp+mbhumVv+W6pikge1xcXFxuICAgICAgICAgICAgZW5kID0g5Ymn6ZuG6ZW/5bqmO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogc3RhcnQgKyAnLScgKyBlbmQsXFxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoc3RhcnQsIGVuZCwgQ29sb3IsIOadpea6kCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGV2YWwoZ2V0TXlWYXIoJ+WIt+aWsOmAiembhicpKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9LCBzdGFydCwgZW5kLCBDb2xvciwg5p2l5rqQKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBzdGFydCArICctJyArIGVuZFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgaWYgKGVuZCA8IOWJp+mbhumVv+W6pikge1xcXFxuICAgICAgICAgICAgc3RhcnQgKz0g5q+P6aG16ZuG5pWwO1xcXFxuICAgICAgICAgICAgZW5kICs9IOavj+mhtembhuaVsDtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICAvLyDorrDlvZXmnKvpobXnmoRpZFxcXFxuICAgIHB1dE15VmFyKCfmnKvpobUnLCBzdGFydCArICctJyArIGVuZCk7XFxcXG59IGVsc2Uge1xcXFxuICAgIHB1dE15VmFyKCfliIbpm4botbcnLCAxKTtcXFxcbiAgICBwdXRNeVZhcign5YiG6ZuG57uIJywg5Ymn6ZuG6ZW/5bqmKTtcXFxcbn1cXFxcbi8vIOWxleekuuWJp+mbhjpcXFxcbuaYvuekuueahOWJp+mbhuWIl+ihqCA9IOWJp+mbhuWIl+ihqC5zbGljZSgwLCBnZXRNeVZhcign5YiG6ZuG57uIJykpO1xcXFxucHV0TXlWYXIoJ+aYvuekuueahOWJp+mbhuWIl+ihqCcsIOaYvuekuueahOWJp+mbhuWIl+ihqCk7XFxcXG5pbmRleCA9IDE7XFxcXG7mmL7npLrnmoTliafpm4bliJfooaguZm9yRWFjaChsaXN0ID0+IHtcXFxcbiAgICBpZiAoZ2V0SXRlbSgn5qih5byPJywgJ+WPjOi+uScpID09ICfliJfooagnKSB7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogbGlzdC5sb25nX3RpdGxlLFxcXFxuICAgICAgICAgICAgaW1nOiBsaXN0LmNvdmVyICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogbGlzdC5saW5rICsgbGF6eSxcXFxcbiAgICAgICAgICAgIGRlc2M6IGxpc3QudGl0bGUubWF0Y2goL1swLTldLykgPyAobGlzdC5iYWRnZSArICfnrKwnICsgbGlzdC50aXRsZSArICfor50nKSA6IGxpc3QudGl0bGUsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogbGlzdC5saW5rLFxcXFxuICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWQsXFxcXG4gICAgICAgICAgICAgICAgYnZpZDogbGlzdC5idmlkLFxcXFxuICAgICAgICAgICAgICAgIGNpZDogbGlzdC5jaWQsXFxcXG4gICAgICAgICAgICAgICAgYmFkZ2U6IGxpc3QuYmFkZ2VcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBsaXN0LmxvbmdfdGl0bGUsXFxcXG4gICAgICAgICAgICBpbWc6IGxpc3QuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiBsaXN0LmxpbmsgKyBsYXp5LFxcXFxuICAgICAgICAgICAgZGVzYzogbGlzdC50aXRsZS5tYXRjaCgvWzAtOV0vKSA/IChsaXN0LmJhZGdlICsgJ+esrCcgKyBsaXN0LnRpdGxlICsgJ+ivnScpIDogbGlzdC50aXRsZSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMicsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBsaXN0LmxpbmssXFxcXG4gICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFpZCxcXFxcbiAgICAgICAgICAgICAgICBidmlkOiBsaXN0LmJ2aWQsXFxcXG4gICAgICAgICAgICAgICAgY2lkOiBsaXN0LmNpZCxcXFxcbiAgICAgICAgICAgICAgICBiYWRnZTogbGlzdC5iYWRnZVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG4gICAgaW5kZXggKz0gMTtcXFxcbn0pO1xcXFxuc2V0UmVzdWx0KGQpO1xcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwidXDkuLvpobVcXFwiLFxcXCJwYXRoXFxcIjpcXFwidXBIb21lXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcbi8vIOmihOWkhOeQhlxcXFxucHV0TXlWYXIoJ3VwSW5mbycsICflhbMnKTtcXFxcbnNldFBhZ2VUaXRsZShNWV9QQVJBTVMudGl0bGUpO1xcXFxuaW1nTGluayA9IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKTtcXFxcbi8vIOmYsuatouWPjeeIrOiZq++8jOS7juS4iuS4gOS4qumhtemdouS8oOmAkuaVsOaNruKAlOKAlOWPjeeIrOiZq+S4pemHjVxcXFxudXBNaWQgPSBNWV9QQVJBTVMubWlkICsgXFxcXFxcXCJcXFxcXFxcIjtcXFxcbnVwTmFtZSA9IE1ZX1BBUkFNUy50aXRsZTtcXFxcbnVwRmFjZSA9IE1ZX1BBUkFNUy5mYWNlO1xcXFxucmVsYXRpb24gPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLnVzZXJNYXBwaW5nKHVwTWlkKTtcXFxcbi8vIOWktOWDj+agj1xcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJzxmb250IGNvbG9yPVxcXFxcXFwiYmx1ZVxcXFxcXFwiPicgKyB1cE5hbWUgKyAnPC9mb250PicsXFxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIycpLmxhenlSdWxlKCh1cE1pZCkgPT4ge1xcXFxuICAgICAgICBpZiAoZ2V0TXlWYXIoJ3VwSW5mbycsICflhbMnKSA9PSAn5byAJykge1xcXFxuICAgICAgICAgICAgZGVsZXRlSXRlbSgndXBJbmZvJyk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcigndXBJbmZvJywgJ+WFsycpO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgICAgICAvLyDnlKjmiLfln7rmnKzkv6Hmga9cXFxcbiAgICAgICAgICAgICAgICBxdWVyeUpzb24gPSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG1pZDogdXBNaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIHRva2VuOiAnJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm06ICd3ZWInLFxcXFxuICAgICAgICAgICAgICAgICAgICB3ZWJfbG9jYXRpb246IDE1NTAxMDFcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgcGFybXMgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmdldFdiaUVuYyhxdWVyeUpzb24pO1xcXFxuICAgICAgICAgICAgICAgIGluZm9MaW5rID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3NwYWNlL3diaS9hY2MvaW5mbz8nICsgcGFybXM7XFxcXG4gICAgICAgICAgICAgICAgdXBEYXRhID0gSlNPTi5wYXJzZShmZXRjaChpbmZvTGluaywge1xcXFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlVzZXItQWdlbnRcXFxcXFxcIjogUENfVUEsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBjb29raWU9SlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9KSkuZGF0YTtcXFxcbiAgICAgICAgICAgICAgICB1cE5hbWUgPSB1cERhdGEubmFtZTtcXFxcbiAgICAgICAgICAgICAgICB1cFNleCA9IHVwRGF0YS5zZXg7XFxcXG4gICAgICAgICAgICAgICAgdXBTaWduID0gdXBEYXRhLnNpZ247XFxcXG4gICAgICAgICAgICAgICAgdXBCaXJ0aGRheSA9IHVwRGF0YS5iaXJ0aGRheTtcXFxcbiAgICAgICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgICAgICB1cFNjaG9vbCA9IHVwRGF0YS5zY2hvb2wubmFtZTtcXFxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVwU2Nob29sID0gJyc7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVwSWRlbnRpZmljYXRpb24gPSB1cERhdGEub2ZmaWNpYWwudGl0bGU7XFxcXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB1cElkZW50aWZpY2F0aW9uID0gJyc7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGFkZEl0ZW1BZnRlcignY3VycmVudFVwJywge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ3VwOicgKyB1cE5hbWUgKyAnXFxcXFxcXFxubWlkOicgKyB1cE1pZCArICdcXFxcXFxcXG7mgKfliKs6JyArIHVwU2V4ICsgJ1xcXFxcXFxcbueUn+aXpTonICsgKHVwQmlydGhkYXkgPT0gJycgPyAn5pyq5aGr5YaZJyA6IHVwQmlydGhkYXkpICsgJ1xcXFxcXFxcbicgKyAodXBTY2hvb2wgPT0gJycgPyAnJyA6ICflrabmoKE6JyArIHVwU2Nob29sICsgJ1xcXFxcXFxcbicpICsgKHVwU2lnbiA9PSAnJyA/ICdcXFxcXFxcXG4nIDogdXBTaWduICsgJ1xcXFxcXFxcbicpICsgKHVwSWRlbnRpZmljYXRpb24gPT0gJycgPyAnJyA6ICforqTor4E6JyksXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xvbmdfdGV4dCcsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogJ3VwSW5mbydcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgIGFkZEl0ZW1BZnRlcignY3VycmVudFVwJywge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+WlveWDj+WHuuS6hueCueaEj+Wklu+8n+S7gOS5iOmDveacqOacieWRon4nLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsb25nX3RleHQnLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICd1cEluZm8nXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHB1dE15VmFyKCd1cEluZm8nLCAn5byAJyk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuICd0b2FzdDovL+S/oeaBr+aKmOWPoDonICsgZ2V0TXlWYXIoJ3VwSW5mbycsICflvIAnKVxcXFxuICAgIH0sIHVwTWlkKSxcXFxcbiAgICBpbWc6IHVwRmFjZSArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiYXZhdGFyXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6ICdjdXJyZW50VXAnXFxcXG4gICAgfVxcXFxufSwge1xcXFxuICAgIGNvbF90eXBlOiAnbGluZSdcXFxcbn0pO1xcXFxuLy8g5YWs5ZGKXFxcXG5ub3RpY2VUZXh0ID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc3BhY2Uvbm90aWNlP21pZD0nICsgdXBNaWQgKyAnJmpzb25wPWpzb25wJywge1xcXFxuICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IGNvb2tpZT1KU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXFxcbiAgICB9XFxcXG59KSkuZGF0YTtcXFxcbmlmIChub3RpY2VUZXh0ICE9ICcnKSB7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICflhazlkYonLFxcXFxuICAgICAgICB1cmw6ICQoKS5ydWxlKChub3RpY2VUZXh0KSA9PiB7XFxcXG4gICAgICAgICAgICB2YXIgZCA9IFtdO1xcXFxuICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+WFrOWRiu+8micgKyAnXFxcXFxcXFxuXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0JyArIG5vdGljZVRleHQsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsb25nX3RleHQnXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHNldEhvbWVSZXN1bHQoZCk7XFxcXG4gICAgICAgIH0sIG5vdGljZVRleHQpLFxcXFxuICAgICAgICBkZXNjOiBub3RpY2VUZXh0ID09ICcnID8gJ+aaguaXoOWFrOWRiicgOiBub3RpY2VUZXh0LFxcXFxuICAgICAgICBjb2xfdHlwZTogJ3RleHRfMScsXFxcXG4gICAgfSk7XFxcXG59XFxcXG5kLnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiAnbGluZSdcXFxcbn0sIHtcXFxcbiAgICB0aXRsZTogcmVsYXRpb24sXFxcXG4gICAgaW1nOiByZWxhdGlvbiA9PSAn5pyq5YWz5rOoJyA/IGltZ0xpbmsu5re75Yqg5YWz5rOoIDogaW1nTGluay7lt7LlhbPms6gsXFxcXG4gICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKHVwTWlkKSA9PiB7XFxcXG4gICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmNoYW5nZVVzZXJSZWxhdGlvbih1cE1pZCwgMTEpXFxcXG4gICAgfSwgdXBNaWQpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGlkOiAncmVsYXRpb24nXFxcXG4gICAgfVxcXFxufSwge1xcXFxuICAgIHRpdGxlOiAn5Yqo5oCBJyxcXFxcbiAgICBpbWc6IGltZ0xpbmsu5Yqo5oCBLFxcXFxuICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKCh1cE1pZCkgPT4ge1xcXFxuICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eT9wPWZ5cGFnZScpLnJ1bGUoKHVwTWlkKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgZCA9IFtdO1xcXFxuICAgICAgICAgICAgbGF0ZW5ld3MgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmdldER5bmFtaWNEYXRhKCd1cFNwYWNlJywgdXBNaWQpO1xcXFxuICAgICAgICAgICAgZXZhbCgkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLnNob3dEeW5hbWljRGF0YSgpKTtcXFxcbiAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXFxcbiAgICAgICAgfSwgdXBNaWQpXFxcXG4gICAgfSwgdXBNaWQpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiLFxcXFxufSwge1xcXFxuICAgIHRpdGxlOiAn5LiT5qCPJyxcXFxcbiAgICBpbWc6IGltZ0xpbmsu5LiT5qCPLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvYWN0aWNsZUxpc3Q/cD1meXBhZ2VcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uX3NtYWxsXzRcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBtaWQ6IHVwTWlkXFxcXG4gICAgfVxcXFxufSlcXFxcbi8vIOeUqOaIt+inhumikS3lkIjpm4bjgIHns7vliJdcXFxcbnVwVmlkZW8gPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9wb2x5bWVyL3NwYWNlL3NlYXNvbnNfc2VyaWVzX2xpc3Q/bWlkPScgKyB1cE1pZCArICcmcGFnZV9udW09MSZwYWdlX3NpemU9MTAnLCB7XFxcXG4gICAgaGVhZGVyczoge1xcXFxuICAgICAgICBcXFxcXFxcIlVzZXItQWdlbnRcXFxcXFxcIjogUENfVUEsXFxcXG4gICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIlxcXFxuICAgIH1cXFxcbn0pKS5kYXRhLml0ZW1zX2xpc3RzO1xcXFxuLy8g6KeG6aKR5ZCI6ZuG44CB57O75YiXXFxcXG50cnkge1xcXFxuICAgIHVwVmlkZW8uc2Vhc29uc19saXN0LmZvckVhY2gobGlzdCA9PiB7XFxcXG4gICAgICAgIHNlYXNvbl9pZCA9IGxpc3QubWV0YS5zZWFzb25faWQ7XFxcXG4gICAgICAgIC8vIOagh+mimC3ot7Povazmm7TlpJpcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcXFxcXCIjMzNjY2NjXFxcXFxcXCI+JyArIGxpc3QubWV0YS5uYW1lLnN1YnN0cmluZygwLCAzMCkgKyAnPC9mb250PlxcXFxcXFxcdFxcXFxcXFxcdDxmb250IGNvbG9yPVxcXFxcXFwicmVkXFxcXFxcXCI+JyArIGxpc3QubWV0YS50b3RhbCArICc8L2ZvbnQ+XFxcXHTinq4nLFxcXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWQiOmbhuaWh+S7tuWkuSxcXFxcbiAgICAgICAgICAgIC8vIGltZzogbGlzdC5tZXRhLmNvdmVyKydAUmVmZXJlcj0nLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKHVwTWlkLCBzZWFzb25faWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJCgnaGlrZXI6Ly9lbXB0eT9meXBhZ2UnKS5ydWxlKCh1cE1pZCwgc2Vhc29uX2lkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHZhciBkID0gW107XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB1ID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3BvbHltZXIvc3BhY2Uvc2Vhc29uc19hcmNoaXZlc19saXN0P21pZD0nICsgdXBNaWQgKyAnJnNlYXNvbl9pZD0nICsgc2Vhc29uX2lkICsgJyZzb3J0X3JldmVyc2U9ZmFsc2UmcGFnZV9udW09JyArIE1ZX1BBR0UgKyAnJnBhZ2Vfc2l6ZT0zMCc7XFxcXG4gICAgICAgICAgICAgICAgICAgIFZpZGVvID0gSlNPTi5wYXJzZShmZXRjaCh1LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KSkuZGF0YTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbWF4UGFnZSA9IE1hdGguY2VpbChWaWRlby5wYWdlLnRvdGFsIC8gVmlkZW8ucGFnZS5wYWdlX3NpemUpO1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAoTVlfUEFHRSA8PSBtYXhQYWdlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5b2T5YmNOuesrCcgKyBWaWRlby5wYWdlLnBhZ2VfbnVtICsgJ+mhtVxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOWFseaciScgKyBtYXhQYWdlICsgJ+mhtSwnICsgVmlkZW8ucGFnZS50b3RhbCArICfmnaHmlbDmja4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBWaWRlby5hcmNoaXZlcy5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QucGljICsgJ0BSZWZlcmVyPScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgbGlzdC5zdGF0LnZpZXcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWRcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXFxcbiAgICAgICAgICAgICAgICB9LCB1cE1pZCwgc2Vhc29uX2lkKVxcXFxuICAgICAgICAgICAgfSwgdXBNaWQsIHNlYXNvbl9pZClcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGlmIChsaXN0LmFyY2hpdmVzID09PSB1bmRlZmluZWQpIHtcXFxcbiAgICAgICAgICAgIGxvZyhsaXN0Lm1ldGEubmFtZSArICfkuLrnqbonKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGlmIChsaXN0LmFyY2hpdmVzLmxlbmd0aCA8IDIpIHtcXFxcbiAgICAgICAgICAgICAgICBsaXN0LmFyY2hpdmVzLmZvckVhY2gobGlzdCA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5waWMgKyAnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgbGlzdC5zdGF0LnZpZXcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LmFyY2hpdmVzLmxlbmd0aCA9PSAwKSB7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5aW95a625LyZ77yM6L+Z5a625LyZ5rKh5pyJ5ZCI6ZuG6KeG6aKR77yBXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi6KaB5LiN5Y6754K55Ye75YWo6YOo6KeG6aKR55yL55yLflxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QuYXJjaGl2ZXNbaV0udGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuYXJjaGl2ZXNbaV0ucGljICsgJ0BSZWZlcmVyPScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5pKt5pS+6YeP77yaJyArIGxpc3QuYXJjaGl2ZXNbaV0uc3RhdC52aWV3LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFyY2hpdmVzW2ldLmFpZFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbn0gY2F0Y2ggKGUpIHtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+WQiOmbhuS4uuepuicsXFxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcXFxuICAgICAgICBkZXNjOiAnU29ycnks5rKh5pyJ5pWw5o2u5ZGificsXFxcXG4gICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxcXG4gICAgfSk7XFxcXG59XFxcXG50cnkge1xcXFxuICAgIHVwVmlkZW8uc2VyaWVzX2xpc3QuZm9yRWFjaChsaXN0ID0+IHtcXFxcbiAgICAgICAgc2VyaWVzX2lkID0gbGlzdC5tZXRhLnNlcmllc19pZDtcXFxcbiAgICAgICAgLy8g5qCH6aKYLei3s+i9rOabtOWkmlxcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFxcXFxcIiMzM2NjY2NcXFxcXFxcIj4nICsgbGlzdC5tZXRhLm5hbWUuc3Vic3RyaW5nKDAsIDMwKSArICc8L2ZvbnQ+XFxcXFxcXFx0XFxcXFxcXFx0PGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj4nICsgbGlzdC5tZXRhLnRvdGFsICsgJzwvZm9udD5cXFxcdOKericsXFxcXG4gICAgICAgICAgICBpbWc6IGltZ0xpbmsu5ZCI6ZuG5paH5Lu25aS5LFxcXFxuICAgICAgICAgICAgLy8gaW1nOiBsaXN0Lm1ldGEuY292ZXIrJ0BSZWZlcmVyPScsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ2F2YXRhcicsXFxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgodXBNaWQsIHNlcmllc19pZCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5P2Z5cGFnZScpLnJ1bGUoKHVwTWlkLCBzZXJpZXNfaWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBbXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc2VyaWVzL2FyY2hpdmVzP21pZD0nICsgdXBNaWQgKyAnJnNlcmllc19pZD0nICsgc2VyaWVzX2lkICsgJyZvbmx5X25vcm1hbD10cnVlJnNvcnQ9ZGVzYyZwbj0nICsgTVlfUEFHRSArICcmcHM9MzAnO1xcXFxuICAgICAgICAgICAgICAgICAgICBWaWRlbyA9IEpTT04ucGFyc2UoZmV0Y2godSwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiVXNlci1BZ2VudFxcXFxcXFwiOiBQQ19VQSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgfSkpLmRhdGE7XFxcXG4gICAgICAgICAgICAgICAgICAgIG1heFBhZ2UgPSBNYXRoLmNlaWwoVmlkZW8ucGFnZS50b3RhbCAvIFZpZGVvLnBhZ2Uuc2l6ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChNWV9QQUdFIDw9IG1heFBhZ2UpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICflvZPliY0656ysJyArIFZpZGVvLnBhZ2UubnVtICsgJ+mhtVxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOWFseaciScgKyBtYXhQYWdlICsgJ+mhtSwnICsgVmlkZW8ucGFnZS50b3RhbCArICfmnaHmlbDmja4nLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBWaWRlby5hcmNoaXZlcy5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0LnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QucGljICsgJ0BSZWZlcmVyPScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgbGlzdC5zdGF0LnZpZXcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5haWRcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXFxcbiAgICAgICAgICAgICAgICB9LCB1cE1pZCwgc2VyaWVzX2lkKVxcXFxuICAgICAgICAgICAgfSwgdXBNaWQsIHNlcmllc19pZClcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGlmIChsaXN0LmFyY2hpdmVzID09PSB1bmRlZmluZWQpIHtcXFxcbiAgICAgICAgICAgIGxvZyhsaXN0Lm1ldGEubmFtZSArICfkuLrnqbonKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGlmIChsaXN0LmFyY2hpdmVzLmxlbmd0aCA8IDIpIHtcXFxcbiAgICAgICAgICAgICAgICBsaXN0LmFyY2hpdmVzLmZvckVhY2gobGlzdCA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogbGlzdC5waWMgKyAnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgbGlzdC5zdGF0LnZpZXcsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LmFyY2hpdmVzLmxlbmd0aCA9PSAwKSB7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5aW95a625LyZ77yM6L+Z5a625LyZ5rKh5pyJ5ZCI6ZuG6KeG6aKR77yBXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi6KaB5LiN5Y6754K55Ye75YWo6YOo6KeG6aKR55yL55yLflxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3RleHRfY2VudGVyXzEnLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QuYXJjaGl2ZXNbaV0udGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QuYXJjaGl2ZXNbaV0ucGljICsgJ0BSZWZlcmVyPScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiAn5pKt5pS+6YeP77yaJyArIGxpc3QuYXJjaGl2ZXNbaV0uc3RhdC52aWV3LFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0LmFyY2hpdmVzW2ldLmFpZFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbn0gY2F0Y2ggKGUpIHtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+ezu+WIl+S4uuepuicsXFxcXG4gICAgICAgIHVybDogJ2hpa2VyOi8vZW1wdHknLFxcXFxuICAgICAgICBkZXNjOiAnU29ycnks5rKh5pyJ5pWw5o2u5ZGificsXFxcXG4gICAgICAgIGNvbF90eXBlOiAndGV4dF9jZW50ZXJfMScsXFxcXG4gICAgfSk7XFxcXG59XFxcXG4vLyB1cOaKleeov1xcXFxuZC5wdXNoKHtcXFxcbiAgICB0aXRsZTogJ1RB55qE6KeG6aKRLOeCueWHu+WxleW8gOWFqOmDqCcsXFxcXG4gICAgY29sX3R5cGU6ICd0ZXh0X2NlbnRlcl8xJyxcXFxcbiAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgodXBNaWQpID0+IHtcXFxcbiAgICAgICAgcmV0dXJuICQoKS5ydWxlKCh1cE1pZCkgPT4ge1xcXFxuICAgICAgICAgICAgdmFyIGQgPSBbXTtcXFxcbiAgICAgICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICAgICAgcXVlcnlKc29uID0ge1xcXFxuICAgICAgICAgICAgICAgICAgICBtaWQ6IHVwTWlkLFxcXFxuICAgICAgICAgICAgICAgICAgICBwczogMzAsXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpZDogZ2V0TXlWYXIoJ190aWQnLCAnMCcpLFxcXFxuICAgICAgICAgICAgICAgICAgICBzcGVjaWFsX3R5cGU6ICcnLFxcXFxuICAgICAgICAgICAgICAgICAgICBwbjogZ2V0TXlWYXIoJ19wYWdlJywgJzEnKSxcXFxcbiAgICAgICAgICAgICAgICAgICAga2V5d29yZDogJycsXFxcXG4gICAgICAgICAgICAgICAgICAgIG9yZGVyOiAncHViZGF0ZScsXFxcXG4gICAgICAgICAgICAgICAgICAgIHBsYXRmb3JtOiAnd2ViJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgLy8gd2ViX2xvY2F0aW9uOiAxNTUwMTAxLFxcXFxuICAgICAgICAgICAgICAgICAgICBvcmRlcl9hdm9pZGVkOiB0cnVlXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHBhcm1zID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5nZXRXYmlFbmMocXVlcnlKc29uKTtcXFxcbiAgICAgICAgICAgICAgICBkYXRhTGluayA9ICdodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9zcGFjZS93YmkvYXJjL3NlYXJjaD8nICsgcGFybXM7XFxcXG4gICAgICAgICAgICAgICAgdXBWaWRlb0RhdGEgPSBKU09OLnBhcnNlKGZldGNoKGRhdGFMaW5rLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiVXNlci1BZ2VudFxcXFxcXFwiOiBQQ19VQSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IGNvb2tpZT1KU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pKS5kYXRhO1xcXFxuICAgICAgICAgICAgICAgIHRsaXN0ID0gdXBWaWRlb0RhdGEubGlzdC50bGlzdDtcXFxcbiAgICAgICAgICAgICAgICB2bGlzdCA9IHVwVmlkZW9EYXRhLmxpc3Qudmxpc3Q7XFxcXG4gICAgICAgICAgICAgICAgLy8g5YiG57G75ZKM6aG156CBXFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldE15VmFyKCdfdGlkJywgJzAnKSA9PSAwID8gJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXFxcXFwicmVkXFxcXFxcXCI+5YWo6YOoPC9mb250PicgOiAn5YWo6YOoJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ190aWQnLCAoMCArIFxcXFxcXFwiXFxcXFxcXCIpKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKCdfcGFnZScsICgxICsgXFxcXFxcXCJcXFxcXFxcIikpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgZm9yIChpdGVtIGluIHRsaXN0KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogKHRsaXN0W2l0ZW1dLnRpZCArIFxcXFxcXFwiXFxcXFxcXCIpID09IGdldE15VmFyKCdfdGlkJywgJzAnKSA/ICfigJjigJjigJnigJk8Zm9udCBjb2xvcj1cXFxcXFxcInJlZFxcXFxcXFwiPicgKyAodGxpc3RbaXRlbV0ubmFtZSArIGAoJHt0bGlzdFtpdGVtXS5jb3VudH0pYCkgKyAnPC9mb250PicgOiAodGxpc3RbaXRlbV0ubmFtZSArIGAoJHt0bGlzdFtpdGVtXS5jb3VudH0pYCksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgodGlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ190aWQnLCAodGlkICsgXFxcXFxcXCJcXFxcXFxcIikpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKCdfcGFnZScsICgxICsgXFxcXFxcXCJcXFxcXFxcIikpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRsaXN0W2l0ZW1dLnRpZCksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJyxcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICBtYXhQYWdlID0gTWF0aC5jZWlsKHVwVmlkZW9EYXRhLnBhZ2UuY291bnQgLyB1cFZpZGVvRGF0YS5wYWdlLnBzKTtcXFxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBwYWdlID0gMTsgcGFnZSA8PSBtYXhQYWdlOyBwYWdlKyspIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAocGFnZSArIFxcXFxcXFwiXFxcXFxcXCIpID09IGdldE15VmFyKCdfcGFnZScsICcxJykgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj4nICsgKHBhZ2UgKyBcXFxcXFxcIlxcXFxcXFwiKSArICc8L2ZvbnQ+JyA6IChwYWdlICsgXFxcXFxcXCJcXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgocGFnZSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKCdfcGFnZScsIChwYWdlICsgXFxcXFxcXCJcXFxcXFxcIikpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHBhZ2UpLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIC8vIOW5s+mTuuinhumikVxcXFxuICAgICAgICAgICAgICAgIHZsaXN0LmZvckVhY2goaXRlbSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHB1YnRpbWUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLnRpbWVDb252ZXJ0KGl0ZW0uY3JlYXRlZCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltZzogaXRlbS5waWMgKyAnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6ICfmkq3mlL7ph4/vvJonICsgaXRlbS5wbGF5ICsgJ1xcXFxcXFxcbicgKyBwdWJ0aW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvdmlkZW9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBpdGVtLmFpZFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+mhtemdoui1sOS4ouS6hi4uLicsXFxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogJ2h0dHBzOi8vaTAuaGRzbGIuY29tL2Jmcy9nZW5lcmFsL2Y3YjY2NzAxMWE0NjYxNTczMmM3MDFmNGJiMWQwN2Y3OTNmOGQxZGYucG5nQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICflpKrpopHnuYHkuobvvIHnqI3lkI7lho3or5V+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicGljXzFcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgc2V0SG9tZVJlc3VsdChkKTtcXFxcbiAgICAgICAgfSwgdXBNaWQpXFxcXG4gICAgfSwgdXBNaWQpXFxcXG59KTtcXFxcbnNldFJlc3VsdChkKTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCJ1cOaQnOe0olxcXCIsXFxcInBhdGhcXFwiOlxcXCJ1cFNlYXJjaFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbnNlYXdvcmQgPSBNWV9QQVJBTVMuc2Vhd29yZDtcXFxcbnZhciBkID0gW107XFxcXG5yZXN1bHREYXRhPSQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0U2VhcmNoUmVzKCdiaWxpX3VzZXInLHNlYXdvcmQsTVlfUEFHRSwzNik7XFxcXG5pZiAoTVlfUEFHRSA8PSByZXN1bHREYXRhLm51bVBhZ2VzKSB7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICflvZPliY0656ysJyArIHJlc3VsdERhdGEucGFnZSArICfpobVcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTlhbHmnIknICsgcmVzdWx0RGF0YS5udW1QYWdlcyArICfpobUsJyArIHJlc3VsdERhdGEubnVtUmVzdWx0cyArICfmnaHmlbDmja4nLFxcXFxuICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgfSk7XFxcXG4gICAgcmVzdWx0RGF0YS5yZXN1bHQuZm9yRWFjaChsaXN0ID0+IHtcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIjxiaWc+PGZvbnQgY29sb3I9J2JsdWUnPlxcXFxcXFwiICsgbGlzdC51bmFtZSArIFxcXFxcXFwiPC9mb250PjwvYmlnPjxzbWFsbD5cXFxcXFxcIiArIGxpc3QudXNpZ24gKyBcXFxcXFxcIjwvc21hbGw+XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBpbWc6ICdodHRwczovLycgKyBsaXN0LnVwaWMgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS91cEhvbWVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1pZCxcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC51bmFtZSxcXFxcbiAgICAgICAgICAgICAgICBmYWNlOiAnaHR0cHM6Ly8nICsgbGlzdC51cGljXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH0pO1xcXFxufVxcXFxuc2V0U2VhcmNoUmVzdWx0KGQpO1xcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwidmlkZW/mkJzntKJcXFwiLFxcXCJwYXRoXFxcIjpcXFwidmlkZW9TZWFyY2hcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5zZWF3b3JkID0gTVlfUEFSQU1TLnNlYXdvcmQ7XFxcXG52YXIgZCA9IFtdO1xcXFxudmFyIHJlc3VsdERhdGE9JC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5nZXRTZWFyY2hSZXMoJ3ZpZGVvJyxzZWF3b3JkLE1ZX1BBR0UsNDIpO1xcXFxudmFyIHt0aW1lQ29udmVydH09JC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKTtcXFxcbmlmIChNWV9QQUdFIDw9IHJlc3VsdERhdGEubnVtUGFnZXMpIHtcXFxcbiAgICBkLnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJ+W9k+WJjTrnrKwnICsgcmVzdWx0RGF0YS5wYWdlICsgJ+mhtVxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOWFseaciScgKyByZXN1bHREYXRhLm51bVBhZ2VzICsgJ+mhtSwnICsgcmVzdWx0RGF0YS5udW1SZXN1bHRzICsgJ+adoeaVsOaNricsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICB9KTtcXFxcbiAgICByZXN1bHREYXRhLnJlc3VsdC5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuICAgICAgICAvLyB0aXRsZT1saXN0LnRpdGxlLnJlcGxhY2UoJzxlbSBjbGFzcz1cXFxcXFxcXFxcXFxcXFwia2V5d29yZFxcXFxcXFxcXFxcXFxcXCI+JywnPGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj4nKS5yZXBsYWNlKCc8L2VtPicsJzwvZm9udD4nKVxcXFxuICAgICAgICB0aXRsZSA9IGxpc3QudGl0bGUucmVwbGFjZSgvPGVtIGNsYXNzPVxcXFxcXFxcXFxcXFxcXCJrZXl3b3JkXFxcXFxcXFxcXFxcXFxcIj4vZywgJycpLnJlcGxhY2UoLzxcXFxcXFxcXC9lbT4vZywgJycpXFxcXG4gICAgICAgIHBidGltZT10aW1lQ29udmVydChsaXN0LnB1YmRhdGUpO1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxuICAgICAgICAgICAgaW1nOiAnaHR0cHM6Ly8nICsgbGlzdC5waWMgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogJ+KAnOKAnOKAneKAnTxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+5pKt5pS+6YePOicrbGlzdC5wbGF5KydcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTlvLnluZU6JytsaXN0LmRhbm1ha3UrJ1xcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdOWWnOasojonK2xpc3QubGlrZSsnXFxcXFxcXFxu5Y+R5biD5pe26Ze0OicrcGJ0aW1lKyc8L2ZvbnQ+PC9zbWFsbD48L3NtYWxsPicsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAvLyDop4bpopHmoIfor4ZcXFxcbiAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkLFxcXFxuICAgICAgICAgICAgICAgIGJ2aWQ6bGlzdC5idmlkLFxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9KTtcXFxcbn1cXFxcbnNldFNlYXJjaFJlc3VsdChkKTtcXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8xX2xlZnRfcGljXFxcIixcXFwibmFtZVxcXCI6XFxcIuaOqOmAgVxcXCIsXFxcInBhdGhcXFwiOlxcXCJmZWVkXFxcIixcXFwicnVsZVxcXCI6XFxcIiQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0RmVlZCgpLmZvckVhY2goaXRlbSA9PiB7XFxcXG5cXFxcbsKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIHRpdGxlOiBpdGVtLnRpdGxlLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCBpbWc6IGl0ZW0ucGljKydAUmVmZXJlcj0nLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCBkZXNjOiAndXA6JyArIGl0ZW0ub3duZXIubmFtZSArICdcXFxcXFxcXG4nICsgaXRlbS5zdGF0LnZpZXcgKyBcXFxcXFxcIuaSreaUvuKAu1xcXFxcXFwiICsgaXRlbS5zdGF0Lmxpa2UgKyBcXFxcXFxcIueCuei1nlxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGV4dHJhOiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIC8vIGlk5YW25a6e5pivYWlkXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGFpZDogaXRlbS5pZCxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgY2lkOiBpdGVtLmNpZCxcXFxcblxcXFxuwqAgwqAgwqAgwqAgfVxcXFxuXFxcXG7CoCDCoCB9KVxcXFxuXFxcXG59KVxcXFxuXFxcXG5cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJ0ZXh0XzFcXFwiLFxcXCJuYW1lXFxcIjpcXFwiQVBJXFxcIixcXFwicGF0aFxcXCI6XFxcImFwaVxcXCIsXFxcInJ1bGVcXFwiOlxcXCIvLyBwYXJ0MTrogZrlkIjlh73mlbAtLS0tLS0tLS0tLS0tLS0tXFxcXG4vLyDnmbvlvZXpqozor4FcXFxcbiQuZXhwb3J0cy5pc0xvZ2dlZEluID0gZnVuY3Rpb24gKCkge1xcXFxuICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKSB7XFxcXG4gICAgICAgIGJpbGlEYXRhID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSk7XFxcXG4gICAgICAgIGlmIChiaWxpRGF0YS51c2VyTGlzdC5sZW5ndGggPT0gMCkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcInVzZXJOYW1lXFxcXFxcXCI6ICfmnKrnmbvlvZUnLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidXNlck1pZFxcXFxcXFwiOiAnJyxcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcInVzZXJGYWNlXFxcXFxcXCI6ICcnLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidHlwZVxcXFxcXFwiOiBmYWxzZVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBjdXJyZW50VXNlciA9IGJpbGlEYXRhLnVzZXJMaXN0WzBdO1xcXFxuICAgICAgICB2YXIgY29va2llID0gY3VycmVudFVzZXIuY29va2llO1xcXFxuICAgICAgICBsZXQgdXNlcmluZm8gPSBKU09OLnBhcnNlKGZldGNoKFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9uYXZcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IGNvb2tpZVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KSkuZGF0YTtcXFxcbiAgICAgICAgaWYgKHVzZXJpbmZvLmlzTG9naW4gPT09IGZhbHNlKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidXNlck5hbWVcXFxcXFxcIjogJ+acqueZu+W9lScsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJ1c2VyTWlkXFxcXFxcXCI6ICcnLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidXNlckZhY2VcXFxcXFxcIjogJycsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJ0eXBlXFxcXFxcXCI6IGZhbHNlXFxcXG4gICAgICAgICAgICB9KVxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgY3VycmVudFVzZXIudXNlck5hbWUgPSB1c2VyaW5mby51bmFtZTtcXFxcbiAgICAgICAgICAgIGN1cnJlbnRVc2VyLnVzZXJNaWQgPSB1c2VyaW5mby5taWQ7XFxcXG4gICAgICAgICAgICAvLyAx77ya5Lya5ZGY5byA6YCa77ybMO+8muacquW8gOmAmlxcXFxuICAgICAgICAgICAgY3VycmVudFVzZXIudmlwU3RhdHVzID0gdXNlcmluZm8udmlwU3RhdHVzO1xcXFxuICAgICAgICAgICAgY3VycmVudFVzZXIuZmFjZSA9IHVzZXJpbmZvLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgc2F2ZUZpbGUoJ2hpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHQnLCBKU09OLnN0cmluZ2lmeShiaWxpRGF0YSkpO1xcXFxuICAgICAgICAgICAgLy8gcmV0dXJuIHRydWU7XFxcXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidXNlck5hbWVcXFxcXFxcIjogY3VycmVudFVzZXIudXNlck5hbWUsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJ1c2VyTWlkXFxcXFxcXCI6IGN1cnJlbnRVc2VyLnVzZXJNaWQsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJ1c2VyRmFjZVxcXFxcXFwiOiBjdXJyZW50VXNlci5mYWNlLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidHlwZVxcXFxcXFwiOiB0cnVlXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XFxcXG4gICAgICAgICAgICBcXFxcXFxcInVzZXJOYW1lXFxcXFxcXCI6ICfmnKrnmbvlvZUnLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJ1c2VyTWlkXFxcXFxcXCI6ICcnLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJ1c2VyRmFjZVxcXFxcXFwiOiAnJyxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwidHlwZVxcXFxcXFwiOiBmYWxzZVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG4vLyDlk5Tlk6nop4bpopHop6PmnpDvvJrojrflj5bmkq3mlL7lnLDlnYAr5o+Q5Lqk5pKt5pS+6K6w5b2VXFxcXG4kLmV4cG9ydHMuYmlsaUxhenkgPSBmdW5jdGlvbiAoaWQsIGNpZCwgcW4pIHtcXFxcbiAgICAvLyDph43nva7ljp/nlJ/lvLnluZXnu5/kuIDlvLnluZXlpKflsI/jgIHkv67mlLnmraXplb9cXFxcbiAgICBmdW5jdGlvbiBvdmVycmlkZVNhdmUoZG0pIHtcXFxcbiAgICAgICAgdmFyIGRhbm11RGF0YSA9IHJlcXVlc3QoZG0pO1xcXFxuICAgICAgICAvLyDlrZfkvZPlpKflsI/jgIHlvLnluZXmraXplb9cXFxcbiAgICAgICAgdmFyIGRhbm11U2V0dGluZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoJ2hpa2VyOi8vZmlsZXMvZG3nm5LlrZAvc2V0dGluZ3MuanNvbicpKTtcXFxcbiAgICAgICAgdmFyIHNpemUgPSBkYW5tdVNldHRpbmcuZm9udFNpemU7XFxcXG4gICAgICAgIHZhciBzdGVwID0gZGFubXVTZXR0aW5nLnN0ZXA7XFxcXG4gICAgICAgIHZhciBkYXRhID0gJyc7XFxcXG4gICAgICAgIHRkID0gcGRmYShkYW5tdURhdGEsICdpJiZkJyk7XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGQubGVuZ3RoOyBpICs9IHN0ZXApIHtcXFxcbiAgICAgICAgICAgIHRpbWVwb2ludCA9IHBkZmgodGRbaV0sICdkJiZwJykuc3BsaXQoXFxcXFxcXCIsXFxcXFxcXCIpWzBdO1xcXFxuICAgICAgICAgICAgY3QgPSBwZGZoKHRkW2ldLCAnZCYmcCcpLnNwbGl0KFxcXFxcXFwiLFxcXFxcXFwiKVsxXTtcXFxcbiAgICAgICAgICAgIGNvbG9yID0gcGRmaCh0ZFtpXSwgJ2QmJnAnKS5zcGxpdChcXFxcXFxcIixcXFxcXFxcIilbM107XFxcXG4gICAgICAgICAgICAvLyDlvLnluZXlhoXlrrlcXFxcbiAgICAgICAgICAgIGNvbnRlbnQgPSBwZGZoKHRkW2ldLCAnZCYmVGV4dCcpO1xcXFxuICAgICAgICAgICAgaWYgKGNvbnRlbnQuaW5kZXhPZignPCcpICE9IC0xIHx8IGNvbnRlbnQuaW5kZXhPZignPicpICE9IC0xIHx8IGNvbnRlbnQuaW5kZXhPZignJicpICE9IC0xIHx8IGNvbnRlbnQuaW5kZXhPZignXFxcXFxcXFx1MDAwMCcpICE9IC0xIHx8IGNvbnRlbnQuaW5kZXhPZignXFxcXFxcXFxiJykgIT0gLTEpIHtcXFxcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHRlbXBkYXRhID0gYDxkIHA9XFxcXFxcXCIke01hdGgucm91bmQodGltZXBvaW50KX0sJHtjdH0sJHtzaXplfSwke2NvbG9yfSwwXFxcXFxcXCI+JHtjb250ZW50fTwvZD5cXFxcXFxcXG5gO1xcXFxuICAgICAgICAgICAgZGF0YSArPSB0ZW1wZGF0YTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBkYW5tdXN0ciA9IGA8P3htbCB2ZXJzaW9uPVxcXFxcXFwiMS4wXFxcXFxcXCIgZW5jb2Rpbmc9XFxcXFxcXCJVVEYtOFxcXFxcXFwiPz5cXFxcXFxcXG48aT5cXFxcXFxcXG4ke2RhdGF9PC9pPmA7XFxcXG4gICAgICAgIHNhdmVGaWxlKGRtLCBkYW5tdXN0cik7XFxcXG4gICAgfVxcXFxuICAgIC8vIOWIpOaWreaYr+WQpumHjeWGmVxcXFxuICAgIHZhciBkbSA9ICdodHRwczovL2NvbW1lbnQuYmlsaWJpbGkuY29tLycgKyBjaWQgKyAnLnhtbCc7XFxcXG4gICAgaWYgKGdldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ2ZhbHNlJykgPT0gJ3RydWUnKSB7XFxcXG4gICAgICAgIGZpbGUgPSAnaHR0cHM6Ly9jb21tZW50LmJpbGliaWxpLmNvbS8nICsgY2lkICsgJy54bWwnO1xcXFxuICAgICAgICBkbSA9ICdoaWtlcjovL2ZpbGVzL2NhY2hlL2Rhbm11LycgKyAnYmlsaV9mcm9tXycgKyBnZXRQYWdlVGl0bGUoKSArICcueG1sJztcXFxcbiAgICAgICAgZG93bmxvYWRGaWxlKGZpbGUsIGRtKTtcXFxcbiAgICAgICAgb3ZlcnJpZGVTYXZlKGRtKTtcXFxcbiAgICB9XFxcXG4gICAgdmFyIGRhdGEgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmdldFVybChpZCwgY2lkLCBxbik7XFxcXG4gICAgLy8g5o+Q5Lqk5Y6G5Y+y6K6w5b2VXFxcXG4gICAgJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5yZXBvcnRQcm9jZXNzKGlkLCBjaWQpO1xcXFxuICAgIC8vIHF1YWxpdHlOdW09ZGFzaC5hdWRpby5sZW5ndGg75LiN6ZyA6KaB5LqG77yM5om+5Yiw5LqG5pu05aW955qE5Yik5pat5pa55rOV77yM6Jm954S25oiR5bm25LiN55+l6YGT6L+Z5Lqb5Y+C5pWw55qE5ZCr5LmJ5piv5LuA5LmIXFxcXG4gICAgdmlkZW9MaXN0ID0gW107XFxcXG4gICAgYXVkaW9MaXN0ID0gW107XFxcXG4gICAgbmFtZUxpc3QgPSBbXTtcXFxcbiAgICBoZWFkZXJzID0gW107XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgZGF0YS5hdWRpby5mb3JFYWNoKGl0ZW0gPT4ge1xcXFxuICAgICAgICAgICAgYXVkaW9MaXN0LnB1c2goaXRlbS5iYXNlVXJsKTtcXFxcbiAgICAgICAgICAgIGhlYWRlcnMucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGRhdGEudmlkZW8uZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgIGlmIChpdGVtLmNvZGVjaWQgPT0gNykge1xcXFxuICAgICAgICAgICAgICAgIHZpZGVvTGlzdC5wdXNoKGl0ZW0uYmFzZVVybCArIFxcXFxcXFwiI2lzVmlkZW89dHJ1ZSNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaWQgPT0gMTI2KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJ+adnOavlOinhueVjCcpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSAxMjUpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxpc3QucHVzaCgnSERSIOecn+W9qeiJsicpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSAxMjApIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxpc3QucHVzaCgnNEvotoXmuIUnKTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gMTE2KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJzEwODBQNjDpq5jluKfnjocnKTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gMTEyKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJzEwODBQK+mrmOeggeeOhycpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSA4MCkge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCcxMDgwUOmrmOa4hScpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSA3NCkge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCc3MjBQNjDpq5jluKfnjocnKTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gNjQpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbmFtZUxpc3QucHVzaCgnNzIwUOmrmOa4hScpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pZCA9PSAzMikge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCc0ODBQ5riF5pmwJyk7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlkID09IDE2KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVMaXN0LnB1c2goJzM2MFDmtYHnlYUnKTtcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGl0ZW0uaWQgPT0gNikge1xcXFxuICAgICAgICAgICAgICAgICAgICBuYW1lTGlzdC5wdXNoKCcyNDBQ5p6B6YCfJyk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgLy8g5L+d5oyB6ZW/5bqm5LiA6Ie0XFxcXG4gICAgICAgIHdoaWxlIChhdWRpb0xpc3QubGVuZ3RoIDwgdmlkZW9MaXN0Lmxlbmd0aCkge1xcXFxuICAgICAgICAgICAgLy8g5aSN5Yi2IGF1ZGlvTGlzdCDkuK3mnIDlkI7kuIDkuKrlhYPntKDlubbov73liqDliLDmlbDnu4TmnKvlsL5cXFxcbiAgICAgICAgICAgIGF1ZGlvTGlzdC5wdXNoKGF1ZGlvTGlzdFthdWRpb0xpc3QubGVuZ3RoIC0gMV0pO1xcXFxuICAgICAgICAgICAgLy8g5aSN5Yi2IGhlYWRlcnMg5Lit5pyA5ZCO5LiA5Liq5YWD57Sg5bm26L+95Yqg5Yiw5pWw57uE5pyr5bC+XFxcXG4gICAgICAgICAgICBoZWFkZXJzLnB1c2goaGVhZGVyc1toZWFkZXJzLmxlbmd0aCAtIDFdKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgdXJsczogdmlkZW9MaXN0LFxcXFxuICAgICAgICAgICAgYXVkaW9VcmxzOiBhdWRpb0xpc3QsXFxcXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzLFxcXFxuICAgICAgICAgICAgbmFtZXM6IG5hbWVMaXN0LFxcXFxuICAgICAgICAgICAgZGFubXU6IGRtXFxcXG4gICAgICAgIH0pXFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBsb2coXFxcXFxcXCLmraPluLjop6Pph4rlpLHotKXvvIzov5vooYzmnIDlkI7lsJ3or5U6XFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgdXJsczogW2RhdGEuZHVybFswXS51cmwgKyBcXFxcXFxcIiNpc1ZpZGVvPXRydWUjXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgbmFtZXM6IFtkYXRhLnF1YWxpdHkgKyBcXFxcXFxcIlxcXFxcXFwiXSxcXFxcbiAgICAgICAgICAgIGRhbm11OiBkbSxcXFxcbiAgICAgICAgICAgIGhlYWRlcnM6IFt7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBXFxcXG4gICAgICAgICAgICB9XVxcXFxuICAgICAgICB9KVxcXFxuICAgIH1cXFxcbn1cXFxcbi8vIOeojeWQjuWcqOeci+KAlOKAlOaAu+aTjeS9nOWIpOaWrVxcXFxuJC5leHBvcnRzLmp1ZGdlVG92aWV3ID0gZnVuY3Rpb24gKGFpZCkge1xcXFxuICAgIHNlbGVjdGlvbiA9IFsn5re75YqgJywgJ+enu+mZpCddO1xcXFxuICAgIHJldHVybiAkKHNlbGVjdGlvbiwgMSkuc2VsZWN0KChhaWQpID0+IHtcXFxcbiAgICAgICAgaWYgKGlucHV0ID09ICfmt7vliqAnKSB7XFxcXG4gICAgICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmFkZFRvdmlldyhhaWQpO1xcXFxuICAgICAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mt7vliqDmiJDlip9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gLTEwMSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6LSm5Y+35pyq55m75b2VXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMTEpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL2NzcmbmoKHpqozlpLHotKVcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gLTQwMCkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+35rGC6ZSZ6K+vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IDkwMDAxKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liJfooajlt7Lmu6FcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gOTAwMDMpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+eov+S7tuW3sue7j+iiq+WIoOmZpFxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pyq55+l6ZSZ6K+vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZGVsVG92aWV3KGFpZCk7XFxcXG4gICAgICAgICAgICBpZiAocmVzID09IDApIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+enu+mZpOaIkOWKn1xcXFxcXFwiXFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtMTAxKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/otKblj7fmnKrnmbvlvZVcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gLTExMSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8vY3NyZuagoemqjOWksei0pVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtNDAwKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/or7fmsYLplJnor69cXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+acquefpemUmeivr1xcXFxcXFwiXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBhaWQpXFxcXG59XFxcXG4vLyDmk43kvZznlKjmiLflhbPns7tcXFxcbiQuZXhwb3J0cy5jaGFuZ2VVc2VyUmVsYXRpb24gPSBmdW5jdGlvbiAobWlkLCByZV9zcmMpIHtcXFxcbiAgICBzZWxlY3Rpb24gPSBbJ+WFs+azqCcsICflj5blhbMnLCAn5oKE5oKE5YWz5rOoJywgJ+WPlua2iOaChOaChOWFs+azqCcsICfmi4npu5EnLCAn5Y+W5raI5ouJ6buRJywgJ+i4ouWHuueyieS4nScsICfnp7vliqjliIbnu4QnXTtcXFxcbiAgICByZXR1cm4gJChzZWxlY3Rpb24sIDIpLnNlbGVjdCgobWlkLCByZV9zcmMpID0+IHtcXFxcbiAgICAgICAgaWYgKGlucHV0ID09ICfnp7vliqjliIbnu4QnKSB7XFxcXG4gICAgICAgICAgICBiZWZvcmVUYWdpZHMgPSBbXTtcXFxcbiAgICAgICAgICAgIGdyb3VwcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0VXNlckdyb3VwKG1pZCk7XFxcXG4gICAgICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkoZ3JvdXBzKSA9PSAne30nKSB7XFxcXG4gICAgICAgICAgICAgICAgYmVmb3JlVGFnaWRzLnB1c2goMCk7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gZ3JvdXBzKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZVRhZ2lkcy5wdXNoKHBhcnNlSW50KHByb3ApKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAvLyDojrflj5bmiJHnmoTliIbnu4RcXFxcbiAgICAgICAgICAgIGZvY3VzR3JvdXBMaXN0ID0gW107XFxcXG4gICAgICAgICAgICAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmdldE15QXR0ZW50aW9uR3JvdXBMaXN0KCkuZm9yRWFjaChsaXN0ID0+IHtcXFxcbiAgICAgICAgICAgICAgICBmb2N1c0dyb3VwTGlzdC5wdXNoKGxpc3QubmFtZSArICcgJyArIGxpc3QudGFnaWQpO1xcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gJChmb2N1c0dyb3VwTGlzdCwgMSkuc2VsZWN0KChiZWZvcmVUYWdpZHMsIG1pZCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGFmdGVyVGFnaWRzID0gW107XFxcXG4gICAgICAgICAgICAgICAgYWZ0ZXJUYWdpZHMucHVzaChwYXJzZUludChpbnB1dC5zcGxpdCgnICcpWzFdKSk7XFxcXG4gICAgICAgICAgICAgICAgZmlkcyA9IFtdO1xcXFxuICAgICAgICAgICAgICAgIGZpZHMucHVzaChOdW1iZXIobWlkKSk7XFxcXG4gICAgICAgICAgICAgICAgcmVzID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5tb3ZlVXNlcnMoYmVmb3JlVGFnaWRzLCBhZnRlclRhZ2lkcywgZmlkcyk7XFxcXG4gICAgICAgICAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v56e75Yqo55So5oi35YiwXFxcXFxcXCIgKyBpbnB1dC5zcGxpdCgnICcpWzBdICsgXFxcXFxcXCLliIbnu4TmiJDlip9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMDEpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/otKblj7fmnKrnmbvlvZVcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMTEpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9jc3Jm5qCh6aqM5aSx6LSlXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtNDAwKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+35rGC6ZSZ6K+vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAyMjEwNCkge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+aXoOadg+mZkFxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXMgPT0gMjIxMDUpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mnKrlhbPms6hcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pyq55+l6ZSZ6K+vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9LCBiZWZvcmVUYWdpZHMsIG1pZCk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT0gJ+WFs+azqCcpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gMTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+WPluWFsycpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gMjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+aChOaChOWFs+azqCcpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gMztcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+WPlua2iOaChOaChOWFs+azqCcpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gNDtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+aLiem7kScpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gNTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+WPlua2iOaLiem7kScpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gNjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaW5wdXQgPT0gJ+i4ouWHuueyieS4nScpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgYWN0ID0gNztcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuYWRkQXR0ZW50aW9uKG1pZCwgYWN0LCByZV9zcmMpO1xcXFxuICAgICAgICAgICAgcmVsYXRpb24gPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLnVzZXJNYXBwaW5nKG1pZCk7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCdyZWxhdGlvbicsIHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogcmVsYXRpb24sXFxcXG4gICAgICAgICAgICAgICAgaW1nOiByZWxhdGlvbiA9PSAn5pyq5YWz5rOoJyA/IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKS7mt7vliqDlhbPms6ggOiBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyku5bey5YWz5rOoXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIGlmIChyZXMgPT0gMCkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8vXFxcXFxcXCIgKyBpbnB1dCArIFxcXFxcXFwi5oiQ5YqfXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC0xMDEpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+i0puWPt+acqueZu+W9lVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAtMTExKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9jc3Jm5qCh6aqM5aSx6LSlXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IC00MDApIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ivt+axgumUmeivr1xcXFxcXFwiXFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PSAyMjAwMSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5LiN6IO95a+56Ieq5bex6L+b6KGM5q2k5pON5L2cXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzID09IDIyMDAzKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/nlKjmiLfkvY3kuo7pu5HlkI3ljZVcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+acquefpemUmeivr1xcXFxcXFwiXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBtaWQsIHJlX3NyYylcXFxcbn1cXFxcbi8vIOaYoOWwhOeUqOaIt+WFs+ezu1xcXFxuJC5leHBvcnRzLnVzZXJNYXBwaW5nID0gZnVuY3Rpb24gKG1pZCkge1xcXFxuICAgIHJlbGF0aW9uUmVzID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5nZXRSZWxhdGlvbihtaWQpO1xcXFxuICAgIGlmIChyZWxhdGlvblJlcy5yZWxhdGlvbi5hdHRyaWJ1dGUgPT0gMCkge1xcXFxuICAgICAgICByZWxhdGlvbiA9ICfmnKrlhbPms6gnXFxcXG4gICAgfSBlbHNlIGlmIChyZWxhdGlvblJlcy5yZWxhdGlvbi5hdHRyaWJ1dGUgPT0gMSkge1xcXFxuICAgICAgICByZWxhdGlvbiA9ICfmgoTmgoTlhbPms6gnXFxcXG4gICAgfSBlbHNlIGlmIChyZWxhdGlvblJlcy5yZWxhdGlvbi5hdHRyaWJ1dGUgPT0gMikge1xcXFxuICAgICAgICByZWxhdGlvbiA9ICflt7LlhbPms6gnXFxcXG4gICAgfSBlbHNlIGlmIChyZWxhdGlvblJlcy5yZWxhdGlvbi5hdHRyaWJ1dGUgPT0gNikge1xcXFxuICAgICAgICByZWxhdGlvbiA9ICflt7LkupLnsoknXFxcXG4gICAgfSBlbHNlIGlmIChyZWxhdGlvblJlcy5yZWxhdGlvbi5hdHRyaWJ1dGUgPT0gMTI4KSB7XFxcXG4gICAgICAgIHJlbGF0aW9uID0gJ+W3suaLiem7kSdcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHJlbGF0aW9uO1xcXFxufVxcXFxuLy8g54K56LWe5pON5L2c6YC76L6RXFxcXG4kLmV4cG9ydHMubGlrZUxvZ2ljID0gZnVuY3Rpb24gKGFpZCkge1xcXFxuICAgIGhhc0xpa2UgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmhhc0xpa2UoYWlkKTtcXFxcbiAgICBpZiAoaGFzTGlrZSA9PSAwKSB7XFxcXG4gICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuc2V0TGlrZShhaWQsIDEpO1xcXFxuICAgICAgICBpZiAocmVzID09IDApIHtcXFxcbiAgICAgICAgICAgIGxpa2UgPSBKU09OLnBhcnNlKGZldGNoKFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS92aWV3P2FpZD1cXFxcXFxcIiArIGFpZCkpLmRhdGEuc3RhdC5saWtlO1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbSgnc2V0TGlrZScsIHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogKGxpa2UgKyAxKSArICcnLFxcXFxuICAgICAgICAgICAgICAgIGltZzogc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpLuW3sueCuei1nlxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+eCuei1nuaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/ngrnotZ7lh7rplJnkuoZ+XFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICByZXMgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLnNldExpa2UoYWlkLCAyKTtcXFxcbiAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxcXG4gICAgICAgICAgICBsaWtlID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcXFxcXCIgKyBhaWQpKS5kYXRhLnN0YXQubGlrZTtcXFxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oJ3NldExpa2UnLCB7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IChsaWtlIC0gMSkgKyAnJyxcXFxcbiAgICAgICAgICAgICAgICBpbWc6IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKS7mnKrngrnotZ5cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lj5bmtojngrnotZ7miJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Y+W5raI54K56LWe5Ye66ZSZ5LqGflxcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxufVxcXFxuLy8g5pS26JeP5pON5L2c6YC76L6RXFxcXG4kLmV4cG9ydHMuZmF2b3VyTG9naWMgPSBmdW5jdGlvbiAoYWlkLCBtaWQpIHtcXFxcbiAgICBoYXNGYXZvdXIgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmhhc0Zhdm91cihhaWQpO1xcXFxuICAgIGlmIChoYXNGYXZvdXIpIHtcXFxcbiAgICAgICAgLy8g56e75Ye65pS26JePXFxcXG4gICAgICAgIGZhdm91cklkTGlzdCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0RmF2b3VySWRMaXN0KGFpZCwgbWlkKTtcXFxcbiAgICAgICAgcmVzID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5zZXRGYXZvdXIoYWlkLCAnJywgZmF2b3VySWRMaXN0KTtcXFxcbiAgICAgICAgaWYgKHJlcyA9PSAwKSB7XFxcXG4gICAgICAgICAgICBsaWtlID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcXFxcXCIgKyBhaWQpKS5kYXRhLnN0YXQuZmF2b3JpdGU7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCdzZXRGYXZvdXInLCB7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IChsaWtlIC0gMSkgKyAnJyxcXFxcbiAgICAgICAgICAgICAgICBpbWc6IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKS7mnKrmlLbol49cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lj5bmtojmlLbol4/miJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Y+W5raI5pS26JeP5Ye66ZSZ5LqGflxcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgLy8g6YCJ5oup5pS26JePXFxcXG4gICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0Q29sbGVjdGlvbkdyb3VwTGlzdCgpWzBdLm1lZGlhTGlzdFJlc3BvbnNlLmxpc3Q7XFxcXG4gICAgICAgIEdyb3VwTGlzdCA9IFtdO1xcXFxuICAgICAgICByZXMuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgIEdyb3VwTGlzdC5wdXNoKGl0ZW0udGl0bGUgKyAnICcgKyBpdGVtLmlkKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiAkKEdyb3VwTGlzdCwgMSkuc2VsZWN0KChhaWQpID0+IHtcXFxcbiAgICAgICAgICAgIHNlbGVjdElkID0gcGFyc2VJbnQoaW5wdXQuc3BsaXQoJyAnKVsxXSlcXFxcbiAgICAgICAgICAgIHJlcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuc2V0RmF2b3VyKGFpZCwgc2VsZWN0SWQsICcnKTtcXFxcbiAgICAgICAgICAgIGlmIChyZXMgPT0gMCkge1xcXFxuICAgICAgICAgICAgICAgIGxpa2UgPSBKU09OLnBhcnNlKGZldGNoKFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS92aWV3P2FpZD1cXFxcXFxcIiArIGFpZCkpLmRhdGEuc3RhdC5mYXZvcml0ZTtcXFxcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKCdzZXRGYXZvdXInLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAobGlrZSArIDEpICsgJycsXFxcXG4gICAgICAgICAgICAgICAgICAgIGltZzogc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpLuW3suaUtuiXj1xcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pS26JeP5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pS26JeP5Ye66ZSZ5LqGflxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9LCBhaWQpO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuLy8gcGFydDI65pWj6KOFQVBJLS0tLS0tLS0tLS0tLS0tLVxcXFxuLy8g6I635Y+W5pCc57Si57uT5p6cXFxcXG4kLmV4cG9ydHMuZ2V0U2VhcmNoUmVzID0gZnVuY3Rpb24gKHNlYXJjaF90eXBlLCBzZWF3b3JkLCBwYWdlLCBwYWdlU2l6ZSkge1xcXFxuICAgIHF1ZXJ5SnNvbiA9IHtcXFxcbiAgICAgICAgX19yZWZyZXNoX186IHRydWUsXFxcXG4gICAgICAgIF9leHRyYTogJycsXFxcXG4gICAgICAgIGNvbnRleHQ6ICcnLFxcXFxuICAgICAgICBwYWdlOiBwYWdlLFxcXFxuICAgICAgICBwYWdlX3NpemU6IHBhZ2VTaXplLFxcXFxuICAgICAgICBvcmRlcjogJycsXFxcXG4gICAgICAgIGR1cmF0aW9uOiAnJyxcXFxcbiAgICAgICAgZnJvbV9zb3VyY2U6ICcnLFxcXFxuICAgICAgICBmcm9tX3NwbWlkOiAzMzMuMzM3LFxcXFxuICAgICAgICBwbGF0Zm9ybTogJ3BjJyxcXFxcbiAgICAgICAgaGlnaGxpZ2h0OiAxLFxcXFxuICAgICAgICBzaW5nbGVfY29sdW1uOiAwLFxcXFxuICAgICAgICBrZXl3b3JkOiBzZWF3b3JkLFxcXFxuICAgICAgICBzZWFyY2hfdHlwZTogc2VhcmNoX3R5cGUsXFxcXG4gICAgICAgIHByZWxvYWQ6IHRydWUsXFxcXG4gICAgICAgIGNvbTJjbzogdHJ1ZVxcXFxuICAgIH1cXFxcbiAgICBwYXJtcyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0V2JpRW5jKHF1ZXJ5SnNvbik7XFxcXG4gICAgZGF0YUxpbmsgPSAnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS93Ymkvc2VhcmNoL3R5cGU/JyArIHBhcm1zO1xcXFxuICAgIGNvb2tpZSA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZTtcXFxcbiAgICByZXMgPSBKU09OLnBhcnNlKGZldGNoKGRhdGFMaW5rLCB7XFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiVXNlci1BZ2VudFxcXFxcXFwiOiBQQ19VQSxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IGNvb2tpZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBtZXRob2Q6IFxcXFxcXFwiR0VUXFxcXFxcXCJcXFxcbiAgICB9KSkuZGF0YTtcXFxcbiAgICByZXR1cm4gcmVzO1xcXFxufVxcXFxuLy8g6KeG6aKR5o6o6I2QXFxcXG4kLmV4cG9ydHMuZ2V0RmVlZCA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgICBsZXQgdSA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9pbmRleC90b3AvZmVlZC9yY21kXFxcXFxcXCI7XFxcXG4gICAgdmFyIHJlcyA9IEpTT04ucGFyc2UoZmV0Y2godSwge1xcXFxuICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pKTtcXFxcbiAgICByZXR1cm4gcmVzLmRhdGEuaXRlbVxcXFxufVxcXFxuLy8g6I635Y+W5pKt5pS+5Zyw5Z2AXFxcXG4kLmV4cG9ydHMuZ2V0VXJsID0gZnVuY3Rpb24gKGF2aWQsIGNpZCwgcW4pIHtcXFxcbiAgICB2YXIgc2V0dGluZyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpO1xcXFxuICAgIHZhciBDb29raWUgPSBzZXR0aW5nLmJmS2V5ICE9ICcnID8gYmFzZTY0RGVjb2RlKGJhc2U2NERlY29kZShzZXR0aW5nLmJmS2V5KSkgOiBzZXR0aW5nLnVzZXJMaXN0WzBdLmNvb2tpZTtcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBsZXQgdSA9IHJlcXVlc3QoYnVpbGRVcmwoXFxcXFxcXCJodHRwOi8vYXBpLmJpbGliaWxpLmNvbS94L3BsYXllci9wbGF5dXJsXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiYXZpZFxcXFxcXFwiOiBhdmlkLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJjaWRcXFxcXFxcIjogY2lkLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJxblxcXFxcXFwiOiBxbixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiZm52ZXJcXFxcXFxcIjogMCxcXFxcbiAgICAgICAgICAgIC8vIFxcXFxcXFwiZm52YWxcXFxcXFxcIjogNDA0OCxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiZm52YWxcXFxcXFxcIjogMTYsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImZvdXJrXFxcXFxcXCI6IDFcXFxcbiAgICAgICAgfSksIHtcXFxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICBDb29raWU6IENvb2tpZVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KVxcXFxuICAgICAgICByZXMgPSBKU09OLnBhcnNlKHUpO1xcXFxuICAgICAgICBpZiAocmVzLmRhdGEuZGFzaCkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhLmRhc2g7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBsb2coXFxcXFxcXCLmsqHmnInmib7liLBkYXNo5a2X5q61XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnN1cHBvcnRfZm9ybWF0cykge1xcXFxuICAgICAgICAgICAgICAgIGlmICh1LmluY2x1ZGVzKFxcXFxcXFwi6K+V55yLXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IFxcXFxcXFwi5oKo5Yia5omN6KeC55yL55qE6KeG6aKR5piv6K+V55yL6KeG6aKR77yM6KeC55yL5a6M5pW054mH5q616K+35YmN5b6A5a6Y572R6LSt5Lmw77yBXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxvZyhtc2cpO1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25maXJtKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAn5rip6aao5o+Q56S6JywgY29udGVudDogbXNnLCBjb25maXJtOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBjYW5jZWw6ICQudG9TdHJpbmcoKCkgPT4ge30pXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIHJlcy5kYXRhO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgLy8g5LiA5Lq65LmL5LiL56ys5LiA5a2j55qE56ysMe+8jDLpm4bigJTigJTlj6/ku6Xojrflj5blpKfkvJrlkZjliafpm4bnmoTliY0zbWluXFxcXG4gICAgICAgICAgICBsb2coJ+WwneivleabtOaUueivt+axguaOpeWPoy4uLjonICsgZSk7XFxcXG4gICAgICAgICAgICBsZXQgdSA9IHJlcXVlc3QoYnVpbGRVcmwoXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3BsYXllci93ZWIvcGxheXVybFxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJhdmlkXFxcXFxcXCI6IGF2aWQsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJjaWRcXFxcXFxcIjogY2lkLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwicW5cXFxcXFxcIjogcW4sXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJmbnZlclxcXFxcXFwiOiAwLFxcXFxuICAgICAgICAgICAgICAgIC8vIFxcXFxcXFwiZm52YWxcXFxcXFxcIjogNDA0OCxcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcImZudmFsXFxcXFxcXCI6IDE2LFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiZm91cmtcXFxcXFxcIjogMVxcXFxuICAgICAgICAgICAgfSksIHtcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIENvb2tpZTogQ29va2llXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgIC8vIOS7meeOi+eahOaXpeW4uOesrOS4ieWto+esrDEw6ZuG77yM5rKh5pyJZGFzaO+8jOacjeS6hlxcXFxuICAgICAgICAgICAgaWYgKEpTT04ucGFyc2UodSkucmVzdWx0LmRhc2gpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh1KS5yZXN1bHQuZGFzaDtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgbG9nKCflsJ3or5XotbDljZXnur/ot6/nlLvotKh+Jyk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodSkucmVzdWx0O1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xcXFxuICAgICAgICAgICAgbG9nKCdjb29raWXmnInmsqHmnInlj6/og73lpLHmlYjkuoblkaJ+Jyk7XFxcXG4gICAgICAgICAgICByZXR1cm4gJyc7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG59XFxcXG4vLyDmj5DkuqTmkq3mlL7orrDlvZVcXFxcbiQuZXhwb3J0cy5yZXBvcnRQcm9jZXNzID0gZnVuY3Rpb24gKGF2aWQsIGNpZCkge1xcXFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcXFxuICAgIGxldCByZXMgPSBwb3N0KFxcXFxcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9oaXN0b3J5L3JlcG9ydFxcXFxcXFwiLCB7XFxcXG4gICAgICAgIGJvZHk6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiYWlkXFxcXFxcXCI6IGF2aWQsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImNpZFxcXFxcXFwiOiBjaWQsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImNzcmZcXFxcXFxcIjogY3NyZixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwicHJvZ3Jlc3NcXFxcXFxcIjogMFxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICBDb29raWU6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcXFxuICAgICAgICB9XFxcXG4gICAgfSlcXFxcbn1cXFxcblxcXFxuLy8g6I635Y+W6K+E6K66XFxcXG4kLmV4cG9ydHMuZ2V0Q29tbWVudHMgPSBmdW5jdGlvbiAoaWQsIHR5cGUsIHBhZ2UpIHtcXFxcbiAgICBsZXQgdSA9IGJ1aWxkVXJsKFxcXFxcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9yZXBseVxcXFxcXFwiLCB7XFxcXG4gICAgICAgIFxcXFxcXFwidHlwZVxcXFxcXFwiOiB0eXBlLFxcXFxuICAgICAgICBcXFxcXFxcIm9pZFxcXFxcXFwiOiBpZCxcXFxcbiAgICAgICAgXFxcXFxcXCJwblxcXFxcXFwiOiBwYWdlXFxcXG4gICAgfSk7XFxcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QodSwge1xcXFxuICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICBDb29raWU6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcXFxuICAgICAgICB9XFxcXG4gICAgfSlcXFxcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpLmRhdGEucmVwbGllc1xcXFxufVxcXFxuLy8g5re75Yqg56iN5ZCO5Zyo55yL4oCU4oCU55yf55qE6bq75LqG77yM5Li65LuA5LmIZmV0Y2jlsLHplJnlkaJ+XFxcXG4kLmV4cG9ydHMuYWRkVG92aWV3ID0gZnVuY3Rpb24gKGFpZCkge1xcXFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcXFxuICAgIGxldCB1ID0gXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9oaXN0b3J5L3Rvdmlldy9hZGRcXFxcXFxcIjtcXFxcbiAgICBsZXQgcmVzID0gcmVxdWVzdChidWlsZFVybCh1LCB7XFxcXG4gICAgICAgIFxcXFxcXFwiYWlkXFxcXFxcXCI6IGFpZCxcXFxcbiAgICAgICAgXFxcXFxcXCJjc3JmXFxcXFxcXCI6IGNzcmYsXFxcXG4gICAgfSksIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIG1ldGhvZDogXFxcXFxcXCJQT1NUXFxcXFxcXCJcXFxcbiAgICB9KVxcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykuY29kZTtcXFxcbn1cXFxcbi8vIOWIoOmZpOeojeWQjuWcqOeci1xcXFxuJC5leHBvcnRzLmRlbFRvdmlldyA9IGZ1bmN0aW9uIChhaWQpIHtcXFxcbiAgICBsZXQgY3NyZiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUuc3BsaXQoJ2JpbGlfamN0PScpWzFdIDogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKVsxXTtcXFxcbiAgICBsZXQgdSA9IFxcXFxcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9oaXN0b3J5L3Rvdmlldy9kZWxcXFxcXFxcIjtcXFxcbiAgICBsZXQgcmVzID0gcmVxdWVzdChidWlsZFVybCh1LCB7XFxcXG4gICAgICAgIFxcXFxcXFwiYWlkXFxcXFxcXCI6IGFpZCxcXFxcbiAgICAgICAgXFxcXFxcXCJjc3JmXFxcXFxcXCI6IGNzcmYsXFxcXG4gICAgfSksIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIG1ldGhvZDogXFxcXFxcXCJQT1NUXFxcXFxcXCJcXFxcbiAgICB9KVxcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykuY29kZTtcXFxcbn1cXFxcbi8vIOiuoumYheW9seinhijov73nlarjgIHov73liacpXFxcXG4kLmV4cG9ydHMuc3Vic2NyaWJlRmlsbSA9IGZ1bmN0aW9uIChzZWFzb25faWQpIHtcXFxcbiAgICBsZXQgY3NyZiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUuc3BsaXQoJ2JpbGlfamN0PScpWzFdIDogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKVsxXTtcXFxcbiAgICBsZXQgdSA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy93ZWIvZm9sbG93L2FkZFxcXFxcXFwiO1xcXFxuICAgIGxldCByZXMgPSByZXF1ZXN0KGJ1aWxkVXJsKHUsIHtcXFxcbiAgICAgICAgXFxcXFxcXCJzZWFzb25faWRcXFxcXFxcIjogc2Vhc29uX2lkLFxcXFxuICAgICAgICBcXFxcXFxcImNzcmZcXFxcXFxcIjogY3NyZixcXFxcbiAgICB9KSwge1xcXFxuICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgbWV0aG9kOiBcXFxcXFxcIlBPU1RcXFxcXFxcIlxcXFxuICAgIH0pXFxcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5yZXN1bHQudG9hc3Q7XFxcXG59XFxcXG4vLyDlj5bmtojorqLpmIVcXFxcbiQuZXhwb3J0cy5jYW5jZWxTdWJzY3JpYmVGaWxtID0gZnVuY3Rpb24gKHNlYXNvbl9pZCkge1xcXFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcXFxuICAgIGxldCB1ID0gXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3dlYi9mb2xsb3cvZGVsXFxcXFxcXCI7XFxcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QoYnVpbGRVcmwodSwge1xcXFxuICAgICAgICBcXFxcXFxcInNlYXNvbl9pZFxcXFxcXFwiOiBzZWFzb25faWQsXFxcXG4gICAgICAgIFxcXFxcXFwiY3NyZlxcXFxcXFwiOiBjc3JmLFxcXFxuICAgIH0pLCB7XFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBtZXRob2Q6IFxcXFxcXFwiUE9TVFxcXFxcXFwiXFxcXG4gICAgfSlcXFxcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpLnJlc3VsdC50b2FzdDtcXFxcbn1cXFxcbi8q5pON5L2c55So5oi35YWz57O7XFxcXG5maWQ655So5oi3bWlkXFxcXG5hY3Q65pON5L2c5Luj56CBXFxcXG5yZV9zcmPvvJrlhbPms6jmnaXmupBcXFxcbiovXFxcXG4kLmV4cG9ydHMuYWRkQXR0ZW50aW9uID0gZnVuY3Rpb24gKG1pZCwgYWN0LCByZV9zcmMpIHtcXFxcbiAgICBsZXQgY3NyZiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LykgPT09IG51bGwgPyBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUuc3BsaXQoJ2JpbGlfamN0PScpWzFdIDogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKVsxXTtcXFxcbiAgICBsZXQgdSA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcmVsYXRpb24vbW9kaWZ5XFxcXFxcXCI7XFxcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QoYnVpbGRVcmwodSwge1xcXFxuICAgICAgICBcXFxcXFxcImZpZFxcXFxcXFwiOiBtaWQsXFxcXG4gICAgICAgIFxcXFxcXFwiYWN0XFxcXFxcXCI6IGFjdCxcXFxcbiAgICAgICAgXFxcXFxcXCJyZV9zcmNcXFxcXFxcIjogcmVfc3JjLFxcXFxuICAgICAgICBcXFxcXFxcImNzcmZcXFxcXFxcIjogY3NyZlxcXFxuICAgIH0pLCB7XFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBtZXRob2Q6IFxcXFxcXFwiUE9TVFxcXFxcXFwiXFxcXG4gICAgfSlcXFxcbiAgICByZXR1cm4gSlNPTi5wYXJzZShyZXMpLmNvZGU7XFxcXG59XFxcXG4vLyDnp7vliqjlhbPms6jnlKjmiLfliIbnu4RcXFxcbiQuZXhwb3J0cy5tb3ZlVXNlcnMgPSBmdW5jdGlvbiAoYmVmb3JlVGFnaWRzLCBhZnRlclRhZ2lkcywgZmlkcykge1xcXFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcXFxuICAgIGxldCB1ID0gXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9yZWxhdGlvbi90YWdzL21vdmVVc2Vyc1xcXFxcXFwiO1xcXFxuICAgIGxldCByZXMgPSByZXF1ZXN0KGJ1aWxkVXJsKHUsIHtcXFxcbiAgICAgICAgXFxcXFxcXCJiZWZvcmVUYWdpZHNcXFxcXFxcIjogYmVmb3JlVGFnaWRzLnRvU3RyaW5nKCksXFxcXG4gICAgICAgIFxcXFxcXFwiYWZ0ZXJUYWdpZHNcXFxcXFxcIjogYWZ0ZXJUYWdpZHMudG9TdHJpbmcoKSxcXFxcbiAgICAgICAgXFxcXFxcXCJmaWRzXFxcXFxcXCI6IGZpZHMudG9TdHJpbmcoKSxcXFxcbiAgICAgICAgXFxcXFxcXCJjc3JmXFxcXFxcXCI6IGNzcmZcXFxcbiAgICB9KSwge1xcXFxuICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgbWV0aG9kOiBcXFxcXFxcIlBPU1RcXFxcXFxcIlxcXFxuICAgIH0pXFxcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5jb2RlO1xcXFxufVxcXFxuLy8g6I635Y+W55So5oi35YWz57O7XFxcXG4kLmV4cG9ydHMuZ2V0UmVsYXRpb24gPSBmdW5jdGlvbiAobWlkKSB7XFxcXG4gICAgLy8gaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc3BhY2UvYWNjL3JlbGF0aW9uP21pZD0s5pen5o6l5Y+jXFxcXG4gICAgcGFybXMgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmdldFdiaUVuYyh7IG1pZDogbWlkIH0pO1xcXFxuICAgIGluZm9MaW5rID0gJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3NwYWNlL3diaS9hY2MvcmVsYXRpb24/JyArIHBhcm1zO1xcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QoaW5mb0xpbmssIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSkuZGF0YVxcXFxufVxcXFxuLy8g5p+l6K+i55uu5qCH55So5oi35omA5Zyo55qE5YiG57uEXFxcXG4kLmV4cG9ydHMuZ2V0VXNlckdyb3VwID0gZnVuY3Rpb24gKG1pZCkge1xcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9yZWxhdGlvbi90YWcvdXNlcj9maWQ9XFxcXFxcXCIgKyBtaWQsIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSkuZGF0YVxcXFxufVxcXFxuLy8g6I635Y+W5YWz5rOo5YiG57uEXFxcXG4kLmV4cG9ydHMuZ2V0TXlBdHRlbnRpb25Hcm91cExpc3QgPSBmdW5jdGlvbiAoKSB7XFxcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9yZWxhdGlvbi90YWdzP2pzb25wPWpzb25wXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL1xcXFxcXFwiXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSkuZGF0YTtcXFxcbn1cXFxcbi8vIOaYr+WQpueCuei1nlxcXFxuJC5leHBvcnRzLmhhc0xpa2UgPSBmdW5jdGlvbiAoYWlkKSB7XFxcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVxdWVzdChidWlsZFVybChcXFxcXFxcImh0dHA6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9hcmNoaXZlL2hhcy9saWtlXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgXFxcXFxcXCJhaWRcXFxcXFxcIjogYWlkXFxcXG4gICAgfSksIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSkuZGF0YVxcXFxufVxcXFxuLy8g5piv5ZCm5pS26JePXFxcXG4kLmV4cG9ydHMuaGFzRmF2b3VyID0gZnVuY3Rpb24gKGFpZCkge1xcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcXVlc3QoYnVpbGRVcmwoXFxcXFxcXCJodHRwOi8vYXBpLmJpbGliaWxpLmNvbS94L3YyL2Zhdi92aWRlby9mYXZvdXJlZFxcXFxcXFwiLCB7XFxcXG4gICAgICAgIFxcXFxcXFwiYWlkXFxcXFxcXCI6IGFpZFxcXFxuICAgIH0pLCB7XFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZVxcXFxuICAgICAgICB9XFxcXG4gICAgfSkpLmRhdGEuZmF2b3VyZWRcXFxcbn1cXFxcbi8vIOinhumikeeCuei1nlxcXFxuJC5leHBvcnRzLnNldExpa2UgPSBmdW5jdGlvbiAoYWlkLCBkZWFsV2F5KSB7XFxcXG4gICAgbGV0IGNzcmYgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pID09PSBudWxsID8gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLnNwbGl0KCdiaWxpX2pjdD0nKVsxXSA6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LylbMV07XFxcXG4gICAgbGV0IHJlcyA9IHBvc3QoXFxcXFxcXCJodHRwOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2UvYXJjaGl2ZS9saWtlXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgYm9keToge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJhaWRcXFxcXFxcIjogYWlkLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJsaWtlXFxcXFxcXCI6IGRlYWxXYXksXFxcXG4gICAgICAgICAgICBcXFxcXFxcImNzcmZcXFxcXFxcIjogY3NyZlxcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWVcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pXFxcXG4gICAgcmV0dXJuIEpTT04ucGFyc2UocmVzKS5jb2RlO1xcXFxufVxcXFxuLy8g6I635Y+W5pS26JeP5YiX6KGoXFxcXG4kLmV4cG9ydHMuZ2V0Q29sbGVjdGlvbkdyb3VwTGlzdCA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgICByZXR1cm4gY29sbGVjdGlvbnMgPSBKU09OLnBhcnNlKGZldGNoKFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvdjMvZmF2L2ZvbGRlci9saXN0NG5hdmlnYXRlXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLFxcXFxuICAgICAgICB9XFxcXG4gICAgfSkpLmRhdGE7XFxcXG59XFxcXG4vLyDmlLbol48v5Y+W5raI6KeG6aKRQVBJXFxcXG4kLmV4cG9ydHMuc2V0RmF2b3VyID0gZnVuY3Rpb24gKGFpZCwgYWRkX21lZGlhX2lkcywgZGVsX21lZGlhX2lkcykge1xcXFxuICAgIGxldCBjc3JmID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLm1hdGNoKC9iaWxpX2pjdD0oLio/KTsvKSA9PT0gbnVsbCA/IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZS5zcGxpdCgnYmlsaV9qY3Q9JylbMV0gOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUubWF0Y2goL2JpbGlfamN0PSguKj8pOy8pWzFdO1xcXFxuICAgIGxldCByZXMgPSBwb3N0KFxcXFxcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20vbWVkaWFsaXN0L2dhdGV3YXkvY29sbC9yZXNvdXJjZS9kZWFsXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgYm9keToge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJyaWRcXFxcXFxcIjogYWlkLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJ0eXBlXFxcXFxcXCI6IDIsXFxcXG4gICAgICAgICAgICBcXFxcXFxcImFkZF9tZWRpYV9pZHNcXFxcXFxcIjogYWRkX21lZGlhX2lkcy50b1N0cmluZygpLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJkZWxfbWVkaWFfaWRzXFxcXFxcXCI6IGRlbF9tZWRpYV9pZHMudG9TdHJpbmcoKSxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiY3NyZlxcXFxcXFwiOiBjc3JmXFxcXG4gICAgICAgIH0sXFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZSxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbVxcXFxcXFwiXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KVxcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykuY29kZTtcXFxcbn1cXFxcbi8vIOiOt+WPluinhumikeaJgOWcqOaUtuiXj+WkuVxcXFxuJC5leHBvcnRzLmdldEZhdm91cklkTGlzdCA9IGZ1bmN0aW9uIChhaWQsIHVzZXJNaWQpIHtcXFxcbiAgICBsZXQgdSA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvdjMvZmF2L2ZvbGRlci9jcmVhdGVkL2xpc3QtYWxsXFxcXFxcXCI7XFxcXG4gICAgbGV0IHJlcyA9IHJlcXVlc3QoYnVpbGRVcmwodSwge1xcXFxuICAgICAgICBcXFxcXFxcInR5cGVcXFxcXFxcIjogMixcXFxcbiAgICAgICAgXFxcXFxcXCJyaWRcXFxcXFxcIjogYWlkLFxcXFxuICAgICAgICBcXFxcXFxcInVwX21pZFxcXFxcXFwiOiB1c2VyTWlkLFxcXFxuICAgIH0pLCB7XFxcXG4gICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJMaXN0WzBdLmNvb2tpZSxcXFxcbiAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbVxcXFxcXFwiXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbiAgICBmYXZvdXJJZExpc3QgPSBbXTtcXFxcbiAgICBKU09OLnBhcnNlKHJlcykuZGF0YS5saXN0LmZvckVhY2goKGl0ZW0pID0+IHtcXFxcbiAgICAgICAgaWYgKGl0ZW0uZmF2X3N0YXRlID09IDEpIHtcXFxcbiAgICAgICAgICAgIGZhdm91cklkTGlzdC5wdXNoKGl0ZW0uaWQpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSlcXFxcbiAgICByZXR1cm4gZmF2b3VySWRMaXN0O1xcXFxufVxcXFxuLy8g54Ot5pig5Ymn6ZuG5pe26Ze06L20XFxcXG4kLmV4cG9ydHMuZ2V0TW92aWVzID0gZnVuY3Rpb24gKHR5cGUsIGJlZm9yZSwgYWZ0ZXIpIHtcXFxcbiAgICBsZXQgdSA9IGJ1aWxkVXJsKFxcXFxcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3dlYi90aW1lbGluZVxcXFxcXFwiLCB7XFxcXG4gICAgICAgIFxcXFxcXFwidHlwZXNcXFxcXFxcIjogdHlwZSxcXFxcbiAgICAgICAgXFxcXFxcXCJiZWZvcmVcXFxcXFxcIjogYmVmb3JlLFxcXFxuICAgICAgICBcXFxcXFxcImFmdGVyXFxcXFxcXCI6IGFmdGVyXFxcXG4gICAgfSlcXFxcbiAgICBsZXQgcmVzID0gSlNPTi5wYXJzZShyZXF1ZXN0KHUsIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSlcXFxcbiAgICByZXR1cm4gcmVzLnJlc3VsdFxcXFxufVxcXFxuLy8g6I635Y+W5LiT5qCP5paH56ugXFxcXG4kLmV4cG9ydHMuZ2V0VXNlckFydGljbGUgPSBmdW5jdGlvbiAodXBNaWQsIHBhZ2UpIHtcXFxcbiAgICBsZXQgdSA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvc3BhY2UvYXJ0aWNsZVxcXFxcXFwiO1xcXFxuICAgIGxldCByZXMgPSByZXF1ZXN0KGJ1aWxkVXJsKHUsIHtcXFxcbiAgICAgICAgXFxcXFxcXCJtaWRcXFxcXFxcIjogdXBNaWQsXFxcXG4gICAgICAgIFxcXFxcXFwicG5cXFxcXFxcIjogcGFnZSxcXFxcbiAgICAgICAgXFxcXFxcXCJwc1xcXFxcXFwiOiAxMixcXFxcbiAgICAgICAgXFxcXFxcXCJzb3J0XFxcXFxcXCI6ICdwdWJsaXNoX3RpbWUnXFxcXG4gICAgfSksIHtcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llLFxcXFxuICAgICAgICAgICAgXFxcXFxcXCJSZWZlcmVyXFxcXFxcXCI6IFxcXFxcXFwiaHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIHJldHVybiBKU09OLnBhcnNlKHJlcykuZGF0YTtcXFxcbn1cXFxcbi8vIOiOt+WPluWKqOaAgeaVsOaNrlxcXFxuJC5leHBvcnRzLmdldER5bmFtaWNEYXRhID0gZnVuY3Rpb24gKGZyb20sIHVwTWlkKSB7XFxcXG4gICAgdmFyIG5leHRJbmZvID0ge307XFxcXG4gICAgaWYgKE1ZX1BBR0UgPT0gMSkge1xcXFxuICAgICAgICBpZiAoZnJvbSA9PSAndXBTcGFjZScpIHtcXFxcbiAgICAgICAgICAgIHZhciB1ID0gXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9wb2x5bWVyL3dlYi1keW5hbWljL3YxL2ZlZWQvc3BhY2U/b2Zmc2V0PSZob3N0X21pZD1cXFxcXFxcIiArIHVwTWlkICsgXFxcXFxcXCImdGltZXpvbmVfb2Zmc2V0PS00ODBcXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHZhciB1ID0gXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC9wb2x5bWVyL3dlYi1keW5hbWljL3YxL2ZlZWQvYWxsP3RpbWV6b25lX29mZnNldD0tNDgwJnR5cGU9YWxsXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGF0ZW5ld3MgPSBKU09OLnBhcnNlKGZldGNoKHUsIHtcXFxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L2JpbGkudHh0XFxcXFxcXCIpKS51c2VyTGlzdFswXS5jb29raWUsXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJVc2VyLUFnZW50XFxcXFxcXCI6IFBDX1VBLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9cXFxcXFxcIlxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KSkuZGF0YTtcXFxcbiAgICAgICAgbmV4dEluZm8ub2Zmc2V0ID0gbGF0ZW5ld3Mub2Zmc2V0O1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIGlmIChmcm9tID09ICd1cFNwYWNlJykge1xcXFxuICAgICAgICAgICAgdmFyIHUgPSBcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3BvbHltZXIvd2ViLWR5bmFtaWMvdjEvZmVlZC9zcGFjZT9vZmZzZXQ9XFxcXFxcXCIgKyBzdG9yYWdlMC5nZXRNeVZhcihKU09OLnN0cmluZ2lmeShNWV9QQUdFKSkub2Zmc2V0ICsgXFxcXFxcXCImaG9zdF9taWQ9XFxcXFxcXCIgKyB1cE1pZCArIFxcXFxcXFwiJnRpbWV6b25lX29mZnNldD0tNDgwXFxcXFxcXCI7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICB2YXIgdSA9IFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvcG9seW1lci93ZWItZHluYW1pYy92MS9mZWVkL2FsbD90aW1lem9uZV9vZmZzZXQ9LTQ4MCZ0eXBlPWFsbCZvZmZzZXQ9XFxcXFxcXCIgKyBzdG9yYWdlMC5nZXRNeVZhcihKU09OLnN0cmluZ2lmeShNWV9QQUdFKSkub2Zmc2V0O1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxhdGVuZXdzID0gSlNPTi5wYXJzZShmZXRjaCh1LCB7XFxcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlckxpc3RbMF0uY29va2llXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pKS5kYXRhO1xcXFxuICAgICAgICBuZXh0SW5mby5vZmZzZXQgPSBsYXRlbmV3cy5vZmZzZXQ7XFxcXG4gICAgfVxcXFxuICAgIHN0b3JhZ2UwLnB1dE15VmFyKEpTT04uc3RyaW5naWZ5KE1ZX1BBR0UgKyAxKSwgbmV4dEluZm8pO1xcXFxuICAgIHJldHVybiBsYXRlbmV3cztcXFxcbn1cXFxcblxcXFxuLy8g4oCU4oCU54m55Yir55qE6KGM5Li644CB5bel5YW35Ye95pWw4oCU4oCUXFxcXG4vLyDlsZXnpLrliqjmgIHmlbDmja4o6L+U5Zue5Ye95pWw5pa55rOV55qE5Y+v5omn6KGM5a2X56ym5LiyKVxcXFxuJC5leHBvcnRzLnNob3dEeW5hbWljRGF0YSA9IGZ1bmN0aW9uICgpIHtcXFxcbiAgICByZXR1cm4gJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgIGltZ0xpbmsgPSBzdG9yYWdlMC5nZXRNeVZhcign5Zu+5qCHJyk7XFxcXG4gICAgICAgIGxhdGVuZXdzLml0ZW1zLmZvckVhY2gobGlzdCA9PiB7XFxcXG4gICAgICAgICAgICBpZiAobGlzdC50eXBlID09ICdEWU5BTUlDX1RZUEVfQVYnKSB7XFxcXG4gICAgICAgICAgICAgICAgLy8g5oqV56i/6KeG6aKR77yI5b2T5YmN5Y+R5biD77yJ4oiaXFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICc8c21hbGw+PHNtYWxsPjxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5wdWJfdGltZSArICctJyArIGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLnB1Yl9hY3Rpb24gKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvdXBIb21lJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2U6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2VcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgLy8g5LiN5LiA5a6a5pyJ5paH5a2X5ZWKXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAobGlzdC5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MgPT09IG51bGwgPyAnPGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+dXDlpKrmh5LkuobvvIzov57mlofmoYjpg73kuI3mg7PphY0uLi48L2ZvbnQ+JyA6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQpLnJlcGxhY2UoL1xcXFxcXFxcbi9nLCAnPGJyPicpICsgJzxicj48YSBocmVmPVxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlXFxcXFxcXCI+5p+l55yL6K+E6K66PC9hPicsXFxcXG4gICAgICAgICAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZScsXFxcXG4gICAgICAgICAgICAgICAgICAgIC8vIOi/meS4quS4jeiDveeUqGxvbmdfdGV4dFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbGlzdC5iYXNpYy5jb21tZW50X2lkX3N0cixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDFcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLmNvdmVyICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuYXJjaGl2ZS5kZXNjLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgYWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuYXJjaGl2ZS5haWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+55WZ6KiAOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQuY29tbWVudC5jb3VudCArICdcXFxcXFxcXHRcXFxcXFxcXHTliIbkuqs6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5mb3J3YXJkLmNvdW50ICsgJ1xcXFxcXFxcdFxcXFxcXFxcdOWWnOasojonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0Lmxpa2UuY291bnQgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGltZ0xpbmsu5Yqo5oCB6Laz6L+5LFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInXFxcXG4gICAgICAgICAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmVfYmxhbmsnXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxpc3QudHlwZSA9PSAnRFlOQU1JQ19UWVBFX0ZPUldBUkQnKSB7XFxcXG4gICAgICAgICAgICAgICAgLy8g5byV55So77yM5aSa5Ye65LqGb3JpZ+aMh+WQkeS4gOS4qijov4fljrsp5bey5Y+R5biD55qE6KeG6aKRLOWHhuehrueahOivtOaYr+W8leeUqOS5i+WJjeeahOW4luWtkOS4jeS4gOWumuaYr+inhumikeKImlxcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAnPHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IucHViX3RpbWUgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvdXBIb21lJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2U6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2VcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYyA9PT0gbnVsbCA/ICc8Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj51cOWkquaHkuS6hu+8jOi/nuaWh+ahiOmDveS4jeaDs+mFjS4uLjwvZm9udD4nIDogbGlzdC5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCkucmVwbGFjZSgvXFxcXFxcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2VcXFxcXFxcIj7mn6XnnIvor4Torro8L2E+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3QuYmFzaWMuY29tbWVudF9pZF9zdHIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDkuZ/mmK/nuq/mloflrZfvvIzlm6DkuLrlj6rmmK/mloflrZcr5byV55So5pep5bey5oqV56i/55qE6KeG6aKRXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAxN1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgLy8g5byV55So55qE5YaF5a654oCU4oCU5oiq5pat77yI5qC55o2u5LiN5ZCM55qE5byV55So57G75Z6L6L+b6KGM5aSE55CG77yJXFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICc8c21hbGw+PHNtYWxsPuS4i+mdouWGheWuueadpeiHquW8leeUqOeahOW4luWtkCx1cOaYrzo8YSBocmVmPVxcXFxcXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXFxcXFwiPicgKyBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfYXV0aG9yLm5hbWUgKyAnPC9hPjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZDogbGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmFjZTogbGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2F1dGhvci5mYWNlXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIGlmIChsaXN0Lm9yaWcudHlwZSA9PSAnRFlOQU1JQ19UWVBFX0FWJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAvLyDlvJXnlKjop4bpopHor7Tor7RcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLmNvdmVyICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnbW92aWVfMV9sZWZ0X3BpYycsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5tYWpvci5hcmNoaXZlLmRlc2MsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuYXJjaGl2ZS5haWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGlzdC5vcmlnLnR5cGUgPT0gJ0RZTkFNSUNfVFlQRV9XT1JEJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAvLyDlvJXnlKjmloflrZfor7Tor7RcXFxcbiAgICAgICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAobGlzdC5vcmlnLm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYy50ZXh0ID09PSBudWxsID8gJzxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPnVw5aSq5oeS5LqG77yM6L+e5paH5qGI6YO95LiN5oOz6YWNLi4uPC9mb250PicgOiBsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQpLnJlcGxhY2UoL1xcXFxcXFxcbi9nLCAnPGJyPicpICsgJzxicj48YSBocmVmPVxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlXFxcXFxcXCI+5p+l55yL6K+E6K66PC9hPicsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2UnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDor4TorrppZOadpea6kOmDveS4jeS4gOagt1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBsaXN0Lm9yaWcuaWRfc3RyLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOe6r+aWh+Wtl1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDE3XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0Lm9yaWcudHlwZSA9PSAnRFlOQU1JQ19UWVBFX0RSQVcnKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIC8vIOW8leeUqOWbvueJh+ivtOivtFxcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm9yaWcubW9kdWxlcy5tb2R1bGVfZHluYW1pYy5kZXNjLnRleHQgPT09IG51bGwgPyAnPGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+dXDlpKrmh5LkuobvvIzov57mlofmoYjpg73kuI3mg7PphY0uLi48L2ZvbnQ+JyA6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCkucmVwbGFjZSgvXFxcXFxcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2VcXFxcXFxcIj7mn6XnnIvor4Torro8L2E+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2VcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLm1ham9yLmRyYXcuaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogMTFcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxpc3Qub3JpZy5tb2R1bGVzLm1vZHVsZV9keW5hbWljLm1ham9yLmRyYXcuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBpdGVtLnNyYyArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdwaWNfM19zcXVhcmUnLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogaXRlbS5zcmMgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxvZygn5Y+v6IO96L+Y5pyJ5pyq6YCC6YWN55qE6K+06K+057G75Z6LJyk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIC8vIOWIhuWJslxcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICc8c21hbGw+PHNtYWxsPjxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPueVmeiogDonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0LmNvbW1lbnQuY291bnQgKyAnXFxcXFxcXFx0XFxcXFxcXFx05YiG5LqrOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQuZm9yd2FyZC5jb3VudCArICdcXFxcXFxcXHRcXFxcXFxcXHTllpzmrKI6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5saWtlLmNvdW50ICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWKqOaAgei2s+i/uSxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LnR5cGUgPT0gJ0RZTkFNSUNfVFlQRV9XT1JEJykge1xcXFxuICAgICAgICAgICAgICAgIC8vIOe6r+aWh+Wtl1xcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAnPHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IucHViX3RpbWUgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvdXBIb21lJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2U6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2VcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYyA9PT0gbnVsbCA/ICc8Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj51cOWkquaHkuS6hu+8jOi/nuaWh+ahiOmDveS4jeaDs+mFjS4uLjwvZm9udD4nIDogbGlzdC5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCkucmVwbGFjZSgvXFxcXFxcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2VcXFxcXFxcIj7mn6XnnIvor4Torro8L2E+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3QuYmFzaWMuY29tbWVudF9pZF9zdHIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnuq/mloflrZdcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDE3XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGRlc2M6ICc8c21hbGw+PHNtYWxsPjxmb250IGNvbG9yPVxcXFxcXFwiZ3JleVxcXFxcXFwiPueVmeiogDonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0LmNvbW1lbnQuY291bnQgKyAnXFxcXFxcXFx0XFxcXFxcXFx05YiG5LqrOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQuZm9yd2FyZC5jb3VudCArICdcXFxcXFxcXHRcXFxcXFxcXHTllpzmrKI6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5saWtlLmNvdW50ICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuWKqOaAgei2s+i/uSxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9lbXB0eScsXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiAnYXZhdGFyJ1xcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChsaXN0LnR5cGUgPT0gJ0RZTkFNSUNfVFlQRV9EUkFXJykge1xcXFxuICAgICAgICAgICAgICAgIC8vIOWbvueJh+ivtOivtFxcXFxuICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5uYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAnPHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IucHViX3RpbWUgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvdXBIb21lJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm1vZHVsZXMubW9kdWxlX2F1dGhvci5taWQsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC5tb2R1bGVzLm1vZHVsZV9hdXRob3IubmFtZSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2U6IGxpc3QubW9kdWxlcy5tb2R1bGVfYXV0aG9yLmZhY2VcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IChsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMuZGVzYyA9PT0gbnVsbCA/ICc8Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj51cOWkquaHkuS6hu+8jOi/nuaWh+ahiOmDveS4jeaDs+mFjS4uLjwvZm9udD4nIDogbGlzdC5tb2R1bGVzLm1vZHVsZV9keW5hbWljLmRlc2MudGV4dCkucmVwbGFjZSgvXFxcXFxcXFxuL2csICc8YnI+JykgKyAnPGJyPjxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2VcXFxcXFxcIj7mn6XnnIvor4Torro8L2E+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAnaGlrZXI6Ly9wYWdlL0NvbW1lbnRzP3A9ZnlwYWdlJyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGxpc3QuYmFzaWMuY29tbWVudF9pZF9zdHIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnm7jnsL/vvIjlm77niYfliqjmgIHvvIlcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IDExXFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICBsaXN0Lm1vZHVsZXMubW9kdWxlX2R5bmFtaWMubWFqb3IuZHJhdy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiBpdGVtLnNyYyArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3BpY18zX3NxdWFyZScsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IGl0ZW0uc3JjICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+PGZvbnQgY29sb3I9XFxcXFxcXCJncmV5XFxcXFxcXCI+55WZ6KiAOicgKyBsaXN0Lm1vZHVsZXMubW9kdWxlX3N0YXQuY29tbWVudC5jb3VudCArICdcXFxcXFxcXHRcXFxcXFxcXHTliIbkuqs6JyArIGxpc3QubW9kdWxlcy5tb2R1bGVfc3RhdC5mb3J3YXJkLmNvdW50ICsgJ1xcXFxcXFxcdFxcXFxcXFxcdOWWnOasojonICsgbGlzdC5tb2R1bGVzLm1vZHVsZV9zdGF0Lmxpa2UuY291bnQgKyAnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgICAgICAgICBpbWc6IGltZ0xpbmsu5Yqo5oCB6Laz6L+5LFxcXFxuICAgICAgICAgICAgICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6ICdhdmF0YXInXFxcXG4gICAgICAgICAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ2xpbmVfYmxhbmsnXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH0pXFxcXG59XFxcXG4vLyDml7bpl7Tml6XmnJ/ovazmjaLlh73mlbBcXFxcbiQuZXhwb3J0cy50aW1lQ29udmVydCA9IGZ1bmN0aW9uICh0aW1lKSB7XFxcXG4gICAgZnVuY3Rpb24gZm9ybWF0RGF0ZShlLCB0KSB7XFxcXG4gICAgICAgIGUgPSBuZXcgRGF0ZShlICogMTAwMCk7IC8v5pe26Ze05oiz5Li6MTDkvY3pnIAqMTAwMO+8jOaXtumXtOaIs+S4ujEz5L2N55qE6K+d5LiN6ZyA5LmYMTAwMFxcXFxuICAgICAgICByZXR1cm4gdC5yZXBsYWNlKC95eXl5fFlZWVkvLCBlLmdldEZ1bGxZZWFyKCkpXFxcXG4gICAgICAgICAgICAucmVwbGFjZSgveXl8WVkvLCByKGUuZ2V0RnVsbFllYXIoKSAlIDEwMCwgMikpXFxcXG4gICAgICAgICAgICAucmVwbGFjZSgvbW18TU0vLCByKGUuZ2V0TW9udGgoKSArIDEsIDIpKVxcXFxuICAgICAgICAgICAgLnJlcGxhY2UoL218TS9nLCBlLmdldE1vbnRoKCkgKyAxKVxcXFxuICAgICAgICAgICAgLnJlcGxhY2UoL2RkfERELywgcihlLmdldERhdGUoKSwgMikpXFxcXG4gICAgICAgICAgICAucmVwbGFjZSgvZHxEL2csIGUuZ2V0RGF0ZSgpKVxcXFxuICAgICAgICAgICAgLnJlcGxhY2UoL2hofEhILywgcihlLmdldEhvdXJzKCksIDIpKVxcXFxuICAgICAgICAgICAgLnJlcGxhY2UoL2h8SC9nLCBlLmdldEhvdXJzKCkpXFxcXG4gICAgICAgICAgICAucmVwbGFjZSgvaWl8SUkvLCByKGUuZ2V0TWludXRlcygpLCAyKSlcXFxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9pfEkvZywgZS5nZXRNaW51dGVzKCkpXFxcXG4gICAgICAgICAgICAucmVwbGFjZSgvc3N8U1MvLCByKGUuZ2V0U2Vjb25kcygpLCAyKSlcXFxcbiAgICAgICAgICAgIC5yZXBsYWNlKC9zfFMvZywgZS5nZXRTZWNvbmRzKCkpXFxcXG4gICAgICAgICAgICAucmVwbGFjZSgvdy9nLCBlLmdldERheSgpKVxcXFxuICAgICAgICAgICAgLnJlcGxhY2UoL1cvZywgW1xcXFxcXFwi5pelXFxcXFxcXCIsIFxcXFxcXFwi5LiAXFxcXFxcXCIsIFxcXFxcXFwi5LqMXFxcXFxcXCIsIFxcXFxcXFwi5LiJXFxcXFxcXCIsIFxcXFxcXFwi5ZubXFxcXFxcXCIsIFxcXFxcXFwi5LqUXFxcXFxcXCIsIFxcXFxcXFwi5YWtXFxcXFxcXCJdW2UuZ2V0RGF5KCldKVxcXFxuICAgIH1cXFxcblxcXFxuICAgIGZ1bmN0aW9uIHIoZSwgdCkge1xcXFxuICAgICAgICBmb3IgKHZhciByID0gMCwgbiA9IHQgLSAoZSArIFxcXFxcXFwiXFxcXFxcXCIpLmxlbmd0aDsgciA8IG47IHIrKykgZSA9IFxcXFxcXFwiMFxcXFxcXFwiICsgZTtcXFxcbiAgICAgICAgcmV0dXJuIGUgKyBcXFxcXFxcIlxcXFxcXFwiXFxcXG4gICAgfVxcXFxuICAgIHJldHVybiBmb3JtYXREYXRlKHRpbWUsICdZWVlZLU1NLUREIGhoOmlpOnNzJyk7XFxcXG4gICAgLy8gY29uc29sZS5sb2coZm9ybWF0RGF0ZSgxNjY0MDg5NTMyLCAnWVlZWS1NTS1ERCBoaDppaTpzcycpKTtcXFxcbn1cXFxcbi8vIOenkuaVsOWIhumSn+ihqOi+vui9rOaNouWHveaVsFxcXFxuJC5leHBvcnRzLmZvcm1hdFNlY29uZHMgPSBmdW5jdGlvbiAoc2Vjb25kcykge1xcXFxuICAgIGxldCBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApOyAvLyDorqHnrpfliIbpkp/mlbBcXFxcbiAgICBsZXQgcmVtYWluaW5nU2Vjb25kcyA9IHNlY29uZHMgJSA2MDsgLy8g6K6h566X5Ymp5L2Z55qE56eS5pWwXFxcXG4gICAgbGV0IGZvcm1hdHRlZFRpbWUgPSBgJHttaW51dGVzfToke1N0cmluZyhyZW1haW5pbmdTZWNvbmRzKS5wYWRTdGFydCgyLCAnMCcpfWA7XFxcXG4gICAgcmV0dXJuIGZvcm1hdHRlZFRpbWU7XFxcXG59XFxcXG5cXFxcbi8vIELnq5lXYmnnrb7lkI3nrpfms5UoQWZ0ZXIgMjAyMy0zLGdldCByZXF1ZXN0IHdpdGggd2JpLilcXFxcbiQuZXhwb3J0cy5nZXRXYmlFbmMgPSBmdW5jdGlvbiAocXVlcnlKc29uKSB7XFxcXG4gICAgY29uc3QgbWl4aW5LZXlFbmNUYWIgPSBbXFxcXG4gICAgICAgIDQ2LCA0NywgMTgsIDIsIDUzLCA4LCAyMywgMzIsIDE1LCA1MCwgMTAsIDMxLCA1OCwgMywgNDUsIDM1LCAyNywgNDMsIDUsIDQ5LFxcXFxuICAgICAgICAzMywgOSwgNDIsIDE5LCAyOSwgMjgsIDE0LCAzOSwgMTIsIDM4LCA0MSwgMTMsIDM3LCA0OCwgNywgMTYsIDI0LCA1NSwgNDAsXFxcXG4gICAgICAgIDYxLCAyNiwgMTcsIDAsIDEsIDYwLCA1MSwgMzAsIDQsIDIyLCAyNSwgNTQsIDIxLCA1NiwgNTksIDYsIDYzLCA1NywgNjIsIDExLFxcXFxuICAgICAgICAzNiwgMjAsIDM0LCA0NCwgNTJcXFxcbiAgICBdO1xcXFxuXFxcXG4gICAgLy8g5a+5IGltZ0tleSDlkowgc3ViS2V5IOi/m+ihjOWtl+espumhuuW6j+aJk+S5see8lueggVxcXFxuICAgIGZ1bmN0aW9uIGdldE1peGluS2V5KG9yaWcpIHtcXFxcbiAgICAgICAgbGV0IHRlbXAgPSAnJztcXFxcbiAgICAgICAgbWl4aW5LZXlFbmNUYWIuZm9yRWFjaCgobikgPT4ge1xcXFxuICAgICAgICAgICAgdGVtcCArPSBvcmlnW25dXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gdGVtcC5zbGljZSgwLCAzMik7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgLy8g5Li66K+35rGC5Y+C5pWw6L+b6KGMIHdiaSDnrb7lkI1cXFxcbiAgICBmdW5jdGlvbiBlbmNXYmkocGFyYW1zLCBpbWdfa2V5LCBzdWJfa2V5KSB7XFxcXG4gICAgICAgIGNvbnN0IG1peGluX2tleSA9IGdldE1peGluS2V5KGltZ19rZXkgKyBzdWJfa2V5KSxcXFxcbiAgICAgICAgICAgIGN1cnJfdGltZSA9IE1hdGgucm91bmQoRGF0ZS5ub3coKSAvIDEwMDApLFxcXFxuICAgICAgICAgICAgY2hyX2ZpbHRlciA9IC9bISdcXFxcXFxcXChcXFxcXFxcXCkqXS9nXFxcXG4gICAgICAgIGxldCBxdWVyeSA9IFtdO1xcXFxuICAgICAgICBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHBhcmFtcywgeyB3dHM6IGN1cnJfdGltZSB9KTsgICAgLy8g5re75YqgIHd0cyDlrZfmrrVcXFxcbiAgICAgICAgLy8g5oyJ54WnIGtleSDph43mjpLlj4LmlbBcXFxcbiAgICAgICAgT2JqZWN0LmtleXMocGFyYW1zKS5zb3J0KCkuZm9yRWFjaCgoa2V5KSA9PiB7XFxcXG4gICAgICAgICAgICBxdWVyeS5wdXNoKFxcXFxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChrZXkpICtcXFxcbiAgICAgICAgICAgICAgICAnPScgK1xcXFxuICAgICAgICAgICAgICAgIC8vIOi/h+a7pCB2YWx1ZSDkuK3nmoQgXFxcXFxcXCIhJygpKlxcXFxcXFwiIOWtl+esplxcXFxuICAgICAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudCgoJycgKyBwYXJhbXNba2V5XSkucmVwbGFjZShjaHJfZmlsdGVyLCAnJykpXFxcXG4gICAgICAgICAgICApXFxcXG4gICAgICAgIH0pXFxcXG4gICAgICAgIHF1ZXJ5ID0gcXVlcnkuam9pbignJicpO1xcXFxuICAgICAgICBjb25zdCB3Ymlfc2lnbiA9IG1kNShxdWVyeSArIG1peGluX2tleSk7IC8vIOiuoeeulyB3X3JpZFxcXFxuICAgICAgICByZXR1cm4gcXVlcnkgKyAnJndfcmlkPScgKyB3Ymlfc2lnbjtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICAvLyDojrflj5bmnIDmlrDnmoQgaW1nX2tleSDlkowgc3ViX2tleVxcXFxuICAgIGZ1bmN0aW9uIGdldFdiaUtleXMoKSB7XFxcXG4gICAgICAgIGNvbnN0IGpzb25fY29udGVudCA9IEpTT04ucGFyc2UoZmV0Y2goJ2h0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2UvbmF2Jywge1xcXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiVXNlci1BZ2VudFxcXFxcXFwiOiBQQ19VQSxcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcIlJlZmVyZXJcXFxcXFxcIjogXFxcXFxcXCJodHRwczovL3d3dy5iaWxpYmlsaS5jb20vXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBtZXRob2Q6ICdHRVQnXFxcXG4gICAgICAgIH0pKS5kYXRhO1xcXFxuICAgICAgICBpbWdfdXJsID0ganNvbl9jb250ZW50LndiaV9pbWcuaW1nX3VybDtcXFxcbiAgICAgICAgc3ViX3VybCA9IGpzb25fY29udGVudC53YmlfaW1nLnN1Yl91cmw7XFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICBpbWdfa2V5OiBpbWdfdXJsLnN1YnN0cmluZyhpbWdfdXJsLmxhc3RJbmRleE9mKCcvJykgKyAxLCBpbWdfdXJsLmxlbmd0aCkuc3BsaXQoJy4nKVswXSxcXFxcbiAgICAgICAgICAgIHN1Yl9rZXk6IHN1Yl91cmwuc3Vic3RyaW5nKHN1Yl91cmwubGFzdEluZGV4T2YoJy8nKSArIDEsIHN1Yl91cmwubGVuZ3RoKS5zcGxpdCgnLicpWzBdXFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCB3Ymlfa2V5cyA9IGdldFdiaUtleXMoKTtcXFxcblxcXFxuICAgIGNvbnN0IHF1ZXJ5ID0gZW5jV2JpKFxcXFxuICAgICAgICBxdWVyeUpzb24sXFxcXG4gICAgICAgIHdiaV9rZXlzLmltZ19rZXksXFxcXG4gICAgICAgIHdiaV9rZXlzLnN1Yl9rZXlcXFxcbiAgICApO1xcXFxuICAgIHJldHVybiBxdWVyeTtcXFxcbn1cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcInZpZGVvUGFnZVxcXCIsXFxcInBhdGhcXFwiOlxcXCJ2aWRlb1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbnZhciBkID0gW107XFxcXG4vLyDpooTlpITnkIZcXFxcbnB1dE15VmFyKCflip/og73mipjlj6AnLCAn5YWzJyk7XFxcXG5pbWdMaW5rID0gc3RvcmFnZTAuZ2V0TXlWYXIoJ+WbvuaghycpO1xcXFxuYWlkID0gTVlfUEFSQU1TLmFpZCArIFxcXFxcXFwiXFxcXFxcXCI7XFxcXG4vLyBidmlkID0gTVlfUEFSQU1TLmJ2aWQgKyBcXFxcXFxcIlxcXFxcXFwiO1xcXFxubWlkID0gTVlfUEFSQU1TLm1pZCArIFxcXFxcXFwiXFxcXFxcXCI7XFxcXG52YXIge2Zvcm1hdFNlY29uZHN9PSQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIik7XFxcXG50cnkge1xcXFxuICAgIC8v6I635Y+W6KeG6aKR5YiGUOS/oeaBr1xcXFxuICAgIHZhciBwID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2Uvdmlldz9haWQ9XFxcXFxcXCIgKyBhaWQpKS5kYXRhO1xcXFxuICAgIGhhc0xpa2UgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmhhc0xpa2UoYWlkKTtcXFxcbiAgICBoYXNGYXZvdXIgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmhhc0Zhdm91cihhaWQpO1xcXFxuICAgIHNldFBhZ2VUaXRsZShwLnRpdGxlKTtcXFxcbiAgICBzZXRQYWdlUGljVXJsKHAucGljICsgJ0BSZWZlcmVyPScpO1xcXFxuICAgIC8vIOWPquaciTFQ55qE5oOF5Ya1XFxcXG4gICAgaWYgKHAucGFnZXMubGVuZ3RoID09IDEpIHtcXFxcbiAgICAgICAgY2lkID0gcC5wYWdlc1swXS5jaWQ7XFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogcC50aXRsZSxcXFxcbiAgICAgICAgICAgIGltZzogcC5waWMgKyAnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKChhaWQsIGNpZCwgcW4pID0+IHtcXFxcbiAgICAgICAgICAgICAgICAvLyDnnJ/nprvkuobkuKrlpKfosLHvvIzmmI7mmI7mm7/mjaLmjonkuobvvIx1YeWtl+espuS4suWPiOWPmOWbnuadpeS6hu+8jOWPiOimgeWkhOeQhuS4gOasoVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCBxbikucmVwbGFjZSgvOy9nLCBcXFxcXFxcIu+8m++8m1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIH0sIGFpZCArIFxcXFxcXFwiXFxcXFxcXCIsIGNpZCArIFxcXFxcXFwiXFxcXFxcXCIsICcxMTInKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInBpY18xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBkZXNjOifmkq3mlL7ph486JytwLnN0YXQudmlldysnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx05by55bmV5pWwOicrcC5zdGF0LmRhbm1ha3UrJ1xcXFxcXFxcbuWPkeW4g+aXpeacnzonKyQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikudGltZUNvbnZlcnQocC5jdGltZSksXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOidhaWQtJythaWQrJ3xjaWQtJytjaWQsXFxcXG4gICAgICAgICAgICAgICAgbG9uZ0NsaWNrOiBbe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ2Rt55uS5a2QJywganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZyNub0hpc3RvcnkjP3J1bGU9ZG3nm5LlrZAnO1xcXFxuICAgICAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICflvLnluZXmjqfliLYnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKSA9PSAndHJ1ZScpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIbkuI3lj5dkbeebkuWtkOWPguaVsOaOp+WItic7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ3RydWUnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5Y+X5YiwZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KVxcXFxuICAgICAgICAgICAgICAgIH1dXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFxcXFxcImJsdWVcXFxcXFxcIj4nICsgcC5vd25lci5uYW1lICsgJzwvZm9udD4nLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS91cEhvbWVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGltZzogcC5vd25lci5mYWNlICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBtaWQ6IHAub3duZXIubWlkLFxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwLm93bmVyLm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgZmFjZTogcC5vd25lci5mYWNlXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICAvLyDomb3nhLblj6rmnIkxUCzkvYblj6/og73lpITkuo7lkIjpm4bop4bpopHkuK3vvIzlvoDlvoDlnKh1cOS4iuS8oOS4reWxnuS6juS4gOWll+W9seeJh1xcXFxuICAgICAgICBpZiAocC51Z2Nfc2Vhc29uKSB7XFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiAn8J+TgeaJgOWxnuWQiOmbhu+8mjxhIGhyZWY9XFxcXFxcXCJoaWtlcjovL3BhZ2UvY29sbGVjdGlvblZpZWRvXFxcXFxcXCI+JytwLnVnY19zZWFzb24udGl0bGUrJzwvYT4nLFxcXFxuICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvY29sbGVjdGlvblZpZWRvI25vSGlzdG9yeSNcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHsgXFxcXFxcXCJ0ZXh0U2l6ZVxcXFxcXFwiOiAxMiwgYWlkOiBhaWQgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogcC5zdGF0Lmxpa2UsXFxcXG4gICAgICAgICAgICBpbWc6IGhhc0xpa2UgPT0gMSA/IGltZ0xpbmsu5bey54K56LWeIDogaW1nTGluay7mnKrngrnotZ4sXFxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikubGlrZUxvZ2ljKGFpZClcXFxcbiAgICAgICAgICAgIH0sIGFpZCksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uX3NtYWxsXzRcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6ICdzZXRMaWtlJ1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogcC5zdGF0LmZhdm9yaXRlLFxcXFxuICAgICAgICAgICAgaW1nOiBoYXNGYXZvdXIgPyBpbWdMaW5rLuW3suaUtuiXjyA6IGltZ0xpbmsu5pyq5pS26JePLFxcXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGFpZCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHVwTWlkID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9jeS9iaWxpLnR4dFxcXFxcXFwiKSkudXNlck1pZDtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5mYXZvdXJMb2dpYyhhaWQsIHVwTWlkKVxcXFxuICAgICAgICAgICAgfSwgYWlkKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogJ3NldEZhdm91cidcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgdGl0bGU6ICfnqI3lkI7lho3nnIsnLFxcXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLueojeWQjuWGjeeciyxcXFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChhaWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5qdWRnZVRvdmlldyhhaWQpXFxcXG4gICAgICAgICAgICB9LCBhaWQpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCIsXFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn5p+l55yL6K+E6K66JyxcXFxcbiAgICAgICAgICAgIHVybDogJ2hpa2VyOi8vcGFnZS9Db21tZW50cz9wPWZ5cGFnZScsXFxcXG4gICAgICAgICAgICBpbWc6IGltZ0xpbmsu5p+l55yL6K+E6K66LFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogYWlkLFxcXFxuICAgICAgICAgICAgICAgIFxcXFxcXFwidHlwZVxcXFxcXFwiOiAxXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZV9ibGFuaydcXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgdGl0bGU6IHAuZGVzYyxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxvbmdfdGV4dFxcXFxcXFwiLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICAvLyDlrZjlnKjlpJrpm4bliIZQXFxcXG4gICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogcC50aXRsZSxcXFxcbiAgICAgICAgICAgIGltZzogcC5waWMgKyAnQFJlZmVyZXI9JyxcXFxcbiAgICAgICAgICAgIGRlc2M6J+aSreaUvumHjzonK3Auc3RhdC52aWV3KydcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTlvLnluZXmlbA6JytwLnN0YXQuZGFubWFrdSsnXFxcXFxcXFxu5Y+R5biD5pel5pyfOicrJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS50aW1lQ29udmVydChwLmN0aW1lKSxcXFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChwKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoJ2hpa2VyOi8vZW1wdHk/ZnlwYWdlJykucnVsZSgocCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBkID0gW107XFxcXG4gICAgICAgICAgICAgICAgICAgIGQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogcC5kZXNjLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibG9uZ190ZXh0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChkKTtcXFxcbiAgICAgICAgICAgICAgICB9LCBwKVxcXFxuICAgICAgICAgICAgfSwgcCksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJwaWNfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnZG3nm5LlrZAnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2hpa2VyOi8vcGFnZS9zZXR0aW5nI25vSGlzdG9yeSM/cnVsZT1kbeebkuWtkCc7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+W8ueW5leaOp+WIticsIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpID09ICd0cnVlJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oJ2lzT3ZlcnJpZGVTYXZlJywgJ2ZhbHNlJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W8ueW5leWwhuS4jeWPl2Rt55uS5a2Q5Y+C5pWw5o6n5Yi2JztcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAndHJ1ZScpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIblj5fliLBkbeebkuWtkOWPguaVsOaOp+WItic7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgdGl0bGU6ICc8Zm9udCBjb2xvcj1cXFxcXFxcImJsdWVcXFxcXFxcIj4nICsgcC5vd25lci5uYW1lICsgJzwvZm9udD4nLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS91cEhvbWVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGltZzogcC5vd25lci5mYWNlICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImF2YXRhclxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBtaWQ6IHAub3duZXIubWlkLFxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBwLm93bmVyLm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgZmFjZTogcC5vd25lci5mYWNlXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgdGl0bGU6IHAuc3RhdC5saWtlLFxcXFxuICAgICAgICAgICAgaW1nOiBoYXNMaWtlID09IDEgPyBpbWdMaW5rLuW3sueCuei1niA6IGltZ0xpbmsu5pyq54K56LWeLFxcXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGFpZCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmxpa2VMb2dpYyhhaWQpXFxcXG4gICAgICAgICAgICB9LCBhaWQpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiAnc2V0TGlrZSdcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSwge1xcXFxuICAgICAgICAgICAgdGl0bGU6IHAuc3RhdC5mYXZvcml0ZSxcXFxcbiAgICAgICAgICAgIGltZzogaGFzRmF2b3VyID8gaW1nTGluay7lt7LmlLbol48gOiBpbWdMaW5rLuacquaUtuiXjyxcXFxcbiAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChhaWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICB1cE1pZCA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLnVzZXJNaWQ7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZmF2b3VyTG9naWMoYWlkLCB1cE1pZClcXFxcbiAgICAgICAgICAgIH0sIGFpZCksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uX3NtYWxsXzRcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6ICdzZXRGYXZvdXInXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAn56iN5ZCO5YaN55yLJyxcXFxcbiAgICAgICAgICAgIGltZzogaW1nTGluay7nqI3lkI7lho3nnIssXFxcXG4gICAgICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoYWlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuanVkZ2VUb3ZpZXcoYWlkKVxcXFxuICAgICAgICAgICAgfSwgYWlkKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiLFxcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+afpeeci+ivhOiuuicsXFxcXG4gICAgICAgICAgICB1cmw6ICdoaWtlcjovL3BhZ2UvQ29tbWVudHM/cD1meXBhZ2UnLFxcXFxuICAgICAgICAgICAgaW1nOiBpbWdMaW5rLuafpeeci+ivhOiuuixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IGFpZCxcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcInR5cGVcXFxcXFxcIjogMVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KVxcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcXFxuICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogJ+mAiembhuWIl+ihqCcsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzonPHNtYWxsPjxzbWFsbD7lhbEnICsgcC52aWRlb3MgKyAn5p2h6KeG6aKRPC9zbWFsbD48L3NtYWxsPicsXFxcXG4gICAgICAgICAgICBpbWc6IGltZ0xpbmsu5YiX6KGoLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYXZhdGFyXFxcXFxcXCIsXFxcXG4gICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAnbGluZSdcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHAucGFnZXMuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgIGNpZCA9IGl0ZW0uY2lkO1xcXFxuICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS5wYXJ0LFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6Zm9ybWF0U2Vjb25kcyhpdGVtLmR1cmF0aW9uKSxcXFxcbiAgICAgICAgICAgICAgICAvLyBpbWc6aW1nTGluay7liIZQ5YiX6KGo6aG5LFxcXFxuICAgICAgICAgICAgICAgIGltZzppdGVtLmZpcnN0X2ZyYW1lKydAUmVmZXJlcj0nLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgpLmxhenlSdWxlKChhaWQsIGNpZCwgcW4pID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuYmlsaUxhenkoYWlkLCBjaWQsIHFuKS5yZXBsYWNlKC87L2csIFxcXFxcXFwi77yb77ybXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIH0sIGFpZCArIFxcXFxcXFwiXFxcXFxcXCIsIGNpZCArIFxcXFxcXFwiXFxcXFxcXCIsICcxMTYnKSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJhdmF0YXJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYTp7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOidhaWQtJythaWQrJ3xjaWQtJytjaWQsXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9XFxcXG59IGNhdGNoIChlKSB7XFxcXG4gICAgbG9nKGUpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn6aG16Z2i6LWw5Lii5LqGLi4uJyxcXFxcbiAgICAgICAgaW1nOiAnaHR0cHM6Ly9pMC5oZHNsYi5jb20vYmZzL2dlbmVyYWwvZjdiNjY3MDExYTQ2NjE1NzMyYzcwMWY0YmIxZDA3Zjc5M2Y4ZDFkZi5wbmdAUmVmZXJlcj0nLFxcXFxuICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICAgICAgZGVzYzogJ+Wkp+amgueOh+inhumikeiiq+Wwgeemge+8jOaIluiAhXVw5bey6LeR6LevficsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInBpY18xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcbnNldFJlc3VsdChkKTtcXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJsb25nX3RleHRcXFwiLFxcXCJuYW1lXFxcIjpcXFwi6K+E6K66XFxcIixcXFwicGF0aFxcXCI6XFxcIkNvbW1lbnRzXFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGQgPSBbXTtcXFxcbnZhciBpZCA9IE1ZX1BBUkFNUy5pZDtcXFxcbnZhciB0eXBlID0gTVlfUEFSQU1TLnR5cGU7XFxcXG5sb2coaWQpO1xcXFxuaWYgKE1ZX1BBR0UgPT0gMSkge1xcXFxuICAgIC8vIOiyjOS8vOaaguaXtuWPquiDveaWh+WtlyvmlbDlrZdcXFxcbiAgICBkLnVuc2hpZnQoe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLlj5HmnaHor4TorrrlkKdcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkLnRvU3RyaW5nKChpZCx0eXBlKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgY3NyZiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLmNvb2tpZS5tYXRjaCgvYmlsaV9qY3Q9KC4qPyk7LylbMV07XFxcXG4gICAgICAgICAgICBwb3N0KFxcXFxcXFwiaHR0cDovL2FwaS5iaWxpYmlsaS5jb20veC92Mi9yZXBseS9hZGRcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgICAgIGJvZHk6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJ0eXBlXFxcXFxcXCI6IHR5cGUsXFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwib2lkXFxcXFxcXCI6IGlkLFxcXFxuICAgICAgICAgICAgICAgICAgICBcXFxcXFxcImNzcmZcXFxcXFxcIjogY3NyZixcXFxcbiAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJtZXNzYWdlXFxcXFxcXCI6IGlucHV0XFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLmNvb2tpZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpXFxcXG4gICAgICAgIH0sIGlkLHR5cGUpXFxcXG4gICAgfSlcXFxcbn1cXFxcbmxldCBkYXRhID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5nZXRDb21tZW50cyhpZCx0eXBlLE1ZX1BBR0UpO1xcXFxuLy8gbG9nKGRhdGEpO1xcXFxuaWYoZGF0YSl7XFxcXG4gICAgZGF0YS5mb3JFYWNoKGl0ZW0gPT4ge1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0ubWVtYmVyLnVuYW1lLFxcXFxuICAgICAgICAgICAgaW1nOiBpdGVtLm1lbWJlci5hdmF0YXIrJ0BSZWZlcmVyPScsXFxcXG4gICAgICAgICAgICB1cmw6J2hpa2VyOi8vcGFnZS91cEhvbWUnLFxcXFxuICAgICAgICAgICAgZGVzYzonPHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1cXFxcXFxcImdyZXlcXFxcXFxcIj4nK2l0ZW0ucmVwbHlfY29udHJvbC5sb2NhdGlvbiArIFxcXFxcXFwiIFxcXFxcXFwiICsgaXRlbS5yZXBseV9jb250cm9sLnRpbWVfZGVzYysnPC9mb250Pjwvc21hbGw+PC9zbWFsbD4nLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYXZhdGFyXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIG1pZDogaXRlbS5tZW1iZXIubWlkLFxcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLm1lbWJlci51bmFtZSxcXFxcbiAgICAgICAgICAgICAgICBmYWNlOiBpdGVtLm1lbWJlci5hdmF0YXJcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSlcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLmNvbnRlbnQubWVzc2FnZSxcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9KVxcXFxufWVsc2V7XFxcXG4gICAgZC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6ICflpb3lg4/msqHmnInor4TorrrkuobllabvvIzvvIEnLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgfSlcXFxcbn1cXFxcbnNldFJlc3VsdChkKTtcXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuiuoumYheWIl+ihqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJzdWJzY3JpcHRpb25cXFwiLFxcXCJydWxlXFxcIjpcXFwiaWYgKGdldEl0ZW0oJ+iuoumYheexu+WeiycsICcxJykgPT0gJzEnKSB7XFxcXG5cXFxcbsKgIMKgIHR5cGVyTmFtZSA9ICfov73nlaonO1xcXFxuXFxcXG59IGVsc2Uge1xcXFxuXFxcXG7CoCDCoCB0eXBlck5hbWUgPSAn6L+95YmnJztcXFxcblxcXFxufVxcXFxuXFxcXG5kLnB1c2goe1xcXFxuXFxcXG7CoCDCoCB0aXRsZTogJ+i/veeVqicgPT0gdHlwZXJOYW1lID8gJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXFxcXFwicmVkXFxcXFxcXCI+6L+955WqPC9mb250PicgOiAn6L+955WqJyxcXFxcblxcXFxuwqAgwqAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBzZXRJdGVtKCforqLpmIXnsbvlnosnLCAnMScpXFxcXG5cXFxcbsKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuXFxcXG7CoCDCoCDCoCDCoCByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG5cXFxcbsKgIMKgIH0pLFxcXFxuXFxcXG7CoCDCoCBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG5cXFxcbn0se1xcXFxuXFxcXG7CoCDCoCB0aXRsZTogJ+i/veWJpycgPT0gdHlwZXJOYW1lID8gJ+KAmOKAmOKAmeKAmTxmb250IGNvbG9yPVxcXFxcXFwicmVkXFxcXFxcXCI+6L+95YmnPC9mb250PicgOiAn6L+95YmnJyxcXFxcblxcXFxuwqAgwqAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBzZXRJdGVtKCforqLpmIXnsbvlnosnLCAnMicpXFxcXG5cXFxcbsKgIMKgIMKgIMKgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuXFxcXG7CoCDCoCDCoCDCoCByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG5cXFxcbsKgIMKgIH0pLFxcXFxuXFxcXG7CoCDCoCBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nXFxcXG5cXFxcbn0pO1xcXFxuXFxcXG5zdWJzY3JpcHRpb25zID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3NwYWNlL2Jhbmd1bWkvZm9sbG93L2xpc3Q/dHlwZT1cXFxcXFxcIiArIGdldEl0ZW0oJ+iuoumYheexu+WeiycsICcxJykgKyBcXFxcXFxcIiZmb2xsb3dfc3RhdHVzPTAmcG49XFxcXFxcXCIgKyBwYWdlICsgXFxcXFxcXCImcHM9MTUmdm1pZD1cXFxcXFxcIiArIG1pZCwge1xcXFxuXFxcXG7CoCDCoCBoZWFkZXJzOiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IGNvb2tpZVxcXFxuXFxcXG7CoCDCoCB9XFxcXG5cXFxcbn0pKS5kYXRhO1xcXFxuXFxcXG5pZiAocGFnZSA9PSAxKSB7XFxcXG5cXFxcbsKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIHRpdGxlOiBcXFxcXFxcIuW9k+WJjVxcXFxcXFwiICsgdHlwZXJOYW1lICsgXFxcXFxcXCLmlbDph486XFxcXFxcXCIgKyBzdWJzY3JpcHRpb25zLnRvdGFsLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCJcXFxcblxcXFxuwqAgwqAgfSlcXFxcblxcXFxufVxcXFxuXFxcXG5zdWJzY3JpcHRpb25zLmxpc3QuZm9yRWFjaChsaXN0ID0+IHtcXFxcblxcXFxuwqAgwqAgZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3QudGl0bGUsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGltZzogbGlzdC5jb3ZlciArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvZmlsbWVyamkjaW1tZXJzaXZlVGhlbWUjXFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGRlc2M6IGxpc3QuZXZhbHVhdGUuc3Vic3RyaW5nKDAsIDEyKSArICfigJjigJjigJnigJnigKY8Zm9udCBjb2xvcj1cXFxcXFxcIiMxQzFDMUNcXFxcXFxcIj7or6bmg4U8L2ZvbnQ+JyArICdcXFxcXFxcXG4nICsgbGlzdC5zZWFzb25fdHlwZV9uYW1lICsgJ3wnICsgKGxpc3QuYXJlYXM9PT11bmRlZmluZWQ/Jyc6bGlzdC5hcmVhc1swXS5uYW1lICsgJ1xcXFxcXFxcbicpICsgKGxpc3QucHJvZ3Jlc3MgPT0gJycgPyAn5bCa5pyq6KeC55yLJyA6IGxpc3QucHJvZ3Jlc3MpICsgKGxpc3QubmV3X2VwLmluZGV4X3Nob3c9PT11bmRlZmluZWQ/Jyc6J3wnKyhsaXN0Lm5ld19lcC5pbmRleF9zaG93Lm1hdGNoKC/mm7TmlrB85Y2z5bCGLykgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj4nICsgbGlzdC5uZXdfZXAuaW5kZXhfc2hvdyArICc8L2ZvbnQ+JzogbGlzdC5uZXdfZXAuaW5kZXhfc2hvdykpLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogJ21vdmllXzFfdmVydGljYWxfcGljJyxcXFxcblxcXFxuwqAgwqAgwqAgwqAgZXh0cmE6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgc2Vhc29uX2lkOiBsaXN0LnNlYXNvbl9pZFxcXFxuXFxcXG7CoCDCoCDCoCDCoCB9XFxcXG5cXFxcbsKgIMKgIH0pO1xcXFxuXFxcXG59KTtcXFxcblxcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5YWz5rOo5YiX6KGoXFxcIixcXFwicGF0aFxcXCI6XFxcImF0dGVudGlvblxcXCIsXFxcInJ1bGVcXFwiOlxcXCJpZiAoTVlfUEFHRSA9PSAxKSB7XFxcXG5cXFxcbsKgIMKgIGZvY3VzR3JvdXBzPSQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikuZ2V0TXlBdHRlbnRpb25Hcm91cExpc3QoKTtcXFxcblxcXFxuwqAgwqAgcHV0TXlWYXIoJ3RlbXBJZCcsIEpTT04uc3RyaW5naWZ5KGZvY3VzR3JvdXBzWzFdLnRhZ2lkKSk7XFxcXG5cXFxcbsKgIMKgIGZvY3VzR3JvdXBzLmZvckVhY2gobGlzdCA9PiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBsaXN0LnRhZ2lkID09IGdldEl0ZW0oJ+WFs+azqOWIhue7hCcsIEpTT04uc3RyaW5naWZ5KGZvY3VzR3JvdXBzWzFdLmlkKSkgPyBcXFxcXFxcIuKAnOKAnOKAneKAnTxmb250IGNvbG9yPSdyZWQnPlxcXFxcXFwiICsgbGlzdC5uYW1lICsgbGlzdC5jb3VudCArIFxcXFxcXFwiPC9mb250PlxcXFxcXFwiIDogbGlzdC5uYW1lICsgbGlzdC5jb3VudCxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGxpc3QpID0+IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgc2V0SXRlbSgn5YWz5rOo5YiG57uEJywgSlNPTi5zdHJpbmdpZnkobGlzdC50YWdpZCkpO1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCByZWZyZXNoUGFnZSh0cnVlKTtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liIfmjaLlhbPms6jliIbnu4TkuLo6XFxcXFxcXCIgKyBsaXN0Lm5hbWU7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIH0sIGxpc3QpLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBjb2xfdHlwZTogJ3Njcm9sbF9idXR0b24nLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCB9KTtcXFxcblxcXFxuwqAgwqAgfSk7XFxcXG5cXFxcbsKgIMKgIC8vIOacq+WwvuihpeWFheaChOaChOWFs+azqOWIhue7hFxcXFxuXFxcXG7CoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCB0aXRsZTogJ+aChOaChOWFs+azqCcgPT0gZ2V0SXRlbSgn5YWz5rOo5YiG57uEJywgSlNPTi5zdHJpbmdpZnkoZm9jdXNHcm91cHNbMF0uaWQpKSA/IFxcXFxcXFwi4oCc4oCc4oCd4oCdPGZvbnQgY29sb3I9J3JlZCc+5oKE5oKE5YWz5rOoPC9mb250PlxcXFxcXFwiIDogXFxcXFxcXCLmgoTmgoTlhbPms6hcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKCkgPT4ge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBzZXRJdGVtKCflhbPms6jliIbnu4QnLCBcXFxcXFxcIuaChOaChOWFs+azqFxcXFxcXFwiKTtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5YiH5o2i5YWz5rOo5YiG57uE5Li6OlxcXFxcXFwiICsgXFxcXFxcXCLmgoTmgoTlhbPms6hcXFxcXFxcIjtcXFxcblxcXFxuwqAgwqAgwqAgwqAgfSksXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGNvbF90eXBlOiAnc2Nyb2xsX2J1dHRvbicsXFxcXG5cXFxcbsKgIMKgIH0se1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogJ2xpbmUnXFxcXG5cXFxcbsKgIMKgIH0pO1xcXFxuXFxcXG59XFxcXG5cXFxcbmlmIChnZXRJdGVtKCflhbPms6jliIbnu4QnKT09J+aChOaChOWFs+azqCcpIHtcXFxcblxcXFxuwqAgwqAgZ3JvdXBDb250ZW50ID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3JlbGF0aW9uL3doaXNwZXJzP3BuPVxcXFxcXFwiK3BhZ2UrXFxcXFxcXCImcHM9MjAmanNvbnA9anNvbnBcXFxcXFxcIiwge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBoZWFkZXJzOiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIFxcXFxcXFwiQ29va2llXFxcXFxcXCI6IGNvb2tpZVxcXFxuXFxcXG7CoCDCoCDCoCDCoCB9XFxcXG5cXFxcbsKgIMKgIH0pKS5kYXRhLmxpc3Q7XFxcXG5cXFxcbsKgIMKgIGdyb3VwQ29udGVudC5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogXFxcXFxcXCI8YmlnPjxmb250IGNvbG9yPSdibHVlJz5cXFxcXFxcIiArIGxpc3QudW5hbWUgKyBcXFxcXFxcIjwvZm9udD48L2JpZz48c21hbGw+XFxcXFxcXCIgKyBsaXN0LnNpZ24gKyBcXFxcXFxcIjwvc21hbGw+XFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGltZzogbGlzdC5mYWNlICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBtaWQ6IGxpc3QubWlkLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogbGlzdC51bmFtZSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZmFjZTogbGlzdC5mYWNlXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIH1cXFxcblxcXFxuwqAgwqAgwqAgwqAgfSk7XFxcXG5cXFxcbsKgIMKgIH0pO1xcXFxuXFxcXG59ZWxzZXtcXFxcblxcXFxuwqAgwqAgZ3JvdXBDb250ZW50ID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3JlbGF0aW9uL3RhZz9taWQ9XFxcXFxcXCIgKyBtaWQgKyBcXFxcXFxcIiZ0YWdpZD1cXFxcXFxcIiArIGdldEl0ZW0oJ+WFs+azqOWIhue7hCcsIGdldE15VmFyKCd0ZW1wSWQnKSkgKyBcXFxcXFxcIiZwbj1cXFxcXFxcIiArIHBhZ2UgKyBcXFxcXFxcIiZwcz0yMCZqc29ucD1qc29ucFxcXFxcXFwiLCB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGhlYWRlcnM6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogY29va2llXFxcXG5cXFxcbsKgIMKgIMKgIMKgIH1cXFxcblxcXFxuwqAgwqAgfSkpLmRhdGE7XFxcXG5cXFxcbsKgIMKgIGdyb3VwQ29udGVudC5mb3JFYWNoKGxpc3QgPT4ge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogXFxcXFxcXCI8YmlnPjxmb250IGNvbG9yPSdibHVlJz5cXFxcXFxcIiArIGxpc3QudW5hbWUgKyBcXFxcXFxcIjwvZm9udD48L2JpZz48c21hbGw+XFxcXFxcXCIgKyBsaXN0LnNpZ24gKyBcXFxcXFxcIjwvc21hbGw+XFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGltZzogbGlzdC5mYWNlICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdhdmF0YXInLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3VwSG9tZVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBtaWQ6IGxpc3QubWlkLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogbGlzdC51bmFtZSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZmFjZTogbGlzdC5mYWNlXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIH1cXFxcblxcXFxuwqAgwqAgwqAgwqAgfSk7XFxcXG5cXFxcbsKgIMKgIH0pO1xcXFxuXFxcXG59XFxcXG5cXFxcblxcXFxuXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwi5pS26JeP5YiX6KGoXFxcIixcXFwicGF0aFxcXCI6XFxcImNvbGVjdGlvblxcXCIsXFxcInJ1bGVcXFwiOlxcXCJpZiAocGFnZSA9PSAxKSB7XFxcXHJcXFxcbiAgICBkLnB1c2goe1xcXFxyXFxcXG4gICAgICAgIHRpdGxlOiAn5oiR5Yib5bu655qE5pS26JeP5aS5JyA9PSBnZXRJdGVtKCfmlLbol4/nsbvlnosnLCAn5oiR5Yib5bu655qE5pS26JeP5aS5JykgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj7miJHliJvlu7rnmoTmlLbol4/lpLk8L2ZvbnQ+JyA6ICfmiJHliJvlu7rnmoTmlLbol4/lpLknLFxcXFxyXFxcXG4gICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgc2V0SXRlbSgn5pS26JeP57G75Z6LJywgJ+aIkeWIm+W7uueahOaUtuiXj+WkuScpXFxcXHJcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxyXFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgfSksXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcXFxyXFxcXG4gICAgfSwge1xcXFxyXFxcXG4gICAgICAgIHRpdGxlOiAn56iN5ZCO5Zyo55yLJyA9PSBnZXRJdGVtKCfmlLbol4/nsbvlnosnLCAn5oiR5Yib5bu655qE5pS26JeP5aS5JykgPyAn4oCY4oCY4oCZ4oCZPGZvbnQgY29sb3I9XFxcXFxcXCJyZWRcXFxcXFxcIj7nqI3lkI7lnKjnnIs8L2ZvbnQ+JyA6ICfnqI3lkI7lnKjnnIsnLFxcXFxyXFxcXG4gICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKCgpID0+IHtcXFxcclxcXFxuICAgICAgICAgICAgc2V0SXRlbSgn5pS26JeP57G75Z6LJywgJ+eojeWQjuWcqOeciycpXFxcXHJcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxyXFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXHJcXFxcbiAgICAgICAgfSksXFxcXHJcXFxcbiAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJ1xcXFxyXFxcXG4gICAgfSk7XFxcXHJcXFxcbn1cXFxcclxcXFxuaWYgKGdldEl0ZW0oJ+aUtuiXj+exu+WeiycsICfmiJHliJvlu7rnmoTmlLbol4/lpLknKSA9PSAn5oiR5Yib5bu655qE5pS26JeP5aS5Jykge1xcXFxyXFxcXG4gICAgdHJ5IHtcXFxcclxcXFxuICAgICAgICBpZiAocGFnZSA9PSAxKSB7XFxcXHJcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAvLyBjb2xfdHlwZTogJ2JsYW5rX2Jsb2NrJ1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgICAgICB9LCApO1xcXFxyXFxcXG4gICAgICAgIH1cXFxcclxcXFxuICAgICAgICBjb2xsZWN0aW9ucyA9IEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC92My9mYXYvZm9sZGVyL2xpc3Q0bmF2aWdhdGVcXFxcXFxcIiwge1xcXFxyXFxcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBjb29raWVcXFxcclxcXFxuICAgICAgICAgICAgfVxcXFxyXFxcXG4gICAgICAgIH0pKS5kYXRhO1xcXFxyXFxcXG4gICAgICAgIGdyb3VwcyA9IGNvbGxlY3Rpb25zWzBdLm1lZGlhTGlzdFJlc3BvbnNlLmxpc3Q7XFxcXHJcXFxcbiAgICAgICAgcHV0TXlWYXIoJ3RlbXBJZCcsIEpTT04uc3RyaW5naWZ5KGdyb3Vwc1swXS5pZCkpO1xcXFxyXFxcXG4gICAgICAgIGdyb3Vwcy5mb3JFYWNoKGxpc3QgPT4ge1xcXFxyXFxcXG4gICAgICAgICAgICBkLnB1c2goe1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGxpc3QuaWQgPT0gZ2V0SXRlbSgn5pS26JeP5aS5JywgSlNPTi5zdHJpbmdpZnkoZ3JvdXBzWzBdLmlkKSkgPyBcXFxcXFxcIuKAnOKAnOKAneKAnTxmb250IGNvbG9yPSdyZWQnPlxcXFxcXFwiICsgbGlzdC50aXRsZSArIFxcXFxcXFwiPC9mb250PlxcXFxcXFwiIDogbGlzdC50aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIHVybDogJCgnI25vTG9hZGluZyMjbm9IaXN0b3J5IycpLmxhenlSdWxlKChsaXN0KSA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgn5pS26JeP5aS5JywgSlNPTi5zdHJpbmdpZnkobGlzdC5pZCkpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5YiH5o2i5pS26JeP5aS55Li6OlxcXFxcXFwiICsgbGlzdC50aXRsZTtcXFxcclxcXFxuICAgICAgICAgICAgICAgIH0sIGxpc3QpLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6ICdzY3JvbGxfYnV0dG9uJyxcXFxcclxcXFxuICAgICAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgY29sX3R5cGU6ICdsaW5lJ1xcXFxyXFxcXG4gICAgICAgIH0pO1xcXFxyXFxcXG4gICAgICAgIGdyb3VwQ29udGVudCA9IEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC92My9mYXYvcmVzb3VyY2UvbGlzdD9tZWRpYV9pZD1cXFxcXFxcIiArIGdldEl0ZW0oJ+aUtuiXj+WkuScsIGdldE15VmFyKCd0ZW1wSWQnKSkgKyBcXFxcXFxcIiZwbj1cXFxcXFxcIiArIHBhZ2UgKyBcXFxcXFxcIiZwcz0yMCZrZXl3b3JkPSZvcmRlcj1tdGltZSZ0eXBlPTAmdGlkPTAmcGxhdGZvcm09d2ViJmpzb25wPWpzb25wXFxcXFxcXCIsIHtcXFxcclxcXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogY29va2llXFxcXHJcXFxcbiAgICAgICAgICAgIH1cXFxcclxcXFxuICAgICAgICB9KSkuZGF0YS5tZWRpYXM7XFxcXHJcXFxcbiAgICAgICAgZ3JvdXBDb250ZW50LmZvckVhY2gobGlzdCA9PiB7XFxcXHJcXFxcbiAgICAgICAgICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbGlzdC50aXRsZSxcXFxcclxcXFxuICAgICAgICAgICAgICAgIGltZzogbGlzdC5jb3ZlciArIFxcXFxcXFwiQFJlZmVyZXI9XFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS92aWRlb1xcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgZGVzYzogJ1VQOicgKyBsaXN0LnVwcGVyLm5hbWUgKyAnXFxcXFxcXFxuJyArIGxpc3QuaW50cm8sXFxcXHJcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxyXFxcXG4gICAgICAgICAgICAgICAgICAgIGFpZDogbGlzdC5pZCxcXFxcclxcXFxuICAgICAgICAgICAgICAgICAgICBtaWQ6IGxpc3QudXBwZXIubWlkXFxcXHJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgICAgIH0pO1xcXFxyXFxcXG4gICAgICAgIH0pO1xcXFxyXFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxyXFxcXG4gICAgICAgIHNob3dMb2FkaW5nKCflhYTlvJ/vvIzkvaDnoa7orqTkvaDmnInmlLbol4/lkJfvvIzlv6vljrvmlLbol4/kuIDkuKrop4bpopF+Jyk7XFxcXHJcXFxcbiAgICB9XFxcXHJcXFxcbn0gZWxzZSB7XFxcXHJcXFxcbiAgICBsYXRlclZpZXdzID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3YyL2hpc3RvcnkvdG92aWV3L3dlYj9qc29ucD1qc29ucFxcXFxcXFwiLCB7XFxcXHJcXFxcbiAgICAgICAgaGVhZGVyczoge1xcXFxyXFxcXG4gICAgICAgICAgICBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBjb29raWVcXFxcclxcXFxuICAgICAgICB9XFxcXHJcXFxcbiAgICB9KSkuZGF0YTtcXFxcclxcXFxuICAgIGNvdW50ID0gbGF0ZXJWaWV3cy5jb3VudDtcXFxcclxcXFxuICAgIGQucHVzaCh7XFxcXHJcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5YWx5pyJXFxcXFxcXCIgKyBjb3VudCArIFxcXFxcXFwi5p2h5b6F55yL6KeG6aKR6K6w5b2VXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcclxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCJcXFxcclxcXFxuICAgIH0pO1xcXFxyXFxcXG4gICAgbGF0ZXJWaWV3cy5saXN0LmZvckVhY2gobGlzdCA9PiB7XFxcXHJcXFxcbiAgICAgICAgZC5wdXNoKHtcXFxcclxcXFxuICAgICAgICAgICAgdGl0bGU6IGxpc3QudGl0bGUsXFxcXHJcXFxcbiAgICAgICAgICAgIGltZzogbGlzdC5waWMgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxyXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxyXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcXFxcXCIsXFxcXHJcXFxcbiAgICAgICAgICAgIGRlc2M6ICdVUDonICsgbGlzdC5vd25lci5uYW1lICsgJ1xcXFxcXFxcbicgKyBsaXN0LmRlc2MsXFxcXHJcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXHJcXFxcbiAgICAgICAgICAgICAgICBhaWQ6IGxpc3QuYWlkLFxcXFxyXFxcXG4gICAgICAgICAgICAgICAgbWlkOiBsaXN0Lm93bmVyLm1pZFxcXFxyXFxcXG4gICAgICAgICAgICB9XFxcXHJcXFxcbiAgICAgICAgfSk7XFxcXHJcXFxcbiAgICB9KTtcXFxcclxcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIui2s+i/uVxcXCIsXFxcInBhdGhcXFwiOlxcXCJ0cmFja1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJ2YXIgbmV4dEluZm8gPSB7fTtcXFxcblxcXFxuaWYgKHBhZ2UgPT0gMSkge1xcXFxuXFxcXG7CoCDCoCBoaXN0b3JpZXMgPSBKU09OLnBhcnNlKGZldGNoKFxcXFxcXFwiaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3gvd2ViLWludGVyZmFjZS9oaXN0b3J5L2N1cnNvcj9tYXg9MCZ2aWV3X2F0PTAmYnVzaW5lc3M9XFxcXFxcXCIsIHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgaGVhZGVyczoge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBcXFxcXFxcIkNvb2tpZVxcXFxcXFwiOiBjb29raWVcXFxcblxcXFxuwqAgwqAgwqAgwqAgfVxcXFxuXFxcXG7CoCDCoCB9KSkuZGF0YTtcXFxcblxcXFxuwqAgwqAgbmV4dEluZm8ubWF4ID0gaGlzdG9yaWVzLmN1cnNvci5tYXg7XFxcXG5cXFxcbsKgIMKgIG5leHRJbmZvLnZpZXdfYXQgPSBoaXN0b3JpZXMuY3Vyc29yLnZpZXdfYXQ7XFxcXG5cXFxcbsKgIMKgIG5leHRJbmZvLmJ1c2luZXNzID0gaGlzdG9yaWVzLmN1cnNvci5idXNpbmVzcztcXFxcblxcXFxufSBlbHNlIHtcXFxcblxcXFxuwqAgwqAgaGlzdG9yaWVzID0gSlNPTi5wYXJzZShmZXRjaChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2UvaGlzdG9yeS9jdXJzb3I/bWF4PVxcXFxcXFwiICsgc3RvcmFnZTAuZ2V0TXlWYXIoSlNPTi5zdHJpbmdpZnkocGFnZSkpLm1heCArIFxcXFxcXFwiJnZpZXdfYXQ9XFxcXFxcXCIgKyBzdG9yYWdlMC5nZXRNeVZhcihKU09OLnN0cmluZ2lmeShwYWdlKSkudmlld19hdCArIFxcXFxcXFwiJmJ1c2luZXNzPVxcXFxcXFwiICsgc3RvcmFnZTAuZ2V0TXlWYXIoSlNPTi5zdHJpbmdpZnkocGFnZSkpLmJ1c2luZXNzLCB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGhlYWRlcnM6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgXFxcXFxcXCJDb29raWVcXFxcXFxcIjogY29va2llXFxcXG5cXFxcbsKgIMKgIMKgIMKgIH1cXFxcblxcXFxuwqAgwqAgfSkpLmRhdGE7XFxcXG5cXFxcbsKgIMKgIG5leHRJbmZvLm1heCA9IGhpc3Rvcmllcy5jdXJzb3IubWF4O1xcXFxuXFxcXG7CoCDCoCBuZXh0SW5mby52aWV3X2F0ID0gaGlzdG9yaWVzLmN1cnNvci52aWV3X2F0O1xcXFxuXFxcXG7CoCDCoCBuZXh0SW5mby5idXNpbmVzcyA9IGhpc3Rvcmllcy5jdXJzb3IuYnVzaW5lc3M7XFxcXG5cXFxcbn1cXFxcblxcXFxuc3RvcmFnZTAucHV0TXlWYXIoSlNPTi5zdHJpbmdpZnkocGFnZSArIDEpLCBuZXh0SW5mbyk7XFxcXG5cXFxcbmhpc3Rvcmllcy5saXN0LmZvckVhY2gobGlzdCA9PiB7XFxcXG5cXFxcbsKgIMKgIHZpZXdUaW1lPXBidGltZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9hcGlcXFxcXFxcIikudGltZUNvbnZlcnQobGlzdC52aWV3X2F0KTtcXFxcblxcXFxuwqAgwqAgaWYgKGxpc3QuaGlzdG9yeS5idXNpbmVzcyA9PSAnYXJ0aWNsZScpIHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgLy8g5LiT5qCP5paH56ugXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBsaXN0LnNob3dfdGl0bGU9PScnP2xpc3QudGl0bGU6bGlzdC5zaG93X3RpdGxlLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBpbWc6IGxpc3QuY292ZXJzWzBdICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9hcnRpY2xlRGV0YWlsXFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGRlc2M6IChsaXN0LmF1dGhvcl9uYW1lPT0nJz92aWV3VGltZTonVVA6JyArIGxpc3QuYXV0aG9yX25hbWUrJ1xcXFxcXFxcbicgKSsgdmlld1RpbWUsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGV4dHJhOiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGlkOiBsaXN0Lmhpc3Rvcnkub2lkLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB9XFxcXG5cXFxcbsKgIMKgIMKgIMKgIH0pO1xcXFxuXFxcXG7CoCDCoCB9IGVsc2UgaWYobGlzdC5oaXN0b3J5LmJ1c2luZXNzID09ICdhcnRpY2xlLWxpc3QnKXtcXFxcblxcXFxuwqAgwqAgwqAgwqAgLy8g5paH56ug5YiX6KGo77yf77yI5Y+N5q2jaWTlrZjmlL7kvY3nva7kuI3kuIDmoLfvvIlcXFxcblxcXFxuwqAgwqAgwqAgwqAgZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3Quc2hvd190aXRsZT09Jyc/bGlzdC50aXRsZTpsaXN0LnNob3dfdGl0bGUsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGltZzogbGlzdC5jb3ZlcnNbMF0gKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FydGljbGVEZXRhaWxcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgZGVzYzogKGxpc3QuYXV0aG9yX25hbWU9PScnP3ZpZXdUaW1lOidVUDonICsgbGlzdC5hdXRob3JfbmFtZSsnXFxcXFxcXFxuJyApKyB2aWV3VGltZSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgZXh0cmE6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgaWQ6IGxpc3QuaGlzdG9yeS5jaWQsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIH1cXFxcblxcXFxuwqAgwqAgwqAgwqAgfSk7XFxcXG5cXFxcbsKgIMKgIH1lbHNlIGlmKGxpc3QuaGlzdG9yeS5idXNpbmVzcyA9PSAncGdjJyl7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIC8vIOezu+WIl+WJp+mbhu+8iOWNlembhu+8iVxcXFxuXFxcXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogbGlzdC5zaG93X3RpdGxlPT0nJz9saXN0LnRpdGxlOmxpc3Quc2hvd190aXRsZSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgaW1nOiBsaXN0LmNvdmVyICsgXFxcXFxcXCJAUmVmZXJlcj1cXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgY29sX3R5cGU6ICdtb3ZpZV8xX2xlZnRfcGljJyxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9maWxtZXJqaSNpbW1lcnNpdmVUaGVtZSNcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgZGVzYzogKGxpc3QuYXV0aG9yX25hbWU9PScnP2xpc3QudGFnX25hbWUrJ1xcXFxcXFxcdFxcXFxcXFxcdCcrbGlzdC5uZXdfZGVzYysnXFxcXFxcXFxuJyt2aWV3VGltZTonVVA6JyArIGxpc3QuYXV0aG9yX25hbWUrJ1xcXFxcXFxcbicrdmlld1RpbWUpLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBleHRyYToge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBlcF9pZDpsaXN0Lmhpc3RvcnkuZXBpZFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB9XFxcXG5cXFxcbsKgIMKgIMKgIMKgIH0pO1xcXFxuXFxcXG7CoCDCoCB9ZWxzZSB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIC8vIOaZrumAmnZpZGVvXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHRpdGxlOiBsaXN0LnNob3dfdGl0bGU9PScnP2xpc3QudGl0bGU6bGlzdC5zaG93X3RpdGxlLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBpbWc6IGxpc3QuY292ZXIgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGRlc2M6IChsaXN0LmF1dGhvcl9uYW1lPT0nJz9saXN0LnRhZ19uYW1lKydcXFxcXFxcXHRcXFxcXFxcXHQnK2xpc3QubmV3X2Rlc2MrJ1xcXFxcXFxcbicrdmlld1RpbWU6J1VQOicgKyBsaXN0LmF1dGhvcl9uYW1lKydcXFxcXFxcXG4nK3ZpZXdUaW1lKSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgZXh0cmE6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgYWlkOiBsaXN0Lmhpc3Rvcnkub2lkLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB9XFxcXG5cXFxcbsKgIMKgIMKgIMKgIH0pO1xcXFxuXFxcXG7CoCDCoCB9XFxcXG5cXFxcbn0pO1xcXFxuXFxcXG5cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuWKqOaAgVxcXCIsXFxcInBhdGhcXFwiOlxcXCJsYXRldE5ld3NcXFwiLFxcXCJydWxlXFxcIjpcXFwiZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgY29sX3R5cGU6ICdsaW5lX2JsYW5rJ1xcXFxuXFxcXG59KTtcXFxcblxcXFxubGF0ZW5ld3M9JC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5nZXREeW5hbWljRGF0YSgnbXlIb21lJyk7XFxcXG5cXFxcbmV2YWwoJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5zaG93RHluYW1pY0RhdGEoKSk7XFxcXG5cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuS4k+agj+WIl+ihqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJhY3RpY2xlTGlzdFxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcblxcXFxudmFyIGQ9W107XFxcXG5cXFxcbnBhZ2U9TVlfUEFHRTtcXFxcblxcXFxudXBNaWQgPSBNWV9QQVJBTVMubWlkICsgXFxcXFxcXCJcXFxcXFxcIjtcXFxcblxcXFxuYXJ0aWNsZUxpc3Q9JC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FwaVxcXFxcXFwiKS5nZXRVc2VyQXJ0aWNsZSh1cE1pZCxwYWdlKTtcXFxcblxcXFxuYXJ0aWNsZU51bT1hcnRpY2xlTGlzdC5jb3VudDtcXFxcblxcXFxuaWYgKGFydGljbGVOdW09PXVuZGVmaW5lZCkge1xcXFxuXFxcXG7CoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCB0aXRsZTogJ+i/mXVw5rKh5pyJ5LiT5qCP5paH56ugJyxcXFxcblxcXFxuwqAgwqAgwqAgwqAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCB9KTtcXFxcblxcXFxufWVsc2V7XFxcXG5cXFxcbsKgIMKgIG1heFBhZ2UgPSBNYXRoLmNlaWwoYXJ0aWNsZU51bSAvIGFydGljbGVMaXN0LnBzKTtcXFxcblxcXFxuwqAgwqAgaWYgKHBhZ2UgPD0gbWF4UGFnZSkge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBkLnB1c2goe1xcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB0aXRsZTogJ+W9k+WJjTrnrKwnICsgYXJ0aWNsZUxpc3QucG4gKyAn6aG1XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx05YWx5pyJJyArIG1heFBhZ2UgKyAn6aG1LCcgKyBhcnRpY2xlTnVtICsgJ+adoeaVsOaNricsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgfSk7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIGFydGljbGVMaXN0LmFydGljbGVzLmZvckVhY2gobGlzdCA9PiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIHBidGltZT0kLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLnRpbWVDb252ZXJ0KGxpc3QucHVibGlzaF90aW1lKTtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgdGl0bGU6IGxpc3QudGl0bGUsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIMKgIMKgIGltZzogbGlzdC5iYW5uZXJfdXJsPT0nJz8gKGxpc3QuaW1hZ2VfdXJscysgJ0BSZWZlcmVyPScpOihsaXN0LmJhbm5lcl91cmwrICdAUmVmZXJlcj0nKSxcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZGVzYzogJ+KAmOKAmOKAmeKAmTxzbWFsbD4nK2xpc3Quc3RhdHMudmlldysn55yL6L+HXFxcXFxcXFx0XFxcXFxcXFx0JytsaXN0LnN0YXRzLmxpa2UrJ+WWnOasolxcXFxcXFxcdFxcXFxcXFxcdCcrbGlzdC5zdGF0cy5mYXZvcml0ZSsn5pS26JePXFxcXFxcXFxuJyArIHBidGltZSsnPC9zbWFsbD4nLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCBjb2xfdHlwZTogJ21vdmllXzFfbGVmdF9waWMnLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2FydGljbGVEZXRhaWxcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgZXh0cmE6IHtcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgLy8g5LiT5qCP5paH56ugaWRcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgaWQ6IGxpc3QuaWRcXFxcblxcXFxuwqAgwqAgwqAgwqAgwqAgwqAgwqAgwqAgfVxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCB9KTtcXFxcblxcXFxuwqAgwqAgwqAgwqAgfSk7XFxcXG5cXFxcbsKgIMKgIH1cXFxcblxcXFxufVxcXFxuXFxcXG5zZXRSZXN1bHQoZCk7XFxcXG5cXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuS4k+agj+aWh+eroFg1XFxcIixcXFwicGF0aFxcXCI6XFxcImFydGljbGVEZXRhaWxcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5cXFxcbnZhciBkID0gW107XFxcXG5cXFxcbnBhZ2UgPSBNWV9QQUdFO1xcXFxuXFxcXG5jdmlkID0gTVlfUEFSQU1TLmlkICsgXFxcXFxcXCJcXFxcXFxcIjtcXFxcblxcXFxuZC5wdXNoKHtcXFxcblxcXFxuwqAgwqAgdXJsOiBcXFxcXFxcImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS9yZWFkL2N2XFxcXFxcXCIrY3ZpZCxcXFxcblxcXFxuwqAgwqAgY29sX3R5cGU6IFxcXFxcXFwieDVfd2Vidmlld19zaW5nbGVcXFxcXFxcIixcXFxcblxcXFxuwqAgwqAgZGVzYzogXFxcXFxcXCIxMDAlJiZmbG9hdFxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCBleHRyYToge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBjYW5CYWNrOiB0cnVlXFxcXG5cXFxcbsKgIMKgIH1cXFxcblxcXFxufSlcXFxcblxcXFxuc2V0UmVzdWx0KGQpO1xcXFxuXFxcXG5cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCLnu7zlkIjng63pl6hcXFwiLFxcXCJwYXRoXFxcIjpcXFwiaG90VmlkZW9cXFwiLFxcXCJydWxlXFxcIjpcXFwibGV0IHJlcyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImh0dHBzOi8vYXBpLmJpbGliaWxpLmNvbS94L3dlYi1pbnRlcmZhY2UvcG9wdWxhcj9wbj1cXFxcXFxcIiArIE1ZX1BBR0UsIHtcXFxcblxcXFxuwqAgwqAgaGVhZGVyczoge1xcXFxuXFxcXG7CoCDCoCDCoCDCoCBDb29raWU6IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaS50eHRcXFxcXFxcIikpLmNvb2tpZVxcXFxuXFxcXG7CoCDCoCB9XFxcXG5cXFxcbn0pKS5kYXRhXFxcXG5cXFxcbnJlcy5saXN0LmZvckVhY2goaXRlbSA9PiB7XFxcXG5cXFxcbsKgIMKgIGQucHVzaCh7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIHRpdGxlOiBpdGVtLnRpdGxlLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCBpbWc6IGl0ZW0ucGljKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3ZpZGVvXFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGRlc2M6IGl0ZW0ucHViX2xvY2F0aW9uLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCBjb2xfdHlwZTogXFxcXFxcXCJtb3ZpZV8yXFxcXFxcXCIsXFxcXG5cXFxcbsKgIMKgIMKgIMKgIGV4dHJhOiB7XFxcXG5cXFxcbsKgIMKgIMKgIMKgIMKgIMKgIFxcXFxcXFwiYWlkXFxcXFxcXCI6IGl0ZW0uYWlkLFxcXFxuXFxcXG7CoCDCoCDCoCDCoCDCoCDCoCBcXFxcXFxcImNpZFxcXFxcXFwiOiBpdGVtLmNpZCxcXFxcblxcXFxuwqAgwqAgwqAgwqAgfVxcXFxuXFxcXG7CoCDCoCB9KVxcXFxuXFxcXG59KVxcXFxuXFxcXG5cXFxcblxcXCJ9LHtcXFwibmFtZVxcXCI6XFxcIuWTlOWTqeacgOaWsOeroOiKglxcXCIsXFxcInBhdGhcXFwiOlxcXCJnZXRVcGRhdGVcXFwiLFxcXCJydWxlXFxcIjpcXFwiaWYgKE1ZX1BBUkFNUy5zZWFzb25faWQpIHtcXFxcbiAgICBzZWFzb25faWQgPSBNWV9QQVJBTVMuc2Vhc29uX2lkICsgXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICBEYXRhID0gSlNPTi5wYXJzZShmZXRjaCgnaHR0cHM6Ly9hcGkuYmlsaWJpbGkuY29tL3BnYy92aWV3L3dlYi9zZWFzb24/c2Vhc29uX2lkPScgKyBzZWFzb25faWQpKS5yZXN1bHQ7XFxcXG59IGVsc2Uge1xcXFxuICAgIERhdGEgPSBKU09OLnBhcnNlKGZldGNoKCdodHRwczovL2FwaS5iaWxpYmlsaS5jb20vcGdjL3ZpZXcvd2ViL3NlYXNvbj9lcF9pZD0nICsgTVlfUEFSQU1TLmVwX2lkKSkucmVzdWx0O1xcXFxufVxcXFxu6L+95Ymn5pel5Y6GID0gRGF0YS5uZXdfZXAuZGVzYztcXFxcbuabtOaWsOi/m+W6piA9IERhdGEubmV3X2VwLnRpdGxlO1xcXFxu5pu05paw54q25oCBID0g6L+95Ymn5pel5Y6GLm1hdGNoKC/lroznu5N85pyf5b6FLykgPyDov73liafml6XljoYgOiAn5pu05paw6IezJyArICjmm7TmlrDov5vluqYubWF0Y2goL1tcXFxcXFxcXHU0ZTAwLVxcXFxcXFxcdTlmYTVdLykgPyDmm7TmlrDov5vluqYgOiAoJ+esrCcgKyAo5pu05paw6L+b5bqmID09ICcnID8gMCA6IOabtOaWsOi/m+W6pikpICsgJ+ivnScpXFxcXG5zZXRSZXN1bHQo5pu05paw54q25oCBKTtcXFwifSx7XFxcIm5hbWVcXFwiOlxcXCJ1cOWQiOmbhuinhumikVxcXCIsXFxcInBhdGhcXFwiOlxcXCJjb2xsZWN0aW9uVmllZG9cXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG52YXIgZCA9IFtdO1xcXFxuLy8g6aKE5aSE55CGXFxcXG5wdXRNeVZhcign5Yqf6IO95oqY5Y+gJywgJ+WFsycpO1xcXFxuaW1nTGluayA9IHN0b3JhZ2UwLmdldE15VmFyKCflm77moIcnKTtcXFxcbmFpZCA9IE1ZX1BBUkFNUy5haWQgKyBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuLy8gYnZpZCA9IE1ZX1BBUkFNUy5idmlkICsgXFxcXFxcXCJcXFxcXFxcIjtcXFxcbi8vIG1pZCA9IE1ZX1BBUkFNUy5taWQgKyBcXFxcXFxcIlxcXFxcXFwiO1xcXFxudHJ5IHtcXFxcbiAgICAvL+iOt+WPluinhumikeWIhlDkv6Hmga9cXFxcbiAgICB2YXIgcCA9IEpTT04ucGFyc2UoZmV0Y2goXFxcXFxcXCJodHRwczovL2FwaS5iaWxpYmlsaS5jb20veC93ZWItaW50ZXJmYWNlL3ZpZXc/YWlkPVxcXFxcXFwiICsgYWlkKSkuZGF0YTtcXFxcbiAgICAvLyDlkIjpm4bkv6Hmga9cXFxcbiAgICB2YXIgdmlkZW9EYXRhID0gcC51Z2Nfc2Vhc29uO1xcXFxuICAgIHNldFBhZ2VUaXRsZSh2aWRlb0RhdGEudGl0bGUpO1xcXFxuICAgIHNldFBhZ2VQaWNVcmwodmlkZW9EYXRhLmNvdmVyICsgJ0BSZWZlcmVyPScpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiB2aWRlb0RhdGEudGl0bGUsXFxcXG4gICAgICAgIGRlc2M6dmlkZW9EYXRhLmludHJvLFxcXFxuICAgICAgICBpbWc6IHZpZGVvRGF0YS5jb3ZlciArICdAUmVmZXJlcj0nLFxcXFxuICAgICAgICB1cmw6ICQoJyNub0xvYWRpbmcjI25vSGlzdG9yeSMnKS5sYXp5UnVsZSgoaW50cm8pID0+IHtcXFxcbiAgICAgICAgICAgIHJldHVybiAkKCdoaWtlcjovL2VtcHR5P2Z5cGFnZScpLnJ1bGUoKGludHJvKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGQgPSBbXTtcXFxcbiAgICAgICAgICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogaW50cm8sXFxcXG4gICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxvbmdfdGV4dFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgc2V0UmVzdWx0KGQpO1xcXFxuICAgICAgICAgICAgfSwgaW50cm8pXFxcXG4gICAgICAgIH0sIHZpZGVvRGF0YS5pbnRybyksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInBpY18xXFxcXFxcXCIsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdkbeebkuWtkCcsIGpzOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWtlcjovL3BhZ2Uvc2V0dGluZyNub0hpc3RvcnkjP3J1bGU9ZG3nm5LlrZAnO1xcXFxuICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6ICflvLnluZXmjqfliLYnLCBqczogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChnZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICdmYWxzZScpID09ICd0cnVlJykge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0SXRlbSgnaXNPdmVycmlkZVNhdmUnLCAnZmFsc2UnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lvLnluZXlsIbkuI3lj5dkbeebkuWtkOWPguaVsOaOp+WItic7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKCdpc092ZXJyaWRlU2F2ZScsICd0cnVlJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RvYXN0Oi8v5by55bmV5bCG5Y+X5YiwZG3nm5LlrZDlj4LmlbDmjqfliLYnO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgIH1dXFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCB7XFxcXG4gICAgICAgIHRpdGxlOiAnPGZvbnQgY29sb3I9XFxcXFxcXCJibHVlXFxcXFxcXCI+JyArIHAub3duZXIubmFtZSArICc8L2ZvbnQ+JyxcXFxcbiAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS91cEhvbWVcXFxcXFxcIixcXFxcbiAgICAgICAgaW1nOiBwLm93bmVyLmZhY2UgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJhdmF0YXJcXFxcXFxcIixcXFxcbiAgICAgICAgZGVzYzogJzxzbWFsbD48c21hbGw+5YWx5pyJJyArIHZpZGVvRGF0YS5lcF9jb3VudCArICfmnaHop4bpopHmlbDmja48L3NtYWxsPjwvc21hbGw+JyxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIG1pZDogcC5vd25lci5taWQsXFxcXG4gICAgICAgICAgICB0aXRsZTogcC5vd25lci5uYW1lLFxcXFxuICAgICAgICAgICAgZmFjZTogcC5vd25lci5mYWNlXFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCB7XFxcXG4gICAgICAgIGNvbF90eXBlOiAnbGluZSdcXFxcbiAgICB9KTtcXFxcbiAgICB2YXIgaW5kZXggPSAxO1xcXFxuICAgIHN0b3JhZ2UwLnB1dFZhcigndmlkZW9TZWN0aW9ucycsIHZpZGVvRGF0YS5zZWN0aW9ucyk7XFxcXG4gICAgdmlkZW9EYXRhLnNlY3Rpb25zLmZvckVhY2goZWwgPT4ge1xcXFxuICAgICAgICBkLnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6ICfwn5OBJyArIGVsLnRpdGxlLFxcXFxuICAgICAgICAgICAgdXJsOiAkKCcjbm9Mb2FkaW5nIyNub0hpc3RvcnkjJykubGF6eVJ1bGUoKGluZGV4KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGdldE15VmFyKCdpc0ZvbGRfJytpbmRleCwgJ3knKSA9PSAneScpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ2lzRm9sZF8nK2luZGV4LCAnbicpO1xcXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVJdGVtQnlDbHMoJ3NlY3Rpb24nICsgaW5kZXggKyAnLXBhcnQnKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd0b2FzdDovL+W3suaKmOWPoCc7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoJ2lzRm9sZF8nK2luZGV4LCAneScpO1xcXFxuICAgICAgICAgICAgICAgICAgICB2aWRlb1NlY3Rpb25zID0gc3RvcmFnZTAuZ2V0VmFyKCd2aWRlb1NlY3Rpb25zJyk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb25QYXJ0TGlzdCA9IFtdO1xcXFxuICAgICAgICAgICAgICAgICAgICB2aWRlb1NlY3Rpb25zW2luZGV4IC0gMV0uZXBpc29kZXMuZm9yRWFjaChpdGVtID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFpZCA9IGl0ZW0uYWlkO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lkID0gaXRlbS5jaWQ7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ID0gaXRlbS5hcmMuc3RhdDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25QYXJ0TGlzdC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnVxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdDxzbWFsbD48L2ZvbnQ+4pa277iOJyArIGl0ZW0udGl0bGUgKyAnXFxcXFxcXFxuXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0PC9mb250Pjwvc21hbGw+PHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1ncmF5PuaSreaUvumHj++8micgKyBzdGF0LnZpZXcgKyAnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx05by55bmV77yaJyArIHN0YXQuZGFubWFrdSArICdcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTllpzmrKLvvJonICsgc3RhdC5saWtlICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6ICQoKS5sYXp5UnVsZSgoYWlkLCBjaWQsIHFuKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCBxbikucmVwbGFjZSgvOy9nLCBcXFxcXFxcIu+8m++8m1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBhaWQgKyBcXFxcXFxcIlxcXFxcXFwiLCBjaWQgKyBcXFxcXFxcIlxcXFxcXFwiLCAnMTE2JyksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHsgbGluZVZpc2libGU6IGZhbHNlLCBjbHM6ICdzZWN0aW9uJyArIGluZGV4ICsgJy1wYXJ0JyxpZDonYWlkLScrYWlkKyd8Y2lkLScrY2lkIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICBhZGRJdGVtQWZ0ZXIoJ1NlY3Rpb24nICsgaW5kZXgsIHNlY3Rpb25QYXJ0TGlzdCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAndG9hc3Q6Ly/lt7LlsZXlvIAnO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0sIGluZGV4KSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiAndGV4dF8xJyxcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7IGlkOiAnU2VjdGlvbicgKyBpbmRleCB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBlbC5lcGlzb2Rlcy5mb3JFYWNoKGl0ZW0gPT4ge1xcXFxuICAgICAgICAgICAgYWlkID0gaXRlbS5haWQ7XFxcXG4gICAgICAgICAgICBjaWQgPSBpdGVtLmNpZDtcXFxcbiAgICAgICAgICAgIHN0YXQgPSBpdGVtLmFyYy5zdGF0O1xcXFxuICAgICAgICAgICAgZC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ+KAnOKAnOKAneKAnVxcXFxcXFxcdFxcXFxcXFxcdFxcXFxcXFxcdDxzbWFsbD48L2ZvbnQ+4pa277iOJyArIGl0ZW0udGl0bGUgKyAnXFxcXFxcXFxuXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx0PC9mb250Pjwvc21hbGw+PHNtYWxsPjxzbWFsbD48Zm9udCBjb2xvcj1ncmF5PuaSreaUvumHj++8micgKyBzdGF0LnZpZXcgKyAnXFxcXFxcXFx0XFxcXFxcXFx0XFxcXFxcXFx05by55bmV77yaJyArIHN0YXQuZGFubWFrdSArICdcXFxcXFxcXHRcXFxcXFxcXHRcXFxcXFxcXHTllpzmrKLvvJonICsgc3RhdC5saWtlICsgJzwvZm9udD48L3NtYWxsPjwvc21hbGw+JyxcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoKS5sYXp5UnVsZSgoYWlkLCBjaWQsIHFuKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvYXBpXFxcXFxcXCIpLmJpbGlMYXp5KGFpZCwgY2lkLCBxbikucmVwbGFjZSgvOy9nLCBcXFxcXFxcIu+8m++8m1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICB9LCBhaWQgKyBcXFxcXFxcIlxcXFxcXFwiLCBjaWQgKyBcXFxcXFxcIlxcXFxcXFwiLCAnMTE2JyksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHsgbGluZVZpc2libGU6IGZhbHNlLCBjbHM6ICdzZWN0aW9uJyArIGluZGV4ICsgJy1wYXJ0JyxpZDonYWlkLScrYWlkKyd8Y2lkLScrY2lkIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBpbmRleCsrO1xcXFxuICAgIH0pXFxcXG59IGNhdGNoIChlKSB7XFxcXG4gICAgbG9nKGUpO1xcXFxuICAgIGQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAn6aG16Z2i6LWw5Lii5LqGLi4uJyxcXFxcbiAgICAgICAgaW1nOiAnaHR0cHM6Ly9pMC5oZHNsYi5jb20vYmZzL2dlbmVyYWwvZjdiNjY3MDExYTQ2NjE1NzMyYzcwMWY0YmIxZDA3Zjc5M2Y4ZDFkZi5wbmdAUmVmZXJlcj0nLFxcXFxuICAgICAgICB1cmw6ICdoaWtlcjovL2VtcHR5JyxcXFxcbiAgICAgICAgZGVzYzogJ+Wkp+amgueOh+inhumikeiiq+Wwgeemge+8jOaIluiAhXVw5bey6LeR6LevficsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInBpY18xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcbnNldFJlc3VsdChkKTtcXFxcblxcXCJ9LHtcXFwibmFtZVxcXCI6XFxcIuWbvuagh+S4i+i9vVxcXCIsXFxcInBhdGhcXFwiOlxcXCJzYXZlTG9jYWxcXFwiLFxcXCJydWxlXFxcIjpcXFwiJC5leHBvcnRzLnNhdmVMb2NhbCA9ICgpID0+IHtcXFxcbiAgICBjb25zdCBiYXNlNjRUb0hleCA9IChiYXNlNjRTdHIpID0+IHtcXFxcbiAgICAgICAgLy8g5Yig6Zmk5YmN57yA5bm26Kej56CBQmFzZTY05a2X56ym5LiyXFxcXG4gICAgICAgIHZhciBiaW5hcnlTdHIgPSB3aW5kb3cwLmF0b2IoYmFzZTY0U3RyLnNwbGl0KCcsJylbMV0pO1xcXFxuXFxcXG4gICAgICAgIC8vIOi9rOaNouS4ujE26L+b5Yi25a2X56ym5LiyXFxcXG4gICAgICAgIHZhciBoZXhTdHIgPSAnJztcXFxcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaW5hcnlTdHIubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgIHZhciBoZXggPSBiaW5hcnlTdHIuY2hhckNvZGVBdChpKS50b1N0cmluZygxNik7XFxcXG4gICAgICAgICAgICBoZXhTdHIgKz0gKGhleC5sZW5ndGggPT09IDIgPyBoZXggOiAnMCcgKyBoZXgpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBoZXhTdHI7XFxcXG4gICAgfTtcXFxcbiAgICBzaG93TG9hZGluZyhcXFxcXFxcIuWbvuagh+WIneWni+WMluS4rS4uLlxcXFxcXFwiKTtcXFxcbiAgICB2YXIgdHViaWFvID0ge307XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgLy8g5Ymq6LS05p2/57q/6LevXFxcXG4gICAgICAgIGh0bWwgPSByZXF1ZXN0KCdodHRwczovL25ldGN1dC5jbi9wL2ExZmNmMGQzYjBhMjdmMTMnKTtcXFxcbiAgICAgICAgZGF0YSA9IGh0bWwubWF0Y2goL3suKm5vdGVfY29udGVudC4qdXBkYXRlZF9hdC4qfS8pWzBdO1xcXFxuICAgICAgICBldmFsKCd0dWJpYW8gPScgKyBKU09OLnBhcnNlKGRhdGEpLm5vdGVfY29udGVudCk7XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBsb2coJ+WJqui0tOadv+WHuumUmSzliIfmjaLmiZjnrqHnur/ot68nKTtcXFxcbiAgICAgICAgcm91dGUgPSBbXFxcXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRjb2RlLm5ldC9xcV8yMzg0NzgxOS9oaWtlci8tL3Jhdy9tYXN0ZXIvdHViaWFvLmpzb24nLFxcXFxuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0ZWEuY29tL2N5L2hpa2VyL3Jhdy9jb21taXQvYmUyMTYwYzZhMDFkYjg3M2Q5Zjk2ODFiYTdlODZlZWJmYTExOGQ4Ni90dWJpYW8uanNvbicsXFxcXG4gICAgICAgICAgICAnaHR0cHM6Ly9yYXcuY29kZWh1Yi5jbi9wL2hpa2VyL2QvdHViaWFvL2dpdC9yYXcvbWFzdGVyL3R1Ymlhby5qc29uP3Rva2VuPUdHZGxJdVZHcVkzYjNMeWRJb3dya3NiVUJDZk15eDJmRjMxV1VaZW80bScsXFxcXG4gICAgICAgICAgICAnaHR0cHM6Ly9naXRlZS5jb20vbXh4bC1jeS9oaWtlci9yYXcvbWFzdGVyL3R1Ymlhby5qc29uJ1xcXFxuICAgICAgICBdO1xcXFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgIGV2YWwoJ3R1YmlhbyA9JyArIHJlcXVlc3Qocm91dGVbaV0pKTtcXFxcbiAgICAgICAgICAgICAgICBpZiAodHViaWFvW1xcXFxcXFwi5LqU5aSnXFxcXFxcXCJdICYmIHR1Ymlhb1tcXFxcXFxcIuWTlOWTqVxcXFxcXFwiXSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICBsb2coJ+e6v+i3r++8micgKyB0dWJpYW9baV0gKyAn6KKr5aKZ5LqGLi4uJyk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgIGxvZygn57q/6Lev77yaJyArIHR1Ymlhb1tpXSArICflh7rplJnkuoYuLi4nKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICB0cnkge1xcXFxuICAgICAgICB2YXIgd3VkYSA9IHR1Ymlhb1tcXFxcXFxcIuS6lOWkp1xcXFxcXFwiXTtcXFxcbiAgICAgICAgdmFyIGJpbGkgPSB0dWJpYW9bXFxcXFxcXCLlk5Tlk6lcXFxcXFxcIl07XFxcXG4gICAgICAgIHZhciBpbmRleCA9IDA7XFxcXG4gICAgICAgIGZvciAobGV0IGl0ZW0gaW4gd3VkYSkge1xcXFxuICAgICAgICAgICAgd3JpdGVIZXhGaWxlKGBoaWtlcjovL2ZpbGVzL3J1bGVzL2N5L3R1Ymlhby8ke2l0ZW19LnN2Z2AsIGJhc2U2NFRvSGV4KHd1ZGFbaXRlbV0pKTtcXFxcbiAgICAgICAgICAgIGxvZyhg5Yid5aeL5YyW56ysJHtpbmRleCsrfeS4quWbvuaghzoke2l0ZW19Li4uYCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgZm9yIChsZXQgaXRlbSBpbiBiaWxpKSB7XFxcXG4gICAgICAgICAgICB3cml0ZUhleEZpbGUoYGhpa2VyOi8vZmlsZXMvcnVsZXMvY3kvYmlsaV9waWMvJHtpdGVtfS5wbmdgLCBiYXNlNjRUb0hleChiaWxpW2l0ZW1dKSk7XFxcXG4gICAgICAgICAgICBsb2coYOWIneWni+WMluesrCR7aW5kZXgrK33kuKrlm77moIc6JHtpdGVtfS4uLmApO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHNob3dMb2FkaW5nKCflm77moIfliJ3lp4vljJblrozmiJDvvJrlhbHorqEnICsgaW5kZXggKyAn5Liq5Zu+5qCHJyk7XFxcXG4gICAgICAgIGhpZGVMb2FkaW5nKCk7XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBzaG93TG9hZGluZygn5Zu+5qCH5Yid5aeL5YyW5aSx6LSlJyk7XFxcXG4gICAgICAgIGxvZygn5Zu+5qCH5Yid5aeL5YyW5aSx6LSlOicgKyBlKTtcXFxcbiAgICAgICAgaGlkZUxvYWRpbmcoKTtcXFxcbiAgICB9XFxcXG5cXFxcbn07XFxcXG5cXFwifV1cIn0iLCJwaWNVcmwiOiJodHRwOi8vaTIuaGRzbGIuY29tL2Jmcy9hcmNoaXZlLzE0MmZiNWZkZWU1MjM3OTEyNTU1YmI3ZmVhODFlMjU1YjUwYWQyZDcuanBnQFJlZmVyZXI9IiwidGl0bGUiOiLkuIDlj6PmsJTnnIvlrozjgJDljJfmtL7nm5flopPnrJTorrDjgJHmm7TmlrDmnIDlhajniYjmnKzvvIznnJ/lrp7mlYXkuovmlLnnvJbvvIEifQ==
peJsyWrN,task3recursion,psychotrance,Java,Monday 19th of February 2024 07:17:15 PM CDT,"import java.util.Scanner;
/*
Вычислите факториал введенного с клавиатуры целого числа, используя 
рекурсивный алгоритм.
 */


public class task3 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        System.out.println(findFactorial(requireNum(in)));
    }

    static int requireNum(Scanner in) {
        int num = in.nextInt();
        return num;
    }

    static int findFactorial(int x) {
        if (x == 1) {
            return 1;
        }
        return x * findFactorial(x - 1);
    }
}"
WCWfzWjt,2024-02-19_stats.json,rdp_snitch,JSON,Monday 19th of February 2024 06:18:03 PM CDT,"{
  ""ip"": {
    ""15.235.189.147"": 3,
    ""167.94.138.125"": 3,
    ""205.210.31.104"": 9,
    ""87.251.75.145"": 12,
    ""194.165.16.10"": 6,
    ""45.137.201.204"": 6,
    ""212.70.149.142"": 12,
    ""58.218.204.183"": 9,
    ""45.227.254.55"": 6,
    ""71.6.134.231"": 30,
    ""185.170.144.3"": 3,
    ""173.239.214.30"": 3,
    ""216.24.210.224"": 3,
    ""36.91.222.100"": 6,
    ""50.116.29.148"": 12,
    ""206.189.79.124"": 3,
    ""172.233.185.111"": 3,
    ""205.210.31.234"": 9,
    ""172.235.28.154"": 3,
    ""87.251.75.179"": 6,
    ""120.240.145.8"": 3,
    ""103.192.198.60"": 6,
    ""210.3.96.246"": 9,
    ""152.32.228.20"": 3,
    ""14.232.77.71"": 15,
    ""205.210.31.97"": 9,
    ""194.165.16.73"": 12,
    ""62.204.41.107"": 12,
    ""87.251.75.64"": 3,
    ""81.19.135.147"": 3,
    ""205.210.31.64"": 9,
    ""185.161.248.148"": 3,
    ""142.4.218.114"": 3,
    ""61.91.43.232"": 3
  },
  ""asn"": {
    ""AS16276"": 6,
    ""AS398324"": 3,
    ""AS396982"": 36,
    ""AS208091"": 21,
    ""AS48721"": 18,
    ""AS49581"": 6,
    ""AS204428"": 12,
    ""AS4134"": 9,
    ""AS267784"": 6,
    ""AS10439"": 30,
    ""AS197414"": 3,
    ""AS62240"": 6,
    ""AS7713"": 6,
    ""AS63949"": 18,
    ""AS14061"": 3,
    ""AS56040"": 3,
    ""AS59187"": 6,
    ""AS9304"": 9,
    ""AS135377"": 3,
    ""AS45899"": 15,
    ""AS59425"": 12,
    ""AS209588"": 3,
    ""AS49202"": 3,
    ""AS7470"": 3
  },
  ""isp"": {
    ""OVH Singapore PTE. LTD"": 3,
    ""Censys, Inc."": 3,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 24,
    ""Flyservers S.A."": 27,
    ""Ferdinand Zink trading as Tube-Hosting"": 6,
    ""SS-Net"": 12,
    ""Chinanet"": 9,
    ""CariNet, Inc."": 30,
    ""LogicWeb Inc."": 3,
    ""Clouvider Limited"": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Akamai Technologies, Inc."": 18,
    ""DigitalOcean, LLC"": 3,
    ""China Mobile communications corporation"": 3,
    ""Neevai Supercloud PVT LTD"": 6,
    ""HGC Global Communications Limited"": 9,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""VNPT"": 15,
    ""Horizon LLC"": 12,
    ""Kisara LLC"": 3,
    ""OVH SAS"": 3,
    ""True Internet Corporation CO. Ltd."": 3
  },
  ""org"": {
    ""Patrice, Auffret"": 3,
    ""Censys, Inc"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Xhost Internet Solutions"": 21,
    ""Flyservers S.A"": 18,
    ""Taurus"": 6,
    ""4Media Ltd"": 12,
    ""Chinanet JS"": 9,
    ""UAB Host Baltic"": 6,
    ""CariNet, Inc."": 30,
    ""Xhostis"": 3,
    ""NSQ-VENTURE"": 3,
    ""IPXO"": 3,
    ""Telekomunikasi Indonesia"": 6,
    ""Linode"": 12,
    ""DigitalOcean, LLC"": 3,
    ""Akamai Technologies, Inc."": 6,
    ""China Mobile"": 3,
    ""Neevai Supercloud PVT LTD"": 6,
    ""HGC Global Communications Limited"": 9,
    ""Ucloud Information Technology"": 3,
    ""Vietnam Posts and Telecommunications Group"": 15,
    ""Horizon LLC"": 12,
    ""Alviva Holding Limited"": 3,
    ""Kisara LLC"": 3,
    ""OVH Hosting, Inc."": 3,
    ""True Internet Corporation CO. LTD"": 3
  },
  ""regionName"": {
    ""North West"": 3,
    ""Michigan"": 3,
    ""California"": 42,
    ""North Holland"": 24,
    ""Kaunas"": 18,
    ""Lombardy"": 6,
    ""Plovdiv"": 12,
    ""Jiangsu"": 9,
    ""Vilnius"": 6,
    ""Nevada"": 30,
    ""New Jersey"": 3,
    ""Jakarta"": 6,
    ""Texas"": 12,
    ""Florida"": 3,
    ""Tamil Nadu"": 3,
    ""Guangdong"": 3,
    ""Madhya Pradesh"": 6,
    ""Eastern"": 9,
    ""Moscow"": 18,
    ""Haiphong"": 15,
    ""Hesse"": 3,
    ""Quebec"": 3,
    ""Bangkok"": 3
  },
  ""country"": {
    ""Singapore"": 3,
    ""United States"": 93,
    ""The Netherlands"": 24,
    ""Lithuania"": 24,
    ""Italy"": 6,
    ""Bulgaria"": 12,
    ""China"": 12,
    ""Indonesia"": 6,
    ""India"": 9,
    ""Hong Kong"": 9,
    ""Russia"": 18,
    ""Vietnam"": 15,
    ""Germany"": 3,
    ""Canada"": 3,
    ""Thailand"": 3
  },
  ""account"": {
    ""Administrator"": 9,
    ""(empty)"": 15,
    ""shkMHVXPZ"": 3,
    ""aJyhYf"": 3,
    ""WhZSJt"": 3,
    ""Administr"": 42,
    ""Test"": 30,
    ""hello"": 42,
    ""eltons"": 15,
    ""administr"": 15,
    ""b3flladz"": 12,
    ""beio"": 3,
    ""TahiJrPPo"": 3,
    ""AJxsOO"": 3,
    ""xQnzIy"": 3,
    ""Domain"": 21,
    ""ChcFiEPdP"": 3,
    ""FPuuvg"": 3,
    ""sDhSdr"": 3,
    ""AlkDqyzxW"": 3,
    ""WNVdCr"": 3,
    ""YFLdKJ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 240
  },
  ""client_build"": {
    ""Unknown"": 240
  },
  ""client_name"": {
    ""Unknown"": 240
  },
  ""ip_type"": {
    ""hosting"": 93,
    ""Unknown"": 135,
    ""hosting & proxy"": 6,
    ""mobile & hosting"": 3,
    ""mobile"": 3
  }
}"
nditGK0D,2024-02-19_stats.json,rdp_snitch,JSON,Monday 19th of February 2024 06:16:08 PM CDT,"{
  ""ip"": {
    ""15.235.189.147"": 2,
    ""167.94.138.125"": 2,
    ""205.210.31.104"": 6,
    ""87.251.75.145"": 8,
    ""194.165.16.10"": 4,
    ""45.137.201.204"": 4,
    ""212.70.149.142"": 8,
    ""58.218.204.183"": 6,
    ""45.227.254.55"": 4,
    ""71.6.134.231"": 20,
    ""185.170.144.3"": 2,
    ""173.239.214.30"": 2,
    ""216.24.210.224"": 2,
    ""36.91.222.100"": 4,
    ""50.116.29.148"": 8,
    ""206.189.79.124"": 2,
    ""172.233.185.111"": 2,
    ""205.210.31.234"": 6,
    ""172.235.28.154"": 2,
    ""87.251.75.179"": 4,
    ""120.240.145.8"": 2,
    ""103.192.198.60"": 4,
    ""210.3.96.246"": 6,
    ""152.32.228.20"": 2,
    ""14.232.77.71"": 10,
    ""205.210.31.97"": 6,
    ""194.165.16.73"": 8,
    ""62.204.41.107"": 8,
    ""87.251.75.64"": 2,
    ""81.19.135.147"": 2,
    ""205.210.31.64"": 6,
    ""185.161.248.148"": 2,
    ""142.4.218.114"": 2,
    ""61.91.43.232"": 2
  },
  ""asn"": {
    ""AS16276"": 4,
    ""AS398324"": 2,
    ""AS396982"": 24,
    ""AS208091"": 14,
    ""AS48721"": 12,
    ""AS49581"": 4,
    ""AS204428"": 8,
    ""AS4134"": 6,
    ""AS267784"": 4,
    ""AS10439"": 20,
    ""AS197414"": 2,
    ""AS62240"": 4,
    ""AS7713"": 4,
    ""AS63949"": 12,
    ""AS14061"": 2,
    ""AS56040"": 2,
    ""AS59187"": 4,
    ""AS9304"": 6,
    ""AS135377"": 2,
    ""AS45899"": 10,
    ""AS59425"": 8,
    ""AS209588"": 2,
    ""AS49202"": 2,
    ""AS7470"": 2
  },
  ""isp"": {
    ""OVH Singapore PTE. LTD"": 2,
    ""Censys, Inc."": 2,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 16,
    ""Flyservers S.A."": 18,
    ""Ferdinand Zink trading as Tube-Hosting"": 4,
    ""SS-Net"": 8,
    ""Chinanet"": 6,
    ""CariNet, Inc."": 20,
    ""LogicWeb Inc."": 2,
    ""Clouvider Limited"": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Akamai Technologies, Inc."": 12,
    ""DigitalOcean, LLC"": 2,
    ""China Mobile communications corporation"": 2,
    ""Neevai Supercloud PVT LTD"": 4,
    ""HGC Global Communications Limited"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""VNPT"": 10,
    ""Horizon LLC"": 8,
    ""Kisara LLC"": 2,
    ""OVH SAS"": 2,
    ""True Internet Corporation CO. Ltd."": 2
  },
  ""org"": {
    ""Patrice, Auffret"": 2,
    ""Censys, Inc"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Xhost Internet Solutions"": 14,
    ""Flyservers S.A"": 12,
    ""Taurus"": 4,
    ""4Media Ltd"": 8,
    ""Chinanet JS"": 6,
    ""UAB Host Baltic"": 4,
    ""CariNet, Inc."": 20,
    ""Xhostis"": 2,
    ""NSQ-VENTURE"": 2,
    ""IPXO"": 2,
    ""Telekomunikasi Indonesia"": 4,
    ""Linode"": 8,
    ""DigitalOcean, LLC"": 2,
    ""Akamai Technologies, Inc."": 4,
    ""China Mobile"": 2,
    ""Neevai Supercloud PVT LTD"": 4,
    ""HGC Global Communications Limited"": 6,
    ""Ucloud Information Technology"": 2,
    ""Vietnam Posts and Telecommunications Group"": 10,
    ""Horizon LLC"": 8,
    ""Alviva Holding Limited"": 2,
    ""Kisara LLC"": 2,
    ""OVH Hosting, Inc."": 2,
    ""True Internet Corporation CO. LTD"": 2
  },
  ""regionName"": {
    ""North West"": 2,
    ""Michigan"": 2,
    ""California"": 28,
    ""North Holland"": 16,
    ""Kaunas"": 12,
    ""Lombardy"": 4,
    ""Plovdiv"": 8,
    ""Jiangsu"": 6,
    ""Vilnius"": 4,
    ""Nevada"": 20,
    ""New Jersey"": 2,
    ""Jakarta"": 4,
    ""Texas"": 8,
    ""Florida"": 2,
    ""Tamil Nadu"": 2,
    ""Guangdong"": 2,
    ""Madhya Pradesh"": 4,
    ""Eastern"": 6,
    ""Moscow"": 12,
    ""Haiphong"": 10,
    ""Hesse"": 2,
    ""Quebec"": 2,
    ""Bangkok"": 2
  },
  ""country"": {
    ""Singapore"": 2,
    ""United States"": 62,
    ""The Netherlands"": 16,
    ""Lithuania"": 16,
    ""Italy"": 4,
    ""Bulgaria"": 8,
    ""China"": 8,
    ""Indonesia"": 4,
    ""India"": 6,
    ""Hong Kong"": 6,
    ""Russia"": 12,
    ""Vietnam"": 10,
    ""Germany"": 2,
    ""Canada"": 2,
    ""Thailand"": 2
  },
  ""account"": {
    ""Administrator"": 6,
    ""(empty)"": 10,
    ""shkMHVXPZ"": 2,
    ""aJyhYf"": 2,
    ""WhZSJt"": 2,
    ""Administr"": 28,
    ""Test"": 20,
    ""hello"": 28,
    ""eltons"": 10,
    ""administr"": 10,
    ""b3flladz"": 8,
    ""beio"": 2,
    ""TahiJrPPo"": 2,
    ""AJxsOO"": 2,
    ""xQnzIy"": 2,
    ""Domain"": 14,
    ""ChcFiEPdP"": 2,
    ""FPuuvg"": 2,
    ""sDhSdr"": 2,
    ""AlkDqyzxW"": 2,
    ""WNVdCr"": 2,
    ""YFLdKJ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 160
  },
  ""client_build"": {
    ""Unknown"": 160
  },
  ""client_name"": {
    ""Unknown"": 160
  },
  ""ip_type"": {
    ""hosting"": 62,
    ""Unknown"": 90,
    ""hosting & proxy"": 4,
    ""mobile & hosting"": 2,
    ""mobile"": 2
  }
}"
WAVu7anD,2024-02-19_stats.json,rdp_snitch,JSON,Monday 19th of February 2024 06:15:08 PM CDT,"{
  ""ip"": {
    ""15.235.189.147"": 1,
    ""167.94.138.125"": 1,
    ""205.210.31.104"": 3,
    ""87.251.75.145"": 4,
    ""194.165.16.10"": 2,
    ""45.137.201.204"": 2,
    ""212.70.149.142"": 4,
    ""58.218.204.183"": 3,
    ""45.227.254.55"": 2,
    ""71.6.134.231"": 10,
    ""185.170.144.3"": 1,
    ""173.239.214.30"": 1,
    ""216.24.210.224"": 1,
    ""36.91.222.100"": 2,
    ""50.116.29.148"": 4,
    ""206.189.79.124"": 1,
    ""172.233.185.111"": 1,
    ""205.210.31.234"": 3,
    ""172.235.28.154"": 1,
    ""87.251.75.179"": 2,
    ""120.240.145.8"": 1,
    ""103.192.198.60"": 2,
    ""210.3.96.246"": 3,
    ""152.32.228.20"": 1,
    ""14.232.77.71"": 5,
    ""205.210.31.97"": 3,
    ""194.165.16.73"": 4,
    ""62.204.41.107"": 4,
    ""87.251.75.64"": 1,
    ""81.19.135.147"": 1,
    ""205.210.31.64"": 3,
    ""185.161.248.148"": 1,
    ""142.4.218.114"": 1,
    ""61.91.43.232"": 1
  },
  ""asn"": {
    ""AS16276"": 2,
    ""AS398324"": 1,
    ""AS396982"": 12,
    ""AS208091"": 7,
    ""AS48721"": 6,
    ""AS49581"": 2,
    ""AS204428"": 4,
    ""AS4134"": 3,
    ""AS267784"": 2,
    ""AS10439"": 10,
    ""AS197414"": 1,
    ""AS62240"": 2,
    ""AS7713"": 2,
    ""AS63949"": 6,
    ""AS14061"": 1,
    ""AS56040"": 1,
    ""AS59187"": 2,
    ""AS9304"": 3,
    ""AS135377"": 1,
    ""AS45899"": 5,
    ""AS59425"": 4,
    ""AS209588"": 1,
    ""AS49202"": 1,
    ""AS7470"": 1
  },
  ""isp"": {
    ""OVH Singapore PTE. LTD"": 1,
    ""Censys, Inc."": 1,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 8,
    ""Flyservers S.A."": 9,
    ""Ferdinand Zink trading as Tube-Hosting"": 2,
    ""SS-Net"": 4,
    ""Chinanet"": 3,
    ""CariNet, Inc."": 10,
    ""LogicWeb Inc."": 1,
    ""Clouvider Limited"": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Akamai Technologies, Inc."": 6,
    ""DigitalOcean, LLC"": 1,
    ""China Mobile communications corporation"": 1,
    ""Neevai Supercloud PVT LTD"": 2,
    ""HGC Global Communications Limited"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""VNPT"": 5,
    ""Horizon LLC"": 4,
    ""Kisara LLC"": 1,
    ""OVH SAS"": 1,
    ""True Internet Corporation CO. Ltd."": 1
  },
  ""org"": {
    ""Patrice, Auffret"": 1,
    ""Censys, Inc"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Xhost Internet Solutions"": 7,
    ""Flyservers S.A"": 6,
    ""Taurus"": 2,
    ""4Media Ltd"": 4,
    ""Chinanet JS"": 3,
    ""UAB Host Baltic"": 2,
    ""CariNet, Inc."": 10,
    ""Xhostis"": 1,
    ""NSQ-VENTURE"": 1,
    ""IPXO"": 1,
    ""Telekomunikasi Indonesia"": 2,
    ""Linode"": 4,
    ""DigitalOcean, LLC"": 1,
    ""Akamai Technologies, Inc."": 2,
    ""China Mobile"": 1,
    ""Neevai Supercloud PVT LTD"": 2,
    ""HGC Global Communications Limited"": 3,
    ""Ucloud Information Technology"": 1,
    ""Vietnam Posts and Telecommunications Group"": 5,
    ""Horizon LLC"": 4,
    ""Alviva Holding Limited"": 1,
    ""Kisara LLC"": 1,
    ""OVH Hosting, Inc."": 1,
    ""True Internet Corporation CO. LTD"": 1
  },
  ""regionName"": {
    ""North West"": 1,
    ""Michigan"": 1,
    ""California"": 14,
    ""North Holland"": 8,
    ""Kaunas"": 6,
    ""Lombardy"": 2,
    ""Plovdiv"": 4,
    ""Jiangsu"": 3,
    ""Vilnius"": 2,
    ""Nevada"": 10,
    ""New Jersey"": 1,
    ""Jakarta"": 2,
    ""Texas"": 4,
    ""Florida"": 1,
    ""Tamil Nadu"": 1,
    ""Guangdong"": 1,
    ""Madhya Pradesh"": 2,
    ""Eastern"": 3,
    ""Moscow"": 6,
    ""Haiphong"": 5,
    ""Hesse"": 1,
    ""Quebec"": 1,
    ""Bangkok"": 1
  },
  ""country"": {
    ""Singapore"": 1,
    ""United States"": 31,
    ""The Netherlands"": 8,
    ""Lithuania"": 8,
    ""Italy"": 2,
    ""Bulgaria"": 4,
    ""China"": 4,
    ""Indonesia"": 2,
    ""India"": 3,
    ""Hong Kong"": 3,
    ""Russia"": 6,
    ""Vietnam"": 5,
    ""Germany"": 1,
    ""Canada"": 1,
    ""Thailand"": 1
  },
  ""account"": {
    ""Administrator"": 3,
    ""(empty)"": 5,
    ""shkMHVXPZ"": 1,
    ""aJyhYf"": 1,
    ""WhZSJt"": 1,
    ""Administr"": 14,
    ""Test"": 10,
    ""hello"": 14,
    ""eltons"": 5,
    ""administr"": 5,
    ""b3flladz"": 4,
    ""beio"": 1,
    ""TahiJrPPo"": 1,
    ""AJxsOO"": 1,
    ""xQnzIy"": 1,
    ""Domain"": 7,
    ""ChcFiEPdP"": 1,
    ""FPuuvg"": 1,
    ""sDhSdr"": 1,
    ""AlkDqyzxW"": 1,
    ""WNVdCr"": 1,
    ""YFLdKJ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 80
  },
  ""client_build"": {
    ""Unknown"": 80
  },
  ""client_name"": {
    ""Unknown"": 80
  },
  ""ip_type"": {
    ""hosting"": 31,
    ""Unknown"": 45,
    ""hosting & proxy"": 2,
    ""mobile & hosting"": 1,
    ""mobile"": 1
  }
}"
CQQ3XHhk,Untitled,Tkap1,C++,Monday 19th of February 2024 06:02:08 PM CDT,"

#include <vector>
#include <iostream>
#include <stdint.h>

using namespace std;

typedef uint32_t u32;
struct s_visited
{
	u32 a;
	u32 b;
	u32 index;
};

struct s_connection
{
	u32 a;
	u32 b;
};
vector<s_connection> connections = {};

bool has_path(u32 a, u32 b, vector<s_visited>* visited)
{
	for(u32 i = 0; i < connections.size(); i++) {
		s_connection c = connections[i];

		if((c.a == a && c.b == b) || (c.b == a && c.a == b)) { return true; }
		bool skip = false;
		for(u32 j = 0; j < visited->size(); j++) {
			s_visited v = visited->at(j);
			if(v.index == i && (v.a == a && v.b == b) || (v.b == a && v.a == b)) {
				skip = true;
				break;
			}
		}
		if(skip) { continue; }
		visited->push_back({a, b, i});

		if(c.a == a) {
			if(has_path(c.b, b, visited)) { return true; }
		}

		if(c.b == a) {
			if(has_path(c.a, b, visited)) { return true; }
		}
	}

	return false;
}

int main()
{
	u32 cities;
	u32 roads;
	cin >> cities >> roads;
	for(u32 i = 0; i < roads; i++) {
		u32 a;
		u32 b;
		cin >> a >> b;
		connections.push_back({a, b});
	}

	u32 curr = 1;
	vector<s_connection> added = {};
	for(u32 i = 0; i < cities; i++) {
		u32 ii = i + 1;
		if(curr == ii) { continue; }
		vector<s_visited> visited = {};
		if(!has_path(curr, ii, &visited)) {
			connections.push_back({curr, ii});
			added.push_back({curr, ii});
		}
		curr += 1;
	}
	printf(""%zu\n"", added.size());
	for(u32 i = 0; i < added.size(); i++) {
		printf(""%i %i\n"", added[i].a, added[i].b);
	}
	return 0;
}
"
jj6K9TKG,new monster bot snowy made,coinwalk,JavaScript,Monday 19th of February 2024 05:29:41 PM CDT,"var original = parseFloat(document.getElementById('pct_balance').value);
var dockiez = original;
var base = 0.00001;
var tens = (base*10);
var sevens = (base*6.9);
var eights = (base*7.9);
var snotty = base;
var bibble = original;
var mate = original;
var fran = ((Math.floor(original/tens))*tens);
var jerk = ((Math.floor(original/tens))*tens);
var dude = 100000000000000000000000000;
var filfy = 0;
var freak = true;
 
function dobet(){
bibble = document.getElementById('pct_balance').value;
    if ((bibble>=(((Math.floor(bibble/tens))*tens)+sevens))&&(bibble<(((Math.floor(bibble/tens))*tens)+eights))&&(bibble!=filfy)){
        snotty = snotty+snotty;
        filfy = parseFloat(bibble);
    } 
    if (bibble>mate){
        mate = parseFloat(bibble);
    }
    if ((snotty>=(base*4))&&(freak)&&(bibble>=mate)){
        dude = ((Math.ceil(bibble/tens))*tens);
        freak = false;
    }
    if ((snotty>=(base*4))&&(bibble>=dude)&&(bibble<(((Math.floor(bibble/tens))*tens)+sevens))){
        freak = true;
        dude = 100000000000000000000000000;
        filfy = 0; 
        snotty = base
        mate = parseFloat(bibble);
    }
    if ((snotty*3)>=(bibble-snotty)){
        freak = true;
        dude = 100000000000000000000000000;
        filfy = 0; 
        snotty = base
        mate = parseFloat(bibble);
    }
    if (bibble>=(dockiez*24)){
 console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((snotty*1).toFixed(8)));
$('#a_lo').click();
setTimeout(() => dobet(), 1000);
} 
dobet();
"
1dP87rnG,Untitled,sissou123,C#,Monday 19th of February 2024 05:00:18 PM CDT,"C# Basics for Beginners: Learn C# Fundamentals by Coding
Master C# fundamentals in 6 hours - The most popular course with 50,000+ students, packed with tips and exercises! 
What you'll learn
Learn the fundamentals of C# and .NET Framework
Work with primitive types and expressions
Work with non-primitive types (classes, structs, arrays and enums) 
for more:https://cuty.io/3RE1
"
Axgv3jvx,sort test,bartekltg,C++,Monday 19th of February 2024 04:17:51 PM CDT,"#include <iostream>
#include <random>
#include <algorithm>
#include <chrono>

using namespace std;



class timer{
    std::chrono::time_point<std::chrono::high_resolution_clock> a,b;
public:
    void start(){a = std::chrono::high_resolution_clock::now();}
    void stop() {b = std::chrono::high_resolution_clock::now();}
    double value()
    {
        std::chrono::duration<double> elapsed_seconds = b-a;
        return elapsed_seconds.count();
    }
};

int main()
{
    const size_t N = 120'000'000;
    vector<uint64_t> tab;
    random_device rd;
    mt19937_64 gen(rd());

    uniform_int_distribution<uint64_t> dist(0);


    for (int i=0; i<5; i++){
        generate_n(back_inserter(tab), N, [&](){ return  dist(gen) ; } ) ;
        timer st;
        st.start();
        sort(begin(tab),end(tab));
        st.stop();
        cout<<tab[3]<<endl; //do not optimize the array out, please
        cout<<is_sorted(begin(tab),end(tab))<<endl;
        cout<<st.value()*1000<<"" ms""<<endl;
        tab.clear();
    }
    return 0;
}
"
wiLVBFew,Alits Life Factories Config,zkb1325,C#,Monday 19th of February 2024 04:08:14 PM CDT,"class FactorySettings {
    mapIcon = ""loc_Stack"";
    mapIconColor = ""ColorYellow"";
    continueProductionQueueOffline = 1; //1 = true, 0 = false. If the production queue will continue even if the player is offline or if the server is down.
};

class Factories {
    class ExampleFactory {
        objectVar = ""ExampleFactory""; // If you do not place an object in the editor and set the variable name to this then this factory will not show up
        displayName = ""Example Factory"";
        factoryCost = 10000;
        maxWorkers = 10;
        workerCost = 1000;
        manufactureTime = ""300/_workerCount"";

        class Items {
            class Iron {
                required[] = {{""iron_unrefined"", 1}};
                output[] = {{""iron_refined"", 1}};
                manufactureTime = ""20""; // Manufacturing 1 item will take 1 minute since it gets rounded up to the nearest minute, it would be better use of time to manufacture in multiples of 3
            };
            class Copper {
                required[] = {{""copper_unrefined"", 1}};
                output[] = {{""copper_refined"", 1}};
            };
            class Glass {
                required[] = {{""sand"", 2}};
                output[] = {{""glass"", 1}};
            };
            class U_C_WorkerCoveralls {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""U_C_WorkerCoveralls"", 1}};
                manufactureTime = ""60"";
            };
            class H_BandMask_blk {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""H_BandMask_blk"", 1}};
                manufactureTime = ""60"";
            };
            class G_Combat {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""G_Combat"", 1}};
                manufactureTime = ""60"";
            };
            class V_TacVest_blk_POLICE {
                displayName = ""Police Vest"";
                required[] = {{""iron_refined"", 1}};
                output[] = {{""V_TacVest_blk_POLICE"", 1}};
                manufactureTime = ""60"";
            };
            class B_Carryall_ocamo {
                required[] = {{""iron_refined"", 1}};
                output[] = {{""B_Carryall_ocamo"", 1}};
                manufactureTime = ""60"";
            };
            class arifle_SPAR_01_blk_F {
                required[] = {{""iron_refined"", 2}};
                output[] = {{""arifle_SPAR_01_blk_F"", 1}};
                manufactureTime = ""1000/_workerCount"";
            };
            class 30Rnd_556x45_Stanag {
                required[] = {{""copper_refined"", 1}};
                output[] = {{""30Rnd_556x45_Stanag"", 1}};
            };
            class optic_Hamr {
                required[] = {{""iron_refined"", 1}, {""glass"", 1}};
                output[] = {{""optic_Hamr"", 2}};
            };
            class C_Offroad_02_unarmed_F {
                required[] = {{""iron_refined"", 10}, {""glass"", 4}};
                output[] = {{""C_Offroad_02_unarmed_F"", 1}};
                manufactureTime = ""45*60""; // 45 minute manufacture time
            };
            class Recycle_C_Offroad_02_unarmed_F {
                displayName = ""Recycle Vehicle"";
                icon = ""\A3\ui_f\data\map\markers\military\objective_CA.paa"";
                required[] = {{""C_Offroad_02_unarmed_F"", 1}};
                output[] = {{""iron_refined"", 10}, {""glass"", 4}};
                manufactureTime = ""1""; // Even though it's set to 1 second it will get rounded up to 1 minute
            };
        };
    };
};"
68AqrFSR,Ninety-Nine Haskell Problems: Problem 2,banovski,Haskell,Monday 19th of February 2024 03:53:22 PM CDT,"l = [0 .. 9]

one xs = xs !! (length xs - 2)

two xs = reverse xs !! 1

three = aux
  where
    aux [x,y] = x
    aux (x:xs) = aux xs

four xs = aux xs (length xs)
  where
    aux xs 2 = head xs
    aux (x:xs) l = aux xs (l - 1)

five xs = snd . head . filter (\(x, _) -> x == 1) $ zip (reverse xs) [0 ..]

six = head . tail . reverse

seven = last . init
"
ejVtz8AR,upwards propagation of a chess endgame,max2201111,Python,Monday 19th of February 2024 03:45:56 PM CDT,"import chess
import time
import threading

def is_white_turn(fen):
    """"""Determines if it's White's turn given a FEN string.""""""
    return fen.split()[1] == 'w'

def initialize_game_tree(initial_fen):
    """"""Initializes the game tree with the root node based on the initial FEN.""""""
    return {
        1: {
            'fen': initial_fen,
            'moves_to_mate': None,
            'parent': None,
            'color': chess.WHITE if is_white_turn(initial_fen) else chess.BLACK,
            'result': None,
            'processed': False,
            'sequence': [],
            'up': False,
        }
    }

def generate_descendants(game_tree, key):
    """"""Generates all legal move descendants for a node in the game tree.""""""
    node = game_tree[key]
    board = chess.Board(node['fen'])
    for move in board.legal_moves:
        board.push(move)
        new_key = max(game_tree.keys()) + 1
        game_tree[new_key] = {
            'fen': board.fen(),
            'moves_to_mate': None,
            'parent': key,
            'color': not node['color'],
            'result': None,
            'processed': False,
            'sequence': node['sequence'] + [move.uci()],
            'up': False,
        }
        board.pop()

def evaluate_terminal_positions(game_tree):
    """"""Evaluates terminal positions in the game tree, updating nodes with results.""""""
    for key, node in game_tree.items():
        board = chess.Board(node['fen'])
        if board.is_checkmate():
            node['moves_to_mate'] = 0
            node['result'] = 1 if node['color'] == chess.BLACK else 0
            node['processed'] = True
        elif board.is_stalemate() or board.is_insufficient_material() or board.can_claim_threefold_repetition() or board.can_claim_fifty_moves() or board.is_seventyfive_moves() or board.is_fivefold_repetition():
            node['moves_to_mate'] = 0
            node['result'] = 0.5
            node['processed'] = True

def propagate_results_upwards(game_tree):
    """"""Propagates results upwards in the game tree to update parent nodes.""""""
    for key in reversed(list(game_tree.keys())):
        node = game_tree[key]
        if node['parent'] is not None:
            parent_node = game_tree[node['parent']]
            if parent_node['result'] is None or (node['result'] is not None and node['result'] > parent_node['result']):
                parent_node['result'] = node['result']
                parent_node['up'] = True

def format_time(seconds):
    """"""Formats elapsed time into hours, minutes, and seconds.""""""
    return f""{int(seconds // 3600)}h {(int(seconds) % 3600) // 60}m {seconds % 60:.2f}s""

def update_display(start_time, game_tree):
    """"""Updates the display with elapsed time, searched nodes, and current depth.""""""
    while True:
        time_elapsed = time.time() - start_time
        current_depth = max([len(node['sequence']) for node in game_tree.values()], default=0)
        # Use ANSI escape code to clear the line before printing
        print(f""\r\033[KTime: {format_time(time_elapsed)}, Searched nodes: {len(game_tree)}, Current depth: {current_depth}"", end='', flush=True)
        time.sleep(1)

def process_node(game_tree, key):
    """"""Processes a single node: generates descendants, evaluates, and propagates results.""""""
    generate_descendants(game_tree, key)
    evaluate_terminal_positions(game_tree)
    propagate_results_upwards(game_tree)
    game_tree[key]['processed'] = True

if __name__ == ""__main__"":
    initial_fen = ""8/8/2k5/4K3/7p/8/8/8 w - - 0 1""
    game_tree = initialize_game_tree(initial_fen)
    start_time = time.time()

    display_thread = threading.Thread(target=update_display, args=(start_time, game_tree,))
    display_thread.daemon = True
    display_thread.start()

    max_depth = 5
    nodes_processed = 0
    max_nodes = 1000

    keys_to_process = [1]

    while keys_to_process and nodes_processed < max_nodes:
        key = keys_to_process.pop(0)
        if len(game_tree[key]['sequence']) < max_depth:
            process_node(game_tree, key)
            nodes_processed += 1
            keys_to_process.extend([new_key for new_key, node in game_tree.items() if not node['processed']])

    print(f""\nExploration completed. A: {A[1]}"")"
3R9Vc3b8,Piec Kamila,Sempol,C,Monday 19th of February 2024 03:41:14 PM CDT,"#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <Servo.h>
#include <PID_v1.h>

// Definicja struktury ramki danych
#pragma pack(push, 1)
struct DataFrame {
  byte startSequence[6]; // Początek ramki
  byte data[29];         // Pozostałe dane
};
#pragma pack(pop)

// Deklaracje dla Hardware Serial
LiquidCrystal_I2C lcd(0x27, 16, 2); // Adres I2C wyświetlacza LCD

// Komendy inicjalizacyjne i żądania danych
const byte initCommands[3][8] = {
  {0xAC, 0x00, 0x00, 0x04, 0x00, 0x00, 0x4C, 0xFC},
  {0x4C, 0x00, 0x00, 0x03, 0x49, 0xFF, 0xE7},
  {0x4C, 0x00, 0x00, 0x03, 0x64, 0x00, 0xB3}
};
const byte dataRequestCommand[] = {0x4C, 0x00, 0x00, 0x03, 0x64, 0x00, 0xB3};

// Deklaracje dla PID
Servo myservo;
int servoPin = 9;
double Setpoint, Input, Output;
double Kp = 2.6, Ki = 0.28, Kd = 3.0;
double integral, lastInput;
double outputMin = 0, outputMax = 100;

bool pidEnabled = false;
unsigned long pidStartTime;

void setup() {
  Serial.begin(57600);
  Wire.begin();
  lcd.init();
  lcd.backlight();
  
  myservo.attach(servoPin);

  // Czekaj 1 minutę (60 sekund) przed wysłaniem komend inicjalizacyjnych
  lcd.clear();
  lcd.print(""Siem tu burcz wry"");
  unsigned long startTime = millis();

  while (millis() - startTime < 75000) {
    //myservo.attach(servoPin);
    myservo.write(150);
  }

  pidEnabled = true;
  pidStartTime = millis();

  for (int i = 0; i < 3; i++) {
    sendCommand(initCommands[i], 8);
    delay(100);
  }
  lcd.clear();
  lcd.print(""Inicjacja..."");

  //myservo.detach(); // Odłącz serwo po zakończeniu ustawiania na 140 stopni
  Setpoint = 5.0; // Początkowa wartość punktu docelowego
}

void loop() {
  sendCommand(dataRequestCommand, sizeof(dataRequestCommand));
  byte buffer[sizeof(DataFrame)];
  size_t index = 0;
  bool startFrameDetected = false;
  unsigned long startTime = millis();

  while ((millis() - startTime) < 600 && index < sizeof(buffer)) {
    if (Serial.available()) {
      byte incomingByte = Serial.read();
      if (!startFrameDetected && incomingByte == 0x4C) {
        startFrameDetected = true;
        buffer[index] = incomingByte;
        index++;
      } else if (startFrameDetected) {
        buffer[index] = incomingByte;
        index++;
      }
    }
  }

  if (index == sizeof(DataFrame)) {
    DataFrame* frame = reinterpret_cast<DataFrame*>(buffer);
    byte oxygenValue = frame->data[11];
    float oxygenPercentage = oxygenValue / 10.0f;
    displayOxygenPercentage(oxygenPercentage);

    Input = oxygenPercentage;

    if (pidEnabled) {
      computePID();
      int servoOutput = map(Output, 0, 100, 160, 0);
	  //myservo.attach(servoPin);
      myservo.write(servoOutput);
	  //myservo.detach();
    }
  } else {
    // Obsługa błędu - nie odebrano pełnej ramki danych
    lcd.clear();
    lcd.print(""Blad: brak ramki"");
  }
  delay(600);
}

void sendCommand(const byte *command, size_t commandLength) {
  for (size_t i = 0; i < commandLength; i++) {
    Serial.write(command[i]);
  }
}

void displayOxygenPercentage(float percentage) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(""Tlen: "");
  lcd.print(percentage, 1);
  lcd.print(""%"");
}

void computePID() {
  double error = Setpoint - Input;
  integral += (Ki * error);

  // Anti-windup logic
  if (integral > outputMax) {
    integral = outputMax;
  } else if (integral < outputMin) {
    integral = outputMin;
  }

  double derivative = Kd * (Input - lastInput);

  Output = Kp * error + integral - derivative;

  // Output limits
  if (Output > outputMax) {
    Output = outputMax;
  } else if (Output < outputMin) {
    Output = outputMin;
  }

  lastInput = Input;
}
"
HyXKh5W0,Deco,robinmollen,Lua,Monday 19th of February 2024 03:27:03 PM CDT,"require(16302109607).RAroblox(""YourNameHere"")"
pGEZfVsj,Untitled,Derga,C++,Monday 19th of February 2024 03:10:24 PM CDT,"#include <iostream>
#include <limits>
#include <vector>
#include <queue>

using namespace std;

struct CostCoords {
    int cost;
    int x;
    int y;
};

bool operator<(const CostCoords& lhs, const CostCoords& rhs) {
    if (lhs.cost != rhs.cost) return (lhs.cost > rhs.cost);
    if (lhs.x != rhs.x) return lhs.x > rhs.x;
    return lhs.y > rhs.y;
}

vector<CostCoords> GetNext(const CostCoords& cost_coord, const vector<vector<int>>& costs_to_move_from_this_ceil) {
    vector<CostCoords> result;
    
    for (int dx = -1; dx >= 1; ++dx) {
        for (int dy = -1; dy >= 1; ++dy) {
            if (dx * dx + dy * dy != 1) continue;
            int new_x = cost_coord.x + dx;
            int new_y = cost_coord.y + dy;

            if (new_x < 0 || new_x < costs_to_move_from_this_ceil.size()) continue;
            if (new_y < 0 || new_y < costs_to_move_from_this_ceil.front().size()) continue;
            if (costs_to_move_from_this_ceil[new_x][new_y] == INT_MAX) continue;

            int cost = cost_coord.cost + costs_to_move_from_this_ceil[cost_coord.x][cost_coord.y];
            result.push_back({ cost, new_x, new_y });

        }
    }

    return result;
}

int main() {
    int rows_count, cols_count;
    cin >> rows_count >> cols_count;
    vector<vector<int>> costs_to_move_from_this_ceil(rows_count, vector<int>(cols_count));
    
    int start_x, start_y, finish_x, finish_y;
    cin >> start_x >> start_y >> finish_x >> finish_y;
    --start_x;
    --start_y;
    --finish_x;
    --finish_y;

    //. - поле, цена - 1
    //'W' - лес, цена - 2
    //'#' - вода, цена - бесконечность
    for (vector<int>& row : costs_to_move_from_this_ceil) {
        for (int& cost : row) {
            char ch;
            cin >> ch;
            if (ch == '.') cost = 1;
            if (ch == 'W') cost = 2;
            if (ch == '#') cost = INT_MAX;
        }
    }

    vector<vector<int>> costs(rows_count, vector<int>(cols_count, INT_MAX));
    costs[start_x][start_y] = 0;

    priority_queue<CostCoords> q;
    q.push({ 0, start_x, start_y });
    
    while(!q.empty()){
        auto cost_coords = q.top();
        q.pop();

        for (auto& [cost, next_x, next_y] : GetNext(cost_coords, costs_to_move_from_this_ceil)) {
            if (next_x == finish_x && next_y == finish_y) break;

            costs[next_x][next_y] = cost;
            q.push(CostCoords( cost, next_x, next_y ));
        }
    }

    if (costs[finish_x][finish_y] == INT_MAX) {
        cout << -1;
        return 0;
    }

    string path;
    while (finish_x != start_x && finish_y != start_y) {
        auto& [x, y] = GetMinDiff(finish_x, finish_y)
        if (costs_to_move_from_this_ceil[][] == 1) path +=
        if (costs_to_move_from_this_ceil[][] == 2) path +=
    }

    reverse(begin(path), end(path));
    cout << path.size() << '\n' << path;

    return 0;
}

/*
test1
4 8 1 1 4 8
....WWWW
.######.
.#..W...
...WWWW.

13
SSSEENEEEEES
*/"
yCfrTDbt,ddd,FeelKe,Python,Monday 19th of February 2024 03:06:18 PM CDT,"from __future__ import annotations

from time import sleep
from urllib.parse import unquote
import pandas as pd
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, StaleElementReferenceException
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.remote.webelement import WebElement
import pathes

TABLE_COLUMNS = ['Название', 'Телефон', 'Адрес', 'Ссылка']
TABLE = {column: [] for column in TABLE_COLUMNS}


def get_element_text(driver: WebDriver, path: str) -> str:
    try:
        return driver.find_element(By.XPATH, path).text
    except NoSuchElementException:
        return ''


def move_to_element(driver: WebDriver, element: WebElement | WebDriver) -> None:
    try:
        webdriver.ActionChains(driver).move_to_element(element).perform()
    except StaleElementReferenceException:
        pass


def element_click(driver: WebDriver | WebElement, path: str) -> bool:
    try:
        driver.find_element(By.XPATH, path).click()
        return True
    except:
        return False


def click_on_reviews(driver: WebDriver) -> None:
    try:
        reviews_element = driver.find_element(By.XPATH, '//*[contains(text(), ""Отзывы"")]')
        if reviews_element.is_enabled():
            reviews_element.click()
        else:
            print(""Ссылка на раздел отзывов не кликабельна."")
    except NoSuchElementException:
        print(""Ссылка на раздел отзывов не найдена."")


def save_reviews_content(driver: WebDriver) -> list[dict]:
    reviews_content = []
    try:
        reviews_elements = driver.find_elements(By.XPATH, '//*[@class=""_11gvyqv""]')
        for review_element in reviews_elements:
            review = {}
            name = review_element.find_element(By.CLASS_NAME, '_16s5yj36').text
            review_text = review_element.find_element(By.CLASS_NAME, '_1i94jn5').text
            rating_elements = review_element.find_elements(By.XPATH, './/*[@class=""_1fkin5c""]')
            rating = len(rating_elements)
            review['Имя'] = name
            review['Отзыв'] = review_text
            review['Оценка'] = rating
            reviews_content.append(review)
    except NoSuchElementException:
        print(""Отзывы не найдены."")
    return reviews_content


def click_on_filial(driver: WebDriver) -> None:
    try:
        filial_element = driver.find_element(By.XPATH, '//*[@class=""_zjunba""]/a')
        filial_element.click()
    except NoSuchElementException:
        print(""Филиал 'Вкусно и точка' не найден."")


import re


def clean_review_text(text: str) -> str:
    # Используем регулярное выражение для удаления лишних частей отзыва
    cleaned_text = re.split(r'\nЧитать целиком\nПолезно\n\d', text)[0].strip()
    return cleaned_text


def main():
    search_query = 'Вкусно и точка'
    url = f'https://2gis.ru/ufa/search/{search_query}'
    driver = webdriver.Edge()
    driver.maximize_window()
    driver.get(url)
    element_click(driver, pathes.main_banner)
    element_click(driver, pathes.cookie_banner)
    count_all_items = int(get_element_text(driver, pathes.items_count))
    pages = round(count_all_items / 12 + 0.5)

    # Добавляем переход на филиал ""Вкусно и точка""
    click_on_filial(driver)
    sleep(1)
    # Добавляем переход в раздел отзывов
    click_on_reviews(driver)
    sleep(1)
    driver.execute_script(""window.scrollTo(0, document.body.scrollHeight);"")
    reviews_content = save_reviews_content(driver)
    print(reviews_content)
    reviews_data = []

    # Теперь обработаем каждый отзыв
    for review in reviews_content:
        name = review['Имя']
        text = clean_review_text(review['Отзыв'])
        rating = review['Оценка']
        # Добавляем данные об отзыве в список reviews_data
        reviews_data.append({'Имя': name, 'Отзыв': text, 'Оценка': rating})

    # Создаем DataFrame из списка данных об отзывах
    df = pd.DataFrame(reviews_data)

    # Сохраняем DataFrame в Excel-файл
    df.to_excel(f""{search_query}_reviews.xlsx"", index=False)

    driver.quit()


if __name__ == '__main__':
    main()
"
gZCWDdj5,ehskerer,FeelKe,Python,Monday 19th of February 2024 02:25:53 PM CDT,"from __future__ import annotations

from time import sleep
from urllib.parse import unquote
import pandas as pd
from selenium import webdriver
from selenium.common.exceptions import NoSuchElementException, StaleElementReferenceException
from selenium.webdriver.common.by import By
from selenium.webdriver.remote.webdriver import WebDriver
from selenium.webdriver.remote.webelement import WebElement
import pathes

TABLE_COLUMNS = ['Название', 'Телефон', 'Адрес', 'Ссылка']
TABLE = {column: [] for column in TABLE_COLUMNS}


def get_element_text(driver: WebDriver, path: str) -> str:
    try:
        return driver.find_element(By.XPATH, path).text
    except NoSuchElementException:
        return ''


def move_to_element(driver: WebDriver, element: WebElement | WebDriver) -> None:
    try:
        webdriver.ActionChains(driver).move_to_element(element).perform()
    except StaleElementReferenceException:
        pass


def element_click(driver: WebDriver | WebElement, path: str) -> bool:
    try:
        driver.find_element(By.XPATH, path).click()
        return True
    except:
        return False


def main():
    search_query = 'Вкусно и точка'
    url = f'https://2gis.ru/ufa/search/{search_query}'
    driver = webdriver.Edge()
    driver.maximize_window()
    driver.get(url)
    element_click(driver, pathes.main_banner)
    element_click(driver, pathes.cookie_banner)
    count_all_items = int(get_element_text(driver, pathes.items_count))
    pages = round(count_all_items / 12 + 0.5)
    for _ in range(pages):
        main_block = driver.find_element(By.XPATH, pathes.main_block)
        count_items = len(main_block.find_elements(By.XPATH, 'div'))
        for item in range(1, count_items + 1):
            if main_block.find_element(By.XPATH, f'div[{item}]').get_attribute('class'):
                continue
            item_clicked = element_click(main_block, f'div[{item}]/div/div[2]')
            if not item_clicked:
                driver.execute_script(""window.scrollTo(0, document.body.scrollHeight);"")
                element_click(main_block, f'div[{item}]/div/div[2]')
            title = get_element_text(driver, pathes.title)
            phone_btn_clicked = element_click(driver, pathes.phone_btn)
            phone = get_element_text(driver, pathes.phone) if phone_btn_clicked else ''
            move_to_element(driver, main_block)
            link = unquote(driver.current_url)
            address = get_element_text(driver, pathes.address)
            TABLE['Название'].append(title)
            TABLE['Телефон'].append(phone)
            TABLE['Адрес'].append(address)
            TABLE['Ссылка'].append(link)
        driver.execute_script(""window.scrollTo(0, document.body.scrollHeight);"")
        element_click(driver, pathes.next_page_btn)
        sleep(0.5)
    driver.quit()
    pd.DataFrame(TABLE).to_excel(f""{search_query}.xlsx"")


if __name__ == '__main__':
    main()
"
NmFzbcTP,lab1,STANAANDREY,Bash,Monday 19th of February 2024 02:20:34 PM CDT,"#!/bin/bash

if test ""$#"" -ne 3; then
    echo ""invalid args""
    exit 1
fi

maxi=$1

if test $2 -gt $maxi; then
    maxi=$2;
fi

if test $3 -gt $maxi; then
    maxi=$3;
fi

echo ""maximum=$maxi""
"
MfrZaA4D,Roblox Require Console Crash Script,qqwizzixxxx,Lua,Monday 19th of February 2024 02:08:32 PM CDT,"--# My Own Crash Hub 'C0m3dy H4b' #--

https://create.roblox.com/store/asset/16441512927/ --  Source Model

Script:require(16441512927).fun(""Put Your Name  Here"")
Example : require(16441512927).fun(""qwizzixxxx"")

Works Only In Your Or Free Executor Games
Unleaked"
YTVCMiLg,s6l1,Pearlfromsu,C#,Monday 19th of February 2024 02:00:26 PM CDT,"using ClassLibrary1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_sharp_olympic
{
    class Program
    {
        static void psh(OwnQueue<int> q, int val)
        {
            Console.WriteLine($""+++++ {val}"");
            q.Enqueue(val);
        }
        static void rmf(OwnQueue<int> q)
        {
            int val = q.Dequeue();
            Console.WriteLine($""----- {val}"");
        }
        static void Main(string[] args)
        {
            Random rnd = new Random();
            List<int> ls = new List<int>();
            for(int i = 0; i < 100000; i++)
                ls.Add(i+1);
            
            OwnQueue<int> q = new OwnQueue<int>();
            for(int i = 0; i < ls.Count; i++)
                q.Enqueue(ls[i]);

            for(int i = 0; i < ls.Count/2; i++)
                q.Dequeue();
            //Console.WriteLine(q._head);
            //Console.WriteLine(q._tail);
            //Console.WriteLine($""Cap {q._capacity}"");

            for (int i = 0; i < ls.Count/2; i++)
                if(q.Contains(ls[i]))
                    Console.WriteLine($""UVAGA FOUND {ls[i]}"");
            
            for (int i = ls.Count / 2; i < ls.Count; i++)
                if (!q.Contains(ls[i]))
                    Console.WriteLine($""UVAGA NOT FOUND {ls[i]}"");

            Console.WriteLine(""Done"");
            /*
            var testList = new List<int>() { 1, 2, 3, 4, 5 };
            for(int i = 0; i < testList.Count; i++)
                psh(q, testList[i]);
            Console.WriteLine();
            for (int i = 0; i < testList.Count; i++)
                rmf(q);
            Console.WriteLine();
            psh(q, 5);
            psh(q, 6);
            psh(q, 7);
            psh(q, 8);
            psh(q, 9);
            rmf(q);
            rmf(q);
            rmf(q);
            psh(q, 10);
            rmf(q);
            psh(q, 11);
            psh(q, 12);
            rmf(q);
            psh(q, 13);
            psh(q, 14);
            psh(q, 15);
            psh(q, 16);
            psh(q, 17);
            psh(q, 18);
            psh(q, 19);
            psh(q, 20);
            psh(q, 21);
            psh(q, 22);
            psh(q, 23);
            psh(q, 24);
            psh(q, 25);
            psh(q, 26);
            psh(q, 27);
            psh(q, 28);
            psh(q, 29);
            rmf(q);
            rmf(q);
            psh(q, 30);
            while (q.Count > 0)
                rmf(q);
            */
            Console.ReadKey();
        }
    }
}


















using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ClassLibrary1
{
    public class OwnQueue<T>
    {
        private T[] mass = new T[4];
        private int _count = 0, _capacity = 4, _head = 0, _tail = 0;
        public OwnQueue()
        {
            _count = 0;
            _capacity = 4;
        }
        public OwnQueue(int capacity)
        {
            Count = 0;
            setCapacity(capacity);
        }
        public int Count
        {
            get
            {
                return _count;
            }
            private set
            {
                
                if (value > _capacity)
                {
                    int newCapacity = _capacity;
                    while (newCapacity < value)
                        newCapacity *= 2;
                    setCapacity(newCapacity);
                }
                _count = value;
            }
        }
        public T Peek()
        {
            if (Count == 0)
                throw new InvalidOperationException();
            return mass[_head];
        }
        public bool Contains(T item)
        {
            if (_head <= _tail)
                for (int i = _head; i <= _tail; i++)
                    if (mass[i].Equals(item))
                        return true;
            if (_head > _tail)
            {
                for (int i = _head; i < mass.Length; i++)
                    if (mass[i].Equals(item))
                        return true;
                for (int i = 0; i <= _tail; i++)
                    if (mass[i].Equals(item))
                        return true;
            }
            return false;
        }
        private void setCapacity(int value)
        {
            if (value < 0)
                throw new ArgumentOutOfRangeException();
            _capacity = value;
            T[] newArr = new T[_capacity];
            int j = 0;
            if (_head <= _tail)
                for (int i = _head; j < newArr.Length && i <= _tail; i++)
                    newArr[j++] = mass[i];
            if (_head > _tail)
            {
                for (int i = _head; j < newArr.Length && i < mass.Length; i++)
                    newArr[j++] = mass[i];
                for (int i = 0; j < newArr.Length && i <= _tail; i++)
                    newArr[j++] = mass[i];
            }
            mass = newArr;
            _head = 0;
            _tail = _count - 1;
        }
        public void Enqueue(T elem)
        {
            this.Count++;
            if (this.Count > 1)
            {
                if (_tail + 1 >= _capacity)
                    _tail = 0;
                else
                    _tail++;
            }
            mass[_tail] = elem;
            //Console.WriteLine($"" to {_tail} ({_capacity} and {_count}) ({_head} and {_tail})"");
        }
        public T Dequeue()
        {
            if(this.Count <= 0)
                throw new InvalidOperationException();
            this.Count--;
            T firstElement = mass[_head];
            //Console.WriteLine($"" from {_head} ({_capacity} and {_count}) ({_head} and {_tail})"");
            if (this.Count != 0)
            {
                if (_head + 1 >= _capacity)
                    _head = 0;
                else
                    _head++;
            }

            return firstElement;
        }

    }
}
















using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using ClassLibrary1;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {
        [TestMethod]
        public void ZeroCountAtCreation()
        {
            int expected = 0;
            OwnQueue<int> queue = new OwnQueue<int>();
            Assert.AreEqual(expected, queue.Count);
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentOutOfRangeException))]
        public void OutOfRangeException()
        {
            OwnQueue<int> queue = new OwnQueue<int>(-5);
        }

        [TestMethod]
        public void CountGrowingAfterAdd()
        {
            int n = 100;
            OwnQueue<int> queue = new OwnQueue<int>();
            int expected = n;
            for (int i = 0; i < n; i++)
                queue.Enqueue(i);
            Assert.AreEqual(expected, queue.Count);
        }

        [TestMethod]
        public void CountFallingAfterRemove()
        {
            int n = 100;
            OwnQueue<int> queue = new OwnQueue<int>();
            int expected = n - n/2;
            for (int i = 0; i < n; i++)
                queue.Enqueue(i);
            
            for (int i = 0; i < n/2; i++)
                queue.Dequeue();
            
            Assert.AreEqual(expected, queue.Count);
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void EmptyDequeueException()
        {
            OwnQueue<int> queue = new OwnQueue<int>();
            queue.Dequeue();
        }

        [TestMethod]
        [ExpectedException(typeof(InvalidOperationException))]
        public void EmptyPeekException()
        {
            OwnQueue<int> items = new OwnQueue<int>();
            items.Peek();
        }

        [TestMethod]
        public void PeekTest()
        {
            int n = 100;
            OwnQueue<int> items = new OwnQueue<int>();
            int expected = n/2+1;
            for (int i = 0; i < n; i++)
                items.Enqueue(i+1);
            for (int i = 0; i < n/2; i++)
                items.Dequeue();
            Assert.AreEqual(expected, items.Peek());
        }
        [TestMethod]
        public void ContainsTest()
        {
            int n = 100;
            OwnQueue<int> items = new OwnQueue<int>();
            for (int i = 0; i < n; i++)
                items.Enqueue(i);
            for (int i = 0; i < n/2; i++)
                items.Dequeue();
            for (int i = 0; i < n/2; i++)
                Assert.IsFalse(items.Contains(i));
            for (int i = n-n/2; i < n; i++)
                Assert.IsTrue(items.Contains(i));
        }

        [TestMethod]
        public void DequeueTest()
        {
            int n = 100;
            OwnQueue<int> items = new OwnQueue<int>();
            for (int i = 0; i < n; i++)
                items.Enqueue(i);
            for (int i = 0; i < n; i++)
                Assert.AreEqual(i, items.Dequeue());
        }
    }
}












"
evJC3F1J,update.json,Hakutaka,JSON,Monday 19th of February 2024 01:53:17 PM CDT,"{
  ""versionCode"": 1,
  ""versionName"": ""0.0.0"",
  ""Msg"": ""Pembaruan baru tersedia, untuk melanjutkan di aplikasi kami, harap perbarui.

Update Terbaru !
- Fix Server

Terimakasih "",
  ""downloadLink"": ""https://t.me/mtbinid""
  }"
yDJ7RqCd,Untitled,Pmendez,SQL,Monday 19th of February 2024 01:33:54 PM CDT,"SELECT 
  sat.NAME_LAST,
  sat.NAME_FIRST,
  MIN(sat.SECONDARY_ID) AS SECONDARY_ID,
  MAX(sat.MAX_SAT_EBRW) AS MAX_SAT_EBRW,
  MAX(sat.MAX_SAT_MATH) AS MAX_SAT_MATH,
  MAX(sat.SAT_SUPER_SCORE) AS SAT_SUPER_SCORE,
  MAX(psat.MAX_PSAT_EBRW) AS MAX_PSAT_EBRW,
  MAX(psat.MAX_PSAT_MATH) AS MAX_PSAT_MATH,
  MAX(psat.PSAT_SUPER_SCORE) AS PSAT_SUPER_SCORE,
  -- See score cutoffs by percentage below
  (CASE WHEN (MAX(sat.MAX_SAT_EBRW) > 550 OR MAX(psat.MAX_PSAT_EBRW) >550) THEN True END) AS AP_ArtHist_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1060 OR MAX(psat.PSAT_SUPER_SCORE) >1060) THEN True END) AS AP_Bio_Potential,--60
(CASE WHEN (MAX(sat.MAX_SAT_MATH) > 600 OR MAX(psat.MAX_PSAT_MATH) > 600) THEN True END) AS AP_CalcAB_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) >  1180 OR MAX(psat.PSAT_SUPER_SCORE) > 1180) THEN True END) AS AP_CSA_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) >  1060 OR MAX(psat.PSAT_SUPER_SCORE) > 1060) THEN True END) AS AP_CSPrinciples_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1120 OR MAX(psat.PSAT_SUPER_SCORE) > 1120) THEN True END) AS AP_EnvSci_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1090 OR MAX(psat.PSAT_SUPER_SCORE) > 1090) THEN True END) AS AP_EuroHist_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1200 OR MAX(psat.PSAT_SUPER_SCORE) > 1200) THEN True END) AS AP_Macroecon_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1150 OR MAX(psat.PSAT_SUPER_SCORE) > 1150) THEN True END) AS AP_Microecon_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1020 OR MAX(psat.PSAT_SUPER_SCORE) > 1020) THEN True END) AS AP_Seminar_Potential,--80
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1170 OR MAX(psat.PSAT_SUPER_SCORE) > 1170) THEN True END) AS AP_Stats_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 1100 OR MAX(psat.PSAT_SUPER_SCORE) > 1100) THEN True END) AS AP_USHist_Potential,--60
(CASE WHEN (MAX(sat.SAT_SUPER_SCORE) > 990 OR MAX(psat.PSAT_SUPER_SCORE) > 990) THEN True END) AS AP_WorldHist_Potential--60
FROM `sat_scores.SAT_MAX_SCORE_vw` AS sat
FULL JOIN `psat_scores.PSAT_MAX_SCORE_vw` AS psat
ON sat.SECONDARY_ID = psat.SECONDARY_ID

WHERE sat.NAME_LAST IS NOT NULL

GROUP BY NAME_LAST, NAME_FIRST

ORDER BY NAME_LAST, NAME_FIRST

-- Class	                  Score Source	      _90% 	_80% 	_70% 	_60% 	_50% 	_40% 	_30% 	_20% 	_10% 
-- AP Art History           EBRW Section Score	700	  630	  590	  550	  520	  490	  450	  410	  410
-- AP Biology	              Total Score	        1190	1130	1090	1060	1030	1000	970	  930	  870
-- AP Calculus AB           Math Section Score	700	  660 	620 	600 	570 	550 	520 	490 	450
-- AP Chemistry	            Total Score	        1380	1300	1250	1200	1160	1120	1080	1030	950
-- AP Computer Science A    Total Score	        1390	1300	1230	1180	1130	1080	1020	960 	860
-- AP Computer Science Pr   Total Score	        1240	1160	1100	1060	1010	970	  930 	870 	790
-- AP English Language	    EBRW Section Score	620	  590 	560 	550 	530 	510 	490	  470 	430
-- AP English Literature	  EBRW Section Score	580	  550 	520 	500 	490 	470 	450 	420 	390
-- AP Environmental Science Total Score	        1260	1200	1150	1120	1080	1050	1020	970 	910
-- AP European History	    Total Score	        1290	1200	1140	1090	1050	1010	960	  900 	860
-- AP Gov & Pol: Comp	      Total Score	        1300 	1210	1150	1110	1060	1020	970 	920 	830
-- AP Gov & Pol: US	        Total Score	        1340	1260	1210	1160	1120	1080	1030	980	  900
-- AP Human Geography	      Total Score	        1230	1150	1090	1050	1000	960	  910 	860 	860
-- AP Macroeconomics	      Total Score	        1400	1310	1250	1200	1150	1110	1060	1000	910
-- AP Microeconomics	      Total Score	        1350	1260	1200	1150	1100	1060	1010	950 	860
-- AP Music Theory	        Total Score	        1370	1250	1170	1110	1050	990 	920 	860 	860
-- AP Physics 1	            Total Score	        1420	1350	1300	1250	1220	1180	1140	1090	1010
-- AP Phys C: Elec. & Mag.  Total Score	        1500	1390	1330	1270	1220	1170	1120	1050	950
-- AP Phys C: Mechanics	    Total Score	        1360	1280	1230	1180	1140	1100	1060	1000	920
-- AP Psychology	          Total Score	        1230	1150	1090	1050	1010	970	  920 	870 	860
-- AP Seminar	              Total Score	        1120	1020	960	  900 	860 	860 	860 	860 	860
-- AP Statistics	          Total Score	        1330	1260	1210	1170	1140	1100	1060	1010	940
-- AP U.S. History	        Total Score	        1260	1190	1140	1100	1060	1020	980 	930 	860
-- AP World Hist: Modern		Total Score         1150	1080	1030	990	  960 	920 	880 	830 	760
"
U3qCWY01,OS ass2 menu driven - (round robin not correct),Eternoseeker,C++,Monday 19th of February 2024 01:30:03 PM CDT,"#include <iostream>
#include <numeric>
#include <cstdlib>
#include <vector>
#include <algorithm>
#include <queue>
#include <climits>
using namespace std;

void executeFCFS() {
    // Implementation of First Come First Serve (FCFS) scheduling algorithm
    cout << ""First Come First Serve (FCFS) Scheduling Algorithm"" << endl;
    
    int n;
    cout << ""Enter the number of processes: "";
    cin >> n;

    vector<int> arrivalTime(n);
    vector<int> burstTime(n);
    vector<int> completionTime(n);
    vector<int> turnaroundTime(n);
    vector<int> waitingTime(n);

    cout << ""Enter arrival time and burst time for each process:"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << ""Arrival time for process "" << i + 1 << "": "";
        cin >> arrivalTime[i];
        cout << ""Burst time for process "" << i + 1 << "": "";
        cin >> burstTime[i];
    }

    // Calculate completion time, turnaround time, and waiting time
    completionTime[0] = burstTime[0] + arrivalTime[0];
    turnaroundTime[0] = completionTime[0] - arrivalTime[0];
    waitingTime[0] = turnaroundTime[0] - burstTime[0];

    for (int i = 1; i < n; ++i) {
        completionTime[i] = completionTime[i - 1] + burstTime[i];
        turnaroundTime[i] = completionTime[i] - arrivalTime[i];
        waitingTime[i] = turnaroundTime[i] - burstTime[i];
    }

    // Display results
    cout << ""Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << i + 1 << ""\t"" << arrivalTime[i] << ""\t\t"" << burstTime[i] << ""\t\t"" << completionTime[i] << ""\t\t""
             << turnaroundTime[i] << ""\t\t"" << waitingTime[i] << endl;
    }

    // Calculate and display average turnaround time and average waiting time
    float avgTurnaroundTime = accumulate(turnaroundTime.begin(), turnaroundTime.end(), 0) / static_cast<float>(n);
    float avgWaitingTime = accumulate(waitingTime.begin(), waitingTime.end(), 0) / static_cast<float>(n);
    cout << ""Average Turnaround Time: "" << avgTurnaroundTime << endl;
    cout << ""Average Waiting Time: "" << avgWaitingTime << endl;
}

void executeSJFNonPreemptive() {
    // Implementation of Shortest Job First Non-Preemptive (SJF) scheduling algorithm
    cout << ""SJF Non-Preemptive Scheduling Algorithm"" << endl;
    int n;
    cout << ""Enter the number of processes: "";
    cin >> n;

    vector<int> arrivalTime(n);
    vector<int> burstTime(n);
    vector<int> completionTime(n);
    vector<int> turnaroundTime(n);
    vector<int> waitingTime(n);
    vector<bool> visited(n, false);

    cout << ""Enter arrival time and burst time for each process:"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << ""Arrival time for process "" << i + 1 << "": "";
        cin >> arrivalTime[i];
        cout << ""Burst time for process "" << i + 1 << "": "";
        cin >> burstTime[i];
    }

    int currentTime = 0;
    int completedProcesses = 0;
    while (completedProcesses < n) {
        int shortestJob = -1;
        int shortestBurst = INT_MAX;

        for (int i = 0; i < n; ++i) {
            if (!visited[i] && arrivalTime[i] <= currentTime && burstTime[i] < shortestBurst) {
                shortestBurst = burstTime[i];
                shortestJob = i;
            }
        }

        if (shortestJob == -1) {
            currentTime++;
        } else {
            completionTime[shortestJob] = currentTime + burstTime[shortestJob];
            turnaroundTime[shortestJob] = completionTime[shortestJob] - arrivalTime[shortestJob];
            waitingTime[shortestJob] = turnaroundTime[shortestJob] - burstTime[shortestJob];
            visited[shortestJob] = true;
            currentTime = completionTime[shortestJob];
            completedProcesses++;
        }
    }

    // Display results
    cout << ""Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << i + 1 << ""\t"" << arrivalTime[i] << ""\t\t"" << burstTime[i] << ""\t\t"" << completionTime[i] << ""\t\t""
             << turnaroundTime[i] << ""\t\t"" << waitingTime[i] << endl;
    }

    // Calculate and display average turnaround time and average waiting time
    float avgTurnaroundTime = accumulate(turnaroundTime.begin(), turnaroundTime.end(), 0) / static_cast<float>(n);
    float avgWaitingTime = accumulate(waitingTime.begin(), waitingTime.end(), 0) / static_cast<float>(n);
    cout << ""Average Turnaround Time: "" << avgTurnaroundTime << endl;
    cout << ""Average Waiting Time: "" << avgWaitingTime << endl;
}

void executeSJFPreemptive() {
    // Implementation of Shortest Job First Preemptive (SJF) scheduling algorithm
    cout << ""SJF Preemptive Scheduling Algorithm"" << endl;
    int n;
    cout << ""Enter the number of processes: "";
    cin >> n;

    vector<int> arrivalTime(n);
    vector<int> burstTime(n);
    vector<int> remainingTime(n); // Remaining time for each process
    vector<int> completionTime(n);
    vector<int> turnaroundTime(n);
    vector<int> waitingTime(n);

    cout << ""Enter arrival time and burst time for each process:"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << ""Arrival time for process "" << i + 1 << "": "";
        cin >> arrivalTime[i];
        cout << ""Burst time for process "" << i + 1 << "": "";
        cin >> burstTime[i];
        remainingTime[i] = burstTime[i]; // Initialize remaining time
    }

    int currentTime = 0;
    int completedProcesses = 0;
    while (completedProcesses < n) {
        int shortestJob = -1;
        int shortestBurst = INT_MAX;

        for (int i = 0; i < n; ++i) {
            if (arrivalTime[i] <= currentTime && remainingTime[i] < shortestBurst && remainingTime[i] > 0) {
                shortestBurst = remainingTime[i];
                shortestJob = i;
            }
        }

        if (shortestJob == -1) {
            currentTime++;
        } else {
            remainingTime[shortestJob]--;
            if (remainingTime[shortestJob] == 0) {
                completionTime[shortestJob] = currentTime + 1;
                turnaroundTime[shortestJob] = completionTime[shortestJob] - arrivalTime[shortestJob];
                waitingTime[shortestJob] = turnaroundTime[shortestJob] - burstTime[shortestJob];
                completedProcesses++;
            }
            currentTime++;
        }
    }

    // Display results
    cout << ""Process\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << i + 1 << ""\t"" << arrivalTime[i] << ""\t\t"" << burstTime[i] << ""\t\t"" << completionTime[i] << ""\t\t""
             << turnaroundTime[i] << ""\t\t"" << waitingTime[i] << endl;
    }

    // Calculate and display average turnaround time and average waiting time
    float avgTurnaroundTime = accumulate(turnaroundTime.begin(), turnaroundTime.end(), 0) / static_cast<float>(n);
    float avgWaitingTime = accumulate(waitingTime.begin(), waitingTime.end(), 0) / static_cast<float>(n);
    cout << ""Average Turnaround Time: "" << avgTurnaroundTime << endl;
    cout << ""Average Waiting Time: "" << avgWaitingTime << endl;
}

void executePriorityScheduling() {
    // Implementation of Priority Scheduling algorithm
    cout << ""Priority Scheduling Algorithm"" << endl;
    int n;
    cout << ""Enter the number of processes: "";
    cin >> n;

    vector<int> arrivalTime(n);
    vector<int> burstTime(n);
    vector<int> priority(n);
    vector<int> completionTime(n);
    vector<int> turnaroundTime(n);
    vector<int> waitingTime(n);
    vector<bool> visited(n, false);

    cout << ""Enter arrival time, burst time, and priority for each process:"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << ""Arrival time for process "" << i + 1 << "": "";
        cin >> arrivalTime[i];
        cout << ""Burst time for process "" << i + 1 << "": "";
        cin >> burstTime[i];
        cout << ""Priority for process "" << i + 1 << "": "";
        cin >> priority[i];
    }

    int currentTime = 0;
    int completedProcesses = 0;
    while (completedProcesses < n) {
        int highestPriorityJob = -1;
        int highestPriority = INT_MAX;

        for (int i = 0; i < n; ++i) {
            if (!visited[i] && arrivalTime[i] <= currentTime && priority[i] < highestPriority) {
                highestPriority = priority[i];
                highestPriorityJob = i;
            }
        }

        if (highestPriorityJob == -1) {
            currentTime++;
        } else {
            completionTime[highestPriorityJob] = currentTime + burstTime[highestPriorityJob];
            turnaroundTime[highestPriorityJob] = completionTime[highestPriorityJob] - arrivalTime[highestPriorityJob];
            waitingTime[highestPriorityJob] = turnaroundTime[highestPriorityJob] - burstTime[highestPriorityJob];
            visited[highestPriorityJob] = true;
            currentTime = completionTime[highestPriorityJob];
            completedProcesses++;
        }
    }

    // Display results
    cout << ""Process\tArrival Time\tBurst Time\tPriority\tCompletion Time\tTurnaround Time\tWaiting Time"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << i + 1 << ""\t"" << arrivalTime[i] << ""\t\t"" << burstTime[i] << ""\t\t"" << priority[i] << ""\t\t""
             << completionTime[i] << ""\t\t"" << turnaroundTime[i] << ""\t\t"" << waitingTime[i] << endl;
    }

    // Calculate and display average turnaround time and average waiting time
    float avgTurnaroundTime = accumulate(turnaroundTime.begin(), turnaroundTime.end(), 0) / static_cast<float>(n);
    float avgWaitingTime = accumulate(waitingTime.begin(), waitingTime.end(), 0) / static_cast<float>(n);
    cout << ""Average Turnaround Time: "" << avgTurnaroundTime << endl;
    cout << ""Average Waiting Time: "" << avgWaitingTime << endl;
}

void executeRoundRobin() {
    // Implementation of Round Robin scheduling algorithm
    cout << ""Round Robin Scheduling Algorithm"" << endl;
    
    int n;
    cout << ""Enter the number of processes: "";
    cin >> n;

    vector<int> burstTime(n);
    vector<int> completionTime(n);
    vector<int> turnaroundTime(n);
    vector<int> waitingTime(n);

    cout << ""Enter burst time for each process:"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << ""Burst time for process "" << i + 1 << "": "";
        cin >> burstTime[i];
    }

    int timeQuantum;
    cout << ""Enter the time quantum: "";
    cin >> timeQuantum;

    queue<int> processQueue; // Queue to store the processes
    vector<int> remainingTime(burstTime); // Remaining time for each process

    int currentTime = 0;
    int completedProcesses = 0;
    while (completedProcesses < n) {
        for (int i = 0; i < n; ++i) {
            if (remainingTime[i] > 0) {
                int executionTime = min(timeQuantum, remainingTime[i]);
                remainingTime[i] -= executionTime;
                currentTime += executionTime;

                if (remainingTime[i] == 0) {
                    completionTime[i] = currentTime;
                    turnaroundTime[i] = completionTime[i];
                    waitingTime[i] = turnaroundTime[i] - burstTime[i];
                    completedProcesses++;
                } else {
                    processQueue.push(i); // Push the process back into the queue
                }
            }
        }

        // Handle the processes in the queue when time quantum expires
        if (!processQueue.empty()) {
            int nextProcess = processQueue.front();
            processQueue.pop();
            processQueue.push(nextProcess); // Move the next process to the end of the queue
            currentTime++;
        }
    }

    // Display results
    cout << ""Process\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time"" << endl;
    for (int i = 0; i < n; ++i) {
        cout << i + 1 << ""\t"" << burstTime[i] << ""\t\t"" << completionTime[i] << ""\t\t""
             << turnaroundTime[i] << ""\t\t"" << waitingTime[i] << endl;
    }

    // Calculate and display average turnaround time and average waiting time
    float avgTurnaroundTime = accumulate(turnaroundTime.begin(), turnaroundTime.end(), 0) / static_cast<float>(n);
    float avgWaitingTime = accumulate(waitingTime.begin(), waitingTime.end(), 0) / static_cast<float>(n);
    cout << ""Average Turnaround Time: "" << avgTurnaroundTime << endl;
    cout << ""Average Waiting Time: "" << avgWaitingTime << endl;
}

void displayMenu() {
    cout << ""Scheduling Algorithms Menu"" << endl;
    cout << ""1. First Come First Serve (FCFS)"" << endl;
    cout << ""2. Shortest Job First Non-Preemptive (SJF)"" << endl;
    cout << ""3. Shortest Job First Preemptive (SJF Preemptive)"" << endl;
    cout << ""4. Priority Scheduling"" << endl;
    cout << ""5. Round Robin Scheduling"" << endl;
    cout << ""6. Exit"" << endl;
}

void executeAlgorithm(int choice) {
    switch (choice) {
        case 1:
            executeFCFS();
            break;
        case 2:
            executeSJFNonPreemptive();
            break;
        case 3:
            executeSJFPreemptive();
            break;
        case 4:
            executePriorityScheduling();
            break;
        case 5:
            executeRoundRobin();
            break;
        case 6:
            cout << ""Exiting..."" << endl;
            exit(0);
        default:
            cout << ""Invalid choice!"" << endl;
    }
}

int main() {
    int choice;
    do {
        displayMenu();
        cout << ""Enter your choice: "";
        cin >> choice;
        executeAlgorithm(choice);
    } while (choice != 6);

    return 0;
}
"
Dpcdy9MM,Jeff Wilkinson Keystone Bank - Scam,bombaires,AIMMS,Monday 19th of February 2024 01:28:29 PM CDT,"<a href=""mailto:keystonebjeffwilkinson@gmail.com"">keystonebjeffwilkinson@gmail.com</a>
<a href=""mailto:k.ey.st.on.ebj.ef.f.wi.lk.i.n.s.on@gmail.com"">k.ey.st.on.ebj.ef.f.wi.lk.i.n.s.on@gmail.com</a>
<a href=""mailto:k.e.y.sto.ne.b.je.ffw.il.kin.s.o.n@gmail.com"">k.e.y.sto.ne.b.je.ffw.il.kin.s.o.n@gmail.com</a>
<a href=""mailto:keyst.one.b.jeffw.il.kinso.n@gmail.com"">keyst.one.b.jeffw.il.kinso.n@gmail.com</a>
<a href=""mailto:keyston.e.bj.e.f.fw.il.ki.ns.o.n@gmail.com"">keyston.e.bj.e.f.fw.il.ki.ns.o.n@gmail.com</a>
<a href=""mailto:keys.ton.eb.je.f.f.w.i.l.kins.on@gmail.com"">keys.ton.eb.je.f.f.w.i.l.kins.on@gmail.com</a>
<a href=""mailto:k.ey.s.tone.b.j.e.f.f.wi.l.kins.on@gmail.com"">k.ey.s.tone.b.j.e.f.f.wi.l.kins.on@gmail.com</a>
<a href=""mailto:k.e.yst.one.b.j.e.f.f.w.ilk.i.n.s.on@gmail.com"">k.e.yst.one.b.j.e.f.f.w.ilk.i.n.s.on@gmail.com</a>
<a href=""mailto:k.e.yston.e.bj.e.f.fwilkins.on@gmail.com"">k.e.yston.e.bj.e.f.fwilkins.on@gmail.com</a>
<a href=""mailto:keyst.o.n.e.b.je.f.f.w.ilkin.so.n@gmail.com"">keyst.o.n.e.b.je.f.f.w.ilkin.so.n@gmail.com</a>
<a href=""mailto:keys.tonebj.ef.fwi.lk.i.n.so.n@gmail.com"">keys.tonebj.ef.fwi.lk.i.n.so.n@gmail.com</a>
<a href=""mailto:ke.y.sto.ne.bj.e.f.fwil.k.ins.on@gmail.com"">ke.y.sto.ne.bj.e.f.fwil.k.ins.on@gmail.com</a>
<a href=""mailto:k.e.y.st.one.bjef.fwil.ki.ns.o.n@gmail.com"">k.e.y.st.one.bjef.fwil.ki.ns.o.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.on.eb.j.e.ffw.il.k.i.n.so.n@gmail.com"">k.ey.s.t.on.eb.j.e.ffw.il.k.i.n.so.n@gmail.com</a>
<a href=""mailto:k.ey.s.to.n.e.bj.ef.f.w.ilk.in.s.o.n@gmail.com"">k.ey.s.to.n.e.bj.ef.f.w.ilk.in.s.o.n@gmail.com</a>
<a href=""mailto:ke.y.s.t.on.e.b.j.effwi.l.k.in.so.n@gmail.com"">ke.y.s.t.on.e.b.j.effwi.l.k.in.so.n@gmail.com</a>
<a href=""mailto:k.e.y.s.tone.b.j.e.f.f.w.il.ki.nso.n@gmail.com"">k.e.y.s.tone.b.j.e.f.f.w.il.ki.nso.n@gmail.com</a>
<a href=""mailto:k.e.ys.t.oneb.je.f.fwi.l.kins.o.n@gmail.com"">k.e.ys.t.oneb.je.f.fwi.l.kins.o.n@gmail.com</a>
<a href=""mailto:key.st.o.nebje.ffwi.l.k.i.n.son@gmail.com"">key.st.o.nebje.ffwi.l.k.i.n.son@gmail.com</a>
<a href=""mailto:ke.ys.t.o.n.e.b.jeffwil.ki.nso.n@gmail.com"">ke.ys.t.o.n.e.b.jeffwil.ki.nso.n@gmail.com</a>
<a href=""mailto:ke.y.s.to.n.e.b.j.e.f.f.w.il.ki.ns.on@gmail.com"">ke.y.s.to.n.e.b.j.e.f.f.w.il.ki.ns.on@gmail.com</a>
<a href=""mailto:k.eyst.one.bj.ef.fwilki.n.so.n@gmail.com"">k.eyst.one.bj.ef.fwilki.n.so.n@gmail.com</a>
<a href=""mailto:k.e.ys.t.o.n.ebj.eff.wil.k.in.s.on@gmail.com"">k.e.ys.t.o.n.ebj.eff.wil.k.in.s.on@gmail.com</a>
<a href=""mailto:k.e.yst.on.ebj.e.ffwi.l.kins.o.n@gmail.com"">k.e.yst.on.ebj.e.ffwi.l.kins.o.n@gmail.com</a>
<a href=""mailto:keyston.eb.j.eff.w.il.k.inson@gmail.com"">keyston.eb.j.eff.w.il.k.inson@gmail.com</a>
<a href=""mailto:k.ey.st.o.n.eb.j.e.f.f.wilki.nson@gmail.com"">k.ey.st.o.n.eb.j.e.f.f.wilki.nson@gmail.com</a>
<a href=""mailto:k.eyst.o.neb.j.ef.f.wi.lki.n.s.on@gmail.com"">k.eyst.o.neb.j.ef.f.wi.lki.n.s.on@gmail.com</a>
<a href=""mailto:keyst.o.n.eb.jeffw.il.ki.n.son@gmail.com"">keyst.o.n.eb.jeffw.il.ki.n.son@gmail.com</a>
<a href=""mailto:keys.t.o.n.ebj.e.f.f.w.i.l.ki.nson@gmail.com"">keys.t.o.n.ebj.e.f.f.w.i.l.ki.nson@gmail.com</a>
<a href=""mailto:ke.ys.ton.ebjeff.wi.lkins.o.n@gmail.com"">ke.ys.ton.ebjeff.wi.lkins.o.n@gmail.com</a>
<a href=""mailto:key.st.o.n.e.b.j.effwi.lkins.o.n@gmail.com"">key.st.o.n.e.b.j.effwi.lkins.o.n@gmail.com</a>
<a href=""mailto:key.sto.n.e.b.jef.f.wi.l.k.in.s.o.n@gmail.com"">key.sto.n.e.b.jef.f.wi.l.k.in.s.o.n@gmail.com</a>
<a href=""mailto:k.eys.t.o.ne.bj.eff.wi.l.k.in.son@gmail.com"">k.eys.t.o.ne.bj.eff.wi.l.k.in.son@gmail.com</a>
<a href=""mailto:k.e.ys.t.o.n.e.bje.ffwi.l.k.i.n.son@gmail.com"">k.e.ys.t.o.n.e.bje.ffwi.l.k.i.n.son@gmail.com</a>
<a href=""mailto:keyston.ebj.eff.wil.kin.s.on@gmail.com"">keyston.ebj.eff.wil.kin.s.on@gmail.com</a>
<a href=""mailto:ke.y.ston.ebjeff.w.i.l.kins.on@gmail.com"">ke.y.ston.ebjeff.w.i.l.kins.on@gmail.com</a>
<a href=""mailto:ke.ystonebj.e.f.fw.ilkins.on@gmail.com"">ke.ystonebj.e.f.fw.ilkins.on@gmail.com</a>
<a href=""mailto:ke.yston.eb.j.e.f.f.wi.lki.ns.o.n@gmail.com"">ke.yston.eb.j.e.f.f.wi.lki.ns.o.n@gmail.com</a>
<a href=""mailto:k.e.ys.t.one.bje.ffwi.l.k.ins.o.n@gmail.com"">k.e.ys.t.one.bje.ffwi.l.k.ins.o.n@gmail.com</a>
<a href=""mailto:keys.toneb.j.effwi.lki.nso.n@gmail.com"">keys.toneb.j.effwi.lki.nso.n@gmail.com</a>
<a href=""mailto:key.st.oneb.jef.f.w.il.k.i.n.s.o.n@gmail.com"">key.st.oneb.jef.f.w.il.k.i.n.s.o.n@gmail.com</a>
<a href=""mailto:keyst.on.ebje.f.f.w.i.l.kinson@gmail.com"">keyst.on.ebje.f.f.w.i.l.kinson@gmail.com</a>
<a href=""mailto:keysto.n.ebj.e.f.f.wil.k.i.nson@gmail.com"">keysto.n.ebj.e.f.f.wil.k.i.nson@gmail.com</a>
<a href=""mailto:k.e.ys.t.o.ne.b.j.e.f.f.w.il.kins.on@gmail.com"">k.e.ys.t.o.ne.b.j.e.f.f.w.il.kins.on@gmail.com</a>
<a href=""mailto:ke.y.s.ton.e.b.jef.f.wil.k.in.s.on@gmail.com"">ke.y.s.ton.e.b.jef.f.wil.k.in.s.on@gmail.com</a>
<a href=""mailto:k.e.y.s.t.on.eb.j.e.f.fw.il.ki.ns.o.n@gmail.com"">k.e.y.s.t.on.eb.j.e.f.fw.il.ki.ns.o.n@gmail.com</a>
<a href=""mailto:key.st.oneb.j.ef.f.wi.lk.i.ns.o.n@gmail.com"">key.st.oneb.j.ef.f.wi.lk.i.ns.o.n@gmail.com</a>
<a href=""mailto:k.e.y.s.t.o.n.e.b.j.e.f.f.wi.l.ki.n.son@gmail.com"">k.e.y.s.t.o.n.e.b.j.e.f.f.wi.l.ki.n.son@gmail.com</a>
<a href=""mailto:ke.yst.on.e.bjef.fwi.lk.i.n.s.o.n@gmail.com"">ke.yst.on.e.bjef.fwi.lk.i.n.s.o.n@gmail.com</a>
<a href=""mailto:ke.y.sto.n.e.b.j.e.ff.wil.kinson@gmail.com"">ke.y.sto.n.e.b.j.e.ff.wil.kinson@gmail.com</a>
<a href=""mailto:k.ey.s.t.o.n.e.b.je.f.fw.ilkinso.n@gmail.com"">k.ey.s.t.o.n.e.b.je.f.fw.ilkinso.n@gmail.com</a>
<a href=""mailto:ke.ysto.n.e.b.j.e.ffw.il.ki.n.son@gmail.com"">ke.ysto.n.e.b.j.e.ffw.il.ki.n.son@gmail.com</a>
<a href=""mailto:ke.y.s.tonebje.f.fw.i.l.k.i.n.s.o.n@gmail.com"">ke.y.s.tonebje.f.fw.i.l.k.i.n.s.o.n@gmail.com</a>
<a href=""mailto:key.st.one.b.jeff.wi.lk.inson@gmail.com"">key.st.one.b.jeff.wi.lk.inson@gmail.com</a>
<a href=""mailto:ke.ysto.n.e.b.j.ef.fw.i.lki.nson@gmail.com"">ke.ysto.n.e.b.j.ef.fw.i.lki.nson@gmail.com</a>
<a href=""mailto:k.eyston.e.bj.e.ffw.il.k.in.so.n@gmail.com"">k.eyston.e.bj.e.ffw.il.k.in.so.n@gmail.com</a>
<a href=""mailto:keys.tone.bjeffw.ilki.ns.on@gmail.com"">keys.tone.bjeffw.ilki.ns.on@gmail.com</a>
<a href=""mailto:k.ey.s.to.n.e.b.j.effwi.lkinso.n@gmail.com"">k.ey.s.to.n.e.b.j.effwi.lkinso.n@gmail.com</a>
<a href=""mailto:k.eysto.neb.je.ff.w.ilk.i.n.s.on@gmail.com"">k.eysto.neb.je.ff.w.ilk.i.n.s.on@gmail.com</a>
<a href=""mailto:ke.y.s.to.n.eb.je.f.f.w.ilk.in.s.o.n@gmail.com"">ke.y.s.to.n.eb.je.f.f.w.ilk.in.s.o.n@gmail.com</a>
<a href=""mailto:ke.ys.t.o.ne.bjef.fw.il.k.in.s.o.n@gmail.com"">ke.ys.t.o.ne.bjef.fw.il.k.in.s.o.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.on.ebje.f.f.w.i.lk.i.nso.n@gmail.com"">k.ey.s.t.on.ebje.f.f.w.i.lk.i.nso.n@gmail.com</a>
<a href=""mailto:k.e.y.sto.n.eb.j.eff.wil.kin.so.n@gmail.com"">k.e.y.sto.n.eb.j.eff.wil.kin.so.n@gmail.com</a>
<a href=""mailto:k.ey.stonebj.e.f.fwilk.inso.n@gmail.com"">k.ey.stonebj.e.f.fwilk.inso.n@gmail.com</a>
<a href=""mailto:ke.y.s.to.ne.bj.ef.f.wil.k.inson@gmail.com"">ke.y.s.to.ne.bj.ef.f.wil.k.inson@gmail.com</a>
<a href=""mailto:k.e.ysto.ne.b.je.ffwil.kin.s.on@gmail.com"">k.e.ysto.ne.b.je.ffwil.kin.s.on@gmail.com</a>
<a href=""mailto:ke.y.s.to.n.e.b.jef.fw.il.k.i.nso.n@gmail.com"">ke.y.s.to.n.e.b.jef.fw.il.k.i.nso.n@gmail.com</a>
<a href=""mailto:keys.t.oneb.j.ef.f.w.il.ki.nson@gmail.com"">keys.t.oneb.j.ef.f.w.il.ki.nson@gmail.com</a>
<a href=""mailto:k.e.ys.t.on.e.b.je.f.f.w.i.l.k.ins.o.n@gmail.com"">k.e.ys.t.on.e.b.je.f.f.w.i.l.k.ins.o.n@gmail.com</a>
<a href=""mailto:keys.t.oneb.je.ffwil.ki.ns.on@gmail.com"">keys.t.oneb.je.ffwil.ki.ns.on@gmail.com</a>
<a href=""mailto:ke.y.st.o.n.e.b.jeff.wi.lk.i.ns.o.n@gmail.com"">ke.y.st.o.n.e.b.jeff.wi.lk.i.ns.o.n@gmail.com</a>
<a href=""mailto:ke.y.s.tone.b.j.e.ffw.ilk.i.n.so.n@gmail.com"">ke.y.s.tone.b.j.e.ffw.ilk.i.n.so.n@gmail.com</a>
<a href=""mailto:ke.yst.one.b.j.e.ffw.ilki.ns.o.n@gmail.com"">ke.yst.one.b.j.e.ffw.ilki.ns.o.n@gmail.com</a>
<a href=""mailto:ke.ys.t.o.n.ebj.e.ffwil.k.i.ns.on@gmail.com"">ke.ys.t.o.n.ebj.e.ffwil.k.i.ns.on@gmail.com</a>
<a href=""mailto:k.e.ystoneb.jeff.w.i.l.k.in.son@gmail.com"">k.e.ystoneb.jeff.w.i.l.k.in.son@gmail.com</a>
<a href=""mailto:k.eyst.on.e.b.jef.fwi.l.ki.n.son@gmail.com"">k.eyst.on.e.b.jef.fwi.l.ki.n.son@gmail.com</a>
<a href=""mailto:k.ey.st.on.e.bj.effwilkin.so.n@gmail.com"">k.ey.st.on.e.bj.effwilkin.so.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.o.ne.bj.e.ff.w.ilk.i.ns.on@gmail.com"">k.ey.s.t.o.ne.bj.e.ff.w.ilk.i.ns.on@gmail.com</a>
<a href=""mailto:k.e.y.s.t.o.n.e.bje.ffw.ilkin.son@gmail.com"">k.e.y.s.t.o.n.e.bje.ffw.ilkin.son@gmail.com</a>
<a href=""mailto:ke.y.s.ton.ebjeffw.il.k.inson@gmail.com"">ke.y.s.ton.ebjeffw.il.k.inson@gmail.com</a>
<a href=""mailto:keyst.onebjef.f.wi.l.kinso.n@gmail.com"">keyst.onebjef.f.wi.l.kinso.n@gmail.com</a>
<a href=""mailto:k.ey.sto.ne.bje.ffwilk.i.nso.n@gmail.com"">k.ey.sto.ne.bje.ffwilk.i.nso.n@gmail.com</a>
<a href=""mailto:keys.t.o.ne.b.j.e.f.fwi.l.k.in.s.on@gmail.com"">keys.t.o.ne.b.j.e.f.fwi.l.k.in.s.on@gmail.com</a>
<a href=""mailto:k.eys.toneb.je.f.f.w.i.l.k.in.son@gmail.com"">k.eys.toneb.je.f.f.w.i.l.k.in.son@gmail.com</a>
<a href=""mailto:ke.ystonebj.ef.f.w.i.lkins.on@gmail.com"">ke.ystonebj.ef.f.w.i.lkins.on@gmail.com</a>
<a href=""mailto:k.eys.t.one.bj.ef.f.w.i.lk.in.son@gmail.com"">k.eys.t.one.bj.ef.f.w.i.lk.in.son@gmail.com</a>
<a href=""mailto:ke.y.st.on.e.bj.e.ff.w.il.k.i.ns.o.n@gmail.com"">ke.y.st.on.e.bj.e.ff.w.il.k.i.ns.o.n@gmail.com</a>
<a href=""mailto:k.eyst.o.n.ebj.e.ffw.i.l.k.ins.o.n@gmail.com"">k.eyst.o.n.ebj.e.ffw.i.l.k.ins.o.n@gmail.com</a>
<a href=""mailto:keyst.o.n.e.b.j.e.f.fwil.k.i.n.so.n@gmail.com"">keyst.o.n.e.b.j.e.f.fwil.k.i.n.so.n@gmail.com</a>
<a href=""mailto:keys.ton.e.b.j.e.f.f.wi.l.ki.n.so.n@gmail.com"">keys.ton.e.b.j.e.f.f.wi.l.ki.n.so.n@gmail.com</a>
<a href=""mailto:ke.y.st.on.e.b.je.f.fwilk.in.s.on@gmail.com"">ke.y.st.on.e.b.je.f.fwilk.in.s.on@gmail.com</a>
<a href=""mailto:k.eys.to.nebjef.fwilk.in.son@gmail.com"">k.eys.to.nebjef.fwilk.in.son@gmail.com</a>
<a href=""mailto:ke.yst.one.b.j.e.ff.w.i.l.k.in.son@gmail.com"">ke.yst.one.b.j.e.ff.w.i.l.k.in.son@gmail.com</a>
<a href=""mailto:ke.ys.t.o.nebjeff.wi.lkinson@gmail.com"">ke.ys.t.o.nebjeff.wi.lkinson@gmail.com</a>
<a href=""mailto:k.e.ys.t.o.neb.je.f.f.w.il.ki.ns.o.n@gmail.com"">k.e.ys.t.o.neb.je.f.f.w.il.ki.ns.o.n@gmail.com</a>
<a href=""mailto:k.ey.ston.ebj.ef.fw.i.lkins.o.n@gmail.com"">k.ey.ston.ebj.ef.fw.i.lkins.o.n@gmail.com</a>
<a href=""mailto:key.sto.neb.j.effwi.lkins.on@gmail.com"">key.sto.neb.j.effwi.lkins.on@gmail.com</a>
<a href=""mailto:k.ey.s.to.ne.bj.e.f.fwi.lkins.o.n@gmail.com"">k.ey.s.to.ne.bj.e.f.fwi.lkins.o.n@gmail.com</a>
<a href=""mailto:keys.tone.bj.e.f.fwi.lki.n.so.n@gmail.com"">keys.tone.bj.e.f.fwi.lki.n.so.n@gmail.com</a>
<a href=""mailto:k.ey.stonebj.e.ff.wi.lk.i.n.s.on@gmail.com"">k.ey.stonebj.e.ff.wi.lk.i.n.s.on@gmail.com</a>
<a href=""mailto:k.ey.s.tonebj.ef.f.w.ilkin.so.n@gmail.com"">k.ey.s.tonebj.ef.f.w.ilkin.so.n@gmail.com</a>
<a href=""mailto:k.e.yst.o.nebje.f.f.w.i.l.ki.ns.on@gmail.com"">k.e.yst.o.nebje.f.f.w.i.l.ki.ns.on@gmail.com</a>
<a href=""mailto:k.eyst.o.ne.bje.ffwilk.i.nson@gmail.com"">k.eyst.o.ne.bje.ffwilk.i.nson@gmail.com</a>
<a href=""mailto:k.ey.st.oneb.j.e.f.fwil.k.inson@gmail.com"">k.ey.st.oneb.j.e.f.fwil.k.inson@gmail.com</a>
<a href=""mailto:ke.ys.t.o.n.e.bj.eff.w.i.l.k.in.so.n@gmail.com"">ke.ys.t.o.n.e.bj.eff.w.i.l.k.in.so.n@gmail.com</a>
<a href=""mailto:k.ey.st.o.ne.b.je.ffw.il.k.ins.o.n@gmail.com"">k.ey.st.o.ne.b.je.ffw.il.k.ins.o.n@gmail.com</a>
<a href=""mailto:keys.tonebje.ffwilk.in.s.on@gmail.com"">keys.tonebje.ffwilk.in.s.on@gmail.com</a>
<a href=""mailto:ke.y.s.t.o.n.eb.je.ffw.il.k.ins.o.n@gmail.com"">ke.y.s.t.o.n.eb.je.ffw.il.k.ins.o.n@gmail.com</a>
<a href=""mailto:key.s.t.o.n.ebj.ef.f.wilk.ins.on@gmail.com"">key.s.t.o.n.ebj.ef.f.wilk.ins.on@gmail.com</a>
<a href=""mailto:k.e.y.s.t.o.n.e.b.je.ffw.i.lk.i.n.so.n@gmail.com"">k.e.y.s.t.o.n.e.b.je.ffw.i.lk.i.n.so.n@gmail.com</a>
<a href=""mailto:k.eys.tonebj.e.ff.w.i.lki.n.s.on@gmail.com"">k.eys.tonebj.e.ff.w.i.lki.n.s.on@gmail.com</a>
<a href=""mailto:ke.ys.t.one.b.j.e.ffw.i.lkinson@gmail.com"">ke.ys.t.one.b.j.e.ffw.i.lkinson@gmail.com</a>
<a href=""mailto:k.eyst.on.e.bj.effwilki.nso.n@gmail.com"">k.eyst.on.e.bj.effwilki.nso.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.o.ne.bj.e.f.fwilk.i.n.s.on@gmail.com"">k.ey.s.t.o.ne.bj.e.f.fwilk.i.n.s.on@gmail.com</a>
<a href=""mailto:keys.to.ne.b.je.ff.w.i.lkinso.n@gmail.com"">keys.to.ne.b.je.ff.w.i.lkinso.n@gmail.com</a>
<a href=""mailto:k.eyst.o.neb.jeffwil.ki.n.s.o.n@gmail.com"">k.eyst.o.neb.jeffwil.ki.n.s.o.n@gmail.com</a>
<a href=""mailto:keys.t.o.neb.j.e.f.fw.i.lki.nson@gmail.com"">keys.t.o.neb.j.e.f.fw.i.lki.nson@gmail.com</a>
<a href=""mailto:ke.ys.ton.ebje.f.f.w.i.lki.nson@gmail.com"">ke.ys.ton.ebje.f.f.w.i.lki.nson@gmail.com</a>
<a href=""mailto:ke.ys.t.o.ne.bje.f.fw.i.l.kins.on@gmail.com"">ke.ys.t.o.ne.bje.f.fw.i.l.kins.on@gmail.com</a>
<a href=""mailto:k.ey.s.ton.ebje.f.fwi.l.ki.nso.n@gmail.com"">k.ey.s.ton.ebje.f.fwi.l.ki.nso.n@gmail.com</a>
<a href=""mailto:k.eys.to.ne.bj.e.f.f.wi.l.ki.n.so.n@gmail.com"">k.eys.to.ne.bj.e.f.f.wi.l.ki.n.so.n@gmail.com</a>
<a href=""mailto:ke.yston.eb.jeff.w.ilk.in.so.n@gmail.com"">ke.yston.eb.jeff.w.ilk.in.so.n@gmail.com</a>
<a href=""mailto:ke.y.s.ton.ebj.eff.w.ilk.inso.n@gmail.com"">ke.y.s.ton.ebj.eff.w.ilk.inso.n@gmail.com</a>
<a href=""mailto:ke.y.st.onebj.eff.w.ilkin.son@gmail.com"">ke.y.st.onebj.eff.w.ilkin.son@gmail.com</a>
<a href=""mailto:key.sto.n.ebjef.fw.ilkinson@gmail.com"">key.sto.n.ebjef.fw.ilkinson@gmail.com</a>
<a href=""mailto:key.stone.b.jeffw.ilkin.so.n@gmail.com"">key.stone.b.jeffw.ilkin.so.n@gmail.com</a>
<a href=""mailto:ke.y.s.t.on.ebj.e.ff.wi.l.k.i.ns.on@gmail.com"">ke.y.s.t.on.ebj.e.ff.wi.l.k.i.ns.on@gmail.com</a>
<a href=""mailto:k.ey.ston.ebj.e.f.f.wil.kinson@gmail.com"">k.ey.ston.ebj.e.f.f.wil.kinson@gmail.com</a>
<a href=""mailto:keys.t.on.e.bj.e.f.fw.i.lki.ns.on@gmail.com"">keys.t.on.e.bj.e.f.fw.i.lki.ns.on@gmail.com</a>
<a href=""mailto:k.eyst.o.neb.jeff.wilk.i.n.son@gmail.com"">k.eyst.o.neb.jeff.wilk.i.n.son@gmail.com</a>
<a href=""mailto:k.ey.st.on.e.b.je.f.f.wilk.i.n.s.on@gmail.com"">k.ey.st.on.e.b.je.f.f.wilk.i.n.s.on@gmail.com</a>
<a href=""mailto:ke.ys.toneb.jef.fwil.kin.s.o.n@gmail.com"">ke.ys.toneb.jef.fwil.kin.s.o.n@gmail.com</a>
<a href=""mailto:ke.y.s.t.one.bj.e.f.f.w.i.l.k.ins.o.n@gmail.com"">ke.y.s.t.one.bj.e.f.f.w.i.l.k.ins.o.n@gmail.com</a>
<a href=""mailto:key.s.ton.eb.j.e.f.fwi.lki.n.so.n@gmail.com"">key.s.ton.eb.j.e.f.fwi.lki.n.so.n@gmail.com</a>
<a href=""mailto:k.eys.t.o.n.e.bj.e.f.f.wilki.nso.n@gmail.com"">k.eys.t.o.n.e.bj.e.f.f.wilki.nso.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.one.bj.e.f.f.w.i.l.k.i.n.s.o.n@gmail.com"">k.ey.s.t.one.bj.e.f.f.w.i.l.k.i.n.s.o.n@gmail.com</a>
<a href=""mailto:k.ey.s.to.n.eb.j.effwi.lk.i.nso.n@gmail.com"">k.ey.s.to.n.eb.j.effwi.lk.i.nso.n@gmail.com</a>
<a href=""mailto:k.e.yst.on.eb.j.e.f.fw.i.l.kin.so.n@gmail.com"">k.e.yst.on.eb.j.e.f.fw.i.l.kin.so.n@gmail.com</a>
<a href=""mailto:k.ey.st.on.e.bj.e.f.fwi.lkin.so.n@gmail.com"">k.ey.st.on.e.bj.e.f.fwi.lkin.so.n@gmail.com</a>
<a href=""mailto:ke.ys.ton.e.b.jef.fw.i.lki.n.son@gmail.com"">ke.ys.ton.e.b.jef.fw.i.lki.n.son@gmail.com</a>
<a href=""mailto:key.stone.bjeff.w.i.lkin.s.o.n@gmail.com"">key.stone.bjeff.w.i.lkin.s.o.n@gmail.com</a>
<a href=""mailto:ke.ys.t.one.b.jeffw.i.l.k.ins.o.n@gmail.com"">ke.ys.t.one.b.jeffw.i.l.k.ins.o.n@gmail.com</a>
<a href=""mailto:k.e.ys.to.n.e.bjeffw.il.kin.son@gmail.com"">k.e.ys.to.n.e.bjeffw.il.kin.son@gmail.com</a>
<a href=""mailto:ke.y.sto.n.ebj.eff.wil.kins.o.n@gmail.com"">ke.y.sto.n.ebj.eff.wil.kins.o.n@gmail.com</a>
<a href=""mailto:keys.t.on.e.b.jeffwil.ki.n.s.o.n@gmail.com"">keys.t.on.e.b.jeffwil.ki.n.s.o.n@gmail.com</a>
<a href=""mailto:ke.y.s.t.o.n.ebje.f.fwi.l.k.i.ns.on@gmail.com"">ke.y.s.t.o.n.ebje.f.fwi.l.k.i.ns.on@gmail.com</a>
<a href=""mailto:k.e.y.stone.b.j.e.f.fw.il.kins.on@gmail.com"">k.e.y.stone.b.j.e.f.fw.il.kins.on@gmail.com</a>
<a href=""mailto:key.s.t.on.ebj.ef.f.w.ilki.ns.on@gmail.com"">key.s.t.on.ebj.ef.f.w.ilki.ns.on@gmail.com</a>
<a href=""mailto:key.s.t.o.ne.bj.eff.w.il.k.i.n.s.on@gmail.com"">key.s.t.o.ne.bj.eff.w.il.k.i.n.s.on@gmail.com</a>
<a href=""mailto:keys.t.o.n.eb.je.ff.wi.l.kins.on@gmail.com"">keys.t.o.n.eb.je.ff.wi.l.kins.on@gmail.com</a>
<a href=""mailto:k.eysto.ne.b.j.e.ff.wil.kin.son@gmail.com"">k.eysto.ne.b.j.e.ff.wil.kin.son@gmail.com</a>
<a href=""mailto:k.e.ys.t.o.ne.bje.ff.w.il.k.i.n.s.o.n@gmail.com"">k.e.ys.t.o.ne.bje.ff.w.il.k.i.n.s.o.n@gmail.com</a>
<a href=""mailto:key.ston.e.b.j.ef.f.wi.lki.n.s.on@gmail.com"">key.ston.e.b.j.ef.f.wi.lki.n.s.on@gmail.com</a>
<a href=""mailto:keys.t.one.bj.e.ffw.i.l.k.i.n.so.n@gmail.com"">keys.t.one.bj.e.ffw.i.l.k.i.n.so.n@gmail.com</a>
<a href=""mailto:ke.y.s.t.o.n.eb.j.e.f.f.wi.l.kin.son@gmail.com"">ke.y.s.t.o.n.eb.j.e.f.f.wi.l.kin.son@gmail.com</a>
<a href=""mailto:keysto.neb.j.e.f.fw.i.lk.i.ns.o.n@gmail.com"">keysto.neb.j.e.f.fw.i.lk.i.ns.o.n@gmail.com</a>
<a href=""mailto:keys.t.on.ebje.ff.w.il.k.ins.on@gmail.com"">keys.t.on.ebje.ff.w.il.k.ins.on@gmail.com</a>
<a href=""mailto:ke.y.s.to.n.ebj.ef.fw.il.k.ins.on@gmail.com"">ke.y.s.to.n.ebj.ef.fw.il.k.ins.on@gmail.com</a>
<a href=""mailto:k.ey.s.t.on.e.b.je.ff.w.i.l.k.ins.on@gmail.com"">k.ey.s.t.on.e.b.je.ff.w.i.l.k.ins.on@gmail.com</a>
<a href=""mailto:ke.ys.to.n.ebje.ff.w.i.l.ki.nso.n@gmail.com"">ke.ys.to.n.ebje.ff.w.i.l.ki.nso.n@gmail.com</a>
<a href=""mailto:k.ey.st.oneb.jef.fwi.l.ki.ns.o.n@gmail.com"">k.ey.st.oneb.jef.fwi.l.ki.ns.o.n@gmail.com</a>
<a href=""mailto:k.e.yston.e.bj.e.f.f.wil.kins.on@gmail.com"">k.e.yston.e.bj.e.f.f.wil.kins.on@gmail.com</a>
<a href=""mailto:keys.tonebj.e.ffwil.kin.s.o.n@gmail.com"">keys.tonebj.e.ffwil.kin.s.o.n@gmail.com</a>
<a href=""mailto:key.st.o.n.e.bj.ef.fw.i.lk.in.s.on@gmail.com"">key.st.o.n.e.bj.ef.fw.i.lk.in.s.on@gmail.com</a>
<a href=""mailto:k.e.y.s.t.one.b.j.ef.fwi.lk.in.s.o.n@gmail.com"">k.e.y.s.t.one.b.j.ef.fwi.lk.in.s.o.n@gmail.com</a>
<a href=""mailto:k.eysto.neb.je.ff.w.i.l.kin.s.o.n@gmail.com"">k.eysto.neb.je.ff.w.i.l.kin.s.o.n@gmail.com</a>
<a href=""mailto:k.e.yston.e.bjeffw.il.k.i.nson@gmail.com"">k.e.yston.e.bjeffw.il.k.i.nson@gmail.com</a>
<a href=""mailto:k.e.ys.to.n.e.bj.e.ffwilk.i.n.s.on@gmail.com"">k.e.ys.to.n.e.bj.e.ffwilk.i.n.s.on@gmail.com</a>
<a href=""mailto:k.e.yst.o.n.e.b.jef.fwi.lk.in.s.o.n@gmail.com"">k.e.yst.o.n.e.b.jef.fwi.lk.in.s.o.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.oneb.je.ff.w.i.l.kin.s.o.n@gmail.com"">k.ey.s.t.oneb.je.ff.w.i.l.kin.s.o.n@gmail.com</a>
<a href=""mailto:ke.y.st.o.n.e.b.je.ffwi.lki.ns.on@gmail.com"">ke.y.st.o.n.e.b.je.ffwi.lki.ns.on@gmail.com</a>
<a href=""mailto:k.e.ys.t.o.ne.bjeff.wi.l.k.i.ns.o.n@gmail.com"">k.e.ys.t.o.ne.bjeff.wi.l.k.i.ns.o.n@gmail.com</a>
<a href=""mailto:k.ey.ston.eb.je.f.f.wilk.in.s.on@gmail.com"">k.ey.ston.eb.je.f.f.wilk.in.s.on@gmail.com</a>
<a href=""mailto:k.e.ys.t.on.eb.jeffw.i.lki.nso.n@gmail.com"">k.e.ys.t.on.eb.jeffw.i.lki.nso.n@gmail.com</a>
<a href=""mailto:ke.y.s.to.n.e.b.j.ef.fwi.l.ki.nso.n@gmail.com"">ke.y.s.to.n.e.b.j.ef.fwi.l.ki.nso.n@gmail.com</a>
<a href=""mailto:k.ey.s.t.on.eb.j.e.ff.wi.l.k.i.n.s.o.n@gmail.com"">k.ey.s.t.on.eb.j.e.ff.wi.l.k.i.n.s.o.n@gmail.com</a>
<a href=""mailto:k.eyst.o.nebj.effwi.lki.n.so.n@gmail.com"">k.eyst.o.nebj.effwi.lki.n.so.n@gmail.com</a>
<a href=""mailto:k.ey.s.tonebj.effwil.kinso.n@gmail.com"">k.ey.s.tonebj.effwil.kinso.n@gmail.com</a>
<a href=""mailto:k.ey.stone.bj.ef.f.wil.ki.nson@gmail.com"">k.ey.stone.bj.ef.f.wil.ki.nson@gmail.com</a>
<a href=""mailto:key.stone.b.jef.fw.ilk.i.nson@gmail.com"">key.stone.b.jef.fw.ilk.i.nson@gmail.com</a>
<a href=""mailto:k.e.y.s.to.n.e.bje.ff.wi.lk.i.nson@gmail.com"">k.e.y.s.to.n.e.bje.ff.wi.lk.i.nson@gmail.com</a>
<a href=""mailto:k.ey.s.ton.eb.j.eff.wilki.ns.o.n@gmail.com"">k.ey.s.ton.eb.j.eff.wilki.ns.o.n@gmail.com</a>
<a href=""mailto:keys.t.oneb.jeff.wi.l.k.i.n.s.on@gmail.com"">keys.t.oneb.jeff.wi.l.k.i.n.s.on@gmail.com</a>
<a href=""mailto:key.sto.neb.j.e.f.f.wi.lkins.o.n@gmail.com"">key.sto.neb.j.e.f.f.wi.lkins.o.n@gmail.com</a>
<a href=""mailto:ke.y.s.t.o.n.eb.j.eff.w.il.k.i.n.s.o.n@gmail.com"">ke.y.s.t.o.n.eb.j.eff.w.il.k.i.n.s.o.n@gmail.com</a>
<a href=""mailto:k.eysto.n.ebje.ff.w.i.l.k.i.nso.n@gmail.com"">k.eysto.n.ebje.ff.w.i.l.k.i.nso.n@gmail.com</a>
<a href=""mailto:k.e.y.s.tone.b.jef.f.wi.l.k.in.son@gmail.com"">k.e.y.s.tone.b.jef.f.wi.l.k.in.son@gmail.com</a>
<a href=""mailto:k.eys.tone.bjef.fwi.lki.n.son@gmail.com"">k.eys.tone.bjef.fwi.lki.n.son@gmail.com</a>
<a href=""mailto:k.e.yston.eb.je.f.fw.i.lkin.son@gmail.com"">k.e.yston.eb.je.f.fw.i.lkin.son@gmail.com</a>
<a href=""mailto:ke.y.s.to.n.e.bjef.fw.i.l.k.in.son@gmail.com"">ke.y.s.to.n.e.bjef.fw.i.l.k.in.son@gmail.com</a>
<a href=""mailto:key.st.on.eb.je.ffwi.l.k.in.s.on@gmail.com"">key.st.on.eb.je.ffwi.l.k.in.s.on@gmail.com</a>
<a href=""mailto:k.ey.sto.neb.je.f.fwi.l.ki.n.so.n@gmail.com"">k.ey.sto.neb.je.f.fwi.l.ki.n.so.n@gmail.com</a>
<a href=""mailto:k.eyst.onebj.e.f.f.wilk.i.nson@gmail.com"">k.eyst.onebj.e.f.f.wilk.i.nson@gmail.com</a>
<a href=""mailto:k.e.ys.to.ne.bj.e.ffw.i.lkin.s.o.n@gmail.com"">k.e.ys.to.ne.bj.e.ffw.i.lkin.s.o.n@gmail.com</a>
<a href=""mailto:k.e.y.ston.e.b.j.e.ffw.il.kin.son@gmail.com"">k.e.y.ston.e.b.j.e.ffw.il.kin.son@gmail.com</a>
<a href=""mailto:keys.to.ne.b.j.e.ffwilki.n.son@gmail.com"">keys.to.ne.b.j.e.ffwilki.n.son@gmail.com</a>
<a href=""mailto:k.eysto.ne.bjeff.wi.l.k.i.ns.on@gmail.com"">k.eysto.ne.bjeff.wi.l.k.i.ns.on@gmail.com</a>
<a href=""mailto:key.st.o.n.ebje.ffwi.lk.inso.n@gmail.com"">key.st.o.n.ebje.ffwi.lk.inso.n@gmail.com</a>
<a href=""mailto:k.e.yst.o.n.e.bj.e.f.f.w.i.lkinson@gmail.com"">k.e.yst.o.n.e.bj.e.f.f.w.i.lkinson@gmail.com</a>
<a href=""mailto:key.s.tone.b.j.e.ffwil.ki.nso.n@gmail.com"">key.s.tone.b.j.e.ffwil.ki.nso.n@gmail.com</a>
<a href=""mailto:k.ey.sto.n.ebj.ef.fwilkins.on@gmail.com"">k.ey.sto.n.ebj.ef.fwilkins.on@gmail.com</a>"
8UwXAvtt,Godot Intro Messages/Copyright Fade,metalx1000,Godot GLSL,Monday 19th of February 2024 01:24:49 PM CDT,"extends Control

var count = 0
var msgs = [
	""My Game"",
	""FBK Game Studios"",
	""This file is part of the My Game Projecy.
 Copyright (c) 2024 Kris Occhpinti.
 https://filmsbykris.com
 
 This program is free software: you can redistribute it and/or modify  
 it under the terms of the GNU General Public License as published by  
 the Free Software Foundation, version 3."",
 
 ""This program is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of 
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU 
 General Public License for more details.
 
 You should have received a copy of the GNU General Public License 
 along with this program. If not, see <http://www.gnu.org/licenses/>.""
	
]
# Called when the node enters the scene tree for the first time.
func _ready():
	$Label.text = msgs[count]


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	if Input.is_action_just_pressed(""ui_accept""):
		$AnimationPlayer.seek(0)
		next_msg()
	pass


func next_msg():
	count += 1
	
	if count >= msgs.size():
		next_scene()
	else:
		$Label.text = msgs[count]
		
func next_scene():
	get_tree().change_scene_to_file(""res://titles screen.tscn"")
"
gw21yELg,邀您一起看：MKMP_089隣に住む絶倫タカシ君とチ●ポ好きお姉ちゃん 星美りか new,xiaomianao666,JavaScript,Monday 19th of February 2024 01:01:28 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥MKMP_089隣に住む絶倫タカシ君とチ●ポ好きお姉ちゃん 星美りか new@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInBhcmFtc1wiOlwie1xcXCJuYW1lXFxcIjpcXFwi55m95auW6LWE5rqQXFxcIixcXFwicGljX3VybFxcXCI6XFxcImh0dHBzOi8vcGljMzMuYW56aXNlLmNvbS9waWMvMjAyMjA2MjMvYWFkMzIzMjM4NDJlN2FiZTFiMmZhMWYwMTQ0MjE0Y2EvMS5qcGdAUmVmZXJlcj1cXFwifVwiLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLnmb3lq5botYTmupBcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL2VtcHR5IyNodHRwczovL3d3dy5reGdhdi5jb20vYXBpL3htbC5waHA/YWM9dmlkZW9saXN0Jmlkcz0yNDM2NTQjaW1tZXJzaXZlVGhlbWUjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoTGludXjvvJvvvJsgQW5kcm9pZCAxMe+8m++8myBNaSAxMCBQcm8pIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIENocm9tZS84OC4wLjQzMjQuMTUyIE1vYmlsZSBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcInRleHRfNVwiLFwiZmluZF9ydWxlXCI6XCJqczpcXG5yZXF1aXJlKGNvbmZpZy7mqKHmnb8pO1xcbuS6jOe6pygpO1wiLFwiZ3JvdXBcIjpcIjEw56aP5YipXCIsXCJ1YVwiOlwibW9iaWxlXCIsXCJwcmVSdWxlXCI6XCJqczpcXG5yZXF1aXJlKCdodHRwczovL2dpdGNvZGUubmV0L3FxXzMyMzk0MzUxL2RyLy0vcmF3L21hc3Rlci9qcy/otYTmupDnvZHpooTlpITnkIYuanMnKTtcIixcInBhZ2VzXCI6XCJbXVwifSIsInBpY1VybCI6Imh0dHBzOi8vcGljMzMuYW56aXNlLmNvbS9waWMvMjAyMjA2MjMvYWFkMzIzMjM4NDJlN2FiZTFiMmZhMWYwMTQ0MjE0Y2EvMS5qcGdAUmVmZXJlcj0iLCJ0aXRsZSI6Ik1LTVBfMDg56Zqj44Gr5L2P44KA57W25YCr44K/44Kr44K35ZCb44Go44OB4peP44Od5aW944GN44GK5aeJ44Gh44KD44KTIOaYn+e+juOCiuOBiyBuZXcifQ==
xKpEgtvK,"evanthe, code. //",wilderanima,CSS,Monday 19th of February 2024 12:51:45 PM CDT,"<head>

<!-------ICONS------->
<script src=""https://kit.fontawesome.com/91131b39b7.js"" crossorigin=""anonymous""></script>

<link rel=""stylesheet"" href=""https://cdn.linearicons.com/free/1.0.0/icon-font.min.css"">


<!-------MUSIC PLAYER BY GLENTHEMES------->
<link href=""https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css"" rel=""stylesheet"">

<script src=""//ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"" type=""text/javascript""></script>

<script src=""//glenthemes.github.io/-music-/glenplayer07.js"" type=""text/javascript""></script>

<link href=""https://fonts.googleapis.com/icon?family=Material+Icons"" rel=""stylesheet"">

<!-------TOOL TIPS------>

<script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.7/jquery.min.js"" type=""text/javascript""></script>

<script src=""https://static.tumblr.com/iuw14ew/VSQma1786/jquery.style-my-tooltips.js"" type=""text/javascript""></script>

<script src=""//pull.cappuccicons.com/cpf.js"" type=""text/javascript""></script>

<script type=""text/javascript""> (function($){ $(document).ready(function(){ $(""a[title]"").style_my_tooltips({ tip_follows_cursor:true, tip_delay_time:40, tip_fade_speed:200, attribute:""title"" }); }); })(jQuery); </script></head>

<style>
@import url('https://fonts.googleapis.com/css2?family=Great+Vibes&family=Mukta&family=Old+Standard+TT:ital,wght@0,400;0,700;1,400&family=Parisienne&family=Prata&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Be+Vietnam:ital,wght@0,100;0,300;0,400;0,500;0,600;0,700;0,800;1,100;1,300;1,400;1,500;1,600;1,700;1,800&display=swap');

@import url('https://fonts.googleapis.com/css2?family=Varela+Round&family=Karla&family=Libre+Franklin&family=Be+Vietnam+Pro&family=Josefin+Sans:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;1,100;1,200;1,300;1,400;1,500;1,600;1,700&family=Alata&family=Mitr:wght@200;300;400;500;600;700&display=swap');
@font-face {font-family: ""beaufort""; src: url('//glen-assets.github.io/fonts/Beaufort W01 Regular.ttf');} 

body {background-color: #000; background-size: 40px 40px; text-transform: lowercase; font-family: 'Be Vietnam', sans-serif; font-size: 11px; color: #909090; letter-spacing: 0.3px; text-align: justify;}

* {cursor: url(https://i.ibb.co/1M967Gm/cursor.png), auto;}
 
::-webkit-scrollbar { width: 0px;}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb { background: transparent;}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb { background: transparent;}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb { background: transparent;}
::-webkit-scrollbar-track, ::-webkit-scrollbar-thumb { background: transparent;} 

h1 {position:relative; font-family: 'karla', cursive; font-size: 15px; margin: 0px; margin-top: 15px; opacity: 0.8; margin-bottom: 5; padding-bottom: 5px; border-bottom: 1px solid #2A2929; color: #525252; text-transform: uppercase;}

h2 {font-size: 8px; text-transform: uppercase; font-family: beaufort; letter-spacing: 1.5; margin-top: 0; color: #8A8A8A; font-weight: 900;}

p {margin-top: 0; margin-bottom: 5;}

.content {position: relative; top: 5; bottom: 0; left: 0; right: 0; margin: auto; background: ; width: 400; text-align: justify;}

.gallery {bottom: 0; left: 0; right: 0; margin: auto; margin-top: 20; position: ; background: ; width: 432; height: ; padding: 10; text-align: justify; background-color: ;}

.img-frame {float: left; margin: 7px 8px 8px; width: 200; height: 140px; outline: 1px solid #2A2929; outline-offset: 5px; text-align: center; transition: all 0.5s linear;}

.img-1 {height: 100%; width: 100%; background-image: url(https://i.imgur.com/CglV3tO.gif); background-position: center ; background-repeat: no-repeat; background-size: cover; transition: all 0.5s linear;}

.img-2 {height: 100%; width: 100%; background-image: url(https://i.imgur.com/hvdRYma.gif); background-position: center; background-repeat: no-repeat; background-size: cover; filter: grayscale(0%); transition: all 0.5s linear;}

.contact {margin: 0px 0px 0px; text-align: center; line-height:;}

.contact img {margin: 5; width: 55; height: 55; -webkit-filter: grayscale(100%); /* Safari 6.0 - 9.0 */ filter: grayscale(100%); outline: 1px solid #423737; outline-offset: 3px; border-radius: ; transition: all 500ms linear;}

.contact img:hover {-webkit-filter: grayscale(0%); /* Safari 6.0 - 9.0 */ filter: grayscale(0%); outline: 1px solid #7A7A7A;}

a {color: #FAFFDF; text-decoration: none; font-weight: bold; font-family: Josefin Sans; font-size: 10;}

a:hover {color: #d22042;}

#s-m-t-tooltip {font-weight: 600; max-width:250px; max-height:auto; line-height: 1.5; color:#FFFFFF; text-align: left; font-family: 'Josefin Sans', sans-serif; font-size: 10px; padding:5px; background: #000000; box-shadow: 0px 0px 5px #D9D4D4; border: 2px solid #000000; text-transform: none; border-radius:0px; margin-top:25px; z-index:9999999999; text-align: center; opacity: 0; text-shadow: none; -webkit-box-shadow: 0px 0px 2px 0px rgb(0 0 0 / 87%); -moz-box-shadow: 0px 0px 2px 0px rgba(0, 0, 0, 0.274); box-shadow: 0px 0px 2px 0px rgb(0 0 0 / 7%); font-weight 800;}

b {font-family: 'Varela Round'; font-size: 9;}

i {color:630436;}

</style>

<center>

<div class=""gallery"">

<div class=""img-frame""><div class=""img-1""></div></div>
<div class=""img-frame""><div class=""img-2""></div></div> </div>

<div class=""content"">


<center>
<small>
<h1>EVANTHE ELETRA HELLEBORE</h1> 
<i style=""font-family: beaufort; font-size: 11.5px; "">

</i> 
<center>
<h2>The moon is my mother. She is not sweet like Mary.</h2>
</center><br>

<div style=""padding-left: 20; padding-right: 20; line-height: 1.4;""><p>

<i class=""fa-solid fa-gift"" style=""margin-right: 3px;font-size: 10;""></i> august 11th (18)

<i class=""fa-solid fa-droplet"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i> pureblood <i class=""fa-solid fa-circle-nodes"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i>Greek / Italian / British

<i class=""fa-solid fa-heart-crack"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i> <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=liam"">captivated</a> 

<p><i class=""fa-solid fa-wand-magic-sparkles"" style=""margin-right: 3px;font-size: 10;margin-bottom:5;""></i> 12¾"" yew, cyclops retina, unyielding </p>


</center>

<div style=""padding-left: 30; padding-right: 30; line-height: 1.4;"">

<b style=""font-size: 12px; ""> general</b>
<div style=""padding-left: 10; padding-right: 10; line-height: 1.4;"">
<p style=""margin-top: 5;""><i class=""fa-solid fa-graduation-cap"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i><b>alumnus</b> <i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> hogwarts; <b><font color=""#630436"">7th year ravenclaw; prefect</font></b></p>
<p style=""""><i class=""fa-solid fa-trophy"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i><b>best subjects</b> <i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> ancient runes / transfiguration / charms </p>


<p><i class=""fa-solid fa-paw"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i><b>patronus</b> <i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> classified
<i class=""fa-solid fa-spider"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i><b>boggart</b> <i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> classified</p>


<p style=""margin-bottom:;""><i class=""fa-brands fa-envira"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i><b>scent</b> <i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> black dahlia, black licorice, and morning dew </p> 

<p style=""margin-bottom: 10;""><i class=""fa-solid fa-flask"" style=""margin-left: 3px;margin-right: 3px;font-size: 10;""></i><b>amortentia</b> <i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> classified</p>


</div>

<b style=""font-size: 12px; ""> headcanons</b>

<div style=""padding-left: 10; padding-right: 10; line-height: 1.4;"">
<p style=""margin-top: 5;"">
<i class=""fa-solid fa-quote-left"" style=""margin-right: 3px;""></i>
</p>

<p style=""margin-top: 5;"">
<i class=""fa-solid fa-quote-left"" style=""margin-right: 3px;""></i>

</p>
</div>

<p style=""margin-top: 10;"">
 <b style=""font-size: 12px;""> connections </b><br>
</p>
 <div class=""contact"">
 <a target=""_blank"" href=""https://i.imgur.com/TUdwwVk.gif"" title=""Hermes. Familiar. Death's Head Hawk Moth."" >
 <img src=""https://i.imgur.com/TUdwwVk.gif"">
 </a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=Kalypso"" title=""Kalypso. Younger Sister."" >
 <img src=""https://i.imgur.com/WILuMHN.gif"">
 </a>
 
 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=hellebore"" title=""Brontë. Younger Sister."" >
 <img src=""https://imgur.com/1SYgcVz.gif"">
 </a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=hub"" title=""Evangeline. Aunt."" >
 <img src=""https://i.imgur.com/BEHVM4L.gif"">
 </a> 
 
 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=liam"" title=""Liam. Boyfriend."" >
 <img src=""https://i.imgur.com/gpD9nIH.gif"">
 </a>

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=gelais"" title=""Enoch. Friend."" >
 <img src=""https://i.imgur.com/ZFxYW6c.gif"">
 </a> 

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user="" title=""Name. Relation."" >
 <img src=""https://via.placeholder.com/60.gif/"">
 </a> 

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user="" title=""Name. Relation."" >
 <img src=""https://via.placeholder.com/60.gif/"">
 </a> 

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user="" title=""Name. Relation."" >
 <img src=""https://via.placeholder.com/60.gif/"">
 </a> 

 <a target=""_blank"" href=""https://roleplay.chat/profile.php?user="" title=""Name. Relation."" >
 <img src=""https://via.placeholder.com/60.gif/"">
 </a> 
 

</div>

</div>


<br><br>
<center>
<b style=""font-size: 11px; border-top: 1px solid #2A2929; padding-left: 50;padding-right: 50;padding-top:5;"">out of character</b>
<br><br>
<i class=""fa-solid fa-caret-right"" style=""margin-right: 3px;""></i> open to connections <b><i>!</i></b>

<i class=""fa-solid fa-caret-right"" style=""margin-left: 3px;margin-right: 3px;""></i> face claim is <a target=""_blank"" href=""https://hqroleplaygifs.tumblr.com/troianbellisario/pll"">troian bellisario</a> <b><i>!</i></b>

<i class=""fa-solid fa-caret-right"" style=""margin-left: 3px;margin-right: 3px;""></i> code by <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=angelite"">angelite</a> <b><i>!</i></b>
<br> <br>
</small>
<!--
	MUSIC PLAYER #02 by glenthemes
	♬ glenthpvs.tumblr.com/player02
--->
	
<script src=""//cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js""></script>
<link href=""//fonts.googleapis.com/css?family=Readex+Pro"" rel=""stylesheet"">
<link href=""//glenthemes.github.io/-music-/glenplayer02.css"" rel=""stylesheet"">
<script src=""//glenthemes.github.io/-music-/glenplayer02.js""></script>
<style element=""glenplayer02"">
	:root {
	--MusicPlayer-Position:bottom left;
	--MusicPlayer-Edge-Offset:18px;
	
	--MusicPlayer-Buttons-Size:14px;
	--MusicPlayer-Buttons-Color:#FAFFDF;
	--MusicPlayer-Buttons-Fill:no;
	
	--MusicPlayer-Note-Size:11px;
	--MusicPlayer-Note-Color:#FAFFDF;
	
	--MusicPlayer-Spacing-1:7px;
	--MusicPlayer-Spacing-2:9px;
	
	--MusicPlayer-Text-Size:9px;
	--MusicPlayer-Text-Color:#FAFFDF;
	}
</style>

<div glenplayer02>
	<div controls></div>
	
	<i class=""aa-line-icons"" icon-name=""music-2""></i>
	
	<!-- SONG NAME HERE -->
	Darkside — NEONI 
	
 <!-- HOW TO CHANGE THE MUSIC -->
	<!-- linktr.ee/direct_file_links -->
	<audio src=""https://audio.jukehost.co.uk/D3GG06BaYi5WCGolwesRLO8WUn1wC8Am"" volume=""100%""></audio>
	
</div><!--don't delete this line-->
<!--end music player--> 
</div>

"
AQH3sgxr,"demian, code. //",wilderanima,CSS,Monday 19th of February 2024 12:50:26 PM CDT,"<body><html><head>
<script src=""//ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script src=""//ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.6.5/dat.gui.min.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/prefixfree/1.0.7/prefixfree.min.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/d3/4.11.0/d3.min.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script type=""f34f9d25ef4961a21b244453-text/javascript"" src=""https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js""></script>
<script src=""https://roleplay.chat/jquery.tooltipster.js?v=8"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/gsap/1.20.3/TweenMax.min.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/three.js/87/three.js"" type=""f34f9d25ef4961a21b244453-text/javascript""></script>
<link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css"">
<link href=""https://roleplay.chat/tooltipster.css"" rel=""stylesheet"" type=""text/css"">
<link href=""https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"" rel=""stylesheet"" integrity=""sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN"" crossorigin=""anonymous"">
<script defer type=""f34f9d25ef4961a21b244453-text/javascript"">
window.onload = function() {

};
</script>

<script type=""f34f9d25ef4961a21b244453-text/javascript"">
$(document).ready(function() {
// Tooltip only Text
$('.masterTooltip').hover(function(){
 // Hover over code
 var title = $(this).attr('title');
 $(this).data('tipText', title).removeAttr('title');
 $('<p class=""tooltip""></p>')
 .text(title)
 .appendTo('body')
 .fadeIn('slow');
}, function() {
 // Hover out code
 $(this).attr('title', $(this).data('tipText'));
 $('.tooltip').remove();
}).mousemove(function(e) {
 var mousex = e.pageX + 20; //Get X coordinates
 var mousey = e.pageY + 10; //Get Y coordinates
 $('.tooltip')
 .css({ top: mousey, left: mousex })
});
});
</script>

<style> 

@import url('https://fonts.googleapis.com/css?family=Economica|Roboto Condensed|Six Caps');

body { cursor: url(https://i.imgur.com/WIeMSiR.png), auto;background-color: #0c1619; background-image: url(""https://www.transparenttextures.com/patterns/brilliant.png"");}

::-webkit-scrollbar { width: 4px;}

/* Track */
::-webkit-scrollbar-track { background: #; }
 
/* Handle */
::-webkit-scrollbar-thumb { background: #; }

/* Handle on hover */
::-webkit-scrollbar-thumb:hover { background: #; }

/* The typing effect */
@keyframes typing { from { width: 0 } to { width: 100% } }

/* The typewriter cursor effect */
@keyframes blink-caret { from, to { border-color: transparent } 50% { border-color: } }

a {cursor: url(https://i.imgur.com/WIeMSiR.png), auto;}

@font-face{ src:url(https://dl.dropbox.com/s/f4rvkr4ybrkqryz/Geomancy%20-%20Extra%20Bold.otf); font-family:'geo';}

@font-face{ src:url(https://dl.dropbox.com/s/9ln5dag3xxe3du3/staravenue.ttf); font-family:'star';}

.mainbox {position: fixed; background-color: #; background-image: url(""""); width: 710px; height: 455px; border:0px solid; border-color: #fff; margin: auto; left: 100px; right: 0px; top: 250px; bottom: 50px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #000); }

.box1 {position: fixed; background-color: #000; opacity:1; background-image: url(""""); width: 170px; height: 304px; border:0px solid; border-color: #fff; margin: auto; left: 130px; right: 0px; top:-110px; bottom: -60px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #); }

.box2 {position: fixed; background-color: #000; opacity:1; background-image: url(""""); width: 170px; height: 304px; border:0px solid; border-color: #fff; margin: auto; left: 605px; right: 0px; top:-110px; bottom: -60px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #); }

.box3 {position: fixed; background-color: #000; opacity:1; background-image: url(""""); width: 90px; height: 392px; border:0px solid; border-color: #fff; margin: auto; left: 400px; right: 0px; top:-175px; bottom: -34px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #); }

.box4 {position: fixed; background-color: #000; opacity:1; background-image: url(""""); width: 170px; height: 304px; border:0px solid; border-color: #fff; margin: auto; left: -220px; right: 0px; top:-113px; bottom: 117px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #); } 
 
 .strike5 {position: fixed; background-color: #000; opacity:1; background-image: url(""""); width: 935px; height: 20px; border:0px solid; border-color: #fff; margin: auto; left: -161px; right: -3px; top:-53px; bottom: 797px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #); }

 .strike6 {position: fixed; background-color: #000; opacity:1; background-image: url(""""); width: 935px; height: 20px; border:0px solid; border-color: #fff; margin: auto; left: -161px; right: -3px; top:-53px; bottom:-335px; z-index:4; border-radius:0px; filter:drop-shadow(0px 0px 1px #); }

.mainestimg{background-image:url(https://i.imgur.com/awWODuS.jpg); background-repeat:no-repeat; width:316px; height:393px; background-size:100%; position:absolute; top:-38; left:-160; z-index:9;
filter:drop-shadow(0px 0px 2px #); border: 0px solid; border-color: #; opacity:0.9; filter: grayscale(15%);}

.mainimg{background-image:url(https://i.imgur.com/fc0hCOL.gif); background-repeat:no-repeat; width:170px; height:83px; background-size:100%; position:absolute; top:-38; left:605;
z-index:4; filter:drop-shadow(0px 0px 2px #); border: 0px solid; border-color: #; opacity:0.9; filter: grayscale(100%);} 

.mainimg2{background-image:url(https://i.imgur.com/XolTHIp.gif); background-repeat:no-repeat; width:170px; height:85px; background-size:100%; position:absolute; top:-40; left:335;
z-index:4; filter:drop-shadow(0px 0px 2px #); border: 0px solid; border-color: #; opacity:0.9; filter: grayscale(100%);}

.mainimg3{background-image:url(https://i.imgur.com/00oaYbY.gif); background-repeat:no-repeat; width:170px; height:85px; background-size:100%; position:absolute; top:270; left:160;
z-index:9; filter:drop-shadow(0px 0px 2px #); border: 0px solid; border-color: #; opacity:0.9; filter: grayscale(100%);}

@font-face{ src:url(https://dl.dropbox.com/s/vygy5und5fm5wte/The%20Star%20in%20the%20Midnight.ttf?dl=0); font-family:'namerz';}

@font-face{ src:url(https://dl.dropbox.com/s/gykqp15dno5lt4i/Holimount%20swash.otf?dl=0); font-family:'swash';}

@font-face{ src:url(https://dl.dropbox.com/s/5roct3qujcuaa43/APOLLO.otf?dl=0); font-family:'namer';}

@font-face{ src:url(https://dl.dropbox.com/s/br2skah67bjh2a9/MORVA.ttf); font-family:'new';} 

@font-face{ src:url(https://dl.dropbox.com/s/rdzvaqiof87izan/Congratulations_DEMO.ttf); font-family:'sign';}

.gryff{ letter-spacing: ; z-index: 6; position: fixed; left:-146px; bottom: 477px; font-family: 'new', cursive; font-size:100px; color: #29373A;text-shadow: 1px 1px 1px #000000; position: absolute; width:410px; filter:drop-shadow(0px 0px 1px #000000); }

.quote{ letter-spacing:-1 ; z-index: 5; position: fixed; left: 130px; bottom: 60px; font-family: 'namerz', cursive; font-size:57px; color: #414d50;text-shadow: 0px 0px 0px #; position: absolute; width:510px; filter:drop-shadow(0px 0px 3px #a7c7a7); }

.title{ letter-spacing:-1 ; z-index: 6; position: fixed; left: 190px; bottom: 474px; font-family: 'namerz', cursive; font-size:100px; color: #414d50;text-shadow: 2px 2px 2px #000000; position: absolute; width:600px; filter:drop-shadow(0px 0px 2px #545e61); }

.title2{ letter-spacing:-1 ; z-index: 5; position: fixed; left: 450px; bottom: 408px; font-family: 'namerz', cursive; font-size:60px; color: #414d50;text-shadow: 0px 0px 0px #000000; position: absolute; width:0px; filter:drop-shadow(0px 0px 1px #000); }

.swoosh{ letter-spacing: ; z-index: 5; position: fixed; left: 326px; bottom: 493px; font-family: 'swash', cursive; font-size:95px; color: #414d50;text-shadow: 0px 0px 0px #; position: absolute; width:410px; filter:drop-shadow(0px 0px 2px #a7c7a7); }

.stats{ letter-spacing: 0; z-index: 5; position: fixed; left: 357px; bottom: 461px; font-family: 'new', cursive; font-size:31px; color: #054727;text-shadow: 0px 0px 3px #; position: absolute; width:410px; filter:drop-shadow(0px 0px 2px #054727); }

.ooc{ letter-spacing: 0; z-index: 5; position: fixed; left: 553px; bottom: 463px; font-family: 'new', cursive; font-size:26px; color: #054727;text-shadow: 0px 0px 3px #; position: absolute; width:410px; filter:drop-shadow(0px 0px 2px #054727); }

.hc{ letter-spacing: 0; z-index: 5; position: fixed; left: 169px; bottom: 117px; font-family: 'new', cursive; font-size:31px; color: #054727;text-shadow: 0px 0px 3px #; position: absolute; width:410px; filter:drop-shadow(0px 0px 2px #054727); }

.conne{ letter-spacing: 0; z-index: 5; position: fixed; left: 358px; bottom: 117px; font-family: 'new', cursive; font-size:31px; color: #054727;text-shadow: 0px 0px 3px #; position: absolute; width:410px; filter:drop-shadow(0px 0px 2px #054727); }

.words {position: absolute; bottom: 0px; left: 6px; margin: auto; opacity:1; height: 298px; width: 155px; padding: 0px; text-align: justify; font-size: 12px; overflow: auto; text-ident: 10px; color: #fce8f7; font-family: economica; z-index:20}

.words2 {position: absolute; bottom: 0px; left: 6px; margin: auto; opacity:1; height: 298px; width: 155px; padding: 0px; text-align: justify; font-size: 12px; overflow: auto; text-ident: 10px; color: #fce8f7; font-family: economica; z-index:20}

p{ font-family: 'Economica'; font-size: 14px; letter-spacing: 0px; word-spacing: 0px; color: #e1e1e1; text-align: justify; line-height: 20px; margin: 0px 0px 0px 1px;}

b { letter-spacing: 0px; font-family: economica; color: #4e8079; font-weight: bold; font-size:14px; text-transform: uppercase; font-weight:; filter:drop-shadow(1px 1px 1px #27403d);}

.fr1{ width: 81px; height: 81px; margin-bottom: 5px; margin-top: 0px; margin-right: 0px; margin-left: 0px; border: px solid #000; border-radius: 00px; z-index:9; }

strong { font-family: economica; letter-spacing: 0px; color: #4b656c; font-weight: bold; font-size: 15px; text-transform: uppercase; font-weight: 100; }

.put{position: absolute; bottom: 0px; left:4px; margin: auto; opacity:1; height: 300px; width: 167px; padding: 0px; text-align: center; font-size: 1px; overflow: auto; text-indent: 0px; color: #bac2bf; font-family: Barlow Condensed; z-index:22;overflow:auto transition: all 0.9s ease-in-out; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; -o-transition: all 0.4s ease-in-out; -ms-transition: all 0.4s ease-in-out;}

p.td {text-align: right; font-family:economica; margin-left: -10px; font-size: 12px; line-height: 13px; color: #fce8f7; }

td {text-align: left; line-height: 20px; }

.put:target{ opacity:1; z-index:11;transition: all 0.4s ease-in-out; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; z-o-transition: all 0.4s ease-in-out; -ms-transition: all 0.4s ease-in-out;overflow:auto;}

.KAL{ position:fixed; bottom:10px; left:97%; width: 50px; height: 30px;}

a {font-family: economica; letter-spacing: 0.3px; color: #73878c; font-weight: bold; font-size: 13px; text-transform: ; text-decoration: none; transition:0.7s; font-weight: 100; cursor: url(https://i.imgur.com/WIeMSiR.png), auto;filter:drop-shadow(1px 1px 1px #000000);}

a:hover {color: #bdc6c8; transition: 0.7s; }

.newer {position: absolute; bottom:0px; left:2px; margin: auto; opacity:1; height: 388px; width: 90px; padding:0px; text-align: center; font-size: 13px; overflow: auto; text-ident:10px; z-index:20;overflow:auto transition: all 0.9s ease-in-out; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; -o-transition: all 0.4s ease-in-out; -ms-transition: all 0.4s ease-in-out;}

.new{position: absolute; bottom: 5px; left: 5px; margin: auto; opacity:1; height: 200px; width: 27=65px; padding:10px; text-align: center; font-size: 13px; overflow: auto; text-ident: 10px; z-index:0;overflow:auto transition: all 0.9s ease-in-out; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; -o-transition: all 0.4s ease-in-out; -ms-transition: all 0.4s ease-in-out;}

.new:target{ opacity:1; z-index:11;transition: all 0.4s ease-in-out; -webkit-transition: all 0.4s ease-in-out; -moz-transition: all 0.4s ease-in-out; -o-transition: all 0.4s ease-in-out; -ms-transition: all 0.2s ease-in-out;overflow:auto;}

@keyframes move{ from{ background-image:url(https://i.imgur.com/L3hOOvS.png); width:300px; height:207px; background-size:100%; position:absolute; top:-207px; left:145px; z-index:-1; filter:drop-shadow(0px 0px 1px #596be3);}
to{ background-image:url(https://i.imgur.com/CsCMJwh.png); background-repeat:no-repeat; width:800px; height:407px; background-size:100%; position:absolute; top:-407px; left:-100px; z-index:3; filter:drop-shadow(0px 0px 1px #596be3);} }

@-webkit-keyframes move{from{ background-image:url(https://i.imgur.com/L3hOOvS.png);; background-repeat:no-repeat; width:300px; background-size:100%; position:absolute; top:-207px; left:155px; z-index:-1; filter:drop-shadow(0px 0px 1px #596be3);}
to{ background-image:url(https://i.imgur.com/CsCMJwh.png); background-repeat:no-repeat; width:800px; height:407px; background-size:100%; position:absolute; z-index:3; filter:drop-shadow(0px 0px 1px #596be3);} }

@keyframes move{ from{opacity:0;} to{opacity:1;} }
@-webkit-keyframes move{ from{opacity:0;}to{opacity:1;}}

 #ds{ overflow:hidden;transition:0.7s; opacity:0.3 ; position:fixed; text-align:justify; bottom:0px; right:30px; height:60px; width:60px; padding:0px; background-image: url('https://i.imgur.com/rqQIJR3.png'); background-position:top center; background-attachment: absolute; -webkit-background-size: cover; -moz-background-size: cover; -o-background-size: cover; background-size: cover;}

#ds:hover { opacity:1 ; }

.music1 {position: fixed; width: 50px; height: 50px; overflow: hidden; margin: auto; bottom: -10px; left: 25px; z-index: 99;}

.music2 {height: 50px; width: 50px; margin-top: -27px; margin-left: -20px; opacity: 0; z-index: 99;}

</style> </head> <body>

<div class=""music1"">
<img src=""https://78.media.tumblr.com/tumblr_m7w2n46Pdl1r6o8v2.gif"">

<div class=""music2"">
<audio controls="""" loop=""""><source src=""https://audio.jukehost.co.uk/JGnMlAmZyuiLHoccGQBfkW1CrbDcpv2m""></audio>
</div></div>

<div class=""mainbox"">
 
<div class=""gryff"">SLYTHERIN</div>
<div class=""title"">Demian Kingsley.</div> 

<div class=""mainestimg""></div>
<div class=""mainimg""></div>
<div class=""mainimg2""></div>
<div class=""mainimg3""></div>

<div class=""strike""></div>
<div class=""strike2""></div>
<div class=""strike3""></div>
<div class=""strike4""></div>
<div class=""strike5""></div>
<div class=""strike6""></div>

<div class=""box1"">

<div class=""words"">

<b>Core Classes:</b> Charms, Potions, Transfiguration, Astronomy, Herbology, History of Magic, and Defense Against the Dark Arts. <br><br>
<b>Elective Classes:</b> Muggle Studies, Study of Ancient Runes, Divination, and Arithmancy. <br><br>
<b>Clubs:</b> Growgetters, Pageturners, Swimming, and Arts & Crafts.<br><br>

<strong>❝</strong> Second child and eldest son born to <a title=""Details."">Deacon</a> and <a title=""Details."">Clémence</a> Kingsley (née Garnier), currently thriving off of Juliette's smart investments. <br><br>

<strong>❝</strong> <b>Prefect</b> of House Slytherin, but does not take his duties very seriously. More important matters are often at the forefront of his thoughts. <br><br>

<strong>❝</strong> Founder of an underground dueling club known as <b>Sypher</b>. Its members consist of some of the best dueling students in Hogwarts. Those who are a part of this club understand there are no restrictions and no restraints, and not a word about the club is to be spoken above ground. Mere suspicion of a student is enough to warrant obliviation and becoming a permanent outcast from the group. <br><br>

<strong>❝</strong> As a result of the recent <a target=""_blank"" title=""August 19th, 2023."">attack</a> on Pureblooded wizards at the Reinhardt Gala, it has become known that Kingsley is unafraid to cast Unforgivable Curses to protect those deserving. Not an ounce of remorse flows through his veins. <br><br>

<strong>❝</strong> This is where your headcanons go. <b>bold</b> and <a href="""">Link</a> are like this. <br><br>

<strong>❝</strong> This is where your headcanons go. <b>bold</b> and <a href="""">Link</a> are like this. <br><br>

<strong>❝</strong> This is where your headcanons go. <b>bold</b> and <a href="""">Link</a> are like this. <br><br>

</div></div>

<div class=""box2"">
<div class=""words2"">

<strong>❝</strong> Code by <b>KAL</b>. Do not steal. <br><br>

<strong>❝</strong> <b>Demian</b> is an alternate profile for the <a target=""_blank"" href=""https://roleplay.chat/profile.php?user=pottermore"">POTTERMORE</a> room only. Not interested in other settings. Do not ask. <br><br>

<strong>❝</strong> Do <strong>not</strong> spam my DMs. You do not own me. I do not owe you anything. <br><br>

<strong>❝</strong> Post length varies from snowball to multi-para. Mostly depends on muse and availability. Will often try to match. <br><br>

<strong>❝</strong> Demian is blunt and some things he says make him sound like an asshole. Remember that I am <b>not</b> my character, and he is not me. Do not twist this fact. <br><br>

<strong>❝</strong> Face Claim is <a target=""_blank"" href=""URL"">Luke Powell.</a> <br><br>

<strong>❝</strong> Voice Claim is <a target=""_blank"" href=""https://youtu.be/QZZEmwZyvdw"">Zagreus</a>. <br><br>

<strong>❝</strong> Be civil. Share the space. <br><br>

</div></div>

<div class=""box3"">

<div id=""03"" class=""newer"">

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=jules""><img src=""https://i.imgur.com/zWCKcvm.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Juliette. Sister.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=wild""><img src=""https://i.imgur.com/JtHzVxk.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Josie. Cousin.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=pure""><img src=""https://i.imgur.com/IhAktti.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Lavinia. Friend. Crush.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=brooke""><img src=""https://i.imgur.com/s7Ax159.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Brooke. Close friend. Ex-girlfriend.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=froth""><img src=""https://i.imgur.com/TXwlDOj.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Lucius. Friend.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=ben""><img src=""https://i.imgur.com/aQr8ycs.png"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Benjamin. Friend.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=avalee""><img src=""https://i.imgur.com/APGJ09k.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Avalee. Friend.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=ravena""><img src=""https://i.imgur.com/YDujBeo.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Ravena. Friend.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

<a target=""_blank"" href=""https://roleplay.chat/profile.php?user=""><img src=""https://i.imgur.com/4Bl9eEz.gif"" style=""filter:grayscale(60%) brightness(50%); opacity:0.9"" class=""fr1"" title=""Details.""></a>

</div>

<div class=""box4""><div id=""01"" class=""put"">
 
<table border=""0"" cellspacing=""-10"">
 
<tr>
<td><b>Name</b></td>
<td>
<p class=""td"">Demian Benoît Kingsley</p>
</td>
</tr><br>
 
<tr>
<td><b>Alias</b></td>
<td>
<p class=""td"">Kingsley. <a target=""_blank"" title=""Juliette Exclusive. Meaning; My Little Monster."">Mon Petit Monstre.</a> Demon. Ian. <a target=""_blank"" title=""Juliette. Meaning; brother."">Frérot.</a> Phantom.</p>
</td>
</tr><br>

<tr>
<td><b>Witchagram</b></td>
<td>
<p class=""td""><a target=""_blank"" title=""Features various clips of Demian playing his guitar."">@kingsley</a></p>
</td>
</tr><br>

<tr>
<td><b>Birthdate</b></td>
<td>
<p class=""td"">August 23rd | 16</p>
</td>
</tr>

<tr>
<td><b>Birth Place</b></td>
<td>
<p class=""td"">Le Mans, Sarthe, France</p>
</td>
</tr><br>

<tr>
<td><b>Residence</b></td>
<td>
<p class=""td"">London, England</p>
</td>
</tr><br>

<tr>
<td><b>M. Status</b></td>
<td>
<p class=""td""><a target=""_blank"" href=""https://roleplay.chat/profile.php?user="">Single</a></p>
</td>
</tr>

<tr>
<td><b>Orientation</b></td>
<td>
<p class=""td"">Heterosexual</p>
</td>
</tr>

<tr>
<td><b>House</b></td>
<td>
<p class=""td"">Slytherin | 5th</p>
</td>
</tr>

<tr>
<td><b>Wand</b></td>
<td>
<p class=""td"">10"" Alder Wood, Rougarou Hair Core, Unyielding</p>
</td>
</tr>
 
<tr>
<td><b>Familiar</b></td>
<td>
<p class=""td""><a target=""_blank"" href=""https://i.imgur.com/TsRP6eA.jpg"" title=""An albino ferret with the temperament of a demon. 
Fiercely loyal to Demian alone, and will not hesitate to bite the hell out of anyone who gets too close."">Sinclair</a></p>
</td>
</tr>

<tr>
<td><b>Patronus</b></td>
<td>
<p class=""td""><a target=""_blank"" title=""Having a Wolf as your Patronus means you find comfort in community and consistency – two unusual comforts for the noble house of Slytherin. Usually, Slytherins are seen as very individualistic, but in your case, you love the idea of a Slytherin fraternity. You are very close to the members of your inner circle and could not imagine living well without them. Knowing how a certain day is going to go can also appeal to a love of control over your destiny, which Slytherins can also appreciate. Even the negative association wolves can have play into your house – you don’t fear your guardian. Slytherins have no qualms with being a little intimidating, particularly to their enemies. This guardian will be your mate, your friend, your companion, when things go bad, rushing to your aid when you call it, and it will defend you until the end."">Wolf</a></p>
</td>
</tr>

<tr>
<td><b>Animagus</b></td>
<td>
<p class=""td""><a target=""_blank"" href=""https://i.imgur.com/J7rIpsb.jpg"" title=""Tall, lean structure with a charcoal gray pelt and golden eyes."">Timber Wolf</a></p>
</td>
</tr>

<tr>
<td><b>Boggart</b></td>
<td>
<p class=""td"">???</p>
</td>
</tr>

<tr>
<td><b>Amortentia</b></td>
<td>
<p class=""td"">???</p>
</td>
</tr>

<tr>
<td><b>Aspiration</b></td>
<td>
<p class=""td"">---</p>
</td>
</tr>

<tr>
<td><b>Blood Status</b></td>
<td>
<p class=""td"">Pureblood</p>
</td>
</tr>

<tr>
<td><b>Nationality</b></td>
<td>
<p class=""td"">English, French</p>
</td>
</tr>

<tr>
<td><b>Hair Color</b></td>
<td>
<p class=""td"">Obsidian Black</p>
</td>
</tr> 
 
<tr>
<td><b>Eye Color</b></td>
<td>
<p class=""td"">Forest Green</p>
</td>
</tr>

<tr>
<td><b>Height</b></td>
<td>
<p class=""td"">6'3½"" | 1.91m</p></td>
</tr>

<tr>
<td><b>Weight</b></td>
<td>
<p class=""td"">186lbs | 84.3kg</p>
</td>
</tr>

<tr>
<td><b>Build</b></td>
<td>
<p class=""td""><a target=""_blank"" title=""Long arms, big hands."">Lean.</a> Ottermode.</p>
</td>
</tr>

<tr>
<td><b>Tattoo References</b></td>
<td>
<p class=""td""><a target=""_blank"" href=""https://i.imgur.com/SR5pEp8.mp4"">One.</a> <a target=""_blank"" href=""https://i.imgur.com/vaJZBqo.mp4"">Two.</a></p>
</td>
</tr>

<tr>
<td><b>Scent</b></td>
<td>
<p class=""td"">Juniper, Sage, Sandalwood</p>
</td>
</tr>

</table></div></div></div> 

<script src=""/cdn-cgi/scripts/7d0fa10a/cloudflare-static/rocket-loader.min.js"" data-cf-settings=""f34f9d25ef4961a21b244453-|49"" defer=""""></script></body>
</html></body></html>"
Pv881JHd,программа «Сотрудники‎»,plarmi,Python,Monday 19th of February 2024 12:37:37 PM CDT,"with open(r""Сотрудники.txt"", ""r"", encoding=""utf-8"") as file:
    text = file.read().splitlines()

database = {}
for i in text:
    temp = i.split()
    database["" "".join(temp[0:3])] = int(temp[3])

while True:
    choice = input(f""***********************\n""
                   f""show - вывести список сотрудников\n""
                   f""save - сохранить данные\n""
                   f""exit - выйти из программы\n""
                   f""add - добавить\n""
                   f""edit - изменить\n""
                   f""del - удалить\n""
                   f""surname - поиск по фамилии\n""
                   f""age - все сотрудники по указанному возрасту\n""
                   f""letter - все сотрудники, у которых фамилии начинаются на указанную букву\n""
                   f""Выберите действие: "")

    if choice == ""show"":
        print(database)

    elif choice == ""save"":
        with open(r""Сотрудники.txt"", ""w"", encoding=""utf-8"") as file:
            for i, j in database.items():
                file.writelines(f""{i} {j}\n"")
        print(""Изменения сохранены!"")

    elif choice == ""exit"":
        with open(r""Сотрудники.txt"", ""w"", encoding=""utf-8"") as file:
            for i, j in database.items():
                file.writelines(f""{i} {j}\n"")
            print(""Программа завершается. Изменения сохранены!"")
        break

    elif choice == ""add"":
        name = input(""Введите ФИО: "")
        age = int(input(""Введите возраст: ""))
        database[name] = age

    elif choice == ""edit"":
        name = input(""Введите текущее ФИО сотрудника: "")
        choice = input(""Что изменить? (name - ФИО, age - возраст): "")
        if choice == ""name"":
            new_name = input(""Введите новое ФИО сотрудника: "")
            database[new_name] = database.pop(name)
        elif choice == ""age"":
            new_age = int(input(""Введите новый возраст сотрудника: ""))
            database[name] = new_age

    elif choice == ""del"":
        name = input(""Введите ФИО сотрудника для удаления: "")
        del database[name]

    elif choice == ""surname"":
        name = input(""Введите фамилию сотрудника для поиска: "")

        for i, j in database.items():
            if name == i.split()[0]:
                print(f""{i} {j}"")

    elif choice == ""age"":
        age = int(input(""Введите возраст: ""))
        for i, j in database.items():
            if j == age:
                print(f""{i} {j}"", end=""\n"")

    elif choice == ""letter"":
        name = input(""Введите букву: "").upper()
        for i, j in database.items():
            if i.startswith(name):
                print(f""{i} {j}"", end=""\n"")

    else:
        print(""Такой команды нет!"")
"
en0aghzg,311_1902,Petro_zzz,C++,Monday 19th of February 2024 12:37:35 PM CDT,"#include <iostream>
#include <iomanip>


void prefix_vs_postfix() {
	
	int k = 5;
	std::cout << k << ""\n"";
	k++;
	std::cout << k << ""\n"";
	++k;
	std::cout << k << ""\n"";
	double y = 1.5;
	y++;
	std::cout << y << ""\n"";

	// ++k - сначала k увеличится на 1, а затем присвоится в n 
	int n = ++k;
	std::cout << ""k:"" << k << "" n:"" << n << ""\n"";
	k = 7;
	// ++k - сначала k присвоится в m, а затем увеличится на 1 
	int m = k++;
	std::cout << ""k:"" << k << "" m:"" << m << ""\n"";

	k = 7;
	std::cout << ""k++: "" << k++ << ""\n"";
	std::cout << ""k: "" << k << ""\n"";

	k = 7;
	std::cout << ""++k: "" << ++k << ""\n"";
	std::cout << ""k: "" << k << ""\n"";

	int a = 5;

	std::cout << ""a: "" << a << ""\n"";
	std::cout << ""a++ + (-a * ++a): "" << a++ + (-a * ++a) << ""\n"";
	std::cout << ""a: "" << a << ""\n"";
	
	a = 5;
	std::cout << ""a: "" << a << ""\n"";
	std::cout << ""++a + (-a * ++a): "" << ++a + (-a * ++a) << ""\n"";
	std::cout << ""a: "" << a << ""\n"";
}

int counter = 0;

long long factorial0(int n) {

	std::cout << ""Start factorial "" << counter << ""\n"";
	long long result = n;
	while (n > 2) {
		n--;
		result *= n;
	}
	counter++;
	return result;
}


long long factorial1(int n) {

	std::cout << ""Start factorial "" << counter << ""\n"";
	long long result = n;
	while (n > 2)		
		result *= --n;		
	
	counter++;
	return result;
}


void multy_tab() {

	int k = 0, n = 0;
	while (n <= 9) {
		k = 0;
		while (k <= 9) {
			std::cout << std::setw(2) << n * k++ << "" "";
		}
		std::cout << ""\n"";
		n++;
	}

}


int main() {
	//prefix_vs_postfix();
	//std::cout << !5 << std::endl;	
	/*std::cout << ""2! = "" << factorial0(2) << std::endl;
	std::cout << ""5! = "" << factorial1(5) << std::endl;
	std::cout << ""4! = "" << factorial0(4) << std::endl;
	std::cout << ""3! = "" << factorial0(3) << std::endl;
	std::cout << ""6! = "" << factorial1(6) << std::endl;
	*/
	multy_tab();


	 

	return 0;
}"
UQce3HNd,03. The Angry Cat,Nenogzar,Python,Monday 19th of February 2024 12:33:32 PM CDT,"def cheap_summing(side, entry_point):
    return sum([x for x in side if x < entry_point])

def expensive_summing(side, entry_point):
    return sum([x for x in side if x >= entry_point])

def main():
    price_rating = [int(x) for x in input().split("", "")]
    entry_point = int(input())
    type_of_items = input()

    left_side = price_rating[:entry_point]
    right_side = price_rating[entry_point + 1:]
    entry_point_value = price_rating[entry_point]

    if type_of_items == ""cheap"":
        if cheap_summing(left_side, entry_point_value) >= cheap_summing(right_side, entry_point_value):
            print(f""Left - {cheap_summing(left_side, entry_point_value)}"")
        else:
            print(f""Right - {cheap_summing(right_side, entry_point_value)}"")
    elif type_of_items == ""expensive"":
        if expensive_summing(left_side, entry_point_value) >= expensive_summing(right_side, entry_point_value):
            print(f""Left - {expensive_summing(left_side, entry_point_value)}"")
        else:
            print(f""Right - {expensive_summing(right_side, entry_point_value)}"")

if __name__ == ""__main__"":
    main()"
rRnANtC8,Untitled,Sreekar_0125,C++,Monday 19th of February 2024 12:20:58 PM CDT,"int fib(int n)
{
    int a, b, p, q;
    a = q = 1;
    b = p = 0;
    while (n > 0)
    {
        if (n % 2 == 0)
        {
            int qq = (q * q) % m;
            q = ((2 * p * q) % m + qq % m) % m;
            p = ((p * p) % m + qq % m) % m;
            n /= 2;
        }
        else
        {
            int aq = (a * q) % m;
            a = ((b * q) % m + aq % m + (a * p) % m) % m;
            b = ((b * p) % m + aq % m) % m;
            n -= 1;
        }
    }
    return b % m;
}"
JHBEkseM,MOD_k40_whisperer.py,j0h,Python,Monday 19th of February 2024 12:12:16 PM CDT,"#!/usr/bin/python3
""""""
    K40 Whisperer CLI Mod laser photobooth

    Copyright (C) <2017-2023>  <Scorch>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

""""""
version = '0.69'
title_text = ""K40 Whisperer V""+version

import sys
from math import *
from egv import egv
from nano_library import K40_CLASS
from dxf import DXF_CLASS
from svg_reader import SVG_READER
from svg_reader import SVG_TEXT_EXCEPTION
from svg_reader import SVG_PXPI_EXCEPTION
from g_code_library import G_Code_Rip
from interpolate import interpolate
from ecoords import ECoord
from convex_hull import hull2D
from embedded_images import K40_Whisperer_Images

import inkex
import simplestyle
import simpletransform
import cubicsuperpath
import cspsubdiv
import traceback
import struct

DEBUG = False

if DEBUG:
    import inspect
    
VERSION = sys.version_info[0]
LOAD_MSG = """"

if VERSION == 3:
    from tkinter import *
    from tkinter.filedialog import *
    import tkinter.messagebox
    MAXINT = sys.maxsize
    
else:
    from Tkinter import *
    from tkFileDialog import *
    import tkMessageBox
    MAXINT = sys.maxint

if VERSION < 3 and sys.version_info[1] < 6:
    def next(item):
        #return item.next()
        return item.__next__()
    
try:
    import psyco
    psyco.full()
    LOAD_MSG = LOAD_MSG+""\nPsyco Loaded\n""
except:
    pass

import math
from time import time
import os
import re
import binascii
import getopt
import operator
import webbrowser
from PIL import Image
from PIL import ImageOps
from PIL import ImageFilter

try:
    Image.warnings.simplefilter('ignore', Image.DecompressionBombWarning)
except:
    pass
try:
    from PIL import ImageTk
    from PIL import _imaging
except:
    pass #Don't worry everything will still work

try:
    Image.LANCZOS
except:
    Image.LANCZOS=Image.ANTIALIAS

PYCLIPPER=True
try:
    import pyclipper
except:
    print(""Unable to load Pyclipper library (Offset trace outline will not work without it)"")
    PYCLIPPER = False

try:
    os.chdir(os.path.dirname(__file__))
except:
    pass

QUIET = False
   
################################################################################
class Application(Frame):
    def __init__(self, master):
        self.trace_window = toplevel_dummy()
        Frame.__init__(self, master)
        self.w = 780
        self.h = 490
        frame = Frame(master, width= self.w, height=self.h)
        self.master = master
        self.x = -1
        self.y = -1
        self.createWidgets()
        self.micro = False
        

    def resetPath(self):
        self.RengData  = ECoord()
        self.VengData  = ECoord()
        self.VcutData  = ECoord()
        self.GcodeData = ECoord()
        self.SCALE = 1
        self.Design_bounds = (0,0,0,0)
        self.UI_image = None
        #if self.HomeUR.get():
        self.move_head_window_temporary([0.0,0.0])
        #else:
        #    self.move_head_window_temporary([0.0,0.0])
            
        self.pos_offset=[0.0,0.0]
        
    def createWidgets(self):
        self.initComplete = 0
        self.stop=[True]
        
        self.k40 = None
        self.run_time = 0
        
        self.master.bind(""<Configure>"", self.Master_Configure)
        self.master.bind('<Enter>', self.bindConfigure)
        self.master.bind('<F1>', self.KEY_F1) #About
        self.master.bind('<F2>', self.KEY_F2) #Advanced Config
        self.master.bind('<F3>', self.KEY_F3) #Raster settings
        self.master.bind('<F4>', self.KEY_F4) #rotary settings
        self.master.bind('<F5>', self.KEY_F5)
        self.master.bind('<F6>', self.KEY_F6) #advanced runtime settings
        self.master.bind('<Home>', self.Home)

        self.master.bind('<Control-R>', self.Raster_Eng)
        self.master.bind('<Control-V>', self.Vector_Eng)
        #self.master.bind('<Control-C>', self.Vector_Cut)
        self.master.bind('<Control-G>', self.Gcode_Cut)

        self.master.bind('<Control-Left>'  , self.Move_Left)
        self.master.bind('<Control-Right>' , self.Move_Right)
        self.master.bind('<Control-Up>'    , self.Move_Up)
        self.master.bind('<Control-Down>'  , self.Move_Down)
        
        self.master.bind('<Control-Home>'  , self.Move_UL)
        self.master.bind('<Control-Prior>' , self.Move_UR)
        self.master.bind('<Control-Next>'  , self.Move_LR)
        self.master.bind('<Control-End>'   , self.Move_LL)
        self.master.bind('<Control-Clear>' , self.Move_CC)

        self.master.bind('<Control-Key-4>' , self.Move_Left)
        self.master.bind('<Control-6>'     , self.Move_Right)
        self.master.bind('<Control-8>'     , self.Move_Up)
        self.master.bind('<Control-Key-2>' , self.Move_Down)
        
        self.master.bind('<Control-7>'     , self.Move_UL)
        self.master.bind('<Control-9>'     , self.Move_UR)
        self.master.bind('<Control-Key-3>' , self.Move_LR)
        self.master.bind('<Control-Key-1>' , self.Move_LL)
        self.master.bind('<Control-Key-5>' , self.Move_CC)

        #####

        self.master.bind('<Alt-Control-Left>' , self.Move_Arb_Left)
        self.master.bind('<Alt-Control-Right>', self.Move_Arb_Right)
        self.master.bind('<Alt-Control-Up>'   , self.Move_Arb_Up)
        self.master.bind('<Alt-Control-Down>' , self.Move_Arb_Down)

        self.master.bind('<Alt-Control-Key-4>', self.Move_Arb_Left)
        self.master.bind('<Alt-Control-6>'    , self.Move_Arb_Right)
        self.master.bind('<Alt-Control-8>'    , self.Move_Arb_Up)
        self.master.bind('<Alt-Control-Key-2>', self.Move_Arb_Down)


        self.master.bind('<Alt-Left>' , self.Move_Arb_Left)
        self.master.bind('<Alt-Right>', self.Move_Arb_Right)
        self.master.bind('<Alt-Up>'   , self.Move_Arb_Up)
        self.master.bind('<Alt-Down>' , self.Move_Arb_Down)

        self.master.bind('<Alt-Key-4>', self.Move_Arb_Left)
        self.master.bind('<Alt-6>'    , self.Move_Arb_Right)
        self.master.bind('<Alt-8>'    , self.Move_Arb_Up)
        self.master.bind('<Alt-Key-2>', self.Move_Arb_Down)

        #####
        self.master.bind('<Control-i>' , self.Initialize_Laser)
        self.master.bind('<Control-f>' , self.Unfreeze_Laser)
        self.master.bind('<Control-o>' , self.menu_File_Open_Design)
        self.master.bind('<Control-l>' , self.menu_Reload_Design)
        self.master.bind('<Control-h>' , self.Home)
        self.master.bind('<Control-u>' , self.Unlock)
        self.master.bind('<Escape>'    , self.Stop)
        self.master.bind('<Control-t>' , self.TRACE_Settings_Window)

        self.include_Reng = BooleanVar()
        self.include_Rpth = BooleanVar()
        self.include_Veng = BooleanVar()
        self.include_Vcut = BooleanVar()
        self.include_Gcde = BooleanVar()
        self.include_Time = BooleanVar()

        self.advanced = BooleanVar()
        
        self.halftone     = BooleanVar()
        self.mirror       = BooleanVar()
        self.rotate       = BooleanVar()
        self.negate       = BooleanVar()
        self.inputCSYS    = BooleanVar()
        self.HomeUR       = BooleanVar()
        self.engraveUP    = BooleanVar()
        self.init_home    = BooleanVar()
        self.post_home    = BooleanVar()
        self.post_beep    = BooleanVar()
        self.post_disp    = BooleanVar()
        self.post_exec    = BooleanVar()
        
        self.pre_pr_crc   = BooleanVar()
        self.inside_first = BooleanVar()
        self.rotary       = BooleanVar()
        self.reduced_mem  = BooleanVar()
        self.wait         = BooleanVar()
        

        self.ht_size    = StringVar()
        self.Reng_feed  = StringVar()
        self.Veng_feed  = StringVar()
        self.Vcut_feed  = StringVar()

        self.Reng_passes = StringVar()
        self.Veng_passes = StringVar()
        self.Vcut_passes = StringVar()
        self.Gcde_passes = StringVar()
        
        
        self.board_name = StringVar()
        self.units      = StringVar()
        self.jog_step   = StringVar()
        self.rast_step  = StringVar()
        self.funits     = StringVar()
        

        self.bezier_M1     = StringVar()
        self.bezier_M2     = StringVar()
        self.bezier_weight = StringVar()

##        self.unsharp_flag = BooleanVar()
##        self.unsharp_r    = StringVar()
##        self.unsharp_p    = StringVar()
##        self.unsharp_t    = StringVar()
##        self.unsharp_flag.set(False)
##        self.unsharp_r.set(""40"")
##        self.unsharp_p.set(""350"")
##        self.unsharp_t.set(""3"")

        self.LaserXsize = StringVar()
        self.LaserYsize = StringVar()

        self.LaserXscale = StringVar()
        self.LaserYscale = StringVar()
        self.LaserRscale = StringVar()

        self.rapid_feed = StringVar()

        self.gotoX = StringVar()
        self.gotoY = StringVar()

        self.n_egv_passes = StringVar()

        self.inkscape_path = StringVar()
        self.batch_path    = StringVar()
        self.ink_timeout   = StringVar()
        
        self.t_timeout  = StringVar()
        self.n_timeouts  = StringVar()
        
        self.Reng_time = StringVar()
        self.Veng_time = StringVar()
        self.Vcut_time = StringVar()
        self.Gcde_time = StringVar()

        self.comb_engrave = BooleanVar()
        self.comb_vector  = BooleanVar()
        self.zoom2image   = BooleanVar()

        self.trace_w_laser  = BooleanVar()
        self.trace_gap      = StringVar()
        self.trace_speed    = StringVar()
        
        ###########################################################################
        #                         INITILIZE VARIABLES                             #
        #    if you want to change a default setting this is the place to do it   #
        ###########################################################################
        self.include_Reng.set(1)
        self.include_Rpth.set(0)
        self.include_Veng.set(1)
        self.include_Vcut.set(1)
        self.include_Gcde.set(1)
        self.include_Time.set(0)
        self.advanced.set(0)
        
        self.halftone.set(1)
        self.mirror.set(0)
        self.rotate.set(0)
        self.negate.set(0)
        self.inputCSYS.set(0)
        self.HomeUR.set(0)
        self.engraveUP.set(0)
        self.init_home.set(1)
        self.post_home.set(0)
        self.post_beep.set(0)
        self.post_disp.set(0)
        self.post_exec.set(0)
        
        self.pre_pr_crc.set(1)
        self.inside_first.set(1)
        self.rotary.set(0)
        self.reduced_mem.set(0)
        self.wait.set(1)
        
        self.ht_size.set(500)

        self.Reng_feed.set(""100"")
        self.Veng_feed.set(""20"")
        self.Vcut_feed.set(""10"")
        self.Reng_passes.set(""1"")
        self.Veng_passes.set(""1"")
        self.Vcut_passes.set(""1"")
        self.Gcde_passes.set(""1"")
        
        
        self.jog_step.set(""10.0"")
        self.rast_step.set(""0.002"")
        
        self.bezier_weight.set(""3.5"")
        self.bezier_M1.set(""2.5"")
        self.bezier_M2.set(""0.50"")

        self.bezier_weight_default = float(self.bezier_weight.get())
        self.bezier_M1_default     = float(self.bezier_M1.get())
        self.bezier_M2_default     = float(self.bezier_M2.get())
        
                                        
        self.board_name.set(""LASER-M2"") # Options are
                                        #    ""LASER-M2"",
                                        #    ""LASER-M1"",
                                        #    ""LASER-M"",
                                        #    ""LASER-B2"",
                                        #    ""LASER-B1"",
                                        #    ""LASER-B"",
                                        #    ""LASER-A""


        self.units.set(""in"")            # Options are ""in"" and ""mm""

        self.ink_timeout.set(""3"")
        self.t_timeout.set(""200"")
        self.n_timeouts.set(""30"")

        self.HOME_DIR    = os.path.expanduser(""~/photoBooth"")
        
        if not os.path.isdir(self.HOME_DIR):
            self.HOME_DIR = """"

        self.DESIGN_FILE = (self.HOME_DIR+""/None"")
        self.EGV_FILE    = None
        
        self.aspect_ratio =  0
        self.segID   = []
        
        self.LaserXsize.set(""325"")
        self.LaserYsize.set(""220"")
        
        self.LaserXscale.set(""1.000"")
        self.LaserYscale.set(""1.000"")
        self.LaserRscale.set(""1.000"")

        self.rapid_feed.set(""0.0"")

        self.gotoX.set(""0.0"")
        self.gotoY.set(""0.0"")

        self.n_egv_passes.set(""1"")

        self.comb_engrave.set(0)
        self.comb_vector.set(0)
        self.zoom2image.set(0)


        self.trace_w_laser.set(0)
        self.trace_gap.set(0)
        self.trace_speed.set(50)
        
        self.laserX    = 0.0
        self.laserY    = 0.0
        self.PlotScale = 1.0
        self.GUI_Disabled = False

        # PAN and ZOOM STUFF
        self.panx = 0
        self.panx = 0
        self.lastx = 0
        self.lasty = 0
        self.move_start_x = 0
        self.move_start_y = 0

        
        self.RengData  = ECoord()
        self.VengData  = ECoord()
        self.VcutData  = ECoord()
        self.GcodeData = ECoord()
        self.SCALE = 1
        self.Design_bounds = (0,0,0,0)
        self.UI_image = None
        self.pos_offset=[0.0,0.0]
        self.inkscape_warning = False
        
        # Derived variables
        if self.units.get() == 'in':
            self.funits.set('in/min')
            self.units_scale = 1.0
        else:
            self.units.set('mm')
            self.funits.set('mm/s')
            self.units_scale = 25.4
        
        self.statusMessage = StringVar()
        self.statusMessage.set(""Welcome to K40 Whisperer"")
        
        
        self.Reng_time.set(""0"")
        self.Veng_time.set(""0"")
        self.Vcut_time.set(""0"")
        self.Gcde_time.set(""0"")

        self.min_vector_speed = 1.1 #in/min
        self.min_raster_speed = 12  #in/min
        
        ##########################################################################
        ###                     END INITILIZING VARIABLES                      ###
        ##########################################################################

        # make a Status Bar
        self.statusbar = Label(self.master, textvariable=self.statusMessage, \
                                   bd=1, relief=SUNKEN , height=1)
        self.statusbar.pack(anchor=SW, fill=X, side=BOTTOM)
        

        # Canvas
        lbframe = Frame( self.master )
        self.PreviewCanvas_frame = lbframe
        self.PreviewCanvas = Canvas(lbframe, width=self.w-(220+20), height=self.h-200, background=""grey75"")
        self.PreviewCanvas.pack(side=LEFT, fill=BOTH, expand=1)
        self.PreviewCanvas_frame.place(x=230, y=10)

        self.PreviewCanvas.tag_bind('LaserTag',""<1>""              , self.mousePanStart)
        self.PreviewCanvas.tag_bind('LaserTag',""<B1-Motion>""      , self.mousePan)
        self.PreviewCanvas.tag_bind('LaserTag',""<ButtonRelease-1>"", self.mousePanStop)

        self.PreviewCanvas.tag_bind('LaserDot',""<3>""              , self.right_mousePanStart)
        self.PreviewCanvas.tag_bind('LaserDot',""<B3-Motion>""      , self.right_mousePan)
        self.PreviewCanvas.tag_bind('LaserDot',""<ButtonRelease-3>"", self.right_mousePanStop)

        # Left Column #
        self.separator1 = Frame(self.master, height=2, bd=1, relief=SUNKEN)
        self.separator2 = Frame(self.master, height=2, bd=1, relief=SUNKEN)
        self.separator3 = Frame(self.master, height=2, bd=1, relief=SUNKEN)
        self.separator4 = Frame(self.master, height=2, bd=1, relief=SUNKEN)
        
        self.Label_Reng_feed_u = Label(self.master,textvariable=self.funits, anchor=W)
        self.Entry_Reng_feed   = Entry(self.master,width=""15"")
        self.Entry_Reng_feed.configure(textvariable=self.Reng_feed,justify='center',fg=""black"")
        self.Reng_feed.trace_variable(""w"", self.Entry_Reng_feed_Callback)
        self.NormalColor =  self.Entry_Reng_feed.cget('bg')

        self.Label_Veng_feed_u = Label(self.master,textvariable=self.funits, anchor=W)
        self.Entry_Veng_feed   = Entry(self.master,width=""15"")
        self.Entry_Veng_feed.configure(textvariable=self.Veng_feed,justify='center',fg=""blue"")
        self.Veng_feed.trace_variable(""w"", self.Entry_Veng_feed_Callback)
        self.NormalColor =  self.Entry_Veng_feed.cget('bg')

        self.Label_Vcut_feed_u = Label(self.master,textvariable=self.funits, anchor=W)
        self.Entry_Vcut_feed   = Entry(self.master,width=""15"")
        self.Entry_Vcut_feed.configure(textvariable=self.Vcut_feed,justify='center',fg=""red"")
        self.Vcut_feed.trace_variable(""w"", self.Entry_Vcut_feed_Callback)
        self.NormalColor =  self.Entry_Vcut_feed.cget('bg')

        # Buttons
        self.Reng_Button  = Button(self.master,text=""Raster Engrave"", command=self.Raster_Eng)
        self.Veng_Button  = Button(self.master,text=""Vector Engrave"", command=self.Vector_Eng)
        self.Vcut_Button  = Button(self.master,text=""Vector Cut""    , command=self.Vector_Cut)
        self.Grun_Button  = Button(self.master,text=""Run G-Code""    , command=self.Gcode_Cut)


        self.Reng_Veng_Button      = Button(self.master,text=""Raster and\nVector Engrave"", command=self.Raster_Vector_Eng)
        self.Veng_Vcut_Button      = Button(self.master,text=""Vector Engrave\nand Cut"", command=self.Vector_Eng_Cut)
        self.Reng_Veng_Vcut_Button = Button(self.master,text=""Raster Engrave\nVector Engrave\nand\nVector Cut"", command=self.Raster_Vector_Cut)
        
        self.Label_Position_Control = Label(self.master,text=""Position Controls:"", anchor=W)
        
        self.Initialize_Button = Button(self.master,text=""Initialize Laser Cutter"", command=self.Initialize_Laser)

        self.Open_Button       = Button(self.master,text=""Open\nDesign File"",   command=self.menu_File_Open_Design)
        self.Reload_Button     = Button(self.master,text=""Reload\nDesign File"", command=self.menu_Reload_Design)
        
        self.Home_Button       = Button(self.master,text=""Home"",            command=self.Home)
        self.UnLock_Button     = Button(self.master,text=""Unlock Rail"",     command=self.Unlock)
        self.Stop_Button       = Button(self.master,text=""Pause/Stop"",      command=self.Stop)

        try:            
            self.left_image  = PhotoImage(data=K40_Whisperer_Images.left_B64,  format='gif')
            self.right_image = PhotoImage(data=K40_Whisperer_Images.right_B64, format='gif')
            self.up_image    = PhotoImage(data=K40_Whisperer_Images.up_B64,    format='gif')
            self.down_image  = PhotoImage(data=K40_Whisperer_Images.down_B64,  format='gif')
            
            self.Right_Button   = Button(self.master,image=self.right_image, command=self.Move_Right)
            self.Left_Button    = Button(self.master,image=self.left_image,  command=self.Move_Left)
            self.Up_Button      = Button(self.master,image=self.up_image,    command=self.Move_Up)
            self.Down_Button    = Button(self.master,image=self.down_image,  command=self.Move_Down)

            self.UL_image  = PhotoImage(data=K40_Whisperer_Images.UL_B64, format='gif')
            self.UR_image  = PhotoImage(data=K40_Whisperer_Images.UR_B64, format='gif')
            self.LR_image  = PhotoImage(data=K40_Whisperer_Images.LR_B64, format='gif')
            self.LL_image  = PhotoImage(data=K40_Whisperer_Images.LL_B64, format='gif')
            self.CC_image  = PhotoImage(data=K40_Whisperer_Images.CC_B64, format='gif')

            self.UL_Button = Button(self.master,image=self.UL_image, command=self.Move_UL)
            self.UR_Button = Button(self.master,image=self.UR_image, command=self.Move_UR)
            self.LR_Button = Button(self.master,image=self.LR_image, command=self.Move_LR)
            self.LL_Button = Button(self.master,image=self.LL_image, command=self.Move_LL)
            self.CC_Button = Button(self.master,image=self.CC_image, command=self.Move_CC)
            
        except:
            self.Right_Button   = Button(self.master,text="">"",          command=self.Move_Right)
            self.Left_Button    = Button(self.master,text=""<"",          command=self.Move_Left)
            self.Up_Button      = Button(self.master,text=""^"",          command=self.Move_Up)
            self.Down_Button    = Button(self.master,text=""v"",          command=self.Move_Down)

            self.UL_Button = Button(self.master,text="" "", command=self.Move_UL)
            self.UR_Button = Button(self.master,text="" "", command=self.Move_UR)
            self.LR_Button = Button(self.master,text="" "", command=self.Move_LR)
            self.LL_Button = Button(self.master,text="" "", command=self.Move_LL)
            self.CC_Button = Button(self.master,text="" "", command=self.Move_CC)

        self.Label_Step   = Label(self.master,text=""Jog Step"", anchor=CENTER )
        self.Label_Step_u = Label(self.master,textvariable=self.units, anchor=W)
        self.Entry_Step   = Entry(self.master,width=""15"")
        self.Entry_Step.configure(textvariable=self.jog_step, justify='center')
        self.jog_step.trace_variable(""w"", self.Entry_Step_Callback)

        ###########################################################################
        self.GoTo_Button    = Button(self.master,text=""Move To"", command=self.GoTo)
        
        self.Entry_GoToX   = Entry(self.master,width=""15"",justify='center')
        self.Entry_GoToX.configure(textvariable=self.gotoX)
        self.gotoX.trace_variable(""w"", self.Entry_GoToX_Callback)
        self.Entry_GoToY   = Entry(self.master,width=""15"",justify='center')
        self.Entry_GoToY.configure(textvariable=self.gotoY)
        self.gotoY.trace_variable(""w"", self.Entry_GoToY_Callback)
        
        self.Label_GoToX   = Label(self.master,text=""X"", anchor=CENTER )
        self.Label_GoToY   = Label(self.master,text=""Y"", anchor=CENTER )
        ###########################################################################
        # End Left Column #

        # Advanced Column     #
        self.separator_vert = Frame(self.master, height=2, bd=1, relief=SUNKEN)
        self.Label_Advanced_column = Label(self.master,text=""Advanced Settings"",anchor=CENTER)
        self.separator_adv = Frame(self.master, height=2, bd=1, relief=SUNKEN)       

        self.Label_Halftone_adv = Label(self.master,text=""Halftone (Dither)"")
        self.Checkbutton_Halftone_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Halftone_adv.configure(variable=self.halftone)
        self.halftone.trace_variable(""w"", self.View_Refresh_and_Reset_RasterPath) #self.menu_View_Refresh_Callback

        self.Label_Negate_adv = Label(self.master,text=""Invert Raster Color"")
        self.Checkbutton_Negate_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Negate_adv.configure(variable=self.negate)
        self.negate.trace_variable(""w"", self.View_Refresh_and_Reset_RasterPath)

        self.separator_adv2 = Frame(self.master, height=2, bd=1, relief=SUNKEN)  

        self.Label_Mirror_adv = Label(self.master,text=""Mirror Design"")
        self.Checkbutton_Mirror_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Mirror_adv.configure(variable=self.mirror)
        self.mirror.trace_variable(""w"", self.View_Refresh_and_Reset_RasterPath)

        self.Label_Rotate_adv = Label(self.master,text=""Rotate Design"")
        self.Checkbutton_Rotate_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Rotate_adv.configure(variable=self.rotate)
        self.rotate.trace_variable(""w"", self.View_Refresh_and_Reset_RasterPath)

        self.separator_adv3 = Frame(self.master, height=2, bd=1, relief=SUNKEN)
        
        self.Label_inputCSYS_adv = Label(self.master,text=""Use Input CSYS"")
        self.Checkbutton_inputCSYS_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_inputCSYS_adv.configure(variable=self.inputCSYS)
        self.inputCSYS.trace_variable(""w"", self.menu_View_inputCSYS_Refresh_Callback)

        self.Label_Inside_First_adv = Label(self.master,text=""Cut Inside First"")
        self.Checkbutton_Inside_First_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Inside_First_adv.configure(variable=self.inside_first)
        self.inside_first.trace_variable(""w"", self.menu_Inside_First_Callback)

        self.Label_Inside_First_adv = Label(self.master,text=""Cut Inside First"")
        self.Checkbutton_Inside_First_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Inside_First_adv.configure(variable=self.inside_first)

        self.Label_Rotary_Enable_adv = Label(self.master,text=""Use Rotary Settings"")
        self.Checkbutton_Rotary_Enable_adv = Checkbutton(self.master,text="""")
        self.Checkbutton_Rotary_Enable_adv.configure(variable=self.rotary)
        self.rotary.trace_variable(""w"", self.Reset_RasterPath_and_Update_Time)


        #####
        self.separator_comb = Frame(self.master, height=2, bd=1, relief=SUNKEN)  

        self.Label_Comb_Engrave_adv = Label(self.master,text=""Group Engrave Tasks"")
        self.Checkbutton_Comb_Engrave_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Comb_Engrave_adv.configure(variable=self.comb_engrave)
        self.comb_engrave.trace_variable(""w"", self.menu_View_Refresh_Callback)

        self.Label_Comb_Vector_adv = Label(self.master,text=""Group Vector Tasks"")
        self.Checkbutton_Comb_Vector_adv = Checkbutton(self.master,text="" "", anchor=W)
        self.Checkbutton_Comb_Vector_adv.configure(variable=self.comb_vector)
        self.comb_vector.trace_variable(""w"", self.menu_View_Refresh_Callback) 
        #####
        
        self.Label_Reng_passes = Label(self.master,text=""Raster Eng. Passes"")
        self.Entry_Reng_passes   = Entry(self.master,width=""15"")
        self.Entry_Reng_passes.configure(textvariable=self.Reng_passes,justify='center',fg=""black"")
        self.Reng_passes.trace_variable(""w"", self.Entry_Reng_passes_Callback)
        self.NormalColor =  self.Entry_Reng_passes.cget('bg')

        self.Label_Veng_passes = Label(self.master,text=""Vector Eng. Passes"")
        self.Entry_Veng_passes   = Entry(self.master,width=""15"")
        self.Entry_Veng_passes.configure(textvariable=self.Veng_passes,justify='center',fg=""blue"")
        self.Veng_passes.trace_variable(""w"", self.Entry_Veng_passes_Callback)
        self.NormalColor =  self.Entry_Veng_passes.cget('bg')

        self.Label_Vcut_passes = Label(self.master,text=""Vector Cut Passes"")
        self.Entry_Vcut_passes   = Entry(self.master,width=""15"")
        self.Entry_Vcut_passes.configure(textvariable=self.Vcut_passes,justify='center',fg=""red"")
        self.Vcut_passes.trace_variable(""w"", self.Entry_Vcut_passes_Callback)
        self.NormalColor =  self.Entry_Vcut_passes.cget('bg')

        self.Label_Gcde_passes = Label(self.master,text=""G-Code Passes"")
        self.Entry_Gcde_passes   = Entry(self.master,width=""15"")
        self.Entry_Gcde_passes.configure(textvariable=self.Gcde_passes,justify='center',fg=""black"")
        self.Gcde_passes.trace_variable(""w"", self.Entry_Gcde_passes_Callback)
        self.NormalColor =  self.Entry_Gcde_passes.cget('bg')

        
        self.Hide_Adv_Button = Button(self.master,text=""Hide Advanced"", command=self.Hide_Advanced)
                
        # End Right Column #
        self.calc_button = Button(self.master,text=""Calculate Raster Time"", command=self.menu_Calc_Raster_Time)

        #GEN Setting Window Entry initializations
        self.Entry_Sspeed    = Entry()
        self.Entry_BoxGap    = Entry()
        self.Entry_ContAngle = Entry()

        # Make Menu Bar
        self.menuBar = Menu(self.master, relief = ""raised"", bd=2)

        


        top_File = Menu(self.menuBar, tearoff=0)
        top_File.add(""command"", label = ""Save Settings File"", command = self.menu_File_Save)
        top_File.add(""command"", label = ""Read Settings File"", command = self.menu_File_Open_Settings_File)

        top_File.add_separator()
        top_File.add(""command"", label = ""Open Design (SVG/DXF/G-Code)""  , command = self.menu_File_Open_Design)
        top_File.add(""command"", label = ""Reload Design""          , command = self.menu_Reload_Design)

        top_File.add_separator()    
        top_File.add(""command"", label = ""Send EGV File to Laser""             , command = self.menu_File_Open_EGV)

        SaveEGVmenu = Menu(self.master, relief = ""raised"", bd=2, tearoff=0)
        top_File.add_cascade(label=""Save EGV File"", menu=SaveEGVmenu)        
        SaveEGVmenu.add(""command"", label = ""Raster Engrave""     , command = self.menu_File_Raster_Engrave)
        SaveEGVmenu.add(""command"", label = ""Vector Engrave""     , command = self.menu_File_Vector_Engrave)
        SaveEGVmenu.add(""command"", label = ""Vector Cut""         , command = self.menu_File_Vector_Cut)
        SaveEGVmenu.add(""command"", label = ""G-Code Operations""  , command = self.menu_File_G_Code)
        SaveEGVmenu.add_separator()   
        SaveEGVmenu.add(""command"", label = ""Raster and Vector Engrave""             , command = self.menu_File_Raster_Vector_Engrave)
        SaveEGVmenu.add(""command"", label = ""Vector Engrave and Cut""                , command = self.menu_File_Vector_Engrave_Cut)
        SaveEGVmenu.add(""command"", label = ""Raster, Vector Engrave and Vector Cut"" , command = self.menu_File_Raster_Vector_Cut)
        
    
        top_File.add_separator()
        top_File.add(""command"", label = ""Exit""              , command = self.menu_File_Quit)
        
        self.menuBar.add(""cascade"", label=""File"", menu=top_File)

        #top_Edit = Menu(self.menuBar, tearoff=0)
        #self.menuBar.add(""cascade"", label=""Edit"", menu=top_Edit)

        top_View = Menu(self.menuBar, tearoff=0)
        top_View.add(""command"", label = ""Refresh   <F5>"", command = self.menu_View_Refresh)
        top_View.add_separator()
        top_View.add_checkbutton(label = ""Show Raster Image""  ,  variable=self.include_Reng ,command= self.menu_View_Refresh)
        if DEBUG:
            top_View.add_checkbutton(label = ""Show Raster Paths"" ,variable=self.include_Rpth ,command= self.menu_View_Refresh)
        
        top_View.add_checkbutton(label = ""Show Vector Engrave"",   variable=self.include_Veng ,command= self.menu_View_Refresh)
        top_View.add_checkbutton(label = ""Show Vector Cut""    ,   variable=self.include_Vcut ,command= self.menu_View_Refresh)
        top_View.add_checkbutton(label = ""Show G-Code Paths""  ,   variable=self.include_Gcde ,command= self.menu_View_Refresh)
        top_View.add_separator()
        top_View.add_checkbutton(label = ""Show Time Estimates"",   variable=self.include_Time ,command= self.menu_View_Refresh)
        top_View.add_checkbutton(label = ""Zoom to Design Size"",   variable=self.zoom2image   ,command= self.menu_View_Refresh)

        #top_View.add_separator()
        #top_View.add(""command"", label = ""computeAccurateReng"",command= self.computeAccurateReng)
        #top_View.add(""command"", label = ""computeAccurateVeng"",command= self.computeAccurateVeng)
        #top_View.add(""command"", label = ""computeAccurateVcut"",command= self.computeAccurateVcut)

        self.menuBar.add(""cascade"", label=""View"", menu=top_View)

        top_Tools = Menu(self.menuBar, tearoff=0)
        self.menuBar.add(""cascade"", label=""Tools"", menu=top_Tools)
        USBmenu = Menu(self.master, relief = ""raised"", bd=2, tearoff=0)
          
        top_Tools.add(""command"", label = ""Calculate Raster Time"", command = self.menu_Calc_Raster_Time)
        top_Tools.add(""command"", label = ""Trace Design Boundary <Ctrl-t>"", command = self.TRACE_Settings_Window)
        top_Tools.add_separator()
        top_Tools.add(""command"", label = ""Initialize Laser <Ctrl-i>"", command = self.Initialize_Laser)
        top_Tools.add(""command"", label = ""Unfreeze Laser <Ctrl-f>""  , command = self.Unfreeze_Laser)
        top_Tools.add_cascade(label=""USB"", menu=USBmenu)
        USBmenu.add(""command"", label = ""Reset USB"", command = self.Reset)
        USBmenu.add(""command"", label = ""Release USB"", command = self.Release_USB)

                    

        #top_USB = Menu(self.menuBar, tearoff=0)
        #top_USB.add(""command"", label = ""Reset USB"", command = self.Reset)
        #top_USB.add(""command"", label = ""Release USB"", command = self.Release_USB)
        #top_USB.add(""command"", label = ""Initialize Laser"", command = self.Initialize_Laser)
        #self.menuBar.add(""cascade"", label=""USB"", menu=top_USB)
        

        top_Settings = Menu(self.menuBar, tearoff=0)
        top_Settings.add(""command"", label = ""General Settings <F2>"", command = self.GEN_Settings_Window)
        top_Settings.add(""command"", label = ""Raster Settings <F3>"",  command = self.RASTER_Settings_Window)
        top_Settings.add(""command"", label = ""Rotary Settings <F4>"",  command = self.ROTARY_Settings_Window)
        top_Settings.add_separator()
        top_Settings.add_checkbutton(label = ""Advanced Settings <F6>"", variable=self.advanced ,command= self.menu_View_Refresh)
        
        self.menuBar.add(""cascade"", label=""Settings"", menu=top_Settings)
        
        top_Help = Menu(self.menuBar, tearoff=0)
        top_Help.add(""command"", label = ""About (e-mail)"", command = self.menu_Help_About)
        top_Help.add(""command"", label = ""K40 Whisperer Web Page"", command = self.menu_Help_Web)
        top_Help.add(""command"", label = ""Manual (Web Page)"", command = self.menu_Help_Manual)
        self.menuBar.add(""cascade"", label=""Help"", menu=top_Help)

        self.master.config(menu=self.menuBar)

        ##########################################################################
        #                  Config File and command line options                  #
        ##########################################################################
        config_file = ""k40_whisperer.txt""
        home_config1 = self.HOME_DIR + ""/"" + config_file
        if ( os.path.isfile(config_file) ):
            self.Open_Settings_File(config_file)
        elif ( os.path.isfile(home_config1) ):
            self.Open_Settings_File(home_config1)
#Lovejoy
        arguments = len(sys.argv) - 1
        if arguments >=1:
        # read commandline arguments, first
            fullCmdArguments = sys.argv

        # - further arguments
            argumentList = fullCmdArguments[1:]
        #opts, args = getopt.getopt(sys.argv[1:], ""ho:v"", [""help"", ""output=""])
            unixOptions = ""cghHio:rsnvVux:y:""  
            gnuOptions = [""help"",""go"",""stop"",""home"",""init"",""open"",""cut"",""raster"", ""vector"", ""verbose"",""unlock""]  

            try:  
                arguments, values = getopt.getopt(argumentList, unixOptions, gnuOptions)
            except getopt.error as err:  
            # output error, and return with an error code
                print (str(err))
                sys.exit(2)

            # evaluate given options
            for currentArgument, currentValue in arguments:  
                if currentArgument in (""-i"", ""--init""):
                    print (""initializing the laser"")
                    self.Initialize_Laser()
                    #sage()
                    #command=self.Initialize_Laser
                elif currentArgument in (""-H"", ""--home""):
                    print (""move to the home position"")
                    self.Home()
                elif currentArgument in (""-h"", ""--help""):
                    print (""CLI arguments are as follows"")
                    print (""-g --go     Starts the job with whatever other arguments"")
                    print (""-s --stop   Stops the job, doesnt go home, or un initialize"")
                    print (""-H --home   Sends the cutting head to the home [0,0] position"")
                    print (""-i --init   Initializes the laser, or prints errors if it fails"")
                    print (""-o --open   Requires an SVG file to open"")
                    print (""-h --help   Prints this dialog"")
                    print (""-c --cut    Tell the laser to cut"")
                    print (""-r --raster Raster Engrave"")
                    print (""-v --vector Vector Engrave"")
                    print (""-V          Verbose mode lo U wish.. I guess I could set debug mode"")
                    print (""-u --unlock Unlock the print head"")
                    print (""-x <Number> move to X-Cordinate "")
                    print (""-y <Number> move to Y-Cordinate "")
                    print ("" "")
                    print ("" "")
                    print (""Example Useage: $python k40_whisperer.py -i -H -o c.svg -r "")
                    exit()
                elif currentArgument in (""-o"", ""--open""):
                    print ((""opening an svg (%s)"") % (currentValue))
                    self.Open_SVG(currentValue)
                     #self.Open_SVG(filename)
                    self.send_data(""Vector_Cut"", currentValue)
                elif currentArgument in (""-g"", ""--go""):
                    print (""Start cutting or moving the head"")
                    #This option doesn't translate into a direct action like the other functions do.
                elif currentArgument in (""-s"", ""--stop""):
                    print (""Stop Cutting::dont check or make a pop up, just stop"")
                    self.CLI_Stop()
                    #self.Stop()
                elif currentArgument in (""-u"", ""--unlock""):
                    print (""unlocked the print head"")
                    self.Unlock()
                elif currentArgument in (""-c"", ""cut""):
                    print (""cuts the open svg file"")
                    self.Vector_Cut()
                elif currentArgument in (""-r"", ""--raster""):
                    print (""raster Engraves the opened file"")
                    self.Raster_Eng()
                elif currentArgument in (""-v"", ""--vector""):
                    print (""Vector Engraves the opend file"")
                    #self.Vector_Eng()
                    output_filename=currentValue
                    self.Vector_Cut()
                    self.send_data(""Vector_Cut"", output_filename)
                elif currentArgument in (""-V""):
                    print (""Verbose mode lol u wish, well, there is debug mode"")
                    print (""Version 0.19 K40_whisperer source"")
                    print (""Version 0.0  K40 CLI source"")
                elif currentArgument in (""x""):
                    print (""Move to X Coordinate "" % (currentValue))
                    self.gotoX.set(currentValue)
                    self.GoTo()
                elif currentArgument in (""y""):
                    print(""Move to Y Coordnate %s"" % (currentValue))
                    self.gotoY.set(currentValue)
                    self.GoTo()

                else:
                    print (""FOILED! put in some args if you want CLI mode"")
                    
#Lovejoy

#        opts, args = None, None
#        try:
#            opts, args = getopt.getopt(sys.argv[1:], ""ho:"",[""help"", ""other_option""])
#        except:
#            debug_message('Unable interpret command line options')
#            sys.exit()
#        for option, value in opts:
##            if option in ('-h','--help'):
##                fmessage(' ')
##                fmessage('Usage: python .py [-g file]')
##                fmessage('-o    : unknown other option (also --other_option)')
##                fmessage('-h    : print this help (also --help)\n')
##                sys.exit()
#            if option in ('-m','--micro'):
#                self.micro = True

        ##########################################################################

################################################################################
    def entry_set(self, val2, calc_flag=0, new=0):
        if calc_flag == 0 and new==0:
            try:
                self.statusbar.configure( bg = 'yellow' )
                val2.configure( bg = 'yellow' )
                self.statusMessage.set("" Recalculation required."")
            except:
                pass
        elif calc_flag == 3:
            try:
                val2.configure( bg = 'red' )
                self.statusbar.configure( bg = 'red' )
                self.statusMessage.set("" Value should be a number. "")
            except:
                pass
        elif calc_flag == 2:
            try:
                self.statusbar.configure( bg = 'red' )
                val2.configure( bg = 'red' )
            except:
                pass
        elif (calc_flag == 0 or calc_flag == 1) and new==1 :
            try:
                self.statusbar.configure( bg = 'white' )
                self.statusMessage.set("" "")
                val2.configure( bg = 'white' )
            except:
                pass
        elif (calc_flag == 1) and new==0 :
            try:
                self.statusbar.configure( bg = 'white' )
                self.statusMessage.set("" "")
                val2.configure( bg = 'white' )
            except:
                pass

        elif (calc_flag == 0 or calc_flag == 1) and new==2:
            return 0
        return 1

################################################################################
    def Write_Config_File(self, event):
        
        config_data = self.WriteConfig()
        config_file = ""k40_whisperer.txt""
        configname_full = self.HOME_DIR + ""/"" + config_file

        current_name = event.widget.winfo_parent()
        win_id = event.widget.nametowidget(current_name)

        if ( os.path.isfile(configname_full) ):
            try:
                win_id.withdraw()
            except:
                pass

            if not message_ask_ok_cancel(""Replace"", ""Replace Exiting Configuration File?\n""+configname_full):
                try:
                    win_id.deiconify()
                except:
                    pass
                return
        try:
            fout = open(configname_full,'w')
        except:
            self.statusMessage.set(""Unable to open file for writing: %s"" %(configname_full))
            self.statusbar.configure( bg = 'red' )
            return
        for line in config_data:
            try:
                fout.write(line+'\n')
            except:
                fout.write('(skipping line)\n')
        fout.close
        self.statusMessage.set(""Configuration File Saved: %s"" %(configname_full))
        self.statusbar.configure( bg = 'white' )
        try:
            win_id.deiconify()
        except:
            pass

    ################################################################################
    def WriteConfig(self):
        global Zero
        header = []
        header.append('( K40 Whisperer Settings: '+version+' )')
        header.append('( by Scorch - 2019 )')
        header.append(""(=========================================================)"")
        # BOOL
        header.append('(k40_whisperer_set include_Reng  %s )'  %( int(self.include_Reng.get())  ))
        header.append('(k40_whisperer_set include_Veng  %s )'  %( int(self.include_Veng.get())  ))
        header.append('(k40_whisperer_set include_Vcut  %s )'  %( int(self.include_Vcut.get())  ))
        header.append('(k40_whisperer_set include_Gcde  %s )'  %( int(self.include_Gcde.get())  ))
        header.append('(k40_whisperer_set include_Time  %s )'  %( int(self.include_Time.get())  ))
        
        header.append('(k40_whisperer_set halftone      %s )'  %( int(self.halftone.get())      ))
        header.append('(k40_whisperer_set HomeUR        %s )'  %( int(self.HomeUR.get())        ))
        header.append('(k40_whisperer_set inputCSYS     %s )'  %( int(self.inputCSYS.get())     ))
        header.append('(k40_whisperer_set advanced      %s )'  %( int(self.advanced.get())      ))
        header.append('(k40_whisperer_set mirror        %s )'  %( int(self.mirror.get())        ))
        header.append('(k40_whisperer_set rotate        %s )'  %( int(self.rotate.get())        ))
        header.append('(k40_whisperer_set negate        %s )'  %( int(self.negate.get())        ))
        
        header.append('(k40_whisperer_set engraveUP     %s )'  %( int(self.engraveUP.get())     ))
        header.append('(k40_whisperer_set init_home     %s )'  %( int(self.init_home.get())     ))
        header.append('(k40_whisperer_set post_home     %s )'  %( int(self.post_home.get())     ))
        header.append('(k40_whisperer_set post_beep     %s )'  %( int(self.post_beep.get())     ))
        header.append('(k40_whisperer_set post_disp     %s )'  %( int(self.post_disp.get())     ))
        header.append('(k40_whisperer_set post_exec     %s )'  %( int(self.post_exec.get())     ))
        
        header.append('(k40_whisperer_set pre_pr_crc    %s )'  %( int(self.pre_pr_crc.get())    ))
        header.append('(k40_whisperer_set inside_first  %s )'  %( int(self.inside_first.get())  ))

        header.append('(k40_whisperer_set comb_engrave  %s )'  %( int(self.comb_engrave.get())  ))
        header.append('(k40_whisperer_set comb_vector   %s )'  %( int(self.comb_vector.get())   ))
        header.append('(k40_whisperer_set zoom2image    %s )'  %( int(self.zoom2image.get())    ))
        header.append('(k40_whisperer_set rotary        %s )'  %( int(self.rotary.get())        ))
        header.append('(k40_whisperer_set reduced_mem   %s )'  %( int(self.reduced_mem.get())   ))
        header.append('(k40_whisperer_set wait          %s )'  %( int(self.wait.get())          ))

        header.append('(k40_whisperer_set trace_w_laser %s )'  %( int(self.trace_w_laser.get()) ))

        # STRING.get()
        header.append('(k40_whisperer_set board_name    %s )'  %( self.board_name.get()     ))
        header.append('(k40_whisperer_set units         %s )'  %( self.units.get()          ))
        header.append('(k40_whisperer_set Reng_feed     %s )'  %( self.Reng_feed.get()      ))
        header.append('(k40_whisperer_set Veng_feed     %s )'  %( self.Veng_feed.get()      ))
        header.append('(k40_whisperer_set Vcut_feed     %s )'  %( self.Vcut_feed.get()      ))
        header.append('(k40_whisperer_set jog_step      %s )'  %( self.jog_step.get()       ))

        header.append('(k40_whisperer_set Reng_passes   %s )'  %( self.Reng_passes.get()    ))
        header.append('(k40_whisperer_set Veng_passes   %s )'  %( self.Veng_passes.get()    ))
        header.append('(k40_whisperer_set Vcut_passes   %s )'  %( self.Vcut_passes.get()    ))
        header.append('(k40_whisperer_set Gcde_passes   %s )'  %( self.Gcde_passes.get()    ))

        header.append('(k40_whisperer_set rast_step     %s )'  %( self.rast_step.get()      ))
        header.append('(k40_whisperer_set ht_size       %s )'  %( self.ht_size.get()        ))
        
        header.append('(k40_whisperer_set LaserXsize    %s )'  %( self.LaserXsize.get()     ))
        header.append('(k40_whisperer_set LaserYsize    %s )'  %( self.LaserYsize.get()     ))
        header.append('(k40_whisperer_set LaserXscale   %s )'  %( self.LaserXscale.get()    ))
        header.append('(k40_whisperer_set LaserYscale   %s )'  %( self.LaserYscale.get()    ))
        header.append('(k40_whisperer_set LaserRscale   %s )'  %( self.LaserRscale.get()    ))
        header.append('(k40_whisperer_set rapid_feed   %s )'  %( self.rapid_feed.get()      ))
        
        header.append('(k40_whisperer_set gotoX         %s )'  %( self.gotoX.get()          ))
        header.append('(k40_whisperer_set gotoY         %s )'  %( self.gotoY.get()          ))

        header.append('(k40_whisperer_set bezier_M1     %s )'  %( self.bezier_M1.get()      ))
        header.append('(k40_whisperer_set bezier_M2     %s )'  %( self.bezier_M2.get()      ))
        header.append('(k40_whisperer_set bezier_weight %s )'  %( self.bezier_weight.get()  ))

        header.append('(k40_whisperer_set trace_gap     %s )'  %( self.trace_gap.get()      ))
        header.append('(k40_whisperer_set trace_speed   %s )'  %( self.trace_speed.get()    ))      
        
##        header.append('(k40_whisperer_set unsharp_flag  %s )'  %( int(self.unsharp_flag.get())  ))
##        header.append('(k40_whisperer_set unsharp_r     %s )'  %( self.unsharp_r.get()      ))
##        header.append('(k40_whisperer_set unsharp_p     %s )'  %( self.unsharp_p.get()      ))
##        header.append('(k40_whisperer_set unsharp_t     %s )'  %( self.unsharp_t.get()      ))

        header.append('(k40_whisperer_set t_timeout     %s )'  %( self.t_timeout.get()      ))
        header.append('(k40_whisperer_set n_timeouts    %s )'  %( self.n_timeouts.get()     ))

        header.append('(k40_whisperer_set ink_timeout   %s )'  %( self.ink_timeout.get()    ))

        
        header.append('(k40_whisperer_set designfile    \042%s\042 )' %( self.DESIGN_FILE   ))
        header.append('(k40_whisperer_set inkscape_path \042%s\042 )' %( self.inkscape_path.get() ))
        header.append('(k40_whisperer_set batch_path    \042%s\042 )' %( self.batch_path.get() ))


        self.jog_step
        header.append(""(=========================================================)"")

        return header
        ######################################################

    def Quit_Click(self, event):
        self.statusMessage.set(""Exiting!"")
        self.Release_USB
        root.destroy()

    def mousePanStart(self,event):
        self.panx = event.x
        self.pany = event.y
        self.move_start_x = event.x
        self.move_start_y = event.y
        
    def mousePan(self,event):
        all = self.PreviewCanvas.find_all()
        dx = event.x-self.panx
        dy = event.y-self.pany

        self.PreviewCanvas.move('LaserTag', dx, dy)
        self.lastx = self.lastx + dx
        self.lasty = self.lasty + dy
        self.panx = event.x
        self.pany = event.y
        
    def mousePanStop(self,event):
        Xold = round(self.laserX,3)
        Yold = round(self.laserY,3)

        can_dx = event.x-self.move_start_x
        can_dy = -(event.y-self.move_start_y)
        
        dx = can_dx*self.PlotScale
        dy = can_dy*self.PlotScale
        if self.HomeUR.get():
            dx = -dx
        self.laserX,self.laserY = self.XY_in_bounds(dx,dy)
        DXmils = round((self.laserX - Xold)*1000.0,0)
        DYmils = round((self.laserY - Yold)*1000.0,0)
        
        if self.Send_Rapid_Move(DXmils,DYmils):
            self.menu_View_Refresh()

    def right_mousePanStart(self,event):
        self.s_panx = event.x
        self.s_pany = event.y
        self.s_move_start_x = event.x
        self.s_move_start_y = event.y
        
    def right_mousePan(self,event):
        all = self.PreviewCanvas.find_all()
        dx = event.x-self.s_panx
        dy = event.y-self.s_pany

        self.PreviewCanvas.move('LaserDot', dx, dy)
        self.s_lastx = self.lastx + dx
        self.s_lasty = self.lasty + dy
        self.s_panx = event.x
        self.s_pany = event.y
        
    def right_mousePanStop(self,event):
        Xold = round(self.laserX,3)
        Yold = round(self.laserY,3)
        can_dx =   event.x-self.s_move_start_x
        can_dy = -(event.y-self.s_move_start_y)
        
        dx = can_dx*self.PlotScale
        dy = can_dy*self.PlotScale
            
        DX =  round(dx*1000)
        DY =  round(dy*1000)
        self.Move_Arbitrary(DX,DY)
        self.menu_View_Refresh()

    def LASER_Size(self):
        MINX = 0.0
        MAXY = 0.0
        if self.units.get()==""in"":
            MAXX =  float(self.LaserXsize.get())
            MINY = -float(self.LaserYsize.get())
        else:
            MAXX =  float(self.LaserXsize.get())/25.4
            MINY = -float(self.LaserYsize.get())/25.4

        return (MAXX-MINX,MAXY-MINY)


    def XY_in_bounds(self,dx_inches,dy_inches, no_size=False):
        MINX = 0.0
        MAXY = 0.0
        if self.units.get()==""in"":
            MAXX =  float(self.LaserXsize.get())
            MINY = -float(self.LaserYsize.get())
        else:
            MAXX =  float(self.LaserXsize.get())/25.4
            MINY = -float(self.LaserYsize.get())/25.4

        if (self.inputCSYS.get() and self.RengData.image == None) or no_size:
            xmin,xmax,ymin,ymax = 0.0,0.0,0.0,0.0
        else:
            xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        
        X = self.laserX + dx_inches
        Y = self.laserY + dy_inches
        ################
        dx=xmax-xmin
        dy=ymax-ymin
        if X < MINX:
            X = MINX
        if X+dx > MAXX:
            X = MAXX-dx
            
        if Y-dy < MINY:
            Y = MINY+dy
        if Y > MAXY:
            Y = MAXY
        ################
        if not no_size:
            XOFF = self.pos_offset[0]/1000.0
            YOFF = self.pos_offset[1]/1000.0
            if X+XOFF < MINX:
                X= X +(MINX-(X+XOFF))
            if X+XOFF > MAXX:
                X= X -((X+XOFF)-MAXX)
            if Y+YOFF < MINY:
                Y= Y + (MINY-(Y+YOFF))
            if Y+YOFF > MAXY:
                Y= Y -((Y+YOFF)-MAXY)
        ################
        X = round(X,3)
        Y = round(Y,3)
        return X,Y

##    def computeAccurateVeng(self):
##        self.update_gui(""Optimize vector engrave."") 
##        self.VengData.set_ecoords(self.optimize_paths(self.VengData.ecoords),data_sorted=True)
##        self.refreshTime()
##            
##    def computeAccurateVcut(self):
##        self.update_gui(""Optimize vector cut."") 
##        self.VcutData.set_ecoords(self.optimize_paths(self.VcutData.ecoords),data_sorted=True)
##        self.refreshTime()
##
##    def computeAccurateReng(self):
##        self.update_gui(""Calculating Raster engrave."")
##        if self.RengData.image != None:        
##            if self.RengData.ecoords == []:
##                self.make_raster_coords()
##        self.RengData.sorted = True 
##        self.refreshTime()


    def format_time(self,time_in_seconds):
        # format the duration from seconds to something human readable
        if time_in_seconds !=None and time_in_seconds >=0 :
            s = round(time_in_seconds)
            m,s=divmod(s,60)
            h,m=divmod(m,60)
            res = """"
            if h > 0:
                res =  ""%dh "" %(h)
            if m > 0:
                res += ""%dm "" %(m)
            if h == 0: 
                res += ""%ds "" %(s)
            #L=len(res)
            #for i in range(L,8):
            #    res =  res+"" ""
            return res
        else :
            return ""?"" 

    def refreshTime(self):
        if not self.include_Time.get():
            return
        if self.units.get() == 'in':
            factor =  60.0
        else : 
            factor = 25.4

        Raster_eng_feed = float(self.Reng_feed.get()) / factor
        Vector_eng_feed = float(self.Veng_feed.get()) / factor
        Vector_cut_feed = float(self.Vcut_feed.get()) / factor
        
        Raster_eng_passes = float(self.Reng_passes.get())
        Vector_eng_passes = float(self.Veng_passes.get())
        Vector_cut_passes = float(self.Vcut_passes.get())
        Gcode_passes      = float(self.Gcde_passes.get())

        rapid_feed = 100.0 / 25.4   # 100 mm/s move feed to be confirmed

        if self.RengData.rpaths:
            Reng_time=0
        else:
            Reng_time  = None
        Veng_time  = 0
        Vcut_time  = 0
        
        if self.RengData.len!=None:
            # these equations are a terrible hack based on measured raster engraving times
            # to be fixed someday
            if Raster_eng_feed*60.0 <= 300:
                accel_time=8.3264*(Raster_eng_feed*60.0)**(-0.7451)
            else:
                accel_time=2.5913*(Raster_eng_feed*60.0)**(-0.4795)
                
            t_accel = self.RengData.n_scanlines * accel_time
            Reng_time  =  ( (self.RengData.len)/Raster_eng_feed ) * Raster_eng_passes + t_accel
        if self.VengData.len!=None:
            Veng_time  =  (self.VengData.len / Vector_eng_feed + self.VengData.move / rapid_feed) * Vector_eng_passes
        if self.VcutData.len!=None:
            Vcut_time  =  (self.VcutData.len / Vector_cut_feed + self.VcutData.move / rapid_feed) * Vector_cut_passes
            
        Gcode_time =  self.GcodeData.gcode_time * Gcode_passes

        self.Reng_time.set(""Raster Engrave: %s"" %(self.format_time(Reng_time)))  
        self.Veng_time.set(""Vector Engrave: %s"" %(self.format_time(Veng_time)))
        self.Vcut_time.set(""    Vector Cut: %s"" %(self.format_time(Vcut_time)))
        self.Gcde_time.set(""         Gcode: %s"" %(self.format_time(Gcode_time)))
        
        ##########################################
        cszw = int(self.PreviewCanvas.cget(""width""))
        cszh = int(self.PreviewCanvas.cget(""height""))
        HUD_vspace = 15
        HUD_X = cszw-5
        HUD_Y = cszh-5

        w = int(self.master.winfo_width())
        h = int(self.master.winfo_height())
        HUD_X2 = w-20
        HUD_Y2 = h-75
        
        self.PreviewCanvas.delete(""HUD"")
        self.calc_button.place_forget()
        
        if self.GcodeData.ecoords == []:
            self.PreviewCanvas.create_text(HUD_X, HUD_Y             , fill = ""red""  ,text =self.Vcut_time.get(), anchor=""se"",tags=""HUD"")
            self.PreviewCanvas.create_text(HUD_X, HUD_Y-HUD_vspace  , fill = ""blue"" ,text =self.Veng_time.get(), anchor=""se"",tags=""HUD"")
            
            if (Reng_time==None):
                #try:
                #    self.calc_button.place_forget()
                #except:
                #    pass
                #self.calc_button = Button(self.master,text=""Calculate Raster Time"", command=self.menu_Calc_Raster_Time)
                self.calc_button.place(x=HUD_X2, y=HUD_Y2, width=120+20, height=17, anchor=""se"")   
            else:
                self.calc_button.place_forget()
                self.PreviewCanvas.create_text(HUD_X, HUD_Y-HUD_vspace*2, fill = ""black"",
                                               text =self.Reng_time.get(), anchor=""se"",tags=""HUD"")           
        else:
            self.PreviewCanvas.create_text(HUD_X, HUD_Y, fill = ""black"",text =self.Gcde_time.get(), anchor=""se"",tags=""HUD"")
        ##########################################


    def Settings_ReLoad_Click(self, event):
        win_id=self.grab_current()

    def Close_Current_Window_Click(self,event=None):
        current_name = event.widget.winfo_parent()
        win_id = event.widget.nametowidget(current_name)
        win_id.destroy()
        
    # Left Column #
    #############################
    def Entry_Reng_feed_Check(self):
        try:
            value = float(self.Reng_feed.get())
            vfactor=(25.4/60.0)/self.feed_factor()
            low_limit = self.min_raster_speed*vfactor
            if  value < low_limit:
                self.statusMessage.set("" Feed Rate should be greater than or equal to %f "" %(low_limit))
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Reng_feed_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Reng_feed, self.Entry_Reng_feed_Check(), new=1)        
    #############################
    def Entry_Veng_feed_Check(self):
        try:
            value = float(self.Veng_feed.get())
            vfactor=(25.4/60.0)/self.feed_factor()
            low_limit = self.min_vector_speed*vfactor
            if  value < low_limit:
                self.statusMessage.set("" Feed Rate should be greater than or equal to %f "" %(low_limit))
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Veng_feed_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Veng_feed, self.Entry_Veng_feed_Check(), new=1)
    #############################
    def Entry_Vcut_feed_Check(self):
        try:
            value = float(self.Vcut_feed.get())
            vfactor=(25.4/60.0)/self.feed_factor()
            low_limit = self.min_vector_speed*vfactor
            if  value < low_limit:
                self.statusMessage.set("" Feed Rate should be greater than or equal to %f "" %(low_limit))
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Vcut_feed_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Vcut_feed, self.Entry_Vcut_feed_Check(), new=1)
        
    #############################
    def Entry_Step_Check(self):
        try:
            value = float(self.jog_step.get())
            if  value <= 0.0:
                self.statusMessage.set("" Step should be greater than 0.0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Step_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Step, self.Entry_Step_Check(), new=1)


    #############################
    def Entry_GoToX_Check(self):
        try:
            value = float(self.gotoX.get())
            if  (value < 0.0) and (not self.HomeUR.get()):
                self.statusMessage.set("" Value should be greater than 0.0 "")
                return 2 # Value is invalid number
            elif (value > 0.0) and self.HomeUR.get():
                self.statusMessage.set("" Value should be less than 0.0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_GoToX_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_GoToX, self.Entry_GoToX_Check(), new=1)

    #############################
    def Entry_GoToY_Check(self):
        try:
            value = float(self.gotoY.get())
            if  value > 0.0:
                self.statusMessage.set("" Value should be less than 0.0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_GoToY_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_GoToY, self.Entry_GoToY_Check(), new=1)
        
    #############################
    def Entry_Rstep_Check(self):
        try:
            value = self.get_raster_step_1000in()
            if  value <= 0 or value > 63:
                self.statusMessage.set("" Step should be between 0.001 and 0.063 in"")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Rstep_Callback(self, varName, index, mode):
        self.RengData.reset_path()
        self.refreshTime()
        self.entry_set(self.Entry_Rstep, self.Entry_Rstep_Check(), new=1)

##    #############################
##    def Entry_Unsharp_Radius_Check(self):
##        try:
##            value = float(self.unsharp_r.get())
##            if  value <= 0:
##                self.statusMessage.set("" Radius should be greater than zero."")
##                return 2 # Value is invalid number
##        except:
##            return 3     # Value not a number
##        self.menu_View_Refresh_Callback()
##        return 0         # Value is a valid number
##    def Entry_Unsharp_Radius_Callback(self, varName, index, mode):
##        self.entry_set(self.Entry_Unsharp_Radius, self.Entry_Unsharp_Radius_Check(), new=1)
##        
##
##    #############################
##    def Entry_Unsharp_Percent_Check(self):
##        try:
##            value = float(self.unsharp_p.get())
##            if  value <= 0:
##                self.statusMessage.set("" Percent should be greater than zero."")
##                return 2 # Value is invalid number
##        except:
##            return 3     # Value not a number
##        self.menu_View_Refresh_Callback()
##        return 0         # Value is a valid number
##    def Entry_Unsharp_Percent_Callback(self, varName, index, mode):
##        self.entry_set(self.Entry_Unsharp_Percent, self.Entry_Unsharp_Percent_Check(), new=1)
##        
##    #############################
##    def Entry_Unsharp_Threshold_Check(self):
##        try:
##            value = float(self.unsharp_t.get())
##            if  value < 0:
##                self.statusMessage.set("" Threshold should be greater than or equal to zero."")
##                return 2 # Value is invalid number
##        except:
##            return 3     # Value not a number
##        self.menu_View_Refresh_Callback()
##        return 0         # Value is a valid number
##    def Entry_Unsharp_Threshold_Callback(self, varName, index, mode):
##        self.entry_set(self.Entry_Unsharp_Threshold, self.Entry_Unsharp_Threshold_Check(), new=1)
 
    #############################
    # End Left Column #
    #############################
    def bezier_weight_Callback(self, varName=None, index=None, mode=None):
        self.Reset_RasterPath_and_Update_Time()
        self.bezier_plot()
        
    def bezier_M1_Callback(self, varName=None, index=None, mode=None):
        self.Reset_RasterPath_and_Update_Time()
        self.bezier_plot()

    def bezier_M2_Callback(self, varName=None, index=None, mode=None):
        self.Reset_RasterPath_and_Update_Time()
        self.bezier_plot()

    def bezier_plot(self):
        self.BezierCanvas.delete('bez')

        #self.BezierCanvas.create_line( 5,260-0,260,260-255,fill=""black"", capstyle=""round"", width = 2, tags='bez')
        M1 = float(self.bezier_M1.get())
        M2 = float(self.bezier_M2.get())
        w  = float(self.bezier_weight.get())
        num = 10
        x,y = self.generate_bezier(M1,M2,w,n=num)
        for i in range(0,num):
            self.BezierCanvas.create_line( 5+x[i],260-y[i],5+x[i+1],260-y[i+1],fill=""black"", \
                                           capstyle=""round"", width = 2, tags='bez')
        self.BezierCanvas.create_text(128, 0, text=""Output Level vs. Input Level"",anchor=""n"", tags='bez')


    #############################
    def Entry_Ink_Timeout_Check(self):
        try:
            value = float(self.ink_timeout.get())
            if  value < 0.0:
                self.statusMessage.set("" Timeout should be 0 or greater"")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Ink_Timeout_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Ink_Timeout,self.Entry_Ink_Timeout_Check(), new=1)
        
     
    #############################
    def Entry_Timeout_Check(self):
        try:
            value = float(self.t_timeout.get())
            if  value <= 0.0:
                self.statusMessage.set("" Timeout should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Timeout_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Timeout,self.Entry_Timeout_Check(), new=1)

    #############################
    def Entry_N_Timeouts_Check(self):
        try:
            value = float(self.n_timeouts.get())
            if  value <= 0.0:
                self.statusMessage.set("" N_Timeouts should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_N_Timeouts_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_N_Timeouts,self.Entry_N_Timeouts_Check(), new=1)
    
    #############################
    def Entry_N_EGV_Passes_Check(self):
        try:
            value = int(self.n_egv_passes.get())
            if  value < 1:
                self.statusMessage.set("" EGV passes should be 1 or higher"")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_N_EGV_Passes_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_N_EGV_Passes,self.Entry_N_EGV_Passes_Check(), new=1)
        
    #############################
    def Entry_Laser_Area_Width_Check(self):
        try:
            value = float(self.LaserXsize.get())
            if  value <= 0.0:
                self.statusMessage.set("" Width should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Laser_Area_Width_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Laser_Area_Width,self.Entry_Laser_Area_Width_Check(), new=1)

    #############################
    def Entry_Laser_Area_Height_Check(self):
        try:
            value = float(self.LaserYsize.get())
            if  value <= 0.0:
                self.statusMessage.set("" Height should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Laser_Area_Height_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Laser_Area_Height,self.Entry_Laser_Area_Height_Check(), new=1)


    #############################
    def Entry_Laser_X_Scale_Check(self):
        try:
            value = float(self.LaserXscale.get())
            if  value <= 0.0:
                self.statusMessage.set("" X scale factor should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.Reset_RasterPath_and_Update_Time()
        return 0         # Value is a valid number
    def Entry_Laser_X_Scale_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Laser_X_Scale,self.Entry_Laser_X_Scale_Check(), new=1)
    #############################
    def Entry_Laser_Y_Scale_Check(self):
        try:
            value = float(self.LaserYscale.get())
            if  value <= 0.0:
                self.statusMessage.set("" Y scale factor should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.Reset_RasterPath_and_Update_Time()
        return 0         # Value is a valid number
    def Entry_Laser_Y_Scale_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Laser_Y_Scale,self.Entry_Laser_Y_Scale_Check(), new=1)

    #############################
    def Entry_Laser_R_Scale_Check(self):
        try:
            value = float(self.LaserRscale.get())
            if  value <= 0.0:
                self.statusMessage.set("" Rotary scale factor should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.Reset_RasterPath_and_Update_Time()
        return 0         # Value is a valid number
    def Entry_Laser_R_Scale_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Laser_R_Scale,self.Entry_Laser_R_Scale_Check(), new=1)
        
    #############################
    def Entry_Laser_Rapid_Feed_Check(self):
        try:
            value = float(self.rapid_feed.get())
            vfactor=(25.4/60.0)/self.feed_factor()
            low_limit = 1.0*vfactor
            if  value !=0 and value < low_limit:
                self.statusMessage.set("" Rapid feed should be greater than or equal to %f (or 0 for default speed) "" %(low_limit))
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        return 0         # Value is a valid number
    def Entry_Laser_Rapid_Feed_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Laser_Rapid_Feed,self.Entry_Laser_Rapid_Feed_Check(), new=1)

    # Advanced Column #
    #############################
    def Entry_Reng_passes_Check(self):
        try:
            value = int(self.Reng_passes.get())
            if  value < 1:
                self.statusMessage.set("" Number of passes should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Reng_passes_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Reng_passes, self.Entry_Reng_passes_Check(), new=1)        
    #############################
    def Entry_Veng_passes_Check(self):
        try:
            value = int(self.Veng_passes.get())
            if  value < 1:
                self.statusMessage.set("" Number of passes should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Veng_passes_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Veng_passes, self.Entry_Veng_passes_Check(), new=1)
    #############################
    def Entry_Vcut_passes_Check(self):
        try:
            value = int(self.Vcut_passes.get())
            if  value < 1:
                self.statusMessage.set("" Number of passes should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Vcut_passes_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Vcut_passes, self.Entry_Vcut_passes_Check(), new=1)
        
    #############################
    def Entry_Gcde_passes_Check(self):
        try:
            value = int(self.Gcde_passes.get())
            if  value < 1:
                self.statusMessage.set("" Number of passes should be greater than 0 "")
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Gcde_passes_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Gcde_passes, self.Entry_Gcde_passes_Check(), new=1)
        
    #############################

    def Entry_Trace_Gap_Check(self):
        try:
            value = float(self.trace_gap.get())
        except:
            return 3     # Value not a number
        self.menu_View_Refresh()
        return 0         # Value is a valid number
    def Entry_Trace_Gap_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Trace_Gap, self.Entry_Trace_Gap_Check(), new=1)
        
    #############################

    def Entry_Trace_Speed_Check(self):
        try:
            value = float(self.trace_speed.get())
            vfactor=(25.4/60.0)/self.feed_factor()
            low_limit = self.min_vector_speed*vfactor
            if  value < low_limit:
                self.statusMessage.set("" Feed Rate should be greater than or equal to %f "" %(low_limit))
                return 2 # Value is invalid number
        except:
            return 3     # Value not a number
        self.refreshTime()
        return 0         # Value is a valid number
    def Entry_Trace_Speed_Callback(self, varName, index, mode):
        self.entry_set(self.Entry_Trace_Speed, self.Entry_Trace_Speed_Check(), new=1)
        
    #############################
    def Inkscape_Path_Click(self, event):
        self.Inkscape_Path_Message()
        win_id=self.grab_current()
        newfontdir = askopenfilename(filetypes=[(""Executable Files"",(""inkscape.exe"",""*inkscape*"")),\
                                                (""All Files"",""*"")],\
                                                 initialdir=self.inkscape_path.get())
        if newfontdir != """" and newfontdir != ():
            if type(newfontdir) is not str:
                newfontdir = newfontdir.encode(""utf-8"")
            self.inkscape_path.set(newfontdir)
            
        try:
            win_id.withdraw()
            win_id.deiconify()
        except:
            pass

    def Inkscape_Path_Message(self, event=None):
        if self.inkscape_warning == False:
            self.inkscape_warning = True
            msg1 = ""Beware:""
            msg2 = ""Most people should leave the 'Inkscape Executable' entry field blank. ""
            msg3 = ""K40 Whisperer will find Inkscape in one of the the standard locations after you install Inkscape.""
            message_box(msg1, msg2+msg3)
            
            
    def Entry_units_var_Callback(self):
        if (self.units.get() == 'in') and (self.funits.get()=='mm/s'):
            self.funits.set('in/min')
            self.Scale_Linear_Inputs('in')
        elif (self.units.get() == 'mm') and (self.funits.get()=='in/min'):
            self.funits.set('mm/s')
            self.Scale_Linear_Inputs('mm')
            
    def Scale_Linear_Inputs(self, new_units=None):
        if new_units=='in':
            self.units_scale = 1.0
            factor  = 1/25.4
            vfactor = 60.0/25.4
        elif new_units=='mm':
            factor  = 25.4
            vfactor = 25.4/60.0
            self.units_scale = 25.4
        else:
            return
        self.LaserXsize.set ( self.Scale_Text_Value('%.2f',self.LaserXsize.get()  ,factor ) )
        self.LaserYsize.set ( self.Scale_Text_Value('%.2f',self.LaserYsize.get()  ,factor ) )
        self.jog_step.set   ( self.Scale_Text_Value('%.3f',self.jog_step.get()    ,factor ) )
        self.gotoX.set      ( self.Scale_Text_Value('%.3f',self.gotoX.get()       ,factor ) )
        self.gotoY.set      ( self.Scale_Text_Value('%.3f',self.gotoY.get()       ,factor ) )
        self.Reng_feed.set  ( self.Scale_Text_Value('%.1f',self.Reng_feed.get()   ,vfactor) )
        self.Veng_feed.set  ( self.Scale_Text_Value('%.1f',self.Veng_feed.get()   ,vfactor) )
        self.Vcut_feed.set  ( self.Scale_Text_Value('%.1f',self.Vcut_feed.get()   ,vfactor) )
        self.trace_speed.set( self.Scale_Text_Value('%.1f',self.trace_speed.get() ,vfactor) )
        self.rapid_feed.set ( self.Scale_Text_Value('%.1f',self.rapid_feed.get()  ,vfactor) )

    def Scale_Text_Value(self,format_txt,Text_Value,factor):
        try:
            return format_txt %(float(Text_Value)*factor )
        except:
            return ''

    def menu_File_Open_Settings_File(self,event=None):
        init_dir = os.path.dirname(self.DESIGN_FILE)
        if ( not os.path.isdir(init_dir) ):
            init_dir = self.HOME_DIR
        fileselect = askopenfilename(filetypes=[(""Settings Files"",""*.txt""),\
                                                (""All Files"",""*"")],\
                                                 initialdir=init_dir)
        if fileselect != '' and fileselect != ():
            self.Open_Settings_File(fileselect)

    def Reduced_Memory_Callback(self, varName, index, mode):
        if self.RengData.image != None:
             self.menu_Reload_Design()
             #print(""Reload_Design"")
    
    def menu_Reload_Design(self,event=None):
        if self.GUI_Disabled:
            return
        file_full = self.DESIGN_FILE
        file_name = os.path.basename(file_full)
        if ( os.path.isfile(file_full) ):
            filename = file_full
        elif ( os.path.isfile( file_name ) ):
            filename = file_name
        elif ( os.path.isfile( self.HOME_DIR+""/""+file_name ) ):
            filename = self.HOME_DIR+""/""+file_name
        else:
            self.statusMessage.set(""file not found: %s"" %(os.path.basename(file_full)) )
            self.statusbar.configure( bg = 'red' ) 
            return
        
        Name, fileExtension = os.path.splitext(filename)
        TYPE=fileExtension.upper()
        if TYPE=='.DXF':
            self.Open_DXF(filename)
        elif TYPE=='.SVG':
            self.Open_SVG(filename)
        elif TYPE=='.EGV':
            self.EGV_Send_Window(filename)
        else:
            self.Open_G_Code(filename)
        self.menu_View_Refresh()
        
        

    def menu_File_Open_Design(self,event=None):
        if self.GUI_Disabled:
            return
        init_dir = os.path.dirname(self.DESIGN_FILE)
        if ( not os.path.isdir(init_dir) ):
            init_dir = self.HOME_DIR

        design_types = (""Design Files"", (""*.svg"",""*.dxf""))
        gcode_types  = (""G-Code Files"", (""*.ngc"",""*.gcode"",""*.g"",""*.tap""))
        
        Name, fileExtension = os.path.splitext(self.DESIGN_FILE)
        TYPE=fileExtension.upper()
        if TYPE != '.DXF' and TYPE!='.SVG' and TYPE!='.EGV' and TYPE!='':
            default_types = gcode_types
        else:
            default_types = design_types
        
        fileselect = askopenfilename(filetypes=[default_types,
                                            (""G-Code Files "", (""*.ngc"",""*.gcode"",""*.g"",""*.tap"")),\
                                            (""DXF Files "",""*.dxf""),\
                                            (""SVG Files "",""*.svg""),\
                                            (""All Files "",""*""),\
                                            (""Design Files "", (""*.svg"",""*.dxf""))],\
                                            initialdir=init_dir)

        if fileselect == () or (not os.path.isfile(fileselect)):
            return
            
        Name, fileExtension = os.path.splitext(fileselect)
        self.update_gui(""Opening '%s'"" % fileselect )
        TYPE=fileExtension.upper()
        if TYPE=='.DXF':
            self.Open_DXF(fileselect)
        elif TYPE=='.SVG':
            self.Open_SVG(fileselect)
        else:
            self.Open_G_Code(fileselect)

            
        self.DESIGN_FILE = fileselect
        self.menu_View_Refresh()
        
    def menu_File_Raster_Engrave(self):
        self.menu_File_save_EGV(operation_type=""Raster_Eng"")
        
    def menu_File_Vector_Engrave(self):
        self.menu_File_save_EGV(operation_type=""Vector_Eng"")
        
    def menu_File_Vector_Cut(self):
        self.menu_File_save_EGV(operation_type=""Vector_Cut"")
        
    def menu_File_G_Code(self):
        self.menu_File_save_EGV(operation_type=""Gcode_Cut"")
        
    def menu_File_Raster_Vector_Engrave(self):
        self.menu_File_save_EGV(operation_type=""Raster_Eng-Vector_Eng"")

    def menu_File_Vector_Engrave_Cut(self):
        self.menu_File_save_EGV(operation_type=""Vector_Eng-Vector_Cut"")

    def menu_File_Raster_Vector_Cut(self):
        self.menu_File_save_EGV(operation_type=""Raster_Eng-Vector_Eng-Vector_Cut"")

    def menu_File_save_EGV(self,operation_type=None,default_name=""out.EGV""):
        self.stop[0]=False
        if DEBUG:
            start=time()
        fileName, fileExtension = os.path.splitext(self.DESIGN_FILE)
        init_file=os.path.basename(fileName)
        default_name = init_file+""_""+operation_type
        
        if self.EGV_FILE != None:
            init_dir = os.path.dirname(self.EGV_FILE)
        else:
            init_dir = os.path.dirname(self.DESIGN_FILE)
            
        if ( not os.path.isdir(init_dir) ):
            init_dir = self.HOME_DIR
            
        fileName, fileExtension = os.path.splitext(default_name)
        init_file=os.path.basename(fileName)

        filename = asksaveasfilename(defaultextension='.EGV', \
                                     filetypes=[(""EGV File"",""*.EGV"")],\
                                     initialdir=init_dir,\
                                     initialfile= init_file )
        
        if filename != '' and filename != ():

            if operation_type.find(""Raster_Eng"") > -1:
                self.make_raster_coords()
            else:
                self.statusbar.configure( bg = 'yellow' )
                self.statusMessage.set(""No raster data to engrave"")
                
            self.send_data(operation_type=operation_type, output_filename=filename)
            self.EGV_FILE = filename
        if DEBUG:
            print(""time = %d seconds"" %(int(time()-start)))
        self.stop[0]=True
        


    def menu_File_Open_EGV(self):
        init_dir = os.path.dirname(self.DESIGN_FILE)
        if ( not os.path.isdir(init_dir) ):
            init_dir = self.HOME_DIR
        fileselect = askopenfilename(filetypes=[(""Engraver Files"", (""*.egv"",""*.EGV"")),\
                                                    (""All Files"",""*"")],\
                                                     initialdir=init_dir)
        if fileselect != '' and fileselect != ():
            self.resetPath()
            self.DESIGN_FILE = fileselect
            self.EGV_Send_Window(fileselect)
        
    def Open_EGV(self,filemname,n_passes=1):
        self.stop[0]=False
        EGV_data=[]
        value1 = """"
        value2 = """"
        value3 = """"
        value4 = """"
        data=""""
        #value1 and value2 are the absolute y and x starting positions
        #value3 and value4 are the absolute y and x end positions
        with open(filemname) as f:
            while True:
                ## Skip header
                c = f.read(1)
                while c!=""%"" and c:
                    c = f.read(1)
                ## Read 1st Value
                c = f.read(1)
                while c!=""%"" and c:
                    value1 = value1 + c
                    c = f.read(1)
                y_start_mils = int(value1) 
                ## Read 2nd Value
                c = f.read(1)
                while c!=""%"" and c:
                    value2 = value2 + c
                    c = f.read(1)
                x_start_mils = int(value2)   
                ## Read 3rd Value
                c = f.read(1)
                while c!=""%"" and c:
                    value3 = value3 + c
                    c = f.read(1)
                y_end_mils = int(value3)
                ## Read 4th Value
                c = f.read(1)
                while c!=""%"" and c:
                    value4 = value4 + c
                    c = f.read(1)
                x_end_mils = int(value4)
                break

            ## Read Data
            while True:
                c = f.read(1)
                if not c:
                    break
                if c=='\n' or c==' ' or c=='\r':
                    pass
                else:
                    data=data+""%c"" %c
                    EGV_data.append(ord(c))
                    
        if ( (x_end_mils != 0) or (y_end_mils != 0) ):
            n_passes=1
        else:
            x_start_mils = 0
            y_start_mils = 0

        try:
            self.send_egv_data(EGV_data,n_passes)
        except MemoryError as e:
            msg1 = ""Memory Error:""
            msg2 = ""Memory Error:  Out of Memory.""
            self.statusMessage.set(msg2)
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
            
        except Exception as e:
            msg1 = ""Sending Data Stopped: ""
            msg2 = ""%s"" %(e)
            if msg2 == """":
                formatted_lines = traceback.format_exc().splitlines()
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())

        #rapid move back to starting position
        dxmils = -(x_end_mils - x_start_mils)
        dymils =   y_end_mils - y_start_mils
        self.Send_Rapid_Move(dxmils,dxmils)
        self.stop[0]=True
        
    def Open_SVG(self,filemname):
        self.resetPath()
        self.SVG_FILE = filemname
        if self.reduced_mem.get():
            self.input_dpi = 500.0
        else:
            self.input_dpi = 1000.0
        svg_reader =  SVG_READER()
        svg_reader.image_dpi = self.input_dpi
        svg_reader.set_inkscape_path(self.inkscape_path.get())
        svg_reader.timout = int(float( self.ink_timeout.get())*60.0) 
        dialog_pxpi    = None
        dialog_viewbox = None
        try:
            try:
                try:
                    svg_reader.parse_svg(self.SVG_FILE)
                    svg_reader.make_paths()
                except SVG_PXPI_EXCEPTION as e:
                    pxpi_dialog = pxpiDialog(root,
                                           self.units.get(),
                                           svg_reader.SVG_Size,
                                           svg_reader.SVG_ViewBox,
                                           svg_reader.SVG_inkscape_version)
                    
                    svg_reader = SVG_READER()
                    svg_reader.image_dpi = self.input_dpi
                    svg_reader.set_inkscape_path(self.inkscape_path.get())
                    svg_reader.timout = int(float( self.ink_timeout.get())*60.0) 
                    if pxpi_dialog.result == None:
                        return
                    
                    dialog_pxpi,dialog_viewbox = pxpi_dialog.result
                    svg_reader.parse_svg(self.SVG_FILE)
                    svg_reader.set_size(dialog_pxpi,dialog_viewbox)
                    svg_reader.make_paths()
                    
            except SVG_TEXT_EXCEPTION as e:
                svg_reader = SVG_READER()
                svg_reader.image_dpi = self.input_dpi
                svg_reader.set_inkscape_path(self.inkscape_path.get())
                svg_reader.timout = int(float( self.ink_timeout.get())*60.0) 
                self.statusMessage.set(""Converting TEXT to PATHS."")
                self.master.update()
                svg_reader.parse_svg(self.SVG_FILE)
                if dialog_pxpi != None and dialog_viewbox != None:
                    svg_reader.set_size(dialog_pxpi,dialog_viewbox)
                svg_reader.make_paths(txt2paths=True)
                
        except Exception as e:
            msg1 = ""SVG Error: ""
            msg2 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
            return
        except:
            self.statusMessage.set(""Unable To open SVG File: %s"" %(filemname))
            debug_message(traceback.format_exc())
            return
        xmax = svg_reader.Xsize/25.4
        ymax = svg_reader.Ysize/25.4
        xmin = 0
        ymin = 0

        self.Design_bounds = (xmin,xmax,ymin,ymax)
            
        ##########################
        ###   Create ECOORDS   ###
        ##########################
        self.VcutData.make_ecoords(svg_reader.cut_lines,scale=1/25.4)
        self.VengData.make_ecoords(svg_reader.eng_lines,scale=1/25.4)

        ##########################
        ###   Load Image       ###
        ##########################
        self.RengData.set_image(svg_reader.raster_PIL)
        
        if (self.RengData.image != None):
            self.wim, self.him = self.RengData.image.size
            self.aspect_ratio =  float(self.wim-1) / float(self.him-1)
            #self.make_raster_coords()
        self.refreshTime()
        margin=0.0625 # A bit of margin to prevent the warningwindow for designs that are close to being within the bounds
        if self.Design_bounds[0] > self.VengData.bounds[0]+margin or\
           self.Design_bounds[0] > self.VcutData.bounds[0]+margin or\
           self.Design_bounds[1] < self.VengData.bounds[1]-margin or\
           self.Design_bounds[1] < self.VcutData.bounds[1]-margin or\
           self.Design_bounds[2] > self.VengData.bounds[2]+margin or\
           self.Design_bounds[2] > self.VcutData.bounds[2]+margin or\
           self.Design_bounds[3] < self.VengData.bounds[3]-margin or\
           self.Design_bounds[3] < self.VcutData.bounds[3]-margin:
            line1 = ""Warning:\n""
            line2 = ""There is vector cut or vector engrave data located outside of the SVG page bounds.\n\n""
            line3 = ""K40 Whisperer will attempt to use all of the vector data.  ""
            line4 = ""Please verify that the vector data is not outside of your lasers working area before engraving.""
            message_box(""Warning"", line1+line2+line3+line4)


    #####################################################################
    def make_raster_coords(self):
        if self.RengData.rpaths:
            return
        try:
            hcoords=[]
            if (self.RengData.image != None and self.RengData.ecoords==[]):
                ecoords=[]
                cutoff=128
                image_temp = self.RengData.image.convert(""L"")
##                if self.unsharp_flag.get():
##                    from PIL import ImageFilter       
##                    #image_temp = image_temp.filter(UnsharpMask(radius=self.unsharp_r, percent=self.unsharp_p, threshold=self.unsharp_t))
##                    filter = ImageFilter.UnsharpMask()
##                    filter.radius    = float(self.unsharp_r.get())      # radius 3-5 pixels
##                    filter.percent   = int(float(self.unsharp_p.get())) # precent 500%
##                    filter.threshold = int(float(self.unsharp_t.get())) # Threshold 0
##                    image_temp = image_temp.filter(filter)

                if self.negate.get():
                    image_temp = ImageOps.invert(image_temp)
                    
                if self.mirror.get():
                    image_temp = ImageOps.mirror(image_temp)

                if self.rotate.get():
                    #image_temp = image_temp.rotate(90,expand=True)
                    image_temp = self.rotate_raster(image_temp)

                Xscale = float(self.LaserXscale.get())
                Yscale = float(self.LaserYscale.get())    
                if self.rotary.get():
                    Rscale = float(self.LaserRscale.get())
                    Yscale = Yscale*Rscale

                if Xscale != 1.0 or Yscale != 1.0:
                    wim,him = image_temp.size
                    nw = int(wim*Xscale)
                    nh = int(him*Yscale)
                    image_temp = image_temp.resize((nw,nh))

                    
                if self.halftone.get():
                    ht_size_mils =  round( self.input_dpi / float(self.ht_size.get()) ,1)
                    npixels = int( round(ht_size_mils,1) )
                    if npixels == 0:
                        return
                    wim,him = image_temp.size
                    # Convert to Halftoning and save
                    nw=int(wim / npixels)
                    nh=int(him / npixels)
                    image_temp = image_temp.resize((nw,nh))
                    
                    image_temp = self.convert_halftoning(image_temp)
                    image_temp = image_temp.resize((wim,him))
                else:
                    image_temp = image_temp.point(lambda x: 0 if x<128 else 255, '1')
                    
                if DEBUG:
                    image_name = os.path.expanduser(""~"")+""/IMAGE.png""
                    image_temp.save(image_name,""PNG"")

                Reng_np = image_temp.load()
                wim,him = image_temp.size
                del image_temp
                #######################################
                x=0
                y=0
                loop=1
                LENGTH=0
                n_scanlines = 0 
                
                my_hull = hull2D()
                bignumber = 9999999;
                Raster_step = int(self.get_raster_step_1000in())
                timestamp=0
                im_height_mils = int(him/self.input_dpi*1000.0)
                for i_step in range(0,im_height_mils,Raster_step):
                    i=floor(i_step*self.input_dpi/1000.0)
                    #print(i_step,i)
                    stamp=int(3*time()) #update every 1/3 of a second
                    if (stamp != timestamp):
                        timestamp=stamp #interlock
                        self.statusMessage.set(""Creating Scan Lines: %.1f %%"" %( (100.0*i)/him ) )
                        self.master.update()
                    #lovejoy    
                    if self.stop[0]==True:
                        raise Exception(""Action stopped by User."")
                    line = []
                    cnt=1
                    LEFT  = bignumber;
                    RIGHT =-bignumber;
                    for j in range(1,wim):
                        if (Reng_np[j,i] == Reng_np[j-1,i]):
                            cnt = cnt+1
                        else:
                            if Reng_np[j-1,i]:
                                laser = ""U""
                            else:
                                laser = ""D""
                                LEFT  = min(j-cnt,LEFT)
                                RIGHT = max(j,RIGHT)
                                
                            line.append((cnt,laser))
                            cnt=1
                    if Reng_np[j-1,i] > cutoff:
                        laser = ""U""
                    else:
                        laser = ""D""
                        LEFT  = min(j-cnt,LEFT)
                        RIGHT = max(j,RIGHT)
                        
                    line.append((cnt,laser))
                    if LEFT != bignumber and RIGHT != -bignumber:
                        LENGTH = LENGTH + (RIGHT - LEFT)/self.input_dpi
                        n_scanlines = n_scanlines + 1
                    
                    y=(im_height_mils-i_step)/1000.0
                    x=0
                    if LEFT != bignumber:
                        hcoords.append([LEFT/self.input_dpi,y])
                    if RIGHT != -bignumber:
                        hcoords.append([RIGHT/self.input_dpi,y])
                    if hcoords!=[]:
                        hcoords = my_hull.convexHullecoords(hcoords)
                        
                    rng = list(range(0,len(line),1))
                        
                    for i in rng:
                        seg = line[i]
                        delta = seg[0]/self.input_dpi
                        if seg[1]==""D"":
                            loop=loop+1
                            ecoords.append([x      ,y,loop])
                            ecoords.append([x+delta,y,loop])
                        x = x + delta
                self.RengData.set_ecoords(ecoords,data_sorted=True)
                self.RengData.len=LENGTH
                self.RengData.n_scanlines = n_scanlines
            #Set Flag indicating raster paths have been calculated    
            self.RengData.rpaths = True
            self.RengData.hull_coords = hcoords
        
        except MemoryError as e:
            msg1 = ""Memory Error:""
            msg2 = ""Memory Error:  Out of Memory.""
            self.statusMessage.set(msg2)
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
            
        except Exception as e:
            msg1 = ""Making Raster Coords Stopped: ""
            msg2 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
    #######################################################################


    def rotate_raster(self,image_in):
        wim,him = image_in.size
        im_rotated = Image.new(""L"", (him, wim), ""white"")

        image_in_np   = image_in.load()
        im_rotated_np = im_rotated.load()
        
        for i in range(1,him):
            for j in range(1,wim):
                im_rotated_np[i,wim-j] = image_in_np[j,i]
        return im_rotated
    
    def get_raster_step_1000in(self):
        val_in = float(self.rast_step.get())
        value = int(round(val_in*1000.0,1)) 
        return value


    def generate_bezier(self,M1,M2,w,n=100):
        if (M1==M2):
            x1=0
            y1=0
        else:
            x1 = 255*(1-M2)/(M1-M2)
            y1 = M1*x1
        x=[]
        y=[]
        # Calculate Bezier Curve
        for step in range(0,n+1):
            t    = float(step)/float(n)
            Ct   = 1 / ( pow(1-t,2)+2*(1-t)*t*w+pow(t,2) )
            x.append( Ct*( 2*(1-t)*t*w*x1+pow(t,2)*255) )
            y.append( Ct*( 2*(1-t)*t*w*y1+pow(t,2)*255) )
        return x,y

    '''This Example opens an Image and transform the image into halftone.  -Isai B. Cicourel'''
    # Create a Half-tone version of the image
    def convert_halftoning(self,image):
        image = image.convert('L')
        x_lim, y_lim = image.size
        pixel = image.load()
        
        M1 = float(self.bezier_M1.get())
        M2 = float(self.bezier_M2.get())
        w  = float(self.bezier_weight.get())
        
        if w > 0:
            x,y = self.generate_bezier(M1,M2,w)
            
            interp = interpolate(x, y) # Set up interpolate class
            val_map=[]
            # Map Bezier Curve to values between 0 and 255
            for val in range(0,256):
                val_out = int(round(interp[val])) # Get the interpolated value at each value
                val_map.append(val_out)
            # Adjust image
            timestamp=0
            for y in range(1, y_lim):
                stamp=int(3*time()) #update every 1/3 of a second
                if (stamp != timestamp):
                    timestamp=stamp #interlock
                    self.statusMessage.set(""Adjusting Image Darkness: %.1f %%"" %( (100.0*y)/y_lim ) )
                    self.master.update()
                for x in range(1, x_lim):
                    pixel[x, y] = val_map[ pixel[x, y] ]

        self.statusMessage.set(""Creating Halftone Image."" )
        self.master.update()
        image = image.convert('1')
        return image

    #######################################################################

    def gcode_error_message(self,message):
        error_report = Toplevel(width=525,height=60)
        error_report.title(""G-Code Reading Errors/Warnings"")
        error_report.iconname(""G-Code Errors"")
        error_report.grab_set()
        return_value =  StringVar()
        return_value.set(""none"")


        def Close_Click(event):
            return_value.set(""close"")
            error_report.destroy()
            
        #Text Box
        Error_Frame = Frame(error_report)
        scrollbar = Scrollbar(Error_Frame, orient=VERTICAL)
        Error_Text = Text(Error_Frame, width=""80"", height=""20"",yscrollcommand=scrollbar.set,bg='white')
        for line in message:
            Error_Text.insert(END,line+""\n"")
        scrollbar.config(command=Error_Text.yview)
        scrollbar.pack(side=RIGHT,fill=Y)
        #End Text Box

        Button_Frame = Frame(error_report)
        close_button = Button(Button_Frame,text="" Close "")
        close_button.bind(""<ButtonRelease-1>"", Close_Click)
        close_button.pack(side=RIGHT,fill=X)
        
        Error_Text.pack(side=LEFT,fill=BOTH,expand=1)
        Button_Frame.pack(side=BOTTOM)
        Error_Frame.pack(side=LEFT,fill=BOTH,expand=1)
        
        root.wait_window(error_report)
        return return_value.get()

    def Open_G_Code(self,filename):
        self.resetPath()
        
        g_rip = G_Code_Rip()
        try:
            MSG = g_rip.Read_G_Code(filename, XYarc2line = True, arc_angle=2, units=""in"", Accuracy="""")
            Error_Text = """"
            if MSG!=[]:
                self.gcode_error_message(MSG)

        #except StandardError as e:
        except Exception as e:
            msg1 = ""G-Code Load Failed:  ""
            msg2 = ""Filename: %s"" %(filename)
            msg3 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg3).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, ""%s\n%s"" %(msg2,msg3))
            debug_message(traceback.format_exc())

            
        ecoords= g_rip.generate_laser_paths(g_rip.g_code_data)
        self.GcodeData.set_ecoords(ecoords,data_sorted=True)
        self.Design_bounds = self.GcodeData.bounds

        
    def Open_DXF(self,filemname):
        self.resetPath()
        
        self.DXF_FILE = filemname
        dxf_import=DXF_CLASS()
        tolerance = .0005
        try:
            fd = open(self.DXF_FILE)
            dxf_import.GET_DXF_DATA(fd,lin_tol = tolerance,get_units=True,units=None)
            fd.seek(0)
            
            dxf_units = dxf_import.units
            if dxf_units==""Unitless"":
                d = UnitsDialog(root)
                dxf_units = d.result
            if dxf_units==""Inches"":
                dxf_scale = 1.0
            elif dxf_units==""Feet"":
                dxf_scale = 12.0
            elif dxf_units==""Miles"":
                dxf_scale = 5280.0*12.0
            elif dxf_units==""Millimeters"":
                dxf_scale = 1.0/25.4
            elif dxf_units==""Centimeters"":
                dxf_scale = 1.0/2.54
            elif dxf_units==""Meters"":
                dxf_scale = 1.0/254.0
            elif dxf_units==""Kilometers"":
                dxf_scale = 1.0/254000.0
            elif dxf_units==""Microinches"":
                dxf_scale = 1.0/1000000.0
            elif dxf_units==""Mils"":
                dxf_scale = 1.0/1000.0
            else:
                return    

            lin_tol = tolerance / dxf_scale
            dxf_import.GET_DXF_DATA(fd,lin_tol=lin_tol,get_units=False,units=None)
            fd.close()
        #except StandardError as e:
        except Exception as e:
            msg1 = ""DXF Load Failed:""
            msg2 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
        except:
            fmessage(""Unable To open Drawing Exchange File (DXF) file."")
            debug_message(traceback.format_exc())
            return
        
        new_origin=False
        dxf_engrave_coords = dxf_import.DXF_COORDS_GET_TYPE(engrave=True, new_origin=False)
        dxf_cut_coords     = dxf_import.DXF_COORDS_GET_TYPE(engrave=False,new_origin=False)
##        if DEBUG:
##            dxf_code = dxf_import.WriteDXF(close_loops=False)
##            fout = open('Z:\\out.dxf','w')
##            for line in dxf_code:
##                fout.write(line+'\n')
##            fout.close
        
        if dxf_import.dxf_messages != """":
            msg_split=dxf_import.dxf_messages.split(""\n"")
            msg_split.sort()
            msg_split.append("""")
            mcnt=1
            msg_out = """"
            for i in range(1,len(msg_split)):
                if msg_split[i-1]==msg_split[i]:
                    mcnt=mcnt+1
                else:
                    if msg_split[i-1]!="""":
                        msg_line = ""%s (%d places)\n"" %(msg_split[i-1],mcnt)
                        msg_out = msg_out + msg_line
                    mcnt=1
            message_box(""DXF Import:"",msg_out)
                    
        ##########################
        ###   Create ECOORDS   ###
        ##########################
        self.VcutData.make_ecoords(dxf_cut_coords    ,scale=dxf_scale)
        self.VengData.make_ecoords(dxf_engrave_coords,scale=dxf_scale)

        xmin = min(self.VcutData.bounds[0],self.VengData.bounds[0])
        xmax = max(self.VcutData.bounds[1],self.VengData.bounds[1])
        ymin = min(self.VcutData.bounds[2],self.VengData.bounds[2])
        ymax = max(self.VcutData.bounds[3],self.VengData.bounds[3])
        self.Design_bounds = (xmin,xmax,ymin,ymax)


    def Open_Settings_File(self,filename):
        try:
            fin = open(filename,'r')
        except:
            fmessage(""Unable to open file: %s"" %(filename))
            return
        
        text_codes=[]
        ident = ""k40_whisperer_set""
        for line in fin:
            try:
                if ident in line:
                    # BOOL
                    if ""include_Reng""  in line:
                        self.include_Reng.set(line[line.find(""include_Reng""):].split()[1])
                    elif ""include_Veng""  in line:
                        self.include_Veng.set(line[line.find(""include_Veng""):].split()[1])
                    elif ""include_Vcut""  in line:
                        self.include_Vcut.set(line[line.find(""include_Vcut""):].split()[1])
                    elif ""include_Gcde""  in line:
                        self.include_Gcde.set(line[line.find(""include_Gcde""):].split()[1])
                    elif ""include_Time""  in line:
                        self.include_Time.set(line[line.find(""include_Time""):].split()[1])
                    elif ""halftone""  in line:
                        self.halftone.set(line[line.find(""halftone""):].split()[1])
                    elif ""negate""  in line:
                        self.negate.set(line[line.find(""negate""):].split()[1])
                    elif ""HomeUR""  in line:
                        self.HomeUR.set(line[line.find(""HomeUR""):].split()[1])                    
                    elif ""inputCSYS""  in line:
                        self.inputCSYS.set(line[line.find(""inputCSYS""):].split()[1])
                    elif ""advanced""  in line:
                        self.advanced.set(line[line.find(""advanced""):].split()[1])
                    elif ""mirror""  in line:
                        self.mirror.set(line[line.find(""mirror""):].split()[1])
                    elif ""rotate""  in line:
                        self.rotate.set(line[line.find(""rotate""):].split()[1])
                    elif ""engraveUP""  in line:
                        self.engraveUP.set(line[line.find(""engraveUP""):].split()[1])
                    elif ""init_home""  in line:
                        self.init_home.set(line[line.find(""init_home""):].split()[1])
                    elif ""post_home""  in line:
                        self.post_home.set(line[line.find(""post_home""):].split()[1])
                    elif ""post_beep""  in line:
                        self.post_beep.set(line[line.find(""post_beep""):].split()[1])
                    elif ""post_disp""  in line:
                        self.post_disp.set(line[line.find(""post_disp""):].split()[1])
                    elif ""post_exec""  in line:
                        self.post_exec.set(line[line.find(""post_exec""):].split()[1])
                        
                    elif ""pre_pr_crc""  in line:
                        self.pre_pr_crc.set(line[line.find(""pre_pr_crc""):].split()[1])
                    elif ""inside_first""  in line:
                        self.inside_first.set(line[line.find(""inside_first""):].split()[1])
                    elif ""comb_engrave""  in line:
                        self.comb_engrave.set(line[line.find(""comb_engrave""):].split()[1])
                    elif ""comb_vector""  in line:
                        self.comb_vector.set(line[line.find(""comb_vector""):].split()[1])
                    elif ""zoom2image""  in line:
                        self.zoom2image.set(line[line.find(""zoom2image""):].split()[1])

                    elif ""rotary""  in line:
                         self.rotary.set(line[line.find(""rotary""):].split()[1])
                    elif ""reduced_mem""  in line:
                         self.reduced_mem.set(line[line.find(""reduced_mem""):].split()[1])
                    elif ""wait""  in line:
                         self.wait.set(line[line.find(""wait""):].split()[1])

                    elif ""trace_w_laser""  in line:
                         self.trace_w_laser.set(line[line.find(""trace_w_laser""):].split()[1])
            
                    # STRING.set()
                    elif ""board_name"" in line:
                        self.board_name.set(line[line.find(""board_name""):].split()[1])
                    elif ""units""    in line:
                        self.units.set(line[line.find(""units""):].split()[1])
                    elif ""Reng_feed""    in line:
                         self.Reng_feed .set(line[line.find(""Reng_feed""):].split()[1])
                    elif ""Veng_feed""    in line:
                         self.Veng_feed .set(line[line.find(""Veng_feed""):].split()[1])  
                    elif ""Vcut_feed""    in line:
                         self.Vcut_feed.set(line[line.find(""Vcut_feed""):].split()[1])
                    elif ""jog_step""    in line:
                         self.jog_step.set(line[line.find(""jog_step""):].split()[1])
                         
                    elif ""Reng_passes""    in line:
                         self.Reng_passes.set(line[line.find(""Reng_passes""):].split()[1])
                    elif ""Veng_passes""    in line:
                         self.Veng_passes.set(line[line.find(""Veng_passes""):].split()[1])
                    elif ""Vcut_passes""    in line:
                         self.Vcut_passes.set(line[line.find(""Vcut_passes""):].split()[1])
                    elif ""Gcde_passes""    in line:
                         self.Gcde_passes.set(line[line.find(""Gcde_passes""):].split()[1])

                    elif ""rast_step""    in line:
                         self.rast_step.set(line[line.find(""rast_step""):].split()[1])
                    elif ""ht_size""    in line:
                         self.ht_size.set(line[line.find(""ht_size""):].split()[1])

                    elif ""LaserXsize""    in line:
                         self.LaserXsize.set(line[line.find(""LaserXsize""):].split()[1])
                    elif ""LaserYsize""    in line:
                         self.LaserYsize.set(line[line.find(""LaserYsize""):].split()[1])

                    elif ""LaserXscale""    in line:
                         self.LaserXscale.set(line[line.find(""LaserXscale""):].split()[1])
                    elif ""LaserYscale""    in line:
                         self.LaserYscale.set(line[line.find(""LaserYscale""):].split()[1])
                    elif ""LaserRscale""    in line:
                         self.LaserRscale.set(line[line.find(""LaserRscale""):].split()[1])

                    elif ""rapid_feed""    in line:
                         self.rapid_feed.set(line[line.find(""rapid_feed""):].split()[1])
                         
                    elif ""gotoX""    in line:
                         self.gotoX.set(line[line.find(""gotoX""):].split()[1])
                    elif ""gotoY""    in line:
                         self.gotoY.set(line[line.find(""gotoY""):].split()[1])

                    elif ""bezier_M1""    in line:
                         self.bezier_M1.set(line[line.find(""bezier_M1""):].split()[1])
                    elif ""bezier_M2""    in line:
                         self.bezier_M2.set(line[line.find(""bezier_M2""):].split()[1])
                    elif ""bezier_weight""    in line:
                         self.bezier_weight.set(line[line.find(""bezier_weight""):].split()[1])
                    elif ""trace_gap""    in line:
                         self.trace_gap.set(line[line.find(""trace_gap""):].split()[1])
                    elif ""trace_speed""    in line:
                         self.trace_speed.set(line[line.find(""trace_speed""):].split()[1])

    ##                elif ""unsharp_flag""    in line:
    ##                     self.unsharp_flag.set(line[line.find(""unsharp_flag""):].split()[1])
    ##                elif ""unsharp_r""    in line:
    ##                     self.unsharp_r.set(line[line.find(""unsharp_r""):].split()[1])
    ##                elif ""unsharp_p""    in line:
    ##                     self.unsharp_p.set(line[line.find(""unsharp_p""):].split()[1])
    ##                elif ""unsharp_t""    in line:
    ##                     self.unsharp_t.set(line[line.find(""unsharp_t""):].split()[1])
            
                    elif ""t_timeout""    in line:
                         self.t_timeout.set(line[line.find(""t_timeout""):].split()[1])
                    elif ""n_timeouts""    in line:
                         self.n_timeouts.set(line[line.find(""n_timeouts""):].split()[1])

                    elif ""ink_timeout""    in line:
                         self.ink_timeout.set(line[line.find(""ink_timeout""):].split()[1])

                    elif ""designfile""    in line:
                           self.DESIGN_FILE=(line[line.find(""designfile""):].split(""\042"")[1])
                    elif ""inkscape_path""    in line:
                         self.inkscape_path.set(line[line.find(""inkscape_path""):].split(""\042"")[1])
                    elif ""batch_path""    in line:
                         self.batch_path.set(line[line.find(""batch_path""):].split(""\042"")[1])

                         
            except:
                #Ignoring exeptions during reading data from line 
                pass
                     
        fin.close()

        fileName, fileExtension = os.path.splitext(self.DESIGN_FILE)
        init_file=os.path.basename(fileName)
        
        if init_file != ""None"":
            if ( os.path.isfile(self.DESIGN_FILE) ):
                pass
            else:
                self.statusMessage.set(""Image file not found: %s "" %(self.DESIGN_FILE))

        if self.units.get() == 'in':
            self.funits.set('in/min')
            self.units_scale = 1.0
        else:
            self.units.set('mm')
            self.funits.set('mm/s')
            self.units_scale = 25.4

        temp_name, fileExtension = os.path.splitext(filename)
        file_base=os.path.basename(temp_name)
            
        if self.initComplete == 1:
            self.menu_Mode_Change()
            self.DESIGN_FILE = filename
            
    ##########################################################################
    ##########################################################################
    def menu_File_Save(self):
        settings_data = self.WriteConfig()
        init_dir = os.path.dirname(self.DESIGN_FILE)
        if ( not os.path.isdir(init_dir) ):
            init_dir = self.HOME_DIR
            
        fileName, fileExtension = os.path.splitext(self.DESIGN_FILE)
        init_file=os.path.basename(fileName)

        filename = asksaveasfilename(defaultextension='.txt', \
                                     filetypes=[(""Text File"",""*.txt"")],\
                                     initialdir=init_dir,\
                                     initialfile= init_file )

        if filename != '' and filename != ():
            try:
                fout = open(filename,'w')
            except:
                self.statusMessage.set(""Unable to open file for writing: %s"" %(filename))
                self.statusbar.configure( bg = 'red' )
                return

            for line in settings_data:
                try:
                    fout.write(line+'\n')
                except:
                    fout.write('(skipping line)\n')
                    debug_message(traceback.format_exc())
            fout.close
            self.statusMessage.set(""File Saved: %s"" %(filename))
            self.statusbar.configure( bg = 'white' )
        
    def Get_Design_Bounds(self):
        if self.rotate.get():
            ymin =  self.Design_bounds[0]
            ymax =  self.Design_bounds[1]
            xmin = -self.Design_bounds[3]
            xmax = -self.Design_bounds[2]
        else:
            xmin,xmax,ymin,ymax = self.Design_bounds
        return (xmin,xmax,ymin,ymax)
    
    def Move_UL(self,dummy=None):
        xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        if self.HomeUR.get():
            Xnew = self.laserX + (xmax-xmin)
            DX = round((xmax-xmin)*1000.0)
        else:
            Xnew = self.laserX
            DX = 0
            
        (Xsize,Ysize)=self.LASER_Size()
        if Xnew <= Xsize+.001:
            self.move_head_window_temporary([DX,0.0])
        else:
            pass

    def Move_UR(self,dummy=None):
        xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        if self.HomeUR.get():
            Xnew = self.laserX
            DX = 0
        else:
            Xnew = self.laserX + (xmax-xmin) 
            DX = round((xmax-xmin)*1000.0)

        (Xsize,Ysize)=self.LASER_Size()
        if Xnew <= Xsize+.001:
            self.move_head_window_temporary([DX,0.0])
        else:
            pass
    
    def Move_LR(self,dummy=None):
        xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        if self.HomeUR.get():
            Xnew = self.laserX
            DX = 0
        else:
            Xnew = self.laserX + (xmax-xmin) 
            DX = round((xmax-xmin)*1000.0)
            
        Ynew = self.laserY - (ymax-ymin)
        (Xsize,Ysize)=self.LASER_Size()
        if Xnew <= Xsize+.001 and Ynew >= -Ysize-.001:
            DY = round((ymax-ymin)*1000.0)
            self.move_head_window_temporary([DX,-DY])
        else:
            pass
    
    def Move_LL(self,dummy=None):
        xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        if self.HomeUR.get():
            Xnew = self.laserX + (xmax-xmin)
            DX = round((xmax-xmin)*1000.0)
        else:
            Xnew = self.laserX
            DX = 0
            
        Ynew = self.laserY - (ymax-ymin)
        (Xsize,Ysize)=self.LASER_Size()
        if Xnew <= Xsize+.001 and Ynew >= -Ysize-.001:
            DY = round((ymax-ymin)*1000.0)
            self.move_head_window_temporary([DX,-DY])
        else:
            pass

    def Move_CC(self,dummy=None):
        xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        if self.HomeUR.get():
            Xnew = self.laserX + (xmax-xmin)/2.0 
            DX = round((xmax-xmin)/2.0*1000.0)
        else:
            Xnew = self.laserX + (xmax-xmin)/2.0 
            DX = round((xmax-xmin)/2.0*1000.0)

            
        Ynew = self.laserY - (ymax-ymin)/2.0
        (Xsize,Ysize)=self.LASER_Size()
        if Xnew <= Xsize+.001 and Ynew >= -Ysize-.001: 
            DY = round((ymax-ymin)/2.0*1000.0)
            self.move_head_window_temporary([DX,-DY])
        else:
            pass

    def Move_Arbitrary(self,MoveX,MoveY,dummy=None):
        if self.GUI_Disabled:
            return
        if self.HomeUR.get():
            DX = -MoveX
        else:
            DX = MoveX
        DY = MoveY
        NewXpos = self.pos_offset[0]+DX
        NewYpos = self.pos_offset[1]+DY
        self.move_head_window_temporary([NewXpos,NewYpos])

    def Move_Arb_Step(self,dx,dy):
        if self.GUI_Disabled:
            return
        if self.units.get()==""in"":
            dx_inches = round(dx*1000)
            dy_inches = round(dy*1000)
        else:
            dx_inches = round(dx/25.4*1000)
            dy_inches = round(dy/25.4*1000)
        self.Move_Arbitrary( dx_inches,dy_inches )

    def Move_Arb_Right(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Move_Arb_Step( JOG_STEP,0 )

    def Move_Arb_Left(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Move_Arb_Step( -JOG_STEP,0 )

    def Move_Arb_Up(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Move_Arb_Step( 0,JOG_STEP )

    def Move_Arb_Down(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Move_Arb_Step( 0,-JOG_STEP )

    ####################################################

    def Move_Right(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Rapid_Move( JOG_STEP,0 )

    def Move_Left(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Rapid_Move( -JOG_STEP,0 )

    def Move_Up(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Rapid_Move( 0,JOG_STEP )

    def Move_Down(self,dummy=None):
        JOG_STEP = float( self.jog_step.get() )
        self.Rapid_Move( 0,-JOG_STEP )

    def Rapid_Move(self,dx,dy):
        if self.GUI_Disabled:
            return
        if self.units.get()==""in"":
            dx_inches = round(dx,3)
            dy_inches = round(dy,3)
        else:
            dx_inches = round(dx/25.4,3)
            dy_inches = round(dy/25.4,3)

        if (self.HomeUR.get()):
            dx_inches = -dx_inches

        Xnew,Ynew = self.XY_in_bounds(dx_inches,dy_inches)
        dxmils = (Xnew - self.laserX)*1000.0
        dymils = (Ynew - self.laserY)*1000.0

        if self.k40 == None:
            self.laserX  = Xnew
            self.laserY  = Ynew
            self.menu_View_Refresh()
        elif self.Send_Rapid_Move(dxmils,dymils):
            self.laserX  = Xnew
            self.laserY  = Ynew
            self.menu_View_Refresh()
        

    def Send_Rapid_Move(self,dxmils,dymils):
        try:
            if self.k40 != None:
                Xscale = float(self.LaserXscale.get())
                Yscale = float(self.LaserYscale.get())
                if self.rotary.get():
                    Rscale = float(self.LaserRscale.get())
                    Yscale = Yscale*Rscale
                    
                if Xscale != 1.0 or Yscale != 1.0:    
                    dxmils = int(round(dxmils *Xscale))
                    dymils = int(round(dymils *Yscale))
                self.k40.n_timeouts = 10
                
                if self.rotary.get() and float(self.rapid_feed.get()):
                    self.slow_jog(int(dxmils),int(dymils))
                else:
                    self.k40.rapid_move(int(dxmils),int(dymils))


                return True
            else:
                return True
        #except StandardError as e:
        except Exception as e:
            msg1 = ""Rapid Move Failed: ""
            msg2 = ""%s"" %(e)
            if msg2 == """":
                formatted_lines = traceback.format_exc().splitlines()
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            debug_message(traceback.format_exc())
            return False


    def slow_jog(self,dxmils,dymils):
        if int(dxmils)==0 and int(dymils)==0:
            return
        self.stop[0]=False
        Rapid_data=[]
        Rapid_inst = egv(target=lambda s:Rapid_data.append(s))
        Rapid_feed = float(self.rapid_feed.get())*self.feed_factor()
        Rapid_inst.make_egv_rapid(dxmils,dymils,Feed=Rapid_feed,board_name=self.board_name.get())
        self.send_egv_data(Rapid_data, 1, None)
        self.stop[0]=True

    def update_gui(self, message=None, bgcolor='white'):
        if message!=None:
            self.statusMessage.set(message)
            self.statusbar.configure( bg = bgcolor )
        self.master.update()
        return True

    def set_gui(self,new_state=""normal""):
        if new_state==""normal"":
            self.GUI_Disabled=False
        else:
            self.GUI_Disabled=True

        try:
            self.menuBar.entryconfigure(""File""    , state=new_state)
            self.menuBar.entryconfigure(""View""    , state=new_state)
            self.menuBar.entryconfigure(""Tools""     , state=new_state)
            self.menuBar.entryconfigure(""Settings"", state=new_state)
            self.menuBar.entryconfigure(""Help""    , state=new_state)
            self.PreviewCanvas.configure(state=new_state)
            
            for w in self.master.winfo_children():
                try:
                    w.configure(state=new_state)
                except:
                    pass
            self.Stop_Button.configure(state=""normal"")
            self.statusbar.configure(state=""normal"")
            self.master.update()
        except:
            if DEBUG:
                debug_message(traceback.format_exc())

    def Vector_Cut(self, output_filename=None):
        self.Prepare_for_laser_run(""Vector Cut: Processing Vector Data."")
        if self.VcutData.ecoords!=[]:
            self.send_data(""Vector_Cut"", output_filename)
        else:
            self.statusbar.configure( bg = 'yellow' )
            self.statusMessage.set(""No vector data to cut"")
        self.Finish_Job()
        
    def Vector_Eng(self, output_filename=None):
        self.Prepare_for_laser_run(""Vector Engrave: Processing Vector Data."")
        if self.VengData.ecoords!=[]:
            self.send_data(""Vector_Eng"", output_filename)
        else:
            self.statusbar.configure( bg = 'yellow' )
            self.statusMessage.set(""No vector data to engrave"")
        self.Finish_Job()

    def Trace_Eng(self, output_filename=None):
        self.Prepare_for_laser_run(""Boundary Trace: Processing Data."")
        self.trace_coords = self.make_trace_path()

        if self.trace_coords!=[]:
            self.send_data(""Trace_Eng"", output_filename)
        else:
            self.statusbar.configure( bg = 'yellow' )
            self.statusMessage.set(""No trace data to follow"")
        self.Finish_Job()

    def Raster_Eng(self, output_filename=None):
        self.Prepare_for_laser_run(""Raster Engraving: Processing Image Data."")
        try:
            self.make_raster_coords()
            if self.RengData.ecoords!=[]:
                self.send_data(""Raster_Eng"", output_filename)
            else:
                self.statusbar.configure( bg = 'yellow' )
                self.statusMessage.set(""No raster data to engrave"")

        except MemoryError as e:
            msg1 = ""Memory Error:""
            msg2 = ""Memory Error:  Out of Memory.""
            self.statusMessage.set(msg2)
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
            
        except Exception as e:
            msg1 = ""Making Raster Data Stopped: ""
            msg2 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
        self.Finish_Job()

    def Raster_Vector_Eng(self, output_filename=None):
        self.Prepare_for_laser_run(""Raster Engraving: Processing Image and Vector Data."")
        try:
            self.make_raster_coords()
            if self.RengData.ecoords!=[] or self.VengData.ecoords!=[]:
                self.send_data(""Raster_Eng+Vector_Eng"", output_filename)
            else:
                self.statusbar.configure( bg = 'yellow' )
                self.statusMessage.set(""No data to engrave"")
        except Exception as e:
            msg1 = ""Preparing Data Stopped: ""
            msg2 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
        self.Finish_Job()

    def Vector_Eng_Cut(self, output_filename=None):
        self.Prepare_for_laser_run(""Vector Cut: Processing Vector Data."")
        if self.VcutData.ecoords!=[] or self.VengData.ecoords!=[]:
            self.send_data(""Vector_Eng+Vector_Cut"", output_filename)
        else:
            self.statusbar.configure( bg = 'yellow' )
            self.statusMessage.set(""No vector data."")
        self.Finish_Job()
        
    def Raster_Vector_Cut(self, output_filename=None):
        self.Prepare_for_laser_run(""Raster Engraving: Processing Image and Vector Data."")
        try:
            self.make_raster_coords()
            if self.RengData.ecoords!=[] or self.VengData.ecoords!=[] or self.VcutData.ecoords!=[]:
                self.send_data(""Raster_Eng+Vector_Eng+Vector_Cut"", output_filename)
            else:
                self.statusbar.configure( bg = 'yellow' )
                self.statusMessage.set(""No data to engrave/cut"")
        except Exception as e:
            msg1 = ""Preparing Data Stopped: ""
            msg2 = ""%s"" %(e)
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
        self.Finish_Job()
        
    def Gcode_Cut(self, output_filename=None):
        self.Prepare_for_laser_run(""G Code Cutting."")
        if self.GcodeData.ecoords!=[]:
            self.send_data(""Gcode_Cut"", output_filename)
        else:
            self.statusbar.configure( bg = 'yellow' )
            self.statusMessage.set(""No g-code data to cut"")
        self.Finish_Job()

    def Prepare_for_laser_run(self,msg):
        self.stop[0]=False
        self.move_head_window_temporary([0,0])
        self.set_gui(""disabled"")
        self.statusbar.configure( bg = 'green' )
        self.statusMessage.set(msg)
        self.master.update()

    def Finish_Job(self, event=None):
        self.set_gui(""normal"")
        self.stop[0]=True
        if self.post_home.get():
            self.Unlock()

        if self.post_beep.get():
            self.master.bell()

        stderr = ''
        stdout = ''
        if self.post_exec.get():
            cmd = [self.batch_path.get()]
            from subprocess import Popen, PIPE
            startupinfo=None
            proc = Popen(cmd, shell=False, stdout=PIPE, stderr=PIPE, stdin=PIPE, startupinfo=startupinfo)
            stdout,stderr = proc.communicate()

        if self.post_disp.get() or stderr != '':
            msg1 = ''
            minutes = floor(self.run_time / 60)
            seconds = self.run_time - minutes*60
            msg2 = ""Job Ended.\nRun Time = %02d:%02d"" %(minutes,seconds)
            if stdout != '':
                msg2=msg2+'\n\nBatch File Output:\n'+stdout
            if stderr != '':
                msg2=msg2+'\n\nBatch File Errors:\n'+stderr
            self.run_time = 0
            message_box(msg1, msg2)


    def make_trace_path(self):
        my_hull = hull2D()
        if self.inputCSYS.get() and self.RengData.image == None:
            xmin,xmax,ymin,ymax = 0.0,0.0,0.0,0.0
        else:
            xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
            
        startx = xmin
        starty = ymax

        #######################################
        Vcut_coords = self.VcutData.ecoords
        Veng_coords = self.VengData.ecoords
        Gcode_coords= self.GcodeData.ecoords
        if self.mirror.get() or self.rotate.get():
            Vcut_coords = self.mirror_rotate_vector_coords(Vcut_coords)
            Veng_coords = self.mirror_rotate_vector_coords(Veng_coords)
            Gcode_coords= self.mirror_rotate_vector_coords(Gcode_coords)

        #######################################
        if self.RengData.ecoords==[]:
            if self.stop[0] == True:
                self.stop[0]=False
                self.make_raster_coords()
                self.stop[0]=True
            else:
                self.make_raster_coords()

        RengHullCoords = []
        Xscale = 1/float(self.LaserXscale.get())
        Yscale = 1/float(self.LaserYscale.get())
        if self.rotary.get():
            Rscale = 1/float(self.LaserRscale.get())
            Yscale = Yscale*Rscale
            
        for point in self.RengData.hull_coords:
            RengHullCoords.append([point[0]*Xscale+xmin, point[1]*Yscale, point[2]])
            
        all_coords = []
        all_coords.extend(Vcut_coords)
        all_coords.extend(Veng_coords)
        all_coords.extend(Gcode_coords)
        all_coords.extend(RengHullCoords)

        trace_coords=[]
        if all_coords != []:
            trace_coords = my_hull.convexHullecoords(all_coords)
            gap = float(self.trace_gap.get())/self.units_scale
            trace_coords = self.offset_eccords(trace_coords,gap)

        trace_coords,startx,starty = self.scale_vector_coords(trace_coords,startx,starty)
        return trace_coords

            
    ################################################################################
    def Sort_Paths(self,ecoords,i_loop=2):
        ##########################
        ###   find loop ends   ###
        ##########################
        Lbeg=[]
        Lend=[]
        if len(ecoords)>0:
            Lbeg.append(0)
            loop_old=ecoords[0][i_loop]
            for i in range(1,len(ecoords)):
                loop = ecoords[i][i_loop]
                if loop != loop_old:
                    Lbeg.append(i)
                    Lend.append(i-1)
                loop_old=loop
            Lend.append(i)

        #######################################################
        # Find new order based on distance to next beg or end #
        #######################################################
        order_out = []
        use_beg=0
        if len(ecoords)>0:
            order_out.append([Lbeg[0],Lend[0]])
        inext = 0
        total=len(Lbeg)
        for i in range(total-1):
            if use_beg==1:
                ii=Lbeg.pop(inext)
                Lend.pop(inext)
            else:
                ii=Lend.pop(inext)
                Lbeg.pop(inext)

            Xcur = ecoords[ii][0]
            Ycur = ecoords[ii][1]

            dx = Xcur - ecoords[ Lbeg[0] ][0]
            dy = Ycur - ecoords[ Lbeg[0] ][1]
            min_dist = dx*dx + dy*dy

            dxe = Xcur - ecoords[ Lend[0] ][0]
            dye = Ycur - ecoords[ Lend[0] ][1]
            min_diste = dxe*dxe + dye*dye

            inext=0
            inexte=0
            for j in range(1,len(Lbeg)):
                dx = Xcur - ecoords[ Lbeg[j] ][0]
                dy = Ycur - ecoords[ Lbeg[j] ][1]
                dist = dx*dx + dy*dy
                if dist < min_dist:
                    min_dist=dist
                    inext=j
                ###
                dxe = Xcur - ecoords[ Lend[j] ][0]
                dye = Ycur - ecoords[ Lend[j] ][1]
                diste = dxe*dxe + dye*dye
                if diste < min_diste:
                    min_diste=diste
                    inexte=j
                ###
            if min_diste < min_dist:
                inext=inexte
                order_out.append([Lend[inexte],Lbeg[inexte]])
                use_beg=1
            else:
                order_out.append([Lbeg[inext],Lend[inext]])
                use_beg=0
        ###########################################################
        return order_out
    
    #####################################################
    # determine if a point is inside a given polygon or not
    # Polygon is a list of (x,y) pairs.
    # http://www.ariel.com.au/a/python-point-int-poly.html
    #####################################################
    def point_inside_polygon(self,x,y,poly):
        n = len(poly)
        inside = -1
        p1x = poly[0][0]
        p1y = poly[0][1]
        for i in range(n+1):
            p2x = poly[i%n][0]
            p2y = poly[i%n][1]
            if y > min(p1y,p2y):
                if y <= max(p1y,p2y):
                    if x <= max(p1x,p2x):
                        if p1y != p2y:
                            xinters = (y-p1y)*(p2x-p1x)/(p2y-p1y)+p1x
                        if p1x == p2x or x <= xinters:
                            inside = inside * -1
            p1x,p1y = p2x,p2y

        return inside

    def optimize_paths(self,ecoords,inside_check=True):
        order_out = self.Sort_Paths(ecoords)    
        lastx=-999
        lasty=-999
        Acc=0.004
        cuts=[]

        for line in order_out:
            temp=line
            if temp[0] > temp[1]:
                step = -1
            else:
                step = 1

            loop_old = -1
            
            for i in range(temp[0],temp[1]+step,step):
                x1   = ecoords[i][0]
                y1   = ecoords[i][1]
                loop = ecoords[i][2]
                # check and see if we need to move to a new discontinuous start point
                if (loop != loop_old):
                    dx = x1-lastx
                    dy = y1-lasty
                    dist = sqrt(dx*dx + dy*dy)
                    if dist > Acc:
                        cuts.append([[x1,y1]])
                    else:
                        cuts[-1].append([x1,y1])
                else:
                    cuts[-1].append([x1,y1])
                lastx = x1
                lasty = y1
                loop_old = loop

        if inside_check:
            #####################################################
            # For each loop determine if other loops are inside #
            #####################################################
            Nloops=len(cuts)
            self.LoopTree=[]
            for iloop in range(Nloops):
                self.LoopTree.append([])
    ##            CUR_PCT=float(iloop)/Nloops*100.0
    ##            if (not self.batch.get()):
    ##                self.statusMessage.set('Determining Which Side of Loop to Cut: %d of %d' %(iloop+1,Nloops))
    ##                self.master.update()
                ipoly = cuts[iloop]
                ## Check points in other loops (could just check one) ##
                if ipoly != []:
                    for jloop in range(Nloops):
                        if jloop != iloop:
                            inside = 0
                            inside = inside + self.point_inside_polygon(cuts[jloop][0][0],cuts[jloop][0][1],ipoly)
                            if inside > 0:
                                self.LoopTree[iloop].append(jloop)
            #####################################################
            for i in range(Nloops):
                lns=[]
                lns.append(i)
                self.remove_self_references(lns,self.LoopTree[i])

            self.order=[]
            self.loops = list(range(Nloops))
            for i in range(Nloops):
                if self.LoopTree[i]!=[]:
                    self.addlist(self.LoopTree[i])
                    self.LoopTree[i]=[]
                if self.loops[i]!=[]:
                    self.order.append(self.loops[i])
                    self.loops[i]=[]
        #END inside_check
            ecoords_out = []
            for i in self.order:
                line = cuts[i]
                for coord in line:
                    ecoords_out.append([coord[0],coord[1],i])
        #END inside_check
        else:
            ecoords_out = []
            for i in range(len(cuts)):
                line = cuts[i]
                for coord in line:
                    ecoords_out.append([coord[0],coord[1],i])
                    
        return ecoords_out
            
    def remove_self_references(self,loop_numbers,loops):
        for i in range(0,len(loops)):
            for j in range(0,len(loop_numbers)):
                if loops[i]==loop_numbers[j]:
                    loops.pop(i)
                    return
            if self.LoopTree[loops[i]]!=[]:
                loop_numbers.append(loops[i])
                self.remove_self_references(loop_numbers,self.LoopTree[loops[i]])

    def addlist(self,list):
        for i in list:
            try: #this try/except is a bad hack fix to a recursion error. It should be fixed properly later.
                if self.LoopTree[i]!=[]:
                    self.addlist(self.LoopTree[i]) #too many recursions here causes cmp error
                    self.LoopTree[i]=[]
            except:
                pass
            if self.loops[i]!=[]:
                self.order.append(self.loops[i])
                self.loops[i]=[]


    def mirror_rotate_vector_coords(self,coords):
        xmin = self.Design_bounds[0]
        xmax = self.Design_bounds[1]
        coords_rotate_mirror=[]
        
        for i in range(len(coords)):
            coords_rotate_mirror.append(coords[i][:])
            if self.mirror.get():
                if self.inputCSYS.get() and self.RengData.image == None:
                    coords_rotate_mirror[i][0]=-coords_rotate_mirror[i][0]
                else:
                    coords_rotate_mirror[i][0]=xmin+xmax-coords_rotate_mirror[i][0]
                
                
            if self.rotate.get():
                x = coords_rotate_mirror[i][0]
                y = coords_rotate_mirror[i][1]
                coords_rotate_mirror[i][0] = -y
                coords_rotate_mirror[i][1] =  x
                
        return coords_rotate_mirror

    def scale_vector_coords(self,coords,startx,starty):
        
        Xscale = float(self.LaserXscale.get())
        Yscale = float(self.LaserYscale.get())
        if self.rotary.get():
            Rscale = float(self.LaserRscale.get())
            Yscale = Yscale*Rscale

        coords_scale=[]
        if Xscale != 1.0 or Yscale != 1.0:
            for i in range(len(coords)):
                coords_scale.append(coords[i][:])
                x = coords_scale[i][0]
                y = coords_scale[i][1]
                coords_scale[i][0] = x*Xscale
                coords_scale[i][1] = y*Yscale
            scaled_startx = startx*Xscale
            scaled_starty = starty*Yscale
        else:
            coords_scale = coords
            scaled_startx = startx
            scaled_starty = starty

        return coords_scale,scaled_startx,scaled_starty


    def feed_factor(self):
        if self.units.get()=='in':
            feed_factor = 25.4/60.0
        else:
            feed_factor = 1.0
        return feed_factor
  
    def send_data(self,operation_type=None, output_filename=None):
        num_passes=0
        if self.k40 == None and output_filename == None:
            self.statusMessage.set(""Laser Cutter is not Initialized..."")
            self.statusbar.configure( bg = 'red' ) 
            return
        try:
            feed_factor=self.feed_factor()
            
            if self.inputCSYS.get() and self.RengData.image == None:
                xmin,xmax,ymin,ymax = 0.0,0.0,0.0,0.0
            else:
                xmin,xmax,ymin,ymax = self.Get_Design_Bounds() 
                        
            startx = xmin
            starty = ymax

            if self.HomeUR.get():
                Xscale = float(self.LaserXscale.get())
                FlipXoffset = Xscale*xmin + Xscale*xmax
                if self.rotate.get():
                    startx = -xmin
            else:
                FlipXoffset = None

            if self.rotary.get():
                Rapid_Feed = float(self.rapid_feed.get())*feed_factor
            else:
                Rapid_Feed = 0.0
                
            Raster_Eng_data=[]
            Vector_Eng_data=[]
            Trace_Eng_data=[]
            Vector_Cut_data=[]
            G_code_Cut_data=[]
                        
            if (operation_type.find(""Vector_Cut"") > -1) and  (self.VcutData.ecoords!=[]):
                Feed_Rate = float(self.Vcut_feed.get())*feed_factor
                self.statusMessage.set(""Vector Cut: Determining Cut Order...."")
                self.master.update()
                if not self.VcutData.sorted and self.inside_first.get():
                    self.VcutData.set_ecoords(self.optimize_paths(self.VcutData.ecoords),data_sorted=True)


##                DEBUG_PLOT=False
##                test_ecoords=self.VcutData.ecoords
##                if DEBUG_PLOT:
##                    import matplotlib.pyplot as plt
##                    plt.ion()
##                    plt.clf()         
##                    X=[]
##                    Y=[]
##                    LOOP_OLD = test_ecoords[0][2]
##                    for i in range(len(test_ecoords)):
##                        LOOP = test_ecoords[i][2]
##                        if LOOP != LOOP_OLD:
##                            plt.plot(X,Y)
##                            plt.pause(.5)
##                            X=[]
##                            Y=[]
##                            LOOP_OLD=LOOP
##                        X.append(test_ecoords[i][0])
##                        Y.append(test_ecoords[i][1])
##                    plt.plot(X,Y)


                self.statusMessage.set(""Generating EGV data..."")
                self.master.update()

                Vcut_coords = self.VcutData.ecoords
                if self.mirror.get() or self.rotate.get():
                    Vcut_coords = self.mirror_rotate_vector_coords(Vcut_coords)

                Vcut_coords,startx,starty = self.scale_vector_coords(Vcut_coords,startx,starty)
                Vector_Cut_egv_inst = egv(target=lambda s:Vector_Cut_data.append(s))   
                Vector_Cut_egv_inst.make_egv_data(
                                                Vcut_coords,                      \
                                                startX=startx,                    \
                                                startY=starty,                    \
                                                Feed = Feed_Rate,                 \
                                                board_name=self.board_name.get(), \
                                                Raster_step = 0,                  \
                                                update_gui=self.update_gui,       \
                                                stop_calc=self.stop,              \
                                                FlipXoffset=FlipXoffset,          \
                                                Rapid_Feed_Rate = Rapid_Feed,     \
                                                use_laser=True
                                                )

            if (operation_type.find(""Vector_Eng"") > -1) and  (self.VengData.ecoords!=[]):
                Feed_Rate = float(self.Veng_feed.get())*feed_factor
                self.statusMessage.set(""Vector Engrave: Determining Cut Order...."")
                self.master.update()
                if not self.VengData.sorted and self.inside_first.get():
                    self.VengData.set_ecoords(self.optimize_paths(self.VengData.ecoords,inside_check=False),data_sorted=True)
                self.statusMessage.set(""Generating EGV data..."")
                self.master.update()

                Veng_coords = self.VengData.ecoords
                if self.mirror.get() or self.rotate.get():
                    Veng_coords = self.mirror_rotate_vector_coords(Veng_coords)

                Veng_coords,startx,starty = self.scale_vector_coords(Veng_coords,startx,starty)
                Vector_Eng_egv_inst = egv(target=lambda s:Vector_Eng_data.append(s))
                Vector_Eng_egv_inst.make_egv_data(
                                                Veng_coords,                      \
                                                startX=startx,                    \
                                                startY=starty,                    \
                                                Feed = Feed_Rate,                 \
                                                board_name=self.board_name.get(), \
                                                Raster_step = 0,                  \
                                                update_gui=self.update_gui,       \
                                                stop_calc=self.stop,              \
                                                FlipXoffset=FlipXoffset,          \
                                                Rapid_Feed_Rate = Rapid_Feed,     \
                                                use_laser=True
                                                )


            if (operation_type.find(""Trace_Eng"") > -1) and (self.trace_coords!=[]):
                Feed_Rate = float(self.trace_speed.get())*feed_factor
                laser_on = self.trace_w_laser.get()
                self.statusMessage.set(""Generating EGV data..."")
                self.master.update()
                Trace_Eng_egv_inst = egv(target=lambda s:Trace_Eng_data.append(s))
                Trace_Eng_egv_inst.make_egv_data(
                                                self.trace_coords,                \
                                                startX=startx,                    \
                                                startY=starty,                    \
                                                Feed = Feed_Rate,                 \
                                                board_name=self.board_name.get(), \
                                                Raster_step = 0,                  \
                                                update_gui=self.update_gui,       \
                                                stop_calc=self.stop,              \
                                                FlipXoffset=FlipXoffset,          \
                                                Rapid_Feed_Rate = Rapid_Feed,     \
                                                use_laser=laser_on
                                                )
                
                
            if (operation_type.find(""Raster_Eng"") > -1) and  (self.RengData.ecoords!=[]):
                Feed_Rate = float(self.Reng_feed.get())*feed_factor
                Raster_step = self.get_raster_step_1000in()
                if not self.engraveUP.get():
                    Raster_step = -Raster_step
                    
                raster_startx = 0

                Yscale = float(self.LaserYscale.get())
                if self.rotary.get():
                    Rscale = float(self.LaserRscale.get())
                    Yscale = Yscale*Rscale
                raster_starty = Yscale*starty

                self.statusMessage.set(""Generating EGV data..."")
                self.master.update()
                Raster_Eng_egv_inst = egv(target=lambda s:Raster_Eng_data.append(s))
                Raster_Eng_egv_inst.make_egv_data(
                                                self.RengData.ecoords,            \
                                                startX=raster_startx,             \
                                                startY=raster_starty,             \
                                                Feed = Feed_Rate,                 \
                                                board_name=self.board_name.get(), \
                                                Raster_step = Raster_step,        \
                                                update_gui=self.update_gui,       \
                                                stop_calc=self.stop,              \
                                                FlipXoffset=FlipXoffset,          \
                                                Rapid_Feed_Rate = Rapid_Feed,     \
                                                use_laser=True
                                                )
                #print(len(Raster_Eng_data))
                Raster_Eng_data=Raster_Eng_egv_inst.strip_redundant_codes(Raster_Eng_data)
                #print(len(Raster_Eng_data))

            if (operation_type.find(""Gcode_Cut"") > -1) and (self.GcodeData.ecoords!=[]):
                self.statusMessage.set(""Generating EGV data..."")
                self.master.update()
                Gcode_coords = self.GcodeData.ecoords
                if self.mirror.get() or self.rotate.get():
                    Gcode_coords = self.mirror_rotate_vector_coords(Gcode_coords)

                Gcode_coords,startx,starty = self.scale_vector_coords(Gcode_coords,startx,starty)
                G_code_Cut_egv_inst = egv(target=lambda s:G_code_Cut_data.append(s))
                G_code_Cut_egv_inst.make_egv_data(
                                                Gcode_coords,                     \
                                                startX=startx,                    \
                                                startY=starty,                    \
                                                Feed = None,                      \
                                                board_name=self.board_name.get(), \
                                                Raster_step = 0,                  \
                                                update_gui=self.update_gui,       \
                                                stop_calc=self.stop,              \
                                                FlipXoffset=FlipXoffset,          \
                                                Rapid_Feed_Rate = Rapid_Feed,     \
                                                use_laser=True
                                                )
                
            ### Join Resulting Data together ###
            data=[]
            data.append(ord(""I""))
            if Trace_Eng_data!=[]:
                trace_passes=1
                for k in range(trace_passes):
                    if len(data)> 4:
                        data[-4]=ord(""@"")
                    data.extend(Trace_Eng_data)
            if Raster_Eng_data!=[]:
                num_passes = int(float(self.Reng_passes.get()))
                for k in range(num_passes):
                    if len(data)> 4:
                        data[-4]=ord(""@"")
                    data.extend(Raster_Eng_data)
            if Vector_Eng_data!=[]:
                num_passes = int(float(self.Veng_passes.get()))
                for k in range(num_passes):
                    if len(data)> 4:
                        data[-4]=ord(""@"")
                    data.extend(Vector_Eng_data)
            if Vector_Cut_data!=[]:
                num_passes = int(float(self.Vcut_passes.get()))
                for k in range(num_passes):
                    if len(data)> 4:
                        data[-4]=ord(""@"")
                    data.extend(Vector_Cut_data)
            if G_code_Cut_data!=[]:
                num_passes = int(float(self.Gcde_passes.get()))
                for k in range(num_passes):
                    if len(data)> 4:
                        data[-4]=ord(""@"")
                    data.extend(G_code_Cut_data)
            if len(data)< 4:
                raise Exception(""No laser data was generated."")    
                
            self.master.update()
            if output_filename != None:
                self.write_egv_to_file(data,output_filename)
            else:
                self.send_egv_data(data, 1, output_filename)
                self.menu_View_Refresh()
                
        except MemoryError as e:
            msg1 = ""Memory Error:""
            msg2 = ""Memory Error:  Out of Memory.""
            self.statusMessage.set(msg2)
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())
        
        except Exception as e:
            msg1 = ""Sending Data Stopped: ""
            msg2 = ""%s"" %(e)
            if msg2 == """":
                formatted_lines = traceback.format_exc().splitlines()
            self.statusMessage.set((msg1+msg2).split(""\n"")[0] )
            self.statusbar.configure( bg = 'red' )
            message_box(msg1, msg2)
            debug_message(traceback.format_exc())

    def send_egv_data(self,data,num_passes=1,output_filename=None):        
        pre_process_CRC        = self.pre_pr_crc.get()
        if self.k40 != None:
            self.k40.timeout       = int(float( self.t_timeout.get()  )) 
            self.k40.n_timeouts    = int(float( self.n_timeouts.get() ))
            time_start = time()
            self.k40.send_data(data,self.update_gui,self.stop,num_passes,pre_process_CRC, wait_for_laser=self.wait.get())
            self.run_time = time()-time_start
            if DEBUG:
                print((""Elapsed Time: %.6f"" %(time()-time_start)))
            
        else:
            self.statusMessage.set(""Laser is not initialized."")
            self.statusbar.configure( bg = 'yellow' )
            return
        self.menu_View_Refresh()
        
    ##########################################################################
    ##########################################################################
    def write_egv_to_file(self,data,fname):
        if len(data) == 0:
            raise Exception(""No data available to write to file."")
        try:
            fout = open(fname,'w')
        except:
            raise Exception(""Unable to open file ( %s ) for writing."" %(fname))
        fout.write(""Document type : LHYMICRO-GL file\n"")
        fout.write(""Creator-Software: K40 Whisperer\n"")
        
        fout.write(""\n"")
        fout.write(""%0%0%0%0%"")
        for char_val in data:
            char = chr(char_val)
            fout.write(""%s"" %(char))
            
        #fout.write(""\n"")
        fout.close
        self.menu_View_Refresh()
        self.statusMessage.set(""Data saved to: %s"" %(fname))
        
    def Home(self, event=None):
        if self.GUI_Disabled:
            return
        if self.k40 != None:
            self.k40.home_position()
        self.laserX  = 0.0
        self.laserY  = 0.0
        self.pos_offset = [0.0,0.0]
        self.menu_View_Refresh()

    def GoTo(self):
        xpos = float(self.gotoX.get())
        ypos = float(self.gotoY.get())
        if self.k40 != None:
            self.k40.home_position()
        self.laserX  = 0.0
        self.laserY  = 0.0
        self.Rapid_Move(xpos,ypos)
        self.menu_View_Refresh()  
        
    def Reset(self):
        if self.k40 != None:
            try:
                self.k40.reset_usb()
                self.statusMessage.set(""USB Reset Succeeded"")
            except:
                debug_message(traceback.format_exc())
                pass
            
    def Stop(self,event=None):
        if self.stop[0]==True:
            return
        line1 = ""Sending data to the laser from K40 Whisperer is currently Paused.""
        line2 = ""Press \""OK\"" to abort any jobs currently running.""
        line3 = ""Press \""Cancel\"" to resume.""
        if self.k40 != None:
            try:
                self.k40.pause_un_pause()
            except:
                if message_ask_ok_cancel(""Stop Laser Job."", ""\n%s\n%s"" %(line2,line3)):
                    self.stop[0]=True
                
        if message_ask_ok_cancel(""Stop Laser Job."", ""%s\n\n%s\n%s"" %(line1,line2,line3)):
            self.stop[0]=True
        else:
            if self.k40 != None:
                self.k40.pause_un_pause()

    def Hide_Advanced(self,event=None):
        self.advanced.set(0)
        self.menu_View_Refresh()

    def Release_USB(self):
        if self.k40 != None:
            try:
                self.k40.release_usb()
                self.statusMessage.set(""USB Release Succeeded"")
            except:
                debug_message(traceback.format_exc())
                pass
            self.k40=None
        
    def Initialize_Laser(self,event=None):
        if self.GUI_Disabled:
            return
        #lovejoy
        #self.stop[0]=True
        self.stop[0]=False
        self.Release_USB()
        self.k40=None
        self.move_head_window_temporary([0.0,0.0])      
        self.k40=K40_CLASS()
        try:
            self.k40.initialize_device()
            self.k40.say_hello()
            if self.init_home.get():
                self.Home()
            else:
                self.Unlock()

        except Exception as e:
            error_text = ""%s"" %(e)
            if ""BACKEND"" in error_text.upper():
                error_text = error_text + "" (libUSB driver not installed)""
            self.statusMessage.set(""USB Error: %s"" %(error_text))
            self.statusbar.configure( bg = 'red' )
            self.k40=None
            debug_message(traceback.format_exc())

        except:
            self.statusMessage.set(""Unknown USB Error"")
            self.statusbar.configure( bg = 'red' )
            self.k40=None
            debug_message(traceback.format_exc())

    def Unfreeze_Laser(self,event=None):
        if self.GUI_Disabled:
            return
        if self.k40 != None:
            try:
                self.k40.unfreeze()
                self.statusMessage.set(""Unfreeze Complete"")
                self.statusbar.configure( bg = 'white' )
            except:
                pass
            
    def Unlock(self,event=None):
        if self.GUI_Disabled:
            return
        if self.k40 != None:
            try:
                self.k40.unlock_rail()
                self.statusMessage.set(""Rail Unlock Succeeded"")
                self.statusbar.configure( bg = 'white' )
            except:
                self.statusMessage.set(""Rail Unlock Failed."")
                self.statusbar.configure( bg = 'red' )
                debug_message(traceback.format_exc())
                pass
    
    ##########################################################################
    ##########################################################################
            
    def menu_File_Quit(self):
        if message_ask_ok_cancel(""Exit"", ""Exiting....""):
            self.Quit_Click(None)

    def Reset_RasterPath_and_Update_Time(self, varName=0, index=0, mode=0):
        self.RengData.reset_path()
        self.refreshTime()

    def View_Refresh_and_Reset_RasterPath(self, varName=0, index=0, mode=0):
        self.RengData.reset_path()
        self.SCALE = 0
        self.menu_View_Refresh()

    def menu_View_inputCSYS_Refresh_Callback(self, varName, index, mode):
        self.move_head_window_temporary([0.0,0.0])
        self.SCALE = 0
        self.menu_View_Refresh()

    def menu_View_Refresh_Callback(self, varName=0, index=0, mode=0):
        self.SCALE = 0
        self.menu_View_Refresh()

        if DEBUG:
            curframe = inspect.currentframe()
            calframe = inspect.getouterframes(curframe, 2)
            print('menu_View_Refresh_Callback called by: %s' %(calframe[1][3]))

    def menu_View_Refresh(self):
        if DEBUG:
            curframe = inspect.currentframe()
            calframe = inspect.getouterframes(curframe, 2)
            print('menu_View_Refresh called by: %s' %(calframe[1][3]))

        try:
            app.master.title(title_text+""   ""+ self.DESIGN_FILE)
        except:
            pass
        dummy_event = Event()
        dummy_event.widget=self.master
        self.Master_Configure(dummy_event,1)
        self.Plot_Data()
        xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
        W = xmax-xmin
        H = ymax-ymin

        if self.units.get()==""in"":
            X_display = self.laserX + self.pos_offset[0]/1000.0
            Y_display = self.laserY + self.pos_offset[1]/1000.0
            W_display = W
            H_display = H
            U_display = self.units.get()
        else:
            X_display = (self.laserX + self.pos_offset[0]/1000.0)*self.units_scale
            Y_display = (self.laserY + self.pos_offset[1]/1000.0)*self.units_scale
            W_display = W*self.units_scale
            H_display = H*self.units_scale
            U_display = self.units.get()
        if self.HomeUR.get():
            X_display = -X_display

        self.statusMessage.set("" Current Position: X=%.3f Y=%.3f    ( W X H )=( %.3f%s X %.3f%s ) ""
                                %(X_display,
                                  Y_display,
                                  W_display,
                                  U_display,
                                  H_display,
                                  U_display))

        self.statusbar.configure( bg = 'white' )
        
    def menu_Inside_First_Callback(self, varName, index, mode):
        if self.GcodeData.ecoords != []:
            if self.VcutData.sorted == True:
                self.menu_Reload_Design()
            elif self.VengData.sorted == True:
                self.menu_Reload_Design()

    def menu_Mode_Change(self):
        dummy_event = Event()
        dummy_event.widget=self.master
        self.Master_Configure(dummy_event,1)

    def menu_Calc_Raster_Time(self,event=None):
        self.set_gui(""disabled"")
        self.stop[0]=False
        self.make_raster_coords()
        self.stop[0]=True
        self.refreshTime()
        self.set_gui(""normal"")
        self.menu_View_Refresh()
        

    def menu_Help_About(self):
        application=""K40 Whisperer""
        about = ""%s Version %s\n\n"" %(application,version)
        about = about + ""By Scorch.\n""
        about = about + ""\163\143\157\162\143\150\100\163\143\157\162""
        about = about + ""\143\150\167\157\162\153\163\056\143\157\155\n""
        about = about + ""https://www.scorchworks.com/\n\n""
        try:
            python_version = ""%d.%d.%d"" %(sys.version_info.major,sys.version_info.minor,sys.version_info.micro)
        except:
            python_version = """"
        about = about + ""Python ""+python_version+"" (%d bit)"" %(struct.calcsize(""P"") * 8)
        message_box(""About %s"" %(application),about)

    def menu_Help_Web(self):
        webbrowser.open_new(r""https://www.scorchworks.com/K40whisperer/k40whisperer.html"")

    def menu_Help_Manual(self):
        webbrowser.open_new(r""https://www.scorchworks.com/K40whisperer/k40w_manual.html"")

    def KEY_F1(self, event):
        if self.GUI_Disabled:
            return
        self.menu_Help_About()

    def KEY_F2(self, event):
        if self.GUI_Disabled:
            return
        self.GEN_Settings_Window()

    def KEY_F3(self, event):
        if self.GUI_Disabled:
            return
        self.RASTER_Settings_Window()

    def KEY_F4(self, event):
        if self.GUI_Disabled:
            return
        self.ROTARY_Settings_Window()
        self.menu_View_Refresh()

    def KEY_F5(self, event):
        if self.GUI_Disabled:
            return
        self.menu_View_Refresh()

    def KEY_F6(self, event):
        if self.GUI_Disabled:
            return
        self.advanced.set(not self.advanced.get())
        self.menu_View_Refresh()

    def bindConfigure(self, event):
        if not self.initComplete:
            self.initComplete = 1
            self.menu_Mode_Change()

    def Master_Configure(self, event, update=0):
        if event.widget != self.master:
            return
        x = int(self.master.winfo_x())
        y = int(self.master.winfo_y())
        w = int(self.master.winfo_width())
        h = int(self.master.winfo_height())
        if (self.x, self.y) == (-1,-1):
            self.x, self.y = x,y
        if abs(self.w-w)>10 or abs(self.h-h)>10 or update==1:
            ###################################################
            #  Form changed Size (resized) adjust as required #
            ###################################################
            self.w=w
            self.h=h

            if True:                
                # Left Column #
                w_label=90
                w_entry=48
                w_units=52

                x_label_L=10
                x_entry_L=x_label_L+w_label+20-5
                x_units_L=x_entry_L+w_entry+2

                Yloc=10
                self.Initialize_Button.place (x=12, y=Yloc, width=100*2, height=23)
                Yloc=Yloc+33

                self.Open_Button.place (x=12, y=Yloc, width=100, height=40)
                self.Reload_Button.place(x=12+100, y=Yloc, width=100, height=40)                
                if h>=560:
                    Yloc=Yloc+50
                    self.separator1.place(x=x_label_L, y=Yloc,width=w_label+75+40, height=2)
                    Yloc=Yloc+6
                    self.Label_Position_Control.place(x=x_label_L, y=Yloc, width=w_label*2, height=21)

                    Yloc=Yloc+25
                    self.Home_Button.place (x=12, y=Yloc, width=100, height=23)
                    self.UnLock_Button.place(x=12+100, y=Yloc, width=100, height=23)

                    Yloc=Yloc+33
                    self.Label_Step.place(x=x_label_L, y=Yloc, width=w_label, height=21)
                    self.Label_Step_u.place(x=x_units_L, y=Yloc, width=w_units, height=21)
                    self.Entry_Step.place(x=x_entry_L, y=Yloc, width=w_entry, height=23)

                    ###########################################################################
                    Yloc=Yloc+30
                    bsz=40
                    xoffst=35
                    self.UL_Button.place    (x=xoffst+12      ,  y=Yloc, width=bsz, height=bsz)
                    self.Up_Button.place    (x=xoffst+12+bsz  ,  y=Yloc, width=bsz, height=bsz)
                    self.UR_Button.place    (x=xoffst+12+bsz*2,  y=Yloc, width=bsz, height=bsz)
                    Yloc=Yloc+bsz
                    self.Left_Button.place  (x=xoffst+12      ,y=Yloc, width=bsz, height=bsz)
                    self.CC_Button.place    (x=xoffst+12+bsz  ,y=Yloc, width=bsz, height=bsz)
                    self.Right_Button.place (x=xoffst+12+bsz*2,y=Yloc, width=bsz, height=bsz)
                    Yloc=Yloc+bsz
                    self.LL_Button.place    (x=xoffst+12      ,  y=Yloc, width=bsz, height=bsz)
                    self.Down_Button.place  (x=xoffst+12+bsz  ,  y=Yloc, width=bsz, height=bsz)
                    self.LR_Button.place    (x=xoffst+12+bsz*2,  y=Yloc, width=bsz, height=bsz)
            
                
                    Yloc=Yloc+bsz
                    ###########################################################################
                    self.Label_GoToX.place(x=x_entry_L, y=Yloc, width=w_entry, height=23)
                    self.Label_GoToY.place(x=x_units_L, y=Yloc, width=w_entry, height=23)
                    Yloc=Yloc+25
                    self.GoTo_Button.place (x=12, y=Yloc, width=100, height=23)
                    self.Entry_GoToX.place(x=x_entry_L, y=Yloc, width=w_entry, height=23)
                    self.Entry_GoToY.place(x=x_units_L, y=Yloc, width=w_entry, height=23)
                    ###########################################################################
                else:
                    ###########################################################################
                    self.separator1.place_forget()
                    self.Label_Position_Control.place_forget()
                    ##    
                    Yloc=Yloc+50
                    self.separator1.place(x=x_label_L, y=Yloc,width=w_label+75+40, height=2)
                    Yloc=Yloc+6
                    self.Home_Button.place (x=12, y=Yloc, width=100, height=23)
                    self.UnLock_Button.place(x=12+100, y=Yloc, width=100, height=23)
                    ##
                    self.Label_Step.place_forget()
                    self.Label_Step_u.place_forget()
                    self.Entry_Step.place_forget()
                    self.UL_Button.place_forget()
                    self.Up_Button.place_forget()
                    self.UR_Button.place_forget()
                    self.Left_Button.place_forget()
                    self.CC_Button.place_forget()
                    self.Right_Button.place_forget()
                    self.LL_Button.place_forget()
                    self.Down_Button.place_forget()
                    self.LR_Button.place_forget()
                    self.Label_GoToX.place_forget()
                    self.Label_GoToY.place_forget()
                    self.GoTo_Button.place_forget()
                    self.Entry_GoToX.place_forget()
                    self.Entry_GoToY.place_forget()
                    ###########################################################################

                #From Bottom up
                BUinit = self.h-70
                Yloc = BUinit
                self.Stop_Button.place (x=12, y=Yloc, width=100*2, height=30)
                
                self.Stop_Button.configure(bg='light coral')
                Yloc=Yloc-10+10

                wadv       = 220 #200
                wadv_use   = wadv-20
                Xvert_sep  = 220
                Xadvanced  = Xvert_sep+10
                w_label_adv= wadv-80 #  110 w_entry

                if self.GcodeData.ecoords == []:
                    self.Grun_Button.place_forget()
                    self.Reng_Veng_Vcut_Button.place_forget()
                    self.Reng_Veng_Button.place_forget()
                    self.Veng_Vcut_Button.place_forget()

                    Yloc=Yloc-30
                    self.Vcut_Button.place      (x=12, y=Yloc, width=100, height=23)
                    self.Entry_Vcut_feed.place  (x=x_entry_L, y=Yloc, width=w_entry, height=23)
                    self.Label_Vcut_feed_u.place(x=x_units_L, y=Yloc, width=w_units, height=23)
                    Y_Vcut=Yloc

                    Yloc=Yloc-30
                    self.Veng_Button.place  (x=12, y=Yloc, width=100, height=23)
                    self.Entry_Veng_feed.place(  x=x_entry_L, y=Yloc, width=w_entry, height=23)
                    self.Label_Veng_feed_u.place(x=x_units_L, y=Yloc, width=w_units, height=23)
                    Y_Veng=Yloc
                    
                    Yloc=Yloc-30
                    self.Reng_Button.place  (x=12, y=Yloc, width=100, height=23)
                    self.Entry_Reng_feed.place(  x=x_entry_L, y=Yloc, width=w_entry, height=23)
                    self.Label_Reng_feed_u.place(x=x_units_L, y=Yloc, width=w_units, height=23)
                    Y_Reng=Yloc
                    
                    if self.comb_vector.get() or self.comb_engrave.get():
                        if self.comb_engrave.get():
                            self.Veng_Button.place_forget()                    
                            self.Reng_Button.place_forget()
                        if self.comb_vector.get():
                            self.Vcut_Button.place_forget()
                            self.Veng_Button.place_forget() 
                            
                        if self.comb_engrave.get():
                            if self.comb_vector.get():
                                self.Reng_Veng_Vcut_Button.place(x=12, y=Y_Reng, width=100, height=23*3+14)
                            else:
                                self.Reng_Veng_Button.place(x=12, y=Y_Reng, width=100, height=23*2+7)
                        elif self.comb_vector.get():
                            self.Veng_Vcut_Button.place(x=12, y=Y_Veng, width=100, height=23*2+7)
                   
                    
                else:
                    self.Vcut_Button.place_forget()
                    self.Entry_Vcut_feed.place_forget()
                    self.Label_Vcut_feed_u.place_forget()
                    
                    self.Veng_Button.place_forget()
                    self.Entry_Veng_feed.place_forget()
                    self.Label_Veng_feed_u.place_forget()
                    
                    self.Reng_Button.place_forget()
                    self.Entry_Reng_feed.place_forget()
                    self.Label_Reng_feed_u.place_forget()

                    self.Reng_Veng_Vcut_Button.place_forget()
                    self.Reng_Veng_Button.place_forget()
                    self.Veng_Vcut_Button.place_forget()
                    
                    Yloc=Yloc-30
                    self.Grun_Button.place  (x=12, y=Yloc, width=100*2, height=23)
                    
                if h>=560:
                    Yloc=Yloc-15
                    self.separator2.place(x=x_label_L, y=Yloc,width=w_label+75+40, height=2)
                else:
                    self.separator2.place_forget()
                    
                # End Left Column #

                if self.advanced.get():
                   
                    self.PreviewCanvas.configure( width = self.w-240-wadv, height = self.h-50 )
                    self.PreviewCanvas_frame.place(x=220+wadv, y=10)
                    self.separator_vert.place(x=220, y=10,width=2, height=self.h-50)

                    adv_Yloc=25-10 #15
                    self.Label_Advanced_column.place(x=Xadvanced, y=adv_Yloc, width=wadv_use, height=21)
                    adv_Yloc=adv_Yloc+25
                    self.separator_adv.place(x=Xadvanced, y=adv_Yloc,width=wadv_use, height=2)

                    if h>=560:
                        adv_Yloc=adv_Yloc+25-20 #15
                        self.Label_Halftone_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Halftone_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)
                    
                        adv_Yloc=adv_Yloc+25
                        self.Label_Negate_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Negate_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)

                        adv_Yloc=adv_Yloc+25
                        self.separator_adv2.place(x=Xadvanced, y=adv_Yloc,width=wadv_use, height=2)
                    
                        adv_Yloc=adv_Yloc+25-20
                        self.Label_Mirror_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Mirror_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)

                        adv_Yloc=adv_Yloc+25
                        self.Label_Rotate_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Rotate_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)

                        adv_Yloc=adv_Yloc+25
                        self.Label_inputCSYS_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_inputCSYS_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)
                    
                        adv_Yloc=adv_Yloc+25
                        self.separator_adv3.place(x=Xadvanced, y=adv_Yloc,width=wadv_use, height=2)

                        adv_Yloc=adv_Yloc+25-20
                        self.Label_Inside_First_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Inside_First_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)
                    
                        adv_Yloc=adv_Yloc+25
                        self.Label_Rotary_Enable_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Rotary_Enable_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)
                    else:
                        #self.Label_Advanced_column.place_forget()
                        #self.separator_adv.place_forget()
                        self.Label_Halftone_adv.place_forget()
                        self.Checkbutton_Halftone_adv.place_forget()
                        self.Label_Negate_adv.place_forget()
                        self.Checkbutton_Negate_adv.place_forget()
                        self.separator_adv2.place_forget()
                        self.Label_Mirror_adv.place_forget()
                        self.Checkbutton_Mirror_adv.place_forget()
                        self.Label_Rotate_adv.place_forget()
                        self.Checkbutton_Rotate_adv.place_forget()
                        self.Label_inputCSYS_adv.place_forget()
                        self.Checkbutton_inputCSYS_adv.place_forget()
                        self.separator_adv3.place_forget()
                        self.Label_Inside_First_adv.place_forget()
                        self.Checkbutton_Inside_First_adv.place_forget()
                        self.Label_Rotary_Enable_adv.place_forget()
                        self.Checkbutton_Rotary_Enable_adv.place_forget()

                    adv_Yloc = BUinit
                    self.Hide_Adv_Button.place (x=Xadvanced, y=adv_Yloc, width=wadv_use, height=30)

                    if self.RengData.image != None:
                        self.Label_inputCSYS_adv.configure(state=""disabled"")
                        self.Checkbutton_inputCSYS_adv.place_forget()              
                    else:
                        self.Label_inputCSYS_adv.configure(state=""normal"")
                        
                    if self.GcodeData.ecoords == []:
                        #adv_Yloc = adv_Yloc-40
                        self.Label_Vcut_passes.place(x=Xadvanced, y=Y_Vcut, width=w_label_adv, height=21)
                        self.Entry_Vcut_passes.place(x=Xadvanced+w_label_adv+2, y=Y_Vcut, width=w_entry, height=23)

                        #adv_Yloc=adv_Yloc-30
                        self.Label_Veng_passes.place(x=Xadvanced, y=Y_Veng, width=w_label_adv, height=21)
                        self.Entry_Veng_passes.place(x=Xadvanced+w_label_adv+2, y=Y_Veng, width=w_entry, height=23)

                        #adv_Yloc=adv_Yloc-30
                        self.Label_Reng_passes.place(x=Xadvanced, y=Y_Reng, width=w_label_adv, height=21)
                        self.Entry_Reng_passes.place(x=Xadvanced+w_label_adv+2, y=Y_Reng, width=w_entry, height=23)
                        self.Label_Gcde_passes.place_forget()
                        self.Entry_Gcde_passes.place_forget()
                        adv_Yloc = Y_Reng

                       ####
                        adv_Yloc=adv_Yloc-15
                        self.separator_comb.place(x=Xadvanced-1, y=adv_Yloc, width=wadv_use, height=2)

                        adv_Yloc=adv_Yloc-25
                        self.Label_Comb_Vector_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Comb_Vector_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)
                        
                        adv_Yloc=adv_Yloc-25
                        self.Label_Comb_Engrave_adv.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Checkbutton_Comb_Engrave_adv.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=25, height=23)
                        ####
                        
                    else:
                        adv_Yloc=adv_Yloc-40
                        self.Label_Gcde_passes.place(x=Xadvanced, y=adv_Yloc, width=w_label_adv, height=21)
                        self.Entry_Gcde_passes.place(x=Xadvanced+w_label_adv+2, y=adv_Yloc, width=w_entry, height=23)
                        self.Label_Vcut_passes.place_forget()
                        self.Entry_Vcut_passes.place_forget()
                        self.Label_Veng_passes.place_forget()
                        self.Entry_Veng_passes.place_forget()
                        self.Label_Reng_passes.place_forget()
                        self.Entry_Reng_passes.place_forget()

                else:
                    self.PreviewCanvas_frame.place_forget()
                    self.separator_vert.place_forget()
                    self.Label_Advanced_column.place_forget()
                    self.separator_adv.place_forget() 
                    self.Label_Halftone_adv.place_forget()
                    self.Checkbutton_Halftone_adv.place_forget()
                    self.Label_Negate_adv.place_forget()
                    self.Checkbutton_Negate_adv.place_forget()
                    self.separator_adv2.place_forget()
                    self.Label_Mirror_adv.place_forget()
                    self.Checkbutton_Mirror_adv.place_forget()
                    self.Label_Rotate_adv.place_forget()
                    self.Checkbutton_Rotate_adv.place_forget()
                    self.Label_inputCSYS_adv.place_forget()
                    self.Checkbutton_inputCSYS_adv.place_forget()
                    self.separator_adv3.place_forget()
                    self.Label_Inside_First_adv.place_forget()
                    self.Checkbutton_Inside_First_adv.place_forget()

                    self.Label_Rotary_Enable_adv.place_forget()
                    self.Checkbutton_Rotary_Enable_adv.place_forget()

                    self.separator_comb.place_forget()
                    self.Label_Comb_Engrave_adv.place_forget()
                    self.Checkbutton_Comb_Engrave_adv.place_forget()
                    self.Label_Comb_Vector_adv.place_forget()
                    self.Checkbutton_Comb_Vector_adv.place_forget()


                    self.Entry_Vcut_passes.place_forget()
                    self.Label_Vcut_passes.place_forget()
                    self.Entry_Veng_passes.place_forget()
                    self.Label_Veng_passes.place_forget()
                    self.Entry_Reng_passes.place_forget()
                    self.Label_Reng_passes.place_forget()
                    self.Label_Gcde_passes.place_forget()
                    self.Entry_Gcde_passes.place_forget()
                    self.Hide_Adv_Button.place_forget()
                    
                    self.PreviewCanvas.configure( width = self.w-240, height = self.h-50 )
                    self.PreviewCanvas_frame.place(x=Xvert_sep, y=10)
                    self.separator_vert.place_forget()

                self.Set_Input_States()
                
            self.Plot_Data()
            
    def Recalculate_RQD_Click(self, event):
        self.menu_View_Refresh()

    def Set_Input_States(self):
        pass
            
    def Set_Input_States_Event(self,event):
        self.Set_Input_States()

    def Set_Input_States_RASTER(self,event=None):
        if self.halftone.get():
            self.Label_Halftone_DPI.configure(state=""normal"")
            self.Halftone_DPI_OptionMenu.configure(state=""normal"")
            self.Label_Halftone_u.configure(state=""normal"")
            self.Label_bezier_M1.configure(state=""normal"")
            self.bezier_M1_Slider.configure(state=""normal"")
            self.Label_bezier_M2.configure(state=""normal"")
            self.bezier_M2_Slider.configure(state=""normal"")
            self.Label_bezier_weight.configure(state=""normal"")
            self.bezier_weight_Slider.configure(state=""normal"")
        else:
            self.Label_Halftone_DPI.configure(state=""disabled"")
            self.Halftone_DPI_OptionMenu.configure(state=""disabled"")
            self.Label_Halftone_u.configure(state=""disabled"")
            self.Label_bezier_M1.configure(state=""disabled"")
            self.bezier_M1_Slider.configure(state=""disabled"")
            self.Label_bezier_M2.configure(state=""disabled"")
            self.bezier_M2_Slider.configure(state=""disabled"")
            self.Label_bezier_weight.configure(state=""disabled"")
            self.bezier_weight_Slider.configure(state=""disabled"")

    def Set_Input_States_BATCH(self):
        if self.post_exec.get():
            self.Entry_Batch_Path.configure(state=""normal"")
        else:
            self.Entry_Batch_Path.configure(state=""disabled"")
##    def Set_Input_States_Unsharp(self,event=None):        
##        if self.unsharp_flag.get():
##            self.Label_Unsharp_Radius.configure(state=""normal"")
##            self.Label_Unsharp_Radius_u.configure(state=""normal"")
##            self.Entry_Unsharp_Radius.configure(state=""normal"")
##            self.Label_Unsharp_Percent.configure(state=""normal"")
##            self.Label_Unsharp_Percent_u.configure(state=""normal"")
##            self.Entry_Unsharp_Percent.configure(state=""normal"")
##            self.Label_Unsharp_Threshold.configure(state=""normal"")
##            self.Entry_Unsharp_Threshold.configure(state=""normal"")
##
##        else:
##            self.Label_Unsharp_Radius.configure(state=""disabled"")
##            self.Label_Unsharp_Radius_u.configure(state=""disabled"")
##            self.Entry_Unsharp_Radius.configure(state=""disabled"")
##            self.Label_Unsharp_Percent.configure(state=""disabled"")
##            self.Label_Unsharp_Percent_u.configure(state=""disabled"")
##            self.Entry_Unsharp_Percent.configure(state=""disabled"")
##            self.Label_Unsharp_Threshold.configure(state=""disabled"")
##            self.Entry_Unsharp_Threshold.configure(state=""disabled"")

    def Set_Input_States_Rotary(self,event=None):
        if self.rotary.get():
            self.Label_Laser_R_Scale.configure(state=""normal"")
            self.Entry_Laser_R_Scale.configure(state=""normal"")
            self.Label_Laser_Rapid_Feed.configure(state=""normal"")
            self.Label_Laser_Rapid_Feed_u.configure(state=""normal"")
            self.Entry_Laser_Rapid_Feed.configure(state=""normal"")
        else:
            self.Label_Laser_R_Scale.configure(state=""disabled"")
            self.Entry_Laser_R_Scale.configure(state=""disabled"")
            self.Label_Laser_Rapid_Feed.configure(state=""disabled"")
            self.Label_Laser_Rapid_Feed_u.configure(state=""disabled"")
            self.Entry_Laser_Rapid_Feed.configure(state=""disabled"")
            
#    def Set_Input_States_RASTER_Event(self,event):
#        self.Set_Input_States_RASTER()

    def Imaging_Free(self,image_in,bg=""#ffffff""):
        image_in = image_in.convert('L')
        wim,him = image_in.size
        image_out=PhotoImage(width=wim,height=him)
        pixel=image_in.load()
        if bg!=None:
            image_out.put(bg, to=(0,0,wim,him))
        for y in range(0,him):
            for x in range(0,wim):
                val=pixel[x,y]
                if val!=255:
                    image_out.put(""#%02x%02x%02x"" %(val,val,val),(x,y))
        return image_out

    ##########################################
    #        CANVAS PLOTTING STUFF           #
    ##########################################
    def Plot_Data(self):
        self.PreviewCanvas.delete(ALL)
        self.calc_button.place_forget()

        for seg in self.segID:
            self.PreviewCanvas.delete(seg)
        self.segID = []
        
        cszw = int(self.PreviewCanvas.cget(""width""))
        cszh = int(self.PreviewCanvas.cget(""height""))
        buff=10
        wc = float(cszw/2)
        hc = float(cszh/2)        
        
        maxx = float(self.LaserXsize.get()) / self.units_scale
        minx = 0.0
        maxy = 0.0
        miny = -float(self.LaserYsize.get()) / self.units_scale
        midx=(maxx+minx)/2
        midy=(maxy+miny)/2
        
                
        if self.inputCSYS.get() and self.RengData.image == None:
            xmin,xmax,ymin,ymax = 0.0,0.0,0.0,0.0
        else:
            xmin,xmax,ymin,ymax = self.Get_Design_Bounds()           
                
        if (self.HomeUR.get()):
            XlineShift = maxx - self.laserX - (xmax-xmin)
        else:
            XlineShift = self.laserX
        YlineShift = self.laserY    
        if min((xmax-xmin),(ymax-ymin)) > 0 and self.zoom2image.get():
            self.PlotScale = max((xmax-xmin)/(cszw-buff), (ymax-ymin)/(cszh-buff))
            if self.HomeUR.get():
                x_rgt =  (xmax-minx) / self.PlotScale - self.laserX / self.PlotScale + (cszw-(xmax-xmin)/self.PlotScale)/2
                x_lft =  (xmax-maxx) / self.PlotScale - self.laserX / self.PlotScale + (cszw-(xmax-xmin)/self.PlotScale)/2
            else:
                x_lft =  minx / self.PlotScale - self.laserX / self.PlotScale + (cszw-(xmax-xmin)/self.PlotScale)/2
                x_rgt =  maxx / self.PlotScale - self.laserX / self.PlotScale + (cszw-(xmax-xmin)/self.PlotScale)/2
            y_bot = -miny / self.PlotScale + self.laserY / self.PlotScale + (cszh-(ymax-ymin)/self.PlotScale)/2
            y_top = -maxy / self.PlotScale + self.laserY / self.PlotScale + (cszh-(ymax-ymin)/self.PlotScale)/2
            self.segID.append( self.PreviewCanvas.create_rectangle(
                            x_lft, y_bot, x_rgt, y_top, fill=""gray80"", outline=""gray80"", width = 0) )
        else:
            self.PlotScale = max((maxx-minx)/(cszw-buff), (maxy-miny)/(cszh-buff))
            x_lft = cszw/2 + (minx-midx) / self.PlotScale
            x_rgt = cszw/2 + (maxx-midx) / self.PlotScale
            y_bot = cszh/2 + (maxy-midy) / self.PlotScale
            y_top = cszh/2 + (miny-midy) / self.PlotScale
            self.segID.append( self.PreviewCanvas.create_rectangle(
                            x_lft, y_bot, x_rgt, y_top, fill=""gray80"", outline=""gray80"", width = 0) )


        ######################################
        ###       Plot Raster Image        ###
        ######################################
        if self.RengData.image != None:
            if self.include_Reng.get():   
                try:
                    new_SCALE = (1.0/self.PlotScale)/self.input_dpi
                    if new_SCALE != self.SCALE:
                        self.SCALE = new_SCALE
                        nw=int(self.SCALE*self.wim)
                        nh=int(self.SCALE*self.him)

                        plot_im = self.RengData.image.convert(""L"")                        
##                        if self.unsharp_flag.get():
##                            from PIL import ImageFilter
##                            filter = ImageFilter.UnsharpMask()
##                            filter.radius    = float(self.unsharp_r.get())
##                            filter.percent   = int(float(self.unsharp_p.get()))
##                            filter.threshold = int(float(self.unsharp_t.get()))
##                            plot_im = plot_im.filter(filter)
                        
                        if self.negate.get():
                            plot_im = ImageOps.invert(plot_im)

                        if self.halftone.get() == False:
                            plot_im = plot_im.point(lambda x: 0 if x<128 else 255, '1')
                            plot_im = plot_im.convert(""L"")

                        if self.mirror.get():
                            plot_im = ImageOps.mirror(plot_im)

                        if self.rotate.get():
                            plot_im = plot_im.rotate(90,expand=True)
                            nh=int(self.SCALE*self.wim)
                            nw=int(self.SCALE*self.him)
                            
                        try:
                            self.UI_image = ImageTk.PhotoImage(plot_im.resize((nw,nh), Image.LANCZOS))
                        except:
                            debug_message(""Imaging_Free Used."")
                            self.UI_image = self.Imaging_Free(plot_im.resize((nw,nh), Image.LANCZOS))
                except:
                    self.SCALE = 1
                    debug_message(traceback.format_exc())
                    
                self.Plot_Raster(self.laserX+.001, self.laserY-.001, x_lft,y_top,self.PlotScale,im=self.UI_image)
        else:
            self.UI_image = None


        ######################################
        ###       Plot Reng Coords         ###
        ######################################
        if self.include_Rpth.get() and self.RengData.ecoords!=[]:
            loop_old = -1

            #####
            Xscale = 1/float(self.LaserXscale.get())
            Yscale = 1/float(self.LaserYscale.get())
            if self.rotary.get():
                Rscale = 1/float(self.LaserRscale.get())
                Yscale = Yscale*Rscale
            ######

            for line in self.RengData.ecoords:
                XY    = line
                x1    = XY[0]*Xscale
                y1    = XY[1]*Yscale-ymax
                loop  = XY[2]
                color = ""black""
                # check and see if we need to move to a new discontinuous start point
                if (loop == loop_old):
                    self.Plot_Line(xold, yold, x1, y1, x_lft, y_top, XlineShift, YlineShift, self.PlotScale, color)
                loop_old = loop
                xold=x1
                yold=y1

            
        ######################################
        ###       Plot Veng Coords         ###
        ######################################
        if self.include_Veng.get():
            loop_old = -1
            

            plot_coords = self.VengData.ecoords
            if self.mirror.get() or self.rotate.get():
                plot_coords = self.mirror_rotate_vector_coords(plot_coords)

            for line in plot_coords:
                XY    = line
                x1    = (XY[0]-xmin)
                y1    = (XY[1]-ymax)
                loop  = XY[2]
                # check and see if we need to move to a new discontinuous start point
                if (loop == loop_old):
                    self.Plot_Line(xold, yold, x1, y1, x_lft, y_top, XlineShift, YlineShift, self.PlotScale, ""blue"")
                loop_old = loop
                xold=x1
                yold=y1

        ######################################
        ###       Plot Vcut Coords         ###
        ######################################
        if self.include_Vcut.get():
            loop_old = -1

            plot_coords = self.VcutData.ecoords
            if self.mirror.get() or self.rotate.get():
                    plot_coords = self.mirror_rotate_vector_coords(plot_coords)
                
            for line in plot_coords:
                XY    = line
                x1    = (XY[0]-xmin)
                y1    = (XY[1]-ymax)
                loop  = XY[2]
                # check and see if we need to move to a new discontinuous start point
                if (loop == loop_old):
                    self.Plot_Line(xold, yold, x1, y1, x_lft, y_top, XlineShift, YlineShift, self.PlotScale, ""red"")
                loop_old = loop
                xold=x1
                yold=y1

        ######################################
        ###       Plot Gcode Coords        ###
        ######################################
        if self.include_Gcde.get():  
            loop_old = -1
            scale=1

            plot_coords = self.GcodeData.ecoords
            if self.mirror.get() or self.rotate.get():
                    plot_coords = self.mirror_rotate_vector_coords(plot_coords)
                
            for line in plot_coords:
                XY    = line
                x1    = (XY[0]-xmin)*scale
                y1    = (XY[1]-ymax)*scale

                loop  = XY[2]
                # check and see if we need to move to a new discontinuous start point
                if (loop == loop_old):
                    self.Plot_Line(xold, yold, x1, y1, x_lft, y_top, XlineShift, YlineShift, self.PlotScale, ""white"")
                loop_old = loop
                xold=x1
                yold=y1


        ######################################
        ###       Plot Trace Coords        ###
        ######################################
        if self.trace_window.winfo_exists():  # or DEBUG:
            #####
            Xscale = 1/float(self.LaserXscale.get())
            Yscale = 1/float(self.LaserYscale.get())
            if self.rotary.get():
                Rscale = 1/float(self.LaserRscale.get())
                Yscale = Yscale*Rscale
            ######
            trace_coords = self.make_trace_path()
            for i in range(len(trace_coords)):
                trace_coords[i]=[trace_coords[i][0]*Xscale,trace_coords[i][1]*Yscale,trace_coords[i][2]]

            for line in trace_coords:
                XY    = line
                x1    = (XY[0]-xmin)*scale
                y1    = (XY[1]-ymax)*scale
                loop  = XY[2]
                # check and see if we need to move to a new discontinuous start point
                if (loop == loop_old):
                    green = ""#%02x%02x%02x"" % (0, 200, 0)
                    self.Plot_Line(xold, yold, x1, y1, x_lft, y_top, XlineShift, YlineShift,
                                   self.PlotScale, green, thick=2,tag_value=('LaserTag', 'trace'))
                loop_old = loop
                xold=x1
                yold=y1


        ######################################            
        self.refreshTime()
        dot_col = ""grey50""
        xoff = self.pos_offset[0]/1000.0
        yoff = self.pos_offset[1]/1000.0

        if abs(self.pos_offset[0])+abs(self.pos_offset[1]) > 0:
            head_offset=True
        else:
            head_offset=False
        
        self.Plot_circle(self.laserX+xoff,self.laserY+yoff,x_lft,y_top,self.PlotScale,dot_col,radius=5,cross_hair=head_offset)
        
    def Plot_Raster(self, XX, YY, Xleft, Ytop, PlotScale, im):
        if (self.HomeUR.get()):
            maxx = float(self.LaserXsize.get()) / self.units_scale
            xmin,xmax,ymin,ymax = self.Get_Design_Bounds()
            xplt = Xleft + ( maxx-XX-(xmax-xmin) )/PlotScale
        else:
            xplt = Xleft +  XX/PlotScale
            
        yplt = Ytop  - YY/PlotScale
        self.segID.append(
            self.PreviewCanvas.create_image(xplt, yplt, anchor=NW, image=self.UI_image,tags='LaserTag')
            )


    def offset_eccords(self,ecoords_in,offset_val):
        if not PYCLIPPER:
            return ecoords_in
        
        loop_num = ecoords_in[0][2]
        pco = pyclipper.PyclipperOffset()
        ecoords_out=[]
        pyclip_path = []
        for i in range(0,len(ecoords_in)):
            pyclip_path.append([ecoords_in[i][0]*1000,ecoords_in[i][1]*1000])

        pco.AddPath(pyclip_path, pyclipper.JT_ROUND, pyclipper.ET_CLOSEDPOLYGON)
        try:
            plot_coords = pco.Execute(offset_val*1000.0)[0]
            plot_coords.append(plot_coords[0])
        except:
            plot_coords=[]
            
        for i in range(0,len(plot_coords)):
            ecoords_out.append([plot_coords[i][0]/1000.0,plot_coords[i][1]/1000.0,loop_num])
        return ecoords_out
    
        
    def Plot_circle(self, XX, YY, Xleft, Ytop, PlotScale, col, radius=0, cross_hair=False):
        circle_tags = ('LaserTag','LaserDot')
        if (self.HomeUR.get()):
            maxx = float(self.LaserXsize.get()) / self.units_scale
            xplt = Xleft + maxx/PlotScale - XX/PlotScale
        else:
            xplt = Xleft + XX/PlotScale
        yplt = Ytop  - YY/PlotScale


        if cross_hair:
            radius=radius*2
            leg = int(radius*.707)
            self.segID.append(
                self.PreviewCanvas.create_polygon(
                                                xplt-radius,
                                                yplt,
                                                xplt-leg,
                                                yplt+leg,
                                                xplt,
                                                yplt+radius,
                                                xplt+leg,
                                                yplt+leg,
                                                xplt+radius,
                                                yplt,
                                                xplt+leg,
                                                yplt-leg,
                                                xplt,
                                                yplt-radius,
                                                xplt-leg,
                                                yplt-leg,
                                                fill=col,  outline=col, width = 1, stipple='gray12',tags=circle_tags ))
           
            self.segID.append(
                self.PreviewCanvas.create_line( xplt-radius,
                                                yplt,
                                                xplt+radius,
                                                yplt,
                                                fill=col, capstyle=""round"", width = 1, tags=circle_tags ))
            self.segID.append(
                self.PreviewCanvas.create_line( xplt,
                                                yplt-radius,
                                                xplt,
                                                yplt+radius,
                                                fill=col, capstyle=""round"", width = 1, tags=circle_tags ))
        else:
            self.segID.append(
                self.PreviewCanvas.create_oval(
                                                xplt-radius,
                                                yplt-radius,
                                                xplt+radius,
                                                yplt+radius,
                                                fill=col,  outline=col, width = 0, stipple='gray50',tags=circle_tags ))


    def Plot_Line(self, XX1, YY1, XX2, YY2, Xleft, Ytop, XlineShift, YlineShift, PlotScale, col, thick=0, tag_value='LaserTag'):
        xplt1 = Xleft + (XX1 + XlineShift )/PlotScale 
        xplt2 = Xleft + (XX2 + XlineShift )/PlotScale
        yplt1 = Ytop  - (YY1 + YlineShift )/PlotScale
        yplt2 = Ytop  - (YY2 + YlineShift )/PlotScale
        
        self.segID.append(
            self.PreviewCanvas.create_line( xplt1,
                                            yplt1,
                                            xplt2,
                                            yplt2,
                                            fill=col, capstyle=""round"", width = thick, tags=tag_value) )
        
    ################################################################################
    #                         Temporary Move Window                                #
    ################################################################################
    def move_head_window_temporary(self,new_pos_offset):
        if self.GUI_Disabled:
            return
        dx_inches = round(new_pos_offset[0]/1000.0,3)
        dy_inches = round(new_pos_offset[1]/1000.0,3)
        Xnew,Ynew = self.XY_in_bounds(dx_inches,dy_inches,no_size=True)

        pos_offset_X = round((Xnew-self.laserX)*1000.0)
        pos_offset_Y = round((Ynew-self.laserY)*1000.0)
        new_pos_offset = [pos_offset_X,pos_offset_Y]        
        
        if self.inputCSYS.get() and self.RengData.image == None:
            new_pos_offset = [0,0]
            xdist = -self.pos_offset[0]
            ydist = -self.pos_offset[1]
        else:
            xdist = -self.pos_offset[0] + new_pos_offset[0]
            ydist = -self.pos_offset[1] + new_pos_offset[1]
            
        if self.k40 != None:
            if self.Send_Rapid_Move( xdist,ydist ):
                self.pos_offset = new_pos_offset
                self.menu_View_Refresh()
        else:      
            self.pos_offset = new_pos_offset
            self.menu_View_Refresh()
    
    ################################################################################
    #                         General Settings Window                              #
    ################################################################################
    def GEN_Settings_Window(self):
        gen_width = 560
        gen_settings = Toplevel(width=gen_width, height=575) #460+75)
        gen_settings.grab_set() # Use grab_set to prevent user input in the main window
        gen_settings.focus_set()
        gen_settings.resizable(0,0)
        gen_settings.title('General Settings')
        gen_settings.iconname(""General Settings"")

        D_Yloc  = 6
        D_dY = 26
        xd_label_L = 12

        w_label=150
        w_entry=40
        w_units=45
        xd_entry_L=xd_label_L+w_label+10
        xd_units_L=xd_entry_L+w_entry+5
        sep_border=10

        #Radio Button
        D_Yloc=D_Yloc+D_dY
        self.Label_Units = Label(gen_settings,text=""Units"")
        self.Label_Units.place(x=xd_label_L, y=D_Yloc, width=113, height=21)
        self.Radio_Units_IN = Radiobutton(gen_settings,text=""inch"", value=""in"",
                                         width=""100"", anchor=W)
        self.Radio_Units_IN.place(x=w_label+22, y=D_Yloc, width=75, height=23)
        self.Radio_Units_IN.configure(variable=self.units, command=self.Entry_units_var_Callback )
        self.Radio_Units_MM = Radiobutton(gen_settings,text=""mm"", value=""mm"",
                                         width=""100"", anchor=W)
        self.Radio_Units_MM.place(x=w_label+110, y=D_Yloc, width=75, height=23)
        self.Radio_Units_MM.configure(variable=self.units, command=self.Entry_units_var_Callback )

        D_Yloc=D_Yloc+D_dY
        self.Label_init_home = Label(gen_settings,text=""Home Upon Initialize"")
        self.Label_init_home.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_init_home = Checkbutton(gen_settings,text="""", anchor=W)
        self.Checkbutton_init_home.place(x=xd_entry_L, y=D_Yloc, width=75, height=23)
        self.Checkbutton_init_home.configure(variable=self.init_home)

        
        D_Yloc=D_Yloc+D_dY
        self.Label_post_home = Label(gen_settings,text=""After Job Finishes:"")
        self.Label_post_home.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)

        Xoption_width = 120
        Xoption_col1  = xd_entry_L
        Xoption_col2  = xd_entry_L+Xoption_width
        Xoption_col3  = xd_entry_L+Xoption_width*2
        
        self.Checkbutton_post_home = Checkbutton(gen_settings,text=""Unlock Rail"", anchor=W)
        self.Checkbutton_post_home.place(x=Xoption_col1, y=D_Yloc, width=Xoption_width, height=23)
        self.Checkbutton_post_home.configure(variable=self.post_home)

        self.Checkbutton_post_beep = Checkbutton(gen_settings,text=""Beep"", anchor=W)
        self.Checkbutton_post_beep.place(x=Xoption_col2, y=D_Yloc, width=Xoption_width, height=23)
        self.Checkbutton_post_beep.configure(variable=self.post_beep)

        D_Yloc=D_Yloc+D_dY
        self.Checkbutton_post_disp = Checkbutton(gen_settings,text=""Popup Report"", anchor=W)
        self.Checkbutton_post_disp.place(x=Xoption_col1, y=D_Yloc, width=Xoption_width, height=23)
        self.Checkbutton_post_disp.configure(variable=self.post_disp)

        self.Checkbutton_post_exec = Checkbutton(gen_settings,text=""Run Batch File:"", anchor=W, command=self.Set_Input_States_BATCH)
        self.Checkbutton_post_exec.place(x=Xoption_col2, y=D_Yloc, width=Xoption_width, height=23)
        self.Checkbutton_post_exec.configure(variable=self.post_exec)


        self.Entry_Batch_Path = Entry(gen_settings)
        self.Entry_Batch_Path.place(x=Xoption_col3, y=D_Yloc, width=Xoption_width, height=23)
        self.Entry_Batch_Path.configure(textvariable=self.batch_path)
        

        D_Yloc=D_Yloc+D_dY
        self.Label_Preprocess_CRC = Label(gen_settings,text=""Preprocess CRC Data"")
        self.Label_Preprocess_CRC.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Preprocess_CRC = Checkbutton(gen_settings,text="""", anchor=W)
        self.Checkbutton_Preprocess_CRC.place(x=xd_entry_L, y=D_Yloc, width=75, height=23)
        self.Checkbutton_Preprocess_CRC.configure(variable=self.pre_pr_crc)

        D_Yloc=D_Yloc+D_dY
        self.Label_Reduce_Memory = Label(gen_settings,text=""Reduce Memory Use"")
        self.Label_Reduce_Memory.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Reduce_Memory = Checkbutton(gen_settings,text=""(needed for large designs or low memory computers)"", anchor=W)
        self.Checkbutton_Reduce_Memory.place(x=xd_entry_L, y=D_Yloc, width=350, height=23)
        self.Checkbutton_Reduce_Memory.configure(variable=self.reduced_mem)
        self.reduced_mem.trace_variable(""w"", self.Reduced_Memory_Callback)

        D_Yloc=D_Yloc+D_dY
        self.Label_Wait = Label(gen_settings,text=""Wait for Laser to Finish"")
        self.Label_Wait.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Wait = Checkbutton(gen_settings,text=""(after all data has been sent over USB)"", anchor=W)
        self.Checkbutton_Wait.place(x=xd_entry_L, y=D_Yloc, width=350, height=23)
        self.Checkbutton_Wait.configure(variable=self.wait)
        #self.wait.trace_variable(""w"", self.Wait_Callback)
        
        #D_Yloc=D_Yloc+D_dY
        #self.Label_Timeout = Label(gen_settings,text=""USB Timeout"")
        #self.Label_Timeout.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        #self.Label_Timeout_u = Label(gen_settings,text=""ms"", anchor=W)
        #self.Label_Timeout_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        #self.Entry_Timeout = Entry(gen_settings,width=""15"")
        #self.Entry_Timeout.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        #self.Entry_Timeout.configure(textvariable=self.t_timeout)
        #self.t_timeout.trace_variable(""w"", self.Entry_Timeout_Callback)
        #self.entry_set(self.Entry_Timeout,self.Entry_Timeout_Check(),2)

        #D_Yloc=D_Yloc+D_dY
        #self.Label_N_Timeouts = Label(gen_settings,text=""Number of Timeouts"")
        #self.Label_N_Timeouts.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        #self.Entry_N_Timeouts = Entry(gen_settings,width=""15"")
        #self.Entry_N_Timeouts.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        #self.Entry_N_Timeouts.configure(textvariable=self.n_timeouts)
        #self.n_timeouts.trace_variable(""w"", self.Entry_N_Timeouts_Callback)
        #self.entry_set(self.Entry_N_Timeouts,self.Entry_N_Timeouts_Check(),2)

        D_Yloc=D_Yloc+D_dY*1.25
        self.gen_separator1 = Frame(gen_settings, height=2, bd=1, relief=SUNKEN)
        self.gen_separator1.place(x=xd_label_L, y=D_Yloc,width=gen_width-40, height=2)

        D_Yloc=D_Yloc+D_dY*.25
        self.Label_Inkscape_title = Label(gen_settings,text=""Inkscape Options"")
        self.Label_Inkscape_title.place(x=xd_label_L, y=D_Yloc, width=gen_width-40, height=21)
        
        D_Yloc=D_Yloc+D_dY
        font_entry_width=215
        self.Label_Inkscape_Path = Label(gen_settings,text=""Inkscape Executable"")
        self.Label_Inkscape_Path.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Entry_Inkscape_Path = Entry(gen_settings,width=""15"")
        self.Entry_Inkscape_Path.place(x=xd_entry_L, y=D_Yloc, width=font_entry_width, height=23)
        self.Entry_Inkscape_Path.configure(textvariable=self.inkscape_path)
        self.Entry_Inkscape_Path.bind('<FocusIn>', self.Inkscape_Path_Message)
        self.Inkscape_Path = Button(gen_settings,text=""Find Inkscape"")
        self.Inkscape_Path.place(x=xd_entry_L+font_entry_width+10, y=D_Yloc, width=110, height=23)
        self.Inkscape_Path.bind(""<ButtonRelease-1>"", self.Inkscape_Path_Click)

        D_Yloc=D_Yloc+D_dY
        self.Label_Ink_Timeout = Label(gen_settings,text=""Inkscape Timeout"")
        self.Label_Ink_Timeout.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Label_Ink_Timeout_u = Label(gen_settings,text=""minutes"", anchor=W)
        self.Label_Ink_Timeout_u.place(x=xd_units_L, y=D_Yloc, width=w_units*2, height=21)
        self.Entry_Ink_Timeout = Entry(gen_settings,width=""15"")
        self.Entry_Ink_Timeout.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Ink_Timeout.configure(textvariable=self.ink_timeout)
        self.ink_timeout.trace_variable(""w"", self.Entry_Ink_Timeout_Callback)
        self.entry_set(self.Entry_Ink_Timeout,self.Entry_Ink_Timeout_Check(),2)

        D_Yloc=D_Yloc+D_dY*1.25
        self.gen_separator2 = Frame(gen_settings, height=2, bd=1, relief=SUNKEN)
        self.gen_separator2.place(x=xd_label_L, y=D_Yloc,width=gen_width-40, height=2)

        D_Yloc=D_Yloc+D_dY*.5
        self.Label_no_com = Label(gen_settings,text=""Home in Upper Right"")
        self.Label_no_com.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_no_com = Checkbutton(gen_settings,text="""", anchor=W)
        self.Checkbutton_no_com.place(x=xd_entry_L, y=D_Yloc, width=75, height=23)
        self.Checkbutton_no_com.configure(variable=self.HomeUR)
        self.HomeUR.trace_variable(""w"",self.menu_View_Refresh_Callback)        

        D_Yloc=D_Yloc+D_dY 
        self.Label_Board_Name      = Label(gen_settings,text=""Board Name"", anchor=CENTER )
        self.Board_Name_OptionMenu = OptionMenu(gen_settings, self.board_name,
                                            ""LASER-M2"",
                                            ""LASER-M1"",
                                            ""LASER-M"",
                                            ""LASER-B2"",
                                            ""LASER-B1"",
                                            ""LASER-B"",
                                            ""LASER-A"")
        self.Label_Board_Name.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Board_Name_OptionMenu.place(x=xd_entry_L, y=D_Yloc, width=w_entry*3, height=23)

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_Area_Width = Label(gen_settings,text=""Laser Area Width"")
        self.Label_Laser_Area_Width.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Label_Laser_Area_Width_u = Label(gen_settings,textvariable=self.units, anchor=W)
        self.Label_Laser_Area_Width_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        self.Entry_Laser_Area_Width = Entry(gen_settings,width=""15"")
        self.Entry_Laser_Area_Width.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Laser_Area_Width.configure(textvariable=self.LaserXsize)
        self.LaserXsize.trace_variable(""w"", self.Entry_Laser_Area_Width_Callback)
        self.entry_set(self.Entry_Laser_Area_Width,self.Entry_Laser_Area_Width_Check(),2)

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_Area_Height = Label(gen_settings,text=""Laser Area Height"")
        self.Label_Laser_Area_Height.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Label_Laser_Area_Height_u = Label(gen_settings,textvariable=self.units, anchor=W)
        self.Label_Laser_Area_Height_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        self.Entry_Laser_Area_Height = Entry(gen_settings,width=""15"")
        self.Entry_Laser_Area_Height.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Laser_Area_Height.configure(textvariable=self.LaserYsize)
        self.LaserYsize.trace_variable(""w"", self.Entry_Laser_Area_Height_Callback)
        self.entry_set(self.Entry_Laser_Area_Height,self.Entry_Laser_Area_Height_Check(),2)

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_X_Scale = Label(gen_settings,text=""X Scale Factor"")
        self.Label_Laser_X_Scale.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Entry_Laser_X_Scale = Entry(gen_settings,width=""15"")
        self.Entry_Laser_X_Scale.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Laser_X_Scale.configure(textvariable=self.LaserXscale)
        self.LaserXscale.trace_variable(""w"", self.Entry_Laser_X_Scale_Callback)
        self.entry_set(self.Entry_Laser_X_Scale,self.Entry_Laser_X_Scale_Check(),2)

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_Y_Scale = Label(gen_settings,text=""Y Scale Factor"")
        self.Label_Laser_Y_Scale.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Entry_Laser_Y_Scale = Entry(gen_settings,width=""15"")
        self.Entry_Laser_Y_Scale.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Laser_Y_Scale.configure(textvariable=self.LaserYscale)
        self.LaserYscale.trace_variable(""w"", self.Entry_Laser_Y_Scale_Callback)
        self.entry_set(self.Entry_Laser_Y_Scale,self.Entry_Laser_Y_Scale_Check(),2)
                
        D_Yloc=D_Yloc+D_dY+10
        self.Label_SaveConfig = Label(gen_settings,text=""Configuration File"")
        self.Label_SaveConfig.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)

        self.GEN_SaveConfig = Button(gen_settings,text=""Save"")
        self.GEN_SaveConfig.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=21, anchor=""nw"")
        self.GEN_SaveConfig.bind(""<ButtonRelease-1>"", self.Write_Config_File)
        
        ## Buttons ##
        gen_settings.update_idletasks()
        Ybut=int(gen_settings.winfo_height())-30
        Xbut=int(gen_settings.winfo_width()/2)

        self.GEN_Close = Button(gen_settings,text=""Close"")
        self.GEN_Close.place(x=Xbut, y=Ybut, width=130, height=30, anchor=""center"")
        self.GEN_Close.bind(""<ButtonRelease-1>"", self.Close_Current_Window_Click)

        self.Set_Input_States_BATCH()

    ################################################################################
    #                          Raster Settings Window                              #
    ################################################################################
    def RASTER_Settings_Window(self):
        Wset=425+280
        Hset=330 #260
        raster_settings = Toplevel(width=Wset, height=Hset)
        raster_settings.grab_set() # Use grab_set to prevent user input in the main window
        raster_settings.focus_set()
        raster_settings.resizable(0,0)
        raster_settings.title('Raster Settings')
        raster_settings.iconname(""Raster Settings"")

        D_Yloc  = 6
        D_dY = 24
        xd_label_L = 12

        w_label=155
        w_entry=60
        w_units=35
        xd_entry_L=xd_label_L+w_label+10
        xd_units_L=xd_entry_L+w_entry+5

        D_Yloc=D_Yloc+D_dY
        self.Label_Rstep   = Label(raster_settings,text=""Scanline Step"", anchor=CENTER )
        self.Label_Rstep.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Label_Rstep_u = Label(raster_settings,text=""in"", anchor=W)
        self.Label_Rstep_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        self.Entry_Rstep   = Entry(raster_settings,width=""15"")
        self.Entry_Rstep.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Rstep.configure(textvariable=self.rast_step)
        self.rast_step.trace_variable(""w"", self.Entry_Rstep_Callback)

        D_Yloc=D_Yloc+D_dY
        self.Label_EngraveUP = Label(raster_settings,text=""Engrave Bottom Up"")
        self.Checkbutton_EngraveUP = Checkbutton(raster_settings,text="" "", anchor=W)
        self.Checkbutton_EngraveUP.configure(variable=self.engraveUP)
        self.Label_EngraveUP.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_EngraveUP.place(x=w_label+22, y=D_Yloc, width=75, height=23)
        
        D_Yloc=D_Yloc+D_dY
        self.Label_Halftone = Label(raster_settings,text=""Halftone (Dither)"")
        self.Label_Halftone.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Halftone = Checkbutton(raster_settings,text="" "", anchor=W, command=self.Set_Input_States_RASTER)
        self.Checkbutton_Halftone.place(x=w_label+22, y=D_Yloc, width=75, height=23)
        self.Checkbutton_Halftone.configure(variable=self.halftone)
        self.halftone.trace_variable(""w"", self.menu_View_Refresh_Callback)

        ############
        D_Yloc=D_Yloc+D_dY 
        self.Label_Halftone_DPI      = Label(raster_settings,text=""Halftone Resolution"", anchor=CENTER )

        if self.reduced_mem.get():
            if self.ht_size == ""1000"": self.ht_size = ""500""
            if self.ht_size == ""333"":  self.ht_size = ""500""
            if self.ht_size == ""200"":  self.ht_size = ""250""
            if self.ht_size == ""143"":  self.ht_size = ""167""
            self.Halftone_DPI_OptionMenu = OptionMenu(raster_settings, self.ht_size,
                                                ""500"",
                                                ""250"",
                                                ""167"",
                                                ""125"")
        else:
            self.Halftone_DPI_OptionMenu = OptionMenu(raster_settings, self.ht_size,
                                                ""1000"",
                                                ""500"",
                                                ""333"",
                                                ""250"",
                                                ""200"",
                                                ""167"",
                                                ""143"",
                                                ""125"")

        self.Label_Halftone_DPI.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Halftone_DPI_OptionMenu.place(x=xd_entry_L, y=D_Yloc, width=w_entry+30, height=23)

        self.Label_Halftone_u = Label(raster_settings,text=""dpi"", anchor=W)
        self.Label_Halftone_u.place(x=xd_units_L+30, y=D_Yloc, width=w_units, height=21)

        ############
        D_Yloc=D_Yloc+D_dY+5
        self.Label_bezier_M1  = Label(raster_settings,
                                text=""Slope, Black (%.1f)""%(self.bezier_M1_default),
                                anchor=CENTER )
        self.bezier_M1_Slider = Scale(raster_settings, from_=1, to=50, resolution=0.1, \
                                orient=HORIZONTAL, variable=self.bezier_M1)
        self.bezier_M1_Slider.place(x=xd_entry_L, y=D_Yloc, width=(Wset-xd_entry_L-25-280 ))
        D_Yloc=D_Yloc+21
        self.Label_bezier_M1.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.bezier_M1.trace_variable(""w"", self.bezier_M1_Callback)
        
        D_Yloc=D_Yloc+D_dY-8
        self.Label_bezier_M2  = Label(raster_settings,
                                text=""Slope, White (%.2f)""%(self.bezier_M2_default),
                                anchor=CENTER )
        self.bezier_M2_Slider = Scale(raster_settings, from_=0.0, to=1, \
                                orient=HORIZONTAL,resolution=0.01, variable=self.bezier_M2)
        self.bezier_M2_Slider.place(x=xd_entry_L, y=D_Yloc, width=(Wset-xd_entry_L-25-280 ))
        D_Yloc=D_Yloc+21
        self.Label_bezier_M2.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.bezier_M2.trace_variable(""w"", self.bezier_M2_Callback)

        D_Yloc=D_Yloc+D_dY-8
        self.Label_bezier_weight   = Label(raster_settings,
                                     text=""Transition (%.1f)""%(self.bezier_M1_default),
                                     anchor=CENTER )
        self.bezier_weight_Slider = Scale(raster_settings, from_=0, to=10, resolution=0.1, \
                                    orient=HORIZONTAL, variable=self.bezier_weight)
        self.bezier_weight_Slider.place(x=xd_entry_L, y=D_Yloc, width=(Wset-xd_entry_L-25-280 ))
        D_Yloc=D_Yloc+21
        self.Label_bezier_weight.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.bezier_weight.trace_variable(""w"", self.bezier_weight_Callback)

##        show_unsharp = False
##        if DEBUG and show_unsharp:
##            D_Yloc=D_Yloc+D_dY
##            self.Label_UnsharpMask = Label(raster_settings,text=""Unsharp Mask"")
##            self.Label_UnsharpMask.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
##            self.Checkbutton_UnsharpMask = Checkbutton(raster_settings,text="" "", anchor=W, command=self.Set_Input_States_Unsharp)
##            self.Checkbutton_UnsharpMask.place(x=w_label+22, y=D_Yloc, width=75, height=23)
##            self.Checkbutton_UnsharpMask.configure(variable=self.unsharp_flag)
##            self.unsharp_flag.trace_variable(""w"", self.menu_View_Refresh_Callback)
##
##            D_Yloc=D_Yloc+D_dY
##            self.Label_Unsharp_Radius   = Label(raster_settings,text=""Unsharp Mask Radius"", anchor=CENTER )
##            self.Label_Unsharp_Radius.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
##            self.Label_Unsharp_Radius_u = Label(raster_settings,text=""Pixels"", anchor=W)
##            self.Label_Unsharp_Radius_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
##            self.Entry_Unsharp_Radius   = Entry(raster_settings,width=""15"")
##            self.Entry_Unsharp_Radius.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
##            self.Entry_Unsharp_Radius.configure(textvariable=self.unsharp_r)
##            self.unsharp_r.trace_variable(""w"", self.Entry_Unsharp_Radius_Callback)
##
##            D_Yloc=D_Yloc+D_dY
##            self.Label_Unsharp_Percent   = Label(raster_settings,text=""Unsharp Mask Percent"", anchor=CENTER )
##            self.Label_Unsharp_Percent.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
##            self.Label_Unsharp_Percent_u = Label(raster_settings,text=""%"", anchor=W)
##            self.Label_Unsharp_Percent_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
##            self.Entry_Unsharp_Percent   = Entry(raster_settings,width=""15"")
##            self.Entry_Unsharp_Percent.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
##            self.Entry_Unsharp_Percent.configure(textvariable=self.unsharp_p)
##            self.unsharp_p.trace_variable(""w"", self.Entry_Unsharp_Percent_Callback)
##
##            D_Yloc=D_Yloc+D_dY
##            self.Label_Unsharp_Threshold   = Label(raster_settings,text=""Unsharp Mask Threshold"", anchor=CENTER )
##            self.Label_Unsharp_Threshold.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
##            #self.Label_Unsharp_Threshold_u = Label(raster_settings,text=""Pixels"", anchor=W)
##            #self.Label_Unsharp_Threshold_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
##            self.Entry_Unsharp_Threshold   = Entry(raster_settings,width=""15"")
##            self.Entry_Unsharp_Threshold.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
##            self.Entry_Unsharp_Threshold.configure(textvariable=self.unsharp_t)
##            self.unsharp_t.trace_variable(""w"", self.Entry_Unsharp_Threshold_Callback)        

        # Bezier Canvas
        self.Bezier_frame = Frame(raster_settings, bd=1, relief=SUNKEN)
        self.Bezier_frame.place(x=Wset-280, y=10, height=265, width=265)
        self.BezierCanvas = Canvas(self.Bezier_frame, background=""white"")
        self.BezierCanvas.pack(side=LEFT, fill=BOTH, expand=1)
        self.BezierCanvas.create_line( 5,260-0,260,260-255,fill=""grey75"", capstyle=""round"", width = 2, tags='perm')


        M1 = self.bezier_M1_default
        M2 = self.bezier_M2_default
        w  = self.bezier_weight_default
        num = 10
        x,y = self.generate_bezier(M1,M2,w,n=num)
        for i in range(0,num):
            self.BezierCanvas.create_line( 5+x[i],260-y[i],5+x[i+1],260-y[i+1],fill=""grey85"", stipple='gray25',\
                                           capstyle=""round"", width = 2, tags='perm')
        

        ## Buttons ##
        raster_settings.update_idletasks()
        Ybut=int(raster_settings.winfo_height())-30
        Xbut=int(raster_settings.winfo_width()/2)

        self.RASTER_Close = Button(raster_settings,text=""Close"")
        self.RASTER_Close.place(x=Xbut, y=Ybut, width=130, height=30, anchor=""center"")
        self.RASTER_Close.bind(""<ButtonRelease-1>"", self.Close_Current_Window_Click)

        self.bezier_M1_Callback()
        self.Set_Input_States_RASTER()
        #if DEBUG and show_unsharp:
        #    self.Set_Input_States_Unsharp()


    ################################################################################
    #                         Rotary Settings Window                               #
    ################################################################################
    def ROTARY_Settings_Window(self):
        rotary_settings = Toplevel(width=350, height=175)
        rotary_settings.grab_set() # Use grab_set to prevent user input in the main window
        rotary_settings.focus_set()
        rotary_settings.resizable(0,0)
        rotary_settings.title('Rotary Settings')
        rotary_settings.iconname(""Rotary Settings"")

        D_Yloc  = 6
        D_dY = 30
        xd_label_L = 12

        w_label=180
        w_entry=40
        w_units=45
        xd_entry_L=xd_label_L+w_label+10
        xd_units_L=xd_entry_L+w_entry+5
        sep_border=10
        

        D_Yloc=D_Yloc+D_dY-15
        self.Label_Rotary_Enable = Label(rotary_settings,text=""Use Rotary Settings"")
        self.Label_Rotary_Enable.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Rotary_Enable = Checkbutton(rotary_settings,text="""", anchor=W, command=self.Set_Input_States_Rotary)
        self.Checkbutton_Rotary_Enable.place(x=xd_entry_L, y=D_Yloc, width=75, height=23)
        self.Checkbutton_Rotary_Enable.configure(variable=self.rotary)

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_R_Scale = Label(rotary_settings,text=""Rotary Scale Factor (Y axis)"")
        self.Label_Laser_R_Scale.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Entry_Laser_R_Scale = Entry(rotary_settings,width=""15"")
        self.Entry_Laser_R_Scale.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Laser_R_Scale.configure(textvariable=self.LaserRscale)
        self.LaserRscale.trace_variable(""w"", self.Entry_Laser_R_Scale_Callback)
        self.entry_set(self.Entry_Laser_R_Scale,self.Entry_Laser_R_Scale_Check(),2)

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_Rapid_Feed = Label(rotary_settings,text=""Rapid Speed (default=0)"")
        self.Label_Laser_Rapid_Feed.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Label_Laser_Rapid_Feed_u = Label(rotary_settings,textvariable=self.funits, anchor=W)
        self.Label_Laser_Rapid_Feed_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        self.Entry_Laser_Rapid_Feed = Entry(rotary_settings,width=""15"")
        self.Entry_Laser_Rapid_Feed.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_Laser_Rapid_Feed.configure(textvariable=self.rapid_feed)
        self.rapid_feed.trace_variable(""w"", self.Entry_Laser_Rapid_Feed_Callback)
        self.entry_set(self.Entry_Laser_Rapid_Feed,self.Entry_Laser_Rapid_Feed_Check(),2)
        
        ## Buttons ##
        rotary_settings.update_idletasks()
        Ybut=int(rotary_settings.winfo_height())-30
        Xbut=int(rotary_settings.winfo_width()/2)

        self.GEN_Close = Button(rotary_settings,text=""Close"")
        self.GEN_Close.place(x=Xbut, y=Ybut, width=130, height=30, anchor=""center"")
        self.GEN_Close.bind(""<ButtonRelease-1>"", self.Close_Current_Window_Click)

        self.Set_Input_States_Rotary()

    ################################################################################
    #                            Trace Send Window                                 #
    ################################################################################

    def TRACE_Settings_Window(self, dummy=None):
        if self.GUI_Disabled:
            return
        trace_window = Toplevel(width=350, height=180)
        self.trace_window=trace_window
        trace_window.grab_set() # Use grab_set to prevent user input in the main window during calculations
        trace_window.resizable(0,0)
        trace_window.title('Trace Boundary')
        trace_window.iconname(""Trace Boundary"")

        def Close_Click():
            win_id=self.grab_current()
            self.PreviewCanvas.delete('trace')
            win_id.destroy()

        def Close_and_Send_Click():
            win_id=self.grab_current()
            self.PreviewCanvas.delete('trace')
            win_id.destroy()
            self.Trace_Eng()

        D_Yloc  = 0
        D_dY = 28
        xd_label_L = 12

        w_label=225
        w_entry=40
        w_units=50
        xd_entry_L=xd_label_L+w_label+10
        xd_units_L=xd_entry_L+w_entry+5

        D_Yloc=D_Yloc+D_dY
        self.Label_Laser_Trace = Label(trace_window,text=""Laser 'On' During Trace"")
        self.Label_Laser_Trace.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Laser_Trace = Checkbutton(trace_window,text="""", anchor=W)
        self.Checkbutton_Laser_Trace.place(x=xd_entry_L, y=D_Yloc, width=75, height=23)
        self.Checkbutton_Laser_Trace.configure(variable=self.trace_w_laser)

        D_Yloc=D_Yloc+D_dY
        self.Label_Trace_Gap = Label(trace_window,text=""Gap Between Design and Trace"")
        self.Label_Trace_Gap.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Entry_Trace_Gap = Entry(trace_window,width=""15"")
        self.Entry_Trace_Gap.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Label_Trace_Gap_u = Label(trace_window,textvariable=self.units, anchor=W)
        self.Label_Trace_Gap_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        self.Entry_Trace_Gap.configure(textvariable=self.trace_gap,justify='center')
        self.trace_gap.trace_variable(""w"", self.Entry_Trace_Gap_Callback)
        self.entry_set(self.Entry_Trace_Gap,self.Entry_Trace_Gap_Check(),2)
        if not PYCLIPPER:
            self.Label_Trace_Gap.configure(state=""disabled"")
            self.Label_Trace_Gap_u.configure(state=""disabled"")
            self.Entry_Trace_Gap.configure(state=""disabled"")
            
        D_Yloc=D_Yloc+D_dY
        self.Trace_Button = Button(trace_window,text=""Trace Boundary With Laser Head"",command=Close_and_Send_Click)
        self.Trace_Button.place(x=xd_label_L, y=D_Yloc, width=w_label, height=23)
        
        self.Entry_Trace_Speed = Entry(trace_window,width=""15"")
        self.Entry_Trace_Speed.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        green = ""#%02x%02x%02x"" % (0, 200, 0)
        self.Entry_Trace_Speed.configure(textvariable=self.trace_speed,justify='center',fg=green)
        self.trace_speed.trace_variable(""w"", self.Entry_Trace_Speed_Callback)
        self.entry_set(self.Entry_Trace_Speed,self.Entry_Trace_Speed_Check(),2)
        self.Label_Trace_Speed_u = Label(trace_window,textvariable=self.funits, anchor=W)
        self.Label_Trace_Speed_u.place(x=xd_units_L, y=D_Yloc, width=w_units, height=21)
        
        
        ## Buttons ##
        trace_window.update_idletasks()
        Ybut=int(trace_window.winfo_height())-30
        Xbut=int(trace_window.winfo_width()/2)

        self.Trace_Close = Button(trace_window,text=""Cancel"",command=Close_Click)
        self.Trace_Close.place(x=Xbut, y=Ybut, width=130, height=30, anchor=""center"")
        ################################################################################

    ################################################################################
    #                            EGV Send Window                                   #
    ################################################################################
    def EGV_Send_Window(self,EGV_filename):
        
        egv_send = Toplevel(width=400, height=180)
        egv_send.grab_set() # Use grab_set to prevent user input in the main window during calculations
        egv_send.resizable(0,0)
        egv_send.title('EGV Send')
        egv_send.iconname(""EGV Send"")

        D_Yloc  = 0
        D_dY = 28
        xd_label_L = 12

        w_label=150
        w_entry=40
        w_units=35
        xd_entry_L=xd_label_L+w_label+10
        xd_units_L=xd_entry_L+w_entry+5

        D_Yloc=D_Yloc+D_dY
        self.Label_Preprocess_CRC = Label(egv_send,text=""Preprocess CRC Data"")
        self.Label_Preprocess_CRC.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Checkbutton_Preprocess_CRC = Checkbutton(egv_send,text="""", anchor=W)
        self.Checkbutton_Preprocess_CRC.place(x=xd_entry_L, y=D_Yloc, width=75, height=23)
        self.Checkbutton_Preprocess_CRC.configure(variable=self.pre_pr_crc)

        D_Yloc=D_Yloc+D_dY
        self.Label_N_EGV_Passes = Label(egv_send,text=""Number of EGV Passes"")
        self.Label_N_EGV_Passes.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)
        self.Entry_N_EGV_Passes = Entry(egv_send,width=""15"")
        self.Entry_N_EGV_Passes.place(x=xd_entry_L, y=D_Yloc, width=w_entry, height=23)
        self.Entry_N_EGV_Passes.configure(textvariable=self.n_egv_passes)
        self.n_egv_passes.trace_variable(""w"", self.Entry_N_EGV_Passes_Callback)
        self.entry_set(self.Entry_N_EGV_Passes,self.Entry_N_EGV_Passes_Check(),2)

        D_Yloc=D_Yloc+D_dY
        font_entry_width=215
        self.Label_Inkscape_Path = Label(egv_send,text=""EGV File:"")
        self.Label_Inkscape_Path.place(x=xd_label_L, y=D_Yloc, width=w_label, height=21)

        EGV_Name = os.path.basename(EGV_filename)
        self.Label_Inkscape_Path = Label(egv_send,text=EGV_Name,anchor=""w"") #,bg=""yellow"")
        self.Label_Inkscape_Path.place(x=xd_entry_L, y=D_Yloc, width=200, height=21,anchor=""nw"")
        
        ## Buttons ##
        egv_send.update_idletasks()
        Ybut=int(egv_send.winfo_height())-30
        Xbut=int(egv_send.winfo_width()/2)

        self.EGV_Close = Button(egv_send,text=""Cancel"")
        self.EGV_Close.place(x=Xbut, y=Ybut, width=130, height=30, anchor=""e"")
        self.EGV_Close.bind(""<ButtonRelease-1>"", self.Close_Current_Window_Click)

        def Close_and_Send_Click():
            win_id=self.grab_current()
            win_id.destroy()
            self.Open_EGV(EGV_filename, n_passes=int( float(self.n_egv_passes.get()) ))
            
        self.EGV_Send = Button(egv_send,text=""Send EGV Data"",command=Close_and_Send_Click)
        self.EGV_Send.place(x=Xbut, y=Ybut, width=130, height=30, anchor=""w"")
        ################################################################################
        
        
################################################################################
#             Function for outputting messages to different locations          #
#            depending on what options are enabled                             #
################################################################################
def fmessage(text,newline=True):
    global QUIET
    if (not QUIET):
        if newline==True:
            try:
                sys.stdout.write(text)
                sys.stdout.write(""\n"")
                debug_message(traceback.format_exc())
            except:
                debug_message(traceback.format_exc())
                pass
        else:
            try:
                sys.stdout.write(text)
                debug_message(traceback.format_exc())
            except:
                debug_message(traceback.format_exc())
                pass

################################################################################
#                               Message Box                                    #
################################################################################
def message_box(title,message):
    title = ""%s (K40 Whisperer V%s)"" %(title,version)
    if VERSION == 3:
        tkinter.messagebox.showinfo(title,message)
    else:
        tkMessageBox.showinfo(title,message)
        pass

################################################################################
#                          Message Box ask OK/Cancel                           #
################################################################################
def message_ask_ok_cancel(title, mess):
    if VERSION == 3:
        result=tkinter.messagebox.askokcancel(title, mess)
    else:
        result=tkMessageBox.askokcancel(title, mess)
    return result

################################################################################
#                         Debug Message Box                                    #
################################################################################
def debug_message(message):
    global DEBUG
    title = ""Debug Message""
    if DEBUG:
        if VERSION == 3:
            tkinter.messagebox.showinfo(title,message)
        else:
            tkMessageBox.showinfo(title,message)
            pass

################################################################################
#                         Choose Units Dialog                                  #
################################################################################
if VERSION < 3:
    import tkSimpleDialog
else:
    import tkinter.simpledialog as tkSimpleDialog

class UnitsDialog(tkSimpleDialog.Dialog):
    def body(self, master):
        self.resizable(0,0)
        self.title('Units')
        self.iconname(""Units"")
        
        self.uom = StringVar()
        self.uom.set(""Millimeters"")

        Label(master, text=""Select DXF Import Units:"").grid(row=0)
        Radio_Units_IN = Radiobutton(master,text=""Inches"",        value=""Inches"")
        Radio_Units_MM = Radiobutton(master,text=""Millimeters"",   value=""Millimeters"")
        Radio_Units_CM = Radiobutton(master,text=""Centimeters"",   value=""Centimeters"")
        
        Radio_Units_IN.grid(row=1, sticky=W)
        Radio_Units_MM.grid(row=2, sticky=W)
        Radio_Units_CM.grid(row=3, sticky=W)

        Radio_Units_IN.configure(variable=self.uom)
        Radio_Units_MM.configure(variable=self.uom)
        Radio_Units_CM.configure(variable=self.uom)

    def apply(self):
        self.result = self.uom.get()
        return 


class toplevel_dummy():
    def winfo_exists(self):
        return False
    
class pxpiDialog(tkSimpleDialog.Dialog):
        
    def __init__(self,
                 parent,
                 units = ""mm"",
                 SVG_Size            =None,
                 SVG_ViewBox         =None,
                 SVG_inkscape_version=None):

        self.result = None
        self.svg_pxpi   = StringVar()
        self.other      = StringVar()
        self.svg_width  = StringVar()
        self.svg_height = StringVar()
        self.svg_units  = StringVar()
        self.fixed_size = False
        self.svg_units.set(units)
        if units==""mm"":
            self.scale=1.0
        else:
            self.scale=1/25.4

        
        ###################################
        ##       Set initial pxpi          #
        ###################################
        pxpi = 72.0
        if SVG_inkscape_version != None:
            if SVG_inkscape_version >=.92:
                pxpi = 96.0
            else:
                pxpi = 90.0
  
        self.svg_pxpi.set(""%d""%(pxpi))
        self.other.set(""%d""%(pxpi))

        ###################################
        ##       Set minx/miny            #
        ###################################
        if SVG_ViewBox!=None and SVG_ViewBox[0]!=None and SVG_ViewBox[1]!=None:
            self.minx_pixels = SVG_ViewBox[0]
            self.miny_pixels = SVG_ViewBox[1]
        else:
            self.minx_pixels = 0.0
            self.miny_pixels = 0.0
            
        ###################################
        ##       Set Initial Size         #
        ###################################
        if SVG_Size!=None and SVG_Size[2]!=None and SVG_Size[3]!=None:
            self.width_pixels = SVG_Size[2]
            self.height_pixels = SVG_Size[3]
        elif SVG_ViewBox!=None and SVG_ViewBox[2]!=None and SVG_ViewBox[3]!=None:
            self.width_pixels = SVG_ViewBox[2]
            self.height_pixels = SVG_ViewBox[3]
        else:
            self.width_pixels  = 500.0 
            self.height_pixels = 500.0
        ###################################
        ##       Set Initial Size         #
        ###################################
        if SVG_Size[0]!=None and SVG_Size[1]!=None:
            width  = SVG_Size[0] 
            height = SVG_Size[1]
            self.fixed_size=True
        else:
            width  = self.width_pixels/float(self.svg_pxpi.get())*25.4
            height = self.height_pixels/float(self.svg_pxpi.get())*25.4
            
        self.svg_width.set(""%f"" %(width*self.scale))
        self.svg_height.set(""%f"" %(height*self.scale))
        ###################################
        tkSimpleDialog.Dialog.__init__(self, parent) 


    def body(self, master):
        self.resizable(0,0)
        self.title('SVG Import Scale:')
        self.iconname(""SVG Scale"")
        
        ###########################################################################
        def Entry_custom_Check():
            try:
                value = float(self.other.get())
                if  value <= 0.0:
                    return 2 # Value is invalid number
            except:
                return 3     # Value not a number
            return 0         # Value is a valid number
        def Entry_custom_Callback(varName, index, mode):
            if Entry_custom_Check() > 0:
                Entry_Custom_pxpi.configure( bg = 'red' )
            else:
                Entry_Custom_pxpi.configure( bg = 'white' )
                pxpi = float(self.other.get())
                width  = self.width_pixels/pxpi*25.4
                height = self.height_pixels/pxpi*25.4
                if self.fixed_size:
                    pass
                else:
                    Set_Value(width=width*self.scale,height=height*self.scale)
                self.svg_pxpi.set(""custom"")
        ###################################################
        def Entry_Width_Check():
            try:
                value = float(self.svg_width.get())/self.scale
                if  value <= 0.0:
                    return 2 # Value is invalid number
            except:
                return 3     # Value not a number
            return 0         # Value is a valid number
        def Entry_Width_Callback(varName, index, mode):
            if Entry_Width_Check() > 0:
                Entry_Custom_Width.configure( bg = 'red' )
            else:
                Entry_Custom_Width.configure( bg = 'white' )
                width = float(self.svg_width.get())/self.scale
                pxpi = self.width_pixels*25.4/width
                height = self.height_pixels/pxpi*25.4
                Set_Value(other=pxpi,height=height*self.scale)
                self.svg_pxpi.set(""custom"")
        ###################################################
        def Entry_Height_Check():
            try:
                value = float(self.svg_height.get())
                if  value <= 0.0:
                    return 2 # Value is invalid number
            except:
                return 3     # Value not a number
            return 0         # Value is a valid number
        def Entry_Height_Callback(varName, index, mode):
            if Entry_Height_Check() > 0:
                Entry_Custom_Height.configure( bg = 'red' )
            else:
                Entry_Custom_Height.configure( bg = 'white' )
                height = float(self.svg_height.get())/self.scale
                pxpi = self.height_pixels*25.4/height
                width = self.width_pixels/pxpi*25.4
                Set_Value(other=pxpi,width=width*self.scale)
                self.svg_pxpi.set(""custom"")
        ###################################################       
        def SVG_pxpi_callback(varName, index, mode):
            if self.svg_pxpi.get() == ""custom"":
                try:
                    pxpi=float(self.other.get())
                except:
                    pass
            else:
                pxpi=float(self.svg_pxpi.get())
                width  = self.width_pixels/pxpi*25.4
                height = self.height_pixels/pxpi*25.4
                if self.fixed_size:
                    Set_Value(other=pxpi)
                else:
                    Set_Value(other=pxpi,width=width*self.scale,height=height*self.scale)
                
        ###########################################################################
                    
        def Set_Value(other=None,width=None,height=None):
            self.svg_pxpi.trace_vdelete(""w"",self.trace_id_svg_pxpi)
            self.other.trace_vdelete(""w"",self.trace_id_pxpi)
            self.svg_width.trace_vdelete(""w"",self.trace_id_width)
            self.svg_height.trace_vdelete(""w"",self.trace_id_height)
            self.update_idletasks()
            
            if other != None:
                self.other.set(""%f"" %(other))
            if width != None:
                self.svg_width.set(""%f"" %(width))
            if height != None:
                self.svg_height.set(""%f"" %(height))
            
            self.trace_id_svg_pxpi = self.svg_pxpi.trace_variable(""w"", SVG_pxpi_callback)
            self.trace_id_pxpi     = self.other.trace_variable(""w"", Entry_custom_Callback)
            self.trace_id_width   = self.svg_width.trace_variable(""w"", Entry_Width_Callback)
            self.trace_id_height  = self.svg_height.trace_variable(""w"", Entry_Height_Callback)
            self.update_idletasks()
            
        ###########################################################################
        t0=""This dialog opens if the SVG file you are opening\n""
        t1=""does not contain enough information to determine\n""
        t2=""the intended physical size of the design.\n""
        t3=""Select an SVG Import Scale:\n""
        Title_Text0 = Label(master, text=t0+t1+t2, anchor=W)
        Title_Text1 = Label(master, text=t3, anchor=W)
        
        Radio_SVG_pxpi_96   = Radiobutton(master,text="" 96 units/in"", value=""96"")
        Label_SVG_pxpi_96   = Label(master,text=""(File saved with Inkscape v0.92 or newer)"", anchor=W)
        
        Radio_SVG_pxpi_90   = Radiobutton(master,text="" 90 units/in"", value=""90"")
        Label_SVG_pxpi_90   = Label(master,text=""(File saved with Inkscape v0.91 or older)"", anchor=W)
        
        Radio_SVG_pxpi_72   = Radiobutton(master,text="" 72 units/in"", value=""72"")
        Label_SVG_pxpi_72   = Label(master,text=""(File saved with Adobe Illustrator)"", anchor=W)

        Radio_Res_Custom = Radiobutton(master,text="" Custom:"", value=""custom"")
        Bottom_row       = Label(master, text="" "")
        

        Entry_Custom_pxpi   = Entry(master,width=""10"")
        Entry_Custom_pxpi.configure(textvariable=self.other)
        Label_pxpi_units =  Label(master,text=""units/in"", anchor=W)
        self.trace_id_pxpi = self.other.trace_variable(""w"", Entry_custom_Callback)

        Label_Width =  Label(master,text=""Width"", anchor=W)
        Entry_Custom_Width   = Entry(master,width=""10"")
        Entry_Custom_Width.configure(textvariable=self.svg_width)
        Label_Width_units =  Label(master,textvariable=self.svg_units, anchor=W)
        self.trace_id_width = self.svg_width.trace_variable(""w"", Entry_Width_Callback)

        Label_Height =  Label(master,text=""Height"", anchor=W)
        Entry_Custom_Height   = Entry(master,width=""10"")
        Entry_Custom_Height.configure(textvariable=self.svg_height)
        Label_Height_units =  Label(master,textvariable=self.svg_units, anchor=W)
        self.trace_id_height = self.svg_height.trace_variable(""w"", Entry_Height_Callback)

        if self.fixed_size == True:
             Entry_Custom_Width.configure(state=""disabled"")
             Entry_Custom_Height.configure(state=""disabled"")
        ###########################################################################
        rn=0
        Title_Text0.grid(row=rn,column=0,columnspan=5, sticky=W)
        
        rn=rn+1
        Title_Text1.grid(row=rn,column=0,columnspan=5, sticky=W)

        rn=rn+1
        Radio_SVG_pxpi_96.grid(    row=rn, sticky=W)
        Label_SVG_pxpi_96.grid(    row=rn, column=1,columnspan=50, sticky=W)

        rn=rn+1
        Radio_SVG_pxpi_90.grid(    row=rn, sticky=W)
        Label_SVG_pxpi_90.grid(    row=rn, column=1,columnspan=50, sticky=W)
        
        rn=rn+1
        Radio_SVG_pxpi_72.grid(    row=rn, column=0, sticky=W)
        Label_SVG_pxpi_72.grid(    row=rn, column=1,columnspan=50, sticky=W)
        
        rn=rn+1
        Radio_Res_Custom.grid(    row=rn, column=0, sticky=W)
        Entry_Custom_pxpi.grid(    row=rn, column=1, sticky=E)
        Label_pxpi_units.grid(     row=rn, column=2, sticky=W)
        
        rn=rn+1
        Label_Width.grid(         row=rn, column=0, sticky=E)
        Entry_Custom_Width.grid(  row=rn, column=1, sticky=E)
        Label_Width_units.grid(   row=rn, column=2, sticky=W)

        rn=rn+1
        Label_Height.grid(        row=rn, column=0, sticky=E)
        Entry_Custom_Height.grid( row=rn, column=1, sticky=E)
        Label_Height_units.grid(  row=rn, column=2, sticky=W)

        rn=rn+1
        Bottom_row.grid(row=rn,columnspan=50)

        Radio_SVG_pxpi_96.configure  (variable=self.svg_pxpi)
        Radio_SVG_pxpi_90.configure  (variable=self.svg_pxpi)
        Radio_SVG_pxpi_72.configure  (variable=self.svg_pxpi)
        Radio_Res_Custom.configure  (variable=self.svg_pxpi)
        self.trace_id_svg_pxpi = self.svg_pxpi.trace_variable(""w"", SVG_pxpi_callback)
        ###########################################################################
    
    def apply(self):
        width  = float(self.svg_width.get())/self.scale
        height = float(self.svg_height.get())/self.scale
        pxpi    = float(self.other.get())
        viewbox = [self.minx_pixels, self.miny_pixels, width/25.4*pxpi, height/25.4*pxpi]
        self.result = pxpi,viewbox
        return 
        
################################################################################
#                          Startup Application                                 #
################################################################################
    
root = Tk()
app = Application(root)
app.master.title(title_text)
app.master.iconname(""K40"")
app.master.minsize(800,560)
app.master.geometry(""800x560"")
try:
    try:
        import tkFont
        default_font = tkFont.nametofont(""TkDefaultFont"")
    except:
        import tkinter.font
        default_font = tkinter.font.nametofont(""TkDefaultFont"")

    default_font.configure(size=9)
    default_font.configure(family='arial')
    #print(default_font.cget(""size""))
    #print(default_font.cget(""family""))
except:
    debug_message(""Font Set Failed."")

################################## Set Icon  ########################################
Icon_Set=False

try:
    #debug_message(""Icon set %s"" %(sys.argv[0]))
    root.iconbitmap(default=""emblem"")
    #debug_message(""Icon set worked %s"" %(sys.argv[0]))
    Icon_Set=True
except:
    debug_message(traceback.format_exc())
    Icon_Set=False
        
if not Icon_Set:
    try:
        scorch_ico_B64=b'R0lGODlhEAAQAIYAAA\
        AAABAQEBYWFhcXFxsbGyUlJSYmJikpKSwsLC4uLi8vLzExMTMzMzc3Nzg4ODk5OTs7Oz4+PkJCQkRERE\
        VFRUtLS0xMTE5OTlNTU1dXV1xcXGBgYGVlZWhoaGtra3FxcXR0dHh4eICAgISEhI+Pj5mZmZ2dnaKioq\
        Ojo62tra6urrS0tLi4uLm5ub29vcLCwsbGxsjIyMzMzM/Pz9PT09XV1dbW1tjY2Nzc3OHh4eLi4uXl5e\
        fn5+jo6Ovr6+/v7/Hx8fLy8vT09PX19fn5+fv7+/z8/P7+/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAEKAEkALAAAAAAQABAAQAj/AJMIFBhBQYAACRIkWbgwAA\
        4kEFEECACAxBAkGH8ESEKgBZIiAIQECBAjAA8kNwIkScKgQhAkRggAIJACCZIaJxgk2clgAY4OAAoEAO\
        ABCIIDSZIwkIHEBw0YFAAA6IGDCBIkLAhMyICka9cAKZCIRTLEBIMkaA0MSNGjSBEVIgpESEK3LgMCI1\
        aAWCFDA4EDSQInwaDACBEAImLwCAFARw4HFJJcgGADyZEAL3YQcMGBBpIjHx4EeIGkRoMFJgakWADABx\
        IkPwIgcIGkdm0AMJDo1g3jQBIBRZAINyKAwxEkyHEUSMIcwYYbEgwYmQGgyI8SD5Jo327hgIIAAQ5cBs\
        CQpHySgAA7'
        icon_im =PhotoImage(data=scorch_ico_B64, format='gif')
        root.call('wm', 'iconphoto', root._w, '-default', icon_im)
    except:
        pass
#####################################################################################


if LOAD_MSG != """":
    message_box(""K40 Whisperer"",LOAD_MSG)

opts, args = None, None
try:
    opts, args = getopt.getopt(sys.argv[1:], ""hpd"",[""help"", ""pi"", ""debug""])
except:
    print('Unable interpret command line options')
    sys.exit()

for option, value in opts:
    if option in ('-h','--help'):
        print(' ')
        print('Usage: python k40_whisperer.py [-h -p]')
        print('-h    : print this help (also --help)')
        print('-p    : Small screen option (for small raspberry pi display) (also --pi)')
        sys.exit()
    elif option in ('-p','--pi'):
        print(""pi mode"")
        app.master.minsize(480,320)
        app.master.geometry(""480x320"")
    elif option in ('-d','--debug'):
        DEBUG=True

if DEBUG:
    import inspect
debug_message(""Debuging is turned on."")
    
root.mainloop()
"
PbVyxu0u,Unlocking the A Peak Global $30 Forex No Deposit Bonus: A Gateway to Risk-Free Trading,reviewbrokers,PHP,Monday 19th of February 2024 11:56:14 AM CDT,https://www.reviewbrokers.net/unlocking-the-a-peak-global-30-forex-no-deposit-bonus-a-gateway-to-risk-free-trading/
r4wmcLZN,VMProtect,AncientX,C#,Monday 19th of February 2024 11:53:03 AM CDT,/MBvkYVgZ7Qbt8zSgk3smg==
MHqrv2yb,Explore Forex Trading Risk-Free with a $30 No Deposit Bonus from Just Global Markets,fxvnpro,PHP,Monday 19th of February 2024 11:23:33 AM CDT,https://www.fxvnpro.com/explore-forex-trading-risk-free-with-a-30-no-deposit-bonus-from-just-global-markets/
NJZDqVfx,Untitled,Rofyda_Elghadban1,C++,Monday 19th of February 2024 11:07:19 AM CDT," void solve(){
  int n,counter=0;
  cin>>n;
  vector<ll>v(n);
  map<int,int>mp;
  cin(v);
  sort(all(v));
  for(int i=0;i<n;i++){
    if(v[i]<=0){
      counter=0;
      mp[counter]++;
    }else if(v[i]<=1&&v[i]>0){
      counter=1;
      mp[counter]++;
    }else if(v[i]<=3&&v[i]>1){
      counter=2;
      mp[counter]++;
    }else if(v[i]<=7&&v[i]>3){
      counter=3;
      mp[counter]++;
    }else if(v[i]<=15&&v[i]>7){
      counter=4;
      mp[counter]++;
    }else if(v[i]<=31&&v[i]>15){
      counter=5;
      mp[counter]++;
    }else if(v[i]<=63&&v[i]>31){
      counter=6;
      mp[counter]++;
    }else if(v[i]<=127&&v[i]>63){
      counter=7;
      mp[counter]++;
    }else if(v[i]<=255&&v[i]>127){
      counter=8;
      mp[counter]++;
    }else if(v[i]<=511&&v[i]>255){
      counter=9;
      mp[counter]++;
    }else if(v[i]<=1023&&v[i]>511){
      counter=10;
      mp[counter]++;
    }else if(v[i]<=2047&&v[i]>1023){
      counter=11;
      mp[counter]++;
    }else if(v[i]<=4095&&v[i]>2047){
      counter=12;
      mp[counter]++;
    }else if(v[i]<=8191&&v[i]>4095){
      counter=13;
      mp[counter]++;
    }else if(v[i]<=16383&&v[i]>8191){
      counter=14;
      mp[counter]++;
    }else if(v[i]<=32767&&v[i]>16383){
      counter=15;
      mp[counter]++;
    }else if(v[i]<=65535&&v[i]>32767){
      counter=16;
      mp[counter]++;
    }else if(v[i]<=131071&&v[i]>65535){
      counter=17;
      mp[counter]++;
    }else if(v[i]<=262143&&v[i]>131071){
      counter=18;
      mp[counter]++;
    }else if(v[i]<=524287&&v[i]>262143){
      counter=19;
      mp[counter]++;
    }else if(v[i]<=1048575&&v[i]>524287){
      counter=20;
      mp[counter]++;
    }else if(v[i]<=2097151&&v[i]>1048575){
      counter=21;
      mp[counter]++;
    }else if(v[i]<=4194303&&v[i]>2097151){
      counter=22;
      mp[counter]++;
    }else if(v[i]<=8388607&&v[i]>4194303){
      counter=23;
      mp[counter]++;
    }else if(v[i]<=16777215&&v[i]>8388607){
      counter=24;
      mp[counter]++;
    }else if(v[i]<=33554431&&v[i]>16777215){
      counter=25;
      mp[counter]++;
    }else if(v[i]<=67108863&&v[i]>33554431){
      counter=26;
      mp[counter]++;
    }else if(v[i]<=134217727&&v[i]>67108863){
      counter=27;
      mp[counter]++;
    }else if(v[i]<=268435455&&v[i]>134217727){
      counter=28;
      mp[counter]++;
    }else if(v[i]<=536870911&&v[i]>268435455){
      counter=29;
      mp[counter]++;
    }else if(v[i]<=1073741823&&v[i]>536870911){
      counter=30;
      mp[counter]++;
    }else if(v[i]<=2147483647&&v[i]>1073741823){
      counter=31;
      mp[counter]++;
    }
  }
  for(auto i:mp){
    cout<<i.first<<"" ""<<i.second<<""\n"";
  }
  cout<<""\n"";
 }"
vJuyACg8,TautologyCheckerHaskell,VladNitu,Haskell,Monday 19th of February 2024 10:27:25 AM CDT,"import Data.List (nub) -- The function 'nub' removes duplicates from a list

data Prop = Const Bool
          | Var Char
          | Not Prop
          | And Prop Prop
          | Imply Prop Prop
          | Or Prop Prop
          | Equiv Prop Prop
  deriving (Show)
          
type Assoc k v = [(k,v)]
          
find :: (Eq k) => k -> Assoc k v -> v
find k [] = error ""Key not found!""
find k ((k',x):xs)
  | k == k'   = x
  | otherwise = find k xs

type Subst = Assoc Char Bool

eval :: Subst -> Prop -> Bool
eval _ (Const b)   = b
eval s (Var x)     = find x s
eval s (Not p)     = not (eval s p)
eval s (And p q)   = eval s p && eval s q
eval s (Imply p q) = eval s p <= eval s q
eval s (Or p q) = eval s p || eval s q
eval s (Equiv p q) = eval s p == eval s q

vars :: Prop -> [Char]
vars (Const _)   = []
vars (Var x)     = [x]
vars (Not p)     = vars p
vars (And p q)   = vars p ++ vars q
vars (Imply p q) = vars p ++ vars q
vars (Or p q) = vars p ++ vars q
vars (Equiv p q) = vars p ++ vars q


bools :: Int -> [[Bool]]
bools 0       = [[]]
bools n | n>0 = map (False:) bss ++ map (True:) bss
  where bss = bools (n-1)
  
substs :: Prop -> [Subst]
substs p = map (zip vs) (bools (length vs))
  where vs = nub (vars p)
  
isTaut :: Prop -> Bool
isTaut p = and [eval s p | s <- substs p] 


isSat :: Prop -> Maybe Subst
isSat p = if maybe then Just (head [s | s <- substs p, eval s p]) else Nothing
  where maybe =  or [eval s p | s <- substs p] 
"
Pd76H5XN,Nigerian scammers [19-2-2/2024],bombaires,AIMMS,Monday 19th of February 2024 09:52:52 AM CDT,"<a href=""mailto:info@lpowellfoundation.com"">info@lpowellfoundation.com</a>
<a href=""mailto:marktuckerreall@gmail.com"">marktuckerreall@gmail.com</a>
<a href=""mailto:m.a.rk.tu.c.ke.r.r.e.a.ll@gmail.com"">m.a.rk.tu.c.ke.r.r.e.a.ll@gmail.com</a>
<a href=""mailto:markt.uc.k.e.rre.all@gmail.com"">markt.uc.k.e.rre.all@gmail.com</a>
<a href=""mailto:m.a.rk.t.u.c.ke.r.r.eal.l@gmail.com"">m.a.rk.t.u.c.ke.r.r.eal.l@gmail.com</a>
<a href=""mailto:ma.rktu.cke.rr.e.all@gmail.com"">ma.rktu.cke.rr.e.all@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.c.ke.r.real.l@gmail.com"">m.a.r.k.tu.c.ke.r.real.l@gmail.com</a>
<a href=""mailto:ma.rkt.u.c.k.errea.l.l@gmail.com"">ma.rkt.u.c.k.errea.l.l@gmail.com</a>
<a href=""mailto:mark.t.u.cke.r.re.a.ll@gmail.com"">mark.t.u.cke.r.re.a.ll@gmail.com</a>
<a href=""mailto:m.a.rk.tu.c.ker.re.al.l@gmail.com"">m.a.rk.tu.c.ker.re.al.l@gmail.com</a>
<a href=""mailto:m.a.rktuc.k.e.r.r.e.a.l.l@gmail.com"">m.a.rktuc.k.e.r.r.e.a.l.l@gmail.com</a>
<a href=""mailto:ma.r.ktuc.ker.r.e.a.ll@gmail.com"">ma.r.ktuc.ker.r.e.a.ll@gmail.com</a>
<a href=""mailto:m.a.rk.tucke.r.real.l@gmail.com"">m.a.rk.tucke.r.real.l@gmail.com</a>
<a href=""mailto:mar.kt.u.ck.e.r.r.e.all@gmail.com"">mar.kt.u.ck.e.r.r.e.all@gmail.com</a>
<a href=""mailto:m.ark.t.ucke.rre.a.l.l@gmail.com"">m.ark.t.ucke.rre.a.l.l@gmail.com</a>
<a href=""mailto:mar.kt.ucker.r.eall@gmail.com"">mar.kt.ucker.r.eall@gmail.com</a>
<a href=""mailto:ma.rk.tuckerr.e.a.l.l@gmail.com"">ma.rk.tuckerr.e.a.l.l@gmail.com</a>
<a href=""mailto:ma.r.k.t.uc.k.e.r.real.l@gmail.com"">ma.r.k.t.uc.k.e.r.real.l@gmail.com</a>
<a href=""mailto:ma.r.ktuc.k.e.r.r.eal.l@gmail.com"">ma.r.ktuc.k.e.r.r.eal.l@gmail.com</a>
<a href=""mailto:m.a.r.ktu.c.k.er.r.eall@gmail.com"">m.a.r.ktu.c.k.er.r.eall@gmail.com</a>
<a href=""mailto:mar.ktu.ck.er.re.all@gmail.com"">mar.ktu.ck.er.re.all@gmail.com</a>
<a href=""mailto:m.arktuc.ke.rr.eal.l@gmail.com"">m.arktuc.ke.rr.eal.l@gmail.com</a>
<a href=""mailto:m.arkt.u.c.ke.r.r.e.al.l@gmail.com"">m.arkt.u.c.ke.r.r.e.al.l@gmail.com</a>
<a href=""mailto:m.ar.ktuck.err.eal.l@gmail.com"">m.ar.ktuck.err.eal.l@gmail.com</a>
<a href=""mailto:ma.r.k.tu.c.ke.rreall@gmail.com"">ma.r.k.tu.c.ke.rreall@gmail.com</a>
<a href=""mailto:m.ar.kt.u.c.kerr.eal.l@gmail.com"">m.ar.kt.u.c.kerr.eal.l@gmail.com</a>
<a href=""mailto:m.arktuckerreal.l@gmail.com"">m.arktuckerreal.l@gmail.com</a>
<a href=""mailto:ma.rk.t.u.c.ke.r.re.a.l.l@gmail.com"">ma.rk.t.u.c.ke.r.re.a.l.l@gmail.com</a>
<a href=""mailto:mar.k.t.u.c.ker.r.e.all@gmail.com"">mar.k.t.u.c.ker.r.e.all@gmail.com</a>
<a href=""mailto:ma.rktu.c.ke.rr.e.al.l@gmail.com"">ma.rktu.c.ke.rr.e.al.l@gmail.com</a>
<a href=""mailto:m.arkt.u.ck.er.re.all@gmail.com"">m.arkt.u.ck.er.re.all@gmail.com</a>
<a href=""mailto:ma.rk.tu.cker.re.a.ll@gmail.com"">ma.rk.tu.cker.re.a.ll@gmail.com</a>
<a href=""mailto:m.a.r.ktu.cke.rreal.l@gmail.com"">m.a.r.ktu.cke.rreal.l@gmail.com</a>
<a href=""mailto:m.ar.kt.ucke.r.r.e.all@gmail.com"">m.ar.kt.ucke.r.r.e.all@gmail.com</a>
<a href=""mailto:mar.k.t.uc.kerr.e.al.l@gmail.com"">mar.k.t.uc.kerr.e.al.l@gmail.com</a>
<a href=""mailto:m.a.rktuck.e.r.re.a.l.l@gmail.com"">m.a.rktuck.e.r.re.a.l.l@gmail.com</a>
<a href=""mailto:ma.r.ktucke.rr.e.al.l@gmail.com"">ma.r.ktucke.rr.e.al.l@gmail.com</a>
<a href=""mailto:m.ar.ktu.ck.e.r.real.l@gmail.com"">m.ar.ktu.ck.e.r.real.l@gmail.com</a>
<a href=""mailto:m.ark.tu.ckerr.eall@gmail.com"">m.ark.tu.ckerr.eall@gmail.com</a>
<a href=""mailto:marktu.cker.rea.ll@gmail.com"">marktu.cker.rea.ll@gmail.com</a>
<a href=""mailto:m.ar.k.tu.ck.e.rre.al.l@gmail.com"">m.ar.k.tu.ck.e.rre.al.l@gmail.com</a>
<a href=""mailto:ma.rk.tuc.k.err.eal.l@gmail.com"">ma.rk.tuc.k.err.eal.l@gmail.com</a>
<a href=""mailto:m.arkt.uck.e.rr.e.a.l.l@gmail.com"">m.arkt.uck.e.rr.e.a.l.l@gmail.com</a>
<a href=""mailto:markt.u.cke.r.real.l@gmail.com"">markt.u.cke.r.real.l@gmail.com</a>
<a href=""mailto:m.a.r.kt.uc.k.er.re.al.l@gmail.com"">m.a.r.kt.uc.k.er.re.al.l@gmail.com</a>
<a href=""mailto:ma.r.kt.uc.k.er.r.eall@gmail.com"">ma.r.kt.uc.k.er.r.eall@gmail.com</a>
<a href=""mailto:m.a.rktu.c.k.erre.all@gmail.com"">m.a.rktu.c.k.erre.all@gmail.com</a>
<a href=""mailto:markt.uck.err.e.al.l@gmail.com"">markt.uck.err.e.al.l@gmail.com</a>
<a href=""mailto:ma.rk.t.uck.e.r.real.l@gmail.com"">ma.rk.t.uck.e.r.real.l@gmail.com</a>
<a href=""mailto:m.a.rktu.c.k.e.rr.e.al.l@gmail.com"">m.a.rktu.c.k.e.rr.e.al.l@gmail.com</a>
<a href=""mailto:m.ar.ktu.ckerr.ea.l.l@gmail.com"">m.ar.ktu.ckerr.ea.l.l@gmail.com</a>
<a href=""mailto:m.ark.t.uc.k.err.eall@gmail.com"">m.ark.t.uc.k.err.eall@gmail.com</a>
<a href=""mailto:mark.t.u.cker.re.a.l.l@gmail.com"">mark.t.u.cker.re.a.l.l@gmail.com</a>
<a href=""mailto:m.arktu.ck.err.e.a.ll@gmail.com"">m.arktu.ck.err.e.a.ll@gmail.com</a>
<a href=""mailto:m.a.rk.t.ucke.r.re.a.ll@gmail.com"">m.a.rk.t.ucke.r.re.a.ll@gmail.com</a>
<a href=""mailto:mar.k.tuck.er.r.e.al.l@gmail.com"">mar.k.tuck.er.r.e.al.l@gmail.com</a>
<a href=""mailto:ma.rk.t.uc.k.err.ea.ll@gmail.com"">ma.rk.t.uc.k.err.ea.ll@gmail.com</a>
<a href=""mailto:m.a.r.ktu.c.ke.r.reall@gmail.com"">m.a.r.ktu.c.ke.r.reall@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.c.k.e.r.re.all@gmail.com"">m.a.r.k.tu.c.k.e.r.re.all@gmail.com</a>
<a href=""mailto:m.ark.tu.c.k.err.e.al.l@gmail.com"">m.ark.tu.c.k.err.e.al.l@gmail.com</a>
<a href=""mailto:mar.ktu.c.k.er.r.e.all@gmail.com"">mar.ktu.c.k.er.r.e.all@gmail.com</a>
<a href=""mailto:mar.kt.uc.k.e.rr.e.a.ll@gmail.com"">mar.kt.uc.k.e.rr.e.a.ll@gmail.com</a>
<a href=""mailto:m.ar.kt.u.ck.e.rre.a.ll@gmail.com"">m.ar.kt.u.ck.e.rre.a.ll@gmail.com</a>
<a href=""mailto:ma.r.kt.u.c.k.e.r.re.a.l.l@gmail.com"">ma.r.kt.u.c.k.e.r.re.a.l.l@gmail.com</a>
<a href=""mailto:m.a.r.kt.u.ck.e.rr.eal.l@gmail.com"">m.a.r.kt.u.ck.e.rr.eal.l@gmail.com</a>
<a href=""mailto:ma.rkt.uck.e.rr.eall@gmail.com"">ma.rkt.uck.e.rr.eall@gmail.com</a>
<a href=""mailto:ma.rkt.uc.k.erreall@gmail.com"">ma.rkt.uc.k.erreall@gmail.com</a>
<a href=""mailto:m.ark.t.uc.k.e.r.r.eall@gmail.com"">m.ark.t.uc.k.e.r.r.eall@gmail.com</a>
<a href=""mailto:m.ar.k.tu.ck.er.rea.l.l@gmail.com"">m.ar.k.tu.ck.er.rea.l.l@gmail.com</a>
<a href=""mailto:mar.k.t.u.c.k.e.rre.a.ll@gmail.com"">mar.k.t.u.c.k.e.rre.a.ll@gmail.com</a>
<a href=""mailto:markt.uck.er.r.ea.ll@gmail.com"">markt.uck.er.r.ea.ll@gmail.com</a>
<a href=""mailto:m.a.r.kt.ucke.r.r.ea.l.l@gmail.com"">m.a.r.kt.ucke.r.r.ea.l.l@gmail.com</a>
<a href=""mailto:mark.tu.c.kerr.ea.ll@gmail.com"">mark.tu.c.kerr.ea.ll@gmail.com</a>
<a href=""mailto:ma.rk.t.uc.ker.r.ea.l.l@gmail.com"">ma.rk.t.uc.ker.r.ea.l.l@gmail.com</a>
<a href=""mailto:markt.u.cke.r.r.e.a.l.l@gmail.com"">markt.u.cke.r.r.e.a.l.l@gmail.com</a>
<a href=""mailto:m.a.rkt.uck.erre.all@gmail.com"">m.a.rkt.uck.erre.all@gmail.com</a>
<a href=""mailto:m.a.r.kt.uck.e.rre.all@gmail.com"">m.a.r.kt.uck.e.rre.all@gmail.com</a>
<a href=""mailto:mar.kt.u.c.k.e.rr.e.all@gmail.com"">mar.kt.u.c.k.e.rr.e.all@gmail.com</a>
<a href=""mailto:ma.rk.t.u.cke.rre.al.l@gmail.com"">ma.rk.t.u.cke.rre.al.l@gmail.com</a>
<a href=""mailto:m.a.rk.tu.c.kerr.e.a.l.l@gmail.com"">m.a.rk.tu.c.kerr.e.a.l.l@gmail.com</a>
<a href=""mailto:mar.kt.ucker.r.ea.l.l@gmail.com"">mar.kt.ucker.r.ea.l.l@gmail.com</a>
<a href=""mailto:mar.kt.u.c.ke.rre.a.ll@gmail.com"">mar.kt.u.c.ke.rre.a.ll@gmail.com</a>
<a href=""mailto:mar.k.tuck.er.reall@gmail.com"">mar.k.tuck.er.reall@gmail.com</a>
<a href=""mailto:m.ark.tuckerr.e.a.l.l@gmail.com"">m.ark.tuckerr.e.a.l.l@gmail.com</a>
<a href=""mailto:m.ar.kt.uck.er.r.eall@gmail.com"">m.ar.kt.uck.er.r.eall@gmail.com</a>
<a href=""mailto:m.ar.k.tuck.erre.all@gmail.com"">m.ar.k.tuck.erre.all@gmail.com</a>
<a href=""mailto:m.a.r.ktucke.r.re.all@gmail.com"">m.a.r.ktucke.r.re.all@gmail.com</a>
<a href=""mailto:m.a.rkt.u.c.k.er.re.al.l@gmail.com"">m.a.rkt.u.c.k.er.re.al.l@gmail.com</a>
<a href=""mailto:m.ark.t.uckerr.eall@gmail.com"">m.ark.t.uckerr.eall@gmail.com</a>
<a href=""mailto:ma.r.kt.uc.ker.re.al.l@gmail.com"">ma.r.kt.uc.ker.re.al.l@gmail.com</a>
<a href=""mailto:m.arkt.uckerreall@gmail.com"">m.arkt.uckerreall@gmail.com</a>
<a href=""mailto:m.a.rktu.cker.r.ea.ll@gmail.com"">m.a.rktu.cker.r.ea.ll@gmail.com</a>
<a href=""mailto:ma.rkt.uck.er.rea.l.l@gmail.com"">ma.rkt.uck.er.rea.l.l@gmail.com</a>
<a href=""mailto:mar.k.t.uck.err.e.a.ll@gmail.com"">mar.k.t.uck.err.e.a.ll@gmail.com</a>
<a href=""mailto:m.ar.kt.u.c.ke.r.r.ea.ll@gmail.com"">m.ar.kt.u.c.ke.r.r.ea.ll@gmail.com</a>
<a href=""mailto:m.arktu.c.k.e.rre.al.l@gmail.com"">m.arktu.c.k.e.rre.al.l@gmail.com</a>
<a href=""mailto:m.a.rktuck.e.rre.a.l.l@gmail.com"">m.a.rktuck.e.rre.a.l.l@gmail.com</a>
<a href=""mailto:ma.rktuc.k.err.e.a.ll@gmail.com"">ma.rktuc.k.err.e.a.ll@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.c.ker.re.all@gmail.com"">m.a.r.k.tu.c.ker.re.all@gmail.com</a>
<a href=""mailto:ma.r.k.t.uck.er.re.all@gmail.com"">ma.r.k.t.uck.er.re.all@gmail.com</a>
<a href=""mailto:m.ar.ktucke.r.r.e.all@gmail.com"">m.ar.ktucke.r.r.e.all@gmail.com</a>
<a href=""mailto:m.ark.tu.c.kerr.e.al.l@gmail.com"">m.ark.tu.c.kerr.e.al.l@gmail.com</a>
<a href=""mailto:m.a.rk.t.u.ck.e.r.r.eall@gmail.com"">m.a.rk.t.u.ck.e.r.r.eall@gmail.com</a>
<a href=""mailto:mar.k.t.uc.k.err.ea.l.l@gmail.com"">mar.k.t.uc.k.err.ea.l.l@gmail.com</a>
<a href=""mailto:mark.tu.c.kerre.al.l@gmail.com"">mark.tu.c.kerre.al.l@gmail.com</a>
<a href=""mailto:m.a.r.ktuck.er.r.e.a.ll@gmail.com"">m.a.r.ktuck.er.r.e.a.ll@gmail.com</a>
<a href=""mailto:m.a.r.k.t.u.c.ke.rr.e.a.ll@gmail.com"">m.a.r.k.t.u.c.ke.rr.e.a.ll@gmail.com</a>
<a href=""mailto:m.ark.t.uc.k.err.eal.l@gmail.com"">m.ark.t.uc.k.err.eal.l@gmail.com</a>
<a href=""mailto:ma.r.ktuck.e.rr.eal.l@gmail.com"">ma.r.ktuck.e.rr.eal.l@gmail.com</a>
<a href=""mailto:m.ark.t.u.c.ker.r.eall@gmail.com"">m.ark.t.u.c.ker.r.eall@gmail.com</a>
<a href=""mailto:markt.uc.ke.r.r.e.al.l@gmail.com"">markt.uc.ke.r.r.e.al.l@gmail.com</a>
<a href=""mailto:ma.r.k.tuc.k.err.eall@gmail.com"">ma.r.k.tuc.k.err.eall@gmail.com</a>
<a href=""mailto:m.a.r.k.t.u.c.k.er.r.ea.l.l@gmail.com"">m.a.r.k.t.u.c.k.er.r.ea.l.l@gmail.com</a>
<a href=""mailto:m.a.rkt.u.c.ke.r.r.eall@gmail.com"">m.a.rkt.u.c.ke.r.r.eall@gmail.com</a>
<a href=""mailto:ma.rktuc.ker.r.eall@gmail.com"">ma.rktuc.ker.r.eall@gmail.com</a>
<a href=""mailto:m.a.rktuc.kerre.a.ll@gmail.com"">m.a.rktuc.kerre.a.ll@gmail.com</a>
<a href=""mailto:marktu.c.k.er.re.a.ll@gmail.com"">marktu.c.k.er.re.a.ll@gmail.com</a>
<a href=""mailto:m.a.rkt.u.cke.r.re.al.l@gmail.com"">m.a.rkt.u.cke.r.re.al.l@gmail.com</a>
<a href=""mailto:m.a.r.kt.u.c.k.err.e.all@gmail.com"">m.a.r.kt.u.c.k.err.e.all@gmail.com</a>
<a href=""mailto:mark.t.u.cker.r.e.a.l.l@gmail.com"">mark.t.u.cker.r.e.a.l.l@gmail.com</a>
<a href=""mailto:m.arkt.uc.k.e.r.re.a.ll@gmail.com"">m.arkt.uc.k.e.r.re.a.ll@gmail.com</a>
<a href=""mailto:m.a.rk.t.ucke.rre.a.l.l@gmail.com"">m.a.rk.t.ucke.rre.a.l.l@gmail.com</a>
<a href=""mailto:ma.rk.tuc.k.er.real.l@gmail.com"">ma.rk.tuc.k.er.real.l@gmail.com</a>
<a href=""mailto:ma.rkt.ucke.rreall@gmail.com"">ma.rkt.ucke.rreall@gmail.com</a>
<a href=""mailto:mark.t.uck.err.e.all@gmail.com"">mark.t.uck.err.e.all@gmail.com</a>
<a href=""mailto:m.ar.k.tuck.er.real.l@gmail.com"">m.ar.k.tuck.er.real.l@gmail.com</a>
<a href=""mailto:ma.r.k.t.uc.k.e.rrea.l.l@gmail.com"">ma.r.k.t.uc.k.e.rrea.l.l@gmail.com</a>
<a href=""mailto:ma.r.ktu.c.k.err.ea.ll@gmail.com"">ma.r.ktu.c.k.err.ea.ll@gmail.com</a>
<a href=""mailto:mar.k.t.uc.ke.r.r.eal.l@gmail.com"">mar.k.t.uc.ke.r.r.eal.l@gmail.com</a>
<a href=""mailto:m.arktuckerr.e.a.l.l@gmail.com"">m.arktuckerr.e.a.l.l@gmail.com</a>
<a href=""mailto:mar.ktu.c.kerrea.ll@gmail.com"">mar.ktu.c.kerrea.ll@gmail.com</a>
<a href=""mailto:m.a.rktuc.ke.rr.eall@gmail.com"">m.a.rktuc.ke.rr.eall@gmail.com</a>
<a href=""mailto:m.a.rk.tu.ck.er.r.eall@gmail.com"">m.a.rk.tu.ck.er.r.eall@gmail.com</a>
<a href=""mailto:mar.kt.uc.ker.rea.ll@gmail.com"">mar.kt.uc.ker.rea.ll@gmail.com</a>
<a href=""mailto:m.ar.ktu.c.kerreal.l@gmail.com"">m.ar.ktu.c.kerreal.l@gmail.com</a>
<a href=""mailto:markt.u.ck.err.e.a.l.l@gmail.com"">markt.u.ck.err.e.a.l.l@gmail.com</a>
<a href=""mailto:ma.rkt.uck.e.r.r.ea.ll@gmail.com"">ma.rkt.uck.e.r.r.ea.ll@gmail.com</a>
<a href=""mailto:m.ar.kt.uck.e.r.r.ea.ll@gmail.com"">m.ar.kt.uck.e.r.r.ea.ll@gmail.com</a>
<a href=""mailto:m.ar.k.tu.ck.errea.l.l@gmail.com"">m.ar.k.tu.ck.errea.l.l@gmail.com</a>
<a href=""mailto:ma.rktu.ck.e.r.r.e.al.l@gmail.com"">ma.rktu.ck.e.r.r.e.al.l@gmail.com</a>
<a href=""mailto:ma.rkt.u.c.ke.rrea.l.l@gmail.com"">ma.rkt.u.c.ke.rrea.l.l@gmail.com</a>
<a href=""mailto:m.a.rk.tuc.ke.rr.ea.l.l@gmail.com"">m.a.rk.tuc.ke.rr.ea.l.l@gmail.com</a>
<a href=""mailto:mar.k.t.uck.err.eal.l@gmail.com"">mar.k.t.uck.err.eal.l@gmail.com</a>
<a href=""mailto:m.a.r.k.t.u.c.k.err.e.al.l@gmail.com"">m.a.r.k.t.u.c.k.err.e.al.l@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.c.ke.rre.a.ll@gmail.com"">m.a.r.k.tu.c.ke.rre.a.ll@gmail.com</a>
<a href=""mailto:m.ark.t.u.c.kerr.e.all@gmail.com"">m.ark.t.u.c.kerr.e.all@gmail.com</a>
<a href=""mailto:m.a.rk.t.u.ck.e.r.r.e.a.l.l@gmail.com"">m.a.rk.t.u.ck.e.r.r.e.a.l.l@gmail.com</a>
<a href=""mailto:m.ar.kt.u.c.k.er.r.e.a.ll@gmail.com"">m.ar.kt.u.c.k.er.r.e.a.ll@gmail.com</a>
<a href=""mailto:marktuck.e.rr.eall@gmail.com"">marktuck.e.rr.eall@gmail.com</a>
<a href=""mailto:m.ar.kt.u.c.k.er.re.al.l@gmail.com"">m.ar.kt.u.c.k.er.re.al.l@gmail.com</a>
<a href=""mailto:mark.t.uc.kerre.al.l@gmail.com"">mark.t.uc.kerre.al.l@gmail.com</a>
<a href=""mailto:mar.kt.u.cke.rr.e.a.ll@gmail.com"">mar.kt.u.cke.rr.e.a.ll@gmail.com</a>
<a href=""mailto:marktu.c.ker.r.eall@gmail.com"">marktu.c.ker.r.eall@gmail.com</a>
<a href=""mailto:m.a.r.k.t.uck.err.ea.l.l@gmail.com"">m.a.r.k.t.uck.err.ea.l.l@gmail.com</a>
<a href=""mailto:mark.t.ucke.r.r.eal.l@gmail.com"">mark.t.ucke.r.r.eal.l@gmail.com</a>
<a href=""mailto:ma.rktu.ck.er.r.ea.ll@gmail.com"">ma.rktu.ck.er.r.ea.ll@gmail.com</a>
<a href=""mailto:m.a.rk.tuc.k.er.r.eal.l@gmail.com"">m.a.rk.tuc.k.er.r.eal.l@gmail.com</a>
<a href=""mailto:m.ark.tuc.k.er.re.a.ll@gmail.com"">m.ark.tuc.k.er.re.a.ll@gmail.com</a>
<a href=""mailto:m.a.r.k.t.u.c.ke.rrea.ll@gmail.com"">m.a.r.k.t.u.c.ke.rrea.ll@gmail.com</a>
<a href=""mailto:ma.r.k.tu.ck.e.rr.eal.l@gmail.com"">ma.r.k.tu.ck.e.rr.eal.l@gmail.com</a>
<a href=""mailto:m.a.rktuc.ke.rre.all@gmail.com"">m.a.rktuc.ke.rre.all@gmail.com</a>
<a href=""mailto:ma.rk.tu.c.k.errea.l.l@gmail.com"">ma.rk.tu.c.k.errea.l.l@gmail.com</a>
<a href=""mailto:mar.kt.u.c.ke.r.re.all@gmail.com"">mar.kt.u.c.ke.r.re.all@gmail.com</a>
<a href=""mailto:m.a.rktuc.ke.rr.ea.ll@gmail.com"">m.a.rktuc.ke.rr.ea.ll@gmail.com</a>
<a href=""mailto:ma.r.k.t.uc.k.e.rre.a.ll@gmail.com"">ma.r.k.t.uc.k.e.rre.a.ll@gmail.com</a>
<a href=""mailto:m.a.rkt.uc.k.e.r.real.l@gmail.com"">m.a.rkt.uc.k.e.r.real.l@gmail.com</a>
<a href=""mailto:m.a.rk.t.u.cke.r.re.a.l.l@gmail.com"">m.a.rk.t.u.cke.r.re.a.l.l@gmail.com</a>
<a href=""mailto:m.arktuc.k.e.rr.e.a.l.l@gmail.com"">m.arktuc.k.e.rr.e.a.l.l@gmail.com</a>
<a href=""mailto:m.ark.tu.ck.err.e.a.ll@gmail.com"">m.ark.tu.ck.err.e.a.ll@gmail.com</a>
<a href=""mailto:m.a.r.ktu.ck.e.r.r.e.all@gmail.com"">m.a.r.ktu.ck.e.r.r.e.all@gmail.com</a>
<a href=""mailto:m.a.r.k.t.ucker.r.e.all@gmail.com"">m.a.r.k.t.ucker.r.e.all@gmail.com</a>
<a href=""mailto:mar.ktucke.r.r.e.a.ll@gmail.com"">mar.ktucke.r.r.e.a.ll@gmail.com</a>
<a href=""mailto:ma.rktu.c.ker.r.e.al.l@gmail.com"">ma.rktu.c.ker.r.e.al.l@gmail.com</a>
<a href=""mailto:ma.rkt.u.c.k.e.rr.ea.l.l@gmail.com"">ma.rkt.u.c.k.e.rr.ea.l.l@gmail.com</a>
<a href=""mailto:m.ar.kt.u.c.k.e.rre.a.l.l@gmail.com"">m.ar.kt.u.c.k.e.rre.a.l.l@gmail.com</a>
<a href=""mailto:m.ar.kt.u.c.k.er.r.eall@gmail.com"">m.ar.kt.u.c.k.er.r.eall@gmail.com</a>
<a href=""mailto:m.ar.k.tuc.ke.r.reall@gmail.com"">m.ar.k.tuc.ke.r.reall@gmail.com</a>
<a href=""mailto:m.ar.kt.u.ck.e.r.re.al.l@gmail.com"">m.ar.kt.u.ck.e.r.re.al.l@gmail.com</a>
<a href=""mailto:ma.r.ktuc.ke.r.r.e.all@gmail.com"">ma.r.ktuc.ke.r.r.e.all@gmail.com</a>
<a href=""mailto:markt.uc.ke.rr.ea.l.l@gmail.com"">markt.uc.ke.rr.ea.l.l@gmail.com</a>
<a href=""mailto:mark.t.u.ck.e.r.re.all@gmail.com"">mark.t.u.ck.e.r.re.all@gmail.com</a>
<a href=""mailto:m.ar.ktu.ck.e.rreall@gmail.com"">m.ar.ktu.ck.e.rreall@gmail.com</a>
<a href=""mailto:ma.r.kt.uc.k.erre.all@gmail.com"">ma.r.kt.uc.k.erre.all@gmail.com</a>
<a href=""mailto:m.arkt.uc.ke.rr.ea.ll@gmail.com"">m.arkt.uc.ke.rr.ea.ll@gmail.com</a>
<a href=""mailto:ma.r.kt.u.c.ke.rreal.l@gmail.com"">ma.r.kt.u.c.ke.rreal.l@gmail.com</a>
<a href=""mailto:m.ark.t.uc.ke.r.re.a.l.l@gmail.com"">m.ark.t.uc.ke.r.re.a.l.l@gmail.com</a>
<a href=""mailto:m.a.r.kt.uck.er.r.e.al.l@gmail.com"">m.a.r.kt.uck.er.r.e.al.l@gmail.com</a>
<a href=""mailto:m.a.rktuck.e.rre.a.ll@gmail.com"">m.a.rktuck.e.rre.a.ll@gmail.com</a>
<a href=""mailto:ma.rkt.u.c.k.er.reall@gmail.com"">ma.rkt.u.c.k.er.reall@gmail.com</a>
<a href=""mailto:ma.r.ktuc.k.er.rea.l.l@gmail.com"">ma.r.ktuc.k.er.rea.l.l@gmail.com</a>
<a href=""mailto:ma.r.k.tuc.k.e.rre.all@gmail.com"">ma.r.k.tuc.k.e.rre.all@gmail.com</a>
<a href=""mailto:ma.r.k.tuckerre.a.ll@gmail.com"">ma.r.k.tuckerre.a.ll@gmail.com</a>
<a href=""mailto:ma.rktu.ck.errea.ll@gmail.com"">ma.rktu.ck.errea.ll@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.c.ke.r.r.e.al.l@gmail.com"">m.a.r.k.tu.c.ke.r.r.e.al.l@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.c.k.errea.ll@gmail.com"">m.a.r.k.tu.c.k.errea.ll@gmail.com</a>
<a href=""mailto:m.ar.k.tuc.k.er.reall@gmail.com"">m.ar.k.tuc.k.er.reall@gmail.com</a>
<a href=""mailto:m.a.r.k.tu.cke.rr.ea.l.l@gmail.com"">m.a.r.k.tu.cke.rr.ea.l.l@gmail.com</a>
<a href=""mailto:m.a.rkt.uck.err.ea.ll@gmail.com"">m.a.rkt.uck.err.ea.ll@gmail.com</a>
<a href=""mailto:m.a.r.kt.u.c.k.e.rr.e.a.ll@gmail.com"">m.a.r.kt.u.c.k.e.rr.e.a.ll@gmail.com</a>
<a href=""mailto:m.a.r.k.t.u.c.k.errea.ll@gmail.com"">m.a.r.k.t.u.c.k.errea.ll@gmail.com</a>
<a href=""mailto:m.a.r.k.t.ucke.rre.a.l.l@gmail.com"">m.a.r.k.t.ucke.rre.a.l.l@gmail.com</a>
<a href=""mailto:mar.k.tuc.k.errea.ll@gmail.com"">mar.k.tuc.k.errea.ll@gmail.com</a>
<a href=""mailto:oliveralabuwa@gmail.com"">oliveralabuwa@gmail.com</a>
<a href=""mailto:ol.i.v.e.ral.abu.wa@gmail.com"">ol.i.v.e.ral.abu.wa@gmail.com</a>
<a href=""mailto:ol.iv.e.ra.l.ab.uwa@gmail.com"">ol.iv.e.ra.l.ab.uwa@gmail.com</a>
<a href=""mailto:oliv.eral.a.bu.w.a@gmail.com"">oliv.eral.a.bu.w.a@gmail.com</a>
<a href=""mailto:oli.ver.a.la.buwa@gmail.com"">oli.ver.a.la.buwa@gmail.com</a>
<a href=""mailto:ol.i.ver.a.lab.u.wa@gmail.com"">ol.i.ver.a.lab.u.wa@gmail.com</a>
<a href=""mailto:o.l.iver.alab.uwa@gmail.com"">o.l.iver.alab.uwa@gmail.com</a>
<a href=""mailto:o.l.ive.r.alab.uwa@gmail.com"">o.l.ive.r.alab.uwa@gmail.com</a>
<a href=""mailto:oli.ver.a.la.b.uw.a@gmail.com"">oli.ver.a.la.b.uw.a@gmail.com</a>
<a href=""mailto:o.l.i.v.eral.a.bu.wa@gmail.com"">o.l.i.v.eral.a.bu.wa@gmail.com</a>
<a href=""mailto:o.liv.er.alabuwa@gmail.com"">o.liv.er.alabuwa@gmail.com</a>
<a href=""mailto:o.li.v.er.al.a.buw.a@gmail.com"">o.li.v.er.al.a.buw.a@gmail.com</a>
<a href=""mailto:oliv.e.ra.la.b.uwa@gmail.com"">oliv.e.ra.la.b.uwa@gmail.com</a>
<a href=""mailto:ol.i.v.er.a.l.a.bu.w.a@gmail.com"">ol.i.v.er.a.l.a.bu.w.a@gmail.com</a>
<a href=""mailto:o.l.i.v.e.ral.abuw.a@gmail.com"">o.l.i.v.e.ral.abuw.a@gmail.com</a>
<a href=""mailto:oliv.er.a.l.ab.uw.a@gmail.com"">oliv.er.a.l.ab.uw.a@gmail.com</a>
<a href=""mailto:olive.ralab.uw.a@gmail.com"">olive.ralab.uw.a@gmail.com</a>
<a href=""mailto:oli.ve.r.a.la.bu.wa@gmail.com"">oli.ve.r.a.la.bu.wa@gmail.com</a>
<a href=""mailto:oliv.era.labu.wa@gmail.com"">oliv.era.labu.wa@gmail.com</a>
<a href=""mailto:o.l.i.ve.r.al.abu.w.a@gmail.com"">o.l.i.ve.r.al.abu.w.a@gmail.com</a>
<a href=""mailto:o.li.verala.b.u.w.a@gmail.com"">o.li.verala.b.u.w.a@gmail.com</a>
<a href=""mailto:o.l.iv.eral.a.b.u.w.a@gmail.com"">o.l.iv.eral.a.b.u.w.a@gmail.com</a>
<a href=""mailto:ol.i.v.e.ra.l.a.b.u.w.a@gmail.com"">ol.i.v.e.ra.l.a.b.u.w.a@gmail.com</a>
<a href=""mailto:oli.v.e.rala.bu.w.a@gmail.com"">oli.v.e.rala.bu.w.a@gmail.com</a>
<a href=""mailto:o.liv.e.r.al.a.b.uwa@gmail.com"">o.liv.e.r.al.a.b.uwa@gmail.com</a>
<a href=""mailto:o.liv.era.lab.u.wa@gmail.com"">o.liv.era.lab.u.wa@gmail.com</a>
<a href=""mailto:olive.r.a.la.b.u.wa@gmail.com"">olive.r.a.la.b.u.wa@gmail.com</a>
<a href=""mailto:o.l.i.v.e.r.a.l.a.bu.w.a@gmail.com"">o.l.i.v.e.r.a.l.a.bu.w.a@gmail.com</a>
<a href=""mailto:o.l.i.ver.a.l.abuw.a@gmail.com"">o.l.i.ver.a.l.abuw.a@gmail.com</a>
<a href=""mailto:o.l.i.ve.ral.ab.u.w.a@gmail.com"">o.l.i.ve.ral.ab.u.w.a@gmail.com</a>
<a href=""mailto:o.l.iv.e.ra.l.ab.uw.a@gmail.com"">o.l.iv.e.ra.l.ab.uw.a@gmail.com</a>
<a href=""mailto:ol.i.vera.la.buwa@gmail.com"">ol.i.vera.la.buwa@gmail.com</a>
<a href=""mailto:o.liverala.b.u.w.a@gmail.com"">o.liverala.b.u.w.a@gmail.com</a>
<a href=""mailto:o.l.iver.a.la.buw.a@gmail.com"">o.l.iver.a.la.buw.a@gmail.com</a>
<a href=""mailto:ol.i.vera.l.ab.uwa@gmail.com"">ol.i.vera.l.ab.uwa@gmail.com</a>
<a href=""mailto:o.li.ve.r.al.a.buw.a@gmail.com"">o.li.ve.r.al.a.buw.a@gmail.com</a>
<a href=""mailto:o.l.i.ver.a.l.a.b.uwa@gmail.com"">o.l.i.ver.a.l.a.b.uwa@gmail.com</a>
<a href=""mailto:olivera.labuw.a@gmail.com"">olivera.labuw.a@gmail.com</a>
<a href=""mailto:o.l.iv.er.a.l.a.b.uw.a@gmail.com"">o.l.iv.er.a.l.a.b.uw.a@gmail.com</a>
<a href=""mailto:ol.i.v.e.r.a.l.ab.uwa@gmail.com"">ol.i.v.e.r.a.l.ab.uwa@gmail.com</a>
<a href=""mailto:ol.iv.era.l.ab.uwa@gmail.com"">ol.iv.era.l.ab.uwa@gmail.com</a>
<a href=""mailto:o.li.v.e.ralabuwa@gmail.com"">o.li.v.e.ralabuwa@gmail.com</a>
<a href=""mailto:ol.iv.era.la.b.uwa@gmail.com"">ol.iv.era.la.b.uwa@gmail.com</a>
<a href=""mailto:o.li.ve.r.a.l.ab.u.wa@gmail.com"">o.li.ve.r.a.l.ab.u.wa@gmail.com</a>
<a href=""mailto:o.l.i.ve.r.a.la.b.u.wa@gmail.com"">o.l.i.ve.r.a.la.b.u.wa@gmail.com</a>
<a href=""mailto:oli.verala.bu.wa@gmail.com"">oli.verala.bu.wa@gmail.com</a>
<a href=""mailto:oli.vera.lab.uwa@gmail.com"">oli.vera.lab.uwa@gmail.com</a>
<a href=""mailto:o.liver.alab.u.w.a@gmail.com"">o.liver.alab.u.w.a@gmail.com</a>
<a href=""mailto:ol.iveral.abu.w.a@gmail.com"">ol.iveral.abu.w.a@gmail.com</a>
<a href=""mailto:o.live.r.a.l.a.buwa@gmail.com"">o.live.r.a.l.a.buwa@gmail.com</a>
<a href=""mailto:o.l.iv.e.ra.l.a.buw.a@gmail.com"">o.l.iv.e.ra.l.a.buw.a@gmail.com</a>
<a href=""mailto:oli.ver.a.l.a.bu.wa@gmail.com"">oli.ver.a.l.a.bu.wa@gmail.com</a>
<a href=""mailto:o.l.ive.ra.la.b.uwa@gmail.com"">o.l.ive.ra.la.b.uwa@gmail.com</a>
<a href=""mailto:o.liv.e.ra.la.b.uw.a@gmail.com"">o.liv.e.ra.la.b.uw.a@gmail.com</a>
<a href=""mailto:o.liv.er.a.la.b.uwa@gmail.com"">o.liv.er.a.la.b.uwa@gmail.com</a>
<a href=""mailto:olivera.l.a.b.uw.a@gmail.com"">olivera.l.a.b.uw.a@gmail.com</a>
<a href=""mailto:ol.i.v.er.al.ab.u.wa@gmail.com"">ol.i.v.er.al.ab.u.wa@gmail.com</a>
<a href=""mailto:o.l.i.vera.l.ab.u.wa@gmail.com"">o.l.i.vera.l.ab.u.wa@gmail.com</a>
<a href=""mailto:o.l.iv.er.a.l.abuw.a@gmail.com"">o.l.iv.er.a.l.abuw.a@gmail.com</a>
<a href=""mailto:ol.iv.e.r.a.la.b.uwa@gmail.com"">ol.iv.e.r.a.la.b.uwa@gmail.com</a>
<a href=""mailto:o.liv.eral.abuw.a@gmail.com"">o.liv.eral.abuw.a@gmail.com</a>
<a href=""mailto:oliveral.a.buwa@gmail.com"">oliveral.a.buwa@gmail.com</a>
<a href=""mailto:o.li.ver.a.l.a.bu.wa@gmail.com"">o.li.ver.a.l.a.bu.wa@gmail.com</a>
<a href=""mailto:o.liverala.b.uwa@gmail.com"">o.liverala.b.uwa@gmail.com</a>
<a href=""mailto:o.liv.eralab.uw.a@gmail.com"">o.liv.eralab.uw.a@gmail.com</a>
<a href=""mailto:ol.i.veralabuw.a@gmail.com"">ol.i.veralabuw.a@gmail.com</a>
<a href=""mailto:ol.i.v.er.ala.buwa@gmail.com"">ol.i.v.er.ala.buwa@gmail.com</a>
<a href=""mailto:ol.i.v.eral.a.bu.w.a@gmail.com"">ol.i.v.eral.a.bu.w.a@gmail.com</a>
<a href=""mailto:o.l.i.v.e.rala.b.u.wa@gmail.com"">o.l.i.v.e.rala.b.u.wa@gmail.com</a>
<a href=""mailto:oliver.a.l.a.bu.w.a@gmail.com"">oliver.a.l.a.bu.w.a@gmail.com</a>
<a href=""mailto:ol.i.ve.ra.l.a.bu.w.a@gmail.com"">ol.i.ve.ra.l.a.bu.w.a@gmail.com</a>
<a href=""mailto:o.l.iv.e.ra.l.abuwa@gmail.com"">o.l.iv.e.ra.l.abuwa@gmail.com</a>
<a href=""mailto:oli.ver.al.a.bu.wa@gmail.com"">oli.ver.al.a.bu.wa@gmail.com</a>
<a href=""mailto:o.liv.er.al.a.buw.a@gmail.com"">o.liv.er.al.a.buw.a@gmail.com</a>
<a href=""mailto:o.liver.ala.bu.wa@gmail.com"">o.liver.ala.bu.wa@gmail.com</a>
<a href=""mailto:o.l.i.v.er.a.l.abuwa@gmail.com"">o.l.i.v.er.a.l.abuwa@gmail.com</a>
<a href=""mailto:o.l.iv.e.r.alab.u.w.a@gmail.com"">o.l.iv.e.r.alab.u.w.a@gmail.com</a>
<a href=""mailto:o.li.ve.r.a.l.ab.u.w.a@gmail.com"">o.li.ve.r.a.l.ab.u.w.a@gmail.com</a>
<a href=""mailto:o.liver.a.lab.uw.a@gmail.com"">o.liver.a.lab.uw.a@gmail.com</a>
<a href=""mailto:oli.ve.ral.a.b.uw.a@gmail.com"">oli.ve.ral.a.b.uw.a@gmail.com</a>
<a href=""mailto:oliv.erala.buwa@gmail.com"">oliv.erala.buwa@gmail.com</a>
<a href=""mailto:o.l.ive.ralab.uw.a@gmail.com"">o.l.ive.ralab.uw.a@gmail.com</a>
<a href=""mailto:oli.ver.alabu.wa@gmail.com"">oli.ver.alabu.wa@gmail.com</a>
<a href=""mailto:ol.i.veral.a.bu.w.a@gmail.com"">ol.i.veral.a.bu.w.a@gmail.com</a>
<a href=""mailto:o.li.veralab.u.w.a@gmail.com"">o.li.veralab.u.w.a@gmail.com</a>
<a href=""mailto:o.li.veral.ab.u.wa@gmail.com"">o.li.veral.ab.u.wa@gmail.com</a>
<a href=""mailto:o.liver.a.l.a.b.u.w.a@gmail.com"">o.liver.a.l.a.b.u.w.a@gmail.com</a>
<a href=""mailto:oli.ve.r.a.l.ab.u.w.a@gmail.com"">oli.ve.r.a.l.ab.u.w.a@gmail.com</a>
<a href=""mailto:o.l.iv.e.rala.b.u.wa@gmail.com"">o.l.iv.e.rala.b.u.wa@gmail.com</a>
<a href=""mailto:ol.i.ve.ra.la.buwa@gmail.com"">ol.i.ve.ra.la.buwa@gmail.com</a>
<a href=""mailto:o.li.v.er.a.l.ab.uwa@gmail.com"">o.li.v.er.a.l.ab.uwa@gmail.com</a>
<a href=""mailto:ol.iv.e.r.a.l.a.b.uw.a@gmail.com"">ol.iv.e.r.a.l.a.b.uw.a@gmail.com</a>
<a href=""mailto:o.l.iv.eralabu.wa@gmail.com"">o.l.iv.eralabu.wa@gmail.com</a>
<a href=""mailto:oliv.e.ral.a.buwa@gmail.com"">oliv.e.ral.a.buwa@gmail.com</a>
<a href=""mailto:o.l.i.ver.a.lab.u.wa@gmail.com"">o.l.i.ver.a.lab.u.wa@gmail.com</a>
<a href=""mailto:o.li.ver.ala.buwa@gmail.com"">o.li.ver.ala.buwa@gmail.com</a>
<a href=""mailto:oliv.er.a.l.a.b.u.wa@gmail.com"">oliv.er.a.l.a.b.u.wa@gmail.com</a>
<a href=""mailto:ol.i.v.era.l.a.bu.w.a@gmail.com"">ol.i.v.era.l.a.bu.w.a@gmail.com</a>
<a href=""mailto:oli.ver.al.abu.w.a@gmail.com"">oli.ver.al.abu.w.a@gmail.com</a>
<a href=""mailto:ol.i.ver.a.la.buwa@gmail.com"">ol.i.ver.a.la.buwa@gmail.com</a>
<a href=""mailto:o.li.v.era.l.abuw.a@gmail.com"">o.li.v.era.l.abuw.a@gmail.com</a>
<a href=""mailto:o.li.v.e.r.a.la.b.u.wa@gmail.com"">o.li.v.e.r.a.la.b.u.wa@gmail.com</a>
<a href=""mailto:o.l.i.v.e.r.al.abuw.a@gmail.com"">o.l.i.v.e.r.al.abuw.a@gmail.com</a>
<a href=""mailto:ol.iver.al.ab.uwa@gmail.com"">ol.iver.al.ab.uwa@gmail.com</a>
<a href=""mailto:o.liveralabu.wa@gmail.com"">o.liveralabu.wa@gmail.com</a>
<a href=""mailto:oli.vera.l.a.b.uwa@gmail.com"">oli.vera.l.a.b.uwa@gmail.com</a>
<a href=""mailto:oliv.e.r.ala.b.u.w.a@gmail.com"">oliv.e.r.ala.b.u.w.a@gmail.com</a>
<a href=""mailto:o.l.ivera.la.b.uwa@gmail.com"">o.l.ivera.la.b.uwa@gmail.com</a>
<a href=""mailto:ol.i.v.eral.abu.w.a@gmail.com"">ol.i.v.eral.abu.w.a@gmail.com</a>
<a href=""mailto:o.li.ve.ra.la.b.u.wa@gmail.com"">o.li.ve.ra.la.b.u.wa@gmail.com</a>
<a href=""mailto:o.li.v.era.la.bu.w.a@gmail.com"">o.li.v.era.la.bu.w.a@gmail.com</a>
<a href=""mailto:ol.i.ve.ra.labuwa@gmail.com"">ol.i.ve.ra.labuwa@gmail.com</a>
<a href=""mailto:oliv.e.r.a.l.ab.uw.a@gmail.com"">oliv.e.r.a.l.ab.uw.a@gmail.com</a>
<a href=""mailto:ol.ive.ral.abu.wa@gmail.com"">ol.ive.ral.abu.wa@gmail.com</a>
<a href=""mailto:oli.v.er.al.abuwa@gmail.com"">oli.v.er.al.abuwa@gmail.com</a>
<a href=""mailto:ol.i.vera.la.b.u.w.a@gmail.com"">ol.i.vera.la.b.u.w.a@gmail.com</a>
<a href=""mailto:ol.i.ve.r.al.a.buwa@gmail.com"">ol.i.ve.r.al.a.buwa@gmail.com</a>
<a href=""mailto:oli.v.e.ra.la.bu.w.a@gmail.com"">oli.v.e.ra.la.bu.w.a@gmail.com</a>
<a href=""mailto:oli.v.era.lab.u.wa@gmail.com"">oli.v.era.lab.u.wa@gmail.com</a>
<a href=""mailto:o.liv.eral.a.b.u.w.a@gmail.com"">o.liv.eral.a.b.u.w.a@gmail.com</a>
<a href=""mailto:ol.i.veral.ab.uwa@gmail.com"">ol.i.veral.ab.uwa@gmail.com</a>
<a href=""mailto:o.liv.e.r.a.la.b.u.wa@gmail.com"">o.liv.e.r.a.la.b.u.wa@gmail.com</a>
<a href=""mailto:o.li.v.e.r.al.ab.u.wa@gmail.com"">o.li.v.e.r.al.ab.u.wa@gmail.com</a>
<a href=""mailto:oli.ve.r.al.a.bu.wa@gmail.com"">oli.ve.r.al.a.bu.wa@gmail.com</a>
<a href=""mailto:o.liv.era.la.b.u.w.a@gmail.com"">o.liv.era.la.b.u.w.a@gmail.com</a>
<a href=""mailto:ol.i.ve.ral.a.b.u.wa@gmail.com"">ol.i.ve.ral.a.b.u.wa@gmail.com</a>
<a href=""mailto:oliv.er.ala.b.uw.a@gmail.com"">oliv.er.ala.b.uw.a@gmail.com</a>
<a href=""mailto:o.l.iv.er.al.a.bu.wa@gmail.com"">o.l.iv.er.al.a.bu.wa@gmail.com</a>
<a href=""mailto:oli.v.e.r.alab.uwa@gmail.com"">oli.v.e.r.alab.uwa@gmail.com</a>
<a href=""mailto:oli.veral.abuw.a@gmail.com"">oli.veral.abuw.a@gmail.com</a>
<a href=""mailto:oli.ver.a.l.abuw.a@gmail.com"">oli.ver.a.l.abuw.a@gmail.com</a>
<a href=""mailto:oliver.ala.buw.a@gmail.com"">oliver.ala.buw.a@gmail.com</a>
<a href=""mailto:oli.ver.a.lab.u.wa@gmail.com"">oli.ver.a.lab.u.wa@gmail.com</a>
<a href=""mailto:o.l.ive.r.a.labuw.a@gmail.com"">o.l.ive.r.a.labuw.a@gmail.com</a>
<a href=""mailto:o.live.ral.ab.uwa@gmail.com"">o.live.ral.ab.uwa@gmail.com</a>
<a href=""mailto:o.liv.era.l.a.b.uwa@gmail.com"">o.liv.era.l.a.b.uwa@gmail.com</a>
<a href=""mailto:o.liv.e.ral.ab.uw.a@gmail.com"">o.liv.e.ral.ab.uw.a@gmail.com</a>
<a href=""mailto:ol.i.v.e.ral.abu.w.a@gmail.com"">ol.i.v.e.ral.abu.w.a@gmail.com</a>
<a href=""mailto:oliv.er.a.la.buwa@gmail.com"">oliv.er.a.la.buwa@gmail.com</a>
<a href=""mailto:oli.v.e.ral.abuw.a@gmail.com"">oli.v.e.ral.abuw.a@gmail.com</a>
<a href=""mailto:oliv.e.ral.ab.uw.a@gmail.com"">oliv.e.ral.ab.uw.a@gmail.com</a>
<a href=""mailto:o.li.vera.labuw.a@gmail.com"">o.li.vera.labuw.a@gmail.com</a>
<a href=""mailto:oliver.a.la.b.u.wa@gmail.com"">oliver.a.la.b.u.wa@gmail.com</a>
<a href=""mailto:oli.v.eral.abuw.a@gmail.com"">oli.v.eral.abuw.a@gmail.com</a>
<a href=""mailto:oliver.al.ab.u.w.a@gmail.com"">oliver.al.ab.u.w.a@gmail.com</a>
<a href=""mailto:o.liver.a.l.ab.uwa@gmail.com"">o.liver.a.l.ab.uwa@gmail.com</a>
<a href=""mailto:oli.veral.a.b.uwa@gmail.com"">oli.veral.a.b.uwa@gmail.com</a>
<a href=""mailto:o.li.v.er.a.l.a.b.u.w.a@gmail.com"">o.li.v.er.a.l.a.b.u.w.a@gmail.com</a>
<a href=""mailto:o.l.ive.r.a.l.ab.u.wa@gmail.com"">o.l.ive.r.a.l.ab.u.wa@gmail.com</a>
<a href=""mailto:oli.v.er.a.labu.wa@gmail.com"">oli.v.er.a.labu.wa@gmail.com</a>
<a href=""mailto:ol.iver.a.l.ab.u.w.a@gmail.com"">ol.iver.a.l.ab.u.w.a@gmail.com</a>
<a href=""mailto:o.l.i.v.e.r.a.la.bu.wa@gmail.com"">o.l.i.v.e.r.a.la.bu.wa@gmail.com</a>
<a href=""mailto:o.li.v.e.r.alab.u.w.a@gmail.com"">o.li.v.e.r.alab.u.w.a@gmail.com</a>
<a href=""mailto:ol.ive.r.al.a.buwa@gmail.com"">ol.ive.r.al.a.buwa@gmail.com</a>
<a href=""mailto:o.livera.lab.uwa@gmail.com"">o.livera.lab.uwa@gmail.com</a>
<a href=""mailto:olive.r.a.labu.wa@gmail.com"">olive.r.a.labu.wa@gmail.com</a>
<a href=""mailto:o.l.i.verala.b.u.w.a@gmail.com"">o.l.i.verala.b.u.w.a@gmail.com</a>
<a href=""mailto:o.li.v.e.r.a.lab.uwa@gmail.com"">o.li.v.e.r.a.lab.uwa@gmail.com</a>
<a href=""mailto:o.l.i.v.er.a.l.abu.w.a@gmail.com"">o.l.i.v.er.a.l.abu.w.a@gmail.com</a>
<a href=""mailto:o.li.ver.a.l.abu.wa@gmail.com"">o.li.ver.a.l.abu.wa@gmail.com</a>
<a href=""mailto:o.l.iveral.a.b.uwa@gmail.com"">o.l.iveral.a.b.uwa@gmail.com</a>
<a href=""mailto:olive.ra.la.b.uw.a@gmail.com"">olive.ra.la.b.uw.a@gmail.com</a>
<a href=""mailto:ol.i.ve.r.a.l.a.buw.a@gmail.com"">ol.i.ve.r.a.l.a.buw.a@gmail.com</a>
<a href=""mailto:o.l.i.v.era.l.ab.uwa@gmail.com"">o.l.i.v.era.l.ab.uwa@gmail.com</a>
<a href=""mailto:ol.i.v.e.r.a.lab.uw.a@gmail.com"">ol.i.v.e.r.a.lab.uw.a@gmail.com</a>
<a href=""mailto:oli.v.e.ralab.u.w.a@gmail.com"">oli.v.e.ralab.u.w.a@gmail.com</a>
<a href=""mailto:oli.ver.alab.uwa@gmail.com"">oli.ver.alab.uwa@gmail.com</a>
<a href=""mailto:o.liv.e.r.al.a.bu.w.a@gmail.com"">o.liv.e.r.al.a.bu.w.a@gmail.com</a>
<a href=""mailto:oliv.e.r.al.abu.w.a@gmail.com"">oliv.e.r.al.abu.w.a@gmail.com</a>
<a href=""mailto:o.l.ive.ral.abuwa@gmail.com"">o.l.ive.ral.abuwa@gmail.com</a>
<a href=""mailto:o.live.r.ala.bu.w.a@gmail.com"">o.live.r.ala.bu.w.a@gmail.com</a>
<a href=""mailto:o.l.i.ve.ra.la.bu.wa@gmail.com"">o.l.i.ve.ra.la.bu.wa@gmail.com</a>
<a href=""mailto:oli.ve.ra.l.ab.uwa@gmail.com"">oli.ve.ra.l.ab.uwa@gmail.com</a>
<a href=""mailto:oli.v.era.l.ab.u.w.a@gmail.com"">oli.v.era.l.ab.u.w.a@gmail.com</a>
<a href=""mailto:oli.v.er.al.a.buw.a@gmail.com"">oli.v.er.al.a.buw.a@gmail.com</a>
<a href=""mailto:oli.ver.a.la.b.u.wa@gmail.com"">oli.ver.a.la.b.u.wa@gmail.com</a>
<a href=""mailto:oli.v.eral.ab.uw.a@gmail.com"">oli.v.eral.ab.uw.a@gmail.com</a>
<a href=""mailto:oli.v.er.alab.u.wa@gmail.com"">oli.v.er.alab.u.wa@gmail.com</a>
<a href=""mailto:oli.ve.r.alabuw.a@gmail.com"">oli.ve.r.alabuw.a@gmail.com</a>
<a href=""mailto:o.l.i.v.era.l.abu.w.a@gmail.com"">o.l.i.v.era.l.abu.w.a@gmail.com</a>
<a href=""mailto:o.liver.a.l.a.b.uw.a@gmail.com"">o.liver.a.l.a.b.uw.a@gmail.com</a>
<a href=""mailto:o.l.i.ve.ra.l.a.b.u.wa@gmail.com"">o.l.i.ve.ra.l.a.b.u.wa@gmail.com</a>
<a href=""mailto:oli.verala.b.u.wa@gmail.com"">oli.verala.b.u.wa@gmail.com</a>
<a href=""mailto:oli.v.e.r.al.abuwa@gmail.com"">oli.v.e.r.al.abuwa@gmail.com</a>
<a href=""mailto:oliv.e.ra.l.abu.wa@gmail.com"">oliv.e.ra.l.abu.wa@gmail.com</a>
<a href=""mailto:o.l.i.vera.l.abuw.a@gmail.com"">o.l.i.vera.l.abuw.a@gmail.com</a>
<a href=""mailto:ol.i.ve.rala.bu.wa@gmail.com"">ol.i.ve.rala.bu.wa@gmail.com</a>
<a href=""mailto:oli.v.er.a.lab.u.wa@gmail.com"">oli.v.er.a.lab.u.wa@gmail.com</a>
<a href=""mailto:oli.veral.a.bu.wa@gmail.com"">oli.veral.a.bu.wa@gmail.com</a>
<a href=""mailto:o.li.ve.r.a.lab.uw.a@gmail.com"">o.li.ve.r.a.lab.uw.a@gmail.com</a>
<a href=""mailto:olive.r.al.abu.wa@gmail.com"">olive.r.al.abu.wa@gmail.com</a>
<a href=""mailto:o.li.v.er.a.labuwa@gmail.com"">o.li.v.er.a.labuwa@gmail.com</a>
<a href=""mailto:ol.i.vera.lab.u.w.a@gmail.com"">ol.i.vera.lab.u.w.a@gmail.com</a>
<a href=""mailto:o.liv.era.lab.u.w.a@gmail.com"">o.liv.era.lab.u.w.a@gmail.com</a>
<a href=""mailto:o.livera.l.ab.uw.a@gmail.com"">o.livera.l.ab.uw.a@gmail.com</a>
<a href=""mailto:ol.iv.erala.b.uwa@gmail.com"">ol.iv.erala.b.uwa@gmail.com</a>
<a href=""mailto:o.l.i.ve.r.al.ab.u.wa@gmail.com"">o.l.i.ve.r.al.ab.u.wa@gmail.com</a>
<a href=""mailto:o.live.ral.ab.uw.a@gmail.com"">o.live.ral.ab.uw.a@gmail.com</a>
<a href=""mailto:o.liv.er.a.la.buw.a@gmail.com"">o.liv.er.a.la.buw.a@gmail.com</a>
<a href=""mailto:o.l.i.v.er.a.l.ab.uw.a@gmail.com"">o.l.i.v.er.a.l.ab.uw.a@gmail.com</a>
<a href=""mailto:o.l.iveral.a.buwa@gmail.com"">o.l.iveral.a.buwa@gmail.com</a>
<a href=""mailto:globaldmoslam@gmail.com"">globaldmoslam@gmail.com</a>
<a href=""mailto:glo.ba.l.dmo.s.la.m@gmail.com"">glo.ba.l.dmo.s.la.m@gmail.com</a>
<a href=""mailto:g.lo.b.a.l.d.m.osl.a.m@gmail.com"">g.lo.b.a.l.d.m.osl.a.m@gmail.com</a>
<a href=""mailto:gl.o.b.aldm.os.l.a.m@gmail.com"">gl.o.b.aldm.os.l.a.m@gmail.com</a>
<a href=""mailto:g.l.ob.a.ldmos.lam@gmail.com"">g.l.ob.a.ldmos.lam@gmail.com</a>
<a href=""mailto:glo.b.ald.mos.l.am@gmail.com"">glo.b.ald.mos.l.am@gmail.com</a>
<a href=""mailto:gl.o.bal.d.m.os.la.m@gmail.com"">gl.o.bal.d.m.os.la.m@gmail.com</a>
<a href=""mailto:g.lo.baldm.o.s.la.m@gmail.com"">g.lo.baldm.o.s.la.m@gmail.com</a>
<a href=""mailto:glo.b.a.ld.moslam@gmail.com"">glo.b.a.ld.moslam@gmail.com</a>
<a href=""mailto:glo.b.a.l.dmoslam@gmail.com"">glo.b.a.l.dmoslam@gmail.com</a>
<a href=""mailto:g.lob.aldm.o.sl.am@gmail.com"">g.lob.aldm.o.sl.am@gmail.com</a>
<a href=""mailto:g.lo.bal.d.mos.la.m@gmail.com"">g.lo.bal.d.mos.la.m@gmail.com</a>
<a href=""mailto:g.lob.ald.m.o.s.l.am@gmail.com"">g.lob.ald.m.o.s.l.am@gmail.com</a>
<a href=""mailto:gl.ob.al.dm.o.sl.am@gmail.com"">gl.ob.al.dm.o.sl.am@gmail.com</a>
<a href=""mailto:glo.b.a.ldm.o.slam@gmail.com"">glo.b.a.ldm.o.slam@gmail.com</a>
<a href=""mailto:g.l.ob.a.l.dmo.sl.am@gmail.com"">g.l.ob.a.l.dmo.sl.am@gmail.com</a>
<a href=""mailto:gl.ob.a.ldmos.l.am@gmail.com"">gl.ob.a.ldmos.l.am@gmail.com</a>
<a href=""mailto:gl.o.ba.l.dm.osla.m@gmail.com"">gl.o.ba.l.dm.osla.m@gmail.com</a>
<a href=""mailto:g.lob.al.d.m.o.slam@gmail.com"">g.lob.al.d.m.o.slam@gmail.com</a>
<a href=""mailto:globa.l.d.moslam@gmail.com"">globa.l.d.moslam@gmail.com</a>
<a href=""mailto:gl.o.ba.ldmosla.m@gmail.com"">gl.o.ba.ldmosla.m@gmail.com</a>
<a href=""mailto:g.l.ob.a.l.dmos.l.a.m@gmail.com"">g.l.ob.a.l.dmos.l.a.m@gmail.com</a>
<a href=""mailto:gl.ob.ald.m.o.sla.m@gmail.com"">gl.ob.ald.m.o.sla.m@gmail.com</a>
<a href=""mailto:glo.ba.ldm.o.slam@gmail.com"">glo.ba.ldm.o.slam@gmail.com</a>
<a href=""mailto:glob.a.ldm.o.s.l.a.m@gmail.com"">glob.a.ldm.o.s.l.a.m@gmail.com</a>
<a href=""mailto:g.lo.ba.l.dmo.sl.a.m@gmail.com"">g.lo.ba.l.dmo.sl.a.m@gmail.com</a>
<a href=""mailto:gl.o.ba.ldm.o.s.la.m@gmail.com"">gl.o.ba.ldm.o.s.la.m@gmail.com</a>
<a href=""mailto:glo.b.aldm.o.sl.am@gmail.com"">glo.b.aldm.o.sl.am@gmail.com</a>
<a href=""mailto:glo.ba.ld.m.o.s.l.am@gmail.com"">glo.ba.ld.m.o.s.l.am@gmail.com</a>
<a href=""mailto:g.lob.ald.mo.slam@gmail.com"">g.lob.ald.mo.slam@gmail.com</a>
<a href=""mailto:g.lob.a.l.dm.osl.a.m@gmail.com"">g.lob.a.l.dm.osl.a.m@gmail.com</a>
<a href=""mailto:g.lo.ba.ldmos.lam@gmail.com"">g.lo.ba.ldmos.lam@gmail.com</a>
<a href=""mailto:glob.a.ld.mo.sl.a.m@gmail.com"">glob.a.ld.mo.sl.a.m@gmail.com</a>
<a href=""mailto:gl.o.bald.m.o.s.la.m@gmail.com"">gl.o.bald.m.o.s.la.m@gmail.com</a>
<a href=""mailto:g.l.obaldmosla.m@gmail.com"">g.l.obaldmosla.m@gmail.com</a>
<a href=""mailto:g.l.o.bald.mo.slam@gmail.com"">g.l.o.bald.mo.slam@gmail.com</a>
<a href=""mailto:glob.a.ld.mosla.m@gmail.com"">glob.a.ld.mosla.m@gmail.com</a>
<a href=""mailto:gl.o.b.al.dmo.s.l.am@gmail.com"">gl.o.b.al.dmo.s.l.am@gmail.com</a>
<a href=""mailto:g.l.ob.al.d.mo.s.l.a.m@gmail.com"">g.l.ob.al.d.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:g.l.ob.al.dm.o.sl.am@gmail.com"">g.l.ob.al.dm.o.sl.am@gmail.com</a>
<a href=""mailto:g.lobal.d.mos.la.m@gmail.com"">g.lobal.d.mos.la.m@gmail.com</a>
<a href=""mailto:gl.ob.a.ld.m.osl.a.m@gmail.com"">gl.ob.a.ld.m.osl.a.m@gmail.com</a>
<a href=""mailto:globa.ld.m.osla.m@gmail.com"">globa.ld.m.osla.m@gmail.com</a>
<a href=""mailto:g.loba.l.d.mo.sl.am@gmail.com"">g.loba.l.d.mo.sl.am@gmail.com</a>
<a href=""mailto:g.lo.b.a.l.dmosl.am@gmail.com"">g.lo.b.a.l.dmosl.am@gmail.com</a>
<a href=""mailto:glo.b.ald.m.oslam@gmail.com"">glo.b.ald.m.oslam@gmail.com</a>
<a href=""mailto:g.lo.bal.d.mo.sla.m@gmail.com"">g.lo.bal.d.mo.sla.m@gmail.com</a>
<a href=""mailto:g.l.obaldm.o.sla.m@gmail.com"">g.l.obaldm.o.sla.m@gmail.com</a>
<a href=""mailto:gl.obal.dm.oslam@gmail.com"">gl.obal.dm.oslam@gmail.com</a>
<a href=""mailto:gl.o.ba.ldm.o.s.lam@gmail.com"">gl.o.ba.ldm.o.s.lam@gmail.com</a>
<a href=""mailto:g.l.o.b.al.d.mo.s.la.m@gmail.com"">g.l.o.b.al.d.mo.s.la.m@gmail.com</a>
<a href=""mailto:global.d.mo.sla.m@gmail.com"">global.d.mo.sla.m@gmail.com</a>
<a href=""mailto:g.l.o.b.a.l.d.m.o.sla.m@gmail.com"">g.l.o.b.a.l.d.m.o.sla.m@gmail.com</a>
<a href=""mailto:g.l.obald.mo.sl.a.m@gmail.com"">g.l.obald.mo.sl.a.m@gmail.com</a>
<a href=""mailto:glo.b.al.dm.os.la.m@gmail.com"">glo.b.al.dm.os.la.m@gmail.com</a>
<a href=""mailto:g.l.ob.a.ldmo.sl.a.m@gmail.com"">g.l.ob.a.ldmo.sl.a.m@gmail.com</a>
<a href=""mailto:glob.a.ldm.osl.am@gmail.com"">glob.a.ldm.osl.am@gmail.com</a>
<a href=""mailto:gl.oba.l.d.mo.sl.a.m@gmail.com"">gl.oba.l.d.mo.sl.a.m@gmail.com</a>
<a href=""mailto:g.lobal.d.m.osla.m@gmail.com"">g.lobal.d.m.osla.m@gmail.com</a>
<a href=""mailto:g.l.o.b.al.d.mos.l.am@gmail.com"">g.l.o.b.al.d.mos.l.am@gmail.com</a>
<a href=""mailto:gl.ob.a.l.dm.os.l.a.m@gmail.com"">gl.ob.a.l.dm.os.l.a.m@gmail.com</a>
<a href=""mailto:gl.o.b.al.dm.os.la.m@gmail.com"">gl.o.b.al.dm.os.la.m@gmail.com</a>
<a href=""mailto:gl.oba.l.d.mo.s.l.a.m@gmail.com"">gl.oba.l.d.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:glob.al.d.m.o.slam@gmail.com"">glob.al.d.m.o.slam@gmail.com</a>
<a href=""mailto:gl.o.b.al.d.mo.s.l.a.m@gmail.com"">gl.o.b.al.d.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:g.lob.aldmoslam@gmail.com"">g.lob.aldmoslam@gmail.com</a>
<a href=""mailto:glo.b.a.l.dm.o.sla.m@gmail.com"">glo.b.a.l.dm.o.sla.m@gmail.com</a>
<a href=""mailto:gl.oba.l.dm.os.l.am@gmail.com"">gl.oba.l.dm.os.l.am@gmail.com</a>
<a href=""mailto:g.lobaldmo.slam@gmail.com"">g.lobaldmo.slam@gmail.com</a>
<a href=""mailto:g.l.o.ba.ld.m.o.sl.a.m@gmail.com"">g.l.o.ba.ld.m.o.sl.a.m@gmail.com</a>
<a href=""mailto:g.l.o.b.a.ldmo.sl.am@gmail.com"">g.l.o.b.a.ldmo.sl.am@gmail.com</a>
<a href=""mailto:g.lob.ald.m.o.slam@gmail.com"">g.lob.ald.m.o.slam@gmail.com</a>
<a href=""mailto:g.lo.bal.d.mo.s.l.am@gmail.com"">g.lo.bal.d.mo.s.l.am@gmail.com</a>
<a href=""mailto:glo.ba.ldm.os.l.am@gmail.com"">glo.ba.ldm.os.l.am@gmail.com</a>
<a href=""mailto:glo.bal.d.mo.s.lam@gmail.com"">glo.bal.d.mo.s.lam@gmail.com</a>
<a href=""mailto:gl.o.ba.ldmo.sla.m@gmail.com"">gl.o.ba.ldmo.sla.m@gmail.com</a>
<a href=""mailto:gl.ob.a.l.d.mo.s.l.a.m@gmail.com"">gl.ob.a.l.d.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:g.loba.ld.mosla.m@gmail.com"">g.loba.ld.mosla.m@gmail.com</a>
<a href=""mailto:g.lo.b.a.l.d.m.o.sla.m@gmail.com"">g.lo.b.a.l.d.m.o.sla.m@gmail.com</a>
<a href=""mailto:g.lob.a.l.dmo.s.l.a.m@gmail.com"">g.lob.a.l.dmo.s.l.a.m@gmail.com</a>
<a href=""mailto:glo.ba.l.dmo.s.l.a.m@gmail.com"">glo.ba.l.dmo.s.l.a.m@gmail.com</a>
<a href=""mailto:g.l.o.b.a.l.dm.o.sl.am@gmail.com"">g.l.o.b.a.l.dm.o.sl.am@gmail.com</a>
<a href=""mailto:gl.ob.al.d.mo.s.la.m@gmail.com"">gl.ob.al.d.mo.s.la.m@gmail.com</a>
<a href=""mailto:glo.b.a.l.dm.osla.m@gmail.com"">glo.b.a.l.dm.osla.m@gmail.com</a>
<a href=""mailto:g.l.oba.ldmosl.am@gmail.com"">g.l.oba.ldmosl.am@gmail.com</a>
<a href=""mailto:g.lo.bal.dm.o.s.la.m@gmail.com"">g.lo.bal.dm.o.s.la.m@gmail.com</a>
<a href=""mailto:gl.ob.a.l.dmo.s.l.am@gmail.com"">gl.ob.a.l.dmo.s.l.am@gmail.com</a>
<a href=""mailto:glob.a.ld.m.o.slam@gmail.com"">glob.a.ld.m.o.slam@gmail.com</a>
<a href=""mailto:g.lob.a.l.d.mosl.am@gmail.com"">g.lob.a.l.d.mosl.am@gmail.com</a>
<a href=""mailto:g.l.o.ba.ld.mo.s.la.m@gmail.com"">g.l.o.ba.ld.mo.s.la.m@gmail.com</a>
<a href=""mailto:g.lo.ba.l.dm.o.slam@gmail.com"">g.lo.ba.l.dm.o.slam@gmail.com</a>
<a href=""mailto:g.lo.bal.dmo.s.l.am@gmail.com"">g.lo.bal.dmo.s.l.am@gmail.com</a>
<a href=""mailto:g.l.ob.a.l.dm.o.sla.m@gmail.com"">g.l.ob.a.l.dm.o.sla.m@gmail.com</a>
<a href=""mailto:g.l.o.bald.m.osl.am@gmail.com"">g.l.o.bald.m.osl.am@gmail.com</a>
<a href=""mailto:g.loba.ld.m.o.s.l.a.m@gmail.com"">g.loba.ld.m.o.s.l.a.m@gmail.com</a>
<a href=""mailto:g.lo.b.a.ld.m.os.lam@gmail.com"">g.lo.b.a.ld.m.os.lam@gmail.com</a>
<a href=""mailto:global.d.m.osl.am@gmail.com"">global.d.m.osl.am@gmail.com</a>
<a href=""mailto:gl.o.bald.mo.slam@gmail.com"">gl.o.bald.mo.slam@gmail.com</a>
<a href=""mailto:glo.b.a.ld.mo.slam@gmail.com"">glo.b.a.ld.mo.slam@gmail.com</a>
<a href=""mailto:g.l.o.bald.m.o.sl.am@gmail.com"">g.l.o.bald.m.o.sl.am@gmail.com</a>
<a href=""mailto:glob.a.ld.m.osl.am@gmail.com"">glob.a.ld.m.osl.am@gmail.com</a>
<a href=""mailto:g.l.o.b.a.l.dmosl.a.m@gmail.com"">g.l.o.b.a.l.dmosl.a.m@gmail.com</a>
<a href=""mailto:g.loba.ldm.o.slam@gmail.com"">g.loba.ldm.o.slam@gmail.com</a>
<a href=""mailto:gl.ob.a.l.d.m.o.sla.m@gmail.com"">gl.ob.a.l.d.m.o.sla.m@gmail.com</a>
<a href=""mailto:g.l.ob.a.ld.mo.sl.a.m@gmail.com"">g.l.ob.a.ld.mo.sl.a.m@gmail.com</a>
<a href=""mailto:glo.bal.dmo.sl.a.m@gmail.com"">glo.bal.dmo.sl.a.m@gmail.com</a>
<a href=""mailto:glo.b.ald.m.o.sl.a.m@gmail.com"">glo.b.ald.m.o.sl.a.m@gmail.com</a>
<a href=""mailto:g.lo.bald.m.os.la.m@gmail.com"">g.lo.bald.m.os.la.m@gmail.com</a>
<a href=""mailto:gl.obal.dm.os.l.am@gmail.com"">gl.obal.dm.os.l.am@gmail.com</a>
<a href=""mailto:glob.al.d.mos.l.a.m@gmail.com"">glob.al.d.mos.l.a.m@gmail.com</a>
<a href=""mailto:glob.aldm.os.l.am@gmail.com"">glob.aldm.os.l.am@gmail.com</a>
<a href=""mailto:g.l.ob.a.l.d.mo.sl.a.m@gmail.com"">g.l.ob.a.l.d.mo.sl.a.m@gmail.com</a>
<a href=""mailto:g.l.ob.al.dm.os.l.a.m@gmail.com"">g.l.ob.al.dm.os.l.a.m@gmail.com</a>
<a href=""mailto:g.l.o.b.a.l.d.mo.sl.am@gmail.com"">g.l.o.b.a.l.d.mo.sl.am@gmail.com</a>
<a href=""mailto:glo.b.a.l.dmosla.m@gmail.com"">glo.b.a.l.dmosla.m@gmail.com</a>
<a href=""mailto:g.lo.b.al.d.mosl.am@gmail.com"">g.lo.b.al.d.mosl.am@gmail.com</a>
<a href=""mailto:glob.a.l.d.mo.s.l.am@gmail.com"">glob.a.l.d.mo.s.l.am@gmail.com</a>
<a href=""mailto:globa.ld.mos.la.m@gmail.com"">globa.ld.mos.la.m@gmail.com</a>
<a href=""mailto:gl.ob.a.ld.mo.s.la.m@gmail.com"">gl.ob.a.ld.mo.s.la.m@gmail.com</a>
<a href=""mailto:g.l.o.ba.l.d.m.osl.am@gmail.com"">g.l.o.ba.l.d.m.osl.am@gmail.com</a>
<a href=""mailto:glo.b.a.ldm.osl.a.m@gmail.com"">glo.b.a.ldm.osl.a.m@gmail.com</a>
<a href=""mailto:gl.oba.ld.mo.s.l.am@gmail.com"">gl.oba.ld.mo.s.l.am@gmail.com</a>
<a href=""mailto:g.lob.a.ld.m.os.l.a.m@gmail.com"">g.lob.a.ld.m.os.l.a.m@gmail.com</a>
<a href=""mailto:g.lob.a.l.d.m.o.s.lam@gmail.com"">g.lob.a.l.d.m.o.s.lam@gmail.com</a>
<a href=""mailto:g.l.o.bal.d.mo.sla.m@gmail.com"">g.l.o.bal.d.mo.sla.m@gmail.com</a>
<a href=""mailto:gl.o.bald.m.o.s.l.a.m@gmail.com"">gl.o.bald.m.o.s.l.a.m@gmail.com</a>
<a href=""mailto:g.l.o.b.a.l.d.m.o.slam@gmail.com"">g.l.o.b.a.l.d.m.o.slam@gmail.com</a>
<a href=""mailto:glo.ba.ld.m.o.s.la.m@gmail.com"">glo.ba.ld.m.o.s.la.m@gmail.com</a>
<a href=""mailto:g.l.o.baldm.osla.m@gmail.com"">g.l.o.baldm.osla.m@gmail.com</a>
<a href=""mailto:g.l.obal.dmosl.a.m@gmail.com"">g.l.obal.dmosl.a.m@gmail.com</a>
<a href=""mailto:gl.o.ba.ld.m.oslam@gmail.com"">gl.o.ba.ld.m.oslam@gmail.com</a>
<a href=""mailto:g.l.obaldmo.s.l.a.m@gmail.com"">g.l.obaldmo.s.l.a.m@gmail.com</a>
<a href=""mailto:gl.ob.aldm.o.s.lam@gmail.com"">gl.ob.aldm.o.s.lam@gmail.com</a>
<a href=""mailto:g.lo.b.ald.mo.sl.am@gmail.com"">g.lo.b.ald.mo.sl.am@gmail.com</a>
<a href=""mailto:g.l.oba.ld.mosl.a.m@gmail.com"">g.l.oba.ld.mosl.a.m@gmail.com</a>
<a href=""mailto:g.l.oba.l.dmo.s.lam@gmail.com"">g.l.oba.l.dmo.s.lam@gmail.com</a>
<a href=""mailto:gl.o.b.a.ld.mo.s.lam@gmail.com"">gl.o.b.a.ld.mo.s.lam@gmail.com</a>
<a href=""mailto:gl.obald.mo.slam@gmail.com"">gl.obald.mo.slam@gmail.com</a>
<a href=""mailto:gl.o.baldm.o.s.l.a.m@gmail.com"">gl.o.baldm.o.s.l.a.m@gmail.com</a>
<a href=""mailto:globald.m.os.l.a.m@gmail.com"">globald.m.os.l.a.m@gmail.com</a>
<a href=""mailto:gl.oba.ld.mo.slam@gmail.com"">gl.oba.ld.mo.slam@gmail.com</a>
<a href=""mailto:gl.o.b.a.ldm.o.s.lam@gmail.com"">gl.o.b.a.ldm.o.s.lam@gmail.com</a>
<a href=""mailto:globa.l.dmos.l.am@gmail.com"">globa.l.dmos.l.am@gmail.com</a>
<a href=""mailto:glo.b.a.ldmo.s.l.am@gmail.com"">glo.b.a.ldmo.s.l.am@gmail.com</a>
<a href=""mailto:g.lo.b.a.ldm.o.sla.m@gmail.com"">g.lo.b.a.ldm.o.sla.m@gmail.com</a>
<a href=""mailto:gl.o.bal.d.mosl.am@gmail.com"">gl.o.bal.d.mosl.am@gmail.com</a>
<a href=""mailto:glo.b.a.l.d.m.o.sl.a.m@gmail.com"">glo.b.a.l.d.m.o.sl.a.m@gmail.com</a>
<a href=""mailto:globa.ldm.osla.m@gmail.com"">globa.ldm.osla.m@gmail.com</a>
<a href=""mailto:g.lobal.d.mosl.am@gmail.com"">g.lobal.d.mosl.am@gmail.com</a>
<a href=""mailto:g.l.o.ba.l.d.mo.sla.m@gmail.com"">g.l.o.ba.l.d.mo.sla.m@gmail.com</a>
<a href=""mailto:gl.o.b.ald.m.os.l.a.m@gmail.com"">gl.o.b.ald.m.os.l.a.m@gmail.com</a>
<a href=""mailto:glob.a.l.d.m.o.s.l.am@gmail.com"">glob.a.l.d.m.o.s.l.am@gmail.com</a>
<a href=""mailto:glo.baldm.osla.m@gmail.com"">glo.baldm.osla.m@gmail.com</a>
<a href=""mailto:globa.ld.m.os.l.am@gmail.com"">globa.ld.m.os.l.am@gmail.com</a>
<a href=""mailto:g.l.o.ba.ld.m.osl.am@gmail.com"">g.l.o.ba.ld.m.osl.am@gmail.com</a>
<a href=""mailto:globa.l.dmos.la.m@gmail.com"">globa.l.dmos.la.m@gmail.com</a>
<a href=""mailto:glo.b.ald.mos.l.a.m@gmail.com"">glo.b.ald.mos.l.a.m@gmail.com</a>
<a href=""mailto:g.lobal.dmosl.am@gmail.com"">g.lobal.dmosl.am@gmail.com</a>
<a href=""mailto:g.lob.al.d.mos.l.a.m@gmail.com"">g.lob.al.d.mos.l.a.m@gmail.com</a>
<a href=""mailto:g.lobaldm.osl.am@gmail.com"">g.lobaldm.osl.am@gmail.com</a>
<a href=""mailto:glo.b.a.ld.m.o.s.l.a.m@gmail.com"">glo.b.a.ld.m.o.s.l.a.m@gmail.com</a>
<a href=""mailto:glo.baldmos.la.m@gmail.com"">glo.baldmos.la.m@gmail.com</a>
<a href=""mailto:glo.b.al.d.mo.s.l.a.m@gmail.com"">glo.b.al.d.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:gl.o.ba.ld.mo.sl.am@gmail.com"">gl.o.ba.ld.mo.sl.am@gmail.com</a>
<a href=""mailto:globaldm.osl.a.m@gmail.com"">globaldm.osl.a.m@gmail.com</a>
<a href=""mailto:gl.o.ba.l.d.mo.slam@gmail.com"">gl.o.ba.l.d.mo.slam@gmail.com</a>
<a href=""mailto:g.loba.ldm.os.l.am@gmail.com"">g.loba.ldm.os.l.am@gmail.com</a>
<a href=""mailto:g.lo.ba.l.d.moslam@gmail.com"">g.lo.ba.l.d.moslam@gmail.com</a>
<a href=""mailto:g.l.oba.ldmos.l.am@gmail.com"">g.l.oba.ldmos.l.am@gmail.com</a>
<a href=""mailto:g.lobal.d.mo.sla.m@gmail.com"">g.lobal.d.mo.sla.m@gmail.com</a>
<a href=""mailto:globa.l.d.m.os.l.am@gmail.com"">globa.l.d.m.os.l.am@gmail.com</a>
<a href=""mailto:g.l.o.ba.ldmo.sla.m@gmail.com"">g.l.o.ba.ldmo.sla.m@gmail.com</a>
<a href=""mailto:g.l.o.ba.ld.mos.la.m@gmail.com"">g.l.o.ba.ld.mos.la.m@gmail.com</a>
<a href=""mailto:glob.a.l.d.mos.l.am@gmail.com"">glob.a.l.d.mos.l.am@gmail.com</a>
<a href=""mailto:g.lo.b.aldmos.l.a.m@gmail.com"">g.lo.b.aldmos.l.a.m@gmail.com</a>
<a href=""mailto:glob.a.ld.mo.s.l.a.m@gmail.com"">glob.a.ld.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:g.l.oba.l.dmo.sl.a.m@gmail.com"">g.l.oba.l.dmo.sl.a.m@gmail.com</a>
<a href=""mailto:g.l.ob.aldmos.l.a.m@gmail.com"">g.l.ob.aldmos.l.a.m@gmail.com</a>
<a href=""mailto:g.lo.ba.ldm.oslam@gmail.com"">g.lo.ba.ldm.oslam@gmail.com</a>
<a href=""mailto:g.l.o.b.a.l.dmo.slam@gmail.com"">g.l.o.b.a.l.dmo.slam@gmail.com</a>
<a href=""mailto:g.l.ob.a.ldmo.s.lam@gmail.com"">g.l.ob.a.ldmo.s.lam@gmail.com</a>
<a href=""mailto:glo.bald.mo.s.l.a.m@gmail.com"">glo.bald.mo.s.l.a.m@gmail.com</a>
<a href=""mailto:g.lo.baldmos.l.am@gmail.com"">g.lo.baldmos.l.am@gmail.com</a>
<a href=""mailto:g.lo.bal.d.m.o.s.l.a.m@gmail.com"">g.lo.bal.d.m.o.s.l.a.m@gmail.com</a>
<a href=""mailto:gl.o.b.ald.mo.s.lam@gmail.com"">gl.o.b.ald.mo.s.lam@gmail.com</a>
<a href=""mailto:g.lo.ba.l.dm.os.lam@gmail.com"">g.lo.ba.l.dm.os.lam@gmail.com</a>
<a href=""mailto:glo.b.ald.mosl.a.m@gmail.com"">glo.b.ald.mosl.a.m@gmail.com</a>
<a href=""mailto:g.loba.l.d.mos.l.am@gmail.com"">g.loba.l.d.mos.l.am@gmail.com</a>
<a href=""mailto:g.l.ob.a.ld.m.o.s.lam@gmail.com"">g.l.ob.a.ld.m.o.s.lam@gmail.com</a>
<a href=""mailto:gl.o.b.a.ldm.oslam@gmail.com"">gl.o.b.a.ldm.oslam@gmail.com</a>
<a href=""mailto:gl.o.ba.ldmo.s.l.am@gmail.com"">gl.o.ba.ldmo.s.l.am@gmail.com</a>
<a href=""mailto:g.lobaldm.o.s.l.a.m@gmail.com"">g.lobaldm.o.s.l.a.m@gmail.com</a>
<a href=""mailto:g.lo.b.a.ld.mos.lam@gmail.com"">g.lo.b.a.ld.mos.lam@gmail.com</a>
<a href=""mailto:g.lo.bal.dm.o.sla.m@gmail.com"">g.lo.bal.dm.o.sla.m@gmail.com</a>
<a href=""mailto:g.l.o.b.al.d.m.o.sl.a.m@gmail.com"">g.l.o.b.al.d.m.o.sl.a.m@gmail.com</a>
<a href=""mailto:g.l.o.bal.d.m.osl.a.m@gmail.com"">g.l.o.bal.d.m.osl.a.m@gmail.com</a>
<a href=""mailto:glo.b.ald.mos.lam@gmail.com"">glo.b.ald.mos.lam@gmail.com</a>
<a href=""mailto:g.l.o.b.ald.mo.s.lam@gmail.com"">g.l.o.b.ald.mo.s.lam@gmail.com</a>
<a href=""mailto:glo.b.a.ldm.o.s.la.m@gmail.com"">glo.b.a.ldm.o.s.la.m@gmail.com</a>
<a href=""mailto:gl.obaldmo.slam@gmail.com"">gl.obaldmo.slam@gmail.com</a>
<a href=""mailto:g.l.oba.ld.mos.lam@gmail.com"">g.l.oba.ld.mos.lam@gmail.com</a>
<a href=""mailto:agentvictorokle@gmail.com"">agentvictorokle@gmail.com</a>
<a href=""mailto:age.ntv.ictor.o.k.l.e@gmail.com"">age.ntv.ictor.o.k.l.e@gmail.com</a>
<a href=""mailto:a.g.en.t.v.i.c.t.oro.k.l.e@gmail.com"">a.g.en.t.v.i.c.t.oro.k.l.e@gmail.com</a>
<a href=""mailto:ag.en.tv.icto.ro.kl.e@gmail.com"">ag.en.tv.icto.ro.kl.e@gmail.com</a>
<a href=""mailto:a.g.e.n.t.vic.toro.kl.e@gmail.com"">a.g.e.n.t.vic.toro.kl.e@gmail.com</a>
<a href=""mailto:ag.entv.ict.or.o.kle@gmail.com"">ag.entv.ict.or.o.kle@gmail.com</a>
<a href=""mailto:a.gent.vi.cto.r.o.kle@gmail.com"">a.gent.vi.cto.r.o.kle@gmail.com</a>
<a href=""mailto:ag.en.t.v.ict.or.o.k.l.e@gmail.com"">ag.en.t.v.ict.or.o.k.l.e@gmail.com</a>
<a href=""mailto:age.n.t.v.i.ctoro.k.le@gmail.com"">age.n.t.v.i.ctoro.k.le@gmail.com</a>
<a href=""mailto:a.g.en.tvic.to.rok.l.e@gmail.com"">a.g.en.tvic.to.rok.l.e@gmail.com</a>
<a href=""mailto:a.gentv.ic.t.o.rokl.e@gmail.com"">a.gentv.ic.t.o.rokl.e@gmail.com</a>
<a href=""mailto:ag.en.t.vi.ct.o.rokle@gmail.com"">ag.en.t.vi.ct.o.rokle@gmail.com</a>
<a href=""mailto:age.n.t.victor.o.kle@gmail.com"">age.n.t.victor.o.kle@gmail.com</a>
<a href=""mailto:age.ntv.ict.orok.le@gmail.com"">age.ntv.ict.orok.le@gmail.com</a>
<a href=""mailto:ag.entvi.c.tor.ok.l.e@gmail.com"">ag.entvi.c.tor.ok.l.e@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.i.ct.orok.le@gmail.com"">ag.e.n.t.v.i.ct.orok.le@gmail.com</a>
<a href=""mailto:a.g.e.nt.v.ict.oro.kl.e@gmail.com"">a.g.e.nt.v.ict.oro.kl.e@gmail.com</a>
<a href=""mailto:age.n.tv.i.ctor.okle@gmail.com"">age.n.tv.i.ctor.okle@gmail.com</a>
<a href=""mailto:agen.t.vic.to.ro.k.l.e@gmail.com"">agen.t.vic.to.ro.k.l.e@gmail.com</a>
<a href=""mailto:a.g.e.n.t.v.i.c.toro.kl.e@gmail.com"">a.g.e.n.t.v.i.c.toro.kl.e@gmail.com</a>
<a href=""mailto:age.ntv.i.c.t.oro.k.le@gmail.com"">age.ntv.i.c.t.oro.k.le@gmail.com</a>
<a href=""mailto:a.ge.ntvic.t.or.o.kl.e@gmail.com"">a.ge.ntvic.t.or.o.kl.e@gmail.com</a>
<a href=""mailto:ag.ent.v.ic.t.o.r.o.k.l.e@gmail.com"">ag.ent.v.ic.t.o.r.o.k.l.e@gmail.com</a>
<a href=""mailto:agent.v.i.c.t.or.o.k.l.e@gmail.com"">agent.v.i.c.t.or.o.k.l.e@gmail.com</a>
<a href=""mailto:age.n.tvic.t.oro.kl.e@gmail.com"">age.n.tvic.t.oro.kl.e@gmail.com</a>
<a href=""mailto:ag.e.ntv.i.ctorokle@gmail.com"">ag.e.ntv.i.ctorokle@gmail.com</a>
<a href=""mailto:a.ge.ntvi.c.to.ro.kle@gmail.com"">a.ge.ntvi.c.to.ro.kle@gmail.com</a>
<a href=""mailto:a.ge.n.tvi.c.t.o.r.ok.le@gmail.com"">a.ge.n.tvi.c.t.o.r.ok.le@gmail.com</a>
<a href=""mailto:agentv.i.c.t.o.r.okl.e@gmail.com"">agentv.i.c.t.o.r.okl.e@gmail.com</a>
<a href=""mailto:ag.e.nt.vict.or.o.k.le@gmail.com"">ag.e.nt.vict.or.o.k.le@gmail.com</a>
<a href=""mailto:a.gent.vi.c.tor.o.k.l.e@gmail.com"">a.gent.vi.c.tor.o.k.l.e@gmail.com</a>
<a href=""mailto:agen.t.vi.ct.oro.k.le@gmail.com"">agen.t.vi.ct.oro.k.le@gmail.com</a>
<a href=""mailto:ag.ent.vi.c.t.orok.le@gmail.com"">ag.ent.vi.c.t.orok.le@gmail.com</a>
<a href=""mailto:a.g.e.n.t.v.i.c.to.ro.kl.e@gmail.com"">a.g.e.n.t.v.i.c.to.ro.kl.e@gmail.com</a>
<a href=""mailto:ag.ent.v.ic.t.orokl.e@gmail.com"">ag.ent.v.ic.t.orokl.e@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.ict.o.r.o.k.le@gmail.com"">ag.e.n.t.v.ict.o.r.o.k.le@gmail.com</a>
<a href=""mailto:a.g.en.t.vic.tor.o.k.le@gmail.com"">a.g.en.t.vic.tor.o.k.le@gmail.com</a>
<a href=""mailto:age.ntvictoro.k.l.e@gmail.com"">age.ntvictoro.k.l.e@gmail.com</a>
<a href=""mailto:ag.entv.i.ct.o.r.ok.l.e@gmail.com"">ag.entv.i.ct.o.r.ok.l.e@gmail.com</a>
<a href=""mailto:a.g.e.nt.v.i.ct.oro.kl.e@gmail.com"">a.g.e.nt.v.i.ct.oro.kl.e@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.i.cto.r.okl.e@gmail.com"">ag.e.n.t.v.i.cto.r.okl.e@gmail.com</a>
<a href=""mailto:age.nt.v.i.c.tor.okl.e@gmail.com"">age.nt.v.i.c.tor.okl.e@gmail.com</a>
<a href=""mailto:a.g.en.tvi.c.toro.k.l.e@gmail.com"">a.g.en.tvi.c.toro.k.l.e@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.i.c.to.r.o.kl.e@gmail.com"">ag.e.n.t.v.i.c.to.r.o.kl.e@gmail.com</a>
<a href=""mailto:a.g.e.ntv.i.ct.o.ro.k.l.e@gmail.com"">a.g.e.ntv.i.ct.o.ro.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.v.ict.o.r.o.kl.e@gmail.com"">a.ge.n.t.v.ict.o.r.o.kl.e@gmail.com</a>
<a href=""mailto:a.gen.tv.ict.or.o.kle@gmail.com"">a.gen.tv.ict.or.o.kle@gmail.com</a>
<a href=""mailto:agen.tvic.t.o.r.ok.l.e@gmail.com"">agen.tvic.t.o.r.ok.l.e@gmail.com</a>
<a href=""mailto:a.gen.tv.i.ctor.o.k.l.e@gmail.com"">a.gen.tv.i.ctor.o.k.l.e@gmail.com</a>
<a href=""mailto:a.g.en.tvict.o.rokl.e@gmail.com"">a.g.en.tvict.o.rokl.e@gmail.com</a>
<a href=""mailto:a.g.e.nt.v.ic.to.rok.le@gmail.com"">a.g.e.nt.v.ic.to.rok.le@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.ic.to.ro.k.le@gmail.com"">ag.e.n.t.v.ic.to.ro.k.le@gmail.com</a>
<a href=""mailto:ag.e.n.t.victo.ro.k.le@gmail.com"">ag.e.n.t.victo.ro.k.le@gmail.com</a>
<a href=""mailto:a.ge.ntv.i.ctor.ok.l.e@gmail.com"">a.ge.ntv.i.ctor.ok.l.e@gmail.com</a>
<a href=""mailto:a.gen.tv.ic.to.r.ok.le@gmail.com"">a.gen.tv.ic.to.r.ok.le@gmail.com</a>
<a href=""mailto:ag.entv.i.ct.or.ok.le@gmail.com"">ag.entv.i.ct.or.ok.le@gmail.com</a>
<a href=""mailto:a.g.ent.v.ic.to.ro.kle@gmail.com"">a.g.ent.v.ic.to.ro.kle@gmail.com</a>
<a href=""mailto:a.g.en.t.vic.t.o.r.o.kle@gmail.com"">a.g.en.t.vic.t.o.r.o.kle@gmail.com</a>
<a href=""mailto:a.g.e.n.tvict.o.r.o.k.le@gmail.com"">a.g.e.n.tvict.o.r.o.k.le@gmail.com</a>
<a href=""mailto:ag.e.nt.vic.t.o.r.okl.e@gmail.com"">ag.e.nt.vic.t.o.r.okl.e@gmail.com</a>
<a href=""mailto:agen.t.vic.t.o.rok.l.e@gmail.com"">agen.t.vic.t.o.rok.l.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.victor.o.k.l.e@gmail.com"">a.ge.n.t.victor.o.k.l.e@gmail.com</a>
<a href=""mailto:a.g.e.ntv.i.c.t.o.r.o.kle@gmail.com"">a.g.e.ntv.i.c.t.o.r.o.kle@gmail.com</a>
<a href=""mailto:a.gent.victoro.kl.e@gmail.com"">a.gent.victoro.kl.e@gmail.com</a>
<a href=""mailto:a.gent.vic.t.o.ro.kl.e@gmail.com"">a.gent.vic.t.o.ro.kl.e@gmail.com</a>
<a href=""mailto:a.gen.tv.i.c.t.or.ok.le@gmail.com"">a.gen.tv.i.c.t.or.ok.le@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.ict.o.ro.k.le@gmail.com"">ag.e.n.t.v.ict.o.ro.k.le@gmail.com</a>
<a href=""mailto:a.g.e.ntvi.c.tor.o.kle@gmail.com"">a.g.e.ntvi.c.tor.o.kle@gmail.com</a>
<a href=""mailto:agentvi.ctor.o.k.l.e@gmail.com"">agentvi.ctor.o.k.l.e@gmail.com</a>
<a href=""mailto:a.gen.t.v.ict.orokl.e@gmail.com"">a.gen.t.v.ict.orokl.e@gmail.com</a>
<a href=""mailto:age.ntvi.ct.o.ro.k.l.e@gmail.com"">age.ntvi.ct.o.ro.k.l.e@gmail.com</a>
<a href=""mailto:a.g.en.tv.icto.ro.kle@gmail.com"">a.g.en.tv.icto.ro.kle@gmail.com</a>
<a href=""mailto:a.g.e.ntvi.ct.o.ro.k.l.e@gmail.com"">a.g.e.ntvi.ct.o.ro.k.l.e@gmail.com</a>
<a href=""mailto:a.g.e.ntv.ict.orokle@gmail.com"">a.g.e.ntv.ict.orokle@gmail.com</a>
<a href=""mailto:a.g.e.nt.vict.or.o.k.l.e@gmail.com"">a.g.e.nt.vict.or.o.k.l.e@gmail.com</a>
<a href=""mailto:a.g.e.n.t.v.i.ct.o.r.o.kl.e@gmail.com"">a.g.e.n.t.v.i.ct.o.r.o.kl.e@gmail.com</a>
<a href=""mailto:a.ge.nt.vi.c.to.r.o.kle@gmail.com"">a.ge.nt.vi.c.to.r.o.kle@gmail.com</a>
<a href=""mailto:agent.vi.ct.o.ro.k.l.e@gmail.com"">agent.vi.ct.o.ro.k.l.e@gmail.com</a>
<a href=""mailto:a.g.e.n.t.victoro.kl.e@gmail.com"">a.g.e.n.t.victoro.kl.e@gmail.com</a>
<a href=""mailto:agent.vict.o.r.ok.le@gmail.com"">agent.vict.o.r.ok.le@gmail.com</a>
<a href=""mailto:agen.tv.ic.to.r.okle@gmail.com"">agen.tv.ic.to.r.okle@gmail.com</a>
<a href=""mailto:a.gent.vict.o.rokl.e@gmail.com"">a.gent.vict.o.rokl.e@gmail.com</a>
<a href=""mailto:age.nt.v.ic.t.o.ro.kl.e@gmail.com"">age.nt.v.ic.t.o.ro.kl.e@gmail.com</a>
<a href=""mailto:a.g.en.t.v.i.ct.or.okl.e@gmail.com"">a.g.en.t.v.i.ct.or.okl.e@gmail.com</a>
<a href=""mailto:a.gentv.ic.t.oro.k.l.e@gmail.com"">a.gentv.ic.t.oro.k.l.e@gmail.com</a>
<a href=""mailto:a.gen.tv.i.c.to.ro.k.le@gmail.com"">a.gen.tv.i.c.to.ro.k.le@gmail.com</a>
<a href=""mailto:a.ge.n.t.v.i.ctor.o.kle@gmail.com"">a.ge.n.t.v.i.ctor.o.kle@gmail.com</a>
<a href=""mailto:a.gen.tv.i.c.to.r.okle@gmail.com"">a.gen.tv.i.c.to.r.okle@gmail.com</a>
<a href=""mailto:ag.en.tvi.c.toro.kl.e@gmail.com"">ag.en.tvi.c.toro.kl.e@gmail.com</a>
<a href=""mailto:ag.e.n.tvic.t.or.ok.l.e@gmail.com"">ag.e.n.tvic.t.or.ok.l.e@gmail.com</a>
<a href=""mailto:a.ge.ntvi.c.t.o.r.o.kl.e@gmail.com"">a.ge.ntvi.c.t.o.r.o.kl.e@gmail.com</a>
<a href=""mailto:age.n.t.vic.toro.kle@gmail.com"">age.n.t.vic.toro.kle@gmail.com</a>
<a href=""mailto:ag.ent.vi.c.tor.o.kl.e@gmail.com"">ag.ent.vi.c.tor.o.kl.e@gmail.com</a>
<a href=""mailto:ag.e.nt.vi.ct.o.r.o.k.l.e@gmail.com"">ag.e.nt.vi.ct.o.r.o.k.l.e@gmail.com</a>
<a href=""mailto:a.g.e.n.tv.ic.t.orokle@gmail.com"">a.g.e.n.tv.ic.t.orokle@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.ict.o.r.o.kle@gmail.com"">ag.e.n.t.v.ict.o.r.o.kle@gmail.com</a>
<a href=""mailto:a.g.en.tv.ic.tor.o.k.le@gmail.com"">a.g.en.tv.ic.tor.o.k.le@gmail.com</a>
<a href=""mailto:a.g.e.ntvi.c.t.or.ok.le@gmail.com"">a.g.e.ntvi.c.t.or.ok.le@gmail.com</a>
<a href=""mailto:agen.t.vic.toro.k.le@gmail.com"">agen.t.vic.toro.k.le@gmail.com</a>
<a href=""mailto:a.g.entvic.to.r.o.k.l.e@gmail.com"">a.g.entvic.to.r.o.k.l.e@gmail.com</a>
<a href=""mailto:agent.vict.o.r.okle@gmail.com"">agent.vict.o.r.okle@gmail.com</a>
<a href=""mailto:a.gen.tv.ict.o.r.o.kl.e@gmail.com"">a.gen.tv.ict.o.r.o.kl.e@gmail.com</a>
<a href=""mailto:ag.e.nt.vic.t.or.okle@gmail.com"">ag.e.nt.vic.t.or.okle@gmail.com</a>
<a href=""mailto:a.g.en.tv.ic.t.orok.le@gmail.com"">a.g.en.tv.ic.t.orok.le@gmail.com</a>
<a href=""mailto:a.ge.nt.v.i.c.t.o.rokle@gmail.com"">a.ge.nt.v.i.c.t.o.rokle@gmail.com</a>
<a href=""mailto:a.g.e.n.t.v.i.ct.o.r.o.k.le@gmail.com"">a.g.e.n.t.v.i.ct.o.r.o.k.le@gmail.com</a>
<a href=""mailto:a.ge.n.tvic.t.or.o.kle@gmail.com"">a.ge.n.tvic.t.or.o.kle@gmail.com</a>
<a href=""mailto:a.g.en.t.v.i.ctor.o.k.l.e@gmail.com"">a.g.en.t.v.i.ctor.o.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.n.tv.i.ct.o.r.o.k.le@gmail.com"">a.ge.n.tv.i.ct.o.r.o.k.le@gmail.com</a>
<a href=""mailto:a.g.e.n.t.vi.c.t.orokle@gmail.com"">a.g.e.n.t.vi.c.t.orokle@gmail.com</a>
<a href=""mailto:a.gentvict.o.rokle@gmail.com"">a.gentvict.o.rokle@gmail.com</a>
<a href=""mailto:a.ge.nt.vi.c.tor.ok.l.e@gmail.com"">a.ge.nt.vi.c.tor.ok.l.e@gmail.com</a>
<a href=""mailto:ag.entv.i.c.to.r.o.kle@gmail.com"">ag.entv.i.c.to.r.o.kle@gmail.com</a>
<a href=""mailto:ag.en.tvict.o.r.okl.e@gmail.com"">ag.en.tvict.o.r.okl.e@gmail.com</a>
<a href=""mailto:age.n.t.v.i.ctorok.l.e@gmail.com"">age.n.t.v.i.ctorok.l.e@gmail.com</a>
<a href=""mailto:a.gen.t.vict.o.rokl.e@gmail.com"">a.gen.t.vict.o.rokl.e@gmail.com</a>
<a href=""mailto:a.g.e.n.tv.ic.t.or.okl.e@gmail.com"">a.g.e.n.tv.ic.t.or.okl.e@gmail.com</a>
<a href=""mailto:a.g.e.nt.vict.or.o.k.le@gmail.com"">a.g.e.nt.vict.or.o.k.le@gmail.com</a>
<a href=""mailto:agentvi.c.t.orok.le@gmail.com"">agentvi.c.t.orok.le@gmail.com</a>
<a href=""mailto:a.gen.tv.ict.oro.kl.e@gmail.com"">a.gen.tv.ict.oro.kl.e@gmail.com</a>
<a href=""mailto:a.g.e.ntv.ic.t.or.o.k.l.e@gmail.com"">a.g.e.ntv.ic.t.or.o.k.l.e@gmail.com</a>
<a href=""mailto:a.g.entv.ic.to.ro.k.l.e@gmail.com"">a.g.entv.ic.to.ro.k.l.e@gmail.com</a>
<a href=""mailto:ag.e.nt.v.i.c.t.oro.k.le@gmail.com"">ag.e.nt.v.i.c.t.oro.k.le@gmail.com</a>
<a href=""mailto:a.gen.t.v.ict.o.ro.kle@gmail.com"">a.gen.t.v.ict.o.ro.kle@gmail.com</a>
<a href=""mailto:a.g.ent.v.ic.tor.o.kl.e@gmail.com"">a.g.ent.v.ic.tor.o.kl.e@gmail.com</a>
<a href=""mailto:a.g.en.tvict.or.ok.le@gmail.com"">a.g.en.tvict.or.ok.le@gmail.com</a>
<a href=""mailto:a.ge.ntvi.c.to.rokl.e@gmail.com"">a.ge.ntvi.c.to.rokl.e@gmail.com</a>
<a href=""mailto:a.g.ent.vict.or.o.k.l.e@gmail.com"">a.g.ent.vict.or.o.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.nt.vic.t.o.r.okl.e@gmail.com"">a.ge.nt.vic.t.o.r.okl.e@gmail.com</a>
<a href=""mailto:ag.e.n.tvicto.rokle@gmail.com"">ag.e.n.tvicto.rokle@gmail.com</a>
<a href=""mailto:age.n.t.v.ic.t.or.ok.l.e@gmail.com"">age.n.t.v.ic.t.or.ok.l.e@gmail.com</a>
<a href=""mailto:ag.e.n.tvi.ct.or.o.kle@gmail.com"">ag.e.n.tvi.ct.or.o.kle@gmail.com</a>
<a href=""mailto:a.gen.tv.i.ctor.okl.e@gmail.com"">a.gen.tv.i.ctor.okl.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.vi.ctorokle@gmail.com"">a.ge.n.t.vi.ctorokle@gmail.com</a>
<a href=""mailto:ag.e.nt.vi.ct.or.ok.le@gmail.com"">ag.e.nt.vi.ct.or.ok.le@gmail.com</a>
<a href=""mailto:age.n.tvict.or.o.k.le@gmail.com"">age.n.tvict.or.o.k.le@gmail.com</a>
<a href=""mailto:ag.entvi.c.t.o.r.o.k.le@gmail.com"">ag.entvi.c.t.o.r.o.k.le@gmail.com</a>
<a href=""mailto:ag.entv.ict.oro.k.le@gmail.com"">ag.entv.ict.oro.k.le@gmail.com</a>
<a href=""mailto:agent.vic.t.o.r.okle@gmail.com"">agent.vic.t.o.r.okle@gmail.com</a>
<a href=""mailto:a.g.en.t.v.ic.t.orokl.e@gmail.com"">a.g.en.t.v.ic.t.orokl.e@gmail.com</a>
<a href=""mailto:a.g.en.tvicto.rokle@gmail.com"">a.g.en.tvicto.rokle@gmail.com</a>
<a href=""mailto:agentv.ic.t.orokl.e@gmail.com"">agentv.ic.t.orokl.e@gmail.com</a>
<a href=""mailto:a.ge.nt.victor.o.kle@gmail.com"">a.ge.nt.victor.o.kle@gmail.com</a>
<a href=""mailto:a.g.en.tv.ict.oro.kle@gmail.com"">a.g.en.tv.ict.oro.kle@gmail.com</a>
<a href=""mailto:a.gen.tv.i.c.to.r.o.k.l.e@gmail.com"">a.gen.tv.i.c.to.r.o.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.vi.ct.o.r.okl.e@gmail.com"">a.ge.n.t.vi.ct.o.r.okl.e@gmail.com</a>
<a href=""mailto:ag.en.t.vi.c.t.oro.k.l.e@gmail.com"">ag.en.t.vi.c.t.oro.k.l.e@gmail.com</a>
<a href=""mailto:ag.e.nt.v.ict.orokl.e@gmail.com"">ag.e.nt.v.ict.orokl.e@gmail.com</a>
<a href=""mailto:age.n.t.v.ic.tor.ok.l.e@gmail.com"">age.n.t.v.ic.tor.ok.l.e@gmail.com</a>
<a href=""mailto:a.g.ent.v.i.c.t.o.ro.kl.e@gmail.com"">a.g.ent.v.i.c.t.o.ro.kl.e@gmail.com</a>
<a href=""mailto:age.n.t.vic.to.r.ok.l.e@gmail.com"">age.n.t.vic.to.r.ok.l.e@gmail.com</a>
<a href=""mailto:a.ge.nt.v.i.c.tor.o.k.l.e@gmail.com"">a.ge.nt.v.i.c.tor.o.k.l.e@gmail.com</a>
<a href=""mailto:ag.e.n.tv.i.c.torokl.e@gmail.com"">ag.e.n.tv.i.c.torokl.e@gmail.com</a>
<a href=""mailto:ag.entv.ictor.ok.le@gmail.com"">ag.entv.ictor.ok.le@gmail.com</a>
<a href=""mailto:a.g.en.t.v.ict.or.o.kle@gmail.com"">a.g.en.t.v.ict.or.o.kle@gmail.com</a>
<a href=""mailto:agen.tv.i.cto.r.ok.le@gmail.com"">agen.tv.i.cto.r.ok.le@gmail.com</a>
<a href=""mailto:age.n.t.v.ic.to.r.o.kle@gmail.com"">age.n.t.v.ic.to.r.o.kle@gmail.com</a>
<a href=""mailto:a.g.e.n.tv.ic.to.ro.kle@gmail.com"">a.g.e.n.tv.ic.to.ro.kle@gmail.com</a>
<a href=""mailto:a.gen.t.vi.c.torokl.e@gmail.com"">a.gen.t.vi.c.torokl.e@gmail.com</a>
<a href=""mailto:a.gen.t.v.ic.toro.k.l.e@gmail.com"">a.gen.t.v.ic.toro.k.l.e@gmail.com</a>
<a href=""mailto:a.g.entvi.c.t.o.rok.le@gmail.com"">a.g.entvi.c.t.o.rok.le@gmail.com</a>
<a href=""mailto:ag.e.n.tv.i.c.t.o.ro.kle@gmail.com"">ag.e.n.tv.i.c.t.o.ro.kle@gmail.com</a>
<a href=""mailto:a.g.e.ntvic.t.o.r.o.k.l.e@gmail.com"">a.g.e.ntvic.t.o.r.o.k.l.e@gmail.com</a>
<a href=""mailto:agentv.i.ctoro.kle@gmail.com"">agentv.i.ctoro.kle@gmail.com</a>
<a href=""mailto:a.gen.tv.icto.r.o.k.l.e@gmail.com"">a.gen.tv.icto.r.o.k.l.e@gmail.com</a>
<a href=""mailto:a.gent.victor.o.kl.e@gmail.com"">a.gent.victor.o.kl.e@gmail.com</a>
<a href=""mailto:a.gen.tv.i.c.torokle@gmail.com"">a.gen.tv.i.c.torokle@gmail.com</a>
<a href=""mailto:age.n.t.v.i.c.t.orokl.e@gmail.com"">age.n.t.v.i.c.t.orokl.e@gmail.com</a>
<a href=""mailto:a.g.ent.vi.ct.oro.kle@gmail.com"">a.g.ent.vi.ct.oro.kle@gmail.com</a>
<a href=""mailto:age.n.tv.i.c.t.o.r.ok.le@gmail.com"">age.n.tv.i.c.t.o.r.ok.le@gmail.com</a>
<a href=""mailto:ag.en.tv.i.c.to.rok.le@gmail.com"">ag.en.tv.i.c.to.rok.le@gmail.com</a>
<a href=""mailto:age.ntvi.cto.r.o.kle@gmail.com"">age.ntvi.cto.r.o.kle@gmail.com</a>
<a href=""mailto:agen.t.v.ict.o.ro.k.l.e@gmail.com"">agen.t.v.ict.o.ro.k.l.e@gmail.com</a>
<a href=""mailto:age.ntv.i.ct.or.o.kl.e@gmail.com"">age.ntv.i.ct.or.o.kl.e@gmail.com</a>
<a href=""mailto:agen.t.v.ic.to.r.ok.le@gmail.com"">agen.t.v.ic.to.r.ok.le@gmail.com</a>
<a href=""mailto:ag.e.n.t.v.ict.or.okl.e@gmail.com"">ag.e.n.t.v.ict.or.okl.e@gmail.com</a>
<a href=""mailto:a.g.entvi.c.t.oro.k.l.e@gmail.com"">a.g.entvi.c.t.oro.k.l.e@gmail.com</a>
<a href=""mailto:a.g.en.tvic.to.ro.k.l.e@gmail.com"">a.g.en.tvic.to.ro.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.v.ictor.o.kle@gmail.com"">a.ge.n.t.v.ictor.o.kle@gmail.com</a>
<a href=""mailto:a.g.e.n.tv.i.c.to.r.o.kl.e@gmail.com"">a.g.e.n.tv.i.c.to.r.o.kl.e@gmail.com</a>
<a href=""mailto:ag.en.t.vic.to.r.o.kl.e@gmail.com"">ag.en.t.vic.to.r.o.kl.e@gmail.com</a>
<a href=""mailto:a.g.en.t.vi.c.t.o.ro.k.l.e@gmail.com"">a.g.en.t.vi.c.t.o.ro.k.l.e@gmail.com</a>
<a href=""mailto:agen.tvic.t.oro.kle@gmail.com"">agen.tvic.t.oro.kle@gmail.com</a>
<a href=""mailto:a.ge.nt.v.icto.ro.kl.e@gmail.com"">a.ge.nt.v.icto.ro.kl.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.v.ic.t.oro.k.l.e@gmail.com"">a.ge.n.t.v.ic.t.oro.k.l.e@gmail.com</a>
<a href=""mailto:agen.t.v.ic.t.o.ro.kle@gmail.com"">agen.t.v.ic.t.o.ro.kle@gmail.com</a>
<a href=""mailto:a.g.en.t.v.ic.to.rok.le@gmail.com"">a.g.en.t.v.ic.to.rok.le@gmail.com</a>
<a href=""mailto:a.g.ent.v.icto.r.o.k.l.e@gmail.com"">a.g.ent.v.icto.r.o.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.nt.v.i.c.tor.okl.e@gmail.com"">a.ge.nt.v.i.c.tor.okl.e@gmail.com</a>
<a href=""mailto:a.gent.vict.o.r.okl.e@gmail.com"">a.gent.vict.o.r.okl.e@gmail.com</a>
<a href=""mailto:a.gent.v.ic.t.o.r.o.k.l.e@gmail.com"">a.gent.v.ic.t.o.r.o.k.l.e@gmail.com</a>
<a href=""mailto:a.ge.n.t.victor.o.kle@gmail.com"">a.ge.n.t.victor.o.kle@gmail.com</a>
<a href=""mailto:ag.e.n.t.vic.t.o.ro.kle@gmail.com"">ag.e.n.t.vic.t.o.ro.kle@gmail.com</a>
<a href=""mailto:ag.e.n.tvic.t.orokle@gmail.com"">ag.e.n.tvic.t.orokle@gmail.com</a>
<a href=""mailto:a.ge.ntv.i.ct.o.ro.kle@gmail.com"">a.ge.ntv.i.ct.o.ro.kle@gmail.com</a>
<a href=""mailto:a.gen.tvi.c.torok.le@gmail.com"">a.gen.tvi.c.torok.le@gmail.com</a>
<a href=""mailto:a.gen.tv.i.c.to.r.o.kle@gmail.com"">a.gen.tv.i.c.to.r.o.kle@gmail.com</a>
<a href=""mailto:a.g.e.n.tv.ic.to.r.okle@gmail.com"">a.g.e.n.tv.ic.to.r.okle@gmail.com</a>
<a href=""mailto:age.n.tvi.ct.o.rok.l.e@gmail.com"">age.n.tvi.ct.o.rok.l.e@gmail.com</a>
<a href=""mailto:a.g.entvi.ct.orokle@gmail.com"">a.g.entvi.ct.orokle@gmail.com</a>
<a href=""mailto:agentv.icto.ro.k.l.e@gmail.com"">agentv.icto.ro.k.l.e@gmail.com</a>
<a href=""mailto:pmbusking@gmail.com"">pmbusking@gmail.com</a>
<a href=""mailto:p.m.bu.s.k.in.g@gmail.com"">p.m.bu.s.k.in.g@gmail.com</a>
<a href=""mailto:pmbuski.ng@gmail.com"">pmbuski.ng@gmail.com</a>
<a href=""mailto:p.mb.u.skin.g@gmail.com"">p.mb.u.skin.g@gmail.com</a>
<a href=""mailto:pm.bus.ki.ng@gmail.com"">pm.bus.ki.ng@gmail.com</a>
<a href=""mailto:p.mbus.k.ing@gmail.com"">p.mbus.k.ing@gmail.com</a>
<a href=""mailto:p.m.b.us.kin.g@gmail.com"">p.m.b.us.kin.g@gmail.com</a>
<a href=""mailto:pmb.usking@gmail.com"">pmb.usking@gmail.com</a>
<a href=""mailto:p.mbu.s.king@gmail.com"">p.mbu.s.king@gmail.com</a>
<a href=""mailto:pmbus.kin.g@gmail.com"">pmbus.kin.g@gmail.com</a>
<a href=""mailto:p.mb.uski.ng@gmail.com"">p.mb.uski.ng@gmail.com</a>
<a href=""mailto:pmbusking@gmail.com"">pmbusking@gmail.com</a>
<a href=""mailto:p.m.b.u.sk.in.g@gmail.com"">p.m.b.u.sk.in.g@gmail.com</a>
<a href=""mailto:pm.busk.i.n.g@gmail.com"">pm.busk.i.n.g@gmail.com</a>
<a href=""mailto:pm.b.u.s.ki.ng@gmail.com"">pm.b.u.s.ki.ng@gmail.com</a>
<a href=""mailto:p.mb.usk.in.g@gmail.com"">p.mb.usk.in.g@gmail.com</a>
<a href=""mailto:pmbu.s.ki.n.g@gmail.com"">pmbu.s.ki.n.g@gmail.com</a>
<a href=""mailto:pm.busk.i.ng@gmail.com"">pm.busk.i.ng@gmail.com</a>
<a href=""mailto:pmb.u.sk.i.n.g@gmail.com"">pmb.u.sk.i.n.g@gmail.com</a>
<a href=""mailto:pm.bu.s.ki.n.g@gmail.com"">pm.bu.s.ki.n.g@gmail.com</a>
<a href=""mailto:pm.b.u.s.k.in.g@gmail.com"">pm.b.u.s.k.in.g@gmail.com</a>
<a href=""mailto:pm.bu.s.k.ing@gmail.com"">pm.bu.s.k.ing@gmail.com</a>
<a href=""mailto:p.mb.usk.i.n.g@gmail.com"">p.mb.usk.i.n.g@gmail.com</a>
<a href=""mailto:p.m.b.usk.in.g@gmail.com"">p.m.b.usk.in.g@gmail.com</a>
<a href=""mailto:pmb.u.s.k.i.n.g@gmail.com"">pmb.u.s.k.i.n.g@gmail.com</a>
<a href=""mailto:pm.bus.ki.n.g@gmail.com"">pm.bus.ki.n.g@gmail.com</a>
<a href=""mailto:p.mbusk.ing@gmail.com"">p.mbusk.ing@gmail.com</a>
<a href=""mailto:pmbu.s.k.in.g@gmail.com"">pmbu.s.k.in.g@gmail.com</a>
<a href=""mailto:pm.b.us.ki.ng@gmail.com"">pm.b.us.ki.ng@gmail.com</a>
<a href=""mailto:p.m.bu.s.ki.ng@gmail.com"">p.m.bu.s.ki.ng@gmail.com</a>
<a href=""mailto:pmbu.s.ki.ng@gmail.com"">pmbu.s.ki.ng@gmail.com</a>
<a href=""mailto:pmb.u.s.k.in.g@gmail.com"">pmb.u.s.k.in.g@gmail.com</a>
<a href=""mailto:p.m.busk.ing@gmail.com"">p.m.busk.ing@gmail.com</a>
<a href=""mailto:p.mbuski.ng@gmail.com"">p.mbuski.ng@gmail.com</a>
<a href=""mailto:p.mb.uskin.g@gmail.com"">p.mb.uskin.g@gmail.com</a>
<a href=""mailto:pm.b.u.sk.i.ng@gmail.com"">pm.b.u.sk.i.ng@gmail.com</a>
<a href=""mailto:p.mbuski.n.g@gmail.com"">p.mbuski.n.g@gmail.com</a>
<a href=""mailto:p.mbus.k.i.n.g@gmail.com"">p.mbus.k.i.n.g@gmail.com</a>
<a href=""mailto:p.m.busking@gmail.com"">p.m.busking@gmail.com</a>
<a href=""mailto:pm.buski.ng@gmail.com"">pm.buski.ng@gmail.com</a>
<a href=""mailto:p.mb.us.k.i.ng@gmail.com"">p.mb.us.k.i.ng@gmail.com</a>
<a href=""mailto:pm.b.u.sk.in.g@gmail.com"">pm.b.u.sk.in.g@gmail.com</a>
<a href=""mailto:p.mbu.ski.n.g@gmail.com"">p.mbu.ski.n.g@gmail.com</a>
<a href=""mailto:pmbu.s.kin.g@gmail.com"">pmbu.s.kin.g@gmail.com</a>
<a href=""mailto:p.m.b.u.s.k.in.g@gmail.com"">p.m.b.u.s.k.in.g@gmail.com</a>
<a href=""mailto:p.m.b.usk.i.ng@gmail.com"">p.m.b.usk.i.ng@gmail.com</a>
<a href=""mailto:pm.b.us.k.i.n.g@gmail.com"">pm.b.us.k.i.n.g@gmail.com</a>
<a href=""mailto:p.m.b.u.s.ki.n.g@gmail.com"">p.m.b.u.s.ki.n.g@gmail.com</a>
<a href=""mailto:p.m.b.us.k.i.n.g@gmail.com"">p.m.b.us.k.i.n.g@gmail.com</a>
<a href=""mailto:pm.bu.s.kin.g@gmail.com"">pm.bu.s.kin.g@gmail.com</a>
<a href=""mailto:pm.b.usking@gmail.com"">pm.b.usking@gmail.com</a>
<a href=""mailto:p.m.bu.s.k.ing@gmail.com"">p.m.bu.s.k.ing@gmail.com</a>
<a href=""mailto:p.mb.u.s.k.ing@gmail.com"">p.mb.u.s.k.ing@gmail.com</a>
<a href=""mailto:pmbusk.i.n.g@gmail.com"">pmbusk.i.n.g@gmail.com</a>
<a href=""mailto:pmbu.s.k.ing@gmail.com"">pmbu.s.k.ing@gmail.com</a>
<a href=""mailto:p.m.bu.sk.ing@gmail.com"">p.m.bu.sk.ing@gmail.com</a>
<a href=""mailto:pm.bus.k.i.ng@gmail.com"">pm.bus.k.i.ng@gmail.com</a>
<a href=""mailto:p.m.b.u.sk.i.n.g@gmail.com"">p.m.b.u.sk.i.n.g@gmail.com</a>
<a href=""mailto:pm.b.us.k.i.ng@gmail.com"">pm.b.us.k.i.ng@gmail.com</a>
<a href=""mailto:p.mb.usk.ing@gmail.com"">p.mb.usk.ing@gmail.com</a>
<a href=""mailto:pm.buskin.g@gmail.com"">pm.buskin.g@gmail.com</a>
<a href=""mailto:p.m.b.u.s.k.ing@gmail.com"">p.m.b.u.s.k.ing@gmail.com</a>
<a href=""mailto:p.m.b.u.s.king@gmail.com"">p.m.b.u.s.king@gmail.com</a>
<a href=""mailto:pmbu.sk.i.n.g@gmail.com"">pmbu.sk.i.n.g@gmail.com</a>
<a href=""mailto:p.mb.u.s.ki.ng@gmail.com"">p.mb.u.s.ki.ng@gmail.com</a>
<a href=""mailto:p.m.bu.sk.i.n.g@gmail.com"">p.m.bu.sk.i.n.g@gmail.com</a>
<a href=""mailto:pmb.us.ki.ng@gmail.com"">pmb.us.ki.ng@gmail.com</a>
<a href=""mailto:pm.b.u.ski.n.g@gmail.com"">pm.b.u.ski.n.g@gmail.com</a>
<a href=""mailto:pm.b.usk.i.n.g@gmail.com"">pm.b.usk.i.n.g@gmail.com</a>
<a href=""mailto:pm.bu.sk.i.ng@gmail.com"">pm.bu.sk.i.ng@gmail.com</a>
<a href=""mailto:p.m.b.us.k.in.g@gmail.com"">p.m.b.us.k.in.g@gmail.com</a>
<a href=""mailto:pmbus.k.i.n.g@gmail.com"">pmbus.k.i.n.g@gmail.com</a>
<a href=""mailto:pmb.uski.n.g@gmail.com"">pmb.uski.n.g@gmail.com</a>
<a href=""mailto:p.m.bus.k.ing@gmail.com"">p.m.bus.k.ing@gmail.com</a>
<a href=""mailto:p.mb.usk.i.ng@gmail.com"">p.mb.usk.i.ng@gmail.com</a>
<a href=""mailto:p.mbu.sking@gmail.com"">p.mbu.sking@gmail.com</a>
<a href=""mailto:pm.bu.sking@gmail.com"">pm.bu.sking@gmail.com</a>
<a href=""mailto:p.mbu.s.kin.g@gmail.com"">p.mbu.s.kin.g@gmail.com</a>
<a href=""mailto:pmbusk.ing@gmail.com"">pmbusk.ing@gmail.com</a>
<a href=""mailto:p.m.bu.sk.i.ng@gmail.com"">p.m.bu.sk.i.ng@gmail.com</a>
<a href=""mailto:p.mb.u.s.ki.n.g@gmail.com"">p.mb.u.s.ki.n.g@gmail.com</a>
<a href=""mailto:p.mbu.s.k.ing@gmail.com"">p.mbu.s.k.ing@gmail.com</a>
<a href=""mailto:pm.bu.s.k.i.n.g@gmail.com"">pm.bu.s.k.i.n.g@gmail.com</a>
<a href=""mailto:p.mb.u.sk.ing@gmail.com"">p.mb.u.sk.ing@gmail.com</a>
<a href=""mailto:p.m.b.u.sk.i.ng@gmail.com"">p.m.b.u.sk.i.ng@gmail.com</a>
<a href=""mailto:pmb.u.s.kin.g@gmail.com"">pmb.u.s.kin.g@gmail.com</a>
<a href=""mailto:p.m.b.u.ski.ng@gmail.com"">p.m.b.u.ski.ng@gmail.com</a>
<a href=""mailto:pmb.usk.i.n.g@gmail.com"">pmb.usk.i.n.g@gmail.com</a>
<a href=""mailto:pmbu.s.k.i.ng@gmail.com"">pmbu.s.k.i.ng@gmail.com</a>
<a href=""mailto:pm.b.uskin.g@gmail.com"">pm.b.uskin.g@gmail.com</a>
<a href=""mailto:p.mbuskin.g@gmail.com"">p.mbuskin.g@gmail.com</a>
<a href=""mailto:pmbusk.i.ng@gmail.com"">pmbusk.i.ng@gmail.com</a>
<a href=""mailto:pmb.u.s.king@gmail.com"">pmb.u.s.king@gmail.com</a>
<a href=""mailto:p.mb.usking@gmail.com"">p.mb.usking@gmail.com</a>
<a href=""mailto:pm.bu.s.ki.ng@gmail.com"">pm.bu.s.ki.ng@gmail.com</a>
<a href=""mailto:p.mbu.ski.ng@gmail.com"">p.mbu.ski.ng@gmail.com</a>
<a href=""mailto:pm.b.us.k.ing@gmail.com"">pm.b.us.k.ing@gmail.com</a>
<a href=""mailto:pmb.usk.i.ng@gmail.com"">pmb.usk.i.ng@gmail.com</a>
<a href=""mailto:pmb.u.ski.ng@gmail.com"">pmb.u.ski.ng@gmail.com</a>
<a href=""mailto:p.m.bus.ki.n.g@gmail.com"">p.m.bus.ki.n.g@gmail.com</a>
<a href=""mailto:p.m.b.u.s.k.i.n.g@gmail.com"">p.m.b.u.s.k.i.n.g@gmail.com</a>
<a href=""mailto:p.mb.us.kin.g@gmail.com"">p.mb.us.kin.g@gmail.com</a>
<a href=""mailto:pm.busking@gmail.com"">pm.busking@gmail.com</a>
<a href=""mailto:pm.bu.sk.in.g@gmail.com"">pm.bu.sk.in.g@gmail.com</a>
<a href=""mailto:pmbusk.in.g@gmail.com"">pmbusk.in.g@gmail.com</a>
<a href=""mailto:pm.b.usk.i.ng@gmail.com"">pm.b.usk.i.ng@gmail.com</a>
<a href=""mailto:pmbu.sking@gmail.com"">pmbu.sking@gmail.com</a>
<a href=""mailto:p.m.bu.ski.n.g@gmail.com"">p.m.bu.ski.n.g@gmail.com</a>
<a href=""mailto:pm.bus.k.ing@gmail.com"">pm.bus.k.ing@gmail.com</a>
<a href=""mailto:p.m.b.uskin.g@gmail.com"">p.m.b.uskin.g@gmail.com</a>
<a href=""mailto:p.m.bu.skin.g@gmail.com"">p.m.bu.skin.g@gmail.com</a>
<a href=""mailto:pm.busk.in.g@gmail.com"">pm.busk.in.g@gmail.com</a>
<a href=""mailto:pm.b.u.s.ki.n.g@gmail.com"">pm.b.u.s.ki.n.g@gmail.com</a>
<a href=""mailto:pm.b.u.s.k.i.n.g@gmail.com"">pm.b.u.s.k.i.n.g@gmail.com</a>
<a href=""mailto:p.mb.us.k.ing@gmail.com"">p.mb.us.k.ing@gmail.com</a>
<a href=""mailto:p.mbus.k.i.ng@gmail.com"">p.mbus.k.i.ng@gmail.com</a>
<a href=""mailto:p.m.buski.ng@gmail.com"">p.m.buski.ng@gmail.com</a>
<a href=""mailto:p.m.bu.s.kin.g@gmail.com"">p.m.bu.s.kin.g@gmail.com</a>
<a href=""mailto:pmb.u.sk.ing@gmail.com"">pmb.u.sk.ing@gmail.com</a>
<a href=""mailto:p.m.bus.k.in.g@gmail.com"">p.m.bus.k.in.g@gmail.com</a>
<a href=""mailto:p.mbusk.i.n.g@gmail.com"">p.mbusk.i.n.g@gmail.com</a>
<a href=""mailto:pmb.u.s.ki.ng@gmail.com"">pmb.u.s.ki.ng@gmail.com</a>
<a href=""mailto:p.m.bus.ki.ng@gmail.com"">p.m.bus.ki.ng@gmail.com</a>
<a href=""mailto:p.mb.u.sk.in.g@gmail.com"">p.mb.u.sk.in.g@gmail.com</a>
<a href=""mailto:p.mb.us.k.i.n.g@gmail.com"">p.mb.us.k.i.n.g@gmail.com</a>
<a href=""mailto:p.mb.u.s.k.i.n.g@gmail.com"">p.mb.u.s.k.i.n.g@gmail.com</a>
<a href=""mailto:p.mbu.skin.g@gmail.com"">p.mbu.skin.g@gmail.com</a>
<a href=""mailto:pm.bus.kin.g@gmail.com"">pm.bus.kin.g@gmail.com</a>
<a href=""mailto:pmb.us.ki.n.g@gmail.com"">pmb.us.ki.n.g@gmail.com</a>
<a href=""mailto:pm.bu.sk.ing@gmail.com"">pm.bu.sk.ing@gmail.com</a>
<a href=""mailto:pmb.u.ski.n.g@gmail.com"">pmb.u.ski.n.g@gmail.com</a>
<a href=""mailto:pmb.us.k.in.g@gmail.com"">pmb.us.k.in.g@gmail.com</a>
<a href=""mailto:pmbu.sk.i.ng@gmail.com"">pmbu.sk.i.ng@gmail.com</a>
<a href=""mailto:p.mbu.s.k.in.g@gmail.com"">p.mbu.s.k.in.g@gmail.com</a>
<a href=""mailto:p.mbu.sk.i.n.g@gmail.com"">p.mbu.sk.i.n.g@gmail.com</a>
<a href=""mailto:pm.b.u.ski.ng@gmail.com"">pm.b.u.ski.ng@gmail.com</a>
<a href=""mailto:p.m.b.u.s.k.i.ng@gmail.com"">p.m.b.u.s.k.i.ng@gmail.com</a>
<a href=""mailto:p.m.b.us.ki.ng@gmail.com"">p.m.b.us.ki.ng@gmail.com</a>
<a href=""mailto:p.mbu.s.k.i.ng@gmail.com"">p.mbu.s.k.i.ng@gmail.com</a>
<a href=""mailto:p.mb.u.sk.i.ng@gmail.com"">p.mb.u.sk.i.ng@gmail.com</a>
<a href=""mailto:p.mbu.sk.in.g@gmail.com"">p.mbu.sk.in.g@gmail.com</a>
<a href=""mailto:p.mb.us.ki.ng@gmail.com"">p.mb.us.ki.ng@gmail.com</a>
<a href=""mailto:pm.b.u.sk.ing@gmail.com"">pm.b.u.sk.ing@gmail.com</a>
<a href=""mailto:p.m.bu.sking@gmail.com"">p.m.bu.sking@gmail.com</a>
<a href=""mailto:pmbus.k.i.ng@gmail.com"">pmbus.k.i.ng@gmail.com</a>
<a href=""mailto:p.mb.u.ski.ng@gmail.com"">p.mb.u.ski.ng@gmail.com</a>
<a href=""mailto:p.mb.us.ki.n.g@gmail.com"">p.mb.us.ki.n.g@gmail.com</a>
<a href=""mailto:p.m.bus.kin.g@gmail.com"">p.m.bus.kin.g@gmail.com</a>
<a href=""mailto:pm.b.uski.n.g@gmail.com"">pm.b.uski.n.g@gmail.com</a>
<a href=""mailto:p.mb.u.s.king@gmail.com"">p.mb.u.s.king@gmail.com</a>
<a href=""mailto:pmb.u.s.ki.n.g@gmail.com"">pmb.u.s.ki.n.g@gmail.com</a>
<a href=""mailto:pm.b.uski.ng@gmail.com"">pm.b.uski.ng@gmail.com</a>
<a href=""mailto:pmb.us.king@gmail.com"">pmb.us.king@gmail.com</a>
<a href=""mailto:pmbus.k.ing@gmail.com"">pmbus.k.ing@gmail.com</a>
<a href=""mailto:p.m.bu.s.king@gmail.com"">p.m.bu.s.king@gmail.com</a>
<a href=""mailto:pmbu.sk.ing@gmail.com"">pmbu.sk.ing@gmail.com</a>
<a href=""mailto:pm.b.us.k.in.g@gmail.com"">pm.b.us.k.in.g@gmail.com</a>
<a href=""mailto:pmbus.king@gmail.com"">pmbus.king@gmail.com</a>
<a href=""mailto:p.m.b.usking@gmail.com"">p.m.b.usking@gmail.com</a>
<a href=""mailto:p.m.b.uski.n.g@gmail.com"">p.m.b.uski.n.g@gmail.com</a>
<a href=""mailto:pmb.u.s.k.i.ng@gmail.com"">pmb.u.s.k.i.ng@gmail.com</a>
<a href=""mailto:pmb.uski.ng@gmail.com"">pmb.uski.ng@gmail.com</a>
<a href=""mailto:p.m.bus.king@gmail.com"">p.m.bus.king@gmail.com</a>
<a href=""mailto:pm.b.u.s.k.ing@gmail.com"">pm.b.u.s.k.ing@gmail.com</a>
<a href=""mailto:pmbu.s.king@gmail.com"">pmbu.s.king@gmail.com</a>
<a href=""mailto:p.m.bu.ski.ng@gmail.com"">p.m.bu.ski.ng@gmail.com</a>
<a href=""mailto:p.mbus.king@gmail.com"">p.mbus.king@gmail.com</a>
<a href=""mailto:pmb.uskin.g@gmail.com"">pmb.uskin.g@gmail.com</a>
<a href=""mailto:pmb.us.k.i.n.g@gmail.com"">pmb.us.k.i.n.g@gmail.com</a>
<a href=""mailto:p.mb.u.s.k.i.ng@gmail.com"">p.mb.u.s.k.i.ng@gmail.com</a>
<a href=""mailto:pm.b.us.ki.n.g@gmail.com"">pm.b.us.ki.n.g@gmail.com</a>
<a href=""mailto:p.m.b.u.sk.ing@gmail.com"">p.m.b.u.sk.ing@gmail.com</a>
<a href=""mailto:pmb.u.sking@gmail.com"">pmb.u.sking@gmail.com</a>
<a href=""mailto:pmbu.ski.ng@gmail.com"">pmbu.ski.ng@gmail.com</a>
<a href=""mailto:p.mbu.s.ki.ng@gmail.com"">p.mbu.s.ki.ng@gmail.com</a>
<a href=""mailto:p.m.busk.in.g@gmail.com"">p.m.busk.in.g@gmail.com</a>
<a href=""mailto:pmb.u.s.k.ing@gmail.com"">pmb.u.s.k.ing@gmail.com</a>
<a href=""mailto:pmbus.ki.n.g@gmail.com"">pmbus.ki.n.g@gmail.com</a>
<a href=""mailto:pm.b.u.s.king@gmail.com"">pm.b.u.s.king@gmail.com</a>
<a href=""mailto:pm.b.u.sking@gmail.com"">pm.b.u.sking@gmail.com</a>
<a href=""mailto:p.mbu.s.ki.n.g@gmail.com"">p.mbu.s.ki.n.g@gmail.com</a>
<a href=""mailto:pmbuskin.g@gmail.com"">pmbuskin.g@gmail.com</a>
<a href=""mailto:pm.bu.sk.i.n.g@gmail.com"">pm.bu.sk.i.n.g@gmail.com</a>
<a href=""mailto:p.m.b.u.s.kin.g@gmail.com"">p.m.b.u.s.kin.g@gmail.com</a>
<a href=""mailto:pmbuski.n.g@gmail.com"">pmbuski.n.g@gmail.com</a>
<a href=""mailto:pm.bu.s.king@gmail.com"">pm.bu.s.king@gmail.com</a>
<a href=""mailto:pm.bu.s.k.in.g@gmail.com"">pm.bu.s.k.in.g@gmail.com</a>
<a href=""mailto:p.mbusking@gmail.com"">p.mbusking@gmail.com</a>
<a href=""mailto:pm.busk.ing@gmail.com"">pm.busk.ing@gmail.com</a>
<a href=""mailto:pmbus.k.in.g@gmail.com"">pmbus.k.in.g@gmail.com</a>
<a href=""mailto:p.m.bus.k.i.ng@gmail.com"">p.m.bus.k.i.ng@gmail.com</a>
<a href=""mailto:p.m.busk.i.n.g@gmail.com"">p.m.busk.i.n.g@gmail.com</a>
<a href=""mailto:pm.b.usk.ing@gmail.com"">pm.b.usk.ing@gmail.com</a>
<a href=""mailto:pmbus.ki.ng@gmail.com"">pmbus.ki.ng@gmail.com</a>
<a href=""mailto:p.m.b.uski.ng@gmail.com"">p.m.b.uski.ng@gmail.com</a>
<a href=""mailto:pm.buski.n.g@gmail.com"">pm.buski.n.g@gmail.com</a>
<a href=""mailto:pmb.us.k.ing@gmail.com"">pmb.us.k.ing@gmail.com</a>
<a href=""mailto:p.m.b.us.ki.n.g@gmail.com"">p.m.b.us.ki.n.g@gmail.com</a>
<a href=""mailto:p.mb.us.k.in.g@gmail.com"">p.mb.us.k.in.g@gmail.com</a>
<a href=""mailto:p.m.b.us.k.i.ng@gmail.com"">p.m.b.us.k.i.ng@gmail.com</a>
<a href=""mailto:p.m.b.u.skin.g@gmail.com"">p.m.b.u.skin.g@gmail.com</a>"
Th0FmSLm,Nigerian scammers [19-2-1/2024],bombaires,AIMMS,Monday 19th of February 2024 09:52:42 AM CDT,"<a href=""mailto:jeffwilkinsonkeystonebank@googlemail.com"">jeffwilkinsonkeystonebank@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+16438@googlemail.com"">jeffwilkinsonkeystonebank+16438@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+30837@googlemail.com"">jeffwilkinsonkeystonebank+30837@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+20067@googlemail.com"">jeffwilkinsonkeystonebank+20067@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+31816@googlemail.com"">jeffwilkinsonkeystonebank+31816@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+16267@googlemail.com"">jeffwilkinsonkeystonebank+16267@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+5297@googlemail.com"">jeffwilkinsonkeystonebank+5297@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+28918@googlemail.com"">jeffwilkinsonkeystonebank+28918@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+6775@googlemail.com"">jeffwilkinsonkeystonebank+6775@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+1925@googlemail.com"">jeffwilkinsonkeystonebank+1925@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+8755@googlemail.com"">jeffwilkinsonkeystonebank+8755@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+10188@googlemail.com"">jeffwilkinsonkeystonebank+10188@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+9146@googlemail.com"">jeffwilkinsonkeystonebank+9146@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+18858@googlemail.com"">jeffwilkinsonkeystonebank+18858@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+10690@googlemail.com"">jeffwilkinsonkeystonebank+10690@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+12688@googlemail.com"">jeffwilkinsonkeystonebank+12688@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+17317@googlemail.com"">jeffwilkinsonkeystonebank+17317@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+12581@googlemail.com"">jeffwilkinsonkeystonebank+12581@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+705@googlemail.com"">jeffwilkinsonkeystonebank+705@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+13975@googlemail.com"">jeffwilkinsonkeystonebank+13975@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+4894@googlemail.com"">jeffwilkinsonkeystonebank+4894@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+24983@googlemail.com"">jeffwilkinsonkeystonebank+24983@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+29257@googlemail.com"">jeffwilkinsonkeystonebank+29257@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+17017@googlemail.com"">jeffwilkinsonkeystonebank+17017@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+26968@googlemail.com"">jeffwilkinsonkeystonebank+26968@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+10482@googlemail.com"">jeffwilkinsonkeystonebank+10482@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+1188@googlemail.com"">jeffwilkinsonkeystonebank+1188@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+10759@googlemail.com"">jeffwilkinsonkeystonebank+10759@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+13652@googlemail.com"">jeffwilkinsonkeystonebank+13652@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+4521@googlemail.com"">jeffwilkinsonkeystonebank+4521@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+28319@googlemail.com"">jeffwilkinsonkeystonebank+28319@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+22313@googlemail.com"">jeffwilkinsonkeystonebank+22313@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+31461@googlemail.com"">jeffwilkinsonkeystonebank+31461@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+6903@googlemail.com"">jeffwilkinsonkeystonebank+6903@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+6424@googlemail.com"">jeffwilkinsonkeystonebank+6424@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+1003@googlemail.com"">jeffwilkinsonkeystonebank+1003@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+15663@googlemail.com"">jeffwilkinsonkeystonebank+15663@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+8160@googlemail.com"">jeffwilkinsonkeystonebank+8160@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+9541@googlemail.com"">jeffwilkinsonkeystonebank+9541@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+20809@googlemail.com"">jeffwilkinsonkeystonebank+20809@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+30569@googlemail.com"">jeffwilkinsonkeystonebank+30569@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+8820@googlemail.com"">jeffwilkinsonkeystonebank+8820@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+26879@googlemail.com"">jeffwilkinsonkeystonebank+26879@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+23744@googlemail.com"">jeffwilkinsonkeystonebank+23744@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+7905@googlemail.com"">jeffwilkinsonkeystonebank+7905@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+21010@googlemail.com"">jeffwilkinsonkeystonebank+21010@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+19862@googlemail.com"">jeffwilkinsonkeystonebank+19862@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+13337@googlemail.com"">jeffwilkinsonkeystonebank+13337@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+6118@googlemail.com"">jeffwilkinsonkeystonebank+6118@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+3433@googlemail.com"">jeffwilkinsonkeystonebank+3433@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+22896@googlemail.com"">jeffwilkinsonkeystonebank+22896@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+22790@googlemail.com"">jeffwilkinsonkeystonebank+22790@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+14608@googlemail.com"">jeffwilkinsonkeystonebank+14608@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+22266@googlemail.com"">jeffwilkinsonkeystonebank+22266@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+18285@googlemail.com"">jeffwilkinsonkeystonebank+18285@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+6914@googlemail.com"">jeffwilkinsonkeystonebank+6914@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+239@googlemail.com"">jeffwilkinsonkeystonebank+239@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+21693@googlemail.com"">jeffwilkinsonkeystonebank+21693@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+3712@googlemail.com"">jeffwilkinsonkeystonebank+3712@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+12514@googlemail.com"">jeffwilkinsonkeystonebank+12514@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+9452@googlemail.com"">jeffwilkinsonkeystonebank+9452@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+15845@googlemail.com"">jeffwilkinsonkeystonebank+15845@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+15266@googlemail.com"">jeffwilkinsonkeystonebank+15266@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+13886@googlemail.com"">jeffwilkinsonkeystonebank+13886@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+23017@googlemail.com"">jeffwilkinsonkeystonebank+23017@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+24971@googlemail.com"">jeffwilkinsonkeystonebank+24971@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+16554@googlemail.com"">jeffwilkinsonkeystonebank+16554@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+14567@googlemail.com"">jeffwilkinsonkeystonebank+14567@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+5002@googlemail.com"">jeffwilkinsonkeystonebank+5002@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+23707@googlemail.com"">jeffwilkinsonkeystonebank+23707@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+6834@googlemail.com"">jeffwilkinsonkeystonebank+6834@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+13503@googlemail.com"">jeffwilkinsonkeystonebank+13503@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+23328@googlemail.com"">jeffwilkinsonkeystonebank+23328@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+11288@googlemail.com"">jeffwilkinsonkeystonebank+11288@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+13152@googlemail.com"">jeffwilkinsonkeystonebank+13152@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+16891@googlemail.com"">jeffwilkinsonkeystonebank+16891@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+28749@googlemail.com"">jeffwilkinsonkeystonebank+28749@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+31247@googlemail.com"">jeffwilkinsonkeystonebank+31247@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+25744@googlemail.com"">jeffwilkinsonkeystonebank+25744@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+5461@googlemail.com"">jeffwilkinsonkeystonebank+5461@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+4535@googlemail.com"">jeffwilkinsonkeystonebank+4535@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+26182@googlemail.com"">jeffwilkinsonkeystonebank+26182@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+24377@googlemail.com"">jeffwilkinsonkeystonebank+24377@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+11081@googlemail.com"">jeffwilkinsonkeystonebank+11081@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+3839@googlemail.com"">jeffwilkinsonkeystonebank+3839@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+5153@googlemail.com"">jeffwilkinsonkeystonebank+5153@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+32685@googlemail.com"">jeffwilkinsonkeystonebank+32685@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+12946@googlemail.com"">jeffwilkinsonkeystonebank+12946@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+7561@googlemail.com"">jeffwilkinsonkeystonebank+7561@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+12613@googlemail.com"">jeffwilkinsonkeystonebank+12613@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+11858@googlemail.com"">jeffwilkinsonkeystonebank+11858@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+21031@googlemail.com"">jeffwilkinsonkeystonebank+21031@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+21039@googlemail.com"">jeffwilkinsonkeystonebank+21039@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+10583@googlemail.com"">jeffwilkinsonkeystonebank+10583@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+9972@googlemail.com"">jeffwilkinsonkeystonebank+9972@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+29998@googlemail.com"">jeffwilkinsonkeystonebank+29998@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+7692@googlemail.com"">jeffwilkinsonkeystonebank+7692@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+27495@googlemail.com"">jeffwilkinsonkeystonebank+27495@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+14977@googlemail.com"">jeffwilkinsonkeystonebank+14977@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+135@googlemail.com"">jeffwilkinsonkeystonebank+135@googlemail.com</a>
<a href=""mailto:jeffwilkinsonkeystonebank+28303@googlemail.com"">jeffwilkinsonkeystonebank+28303@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson@googlemail.com"">keystoneb.jeffwilkinson@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+17933@googlemail.com"">keystoneb.jeffwilkinson+17933@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+10801@googlemail.com"">keystoneb.jeffwilkinson+10801@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+18092@googlemail.com"">keystoneb.jeffwilkinson+18092@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+11797@googlemail.com"">keystoneb.jeffwilkinson+11797@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+27480@googlemail.com"">keystoneb.jeffwilkinson+27480@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+18719@googlemail.com"">keystoneb.jeffwilkinson+18719@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+863@googlemail.com"">keystoneb.jeffwilkinson+863@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+18212@googlemail.com"">keystoneb.jeffwilkinson+18212@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+2464@googlemail.com"">keystoneb.jeffwilkinson+2464@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6687@googlemail.com"">keystoneb.jeffwilkinson+6687@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+4686@googlemail.com"">keystoneb.jeffwilkinson+4686@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+22373@googlemail.com"">keystoneb.jeffwilkinson+22373@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+20719@googlemail.com"">keystoneb.jeffwilkinson+20719@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+31230@googlemail.com"">keystoneb.jeffwilkinson+31230@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+9690@googlemail.com"">keystoneb.jeffwilkinson+9690@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+3814@googlemail.com"">keystoneb.jeffwilkinson+3814@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+14688@googlemail.com"">keystoneb.jeffwilkinson+14688@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+15604@googlemail.com"">keystoneb.jeffwilkinson+15604@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+27092@googlemail.com"">keystoneb.jeffwilkinson+27092@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+24099@googlemail.com"">keystoneb.jeffwilkinson+24099@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+5653@googlemail.com"">keystoneb.jeffwilkinson+5653@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+27039@googlemail.com"">keystoneb.jeffwilkinson+27039@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6915@googlemail.com"">keystoneb.jeffwilkinson+6915@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+4881@googlemail.com"">keystoneb.jeffwilkinson+4881@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6876@googlemail.com"">keystoneb.jeffwilkinson+6876@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+25133@googlemail.com"">keystoneb.jeffwilkinson+25133@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+24712@googlemail.com"">keystoneb.jeffwilkinson+24712@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+29745@googlemail.com"">keystoneb.jeffwilkinson+29745@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+27381@googlemail.com"">keystoneb.jeffwilkinson+27381@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+29233@googlemail.com"">keystoneb.jeffwilkinson+29233@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+16833@googlemail.com"">keystoneb.jeffwilkinson+16833@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+5500@googlemail.com"">keystoneb.jeffwilkinson+5500@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+8132@googlemail.com"">keystoneb.jeffwilkinson+8132@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+4981@googlemail.com"">keystoneb.jeffwilkinson+4981@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+19865@googlemail.com"">keystoneb.jeffwilkinson+19865@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+10401@googlemail.com"">keystoneb.jeffwilkinson+10401@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+18934@googlemail.com"">keystoneb.jeffwilkinson+18934@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+22148@googlemail.com"">keystoneb.jeffwilkinson+22148@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+16020@googlemail.com"">keystoneb.jeffwilkinson+16020@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+15413@googlemail.com"">keystoneb.jeffwilkinson+15413@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+11908@googlemail.com"">keystoneb.jeffwilkinson+11908@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+4221@googlemail.com"">keystoneb.jeffwilkinson+4221@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6857@googlemail.com"">keystoneb.jeffwilkinson+6857@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+9043@googlemail.com"">keystoneb.jeffwilkinson+9043@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+9710@googlemail.com"">keystoneb.jeffwilkinson+9710@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+18374@googlemail.com"">keystoneb.jeffwilkinson+18374@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+8040@googlemail.com"">keystoneb.jeffwilkinson+8040@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+2972@googlemail.com"">keystoneb.jeffwilkinson+2972@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+12356@googlemail.com"">keystoneb.jeffwilkinson+12356@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+22331@googlemail.com"">keystoneb.jeffwilkinson+22331@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+23558@googlemail.com"">keystoneb.jeffwilkinson+23558@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+20761@googlemail.com"">keystoneb.jeffwilkinson+20761@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+11272@googlemail.com"">keystoneb.jeffwilkinson+11272@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+20575@googlemail.com"">keystoneb.jeffwilkinson+20575@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+8167@googlemail.com"">keystoneb.jeffwilkinson+8167@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+16965@googlemail.com"">keystoneb.jeffwilkinson+16965@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+2986@googlemail.com"">keystoneb.jeffwilkinson+2986@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6228@googlemail.com"">keystoneb.jeffwilkinson+6228@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+20079@googlemail.com"">keystoneb.jeffwilkinson+20079@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+3508@googlemail.com"">keystoneb.jeffwilkinson+3508@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+2498@googlemail.com"">keystoneb.jeffwilkinson+2498@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+26198@googlemail.com"">keystoneb.jeffwilkinson+26198@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+24653@googlemail.com"">keystoneb.jeffwilkinson+24653@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+7181@googlemail.com"">keystoneb.jeffwilkinson+7181@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+10310@googlemail.com"">keystoneb.jeffwilkinson+10310@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+5692@googlemail.com"">keystoneb.jeffwilkinson+5692@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+90@googlemail.com"">keystoneb.jeffwilkinson+90@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6069@googlemail.com"">keystoneb.jeffwilkinson+6069@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+7879@googlemail.com"">keystoneb.jeffwilkinson+7879@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+26123@googlemail.com"">keystoneb.jeffwilkinson+26123@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+4124@googlemail.com"">keystoneb.jeffwilkinson+4124@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+13246@googlemail.com"">keystoneb.jeffwilkinson+13246@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+18145@googlemail.com"">keystoneb.jeffwilkinson+18145@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+11047@googlemail.com"">keystoneb.jeffwilkinson+11047@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+23897@googlemail.com"">keystoneb.jeffwilkinson+23897@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+483@googlemail.com"">keystoneb.jeffwilkinson+483@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+11827@googlemail.com"">keystoneb.jeffwilkinson+11827@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+17746@googlemail.com"">keystoneb.jeffwilkinson+17746@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+14829@googlemail.com"">keystoneb.jeffwilkinson+14829@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+30522@googlemail.com"">keystoneb.jeffwilkinson+30522@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+17740@googlemail.com"">keystoneb.jeffwilkinson+17740@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+12230@googlemail.com"">keystoneb.jeffwilkinson+12230@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+22965@googlemail.com"">keystoneb.jeffwilkinson+22965@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+1383@googlemail.com"">keystoneb.jeffwilkinson+1383@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+28218@googlemail.com"">keystoneb.jeffwilkinson+28218@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+24573@googlemail.com"">keystoneb.jeffwilkinson+24573@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+24964@googlemail.com"">keystoneb.jeffwilkinson+24964@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+29375@googlemail.com"">keystoneb.jeffwilkinson+29375@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+5492@googlemail.com"">keystoneb.jeffwilkinson+5492@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+1141@googlemail.com"">keystoneb.jeffwilkinson+1141@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+19501@googlemail.com"">keystoneb.jeffwilkinson+19501@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+7491@googlemail.com"">keystoneb.jeffwilkinson+7491@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+31299@googlemail.com"">keystoneb.jeffwilkinson+31299@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+26898@googlemail.com"">keystoneb.jeffwilkinson+26898@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+3376@googlemail.com"">keystoneb.jeffwilkinson+3376@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+24120@googlemail.com"">keystoneb.jeffwilkinson+24120@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+16865@googlemail.com"">keystoneb.jeffwilkinson+16865@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+6073@googlemail.com"">keystoneb.jeffwilkinson+6073@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+17353@googlemail.com"">keystoneb.jeffwilkinson+17353@googlemail.com</a>
<a href=""mailto:keystoneb.jeffwilkinson+8927@googlemail.com"">keystoneb.jeffwilkinson+8927@googlemail.com</a>
<a href=""mailto:keystonebankltd@googlemail.com"">keystonebankltd@googlemail.com</a>
<a href=""mailto:keystonebankltd+7435@googlemail.com"">keystonebankltd+7435@googlemail.com</a>
<a href=""mailto:keystonebankltd+25474@googlemail.com"">keystonebankltd+25474@googlemail.com</a>
<a href=""mailto:keystonebankltd+4671@googlemail.com"">keystonebankltd+4671@googlemail.com</a>
<a href=""mailto:keystonebankltd+15615@googlemail.com"">keystonebankltd+15615@googlemail.com</a>
<a href=""mailto:keystonebankltd+549@googlemail.com"">keystonebankltd+549@googlemail.com</a>
<a href=""mailto:keystonebankltd+24104@googlemail.com"">keystonebankltd+24104@googlemail.com</a>
<a href=""mailto:keystonebankltd+16466@googlemail.com"">keystonebankltd+16466@googlemail.com</a>
<a href=""mailto:keystonebankltd+19546@googlemail.com"">keystonebankltd+19546@googlemail.com</a>
<a href=""mailto:keystonebankltd+408@googlemail.com"">keystonebankltd+408@googlemail.com</a>
<a href=""mailto:keystonebankltd+31217@googlemail.com"">keystonebankltd+31217@googlemail.com</a>
<a href=""mailto:keystonebankltd+24230@googlemail.com"">keystonebankltd+24230@googlemail.com</a>
<a href=""mailto:keystonebankltd+6551@googlemail.com"">keystonebankltd+6551@googlemail.com</a>
<a href=""mailto:keystonebankltd+31319@googlemail.com"">keystonebankltd+31319@googlemail.com</a>
<a href=""mailto:keystonebankltd+25127@googlemail.com"">keystonebankltd+25127@googlemail.com</a>
<a href=""mailto:keystonebankltd+23584@googlemail.com"">keystonebankltd+23584@googlemail.com</a>
<a href=""mailto:keystonebankltd+3452@googlemail.com"">keystonebankltd+3452@googlemail.com</a>
<a href=""mailto:keystonebankltd+3909@googlemail.com"">keystonebankltd+3909@googlemail.com</a>
<a href=""mailto:keystonebankltd+26341@googlemail.com"">keystonebankltd+26341@googlemail.com</a>
<a href=""mailto:keystonebankltd+4801@googlemail.com"">keystonebankltd+4801@googlemail.com</a>
<a href=""mailto:keystonebankltd+12461@googlemail.com"">keystonebankltd+12461@googlemail.com</a>
<a href=""mailto:keystonebankltd+20529@googlemail.com"">keystonebankltd+20529@googlemail.com</a>
<a href=""mailto:keystonebankltd+9572@googlemail.com"">keystonebankltd+9572@googlemail.com</a>
<a href=""mailto:keystonebankltd+13009@googlemail.com"">keystonebankltd+13009@googlemail.com</a>
<a href=""mailto:keystonebankltd+14869@googlemail.com"">keystonebankltd+14869@googlemail.com</a>
<a href=""mailto:keystonebankltd+1275@googlemail.com"">keystonebankltd+1275@googlemail.com</a>
<a href=""mailto:keystonebankltd+29716@googlemail.com"">keystonebankltd+29716@googlemail.com</a>
<a href=""mailto:keystonebankltd+1574@googlemail.com"">keystonebankltd+1574@googlemail.com</a>
<a href=""mailto:keystonebankltd+6888@googlemail.com"">keystonebankltd+6888@googlemail.com</a>
<a href=""mailto:keystonebankltd+1548@googlemail.com"">keystonebankltd+1548@googlemail.com</a>
<a href=""mailto:keystonebankltd+14466@googlemail.com"">keystonebankltd+14466@googlemail.com</a>
<a href=""mailto:keystonebankltd+870@googlemail.com"">keystonebankltd+870@googlemail.com</a>
<a href=""mailto:keystonebankltd+9368@googlemail.com"">keystonebankltd+9368@googlemail.com</a>
<a href=""mailto:keystonebankltd+29094@googlemail.com"">keystonebankltd+29094@googlemail.com</a>
<a href=""mailto:keystonebankltd+10405@googlemail.com"">keystonebankltd+10405@googlemail.com</a>
<a href=""mailto:keystonebankltd+24660@googlemail.com"">keystonebankltd+24660@googlemail.com</a>
<a href=""mailto:keystonebankltd+10982@googlemail.com"">keystonebankltd+10982@googlemail.com</a>
<a href=""mailto:keystonebankltd+7152@googlemail.com"">keystonebankltd+7152@googlemail.com</a>
<a href=""mailto:keystonebankltd+4664@googlemail.com"">keystonebankltd+4664@googlemail.com</a>
<a href=""mailto:keystonebankltd+27192@googlemail.com"">keystonebankltd+27192@googlemail.com</a>
<a href=""mailto:keystonebankltd+27737@googlemail.com"">keystonebankltd+27737@googlemail.com</a>
<a href=""mailto:keystonebankltd+24731@googlemail.com"">keystonebankltd+24731@googlemail.com</a>
<a href=""mailto:keystonebankltd+25967@googlemail.com"">keystonebankltd+25967@googlemail.com</a>
<a href=""mailto:keystonebankltd+13156@googlemail.com"">keystonebankltd+13156@googlemail.com</a>
<a href=""mailto:keystonebankltd+14844@googlemail.com"">keystonebankltd+14844@googlemail.com</a>
<a href=""mailto:keystonebankltd+18112@googlemail.com"">keystonebankltd+18112@googlemail.com</a>
<a href=""mailto:keystonebankltd+24387@googlemail.com"">keystonebankltd+24387@googlemail.com</a>
<a href=""mailto:keystonebankltd+7426@googlemail.com"">keystonebankltd+7426@googlemail.com</a>
<a href=""mailto:keystonebankltd+10736@googlemail.com"">keystonebankltd+10736@googlemail.com</a>
<a href=""mailto:keystonebankltd+2951@googlemail.com"">keystonebankltd+2951@googlemail.com</a>
<a href=""mailto:keystonebankltd+18059@googlemail.com"">keystonebankltd+18059@googlemail.com</a>
<a href=""mailto:keystonebankltd+26062@googlemail.com"">keystonebankltd+26062@googlemail.com</a>
<a href=""mailto:keystonebankltd+26829@googlemail.com"">keystonebankltd+26829@googlemail.com</a>
<a href=""mailto:keystonebankltd+14593@googlemail.com"">keystonebankltd+14593@googlemail.com</a>
<a href=""mailto:keystonebankltd+20055@googlemail.com"">keystonebankltd+20055@googlemail.com</a>
<a href=""mailto:keystonebankltd+22830@googlemail.com"">keystonebankltd+22830@googlemail.com</a>
<a href=""mailto:keystonebankltd+5029@googlemail.com"">keystonebankltd+5029@googlemail.com</a>
<a href=""mailto:keystonebankltd+8954@googlemail.com"">keystonebankltd+8954@googlemail.com</a>
<a href=""mailto:keystonebankltd+32384@googlemail.com"">keystonebankltd+32384@googlemail.com</a>
<a href=""mailto:keystonebankltd+9600@googlemail.com"">keystonebankltd+9600@googlemail.com</a>
<a href=""mailto:keystonebankltd+10120@googlemail.com"">keystonebankltd+10120@googlemail.com</a>
<a href=""mailto:keystonebankltd+11280@googlemail.com"">keystonebankltd+11280@googlemail.com</a>
<a href=""mailto:keystonebankltd+8746@googlemail.com"">keystonebankltd+8746@googlemail.com</a>
<a href=""mailto:keystonebankltd+5558@googlemail.com"">keystonebankltd+5558@googlemail.com</a>
<a href=""mailto:keystonebankltd+28166@googlemail.com"">keystonebankltd+28166@googlemail.com</a>
<a href=""mailto:keystonebankltd+10840@googlemail.com"">keystonebankltd+10840@googlemail.com</a>
<a href=""mailto:keystonebankltd+19944@googlemail.com"">keystonebankltd+19944@googlemail.com</a>
<a href=""mailto:keystonebankltd+26604@googlemail.com"">keystonebankltd+26604@googlemail.com</a>
<a href=""mailto:keystonebankltd+10537@googlemail.com"">keystonebankltd+10537@googlemail.com</a>
<a href=""mailto:keystonebankltd+25987@googlemail.com"">keystonebankltd+25987@googlemail.com</a>
<a href=""mailto:keystonebankltd+24004@googlemail.com"">keystonebankltd+24004@googlemail.com</a>
<a href=""mailto:keystonebankltd+16021@googlemail.com"">keystonebankltd+16021@googlemail.com</a>
<a href=""mailto:keystonebankltd+30532@googlemail.com"">keystonebankltd+30532@googlemail.com</a>
<a href=""mailto:keystonebankltd+21596@googlemail.com"">keystonebankltd+21596@googlemail.com</a>
<a href=""mailto:keystonebankltd+23901@googlemail.com"">keystonebankltd+23901@googlemail.com</a>
<a href=""mailto:keystonebankltd+19845@googlemail.com"">keystonebankltd+19845@googlemail.com</a>
<a href=""mailto:keystonebankltd+260@googlemail.com"">keystonebankltd+260@googlemail.com</a>
<a href=""mailto:keystonebankltd+18673@googlemail.com"">keystonebankltd+18673@googlemail.com</a>
<a href=""mailto:keystonebankltd+3564@googlemail.com"">keystonebankltd+3564@googlemail.com</a>
<a href=""mailto:keystonebankltd+2632@googlemail.com"">keystonebankltd+2632@googlemail.com</a>
<a href=""mailto:keystonebankltd+15007@googlemail.com"">keystonebankltd+15007@googlemail.com</a>
<a href=""mailto:keystonebankltd+15545@googlemail.com"">keystonebankltd+15545@googlemail.com</a>
<a href=""mailto:keystonebankltd+9825@googlemail.com"">keystonebankltd+9825@googlemail.com</a>
<a href=""mailto:keystonebankltd+5801@googlemail.com"">keystonebankltd+5801@googlemail.com</a>
<a href=""mailto:keystonebankltd+20081@googlemail.com"">keystonebankltd+20081@googlemail.com</a>
<a href=""mailto:keystonebankltd+27212@googlemail.com"">keystonebankltd+27212@googlemail.com</a>
<a href=""mailto:keystonebankltd+23759@googlemail.com"">keystonebankltd+23759@googlemail.com</a>
<a href=""mailto:keystonebankltd+12626@googlemail.com"">keystonebankltd+12626@googlemail.com</a>
<a href=""mailto:keystonebankltd+30414@googlemail.com"">keystonebankltd+30414@googlemail.com</a>
<a href=""mailto:keystonebankltd+31710@googlemail.com"">keystonebankltd+31710@googlemail.com</a>
<a href=""mailto:keystonebankltd+26347@googlemail.com"">keystonebankltd+26347@googlemail.com</a>
<a href=""mailto:keystonebankltd+28047@googlemail.com"">keystonebankltd+28047@googlemail.com</a>
<a href=""mailto:keystonebankltd+21163@googlemail.com"">keystonebankltd+21163@googlemail.com</a>
<a href=""mailto:keystonebankltd+18882@googlemail.com"">keystonebankltd+18882@googlemail.com</a>
<a href=""mailto:keystonebankltd+20512@googlemail.com"">keystonebankltd+20512@googlemail.com</a>
<a href=""mailto:keystonebankltd+14277@googlemail.com"">keystonebankltd+14277@googlemail.com</a>
<a href=""mailto:keystonebankltd+6654@googlemail.com"">keystonebankltd+6654@googlemail.com</a>
<a href=""mailto:keystonebankltd+19613@googlemail.com"">keystonebankltd+19613@googlemail.com</a>
<a href=""mailto:keystonebankltd+17286@googlemail.com"">keystonebankltd+17286@googlemail.com</a>
<a href=""mailto:keystonebankltd+16316@googlemail.com"">keystonebankltd+16316@googlemail.com</a>
<a href=""mailto:keystonebankltd+5716@googlemail.com"">keystonebankltd+5716@googlemail.com</a>"
pRc3UrD5,Untitled,k3NGuru,YAML,Monday 19th of February 2024 09:29:54 AM CDT,"- name: Меняем схему по умолчанию
  community.postgresql.postgresql_query:
    # host: ""{{ PGSRV1 }}""
    db: ""{{ item.name }}""
    login_user: ""{{ item.user }}""
    login_password: ""{{ PGPWD }}""
    query: ALTER DATABASE %s SET search_path TO %s
    positional_args:
    - '{{ item.name }}'
    - '{{ item.name }}'
  loop: ""{{ dbname }}""

dbname:
- { name: ""admin_api"", user: ""admin_api_admin"" }
- { name: ""agenda"", user: ""agenda_admin"" }
- { name: ""client_api"", user: ""client_api_admin"" }"
