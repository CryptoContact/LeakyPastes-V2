id,title,username,language,date,content
HtTc9iy2,Untitled,riccefarias76,JavaScript,Friday 19th of April 2024 06:58:39 AM CDT,"var spawn = require('child_process').spawn;
var filename = '/opt/traccar/logs/tracker-server.log';

const fs = require(""fs"");

console.log(""Starting logger service..."");

var tail = spawn(""tail"", ['-f',filename]);

const imeiBindings = {};
const hashBindings = {};

const tmpLogs = {};

tail.stdout.on(""data"", async function (data) {

	const text = data.toString();
	//const matches = text.matchAll(/(?<data>[0-9]{4}-[0-9]{2}-[0-9]{2}) (?<hora>[0-9]{2}:[0-9]{2}:[0-9]{2})  [A-Za-z]*: \[(?<hash>[A-Za-z0-9]*): [0-9]*( (>|<) [0-9.:]*\] \[[A-Z]*\] HEX: ([A-Za-z0-9]*)|\] [0-9.:]* .*id: (?<imeib>[A-Za-z0-9]*), (.*)|\] .*id: (?<imeic>[A-Za-z0-9]*), (.*)|\] [0-9.:]* .*)\n/gm);
 const matches = text.matchAll(/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}  (.*?): \[([A-Za-z0-9]*)(: [A-Za-z0-9]* (>|<) ([A-Za-z0-9.]*))?\] ([A-Za-z0-9]*|id: (.*?), (.*?))\n/g);

	for(m of matches){

		console.log(m);


		let imei = false;
		let hash = false;

		if(m[7]){
			imei = m[7];
		}else if(m[8]){
			imei = m[8];
		}

		if(m[2]){
			hash = m[2];
		}


		
		if(imei){					
			imeiBindings[imei] = hash;
			hashBindings[hash] = imei;
		}

		if(hashBindings[m[2]]){

			const folderName = ""./logs/""+new Date().toISOString().split(""T"")[0];
			const fileName = hashBindings[hash]+"".log"";
			
			 if (!fs.existsSync(folderName)) {
    				fs.mkdirSync(folderName);
  			 }		


			if(tmpLogs[hash]){
				for(let t of tmpLogs[hash]){
					const _folderName = ""./logs/""+new Date().toISOString().split(""T"")[0];
					console.log(""insert ""+fileName+"" from tmp"");
					await fs.promises.appendFile(_folderName+""/""+fileName,t[0]);
				}

				delete tmpLogs[hash];
			}



			await fs.promises.appendFile(folderName+""/""+fileName,m[0]);

		}else{
			if(!tmpLogs[hash]){
				tmpLogs[hash] = [];
			}
			tmpLogs[hash].push(m);
		}	
	}


});
"
3z48ACge,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,jusst2k4,GetText,Friday 19th of April 2024 06:46:16 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_334575.pdf

Working as of:
19 April 2024"
c9vc68Gb,ü§ë G2A.com Free Gift Card Guide Apr 2024 FIX ü§ë,ssss50w,GetText,Friday 19th of April 2024 06:46:09 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
19 April 2024"
8gDWY01L,VSCode extensions,RehabCZ,YAML,Friday 19th of April 2024 06:45:27 AM CDT,"bradlc.vscode-tailwindcss
christian-kohler.npm-intellisense
christian-kohler.path-intellisense
dart-code.dart-code
dart-code.flutter
dbaeumer.vscode-eslint
devsense.composer-php-vscode
devsense.intelli-php-vscode
devsense.phptools-vscode
devsense.profiler-php-vscode
drcika.apc-extension
editorconfig.editorconfig
esbenp.prettier-vscode
github.vscode-github-actions
golang.go
icrawl.discord-vscode
kasik96.latte
moetelo.twiggy
mongodb.mongodb-vscode
ms-azuretools.vscode-docker
ms-vscode-remote.remote-containers
ms-vscode.vscode-typescript-next
ms-vsliveshare.vsliveshare
msjsdiag.vscode-react-native
mtxr.sqltools
mtxr.sqltools-driver-mysql
mtxr.sqltools-driver-sqlite
pkief.material-icon-theme
prisma.prisma
rangav.vscode-thunder-client
redhat.vscode-xml
shopify.ruby-lsp
shufo.vscode-blade-formatter
vue.volar
yandeu.five-server"
z9nysGhN,Orbit Around Object 2,LeeMace,C#,Friday 19th of April 2024 06:32:51 AM CDT,"public float speed = 1f;
public float radius = 5f;

void Update() {
    float angle = Time.time * speed;
    float x = Mathf.Cos(angle) * radius;
    float z = Mathf.Sin(angle) * radius;
    transform.position = new Vector3(x, 1, z);
}"
mKXX3v1r,Orbit Around Object,LeeMace,C#,Friday 19th of April 2024 06:31:48 AM CDT," [SerializeField] private GameObject target;

 public int speed = 10;

 void Update() {
     transform.RotateAround(target.transform.position, Vector3.up, speed * Time.deltaTime);
 }"
VG5JyDAc,wave up and down,LeeMace,C#,Friday 19th of April 2024 06:30:16 AM CDT,"public class Wave : MonoBehaviour
{
    public float amplitude = 1f;
    public float frequency = 1f;

    void Update() {
        float y = Mathf.Sin(Time.time * frequency) * amplitude +5;
        transform.position = new Vector3(transform.position.x, y, transform.position.z);
    }
}"
W3dfzeuT,Pathfinding follow,LeeMace,C#,Friday 19th of April 2024 06:29:38 AM CDT,"public class PathFinder : MonoBehaviour {
    public Transform target;
    public float speed = 5f;

    void Update() {
        // The direction is calculated by subtracting the target's position from the current position of the object, then normalizing the result.
        Vector3 direction = (target.position - transform.position).normalized;
        // The angle is calculated using the direction vector, then converted to degrees and applied to the object's rotation.
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;
        // The object's position is updated based on the direction and speed, and the rotation is set to face the target.
        transform.rotation = Quaternion.Euler(0, 0, angle);
        // The object's position is updated based on the direction and speed, scaled by the time since the last frame.
        transform.position += direction * speed * Time.deltaTime;
    }
}"
YZqLYApi,New solution tie column,donarturo1991,Scheme,Friday 19th of April 2024 06:17:40 AM CDT,"\version ""2.24.3""
\language ""deutsch""
\score {
\relative c {
  \clef bass
  \key c \major
  \time 4/4
\override Tie.details.skyline-padding = #0.19
\override Tie.details.height-limit = #3
\override TieColumn.tie-configuration = 
    #'((10 . 1)(3.75 . 1)(0.3 . -1))
<es ges f' >8. ~
\override Tie.details.height-limit = #1
<es ges f'~>4 ~
<es ges f'>2
}
}

"
2f0d480L,Untitled,_KAGATUN_,C#,Friday 19th of April 2024 06:01:52 AM CDT,"using System;
using System.Collections.Generic;

namespace GladiatorFight
{
    public static class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Work();
        }
    }

    public class Utilities
    {
        private static Random _random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return _random.Next(min, max + 1);
        }

        public static int GetRandomNumber(int max)
        {
            return _random.Next(max + 1);
        }

        public static int GetRandomPercent()
        {
            int maxPercent = 100;
            return _random.Next(maxPercent + 1);
        }
    }

    class Gladiator
    {
        public Gladiator(string name, int health, int armor, int damage)
        {
            Name = name;
            Health = health;
            Armor = armor;
            Damage = damage;
        }

        public string Name { get; protected set; }
        public int Health { get; protected set; }
        public int Armor { get; protected set; }
        public int Damage { get; protected set; }

        public bool IsAlive => Health > 0;

        public virtual void ShowGladiatorInformation()
        {
            Console.WriteLine($""–ì–ª–∞–¥–∏–∞—Ç–æ—Ä: {Name} - –ó–¥–æ—Ä–æ–≤—å–µ: {Health}; –ë—Ä–æ–Ω—è: {Armor}; –°–∏–ª–∞ –∞—Ç–∞–∫–∏: {Damage}."");
        }

        public virtual void ShowHealthBattle()
        {
            Console.WriteLine($""{Name}_ –ó–¥–æ—Ä–æ–≤—å–µ: {Health}"");
        }

        public virtual void Strike(Gladiator opponent)
        {
            opponent.TakeDamage(Damage, default);
        }

        public virtual void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            Health -= damage - Armor;

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        public virtual void TakePureDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            Health -= damage;

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }
    }

    class Warrior : Gladiator
    {
        private int _criticalImpactForce;
        private int _—ÅhanceCriticalHit;
        private int _powerCriticalStrike;
        private int _powerAccurateImpact;
        private int _attackCount;

        public Warrior() : base(""–í–æ–∏–Ω"", 1000, 10, 50)
        {
            _criticalImpactForce = 3;
            _—ÅhanceCriticalHit = 15;
            _powerCriticalStrike = 3;
            _powerAccurateImpact = 2;
            _attackCount = 0;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\n–¢–æ—á–Ω—ã–π —É–¥–∞—Ä - –∫–∞–∂–¥—ã–π {_criticalImpactForce} —É–¥–∞—Ä –Ω–∞–Ω–æ—Å–∏—Ç —Å —Å–∏–ª–æ–π –≤ {_powerAccurateImpact} —Ä–∞–∑–∞. (–ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º)"");
            Console.WriteLine($""–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä - —à–∞–Ω—Å {_—ÅhanceCriticalHit}% –Ω–∞–Ω–µ—Å—Ç–∏ —É–¥–∞—Ä —Å —Å–∏–ª–æ–π –≤ {_powerCriticalStrike} —Ä–∞–∑–∞."");
        }

        public override void Strike(Gladiator opponent)
        {
            _attackCount++;
            int baseDamage = Damage;

            if (GetTrueAccurateHit())
            {
                Damage *= _powerAccurateImpact;
                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å —Ç–æ—á–Ω—ã–π —É–¥–∞—Ä"");
            }
            else if (GetTrueCriticalHit())
            {
                Damage *= _powerCriticalStrike;
                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É–¥–∞—Ä"");
            }
            else
            {
                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä"");
            }

            Damage = baseDamage;
        }

        private bool GetTrueAccurateHit()
        {
            int initialNumberStrokes = 0;

            if (_attackCount == _criticalImpactForce)
            {
                _attackCount = initialNumberStrokes;
                return true;
            }

            return false;
        }

        private bool GetTrueCriticalHit()
        {
            int —Åhance = Utilities.GetRandomPercent();

            if (—Åhance <= _—ÅhanceCriticalHit)
            {
                return true;
            }

            return false;
        }
    }

    class Vampire : Gladiator
    {
        private int _vampirism;

        public Vampire() : base(""–í–∞–º–ø–∏—Ä"", 1050, 13, 66)
        {
            _vampirism = 15;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\n–û–±–ª–∞–¥–∞–µ—Ç –≤–∞–º–ø–∏—Ä–∏–∑–º–æ–º - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–±–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {_vampirism}% –æ—Ç –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É."");
            Console.WriteLine($""–ñ–∞–∂–¥–∞ –∫—Ä–æ–≤–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –∑–∞—â–∏—Ç—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø—Ä–∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ —É–¥–∞—Ä–∞."");
        }

        public override void Strike(Gladiator opponent)
        {
            int healthToStrike = opponent.Health;
            opponent.TakePureDamage(Damage, ""–ù–∞–Ω–µ—Å –ø—Ä–æ–Ω–∏–∫–∞—é—â–∏–π —É–¥–∞—Ä"");
            int healthAftershock = opponent.Health;
            int replenishedHealth = ((healthToStrike - healthAftershock) * _vampirism) / 100;
            Health += (replenishedHealth);
            Console.WriteLine($""{Name} –í–æ—Å–ø–æ–ª–Ω–∏–ª —Å–µ–±–µ –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ {replenishedHealth}"");
        }
    }

    class Assassin : Gladiator
    {
        private int _evasionChance;
        private int _blowFromShadow;

        private bool _isStongAttackAvaliable;

        public Assassin() : base(""–ê—Å—Å–∞—Å–∏–Ω"", 850, 10, 75)
        {
            _evasionChance = 25;
            _blowFromShadow = 20;

            _isStongAttackAvaliable = false;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\n–£–∫–ª–æ–Ω–µ–Ω–∏–µ -  —Å —à–∞–Ω—Å–æ–º –≤ {_evasionChance}% –º–æ–∂–µ—Ç —É–∫–ª–æ–Ω–∏—Ç—å—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞."");
            Console.WriteLine($""–£–¥–∞—Ä –∏–∑ —Ç–µ–Ω–∏ - –ø–æ—Å–ª–µ —É–∫–ª–æ–Ω–µ–Ω–∏—è —Å–∏–ª–∞ –∞—Ç–∞–∫–∏ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ {_blowFromShadow}% –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —É–¥–∞—Ä–µ."");
        }

        public override void Strike(Gladiator opponent)
        {
            int numberForPercentages = 100;
            int currentDamage = Damage;

            if (_isStongAttackAvaliable)
            {
                currentDamage += (Damage * _blowFromShadow) / numberForPercentages;
                opponent.TakeDamage(currentDamage, ""–ù–∞–Ω–µ—Å —É–¥–∞—Ä –∏–∑ —Ç–µ–Ω–∏"");
                _isStongAttackAvaliable = false;
            }
            else
            {
                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä"");
            }
        }

        public override void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            if (MakeEvasion() == false)
            {
                Health -= damage - Armor;
            }

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        private bool MakeEvasion()
        {
            int —Åhance = Utilities.GetRandomPercent();

            if (—Åhance <= _evasionChance)
            {
                _isStongAttackAvaliable = true;
                Console.WriteLine($""\t{Name} –£–∫–ª–æ–Ω–∏–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏"");
                return true;
            }

            return false;
        }
    }

    class Berserk : Gladiator
    {
        private int _furyActivationThreshold;
        private int _increasedAttackPower;
        private int _increasedProtection;
        private int _baseHealth;

        private bool _isActiveFury;
        private bool _isTakingDamage;

        public Berserk() : base(""–ë–µ—Ä—Å–µ—Ä–∫"", 920, 15, 50)
        {
            _furyActivationThreshold = 50;
            _increasedAttackPower = 10;
            _increasedProtection = 50;
            _baseHealth = Health;

            _isActiveFury = false;
            _isTakingDamage = false;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\n–ù–µ—É—Ç–æ–º–∏–º–æ—Å—Ç—å - –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–Ω–∞ —Å–∏–ª–∞ –∞—Ç–∞–∫–∏ –ø–æ–≤—ã—à–∞–µ—Ç—Å—è –Ω–∞ {_increasedAttackPower}% –∑–∞ –∫–∞–∂–¥—ã–π —É–¥–∞—Ä."");
            Console.WriteLine($""–Ø—Ä–æ—Å—Ç—å - –∫–æ–≥–¥–∞ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–ø–∞–¥–µ—Ç –¥–æ {_furyActivationThreshold}%, –µ–≥–æ –∑–∞—â–∏—Ç–∞ –æ–¥–∏–Ω —Ä–∞–∑ —É–≤–µ–ª–∏—á–µ–≤–∏—Ç—Å—è –Ω–∞ {_increasedProtection}%."");
        }

        public override void Strike(Gladiator opponent)
        {
            int numberForPercentages = 100;
            int boostDamage = (Damage * _increasedAttackPower) / numberForPercentages;
            Damage += boostDamage;

            UnleashFury();

            if (_isTakingDamage)
            {
                Console.WriteLine($""–ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–∏–Ω–∞ –Ω–∞ {boostDamage}"");
                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä"");
                _isTakingDamage = false;
            }
            else
            {
                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä"");
            }
        }

        public override void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            Health -= damage - Armor;
            _isTakingDamage = true;

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        private void UnleashFury()
        {
            int numberForPercentages = 100;

            if (Health <= (_baseHealth * _furyActivationThreshold) / numberForPercentages && _isActiveFury == false)
            {
                _isActiveFury = true;
                int furyArmor = Armor + (Armor * _increasedProtection) / numberForPercentages;
                Armor = furyArmor;
                Console.WriteLine(""–Ø—Ä–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞"");
            }
            else if (_isActiveFury == true)
            {
                Console.WriteLine(""–Ø—Ä–æ—Å—Ç–Ω—ã–π"");
            }
            else if (Health >= (_baseHealth * _furyActivationThreshold) / numberForPercentages && _isActiveFury == true)
            {
                int furyArmor = Armor - (Armor * _increasedProtection) / numberForPercentages;
                Armor = furyArmor;
                _isActiveFury = false;
            }
        }
    }

    class Paladin : Gladiator
    {
        private int _chanceBlinding;
        private int _percentageForActivation;
        private int _blindingDamage;
        private int _baseHealth;
        private int _chanceHeal;
        private int _healingPercentage;

        private bool _isBlind;

        public Paladin() : base(""–ü–∞–ª–∞–¥–∏–Ω"", 830, 20, 45)
        {
            _chanceBlinding = 25;
            _percentageForActivation = 50;
            _blindingDamage = 35;
            _baseHealth = Health;
            _chanceHeal = 15;
            _healingPercentage = 10;

            _isBlind = false;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\n–û—Å–ª–µ–ø–ª–µ–Ω–∏–µ - –µ—Å–ª–∏ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –±–æ–ª—å—à–µ {_percentageForActivation}% –µ—Å—Ç—å —à–∞–Ω—Å {_chanceBlinding}% –æ—Å–ª–µ–ø–∏—Ç—å –≤—Ä–∞–≥–∞ –∏ –Ω–∞–Ω–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω –≤ +{_blindingDamage}%. –û—Å–ª–µ–ø–ª–µ–Ω–Ω—ã–π –≤—Ä–∞–≥ –Ω–µ –Ω–∞–Ω–µ—Å–µ—Ç —É—Ä–æ–Ω."");
            Console.WriteLine($""–ò—Å—Ü–µ–ª–µ–Ω–∏–µ - –µ—Å–ª–∏ —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–Ω–∏–∑–∏–ª–æ—Å—å –¥–æ {_percentageForActivation}% –µ—Å—Ç—å —à–∞–Ω—Å –≤ {_chanceHeal}% –∏—Å—Ü–µ–ª–∏—Ç—å —Å–µ–±—è –Ω–∞ {_healingPercentage}% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ—Å–ª–µ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —É–¥–∞—Ä–∞ –ø–æ –≤—Ä–∞–≥—É"");
        }

        public override void Strike(Gladiator opponent)
        {
            int —Åhance = Utilities.GetRandomPercent();
            int numberForPercentages = 100;
            int currentDamage = Damage;

            if (ActivateSkill())
            {
                if (ChanceUseSkill(_chanceBlinding))
                {
                    _isBlind = true;
                    currentDamage += (Damage + _blindingDamage) / numberForPercentages;
                    opponent.TakeDamage(currentDamage, ""–ù–∞–Ω–µ—Å –æ—Å–ª–µ–ø–ª—è—é—â–∏–π —É–¥–∞—Ä"");
                }
                else
                {
                    opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä"");
                }
            }
            else if (ActivateSkill() == false)
            {
                if (ChanceUseSkill(_chanceHeal))
                {
                    Health += (_baseHealth * _healingPercentage) / numberForPercentages;
                    Console.WriteLine($""{Name} –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ò—Å—Ü–µ–ª–µ–Ω–∏–µ"");
                }

                opponent.TakeDamage(Damage, ""–ù–∞–Ω–µ—Å –æ–±—ã—á–Ω—ã–π —É–¥–∞—Ä"");
            }
        }

        public override void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            if (_isBlind)
            {
                _isBlind = false;
                Console.WriteLine(""–û—Å–ª–µ–ø–ª–µ–Ω"");
            }
            else
            {
                Health -= damage - Armor;
                _isBlind = false;
            }

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        private bool ActivateSkill()
        {
            int numberForPercentages = 100;

            if (Health >= (_baseHealth * _percentageForActivation) / numberForPercentages)
            {
                return true;
            }

            return false;
        }

        private bool ChanceUseSkill(int percentageActivation)
        {
            int —Åhance = Utilities.GetRandomPercent();

            if (—Åhance <= percentageActivation)
            {
                return true;
            }

            return false;
        }
    }

    class Team
    {
        private List<Gladiator> _gladiators = new List<Gladiator>();

        public Team()
        {
            _gladiators = GetGladiator();
        }

        public int ReturnCount()
        {
            return _gladiators.Count;
        }

        public List<Gladiator> ReturnGladiators()
        {
            return _gladiators;
        }

        public void ShowCommand(string text)
        {
            Console.WriteLine(text);

            for (int i = 0; i < _gladiators.Count; i++)
            {
                Console.WriteLine(_gladiators[i].Name);
            }
        }

        public void RemoveGladiator()
        {
            for (int i = _gladiators.Count - 1; i >= 0; i--)
            {
                if (_gladiators[i].IsAlive == false)
                {
                    Console.WriteLine($""\n{_gladiators[i].Name} –±—ã–ª —É–±–∏—Ç\n"");
                    _gladiators.Remove(_gladiators[i]);
                }
            }
        }

        private List<Gladiator> GetGladiator()
        {
            List<Gladiator> gladiators = new List<Gladiator>(_gladiators)
            {
             new Warrior(),
             new Vampire(),
             new Assassin(),
             new Berserk(),
             new Paladin()
            }; 

            List<Gladiator> selectedGladiators = new List<Gladiator>();
            Gladiator gladiator = null;
            int maximumNumberGladiators = 3;

            Console.WriteLine(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–∞:"");

            while (selectedGladiators.Count < maximumNumberGladiators)
            {
                string numberGladiator = Console.ReadLine();

                if (int.TryParse(numberGladiator, out int index))
                {
                    if (index > 0 && index <= gladiators.Count)
                    {
                        gladiator = gladiators[index - 1];
                        selectedGladiators.Add(gladiator);

                        Console.WriteLine($""–í—ã–±—Ä–∞–Ω {gladiators[index - 1].Name}"");
                    }
                    else
                    {
                        Console.WriteLine(""\n–ì–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n"");
                    }
                }
                else
                {
                    Console.WriteLine(""\n–ì–ª–∞–¥–∏–∞—Ç–æ—Ä–∞ –ø–æ–¥ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n"");
                }
            }

            return selectedGladiators;
        }       
    }

    class Arena
    {
        private List<Gladiator> _gladiators = new List<Gladiator>()
        {
             new Warrior(),
             new Vampire(),
             new Assassin(),
             new Berserk(),
             new Paladin()
        };

        public void Work()
        {
            Console.WriteLine(""\t\t–°–ø–∏—Å–æ–∫ –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤:"");
            ShowListGladiators();

            Console.WriteLine(""\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"");
            Team teamOne = new Team();

            Console.WriteLine(""\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"");
            Team teamSecond = new Team();

            Console.Clear();

            teamOne.ShowCommand(""–ü–µ—Ä–≤–∞—è –∫–æ–º–∞–Ω–¥–∞:\n"");
            teamSecond.ShowCommand(""\n–í—Ç–æ—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞:\n"");

            Console.WriteLine(""\n-–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –±–æ–π!-\n"");
            Console.ReadKey();

            Battle(teamOne, teamSecond);
        }

        private void ShowListGladiators()
        {
            for (int i = 0; i < _gladiators.Count; i++)
            {
                Console.WriteLine($""\n\t\t–ì–ª–∞–¥–∏–∞—Ç–æ—Ä –Ω–æ–º–µ—Ä_{i + 1}\n"");
                _gladiators[i].ShowGladiatorInformation();
            }
        }

        private void Battle(Team teamOne, Team teamSecond)
        {
            List<Team> gladiatorTeams = new List<Team> { teamOne, teamSecond };

            int numberToAttackFirst = 50;
            int first = 0;
            int second = 1;

            while (teamOne.ReturnCount() > 0 && teamSecond.ReturnCount() > 0)
            {
                int firstStrike = Utilities.GetRandomPercent();

                if (firstStrike > numberToAttackFirst)
                {
                    first = 0;
                    second = 1;
                }
                else
                {
                    first = 1;
                    second = 0;
                }

                if (gladiatorTeams[first].ReturnCount() > 0)
                {
                    Console.WriteLine($""\n–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã {first + 1} –∫–æ–º–∞–Ω–¥—ã –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä –ø–µ—Ä–≤—ã–º–∏"");

                    for (int i = 0; i < gladiatorTeams[first].ReturnCount(); i++)
                    {
                        gladiatorTeams[first].ReturnGladiators()[i].ShowHealthBattle();
                        int randomGladiatorIndex = Utilities.GetRandomNumber(gladiatorTeams[second].ReturnCount() - 1);

                        if (randomGladiatorIndex < 0)
                            randomGladiatorIndex = 0;

                        gladiatorTeams[first].ReturnGladiators()[i].Strike(gladiatorTeams[second].ReturnGladiators()[randomGladiatorIndex]);

                        for (int j = 0; j < gladiatorTeams[second].ReturnCount(); j++)
                        {
                            gladiatorTeams[second].RemoveGladiator();
                        }
                    }
                }

                if (gladiatorTeams[second].ReturnCount() > 0)
                {
                    Console.WriteLine($""\n–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã {second + 1} –∫–æ–º–∞–Ω–¥—ã –Ω–∞–Ω–æ—Å—è—Ç —É–¥–∞—Ä –≤ –æ—Ç–≤–µ—Ç"");

                    for (int i = 0; i < gladiatorTeams[second].ReturnCount(); i++)
                    {
                        gladiatorTeams[second].ReturnGladiators()[i].ShowHealthBattle();
                        int randomGladiatorIndex = Utilities.GetRandomNumber(gladiatorTeams[first].ReturnCount() - 1);

                        if (randomGladiatorIndex < 0)
                            randomGladiatorIndex = 0;

                        gladiatorTeams[second].ReturnGladiators()[i].Strike(gladiatorTeams[first].ReturnGladiators()[randomGladiatorIndex]);

                        for (int j = 0; j < gladiatorTeams[first].ReturnCount(); j++)
                        {
                            gladiatorTeams[first].RemoveGladiator();
                        }
                    }
                }

                Console.ReadKey();
                Console.Clear();
            }

            if (gladiatorTeams[first].ReturnCount() > 0 && gladiatorTeams[second].ReturnCount() <= 0)
            {
                Console.WriteLine($""\n–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã {first + 1} –∫–æ–º–∞–Ω–¥—ã –ø–æ–±–µ–¥–∏–ª–∏"");
            }
            else if (gladiatorTeams[second].ReturnCount() > 0 && gladiatorTeams[first].ReturnCount() <= 0)
            {
                Console.WriteLine($""\n–ì–ª–∞–¥–∏–∞—Ç–æ—Ä—ã {second + 1} –∫–æ–º–∞–Ω–¥—ã –ø–æ–±–µ–¥–∏–ª–∏"");
            }
        }
    }
}

"
4pNWpeBP,data901,TestGuy1,JSON,Friday 19th of April 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'e428aba24938551b586128cc445cbfc0960daaced7a66e7c29972d609318def70f13cdb551f4c2d7b0eacf8a67b92d98783735225e2490815b834eb406bde6f096f2304089ff62f892a502c89452078b6b0a0d325d63463ead209a70d07a1db92a9e60931c9d862b5339d14c8a085a9c003508b6defe3cd8f1b34c7b7e29ad38',
  otherdata: [
    'f730234de4699daaa85fe76490613731',
    '8477b115a69d7c34e8e274308bf86e52',
    '65fd50443ca1eda70b17fb87ba2f4b9d',
    '06efd31be98c902f216deefecc5d42f4',
    '14ef626af17e5312abb04983d7873d78',
    'e5b626a2333c7c63ae22fcfd84b605e1',
    '23ae1d1a951fa62cb7d541f96913045e',
    'c4cb6efd471cb2afb16e942b0e463daa'
  ]
}"
E0xiB9MF,Untitled,ifigazsi,Python,Friday 19th of April 2024 05:59:22 AM CDT,"from time import perf_counter_ns

def primes(n: int) -> list:
    return [i for i in range(2, n + 1) if sum(i % k == 0 for k in range(1, int(i ** 0.5) + 1)) == 1]

def prime_factors(n: int, primek) -> list:
    return [num for num in primek if n % num == 0]

start = perf_counter_ns()
pr = primes(100000);
pr_factor = prime_factors(100000, pr)
print(perf_counter_ns() - start) 
"
6nL5StEE,stresser.cpp,skaram,C++,Friday 19th of April 2024 05:48:29 AM CDT,"#include <bits/stdc++.h>

using namespace std;

signed main() {
        system(""g++-13 ../solve.cpp -o solve -O2"");
        system(""g++-13 ../stress-testing/unsolve.cpp -o unsolve -O2"");
        system(""g++-13 ../stress-testing/generator.cpp -o gen -O2"");
        for (int test = 1;; ++test) {
                cout << ""#"" << test << "" "";
                system(""./gen > input.txt"");
                system(""./solve < input.txt > solve.txt"");
                system(""./unsolve < input.txt > unsolve.txt"");
                if (system(""diff solve.txt unsolve.txt"")) {
                        cout << ""WA"" << endl;
                        break;
                }
                cout << ""OK"" << endl;
        }
        
        return 0;
}"
Nv3EHgeJ,[JS] ADOBE FIREFLY IMAGE GENERATOR,WILDAN_IZZUDIN,JavaScript,Friday 19th of April 2024 05:09:40 AM CDT,"const axios = require('axios')

class AdobeFirefly {
	constructor(options = {}) {
		this.options = options
	}

	generate = prompt => new Promise(async resolve => {
		try {
			const json = await (await axios.post('https://firefly.adobe.io/v2/images/generate', {
				prompt, ""size"": {
					""width"": 2048, ""height"": 2048
				}, ""visualIntensity"": 6, ""locale"": ""en-ID"", ""seeds"": [61438, 95119, 42010, 42205]}, {
				headers: {
					...this.options
				}
			})).data
			if (!json.outputs || json.outputs.length < 1) return ({
				status: false,
				msg: `Can't generate image!`
			})
			resolve({
				status: true,
				data: json.outputs
			})
		} catch (e) {
			resolve({
				status: false,
				msg: e.message
			})
		}
	})
}"
VamBAKRQ,Untitled,4doorsmorehories,C,Friday 19th of April 2024 05:03:48 AM CDT,"#include <stdio.h>

int main()
{
    int t,a,n,i,q;
    scanf(""%d"",&t);
    while(t--)
    {
        scanf(""%d"",&n);
        long int l,r,w,sum = 0;
        for(i=0;i<n;i++)
        {
            scanf(""%d"",&a);
            sum= sum+a;
        }
        scanf(""%d"",&q);
        while(q--)
        {
            scanf(""%ld%ld%ld"",&l,&r,&w);
            sum = sum+(r-l+1)*w;
        }
        printf(""%ld\n"",sum);
    }
    return 0;
}"
aciuaJ92,Swap,Nil000,Email,Friday 19th of April 2024 04:59:23 AM CDT,"Hello! I am swapping Bitcoin Testnet to Bitcoin,
reference: 1000 Testnet = 200 dollars in Bitcoin.
If you have any amount between 100 and 26,000 Bitcoin Testnet, contact me.
---
E-mail: geralddemail@gmail.com"
Gq4CWv3c,Yuga Labs Sells 2 NFT Gaming IPs to Faraway Amid Refocusing Efforts,livebetpro,PHP,Friday 19th of April 2024 04:52:23 AM CDT,https://www.livebetpro.com/yuga-labs-sells-2-nft-gaming-ips-to-faraway-amid-refocusing-efforts/
hKyVhuiK,USDC Issuer Circle Successfully Completes SOC 2 Type 2 Audit,livebetpro,PHP,Friday 19th of April 2024 04:44:00 AM CDT,https://www.livebetpro.com/usdc-issuer-circle-successfully-completes-soc-2-type-2-audit/
UPkwL0WJ,Cardano Foundation Unveils Interim Constitution for Decentralized Governance,livebetpro,PHP,Friday 19th of April 2024 04:34:28 AM CDT,https://www.livebetpro.com/cardano-foundation-unveils-interim-constitution-for-decentralized-governance/
zDGRQy8e,Create Spline from code,Staggart,C#,Friday 19th of April 2024 04:16:19 AM CDT,"GameObject gameObject = new GameObject(""River"");

SplineContainer splineContainer = gameObject.AddComponent<SplineContainer>();
splineContainer.Splines = null;

//Create a basic spline with a wiggly shape
int knots = 5;
float amplitude = 2f;
float length = 50f;
Spline spline = new Spline(knots, false);

for (int i = 0; i <= knots; i++)
{
	float t = (float)i / (float)knots;
	
	BezierKnot knot = new BezierKnot();
	
	knot.Position = new Vector3(Mathf.Sin(t * knots * 2f) * amplitude, 0f, (t * length) - (length * 0.5f));
	
	spline.Add(knot, TangentMode.Linear);
}

//Automatically recalculate tangents
spline.SetTangentMode(new SplineRange(0, spline.Count), TangentMode.AutoSmooth);

splineContainer.AddSpline(spline);"
ceSsWsZA,Crypto Exchange Binance Secures Full VASP License in Dubai,livebetpro,PHP,Friday 19th of April 2024 04:01:08 AM CDT,https://www.livebetpro.com/crypto-exchange-binance-secures-full-vasp-license-in-dubai/
JbVXtzt1,Untitled,phpface,PHP,Friday 19th of April 2024 03:47:53 AM CDT,"add_action( 'wp_footer', function() {

    ?>
    <script type=""text/javascript"">
        (function($) {
            ""use strict"";

            function reLocateChatBox() {
                var comment = $('.single-video__comments.comments-fixed');

                if (comment.length === 0) {
                    return;
                }

                var mainContent = $('.single-video__body__main .post-bottom');
                var screenWidth = $(window).width();

                if (screenWidth <= 992) {
                    // Move the comment section
                    comment.appendTo(mainContent);
                } else {
                    // Restore its location
                    comment.appendTo($('.single-video__body').parent());
                }
            }

            $(window).on('resize', reLocateChatBox);
            $(document).ready(reLocateChatBox);

        })(jQuery);                
    </script>
    <?php

} );"
74w0xJgc,cloneRecord,Savelyev_Vyacheslav,JavaScript,Friday 19th of April 2024 02:24:00 AM CDT,"const fieldsExclude = [
    ""sys_updated_by"",
    ""sys_updated_at"",
    ""sys_id"",
    ""sys_created_by"",
    ""sys_created_at"",
    ""state_changed_at"",
    ""opened_at"",
    ""number"",
    ""display_name"",
];
const tableName = 'itsm_request_task'
const recordID = '171350956333572618'


cloneRecord(tableName, recordID, fieldsExclude);

function cloneRecord(tableName, recordID, fieldsExclude) {
    const current = new SimpleRecord(tableName);
    current.get(recordID);

    const fields = current.getAttributes();

    const tasks = new SimpleRecord(tableName);

    Object.keys(fields).forEach(key => {
        if (!fieldsExclude.includes(key)) {
            tasks.setValue(key, fields[key]);
        }
    });

    const insertedTaskID = tasks.insert();

    ss.info(`/record/${tableName}/${insertedTaskID}`);
}

"
JJGhGNwX,Untitled,Diaxon,PHP,Friday 19th of April 2024 02:05:16 AM CDT,"    Utw√≥rz bazƒô danych z kolumnami USER,KOMENTARZ.
    Dodaj skrypt, kt√≥ry umo≈ºliwi dodawanie komentarzy do bazy, a nastƒôpnie bƒôdzie wy≈õwietlaƒá
    komentarze na stronie. Pamiƒôtaj o wczytaniu ponownie pustego formularza.
    <?php
    $conn = new mysqli(""localhost"", ""root"", """", ""comments""); 
    if ($conn){
        echo ""Connected to the database"";
    } else {
        echo ""error"";
    }


    ?>

    <form action=""index5.php"" method=""POST"">
        <label>Nazwa u≈ºytkownika</label>
        <input type=""text"" name=""username"">
        <br>
        <label>Tre≈õƒá</label>
        <textarea name=""content""></textarea>
        <br>
        <button type=""submit"">Dodaj</button>

        <?php
        
        if (isset($_POST['username']) && isset($_POST['content'])){
            $query = ""INSERT INTO comments (username, content) VALUES ('{$_POST['username']}', '{$_POST['content']}')"";
            $conn->query($query);
        }

        $query = ""SELECT username, content FROM comments"";
        $results = $conn->query($query);
        if ($results->num_rows > 0){
            while ($row = $results->fetch_assoc()){
                echo ""<p>{$row['username']} {$row['content']}</p>"";
            }
        }
        ?>
    </form>

    Utw√≥rz skrypt do wprowadzania danych ucznia do dziennika. Na poczƒÖtku tworzymy bazƒô, kt√≥ra
    zawiera kolumny ID,IMIE,NAZWISKO. Nastƒôpnie dodajemy 3 formularze i piszemy skrypt, kt√≥ry
    umo≈ºliwi wprowadzanie danych do naszej bazy.
    <form method=""POST"" action=""index5.php"">
        <lable>IMIE</label>
        <input type=""text"" name=""imie"">
        <br>
        <label>NAZWISKO</label>
        <input type=""text"" name=""nazwisko"">
        <br>
        <button type=""submit"">Dodaj</button>
        
        <?php
        
        if (isset($_POST['imie']) && isset($_POST['nazwisko'])){
            $imie = $_POST['imie'];
            $nazwisko = $_POST['nazwisko'];

            $query = ""INSERT INTO dziennik (imie, nazwisko) VALUES ('${imie}', '${nazwisko}')"";
            $conn->query($query);
        }
        ?>
    </form>

    Zadanie 3.
    Utw√≥rz tabelƒô w kt√≥rej znajda siƒô nastƒôpujƒÖce kolumny ID,IMIE,NAZWISKO,PLEC,DATA.
    Nastƒôpnie za pomocƒÖ poni≈ºej zaprezentowanych formularzy utw√≥rz skrypt do wprowadzania danych
    do bazy. 2 formularze typu ‚Äì text, jeden typ ‚Äì date, i lista rozwijana z kt√≥rej mo≈ºemy wybraƒá p≈Çeƒá:
    mƒô≈ºczyzna lub kobieta.

    <form action=""index5.php"" method=""POST"">
        <label>IMIE</label>    
        <input type=""text"" name=""imie"">
        <br>
        <label>NAZWISKO</label>
        <input type=""text"" name=""nazwisko"">
        <br>
        <label>PLEC</label>
        <select name=""plec"">
            <option value=""chlop"">Chlop</option>
            <option value=""baba"">Baba</option>
        </select>
        <br>
        <label>DATA</label>
        <input type=""date"" name=""data"">
        <br>
        <button type=""submit"">Dodaj</button>

        <?php
        if (isset($_POST['imie']) && isset($_POST['nazwisko']) && isset($_POST['plec']) && isset($_POST['data'])){
            $imie = $_POST['imie'];
            $nazwisko = $_POST['nazwisko'];
            $plec = $_POST['plec'];
            $data = $_POST['data'];

            $query = ""INSERT INTO user (imie, nazwisko, plec, data) VALUES ('${imie}', '${nazwisko}', '${plec}', '${data}')"";
            $conn->query($query);
        }
        ?>
    </form>

    Dodaj formularz za, kt√≥ry za pomocƒÖ listy rozwijanej wy≈õwietli dane z jednej kolumny. Nastƒôpnie z
    tabeli zostajƒÖ usuwane wybrane dane. (ca≈Çy wiersz). Wykorzystaj tabelƒô utworzonƒÖ w poprzednim
    zadaniu.
    SQL: DELETE from nazwa_tabeli WHERE nazwa_tabeli=Swartosc;

    <form method=""POST"" action=""index5.php"">
        <select name=""imie"">
            <?php
                $query = ""SELECT id, username FROM comments"";
                $result = $conn->query($query);
                print_r($result->num_rows);
                while($row = $result->fetch_assoc()){
                    echo ""<option value={$row['id']}>{$row['username']}</option>"";
                }
            ?>
        </select>
        <button type=""submit"">Usu≈Ñ</button>
        <?php
            if (isset($_POST['imie'])){
                $query = ""DELETE FROM comments WHERE id={$_POST['imie']}"";
                $conn->query($query);
            }
        ?>
    </form>


    Utw√≥rz skrypt wyliczajƒÖcy sumƒô do zap≈Çaty za wybrane ksiƒÖ≈ºki. Wpisujemy liczbƒô sztuk i z opcji
    wybieramy tytu≈Ç ksiƒÖ≈ºki. Skrypt powinien policzyƒá cenƒô za ksiƒÖ≈ºki.
    Tabela powinna zawieraƒá przynajmniej dwie kolumny ksiƒÖ≈ºki i cena.

    <form method=""POST"" action=""index5.php"">
        <label>Podaj liczbƒô sztuk</label>
        <input type=""number"" name=""count""/>
        <br>
        <label>Wybierz tytu≈Ç</label>
        <select name=""id"">
            <?php
                $query = ""SELECT id, tytul FROM books"";
                $result=$conn->query($query);
                while($row=$result->fetch_assoc()){
                    echo ""<option value={$row['id']}>{$row['tytul']}</option>"";
                }
            ?>
        </select>
        <button type=""submit"">Policz</button>
        <?php
            if (isset($_POST['id']) && isset($_POST['count'])){
                $query= ""SELECT cena FROM books WHERE id={$_POST['id']} "";
                $result =$conn->query($query);
                $row = $result->fetch_assoc();
                $price = $row['cena'] * $_POST['count'];
                echo ""<p>Cena: {$price}</p>"";
            }
        ?>
    </form>"
tDJAN3Jz,Soccer Prediction Betting Tips 19042024,livebetpro,PHP,Friday 19th of April 2024 01:36:56 AM CDT,https://www.livebetpro.com/soccer-prediction-betting-tips-19042024/
DCvdykbe,cc: tweaked - petr_axeman - turtle_extension,PetrAxeman,Lua,Friday 19th of April 2024 01:32:53 AM CDT,"function where_am_i ()
end"
vtJjfCZ8,Home Maintenance,Silviya7,JavaScript,Friday 19th of April 2024 12:35:21 AM CDT,"
function solve(){
    const BtnAdd= document.getElementById('add-btn');
    const Inputplace=document.getElementById('place');
    const Inputaction=document.getElementById('action');
    const Inputperson=document.getElementById('person');

    const listTaskElement= document.getElementById('task-list');
    const listDoneElement= document.getElementById('done-list');
    BtnAdd.addEventListener('click',()=>{

        const Elementp1=document.createElement('p');
        Elementp1.textContent=`Place:${Inputplace.value}`;
        const Elementp2=document.createElement('p');
        Elementp2.textContent=`Action:${Inputaction.value}`;
        const Elementp3=document.createElement('p');
        Elementp3.textContent=`Person:${Inputperson.value}`;

        const ElementArticle= document.createElement('article');
        ElementArticle.appendChild(Elementp1);
        ElementArticle.appendChild(Elementp2);
        ElementArticle.appendChild(Elementp3);

        const BtnEdit=document.createElement('button');
        BtnEdit.classList.add('edit');
        BtnEdit.textContent='Edit';
        const BtnDone=document.createElement('button');
        BtnDone.classList.add('done');
        BtnDone.textContent='Done';

        const ContainerButtons= document.createElement('div');
        ContainerButtons.classList.add('buttons');
        ContainerButtons.appendChild(BtnEdit);
        ContainerButtons.appendChild(BtnDone);

        const ElementLi= document.createElement('li');
        ElementLi.appendChild(ElementArticle);
        ElementLi.appendChild(ContainerButtons);
        listTaskElement.appendChild(ElementLi);

        BtnEdit.addEventListener('click',()=>{

            let ListNodes= document.querySelectorAll('article p');
            let ArrNodes= Array.from(ListNodes);

            Inputplace.value=ArrNodes[0].textContent.substring(6);
            Inputaction.value=ArrNodes[1].textContent.substring(7);
            Inputperson.value=ArrNodes[2].textContent.substring(7);

            ElementLi.remove();
        });

        BtnDone.addEventListener('click',()=>{
            listDoneElement.appendChild(ElementLi);
            BtnDone.remove();
            BtnEdit.remove();

            const BtnDelete= document.createElement('button');
            BtnDelete.classList.add('delete');
            BtnDelete.textContent='Delete';
            ElementLi.appendChild(BtnDelete);
            BtnDelete.addEventListener('click',()=>{
                ElementLi.remove();
            })

        });
    });
}"
2N2ntTx0,Untitled,ashibh,C++,Friday 19th of April 2024 12:05:34 AM CDT,"//                                                     (‚î¨‚î¨Ôπè‚î¨‚î¨)
#include <bits/stdc++.h>
using namespace std;
#define lli long long int
 
int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
#ifndef ONLINE_JUDGE
    freopen(""input.txt"", ""r"", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
 
 
    int n, mny;
    cin >> n >> mny;
    vector<int>pr(n), pg(n);
 
    for (int i = 0; i < n; ++i)
        cin >> pr[i];
 
    for (int i = 0; i < n; ++i)
        cin >> pg[i];
 
    vector<vector<int>> dp(n + 1, vector<int>(mny + 1, 0));
 
 
    for (int i = 1; i <= n; ++i)
    {
        for (int j = 0; j <= mny; ++j)
        {
            dp[i][j] = dp[i - 1][j];
            int lf = j - pr[i - 1];
            if (lf >= 0 ) {
                dp[i][j] = max(dp[i][j], pg[i - 1] + dp[i - 1][lf]);
            }
        }
    }
 
    cout << dp[n][mny];
 
}"
1DpkJsSa,Untitled,AbsolutelyS,C++,Thursday 18th of April 2024 11:13:29 PM CDT,"#include ""BuildingRec.hpp""

/**
 * ! EXERCISE #7 -- IMPLEMENT A RECURSIVE SEARCH METHOD
 *
 * Count the buildings that are younger than the target object building.
 *
 * The method MUST BE RECURSIVE.
 */
unsigned int Building::countYoungerBuildingsHelper(vector<Building *> &buildings, unsigned int i) {
    if(buildings.size() <= i) 
        { 
            return 0; 
        }

    if (buildings[i]->getAge() < this->getAge())
        {
            return 1 + countYoungerBuildingsHelper(buildings, i + 1);
        }
    else 
        { 
            return countYoungerBuildingsHelper(buildings, i + 1);
        }
}

unsigned int Building::countYoungerBuildings(vector<Building *> &buildings) {
    return countYoungerBuildingsHelper(buildings, 0);
}"
gUWnpQz2,Untitled,AbsolutelyS,C++,Thursday 18th of April 2024 11:08:55 PM CDT,"#include <string>
#include <vector>

using namespace std;

enum Material {
    BRICK,
    CONCRETE,
    WOOD,
    STONE,
    GLASS
};

class Registered {
    public:
    virtual string getLocation() { 
        return """";
        }
};

/**
 * ! EXERCISE #1 -- COMPLETE ABSTRACT BUILDING CLASS. REFACTOR SUBCLASSES.
 *
 * ! EXERCISE #3 -- BUILDING SUBCLASS OF REGISTERED.
 *
 */

class Building : public Registered {
  protected:
    string city;
    int buildingNumber;
    int age;  // age of building in years
    int area; // area in sq. ft.
    Material material;

  public:
    string neighborhood;
    vector<string> residents;
    string storeName;

    virtual string getCity() { return city; }
    virtual int getBuildingNumber() { return buildingNumber; }
    virtual int getAge() { return age; }
    virtual int getArea() { return area; }
    virtual Material getMaterial() { return material; }
    

    void setCity(string city) { this->city = city; }
    void setBuildingNumber(int buildingNumber) { this->buildingNumber = buildingNumber; }
    void setAge(int age) { this->age = age; }
    void setArea(int area) { this->area = area; }
    void setMaterial(Material material) { this->material = material; }
    
    Building(string city, int buildingNumber, int age, int area, Material material) : city(city), buildingNumber(buildingNumber), age(age), area(area), material(material) {};

    static int findNewestBuilding(vector<Building *> buildings) {
        return -11;
    }


    static bool existMaterialFromCity(vector<Building *> &buildings, string city, Material material) {
        return true || false;
    }


    static unsigned int countYoungerBuildings(vector<Building *> buildings) {
        return 999;
    }

}; // End of abstract Building class

class House : public Building {
  private:
    string neighborhood;
    vector<string> residents;

  public:
    House() : House("""", """", 0, 0, 0, Material::BRICK){};

    House(string city, string neighborhood, int buildingNumber, int age, int area, Material material ) : Building(city, buildingNumber, age, area, material){
        this->neighborhood = neighborhood;
    }

    string getNeighborhood() { return neighborhood; }
    vector<string> getResidents() { return residents; }

    void setNeighborhood(string n) { neighborhood = n; }
    void setResidents(vector<string> r) { residents = r; }

    string getLocation() { 
        return (neighborhood + "", "" + to_string(buildingNumber) + "", "" + to_string(age));
        }

}; // End of House class

class Store : public Building {
  private:
    string storeName;

  public:
    Store() : Store("""", """", 0, 0, 0, Material::BRICK){};
    Store(string storeName, string city, int buildingNumber, int age, int area, Material material)  : Building(city, buildingNumber, age, area, material){
        this->storeName = storeName;
    }
    string getStoreName() { return storeName; }

    void setStoreName(string storeName) { this->storeName = storeName; }

    string getLocation() { 
    return (city + "", "" + to_string(buildingNumber) + "", "" + to_string(area));
    }

}; // End of Store class"
Z0FV46Cx,Sistem Keamanan Rumah Berbasis Arduino,cisco404,C++,Thursday 18th of April 2024 10:42:00 PM CDT,"#include <Arduino.h>

#define PIR_PIN 2
#define DOOR_PIN 3
#define BUZZER_PIN 4

// -------------------------------------------
// Program Pengembangan Sistem Keamanan Rumah Berbasis Arduino
// www.ardukode.blogspot.com
// -------------------------------------------

void setup() {
  pinMode(PIR_PIN, INPUT);
  pinMode(DOOR_PIN, INPUT);
  pinMode(BUZZER_PIN, OUTPUT);
}

void loop() {
  int pirState = digitalRead(PIR_PIN);
  int doorState = digitalRead(DOOR_PIN);

  if (pirState == HIGH || doorState == HIGH) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(1000);
    digitalWrite(BUZZER_PIN, LOW);
    delay(1000);
  }
}"
BhkkTfpB,Como Medir el Tiempo de Respuesta de Una API con cURL,NubeColectiva,PowerShell,Thursday 18th of April 2024 10:09:34 PM CDT,"// Comando 
curl -k -w ""@datos.txt"" -o /dev/null -s ""https://dog.ceo/api/breeds/image/random""  

// Archivo test.txt
Tiempo en buscar el nombre del endpoint:  %{time_namelookup}s\n
Tiempo en conectarse a la API:  %{time_connect}s\n
Tiempo que tomo al cliente conectarse a la API:  %{time_appconnect}s\n
Tiempo que toma la API en devolver datos:  %{time_pretransfer}s\n
Tiempo de redirecci√≥n (Si es que existe):  %{time_redirect}s\n
Tiempo que tomo en iniciar la devoluci√≥n de datos:  %{time_starttransfer}s\n
                     ----------\n
Tiempo total:  %{time_total}s\n "
gak2Hdca,200. Number of Islands,CarlosGoogles,C++,Thursday 18th of April 2024 09:45:18 PM CDT,"class Solution {
private: 
    const vector<pair<int, int>> MOVES = {
        pair<int, int>(1, 0),
        pair<int, int>(-1, 0),
        pair<int, int>(0, 1),
        pair<int, int>(0, -1)
    };

    int n;
    int m;
    
    void initialize(const vector<vector<char>>& grid) {
        n = grid.size();
        m = grid[0].size();
    }

    inline bool isValid(const pair<int, int> pos) {
        return 0 <= pos.first && pos.first < n &&
                0 <= pos.second && pos.second < m;
    }

    void dfs(vector<vector<char>>& grid, const pair<int, int> pos) {
        grid[pos.first][pos.second] = '0';

        for (const pair<int, int> move : MOVES) {
            pair<int, int> next = pair<int, int>(pos.first + move.first, pos.second + move.second);

            if (! isValid(next)) {
                continue;
            }
            if (grid[next.first][next.second] == '0') {
                continue;
            }

            dfs(grid, next);
        }
    }

public:
    int numIslands(vector<vector<char>>& grid) {
        initialize(grid);

        int ret = 0;
        for (int i = 0; i < n; i ++) {
            for (int j = 0; j < m; j ++) {
                if (grid[i][j] == '1') {
                    ret ++;
                    dfs(grid, pair<int, int>(i, j));
                }
            }
        }

        return ret;
    }
};
"
MZBBNssf,SDL FLAC experiment,ScratchMonkey,C++,Thursday 18th of April 2024 09:14:44 PM CDT,"// invoked from SDL audio thread to fill buffer with more samples
size_t Flac::getData(size_t len, void *buf)
{
   bool success = true;
   while (success && !enoughSamples() && moreDataAvailable())
      success = decoder->process_single()
   // Now copy data from Flac buffers to buf, keeping any overflow for
   // next time. If we got less than requested, return the truncated
   // count.
}

::FLAC__StreamDecoderWriteStatus FlacDecoder::write_callback(const ::FLAC__Frame *frame, const FLAC__int32 *const buffer[])
{
   // copy the decoded data into our Flac buffer for its SDL callback
   // to fetch and update the count and moreDataAvailable flag

   
   return ::FLAC__StreamDecoderWriteStatus();
}

// cache the Flac object here for use by the callback

FlacDecoder(TagLib::String path, Flac& flac_) : FLAC::Decoder::File(), flac(flac_), m_path(path) { }"
XfL80Ln1,222,reset_man,VisualBasic,Thursday 18th of April 2024 09:02:29 PM CDT,"Sub formi_e()
Dim —Ñ–∞–π–ª As Object
Dim end_t As String
Dim tek_ch_zn As String
    name_txt = ""result.xml""
    Set xl_osn = ActiveWorkbook
    Set xl_nastr = xl_osn.Sheets(""nastr"")
    Set xl_kontr = xl_osn.Sheets(""kontra_list"")
    Set mDU = CreateObject(""scripting.dictionary"")
    mDU.comparemode = 1  ''—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞
    count_xl_kontr = xl_kontr.Cells(Rows.Count, ""A"").End(xlUp).Row
    '-----
    Dim wb As Workbook
    Dim sSH As Worksheet, t As String
    name_open_f = GetFileName(""–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"", ThisWorkbook.Path)
    If name_open_f = """" Then
       MsgBox (""–ù–µ—á–µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å"")
       Exit Sub
    End If
    'name_open_f = ""D:\all_alex\xls_xml\test.xlsx""
    Set wbs = Workbooks.Open(name_open_f)
    Set xl_first = wbs.Sheets(1)
    For Each ws In wbs.Worksheets
        If InStr(1, ws.Name, ""–£–ü–î"", vbTextCompare) > 0 Then
            Set xl_upd = wbs.Sheets(ws.Name)
            
        End If
        If InStr(1, ws.Name, ""–ö–ú-"", vbTextCompare) > 0 Then
            Set sSH = wbs.Sheets(ws.Name)
            
        End If
    Next ws
    e = sSH.Range(""A"" & sSH.Rows.Count).End(xlUp).Row
    For xx = 15 To e
        t = sSH.Range(""I"" & xx)
        If t <> """" Then mDU(t) = Mid(sSH.Range(""A"" & xx), 1, 31)
    Next
    '-----–æ–ø—Ä–µ–¥–µ–ª—è–µ—Å –ø–æ–∑–∏—Ü–∏—é –≤—Å–µ–≥–æ –ø–æ —É–ø–¥
    poz_vsego = 15
    For i = 15 To 2000
      tek_cell = xl_upd.Range(""R"" & i)
      If InStr(1, tek_cell, ""–í—Å–µ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ"", vbTextCompare) > 0 Then
       poz_vsego = i - 1
       Exit For
      End If
    Next i
    '----–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ª–∏—Å—Ç—É
    For i = 15 To 2000
      tek_cell = xl_first.Range(""A"" & i)
      If Trim(tek_cell) = """" Then
       poz_vsego_first = i - 1
       Exit For
      End If
    Next i
    '----—ç—Ç–æ –≤—Å–µ–≥–¥–∞ 2 —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ª–º–∏—Å—Ç–µ –∫–æ–Ω—Ç—ã
    
    id_otpr = xl_kontr.Range(""B2"") ' –ø–æ—Å—Ç–æ—è–Ω–Ω–æ() '""2BM-3702148437-370201001-201709141106289622657""
    p–ækup_name_org = xl_upd.Range(""AB5"")
    id_pol = ""xxxxx-xxxx-xxxx-xxxx-xxxxxxxxx""
    For rr = 3 To count_xl_kontr
      If xl_kontr.Cells(rr, 1) = p–ækup_name_org Then
        id_pol = xl_kontr.Cells(rr, 2)
        Exit For
      End If
    Next rr
    'id_pol = ""2AEE11608B4-C441-48AD-B8D1-4F1751EB7694""
     GUID_str = Mid(CreateGuidString(), 2, 36)
    Dim tek_date As Date
    tek_date = Date
    dd = Day(Now)
    mm = Month(Now)
    If mm <= 9 Then mm_str = ""0"" & Trim(Str(mm)) Else mm_str = Trim(Str(mm))
    gg = Year(Now)
    If dd <= 9 Then dd_str = ""0"" & Trim(Str(dd)) Else dd_str = Trim(Str(dd))
    
    time_all = gg & mm_str & dd_str
    id_file = ""ON_NSCHFDOPPRMARK_"" & id_pol & ""_"" & id_otpr & ""_"" & time_all & ""_"" & GUID_str
    
    path_tek = xl_osn.Path & ""\"" & id_file & "".xml"" 'name_txt
    Set file_l = CreateObject(""Scripting.FileSystemObject"").CreateTextFile(path_tek, True)
      
    xl_osn.Save
    file_l.WriteLine ""<?xml version="" & Chr(34) & ""1.0"" & Chr(34) & "" encoding="" & Chr(34) & ""windows-1251"" & Chr(34) & ""?>""
   
    
   
    file_l.WriteLine ""<–§–∞–π–ª –ò–¥–§–∞–π–ª="" & Chr(34) & id_file & Chr(34) & "" –í–µ—Ä—Å–§–æ—Ä–º="" & Chr(34) & ""5.01"" & Chr(34) & "" –í–µ—Ä—Å–ü—Ä–æ–≥="" & Chr(34) & ""Diadoc 1.0"" & Chr(34) & "">""
    file_l.WriteLine ""<–°–≤–£—á–î–æ–∫–û—Ç–±–æ—Ä –ò–¥–û—Ç–ø—Ä="" & Chr(34) & id_otpr & Chr(34) & "" –ò–¥–ü–æ–ª="" & Chr(34) & id_pol & Chr(34) & "">""
    file_l.WriteLine ""</–°–≤–£—á–î–æ–∫–û—Ç–±–æ—Ä>""
    knd = ""1115131""
    fun_n = ""–°–ß–§–î–û–ü""
    pofactHG = ""–î–æ–∫—É–º–µ–Ω—Ç –æ–± –æ—Ç–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç), –ø–µ—Ä–µ–¥–∞—á–µ –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ (–¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª—É–≥)""
    NaimDocOPr = ""–°—á–µ—Ç-—Ñ–∞–∫—Ç—É—Ä–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ—Ç–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç), –ø–µ—Ä–µ–¥–∞—á–µ –∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤ (–¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–∫–∞–∑–∞–Ω–∏–∏ —É—Å–ª—É–≥)""
    DateInfPr = ""22.03.2024""
    VremInfPr = ""08.05.28""
    prod_name_org = Rep_all(xl_upd.Range(""S5""))
    NaimEkonSubSost = prod_name_org '""–û–û–û &quot;–ê–õ–¨–§–ê-–¢–†–ï–ô–î&quot;, –ò–ù–ù/–ö–ü–ü 3702148437/370201001""
    file_l.WriteLine ""<–î–æ–∫—É–º–µ–Ω—Ç –ö–ù–î="" & Chr(34) & knd & Chr(34) & "" –§—É–Ω–∫—Ü–∏—è="" & Chr(34) & fun_n & Chr(34) & "" –ü–æ–§–∞–∫—Ç–•–ñ="" & Chr(34) & pofactHG & Chr(34) & "" –ù–∞–∏–º–î–æ–∫–û–ø—Ä="" & Chr(34) & NaimDocOPr & Chr(34) & "" –î–∞—Ç–∞–ò–Ω—Ñ–ü—Ä="" & Chr(34) & DateInfPr & Chr(34) & "" –í—Ä–µ–º–ò–Ω—Ñ–ü—Ä="" & Chr(34) & VremInfPr & Chr(34) & "" –ù–∞–∏–º–≠–∫–æ–Ω–°—É–±–°–æ—Å—Ç="" & Chr(34) & NaimEkonSubSost & Chr(34) & "">""
    num_sf = xl_upd.Range(""s2"") '""32501""
    date_sf = xl_upd.Range(""v2"") '""25.03.2024""
    kod_okv = ""643""
     file_l.WriteLine ""<–°–≤–°—á–§–∞–∫—Ç –ù–æ–º–µ—Ä–°—á–§="" & Chr(34) & num_sf & Chr(34) & "" –î–∞—Ç–∞–°—á–§="" & Chr(34) & date_sf & Chr(34) & "" –ö–æ–¥–û–ö–í="" & Chr(34) & kod_okv & Chr(34) & "">""
     
     prod_name_org = Rep_all(xl_upd.Range(""S5"")) '""–û–û–û &quot;–ê–õ–¨–§–ê-–¢–†–ï–ô–î&quot;""
     If InStr(1, xl_upd.Range(""S7""), ""/"", vbTextCompare) > 0 Then
       rez1 = Split(xl_upd.Range(""S7""), ""/"")
       prod_innul = rez1(0)
       prod_kpp = rez1(1)
     Else
      prod_innul = xl_upd.Range(""S7"")
      prod_kpp = """"
     End If
     'prod_innul = ""3702148437""
     'prod_kpp = ""370201001""
     prod_okopo = xl_nastr.Range(""B7"") '""01154260""
     prod_kod_str = xl_nastr.Range(""B2"") '""643""
     prod_adres_txt = xl_upd.Range(""S6"") '""153005, –ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥.–æ. –ò–≤–∞–Ω–æ–≤–æ, –≥ –ò–≤–∞–Ω–æ–≤–æ, —É–ª –°–æ—Å–Ω–æ–≤–∞—è, –¥. 28""
     prod_tlf = xl_nastr.Range(""B8"") '""(4932) 938522""
     prod_num_scheta = xl_nastr.Range(""B4"") '""40702810606200029655""
     prod_namebank = xl_nastr.Range(""B3"") '""–ü–ê–û –ê–ö–ë &quot;–ê–í–ê–ù–ì–ê–†–î&quot;""
     prod_bik = xl_nastr.Range(""B5"") '""044525201""
     prod_kor_sch = xl_nastr.Range(""B6"") '""30101810000000000201""
     file_l.WriteLine ""<–°–≤–ü—Ä–æ–¥ –û–ö–ü–û="" & Chr(34) & prod_okopo & Chr(34) & "">""
     file_l.WriteLine ""<–ò–¥–°–≤>""
     file_l.WriteLine ""<–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="" & Chr(34) & prod_name_org & Chr(34) & "" –ò–ù–ù–Æ–õ="" & Chr(34) & prod_innul & Chr(34) & "" –ö–ü–ü="" & Chr(34) & prod_kpp & Chr(34) & "" />""
     file_l.WriteLine ""</–ò–¥–°–≤>""
     file_l.WriteLine ""<–ê–¥—Ä–µ—Å>""
    file_l.WriteLine ""<–ê–¥—Ä–ò–Ω—Ñ –ö–æ–¥–°—Ç—Ä="" & Chr(34) & prod_kod_str & Chr(34) & "" –ê–¥—Ä–¢–µ–∫—Å—Ç="" & Chr(34) & prod_adres_txt & Chr(34) & "" />""
    file_l.WriteLine ""</–ê–¥—Ä–µ—Å>""
    file_l.WriteLine ""<–ö–æ–Ω—Ç–∞–∫—Ç –¢–ª—Ñ="" & Chr(34) & prod_tlf & Chr(34) & "" />""
    file_l.WriteLine ""<–ë–∞–Ω–∫–†–µ–∫–≤ –ù–æ–º–µ—Ä–°—á–µ—Ç–∞="" & Chr(34) & prod_num_scheta & Chr(34) & "">""
    file_l.WriteLine ""<–°–≤–ë–∞–Ω–∫ –ù–∞–∏–º–ë–∞–Ω–∫="" & Chr(34) & prod_namebank & Chr(34) & "" –ë–ò–ö="" & Chr(34) & prod_bik & Chr(34) & "" –ö–æ—Ä–°—á–µ—Ç="" & Chr(34) & prod_kor_sch & Chr(34) & "" />""
    file_l.WriteLine ""</–ë–∞–Ω–∫–†–µ–∫–≤>""
    file_l.WriteLine ""</–°–≤–ü—Ä–æ–¥>""
    '---------------–≥—Ä—É–∑–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    If xl_upd.Range(""S8"") = ""–æ–Ω –∂–µ"" Then
     gruz_otprav_name_org = prod_name_org ' ""–û–û–û &quot;–ê–õ–¨–§–ê-–¢–†–ï–ô–î&quot;""
     gruz_otprav_innul = prod_innul ' ""3702148437""
     gruz_otprav_kpp = prod_kpp ' ""370201001""
     gruz_otprav_okopo = prod_okopo '""01154260""
     gruz_otprav_kod_str = prod_kod_str '""643""
     gruz_otprav_adres_txt = prod_adres_txt ' ""153005, –ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥.–æ. –ò–≤–∞–Ω–æ–≤–æ, –≥ –ò–≤–∞–Ω–æ–≤–æ, —É–ª –°–æ—Å–Ω–æ–≤–∞—è, –¥. 28""
     gruz_otprav_tlf = prod_tlf '""(4932) 938522""
    End If

    
     file_l.WriteLine ""<–ì—Ä—É–∑–û—Ç>""
     file_l.WriteLine ""<–ì—Ä—É–∑–û—Ç–ø—Ä –û–ö–ü–û="" & Chr(34) & gruz_otprav_okopo & Chr(34) & "">""
     file_l.WriteLine ""<–ò–¥–°–≤>""
     file_l.WriteLine ""<–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="" & Chr(34) & gruz_otprav_name_org & Chr(34) & "" –ò–ù–ù–Æ–õ="" & Chr(34) & gruz_otprav_innul & Chr(34) & "" –ö–ü–ü="" & Chr(34) & gruz_otprav_kpp & Chr(34) & "" />""
     file_l.WriteLine ""</–ò–¥–°–≤>""
     file_l.WriteLine ""<–ê–¥—Ä–µ—Å>""
     file_l.WriteLine ""<–ê–¥—Ä–ò–Ω—Ñ –ö–æ–¥–°—Ç—Ä="" & Chr(34) & gruz_otprav_kod_str & Chr(34) & "" –ê–¥—Ä–¢–µ–∫—Å—Ç="" & Chr(34) & gruz_otprav_adres_txt & Chr(34) & "" />""
     file_l.WriteLine ""</–ê–¥—Ä–µ—Å>""
     file_l.WriteLine ""<–ö–æ–Ω—Ç–∞–∫—Ç –¢–ª—Ñ="" & Chr(34) & gruz_otprav_tlf & Chr(34) & "" />""
     file_l.WriteLine ""</–ì—Ä—É–∑–û—Ç–ø—Ä>""
     file_l.WriteLine "" </–ì—Ä—É–∑–û—Ç>""
  '---------------–≥—Ä—É–∑–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
     gruz_polych_name_org = Rep_all(xl_upd.Range(""S9"")) '""–û–û–û &quot;–ê–õ–¨–§–ê-–¢–†–ï–ô–î&quot;""
     '--—Å—á–∏—Ç–∞–µ–º —á—Ç–æ –æ–Ω –∂–µ --–ø—Ä–æ–¥–∞–≤–µ—Ü
     '-------------------–ø—Ä–æ–¥–æ–≤–µ—Ü
     name_org = Rep_all(xl_upd.Range(""AB5"")) ' ""–û–û–û &quot;–¢—Ä–∏–∫–æ—Ç–∞–∂ –ù–ê–¢–ê–õ–ò&quot;""
     If InStr(1, xl_upd.Range(""AB7""), ""/"", vbTextCompare) > 0 Then
       rez1 = Split(xl_upd.Range(""AB7""), ""/"")
       innul = Replace(rez1(0), ""–ò–ù–ù"", """")
       kpp = Replace(rez1(1), ""–ö–ü–ü"", """")
     Else
      innul = Replace(xl_upd.Range(""ab7""), ""–ò–ù–ù"", """")
      kpp = """"
     End If
    okopo = xl_nastr.Range(""C7"") '""01154260""
    'innul = ""3702703225""
    'kpp = ""370201001""
    kod_str = xl_nastr.Range(""c2"") '""643""
    adress_txt = xl_upd.Range(""AB6"") ' ""153007, –ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª, –≥.–æ. –ò–≤–∞–Ω–æ–≤–æ, –≥ –ò–≤–∞–Ω–æ–≤–æ, —É–ª –§—Ä—É–Ω–∑–µ, –¥. 97""
    num_scheta = xl_nastr.Range(""C4"") '""40702810917000006966""
    namebank = xl_nastr.Range(""C3"") ' ""–ò–≤–∞–Ω–æ–≤—Å–∫–æ–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ ‚Ññ8639 –ü–ê–û –°–±–µ—Ä–±–∞–Ω–∫""
    bik = xl_nastr.Range(""C5"") '""042406608""
    korr_num = xl_nastr.Range(""C6"") ' ""30101810000000000608""
     
     gruz_polych_innul = innul ' ""3702148437""
     gruz_polych_kpp = kpp '""370201001""
     gruz_polych_okopo = okopo '""01154260""
     gruz_polych_kod_str = ""643""
     gruz_polych_adres_txt = xl_upd.Range(""v9"") '""153005, –ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥.–æ. –ò–≤–∞–Ω–æ–≤–æ, –≥ –ò–≤–∞–Ω–æ–≤–æ, —É–ª –°–æ—Å–Ω–æ–≤–∞—è, –¥. 28""
     gruz_polych_tlf = ""(4932) 938522""
     gruz_polych_num_scheta = num_scheta '""40702810606200029655""
     gruz_polych_namebank = namebank '""–ü–ê–û –ê–ö–ë &quot;–ê–í–ê–ù–ì–ê–†–î&quot;""
     gruz_polych_bik = bik  '""044525201""
     gruz_polych_kor_sch = korr_num '""30101810000000000201""
     file_l.WriteLine ""<–ì—Ä—É–∑–ü–æ–ª—É—á>""
     file_l.WriteLine ""<–ò–¥–°–≤>""
     file_l.WriteLine ""<–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="" & Chr(34) & gruz_polych_name_org & Chr(34) & "" –ò–ù–ù–Æ–õ="" & Chr(34) & gruz_polych_innul & Chr(34) & "" –ö–ü–ü="" & Chr(34) & gruz_polych_kpp & Chr(34) & "" />""
     file_l.WriteLine ""</–ò–¥–°–≤>""
     file_l.WriteLine ""<–ê–¥—Ä–µ—Å>""
     file_l.WriteLine ""<–ê–¥—Ä–ò–Ω—Ñ –ö–æ–¥–°—Ç—Ä="" & Chr(34) & gruz_polych_kod_str & Chr(34) & "" –ê–¥—Ä–¢–µ–∫—Å—Ç="" & Chr(34) & gruz_polych_adres_txt & Chr(34) & "" />""
     file_l.WriteLine ""</–ê–¥—Ä–µ—Å>""
     file_l.WriteLine ""<–ë–∞–Ω–∫–†–µ–∫–≤ –ù–æ–º–µ—Ä–°—á–µ—Ç–∞="" & Chr(34) & gruz_polych_num_scheta & Chr(34) & "">""
     file_l.WriteLine ""<–°–≤–ë–∞–Ω–∫ –ù–∞–∏–º–ë–∞–Ω–∫="" & Chr(34) & gruz_polych_namebank & Chr(34) & "" –ë–ò–ö="" & Chr(34) & gruz_polych_bik & Chr(34) & "" –ö–æ—Ä–°—á–µ—Ç="" & Chr(34) & gruz_polych_kor_sch & Chr(34) & "" />""
     file_l.WriteLine ""</–ë–∞–Ω–∫–†–µ–∫–≤>""
     file_l.WriteLine ""</–ì—Ä—É–∑–ü–æ–ª—É—á>""
   
    nameovk = ""–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å""
    –ù–∞–∏–º–î–æ–∫–û—Ç–≥—Ä = ""–†–µ–∞–ª–∏–∑–∞—Ü–∏—è (–∞–∫—Ç, –Ω–∞–∫–ª–∞–¥–Ω–∞—è, –£–ü–î)""
    numdok_otgr = xl_upd.Range(""S11"") '""–ø/–ø 1 - 6 ‚Ññ 32501""
    date_dok_otgr = xl_upd.Range(""w11"") '""25.03.2024""
    file_l.WriteLine ""<–°–≤–ü–æ–∫—É–ø>""
    file_l.WriteLine ""<–ò–¥–°–≤>""
    file_l.WriteLine ""<–°–≤–Æ–õ–£—á –ù–∞–∏–º–û—Ä–≥="" & Chr(34) & name_org & Chr(34) & "" –ò–ù–ù–Æ–õ="" & Chr(34) & innul & Chr(34) & "" –ö–ü–ü="" & Chr(34) & kpp & Chr(34) & "" />""
    file_l.WriteLine ""</–ò–¥–°–≤>""
    file_l.WriteLine ""<–ê–¥—Ä–µ—Å>""
    file_l.WriteLine ""<–ê–¥—Ä–ò–Ω—Ñ –ö–æ–¥–°—Ç—Ä="" & Chr(34) & kod_str & Chr(34) & "" –ê–¥—Ä–¢–µ–∫—Å—Ç="" & Chr(34) & adress_txt & Chr(34) & "" />""
        
    file_l.WriteLine ""</–ê–¥—Ä–µ—Å>""
    file_l.WriteLine ""<–ë–∞–Ω–∫–†–µ–∫–≤ –ù–æ–º–µ—Ä–°—á–µ—Ç–∞="" & Chr(34) & num_scheta & Chr(34) & "">""
    file_l.WriteLine ""<–°–≤–ë–∞–Ω–∫ –ù–∞–∏–º–ë–∞–Ω–∫="" & Chr(34) & namebank & Chr(34) & "" –ë–ò–ö="" & Chr(34) & bik & Chr(34) & "" –ö–æ—Ä–°—á–µ—Ç="" & Chr(34) & korr_num & Chr(34) & "" />""
    file_l.WriteLine ""</–ë–∞–Ω–∫–†–µ–∫–≤>""
    file_l.WriteLine ""</–°–≤–ü–æ–∫—É–ø>""
    file_l.WriteLine ""<–î–æ–ø–°–≤–§–•–ñ1 –ù–∞–∏–º–û–ö–í="" & Chr(34) & nameovk & Chr(34) & "" />""
    file_l.WriteLine ""<–î–æ–∫–ü–æ–¥—Ç–≤–û—Ç–≥—Ä –ù–∞–∏–º–î–æ–∫–û—Ç–≥—Ä="" & Chr(34) & numdok_otgr & Chr(34) & "" –ù–æ–º–î–æ–∫–û—Ç–≥—Ä="" & Chr(34) & numdok_otgr & Chr(34) & "" –î–∞—Ç–∞–î–æ–∫–û—Ç–≥—Ä="" & Chr(34) & date_dok_otgr & Chr(34) & "" />""
    file_l.WriteLine ""</–°–≤–°—á–§–∞–∫—Ç>""
    '---—Ç–∞–±–ª —Ç–æ–≤–∞—Ä–æ–≤
    file_l.WriteLine ""<–¢–∞–±–ª–°—á–§–∞–∫—Ç>""

    sum_kol_vo_tov = 0
    For ii = 15 To poz_vsego
    '--- –±–ª–æ–∫ –ø–æ —Ç–æ–≤–∞—Ä—É
      n_str = xl_upd.Range(""q"" & ii) '""6""
      name_tov = xl_upd.Range(""r"" & ii) '""–ü—Ä–æ—Å—Ç—ã–Ω—è –ù–æ—á—å –ù–µ–∂–Ω–∞ –ì—Ä–∞–Ω—å (—Å–µ—Ä—ã–π) –æ—Å–Ω. 7352-2 –ü–æ–ø–ª–∏–Ω –ï–í–†–û 240—Ö215 –ø–æ–ª–æ—Å–∞ –Ω–æ–≤–∞—è""
      tov_price = xl_upd.Range(""W"" & ii) '""23""
      okey_tov = xl_upd.Range(""T"" & ii) '""786""
      kol_vo_tov = (Val(xl_upd.Range(""V"" & ii))) '""4.0""
      tek_bez_nds = CStr(xl_upd.Range(""X"" & ii)) '""999999.99""
      Nalst = CStr(xl_upd.Range(""Z"" & ii)) '""20%""
      St_tov_ych_nal = CStr(xl_upd.Range(""AB"" & ii)) '""999999.99""
      sum_nal_tek = CStr(Val(xl_upd.Range(""AA"" & ii))) '""3424""
      tek_akcis = xl_upd.Range(""Y"" & ii)
      kod_proisx = ""643""
      num_td = ""-""
      PrtovRab = ""1""
      Kod_tek_tov = xl_upd.Range(""P"" & ii) '""4660056137608""
      Name_ed_izm = ""—à—Ç.""
      KrnameCountry = ""–†–û–°–°–ò–Ø""
      sum_kol_vo_tov = sum_kol_vo_tov + kol_vo_tov
      file_l.WriteLine ""<–°–≤–µ–¥–¢–æ–≤ –ù–æ–º–°—Ç—Ä="" & Chr(34) & n_str & Chr(34) & "" –ù–∞–∏–º–¢–æ–≤="" & Chr(34) & name_tov & Chr(34) & "" –û–ö–ï–ò_–¢–æ–≤="" & Chr(34) & okey_tov & Chr(34) & "" –ö–æ–ª–¢–æ–≤="" & Chr(34) & kol_vo_tov & Chr(34) & "" –¶–µ–Ω–∞–¢–æ–≤="" & Chr(34) & tov_price & Chr(34) & "" –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°="" & Chr(34) & tek_bez_nds & Chr(34) & "" –ù–∞–ª–°—Ç="" & Chr(34) & Nalst & Chr(34) & "" –°—Ç–¢–æ–≤–£—á–ù–∞–ª="" & Chr(34) & St_tov_ych_nal & Chr(34) & "">""
      file_l.WriteLine ""<–ê–∫—Ü–∏–∑>""
      file_l.WriteLine ""<–ë–µ–∑–ê–∫—Ü–∏–∑>"" & tek_akcis & ""</–ë–µ–∑–ê–∫—Ü–∏–∑>""
      file_l.WriteLine ""</–ê–∫—Ü–∏–∑>""
      file_l.WriteLine ""<–°—É–º–ù–∞–ª>""
      file_l.WriteLine ""<–°—É–º–ù–∞–ª>"" & sum_nal_tek & ""</–°—É–º–ù–∞–ª>""
      file_l.WriteLine ""</–°—É–º–ù–∞–ª>""
      file_l.WriteLine ""<–°–≤–¢–î –ö–æ–¥–ü—Ä–æ–∏—Å—Ö="" & Chr(34) & kod_proisx & Chr(34) & "" –ù–æ–º–µ—Ä–¢–î="" & Chr(34) & num_td & Chr(34) & "" />""
      file_l.WriteLine ""<–î–æ–ø–°–≤–µ–¥–¢–æ–≤ –ü—Ä–¢–æ–≤–†–∞–±="" & Chr(34) & PrtovRab & Chr(34) & "" –ö–æ–¥–¢–æ–≤="" & Chr(34) & Kod_tek_tov & Chr(34) & "" –ù–∞–∏–º–ï–¥–ò–∑–º="" & Chr(34) & Name_ed_izm & Chr(34) & "" –ö—Ä–ù–∞–∏–º–°—Ç—Ä–ü—Ä="" & Chr(34) & KrnameCountry & Chr(34) & "">""
      file_l.WriteLine ""<–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>""
            For jj = 15 To poz_vsego_first
              If Kod_tek_tov = xl_first.Range(""I"" & jj) Then
                 
                 tek_ch_zn = CStr(xl_first.Range(""a"" & jj))
                 tek_ch_zn = Mid(tek_ch_zn, 1, 31)
                 tek_ch_zn = Rep_all(tek_ch_zn)
                file_l.WriteLine ""<–ö–ò–ó>"" & tek_ch_zn & ""</–ö–ò–ó>""
              End If
            Next jj
           
      file_l.WriteLine ""</–ù–æ–º–°—Ä–µ–¥–ò–¥–µ–Ω—Ç–¢–æ–≤>""
      file_l.WriteLine ""</–î–æ–ø–°–≤–µ–¥–¢–æ–≤>""
      zn_tved = ""&lt;&gt;""
      zn_shtrh = Kod_tek_tov '""4660056137608""
      file_l.WriteLine ""<–ò–Ω—Ñ–ü–æ–ª–§–•–ñ2 –ò–¥–µ–Ω—Ç–∏—Ñ="" & Chr(34) & ""—Ç–Ω–≤—ç–¥"" & Chr(34) & "" –ó–Ω–∞—á–µ–Ω="" & Chr(34) & zn_tved & Chr(34) & "" />""
      file_l.WriteLine ""<–ò–Ω—Ñ–ü–æ–ª–§–•–ñ2 –ò–¥–µ–Ω—Ç–∏—Ñ="" & Chr(34) & ""ID —Ç–æ–≤–∞—Ä–∞"" & Chr(34) & "" –ó–Ω–∞—á–µ–Ω="" & Chr(34) & zn_shtrh & Chr(34) & "" />""
      t = zn_shtrh
      file_l.WriteLine ""<–ò–Ω—Ñ–ü–æ–ª–§–•–ñ2 –ò–¥–µ–Ω—Ç–∏—Ñ="" & Chr(34) & ""—à—Ç—Ä–∏—Ö–∫–æ–¥"" & Chr(34) & "" –ó–Ω–∞—á–µ–Ω="" & Chr(34) & mDU(t) & Chr(34) & "" />""
      file_l.WriteLine ""</–°–≤–µ–¥–¢–æ–≤>""

    'end--- –±–ª–æ–∫ –ø–æ —Ç–æ–≤–∞—Ä—É
    Next ii
    '--------–±–ª–æ–∫ –≤—Å–µ–≥–æ
    'poz_vsego
    sttov_bez_nds_all = xl_upd.Range(""X"" & poz_vsego + 1) '""999999.99""
    Sttov_ych_nal_all = xl_upd.Range(""AB"" & poz_vsego + 1) '""999999.99""
    Sum_nal = xl_upd.Range(""AA"" & poz_vsego)
    If Sum_nal <> """" Then
      str_Sum_nal = CStr(Val(Sum_nal)) ' ""999999.99""
    Else
      str_Sum_nal = ""0""
    End If
    kol_netto_all = CStr(Round(Val(sum_kol_vo_tov), 2)) ' ""31""
    file_l.WriteLine ""<–í—Å–µ–≥–æ–û–ø–ª –°—Ç–¢–æ–≤–ë–µ–∑–ù–î–°–í—Å–µ–≥–æ="" & Chr(34) & sttov_bez_nds_all & Chr(34) & "" –°—Ç–¢–æ–≤–£—á–ù–∞–ª–í—Å–µ–≥–æ="" & Chr(34) & Sttov_ych_nal_all & Chr(34) & "">""
    file_l.WriteLine ""<–°—É–º–ù–∞–ª–í—Å–µ–≥–æ>""
    file_l.WriteLine ""<–°—É–º–ù–∞–ª>"" & Chr(34) & str_Sum_nal & Chr(34) & ""</–°—É–º–ù–∞–ª>""
    file_l.WriteLine ""</–°—É–º–ù–∞–ª–í—Å–µ–≥–æ>""
    file_l.WriteLine ""<–ö–æ–ª–ù–µ—Ç—Ç–æ–í—Å>"" & Chr(34) & kol_netto_all & Chr(34) & ""</–ö–æ–ª–ù–µ—Ç—Ç–æ–í—Å>""
    file_l.WriteLine ""</–í—Å–µ–≥–æ–û–ø–ª>""
    file_l.WriteLine ""</–¢–∞–±–ª–°—á–§–∞–∫—Ç>""

    '------<–°–≤–ü—Ä–æ–¥–ü–µ—Ä>
    file_l.WriteLine ""<–°–≤–ü—Ä–æ–¥–ü–µ—Ä>""
    file_l.WriteLine ""<–°–≤–ü–µ—Ä –°–æ–¥–û–ø–µ—Ä="" & Chr(34) & ""–¢–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω—ã, —Ä–∞–±–æ—Ç—ã —Å–¥–∞–Ω—ã, —É—Å–ª—É–≥–∏ –æ–∫–∞–∑–∞–Ω—ã"" & Chr(34) & "">""
    type_zak_doc = xl_nastr.Range(""B9"") ' ""–ó–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞""
    nom_osn = xl_nastr.Range(""B10"") '""19101""
    date_osn = xl_nastr.Range(""B11"") '""21.03.2024""
    
    file_l.WriteLine ""<–û—Å–Ω–ü–µ—Ä –ù–∞–∏–º–û—Å–Ω="" & Chr(34) & type_zak_doc & Chr(34) & "" –ù–æ–º–û—Å–Ω="" & Chr(34) & nom_osn & Chr(34) & "" –î–∞—Ç–∞–û—Å–Ω="" & Chr(34) & date_osn & Chr(34) & "" />""
    If (type_zak_doc <> """") Or (nom_osn <> """") Or (date_osn <> """") Then
        file_l.WriteLine ""<–°–≤–õ–∏—Ü–ü–µ—Ä>""
        dolg_prod = xl_nastr.Range(""B12"") '""–î–∏—Ä–µ–∫—Ç–æ—Ä""
        p_fio_fio = xl_nastr.Range(""B13"") '""–ö—É–ø—Ä–∏–Ω–∞""
        p_fio_name = xl_nastr.Range(""B14"") '""–û–ª—å–≥–∞""
        p_fio_otch = xl_nastr.Range(""B15"") '""–°—Ç–∞–Ω–∏—Å–ª–∞–≤–æ–≤–Ω–∞""
        file_l.WriteLine ""<–†–∞–±–û—Ä–≥–ü—Ä–æ–¥ –î–æ–ª–∂–Ω–æ—Å—Ç—å="" & Chr(34) & dolg_prod & Chr(34) & "">""
        file_l.WriteLine ""<–§–ò–û –§–∞–º–∏–ª–∏—è="" & Chr(34) & p_fio_fio & Chr(34) & "" –ò–º—è="" & Chr(34) & p_fio_name & Chr(34) & "" –û—Ç—á–µ—Å—Ç–≤–æ="" & Chr(34) & p_fio_otch & Chr(34) & "" />""
        file_l.WriteLine ""</–†–∞–±–û—Ä–≥–ü—Ä–æ–¥>""
        file_l.WriteLine ""</–°–≤–õ–∏—Ü–ü–µ—Ä>""
        file_l.WriteLine ""</–°–≤–ü–µ—Ä>""
    End If
    file_l.WriteLine ""</–°–≤–ü—Ä–æ–¥–ü–µ—Ä>""
    '------–ü–æ–¥–ø–∏—Å–∞–Ω—Ç
    Status = ""1""
    osnPoln = ""–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏""
    oblpoln = ""6""
    file_l.WriteLine ""<–ü–æ–¥–ø–∏—Å–∞–Ω—Ç –û—Å–Ω–ü–æ–ª–Ω="" & Chr(34) & osnPoln & Chr(34) & "" –û–±–ª–ü–æ–ª–Ω="" & Chr(34) & oblpoln & Chr(34) & "" –°—Ç–∞—Ç—É—Å="" & Chr(34) & Status & Chr(34) & "">""
    innul = prod_innul ' ""3702148437""
    dolgn = xl_nastr.Range(""B16"") '""–°–æ—Ç—Ä—É–¥–Ω–∏–∫""
    If dolgn <> """" Then
        nameorg = prod_name_org '""–û–û–û &quot;–ê–õ–¨–§–ê-–¢–†–ï–ô–î&quot;""
        file_l.WriteLine ""<–Æ–õ –ò–ù–ù–Æ–õ="" & Chr(34) & innul & Chr(34) & "" –î–æ–ª–∂–Ω="" & Chr(34) & dolgn & Chr(34) & "" –ù–∞–∏–º–û—Ä–≥="" & Chr(34) & nameorg & Chr(34) & "">""
        fio_f = xl_nastr.Range(""B17"") '""–ë–∞–Ω–Ω–æ–≤–∞""
        fio_name = xl_nastr.Range(""B18"") '""–ê–Ω–Ω–∞""
        fio_otch = xl_nastr.Range(""B19"") '""–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞""
        file_l.WriteLine ""<–§–ò–û –§–∞–º–∏–ª–∏—è="" & Chr(34) & fio_f & Chr(34) & "" –ò–º—è="" & Chr(34) & fio_name & Chr(34) & "" –û—Ç—á–µ—Å—Ç–≤–æ="" & Chr(34) & fio_otch & Chr(34) & "" />""
        file_l.WriteLine ""</–Æ–õ>""
    End If
    file_l.WriteLine ""</–ü–æ–¥–ø–∏—Å–∞–Ω—Ç""
    file_l.WriteLine ""</–î–æ–∫—É–º–µ–Ω—Ç>""
    file_l.WriteLine ""</–§–∞–π–ª>""
    file_l.Close
    Set file_l = Nothing
   
   xl_osn.Save
   wbs.Close SaveChanges:=False
   MsgBox (""–ì–æ—Ç–æ–≤–æ"")
End Sub"
tNwkCRrk,111,reset_man,C#,Thursday 18th of April 2024 08:53:49 PM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Microsoft.Win32;

namespace Excel2XML
{    public struct GUID_TYPE
    {
        public int Data1;
        public short Data2;
        public short Data3;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
        public byte[] Data4;
    }

    public class MakeXML
    {
        [DllImport(""ole32.dll"")]
        static extern int CoCreateGuid(out Guid guid);

        [DllImport(""ole32.dll"", CharSet = CharSet.Unicode)]
        static extern int StringFromGUID2(Guid guid, IntPtr str, int maxCount);

        //—Å–æ–∑–¥–∞–Ω–∏—é GUID –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—é –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        static void MakeGuid()
        {
            GUID_TYPE guid;
            CoCreateGuid(out guid);

            const int guidStringSize = 40;
            IntPtr guidString = Marshal.AllocHGlobal(guidStringSize * 2);
            StringFromGUID2(ref guid, guidString, guidStringSize);

            string strGuid = Marshal.PtrToStringUni(guidString);
            MessageBox.Show(strGuid);

            Marshal.FreeHGlobal(guidString);
        }

        static string GetFileName(string Title = ""Select file to forming xml...."", string InitialPath = null, string MyFilter = ""—Ñ–∞–π–ª—ã Excel (*.xls*),"")
        {
            string res = null;

            if (InitialPath != null)
            {
                try
                {
                    Environment.CurrentDirectory = InitialPath;
                }
                catch
                {
                    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
                }
            }

            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Filter = MyFilter,
                Title = Title,
                CheckFileExists = true,
                CheckPathExists = true
            };

            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                res = openFileDialog.FileName;
            }

            return res ?? """";
        }

        static string CreateGuidString()
        {
            Guid guid;
            string strGuid = null;
            int retValue;

            const int guidLength = 38; // –î–ª–∏–Ω–∞ GUID –±–µ–∑ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫
            retValue = CoCreateGuid(out guid);

            if (retValue == 0)
            {
                IntPtr strPtr = Marshal.AllocHGlobal(guidLength * 2 + 1); // –í—ã–¥–µ–ª—è–µ–º –ø–∞–º—è—Ç—å –ø–æ–¥ —Å—Ç—Ä–æ–∫—É GUID
                retValue = StringFromGUID2(guid, strPtr, guidLength * 2 + 1);
                if (retValue > 0) // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
                {
                    strGuid = Marshal.PtrToStringUni(strPtr, retValue - 1);
                }
                Marshal.FreeHGlobal(strPtr); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
            }

            return strGuid; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É GUID
        }
    }
}
"
KFhcZ7CK,Dancer style,Dsaqwed123,LScript,Thursday 18th of April 2024 08:50:09 PM CDT,"-- dancer script


local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface
local bt = interf.Battle
local main = bt.Main

local function update_action(v, data)
	local move = game.ReplicatedStorage.Moves[v.Value]

	for i,v in pairs(data) do
		local value, name = v.Value, v.Name

		local str = move:FindFirstChild(name)

		if str.ClassName == ""Animation"" then
			str.AnimationId = value
		else
			if not str then
				str = Instance.new(""StringValue"")
				str.Value = value
				str.Name = name
				str.Parent = move
			else
				str.Value = value
			end
		end
	end
end

local rushstyle = game.ReplicatedStorage.Styles.Rush
local brawlerstyle = game.ReplicatedStorage.Styles.Brawler
local beaststyle = game.ReplicatedStorage.Styles.Beast

--rushstyle[""H_Stunning""]:Clone().Parent = brawlerstyle

-- all of em

local styles = {
	[brawlerstyle] = {
		actions = {
			""StanceStrike"",
			""H_BlockingEnemy""
		},
		to = rushstyle
	},
}--combined styles

-- custom styles

local custom_actions = {
	[rushstyle] = {
		{
			Name = ""H_Distanced"",
			Value = ""H_Escape""
		},

		{
			Name = ""H_AirFallen"",
			Value = ""H_Knockout""
		},

		{
			Name = ""H_FallenDown"",
			Value = ""H_FallenFinisher""
		},

		{
			Name = ""Strike1"",
			Value = ""FGetup""
		},

		{
			Name = ""VisualName"",
			Value = ""Dancer""
		},

		{
			Name = ""Color"",
			Value = Color3.new(1,0,1)
		},

		{
			Name = ""Speed"",
			Value = 1.5
		}
	},
}

-- style complier

local function create_value(value, parent)
	local type = typeof(value)

	if type == ""number"" then
		if math.floor(value) == value then
			local z = Instance.new(""IntValue"")
			z.Parent = parent
			return z
		end

		local z = Instance.new(""NumberValue"")
		z.Parent = parent
		return z
	end

	local lookup = {
		string = ""StringValue"",
		Boolean = ""BoolValue"",
		Color3 = ""Color3Value""
	}

	local z = Instance.new(lookup[type] or lookup.string)
	z.Parent = parent
	return z
end

for style, actions in pairs(custom_actions) do
	for i,v in pairs(actions) do
		if not style:FindFirstChild(v.Name) then
			local stringval = create_value(v.Value, style)
			for i,v in pairs(v) do
				stringval[i] = v
			end
		else
			local t = style:FindFirstChild(v.Name)
			for i,v in pairs(v) do
				t[i] = v
			end
		end
	end
end

for style, actions in pairs(styles) do
	for i,actionname in pairs(actions.actions) do
		local action = style:FindFirstChild(actionname)

		if not action then
			continue
		end

		if actions.to:FindFirstChild(actionname) then
			actions.to[actionname]:Destroy()
		end

		action:Clone().Parent = actions.to
	end
end

rushstyle.Rush1.Value = ""RPunch1""
rushstyle.Rush2.Value = ""RPunch2""
rushstyle.Rush3.Value = ""RPunch5""

rushstyle.Rush4.Value = ""RPunch2""
rushstyle.Rush5.Value = ""RPunch1""
rushstyle.Rush6.Value = ""RPunch5""

rushstyle.Strike1.Value = ""RPunch1""
rushstyle.Strike2.Value = ""RPunch2""
rushstyle.Strike3.Value = ""RPunch5""
rushstyle.Strike4.Value = ""RPunch3""
rushstyle.Strike5.Value = ""RPunch4""
rushstyle.Strike6.Value = ""B2Strike3""

local plr = game.Players.LocalPlayer
local pgui = plr.PlayerGui
local interf = pgui.Interface
local bt = interf.Battle
local main = bt.Main

local function sendNotification(text, color)
	if not color then color = Color3.new(1, 1, 1) end
	pgui.Notify.Awards.ChildAdded:Once(function(c)
		if c.Text == text then
			c.TextColor3 = color
			coroutine.wrap(function()
				local con;
				con = game:GetService(""RunService"").RenderStepped:Connect(function()
					if not c then
						con:Disconnect()
						return
					end
					c.TextColor3 = color
				end)()
			end)()
		end
	end)
	pgui[""‡πÄ‡∏Ñ‡∏à‡πÄ‡∏Ö¬ã‡πÄ‡∏Ñ¬ü‡πÄ‡∏Ñ‡∏ü‡πÄ‡∏Ñ‡∏ã""]:Fire(text)
end

function playticksound()
	local sfx = Instance.new(""Sound"", workspace)
	sfx.SoundId = ""rbxassetid://12222183""
	sfx.Volume = 2

	game:GetService(""SoundService""):PlayLocalSound(sfx)

	spawn(function()
		wait(2)
		sfx:Destroy()
	end)
end

local uis = game:GetService(""UserInputService"")
local speed = 2.5

for i=1,8 do
	update_action(rushstyle:FindFirstChild(""Rush""..i), {
		{
			Name = ""AniSpeed"",
			Value = speed
		},

		{
			Name = ""ComboAt"",
			Value = 0.35 / speed
		}
	})
end

local color = Color3.new(1, 1, 1)

local grabstrike = rushstyle:WaitForChild(""GrabStrike"")
local guruparry = brawlerstyle:WaitForChild(""GrabStrike""):Clone()

sendNotification(""Press X to swap counter step and parry on Dancer"", color)

uis.InputBegan:Connect(function(key)
	if game.UserInputService:GetFocusedTextBox() == nil then
		if key.KeyCode == Enum.KeyCode.X then
			playticksound()
			if grabstrike.Parent ~= nil then
				grabstrike.Parent = nil
				guruparry.Parent = rushstyle
				sendNotification(""Parry enabled"", color)
			else
			grabstrike.Parent = rushstyle
				guruparry.Parent = nil
				sendNotification(""Quick step enabled"", color)
			end
		end
	end
end)

local status = plr.Status

local function update()
	if status.Heat.Value <= 75 then
		rushstyle.H_Distanced.Value = ""H_Escape""
		rushstyle.H_AirFallen.Value = ""H_Whirl""
	else
		rushstyle.H_Distanced.Value = ""H_FaceTwist""
		rushstyle.H_AirFallen.Value = ""H_Knockout""
	end
end

for i,v in pairs(game.ReplicatedStorage.Styles.Rush:GetChildren()) do
	if v:IsA(""Animation"") and v.Name:find(""Evade"") then
		v.AnimationId = ""rbxassetid://8223592585""
	end
end

interf.Client.Disabled = true
task.wait(1)
interf.Client.Disabled = false
task.wait(0.1)

while task.wait() and not interf.Client.Disabled do
	update()
end"
jzzegENW,News April18 24,Newscaster_Ned,Email,Thursday 18th of April 2024 08:40:20 PM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

S‚Äéu‚Äép‚Äé.‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé ‚Äén‚Äée‚Äéw‚Äés‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé.‚Äé

J‚Äée‚Äés‚Äés‚Äée‚Äé ‚ÄéV‚Äée‚Äén‚Äét‚Äéu‚Äér‚Äéa‚Äé:‚Äé ‚ÄéI‚Äé ‚ÄéC‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéB‚Äée‚Äéa‚Äét‚Äé ‚ÄéB‚Äéo‚Äét‚Äéh‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé
O‚Äév‚Äée‚Äér‚Äé ‚Äé1‚Äé0‚Äé0‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéP‚Äér‚Äéo‚Äét‚Äée‚Äés‚Äét‚Äée‚Äér‚Äés‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äét‚Äé ‚ÄéC‚Äéo‚Äél‚Äéu‚Äém‚Äéb‚Äéi‚Äéa‚Äé ‚ÄéU‚Äén‚Äéi‚Äév‚Äée‚Äér‚Äés‚Äéi‚Äét‚Äéy‚Äé
M‚ÄéS‚ÄéN‚ÄéB‚ÄéC‚Äé ‚ÄéE‚Äéd‚Äéi‚Äét‚Äéo‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚ÄéC‚Äél‚Äéa‚Äéi‚Äém‚Äés‚Äé ‚ÄéB‚Äéa‚Äés‚Äée‚Äéb‚Äéa‚Äél‚Äél‚Äé ‚Äéi‚Äés‚Äé ‚Äé'‚ÄéW‚Äéa‚Äér‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéW‚Äéa‚Äér‚Äé ‚Äéo‚Äén‚Äé ‚ÄéD‚ÄéE‚ÄéI‚Äé'‚Äé ‚Äéa‚Äés‚Äé ‚ÄéN‚Äéu‚Äém‚Äéb‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé
U‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéV‚Äée‚Äét‚Äéo‚Äée‚Äés‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äé ‚Äéa‚Äét‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
D‚Äée‚Äér‚Äés‚Äéh‚Äéo‚Äéw‚Äéi‚Äét‚Äéz‚Äé:‚Äé ‚ÄéD‚ÄéE‚ÄéI‚Äé ‚ÄéC‚Äéa‚Äéu‚Äés‚Äée‚Äés‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äés‚Äée‚Äém‚Äéi‚Äét‚Äéi‚Äés‚Äém‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚Äé'‚ÄéD‚Äée‚Äés‚Äét‚Äér‚Äéo‚Äéy‚Äé'‚Äé ‚ÄéE‚Äév‚Äée‚Äér‚Äéy‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé
P‚Äée‚Äén‚Äéc‚Äée‚Äé:‚Äé ‚Äé'‚ÄéN‚Äée‚Äéw‚Äé ‚ÄéR‚Äée‚Äép‚Äéu‚Äéb‚Äél‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéI‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äéi‚Äés‚Äém‚Äé'‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéB‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé'‚Äés‚Äé ‚ÄéF‚Äéa‚Äéi‚Äél‚Äéu‚Äér‚Äée‚Äés‚Äé
B‚Äéi‚Äéd‚Äée‚Äén‚Äé‚Äô‚Äés‚Äé ‚ÄéE‚ÄéE‚ÄéO‚ÄéC‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéE‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äée‚Äér‚Äés‚Äé ‚ÄéM‚Äéu‚Äés‚Äét‚Äé ‚ÄéA‚Äéc‚Äéc‚Äéo‚Äém‚Äém‚Äéo‚Äéd‚Äéa‚Äét‚Äée‚Äé ‚ÄéW‚Äéo‚Äér‚Äék‚Äée‚Äér‚Äés‚Äé‚Äô‚Äé ‚ÄéA‚Äéb‚Äéo‚Äér‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
J‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé:‚Äé ‚ÄéM‚Äéo‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéV‚Äéa‚Äéc‚Äéa‚Äét‚Äée‚Äé ‚Äé'‚ÄéH‚Äéa‚Äér‚Äém‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äé,‚Äé'‚Äé ‚ÄéW‚Äée‚Äé ‚ÄéL‚Äéa‚Äéc‚Äék‚Äé ‚ÄéV‚Äéo‚Äét‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äé ‚ÄéI‚Äét‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
J‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéC‚Äéo‚Äém‚Äép‚Äél‚Äéa‚Äéi‚Äén‚Äés‚Äé ‚ÄéA‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéA‚Äél‚Äél‚Äéo‚Äéw‚Äé ‚ÄéM‚Äéo‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚ÄéV‚Äéa‚Äéc‚Äéa‚Äét‚Äée‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äés‚Äéh‚Äéi‚Äép‚Äé

‚Äò‚ÄéH‚Äéa‚Äér‚Äém‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äé‚Äô‚Äé

F‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéR‚Äée‚Äév‚Äéo‚Äél‚Äét‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéS‚Äép‚Äée‚Äén‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äéa‚Äéc‚Äék‚Äéa‚Äég‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéF‚Äéo‚Äér‚Äée‚Äéi‚Äég‚Äén‚Äé ‚ÄéW‚Äéa‚Äér‚Äés‚Äé
S‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéR‚Äée‚Äép‚Äé.‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé,‚Äé ‚ÄéR‚Äé-‚ÄéL‚Äéa‚Äé.‚Äé,‚Äé ‚Äét‚Äéa‚Äél‚Äék‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äér‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äée‚Äér‚Äés‚Äé ‚Äéa‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äéa‚Äé ‚Äém‚Äée‚Äée‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéU‚Äék‚Äér‚Äé
S‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚Äé(‚ÄéR‚Äé-‚ÄéL‚ÄéA‚Äé)‚Äé ‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚ÄéT‚Äéh‚Äéu‚Äér‚Äés‚Äéd‚Äéa‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚Äéo‚Äép‚Äép‚Äéo‚Äés‚Äéi‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äér‚Äéu‚Äél‚Äée‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äéo‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äét‚Äéo‚Äé ‚Äév‚Äéa‚Äéc‚Äéa‚Äét‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äée‚Äén‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äén‚Äéd‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äés‚Äéh‚Äéi‚Äép‚Äé,‚Äé ‚Äél‚Äéa‚Äém‚Äée‚Äén‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéh‚Äée‚Äé ‚Äéd‚Äéo‚Äée‚Äés‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äéh‚Äéa‚Äév‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äév‚Äéo‚Äét‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äéh‚Äéa‚Äén‚Äég‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äéu‚Äél‚Äée‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äét‚Äéi‚Äém‚Äée‚Äé.‚Äé

‚Äò‚ÄéU‚Äén‚Äép‚Äér‚Äée‚Äéc‚Äée‚Äéd‚Äée‚Äén‚Äét‚Äée‚Äéd‚Äé‚Äô‚Äé:‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéM‚Äéo‚Äév‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äé ‚ÄéR‚Äéu‚Äél‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé ‚ÄéU‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äé
'‚ÄéU‚Äén‚Äép‚Äér‚Äée‚Äéc‚Äée‚Äéd‚Äée‚Äén‚Äét‚Äée‚Äéd‚Äé'‚Äé:‚Äé ‚ÄéS‚Äép‚Äée‚Äéa‚Äék‚Äée‚Äér‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéM‚Äéo‚Äév‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äés‚Äés‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéA‚Äéi‚Äéd‚Äé ‚ÄéU‚Äés‚Äéi‚Äén‚Äég‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé
8‚Äé1‚Äé0‚Äé
R‚Äée‚Äép‚Äéo‚Äér‚Äét‚Äé:‚Äé ‚ÄéJ‚Äéa‚Äén‚Äéu‚Äéa‚Äér‚Äéy‚Äé ‚Äé6‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äét‚Äée‚Äée‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéS‚Äéa‚Äéy‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéF‚Äée‚Äéa‚Äér‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äéu‚Äét‚Äé ‚ÄéT‚Äéh‚Äée‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚ÄéJ‚Äéa‚Äéi‚Äél‚Äé
J‚Äéa‚Äén‚Äéu‚Äéa‚Äér‚Äéy‚Äé ‚Äé6‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéi‚Äét‚Äét‚Äée‚Äée‚Äé ‚ÄéD‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéS‚Äéa‚Äéy‚Äé ‚ÄéT‚Äéh‚Äée‚Äéy‚Äé ‚ÄéF‚Äée‚Äéa‚Äér‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéP‚Äéu‚Äét‚Äé ‚ÄéT‚Äéh‚Äée‚Äém‚Äé ‚Äéi‚Äén‚Äé ‚ÄéJ‚Äéa‚Äéi‚Äél‚Äé
4‚Äé,‚Äé4‚Äé6‚Äé9‚Äé
N‚Äéi‚Äég‚Äéh‚Äét‚Äém‚Äéa‚Äér‚Äée‚Äé ‚Äéi‚Äén‚Äé ‚ÄéN‚Äéi‚Äég‚Äée‚Äér‚Äé ‚Äé‚Äî‚Äé ‚ÄéE‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äéi‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äés‚Äé ‚ÄéH‚Äéu‚Äén‚Äéd‚Äér‚Äée‚Äéd‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äés‚Äé ‚Äé‚Äò‚ÄéH‚Äéo‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéA‚Äéd‚Äém‚Äéi‚Äén‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äée‚Äés‚Äé ‚ÄéH‚Äéu‚Äén‚Äéd‚Äér‚Äée‚Äéd‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéT‚Äér‚Äéo‚Äéo‚Äép‚Äés‚Äé ‚Äé'‚ÄéH‚Äéo‚Äés‚Äét‚Äéa‚Äég‚Äée‚Äé'‚Äé ‚Äéi‚Äén‚Äé ‚ÄéN‚Äéi‚Äég‚Äée‚Äér‚Äé
3‚Äé,‚Äé5‚Äé2‚Äé0‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äék‚Äéa‚Äés‚Äé ‚ÄéI‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äés‚Äé
D‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äét‚Äés‚Äé ‚ÄéS‚Äéh‚Äéu‚Äét‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚ÄéS‚Äée‚Äén‚Äéa‚Äét‚Äée‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéa‚Äéy‚Äéo‚Äér‚Äék‚Äéa‚Äés‚Äé ‚ÄéI‚Äém‚Äép‚Äée‚Äéa‚Äéc‚Äéh‚Äém‚Äée‚Äén‚Äét‚Äé ‚ÄéC‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äés‚Äé
3‚Äé,‚Äé8‚Äé2‚Äé8‚Äé
N‚Äée‚Äéw‚Äé ‚ÄéO‚Äér‚Äél‚Äée‚Äéa‚Äén‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéC‚Äéh‚Äéi‚Äée‚Äéf‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äée‚Äés‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéG‚Äéu‚Äén‚Äé-‚ÄéF‚Äér‚Äée‚Äée‚Äé ‚ÄéZ‚Äéo‚Äén‚Äée‚Äés‚Äé ‚Äé‚Äî‚Äé ‚ÄéW‚Äéh‚Äée‚Äér‚Äée‚Äé ‚ÄéT‚Äéo‚Äéu‚Äér‚Äéi‚Äés‚Äét‚Äés‚Äé ‚ÄéC‚Äéa‚Äén‚Äé‚Äô‚Äét‚Äé ‚ÄéB‚Äée‚Äé ‚ÄéA‚Äér‚Äém‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé
N‚Äée‚Äéw‚Äé ‚ÄéO‚Äér‚Äél‚Äée‚Äéa‚Äén‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéC‚Äéh‚Äéi‚Äée‚Äéf‚Äé ‚ÄéW‚Äéa‚Äén‚Äét‚Äés‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéG‚Äéu‚Äén‚Äé-‚ÄéF‚Äér‚Äée‚Äée‚Äé ‚ÄéZ‚Äéo‚Äén‚Äée‚Äés‚Äé
8‚Äé5‚Äé5‚Äé
I‚Äél‚Äéh‚Äéa‚Äén‚Äé ‚ÄéO‚Äém‚Äéa‚Äér‚Äé‚Äô‚Äés‚Äé ‚ÄéD‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéI‚Äén‚Äév‚Äéo‚Äél‚Äév‚Äée‚Äém‚Äée‚Äén‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéE‚Äén‚Äéc‚Äéa‚Äém‚Äép‚Äém‚Äée‚Äén‚Äét‚Äé
I‚Äél‚Äéh‚Äéa‚Äén‚Äé ‚ÄéO‚Äém‚Äéa‚Äér‚Äé'‚Äés‚Äé ‚ÄéD‚Äéa‚Äéu‚Äég‚Äéh‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äés‚Äép‚Äée‚Äén‚Äéd‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéC‚Äéo‚Äél‚Äél‚Äée‚Äég‚Äée‚Äé
4‚Äé6‚Äé3‚Äé
S‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéD‚Äée‚Äép‚Äét‚Äé.‚Äé:‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéV‚Äée‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äéh‚Äéo‚Äéo‚Äéd‚Äé ‚Äéa‚Äét‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
S‚Äét‚Äéa‚Äét‚Äée‚Äé ‚ÄéD‚Äée‚Äép‚Äét‚Äé.‚Äé:‚Äé ‚ÄéU‚Äé.‚ÄéS‚Äé.‚Äé ‚ÄéW‚Äéi‚Äél‚Äél‚Äé ‚ÄéV‚Äée‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äél‚Äée‚Äés‚Äét‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äée‚Äéh‚Äéo‚Äéo‚Äéd‚Äé ‚Äéa‚Äét‚Äé ‚ÄéU‚Äén‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚ÄéN‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
1‚Äé0‚Äé7‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéM‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé‚Äô‚Äés‚Äé ‚ÄéT‚Äéo‚Äép‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äéy‚Äé ‚ÄéA‚Äéd‚Äév‚Äéi‚Äés‚Äée‚Äér‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéF‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äé ‚ÄéL‚Äéo‚Äéb‚Äéb‚Äéy‚Äéi‚Äés‚Äét‚Äé:‚Äé ‚ÄéC‚Äél‚Äéi‚Äée‚Äén‚Äét‚Äés‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚ÄéC‚Äéo‚Äér‚Äép‚Äéo‚Äér‚Äéa‚Äét‚Äée‚Äé ‚ÄéI‚Äén‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé'‚Äés‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äéy‚Äé ‚ÄéA‚Äéi‚Äéd‚Äée‚Äé ‚ÄéL‚Äéo‚Äéb‚Äéb‚Äéy‚Äéi‚Äés‚Äét‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé-‚ÄéI‚Äén‚Äét‚Äée‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéC‚Äél‚Äéi‚Äée‚Äén‚Äét‚Äés‚Äé
5‚Äé,‚Äé9‚Äé6‚Äé2‚Äé
A‚Äél‚Äél‚Äé ‚Äé1‚Äé2‚Äé ‚ÄéJ‚Äéu‚Äér‚Äéo‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äéu‚Äés‚Äéh‚Äé ‚ÄéM‚Äéo‚Äén‚Äée‚Äéy‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé
A‚Äél‚Äél‚Äé ‚Äé1‚Äé2‚Äé ‚ÄéJ‚Äéu‚Äér‚Äéo‚Äér‚Äés‚Äé ‚ÄéS‚Äée‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéD‚Äéo‚Äén‚Äéa‚Äél‚Äéd‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéH‚Äéu‚Äés‚Äéh‚Äé ‚ÄéM‚Äéo‚Äén‚Äée‚Äéy‚Äé ‚ÄéT‚Äér‚Äéi‚Äéa‚Äél‚Äé
1‚Äé8‚Äé5‚Äé
M‚Äéi‚Äék‚Äée‚Äé ‚ÄéJ‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéT‚Äér‚Äéi‚Äép‚Äél‚Äée‚Äés‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéo‚Äér‚Äét‚Äég‚Äéa‚Äég‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéF‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äéy‚Äé ‚ÄéO‚Äéf‚Äéf‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äéi‚Äéa‚Äén‚Äé ‚ÄéL‚Äée‚Äéa‚Äéd‚Äée‚Äér‚Äé ‚ÄéV‚Äéo‚Äél‚Äéo‚Äéd‚Äéy‚Äém‚Äéy‚Äér‚Äé ‚ÄéZ‚Äée‚Äél‚Äée‚Äén‚Äé
J‚Äéo‚Äéh‚Äén‚Äés‚Äéo‚Äén‚Äé ‚ÄéT‚Äér‚Äéi‚Äép‚Äél‚Äée‚Äés‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚ÄéM‚Äéo‚Äér‚Äét‚Äég‚Äéa‚Äég‚Äéi‚Äén‚Äég‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äé ‚ÄéF‚Äéu‚Äét‚Äéu‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äéa‚Äéy‚Äé ‚ÄéO‚Äéf‚Äéf‚Äé ‚ÄéZ‚Äée‚Äél‚Äée‚Äén‚Äés‚Äék‚Äéy‚Äé

N‚Äée‚Äég‚Äér‚Äéo‚Äéi‚Äéd‚Äé ‚ÄéS‚Äée‚Äér‚Äéi‚Äéa‚Äél‚Äé ‚ÄéR‚Äéa‚Äép‚Äéi‚Äés‚Äét‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äé1‚Äé9‚Äé8‚Äé1‚Äé ‚ÄéC‚Äéo‚Äél‚Äéd‚Äé ‚ÄéC‚Äéa‚Äés‚Äée‚Äés‚Äé.‚Äé

T‚Äéo‚Äéo‚Äék‚Äé ‚Äéy‚Äéa‚Äé ‚Äél‚Äéo‚Äén‚Äég‚Äé ‚Äée‚Äén‚Äéo‚Äéu‚Äég‚Äéh‚Äé,‚Äé ‚Äéq‚Äéw‚Äéo‚Äép‚Äés‚Äé.‚Äé


O‚Äék‚Äél‚Äéa‚Äéh‚Äéo‚Äém‚Äéa‚Äé:‚Äé ‚ÄéS‚Äép‚Äéi‚Äéc‚Äé ‚ÄéI‚Äél‚Äél‚Äée‚Äég‚Äéa‚Äél‚Äé ‚ÄéF‚Äéa‚Äét‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äés‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéH‚Äéi‚Äén‚Äét‚Äéo‚Äén‚Äé.‚Äé


G‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéS‚Äéa‚Äém‚Äéa‚Äér‚Äéi‚Äét‚Äéa‚Äén‚Äé ‚ÄéH‚Äée‚Äél‚Äép‚Äés‚Äé ‚ÄéT‚Äéa‚Äék‚Äée‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚ÄéC‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚ÄéW‚Äéh‚Äéo‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äée‚Äéd‚Äé ‚ÄéC‚Äéh‚Äéi‚Äéc‚Äéo‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äér‚Äé.‚Äé


S‚Äép‚Äéi‚Äéc‚Äé ‚ÄéD‚Äér‚Äéu‚Äég‚Äé ‚ÄéK‚Äéi‚Äén‚Äég‚Äép‚Äéi‚Äén‚Äé ‚ÄéJ‚Äéo‚Äér‚Äéd‚Äéa‚Äén‚Äé ‚ÄéJ‚Äéo‚Äér‚Äég‚Äée‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äél‚Äéo‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéL‚Äéa‚Äéc‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéD‚Äér‚Äéu‚Äég‚Äé ‚ÄéB‚Äéu‚Äés‚Äét‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé?‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
A‚ÄéM‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé/‚ÄéP‚ÄéM‚Äé ‚ÄéS‚Äéu‚Äén‚Äé
9‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé8‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
9‚Äé0‚Äé¬∞‚Äé
1‚Äé5‚Äé%‚Äé
S‚Äé
1‚Äé1‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé ‚Äée‚Äéa‚Äér‚Äél‚Äéy‚Äé,‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äéi‚Äéa‚Äél‚Äé ‚Äéc‚Äél‚Äée‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé.‚Äé ‚ÄéA‚Äé ‚Äés‚Äét‚Äér‚Äéa‚Äéy‚Äé ‚Äés‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äé ‚Äéi‚Äés‚Äé ‚Äép‚Äéo‚Äés‚Äés‚Äéi‚Äéb‚Äél‚Äée‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äén‚Äée‚Äéa‚Äér‚Äé ‚Äé9‚Äé0‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
7‚Äé4‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
9‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
6‚Äé:‚Äé5‚Äé9‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé5‚Äé9‚Äé ‚Äép‚Äém‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé8‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé6‚Äé¬∞‚Äé
1‚Äé6‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé
1‚Äé1‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
P‚Äéa‚Äér‚Äét‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé6‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéE‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé
 ‚Äé
H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé4‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
3‚Äé:‚Äé3‚Äé4‚Äé ‚Äép‚Äém‚Äé
W‚Äéa‚Äéx‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
4‚Äé:‚Äé2‚Äé4‚Äé ‚Äéa‚Äém‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé9‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé0‚Äé
T‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé5‚Äé5‚Äé¬∞‚Äé
6‚Äé8‚Äé%‚Äé
E‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé1‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
6‚Äé7‚Äé¬∞‚Äé
/‚Äé5‚Äé2‚Äé¬∞‚Äé
2‚Äé4‚Äé%‚Äé
N‚ÄéN‚ÄéE‚Äé ‚Äé1‚Äé6‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé2‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé5‚Äé9‚Äé¬∞‚Äé
7‚Äé%‚Äé
E‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé2‚Äé3‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
2‚Äé1‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé2‚Äé4‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé3‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
3‚Äé3‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé2‚Äé5‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
4‚Äé6‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé2‚Äé6‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
4‚Äé2‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé2‚Äé7‚Äé
I‚Äés‚Äéo‚Äél‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé9‚Äé¬∞‚Äé
/‚Äé7‚Äé2‚Äé¬∞‚Äé
3‚Äé2‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé2‚Äé8‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
4‚Äé4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé2‚Äé9‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé7‚Äé¬∞‚Äé
4‚Äé1‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé3‚Äé0‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé4‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
5‚Äé1‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé1‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé7‚Äé0‚Äé¬∞‚Äé
4‚Äé3‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé2‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
5‚Äé1‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéA‚ÄéI‚Äé.‚Äé ‚Äéü§ñ

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

R‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé
T‚Äéh‚Äée‚Äé ‚ÄéK‚Äéh‚Äéa‚Äén‚Äéa‚Äét‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äéo‚Äér‚Äé ‚ÄéT‚Äés‚Äéa‚Äér‚Äéd‚Äéo‚Äém‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äér‚Äée‚Äél‚Äée‚Äév‚Äéa‚Äén‚Äét‚Äé ‚ÄéS‚Äél‚Äéa‚Äév‚Äéi‚Äéc‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéw‚Äéo‚Äér‚Äél‚Äéd‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äél‚Äéy‚Äé ‚Äéa‚Äé ‚Äég‚Äér‚Äée‚Äéa‚Äét‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé ‚Äéd‚Äéu‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äér‚Äée‚Äéi‚Äég‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéS‚Äéo‚Äév‚Äéi‚Äée‚Äét‚Äé ‚ÄéU‚Äén‚Äéi‚Äéo‚Äén‚Äé.‚Äé ‚ÄéI‚Äét‚Äé'‚Äés‚Äé ‚Äéc‚Äéa‚Äép‚Äéi‚Äét‚Äéa‚Äél‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äép‚Äét‚Äél‚Äéy‚Äé ‚Äén‚Äéa‚Äém‚Äée‚Äéd‚Äé ‚ÄéM‚Äéo‚Äés‚Äéq‚Äéu‚Äée‚Äé-‚ÄéC‚Äéo‚Äéw‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéi‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéb‚Äéa‚Äés‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéQ‚Äéu‚Äée‚Äée‚Äér‚Äé ‚ÄéM‚Äéu‚Äés‚Äél‚Äéi‚Äém‚Äé ‚ÄéG‚Äér‚Äée‚Äém‚Äél‚Äéi‚Äén‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéd‚Äéw‚Äée‚Äél‚Äél‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äéi‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äét‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéK‚Äér‚Äée‚Äém‚Äél‚Äéi‚Äén‚Äé.‚Äé ‚ÄéM‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äéi‚Äés‚Äé ‚Äéi‚Äén‚Äéh‚Äéa‚Äéb‚Äéi‚Äét‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéC‚Äéo‚Äém‚Äém‚Äéu‚Äén‚Äéi‚Äés‚Äét‚Äé ‚Äéb‚Äée‚Äéa‚Äér‚Äé-‚Äéf‚Äéi‚Äég‚Äéh‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéd‚Äér‚Äéu‚Äén‚Äék‚Äés‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéK‚Äéa‚Äél‚Äéa‚Äés‚Äéh‚Äén‚Äéi‚Äék‚Äéo‚Äév‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéd‚Äéi‚Äéc‚Äék‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äéa‚Äés‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äém‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚Äém‚Äée‚Äéd‚Äéi‚Äéo‚Äéc‚Äér‚Äée‚Äé-‚Äél‚Äéo‚Äéo‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äér‚Äé ‚Äée‚Äév‚Äée‚Äén‚Äé ‚Äéu‚Äég‚Äél‚Äéy‚Äé ‚Äém‚Äéa‚Äéi‚Äél‚Äé-‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äé ‚Äéb‚Äér‚Äéi‚Äéd‚Äée‚Äés‚Äé ‚Äé(‚Äén‚Äéo‚Äéw‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéc‚Äéa‚Äém‚Äée‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéM‚Äéo‚Äél‚Äéd‚Äéo‚Äév‚Äéa‚Äé)‚Äé.‚Äé ‚ÄéN‚Äéo‚Äéw‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äéi‚Äés‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéi‚Äét‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äé ‚Äée‚Äén‚Äée‚Äém‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéU‚ÄéS‚ÄéA‚Äé,‚Äé ‚Äéa‚Äén‚Äé ‚Äéu‚Äél‚Äét‚Äér‚Äéa‚Äé-‚Äéc‚Äéa‚Äép‚Äéi‚Äét‚Äéa‚Äél‚Äéi‚Äés‚Äét‚Äé ‚Äép‚Äés‚Äée‚Äéu‚Äéd‚Äéo‚Äéd‚Äée‚Äém‚Äéo‚Äéc‚Äér‚Äéa‚Äéc‚Äéy‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéi‚Äén‚Äéh‚Äéa‚Äéb‚Äéi‚Äét‚Äéa‚Äén‚Äét‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéw‚Äéi‚Äéd‚Äée‚Äél‚Äéy‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéE‚Äéu‚Äér‚Äéo‚Äé-‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äés‚Äé.‚Äé ‚ÄéA‚Äés‚Äé ‚Äép‚Äéa‚Äér‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚Äép‚Äér‚Äéi‚Äém‚Äéi‚Äét‚Äéi‚Äév‚Äée‚Äé ‚Äév‚Äéo‚Äéd‚Äék‚Äéa‚Äé-‚Äén‚Äéi‚Äég‚Äég‚Äée‚Äér‚Äé ‚Äén‚Äéa‚Äét‚Äéu‚Äér‚Äée‚Äé,‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé ‚Äéo‚Äéf‚Äét‚Äée‚Äén‚Äé ‚Äéa‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéi‚Äée‚Äés‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äél‚Äéu‚Äél‚Äéz‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé'‚Äés‚Äé ‚Äéw‚Äéh‚Äéa‚Äét‚Äé ‚Äéf‚Äér‚Äée‚Äée‚Äéd‚Äéo‚Äém‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé.‚Äé ‚ÄéA‚Äél‚Äés‚Äéo‚Äé,‚Äé ‚ÄéR‚Äéu‚Äés‚Äés‚Äéi‚Äéa‚Äé ‚Äér‚Äée‚Äéc‚Äée‚Äén‚Äét‚Äél‚Äéy‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéb‚Äée‚Äéc‚Äéo‚Äém‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äér‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äéu‚Äén‚Äét‚Äér‚Äéy‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äés‚Äéu‚Äép‚Äép‚Äéo‚Äér‚Äét‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéD‚Äéa‚Äér‚Äéf‚Äéu‚Äér‚Äé ‚Äég‚Äée‚Äén‚Äéo‚Äéc‚Äéi‚Äéd‚Äée‚Äé,‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéF‚Äéu‚Äér‚Äé,‚Äé ‚ÄéM‚Äéa‚Äés‚Äéa‚Äél‚Äéi‚Äét‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéZ‚Äéa‚Äég‚Äéh‚Äéa‚Äéw‚Äéa‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚Äér‚Äée‚Äéf‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äés‚Äée‚Äél‚Äév‚Äée‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äé""‚ÄéG‚Äéo‚Äéd‚Äé'‚Äés‚Äé ‚Äéc‚Äéh‚Äéo‚Äés‚Äée‚Äén‚Äé ‚Äép‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé""‚Äé.‚Äé.‚Äé.‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéw‚Äéh‚Äée‚Äén‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéd‚Äéo‚Äé ‚Äés‚Äéo‚Äé,‚Äé ‚Äéy‚Äéo‚Äéu‚Äé'‚Äér‚Äée‚Äé ‚Äéb‚Äéa‚Äés‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéa‚Äés‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéi‚Äét‚Äé.‚Äé


(‚Äé(‚Äé ‚ÄéB‚ÄéR‚ÄéB‚Äé,‚Äé ‚ÄéC‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äél‚Äéy‚Äé ‚ÄéR‚Äée‚Äéc‚Äél‚Äéa‚Äéi‚Äém‚Äéi‚Äén‚Äég‚Äé ‚ÄéU‚Äék‚Äér‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äél‚Äél‚Äé ‚ÄéI‚Äé ‚Äéh‚Äée‚Äéa‚Äér‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéd‚Äéo‚Äéc‚Äét‚Äéo‚Äér‚Äés‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äéc‚Äéo‚Äém‚Äéi‚Äén‚Äég‚Äé ‚Äéu‚Äép‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéa‚Äé ‚Äéc‚Äéu‚Äér‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéh‚Äéo‚Äém‚Äéo‚Äés‚Äée‚Äéx‚Äéu‚Äéa‚Äél‚Äéi‚Äét‚Äéy‚Äé.‚Äé ‚ÄéU‚Äén‚Äét‚Äéi‚Äél‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé,‚Äé ‚Äéh‚Äée‚Äér‚Äée‚Äé'‚Äés‚Äé ‚Äé#‚ÄéL‚ÄéR‚ÄéH‚Äé:‚Äé

[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé1‚Äé]‚Äé ‚Äé<‚Äé+‚Äée‚Äéf‚Äés‚Äée‚Äén‚Äéa‚Äéb‚Äél‚Äée‚Äé>‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéd‚Äéu‚Äém‚Äéb‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé2‚Äé]‚Äé ‚Äé<‚Äé+‚Äéd‚Äéi‚ÄéN‚ÄéG‚Äéo‚Äé>‚Äé ‚Äés‚Äéa‚Äéy‚Äéb‚Äéa‚Äée‚Äé:‚Äé ‚Äée‚Äéf‚Äés‚Äée‚Äén‚Äéa‚Äéb‚Äél‚Äée‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéw‚Äée‚Äéa‚Äél‚Äét‚Äéh‚Äé ‚Äéo‚Äéf‚Äé ‚Äéf‚Äér‚Äéi‚Äée‚Äén‚Äéd‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéI‚ÄéR‚ÄéC‚Äé.‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé2‚Äé]‚Äé ‚Äé<‚Äé+‚Äée‚Äéf‚Äés‚Äée‚Äén‚Äéa‚Äéb‚Äél‚Äée‚Äé>‚Äé ‚Äén‚Äéo‚Äé ‚Äéi‚Äé ‚Äéd‚Äéo‚Äén‚Äét‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé2‚Äé]‚Äé ‚Äé<‚Äé+‚Äée‚Äéf‚Äés‚Äée‚Äén‚Äéa‚Äéb‚Äél‚Äée‚Äé>‚Äé ‚Äéd‚Äéo‚Äén‚Äét‚Äé ‚Äél‚Äéi‚Äée‚Äé ‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé2‚Äé]‚Äé ‚Äé<‚Äé+‚Äée‚Äéf‚Äés‚Äée‚Äén‚Äéa‚Äéb‚Äél‚Äée‚Äé>‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äég‚Äéu‚Äéy‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé2‚Äé]‚Äé ‚Äé<‚Äé+‚Äéd‚Äéi‚ÄéN‚ÄéG‚Äéo‚Äé>‚Äé ‚Äéy‚Äée‚Äés‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéd‚Äéo‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé2‚Äé]‚Äé ‚Äé<‚Äé+‚Äéd‚Äéi‚ÄéN‚ÄéG‚Äéo‚Äé>‚Äé ‚Äéw‚Äée‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äél‚Äéo‚Äév‚Äée‚Äé ‚Äéy‚Äéo‚Äéu‚Äé ‚Äéo‚Äéh‚Äé ‚Äés‚Äéo‚Äé ‚Äém‚Äéu‚Äéc‚Äéh‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé3‚Äé]‚Äé ‚Äé<‚Äé+‚Äém‚Äén‚Äér‚Äém‚Äén‚Äéa‚Äéu‚Äég‚Äéh‚Äé>‚Äé ‚Äél‚Äéo‚Äél‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé3‚Äé]‚Äé ‚Äé<‚Äé+‚Äéd‚Äéi‚ÄéN‚ÄéG‚Äéo‚Äé>‚Äé ‚Äés‚Äéa‚Äéy‚Äéb‚Äéa‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äéb‚Äéi‚Äét‚Äét‚Äée‚Äér‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé3‚Äé]‚Äé ‚Äé<‚Äé+‚Äés‚Äéa‚Äéy‚Äéb‚Äéa‚Äée‚Äé>‚Äé ‚ÄéI‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äéh‚Äéi‚Äén‚Äék‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéd‚Äéo‚Äég‚Äé ‚Äép‚Äéi‚Äéc‚Äés‚Äé ‚Äéd‚Äée‚Äés‚Äée‚Äér‚Äév‚Äée‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äév‚Äéi‚Äée‚Äéw‚Äés‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé3‚Äé]‚Äé ‚Äé<‚Äé+‚Äéd‚Äéi‚ÄéN‚ÄéG‚Äéo‚Äé>‚Äé ‚Äéy‚Äée‚Äés‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé4‚Äé]‚Äé ‚Äé<‚Äé+‚Äél‚Äéu‚Äél‚Äéd‚Äéa‚Äén‚Äég‚Äés‚Äé>‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéh‚Äéa‚Äém‚Äém‚Äée‚Äér‚Äé ‚Äés‚Äéh‚Äéo‚Äév‚Äée‚Äél‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéi‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äép‚Äéi‚Äén‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äép‚Äér‚Äéi‚Äém‚Äée‚Äér‚Äé ‚Äéh‚Äée‚Äéa‚Äéd‚Äé.‚Äé ‚Äép‚Äér‚Äéi‚Äém‚Äée‚Äér‚Äé ‚Äéh‚Äée‚Äéa‚Äéd‚Äé ‚Äéb‚Äéu‚Äér‚Äés‚Äét‚Äé,‚Äé ‚Äéd‚Äéi‚Äés‚Äéc‚Äéh‚Äéa‚Äér‚Äég‚Äéi‚Äén‚Äég‚Äé ‚Äém‚Äéa‚Äéi‚Äén‚Äé ‚Äép‚Äér‚Äéo‚Äép‚Äée‚Äél‚Äél‚Äéo‚Äér‚Äé ‚Äéc‚Äéh‚Äéa‚Äér‚Äég‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéb‚Äéu‚Äél‚Äél‚Äée‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéf‚Äéa‚Äér‚Äét‚Äée‚Äéd‚Äé ‚Äéf‚Äér‚Äéo‚Äém‚Äé ‚Äéc‚Äéh‚Äéa‚Äém‚Äéb‚Äée‚Äér‚Äé ‚Äéd‚Äéo‚Äéw‚Äén‚Äé ‚Äéb‚Äéa‚Äér‚Äér‚Äée‚Äél‚Äé.‚Äé ‚Äég‚Äéa‚Äés‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äés‚Äéu‚Äér‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéb‚Äéa‚Äér‚Äér‚Äée‚Äél‚Äé ‚Äép‚Äéu‚Äés‚Äéh‚Äé ‚Äéo‚Äén‚Äé ‚Äéb‚Äéu‚Äél‚Äél‚Äée‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äéw‚Äéa‚Äél‚Äél‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéb‚Äéa‚Äér‚Äér‚Äée‚Äél‚Äé ‚Äéb‚Äéu‚Äét‚Äé ‚Äéa‚Äél‚Äés‚Äéo‚Äé ‚Äéi‚Äén‚Äét‚Äéo‚Äé ‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äéf‚Äéa‚Äéc‚Äéi‚Äén‚Äég‚Äé ‚Äéb‚Äéo‚Äél‚Äét‚Äé ‚Äée‚Äéd‚Äéi‚Äéf‚Äéi‚Äéc‚Äée‚Äé.‚Äé ‚Äég‚Äéa‚Äés‚Äée‚Äés‚Äé ‚Äéf‚Äéu‚Äél‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äéc‚Äéo‚Äép‚Äép‚Äée‚Äér‚Äé,‚Äé ‚Äél‚Äée‚Äéa‚Äéd‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéa‚Äér‚Äéb‚Äéo‚Äén‚Äé ‚Äéf‚Äéo‚Äéu‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äés‚Äée‚Äéw‚Äéa‚Äég‚Äée‚Äé ‚Äép‚Äéu‚Äés‚Äéh‚Äé ‚Äéb‚Äéa‚Äéc‚Äék‚Äéw‚Äéa‚Äér‚Äéd‚Äé ‚Äét‚Äéh‚Äér‚Äéo‚Äéu‚Äég‚Äéh‚Äé ‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äéb‚Äée‚Äéc‚Äéa‚Äéu‚Äés‚Äée‚Äé ‚Äég‚Äéa‚Äés‚Äée‚Äéo‚Äéu‚Äés‚Äé ‚Äép‚Äér‚Äée‚Äés‚Äés‚Äéu‚Äér‚Äée‚Äé,‚Äé ‚Äéb‚Äéo‚Äél‚Äét‚Äé ‚Äée‚Äéd‚Äéi‚Äéf‚Äéi‚Äéc‚Äée‚Äé ‚Äéf‚Äél‚Äéi‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äér‚Äée‚Äéa‚Äér‚Äé,‚Äé ‚Äée‚Äéx‚Äép‚Äéu‚Äén‚Äég‚Äée‚Äér‚Äé ‚Äég‚Äér‚Äéa‚Äés‚Äép‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äée‚Äéx‚Äép‚Äéu‚Äén‚Äég‚Äée‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äém‚Äép‚Äét‚Äéy‚Äé ‚Äés‚Äéh‚Äée‚Äél‚Äél‚Äé.‚Äé ‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé4‚Äé]‚Äé ‚Äé<‚Äé+‚Äél‚Äéu‚Äél‚Äéd‚Äéa‚Äén‚Äég‚Äés‚Äé>‚Äé ‚Äét‚Äéh‚Äée‚Äén‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéw‚Äéh‚Äéo‚Äél‚Äée‚Äé ‚Äéb‚Äée‚Äég‚Äéi‚Äén‚Äé ‚Äéa‚Äég‚Äéa‚Äéi‚Äén‚Äé.‚Äé ‚Äéi‚Äés‚Äé ‚Äéb‚Äéa‚Äés‚Äéi‚Äéc‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äés‚Äéa‚Äém‚Äée‚Äé ‚Äéa‚Äés‚Äé ‚Äés‚Äéh‚Äéi‚Äét‚Äés‚Äé ‚Äéw‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéh‚Äée‚Äé ‚Äée‚Äéa‚Äét‚Äés‚Äé.‚Äé
‚Äé0‚Äé3‚Äé[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé5‚Äé]‚Äé ‚Äé*‚Äé ‚Äét‚Äéh‚Äée‚Äéd‚Äéo‚Äén‚Äé ‚Äé(‚Äé~‚Äét‚Äéh‚Äée‚Äéd‚Äéo‚Äén‚Äén‚Äé@‚Äé1‚Äé5‚Äé6‚Äé.‚Äé1‚Äé4‚Äé6‚Äé.‚Äé5‚Äé4‚Äé.‚Äé8‚Äé4‚Äé)‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéj‚Äéo‚Äéi‚Äén‚Äée‚Äéd‚Äé ‚Äé#‚ÄéL‚ÄéR‚ÄéH‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé5‚Äé]‚Äé ‚Äé<‚Äé+‚Äém‚Äén‚Äér‚Äém‚Äén‚Äéa‚Äéu‚Äég‚Äéh‚Äé>‚Äé ‚Äéw‚Äéu‚Äét‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé5‚Äé]‚Äé ‚Äé<‚Äét‚Äéh‚Äée‚Äéd‚Äéo‚Äén‚Äé>‚Äé ‚ÄéT‚ÄéH‚ÄéE‚Äé ‚ÄéD‚ÄéO‚ÄéN‚Äé ‚ÄéI‚ÄéS‚Äé ‚ÄéI‚ÄéN‚Äé ‚ÄéY‚ÄéO‚ÄéU‚ÄéR‚Äé ‚ÄéC‚ÄéH‚ÄéA‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéN‚ÄéE‚ÄéL‚Äé
‚Äé0‚Äé2‚Äé[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé5‚Äé]‚Äé ‚Äé*‚Äé ‚Äét‚Äéh‚Äée‚Äéd‚Äéo‚Äén‚Äé ‚Äé(‚Äé~‚Äét‚Äéh‚Äée‚Äéd‚Äéo‚Äén‚Äén‚Äé@‚Äé1‚Äé5‚Äé6‚Äé.‚Äé1‚Äé4‚Äé6‚Äé.‚Äé5‚Äé4‚Äé.‚Äé8‚Äé4‚Äé)‚Äé ‚ÄéQ‚Äéu‚Äéi‚Äét‚Äé ‚Äé(‚ÄéQ‚Äéu‚Äéi‚Äét‚Äé:‚Äé ‚ÄéL‚Äée‚Äéa‚Äév‚Äéi‚Äén‚Äég‚Äé‚Äé)‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé6‚Äé]‚Äé ‚Äé<‚Äé+‚Äél‚Äéu‚Äél‚Äéd‚Äéa‚Äén‚Äég‚Äés‚Äé>‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéw‚Äéo‚Äén‚Äéd‚Äée‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äéw‚Äéh‚Äéy‚Äé ‚Äéi‚Äét‚Äé ‚Äés‚Äét‚Äéi‚Äén‚Äék‚Äés‚Äé
[‚Äé0‚Äé8‚Äé:‚Äé5‚Äé6‚Äé]‚Äé ‚Äé<‚Äé+‚Äél‚Äéu‚Äél‚Äéd‚Äéa‚Äén‚Äég‚Äés‚Äé>‚Äé ‚Äéw‚Äéa‚Äés‚Äén‚Äé'‚Äét‚Äé ‚Äém‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéo‚Äén‚Äéc‚Äée‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
	‚Äé
A‚Äé ‚Äéb‚Äéa‚Äés‚Äés‚Äéo‚Äé ‚Äép‚Äéo‚Äér‚Äét‚Äéo‚Äé ‚Äé(‚ÄéA‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéL‚Äéo‚Äéw‚Äée‚Äér‚Äé ‚ÄéH‚Äéa‚Äér‚Äéb‚Äéo‚Äéu‚Äér‚Äé)‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äée‚Äé ‚Äéa‚Äéc‚Äét‚Äés‚Äé ‚Äéb‚Äéy‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéI‚Äét‚Äéa‚Äél‚Äéi‚Äéa‚Äén‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äéo‚Äés‚Äée‚Äér‚Äé ‚ÄéN‚Äéi‚Äéc‚Äéc‚Äéo‚Äél‚Äéa‚Äé ‚ÄéS‚Äép‚Äéi‚Äén‚Äée‚Äél‚Äél‚Äéi‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äé ‚Äés‚Äée‚Äét‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚ÄéI‚Äét‚Äéa‚Äél‚Äéi‚Äéa‚Äén‚Äé-‚Äél‚Äéa‚Äén‚Äég‚Äéu‚Äéa‚Äég‚Äée‚Äé ‚Äél‚Äéi‚Äéb‚Äér‚Äée‚Äét‚Äét‚Äéo‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéE‚Äéu‚Äég‚Äée‚Äén‚Äée‚Äé ‚ÄéC‚Äéh‚Äée‚Äéc‚Äéc‚Äéh‚Äéi‚Äé,‚Äé ‚Äéb‚Äéa‚Äés‚Äée‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚ÄéG‚Äéo‚Äéf‚Äéf‚Äér‚Äée‚Äéd‚Äéo‚Äé ‚ÄéC‚Äéo‚Äég‚Äén‚Äée‚Äét‚Äét‚Äéi‚Äé'‚Äés‚Äé ‚Äé1‚Äé8‚Äé8‚Äé9‚Äé ‚Äép‚Äél‚Äéa‚Äéy‚Äé ‚ÄéO‚Äé ‚Äév‚Äéo‚Äét‚Äéo‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äép‚Äér‚Äée‚Äém‚Äéi‚Äée‚Äér‚Äée‚Äéd‚Äé ‚Äét‚Äéo‚Äé ‚Äéc‚Äér‚Äéi‚Äét‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äés‚Äéu‚Äéc‚Äéc‚Äée‚Äés‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äéo‚Äél‚Äéo‚Äég‚Äén‚Äée‚Äé ‚ÄéO‚Äép‚Äée‚Äér‚Äéa‚Äé ‚Äéo‚Äén‚Äé ‚ÄéA‚Äép‚Äér‚Äéi‚Äél‚Äé ‚Äé1‚Äé8‚Äé,‚Äé ‚Äé1‚Äé8‚Äé9‚Äé4‚Äé,‚Äé ‚Äés‚Äéu‚Äén‚Äég‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚ÄéG‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äé ‚Äét‚Äér‚Äéa‚Äén‚Äés‚Äél‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéL‚Äéu‚Äéd‚Äéw‚Äéi‚Äég‚Äé ‚ÄéH‚Äéa‚Äér‚Äét‚Äém‚Äéa‚Äén‚Äén‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéO‚Äét‚Äét‚Äéo‚Äé ‚ÄéH‚Äée‚Äés‚Äés‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äéa‚Äét‚Äée‚Äér‚Äéc‚Äéo‚Äél‚Äéo‚Äéu‚Äér‚Äé ‚Äéi‚Äél‚Äél‚Äéu‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéd‚Äée‚Äép‚Äéi‚Äéc‚Äét‚Äés‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äée‚Äét‚Äé ‚Äéd‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äé ‚Äéb‚Äéy‚Äé ‚ÄéR‚Äéi‚Äéc‚Äéc‚Äéa‚Äér‚Äéd‚Äéo‚Äé ‚ÄéS‚Äéa‚Äél‚Äév‚Äéa‚Äéd‚Äéo‚Äér‚Äéi‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéa‚Äéc‚Äét‚Äé ‚Äé1‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéo‚Äép‚Äée‚Äér‚Äéa‚Äé'‚Äés‚Äé ‚Äép‚Äér‚Äée‚Äém‚Äéi‚Äée‚Äér‚Äée‚Äé.‚Äé ‚ÄéA‚Äé ‚Äéb‚Äéa‚Äés‚Äés‚Äéo‚Äé ‚Äép‚Äéo‚Äér‚Äét‚Äéo‚Äé ‚Äéi‚Äés‚Äé ‚Äés‚Äée‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äél‚Äéu‚Äém‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéN‚Äéa‚Äép‚Äél‚Äée‚Äés‚Äé,‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéS‚Äép‚Äéi‚Äén‚Äée‚Äél‚Äél‚Äéi‚Äé ‚Äéi‚Äén‚Äéc‚Äél‚Äéu‚Äéd‚Äée‚Äéd‚Äé ‚Äém‚Äéa‚Äén‚Äéd‚Äéo‚Äél‚Äéi‚Äén‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äég‚Äéu‚Äéi‚Äét‚Äéa‚Äér‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äéo‚Äér‚Äéc‚Äéh‚Äée‚Äés‚Äét‚Äér‚Äéa‚Äél‚Äé ‚Äés‚Äéc‚Äéo‚Äér‚Äée‚Äé.‚Äé

S‚Äée‚Äét‚Äé ‚Äéd‚Äée‚Äés‚Äéi‚Äég‚Äén‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéR‚Äéi‚Äéc‚Äéc‚Äéa‚Äér‚Äéd‚Äéo‚Äé ‚ÄéS‚Äéa‚Äél‚Äév‚Äéa‚Äéd‚Äéo‚Äér‚Äéi‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

T‚Äéh‚Äéa‚Äét‚Äé'‚Äés‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äén‚Äéo‚Äéw‚Äé.‚Äé ‚ÄéN‚Äéo‚Äéw‚Äé ‚Äég‚Äéo‚Äé ‚Äéo‚Äéu‚Äét‚Äés‚Äéi‚Äéd‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äéu‚Äéc‚Äék‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äé ‚Äép‚Äée‚Äén‚Äég‚Äéu‚Äéi‚Äén‚Äés‚Äé ‚Äéo‚Äér‚Äé ‚Äés‚Äéo‚Äém‚Äée‚Äét‚Äéh‚Äéi‚Äén‚Äég‚Äé.‚Äé"
LLtfH1Ly,[6027] CrownFall Candy Shop Rewards | t.me/DOTA_DM,muk-as,JSON,Thursday 18th of April 2024 07:31:02 PM CDT,"////--------------------------------------------------------------------------------------------------------------------------------
////
////     t.me/DOTA_DM
////
////--------------------------------------------------------------------------------------------------------------------------------


""crownfall_candy_shop_announcers""
{
	""Announcer: Dr. Kleiner""		""1""
	""Announcer: Juggernaut""		""1""
	""Announcer: Nature's Prophet""		""1""
	""Announcer: Storm Spirit""		""1""
	""Announcer: The Pirate Cap'n""		""1""
	""Announcer: Axe""		""1""
	""Announcer: Death Prophet""		""1""
	""Announcer: Bastion""		""1""
	""Announcer: Tuskar""		""1""
	""Announcer: Pyrion Flax""		""1""
	""Announcer: Defense Grid""		""1""
	""Announcer: GLaDOS""		""1""
	""Announcer: Trine""		""1""
	""Announcer: Lina""		""1""
	""Announcer: Clockwerk""		""1""
	""Announcer: The Stanley Parable""		""1""
	""Announcer: Techies""		""1""
	""Announcer: Rick and Morty""		""1""
	""Announcer: Bristleback""		""1""
	""Announcer: Fallout 4""		""1""
	""Mega-Kills: Juggernaut""		""1""
	""Mega-Kills: Nature's Prophet""		""1""
	""Mega-Kills: The Pirate Cap'n""		""1""
	""Mega-Kills: Bastion""		""1""
	""Mega-Kills: Axe""		""1""
	""Mega-Kills: Storm Spirit""		""1""
	""Mega-Kills: Pyrion Flax""		""1""
	""Mega-Kills: Defense Grid""		""1""
	""Mega-Kills: GLaDOS""		""1""
	""Mega-Kills: Trine""		""1""
	""Mega-Kills: Lina""		""1""
	""Mega-Kills: Clockwerk""		""1""
	""Mega-Kills: The Stanley Parable""		""1""
	""Mega-Kills: Techies""		""1""
	""Mega-Kills: Rick and Morty""		""1""
	""Mega-Kills: Fallout 4""		""1""
	""Announcer: Crystal Maiden""		""1""
	""Announcer: Monkey King""		""1""
	""Announcer: Kunkka & Tidehunter""		""1""
	""Announcer: Meepo""		""1""
	""Announcer: Dark Willow""		""1""
	""Mega-Kills: Bristleback""		""1""
	""Mega-Kills: Crystal Maiden""		""1""
	""Mega-Kills: Monkey King""		""1""
	""Mega-Kills: Kunkka & Tidehunter""		""1""
	""Mega-Kills: Meepo""		""1""
	""Mega-Kills: Dark Willow""		""1""
}

""crownfall_candy_shop_arcanas""
{
	""Blades of Voth Domosh""		""1""
	""Demon Eater""		""1""
	""Fiery Soul of the Slayer""		""1""
	""Fractal Horns of Inner Abysm""		""1""
	""Frost Avalanche Bundle""		""1""
	""Manifold Paradox Bundle""		""1""
	""Swine of the Sunken Galley Bundle""		""1""
	""Tempest Helm of the Thundergod""		""1""
	""Flockheart's Gamble Bundle""		""1""
	""The Magus Cypher Bundle""		""1""
	""Feast of Abscession Bundle""		""1""
	""Great Sage's Reckoning Bundle""		""1""
	""Bladeform Legacy Bundle""		""1""
}

""crownfall_candy_shop_attributes""
{
	""Seafarer's Shoes""		""1""
}

""crownfall_candy_shop_couriers""
{
	""Captain Bamboo""		""1""
	""Yonex's Rage""		""1""
	""Shagbark""		""1""
	""Nimble Ben""		""1""
	""Kupu the Metamorpher""		""1""
	""The Llama Llama""		""1""
	""Itsy""		""1""
	""Mok""		""1""
	""Blotto and Stick""		""1""
	""Tinkbot""		""1""
	""Alphid of Lecaciida""		""1""
	""Waldi the Faithful""		""1""
	""Arnabus the Fairy Rabbit""		""1""
	""Deathripper""		""1""
	""Coco the Courageous""		""1""
	""Tory the Sky Guardian""		""1""
	""Throe""		""1""
	""Cluckles the Brave""		""1""
	""Butch""		""1""
	""Ramnaught of Underwool""		""1""
	""Porcine Princess Penelope""		""1""
	""Prismatic Drake""		""1""
	""Tickled Tegu""		""1""
	""Morok's Mechanical Mediary""		""1""
	""Wynchell the Wyrmeleon""		""1""
	""Snowl""		""1""
	""Snelfret the Snail""		""1""
	""Maximilian the Beetlebear""		""1""
	""El Gato""		""1""
	""Woodchopper""		""1""
	""Azuremir""		""1""
	""Snaggletooth Jerry""		""1""
	""Kangdae the Dokkaebi""		""1""
	""Amphibian Kid""		""1""
	""JanJou""		""1""
	""Beaver Knight""		""1""
	""Corsair, Son of the Storm""		""1""
	""Royal Griffin Cub""		""1""
	""Genuine Snapjaw""		""1""
	""Promo Redpaw""		""1""
	""Scribbins the Scarab""		""1""
	""Snapjaw""		""1""
	""Jin and Yin Fox Spirits""		""1""
	""Carty""		""1""
	""Grimoire The Book Wyrm""		""1""
	""Redpaw""		""1""
	""Vigilante Fox""		""1""
	""Virtus Werebear""		""1""
	""Mei Nei the Jade Rabbit""		""1""
	""Nilbog the Mad""		""1""
	""Lil' Nova""		""1""
	""Hexgill the Lane Shark""		""1""
	""Axolotl""		""1""
	""Noble and Imperial Pride""		""1""
	""Babka the Bewitcher""		""1""
	""Promo Bluepaw""		""1""
	""Flightless Dod""		""1""
	""Masked Fey, Lord of Tempests""		""1""
	""Grimsneer""		""1""
	""Chirpy""		""1""
	""Warbler and Snikt""		""1""
	""Coral the Furryfish""		""1""
	""Fraidy Jack""		""1""
	""The Wonderously Encumbered Travelling Automaton""		""1""
	""Master Chocobo""		""1""
	""Atrophic Skitterwing""		""1""
	""Amaterasu""		""1""
}

""crownfall_candy_shop_immortal_treasures""
{
	""Immortal Treasure I 2015""		""1""
	""Immortal Treasure II 2015""		""1""
	""Immortal Treasure III 2015""		""1""
	""Immortal Treasure I 2016""		""1""
	""Immortal Treasure II 2016""		""1""
	""Immortal Treasure III 2016""		""1""
	""Immortal Treasure I 2017""		""1""
	""Immortal Treasure II 2017""		""1""
	""Immortal Treasure III 2017""		""1""
	""Immortal Treasure I 2018""		""1""
	""Immortal Treasure II 2018""		""1""
	""Immortal Treasure III 2018""		""1""
	""Immortal Treasure I 2019""		""1""
	""Immortal Treasure II 2019""		""1""
	""Immortal Treasure III 2019""		""1""
	""can_have_duplicates""		""1""
}

""crownfall_candy_shop_old_treasures""
{
	""Treasure of Molten Steel""		""1""
	""Treasure of the Cannon's Fuse""		""1""
	""Treasure of the Elemental Trophy""		""1""
	""Treasure of the Forged Fury""		""1""
	""Treasure of the Forgotten Myth""		""1""
	""Treasure of the Frosted Flame""		""1""
	""Treasure of the Glacial Abyss""		""1""
	""Treasure of the Mender's Palm""		""1""
	""Treasure of the Onyx Eye""		""1""
	""Treasure of the Ram's Renewal""		""1""
	""Treasure of the Rotted Gallows""		""1""
	""Treasure of the Spring Blossom""		""1""
	""Treasure of the Tangled Keepsake""		""1""
	""Treasure of the Trapper's Pelt""		""1""
	""Warhammer: Treasure of the Old World""		""1""
	""Treasure of the Emerald Revival""		""1""
	""Treasure of the Venerable One""		""1""
	""Treasure of Unbound Majesty""		""1""
	""Treasure of the Carmine Cascade""		""1""
	""Treasure of the Azure Fervor""		""1""
	""Treasure of the Wordless Trek""		""1""
	""Treasure of the Tireless Crafter""		""1""
	""Treasure of the Burning Grove""		""1""
	""Treasure of the Distinguished Conqueror""		""1""
	""can_have_duplicates""		""1""
}

""crownfall_candy_shop_sets""
{
	""Acid Hydra""		""1""
	""Adornments of Blight Set""		""1""
	""Agaric Flourish""		""1""
	""Alchemy Essentials Set""		""1""
	""Alpha Predator Set""		""1""
	""Ancestors' Pride Set""		""1""
	""Ancestral Luck Set""		""1""
	""Ancestral Trappings Set""		""1""
	""Ancient Armor Set""		""1""
	""Anointed Armor of Ruination""		""1""
	""Araceae's Tribute Set""		""1""
	""Arctic Hunter Set""		""1""
	""Ardor of the Scarlet Raven Set""		""1""
	""Aria of the Wild Wind Set""		""1""
	""Armaments of Leviathan Set""		""1""
	""Armor of Eternal Reign""		""1""
	""Armor of Renewed Faith Set""		""1""
	""Armor of the Sanguine Moon Set""		""1""
	""Armor of the Stalwart Soul""		""1""
	""Armored Exoskeleton Set""		""1""
	""Armour of The Iron Drakken""		""1""
	""Arms of Burning Turmoil Set""		""1""
	""Arms of the Bladebreaker Order Set""		""1""
	""Arms of the Bogatyr""		""1""
	""Arms of the Bramble Lord Set""		""1""
	""Arms of the Gwimyeon Warrior Set""		""1""
	""Arms of the Onyx Crucible""		""1""
	""Arms of the Penitent Nomad Set""		""1""
	""Array of Tranquility""		""1""
	""Arsenal of the Demonic Vessel""		""1""
	""Artillery of the Crested Cannoneer Set""		""1""
	""Artisan of Havoc""		""1""
	""Aspect of the Year Beast""		""1""
	""Aspects of Summer""		""1""
	""Attributes of the Foretold Set""		""1""
	""Augur's Curse Set""		""1""
	""Azure Constellation""		""1""
	""Balance of the Bladekeeper""		""1""
	""Barathrum's Fury Set""		""1""
	""Battleseeker Set""		""1""
	""Battletrap""		""1""
	""Bestowments of the Divine Anchor""		""1""
	""Bindings of Deep Magma""		""1""
	""Bindings of Enduring Torment Set""		""1""
	""Bindings of Frost Set""		""1""
	""Bindings of the Storm-Stealer Set""		""1""
	""Bindings of the Trapper""		""1""
	""Bird's Stone Set""		""1""
	""Birot's Bindings Set""		""1""
	""Black Blades of the Qaldin Assassin Set""		""1""
	""Bladesrunner""		""1""
	""Blaze Armor""		""1""
	""Blessings of Lucentyr Set""		""1""
	""Blessings of the Eternal Eclipse Set""		""1""
	""Blessings of the Wildwing""		""1""
	""Bloodmist Armor Set""		""1""
	""Bloody Ripper""		""1""
	""Bobusang's Traveling Necessities Set""		""1""
	""Bonds of Vincere Set""		""1""
	""Bones of the Slain Dragon Set""		""1""
	""Cabalist of Dark Magic Set""		""1""
	""Cadenza Magic Master""		""1""
	""Carapace of the Hidden Hive Set""		""1""
	""Caustic Steel Set""		""1""
	""Ceremonial Carapace of Qaldin Set""		""1""
	""Chained Mistress Set""		""1""
	""Chained Slayers Set""		""1""
	""Chains of the Black Death""		""1""
	""Chains of the Summoned Lord Set""		""1""
	""Champion of Discord""		""1""
	""Cicatrix Regalia""		""1""
	""Cloud Forged Battle Gear Set""		""1""
	""Commander of the Dragon Guard Set""		""1""
	""Councilor's Complete Raiment Set""		""1""
	""Crescent""		""1""
	""Cryogenic Embrace Set""		""1""
	""Crypt Guardian's Set""		""1""
	""Curse of the Malignant Corruption Set""		""1""
	""Custom of Karroch Set""		""1""
	""Cyclopean Marauder""		""1""
	""Dame de Carreau""		""1""
	""Dark Reef Escape""		""1""
	""Dark Ruin Set""		""1""
	""Dark Wraith Set""		""1""
	""Darkness Wanderer's Armor Set""		""1""
	""Dead Winter Set""		""1""
	""Death Charge Set""		""1""
	""Death Shadow Set""		""1""
	""Deep Warden Haul Set""		""1""
	""Delicacies of Butchery Set""		""1""
	""Demonic Vandal's Set""		""1""
	""Desert Gale Set""		""1""
	""Dials of Claszureme Set""		""1""
	""Dimensional Infestation Set""		""1""
	""Divine Ascension""		""1""
	""Dragon Forged Set""		""1""
	""Dragon's Ascension""		""1""
	""Dragonfire""		""1""
	""Dragonterror""		""1""
	""Dreadhawk Armor""		""1""
	""Dressings of the First Light Set""		""1""
	""Eki Spiritual Implements Set""		""1""
	""Eldritch Ice Set""		""1""
	""Eldwurm's Touch""		""1""
	""Ember Crane Set""		""1""
	""Ember Tipped Carapace Set""		""1""
	""Embers of Endless Havoc Set""		""1""
	""Emerald Frenzy Set""		""1""
	""Empowered Vestments of the Gods Set""		""1""
	""Enchanted Plate of the Crimson Wyvern Set""		""1""
	""Engulfing Spike""		""1""
	""Ensemble of the Crystalline Comet""		""1""
	""Epitaphic Bonds""		""1""
	""Equine Emissary""		""1""
	""Eternal Nymph""		""1""
	""Everlasting Heat""		""1""
	""Falconer's Design Set""		""1""
	""Fashion of the Scorching Princess Set""		""1""
	""Fatal Blossom""		""1""
	""Father of the Forest""		""1""
	""Featherfall""		""1""
	""Fire-Blessed Mail of the Drake Set""		""1""
	""Firestarter""		""1""
	""Flames of Prosperity Set""		""1""
	""Flamestitched Suitings Set""		""1""
	""Flight of the Crescent Moon""		""1""
	""Flight of the Sparrowhawk Set""		""1""
	""Forest Hermit Set""		""1""
	""Foreteller's Robes Set""		""1""
	""Form of the Great Grey Set""		""1""
	""Formed Alloy Set""		""1""
	""Forsaken Beauty Set""		""1""
	""Frostiron Raider Set""		""1""
	""Frostiron Sorceress Set""		""1""
	""Frozen Emperor""		""1""
	""Frozen Feather Set""		""1""
	""Fungal Lord Set""		""1""
	""Garb of the Cruel Magician Set""		""1""
	""Garbs of the Eastern Range Set""		""1""
	""Garments of the Nightsilver Sentinel""		""1""
	""Gear of the Tally-Ho Hunter Set""		""1""
	""Gemmed Armor of the Priest Kings Set""		""1""
	""Ghastly Matriarch""		""1""
	""Gift of the Sea Set""		""1""
	""Gifts from the Gloom Set""		""1""
	""Gifts of Fortune Set""		""1""
	""Gifts of the Heavenly Guardian""		""1""
	""Gifts of the Shadowcat Set""		""1""
	""Glacier Duster Set""		""1""
	""Gladiator's Revenge""		""1""
	""Golden Reel Guardian Set""		""1""
	""Guardian of Silence Set""		""1""
	""Guise of the Winged Bolt""		""1""
	""Harbinger of the Inauspicious Abyss Set""		""1""
	""Hardened Hunter's Gear Set""		""1""
	""Heart of the North Set""		""1""
	""Heavy Armor of the World Runner Set""		""1""
	""Heavy Barbed Armor Set""		""1""
	""Heirlooms of Aeol Drias""		""1""
	""Hell's Ambassador Set""		""1""
	""Hidden Flower""		""1""
	""Highborn Reckoning Set""		""1""
	""Honors of the Golden Mane Set""		""1""
	""Humble Drifter""		""1""
	""Hunter in Distant Sands Set""		""1""
	""Hunter of Kings""		""1""
	""Hunter of the Blood Stained Sands Set""		""1""
	""Hunter of the Red Talon Set""		""1""
	""Hunter with No Name""		""1""
	""Iceborn Trinity""		""1""
	""Iceforged Set""		""1""
	""Immemorial Emperor Set""		""1""
	""Immortals Pride""		""1""
	""Impending Transgressions Set""		""1""
	""Imperial Relics""		""1""
	""Implements of the Tahlin Watch Set""		""1""
	""Instruments of the Claddish Voyager Set""		""1""
	""Jewel of the Forest Set""		""1""
	""Jewels of Teardrop Ice Set""		""1""
	""Jini the Bright Moon Set""		""1""
	""Keen Machine""		""1""
	""Keeper of the Northlight Set""		""1""
	""Legacy of Infernal Wings""		""1""
	""Legacy of the Awakened Set""		""1""
	""Light of the Solar Divine""		""1""
	""Lord of the Scouring Dunes""		""1""
	""Malicious Efflorescence Set""		""1""
	""Master Weaver Set""		""1""
	""Mentor of the High Plains""		""1""
	""Might of the Thunder Ram""		""1""
	""Mnemonus Arcanus Set""		""1""
	""Monstrous Reprisal""		""1""
	""Mortar Forge""		""1""
	""Mystic Instruments of Tang-Ki""		""1""
	""Nether Lord's Regalia Set""		""1""
	""Nimble Edge Set""		""1""
	""Obsidian Guard""		""1""
	""Onyx Lotus""		""1""
	""Outcast of the Deep Set""		""1""
	""Peculiar Prestidigitator Set""		""1""
	""Penumbral Vesture Set""		""1""
	""Phasma Phasmatis""		""1""
	""Primeval Prophet""		""1""
	""Radiant Protector Set""		""1""
	""Rage of the Three""		""1""
	""Raiment of the Chiseled Guard""		""1""
	""Raiments of the Sacrosanct""		""1""
	""Red Dragon""		""1""
	""Red Mist Reaper Set""		""1""
	""Redmoon Assassin's Secret Set""		""1""
	""Redwood Arms Set""		""1""
	""Regalia of the Bonelord Set""		""1""
	""Regalia of the Crystalline Queen Set""		""1""
	""Regalia of the Mortal Coil Set""		""1""
	""Regalia of the Wraith Lord Set""		""1""
	""Relics of the Putrid Pontiff Set""		""1""
	""Relics of the Sundered King""		""1""
	""Remains of the Dreadknight Set""		""1""
	""Reminiscence of Dreams""		""1""
	""Resentment of the Banished Princess""		""1""
	""Resonant Vibrance Set""		""1""
	""Revered Arms Set""		""1""
	""Rider of Avarice""		""1""
	""Rider of the Storm Set""		""1""
	""Ritual Garb of the Father Spirits Set""		""1""
	""Rune Forged Set""		""1""
	""Saberhorn's Armor Set""		""1""
	""Sacred Orb Set""		""1""
	""Sanguine Royalty""		""1""
	""Scarlet Quarry""		""1""
	""Scorched Fletcher""		""1""
	""Sentinel of the Lucent Gate""		""1""
	""Sermon of the Frozen Apostle Set""		""1""
	""Shadow Flame""		""1""
	""Shadow Hunter Set""		""1""
	""Shards of the Falling Comet Set""		""1""
	""Silent Champion""		""1""
	""Sky-High Warship""		""1""
	""Snowstorm Huntress""		""1""
	""Sorcerer of the Black Pool""		""1""
	""Spirit of the Howling Wolf Set""		""1""
	""Spoils from the Shifting Sorcerer Bundle""		""1""
	""Spoils of the Bone Ruins Set""		""1""
	""Starlight Set""		""1""
	""Starrider of the Crescent Steel""		""1""
	""Static Lord""		""1""
	""Steam Chopper""		""1""
	""Steelweb of Pytheos Set""		""1""
	""Stellar Jade""		""1""
	""Stonehall Royal Guard Set""		""1""
	""Strength of the Demon Stone Set""		""1""
	""Styles of Unending Battle""		""1""
	""Sylvan Guard's Finery Set""		""1""
	""Tahlin Occult Set""		""1""
	""Techies' Bombastic Box""		""1""
	""The Ancient Sovereign Set""		""1""
	""The Apocalyptic Fire Set""		""1""
	""The Arms of Retribution Set""		""1""
	""The Atniw's Fury Set""		""1""
	""The Battle Caster Set""		""1""
	""The Bone Scryer Set""		""1""
	""The Bonehunter Set""		""1""
	""The Boreal Watch Set""		""1""
	""The Brood Queen Set""		""1""
	""The Burden of Eleven Curses Set""		""1""
	""The Caustic Consumption Set""		""1""
	""The Clergy Ascetic Set""		""1""
	""The Commendable Commodore Set""		""1""
	""The Conquering Tyrant Set""		""1""
	""The Corpse Maiden's Set""		""1""
	""The Creeper's Cruelty Set""		""1""
	""The Crimson Cut-throat Set""		""1""
	""The Deadly Nightshade Set""		""1""
	""The Demonic Archivist Set""		""1""
	""The Dreaded Bravo Set""		""1""
	""The Ephemeral Haunt Set""		""1""
	""The Eternal Light Set""		""1""
	""The Exiled Demonologist Set""		""1""
	""The Exiled Ronin Set""		""1""
	""The Fiend Cleaver""		""1""
	""The Gallows Understudy Set""		""1""
	""The Garments of the Charred Bloodline Set""		""1""
	""The Gifts of Yoskreth Set""		""1""
	""The Hare Hunt Set""		""1""
	""The Hidden Talent Set""		""1""
	""The Hierophant's Protection Set""		""1""
	""The Igneous Stone""		""1""
	""The Inscrutable Zeal Set""		""1""
	""The Iron Claw""		""1""
	""The Mage Slayer's Set""		""1""
	""The Magus Magnus Set""		""1""
	""The Maniacal Machinist""		""1""
	""The Master Assassin Set""		""1""
	""The Moon Rider Set""		""1""
	""The Mourning Mother""		""1""
	""The Mysterious Vagabond Set""		""1""
	""The Nether Grandmaster's Robes Set""		""1""
	""The Nightwatcher's Set""		""1""
	""The Northern Wind Set""		""1""
	""The Obsidian Blade Set""		""1""
	""The Ol' Chopper's Set""		""1""
	""The Red Conqueror Set""		""1""
	""The Riftshadow Roamer's Set""		""1""
	""The Rough Rider of Yama Raskav Set""		""1""
	""The Sea Dragon's Set""		""1""
	""The Second Disciple Set""		""1""
	""The Seers Command Set""		""1""
	""The Slithereen Exile Set""		""1""
	""The Slithereen Knight Set""		""1""
	""The Spellbinder's Shape Set""		""1""
	""The Steadfast Voyager Set""		""1""
	""The Stoneshard Majesty Set""		""1""
	""The Stormcrow's Spirit Set""		""1""
	""The Subtle Demon Set""		""1""
	""The Tentacular Timelord Set""		""1""
	""The Third Insight Set""		""1""
	""The Three Virtues Bundle""		""1""
	""The True Crow""		""1""
	""The Twisted Arc Set""		""1""
	""The Ursine Ravager Set""		""1""
	""The Witch Hunter""		""1""
	""The Wolf Hunter""		""1""
	""The World Splitter""		""1""
	""Thousand Faces Set""		""1""
	""Throes of Anguish Set""		""1""
	""Thunderwrath's Calling Set""		""1""
	""Timberthaw""		""1""
	""Tools of the Demon Witch Set""		""1""
	""Tools of the Haruspex Set""		""1""
	""Tools of the Mad Harvester Set""		""1""
	""Toxic Siege Armor Set""		""1""
	""Traveling Tale-Teller's Set""		""1""
	""Tree Punisher""		""1""
	""Tribal Stone Set""		""1""
	""Twin Blades Assassin""		""1""
	""Twisted Wisdom Set""		""1""
	""Umbra Rider""		""1""
	""Unbroken Stallion""		""1""
	""Vanquishing Demons General""		""1""
	""Venomous Deathbringer""		""1""
	""Vestige of the Arsenal Magus""		""1""
	""Vestments of the Infinite Waves""		""1""
	""Vestments of the Ten Plagues Set""		""1""
	""Viridi Inanitas Set""		""1""
	""Volatile Firmament""		""1""
	""Wandering Demon of the Plains Set""		""1""
	""Wandering Harlequin's Regalia""		""1""
	""War-Vestments of the Magnoceri""		""1""
	""Warcog""		""1""
	""Warrior of the Steppe Set""		""1""
	""Warrior of the Stormlands""		""1""
	""Warrior's Retribution Set""		""1""
	""Web of Thorns Set""		""1""
	""Webs of Perception Set""		""1""
	""Weight of Omexe Set""		""1""
	""Whisper of the Tribunal""		""1""
	""Whispering Dead Set""		""1""
	""Wicked Succubus Set""		""1""
	""Wings of Obelis Set""		""1""
	""Wings of the Gilded Falcon Set""		""1""
	""Wings of the Paladin Set""		""1""
	""Winter Snowdrop""		""1""
	""Witch of the Outlands Set""		""1""
	""Woodland Outcast Set""		""1""
	""Worldforger""		""1""
	""Wrath of Ka""		""1""
	""Wrath of the Blood Covenant Set""		""1""
	""Wyvern Skin""		""1""
	""Yuwipi Set""		""1""
	""Zaru'Kina Protector's Garb Set""		""1""
	""Dusklight Marauder""		""1""
	""Moonshard Overgrowth""		""1""
	""Surgical Precision""		""1""
	""Corruption""		""1""
	""Fire Tribunal Set""		""1""
	""Gifts of the Vanished Isle Set""		""1""
	""Sovereign of the Woodlands""		""1""
	""Garb of Shades""		""1""
	""The Dead Reborn""		""1""
	""The Claddish Renegade""		""1""
	""Redrage Crawler""		""1""
	""Noble Warrior""		""1""
	""Harbinger of War""		""1""
	""Deep Sea Scoundrel""		""1""
	""Scavenger of the Basilisk""		""1""
	""Bedrock Serenity""		""1""
	""Rhinoceros Order""		""1""
	""Fluttering Amethyst""		""1""
	""Dark Curator""		""1""
	""Eye of the Beholder""		""1""
	""The Gatekeeper""		""1""
	""Allure of the Deep""		""1""
	""The Brinebred Cavalier""		""1""
	""Fathomless Ravager""		""1""
	""Rambling Fatebender""		""1""
	""The Keen Commander""		""1""
	""Arctic Recluse""		""1""
	""Enduring Solitude""		""1""
	""Outlandish Gourmet""		""1""
	""Golden Nirvana""		""1""
	""Raucous Gatecrasher""		""1""
	""Stygian Maw""		""1""
	""Unblinking Eternity""		""1""
	""Ironbarde Charger""		""1""
	""The Undying Light""		""1""
	""Elder Convergence""		""1""
	""Boilerplate Bruiser""		""1""
	""Icebrew Angler""		""1""
	""Epoch of the Abysm""		""1""
	""Forgotten Renegade""		""1""
	""War-Burrow Ravager""		""1""
	""Portent Payload""		""1""
	""Iron Hog""		""1""
	""Icewrack Marauder""		""1""
	""Mantle of the Prophet Foretold""		""1""
	""Stoutheart Growler""		""1""
	""Eye of the Weathered Storm""		""1""
	""Purveyor of the First Ways""		""1""
	""Winter's Warden""		""1""
	""Sign of the Netherfrost""		""1""
	""Frostshard Ascendant""		""1""
	""Bitterwing Legacy""		""1""
	""Snowpack Savage""		""1""
	""Seasoned Expeditionary""		""1""
	""Watcher on the Northern Shore""		""1""
	""Frost Auburn Hideaway""		""1""
	""Violent Precipitate""		""1""
	""Desolate Conquest""		""1""
	""Cruel Reprisal""		""1""
	""Majesty of the Forbidden Sands""		""1""
	""Ascendance of the Rime Lord""		""1""
	""Creed of the Outlaw Huntsman""		""1""
	""The Corruption of Nezzureem""		""1""
	""Bestowments of the Centurion Vanguard""		""1""
	""Vantage of the Breach Warden""		""1""
}

""crownfall_candy_shop_wards""
{
	""Skywrath Sentinel""		""1""
	""Black Pool Watcher""		""1""
	""Hellgazer""		""1""
	""A Dire Gaze""		""1""
	""Spell Surveyor""		""1""
	""Ocula the Observer""		""1""
	""Warding Guise""		""1""
	""Celestial Observatory""		""1""
	""Watchful Sotdae""		""1""
	""Eye of Lyralei""		""1""
	""Eye of Thunderkeg""		""1""
	""Bramble Watch""		""1""
	""Clockwerk Watcher""		""1""
	""Dead Watch""		""1""
	""Enchanted Vision""		""1""
	""Stone Bound Watcher""		""1""
	""Ward of the Eternal Alliance""		""1""
	""Eye of Foresight""		""1""
	""Arctic Watchtower""		""1""
	""The Eye Fountain""		""1""
	""Spying Toadstool""		""1""
	""Overseer's Burden""		""1""
	""Feather Sentinel""		""1""
	""Eyes of the Watchroot""		""1""
	""Starecrow""		""1""
	""Watchful Wyrm""		""1""
	""The Eyes of the King""		""1""
}"
Naxz9K0Z,Untitled,Lladnar45,Lua,Thursday 18th of April 2024 07:25:52 PM CDT,"local monitor = peripheral.wrap(""top"")
monitor.setCursorPos(1, 1)
monitor.write(""ME & Power"")
monitor.setCursorPos(1, 2)
monitor.write(""<----"")
monitor.setCursorPos(1, 3)
monitor.write(""Server Room & Battery Room"")
monitor.setCursorPos(1, 4)
monitor.write(""---->"")
monitor.setCursorPos(1, 5)
monitor.write(""Generator Access"")
monitor.setCursorPos(1, 6)
monitor.write(""^ Automatic Ore Processing"")
monitor.setCursorPos(1, 7)
monitor.write(""v ME AutoCrafter Access"")
monitor.setCursorPos(1, 8)"
FuGE6QK3,2024-04-18_stats.json,rdp_snitch,JSON,Thursday 18th of April 2024 07:18:17 PM CDT,"{
  ""ip"": {
    ""161.35.33.150"": 21,
    ""103.245.237.31"": 288,
    ""152.42.196.16"": 9,
    ""152.32.183.213"": 6,
    ""205.210.31.102"": 9,
    ""58.218.204.183"": 18,
    ""152.89.198.238"": 3,
    ""87.251.75.145"": 9,
    ""202.55.135.213"": 3,
    ""167.94.145.55"": 3,
    ""185.170.144.3"": 6,
    ""36.91.222.100"": 6,
    ""194.165.16.73"": 12,
    ""118.194.236.134"": 3,
    ""116.140.196.215"": 3,
    ""192.3.101.25"": 9,
    ""45.143.201.12"": 3,
    ""194.165.16.11"": 12,
    ""103.75.185.176"": 3,
    ""198.235.24.226"": 9,
    ""188.121.107.172"": 6,
    ""62.204.41.225"": 18,
    ""36.137.3.251"": 9,
    ""134.209.63.147"": 12,
    ""165.22.159.85"": 3,
    ""27.8.44.19"": 3,
    ""112.4.139.162"": 3,
    ""123.56.20.194"": 3,
    ""45.79.208.240"": 12,
    ""205.210.31.208"": 9,
    ""185.196.220.41"": 9,
    ""45.33.63.234"": 3,
    ""193.142.146.227"": 9,
    ""103.57.220.167"": 3,
    ""213.202.230.4"": 3,
    ""107.167.82.123"": 3,
    ""87.251.75.64"": 3,
    ""188.166.253.10"": 6,
    ""190.92.175.108"": 3,
    ""198.235.24.248"": 9,
    ""80.66.76.92"": 3
  },
  ""asn"": {
    ""AS14061"": 51,
    ""AS150867"": 288,
    ""AS135377"": 9,
    ""AS396982"": 36,
    ""AS4134"": 18,
    ""AS57523"": 3,
    ""AS208091"": 15,
    ""AS63737"": 3,
    ""AS398705"": 3,
    ""AS197414"": 6,
    ""AS7713"": 6,
    ""AS48721"": 24,
    ""AS4837"": 6,
    ""AS36352"": 9,
    ""AS210950"": 3,
    ""AS135905"": 6,
    ""AS202468"": 6,
    ""AS59425"": 18,
    ""AS9808"": 9,
    ""AS56046"": 3,
    ""AS37963"": 3,
    ""AS63949"": 15,
    ""AS208046"": 18,
    ""AS24961"": 3,
    ""AS53755"": 3,
    ""Unknown"": 3
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 51,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 288,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 9,
    ""Google LLC"": 36,
    ""Chinanet"": 18,
    ""Chang Way Technologies Co. Limited"": 3,
    ""Xhost Internet Solutions LP"": 21,
    ""Vietserver Services Technology Company Limited"": 3,
    ""Censys, Inc."": 3,
    ""PT Telekomunikasi Indonesia"": 6,
    ""Flyservers S.A."": 24,
    ""China Unicom CHINA169 Network"": 3,
    ""HostPapa"": 9,
    ""TOV E-RISHENNYA"": 3,
    ""Inet software one member company limited"": 3,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 6,
    ""Horizon LLC"": 18,
    ""China Mobile"": 9,
    ""China Unicom Chongqing Province Network"": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Hangzhou Alibaba Advertising Co"": 3,
    ""Akamai Technologies, Inc."": 15,
    ""ColocationX Ltd."": 18,
    ""INET"": 3,
    ""myLoc managed IT AG"": 3,
    ""Input Output Flood LLC"": 3,
    ""WHG Hosting Services Ltd"": 3
  },
  ""org"": {
    ""DigitalOcean, LLC"": 45,
    ""LP Technology Electronic Commerce Company Limited"": 288,
    ""Ucloud Information Technology"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Chinanet JS"": 18,
    ""Starcrecium Limited"": 3,
    ""Xhost Internet Solutions"": 15,
    ""VietServer Services technology company limited"": 3,
    ""Censys, Inc."": 3,
    ""Xhostis"": 6,
    ""Telekomunikasi Indonesia"": 6,
    ""Flyservers S.A"": 24,
    ""China United Network Communications Corporation Limited"": 3,
    ""Unknown"": 12,
    ""TOV VAIZ PARTNER"": 3,
    ""Inet software one member company limited"": 3,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 6,
    ""Horizon LLC"": 18,
    ""China Mobile Communications Corporation"": 12,
    ""Aliyun Computing Co., LTD"": 3,
    ""Linode"": 15,
    ""Makut Investments"": 9,
    ""ColocationX Ltd"": 9,
    ""iNET Media Company Limited"": 3,
    ""myLoc managed IT AG"": 3,
    ""DemonVPS"": 3,
    ""Digitalocean"": 6,
    ""WHG Hosting Services Ltd"": 3
  },
  ""regionName"": {
    ""England"": 21,
    ""Ho Chi Minh"": 288,
    ""South West"": 15,
    ""Virginia"": 15,
    ""California"": 54,
    ""Jiangsu"": 21,
    ""Moscow"": 21,
    ""North Holland"": 30,
    ""Hanoi"": 6,
    ""Hesse"": 3,
    ""Jakarta"": 6,
    ""Kaunas"": 24,
    ""Tokyo"": 3,
    ""Beijing"": 6,
    ""New York"": 9,
    ""Kyiv City"": 3,
    ""B\u1eafc Ninh Province"": 3,
    ""Tehran"": 6,
    ""Guangdong"": 9,
    ""Chongqing"": 3,
    ""Georgia"": 12,
    ""North Rhine-Westphalia"": 3,
    ""Arizona"": 3,
    ""Ohio"": 3
  },
  ""country"": {
    ""United Kingdom"": 21,
    ""Vietnam"": 297,
    ""Singapore"": 15,
    ""United States"": 96,
    ""China"": 39,
    ""Russia"": 21,
    ""The Netherlands"": 30,
    ""Germany"": 6,
    ""Indonesia"": 6,
    ""Lithuania"": 24,
    ""Japan"": 3,
    ""Ukraine"": 3,
    ""Iran"": 6
  },
  ""account"": {
    ""hello"": 378,
    ""Administrator"": 9,
    ""ZOhgeZiIR"": 3,
    ""mNXxUj"": 3,
    ""sCdJml"": 3,
    ""Test"": 42,
    ""Administr"": 24,
    ""(empty)"": 9,
    ""Domain"": 39,
    ""RMBkcrQQm"": 3,
    ""uEKmTR"": 3,
    ""uKHTXF"": 3,
    ""gqcc7yzm"": 12,
    ""beio"": 6,
    ""qqy2jyhn"": 12,
    ""WCYvQbrfk"": 3,
    ""DynGoX"": 3,
    ""vfzIKQ"": 3,
    ""ovZXmxRtw"": 3,
    ""tWBqvO"": 3,
    ""QGzYoK"": 3
  },
  ""keyboard"": {
    ""Unknown"": 567
  },
  ""client_build"": {
    ""Unknown"": 567
  },
  ""client_name"": {
    ""Unknown"": 567
  },
  ""ip_type"": {
    ""hosting"": 102,
    ""Unknown"": 408,
    ""hosting & proxy"": 33,
    ""proxy"": 3,
    ""mobile"": 21
  }
}"
yXAaS3S5,2024-04-18_stats.json,rdp_snitch,JSON,Thursday 18th of April 2024 07:16:16 PM CDT,"{
  ""ip"": {
    ""161.35.33.150"": 14,
    ""103.245.237.31"": 192,
    ""152.42.196.16"": 6,
    ""152.32.183.213"": 4,
    ""205.210.31.102"": 6,
    ""58.218.204.183"": 12,
    ""152.89.198.238"": 2,
    ""87.251.75.145"": 6,
    ""202.55.135.213"": 2,
    ""167.94.145.55"": 2,
    ""185.170.144.3"": 4,
    ""36.91.222.100"": 4,
    ""194.165.16.73"": 8,
    ""118.194.236.134"": 2,
    ""116.140.196.215"": 2,
    ""192.3.101.25"": 6,
    ""45.143.201.12"": 2,
    ""194.165.16.11"": 8,
    ""103.75.185.176"": 2,
    ""198.235.24.226"": 6,
    ""188.121.107.172"": 4,
    ""62.204.41.225"": 12,
    ""36.137.3.251"": 6,
    ""134.209.63.147"": 8,
    ""165.22.159.85"": 2,
    ""27.8.44.19"": 2,
    ""112.4.139.162"": 2,
    ""123.56.20.194"": 2,
    ""45.79.208.240"": 8,
    ""205.210.31.208"": 6,
    ""185.196.220.41"": 6,
    ""45.33.63.234"": 2,
    ""193.142.146.227"": 6,
    ""103.57.220.167"": 2,
    ""213.202.230.4"": 2,
    ""107.167.82.123"": 2,
    ""87.251.75.64"": 2,
    ""188.166.253.10"": 4,
    ""190.92.175.108"": 2,
    ""198.235.24.248"": 6,
    ""80.66.76.92"": 2
  },
  ""asn"": {
    ""AS14061"": 34,
    ""AS150867"": 192,
    ""AS135377"": 6,
    ""AS396982"": 24,
    ""AS4134"": 12,
    ""AS57523"": 2,
    ""AS208091"": 10,
    ""AS63737"": 2,
    ""AS398705"": 2,
    ""AS197414"": 4,
    ""AS7713"": 4,
    ""AS48721"": 16,
    ""AS4837"": 4,
    ""AS36352"": 6,
    ""AS210950"": 2,
    ""AS135905"": 4,
    ""AS202468"": 4,
    ""AS59425"": 12,
    ""AS9808"": 6,
    ""AS56046"": 2,
    ""AS37963"": 2,
    ""AS63949"": 10,
    ""AS208046"": 12,
    ""AS24961"": 2,
    ""AS53755"": 2,
    ""Unknown"": 2
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 34,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 192,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Google LLC"": 24,
    ""Chinanet"": 12,
    ""Chang Way Technologies Co. Limited"": 2,
    ""Xhost Internet Solutions LP"": 14,
    ""Vietserver Services Technology Company Limited"": 2,
    ""Censys, Inc."": 2,
    ""PT Telekomunikasi Indonesia"": 4,
    ""Flyservers S.A."": 16,
    ""China Unicom CHINA169 Network"": 2,
    ""HostPapa"": 6,
    ""TOV E-RISHENNYA"": 2,
    ""Inet software one member company limited"": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Horizon LLC"": 12,
    ""China Mobile"": 6,
    ""China Unicom Chongqing Province Network"": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Hangzhou Alibaba Advertising Co"": 2,
    ""Akamai Technologies, Inc."": 10,
    ""ColocationX Ltd."": 12,
    ""INET"": 2,
    ""myLoc managed IT AG"": 2,
    ""Input Output Flood LLC"": 2,
    ""WHG Hosting Services Ltd"": 2
  },
  ""org"": {
    ""DigitalOcean, LLC"": 30,
    ""LP Technology Electronic Commerce Company Limited"": 192,
    ""Ucloud Information Technology"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Chinanet JS"": 12,
    ""Starcrecium Limited"": 2,
    ""Xhost Internet Solutions"": 10,
    ""VietServer Services technology company limited"": 2,
    ""Censys, Inc."": 2,
    ""Xhostis"": 4,
    ""Telekomunikasi Indonesia"": 4,
    ""Flyservers S.A"": 16,
    ""China United Network Communications Corporation Limited"": 2,
    ""Unknown"": 8,
    ""TOV VAIZ PARTNER"": 2,
    ""Inet software one member company limited"": 2,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 4,
    ""Horizon LLC"": 12,
    ""China Mobile Communications Corporation"": 8,
    ""Aliyun Computing Co., LTD"": 2,
    ""Linode"": 10,
    ""Makut Investments"": 6,
    ""ColocationX Ltd"": 6,
    ""iNET Media Company Limited"": 2,
    ""myLoc managed IT AG"": 2,
    ""DemonVPS"": 2,
    ""Digitalocean"": 4,
    ""WHG Hosting Services Ltd"": 2
  },
  ""regionName"": {
    ""England"": 14,
    ""Ho Chi Minh"": 192,
    ""South West"": 10,
    ""Virginia"": 10,
    ""California"": 36,
    ""Jiangsu"": 14,
    ""Moscow"": 14,
    ""North Holland"": 20,
    ""Hanoi"": 4,
    ""Hesse"": 2,
    ""Jakarta"": 4,
    ""Kaunas"": 16,
    ""Tokyo"": 2,
    ""Beijing"": 4,
    ""New York"": 6,
    ""Kyiv City"": 2,
    ""B\u1eafc Ninh Province"": 2,
    ""Tehran"": 4,
    ""Guangdong"": 6,
    ""Chongqing"": 2,
    ""Georgia"": 8,
    ""North Rhine-Westphalia"": 2,
    ""Arizona"": 2,
    ""Ohio"": 2
  },
  ""country"": {
    ""United Kingdom"": 14,
    ""Vietnam"": 198,
    ""Singapore"": 10,
    ""United States"": 64,
    ""China"": 26,
    ""Russia"": 14,
    ""The Netherlands"": 20,
    ""Germany"": 4,
    ""Indonesia"": 4,
    ""Lithuania"": 16,
    ""Japan"": 2,
    ""Ukraine"": 2,
    ""Iran"": 4
  },
  ""account"": {
    ""hello"": 252,
    ""Administrator"": 6,
    ""ZOhgeZiIR"": 2,
    ""mNXxUj"": 2,
    ""sCdJml"": 2,
    ""Test"": 28,
    ""Administr"": 16,
    ""(empty)"": 6,
    ""Domain"": 26,
    ""RMBkcrQQm"": 2,
    ""uEKmTR"": 2,
    ""uKHTXF"": 2,
    ""gqcc7yzm"": 8,
    ""beio"": 4,
    ""qqy2jyhn"": 8,
    ""WCYvQbrfk"": 2,
    ""DynGoX"": 2,
    ""vfzIKQ"": 2,
    ""ovZXmxRtw"": 2,
    ""tWBqvO"": 2,
    ""QGzYoK"": 2
  },
  ""keyboard"": {
    ""Unknown"": 378
  },
  ""client_build"": {
    ""Unknown"": 378
  },
  ""client_name"": {
    ""Unknown"": 378
  },
  ""ip_type"": {
    ""hosting"": 68,
    ""Unknown"": 272,
    ""hosting & proxy"": 22,
    ""proxy"": 2,
    ""mobile"": 14
  }
}"
uZkY1VHq,2024-04-18_stats.json,rdp_snitch,JSON,Thursday 18th of April 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""161.35.33.150"": 7,
    ""103.245.237.31"": 96,
    ""152.42.196.16"": 3,
    ""152.32.183.213"": 2,
    ""205.210.31.102"": 3,
    ""58.218.204.183"": 6,
    ""152.89.198.238"": 1,
    ""87.251.75.145"": 3,
    ""202.55.135.213"": 1,
    ""167.94.145.55"": 1,
    ""185.170.144.3"": 2,
    ""36.91.222.100"": 2,
    ""194.165.16.73"": 4,
    ""118.194.236.134"": 1,
    ""116.140.196.215"": 1,
    ""192.3.101.25"": 3,
    ""45.143.201.12"": 1,
    ""194.165.16.11"": 4,
    ""103.75.185.176"": 1,
    ""198.235.24.226"": 3,
    ""188.121.107.172"": 2,
    ""62.204.41.225"": 6,
    ""36.137.3.251"": 3,
    ""134.209.63.147"": 4,
    ""165.22.159.85"": 1,
    ""27.8.44.19"": 1,
    ""112.4.139.162"": 1,
    ""123.56.20.194"": 1,
    ""45.79.208.240"": 4,
    ""205.210.31.208"": 3,
    ""185.196.220.41"": 3,
    ""45.33.63.234"": 1,
    ""193.142.146.227"": 3,
    ""103.57.220.167"": 1,
    ""213.202.230.4"": 1,
    ""107.167.82.123"": 1,
    ""87.251.75.64"": 1,
    ""188.166.253.10"": 2,
    ""190.92.175.108"": 1,
    ""198.235.24.248"": 3,
    ""80.66.76.92"": 1
  },
  ""asn"": {
    ""AS14061"": 17,
    ""AS150867"": 96,
    ""AS135377"": 3,
    ""AS396982"": 12,
    ""AS4134"": 6,
    ""AS57523"": 1,
    ""AS208091"": 5,
    ""AS63737"": 1,
    ""AS398705"": 1,
    ""AS197414"": 2,
    ""AS7713"": 2,
    ""AS48721"": 8,
    ""AS4837"": 2,
    ""AS36352"": 3,
    ""AS210950"": 1,
    ""AS135905"": 2,
    ""AS202468"": 2,
    ""AS59425"": 6,
    ""AS9808"": 3,
    ""AS56046"": 1,
    ""AS37963"": 1,
    ""AS63949"": 5,
    ""AS208046"": 6,
    ""AS24961"": 1,
    ""AS53755"": 1,
    ""Unknown"": 1
  },
  ""isp"": {
    ""DigitalOcean, LLC"": 17,
    ""LP TECHNOLOGY ELECTRONIC COMMERCE COMPANY LIMITED"": 96,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Google LLC"": 12,
    ""Chinanet"": 6,
    ""Chang Way Technologies Co. Limited"": 1,
    ""Xhost Internet Solutions LP"": 7,
    ""Vietserver Services Technology Company Limited"": 1,
    ""Censys, Inc."": 1,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Flyservers S.A."": 8,
    ""China Unicom CHINA169 Network"": 1,
    ""HostPapa"": 3,
    ""TOV E-RISHENNYA"": 1,
    ""Inet software one member company limited"": 1,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Horizon LLC"": 6,
    ""China Mobile"": 3,
    ""China Unicom Chongqing Province Network"": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Hangzhou Alibaba Advertising Co"": 1,
    ""Akamai Technologies, Inc."": 5,
    ""ColocationX Ltd."": 6,
    ""INET"": 1,
    ""myLoc managed IT AG"": 1,
    ""Input Output Flood LLC"": 1,
    ""WHG Hosting Services Ltd"": 1
  },
  ""org"": {
    ""DigitalOcean, LLC"": 15,
    ""LP Technology Electronic Commerce Company Limited"": 96,
    ""Ucloud Information Technology"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Chinanet JS"": 6,
    ""Starcrecium Limited"": 1,
    ""Xhost Internet Solutions"": 5,
    ""VietServer Services technology company limited"": 1,
    ""Censys, Inc."": 1,
    ""Xhostis"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Flyservers S.A"": 8,
    ""China United Network Communications Corporation Limited"": 1,
    ""Unknown"": 4,
    ""TOV VAIZ PARTNER"": 1,
    ""Inet software one member company limited"": 1,
    ""Noyan Abr Arvan Co. ( Private Joint Stock)"": 2,
    ""Horizon LLC"": 6,
    ""China Mobile Communications Corporation"": 4,
    ""Aliyun Computing Co., LTD"": 1,
    ""Linode"": 5,
    ""Makut Investments"": 3,
    ""ColocationX Ltd"": 3,
    ""iNET Media Company Limited"": 1,
    ""myLoc managed IT AG"": 1,
    ""DemonVPS"": 1,
    ""Digitalocean"": 2,
    ""WHG Hosting Services Ltd"": 1
  },
  ""regionName"": {
    ""England"": 7,
    ""Ho Chi Minh"": 96,
    ""South West"": 5,
    ""Virginia"": 5,
    ""California"": 18,
    ""Jiangsu"": 7,
    ""Moscow"": 7,
    ""North Holland"": 10,
    ""Hanoi"": 2,
    ""Hesse"": 1,
    ""Jakarta"": 2,
    ""Kaunas"": 8,
    ""Tokyo"": 1,
    ""Beijing"": 2,
    ""New York"": 3,
    ""Kyiv City"": 1,
    ""B\u1eafc Ninh Province"": 1,
    ""Tehran"": 2,
    ""Guangdong"": 3,
    ""Chongqing"": 1,
    ""Georgia"": 4,
    ""North Rhine-Westphalia"": 1,
    ""Arizona"": 1,
    ""Ohio"": 1
  },
  ""country"": {
    ""United Kingdom"": 7,
    ""Vietnam"": 99,
    ""Singapore"": 5,
    ""United States"": 32,
    ""China"": 13,
    ""Russia"": 7,
    ""The Netherlands"": 10,
    ""Germany"": 2,
    ""Indonesia"": 2,
    ""Lithuania"": 8,
    ""Japan"": 1,
    ""Ukraine"": 1,
    ""Iran"": 2
  },
  ""account"": {
    ""hello"": 126,
    ""Administrator"": 3,
    ""ZOhgeZiIR"": 1,
    ""mNXxUj"": 1,
    ""sCdJml"": 1,
    ""Test"": 14,
    ""Administr"": 8,
    ""(empty)"": 3,
    ""Domain"": 13,
    ""RMBkcrQQm"": 1,
    ""uEKmTR"": 1,
    ""uKHTXF"": 1,
    ""gqcc7yzm"": 4,
    ""beio"": 2,
    ""qqy2jyhn"": 4,
    ""WCYvQbrfk"": 1,
    ""DynGoX"": 1,
    ""vfzIKQ"": 1,
    ""ovZXmxRtw"": 1,
    ""tWBqvO"": 1,
    ""QGzYoK"": 1
  },
  ""keyboard"": {
    ""Unknown"": 189
  },
  ""client_build"": {
    ""Unknown"": 189
  },
  ""client_name"": {
    ""Unknown"": 189
  },
  ""ip_type"": {
    ""hosting"": 34,
    ""Unknown"": 136,
    ""hosting & proxy"": 11,
    ""proxy"": 1,
    ""mobile"": 7
  }
}"
buvn8LFq,Dijkstra Algorithm using Priority Queue,sachin-yadav,C++,Thursday 18th of April 2024 07:02:55 PM CDT,"#include<bits/stdc++.h>
// #include<iostream>
using namespace std;
typedef long long ll;
ll const INF=1e15;

void dijkstra(ll N, ll M, ll S, vector<pair<ll, ll>> adj_list[], vector<ll> &dist)
{
	// distance, node_id
	priority_queue<pair<ll,ll>, vector<pair<ll,ll>>, greater<pair<ll,ll>>> pq;
	dist[S] = 0;
	pq.push({0, S});
	while(! pq.empty())
	{
		pair<ll, ll> front_pair = pq.top();
		pq.pop();

		ll curr_dist = front_pair.first;
		ll curr_node = front_pair.second;

		for (auto &ed: adj_list[curr_node])
		{
			ll neigh_node = ed.first;
			ll neigh_dist = curr_dist + ed.second;
			
			if (dist[neigh_node] > neigh_dist)
			{
				dist[neigh_node] = neigh_dist;
				pq.push({dist[neigh_node], neigh_node});
			}
		}
	}
}



int main()
{
    ll T, N, M, S;
    cin >> T;
		while (T--){
			cin >> N >> M;
			vector<pair<ll, ll>> adj_list[N];
			for (ll i = 0; i < M; ++i)
			{
			ll x, y, dist;
			cin >> x >> y >> dist;
			adj_list[x-1].push_back({y-1, dist});
			adj_list[y-1].push_back({x-1, dist});
			}
		cin >> S;
		--S;
		vector<ll> dist(N + 1, INF);
		dijkstra(N, M, S, adj_list, dist);
		for(int i=0; i < N; ++i)
		{
			if (dist[i] >= INF) dist[i] = -1;		
			if (i != S)  cout << dist[i] << "" "";
		}
		cout << ""\n"";
    }
    return 0;
}"
i9PSU80W,jozuemarsh html brand,keeglo,HTML 5,Thursday 18th of April 2024 05:03:25 PM CDT,"<!--
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  |
| |                                                                                                                                                                                                                                                     | |
| |    JJJJJJJJJJJJJJJJJJ       JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ      JJJJJ       JJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJJJ         JJJJJJ      JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJ        JJJJJJJJJJJJJJJJJ      JJJJJJJ     JJJJJJJ    | |
| |    JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJ       JJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJ     JJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ             JJJJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJJ     JJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ            JJJJJJJJJJJ      JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJJJ   JJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ           JJJJJJJJJJJ       JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJJJJ JJJJJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ          JJJJJJJJJJJ        JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ         JJJJJJJJJJJ         JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJ          JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ        JJJJJJJJJJJ          JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJ JJJJJJJ JJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJ        JJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ       JJJJJJJJJJJ           JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJ  JJJJJ  JJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     JJJJJJJ    | |
| |                JJJJJJJ     JJJJJJJ     JJJJJJJ      JJJJJJJJJJJ            JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJ   JJJ   JJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     JJJJJJJ    | |
| |    JJJJ        JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJJJJJ             JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJ    J    JJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ                 JJJJJJJ     JJJJJJJ     JJJJJJJ    | |
| |    JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJJJJJJJJJJJJ      JJJJJJ         JJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJJJJJJJJJJJJJ     JJJJJJJ     JJJJJJJ    | |
| |     JJJJJJJJJJJJJJJJJ       JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJ      JJJJJJJJJJJJJJJJJJJ     JJJJJJ         JJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ     JJJJJJJ      JJJJJJJJJJJJJJJJJ      JJJJJJJ     JJJJJJJ    | |
| |                                                                                                                                                                                                                                                     | |
|  -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

author: https://about.me/jozuemarsh

-->"
gVtDxPC5,Untitled,toorr2p,PHP,Thursday 18th of April 2024 04:40:28 PM CDT,"<?php
namespace Itscript\Question;

use Bitrix\Main\UserTable;
use Bitrix\Main\Type\Date;
use Bitrix\Main\Type\DateTime;
use Bitrix\Main\Localization\Loc;
use Bitrix\Main\ORM\Fields\StringField;
use Bitrix\Main\ORM\Fields\IntegerField;
use Bitrix\Main\ORM\Fields\BooleanField;
use Bitrix\Main\ORM\Fields\DateField;
use Bitrix\Main\Entity\Validator\Length;
use Bitrix\Main\ORM\Fields\Relations\Reference;
use Bitrix\Main\ORM\Data\DataManager;
use Bitrix\Main\ORM\Query\Join;

class QuestionTable extends DataManager
{
	public static function getMap()
	{
		return [
			new IntegerField('ID', [
				'title' => 'ID',
				'primary' => true,
				'autocomplete' => true
            ]),

			new IntegerField('USER_ID', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_USER_ID'),
				'required' => true,
				'format' => '/^[0-9]{1,}$/',
            ]),

			(new Reference(
					'USER',
					UserTable::class,
					Join::on('this.USER_ID', 'ref.ID')
			))->configureJoinType('inner'),

			new IntegerField('ENTITY_ID', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_ENTITY_ID'),
				'required' => true,
				'format' => '/^[0-9]{1,}$/',
            ]),

            new BooleanField('ACTIVE', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_ACTIVE'),
                'values' => array('N', 'Y')
            ]),

			new StringField('URL', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_URL'),
                'required' => true,
				'size' => 1000,
				'validation' => function () {
					return [
						new Length(null, 1000),
					];
				},
            ]),

			new StringField('QUESTION', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_QUESTION'),
                'required' => true,
				'size' => 8000,
				'validation' => function () {
					return [
						new Length(null, 8000),
					];
				},
            ]),

			new DateField('PUBLISH_DATE', [
				'title' => Loc::getMessage('QUESTION_TABLE_TITLE_PUBLISH_DATE'),
				'default_value' => new DateTime
			])
        ];
	}
}"
jRjT4mzA,Untitled,toorr2p,PHP,Thursday 18th of April 2024 04:39:53 PM CDT,"<?php require_once($_SERVER[""DOCUMENT_ROOT""].""/bitrix/modules/main/include/prolog_admin_before.php"");

use Bitrix\Main;
use Bitrix\Main\Loader;
use Bitrix\Main\Localization\Loc; 
use Bitrix\Main\Config\Option;
use Bitrix\Main\Application;
use Itscript\Question\QuestionTable;
use Bitrix\Main\UI\PageNavigation;

$module_id = ""itscript.question"";

IncludeModuleLangFile(__FILE__);

// Check access
$FORM_RIGHT = $APPLICATION->GetGroupRight($module_id);
if($FORM_RIGHT<=""D"") $APPLICATION->AuthForm(Loc::getMessage(""ACCESS_DENIED""));

if(!Loader::includeModule($module_id)){
	CAdminMessage::ShowMessage(Loc::getMessage(""ITSCRIPT_QUESTION_INCLUDE_MODULE_ERROR"", ['#MODULE_ID#' => $module_id]));
}

require($_SERVER[""DOCUMENT_ROOT""].""/bitrix/modules/main/include/prolog_admin_after.php"");

CUtil::InitJSCore(array($module_id));

require_once($_SERVER[""DOCUMENT_ROOT""].""/bitrix/modules/main/include/prolog_admin_before.php"");
require_once(dirname(__FILE__).""/../include.php"");
require_once(dirname(__FILE__).""/../prolog.php"");

global $APPLICATION;

$adminListTableID = 'b_itscript_question';

$adminSort = new CAdminSorting($adminListTableID, 'ID', 'ASC');
$adminList = new CAdminUiList($adminListTableID, $adminSort);

$filterFields = array(
    array(
        ""id"" => ""ID"",
        ""name"" => 'ID',
        ""filterable"" => ""="",
        ""default"" => true
    ),
    array(
        ""id"" => """",
        ""name"" => Loc::getMessage(""ITSCRIPT_QUESTION_ENTITY_ID_ADMIN_FILTER""),
        ""type"" => ""int"",
        ""filterable"" => ""=""
    ),
);

$filter = array();

$adminList->AddFilter($filterFields, $filter);

if ($listID = $adminList->GroupAction()) {

    $action = $_REQUEST['action'];

    if (!empty($_REQUEST['action_button'])) {
        $action = $_REQUEST['action_button'];
    }

    $checkUseCoupons = ($action == 'delete');
    $discountList = array();

    if ($_REQUEST['action_target'] == 'selected') {
        $listID = array();
        $formIterator = QuestionTable::getList(array(
            'select' => array('ID'),
            'filter' => $filter
        ));
        while ($form = $formIterator->fetch()) {
            $listID[] = $form['ID'];
        }
        unset($form, $formIterator);
    }

    if ($adminList->IsGroupActionToAll()) {
        $arID = array();
        $formIterator = QuestionTable::getList(array(
            'select' => array('ID'),
            'filter' => $filter
        ));
        while ($arRes = $formIterator->fetch()) {
            $listID[] = $arRes['ID'];
        }
        unset($arRes, $rsData);
    }

    $listID = array_filter($listID);

    if (!empty($listID)) {
        switch ($action) {
            case 'delete':
                foreach ($listID as &$recordId) {
                    $result = QuestionTable::delete($recordId);
                    if (!$result->isSuccess()) {
                        $adminList->AddGroupError(implode('<br>', $result->getErrorMessages()), $recordId);
                    }
                    unset($result);
                }
                unset($recordId);
                break;
        }
    }
    unset($discountList, $action, $listID);

    if ($adminList->hasGroupErrors()) {
        $adminSidePanelHelper->sendJsonErrorResponse($adminList->getGroupErrors());
    } else {
        $adminSidePanelHelper->sendSuccessResponse();
    }
}

$headerList = array();
$headerList['ID'] = array(
    'id' => 'ID',
    'content' => 'ID',
    'sort' => 'ID',
    'default' => true
);
$headerList['PUBLISH_DATE'] = array(
    'id' => 'PUBLISH_DATE',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_PUBLISH_DATE'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_PUBLISH_DATE'),
    'sort' => 'CREATED',
    'default' => true
);
$headerList['QUESTION'] = array(
    'id' => 'QUESTION',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_QUESTION'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_QUESTION'),
    'sort' => 'QUESTION',
    'default' => false
);
$headerList['ACTIVE'] = array(
    'id' => 'ACTIVE',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ACTIVE'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ACTIVE'),
    'sort' => 'ACTIVE',
    'default' => false
);
$headerList['URL'] = array(
    'id' => 'URL',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_URL'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_URL'),
    'sort' => 'URL',
    'default' => true
);
$headerList['ENTITY_ID'] = array(
    'id' => 'ENTITY_ID',
    'content' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ENTITY_ID'),
    'title' => Loc::getMessage('ITSCRIPT_QUESTION_TITLE_ENTITY_ID'),
    'sort' => 'ENTITY_ID',
    'default' => true
);

$listHeader = array_keys($headerList);

$adminList->AddHeaders($headerList);

$selectFields = array_fill_keys($adminList->GetVisibleHeaderColumns(), true);
$selectFields['ID'] = true;
$selectFieldsMap = array_fill_keys(array_keys($headerList), false);
$selectFieldsMap = array_merge($selectFieldsMap, $selectFields);

if (!isset($by)) {
    $by = 'ID';
}
if (!isset($order)) {
    $order = 'ASC';
}

$rowList = array();
$usePageNavigation = true;
$navyParams = array();

$navyParams = \CDBResult::GetNavParams(CAdminUiResult::GetNavSize($adminListTableID));
if ($navyParams['SHOW_ALL']) {
    $usePageNavigation = false;
} else {
    $navyParams['PAGEN'] = (int)$navyParams['PAGEN'];
    $navyParams['SIZEN'] = (int)$navyParams['SIZEN'];
}

global $by, $order;

$getListParams = array(
    'select' => $selectFields,
    'filter' => $filter,
    'order' => array($by => $order)
);

if ($usePageNavigation) {
    $getListParams['limit'] = $navyParams['SIZEN'];
    $getListParams['offset'] = $navyParams['SIZEN'] * ($navyParams['PAGEN'] - 1);
}
$totalPages = 0;
if ($usePageNavigation) {
    $totalCount = QuestionTable::getCount($getListParams['filter']);
    if ($totalCount > 0) {
        $totalPages = ceil($totalCount / $navyParams['SIZEN']);
        if ($navyParams['PAGEN'] > $totalPages)
            $navyParams['PAGEN'] = $totalPages;
        $getListParams['limit'] = $navyParams['SIZEN'];
        $getListParams['offset'] = $navyParams['SIZEN'] * ($navyParams['PAGEN'] - 1);
    } else {
        $navyParams['PAGEN'] = 1;
        $getListParams['limit'] = $navyParams['SIZEN'];
        $getListParams['offset'] = 0;
    }
}

$getListParams['select'] = array_keys($getListParams['select']);

echo '<pre>';
print_r([
    $totalCount,
    $navyParams,
    $selectFieldsMap,
    $adminListTableID,
    'getListParams' => $getListParams,
    LANGUAGE_ID
]);
//print_r([$getListParams, $adminListTableID]);
echo '</pre>';


$formIterator = new CAdminUiResult(QuestionTable::getList($getListParams), $adminListTableID);
if ($usePageNavigation) {
    $formIterator->NavStart($getListParams['limit'], $navyParams['SHOW_ALL'], $navyParams['PAGEN']);
    $formIterator->NavRecordCount = $totalCount;
    $formIterator->NavPageCount = $totalPages;
    $formIterator->NavPageNomer = $navyParams['PAGEN'];
} else {
    $formIterator->NavStart();
}
$onlyDel = false;
$yesNo = [
    Loc::getMessage(""ITSCRIPT_QUESTION_TITLE_NO""),
    Loc::getMessage(""ITSCRIPT_QUESTION_TITLE_YES""),
];
CTimeZone::Disable();
$adminList->SetNavigationParams($formIterator, array(""BASE_LINK"" => $selfFolderUrl . ""itscript_question_list.php""));
while($form = $formIterator->fetch()) {
    $result[]=$form;
}
$prm['SELECT'] = $getListParams['select'];
//TenderComp::reflection($result, $prm);

foreach($result as $form)
{
    $form['ID'] = (int)$form['ID'];
    $urlEdit = $selfFolderUrl . 'itscript_question_edit.php?ID=' . $form['ID'] . '&lang=' . LANGUAGE_ID;
    $urlEdit = $adminSidePanelHelper->editUrlToPublicPage($urlEdit);

    $rowList[$form['ID']] = $row = &$adminList->AddRow(
        $form['ID'],
        $form,
        $urlEdit,
        Loc::getMessage(""ITSCRIPT_QUESTION_EDIT"")
    );

    if ($onlyDel) {
        $row->AddViewField('ID', $form['ID']);
    } else {
        $row->AddViewField('ID', '<a href=""' . $urlEdit . '"">' . $form['ID'] . '</a>');
    }

    if ($selectFieldsMap['URL']) {
        $row->AddViewField('URL', '<a href=""' . $form['URL'] . '"">' . $form['URL'] . '</a>');
    }

    if ($selectFieldsMap['QUESTION']) {
        $row->AddViewField('QUESTION', $form['QUESTION']);
    }
    
    if ($selectFieldsMap['PUBLISH_DATE']) {
        $row->AddViewField('PUBLISH_DATE', $form['PUBLISH_DATE']->format('d.m.Y H:i:s'));
    }

    if ($selectFieldsMap['ACTIVE']) {
        $row->AddViewField('ACTIVE', $yesNo[$form['ACTIVE']]);
    }

    $actions = array();
    if (!$onlyDel) {
        $actions[] = array(
            'ICON' => 'edit',
            'TEXT' => Loc::getMessage(""ITSCRIPT_QUESTION_EDIT""),
            'LINK' => $urlEdit,
            'DEFAULT' => true
        );
    }
    if (!$readOnly) {
        $actions[] = array(
            'ICON' => 'delete',
            'TEXT' => Loc::getMessage(""ITSCRIPT_QUESTION_DELETE""),
            'ACTION' => ""if (confirm('"" . Loc::getMessage(""ITSCRIPT_QUESTION_DELETE_ALERT"") . ""')) "" . $adminList->ActionDoGroup($form['ID'], 'delete')
        );
    }
    $row->AddActions($actions);
    unset($actions, $row);
}
CTimeZone::Enable();

$adminList->AddGroupActionTable([
    'delete' => true,
    'for_all'=>true,

]);

$contextMenu = array();

if (!$readOnly) {
    $addUrl = $selfFolderUrl . ""itscript_question_edit.php?lang="" . LANGUAGE_ID;
    $addUrl = $adminSidePanelHelper->editUrlToPublicPage($addUrl);
    $contextMenu[] = array(
        'ICON' => 'btn_new',
        'TEXT' => Loc::getMessage('ITSCRIPT_QUESTION_ADD'),
        'TITLE' => Loc::getMessage('ITSCRIPT_QUESTION_ADD'),
        'LINK' => $addUrl
    );
}

if (!empty($contextMenu)) {
    $adminList->setContextSettings(array(""pagePath"" => $selfFolderUrl . ""itscript_question_list.php""));
    $adminList->AddAdminContextMenu($contextMenu);
}


$adminList->CheckListMode();

$APPLICATION->SetTitle(Loc::getMessage(""ITSCRIPT_QUESTION_PAGE_TITLE""));

$adminList->DisplayFilter($filterFields);
$adminList->DisplayList();

require($_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/epilog_admin.php');
"
14w9p83k,R88_ESLify.bat Both SSEedit and auto launch SSE,Lart_Iste,Batch,Thursday 18th of April 2024 04:34:52 PM CDT,"@echo off
chcp 65001 > nul 2>&1
setlocal EnableExtensions EnableDelayedExpansion

set hasSSEEdit=0
set hasXEdit=0
set hasAnyEdit=1
set hasESLifyScript=0
set hasMXPF==0
set hasMTEFunctions==0
set ""pathSSEEdit404=%CD%\SSEEdit404.exe""
set ""pathSSEEdit=%CD%\SSEEdit.exe""

IF EXIST ""SSEEdit404.exe"" set hasSSEEdit=1
IF NOT EXIST ""SSEEdit404.exe"" set hasAnyEdit=0
IF EXIST ""Edit Scripts\R88_ESLify.pas"" set hasESLifyScript=1
IF EXIST ""Edit Scripts\lib\mxpf.pas"" set hasMXPF=1
IF EXIST ""Edit Scripts\lib\mteFunctions.pas"" set hasMTEFunctions=1

echo :
echo :
echo ::: ""Ruddy88's ESLify Utility"" :::
echo ::: ""Utilitaire ESLify de Ruddy88"" :::
echo :
echo :
echo ::: Checking for required files :::
echo ::: V√©rification des fichiers requis :::
echo :
echo :

for /f ""delims="" %%v in ('powershell ""(Get-Item '%pathSSEEdit404%' -ErrorAction SilentlyContinue).VersionInfo.ProductVersion""') do (
    set ""verSSEEdit404=[1;34m%%v[0m""
)
for /f ""delims="" %%v in ('powershell ""(Get-Item '%pathSSEEdit%' -ErrorAction SilentlyContinue).VersionInfo.ProductVersion""') do (
    set ""verSSEEdit=[1;34m%%v[0m""
)

echo %verSSEEdit404%
if not defined verSSEEdit404 (
	echo :::  Unable to retrieve SSEEdit version, rename SSEedit.exe 4.0.4 to SSEedit404.exe and place it in %pathSSEEdit% with the other binaries.
	echo :::  Impossible de r√©cup√©rer la version de SSEEdit, renommer SSEedit.exe 4.0.4 en SSEedit404.exe et placez le dans %pathSSEEdit% avec les autres binaires.
	pause
) else (
    if ""%verSSEEdit404%"" neq ""4.0.4.0"" (
		goto :launch
    ) else (
		echo :::  Wrong version of SSEEdit, rename SSEedit.exe 4.0.4 to SSEedit404.exe and place it in %pathSSEEdit% with the other binaries.
		echo :::  Mauvaise version de SSEEdit, renommer SSEedit.exe 4.0.4 en SSEedit404.exe et placez le dans %pathSSEEdit% avec les autres binaires.
		pause
    )
)

IF %hasSSEEdit%==1 (
		echo ::: SSEEdit found
		echo ::: SSEEdit trouv√©
)
IF %hasAnyEdit%==0 (
		echo ::: WARNING: XEdit/SSEEdit404.exe not found
		echo ::: Avertissement: XEdit/SSEEdit404.exe introuvable
)

IF %hasESLifyScript%==1 (
    echo ::: R88_ESLify.pas found
) ELSE (
    echo ::: WARNING: R88_ESLify.pas not found
    echo ::: Avertissement: R88_ESLify.pas introuvable
)

IF %hasMXPF%==1 (
    echo ::: mxpf.pas found
) ELSE (
    echo ::: WARNING: mxpf.pas not found
    echo ::: Avertissement: mxpf.pas introuvable
)

IF %hasMTEFunctions%==1 (
    echo ::: mteFunctions.pas found
) ELSE (
    echo ::: WARNING: mteFunctions.pas not found
    echo ::: Avertissement: mteFunctions.pas introuvable
)

IF %hasAnyEdit%==1 IF %hasESLifyScript%==1 IF %hasMXPF%==1 IF %hasMTEFunctions%==1 set hasRequiredFiles=1
IF %hasRequiredFiles%==1 (
    echo :
    echo :
    echo ::: All required files installed.
    echo ::: Tous les fichiers requis install√©s.
		echo :
		echo :
		%game%
) ELSE (
    echo :
    echo :
    echo ::: Required files not found. Terminating process.echo
    echo ::: Fichiers requis introuvables. Terminer le processus.
    echo :
    echo :
    pause
    exit
)

:runPatchSSE
echo :
echo :
echo ::: Skyrim SE auto selected...
echo ::: Skyrim SE auto sel√©ctionn√©...
echo :
echo :
echo ::: Launching ESLify script...
echo ::: Lancement du script ESLify ...
echo :
echo :
IF %hasSSEEdit%==1 (
start SSEEdit404.exe -nobuildrefs -autoload -pseudoESL -script:""R88_ESLify.pas""
) ELSE (
    echo :
    echo :
    echo ::: Unexpected Error. Terminating process.
    echo ::: Erreur inattendue. Terminer le processus.
    echo :
    echo :
    pause
    exit
)
goto :exitPatch

:exitPatch
endlocal
exit"
DwJqZ9is,startup,ale_ben,Lua,Thursday 18th of April 2024 03:46:27 PM CDT,"local controller_id = """"

if fs.exists(""controller"") then
    shell.run(""controller"")
else
    shell.run(""pastebin get "" .. controller_id .. "" controller"")
    os.reboot()
end"
GLXACx8N,MQTT-induction,ale_ben,Lua,Thursday 18th of April 2024 03:37:37 PM CDT,"local mqtt = require(""mqtt"")

local induction = peripheral.wrap(""bottom"")

if induction == nil or induction.isFormed() == false then
    print(""Unable to find induction. Restarting in 5"")
    os.sleep(5)
    os.reboot()
end

local keep_alive = 60
local baseTopic = ""/ftbUniversity19/ITLandfill/fission/induction/""
local refresh = 10

local connected = false

-- create mqtt client
local client = mqtt.client {
    -- NOTE: this broker is not working sometimes; comment username = ""..."" below if you still want to use it
    uri = ""ws://test.mosquitto.org:8080"",
    clean = true,
    keep_alive = keep_alive
}

print(""created MQTT client"", client)

client:on {
    connect = function(connack)
        if connack.rc ~= 0 then
            print(""connection to broker failed:"", connack:reason_string(), connack)
            return
        end
        print(""connected:"", connack) -- successful connection
        connected = true      
        -- subscribe to test topic and publish message after it
        assert(client:subscribe { topic = ""/hfdghwl/#"", qos = 1, callback = function(suback)
            print(""subscribed:"", suback)

        end })
    end,

    message = function(msg)
        assert(client:acknowledge(msg))

        print(""received:"", msg)

        if msg.payload == ""disconnect"" then
            print(""disconnecting..."")
            assert(client:disconnect())
        end
    end,

    error = function(err)
        print(""MQTT client error:"", err)
    end,

    close = function()
        print(""MQTT conn closed"")
    end
}

function sendMessage(topic, message, retain)
    if connected then    
        assert(client:publish {
            topic = baseTopic..topic,
            payload = message,
            retain = retain
        })
    else
        print(""Not connected"")
    end    
end

function sendUpdate() 
    sendMessage(""sensor/energy"", tostring(induction.getEnergyFilledPercentage()), false)
    sendMessage(""sensor/cells/induction"", tostring(induction.getInstalledCells()), false)
    sendMessage(""sensor/cells/provider"", tostring(induction.getInstalledProviders()), false)  
    sendMessage(""sensor/lastInput"", tostring(induction.getLastInput()), false)  
    sendMessage(""sensor/lastOutput"", tostring(induction.getLastOutput()), false)
end

parallel.waitForAny(
    function()
        -- run io loop for client until connection close
        -- please note that in sync mode background PINGREQ's are not available, and automatic reconnects too
        print(""running client in synchronous input/output loop"")
        mqtt.run_sync(client)
        print(""done, synchronous input/output loop is stopped"")
    end,
    function()
        while true do
            os.sleep(keep_alive)
            client:send_pingreq()
        end
    end,
    function()
        while true do
            os.sleep(refresh)
            if (pcall(sendUpdate) == false) then
                print(""Error updating. Restarting in 5"")
                os.sleep(5)
                os.reboot()
            end
        end
    end
)"
