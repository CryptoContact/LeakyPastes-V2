id,title,username,language,date,content
FTKSE29J,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🤑,jusst2k4,GetText,Monday 27th of May 2024 07:15:43 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_585292.pdf

Working as of:
28 May 2024"
PQfKRVpc,2024-05-27_stats.json,rdp_snitch,JSON,Monday 27th of May 2024 07:15:08 PM CDT,"{
  ""ip"": {
    ""185.198.69.10"": 12,
    ""185.198.69.12"": 4,
    ""194.165.16.76"": 4,
    ""167.94.145.98"": 1,
    ""185.190.24.54"": 1,
    ""152.42.249.196"": 54,
    ""185.122.204.169"": 1,
    ""205.210.31.221"": 3,
    ""134.209.188.55"": 3,
    ""103.120.19.19"": 1,
    ""206.189.32.215"": 1,
    ""212.70.149.142"": 4,
    ""123.56.20.194"": 4,
    ""167.94.138.43"": 1,
    ""185.198.69.20"": 8,
    ""87.251.75.145"": 1,
    ""185.170.144.3"": 2,
    ""128.199.141.142"": 24,
    ""117.16.46.253"": 2,
    ""198.235.24.71"": 3,
    ""36.91.222.100"": 2,
    ""185.198.69.23"": 4,
    ""64.124.50.139"": 2,
    ""194.165.16.72"": 2,
    ""194.165.16.73"": 2,
    ""152.32.235.206"": 1,
    ""185.198.69.25"": 5,
    ""103.75.186.158"": 2,
    ""135.148.92.235"": 1,
    ""103.120.18.192"": 6,
    ""213.109.202.235"": 2,
    ""185.198.69.22"": 7,
    ""185.198.69.30"": 7,
    ""185.198.69.21"": 3,
    ""185.198.69.19"": 3,
    ""120.27.142.130"": 1,
    ""185.113.141.141"": 155,
    ""185.198.69.18"": 7,
    ""185.198.69.26"": 4,
    ""45.227.254.55"": 2,
    ""156.146.59.101"": 4,
    ""205.210.31.20"": 3,
    ""185.198.69.27"": 4,
    ""185.198.69.17"": 6,
    ""187.157.89.218"": 1,
    ""185.198.69.31"": 3,
    ""185.198.69.2"": 1,
    ""185.198.69.24"": 2,
    ""1.55.55.178"": 1,
    ""185.198.69.28"": 3,
    ""118.193.56.149"": 1,
    ""185.198.69.8"": 2,
    ""185.198.69.29"": 2,
    ""185.198.69.4"": 2,
    ""167.94.145.111"": 1,
    ""185.198.69.7"": 1,
    ""176.113.115.58"": 1,
    ""205.210.31.213"": 3,
    ""185.198.69.14"": 1,
    ""116.140.196.215"": 1,
    ""185.198.69.9"": 1,
    ""111.10.209.99"": 1
  },
  ""asn"": {
    ""AS57523"": 93,
    ""AS48721"": 8,
    ""AS398705"": 2,
    ""AS211632"": 1,
    ""AS14061"": 82,
    ""AS396982"": 12,
    ""AS131939"": 7,
    ""AS204428"": 4,
    ""AS37963"": 5,
    ""AS398324"": 1,
    ""AS208091"": 1,
    ""AS197414"": 2,
    ""AS18031"": 2,
    ""AS7713"": 2,
    ""AS6461"": 2,
    ""AS135377"": 2,
    ""AS135905"": 2,
    ""AS16276"": 1,
    ""AS208312"": 2,
    ""AS204094"": 155,
    ""AS267784"": 2,
    ""AS60068"": 4,
    ""AS8151"": 1,
    ""AS18403"": 1,
    ""AS57678"": 1,
    ""AS4837"": 1,
    ""AS9808"": 1
  },
  ""isp"": {
    ""Chang Way Technologies Co. Limited"": 93,
    ""Flyservers S.A."": 10,
    ""Censys, Inc."": 3,
    ""Internet Solutions & Innovations LTD."": 1,
    ""DigitalOcean, LLC"": 82,
    ""Google LLC"": 12,
    ""IPS INC"": 7,
    ""SS-Net"": 4,
    ""Hangzhou Alibaba Advertising Co"": 4,
    ""Xhost Internet Solutions LP"": 3,
    ""Sangmyung University"": 2,
    ""PT Telekomunikasi Indonesia"": 2,
    ""Zayo Bandwidth"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""Inet software one member company limited"": 2,
    ""OVH SAS"": 1,
    ""Red Byte LLC"": 2,
    ""Addresses CNNIC"": 1,
    ""I4W - Web Solutions"": 155,
    ""DataCamp Limited"": 4,
    ""Uninet S.A. de C.V."": 1,
    ""FPT Telecom Company"": 1,
    ""Cat Technologies Co. Limited"": 1,
    ""China Unicom CHINA169 Network"": 1,
    ""China Mobile communications corporation"": 1
  },
  ""org"": {
    ""Chang Way Technologies Co. Limited"": 94,
    ""Flyservers S.A"": 8,
    ""Censys, Inc."": 2,
    ""Tribeka Web Advisors S.A"": 1,
    ""DigitalOcean, LLC"": 82,
    ""Starcrecium Limited"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""IPS Inc"": 7,
    ""4Media Ltd"": 4,
    ""Aliyun Computing Co., LTD"": 5,
    ""Censys, Inc"": 1,
    ""Xhost Internet Solutions"": 1,
    ""Xhostis"": 2,
    ""Korean Education Network"": 2,
    ""Telekomunikasi Indonesia"": 2,
    ""Microsoft Corporation"": 2,
    ""Ucloud Information Technology"": 1,
    ""Inet software one member company limited"": 2,
    ""OVH US LLC"": 1,
    ""I4W - Web Solutions, Lda"": 155,
    ""UAB Host Baltic"": 2,
    ""Cdn77 NYC"": 4,
    ""Uninet S.A. de C.V."": 1,
    ""Vietnam Internet Network Information Center"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Cat Technologies Co. Limited"": 1,
    ""China United Network Communications Corporation Limited"": 1,
    ""China Mobile"": 1
  },
  ""regionName"": {
    ""Moscow"": 96,
    ""Kaunas"": 8,
    ""Hesse"": 2,
    ""Mariehamns stad"": 1,
    ""South West"": 79,
    ""California"": 13,
    ""England"": 3,
    ""Tokyo"": 7,
    ""Plovdiv"": 4,
    ""Beijing"": 5,
    ""Michigan"": 1,
    ""North Holland"": 3,
    ""Seoul"": 2,
    ""Jakarta"": 2,
    ""Washington"": 2,
    ""Hanoi"": 2,
    ""Virginia"": 1,
    ""Zhejiang"": 1,
    ""Lisbon"": 155,
    ""Vilnius"": 2,
    ""New York"": 4,
    ""Mexico City"": 1,
    ""B\u1eafc Ninh Province"": 1,
    ""Bangkok"": 1,
    ""Guangdong"": 1
  },
  ""country"": {
    ""Russia"": 96,
    ""Lithuania"": 10,
    ""Germany"": 2,
    ""Aland Islands"": 1,
    ""Singapore"": 79,
    ""United States"": 21,
    ""United Kingdom"": 3,
    ""Japan"": 7,
    ""Bulgaria"": 4,
    ""China"": 7,
    ""The Netherlands"": 3,
    ""South Korea"": 2,
    ""Indonesia"": 2,
    ""Vietnam"": 3,
    ""Portugal"": 155,
    ""Mexico"": 1,
    ""Thailand"": 1
  },
  ""account"": {
    ""Administr"": 101,
    ""Test"": 16,
    ""(empty)"": 7,
    ""hello"": 257,
    ""iEcScDZvd"": 1,
    ""VwrCAN"": 1,
    ""oAXKxD"": 1,
    ""lHcoHjzUk"": 1,
    ""ljxnKS"": 1,
    ""RjxbWJ"": 1,
    ""Administrator"": 2,
    ""Domain"": 2,
    ""WzQHBwPeT"": 1,
    ""xrSxZp"": 1,
    ""xQpZel"": 1,
    ""JrRyUVHYe"": 1,
    ""Myjzak"": 1,
    ""FSYcYc"": 1
  },
  ""keyboard"": {
    ""Unknown"": 397
  },
  ""client_build"": {
    ""Unknown"": 397
  },
  ""client_name"": {
    ""Unknown"": 397
  },
  ""ip_type"": {
    ""proxy"": 99,
    ""Unknown"": 191,
    ""hosting"": 102,
    ""hosting & proxy"": 4,
    ""mobile"": 1
  }
}"
3bb8TYWb,Untitled,jargon,JavaScript,Monday 27th of May 2024 07:13:56 PM CDT,"
class spriteManip {

    constructor() {}

	function subSprite(element,style){
		let spriteW = 8;
		let spriteH = 8;
		
		let tokens = style.split(' ');
		
		let xPos = 0;
		let yPos = 0;
		
		let x = str.split(tokens[0],'px')[0].toLowerCase;
		let y = str.split(tokens[1],'px')[0].toLowerCase;
		
		xx = ['left','right','center'].indexOf(x);
		yy = ['top','bottom','middle'].indexOf(y);
		
		if((xx === -1) && (yy === -1))
		{[x,y]=[y,x];}
		
		xx = ['left','right','center'].indexOf(x);
		yy = ['top','bottom','middle'].indexOf(y);
		
		if((xx === -1) && (yy === -1))
		{return 0;}
		
	    // Determine the x position in the sprite sheet
	    if (x === 'left') {
	        xPos = spriteW * 0;
	    } else if (x === 'right') {
	        xPos = spriteW * 2;
	    } else if (x === 'center') {
	        xPos = spriteW * 1;
	    }
	
	    // Determine the y position in the sprite sheet
	    if (y === 'top') {
	        yPos = spriteH * 0;
	    } else if (y === 'bottom') {
	        yPos = spriteH * 2;
	    } else if (y === 'middle') {
	        yPos = spriteH * 1;
	    }
		
	    // Set the background position of the element
	    element.style.backgroundPosition = `${xPos}px ${yPos}px`;
		
	}
	
}"
LejV46Ya,F1 ELO,ram_nikash,Python,Monday 27th of May 2024 07:11:17 PM CDT,"import pandas as pd
import math

def calculate_elo(player_elo,  opponent_elo, score, position, diff, k=32):
    '''
    Calculate the new ELO rating for a player.

    Args:
        player_elo (int): The current ELO rating of the player.
        opponent_elo (int): The current ELO rating of the opponent.
        score (int): The result of the head-to-head matchup (1 for win, 0 for loss, 0.5 for draw).
        position (int): The overall finishing position of the player.
        position_diff (int): The difference in position between the player and the opponent.
        k (int): The k-factor, which determines the maximum adjustment per game.
    
    Returns:
        int: The new ELO rating for the player.  
    '''
    #Adjust ELO based on teammates position
    expected_score=1/(1+10**((opponent_elo-player_elo)/400))
    new_elo=player_elo+k*(score-expected_score)+k*(diff-expected_score)
    ##print(new_elo)
    
    # Adjust ELO based on overall finishing position
    if position!=0:
        position_factor=1/(1+10**((position-1)/10))
        new_elo+=k*position_factor
        ##print(new_elo)
        ##print(position_factor)
    else:
        position_factor=1/(1+10**((position-1)/10))
        new_elo-=k*position_factor
        ##print(new_elo)
    ##print(position_factor)
    
    ##print(new_elo)
    
    return int(new_elo)

results=pd.read_csv('Results.csv') # Read csv
drivers=results.iloc[:,0].unique() # Storing driver names (from column 1) to drivers in NumPy array
##print(drivers)
elo_ratings={driver: 1000 for driver in drivers} # Sets default value to 1000 for each driver
##print(elo_ratings)

for i in range(results.shape[1]-1): # Every column (GP) from i=0 to final row-1
    ##print(i)
    ##print(results.shape[1]-1)
    race_results=results.iloc[:, [0, i+1]].dropna() # Selects driver names and the i GP finish position
    print(race_results)
    for j in range(0, len(race_results), 2): # Takes each row with increments of 2
        ##print(j)
        ##print(len(race_results))
        driver1=race_results.iloc[j, 0] # Driver 1 name
        driver2=race_results.iloc[j+1, 0] # Driver 2 name
        result1=race_results.iloc[j, 1] # Driver 2 result
        ##print(driver1, result1)
        result2=race_results.iloc[j+1, 1] # Driver 2 result
        ##print(driver2, result2)
                
        if result1==0 and result2==0: # Both DNF
            score1, score2=0
        elif result1==0:
             score1, score2=0, 1
        elif result2==0:
            score1, score2=1, 0
        else:
            if result1<result2:
                score1, score2=1, 0
                ##diff=result2-result1 # Driver position differnce
            elif result1>result2:
                score1, score2=0, 1
                ##diff=result1-result2 # Driver position differnce
            else:
                score1, score2=0.5, 0.5
                ##diff=abs(result1-result2) # Driver position differnce

        if result1==0 and result2==0:
            diff1, diff2=0, 0
        elif result1==0:
            diff1, diff2=0, 1
        elif result2==0:
            diff1, diff2=1, 0
        elif result1<result2:
            diff1=0.5+((result2-result1)/20)*1
            diff2=0.5-((result2-result1)/20)*1
        elif result1>result2:
            diff2=0.5+((result2-result1)/20)*1
            diff1=0.5-((result2-result1)/20)*1
            
        temp=elo_ratings[driver1]
        ##print(temp)
        elo_ratings[driver1]=calculate_elo(elo_ratings[driver1], elo_ratings[driver2], score1, result1, diff1)
        print(driver1, result1, elo_ratings[driver1])
        elo_ratings[driver2]=calculate_elo(elo_ratings[driver2], temp, score2, result2, diff2)
        print(driver2, result2, elo_ratings[driver2])
            
elo_df=pd.DataFrame.from_dict(elo_ratings, orient='index', columns=['ELO'])
elo_df=elo_df.sort_values(by='ELO', ascending=False)
elo_df.to_csv('FINAL ELO.csv', index_label='Driver')"
Gsy0jW47,🤑 G2A.com Free Gift Card Guide May 2024 FIX 🎁,ssss50w,GetText,Monday 27th of May 2024 07:04:54 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
28 May 2024"
mf33c4xg,Untitled,jargon,JavaScript,Monday 27th of May 2024 06:51:11 PM CDT,"
class spriteManip {

    constructor() {}

	function subSprite(element,style){
		let spriteW = 8;
		let spriteH = 8;
		
		let tokens = style.split(' ');
		
		let xPos = 0;
		let yPos = 0;
		
		let x = str.split(tokens,'px')[0];
		let y = str.split(tokens,'px')[0];
		
		xx = ['left','right','center'].indexOf(x);
		yy = ['top','bottom','middle'].indexOf(y);
		
		if((xx === -1) && (yy === -1))
		{[x,y]=[y,x];}
		
		xx = ['left','right','center'].indexOf(x);
		yy = ['top','bottom','middle'].indexOf(y);
		
		if((xx === -1) && (yy === -1))
		{return 0;}
		
	    // Determine the x position in the sprite sheet
	    if (x === 'left') {
	        xPos = spriteW * 0;
	    } else if (x === 'right') {
	        xPos = spriteW * 2;
	    } else if (x === 'center') {
	        xPos = spriteW * 1;
	    }
	
	    // Determine the y position in the sprite sheet
	    if (y === 'top') {
	        yPos = spriteH * 0;
	    } else if (y === 'bottom') {
	        yPos = spriteH * 2;
	    } else if (y === 'middle') {
	        yPos = spriteH * 1;
	    }
		
	    // Set the background position of the element
	    element.style.backgroundPosition = `${xPos}px ${yPos}px`;
		
	}
	
}"
UQ2fPPm8,Untitled,bldng1,Lua,Monday 27th of May 2024 06:45:48 PM CDT,"function reactorSearch()
   local names = peripheral.getNames()
   local i, name
   for i, name in pairs(names) do
      if peripheral.getType(name) == ""BiggerReactors_Reactor"" then
         return peripheral.wrap(name)
      else
         --return null
      end
   end
end
function monitorSearch()
   local names = peripheral.getNames()
   local i, name
   for i, name in pairs(names) do
      if peripheral.getType(name) == ""monitor"" then
        test = name
         return peripheral.wrap(name)
      else
         --return null
      end
   end
end
m=monitorSearch()
reactor=reactorSearch()
function clear()
   m.setBackgroundColor(colors.black)
   m.clear()
   m.setCursorPos(1,1)
 end
  
 --display text on computer's terminal screen
 function draw_text_term(x, y, text, text_color, bg_color)
   term.setTextColor(text_color)
   term.setBackgroundColor(bg_color)
   term.setCursorPos(x,y)
   write(text)
 end
  
 --display text text on monitor, ""mon"" peripheral
 function draw_text(x, y, text, text_color, bg_color)
   m.setBackgroundColor(bg_color)
   m.setTextColor(text_color)
   m.setCursorPos(x,y)
   m.write(text)
 end
  
 --draw line on computer terminal
 function draw_line(x, y, length, color)
   m.setBackgroundColor(color)
   m.setCursorPos(x,y)
   m.write(string.rep("" "", length))
 end
  
 --draw line on computer terminal
 function draw_line_term(x, y, length, color)
     term.setBackgroundColor(color)
     term.setCursorPos(x,y)
     term.write(string.rep("" "", length))
 end
  
 --create progress bar
 --draws two overlapping lines
 --background line of bg_color 
 --main line of bar_color as a percentage of minVal/maxVal
 function progress_bar(x, y, length, minVal, maxVal, bar_color, bg_color)
   draw_line(x, y, length, bg_color) --backgoround bar
   local barSize = math.floor((minVal/maxVal) * length) 
   draw_line(x, y, barSize, bar_color) --progress so far
 end
  
 --same as above but on the computer terminal
 function progress_bar_term(x, y, length, minVal, maxVal, bar_color, bg_color)
   draw_line_term(x, y, length, bg_color) --backgoround bar
   local barSize = math.floor((minVal/maxVal) * length) 
   draw_line_term(x, y, barSize, bar_color)  --progress so far
 end
  
 --create button on monitor
 function button(x, y, length, text, txt_color, bg_color)
   draw_line(x, y, length, bg_color)
   draw_text((x+2), y, text, txt_color, bg_color)
 end

function getEnergy()
   if reactor.battery() ~= null then
      return reactor.battery().stored()/reactor.battery().capacity()
   end
   return 0
end

function setControlrod(p)
   reactor.setAllControlRodLevels(p)
end
function getControlrod()
   return reactor.getControlRod(0).level()
end
function producing()
   return reactor.battery().producedLastTick();
end
function fuel()
   reactor.fuelTank().burnedLastTick()
end
clear()
while true do
   --clear()
   local reactoron=getEnergy()*getEnergy()
   setControlrod(reactoron*100)
   local reactorstate=reactoron<1;
   reactor.setActive(reactorstate)
   draw_text(3,3,""Reactor Control"",colors.yellow,colors.black)
   if reactor.active() then
      draw_text(3,4,""Status: ONLINE"",colors.green, colors.black)
   else
      draw_text(3,4,""Status: OFFLINE"",colors.red, colors.black)
   end
   draw_text(3,5,""Current Energy:"",colors.white, colors.black)
   progress_bar(3,6,20,getEnergy()*100,100,colors.green, colors.white)
   draw_text(23,6,(getEnergy()*100).."""",colors.white, colors.black)
   draw_text(3,7,""ControlRods:"",colors.white, colors.black)
   progress_bar(3,8,20,getControlrod(),100,colors.yellow, colors.white)
   draw_text(23,8,getControlrod().."""",colors.white, colors.black)
   
   sleep(0.5)
end
"
R0BqUsGE,💰G2A.com Free Gift Card Guide May 2024🔥,Alfonso1119,Python,Monday 27th of May 2024 06:32:47 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_7577703.pdf

Working as of:

28 May 2024"
ipD38wUy,Untitled,dereksir,Bash,Monday 27th of May 2024 06:32:26 PM CDT,"""headers"": {
    ""Accept"": [
      ""text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7""
    ],
    ""Accept-Encoding"": [
      ""gzip, deflate, br""
    ],
    ""Connection"": [
      ""keep-alive""
    ],
    ""Host"": [
      ""httpbin.io""
    ],
    ""Sec-Ch-Ua"": [
      ""\""Chromium\"";v=\""122\"", \""Not(A:Brand\"";v=\""24\"", \""HeadlessChrome\"";v=\""122\""""
    ],
    ""Sec-Ch-Ua-Mobile"": [
      ""?0""
    ],
    ""Sec-Ch-Ua-Platform"": [
      ""\""Windows\""""
    ],
    ""Sec-Fetch-Dest"": [
      ""document""
    ],
    ""Sec-Fetch-Mode"": [
      ""navigate""
    ],
    ""Sec-Fetch-Site"": [
      ""none""
    ],
    ""Sec-Fetch-User"": [
      ""?1""
    ],
    ""Upgrade-Insecure-Requests"": [
      ""1""
    ],
    ""User-Agent"": [
      ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/122.0.6261.95 Safari/537.36""
    ]
  }
}"
M1gYMt9m,"""LCD Keypresses"" rev_01",pleasedontcode,Arduino,Monday 27th of May 2024 06:16:49 PM CDT,"/********* Pleasedontcode.com **********

	Pleasedontcode thanks you for automatic code generation! Enjoy your code!

	- Terms and Conditions:
	You have a non-exclusive, revocable, worldwide, royalty-free license
	for personal and commercial use. Attribution is optional; modifications
	are allowed, but you're responsible for code maintenance. We're not
	liable for any loss or damage. For full terms,
	please visit pleasedontcode.com/termsandconditions.

	- Project: ""LCD Keypresses""
	- Source Code NOT compiled for: ESP32 DevKit V1
	- Source Code created on: 2024-05-27 23:15:56

********* Pleasedontcode.com **********/

/****** SYSTEM REQUIREMENTS *****/
/****** SYSTEM REQUIREMENT 1 *****/
	/* Create a system to interface an Arduino with an */
	/* LCD1602 display using the LiquidCrystal library. */
	/* Configure digital output pins (D4, D13, D14, D16, */
	/* D17, D18) for LCD control and ensure real-time */
	/* updates of key press data on the screen. */
/****** SYSTEM REQUIREMENT 2 *****/
	/* code will emulate a keyboard stroke and send it to */
	/* pc as keyboard click */
/****** END SYSTEM REQUIREMENTS *****/

/****** DEFINITION OF LIBRARIES *****/
#include <LiquidCrystal.h>
#include <Keyboard.h>

/****** FUNCTION PROTOTYPES *****/
void setup(void);
void loop(void);

/***** DEFINITION OF DIGITAL OUTPUT PINS *****/
const uint8_t mylcd_LCD1602_RS_PIN_D4 = 4;
const uint8_t mylcd_LCD1602_E_PIN_D13 = 13;
const uint8_t mylcd_LCD1602_D4_PIN_D14 = 14;
const uint8_t mylcd_LCD1602_D5_PIN_D16 = 16;
const uint8_t mylcd_LCD1602_D6_PIN_D17 = 17;
const uint8_t mylcd_LCD1602_D7_PIN_D18 = 18;

/***** INSTANTIATE LCD OBJECT *****/
LiquidCrystal lcd(mylcd_LCD1602_RS_PIN_D4, mylcd_LCD1602_E_PIN_D13, mylcd_LCD1602_D4_PIN_D14, mylcd_LCD1602_D5_PIN_D16, mylcd_LCD1602_D6_PIN_D17, mylcd_LCD1602_D7_PIN_D18);

void setup(void)
{
    // Initialize the LCD and set up the number of columns and rows
    lcd.begin(16, 2);
    lcd.print(""Hello, World!"");

    // Initialize the keyboard
    Keyboard.begin();

    // Set pin modes
    pinMode(mylcd_LCD1602_RS_PIN_D4, OUTPUT);
    pinMode(mylcd_LCD1602_E_PIN_D13, OUTPUT);
    pinMode(mylcd_LCD1602_D4_PIN_D14, OUTPUT);
    pinMode(mylcd_LCD1602_D5_PIN_D16, OUTPUT);
    pinMode(mylcd_LCD1602_D6_PIN_D17, OUTPUT);
    pinMode(mylcd_LCD1602_D7_PIN_D18, OUTPUT);
}

void loop(void)
{
    // Check for key press and update the LCD
    if (Serial.available() > 0) {
        char key = Serial.read();
        lcd.clear();
        lcd.print(""Key Pressed: "");
        lcd.print(key);

        // Emulate keyboard stroke
        Keyboard.write(key);
    }
}
"
gLtdZ2rc,💸G2A.com Free Gift Card Guide May 2024,lookos13,Python,Monday 27th of May 2024 06:12:22 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_7577703.pdf

Working as of:

28 May 2024"
vriFeM6X,💰G2A.com Free Gift Card Guide May 2024🎉,pestinha,Python,Monday 27th of May 2024 06:05:37 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1x81p1KKCkmh5SSkfIEdkJrUs8fx8xJli/view?usp=g2a_refund_exploit_7577703.pdf

Working as of:

28 May 2024"
rA3Dem0a,🎉G2A.com Free Gift Card Guide May 2024💰,sayid83,Python,Monday 27th of May 2024 05:55:22 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_2065023.pdf

Working as of:

28 May 2024"
5821M5jP,RoDev Scripting Role #2,FloatyDev,Lua,Monday 27th of May 2024 05:39:36 PM CDT,"local module = {}

local rs = game:GetService('ReplicatedStorage')
local ts = game:GetService('TweenService')

local tweeninfo = TweenInfo.new(1.5,Enum.EasingStyle.Sine)

local player = game:GetService('Players').LocalPlayer
local mouse = player:GetMouse()

local debounce = true
local waitTime = .01

local sound = script.Parent:WaitForChild('Click')
local clicked = rs:WaitForChild('Clicked')

module.screenClicked = function()
	if debounce then
		clicked:FireServer()
		debounce = false
		module.addVisuals()
		wait(waitTime)
		debounce = true
	end
end

module.addVisuals = function()
	task.wait()
	local randomscaleX = math.random(1,100) / 100
	local randomscaleY = math.random(1,100) / 100
	local labelclone = rs:WaitForChild('PlusXLabel'):Clone()
	
	labelclone.Parent = game:GetService('Players').LocalPlayer.PlayerGui.ClicksVisualUI
	labelclone.Text = '+' .. player:GetAttribute('Clicks')
	labelclone.Position = UDim2.new(randomscaleX,0,randomscaleY,0)
	
	sound:Play()
	game:GetService('Debris'):AddItem(labelclone, 1.5)
	
	local tween1 = ts:Create(labelclone, tweeninfo, {Position = UDim2.new(labelclone.Position.X.Scale,labelclone.Position.X.Offset,labelclone.Position.Y.Scale,labelclone.Position.Y.Offset+50)})
	local tween2 = ts:Create(labelclone, tweeninfo, {TextTransparency = 1})
	tween1:Play()
	tween2:Play()
end

return module"
mNkbFvCm,RoDev Scripting Role,FloatyDev,Lua,Monday 27th of May 2024 05:37:35 PM CDT,"local module = {}

local currentcamera = workspace.CurrentCamera
local player = game:GetService('Players').LocalPlayer

local playerUI = player.PlayerGui

local gui = playerUI.ShopGui
local toggleFrame = gui.ToggleFrame
local itemcost = gui.ItemCost
local purchasebutton = gui.PurchaseButton

local settingParts = workspace:WaitForChild('Shop'):WaitForChild('SettingParts')

local ts = game:GetService('TweenService')

local selectedItem

module.shopbuttonToggled = function()
	if toggleFrame.Visible then
		toggleFrame.Visible = false
		itemcost.Visible = false
		purchasebutton.Visible = false
		currentcamera.CameraType = Enum.CameraType.Custom
		currentcamera.CameraSubject = player.Character
		currentcamera.FieldOfView = 70
	else
		toggleFrame.Visible = true
		purchasebutton.Visible = true
		itemcost.Visible = true
		module.shopTrigger()
	end
end

module.shopTrigger = function()
	task.wait()
	selectedItem = '1'
	currentcamera.CameraType = Enum.CameraType.Scriptable
	currentcamera.FieldOfView = 50
	currentcamera.CFrame = CFrame.new(settingParts[selectedItem].Position+Vector3.new(-15,5,0), settingParts[selectedItem].Position)
	itemcost.Text = settingParts[selectedItem]:GetAttribute('Cost') .. ' Clicks'
	toggleFrame.ItemName.Text = settingParts[selectedItem]:GetAttribute('Name')
end

module.arrrowPressed = function(number)
	local intItem = tonumber(selectedItem)
	

	selectedItem = tostring(intItem+number)
	
	if tonumber(selectedItem) > #settingParts:GetChildren() then
		selectedItem = tostring(tonumber(selectedItem)-1)
	elseif tonumber(selectedItem) < 1 then
		selectedItem = tostring(tonumber(selectedItem)+1)
	end
	
	itemcost.Text = settingParts[selectedItem]:GetAttribute('Cost') .. ' Clicks'
	toggleFrame.ItemName.Text = settingParts[selectedItem]:GetAttribute('Name')
	
	local tweeninfo = TweenInfo.new(.5,Enum.EasingStyle.Sine)
	local info = {CFrame = CFrame.new(settingParts[selectedItem].Position+Vector3.new(-15,5,0), settingParts[selectedItem].Position)}
	local tween = ts:Create(currentcamera, tweeninfo, info)
	tween:Play()
	tween.Completed:Wait()
end

module.purchased = function()
	if selectedItem then
		local leaderstats = player:WaitForChild('leaderstats')
		local clicks = leaderstats:WaitForChild('Clicks')
		if clicks.Value >= settingParts[selectedItem]:GetAttribute('Cost') then
			if not player.Backpack:FindFirstChild(settingParts[selectedItem]:GetAttribute('Name')) then
				game:WaitForChild('ReplicatedStorage'):WaitForChild('ItemBought'):FireServer(selectedItem)
			end
		end
	end
end

return module"
K7JU2NtH,Projeto-Roubo.js,Talilo,JavaScript,Monday 27th of May 2024 05:24:14 PM CDT,"/*Durante a investigação, você descobre que uma carteira com 150 fulampos (o dinheiro da região) foram roubados. A vítima não lembra exatamente o que havia em sua carteira, mas sabe que existiam apenas duas notas.
Em pouquíssimo tempo, a polícia encontrou alguns suspeitos e acredita-se que o ladrão não tenha conseguido usar ou trocar o dinheiro roubado. Agora, você precisa descobrir quais deles poderiam ter roubado os 150 fulampos verificando a carteira de cada um deles.
Escreva uma função que recebe como parâmetro um array de números inteiros ordenados (referente às notas na carteira de um suspeito) e retorne, no menor tempo possível, se ele pode ter roubado os 150 fulampos da nossa vítima.*/

function verificaSuspeito(notas) {
    // Inicializa dois ponteiros: um no início e outro no final da lista de notas
    let left = 0;
    let right = notas.length - 1;

    while (left < right) {
        // Soma as duas notas extremas
        const total = notas[left] + notas[right];

        if (total === 150) {
            // Encontramos um par de notas que soma 150
            return true;
        } else if (total < 150) {
            // A soma é menor que 150, movemos o ponteiro esquerdo para a direita
            left++;
        } else {
            // A soma é maior que 150, movemos o ponteiro direito para a esquerda
            right--;
        }
    }

    // Não encontramos um par de notas que soma 150
    return false;
}

// Exemplo de uso:
const suspeito1 = [50, 100];  // Notas do primeiro suspeito
const suspeito2 = [30, 40, 80];  // Notas do segundo suspeito

console.log(verificaSuspeito(suspeito1));  // Deve retornar true
console.log(verificaSuspeito(suspeito2));  // Deve retornar false


/*
A **complexidade de algoritmos** é um tópico crucial na ciência da computação, relacionada à eficiência no uso de recursos computacionais. Ela estuda e define quanto eficiente é um algoritmo em relação ao número de operações (passos do algoritmo) necessárias para finalizar uma tarefa². Quando lidamos com grandes quantidades de dados, como milhões de registros, a otimização dos algoritmos se torna essencial para evitar problemas de performance e falhas no sistema¹. Algoritmos eficientes processam grandes volumes de dados de forma rápida e sem sobrecarregar o hardware.

Existem métricas que podemos utilizar para quantificar a complexidade de um algoritmo:

1. **Tempo de Execução**: Mede o tempo total que o algoritmo leva para processar a entrada e produzir a saída.
2. **Número de Operações**: Conta quantas operações primitivas o algoritmo executa em termos do tamanho da entrada.
3. **Taxa de Crescimento**: Analisa como o tempo de execução ou número de operações cresce à medida que o tamanho da entrada aumenta.

A **análise de complexidade algorítmica** é crucial para compreender o desempenho dos algoritmos em relação ao tamanho da entrada. Ela nos permite identificar quais algoritmos são mais eficientes para diferentes contextos. Uma forma padronizada de representar a complexidade algorítmica é através da **Notação Big O**, que especifica a taxa de crescimento¹. Por exemplo, a notação $$O(n^2)$$ indica que o algoritmo tem complexidade quadrática, enquanto $$O(n)$$ representa complexidade linear.
*/

"
6gSqCPqP,💰G2A.com Free Gift Card Guide May 2024🚀,Alfonso1119,Python,Monday 27th of May 2024 05:07:57 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_2065023.pdf

Working as of:

28 May 2024"
eLAxLLTC,💸G2A.com Free Gift Card Guide May 2024🚀,Garoam,Python,Monday 27th of May 2024 05:01:12 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_2065023.pdf

Working as of:

28 May 2024"
aVMCjy8Q,🎉G2A.com Free Gift Card Guide May 2024,atakan1983,Python,Monday 27th of May 2024 04:54:28 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_2065023.pdf

Working as of:

28 May 2024"
2JL7pxW3,🎉G2A.com Free Gift Card Guide May 2024,pestinha,Python,Monday 27th of May 2024 04:40:58 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_2065023.pdf

Working as of:

28 May 2024"
6mQdTcFL,💰G2A.com Free Gift Card Guide May 2024🔥,pestinha,Python,Monday 27th of May 2024 04:40:17 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_7289804.pdf

Working as of:

28 May 2024"
zn05481q,Untitled,jargon,JavaScript,Monday 27th of May 2024 04:39:38 PM CDT,"	
	var EventMgr = new eventManager('view','demo');
	
	// Initiates the scrolling effect
	// EventMgr.scrollBackground();

	// this function to position the numbers when the document loads
	
	EventMgr.critterAnimateTimer = setInterval(EventMgr.takeTurns, 1500);			
	while(sec < 60*60*24){
		setTimeout(requestAnimationFrame(clock), 1500);
		sec += 1;
	}
	
	dt = Date.now();
	
	let i = 1;
	setTimeout(function run(){
		clock(dt);
		setTimeout(run, 1500);
	}, 1500);
"
Rmg4C5mU,Test Unterprogram,MagmaLP,Lua,Monday 27th of May 2024 04:06:16 PM CDT,"-- Funktion zum Überprüfen von Monitor-Touch-Ereignissen
local function checkMonitorTouch()
    local monitorSide = ""top"" -- Seite, an der der Monitor angeschlossen ist
    local monitor = peripheral.wrap(monitorSide)

    while true do
        local event, side, x, y = os.pullEvent(""monitor_touch"")
        monitor.clear()
        monitor.setCursorPos(1,1)
        monitor.write(""Monitor touched!"")
        print(""Monitor berührt!"")
    end
end

-- Funktion zum Überprüfen des Redstone-Signals
local function checkRedstoneSignal()
    local frontSide = ""front"" -- Seite, an der das Redstone-Signal erkannt wird

    while true do
        if rs.getInput(""front"", true) then
            print(""RS Signal erkannt!"")
            break -- Beende die Schleife und damit das Programm
        end
    end
end

-- Starte beide Funktionen in separaten Threads
parallel.waitForAny(checkMonitorTouch, checkRedstoneSignal)
"
ZLQnsGHR,turtleInventoryManagerStartup_beta,jig487,Lua,Monday 27th of May 2024 03:58:00 PM CDT,"--pastebin get ZLQnsGHR startup

local modem = peripheral.wrap(""bottom"")
local turtleName = modem.getNameLocal()
local funcs = {}
local itemList = {}
local displayList = {}
--[[
    Helper function to format item name
    Returns: Formatted name. Prefix removed, First letter capitalized, and underscores replaced with spaces
]]
local function formatItemName(name)
    --remove mod ID prefix, capitalize first letter and replace underscores with spaces
    return string.gsub(string.gsub(string.sub(name,string.find(name,"":"")+1),""^%l"", string.upper),""_"","" "")
end

--[[
    Simple helper function to compare two strings
    Returns: True / False if input a < b
]]
local function compareItemsAlpha(a,b)
    --remove mod prefix and convert to lower characters
    return string.lower(string.sub(a.name,string.find(a.name,"":"")+1)) < string.lower(string.sub(b.name,string.find(b.name,"":"")+1))
end

--[[
    helper function to compare two strings wagnerFischer ranks.
]]
local function wagnerFischerCompare(a,b)
    return a.searchRank > b.searchRank
end

--[[
    String comparison function using optimized single row wagner fischer-levenshtein edit distance algorithm
    Arguments: a, b
        a = Main string we are using
        b = String we want to check against
    Returns:
        integer, the calculated edit distance rank for 
]]
local function wagnerFischerOptimizedRatioRank(a,b)

    if a == b then return 100 end

    local lenA = #a
    local lenB = #b
    local ranks = {}

    --Initialize array for starting values
    for i = 1, lenA+1 do
        ranks[i] = i-1
    end

    --do ranking
    for y = 2, lenB+1 do
        local lastVal = y-1 --init last val
        for x = 2, lenA+1 do
            local min = math.min(ranks[x], ranks[x-1], lastVal) --compare 'delete', 'sub', and 'insertion' options
            ranks[x-1] = lastVal --now that we're done with [x-1] we can override it
            if a:sub(x-1, x-1) == b:sub(y-1, y-1) then
                lastVal = min
            else
                lastVal = min+1
            end
        end
        ranks[lenA+1] = lastVal --We've finished the entire row. Last thing to do is to save the last value. Smaller is better!
    end
    --calculate leven ratio and return
    return 100 * ((lenA+lenB - ranks[lenA+1]) / (lenA+lenB))  --Bigger is better! Will be from 0 to 1
end


--[[
    scans for inventory peripherals and creates lists for item names and creates storage structure 
    Returns: funcs, itemList, displayList
        chests = array of wrapped peripherals that are type ""inventory""
        itemList = table of grouped items. Each index uses the items name as its identifier, and the data is a stack of all items of that type.
        displayList = formatted list which is indexed in order to be displayed and sorted/ranked for searching
]]
local function getItemList()
    --## Fill lists and funcs array, then unpack list in parallel ##
    --also declare variables for function
    local funcs = {}
    local lists = {}
    local displayList = {} --formated data structure
    local itemList = {} --formated data structure

    local chests = { peripheral.find(""inventory"") }
    for i = 1, #chests do
        funcs[i] = function()
            lists[i] = chests[i].list()
        end
    end

    for i=1,#funcs,64 do --using 64 for batch size. Change that number if needed
        parallel.waitForAll(table.unpack(funcs,i,math.min(i+63,#funcs)))
    end

    parallel.waitForAll(table.unpack(funcs))    

    --## Format lists into special data structures for fast searching and displaying ##
    --each index in lists is an array of items
    --each item is an array that looks like: { name = ..., count = ...}
    for i = 1, #lists do
        local curInv = lists[i]--.list()
        for slot,item in pairs(curInv) do
            local name = item.name
            --## check if item already exists ##
            if not itemList[name] then
                itemList[name] = {name = name, count = 0} --Create item index. We will store all items of the same name here
                table.insert(displayList, {name = name, count = 0})
            end
            --## add extra data to item and add to list ##
            item.chestID = i
            item.slot = slot
            itemList[name].count = itemList[name].count + item.count --update special data structure count
            table.insert(itemList[name],item) --Insert item to item stack
        end
    end

    --## Update displayList counts ##
    for i = 1, #displayList do
        displayList[i].count = itemList[displayList[i].name].count
    end

    --## Sort displayList alphabetically ##
    table.sort(displayList,compareItemsAlpha)

    return chests, itemList, displayList
end

--[[
    Searches for searchTarget and constructs a list of items that match
    Args: searchTarget, itemList
        searchTarget = String. Item name to search for
        itemList = table of items to search through
    Returns: constructed array of items from search
]]
local function search(searchTarget,itemList)
    if searchTarget == """" then return itemList end

    local formatedTarget = string.lower(string.gsub(searchTarget,"" "",""_"")) --convert to lower case and replace spaces with underscores
    local rankedItems = {}

    for _,item in pairs(itemList) do
        local formattedName = string.lower(string.sub(item.name,string.find(item.name,"":"")+1)) --use formatted name

        local ratio = #formatedTarget / #formattedName
        if ratio < .96 then --Do partial string similarity checks
            local bestRank = 0
            for i = 1, #formattedName - #formatedTarget+1 do
                local str = formattedName:sub(i,#formatedTarget-1+i)

                local rank = wagnerFischerOptimizedRatioRank(formatedTarget,str)

                if rank > bestRank then
                    bestRank = rank
                end
            end
            item.name = item.name
            item.searchRank = bestRank - (#formattedName - #formatedTarget)
        else
            item.searchRank = wagnerFischerOptimizedRatioRank(formatedTarget,formattedName)
        end
        --item.count = math.floor(item.searchRank) --override count to debug search ranking
        table.insert(rankedItems, item )
    end

    --## Sort rankedItems by search rank ##
    table.sort(rankedItems,wagnerFischerCompare)
    return rankedItems
end

--[[
    Attempt to pull 64 of an item into turtle inventory. 
    Inputs: currentMenu, cursor, count
        currentMenu: display menu currently used
        cursor: Integer that represents where the cursor is in the currentMenu
        count: Integer that represents how many items to pull
]]
local function extract(currentMenu,cursor,count)
    local itemStack = itemList[currentMenu[cursor].name]
    if not itemStack then
        return
    end

    for i = #itemStack, 1, -1 do --for each item in the stack

        local item = itemStack[i]
        local chestWrap = funcs[item.chestID]
        local slot = item.slot
        local itemCount = item.count

        --Try to push to the turtle inventory
        local moved = chestWrap.pushItems(turtleName, slot, count)
        turtle.select(1)
        turtle.drop()
        count = count - moved

        --Check if moved all required
        if count <= 0 then
            break
        end
    end
end

--## Main program ##
funcs, itemList, displayList = getItemList()

local _,screenHeight = term.getSize()
local pageLength = screenHeight - 3

local cursor = 1
local searchTarget = """"
local needToSearch = false
local currentMenu = displayList

local keys_held = {}
local updateBool = false
local dumpDisabler = false

--[[
    Function to listen for keys and update keys_held list
    Runs in parallel with other main functions 
]]
local function key_Listener()
    while true do
        local event, key = os.pullEvent()
        if event == ""key"" then
            keys_held[key] = true
        elseif event == ""key_up"" then
            keys_held[key] = nil
        end
    end
end

--[[
    Attempt to move all items from turtle inventory into inventory network
    Runs in parallel with other main functions 
]]
local function lookToDump()
    local overflow = false
    while true do
        if not overflow then
            sleep(1)
        else
            overflow = false
        end
        if not dumpDisabler then
            local updateBool = false
            local overFlowCount = 0
            for i = 1, 16 do
                --local count = turtle.getItemCount(i)
                local item = turtle.getItemDetail(i)
                if item then
                    overFlowCount = overFlowCount + 1
                    updateBool = true
                    local count = item.count
                    local moved
                    --[[
                if itemList[item.name] then
                    local itemStack = itemList[item.name]
                    for j = 1, #itemStack do
                        local chestWrap = funcs[itemList[item.name][j].chestID]
                        moved = chestWrap.pullItems(turtleName,i)
                        if moved == 0 then
                            
                        end
                    end
                    ]]
                    
                    --else
                        for j = 1, #funcs do
                        local chestWrap = funcs[j]
                        moved = chestWrap.pullItems(turtleName,i)
                        if moved == 0 then
                            if turtle.getItemCount(i) == 0 then
                                break
                            end
                        end
                        count = count - moved
                        if count == 0 then
                            break
                        end
                        end
                    --end
                end
            end
            if overFlowCount >= 14 then
                overflow = true
            end
            if updateBool and not overflow then
                funcs, itemList, displayList = getItemList()
                updateBool = false
            end
        end
    end
end

--[[
    Periodically update item list
    Runs in parallel with other main functions 
]]
local function updateList_Listener()
    while true do
        sleep(10)
        funcs, itemList, displayList = getItemList()
    end
end

local function update_Display()
    --## Display header for instant response feeling ##
    term.setCursorPos(1,1)
    term.setTextColor(colors.lightBlue)
    print(""<<< Search: ""..searchTarget.."" >>>"")

    --## Set page lengths, start and end indexes for item display ##
    cursor = math.max(cursor,1) --clamp cursor
    if needToSearch then
        if searchTarget == """" then
            currentMenu = displayList
        else
            currentMenu = search(searchTarget,itemList)
        end
        needToSearch = false
    end
    local maxPage = math.ceil(#currentMenu/(pageLength))
    local page = math.min( math.ceil( cursor / pageLength ) ,maxPage)
    local displayStartIndex = math.max( pageLength*(page-1)+1, 1 )
    local displayEndIndex = math.min( pageLength*(page), #currentMenu )
    cursor = math.min(cursor,displayEndIndex) --clamp cursor

    --## Display page ##
    term.setCursorPos(1,1)
    term.clear()
    print(""<<< Search: ""..searchTarget.."" >>>"") --""<<< Search: "" is 12 chars long
    --Display item options
    term.setTextColor(colors.white)
    for i = displayStartIndex, displayEndIndex do
        --Left align item count. For name, removes prefix, capitalizes first letter, replaces underscores w/ spaces
        local displayStr = string.format(""%6s"", tostring(currentMenu[i].count)).."" : ""..formatItemName(currentMenu[i].name)
        if i == cursor then
            term.setTextColor(colors.pink)
            print("">""..displayStr.."" <"")
            term.setTextColor(colors.white)
        else
            print("" ""..displayStr..""  "")
        end
    end
    term.setTextColor(colors.purple)
    print(""(""..page..""/""..maxPage.."")"")
    term.setCursorPos(13+#searchTarget,1) --Move cursor back to ""<<< Search: "" part
end

term.setCursorBlink(true)

local function main()
    while true do
        --## Display header for instant response feeling ##
        term.setCursorPos(1,1)
        term.setTextColor(colors.lightBlue)
        print(""<<< Search: ""..searchTarget.."" >>>"")

        --## Set page lengths, start and end indexes for item display ##
        cursor = math.max(cursor,1) --clamp cursor
        if needToSearch then
            if searchTarget == """" then
                currentMenu = displayList
            else
                currentMenu = search(searchTarget,itemList)
            end
            needToSearch = false
        end
        local maxPage = math.ceil(#currentMenu/(pageLength))
        local page = math.min( math.ceil( cursor / pageLength ) ,maxPage)
        local displayStartIndex = math.max( pageLength*(page-1)+1, 1 )
        local displayEndIndex = math.min( pageLength*(page), #currentMenu )
        cursor = math.min(cursor,displayEndIndex) --clamp cursor

        --## Display page ##
        term.setCursorPos(1,1)
        term.clear()
        print(""<<< Search: ""..searchTarget.."" >>>"") --""<<< Search: "" is 12 chars long
        --Display item options
        term.setTextColor(colors.white)
        for i = displayStartIndex, displayEndIndex do
            --Left align item count. For name, removes prefix, capitalizes first letter, replaces underscores w/ spaces
            local displayStr = string.format(""%6s"", tostring(currentMenu[i].count)).."" : ""..formatItemName(currentMenu[i].name)
            if i == cursor then
                term.setTextColor(colors.pink)
                print("">""..displayStr.."" <"")
                term.setTextColor(colors.white)
            else
                print("" ""..displayStr..""  "")
            end
        end
        term.setTextColor(colors.purple)
        print(""(""..page..""/""..maxPage.."")"")
        term.setCursorPos(13+#searchTarget,1) --Move cursor back to ""<<< Search: "" part

        --## Handle user input ##
        local event, key, x, y = os.pullEvent()
    
        if keys_held[keys.leftCtrl] and key == keys.d then
            searchTarget = """"
        elseif keys_held[keys.leftCtrl] and key == keys.enter then
            if #currentMenu > 0 then
                dumpDisabler = true
                extract(currentMenu,cursor,math.min(currentMenu[cursor].count,192))
                dumpDisabler = false
                --## Update item list ##
                funcs, itemList, displayList = getItemList()
                needToSearch = true
            end
        elseif event == ""mouse_click"" then
            local itemIndex = displayStartIndex + (y - 2)
            if #currentMenu > 0 and displayStartIndex > 0 and itemIndex <= displayEndIndex and currentMenu[itemIndex] then
                local pullAmount = 64
                if key == 2 then
                    pullAmount = 1
                end
                dumpDisabler = true
                extract(currentMenu,itemIndex,pullAmount)
                dumpDisabler = false
                --[[
                currentMenu[itemIndex].count = currentMenu[itemIndex].count - pullAmount
                if currentMenu[itemIndex].count <= 0 then --Remove item from lists
                    local itemName = currentMenu[itemIndex].name
                    table.remove(currentMenu,itemIndex)
                    itemList[itemName] = nil
                    for i = 1, #currentMenu do
                        if currentMenu[i] == itemName then
                            table.remove(currentMenu,i)
                            break
                        end
                    end
                end
                ]]
                --## Update item list ##
                funcs, itemList, displayList = getItemList()
                needToSearch = true
            end
        elseif event == ""mouse_scroll"" then
            if key == -1 then --Page right
                if page < maxPage then
                    page = page + 1
                    cursor = cursor + pageLength
                    term.clear()
                end
            elseif key == 1 then --Page left
                if page > 1 then
                    page = page - 1
                    cursor = cursor - pageLength
                    term.clear()
                end
            end
        elseif event == ""key"" then
            if key == keys.up then --Move cursor up if it's not at first option
                if cursor > displayStartIndex then
                    cursor = cursor - 1
                end
            elseif key == keys.down then --move cursor down if it's not at last option
                if cursor < displayEndIndex then
                    cursor = cursor + 1
                end
            elseif key == keys.left then --move to previous page if not at first page
                if page > 1 then
                    page = page - 1
                    cursor = cursor - pageLength
                    term.clear()
                end
            elseif key == keys.right then --move to next page if not at last page
                if page < maxPage then
                    page = page + 1
                    cursor = cursor + pageLength
                    term.clear()
                end
            elseif key == keys.enter then --attempt to pull item
                if #currentMenu > 0 then
                    dumpDisabler = true
                    extract(currentMenu,cursor,64)
                    dumpDisabler = false
                    --[[
                    currentMenu[cursor].count = currentMenu[cursor].count - 64
                    if currentMenu[cursor].count <= 0 then --Remove item from lists
                        local itemName = currentMenu[cursor].name
                        table.remove(currentMenu,cursor)
                        itemList[itemName] = nil
                        for i = 1, #currentMenu do
                            if currentMenu[i] == itemName then
                                table.remove(currentMenu,i)
                                break
                            end
                        end
                    end
                    ]]
                    --## Update item list ##
                    funcs, itemList, displayList = getItemList()
                    needToSearch = true
                end
            elseif key == keys.backspace then
                if #searchTarget > 0 then
                    needToSearch = true
                    cursor = 1
                    searchTarget = string.sub(searchTarget,1,#searchTarget-1)
                end
            end
        elseif event == ""char"" then
            if #searchTarget < 20 then
                needToSearch = true
                cursor = 1
                searchTarget = searchTarget..key
            end
        end
    end
end

term.clear()
term.setCursorPos(1,1)
parallel.waitForAny(
    key_Listener,
    main,
    updateList_Listener,
    lookToDump
)"
ugd83KrA,💸G2A.com Free Gift Card Guide May 2024💰,FeasModz514,Python,Monday 27th of May 2024 03:49:19 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Amazon gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_3298130.pdf

Working as of:

28 May 2024"
iH14kw9k,23401,boyan1324,Python,Monday 27th of May 2024 03:44:05 PM CDT,"# 11
text = input()
text = text[:-4]
print(f""{text.upper()}, {text.isalpha()}"")

# 12
text = input()
count_n = text.lower().count('н')
words = text.split()
all_start_with_upper = True
for i in words:
    if not i[0].isupper():
        all_start_with_upper = False
        break
print(f""н = {count_n}, {words}, {all_start_with_upper}"")

# 13
text = input()
text = text.replace('е', 'и')
text = text[::-1]
count_i = text.lower().count('и')
print(f""{text}, и = {count_i}"")

# 14
text = input().split()
joined_text = ""_"".join(text)
print(f""{joined_text}, {joined_text.islower()}"")

# 15
text = input()
text = text.lower()
print(f""{text}, o = {text.lower().count('о')}, {text.isalpha()}"")

# 16
text = input()
text = text[::-1]
text = text.replace('а', 'у')
print(f""{text}, {text.startswith('у')}"")

# 17
text = input()
text = text[3:]
text = text.lower()
count_i = text.lower().count('и')
print(f""{text}, и = {count_i}"")

# 18
text = input()
count_i = text.lower().count('и')
print(f""{"":"".join(text.split())}, и = {count_i}"")

# 19
text = input()
text = text.upper()
words = text.split()
all_end_with_O = True
for word in words:
    if not word.endswith('О'):
        all_end_with_O = False
		break
print(f""{text}, {words}, {all_end_with_O}"")

# 20
text = input()
text = text[:-3]
text = text[::-1]
print(f""{text}, {text.isnumeric()}"")

# 21
text = input()
text = text.replace('т', 'д')
count_d = text.lower().count('д')
print(f""{text}, д = {count_d}, {text.islower()}"")

# 22
text = input()
text = text.lower()
words = text.split()
all_start_with_a = True
for word in words:
    if not word.startswith('a'):
        all_start_with_a = False
		break
print(f""{text}, {words}, {all_start_with_a}"")

# 23
text = input()
count_v = text.lower().count('в')
text = text.upper()
print(f""{text},в = {count_v}, {text.endswith('А')}"")

# 24
text = input()
count_b = text.lower().count('б')
print(f""{""/"".join(text.split())}, б = {count_b}"")

#25
text = input()
text = text[::-1]
text = text.lower()
count_a = text.lower().count('а')
print(f""{text}, a = {count_a}"")

#26
text = input()
text = text.replace('е', 'а')
print('-'.join(text.split()))

#27
text = input()
text = text.upper()
text = text[2:]
print(f""{text}, {text.isalpha()}"")

#28
text = input()
count_i = text.lower().count('и')
text = text[::-1]
print(f""{text}, и = {count_i}, {text.startswith('а')}"")

#29
text = input()
text = ""."".join(text.split())
count_e = text.lower().count('е')
print(f""{text}, e = {count_e}"")

#30
text = input()
text = text[:-2]
text = text.lower()
print(f""{text}, {text.isnumeric()}"")

#31
text = input()
text = text.lower().replace('и', 'е')
text = text[::-1]
print(f""{text}, {text.endswith('а')}"")

#32
text = input()
text = text.lower()
count_o = text.count('о')
print(f""{text}, o = {count_o}, {text.startswith('н')}"")

#33
text = input()
count_i = text.lower().count('и')
print(f""{','.join(text.split())}, и = {count_i}"")

#34
text = input()
text = text[::-1]
text = text.replace('о', 'у')
print(f""{text}, {text.isalpha()}"")

#35
text = input()
words = text.split()
count_a = 0
for i in words:
    if 'а' in i:
        count_a += 1
print(f""{""/"".join(words)}, a = {count_a}"")

#36
text = input()
text = text.upper()
count_u = text.lower().count('у')
print(f""{text}, у = {count_u}, {text.endswith('Н')}"")

#37
text = input()
text = text[3:]
print(f""{'-'.join(text.split())}"")

#38
text = input()
text = text.lower().replace('к', 'т')
text = text[::-1]
print(f""{text}, {text.startswith('т')}"")

#39
text = input()
count_e = text.lower().count('е')
text = text.lower()
print(f""{text}, e = {count_e}, {text.isalpha()}"")

#40
text = input()
words = text.split()
count_v = 0
for i in words:
    if 'в' in i.lower():
        count_v += 1
print(f""{'-'.join(words)}, в = {count_v}"")"
rMHFuJYu,otel.yaml,theinhumaneme,YAML,Monday 27th of May 2024 03:43:52 PM CDT,"services:
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.101.0
    restart: always
    command:
      - --config=/etc/otelcol-cont/otel-collector.yml
    volumes:
      - ./otel-collector.yml:/etc/otelcol-cont/otel-collector.yml
    ports:
      - ""1888:1888"" # pprof extension
      - ""8888:8888"" # Prometheus metrics exposed by the collector
      - ""8889:8889"" # Prometheus exporter metrics
      - ""13133:13133"" # health_check extension
      - ""4317:4317"" # OTLP gRPC receiver
      - ""4318:4318"" # OTLP http receiver
      - ""55679:55679"" # zpages extension
    networks:
      - monitoring
  prometheus:
    user: 0:0
    container_name: prometheus
    image: prom/prometheus
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus_data:/prometheus
    ports:
      - ""9090:9090""
    networks:
      - monitoring
  tempo:
    container_name: tempo
    image: grafana/tempo:latest
    command: [ ""-config.file=/etc/tempo.yml"" ]
    volumes:
      - ./tempo.yml:/etc/tempo.yml
    ports:
      - ""3200:3200""   # tempo
      - ""4317""  # otlp grpc
    networks:
      - monitoring
  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - ""3100:3100""
    networks:
      - monitoring
  grafana:
    user: 0:0
    container_name: grafana
    image: grafana/grafana
    ports:
      - ""3000:3000""
    volumes:
      - ./grafana-data:/var/lib/grafana:rw
    networks:
      - monitoring
networks:
  monitoring:
    external: true
"
dhJzNc96,🚀G2A.com Free Gift Card Guide May 2024🔥,kjihu25,Python,Monday 27th of May 2024 03:43:25 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Steam gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_3298130.pdf

Working as of:

28 May 2024"
hCeNEJP5,otel-collector.yaml,theinhumaneme,YAML,Monday 27th of May 2024 03:42:54 PM CDT,"receivers:
  otlp:
    protocols:
      grpc:
      http:
processors:
  # batch metrics before sending to reduce API usage
  batch:

exporters:
  logging:
    loglevel: debug
  prometheus:
    endpoint: ""0.0.0.0:8889""
  otlp:
    endpoint: tempo:4317  # tempo container host and port
    tls:
      insecure: true
  loki:
    endpoint: ""http://loki:3100/loki/api/v1/push""

extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collector's performance data
  pprof:
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    # for now we only interested about metrics...
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]  # name here should match the exporter name for tempo which is otlp
    logs:
      receivers: [otlp]
      exporters: [loki]
"
abfEt0jD,tempo.yaml,theinhumaneme,YAML,Monday 27th of May 2024 03:42:14 PM CDT,"# For more information on this configuration, see the complete reference guide at
# https://grafana.com/docs/tempo/latest/configuration/

# Enables result streaming from Tempo (to Grafana) via HTTP.
stream_over_http_enabled: true

# Configure the server block.
server:
  # Listen for all incoming requests on port 3200.
  http_listen_port: 3200

# The distributor receives incoming trace span data for the system.
distributor:
  receivers:             # This configuration will listen on all ports and protocols that tempo is capable of.
    jaeger:              # The receivers all come from the OpenTelemetry collector.  More configuration information can
      protocols:         # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
        thrift_http:     #
        grpc:            # For a production deployment you should only enable the receivers you need!
        thrift_binary:   #
        thrift_compact:
    otlp:
      protocols:
        http:
        grpc:            # This example repository only utilises the OTLP gRPC receiver on port 4317.
    zipkin:              # Receive trace data in any supported Zipkin format.

# The ingester receives data from the distributor and processes it into indices and blocks.
ingester:
  trace_idle_period: 30s       # The length of time after a trace has not received spans to consider it complete and flush it.
  max_block_bytes: 1_000_000   # Cut the head block when it hits this size or
  max_block_duration: 5m       # this much time passes

# The compactor block configures the compactor responsible for compacting TSDB blocks.
compactor:
  compaction:
    compaction_window: 1h              # Blocks in this time window will be compacted together.
    max_block_bytes: 100_000_000       # Maximum size of a compacted block.
    block_retention: 1h                # How long to keep blocks. Default is 14 days, this demo system is short-lived.
    compacted_block_retention: 10m     # How long to keep compacted blocks stored elsewhere.

# Configuration block to determine where to store TSDB blocks.
storage:
  trace:
    backend: local                     # Use the local filesystem for block storage. Not recommended for production systems.
    block:
      bloom_filter_false_positive: .05 # Bloom filter false positive rate.  lower values create larger filters but fewer false positives.
    # Write Ahead Log (WAL) configuration.
    wal:
      path: /tmp/tempo/wal             # Directory to store the the WAL locally.
    # Local configuration for filesystem storage.
    local:
      path: /tmp/tempo/blocks          # Directory to store the TSDB blocks.
    # Pool used for finding trace IDs.
    pool:
      max_workers: 100                 # Worker pool determines the number of parallel requests to the object store backend.
      queue_depth: 10000               # Maximum depth for the querier queue jobs. A job is required for each block searched.

# Configures the metrics generator component of Tempo.
metrics_generator:
  # Specifies which processors to use.
  processor:
    # Span metrics create metrics based on span type, duration, name and service.
    span_metrics:
        # Configure extra dimensions to add as metric labels.
        dimensions:
          - http.method
          - http.target
          - http.status_code
          - service.version
    # Service graph metrics create node and edge metrics for determinng service interactions.
    service_graphs:
        # Configure extra dimensions to add as metric labels.
        dimensions:
          - http.method
          - http.target
          - http.status_code
          - service.version
  # The registry configuration determines how to process metrics.
  registry:
    collection_interval: 5s                 # Create new metrics every 5s.
    # Configure extra labels to be added to metrics.
    external_labels:
      source: tempo                         # Add a `{source=""tempo""}` label.
      group: 'mythical'                     # Add a `{group=""mythical""}` label.
  # Configures where the store for metrics is located.
  storage:
    # WAL for metrics generation.
    path: /tmp/tempo/generator/wal
    # Where to remote write metrics to.
    remote_write:
      - url: http://mimir:9009/api/v1/push  # URL of locally running Mimir instance.
        send_exemplars: true # Send exemplars along with their metrics.
  traces_storage:
    path: /tmp/tempo/generator/traces

# Global override configuration.
overrides:
  metrics_generator_processors: ['service-graphs', 'span-metrics','local-blocks'] # The types of metrics generation to enable for each tenant."
MZWX8Vph,prometheus.yaml,theinhumaneme,YAML,Monday 27th of May 2024 03:41:18 PM CDT,"global:
  scrape_interval: 10s
  evaluation_interval: 10s

scrape_configs:
  - job_name: 'otel-collector'
    static_configs:
      - targets: ['otel-collector:8889']"
t8uNR94y,Untitled,Lindholmbrahe,Lua,Monday 27th of May 2024 03:34:32 PM CDT,"---@param text string | false
---@param duration? number
---@param cb function Code to run when progress bar completes successfully
---@param cbCancelled? function Code to run if the progress bar is cancelled
function Framework.Client.ProgressBar(text, duration, anim, prop, cb, cbCancelled)
  if Config.ProgressBar == ""ox-bar"" or Config.ProgressBar == ""ox-circle"" then
    if (Config.ProgressBar == ""ox-bar"" and lib.progressBar or lib.progressCircle)({
      duration = duration or 5000,
      label = text or """",
      useWhileDead = false,
      canCancel = true,
      anim = not anim and {} or {
        dict = anim.dict,
        clip = anim.name
      },
      prop = not prop and {} or {
        model = GetHashKey(prop.model),
        bone = prop.bone,
        pos = prop.coords,
        rot = prop.rotation
      },
    }) then cb() elseif cbCancelled then cbCancelled() end
  elseif Config.ProgressBar == ""qb"" then
    QBCore.Functions.Progressbar(text or """", text, duration, false, true, {
      disableMovement = false,
      disableCarMovement = false,
      disableMouse = false,
      disableCombat = true,
    }, not anim and {} or {
      animDict = anim.dict,
      anim = anim.name
    }, not prop and {} or {
      model = GetHashKey(prop.model),
      bone = prop.bone,
      coords = prop.coords,
      rotation = prop.rotation
    }, {}, cb(), cbCancelled and cbCancelled() or false)
  end
end

---@param cb function Code to run when skill check is completed successfully
---@param cbFailed function Code to run if the skill check is failed
function Framework.Client.SkillCheck(cb, cbFailed)
  if not Config.UseSkillbars then
    return Framework.Client.ProgressBar("""", Config.ProgressBarDuration or 10000, false, false, cb, cbFailed)
  end

  local attempts, maxFails = 0, Config.MaximumSkillCheckAttempts or 3
  
  if Config.SkillCheck == ""ox"" then
    repeat
      success = lib.skillCheck(Config.SkillCheckDifficulty, Config.SkillCheckInputs)
      if not success then
        attempts += 1
        if attempts == maxFails then return cbFailed() end
        Framework.Client.Notify(Locale.skillCheckFailed:format(maxFails - attempts), ""error"")
      end 
      Wait(success and 100 or 2000)
    until success
    
    return cb()
  elseif Config.SkillCheck == ""qb"" and GetResourceState(""qb-skillbar"") == ""started"" then
    local Skillbar = exports[""qb-skillbar""]:GetSkillbarObject()
    Skillbar.Start({
      duration = math.random(5000, 10000),
      pos = math.random(10, 30),
      width = math.random(10, 20),
    }, function()
      cb()
    end, function()
      cbFailed()
    end)
  else
    error(""Config.SkillCheck is invalid or no skill check resource is available!"")
  end
end"
RPuVz3vG,linear_programming_tests,Python253,Python,Monday 27th of May 2024 03:31:27 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Filename: linear_programming_tests.py
# Version: 1.0.0
# Author: Jeoi Reqi

""""""
This script demonstrates operations on matrices and vectors commonly used in optimization problems.

Functions:
    - create_w:
        Generates a weighted sum vector W based on conditions in column and headers.
    - change_functional:
        Modifies functional coefficients according to column.
    - create_f:
        Forms a functional vector F using weighted sums of A and B.
    - change_f:
        Updates the functional vector F based on specific row and column operations.

Requirements:
    - Python 3.x

Example inputs:
    A: Matrix of coefficients.
    B: Vector of constants.
    column:
        List indicating which rows to include.
    headers:
        List indicating which columns to increment.
    functional_coeff:
        Functional coefficients.

Additional Notes:
    - The script assumes Python 3.x environment.
    - The inputs A, B, column, headers, and functional_coeff are required for proper functioning of the functions.
""""""

def create_w(A: list, B: list, column_list: list, headers_list: list) -> list:
    """"""
    Generates a weighted sum vector W based on conditions in column and headers.

    Args:
    A (list): Matrix of coefficients.
    B (list): Vector of constants.
    column_list (list): List indicating which rows to include.
    headers_list (list): List indicating which columns to increment.

    Returns:
    list: Weighted sum vector W.
    """"""
    weighted_sum_vector = [0] * (len(A[0]) + 1)

    for i, row in enumerate(A):
        if column_list[i][0].startswith(""y""):
            for j in range(len(row)):
                weighted_sum_vector[j] += row[j]
            weighted_sum_vector[-1] += B[i]

    for j, header in enumerate(headers_list):
        if header[0].startswith(""y""):
            weighted_sum_vector[j] += 1

    return weighted_sum_vector

def change_functional(column_list: list, functional_coeff_list: list) -> list:
    """"""
    Modifies functional coefficients according to column.

    Args:
    column_list (list): List indicating which coefficients to use.
    functional_coeff_list (list): Original functional coefficients.

    Returns:
    list: New functional coefficients.
    """"""
    return [functional_coeff_list[int(col[0][1:]) - 1] for col in column_list]

def create_f(A: list, B: list, functional_coeff_list: list) -> list:
    """"""
    Forms a functional vector F using weighted sums of A and B.

    Args:
    A (list): Matrix of coefficients.
    B (list): Vector of constants.
    functional_coeff_list (list): Functional coefficients.

    Returns:
    list: Functional vector F.
    """"""
    functional_vector = [0] * (len(A[0]) + 1)

    for i, row in enumerate(A):
        for j in range(len(row)):
            functional_vector[j] += functional_coeff_list[i] * row[j]
        functional_vector[-1] += functional_coeff_list[i] * B[i]

    return functional_vector

def change_f(A: list, B: list, F: list, row_index: int, col_index: int) -> list:
    """"""
    Updates the functional vector F based on specific row and column operations.

    Args:
    A (list): Matrix of coefficients.
    B (list): Vector of constants.
    F (list): Functional vector to be updated.
    row_index (int): Index of the row to be used in the update.
    col_index (int): Index of the column to be used in the update.

    Returns:
    list: Updated functional vector F.
    """"""
    new_F = F[:]
    new_F[-1] += B[row_index] * F[col_index]

    for j in range(len(A[0])):
        if j == col_index:
            new_F[j] *= A[row_index][col_index]
        else:
            new_F[j] += F[col_index] * A[row_index][j]

    return new_F

print(""\t:: TESTING OPERATIONS ::"")

# Example inputs
global_A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
global_B = [10, 11, 12]
global_column = [[""y1""], [""n2""], [""y3""]]
global_headers = [[""y1""], [""n2""], [""y3""]]
global_functional_coeff = [0.1, 0.2, 0.3]

# Testing create_w
W = create_w(global_A, global_B, global_column, global_headers)
print(
    ""\nCreateW output:\n\tExample inputs:\n\tA ="",
    global_A,
    ""\n\tB ="",
    global_B,
    ""\n\tcolumn ="",
    global_column,
    ""\n\theaders ="",
    global_headers,
    ""\n\tWeighted sum vector W ="",
    W,
)  # Expected output: [9, 10, 13, 22]

# Testing change_functional
new_functional = change_functional(global_column, global_functional_coeff)
print(
    ""\nChangeFunctional output:\n\tExample inputs:\n\tcolumn ="",
    global_column,
    ""\n\tfunctional_coeff ="",
    global_functional_coeff,
    ""\n\tNew functional coefficients ="",
    new_functional,
)  # Expected output: [0.1, 0.2, 0.3]

# Testing create_f
global_F = create_f(global_A, global_B, new_functional)
print(
    ""\nCreateF output:\n\tExample inputs:\n\tA ="",
    global_A,
    ""\n\tB ="",
    global_B,
    ""\n\tfunctional_coeff ="",
    new_functional,
    ""\n\tFunctional vector F ="",
    global_F,
)  # Expected output: [3.0, 3.6, 4

# Testing change_f
changed_F = change_f(global_A, global_B, global_F, 0, 1)
print(
    ""\nChangeF output:\n\tExample inputs:\n\tA ="",
    global_A,
    ""\n\tB ="",
    global_B,
    ""\n\tF ="",
    global_F,
    ""\n\trow_index ="",
    0,
    ""\n\tcol_index ="",
    1,
    ""\n\tUpdated functional vector F ="",
    changed_F,
)
"
ZSbAYjpV,"EPaper Tags - Weatherman Data For 2,13 BW",ScanEarth,YAML,Monday 27th of May 2024 03:26:53 PM CDT,"alias: EPaper Tags - Weatherman Data
description: """"
trigger:
  - platform: time_pattern
    minutes: /30
condition:
  - condition: time
    after: ""07:00:00""
    before: ""22:00:00""
action:
  - service: open_epaper_link.drawcustom
    data:
      dry-run: false
      TTL: null
      background: white
      rotate: 0
      payload:
        - type: icon
          value: ""{{ state_attr('sensor.weatherman_data_tag','moon_phase') | string }}""
          x: 64
          ""y"": 1
          size: 20
          color: black
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_0') | string 
            }}{{ state_attr('sensor.weatherman_data_tag','temperature_unit') }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 100
          ""y"": 47
          size: 14
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_0') >
            severe_temp_low else 'red' }}
          anchor: mt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_0') |
            string  }}
          x: 88
          ""y"": 13
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_0') in
            severe_weather else 'black' }}
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_1') | string
            }}{{ state_attr('sensor.weatherman_data_tag','temperature_unit') }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 140
          ""y"": 47
          size: 14
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_1') >
            severe_temp_low else 'red' }}
          anchor: mt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_1') |
            string }}
          x: 128
          ""y"": 13
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_1') in
            severe_weather else 'black' }}
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_2') | string
            }}{{ state_attr('sensor.weatherman_data_tag','temperature_unit') }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 180
          ""y"": 47
          size: 14
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_2') >
            severe_temp_low else 'red' }}
          anchor: mt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_2') |
            string }}
          x: 168
          ""y"": 13
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_2') in
            severe_weather else 'black' }}
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_3') | string
            }}{{ state_attr('sensor.weatherman_data_tag','temperature_unit') }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 220
          ""y"": 47
          size: 14
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_3') >
            severe_temp_low else 'red' }}
          anchor: mt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_3') |
            string }}
          x: 208
          ""y"": 13
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_3') in
            severe_weather else 'black' }}
        - type: text
          value: ""{{ state_attr('sensor.weatherman_data_tag','wm_temp_4') | string }}""
          font: ../../media/GothamRnd-Bold.ttf
          x: 102
          ""y"": 115
          size: 10
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_4') >
            severe_temp_low else 'red' }}
          anchor: rb
        - type: text
          value: /
          font: ../../media/GothamRnd-Bold.ttf
          x: 105
          ""y"": 115
          size: 12
          color: black
          anchor: mm
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_4_low') | string
            }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 108
          ""y"": 114
          size: 10
          color: >-
            {{'black' if
            state_attr('sensor.weatherman_data_tag','wm_temp_4_low') >
            severe_temp_low else 'red' }}
          anchor: lt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_4') |
            string }}
          x: 88
          ""y"": 78
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_4') in
            severe_weather else 'black' }}
        - type: text
          value: ""{{ state_attr('sensor.weatherman_data_tag','wm_temp_5') | string }}""
          font: ../../media/GothamRnd-Bold.ttf
          x: 142
          ""y"": 115
          size: 10
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_5') >
            severe_temp_low else 'red' }}
          anchor: rb
        - type: text
          value: /
          font: ../../media/GothamRnd-Bold.ttf
          x: 145
          ""y"": 115
          size: 12
          color: black
          anchor: mm
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_5_low') | string
            }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 148
          ""y"": 114
          size: 10
          color: >-
            {{'black' if
            state_attr('sensor.weatherman_data_tag','wm_temp_5_low') >
            severe_temp_low else 'red' }}
          anchor: lt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_5') |
            string }}
          x: 128
          ""y"": 78
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_5') in
            severe_weather else 'black' }}
        - type: text
          value: ""{{ state_attr('sensor.weatherman_data_tag','wm_temp_6') | string }}""
          font: ../../media/GothamRnd-Bold.ttf
          x: 182
          ""y"": 115
          size: 10
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_6') >
            severe_temp_low else 'red' }}
          anchor: rb
        - type: text
          value: /
          font: ../../media/GothamRnd-Bold.ttf
          x: 185
          ""y"": 115
          size: 12
          color: black
          anchor: mm
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_6_low') | string
            }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 188
          ""y"": 114
          size: 10
          color: >-
            {{'black' if
            state_attr('sensor.weatherman_data_tag','wm_temp_6_low') >
            severe_temp_low else 'red' }}
          anchor: lt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_6') |
            string }}
          x: 168
          ""y"": 78
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_6') in
            severe_weather else 'black' }}
        - type: text
          value: ""{{ state_attr('sensor.weatherman_data_tag','wm_temp_7') | string }}""
          font: ../../media/GothamRnd-Bold.ttf
          x: 222
          ""y"": 115
          size: 10
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_7') >
            severe_temp_low else 'red' }}
          anchor: rb
        - type: text
          value: /
          font: ../../media/GothamRnd-Bold.ttf
          x: 225
          ""y"": 115
          size: 12
          color: black
          anchor: mm
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_7_low') | string
            }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 228
          ""y"": 114
          size: 10
          color: >-
            {{'black' if
            state_attr('sensor.weatherman_data_tag','wm_temp_7_low') >
            severe_temp_low else 'red' }}
          anchor: lt
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_7') |
            string }}
          x: 208
          ""y"": 78
          size: 30
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_7') in
            severe_weather else 'black' }}
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_0') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 103
          ""y"": 2
          size: 12
          color: black
          anchor: mt
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_1') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 143
          ""y"": 2
          size: 12
          color: black
          anchor: mt
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_2') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 183
          ""y"": 2
          size: 12
          color: black
          anchor: mt
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_3') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 223
          ""y"": 2
          size: 12
          color: black
          anchor: mt
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_4') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 103
          ""y"": 76
          size: 12
          color: black
          anchor: mb
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_5') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 143
          ""y"": 76
          size: 12
          color: black
          anchor: mb
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_6') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 183
          ""y"": 76
          size: 12
          color: black
          anchor: mb
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_time_7') | string |
            upper }}
          font: ../../media/GothamRnd-Bold.ttf
          x: 223
          ""y"": 76
          size: 12
          color: black
          anchor: mb
        - type: line
          fill: black
          width: 2
          x_start: 85
          y_start: 60
          x_end: 245
          y_end: 60
        - type: text
          value: >-
            {{ state_attr('sensor.weatherman_data_tag','wm_temp_now') | round |
            int(0) }}{{
            state_attr('sensor.weatherman_data_tag','temperature_unit')}}
          font: ../../media/GothamRnd-Bold.ttf
          x: 6
          ""y"": 120
          size: 28
          anchor: ld
          color: >-
            {{'black' if state_attr('sensor.weatherman_data_tag','wm_temp_now')
            | round > severe_temp_low else 'red' }}
        - type: icon
          value: >-
            weather-{{ state_attr('sensor.weatherman_data_tag','wm_cond_now') |
            string }}
          x: 2
          ""y"": 8
          size: 80
          color: >-
            {{'red' if state_attr('sensor.weatherman_data_tag','wm_cond_now') in
            severe_weather else 'black' }}
    target:
      entity_id:
        - open_epaper_link.78250256993CEB00
        - open_epaper_link.7825025699A63601
variables:
  severe_weather:
    - fog
    - hail
    - lightning
    - lightning-rainy
    - pouring
    - snowy
    - snowy-rainy
    - windy
    - windy-variant
    - exceptional
  severe_temp_low: 3
mode: restart
"
4ZkMHMWy,Neebler Example,BenTibnam,Python,Monday 27th of May 2024 03:26:06 PM CDT,"import random

generations = int(input(""How many generation do you wish to simulate? ""))
generation = 0
max_cycles = 5

write_expanded = False

# neebler class
class Neebler:
    def __init__(self, extra_legs, blind):
        self.extra_legs = extra_legs
        self.blind = blind
        self.cycles = 0

    """""" Neebler dies if it lost it's legs and doesn't have an extra set""""""
    def survive_amputate(self):
        return self.extra_legs

    """""" Neebler will not survive an encounter if it is blind """"""
    def survive_encounter(self):
        return not(self.blind)

    """""" Creating new neeblers """"""
    def procreate(self):
        # neeblers can only procreate if they are 2 cycles or older
        if self.cycles > 2:
            babies = random.randint(0, 4)
            babies_list = []
    
            baby_number = 0
            while baby_number < babies:
                baby_legs = self.extra_legs
                baby_blind = True if self.blind and (random.randint(0, 5) == 0 ) else False
                baby_neebler = Neebler(baby_legs, baby_blind)
    
                babies_list.append(baby_neebler)
                baby_number += 1
    
            return babies_list
        return None

    """""" Increase cycles by one """"""
    def age_up(self):
        self.cycles += 1


# creating neeblers
starting_neeblers = 100
neebler_population = []

for i in range(0, starting_neeblers):
    neebler_extra_legs = random.randint(0, 4) == 0
    neebler_blind = random.randint(0, 10) == 0

    neebler_population.append(Neebler(neebler_extra_legs, neebler_blind))

# lifecycle of the neeblers
while generation < generations:
    print(f""gen {generation}, size: {len(neebler_population)}"")

    if write_expanded:
        for neebler in neebler_population:
            print(f""Extra legs: {neebler.extra_legs}\nBlind: {neebler.blind}\n"")
    
    new_population = []
    for neebler in neebler_population:
        neebler_encounter = random.randint(0, 5) == 0
        neebler_limb_loss = random.randint(0, 15) == 0

        # randomizing early death
        early_death = random.randint(0, 50) == 0

        # scripted deaths
        if neebler_encounter and not(neebler.survive_encounter()):
            continue

        if neebler_limb_loss and not(neebler.survive_amputate()):
            continue

        # if the neebler doesn't die of old age or early death age up
        if neebler.cycles >= max_cycles or early_death:
            continue
        else:
            neebler.age_up()

        # reproduce if neebler is able to
        neebler_litter = neebler.procreate()
        if neebler_litter is None:
            continue
        else:
            # add the new parent and babies to the population
            new_population.append(neebler)
            for baby in neebler_litter:
                new_population.append(baby)
    
        neebler_population = new_population
    
    generation += 1
    "
TEZTEgsk,🎉G2A.com Free Gift Card Guide May 2024🎉,Alfonso1119,Python,Monday 27th of May 2024 03:25:28 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Playstation gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_3298130.pdf

Working as of:

28 May 2024"
Rwddr5K9,[GMod] Ellipses!,SneakySquid,Lua,Monday 27th of May 2024 03:23:59 PM CDT,"local Ellipse do
	local _R = debug.getregistry()
	_R.EllipseCache = {}

	local IMesh = _R.IMesh
	local VMatrix = _R.VMatrix

	local IMesh_Draw = IMesh.Draw
	local IMesh_BuildFromTriangles = IMesh.BuildFromTriangles

	local VMatrix_SetScale = VMatrix.SetScale
	local VMatrix_SetAngles = VMatrix.SetAngles
	local VMatrix_SetTranslation = VMatrix.SetTranslation

	local ellipse_angle = Angle()
	local ellipse_matrix = Matrix()
	local ellipse_position = Vector()

	local anchor_vertex = {
		pos = Vector(0, 0),
		u = 0.5, v = 0.5,
	}

	function Ellipse(width, height, start_angle, end_angle, distance, color)
		local ellipse_mesh

		local width, height = width / 2, height / 2
		local radius = math.max(width, height)
		local scale = Vector(width / radius, height / radius)

		local id = string.format(""%.2f-%.2f-%.2f-%.2f"", radius, start_angle, end_angle, distance)

		if not _R.EllipseCache[id] or not _R.EllipseCache[id]:IsValid() then
			local vertices = {}
			local step = distance / radius
			local start_angle, end_angle = math.rad(start_angle), math.rad(end_angle)

			local add_vertex do
				local vertex_count = 0

				function add_vertex(vertex_info)
					vertex_count = vertex_count + 1
					vertices[vertex_count] = vertex_info
					vertex_info.color = color or color_white
				end
			end

			for angle = start_angle, end_angle, step do
				local a, b = angle, angle + step
				b = math.min(b, end_angle)

				local a_cos, a_sin = math.cos(a), math.sin(a)
				local b_cos, b_sin = math.cos(b), math.sin(b)

				add_vertex(anchor_vertex)

				add_vertex({
					pos = Vector(a_cos * radius, a_sin * radius),
					u = 0.5 + a_cos / 2, v = 0.5 + a_sin / 2,
				})

				add_vertex({
					pos = Vector(b_cos * radius, b_sin * radius),
					u = 0.5 + b_cos / 2, v = 0.5 + b_sin / 2,
				})
			end

			ellipse_mesh = Mesh()
			IMesh_BuildFromTriangles(ellipse_mesh, vertices)

			_R.EllipseCache[id] = ellipse_mesh
		else
			ellipse_mesh = _R.EllipseCache[id]
		end

		return function(x, y, rotation)
			if not ellipse_mesh:IsValid() then
				_R.EllipseCache[id] = nil
				return false
			end

			ellipse_position[1] = x or 0
			ellipse_position[2] = y or 0

			ellipse_angle[2] = rotation or 0

			VMatrix_SetTranslation(ellipse_matrix, ellipse_position)
			VMatrix_SetAngles(ellipse_matrix, ellipse_angle)
			VMatrix_SetScale(ellipse_matrix, scale)

			cam.PushModelMatrix(ellipse_matrix)
				IMesh_Draw(ellipse_mesh)
			cam.PopModelMatrix()

			return true
		end
	end
end

return Ellipse



--[[

	USAGE

]]



local x, y = ScrW() / 2, ScrH() / 2
local ellipse_test = Ellipse(600, 600, 0, 360, 1, color_white)

hook.Add(""PostRender"", """", function()
	cam.Start2D()
		render.SetMaterial(Material(""vgui/white""))
		ellipse_test(x, y, (1 + math.sin(CurTime())) / 2 * 360)
	cam.End2D()
end)
"
j7DQ8qkB,💸G2A.com Free Gift Card Guide May 2024🎉,lookos13,Python,Monday 27th of May 2024 03:07:42 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Apple gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_3298130.pdf

Working as of:

28 May 2024"
JtYwD4Bq,🎉G2A.com Free Gift Card Guide May 2024🚀,pestinha,Python,Monday 27th of May 2024 03:01:47 PM CDT,"G2A.com free GC & games updated guide.
Any item for free on G2A.com including Xbox gift cards & everything else offered. 
This is the most updated version of the script. Any other posted will not work!

PDF guide:
https://drive.google.com/file/d/1tyNCx3qbxIPzM2COQcKkdidKr1jOuGhn/view?usp=g2a_refund_exploit_3298130.pdf

Working as of:

28 May 2024"
Qqcy67zb,2019-SE-01,D_L3,C,Monday 27th of May 2024 02:59:08 PM CDT,"#include <stdio.h>
#include <unistd.h>
#include <err.h>
#include <time.h>
#include <fcntl.h>
#include <stdbool.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/wait.h>

int getCode(int);
bool isCondition(time_t, time_t, int, int);
int writeToFile(int, time_t, time_t, int);
int convert(char*);

int getCode(int status) {
        if (WIFEXITED(status)) {
                return WEXITSTATUS(status);
        }
        return 129;
}

bool isCondition(time_t start, time_t end, int code, int limit) {
        return code != 0 && limit < (end - start);
}

int writeToFile(int fd, time_t start, time_t end, int exitCode) {
        return dprintf(fd, ""%ld %ld %d\n"", start, end, exitCode);
}

int convert(char* str) {
        int num = atoi(str);

        if (num == 0) {
                err(5, ""error converting"");
        } else if (num < 1 || num > 9) {
                errx(6, ""out of range"");
        }

        return num;
}

int main(int argc, char* argv[]) {
        //argv -> P secs Q args

        if (argc < 3) {
                errx(1, ""Invalid number of arguments"");
        }

        int limit = convert(argv[1]);

        int conditionInRow = 0;

        int fd = open(""run.log"", O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);

        if (-1 == fd) {
                err(4, ""error opening/creating file"");
        }

        while(conditionInRow != 2) {
                pid_t pid = fork();

                if(-1 == pid) {
                        err(2, ""error forking"");
                }

                if (0 == pid) {
                        execvp(argv[2], argv + 2);
                        err(3, ""error executing"");
                }

                time_t start = time(NULL);

                int status;
                wait(&status);

                time_t end = time(NULL);

                int code = getCode(status);

                if (writeToFile(fd, start, end, code) < 0) {
                        err(4, ""error writing to fd"");
                }

                if (isCondition(start, end, code, limit)) {
                        conditionInRow++;
                } else {
                        conditionInRow = 0;
                }
        }

        close(fd);
}
"
UJ1DsnAS,kustom notif v2,rrixh,Lua,Monday 27th of May 2024 02:49:29 PM CDT,"loadstring(game:HttpGet(""https://raw.githubusercontent.com/rrixh/uwuware/main/skripts/kustomAlert-rrixhmsgsendnotify"", true))();
rrixh(""your text here"")"
szhugJD0,PC Test 3,MagmaLP,Lua,Monday 27th of May 2024 02:38:30 PM CDT,"-- Öffne die Diskette zum Schreiben
local disk = peripheral.wrap(""right"") -- Ändere ""left"" entsprechend dem Slot, in den du die Diskette eingeführt hast
local file = fs.open(""disk/Test"", ""w"") -- Ersetze ""Dateiname.txt"" durch den gewünschten Dateinamen
local monitorSide = ""top"" -- Seite, an der der Monitor angeschlossen ist
local monitor = peripheral.wrap(monitorSide)

function writeTime()
    -- Schreibe den Text in die Datei
    file.write(os.clock())
    file.close()
    print(""Text erfolgreich auf die Diskette geschrieben!"")
    print(os.clock)
    stop()
end

-- Überwachen der Touch-Ereignisse
while true do
    local event, side, x, y = os.pullEvent(""monitor_touch"")
    monitor.clear()
    monitor.setCursorPos(1,1)
    monitor.write(""Monitor touched!"")
    writeTime()
end"
4R0eQ3PJ,CreateW,Oppaceted,Python,Monday 27th of May 2024 02:31:10 PM CDT,"def CreateW(A: list, B: list, column: list, headers: list) -> list:
    W = [0]*(len(A[0])+1)      
    for i in range(len(A)):
        if column[i][0] == 'y':
            for j in range(len(A[0])):
                W[j] += A[i][j]
            W[len(A[0])] += B[i]
    for j in range( len( A[0] ) ):
        if headers[j][0] == 'y':
            W[j] += 1
    return W

def ChangeFunctional(column: list, Functional_koeff: list) -> list:
    new_Functional = list(Functional_koeff)
    for i in range(len(column)):
        new_Functional[i] = Functional_koeff[int(column[i][2])-1]
    return new_Functional

def CreateF(A: list, B: list, Functional_koeff: list) -> list:
    F = [0]*(len(A[0])+1)
    for i in range(len(A)):
        for j in range(len(A[0])):
            F[j] += Functional_koeff[i]*A[i][j]
    for i in range(len(A)):
        F[len(F)-1] += B[i]*Functional_koeff[i]
    return F

def ChangeF(A: list, B: list, F: list, stroka_number: int, stolbec_number: int):
    F[len(F)-1] += B[stroka_number]*F[stolbec_number]
    for j in range(len(A[0])):
        for i in range(len(A)):    
            pass
        if j == stolbec_number:
            #print(f'A: {A[stroka_number][stolbec_number]}')#отладка
            #print(f'F[j]: {F[j]}')#отладка
            F[j] *= A[stroka_number][stolbec_number]
        else:
            F[j] += F[stolbec_number]*A[stroka_number][j]
    return F
"
YQFY6uL5,drawing,Oppaceted,Python,Monday 27th of May 2024 02:30:29 PM CDT,"from tabulate import tabulate

def ShowFunctional(N: int, Functional_koeff: list) -> None:
    for i in range(N):
        print(f""{Functional_koeff[i]}x_{i+1}"", end= """")
        if i == N-1:    #в range создается N-1 элементов (начинаем с нуля) => берем i == N-1
            print()
        else:
            print(""+"", end = """")

def ShowMatrixElement (A: list, i: int, j: int) -> None:
    for el_i in range(len(A)):
        print (""("", end="" "")
        for el_j in range(len(A[i])):
            print( ""   X"" if (el_i == i and el_j == j) else f""{A[el_i][el_j]:>4}"" , end="" "")
        print ("")"")
    
def ShowTable(A: list, B: list,  column: list, input_headers: list, input_W: list) -> None:
    headers = [''] + input_headers + ['B']
    data = []
    for i in range(len(A)):
        data.append([column[i]])
        data[i] = data[i] + [i for i in A[i]] + [B[i]]
    data += [['W'] + input_W]
    print( tabulate(tabular_data= data, headers=headers, tablefmt=""grid"") )
    "
0LvUDpGu,reduction_to_canonical_form,Oppaceted,Python,Monday 27th of May 2024 02:29:23 PM CDT,"#reduction_to_canonical_form
from drawing import ShowMatrixElement, ShowTable
from CreateW import CreateW, ChangeF

def SetToCanon (A: int, N: int, M: int, more: bool) -> None:
    for i in range(M):
        for j in range(M):
            if j == i:
                A[i].append( (more-0.5000)*(-2) )
            else:
                A[i].append(0)
    ShowMatrixElement(A, -1, -1)

def ChooseVariables(A: list, B: list, W: list) -> (int, int):
    #print(W) #отладка
    stolbec_number = 0
    for i in range( len(W) ):
        if W[i] < W[stolbec_number]:
            stolbec_number = i
    #print(W[stolbec_number])#отладка
    for i in range(len(A)):
        stroka_number = i
        if A[i][stolbec_number] != 0:
            break
    indicator = 3**10
    for i in range( len(A) ):
        if not B[i]*A[i][stolbec_number]<0:
            continue
        #if abs( B[i]/A[i][stolbec_number] ) < abs(B[stroka_number]/A[stroka_number][stolbec_number]) :
        if abs( B[i]/A[i][stolbec_number] ) < indicator :
            indicator = abs( B[i]/A[i][stolbec_number] )
            stroka_number = i
    #print(A[stroka_number][stolbec_number])#отладка
    return (stroka_number, stolbec_number)

def ChangeVariables(A: list, B: list, stroka_number: int, stolbec_number: int, column: list, headers: list, W_or_F: bool, F = None):
    B[stroka_number] = B[stroka_number]/A[ stroka_number ][ stolbec_number ]*-1
    for j in range( len(A[0]) ):
        if (j != stolbec_number):
            A[ stroka_number ][j] = A[ stroka_number ][j]/A[ stroka_number ][ stolbec_number ]*-1
    A[stroka_number][stolbec_number] = 1/A[ stroka_number ][ stolbec_number ]
    
    for i in range(len(A)):
        if i == stroka_number:
            continue
        else:
            B[i] += B[stroka_number]*A[i][stolbec_number]
            for j in range(len(A[0])):
                if j != stolbec_number:
                    A[i][j] += A[i][stolbec_number] * A[stroka_number][j]
            A[i][stolbec_number] *= A[stroka_number][stolbec_number]    

    column[stroka_number], headers[stolbec_number] = headers[stolbec_number], column[stroka_number]
    if not W_or_F:
        F = ChangeF( A, B, F, ChooseVariables(A, B, F)[0], ChooseVariables(A, B, F)[1])
    ShowTable(A, B, column, headers, (CreateW(A, B, column, headers) if W_or_F==True else F ) )

def RemoveExtraVars(A: list, B:list, N: int, column: list, headers: list) -> (list, list, list, list):
    new_A = A.copy()
    new_B = B.copy()
    new_column = column.copy()
    for i in range(len(A)):
        if int(column[i][2]) > N:
            new_A.remove(A[i])
            new_B.remove(B[i])
            new_column.remove(column[i])
    column = new_column.copy()
    B = new_B.copy()

    new_headers = headers.copy()
    new_A = Transpose(new_A)
    A = new_A.copy()
    for j in range(len(A)):
        if headers[j][0] == 'y':
            new_A.remove(A[j])
            new_headers.remove(headers[j])
    A = Transpose(new_A).copy()
    headers = new_headers.copy()
    return (A, B, column, headers)
def Transpose(A: list):
    A = [[A[j][i] for j in range(len(A))] for i in range(len(A[0]))]
    return A
def CheckCondition(F: list) -> bool:
    for i in range(len(F)-1):
        if F[i]<0:
            return True
    return False
"
DpMwekHt,main,Oppaceted,Python,Monday 27th of May 2024 02:28:22 PM CDT,"from drawing import *
from reduction_to_canonical_form import *
from CreateW import *
from os import system

N = int(input(""Введите число переменных: ""))
M = int(input(""Введите количество уравнения: ""))
Functional_koeff = []
for i in range(N):
    Functional_koeff.append(float(input(f""L_{i+1}: "") ) )
print(""f = "", end= """")
ShowFunctional(N, Functional_koeff)
B = [] #вектор
A = [] #матрица

for i in range(M):
    A.append([])
    for j in range(N):
        A[i].append(""*"")

for i in range(M):
    for j in range(N):
        system(""cls"")
        ShowMatrixElement(A, i, j)
        A[i][j]=(float(input(f""A_{i+1,j+1}="")))
system(""cls"")
ShowMatrixElement(A, -1, -1)
input()
system(""cls"")
for i in range(M):
    B.append(float(input(f""B_{i+1}="")))

#print(A)#отладка
#print(B)#отладка
input()
while(True): 
    system(""cls"")
    enter = input('Определите ограничение: ')
    if(enter ==  ""Больше""):
        more = True
        break
    elif(enter ==  ""Меньше""):
        more = False
        break
    #more = True if enter == ""Больше"" else False if enter == ""Меньше"" else exit(0)
    #Это тернарный оператор. Он нужен, чтобы писать в одну стрчоку вместо нескольких

for i in range(M):
    for j in range(N):
        print(f""{A[i][j]}x_{j+1}"", end = "" "")
        print(end=( (f""\u2265 {B[i]}\n"" if more else f""\u2264 {B[i]}\n"" ) if (j == N-1) else ""+ "" ) )
print(""F = "", end ="""");ShowFunctional(N, Functional_koeff)

SetToCanon(A, N, M, more)
input()
system(""cls"")

for i in range(M):
    for j in range( len( A[0] ) ):
        print(f""{A[i][j]}x_{j+1}"", end = "" "")
        if j != ( len(A[0])-1 ):
            print(end="" +  "")
    print(f""={B[i]}"", end=""\n\n"")

for i in range(M):
    for j in range( len( A[0] ) ):
        A[i][j] = A[i][j]*-1

headers = []        
for j in range(len(A[0])):
    headers.append(f'x_{j+1}')
column = []        
for i in range(len(A)):
    column.append(f'y_{i+1}')


input_W = CreateW(A, B, column, headers)    
ShowTable(A, B, column, headers, input_W)
for i in range(M):
    u=ChooseVariables(A, B, CreateW(A, B, column, headers))
    ChangeVariables(A, B, u[0], u[1], column, headers, True)
   
G = RemoveExtraVars(A, B, N, column, headers)
A = G[0]
B = G[1]
column = G[2]
headers = G[3]

Functional_koeff = ChangeFunctional(column, Functional_koeff)

input_F = CreateF(A, B, Functional_koeff)
ShowTable(A, B, column, headers, input_F)

while CheckCondition(input_F):
    u = ChooseVariables(A, B, input_F)
    ChangeVariables(A, B, u[0], u[1], column, headers, False, input_F)
"
VQnZGMbN,ДЗ Колода карт,TeT91,C#,Monday 27th of May 2024 02:25:51 PM CDT,"using System;
using System.Collections.Generic;

namespace CSLight
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player = new Player();
            Table table = new Table();

            Console.WriteLine(""Сколько карт дать игроку?"");

            string userInput = Console.ReadLine();

            if (int.TryParse(userInput, out int count))
            {
                table.GiveCardsToPlayer(count, player);
            }

            player.ShowCards();
            Console.ReadKey();
        }
    }

    enum Suit
    {
        Spades,
        Clubs,
        Hearts,
        Diamonds
    }

    class Table
    {
        private Deck _deck = new Deck();

        public void GiveCardsToPlayer(int count, Player player)
        {
            if (count > 0)
            {
                if (count > _deck.CardsCount)
                {
                    count = _deck.CardsCount;
                    Console.WriteLine($""В колоде недостаточно карт. Будет выдано {count} карт"");
                }
            }
            else
            {
                Console.WriteLine(""НЕВЕРНЫЙ ВВОД"");
            }

            for (int i = 0; i < count; i++)
            {
                player.AddCard(_deck.GetCard());
            }
        }
    }

    class Player
    {
        private List<Card> _cards = new List<Card>();

        public void AddCard(Card card)
        {
            _cards.Add(card);
        }

        public void ShowCards()
        {
            Console.WriteLine(""Карты на руке игрока: "");

            foreach (Card card in _cards)
            {
                Console.Write(card.Suit + "" "" + card.Value + "" "");
            }
        }
    }

    class Deck
    {
        private Stack<Card> _cards;
        private Random _random;

        public Deck()
        {
            _cards = new Stack<Card>();
            _random = new Random();

            for (int i = 0; i < CardsCount; i++)
            {
                _cards.Push(GenetrateCard());
            }
        }

        public int CardsCount { get; private set; } = 36;

        public Card GetCard()
        {
            return _cards.Pop();
        }

        private Card GenetrateCard()
        {
            int suitMaxValue = Enum.GetNames(typeof(Suit)).Length - 1;
            int maxValue = 10;

            Suit suit = (Suit)_random.Next(suitMaxValue);


            return new Card((Suit)_random.Next(suitMaxValue), _random.Next(maxValue));
        }
    }

    class Card
    {
        public Card(Suit suit, int value)
        {
            Suit = suit;
            Value = value;
        }

        public Suit Suit { get; private set; }
        public int Value { get; private set; }
    }
}

"
EUrwV3F0,alert(say_lulaslollipop),rrixh,Lua,Monday 27th of May 2024 02:23:39 PM CDT,"local function alert(say_lulaslollipop)
    local Lollypops=game;
    local lollipop=wait;
    local notifikation = Instance.new(""Message"");
notifikation.Text = say_lulaslollipop;
local lollypops = Lollypops.Workspace;
notifikation.Parent=lollypops;
    lollipop(3)
    notifikation:Destroy();
end
rrixh=alert;msg=alert;
notify=alert;send=alert;"
ydgFX9mz,Fluent Forms conditional logic,drkskwlkr,JSON,Monday 27th of May 2024 02:16:17 PM CDT,"[
  {
    ""id"": 8,
    ""title"": ""Blank Form (#8)"",
    ""status"": ""published"",
    ""appearance_settings"": null,
    ""form_fields"": {
      ""fields"": [
        {
          ""index"": 1,
          ""element"": ""container"",
          ""attributes"": [],
          ""settings"": {
            ""container_class"": """",
            ""conditional_logics"": [],
            ""is_width_auto_calc"": true
          },
          ""columns"": [
            {
              ""width"": """",
              ""left"": """",
              ""fields"": [
                {
                  ""index"": 7,
                  ""element"": ""select"",
                  ""attributes"": {
                    ""name"": ""dropdown"",
                    ""value"": ""1"",
                    ""id"": """",
                    ""class"": """"
                  },
                  ""settings"": {
                    ""dynamic_default_value"": """",
                    ""label"": ""Please state number of children"",
                    ""admin_field_label"": """",
                    ""help_message"": """",
                    ""container_class"": """",
                    ""label_placement"": """",
                    ""placeholder"": ""- Select -"",
                    ""advanced_options"": [
                      {
                        ""label"": ""1"",
                        ""value"": ""1"",
                        ""calc_value"": """",
                        ""id"": 0
                      },
                      {
                        ""label"": ""2"",
                        ""value"": ""2"",
                        ""calc_value"": """",
                        ""id"": 1
                      },
                      {
                        ""label"": ""3"",
                        ""value"": ""3"",
                        ""calc_value"": """",
                        ""image"": """",
                        ""id"": 2
                      },
                      {
                        ""label"": ""4"",
                        ""value"": ""4"",
                        ""calc_value"": """",
                        ""image"": """",
                        ""id"": 3
                      }
                    ],
                    ""calc_value_status"": false,
                    ""enable_image_input"": false,
                    ""values_visible"": false,
                    ""enable_select_2"": ""no"",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": true,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""randomize_options"": ""no""
                  },
                  ""editor_options"": {
                    ""title"": ""Dropdown"",
                    ""icon_class"": ""ff-edit-dropdown"",
                    ""element"": ""select"",
                    ""template"": ""select""
                  },
                  ""uniqElKey"": ""el_171683652127446""
                }
              ]
            }
          ],
          ""editor_options"": {
            ""title"": ""One Column Container"",
            ""icon_class"": ""dashicons dashicons-align-center""
          },
          ""uniqElKey"": ""el_1716836513717""
        },
        {
          ""index"": 2,
          ""element"": ""container"",
          ""attributes"": [],
          ""settings"": {
            ""container_class"": """",
            ""conditional_logics"": {
              ""type"": ""any"",
              ""status"": false,
              ""conditions"": [
                {
                  ""field"": """",
                  ""value"": """",
                  ""operator"": """"
                }
              ]
            },
            ""container_width"": """",
            ""is_width_auto_calc"": true
          },
          ""columns"": [
            {
              ""width"": 50,
              ""fields"": [
                {
                  ""index"": 0,
                  ""element"": ""input_name"",
                  ""attributes"": {
                    ""name"": ""names"",
                    ""data-type"": ""name-element""
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""admin_field_label"": ""1st Child Name"",
                    ""conditional_logics"": []
                  },
                  ""fields"": {
                    ""first_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""first_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Name"",
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Name"",
                        ""help_message"": """",
                        ""visible"": true,
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": true,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""middle_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""middle_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Middle Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Middle Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""last_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""last_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Last Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Last Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Name Fields"",
                    ""element"": ""name-fields"",
                    ""icon_class"": ""ff-edit-name"",
                    ""template"": ""nameFields""
                  },
                  ""uniqElKey"": ""el_1716836580710""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Age"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": false,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": """",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": """",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683661326527""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_1"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Height (cm)"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": true,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": ""40"",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": ""240"",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683663669782""
                }
              ]
            }
          ],
          ""editor_options"": {
            ""title"": ""Three Column Container"",
            ""icon_class"": ""ff-edit-three-column""
          },
          ""uniqElKey"": ""el_171683656055389"",
          ""modified"": true
        },
        {
          ""index"": 2,
          ""element"": ""container"",
          ""attributes"": [],
          ""settings"": {
            ""container_class"": """",
            ""conditional_logics"": {
              ""type"": ""any"",
              ""status"": true,
              ""conditions"": [
                {
                  ""field"": ""dropdown"",
                  ""value"": ""2"",
                  ""operator"": ""=""
                },
                {
                  ""field"": ""dropdown"",
                  ""value"": ""3"",
                  ""operator"": ""=""
                },
                {
                  ""field"": ""dropdown"",
                  ""value"": ""4"",
                  ""operator"": ""=""
                }
              ]
            },
            ""container_width"": """",
            ""is_width_auto_calc"": true
          },
          ""columns"": [
            {
              ""width"": 50,
              ""fields"": [
                {
                  ""index"": 0,
                  ""element"": ""input_name"",
                  ""attributes"": {
                    ""name"": ""names_1"",
                    ""data-type"": ""name-element""
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""admin_field_label"": ""2nd Child Name"",
                    ""conditional_logics"": []
                  },
                  ""fields"": {
                    ""first_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""first_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Name"",
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""2nd Child Name"",
                        ""help_message"": """",
                        ""visible"": true,
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": true,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""middle_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""middle_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Middle Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Middle Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""last_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""last_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Last Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Last Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Name Fields"",
                    ""element"": ""name-fields"",
                    ""icon_class"": ""ff-edit-name"",
                    ""template"": ""nameFields""
                  },
                  ""uniqElKey"": ""el_171683666239541""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_2"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Age"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": false,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": """",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": """",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683666239584""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_3"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Height (cm)"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": true,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": ""40"",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": ""240"",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683666239564""
                }
              ]
            }
          ],
          ""editor_options"": {
            ""title"": ""Three Column Container"",
            ""icon_class"": ""ff-edit-three-column""
          },
          ""uniqElKey"": ""el_171683666239588"",
          ""modified"": true
        },
        {
          ""index"": 2,
          ""element"": ""container"",
          ""attributes"": [],
          ""settings"": {
            ""container_class"": """",
            ""conditional_logics"": {
              ""type"": ""any"",
              ""status"": true,
              ""conditions"": [
                {
                  ""field"": ""dropdown"",
                  ""value"": ""3"",
                  ""operator"": ""=""
                },
                {
                  ""field"": ""dropdown"",
                  ""value"": ""4"",
                  ""operator"": ""=""
                }
              ]
            },
            ""container_width"": """",
            ""is_width_auto_calc"": true
          },
          ""columns"": [
            {
              ""width"": 50,
              ""fields"": [
                {
                  ""index"": 0,
                  ""element"": ""input_name"",
                  ""attributes"": {
                    ""name"": ""names_3"",
                    ""data-type"": ""name-element""
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""admin_field_label"": ""3rd Child Name"",
                    ""conditional_logics"": []
                  },
                  ""fields"": {
                    ""first_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""first_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Name"",
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""3rd Child Name"",
                        ""help_message"": """",
                        ""visible"": true,
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": true,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""middle_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""middle_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Middle Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Middle Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""last_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""last_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Last Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Last Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Name Fields"",
                    ""element"": ""name-fields"",
                    ""icon_class"": ""ff-edit-name"",
                    ""template"": ""nameFields""
                  },
                  ""uniqElKey"": ""el_17168368903851""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_6"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Age"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": false,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": """",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": """",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_17168368903850""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_7"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Height (cm)"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": true,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": ""40"",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": ""240"",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683689038566""
                }
              ]
            }
          ],
          ""editor_options"": {
            ""title"": ""Three Column Container"",
            ""icon_class"": ""ff-edit-three-column""
          },
          ""uniqElKey"": ""el_171683689038594"",
          ""modified"": true
        },
        {
          ""index"": 2,
          ""element"": ""container"",
          ""attributes"": [],
          ""settings"": {
            ""container_class"": """",
            ""conditional_logics"": {
              ""type"": ""any"",
              ""status"": true,
              ""conditions"": [
                {
                  ""field"": ""dropdown"",
                  ""value"": ""4"",
                  ""operator"": ""=""
                }
              ]
            },
            ""container_width"": """",
            ""is_width_auto_calc"": true
          },
          ""columns"": [
            {
              ""width"": 50,
              ""fields"": [
                {
                  ""index"": 0,
                  ""element"": ""input_name"",
                  ""attributes"": {
                    ""name"": ""names_2"",
                    ""data-type"": ""name-element""
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""admin_field_label"": ""Last Child Name"",
                    ""conditional_logics"": []
                  },
                  ""fields"": {
                    ""first_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""first_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Name"",
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Last Child Name"",
                        ""help_message"": """",
                        ""visible"": true,
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": true,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""middle_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""middle_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Middle Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Middle Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    },
                    ""last_name"": {
                      ""element"": ""input_text"",
                      ""attributes"": {
                        ""type"": ""text"",
                        ""name"": ""last_name"",
                        ""value"": """",
                        ""id"": """",
                        ""class"": """",
                        ""placeholder"": ""Last Name"",
                        ""required"": false,
                        ""maxlength"": """"
                      },
                      ""settings"": {
                        ""container_class"": """",
                        ""label"": ""Last Name"",
                        ""help_message"": """",
                        ""error_message"": """",
                        ""label_placement"": ""top"",
                        ""label_placement_options"": [
                          {
                            ""value"": """",
                            ""label"": ""Default""
                          },
                          {
                            ""value"": ""top"",
                            ""label"": ""Top""
                          },
                          {
                            ""value"": ""right"",
                            ""label"": ""Right""
                          },
                          {
                            ""value"": ""bottom"",
                            ""label"": ""Bottom""
                          },
                          {
                            ""value"": ""left"",
                            ""label"": ""Left""
                          },
                          {
                            ""value"": ""hide_label"",
                            ""label"": ""Hidden""
                          }
                        ],
                        ""visible"": false,
                        ""validation_rules"": {
                          ""required"": {
                            ""value"": false,
                            ""message"": ""This field is required"",
                            ""global_message"": ""This field is required"",
                            ""global"": true
                          }
                        },
                        ""conditional_logics"": []
                      },
                      ""editor_options"": {
                        ""template"": ""inputText""
                      }
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Name Fields"",
                    ""element"": ""name-fields"",
                    ""icon_class"": ""ff-edit-name"",
                    ""template"": ""nameFields""
                  },
                  ""uniqElKey"": ""el_171683688944576""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_4"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Age"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": false,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": """",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": """",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683688944572""
                }
              ]
            },
            {
              ""width"": 25,
              ""fields"": [
                {
                  ""index"": 6,
                  ""element"": ""input_number"",
                  ""attributes"": {
                    ""type"": ""number"",
                    ""name"": ""numeric-field_5"",
                    ""value"": """",
                    ""id"": """",
                    ""class"": """",
                    ""placeholder"": """"
                  },
                  ""settings"": {
                    ""container_class"": """",
                    ""label"": ""Height (cm)"",
                    ""admin_field_label"": """",
                    ""label_placement"": """",
                    ""help_message"": """",
                    ""number_step"": """",
                    ""prefix_label"": """",
                    ""suffix_label"": """",
                    ""numeric_formatter"": """",
                    ""validation_rules"": {
                      ""required"": {
                        ""value"": true,
                        ""message"": ""This field is required"",
                        ""global_message"": ""This field is required"",
                        ""global"": true
                      },
                      ""numeric"": {
                        ""value"": true,
                        ""message"": ""This field must contain numeric value"",
                        ""global_message"": ""This field must contain numeric value"",
                        ""global"": true
                      },
                      ""min"": {
                        ""value"": ""40"",
                        ""message"": ""Validation fails for minimum value"",
                        ""global_message"": ""Validation fails for minimum value"",
                        ""global"": true
                      },
                      ""max"": {
                        ""value"": ""240"",
                        ""message"": ""Validation fails for maximum value"",
                        ""global_message"": ""Validation fails for maximum value"",
                        ""global"": true
                      },
                      ""digits"": {
                        ""value"": """",
                        ""message"": ""Validation fails for limited digits"",
                        ""global_message"": ""Validation fails for limited digits"",
                        ""global"": true
                      }
                    },
                    ""conditional_logics"": [],
                    ""calculation_settings"": {
                      ""status"": false,
                      ""formula"": """"
                    }
                  },
                  ""editor_options"": {
                    ""title"": ""Numeric Field"",
                    ""icon_class"": ""ff-edit-numeric"",
                    ""template"": ""inputText""
                  },
                  ""uniqElKey"": ""el_171683688944550""
                }
              ]
            }
          ],
          ""editor_options"": {
            ""title"": ""Three Column Container"",
            ""icon_class"": ""ff-edit-three-column""
          },
          ""uniqElKey"": ""el_171683688944539"",
          ""modified"": true
        }
      ],
      ""submitButton"": {
        ""uniqElKey"": ""el_1524065200616"",
        ""element"": ""button"",
        ""attributes"": {
          ""type"": ""submit"",
          ""class"": """"
        },
        ""settings"": {
          ""align"": ""left"",
          ""button_style"": ""default"",
          ""container_class"": """",
          ""help_message"": """",
          ""background_color"": ""#1a7efb"",
          ""button_size"": ""md"",
          ""color"": ""#ffffff"",
          ""button_ui"": {
            ""type"": ""default"",
            ""text"": ""Submit Form"",
            ""img_url"": """"
          }
        },
        ""editor_options"": {
          ""title"": ""Submit Button""
        }
      }
    },
    ""has_payment"": ""0"",
    ""type"": ""form"",
    ""conditions"": null,
    ""created_by"": ""1"",
    ""created_at"": ""2024-05-27 21:57:30"",
    ""updated_at"": ""2024-05-27 22:13:18"",
    ""form_meta"": [
      {
        ""id"": 84,
        ""form_id"": ""8"",
        ""meta_key"": ""formSettings"",
        ""value"": ""{\""confirmation\"":{\""redirectTo\"":\""samePage\"",\""messageToShow\"":\""Thank you for your message. We will get in touch with you shortly\"",\""customPage\"":null,\""samePageFormBehavior\"":\""hide_form\"",\""customUrl\"":null},\""restrictions\"":{\""limitNumberOfEntries\"":{\""enabled\"":false,\""numberOfEntries\"":null,\""period\"":\""total\"",\""limitReachedMsg\"":\""Maximum number of entries exceeded.\""},\""scheduleForm\"":{\""enabled\"":false,\""start\"":null,\""end\"":null,\""selectedDays\"":null,\""pendingMsg\"":\""Form submission is not started yet.\"",\""expiredMsg\"":\""Form submission is now closed.\""},\""requireLogin\"":{\""enabled\"":false,\""requireLoginMsg\"":\""You must be logged in to submit the form.\""},\""denyEmptySubmission\"":{\""enabled\"":false,\""message\"":\""Sorry, you cannot submit an empty form. Let's hear what you wanna say.\""},\""restrictForm\"":{\""enabled\"":false,\""fields\"":{\""ip\"":{\""status\"":false,\""values\"":\""\"",\""message\"":\""Sorry! You can't submit a form from your IP address.\"",\""validation_type\"":\""fail_on_condition_met\""},\""country\"":{\""status\"":false,\""values\"":[],\""message\"":\""Sorry! You can't submit a form the country you are residing.\"",\""validation_type\"":\""fail_on_condition_met\""},\""keywords\"":{\""status\"":false,\""values\"":\""\"",\""message\"":\""Sorry! Your submission contains some restricted keywords.\""}}}},\""layout\"":{\""labelPlacement\"":\""top\"",\""helpMessagePlacement\"":\""with_label\"",\""errorMessagePlacement\"":\""inline\""},\""delete_entry_on_submission\"":\""no\"",\""conv_form_per_step_save\"":false,\""conv_form_resume_from_last_step\"":false}""
      },
      {
        ""id"": 85,
        ""form_id"": ""8"",
        ""meta_key"": ""template_name"",
        ""value"": ""blank_form""
      },
      {
        ""id"": 86,
        ""form_id"": ""8"",
        ""meta_key"": ""notifications"",
        ""value"": ""{\""name\"":\""Admin Notification Email\"",\""sendTo\"":{\""type\"":\""email\"",\""email\"":\""{wp.admin_email}\"",\""field\"":\""email\"",\""routing\"":[{\""email\"":null,\""field\"":null,\""operator\"":\""=\"",\""value\"":null}]},\""fromName\"":\""\"",\""fromEmail\"":\""\"",\""replyTo\"":\""\"",\""bcc\"":\""\"",\""subject\"":\""[{inputs.names}] New Form Submission\"",\""message\"":\""<p>{all_data}<\\\/p>\\n<p>This form submitted at: {embed_post.permalink}<\\\/p>\"",\""conditionals\"":{\""status\"":false,\""type\"":\""all\"",\""conditions\"":[{\""field\"":null,\""operator\"":\""=\"",\""value\"":null}]},\""enabled\"":false,\""email_template\"":\""\""}""
      },
      {
        ""id"": 87,
        ""form_id"": ""8"",
        ""meta_key"": ""step_data_persistency_status"",
        ""value"": ""no""
      },
      {
        ""id"": 88,
        ""form_id"": ""8"",
        ""meta_key"": ""form_save_state_status"",
        ""value"": ""no""
      },
      {
        ""id"": 89,
        ""form_id"": ""8"",
        ""meta_key"": ""_primary_email_field"",
        ""value"": """"
      },
      {
        ""id"": 90,
        ""form_id"": ""8"",
        ""meta_key"": ""ffs_default"",
        ""value"": """"
      },
      {
        ""id"": 91,
        ""form_id"": ""8"",
        ""meta_key"": ""_ff_form_styles"",
        ""value"": ""[]""
      }
    ],
    ""metas"": [
      {
        ""id"": 84,
        ""form_id"": ""8"",
        ""meta_key"": ""formSettings"",
        ""value"": ""{\""confirmation\"":{\""redirectTo\"":\""samePage\"",\""messageToShow\"":\""Thank you for your message. We will get in touch with you shortly\"",\""customPage\"":null,\""samePageFormBehavior\"":\""hide_form\"",\""customUrl\"":null},\""restrictions\"":{\""limitNumberOfEntries\"":{\""enabled\"":false,\""numberOfEntries\"":null,\""period\"":\""total\"",\""limitReachedMsg\"":\""Maximum number of entries exceeded.\""},\""scheduleForm\"":{\""enabled\"":false,\""start\"":null,\""end\"":null,\""selectedDays\"":null,\""pendingMsg\"":\""Form submission is not started yet.\"",\""expiredMsg\"":\""Form submission is now closed.\""},\""requireLogin\"":{\""enabled\"":false,\""requireLoginMsg\"":\""You must be logged in to submit the form.\""},\""denyEmptySubmission\"":{\""enabled\"":false,\""message\"":\""Sorry, you cannot submit an empty form. Let's hear what you wanna say.\""},\""restrictForm\"":{\""enabled\"":false,\""fields\"":{\""ip\"":{\""status\"":false,\""values\"":\""\"",\""message\"":\""Sorry! You can't submit a form from your IP address.\"",\""validation_type\"":\""fail_on_condition_met\""},\""country\"":{\""status\"":false,\""values\"":[],\""message\"":\""Sorry! You can't submit a form the country you are residing.\"",\""validation_type\"":\""fail_on_condition_met\""},\""keywords\"":{\""status\"":false,\""values\"":\""\"",\""message\"":\""Sorry! Your submission contains some restricted keywords.\""}}}},\""layout\"":{\""labelPlacement\"":\""top\"",\""helpMessagePlacement\"":\""with_label\"",\""errorMessagePlacement\"":\""inline\""},\""delete_entry_on_submission\"":\""no\"",\""conv_form_per_step_save\"":false,\""conv_form_resume_from_last_step\"":false}""
      },
      {
        ""id"": 85,
        ""form_id"": ""8"",
        ""meta_key"": ""template_name"",
        ""value"": ""blank_form""
      },
      {
        ""id"": 86,
        ""form_id"": ""8"",
        ""meta_key"": ""notifications"",
        ""value"": ""{\""name\"":\""Admin Notification Email\"",\""sendTo\"":{\""type\"":\""email\"",\""email\"":\""{wp.admin_email}\"",\""field\"":\""email\"",\""routing\"":[{\""email\"":null,\""field\"":null,\""operator\"":\""=\"",\""value\"":null}]},\""fromName\"":\""\"",\""fromEmail\"":\""\"",\""replyTo\"":\""\"",\""bcc\"":\""\"",\""subject\"":\""[{inputs.names}] New Form Submission\"",\""message\"":\""<p>{all_data}<\\\/p>\\n<p>This form submitted at: {embed_post.permalink}<\\\/p>\"",\""conditionals\"":{\""status\"":false,\""type\"":\""all\"",\""conditions\"":[{\""field\"":null,\""operator\"":\""=\"",\""value\"":null}]},\""enabled\"":false,\""email_template\"":\""\""}""
      },
      {
        ""id"": 87,
        ""form_id"": ""8"",
        ""meta_key"": ""step_data_persistency_status"",
        ""value"": ""no""
      },
      {
        ""id"": 88,
        ""form_id"": ""8"",
        ""meta_key"": ""form_save_state_status"",
        ""value"": ""no""
      },
      {
        ""id"": 89,
        ""form_id"": ""8"",
        ""meta_key"": ""_primary_email_field"",
        ""value"": """"
      },
      {
        ""id"": 90,
        ""form_id"": ""8"",
        ""meta_key"": ""ffs_default"",
        ""value"": """"
      },
      {
        ""id"": 91,
        ""form_id"": ""8"",
        ""meta_key"": ""_ff_form_styles"",
        ""value"": ""[]""
      }
    ]
  }
]"
HN11AnrX,PC Test 2,MagmaLP,Lua,Monday 27th of May 2024 02:08:43 PM CDT,"-- Öffne die Diskette zum Lesen
local disk = peripheral.wrap(""left"") -- Ändere ""left"" entsprechend dem Slot, in den du die Diskette eingeführt hast

-- Gib den Inhalt aus
print(""Inhalt der Diskette:"")
print(content)

local function demoProgram()
    print(""Demo-Programm gestartet!"")
end

-- Hauptschleife zur Überprüfung der Zeit
while true do
    -- Lese den Inhalt der Datei
	local file = fs.open(""disk/Test"", ""r"")
    lastTouchTime = tonumber(file.readAll())
    file.close()
    
    if lastTouchTime ~= nil then
        local currentTime = os.time()
        print(""CT: "" .. currentTime)
        if math.abs(currentTime - lastTouchTime) > 1 then
            demoProgram()
        end
    end
    
    sleep(3) -- Überprüfung jede Sekunde
    print(""sleep"")
    print(""LTT "" .. lastTouchTime)
end
"
