id,title,username,language,date,content
6xvmRV85,2024-01-24_stats.json,rdp_snitch,JSON,Wednesday 24th of January 2024 06:16:17 PM CDT,"{
  ""ip"": {
    ""84.9.179.179"": 4,
    ""80.243.58.249"": 2,
    ""216.73.161.81"": 2,
    ""106.58.178.111"": 8,
    ""203.56.40.167"": 8,
    ""194.165.17.21"": 38,
    ""36.111.146.78"": 4,
    ""43.133.56.30"": 4,
    ""150.223.76.57"": 6,
    ""222.93.104.67"": 8,
    ""117.145.27.42"": 12,
    ""43.243.136.202"": 26,
    ""111.173.80.147"": 8,
    ""203.56.4.242"": 4,
    ""111.161.41.132"": 14,
    ""103.240.84.186"": 6,
    ""101.36.112.125"": 2,
    ""27.8.44.19"": 18,
    ""62.6.252.50"": 2,
    ""110.40.34.231"": 26,
    ""121.5.74.35"": 2,
    ""124.67.254.109"": 24,
    ""134.175.53.186"": 2,
    ""109.69.7.157"": 18,
    ""106.58.164.84"": 10,
    ""42.193.192.91"": 2,
    ""101.32.126.66"": 6,
    ""12.193.127.18"": 18,
    ""211.91.60.69"": 6,
    ""95.130.227.198"": 4,
    ""122.227.146.74"": 10,
    ""113.200.222.57"": 10,
    ""124.67.115.210"": 10,
    ""101.43.49.131"": 2,
    ""103.215.81.133"": 6,
    ""45.87.212.184"": 2,
    ""36.111.174.56"": 26,
    ""101.33.237.209"": 2,
    ""45.141.26.228"": 6,
    ""106.225.199.92"": 2,
    ""103.39.222.217"": 6,
    ""106.58.212.201"": 2,
    ""172.233.17.43"": 2,
    ""208.53.61.115"": 4,
    ""106.75.20.182"": 4,
    ""219.144.67.36"": 4,
    ""106.58.165.88"": 6,
    ""27.128.239.46"": 4,
    ""140.246.215.173"": 4,
    ""45.141.26.52"": 2,
    ""205.210.31.109"": 6,
    ""121.17.7.75"": 2,
    ""150.223.35.239"": 4,
    ""62.204.41.195"": 12,
    ""45.227.254.8"": 4,
    ""82.32.227.142"": 2,
    ""216.202.197.116"": 14,
    ""120.202.49.41"": 2,
    ""222.219.129.74"": 4,
    ""43.128.12.208"": 2,
    ""113.30.188.235"": 2,
    ""43.134.171.213"": 4,
    ""125.88.211.59"": 6,
    ""141.98.9.34"": 2,
    ""45.227.254.49"": 8,
    ""106.58.217.61"": 8,
    ""150.223.46.21"": 6,
    ""80.151.251.216"": 14,
    ""150.223.79.15"": 2,
    ""111.231.15.224"": 4,
    ""111.173.80.148"": 8,
    ""103.245.195.202"": 18,
    ""150.223.13.195"": 4,
    ""106.225.199.24"": 6,
    ""216.73.161.24"": 2,
    ""115.236.75.10"": 4,
    ""180.76.153.250"": 4,
    ""222.219.240.13"": 6,
    ""113.108.8.125"": 2,
    ""185.170.144.3"": 4,
    ""203.57.39.224"": 6,
    ""14.18.41.26"": 6,
    ""101.32.116.25"": 6,
    ""195.97.20.99"": 4,
    ""106.58.212.195"": 4,
    ""106.58.164.95"": 4,
    ""116.73.243.187"": 4,
    ""150.223.66.55"": 2,
    ""106.116.169.71"": 2,
    ""218.90.120.19"": 6,
    ""205.210.31.111"": 6,
    ""175.4.26.179"": 8,
    ""43.134.33.208"": 2,
    ""185.106.176.8"": 4,
    ""20.127.108.193"": 2,
    ""183.134.89.41"": 6,
    ""106.58.210.135"": 4,
    ""106.58.221.13"": 2,
    ""1.168.138.101"": 2,
    ""47.94.109.53"": 18,
    ""220.76.251.176"": 12,
    ""52.80.19.192"": 4,
    ""39.98.127.243"": 8,
    ""43.134.0.225"": 4,
    ""106.75.123.252"": 4,
    ""117.33.174.14"": 2,
    ""2.57.149.186"": 6,
    ""194.165.16.73"": 4,
    ""182.61.55.68"": 4,
    ""103.210.237.233"": 2,
    ""176.111.174.250"": 6,
    ""123.58.207.151"": 2,
    ""212.186.143.100"": 4,
    ""106.58.178.2"": 6,
    ""106.58.211.156"": 4,
    ""196.190.117.7"": 2,
    ""198.235.24.87"": 6,
    ""42.51.39.209"": 2,
    ""37.19.200.118"": 2,
    ""169.150.254.77"": 6,
    ""1.82.238.130"": 2,
    ""147.135.91.23"": 8,
    ""150.223.32.106"": 2,
    ""118.193.44.118"": 4,
    ""74.105.22.131"": 10,
    ""203.57.46.218"": 4,
    ""87.251.75.64"": 6,
    ""106.58.217.149"": 4,
    ""36.111.166.97"": 2,
    ""220.76.61.114"": 2,
    ""106.58.184.58"": 2,
    ""45.141.26.68"": 2,
    ""106.58.219.212"": 2,
    ""61.171.113.104"": 2,
    ""63.135.161.145"": 2,
    ""103.38.236.147"": 10,
    ""205.210.31.174"": 6,
    ""87.191.150.194"": 2,
    ""120.48.64.252"": 4
  },
  ""asn"": {
    ""AS25310"": 4,
    ""AS21413"": 2,
    ""AS206092"": 6,
    ""AS4134"": 118,
    ""AS58519"": 84,
    ""AS48721"": 42,
    ""AS132203"": 28,
    ""AS9808"": 14,
    ""AS4808"": 26,
    ""AS148981"": 16,
    ""AS4837"": 90,
    ""AS135377"": 8,
    ""AS2856"": 2,
    ""AS38283"": 26,
    ""AS45090"": 14,
    ""AS21183"": 18,
    ""AS7018"": 18,
    ""AS35682"": 4,
    ""AS55933"": 6,
    ""AS9009"": 2,
    ""AS142299"": 10,
    ""AS134238"": 8,
    ""AS4816"": 6,
    ""AS63949"": 2,
    ""AS17341"": 4,
    ""AS23724"": 8,
    ""AS134768"": 8,
    ""AS396982"": 24,
    ""AS59425"": 12,
    ""AS267784"": 12,
    ""AS5089"": 2,
    ""AS3356"": 14,
    ""AS41436"": 2,
    ""AS58466"": 6,
    ""AS209588"": 2,
    ""AS3320"": 16,
    ""AS9541"": 18,
    ""AS38365"": 12,
    ""AS197414"": 4,
    ""AS3329"": 4,
    ""AS17488"": 4,
    ""AS63838"": 8,
    ""AS42960"": 4,
    ""AS8075"": 2,
    ""AS58461"": 6,
    ""AS3462"": 2,
    ""AS37963"": 26,
    ""AS4766"": 14,
    ""AS55960"": 4,
    ""AS208312"": 6,
    ""AS142403"": 2,
    ""AS57523"": 6,
    ""AS8412"": 4,
    ""AS24757"": 2,
    ""AS56005"": 2,
    ""AS212238"": 8,
    ""AS16276"": 8,
    ""AS701"": 10,
    ""AS208091"": 6,
    ""AS4812"": 2,
    ""AS149148"": 10
  },
  ""isp"": {
    ""Bulldog Communications"": 4,
    ""envia TEL GmbH"": 2,
    ""Ipxo Limited"": 4,
    ""Chinanet"": 118,
    ""Cloud Computing Corporation"": 84,
    ""Flyservers S.A."": 56,
    ""Aceville Pte.ltd"": 22,
    ""China Mobile communications corporation"": 14,
    ""China Unicom Beijing Province Network"": 26,
    ""China Telecom"": 22,
    ""China Unicom Tianjin Province Network"": 14,
    ""China Unicom CHINA169 Network"": 6,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 8,
    ""China Unicom Chongqing Province Network"": 18,
    ""British Telecommunications PLC"": 2,
    ""CHINANET SiChuan Telecom Internet Data Center"": 26,
    ""China Internet Network Information Center"": 4,
    ""CNC Group CHINA169 Neimeng Province Network"": 34,
    ""Shenzhen Tencent Computer Systems Company Limited"": 16,
    ""Vodafone Network"": 18,
    ""AT&T Services, Inc."": 18,
    ""CHINA UNICOM China169 Backbone"": 8,
    ""Best Internet Solution XK"": 4,
    ""CNC Group CHINA169 Shannxi Province Network"": 10,
    ""Cloudie Limited"": 6,
    ""M247 Europe SRL"": 2,
    ""CLOUDFOREST CO., LTD"": 10,
    ""CHINANET Jiangx province IDC network"": 8,
    ""China Telecom (Group)"": 8,
    ""Akamai Technologies, Inc."": 2,
    ""C7 Data Centers"": 4,
    ""UCLOUD"": 8,
    ""CHINANET SHAANXI province Cloud Base network"": 8,
    ""Google LLC"": 24,
    ""Horizon LLC"": 12,
    ""Virgin Media"": 2,
    ""Level 3 Communications"": 14,
    ""Kamatera Inc"": 2,
    ""Deutsche Telekom AG"": 16,
    ""Cyber Internet Services (Private) Limited"": 18,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 12,
    ""Xhost Internet Solutions LP"": 10,
    ""CHINANET Guangdong province network"": 6,
    ""HOL"": 4,
    ""Hathway IP over Cable Internet Access"": 4,
    ""Hengyang"": 8,
    ""VH-GLOBAL"": 4,
    ""Microsoft Corporation"": 2,
    ""Chunghwa Telecom Co., Ltd."": 2,
    ""Hangzhou Alibaba Advertising Co"": 26,
    ""Korea Telecom"": 14,
    ""Beijing Guanghuan Xinwang Digital"": 4,
    ""Red Byte LLC"": 6,
    ""Yisu Cloud LTD"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""T-Mobile Austria GmbH"": 4,
    ""Ethiotelecom"": 2,
    ""China Unicom Henan Province network"": 2,
    ""Datacamp Limited"": 8,
    ""OVH SAS"": 8,
    ""Verizon Business"": 10,
    ""Rockion LLC"": 2,
    ""Phu Hai Computer Co., Ltd"": 10
  },
  ""org"": {
    ""Unknown"": 142,
    ""envia.tel GmbH"": 2,
    ""Bandito Networks"": 4,
    ""Chinanet YN"": 76,
    ""Chinanet FJ"": 22,
    ""Flyservers S.A"": 42,
    ""Chinanet ZJ"": 32,
    ""Chinanet SD"": 30,
    ""Chinanet JS"": 14,
    ""China Mobile"": 14,
    ""Beijing yunchuang communication Technology Co."": 26,
    ""Chinanet HB"": 16,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 6,
    ""Btnet"": 2,
    ""Chengdu Giant Times Technology Co., Ltd"": 26,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 8,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 6,
    ""ATT SERVICES INC- PEG"": 18,
    ""Unicom"": 6,
    ""Best Internet Solution XK"": 4,
    ""Ningbo chaoji mamawangluojishu ltd"": 10,
    ""Netads Online Limited"": 6,
    ""M247 LTD"": 2,
    ""Cloudforest CO., LTD"": 10,
    ""Chinanet JX"": 8,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 6,
    ""Akamai Technologies, Inc."": 2,
    ""VegaDigital Solutions"": 4,
    ""Shanghai UCloud Information Technology Company Limited"": 8,
    ""Chinanet SN"": 8,
    ""Chinanet HE"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""HS City Authority"": 2,
    ""Horizon LLC"": 12,
    ""UAB Host Baltic"": 12,
    ""Fort Wayne Internet, LLC"": 14,
    ""Cloudwebmanage EU"": 2,
    ""Alviva Holding Limited"": 2,
    ""Deutsche Telekom AG"": 16,
    ""Cyber Internet Services Pakistan"": 18,
    ""Hangzhou xiaoshan public transportation co., LTD"": 4,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 12,
    ""Chinanet GD"": 8,
    ""Xhostis"": 4,
    ""Koumakis Emm. S.A."": 4,
    ""Hathway Cable and Datacom Limited"": 4,
    ""Chinanet HN"": 8,
    ""Tencent Cloud Computing"": 6,
    ""VH Global Limited"": 4,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Chunghwa Telecom Co. Ltd."": 2,
    ""Aliyun Computing Co., LTD"": 26,
    ""Kornet"": 12,
    ""AWS EC2 (cn-north-1)"": 4,
    ""Chang Way Technologies Co. Limited"": 12,
    ""HK Kwaifong Group Limited"": 2,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""LBR GmbH"": 4,
    ""Henan Telcom Union Technology Co., LTD"": 2,
    ""Cdnext DAL"": 8,
    ""OVH US LLC"": 8,
    ""Verizon Business"": 10,
    ""Xhost Internet Solutions"": 6,
    ""Korea Telecom"": 2,
    ""Chinanet SH"": 2,
    ""Ipxo LLC"": 2,
    ""Phu Hai Computer Co., Ltd"": 10
  },
  ""regionName"": {
    ""England"": 8,
    ""Brandenburg"": 2,
    ""New York"": 6,
    ""Yunnan"": 76,
    ""Fujian"": 32,
    ""Kaunas"": 42,
    ""Zhejiang"": 52,
    ""North West"": 14,
    ""Shandong"": 30,
    ""Jiangsu"": 14,
    ""Guangdong"": 40,
    ""Beijing"": 90,
    ""Hubei"": 16,
    ""Tianjin"": 14,
    ""Central and Western District"": 18,
    ""Chongqing"": 18,
    ""Sichuan"": 26,
    ""Inner Mongolia"": 24,
    ""Tirana"": 18,
    ""Central Singapore"": 12,
    ""Texas"": 26,
    ""Tashkent"": 4,
    ""Shaanxi"": 12,
    ""Shanghai"": 8,
    ""Hesse"": 2,
    ""Bangkok"": 10,
    ""Jiangxi"": 8,
    ""Sao Paulo"": 2,
    ""Utah"": 4,
    ""Shanxi"": 6,
    ""Hebei"": 8,
    ""California"": 24,
    ""Moscow"": 18,
    ""Vilnius"": 12,
    ""Scotland"": 2,
    ""Indiana"": 14,
    ""North Holland"": 14,
    ""Bavaria"": 14,
    ""Sindh"": 18,
    ""Attica"": 4,
    ""Karnataka"": 4,
    ""Hunan"": 8,
    ""Virginia"": 10,
    ""Taichung City"": 2,
    ""Seoul"": 14,
    ""Lesser Poland"": 6,
    ""Tsuen Wan District"": 2,
    ""Vienna"": 4,
    ""Addis Ababa"": 2,
    ""Henan"": 2,
    ""New Jersey"": 10,
    ""Hanoi"": 10,
    ""Rheinland-Pfalz"": 2
  },
  ""country"": {
    ""United Kingdom"": 10,
    ""Germany"": 20,
    ""United States"": 94,
    ""China"": 484,
    ""Lithuania"": 54,
    ""Singapore"": 26,
    ""Hong Kong"": 20,
    ""Albania"": 18,
    ""Uzbekistan"": 4,
    ""Thailand"": 10,
    ""Brazil"": 2,
    ""Russia"": 18,
    ""The Netherlands"": 14,
    ""Pakistan"": 18,
    ""Greece"": 4,
    ""India"": 4,
    ""Taiwan"": 2,
    ""South Korea"": 14,
    ""Poland"": 6,
    ""Austria"": 4,
    ""Ethiopia"": 2,
    ""Vietnam"": 10
  },
  ""account"": {
    ""142.93.8.59"": 672,
    ""(empty)"": 8,
    ""Test"": 32,
    ""hello"": 56,
    ""cnbPTTNrz"": 2,
    ""IgptRb"": 2,
    ""nMhvfl"": 2,
    ""Administr"": 18,
    ""MNKgsKuxe"": 2,
    ""VXAVjH"": 2,
    ""vGLgLI"": 2,
    ""hgdffbrq"": 12,
    ""Domain"": 14,
    ""Administrator"": 2,
    ""rjaSqvBSM"": 2,
    ""silyyl"": 2,
    ""RqIMZj"": 2,
    ""pcyRCCDxT"": 2,
    ""tIxMEm"": 2,
    ""nQFXqC"": 2
  },
  ""keyboard"": {
    ""Unknown"": 838
  },
  ""client_build"": {
    ""Unknown"": 838
  },
  ""client_name"": {
    ""Unknown"": 838
  },
  ""ip_type"": {
    ""Unknown"": 572,
    ""mobile & proxy"": 4,
    ""hosting"": 200,
    ""mobile"": 22,
    ""hosting & proxy"": 12,
    ""proxy"": 28
  }
}"
9CjRhytG,2024-01-24_stats.json,rdp_snitch,JSON,Wednesday 24th of January 2024 06:15:09 PM CDT,"{
  ""ip"": {
    ""84.9.179.179"": 2,
    ""80.243.58.249"": 1,
    ""216.73.161.81"": 1,
    ""106.58.178.111"": 4,
    ""203.56.40.167"": 4,
    ""194.165.17.21"": 19,
    ""36.111.146.78"": 2,
    ""43.133.56.30"": 2,
    ""150.223.76.57"": 3,
    ""222.93.104.67"": 4,
    ""117.145.27.42"": 6,
    ""43.243.136.202"": 13,
    ""111.173.80.147"": 4,
    ""203.56.4.242"": 2,
    ""111.161.41.132"": 7,
    ""103.240.84.186"": 3,
    ""101.36.112.125"": 1,
    ""27.8.44.19"": 9,
    ""62.6.252.50"": 1,
    ""110.40.34.231"": 13,
    ""121.5.74.35"": 1,
    ""124.67.254.109"": 12,
    ""134.175.53.186"": 1,
    ""109.69.7.157"": 9,
    ""106.58.164.84"": 5,
    ""42.193.192.91"": 1,
    ""101.32.126.66"": 3,
    ""12.193.127.18"": 9,
    ""211.91.60.69"": 3,
    ""95.130.227.198"": 2,
    ""122.227.146.74"": 5,
    ""113.200.222.57"": 5,
    ""124.67.115.210"": 5,
    ""101.43.49.131"": 1,
    ""103.215.81.133"": 3,
    ""45.87.212.184"": 1,
    ""36.111.174.56"": 13,
    ""101.33.237.209"": 1,
    ""45.141.26.228"": 3,
    ""106.225.199.92"": 1,
    ""103.39.222.217"": 3,
    ""106.58.212.201"": 1,
    ""172.233.17.43"": 1,
    ""208.53.61.115"": 2,
    ""106.75.20.182"": 2,
    ""219.144.67.36"": 2,
    ""106.58.165.88"": 3,
    ""27.128.239.46"": 2,
    ""140.246.215.173"": 2,
    ""45.141.26.52"": 1,
    ""205.210.31.109"": 3,
    ""121.17.7.75"": 1,
    ""150.223.35.239"": 2,
    ""62.204.41.195"": 6,
    ""45.227.254.8"": 2,
    ""82.32.227.142"": 1,
    ""216.202.197.116"": 7,
    ""120.202.49.41"": 1,
    ""222.219.129.74"": 2,
    ""43.128.12.208"": 1,
    ""113.30.188.235"": 1,
    ""43.134.171.213"": 2,
    ""125.88.211.59"": 3,
    ""141.98.9.34"": 1,
    ""45.227.254.49"": 4,
    ""106.58.217.61"": 4,
    ""150.223.46.21"": 3,
    ""80.151.251.216"": 7,
    ""150.223.79.15"": 1,
    ""111.231.15.224"": 2,
    ""111.173.80.148"": 4,
    ""103.245.195.202"": 9,
    ""150.223.13.195"": 2,
    ""106.225.199.24"": 3,
    ""216.73.161.24"": 1,
    ""115.236.75.10"": 2,
    ""180.76.153.250"": 2,
    ""222.219.240.13"": 3,
    ""113.108.8.125"": 1,
    ""185.170.144.3"": 2,
    ""203.57.39.224"": 3,
    ""14.18.41.26"": 3,
    ""101.32.116.25"": 3,
    ""195.97.20.99"": 2,
    ""106.58.212.195"": 2,
    ""106.58.164.95"": 2,
    ""116.73.243.187"": 2,
    ""150.223.66.55"": 1,
    ""106.116.169.71"": 1,
    ""218.90.120.19"": 3,
    ""205.210.31.111"": 3,
    ""175.4.26.179"": 4,
    ""43.134.33.208"": 1,
    ""185.106.176.8"": 2,
    ""20.127.108.193"": 1,
    ""183.134.89.41"": 3,
    ""106.58.210.135"": 2,
    ""106.58.221.13"": 1,
    ""1.168.138.101"": 1,
    ""47.94.109.53"": 9,
    ""220.76.251.176"": 6,
    ""52.80.19.192"": 2,
    ""39.98.127.243"": 4,
    ""43.134.0.225"": 2,
    ""106.75.123.252"": 2,
    ""117.33.174.14"": 1,
    ""2.57.149.186"": 3,
    ""194.165.16.73"": 2,
    ""182.61.55.68"": 2,
    ""103.210.237.233"": 1,
    ""176.111.174.250"": 3,
    ""123.58.207.151"": 1,
    ""212.186.143.100"": 2,
    ""106.58.178.2"": 3,
    ""106.58.211.156"": 2,
    ""196.190.117.7"": 1,
    ""198.235.24.87"": 3,
    ""42.51.39.209"": 1,
    ""37.19.200.118"": 1,
    ""169.150.254.77"": 3,
    ""1.82.238.130"": 1,
    ""147.135.91.23"": 4,
    ""150.223.32.106"": 1,
    ""118.193.44.118"": 2,
    ""74.105.22.131"": 5,
    ""203.57.46.218"": 2,
    ""87.251.75.64"": 3,
    ""106.58.217.149"": 2,
    ""36.111.166.97"": 1,
    ""220.76.61.114"": 1,
    ""106.58.184.58"": 1,
    ""45.141.26.68"": 1,
    ""106.58.219.212"": 1,
    ""61.171.113.104"": 1,
    ""63.135.161.145"": 1,
    ""103.38.236.147"": 5,
    ""205.210.31.174"": 3,
    ""87.191.150.194"": 1,
    ""120.48.64.252"": 2
  },
  ""asn"": {
    ""AS25310"": 2,
    ""AS21413"": 1,
    ""AS206092"": 3,
    ""AS4134"": 59,
    ""AS58519"": 42,
    ""AS48721"": 21,
    ""AS132203"": 14,
    ""AS9808"": 7,
    ""AS4808"": 13,
    ""AS148981"": 8,
    ""AS4837"": 45,
    ""AS135377"": 4,
    ""AS2856"": 1,
    ""AS38283"": 13,
    ""AS45090"": 7,
    ""AS21183"": 9,
    ""AS7018"": 9,
    ""AS35682"": 2,
    ""AS55933"": 3,
    ""AS9009"": 1,
    ""AS142299"": 5,
    ""AS134238"": 4,
    ""AS4816"": 3,
    ""AS63949"": 1,
    ""AS17341"": 2,
    ""AS23724"": 4,
    ""AS134768"": 4,
    ""AS396982"": 12,
    ""AS59425"": 6,
    ""AS267784"": 6,
    ""AS5089"": 1,
    ""AS3356"": 7,
    ""AS41436"": 1,
    ""AS58466"": 3,
    ""AS209588"": 1,
    ""AS3320"": 8,
    ""AS9541"": 9,
    ""AS38365"": 6,
    ""AS197414"": 2,
    ""AS3329"": 2,
    ""AS17488"": 2,
    ""AS63838"": 4,
    ""AS42960"": 2,
    ""AS8075"": 1,
    ""AS58461"": 3,
    ""AS3462"": 1,
    ""AS37963"": 13,
    ""AS4766"": 7,
    ""AS55960"": 2,
    ""AS208312"": 3,
    ""AS142403"": 1,
    ""AS57523"": 3,
    ""AS8412"": 2,
    ""AS24757"": 1,
    ""AS56005"": 1,
    ""AS212238"": 4,
    ""AS16276"": 4,
    ""AS701"": 5,
    ""AS208091"": 3,
    ""AS4812"": 1,
    ""AS149148"": 5
  },
  ""isp"": {
    ""Bulldog Communications"": 2,
    ""envia TEL GmbH"": 1,
    ""Ipxo Limited"": 2,
    ""Chinanet"": 59,
    ""Cloud Computing Corporation"": 42,
    ""Flyservers S.A."": 28,
    ""Aceville Pte.ltd"": 11,
    ""China Mobile communications corporation"": 7,
    ""China Unicom Beijing Province Network"": 13,
    ""China Telecom"": 11,
    ""China Unicom Tianjin Province Network"": 7,
    ""China Unicom CHINA169 Network"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 4,
    ""China Unicom Chongqing Province Network"": 9,
    ""British Telecommunications PLC"": 1,
    ""CHINANET SiChuan Telecom Internet Data Center"": 13,
    ""China Internet Network Information Center"": 2,
    ""CNC Group CHINA169 Neimeng Province Network"": 17,
    ""Shenzhen Tencent Computer Systems Company Limited"": 8,
    ""Vodafone Network"": 9,
    ""AT&T Services, Inc."": 9,
    ""CHINA UNICOM China169 Backbone"": 4,
    ""Best Internet Solution XK"": 2,
    ""CNC Group CHINA169 Shannxi Province Network"": 5,
    ""Cloudie Limited"": 3,
    ""M247 Europe SRL"": 1,
    ""CLOUDFOREST CO., LTD"": 5,
    ""CHINANET Jiangx province IDC network"": 4,
    ""China Telecom (Group)"": 4,
    ""Akamai Technologies, Inc."": 1,
    ""C7 Data Centers"": 2,
    ""UCLOUD"": 4,
    ""CHINANET SHAANXI province Cloud Base network"": 4,
    ""Google LLC"": 12,
    ""Horizon LLC"": 6,
    ""Virgin Media"": 1,
    ""Level 3 Communications"": 7,
    ""Kamatera Inc"": 1,
    ""Deutsche Telekom AG"": 8,
    ""Cyber Internet Services (Private) Limited"": 9,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 6,
    ""Xhost Internet Solutions LP"": 5,
    ""CHINANET Guangdong province network"": 3,
    ""HOL"": 2,
    ""Hathway IP over Cable Internet Access"": 2,
    ""Hengyang"": 4,
    ""VH-GLOBAL"": 2,
    ""Microsoft Corporation"": 1,
    ""Chunghwa Telecom Co., Ltd."": 1,
    ""Hangzhou Alibaba Advertising Co"": 13,
    ""Korea Telecom"": 7,
    ""Beijing Guanghuan Xinwang Digital"": 2,
    ""Red Byte LLC"": 3,
    ""Yisu Cloud LTD"": 1,
    ""Chang Way Technologies Co. Limited"": 3,
    ""T-Mobile Austria GmbH"": 2,
    ""Ethiotelecom"": 1,
    ""China Unicom Henan Province network"": 1,
    ""Datacamp Limited"": 4,
    ""OVH SAS"": 4,
    ""Verizon Business"": 5,
    ""Rockion LLC"": 1,
    ""Phu Hai Computer Co., Ltd"": 5
  },
  ""org"": {
    ""Unknown"": 71,
    ""envia.tel GmbH"": 1,
    ""Bandito Networks"": 2,
    ""Chinanet YN"": 38,
    ""Chinanet FJ"": 11,
    ""Flyservers S.A"": 21,
    ""Chinanet ZJ"": 16,
    ""Chinanet SD"": 15,
    ""Chinanet JS"": 7,
    ""China Mobile"": 7,
    ""Beijing yunchuang communication Technology Co."": 13,
    ""Chinanet HB"": 8,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""Btnet"": 1,
    ""Chengdu Giant Times Technology Co., Ltd"": 13,
    ""Tencent cloud computing (Beijing) Co., Ltd."": 4,
    ""Tencent Cloud Computing (Beijing) Co., Ltd"": 3,
    ""ATT SERVICES INC- PEG"": 9,
    ""Unicom"": 3,
    ""Best Internet Solution XK"": 2,
    ""Ningbo chaoji mamawangluojishu ltd"": 5,
    ""Netads Online Limited"": 3,
    ""M247 LTD"": 1,
    ""Cloudforest CO., LTD"": 5,
    ""Chinanet JX"": 4,
    ""Shenzhen Qianhai bird cloud computing Co. Ltd."": 3,
    ""Akamai Technologies, Inc."": 1,
    ""VegaDigital Solutions"": 2,
    ""Shanghai UCloud Information Technology Company Limited"": 4,
    ""Chinanet SN"": 4,
    ""Chinanet HE"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""HS City Authority"": 1,
    ""Horizon LLC"": 6,
    ""UAB Host Baltic"": 6,
    ""Fort Wayne Internet, LLC"": 7,
    ""Cloudwebmanage EU"": 1,
    ""Alviva Holding Limited"": 1,
    ""Deutsche Telekom AG"": 8,
    ""Cyber Internet Services Pakistan"": 9,
    ""Hangzhou xiaoshan public transportation co., LTD"": 2,
    ""Beijing Baidu Netcom Science and Technology Co., Ltd."": 6,
    ""Chinanet GD"": 4,
    ""Xhostis"": 2,
    ""Koumakis Emm. S.A."": 2,
    ""Hathway Cable and Datacom Limited"": 2,
    ""Chinanet HN"": 4,
    ""Tencent Cloud Computing"": 3,
    ""VH Global Limited"": 2,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Chunghwa Telecom Co. Ltd."": 1,
    ""Aliyun Computing Co., LTD"": 13,
    ""Kornet"": 6,
    ""AWS EC2 (cn-north-1)"": 2,
    ""Chang Way Technologies Co. Limited"": 6,
    ""HK Kwaifong Group Limited"": 1,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""LBR GmbH"": 2,
    ""Henan Telcom Union Technology Co., LTD"": 1,
    ""Cdnext DAL"": 4,
    ""OVH US LLC"": 4,
    ""Verizon Business"": 5,
    ""Xhost Internet Solutions"": 3,
    ""Korea Telecom"": 1,
    ""Chinanet SH"": 1,
    ""Ipxo LLC"": 1,
    ""Phu Hai Computer Co., Ltd"": 5
  },
  ""regionName"": {
    ""England"": 4,
    ""Brandenburg"": 1,
    ""New York"": 3,
    ""Yunnan"": 38,
    ""Fujian"": 16,
    ""Kaunas"": 21,
    ""Zhejiang"": 26,
    ""North West"": 7,
    ""Shandong"": 15,
    ""Jiangsu"": 7,
    ""Guangdong"": 20,
    ""Beijing"": 45,
    ""Hubei"": 8,
    ""Tianjin"": 7,
    ""Central and Western District"": 9,
    ""Chongqing"": 9,
    ""Sichuan"": 13,
    ""Inner Mongolia"": 12,
    ""Tirana"": 9,
    ""Central Singapore"": 6,
    ""Texas"": 13,
    ""Tashkent"": 2,
    ""Shaanxi"": 6,
    ""Shanghai"": 4,
    ""Hesse"": 1,
    ""Bangkok"": 5,
    ""Jiangxi"": 4,
    ""Sao Paulo"": 1,
    ""Utah"": 2,
    ""Shanxi"": 3,
    ""Hebei"": 4,
    ""California"": 12,
    ""Moscow"": 9,
    ""Vilnius"": 6,
    ""Scotland"": 1,
    ""Indiana"": 7,
    ""North Holland"": 7,
    ""Bavaria"": 7,
    ""Sindh"": 9,
    ""Attica"": 2,
    ""Karnataka"": 2,
    ""Hunan"": 4,
    ""Virginia"": 5,
    ""Taichung City"": 1,
    ""Seoul"": 7,
    ""Lesser Poland"": 3,
    ""Tsuen Wan District"": 1,
    ""Vienna"": 2,
    ""Addis Ababa"": 1,
    ""Henan"": 1,
    ""New Jersey"": 5,
    ""Hanoi"": 5,
    ""Rheinland-Pfalz"": 1
  },
  ""country"": {
    ""United Kingdom"": 5,
    ""Germany"": 10,
    ""United States"": 47,
    ""China"": 242,
    ""Lithuania"": 27,
    ""Singapore"": 13,
    ""Hong Kong"": 10,
    ""Albania"": 9,
    ""Uzbekistan"": 2,
    ""Thailand"": 5,
    ""Brazil"": 1,
    ""Russia"": 9,
    ""The Netherlands"": 7,
    ""Pakistan"": 9,
    ""Greece"": 2,
    ""India"": 2,
    ""Taiwan"": 1,
    ""South Korea"": 7,
    ""Poland"": 3,
    ""Austria"": 2,
    ""Ethiopia"": 1,
    ""Vietnam"": 5
  },
  ""account"": {
    ""142.93.8.59"": 336,
    ""(empty)"": 4,
    ""Test"": 16,
    ""hello"": 28,
    ""cnbPTTNrz"": 1,
    ""IgptRb"": 1,
    ""nMhvfl"": 1,
    ""Administr"": 9,
    ""MNKgsKuxe"": 1,
    ""VXAVjH"": 1,
    ""vGLgLI"": 1,
    ""hgdffbrq"": 6,
    ""Domain"": 7,
    ""Administrator"": 1,
    ""rjaSqvBSM"": 1,
    ""silyyl"": 1,
    ""RqIMZj"": 1,
    ""pcyRCCDxT"": 1,
    ""tIxMEm"": 1,
    ""nQFXqC"": 1
  },
  ""keyboard"": {
    ""Unknown"": 419
  },
  ""client_build"": {
    ""Unknown"": 419
  },
  ""client_name"": {
    ""Unknown"": 419
  },
  ""ip_type"": {
    ""Unknown"": 286,
    ""mobile & proxy"": 2,
    ""hosting"": 100,
    ""mobile"": 11,
    ""hosting & proxy"": 6,
    ""proxy"": 14
  }
}"
Xuvuud0v,6 / d) Architect Arithmetic - Taj Mahal with one Method,IvanITD,C#,Wednesday 24th of January 2024 06:13:28 PM CDT,"namespace Architect_Arithmetic__TajMahalWithOneMethod
{
    class Program
    {
        static void Main(string[] args)
        {
            CalculateTotalCost();
        }

        static void CalculateTotalCost(
            double length = 90.5,
            double width = 90.5,
            double bottom = 24.0,
            double height = 24.0
        )
        {
            double rectangleArea = length * width;
            double triangleArea = bottom * height; 
            triangleArea *= 4;

            double flooringMaterialCost = 180;
            
            double totalShapeArea = rectangleArea + triangleArea;
            double totalCost = totalShapeArea * flooringMaterialCost;
            Console.WriteLine($""The total cost of the flooring material for the Taj Mahal is {totalCost} rupee!"");

        }
    
    }
}"
63jSqh5n,6 / c) - Architect Arithmetic - Taj Mahal,IvanITD,C#,Wednesday 24th of January 2024 06:12:05 PM CDT,"using System.ComponentModel.DataAnnotations;

namespace Arhitect_Arithmetic_Taj_Mahal
{
    class Program
    {   
        //In this section we will write a program that gives the total cost of the flooring material for the ""Taj Mahal"", in Agra, India.
        static void Main(string[] args)
        {
            // Here I need to get the length and width of the rectangle and return the area!
            double length = 90.5;
            double width = 90.5;

            // Here I get the rectangle area back from the method!
            double rectangleArea = Rectangle(length, width);

            // Here I need to get the bottom and height of the triangle and return the area!
            double bottom = 24.0;
            double height = 24.0;

            // here I get the triangle area back from the method!
            double triangleArea = Triangle(bottom, height);

            // After we separate the floor plan on a paper, we need to get the result from every shape's area, and add them back together!
            // The total result should be saved in a double variable, because in this project, we are instructed to work only with the variable double!
            double totalShapeArea = rectangleArea + triangleArea;

            // Now in order to do the next step, we need to write the flooring price!
            double flooringMaterialPrice = 180;

            // And now if we want to get the total cost of the flooring material, we need to multiply the totalShapeArea by the flooring material price!
            double totalCost = totalShapeArea * flooringMaterialPrice;

            // And now we need to print the result!
            Console.WriteLine($""The total cost of the flooring material for the Taj Mahal is {totalCost} rupee!"");
        }

        static double Rectangle(double length, double width)
        {
            // Here we calculate the area of the rectangle!
            
            double area = length * width;

            // Here we return the calculated area of the rectangle, back to the main method!
            return area;
        }

        static double Triangle(double bottom, double height)
        {
            // Here we calculate the area of the triangle!
            double area = bottom * height;

            // In order to get the right amount of triangles we need to multiply the area by 4, because the triangles are 4 in total!
            area *= 4;

            // Here we return the calculated area of the triangle, back to the main method!
            return area;
        }
    }
}"
DyrY8vvV,6 / b) - Architect Arithmetic - Pantheon with one Method,IvanITD,C#,Wednesday 24th of January 2024 05:56:23 PM CDT,"namespace Architect_Arithmetic_PantheonWithOneMethod
{
    class Program
    {
        static void Main(string[] args)
        {
            CalculateTotalCost();
        }

        static void CalculateTotalCost(
            double length = 15,
            double width = 18,
            double radius = 21.5
        )
        {
            double rectangleArea = length * width;
            double circleArea = radius * radius * Math.PI;
            
            double totalShapeArea = rectangleArea + (circleArea / 2);
            double flooringMaterialPrice = 180;
            double totalCost = totalShapeArea * flooringMaterialPrice;
            Console.WriteLine($""The total cost for the flooring material, for the Pantheon is: {Math.Round(totalCost)} euro!"");
        }
    }
}"
YkfPWprK,6 / a) - Architect Arithmetic - Pantheon,IvanITD,C#,Wednesday 24th of January 2024 05:55:24 PM CDT,"namespace Architect_Arithmetic_Pantheon
{
    internal class Program
    {

        //In this section we will write a program that gives the total cost of the flooring material for the ""Pantheon"", in Rome, Italy.
        static void Main(string[] args)
        {
            // Here I need to get the length and width of the rectangle and return the area!
            double length = 15;
            double width = 18;

            // Here I get the rectangle area back from the method!
            double rectangleArea = Rectangle(length, width);

            // Here I need to get the radius of the circle and return the area!
            double radius = 21.5;

            // Here I get the circle area!
            double circleArea = Circle(radius);


            // After we separate the floor plan on a paper, we need to get the result from every shape's area, and then add them together!
            //The total result should be saved in a double variable, because in this project, we are instructed to work only with the variable double!
            double totalShapeArea = rectangleArea + (circleArea / 2);

            // Now in order to do the next step, we need to write the flooring price!
            double flooringMaterialPrice = 180;

            // And now in order to get the cost of the flooring material, we need to multiply the total shape area by the price of the material!
            double totalCost = totalShapeArea * flooringMaterialPrice;

            // And now we need to print the result!
            Console.WriteLine($""The total cost for the flooring material, for the Pantheon, is: {Math.Round(totalCost)} euro!""); 
            // The next step is to round the result to the nearest integer!
            
        }
        static double Rectangle(double length, double width)
        {
            // Here we calculate the area of the rectangle!
            double area = length * width;
            // Here we return the calculated area, of the rectangle, back to the main method!
            return area;
        }
        static double Circle(double radius)
        {
            // Here we calculate the area of the circle!
            double area = Math.PI * Math.Pow(radius, 2);
            // Here we return the calculated area, of the circle, back to the main method!
            return area;
        }
        
        
    }
}
"
jMdTT1cc,List of all FREE Crypto Airdrops!,jusst2k4,GetText,Wednesday 24th of January 2024 05:47:45 PM CDT,"Looking for a list of all the current, free airdrops from all blockchains?
Check out NetDrop - https://net-drop.netlify.app/

NetDrop provides a list of all active airdrops, which is updated every minute so you can claim the newest airdrops as soon as they are available.
No more finding airdrops; the airdrops find you.

Visit NetDrop completely free now, no sign-up required.
https://net-drop.netlify.app/

649054"
kpA4WBET,G2A.com Free Gift Card Guide Jan 2024,ounnuo,GetText,Wednesday 24th of January 2024 05:08:20 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/120kXNJWM5T5u3PGlkQeZCo_nLxzQIlkf/view?usp=g2a_refund_exploit_499292.pdf
 
Working as of
24 January 2024"
QkW814Xc,Wrath rune crafting,abc123mewot,Lua,Wednesday 24th of January 2024 05:06:30 PM CDT,"print(""Necroflower autocrafting turtle"")

-- ME Interface must be placed in front of the turtle

if not fs.exists(""utils.lua"") then
	print(""Downloading Botany Base Utils API"")
	shell.run(""pastebin get zBLN8K4d utils.lua"")
end
os.loadAPI(""utils.lua"")

utils.setSignalItem(""minecraft:cobblestone"")

local expectingFlower = false

while true do
	if utils.scanForItem(""botania:rune"") then
		print(""Crafting a necroflower"")
		os.sleep(1) -- Wait for the turtle to get all the items from the interface
		utils.dropDownAllItems() -- Drop all items on runic alter
		os.sleep(3) -- Give it some time to craft
		expectingFlower = true
	end
	
	if utils.scanForItem(""botania:rune"") then
		if expectingFlower then print(""Flower was crafted"") else print(""Got unexpected flower!"") end
		utils.dropAllItems(true) -- Also drop the signal item
		expectingFlower = false
		os.sleep(0.1)
	end
	
	if not expectingFlower then -- If a rune is expected to craft then constantly check for it
		if utils.isServerRestartingSoon() then
			break -- Stop crafting if the servers going to restart
		end
		os.sleep(1)
	end
end
"
dfFTfVrp,KTZInv,klassekatze,C#,Wednesday 24th of January 2024 04:40:16 PM CDT,"/*
 * R e a d m e
 * -----------
 * 
 * In this file you can include any instructions or other comments you want to have injected onto the 
 * top of your final script. You can safely delete this file if you do not want any such comments.
 */

static public Program gProgram = null;
static public DateTime bootTime;
public Program()
{
	gProgram = this;
	resourceLoader = new ResourceLoader();
	resourceLoader.p = this;
	bootTime = DateTime.Now;

	log(""BOOT"", LT.LOG_N);
	//Config = new Config_();
	Runtime.UpdateFrequency = UpdateFrequency.Update1;
}

public void Save()
{
	// Called when the program needs to save its state. Use
	// this method to save your state to the Storage field
	// or some other means.
	//
	// This method is optional and can be removed if not
	// needed.
}
public static int tick = -1;
static BurnoutTrack bt60 = new BurnoutTrack(60, MAX_MS_PER_SEC_BOOT);

static Profiler initP = new Profiler(""init"");
static Profiler mainP = new Profiler(""main"");
public void Main(string arg, UpdateType upd)
{
	tick += 1;
	if (bt60.burnoutpre()) return;

	if (tick % 20 == 0) if (Me.Closed)
		{
			Runtime.UpdateFrequency = UpdateFrequency.None;
			return;
		}
	mainP.start();
	main(arg, upd);
	mainP.stop();
	if (tick % 5 == 0)
	{
		Echo(tick.ToString());
		if (profileLog != null) profileLog.WriteText(""name:ms1t:ms60t\n"" + Profiler.getAllReports());
	}
	if (consoleLog != null && tick % 5 == 0)
	{
		if (Logger.loggedMessagesDirty)
		{
			Logger.updateLoggedMessagesRender();
			consoleLog.WriteText(Logger.loggedMessagesRender);
		}
	}
	if (bt60.burnoutpost()) return;
}


Inventory gInv = null;
bool first = true;
void main(string arg, UpdateType upd)
{
	initP.start();
	if (tick % 10 == 0)
	{
		resourceLoader.update();
	}
	initP.stop();
	if (resourceLoader.neverFullyLoaded)
	{
		Echo(""INITIALIZING: "" + resourceLoader.step + ""/11"");
		if (statusLog != null) statusLog.WriteText(""INIT: "" + resourceLoader.step + ""/11"");
		//if (radarLog != null) radarLog.WriteText(""INIT: "" + resourceLoader.step + ""/11"");
		return;
	}
	if (first)
	{
		first = false;

		gInv = new Inventory();
		gInv.updateContainers(inventoryBlocks);
	}
	if (tick % 10 == 0) connectEvent();

	gInv.update();
}


Dictionary<IMyShipConnector, bool> lConnected = new Dictionary<IMyShipConnector, bool>();

bool cnctE = false;
public void connectEvent()
{
	try
	{
		bool evnt = false;
		foreach (var c in connectors)
		{
			var con = c.Status == MyShipConnectorStatus.Connected;
			var lcon = false;
			lConnected.TryGetValue(c, out lcon);
			if (lcon != con) evnt = true;
			lConnected[c] = con;
		}
		if (evnt)
		{
			log(""connector change"");
			GridTerminalSystem.GetBlocksOfType(inventoryBlocks, b => b.HasInventory && b.HasPlayerAccess(Me.OwnerId));
			gInv.updateContainers(inventoryBlocks);
		}
	}
	catch (Exception e)
	{
		if (!cnctE)
		{
			cnctE = true;
			log(""Exception: "" + e.ToString());
		}
	}
}

const double MAX_MS_PER_SEC_BOOT = 0.1;
const double MAX_MS_PER_SEC = 0.1;
const int PBLIMIT_STARTUPTICKS = 0;//20 by default
class BurnoutTrack
{
	public double maxmspersec = 0.25;
	public static double[] defertrack;
	public int len = 60;
	public BurnoutTrack(int l, double ms)
	{
		len = l;
		maxmspersec = ms;
		defertrack = new double[len];
	}
	int defercalls = 0;
	int deferpos = 0;
	static bool hangflag = false;
	int hangticks = 0;
	int hangtick = 0;
	bool fsdbg = false;
	DateTime bf = DateTime.Now;
	public bool burnoutpre()
	{
		bf = DateTime.Now;
		if (hangflag)
		{
			if (tick > hangtick)
			{
				double avg = 0;
				foreach (var d in defertrack) avg += d;
				avg = avg / (defercalls > defertrack.Length ? defertrack.Length : defercalls);
				if (avg > maxmspersec * len / 60)
				{
					defertrack[deferpos] = 0;
					defercalls += 1;
					deferpos = (deferpos + 1) % defertrack.Length;
					return true;
				}
				else
				{
					hangflag = false;
					//log(""Resuming after "" + (hangticks / 60.0d).ToString(""0.0"") + ""s"", LT.LOG_N);
				}
			}
		}
		return hangflag;
	}
	public double avg()
	{
		double avg = 0;
		foreach (var d in defertrack) avg += d;
		avg = avg / (defercalls > defertrack.Length ? defertrack.Length : defercalls);
		return avg;
	}
	public bool burnoutpost()
	{
		double ms = (DateTime.Now - bf).TotalMilliseconds;
		defertrack[deferpos] = ms;
		defercalls += 1;
		deferpos = (deferpos + 1) % defertrack.Length;
		if (!hangflag)
		{
			double p_avg = 0;
			foreach (var d in defertrack) p_avg += d;
			int divisor = defercalls > defertrack.Length ? defertrack.Length : defercalls;
			var avg = p_avg / divisor;
			var mtch = maxmspersec * len / 60;
			if (avg > mtch)
			{
				int tickstodoom = PBLIMIT_STARTUPTICKS - tick;
				if (tickstodoom > 0 && tickstodoom * maxmspersec < avg) return false;

				int waitticks = 0;
				while (p_avg / (divisor + waitticks) > mtch) waitticks++;

				hangticks = waitticks;
				hangtick = tick + waitticks;
				hangflag = true;


				var lstr = tick + "": "" + avg.ToString(""0.00"") + "">"" + (mtch).ToString(""0.00"") + ""ms/s exec. Sleeping "" + (hangticks / 60.0d).ToString(""0.0"") + ""s"";
				log(lstr, LT.LOG_N);
				/*var c = getCtrl();
						if (c != null)
						{
							if (!fsdbg)
							{
								c.CustomData = """";
								fsdbg = true;
							}
							c.CustomData += ""\n\n"" + lstr + ""\n\n"" + Profiler.getAllReports();
						}
						else getCtrlTick = -9000;*/

				return true;
			}
		}
		else return true;
		return false;
	}
}

class Inventory
{
	static bool sortProductionInput = false;
	static bool treatBlankAsAlltype = false;
	public class InventoryManifest
	{
		public InventoryManifest()
		{

		}

		public Dictionary<MyItemType, MyFixedPoint> stuff = new Dictionary<MyItemType, MyFixedPoint>();
		public MyFixedPoint maxVolume;
		public MyFixedPoint freeVolume;
		public void set(BlockInventory bi)//IMyTerminalBlock b)
		{
			stuff.Clear();
			maxVolume = freeVolume = 0;

			var invs = bi.getSortedInventories(false);

			foreach(var nv in invs)// (int i = 0; i < b.InventoryCount; i++)
			{
				///..var nv = b.GetInventory(i);
				var mv = nv.MaxVolume;
				var cv = nv.CurrentVolume;
				maxVolume += mv;
				freeVolume += mv - cv;
				List<MyInventoryItem> itms = new List<MyInventoryItem>();
				nv.GetItems(itms);
				foreach (MyInventoryItem it in itms)
				{
					if (stuff.ContainsKey(it.Type)) stuff[it.Type] += it.Amount;
					else stuff[it.Type] = it.Amount;
				}
			}
		}
		public void sub(InventoryManifest o)
		{//if we don't even have the thing being subtracted nothing will be subtracted
			foreach (var kvp in o.stuff) if (stuff.ContainsKey(kvp.Key)) stuff[kvp.Key] -= kvp.Value;
		}
		public void add(InventoryManifest o)
		{
			foreach (var kvp in o.stuff)
			{
				if (stuff.ContainsKey(kvp.Key)) stuff[kvp.Key] += kvp.Value;
				else stuff[kvp.Key] = kvp.Value;
			}
		}
	}
	public class BlockInventory : IComparable<BlockInventory>
	{
		const bool LOG = false;

		public static List<BlockInventory> bFIList = new List<BlockInventory>();
		public static List<BlockInventory> bPriorityList = new List<BlockInventory>();
		public static Dictionary<IMyTerminalBlock, BlockInventory> bIDict = new Dictionary<IMyTerminalBlock, BlockInventory>();
		static Dictionary<string, MyItemType> typeTable = new Dictionary<string, MyItemType>();
		public static BlockInventory getBI(IMyTerminalBlock b)
		{
			BlockInventory r = null;
			bIDict.TryGetValue(b, out r);
			if (r == null) r = new BlockInventory(b);
			return r;
		}

		static MyItemType getType(string type, string subtype)
		{//can throw exceptions, MyItemType is fiddly
			var k = type + ""/"" + subtype;
			if (typeTable.ContainsKey(k)) return typeTable[k];
			else
			{
				return typeTable[k] = new MyItemType(type, subtype);
			}
		}
		const string bpprefix = ""MyObjectBuilder_"";
		const string everything = ""alltypes"";
		static Dictionary<string, string> cattocargo = new Dictionary<string, string>()
		{
			{""MyObjectBuilder_OxygenContainerObject"",""Bottles""},
			{""MyObjectBuilder_GasContainerObject"",""Bottles""},
			{""MyObjectBuilder_PhysicalGunObject"",""Tools""},
			{""MyObjectBuilder_AmmoMagazine"",""Ammo""},
			{""MyObjectBuilder_Ore"",""Ores""},
			{""MyObjectBuilder_Ingot"",""Ingots""},
			{""MyObjectBuilder_Component"",""Components""},
		};
		static string cargokeywordbytype(string type)
		{
			string r = """";
			cattocargo.TryGetValue(type, out r);
			return r;
		}

		public static int idl = 0;
		public int idx = 0;
		public BlockInventory(IMyTerminalBlock b)
		{
			this.b = b;

			bPriorityList.Add(this);
			bIDict[b] = this;
			idx = idl;
			idl++;


			for (var i = 0; i < b.InventoryCount; i++)
			{
				sortedInventories.Add(b.GetInventory(i));
			}
			if (b is IMyProductionBlock)
			{
				isProduction = true;
				var p = (IMyProductionBlock)b;
				sortedInventoriesNoInput.Add(p.OutputInventory);
			}else
			{
				sortedInventoriesNoInput.AddRange(sortedInventories);
			}
		}
		public IMyTerminalBlock b = null;
		public InventoryManifest manifest = null;

		public List<string> categories = new List<string>();

		List<IMyInventory> sortedInventoriesNoInput = new List<IMyInventory>();
		List<IMyInventory> sortedInventories = new List<IMyInventory>();
		public List<IMyInventory> getSortedInventories(bool inc_input)
		{
			if (inc_input) return sortedInventories;
			else return sortedInventoriesNoInput;

		}
		public bool isProduction = false;
		public Dictionary<MyItemType, MyFixedPoint> target = new Dictionary<MyItemType, MyFixedPoint>();
		public bool special = false;
		public bool locked = false;
		public bool hidden = false;
		public bool holdall = false;
		const int default_p = 9999999;
		public int priority = default_p;
		public string lastCD = ""-31234"";
		public string lastN = ""-234523"";

		public void updateP()
		{
			if (b.CustomName != lastN)
			{
				lastN = b.CustomName;
				priority = default_p;
				special = false;
				locked = false;
				hidden = false;
				holdall = false;
				var t = lastN.Split(' ');
				categories.Clear();
				foreach (var tok in t)
				{
					var ltok = tok.ToLower();

					if (ltok == ""special"")
					{
						special = true;
						priority -= 10000;
					}else if (ltok == ""locked"")
					{
						locked = true;
					}
					else if (ltok == ""hidden"")
					{
						locked = true;
						hidden = true;
					}
					else if (ltok.StartsWith(""p""))
					{
						priority -= 10000;
						var ap = tok.Substring(1);
						int c = 0;
						int.TryParse(ap, out c);
						if (c.ToString() == ap)
						{
							priority += c;
						}
					}else if(ltok == everything)
					{
						holdall = true;
					}
					else
					{
						foreach(var kvp in cattocargo)
						{
							if(tok == kvp.Value)
							{
								if (!categories.Contains(tok)) categories.Add(tok);
								break;
							}
						}
					}
				}
				if(treatBlankAsAlltype && !special && !locked && categories.Count == 0 && !isProduction)
				{
					holdall = true;
					priority += 1;
				}
				if(!special && categories.Count == 0 && APIWC.HasCoreWeapon(b))
				{
					locked = true;
				}
				bPriorityList.Sort();
			}
			if (special && b.CustomData != lastCD)
			{
				if (special && b.CustomData == """")
				{
					List<MyItemType> alltypes = new List<MyItemType>();
					List<MyItemType> t = new List<MyItemType>();
					for (var i = 0; i < b.InventoryCount; i++)
					{
						b.GetInventory(i).GetAcceptedItems(t);
						foreach (var e in t) if (!alltypes.Contains(e)) alltypes.Add(e);
					}
					List<string> clines = new List<string>();
					//alltypes.Sort();
					//string o = """";
					foreach (var e in alltypes)
					{
						clines.Add(e.TypeId.Substring(bpprefix.Length) + ""/"" + e.SubtypeId + ""=0"");//\n"";
					}
					clines.Sort();

					b.CustomData = String.Join(""\n"",clines);
				}
				lastCD = b.CustomData;
				target.Clear();
				var lines = lastCD.Split('\n');
				foreach (var l in lines)
				{
					var lr = l.Split('=');
					if (lr.Length == 2)
					{
						var ids = lr[0].Split('/');
						if (ids.Length == 2)
						{
							try
							{
								var t = getType(bpprefix+ids[0], ids[1]);
								if (lr[1] == ""all"")
								{
									target[t] = int.MaxValue;
									if(LOG)log(b.CustomName+"" ""+t.SubtypeId + ""=all"");
								}
								else
								{
									var c = (MyFixedPoint)double.Parse(lr[1]);
									if (c > 0)
									{
										target[t] = c;
										if (LOG) log(b.CustomName + "" "" + t.SubtypeId + ""=""+c);
									}
								}
							}
							catch (Exception) { }
						}
					}
				}
			}
		}
		public void updateM()
		{
			InventoryManifest nm = new InventoryManifest();
			if(!hidden)nm.set(this);
			if (manifest != null) Inventory.globalManifest.sub(manifest);
			Inventory.globalManifest.add(nm);
			manifest = nm;
		}


		/*public int Compare(BlockInventory x, BlockInventory y)
				{
					if (x.priority == y.priority)
					{
						return x.idx.CompareTo(y.idx);
					}
					return x.priority.CompareTo(y.priority);
				}*/
		int IComparable<BlockInventory>.CompareTo(BlockInventory y)
		{
			var x = this;
			if (x.priority == y.priority)
			{
				return x.idx.CompareTo(y.idx);
			}
			return x.priority.CompareTo(y.priority);
		}

		public void updateT()
		{
			if (locked) return;

			if (special)
			{
				List<MyItemType> handle = new List<MyItemType>();
				foreach (var kvp in target) handle.Add(kvp.Key);
				foreach (var kvp in manifest.stuff)if (!handle.Contains(kvp.Key)) handle.Add(kvp.Key);

				foreach(var k in handle)
				{
					MyFixedPoint stock = 0;
					manifest.stuff.TryGetValue(k, out stock);
					MyFixedPoint trg = 0;
					target.TryGetValue(k, out trg);
					if (trg > stock)
					{
						MyFixedPoint gstock = 0;
						globalManifest.stuff.TryGetValue(k, out gstock);
						if (gstock > stock)
						{
							if (LOG) log(b.CustomName + "" "" + k.SubtypeId + "" pmove "" + trg + "" "" + stock);
							var r = retrieve(this, k, trg - stock);
							if (r > 0) if (LOG) log(""unable to satisfy by "" + r);
						}
					}
					else if (trg < stock)
					{
						if (LOG) log(""attempt expel "" + k.SubtypeId + "": "" + trg + "" < "" + stock + "" in "" + this.b.CustomName);
						expel(this, k, stock - trg);
					}
				}
			}else
			{
				List<MyItemType> handle = new List<MyItemType>();
				foreach (var kvp in manifest.stuff)handle.Add(kvp.Key);

				foreach (var k in handle)
				{
					var kw = cargokeywordbytype(k.TypeId);
					MyFixedPoint stock = 0;
					manifest.stuff.TryGetValue(k, out stock);
					MyFixedPoint trg = 0;
					if (categories.Contains(kw) || holdall) trg = MyFixedPoint.MaxValue;

					if (trg > stock)// && priority != default_p)
					{
						//this might add up if we somehow had a shitload of lowwer priority containers.
						//but we won't, really. retrieve only looks at the lower p stuff so in 99% of cases it'll just fail immediately
						//leaving expel( on other containers to send misplaced shit to us.

						if (LOG) log(""cat: "" + b.CustomName + "" "" + k.SubtypeId + "" pmove "" + trg + "" "" + stock);
						var r = retrieve(this, k, trg - stock);
						if (r > 0) if (LOG) log(""unable to satisfy by "" + r);
					}
					else if (trg < stock)
					{
						if (LOG) log(""cat attempt expel "" + k.SubtypeId + "": "" + trg + "" < "" + stock + "" in "" + this.b.CustomName);
						expel(this, k, stock - trg);
					}
				}
			}
		}

		public void shuffleRefineryInputs()
		{

		}

		public MyFixedPoint expel(BlockInventory b, MyItemType t, MyFixedPoint v, bool inputs=false)
		{
			var nfo = t.GetItemInfo();
			var kw = cargokeywordbytype(t.TypeId);
			for (var i = 0; i < BlockInventory.bPriorityList.Count; i++)
			{
				var inv = BlockInventory.bPriorityList[i];
				if(inv != b && !inv.locked)
				{
					MyFixedPoint amt = 0;
					MyFixedPoint max_accept = (inv.manifest.freeVolume * (MyFixedPoint)(1 / nfo.Volume));
					if (!nfo.IsOre && !nfo.IsIngot) max_accept = MyFixedPoint.Floor(max_accept + (MyFixedPoint)0.001);

					if (!inv.special && (inv.categories.Contains(kw) || inv.holdall)) amt = max_accept;
					else if (inv.special)
					{
						MyFixedPoint stock = 0;
						inv.manifest.stuff.TryGetValue(t, out stock);
						MyFixedPoint trg = 0;
						inv.target.TryGetValue(t, out trg);
						if (trg > stock)
						{
							amt = trg-stock;
							if (amt > max_accept) amt = max_accept;
						}
					}
					if(amt > 0)
					{
						if (LOG) log(""maxaccept="" + max_accept);
						if (LOG) log(""pushing ""+ amt+"" to ""+inv.b.CustomName);
						var remaining = imove(b, inv, t, amt, inputs);
						v -= amt;
						v += remaining;
					}
				}
				if (v <= 0) break;
			}
			return v;
		}

		public MyFixedPoint retrieve(BlockInventory dest, MyItemType t, MyFixedPoint v)
		{
			var nfo = t.GetItemInfo();
			int pidx = BlockInventory.bPriorityList.IndexOf(dest);
			if (LOG) log(""pidx="" + pidx);
			if (LOG) log(""BlockInventory.bPriorityList.Count="" + BlockInventory.bPriorityList.Count);
			for (var i = BlockInventory.bPriorityList.Count - 1; i > pidx; i--)
			{
				var inv = BlockInventory.bPriorityList[i];
				if (inv.manifest.stuff.ContainsKey(t))
				{

					MyFixedPoint avail = inv.manifest.stuff[t];
					if (LOG) log(inv.b.CustomName + ""has item, stock "" + avail);
					MyFixedPoint trns_amt = avail > v ? v : avail;
					if (LOG) log(""tamt=""+ trns_amt);

					MyFixedPoint max_accept = (inv.manifest.freeVolume * (MyFixedPoint)(1 / nfo.Volume));
					if (!nfo.IsOre && !nfo.IsIngot) max_accept = MyFixedPoint.Floor(max_accept + (MyFixedPoint)0.001);
					if (trns_amt > max_accept) trns_amt = max_accept;
					if (LOG) log(""tamt_ma="" + trns_amt);
					var rem = imove(inv, dest, t, trns_amt);
					v -= trns_amt;
					v += rem;
				}
				if (v <= 0) break;
			}
			return v;
		}
		public MyFixedPoint imove(BlockInventory a, BlockInventory b, MyItemType t, MyFixedPoint v, bool inputs=false)
		{
			if (v == 0) return 0;
			if (LOG) log(""imove ""+a.b.CustomName +"" > ""+b.b.CustomName);
			MyFixedPoint sa = v;

			foreach(var inva in a.getSortedInventories(inputs))
			{
				foreach (var invb in b.getSortedInventories(inputs))
				{
					v = imove(inva, invb, t, v);
					if (v <= 0) break;
				}
				if (v <= 0) break;
			}
			/*for (int ia = 0; ia < a.b.InventoryCount; ia++)
					{
						var inva = a.b.GetInventory(ia);
						for (int ib = 0; ib < b.b.InventoryCount; ib++)
						{
							var invb = b.b.GetInventory(ib);
							v = imove(inva, invb, t, v);
							if (v <= 0) break;
						}
						if (v <= 0) break;
					}*/
			if(sa != v)
			{
				if (LOG) log(""moved "" + (sa - v) + "" "" + t.SubtypeId + "" to "" + b.b.CustomName + "" from ""+a.b.CustomName);
				a.updateM();
				b.updateM();
			}
			return v;
		}

		public MyFixedPoint imove(IMyInventory a, IMyInventory b, MyItemType t, MyFixedPoint v)
		{
			List<MyInventoryItem> itms = new List<MyInventoryItem>();
			a.GetItems(itms);
			foreach (MyInventoryItem item in itms)
			{
				if (item.Type == t)
				{
					MyFixedPoint trns_amt = item.Amount > v ? v : item.Amount;
					if (LOG) log(""_imove tamt "" + trns_amt);
					var nfo = t.GetItemInfo();
					MyFixedPoint max_accept = ((b.MaxVolume - b.CurrentVolume) * (1f / nfo.Volume));
					if (LOG) log(""_imove max_accept "" + max_accept);
					if (!nfo.IsOre && !nfo.IsIngot) max_accept = MyFixedPoint.Floor(max_accept + (MyFixedPoint)0.001);
					//int max_room_for = (int)Math.Floor((double)(destination.MaxVolume - destination.CurrentVolume + (MyFixedPoint)0.001) / unit_volume);
					if (trns_amt > max_accept) trns_amt = max_accept;
					if (LOG) log(""_imove avail ""+ trns_amt);
					if (trns_amt > 0)
					{
						if (a.TransferItemTo(b, item, trns_amt))
						//if (b.TransferItemFrom(a, item, trns_amt))
						{
							v -= trns_amt;
							if (LOG) log(""moved ""+ trns_amt + ""!""+ item.Type.SubtypeId);
						}
						else if(LOG) log(""moved fail"");
					}
				}
				if (v <= 0) break;
			}
			return v;
		}


	}
	public static InventoryManifest globalManifest = new InventoryManifest();
	//public static Dictionary<IMyTerminalBlock, InventoryManifest> invManifests = new Dictionary<IMyTerminalBlock, InventoryManifest>();
	public void updateContainers(List<IMyTerminalBlock> c)// where T : IMyTerminalBlock
	{

		List<IMyTerminalBlock> del = new List<IMyTerminalBlock>();
		foreach(var b in containers)
		{
			if (!c.Contains(b)) del.Add(b);
		}
		InventoryManifest dMan = new InventoryManifest();
		foreach (var b in del)
		{
			BlockInventory bi = BlockInventory.getBI(b);
			Inventory.globalManifest.sub(bi.manifest);
		}
		containers.Clear();


		foreach (var e in c) if(e.CubeGrid.EntityId != gProgram.Me.EntityId) containers.Add(e);
		foreach (var e in c) if (e.CubeGrid.EntityId == gProgram.Me.EntityId) containers.Add(e);

		upd();
	}
	List<IMyTerminalBlock> containers = new List<IMyTerminalBlock>();
	int nextC = 0;
	bool itemsUpdating = true;
	public bool hasUpdatedOnce = false;
	public int updateInterval = 1;//60 * 10;
	public int lastUpdateTick = 0;
	public int ticksRun = 0;

	static Profiler invuP = new Profiler(""invu"");

	void clr()
	{
		itemsUpdating = false;
		ticksRun = tick - lastUpdateTick;
		lastUpdateTick = tick;
		nextC = 0;
	}
	void upd()
	{
		itemsUpdating = true;
		lastUpdateTick = tick;
		nextC = 0;
	}
	public void update()
	{

		if (!itemsUpdating && (tick - lastUpdateTick > updateInterval))
		{
			upd();
			if (statusLog != null)
			{
				string o = """";
				foreach (var e in BlockInventory.bPriorityList)
				{
					o += e.priority + ""|||"" + e.b.CustomName + ""\n"";
				}
				statusLog.WriteText(o);
			}
		}
		invuP.s();
		if (itemsUpdating && tick % 5 == 0)
		{
			if (nextC >= containers.Count)
			{
				clr();
				log(""full run ("" + containers.Count+""):"" + ticksRun + ""t ("" + (ticksRun / 60.0d).ToString(""0.0"") + ""s"");
				hasUpdatedOnce = true;
			}
			else
			{
				IMyTerminalBlock t = containers[nextC];
				BlockInventory bi = BlockInventory.getBI(t);
				//by doing these simultaneously there can absolutely be irregularities.
				//for example, if you empty a low priority box into a high priority one, it will think it is still full halfway through the update sequence
				bi.updateM();
				bi.updateP();
				bi.updateT();
				nextC++;
			}
		}
		invuP.e();
	}

	public Inventory()
	{

	}

}

public enum LT
{
	LOG_N = 0,
	LOG_D,
	LOG_DD
}
string[] logtype_labels = { ""INFO"",""_DBG"",""DDBG""};

public static LT LOG_LEVEL = LT.LOG_N;
public static Logger logger = new Logger();
public static void log(string s, LT level)
{
	Logger.log(s, level);
}
public static void log(string s)
{
	Logger.log(s, LT.LOG_N);
}

public class Logger
{
	public class logmsg
	{
		public logmsg(string m,string m2, LT l) { msg = m; msg_raw = m2; level = l; }
		public string msg = """";
		public string msg_raw = """";
		public int c = 1;
		public LT level = LT.LOG_N;
	}

	static List<logmsg> loggedMessages = new List<logmsg>();
	static int MAX_LOG = 50;
	static List<logmsg> superLoggedMessages = new List<logmsg>();
	static int MAX_SUPER_LOG = 500;

	static public bool loggedMessagesDirty = true;

	public static void log(string s, LT level)
	{
		if (level > LOG_LEVEL) return;
		string s2 = s;
		if (s.Length > 50)
		{
			List<string> tok = new List<string>();
			while (s.Length > 50)
			{
				int c = 0;
				if (tok.Count > 0) c = 2;
				tok.Add(s.Substring(0, 50 - c));
				s = s.Substring(50 - c);
			}
			tok.Add(s);
			s = string.Join(""\n "", tok);
		}
		var p = gProgram;
		logmsg l = null;
		if (loggedMessages.Count > 0)
		{
			l = loggedMessages[loggedMessages.Count - 1];
		}
		if (l != null)
		{
			if (l.msg == s) l.c += 1;
			else loggedMessages.Add(new logmsg(s, s2, level));
		}
		else loggedMessages.Add(new logmsg(s, s2, level));
		if (loggedMessages.Count > MAX_LOG) loggedMessages.RemoveAt(0);

		l = null;
		if (superLoggedMessages.Count > 0)
		{
			l = superLoggedMessages[superLoggedMessages.Count - 1];
		}
		if (l != null)
		{
			if (l.msg == s) l.c += 1;
			else superLoggedMessages.Add(new logmsg(s, s2, level));
		}
		else superLoggedMessages.Add(new logmsg(s, s2, level));
		if (superLoggedMessages.Count > MAX_SUPER_LOG) superLoggedMessages.RemoveAt(0);

		loggedMessagesDirty = true;
	}


	static public string loggedMessagesRender = """";
	static public void updateLoggedMessagesRender()
	{
		if (!loggedMessagesDirty) return;
		StringBuilder b = new StringBuilder();
		//if (!loggedMessagesDirty) return;// loggedMessagesRender;


		foreach (var m in loggedMessages)
		{
			b.Append(m.msg);
			if (m.c > 1) bapp(b,"" ("" ,m.c ,"")"");
			b.Append(""\n"");
		}
		string o = b.ToString();
		loggedMessagesDirty = false;
		loggedMessagesRender = o;
	}
}

static void bapp(StringBuilder b, params object[] args)
{
	foreach (object a in args)
	{
		b.Append(a.ToString());
	}
}
public class Profiler
{


	static bool PROFILING_ENABLED = true;
	static List<Profiler> profilers = new List<Profiler>();
	const int mstracklen = 60;
	double[] mstrack = new double[mstracklen];
	double msdiv = 1.0d / mstracklen;
	int mscursor = 0;
	DateTime start_time = DateTime.MinValue;
	string Name = """";
	string pre = """";
	string post = """";
	int _ticks_between_calls = 1;
	int ltick = int.MinValue;
	//..int callspertick = 1;

	static int base_sort_position_c = 0;
	int base_sort_position = 0;

	bool nevercalled = true;
	//bool closed = true;
	public int getSortPosition()
	{
		if (nevercalled) return int.MaxValue;
		int mult = (int)Math.Pow(10, 8 - (depth * 2));
		if (parent != null) return parent.getSortPosition() + (base_sort_position * mult);
		return base_sort_position * mult;
	}
	static int basep = (int)Math.Pow(10, 5);
	public Profiler(string name)
	{
		if (PROFILING_ENABLED)
		{
			Name = name;
			profilers.Add(this);
			for(var i =0; i < mstracklen; i++)mstrack[i] = 0;
			base_sort_position = base_sort_position_c;
			base_sort_position_c += 1;
		}
	}
	public void s()
	{
		start();
	}
	public void e()
	{
		stop();
	}
	static List<Profiler> stack = new List<Profiler>();
	Profiler parent = null;
	int depth = 0;
	bool adding = false;
	public void start()
	{
		if (PROFILING_ENABLED)
		{
			//closed = false;
			nevercalled = false;
			if (tick != ltick)
			{
				if (_ticks_between_calls == 1 && ltick != int.MinValue)
				{
					_ticks_between_calls = tick - ltick;
				}else
				{
					var tbc = tick - ltick;
					if (tbc != _ticks_between_calls)
					{
						_ticks_between_calls = 1;
						for (var i = 0; i < mstracklen; i++) mstrack[i] = 0;
					}
				}

				ltick = tick;
				//callspertick = 1;
				adding = false;
			}
			else
			{
				adding = true;
			}
			if (depth == 0) depth = stack.Count;
			if (depth > 11) depth = 11;
			if (stack.Count > 0 && parent == null) parent = stack[stack.Count - 1];
			stack.Add(this);
			start_time = DateTime.Now;
		}
	}
	double lastms = 0;
	double average = 0;


	/// <summary>
			/// records a fake ms consumption for this timeframe - for tests or demo
			/// </summary>
	public double FAKE_stop(double fakems)
	{
		return stop(fakems);
	}
	/// <summary>
			/// adds the elapsed time since start() to the records
			/// </summary>
	public double stop()
	{
		double time = 0;
		if (PROFILING_ENABLED)
		{
			//closed = true;
			time = (DateTime.Now - start_time).TotalMilliseconds;
		}
		return stop(time);
	}

	private double stop(double _ms)
	{
		double time = 0;
		if (PROFILING_ENABLED)
		{
			time = _ms;

			stack.Pop();
			if (parent != null)
			{
				depth = parent.depth + 1;
			}

			//if(!adding)mscursor = (mscursor + 1) % mstracklen;


			if (!adding) mstrack[mscursor] = 0;
			mstrack[mscursor] += time;
			if (!adding) mscursor = (mscursor + 1) % mstracklen;

			average = 0d;
			foreach (double ms in mstrack) average += ms;
			average *= msdiv;
			average /= _ticks_between_calls;
			lastms = time;
		}
		return time;
	}
	/// <summary>
			/// generates a monospaced report text. If called every tick, every 120 ticks it will recalculate treeview data.
			/// </summary>
	//the treeview can be initially inaccurate as some profilers might not be called every tick, depending on program architecture
	public string getReport(StringBuilder bu)
	{
		if (PROFILING_ENABLED)
		{
			if (tick % 120 == 25)//recalculate hacky treeview data, delayed by 25 ticks from program start
			{
				try
				{
					profilers.Sort(delegate (Profiler x, Profiler y)
					{
						return x.getSortPosition().CompareTo(y.getSortPosition());
					});
				}
				catch (Exception) { }

				for (int i = 0; i < profilers.Count; i++)
				{
					Profiler p = profilers[i];

					p.pre = """";
					if (p.depth > 0 && p.parent != null)
					{
						bool parent_has_future_siblings = false;
						bool has_future_siblings_under_parent = false;
						for (int b = i + 1; b < profilers.Count; b++)
						{
							if (profilers[b].depth == p.parent.depth) parent_has_future_siblings = true;
							if (profilers[b].depth == p.depth) has_future_siblings_under_parent = true;
							if (profilers[b].depth < p.depth) break;

						}
						while (p.pre.Length < p.parent.depth)
						{
							if (parent_has_future_siblings) p.pre += ""│"";
							else p.pre += "" "";
						}
						bool last = false;

						if (!has_future_siblings_under_parent)
						{
							if (i < profilers.Count - 1)
							{
								if (profilers[i + 1].depth != p.depth) last = true;
							}
							else last = true;
						}
						if (last) p.pre += ""└"";
						else p.pre += ""├"";
						while (p.pre.Length < p.depth) p.pre += ""─"";
					}
				}
				int mlen = 0;
				foreach (Profiler p in profilers) if (p.pre.Length + p.Name.Length > mlen) mlen = p.pre.Length + p.Name.Length;
				foreach (Profiler p in profilers)
				{
					p.post = """";
					int l = p.pre.Length + p.Name.Length + p.post.Length;
					if (l < mlen) p.post = new string('_', mlen - l);
				}
			}
			if (nevercalled) bapp(bu, ""!!!!"", Name , ""!!!!: NEVER CALLED!"");
			else bapp(bu, pre, Name, post, "": "" , lastms.ToString(""0.00"") , "";"", average.ToString(""0.00""));
		}
		return """";
	}
	static public string getAllReports()
	{
		StringBuilder b = new StringBuilder();
		//string r = """";
		if (PROFILING_ENABLED)
		{
			foreach (Profiler watch in profilers)
			{
				watch.getReport(b);
				b.Append(""\n"");
			}
		}
		if (stack.Count > 0)
		{
			bapp(b,""profile stack error:\n"", stack.Count, ""\n"");
			foreach (var s in stack)
			{
				bapp(b, s.Name, "","");
			}
		}
		return b.ToString();
	}
}

static IMyTextSurface consoleLog = null;
static IMyTextSurface statusLog = null;
static IMyTextSurface profileLog = null;
static IMyTextSurface PDCLog = null;
//static List<IMyTerminalBlock> weaponCoreWeapons = new List<IMyTerminalBlock>();
static List<IMyShipController> controllers = new List<IMyShipController>();
static List<IMyShipConnector> connectors = new List<IMyShipConnector>();
static List<IMyTerminalBlock> inventoryBlocks = new List<IMyTerminalBlock>();
static public WcPbApi APIWC = null;
static public ResourceLoader resourceLoader = null;
public class ResourceLoader
{
	public Program p;

	public bool neverFullyLoaded = true;
	public ResourceLoader()
	{
		mkBlockCheckMachine();
	}

	bool readConfig = false;

	public void update()
	{
		if (APIWC == null)
		{
			APIWC = new WcPbApi();
			try
			{
				APIWC.Activate(gProgram.Me);
			}
			catch (Exception) { }

		}
		if (!APIWC.isReady && tick % 30 == 0)
		{
			try
			{
				APIWC.Activate(gProgram.Me);
			}
			catch (Exception) { }
		}
		if (!APIWC.isReady) return;

		if (!readConfig || tick % 60 == 0)
		{
			readConfig = true;
			/*if (p.Me.CustomData != lastCustomData)
					{
						//log(""Loading CustomData."", LT.LOG_N);
						//deserializeConfig(p.Me.CustomData);
						//p.Me.CustomData = lastCustomData = serializeConfig();
					}*/
		}

		if (blockCheckMachine != null)
		{
			if (!blockCheckMachine.MoveNext())
			{
				blockCheckMachine.Dispose();
				blockCheckMachine = null;
			}
		}
		else if (readConfig && tick % (5 * 60 * 60) == 0) mkBlockCheckMachine();
	}
	public string lastCustomData = ""-1"";

	IEnumerator<bool> blockCheckMachine = null;
	void mkBlockCheckMachine()
	{
		if (blockCheckMachine != null) blockCheckMachine.Dispose();
		blockCheckMachine = blockLoader();
		step = 0;
	}
	public int step = 0;

	public bool isThis(IMyTerminalBlock b)
	{
		return b.OwnerId == p.Me.OwnerId && b.CubeGrid == p.Me.CubeGrid;
	}
	public IEnumerator<bool> blockLoader()
	{
		var gts = p.GridTerminalSystem;
		consoleLog = null;
		statusLog = null;
		profileLog = null;
		List<IMyTerminalBlock> LCDs = new List<IMyTerminalBlock>();
		gts.GetBlocksOfType(LCDs, b => (b is IMyTextSurface) && b.CubeGrid == p.Me.CubeGrid);
		foreach (var b in LCDs)
		{
			IMyTextSurface s = b as IMyTextSurface;
			if (b.CustomData.Contains(""statusLog"")) statusLog = s;
			else if (b.CustomData.Contains(""consoleLog"")) consoleLog = s;
			else if (b.CustomData.Contains(""profileLog"")) profileLog = s;
			else if (b.CustomData.Contains(""PDCLog"")) PDCLog = s;
		}
		step++;
		yield return true;
		gts.GetBlocksOfType(controllers, isThis);
		step++;
		yield return true;
		step++;
		connectors.Clear();
		gts.GetBlocksOfType(connectors, isThis);
		yield return true;
		step++;
		//gts.GetBlocksOfType(weaponCoreWeapons, b => b.CubeGrid == p.Me.CubeGrid && b.IsFunctional && APIWC.HasCoreWeapon(b));
		//yield return true;
		//step++;
		gts.GetBlocksOfType(inventoryBlocks, b => b.HasInventory && b.HasPlayerAccess(p.Me.OwnerId));
		yield return true;
		step++;
		if (neverFullyLoaded) log(""BOOT DONE. ""+tick+""t (""+(((float)tick)/60).ToString(""0.0"")+""s)"", LT.LOG_N);
		neverFullyLoaded = false;
		step++;
		yield return false;
	}
}

public class SpriteHUDLCD
{
	static Dictionary<string, Color> ColorList = new Dictionary<string, Color> { { ""aliceblue"", Color.AliceBlue }, { ""antiquewhite"", Color.AntiqueWhite }, { ""aqua"", Color.Aqua }, { ""aquamarine"", Color.Aquamarine }, { ""azure"", Color.Azure }, { ""beige"", Color.Beige }, { ""bisque"", Color.Bisque }, { ""black"", Color.Black }, { ""blanchedalmond"", Color.BlanchedAlmond }, { ""blue"", Color.Blue }, { ""blueviolet"", Color.BlueViolet }, { ""brown"", Color.Brown }, { ""burlywood"", Color.BurlyWood }, { ""badetblue"", Color.CadetBlue }, { ""chartreuse"", Color.Chartreuse }, { ""chocolate"", Color.Chocolate }, { ""coral"", Color.Coral }, { ""cornflowerblue"", Color.CornflowerBlue }, { ""cornsilk"", Color.Cornsilk }, { ""crimson"", Color.Crimson }, { ""cyan"", Color.Cyan }, { ""darkblue"", Color.DarkBlue }, { ""darkcyan"", Color.DarkCyan }, { ""darkgoldenrod"", Color.DarkGoldenrod }, { ""darkgray"", Color.DarkGray }, { ""darkgreen"", Color.DarkGreen }, { ""darkkhaki"", Color.DarkKhaki }, { ""darkmagenta"", Color.DarkMagenta }, { ""darkoliveGreen"", Color.DarkOliveGreen }, { ""darkorange"", Color.DarkOrange }, { ""darkorchid"", Color.DarkOrchid }, { ""darkred"", Color.DarkRed }, { ""darksalmon"", Color.DarkSalmon }, { ""darkseagreen"", Color.DarkSeaGreen }, { ""darkslateblue"", Color.DarkSlateBlue }, { ""darkslategray"", Color.DarkSlateGray }, { ""darkturquoise"", Color.DarkTurquoise }, { ""darkviolet"", Color.DarkViolet }, { ""deeppink"", Color.DeepPink }, { ""deepskyblue"", Color.DeepSkyBlue }, { ""dimgray"", Color.DimGray }, { ""dodgerblue"", Color.DodgerBlue }, { ""firebrick"", Color.Firebrick }, { ""floralwhite"", Color.FloralWhite }, { ""forestgreen"", Color.ForestGreen }, { ""fuchsia"", Color.Fuchsia }, { ""gainsboro"", Color.Gainsboro }, { ""ghostwhite"", Color.GhostWhite }, { ""gold"", Color.Gold }, { ""goldenrod"", Color.Goldenrod }, { ""gray"", Color.Gray }, { ""green"", Color.Green }, { ""greenyellow"", Color.GreenYellow }, { ""doneydew"", Color.Honeydew }, { ""hotpink"", Color.HotPink }, { ""indianred"", Color.IndianRed }, { ""indigo"", Color.Indigo }, { ""ivory"", Color.Ivory }, { ""khaki"", Color.Khaki }, { ""lavender"", Color.Lavender }, { ""lavenderblush"", Color.LavenderBlush }, { ""lawngreen"", Color.LawnGreen }, { ""lemonchiffon"", Color.LemonChiffon }, { ""lightblue"", Color.LightBlue }, { ""lightcoral"", Color.LightCoral }, { ""lightcyan"", Color.LightCyan }, { ""lightgoldenrodyellow"", Color.LightGoldenrodYellow }, { ""lightgray"", Color.LightGray }, { ""lightgreen"", Color.LightGreen }, { ""lightpink"", Color.LightPink }, { ""lightsalmon"", Color.LightSalmon }, { ""lightseagreen"", Color.LightSeaGreen }, { ""lightskyblue"", Color.LightSkyBlue }, { ""lightslategray"", Color.LightSlateGray }, { ""lightsteelblue"", Color.LightSteelBlue }, { ""lightyellow"", Color.LightYellow }, { ""lime"", Color.Lime }, { ""limegreen"", Color.LimeGreen }, { ""linen"", Color.Linen }, { ""magenta"", Color.Magenta }, { ""maroon"", Color.Maroon }, { ""mediumaquamarine"", Color.MediumAquamarine }, { ""mediumblue"", Color.MediumBlue }, { ""mediumorchid"", Color.MediumOrchid }, { ""mediumpurple"", Color.MediumPurple }, { ""mediumseagreen"", Color.MediumSeaGreen }, { ""mediumslateblue"", Color.MediumSlateBlue }, { ""mediumspringgreen"", Color.MediumSpringGreen }, { ""mediumturquoise"", Color.MediumTurquoise }, { ""mediumvioletred"", Color.MediumVioletRed }, { ""midnightblue"", Color.MidnightBlue }, { ""mintcream"", Color.MintCream }, { ""mistyrose"", Color.MistyRose }, { ""moccasin"", Color.Moccasin }, { ""navajowhite"", Color.NavajoWhite }, { ""navy"", Color.Navy }, { ""oldlace"", Color.OldLace }, { ""olive"", Color.Olive }, { ""olivedrab"", Color.OliveDrab }, { ""orange"", Color.Orange }, { ""orangered"", Color.OrangeRed }, { ""orchid"", Color.Orchid }, { ""palegoldenrod"", Color.PaleGoldenrod }, { ""palegreen"", Color.PaleGreen }, { ""paleturquoise"", Color.PaleTurquoise }, { ""palevioletred"", Color.PaleVioletRed }, { ""papayawhip"", Color.PapayaWhip }, { ""peachpuff"", Color.PeachPuff }, { ""peru"", Color.Peru }, { ""pink"", Color.Pink }, { ""plum"", Color.Plum }, { ""powderblue"", Color.PowderBlue }, { ""purple"", Color.Purple }, { ""red"", Color.Red }, { ""rosybrown"", Color.RosyBrown }, { ""royalblue"", Color.RoyalBlue }, { ""saddlebrown"", Color.SaddleBrown }, { ""salmon"", Color.Salmon }, { ""sandybrown"", Color.SandyBrown }, { ""seagreen"", Color.SeaGreen }, { ""seashell"", Color.SeaShell }, { ""sienna"", Color.Sienna }, { ""silver"", Color.Silver }, { ""skyblue"", Color.SkyBlue }, { ""slateblue"", Color.SlateBlue }, { ""slategray"", Color.SlateGray }, { ""snow"", Color.Snow }, { ""springgreen"", Color.SpringGreen }, { ""steelblue"", Color.SteelBlue }, { ""tan"", Color.Tan }, { ""teal"", Color.Teal }, { ""thistle"", Color.Thistle }, { ""tomato"", Color.Tomato }, { ""turquoise"", Color.Turquoise }, { ""violet"", Color.Violet }, { ""wheat"", Color.Wheat }, { ""white"", Color.White }, { ""whitesmoke"", Color.WhiteSmoke }, { ""yellow"", Color.Yellow }, { ""yellowgreen"", Color.YellowGreen } };
	public IMyTextSurface s = null;

	public SpriteHUDLCD(IMyTextSurface s)
	{
		this.s = s;
	}
	int ltick = -1;
	string lasttext = ""-1"";
	public void setLCD(string text)
	{
		if (text != lasttext || tick - ltick > 120)
		{
			ltick = tick;
			lasttext = text;
			s.WriteText(text);
			List<object> tok = new List<object>();
			string[] tokens = text.Split(new string[] { ""<color="" }, StringSplitOptions.None);
			for (int i = 0; i < tokens.Length; i++)
			{
				var t = tokens[i];
				foreach (var kvp in ColorList)
				{
					if (t.StartsWith(kvp.Key + "">""))
					{
						t = t.Substring(kvp.Key.Length + 1);
						tok.Add(kvp.Value);
						break;
					}
				}
				tok.Add(t);
			}

			s.ContentType = ContentType.SCRIPT;
			s.Script = """";
			s.Font = ""Monospace"";
			RectangleF _viewport;
			_viewport = new RectangleF(
	(s.TextureSize - s.SurfaceSize) / 2f,
	s.SurfaceSize
);
			using (var frame = s.DrawFrame())
			{
				var zpos = new Vector2(0, 0) + _viewport.Position + new Vector2(s.TextPadding / 100 * s.SurfaceSize.X, s.TextPadding / 100 * s.SurfaceSize.Y);
				var position = zpos;
				Color cColor = Color.White;
				foreach (var t in tok)
				{
					if (t is Color) cColor = (Color)t;
					else if (t is string) writeText((string)t, frame, ref position, zpos, s.FontSize, cColor);
				}
			}
		}
	}

	public void writeText(string text, MySpriteDrawFrame frame, ref Vector2 pos, Vector2 zpos, float textSize, Color color)
	{
		string[] lines = text.Split('\n');
		for (int l = 0; l < lines.Length; l++)
		{
			var line = lines[l];
			if (line.Length > 0)
			{
				MySprite sprite = MySprite.CreateText(line, ""Monospace"", color, textSize, TextAlignment.LEFT);
				sprite.Position = pos;
				frame.Add(sprite);
			}
			if (l < lines.Length - 1)
			{
				pos.X = zpos.X;
				pos.Y += 28 * textSize;
			}
			else pos.X += 20 * textSize * line.Length;
		}
	}
}

}

public class WcPbApi
{
	public string[] WcBlockTypeLabels = new string[]
		{
			""Any"",
			""Offense"",
			""Utility"",
			""Power"",
			""Production"",
			""Thrust"",
			""Jumping"",
			""Steering""
		};

	private Action<ICollection<MyDefinitionId>> a;
	private Func<IMyTerminalBlock, IDictionary<string, int>, bool> b;
	private Action<IMyTerminalBlock, IDictionary<MyDetectedEntityInfo, float>> c;
	private Func<long, bool> d;
	private Func<long, int, MyDetectedEntityInfo> e;
	private Func<IMyTerminalBlock, long, int, bool> f;
	private Action<IMyTerminalBlock, bool, bool, int> g;
	private Func<IMyTerminalBlock, bool> h;
	private Action<IMyTerminalBlock, ICollection<MyDetectedEntityInfo>> i;
	private Func<IMyTerminalBlock, ICollection<string>, int, bool> j;
	private Action<IMyTerminalBlock, ICollection<string>, int> k;
	private Func<IMyTerminalBlock, long, int, Vector3D?> l;

	private Func<IMyTerminalBlock, int, Matrix> m;
	private Func<IMyTerminalBlock, int, Matrix> n;
	private Func<IMyTerminalBlock, long, int, MyTuple<bool, Vector3D?>> o;
	private Func<IMyTerminalBlock, int, string> p;
	private Action<IMyTerminalBlock, int, string> q;
	private Func<long, float> r;
	private Func<IMyTerminalBlock, int, MyDetectedEntityInfo> s;
	private Action<IMyTerminalBlock, long, int> t;
	private Func<long, MyTuple<bool, int, int>> u;

	private Action<IMyTerminalBlock, bool, int> v;
	private Func<IMyTerminalBlock, int, bool, bool, bool> w;
	private Func<IMyTerminalBlock, int, float> x;
	private Func<IMyTerminalBlock, int, MyTuple<Vector3D, Vector3D>> y;
	private Func<IMyTerminalBlock, float> _getCurrentPower;
	public Func<Sandbox.ModAPI.Ingame.IMyTerminalBlock, float> _getHeatLevel;

	public bool isReady = false;
	IMyTerminalBlock pbBlock = null;
	public bool Activate(IMyTerminalBlock pbBlock)
	{
		this.pbBlock = pbBlock;
		var dict = pbBlock.GetProperty(""WcPbAPI"")?.As<IReadOnlyDictionary<string, Delegate>>().GetValue(pbBlock);
		if (dict == null) throw new Exception(""WcPbAPI failed to activate"");
		return ApiAssign(dict);
	}

	public bool ApiAssign(IReadOnlyDictionary<string, Delegate> delegates)
	{
		if (delegates == null)
			return false;
		AssignMethod(delegates, ""GetCoreWeapons"", ref a);
		AssignMethod(delegates, ""GetBlockWeaponMap"", ref b);
		AssignMethod(delegates, ""GetSortedThreats"", ref c);
		AssignMethod(delegates, ""GetObstructions"", ref i);
		AssignMethod(delegates, ""HasGridAi"", ref d);
		AssignMethod(delegates, ""GetAiFocus"", ref e);
		AssignMethod(delegates, ""SetAiFocus"", ref f);
		AssignMethod(delegates, ""HasCoreWeapon"", ref h);
		AssignMethod(delegates, ""GetPredictedTargetPosition"", ref l);
		AssignMethod(delegates, ""GetTurretTargetTypes"", ref j);
		AssignMethod(delegates, ""SetTurretTargetTypes"", ref k);
		AssignMethod(delegates, ""GetWeaponAzimuthMatrix"", ref m);
		AssignMethod(delegates, ""GetWeaponElevationMatrix"", ref n);
		AssignMethod(delegates, ""IsTargetAlignedExtended"", ref o);
		AssignMethod(delegates, ""GetActiveAmmo"", ref p);
		AssignMethod(delegates, ""SetActiveAmmo"", ref q);
		AssignMethod(delegates, ""GetConstructEffectiveDps"", ref r);
		AssignMethod(delegates, ""GetWeaponTarget"", ref s);
		AssignMethod(delegates, ""SetWeaponTarget"", ref t);
		AssignMethod(delegates, ""GetProjectilesLockedOn"", ref u);

		AssignMethod(delegates, ""FireWeaponOnce"", ref v);
		AssignMethod(delegates, ""ToggleWeaponFire"", ref g);
		AssignMethod(delegates, ""IsWeaponReadyToFire"", ref w);
		AssignMethod(delegates, ""GetMaxWeaponRange"", ref x);
		AssignMethod(delegates, ""GetWeaponScope"", ref y);

		AssignMethod(delegates, ""GetCurrentPower"", ref _getCurrentPower);
		AssignMethod(delegates, ""GetHeatLevel"", ref _getHeatLevel);

		//Delegate.CreateDelegate(null, null);

		isReady = true;
		return true;
	}
	private void AssignMethod<T>(IReadOnlyDictionary<string, Delegate> delegates, string name, ref T field) where T : class
	{
		if (delegates == null)
		{
			field = null;
			return;
		}
		Delegate del;
		if (!delegates.TryGetValue(name, out del))
			throw new Exception($""{GetType().Name} :: Couldn't find {name} delegate of type {typeof(T)}"");
		field = del as T;
		if (field == null)
			throw new Exception(
				$""{GetType().Name} :: Delegate {name} is not type {typeof(T)}, instead it's: {del.GetType()}"");
	}

	public void GetAllCoreWeapons(ICollection<MyDefinitionId> collection) => a?.Invoke(collection);
	public void GetSortedThreats(IDictionary<MyDetectedEntityInfo, float> collection) =>
		c?.Invoke(pbBlock, collection);
	public bool HasGridAi(long entity) => d?.Invoke(entity) ?? false;
	public MyDetectedEntityInfo? GetAiFocus(long shooter, int priority = 0) => e?.Invoke(shooter, priority);

	public bool SetAiFocus(IMyTerminalBlock pBlock, long target, int priority = 0) =>
		f?.Invoke(pBlock, target, priority) ?? false;

	public void ToggleWeaponFire(IMyTerminalBlock weapon, bool on, bool allWeapons, int weaponId = 0) =>
		g?.Invoke(weapon, on, allWeapons, weaponId);
	public bool HasCoreWeapon(IMyTerminalBlock weapon) => h?.Invoke(weapon) ?? false;

	public void GetObstructions(IMyTerminalBlock pBlock, ICollection<MyDetectedEntityInfo> collection) =>
		i?.Invoke(pBlock, collection);

	public Vector3D? GetPredictedTargetPosition(IMyTerminalBlock weapon, long targetEnt, int weaponId) =>
		l?.Invoke(weapon, targetEnt, weaponId) ?? null;

	public Matrix GetWeaponAzimuthMatrix(IMyTerminalBlock weapon, int weaponId) =>
		m?.Invoke(weapon, weaponId) ?? Matrix.Zero;

	public Matrix GetWeaponElevationMatrix(IMyTerminalBlock weapon, int weaponId) =>
		n?.Invoke(weapon, weaponId) ?? Matrix.Zero;

	public MyTuple<bool, Vector3D?> IsTargetAlignedExtended(IMyTerminalBlock weapon, long targetEnt, int weaponId) =>
		o?.Invoke(weapon, targetEnt, weaponId) ?? new MyTuple<bool, Vector3D?>();
	public string GetActiveAmmo(IMyTerminalBlock weapon, int weaponId) =>
		p?.Invoke(weapon, weaponId) ?? null;

	public void SetActiveAmmo(IMyTerminalBlock weapon, int weaponId, string ammoType) =>
		q?.Invoke(weapon, weaponId, ammoType);

	public float GetConstructEffectiveDps(long entity) => r?.Invoke(entity) ?? 0f;

	public MyDetectedEntityInfo? GetWeaponTarget(IMyTerminalBlock weapon, int weaponId = 0) =>
		s?.Invoke(weapon, weaponId);

	public void SetWeaponTarget(IMyTerminalBlock weapon, long target, int weaponId = 0) =>
		t?.Invoke(weapon, target, weaponId);

	public bool GetBlockWeaponMap(IMyTerminalBlock weaponBlock, IDictionary<string, int> collection) =>
		b?.Invoke(weaponBlock, collection) ?? false;

	public MyTuple<bool, int, int> GetProjectilesLockedOn(long victim) =>
		u?.Invoke(victim) ?? new MyTuple<bool, int, int>();

	public void FireWeaponOnce(IMyTerminalBlock weapon, bool allWeapons = true, int weaponId = 0) =>
			v?.Invoke(weapon, allWeapons, weaponId);


	public bool IsWeaponReadyToFire(IMyTerminalBlock weapon, int weaponId = 0, bool anyWeaponReady = true,
		bool shootReady = false) =>
		w?.Invoke(weapon, weaponId, anyWeaponReady, shootReady) ?? false;

	public float GetMaxWeaponRange(IMyTerminalBlock weapon, int weaponId) =>
		x?.Invoke(weapon, weaponId) ?? 0f;

	public MyTuple<Vector3D, Vector3D> GetWeaponScope(IMyTerminalBlock weapon, int weaponId) =>
		y?.Invoke(weapon, weaponId) ?? new MyTuple<Vector3D, Vector3D>();
	public float GetCurrentPower(IMyTerminalBlock weapon) => _getCurrentPower?.Invoke(weapon) ?? 0f;

	public float GetHeatLevel(Sandbox.ModAPI.Ingame.IMyTerminalBlock weapon) => _getHeatLevel?.Invoke(weapon) ?? 0f;"
wmyQ5bAd,HA climate new test,chemelli74,Python,Wednesday 24th of January 2024 04:27:26 PM CDT,"""""""Support for climates.""""""
from __future__ import annotations

from typing import Any

from aiocomelit import ComelitSerialBridgeObject
from aiocomelit.const import CLIMATE

from homeassistant.components.climate import (
    ClimateEntity,
    ClimateEntityFeature,
    HVACAction,
    HVACMode,
    UnitOfTemperature,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_TEMPERATURE
from homeassistant.core import HomeAssistant
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from .const import _LOGGER, DOMAIN
from .coordinator import ComelitSerialBridge

CLIMATE_ACTIONS: dict[HVACMode, str] = {
    HVACMode.OFF: ""off"",
    HVACMode.AUTO: ""auto"",
    HVACMode.HEAT: ""on"",
    HVACMode.COOL: ""on"",
}

PRESET_MODES: dict[str, str] = {""L"": ""Estate"", ""U"": ""Inverno""}


async def async_setup_entry(
    hass: HomeAssistant,
    config_entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """"""Set up Comelit climates.""""""

    coordinator: ComelitSerialBridge = hass.data[DOMAIN][config_entry.entry_id]

    async_add_entities(
        ComelitClimateEntity(coordinator, device, config_entry.entry_id)
        for device in coordinator.data[CLIMATE].values()
    )


class ComelitClimateEntity(CoordinatorEntity[ComelitSerialBridge], ClimateEntity):
    """"""Climate device.""""""

    _attr_hvac_modes = [HVACMode.OFF, HVACMode.HEAT, HVACMode.COOL, HVACMode.AUTO]
    _attr_icon = ""mdi:thermostat""
    _attr_max_temp = 30
    _attr_min_temp = 5
    _attr_preset_modes = [""ESTATE"", ""INVERNO""]
    _attr_supported_features = (
        ClimateEntityFeature.TARGET_TEMPERATURE | ClimateEntityFeature.PRESET_MODE
    )
    _attr_target_temperature_step = 1
    _attr_temperature_unit = UnitOfTemperature.CELSIUS
    _attr_has_entity_name = True
    _attr_name = None

    def __init__(
        self,
        coordinator: ComelitSerialBridge,
        device: ComelitSerialBridgeObject,
        config_entry_entry_id: str,
    ) -> None:
        """"""Init light entity.""""""
        self._api = coordinator.api
        self._device = device
        super().__init__(coordinator)
        # Use config_entry.entry_id as base for unique_id
        # because no serial number or mac is available
        self._attr_unique_id = f""{config_entry_entry_id}-{device.index}""
        self._attr_device_info = coordinator.platform_device_info(device, device.type)

    @property
    def _clima(self) -> list[Any]:
        """"""Return clima device data.""""""
        # CLIMATE has 2 turple:
        # - first  for Clima
        # - second for Humidifier
        return self.coordinator.data[CLIMATE][self._device.index].val[0]

    @property
    def _api_mode(self) -> str:
        """"""Return device mode.""""""
        _LOGGER.debug(""_api_mode = %s"", self._clima[3])
        return self._clima[3]

    @property
    def _api_status(self) -> bool:
        ""Return device status.""
        _LOGGER.debug(""_api_status = %s"", self._clima[1])
        return self._clima[1]

    @property
    def target_temperature(self) -> float:
        """"""Set target temperature.""""""
        _LOGGER.debug(""target_temperature = %s"", self._clima[4] / 10)
        return self._clima[4] / 10

    @property
    def current_temperature(self) -> float:
        """"""Return current temperature.""""""
        _LOGGER.debug(""current_temperature = %s"", self._clima[0] / 10)
        return self._clima[0] / 10

    @property
    def hvac_mode(self) -> HVACMode:
        """"""HVAC current mode.""""""
        if self._api_status == 0:
            _LOGGER.debug(""hvac_mode = OFF"")
            return HVACMode.OFF

        if self._api_mode == ""A"":
            _LOGGER.debug(""hvac_mode = AUTO"")
            return HVACMode.AUTO

        # Manual
        _LOGGER.debug(""hvac_mode = MANUAL"")
        return HVACMode.COOL if self.preset_mode == ""ESTATE"" else HVACMode.HEAT

    @property
    def hvac_action(self) -> HVACAction:
        """"""HVAC current action.""""""

        if self._api_status == 0:
            _LOGGER.debug(""hvac_action = IDLE"")
            return HVACAction.IDLE

        if self.preset_mode == ""ESTATE"":
            check = self.target_temperature > self.current_temperature
        else:
            check = self.target_temperature <= self.current_temperature

        _LOGGER.debug(""hvac_action = %s"", ""heating"" if check is True else ""cooling"")
        return HVACAction.HEATING if check is True else HVACAction.COOLING

    @property
    def preset_mode(self) -> str | None:
        """"""Return preset mode.""""""

        # return PRESET_MODES[self._api_mode]
        if self._api_mode == ""L"":
            _LOGGER.debug(""preset_mode = ESTATE"")
            return ""ESTATE""

        _LOGGER.debug(""preset_mode = INVERNO"")
        return ""INVERNO""

    async def async_set_temperature(self, **kwargs: Any) -> None:
        """"""Set new target temperature.""""""
        if (target_temp := kwargs.get(ATTR_TEMPERATURE)) is None:
            return

        await self.coordinator.api.set_clima_status(
            self._device.index, ""set"", target_temp * 10
        )

    async def async_set_hvac_mode(self, hvac_mode: HVACMode) -> None:
        """"""Set hvac mode.""""""
        await self.coordinator.api.set_clima_status(
            self._device.index, CLIMATE_ACTIONS[hvac_mode], 0
        )

    async def async_set_preset_mode(self, preset_mode: str) -> None:
        """"""Set new target preset mode.""""""
        if preset_mode == ""ESTATE"":
            action = ""lower""
        else:
            action = ""upper""
        await self.coordinator.api.set_clima_status(self._device.index, action)
"
CrGf7tJs,Player Detect,ShinukiAyatoVT,Lua,Wednesday 24th of January 2024 03:48:47 PM CDT,"local pd = peripheral.find(""playerDetector"")
local radius = 4

local pos1 = {x=-1270, y=63, z=1909}
local pos2 = {x=-1211, y=80, z=185}

local visitors = {}

while true do
  for _, name in pairs(pd.getPlayersInCoords({x=-1270, y=63, z=1909}, {x=-1211, y=80, z=185})) do
    if not visitors[name] then
      if visitors[name] == nil then
        if print(name, ""entered the casino"") then
          visitors[name] = true;
        end
      else
        visitors[name] = true;
      end
    end
  end
  for name in pairs(visitors) do
    if visitors[name] then
      visitors[name] = false
    else
      local res, reason = print(name, ""leaved the casino"")
      if res or reason == ""incorrect player name/uuid"" then
        visitors[name] = nil
      end
    end
  end
end"
waqq1iQX,More Swipers,kasilia_creations,JavaScript,Wednesday 24th of January 2024 02:58:40 PM CDT,"import React, { useRef, useState } from 'react';
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/pagination';

import './styles.css';

// import required modules
import { Pagination } from 'swiper/modules';

export default function App() {
  return (
    <>
      <Swiper
        slidesPerView={3}
        spaceBetween={30}
        pagination={{
          clickable: true,
        }}
        modules={[Pagination]}
        className=""mySwiper""
      >
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
        <SwiperSlide>Slide 4</SwiperSlide>
        <SwiperSlide>Slide 5</SwiperSlide>
        <SwiperSlide>Slide 6</SwiperSlide>
        <SwiperSlide>Slide 7</SwiperSlide>
        <SwiperSlide>Slide 8</SwiperSlide>
        <SwiperSlide>Slide 9</SwiperSlide>
      </Swiper>
    </>
  );
}


// Nested for the next section
import React, { useRef, useState } from 'react';
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/grid';
import 'swiper/css/pagination';

import './styles.css';

// import required modules
import { Grid, Pagination } from 'swiper/modules';

export default function App() {
  return (
    <>
      <Swiper
        slidesPerView={3}
        grid={{
          rows: 2,
        }}
        spaceBetween={30}
        pagination={{
          clickable: true,
        }}
        modules={[Grid, Pagination]}
        className=""mySwiper""
      >
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
        <SwiperSlide>Slide 4</SwiperSlide>
        <SwiperSlide>Slide 5</SwiperSlide>
        <SwiperSlide>Slide 6</SwiperSlide>
        <SwiperSlide>Slide 7</SwiperSlide>
        <SwiperSlide>Slide 8</SwiperSlide>
        <SwiperSlide>Slide 9</SwiperSlide>
      </Swiper>
    </>
  );
}

// Auto Play
import React, { useRef, useState } from 'react';
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/pagination';
import 'swiper/css/navigation';

import './styles.css';

// import required modules
import { Autoplay, Pagination, Navigation } from 'swiper/modules';

export default function App() {
  return (
    <>
      <Swiper
        spaceBetween={30}
        centeredSlides={true}
        autoplay={{
          delay: 2500,
          disableOnInteraction: false,
        }}
        pagination={{
          clickable: true,
        }}
        navigation={true}
        modules={[Autoplay, Pagination, Navigation]}
        className=""mySwiper""
      >
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
        <SwiperSlide>Slide 4</SwiperSlide>
        <SwiperSlide>Slide 5</SwiperSlide>
        <SwiperSlide>Slide 6</SwiperSlide>
        <SwiperSlide>Slide 7</SwiperSlide>
        <SwiperSlide>Slide 8</SwiperSlide>
        <SwiperSlide>Slide 9</SwiperSlide>
      </Swiper>
    </>
  );
}
"
Ecdg3G7N,Задача 9,dmemsm,Python,Wednesday 24th of January 2024 02:38:43 PM CDT,"result = 1/103

for i in range(97, 0, -6):
    result = 1 / (i + result)

print(result)

# 0.8761857313542953"
Ai98f571,derp.py,j0h,Python,Wednesday 24th of January 2024 02:34:56 PM CDT,"#!/usr/bin/python3

def x():
    print(""Fk"")

    def y():
        print(""My"")

        def z():
            print(""Life"")

        z() #Call the inner most function inside y() 

    y()  # Call the inner function inside x()

# Call the outer function
x()"
Hi7eYbch,DIABLO DEMO CODE,imk0tter,mIRC,Wednesday 24th of January 2024 02:34:40 PM CDT,"alias ABSN {
  var %sqrt 2 ^ -1
  var %number $1 ^ 2
  var %result %number ^ %sqrt

  return %result
}
alias ATANN {
  var %x $1 / $absn($1)
  return %x

}
alias COUNT_TO_NUMBER {
  return $calc($1 + $ATANN($calc($1 ^ $ATANN($1))) * $ABSN($2))
}
alias LIMIT {
  return $max($min($3, $1), $2)
}
alias TRIM {
  return $calc($1 - $1 % 1) 
}
;;;;;;;;;;;;;;;;;;;
; FOR DIABLO DEMO ;
;;;;;;;;;;;;;;;;;;;
alias DIABLO_D2_CRAFT_COST {
  ;$1 = Item Level
  ;$2 = Minimum Gold Tick (% BASED)
  return $calc(2 ^ $1 * (100 / $2))
}
alias DIABLO_EXP_TO_D2_GOLD {
  ;$1 = Player Level
  ;$2 = Monster Level
  ;$3 = Monster Count Start
  ;$4 = Monster Count Interval
  ;$5 = Goldfind Multiplier (% BASED)
  ;$6 = Minimum Gold Tick (% BASED)

  var %MINIMUM_GOLD_TICK $$6
  var %PLAYER_LEVEL $1
  var %MONSTER_LEVEL $2
  var %MONSTER_COUNT_START $3
  var %MONSTER_COUNT_INTERVAL $4
  var %GOLDFIND_MULTIPLIER $5

  var %tiers 12

  return $TRIM($calc((2 ^ (($DIABLO_PLEVEL_AND_MLEVEL_TO_EXP_NEW(%PLAYER_LEVEL,%MONSTER_LEVEL,%MONSTER_COUNT_START,%MONSTER_COUNT_INTERVAL) - 1) / %tiers - 1) * ($limit(%GOLDFIND_MULTIPLIER,0,100) / 100) * 2 ^ ($limit(%GOLDFIND_MULTIPLIER,100,$calc(%GOLDFIND_MULTIPLIER + 100)) / 100)) * (100 / %MINIMUM_GOLD_TICK)))

  ;return $calc(2 ^ ($DIABLO_PLEVEL_AND_MLEVEL_TO_EXP_NEW($1,$2,$3,$4) / 12 + ($5 / 100 - 1)))
}
; COUNT = PLEVEL - MLEVEL
; OFFSET = COUNT_TO_NUMBER(COUNT)
; print(""OFFSETA: "" + str(OFFSET))
; return (((PLEVEL + 1) / ABSN(OFFSET) ** ATANN(OFFSET)) / MONSTER_COUNT_INTERVAL) / MONSTER_COUNT_START
alias DIABLO_PLEVEL_AND_MLEVEL_TO_EXP_NEW {
  var %plevel $1
  var %mlevel $iif($2,$2,$1)
  var %monster_start $iif($3,$3,1)
  var %monster_count $iif($4,$4,1)

  var %COUNT $COUNT_TO_NUMBER($calc((%PLEVEL - %MLEVEL) * %monster_count + %monster_start - $LIMIT($DTEST_VIRII(%monster_start),0,1)),1)

  return $ABSN($calc((%PLEVEL + 1) / %COUNT ^ $ATANN(%COUNT)))
}
alias DTEST_VIRII {
  return $calc((($1 ^ 2) ^ -1 - ($1 ^ -1) + 1) * $1)
}
;;;;;;;;;;;;;;;;;;;;;;;
; END FOR DIABLO DEMO ;
;;;;;;;;;;;;;;;;;;;;;;;"
612Bad42,Задача 3,dmemsm,Python,Wednesday 24th of January 2024 02:34:31 PM CDT,"import math

result = 95+math.sqrt(5)

for i in range(90, 0, -5):
    result += i + math.sqrt(result)/2

result = math.sqrt(result)
print(result)

# 34.44878785772421"
jsrWEzw0,TP02_Punto02,gabriel097,Java,Wednesday 24th of January 2024 02:30:40 PM CDT,"/*
2) Escribir un programa que permita verificar la parentización múltiple de una expresión matemática; se dice
parentización múltiple porque se utilizan varios símbolos que deben emparejarse; en este caso los símbolos
de apertura son: “(”, “[” y “{”; los símbolos de cierre son: “)”, “]” y “}” respectivamente. Para la resolución
del ejercicio se deben utilizar las versiones básica o genérica de Stack propuestas en teoría.
 */
import java.util.Scanner;

public class Punto02 {

    public static void main(String[] args) {
        char resp;
        do {
            Scanner entrada = new Scanner(System.in);
            System.out.println(""Ingrese expresion matematica:.."");
            String cadena = entrada.nextLine();
            if (verificarParentesis(cadena)) {
                System.out.println(""La expresion esta bien parentizada"");
            } else {
                System.out.println(""La expresion NO esta bien parentizada"");
            }
            System.out.println(""¿Continuar ingresando?...s/n"");
            resp=helper.validarRespuesta();
        } while (resp!= 'n');
    }

    static boolean verificarParentesis(String cadena) {
        Stack<Character> pila = new Stack<Character>();
        char c;
        //lee la cadena caracter por caracter
        for (int i = 0; i < cadena.length(); i++) {
            c = cadena.charAt(i);
            if (c == '(' || c == '{' || c == '[') {
                pila.push(c);// se guarda en la pila
            } else {
                if (c == ')' || c == '}' || c == ']') {
                    if (!pila.empty()) {
                        pila.pop(); //se desapila 
                    } else {
                        return false;
                    }
                }
            }
        }
        return pila.size() == 0;
        //si esta bien parentizada entonces la pila esta vacia retorna true
        //sino si la pila no esta vacia retorna false

    }
}
"
EhdkM9Qi,Вопрос 2,dmemsm,Python,Wednesday 24th of January 2024 02:27:41 PM CDT,"import math

a, b, c = map(int, input().split())
#ax**2+bx+c-16=0
c -= 16
D = b**2-4*a*c
if D < 0:
    print(""Нет корней"")
elif D == 0:
    x = -1*b/(2*a)
    print(""Один корень: "" + x)
else:
    sqrtd = math.sqrt(D)
    x1 = (-1*b-sqrtd)/(2*a)
    x2 = (-1*b+sqrtd)/(2*a)
    print(f""Два корня: {x1} и {x2}"")"
ymPNN978,Задача 1,dmemsm,Python,Wednesday 24th of January 2024 02:26:30 PM CDT,"for i in range(100, 1000):
    istr = str(i)
    d1 = int(istr[0] + istr[1])
    d2 = int(istr[1] + istr[0])
    m = int(istr[0]) * int(istr[1]) * int(istr[2])
    if m**2 == d1 or m**2 == d2:
        print(istr)
"
Na76rgqP,Swiper Autoplay,kasilia_creations,JavaScript,Wednesday 24th of January 2024 02:04:24 PM CDT,"import React, { useRef, useState } from 'react';
// Import Swiper React components
import { Swiper, SwiperSlide } from 'swiper/react';

// Import Swiper styles
import 'swiper/css';
import 'swiper/css/pagination';
import 'swiper/css/navigation';

import './styles.css';

// import required modules
import { Autoplay, Pagination, Navigation } from 'swiper/modules';

export default function App() {
  const progressCircle = useRef(null);
  const progressContent = useRef(null);
  const onAutoplayTimeLeft = (s, time, progress) => {
    progressCircle.current.style.setProperty('--progress', 1 - progress);
    progressContent.current.textContent = `${Math.ceil(time / 1000)}s`;
  };
  return (
    <>
      <Swiper
        spaceBetween={30}
        centeredSlides={true}
        autoplay={{
          delay: 2500,
          disableOnInteraction: false,
        }}
        pagination={{
          clickable: true,
        }}
        navigation={true}
        modules={[Autoplay, Pagination, Navigation]}
        onAutoplayTimeLeft={onAutoplayTimeLeft}
        className=""mySwiper""
      >
        <SwiperSlide>Slide 1</SwiperSlide>
        <SwiperSlide>Slide 2</SwiperSlide>
        <SwiperSlide>Slide 3</SwiperSlide>
        <SwiperSlide>Slide 4</SwiperSlide>
        <SwiperSlide>Slide 5</SwiperSlide>
        <SwiperSlide>Slide 6</SwiperSlide>
        <SwiperSlide>Slide 7</SwiperSlide>
        <SwiperSlide>Slide 8</SwiperSlide>
        <SwiperSlide>Slide 9</SwiperSlide>
        <div className=""autoplay-progress"" slot=""container-end"">
          <svg viewBox=""0 0 48 48"" ref={progressCircle}>
            <circle cx=""24"" cy=""24"" r=""20""></circle>
          </svg>
          <span ref={progressContent}></span>
        </div>
      </Swiper>
    </>
  );
}
"
7wuR7brQ,Transpose,PIBogdanov,C,Wednesday 24th of January 2024 02:02:40 PM CDT,"#include <stdio.h>

int main()
{
    int numbers[13][13];

    printf(""Input elements into the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            scanf(""%d"", &numbers[i][j]);
        }

        printf(""\n"");
    }

    printf(""\n\nPrinting the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            printf(""%d "", numbers[i][j]);
        }

        printf(""\n"");
    }

    printf(""\n\n\nTransposing the array ....\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = i + 1; j < 13; j++)
        {
            numbers[i][j] += numbers[j][i];

            numbers[j][i] = numbers[i][j] - numbers[j][i];

            numbers[i][j] -= numbers[j][i];

            if (numbers[j][i] < 0)
            {
                numbers[j][i] = -numbers[j][i];
            }
        }
    }

    printf(""\nPrinting the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            printf(""%d "", numbers[i][j]);
        }

        printf(""\n"");
    }

    return 0;
}"
xKmvunA2,Transpose,PIBogdanov,C,Wednesday 24th of January 2024 02:00:33 PM CDT,"#include <stdio.h>

int main()
{
    int numbers[13][13];

    printf(""Input elements into the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            scanf(""%d"", &numbers[i][j]);
        }

        printf(""\n"");
    }

    printf(""\n\nPrinting the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            printf(""%d "", numbers[i][j]);
        }

        printf(""\n"");
    }

    printf(""\n\n\nTransposing the array ....\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = i + 1; j < 13; j++)
        {
            numbers[i][j] += numbers[j][i];

            numbers[j][i] = numbers[i][j] - numbers[j][i];

            numbers[i][j] -= numbers[j][i];

            if (numbers[j][i] >= 0)
            {
                numbers[j][i] = numbers[j][i];
            }

            else
            {
                numbers[j][i] = -numbers[j][i];
            }
        }
    }

    printf(""\nPrinting the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            printf(""%d "", numbers[i][j]);
        }

        printf(""\n"");
    }

    return 0;
}"
DM17bLDb,Visual Voice Mail file on Android,metalx1000,Bash,Wednesday 24th of January 2024 01:48:49 PM CDT,"# Visual Voice Mail file on Android

cd /data/data/com.google.android.dialer/files
strings VisualVoicemailFragmentModelCacheData.pb"
gMd1chTA,Transpose,PIBogdanov,C,Wednesday 24th of January 2024 01:46:30 PM CDT,"#include <stdio.h>

int main()
{
    int numbers[13][13];

    printf(""Input elements into the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            scanf(""%d"", &numbers[i][j]);
        }

        printf(""\n"");
    }

    printf(""\n\nPrinting the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            printf(""%d "", numbers[i][j]);
        }

        printf(""\n"");
    }

    printf(""\n\n\nTransposing the array ....\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = i + 1; j < 13; j++)
        {
            numbers[i][j] += numbers[j][i];

            numbers[j][i] = numbers[i][j] - numbers[j][i];

            numbers[i][j] -= numbers[j][i];
        }
    }

    printf(""\nPrinting the array:\n\n"");

    for (int i = 0; i < 13; i++)
    {
        for (int j = 0; j < 13; j++)
        {
            printf(""%d "", numbers[i][j]);
        }

        printf(""\n"");
    }

    return 0;
}"
5uSRrTaE,Scraping Data from Google Dialer,metalx1000,Bash,Wednesday 24th of January 2024 01:31:26 PM CDT,"#Android Public Listings
#if Google Phone Dialer is installed
cd /data/data/com.google.android.dialer/files/datadownload/shared/public

# names and phone
strings *|grep -v http|grep -v '^\$'|sed 's/2$//g'|grep '+' -B1

# user photo
strings *|sed 's/http/\nhttp/g'|grep http"
ps3JGLEi,burstmissile for addaction,Gamenator,SQF,Wednesday 24th of January 2024 01:29:01 PM CDT,"null=[]spawn{
_i=100;

if(((vehicle player iskindof ""Plane"") || (vehicle player iskindof ""Helicopter"")) && (side player == west))then{  
  _bomb = ""FIR_GBU24A_BLU118"";  
     
if ((( getposatl vehicle player) select 2 > 750) || (( getposatl vehicle player) select 2 < 10)) then{
    private _degree=0;       
    private _position1 = vehicle player getRelPos [0,0];    
    private _newPos1 = _position1 vectorAdd [0,0,720];
    _missile = createVehicle [_bomb, _newpos1, [], 0, ""CAN_COLLIDE""];        
	triggerammo _missile;  
	for ""_i"" from 0 to 3 do{
	 private _rand_num = [10, 250] call BIS_fnc_randomInt;
	 private _position1 = vehicle player getRelPos [_rand_num,_degree];    
	 private _newPos1 = _position1 vectorAdd [0,0,720];
	 _missile1 = createVehicle [_bomb, _newpos1, [], 0, ""CAN_COLLIDE""];
	 triggerammo _missile1;
	_degree = _degree +90;
	};
           
        
    }else{  
 _missile = createVehicle [_bomb, vehicle player, [], 0, ""CAN_COLLIDE""];  
  triggerammo _missile;
  for ""_i"" from 0 to 3 do{
	 private _rand_num = [10, 250] call BIS_fnc_randomInt;
	 private _rand_num1 = [10, 250] call BIS_fnc_randomInt;
	 private _position0 = getposatl vehicle player;   
	 private _newPos0 = _position0 vectorAdd [_rand_num,_rand_num1];
	 _missile1 = createVehicle [_bomb, _newpos0, [], 0, ""CAN_COLLIDE""];
	 triggerammo _missile1;
	};
         
  };   
    
      
     
deletevehicle p2;}  
};"
Esn7nWFY,Format The Text,Pijomir,JavaScript,Wednesday 24th of January 2024 01:22:47 PM CDT,"function solve() {
    let outputRef = document.getElementById(""output"");
    let text = document.getElementById(""input"").value;
    let sentences = text.split('.').filter(Boolean);
    let counter = 0;
    let currentParagraph = [];
    while (sentences.length > 0) {
      if (counter === 3) {
        outputRef.innerHTML += `<p>${currentParagraph.join('.')}.</p>`;
        counter = 0;
        currentParagraph = [];
      }

      let currentSentence = sentences.shift();
      currentParagraph.push(currentSentence);
      counter++;
    }

    outputRef.innerHTML += `<p>${currentParagraph.join('.')}.</p>`;
}"
wiggatdD,HA Comelit init,chemelli74,Python,Wednesday 24th of January 2024 01:13:42 PM CDT,"""""""Comelit integration.""""""


from aiocomelit.const import BRIDGE

from homeassistant.config_entries import ConfigEntry
from homeassistant.const import CONF_HOST, CONF_PIN, CONF_PORT, CONF_TYPE, Platform
from homeassistant.core import HomeAssistant

from .const import DEFAULT_PORT, DOMAIN
from .coordinator import ComelitBaseCoordinator, ComelitSerialBridge, ComelitVedoSystem

BRIDGE_PLATFORMS = [
    Platform.CLIMATE,
    Platform.COVER,
    Platform.LIGHT,
    Platform.SENSOR,
    Platform.SWITCH,
]
VEDO_PLATFORMS = [
    Platform.ALARM_CONTROL_PANEL,
    Platform.SENSOR,
]


async def async_setup_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """"""Set up Comelit platform.""""""

    coordinator: ComelitBaseCoordinator
    if entry.data.get(CONF_TYPE, BRIDGE) == BRIDGE:
        coordinator = ComelitSerialBridge(
            hass,
            entry.data[CONF_HOST],
            entry.data.get(CONF_PORT, DEFAULT_PORT),
            entry.data[CONF_PIN],
        )
        platforms = BRIDGE_PLATFORMS
    else:
        coordinator = ComelitVedoSystem(
            hass,
            entry.data[CONF_HOST],
            entry.data.get(CONF_PORT, DEFAULT_PORT),
            entry.data[CONF_PIN],
        )
        platforms = VEDO_PLATFORMS

    await coordinator.async_config_entry_first_refresh()

    hass.data.setdefault(DOMAIN, {})[entry.entry_id] = coordinator

    await hass.config_entries.async_forward_entry_setups(entry, platforms)

    return True


async def async_unload_entry(hass: HomeAssistant, entry: ConfigEntry) -> bool:
    """"""Unload a config entry.""""""

    if entry.data.get(CONF_TYPE, BRIDGE) == BRIDGE:
        platforms = BRIDGE_PLATFORMS
    else:
        platforms = VEDO_PLATFORMS

    coordinator: ComelitBaseCoordinator = hass.data[DOMAIN][entry.entry_id]
    if unload_ok := await hass.config_entries.async_unload_platforms(entry, platforms):
        await coordinator.api.logout()
        await coordinator.api.close()
        hass.data[DOMAIN].pop(entry.entry_id)

    return unload_ok
"
Gbvm9eiY,Aiocomelit api.py,chemelli74,Python,Wednesday 24th of January 2024 01:12:49 PM CDT,"""""""Support for Comelit SimpleHome.""""""
import asyncio
import functools
from abc import abstractmethod
from dataclasses import dataclass
from datetime import datetime
from http.cookies import SimpleCookie
from typing import Any

import aiohttp
import pint
from yarl import URL

from .const import (
    _LOGGER,
    ALARM_AREA_STATUS,
    ALARM_AREAS,
    ALARM_ZONE_STATUS,
    ALARM_ZONES,
    BRIDGE,
    CLIMATE,
    COVER,
    IRRIGATION,
    LIGHT,
    OTHER,
    SCENARIO,
    SLEEP,
    STATE_COVER,
    STATE_ON,
    VEDO,
    WATT,
    AlarmAreaState,
    AlarmZoneState,
)
from .exceptions import CannotAuthenticate, CannotConnect, CannotRetrieveData


@dataclass
class ComelitSerialBridgeObject:
    """"""Comelit SimpleHome Serial bridge class.""""""

    index: int
    name: str
    status: int
    human_status: str
    type: str
    val: int | dict[Any, Any]  # Temperature or Humidity (CLIMATE)
    protected: int
    zone: str
    power: float
    power_unit: str = WATT


@dataclass
class ComelitVedoAreaObject:
    """"""Comelit SimpleHome VEDO area class.""""""

    index: int
    name: str
    p1: bool
    p2: bool
    ready: bool
    armed: bool
    alarm: bool
    alarm_memory: bool
    sabotage: bool
    anomaly: bool
    in_time: bool
    out_time: bool
    human_status: AlarmAreaState


@dataclass
class ComelitVedoZoneObject:
    """"""Comelit SimpleHome VEDO zone class.""""""

    index: int
    name: str
    status_api: str
    status: int
    human_status: AlarmZoneState


class ComelitCommonApi:
    """"""Common API calls for Comelit SimpleHome devices.""""""

    def __init__(self, host: str, port: int, pin: int) -> None:
        """"""Initialize the session.""""""
        self.host = f""{host}:{port}""
        self.device_pin = pin
        self.base_url = f""http://{host}:{port}""
        self._headers = {
            ""User-Agent"": ""Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0"",
            ""Accept-Language"": ""en-GB,en;q=0.5"",
            ""X-Requested-With"": ""XMLHttpRequest"",
        }
        self._session: aiohttp.ClientSession

    async def _get_page_result(
        self, page: str, reply_json: bool = True
    ) -> tuple[int, dict[str, Any]]:
        """"""Return status and data from a GET query.""""""
        _LOGGER.debug(""GET page %s [%s]"", page, self.host)
        timestamp = datetime.now().strftime(""%Y-%m-%d %H:%M:%S"")
        url = f""{self.base_url}{page}&_={timestamp}""
        try:
            response = await self._session.get(
                url,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during GET"") from exc

        _LOGGER.debug(""GET response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""GET response status {response.status}"")

        if not reply_json:
            _LOGGER.debug(""GET response is empty [%s]"", self.host)
            return response.status, {}

        return response.status, await response.json()

    async def _post_page_result(
        self, page: str, payload: dict[str, Any]
    ) -> SimpleCookie:
        """"""Return status and data from a POST query.""""""
        _LOGGER.debug(""POST page %s [%s]"", page, self.host)
        url = f""{self.base_url}{page}""
        try:
            response = await self._session.post(
                url,
                data=payload,
                headers=self._headers,
                timeout=10,
            )
        except (asyncio.TimeoutError, aiohttp.ClientConnectorError) as exc:
            raise CannotConnect(""Connection error during POST"") from exc

        _LOGGER.debug(""POST response %s [%s]"", await response.text(), self.host)

        if response.status != 200:
            raise CannotRetrieveData(f""POST response status {response.status}"")

        return response.cookies

    async def _check_logged_in(self, host_type: str) -> bool:
        """"""Check if login is active.""""""

        reply_status, reply_json = await self._get_page_result(""/login.json"")

        _LOGGER.debug(""%s login reply: %s"", host_type, reply_json)
        if host_type == BRIDGE:
            logged = reply_json[""domus""] != ""000000000000""
        else:
            logged = reply_json[""logged""] == 1

        return logged

    @abstractmethod
    async def login(self) -> bool:
        """"""Login to Comelit device.""""""

    async def _login(self, payload: dict[str, Any], host_type: str) -> bool:
        """"""Login into Comelit device.""""""
        _LOGGER.debug(""Logging into host %s [%s]"", self.host, host_type)

        if not hasattr(self, ""_session"") or self._session.closed:
            _LOGGER.debug(""Creating HTTP ClientSession"")
            jar = aiohttp.CookieJar(unsafe=True)
            connector = aiohttp.TCPConnector(force_close=True)
            self._session = aiohttp.ClientSession(cookie_jar=jar, connector=connector)

        if await self._check_logged_in(host_type):
            return True

        cookies = await self._post_page_result(""/login.cgi"", payload)
        _LOGGER.debug(""Cookies for host %s: %s"", self.host, cookies)

        if not cookies:
            _LOGGER.warning(
                ""Authentication failed for host %s [%s]: no cookies received"",
                self.host,
                host_type,
            )
            raise CannotAuthenticate

        self._session.cookie_jar.update_cookies(cookies, URL(self.base_url))

        if await self._check_logged_in(host_type):
            await asyncio.sleep(SLEEP)
            return True

        _LOGGER.warning(
            ""Authentication failed for host %s [%s]: generic error"",
            self.host,
            host_type,
        )
        raise CannotAuthenticate

    async def logout(self) -> None:
        """"""Comelit Simple Home logout.""""""
        payload = {""logout"": 1}
        await self._post_page_result(""/login.cgi"", payload)
        self._session.cookie_jar.clear()

    async def close(self) -> None:
        """"""Comelit Simple Home close session.""""""
        if hasattr(self, ""_session""):
            await self._session.close()


class ComeliteSerialBridgeApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome Serial bridge.""""""

    def __init__(self, host: str, port: int, bridge_pin: int) -> None:
        """"""Initialize the session.""""""
        super().__init__(host, port, bridge_pin)
        self._devices: dict[str, dict[int, ComelitSerialBridgeObject]] = {}

    async def _translate_device_status(self, dev_type: str, dev_status: int) -> str:
        """"""Makes status human readable.""""""

        if dev_type == COVER:
            return STATE_COVER[dev_status]

        return ""on"" if dev_status == STATE_ON else ""off""

    async def set_device_status(
        self, device_type: str, index: int, action: int
    ) -> bool:
        """"""Set device action.

        action:
            0 = off/close
            1 = on/open

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?type={device_type}&num{action}={index}"", False
        )
        return reply_status == 200

    async def set_clima_status(self, index: int, action:str, val: int = 0
    ) -> bool:
        """"""Set clima status.

        action:
            auto, man, on, off, set

        """"""
        reply_status = await self._get_page_result(
            f""/user/action.cgi?clima={index}&thermo={action}&val={val}"", False
        )
        return reply_status == 200

    async def get_device_status(self, device_type: str, index: int) -> int:
        """"""Get device status.""""""
        reply_status, reply_json = await self._get_page_result(
            f""/user/icon_status.json?type={device_type}""
        )
        _LOGGER.debug(
            ""Device %s[%s] status: %s"", device_type, index, reply_json[""status""][index]
        )
        return reply_json[""status""][index]

    async def login(self) -> bool:
        """"""Login to Serial Bridge device.""""""
        payload = {""dom"": self.device_pin}
        return await self._login(payload, BRIDGE)

    async def get_all_devices(self) -> dict[str, dict[int, ComelitSerialBridgeObject]]:
        """"""Get all connected devices.""""""

        _LOGGER.debug(""Getting all devices for host %s"", self.host)

        loop = asyncio.get_running_loop()
        ureg = await loop.run_in_executor(
            None, functools.partial(pint.UnitRegistry, cache_folder="":auto:"")
        )
        ureg.default_format = ""~""

        for dev_type in (CLIMATE, COVER, LIGHT, IRRIGATION, OTHER, SCENARIO):
            reply_status, reply_json = await self._get_page_result(
                f""/user/icon_desc.json?type={dev_type}""
            )
            if dev_type == CLIMATE:
                reply_json = {'num': 2, 'desc': ['Piano Terra', 'Piano Primo'], 'env': [0, 0], 'status': [1, 0], 'val': [[[182, 1, 'U', 'M', 250, 0, 0, 'U'], [605, 0, 'O', 'M', 640, 0, 0, 'N'], [0, 0]], [[201, 0, 'O', 'M', 250, 0, 0, 'U'], [556, 0, 'O', 'M', 1000, 0, 0, 'N'], [0, 0]]], 'type': [13, 13], 'protected': [0, 0], 'env_desc': ['', 'Ingresso', 'Sala', 'Cucina', 'Studio', 'Camera Natalia', 'Camera Axel &amp; Arazka', 'Camera Matrimoniale', 'Bagno Servizio', 'Bagno Bimbi', 'Bagno Matrimoniale', 'Disimpegno Bagno Ser', 'Disimpegno Scale', 'Disimpegno Matrimoni', 'Scale', 'Esterno', 'Tettoia Garage', 'Balcone Frontale', 'Balcone Retro', 'Locale Tecnico']}
            _LOGGER.debug(
                ""List of devices of type %s: %s"",
                dev_type,
                reply_json,
            )
            reply_counter_json: dict[str, Any] = {}
            if dev_type == OTHER and reply_json[""num""] > 0:
                reply_status, reply_counter_json = await self._get_page_result(
                    ""/user/counter.json""
                )
            devices = {}
            for i in range(reply_json[""num""]):
                # Guard against ""scenario"", that has 32 devices even if none is configured
                if reply_json[""desc""][i] == """":
                    continue
                status = reply_json[""status""][i]
                power = 0.0
                if instant_values := reply_counter_json.get(""instant""):
                    instant = ureg(instant_values[i])
                    if not instant.dimensionless:
                        power = ureg.convert(
                            instant.magnitude, str(instant.units), WATT
                        )
                dev_info = ComelitSerialBridgeObject(
                    index=i,
                    name=reply_json[""desc""][i],
                    status=status,
                    human_status=await self._translate_device_status(dev_type, status),
                    type=dev_type,
                    val=reply_json[""val""][i],
                    protected=reply_json[""protected""][i],
                    zone=reply_json[""env_desc""][reply_json[""env""][i]]
                    if not dev_type == SCENARIO
                    else """",
                    power=power,
                )
                devices.update({i: dev_info})
            self._devices.update({dev_type: devices})

        return self._devices


class ComelitVedoApi(ComelitCommonApi):
    """"""Queries Comelit SimpleHome VEDO alarm.""""""

    async def _translate_zone_status(
        self, zone: ComelitVedoZoneObject
    ) -> AlarmZoneState:
        """"""Translate ZONE status.""""""

        for status in ALARM_ZONE_STATUS:
            if zone.status & status != 0:
                return ALARM_ZONE_STATUS[status]

        return AlarmZoneState.REST

    async def _translate_area_status(
        self, area: ComelitVedoAreaObject
    ) -> AlarmAreaState:
        """"""Translate AREA status.""""""

        for field in ALARM_AREA_STATUS:
            if getattr(area, field):
                return ALARM_AREA_STATUS[field]

        return AlarmAreaState.DISARMED

    async def _create_area_object(
        self, json_area_desc: dict[str, Any], json_area_stat: dict[str, Any], index: int
    ) -> ComelitVedoAreaObject:
        """"""Get area status.""""""

        area = ComelitVedoAreaObject(
            index=index,
            name=json_area_desc[""description""][index],
            p1=json_area_desc[""p1_pres""][index],
            p2=json_area_desc[""p2_pres""][index],
            ready=json_area_stat[""ready""][index],
            armed=json_area_stat[""armed""][index],
            alarm=json_area_stat[""alarm""][index],
            alarm_memory=json_area_stat[""alarm_memory""][index],
            sabotage=json_area_stat[""sabotage""][index],
            anomaly=json_area_stat[""anomaly""][index],
            in_time=json_area_stat[""in_time""][index],
            out_time=json_area_stat[""out_time""][index],
            human_status=AlarmAreaState.UNKNOWN,
        )
        area.human_status = await self._translate_area_status(area)
        _LOGGER.debug(area)
        return area

    async def _create_zone_object(
        self, json_zone_desc: dict[str, Any], json_zone_stat: dict[str, Any], index: int
    ) -> ComelitVedoZoneObject:
        """"""Create zone object.""""""

        status_api = json_zone_stat[""status""].split("","")[index]

        zone = ComelitVedoZoneObject(
            index=index,
            name=json_zone_desc[""description""][index],
            status=int(status_api, 16),
            status_api=status_api,
            human_status=AlarmZoneState.UNKNOWN,
        )
        zone.human_status = await self._translate_zone_status(zone)
        _LOGGER.debug(zone)
        return zone

    async def set_zone_status(
        self, index: int, action: str, force: bool = False
    ) -> bool:
        """"""Set zone action.

        action:
            tot = enable
            dis = disable

        index:
            32 = all zones
             n = specific zone

        force:
            False = don't force action
            True  = force action

        """"""

        reply_status = await self._get_page_result(
            f""/action.cgi?vedo=1&{action}={index}&force={int(force)}"", False
        )
        return reply_status == 200

    async def login(self) -> bool:
        """"""Login to VEDO system.""""""
        payload = {""code"": self.device_pin}
        return await self._login(payload, VEDO)

    async def get_area_status(
        self, area: ComelitVedoAreaObject
    ) -> ComelitVedoAreaObject:
        """"""Get AREA status.""""""
        reply_status, reply_json_area_stat = await self._get_page_result(
            ""/user/area_stat.json""
        )
        _LOGGER.debug(""Alarm AREA statistics: %s"", reply_json_area_stat)

        if not reply_json_area_stat[""logged""]:
            raise CannotRetrieveData(""Logged is 0 in /user/area_stat.json"")

        description = {""description"": area.name, ""p1_pres"": area.p1, ""p2_pres"": area.p2}

        return await self._create_area_object(
            description, reply_json_area_stat, area.index
        )

    async def get_all_areas_and_zones(
        self,
    ) -> dict[str, dict[int, Any]]:
        """"""Get all VEDO system AREA and ZONE.""""""

        queries = {
            1: {""desc"": ""AREA description"", ""page"": ""/user/area_desc.json""},
            2: {""desc"": ""ZONE description"", ""page"": ""/user/zone_desc.json""},
            3: {""desc"": ""AREA statistics"", ""page"": ""/user/area_stat.json""},
            4: {""desc"": ""ZONE statistics"", ""page"": ""/user/zone_stat.json""},
        }
        reply_json_data: list[dict[Any, Any]] = []

        for info in queries.values():
            page = info[""page""]
            reply_status, reply_json = await self._get_page_result(page)
            _LOGGER.debug(""Alarm %s: %s"", info[""desc""], reply_json)
            if not reply_json[""logged""]:
                raise CannotRetrieveData(f""Logged is 0 in {page}"")
            reply_json_data.append(reply_json)

        list_areas: list[int] = reply_json_data[0][""present""]
        areas = {}
        for i in range(len(list_areas)):
            if not list_areas[i]:
                _LOGGER.debug(""Alarm skipping non present AREA [%i]"", i)
                continue
            area = await self._create_area_object(
                reply_json_data[0], reply_json_data[2], i
            )
            areas.update({i: area})

        list_zones: list[int] = reply_json_data[1][""present""]
        if ""1"" not in list_zones:
            raise CannotRetrieveData(""All zones not present in /user/zone_stat.json"")

        zones = {}
        for i in range(len(list_zones)):
            if not int(list_zones[i]):
                _LOGGER.debug(""Alarm skipping non present ZONE [%i]"", i)
                continue
            zone = await self._create_zone_object(
                reply_json_data[1], reply_json_data[3], i
            )
            zones.update({i: zone})

        return {ALARM_AREAS: areas, ALARM_ZONES: zones}
"
x1w488T5,HA Comelit climate,chemelli74,Python,Wednesday 24th of January 2024 01:06:02 PM CDT,"""""""Support for climates.""""""
from __future__ import annotations

from typing import Any

from aiocomelit import ComelitSerialBridgeObject
from aiocomelit.const import CLIMATE

from homeassistant.components.climate import (
    ClimateEntity,
    ClimateEntityFeature,
    HVACAction,
    HVACMode,
    UnitOfTemperature,
)
from homeassistant.config_entries import ConfigEntry
from homeassistant.const import ATTR_TEMPERATURE
from homeassistant.core import HomeAssistant
from homeassistant.helpers.entity_platform import AddEntitiesCallback
from homeassistant.helpers.update_coordinator import CoordinatorEntity

from .const import DOMAIN
from .coordinator import ComelitSerialBridge

CLIMATE_ACTIONS: dict[HVACMode, str] = {
    HVACMode.OFF: ""off"",
    HVACMode.AUTO: ""auto"",
    HVACMode.HEAT: ""on"",
    HVACMode.COOL: ""on"",
}


async def async_setup_entry(
    hass: HomeAssistant,
    config_entry: ConfigEntry,
    async_add_entities: AddEntitiesCallback,
) -> None:
    """"""Set up Comelit climates.""""""

    coordinator: ComelitSerialBridge = hass.data[DOMAIN][config_entry.entry_id]

    async_add_entities(
        ComelitClimateEntity(coordinator, device, config_entry.entry_id)
        for device in coordinator.data[CLIMATE].values()
    )


class ComelitClimateEntity(CoordinatorEntity[ComelitSerialBridge], ClimateEntity):
    """"""Climate device.""""""

    _attr_hvac_modes = [HVACMode.OFF, HVACMode.HEAT, HVACMode.COOL]
    _attr_icon = ""mdi:thermostat""
    _attr_max_temp = 30
    _attr_min_temp = 5
    _attr_supported_features = ClimateEntityFeature.TARGET_TEMPERATURE
    _attr_target_temperature_step = 1
    _attr_temperature_unit = UnitOfTemperature.CELSIUS
    _attr_has_entity_name = True
    _attr_name = None

    def __init__(
        self,
        coordinator: ComelitSerialBridge,
        device: ComelitSerialBridgeObject,
        config_entry_entry_id: str,
    ) -> None:
        """"""Init light entity.""""""
        self._api = coordinator.api
        self._device = device
        super().__init__(coordinator)
        # Use config_entry.entry_id as base for unique_id
        # because no serial number or mac is available
        self._attr_unique_id = f""{config_entry_entry_id}-{device.index}""
        self._attr_device_info = coordinator.platform_device_info(device, device.type)

    @property
    def _clima(self) -> list[Any]:
        """"""Return clima device data.""""""
        # CLIMATE has 2 turple:
        # - first  for Clima
        # - second for Humidifier
        return self.coordinator.data[CLIMATE][self._device.index].val[0]

    @property
    def _api_mode(self) -> str:
        """"""Return device mode.""""""
        return self._clima[3]

    @property
    def _api_status(self) -> bool:
        ""Return device status.""
        return self._clima[1]

    @property
    def target_temperature(self) -> float:
        """"""Set target temperature.""""""
        return self._clima[4] / 10

    @property
    def current_temperature(self) -> float:
        """"""Return current temperature.""""""
        return self._clima[0] / 10

    @property
    def hvac_mode(self) -> HVACMode:
        """"""HVAC current mode.""""""
        if self._api_status == 0:
            return HVACMode.OFF

        if self._api_mode == ""A"":
            return HVACMode.AUTO

        return (
            HVACMode.HEAT
            if self.target_temperature > self.current_temperature
            else HVACMode.COOL
        )

    @property
    def hvac_action(self) -> HVACAction:
        """"""HVAC current action.""""""

        if self._api_status == 0:
            return HVACAction.IDLE

        return (
            HVACAction.HEATING
            if self.target_temperature > self.current_temperature
            else HVACAction.COOLING
        )

    async def async_set_temperature(self, **kwargs: Any) -> None:
        """"""Set new target temperature.""""""
        if (target_temp := kwargs.get(ATTR_TEMPERATURE)) is None:
            return

        await self.coordinator.api.set_clima_status(
            self._device.index, ""set"", target_temp * 10
        )

    async def async_set_hvac_mode(self, hvac_mode: HVACMode) -> None:
        """"""Set hvac mode.""""""
        await self.coordinator.api.set_clima_status(
            self._device.index, CLIMATE_ACTIONS[hvac_mode], 0
        )
"
eG8pd13r,Untitled,Josif_tepe,C++,Wednesday 24th of January 2024 12:59:21 PM CDT,"#include <iostream>
using namespace std;

int main() {
    for(int i = 100; i >= 1; i -= 1) {
        cout << i << endl;
    }
    
    return 0;
}
"
23gmFe05,Verwijderen data mongoose Discord v14,jensie1996,JavaScript,Wednesday 24th of January 2024 12:55:42 PM CDT,"const { SlashCommandBuilder } = require('discord.js');
const testSchema = require('../schemas/test-schema');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('verwijderdb')
        .setDescription('verwijder data van in de DB')
        .addStringOption(option =>
            option.setName('verwijder_item')
                .setDescription('Tekst wat je wilt verwijderen')
                .setRequired(true)),
    async execute(client, interaction) {

		const waardeStr = await interaction.options.getString('verwijder_item');
		// ...

    }
};"
tths2ju4,Untitled,Josif_tepe,C++,Wednesday 24th of January 2024 12:54:39 PM CDT,"#include <iostream>
using namespace std;

int main() {
    for(int i = 1; i <= 100; i += 1) {
        cout << i << endl;
    }
    
    return 0;
}
"
h5r1MrKF,D,Ankit_132,C++,Wednesday 24th of January 2024 12:53:51 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--){
        int x;
        cin>>x;
        
        int ans = 1;
        int f = 0;
        
        for(int b=30; b>=0; b--){
            if(((1<<b)&x) > 0){
                f++;
            }
            else if(f >= 2)
                ans *= 2;
        }
        
        cout<<ans<<""\n"";
    }
}
"
8z0eydSp,C,Ankit_132,C++,Wednesday 24th of January 2024 12:53:19 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--){
        int x;
        cin>>x;
        
        for(int b=30; b>=0; b--){
            if(((1<<b)&x) > 0){
                cout<<x - (1<<b)<<"" ""<<(1<<b)<<""\n"";
                break;
            }
        }
    }
}
"
PuAyuLjd,Untitled,Josif_tepe,C++,Wednesday 24th of January 2024 12:52:20 PM CDT,"#include <iostream>
using namespace std;

int main() {
    for(int i = 1; i <= 10; i += 1) {
        cout << i << endl;
    }
    
    return 0;
}
"
qj0ZmiWK,B,Ankit_132,C++,Wednesday 24th of January 2024 12:51:51 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
    int t;
    cin>>t;
    
    while(t--)
    {
        int n, m;
        cin>>n>>m;
        
        vector<int> a(n);
        for(auto &e: a)     cin>>e;
        
        int tot = 0;
        int ans = 0;
        
        for(auto e: a){
            tot += e;
            
            if(tot >= m){
                ans++;
                tot = 0;
            }
        }
        
        cout<<ans<<""\n"";
    }
}
"
PPb4uVWL,A,Ankit_132,C++,Wednesday 24th of January 2024 12:51:10 PM CDT,"#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	
	while(t--)
	{
	    int n, k;
	    cin>>n>>k;
	    
	    int poss = 1;
	    
	    for(int i=1; i<=n; i++)
	    {
	        if(i*k <= n)
	            poss = i;
	       else
	            break;
	    }
	    
	    for(int i=1; i<=k; i++)
	        cout<<i*poss<<"" "";
	    
	    cout<<""\n"";
	}
}
"
DNVgWK0k,Bekijken data mongoose Discord v14,jensie1996,JavaScript,Wednesday 24th of January 2024 12:50:25 PM CDT,"const { SlashCommandBuilder } = require('discord.js');
const testSchema = require('../schemas/test-schema');

module.exports = {
	data: new SlashCommandBuilder()
		.setName('leesdb')
		.setDescription('lees data van in de DB'),
	async execute(client, interaction) {

		// ...

	}
};
"
V9RELMfq,Untitled,Josif_tepe,C++,Wednesday 24th of January 2024 12:41:39 PM CDT,"#include <iostream>
using namespace std;

int main() {
    int x;
    cin >> x;
    
    int ostatok = x % 10;
    if(ostatok == 0) {
        cout << 0 << endl;
    }
    else {
        cout << 10 - ostatok << endl;
    }
    return 0;
}
"
hyAVYDJr,Opslaan data mongoose Discord v14,jensie1996,JavaScript,Wednesday 24th of January 2024 12:35:27 PM CDT,"const { SlashCommandBuilder } = require('discord.js');
// ...

module.exports = {
	data: new SlashCommandBuilder()
		.setName('opslaandb')
		.setDescription('Slaat een waarde op in de DB')
		.addStringOption(option =>
			option.setName('waarde')
				.setDescription('Tekst wat je wilt opslaan')
				.setRequired(true)),
	async execute(client, interaction) {

		const waardeStr = await interaction.options.getString('waarde');

		// ...
		
		await interaction.reply(""Tekst opgeslagen"");
	}
};
"
F308LsQ8,Elfes,pacho_the_python,Python,Wednesday 24th of January 2024 12:34:54 PM CDT,"from collections import deque
elf_energies = deque([int(x) for x in input().split(' ')])
boxes = [int(x) for x in input().split(' ')]
turns_count = 0
total_energy_spent = 0
toys_count = 0

while boxes and elf_energies:
    while elf_energies and elf_energies[0] < 5:
        elf_energies.popleft()

    if not elf_energies:
        break

    box = boxes.pop()
    elf_energy = elf_energies.popleft()

    turns_count += 1

    toys_to_be_created_count = 1
    energy_to_be_spent = box
    energy_increase_factory = 1

    if turns_count % 3 == 0:
        toys_to_be_created_count = 2
        energy_to_be_spent *= 2
    if turns_count % 5 == 0:
        toys_to_be_created_count = 0
        energy_increase_factory = 0

    if energy_to_be_spent <= elf_energy:
        toys_count += toys_to_be_created_count
        total_energy_spent += energy_to_be_spent
        elf_energies.append(elf_energy - energy_to_be_spent + energy_increase_factory)
    else:
        boxes.append(box)
        elf_energies.append(elf_energy * 2)

print(f'Toys: {toys_count}')
print(f'Energy: {total_energy_spent}')
if elf_energies:
    elves_string = ', '.join(str(x) for x in elf_energies)
    print(f'Elves left: {elves_string}')
if boxes:
    boxes_string = ', '.join(str(x) for x in boxes)
    print(f'Boxes left: {boxes_string}')
"
NCigXrzC,Untitled,Josif_tepe,C++,Wednesday 24th of January 2024 12:28:14 PM CDT,"#include <iostream>
using namespace std;

int main() {
    int x;
    cin >> x;
    
    int prvo_nivo = x;
    int vtoro_nivo = 2 * prvo_nivo;
    int treto_nivo = 2 * vtoro_nivo;
    int cetvrto_niv = 2 * treto_nivo;
    
    cout << prvo_nivo + vtoro_nivo + treto_nivo + cetvrto_niv << endl;
    return 0;
}
"
jDHCqY6B,Trace collection,limmen,Python,Wednesday 24th of January 2024 12:16:37 PM CDT,"import time
from typing import List, Tuple
from csle_common.util.emulation_util import EmulationUtil
from csle_common.metastore.metastore_facade import MetastoreFacade
import csle_common.constants.constants as constants
from csle_common.dao.emulation_config.emulation_trace import EmulationTrace
from csle_cluster.cluster_manager.cluster_controller import ClusterController

if __name__ == '__main__':
    executions = MetastoreFacade.list_emulation_executions_for_a_given_emulation(emulation_name=""csle-level9-040"")
    # There must be an executon of level 9 running first, othewise the list is empty
    execution = executions[0]
    emulation_env_config = execution.emulation_env_config

    # This list should be specified with a list of tuples of the form: (cmds, ip)
    attacker_actions: List[Tuple[List[str], str]] = []

    trace = EmulationTrace(initial_attacker_observation_state = None, initial_defender_observation_state=None,
                           emulation_name=emulation_env_config.name)

    for action in attacker_actions:
        cmds, ip = action
        conn = emulation_env_config.get_connection(ip=""115.152151.151"")

        # Execute actions
        EmulationUtil.execute_ssh_cmds(cmds=cmds, conn=conn)

        # Wait 45 seconds to allow data to propagate in the system
        time.sleep(45)

        # Collect measurements
        time_series = ClusterController.get_execution_time_series_data(
            ip=execution.emulation_env_config.kafka_config.container.physical_host_ip,
            port=constants.GRPC_SERVERS.CLUSTER_MANAGER_PORT, minutes=1,
            ip_first_octet=execution.ip_first_octet, emulation=execution.emulation_env_config.name)

        # Populate trace
        # TODO
    
    # Save trace to the database
    MetastoreFacade.save_emulation_trace(trace)
    
    # Save trace to json file
    trace.to_json_file(json_file_path=""/home/xiaoxuan/trace.json"")"
yXCUmqX2,[site-reviews] fix rating fields when theme uses select2.js,geminilabs,PHP,Wednesday 24th of January 2024 12:12:42 PM CDT,"/*
 * Fixes Star Rating fields when the theme uses select2.js to style all <select> elements on the page
 * Note: This snippet assumes that the theme uses jQuery with select2.js
 * @see https://github.com/select2/select2
 */
add_action('wp_footer', function () {
    echo '<script>jQuery(function($){setTimeout(function(){$("".glsr-star-rating select.select2-hidden-accessible"").select2(""destroy"")},100)});</script>';
}, 1000);"
fRiVZ0E9,VS Code Search RegEx - Sample file,svArtist,HTML,Wednesday 24th of January 2024 12:03:26 PM CDT,"<!DOCTYPE html>
<!-- saved from url=(0162)https://www.shutterfly.com/gc/#/?redirectToEditPages=true&projectGUID=c09249e1-c81e-11ed-9b65-05a27d680346&projectTypeName=MATISSE_CALENDAR&projectSubtypeName=GCP -->
<html class=""no-js bda-not-msie bda-not-firefox bda-chrome bda-chrome-115-0 bda-not-safari bda-not-ipad"" lang=""en"">
<!--<![endif]-->

<head class=""at-element-marker"">
	<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
	<style type=""text/css"">
		@charset ""UTF-8"";

		[ng\:cloak],
		[ng-cloak],
		[data-ng-cloak],
		[x-ng-cloak],
		.ng-cloak,
		.x-ng-cloak,
		.ng-hide:not(.ng-hide-animate) {
			display: none !important;
		}

		ng\:form {
			display: block;
		}

		.ng-animate-shim {
			visibility: hidden;
		}

		.ng-anchor {
			position: absolute;
		}
	</style>

	<meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
	<script>
		window.galleon = {
			buildNumber: '325',
			timeStamp: '2024-01-17T09:08:55.828Z',
			commit: '5fc3f3924faced47028edfbcacadf0b79b323229',
			uuid: 'galleon-20240117-325-5fc3f392-49520f',
			ref: 'origin/master',
			startTime: new Date().getTime()
		};
	</script>
	<title>Shutterfly | Wall Calendars</title>
	<meta name=""description"" content="""">
	<meta name=""viewport"" content=""width=device-width initial-scale=1.0, maximum-scale=1.0, user-scalable=no"">
	<meta name=""apple-mobile-web-app-capable"" content=""yes"">
	<meta name=""apple-mobile-web-app-status-bar-style"" content=""black-translucent"">
	<meta name=""mobile-web-app-capable"" content=""yes"">
	<meta name=""pinterest"" content=""nopin"">
	<link rel=""preconnect"" crossorigin="""" href=""https://173c5b0a.akstat.io/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://adobe-dtm.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://ajax.googleapis.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://api2.shutterfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://booknode.shutterfly.com/"">
	<link rel=""dns-prefetch"" crossorigin="""" href=""https://c.go-mpulse.net/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://cld1.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://c1.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://c2.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://c3.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://c4.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://cdn.staticsfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://cm.everesttech.net/"">
	<link rel=""dns-prefetch"" crossorigin="""" href=""https://cmd.shutterfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://dpm.demdex.net/"">
	<link rel=""dns-prefetch"" crossorigin="""" href=""https://d25wcz1jocbade.cloudfront.net/"">
	<link rel=""dns-prefetch"" crossorigin="""" href=""https://l.shutterfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://im1.shutterfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://uniim1.shutterfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://os.shutterfly.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://sb.scorecardresearch.com/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://shutterfly.demdex.net/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://shutterflycom.tt.omtrdc.net/"">
	<link rel=""preconnect"" crossorigin="""" href=""https://ws.shutterfly.com/"">

	<link rel=""stylesheet"" href=""./02 - Feb_files/m.5ce03bd5.css"">

	<!-- The inline css below this must stay in the index file due to crossdomain SVG issues in Firefox. -->
	<style type=""text/css"">
		.feature-afsMode-client div.AFS-BlackWhite div.background-asset,
		.feature-afsMode-client img.AFS-BlackWhite,
		.feature-afsMode-client div.AFS-BlackWhite img {
			-webkit-filter: url('#BlackWhite');
			-o-filter: url('#BlackWhite');
			-ms-filter: url('#BlackWhite');
			filter: url('#BlackWhite');
			-webkit-filter: url('#webkit-BlackWhite-1') url('#webkit-BlackWhite-2');
		}

		.feature-afsMode-client div.AFS-Sepia div.background-asset,
		.feature-afsMode-client img.AFS-Sepia,
		.feature-afsMode-client div.AFS-Sepia img {
			-webkit-filter: url('#Sepia');
			-o-filter: url('#Sepia');
			-ms-filter: url('#Sepia');
			filter: url('#Sepia');
			-webkit-filter: grayscale(100%) url('#webkit-Sepia');
		}

		.feature-afsMode-client div.AFS-Sunshine div.background-asset,
		.feature-afsMode-client img.AFS-Sunshine,
		.feature-afsMode-client div.AFS-Sunshine img {
			-webkit-filter: url('#Sunshine');
			-o-filter: url('#Sunshine');
			-ms-filter: url('#Sunshine');
			filter: url('#Sunshine');
		}

		.feature-afsMode-client div.AFS-Vibrant div.background-asset,
		.feature-afsMode-client img.AFS-Vibrant,
		.feature-afsMode-client div.AFS-Vibrant img {
			-webkit-filter: url('#Vibrant');
			-o-filter: url('#Vibrant');
			-ms-filter: url('#Vibrant');
			filter: url('#Vibrant');
		}

		.feature-afsMode-client div.AFS-Vintage div.background-asset,
		.feature-afsMode-client img.AFS-Vintage,
		.feature-afsMode-client div.AFS-Vintage img {
			-webkit-filter: url('#Vintage');
			-o-filter: url('#Vintage');
			-ms-filter: url('#Vintage');
			filter: url('#Vintage');
		}

		.feature-afsMode-client div.AFS-Fade div.background-asset,
		img.AFS-Fade,
		div.AFS-Fade img {
			background-color: #FFFFFF;
			opacity: 0.3;
		}

		@media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {

			.feature-afsMode-client img.AFS-BlackWhite,
			.feature-afsMode-client div.AFS-BlackWhite img {
				filter: url('#BlackWhite');
				-webkit-filter: url('#BlackWhite');
			}
		}
	</style>

	<script>
		var a = ""WTF, man??"";
	</script>
...
"
tRuYxiKv,graph,montur,Lua,Wednesday 24th of January 2024 12:00:32 PM CDT,"function timeGraph(pos, name, range, procent, time, style)
    local devideLineOffset = string.len(range.max) + 1
    local oldCursorX, oldCursorY = term.getCursorPos()
    local graphWidth = pos.b.x - (devideLineOffset + pos.a.x + 1)
    local graphHeight = (pos.b.y - 1) - pos.a.y
    local pixelStep = graphHeight / 100
    local y = pos.b.y - (pixelStep * procent)
    while time > graphWidth do
        time = time - graphWidth
    end
    local spaceLeft = graphWidth - time

    --build box
    paintutils.drawBox(pos.a.x, pos.a.y, pos.b.x, pos.b.y, style.border)

    --write title
    term.setCursorPos(pos.a.x, pos.a.y)
    term.write(name)

    --clear area
    paintutils.drawFilledBox(pos.a.x+1, pos.a.y+1, devideLineOffset + pos.a.x, pos.b.y-1, style.background)

    --draw devide line
    devideLineOffset = string.len(range.max) + 1
    paintutils.drawLine(devideLineOffset + pos.a.x, pos.a.y+1, devideLineOffset + pos.a.x, pos.b.y-1, style.devide)

    --write max value
    term.setCursorPos(pos.a.x+1, pos.a.y+1)
    term.setBackgroundColor(style.background)
    term.write(range.max)

    --write min value
    term.setCursorPos(pos.a.x+1, pos.b.y-1)
    term.setBackgroundColor(style.background)
    term.write(range.min)

    --write current value
    paintutils.drawLine(pos.a.x+1, y, devideLineOffset + pos.a.x - 1, y, style.background)
    term.setCursorPos(pos.a.x+1, y)
    term.setBackgroundColor(style.background)
    term.write(math.floor(range.value))
    term.setCursorPos(pos.a.x+1+devideLineOffset, pos.b.y-1)

    --clear graph infront
    paintutils.drawLine(devideLineOffset + pos.a.x + time, pos.a.y+1, devideLineOffset + pos.a.x + time , pos.b.y-1, style.background)

    --draw cursor
    paintutils.drawPixel(time + pos.a.x + devideLineOffset, pos.b.y, style.cursor)

    --draw graph
    paintutils.drawPixel(time + pos.a.x + devideLineOffset, y, style.graphLine)

    --reset for other functions
    term.setBackgroundColor(style.background)
    term.setCursorPos(oldCursorX, oldCursorY)
    
    return spaceLeft
end

function horBarGraph(pos, name, range, procent, style){
}

function verBarGraph(pos, name, range, procent, style){
    local oldCursorX, oldCursorY = term.getCursorPos()
    local graphHeight = (pos.b.y - 1) - pos.a.y
    local pixelStep = graphHeight / 100
    local y = pos.b.y - (pixelStep * procent)
    --build box
    paintutils.drawBox(pos.a.x, pos.a.y, pos.b.x, pos.b.y, style.border)

    --write title
    term.setCursorPos(pos.a.x, pos.a.y)
    term.write(name)

    --clear area
    paintutils.drawFilledBox(pos.a.x+1, pos.a.y+1, pos.b.x-1, pos.b.y-1, style.background)
    
    --draw bar graph
    paintutils.drawFilledBox(pos.a.x+1, pos.a.y+1, pos.b.x-1, y, style.graphLine)

    --write current value
    term.setCursorPos(pos.a.x+1, y)
    term.write(math.floor(range.value))
    term.setCursorPos(pos.a.x+1+devideLineOffset, pos.b.y-1)

    --reset for other functions
    term.setBackgroundColor(style.background)
    term.setCursorPos(oldCursorX, oldCursorY)
}

function calculatePercentage(currentValue, lowestValue, highestValue)
    local range = highestValue - lowestValue
    if range == 0 then
        return 0 -- To avoid division by zero if the range is zero
    end
    return ((currentValue - lowestValue) / range) * 100
end

function getItemPercentage(item)
    local itemData = {}
    local itemMax = {}
    local itemMin = {}
    if itemData[item].count >= itemMax[item] then
        itemMax[item] = itemData[item].count
    end
    if itemData[item].count <= itemMin[item] then
        itemMin[item] = itemData[item].count
    end
    return calculatePercentage(itemData[item].count, itemMin[item], itemMax[item])
end
"
dNYg14Xi,ModDimensions,Z900,Java,Wednesday 24th of January 2024 11:47:26 AM CDT,"package com.death.deathmod.worldgen.dimension;

import com.death.deathmod.DeathMod;
import com.death.deathmod.worldgen.biomes.ModBiomes;
import com.ibm.icu.impl.Pair;
import net.minecraft.core.HolderGetter;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.worldgen.BootstapContext;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.tags.BlockTags;
import net.minecraft.util.valueproviders.ConstantInt;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.biome.*;
import net.minecraft.world.level.dimension.BuiltinDimensionTypes;
import net.minecraft.world.level.dimension.DimensionType;
import net.minecraft.world.level.dimension.LevelStem;
import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;

import java.util.List;
import java.util.OptionalLong;

public class ModDimensions {
    //LEVEL STEMS
    public static final ResourceKey<LevelStem> DEATH_DIM_KEY = ResourceKey.create(Registries.LEVEL_STEM,
            new ResourceLocation(DeathMod.MODID, ""death_dim""));
    //LEVELS
    public static final ResourceKey<Level> DEATH_DIM_LEVEL_KEY = ResourceKey.create(Registries.DIMENSION,
            new ResourceLocation(DeathMod.MODID, ""death_dim""));
    //DIMENSION TYPES
    public static final ResourceKey<DimensionType> DEATH_DIM_TYPE = ResourceKey.create(Registries.DIMENSION_TYPE,
            new ResourceLocation(DeathMod.MODID, ""death_dim_type""));


    public static void bootstrapType(BootstapContext<DimensionType> context) {
        context.register(DEATH_DIM_TYPE, new DimensionType(
                OptionalLong.of(12000), // fixedTime
                false, // hasSkylight
                false, // hasCeiling
                false, // ultraWarm
                false, // natural
                13.0, // coordinateScale
                true, // bedWorks
                false, // respawnAnchorWorks
                0, // minY
                256, // height
                256, // logicalHeight
                BlockTags.INFINIBURN_OVERWORLD, // infiniburn
                BuiltinDimensionTypes.OVERWORLD_EFFECTS, // effectsLocation
                1.0f, // ambientLight
                new DimensionType.MonsterSettings(false, false, ConstantInt.of(0), 0)));
    }

    public static void bootstrapStem(BootstapContext<LevelStem> context) {
        HolderGetter<Biome> biomeRegistry = context.lookup(Registries.BIOME);
        HolderGetter<DimensionType> dimTypes = context.lookup(Registries.DIMENSION_TYPE);
        HolderGetter<NoiseGeneratorSettings> noiseGenSettings = context.lookup(Registries.NOISE_SETTINGS);

         NoiseBasedChunkGenerator wrappedChunkGenerator = new NoiseBasedChunkGenerator(
                 new FixedBiomeSource(biomeRegistry.getOrThrow(ModBiomes.DARK_BIOME)),
                noiseGenSettings.getOrThrow(NoiseGeneratorSettings.OVERWORLD));

        NoiseBasedChunkGenerator noiseBasedChunkGenerator = new NoiseBasedChunkGenerator(
                MultiNoiseBiomeSource.createFromList(
                        new Climate.ParameterList<>(List.of(
                                Pair.of(Climate.parameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), biomeRegistry.getOrThrow(ModBiomes.DARK_BIOME)),
                                Pair.of(Climate.parameters(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F), biomeRegistry.getOrThrow(ModBiomes.BLOOD_BIOME)),
                                Pair.of(Climate.parameters(0.1F, 0.2F, 0.0F, 0.2F, 0.0F, 0.0F, 0.0F), biomeRegistry.getOrThrow(Biomes.BIRCH_FOREST)),
                                Pair.of(Climate.parameters(0.3F, 0.6F, 0.1F, 0.1F, 0.0F, 0.0F, 0.0F), biomeRegistry.getOrThrow(Biomes.OCEAN)),
                                Pair.of(Climate.parameters(0.4F, 0.3F, 0.2F, 0.1F, 0.0F, 0.0F, 0.0F), biomeRegistry.getOrThrow(Biomes.DARK_FOREST))

                        ))),
                noiseGenSettings.getOrThrow(NoiseGeneratorSettings.OVERWORLD));

        LevelStem stem = new LevelStem(dimTypes.getOrThrow(ModDimensions.DEATH_DIM_TYPE), noiseBasedChunkGenerator);

        context.register(DEATH_DIM_KEY, stem);
    }
}

"
a8K5U1jY,Untitled,sissou123,Python,Wednesday 24th of January 2024 11:45:20 AM CDT,"The Complete Python Developer
How to become a Python 3 Developer and get hired! Build 12+ projects, learn Web Development, Machine Learning + more! 
Become a professional Python Developer and get hired
Master modern Python 3.11(latest) fundamentals as well as advanced topics
Learn Object Oriented Programming
Learn Function Programming 
for more:https://cuty.io/1OqCj1eA
"
