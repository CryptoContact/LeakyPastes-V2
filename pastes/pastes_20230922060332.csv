id,title,username,language,date,content
pY9iF2pY,1.20.2 error,jeffreykosse,Java,Thursday 21st of September 2023 11:32:33 PM CDT,"[06:21:29] [Server thread/ERROR]: Error occurred while enabling Slimefun v4.9-UNOFFICIAL (Is it up to date?)
java.lang.NullPointerException: Profile name must not be null
	at java.util.Objects.requireNonNull(Objects.java:259) ~[?:?]
	at com.mojang.authlib.GameProfile.<init>(GameProfile.java:31) ~[authlib-5.0.47.jar:?]
	at org.bukkit.craftbukkit.v1_20_R2.inventory.CraftMetaSkull.setOwningPlayer(CraftMetaSkull.java:227) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at io.github.thebusybiscuit.slimefun4.libraries.dough.skins.CustomGameProfile.apply(CustomGameProfile.java:40) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead.lambda$getItemStack$1(PlayerHead.java:53) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead.getItemStack(PlayerHead.java:63) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.libraries.dough.skins.PlayerHead.getItemStack(PlayerHead.java:51) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils.getCustomHead(SlimefunUtils.java:246) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.core.services.localization.Language.<init>(Language.java:52) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.core.services.LocalizationService.<init>(LocalizationService.java:67) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.implementation.Slimefun.onPluginStart(Slimefun.java:302) ~[?:?]
	at io.github.thebusybiscuit.slimefun4.implementation.Slimefun.onEnable(Slimefun.java:246) ~[?:?]
	at org.bukkit.plugin.java.JavaPlugin.setEnabled(JavaPlugin.java:266) ~[spigot-api-1.20.2-R0.1-SNAPSHOT.jar:?]
	at org.bukkit.plugin.java.JavaPluginLoader.enablePlugin(JavaPluginLoader.java:342) ~[spigot-api-1.20.2-R0.1-SNAPSHOT.jar:?]
	at org.bukkit.plugin.SimplePluginManager.enablePlugin(SimplePluginManager.java:480) ~[spigot-api-1.20.2-R0.1-SNAPSHOT.jar:?]
	at org.bukkit.craftbukkit.v1_20_R2.CraftServer.enablePlugin(CraftServer.java:548) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at org.bukkit.craftbukkit.v1_20_R2.CraftServer.enablePlugins(CraftServer.java:462) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at net.minecraft.server.MinecraftServer.loadWorld0(MinecraftServer.java:577) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at net.minecraft.server.MinecraftServer.loadLevel(MinecraftServer.java:400) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at net.minecraft.server.dedicated.DedicatedServer.e(DedicatedServer.java:250) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at net.minecraft.server.MinecraftServer.w(MinecraftServer.java:954) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at net.minecraft.server.MinecraftServer.lambda$0(MinecraftServer.java:298) ~[spigot-1.20.2-R0.1-SNAPSHOT.jar:3877-Spigot-17ca32d-f070277]
	at java.lang.Thread.run(Thread.java:1623) ~[?:?]
[06:21:29] [Server thread/INFO]: Server permissions file permissions.yml is empty, ignoring it"
T8yqTNES,part of fdm_encode.c (wip),Kitomas,C,Thursday 21st of September 2023 11:13:25 PM CDT,"typedef struct subchunk_fmt {
  Uint16        format; //1 for pcm, 3 for float (anything else is unsupported)
  Uint16      channels; //number of interleaved channels; L&R for stereo (2)
  Uint32    sampleRate; //number of samples per second, in hertz
  Uint32      byteRate; //the number of bytes per second of audio
  Uint16    blockAlign; //=(channels*bitsPerSample)/8
  Uint16 bitsPerSample;
  //below is only applicable for format -2 (extensible), i think
  Uint16 extensionSize; //=0 or 22
  Uint32   channelMask; //speaker position mask
  union {
    Uint16    format;
    char  GUID_s[16];
    Uint64 GUID_n[2];
  } /*----------*/ sub; //guid, including data format code
} subchunk_fmt;


#define _CHUNK_HEADER_SIZE (sizeof(Uint32)+sizeof(Uint32))
typedef struct _subchunk {
  Uint32             id;
  Uint32           size;
  union {
    Uint32       waveID; //part of wave header
    subchunk_fmt    fmt;
    Uint32 sampleLength; //# of sample frames; part of ""fact"" subchunk
    Uint8       data[1]; //only element of ""data"" subchunk
  };
} _subchunk;




typedef struct kit_kmixerPCM {
  kit_kmixerVoiceSpec spec;
  Uint64      dataSize;
  Uint64    numSamples;
  Uint64     loopStart;
  Uint64       loopEnd;
  Uint32      byteRate;
  Uint16 bitsPerSample;
  Uint8      loopCount; //255 (-1) for infinite loop
  Uint8          flags;
  union { //pcm data should be contiguous with the struct itself
    void*  data; //should be equal to (void*)pcm_struct+sizeof(kit_kmixerPCM)
    Uint8*  u_8;
    Sint16* i16;
    Sint32* i32;
    float*  f32;
    struct { Uint8  l; Uint8  r; }* u_8s;
    struct { Sint16 l; Sint16 r; }* i16s;
    struct { Sint32 l; Sint32 r; }* i32s;
    struct { float  l; float  r; }* f32s;
  };
} kit_kmixerPCM;



size_t kit_coreFileSize(const char* filePath){
  size_t fileSize = 0;
  _IF_SDLERR(filePath==NULL,;,""!filePath"")
  FILE* file = fopen(filePath,""rb"");
  _IF_SDLERR(file==NULL,;,""!fopen"")
  
  int result = fseek(file, 0L, SEEK_END);
  _IF_SDLERR(result,fclose(file),""fseek()=%i"",result)
  
  size_t _fileSize = ftell(file);
  _IF_SDLERR(!_fileSize,fclose(file),""fileSize=0"")
  _IF_SDLERR(_fileSize==-1,fclose(file),""fileSize=-1"")
  
  result = fclose(file);
  _IF_SDLERR(result,;,""fclose()=%i"",result)
  
  fileSize = _fileSize;
  _error_:
  return fileSize;
}


#define DEFAULT_RW_CHUNK_SIZE 4096
size_t kit_coreFileReadBin(const char* filePath, void* buffer_p, size_t chunkSize){
  size_t dataSize = 0;
  void* dataStart = NULL;
  size_t fileSize = 0;
  SDL_bool success =SDL_FALSE;
  _IF_SDLERR(buffer_p==NULL,;,""!buffer_p"")


  //get size of file, in bytes
  fileSize = kit_coreFileSize(filePath);
  _IF_GOTO_ERROR(!fileSize,;)


  //open file handle
  FILE* file = fopen(filePath,""rb"");
  _IF_SDLERR(file==NULL,;,""!fopen"")
  
  
  //allocate memory for file data
  dataStart = SDL_malloc(fileSize);
  _IF_SDLERR(dataStart==NULL,fclose(file),""!dataStart"")
  
  
  //read bytes from file into fileData
  if(!chunkSize) chunkSize = DEFAULT_RW_CHUNK_SIZE;
  size_t bytesRead, totalRead = 0;
  void* dataPtr = dataStart;
  void* dataEnd = dataStart+fileSize;
  while((dataPtr+chunkSize) < dataEnd){
    bytesRead = fread(dataPtr,1,chunkSize,file);
    _IF_SDLERR(bytesRead<chunkSize,fclose(file),""!fread; bytesRead<chunkSize"")
    totalRead += bytesRead;
    dataPtr += chunkSize;
  }
  
  size_t remainingBytes = fileSize-totalRead;
  if(remainingBytes) bytesRead = fread(dataPtr,1,remainingBytes,file);
  _IF_SDLERR(bytesRead<remainingBytes,fclose(file),""!fread; bytesRead<remainingBytes"")
  //totalRead += bytesRead; (unnecessary)

  
  //close file handle
  int result = fclose(file);
  _IF_SDLERR(result,;,""fclose()=%i"",result)
  

  success = SDL_TRUE;
  _error_:
  if(success){
    *(void**)buffer_p = dataStart;
    dataSize = fileSize;
  } else if(dataStart!=NULL && !success){
    SDL_free(dataStart);
  }
  return dataSize;
}


#define WAVE_FORMAT_PCM 0x0001
#define WAVE_FORMAT_IEEE_FLOAT 0x0003
#define WAVE_FORMAT_EXTENSIBLE 0xFFFE
enum _wav_ids {
  id_RIFF=0x46464952, //=""RIFF""
  id_WAVE=0x45564157, //=""WAVE""
  id_fmt =0x20746D66, //=""fmt ""
  id_fact=0x74636166, //=""fact""
  //id_PEAK=0x4B414550, //=""PEAK""
  id_data=0x61746164, //=""data""
};
kit_kmixerPCM* kit_kmixerWAVLoad(const char* filePath){
  kit_kmixerPCM* pcm = NULL;
  void* fileDataStart = NULL;
  SDL_bool success = SDL_FALSE;
  size_t fileSize = kit_coreFileReadBin(filePath,&fileDataStart,0);
  _IF_SDLERR(!fileSize,;,""!file"")
  _IF_SDLERR(fileSize<44,;,""fileSize<44"")
  void* fileDataEnd = fileDataStart+fileSize;
  
  void* data = fileDataStart; //test file=3996872B
  _IF_GOTO_ERROR(kit_coreRealloc(&pcm,0,sizeof(kit_kmixerPCM)),;)
  SDL_malloc(sizeof(kit_kmixerPCM));
  _IF_SDLERR(pcm==NULL,;,""!pcm"")
  
  
  //verify wave header
  _subchunk* subchunk = data;
  _IF_SDLERR(subchunk->id!=id_RIFF,;,""chunk ID!=\""RIFF\"""")
  _IF_SDLERR(subchunk->size!=(fileSize-8),;,""chunkSize!=(fileSize-8)"")
  _IF_SDLERR(subchunk->waveID!=id_WAVE,;,""waveID!=\""WAVE\"""")
  data+=_CHUNK_HEADER_SIZE;
  data+=sizeof(Uint32);
  _IF_SDLERR(data>=fileDataEnd,;,""buffer overflow"") //should be impossible
  
  
  //process subchunks
  SDL_bool has_fmt  = SDL_FALSE;
  SDL_bool has_data = SDL_FALSE;
  SDL_bool has_fact = SDL_FALSE; //optional subchunk
  while(data < fileDataEnd){
    subchunk = data;
    switch(subchunk->id){
    case id_fmt:; //contains most pcm info
       //format
      Uint16 bitsPerSample = subchunk->fmt.bitsPerSample;
      Uint16 format=subchunk->fmt.format;
      switch(format){
      case WAVE_FORMAT_PCM: _format_pcm:
        if(     bitsPerSample== 8) pcm->spec.format = AUDIO_U8 ;
        else if(bitsPerSample==16) pcm->spec.format = AUDIO_S16;
        else if(bitsPerSample==32) pcm->spec.format = AUDIO_S32;
        else _IS_SDLERR(;,""PCM && bitsPerSample!=<8,16,32>"")
        break;
      case WAVE_FORMAT_IEEE_FLOAT: _format_float:
        pcm->spec.format = AUDIO_F32;
        _IF_SDLERR(bitsPerSample!=32,;,""float && bitsPerSample!=32"")
        break;
      case WAVE_FORMAT_EXTENSIBLE:
        _IF_SDLERR(subchunk->fmt.extensionSize!=22,;,""extensionSize!=22"")
        format=subchunk->fmt.sub.format; //instead of subchunk->fmt.format
        if(format == WAVE_FORMAT_PCM) goto _format_pcm;
        if(format == WAVE_FORMAT_IEEE_FLOAT) goto _format_float;
        SDL_FALLTHROUGH; //go to default when format is not recognized
      default: _IS_SDLERR(;,""unknown format 0x%04X"",subchunk->fmt.format) }
       //channels
      _IF_SDLERR(!subchunk->fmt.channels,;,""channels=0"")
      _IF_SDLERR(subchunk->fmt.channels>2,;,""channels>2"")
      pcm->spec.stereo = subchunk->fmt.channels==2;
       //sampleRate
      _IF_SDLERR(subchunk->fmt.sampleRate<1000,;,""sampleRate<1kHz"")
      _IF_SDLERR(subchunk->fmt.sampleRate>384000,;,""sampleRate>384kHz"")
      pcm->spec.freq = subchunk->fmt.sampleRate;
       //bitsPerSample
      _IF_SDLERR((bitsPerSample%8)!=0,;,""(bitsPerSample%%8)!=0"")
      pcm->bitsPerSample = bitsPerSample;
       //byteRate
      Uint16 bytesPerSample = bitsPerSample/8;
      Uint32 correctByteRate = (bytesPerSample*pcm->spec.freq)<<pcm->spec.stereo;
      _IF_SDLERR(subchunk->fmt.byteRate!=correctByteRate,;,""incorrect byteRate"")
      pcm->byteRate = subchunk->fmt.byteRate;
      has_fmt = SDL_TRUE; break;
      
    case id_data: //contains sample data (contiguous with pcm struct itself)
      //(not using kit_coreRealloc here, because its memset 0 would be redundant)
      pcm = SDL_realloc(pcm, sizeof(kit_kmixerPCM)+subchunk->size);
      _IF_SDLERR(pcm==NULL,;,""!pcm->data"")
      pcm->data = (void*)pcm+sizeof(kit_kmixerPCM);
      kit_coreMemcpy(pcm->data, subchunk->data, subchunk->size);
      pcm->dataSize = subchunk->size;
      has_data = SDL_TRUE; break;
      
    case id_fact: //contains numSamples value
      pcm->numSamples = subchunk->sampleLength;
      has_fact = SDL_TRUE; break;
      
    default:; //other subchunks are ignored
    }
    data += _CHUNK_HEADER_SIZE;
    data += subchunk->size;
  }

  
  _IF_SDLERR(!has_fmt,;,""fmt subchunk not found"")
  _IF_SDLERR(!has_data,;,""data subchunk not found"")
  if(!has_fact){ //if no fact subchunk found, calculate numSamples
    pcm->numSamples = pcm->dataSize;
    pcm->numSamples /= pcm->bitsPerSample/8;
    pcm->numSamples >>= pcm->spec.stereo;
  }
  
  
  success = SDL_TRUE;
  _error_:
  if(fileDataStart != NULL) SDL_free(fileDataStart);
  if(pcm!=NULL && !success){
    SDL_free(pcm);
    pcm = NULL;
  }
  return pcm;
}




#define FDM_MAGIC_NUMBER 0x006D6466
typedef struct kit_kmixerFDMHeader {
  union {
    char      s[4]; //=""fdm\x00""
    Uint32       n; //=0x006D6466
  } /*------*/ magic;
  Uint16 headerSize; //headerSize includes headerSize itself, and magic
  Uint16       type; //type 0 = static delta, static history
  Uint64   dataSize; 
  Uint64 numSamples;
  Uint64  loopStart;
  Uint64    loopEnd;
  float       delta; //% of change, relative to HALF range; 0.0 -> 2.0
  Uint8   loopCount; //255 (-1) for inf. loop
  Uint8   remainder; //=numSamples%8
  Uint8  historyLen; //number of samples in filter; 0 -> 63
  Uint8    channels;
} kit_kmixerFDMHeader;


/* WIP
static inline Sint32 _getDelta(Sint16 input, Sint32 current, Sint32 deltaMax,
                               Uint64 history, Uint8 historyLen)
{
  if
  history = (history<<1)
  int _historyLen = historyLen;
  int historyBitCount=0;
  while(_historyLen--){
    historyBitCount += history&1;
    history>>=1;
  }
  float fraction = -1 + ;
  
  Sint32 new = input;
}
Uint16 _kit_kmixerFDMEncode(Uint8* output, Sint16* input, kit_kmixerFDMHeader* hdr){
  Uint64 numSamples = hdr->numSamples;
  Uint64 totalError = 0;
  Uint8 historyLen = hdr->historyLen;
  Sint32 deltaMax = hdr->delta*32767;
  
  if(hdr->channels==1){
    Uint64 history;
    Uint8 currentByte;
    Sint32 currentValue, currentDelta;
    for(Uint64 i=0; i<numSamples; ++i){
      
    }
  } else { //assumed stereo
    //struct { Sint16 l; Sint16 r; }* input_s = (void*)input;
    //for(Uint64 i=0; i<numSamples; ++i)
  }
  
  return totalError / numSamples;
}
*/
int kit_kmixerFDMWrite(const char* fileName, kit_kmixerPCM* pcm,
                       Uint8 historyLen, Uint8 iterations)
{
  int returnStatus = 0;
  Sint16* input = NULL;
  Uint8* outputs[2] = {NULL,NULL};
  float quantErrors[2] = {2,2};
  _IF_SDLERR(fileName==NULL,;,""!fileName"")
  _IF_SDLERR(pcm==NULL,;,""!pcm"");
  _IF_SDLERR(historyLen>63,;,""historyLen>63"")
  _IF_SDLERR(iterations==0,;,""iterations=0"")
  
  
  //fill in header info
  _IF_SDLERR(pcm->numSamples==0,;,""numSamples==0"")
  kit_kmixerFDMHeader header;
  header.magic.n    = FDM_MAGIC_NUMBER; //""fdm\x00""
  header.headerSize = sizeof(kit_kmixerFDMHeader);
  header.type       = 0; //type 0 = static delta, static history
  float dataSizeMono = ceilf((float)pcm->numSamples/8);
  header.dataSize   = dataSizeMono*(1+pcm->spec.stereo);
  header.numSamples = pcm->numSamples;
  header.loopStart  = pcm->loopStart;
  header.loopEnd    = pcm->loopEnd;
  header.delta      = 2.0f; //(final value calculated)
  header.loopCount  = pcm->loopCount;
  header.remainder  = pcm->numSamples%8;
  header.historyLen = historyLen;
  header.channels   = 1+pcm->spec.stereo;
  
  
  //malloc i/o buffers
  Uint64 numSamplesRaw = header.numSamples*header.channels;
  input = SDL_malloc(sizeof(Sint16)*numSamplesRaw);
  outputs[0] = SDL_malloc(header.dataSize);
  outputs[1] = SDL_malloc(header.dataSize);
  _IF_SDLERR(input==NULL,;,""!input"")
  _IF_SDLERR(outputs[0]==NULL,;,""!outputs[0]"")
  _IF_SDLERR(outputs[1]==NULL,;,""!outputs[1]"")
  
  
  //convert sample data to Sint16
  Sint8* pcmI_8 = pcm->data;  Sint32* pcmI32 = pcm->i32;  float* pcmF32 = pcm->f32;
  switch(pcm->spec.format){
  case AUDIO_U8 : for(Uint64 i=0; i<numSamplesRaw; ++i){ input[i] =(pcmI_8[i]-128)<<8; } break;
  case AUDIO_S16: kit_coreMemcpy(input,pcm->i16,sizeof(Sint16)*numSamplesRaw); break;
  case AUDIO_S32: for(Uint64 i=0; i<numSamplesRaw; ++i){ input[i] = pcmI32[i]>>16; } break;
  case AUDIO_F32: for(Uint64 i=0; i<numSamplesRaw; ++i){ input[i] = pcmF32[i]*32767; } }
  for(Uint64 i=0; i<numSamplesRaw; ++i){ if(input[i]==-32768) input[i] = -32767; }
  
  
  //encode i16 pcm stream
  //int which = 0; //which output buffer to write to
  

  //write output data to file
   //write header info first
  FILE* file = fopen(fileName,""wb"");
  _IF_SDLERR(file==NULL,;,""!file"")
  size_t headerBytes = fwrite(&header,1,sizeof(kit_kmixerFDMHeader),file);
  _IF_SDLERR(headerBytes<sizeof(header),fclose(file),""headerBytes<sizeof(header)"")
  
   //then write data
  const size_t chunkSize = DEFAULT_RW_CHUNK_SIZE;
  size_t bytesWritten, totalWritten = 0; //specifically data bytes
  void* dataStart = (quantErrors[0]<quantErrors[1]) ? outputs[0] : outputs[1];
  void* dataPtr   = dataStart;
  void* dataEnd   = dataStart + header.dataSize;
  while((dataPtr+chunkSize) < dataEnd){
    bytesWritten = fwrite(dataPtr,1,chunkSize,file);
    _IF_SDLERR(bytesWritten<chunkSize,fclose(file),""!fwrite; bytesWritten<chunkSize"")
    totalWritten += bytesWritten;
    dataPtr += chunkSize;
  }
  
  size_t remainingBytes = header.dataSize-totalWritten;
  if(remainingBytes) bytesWritten = fwrite(dataPtr,1,remainingBytes,file);
  _IF_SDLERR(bytesWritten<remainingBytes,fclose(file),""!fwrite; bytesWritten<remainingBytes"")
  int result = fclose(file);
  _IF_SDLERR(result,;,""fclose()=%i"",result)
  
  
  ++returnStatus;
  _error_:
  --returnStatus;
  if(input != NULL) SDL_free(input);
  if(outputs[0] != NULL) SDL_free(outputs[0]);
  if(outputs[1] != NULL) SDL_free(outputs[1]);
  return returnStatus;
}"
xyd19KiR,Honor Cross-Domain Download Names,briank,HTML,Thursday 21st of September 2023 08:49:15 PM CDT,"<script>
/*
 * Honor cross-domain download names via fetch+blob URL.
 * Brian Katzung <briank@kappacs.com>
 *
 * <a href=""original URL"" download=""file name"" data-type=""mime-type"">
 */
var activeElement, activeSrcHref, activeObjectURL;
// (Re)activate a link upon click
function activateLink (ev) {
    var target = ev.target;
    if (target.href !== 'javascript:void(0)') return; // Already active
    ev.preventDefault();
    if (activeElement) {
	// Reset href on previous element
	activeElement.href = 'javascript:void(0)';
	activeElement = undefined;
    }
    if (activeSrcHref !== target.dataset.originalHref) {
	// Load a new asset
	if (activeObjectURL) {
	    activeObjectURL.then(url => URL.revokeObjectURL(url));
	    activeObjectURL = undefined;
	}
	activeObjectURL = fetch(activeSrcHref = target.dataset.originalHref).
	  then(r => r.arrayBuffer()).
	  then(data => {
	    var blob = new Blob([data], { type: target.dataset.type });
	    return Promise.resolve(URL.createObjectURL(blob));
	  });
    }
    activeObjectURL.then(url => {
	// Activate link and re-click
	target.href = url;
	(activeElement = target).click();
    });
}
// Initialize any unitialized links
function prepareLinks () {
    var raw = document.querySelectorAll('a[download][data-type]:not([data-original-href])');
    for (var i = 0; i < raw.length; ++i) {
	raw[i].dataset.originalHref = raw[i].href;
	raw[i].href = 'javascript:void(0)';
	raw[i].addEventListener('click', activateLink);
    }
}
document.addEventListener('DOMContentLoaded', prepareLinks);
</script>
"
DTYHBHy6,FILE CLONING,fsyt,Lua,Thursday 21st of September 2023 08:40:34 PM CDT,H4X=11382U0A138211382SM36PERF1SMPM- #MY OWN
sMuHQsbL,News Sep21 23,Newscaster_Ned,Email,Thursday 21st of September 2023 08:33:26 PM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

W‎e‎l‎l‎,‎ ‎h‎e‎r‎e‎'‎s‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎ ‎c‎r‎a‎c‎k‎e‎r‎s‎.‎

B‎a‎n‎a‎n‎a‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎

T‎h‎i‎r‎d‎ ‎I‎R‎S‎ ‎A‎g‎e‎n‎t‎ ‎S‎a‎y‎s‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎D‎O‎J‎ ‎B‎l‎o‎c‎k‎e‎d‎ ‎D‎a‎v‎i‎d‎ ‎W‎e‎i‎s‎s‎ ‎f‎r‎o‎m‎ ‎C‎h‎a‎r‎g‎i‎n‎g‎ ‎H‎u‎n‎t‎e‎r‎
H‎u‎t‎e‎r‎
A‎ ‎t‎h‎i‎r‎d‎ ‎I‎R‎S‎ ‎a‎g‎e‎n‎t‎ ‎r‎e‎p‎o‎r‎t‎e‎d‎l‎y‎ ‎t‎o‎l‎d‎ ‎H‎o‎u‎s‎e‎ ‎i‎n‎v‎e‎s‎t‎i‎g‎a‎t‎o‎r‎s‎ ‎t‎h‎a‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎D‎O‎J‎ ‎b‎l‎o‎c‎k‎e‎d‎ ‎n‎o‎w‎-‎s‎p‎e‎c‎i‎a‎l‎ ‎c‎o‎u‎n‎s‎e‎l‎ ‎D‎a‎v‎i‎d‎ ‎W‎e‎i‎s‎s‎ ‎f‎r‎o‎m‎ ‎c‎h‎a‎r‎g‎i‎n‎g‎ ‎H‎u‎n‎t‎e‎r‎ ‎B‎i‎d‎e‎n‎,‎ ‎s‎e‎e‎m‎i‎n‎g‎l‎y‎ ‎c‎o‎n‎t‎r‎a‎d‎i‎c‎t‎i‎n‎g‎ ‎A‎G‎ ‎M‎e‎r‎r‎i‎c‎k‎ ‎G‎a‎r‎l‎a‎n‎d‎.‎

T‎h‎i‎r‎d‎ ‎I‎R‎S‎ ‎A‎g‎e‎n‎t‎ ‎S‎a‎y‎s‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎D‎O‎J‎ ‎B‎l‎o‎c‎k‎e‎d‎ ‎W‎e‎i‎s‎s‎ ‎f‎r‎o‎m‎ ‎C‎h‎a‎r‎g‎i‎n‎g‎ ‎H‎u‎n‎t‎e‎r‎
T‎h‎i‎r‎d‎ ‎I‎R‎S‎ ‎A‎g‎e‎n‎t‎ ‎S‎a‎y‎s‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎D‎O‎J‎ ‎B‎l‎o‎c‎k‎e‎d‎ ‎W‎e‎i‎s‎s‎ ‎f‎r‎o‎m‎ ‎C‎h‎a‎r‎g‎i‎n‎g‎ ‎H‎u‎n‎t‎e‎r‎
6‎3‎6‎
U‎k‎r‎a‎i‎n‎e‎'‎s‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎ ‎S‎p‎o‎k‎e‎s‎p‎e‎r‎s‎o‎n‎ ‎S‎u‎s‎p‎e‎n‎d‎e‎d‎,‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎N‎o‎ ‎K‎n‎o‎w‎l‎e‎d‎g‎e‎
U‎k‎r‎a‎i‎n‎e‎'‎s‎ ‎T‎r‎a‎n‎s‎g‎e‎n‎d‎e‎r‎ ‎S‎p‎o‎k‎e‎s‎p‎e‎r‎s‎o‎n‎ ‎S‎u‎s‎p‎e‎n‎d‎e‎d‎,‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎C‎l‎a‎i‎m‎s‎ ‎N‎o‎ ‎K‎n‎o‎w‎l‎e‎d‎g‎e‎
4‎,‎4‎7‎1‎

T‎r‎u‎m‎p‎ ‎A‎u‎t‎o‎g‎r‎a‎p‎h‎s‎ ‎W‎o‎m‎a‎n‎’‎s‎ ‎S‎h‎i‎r‎t‎ ‎i‎n‎ ‎I‎o‎w‎a‎ ‎B‎a‎r‎
5‎,‎0‎2‎9‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎'‎D‎H‎S‎ ‎O‎u‎t‎ ‎t‎o‎ ‎L‎u‎n‎c‎h‎,‎'‎ ‎P‎l‎a‎n‎s‎ ‎M‎a‎s‎s‎i‎v‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎ ‎R‎e‎l‎e‎a‎s‎e‎,‎ ‎S‎a‎y‎s‎ ‎S‎o‎u‎r‎c‎e‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎'‎D‎H‎S‎ ‎O‎u‎t‎ ‎t‎o‎ ‎L‎u‎n‎c‎h‎,‎'‎ ‎P‎l‎a‎n‎s‎ ‎M‎a‎s‎s‎i‎v‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎ ‎R‎e‎l‎e‎a‎s‎e‎,‎ ‎S‎a‎y‎s‎ ‎S‎o‎u‎r‎c‎e‎
8‎5‎5‎
N‎o‎l‎t‎e‎:‎ ‎C‎E‎O‎ ‎B‎o‎b‎ ‎I‎g‎e‎r‎ ‎S‎a‎y‎s‎ ‎D‎i‎s‎n‎e‎y‎ ‎w‎i‎l‎l‎ ‎‘‎Q‎u‎i‎e‎t‎ ‎t‎h‎e‎ ‎N‎o‎i‎s‎e‎’‎ ‎i‎n‎ ‎C‎u‎l‎t‎u‎r‎e‎ ‎W‎a‎r‎s‎
N‎o‎l‎t‎e‎:‎ ‎C‎E‎O‎ ‎B‎o‎b‎ ‎I‎g‎e‎r‎ ‎S‎a‎y‎s‎ ‎D‎i‎s‎n‎e‎y‎ ‎w‎i‎l‎l‎ ‎‘‎Q‎u‎i‎e‎t‎ ‎t‎h‎e‎ ‎N‎o‎i‎s‎e‎’‎ ‎i‎n‎ ‎C‎u‎l‎t‎u‎r‎e‎ ‎W‎a‎r‎s‎
2‎3‎5‎
F‎a‎s‎h‎i‎o‎n‎ ‎N‎o‎t‎e‎s‎:‎ ‎T‎h‎e‎ ‎I‎n‎s‎i‎n‎c‎e‎r‎i‎t‎y‎ ‎o‎f‎ ‎J‎o‎h‎n‎ ‎F‎e‎t‎t‎e‎r‎m‎a‎n‎'‎s‎ ‎H‎o‎o‎d‎i‎e‎,‎ ‎E‎x‎p‎l‎a‎i‎n‎e‎d‎
F‎a‎s‎h‎i‎o‎n‎ ‎N‎o‎t‎e‎s‎:‎ ‎T‎h‎e‎ ‎I‎n‎s‎i‎n‎c‎e‎r‎i‎t‎y‎ ‎o‎f‎ ‎J‎o‎h‎n‎ ‎F‎e‎t‎t‎e‎r‎m‎a‎n‎'‎s‎ ‎H‎o‎o‎d‎i‎e‎,‎ ‎E‎x‎p‎l‎a‎i‎n‎e‎d‎
3‎,‎3‎7‎9‎
M‎i‎l‎l‎e‎y‎ ‎S‎a‎y‎s‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎W‎a‎r‎ ‎C‎a‎n‎ ‎B‎e‎ ‎S‎u‎s‎t‎a‎i‎n‎e‎d‎ ‎S‎i‎n‎c‎e‎ ‎U‎.‎S‎.‎ ‎a‎n‎d‎ ‎A‎l‎l‎i‎e‎s‎ ‎'‎A‎r‎e‎ ‎R‎i‎c‎h‎'‎
M‎i‎l‎l‎e‎y‎ ‎S‎a‎y‎s‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎W‎a‎r‎ ‎C‎a‎n‎ ‎B‎e‎ ‎S‎u‎s‎t‎a‎i‎n‎e‎d‎ ‎S‎i‎n‎c‎e‎ ‎U‎.‎S‎.‎ ‎a‎n‎d‎ ‎A‎l‎l‎i‎e‎s‎ ‎'‎A‎r‎e‎ ‎R‎i‎c‎h‎'‎
4‎,‎4‎6‎2‎
O‎v‎e‎r‎ ‎T‎w‎o‎ ‎D‎o‎z‎e‎n‎ ‎G‎O‎P‎ ‎S‎e‎n‎a‎t‎o‎r‎s‎,‎ ‎L‎a‎w‎m‎a‎k‎e‎r‎s‎ ‎S‎a‎y‎ ‎N‎o‎ ‎M‎o‎r‎e‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎f‎o‎r‎ ‎U‎k‎r‎a‎i‎n‎e‎
O‎v‎e‎r‎ ‎T‎w‎o‎ ‎D‎o‎z‎e‎n‎ ‎G‎O‎P‎ ‎S‎e‎n‎a‎t‎o‎r‎s‎,‎ ‎L‎a‎w‎m‎a‎k‎e‎r‎s‎ ‎S‎a‎y‎ ‎N‎o‎ ‎M‎o‎r‎e‎ ‎F‎u‎n‎d‎i‎n‎g‎ ‎f‎o‎r‎ ‎U‎k‎r‎a‎i‎n‎e‎
8‎2‎1‎
S‎u‎c‎c‎e‎s‎s‎i‎o‎n‎:‎ ‎R‎u‎p‎e‎r‎t‎ ‎M‎u‎r‎d‎o‎c‎h‎ ‎H‎a‎n‎d‎s‎ ‎C‎o‎m‎p‎a‎n‎y‎ ‎t‎o‎ ‎S‎o‎n‎ ‎L‎a‎c‎h‎l‎a‎n‎
S‎u‎c‎c‎e‎s‎s‎i‎o‎n‎:‎ ‎R‎u‎p‎e‎r‎t‎ ‎M‎u‎r‎d‎o‎c‎h‎ ‎H‎a‎n‎d‎s‎ ‎C‎o‎m‎p‎a‎n‎y‎ ‎t‎o‎ ‎S‎o‎n‎ ‎L‎a‎c‎h‎l‎a‎n‎
4‎,‎1‎8‎5‎
N‎F‎L‎ ‎T‎r‎a‎n‎s‎ ‎C‎h‎e‎e‎r‎l‎e‎a‎d‎e‎r‎ ‎S‎e‎e‎k‎s‎ ‎t‎o‎ ‎I‎n‎s‎p‎i‎r‎e‎ ‎Y‎o‎u‎t‎h‎
N‎F‎L‎ ‎T‎r‎a‎n‎s‎ ‎C‎h‎e‎e‎r‎l‎e‎a‎d‎e‎r‎ ‎S‎e‎e‎k‎s‎ ‎t‎o‎ ‎I‎n‎s‎p‎i‎r‎e‎ ‎Y‎o‎u‎t‎h‎

2‎ ‎N‎i‎g‎l‎o‎i‎d‎s‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎K‎i‎d‎n‎a‎p‎p‎i‎n‎g‎ ‎a‎n‎d‎ ‎R‎a‎p‎i‎n‎g‎ ‎U‎N‎L‎V‎ ‎S‎t‎u‎d‎e‎n‎t‎.‎

O‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎p‎e‎r‎p‎e‎t‎r‎a‎t‎o‎r‎s‎ ‎w‎a‎s‎ ‎n‎a‎m‎e‎d‎ ‎J‎u‎h‎j‎u‎a‎n‎ ‎W‎a‎s‎h‎i‎n‎g‎t‎o‎n‎.‎


S‎p‎a‎d‎e‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎i‎n‎ ‎T‎a‎l‎l‎a‎h‎a‎s‎s‎e‎e‎ ‎A‎f‎t‎e‎r‎ ‎S‎e‎n‎d‎i‎n‎g‎ ‎E‎v‎e‎r‎y‎o‎n‎e‎ ‎V‎i‎d‎e‎o‎ ‎o‎f‎ ‎H‎i‎m‎ ‎H‎a‎v‎i‎n‎g‎ ‎S‎e‎x‎ ‎w‎i‎t‎h‎ ‎U‎n‎d‎e‎r‎a‎g‎e‎ ‎G‎i‎r‎l‎.‎


N‎e‎g‎r‎o‎ ‎M‎u‎r‎d‎e‎r‎e‎r‎ ‎o‎n‎ ‎t‎h‎e‎ ‎L‎o‎o‎s‎e‎ ‎i‎n‎ ‎M‎i‎l‎w‎a‎u‎k‎e‎e‎ ‎A‎f‎t‎e‎r‎ ‎R‎i‎p‎p‎i‎n‎g‎ ‎o‎f‎f‎ ‎A‎n‎k‎l‎e‎ ‎B‎r‎a‎c‎e‎l‎e‎t‎.‎


N‎e‎w‎ ‎Y‎o‎r‎k‎:‎ ‎N‎e‎g‎r‎o‎ ‎C‎a‎n‎d‎i‎d‎a‎t‎e‎ ‎R‎u‎n‎s‎ ‎f‎o‎r‎ ‎O‎f‎f‎i‎c‎e‎ ‎A‎f‎t‎e‎r‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎H‎i‎j‎a‎c‎k‎ ‎P‎l‎a‎n‎e‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎4‎°‎
3‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎ ‎|‎ ‎D‎a‎y‎
9‎9‎°‎
3‎%‎
S‎S‎E‎
1‎0‎
 ‎
m‎p‎h‎
P‎a‎r‎t‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎H‎i‎g‎h‎ ‎9‎9‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
6‎0‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
9‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
7‎:‎1‎7‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
7‎:‎2‎7‎ ‎p‎m‎
T‎h‎u‎ ‎2‎1‎ ‎|‎ ‎N‎i‎g‎h‎t‎
7‎4‎°‎
1‎2‎%‎
S‎S‎E‎
1‎1‎
 ‎
m‎p‎h‎
A‎ ‎f‎e‎w‎ ‎p‎a‎s‎s‎i‎n‎g‎ ‎c‎l‎o‎u‎d‎s‎.‎ ‎L‎o‎w‎ ‎7‎4‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎
 ‎
H‎u‎m‎i‎d‎i‎t‎y‎
7‎5‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
1‎:‎3‎1‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
1‎1‎:‎3‎6‎ ‎p‎m‎
F‎r‎i‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎7‎°‎
/‎7‎6‎°‎
1‎6‎%‎
S‎ ‎1‎0‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎9‎°‎
/‎7‎6‎°‎
1‎4‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
1‎0‎0‎°‎
/‎7‎5‎°‎
1‎5‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎5‎°‎
/‎7‎2‎°‎
5‎8‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎6‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
9‎1‎°‎
/‎7‎0‎°‎
4‎8‎%‎
N‎E‎ ‎7‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎7‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎2‎°‎
/‎6‎9‎°‎
1‎2‎%‎
N‎E‎ ‎7‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎8‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎2‎°‎
/‎6‎9‎°‎
9‎%‎
S‎E‎ ‎7‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎4‎°‎
/‎7‎0‎°‎
6‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
S‎a‎t‎ ‎3‎0‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎7‎0‎°‎
7‎%‎
S‎S‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎0‎1‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
9‎6‎°‎
/‎7‎0‎°‎
2‎2‎%‎
S‎S‎E‎ ‎9‎ ‎m‎p‎h‎
M‎o‎n‎ ‎0‎2‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎3‎°‎
/‎7‎2‎°‎
2‎4‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎0‎3‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎5‎°‎
/‎6‎8‎°‎
1‎2‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎4‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎2‎°‎
/‎6‎7‎°‎
1‎7‎%‎
E‎S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎5‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
9‎1‎°‎
/‎6‎7‎°‎
1‎6‎%‎
S‎E‎ ‎8‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎S‎p‎o‎o‎k‎t‎o‎b‎e‎r‎.‎ ‎👻

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

L‎u‎c‎i‎a‎n‎ ‎H‎o‎d‎o‎b‎o‎c‎
L‎u‎c‎i‎a‎n‎ ‎H‎o‎d‎o‎b‎o‎c‎ ‎(‎a‎l‎s‎o‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎A‎l‎a‎k‎a‎z‎a‎m‎,‎ ‎A‎l‎a‎,‎ ‎T‎h‎e‎L‎H‎S‎h‎o‎w‎C‎h‎a‎n‎n‎e‎l‎ ‎a‎n‎d‎ ‎L‎u‎c‎i‎a‎n‎ ‎P‎e‎d‎o‎b‎o‎c‎)‎ ‎i‎s‎ ‎a‎n‎ ‎o‎d‎d‎l‎y‎-‎p‎r‎o‎p‎o‎r‎t‎i‎o‎n‎e‎d‎ ‎R‎o‎m‎a‎n‎i‎a‎n‎ ‎p‎a‎e‎d‎o‎p‎h‎i‎l‎e‎ ‎a‎n‎d‎ ‎Y‎o‎u‎T‎u‎b‎e‎r‎ ‎w‎h‎o‎ ‎o‎w‎n‎s‎ ‎a‎ ‎s‎h‎i‎t‎t‎y‎ ‎w‎e‎b‎s‎i‎t‎e‎ ‎c‎a‎l‎l‎e‎d‎ ‎B‎e‎a‎u‎t‎i‎f‎u‎l‎F‎o‎r‎u‎m‎s‎.‎c‎o‎ ‎–‎ ‎I‎r‎o‎n‎i‎c‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎i‎n‎g‎ ‎t‎h‎e‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎h‎e‎ ‎h‎i‎m‎s‎e‎l‎f‎ ‎i‎s‎ ‎m‎o‎r‎e‎ ‎h‎i‎d‎e‎o‎u‎s‎ ‎t‎h‎a‎n‎ ‎Z‎o‎e‎ ‎Q‎u‎i‎n‎n‎'‎s‎ ‎n‎u‎d‎e‎s‎.‎

W‎h‎e‎n‎ ‎n‎o‎t‎ ‎m‎a‎k‎i‎n‎g‎ ‎v‎i‎d‎e‎o‎s‎ ‎o‎f‎ ‎h‎i‎m‎s‎e‎l‎f‎ ‎t‎a‎l‎k‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎h‎i‎s‎ ‎f‎a‎v‎o‎u‎r‎i‎t‎e‎ ‎a‎n‎i‎m‎u‎ ‎o‎r‎ ‎p‎r‎e‎t‎e‎n‎d‎i‎n‎g‎ ‎t‎o‎ ‎b‎e‎ ‎a‎ ‎l‎i‎t‎t‎l‎e‎ ‎g‎i‎r‎l‎,‎ ‎L‎u‎c‎i‎a‎n‎ ‎c‎a‎n‎ ‎u‎s‎u‎a‎l‎l‎y‎ ‎b‎e‎ ‎f‎o‎u‎n‎d‎ ‎c‎r‎e‎e‎p‎i‎n‎g‎ ‎o‎n‎ ‎v‎u‎l‎n‎e‎r‎a‎b‎l‎e‎ ‎t‎e‎e‎n‎a‎g‎e‎ ‎g‎i‎r‎l‎s‎ ‎a‎n‎d‎ ‎d‎e‎f‎e‎n‎d‎i‎n‎g‎ ‎t‎h‎e‎ ‎v‎i‎r‎t‎u‎e‎s‎ ‎o‎f‎ ‎c‎h‎i‎l‎d‎ ‎p‎o‎r‎n‎o‎g‎r‎a‎p‎h‎y‎ ‎i‎n‎ ‎h‎i‎s‎ ‎w‎e‎b‎s‎i‎t‎e‎'‎s‎ ‎c‎h‎a‎t‎ ‎r‎o‎o‎m‎.‎

(‎(‎ ‎H‎O‎W‎ ‎D‎O‎ ‎Y‎O‎U‎ ‎D‎O‎,‎ ‎F‎E‎L‎L‎O‎W‎ ‎K‎I‎D‎S‎?‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎i‎m‎e‎ ‎f‎o‎r‎ ‎t‎h‎o‎s‎e‎ ‎f‎a‎g‎s‎.‎ ‎#‎L‎R‎H‎:‎

[‎1‎9‎:‎3‎3‎]‎ ‎<‎d‎o‎s‎k‎i‎>‎ ‎s‎u‎r‎e‎ ‎b‎e‎l‎i‎e‎v‎e‎ ‎t‎h‎e‎ ‎r‎e‎d‎ ‎b‎u‎s‎ ‎t‎a‎l‎k‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎1‎0‎0‎M‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎N‎H‎S‎
[‎1‎9‎:‎3‎3‎]‎ ‎<‎d‎o‎s‎k‎i‎>‎ ‎b‎u‎t‎ ‎i‎g‎n‎o‎r‎e‎ ‎t‎h‎e‎ ‎o‎b‎v‎i‎o‎u‎s‎
[‎1‎9‎:‎3‎4‎]‎ ‎<‎d‎o‎s‎k‎i‎>‎ ‎i‎t‎s‎ ‎n‎o‎t‎ ‎a‎ ‎s‎e‎c‎r‎e‎t‎,‎ ‎t‎h‎e‎r‎e‎s‎ ‎l‎i‎k‎e‎ ‎p‎u‎b‎l‎i‎c‎ ‎c‎o‎n‎t‎r‎a‎c‎t‎s‎ ‎r‎i‎g‎h‎t‎ ‎?‎
[‎1‎9‎:‎3‎4‎]‎ ‎<‎d‎o‎s‎k‎i‎>‎ ‎d‎o‎ ‎y‎o‎u‎ ‎r‎e‎a‎d‎ ‎t‎h‎e‎ ‎p‎r‎i‎v‎a‎t‎e‎ ‎e‎y‎e‎ ‎?‎
[‎1‎9‎:‎3‎4‎]‎ ‎<‎d‎o‎s‎k‎i‎>‎ ‎t‎h‎e‎y‎ ‎c‎o‎v‎e‎r‎ ‎i‎t‎ ‎e‎v‎e‎r‎y‎ ‎n‎o‎w‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎
[‎1‎9‎:‎3‎4‎]‎ ‎<‎+‎j‎n‎c‎o‎g‎>‎ ‎t‎o‎r‎i‎e‎s‎ ‎d‎i‎d‎n‎t‎ ‎w‎i‎n‎ ‎t‎h‎e‎ ‎n‎o‎r‎t‎h‎,‎ ‎l‎a‎b‎o‎u‎r‎ ‎l‎o‎s‎t‎ ‎i‎t‎
[‎1‎9‎:‎3‎4‎]‎ ‎<‎d‎o‎s‎k‎i‎>‎ ‎a‎n‎y‎w‎a‎y‎ ‎i‎m‎ ‎j‎u‎s‎t‎ ‎a‎ ‎r‎a‎n‎d‎o‎m‎ ‎f‎o‎r‎e‎i‎g‎n‎e‎r‎ ‎t‎h‎a‎t‎ ‎d‎o‎e‎s‎n‎t‎ ‎g‎i‎v‎e‎ ‎a‎ ‎s‎h‎i‎t‎ ‎:‎P‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎p‎a‎t‎h‎i‎p‎h‎y‎l‎l‎u‎m‎ ‎w‎a‎l‎l‎i‎s‎i‎i‎,‎ ‎t‎h‎e‎ ‎p‎e‎a‎c‎e‎ ‎l‎i‎l‎y‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎i‎n‎d‎o‎o‎r‎ ‎h‎o‎u‎s‎e‎p‎l‎a‎n‎t‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎m‎i‎l‎y‎ ‎A‎r‎a‎c‎e‎a‎e‎.‎ ‎T‎h‎e‎ ‎g‎e‎n‎u‎s‎ ‎n‎a‎m‎e‎ ‎m‎e‎a‎n‎s‎ ‎""‎s‎p‎a‎t‎h‎e‎ ‎l‎e‎a‎f‎""‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎s‎p‎e‎c‎i‎f‎i‎c‎ ‎e‎p‎i‎t‎h‎e‎t‎ ‎i‎s‎ ‎n‎a‎m‎e‎d‎ ‎a‎f‎t‎e‎r‎ ‎G‎u‎s‎t‎a‎v‎ ‎W‎a‎l‎l‎i‎s‎,‎ ‎a‎ ‎G‎e‎r‎m‎a‎n‎ ‎p‎l‎a‎n‎t‎ ‎c‎o‎l‎l‎e‎c‎t‎o‎r‎.‎ ‎T‎h‎i‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎d‎e‎p‎i‎c‎t‎s‎ ‎a‎n‎ ‎i‎n‎f‎l‎o‎r‎e‎s‎c‎e‎n‎c‎e‎ ‎o‎f‎ ‎a‎ ‎S‎.‎ ‎w‎a‎l‎l‎i‎s‎i‎i‎ ‎p‎o‎t‎t‎e‎d‎ ‎p‎l‎a‎n‎t‎ ‎i‎n‎ ‎L‎y‎s‎e‎k‎i‎l‎,‎ ‎S‎w‎e‎d‎e‎n‎.‎ ‎T‎h‎e‎ ‎s‎p‎a‎d‎i‎x‎ ‎i‎s‎ ‎2‎.‎7‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎1‎.‎1‎ ‎i‎n‎)‎ ‎i‎n‎ ‎l‎e‎n‎g‎t‎h‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎W‎.‎c‎a‎r‎t‎e‎r‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎y‎e‎,‎ ‎g‎u‎y‎s‎.‎ ‎I‎'‎m‎ ‎g‎o‎n‎n‎a‎ ‎g‎o‎ ‎p‎o‎k‎e‎ ‎a‎ ‎c‎h‎i‎n‎k‎'‎s‎ ‎e‎y‎e‎ ‎o‎u‎t‎ ‎w‎i‎t‎h‎ ‎a‎ ‎s‎p‎o‎r‎k‎.‎"
wTecR58Z,Typescript OOP,alvinfnaldi,TypeScript,Thursday 21st of September 2023 08:22:44 PM CDT,"{
    // interface Lembur {
    //     getTunjanganLembur()
    //     getStatusKaryawan()
    // }

    abstract class AbstrakKaryawan {
    constructor(public TahunLahir:number){}
    abstract getSisaMasaPensiun():any
    getTahunLahir():any{
        console.log(`${this.TahunLahir}`)
    }
}

class Karyawan extends AbstrakKaryawan  {
    constructor(private Firstname:string, private Lastname:string, public TahunMasuk: number, TahunLahir:number){
        super(TahunLahir)
    }

    getNamaLengkap():any{
        return(`Nama Lengkap : ${this.Firstname} ${this.Lastname}`)
    }

    protected getDataKaryawan():any{
        console.log(`${this.Firstname} ${this.Lastname} ${this.TahunMasuk}`)
    }
    setNamaKaryawan(setfirsname:string, setlastname:string):any {
        this.Firstname = setfirsname
        this.Lastname = setlastname
        console.log(`${this.Firstname} ${this.Lastname}`)
    }
    getSisaMasaPensiun() {
        let year = new Date().getFullYear()
        let sisa_pensiun = 60 - (year - this.TahunLahir)
        console.log(sisa_pensiun)
    }

    //override
    getStatusKaryawan():any {
        let year = new Date().getFullYear()
        let masakerja = year - this.TahunMasuk
        if (masakerja < 1) {
            return(`Masih dalam Masa Probation`)
        } else {
            return(`Adalah Karyawan Tetap`)
        }
    }

    //overload
    getTunjanganLembur():any
    getTunjanganLembur(hour:any):any
    getTunjanganLembur(hour?:any):any {
        if(hour>=1) {
            let tambahan = new Intl.NumberFormat(""id-ID"", {
                style: ""currency"",
                currency: ""IDR"",
              }).format(hour * 100_000);
              console.log(`Lembur ${hour} jam mendapatkan tunjangan lembur : ${tambahan}`)
        } else {
            console.log(`Tidak mendapatkan tunjangan lembur`)
        }
    }

}

class inheritanceKaryawan extends Karyawan {
    constructor(Firstname:string, Lastname:string, TahunMasuk:number, TahunLahir:number, public gaji:number, public posisi:string) {
        super(Firstname, Lastname, TahunMasuk, TahunLahir)
    }

    getDetailDataKaryawan() {
        console.log(`${this.getNamaLengkap()} tahun masuk ${this.TahunMasuk} tahun lahir ${this.TahunLahir} gaji ${this.gaji} posisi ${this.posisi}`)
    }

    getBonus(){
        const tahun = new Date().getFullYear()
        const bonus = tahun - this.TahunMasuk
        if(bonus > 1) {
            console.log(""Mendapatkan bonus 1 bulan gaji"")
        } else {
            console.log(""Belum mendapatkan bonus gaji"")
        }
    }

    getStatusKaryawan():any {
        console.log(`${this.getNamaLengkap()} `+super.getStatusKaryawan())
    }
}

// const emp = new Karyawan(""Dan"", ""Jon"", 2016, 1999)
// emp.getNamaLengkap()
// emp.setNamaKaryawan(""Alvin"", ""Faiz"")
// emp.getNamaLengkap()

// emp.getSisaMasaPensiun()

const emp2 = new inheritanceKaryawan(""Alvin"", ""Faiz"", 2021, 1999, 5_000_000, ""Programmer"")
// emp2.getBonus()
emp2.getStatusKaryawan()
emp2.getTunjanganLembur(5)
}"
jM9BUnYg,Typescript Loop,alvinfnaldi,TypeScript,Thursday 21st of September 2023 08:22:32 PM CDT,"//segitiga sama sisi (bil ganjil)
{
  let ganjil = 1;

  const no1 = (n: number) => {
    for (let i = 1; i <= n; i++) {
      let row = "" "";
      let str = ganjil + "" "";
      let cetak = row.repeat(n - i) + str.repeat(i);
      console.log(cetak);
      ganjil += 2;
    }
  };
  no1(5);
}

//segitiga sama sisi terbalik (bil ganjil)
{
  let ganjil = 1;

  const no2 = (n: number) => {
    for (let i = n; i >= 1; i--) {
      let start = "" "";
      let space = start.repeat(n - i);
      let result = (ganjil + start).repeat(i);
      console.log(space, result);
      ganjil += 2;
    }
  };
  no2(5);
}

//segitiga siku-siku (abjad kecil)
{
  let charCode = 97;
  const no3 = (n: number) => {
    for (let i = 1; i <= n; i++) {
      let result = String.fromCharCode(charCode).repeat(i);
      console.log(result);
      charCode++;
    }
  };
  no3(5);
}

//diagonal kiri atas ke kanan bawah (abjad besar)
{
  const no4 = (n: number) => {
    let charcode = 65;

    for (let i = 0; i <= n; i++) {
      let space = "" "";
      console.log(space.repeat(i) + String.fromCharCode(charcode));
      charcode++;
    }
  };

  no4(5);
}

//diagonal kanan atas ke kiri bawah (bil ganjil)
{
  let ganjil = 1;

  const no5 = (n: number) => {
    for (let i = 0; i <= n; i++) {
      let space = "" "";
      console.log(space.repeat(n - i) + ganjil);
      ganjil += 2;
    }
  };
  no5(5);
}

//diagonal kiri dan kanan (abjad kecil dan bilangan genap)
{
  const no6 = (jumlah: number) => {
    let charCode = 97;
    let num = 2;
    let start = 1;
    let end = jumlah;
    let x = """";
    for (let i = 1; i <= jumlah; i++) {
      for (let j = 1; j <= jumlah; j++) {
        if (j == start) {
          x += String.fromCharCode(charCode);
        } else if (j == end) {
          x += num;
        } else {
          x += "" "";
        }
      }
      x += ""\n"";
      charCode++;
      num++;
      start++;
      end--;
    }
    console.log(x);
  };
  no6(5);
}

//segitiga siku-siku terbalik (huruf abjad kecil)
{
  let charCode = 97;

  const no7 = (n: number) => {
    for (let i = 0; i <= n; i++) {
      console.log(String.fromCharCode(charCode).repeat(n - i));
      charCode++;
    }
  };

  no7(5);
}

//segitiga siku-siku (bil genap)
{
  let genap = 0;

  const no8 = (n: number) => {
    for (let i = 1; i <= n; i++) {
      let str = genap + "" "";
      let cetak = str.repeat(i);
      console.log(cetak);
      genap += 2;
    }
  };
  no8(5);
}

//segitiga siku-siku terbalik (bil ganjil)
{
  let ganjil = 1;

  const soal9 = (n: any) => {
    for (let i = n; i >= 1; i--) {
      let row = "" "" + ganjil;
      let cetak = row.repeat(i);
      console.log(cetak);
      ganjil += 2;
    }
  };

  soal9(5);
}"
8xtQrdty,Database PostgreSQL,alvinfnaldi,PostgreSQL,Thursday 21st of September 2023 08:22:13 PM CDT,"--database eproduct

create table users (
	id serial primary key,
	username varchar(100),
	password text,
	createdAt timestamp not null default current_timestamp,
	updatedAt timestamp not null default current_timestamp
)

create table customer (
	id serial primary key,
	first_name varchar(100),
	last_name varchar(100),
	user_id int references users(id),
	createdAt timestamp not null default current_timestamp,
	updatedAt timestamp not null default current_timestamp
)

create table orders (
	id serial primary key,
	user_id int references users(id),
	total_product int,
	total_price numeric,
	createdAt timestamp not null default current_timestamp,
	updatedAt timestamp not null default current_timestamp
)

create table product_category (
	id serial primary key,
	name varchar(100),
	description varchar(200),
	createdAt timestamp not null default current_timestamp,
	updatedAt timestamp not null default current_timestamp
)

create table products (
	id serial primary key,
	nama varchar(100),
	description varchar(200),
	category_id int references product_category(id),
	price numeric,
	image varchar(200),
	createdAt timestamp not null default current_timestamp,
	updatedAt timestamp not null default current_timestamp
)

create table order_detail (
	id serial primary key,
	order_id int references orders(id),
	product_id int references products(id),
	quantity int,
	createdAt timestamp not null default current_timestamp,
	updatedAt timestamp not null default current_timestamp
);


--database rentaldvd

--1
create table category (
	category_id serial primary key,
	name varchar(100),
	last_update timestamp not null default current_timestamp
)

--2
create table actor (
	actor_id serial primary key,
	first_name varchar(100),
	last_name varchar(100),
	last_update timestamp not null default current_timestamp
)

--3
create table country (
	country_id serial primary key,
	country varchar(100),
	last_update timestamp not null default current_timestamp
)

--4
create table language (
	language_id serial primary key,
	name varchar(100),
	last_update timestamp not null default current_timestamp
)

--5
create table film (
	film_id serial primary key,
	title varchar(255),
	description text,
	release_year int,
	language_id int references language,
	rental_duration int,
	rental_rate int,
	length int,
	replacement_cost numeric,
	rating numeric,
	last_update timestamp not null default current_timestamp,
	special_features varchar(100),
	fulltext text
)

--6
create table film_actor (
	actor_id int references actor,
	film_id int references film,
	last_update timestamp not null default current_timestamp,
	primary key(actor_id, film_id)
)

--7
create table film_category (
	film_id int references film,
	category_id int references category,
	last_update timestamp not null default current_timestamp,
	primary key(film_id, category_id)
)

--8
create table city (
	city_id serial primary key,
	city varchar(100),
	country_id int references country,
	last_update timestamp not null default current_timestamp
)

--9
create table address (
	address_id serial primary key,
	address varchar(255),
	address2 varchar(255),
	district varchar(255),
	city_id int references city,
	postal_code varchar(50),
	phone varchar(50),
	last_update timestamp not null default current_timestamp
)

--10
create table customer (
	customer_id serial primary key,
	store_id int,
	first_name varchar(100),
	last_name varchar(100),
	email varchar(100),
	address_id int references address,
	activebool boolean,
	create_date timestamp not null default current_timestamp,
	last_update timestamp not null default current_timestamp,
	active boolean
)

--11
create table inventory (
	inventory_id serial primary key,
	film_id int references film,
	store_id int,
	last_update timestamp not null default current_timestamp
)

--12
create table staff (
	staff_id serial primary key,
	first_name varchar(100),
	last_name varchar(100),
	address_id int references address,
	email varchar(100),
	store_id int,
	active boolean,
	username varchar(100),
	password text,
	last_update timestamp not null default current_timestamp,
	picture text
)

--13
create table store (
	store_id serial primary key,
	manager_staff_id int references staff(staff_id),
	address_id int references address,
	last_update timestamp not null default current_timestamp
)

--alter table store drop constraint store_address_id_fkey
--alter table store add constraint store_address_id_fkey
--foreign key (address_id) references address(address_id)

--14
create table rental (
	rental_id serial primary key,
	rental_date date,
	inventory_id int references inventory,
	customer_id int references customer,
	return_date date,
	staff_id int references staff,
	last_update timestamp not null default current_timestamp
)

--15
create table payment (
	payment_id serial primary key,
	customer_id int references customer,
	staff_id int references staff,
	rental_id int references rental,
	amount numeric,
	payment_date date
)


--database eproduct

insert into users (username, password) values
('user1', 'user1'),
('user2', 'user2'),
('user3', 'user3'),
('user4', 'user4'),
('user5', 'user5');

select * from users

insert into users (username, password)
values ('user6', 'user6')
returning *

insert into customer (first_name, last_name, user_id) values
('helis', 'cokro', 1),
('alvin', 'faiz', 2)
returning *

select customer.first_name, customer.last_name, users.username
from customer join users
on users.id = customer.user_id

insert into product_category (name, description) values
('elektronik', 'barang murah'),
('makanan', 'makanan kering')

insert into product_category (name, description) values
('furniture', 'perlengkapan furniture')
returning id

select * from product_category

insert into products (nama, description, category_id, price, image) values
('televisi', 'televisi samsung', 1, 2000, 'tv-img.jpg'),
('kulkas', 'kulkas 2 pintu', 1, 6000, 'kulkas-img.jpg'),
('meja', 'meja persegi panjang', 3, 4000, 'meja-img.jpg')
returning *

select * from products

select name, nama, price
from product_category
join products
on product_category.id = products.category_id

select * from orders

insert into orders (user_id, total_product, total_price) values
(1, 4, 16000)
delete from orders where id = 3

select * from order_detail

insert into order_detail (order_id, product_id, quantity) values
(4, 1, 2),
(4, 2, 2)

select customer.user_id, username, first_name, last_name, product_category.name, products.nama, quantity, price
from users
join customer on customer.user_id = users.id
join orders on orders.user_id = users.id
join order_detail on order_detail.order_id = orders.id
join products on products.id = order_detail.product_id
join product_category on product_category.id = products.category_id
where customer.user_id = 1


--database eproduct

--1. Menampilkan informasi customer dan accountnya (username, password) = fullname, username, password
select first_name || ' ' || last_name as fullname, username, password
from users
join customer
on customer.id = users.id

--2. Menampilkan informasi customer dan detail ordernya
select first_name, last_name, p.nama, pc.name, quantity as jumlah, price from order_detail od
join products p on p.id = od.product_id
join product_category pc on pc.id = p.category_id
join orders o on o.id = od.order_id
join users u on u.id = o.user_id
join customer c on c.user_id = u.id

create view customer_orders as
select first_name, last_name, p.nama nama_produk, pc.name nama_kategori, quantity as jumlah, price from order_detail od
join products p on p.id = od.product_id
join product_category pc on pc.id = p.category_id
join orders o on o.id = od.order_id
join users u on u.id = o.user_id
join customer c on c.user_id = u.id

select * from customer_orders
drop view customer_orders

--3. Menampilkan informasi produk per category = nama category, nama produk
select p.nama, pc.name
from products p
join product_category pc
on pc.id = p.category_id

create view informasi_produk as
select p.nama, pc.name
from products p
join product_category pc
on pc.id = p.category_id

select * from informasi_produk
drop view informasi_produk


--database adventureworks

--1. Menampilkan harga dan discount setiap item product
select name, listprice, discountpct
from production.product
join sales.specialofferproduct
on sales.specialofferproduct.productid = production.product.productid
join sales.specialoffer
on sales.specialoffer.specialofferid = sales.specialofferproduct.specialofferid

--2. Menampilkan warna dan quantity setiap item product
select color, count(name) as quantity from production.product
where color is not null
group by color

--3. Menampilkan harga dan discount setiap item product yang harganya di atas 120
select name, listprice, discountpct
from production.product
join sales.specialofferproduct
on sales.specialofferproduct.productid = production.product.productid
join sales.specialoffer
on sales.specialoffer.specialofferid = sales.specialofferproduct.specialofferid
where listprice > 120
order by listprice asc


--function

--returns varchar
create or replace function getUsername(userId int)
returns varchar
language plpgsql
as
$$
declare
	infouser varchar;
begin
	select username into infouser
	from users
	where id = userId;
	
	return infouser;
end;
$$;

drop function getUsername(int)
drop function getUsername()
select getUsername(4)

--
create or replace function getUsername(userid int)
returns users
language plpgsql
as
$$
declare
	infouser users
begin
	select * into infouser
	from users
	join customer
	on customer.user_id = users.id
	where users.id = userid;
	
	if not found then
		raise 'Data % tidak ditemukan', userid;
		end if;
	
	return infouser;
end;
$$;

select getUsername(8)

select * 
	from users
	join customer
	on customer.user_id = users.id
	where users.id = customer.id;

--
create or replace function getUsername()
returns table(
	user_name varchar,
	firstname varchar,
	lastname varchar
)
language plpgsql
as
$$
declare
	
begin
return query
	select username, first_name, last_name
	from users join customer
	on customer.user_id = users.id;
	
	if not found then
		raise 'Data % tidak ditemukan', userid;
		end if;
	
end;
$$;

select * from getUsername()
drop function getUsername()

--
create or replace function getUsername()
returns table(
	user_name users.username%type,
	firstname customer.first_name%type,
	lastname customer.last_name%type
)
language plpgsql
as
$$
declare
	user_r record;
begin
	for user_r in(
	select username, first_name, last_name
	from users join customer
	on customer.user_id = users.id
	) loop
	user_name := user_r.username;
	firstname := upper(user_r.first_name);
	lastname := upper(user_r.last_name);
	return next;
	end loop;
	
end;
$$;

select * from getUsername()


--tanpa return
create or replace function getUsername(
	in username int,
	out firstname varchar,
	out lastname varchar
)

language plpgsql
as
$$

begin
	select firstname, lastname
	into firstname, lastname
	from customer
	where user_id = username;
end;
$$;

drop function getUsername(int)
select getUsername(1)


--
create or replace function getMinMax(
	out min_len int,
	out max_len int
	)
language plpgsql
as
$$

begin
	select
		min(id),
		max(id)
	into
		min_len, max_len
	from
		customer;
end;
$$;

select * from getMinMax()

--
create or replace function getUsernameCursor()
returns table(
	user_name varchar,
	firstname varchar,
	lastname varchar
)
language plpgsql
as
$$
declare
	cust_cursor cursor for
		select username, first_name, last_name
		from users join customer
		on customer.user_id = users.id;
begin
	open cust_cursor;
	return query
	fetch all cust_cursor;
	close cust_cursor;
	
end;
$$;

select * from getUsernameCursor()


--database adventureworks

--1. Paging
--with cursor
create or replace function person.getPersonPaginationCursor(lim int, page int)
returns setof person.person
language plpgsql
as
$$
declare
	offsetCustom int := lim * (page-1);
	cursorPerson cursor(lim int, page int)
	for select * from person.person
	limit lim offset offsetCustom;
	recordPerson person.person;
begin
	open cursorPerson(lim int, page int);
		loop
			fetch next from cursorPerson into recordPerson;
			exit when not found;
			return next recordPerson;
		end loop;
	close cursorPerson;
end;
$$;

select * from person.getPersonPaginationCursor(10, 3);

--without cursor
create or replace function person.GetPersonPagination (lim int, page int)
returns setof person.person
language plpgsql
as
$$
declare
	offsetCustom int := lim * (page-1);
begin
return query
	select * from person.person
	limit lim offset offsetCustom;
end;
$$;

select * from person.getPersonPagination(5, 15)


--2. Search firstname, middlename or lastname
create or replace function getName(nama varchar)
returns setof person.person
language plpgsql
as
$$
begin
	return query
	select * from person.person
	where firstname ilike concat('%', nama, '%')
	or middlename ilike concat('%', nama, '%')
	or lastname ilike concat('%', nama, '%');
	
	if not found then
		raise 'Data % tidak ditemukan', nama;
	end if;
end;
$$;

select * from getName('Alvin')


--3. Function person dashboard persontype+totalperson, region+totalperson
create or replace function personDashboard()
returns table (
	person_type varchar,
	total_person int
)
language plpgsql
as
$$
declare
	person_cursor cursor for
	select persontype, cast (count(*)as int)
	from person.person
	group by persontype;
begin
	open person_cursor;
	loop
		fetch next from person_cursor into person_type, total_person;
		exit when not found;
		return next;
	end loop;
	close person_cursor;
end;
$$;

select * from personDashboard()


create or replace function person_region_dashboard()
returns table (
	stateprovince varchar,
	total_person int
)
language plpgsql
as
$$
declare
	personRegion_cursor cursor for
	select stateprovince.countryregioncode, count(person.businessentityid)::int 
	from person.person
	join person.businessentityaddress using(businessentityid)
	join person.address using(addressid)
	join person.stateprovince using(stateprovinceid)
	group by countryregioncode;
begin
	open personRegion_cursor;
	loop
		fetch next from personRegion_cursor into stateprovince, total_person;
		exit when not found;
		return next;
	end loop;
	close personRegion_cursor;
end;
$$;

select * from person_region_dashboard()


--procedure

create or replace procedure insertdata(in datauser json,in datacust json)
language plpgsql
as
$$
declare
   rowid int;
   rowidcust int;
begin
--  begin
    insert into users(username,password)  
	select x.username, x.password from json_to_recordset(datauser) x(username varchar,password text)
	 returning id into rowid;	 
	 
	 insert into customer(firstname,lastname,user_id)  
	 select x.firstname, x.lastname,rowid from json_to_recordset(datacust) x(firstname varchar,lastname varchar)
	 returning id into rowidcust;
	 
-- 	 if rowidcust is null then
-- 	   rollback;
-- 	      raise 'Gagal insert data';
-- 	 else
-- 	   commit;
-- 	end if;
--  end;
end;
$$;

call insertdata('[{""username"":""alvin"",""password"":""bootcampcodex""}]','[{""firstname"":""faiz"",""lastname"":""rinaldi""}]')


--
create or replace procedure person.insertSignUp(in dataperson json)
language plpgsql
as
$$
declare
	beid int;
begin
	insert into person.businessentity(rowguid)
	values(default)
	returning businessentityid into beid;
	
	insert into person.person (
		businessentityid,
		persontype,
		firstname,
		middlename,
		lastname,
		suffix,
		emailpromotion
	)
	select beid, x.persontype, x.firstname, x.middlename, x.lastname, x.suffix, x.emailpromotion
	from json_to_recordset(dataperson) x(persontype varchar, firstname varchar, middlename varchar, lastname varchar,
	suffix varchar, emailpromotion int);
	
	insert into person.personphone(
		businessentityid,
		phonenumber,
		phonenumbertypeid
	)
	select beid, x.phonenumber, x.phonenumbertypeid
	from json_to_recordset(dataperson) x(phonenumber varchar, phonenumbertypeid int);
	
	end;
$$;
	
call person.insertSignUp('[{""persontype"":""EM"", ""firstname"":""alvin"", ""middlename"":""faiz"", ""lastname"":""rinaldi"",
				  ""suffix"":""junior"", ""emailpromotion"":1, ""phonenumber"":""089508955565"", ""phonenumbertypeid"":1}]')
	
	select max(businessentityid) from person.businessentity
	
	select * from person.personphone
-- 	where businessentityid=20777
	order by businessentityid desc
	
--
create or replace procedure purchasing.addtocart(in dt_pur json, in dt_detail json)
language plpgsql
as
$$
declare
	idpur int;
	iddetail int;
	pur_rec record;
	de_rec record;
begin
	select * from json_to_recordset(dt_pur)
	x(purchaseorderid int, revisionnumber int,
	  status int,employeeid int, vendorid int,
	  shipmethodid int, subtotal numeric,
	  taxamt numeric, freight numeric)into pur_rec;
	update purchasing.purchaseorderheader set subtotal = pur_rec.subtotal
	where purchasing.purchaseorderheader.purchaseorderid = pur_rec.purchaseorderid 
	and purchasing.purchaseorderheader.employeeid = pur_rec.employeeid
	and purchasing.purchaseorderheader.status = 1;
	
	if not found then
	
	insert into purchasing.purchaseorderheader(
		revisionnumber,
		status,
		employeeid,
		vendorid,
		shipmethodid,
		orderdate,shipdate,
		subtotal,
		taxamt,
		freight)
	select x.revisionnumber, x.status, x.employeeid,
	x.vendorid, x.shipmethodid, x.orderdate,
	x.shipdate, x.subtotal, x.taxamt, x.freight
	from json_to_recordset(dt_pur)
	x(purchaseorderid int, revisionnumber smallint, status smallint,
	  employeeid int, vendorid int, shipmethodid int,
	  orderdate timestamp, shipdate timestamp, subtotal numeric,
	  taxamt numeric, freight numeric)
	returning purchaseorderid into idpur;
	
	insert into purchasing.purchaseorderdetail(
		purchaseorderid,
		duedate,
		orderqty,
		productid,
		unitprice,
		receivedqty,
		rejectedqty)
	select idpur, y.duedate, y.orderqty,
	y.productid, y.unitprice, y.receivedqty, y.rejectedqty
	from json_to_recordset(dt_detail) 
	y(duedate timestamp, orderqty int, productid int,
	  unitprice numeric, receivedqty int, rejectedqty int)
	returning purchaseorderdetailid into iddetail;
	
	else
	for de_rec in select * from json_to_recordset(dt_detail) as
	y(purchaseorderid int, purchaseorderdetailid int, duedate timestamp,
	  orderqty int,productid int, unitprice numeric,receivedqty int,rejectedqty int)
	loop
		update purchasing.purchaseorderdetail
		set orderqty = de_rec.orderqty
		where purchasing.purchaseorderdetail.purchaseorderdetailid =  de_rec.purchaseorderdetailid;
	end loop;
		delete from purchasing.purchaseorderdetail
		where purchasing.purchaseorderdetail.purchaseorderid = pur_rec.purchaseorderid
		and purchasing.purchaseorderdetail.purchaseorderdetailid
		not in (select y.purchaseorderdetailid from json_to_recordset(dt_detail) as
				y(purchaseorderdetailid int, duedate timestamp, orderqty int,
				  productid int, unitprice numeric,receivedqty int,rejectedqty int));
		end if;
end;
$$;

drop procedure addtocart(in dt_pur json, dt_detail json)

select * from purchasing.purchaseorderdetail
where purchasing.purchaseorderdetail.purchaseorderid = 4028
order by purchasing.purchaseorderdetail.purchaseorderid;

select * from purchasing.purchaseorderheader
order by purchasing.purchaseorderheader.purchaseorderid desc;
	
update purchasing.purchaseorderheader set shipmethodid = 3
where purchasing.purchaseorderheader.purchaseorderid = 2
-- 	and purchasing.purchaseorderheader.employeeid = 253
-- 	and purchasing.purchaseorderheader.status = 4;

call purchasing.addtocart ('[{""purchaseorderid"":7, ""revisionnumber"":4,""status"":4,""employeeid"":258,""vendorid"": 1580,""shipmethodid"":3,""orderdate"":""2011-04-16 00:00:00"",""shipdate"":""2011-04-25 00:00:00"",""subtotal"":201.04,""taxamt"":16.0832,""freight"": 16.0832}]',
'[{""duedate"":""2011-04-30 00:00:00"",""orderqty"":4,""productid"":4,""unitprice"":50.26,""receivedqty"":3,""rejectedqty"":0}]')"
MZWTrFJg,2023-09-21_stats.json,rdp_snitch,JSON,Thursday 21st of September 2023 07:18:16 PM CDT,"{
  ""ip"": {
    ""193.142.146.17"": 18,
    ""62.204.41.134"": 24,
    ""3.109.32.142"": 18,
    ""146.190.83.254"": 9,
    ""205.210.31.18"": 9,
    ""94.232.41.30"": 6,
    ""87.251.75.145"": 6,
    ""45.143.201.62"": 15,
    ""185.170.144.3"": 3,
    ""87.251.75.120"": 3,
    ""62.233.50.179"": 6,
    ""162.243.173.206"": 3,
    ""103.73.66.251"": 18,
    ""132.145.76.107"": 21,
    ""94.127.211.41"": 3,
    ""198.235.24.12"": 9,
    ""106.116.169.71"": 3,
    ""141.98.11.128"": 18,
    ""192.155.88.231"": 3,
    ""206.191.159.104"": 3,
    ""185.170.144.113"": 6,
    ""101.36.110.24"": 3,
    ""193.142.147.9"": 9,
    ""198.235.24.175"": 9,
    ""87.251.75.64"": 3,
    ""111.61.253.55"": 3,
    ""43.156.6.9"": 9,
    ""45.140.17.16"": 6,
    ""87.251.75.67"": 3,
    ""74.235.152.128"": 3,
    ""172.105.112.96"": 3,
    ""194.165.16.72"": 6,
    ""62.204.41.137"": 6,
    ""167.94.138.50"": 3,
    ""198.235.24.218"": 9,
    ""80.66.88.15"": 9
  },
  ""asn"": {
    ""AS208046"": 27,
    ""AS59425"": 30,
    ""AS16509"": 18,
    ""AS14061"": 12,
    ""AS396982"": 36,
    ""AS208091"": 30,
    ""AS210950"": 15,
    ""AS197414"": 9,
    ""AS57523"": 6,
    ""AS63473"": 18,
    ""AS31898"": 21,
    ""AS9038"": 3,
    ""AS4134"": 3,
    ""AS209605"": 18,
    ""AS63949"": 6,
    ""AS32475"": 3,
    ""AS135377"": 3,
    ""AS24547"": 3,
    ""AS132203"": 9,
    ""AS198953"": 6,
    ""AS8075"": 3,
    ""AS48721"": 6,
    ""AS398324"": 3
  },
  ""isp"": {
    ""ColocationX Ltd."": 27,
    ""Horizon LLC"": 30,
    ""Amazon Technologies Inc."": 18,
    ""DigitalOcean, LLC"": 12,
    ""Google LLC"": 36,
    ""Xhost Internet Solutions LP"": 30,
    ""TOV E-RISHENNYA"": 15,
    ""Chang Way Technologies Co. Limited"": 6,
    ""HostHatch"": 18,
    ""Oracle Corporation"": 21,
    ""Batelco Jordan"": 3,
    ""Chinanet"": 3,
    ""UAB Host Baltic"": 18,
    ""Akamai Technologies, Inc."": 3,
    ""Internap Holding LLC"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""China Mobile communications corporation"": 3,
    ""Shenzhen Tencent Computer Systems Company Limited"": 9,
    ""Proton66 OOO"": 6,
    ""Microsoft Corporation"": 3,
    ""Akamai Technologies"": 3,
    ""Flyservers S.A."": 6,
    ""Censys, Inc."": 3,
    ""Xhost Internet Solutions"": 9
  },
  ""org"": {
    ""ColocationX Ltd"": 18,
    ""Horizon LLC"": 30,
    ""AWS EC2 (ap-south-1)"": 18,
    ""DigitalOcean, LLC"": 9,
    ""Palo Alto Networks, Inc"": 36,
    ""Dmitriy Panchenko"": 6,
    ""Xhost Internet Solutions"": 15,
    ""TOV VAIZ PARTNER"": 15,
    ""Xhostis"": 9,
    ""Sierra LLC"": 6,
    ""Digital Ocean"": 3,
    ""HostHatch, LLC"": 18,
    ""Oracle Cloud Infrastructure (uk-london-1)"": 21,
    ""Orbit Telecom Technology Co. Ltd"": 3,
    ""Chinanet HE"": 3,
    ""Unknown"": 18,
    ""Linode"": 6,
    ""Internap Network Services Corporation"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""x33 Networks IBC"": 9,
    ""China Mobile"": 3,
    ""Tencent Cloud Computing"": 9,
    ""Proton66 LLC"": 6,
    ""Microsoft Azure Cloud (eastus)"": 3,
    ""Flyservers S.A"": 6,
    ""Censys, Inc"": 3,
    ""XHOSTIS"": 9
  },
  ""regionName"": {
    ""North Holland"": 27,
    ""Moscow"": 42,
    ""Maharashtra"": 18,
    ""South West"": 9,
    ""California"": 36,
    ""Perm Krai"": 6,
    ""England"": 36,
    ""Kyiv City"": 15,
    ""New Jersey"": 6,
    ""Central and Western District"": 21,
    ""Zarqa"": 3,
    ""Hebei"": 6,
    ""Kaunas"": 24,
    ""Georgia"": 3,
    ""English River"": 9,
    ""North West"": 12,
    ""Virginia"": 3,
    ""Michigan"": 3,
    ""Drenthe"": 9
  },
  ""country"": {
    ""Netherlands"": 36,
    ""Russia"": 48,
    ""India"": 18,
    ""Singapore"": 21,
    ""United States"": 51,
    ""United Kingdom"": 36,
    ""Ukraine"": 15,
    ""Hong Kong"": 21,
    ""Jordan"": 3,
    ""China"": 6,
    ""Lithuania"": 24,
    ""Seychelles"": 9
  },
  ""account"": {
    ""Domain"": 66,
    ""Test"": 15,
    ""hello"": 90,
    ""WFNQVlpeE"": 3,
    ""sYaVQE"": 3,
    ""ptEqwo"": 3,
    ""Administr"": 63,
    ""VAvnxFpUz"": 3,
    ""MLtGwn"": 3,
    ""AWlZRM"": 3,
    ""(empty)"": 12,
    ""Administrator"": 3,
    ""CkChzeqsl"": 3,
    ""eOuaeT"": 3,
    ""sSWwUM"": 3,
    ""beio"": 3,
    ""mtOlhBRkL"": 3,
    ""CtqDpo"": 3,
    ""ecYZOZ"": 3
  },
  ""keyboard"": {
    ""Unknown"": 288
  },
  ""client_build"": {
    ""Unknown"": 288
  },
  ""client_name"": {
    ""Unknown"": 288
  },
  ""ip_type"": {
    ""Unknown"": 153,
    ""hosting"": 120,
    ""hosting & proxy"": 9,
    ""mobile"": 6
  }
}"
SewQYjHB,2023-09-21_stats.json,rdp_snitch,JSON,Thursday 21st of September 2023 07:16:14 PM CDT,"{
  ""ip"": {
    ""193.142.146.17"": 12,
    ""62.204.41.134"": 16,
    ""3.109.32.142"": 12,
    ""146.190.83.254"": 6,
    ""205.210.31.18"": 6,
    ""94.232.41.30"": 4,
    ""87.251.75.145"": 4,
    ""45.143.201.62"": 10,
    ""185.170.144.3"": 2,
    ""87.251.75.120"": 2,
    ""62.233.50.179"": 4,
    ""162.243.173.206"": 2,
    ""103.73.66.251"": 12,
    ""132.145.76.107"": 14,
    ""94.127.211.41"": 2,
    ""198.235.24.12"": 6,
    ""106.116.169.71"": 2,
    ""141.98.11.128"": 12,
    ""192.155.88.231"": 2,
    ""206.191.159.104"": 2,
    ""185.170.144.113"": 4,
    ""101.36.110.24"": 2,
    ""193.142.147.9"": 6,
    ""198.235.24.175"": 6,
    ""87.251.75.64"": 2,
    ""111.61.253.55"": 2,
    ""43.156.6.9"": 6,
    ""45.140.17.16"": 4,
    ""87.251.75.67"": 2,
    ""74.235.152.128"": 2,
    ""172.105.112.96"": 2,
    ""194.165.16.72"": 4,
    ""62.204.41.137"": 4,
    ""167.94.138.50"": 2,
    ""198.235.24.218"": 6,
    ""80.66.88.15"": 6
  },
  ""asn"": {
    ""AS208046"": 18,
    ""AS59425"": 20,
    ""AS16509"": 12,
    ""AS14061"": 8,
    ""AS396982"": 24,
    ""AS208091"": 20,
    ""AS210950"": 10,
    ""AS197414"": 6,
    ""AS57523"": 4,
    ""AS63473"": 12,
    ""AS31898"": 14,
    ""AS9038"": 2,
    ""AS4134"": 2,
    ""AS209605"": 12,
    ""AS63949"": 4,
    ""AS32475"": 2,
    ""AS135377"": 2,
    ""AS24547"": 2,
    ""AS132203"": 6,
    ""AS198953"": 4,
    ""AS8075"": 2,
    ""AS48721"": 4,
    ""AS398324"": 2
  },
  ""isp"": {
    ""ColocationX Ltd."": 18,
    ""Horizon LLC"": 20,
    ""Amazon Technologies Inc."": 12,
    ""DigitalOcean, LLC"": 8,
    ""Google LLC"": 24,
    ""Xhost Internet Solutions LP"": 20,
    ""TOV E-RISHENNYA"": 10,
    ""Chang Way Technologies Co. Limited"": 4,
    ""HostHatch"": 12,
    ""Oracle Corporation"": 14,
    ""Batelco Jordan"": 2,
    ""Chinanet"": 2,
    ""UAB Host Baltic"": 12,
    ""Akamai Technologies, Inc."": 2,
    ""Internap Holding LLC"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""China Mobile communications corporation"": 2,
    ""Shenzhen Tencent Computer Systems Company Limited"": 6,
    ""Proton66 OOO"": 4,
    ""Microsoft Corporation"": 2,
    ""Akamai Technologies"": 2,
    ""Flyservers S.A."": 4,
    ""Censys, Inc."": 2,
    ""Xhost Internet Solutions"": 6
  },
  ""org"": {
    ""ColocationX Ltd"": 12,
    ""Horizon LLC"": 20,
    ""AWS EC2 (ap-south-1)"": 12,
    ""DigitalOcean, LLC"": 6,
    ""Palo Alto Networks, Inc"": 24,
    ""Dmitriy Panchenko"": 4,
    ""Xhost Internet Solutions"": 10,
    ""TOV VAIZ PARTNER"": 10,
    ""Xhostis"": 6,
    ""Sierra LLC"": 4,
    ""Digital Ocean"": 2,
    ""HostHatch, LLC"": 12,
    ""Oracle Cloud Infrastructure (uk-london-1)"": 14,
    ""Orbit Telecom Technology Co. Ltd"": 2,
    ""Chinanet HE"": 2,
    ""Unknown"": 12,
    ""Linode"": 4,
    ""Internap Network Services Corporation"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""x33 Networks IBC"": 6,
    ""China Mobile"": 2,
    ""Tencent Cloud Computing"": 6,
    ""Proton66 LLC"": 4,
    ""Microsoft Azure Cloud (eastus)"": 2,
    ""Flyservers S.A"": 4,
    ""Censys, Inc"": 2,
    ""XHOSTIS"": 6
  },
  ""regionName"": {
    ""North Holland"": 18,
    ""Moscow"": 28,
    ""Maharashtra"": 12,
    ""South West"": 6,
    ""California"": 24,
    ""Perm Krai"": 4,
    ""England"": 24,
    ""Kyiv City"": 10,
    ""New Jersey"": 4,
    ""Central and Western District"": 14,
    ""Zarqa"": 2,
    ""Hebei"": 4,
    ""Kaunas"": 16,
    ""Georgia"": 2,
    ""English River"": 6,
    ""North West"": 8,
    ""Virginia"": 2,
    ""Michigan"": 2,
    ""Drenthe"": 6
  },
  ""country"": {
    ""Netherlands"": 24,
    ""Russia"": 32,
    ""India"": 12,
    ""Singapore"": 14,
    ""United States"": 34,
    ""United Kingdom"": 24,
    ""Ukraine"": 10,
    ""Hong Kong"": 14,
    ""Jordan"": 2,
    ""China"": 4,
    ""Lithuania"": 16,
    ""Seychelles"": 6
  },
  ""account"": {
    ""Domain"": 44,
    ""Test"": 10,
    ""hello"": 60,
    ""WFNQVlpeE"": 2,
    ""sYaVQE"": 2,
    ""ptEqwo"": 2,
    ""Administr"": 42,
    ""VAvnxFpUz"": 2,
    ""MLtGwn"": 2,
    ""AWlZRM"": 2,
    ""(empty)"": 8,
    ""Administrator"": 2,
    ""CkChzeqsl"": 2,
    ""eOuaeT"": 2,
    ""sSWwUM"": 2,
    ""beio"": 2,
    ""mtOlhBRkL"": 2,
    ""CtqDpo"": 2,
    ""ecYZOZ"": 2
  },
  ""keyboard"": {
    ""Unknown"": 192
  },
  ""client_build"": {
    ""Unknown"": 192
  },
  ""client_name"": {
    ""Unknown"": 192
  },
  ""ip_type"": {
    ""Unknown"": 102,
    ""hosting"": 80,
    ""hosting & proxy"": 6,
    ""mobile"": 4
  }
}"
VpqQkabi,2023-09-21_stats.json,rdp_snitch,JSON,Thursday 21st of September 2023 07:15:13 PM CDT,"{
  ""ip"": {
    ""193.142.146.17"": 6,
    ""62.204.41.134"": 8,
    ""3.109.32.142"": 6,
    ""146.190.83.254"": 3,
    ""205.210.31.18"": 3,
    ""94.232.41.30"": 2,
    ""87.251.75.145"": 2,
    ""45.143.201.62"": 5,
    ""185.170.144.3"": 1,
    ""87.251.75.120"": 1,
    ""62.233.50.179"": 2,
    ""162.243.173.206"": 1,
    ""103.73.66.251"": 6,
    ""132.145.76.107"": 7,
    ""94.127.211.41"": 1,
    ""198.235.24.12"": 3,
    ""106.116.169.71"": 1,
    ""141.98.11.128"": 6,
    ""192.155.88.231"": 1,
    ""206.191.159.104"": 1,
    ""185.170.144.113"": 2,
    ""101.36.110.24"": 1,
    ""193.142.147.9"": 3,
    ""198.235.24.175"": 3,
    ""87.251.75.64"": 1,
    ""111.61.253.55"": 1,
    ""43.156.6.9"": 3,
    ""45.140.17.16"": 2,
    ""87.251.75.67"": 1,
    ""74.235.152.128"": 1,
    ""172.105.112.96"": 1,
    ""194.165.16.72"": 2,
    ""62.204.41.137"": 2,
    ""167.94.138.50"": 1,
    ""198.235.24.218"": 3,
    ""80.66.88.15"": 3
  },
  ""asn"": {
    ""AS208046"": 9,
    ""AS59425"": 10,
    ""AS16509"": 6,
    ""AS14061"": 4,
    ""AS396982"": 12,
    ""AS208091"": 10,
    ""AS210950"": 5,
    ""AS197414"": 3,
    ""AS57523"": 2,
    ""AS63473"": 6,
    ""AS31898"": 7,
    ""AS9038"": 1,
    ""AS4134"": 1,
    ""AS209605"": 6,
    ""AS63949"": 2,
    ""AS32475"": 1,
    ""AS135377"": 1,
    ""AS24547"": 1,
    ""AS132203"": 3,
    ""AS198953"": 2,
    ""AS8075"": 1,
    ""AS48721"": 2,
    ""AS398324"": 1
  },
  ""isp"": {
    ""ColocationX Ltd."": 9,
    ""Horizon LLC"": 10,
    ""Amazon Technologies Inc."": 6,
    ""DigitalOcean, LLC"": 4,
    ""Google LLC"": 12,
    ""Xhost Internet Solutions LP"": 10,
    ""TOV E-RISHENNYA"": 5,
    ""Chang Way Technologies Co. Limited"": 2,
    ""HostHatch"": 6,
    ""Oracle Corporation"": 7,
    ""Batelco Jordan"": 1,
    ""Chinanet"": 1,
    ""UAB Host Baltic"": 6,
    ""Akamai Technologies, Inc."": 1,
    ""Internap Holding LLC"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""China Mobile communications corporation"": 1,
    ""Shenzhen Tencent Computer Systems Company Limited"": 3,
    ""Proton66 OOO"": 2,
    ""Microsoft Corporation"": 1,
    ""Akamai Technologies"": 1,
    ""Flyservers S.A."": 2,
    ""Censys, Inc."": 1,
    ""Xhost Internet Solutions"": 3
  },
  ""org"": {
    ""ColocationX Ltd"": 6,
    ""Horizon LLC"": 10,
    ""AWS EC2 (ap-south-1)"": 6,
    ""DigitalOcean, LLC"": 3,
    ""Palo Alto Networks, Inc"": 12,
    ""Dmitriy Panchenko"": 2,
    ""Xhost Internet Solutions"": 5,
    ""TOV VAIZ PARTNER"": 5,
    ""Xhostis"": 3,
    ""Sierra LLC"": 2,
    ""Digital Ocean"": 1,
    ""HostHatch, LLC"": 6,
    ""Oracle Cloud Infrastructure (uk-london-1)"": 7,
    ""Orbit Telecom Technology Co. Ltd"": 1,
    ""Chinanet HE"": 1,
    ""Unknown"": 6,
    ""Linode"": 2,
    ""Internap Network Services Corporation"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""x33 Networks IBC"": 3,
    ""China Mobile"": 1,
    ""Tencent Cloud Computing"": 3,
    ""Proton66 LLC"": 2,
    ""Microsoft Azure Cloud (eastus)"": 1,
    ""Flyservers S.A"": 2,
    ""Censys, Inc"": 1,
    ""XHOSTIS"": 3
  },
  ""regionName"": {
    ""North Holland"": 9,
    ""Moscow"": 14,
    ""Maharashtra"": 6,
    ""South West"": 3,
    ""California"": 12,
    ""Perm Krai"": 2,
    ""England"": 12,
    ""Kyiv City"": 5,
    ""New Jersey"": 2,
    ""Central and Western District"": 7,
    ""Zarqa"": 1,
    ""Hebei"": 2,
    ""Kaunas"": 8,
    ""Georgia"": 1,
    ""English River"": 3,
    ""North West"": 4,
    ""Virginia"": 1,
    ""Michigan"": 1,
    ""Drenthe"": 3
  },
  ""country"": {
    ""Netherlands"": 12,
    ""Russia"": 16,
    ""India"": 6,
    ""Singapore"": 7,
    ""United States"": 17,
    ""United Kingdom"": 12,
    ""Ukraine"": 5,
    ""Hong Kong"": 7,
    ""Jordan"": 1,
    ""China"": 2,
    ""Lithuania"": 8,
    ""Seychelles"": 3
  },
  ""account"": {
    ""Domain"": 22,
    ""Test"": 5,
    ""hello"": 30,
    ""WFNQVlpeE"": 1,
    ""sYaVQE"": 1,
    ""ptEqwo"": 1,
    ""Administr"": 21,
    ""VAvnxFpUz"": 1,
    ""MLtGwn"": 1,
    ""AWlZRM"": 1,
    ""(empty)"": 4,
    ""Administrator"": 1,
    ""CkChzeqsl"": 1,
    ""eOuaeT"": 1,
    ""sSWwUM"": 1,
    ""beio"": 1,
    ""mtOlhBRkL"": 1,
    ""CtqDpo"": 1,
    ""ecYZOZ"": 1
  },
  ""keyboard"": {
    ""Unknown"": 96
  },
  ""client_build"": {
    ""Unknown"": 96
  },
  ""client_name"": {
    ""Unknown"": 96
  },
  ""ip_type"": {
    ""Unknown"": 51,
    ""hosting"": 40,
    ""hosting & proxy"": 3,
    ""mobile"": 2
  }
}"
2bGetHbv,Monster For Application - Buzzbuzz99,Pompsy99,Lua,Thursday 21st of September 2023 06:50:36 PM CDT,"-- When this monster reaches half health he does knew move combinations but you have no way to damage it in this exemplar game

--variables
local ATTACK_RANGE = 14
local BigAttackRange = 80
local CanAttack = false
local attacking = false
local ViewRange = 500
	
local Character = script.Parent
local Humrp = Character.PrimaryPart

local Hum = Character:WaitForChild(""Humanoid"")
local TweenService = game:GetService(""TweenService"")

local rp = game:GetService(""ReplicatedStorage"")

--Get My Modules
local GlobalFunctions = require(rp.GlobalFunctions)
local DamageHandler = require(rp.DamageHandler)

--Disable Ragdoll
Humrp:SetNetworkOwner(nil)
Hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
Hum:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)

-- Animations
local Animator = Hum:FindFirstChildOfClass(""Animator"")

local Anims = script.Parent:WaitForChild(""Anims"")
local Kick1 = Animator:LoadAnimation(Anims.KickHold)
local Kick2 = Animator:LoadAnimation(Anims.KickFire)
local Swipes = Animator:LoadAnimation(Anims.Swipes)
local Dash1 = Animator:LoadAnimation(Anims.DashHold)
local Dash2 = Animator:LoadAnimation(Anims.DashFire)
local Dash3 = Animator:LoadAnimation(Anims.DashSmash)

local target = nil
local BG

--Move Monster
local function runToTarget()
	local targetPosition = (Humrp.Position - target.Position).Unit * (ATTACK_RANGE - 4) + target.Position

	script.Parent.Humanoid:MoveTo(targetPosition)
end

--Find Character Targets
function findTargets()
	for i, unit in pairs (workspace:GetDescendants())do
		if unit:FindFirstChild(""Humanoid"") and unit ~= Character and unit.Humanoid.Health > 0 then
			if target == nil then
				target = unit.PrimaryPart
			else
				if (unit.PrimaryPart.Position - Humrp.Position).magnitude < (target.Position - Humrp.Position).magnitude then
					target = unit.PrimaryPart
				end
			end
		end
	end
end

--Start Holding Kick Attack
local function Kick()
	local Size = 20
	local Damage = 10
	local StunTime = 1
	local PushSpeed = 100
	local PushDuration = 1
	local StartUp = 0.75
	local StartUpWalkSpeed = 5
	
	-- Launch the Kick Attack
	local function Swing()
		local HitBoxCFrame = Character.RightLeg.CFrame * CFrame.new(0,-Character.RightLeg.Size.Y,0)
		local HitBox = GlobalFunctions.HitBoxPart(false, Vector3.new(Size,Size,Size), HitBoxCFrame, 0.3) -- Make hitbox give it above CFrame
		
		local Weld = Instance.new(""WeldConstraint"") -- Make Weld
		Weld.Part0 = HitBox
		Weld.Part1 = Character.RightLeg
		Weld.Parent = HitBox
		
		local objects = workspace:GetPartsInPart(HitBox)
		local AlreadyHit = {} -- AlreadyHit Table So that the AOE doesn't hit a character for every part that gets touched
		
		HitBox.Touched:Connect(function(hit)
			local HitParent = hit.Parent

			if table.find(AlreadyHit, HitParent) == nil and HitParent ~= nil and HitParent ~= Character and HitParent:FindFirstChild(""Humanoid"") then
				table.insert(AlreadyHit, HitParent)
				if not HitParent:FindFirstChild(""IFrame"") then
					GlobalFunctions:KnockBack(HitParent, Character.PrimaryPart.Position + Vector3.new(0,-12,0), PushSpeed, PushDuration, Character, true)
				end
				DamageHandler:DealDamage(HitParent, Damage, 0, StunTime, false, true)
			end
		end)
	end

	Kick1:Play()

	delay(StartUp,function()
		Kick1:Stop()
		Kick2:Play()
		Swing()
	end)
end

--Left Right Both Combo
local function Combo()
	local Size = 10
	local Damage = 10
	local BlockDamage = 2
	local StunTime = 0.7
	local StartUp = 0.5
	
	local Limbs = {
		""RightArm"",
		""LeftArm""
	}

	local function Swing(Count)
		local HitBox
		
		if Count ~= 3 then
			local Limb = Limbs[Count]
			local HitBoxCFrame = Character[Limb].CFrame * CFrame.new(0,-Character[Limb].Size.Y * 0.75,0)
			local HitBox = GlobalFunctions.HitBoxPart(false, Vector3.new(Size,Size,Size), HitBoxCFrame, 0.5)

			local Weld = Instance.new(""WeldConstraint"")
			Weld.Part0 = HitBox
			Weld.Part1 = Character[Limb]
			Weld.Parent = HitBox
			
			local objects = workspace:GetPartsInPart(HitBox)
			local AlreadyHit = {}

			HitBox.Touched:Connect(function(hit)
				local HitParent = hit.Parent

				if table.find(AlreadyHit, HitParent) == nil and HitParent ~= nil and HitParent ~= Character and HitParent:FindFirstChild(""Humanoid"") then
					table.insert(AlreadyHit, HitParent)
					DamageHandler:DealDamage(HitParent, Damage, BlockDamage, StunTime, true, true)
				end
			end)
			
		else
			local CharCFrame = Character.PrimaryPart.CFrame
			local HitBoxCFrame = CharCFrame * CFrame.new(0,-10,-10)
			local HitBox = GlobalFunctions.HitBoxPart(true, Vector3.new(Size * 2,Size * 2,Size * 2), HitBoxCFrame, 0.5)

			local objects = workspace:GetPartsInPart(HitBox)
			local playersinregion = {}

			for i,v in pairs(objects) do
				local target = v.Parent
				local targethumanoid = target:FindFirstChild(""Humanoid"")

				if table.find(playersinregion, target) == nil and target ~= nil and target ~= Character and targethumanoid then
					table.insert(playersinregion, target)
					DamageHandler:DealDamage(target, Damage * 2, BlockDamage * 4, StunTime * 1.5, true, true)
				end
			end
		end
	end

	Swipes:Play()
	
	for i = 1,3 do
		local Startup = StartUp
		if i == 3 then
			Startup = 0.7
		end
		task.wait(Startup)
		Swing(i)	
	end
end

-- Play kick then transition into combo
local function Feint()
	local StartUp = 0.75
	
	Kick1:Play()

	delay(StartUp,function()
		Kick1:Stop()
		Combo()
	end)
end

-- Do combo then transition into Kick
local function Feint2()
	local Size = 10
	local Damage = 10
	local BlockDamage = 2
	local StunTime = 0.7
	local StartUp = 0.5

	local Limbs = {
		""RightArm"",
		""LeftArm""
	}
	
	local function Swing(Count)
		local HitBox
		local Limb = Limbs[Count]
		local HitBoxCFrame = Character[Limb].CFrame * CFrame.new(0,-Character[Limb].Size.Y * 0.75,0)
		local HitBox = GlobalFunctions.HitBoxPart(false, Vector3.new(Size,Size,Size), HitBoxCFrame, 0.5)

		local Weld = Instance.new(""WeldConstraint"")
		Weld.Part0 = HitBox
		Weld.Part1 = Character[Limb]
		Weld.Parent = HitBox

		local objects = workspace:GetPartsInPart(HitBox)
		local AlreadyHit = {}

		HitBox.Touched:Connect(function(hit)
			local HitParent = hit.Parent

			if table.find(AlreadyHit, HitParent) == nil and HitParent ~= nil and HitParent ~= Character and HitParent:FindFirstChild(""Humanoid"") then
				table.insert(AlreadyHit, HitParent)
				DamageHandler:DealDamage(HitParent, Damage, BlockDamage, StunTime, true, true)
			end
		end)
	end
	
	Swipes:Play()

	for i = 1,2 do
		task.wait(StartUp)
		Swing(i)
		if i == 2 then
			task.wait(StartUp)
			Swipes:Stop()
		end
	end
	
	Kick()
end

-- Choose attacks
local function Attack()
	local MaxMoves = 2
	if Character:FindFirstChild(""Adapted"") then
		MaxMoves = 4
	end
	local random = math.random(1,MaxMoves)
	if random == 1 then
		Kick()
		delay(2.5,function()
			attacking = false				
		end)
	elseif random == 2 then
		Combo()
		delay(3,function()
			attacking = false				
		end)
	elseif random == 3 then
		Feint()
		delay(4.5,function()
			attacking = false				
		end)
	elseif random == 4 then
		Feint2()
		delay(4.5,function()
			attacking = false				
		end)
	end
end

-- Dash then Smash
local function Dash()
	local function DashBase()
		local Size = 30
		local Damage = 10
		local StunTime = 1
		local PushSpeed = 100
		local PushDuration = 1
		local StartUp = 1
		local StartUpWalkSpeed = 0
		local DashTime = 1

		local function Leap()
			local Attachment = Instance.new(""Attachment"", Humrp)
			game.Debris:AddItem(Attachment,DashTime)

			local LV = Instance.new(""LinearVelocity"")
			LV.MaxForce = 1e8
			LV.VectorVelocity = Vector3.new(0,0,-70)
			LV.Parent = Humrp
			LV.Attachment0 = Attachment
			LV.RelativeTo = ""Attachment0""
			game.Debris:AddItem(LV, DashTime)
		end

		local function Smash()
			local CharCFrame = Character.PrimaryPart.CFrame
			local HitBoxCFrame = CharCFrame * CFrame.new(0,-10,0)
			local HitBox = GlobalFunctions.HitBoxPart(true, Vector3.new(Size,Size,Size), HitBoxCFrame, 0.5)

			local objects = workspace:GetPartsInPart(HitBox)
			local playersinregion = {}

			for i,v in pairs(objects) do
				local target = v.Parent
				local targethumanoid = target:FindFirstChild(""Humanoid"")

				if table.find(playersinregion, target) == nil and target ~= nil and target ~= Character and targethumanoid then
					table.insert(playersinregion, target)
					if not target:FindFirstChild(""IFrame"") then
						GlobalFunctions:KnockBack(target, Character.PrimaryPart.Position + Vector3.new(0,-12,0), PushSpeed, PushDuration, Character, true)
					end
					DamageHandler:DealDamage(target, Damage, 0, StunTime, false, true)
				end
			end
		end
		
		Dash1:Play()

		delay(StartUp,function()
			Dash1:Stop()
			Dash2:Play()
			Leap()
			task.wait(DashTime)
			Dash2:Stop()
			Dash3:Play()
			Smash()
		end)
	end
	
	local function DashMode()
		local Size = 30
		local Damage = 20
		local StunTime = 1
		local PushSpeed = 100
		local PushDuration = 1
		local StartUp = 1
		local StartUpWalkSpeed = 0
		local DashTime = 0.3

		local function Leap()
			local targePos = Vector3.new(target.Position.X, Humrp.Position.Y, target.Position.Z)
			local DirectionToChar = (target.Position - Humrp.Position).Unit
			Humrp.CFrame = CFrame.new(targePos + DirectionToChar * -10)
			Humrp.CFrame = CFrame.new(Humrp.Position,targePos)
		end

		local function Smash()
			local CharCFrame = Character.PrimaryPart.CFrame
			local HitBoxCFrame = CharCFrame * CFrame.new(0,-10,0)
			local HitBox = GlobalFunctions.HitBoxPart(true, Vector3.new(Size,Size,Size), HitBoxCFrame, 0.5)

			local objects = workspace:GetPartsInPart(HitBox)
			local playersinregion = {}

			for i,v in pairs(objects) do
				local target = v.Parent
				local targethumanoid = target:FindFirstChild(""Humanoid"")

				if table.find(playersinregion, target) == nil and target ~= nil and target ~= Character and targethumanoid then
					table.insert(playersinregion, target)
					if not target:FindFirstChild(""IFrame"") then
						GlobalFunctions:KnockBack(target, Humrp.Position + Vector3.new(0,-12,0), PushSpeed, PushDuration, Character, true)
					end
					DamageHandler:DealDamage(target, Damage, 0, StunTime, false, true)
				end
			end
		end

		Dash1:Play()

		delay(StartUp,function()
			Dash1:Stop()
			Leap()
			Dash1:Stop()
			Dash3:Play()
			Smash()
		end)
	end
	
	if not Character:FindFirstChild(""Adapted"") then
		DashBase()
	else
		DashMode()
	end
end

--Same as the previous attack function but only for long range
local function AttackLong()
	local MaxMoves = 1
	if Character:FindFirstChild(""Adapted"") then
		MaxMoves = 1
	end
	local random = math.random(1,MaxMoves)
	if random == 1 then
		Dash()
		delay(4,function()
			attacking = false				
		end)
	elseif random == 2 then
		Combo()
		delay(4,function()
			attacking = false				
		end)
	end
end

--Run this every frame for tracking, attacking, finding target, etc.
local function onHeartbeat()
	
	if BG ~= nil then
		BG:Destroy()
	end
	
	if target ~= nil then
		
		local dist = (target.Position - Humrp.Position).magnitude
		
		if target.Parent.Humanoid and target.Parent.Humanoid.Health <= 0 or dist > ViewRange then
			target = nil
		else
			
			local distance = (target.Position - Humrp.Position).magnitude
			
			local inAttackRange = distance <= ATTACK_RANGE
			local inBigAttackRange = distance <= BigAttackRange
			
			if inAttackRange then
				
				local TargetPos = Vector3.new(target.Position.X, Humrp.Position.Y, target.Position.Z)
				
				BG = Instance.new(""BodyGyro"")
				BG.MaxTorque = Vector3.new(1e8,1e8,1e8)
				BG.P = 20000
				BG.CFrame = CFrame.lookAt(Humrp.Position, TargetPos)
				BG.Parent = Humrp
				
				CanAttack = true
				if not attacking and CanAttack then
					CanAttack = false
					attacking = true
					
					Attack()
				end
			elseif inBigAttackRange and distance > ATTACK_RANGE * 2 then
				CanAttack = true
				if not attacking and CanAttack then
					CanAttack = false
					attacking = true

					AttackLong()
				end
				
				if attacking == true then
					local TargetPos = Vector3.new(target.Position.X, Humrp.Position.Y + 1, target.Position.Z)
					
					BG = Instance.new(""BodyGyro"")
					BG.MaxTorque = Vector3.new(1e8,1e8,1e8)
					BG.P = 20000
					BG.CFrame = CFrame.lookAt(Humrp.Position, TargetPos)
					BG.Parent = Humrp
				else
					runToTarget()
				end
			else
				runToTarget()
			end
		end
	end
	
	if target == nil then
		findTargets()
	end
end

local RunService = game:GetService(""RunService"")

RunService.Heartbeat:Connect(function()
	onHeartbeat()
end)

Hum.Died:Connect(function()
	script.Parent.Health:Destroy()
	script:Destroy()
end)

spawn(function()
	while wait(2) do
		findTargets()
		runToTarget()
	end
end)"
b4U82dqc,SoT item value on Safer Seas source,thelunararmy,Python,Thursday 21st of September 2023 06:30:19 PM CDT,"{
 ""cells"": [
  {
   ""cell_type"": ""code"",
   ""execution_count"": 77,
   ""id"": ""e1138242-0a11-40f5-b0f0-349f926bb0e6"",
   ""metadata"": {},
   ""outputs"": [],
   ""source"": [
    ""import pandas as pd\n"",
    ""from statistics import mean \n"",
    ""pd.set_option('display.max_rows', 500)""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 78,
   ""id"": ""0a00b91f-25b3-4a43-b77c-b3d5ecc537b0"",
   ""metadata"": {},
   ""outputs"": [],
   ""source"": [
    ""# Scrape from source\n"",
    ""tables = pd.read_html(r\""https://www.ign.com/wikis/sea-of-thieves/Types_of_Loot_and_Treasure\"")""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 79,
   ""id"": ""7a3349f0-d393-4b40-bd58-a24a47adb007"",
   ""metadata"": {},
   ""outputs"": [
    {
     ""data"": {
      ""text/html"": [
       ""<div>\n"",
       ""<style scoped>\n"",
       ""    .dataframe tbody tr th:only-of-type {\n"",
       ""        vertical-align: middle;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe tbody tr th {\n"",
       ""        vertical-align: top;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe thead th {\n"",
       ""        text-align: right;\n"",
       ""    }\n"",
       ""</style>\n"",
       ""<table border=\""1\"" class=\""dataframe\"">\n"",
       ""  <thead>\n"",
       ""    <tr style=\""text-align: right;\"">\n"",
       ""      <th></th>\n"",
       ""      <th>Loot</th>\n"",
       ""      <th>Best Emissary to Turn It Into</th>\n"",
       ""      <th>Base Value</th>\n"",
       ""    </tr>\n"",
       ""  </thead>\n"",
       ""  <tbody>\n"",
       ""    <tr>\n"",
       ""      <th>8</th>\n"",
       ""      <td>Ritual Skull</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>9</th>\n"",
       ""      <td>Rag and Bone Crates</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>10</th>\n"",
       ""      <td>Ashen Tome</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>11</th>\n"",
       ""      <td>Ashen Chest</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>12</th>\n"",
       ""      <td>Ashen Key</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>13</th>\n"",
       ""      <td>Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>14</th>\n"",
       ""      <td>Castaway's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>15</th>\n"",
       ""      <td>Marauder's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>16</th>\n"",
       ""      <td>Seafarer's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>200</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>17</th>\n"",
       ""      <td>Chest of Rage</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>18</th>\n"",
       ""      <td>Chest of Sorrow</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>19</th>\n"",
       ""      <td>Chest of a Thousand Grogs</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>20</th>\n"",
       ""      <td>Chest of Ancient Tributes</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>21</th>\n"",
       ""      <td>Chest of the Damned</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>22</th>\n"",
       ""      <td>Skeleton Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>23</th>\n"",
       ""      <td>Stronghold Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>24</th>\n"",
       ""      <td>Bronze Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>25</th>\n"",
       ""      <td>Silver Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>225</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>26</th>\n"",
       ""      <td>Gold Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>27</th>\n"",
       ""      <td>Bejeweled (literally) Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>750</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>28</th>\n"",
       ""      <td>Devil's Roar Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1050</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>29</th>\n"",
       ""      <td>Gold Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>30</th>\n"",
       ""      <td>Silver Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>31</th>\n"",
       ""      <td>Stone Treasure Vault Keys</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>32</th>\n"",
       ""      <td>Animal Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>45</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>33</th>\n"",
       ""      <td>Kraken/Megalodon Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>450</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>34</th>\n"",
       ""      <td>Fish</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>35</th>\n"",
       ""      <td>Treacherous Plunder</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>10</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>36</th>\n"",
       ""      <td>Disgraced Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>200</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>37</th>\n"",
       ""      <td>Foul Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>100</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>38</th>\n"",
       ""      <td>Hateful Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>39</th>\n"",
       ""      <td>Villainous Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>40</th>\n"",
       ""      <td>Ashen Skulls</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>41</th>\n"",
       ""      <td>Captain Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1750</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>42</th>\n"",
       ""      <td>Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>43</th>\n"",
       ""      <td>Ashen Winds Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>5000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>44</th>\n"",
       ""      <td>Gold Hoarder's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>10000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>45</th>\n"",
       ""      <td>Skeleton Captain's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>46</th>\n"",
       ""      <td>Stronghold Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>3250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>47</th>\n"",
       ""      <td>Chicken</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>48</th>\n"",
       ""      <td>Pig</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>49</th>\n"",
       ""      <td>Snake</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>50</th>\n"",
       ""      <td>Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>51</th>\n"",
       ""      <td>Stronghold Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>5000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>52</th>\n"",
       ""      <td>Fruit Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>53</th>\n"",
       ""      <td>Cannonball Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>54</th>\n"",
       ""      <td>Wood Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>55</th>\n"",
       ""      <td>Cannonball Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>56</th>\n"",
       ""      <td>Storage Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>57</th>\n"",
       ""      <td>Ammo Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>58</th>\n"",
       ""      <td>Firebomb Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>59</th>\n"",
       ""      <td>Storage Crate</td>\n"",
       ""      <td>NaN</td>\n"",
       ""      <td>0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>60</th>\n"",
       ""      <td>Ashes of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1250</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>61</th>\n"",
       ""      <td>Crate of Ancient Bone Dust</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>62</th>\n"",
       ""      <td>Crate of Exotic Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>63</th>\n"",
       ""      <td>Crate of Exquisite Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>64</th>\n"",
       ""      <td>Crate of Extraordinary Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>65</th>\n"",
       ""      <td>Crate of Fine Ore</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>66</th>\n"",
       ""      <td>Crate of Fine Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>67</th>\n"",
       ""      <td>Crate of Precious Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>68</th>\n"",
       ""      <td>Crate of Rare Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>300</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>69</th>\n"",
       ""      <td>Crate of Volcanic Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>70</th>\n"",
       ""      <td>Crate of Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>71</th>\n"",
       ""      <td>Create of Devil's Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>72</th>\n"",
       ""      <td>Crate of Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>73</th>\n"",
       ""      <td>Crate of Devil's Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>74</th>\n"",
       ""      <td>Crate of Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>75</th>\n"",
       ""      <td>Crate of Devil's Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>76</th>\n"",
       ""      <td>Assorted Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>77</th>\n"",
       ""      <td>Broken Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>78</th>\n"",
       ""      <td>Raw Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>79</th>\n"",
       ""      <td>Unfiltered Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>80</th>\n"",
       ""      <td>Unprocessed Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>81</th>\n"",
       ""      <td>Unrefined Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>82</th>\n"",
       ""      <td>Unsorted Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>83</th>\n"",
       ""      <td>Emerald Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>84</th>\n"",
       ""      <td>Ruby Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>85</th>\n"",
       ""      <td>Sapphire Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""    </tr>\n"",
       ""  </tbody>\n"",
       ""</table>\n"",
       ""</div>""
      ],
      ""text/plain"": [
       ""                               Loot  \\\n"",
       ""8                      Ritual Skull   \n"",
       ""9               Rag and Bone Crates   \n"",
       ""10                       Ashen Tome   \n"",
       ""11                      Ashen Chest   \n"",
       ""12                        Ashen Key   \n"",
       ""13                  Captain's Chest   \n"",
       ""14                 Castaway's Chest   \n"",
       ""15                 Marauder's Chest   \n"",
       ""16                 Seafarer's Chest   \n"",
       ""17                    Chest of Rage   \n"",
       ""18                  Chest of Sorrow   \n"",
       ""19        Chest of a Thousand Grogs   \n"",
       ""20        Chest of Ancient Tributes   \n"",
       ""21              Chest of the Damned   \n"",
       ""22         Skeleton Captain's Chest   \n"",
       ""23                 Stronghold Chest   \n"",
       ""24                 Bronze Artifacts   \n"",
       ""25                 Silver Artifacts   \n"",
       ""26                   Gold Artifacts   \n"",
       ""27  Bejeweled (literally) Artifacts   \n"",
       ""28           Devil's Roar Artifacts   \n"",
       ""29          Gold Treasure Vault Key   \n"",
       ""30        Silver Treasure Vault Key   \n"",
       ""31        Stone Treasure Vault Keys   \n"",
       ""32                      Animal Meat   \n"",
       ""33            Kraken/Megalodon Meat   \n"",
       ""34                             Fish   \n"",
       ""35              Treacherous Plunder   \n"",
       ""36           Disgraced Bounty Skull   \n"",
       ""37                Foul Bounty Skull   \n"",
       ""38             Hateful Bounty Skull   \n"",
       ""39          Villainous Bounty Skull   \n"",
       ""40                     Ashen Skulls   \n"",
       ""41      Captain Skull of the Damned   \n"",
       ""42              Skull of the Damned   \n"",
       ""43                Ashen Winds Skull   \n"",
       ""44             Gold Hoarder's Skull   \n"",
       ""45         Skeleton Captain's Skull   \n"",
       ""46                 Stronghold Skull   \n"",
       ""47                          Chicken   \n"",
       ""48                              Pig   \n"",
       ""49                            Snake   \n"",
       ""50                 Gunpowder Barrel   \n"",
       ""51      Stronghold Gunpowder Barrel   \n"",
       ""52                      Fruit Crate   \n"",
       ""53                 Cannonball Crate   \n"",
       ""54                       Wood Crate   \n"",
       ""55   Cannonball Crate of the Damned   \n"",
       ""56      Storage Crate of the Damned   \n"",
       ""57                       Ammo Crate   \n"",
       ""58                   Firebomb Crate   \n"",
       ""59                    Storage Crate   \n"",
       ""60              Ashes of the Damned   \n"",
       ""61       Crate of Ancient Bone Dust   \n"",
       ""62            Crate of Exotic Silks   \n"",
       ""63        Crate of Exquisite Spices   \n"",
       ""64  Crate of Extraordinary Minerals   \n"",
       ""65                Crate of Fine Ore   \n"",
       ""66              Crate of Fine Sugar   \n"",
       ""67      Crate of Precious Gemstones   \n"",
       ""68                Crate of Rare Tea   \n"",
       ""69          Crate of Volcanic Stone   \n"",
       ""70                  Crate of Plants   \n"",
       ""71         Create of Devil's Plants   \n"",
       ""72                   Crate of Cloth   \n"",
       ""73           Crate of Devil's Cloth   \n"",
       ""74                     Crate of Rum   \n"",
       ""75             Crate of Devil's Rum   \n"",
       ""76               Assorted Gemstones   \n"",
       ""77                     Broken Stone   \n"",
       ""78                        Raw Sugar   \n"",
       ""79              Unfiltered Minerals   \n"",
       ""80                  Unprocessed Tea   \n"",
       ""81                 Unrefined Spices   \n"",
       ""82                   Unsorted Silks   \n"",
       ""83              Emerald Mermaid Gem   \n"",
       ""84                 Ruby Mermaid Gem   \n"",
       ""85             Sapphire Mermaid Gem   \n"",
       ""\n"",
       ""                        Best Emissary to Turn It Into  Base Value  \n"",
       ""8                                          Bilge Rats          10  \n"",
       ""9                                          Bilge Rats           5  \n"",
       ""10                                         Bilge Rats          10  \n"",
       ""11                                         Bilge Rats          10  \n"",
       ""12                                         Bilge Rats           5  \n"",
       ""13                                      Gold Hoarders        1000  \n"",
       ""14                                      Gold Hoarders         100  \n"",
       ""15                                      Gold Hoarders         400  \n"",
       ""16                                      Gold Hoarders         200  \n"",
       ""17                                      Gold Hoarders        3250  \n"",
       ""18                                      Gold Hoarders        3500  \n"",
       ""19                                      Gold Hoarders        2500  \n"",
       ""20                                      Gold Hoarders        3500  \n"",
       ""21                                      Gold Hoarders        1500  \n"",
       ""22                                      Gold Hoarders        1250  \n"",
       ""23                                      Gold Hoarders        2000  \n"",
       ""24                                      Gold Hoarders         100  \n"",
       ""25                                      Gold Hoarders         225  \n"",
       ""26                                      Gold Hoarders         400  \n"",
       ""27                                      Gold Hoarders         750  \n"",
       ""28                                      Gold Hoarders        1050  \n"",
       ""29                                      Gold Hoarders        3500  \n"",
       ""30                                      Gold Hoarders        2250  \n"",
       ""31                                      Gold Hoarders        1250  \n"",
       ""32                                  The Hunter's Call          45  \n"",
       ""33                                  The Hunter's Call         450  \n"",
       ""34                                  The Hunter's Call           0  \n"",
       ""35                                  The Hunter's Call          10  \n"",
       ""36                                     Order of Souls         200  \n"",
       ""37                                     Order of Souls         100  \n"",
       ""38                                     Order of Souls         500  \n"",
       ""39                                     Order of Souls        1000  \n"",
       ""40                                     Order of Souls           0  \n"",
       ""41                                     Order of Souls        1750  \n"",
       ""42                                     Order of Souls        1250  \n"",
       ""43                                     Order of Souls        5000  \n"",
       ""44                                     Order of Souls       10000  \n"",
       ""45                                     Order of Souls        1500  \n"",
       ""46                                     Order of Souls        3250  \n"",
       ""47  Merchant Alliance (but they must first be capt...         105  \n"",
       ""48  Merchant Alliance (but they must first be capt...         105  \n"",
       ""49  Merchant Alliance (but they must first be capt...         105  \n"",
       ""50                                  Merchant Alliance         150  \n"",
       ""51                                  Merchant Alliance        5000  \n"",
       ""52                                  Merchant Alliance         750  \n"",
       ""53                                  Merchant Alliance         750  \n"",
       ""54                                  Merchant Alliance         750  \n"",
       ""55                                  Merchant Alliance        1000  \n"",
       ""56                                  Merchant Alliance        1000  \n"",
       ""57                                  Merchant Alliance         250  \n"",
       ""58                                  Merchant Alliance        1500  \n"",
       ""59                                                NaN           0  \n"",
       ""60                                  Merchant Alliance        1250  \n"",
       ""61                                  Merchant Alliance        3500  \n"",
       ""62                                  Merchant Alliance         500  \n"",
       ""63                                  Merchant Alliance        1000  \n"",
       ""64                                  Merchant Alliance        1500  \n"",
       ""65                                  Merchant Alliance         750  \n"",
       ""66                                  Merchant Alliance         150  \n"",
       ""67                                  Merchant Alliance        3000  \n"",
       ""68                                  Merchant Alliance         300  \n"",
       ""69                                  Merchant Alliance        1500  \n"",
       ""70                                  Merchant Alliance         700  \n"",
       ""71                                  Merchant Alliance        1400  \n"",
       ""72                                  Merchant Alliance         700  \n"",
       ""73                                  Merchant Alliance        1400  \n"",
       ""74                                  Merchant Alliance         700  \n"",
       ""75                                  Merchant Alliance        1400  \n"",
       ""76                                  Merchant Alliance        4000  \n"",
       ""77                                  Merchant Alliance        2500  \n"",
       ""78                                  Merchant Alliance        2000  \n"",
       ""79                                  Merchant Alliance        4000  \n"",
       ""80                                  Merchant Alliance        2500  \n"",
       ""81                                  Merchant Alliance        3500  \n"",
       ""82                                  Merchant Alliance        3000  \n"",
       ""83                                      Gold Hoarders        1000  \n"",
       ""84                                      Gold Hoarders        2000  \n"",
       ""85                                      Gold Hoarders        1000  ""
      ]
     },
     ""execution_count"": 79,
     ""metadata"": {},
     ""output_type"": ""execute_result""
    }
   ],
   ""source"": [
    ""# Extract tables\n"",
    ""df = tables[0]\n"",
    ""df = df.drop(columns = [\""Location\"", \""Type\""])\n"",
    ""df.columns = [*df.columns[:-1], 'Base Value']\n"",
    ""\n"",
    ""# Remove Athenas and Reapers\n"",
    ""df = df[df[\""Best Emissary to Turn It Into\""]!=\""Athena's Fortune\""]\n"",
    ""df = df[df[\""Best Emissary to Turn It Into\""]!=\""Reaper's Bones\""]\n"",
    ""df\n"",
    ""\n"",
    ""# Convert to ints and apply averages where needed\n"",
    ""col = []\n"",
    ""for val in df['Base Value']:\n"",
    ""    # print (val)\n"",
    ""    if \""~\"" in val:\n"",
    ""        val = mean(list(map(int, val.replace(\"",\"",\""\"").split(\""~\"")[0].split(\""-\""))))\n"",
    ""    elif len(val) < 1:\n"",
    ""        val = 0\n"",
    ""    elif \""Doubloons\"" in val:\n"",
    ""        val = int(val.split(\""Doubloons\"")[0])\n"",
    ""    else:\n"",
    ""        try:\n"",
    ""            val = int(val.replace(\"",\"",\""\"").split(\"" \"")[0])\n"",
    ""        except Exception:\n"",
    ""            val = 0\n"",
    ""    col.append(val)\n"",
    ""    \n"",
    ""df['Base Value'] = col\n"",
    ""\n"",
    ""df""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 80,
   ""id"": ""61bdb4ef-a54b-4583-9bf8-8e3e7b0aea8e"",
   ""metadata"": {},
   ""outputs"": [
    {
     ""data"": {
      ""text/html"": [
       ""<div>\n"",
       ""<style scoped>\n"",
       ""    .dataframe tbody tr th:only-of-type {\n"",
       ""        vertical-align: middle;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe tbody tr th {\n"",
       ""        vertical-align: top;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe thead th {\n"",
       ""        text-align: right;\n"",
       ""    }\n"",
       ""</style>\n"",
       ""<table border=\""1\"" class=\""dataframe\"">\n"",
       ""  <thead>\n"",
       ""    <tr style=\""text-align: right;\"">\n"",
       ""      <th></th>\n"",
       ""      <th>Loot</th>\n"",
       ""      <th>Best Emissary to Turn It Into</th>\n"",
       ""      <th>Base Value</th>\n"",
       ""      <th>Emissary 5 (High Sea only)</th>\n"",
       ""    </tr>\n"",
       ""  </thead>\n"",
       ""  <tbody>\n"",
       ""    <tr>\n"",
       ""      <th>8</th>\n"",
       ""      <td>Ritual Skull</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>9</th>\n"",
       ""      <td>Rag and Bone Crates</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""      <td>12.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>10</th>\n"",
       ""      <td>Ashen Tome</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>11</th>\n"",
       ""      <td>Ashen Chest</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>12</th>\n"",
       ""      <td>Ashen Key</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""      <td>12.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>13</th>\n"",
       ""      <td>Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>14</th>\n"",
       ""      <td>Castaway's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>15</th>\n"",
       ""      <td>Marauder's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""      <td>1000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>16</th>\n"",
       ""      <td>Seafarer's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>200</td>\n"",
       ""      <td>500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>17</th>\n"",
       ""      <td>Chest of Rage</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3250</td>\n"",
       ""      <td>8125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>18</th>\n"",
       ""      <td>Chest of Sorrow</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>19</th>\n"",
       ""      <td>Chest of a Thousand Grogs</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>20</th>\n"",
       ""      <td>Chest of Ancient Tributes</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>21</th>\n"",
       ""      <td>Chest of the Damned</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>22</th>\n"",
       ""      <td>Skeleton Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>23</th>\n"",
       ""      <td>Stronghold Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>24</th>\n"",
       ""      <td>Bronze Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>25</th>\n"",
       ""      <td>Silver Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>225</td>\n"",
       ""      <td>562.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>26</th>\n"",
       ""      <td>Gold Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""      <td>1000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>27</th>\n"",
       ""      <td>Bejeweled (literally) Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>28</th>\n"",
       ""      <td>Devil's Roar Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1050</td>\n"",
       ""      <td>2625.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>29</th>\n"",
       ""      <td>Gold Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>30</th>\n"",
       ""      <td>Silver Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2250</td>\n"",
       ""      <td>5625.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>31</th>\n"",
       ""      <td>Stone Treasure Vault Keys</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>32</th>\n"",
       ""      <td>Animal Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>45</td>\n"",
       ""      <td>112.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>33</th>\n"",
       ""      <td>Kraken/Megalodon Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>450</td>\n"",
       ""      <td>1125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>34</th>\n"",
       ""      <td>Fish</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>35</th>\n"",
       ""      <td>Treacherous Plunder</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>36</th>\n"",
       ""      <td>Disgraced Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>200</td>\n"",
       ""      <td>500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>37</th>\n"",
       ""      <td>Foul Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>38</th>\n"",
       ""      <td>Hateful Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>500</td>\n"",
       ""      <td>1250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>39</th>\n"",
       ""      <td>Villainous Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>40</th>\n"",
       ""      <td>Ashen Skulls</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>41</th>\n"",
       ""      <td>Captain Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1750</td>\n"",
       ""      <td>4375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>42</th>\n"",
       ""      <td>Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>43</th>\n"",
       ""      <td>Ashen Winds Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>5000</td>\n"",
       ""      <td>12500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>44</th>\n"",
       ""      <td>Gold Hoarder's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>10000</td>\n"",
       ""      <td>25000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>45</th>\n"",
       ""      <td>Skeleton Captain's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>46</th>\n"",
       ""      <td>Stronghold Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>3250</td>\n"",
       ""      <td>8125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>47</th>\n"",
       ""      <td>Chicken</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>48</th>\n"",
       ""      <td>Pig</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>49</th>\n"",
       ""      <td>Snake</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>50</th>\n"",
       ""      <td>Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""      <td>375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>51</th>\n"",
       ""      <td>Stronghold Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>5000</td>\n"",
       ""      <td>12500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>52</th>\n"",
       ""      <td>Fruit Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>53</th>\n"",
       ""      <td>Cannonball Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>54</th>\n"",
       ""      <td>Wood Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>55</th>\n"",
       ""      <td>Cannonball Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>56</th>\n"",
       ""      <td>Storage Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>57</th>\n"",
       ""      <td>Ammo Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>250</td>\n"",
       ""      <td>625.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>58</th>\n"",
       ""      <td>Firebomb Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>59</th>\n"",
       ""      <td>Storage Crate</td>\n"",
       ""      <td>NaN</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>60</th>\n"",
       ""      <td>Ashes of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>61</th>\n"",
       ""      <td>Crate of Ancient Bone Dust</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>62</th>\n"",
       ""      <td>Crate of Exotic Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>500</td>\n"",
       ""      <td>1250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>63</th>\n"",
       ""      <td>Crate of Exquisite Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>64</th>\n"",
       ""      <td>Crate of Extraordinary Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>65</th>\n"",
       ""      <td>Crate of Fine Ore</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>66</th>\n"",
       ""      <td>Crate of Fine Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""      <td>375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>67</th>\n"",
       ""      <td>Crate of Precious Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""      <td>7500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>68</th>\n"",
       ""      <td>Crate of Rare Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>300</td>\n"",
       ""      <td>750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>69</th>\n"",
       ""      <td>Crate of Volcanic Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>70</th>\n"",
       ""      <td>Crate of Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>71</th>\n"",
       ""      <td>Create of Devil's Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>72</th>\n"",
       ""      <td>Crate of Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>73</th>\n"",
       ""      <td>Crate of Devil's Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>74</th>\n"",
       ""      <td>Crate of Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>75</th>\n"",
       ""      <td>Crate of Devil's Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>76</th>\n"",
       ""      <td>Assorted Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""      <td>10000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>77</th>\n"",
       ""      <td>Broken Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>78</th>\n"",
       ""      <td>Raw Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>79</th>\n"",
       ""      <td>Unfiltered Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""      <td>10000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>80</th>\n"",
       ""      <td>Unprocessed Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>81</th>\n"",
       ""      <td>Unrefined Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>82</th>\n"",
       ""      <td>Unsorted Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""      <td>7500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>83</th>\n"",
       ""      <td>Emerald Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>84</th>\n"",
       ""      <td>Ruby Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>85</th>\n"",
       ""      <td>Sapphire Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""    </tr>\n"",
       ""  </tbody>\n"",
       ""</table>\n"",
       ""</div>""
      ],
      ""text/plain"": [
       ""                               Loot  \\\n"",
       ""8                      Ritual Skull   \n"",
       ""9               Rag and Bone Crates   \n"",
       ""10                       Ashen Tome   \n"",
       ""11                      Ashen Chest   \n"",
       ""12                        Ashen Key   \n"",
       ""13                  Captain's Chest   \n"",
       ""14                 Castaway's Chest   \n"",
       ""15                 Marauder's Chest   \n"",
       ""16                 Seafarer's Chest   \n"",
       ""17                    Chest of Rage   \n"",
       ""18                  Chest of Sorrow   \n"",
       ""19        Chest of a Thousand Grogs   \n"",
       ""20        Chest of Ancient Tributes   \n"",
       ""21              Chest of the Damned   \n"",
       ""22         Skeleton Captain's Chest   \n"",
       ""23                 Stronghold Chest   \n"",
       ""24                 Bronze Artifacts   \n"",
       ""25                 Silver Artifacts   \n"",
       ""26                   Gold Artifacts   \n"",
       ""27  Bejeweled (literally) Artifacts   \n"",
       ""28           Devil's Roar Artifacts   \n"",
       ""29          Gold Treasure Vault Key   \n"",
       ""30        Silver Treasure Vault Key   \n"",
       ""31        Stone Treasure Vault Keys   \n"",
       ""32                      Animal Meat   \n"",
       ""33            Kraken/Megalodon Meat   \n"",
       ""34                             Fish   \n"",
       ""35              Treacherous Plunder   \n"",
       ""36           Disgraced Bounty Skull   \n"",
       ""37                Foul Bounty Skull   \n"",
       ""38             Hateful Bounty Skull   \n"",
       ""39          Villainous Bounty Skull   \n"",
       ""40                     Ashen Skulls   \n"",
       ""41      Captain Skull of the Damned   \n"",
       ""42              Skull of the Damned   \n"",
       ""43                Ashen Winds Skull   \n"",
       ""44             Gold Hoarder's Skull   \n"",
       ""45         Skeleton Captain's Skull   \n"",
       ""46                 Stronghold Skull   \n"",
       ""47                          Chicken   \n"",
       ""48                              Pig   \n"",
       ""49                            Snake   \n"",
       ""50                 Gunpowder Barrel   \n"",
       ""51      Stronghold Gunpowder Barrel   \n"",
       ""52                      Fruit Crate   \n"",
       ""53                 Cannonball Crate   \n"",
       ""54                       Wood Crate   \n"",
       ""55   Cannonball Crate of the Damned   \n"",
       ""56      Storage Crate of the Damned   \n"",
       ""57                       Ammo Crate   \n"",
       ""58                   Firebomb Crate   \n"",
       ""59                    Storage Crate   \n"",
       ""60              Ashes of the Damned   \n"",
       ""61       Crate of Ancient Bone Dust   \n"",
       ""62            Crate of Exotic Silks   \n"",
       ""63        Crate of Exquisite Spices   \n"",
       ""64  Crate of Extraordinary Minerals   \n"",
       ""65                Crate of Fine Ore   \n"",
       ""66              Crate of Fine Sugar   \n"",
       ""67      Crate of Precious Gemstones   \n"",
       ""68                Crate of Rare Tea   \n"",
       ""69          Crate of Volcanic Stone   \n"",
       ""70                  Crate of Plants   \n"",
       ""71         Create of Devil's Plants   \n"",
       ""72                   Crate of Cloth   \n"",
       ""73           Crate of Devil's Cloth   \n"",
       ""74                     Crate of Rum   \n"",
       ""75             Crate of Devil's Rum   \n"",
       ""76               Assorted Gemstones   \n"",
       ""77                     Broken Stone   \n"",
       ""78                        Raw Sugar   \n"",
       ""79              Unfiltered Minerals   \n"",
       ""80                  Unprocessed Tea   \n"",
       ""81                 Unrefined Spices   \n"",
       ""82                   Unsorted Silks   \n"",
       ""83              Emerald Mermaid Gem   \n"",
       ""84                 Ruby Mermaid Gem   \n"",
       ""85             Sapphire Mermaid Gem   \n"",
       ""\n"",
       ""                        Best Emissary to Turn It Into  Base Value  \\\n"",
       ""8                                          Bilge Rats          10   \n"",
       ""9                                          Bilge Rats           5   \n"",
       ""10                                         Bilge Rats          10   \n"",
       ""11                                         Bilge Rats          10   \n"",
       ""12                                         Bilge Rats           5   \n"",
       ""13                                      Gold Hoarders        1000   \n"",
       ""14                                      Gold Hoarders         100   \n"",
       ""15                                      Gold Hoarders         400   \n"",
       ""16                                      Gold Hoarders         200   \n"",
       ""17                                      Gold Hoarders        3250   \n"",
       ""18                                      Gold Hoarders        3500   \n"",
       ""19                                      Gold Hoarders        2500   \n"",
       ""20                                      Gold Hoarders        3500   \n"",
       ""21                                      Gold Hoarders        1500   \n"",
       ""22                                      Gold Hoarders        1250   \n"",
       ""23                                      Gold Hoarders        2000   \n"",
       ""24                                      Gold Hoarders         100   \n"",
       ""25                                      Gold Hoarders         225   \n"",
       ""26                                      Gold Hoarders         400   \n"",
       ""27                                      Gold Hoarders         750   \n"",
       ""28                                      Gold Hoarders        1050   \n"",
       ""29                                      Gold Hoarders        3500   \n"",
       ""30                                      Gold Hoarders        2250   \n"",
       ""31                                      Gold Hoarders        1250   \n"",
       ""32                                  The Hunter's Call          45   \n"",
       ""33                                  The Hunter's Call         450   \n"",
       ""34                                  The Hunter's Call           0   \n"",
       ""35                                  The Hunter's Call          10   \n"",
       ""36                                     Order of Souls         200   \n"",
       ""37                                     Order of Souls         100   \n"",
       ""38                                     Order of Souls         500   \n"",
       ""39                                     Order of Souls        1000   \n"",
       ""40                                     Order of Souls           0   \n"",
       ""41                                     Order of Souls        1750   \n"",
       ""42                                     Order of Souls        1250   \n"",
       ""43                                     Order of Souls        5000   \n"",
       ""44                                     Order of Souls       10000   \n"",
       ""45                                     Order of Souls        1500   \n"",
       ""46                                     Order of Souls        3250   \n"",
       ""47  Merchant Alliance (but they must first be capt...         105   \n"",
       ""48  Merchant Alliance (but they must first be capt...         105   \n"",
       ""49  Merchant Alliance (but they must first be capt...         105   \n"",
       ""50                                  Merchant Alliance         150   \n"",
       ""51                                  Merchant Alliance        5000   \n"",
       ""52                                  Merchant Alliance         750   \n"",
       ""53                                  Merchant Alliance         750   \n"",
       ""54                                  Merchant Alliance         750   \n"",
       ""55                                  Merchant Alliance        1000   \n"",
       ""56                                  Merchant Alliance        1000   \n"",
       ""57                                  Merchant Alliance         250   \n"",
       ""58                                  Merchant Alliance        1500   \n"",
       ""59                                                NaN           0   \n"",
       ""60                                  Merchant Alliance        1250   \n"",
       ""61                                  Merchant Alliance        3500   \n"",
       ""62                                  Merchant Alliance         500   \n"",
       ""63                                  Merchant Alliance        1000   \n"",
       ""64                                  Merchant Alliance        1500   \n"",
       ""65                                  Merchant Alliance         750   \n"",
       ""66                                  Merchant Alliance         150   \n"",
       ""67                                  Merchant Alliance        3000   \n"",
       ""68                                  Merchant Alliance         300   \n"",
       ""69                                  Merchant Alliance        1500   \n"",
       ""70                                  Merchant Alliance         700   \n"",
       ""71                                  Merchant Alliance        1400   \n"",
       ""72                                  Merchant Alliance         700   \n"",
       ""73                                  Merchant Alliance        1400   \n"",
       ""74                                  Merchant Alliance         700   \n"",
       ""75                                  Merchant Alliance        1400   \n"",
       ""76                                  Merchant Alliance        4000   \n"",
       ""77                                  Merchant Alliance        2500   \n"",
       ""78                                  Merchant Alliance        2000   \n"",
       ""79                                  Merchant Alliance        4000   \n"",
       ""80                                  Merchant Alliance        2500   \n"",
       ""81                                  Merchant Alliance        3500   \n"",
       ""82                                  Merchant Alliance        3000   \n"",
       ""83                                      Gold Hoarders        1000   \n"",
       ""84                                      Gold Hoarders        2000   \n"",
       ""85                                      Gold Hoarders        1000   \n"",
       ""\n"",
       ""    Emissary 5 (High Sea only)  \n"",
       ""8                         25.0  \n"",
       ""9                         12.5  \n"",
       ""10                        25.0  \n"",
       ""11                        25.0  \n"",
       ""12                        12.5  \n"",
       ""13                      2500.0  \n"",
       ""14                       250.0  \n"",
       ""15                      1000.0  \n"",
       ""16                       500.0  \n"",
       ""17                      8125.0  \n"",
       ""18                      8750.0  \n"",
       ""19                      6250.0  \n"",
       ""20                      8750.0  \n"",
       ""21                      3750.0  \n"",
       ""22                      3125.0  \n"",
       ""23                      5000.0  \n"",
       ""24                       250.0  \n"",
       ""25                       562.5  \n"",
       ""26                      1000.0  \n"",
       ""27                      1875.0  \n"",
       ""28                      2625.0  \n"",
       ""29                      8750.0  \n"",
       ""30                      5625.0  \n"",
       ""31                      3125.0  \n"",
       ""32                       112.5  \n"",
       ""33                      1125.0  \n"",
       ""34                         0.0  \n"",
       ""35                        25.0  \n"",
       ""36                       500.0  \n"",
       ""37                       250.0  \n"",
       ""38                      1250.0  \n"",
       ""39                      2500.0  \n"",
       ""40                         0.0  \n"",
       ""41                      4375.0  \n"",
       ""42                      3125.0  \n"",
       ""43                     12500.0  \n"",
       ""44                     25000.0  \n"",
       ""45                      3750.0  \n"",
       ""46                      8125.0  \n"",
       ""47                       262.5  \n"",
       ""48                       262.5  \n"",
       ""49                       262.5  \n"",
       ""50                       375.0  \n"",
       ""51                     12500.0  \n"",
       ""52                      1875.0  \n"",
       ""53                      1875.0  \n"",
       ""54                      1875.0  \n"",
       ""55                      2500.0  \n"",
       ""56                      2500.0  \n"",
       ""57                       625.0  \n"",
       ""58                      3750.0  \n"",
       ""59                         0.0  \n"",
       ""60                      3125.0  \n"",
       ""61                      8750.0  \n"",
       ""62                      1250.0  \n"",
       ""63                      2500.0  \n"",
       ""64                      3750.0  \n"",
       ""65                      1875.0  \n"",
       ""66                       375.0  \n"",
       ""67                      7500.0  \n"",
       ""68                       750.0  \n"",
       ""69                      3750.0  \n"",
       ""70                      1750.0  \n"",
       ""71                      3500.0  \n"",
       ""72                      1750.0  \n"",
       ""73                      3500.0  \n"",
       ""74                      1750.0  \n"",
       ""75                      3500.0  \n"",
       ""76                     10000.0  \n"",
       ""77                      6250.0  \n"",
       ""78                      5000.0  \n"",
       ""79                     10000.0  \n"",
       ""80                      6250.0  \n"",
       ""81                      8750.0  \n"",
       ""82                      7500.0  \n"",
       ""83                      2500.0  \n"",
       ""84                      5000.0  \n"",
       ""85                      2500.0  ""
      ]
     },
     ""execution_count"": 80,
     ""metadata"": {},
     ""output_type"": ""execute_result""
    }
   ],
   ""source"": [
    ""# Calculate High Sea value with Emissary grave V flag hand-in\n"",
    ""\n"",
    ""df[\""Emissary 5 (High Sea only)\""] = df[\""Base Value\""] * 2.5\n"",
    ""df""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 81,
   ""id"": ""a1e06850-3e4e-4db3-94dd-94b8e0d5ea3f"",
   ""metadata"": {},
   ""outputs"": [
    {
     ""data"": {
      ""text/html"": [
       ""<div>\n"",
       ""<style scoped>\n"",
       ""    .dataframe tbody tr th:only-of-type {\n"",
       ""        vertical-align: middle;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe tbody tr th {\n"",
       ""        vertical-align: top;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe thead th {\n"",
       ""        text-align: right;\n"",
       ""    }\n"",
       ""</style>\n"",
       ""<table border=\""1\"" class=\""dataframe\"">\n"",
       ""  <thead>\n"",
       ""    <tr style=\""text-align: right;\"">\n"",
       ""      <th></th>\n"",
       ""      <th>Loot</th>\n"",
       ""      <th>Best Emissary to Turn It Into</th>\n"",
       ""      <th>Base Value</th>\n"",
       ""      <th>Emissary 5 (High Sea only)</th>\n"",
       ""      <th>No Emissary &amp; 30% penalty (Safer Seas)</th>\n"",
       ""    </tr>\n"",
       ""  </thead>\n"",
       ""  <tbody>\n"",
       ""    <tr>\n"",
       ""      <th>8</th>\n"",
       ""      <td>Ritual Skull</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>9</th>\n"",
       ""      <td>Rag and Bone Crates</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""      <td>12.5</td>\n"",
       ""      <td>1.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>10</th>\n"",
       ""      <td>Ashen Tome</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>11</th>\n"",
       ""      <td>Ashen Chest</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>12</th>\n"",
       ""      <td>Ashen Key</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""      <td>12.5</td>\n"",
       ""      <td>1.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>13</th>\n"",
       ""      <td>Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>14</th>\n"",
       ""      <td>Castaway's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""      <td>30.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>15</th>\n"",
       ""      <td>Marauder's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""      <td>1000.0</td>\n"",
       ""      <td>120.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>16</th>\n"",
       ""      <td>Seafarer's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>200</td>\n"",
       ""      <td>500.0</td>\n"",
       ""      <td>60.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>17</th>\n"",
       ""      <td>Chest of Rage</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3250</td>\n"",
       ""      <td>8125.0</td>\n"",
       ""      <td>975.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>18</th>\n"",
       ""      <td>Chest of Sorrow</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>19</th>\n"",
       ""      <td>Chest of a Thousand Grogs</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""      <td>750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>20</th>\n"",
       ""      <td>Chest of Ancient Tributes</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>21</th>\n"",
       ""      <td>Chest of the Damned</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>22</th>\n"",
       ""      <td>Skeleton Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>23</th>\n"",
       ""      <td>Stronghold Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""      <td>600.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>24</th>\n"",
       ""      <td>Bronze Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""      <td>30.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>25</th>\n"",
       ""      <td>Silver Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>225</td>\n"",
       ""      <td>562.5</td>\n"",
       ""      <td>67.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>26</th>\n"",
       ""      <td>Gold Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""      <td>1000.0</td>\n"",
       ""      <td>120.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>27</th>\n"",
       ""      <td>Bejeweled (literally) Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>28</th>\n"",
       ""      <td>Devil's Roar Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1050</td>\n"",
       ""      <td>2625.0</td>\n"",
       ""      <td>315.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>29</th>\n"",
       ""      <td>Gold Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>30</th>\n"",
       ""      <td>Silver Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2250</td>\n"",
       ""      <td>5625.0</td>\n"",
       ""      <td>675.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>31</th>\n"",
       ""      <td>Stone Treasure Vault Keys</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>32</th>\n"",
       ""      <td>Animal Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>45</td>\n"",
       ""      <td>112.5</td>\n"",
       ""      <td>13.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>33</th>\n"",
       ""      <td>Kraken/Megalodon Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>450</td>\n"",
       ""      <td>1125.0</td>\n"",
       ""      <td>135.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>34</th>\n"",
       ""      <td>Fish</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>35</th>\n"",
       ""      <td>Treacherous Plunder</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>36</th>\n"",
       ""      <td>Disgraced Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>200</td>\n"",
       ""      <td>500.0</td>\n"",
       ""      <td>60.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>37</th>\n"",
       ""      <td>Foul Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""      <td>30.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>38</th>\n"",
       ""      <td>Hateful Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>500</td>\n"",
       ""      <td>1250.0</td>\n"",
       ""      <td>150.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>39</th>\n"",
       ""      <td>Villainous Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>40</th>\n"",
       ""      <td>Ashen Skulls</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>41</th>\n"",
       ""      <td>Captain Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1750</td>\n"",
       ""      <td>4375.0</td>\n"",
       ""      <td>525.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>42</th>\n"",
       ""      <td>Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>43</th>\n"",
       ""      <td>Ashen Winds Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>5000</td>\n"",
       ""      <td>12500.0</td>\n"",
       ""      <td>1500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>44</th>\n"",
       ""      <td>Gold Hoarder's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>10000</td>\n"",
       ""      <td>25000.0</td>\n"",
       ""      <td>3000.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>45</th>\n"",
       ""      <td>Skeleton Captain's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>46</th>\n"",
       ""      <td>Stronghold Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>3250</td>\n"",
       ""      <td>8125.0</td>\n"",
       ""      <td>975.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>47</th>\n"",
       ""      <td>Chicken</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""      <td>31.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>48</th>\n"",
       ""      <td>Pig</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""      <td>31.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>49</th>\n"",
       ""      <td>Snake</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""      <td>31.5</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>50</th>\n"",
       ""      <td>Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>45.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>51</th>\n"",
       ""      <td>Stronghold Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>5000</td>\n"",
       ""      <td>12500.0</td>\n"",
       ""      <td>1500.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>52</th>\n"",
       ""      <td>Fruit Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>53</th>\n"",
       ""      <td>Cannonball Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>54</th>\n"",
       ""      <td>Wood Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>55</th>\n"",
       ""      <td>Cannonball Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>56</th>\n"",
       ""      <td>Storage Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>57</th>\n"",
       ""      <td>Ammo Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>250</td>\n"",
       ""      <td>625.0</td>\n"",
       ""      <td>75.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>58</th>\n"",
       ""      <td>Firebomb Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>59</th>\n"",
       ""      <td>Storage Crate</td>\n"",
       ""      <td>NaN</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>60</th>\n"",
       ""      <td>Ashes of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>61</th>\n"",
       ""      <td>Crate of Ancient Bone Dust</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>62</th>\n"",
       ""      <td>Crate of Exotic Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>500</td>\n"",
       ""      <td>1250.0</td>\n"",
       ""      <td>150.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>63</th>\n"",
       ""      <td>Crate of Exquisite Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>64</th>\n"",
       ""      <td>Crate of Extraordinary Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>65</th>\n"",
       ""      <td>Crate of Fine Ore</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>66</th>\n"",
       ""      <td>Crate of Fine Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>45.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>67</th>\n"",
       ""      <td>Crate of Precious Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""      <td>7500.0</td>\n"",
       ""      <td>900.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>68</th>\n"",
       ""      <td>Crate of Rare Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>300</td>\n"",
       ""      <td>750.0</td>\n"",
       ""      <td>90.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>69</th>\n"",
       ""      <td>Crate of Volcanic Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>70</th>\n"",
       ""      <td>Crate of Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""      <td>210.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>71</th>\n"",
       ""      <td>Create of Devil's Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""      <td>420.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>72</th>\n"",
       ""      <td>Crate of Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""      <td>210.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>73</th>\n"",
       ""      <td>Crate of Devil's Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""      <td>420.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>74</th>\n"",
       ""      <td>Crate of Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""      <td>210.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>75</th>\n"",
       ""      <td>Crate of Devil's Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""      <td>420.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>76</th>\n"",
       ""      <td>Assorted Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""      <td>10000.0</td>\n"",
       ""      <td>1200.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>77</th>\n"",
       ""      <td>Broken Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""      <td>750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>78</th>\n"",
       ""      <td>Raw Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""      <td>600.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>79</th>\n"",
       ""      <td>Unfiltered Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""      <td>10000.0</td>\n"",
       ""      <td>1200.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>80</th>\n"",
       ""      <td>Unprocessed Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""      <td>750.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>81</th>\n"",
       ""      <td>Unrefined Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>82</th>\n"",
       ""      <td>Unsorted Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""      <td>7500.0</td>\n"",
       ""      <td>900.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>83</th>\n"",
       ""      <td>Emerald Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>84</th>\n"",
       ""      <td>Ruby Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""      <td>600.0</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>85</th>\n"",
       ""      <td>Sapphire Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""    </tr>\n"",
       ""  </tbody>\n"",
       ""</table>\n"",
       ""</div>""
      ],
      ""text/plain"": [
       ""                               Loot  \\\n"",
       ""8                      Ritual Skull   \n"",
       ""9               Rag and Bone Crates   \n"",
       ""10                       Ashen Tome   \n"",
       ""11                      Ashen Chest   \n"",
       ""12                        Ashen Key   \n"",
       ""13                  Captain's Chest   \n"",
       ""14                 Castaway's Chest   \n"",
       ""15                 Marauder's Chest   \n"",
       ""16                 Seafarer's Chest   \n"",
       ""17                    Chest of Rage   \n"",
       ""18                  Chest of Sorrow   \n"",
       ""19        Chest of a Thousand Grogs   \n"",
       ""20        Chest of Ancient Tributes   \n"",
       ""21              Chest of the Damned   \n"",
       ""22         Skeleton Captain's Chest   \n"",
       ""23                 Stronghold Chest   \n"",
       ""24                 Bronze Artifacts   \n"",
       ""25                 Silver Artifacts   \n"",
       ""26                   Gold Artifacts   \n"",
       ""27  Bejeweled (literally) Artifacts   \n"",
       ""28           Devil's Roar Artifacts   \n"",
       ""29          Gold Treasure Vault Key   \n"",
       ""30        Silver Treasure Vault Key   \n"",
       ""31        Stone Treasure Vault Keys   \n"",
       ""32                      Animal Meat   \n"",
       ""33            Kraken/Megalodon Meat   \n"",
       ""34                             Fish   \n"",
       ""35              Treacherous Plunder   \n"",
       ""36           Disgraced Bounty Skull   \n"",
       ""37                Foul Bounty Skull   \n"",
       ""38             Hateful Bounty Skull   \n"",
       ""39          Villainous Bounty Skull   \n"",
       ""40                     Ashen Skulls   \n"",
       ""41      Captain Skull of the Damned   \n"",
       ""42              Skull of the Damned   \n"",
       ""43                Ashen Winds Skull   \n"",
       ""44             Gold Hoarder's Skull   \n"",
       ""45         Skeleton Captain's Skull   \n"",
       ""46                 Stronghold Skull   \n"",
       ""47                          Chicken   \n"",
       ""48                              Pig   \n"",
       ""49                            Snake   \n"",
       ""50                 Gunpowder Barrel   \n"",
       ""51      Stronghold Gunpowder Barrel   \n"",
       ""52                      Fruit Crate   \n"",
       ""53                 Cannonball Crate   \n"",
       ""54                       Wood Crate   \n"",
       ""55   Cannonball Crate of the Damned   \n"",
       ""56      Storage Crate of the Damned   \n"",
       ""57                       Ammo Crate   \n"",
       ""58                   Firebomb Crate   \n"",
       ""59                    Storage Crate   \n"",
       ""60              Ashes of the Damned   \n"",
       ""61       Crate of Ancient Bone Dust   \n"",
       ""62            Crate of Exotic Silks   \n"",
       ""63        Crate of Exquisite Spices   \n"",
       ""64  Crate of Extraordinary Minerals   \n"",
       ""65                Crate of Fine Ore   \n"",
       ""66              Crate of Fine Sugar   \n"",
       ""67      Crate of Precious Gemstones   \n"",
       ""68                Crate of Rare Tea   \n"",
       ""69          Crate of Volcanic Stone   \n"",
       ""70                  Crate of Plants   \n"",
       ""71         Create of Devil's Plants   \n"",
       ""72                   Crate of Cloth   \n"",
       ""73           Crate of Devil's Cloth   \n"",
       ""74                     Crate of Rum   \n"",
       ""75             Crate of Devil's Rum   \n"",
       ""76               Assorted Gemstones   \n"",
       ""77                     Broken Stone   \n"",
       ""78                        Raw Sugar   \n"",
       ""79              Unfiltered Minerals   \n"",
       ""80                  Unprocessed Tea   \n"",
       ""81                 Unrefined Spices   \n"",
       ""82                   Unsorted Silks   \n"",
       ""83              Emerald Mermaid Gem   \n"",
       ""84                 Ruby Mermaid Gem   \n"",
       ""85             Sapphire Mermaid Gem   \n"",
       ""\n"",
       ""                        Best Emissary to Turn It Into  Base Value  \\\n"",
       ""8                                          Bilge Rats          10   \n"",
       ""9                                          Bilge Rats           5   \n"",
       ""10                                         Bilge Rats          10   \n"",
       ""11                                         Bilge Rats          10   \n"",
       ""12                                         Bilge Rats           5   \n"",
       ""13                                      Gold Hoarders        1000   \n"",
       ""14                                      Gold Hoarders         100   \n"",
       ""15                                      Gold Hoarders         400   \n"",
       ""16                                      Gold Hoarders         200   \n"",
       ""17                                      Gold Hoarders        3250   \n"",
       ""18                                      Gold Hoarders        3500   \n"",
       ""19                                      Gold Hoarders        2500   \n"",
       ""20                                      Gold Hoarders        3500   \n"",
       ""21                                      Gold Hoarders        1500   \n"",
       ""22                                      Gold Hoarders        1250   \n"",
       ""23                                      Gold Hoarders        2000   \n"",
       ""24                                      Gold Hoarders         100   \n"",
       ""25                                      Gold Hoarders         225   \n"",
       ""26                                      Gold Hoarders         400   \n"",
       ""27                                      Gold Hoarders         750   \n"",
       ""28                                      Gold Hoarders        1050   \n"",
       ""29                                      Gold Hoarders        3500   \n"",
       ""30                                      Gold Hoarders        2250   \n"",
       ""31                                      Gold Hoarders        1250   \n"",
       ""32                                  The Hunter's Call          45   \n"",
       ""33                                  The Hunter's Call         450   \n"",
       ""34                                  The Hunter's Call           0   \n"",
       ""35                                  The Hunter's Call          10   \n"",
       ""36                                     Order of Souls         200   \n"",
       ""37                                     Order of Souls         100   \n"",
       ""38                                     Order of Souls         500   \n"",
       ""39                                     Order of Souls        1000   \n"",
       ""40                                     Order of Souls           0   \n"",
       ""41                                     Order of Souls        1750   \n"",
       ""42                                     Order of Souls        1250   \n"",
       ""43                                     Order of Souls        5000   \n"",
       ""44                                     Order of Souls       10000   \n"",
       ""45                                     Order of Souls        1500   \n"",
       ""46                                     Order of Souls        3250   \n"",
       ""47  Merchant Alliance (but they must first be capt...         105   \n"",
       ""48  Merchant Alliance (but they must first be capt...         105   \n"",
       ""49  Merchant Alliance (but they must first be capt...         105   \n"",
       ""50                                  Merchant Alliance         150   \n"",
       ""51                                  Merchant Alliance        5000   \n"",
       ""52                                  Merchant Alliance         750   \n"",
       ""53                                  Merchant Alliance         750   \n"",
       ""54                                  Merchant Alliance         750   \n"",
       ""55                                  Merchant Alliance        1000   \n"",
       ""56                                  Merchant Alliance        1000   \n"",
       ""57                                  Merchant Alliance         250   \n"",
       ""58                                  Merchant Alliance        1500   \n"",
       ""59                                                NaN           0   \n"",
       ""60                                  Merchant Alliance        1250   \n"",
       ""61                                  Merchant Alliance        3500   \n"",
       ""62                                  Merchant Alliance         500   \n"",
       ""63                                  Merchant Alliance        1000   \n"",
       ""64                                  Merchant Alliance        1500   \n"",
       ""65                                  Merchant Alliance         750   \n"",
       ""66                                  Merchant Alliance         150   \n"",
       ""67                                  Merchant Alliance        3000   \n"",
       ""68                                  Merchant Alliance         300   \n"",
       ""69                                  Merchant Alliance        1500   \n"",
       ""70                                  Merchant Alliance         700   \n"",
       ""71                                  Merchant Alliance        1400   \n"",
       ""72                                  Merchant Alliance         700   \n"",
       ""73                                  Merchant Alliance        1400   \n"",
       ""74                                  Merchant Alliance         700   \n"",
       ""75                                  Merchant Alliance        1400   \n"",
       ""76                                  Merchant Alliance        4000   \n"",
       ""77                                  Merchant Alliance        2500   \n"",
       ""78                                  Merchant Alliance        2000   \n"",
       ""79                                  Merchant Alliance        4000   \n"",
       ""80                                  Merchant Alliance        2500   \n"",
       ""81                                  Merchant Alliance        3500   \n"",
       ""82                                  Merchant Alliance        3000   \n"",
       ""83                                      Gold Hoarders        1000   \n"",
       ""84                                      Gold Hoarders        2000   \n"",
       ""85                                      Gold Hoarders        1000   \n"",
       ""\n"",
       ""    Emissary 5 (High Sea only)  No Emissary & 30% penalty (Safer Seas)  \n"",
       ""8                         25.0                                     3.0  \n"",
       ""9                         12.5                                     1.5  \n"",
       ""10                        25.0                                     3.0  \n"",
       ""11                        25.0                                     3.0  \n"",
       ""12                        12.5                                     1.5  \n"",
       ""13                      2500.0                                   300.0  \n"",
       ""14                       250.0                                    30.0  \n"",
       ""15                      1000.0                                   120.0  \n"",
       ""16                       500.0                                    60.0  \n"",
       ""17                      8125.0                                   975.0  \n"",
       ""18                      8750.0                                  1050.0  \n"",
       ""19                      6250.0                                   750.0  \n"",
       ""20                      8750.0                                  1050.0  \n"",
       ""21                      3750.0                                   450.0  \n"",
       ""22                      3125.0                                   375.0  \n"",
       ""23                      5000.0                                   600.0  \n"",
       ""24                       250.0                                    30.0  \n"",
       ""25                       562.5                                    67.5  \n"",
       ""26                      1000.0                                   120.0  \n"",
       ""27                      1875.0                                   225.0  \n"",
       ""28                      2625.0                                   315.0  \n"",
       ""29                      8750.0                                  1050.0  \n"",
       ""30                      5625.0                                   675.0  \n"",
       ""31                      3125.0                                   375.0  \n"",
       ""32                       112.5                                    13.5  \n"",
       ""33                      1125.0                                   135.0  \n"",
       ""34                         0.0                                     0.0  \n"",
       ""35                        25.0                                     3.0  \n"",
       ""36                       500.0                                    60.0  \n"",
       ""37                       250.0                                    30.0  \n"",
       ""38                      1250.0                                   150.0  \n"",
       ""39                      2500.0                                   300.0  \n"",
       ""40                         0.0                                     0.0  \n"",
       ""41                      4375.0                                   525.0  \n"",
       ""42                      3125.0                                   375.0  \n"",
       ""43                     12500.0                                  1500.0  \n"",
       ""44                     25000.0                                  3000.0  \n"",
       ""45                      3750.0                                   450.0  \n"",
       ""46                      8125.0                                   975.0  \n"",
       ""47                       262.5                                    31.5  \n"",
       ""48                       262.5                                    31.5  \n"",
       ""49                       262.5                                    31.5  \n"",
       ""50                       375.0                                    45.0  \n"",
       ""51                     12500.0                                  1500.0  \n"",
       ""52                      1875.0                                   225.0  \n"",
       ""53                      1875.0                                   225.0  \n"",
       ""54                      1875.0                                   225.0  \n"",
       ""55                      2500.0                                   300.0  \n"",
       ""56                      2500.0                                   300.0  \n"",
       ""57                       625.0                                    75.0  \n"",
       ""58                      3750.0                                   450.0  \n"",
       ""59                         0.0                                     0.0  \n"",
       ""60                      3125.0                                   375.0  \n"",
       ""61                      8750.0                                  1050.0  \n"",
       ""62                      1250.0                                   150.0  \n"",
       ""63                      2500.0                                   300.0  \n"",
       ""64                      3750.0                                   450.0  \n"",
       ""65                      1875.0                                   225.0  \n"",
       ""66                       375.0                                    45.0  \n"",
       ""67                      7500.0                                   900.0  \n"",
       ""68                       750.0                                    90.0  \n"",
       ""69                      3750.0                                   450.0  \n"",
       ""70                      1750.0                                   210.0  \n"",
       ""71                      3500.0                                   420.0  \n"",
       ""72                      1750.0                                   210.0  \n"",
       ""73                      3500.0                                   420.0  \n"",
       ""74                      1750.0                                   210.0  \n"",
       ""75                      3500.0                                   420.0  \n"",
       ""76                     10000.0                                  1200.0  \n"",
       ""77                      6250.0                                   750.0  \n"",
       ""78                      5000.0                                   600.0  \n"",
       ""79                     10000.0                                  1200.0  \n"",
       ""80                      6250.0                                   750.0  \n"",
       ""81                      8750.0                                  1050.0  \n"",
       ""82                      7500.0                                   900.0  \n"",
       ""83                      2500.0                                   300.0  \n"",
       ""84                      5000.0                                   600.0  \n"",
       ""85                      2500.0                                   300.0  ""
      ]
     },
     ""execution_count"": 81,
     ""metadata"": {},
     ""output_type"": ""execute_result""
    }
   ],
   ""source"": [
    ""# Calculate Safer Seas with no emissary and -70% penalty\n"",
    ""\n"",
    ""df[\""No Emissary & 30% penalty (Safer Seas)\""] = df[\""Base Value\""] * 0.3 \n"",
    ""df""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 82,
   ""id"": ""7950f537-8388-415b-b061-956b683f3586"",
   ""metadata"": {},
   ""outputs"": [
    {
     ""data"": {
      ""text/html"": [
       ""<div>\n"",
       ""<style scoped>\n"",
       ""    .dataframe tbody tr th:only-of-type {\n"",
       ""        vertical-align: middle;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe tbody tr th {\n"",
       ""        vertical-align: top;\n"",
       ""    }\n"",
       ""\n"",
       ""    .dataframe thead th {\n"",
       ""        text-align: right;\n"",
       ""    }\n"",
       ""</style>\n"",
       ""<table border=\""1\"" class=\""dataframe\"">\n"",
       ""  <thead>\n"",
       ""    <tr style=\""text-align: right;\"">\n"",
       ""      <th></th>\n"",
       ""      <th>Loot</th>\n"",
       ""      <th>Best Emissary to Turn It Into</th>\n"",
       ""      <th>Base Value</th>\n"",
       ""      <th>Emissary 5 (High Sea only)</th>\n"",
       ""      <th>No Emissary &amp; 30% penalty (Safer Seas)</th>\n"",
       ""      <th>Difference</th>\n"",
       ""    </tr>\n"",
       ""  </thead>\n"",
       ""  <tbody>\n"",
       ""    <tr>\n"",
       ""      <th>8</th>\n"",
       ""      <td>Ritual Skull</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>9</th>\n"",
       ""      <td>Rag and Bone Crates</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""      <td>12.5</td>\n"",
       ""      <td>1.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>10</th>\n"",
       ""      <td>Ashen Tome</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>11</th>\n"",
       ""      <td>Ashen Chest</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>12</th>\n"",
       ""      <td>Ashen Key</td>\n"",
       ""      <td>Bilge Rats</td>\n"",
       ""      <td>5</td>\n"",
       ""      <td>12.5</td>\n"",
       ""      <td>1.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>13</th>\n"",
       ""      <td>Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>14</th>\n"",
       ""      <td>Castaway's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""      <td>30.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>15</th>\n"",
       ""      <td>Marauder's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""      <td>1000.0</td>\n"",
       ""      <td>120.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>16</th>\n"",
       ""      <td>Seafarer's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>200</td>\n"",
       ""      <td>500.0</td>\n"",
       ""      <td>60.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>17</th>\n"",
       ""      <td>Chest of Rage</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3250</td>\n"",
       ""      <td>8125.0</td>\n"",
       ""      <td>975.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>18</th>\n"",
       ""      <td>Chest of Sorrow</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>19</th>\n"",
       ""      <td>Chest of a Thousand Grogs</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""      <td>750.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>20</th>\n"",
       ""      <td>Chest of Ancient Tributes</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>21</th>\n"",
       ""      <td>Chest of the Damned</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>22</th>\n"",
       ""      <td>Skeleton Captain's Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>23</th>\n"",
       ""      <td>Stronghold Chest</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""      <td>600.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>24</th>\n"",
       ""      <td>Bronze Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""      <td>30.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>25</th>\n"",
       ""      <td>Silver Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>225</td>\n"",
       ""      <td>562.5</td>\n"",
       ""      <td>67.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>26</th>\n"",
       ""      <td>Gold Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>400</td>\n"",
       ""      <td>1000.0</td>\n"",
       ""      <td>120.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>27</th>\n"",
       ""      <td>Bejeweled (literally) Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>28</th>\n"",
       ""      <td>Devil's Roar Artifacts</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1050</td>\n"",
       ""      <td>2625.0</td>\n"",
       ""      <td>315.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>29</th>\n"",
       ""      <td>Gold Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>30</th>\n"",
       ""      <td>Silver Treasure Vault Key</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2250</td>\n"",
       ""      <td>5625.0</td>\n"",
       ""      <td>675.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>31</th>\n"",
       ""      <td>Stone Treasure Vault Keys</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>32</th>\n"",
       ""      <td>Animal Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>45</td>\n"",
       ""      <td>112.5</td>\n"",
       ""      <td>13.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>33</th>\n"",
       ""      <td>Kraken/Megalodon Meat</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>450</td>\n"",
       ""      <td>1125.0</td>\n"",
       ""      <td>135.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>34</th>\n"",
       ""      <td>Fish</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>NaN</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>35</th>\n"",
       ""      <td>Treacherous Plunder</td>\n"",
       ""      <td>The Hunter's Call</td>\n"",
       ""      <td>10</td>\n"",
       ""      <td>25.0</td>\n"",
       ""      <td>3.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>36</th>\n"",
       ""      <td>Disgraced Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>200</td>\n"",
       ""      <td>500.0</td>\n"",
       ""      <td>60.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>37</th>\n"",
       ""      <td>Foul Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>100</td>\n"",
       ""      <td>250.0</td>\n"",
       ""      <td>30.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>38</th>\n"",
       ""      <td>Hateful Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>500</td>\n"",
       ""      <td>1250.0</td>\n"",
       ""      <td>150.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>39</th>\n"",
       ""      <td>Villainous Bounty Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>40</th>\n"",
       ""      <td>Ashen Skulls</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>NaN</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>41</th>\n"",
       ""      <td>Captain Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1750</td>\n"",
       ""      <td>4375.0</td>\n"",
       ""      <td>525.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>42</th>\n"",
       ""      <td>Skull of the Damned</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>43</th>\n"",
       ""      <td>Ashen Winds Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>5000</td>\n"",
       ""      <td>12500.0</td>\n"",
       ""      <td>1500.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>44</th>\n"",
       ""      <td>Gold Hoarder's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>10000</td>\n"",
       ""      <td>25000.0</td>\n"",
       ""      <td>3000.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>45</th>\n"",
       ""      <td>Skeleton Captain's Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>46</th>\n"",
       ""      <td>Stronghold Skull</td>\n"",
       ""      <td>Order of Souls</td>\n"",
       ""      <td>3250</td>\n"",
       ""      <td>8125.0</td>\n"",
       ""      <td>975.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>47</th>\n"",
       ""      <td>Chicken</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""      <td>31.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>48</th>\n"",
       ""      <td>Pig</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""      <td>31.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>49</th>\n"",
       ""      <td>Snake</td>\n"",
       ""      <td>Merchant Alliance (but they must first be capt...</td>\n"",
       ""      <td>105</td>\n"",
       ""      <td>262.5</td>\n"",
       ""      <td>31.5</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>50</th>\n"",
       ""      <td>Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>45.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>51</th>\n"",
       ""      <td>Stronghold Gunpowder Barrel</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>5000</td>\n"",
       ""      <td>12500.0</td>\n"",
       ""      <td>1500.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>52</th>\n"",
       ""      <td>Fruit Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>53</th>\n"",
       ""      <td>Cannonball Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>54</th>\n"",
       ""      <td>Wood Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>55</th>\n"",
       ""      <td>Cannonball Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>56</th>\n"",
       ""      <td>Storage Crate of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>57</th>\n"",
       ""      <td>Ammo Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>250</td>\n"",
       ""      <td>625.0</td>\n"",
       ""      <td>75.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>58</th>\n"",
       ""      <td>Firebomb Crate</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>59</th>\n"",
       ""      <td>Storage Crate</td>\n"",
       ""      <td>NaN</td>\n"",
       ""      <td>0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>0.0</td>\n"",
       ""      <td>NaN</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>60</th>\n"",
       ""      <td>Ashes of the Damned</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1250</td>\n"",
       ""      <td>3125.0</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>61</th>\n"",
       ""      <td>Crate of Ancient Bone Dust</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>62</th>\n"",
       ""      <td>Crate of Exotic Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>500</td>\n"",
       ""      <td>1250.0</td>\n"",
       ""      <td>150.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>63</th>\n"",
       ""      <td>Crate of Exquisite Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>64</th>\n"",
       ""      <td>Crate of Extraordinary Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>65</th>\n"",
       ""      <td>Crate of Fine Ore</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>750</td>\n"",
       ""      <td>1875.0</td>\n"",
       ""      <td>225.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>66</th>\n"",
       ""      <td>Crate of Fine Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>150</td>\n"",
       ""      <td>375.0</td>\n"",
       ""      <td>45.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>67</th>\n"",
       ""      <td>Crate of Precious Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""      <td>7500.0</td>\n"",
       ""      <td>900.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>68</th>\n"",
       ""      <td>Crate of Rare Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>300</td>\n"",
       ""      <td>750.0</td>\n"",
       ""      <td>90.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>69</th>\n"",
       ""      <td>Crate of Volcanic Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1500</td>\n"",
       ""      <td>3750.0</td>\n"",
       ""      <td>450.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>70</th>\n"",
       ""      <td>Crate of Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""      <td>210.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>71</th>\n"",
       ""      <td>Create of Devil's Plants</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""      <td>420.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>72</th>\n"",
       ""      <td>Crate of Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""      <td>210.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>73</th>\n"",
       ""      <td>Crate of Devil's Cloth</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""      <td>420.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>74</th>\n"",
       ""      <td>Crate of Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>700</td>\n"",
       ""      <td>1750.0</td>\n"",
       ""      <td>210.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>75</th>\n"",
       ""      <td>Crate of Devil's Rum</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>1400</td>\n"",
       ""      <td>3500.0</td>\n"",
       ""      <td>420.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>76</th>\n"",
       ""      <td>Assorted Gemstones</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""      <td>10000.0</td>\n"",
       ""      <td>1200.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>77</th>\n"",
       ""      <td>Broken Stone</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""      <td>750.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>78</th>\n"",
       ""      <td>Raw Sugar</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""      <td>600.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>79</th>\n"",
       ""      <td>Unfiltered Minerals</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>4000</td>\n"",
       ""      <td>10000.0</td>\n"",
       ""      <td>1200.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>80</th>\n"",
       ""      <td>Unprocessed Tea</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>2500</td>\n"",
       ""      <td>6250.0</td>\n"",
       ""      <td>750.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>81</th>\n"",
       ""      <td>Unrefined Spices</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3500</td>\n"",
       ""      <td>8750.0</td>\n"",
       ""      <td>1050.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>82</th>\n"",
       ""      <td>Unsorted Silks</td>\n"",
       ""      <td>Merchant Alliance</td>\n"",
       ""      <td>3000</td>\n"",
       ""      <td>7500.0</td>\n"",
       ""      <td>900.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>83</th>\n"",
       ""      <td>Emerald Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>84</th>\n"",
       ""      <td>Ruby Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>2000</td>\n"",
       ""      <td>5000.0</td>\n"",
       ""      <td>600.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""    <tr>\n"",
       ""      <th>85</th>\n"",
       ""      <td>Sapphire Mermaid Gem</td>\n"",
       ""      <td>Gold Hoarders</td>\n"",
       ""      <td>1000</td>\n"",
       ""      <td>2500.0</td>\n"",
       ""      <td>300.0</td>\n"",
       ""      <td>0.12</td>\n"",
       ""    </tr>\n"",
       ""  </tbody>\n"",
       ""</table>\n"",
       ""</div>""
      ],
      ""text/plain"": [
       ""                               Loot  \\\n"",
       ""8                      Ritual Skull   \n"",
       ""9               Rag and Bone Crates   \n"",
       ""10                       Ashen Tome   \n"",
       ""11                      Ashen Chest   \n"",
       ""12                        Ashen Key   \n"",
       ""13                  Captain's Chest   \n"",
       ""14                 Castaway's Chest   \n"",
       ""15                 Marauder's Chest   \n"",
       ""16                 Seafarer's Chest   \n"",
       ""17                    Chest of Rage   \n"",
       ""18                  Chest of Sorrow   \n"",
       ""19        Chest of a Thousand Grogs   \n"",
       ""20        Chest of Ancient Tributes   \n"",
       ""21              Chest of the Damned   \n"",
       ""22         Skeleton Captain's Chest   \n"",
       ""23                 Stronghold Chest   \n"",
       ""24                 Bronze Artifacts   \n"",
       ""25                 Silver Artifacts   \n"",
       ""26                   Gold Artifacts   \n"",
       ""27  Bejeweled (literally) Artifacts   \n"",
       ""28           Devil's Roar Artifacts   \n"",
       ""29          Gold Treasure Vault Key   \n"",
       ""30        Silver Treasure Vault Key   \n"",
       ""31        Stone Treasure Vault Keys   \n"",
       ""32                      Animal Meat   \n"",
       ""33            Kraken/Megalodon Meat   \n"",
       ""34                             Fish   \n"",
       ""35              Treacherous Plunder   \n"",
       ""36           Disgraced Bounty Skull   \n"",
       ""37                Foul Bounty Skull   \n"",
       ""38             Hateful Bounty Skull   \n"",
       ""39          Villainous Bounty Skull   \n"",
       ""40                     Ashen Skulls   \n"",
       ""41      Captain Skull of the Damned   \n"",
       ""42              Skull of the Damned   \n"",
       ""43                Ashen Winds Skull   \n"",
       ""44             Gold Hoarder's Skull   \n"",
       ""45         Skeleton Captain's Skull   \n"",
       ""46                 Stronghold Skull   \n"",
       ""47                          Chicken   \n"",
       ""48                              Pig   \n"",
       ""49                            Snake   \n"",
       ""50                 Gunpowder Barrel   \n"",
       ""51      Stronghold Gunpowder Barrel   \n"",
       ""52                      Fruit Crate   \n"",
       ""53                 Cannonball Crate   \n"",
       ""54                       Wood Crate   \n"",
       ""55   Cannonball Crate of the Damned   \n"",
       ""56      Storage Crate of the Damned   \n"",
       ""57                       Ammo Crate   \n"",
       ""58                   Firebomb Crate   \n"",
       ""59                    Storage Crate   \n"",
       ""60              Ashes of the Damned   \n"",
       ""61       Crate of Ancient Bone Dust   \n"",
       ""62            Crate of Exotic Silks   \n"",
       ""63        Crate of Exquisite Spices   \n"",
       ""64  Crate of Extraordinary Minerals   \n"",
       ""65                Crate of Fine Ore   \n"",
       ""66              Crate of Fine Sugar   \n"",
       ""67      Crate of Precious Gemstones   \n"",
       ""68                Crate of Rare Tea   \n"",
       ""69          Crate of Volcanic Stone   \n"",
       ""70                  Crate of Plants   \n"",
       ""71         Create of Devil's Plants   \n"",
       ""72                   Crate of Cloth   \n"",
       ""73           Crate of Devil's Cloth   \n"",
       ""74                     Crate of Rum   \n"",
       ""75             Crate of Devil's Rum   \n"",
       ""76               Assorted Gemstones   \n"",
       ""77                     Broken Stone   \n"",
       ""78                        Raw Sugar   \n"",
       ""79              Unfiltered Minerals   \n"",
       ""80                  Unprocessed Tea   \n"",
       ""81                 Unrefined Spices   \n"",
       ""82                   Unsorted Silks   \n"",
       ""83              Emerald Mermaid Gem   \n"",
       ""84                 Ruby Mermaid Gem   \n"",
       ""85             Sapphire Mermaid Gem   \n"",
       ""\n"",
       ""                        Best Emissary to Turn It Into  Base Value  \\\n"",
       ""8                                          Bilge Rats          10   \n"",
       ""9                                          Bilge Rats           5   \n"",
       ""10                                         Bilge Rats          10   \n"",
       ""11                                         Bilge Rats          10   \n"",
       ""12                                         Bilge Rats           5   \n"",
       ""13                                      Gold Hoarders        1000   \n"",
       ""14                                      Gold Hoarders         100   \n"",
       ""15                                      Gold Hoarders         400   \n"",
       ""16                                      Gold Hoarders         200   \n"",
       ""17                                      Gold Hoarders        3250   \n"",
       ""18                                      Gold Hoarders        3500   \n"",
       ""19                                      Gold Hoarders        2500   \n"",
       ""20                                      Gold Hoarders        3500   \n"",
       ""21                                      Gold Hoarders        1500   \n"",
       ""22                                      Gold Hoarders        1250   \n"",
       ""23                                      Gold Hoarders        2000   \n"",
       ""24                                      Gold Hoarders         100   \n"",
       ""25                                      Gold Hoarders         225   \n"",
       ""26                                      Gold Hoarders         400   \n"",
       ""27                                      Gold Hoarders         750   \n"",
       ""28                                      Gold Hoarders        1050   \n"",
       ""29                                      Gold Hoarders        3500   \n"",
       ""30                                      Gold Hoarders        2250   \n"",
       ""31                                      Gold Hoarders        1250   \n"",
       ""32                                  The Hunter's Call          45   \n"",
       ""33                                  The Hunter's Call         450   \n"",
       ""34                                  The Hunter's Call           0   \n"",
       ""35                                  The Hunter's Call          10   \n"",
       ""36                                     Order of Souls         200   \n"",
       ""37                                     Order of Souls         100   \n"",
       ""38                                     Order of Souls         500   \n"",
       ""39                                     Order of Souls        1000   \n"",
       ""40                                     Order of Souls           0   \n"",
       ""41                                     Order of Souls        1750   \n"",
       ""42                                     Order of Souls        1250   \n"",
       ""43                                     Order of Souls        5000   \n"",
       ""44                                     Order of Souls       10000   \n"",
       ""45                                     Order of Souls        1500   \n"",
       ""46                                     Order of Souls        3250   \n"",
       ""47  Merchant Alliance (but they must first be capt...         105   \n"",
       ""48  Merchant Alliance (but they must first be capt...         105   \n"",
       ""49  Merchant Alliance (but they must first be capt...         105   \n"",
       ""50                                  Merchant Alliance         150   \n"",
       ""51                                  Merchant Alliance        5000   \n"",
       ""52                                  Merchant Alliance         750   \n"",
       ""53                                  Merchant Alliance         750   \n"",
       ""54                                  Merchant Alliance         750   \n"",
       ""55                                  Merchant Alliance        1000   \n"",
       ""56                                  Merchant Alliance        1000   \n"",
       ""57                                  Merchant Alliance         250   \n"",
       ""58                                  Merchant Alliance        1500   \n"",
       ""59                                                NaN           0   \n"",
       ""60                                  Merchant Alliance        1250   \n"",
       ""61                                  Merchant Alliance        3500   \n"",
       ""62                                  Merchant Alliance         500   \n"",
       ""63                                  Merchant Alliance        1000   \n"",
       ""64                                  Merchant Alliance        1500   \n"",
       ""65                                  Merchant Alliance         750   \n"",
       ""66                                  Merchant Alliance         150   \n"",
       ""67                                  Merchant Alliance        3000   \n"",
       ""68                                  Merchant Alliance         300   \n"",
       ""69                                  Merchant Alliance        1500   \n"",
       ""70                                  Merchant Alliance         700   \n"",
       ""71                                  Merchant Alliance        1400   \n"",
       ""72                                  Merchant Alliance         700   \n"",
       ""73                                  Merchant Alliance        1400   \n"",
       ""74                                  Merchant Alliance         700   \n"",
       ""75                                  Merchant Alliance        1400   \n"",
       ""76                                  Merchant Alliance        4000   \n"",
       ""77                                  Merchant Alliance        2500   \n"",
       ""78                                  Merchant Alliance        2000   \n"",
       ""79                                  Merchant Alliance        4000   \n"",
       ""80                                  Merchant Alliance        2500   \n"",
       ""81                                  Merchant Alliance        3500   \n"",
       ""82                                  Merchant Alliance        3000   \n"",
       ""83                                      Gold Hoarders        1000   \n"",
       ""84                                      Gold Hoarders        2000   \n"",
       ""85                                      Gold Hoarders        1000   \n"",
       ""\n"",
       ""    Emissary 5 (High Sea only)  No Emissary & 30% penalty (Safer Seas)  \\\n"",
       ""8                         25.0                                     3.0   \n"",
       ""9                         12.5                                     1.5   \n"",
       ""10                        25.0                                     3.0   \n"",
       ""11                        25.0                                     3.0   \n"",
       ""12                        12.5                                     1.5   \n"",
       ""13                      2500.0                                   300.0   \n"",
       ""14                       250.0                                    30.0   \n"",
       ""15                      1000.0                                   120.0   \n"",
       ""16                       500.0                                    60.0   \n"",
       ""17                      8125.0                                   975.0   \n"",
       ""18                      8750.0                                  1050.0   \n"",
       ""19                      6250.0                                   750.0   \n"",
       ""20                      8750.0                                  1050.0   \n"",
       ""21                      3750.0                                   450.0   \n"",
       ""22                      3125.0                                   375.0   \n"",
       ""23                      5000.0                                   600.0   \n"",
       ""24                       250.0                                    30.0   \n"",
       ""25                       562.5                                    67.5   \n"",
       ""26                      1000.0                                   120.0   \n"",
       ""27                      1875.0                                   225.0   \n"",
       ""28                      2625.0                                   315.0   \n"",
       ""29                      8750.0                                  1050.0   \n"",
       ""30                      5625.0                                   675.0   \n"",
       ""31                      3125.0                                   375.0   \n"",
       ""32                       112.5                                    13.5   \n"",
       ""33                      1125.0                                   135.0   \n"",
       ""34                         0.0                                     0.0   \n"",
       ""35                        25.0                                     3.0   \n"",
       ""36                       500.0                                    60.0   \n"",
       ""37                       250.0                                    30.0   \n"",
       ""38                      1250.0                                   150.0   \n"",
       ""39                      2500.0                                   300.0   \n"",
       ""40                         0.0                                     0.0   \n"",
       ""41                      4375.0                                   525.0   \n"",
       ""42                      3125.0                                   375.0   \n"",
       ""43                     12500.0                                  1500.0   \n"",
       ""44                     25000.0                                  3000.0   \n"",
       ""45                      3750.0                                   450.0   \n"",
       ""46                      8125.0                                   975.0   \n"",
       ""47                       262.5                                    31.5   \n"",
       ""48                       262.5                                    31.5   \n"",
       ""49                       262.5                                    31.5   \n"",
       ""50                       375.0                                    45.0   \n"",
       ""51                     12500.0                                  1500.0   \n"",
       ""52                      1875.0                                   225.0   \n"",
       ""53                      1875.0                                   225.0   \n"",
       ""54                      1875.0                                   225.0   \n"",
       ""55                      2500.0                                   300.0   \n"",
       ""56                      2500.0                                   300.0   \n"",
       ""57                       625.0                                    75.0   \n"",
       ""58                      3750.0                                   450.0   \n"",
       ""59                         0.0                                     0.0   \n"",
       ""60                      3125.0                                   375.0   \n"",
       ""61                      8750.0                                  1050.0   \n"",
       ""62                      1250.0                                   150.0   \n"",
       ""63                      2500.0                                   300.0   \n"",
       ""64                      3750.0                                   450.0   \n"",
       ""65                      1875.0                                   225.0   \n"",
       ""66                       375.0                                    45.0   \n"",
       ""67                      7500.0                                   900.0   \n"",
       ""68                       750.0                                    90.0   \n"",
       ""69                      3750.0                                   450.0   \n"",
       ""70                      1750.0                                   210.0   \n"",
       ""71                      3500.0                                   420.0   \n"",
       ""72                      1750.0                                   210.0   \n"",
       ""73                      3500.0                                   420.0   \n"",
       ""74                      1750.0                                   210.0   \n"",
       ""75                      3500.0                                   420.0   \n"",
       ""76                     10000.0                                  1200.0   \n"",
       ""77                      6250.0                                   750.0   \n"",
       ""78                      5000.0                                   600.0   \n"",
       ""79                     10000.0                                  1200.0   \n"",
       ""80                      6250.0                                   750.0   \n"",
       ""81                      8750.0                                  1050.0   \n"",
       ""82                      7500.0                                   900.0   \n"",
       ""83                      2500.0                                   300.0   \n"",
       ""84                      5000.0                                   600.0   \n"",
       ""85                      2500.0                                   300.0   \n"",
       ""\n"",
       ""    Difference  \n"",
       ""8         0.12  \n"",
       ""9         0.12  \n"",
       ""10        0.12  \n"",
       ""11        0.12  \n"",
       ""12        0.12  \n"",
       ""13        0.12  \n"",
       ""14        0.12  \n"",
       ""15        0.12  \n"",
       ""16        0.12  \n"",
       ""17        0.12  \n"",
       ""18        0.12  \n"",
       ""19        0.12  \n"",
       ""20        0.12  \n"",
       ""21        0.12  \n"",
       ""22        0.12  \n"",
       ""23        0.12  \n"",
       ""24        0.12  \n"",
       ""25        0.12  \n"",
       ""26        0.12  \n"",
       ""27        0.12  \n"",
       ""28        0.12  \n"",
       ""29        0.12  \n"",
       ""30        0.12  \n"",
       ""31        0.12  \n"",
       ""32        0.12  \n"",
       ""33        0.12  \n"",
       ""34         NaN  \n"",
       ""35        0.12  \n"",
       ""36        0.12  \n"",
       ""37        0.12  \n"",
       ""38        0.12  \n"",
       ""39        0.12  \n"",
       ""40         NaN  \n"",
       ""41        0.12  \n"",
       ""42        0.12  \n"",
       ""43        0.12  \n"",
       ""44        0.12  \n"",
       ""45        0.12  \n"",
       ""46        0.12  \n"",
       ""47        0.12  \n"",
       ""48        0.12  \n"",
       ""49        0.12  \n"",
       ""50        0.12  \n"",
       ""51        0.12  \n"",
       ""52        0.12  \n"",
       ""53        0.12  \n"",
       ""54        0.12  \n"",
       ""55        0.12  \n"",
       ""56        0.12  \n"",
       ""57        0.12  \n"",
       ""58        0.12  \n"",
       ""59         NaN  \n"",
       ""60        0.12  \n"",
       ""61        0.12  \n"",
       ""62        0.12  \n"",
       ""63        0.12  \n"",
       ""64        0.12  \n"",
       ""65        0.12  \n"",
       ""66        0.12  \n"",
       ""67        0.12  \n"",
       ""68        0.12  \n"",
       ""69        0.12  \n"",
       ""70        0.12  \n"",
       ""71        0.12  \n"",
       ""72        0.12  \n"",
       ""73        0.12  \n"",
       ""74        0.12  \n"",
       ""75        0.12  \n"",
       ""76        0.12  \n"",
       ""77        0.12  \n"",
       ""78        0.12  \n"",
       ""79        0.12  \n"",
       ""80        0.12  \n"",
       ""81        0.12  \n"",
       ""82        0.12  \n"",
       ""83        0.12  \n"",
       ""84        0.12  \n"",
       ""85        0.12  ""
      ]
     },
     ""execution_count"": 82,
     ""metadata"": {},
     ""output_type"": ""execute_result""
    }
   ],
   ""source"": [
    ""# calculate difference\n"",
    ""df[\""Difference\""] =  df[\""No Emissary & 30% penalty (Safer Seas)\""] / df[\""Emissary 5 (High Sea only)\""]\n"",
    ""df""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 83,
   ""id"": ""afe0f061-ca31-4ecb-97bf-62c4620c7b1e"",
   ""metadata"": {},
   ""outputs"": [],
   ""source"": [
    ""# Export \n"",
    ""df.to_excel(\""output.xlsx\"")""
   ]
  },
  {
   ""cell_type"": ""code"",
   ""execution_count"": 84,
   ""id"": ""a5e700e9-4f7f-45e8-9fea-0e55724fae7c"",
   ""metadata"": {},
   ""outputs"": [],
   ""source"": [
    ""! start .""
   ]
  }
 ],
 ""metadata"": {
  ""kernelspec"": {
   ""display_name"": ""Python 3 (ipykernel)"",
   ""language"": ""python"",
   ""name"": ""python3""
  },
  ""language_info"": {
   ""codemirror_mode"": {
    ""name"": ""ipython"",
    ""version"": 3
   },
   ""file_extension"": "".py"",
   ""mimetype"": ""text/x-python"",
   ""name"": ""python"",
   ""nbconvert_exporter"": ""python"",
   ""pygments_lexer"": ""ipython3"",
   ""version"": ""3.9.7""
  }
 },
 ""nbformat"": 4,
 ""nbformat_minor"": 5
}
"
P9wJajFE,confirmaExclusaoDados.php,hercioneto,PHP,Thursday 21st of September 2023 06:13:48 PM CDT,"<!Doctype html>
<html lang=""pt-br"">
<head>
	<meta charset=""utf-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
	<meta name=""Author"" content=""Hercio Neto"">
	<title>Aula HTML - Formulários</title>

	<style type=""text/css"">
		body {
			font-family: Arial, sans-serif;
			font-size: 16px;
			background-color: #f0f0f0;
		}
		.container {
			max-width: 800px;
			margin: 0 auto;
			padding: 20px;
			background-color: #fff;
			box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
		}
		form label {
			display: block;
			margin-bottom: 5px;
			font-weight: bold;

		}
		form input[type=""text""], form input[type=""email""], form select { 
 
			width: 98%; 
			 
			padding: 10px; 
			 
			border: 1px solid #ccc; 
			 
			border-radius: 4px; 
			 
			margin-bottom: 20px; 
 
		} 

		form input[type=""submit""] { 
 
		background-color: #4CAF50; 
		 
		color: #fff; 
		 
		padding: 10px 20px; 
		 
		border: none; 
		 
		border-radius: 4px; 
		 
		cursor: pointer; 
		 
		} 

		form input[type=""submit""]:hover { 
 
		background-color: #3e8e41; 
		 
		} 


		@media screen and (max-width: 480px) { 

		form input[type=""text""], form input[type=""email""], form select { 
 
			width: 90%; 
			 
		} 

		form input[type=""submit""] { 
 
		width: 90%; 
		 
		} 

		}

	</style>
	
</head>

<body>

	<div class=""container""> 

	<h1>Cadastro de Pessoa</h1>
	
	<?php
 
	// Verificar se o formulário foi submetido
	if ($_SERVER[""REQUEST_METHOD""] == ""POST"") {
		if (isset($_POST['codigo'])) {
			
		
	 ?>
	 	<label for=""codigo"">Excluindo código:</label> 
		<?php 
		$codigo = $_POST['codigo'];
		echo $codigo;  ?>	

		<?php

	$conexao = new mysqli(""localhost"", ""root"", """", ""uri_web"");
 
    // Verificar se a conexão foi estabelecida corretamente
    if ($conexao->connect_error) {
        die(""Erro na conexão: "" . $conexao->connect_error);
    }

    $sql = ""DELETE FROM pessoas WHERE `pessoas`.`codigo` = $codigo"";
    
    $resultado_pagina = $conexao->query($sql);
	    if ($resultado_pagina==""true""){
	    	echo ""<br><h3>Dados excluídos com sucesso</h3>"";
	    } else {
	    	echo ""Dados não excluídos, tente novamente."";
	    }
	}
	} else {	
		echo ""Preencha o formulário"";
	}
?>
 		<p><a href=""index.php"">Voltar</a></p>
		
	</form>

	</div>
	
</body>

</html>"
yr3NcKpy,excluirDados.php,hercioneto,PHP,Thursday 21st of September 2023 06:13:05 PM CDT,"<!Doctype html>
<html lang=""pt-br"">
<head>
	<meta charset=""utf-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
	<meta name=""Author"" content=""Hercio Neto"">
	<title>Aula HTML - Formulários</title>

	<style type=""text/css"">
		body {
			font-family: Arial, sans-serif;
			font-size: 16px;
			background-color: #f0f0f0;
		}
		.container {
			max-width: 800px;
			margin: 0 auto;
			padding: 20px;
			background-color: #fff;
			box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
		}
		form label {
			display: block;
			margin-bottom: 5px;
			font-weight: bold;

		}
		form input[type=""text""], form input[type=""email""], form select { 
 
			width: 98%; 
			 
			padding: 10px; 
			 
			border: 1px solid #ccc; 
			 
			border-radius: 4px; 
			 
			margin-bottom: 20px; 
 
		} 

		form input[type=""submit""] { 
 
		background-color: #ec2300; 
		 
		color: #fff; 
		 
		padding: 10px 20px; 
		 
		border: none; 
		 
		border-radius: 4px; 
		 
		cursor: pointer; 
		 
		} 

		form input[type=""submit""]:hover { 
 
		background-color: #aa2913; 
		 
		} 


		@media screen and (max-width: 480px) { 

		form input[type=""text""], form input[type=""email""], form select { 
 
			width: 90%; 
			 
		} 

		form input[type=""submit""] { 
 
		width: 90%; 
		 
		} 

		}

	</style>
	

</head>

<body >

	<div class=""container""> 

	<h1>Exclusão de Pessoa</h1>

	<?php

	if (!is_null($_GET['codigo'])) {

	$codigo = $_GET['codigo'];

	$conexao = new mysqli(""localhost"", ""root"", """", ""uri_web"");
 
    // Verificar se a conexão foi estabelecida corretamente
    if ($conexao->connect_error) {
        die(""Erro na conexão: "" . $conexao->connect_error);
    }

    $sql = ""SELECT * FROM pessoas where codigo = $codigo"";
    $resultado_pagina = $conexao->query($sql);

     if ($resultado_pagina->num_rows > 0) {

		   while ($registro = $resultado_pagina->fetch_assoc()) {


		 ?>
	
	<form method=""POST"" action=""confirmaExclusaoDados.php"">

		<label for=""nome"">Nome:</label> 
		<input type=""text"" id=""nome"" name=""nome"" required value=""<?php echo $registro[""nome""]; ?>"" disabled> 
		<input type=""hidden"" name=""codigo"" value=""<?php echo $registro[""codigo""]; ?>"">

		<label for=""email"">E-mail:</label> 
 		<input type=""email"" id=""email"" name=""email"" required value=""<?php echo $registro[""email""]; ?>"" disabled> 

 		<input type=""submit"" value=""Clique se deseja realmente excluir"">
		
	</form>
<?php } } 
} else { echo ""<br>Selecione um registro.""; }
?>

	</div>
	
</body>

</html>"
XLG4Anbk,Untitled,sasa2742002,Python,Thursday 21st of September 2023 05:47:13 PM CDT,"import re
from pymongo import MongoClient
import json
from bs4 import BeautifulSoup
import requests

all_regions = []

north_america = [
    [""US East (N. Virginia)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/US%20East%20(N.%20Virginia)/Linux/index.json?timestamp=1695335197182""],
    [""US East (N. California)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/US%20West%20(N.%20California)/Linux/index.json?timestamp=1695335943885""],
    [""US West (Oregon)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/US%20West%20(Oregon)/Linux/index.json?timestamp=1695336005767""],
    [""Canada (Central)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Canada%20(Central)/Linux/index.json?timestamp=1695336038545""],
    [""AWS GovCloud (US-East)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/AWS%20GovCloud%20(US-East)/Linux/index.json?timestamp=1695336076977""],
    [""AWS GovCloud (US-West)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/AWS%20GovCloud%20(US)/Linux/index.json?timestamp=1695336143250""]
]

africa = [
    [""Africa (Cape Town)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Africa%20(Cape%20Town)/Linux/index.json?timestamp=1695336201165""]
]

asia_pacific = [
    [""Asia Pacific (Hong Kong)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Hong%20Kong)/Linux/index.json?timestamp=1695336236566""],
    [""Asia Pacific (Hyderabad)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Hyderabad)/Linux/index.json?timestamp=1695336267211""],
    [""Asia Pacific (Jakarta)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Jakarta)/Linux/index.json?timestamp=1695336335452""],
    [""Asia Pacific (Melbourne)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Melbourne)/Linux/index.json?timestamp=1695336377353""],
    [""Asia Pacific (Mumbai)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Mumbai)/Linux/index.json?timestamp=1695336414559""],
    [""Asia Pacific (Osaka)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Osaka)/Linux/index.json?timestamp=1695336448367""],
    [""Asia Pacific (Seoul)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Seoul)/Linux/index.json?timestamp=1695336489384""],
    [""Asia Pacific (Singapore)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Asia%20Pacific%20(Singapore)/Linux/index.json?timestamp=1695336516652""],
    [""Asia Pacific (Sydney)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Australia%20(Sydney)/Linux/index.json?timestamp=1695336549342""],
    [""Asia Pacific (Tokyo)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Australia%20(Tokyo)/Linux/index.json?timestamp=1695336572681""]
]

europe = [
    [""Europe (Frankfurt)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Frankfurt)/Linux/index.json?timestamp=1695336606682""],
    [""Europe (Ireland)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Ireland)/Linux/index.json?timestamp=1695336640824""],
    [""Europe (London)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(London)/Linux/index.json?timestamp=1695336671834""],
    [""Europe (Milan)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Milan)/Linux/index.json?timestamp=1695336709113""],
    [""Europe (Paris)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Paris)/Linux/index.json?timestamp=1695336734334""],
    [""Europe (Spain)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Spain)/Linux/index.json?timestamp=1695336756525""],
    [""Europe (Stockholm)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Stockholm)/Linux/index.json?timestamp=1695336795677""],
    [""Europe (Zurich)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/EU%20(Zurich)/Linux/index.json?timestamp=1695336817871""]
]

middle_east = [
    [""Middle East (Bahrain)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Middle%20East%20(Bahrain)/Linux/index.json?timestamp=1695336880976""],
    [""Middle East (UAE)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/Middle%20East%20(UAE)/Linux/index.json?timestamp=1695336906621""]
]

south_america = [
    [""South America (Sao Paulo)"", ""https://b0.p.awsstatic.com/pricing/2.0/meteredUnitMaps/ec2/USD/current/ec2-ondemand-without-sec-sel/South%20America%20(Sao%20Paulo)/Linux/index.json?timestamp=1695336944637""]
]

# Fetch data for each region
for region_list in [north_america, africa, asia_pacific, europe, middle_east, south_america]:
    for region in region_list:
        data = requests.get(region[1]).json()
        all_regions.append(data['regions'])

print(len(all_regions))
"
3ScZ0VQR,Sum of Prime and Non-Prime Numbers,desito07,C#,Thursday 21st of September 2023 05:44:32 PM CDT,"namespace _12._Sum_of_Prime_and_Non_Prime_Numbers
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string command = (Console.ReadLine());
            int sumPrimeNum = 0;
            int sumNonprimeNum = 0;

            while (command != ""stop"")
            {
                int currentNum = int.Parse(command);
                if (currentNum < 0)
                {
                    Console.WriteLine(""Number is negative"");
                    continue;
                }

                int divisors = 0;
                for (int i = 1; i <= currentNum; i++)
                {
                    if (currentNum % i == 0)
                    {
                        divisors++;
                    }
                }
                if (divisors == 2)
                {
                    sumPrimeNum += currentNum;
                }
                else
                {
                    sumNonprimeNum += currentNum;
                }
                command = (Console.ReadLine());
            }
            Console.WriteLine($""Sum of all prime numbers is: + {sumPrimeNum}"");
            Console.WriteLine($""Sum of all non prime numbers is: {sumNonprimeNum}"");
        }
    }
}"
GqswWBYW,service --status-all,Sergio_Istea,Bash,Thursday 21st of September 2023 05:43:48 PM CDT,"# service --status-all
 [ - ]  anacron
 [ + ]  apparmor
 [ - ]  bluetooth
 [ - ]  console-setup.sh
 [ + ]  cron
 [ + ]  dbus
 [ - ]  hwclock.sh
 [ - ]  keyboard-setup.sh
 [ + ]  kmod
 [ + ]  networking
 [ + ]  procps
 [ + ]  ssh
 [ + ]  udev
"
F0aGXhEB,shipeocomando,4Sun_,JSON,Thursday 21st of September 2023 05:32:45 PM CDT,"{	
	""0"": ""no se agarran a piñas nomás porque son sumis@s"",
	""1"": ""son totalmente inshippeables 💔"",
	""2"": ""son totalmente inshippeables 💔"",
	""3"": ""son totalmente inshippeables 💔"",
	""4"": ""son totalmente inshippeables 💔"",
	""5"": ""son totalmente inshippeables 💔"",
	""6"": ""son totalmente inshippeables 💔"",
	""7"": ""son totalmente inshippeables 💔"",
	""8"": ""son totalmente inshippeables 💔"",
	""9"": ""son totalmente inshippeables 💔"",
	""10"": ""son totalmente inshippeables 💔"",
	""11"": ""Parece que tienen algunas diferencias. 💔"",
	""12"": ""Parece que tienen algunas diferencias. 💔"",
	""13"": ""Parece que tienen algunas diferencias. 💔"",
	""14"": ""Parece que tienen algunas diferencias. 💔"",
	""15"": ""Parece que tienen algunas diferencias. 💔"",
	""16"": ""Parece que tienen algunas diferencias. 💔"",
	""17"": ""Parece que tienen algunas diferencias. 💔"",
	""18"": ""Parece que tienen algunas diferencias. 💔"",
	""19"": ""Parece que tienen algunas diferencias. 💔"",
	""20"": ""Parece que tienen algunas diferencias. 💔"",
	""21"": ""Algunas diferencias, pero hay potencial. 👀"",
	""22"": ""Algunas diferencias, pero hay potencial. 👀"",
	""23"": ""Algunas diferencias, pero hay potencial. 👀"",
	""24"": ""Algunas diferencias, pero hay potencial. 👀"",
	""25"": ""Algunas diferencias, pero hay potencial. 👀"",
	""26"": ""Algunas diferencias, pero hay potencial. 👀"",
	""27"": ""Algunas diferencias, pero hay potencial. 👀"",
	""28"": ""Algunas diferencias, pero hay potencial. 👀"",
	""29"": ""Algunas diferencias, pero hay potencial. 👀"",
	""30"": ""Algunas diferencias, pero hay potencial. 👀"",
	""31"": ""Serían una pareja tóxica. ☠️"",
	""32"": ""Serían una pareja tóxica. ☠️"",
	""33"": ""Serían una pareja tóxica. ☠️"",
	""34"": ""Serían una pareja tóxica. ☠️"",
	""35"": ""Serían una pareja tóxica. ☠️"",
	""36"": ""Serían una pareja tóxica. ☠️"",
	""37"": ""Serían una pareja tóxica. ☠️"",
	""38"": ""Serían una pareja tóxica. ☠️"",
	""39"": ""Serían una pareja tóxica. ☠️"",
	""40"": ""Serían una pareja tóxica. ☠️"",
	""41"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""42"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""43"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""44"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""45"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""46"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""47"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""48"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""49"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""50"": ""Tendrían un amor de verano 100% candente. 😳☀️ "",
	""51"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""52"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""53"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""54"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""55"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""56"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""57"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""58"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""59"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""60"": ""Si se lo proponen podrían estar juntitos. 😳💞 "",
	""61"": ""Son totalmente shippeables. 🥰 "",
	""62"": ""Son totalmente shippeables. 🥰 "",
	""63"": ""Son totalmente shippeables. 🥰 "",
	""64"": ""Son totalmente shippeables. 🥰 "",
	""65"": ""Son totalmente shippeables. 🥰 "",
	""66"": ""Son totalmente shippeables. 🥰 "",
	""67"": ""Son totalmente shippeables. 🥰 "",
	""68"": ""Son totalmente shippeables. 🥰 "",
	""69"": ""Consigan un cuarto. 😜🫦 "",
	""70"": ""Son totalmente shippeables. 🥰 "",
	""71"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""72"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""73"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""74"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""75"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""76"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""77"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""78"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""79"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""80"": ""No están juntos nomás porque les da vergüenza. 😍💞 "",
	""81"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""82"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""83"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""84"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""85"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""86"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""87"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""88"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""89"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""90"": ""Podrían estar juntos toda una vida 👴🏻👵🏻💞 "",
	""91"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""92"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""93"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""94"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""95"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""96"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""97"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""98"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""99"": ""Han estado juntos muchas vidas, son 100% shippeables ❤️‍🔥 "",
	""100"": ""Son el mejor shippeo del universo. 😍💞🌌 ""
}"
QERuEyzp,Series,Spocoman,C++,Thursday 21st of September 2023 05:04:52 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    double budget, cash;
    cin >> budget;

    int volume;
    cin >> volume;

    string name;

    for (int i = 0; i < volume; i++) {
        cin.ignore();
        getline(cin, name);
        cin >> cash;

        if (name == ""Thrones"") {
            cash /= 2;
        }
        else if (name == ""Lucifer"") {
            cash *= 0.6;
        }
        else if (name == ""Protector"") {
            cash *= 0.7;
        }
        else  if (name == ""TotalDrama"") {
            cash *= 0.8;
        }
        else  if (name == ""Area"") {
            cash *= 0.9;
        }

        budget -= cash;
    }

    if (budget >= 0) {
        printf(""You bought all the series and left with %.2f lv.\n"", budget);
    }
    else {
        printf(""You need %.2f lv. more to buy the series!\n"", abs(budget));
    }

    return 0;
}

Решение с тернарен оператор:

#include <iostream>
#include <string>

using namespace std;

int main() {
    double budget, cash;
    cin >> budget;

    int volume;
    cin >> volume;

    string name;

    for (int i = 0; i < volume; i++) {
        cin.ignore();
        getline(cin, name);
        cin >> cash;

        cash *=
            name == ""Thrones"" ? 0.5 :
            name == ""Lucifer"" ? 0.6 :
            name == ""Protector"" ? 0.7 :
            name == ""TotalDrama"" ? 0.8 :
            name == ""Area"" ? 0.9 : 1;

        budget -= cash;
    }

    budget >= 0 ?
        printf(""You bought all the series and left with %.2f lv.\n"", budget) :
        printf(""You need %.2f lv. more to buy the series!\n"", abs(budget));
    
    return 0;
}"
MFZ0qnLG,Duty Drawback,bluebunny72,C#,Thursday 21st of September 2023 04:49:20 PM CDT,"Stopwatch sw = new Stopwatch();
sw.Start();

DateTime startDate = new DateTime(2023, 4, 1);
DateTime endDate = new DateTime(2023, 7, 1); //not inclusive

string? RM_Lot = null;

List<ExcelLine> elList;

using SyteLineHelper h = new();

//GROUP A
List<LotList> lotLists = h.GetLotList(startDate, endDate, RM_Lot, config);

foreach (LotList ll in lotLists.OrderBy(x => x.RM_TransDate).ThenBy(x => x.RM_Lot))
{
    elList = new();

    Console.WriteLine(""***********BEGIN LOT************"");
    Console.WriteLine(string.Concat(""RM Lot: "", ll.RM_Lot, "", RM Item: "", ll.RM_Item));

    row += 1;
    int rm_lot_row = row;

    ws.Cell(row, ""A"").Value = ll.RM_Lot;
    ws.Cell(row, ""B"").Value = ll.RM_TransDate.ToString(""yyyy-MM-dd"");
    ws.Cell(row, ""C"").Value = ll.RM_Item;
    ws.Cell(row, ""D"").Value = ll.RM_ItemDesc;
    ws.Cell(row, ""E"").Value = ll.RM_CommodityCode;
   
    string tracker = ll.RM_Lot;
    int level = 0;

    int oldRow = row;
    Guid id = Guid.NewGuid();
    Recurse(ll.RM_Lot, ll.RM_Lot, tracker, level, id);
    row = oldRow;

    WriteExcelLinesPass1(ll.RM_USD_FXRate);
    WriteExcelLinesPass2();
    WriteExcelLinesPass3();

    Console.WriteLine(""***********END LOT************"");
    Console.WriteLine();

}

//ws.Columns().AdjustToContents();

// Freeze rows and columns in one shot
ws.SheetView.Freeze(1, 1);
ws.SheetView.ZoomScale = 85;

var filePath = System.IO.Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), ""Test.xlsx"");

sw.Stop();
TimeSpan timeTaken = sw.Elapsed;
string foo = ""Time taken: "" + timeTaken.ToString(@""hh\:mm\:ss\.fff"");
Console.WriteLine(foo);

workbook.SaveAs(filePath);

ProcessStartInfo psInfo = new ProcessStartInfo
{
    FileName = filePath,
    UseShellExecute = true
};
Process.Start(psInfo);
Console.ReadLine();

void ScrapSection(string lot, int row, IConfiguration config)
{
    int scrap_row = row;
    List<ScrapList> scrapLists = h.GetScrapList(startDate, endDate, lot, config);
    foreach (ScrapList scrap in scrapLists)
    {
        ws.Cell(scrap_row, ""AP"").Value = scrap.Scrap_Qty; //Qty Scrapped/Written Off
        ws.Cell(scrap_row, ""AQ"").Value = scrap.Scrap_Amt; //Amt Scrapped/Written Off
        ws.Cell(scrap_row, ""AR"").Value = scrap.Item; //FG Qtm Item
        ws.Cell(scrap_row, ""AS"").Value = scrap.Lot; //FG Qty Lot
        ws.Cell(scrap_row, ""AT"").Value = scrap.Ref_Item; //Qty Ref Item

        scrap_row +=1;
    }
}

string Recurse(string RM_Lot, string lot, string tracker, int level, Guid parentId)
{
    List<MatlTranList> mtList = h.GetMatlTranByLotList(startDate, endDate, lot, config);
    foreach (MatlTranList mt in mtList.OrderBy(x => x.CategorySort))
    {
        Console.WriteLine(String.Concat(""Lot: "", RM_Lot, "" Recurse Level: "", level));

        ExcelLine el = new();

        //row +=1;
        el.Id = Guid.NewGuid();
        el.ParentId = parentId;
        el.Row = 0;
        el.RMLot = RM_Lot;
        el.Level = level;

        switch (mt.Category)
        {
            case ""Ship"":
                el.CategoryType = Enums.CategoryType.Ship;
                break;
            case ""Production"":
                el.CategoryType = Enums.CategoryType.Production;
                break;
            case ""External Receipts"":
                el.CategoryType = Enums.CategoryType.ExternalReceipts;
                break;
            case ""Internal Receipts"":
                el.CategoryType = Enums.CategoryType.InternalReceipts;
                break;
            case ""Scrap"":
                el.CategoryType = Enums.CategoryType.Scrap;
                break;
            default:
                el.CategoryType = Enums.CategoryType.Other;
                break;
        }

        el.CategoryDesc = mt.Category;
        el.CategorySort = mt.CategorySort;
        el.Lot = mt.Lot;
        el.RefNum = mt.RefNum;
        el.RefLineSuf = mt.RefLineSuf;
        el.PackNumList = mt.PackNumList;
        el.Tracker = tracker;
        el.Item = mt.Item;
        el.UM = mt.UM;
        el.RMQty = 0;
        el.RMAmt = 0;
        el.QtyFactor = 0;
        el.QtyFactor = 0;
        el.QtyConsumed = mt.QtyConsumed;
        el.AmtConsumed = mt.AmtConsumed;

        if (mt.Category==null)
        {
            throw new ApplicationException(""No Category!"");
        }
        else if (el.CategoryType == Enums.CategoryType.Production)
        {

            string refNum = ""000"" + mt.RefLineSuf;
            string refLot = string.Concat(mt.RefNum, ""-"", refNum.Right(4));

            Recurse(RM_Lot, refLot, tracker + ""|"" + refLot, level + 1, el.Id);

        }

        elList.Add(el);
    }

    return tracker;
}

void WriteExcelLinesPass1(decimal fxRate)
{
    foreach (ExcelLine el in elList
        .OrderBy(x => x.CategorySort)
        .ThenBy(x => x.CategoryType)
        .ThenBy(x => x.Level)
        .ThenBy(x => x.Tracker))
    {
        Console.WriteLine(String.Concat(""Pass: 1 Row: "", row, "" Level: "", el.Level));

        el.Row = row;

        ws.Cell(row, ""A"").Value = el.RMLot;
        ws.Cell(row, ""G"").Value = el.Level;
        ws.Cell(row, ""H"").Value = el.CategoryDesc;
        ws.Cell(row, ""I"").Value = el.Lot;
        ws.Cell(row, ""J"").Value = el.RefNum;
        ws.Cell(row, ""K"").Value = el.RefLineSuf;
        ws.Cell(row, ""L"").Value = el.Tracker;
        ws.Cell(row, ""M"").Value = el.Item;
        ws.Cell(row, ""N"").Value = el.UM;
        ws.Cell(row, COL_RMQty).FormulaA1 = string.Concat(COL_QtyConsumed, row);
        ws.Cell(row, COL_RMAmt).FormulaA1 = string.Concat(COL_AmtConsumed, row);
        ws.Cell(row, COL_QtyFactor).Value = 1; //Qty Factor
        ws.Cell(row, COL_AmtFactor).Value = 1; //Amt Factor
        ws.Cell(row, COL_QtyConsumed).Value = el.QtyConsumed;
        ws.Cell(row, COL_AmtConsumed).Value = el.AmtConsumed;
        ws.Cell(row, COL_USDFXRate).Value = fxRate;
        ws.Cell(row, COL_PackNumList).Value = el.PackNumList;              

        if (el.CategoryType == Enums.CategoryType.Ship)
        {
            FGShippedList fgs = h.GetFGShippedListByCustomerOrderLine(startDate, endDate, el.RefNum, el.RefLineSuf, el.Lot, config).FirstOrDefault();

            ws.Cell(row, ""A"").Value = el.RMLot; //A

            ws.Cell(row, ""V"").Value = fgs.Customer; //Customer
            ws.Cell(row, ""W"").Value = fgs.ShipTo; //CustomerShipTo
            ws.Cell(row, ""X"").Value = fgs.Country; //Country
            ws.Cell(row, ""Y"").Value = fgs.Is_EU ? ""Y"" : ""N""; //EU
            ws.Cell(row, ""Z"").Value = fgs.FG_CommCode; //FG_CommCode
            ws.Cell(row, ""AA"").Value = fgs.Is_ExportCommCode ? ""Y"" : ""N""; //ValidExportCommCode
            ws.Cell(row, ""AB"").Value = fgs.Shipper; //Shipper
            ws.Cell(row, ""AC"").Value = fgs.Ship_Date.ToString(""yyyy-MM-dd""); //Shipper
            ws.Cell(row, ""AC"").Value = fgs.Ship_Date.ToString(""yyyy-MM-dd""); //Shipper     
            ws.Cell(row, COL_ShippedLotQty).Value = fgs.ShippedLotQty; // 42.12345;
            ws.Cell(row, COL_COLineUnitPrice).Value = fgs.COLineUnitPrice; //42.1234;
            ws.Cell(row, COL_COCurrCode).Value = fgs.COCurrCode; //""USD"";
            ws.Cell(row, COL_COFXRate).Value = fgs.COFXRate;
        }
        row += 1;
    }
}

void WriteExcelLinesPass2()
{
    foreach (ExcelLine el in elList
        .Where(x => x.CategoryType != Enums.CategoryType.InternalReceipts)
        .OrderBy(x => x.Row))
    {
        Console.WriteLine(String.Concat(""Pass: 2 Row: "", el.Row, "" Level: "", el.Level));

        //For every tran type other than Finish,
        //use Finish tran type qty and amount factor to determine RM qty and amount
        int? finishRow = GetFinishRowNumber(el.ParentId); // ???

        if (finishRow != null)
        {
            ws.Cell(el.Row, COL_RMQty).FormulaA1 = String.Concat(COL_QtyConsumed, el.Row, ""/"", ""$"", COL_QtyFactor, ""$"", finishRow);
            ws.Cell(el.Row, COL_RMAmt).FormulaA1 = String.Concat(COL_AmtConsumed, el.Row, ""/"", ""$"", COL_AmtFactor, ""$"", finishRow);
        }
        else
        {
            ws.Cell(el.Row, COL_RMQty).FormulaA1 = String.Concat(COL_QtyConsumed, el.Row);
            ws.Cell(el.Row, COL_RMAmt).FormulaA1 = String.Concat(COL_AmtConsumed, el.Row);
        }
    }
}

void WriteExcelLinesPass3()
{
    foreach (ExcelLine el in elList
        .Where(x => x.CategoryType == Enums.CategoryType.InternalReceipts)
        .OrderBy(x => x.Row))
    {
        Console.WriteLine(String.Concat(""Pass: 3 Row: "", el.Row, "" Level: "", el.Level));

        //For every ""Finish"" Tran Type, read RM qty and RM amount based on the consumption of predecessor lot consumption factor.
        //Then determine the Qty and Amount Factor

        GetPredessorLotConsumption2(el.ParentId, el.RefNum, el.RefLineSuf);

        ws.Cell(el.Row, COL_QtyFactor).FormulaA1 = String.Concat(COL_QtyConsumed, el.Row, ""/"", COL_RMQty, el.Row);
        ws.Cell(el.Row, COL_AmtFactor).FormulaA1 = String.Concat(COL_AmtConsumed, el.Row, ""/"", COL_RMAmt, el.Row);

    }
}

int? GetFinishRowNumber(Guid parentId)
{
    int? row = null;

    ExcelLine el = elList.Where(x => x.ParentId == parentId
                                        && x.CategoryType == Enums.CategoryType.InternalReceipts).FirstOrDefault();

    if (el != null)
    {
        row = el.Row;
    }
    return row;
}

void GetPredessorLotConsumption2(Guid parentId, string refNumber, int RefLineSuf)
{
    int? finishRow = GetFinishRowNumber(parentId);
    string s1 = string.Empty;
    string s2 = string.Empty;

    foreach (ExcelLine el in elList.Where(x => x.Id == parentId &&
                                     x.RefNum == refNumber &&
                                     x.RefLineSuf == RefLineSuf &&
                                     x.CategoryType == Enums.CategoryType.Production))
    {
        s1 += string.Concat(COL_RMQty, el.Row, "","");
        s2 += string.Concat(COL_RMAmt, el.Row, "","");
    }

    if (finishRow != null)
    {
        ws.Cell(finishRow.Value, COL_RMQty).FormulaA1 = string.Concat(""-1*SUM("", s1.TrimEnd(','), "")"");
        ws.Cell(finishRow.Value, COL_RMAmt).FormulaA1 = string.Concat(""-1*SUM("", s2.TrimEnd(','), "")"");
    }
}
"
AdPDdcDE,++ snowybot update,coinwalk,JavaScript,Thursday 21st of September 2023 04:15:34 PM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((measly/1440).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var olzerer = measly;
var mith = 1;
var zoom = ((Math.floor(measly/tens))*tens);
var olly = ((Math.floor(measly/tens))*tens);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
zuel = parseFloat(document.getElementById('pct_balance').value);
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel!=nobbolance)&&(zuel>=zoom)){
    moon = Number((moon*2).toFixed(8));
    zoom = parseFloat(zuel);
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
}
if (zuel<olly){
    zoom = parseFloat(zuel); 
    mith = 0; 
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
}
if ((zuel>=(olzerer+(tens*mith)))&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    nobbolance = 0;
    mith = 1;
    olzerer = parseFloat(zuel);     
    zoom = parseFloat(zuel);
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((zuel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
wLjLmhQH,Scholarship,Spocoman,C++,Thursday 21st of September 2023 04:13:35 PM CDT,"#include <iostream>

using namespace std;

int main() {
    double income, average ,salary;
    cin >> income >> average >> salary;

    double social = salary * 0.35;
    double excellent = average * 25;

    if (average < 4.50){
        cout << ""You cannot get a scholarship!\n"";
    }
    else if (average > 4.50 && average < 5.50) {
        if (income < salary) {
            cout << ""You get a Social scholarship "" << (int)social << "" BGN\n"";
        }
        else {
            cout << ""You cannot get a scholarship!\n"";
        }
    }
    else {
        if (income < salary) {

            if (excellent < social) {
                cout << ""You get a Social scholarship "" << (int)social << "" BGN\n"";
            }
            else {
                cout << ""You get a scholarship for excellent results "" << (int)excellent << "" BGN\n"";
            }
        }
        else {
            cout << ""You get a scholarship for excellent results "" << (int)excellent << "" BGN\n"";
        }
    }
    return 0;
}"
qjbWQfwP,musiclib oop,STANAANDREY,Java,Thursday 21st of September 2023 03:11:37 PM CDT,"import java.util.*;
import java.util.stream.IntStream;

class Song {
    private String title;
    private String[] artists;

    public Song(String title, String[] artists) {
        this.title = title;
        this.artists = artists;
    }

    @Override
    public String toString() {
        return ""Song{"" +
                ""title='"" + title + '\'' +
                "", artists="" + Arrays.toString(artists) +
                '}';
    }

    public void play() {
        System.out.println(""Play "" + this.toString());
    }

    public String getTitle() {
        return title;
    }
}

class MusicLib {
    private List<Song> songs;

    public MusicLib() {
        this.songs = new ArrayList<>();
    }

    public void addSong(final Song song) {
        songs.add(song);
    }

    public void rmSong(int index) {
        songs.remove(index);
    }

    public List<Song> getSongs() {
        return songs;
    }

    public void playByTitle(final String title) {
        IntStream intStream = IntStream.range(0, songs.size());
        OptionalInt index = intStream.filter(i -> songs.get(i).getTitle().equals(title)).findFirst();
        songs.get(index.getAsInt()).play();
    }

    public void playRandom() {
        final int size = songs.size();
        if (size == 0) {
            return;
        }
        var random = new Random();
        int index = random.nextInt(size);
        songs.get(index).play();
    }
}

public class Main {

    public static void main(String[] args) {
        var musicLib = new MusicLib();
        musicLib.addSong(new Song(""Midnight Train to Georgia"", new String[]{""Gladys Knight & the Pips""}));
        musicLib.addSong(new Song(""Stairway to Heaven"", new String[]{""Led Zeppelin""}));
        musicLib.addSong(new Song(""Imagine"", new String[]{""John Lennon""}));
        musicLib.addSong(new Song(""All by Myself"", new String[]{""Eric Carmen""}));
        musicLib.addSong(new Song(""What'd I Say"", new String[]{""Ray Charles""}));
        musicLib.addSong(new Song(""Walking in Memphis"", new String[]{""Marc Cohn""}));
        musicLib.addSong(new Song(""In the Air Tonight"", new String[]{""Phil Collins""}));

        musicLib.playByTitle(""Imagine"");
        musicLib.playRandom();
    }
}
"
bKNrTbHH,A simple bash emulator,BERKYT,Python,Thursday 21st of September 2023 02:46:45 PM CDT,"import os
import getpass


class GlobalPath:
    SELF_PATH = __file__[:__file__.rfind('\\')]
    visible_path = ''


def ls(path: str = 'DEFAULT') -> str:
    if path != 'DEFAULT':
        files = os.listdir(path)
    else:
        files = os.listdir(GlobalPath.SELF_PATH)

    res = ''

    for offset, file in enumerate(files):
        res += file + '\t'

        if offset % 6 == 0 and offset != 0:
            res += '\n'

    return res


def cat(*files) -> str:
    res = ''

    for file in files:
        with open(file=f'{GlobalPath.SELF_PATH}\\{file}', mode='r', encoding='utf-8') as f:
            for line in f:
                res += line

    return res


def pwd() -> str:
    return GlobalPath.SELF_PATH


def cd(path: str):
    if path == '..':
        GlobalPath.SELF_PATH = generate_new_path(GlobalPath.SELF_PATH)

        path = generate_new_path(GlobalPath.visible_path).replace('\\\\', '')

        GlobalPath.visible_path = path
    else:
        if os.path.exists(GlobalPath.SELF_PATH + f'\\{path}'):
            GlobalPath.SELF_PATH += f'\\{path}'
            GlobalPath.visible_path += f'\\{path}'


def convert_path_to_list(visible_path: str) -> list:
    return visible_path.split('\\')


def generate_new_path(path):
    tmp = convert_path_to_list(path)
    tmp.pop()

    path = ''

    for offset, file in enumerate(tmp):
        if offset != 0:
            path += f'\\{file}'
        else:
            path += f'{file}'

    return path


def run():
    commands = {
        'ls': ls,
        'cat': cat,
        'pwd': pwd,
        'cd': cd,
    }

    while True:
        user_name = f'{getpass.getuser()}@ubuntu:{GlobalPath.visible_path if GlobalPath.visible_path else ""~""}$ '
        enter_command = input(user_name).split(' ')
        command, args = enter_command[0], enter_command[1:]

        if not commands.get(command):
            continue

        try:
            res = commands[command](*args)
        except Exception as e:
            print(e)
            continue

        if res:
            print(res)


if __name__ == '__main__':
    run()
"
XR8kVMK3,Santas Holiday,Spocoman,C++,Thursday 21st of September 2023 02:43:47 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int days;
    cin >> days;

    int nights = days - 1;

    string type, rating;
    cin >> type >> rating;

    double price = 0;

    if (nights > 0) {
        if (type == ""room for one person"") {
            price = 18.00;
        }
        else if (type == ""apartment"") {
            price = 25.00;

            if (nights < 10) {
                price *= 0.70;
            }
            else if (nights > 15) {
                price *= 0.50;
            }
            else {
                price *= 0.65;
            }
        }
        else {
            price = 35.00;

            if (nights < 10) {
                price *= 0.90;
            }
            else if (nights > 15) {
                price *= 0.80;
            }
            else {
                price *= 0.85;
            }
        }

        if (rating == ""positive"") {
            price *= 1.25;
        }
        else {
            price *= 0.90;
        }    
    }

    printf(""%.2f\n"", price * nights);

    return 0;
}

Решение с тернарен оператор:

#include <iostream>
#include <string>

using namespace std;

int main() {
    int days;
    cin >> days;

    int nights = days - 1;

    string type, rating;
    cin >> type >> rating;

    double price =
        nights > 0 ?
        ((type == ""room for one person"" ? 18.00 :
            type == ""apartment"" ? 25.00 * (nights < 10 ? 0.70 : nights > 15 ? 0.50 : 0.65) :
            35.00 * (nights < 10 ? 0.90 : nights > 15 ? 0.80 : 0.85)) * (rating == ""positive"" ? 1.25 : 0.90)) : 0;

    printf(""%.2f\n"", price * nights);

    return 0;
}"
KGUHm6Nf,rankTime command,Uno2K,JavaScript,Thursday 21st of September 2023 02:38:11 PM CDT,"const {
  SlashCommandBuilder,
  Client,
  Interaction,
  EmbedBuilder,
} = require(""discord.js"");
const DB = require(""../../schemas/rankTime"");
const ranks = require(""../../constants/rank"");

module.exports = {
  data: new SlashCommandBuilder()
    .setName(""rank"")
    .setDescription(""[Rank] Configurações do Rank Time"")
    .addSubcommand((subcommand) =>
      subcommand
        .setName(""configurar"")
        .setDescription(""[Rank] Configuração inicial para o sistema de rank"")
        .addRoleOption((option) =>
          option
            .setName(""rank"")
            .setDescription(""Selecione o cargo inicial para o sistema de rank"")
            .setRequired(true)
        )
    )
    .addSubcommand((subcommand) =>
      subcommand
        .setName(""iniciar"")
        .setDescription(
          ""[Rank] Inicia o sistema de rank para todos os membros do servidor""
        )
    )
    .addSubcommand((subcommand) =>
      subcommand
        .setName(""atualizar"")
        .setDescription(
          ""[Rank] Força a atualização dos rank de todos os membros do servidor""
        )
    ),

  /**
   * @param {Interaction} interaction
   * @param {Client} client
   */
  async execute(interaction, client) {
    const { options, guild } = interaction;

    const subCommand = options.getSubcommand([
      ""configurar"",
      ""iniciar"",
      ""atualizar"",
    ]);

    const successEmbed = new EmbedBuilder().setColor(""Green"");
    const warningEmbed = new EmbedBuilder().setColor(""Yellow"");
    const errorEmbed = new EmbedBuilder().setColor(""Red"");

    function meetsRequirement(joinDate, requirement) {
      const currentDate = new Date();
      const elapsedMilliseconds = currentDate - joinDate;
      const elapsedDays = elapsedMilliseconds / (1000 * 60 * 60 * 24);

      return elapsedDays >= requirement;
    }

    if (subCommand === ""configurar"") {
      return await interaction.reply({
        embeds: [
          errorEmbed.setDescription(
            ""❌ No momento este comando não está funcionando...""
          ),
        ],
        ephemeral: true,
      });
    } else if (subCommand === ""iniciar"") {
      await interaction.reply({
        embeds: [
          warningEmbed.setDescription(
            `⏳ Iniciando sistema de rank para todos os membros do servidor, isso pode demorar um pouco...`
          ),
        ],
      });
    
      const members = await guild.members.fetch();
      const processingDelay = 100; // 1000ms (1 segundo) de atraso entre mensagens
      let num = 0;
    
      async function processMember(member) {
        try {
          const existingRankInfo = await DB.findOne({
            memberId: member.id,
            guildId: guild.id,
          });
    
          if (!existingRankInfo) {
            const newRankInfo = new DB({
              guildId: guild.id,
              memberId: member.id,
              joinTime: member.joinedAt,
              currentRankId: ranks.ranksTest.plebeu.roleId,
            });
            await newRankInfo.save();
            await member.roles
              .add(newRankInfo.currentRankId)
              .catch((err) => console.log(err));
          }
        } catch (error) {
          console.error(`Error processing member ${member.user.tag}: ${error}`);
        }
    
        num++;
    
        if (num === members.size) {
          await interaction.editReply({
            embeds: [
              successEmbed.setDescription(
                `✅ Sistema de rank iniciado para todos os membros do servidor.`
              ),
            ],
            ephemeral: true,
          });
        } else {
          await interaction.editReply({
            embeds: [
              warningEmbed.setDescription(
                `⏳ ${num}/${members.size} membros foram processados!`
              ),
            ],
          });
        }
      }
    
      for (const member of members.values()) {
        await processMember(member);
        await new Promise((resolve) => setTimeout(resolve, processingDelay));
      }
    }else if (subCommand === ""atualizar"") {
      // Início do comando
      await interaction.reply({
        embeds: [
          warningEmbed.setDescription(
            `⏳ Atualizando sistema de rank para todos os membros do servidor, isso pode demorar um pouco...`
          ),
        ],
      });

      try {
        const membersToUpdate = await DB.find({
          guildId: guild.id,
        });

        console.log(
          `\nFound ${membersToUpdate.length} members to update on guild ${interaction.guild.name}.\n`
        );

        let updatedMembersCount = 0;

        for (const memberInfo of membersToUpdate) {
          const member = await guild.members.fetch(memberInfo.memberId);
          if (!member) continue;

          for (const rankName of Object.keys(ranks.ranksTest).sort((a, b) => {
            // Ordene os ranks com base na hierarquia de cargos
            const roleA = guild.roles.cache.get(ranks.ranksTest[a].roleId);
            const roleB = guild.roles.cache.get(ranks.ranksTest[b].roleId);
            return roleA.comparePositionTo(roleB);
          })) {
            const rank = ranks.ranksTest[rankName];

            console.log(
              `Verifying user:${member.user.tag}\n${rankName}: ${
                rank.requirement
              } - Meet requirement:  -> ${meetsRequirement(
                memberInfo.joinTime,
                rank.requirement
              )}`
            );

            // Verifique se o membro atende aos requisitos para o próximo rank
            if (
              meetsRequirement(memberInfo.joinTime, rank.requirement)
            ) {
              const nextRankName = Object.keys(ranks.ranksTest).find(
                (r) => ranks.ranksTest[r].roleId === rank.roleId
              );

              // Verifique o próximo cargo de rank
              const nextRank = guild.roles.cache.get(
                ranks.ranksTest[nextRankName].roleId
              );

              // Verifique se o membro já possui o próximo cargo de rank
              if (nextRank && !member.roles.cache.has(nextRank.id)) {
                // Remova o cargo do rank anterior se o membro já tiver um rank
                const currentRank = guild.roles.cache.get(
                  memberInfo.currentRankId
                );
                console.log(
                  `Verificando atual rank: ${currentRank.name} - ${member.user.tag}`
                );
                console.log(
                  `Verificando próximo rank: ${nextRank.name} - ${member.user.tag}`
                );
                console.log(
                  `Comparando rank ${
                    currentRank.comparePositionTo(nextRank) < 0
                  } - ${member.user.tag}`
                );
                // Verifique se o membro tem um cargo atual e se o próximo cargo é superior
                if (
                  currentRank &&
                  currentRank.comparePositionTo(nextRank) < 0
                ) {
                  await member.roles.remove(currentRank);

                  // Adicione o novo cargo e atualize a informação no banco de dados
                  await member.roles.add(nextRank);
                  memberInfo.currentRankId = nextRank.id; // Atualize no banco de dados
                  await memberInfo.save();

                  // Envie uma embed de confirmação para o membro promovido
                  await interaction.channel.send({
                    embeds: [
                      successEmbed.setDescription(
                        `✅ <@${member.id}> foi promovido a <@&${nextRank.id}>`
                      ),
                    ],
                  });
                  updatedMembersCount++;
                }
              }
            }
          }
        }

        if (updatedMembersCount === 0) {
          return await interaction.editReply({
            embeds: [
              warningEmbed.setDescription(
                `⚠️ Nenhum membro foi atualizado.`
              ),
            ],
          });
        }

        await interaction.followUp({
          embeds: [
            successEmbed.setDescription(
              `✅ **${updatedMembersCount}** membros tiveram seus ranks atualizados`
            ),
          ],
        });
      } catch (error) {
        console.error(`Error updating ranks: ${error}`);
        await interaction.followUp({
          embeds: [
            errorEmbed.setDescription(
              ""❌ Ocorreu um erro ao atualizar os ranks dos membros.""
            ),
          ],
        });
        // Final do comando
      }
    }
  },
};
"
KiNtpZuE,role-all command,Uno2K,JavaScript,Thursday 21st of September 2023 02:37:31 PM CDT,"const {
  SlashCommandBuilder,
  PermissionFlagsBits,
  EmbedBuilder,
} = require(""discord.js"");

module.exports = {
  data: new SlashCommandBuilder()
    .setName(""role-all"")
    .setDescription(
      ""[Moderação] Adiciona um cargo a todos os membros do servidor""
    )
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles)
    .setDMPermission(false)
    .addSubcommand((subcommand) =>
      subcommand
        .setName(""give"")
        .setDescription(""Adiciona um cargo a todos os membros do servidor"")
        .addRoleOption((option) =>
          option
            .setName(""cargo"")
            .setDescription(
              ""Selecione o cargo a ser adicionado a todos os membros""
            )
            .setRequired(true)
        )
    )
    .addSubcommand((subcommand) =>
      subcommand
        .setName(""remove"")
        .setDescription(""Remove um cargo de todos os membros do servidor"")
        .addRoleOption((option) =>
          option
            .setName(""cargo"")
            .setDescription(
              ""Selecione o cargo a ser removido de todos os membros""
            )
            .setRequired(true)
        )
    ),

  /**
   *
   * @param {Interaction} interaction
   * @param {Client} client
   */
  async execute(interaction, client) {
    const { options, guild } = interaction;

    const member = await guild.members.fetch();
    const role = options.getRole(""cargo"");

    const successEmbed = new EmbedBuilder().setColor(""Green"");
    const warningEmbed = new EmbedBuilder().setColor(""Yellow"");

    await interaction.deferReply({ ephemeral: true });

    const members = await guild.members.fetch();

    if (options.getSubcommand() === ""give"") {
      await interaction.editReply({
        embeds: [
          warningEmbed.setDescription(
            `⏳ Adicionado o cargo ${role} a todos os membros do servidor, isso pode demorar um pouco...`
          ),
        ],
        ephemeral: true,
      });

      let num = 0;
      setTimeout(() => {
        member.forEach(async (member) => {
          await member.roles.add(role).catch((err) => {
            return;
          });
          num++;

          if (num === members.size) {
            await interaction.editReply({
              embeds: [
                successEmbed.setDescription(
                  `✅ O cargo ${role} foi adicionado a todos os membros do servidor`
                ),
              ],
              ephemeral: true,
            });
          } else {
            await interaction.editReply({
              embeds: [
                warningEmbed.setDescription(
                  `⏳ O cargo ${role} foi adicionado a ${num}/${members.size} membros`
                ),
              ],
              ephemeral: true,
            });
          }
        });
      }, 500);
    } else if (options.getSubcommand() === ""remove"") {
      await interaction.editReply({
        embeds: [
          warningEmbed.setDescription(
            `⏳ Removendo o cargo ${role} a todos os membros do servidor, isso pode demorar um pouco...`
          ),
        ],
        ephemeral: true,
      });

      let num = 0;
      setTimeout(() => {
        member.forEach(async (member) => {
          await member.roles.remove(role).catch((err) => {
            return;
          });
          num++;

          if (num === members.size) {
            await interaction.editReply({
              embeds: [
                successEmbed.setDescription(
                  `✅ O cargo ${role} foi removido de todos os membros do servidor`
                ),
              ],
              ephemeral: true,
            });
          } else {
            await interaction.editReply({
              embeds: [
                warningEmbed.setDescription(
                  `⏳ O cargo ${role} foi removido de ${num}/${members.size} membros`
                ),
              ],
              ephemeral: true,
            });
          }
        });
      }, 500);
    }
  },
};
"
A3H7z5m7,Untitled,Megasa,C#,Thursday 21st of September 2023 02:34:28 PM CDT,"Console.WriteLine(""4 плюс 6 = "" + (4 + 6));
Console.WriteLine(""4 уменьшенное на 1 = "" + (4-1));
Console.WriteLine(""3 умножить на 7 = "" + (3*7));
Console.WriteLine(""16 разделить на 8 = "" + (16/8));
Console.WriteLine(""11 разделить на 5 = "" + (11/5,0));
Console.WriteLine(""целая часть от деления 13 на 3 = "" + (13/3));
Console.WriteLine(""остаток от деления 17 на 8 = "" + (17 %8));"
AKeqXGXe,download and update script,montur,Lua,Thursday 21st of September 2023 02:30:55 PM CDT,"print(""installing and or updating...."")

print(""deleting old files"")
shell.execute(""delete"", ""json"")
shell.execute(""delete"", ""clientTurtle"")
shell.execute(""delete"", ""clientCtrl"")
shell.execute(""delete"", ""update"")

print(""downloading files"")
shell.execute(""pastebin"", ""get"", ""https://pastebin.com/2ieW3h01"", ""json"")
shell.execute(""pastebin"", ""get"", ""https://pastebin.com/gwcc9PKf"", ""clientTurtle"")
shell.execute(""pastebin"", ""get"", ""https://pastebin.com/cN6F1fbK"", ""clientCtrl"")
shell.execute(""pastebin"", ""get"", ""https://pastebin.com/AKeqXGXe"", ""update"")

print(""done"")"
VLcfDXg5,Nigerian scammers [21-9-3/2023],bombaires,HTML,Thursday 21st of September 2023 02:23:57 PM CDT,"<a href=""mailto:udokaezeij@gmail.com"">udokaezeij@gmail.com</a>
<a href=""mailto:u.do.k.a.ezeij@gmail.com"">u.do.k.a.ezeij@gmail.com</a>
<a href=""mailto:udo.kaez.e.ij@gmail.com"">udo.kaez.e.ij@gmail.com</a>
<a href=""mailto:ud.ok.ae.zei.j@gmail.com"">ud.ok.ae.zei.j@gmail.com</a>
<a href=""mailto:udoka.ez.e.i.j@gmail.com"">udoka.ez.e.i.j@gmail.com</a>
<a href=""mailto:u.d.okae.z.e.i.j@gmail.com"">u.d.okae.z.e.i.j@gmail.com</a>
<a href=""mailto:udo.kae.ze.i.j@gmail.com"">udo.kae.ze.i.j@gmail.com</a>
<a href=""mailto:u.do.k.aeze.i.j@gmail.com"">u.do.k.aeze.i.j@gmail.com</a>
<a href=""mailto:u.dok.aez.e.ij@gmail.com"">u.dok.aez.e.ij@gmail.com</a>
<a href=""mailto:u.dok.a.e.z.e.i.j@gmail.com"">u.dok.a.e.z.e.i.j@gmail.com</a>
<a href=""mailto:u.d.o.ka.e.zei.j@gmail.com"">u.d.o.ka.e.zei.j@gmail.com</a>
<a href=""mailto:udokaeze.ij@gmail.com"">udokaeze.ij@gmail.com</a>
<a href=""mailto:u.d.o.ka.eze.i.j@gmail.com"">u.d.o.ka.eze.i.j@gmail.com</a>
<a href=""mailto:u.do.k.a.e.z.ei.j@gmail.com"">u.do.k.a.e.z.ei.j@gmail.com</a>
<a href=""mailto:u.d.oka.e.z.eij@gmail.com"">u.d.oka.e.z.eij@gmail.com</a>
<a href=""mailto:u.d.o.kaez.e.i.j@gmail.com"">u.d.o.kaez.e.i.j@gmail.com</a>
<a href=""mailto:u.d.ok.aez.e.i.j@gmail.com"">u.d.ok.aez.e.i.j@gmail.com</a>
<a href=""mailto:u.dok.a.ezei.j@gmail.com"">u.dok.a.ezei.j@gmail.com</a>
<a href=""mailto:udo.k.ae.ze.i.j@gmail.com"">udo.k.ae.ze.i.j@gmail.com</a>
<a href=""mailto:u.d.okae.zeij@gmail.com"">u.d.okae.zeij@gmail.com</a>
<a href=""mailto:ud.o.k.a.ez.e.i.j@gmail.com"">ud.o.k.a.ez.e.i.j@gmail.com</a>
<a href=""mailto:udok.ae.z.eij@gmail.com"">udok.ae.z.eij@gmail.com</a>
<a href=""mailto:u.d.ok.a.ezeij@gmail.com"">u.d.ok.a.ezeij@gmail.com</a>
<a href=""mailto:u.do.kaez.ei.j@gmail.com"">u.do.kaez.ei.j@gmail.com</a>
<a href=""mailto:ud.ok.ae.ze.ij@gmail.com"">ud.ok.ae.ze.ij@gmail.com</a>
<a href=""mailto:u.do.k.a.eze.ij@gmail.com"">u.do.k.a.eze.ij@gmail.com</a>
<a href=""mailto:u.d.o.k.a.e.ze.i.j@gmail.com"">u.d.o.k.a.e.ze.i.j@gmail.com</a>
<a href=""mailto:u.dokae.ze.i.j@gmail.com"">u.dokae.ze.i.j@gmail.com</a>
<a href=""mailto:udo.k.ae.zei.j@gmail.com"">udo.k.ae.zei.j@gmail.com</a>
<a href=""mailto:u.d.o.ka.ez.e.ij@gmail.com"">u.d.o.ka.ez.e.ij@gmail.com</a>
<a href=""mailto:u.doka.e.zei.j@gmail.com"">u.doka.e.zei.j@gmail.com</a>
<a href=""mailto:ud.okaez.e.ij@gmail.com"">ud.okaez.e.ij@gmail.com</a>
<a href=""mailto:u.do.ka.e.ze.ij@gmail.com"">u.do.ka.e.ze.ij@gmail.com</a>
<a href=""mailto:u.do.k.aez.ei.j@gmail.com"">u.do.k.aez.ei.j@gmail.com</a>
<a href=""mailto:u.dokae.zei.j@gmail.com"">u.dokae.zei.j@gmail.com</a>
<a href=""mailto:ud.o.ka.e.z.eij@gmail.com"">ud.o.ka.e.z.eij@gmail.com</a>
<a href=""mailto:u.d.o.k.a.e.zeij@gmail.com"">u.d.o.k.a.e.zeij@gmail.com</a>
<a href=""mailto:udoka.eze.ij@gmail.com"">udoka.eze.ij@gmail.com</a>
<a href=""mailto:u.d.o.kae.z.eij@gmail.com"">u.d.o.kae.z.eij@gmail.com</a>
<a href=""mailto:u.dokae.zeij@gmail.com"">u.dokae.zeij@gmail.com</a>
<a href=""mailto:udo.k.aez.ei.j@gmail.com"">udo.k.aez.ei.j@gmail.com</a>
<a href=""mailto:u.do.kae.ze.ij@gmail.com"">u.do.kae.ze.ij@gmail.com</a>
<a href=""mailto:ud.oka.e.z.eij@gmail.com"">ud.oka.e.z.eij@gmail.com</a>
<a href=""mailto:u.d.ok.a.eze.ij@gmail.com"">u.d.ok.a.eze.ij@gmail.com</a>
<a href=""mailto:u.dok.a.e.z.eij@gmail.com"">u.dok.a.e.z.eij@gmail.com</a>
<a href=""mailto:ud.o.k.a.e.ze.i.j@gmail.com"">ud.o.k.a.e.ze.i.j@gmail.com</a>
<a href=""mailto:udokaez.ei.j@gmail.com"">udokaez.ei.j@gmail.com</a>
<a href=""mailto:udokaezei.j@gmail.com"">udokaezei.j@gmail.com</a>
<a href=""mailto:udo.kae.zeij@gmail.com"">udo.kae.zeij@gmail.com</a>
<a href=""mailto:u.d.o.k.aez.eij@gmail.com"">u.d.o.k.aez.eij@gmail.com</a>
<a href=""mailto:udo.k.ae.z.eij@gmail.com"">udo.k.ae.z.eij@gmail.com</a>
<a href=""mailto:udo.kae.z.e.i.j@gmail.com"">udo.kae.z.e.i.j@gmail.com</a>
<a href=""mailto:ud.o.ka.ez.e.ij@gmail.com"">ud.o.ka.ez.e.ij@gmail.com</a>
<a href=""mailto:u.d.okae.z.ei.j@gmail.com"">u.d.okae.z.ei.j@gmail.com</a>
<a href=""mailto:ud.o.k.a.e.z.ei.j@gmail.com"">ud.o.k.a.e.z.ei.j@gmail.com</a>
<a href=""mailto:ud.o.k.ae.z.eij@gmail.com"">ud.o.k.ae.z.eij@gmail.com</a>
<a href=""mailto:u.do.k.a.e.z.e.ij@gmail.com"">u.do.k.a.e.z.e.ij@gmail.com</a>
<a href=""mailto:u.dok.aeze.i.j@gmail.com"">u.dok.aeze.i.j@gmail.com</a>
<a href=""mailto:u.d.okaeze.ij@gmail.com"">u.d.okaeze.ij@gmail.com</a>
<a href=""mailto:u.d.ok.a.e.zeij@gmail.com"">u.d.ok.a.e.zeij@gmail.com</a>
<a href=""mailto:ud.o.k.ae.z.e.ij@gmail.com"">ud.o.k.ae.z.e.ij@gmail.com</a>
<a href=""mailto:ud.oka.e.ze.ij@gmail.com"">ud.oka.e.ze.ij@gmail.com</a>
<a href=""mailto:udo.kae.zei.j@gmail.com"">udo.kae.zei.j@gmail.com</a>
<a href=""mailto:udok.ae.z.e.i.j@gmail.com"">udok.ae.z.e.i.j@gmail.com</a>
<a href=""mailto:u.d.oka.e.z.e.i.j@gmail.com"">u.d.oka.e.z.e.i.j@gmail.com</a>
<a href=""mailto:u.dok.a.e.z.ei.j@gmail.com"">u.dok.a.e.z.ei.j@gmail.com</a>
<a href=""mailto:ud.o.kae.z.e.ij@gmail.com"">ud.o.kae.z.e.ij@gmail.com</a>
<a href=""mailto:udok.aeze.i.j@gmail.com"">udok.aeze.i.j@gmail.com</a>
<a href=""mailto:u.doka.e.ze.i.j@gmail.com"">u.doka.e.ze.i.j@gmail.com</a>
<a href=""mailto:udo.k.a.ezeij@gmail.com"">udo.k.a.ezeij@gmail.com</a>
<a href=""mailto:u.dok.ae.ze.ij@gmail.com"">u.dok.ae.ze.ij@gmail.com</a>
<a href=""mailto:ud.o.k.aez.e.ij@gmail.com"">ud.o.k.aez.e.ij@gmail.com</a>
<a href=""mailto:ud.o.k.aez.e.i.j@gmail.com"">ud.o.k.aez.e.i.j@gmail.com</a>
<a href=""mailto:u.do.k.a.e.z.eij@gmail.com"">u.do.k.a.e.z.eij@gmail.com</a>
<a href=""mailto:u.d.ok.a.ezei.j@gmail.com"">u.d.ok.a.ezei.j@gmail.com</a>
<a href=""mailto:u.d.o.ka.e.z.ei.j@gmail.com"">u.d.o.ka.e.z.ei.j@gmail.com</a>
<a href=""mailto:u.d.ok.a.ez.e.i.j@gmail.com"">u.d.ok.a.ez.e.i.j@gmail.com</a>
<a href=""mailto:ud.okae.z.e.i.j@gmail.com"">ud.okae.z.e.i.j@gmail.com</a>
<a href=""mailto:u.d.okaez.ei.j@gmail.com"">u.d.okaez.ei.j@gmail.com</a>
<a href=""mailto:u.do.k.ae.zei.j@gmail.com"">u.do.k.ae.zei.j@gmail.com</a>
<a href=""mailto:udoka.e.z.e.i.j@gmail.com"">udoka.e.z.e.i.j@gmail.com</a>
<a href=""mailto:udoka.e.ze.ij@gmail.com"">udoka.e.ze.ij@gmail.com</a>
<a href=""mailto:u.do.k.ae.z.e.ij@gmail.com"">u.do.k.ae.z.e.ij@gmail.com</a>
<a href=""mailto:u.d.o.kae.zei.j@gmail.com"">u.d.o.kae.zei.j@gmail.com</a>
<a href=""mailto:ud.okaez.ei.j@gmail.com"">ud.okaez.ei.j@gmail.com</a>
<a href=""mailto:u.d.oka.ez.eij@gmail.com"">u.d.oka.ez.eij@gmail.com</a>
<a href=""mailto:u.do.ka.e.z.e.ij@gmail.com"">u.do.ka.e.z.e.ij@gmail.com</a>
<a href=""mailto:udo.ka.eze.ij@gmail.com"">udo.ka.eze.ij@gmail.com</a>
<a href=""mailto:udok.aez.ei.j@gmail.com"">udok.aez.ei.j@gmail.com</a>
<a href=""mailto:u.dokaez.e.ij@gmail.com"">u.dokaez.e.ij@gmail.com</a>
<a href=""mailto:udok.ae.zei.j@gmail.com"">udok.ae.zei.j@gmail.com</a>
<a href=""mailto:u.d.o.k.aez.e.ij@gmail.com"">u.d.o.k.aez.e.ij@gmail.com</a>
<a href=""mailto:u.d.okae.zei.j@gmail.com"">u.d.okae.zei.j@gmail.com</a>
<a href=""mailto:u.d.ok.a.e.z.e.ij@gmail.com"">u.d.ok.a.e.z.e.ij@gmail.com</a>
<a href=""mailto:udoka.e.z.ei.j@gmail.com"">udoka.e.z.ei.j@gmail.com</a>
<a href=""mailto:u.d.ok.a.e.zei.j@gmail.com"">u.d.ok.a.e.zei.j@gmail.com</a>
<a href=""mailto:u.d.o.k.a.e.ze.ij@gmail.com"">u.d.o.k.a.e.ze.ij@gmail.com</a>
<a href=""mailto:ud.ok.a.ezeij@gmail.com"">ud.ok.a.ezeij@gmail.com</a>
<a href=""mailto:udokaez.eij@gmail.com"">udokaez.eij@gmail.com</a>
<a href=""mailto:ud.o.kaezeij@gmail.com"">ud.o.kaezeij@gmail.com</a>
<a href=""mailto:u.d.o.k.ae.zeij@gmail.com"">u.d.o.k.ae.zeij@gmail.com</a>
<a href=""mailto:u.dok.a.ez.e.ij@gmail.com"">u.dok.a.ez.e.ij@gmail.com</a>
<a href=""mailto:ud.oka.e.zeij@gmail.com"">ud.oka.e.zeij@gmail.com</a>
<a href=""mailto:u.d.o.kaeze.ij@gmail.com"">u.d.o.kaeze.ij@gmail.com</a>
<a href=""mailto:udokae.z.eij@gmail.com"">udokae.z.eij@gmail.com</a>
<a href=""mailto:ud.o.kae.z.eij@gmail.com"">ud.o.kae.z.eij@gmail.com</a>
<a href=""mailto:u.d.ok.a.ez.ei.j@gmail.com"">u.d.ok.a.ez.ei.j@gmail.com</a>
<a href=""mailto:ud.o.ka.ez.eij@gmail.com"">ud.o.ka.ez.eij@gmail.com</a>
<a href=""mailto:u.do.ka.e.z.ei.j@gmail.com"">u.do.ka.e.z.ei.j@gmail.com</a>
<a href=""mailto:ud.ok.aeze.i.j@gmail.com"">ud.ok.aeze.i.j@gmail.com</a>
<a href=""mailto:u.d.o.k.a.ezeij@gmail.com"">u.d.o.k.a.ezeij@gmail.com</a>
<a href=""mailto:ud.okae.zeij@gmail.com"">ud.okae.zeij@gmail.com</a>
<a href=""mailto:udo.kae.z.eij@gmail.com"">udo.kae.z.eij@gmail.com</a>
<a href=""mailto:u.d.ok.a.e.z.e.i.j@gmail.com"">u.d.ok.a.e.z.e.i.j@gmail.com</a>
<a href=""mailto:udokae.zeij@gmail.com"">udokae.zeij@gmail.com</a>
<a href=""mailto:ud.okae.ze.i.j@gmail.com"">ud.okae.ze.i.j@gmail.com</a>
<a href=""mailto:u.dok.ae.z.eij@gmail.com"">u.dok.ae.z.eij@gmail.com</a>
<a href=""mailto:ud.ok.aezeij@gmail.com"">ud.ok.aezeij@gmail.com</a>
<a href=""mailto:ud.ok.aez.e.ij@gmail.com"">ud.ok.aez.e.ij@gmail.com</a>
<a href=""mailto:u.doka.ez.eij@gmail.com"">u.doka.ez.eij@gmail.com</a>
<a href=""mailto:u.d.o.ka.e.zeij@gmail.com"">u.d.o.ka.e.zeij@gmail.com</a>
<a href=""mailto:u.d.o.k.a.ez.ei.j@gmail.com"">u.d.o.k.a.ez.ei.j@gmail.com</a>
<a href=""mailto:udokaez.e.ij@gmail.com"">udokaez.e.ij@gmail.com</a>
<a href=""mailto:ud.ok.a.e.z.e.i.j@gmail.com"">ud.ok.a.e.z.e.i.j@gmail.com</a>
<a href=""mailto:u.dokae.z.eij@gmail.com"">u.dokae.z.eij@gmail.com</a>
<a href=""mailto:ud.o.k.a.ezei.j@gmail.com"">ud.o.k.a.ezei.j@gmail.com</a>
<a href=""mailto:u.d.o.k.a.ez.e.i.j@gmail.com"">u.d.o.k.a.ez.e.i.j@gmail.com</a>
<a href=""mailto:u.d.ok.aez.e.ij@gmail.com"">u.d.ok.aez.e.ij@gmail.com</a>
<a href=""mailto:ud.okae.zei.j@gmail.com"">ud.okae.zei.j@gmail.com</a>
<a href=""mailto:udok.a.e.zei.j@gmail.com"">udok.a.e.zei.j@gmail.com</a>
<a href=""mailto:u.d.ok.a.e.ze.i.j@gmail.com"">u.d.ok.a.e.ze.i.j@gmail.com</a>
<a href=""mailto:u.d.ok.aeze.ij@gmail.com"">u.d.ok.aeze.ij@gmail.com</a>
<a href=""mailto:udokaeze.i.j@gmail.com"">udokaeze.i.j@gmail.com</a>
<a href=""mailto:ud.o.kaez.eij@gmail.com"">ud.o.kaez.eij@gmail.com</a>
<a href=""mailto:ud.oka.e.ze.i.j@gmail.com"">ud.oka.e.ze.i.j@gmail.com</a>
<a href=""mailto:udoka.ez.ei.j@gmail.com"">udoka.ez.ei.j@gmail.com</a>
<a href=""mailto:ud.o.ka.ezeij@gmail.com"">ud.o.ka.ezeij@gmail.com</a>
<a href=""mailto:ud.ok.a.e.z.e.ij@gmail.com"">ud.ok.a.e.z.e.ij@gmail.com</a>
<a href=""mailto:udoka.e.ze.i.j@gmail.com"">udoka.e.ze.i.j@gmail.com</a>
<a href=""mailto:udoka.e.z.eij@gmail.com"">udoka.e.z.eij@gmail.com</a>
<a href=""mailto:u.dokae.z.e.ij@gmail.com"">u.dokae.z.e.ij@gmail.com</a>
<a href=""mailto:u.d.o.k.a.e.z.e.i.j@gmail.com"">u.d.o.k.a.e.z.e.i.j@gmail.com</a>
<a href=""mailto:ud.o.kae.zei.j@gmail.com"">ud.o.kae.zei.j@gmail.com</a>
<a href=""mailto:ud.oka.ezeij@gmail.com"">ud.oka.ezeij@gmail.com</a>
<a href=""mailto:u.doka.eze.ij@gmail.com"">u.doka.eze.ij@gmail.com</a>
<a href=""mailto:u.do.k.a.eze.i.j@gmail.com"">u.do.k.a.eze.i.j@gmail.com</a>
<a href=""mailto:udo.ka.e.z.eij@gmail.com"">udo.ka.e.z.eij@gmail.com</a>
<a href=""mailto:ud.oka.e.zei.j@gmail.com"">ud.oka.e.zei.j@gmail.com</a>
<a href=""mailto:u.d.okaezeij@gmail.com"">u.d.okaezeij@gmail.com</a>
<a href=""mailto:udo.k.ae.ze.ij@gmail.com"">udo.k.ae.ze.ij@gmail.com</a>
<a href=""mailto:u.do.ka.e.zei.j@gmail.com"">u.do.ka.e.zei.j@gmail.com</a>
<a href=""mailto:u.d.o.ka.ez.ei.j@gmail.com"">u.d.o.ka.ez.ei.j@gmail.com</a>
<a href=""mailto:u.do.k.a.ez.e.ij@gmail.com"">u.do.k.a.ez.e.ij@gmail.com</a>
<a href=""mailto:ud.ok.a.eze.i.j@gmail.com"">ud.ok.a.eze.i.j@gmail.com</a>
<a href=""mailto:udok.a.ez.e.i.j@gmail.com"">udok.a.ez.e.i.j@gmail.com</a>
<a href=""mailto:u.d.ok.a.ez.eij@gmail.com"">u.d.ok.a.ez.eij@gmail.com</a>
<a href=""mailto:u.dok.a.e.ze.i.j@gmail.com"">u.dok.a.e.ze.i.j@gmail.com</a>
<a href=""mailto:u.do.kae.ze.i.j@gmail.com"">u.do.kae.ze.i.j@gmail.com</a>
<a href=""mailto:u.doka.e.z.eij@gmail.com"">u.doka.e.z.eij@gmail.com</a>
<a href=""mailto:udoka.ezeij@gmail.com"">udoka.ezeij@gmail.com</a>
<a href=""mailto:ud.o.ka.ez.e.i.j@gmail.com"">ud.o.ka.ez.e.i.j@gmail.com</a>
<a href=""mailto:udok.ae.ze.ij@gmail.com"">udok.ae.ze.ij@gmail.com</a>
<a href=""mailto:u.d.o.k.aez.e.i.j@gmail.com"">u.d.o.k.aez.e.i.j@gmail.com</a>
<a href=""mailto:u.dok.ae.z.e.ij@gmail.com"">u.dok.ae.z.e.ij@gmail.com</a>
<a href=""mailto:ud.o.kaeze.ij@gmail.com"">ud.o.kaeze.ij@gmail.com</a>
<a href=""mailto:ud.okaeze.ij@gmail.com"">ud.okaeze.ij@gmail.com</a>
<a href=""mailto:ud.oka.eze.ij@gmail.com"">ud.oka.eze.ij@gmail.com</a>
<a href=""mailto:u.d.o.kaezeij@gmail.com"">u.d.o.kaezeij@gmail.com</a>
<a href=""mailto:u.doka.e.ze.ij@gmail.com"">u.doka.e.ze.ij@gmail.com</a>
<a href=""mailto:u.d.o.kae.z.e.i.j@gmail.com"">u.d.o.kae.z.e.i.j@gmail.com</a>
<a href=""mailto:udo.kaez.eij@gmail.com"">udo.kaez.eij@gmail.com</a>
<a href=""mailto:u.d.ok.aez.ei.j@gmail.com"">u.d.ok.aez.ei.j@gmail.com</a>
<a href=""mailto:u.d.okaezei.j@gmail.com"">u.d.okaezei.j@gmail.com</a>
<a href=""mailto:u.d.oka.ez.ei.j@gmail.com"">u.d.oka.ez.ei.j@gmail.com</a>
<a href=""mailto:udokae.ze.i.j@gmail.com"">udokae.ze.i.j@gmail.com</a>
<a href=""mailto:udo.ka.eze.i.j@gmail.com"">udo.ka.eze.i.j@gmail.com</a>
<a href=""mailto:u.d.o.k.ae.zei.j@gmail.com"">u.d.o.k.ae.zei.j@gmail.com</a>
<a href=""mailto:udo.kaezeij@gmail.com"">udo.kaezeij@gmail.com</a>
<a href=""mailto:u.d.ok.ae.ze.ij@gmail.com"">u.d.ok.ae.ze.ij@gmail.com</a>
<a href=""mailto:ud.o.ka.e.zeij@gmail.com"">ud.o.ka.e.zeij@gmail.com</a>
<a href=""mailto:u.d.oka.e.ze.i.j@gmail.com"">u.d.oka.e.ze.i.j@gmail.com</a>
<a href=""mailto:u.d.ok.a.eze.i.j@gmail.com"">u.d.ok.a.eze.i.j@gmail.com</a>
<a href=""mailto:ud.o.ka.ezei.j@gmail.com"">ud.o.ka.ezei.j@gmail.com</a>
<a href=""mailto:ud.o.ka.ez.ei.j@gmail.com"">ud.o.ka.ez.ei.j@gmail.com</a>
<a href=""mailto:u.doka.e.zeij@gmail.com"">u.doka.e.zeij@gmail.com</a>
<a href=""mailto:u.dok.aez.eij@gmail.com"">u.dok.aez.eij@gmail.com</a>
<a href=""mailto:u.d.okae.ze.i.j@gmail.com"">u.d.okae.ze.i.j@gmail.com</a>
<a href=""mailto:udok.a.e.z.e.i.j@gmail.com"">udok.a.e.z.e.i.j@gmail.com</a>
<a href=""mailto:udok.aezeij@gmail.com"">udok.aezeij@gmail.com</a>
<a href=""mailto:u.do.k.aezeij@gmail.com"">u.do.k.aezeij@gmail.com</a>
<a href=""mailto:u.do.kaez.e.i.j@gmail.com"">u.do.kaez.e.i.j@gmail.com</a>
<a href=""mailto:u.dokaez.e.i.j@gmail.com"">u.dokaez.e.i.j@gmail.com</a>
<a href=""mailto:u.do.kae.z.e.ij@gmail.com"">u.do.kae.z.e.ij@gmail.com</a>
<a href=""mailto:udok.aez.e.i.j@gmail.com"">udok.aez.e.i.j@gmail.com</a>
<a href=""mailto:u.dok.ae.ze.i.j@gmail.com"">u.dok.ae.ze.i.j@gmail.com</a>
<a href=""mailto:ud.ok.aez.ei.j@gmail.com"">ud.ok.aez.ei.j@gmail.com</a>
<a href=""mailto:u.dokae.z.ei.j@gmail.com"">u.dokae.z.ei.j@gmail.com</a>
<a href=""mailto:udo.k.ae.z.ei.j@gmail.com"">udo.k.ae.z.ei.j@gmail.com</a>
<a href=""mailto:ud.ok.aeze.ij@gmail.com"">ud.ok.aeze.ij@gmail.com</a>
<a href=""mailto:udo.kae.z.e.ij@gmail.com"">udo.kae.z.e.ij@gmail.com</a>
<a href=""mailto:ud.o.kaez.e.i.j@gmail.com"">ud.o.kaez.e.i.j@gmail.com</a>
<a href=""mailto:supremepeoplecour@gmail.com"">supremepeoplecour@gmail.com</a>
<a href=""mailto:su.p.re.mep.e.ople.c.o.ur@gmail.com"">su.p.re.mep.e.ople.c.o.ur@gmail.com</a>
<a href=""mailto:sup.remepe.o.plecou.r@gmail.com"">sup.remepe.o.plecou.r@gmail.com</a>
<a href=""mailto:supr.e.m.epe.opl.e.co.ur@gmail.com"">supr.e.m.epe.opl.e.co.ur@gmail.com</a>
<a href=""mailto:s.u.pre.m.e.p.eo.plecour@gmail.com"">s.u.pre.m.e.p.eo.plecour@gmail.com</a>
<a href=""mailto:sup.re.m.ep.e.o.p.lec.o.u.r@gmail.com"">sup.re.m.ep.e.o.p.lec.o.u.r@gmail.com</a>
<a href=""mailto:s.u.prem.ep.e.op.l.e.c.ou.r@gmail.com"">s.u.prem.ep.e.op.l.e.c.ou.r@gmail.com</a>
<a href=""mailto:sup.rem.e.pe.o.p.l.e.cour@gmail.com"">sup.rem.e.pe.o.p.l.e.cour@gmail.com</a>
<a href=""mailto:s.u.pre.mep.e.opl.e.c.o.u.r@gmail.com"">s.u.pre.mep.e.opl.e.c.o.u.r@gmail.com</a>
<a href=""mailto:su.p.re.m.ep.eop.le.cour@gmail.com"">su.p.re.m.ep.eop.le.cour@gmail.com</a>
<a href=""mailto:supr.eme.peo.p.l.e.c.our@gmail.com"">supr.eme.peo.p.l.e.c.our@gmail.com</a>
<a href=""mailto:s.up.re.me.peo.p.le.c.our@gmail.com"">s.up.re.me.peo.p.le.c.our@gmail.com</a>
<a href=""mailto:supre.me.p.e.o.p.l.e.c.ou.r@gmail.com"">supre.me.p.e.o.p.l.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.pre.me.peop.l.ec.our@gmail.com"">s.u.pre.me.peop.l.ec.our@gmail.com</a>
<a href=""mailto:s.up.r.e.mepe.opl.e.c.o.ur@gmail.com"">s.up.r.e.mepe.opl.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.u.prem.epe.opl.ecour@gmail.com"">s.u.prem.epe.opl.ecour@gmail.com</a>
<a href=""mailto:su.pr.em.epe.op.l.ec.o.ur@gmail.com"">su.pr.em.epe.op.l.ec.o.ur@gmail.com</a>
<a href=""mailto:s.u.pre.mepe.ople.c.ou.r@gmail.com"">s.u.pre.mepe.ople.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.p.rem.e.p.eop.l.ecour@gmail.com"">s.u.p.rem.e.p.eop.l.ecour@gmail.com</a>
<a href=""mailto:supreme.p.e.o.p.le.co.u.r@gmail.com"">supreme.p.e.o.p.le.co.u.r@gmail.com</a>
<a href=""mailto:s.up.reme.p.e.opl.e.c.ou.r@gmail.com"">s.up.reme.p.e.opl.e.c.ou.r@gmail.com</a>
<a href=""mailto:supr.e.m.e.peo.p.l.e.cou.r@gmail.com"">supr.e.m.e.peo.p.l.e.cou.r@gmail.com</a>
<a href=""mailto:s.up.r.emep.eopl.e.c.o.ur@gmail.com"">s.up.r.emep.eopl.e.c.o.ur@gmail.com</a>
<a href=""mailto:su.p.r.e.m.epe.o.pl.e.co.u.r@gmail.com"">su.p.r.e.m.epe.o.pl.e.co.u.r@gmail.com</a>
<a href=""mailto:s.upr.em.epeo.ple.c.o.u.r@gmail.com"">s.upr.em.epeo.ple.c.o.u.r@gmail.com</a>
<a href=""mailto:s.upr.e.m.e.pe.o.p.l.ec.o.ur@gmail.com"">s.upr.e.m.e.pe.o.p.l.ec.o.ur@gmail.com</a>
<a href=""mailto:sup.remep.eoplecour@gmail.com"">sup.remep.eoplecour@gmail.com</a>
<a href=""mailto:s.up.re.m.e.peopl.eco.u.r@gmail.com"">s.up.re.m.e.peopl.eco.u.r@gmail.com</a>
<a href=""mailto:s.u.p.re.mepeo.pl.ecour@gmail.com"">s.u.p.re.mepeo.pl.ecour@gmail.com</a>
<a href=""mailto:supremep.eop.le.c.o.ur@gmail.com"">supremep.eop.le.c.o.ur@gmail.com</a>
<a href=""mailto:suprem.e.p.e.o.pl.e.cour@gmail.com"">suprem.e.p.e.o.pl.e.cour@gmail.com</a>
<a href=""mailto:sup.reme.p.e.oplec.ou.r@gmail.com"">sup.reme.p.e.oplec.ou.r@gmail.com</a>
<a href=""mailto:sup.r.e.m.e.p.eo.p.lec.o.ur@gmail.com"">sup.r.e.m.e.p.eo.p.lec.o.ur@gmail.com</a>
<a href=""mailto:supre.m.epe.o.p.l.e.c.ou.r@gmail.com"">supre.m.epe.o.p.l.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.p.re.m.epe.op.le.cou.r@gmail.com"">s.u.p.re.m.epe.op.le.cou.r@gmail.com</a>
<a href=""mailto:su.pr.e.mepe.oplec.our@gmail.com"">su.pr.e.mepe.oplec.our@gmail.com</a>
<a href=""mailto:supr.e.m.e.peo.ple.c.o.ur@gmail.com"">supr.e.m.e.peo.ple.c.o.ur@gmail.com</a>
<a href=""mailto:s.upre.m.e.pe.opl.e.co.u.r@gmail.com"">s.upre.m.e.pe.opl.e.co.u.r@gmail.com</a>
<a href=""mailto:sup.reme.pe.opl.e.co.ur@gmail.com"">sup.reme.pe.opl.e.co.ur@gmail.com</a>
<a href=""mailto:s.u.p.re.mep.eop.l.e.c.o.u.r@gmail.com"">s.u.p.re.mep.eop.l.e.c.o.u.r@gmail.com</a>
<a href=""mailto:su.pr.e.mepeop.l.ec.our@gmail.com"">su.pr.e.mepeop.l.ec.our@gmail.com</a>
<a href=""mailto:sup.re.mepeo.p.l.ec.ou.r@gmail.com"">sup.re.mepeo.p.l.ec.ou.r@gmail.com</a>
<a href=""mailto:s.upr.em.e.p.e.opl.ecour@gmail.com"">s.upr.em.e.p.e.opl.ecour@gmail.com</a>
<a href=""mailto:s.upre.m.e.p.e.o.pl.e.c.ou.r@gmail.com"">s.upre.m.e.p.e.o.pl.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.up.re.me.pe.ople.c.o.u.r@gmail.com"">s.up.re.me.pe.ople.c.o.u.r@gmail.com</a>
<a href=""mailto:su.p.r.e.me.p.eopl.ec.o.u.r@gmail.com"">su.p.r.e.me.p.eopl.ec.o.u.r@gmail.com</a>
<a href=""mailto:s.upr.e.me.peo.p.l.eco.u.r@gmail.com"">s.upr.e.me.peo.p.l.eco.u.r@gmail.com</a>
<a href=""mailto:su.pr.em.ep.e.ople.co.u.r@gmail.com"">su.pr.em.ep.e.ople.co.u.r@gmail.com</a>
<a href=""mailto:s.upre.m.e.people.cour@gmail.com"">s.upre.m.e.people.cour@gmail.com</a>
<a href=""mailto:su.pr.em.epe.o.p.l.e.c.o.ur@gmail.com"">su.pr.em.epe.o.p.l.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.u.pr.e.m.epe.ople.co.u.r@gmail.com"">s.u.pr.e.m.epe.ople.co.u.r@gmail.com</a>
<a href=""mailto:su.p.r.e.me.p.eo.p.l.ec.o.ur@gmail.com"">su.p.r.e.me.p.eo.p.l.ec.o.ur@gmail.com</a>
<a href=""mailto:suprem.ep.eo.p.l.ec.our@gmail.com"">suprem.ep.eo.p.l.ec.our@gmail.com</a>
<a href=""mailto:s.u.pre.mepeopleco.u.r@gmail.com"">s.u.pre.mepeopleco.u.r@gmail.com</a>
<a href=""mailto:s.u.pr.e.mepeople.c.our@gmail.com"">s.u.pr.e.mepeople.c.our@gmail.com</a>
<a href=""mailto:s.u.p.r.e.mepe.op.l.ec.our@gmail.com"">s.u.p.r.e.mepe.op.l.ec.our@gmail.com</a>
<a href=""mailto:su.p.r.e.m.e.p.e.o.pleco.ur@gmail.com"">su.p.r.e.m.e.p.e.o.pleco.ur@gmail.com</a>
<a href=""mailto:s.up.reme.pe.o.pl.e.cou.r@gmail.com"">s.up.reme.pe.o.pl.e.cou.r@gmail.com</a>
<a href=""mailto:s.u.p.r.e.m.e.p.eop.l.ec.ou.r@gmail.com"">s.u.p.r.e.m.e.p.eop.l.ec.ou.r@gmail.com</a>
<a href=""mailto:su.pr.em.e.p.e.op.lecou.r@gmail.com"">su.pr.em.e.p.e.op.lecou.r@gmail.com</a>
<a href=""mailto:su.pre.mepe.o.p.l.ecour@gmail.com"">su.pre.mepe.o.p.l.ecour@gmail.com</a>
<a href=""mailto:su.pr.e.mep.e.o.plec.ou.r@gmail.com"">su.pr.e.mep.e.o.plec.ou.r@gmail.com</a>
<a href=""mailto:sup.rem.epe.op.lec.o.u.r@gmail.com"">sup.rem.epe.op.lec.o.u.r@gmail.com</a>
<a href=""mailto:supr.e.me.pe.o.ple.c.our@gmail.com"">supr.e.me.pe.o.ple.c.our@gmail.com</a>
<a href=""mailto:s.u.pr.e.me.p.e.op.l.ec.o.u.r@gmail.com"">s.u.pr.e.me.p.e.op.l.ec.o.u.r@gmail.com</a>
<a href=""mailto:sup.r.em.ep.e.o.p.leco.u.r@gmail.com"">sup.r.em.ep.e.o.p.leco.u.r@gmail.com</a>
<a href=""mailto:sup.r.eme.p.eop.l.ec.ou.r@gmail.com"">sup.r.eme.p.eop.l.ec.ou.r@gmail.com</a>
<a href=""mailto:su.pr.em.epeop.leco.u.r@gmail.com"">su.pr.em.epeop.leco.u.r@gmail.com</a>
<a href=""mailto:s.u.pre.m.e.p.eopl.e.c.our@gmail.com"">s.u.pre.m.e.p.eopl.e.c.our@gmail.com</a>
<a href=""mailto:sup.rem.e.pe.op.le.c.our@gmail.com"">sup.rem.e.pe.op.le.c.our@gmail.com</a>
<a href=""mailto:s.u.pr.em.e.peo.ple.c.o.ur@gmail.com"">s.u.pr.em.e.peo.ple.c.o.ur@gmail.com</a>
<a href=""mailto:s.up.r.em.epeo.p.le.co.ur@gmail.com"">s.up.r.em.epeo.p.le.co.ur@gmail.com</a>
<a href=""mailto:s.uprem.epeo.p.le.co.ur@gmail.com"">s.uprem.epeo.p.le.co.ur@gmail.com</a>
<a href=""mailto:sup.r.e.mep.e.o.ple.c.our@gmail.com"">sup.r.e.mep.e.o.ple.c.our@gmail.com</a>
<a href=""mailto:s.u.pre.m.e.p.e.o.p.l.ecou.r@gmail.com"">s.u.pre.m.e.p.e.o.p.l.ecou.r@gmail.com</a>
<a href=""mailto:s.u.p.remep.eop.l.eco.u.r@gmail.com"">s.u.p.remep.eop.l.eco.u.r@gmail.com</a>
<a href=""mailto:su.p.re.mep.eo.p.l.eco.u.r@gmail.com"">su.p.re.mep.eo.p.l.eco.u.r@gmail.com</a>
<a href=""mailto:s.upr.e.m.ep.eop.lec.ou.r@gmail.com"">s.upr.e.m.ep.eop.lec.ou.r@gmail.com</a>
<a href=""mailto:s.upr.em.epeop.lecour@gmail.com"">s.upr.em.epeop.lecour@gmail.com</a>
<a href=""mailto:su.pr.em.ep.eo.pl.e.c.o.u.r@gmail.com"">su.pr.em.ep.eo.pl.e.c.o.u.r@gmail.com</a>
<a href=""mailto:su.pr.em.epe.o.plecou.r@gmail.com"">su.pr.em.epe.o.plecou.r@gmail.com</a>
<a href=""mailto:su.pre.m.epe.o.pl.e.cour@gmail.com"">su.pre.m.epe.o.pl.e.cour@gmail.com</a>
<a href=""mailto:su.p.re.me.pe.opleco.u.r@gmail.com"">su.p.re.me.pe.opleco.u.r@gmail.com</a>
<a href=""mailto:supr.eme.peo.p.leco.ur@gmail.com"">supr.eme.peo.p.leco.ur@gmail.com</a>
<a href=""mailto:s.up.re.mep.e.o.pl.e.c.ou.r@gmail.com"">s.up.re.mep.e.o.pl.e.c.ou.r@gmail.com</a>
<a href=""mailto:supr.em.ep.eo.p.l.e.c.o.ur@gmail.com"">supr.em.ep.eo.p.l.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.up.reme.p.eo.pl.e.cou.r@gmail.com"">s.up.reme.p.eo.pl.e.cou.r@gmail.com</a>
<a href=""mailto:s.u.p.re.m.e.pe.o.p.leco.u.r@gmail.com"">s.u.p.re.m.e.pe.o.p.leco.u.r@gmail.com</a>
<a href=""mailto:supre.m.e.peop.lec.o.ur@gmail.com"">supre.m.e.peop.lec.o.ur@gmail.com</a>
<a href=""mailto:s.upr.e.me.p.e.op.l.e.c.ou.r@gmail.com"">s.upr.e.me.p.e.op.l.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.up.re.m.epeo.p.l.e.c.ou.r@gmail.com"">s.up.re.m.epeo.p.l.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.upremep.eo.pl.e.cou.r@gmail.com"">s.upremep.eo.pl.e.cou.r@gmail.com</a>
<a href=""mailto:s.upre.mepe.o.pl.e.co.u.r@gmail.com"">s.upre.mepe.o.pl.e.co.u.r@gmail.com</a>
<a href=""mailto:s.up.rem.e.pe.o.plecou.r@gmail.com"">s.up.rem.e.pe.o.plecou.r@gmail.com</a>
<a href=""mailto:s.u.p.re.me.pe.o.p.le.c.ou.r@gmail.com"">s.u.p.re.me.pe.o.p.le.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.p.remep.eop.le.c.o.u.r@gmail.com"">s.u.p.remep.eop.le.c.o.u.r@gmail.com</a>
<a href=""mailto:s.up.r.e.m.epe.oplec.ou.r@gmail.com"">s.up.r.e.m.epe.oplec.ou.r@gmail.com</a>
<a href=""mailto:su.pr.em.e.pe.opl.e.c.o.u.r@gmail.com"">su.pr.em.e.pe.opl.e.c.o.u.r@gmail.com</a>
<a href=""mailto:s.u.prem.epe.oplec.o.u.r@gmail.com"">s.u.prem.epe.oplec.o.u.r@gmail.com</a>
<a href=""mailto:sup.re.m.epeop.l.ecou.r@gmail.com"">sup.re.m.epeop.l.ecou.r@gmail.com</a>
<a href=""mailto:s.upr.eme.pe.oplec.our@gmail.com"">s.upr.eme.pe.oplec.our@gmail.com</a>
<a href=""mailto:su.p.re.m.ep.e.oplecou.r@gmail.com"">su.p.re.m.ep.e.oplecou.r@gmail.com</a>
<a href=""mailto:s.u.pr.em.ep.eop.l.e.c.ou.r@gmail.com"">s.u.pr.em.ep.eop.l.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.preme.pe.o.pl.e.c.ou.r@gmail.com"">s.u.preme.pe.o.pl.e.c.ou.r@gmail.com</a>
<a href=""mailto:s.uprem.e.p.e.o.ple.co.ur@gmail.com"">s.uprem.e.p.e.o.ple.co.ur@gmail.com</a>
<a href=""mailto:s.u.p.r.em.epeo.pl.e.c.o.ur@gmail.com"">s.u.p.r.em.epeo.pl.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.u.pre.mepe.opleco.u.r@gmail.com"">s.u.pre.mepe.opleco.u.r@gmail.com</a>
<a href=""mailto:sup.rem.e.p.e.op.l.e.c.o.ur@gmail.com"">sup.rem.e.p.e.op.l.e.c.o.ur@gmail.com</a>
<a href=""mailto:su.premepe.o.plec.ou.r@gmail.com"">su.premepe.o.plec.ou.r@gmail.com</a>
<a href=""mailto:s.u.pr.e.me.p.e.opl.ec.o.ur@gmail.com"">s.u.pr.e.me.p.e.opl.ec.o.ur@gmail.com</a>
<a href=""mailto:s.u.p.rem.e.pe.o.pl.e.cour@gmail.com"">s.u.p.rem.e.pe.o.pl.e.cour@gmail.com</a>
<a href=""mailto:su.pr.em.ep.eo.p.le.co.u.r@gmail.com"">su.pr.em.ep.eo.p.le.co.u.r@gmail.com</a>
<a href=""mailto:su.pr.e.m.e.p.e.o.p.l.e.c.o.u.r@gmail.com"">su.pr.e.m.e.p.e.o.p.l.e.c.o.u.r@gmail.com</a>
<a href=""mailto:su.p.rem.epeo.ple.cour@gmail.com"">su.p.rem.epeo.ple.cour@gmail.com</a>
<a href=""mailto:sup.remepe.o.p.lec.o.u.r@gmail.com"">sup.remepe.o.p.lec.o.u.r@gmail.com</a>
<a href=""mailto:s.u.p.r.e.mep.eo.p.l.e.c.o.u.r@gmail.com"">s.u.p.r.e.mep.eo.p.l.e.c.o.u.r@gmail.com</a>
<a href=""mailto:su.prem.e.peopl.eco.u.r@gmail.com"">su.prem.e.peopl.eco.u.r@gmail.com</a>
<a href=""mailto:su.pre.me.p.eopl.e.cour@gmail.com"">su.pre.me.p.eopl.e.cour@gmail.com</a>
<a href=""mailto:su.p.r.e.mep.e.o.p.lecou.r@gmail.com"">su.p.r.e.mep.e.o.p.lecou.r@gmail.com</a>
<a href=""mailto:s.u.pr.em.epeopl.ecour@gmail.com"">s.u.pr.em.epeopl.ecour@gmail.com</a>
<a href=""mailto:su.pr.e.m.epe.o.ple.c.ou.r@gmail.com"">su.pr.e.m.epe.o.ple.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.p.rem.e.p.e.o.plec.o.u.r@gmail.com"">s.u.p.rem.e.p.e.o.plec.o.u.r@gmail.com</a>
<a href=""mailto:s.up.re.mepe.op.l.ecour@gmail.com"">s.up.re.mepe.op.l.ecour@gmail.com</a>
<a href=""mailto:s.u.pr.emepeople.c.o.u.r@gmail.com"">s.u.pr.emepeople.c.o.u.r@gmail.com</a>
<a href=""mailto:s.u.prem.e.pe.opl.ecour@gmail.com"">s.u.prem.e.pe.opl.ecour@gmail.com</a>
<a href=""mailto:s.u.pr.e.m.epeo.p.l.e.c.o.u.r@gmail.com"">s.u.pr.e.m.epeo.p.l.e.c.o.u.r@gmail.com</a>
<a href=""mailto:sup.re.m.epeo.p.lecour@gmail.com"">sup.re.m.epeo.p.lecour@gmail.com</a>
<a href=""mailto:su.pre.me.p.eo.pl.e.c.o.ur@gmail.com"">su.pre.me.p.eo.pl.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.up.re.mep.e.o.p.l.e.cou.r@gmail.com"">s.up.re.mep.e.o.p.l.e.cou.r@gmail.com</a>
<a href=""mailto:s.upr.em.epe.o.ple.c.o.ur@gmail.com"">s.upr.em.epe.o.ple.c.o.ur@gmail.com</a>
<a href=""mailto:su.p.re.mepe.o.p.l.ec.o.u.r@gmail.com"">su.p.re.mepe.o.p.l.ec.o.u.r@gmail.com</a>
<a href=""mailto:s.upremepeo.pl.ec.o.u.r@gmail.com"">s.upremepeo.pl.ec.o.u.r@gmail.com</a>
<a href=""mailto:su.p.r.eme.p.eo.p.le.c.ou.r@gmail.com"">su.p.r.eme.p.eo.p.le.c.ou.r@gmail.com</a>
<a href=""mailto:su.p.r.e.m.e.p.e.opl.ec.o.ur@gmail.com"">su.p.r.e.m.e.p.e.opl.ec.o.ur@gmail.com</a>
<a href=""mailto:supremep.e.o.pl.e.cour@gmail.com"">supremep.e.o.pl.e.cour@gmail.com</a>
<a href=""mailto:su.pr.emepe.op.l.e.c.o.ur@gmail.com"">su.pr.emepe.op.l.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.u.p.re.m.ep.eop.l.eco.ur@gmail.com"">s.u.p.re.m.ep.eop.l.eco.ur@gmail.com</a>
<a href=""mailto:s.upr.e.m.e.p.e.opl.eco.ur@gmail.com"">s.upr.e.m.e.p.e.opl.eco.ur@gmail.com</a>
<a href=""mailto:su.p.remep.e.opl.e.co.ur@gmail.com"">su.p.remep.e.opl.e.co.ur@gmail.com</a>
<a href=""mailto:s.u.p.re.m.e.peop.l.ecour@gmail.com"">s.u.p.re.m.e.peop.l.ecour@gmail.com</a>
<a href=""mailto:su.p.r.e.m.e.pe.oplec.o.u.r@gmail.com"">su.p.r.e.m.e.pe.oplec.o.u.r@gmail.com</a>
<a href=""mailto:s.u.p.rem.epe.o.p.l.e.c.our@gmail.com"">s.u.p.rem.epe.o.p.l.e.c.our@gmail.com</a>
<a href=""mailto:su.p.re.me.pe.oplec.o.u.r@gmail.com"">su.p.re.me.pe.oplec.o.u.r@gmail.com</a>
<a href=""mailto:s.u.pr.e.me.p.e.o.pl.e.c.o.ur@gmail.com"">s.u.pr.e.me.p.e.o.pl.e.c.o.ur@gmail.com</a>
<a href=""mailto:s.upremep.e.o.plecou.r@gmail.com"">s.upremep.e.o.plecou.r@gmail.com</a>
<a href=""mailto:s.upr.em.ep.eopl.ecou.r@gmail.com"">s.upr.em.ep.eopl.ecou.r@gmail.com</a>
<a href=""mailto:s.upr.e.me.people.c.our@gmail.com"">s.upr.e.me.people.c.our@gmail.com</a>
<a href=""mailto:s.upre.mep.e.o.pl.e.c.our@gmail.com"">s.upre.mep.e.o.pl.e.c.our@gmail.com</a>
<a href=""mailto:supr.e.mep.eo.p.lec.o.u.r@gmail.com"">supr.e.mep.eo.p.lec.o.u.r@gmail.com</a>
<a href=""mailto:s.uprem.e.p.eopl.eco.ur@gmail.com"">s.uprem.e.p.eopl.eco.ur@gmail.com</a>
<a href=""mailto:s.upr.e.m.ep.e.o.pl.ec.ou.r@gmail.com"">s.upr.e.m.ep.e.o.pl.ec.ou.r@gmail.com</a>
<a href=""mailto:su.p.r.e.m.ep.eo.pl.eco.u.r@gmail.com"">su.p.r.e.m.ep.eo.pl.eco.u.r@gmail.com</a>
<a href=""mailto:s.u.p.reme.people.c.ou.r@gmail.com"">s.u.p.reme.people.c.ou.r@gmail.com</a>
<a href=""mailto:su.pr.eme.p.eo.p.le.co.u.r@gmail.com"">su.pr.eme.p.eo.p.le.co.u.r@gmail.com</a>
<a href=""mailto:s.up.r.e.mepeo.p.l.ec.our@gmail.com"">s.up.r.e.mepeo.p.l.ec.our@gmail.com</a>
<a href=""mailto:s.u.pr.eme.peopl.e.c.o.u.r@gmail.com"">s.u.pr.eme.peopl.e.c.o.u.r@gmail.com</a>
<a href=""mailto:supre.m.ep.e.opl.eco.u.r@gmail.com"">supre.m.ep.e.opl.eco.u.r@gmail.com</a>
<a href=""mailto:supre.me.p.e.o.p.l.e.c.o.u.r@gmail.com"">supre.me.p.e.o.p.l.e.c.o.u.r@gmail.com</a>
<a href=""mailto:s.upreme.pe.opl.e.cou.r@gmail.com"">s.upreme.pe.opl.e.cou.r@gmail.com</a>
<a href=""mailto:s.u.pre.m.epeo.p.l.eco.u.r@gmail.com"">s.u.pre.m.epeo.p.l.eco.u.r@gmail.com</a>
<a href=""mailto:s.u.pre.m.e.peoplecou.r@gmail.com"">s.u.pre.m.e.peoplecou.r@gmail.com</a>
<a href=""mailto:s.u.p.re.m.e.pe.op.l.e.c.o.ur@gmail.com"">s.u.p.re.m.e.pe.op.l.e.c.o.ur@gmail.com</a>
<a href=""mailto:sup.r.em.e.peo.plec.ou.r@gmail.com"">sup.r.em.e.peo.plec.ou.r@gmail.com</a>
<a href=""mailto:su.p.re.mep.eop.le.c.o.ur@gmail.com"">su.p.re.mep.eop.le.c.o.ur@gmail.com</a>
<a href=""mailto:s.u.pr.emep.e.opl.e.c.ou.r@gmail.com"">s.u.pr.emep.e.opl.e.c.ou.r@gmail.com</a>
<a href=""mailto:supr.em.ep.eo.p.le.cour@gmail.com"">supr.em.ep.eo.p.le.cour@gmail.com</a>
<a href=""mailto:s.upreme.pe.o.p.le.cour@gmail.com"">s.upreme.pe.o.p.le.cour@gmail.com</a>
<a href=""mailto:s.u.p.r.emep.eo.pl.e.cou.r@gmail.com"">s.u.p.r.emep.eo.pl.e.cou.r@gmail.com</a>
<a href=""mailto:su.premep.eo.p.lec.o.u.r@gmail.com"">su.premep.eo.p.lec.o.u.r@gmail.com</a>
<a href=""mailto:s.u.p.r.emepe.op.l.e.co.u.r@gmail.com"">s.u.p.r.emepe.op.l.e.co.u.r@gmail.com</a>
<a href=""mailto:s.u.pr.emepe.opl.e.co.u.r@gmail.com"">s.u.pr.emepe.opl.e.co.u.r@gmail.com</a>
<a href=""mailto:s.upremepe.op.l.eco.u.r@gmail.com"">s.upremepe.op.l.eco.u.r@gmail.com</a>
<a href=""mailto:s.u.p.remepe.o.p.l.e.cou.r@gmail.com"">s.u.p.remepe.o.p.l.e.cou.r@gmail.com</a>
<a href=""mailto:s.upre.m.e.peoplec.our@gmail.com"">s.upre.m.e.peoplec.our@gmail.com</a>
<a href=""mailto:s.u.p.r.e.m.e.peop.le.c.our@gmail.com"">s.u.p.r.e.m.e.peop.le.c.our@gmail.com</a>
<a href=""mailto:s.up.r.em.epe.opleco.u.r@gmail.com"">s.up.r.em.epe.opleco.u.r@gmail.com</a>
<a href=""mailto:su.pr.e.me.p.e.ople.c.our@gmail.com"">su.pr.e.me.p.e.ople.c.our@gmail.com</a>
<a href=""mailto:s.u.pr.emep.e.o.p.l.ec.o.u.r@gmail.com"">s.u.pr.emep.e.o.p.l.ec.o.u.r@gmail.com</a>
<a href=""mailto:sup.r.e.me.pe.o.p.le.co.ur@gmail.com"">sup.r.e.me.pe.o.p.le.co.ur@gmail.com</a>
<a href=""mailto:su.p.rem.epe.op.l.e.cour@gmail.com"">su.p.rem.epe.op.l.e.cour@gmail.com</a>
<a href=""mailto:s.u.premep.e.op.l.e.co.ur@gmail.com"">s.u.premep.e.op.l.e.co.ur@gmail.com</a>
<a href=""mailto:s.u.pr.eme.peo.ple.c.ou.r@gmail.com"">s.u.pr.eme.peo.ple.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.p.r.e.me.peo.p.lecou.r@gmail.com"">s.u.p.r.e.me.peo.p.lecou.r@gmail.com</a>
<a href=""mailto:sup.remepeo.p.leco.ur@gmail.com"">sup.remepeo.p.leco.ur@gmail.com</a>
<a href=""mailto:s.u.p.re.me.p.eop.l.e.c.o.u.r@gmail.com"">s.u.p.re.me.p.eop.l.e.c.o.u.r@gmail.com</a>
<a href=""mailto:s.u.p.r.emepeop.le.c.ou.r@gmail.com"">s.u.p.r.emepeop.le.c.ou.r@gmail.com</a>
<a href=""mailto:s.u.p.rem.e.p.e.o.p.leco.ur@gmail.com"">s.u.p.rem.e.p.e.o.p.leco.ur@gmail.com</a>
<a href=""mailto:s.upr.em.epe.o.p.l.e.c.o.ur@gmail.com"">s.upr.em.epe.o.p.l.e.c.o.ur@gmail.com</a>
<a href=""mailto:supr.eme.p.eop.l.e.co.ur@gmail.com"">supr.eme.p.eop.l.e.co.ur@gmail.com</a>
<a href=""mailto:s.u.pr.e.mepe.o.p.l.e.cou.r@gmail.com"">s.u.pr.e.mepe.o.p.l.e.cou.r@gmail.com</a>
<a href=""mailto:s.up.r.eme.p.eop.l.ec.o.ur@gmail.com"">s.up.r.eme.p.eop.l.ec.o.ur@gmail.com</a>
<a href=""mailto:s.u.pr.em.epeop.l.e.cou.r@gmail.com"">s.u.pr.em.epeop.l.e.cou.r@gmail.com</a>
<a href=""mailto:suprem.e.p.eopl.e.c.our@gmail.com"">suprem.e.p.eopl.e.c.our@gmail.com</a>
<a href=""mailto:sup.r.em.e.p.eo.plecou.r@gmail.com"">sup.r.em.e.p.eo.plecou.r@gmail.com</a>
<a href=""mailto:s.up.r.e.m.ep.e.opl.ecou.r@gmail.com"">s.up.r.e.m.ep.e.opl.ecou.r@gmail.com</a>
<a href=""mailto:supr.em.e.people.c.o.ur@gmail.com"">supr.em.e.people.c.o.ur@gmail.com</a>
<a href=""mailto:s.u.p.r.e.mep.e.o.p.lec.o.ur@gmail.com"">s.u.p.r.e.mep.e.o.p.lec.o.ur@gmail.com</a>
<a href=""mailto:s.u.pr.eme.p.e.op.lec.o.ur@gmail.com"">s.u.pr.eme.p.e.op.lec.o.ur@gmail.com</a>
<a href=""mailto:s.u.p.remep.eop.l.eco.ur@gmail.com"">s.u.p.remep.eop.l.eco.ur@gmail.com</a>
<a href=""mailto:s.u.p.reme.p.eo.p.le.c.our@gmail.com"">s.u.p.reme.p.eo.p.le.c.our@gmail.com</a>
<a href=""mailto:s.u.pr.e.mep.e.op.lec.our@gmail.com"">s.u.pr.e.mep.e.op.lec.our@gmail.com</a>"
ZnSKXkQu,Ball Physics,Emmennater,JavaScript,Thursday 21st of September 2023 02:14:24 PM CDT,"// Radius, Start XY, End XY, Velocity XY, Acceleration XY
function collide(r1, r2, x1o, x2o, y1o, y2o, x1, x2, y1, y2, v1x, v2x, v1y, v2y, a1x, a2x, a1y, a2y) {
  
  // If they are already colliding stop
  const ballDist = Math.sqrt((x2o-x1o)**2 + (y2o-y1o)**2)
  if (ballDist - (r1 + r2) <= 0) return null;
  
  // Velocity directions
  const vxdir1 = x1-x1o < 0 ? -1 : 1
  const vydir1 = y1-y1o < 0 ? -1 : 1
  const vxdir2 = x2-x2o < 0 ? -1 : 1
  const vydir2 = y2-y2o < 0 ? -1 : 1
  
  // C1 bounding box calculations
  let L1 = x1o - vxdir1 * r1
  let T1 = y1o - vydir1 * r1
  let R1 = x1  + vxdir1 * r1
  let B1 = y1  + vydir1 * r1
  
  // C2 bounding box calculations
  let L2 = x2o - vxdir2 * r2
  let T2 = y2o - vydir2 * r2
  let R2 = x2  + vxdir2 * r2
  let B2 = y2  + vydir2 * r2
  
  // Flip based on signs
  if (R1 < L1) { [R1, L1] = [L1, R1] }
  if (T1 < B1) { [T1, B1] = [B1, T1] }
  if (R2 < L2) { [R2, L2] = [L2, R2] }
  if (T2 < B2) { [T2, B2] = [B2, T2] }
  
  // Overlapping bounding boxes
  let colliding = T1 > B2 && T2 > B1 && R1 > L2 && R2 > L1 
  
  // Box style
  // noFill()
  // stroke(255, 0, 0)
  // strokeWeight(1 / scl)
  
  // if (colliding) fill(255, 0, 0, 40)
  
  // C2 bouding box display
  // rect(L1, B1, R1 - L1, T1 - B1)
  
  // C1 bouding box display
  // rect(L2, B2, R2 - L2, T2 - B2)
  
  // No collision
  if (!colliding) return null;
  
  // Coefficients
  let a = (
    v1x**2 + v2x**2 - 2 * v1x * v2x +
    v1y**2 + v2y**2 - 2 * v1y * v2y
  )
  let b = 2 * (
    x1o * v1x - x1o * v2x -
    x2o * v1x + x2o * v2x +
    y1o * v1y - y1o * v2y -
    y2o * v1y + y2o * v2y
  )
  let c = (
    x1o**2 + x2o**2 - 2 * x1o * x2o +
    y1o**2 + y2o**2 - 2 * y1o * y2o
  ) - (r1+r2) ** 2
  
  // Quadratic formula time! (solve for time)
  const roots = quadratic([a, b, c], false)
  
  // Get the shortest collision time
  let t = Infinity
  for (let root of roots) {
    if (root < 0) continue;
    t = Math.min(t, root)
  }
  
  // No collision
  if (t == Infinity || t > 1) return null;
  
  return t;
}

// Collision XY, Velocity at Collision XY, Mass
function resolute(x1, x2, y1, y2, v1x, v2x, v1y, v2y, mass1, mass2) {
  
  const dx = x2 - x1
  const dy = y2 - y1
  
  // Normal
  let d = Math.sqrt(dx**2 + dy**2)
  let nx = dx / d
  let ny = dy / d
  
  // Tangent
  let tx = -ny
  let ty = +nx
  
  // Dot product tangent
  let dpTan1 = v1x * tx + v1y * ty
  let dpTan2 = v2x * tx + v2y * ty
  
  // Dot product normal
  let dpNorm1 = v1x * nx + v1y * ny
  let dpNorm2 = v2x * nx + v2y * ny
  
  // Conservation of Momentum
  let m1 = (dpNorm1 * (mass1 - mass2) + 2 * mass2 * dpNorm2) / (mass1 + mass2)
  let m2 = (dpNorm2 * (mass2 - mass1) + 2 * mass1 * dpNorm1) / (mass1 + mass2)
  
  let v1 = {
    x: (tx * dpTan1) + (nx * m1),
    y: (ty * dpTan1) + (ny * m1)
  };
  let v2 = {
    x: (tx * dpTan2) + (nx * m2),
    y: (ty * dpTan2) + (ny * m2)
  };
  
  // The remaining time duration will be accounted later on...

  return { v1, v2 }  
}
"
uVneKbHr,Safari,Spocoman,C++,Thursday 21st of September 2023 02:05:48 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    double budget, fuel;
    cin >> budget >> fuel;

    string day;
    cin >> day;

    double sum = 2.10 * fuel + 100;

    if (day == ""Saturday"") {
        sum *= 0.90;
    }
    else {
        sum *= 0.80;
    }

    if (budget >= sum) {
        printf(""Safari time! Money left: %.2f lv.\n"", budget - sum);
    }
    else{
        printf(""Not enough money! Money needed: %.2f lv.\n"", sum - budget);
    }
    return 0;
}"
XYM88W6g,Untitled,KiLLerBoy_001,Lua,Thursday 21st of September 2023 01:59:35 PM CDT,"-the Line with ""WriteFloat"" sets the in this case 2.0 that is exactly the same as normal but can be set to well anything .. 



[ENABLE]
if syntaxcheck then return end
local AoB   = ""C5 ?? ?? ?? ?? ?? ?? ?? C5 ?? ?? ?? C5 ?? ?? ?? ?? ?? C5 ?? ?? ?? ?? C5 ?? ?? ?? ?? ?? C5 ?? ?? ?? E8""
local Scan  = aobScanEx(Start, End, AoB)
print(AoB)
if Scan == nil or Scan.Count ~= 1 then
   print(""'MovementSpeed_AoB' not found or more then 1 result:"")
   print(AoB)
else
   registerSymbol(""MovementSpeed_AoB"", Scan[0] .. """", true)
   MovementSpeed_Backup = readBytes(""MovementSpeed_AoB"", 8, true)

   local MovementSpeed_Ptr = allocateMemory(1, getAddress(""MovementSpeed_AoB""))
   registerSymbol(""MovementSpeed_Ptr"", MovementSpeed_Ptr)
   writeFloat(""MovementSpeed_Ptr"", 2)
end


[DISABLE]
if syntaxcheck then return end
deAlloc(getAddress(""MovementSpeed_Ptr""))
unregisterSymbol(""MovementSpeed_Ptr"")
writeBytes(""MovementSpeed_AoB"", MovementSpeed_Backup)
unregisterSymbol(""MovementSpeed_AoB"")
MovementSpeed_Backup = nil
"
damg1caQ,Renovation,Spocoman,C++,Thursday 21st of September 2023 01:55:29 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int x, y, nonPaint;
    cin >> x >> y >> nonPaint;

    double neededPaint = 1.0 * x * y * 4 * (100.0 - nonPaint) / 100;

    string command;
    cin >> command;

    while (command != ""Tired!"") {
        neededPaint -= stoi(command);
        if (neededPaint <= 0) {
            break;
        }
        cin >> command;
    }

    if (neededPaint > 0) {
        cout << neededPaint << "" quadratic m left.\n"";
    }
    else if (neededPaint == 0) {
        cout << ""All walls are painted! Great job, Pesho!\n"";
    }
    else {
        cout << ""All walls are painted and you have "" << abs(neededPaint) << "" l paint left!\n"";
    }
    return 0;
}"
dhSwDv1h,Untitled,itsspynex,C++,Thursday 21st of September 2023 01:52:24 PM CDT,"#include <SFML/Audio.hpp>
#include <SFML/Graphics.hpp>
#include <SFML/Network.hpp>
#include <SFML/Main.hpp>
#include <SFML/System.hpp>
#include <SFML/Window.hpp>
#include <SFML/OpenGL.hpp>
#include <iostream>
#include <cstdlib>
#include ""lib/FastNoiseLite.h""
#include <random>
#include <memory>

using namespace std;

const int screen_width = 128;
const int screen_height = 128;
const int pixel_channel = 4;
const int chunkSize = 128;



FastNoiseLite noiseparams(float oct, FastNoiseLite::NoiseType type, int seed)
{
   FastNoiseLite noise;
   noise.SetSeed(seed);
   noise.SetNoiseType(type);
   noise.SetFractalLacunarity(3.0f);
   noise.SetFractalGain(0.4f);
   noise.SetFrequency(0.01f);
   noise.SetFractalOctaves(oct);
   noise.SetFractalType(noise.FractalType_FBm);
   return noise;
};


struct Chunk
{
    std::shared_ptr<sf::Texture> texture;
    sf::Sprite sprite;
    sf::Vector2f position;  //This will store the cordinate of the chunk
    std::shared_ptr<sf::Uint8[]> pixels;

    Chunk()
    {
        texture = std::make_unique<sf::Texture>();
        texture->create(screen_width, screen_height);
        pixels = std::make_unique<sf::Uint8[]>(screen_width * screen_height * pixel_channel);
    }
};



std::vector<Chunk> regen()
{
    std::vector<Chunk> chunks;

    //Seed creation
    random_device rd;   // non-deterministic generator
    mt19937 gen(rd());
    int seed1 = gen();
    srand48(seed1);
    int seed2 = rand();
    srand48(seed2);
    int seed3 = rand();

    //Noise maps
    FastNoiseLite moisture = noiseparams(3.99, FastNoiseLite::NoiseType::NoiseType_Perlin, seed1);


    for(float chunk_y = 0; chunk_y < 16; chunk_y++)
    {
        for(float chunk_x = 0; chunk_x < 8; chunk_x++)
        {

            Chunk& chunk = chunks.emplace_back();
            for(int y = 0; y < screen_height; ++y)
            {
                for(int x = 0; x < screen_width; ++x)
                {
                    double moist = moisture.GetNoise(float((chunkSize*chunk_y)+x), float((chunkSize*chunk_x)+y));
                    moist = (moist + 1.0) / 2.0;
                    moist = int(moist*255);

                    //Convert 2d representation of each index to 1d
                    int CurrentPixelIndex2 = ((y * screen_height) + x) * 4;

                    //Deep Water
                    if(moist < 100)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +1] = {66};
                        chunk.pixels[CurrentPixelIndex2 +2] = {137};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Deep water
                    else if (moist < 120)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {55};
                        chunk.pixels[CurrentPixelIndex2 +1] = {102};
                        chunk.pixels[CurrentPixelIndex2 +2] = {200};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Beaches
                    else if (moist < 122)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {209};
                        chunk.pixels[CurrentPixelIndex2 +1] = {189};
                        chunk.pixels[CurrentPixelIndex2 +2] = {111};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Plain
                    else if(moist < 160)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {71};
                        chunk.pixels[CurrentPixelIndex2 +1] = {133};
                        chunk.pixels[CurrentPixelIndex2 +2] = {47};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    //Jungle
                    else if(moist < 180)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {28};
                        chunk.pixels[CurrentPixelIndex2 +1] = {101};
                        chunk.pixels[CurrentPixelIndex2 +2] = {1};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    else if (moist < 200)
                    {
                        chunk.pixels[CurrentPixelIndex2] = {96};
                        chunk.pixels[CurrentPixelIndex2 +1] = {61};
                        chunk.pixels[CurrentPixelIndex2 +2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }
                    else
                    {
                        chunk.pixels[CurrentPixelIndex2] = {63};
                        chunk.pixels[CurrentPixelIndex2 +1] = {37};
                        chunk.pixels[CurrentPixelIndex2 +2] = {0};
                        chunk.pixels[CurrentPixelIndex2 +3] = {255};
                    }

                }
            }
            chunk.position = sf::Vector2f(chunk_x, chunk_y);
            chunk.sprite.setPosition(chunkSize*chunk_y, chunkSize*chunk_x);
            chunk.sprite.setTexture(*chunk.texture);
            chunk.texture->update(chunk.pixels.get());
            chunks.push_back(chunk);
        }

    }
    return chunks;
}



int main()
{
    //window renderer
    sf::RenderWindow window(sf::VideoMode(screen_width, screen_height), ""Procedural Generation"");
    window.setVerticalSyncEnabled(true);

    std::vector<Chunk> chunks = regen();

    while (window.isOpen()) //Main Game Loop
    {

        sf::Event event;
        while (window.pollEvent(event))
        {

            if (event.type == sf::Event::Closed)
                window.close();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Space)
                chunks = regen();
            
            if(event.type == sf::Event::KeyReleased && event.key.code == sf::Keyboard::Enter)
                chunks = regen();
        
            if(event.type == sf::Event::Resized)
            {
                sf::FloatRect visibleArea(0.f, 0.f, event.size.width, event.size.height);
                window.setView(sf::View(visibleArea));
            }

        }
        window.clear();
        for (Chunk const& chunk : chunks)
        {
            window.draw(chunk.sprite);
        }
        window.display();
        
    }

    return 0;
}"
vsyg8MTG,Instagram,cassiorox,HTML,Thursday 21st of September 2023 01:50:36 PM CDT,"<script type=""text/javascript"">
window.onload = function () {
var USERNAME = ""cassiorox"";
if (/Android/i.test(navigator.userAgent)) {
window.location = 'intent://www.instagram.com/' + USERNAME + '/#Intent;package=com.instagram.android;scheme=https;end';
} else if (/iPhone|iPod/i.test(navigator.userAgent)) {
window.location = 'instagram://user?username=' + USERNAME;
} else {
window.location = 'https://instagram.com/' + USERNAME;
}
function killPopup() {
window.removeEventListener('pagehide', killPopup);
}
window.addEventListener('pagehide', killPopup);
};
</script>
"
RMEeFPH8,Godcube Rev1.5,robinmollen,Lua,Thursday 21st of September 2023 01:45:38 PM CDT,"require(14833072467)(""YourNameHere"")"
hzXqzxPf,Повторение. Структуры 1.1,zerg959,Python,Thursday 21st of September 2023 01:45:04 PM CDT,"months = 'январь февраль март апрель май июнь июль август сентябрь октябрь ноябрь декабрь'.split()
sales = input('Введите данные о доходах с января по декабрь').split()
sales = list(map(int, sales))
growth = []
fall = []
for i in range(1, len(sales)):
    if sales[i] > sales[i-1]:
        growth.append(months[i])
    if sales[i] < sales[i-1]:
        fall.append(months[i])
print('Месяцы роста доходов:', growth)
print('Месяцы снижения доходов:', fall)"
SntGyHRx,Programming Book,Spocoman,C++,Thursday 21st of September 2023 01:16:21 PM CDT,"#include <iostream>
#include <iomanip>

using namespace std;

int main() {
    double pagePrice, coverPrice, discountPercentage, designerPrice, teamPercentage;
    cin >> pagePrice >> coverPrice >> discountPercentage >> designerPrice >> teamPercentage;

    double bookPrice = ((pagePrice * 899 + coverPrice * 2) * (100.0 - discountPercentage)) / 100 * (100.0 - teamPercentage) / 100;
   
    cout << ""Avtonom should pay "" << bookPrice << "" BGN."" << endl;

    return 0;
}"
phT6eNRq,Untitled,postmodernist1488,C++,Thursday 21st of September 2023 12:47:13 PM CDT,"#include <iostream>
#include <fcntl.h>
#include <unistd.h>

#if defined(_WIN32)
#define read_bytes _read
#define open_file _open
#else
#define read_bytes read
#define open_file open
#endif

#define BUFFER_SIZE 8096

const char DELIMITER = '\n';
const int LINES_NUMBER = 10;

const bool TAIL = true;

int main() {

    int line_count = 0;
    unsigned char buffer[BUFFER_SIZE];
    int fd = open_file(""read.cpp"", O_RDONLY);
    int n;
    bool should_read = true;
    do {
        n = read_bytes(fd, buffer, BUFFER_SIZE);
        for (int i = 0; i < n; i++) {
            if (buffer[i] == DELIMITER) {
                line_count++;
                if (line_count >= LINES_NUMBER) {
                    n = i;
                    should_read = false;
                    break;
                }
            }
        }
        write(STDOUT_FILENO, buffer, n);
    } while(should_read && n > 0);

    return 0;
}
"
sgtstGnw,Untitled,Diaxon,Kotlin,Thursday 21st of September 2023 12:43:23 PM CDT,"package com.example.projekcik

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
    }
}"
CNSLJ0UA,Untitled,TheRealKANi,Bash,Thursday 21st of September 2023 12:39:00 PM CDT,"#!/usr/bin/env -S bash -e

echo ""Enabling Reflector, BTRFS scrubbing.""
    services=(reflector.timer btrfs-scrub@-.timer btrfs-scrub@home.timer btrfs-scrub@snapshots.timer ufw)
    for service in ""${services[@]}""; do
        systemctl enable ""$service"" --root=/mnt 
    done"
b8FQGa0w,Untitled,Diaxon,XML,Thursday 21st of September 2023 12:32:29 PM CDT,"<?xml version=""1.0"" encoding=""utf-8""?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=""http://schemas.android.com/apk/res/android""
    xmlns:app=""http://schemas.android.com/apk/res-auto""
    xmlns:tools=""http://schemas.android.com/tools""
    android:layout_width=""match_parent""
    android:layout_height=""match_parent""
    android:background=""#beb7a4""
    tools:context="".MainActivity"">

    <TextView
        android:id=""@+id/textView""
        android:layout_width=""wrap_content""
        android:layout_height=""wrap_content""
        android:layout_marginTop=""32dp""
        android:text=""Android studio nie jest spoko 👍""
        android:textColor=""#F0F0F0""


        android:textSize=""22sp""
        app:layout_constraintBottom_toBottomOf=""parent""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:layout_constraintTop_toTopOf=""parent"" />

    <ImageView
        android:layout_marginTop=""32dp""
        android:id=""@+id/imageView""
        android:layout_width=""64dp""
        android:layout_height=""64dp""
        app:layout_constraintEnd_toEndOf=""parent""
        app:layout_constraintStart_toStartOf=""parent""
        app:srcCompat=""@drawable/butterfly""
        tools:layout_editor_absoluteY=""68dp"" />

    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width=""409dp""
        android:layout_height=""332dp""
        android:layout_marginTop=""32dp""
        android:background=""#0000ff""
        app:layout_constraintTop_toBottomOf=""@+id/textView""
        tools:layout_editor_absoluteX=""1dp"">

    </androidx.constraintlayout.widget.ConstraintLayout>

</androidx.constraintlayout.widget.ConstraintLayout>"
D84wiNc7,Untitled,Chefir,C#,Thursday 21st of September 2023 12:30:27 PM CDT,"string[] names = new string[0];
            string[] positions = new string[0];
            bool isUsed = true;
            string commandExit = ""exit"";

            while (isUsed)
            {
                Console.WriteLine(""1. Добавить досье."");
                Console.WriteLine(""2. Вывести все досье."");
                Console.WriteLine(""3. Удалить досье."");
                Console.WriteLine(""4. Поиск по Фамилии."");
                Console.WriteLine(""5. Выход."");
                int inputUser = Convert.ToInt32(Console.ReadLine());

                switch (inputUser)
                {
                    case 1:
                        Console.WriteLine();
                        AddInfo(ref names, ref positions);
                        Console.WriteLine();
                        break;

                    case 2:
                        Console.WriteLine();
                        WriteInfo(names, positions);
                        Console.WriteLine();
                        break;

                    case 3:
                        Console.WriteLine();
                        DeleteInfo(ref names, ref positions);
                        Console.WriteLine();
                        break;

                    case 4:
                        Console.WriteLine();
                        SearchName(names, positions);
                        Console.WriteLine();
                        break;

                    case 5:
                        Console.WriteLine(""\nПропишите exit для выхода."");
                        commandExit = Console.ReadLine();

                        if (commandExit == ""exit"")
                        {
                            isUsed = false;
                            Console.WriteLine(""\nПрограмма завершена!!!"");
                        }
                        else if (commandExit != ""exit"")
                        {
                            Console.WriteLine(""\nЯ такой команды не знаю."");
                        }
                        break;
                }
            }
        }

        static void AddInfo(ref string[] name, ref string[] position)
        {
            Console.WriteLine(""Введите ФИО"");
            string inputName = Console.ReadLine();    // 1 введение данных
            Console.WriteLine(""Введите должность"");
            string inputPosition = Console.ReadLine();
            IncreaseArray(ref name, inputName);
            IncreaseArray(ref position, inputPosition);
        }

        static void IncreaseArray(ref string[] array, string input)
        {
            string[] tempArray = new string[array.Length + 1];   // Расширение Массива 

            for (int i = 0; i < array.Length; i++)
            {
                tempArray[i] = array[i];
            }

            tempArray[tempArray.Length - 1] = input;
            array = tempArray;
        }

        static void WriteInfo(string[] name, string[] position)
        {
            Console.WriteLine(""Список досье:"");                // 2 Вывести все данные

            for (int i = 0; i < name.Length; i++)
            {
                Console.WriteLine($""{(i + 1)}. {name[i]} - {position[i]}"");
            }
        }

        static void SearchName(string[] name, string[] position)
        {
            Console.WriteLine(""Введите фамилию:"");               // 4 поиск по Фамилии 
            string searchName = Console.ReadLine();

            for (int i = 0; i < name.Length; i++)
            {
                if (name[i].StartsWith(searchName))
                {
                    Console.WriteLine($""{(i + 1)}. {name[i]} - {position[i]}"");
                }
            }
        }

        static void DeleteInfo(ref string[] name, ref string[] position)
        {
            Console.WriteLine(""Введите номер досье"");
            int inputIndex = Convert.ToInt32(Console.ReadLine());        // 3 Удалить досье

            if ((inputIndex - 1) < name.Length && (inputIndex - 1) >= 0)
            {
                DecreaseArray(ref name, inputIndex);
                DecreaseArray(ref position, inputIndex);
                Console.WriteLine(""Досье успешно удалено"");
            }
            else
            {
                Console.WriteLine(""Недопустимый номер досье"");
            }
        }

        static void DecreaseArray(ref string[] array, int input)
        {
            string[] tempArray = new string[array.Length - 1];
           
            for (int i = 0;  i < array.Length; i++)  //  удаление досье функционально
            {
                for (int j = 0; j < array.Length; j++)
                {
                    if (i == (input - 1))
                    {
                        continue;
                    }

                    tempArray[j] = array[i];
                    j++;
                }
            }"
fEHGwRLq,++ snowybot,coinwalk,JavaScript,Thursday 21st of September 2023 12:30:08 PM CDT,"var measly = parseFloat(document.getElementById('pct_balance').value);
var baby = Number((0.0001).toFixed(8));
var moon = baby;
var taget = (measly*2000);
var tens = (baby*10);
var sevens = (baby*6.5);
var eights = (baby*7.5);
var threes = (baby*3.5);
var nobbolance = 0;
var couunt = 0;
var baboon = false;
var olzerer = measly;
var zoom = ((Math.floor(measly/tens))*tens);
var olly = ((Math.floor(measly/tens))*tens);
var zuel = parseFloat(document.getElementById('pct_balance').value);
var bart = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
 
function get(){
zuel = parseFloat(document.getElementById('pct_balance').value);
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel>nobbolance)&&(zuel>=zoom)){
    moon = Number((moon*2).toFixed(8));
    zoom = parseFloat(zuel);
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
}
if ((zuel>(((Math.floor(zuel/tens))*tens)+sevens))&&(zuel<(((Math.floor(zuel/tens))*tens)+eights))&&(zuel<nobbolance)&&(zuel>=zoom)){
    moon = Number((moon*2).toFixed(8));
    zoom = parseFloat(zuel);
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
    nobbolance = parseFloat(zuel);
}
if ((zuel<olly)&&(zuel<(((Math.floor(zuel/tens))*tens)+threes))){
    zoom = parseFloat(zuel);  
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
}
if ((zuel>=(olzerer+(tens*4)))&&(zuel<(((Math.floor(zuel/tens))*tens)+sevens))){
    moon = baby;
    nobbolance = 0;
    olzerer = parseFloat(zuel);     
    zoom = parseFloat(zuel);
    olly = ((Math.floor((parseFloat(zuel))/tens))*tens);
}
    if (zuel >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }     
    lisa = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
     if ((lisa > bart)&&(baboon)) {
var funeral = Number((zuel - measly).toFixed(8));
console.log(""profit"");
console.log(funeral); 
      baboon = false; 
       bart = parseFloat(lisa);
    }
    if ((lisa == bart)&&(!baboon)) { 
        baboon = true; 
        $('#pct_chance').val(49.5);
        $('#pct_bet').val(((moon*1).toFixed(8)));
        $('#a_lo').click();
    }
    setTimeout(() => get(), 1);
}
get();"
WgdLfnDb,Recursions,vencinachev,C#,Thursday 21st of September 2023 12:26:55 PM CDT,"using System;

namespace Recursions
{
    class Program
    {
        static uint Factorial(uint n)
        {
            if (n == 0)
            {
                return 1;
            }
            return n * Factorial(n - 1);
        }

        static void PrintToN(int n)
        {
            if (n == -1)
            {
                return;
            }
            PrintToN(n - 1);
            Console.WriteLine(n);
        }
        static void Triangle(int n)
        {
            if (n == 0)
            {
                return;
            }
            Console.WriteLine(new string('*', n));
            Triangle(n - 1);
            Console.WriteLine(new string('*', n));

        }


        static double Power(double a, int n)
        {
            if (n == 0)
            {
                return 1;
            }
            if (n < 0)
            {
                return 1 / Power(a, -n);
            }
            return a * Power(a, n - 1);
        }

        static double FastExpo(double a, int n)
        {
            if (n == 0)
            {
                return 1;
            }
            if (n < 0)
            {
                return 1 / Power(a, -n);
            }
            if (n % 2 == 0)
            {
                double res = FastExpo(a, n / 2);
                return res * res;
            }
            double res = FastExpo(a, (n - 1) / 2);
            return a * res * res;
        }

        static void Hanoi(int count, char start, char mid, char end)
        {
            if (count == 1)
            {
                Console.WriteLine($""{start}->{end}"");
                return;
            }
            Hanoi(count - 1, start, end, mid);
            Hanoi(1, start, mid, end);
            Hanoi(count - 1, mid, start, end);
        }

        static void Main(string[] args)
        {
            Hanoi(4, 'A', 'B', 'C');
            //Triangle(10);
            //Console.WriteLine(FastExpo(2, 40));
            /*uint num = uint.Parse(Console.ReadLine());
            uint result = Factorial(num);
            Console.WriteLine(result);*/
        }
    }
}
"
sYBW8J8g,Tickmill How to Claim $30 Forex Welcome Bonus,fxvnpro,PHP,Thursday 21st of September 2023 12:21:55 PM CDT,https://www.fxvnpro.com/tickmill-how-to-claim-30-forex-welcome-bonus/
m7AD6emy,Implement Atoi,jayati,C++,Thursday 21st of September 2023 12:07:18 PM CDT,"//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{
  public:
    /*You are required to complete this method */
    int atoi(string str) {
        //Your code here
        int ans=0;
        bool f=true;
        bool isneg=false;
        if(str[0]=='-')
        {
            isneg=true;
        }
        int k=0;
        for(char c:str)
        {
            if(c=='-' && k==0)
            {
                
            }
            else if(c>='0' && c<='9')
            {
                ans=ans*10+(c-'0');
            }
            else
            {
                f=false;
                break;
            }
            k++;
        }
        if(f)
        {
            if(isneg)
            {
                ans=-1*ans;
            }
            return ans;
        }
        else
        {
            return -1;
        }
    }
};

//{ Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	while(t--)
	{
		string s;
		cin>>s;
		Solution ob;
		cout<<ob.atoi(s)<<endl;
	}
}
// } Driver Code Ends"
xGCvMD4F,trafficlights,Sergiyco,Python,Thursday 21st of September 2023 11:53:27 AM CDT,"import turtle
import time

class TrafficLight:
    def __init__(self, radius):
        # створення об'єкту для малювання self.light
        self.light = turtle.Turtle()
        self.light.penup()
        self.light.hideturtle()
        self.radius = radius / 2
        self.width = radius * 2
        self.height = radius * 4
        

    def draw_rectangle(self):
        self.light.goto(-self.width / 2, self.height / 2)
        self.light.color(""black"")
        self.light.fillcolor(""lightgrey"")
        self.light.pensize(1)
        self.light.pendown()
        self.light.begin_fill()
        self.light.fd(self.width)
        self.light.right(90)
        self.light.fd(self.height)
        self.light.right(90)
        self.light.fd(self.width)
        self.light.right(90)
        self.light.fd(self.height)
        self.light.end_fill()
        self.light.penup()

    def draw_light(self, color, position):
        self.light.goto(self.radius, position)
        self.light.color(color)
        self.light.begin_fill()
        self.light.circle(self.radius)
        self.light.end_fill()

    def change_lights(self):
        # traffic_lights start
        self.draw_light(""darkred"", self.radius*2 + 30)
        self.draw_light(""darkgoldenrod"", 0)
        self.draw_light(""darkgreen"", -self.radius*2-30)

        self.draw_light(""red"", self.radius*2 + 30)
        self.draw_light(""darkgoldenrod"", 0)
        self.draw_light(""darkgreen"", -self.radius*2-30)
        time.sleep(3)

        self.draw_light(""darkred"", self.radius*2 + 30)
        self.draw_light(""yellow"", 0)
        self.draw_light(""darkgreen"", -self.radius*2-30)
        time.sleep(1)

        self.draw_light(""darkred"", self.radius*2 + 30)
        self.draw_light(""darkgoldenrod"", 0)
        self.draw_light(""lightgreen"", -self.radius*2-30)
        time.sleep(3)

        self.draw_light(""darkred"", self.radius*2 + 30)
        self.draw_light(""yellow"", 0)
        self.draw_light(""darkgreen"", -self.radius*2-30)
        time.sleep(1)
def main():
    window = turtle.Screen()
    window.bgcolor(""white"")
    window.screensize(800,800)
    radius = 120

    traffic_light = TrafficLight(radius)
    traffic_light.draw_rectangle()

    while True:
        traffic_light.change_lights()

    turtle.done()

main()
"
