id,title,username,language,date,content
kdzVVMvw,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Saturday 9th of March 2024 11:55:49 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
09 March 2024"
8neCE3HX,Untitled,Rofyda_Elghadban1,C++,Saturday 9th of March 2024 11:52:13 AM CDT," #include <bits/stdc++.h> 
 #define ll long long
 #define ull unsigned long long
 #define pi 3.141592654
 #define NUM 1e18
 #define Mod  1'000'000'007
 #define fixed(n) fixed<<setprecision(n)
 #define cin(v) for(auto &i:v) cin >> i ;
 #define cout(v) for(auto &i:v) cout << i  <<"" "";
 #define vowel(x) (x=='e'||x=='a'||x=='i'||x=='o'||x=='u')
 #define small(x) (x>=97&&x<=122)
 #define capital(x) (x>=65&&x<=90)
 #define Tolower(s) transform(s.begin(),s.end(),s.begin(),::tolower);
 #define Toupper(s) transform(s.begin(),s.end(),s.begin(),::toupper); 
 #define sz(x) (int)(x.size())
 #define all(v) ((v).begin()), ((v).end())
 #define allr(v) ((v).rbegin()), ((v).rend())
 #define updmax(a,b) a=max(a,b)
 #define updmin(a,b) a=min(a,b)
 #define ceil(a,b) ((a/b)+(a%b?1:0))
 /* asc -> 1 2 3 ,des -> 3 2 1 */
 /******************************************************************************/
 using namespace std;
 void Rofyda_Elghadban(){
  #ifndef ONLINE_JUDGE   
    freopen(""input.txt"", ""r"", stdin), freopen(""output.txt"", ""w"", stdout);
   #endif
    ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 }
 /******************************************************************************/
 /*Monotonic Stack ""Next Greater Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(0);
  int i=1;
  while(i<v.size()){
    while(s.size()!=0&&v[s.top()]<v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i++;
  }
  return ans;
 }
 /******************************************************************************/
 /*Monotonic Stack ""Next Smaller Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(0);
  int i=1;
  while(i<v.size()){
    while(s.size()!=0&&v[s.top()]>v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i++;
  }
  return ans;
 }
 /******************************************************************************/
 /*Monotonic Stack ""Previous Smaller Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(v.size()-1);
  int i=v.size()-1;
  while(i>=1){
    while(s.size()!=0&&v[s.top()]>v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i--;
  }
  return ans;
 }
 /******************************************************************************/
 /*Monotonic Stack ""Previous Greater Element"" Zero base*/
 vector<int>monotonic_stack(int n,vector<int>&v){
  int sz=v.size();
  vector<int>ans(sz);
  for(int i=0;i<ans.size();i++){
    ans[i]=-1;
  }
  stack<int>s;
  s.push(v.size()-1);
  int i=v.size()-1;
  while(i>=1){
    while(s.size()!=0&&v[s.top()]<v[i]){
      ans[s.top()]=i;
      s.pop();
    }
    s.push(i);
    i--;
  }
  return ans;
 }
 /******************************************************************************/
 ll gcd(ll num1,ll num2){
  while(num2!=0){
    ll temp=num1;
    num1=num2;
    num2=temp%num1;
  }
  return num1;
 }
 /******************************************************************************/
 ll lcm(ll num1,ll num2){
  return(num1/gcd(num1,num2))*num2;
 }
 /******************************************************************************/
 bool prime(ll n){
  if(n<2){
    return false;
  }for(ll i=2;i<=n/i;i++){
    if(n%i==0){
      return false;
    }
  }
  return true;
 }
 /******************************************************************************/
 vector<int>factors(int n){
  vector<int>v;
  for(int i=1;i<=n/i;i++){
    if(n%i==0){
      v.push_back(i);
      if(i!=n/i){
        v.push_back(n/i);
      }
    }
  }
  return v;
 }
 /******************************************************************************/
 vector<int>prime_factors(int n){
  vector<int>v;
  for(int i=2;i<=n/i;i++){
    while(n%i==0){
      n/=i;
      v.push_back(i);
    }
  }
  if(n!=1){
    v.push_back(n);
  }
  return v;
 }
 /******************************************************************************/
 void binary(ll n){
  ll x=n;
  string s="""";
  while(n>0){
    if(n%2==0){
      s+=to_string(0);
    }else{
      s+=to_string(1);
    }
    n/=2; 
  }
  ll sum=0;
  for(int i=0;i<s.size();i++){
    sum+=s[i]-'0';
  }
  if(x%sum==0){
    cout<<""YES""<<endl;
  }else{
    cout<<""NO""<<endl;
  }
 }
 /******************************************************************************/
 /*Print num data type(__int 128)*/
 void print(__int 128 x){
  string num;
  while(x){
    num.push_back(x%10+'0');
    x/=10;
  }
  reverse(all(num));
  cout<<num<<""\n"";
 }
 /******************************************************************************/
 ll add(ll a,ll b,ll m){
  return ((a%m)+(b%m))%m;
 }
 /******************************************************************************/
 ll sub(ll a,ll b,ll m){
  return ((a%m)-(b%m)+m)%m;
 }
 /******************************************************************************/
 ll mul(ll a,ll b,ll m){
  return ((a%m)*(b%m))%m;
 }
 /******************************************************************************/
 /*MEX: is the smallest whole number that is not present in the array.*/
 int mex(int n,vector<int>&v){
  sort(v.begin(),v.end());
  int mex=0;
  for(int i=0;i<n;i++){
    if(v[i]==mex){
      mex++;
    }
  }
  return mex;
 }
 /******************************************************************************/
 /*Next_Permutation*/
 vector<vector<int>>nextpermutation(int n,vector<int>&v){
  ll size=1;
  for(int i=1;i<=n;i++){
    size*=i;
  }
  vector<vector<int>>ans(size);
  int counter=0;
  sort(v.begin(),v.end());
  do{
    for(int i=0;i<n;i++){
      ans[counter].push_back(v[i]);
    }
    counter++;
  }while(next_permutation(v.begin(),v.end()));
  return ans;
 }
 /******************************************************************************/
 /*Prev_Permutation*/
 vector<vector<int>>prevpermutation(int n,vector<int>&v){
  ll size=1;
  for(int i=1;i<=n;i++){
    size*=i;
  }
  vector<vector<int>>ans(size);
  int counter=0;
  sort(v.begin(),v.end());
  reverse(v.begin(),v.end());
  do{
    for(int i=0;i<n;i++){
      ans[counter].push_back(v[i]);
    }
    counter++;
  }while(prev_permutation(v.begin(),v.end()));
  return ans;
 }
 /******************************************************************************/
 /*Kadane max sum of contiguous subarray*/
 ll kadane_max_sum(int n,vector<int>&v){
  ll sum=0,ans=LLONG_MIN;
  for(int i=0;i<n;i++){
    sum+=v[i];
    ans=max(ans,sum);
    sum=max(sum,0ll);
  }
  return ans;
 } 
 /******************************************************************************/
 /*Kadane min sum of contiguous subarray*/
 ll kadane_min_sum(int n,vector<int>&v){
  ll sum=0,ans=LLONG_MAX;
  for(int i=0;i<n;i++){
    sum+=v[i];
    ans=min(ans,sum);
    sum=min(sum,0ll);
  }
  return ans;
 } 
 /******************************************************************************/
 /*Seive of eratosthenes*/
 bool composite[n+1];
 void sieve(){
  composite[0]=composite[1]=1;
  for(ll i=2;i<=n/i;i++){
    if(composite[i]!=1){
      for(int j=i*i;j<=n;j+=i){
        composite[j]=1;
      }
    }
  }
 }
 /******************************************************************************/
 /*n->number, x->power*/
 int bin_exp(int n,int x){
  int res=1;
  while(x>0){
    if(x%2==1){
      res*=x;
    }
    n*=n;
    x/=2;
  }
  return res;
 }
 /******************************************************************************/
 /* (n*n)->long long,int ""%m"" */
 int modular_exp(int n,int x,int m){
  int res=1;
  while(x>0){
    if(x%2==1){
      res=(res*n)%m;
    }
    n=(n%m*n%m)%m;
    x/=2;
  }
  return res;
 }
 /******************************************************************************/
 void solve(){

 }

 int main(){
  Rofyda_Elghadban(); 
  int t=1;  
  // cin>>t;
  while(t--){
    solve();
  }
  return 0;
 }"
A8tW5QU5,LeetCode 314 - Binary Tree Vertical Order Traversal - 2024.03.09 solution,nathanwailes,Python,Saturday 9th of March 2024 11:43:46 AM CDT,"# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        # handle the case where the input is empty
        if not root: return []

        # create some intermediate data structures / variables that will let us generate the answer
        level_order_traversal = []  # node and col_offset
        min_col_offset = 0
        max_col_offset = 0

        # populate the intermediate data structures / variables
        queue = [[root, 0]]
        while queue:
            current_node, col_offset = queue.pop(0)

            # update our intermediate data structures / variables
            level_order_traversal.append([current_node, col_offset])
            min_col_offset = min(min_col_offset, col_offset)
            max_col_offset = max(max_col_offset, col_offset)

            # add children to the queue
            if current_node.left:
                queue.append([current_node.left, col_offset - 1])
            if current_node.right:
                queue.append([current_node.right, col_offset + 1])

        # use the intermediate data structures/variables to generate the answer
        number_of_cols = max_col_offset - min_col_offset + 1
        output_list = [[] for _ in range(number_of_cols)]
        level_order_traversal.reverse()
        while level_order_traversal:
            current_node, offset = level_order_traversal.pop()
            column = offset - min_col_offset
            output_list[column].append(current_node.val)
        
        return output_list
"
LbheBxz3,Pastes.io - [Pastebin Alternative],xxsa,PHP,Saturday 9th of March 2024 11:39:58 AM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Report explicit pastes
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
User management
User profile page
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature"
MqgUmFcw,Praktikum3,VoKILL,C++,Saturday 9th of March 2024 11:39:52 AM CDT,"// Задачи от практикума на трета група 
 
namespace Points {
    struct Point {
        int x = 0;
        int y = 0;
    };
 
    void printPoint(const Point point) {
        cout << ""X: "" << point.x << ""   Y: "" << point.y << endl;
    }
 
    double getDist(const Point &p1, const Point &p2) {
        int dx = p1.x - p2.x;
        int dy = p1.y - p2.y;
 
        return sqrt(dx * dx + dy * dy);
    }
 
    void readPoint(Point &point) {
        cout << ""Enter x:"";
        std::cin >> point.x;
        cout << ""Enter y:"";
        std::cin >> point.y;
    }
 
    int pointInQuadrant(const Point point) {
        if (point.y > 0) {
            if (point.x > 0)return 1;
            else return 2;
        } else {
            if (point.x > 0)return 4;
            else return 3;
        }
    }
}
namespace Figures {
    using namespace Points;
    struct Circle {
        Point center;
        double radius = 0;
    };
 
    void readCircle(Circle &circle) {
        cout << ""Enter the center of the Circle:\n"";
        readPoint(circle.center);
        cout << ""Enter the radius of the Circle:\n"";
        cin >> circle.radius;
    }
 
    bool isContained(const Circle circleToLookAt, const Circle circleToLookFor) {
        double dist = getDist(circleToLookAt.center, circleToLookFor.center);
        if (dist + circleToLookFor.radius <= circleToLookAt.radius) return true;
        else return false;
    }
 
    bool areCrossedCircles(const Circle circle1, const Circle circle2) {
        double dist = getDist(circle1.center, circle2.center);
        double radii = circle1.radius + circle2.radius;
 
        if (dist <= radii) return true;
        else return false;
    }
 
    bool isOnTheCircleBorder(const Circle circle, const Point point) {
        double dist = getDist(point, circle.center);
        if (dist == circle.radius)return true;
        else return false;
    }
 
}
namespace Vectors {
    struct Vector {
        int size = 0;
        int points[100]{};
    };
 
    void readVector(Vector &vector) {
        int n;
        cout << ""Enter Vector size: "";
        cin >> n;
        vector.size = n;
        for (int i = 0; i < n; ++i) {
            cout << ""Element "" << i << "":"";
            cin >> vector.points[i];
        }
    }
 
    void printVector(const Vector vector) {
        for (int i = 0; i < vector.size; ++i) {
            cout << vector.points[i] << "" "";
        }
        cout << endl;
    }
 
    int pointProduct(const Vector vector1, const Vector vector2) {
        if (vector1.size != vector2.size) {
            //error
            return -1;
        }
        int result = 0;
        for (int i = 0; i < vector1.size; ++i) {
            result += vector1.points[i] * vector2.points[i];
        }
        return result;
    }
}
namespace Segments {
    using namespace Points;
    struct Line {
        Point point1;
        Point point2;
        double dist = 0;
    };
 
 
    void printLine(const Line line) {
        cout << ""Line dist: "" << line.dist << endl;
        printPoint(line.point1);
        printPoint(line.point2);
    }
 
    void printLines(const Line *lines, unsigned int size) {
        for (int i = 0; i < size; ++i) {
            cout << ""Line "" << i + 1 << "":"" << endl;
            printLine(lines[i]);
            cout << endl;
        }
    }
 
    void readLine(Line &line) {
        cout << ""Enter first line point:"" << endl;
        readPoint(line.point1);
        cout << ""Enter second line point:"" << endl;
        readPoint(line.point2);
        line.dist = getDist(line.point1, line.point2);
    }
 
    void readLines(Line *lines, unsigned int size) {
        for (int i = 0; i < size; ++i) {
            readLine(*lines++);
        }
    }
 
 
    void sortLines(Line *const arr, unsigned int size) {
        for (int i = 0; i < size - 1; ++i) {
            for (int j = 0; j < size - i - 1; ++j) {
                if (arr[j].dist > arr[j + 1].dist) {
                    Line temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}"
LGZFiuT5,Reactor Test,DreezySZN,Lua,Saturday 9th of March 2024 11:15:18 AM CDT,"-----BigReactor Control Installer
-----by jaranvil aka jared314
 
-----feel free to use and/or modify this code
-----------------------------------------------
 
 
--Run this program to install or update either reactor or turbine control programs.
 
 
-----------------PASTEBINs--------------------------
installer = ""p4zeq7Ma""
reactor_control_pastebin = ""RCPEHmxs""
turbine_control_pastebin = ""5B8h94V4""
 
reactor_startup = ""cZUH7y6k""
turbine_startup = ""h0jmye6t""
 
reactor_update_check = ""MkF2QQjH""
turbine_update_check = ""QP3qrzNu""
 
dev_installer = ""mCPQQ3Ge""
dev_reactor_control_pastebin = ""eYwBw9a3""
dev_turbine_control_pastebin = ""kJHeCx0Q""
---------------------------------------------
 
local reactor
local turbine
term.clear()
-------------------FORMATTING-------------------------------
 
function draw_text_term(x, y, text, text_color, bg_color)
  term.setTextColor(text_color)
  term.setBackgroundColor(bg_color)
  term.setCursorPos(x,y)
  write(text)
end
 
function draw_line_term(x, y, length, color)
    term.setBackgroundColor(color)
    term.setCursorPos(x,y)
    term.write(string.rep("" "", length))
end
 
function progress_bar_term(x, y, length, minVal, maxVal, bar_color, bg_color)
  draw_line_term(x, y, length, bg_color) --backgoround bar
  local barSize = math.floor((minVal/maxVal) * length) 
  draw_line_term(x, y, barSize, bar_color)  --progress so far
end
 
function menu_bars()
 
  draw_line_term(1, 1, 55, colors.blue)
  draw_text_term(10, 1, ""BigReactors Control Installer"", colors.white, colors.blue)
  
  draw_line_term(1, 19, 55, colors.blue)
  draw_text_term(10, 19, ""by jaranvil aka jared314"", colors.white, colors.blue)
end
 
--------------------------------------------------------------
 
 
 
function install(program, pastebin)
  term.clear()
  menu_bars()
 
  draw_text_term(1, 3, ""Installing ""..program..""..."", colors.yellow, colors.black)
  term.setCursorPos(1,5)
  term.setTextColor(colors.white)
  sleep(0.5)
 
  -----------------Install control program---------------
 
 
  --delete any old backups
  if fs.exists(program..""_old"") then
    fs.delete(program..""_old"")
  end
 
  --remove old configs
  if fs.exists(""config.txt"") then
    fs.delete(""config.txt"")
  end
 
  --backup current program
  if fs.exists(program) then
    fs.copy(program, program..""_old"")
    fs.delete(program)
  end
 
  --remove program and fetch new copy
  
  shell.run(""pastebin get ""..pastebin.."" ""..program)
 
  sleep(0.5)
 
  ------------------Install startup script-------------
 
  term.setCursorPos(1,8)
 
  --delete any old backups
  if fs.exists(""startup_old"") then
    fs.delete(""startup_old"")
  end
 
  --backup current program
  if fs.exists(""startup"") then
    fs.copy(""startup"", ""startup_old"")
    fs.delete(""startup"")
  end
  
 
  if program == ""reactor_control"" then
    shell.run(""pastebin get ""..reactor_startup.."" startup"")
  else if program == ""turbine_control"" then
    shell.run(""pastebin get ""..turbine_startup.."" startup"")
  end
  end
 
  if fs.exists(program) then
    draw_text_term(1, 11, ""Success!"", colors.lime, colors.black)
    draw_text_term(1, 12, ""Press Enter to reboot..."", colors.gray, colors.black)
    wait = read()
    shell.run(""reboot"")
  else
    draw_text_term(1, 11, ""Error installing file."", colors.red, colors.black)
    sleep(0.1)
    draw_text_term(1, 12, ""Restoring old file..."", colors.gray, colors.black)
    sleep(0.1)
    fs.copy(program..""_old"", program)
    fs.delete(program..""_old"")
 
    draw_text_term(1, 14, ""Press Enter to continue..."", colors.gray, colors.black)
    wait = read()
    start()
  end
end
 
-- peripheral searching thanks to /u/kla_sch
-- http://pastebin.com/gTEBHv3D

function reactorSearch()
   local names = peripheral.getNames()
   local i, name
   for i, name in pairs(names) do
      if peripheral.getType(name) == ""BigReactors-Reactor_2"" then
         return peripheral.wrap(name)
      else
         --return null
      end
   end
end
 
function turbineSearch()
   local names = peripheral.getNames()
   local i, name
   for i, name in pairs(names) do
      if peripheral.getType(name) == ""BigReactors-Turbine"" then
         return peripheral.wrap(name)
      else
         --return null
      end
   end
end
 
function selectProgram()
  term.clear()
  menu_bars()
  draw_text_term(1, 4, ""What would you like to install or update?"", colors.yellow, colors.black)
  draw_text_term(3, 6, ""1 - Reactor Control"", colors.white, colors.black)
  draw_text_term(3, 7, ""2 - Turbine Control"", colors.white, colors.black)
  draw_text_term(1, 9, ""Enter 1 or 2:"", colors.yellow, colors.black)
 
  term.setCursorPos(1,10)
  term.setTextColor(colors.white)
  input = read()
 
  if input == ""1"" then
    install(""reactor_control"", reactor_control_pastebin)
  else if input == ""2"" then
    install(""turbine_control"", turbine_control_pastebin)
  else if input == ""dev1"" then
    install(""reactor_control"", dev_reactor_control_pastebin)
  else if input == ""dev2"" then
    install(""turbine_control"", dev_turbine_control_pastebin)
  else
    draw_text_term(1, 12, ""please enter a '1' or '2'."", colors.red, colors.black)
    sleep(1)
    start()
  end
  end
  end
  end
end
 
function start()
  term.clear()
  menu_bars()
  
  if fs.exists(""config.txt"") then
  
    if fs.exists(""reactor_control"") then
      draw_text_term(2, 3, ""Current Program:"", colors.white, colors.black)
      draw_text_term(2, 4, ""Reactor Control"", colors.lime, colors.black)
      draw_text_term(1, 6, ""Do you want to update this program? (y/n)"", colors.white, colors.black)
      draw_text_term(1, 7, ""This will delete the current program and any saved settings"", colors.gray, colors.black)
      term.setCursorPos(1,9)
      term.setTextColor(colors.white)
      input = read()
      if input == ""y"" then
        install(""reactor_control"", reactor_control_pastebin)
      else if input == ""n"" then
        selectProgram()
      else
        draw_text_term(1, 10, ""please enter 'y' or 'n'."", colors.red, colors.black)
        sleep(1)
        start()
      end
      end
      
    else if fs.exists(""turbine_control"") then
      draw_text_term(2, 3, ""Current Program:"", colors.white, colors.black)
      draw_text_term(2, 4, ""Turbine Control"", colors.lime, colors.black)
      draw_text_term(1, 6, ""Do you want to update this program? (y/n)"", colors.white, colors.black)
      draw_text_term(1, 7, ""This will delete the current program and any saved settings"", colors.gray, colors.black)
      term.setCursorPos(1,9)
      term.setTextColor(colors.white)
      input = read()
      if input == ""y"" then
        install(""turbine_control"", turbine_control_pastebin)
      else if input == ""n"" then
        selectProgram()
      else
        draw_text_term(1, 10, ""please enter 'y' or 'n'."", colors.red, colors.black)
        sleep(1)
        start()
      end
      end
    
    end
    end
  end
  
  selectProgram()
 
 
end
 
start()"
y2TGjLNM,Untitled,Frinco2021,JSON,Saturday 9th of March 2024 11:03:56 AM CDT,"{
  ""HosterName"": ""Raouf2015"",
  ""ServerName"": ""DzServer"",
  ""ClusterName"": ""Dzserver"",
 
  ""ServerDescription"":
  {
    ""MaxDinoLvl"": 300,
    ""Taming"": 25,
    ""Experience"": 6,
    ""Harvesting"": 6,
    ""Breeding"": 6,
    ""Stacks"": 1000,
    ""Other"":
    [
        ""Some feature specific to this very server""
    ]
  },
  ""ClusterDescription"":
  {
    ""MaxDinoLvl"": 300,
    ""Taming"": 25,
    ""Experience"": 6,
    ""Harvesting"": 6,
    ""Breeding"": 6,
    ""Stacks"": 1000,
    ""Other"":
    [
        ""Some extra feature of my cluster"",
        ""And another one""
    ]
  }
}
"
Cjq8xLz5,WorkingWithProperties,UrayFenn,C#,Saturday 9th of March 2024 10:56:45 AM CDT,"namespace WorkingWithProperties
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int positionX = 10;
            int positionY = 10;
            Renderer renderer = new Renderer();
            Player player = new Player(positionX, positionY);
            renderer.DrawUser(player);
        }
    }

    class Player
    {
        public Player(int positionX, int positionY)
        {
            PositionX = positionX;
            PositionY = positionY;
        }

        public int PositionX { get; private set; }
        public int PositionY { get; private set; }
    }

    class Renderer
    {
        public void DrawUser(Player player, char playerIcon = '@')
        {
            Console.SetCursorPosition(player.PositionX, player.PositionY);
            Console.WriteLine(playerIcon);
        }
    }
}"
jV98eycv,WorkingWithClasses,UrayFenn,C#,Saturday 9th of March 2024 10:37:18 AM CDT,"namespace WorkingWithClasses
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Player player = new Player(""Сеня"", 1, ""Админ"");
            player.ShowInfo();
        }
    }

    class Player
    {
        private string _name;
        private int _id;
        private string _role;

        public Player(string name, int id, string role)
        {
            _name = name;
            _id = id;
            _role = role;
        }

        public void ShowInfo()
        {
            Console.WriteLine($""Имя: {_name}\nID: {_id}\nРоль: {_role}"");
        }
    }
}"
xasVFgJN,Review Videforex,fxvnpro,PHP,Saturday 9th of March 2024 10:19:43 AM CDT,https://www.fxvnpro.com/review-videforex/
dK3DqbCL,Review Videforex,reviewbrokers,PHP,Saturday 9th of March 2024 10:14:27 AM CDT,https://www.reviewbrokers.net/review-videforex/
UJDTZKKr,collecting mangoes,mantha_raghava,Java,Saturday 9th of March 2024 09:59:30 AM CDT,"import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int test = sc.nextInt();
        sc.nextLine(); 

        int z = 1;
        while (test-- > 0) {
            Stack<Integer> stack = new Stack<>();
            Stack<Integer> maxi = new Stack<>();
            System.out.println(""Case "" + z + "": "");
            int q = sc.nextInt();
            sc.nextLine(); 
            while (q-- > 0) {
                String s = sc.nextLine();
                String type[] = s.split("" "");

                if (type[0].equals(""A"")) {
                    stack.push(Integer.parseInt(type[1]));
                    if (maxi.isEmpty()) {
                        maxi.push(Integer.parseInt(type[1]));
                    } else {
                        if (maxi.peek() > Integer.parseInt(type[1])) {
                            maxi.push(maxi.peek());
                        } else {
                            maxi.push(Integer.parseInt(type[1]));
                        }
                    }
                } else if (type[0].equals(""R"")) {
                    if(!stack.isEmpty()){
                        stack.pop();
                        maxi.pop();
                    }
                    
                } else {
                    if(maxi.isEmpty()){
                        System.out.println(""Empty"");
                    }
                    else{
                        System.out.println(maxi.peek());
                    }
                    
                }
            }
            z++;
        }
    }
}"
kXTAi3A4,online.lua,vip-fran,Lua,Saturday 9th of March 2024 09:41:36 AM CDT,"memFrom, memTo, lib, num, lim, results, src, ok = 0, -1, nil, 0, 32, {}, nil, false function name(n) if lib ~= n then lib = n ranges = gg.getRangesList(lib) if #ranges == 0 then os.exit() else memFrom = ranges[1].start memTo = ranges[#ranges]['end'] end end end function hex2tbl(hex) ret = {} hex:gsub('%S%S', function (ch) ret[#ret + 1] = ch return '' end) return ret end function original(orig) tbl = hex2tbl(orig) len = #tbl if len == 0 then return end used = len if len > lim then used = lim end s = '' for i = 1, used do if i ~= 1 then s = s..';' end v = tbl[i] if v == '??' or v == '**' then v = '0~~0' end s = s..v..'r' end s = s..'::'..used gg.searchNumber(s, 1, false, gg.SIGN_EQUAL, memFrom, memTo) if len > used then for i = used + 1, len do v = tbl[i] if v == '??' or v == '**' then v = 256 else v = ('0x'..v) + 0 if v > 127 then v = v - 256 end end tbl[i] = v end end found = gg.getResultCount(); results = {} count = 0 checked = 0 while true do if checked >= found then break end all = gg.getResults(8) total = #all start = checked if checked + used > total then break end for i, v in ipairs(all) do v.address = v.address + of end gg.loadResults(all) while start < total do good = true of = all[1 + start].address - 1 if used < len then get = {} for i = lim + 1, len do get[i - lim] = {address = of + i, flags = 1, value = 0} end get = gg.getValues(get) for i = lim + 1, len do ch = tbl[i] if ch ~= 256 and get[i - lim].value ~= ch then good = false break end end end if good then count = count + 1 results[count] = of checked = checked + used else del = {} for i = 1, used do del[i] = all[i + start] end gg.removeResults(del) end start = start + used end end end function replaced(repl) num = num + 1 tbl = hex2tbl(repl) if src ~= nil then source = hex2tbl(src) for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' and v == source[i] then tbl[i] = '**' end end src = nil end cnt = #tbl set = {} s = 0 for _, addr in ipairs(results) do for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' then s = s + 1 set[s] = { ['address'] = addr + i,  ['value'] = v..'r', ['flags'] = 1,} end end end if s ~= 0 then gg.setValues(set) end ok = true end
function script()
a = gg.multiChoice({
'🔹Fantasma ON🔹',
'🔸Fantasma OFF🔸',
'🔹Cuerpos Blancos🔹',
'🔹Cielo Negro🔹',
'🔹Balas Rectas🔹',
'🔹Wallshot🔹',
'🔹Atravesar Piedras🔹',
'🔹Localizar Enemigos🔹',
'🔺Cerrar El Script🔺'
},nil,'✨Script Premium Vip Fran•Hacker™✨')
if a == nil then else
if a [1] then
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x226c918
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
end
if a [2] then
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x226c918
original('7F 45 4C 46 01 01 01 00')
replaced('F0 4F 2D E9 1C B0 8D E2')
gg.clearResults()
end
if a [3] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-444579820;2;2;0;130::21', gg.TYPE_DWORD)
gg.refineNumber('2', gg.TYPE_DWORD)
gg.getResults(gg.getResultsCount())
gg.editAll('0', gg.TYPE_DWORD)
gg.clearResults()
end
if a [4] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.99;0.57735025883;1e-6::13', gg.TYPE_FLOAT)
gg.refineNumber('1e-6', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-1', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [5] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-7.1608877e24;1000;-1.30930378e25::9', gg.TYPE_FLOAT)
gg.refineNumber('1000', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [6] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.00001;-1.30928164e25;-3.69511377e20::9', gg.TYPE_FLOAT)
gg.refineNumber('0.00001', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('1', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [7] then
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-8388395.5;-8388393.5;-8388387.5::65', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-1', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [8] then
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('-0.02980032004;1;0.48141112924::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('0.09043131769;1;0.14753369987::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
end
if a [9] then
gg.setVisible(true)
os.exit()
end
end end
while true do
if gg.isVisible() then
gg.setVisible(false)
script()
end end"
ap7abjLV,hyprland env,bluebyt,INI file,Saturday 9th of March 2024 09:24:25 AM CDT,"SHLVL=1
DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/1000/bus
GDMSESSION=hyprland
ALACRITTY_LOG=/tmp/Alacritty-580554.log
COLORTERM=truecolor
PWD=/home/bluebyt
DESKTOP_SESSION=hyprland
DISPLAY=:0
MAIL=/var/spool/mail/bluebyt
GDM_LANG=en_US.UTF-8
GIO_LAUNCHED_DESKTOP_FILE_PID=580554
WINDOWID=104430730027680
SSH_AUTH_SOCK=/run/user/1000/gcr/ssh
SHELL=/usr/bin/fish
XDG_BACKEND=wayland
MOTD_SHOWN=pam
ALACRITTY_WINDOW_ID=104430730027680
LANG=en_US.UTF-8
USER=bluebyt
PATH=/home/bluebyt/.bin/:/usr/local/bin:/usr/bin:/home/bluebyt/.local/bin:/home/bluebyt/.local/bin/eww:/home/bluebyt/.local/bin/go/bin/:/home/bluebyt/.cargo/bin
HYPRLAND_CMD=Hyprland
HYPRLAND_INSTANCE_SIGNATURE=3e930a568a76a810dde6bcabcf737a81850e7153_1709997323
LOGNAME=bluebyt
GIO_LAUNCHED_DESKTOP_FILE=/home/bluebyt/.local/share/applications/Alacritty.desktop
STARSHIP_SHELL=fish
STARSHIP_SESSION_KEY=9615204904259994
WAYFIRE_SOCKET=/tmp/wayfire-wayland-1.socket
XCURSOR_SIZE=24
XDG_SEAT=seat0
WAYLAND_DISPLAY=wayland-1
TERM=alacritty
HOME=/home/bluebyt
XDG_SESSION_TYPE=wayland
XDG_SESSION_ID=22
MOZ_ENABLE_WAYLAND=1
_JAVA_AWT_WM_NONREPARENTING=1
XDG_DATA_DIRS=/home/bluebyt/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/
ALACRITTY_SOCKET=/run/user/1000/Alacritty-wayland-1-580554.sock
XDG_SESSION_CLASS=user
XDG_SESSION_DESKTOP=hyprland
XDG_CURRENT_DESKTOP=Hyprland
XDG_VTNR=2
USERNAME=bluebyt
XDG_RUNTIME_DIR=/run/user/1000"
zq9ZeCxr,Untitled,Gronos02,Python,Saturday 9th of March 2024 08:54:21 AM CDT,"    def is_sorted(array):
        for i in range(1, len(array)):
            # Check if element is not sorted
            if array[i] < array[i - 1]:
                return False
     
        return True
     
     
    def solve(array):
        changed = True
     
        while changed:
            changed = False
            if is_sorted(array):
                return ""YES""
     
            for i in range(1, len(array) - 1):
                if array[i - 1] < array[i] > array[i + 1]:
                    array[i], array[i + 1] = array[i + 1], array[i]
                    changed = True
     
        return ""NO""
     
     
    def main():
        number_of_sets = int(input())
     
        for i in range(number_of_sets):
            number_of_ints = int(input())  # NOT USED
     
            given_array = input()
            given_array = list(map(int, given_array.split()))
     
            print(solve(given_array))
     
     
    if __name__ == ""__main__"":
        main()"
4x1XGPy7,Epic Rowsplitter,DrGonzo94,Python,Saturday 9th of March 2024 08:54:20 AM CDT,"
# Den gamla rad-maker2200 hade inneboende problem. Den räknade fel på radserier som var delbara med 2200 (ett fel i div2200). 
# Det gick också inte att göra radserier som delades in i något annat än tre delar, för då kunde inte filerna skapas från rowslist. 
# Tog en del hjälp av ChatGPT för att uppdatera. Även andra saker är nya, som bättre itererade for-loops för att dela in raderna i listor (i dictionaries)
# och för att skriva listorna till filer
# Lägger också till div2200 i den här filen, som en funktion

def div2200(number1: int):

    partslist = []
    if number1 % 2200 == 0:
        parts = (number1 // 2200)
    else:
        parts = (number1 // 2200)+1
    partsize_base = number1 // parts
    partsize_rest = number1 % parts

    for i in range(parts):
        partslist.append(partsize_base)

    for i in range(partsize_rest):
        partslist[i] +=1
    
    return partslist


gamblingzfile = ""system.txt""


with open(gamblingzfile) as file:
    num_lines = 0
    for line in file:
        num_lines +=1
    file.seek(0, 0)

num_lines = num_lines-1

rowslist = div2200(num_lines)
parts = len(rowslist)

print(f""Systemet har {num_lines} rader. Det kommer att delas i {parts} delar, med dessa radantal:"")
for i in range(len(rowslist)):
    print(rowslist[i])


lines_lists = {}
for i in range(parts):
    lines_lists[f""lines_list{i}""] = []

# Gör en lines_list för varje part, lägger dem i dictionary

with open(gamblingzfile) as file:

    first_line = file.readline()
    
    for key in lines_lists:
        lines_lists[key].append(first_line)

    for i in range(parts):
        for _ in range(rowslist[i]):
            line = file.readline()
            lines_lists[f""lines_list{i}""].append(line)


    for i, (key, lines_list) in enumerate(lines_lists.items(), start=1):
        output_file = f""{i}{i}{i}{i}{i}{i}{i}.txt""
        with open(output_file, ""w"") as filew:
            for line in lines_list:
                filew.write(line)

# Har inte använt enumerate förut, och knappt dictonaries för att lagra listor, heller. Ville gärna ha 1111111.txt-formatet kvar, och då behövdes detta enligt ChatGPT. 
"
rwARBeTq,снм,nq1s788,C++,Saturday 9th of March 2024 08:44:08 AM CDT,"#include<iostream>
#include<algorithm>
#include<bitset>
#include<cmath>
#include<deque>
#include<iomanip>
#include <cassert>
#include<list>
#include<vector>
#include<map>
#include<string>
#include<complex>

using namespace std;

vector<int> t; //t[i] = i
vector<int> h; //высота дерева, h[i] = 1

int get(int x) {
    if (t[x] == x) {
        return x;
    }
    return t[x] = get(x);
}

void upd(int x, int y) {
    x = get(x);
    y = get(y);
    if (h[x] > h[y]) {
        swap(x, y);
    }
    t[x] = y;
    if (h[x] != h[y]) h[y]++;
}

int main() {
    
    return 0;
}"
cympQXvP,3,alexandaryordanov,JavaScript,Saturday 9th of March 2024 08:32:06 AM CDT,"function solve(base, increment) {
    let stone = 0;
    let marble = 0;
    let lapis = 0;
    let gold = 0;
    const steps = Math.ceil(base / 2)
    const finalHeight = Math.floor(steps * increment)
    for (let index = 1; index <= steps; index++) {
        if (index !== steps) {
            stone += ((base - 2) ** 2) * increment
        } 
        
        if (index % 5 === 0 && index !== steps) {
            lapis += (base * 4 - 4) * increment
        } else if (index === steps) {
            gold += (base ** 2) * increment
        } else {
            marble += (base * 4 - 4) * increment
        }
        base -= 2
    }
    console.log(`Stone required: ${Math.ceil(stone)}\nMarble required: ${Math.ceil(marble)}\nLapis Lazuli required: ${Math.ceil(lapis)}\nGold required: ${Math.ceil(gold)}\nFinal pyramid height: ${finalHeight}`);
}




solve(23, 0.5)"
yEdr8Rph,stm32 spi fifo bug,edensheiko,C,Saturday 9th of March 2024 08:23:53 AM CDT,"/* NOTICE: for transmit with DMA a bug fix was needed, please see file
	 *         core/src/stm32f7xx_it.c in function DMA2_Stream4_IRQHandler
	 *         at line ~ 370
 */

void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* BUG FIX --------------------------------------------------------------*/
  /* When using SPI with DMA in direct mode there is a known bug in
   * the hal library - The function HAL_SPI_Transmit_DMA enables fifo error
   * interrupts even when there is NO fifo and thus causing fifo error
   * interrupts to occur with NO fifo
   */
  if(hdma_spi5_tx.Init.FIFOMode != DMA_FIFOMODE_ENABLE)
  {
	  /* Disable fifo error interrupt, they shouldn't even be on... */
	  __HAL_DMA_DISABLE_IT(&hdma_spi5_tx, DMA_IT_FE);
  }

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}"
ugi5j8ZL,Untitled,cosenza987,C++,Saturday 9th of March 2024 08:15:58 AM CDT,"#include <bits/stdc++.h>

using namespace std;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin >> t;
    for(int _ = 0; _ < t; _++) {
        int n, m, q;
        cin >> n >> m >> q;
        set<int> s;
        while(m--) {
            int x;
            cin >> x;
            s.insert(x);
        }
        vector<vector<int>> adj(n * n);
        int fl = 0, xr = 0, cnt = 0, id = 0;
        for(int i = 0; i < 2 * (n * n - n); i++) {
            if(s.find(i) == s.end()) {
                cnt++;
                id++;
                if(!xr and cnt == n - 1) {
                    xr ^= 1;
                    cnt = 0;
                    id -= n - 1;
                } else if(xr and cnt == n) {
                    xr ^= 1;
                    cnt = 0;
                    fl++;
                }
                continue;
            }
            if(!xr) {
                adj[id].push_back(id + 1);
                adj[id + 1].push_back(id);
                cnt++;
                id++;
                if(!xr and cnt == n - 1) {
                    xr ^= 1;
                    cnt = 0;
                    id -= n - 1;
                } else if(xr and cnt == n) {
                    xr ^= 1;
                    cnt = 0;
                    fl++;
                }
            } else {
                adj[id].push_back(id + n);
                adj[id + n].push_back(id);
                cnt++;
                id++;
                if(!xr and cnt == n - 1) {
                    xr ^= 1;
                    cnt = 0;
                    id -= n - 1;
                } else if(xr and cnt == n) {
                    xr ^= 1;
                    cnt = 0;
                    fl++;
                }
            }
        }
        vector<int> vis(n * n);
        int cur = 1;
        for(int i = 0; i < n * n; i++) {
            if(!vis[i]) {
                queue<int> q;
                q.push(i);
                vis[i] = cur;
                while(!q.empty()) {
                    int x = q.front(); q.pop();
                    for(auto e : adj[x]) {
                        if(!vis[e]) {
                            vis[e] = cur;
                            q.push(e);
                        }
                    }
                }
                cur++;
            }
        }
        for(int i = 0; i < q; i++) {
            int a, b;
            cin >> a >> b;
            cout << _ << ""."" << i << "" "" << (vis[a] == vis[b]) << ""\n"";
        }
        cout << ""\n"";
    }
    return 0;
}"
pJ0wkzqw,112.215.244.101-/sdcard/Premium/useragent.py.py,OBF-XIn,Python,Saturday 9th of March 2024 08:12:39 AM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.huawei = ['POT-AL00a', 'POT-TL00a', 'POT-AL00a', 'POT-AL00a', 'POT-AL00a', 'POT-AL00a', 'Huawei Ascend', 'U9500', 'U9500', 'U9500', 'U9500', 'U9500', 'U8818', 'HUAWEI U8818', 'HUAWEI U8818', 'HUAWEI U8818', 'U8818', 'U8818', 'U8818', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'G527-U081', 'HUAWEI G6-L11', 'G620S-L01', 'C8817D', 'G620S-L03', 'G620S-L01', 'C8817D', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G630-U251', 'G7-L01', 'HUAWEI G7-L01', 'Huawei G700', 'HUAWEI G700-U20', 'HUAWEI G700-T00', 'HUAWEI G700-U10', 'Huawei g700', 'HUAWEI G700-U00', 'HUAWEI G700-T00', 'HUAWEI G700-U20', 'HUAWEI G700-U10', 'HUAWEI G700-U00', 'HUAWEI G730-C00', 'HUAWEI G730-C00', 'HUAWEI G730-C00', 'HUAWEI MT1-U06', 'HUAWEI MT1-U06', 'HUAWEI MT2-L01', 'HUAWEI MT2-L01', 'HUAWEI MT2-C00', 'HUAWEI MT2-C00', 'MT2L03', 'MT2L03', 'HUAWEI Y360', 'HUAWEI MT7-L09', 'HUAWEI MT7-TL10', 'HUAWEI MT7-TL00', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9200', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-3', 'U9202L-1', 'U9202L-1', 'U9202L-4', 'U9202L-2', 'U9202L-1', 'U9202L-1', 'U9202L-1', 'U9202L-3', 'U9202L-2', 'HUAWEI P6 S-U06', 'HUAWEI P7-L10', 'Flow', 'H1711', 'HUAWEI Y221-U53', 'HUAWEI Y221-U22', 'HUAWEI Y221-U12', 'HUAWEI Y221-U03', 'HUAWEI Y221-U53', 'HUAWEI Y221-U22', 'Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'HUAWEI Y320-U10', 'Bucare Y330-U05', 'Bucare Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'HUAWEI Y330-U05', 'Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'HUAWEI Y530', 'Y550-L03', 'HUAWEI Y560-L01', 'HUAWEI Y541-U02', 'HUAWEI B199', 'HUAWEI B199', 'HUAWEI B199', 'HUAWEI B199', 'HUAWEI B199', 'Huawei Blaze', 'Huawei BLAZE', 'HUAWEI C199', 'HUAWEI C199', 'HUAWEI C199', 'HUAWEI C199', 'HUAWEI C199s', 'HUAWEI C199s', 'HW-HUAWEI C199s', 'EC6109V1', 'MTS-SP101', 'MTS-SP101', 'MTS-SP101', 'C8512', 'C8600', 'C8600', 'C8600', 'C8600', 'C8650', 'C8650', 'C8650', 'HUAWEI C8655', 'HUAWEI C8655', 'C8800', 'HW-HUAWEI_C8810', 'HUAWEI C8812', 'HUAWEI C8812', 'HUAWEI_C8812', 'HUAWEI C8812', 'HUAWEI C8812', 'HUAWEI C8812', 'HUAWEI C8812E', 'HUAWEI_C8812E', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813D', 'HUAWEI C8813DQ', 'HUAWEI C8813DQ', 'HUAWEI C8813Q', 'HUAWEI C8813Q', 'HUAWEI C8813Q', 'HUAWEI C8813Q', 'HUAWEI C8815', 'HUAWEI C8815', 'HUAWEI C8816', 'HUAWEI C8816', 'HUAWEI C8816', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI_C8816D', 'HUAWEI C8816D', 'HUAWEI C8816D', 'HUAWEI C8817E', 'HUAWEI C8817E', 'HUAWEI C8817E', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8817L', 'HUAWEI C8818', 'HUAWEI C8818', 'HUAWEI C8818', 'HUAWEI C8825D', 'HUAWEI C8825D', 'HUAWEI C8825D', 'HUAWEI-C8850', 'HUAWEI C8860E', 'HUAWEI C8860E', 'HUAWEI C8860E', 'C8860V', 'HUAWEI C8950D', 'HUAWEI C8950D', 'HUAWEI C8950D', 'HUAWEI C8950D', 'CM980', 'CM980', 'd-02K', 'd-02H', 'd-01J', 'U9510', 'U9510', 'HUAWEI D2', 'Huawei D2', 'HUAWEI D8950D', 'MediaPad 10 FHD', 'dtab01', 'EC6108V9-01', 'ART-AL00x', 'ART-AL00x', 'ART-AL00x', 'ART-TL00x', 'ART-AL00m', 'ART-AL00x', 'STK-AL00', 'STK-AL00', 'STK-AL00', 'STK-TL00', 'MED-TL00', 'MED-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-AL00', 'AQM-TL00', 'WKG-AN00', 'WKG-AN00', 'WKG-TN00', 'WKG-TN00', 'FRL-TN00', 'FRL-AN00a', 'FRL-AN00a', 'FRL-AN00a', 'FRL-AN00a', 'FRL-AN00a', 'FRL-TN00', 'FRL-AN00a', 'DVC-TN20', 'DVC-AN20', 'DVC-TN20', 'DVC-AN20', 'DVC-AN20', 'DVC-AN20', 'DVC-TN20', 'DVC-TN20', 'DVC-AN20', 'DVC-TN20', 'MLD-AL00', 'MLD-AL00', 'MGA-AL00', 'MGA-AL00', 'MGA-AL00', 'MGA-AL00', 'CTR-AL00', 'CTR-AL00', 'CTR-AL00', 'CTR-AL00', 'HUAWEI TAG-L01', 'HUAWEI TAG-L32', 'HUAWEI TAG-AL00', 'HUAWEI TAG-L21', 'HUAWEI TAG-L13', 'HUAWEI TAG-L03', 'NCE-TL10', 'NCE-AL10', 'NCE-AL00', 'NCE-TL10', 'NCE-AL00', 'NCE-AL10', 'DIG-TL10', 'DIG-AL00', 'DIG-AL00', 'DIG-AL00', 'DIG-AL00', 'SLA-TL10', 'SLA-AL00', 'SLA-TL10', 'SLA-TL10', 'TRT-AL00A', 'TRT-TL10A', 'FIG-AL10', 'FIG-TL10', 'FIG-AL00', 'FIG-TL00', 'FIG-AL10', 'LDN-TL20', 'LDN-AL20', 'LDN-AL10', 'LDN-TL00', 'LDN-TL20', 'FLA-AL10', 'FLA-AL10', 'FLA-AL10', 'ATU-AL10', 'DUB-AL00a', 'DUB-AL00a', 'DUB-AL00a', 'MRD-AL00', 'Huawei Enjoy 9s', 'Huawei Enjoy 9s', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'DVC-AN00', 'CM990', 'CM990', 'CM990', 'U8665', 'HUAWEI U8665', 'U8665', 'G735-L03', 'G735-L23', 'G735-L12', 'G735-L23', 'G735-L23', 'CHC-U03', 'CHC-U01', 'Huawei G500 pro', 'HUAWEI G510', 'HUAWEI G510', 'Huawei G510', 'Huawei G520', 'HUAWEI G520 T', 'HUAWEIG520L', 'HUAWEI G520T', 'Huawei G530', 'Huawei G600', 'Huawei G610 u20', 'Huawei G610', 'HUAWEI G610', 'HUAWEI G610 fa', 'HUAWEI G620', 'G621-TL00', 'G621-TL00M', 'G621-TL00', 'HUAWEI G628', 'HUAWEI G7', 'HUAWEI RIO-TL00', 'HUAWEI RIO-UL00', 'HUAWEI_G750', 'Huawei_g750', 'HUAWEI G750', 'HUAWEI G7500', 'HUAWEI G7500', 'HUAWEI G7500', 'HUAWEI G7500', 'HUAWEI G7500', 'Huawei G760', 'HUAWEI RIO-L01', 'HUAWEI VNS-AL00', 'HUAWEI VNS-TL00', 'HUAWEI MLA-TL00', 'HUAWEI MLA-TL00', 'HUAWEI G9 Youth', 'DIG-L21', 'DIG-L22', 'HUAWEI KII-L21', 'BLL-L22', 'BLL-L21', 'BLL-L21', 'HUAWEI NMO-L31', 'HUAWEI RIO-L03', 'H1611', 'H1611', 'H1621', 'H1621', 'HUAWEI H1621', 'H1623', 'H710VL', 'H715BL', 'H866C', 'H866C', 'H866C', 'H866C', 'H866C', 'Huawei-H867G', 'Huawei-H867G', 'Huawei-H867G', 'Huawei-H867G', 'HUAWEI H868C', 'HUAWEIH868C', 'HUAWEI H868C', 'HUAWEI H871G', 'HUAWEI H871G', 'HUAWEI H871G', 'HUAWEI H881C', 'HUAWEI H881C', 'HUAWEI H881C', 'HUAWEI H881C', 'HUAWEI_H881C', 'H882L', 'H882L', 'HUAWEI H891L', 'HUAWEI H892L', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'HUAWEI U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'U8860', 'COL-L29', 'COL-AL10', 'COL-L29', 'HRY-LX1', 'HRY-LX1MEB', 'HRY-AL00', 'HRY-AL00a', 'HRY-LX1T', 'HUAWEI U9508', 'HUAWEI U9508', 'HUAWEI U9508', 'YAL-L21', 'LRA-AL00', 'LRA-AL00', 'LRA-AL00', 'LRA-AL00', 'YAL-AL10', 'YAL-AL10', 'YAL-AL10', 'YAL-AL10', 'YAL-L41', 'YAL-L41', 'HRY-AL00T', 'HRY-AL00Ta', 'HRY-AL00Ta', 'HRY-AL00Ta', 'HRY-AL00Ta', 'HRY-AL00T', 'HRY-AL00Ta', 'YAL-AL50', 'MAR-LX1H', 'MAR-LX1H', 'BMH-AN20', 'BMH-AN10', 'BMH-AN10', 'MXW-AN00', 'MXW-AN00', 'MXW-AN00', 'MXW-AN00', 'MXW-TN00', 'MXW-AN00', 'MXW-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN00', 'EBG-AN10', 'EBG-AN10', 'LRA-LX1', 'CDY-NX9A', 'CDY-AN95', 'CDY-AN90', 'HONOR H30-L01M', 'H30-U10', 'H30-T10', 'H30-T00', 'H30-C00', 'Hol-U19', 'Hol-U19', 'Hol-U19', 'HUAWEI G750-T01', 'HUAWEI G750-T01', 'HUAWEI G750-T01', 'SCL-AL00', 'SCL-TL00', 'SCL-TL00H', 'SCL-AL00', 'SCL-CL00', 'SCL-TL00H', 'SCL-AL00', 'SCL-AL00', 'CHM-U01', 'Honor 4c Pro', 'Honor 4c pro', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'AQM-AL10', 'Che1-CL20', 'Che2-UL00', 'Che2-TL00M', 'CHE2-TL00', 'CHE-TL00', 'Che1-CL10', 'Che2-TL00', 'CHE-TL00H', 'Che2-L11', 'CUN-AL00', 'CUN-TL00', 'CUN-TL00', 'NTH-AN00', 'NTH-NX9', 'NTH-AN00', 'NTN-L22', 'NTN-LX3', 'NTN-LX1', 'RNA-AN00', 'JLH-AN00', 'JLH-AN00', 'CAM-AL00', 'CAM-TL00', 'CAM-AL00', 'NEM-AL10', 'NEM-L51', 'NEM-UL10', 'NEM-L51', 'NEM-L22', 'KIW-L21', 'KIW-AL10', 'KIW-UL00', 'KIW-TL00', 'H60-L02', 'H60-L04', 'H60-L01', 'H60-L02', 'H60-L03', 'H60-L11', 'H60-L01', 'MYA-TL10', 'huawei mya-tl10', 'PE-UL00', 'PE-TL20', 'PE-UL00', 'PE-TL10', 'PE-UL00', 'PE-TL10', 'GIA-AN00', 'DLI-TL20', 'DLI-L22', 'DLI-L42', 'DIG-L21HN', 'JMM-L22', 'BLN-L21', 'BLN-L22', 'BLN-AL10', 'BLN-AL10', 'BLN-AL30', 'PLK-AL10', 'PLK-UL00', 'PLK-L01', 'PLK-AL10', 'PLK-TL01H', 'PLK-UL00', 'NEM-L21', 'FNE-AN00', 'FNE-AN00', 'FNE-NX9', 'AUM-AL20', 'AUM-L33', 'AUM-AL00', 'AUM-TL20', 'AUM-AL20', 'AUM-L29', 'AUM-L41', 'LND-AL30', 'LND-L29', '720x1358', 'ATH-AL00', 'ATH-CL00', 'ATH-TL00H)', 'ATH-UL00)', 'ATH-AL00', 'ATH-AL00', 'ATH-AL00', 'ATH-TL00H', 'DUA-L22', 'DUA-LX3', 'BND-AL10', 'BND-L21', 'FRD-L09', 'FRD-AL00', 'FRD-L19', 'PRA-AL00X', 'PRA-TL10', 'DUK-L09', 'VEN-L22', 'JAT-L29', 'JAT-LX3', 'JAT-LX1', 'JAT-L41', 'BKK-AL10', 'BKK-LX2', 'BKK-L21', 'BKK-LX2', 'KSA-LX9', 'KSA-LX9', 'JSN-L21', 'JSN-L22', 'JSN-AL00a', 'JSN-L23', 'ARE-AL00', 'ARE-L22HN', 'STF-L09', 'STF-L09S', 'STF-AL10', 'STF-AL10', 'STF-AL00', 'LLD-L31', 'LLD-AL10', 'MOA-LX9N', 'U', '720x1470', 'AKA-L29', 'LLD-AL20', 'LLD-AL30', 'LLD-AL20', 'LLD-AL20', 'DUA-LX9', 'HLK-AL00', 'HLK-AL00', 'HLK-AL00', 'HLK-AL00', 'HLK-AL00a', 'HLK-AL00', 'HLK-L42', 'HLK-AL10', 'HLK-L41', 'HLK-AL10', 'HLK-AL10', 'CAM-UL00', 'CAM-UL00', 'NTS-AL00', 'NTS-AL00', 'NTS-AL00', 'TNY-AL00', 'TNY-TL00', 'TNY-AL00', 'TNY-AL00', 'ELZ-AN10', 'ELZ-AN20', 'ANY-LX1', 'LGE-NX9', 'LGE-AN10', 'LGE-AN20', 'MGI-AN00', 'PGT-N19', 'RVL-AL09', 'RVL-AL09', 'RVL-AL09', 'EDI-AL10', 'VKY-TL00', 'VKY-TL00', 'VKY-TL00', 'VKY-TL00', 'VOG-AL00', 'VOG-AL00', 'VOG-AL00', 'VOG-AL00', 'VOG-AL00', 'ANA-AL00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-AN00', 'ANA-NX9', 'JDN-W09', 'JDN-AL00', 'JDN-W09', 'AGR-W09HN', 'COR-L29', 'COR-AL10', 'KOZ-AL00', 'KOZ-AL00', 'KOZ-AL00', 'HJC-LX9', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'ASK-AL00x', 'KSA-AL10', 'huawei ksa-al10', 'TNNH-AN00', 'TNNH-AN00', 'TNNH-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'OXP-AN00', 'CHM-TL00', 'CHM-UL00', 'HW-CHM-CL00', 'CHM-UL00', 'CHM-TL00H', 'CHM-UL00', 'CHM-TL00H', 'CHM-TL00', 'CHM-UL00', 'AKA-AL10', 'HJC-AN90', 'NEW-AN90', 'KOZ-AL40', 'KOZ-AL40', 'DUA-AL00', 'DUA-TL00', 'JAT-AL00', 'MOA-AL00', 'MOA-AL00', 'JDN2-AL00HN', 'JDN2-W09HN', 'AGS2-AL00HN', 'BKL-L09', 'BKL-AL20', 'BKL-AL00', 'PCT-TL10', 'PCT-AL10','PCT-AL10', 'ALA-AN70', 'KNT-AL10', 'KNT-AL20', 'KNT-AL20', 'KNT-UL10', 'KNT-TL10', 'DUK-AL20', 'DUK-AL20', 'DUK-AL20', 'JMM-AL00', 'JMM-AL10', 'JMM-TL10', 'JMM-AL00', 'BKL-L04', 'PCT-L29', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN00', 'OXF-AN10', 'OXF-AN10', 'TEL-AN00a', 'TEL-AN00a', 'TEL-AN00a', 'TEL-AN00a', 'TEL-AN00', 'TEL-AN00a', 'TEL-AN10', 'TEL-AN00a', 'TEL-AN00a', 'TEL-TN00', 'TEL-AN10', 'Honor X10 Lite', 'DNN-LX9', 'KKG-AN00', 'KKG-AN00', 'KKG-AN00', 'KKG-AN00', 'KKG-AN00', 'Honor X10 Max', 'Honor X10 Pro', 'KKG-AN70', 'TFY-AN00', 'ADT-AN00', 'ADT-AN00', 'DIO-AN00', 'VNA-LX2', 'VNE-LX2', 'VNE-LX1', 'VNE-LX3', 'CMA-LX1', 'CMA-LX2', 'RKY-LX1', 'RKY-LX2', 'RKY-LX3', 'TFY-LX2', 'TFY-LX1', 'TFY-LX3', 'VNE-N41', 'CRT-LX1', 'CRT-LX3', 'CRT-LX2', 'ANY-LX2', 'ANY-LX3', 'ANY-NX1', 'RMO-NX1', 'RMO-NX1', 'HUAWEI SCL-L01', 'HUAWEI SCL-L21', 'HUAWEI LYO-L21', 'LYO-L21', 'Y538', 'Y538', 'Ideos', 'Ideos', 'IDEOS S7', 'IDEOS S7 Slim', 'IDEOS S7 Slim', 'Huawei Ideos X1', 'IDEOS X1', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8500', 'U8510', 'rv:35.0', 'rv:13.0', 'U8510', 'Huawei U8510', 'Huawei IDEOS X3', 'Huawei U8510 X3', 'HUAWEI U8510', 'u8800', 'U8800', 'U8800', 'U8800', 'Huawei Ideos X5', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'U8800', 'Huawei IDEOS X8', 'JNY', 'HUAWEI_M2', 'HUAWEI-M391', 'M650', 'M650', 'M650', 'M660', 'M660', 'M660', 'M660', 'Android 2.3.6', 'HUAWEI-M835', 'HUAWEI-M835', 'HUAWEI-M835', 'HUAWEI-M835', 'HUAWEI-M835', 'Android 2.2.2', 'HUAWEI-M860', 'HUAWEI-M860', 'HUAWEI-M860', 'HUAWEI-M860', 'Huawei M865', 'USCCADR3305', 'USCCADR3305', 'M865', 'USCCADR3305', 'M865', 'M865', 'M865', 'M865', 'Android 2.3.6', 'M865C', 'M865C', 'M865C', 'M865C', 'USCCADR3310', 'USCCADR3310', 'USCCADR3310', 'M866', 'HUAWEI M866', 'USCCADR3310', 'M866', 'HUAWEI M866', 'M866', 'USCCADR3310', 'HUAWEI M868', 'HUAWEI M881', 'HUAWEI M881', 'M886', 'M886', 'M886', 'M886', 'M886', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M920', 'HUAWEI-M921', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI-M931', 'HUAWEI RIO-AL00', 'HUAWEI RIO-AL00', 'HUAWEI RIO-AL00', 'HUAWEI MLA-AL10', 'HUAWEI MLA-AL10', 'POT-AL10', 'POT-AL10', 'POT-AL10', 'POT-AL10', 'POT-AL10', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TNN-AN00', 'TYH601M', 'TYH601M', 'TYH601M', 'TYH601M', 'TYH601M', 'ALP-AL00', 'ALP-L29', 'ALP-AL00', 'ALP-AL00', 'ALP-AL00', 'ALP-AL00', 'RNE-L21', 'RNE-L01', 'RNE-L23', 'BLA-L29', 'BLA-L09', 'BLA-A09', 'BLA-AL00', 'HMA-L29', 'HMA-L09', 'HMA-AL00', 'HMA-AL00', 'HMA-AL00', 'HMA-AL00', 'HMA-L29', 'SNE-LX1', 'SNE-LX3', 'LYA-L29', 'LYA-L09', 'LYA-AL00', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'LYA-AL00P', 'EVR-AN00', 'EVR-AL00', 'EVR-AN00', 'EVR-L29', 'EVR-AL00', 'EVR-AL00', 'EVR-N29', 'TAS-AL00', 'TAS-AL00', 'TAS-L29', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AL00', 'TAS-AN00', 'TAS-AN00', 'TAS-AN00', 'TAS-AN00', 'TAS-AN00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'SPN-AL00', 'LIO-L29', 'LIO-AN00', 'LIO-L29', 'LIO-AN00', 'LIO-AL00', 'LIO-AN00', 'LIO-AN00', 'LIO-AL00', 'LIO-N29', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'LIO-AN00P', 'Mate30 RS', 'LIO-AN00P', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'LIO-AN00m', 'OCE-AN10', 'OCE-AN10', 'OCE-AN10', 'OCE-AN10', 'OCE-AN10', 'NOH-AL10', 'NOH-NX9', 'NOH-AN00', 'NOH-AN00', 'NOH-AL10', 'NOH-AN01', 'NOH-AN00', 'NOH-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'NOP-AN00', 'Mate 40 RS', 'OCE-AN50', 'OCE-AN50', 'OCE-AL50', 'OCE-AN50', 'OCE-AN50', 'OCE-AN50', 'OCE-AL50', 'OCE-AN50', 'OCE-AN50', 'OCE-AN50', 'CET-AL00', 'CET-LX9', 'CET-AL00', 'HUAWEI Mate 50', 'CET-AL00', 'DCO-AL00', 'CET-AL60', 'CET-AL60', 'HUAWEI MATE 7', 'HUAWEI NXT-AL10', 'HUAWEI NXT-L29', 'MHA-L29', 'MHA-AL00', 'MHA-AL00', 'MHA-AL00', 'MHA-AL00', 'MHA-L09', 'BLL-L23', 'LON-L29', 'LON-AL00', 'LON-AL00-PD', 'LON-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-AL00', 'NEO-L29', 'HUAWEI CRR-UL00', 'HUAWEI CRR-L09', 'HUAWEI CRR-UL20', 'HUAWEI CRR-CL00', 'BND-L34', 'TAH-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN10', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN00', 'TET-AN50', 'TET-AN50', 'TET-AN50', 'TET-AN50', 'TET-AN50', 'TAH-AN00m', 'TAH-AN00m', 'TAH-AN00m', 'TAH-AN00m', 'PAL-LX9', 'PAL-AL00', 'PAL-AL00', 'PAL-AL00', 'HUAWEI Mate30', 'DBY-W09', 'DBY-W09', 'DBY-W09', 'DBY-W09', 'DBY-W09', 'MON-AL19', 'MON-W19', 'GOT-AL09', 'GOT-AL09', 'GOT-AL09', 'GOT-W29', 'GOT-W29', 'AGS3-L09', 'HUAWEI MediaPad', 'HUAWEI MediaPad', '403HW', 'HUAWEI MediaPad', 'S8-306L', 'HUAWEI MediaPad', 'Huawei MediaPad', 'X1 7.0', 'Huawei MediaPad', 'S8-701w', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MediaPad 7 Lite', 'MON-AL19B', 'MON-AL19B', 'MON-AL19B', 'BTV-DL09', 'BTV-W09', 'BAH-W09', 'CPN-L09', 'CPN-AL00', 'CPN-W09', 'BAH-L09', 'BAH2-W19', 'JDN2-L09', 'BAH2-L09', 'BAH2-AL10', 'AGR-L09', 'KOB2-L03', 'T1-A21w', 'T1-A21L', 'T1-A23L', 'T1-701u', 'T1-701u', 'T1-823L', 'T1-823L', 'T1-821w', 'MediaPad T1 8.0', 'AGS-W09', 'AGS-L09', 'AGS-L03', 'BG2-U01', 'BG2-W09', 'KOB-L09', 'BZK-L00', 'KOB-W09', 'AGS2-L09', 'AGS2-W09', 'GEM-701L', 'GEM-703L', 'GEM-702L', 'Nexus 6P', 'Nexus 6P', 'HUAWEI CAN-L11', 'HUAWEI CAN-L12', 'HUAWEI CAN-L01', 'HUAWEI CAZ-AL10', '1080x1788', 'NCO-LX1', 'NCO-AL00', 'GLA-LX1', 'GLA-AL00', 'PIC-TL00', 'PIC-LX9', 'PIC-AL00', '704HW', 'BAC-L03', 'BAC-TL00', 'BAC-L01', 'BAC-TL00', 'BAC-AL00', 'BAC-L22', 'BAC-L21', 'BAC-AL00', 'BAC-L21', 'RNE-L22', 'HWI-AL00', 'HWI-AL00', 'HWI-AL00', 'HWI-TL00', 'HWI-AL00', 'PAR-LX1', 'PAR-AL00', 'PAR-LX9', 'PAR-AL00', 'ANE-AL00', 'INE-LX2', 'INE-LX2r', 'VCE-L22', 'VCE-TL00', 'VCE-AL00', 'VCE-AL00', 'VCE-AL00', 'MAR-AL00', 'MAR-AL00', 'MAR-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL00', 'SEA-AL10', 'SEA-AL10', 'SEA-AL10', 'SEA-AL10', 'SEA-AL10', 'GLK-AL00', 'GLK-TL00', 'GLK-TL00', 'GLK-LX1U', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'GLK-AL00', 'SPN-TL00', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AL10', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'WLZ-AN00', 'JNY-AL10', 'JNY-AL10', 'JNY-AL10', 'JNY-AL10', 'JNY-AL10', 'JEF-TN00', 'JEF-NX9', 'JEF-AN20', 'JEF-AN00', 'JEF-AN20', 'JEF-AN00', 'JER-AN20', 'JER-AN10', 'JER-TN10', 'JER-AN10', 'JER-AN10', 'JER-AN20', 'JER-AN10', 'CDL-AN50', 'CDY-NX9B', 'CDY-AN00', 'CDY-AN00', 'JNY-LX2', 'ANG-LX2', 'ANG-LX1', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'ANG-AN00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AL00', 'BRQ-AN00', 'BRQ-AN00', 'BRQ-AN00', 'BRQ-AN00', 'BRQ-AN00', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AL50', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'JSC-AN00', 'CHL-AL60', 'CHL-AL60', 'NEN-LX1', 'NEN-L22', 'NAM-LX9', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'RTE-AL00', 'JLN-LX1', 'JLN-LX3', '608HW', 'PRA-LX2', 'PRA-LX3', 'HUAWEI MLA-L11', 'DIG-L01', 'WAS-AL00', 'FIG-LX1', 'FIG-LX2', 'FIG-LX3', 'POT-LX1', 'POT-LX3', 'POT-LX2J', 'POT-LX1AF', 'POT-LX1T', 'PPA-LX2', 'PPA-LX1', 'P Smart S', 'STK-LX1', 'MZ-STK-LX1', 'VTR-L09', 'VTR-L29', 'VTR-AL00', 'WAS-LX1A', 'WAS-TL10', 'VKY-AL00', 'VKY-L09', 'VKY-L29', 'BAC-L23', 'HUAWEI P11', 'EML-L09', 'EML-L29', 'EML-AL00', 'EML-AL00', 'EML-L29', 'ANE-LX1', 'ANE-LX2', 'ANE-LX3', 'ANE-LX2J', 'CLT-L29', 'CLT-AL00', 'CLT-L09', 'CLT-L04', 'CLT-AL00', 'ELE-AL00', 'ELE-L09', 'ELE-AL00', 'ELE-L29', 'ELE-L04', 'ELE-AL00', 'MAR-LX1A', 'MAR-LX1M', 'MAR-LX1A', 'MAR-LX2', 'MAR-LX3A', 'MAR-LX1B', 'VOG-AL10', 'VOG-L29', 'VOG-L09', 'HUAWEI P30PRO', 'ANA-LX4', 'JNY-LX1', 'ART-L29', 'ART-L29N', 'ELS-NX9', 'ELS-AN00', 'ELS-AN00', 'ELS-AN00', 'ELS-AN10', 'ELS-AN10', 'ELS-N39', 'ELS-AN10', 'ABR-LX9', 'ABR-AL00', 'Huawei P50', 'ABR-AL00', 'BAL-L49', 'BAL-AL00', 'JAD-AL50', 'ABR-AL60', 'ABR-AL90', 'ABR-AL60', 'ABR-AL90', 'ABR-AL60', 'ABR-AL90', 'ABR-AL60', 'ABR-AL60', 'ABR-AL60', 'HUAWEI P6-U06', 'HUAWEI P6s', 'HUAWEI P7 mini', 'HUAWEI P7 mini', 'HUAWEI P7 mini', 'HUAWEI GRA-L09', 'HUAWEI GRA-UL00', 'ALE-L21', 'ALE-L23', 'ALE-L21', 'ALE-L21', 'PRA-LX1', 'PRA-LA1', 'HUAWEI P8max', 'HUAWEI GRA-UL10', 'HUAWEI-P8Lite', 'HUAWEI-P8Lite', 'EVA-L09', 'EVA-DL00', 'EVA-L19', 'EVA-AL00', 'EVA-AL10', 'HUAWEI VNS-L31', 'HUAWEI VNS-L21', 'HUAWEI VNS-L22', 'SLA-L22', 'SLA-L02', 'HUAWEI VNS-L52', 'HUAWEI VNS-L52', 'DIG-L03', 'DIG-L23', 'VIE-L29', 'VIE-L09', 'VIE-AL10', 'VIE-AL10', 'SM-A336B', 'SM-A536E', 'M2101K6R', 'SM-A307G', 'SM-A528B', 'LM-K200', '2201116SG', 'SM-A107M', 'CPH2239', 'SM-A205G', 'M2004J19C', 'M2102J20SG', 'SM-A336M', 'SM-A127M', 'SM-G975U', 'SM-A730F', 'SM-G950F', 'M2007J20CG', 'T671E', 'HUAWEI_Q201', 'Huawei S7', 'HUAWEI-S7', 'HUAWEI-S7', 'HUAWEI-S7', 'S8600', 'S8600', 'S8600', 'HUAWEI S9', 'HUAWEI ATH-UL01', 'HUAWEI ATH-UL06', 'KANT-360', 'KANT-360S', 'LEO-BX9', 'LEO-DLXXE', 'HUAWEI T1 7.0', 'B988', 'ZT-10013G', 'B988', 'B988', 'HUAWEI T8100', 'HUAWEI T8500', 'HUAWEI T8600', 'T8620', 'T8620', 'T8620', 'T8830Pro', 'T8830Pro', 'T8830Pro', 'HUAWEI T8833', 'HUAWEI T8833', 'HUAWEI T8833', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8950', 'HUAWEI T8951', 'HUAWEI T8951', 'HUAWEI T8951', 'HUAWEI_T8951', 'HUAWEI_T8951', 'HUAWEI T8951', 'HUAWEI T8951', 'T9200', 'T9200', 'T9200', 'HUAWEI-U20', 'HUAWEI U8120', 'U8180', 'U8180', 'U8180', 'MegaFon U8180', 'Kyivstar Terra', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8180', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8185', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8186', 'U8230', 'U8220/U8230', 'HuaweiU8300', 'U8350', 'U8350', 'GM FOX', 'U8350', 'Barcelona', 'U8350', 'U8350', 'U8350', 'U8350', 'U8350-51', 'U8350', 'U8350', 'U8350', 'U8350-51', 'Personal U8350', 'U8350', 'U8350', 'U8350', 'U8350', 'MF8503', 'ICE', 'MF8503', 'MF8503', 'HuaweiU8500', 'HuaweiU8510', 'S41HW', 'U8600', 'U8600', 'U8600', 'U8600', 'U8600', 'U8600', 'U8600', 'Huawei u8650', 'Huawei u8650', 'U8650', 'U8650-1', 'U8650', 'U8650', 'U8650', 'U8650-1', 'U8650-1', 'U8650', 'MTC 955', 'U8650', 'U8650', 'U8650-1', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'U8650', 'Prism', 'Prism', 'Prism', 'U8651T', 'Prism', 'U8651T', 'U8651T', 'Prism', 'U8652', 'Huawei-U8652', 'U8652', 'Huawei-U8652', 'Huawei-U8652', 'Huawei-U8652', 'Huawei-U8652', 'Android 2.3.5', 'U8655-51', 'U8655-1', 'U8655-1', 'U8655-1', 'MTC 965', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'U8655-1', 'Etisalat', 'U8655-1', 'U8655-1', 'U8655-51', 'U8655-1', 'U8660', 'SONIC', 'HUAWEI U8661', 'HUAWEI_U8661', 'HUAWEI U8661', 'HUAWEI U8661', 'HUAWEI U8661', 'HUAWEI U8661', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'Huawei-U8665', 'GT-19100', 'U8666-1', 'U8666-1', 'U8666-1', 'MTC Fit', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-51', 'U8666-1', 'U8666-51', 'U8666-51', 'U8666-51', 'U8666-51', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'U8666-1', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666E', 'HUAWEI U8666N', 'HUAWEI U8666N', 'HUAWEI U8666N', 'HUAWEI U8666N', 'HUAWEI U8666N', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'U8667', 'T-MobilemyTouch', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'HUAWEI U8681', 'Prism II', 'Prism II', 'Prism II', 'Prism II', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Huawei-U8687', 'Ucell', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8800Pro', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8812D', 'U8815-51', 'U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'HUAWEI U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'U8815', 'Galaxy S5', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'HUAWEI U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'U8815N', 'MTC Viva', 'HUAWEI U8816', 'U8816', 'MTC Viva', 'U8816', 'U8816', 'U8820', 'U8820', 'U8820', 'U8820', 'U8820', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI_U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'HUAWEI_U8825D', 'HUAWEI U8825D', 'HUAWEI U8825D', 'U8832D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'U8836D', 'HUAWEI-U8850', 'U8860-51', 'HUAWEI_U8860', 'U8867Z', 'U8867Z', 'U8867Z', 'Huawei U8900', 'HUAWEI U8950', 'HUAWEI U8950D', 'Oppo F9D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8950D', 'HUAWEI U8951', 'Huawei-U9000', 'HUAWEI-U9000', 'HUAWEI-U9000', 'HUAWEI-U9000', 'U9200E', 'U9200E', 'U9200E', 'U9200E', 'U9200E', 'U9200E', '201HW', '201HW', '201HW', '201HW', 'U9500E', 'HW-01E', 'HW-01E', 'HW-01E', 'HW-01E', 'HUAWEI U9510', 'Huawei/U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI_U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'HUAWEI U9510E', 'GL07S', 'GL07S', 'GL07S', 'GL07S', 'GL07S', 'GL07S', 'UM840', 'UM840', 'UM840', 'KANT-359', 'KANT-369', 'HUAWEI WATCH', 'ARS-L22', 'ARS-TL00', 'ARS-AL00', 'ARS-L22', 'Huawei Y221', 'Huawei y221', 'Huawei Y3 2017', 'CRO-U00', 'CRO-L22', 'CAG-L02', 'CAG-L22', 'HUAWEI Y300C', 'HUAWEI Y300C', 'HUAWEI_Y300C', 'HUAWEI Y300C', 'HUAWEI Y300C', 'HUAWEI Y300C', 'HUAWEI Y300C', 'Huawei Y301A1', 'Huawei Y301A1', 'Huawei Y301A1', 'Huawei Y301A1', 'Huawei Y301A2', 'Huawei Y301A2', 'Huawei Y301A2', 'HuaweiY301A2', 'Huawei Y320', 'Huawei Y320', 'Huawei Y320', 'Huawei Y330', 'Huawei Y330', 'HUAWEI Y330-U01', 'HUAWEI Y336-U02', 'Huawei Y360', 'HUAWEI Y360', 'HUAWEI LUA-L21', 'HUAWEI LUA-U22', 'MYA-L22', 'MYA-L23', 'MYA-U29', 'DRA-L21', 'DRA-LX3', 'DRA-L01', 'U', 'AMN-LX9', 'AMN-LX2', 'AMN-LX3', 'HUAWEI AMN-LX9', 'AMN-LX1', 'DRA-LX5', 'DRA-LX5', 'DRA-LX5', 'DRA-LX5', 'CRO-L23', 'CRO-L03', 'CRO-L03', 'CAG-L03', 'CAG-L23', 'DRA-LX2', 'MYA-L13', 'HUAWEI Y511', 'Huawei Y520', 'HUAWEI Y520', 'HUAWEI Y536A1', 'HUAWEI Y550', 'HUAWEIY560', 'Huawei Y5C', 'HUAWEI CUN-L22', 'HUAWEI CUN-U29', 'HUAWEI CUN-L21', 'HUAWEI CUN-L01', 'DRA-LX9', 'DRA-LX9', 'DRA-LX9', 'HUAWEI SCL-U31', 'HUAWEI SCC-U21', 'MYA-L11', 'MYA-L41', 'ATU-L22', 'ATU-L21', 'MRD-LX3', 'MRD-LX1', 'MRD-LX1F', 'MRD-LX1N', 'MRD-LX3', 'ATU-L31', 'TIT-L01', 'HUAWEI TIT-L01', 'HUAWEI TIT-AL00', 'MRD-LX2', 'Kavak Y625-U03', 'Y635-L03', 'Y635-L01', 'HUAWEI Y635-L03', 'Y635-L02', 'Y635-L21', 'Y635-L21', 'CAM-L21', 'HUAWEI CAM-L21', 'CAM-L23', 'CAM-L03', 'MED-LX9', 'MED-LX9N', 'H1711z', 'TRT-LX3', 'TRT-LX1', 'LDN-L01', 'LDN-LX3', 'LDN-L01', 'DUB-LX3', 'DUB-LX1', 'LDN-L21', 'LDN-L21', 'LDN-L21', 'TRT-L21A', 'LDN-LX2', 'DUB-LX2', 'DUB-AL20', 'PPA-LX3', 'Peppa-L23B', 'ART-L28', 'AQM-LX1', 'AQM-LX1', 'FLA-LX3', 'FLA-LX2', 'FLA-LX1', 'FLA-AL20', 'FLA-TL10', 'JKM-LX1', 'JKM-LX2', 'JKM-AL00b', 'JKM-AL00a', 'JKM-LX3', 'STK-L21', 'STK-L22', 'STK-LX3', 'FRL-L23', 'FRL-L22', 'FRL-L22']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.dix = random.choice(['114.0.0.20.2','114.0.0.38.120','114.0.0.20.70','114.0.0.28.120','114.0.0.0.24','114.0.0.0.41'])
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
            f'Instagram {self.dix} Android ({self.dvc}; 235dpi; 1080x2280; HUAWEI MOBILITY LIMITED/Huawei; {str(random.choice(self.huawei))}; mt6761; in_ID; 164094530)',
            f'Instagram {self.dix} Android ({self.dvc}; 235dpi; 1080x2280; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; mt6761; in_ID; 164094530)',
        ]))
        
    def useragent_ajax(self):
        fbcrrr = random.choice(['Sprint','Verizon','AT&T','Three','vodaAU','3Austria','Telstra','TELIA','OPTUS','U.S.Cellular','TFW','OrangeFrance','TELEGRL'])
        dpi = ['133','320','515','160','640','240','120','800','480','225','768','216','1024']
        i_version = ['114.0.0.20.2','114.0.0.38.120','114.0.0.20.70','114.0.0.28.120','114.0.0.0.24','114.0.0.0.41']
        pxl_phone = ['623x1280','700x1245','800x1280','1080x2340','1320x2400','1242x2688']
        return(random.choice([
            f""Instagram {str(random.choice(i_version))} Android (23/{str(random.randint(9,12))}; {str(random.choice(dpi))}dpi; {str(random.choice(pxl_phone))}; vivo; vivo Xplay5S; PD1516A; qcom; ru; 99640911)"",
            f""Mozilla/5.0 (Linux; Android {str(random.randint(9,12))}; Redmi Note 6 Pro Build/OPM1.171019.011){str(random.randint(111111,199999))}.020; en-US) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(73,99))}.0.{str(random.randint(3500,3999))}.{str(random.randint(75,150))} Mobile Safari/537.36"",
            f""Mozilla/5.0 (Linux; U; Android {str(random.randint(9,12))}; zh-cn; OPPO R9s Build/MMB29M) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/{str(random.randint(73,99))}.0.{str(random.randint(3500,3999))}.{str(random.randint(75,150))} UCBrowser/{str(random.randint(7,13))}.4.0.{str(random.randint(1300,1999))} Mobile Safari/537.36"",
            f""Dalvik/2.1.0 (Linux; U; Android {str(random.randint(6,13))}; AORO_A7 Build/QP1A.190711.020) [FBAN/MessengerForAndroid;FBAV/{str(random.randint(4,19))}.{str(random.randint(1,9))};FBLC/in_ID;FBBV/{str(random.randint(4,19))}.{str(random.randint(1,9))};FBCR/{fbcrrr};FBMF/Aoro;FBBD/Aoro;FBDV/AORO_A7;FBSV/{str(random.randint(6,13))}.0;FBCA/armeabi-v7a:armeabi;FBDM/""+""{density=4,width=1440,height=3080};FB_FW/353;]"",
            f""Dalvik/2.1.0 (Linux; U; Android {str(random.randint(6,20))}; Avvio_793 Build/KOT49H) [FBAN/Orca-Android;FBAV/3.0.1-release;FBLC/in_ID;FBBV/128764;FBCR/Tsel-PakaiSarung;FBMF/Avvio;FBBD/Avvio;FBDV/Avvio_793;FBSV/{str(random.randint(6,13))}.0;;FBCA/armeabi-v7a:armeabi;FBDM/""+""{density=2.75,width=1080,height=2110}] FBBK/1""
        ]))
        


"
9Nhr1cma,KlasaProgram,cuniszkiewicz,C#,Saturday 9th of March 2024 07:11:35 AM CDT,"using System;
using System.Collections.Generic;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP_1N122L_Prrogamowanie_sieci
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Strongman strongman = new Strongman();
            int wybor;
            strongman.Imie = ""Mariusz"";
            strongman.nazwisko = ""Pudzian"";
            //strongman.wiek = 30;
            strongman.obwodKlatki = 150;
            strongman.waga = 160;

            do
            {
                Console.Clear();
                Console.WriteLine(""0 - Koniec"");
                Console.WriteLine(""1 - Przedstaw się"");
                Console.WriteLine(""2 - Nakarm""); 
                Console.WriteLine(""3 - Trenuj"");
                Console.WriteLine(""4 - Biegaj"");
                Console.WriteLine(""5 - Motto"");
                Console.WriteLine(""6 - Śpij"");
                Console.WriteLine(""7 - Zmień dane strongmana"");
                Console.Write(""Twój wybór: "");
                wybor = int.Parse(Console.ReadLine());
                Console.Clear();
                switch (wybor)
                {
                    case 0:
                        Console.WriteLine(""\n\n\n\n\n\t\t\t\tDziękuję za skorzystanie z programu!"");
                        System.Threading.Thread.Sleep(1000);
                        break;
                    case 1:
                        strongman.PrzedstawSie();
                        Console.WriteLine($""Strongman ma {strongman.Wiek} lat."");
                        Console.ReadKey();
                        break;
                    case 2:
                        strongman.Nakarm();
                        Console.ReadKey();
                        break;
                    case 3:
                        strongman.Trenuj();
                        Console.ReadKey();
                        break;
                    case 4:
                        strongman.Biegaj();
                        Console.ReadKey();
                        break;
                    case 5:
                        strongman.Motto();
                        Console.ReadKey();
                        break;
                    case 6:
                        strongman.Spij();
                        Console.ReadKey();
                        break;
                    case 7:
                        Console.Write(""Imię: "");
                        strongman.Imie = Console.ReadLine();
                        Console.Write(""Nazwisko: "");
                        strongman.nazwisko = Console.ReadLine();
                        Console.Write(""Wiek: "");
                        strongman.Wiek = int.Parse(Console.ReadLine());
                        Console.Write(""Obwód klatki: "");
                        strongman.obwodKlatki = double.Parse(Console.ReadLine());
                        Console.Write(""Waga: "");
                        strongman.waga = double.Parse(Console.ReadLine());
                        break;
                    default:
                        Console.WriteLine(""\n\n\n\n\n\t\t\t\tNiewłaściwa opcja z menu!"");
                        System.Threading.Thread.Sleep(1000);
                        break;
                }
            } while (wybor != 0);
        }
    }
}
"
LrJJ10yy,KlasaStrongman,cuniszkiewicz,C#,Saturday 9th of March 2024 07:11:01 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP_1N122L_Prrogamowanie_sieci
{
    internal class Strongman
    {
        private string imie;
        public string nazwisko;
        private int wiek;
        public double waga;
        public double obwodKlatki;

        private double wzrost;

        public double Wzrost
        {
            get { return wzrost; }
            set { wzrost = value; }
        }




        public string Imie
        {
            get { return imie; }
            set { imie = value; }
        }


        public int Wiek
        {
            get { return wiek; }

            set
            {
                if (value <= 10)
                {
                    wiek = 18;
                    Console.WriteLine(""Podano błędny wiek! Wartość domyślna: 18."");
                    Console.ReadKey();
                }
                else
                {
                    wiek = value;
                }

            }
        }
        public void PrzedstawSie()
        {
            //Console.WriteLine(""Cześć jestem "" + imie + "" "" +  nazwisko + "" i mam "" + wiek + "" lat."");
            //Console.WriteLine(""Cześć jestem {0} {1} i mam {2} lat."",imie, nazwisko, wiek);
            Console.WriteLine($""Cześć jestem {imie} {nazwisko} i mam {wiek} lat."");
        }

        public void Nakarm()
        {
            Console.WriteLine($""{imie} je posiłek."");
            Console.WriteLine($""{imie}: Mniam mniam."");
        }

        public void Trenuj()
        {
            obwodKlatki++;
            Console.WriteLine($""{imie} zwiększył obwód klatki."");
        }

        public void Biegaj()
        {
            Console.WriteLine($""{imie} biega."");
        }

        public void Motto(string m = ""Polska górą!"")
        {
            Console.WriteLine($""{imie}: {m}"");
        }

        public void Spij()
        {
            Console.WriteLine($""{imie} chrapie....."");
        }
    }
}
"
Pc6JkQGK,Untitled,uN1ckq,Lua,Saturday 9th of March 2024 07:06:38 AM CDT,"--
--#region Function definitions
--

local function moveToWall()
    local isWall = false
    while isWall == false do
        isWall = turtle.detect()
        turtle.forward()
    end
    print(""wall detected!"")
end

local function replaceTo(targetBlock)
    local hasBlock, frontBlock = turtle.inspect()
    if hasBlock then
        print(""Front block "", frontBlock.name, "" ?-> "", targetBlock)

        if frontBlock.name == targetBlock then
            turtle.select(3)
            print(""Diggin "", turtle.dig(""left""))

            turtle.select(2)
            print(""Placeing "", turtle.place())

            turtle.select(1)
        else
            print(""wrong block ["", frontBlock.name, ""] != ["", targetBlock, ""]"")
        end
    end
end


--
--    Function moves turtle by line
--    @param leftRot - left rotation angle divisible by 90
--    @param len - distance to move
--    @param keepDirection - keep turtle diretion before moving
--    returns
--    true, nil or false, move difference
local function moveTo(leftRot, len, keepDirection)
    local path = 0

    -- Rotation to destination
    for i = 1, leftRot / 90, 1 do
        turtle.turnLeft()
    end

    -- moving to destination
    for i = 1, len, 1 do
        local moved = turtle.forward()
        if moved == false then
            path = i
            break
        end
    end

    -- keeping direction
    if keepDirection == true then
        for i = 1, leftRot / 90, 1 do
            turtle.turnRight()
        end
    end

    if len == path then
        return true, nil
    else
        return false, len - path
    end
end


local function replaceSegment(h, w, targetBlock)
    local currentHeight = 1;
    local currentWidth = 1;

    while currentHeight < h do
        while currentWidth < w do
            replaceTo(targetBlock)
            turtle.turnRight()

            local isMoved = turtle.forward()
            if isMoved == false then
                moveTo(180, w, true)
                break
            end

            turtle.turnLeft()

            currentWidth = currentWidth + 1
        end
        currentHeight = currentHeight + 1
        currentWidth = 1

        turtle.up()
        print(""Returning"", moveTo(90, w, true))
    end

    --
end


--
--#endregion Function definitions
--




--
-- STARTER
--
print(""-- Block Replacing algorithm --"")

--
-- parsing arguments
--
local args = { ... }
print(""Replaceing for"", args[1], args[2])
local rHeight = tonumber(args[1])
local rWidth = tonumber(args[2])


print(""EQUIP PICKAXE"", turtle.equipLeft())
print(""Fuel: "", turtle.getFuelLevel())

moveToWall()
replaceSegment(rHeight, rWidth, ""minecraft:cobblestone"")

print(""replacement done"")
print(""UNEQUIP PICKAXE"", turtle.equipLeft())
print(""Fuel: "", turtle.getFuelLevel())
"
B04Nwk7X,Review VARIANSE,fxvnpro,PHP,Saturday 9th of March 2024 07:04:58 AM CDT,https://www.fxvnpro.com/review-varianse/
LYEHvbhu,Review VARIANSE,reviewbrokers,PHP,Saturday 9th of March 2024 07:02:08 AM CDT,https://www.reviewbrokers.net/review-varianse/
LTBxQcZk,Mirror,Kuzey2010,Lua,Saturday 9th of March 2024 06:58:37 AM CDT,"task.wait(5)

local Player_Service, Run_Service = game:GetService ""Players"", game:GetService ""RunService""

for _, Player in pairs(Player_Service:GetPlayers()) do
	local Character = Player.Character
	Character.Archivable = true
	
	local Replica = Character:Clone()
	Replica.PrimaryPart = Replica.HumanoidRootPart
	Replica.Parent = workspace

	local Runner = Run_Service.Heartbeat:Connect(function()

		local C, R = Character:GetDescendants(), Replica:GetChildren()
		for _, X in R do
			for _, V in C do
				if X.Name == V.Name and X:IsA(""BasePart"") and V:IsA(""BasePart"") then
					X.Anchored = true
					X.CFrame = V.CFrame
				end
			end
		end

		local Orient = {Character.HumanoidRootPart.CFrame:ToOrientation()}
		local Position = Character.HumanoidRootPart.CFrame.Position

		Replica:PivotTo(CFrame.new(
			Position.X,
			Position.Y,
			Position.Z * -1) * CFrame.Angles(Orient[1], (Orient[2] * -1) + math.rad(180), Orient[3]))
	end)
	
	Character:FindFirstChildOfClass ""Humanoid"".Died:Connect(function()
		Runner:Disconnect()
		Replica:Destroy()
	end)
end"
uCByM7Xy,Untitled,BOBBYMADMAN1,C++,Saturday 9th of March 2024 06:56:18 AM CDT,Part 1 : https://modsfire.com/pLy46h4kuzyr909
J31DsHzu,Blocksy Change the Logo URL,Gecata1,PHP,Saturday 9th of March 2024 06:54:11 AM CDT,"add_filter('blocksy:header:logo:url', function ($home_page) {
    // Check if we are on a page with a specific slug
    if (is_page('your-page-slug')) {
        // If we are on a page with the specified slug, return the new logo URL
        return 'https://my-custom-url.com';
    }
    // If we are not on a page with the specified slug, return the original logo URL
    return $home_page;
});"
uxfq2b5p,Windows Images for VM,metalx1000,Bash,Saturday 9th of March 2024 06:53:04 AM CDT,"# Windows Images for VM
https://bobpony.com/downloads/
wget -c ""https://dl.bobpony.com/windows/xp/professional/en_winxp_pro_x86_build2600_iso.img""

# Setup WinXP
qemu-img create -f qcow2 winxp.img 5G
qemu-system-i386 -enable-kvm -m 2G  -boot d -cdrom en_winxp_pro_x86_build2600_iso.img -hda winxp.img
qemu-system-i386 -enable-kvm -m 2G  -boot c -cdrom en_winxp_pro_x86_build2600_iso.img -hda winxp.img

#  Get serial key
#  TFGK8-RQT7R-F6KW8-Q2X4M-YF2CX
wget -qO- ""https://gist.github.com/denizssch/72ec2aa1c5d0a84ffb57076f7dbf30d6/raw/814ce30781915b45ffc35a212ee7612ef4c10167/XpSerials.txt""

qemu-system-i386 -enable-kvm -m 2G -hda winxp.img -net nic,model=rtl8139 -net user"
jRAKLdWk,AD,RainbowKey,JSON,Saturday 9th of March 2024 06:35:07 AM CDT,"{""all"":{
      ""0"":{""type"":""bot"", ""link"":""none"", ""banner"":""none"", ""image"":""none"", ""color"":""0"", ""id"":""0"", 
           ""info"": {
               ""views"":{""total"":""0"", ""en"":""0"", ""ru"":""0"", ""pl"":""0"", ""ignore"":""0""},
               ""staff"":{""accept"":""0"", ""time"":""0"", ""block"":""false""},
               ""guilds"":{""big"":""0"", ""small"":""0""} 
          }
       } 
   }
}"
0WpXEEE9,spinning cd w/ cover,elroseria,CSS,Saturday 9th of March 2024 06:32:06 AM CDT,"<!-- music player made by arsha~! cr appreciated @girisgoblog pls dont repost on other pastebins -->

<style>

lol {
}

lol, .img2 { /* album's cover image u can change the size! */
position: relative;
left: -0.75em;
width: 60px;
height: 60px;
background-color: black;
color: black;
z-index: 999;
}

.img1 { /* cd image u can change the size too */
position: absolute;
left: 20px;
top: 0.375em;
width: 64px;
height: 64px;
z-index: 800;
-webkit-animation: spin 2s linear infinite;
-webkit-animation:spin 4s linear infinite;
-moz-animation:spin 4s linear infinite;
animation:spin 4s linear infinite;
}

@-moz-keyframes spin {
100% { -moz-transform: rotate(360deg); }
}

@-webkit-keyframes spin {
100% { -webkit-transform: rotate(360deg); }
}

@keyframes spin {
100% {
-webkit-transform: rotate(360deg);
transform:rotate(360deg);
}
}

.img1:hover { /* this makes the cd stop spinning when hovering! */
-webkit-animation: pop 0.3s ease;
}

@media only screen and (max-width: 600px) {

.img1 {
left: 25px;
bottom: 1em;
width: 47px;
height: 47px;
}

.img2 {
width: 48px;
height: 48px;
}

}

</style>

<body>
<div id=""lol""><img class=""img2""src=""https://dl.dropbox.com/scl/fi/e362qggf9gs1n7v6tayh5/b0d28ef9dda70f7f5df46585b0ffffae.jpg?rlkey=hlp5nxuugmbok7mqdfbmmaapl&dl=0""><img class=""img1"" src=""https://dl.dropbox.com/scl/fi/i1l2chqc8jalulqxdtl86/cd.png?rlkey=z152mgvkwxen4ag0p697cgnn9&dl=0"" width=""auto"" height=""45px""></div>

<script>
document.getElementById(""lol"").onclick = function() {
var audio = document.getElementById(""audio"");
if (audio.paused) audio.play();
else audio.pause();
};
</script>

<audio id=""audio"" src=""https://dl.dropbox.com/scl/fi/mijw8gv6did7z4thgxrss/Perfect-Night.mp3?rlkey=i53y17j6427aytjmkxoh3cose&dl=0""></audio>

</body>"
hBV51kVV,Xe1phix-[Sherlock]-Cheatsheet-[v5.8.42].sh,xe1phix,Bash,Saturday 9th of March 2024 06:19:56 AM CDT,"#!/bin/sh


##-===========================================================-##
##-<!>~<!>~<!>~<!>~<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-##
##-===========================================================-##
##   	[+] Sherlock - OSINT - Social Media Intel + Recon
##-===========================================================-##
##-<!>~<!>~<!>~<!>~<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-<!>-##
##-===========================================================-##


## ----------------------------------------------------------------------- ##
##    sherlock --verbose $Username
## ----------------------------------------------------------------------- ##
##    sherlock --debug $Username       ## Display debug info and metrics
## ----------------------------------------------------------------------- ##

## ----------------------------------------------------------------------- ##
##    sherlock $Username --output $Dir/$File
## ----------------------------------------------------------------------- ##
##    sherlock $Username $Username --folderoutput $Dir/
## ----------------------------------------------------------------------- ##

## ------------------------------------------------------------------------------ ##
##    sherlock --tor $Username            ## Make requests over Tor
## ------------------------------------------------------------------------------ ##
##    sherlock --unique-tor $Username     ## new Tor circuit after each request
## ------------------------------------------------------------------------------ ##

## ------------------------------------------------------------------------- ##
##    sherlock $Username --proxy $Proxy    ## Make requests using a proxy
## ------------------------------------------------------------------------- ##

## ------------------------------------------------------------------------- ##
##    sherlock $Username --proxy socks5://10.64.0.1:1080
## ------------------------------------------------------------------------- ##
##    sherlock $Username --proxy socks5://10.8.0.1:1080
## ------------------------------------------------------------------------- ##

## ----------------------------------------------------------------------- ##
##    sherlock $Username --browse     ## Browse results using a browser
## ----------------------------------------------------------------------- ##

## --------------------------------------------------------------------------------- ##
##    sherlock $Username --csv        ## Create Comma-Separated Values (CSV) File
## --------------------------------------------------------------------------------- ##

## -------------------------------------------------------------------- ##
##    sherlock --json $File.json      ## Load data from a JSON File
## -------------------------------------------------------------------- ##


"
r58QaNrb,Xe1phix-[AMass]-Cheatsheet-[v5.4.52].sh,xe1phix,Bash,Saturday 9th of March 2024 06:09:59 AM CDT,"#!/bin/sh
##-=======================================================================-##
##   [+] Xe1phix-[AMass]-Cheatsheet-[v*.*.**].sh
##-=======================================================================-##
## ----------------------------------------------------------------------- ##
##   [?] AMass - Attack Surface Mapping and Asset Discovery tool
## ----------------------------------------------------------------------- ##


##-============================-##
##   [+] 
##-============================-##
amass enum -list


##-======================================-##
##   [+] Enumerate Domain + Source + IP
##-======================================-##
amass enum -src -ip -d $URL


##-============================-##
##   [+]
##-============================-##
amass enum -src -brute -d $Domain -o $File


##-============================-##
##   [+]
##-============================-##
amass intel -whois -ip -src -d $Domain -o $File


##-===========================================-##
##   [+] AMass - Recon on CIDRs:
##-===========================================-##
amass intel -cidr 



##-========================================-##
##   [+] Passively Search For Subdomains:
##-========================================-##
amass enum -passive -d $Domain -src


##-=====================================-##
##   [+] Active Subdomain Bruteforcing:
##-=====================================-##
amass enum -active -d $Domain -brute -w $File -src -ip -dir $Dir -config $File -o $File


##-=========================-##
##   [+] DNS Enumeration:
##-=========================-##
amass enum -v -src -ip -brute -d $Domain



amass enum -d $Domain



amass intel -whois -d $Domain
amass intel -active 172.21.0.0-64 -p 80,443,8080,8443
amass intel -ipv4 -whois -d $Domain
amass intel -ipv6 -whois -d $Domain


##-========================================-##
##   [+] Discover Targets for Enumeration:
##-========================================-##
amass intel -d $Domain


##-==============================================-##
##   [+] Find root domains related to a domain:
##-==============================================-##
amass intel -d $Domain -whois


##-===============================================-##
##   [+] Find ASNs belonging to an organisation:
##-===============================================-##
amass intel -org '$OrgName'


##-===========================================-##
##   [+] AMass - Use Active Recon Methods:
##-===========================================-##
amass intel -active -addr
amass intel -active -addr 192.168.0.1-254

##-=======================================================================-##
##   [+] Find root domains belonging to a given Autonomous System Number:
##-=======================================================================-##
amass intel -active -asn $ASN -ip -src


##-===========================================-##
##   [+] AMass - :
##-===========================================-##
amass intel -log amass.log -whois


##-===========================================-##
##   [+] AMass - :
##-===========================================-##
amass -src -ip -active -exclude crtsh -d $Domain
# amass -src -ip -active -brute --min-for-recursive 3 -exclude crtsh -w $Wordlist -d $Domain


##-===========================================-##
##   [+] AMass - :
##-===========================================-##
amass enum -src -ip -d $Domain


##-==============================================-##
##  [+] AMass - Gather Reverse DNS Subdomains:
##-==============================================-##
amass intel -whois -d $Domain > $Dir/domains/domains-$Domain-reverse-whois.txt



##-========================================-##
##  [+] AMass - 
##-========================================-##
amass enum -config /$Dir/config.ini -passive -o amass_subs.txt -d $Domain

amass enum  --passive -d $target -config $Dir/amass-config.ini -o $Dir/amass.txt


##-=======================================-##
##   [+] Double checking for subdomains
##   [+] with amass and certspotter.
##-=======================================-##
amass enum -d $Domain | tee -a $Dir/final1.txt


##-===============================================-##
##   [+] Typical parameters for DNS enumeration:
##-===============================================-##
#amass enum -v -src -ip -brute -min-for-recursive 2 -d $Domain



##-===============================================-##
##  [+] AMass - 
##-===============================================-##
amass -src -ip -active -exclude crtsh -d $Domain
## amass -src -ip -active -brute --min-for-recursive 3 -exclude crtsh -w $WORDLIST -d $Domain




## ----------------------------------------------------- ##
##   [?] AMass Viz - Visualize Enumeration Results:
## ----------------------------------------------------- ##


##-===================================================-##
##   [+] Importing OWASP Amass Results into Maltego
##-===================================================-##


##-======================================================-##
##   [+] Visualize Enumeration Results Using Maltego:
##-======================================================-##
## -------------------------------------------------------------------- ##
##   [?] Convert the Amass data into a Maltego graph table CSV file:
## -------------------------------------------------------------------- ##
amass viz -maltego


##-=======================================================================-##
##   [+] AMass - Generate a D3.js visualization based on database data
##-=======================================================================-##
amass viz -d3 -dir $Dir


##-==========================================================-##
##   [+] AMass - Generate Dot file based on database data
##-==========================================================-##
amass viz -dot -dir $Dir


##-=======================================================================================-##
##   [+] AMass - Generate Gephi Graph Exchange XML Format (GEXF) based on database data
##-=======================================================================================-##
amass viz -gexf -dir $Dir


##-======================================================================-##
##   [+] AMass - Generate Graphistry JSON file based on database data
##-======================================================================-##
amass viz -graphistry -dir $Dir



##-==============================================================-##
##   [+] AMass - Show difference between last 2 enumerations:
##-==============================================================-##
amass track -dir $Dir -d $Domain -last 2


##-=================================================================-##
##   [+] AMass - Show difference between a certain point In time:
##-=================================================================-##
amass track -dir $Dir -d $Domain -since $Time
amass track -dir $Dir -d $Domain -since 01/02 15:04:05 2006 MST




##-=================================================================-##
##   [+] AMass - List all performed enumerations In the database:
##-=================================================================-##
amass db -dir $Dir -list



##-===============================================================-##
##   [+] AMass - Show results for specified enumeration index:
##-===============================================================-##
amass db -dir $Dir -d $Domain -enum $Index -show


##-========================================================-##
##   [+] AMass - list all found subdomains of a domain:
##-========================================================-##
amass db -dir $Dir -d $Domain -enum $Index -names


##-===================================================-##
##   [+] AMass - Show summary of found subdomains:
##-===================================================-##
amass db -dir $Dir -d $Domain -enum $Index -summary



"
TSanRr5F,Xe1phix-[YouTube-dl]-Bashrc-Cheatsheet-[v8.4.84].sh,xe1phix,Bash,Saturday 9th of March 2024 06:02:59 AM CDT,"#!/bin/sh
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
alias ytdlaudio=""youtube-dl --verbose --force-ipv4 --continue --extract-audio --audio-format mp3 --ffmpeg-location /usr/bin/ffmpeg --newline -o '%(title)s.%(ext)s' $1""
alias ytdlaplaylist=""youtube-dl --verbose --force-ipv4 --continue --extract-audio --audio-format mp3 --ffmpeg-location /usr/bin/ffmpeg --newline -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
alias ytdlvideo=""youtube-dl --verbose --continue --force-ipv4 --ffmpeg-location /usr/bin/ffmpeg --newline -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' -o '%(title)s.%(ext)s' $1""
alias ytdlvplaylist=""youtube-dl --verbose --continue --force-ipv4 --ffmpeg-location /usr/bin/ffmpeg --newline --print-traffic -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## 
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## Download Single Video,Using OpenVPN SOCKS5 Proxy Then Convert To MP3:
alias ytdlopenvpnaudio=""youtube-dl --verbose --force-ipv4 --proxy socks5://10.8.0.1:1080 --continue --extract-audio -f 'bestaudio/best' --ffmpeg-location /usr/bin/ffmpeg --newline -o '%(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## Download Single Video, Wireguard SOCKS5 Proxy Then Convert To MP3:
alias ytdlwireguardaudio=""youtube-dl --verbose --force-ipv4 --proxy socks5://10.64.0.1:1080 --continue --extract-audio -f 'bestaudio/best' --ffmpeg-location /usr/bin/ffmpeg --newline -o '%(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## Download Entire Playlist Using OpenVPN SOCKS5 Proxy Then Convert To MP3:
alias ytdlaplaylistopenvpn=""youtube-dl --verbose --force-ipv4 --proxy socks5://10.8.0.1:1080 --continue --extract-audio -f 'bestaudio/best' --ffmpeg-location /usr/bin/ffmpeg --newline -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## Download Entire Playlist Using Wireguard SOCKS5 Proxy Then Convert To MP3:
alias ytdlaplaylistwireguard= ""youtube-dl --verbose --force-ipv4 --proxy socks5://10.64.0.1:1080 --continue --extract-audio -f 'bestaudio/best' --ffmpeg-location /usr/bin/ffmpeg --newline -o '%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##
## Download Best Quality MP4 - Using Wireguard SOCKS5 Proxy:
alias ytdlwireguardvideo=""youtube-dl --verbose --continue --force-ipv4 --proxy socks5://10.64.0.1 --ffmpeg-location /usr/bin/ffmpeg --newline -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best' -o '%(title)s.%(ext)s' $1""
## ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ ##


"
rt9Atzra,data864,TestGuy1,JSON,Saturday 9th of March 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'd3d4f84f2bd191d3d6ac4dc29dea2b6decb21e7da473617625782d73314777937f43f11441d51ad834769f359ff49561ded98c52479e0c8657c2d57f3fd5e55310347b7315a09dd56ffc3d5a943afb1f167c8cd13c77648f2d37cd81035bcfdf8271630854b4268a13ae89a6f229989714298820118e1cdf6983cb2403d28417',
  otherdata: [
    '9d2d9045e4f319f7c297671f17ee8f04',
    'e32b0c203a276383cd37e15ef089a079',
    '141c98602e127b62e158cfd3abf7137a',
    '482d212dd6423d2274f6a96150c11463',
    '19e249d43c303770a8e3c74251e7393b',
    '380767208168f31ecce3b13c010f902f',
    'b7173b0e9ad188383a098f30f29d2386',
    '46c0768aadd90ca92a5f69ced60082d7'
  ]
}"
v3Mm9xHB,Untitled,balduzzZ,Python,Saturday 9th of March 2024 05:52:20 AM CDT,"== test.py ==
import cv2
import mediapipe as mp
import numpy
import flet as ft


def main(page):
    page.title = ""Test imports""

    page.add(
        ft.Text(""OpenCV version: "" + cv2.__version__),
        ft.Text(""MediaPipe version: "" + mp.__version__),
        ft.Text(""NumPy version: "" + numpy.__version__),
    )


ft.app(target=main)


== requirements.txt ==
mediapipe==0.10.9
numpy
opencv-python
flet"
iNYZkKMA,Xe1phix-[Oracle]-Database-SQL-Syntax-Cheatsheet-[v8.5.42].sh,xe1phix,Bash,Saturday 9th of March 2024 05:50:09 AM CDT,"

##-==========================================-##
##   [+] Oracle - Check Version : 
##-==========================================-##
SELECT banner FROM v$version WHERE banner LIKE 'Oracle%'; 
SELECT banner FROM v$version WHERE banner LIKE 'TNS%';
SELECT version FROM v$instance;


##-==========================================-##
##   [+] Oracle - Current User :
##-==========================================-##
SELECT user FROM dual;


##-==========================================-##
##   [+] Oracle - List Users:
##-==========================================-##
SELECT username FROM all_users ORDER BY username;
SELECT name FROM sys.user$;
SELECT name, password from sys.user$;
SELECT name, spare4 from sys.user$;
select username,account_status,created,profile FROM sys.dba_users ORDER BY username;


##-==========================================-##
##   [+] Oracle - List Password Hashes：
##-==========================================-##
SELECT name, password, astatus FROM sys.user$;  
SELECT name,spare4 FROM sys.user$ where rownum <= 10; 


##-==========================================-##
##   [+] Oracle - Current Database:
##-==========================================-##
SELECT global_name FROM global_name;
SELECT name FROM v database; 
SELECT instance_name FROM v$instance;
SELECT SYS.DATABASE_NAME FROM DUAL;


##-==========================================-##
##   [+] Oracle - List Databases：
##-==========================================-##
SELECT DISTINCT owner FROM all_tables;


##-==========================================-##
##   [+] Oracle - List DBA Accounts:
##-==========================================-##
SELECT DISTINCT grantee FROM dba_sys_privs WHERE ADMIN_OPTION = 'YES';


##-==========================================-##
##   [+] Oracle - List Columns :
##-==========================================-##
SELECT column_name FROM all_tab_columns WHERE table_name = 'blah';
SELECT column_name FROM all_tab_columns WHERE table_name = 'blah' and owner = 'foo';


##-==========================================-##
##   [+] Oracle - Tables:
##-==========================================-##
SELECT table_name FROM all_tables;
SELECT owner, table_name FROM all_tables;


##-==========================================-##
##   [+] Oracle - Tables From Column Name	 :
##-==========================================-##
SELECT owner, table_name FROM all_tab_columns WHERE column_name LIKE '%PASS%';


##-==========================================-##
##   [+] Oracle - Privileges :
##-==========================================-##
SELECT * FROM session_privs;(Retrieves Current Privs)
SELECT * FROM dba_sys_privs WHERE grantee = 'DBSNMP';
SELECT grantee FROM dba_sys_privs WHERE privilege = 'SELECT ANY DICTIONARY';
SELECT GRANTEE, GRANTED_ROLE FROM DBA_ROLE_PRIVS;


##-==========================================-##
##   [+] Oracle - Location of DB Files:
##-==========================================-##
SELECT name FROM V$DATAFILE;


## --------------------------------------------------- ##
##   [?] First create a normal user and authorize:
## --------------------------------------------------- ##
##   [?] create user yang identified by yang;  
##   [?] grant connect, resource to yang; 
## --------------------------------------------------- ##


##-==========================================-##
##   [+] Oracle - Make DNS Requests：
##-==========================================-##
SELECT UTL_INADDR.get_host_address('www.baidu.com') FROM dual; 
SELECT UTL_HTTP.REQUEST('http://www.baidu.com/') FROM dual;


##-==========================================-##
##   [+] Oracle - Local File Access：
##-==========================================-##
SELECT value FROM v$parameter2 WHERE name = '/etc/passwd'; 


##-==========================================-##
##   [+] Oracle - Hostname, IP Address：
##-==========================================-##
SELECT host_name FROM v$instance; 
SELECT UTL_INADDR.get_host_name('192.168.1.103') FROM dual; 


##-======================================================================-##
##   [+] Oracle - John the Ripper - Brute Force Oracle Password Hash:
##-======================================================================-##
## ---------------------------------------------------------------------------- ##
##   [?] DBSNMP:BA054BE9241074F8437B47B98B9298F6063561403341EA94F595D242183E
## ---------------------------------------------------------------------------- ##
john --format=oracle11 /tmp/orahash.txt


"
Pnfk29tn,08. Pet Shop,myrdok123,Java,Saturday 9th of March 2024 05:20:27 AM CDT,"import java.util.Scanner;

public class PetShop {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int countDogPacks = Integer.parseInt(scanner.nextLine());
        int countCatPacks = Integer.parseInt(scanner.nextLine());

        double priceDogFood = countDogPacks * 2.50;
        double priceCatFood = countCatPacks * 4;

        double totalPrice = priceCatFood + priceDogFood;

        System.out.println(totalPrice + "" lv."");


    }
}
"
eTNny83x,07. Projects Creation,myrdok123,Java,Saturday 9th of March 2024 05:11:17 AM CDT,"import java.util.Scanner;

public class ProjectsCreation {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        String name = scanner.nextLine();
        int countProjects = Integer.parseInt(scanner.nextLine());

        int totalHours = countProjects * 3;

        System.out.printf(""The architect %s will need %d hours to complete %d project/s."", name, totalHours, countProjects);
    }
}
"
fZzWejbT,06. Concatenate Data,myrdok123,Java,Saturday 9th of March 2024 05:03:12 AM CDT,"import java.util.Scanner;

public class ConcatenateData {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        String firstName = scanner.nextLine();
        String lastName = scanner.nextLine();
        int age = Integer.parseInt(scanner.nextLine());
        String town = scanner.nextLine();

        //You are <firstName> <lastName>, a <age>-years old person from <town>.""

        //System.out.println(""You are "" + firstName + "" "" + lastName + "", a "" + age + ""-years old person from "" + town + ""."" );

        //%s - String, %d - int, %f - double, %c - char, %n - new line

        System.out.printf(""You are %s %s, a %d-years old person from %s."", firstName, lastName, age, town);
    }
}
"
f9qTShPb,05. Greeting by Name,myrdok123,Java,Saturday 9th of March 2024 05:02:29 AM CDT,"import java.util.Scanner;

public class GreetingByName {

    public static void main(String[] args) {


        Scanner scanner = new Scanner(System.in);

        String name = scanner.nextLine();

        System.out.println(""Hello, "" + name + ""!"");
    }
}
"
JSWqz6KJ,00.Demo,IvetValcheva,C#,Saturday 9th of March 2024 04:53:17 AM CDT,"
int minNum = int.MaxValue;
int maxNum = int.MinValue;//-2147483648

string input = Console.ReadLine(); //Stop
bool isTrue = false;

while (input != ""Stop"")
{
    isTrue = true;
    int num = int.Parse(input);

    if (num < minNum)
    {
        minNum = num;
    }
    if (num > maxNum) 
    { 
        maxNum = num;
    }

    input = Console.ReadLine();
}

if (isTrue)
{
    Console.WriteLine($""minNum: {minNum}"");
    Console.WriteLine($""maxNum: {maxNum}"");
}
"
ifmmNxCi,Untitled,35657,C++,Saturday 9th of March 2024 04:52:04 AM CDT,"#include <iostream>


using namespace std;

struct date {
	int day_;
	int month_;
	int year_;
};

class person {

public:
	person(const int id, const char* last_name, const char* first_name, const char* middle_name, const date birthday) : id_(id), last_name_(new char[strlen(last_name) + 1]), first_name_(new char[strlen(first_name) + 1]), middle_name_(new char[strlen(middle_name) + 1]), birthday_(birthday) {
		strcpy(last_name_, last_name);
		strcpy(first_name_, first_name);
		strcpy(middle_name_, middle_name);
		number_person_++;
	}

	person() : person(111111, ""Ivanov"", ""Ivan"", ""Ivanovich"", { 1,1,1993 }) {}

	person(const person& other) : person(other.id_, other.last_name_, other.first_name_, other.middle_name_, other.birthday_) {}

	person& operator=(const person& other) {
		if (this != &other) {
			id_ = other.id_;
			birthday_ = other.birthday_;
			delete[] last_name_;
			last_name_ = new char[strlen(other.last_name_) + 1];
			strcpy(last_name_, other.last_name_);
			delete[] first_name_;
			first_name_ = new char[strlen(other.first_name_) + 1];
			strcpy(first_name_, other.first_name_);
			delete[] middle_name_;
			middle_name_ = new char[strlen(other.middle_name_) + 1];
			strcpy(middle_name_, other.middle_name_);
		}
		return *this;
	}

	void print() {
		cout << last_name_ << "" "" << first_name_ << "" "" << middle_name_ << "", "" << birthday_.day_ << '.' << birthday_.month_ << '.' << birthday_.year_ << "", id - "" << id_ << endl;
	}

	static int get_number_person() {
		return number_person_;
	}

	~person() {
		delete[] last_name_;
		delete[] first_name_;
		delete[] middle_name_;
		number_person_--;
	}

	void set_id(const int id) {
		id_ = id;
	}


	void set_last_name(const char* last_name) {
		delete[] last_name_;
		last_name_ = new char[strlen(last_name) + 1];
		strcpy(last_name_, last_name);
	}

	void set_first_name(const char* first_name) {
		delete[] first_name_;
		first_name_ = new char[strlen(first_name) + 1];
		strcpy(first_name_, first_name);
	}

	void set_middle_name(const char* middle_name) {
		delete[] middle_name_;
		middle_name_ = new char[strlen(middle_name) + 1];
		strcpy(middle_name_, middle_name);
	}

	void set_birthday(const int day, const int month, const int year) {
		birthday_.day_ = day;
		birthday_.month_ = month;
		birthday_.year_ = year;
	}

	int get_id() const {
		return id_;
	}

private:
	int id_; // идентификационный номер
	char* last_name_; // фамилия 
	char* first_name_; // имя
	char* middle_name_; // отчество
	date birthday_; // дата рождения
	static int number_person_;
};

class flat {

public:

	flat() : residents_count_(0), max_count_(5), residents_(new person[max_count_]) {}

	flat(const flat& other) : residents_count_(other.residents_count_), max_count_(other.max_count_), residents_(new person[max_count_]) {
		for (int i = 0; i < residents_count_; i++) {
			residents_[i] = other.residents_[i];
		}
	}

	void add_resident(const person& new_resident) {
		if (residents_count_ == max_count_) {
			person* temp = new person[max_count_ * 2];
			for (int i = 0; i < residents_count_; i++) {
				temp[i] = residents_[i];
			}
			delete[] residents_;
			residents_ = temp;
			max_count_ *= 2;
		}
		residents_[residents_count_] = new_resident;
		residents_count_++;
	}

	void del_resident(const int id) {
		for (int i = 0; i < residents_count_; i++) {
			if (residents_[i].get_id() == id) {
				for (int j = i; j < residents_count_ - 1; j++) {
					residents_[j] = residents_[j + 1];
				}
				residents_count_--;
			}
		}
	}

	void show_residents_() const {
		for (int i = 0; i < residents_count_; i++) {
			residents_[i].print();
		}
	}

	friend class apartment_house;

	~flat() {
		delete[] residents_;
	}

private:
	int residents_count_;
	int max_count_;
	person* residents_;
};

class apartment_house {

public:

	apartment_house(const int apartment_count) : total_residents_count_(0), apartment_count_(apartment_count), apartment_(new flat[apartment_count]) {}

	void registration(const int flat_number, const person& new_resident) {
		apartment_[flat_number - 1].add_resident(new_resident);
		total_residents_count_++;
	}
	
	void unregistration(const int flat_number, const int id) {
		apartment_[flat_number - 1].del_resident(id);
		total_residents_count_--;
	}

	void find_resident_id(const int id) {
		for (int i = 0; i < apartment_count_; i++) {
			for (int j = 0; j < apartment_[i].residents_count_; j++) {
				if (apartment_[i].residents_[j].get_id() == id) {
					apartment_[i].residents_[j].print();
					return;
				}
			}
		}
		cout << ""Жильца с таким id нет"" << endl;
	}

	int get_total_residents_count() const {
		return total_residents_count_;
	}

	void show_all_residents() const {
		for (int i = 0; i < apartment_count_; i++) {
			apartment_[i].show_residents_();
		}
	}

	~apartment_house() {
		delete[] apartment_;
	}

private:
	int total_residents_count_;
	const int apartment_count_;
	flat* apartment_;
};

int person::number_person_ = 0;

int main() {

	setlocale(LC_ALL, ""ru"");

	person p1(111111, ""Ivanov"", ""Ivan"", ""Ivanovich"", { 13,7,1986 });
	person p2(222222, ""Petrov"", ""Petr"", ""Petrovich"", { 23,8,1997 });
	person p3(333333, ""Sidorov"", ""Petr"", ""Petrovich"", { 12,9,2001 });
	
	apartment_house my_house(200);

	my_house.registration(1, p1);
	my_house.registration(2, p2);
	my_house.registration(3, p3);

	my_house.find_resident_id(111111);
	my_house.find_resident_id(555555);

	cout << my_house.get_total_residents_count() << endl;

	my_house.show_all_residents();
}"
7EDAR44X,06. Max Number,IvetValcheva,C#,Saturday 9th of March 2024 04:46:16 AM CDT,"int maxNum = int.MinValue;

string input = Console.ReadLine();

while (input != ""Stop"")
{
    int num = int.Parse(input);

    if (num > maxNum)
    {
        maxNum = num;
    }

    input = Console.ReadLine();
}

Console.WriteLine(maxNum);"
wUZedYqW,08. Graduation,IvetValcheva,C#,Saturday 9th of March 2024 04:45:55 AM CDT,"
string name = Console.ReadLine();

double sum = 0;
int clas = 1;
int failedTimes = 0;

while (clas <= 12)
{
    double grade = double.Parse(Console.ReadLine());

    if (grade >= 4)
    {
        clas++;
        sum += grade;
        continue;
    }

    failedTimes++;

    if (failedTimes == 2)
    {
        Console.WriteLine($""{name} has been excluded at {clas} grade"");
        break;
    }
}

if (clas > 12)
{
    Console.WriteLine($""{name} graduated. Average grade: {sum/12:f2}"");
}"
GSfKeB9t,04. Inches to Centimeters,myrdok123,Java,Saturday 9th of March 2024 04:32:55 AM CDT,"import java.util.Scanner;

public class InchesToCentimeters {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        double inches = Double.parseDouble(scanner.nextLine());

        double smToInch = 2.54;

        double sm = inches * smToInch;

        System.out.println(sm);
    }
}
"
FJ2TTDHU,03. Rectangle Area,myrdok123,Java,Saturday 9th of March 2024 04:24:32 AM CDT,"import java.util.Scanner;

public class RectangleArea {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int number1 = Integer.parseInt(scanner.nextLine());
        int number2 = Integer.parseInt(scanner.nextLine());

        int area = number1 * number2;

        System.out.println(area);




    }
}
"
ZLSjnitj,KlasaKapibara,cuniszkiewicz,C#,Saturday 9th of March 2024 04:02:29 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP_1N122L_GiP3D1
{
    internal class Kapibara
    {
        private string imie;
        private int wiek;
        public string plec;
        public string kolor;
        public double waga;

        private double dlugosc;

        public double Dlugosc
        {
            get { return dlugosc; }
            set { dlugosc = value; }
        }


        public string Imie
        { 
        get { return imie; }
        set { imie = value; }
        }


        public int Wiek
        {
            get
            { 
            return wiek;
            } 
            set
            {
                if (value <= 0)
                {
                    Console.WriteLine(""Podano wiek spoza zakresu i ustawiono wartość 1."");
                    wiek = 1;
                }
                else
                    wiek = value; ;

            }
        
        }


        public void UstawWiek(int w)
        {
            if (w <= 0)
            {
                Console.WriteLine(""Podano wiek spoza zakresu i ustawiono wartość 1."");
                wiek = 1;
            }
            else
                wiek = w;
        }

        public int WezWiek()
        {
            return wiek;
        }


        public void PrzedstawSie()
        {
            //Console.WriteLine(""Cześć jestem kapibarą o imieniu: "" + imie + "", i jestem koloru: "" + kolor);
            //Console.WriteLine(""Cześć jestem kapibarą o imieniu {0}, i jestem koloru: {1}"", imie, kolor);
            Console.WriteLine($""Cześć jestem kapibarą o imieniu {imie}, i jestem koloru: {kolor}."");
        }

        public void Nakarm()
        {
            Console.WriteLine($""{imie}: Mniam mniam"");
        }

        public void Poglaszcz()
        {
            Console.WriteLine($""{imie}: Mrrrrrrrr"");
        }

        public void PobawSie()
        {
            Console.WriteLine($""{imie}: Bawię się piłką."");
        }



    }
}
"
SEbfcc7T,KlasaProgram,cuniszkiewicz,C#,Saturday 9th of March 2024 04:01:56 AM CDT,"using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OOP_1N122L_GiP3D1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Kapibara kapibara = new Kapibara();
            int wybor;
            kapibara.Imie = ""Stefan"";
            kapibara.Wiek = 3;
            kapibara.kolor = ""różowy"";
            kapibara.plec = ""samiec"";
            kapibara.waga = 10;

            do
            {
                Console.Clear();
                Console.WriteLine(""0 - Koniec"");
                Console.WriteLine(""1 - Przedstaw kabibarę"");
                Console.WriteLine(""2 - Nakarm kabibarę"");
                Console.WriteLine(""3 - Pogłaszcz kabibarę"");
                Console.WriteLine(""4 - Zabaw kabibarę"");
                Console.WriteLine(""5 - Zmień dane kapibary"");
                Console.Write(""Twój wybór: "");
                wybor = int.Parse(Console.ReadLine());
                Console.Clear();
                switch (wybor)
                {
                    case 0:
                        Console.WriteLine(""\n\n\n\n\n\n\t\t\t\t\tDziękuję za skorzystanie z programu!"");
                        System.Threading.Thread.Sleep(1000);
                        break;
                    case 1:
                        kapibara.PrzedstawSie();
                        Console.ReadKey();
                        break;
                    case 2:
                        kapibara.Nakarm();
                        Console.ReadKey();
                        break;
                    case 3:
                        kapibara.Poglaszcz();
                        Console.ReadKey();
                        break;
                    case 4:
                        kapibara.PobawSie();
                        Console.ReadKey();
                        break;
                    case 5:
                        Console.Write(""Imię: "");
                        kapibara.Imie = Console.ReadLine();
                        Console.Write(""Wiek: "");
                        kapibara.Wiek = int.Parse(Console.ReadLine());
                        Console.Write(""Kolor: "");
                        kapibara.kolor = Console.ReadLine();
                        Console.Write(""Płeć: "");
                        kapibara.plec = Console.ReadLine();
                        Console.Write(""Waga: "");
                        kapibara.waga = double.Parse(Console.ReadLine());
                        break;
                    default:
                        Console.WriteLine(""\n\n\n\n\n\n\t\t\t\tWybrano niewłaściwą opcję z menu!"");
                        System.Threading.Thread.Sleep(1000);
                        break;
                }  
            } while (wybor != 0);
        }
    }
}
"
