id,title,username,language,date,content
TZPt9MGd,emanual snowybot,coinwalk,JavaScript,Tuesday 14th of November 2023 06:04:13 AM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((0.001).toFixed(8));
var floatingbase = base;
var taget = (originalbal*24000);
var groupedten = (base*10);
var groupedseven = (base*6.5);
var tobetnext = ((floatingbase*1).toFixed(8));
var grind = (base*80)
var bolance = grind;
var over = 6.9;
var under = 2.9;
var freak = 0;
var fryer = 0;
var oldthree = ((Math.floor(originalbal/groupedten))*groupedten);
var oldfour = ((Math.floor(originalbal/groupedten))*groupedten);
var oldbolance = ((Math.floor(originalbal/groupedten))*groupedten);
var oldtwo = originalbal;

 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
 
function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if ((bolance>(oldbolance+(floatingbase*over)))&&(fryer<2)){
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9
    freak = 0;
    fryer = fryer+1;
    oldbolance = parseFloat(bolance);
}
if ((bolance>(oldbolance+(floatingbase*over)))&&(fryer>=2)){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    freak = 0;
    fryer = 0;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
}
if ((bolance<(oldbolance-(floatingbase*under)))&&(freak<2)){
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 6.9;
    freak = freak+1;
    oldbolance = parseFloat(bolance);
}
if ((bolance<(oldbolance-(floatingbase*under)))&&(freak>=2)){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    freak = 0;
    fryer = 0;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
}, (getR(100,200)));
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), (getR(80,100)));
}
get();"
59pEhN2j,data752,TestGuy1,JSON,Tuesday 14th of November 2023 06:00:07 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '9955212abc2f11927695b76737a71e2d1699e02311b9109db085093144a2e8b0ae8691de01044d71a0e8da5819ef6a53c57f28fbe542d7563e2e8c8c2846dd53ad14516df23f23896f87c174e94eec7433cbb6b342ba4fe9026eed004513244701d89a1883b0b6f5c35fec8fee02b4fb37e357fb0c31c669791f26bc243b67b8',
  otherdata: [
    '7e2b7e4d7f1bf9b9053977d0bdb6cd74',
    'c8f6275fe106c4a293cae92300d7e34d',
    '698e02cc76184caec578fa3289664ade',
    '93d75978c583909e837b1051645389fe',
    '288be8712d179c545c9ed6b587d25162',
    'a4f57ce29eab1e95ed309280b16b14ac',
    '695150f6b1a8812fecde7c17ccf69038',
    '9c056d2713dd2292b9d1b6a013bed059'
  ]
}"
HUnMdgML,Untitled,kwest87,C#,Tuesday 14th of November 2023 05:55:31 AM CDT,"using System;

namespace ConsoleApp31
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string MenuHit = ""1"";
            const string MenuRage = ""2"";
            const string MenuMadness = ""3"";
            const string MenuSpray = ""4"";

            int trollRage = 100;
            int trollMadness = 200;
            int trollSpray = 100;
            int trollHealth = 1500;
            int trollDamage = 100;
            int bossHealth = 2000;
            int bossDamage = 100;

            int durationSpray = 3;
            int durationRage = 3;
            int durationMadness = 1;
            int durationDamage = 1;

            int countdounDamage = 0;
            int countdounSpray = 0;
            int countdounRage = 0;
            int countdounMadness = 0;
            int doubleDamage = 2;

            string menuInput;

            while (bossHealth > 0 && trollHealth > 0)
            {
                Console.WriteLine();
                Console.WriteLine($""Вы троль рукопашник и в вашем арсенали 4 приема :"" +
                    $""\n {MenuHit}) Удар по роже - наносит {trollDamage} урона."" +
                    $""\n {MenuRage}) Ярость берсерка - отнимет {trollRage} хп владельца , но следующие {durationRage} атаки двойной урон."" +
                    $""\n {MenuMadness}) Безумие берсерка (только при ярости берсерка) - отнимает {trollMadness} хп владельца а весь урон удваивается ."" +
                    $""\n {MenuSpray}) Распылить споры - восстанавливает {trollSpray} хп и отравляет врага на {durationSpray} хода."");
                Console.WriteLine($""Ваше здоровье - {trollHealth}\nЗдоровье босса - {bossHealth}"");
                Console.WriteLine(""Ваши действия:"");
                menuInput = Console.ReadLine();

                if (countdounSpray > 0)
                {
                    bossHealth -= trollSpray;
                    countdounSpray--;
                    Console.WriteLine($""Споры отняли у босса {trollSpray} жизней , действует еще {countdounSpray} ходов."");
                }

                switch (menuInput)
                {
                    case MenuHit:
                        Console.WriteLine(""Вы выбрали удар по роже."");
                        trollHealth -= bossDamage;
                        countdounDamage = durationDamage;
                        break;

                    case MenuRage:
                        trollHealth -= bossDamage + trollRage;
                        countdounRage = durationRage;
                        countdounDamage = durationDamage;
                        Console.WriteLine($""Вы впали в ярость берсерка на {durationRage} хода отняв себе {trollRage} здоровья."");
                        break;

                    case MenuMadness:
                        Console.WriteLine($""Вы впадаете в безумие отняв себе {trollMadness} здоровья."");
                        trollHealth -= bossDamage + trollMadness;
                        countdounMadness = durationMadness;
                        break;

                    case MenuSpray:
                        Console.WriteLine(""Вы выбрали пустить споры."");
                        trollHealth -= bossDamage - trollSpray;
                        countdounSpray = durationSpray;
                        Console.WriteLine($""Вы пустили споры восстановив себе {trollSpray} здоровья."");
                        Console.WriteLine($""Вас ударили на {bossDamage} урона."");
                        break;
                }

                if (countdounDamage > 0)
                {
                    if (countdounRage > 0)
                    {
                        bossHealth -= trollDamage * doubleDamage;
                        countdounRage--;
                        Console.WriteLine($""Вы ударили в состоянии ярости берсерка, действует {countdounRage} хода."");
                        Console.WriteLine($""Вас ударили на {bossDamage} урона."");
                    }
                    else if (countdounRage <= 0)
                    {
                        bossHealth -= trollDamage;
                        Console.WriteLine($""Вы ударили на {trollDamage} урона."");
                        Console.WriteLine($""Вас ударили на {bossDamage} урона."");
                    }
                }

                if (countdounMadness > 0 && countdounRage > 0)
                {
                    countdounRage--;
                    countdounMadness = 0;
                    bossHealth -= trollDamage * doubleDamage * doubleDamage;
                }
                else if (countdounMadness > 0 && countdounRage <= 0)
                {
                    Console.WriteLine(""Без ярости , безумие не наступает."");
                    countdounMadness = 0;
                    countdounRage = 0;
                    Console.WriteLine($""Вас ударили на {bossDamage} урона."");
                }

                Console.ReadKey();
                countdounDamage = 0;
            }

            if (bossHealth<=0&&trollHealth<=0)
            {
                Console.WriteLine(""Произошла ничья!"");
            }
            else if (trollHealth>0)
            {
                Console.WriteLine(""Победитель троль"");
            }
            else
            {
                Console.WriteLine(""Победитель босс"");
            }
        }
    }
}"
X3Fzj03X,EnergyBooster,MladenKarachanov,Java,Tuesday 14th of November 2023 05:55:14 AM CDT,"package ProgrammingBasics2;

import java.util.Scanner;

public class EnergyBooster {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String fruit = scanner.nextLine();
        String sizeSet = scanner.nextLine();
        int numSet = Integer.parseInt(scanner.nextLine());

        double price = 0;
        double discount = 0;
        if (fruit.equals(""Watermelon"")) {
            if (sizeSet.equals(""small"")) {
                price = numSet * 56 * 2;

            } else if (sizeSet.equals(""big"")) {
                price = numSet * 28.70 * 5;
            }

        } else if (fruit.equals(""Mango"")) {
            if (sizeSet.equals(""small"")) {
                price = numSet * 36.66 * 2;
            } else if (sizeSet.equals(""big"")) {
                price = numSet * 19.60 * 5;
            }
        } else if (fruit.equals(""Pineapple"")) {
            if (sizeSet.equals(""small"")) {
                price = numSet * 42.10 * 2;
            } else if (sizeSet.equals(""big"")) {
                price = numSet * 24.80 * 5;
            }
        } else if (fruit.equals(""Raspberry"")) {
            if (sizeSet.equals(""small"")) {
                price = numSet * 20 * 2;
            } else if (sizeSet.equals(""big"")) {
                price = numSet * 15.20 * 5;
            }

        }
        if (numSet >= 400 && numSet <= 1000) {
            price = price - (price*0.15);

        }
        if (numSet > 1000) {
            price = price - (price*0.50);

        }

        System.out.printf(""%.2f lv."", price);
    }
}

//НЕ Е РЕШЕНА"
MNzZYEuq,BTC Wallet Credentials have been reset,VQ-Moe,GetText,Tuesday 14th of November 2023 05:21:22 AM CDT,"Dear User
We have received a request to reset the login information for your Bitcoin wallet. If you did not make this request, please contact us immediately.

Your new login credentials will be: 
josli45:KoE3dG1 on 159.223.212.34
You can connect via SSH.

Regards
BT407853"
AdAvAC5c,Untitled,le_blob,Dart,Tuesday 14th of November 2023 04:56:41 AM CDT,"/* to get this example working you need to

 1. add permission_handler dependency in pubspec.yaml:

  permission_handler: ^11.0.1

 2. add permission to AndroidManifest:

  <uses-permission android:name=""android.permission.READ_MEDIA_AUDIO""/>

  3. create folder named `Home` with some mp3s
  inside it create another folder named `Folder` with some mp3s
  Like this:

    /Home

      Back From The Wave - Acid Rage.mp3
      Kendal - Techno Positivo.mp3
      Kendal - Come To Me.mp3
      Bizzarro Universe - Speed Of Light (Louis De Tomaso Remix).mp3
      Randolph & Mortimer - Solta No Caos feat. Avnoar (Alen Skanner Remix).mp3

      /Folder
        Alen Skanner - Decay.mp3
        Alen Skanner - Electronica.mp3
        Alen Skanner - Perfect Dark.mp3

   And copy `Home` folder to root at `/storage/emulated/0`
*/

import 'dart:io';
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: const MyExample(),
    );
  }
}

class MyExample extends StatefulWidget {
  const MyExample({super.key});

  @override
  State<MyExample> createState() => _MyExampleState();
}

class _MyExampleState extends State<MyExample> {

  bool permissions = false;

  checkPermission() async {
    var permAudio = await Permission.audio.request();
    if( permAudio.isGranted ){
      setState(() {
        permissions = true;
      });
    } else {
      checkPermission();
    }
  }

  @override
  void initState() {
    super.initState();
    checkPermission();
  }

  String home = ""/storage/emulated/0/Home"";
  String folder = ""/storage/emulated/0/Home/Folder"";

  String currentPath = ""/storage/emulated/0/Home"";

  updatePath(){
    setState(() {
      currentPath = currentPath == home ? folder : home;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: permissions ? FutureBuilder(
        future: Directory(currentPath).list().toList(),
        builder: (context, snapshot){

          print('future builder is running for $currentPath');

          var data = snapshot.data;
          if( data != null && data.isNotEmpty ){

            // filter out only mp3 files
            var items = data.map((e) => e.path).where((el) => el.endsWith('.mp3')).toList();

            print('number of mp3s found: ${items.length}');

            if( !currentPath.endsWith('/Home') ){
              items = ['...', ...items];
            } else {
              items = ['Folder', ...items];
            }

            return ListView.builder(
              itemCount: items.length,
              itemBuilder: (context, index){
                var item = items[index];
                return ListTile(
                  onTap: (){
                    if(!item.endsWith("".mp3"")){
                      updatePath();
                    }
                  },
                  title: Text(item),
                );
              }
            );
          } else {
            return Center(child: const Text('searching...'));
          }
        }
      ) : Center(child: const Text('waiting for permissions')),
    );

  }
}




"
ceuyPgE0,Untitled,maksincolf,C++,Tuesday 14th of November 2023 04:39:04 AM CDT,"#include <bits/stdc++.h>

using namespace std;

// сложение
vector<int> add(vector<int>& a, vector<int>& b) {
    vector<int> c(a.size()); // a и b одинакового размера, поэтому не важно что выбрать, иначе можно max(a.size(), b.size())
    for (int i = 0; i < a.size(); i++) {
        c[i] = a[i] + b[i];
    }
    // я подумал и решил, что лучше разбивать в 2 отдельных цикла
    for (int i = 0; i < c.size(); i++) {
        if (c[i] >= 10) {
            if (i == c.size() - 1) {
                c.push_back(0);
            }
            c[i + 1] += c[i] / 10;
            c[i] %= 10;
        }
    }
    return c;
}

// умножение
vector<int> mul(vector<int>& a, vector<int>& b) {
    vector<int> c(a.size() + b.size()); // здесь уже нужна сумма размеров двух массивов
    // алгоритм по сути тот же самый, как если бы его делать ручками на бумажке
    for (int i = 0; i < a.size(); i++) {
        for (int j = 0; j < b.size(); j++) {
            c[i + j] += a[i] * b[j]; // здесь важно +=
        }
    }
    for (int i = 0; i < c.size(); i++) {
        if (c[i] >= 10) {
            if (i == c.size() - 1) {
                c.push_back(0);
            }
            c[i + 1] += c[i] / 10;
            c[i] %= 10;
        }
    }
    return c;
}

int main(){
    // даны 2 длинных числа
    string s1, s2;
    cin >> s1 >> s2;
    vector<int> a, b;
    a.reserve(s1.length());
    b.reserve(s2.length());
    for (int i = s1.length() - 1; i >= 0; i--) {
        a.push_back(s1[i] - '0');
    }
    for (int i = s2.length() - 1; i >= 0; i--) {
        b.push_back(s2[i] - '0');
    }

    // добиваем нулями
    while (a.size() < b.size()) {
        a.push_back(0);
    }
    while (a.size() > b.size()) {
        b.push_back(0);
    }

    vector<int> sum = add(a, b);
    // находим количество лидирующих нулей, чтобы их не выводить
    int zero_cnt = 0;
    for (; zero_cnt < sum.size() && sum[sum.size() - zero_cnt - 1] == 0; zero_cnt++);
    for (int i = sum.size() - zero_cnt - 1; i >= 0; i--) {
        cout << sum[i];
    }
    cout << ""\n"";

    // снова считаем ведущие нули и снова выводим
    vector<int> multiplication = mul(a, b);
    zero_cnt = 0;
    for (; zero_cnt < multiplication.size() && multiplication[multiplication.size() - zero_cnt - 1] == 0; zero_cnt++);
    for (int i = multiplication.size() - zero_cnt - 1; i >= 0; i--) {
        cout << multiplication[i];
    }

    return 0;
}"
hJYxQvk7,Untitled,turbocompressor,Nginx,Tuesday 14th of November 2023 04:29:09 AM CDT,"2023/11/14 03:43:19 [warn] 53#53: conflicting server name ""_"" on 0.0.0.0:443, ignored
nginx: [warn] conflicting server name ""_"" on 0.0.0.0:443, ignored
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
# configuration file /etc/nginx/nginx.conf:
worker_processes 16;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 1024;
        # multi_accept on;
}

http {

        ##
        # Basic Settings
        ##

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 20;
        types_hash_max_size 2048;
        proxy_read_timeout 600;
        server_tokens off;

        # server_names_hash_bucket_size 64;
        # server_name_in_redirect off;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ##
        # SSL Settings
        ##

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;

        ##
        # Logging Settings
        ##

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        ##
        # Gzip Settings
        ##

        # gzip on;

        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_buffers 16 8k;
        gzip_min_length 256;
        gzip_http_version 1.1;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

        ##
        # Virtual Host Configs
        ##

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;
}

# configuration file /etc/nginx/mime.types:

types {
    text/html                                        html htm shtml;
    text/css                                         css;
    text/xml                                         xml;
    image/gif                                        gif;
    image/jpeg                                       jpeg jpg;
    application/javascript                           js;
    application/atom+xml                             atom;
    application/rss+xml                              rss;

    text/mathml                                      mml;
    text/plain                                       txt;
    text/vnd.sun.j2me.app-descriptor                 jad;
    text/vnd.wap.wml                                 wml;
    text/x-component                                 htc;

    image/avif                                       avif;
    image/png                                        png;
    image/svg+xml                                    svg svgz;
    image/tiff                                       tif tiff;
    image/vnd.wap.wbmp                               wbmp;
    image/webp                                       webp;
    image/x-icon                                     ico;
    image/x-jng                                      jng;
    image/x-ms-bmp                                   bmp;

    font/woff                                        woff;
    font/woff2                                       woff2;

    application/java-archive                         jar war ear;
    application/json                                 json;
    application/mac-binhex40                         hqx;
    application/msword                               doc;
    application/pdf                                  pdf;
    application/postscript                           ps eps ai;
    application/rtf                                  rtf;
    application/vnd.apple.mpegurl                    m3u8;
    application/vnd.google-earth.kml+xml             kml;
    application/vnd.google-earth.kmz                 kmz;
    application/vnd.ms-excel                         xls;
    application/vnd.ms-fontobject                    eot;
    application/vnd.ms-powerpoint                    ppt;
    application/vnd.oasis.opendocument.graphics      odg;
    application/vnd.oasis.opendocument.presentation  odp;
    application/vnd.oasis.opendocument.spreadsheet   ods;
    application/vnd.oasis.opendocument.text          odt;
    application/vnd.openxmlformats-officedocument.presentationml.presentation
                                                     pptx;
    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
                                                     xlsx;
    application/vnd.openxmlformats-officedocument.wordprocessingml.document
                                                     docx;
    application/vnd.wap.wmlc                         wmlc;
    application/wasm                                 wasm;
    application/x-7z-compressed                      7z;
    application/x-cocoa                              cco;
    application/x-java-archive-diff                  jardiff;
    application/x-java-jnlp-file                     jnlp;
    application/x-makeself                           run;
    application/x-perl                               pl pm;
    application/x-pilot                              prc pdb;
    application/x-rar-compressed                     rar;
    application/x-redhat-package-manager             rpm;
    application/x-sea                                sea;
    application/x-shockwave-flash                    swf;
    application/x-stuffit                            sit;
    application/x-tcl                                tcl tk;
    application/x-x509-ca-cert                       der pem crt;
    application/x-xpinstall                          xpi;
    application/xhtml+xml                            xhtml;
    application/xspf+xml                             xspf;
    application/zip                                  zip;

    application/octet-stream                         bin exe dll;
    application/octet-stream                         deb;
    application/octet-stream                         dmg;
    application/octet-stream                         iso img;
    application/octet-stream                         msi msp msm;

    audio/midi                                       mid midi kar;
    audio/mpeg                                       mp3;
    audio/ogg                                        ogg;
    audio/x-m4a                                      m4a;
    audio/x-realaudio                                ra;

    video/3gpp                                       3gpp 3gp;
    video/mp2t                                       ts;
    video/mp4                                        mp4;
    video/mpeg                                       mpeg mpg;
    video/quicktime                                  mov;
    video/webm                                       webm;
    video/x-flv                                      flv;
    video/x-m4v                                      m4v;
    video/x-mng                                      mng;
    video/x-ms-asf                                   asx asf;
    video/x-ms-wmv                                   wmv;
    video/x-msvideo                                  avi;
}


# configuration file /etc/nginx/conf.d/default.conf:
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name _;
    location / {
        proxy_pass http://localhost:8201;
    }
}


# Front:
server {
    listen 80;
    server_name develop.example.com www.develop.example.com;
    return 301 https://develop.example.com$request_uri;
}
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name develop.example.com www.develop.example.com;
    location / {
        proxy_pass http://localhost:8200;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Auth:
server {
    listen 80;
    server_name develop-auth.example.com www.develop-auth.example.com;
    return 301 https://develop-auth.example.com$request_uri;
}
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name develop-auth.example.com www.develop-auth.example.com;
    location /static/ {
        alias /var/static/;
    }
    location / {
        proxy_pass http://localhost:8283;
    }
}

# Back:
server {
    listen 80;
    server_name develop-back.example.com www.develop-back.example.com;
    return 301 https://develop-back.example.com$request_uri;
}
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name develop-back.example.com www.develop-back.example.com;
    location /static/ {
        alias /var/static/;
    }
    location / {
        client_max_body_size 50M;
        proxy_pass http://localhost:8201;
    }
}

# Short:
server {
    listen 80;
    server_name develop-short.example.com www.develop-short.example.com;
    return 301 https://develop-short.example.com$request_uri;
}
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name develop-short.example.com www.develop-short.example.com;
    location / {
        proxy_pass http://localhost:8088;
        proxy_http_version 1.1;
        proxy_set_header Upgrade websocket;
        proxy_set_header Connection upgrade;
    }
}

# Trello:
server {
    listen 80;
    server_name develop-kanban.example.com www.develop-kanban.example.com;
    return 301 https://develop-kanban.example.com$request_uri;
}

server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name develop-kanban.example.com www.develop-kanban.example.com;

    location / {
        proxy_pass http://localhost:8202;
        proxy_http_version 1.1;
        proxy_set_header Connection $http_connection;
        proxy_set_header Upgrade $http_upgrade;
    }
    location /employee/avatar/ {
        proxy_pass http://localhost:8202;
        client_max_body_size 50M;
        proxy_http_version 1.1;
        proxy_set_header Connection $http_connection;
        proxy_set_header Upgrade $http_upgrade;
    }

    location ~ /card/\d+/attachments/ {
        proxy_pass http://localhost:8202;
        client_max_body_size 50M;
        proxy_http_version 1.1;
        proxy_set_header Connection $http_connection;
        proxy_set_header Upgrade $http_upgrade;
    }
}

proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=imgproxy:10m max_size=1g;
server {
    listen 80;
    server_name common-imgproxy.example.com www.common-imgproxy.example.com;
    return 301 https://common-imgproxy.example.com$request_uri;
}
server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name common-imgproxy.example.com www.common-imgproxy.example.com;

    location / {
        proxy_pass http://localhost:9002;
        proxy_redirect off;

        proxy_cache imgproxy;
        proxy_cache_valid 200 1h;
        proxy_cache_valid 404 403 1m;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
    }
}

server {
    listen 80;
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name common-s3.example.com www.common-s3.example.com;

    location / {
        proxy_pass http://localhost:9000;
        proxy_redirect off;
        client_max_body_size 50M;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
    }
}




server {
    listen 443 ssl;
    ssl_certificate /etc/ssl/certificate.crt;
    ssl_certificate_key /etc/ssl/private.key;
    server_name _;
    location / {
        proxy_pass http://localhost:8201;
    }
}"
pgFya56c,last letter of each word,akzer,C,Tuesday 14th of November 2023 04:23:09 AM CDT,"#include <stdio.h>
#include <string.h>

int main()
{
    char sentence[100];
    int i;
    printf(""Enter any sentence: "");
    gets(sentence);
    printf(""Last letter of each word: "");
    for (i = 0; i < strlen(sentence); i++)
    {
        if ((sentence[i + 1] == ' ') || (sentence[i + 1] == '.') || (i == (strlen(sentence) - 1)))
        {
            printf(""%c"", sentence[i]);
        }
    }
    printf(""\n"");
}"
9qnmbGuR,Reverse Polish Calculator In C#,TD7,C#,Tuesday 14th of November 2023 04:19:32 AM CDT,"namespace ReversePolishCalculator
{
    public class Program
    {
        public static void Main(string[] args)
        {
            string input = ""1 2 - 4 5 + *"";
            Console.WriteLine($""{input} = {ReversePolishCalculator.Calculate(input)}"");
        }
    }
    
    /// <summary>
    /// Use the <see cref=""Calculate""/> method to calculate a statement using reverse polish notation.
    /// ONLY BINARY OPERATORS!
    /// </summary>
    public static class ReversePolishCalculator
    {
        private enum Operator
        {
            NotOperator,
            Addition,
            Subtraction,
            Multiplication,
            Division
        }
        
        public static float Calculate(string input)
        {
            string[] tokens = input.Split(' ');
            Stack<float> stack = new Stack<float>();

            for (int i = 0; i < tokens.Length; i++)
            {
                string token = tokens[i];
                
                if (token == string.Empty) // skip empty tokens
                    continue;

                if (IsOperand(token, out float operand))
                    stack.Push(operand);
                else if (TryGetOperator(token, out Operator op))
                    stack.Push(ExecuteOperator(op, ref stack));
                else // Invalid
                    throw new UnexpectedToken(token);
            }
            
            return stack.TryPop(out float result)
                    ? result
                    : throw new Exception(""Couldn't calculate result"");
        }

        private static float ExecuteOperator(Operator op, ref Stack<float> stack)
        {
            if (!stack.TryPop(out float op2) || !stack.TryPop(out float op1))
                throw new OperandMissing();
            return op switch
            {
                Operator.Addition => op1 + op2,
                Operator.Subtraction => op1 - op2,
                Operator.Multiplication => op1 * op2,
                Operator.Division => op2 == 0 ? throw new DivideByZeroException() : op1 / op2,
                _ => throw new ArgumentException(""Attempting to execute a non operator"")
            };
        }
        
        private static bool TryGetOperator(string token, out Operator op)
        {
            op = GetOperator(token);
            return op != Operator.NotOperator;
        }
        private static Operator GetOperator(string token)
        {
            
            const string additionOp = ""+"";
            const string subtractionOp = ""-"";
            const string multiplicationOp = ""*"";
            const string divisionOp = ""/"";

            return token switch
            {
                additionOp => Operator.Addition,
                subtractionOp => Operator.Subtraction,
                multiplicationOp => Operator.Multiplication,
                divisionOp => Operator.Division,
                _ => Operator.NotOperator
            };
        }
        private static bool IsOperand(string token, out float operand) => float.TryParse(token, out operand);
    }
    
    /* -- Exceptions -- */
    public class UnexpectedToken : Exception
    {
        public UnexpectedToken(string token) : base($""Unexpected token '{token}'."") {}
    }
    public class OperandMissing : Exception
    {
        public OperandMissing() : base(""Missing operand."") {}
    }
}"
n14VdT3h,untuk slicing email,xcage88,HTML,Tuesday 14th of November 2023 04:13:18 AM CDT,"<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Pending Email</title>
    <!-- <link rel=""preconnect"" href=""https://fonts.googleapis.com"">
    <link rel=""preconnect"" href=""https://fonts.gstatic.com"" crossorigin>
    <link href=""https://fonts.googleapis.com/css2?family=Chivo+Mono:wght@500&family=Lato&family=Open+Sans&family=Playfair:wght@500&display=swap"" rel=""stylesheet"">     -->
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Chivo+Mono:wght@500&family=Lato&family=Open+Sans&family=Playfair:wght@500&display=swap');
        .body{
            margin: 0;
            padding: 0;
            font-family: 'Lato', sans-serif;
            background-color: #f7f6f6;
        }
        .wrapper{
            margin: 0 auto;            
            width: 60%;
            height: 100%;
            background-color: #fff;            
        }
        .head-container{
            width: 100%;            
        }
        .head-icon{
            padding: 5px;
        }
        .main-container{
            width: 100%;
            max-width: 100%;
        }
        .date-paid{
            padding: 5px;
        }
        .both-text{
            font-size: 1.125rem;
            line-height: 1.75rem;
            font-weight: bold;
        }
        .all-content{
            padding: 5px;
            margin-top: 0.75rem;
        }
        .my-table{
            border-collapse: collapse;
            text-align: left;
            max-width: 100%;
        }
        .my-table tr th{
            padding: 8px;
            font-weight: normal;
            font-size: 18px;
        }
        .my-table tr td {
            font-size: 18px;
        }
        .all-subcontent{
            width: 100%;
            max-width: 100%;
        }
        .total{
            max-width: 100%;
            margin-top: 2.5rem;
            text-align: center;
        }
        .total-pembayaran{
            font-weight: 400;
            font-size: 24px;
        }
        .total-count{
            font-size: 54px;
            font-weight: 700;
            margin-top: 2px;
        }
        .button-kunjung{
            background-color: #FFC809;
            border-radius: 50px;
            width: 40%;
            padding: 4px;
            text-align: center;            
        }
        .button-kunjung > a{
            font-size: 14px;
            line-height: 1.75rem;
            font-weight: bolder;
            word-spacing: 2px;
            text-decoration: none;
            font-size: 15px;
            color: #000;
            font-weight: bold;
        }
        .footer-container{
            width: 100%;
            background-color: #FFC809;
            margin-top: 2rem;
            max-width: 100%;
        }
        .footer-contact{
            padding: 10px;

        }
        .table-contact{
            max-width: 100%;
            margin: 0 auto;
            text-align: center;
            border-spacing: 13px;            
        }
        .table-contact tr th{
            text-align: right;
        }
        .table-contact tr td{
            text-align: left;
        }
        .table-contact tr td p, .table-contact tr td a{
            font-size: 13px;
            text-decoration: none;
            color: #000;
        }
        .contact{
            width: 27px;
        }
        .table-icon{
            width: 100%;
        }
        .icon-content{
            column-count: 2;
            border: 2px solid;
            padding: 2px;
        }
        .apps{
            width: 100%;
            padding: 4px;
        }
        .image-link{
            width: 120px;
        }
        .icon{
            text-align: right;
            width: 100%;
            max-width: 100%;
        }
        .table{
            border: 2px solid;
        }
        @media screen and (max-width: 800px) {
            .wrapper{
                width: 100%;
            }
            .button-kunjung{
                width: 50%;
                padding: 3px;
            }
            .icon-content{
                column-count: 1;
                text-align: center;
            }
            .icon{
                text-align: center;
                margin-bottom: 10px;
            }
        }
    </style>
</head>
<body>

    <div class=""body"">
        <div class=""wrapper"">
            
            <!-- head icon -->
            <div class=""head-container"">
                <div class=""head-icon"">
                    <img src=""https://i.postimg.cc/BvQc4xDR/orderia.png"" alt=""Logo Orderia""/>
                </div>
            </div>
    
            <!-- main content -->
            <div class=""main-container"">
    
                <!-- date & pending paid -->
                <div class=""date-paid"">
                    <h3 class=""both-text"">Selesaikan pembayaran anda Sebelum:</h3>
                    <h3 class=""both-text"">Kamis, 23 November 2023 11:00</h3>
                </div>
    
                <!-- no order -->
                <div class=""all-content"">
                    <h3 class=""both-text"">No. Pesanan : ORD-1234-1234</h3>
                </div>
    
                <!-- detail order -->
                <div class=""all-content"">
                    <h3 class=""both-text"">Detail Pesanan :</h3>
                    <div class=""all-subcontent"">
                        <table class=""my-table"">
                            <tr>
                                <th>
                                    Nama Pemesanan
                                </th>
                                <td>
                                    : John Doe
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Nama Resto
                                </th>
                                <td>
                                    : Rumah Makan Padang
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Tanggal
                                </th>
                                <td>
                                    : Kamis, 23 Agustus 2023
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Jenis Pesanan
                                </th>
                                <td>
                                    : Reservasi
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Jumlah Tamu
                                </th>
                                <td>
                                    : 10 Orang
                                </td>
                            </tr>    
                        </table>
                    </div>
                    <div class=""total"">
                        <h2 class=""total-pembayaran"">Total Pembayaran</h2>
                        <h2 class=""total-count"">Rp3.000.000</h2>
                    </div>
                </div>
                <div class=""all-content"">
                    <h3 class=""both-text"">Dapat ditransfer melalui:</h3>
                    <div class=""all-subcontent"">
                        <table class=""my-table"">
                            <tr>
                                <th>
                                    No. Rekening
                                </th>
                                <td>
                                    : 22301120304012
                                </td>
                            </tr>
                            <tr>
                                <th>
                                    Nama Pemilik
                                </th>
                                <td>
                                    : John Doe
                                </td>
                            </tr>  
                        </table>
                    </div>
                </div>
                <div class=""all-content"">
                    <h3 class=""both-text"">Punya Pertanyaan?</h3>
                    <div class=""button-kunjung"">
                        <a href="""" target=""_blank"" rel=""noreferrer"">Kunjungi Pusat Bantuan</a>
                    </div>
                </div>
            </div>
    
            <!-- footer content -->
            <div class=""footer-container"">
                <div class=""footer-contact"">
                    <table class=""table-contact"">
                        <tr>
                            <th>
                                <img src=""https://i.postimg.cc/jdbfRHYv/whatsapp.png"" alt=""icon-whatapps"" class=""contact"">
                            </th>
                            <td>
                                <p>Orderia Whatsapp</p>
                                <a href="""" target=""_blank"" rel=""noreferrer"">+62 112-2334-223</a>
                            </td>
                            <th>
                                <img src=""https://i.postimg.cc/tJ0xZPZq/direct-inbox.png"" alt=""icon-aplikasi"" class=""contact"">
                            </th>
                            <td>
                                <p>Aplikasi Orderia</p>
                                <a href="""" target=""_blank"" rel=""noreferrer"">orderia.co/download</a>
                            </td>
                        </tr>
                        <tr>
                            <th>
                                <img src=""https://i.postimg.cc/T2mm8kFp/sms.png"" alt=""icon-sms"" class=""contact"">                             
                            </th>
                            <td>
                                <p>Orderia Email</p>
                                <a href=""https://mail.google.com/mail/u/0/?view=cm&tf=1&fs=1&to=support@orderia.co"" target=""_blank"" rel=""noreferrer"">support@orderia.co</a>
                            </td>
                            <th>
                                <img src=""https://i.postimg.cc/4yzhzdVz/global.png""  alt=""icon-globe"" class=""contact"">                                                        
                            </th>
                            <td>
                                <p>Orderia Website</p>
                                <a href="""" target=""_blank"" rel=""noreferrer"">orderia.co</a>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class=""table-icon"">
                    <div class=""icon-content"">
                        <div class=""apps"">
                            <a href='https://www.apple.com/app-store/' target='_blank' rel='noreferrer'>                        
                                <img src=""https://i.postimg.cc/fbFFZbfs/appstore.png"" alt=""appstore"" class=""image-link"">
                            </a>
                            <a href='https://play.google.com/store/' target='_blank' rel='noreferrer'>
                                <img src=""https://i.postimg.cc/FKjcFWjK/googleplay.png"" alt=""googleplay"" class=""image-link"">
                            </a>
                        </div>
                        <div class=""icon"">
                            <a href='https://www.instagram.com/hovisohibul/?next=%2F' target='_blank' rel='noreferrer' >
                                <img src=""https://i.postimg.cc/gkt30dvD/ig.png"" alt=""instagram"">
                            </a>
                            <a href='https://twitter.com/home' target='_blank' rel='noreferrer' style=""padding-top: 40px;"">
                                <img src=""https://i.postimg.cc/zG9Wnj2H/twitter.png"" alt=""twitter"">
                            </a>
                            <a href='https://www.youtube.com/watch?v=SfSplXqACNE&ab_channel=NOICE' target='_blank' rel='noreferrer'>
                                <img src=""https://i.postimg.cc/yNcRnZ2Q/youtube.png"" alt=""youtube"">
                            </a>
                            <a href='https://www.facebook.com/profile.php?id=100071366830392' target='_blank' rel='noreferrer'>
                                <img src=""https://i.postimg.cc/Y231JQ0T/fb.png"" alt=""facebook"">
                            </a>
                            <a href='https://www.linkedin.com/in/hovi-sohibul-wafa-1287001b5/' target='_blank' rel='noreferrer'>
                                <img src=""https://i.postimg.cc/Pr5mhN8J/llink.png"" alt=""linked"">
                            </a>
                            <a href='https://www.tiktok.com/search?lang=id-ID&q=aespa_official&t=1691471614785' target='_blank' rel='noreferrer'>
                                <img src=""https://i.postimg.cc/jSWPw9cr/tiktok.png"" alt=""tiktok"">
                            </a>                            
                            <!-- <table class=""table"">
                                <tr>
                                    <td>
                                        <a href='https://www.instagram.com/hovisohibul/?next=%2F' target='_blank' rel='noreferrer' >
                                            <img src=""https://i.postimg.cc/gkt30dvD/ig.png"" alt=""instagram"">
                                        </a>
                                        <a href='https://twitter.com/home' target='_blank' rel='noreferrer' style=""padding-top: 40px;"">
                                            <img src=""https://i.postimg.cc/zG9Wnj2H/twitter.png"" alt=""twitter"">
                                        </a>
                                        <a href='https://www.youtube.com/watch?v=SfSplXqACNE&ab_channel=NOICE' target='_blank' rel='noreferrer'>
                                            <img src=""https://i.postimg.cc/yNcRnZ2Q/youtube.png"" alt=""youtube"">
                                        </a>
                                        <a href='https://www.facebook.com/profile.php?id=100071366830392' target='_blank' rel='noreferrer'>
                                            <img src=""https://i.postimg.cc/Y231JQ0T/fb.png"" alt=""facebook"">
                                        </a>
                                        <a href='https://www.linkedin.com/in/hovi-sohibul-wafa-1287001b5/' target='_blank' rel='noreferrer'>
                                            <img src=""https://i.postimg.cc/Pr5mhN8J/llink.png"" alt=""linked"">
                                        </a>
                                        <a href='https://www.tiktok.com/search?lang=id-ID&q=aespa_official&t=1691471614785' target='_blank' rel='noreferrer'>
                                            <img src=""https://i.postimg.cc/jSWPw9cr/tiktok.png"" alt=""tiktok"">
                                        </a>
                                    </td>
                                </tr>
                            </table> -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>"
EBmLfSZv,length of string,akzer,C,Tuesday 14th of November 2023 04:12:29 AM CDT,"#include <stdio.h>
#include <string.h>

int main()
{
    char str1[30];
    int num;
    printf(""Enter any string: "");
    gets(str1);
    num = strlen(str1);
    printf(""The length of string is %d.\n"", num);
    return 0;
}"
NJsVLxct,Reverse String in C,Lejhand,C,Tuesday 14th of November 2023 04:11:08 AM CDT,"//WRITE A PROGRAM TO REVERSE THE STATEMENT
//WITH DETAILED EXPLAINATION FROM DHRUV

//PREPROCESSOR INCLUDE
#include<stdio.h>
#include<string.h>
#include<ctype.h>
//MENTIONED I OUTSIDE MAIN CONDITION BECAUSE I WANT IT TO BE GLOBAL VARIABLE AND TO BE ACCESSED ANYWHERE
int i;
//STARTING OF THE MAIN FUNCTION
int main() {
    //INITIALIZING INPUT ARRAY OF 100 CAN BE CHANGED BY YOUR CHOICE AND COUNTER=0 THAT WILL BE UNDERSTOOD LATER WHY
    char input[100],counter=0;
    //TELL THE USER TO ENTER A STRING
    printf(""Enter a string to reverse\n"");
    //TAKE IN THE STRING USING GETS AS SCANF DOESNT ACCEPT AFTER SPACES
    gets(input);
    //START A LOOP AND WE'LL RUN THE LOOP FROM THE LAST TO THE FIRST HENCE
    //WE INITIALIZE THE I AS THE LENGTH OF THE STRING AS IT SHOULD START FROM THE LAST
    //I SHOULD BE >=0 WITHOUT WHICH IT WILL CAUSE AN INFINITE LOOP AND THE STARTING INDEX OF AN ARRAY IS 0 NOT 1
    //I-- TO DECREMENT TILL WE REACH THE FIRST LETTER OF THE ARRAY
    for (int i = strlen(input) - 1; i >= 0; i--) {
        //WE START ACCESSING LETTERS FROM THE BACK EXAMPLE
        //HELLO WORLD - SO FIRST IT ACCEESSES D THEN L ETC AND WHEN IT REACHES THE SPACE IT ENTERS THE IF CONDITION
        if (isspace(input[i]) || i==0) {
            //AFTER ENTERING THE IF WE START A LOOP TO ACCESS THE WORLD WHICH WAS ACCESSED BEFORE THE SPACE
            //REFER THE LINK FOR EXPLAINATION OF THE BELOW
            //https://youtu.be/m5rhy1RDSKk
            for (int j = i; j <= i + counter; j++) {
                printf(""%c"", input[j]);
            }
            counter = 0;
                printf("" "");
        } else {
            counter++;
        }
    }
    return 0;
}"
9weZq5aM,Turtle: Floor Remover,Felski,Lua,Tuesday 14th of November 2023 03:58:58 AM CDT,"-- Funktion zum Entfernen des Blocks unter der Turtle, falls vorhanden
function clearBlock()
    while turtle.detectDown() do
        turtle.digDown()
        os.sleep(0.5)
    end
end

-- Funktion zum Bewegen der Turtle und Entfernen des Bodens
function removeGround(rows, columns, initialDirection)
    local currentDirection = initialDirection
    for i = 1, rows do
        for j = 1, columns do
            clearBlock()
            if j < columns then
                turtle.forward()
            end
        end
        if i < rows then
            if currentDirection == ""r"" then
                turtle.turnRight()
                turtle.forward()
                turtle.turnRight()
                currentDirection = ""l""
            elseif currentDirection == ""l"" then
                turtle.turnLeft()
                turtle.forward()
                turtle.turnLeft()
                currentDirection = ""r""
            else
                error(""Ungültige Richtung. Bitte 'r' oder 'l' eingeben."")
            end
        end
    end
end

-- Funktion zum Prüfen des Treibstoffniveaus
function checkFuelLevel()
    local fuelSlot = 16 -- Treibstoffslot (Slot 16)
    turtle.select(fuelSlot)
    local fuelLevel = turtle.getFuelLevel()
    while fuelLevel == 0 do
        print(""Kein Treibstoff vorhanden im Slot 16. Bitte lege Treibstoff in den Slot 16 und drücke eine Taste, um fortzufahren."")
        os.pullEvent(""key"")
        turtle.refuel()
        fuelLevel = turtle.getFuelLevel()
    end
end

-- Eingabe der Größe der Fläche
print(""Gib die Anzahl der Reihen ein:"")
local rows = tonumber(read())

print(""Gib die Anzahl der Spalten ein:"")
local columns = tonumber(read())

print(""Gib die Richtung der ersten Drehung ein ('r' oder 'l'):"")
local initialDirection = read()

-- Überprüfen, ob die Eingabe gültig ist
if rows and columns and rows > 0 and columns > 0 then
    checkFuelLevel()
    removeGround(rows, columns, initialDirection)
else
    print(""Ungültige Eingabe. Bitte gib positive Zahlen für Reihen und Spalten ein."")
end
"
bhBPTeLt,Untitled,Tiranka1861,C,Tuesday 14th of November 2023 03:50:23 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>

struct
{
    char surname[255];
    int year;
    char number[20];
} typedef Abonent;

void findBySurname(Abonent* list, int size) {
    char name[255];
    printf(""Enter surname of user: "");
    scanf_s(""%s"", name, 255);
    int count = 0;
    for (int i = 0; i < size; i++)
        if ((strcmp(name, list[i].surname) == 0))
        {
            printf(""Phone Number: %s\n"", list[i].number);
            count++;
        }
    if (count == 0)
        printf(""Noname user! We havent any info about %s :(\n"", name);
}

void findByYears(Abonent* list, int size) {
    int year;
    printf(""Enter year of user: "");
    scanf_s(""%d"", &year);
    int count = 0;

    for (int i = 0; i < size; i++)
        if (year <= list[i].year)
            count++;
    if (count == 0)
        printf(""Noname year! We havent any info about %d :(\n"", year);
    else
        printf(""We have %d users after %d year-phone\n"", count, year);
}

void createNewAbonent(Abonent* list, int size)
{
    printf(""Enter surname of new one abonent:\t"");
    scanf_s(""%s"", list[size - 1].surname, 255);

    printf(""Enter number of new one abonent:\t"");
    scanf_s(""%s"", list[size - 1].number, 255);

    printf(""Enter year of new one abonent:\t"");
    scanf_s(""%d"", &list[size - 1].year);
}

Abonent* addAbonent(Abonent* list, int* size)
{
    list = (Abonent*)realloc(list, ((*size)++) * sizeof(Abonent));
    createNewAbonent(list, size);
    return list;
}

int deleteAbonent(Abonent* list, int size)
{
    char name[255];
    printf(""Enter surname of deleted one abonent:\t"");
    scanf_s(""%s"", name, 255);
    for (int i = 0; i < size; i++)
    {
        if ((strcmp(name, list[i].surname) == 0))
        {
            for (int j = 0; j < size - 1; j++)
                list[i] = list[j + 1];
            size--;
            list = (Abonent*)realloc(list, size * sizeof(Abonent));
        }
    }
    return size;
}

void readFromFile(FILE* fi, Abonent* list)
{
    int i = 0;

    while (!feof(fi))
    {
        fscanf_s(fi, ""%s"", list[i].surname, 255);
        fscanf_s(fi, ""%d"", &list[i].year);
        fscanf_s(fi, ""%s"", &list[i].number, 20);
        i++;
    }
}

void printListOfCommands() {
    printf(""\t\tMENU OF COMMANDS\n"");
    printf(""show list by surname of user\t\t\t/0\n"");
    printf(""show list by year of user's OS\t\t\t/1\n"");
    printf(""add new user info\t\t\t\t/2\n"");
    printf(""delete user info\t\t\t\t/3\n"");
    printf(""show full list of users\t\t\t\t/4\n"");
    printf(""end work of programm (write to file and exit)\t/5\n"");
}

void printList(Abonent* list, int size) {
    for (int i = 0; i < size; i++)
    {
        printf(""Surname:\t%s\n"", list[i].surname);
        printf(""Year:\t\t%d\n"", list[i].year);
        printf(""Number:\t\t%s\n"", list[i].number);
        printf(""\n\n"");
    }
}

void printFIO(Abonent* list, int size)
{
    FILE* fo = NULL;
    fopen_s(&fo, ""D://УНИВЕР//КПО//31-10//vAR_6//List.txt"", ""r+t"");

    for (int i = 0; i < size; i++)
    {
        fprintf(fo, ""Group: %s\n"", list[i].surname);
        fprintf(fo, ""Surname: %s\n"", list[i].number);
        fprintf(fo, ""Debts: %d\n"", list[i].year);
    }
    fflush(fo);
    fclose(fo);
}

int takeCommand(Abonent *list, int size) {
    int choice;
    
    int isCorrect = 0;
    do {
        printListOfCommands();
        printf(""Enter command: /"");
        scanf_s(""%d"", &choice);
        switch (choice)
        {
        case 0:
            printf(""\n"");
            findBySurname(list, size);
            isCorrect = 1;
            break;
        case 1:
            printf(""\n"");
            findByYears(list, size);
            isCorrect = 1;
            break;
        case 2:
            printf(""\n"");
            list = addAbonent(list, &size);
            printList(list, size);
            isCorrect = 1;
            break;
        case 3:
            printf(""\n"");
            size = deleteAbonent(list, size);
            printList(list, size);
            isCorrect = 1;
            break;
        case 4:
            printf(""\n"");
            printf(""The data from the file has been successfully read. The resulting list looks like:\n"");
            isCorrect = 1;
            printList(list, size);
            break;
        case 5:
            printFIO(list, size);
            isCorrect = 0;
            break;
        default:
            printf(""INCORRECT COMMAND! TRY AGAIN!\n"");
            isCorrect = 1;
            break;
        }
    } while (isCorrect);
    return choice;
}




int main()
{
    FILE* fi = NULL;
    fopen_s(&fi, ""D://УНИВЕР//КПО//31-10//vAR_6//List.txt"", ""r+t"");

    int size;
    fscanf_s(fi, ""%d"", &size);
    Abonent *list = NULL;
    list = (Abonent*)malloc(size * sizeof(Abonent));
    readFromFile(fi, list);

    int choice = takeCommand(list, size);
    fclose(fi);

    printFIO(list, size);
}
"
5qZg6YHu,financial,wheresTheAnyKey,Bash,Tuesday 14th of November 2023 03:38:27 AM CDT,"Pasted at: 14/11/2023 09:38
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

5148-2121-6312-7114   - DASHES
5148212163127114
5107-4578-0576-9075   - DASHES
5107457805769075
3488-1760-1454-729   - DASHES
348817601454729

Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH"
eARv4a9h,gusto ko na mamatay,yes-but-i-love-you,Python,Tuesday 14th of November 2023 03:26:50 AM CDT,"def calc_endtime(arrival_times, burst_times):
    end_times = []
    current_time = 0

    process_count = list(enumerate(zip(arrival_times, range(len(arrival_times)))))
    process_count = sorted(process_count, key=lambda x: (x[1][0], x[1][1]))

    for process in process_count:
        i = process[0]
        current_time = max(current_time, arrival_times[i])
        current_time += burst_times[i]
        end_times.append(current_time)
    
    final_end_time = sum(end_times)    
    return end_times, final_end_time, current_time

def t_and_w_time(end_times, arrival_times, burst_times):
    turnaround_times = [end - arrival for end, arrival in zip(end_times, arrival_times)]
    waiting_times = [turnaround - burst for turnaround, burst in zip(turnaround_times, burst_times)]

    return turnaround_times, waiting_times

def compute_cpu(final_end_time):
    total_time = final_end_time
    total_cpu_time = final_end_time

    cpu_utilization = (total_cpu_time / total_time) * 100
    
    return cpu_utilization

def display_tb(process_data, end_times, turnaround_times, waiting_times):
    print(""__________________________________________________________________________________"")
    print(""|Process|Arrival Time |Burst Time   |End Time     |Turnaround Time|Waiting Time  |"")
    print(""|_______|_____________|_____________|_____________|_______________|______________|"")
    for (process, arrival, burst_time), end_time, ta_time, wt_time in zip(process_data, end_times, turnaround_times, waiting_times):
     
        print(f""|{process}\t|{arrival}\t      |{burst_time}\t    |{end_time}\t          |{ta_time}\t          |{wt_time}\t         |"")
        print(""|_______|_____________|_____________|_____________|_______________|______________|"")

def display_gantt(process_num, burst_t, end_times, final_end_time, current_time):
    print(""\n"", end="""")

    for i in range(len(process_num)):
        print(f""{process_num[i]}"", end="""")
        print("" "" * (burst_t[i] - len(process_num[i]) + 2), end="""")
    print()
    print(""|"", end="""")
    
    first_arrival_time = min([arrival for _, arrival, _ in p_data])
    current_time = 0
    if current_time < first_arrival_time:
        print(""+"" * (first_arrival_time - current_time), end="""")
        print(""+"" * (burst_t[0] - (first_arrival_time - current_time)), end="""")
    else:
        print(""+"" * burst_t[0], end="""")
    print(""|"", end="""")
    for i in range(len(process_num)):
        print(""-"" * burst_t[i], end="""")
        print(""|"", end="""")
    print()

    print(""0"", end="""")
    for i in range(len(end_times)):
        print(f""{end_times[i]}"", end="""")
        print("" "" * (burst_t[i] - len(str(end_times[i])) + 1), end="""")
    print(f""{final_end_time}"", end="""")
    print()

while True:
    try:
        Proc = int(input(""How many processes do you want to add: ""))
        p_data = []
        if Proc == 0:
            print(""Proccess cannot be less than 1"")
        else:
            for i in range(1, Proc + 1):
                while True:
                    try:
                        arrival_time = int(input(f""Enter the arrival time for process {i}: ""))
                        while True:
                            try:
                                bt_t = int(input(f""Enter the burst time for process {i}: ""))
                                break
                            except ValueError:
                                print(""Please input numbers only!"")
                        break
                    except ValueError:
                        print(""Please input numbers only!"")
                p_data.append((f""P{i}"", arrival_time, bt_t))
            break
    except ValueError:
        print(""Please input numbers only!"")

if __name__ == ""__main__"":
    et, final_time, ctime = calc_endtime([arrival for _, arrival, _ in p_data], [burst for _, _, burst in p_data])
    tt, wt = t_and_w_time(et, [arrival for _, arrival, _ in p_data], [burst for _, _, burst in p_data])
    utilization = compute_cpu(final_time)
    display_tb(p_data, et, tt, wt)
    process_list, _, burst_list = zip(*sorted(p_data, key=lambda x: x[1]))
    display_gantt(process_list, burst_list, et, final_time, ctime)
    print(f""\nCPU Utilization: {utilization:.2f}%"")
    average_turnaround_time = sum(tt) / len(tt)
    print(f""Average Turnaround Time: {average_turnaround_time:.2f} ms"")
    average_waiting_time = sum(wt) / len(wt)
    print(f""Average Waiting Time: {average_waiting_time:.2f} ms"")"
fUfG6YAh,Case Protein 1-9 Violin/Distribution,UF6,Python,Tuesday 14th of November 2023 03:20:51 AM CDT,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
import math

# Replace 'B5 segmentSummary (1).csv' with the actual CSV file path
file_path = 'B5 segmentSummary (1).csv'

# Read the CSV file into a Pandas DataFrame
df = pd.read_csv(file_path)

# Check the available column names
print(df.columns)

# Example: Replace 'categorical_column' with the correct column name containing categorical data
categorical_column = df.columns[0]  # Change this to the correct column name

# Define the range of column positions you want to analyze (columns 6 through 10)
start_column_position = 6  # Corresponds to column 6
end_column_position = 9  # Corresponds to column 10

# Create a list of unique categories in the categorical column
categories = df[categorical_column].unique()

# Create a Seaborn color palette for differentiation
colors = sns.color_palette('husl', n_colors=end_column_position - start_column_position + 1)

# Iterate through each category and create separate figures with six Raincloud plots and six Gaussian distributions per page
for category in categories:
    category_data = df[df[categorical_column] == category]
    num_plots = end_column_position - start_column_position + 1
    num_pages = math.ceil(num_plots / 6)  # Determine the number of pages needed
    
    for page in range(num_pages):
        plt.figure(figsize=(18, 12))
        
        for i in range(6):
            plot_num = page * 6 + i
            if plot_num >= num_plots:
                break
            
            col = df.columns[start_column_position + plot_num]
            
            # Raincloud plot
            plt.subplot(2, 6, i + 1)
            sns.violinplot(data=category_data, y=col, color=colors[plot_num])
            sns.boxplot(data=category_data, y=col, color='white', width=0.2)
            plt.title(f'Raincloud Plot\n{category} - {col}')
        
            # Gaussian distribution plot
            plt.subplot(2, 6, i + 7)
            target_column = category_data[col]
            mean = target_column.mean()
            std_dev = target_column.std()
            x_range = np.linspace(target_column.min(), target_column.max(), 1000)
            fitted_data = norm.pdf(x_range, mean, std_dev)
            plt.plot(x_range, fitted_data, 'b-', linewidth=2, label='Fitted Gaussian')
            plt.hist(target_column, bins=30, density=True, alpha=0.7, color='gray', label='Data Histogram')
            plt.xlabel('Values')
            plt.ylabel('Frequency')
            plt.title(f'Gaussian Fit\n{category} - {col}')
            plt.axvline(mean, color='red', linestyle='dashed', linewidth=2, label='Mean')
            plt.legend()

        plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust the layout to avoid title overlap
        plt.suptitle(f'{category} Plots - Page {page + 1}', fontsize=16)
        plt.show()
"
RFB2ef4Y,Protein Case 1-9 Gaussian Distribution,UF6,Python,Tuesday 14th of November 2023 03:19:52 AM CDT,"import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm
import math
import ptitprince as pt

# Replace 'B5 segmentSummary (1).csv' with the actual CSV file path
file_path = 'B5 segmentSummary (1).csv'

# Read the CSV file into a Pandas DataFrame
df = pd.read_csv(file_path)

# Check the available column names
print(df.columns)

# Example: Replace 'categorical_column' with the correct column name containing categorical data
categorical_column = df.columns[0]  # Change this to the correct column name

# Define the range of column positions you want to analyze (columns 6 through 10)
start_column_position = 6  # Corresponds to column 6
end_column_position = 9  # Corresponds to column 10

# Create a list of unique categories in the categorical column
categories = df[categorical_column].unique()

# Define a custom color palette for the categories
colors = sns.color_palette('husl', n_colors=len(categories))

# Iterate through each category and create separate figures with six Raincloud plots per page
for idx, category in enumerate(categories):
    category_data = df[df[categorical_column] == category]
    num_plots = end_column_position - start_column_position + 1
    num_pages = math.ceil(num_plots / 6)  # Determine the number of pages needed
    
    for page in range(num_pages):
        plt.figure(figsize=(18, 12))
        
        for i in range(6):
            plot_num = page * 6 + i
            if plot_num >= num_plots:
                break
            
            col = df.columns[start_column_position + plot_num]
            
            # Raincloud plot with different colors for each category
            plt.subplot(2, 6, i + 1)
            pt.RainCloud(data=category_data, x=col, orient='h', width_viol=0.6, width_box=0.4, palette=[colors[idx]])
            plt.title(f'Raincloud Plot\n{category} - {col}')
        
        plt.tight_layout(rect=[0, 0.03, 1, 0.95])  # Adjust the layout to avoid title overlap
        plt.suptitle(f'{category} Raincloud Plots - Page {page + 1}', fontsize=16)
        plt.show()
"
by19Pxbx,Raincloud Plots,UF6,Python,Tuesday 14th of November 2023 02:49:57 AM CDT,"import pandas as pd
import matplotlib.pyplot as plt
import ptitprince as pt  # Import ptitprince for raincloud plots
import seaborn as sns  # Import Seaborn for color palettes

# Replace 'B5 segmentSummary (1).csv' with the actual CSV file path
file_path = 'B5 segmentSummary (1).csv'

# Define the range of column positions you want to analyze (columns 6 through 10)
start_column_position = 6  # Corresponds to column 6
end_column_position = 9  # Corresponds to column 10

# Read the CSV file into a Pandas DataFrame
df = pd.read_csv(file_path)

# Create a Seaborn color palette for differentiation
colors = sns.color_palette('husl', n_colors=end_column_position - start_column_position + 1)

# Create a figure with subplots for Raincloud plots
plt.figure(figsize=(12, 12))

# Iterate through the selected columns and create Raincloud plots with different colors
for i, col in enumerate(df.columns[start_column_position:end_column_position + 1]):
    plt.subplot(2, 2, i + 1)  # Create subplots for Raincloud plot
    pt.RainCloud(data=df, x=col, orient='h', width_viol=0.6, width_box=0.4, palette=[colors[i]])

    plt.title(f'Raincloud Plot for {col}')

# Adjust layout
plt.tight_layout()

# Show the plots
plt.show()
"
dCwYgbbu,JS Devtool Debugger,piffy,HTML,Tuesday 14th of November 2023 02:40:25 AM CDT,"<!-- preso da https://developer.chrome.com/docs/devtools/javascript/ -->
<!DOCTYPE html>
<html><head><meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
    <link rel=""shortcut icon"" href=""https://googlechrome.github.io/devtools-samples/favicon-96x96.png"">
    <title>Debugging JavaScript</title>
    <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
    <style>
      h1 {
        font-size: 1.5em
      }
      input, button {
        min-width: 72px;
        min-height: 36px;
        border: 1px solid grey;
      }
      label, input, button {
        display: block;
      }
      input {
        margin-bottom: 1em;
      }
    </style>
  </head>
  <body>
    <h1>Debugging JavaScript</h1>
    <label for=""num1"">Numero 1</label>
    <input placeholder=""Numero 1"" id=""num1"">
    <label for=""num2"">Numero 2</label>
    <input placeholder=""Numero 2"" id=""num2"">
    <button>Somma di Numero 1 e Numero 2</button>
    <p></p>
    <script>
      function onClick() {
  if (inputsAreEmpty()) {
    label.textContent = 'Errore: almeno uno dei valori è vuoto.';
    return;
  }
  updateLabel();
}
function inputsAreEmpty() {
  if (getNumber1() === '' || getNumber2() === '') {
    return true;
  } else {
    return false;
  }
}
function updateLabel() {
  var addend1 = getNumber1();
  var addend2 = getNumber2();
  var sum = addend1 + addend2;
  label.textContent = addend1 + ' + ' + addend2 + ' = ' + sum;
}
function getNumber1() {
  return inputs[0].value;
}
function getNumber2() {
  return inputs[1].value;
}
var inputs = document.querySelectorAll('input');
var label = document.querySelector('p');
var button = document.querySelector('button');
button.addEventListener('click', onClick);

    </script>
  

</body></html>"
GGpjQD7v,Untitled,chertila,Python,Tuesday 14th of November 2023 02:27:06 AM CDT,"def hvr(x, left, middle, right):
    if x[1] == ""HAML"":
        return left
    if x[1] == ""VDHL"":
        return middle
    return right


def mgc(x, left, middle, right):
    if x[0] == ""MUF"":
        return left
    if x[0] == ""GAP"":
        return middle
    return right


def df(x, left, middle, right):
    if x[3] == ""D"":
        return left
    if x[3] == ""FORTH"":
        return middle
    return right


def main(x):
    if x[4] == 1974:
        if x[2] == 1965:
            return mgc(x, hvr(x, 0, 1, 2), df(x, 3, 4, 5), df(x, 6, 7, 8))
    if x[4] == 2005:
        if x[2] == 1965:
            return mgc(x, hvr(x, 9, 10, 11), 12, 13)
    return 14
"
8At34Tdv,emanual snowybot,coinwalk,JavaScript,Tuesday 14th of November 2023 02:08:56 AM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((originalbal/1000).toFixed(8));
var floatingbase = base;
var taget = (originalbal*24000);
var groupedten = (base*10);
var groupedseven = (base*6.5);
var tobetnext = ((floatingbase*1).toFixed(8));
var grind = (base*80)
var bolance = grind;
var over = 6.9;
var under = 2.9;
var freak = 0;
var oldbolance = ((Math.floor(originalbal/groupedten))*groupedten);
var oldtwo = originalbal;

 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
 
function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if (bolance>(oldbolance+(floatingbase*over))){
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9
    freak = 0;
    oldbolance = parseFloat(bolance);
}
if (bolance<(oldbolance-(floatingbase*under))){
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9;
    oldbolance = parseFloat(bolance);
}
if ((floatingbase>=(oldtwo/200))&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
    oldtwo = parseFloat(bolance);
}
if (((floatingbase*3)>=bolance)&&(floatingbase>base)&&(bolance<(((Math.floor(bolance/groupedten))*groupedten)+groupedseven))){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
    oldtwo = parseFloat(bolance);
}
if (oldtwo>originalbal){
oldtwo = originalbal;
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
}, (getR(100,200)));
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), (getR(80,100)));
}
get();"
BxVR6WFp,AutoGAT++,somdcomputerguy,AutoIt,Tuesday 14th of November 2023 01:52:48 AM CDT,"Opt(""TrayMenuMode"", 3)
Opt(""WinTitleMatchMode"", 2) ;1=start, 2=subStr, 3=exact, 4=advanced, -1 to -4=Nocase
Opt(""WinDetectHiddenText"", 1) ;0=don't detect, 1=do detect

Local $SleepTime   = 100
Local $helpURL     = ""https://keepass.info/help/base/index.html""
Local $KeePass[2]  = [""C:\Program Files\KeePass Password Safe 2\"", ""KeePass.exe""]
Local $AutoType[6] = [""-auto-type"", ""-auto-type-password"", ""-auto-type-selected"", ""--lock-all"", ""--unlock-all"", ""--exit-all""]

Local $iKPsaf = TrayCreateMenu(""KeePass Password Safe"") ; Create a tray menu sub menu
Local $idKP   = TrayCreateItem(""KeePass"", $iKPsaf)
Local $idKPH  = TrayCreateItem(""KeePass Help"", $iKPsaf)
Local $idCLOS = TrayCreateItem(""Exit KeePass"", $iKPsaf)
 TrayCreateItem("""")
Local $idTOGL = TrayCreateItem(""Lock or Unlock database"")
Local $idAT   = TrayCreateItem(""AutoType Selected"")
Local $idGAT  = TrayCreateItem(""Global AutoType"")
Local $idGATP = TrayCreateItem(""Global PassWord"")
 TrayCreateItem("""")
Local $idRest = TrayCreateItem(""Restart AutoGAT++"")
;Local $idExit = TrayCreateItem(""Terminate AutoGAT++"")


If $CmdLine[0] > 1 Then
 For $i = 1 to $CmdLine[0]
  Switch $CmdLine[$i]
   Case '-delay'
    $SleepTime  = $CmdLine[$i + 1]
   Case '-path'
    $KeePass[0] = $CmdLine[$i + 1]
   Case '-name'
    $KeePass[1] = $CmdLine[$i + 1]
  EndSwitch
 Next
EndIf

TraySetState(1)
TraySetIcon(@ScriptDir & '\AutoGAT.ico')

While 1
 If Not ProcessExists($KeePass[1]) Then ExitLoop ;leaves this While loop if KeePass exits or isn't running
 If WinExists(""[Locked] - KeePass Password Safe"") Then
  TrayItemSetState($idAT, 128) ;Menuitem will be greyed out
  TrayItemSetState($idGAT, 128) ;Menuitem will be greyed out
  TrayItemSetState($idGATP, 128) ;Menuitem will be greyed out
  TrayItemSetText($idTOGL, ""Unlock database"")
 Else
  TrayItemSetState($idAT, 64) ;Menuitem will be enabled
  TrayItemSetState($idGAT, 64) ;Menuitem will be enabled
  TrayItemSetState($idGATP, 64) ;Menuitem will be enabled
  TrayItemSetText($idTOGL, ""Lock database"")
 EndIf
 
 Switch TrayGetMsg()
  Case $idRest
   Restart()
  ;Case $idExit
   ;Exit
  Case $idKP
   ShellExecute($KeePass[0] & $KeePass[1])
  Case $idKPH
   ShellExecute($helpURL)
  Case $idAT
   Send(""!{TAB}"")
   Sleep($SleepTime)
   ShellExecute($KeePass[0] & $KeePass[1], $AutoType[2])
  Case $idGAT
   Send(""!{TAB}"")
   Sleep($SleepTime)
   ShellExecute($KeePass[0] & $KeePass[1], $AutoType[0])
  Case $idGATP
   Send(""!{TAB}"")
   Sleep($SleepTime)
   ShellExecute($KeePass[0] & $KeePass[1], $AutoType[1])
  Case $idTOGL
   If TrayItemGetText($idTOGL) = ""Unlock database"" Then
    TrayItemSetState($idAT, 64) ;Menuitem will be enabled
	TrayItemSetState($idGAT, 64) ;Menuitem will be enabled
	TrayItemSetState($idGATP, 64) ;Menuitem will be enabled
    ShellExecute($KeePass[0] & $KeePass[1], $AutoType[4]) ; Unlock
   Else
    TrayItemSetState($idAT, 128) ;Menuitem will be greyed out
	TrayItemSetState($idGAT, 128) ;Menuitem will be greyed out
	TrayItemSetState($idGATP, 128) ;Menuitem will be greyed out
    ShellExecute($KeePass[0] & $KeePass[1], $AutoType[3]) ; Lock
   EndIf
  Case $idCLOS
   ShellExecute($KeePass[0] & $KeePass[1], $AutoType[5])
 EndSwitch
WEnd

Exit

Func Restart()
; Restart your program - http://www.autoitscript.com/forum/index.php?s=&showtopic=19370&view=findpost&p=199608
; Author UP_NORTH
    If @Compiled = 1 Then
        Run(FileGetShortName(@ScriptFullPath))
    Else
        Run(FileGetShortName(@AutoItExe) & "" "" & FileGetShortName(@ScriptFullPath))
    EndIf
    Exit
EndFunc		;==>Restart"
eHWqn2bh,emanual snowybot,coinwalk,JavaScript,Tuesday 14th of November 2023 01:52:47 AM CDT,"var originalbal = parseFloat(document.getElementById('pct_balance').value);
var base = Number((originalbal/100).toFixed(8));
var floatingbase = base;
var taget = (originalbal*24000);
var groupedten = (base*10);
var groupedseven = (base*6.5);
var tobetnext = ((floatingbase*1).toFixed(8));
var grind = (base*80)
var bolance = grind;
var over = 6.9;
var under = 2.9;
var freak = 0;
var oldbolance = ((Math.floor(originalbal/groupedten))*groupedten);
var oldtwo = originalbal;

 
 function getR(minz, maxz) {
  minz = Math.ceil(minz);
  maxz = Math.floor(maxz);
  return Math.floor(Math.random() * (maxz - minz + 1)) + minz;
}
 
 
function get(){
console.clear();
setTimeout(function(){
bolance = document.getElementById('pct_balance').value;
if (bolance>(oldbolance+(floatingbase*over))){
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9
    freak = 0;
    oldbolance = parseFloat(bolance);
}
if (bolance<(oldbolance-(floatingbase*under))){
    floatingbase = floatingbase*2;
    over = 4.9;
    under = 4.9;
    oldbolance = parseFloat(bolance);
}
if (floatingbase>=(oldtwo/2)){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
    oldtwo = parseFloat(bolance);
}
if (oldtwo>originalbal){
oldtwo = originalbal;
}
if (((floatingbase*3)>=bolance)&&(floatingbase>base)){
    floatingbase = base;
    over = 6.9;
    under = 2.9;
    oldbolance = ((Math.floor(bolance/groupedten))*groupedten);
    oldtwo = parseFloat(bolance);
}
    if (bolance >= taget) {
        console.log(""winner winner chicken dinner"");
        return;
    }
tobetnext = ((floatingbase*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(tobetnext);
$('#a_lo').click();
}, (getR(100,200)));
var good = ((bolance-originalbal).toFixed(8));
console.log(""profit"");
console.log(good);
setTimeout(() => get(), (getR(80,100)));
}
get();"
zYM6sWtb,Untitled,irsyad2399,MySQL,Tuesday 14th of November 2023 01:29:59 AM CDT,"ALTER TABLE `pax` ADD `type_light` VARCHAR(255) NULL DEFAULT NULL AFTER `proposal_pic`, ADD `no_residents_unit` INT NULL DEFAULT NULL AFTER `type_light`, ADD `no_blocks` INT NULL DEFAULT NULL AFTER `no_residents_unit`, ADD `parking` VARCHAR(255) NULL DEFAULT NULL AFTER `no_blocks`, ADD `tariff` VARCHAR(255) NULL DEFAULT NULL AFTER `parking`;
ALTER TABLE `pax` ADD `created_by` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP AFTER `email_sent`;"
QmwstQEM,[PHP] Base64 UID,peterurfi,PHP,Tuesday 14th of November 2023 01:20:21 AM CDT,"$charset = ""0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_"";
	
function uyid (&$charset, int $length = 11) : string {
	$id = """";
	for($i = 0; $i < $length; $i++) {
		$id .= $charset[mt_rand(0, strlen($charset) - 1)];
	}
	return $id;
}

print_r(uyid($charset, 11));
"
wPU2Hemi,Gunshot Generator,IMainRiven,Python,Tuesday 14th of November 2023 01:16:52 AM CDT,"'''
₊˚‧₊˚‧₊˚✧:･ﾟ✧:･.☽˚｡･ﾟ✧:･.:./\___/\
⋆｡ﾟ☁︎｡⋆｡ ﾟ☾ ﾟ｡⋆⋆｡ﾟ☁︎｡⋆｡ ﾟ☾ ﾟ｡⋆꒰˶ • ༝ -˶꒱
˚‧₊˚✧:･ﾟ✧:･.☽˚｡･ﾟ✧:･.:./づᡕᠵ᠊ᡃ࡚ࠢ࠘ ⸝່ࠡࠣ᠊߯᠆ࠣ࠘ᡁࠣ࠘᠊᠊°.~♡︎ Gun Simulator .𖥔 ݁ 
'''
import random

def gunfire():
    '''
    ❤❤❤ remember to like, comment, and subscribe! <3 (｡◕‿‿◕｡) ❤❤❤
    '''
    # some ingredients (づ๑•ᴗ•๑)づ♡
    # mag decides how many shots we fire ( -_•)╦̵̵̿╤─
    mag = range(random.randint(0, 10))
    crit = 0
    sound = ['bang!', 'Bang!!', 'BANG!!!']

    # ˚☽˚｡⋆ where the magic happens ( ◉o◉)⊃━☆ﾟ.*･｡ﾟִ ࣪𖤐ִ ࣪𖤐ִ ࣪𖤐666✧˖ °
    # burst converts the mag list into the sound fx ✩♬ ₊˚.🎧⋆☾⋆⁺₊✧
    # which appear when gunfire() is run ( • ᴗ - ) ✧
    burst = [random.choice(sound) for i in mag if mag != 0]
    print(burst)

    # flavor text ❤
    if len(burst) > 0:
        print(
            (len(burst)),
            ""rounds where succesfully fired ( -_•)╦̵̵̿╤─""
            )
    else:
        print(""Got a dud? Better luck next time ヽ(｀Д´#)ﾉ ﾑｷｰ!!"")

    # this keeps track of our critical fire(҂ `з´) ︻╦̵̵̿╤──
    for sound in burst:
        if sound == 'BANG!!!':
            crit += 1

    if crit > 1:
        print(""Wow! Lucky. You fired "", crit, ""critical shots! ▄︻デ══━一💥"")
    elif crit == 1:
        print(""woah! You fired a critical shot! ৻(  •̀ ᗜ •́  ৻)"")

    # The code below is a metric
    # to measure if any input
    # was measured at all!
    # ❀𖤣𖥧𖡼⊱✿⊰𖡼𖥧𖤣❀
    # print(""crit was"", crit)

gunfire()

# sumicorp
"
NJ3APg0Y,apexchart - yaml (strømpriser),mikalmo,YAML,Tuesday 14th of November 2023 01:13:45 AM CDT,"type: custom:apexcharts-card
header:
  show: true
  title: ''
experimental:
  color_threshold: true
now:
  show: true
  label: Nå
  color: royalblue
graph_span: 2d
span:
  start: day
apex_config:
  dataLabels:
    enabled: true
  legend:
    show: true
  yaxis:
    - id: price
      show: true
      decimalsInFloat: 1
      floating: false
      forceNiceScale: true
      extend_to: end
      min: 0
series:
  - entity: sensor.brutto_strompris
    type: area
    yaxis_id: price
    curve: smooth
    stroke_width: 0
    show:
      legend_value: false
    color_threshold:
      - value: 0
        color: green
      - value: 0.5
        color: limegreen
      - value: 0.8
        color: lightgreen
      - value: 1
        color: gold
      - value: 1.2
        color: orange
      - value: 1.4
        color: darkorange
      - value: 1.6
        color: orangered
      - value: 1.8
        color: red
      - value: 2
        color: darkred
      - value: 2.2
        color: firebrick
      - value: 2.4
        color: darkviolet
      - value: 2.6
        color: indigo
      - value: 2.8
        color: mediumblue
      - value: 3
        color: royalblue
    data_generator: |
      var priceData = entity.attributes.pricedata;
      var data = priceData.map(function(entry) {
        return [new Date(entry.start), entry.value];
      });
      return data;
    extend_to: now
  - entity: sensor.netto_strompris
    type: line
    yaxis_id: price
    curve: smooth
    stroke_width: 2
    show:
      legend_value: false
    color: royalblue
    data_generator: |
      var priceData = entity.attributes.pricedata;
      var data = priceData.map(function(entry) {
        return [new Date(entry.start), entry.value];
      });
      return data;
    extend_to: now
  - entity: sensor.spotpris_strom
    type: line
    name: Spotpris
    yaxis_id: price
    curve: smooth
    stroke_width: 1
    show:
      legend_value: false
    color: grey
    data_generator: |
      var priceData = entity.attributes.pricedata;
      var data = priceData.map(function(entry) {
        return [new Date(entry.start), entry.value];
      });
      return data;
    extend_to: now
"
NkcpEtut,Nigerian scammers [14-11-1/2023],bombaires,AIMMS,Tuesday 14th of November 2023 01:08:05 AM CDT,"cb4853466@daum.net"">cb4853466@daum.net</a>
<a href=""mailto:brianmoynihan331@gmail.com"">brianmoynihan331@gmail.com</a>
<a href=""mailto:b.rianm.oyn.i.h.an33.1@gmail.com"">b.rianm.oyn.i.h.an33.1@gmail.com</a>
<a href=""mailto:br.i.a.nm.o.y.ni.h.an.33.1@gmail.com"">br.i.a.nm.o.y.ni.h.an.33.1@gmail.com</a>
<a href=""mailto:brianmo.y.n.ih.an.33.1@gmail.com"">brianmo.y.n.ih.an.33.1@gmail.com</a>
<a href=""mailto:b.ri.a.nmo.y.n.i.h.an33.1@gmail.com"">b.ri.a.nmo.y.n.i.h.an33.1@gmail.com</a>
<a href=""mailto:b.ria.nm.o.y.n.i.han3.31@gmail.com"">b.ria.nm.o.y.n.i.han3.31@gmail.com</a>
<a href=""mailto:br.ian.moy.ni.han.33.1@gmail.com"">br.ian.moy.ni.han.33.1@gmail.com</a>
<a href=""mailto:brianm.o.y.n.i.ha.n33.1@gmail.com"">brianm.o.y.n.i.ha.n33.1@gmail.com</a>
<a href=""mailto:b.rianm.oy.n.ih.a.n.3.3.1@gmail.com"">b.rianm.oy.n.ih.a.n.3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.a.nmoy.n.ihan.33.1@gmail.com"">b.r.i.a.nmoy.n.ihan.33.1@gmail.com</a>
<a href=""mailto:b.r.ianm.o.y.n.ih.an.331@gmail.com"">b.r.ianm.o.y.n.ih.an.331@gmail.com</a>
<a href=""mailto:br.ia.n.m.oy.n.iha.n.33.1@gmail.com"">br.ia.n.m.oy.n.iha.n.33.1@gmail.com</a>
<a href=""mailto:b.r.ianmoyn.iha.n331@gmail.com"">b.r.ianmoyn.iha.n331@gmail.com</a>
<a href=""mailto:br.ia.n.m.oyn.i.han331@gmail.com"">br.ia.n.m.oyn.i.han331@gmail.com</a>
<a href=""mailto:b.rianm.o.y.n.i.han331@gmail.com"">b.rianm.o.y.n.i.han331@gmail.com</a>
<a href=""mailto:b.r.ian.moy.n.iha.n.3.3.1@gmail.com"">b.r.ian.moy.n.iha.n.3.3.1@gmail.com</a>
<a href=""mailto:b.ri.anm.oy.n.i.h.an.331@gmail.com"">b.ri.anm.oy.n.i.h.an.331@gmail.com</a>
<a href=""mailto:b.ria.n.moyn.iha.n3.3.1@gmail.com"">b.ria.n.moyn.iha.n3.3.1@gmail.com</a>
<a href=""mailto:bri.an.moynih.an331@gmail.com"">bri.an.moynih.an331@gmail.com</a>
<a href=""mailto:b.r.i.an.mo.y.n.ih.a.n.3.31@gmail.com"">b.r.i.an.mo.y.n.ih.a.n.3.31@gmail.com</a>
<a href=""mailto:bri.anm.oy.n.i.ha.n.3.3.1@gmail.com"">bri.anm.oy.n.i.ha.n.3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.anm.o.yn.ih.an.33.1@gmail.com"">b.r.i.anm.o.yn.ih.an.33.1@gmail.com</a>
<a href=""mailto:b.ria.n.m.o.y.n.i.ha.n.3.31@gmail.com"">b.ria.n.m.o.y.n.i.ha.n.3.31@gmail.com</a>
<a href=""mailto:bri.anmo.y.nihan.33.1@gmail.com"">bri.anmo.y.nihan.33.1@gmail.com</a>
<a href=""mailto:bri.a.nmoynih.an.3.3.1@gmail.com"">bri.a.nmoynih.an.3.3.1@gmail.com</a>
<a href=""mailto:b.r.ia.n.m.oynih.a.n.33.1@gmail.com"">b.r.ia.n.m.oynih.a.n.33.1@gmail.com</a>
<a href=""mailto:b.ri.anm.o.y.nih.an.33.1@gmail.com"">b.ri.anm.o.y.nih.an.33.1@gmail.com</a>
<a href=""mailto:bri.an.m.oynih.a.n3.3.1@gmail.com"">bri.an.m.oynih.a.n3.3.1@gmail.com</a>
<a href=""mailto:bri.an.moyn.i.h.a.n.331@gmail.com"">bri.an.moyn.i.h.a.n.331@gmail.com</a>
<a href=""mailto:b.rianmoyn.i.ha.n331@gmail.com"">b.rianmoyn.i.ha.n331@gmail.com</a>
<a href=""mailto:bri.anmo.yn.ih.an.3.31@gmail.com"">bri.anmo.yn.ih.an.3.31@gmail.com</a>
<a href=""mailto:bri.a.n.m.o.yn.i.ha.n.3.31@gmail.com"">bri.a.n.m.o.yn.i.ha.n.3.31@gmail.com</a>
<a href=""mailto:bria.n.m.o.ynihan.3.31@gmail.com"">bria.n.m.o.ynihan.3.31@gmail.com</a>
<a href=""mailto:br.i.a.n.moyni.h.an33.1@gmail.com"">br.i.a.n.moyni.h.an33.1@gmail.com</a>
<a href=""mailto:br.ian.moy.n.i.h.a.n33.1@gmail.com"">br.ian.moy.n.i.h.a.n33.1@gmail.com</a>
<a href=""mailto:br.ianmoynih.an.3.31@gmail.com"">br.ianmoynih.an.3.31@gmail.com</a>
<a href=""mailto:b.ri.an.m.o.yn.ih.a.n.3.31@gmail.com"">b.ri.an.m.o.yn.ih.a.n.3.31@gmail.com</a>
<a href=""mailto:b.ria.n.m.oy.n.ih.a.n331@gmail.com"">b.ria.n.m.oy.n.ih.a.n331@gmail.com</a>
<a href=""mailto:b.rian.mo.y.ni.h.an.3.3.1@gmail.com"">b.rian.mo.y.ni.h.an.3.3.1@gmail.com</a>
<a href=""mailto:bri.an.mo.yni.h.a.n.33.1@gmail.com"">bri.an.mo.yni.h.a.n.33.1@gmail.com</a>
<a href=""mailto:b.rian.moyni.ha.n3.31@gmail.com"">b.rian.moyni.ha.n3.31@gmail.com</a>
<a href=""mailto:b.r.ia.nm.oynihan.331@gmail.com"">b.r.ia.nm.oynihan.331@gmail.com</a>
<a href=""mailto:brian.moy.n.i.h.an.3.31@gmail.com"">brian.moy.n.i.h.an.3.31@gmail.com</a>
<a href=""mailto:brianm.oy.n.i.han.33.1@gmail.com"">brianm.oy.n.i.han.33.1@gmail.com</a>
<a href=""mailto:b.r.i.a.nmoyniha.n331@gmail.com"">b.r.i.a.nmoyniha.n331@gmail.com</a>
<a href=""mailto:b.r.i.anmo.y.n.i.h.a.n3.3.1@gmail.com"">b.r.i.anmo.y.n.i.h.a.n3.3.1@gmail.com</a>
<a href=""mailto:b.rianmo.yn.iha.n3.3.1@gmail.com"">b.rianmo.yn.iha.n3.3.1@gmail.com</a>
<a href=""mailto:b.r.ianmo.y.nih.a.n.3.31@gmail.com"">b.r.ianmo.y.nih.a.n.3.31@gmail.com</a>
<a href=""mailto:bri.a.nm.o.y.n.iha.n3.3.1@gmail.com"">bri.a.nm.o.y.n.iha.n3.3.1@gmail.com</a>
<a href=""mailto:b.rianm.oyni.h.an3.31@gmail.com"">b.rianm.oyni.h.an3.31@gmail.com</a>
<a href=""mailto:b.r.ian.moy.ni.h.an33.1@gmail.com"">b.r.ian.moy.ni.h.an33.1@gmail.com</a>
<a href=""mailto:br.ia.n.m.oy.n.iha.n331@gmail.com"">br.ia.n.m.oy.n.iha.n331@gmail.com</a>
<a href=""mailto:bri.a.nmo.y.n.i.h.a.n3.31@gmail.com"">bri.a.nmo.y.n.i.h.a.n3.31@gmail.com</a>
<a href=""mailto:b.ria.n.mo.yni.han.331@gmail.com"">b.ria.n.mo.yni.han.331@gmail.com</a>
<a href=""mailto:b.r.ian.mo.yn.ih.an.3.31@gmail.com"">b.r.ian.mo.yn.ih.an.3.31@gmail.com</a>
<a href=""mailto:b.ri.anm.o.yn.i.h.an.3.31@gmail.com"">b.ri.anm.o.yn.i.h.an.3.31@gmail.com</a>
<a href=""mailto:bri.a.n.m.oy.ni.han.33.1@gmail.com"">bri.a.n.m.oy.ni.han.33.1@gmail.com</a>
<a href=""mailto:b.r.ia.n.m.o.yni.h.a.n3.31@gmail.com"">b.r.ia.n.m.o.yni.h.a.n3.31@gmail.com</a>
<a href=""mailto:brianmoy.ni.h.an.3.31@gmail.com"">brianmoy.ni.h.an.3.31@gmail.com</a>
<a href=""mailto:br.i.a.nmo.y.niha.n.33.1@gmail.com"">br.i.a.nmo.y.niha.n.33.1@gmail.com</a>
<a href=""mailto:br.i.a.nmoy.nihan331@gmail.com"">br.i.a.nmoy.nihan331@gmail.com</a>
<a href=""mailto:b.r.i.a.n.mo.yniha.n.33.1@gmail.com"">b.r.i.a.n.mo.yniha.n.33.1@gmail.com</a>
<a href=""mailto:br.i.an.m.oynih.an.33.1@gmail.com"">br.i.an.m.oynih.an.33.1@gmail.com</a>
<a href=""mailto:brian.m.o.ynih.an3.3.1@gmail.com"">brian.m.o.ynih.an3.3.1@gmail.com</a>
<a href=""mailto:b.r.ia.n.moy.nihan3.3.1@gmail.com"">b.r.ia.n.moy.nihan3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.an.moyn.i.han33.1@gmail.com"">b.r.i.an.moyn.i.han33.1@gmail.com</a>
<a href=""mailto:brianmoy.ni.h.a.n.3.3.1@gmail.com"">brianmoy.ni.h.a.n.3.3.1@gmail.com</a>
<a href=""mailto:br.i.an.moyni.ha.n.3.3.1@gmail.com"">br.i.an.moyni.ha.n.3.3.1@gmail.com</a>
<a href=""mailto:bri.anm.o.yn.ih.a.n.33.1@gmail.com"">bri.anm.o.yn.ih.a.n.33.1@gmail.com</a>
<a href=""mailto:b.ri.a.nm.o.yn.i.h.a.n3.3.1@gmail.com"">b.ri.a.nm.o.yn.i.h.a.n3.3.1@gmail.com</a>
<a href=""mailto:br.ian.m.o.y.n.i.h.a.n331@gmail.com"">br.ian.m.o.y.n.i.h.a.n331@gmail.com</a>
<a href=""mailto:b.r.ianmo.yn.i.ha.n3.31@gmail.com"">b.r.ianmo.yn.i.ha.n3.31@gmail.com</a>
<a href=""mailto:br.i.anmoyn.ih.a.n.331@gmail.com"">br.i.anmoyn.ih.a.n.331@gmail.com</a>
<a href=""mailto:b.ri.a.nmo.y.n.ih.a.n33.1@gmail.com"">b.ri.a.nmo.y.n.ih.a.n33.1@gmail.com</a>
<a href=""mailto:br.ian.m.o.yn.ih.a.n.3.3.1@gmail.com"">br.ian.m.o.yn.ih.a.n.3.3.1@gmail.com</a>
<a href=""mailto:bri.anm.oyni.h.a.n331@gmail.com"">bri.anm.oyni.h.a.n331@gmail.com</a>
<a href=""mailto:b.r.i.a.n.mo.y.n.ih.a.n3.3.1@gmail.com"">b.r.i.a.n.mo.y.n.ih.a.n3.3.1@gmail.com</a>
<a href=""mailto:b.ria.n.m.oyni.ha.n3.3.1@gmail.com"">b.ria.n.m.oyni.ha.n3.3.1@gmail.com</a>
<a href=""mailto:br.ia.n.moyni.ha.n33.1@gmail.com"">br.ia.n.moyni.ha.n33.1@gmail.com</a>
<a href=""mailto:b.ri.anmoy.nihan.3.31@gmail.com"">b.ri.anmoy.nihan.3.31@gmail.com</a>
<a href=""mailto:br.i.anmoy.n.i.h.an.3.3.1@gmail.com"">br.i.anmoy.n.i.h.an.3.3.1@gmail.com</a>
<a href=""mailto:b.ri.anmoyni.ha.n.3.3.1@gmail.com"">b.ri.anmoyni.ha.n.3.3.1@gmail.com</a>
<a href=""mailto:br.i.a.nm.oy.ni.h.an33.1@gmail.com"">br.i.a.nm.oy.ni.h.an33.1@gmail.com</a>
<a href=""mailto:br.i.a.nm.o.y.n.i.h.an331@gmail.com"">br.i.a.nm.o.y.n.i.h.an331@gmail.com</a>
<a href=""mailto:bria.n.m.oy.n.ih.an3.31@gmail.com"">bria.n.m.oy.n.ih.an3.31@gmail.com</a>
<a href=""mailto:b.rianmo.y.n.iha.n331@gmail.com"">b.rianmo.y.n.iha.n331@gmail.com</a>
<a href=""mailto:b.rianm.o.y.n.i.h.an3.3.1@gmail.com"">b.rianm.o.y.n.i.h.an3.3.1@gmail.com</a>
<a href=""mailto:b.rian.mo.y.ni.h.an3.31@gmail.com"">b.rian.mo.y.ni.h.an3.31@gmail.com</a>
<a href=""mailto:br.i.anmo.ynih.a.n.3.31@gmail.com"">br.i.anmo.ynih.a.n.3.31@gmail.com</a>
<a href=""mailto:b.ri.anmoyn.i.ha.n.33.1@gmail.com"">b.ri.anmoyn.i.ha.n.33.1@gmail.com</a>
<a href=""mailto:bri.a.nmoy.ni.h.an.3.31@gmail.com"">bri.a.nmoy.ni.h.an.3.31@gmail.com</a>
<a href=""mailto:b.ri.a.nmo.y.n.i.ha.n331@gmail.com"">b.ri.a.nmo.y.n.i.ha.n331@gmail.com</a>
<a href=""mailto:br.i.a.nm.oyni.han3.3.1@gmail.com"">br.i.a.nm.oyni.han3.3.1@gmail.com</a>
<a href=""mailto:brianmo.yn.ih.a.n33.1@gmail.com"">brianmo.yn.ih.a.n33.1@gmail.com</a>
<a href=""mailto:br.ia.nm.o.y.n.i.h.an.3.3.1@gmail.com"">br.ia.nm.o.y.n.i.h.an.3.3.1@gmail.com</a>
<a href=""mailto:brian.m.oy.nih.an3.3.1@gmail.com"">brian.m.oy.nih.an3.3.1@gmail.com</a>
<a href=""mailto:b.ri.anm.oyn.ihan331@gmail.com"">b.ri.anm.oyn.ihan331@gmail.com</a>
<a href=""mailto:bria.nmo.y.n.i.h.an.331@gmail.com"">bria.nmo.y.n.i.h.an.331@gmail.com</a>
<a href=""mailto:br.i.anmo.yn.iha.n3.3.1@gmail.com"">br.i.anmo.yn.iha.n3.3.1@gmail.com</a>
<a href=""mailto:br.ian.moy.niha.n3.3.1@gmail.com"">br.ian.moy.niha.n3.3.1@gmail.com</a>
<a href=""mailto:bri.an.mo.yn.ih.an.331@gmail.com"">bri.an.mo.yn.ih.an.331@gmail.com</a>
<a href=""mailto:bria.n.m.oyn.ih.an.3.31@gmail.com"">bria.n.m.oyn.ih.an.3.31@gmail.com</a>
<a href=""mailto:b.r.i.a.n.m.oyn.i.h.a.n331@gmail.com"">b.r.i.a.n.m.oyn.i.h.a.n331@gmail.com</a>
<a href=""mailto:br.i.an.moyn.ih.an33.1@gmail.com"">br.i.an.moyn.ih.an33.1@gmail.com</a>
<a href=""mailto:brian.m.oy.ni.ha.n.33.1@gmail.com"">brian.m.oy.ni.ha.n.33.1@gmail.com</a>
<a href=""mailto:b.rian.m.oy.n.ih.an.3.3.1@gmail.com"">b.rian.m.oy.n.ih.an.3.3.1@gmail.com</a>
<a href=""mailto:br.ian.moy.n.ih.an.33.1@gmail.com"">br.ian.moy.n.ih.an.33.1@gmail.com</a>
<a href=""mailto:b.r.i.a.nmoynihan.33.1@gmail.com"">b.r.i.a.nmoynihan.33.1@gmail.com</a>
<a href=""mailto:b.ria.nm.oy.ni.ha.n3.31@gmail.com"">b.ria.nm.oy.ni.ha.n3.31@gmail.com</a>
<a href=""mailto:bri.anm.o.yn.iha.n33.1@gmail.com"">bri.anm.o.yn.iha.n33.1@gmail.com</a>
<a href=""mailto:br.i.anm.oyn.iha.n.3.3.1@gmail.com"">br.i.anm.oyn.iha.n.3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.an.moynih.a.n331@gmail.com"">b.r.i.an.moynih.a.n331@gmail.com</a>
<a href=""mailto:b.ria.nmoy.nih.a.n3.3.1@gmail.com"">b.ria.nmoy.nih.a.n3.3.1@gmail.com</a>
<a href=""mailto:b.ria.nm.o.y.n.i.h.an331@gmail.com"">b.ria.nm.o.y.n.i.h.an331@gmail.com</a>
<a href=""mailto:b.rianm.oyn.i.ha.n.3.31@gmail.com"">b.rianm.oyn.i.ha.n.3.31@gmail.com</a>
<a href=""mailto:b.r.i.an.m.oyn.i.h.an.331@gmail.com"">b.r.i.an.m.oyn.i.h.an.331@gmail.com</a>
<a href=""mailto:br.ia.n.m.o.yn.iha.n331@gmail.com"">br.ia.n.m.o.yn.iha.n331@gmail.com</a>
<a href=""mailto:brianm.o.y.nih.an3.3.1@gmail.com"">brianm.o.y.nih.an3.3.1@gmail.com</a>
<a href=""mailto:br.ianm.o.ynih.a.n.331@gmail.com"">br.ianm.o.ynih.a.n.331@gmail.com</a>
<a href=""mailto:br.ia.nm.oyn.i.h.an.3.3.1@gmail.com"">br.ia.nm.oyn.i.h.an.3.3.1@gmail.com</a>
<a href=""mailto:b.rianm.oynih.an3.31@gmail.com"">b.rianm.oynih.an3.31@gmail.com</a>
<a href=""mailto:b.ria.n.m.o.yn.ih.a.n.33.1@gmail.com"">b.ria.n.m.o.yn.ih.a.n.33.1@gmail.com</a>
<a href=""mailto:br.i.a.n.m.oyn.i.ha.n.3.3.1@gmail.com"">br.i.a.n.m.oyn.i.ha.n.3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.an.mo.y.ni.han331@gmail.com"">b.r.i.an.mo.y.ni.han331@gmail.com</a>
<a href=""mailto:b.r.i.an.mo.ynih.an.3.3.1@gmail.com"">b.r.i.an.mo.ynih.an.3.3.1@gmail.com</a>
<a href=""mailto:bri.anmoyni.ha.n3.31@gmail.com"">bri.anmoyni.ha.n3.31@gmail.com</a>
<a href=""mailto:b.ri.anm.o.y.n.ih.an.3.3.1@gmail.com"">b.ri.anm.o.y.n.ih.an.3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.anm.o.y.n.i.ha.n33.1@gmail.com"">b.r.i.anm.o.y.n.i.ha.n33.1@gmail.com</a>
<a href=""mailto:b.ri.anm.o.y.ni.h.a.n3.31@gmail.com"">b.ri.anm.o.y.ni.h.a.n3.31@gmail.com</a>
<a href=""mailto:bria.n.moynih.a.n33.1@gmail.com"">bria.n.moynih.a.n33.1@gmail.com</a>
<a href=""mailto:br.ia.nmoy.n.iha.n.3.31@gmail.com"">br.ia.nmoy.n.iha.n.3.31@gmail.com</a>
<a href=""mailto:br.i.a.nmoyn.ihan33.1@gmail.com"">br.i.a.nmoyn.ihan33.1@gmail.com</a>
<a href=""mailto:br.ia.nm.oynih.a.n.33.1@gmail.com"">br.ia.nm.oynih.a.n.33.1@gmail.com</a>
<a href=""mailto:b.r.i.a.nmo.yn.i.ha.n3.31@gmail.com"">b.r.i.a.nmo.yn.i.ha.n3.31@gmail.com</a>
<a href=""mailto:b.rianmo.yn.i.h.a.n3.3.1@gmail.com"">b.rianmo.yn.i.h.a.n3.3.1@gmail.com</a>
<a href=""mailto:b.r.ian.moy.ni.han.3.31@gmail.com"">b.r.ian.moy.ni.han.3.31@gmail.com</a>
<a href=""mailto:b.r.ian.m.o.y.n.i.han3.3.1@gmail.com"">b.r.ian.m.o.y.n.i.han3.3.1@gmail.com</a>
<a href=""mailto:b.r.ia.nmoy.ni.h.an.3.3.1@gmail.com"">b.r.ia.nmoy.ni.h.an.3.3.1@gmail.com</a>
<a href=""mailto:br.i.a.nmoyn.ihan.331@gmail.com"">br.i.a.nmoyn.ihan.331@gmail.com</a>
<a href=""mailto:b.ri.anm.oy.n.i.ha.n3.3.1@gmail.com"">b.ri.anm.oy.n.i.ha.n3.3.1@gmail.com</a>
<a href=""mailto:br.i.anm.o.y.nihan.331@gmail.com"">br.i.anm.o.y.nihan.331@gmail.com</a>
<a href=""mailto:brianm.oyn.i.ha.n33.1@gmail.com"">brianm.oyn.i.ha.n33.1@gmail.com</a>
<a href=""mailto:b.ria.nmo.y.ni.h.a.n.3.31@gmail.com"">b.ria.nmo.y.ni.h.a.n.3.31@gmail.com</a>
<a href=""mailto:bria.nm.oy.nih.an.33.1@gmail.com"">bria.nm.oy.nih.an.33.1@gmail.com</a>
<a href=""mailto:brian.m.o.y.n.ihan331@gmail.com"">brian.m.o.y.n.ihan331@gmail.com</a>
<a href=""mailto:bria.n.mo.yn.ihan.3.31@gmail.com"">bria.n.mo.yn.ihan.3.31@gmail.com</a>
<a href=""mailto:br.i.a.n.moyni.h.a.n3.31@gmail.com"">br.i.a.n.moyni.h.a.n3.31@gmail.com</a>
<a href=""mailto:b.r.i.a.n.moyni.ha.n.33.1@gmail.com"">b.r.i.a.n.moyni.ha.n.33.1@gmail.com</a>
<a href=""mailto:brianm.o.yni.han331@gmail.com"">brianm.o.yni.han331@gmail.com</a>
<a href=""mailto:b.ri.a.n.m.oy.nihan33.1@gmail.com"">b.ri.a.n.m.oy.nihan33.1@gmail.com</a>
<a href=""mailto:b.ria.nmoyn.ihan.3.31@gmail.com"">b.ria.nmoyn.ihan.3.31@gmail.com</a>
<a href=""mailto:brian.moyni.han3.31@gmail.com"">brian.moyni.han3.31@gmail.com</a>
<a href=""mailto:brian.m.oy.ni.h.a.n.331@gmail.com"">brian.m.oy.ni.h.a.n.331@gmail.com</a>
<a href=""mailto:br.ian.mo.y.nih.an3.3.1@gmail.com"">br.ian.mo.y.nih.an3.3.1@gmail.com</a>
<a href=""mailto:bria.nmoyn.i.ha.n3.31@gmail.com"">bria.nmoyn.i.ha.n3.31@gmail.com</a>
<a href=""mailto:b.ria.nm.o.y.n.iha.n3.3.1@gmail.com"">b.ria.nm.o.y.n.iha.n3.3.1@gmail.com</a>
<a href=""mailto:br.ianm.oynih.an.33.1@gmail.com"">br.ianm.oynih.an.33.1@gmail.com</a>
<a href=""mailto:br.ianmo.yni.h.a.n.3.31@gmail.com"">br.ianmo.yni.h.a.n.3.31@gmail.com</a>
<a href=""mailto:br.i.an.m.oyn.iha.n33.1@gmail.com"">br.i.an.m.oyn.iha.n33.1@gmail.com</a>
<a href=""mailto:b.r.ia.n.mo.yn.ih.a.n3.31@gmail.com"">b.r.ia.n.mo.yn.ih.a.n3.31@gmail.com</a>
<a href=""mailto:bri.a.n.m.o.y.ni.h.a.n3.31@gmail.com"">bri.a.n.m.o.y.ni.h.a.n3.31@gmail.com</a>
<a href=""mailto:b.ri.anmoy.n.i.ha.n3.3.1@gmail.com"">b.ri.anmoy.n.i.ha.n3.3.1@gmail.com</a>
<a href=""mailto:b.ri.an.moynihan331@gmail.com"">b.ri.an.moynihan331@gmail.com</a>
<a href=""mailto:b.r.ian.m.oyn.ih.an33.1@gmail.com"">b.r.ian.m.oyn.ih.an33.1@gmail.com</a>
<a href=""mailto:b.r.i.anmoyniha.n.3.3.1@gmail.com"">b.r.i.anmoyniha.n.3.3.1@gmail.com</a>
<a href=""mailto:br.i.an.m.o.y.ni.ha.n3.3.1@gmail.com"">br.i.an.m.o.y.ni.ha.n3.3.1@gmail.com</a>
<a href=""mailto:b.r.i.a.n.mo.yniha.n.3.31@gmail.com"">b.r.i.a.n.mo.yniha.n.3.31@gmail.com</a>
<a href=""mailto:b.ria.n.m.oyni.h.a.n.33.1@gmail.com"">b.ria.n.m.oyni.h.a.n.33.1@gmail.com</a>
<a href=""mailto:b.r.i.an.m.oy.niha.n33.1@gmail.com"">b.r.i.an.m.oy.niha.n33.1@gmail.com</a>
<a href=""mailto:b.rianmo.y.nih.a.n3.31@gmail.com"">b.rianmo.y.nih.a.n3.31@gmail.com</a>
<a href=""mailto:b.ria.n.moyniha.n.3.3.1@gmail.com"">b.ria.n.moyniha.n.3.3.1@gmail.com</a>
<a href=""mailto:bria.n.moynihan33.1@gmail.com"">bria.n.moynihan33.1@gmail.com</a>
<a href=""mailto:b.r.i.a.nm.o.y.niha.n.331@gmail.com"">b.r.i.a.nm.o.y.niha.n.331@gmail.com</a>
<a href=""mailto:b.ri.an.moyniha.n331@gmail.com"">b.ri.an.moyniha.n331@gmail.com</a>
<a href=""mailto:bria.n.m.oyni.h.a.n331@gmail.com"">bria.n.m.oyni.h.a.n331@gmail.com</a>
<a href=""mailto:b.rianmoyn.i.han.331@gmail.com"">b.rianmoyn.i.han.331@gmail.com</a>
<a href=""mailto:bria.n.mo.y.n.i.han3.31@gmail.com"">bria.n.mo.y.n.i.han3.31@gmail.com</a>
<a href=""mailto:b.ri.a.n.moyn.ihan3.3.1@gmail.com"">b.ri.a.n.moyn.ihan3.3.1@gmail.com</a>
<a href=""mailto:b.rianmo.yni.han.3.3.1@gmail.com"">b.rianmo.yni.han.3.3.1@gmail.com</a>
<a href=""mailto:b.rian.m.o.y.nih.a.n3.31@gmail.com"">b.rian.m.o.y.nih.a.n3.31@gmail.com</a>
<a href=""mailto:b.r.i.an.m.o.y.nihan.33.1@gmail.com"">b.r.i.an.m.o.y.nihan.33.1@gmail.com</a>
<a href=""mailto:bria.nmo.y.nihan.3.3.1@gmail.com"">bria.nmo.y.nihan.3.3.1@gmail.com</a>
<a href=""mailto:bri.an.moyn.ih.an33.1@gmail.com"">bri.an.moyn.ih.an33.1@gmail.com</a>
<a href=""mailto:b.r.i.a.n.moyniha.n.3.31@gmail.com"">b.r.i.a.n.moyniha.n.3.31@gmail.com</a>
<a href=""mailto:bri.a.n.moy.n.i.h.a.n.3.31@gmail.com"">bri.a.n.moy.n.i.h.a.n.3.31@gmail.com</a>
<a href=""mailto:b.ria.nmoyn.i.h.a.n.3.3.1@gmail.com"">b.ria.nmoyn.i.h.a.n.3.3.1@gmail.com</a>
<a href=""mailto:b.ri.a.n.moyni.han.3.3.1@gmail.com"">b.ri.a.n.moyni.han.3.3.1@gmail.com</a>
<a href=""mailto:b.ria.nm.o.yn.ihan33.1@gmail.com"">b.ria.nm.o.yn.ihan33.1@gmail.com</a>
<a href=""mailto:b.ri.anmo.y.n.i.h.an33.1@gmail.com"">b.ri.anmo.y.n.i.h.an33.1@gmail.com</a>
<a href=""mailto:b.rian.m.oyn.ihan331@gmail.com"">b.rian.m.oyn.ihan331@gmail.com</a>
<a href=""mailto:bria.n.m.o.y.ni.h.a.n3.3.1@gmail.com"">bria.n.m.o.y.ni.h.a.n3.3.1@gmail.com</a>
<a href=""mailto:b.ri.a.n.mo.y.nih.a.n.3.3.1@gmail.com"">b.ri.a.n.mo.y.nih.a.n.3.3.1@gmail.com</a>
<a href=""mailto:br.i.a.n.mo.ynihan3.31@gmail.com"">br.i.a.n.mo.ynihan3.31@gmail.com</a>
<a href=""mailto:br.i.a.nm.o.ynih.a.n331@gmail.com"">br.i.a.nm.o.ynih.a.n331@gmail.com</a>
<a href=""mailto:b.r.i.an.moy.nihan.331@gmail.com"">b.r.i.an.moy.nihan.331@gmail.com</a>
<a href=""mailto:b.r.i.an.m.o.yni.ha.n.33.1@gmail.com"">b.r.i.an.m.o.yni.ha.n.33.1@gmail.com</a>
<a href=""mailto:b.r.ian.mo.yn.ih.an3.31@gmail.com"">b.r.ian.mo.yn.ih.an3.31@gmail.com</a>
<a href=""mailto:b.r.i.anm.o.yni.ha.n3.3.1@gmail.com"">b.r.i.anm.o.yni.ha.n3.3.1@gmail.com</a>
<a href=""mailto:b.ri.a.n.mo.yn.i.ha.n331@gmail.com"">b.ri.a.n.mo.yn.i.ha.n331@gmail.com</a>
<a href=""mailto:b.rianm.oy.n.i.h.an.331@gmail.com"">b.rianm.oy.n.i.h.an.331@gmail.com</a>
<a href=""mailto:b.rian.m.o.y.n.ih.a.n3.31@gmail.com"">b.rian.m.o.y.n.ih.a.n3.31@gmail.com</a>
<a href=""mailto:infounitednations1@secretary.net"">infounitednations1@secretary.net</a>
<a href=""mailto:rrt@justonechesed.org"">rrt@justonechesed.org</a>
<a href=""mailto:info@justonechesed.org"">info@justonechesed.org</a>
<a href=""mailto:mw3332192@gmail.com"">mw3332192@gmail.com</a>
<a href=""mailto:m.w.3.332.1.92@gmail.com"">m.w.3.332.1.92@gmail.com</a>
<a href=""mailto:m.w.33321.92@gmail.com"">m.w.33321.92@gmail.com</a>
<a href=""mailto:mw33.3.2192@gmail.com"">mw33.3.2192@gmail.com</a>
<a href=""mailto:m.w333219.2@gmail.com"">m.w333219.2@gmail.com</a>
<a href=""mailto:mw.33.3.21.9.2@gmail.com"">mw.33.3.21.9.2@gmail.com</a>
<a href=""mailto:m.w.3.3.321.9.2@gmail.com"">m.w.3.3.321.9.2@gmail.com</a>
<a href=""mailto:mw.33321.92@gmail.com"">mw.33321.92@gmail.com</a>
<a href=""mailto:mw3.3.3.2.19.2@gmail.com"">mw3.3.3.2.19.2@gmail.com</a>
<a href=""mailto:mw33.321.9.2@gmail.com"">mw33.321.9.2@gmail.com</a>
<a href=""mailto:mw.33.321.9.2@gmail.com"">mw.33.321.9.2@gmail.com</a>
<a href=""mailto:mw3.33.21.92@gmail.com"">mw3.33.21.92@gmail.com</a>
<a href=""mailto:mw3332.1.92@gmail.com"">mw3332.1.92@gmail.com</a>
<a href=""mailto:m.w.33.321.9.2@gmail.com"">m.w.33.321.9.2@gmail.com</a>
<a href=""mailto:m.w.333219.2@gmail.com"">m.w.333219.2@gmail.com</a>
<a href=""mailto:mw.3.3.321.9.2@gmail.com"">mw.3.3.321.9.2@gmail.com</a>
<a href=""mailto:mw.333.2192@gmail.com"">mw.333.2192@gmail.com</a>
<a href=""mailto:mw3.3.3.21.92@gmail.com"">mw3.3.3.21.92@gmail.com</a>
<a href=""mailto:m.w3.3.32192@gmail.com"">m.w3.3.32192@gmail.com</a>
<a href=""mailto:m.w.3332192@gmail.com"">m.w.3332192@gmail.com</a>
<a href=""mailto:m.w.33.3.2.1.92@gmail.com"">m.w.33.3.2.1.92@gmail.com</a>
<a href=""mailto:m.w33.32.192@gmail.com"">m.w33.32.192@gmail.com</a>
<a href=""mailto:m.w3.33.21.92@gmail.com"">m.w3.33.21.92@gmail.com</a>
<a href=""mailto:m.w.3.33.219.2@gmail.com"">m.w.3.33.219.2@gmail.com</a>
<a href=""mailto:m.w.3.3.32.1.92@gmail.com"">m.w.3.3.32.1.92@gmail.com</a>
<a href=""mailto:mw.3332.1.9.2@gmail.com"">mw.3332.1.9.2@gmail.com</a>
<a href=""mailto:m.w.333.21.92@gmail.com"">m.w.333.21.92@gmail.com</a>
<a href=""mailto:m.w.3332.1.9.2@gmail.com"">m.w.3332.1.9.2@gmail.com</a>
<a href=""mailto:m.w333.2.1.9.2@gmail.com"">m.w333.2.1.9.2@gmail.com</a>
<a href=""mailto:m.w33.3.2.1.92@gmail.com"">m.w33.3.2.1.92@gmail.com</a>
<a href=""mailto:m.w3.3321.92@gmail.com"">m.w3.3321.92@gmail.com</a>
<a href=""mailto:mw.33.321.92@gmail.com"">mw.33.321.92@gmail.com</a>
<a href=""mailto:mw333219.2@gmail.com"">mw333219.2@gmail.com</a>
<a href=""mailto:m.w3.3.3.21.9.2@gmail.com"">m.w3.3.3.21.9.2@gmail.com</a>
<a href=""mailto:m.w.3.33.2.1.92@gmail.com"">m.w.3.33.2.1.92@gmail.com</a>
<a href=""mailto:mw3.33.2.19.2@gmail.com"">mw3.33.2.19.2@gmail.com</a>
<a href=""mailto:mw33.32.1.9.2@gmail.com"">mw33.32.1.9.2@gmail.com</a>
<a href=""mailto:mw3.332192@gmail.com"">mw3.332192@gmail.com</a>
<a href=""mailto:mw.3.332.192@gmail.com"">mw.3.332.192@gmail.com</a>
<a href=""mailto:m.w.33.32.192@gmail.com"">m.w.33.32.192@gmail.com</a>
<a href=""mailto:m.w333.21.9.2@gmail.com"">m.w333.21.9.2@gmail.com</a>
<a href=""mailto:mw.333219.2@gmail.com"">mw.333219.2@gmail.com</a>
<a href=""mailto:mw.3.33.2.192@gmail.com"">mw.3.33.2.192@gmail.com</a>
<a href=""mailto:m.w33.3.2.192@gmail.com"">m.w33.3.2.192@gmail.com</a>
<a href=""mailto:mw33.3.2.1.92@gmail.com"">mw33.3.2.1.92@gmail.com</a>
<a href=""mailto:m.w33.32.19.2@gmail.com"">m.w33.32.19.2@gmail.com</a>
<a href=""mailto:m.w.3.3.3219.2@gmail.com"">m.w.3.3.3219.2@gmail.com</a>
<a href=""mailto:mw.333.2.192@gmail.com"">mw.333.2.192@gmail.com</a>
<a href=""mailto:m.w.33.32.1.9.2@gmail.com"">m.w.33.32.1.9.2@gmail.com</a>
<a href=""mailto:mw33.3.2.19.2@gmail.com"">mw33.3.2.19.2@gmail.com</a>
<a href=""mailto:mw.3.3.32.192@gmail.com"">mw.3.3.32.192@gmail.com</a>
<a href=""mailto:mw.3.33.21.92@gmail.com"">mw.3.33.21.92@gmail.com</a>
<a href=""mailto:mw3.3.32.1.92@gmail.com"">mw3.3.32.1.92@gmail.com</a>
<a href=""mailto:m.w3.3321.9.2@gmail.com"">m.w3.3321.9.2@gmail.com</a>
<a href=""mailto:m.w.3.3.3.2.1.92@gmail.com"">m.w.3.3.3.2.1.92@gmail.com</a>
<a href=""mailto:mw.33.32.1.92@gmail.com"">mw.33.32.1.92@gmail.com</a>
<a href=""mailto:mw.3.3.3.2.1.9.2@gmail.com"">mw.3.3.3.2.1.9.2@gmail.com</a>
<a href=""mailto:mw3.3.3219.2@gmail.com"">mw3.3.3219.2@gmail.com</a>
<a href=""mailto:mw.3.33.219.2@gmail.com"">mw.3.33.219.2@gmail.com</a>
<a href=""mailto:mw3332.192@gmail.com"">mw3332.192@gmail.com</a>
<a href=""mailto:m.w333.2.1.92@gmail.com"">m.w333.2.1.92@gmail.com</a>
<a href=""mailto:mw.3.3.32.1.92@gmail.com"">mw.3.3.32.1.92@gmail.com</a>
<a href=""mailto:mw333.21.9.2@gmail.com"">mw333.21.9.2@gmail.com</a>
<a href=""mailto:mw3.3.3.219.2@gmail.com"">mw3.3.3.219.2@gmail.com</a>
<a href=""mailto:m.w.333.2.1.92@gmail.com"">m.w.333.2.1.92@gmail.com</a>
<a href=""mailto:mw3.3321.92@gmail.com"">mw3.3321.92@gmail.com</a>
<a href=""mailto:mw333.219.2@gmail.com"">mw333.219.2@gmail.com</a>
<a href=""mailto:mw.3.33.2.19.2@gmail.com"">mw.3.33.2.19.2@gmail.com</a>
<a href=""mailto:m.w.33.32192@gmail.com"">m.w.33.32192@gmail.com</a>
<a href=""mailto:mw33.3.21.9.2@gmail.com"">mw33.3.21.9.2@gmail.com</a>
<a href=""mailto:mw.3.3.3.2.19.2@gmail.com"">mw.3.3.3.2.19.2@gmail.com</a>
<a href=""mailto:m.w3.3.32.192@gmail.com"">m.w3.3.32.192@gmail.com</a>
<a href=""mailto:m.w.33.3.2.19.2@gmail.com"">m.w.33.3.2.19.2@gmail.com</a>
<a href=""mailto:m.w3332.1.92@gmail.com"">m.w3332.1.92@gmail.com</a>
<a href=""mailto:mw3.33.219.2@gmail.com"">mw3.33.219.2@gmail.com</a>
<a href=""mailto:m.w.3.332.19.2@gmail.com"">m.w.3.332.19.2@gmail.com</a>
<a href=""mailto:mw3.3.3.21.9.2@gmail.com"">mw3.3.3.21.9.2@gmail.com</a>
<a href=""mailto:m.w.3.3.3.219.2@gmail.com"">m.w.3.3.3.219.2@gmail.com</a>
<a href=""mailto:m.w.3.3.3.21.92@gmail.com"">m.w.3.3.3.21.92@gmail.com</a>
<a href=""mailto:mw3.33.21.9.2@gmail.com"">mw3.33.21.9.2@gmail.com</a>
<a href=""mailto:mw.33.3.2.192@gmail.com"">mw.33.3.2.192@gmail.com</a>
<a href=""mailto:m.w333.21.92@gmail.com"">m.w333.21.92@gmail.com</a>
<a href=""mailto:mw.33.3.219.2@gmail.com"">mw.33.3.219.2@gmail.com</a>
<a href=""mailto:m.w.333.21.9.2@gmail.com"">m.w.333.21.9.2@gmail.com</a>
<a href=""mailto:mw.3.3.32.19.2@gmail.com"">mw.3.3.32.19.2@gmail.com</a>
<a href=""mailto:m.w.3.332.1.9.2@gmail.com"">m.w.3.332.1.9.2@gmail.com</a>
<a href=""mailto:mw.3.3321.92@gmail.com"">mw.3.3321.92@gmail.com</a>
<a href=""mailto:mw.3.3.3.2.192@gmail.com"">mw.3.3.3.2.192@gmail.com</a>
<a href=""mailto:mw.3.3321.9.2@gmail.com"">mw.3.3321.9.2@gmail.com</a>
<a href=""mailto:mw.3.33219.2@gmail.com"">mw.3.33219.2@gmail.com</a>
<a href=""mailto:m.w3.3.3.2.192@gmail.com"">m.w3.3.3.2.192@gmail.com</a>
<a href=""mailto:m.w.3332.1.92@gmail.com"">m.w.3332.1.92@gmail.com</a>
<a href=""mailto:mw3332192@gmail.com"">mw3332192@gmail.com</a>
<a href=""mailto:m.w3.3.32.19.2@gmail.com"">m.w3.3.32.19.2@gmail.com</a>
<a href=""mailto:mw.33.3.2.1.92@gmail.com"">mw.33.3.2.1.92@gmail.com</a>
<a href=""mailto:m.w33.3.2.19.2@gmail.com"">m.w33.3.2.19.2@gmail.com</a>
<a href=""mailto:mw33.32.1.92@gmail.com"">mw33.32.1.92@gmail.com</a>
<a href=""mailto:mw.33.3.2.19.2@gmail.com"">mw.33.3.2.19.2@gmail.com</a>
<a href=""mailto:mw.3.3.3.21.9.2@gmail.com"">mw.3.3.3.21.9.2@gmail.com</a>
<a href=""mailto:m.w3.3.3.2192@gmail.com"">m.w3.3.3.2192@gmail.com</a>
<a href=""mailto:m.w33.3.21.92@gmail.com"">m.w33.3.21.92@gmail.com</a>
<a href=""mailto:m.w33.32.1.92@gmail.com"">m.w33.32.1.92@gmail.com</a>
<a href=""mailto:m.w.333.2192@gmail.com"">m.w.333.2192@gmail.com</a>
<a href=""mailto:m.w.33321.9.2@gmail.com"">m.w.33321.9.2@gmail.com</a>
<a href=""mailto:m.w333.2.19.2@gmail.com"">m.w333.2.19.2@gmail.com</a>
<a href=""mailto:m.w.33.3.2192@gmail.com"">m.w.33.3.2192@gmail.com</a>
<a href=""mailto:mw.33.32.1.9.2@gmail.com"">mw.33.32.1.9.2@gmail.com</a>
<a href=""mailto:mw3.3.3.2.1.92@gmail.com"">mw3.3.3.2.1.92@gmail.com</a>
<a href=""mailto:mw3.332.1.92@gmail.com"">mw3.332.1.92@gmail.com</a>
<a href=""mailto:m.w.3.3.32.192@gmail.com"">m.w.3.3.32.192@gmail.com</a>
<a href=""mailto:mw.3.3.3.21.92@gmail.com"">mw.3.3.3.21.92@gmail.com</a>
<a href=""mailto:m.w.333.2.19.2@gmail.com"">m.w.333.2.19.2@gmail.com</a>
<a href=""mailto:mw.33.3.21.92@gmail.com"">mw.33.3.21.92@gmail.com</a>
<a href=""mailto:m.w3.33219.2@gmail.com"">m.w3.33219.2@gmail.com</a>
<a href=""mailto:m.w.3.33.2192@gmail.com"">m.w.3.33.2192@gmail.com</a>
<a href=""mailto:mw333.2192@gmail.com"">mw333.2192@gmail.com</a>
<a href=""mailto:mw3.3.32.192@gmail.com"">mw3.3.32.192@gmail.com</a>
<a href=""mailto:mw.3332.19.2@gmail.com"">mw.3332.19.2@gmail.com</a>
<a href=""mailto:m.w33.321.9.2@gmail.com"">m.w33.321.9.2@gmail.com</a>
<a href=""mailto:mw33.32.192@gmail.com"">mw33.32.192@gmail.com</a>
<a href=""mailto:mw33.32.19.2@gmail.com"">mw33.32.19.2@gmail.com</a>
<a href=""mailto:mw.3.33.2.1.92@gmail.com"">mw.3.33.2.1.92@gmail.com</a>
<a href=""mailto:m.w.33.32.19.2@gmail.com"">m.w.33.32.19.2@gmail.com</a>
<a href=""mailto:mw33.3.21.92@gmail.com"">mw33.3.21.92@gmail.com</a>
<a href=""mailto:m.w.3.33.2.1.9.2@gmail.com"">m.w.3.33.2.1.9.2@gmail.com</a>
<a href=""mailto:m.w.333.2.1.9.2@gmail.com"">m.w.333.2.1.9.2@gmail.com</a>
<a href=""mailto:m.w.3.3.321.92@gmail.com"">m.w.3.3.321.92@gmail.com</a>
<a href=""mailto:m.w.3.3.3.21.9.2@gmail.com"">m.w.3.3.3.21.9.2@gmail.com</a>
<a href=""mailto:mw3.3.32.19.2@gmail.com"">mw3.3.32.19.2@gmail.com</a>
<a href=""mailto:m.w33321.9.2@gmail.com"">m.w33321.9.2@gmail.com</a>
<a href=""mailto:m.w3.3.3.2.1.92@gmail.com"">m.w3.3.3.2.1.92@gmail.com</a>
<a href=""mailto:m.w.3.33.2.19.2@gmail.com"">m.w.3.33.2.19.2@gmail.com</a>
<a href=""mailto:mw.33.32192@gmail.com"">mw.33.32192@gmail.com</a>
<a href=""mailto:mw.3.3.32.1.9.2@gmail.com"">mw.3.3.32.1.9.2@gmail.com</a>
<a href=""mailto:mw3.3.32192@gmail.com"">mw3.3.32192@gmail.com</a>
<a href=""mailto:m.w3.3.321.92@gmail.com"">m.w3.3.321.92@gmail.com</a>
<a href=""mailto:m.w.3332.19.2@gmail.com"">m.w.3332.19.2@gmail.com</a>
<a href=""mailto:mw33.32192@gmail.com"">mw33.32192@gmail.com</a>
<a href=""mailto:m.w.33.32.1.92@gmail.com"">m.w.33.32.1.92@gmail.com</a>
<a href=""mailto:mw3.3.32.1.9.2@gmail.com"">mw3.3.32.1.9.2@gmail.com</a>
<a href=""mailto:mw.3.332192@gmail.com"">mw.3.332192@gmail.com</a>
<a href=""mailto:m.w3.3.3.2.1.9.2@gmail.com"">m.w3.3.3.2.1.9.2@gmail.com</a>
<a href=""mailto:mw333.21.92@gmail.com"">mw333.21.92@gmail.com</a>
<a href=""mailto:m.w3332.1.9.2@gmail.com"">m.w3332.1.9.2@gmail.com</a>
<a href=""mailto:mw3.3.3.2.192@gmail.com"">mw3.3.3.2.192@gmail.com</a>
<a href=""mailto:m.w.3.3.32.1.9.2@gmail.com"">m.w.3.3.32.1.9.2@gmail.com</a>
<a href=""mailto:m.w33.3.2.1.9.2@gmail.com"">m.w33.3.2.1.9.2@gmail.com</a>
<a href=""mailto:m.w3332192@gmail.com"">m.w3332192@gmail.com</a>
<a href=""mailto:mw.3.332.19.2@gmail.com"">mw.3.332.19.2@gmail.com</a>
<a href=""mailto:m.w3.33.21.9.2@gmail.com"">m.w3.33.21.9.2@gmail.com</a>
<a href=""mailto:mw.3.33.21.9.2@gmail.com"">mw.3.33.21.9.2@gmail.com</a>
<a href=""mailto:mw3.3.3.2192@gmail.com"">mw3.3.3.2192@gmail.com</a>
<a href=""mailto:m.w333.2.192@gmail.com"">m.w333.2.192@gmail.com</a>
<a href=""mailto:m.w.3.3.32.19.2@gmail.com"">m.w.3.3.32.19.2@gmail.com</a>
<a href=""mailto:mw3.33.2.192@gmail.com"">mw3.33.2.192@gmail.com</a>
<a href=""mailto:m.w3.332192@gmail.com"">m.w3.332192@gmail.com</a>
<a href=""mailto:m.w33.3.219.2@gmail.com"">m.w33.3.219.2@gmail.com</a>
<a href=""mailto:m.w.3.33219.2@gmail.com"">m.w.3.33219.2@gmail.com</a>
<a href=""mailto:m.w3.3.3.21.92@gmail.com"">m.w3.3.3.21.92@gmail.com</a>
<a href=""mailto:mw3.3.3.2.1.9.2@gmail.com"">mw3.3.3.2.1.9.2@gmail.com</a>
<a href=""mailto:m.w3.3.32.1.9.2@gmail.com"">m.w3.3.32.1.9.2@gmail.com</a>
<a href=""mailto:m.w.3.33.21.92@gmail.com"">m.w.3.33.21.92@gmail.com</a>
<a href=""mailto:mw33.3.2.1.9.2@gmail.com"">mw33.3.2.1.9.2@gmail.com</a>
<a href=""mailto:mw.333.2.19.2@gmail.com"">mw.333.2.19.2@gmail.com</a>
<a href=""mailto:m.w3.3.3219.2@gmail.com"">m.w3.3.3219.2@gmail.com</a>
<a href=""mailto:m.w.33.3.21.9.2@gmail.com"">m.w.33.3.21.9.2@gmail.com</a>
<a href=""mailto:m.w33.3.2192@gmail.com"">m.w33.3.2192@gmail.com</a>
<a href=""mailto:m.w3.332.1.9.2@gmail.com"">m.w3.332.1.9.2@gmail.com</a>
<a href=""mailto:m.w3332.19.2@gmail.com"">m.w3332.19.2@gmail.com</a>
<a href=""mailto:m.w.3.33.2.192@gmail.com"">m.w.3.33.2.192@gmail.com</a>
<a href=""mailto:m.w.3.3.3.2192@gmail.com"">m.w.3.3.3.2192@gmail.com</a>
<a href=""mailto:mw3.332.1.9.2@gmail.com"">mw3.332.1.9.2@gmail.com</a>
<a href=""mailto:m.w.33.3.2.1.9.2@gmail.com"">m.w.33.3.2.1.9.2@gmail.com</a>
<a href=""mailto:m.w33.32192@gmail.com"">m.w33.32192@gmail.com</a>
<a href=""mailto:m.w3.33.2192@gmail.com"">m.w3.33.2192@gmail.com</a>
<a href=""mailto:mw33.321.92@gmail.com"">mw33.321.92@gmail.com</a>
<a href=""mailto:mw3.3.321.9.2@gmail.com"">mw3.3.321.9.2@gmail.com</a>
<a href=""mailto:mw33321.92@gmail.com"">mw33321.92@gmail.com</a>
<a href=""mailto:m.w.3.3.3.2.1.9.2@gmail.com"">m.w.3.3.3.2.1.9.2@gmail.com</a>
<a href=""mailto:mw3332.19.2@gmail.com"">mw3332.19.2@gmail.com</a>
<a href=""mailto:mw.3332192@gmail.com"">mw.3332192@gmail.com</a>
<a href=""mailto:mw3.33.2.1.92@gmail.com"">mw3.33.2.1.92@gmail.com</a>
<a href=""mailto:m.w333.219.2@gmail.com"">m.w333.219.2@gmail.com</a>
<a href=""mailto:m.w3.332.192@gmail.com"">m.w3.332.192@gmail.com</a>
<a href=""mailto:mw.3.332.1.92@gmail.com"">mw.3.332.1.92@gmail.com</a>
<a href=""mailto:m.w3.33.2.192@gmail.com"">m.w3.33.2.192@gmail.com</a>
<a href=""mailto:mw.3.33.2192@gmail.com"">mw.3.33.2192@gmail.com</a>
<a href=""mailto:m.w33321.92@gmail.com"">m.w33321.92@gmail.com</a>
<a href=""mailto:mw33.3.2.192@gmail.com"">mw33.3.2.192@gmail.com</a>
<a href=""mailto:mw.3.3.3.219.2@gmail.com"">mw.3.3.3.219.2@gmail.com</a>
<a href=""mailto:mw333.2.192@gmail.com"">mw333.2.192@gmail.com</a>
<a href=""mailto:m.w333.2192@gmail.com"">m.w333.2192@gmail.com</a>
<a href=""mailto:m.w3.332.1.92@gmail.com"">m.w3.332.1.92@gmail.com</a>
<a href=""mailto:m.w.3.3.3.2.19.2@gmail.com"">m.w.3.3.3.2.19.2@gmail.com</a>
<a href=""mailto:mw.333.219.2@gmail.com"">mw.333.219.2@gmail.com</a>
<a href=""mailto:m.w.3.3.3.2.192@gmail.com"">m.w.3.3.3.2.192@gmail.com</a>
<a href=""mailto:m.w33.321.92@gmail.com"">m.w33.321.92@gmail.com</a>
<a href=""mailto:mw.33.3219.2@gmail.com"">mw.33.3219.2@gmail.com</a>
<a href=""mailto:m.w.3.3321.9.2@gmail.com"">m.w.3.3321.9.2@gmail.com</a>
<a href=""mailto:mw3.3321.9.2@gmail.com"">mw3.3321.9.2@gmail.com</a>
<a href=""mailto:mw.333.21.92@gmail.com"">mw.333.21.92@gmail.com</a>"
AcAZS2fX,# Tk_Struct_Mandelbrot.py,here2share,Python,Tuesday 14th of November 2023 12:58:22 AM CDT,"# Tk_Struct_Mandelbrot.py

from tkinter import *
from functools import lru_cache
from PIL import Image, ImageTk
import struct

ww = 200
hh = 200

root = Tk()
root.title(""Tk_Struct_Mandelbrot"")
root.geometry('{}x{}'.format(ww * 2, hh))

canvas_main = Canvas(root, width=ww, height=hh)
canvas_main.pack(side=LEFT, fill=""both"", expand=True)

canvas_debug = Canvas(root, width=ww, height=hh, bg='white')
canvas_debug.pack(side=LEFT, fill=""both"", expand=True)

zoom_factor = 1.5

xRange = 1.0
yRange = 1.0
xOffset = 0
yOffset = 0
cx = ww // 2
cy = hh // 2
dx = dy = 0

precision = 400

def cache_mandelbrot(x0, y0):
    struct_key = struct.pack('dd', x0, y0)
    if struct_key in cache_mandelbrot.cache:
        return cache_mandelbrot.cache[struct_key]

    x = 0.0
    y = 0.0
    k = 4000
    for i in range(precision + 1):
        x_new = x * x - y * y + x0
        y = 2 * x * y + y0
        x = x_new
        if x * x + y * y > 10:
            k = 12
            break
    j = (x * x + y * y) ** 0.5
    j = int(i * (i * 10) + j * k) % Lr
    result = rainbow[j]

    cache_mandelbrot.cache[struct_key] = result

    return result

cache_mandelbrot.cache = {}

def rgb2hex(rgb):
    r, g, b = rgb
    return ""#{:02x}{:02x}{:02x}"".format(r, g, b)

rainbow = []
def z(r, g, b):
    rainbow.append((r, g, b))

r, g, b = 255, 0, 0
for g in range(256):
    z(r, g, b)
for r in range(254, -1, -1):
    z(r, g, b)
for b in range(256):
    z(r, g, b)
for g in range(254, -1, -1):
    z(r, g, b)
for r in range(256):
    z(r, g, b)
for b in range(254, -1, -1):
    z(r, g, b)
Lr = len(rainbow) - 1

img = Image.new('RGB', (ww, hh))
pixels = img.load()

def calculate_mandelbrot(xRange, yRange):
    canvas_debug.create_text(10, 20, anchor=NW, text=""Processing, Please Wait..."")
    canvas_debug.update()
    canvas_main.delete(""all"")
    for row in range(hh):
        for col in range(ww):
            x0 = ((row - 50 - cx + dx + xOffset * xRange) * 3 / ww) / xRange
            y0 = ((col - cy + dy + yOffset * yRange) * 2.5 / hh) / yRange
            pixels[col, row] = cache_mandelbrot(x0, y0)
    canvas_main.image = ImageTk.PhotoImage(img)
    canvas_main.create_image(0, 0, anchor=NW, image=canvas_main.image)
    update_debug_canvas()

def update_debug_canvas():
	canvas_debug.delete(""all"")
	canvas_debug.create_text(10, 50, anchor=NW, text=f""x offset: {xOffset*-1}"")
	canvas_debug.create_text(10, 70, anchor=NW, text=f""y offset: {yOffset*-1}"")
	canvas_debug.create_text(10, 90, anchor=NW, text=f""zoom_factor: {xRange}"")

def on_mouse_down(event):
	global drag_data
	drag_data = {'x': event.x, 'y': event.y}
def on_mouse_move(event):
	global dx, dy
	dx = (event.x - drag_data['x'])
	dy = (event.y - drag_data['y'])
	canvas_main.coords(""all"", dx, dy)
	update_debug_canvas()
def on_mouse_up(event):
	global xOffset, yOffset, dx, dy
	dx /= yRange
	dy /= xRange
	xOffset -= dy
	yOffset -= dx
	dx = dy = 0
	calculate_mandelbrot(xRange, yRange)

def on_key_up(event):
	global xRange, yRange
	xRange, yRange = (xRange * zoom_factor, yRange * zoom_factor)
	calculate_mandelbrot(xRange, yRange)
def on_key_down(event):
	global xRange, yRange
	xRange, yRange = (xRange / zoom_factor, yRange / zoom_factor)
	calculate_mandelbrot(xRange, yRange)

canvas_main.bind('<Button-1>', on_mouse_down)
canvas_main.bind('<B1-Motion>', on_mouse_move)
canvas_main.bind('<ButtonRelease-1>', on_mouse_up)
root.bind('<Down>', on_key_down)
root.bind('<Up>', on_key_up)

calculate_mandelbrot(xRange, yRange)

root.mainloop()"
pxK28LXt,Untitled,BayangBec,JSON,Tuesday 14th of November 2023 12:55:22 AM CDT,"select * from epustaka_catalogs ec where id in ('29071187-7d86-49b6-bcdc-6f8ec44a2f0e',
'4571b703-d344-496f-ac37-458b000f6071',
'520f2470-e6e1-4c33-9edb-474fd0b38e9d',
'eb6dbb1f-df20-438d-80b1-14c3e75d53ec',
'c8ccec01-32a9-4e98-9d9b-0f652a2898c3',
'bd1f901d-bd92-488c-862e-54b06038c84d',
'2b0b0fcb-fa4b-4844-b756-b6b90d3daab5',
'f6dd7280-ff06-460e-a23e-ad4e4daa8400',
'ece01fca-73c6-4ab9-903c-8cfb4e036e6a',
'd9c93d1f-1f4e-4150-9129-9b2a66a67fd5',
'59aa2dde-0cf9-48f1-9515-8645c7f47eaf',
'bc9f51c9-3a3f-48f6-ba5b-a0929394eb5f',
'dda31a64-f18d-4528-96d8-d03ad0045aeb',
'fb5220e4-a1c3-4929-ae9e-87a6fa0e5aeb',
'430d78bf-d740-4aa5-9b3e-448ef8d764fe',
'97822757-8abc-4073-a157-cc3f7a753497',
'd7b8e78e-5929-48fd-893c-4c2d128094b4',
'616392d9-f14d-4c49-b568-99003aa39988',
'd38d89c1-7e3f-4dcd-bf24-83ed3ba962b3',
'87c19068-c387-416f-b47a-0a2cf880ea2d',
'13a2793c-0770-4cae-8262-92b8b38929d9',
'3228dbc2-7370-4cbf-8d16-a15078c87adb',
'6c09c10f-8b53-4d52-8b98-f4ba69250674',
'90212f86-cac1-45cb-80e8-d79a7fee4937',
'7d399bc7-db5a-4ca9-99dc-fa2590612806',
'1e1ce2cf-d108-4898-bd45-b08e9ea1639e',
'540acc0c-7009-4963-a48c-7801b9481238',
'd8034e5c-9b11-4aa9-904b-82fb6936a770',
'5ceefb83-9596-48af-8f31-8be0886faa72',
'64c00a7b-ab87-4913-bada-fdbcbd8e92e0',
'506e6f16-0356-4633-bd44-f55904b30e54',
'07f7eb2b-c316-469d-bc80-9f1cd6a49782',
'77b06079-8e71-4721-8610-f3144b7bce7a',
'e31ba2c2-c0ac-457c-98a9-22aa0ba5a6cf',
'1369684d-452d-4380-9911-294e9b419dfb',
'266b2421-7df8-460f-8368-c98164f452b6',
'9e4d6f68-5a6b-4826-8e53-b0d92694dae8',
'ae86a280-aba1-4c9d-85f5-60affbee8e2b',
'5e3fdc19-87fe-4637-b72d-c1a2bc385cbc',
'81fc7c52-5868-45e2-ab04-1bb3042b7fde',
'972a171b-4041-454c-b9f1-3e96f38c5ccf',
'fbd1dfc0-40de-4b69-b124-36f8187491b8',
'dbd8373b-6f2e-4366-8442-8e6b13e6e306',
'3be7d071-7be7-44a1-b6d4-0b2fcfce8941',
'1fdcb178-56f9-482b-9965-28183b5c3a8e',
'2407ee5c-3d1d-40f2-aede-230cb7d88340',
'f32b1365-6af1-433d-b2b1-b039e5ec3a8d',
'af7d8e0d-923a-4e1e-9f32-cd44ea572059',
'82a0a6f7-e640-439b-8ca7-785c42c89586',
'30ddd790-75a2-4b8c-982d-a7edd5044bd2',
'33922681-1418-4e86-8650-b1d23053d77a',
'774561e9-030c-44a7-aabb-5c59bdf20293',
'59f39d12-8f83-499c-9d4c-92d93decb255',
'7fc15947-7771-4627-87c3-ed4c262d7afb',
'052162d4-e6e1-44e2-8b0a-f15a4abe692b',
'e12a5180-8604-4b33-ad0c-8f4bf3aa35c0',
'f5ace9ad-2e4a-4097-9b41-0b02c5545638',
'2e061fa8-5108-4549-8d31-edd6da949c90',
'92a1dcd3-ec1f-4038-a3ed-479c5c145332',
'80a4180e-2a52-4d6e-bb32-4bef68807881',
'37c1e5f8-a04c-424f-b22c-579d6e22e2f7',
'63744ca7-856e-4940-9681-03ed296beeae',
'92f2b5bb-0132-416e-8d74-5e32d7574829',
'6b8132de-e781-49ea-94cb-46eeb2b63207',
'efaa77bc-d52b-4d72-8e0d-1ed0afaa6be2',
'e0f83c3f-d8cc-45e4-805b-db8dc3b55443',
'66128226-e9f2-4eae-9181-7ab9bd896537',
'8657991d-d995-429a-acc2-d5e35ca2c8d0',
'21f2cd3b-b761-400e-a788-5e64084d1012',
'71db4688-ffbb-4b61-a322-39049a59d312',
'15d114df-9d86-42ef-91ad-30bec3ba9a75',
'65f46118-e3a5-4279-819d-dc9c761fd07a',
'e4732493-2dc9-44cf-ae30-1f7860e09e07',
'bd8e86c5-30f0-4e0c-974d-c1139ac83ed5',
'768afdf5-dd7a-4ad8-83e1-74fad51e32a8',
'ec97d0b6-164c-4a3c-a0f7-31aa2124b481',
'44d07690-f801-43ea-aa63-454608d97c4d',
'1dd922ef-b8f5-4c49-a34c-9be4396daea0',
'f2a6106d-ade0-4a1a-936d-08e7033dd900',
'5b1aa1fc-0bf2-409a-89a0-283a139a6733',
'7f6f5d73-92c5-40b2-9dac-d961dbdf74e8',
'a8576fd0-e6e4-4c9d-a1eb-39bfcc94f7cd',
'ac8d79ad-8e4d-416a-a157-23d18fa67b7a',
'f9e205aa-93b1-4610-a88e-913097137a23',
'974defaf-5be2-4dc0-8fd2-7f9f67e5bc3d',
'46c9e1b6-ae36-4e0c-b6dc-50db7f24b928',
'cf88c960-f2e4-4318-9a19-2344e4d07edc',
'a9f59202-a707-4249-bbcb-6ad4e4942b0f',
'f5faafc2-4f06-4776-9db9-1686eb1807d8',
'5a2989b3-d733-4875-b103-3cb7a31e3188',
'2ac81263-6f23-46a7-8068-b25cff72ba3f',
'30b68037-e1c6-499b-b907-103e6d98eb90',
'cc0be6e3-98be-436e-a06a-9f3530d9ad09',
'dc9d29ef-190d-4018-b2de-08529d80f520',
'b9605d9e-351c-44eb-b98a-651ec1199dd6',
'044fe9f4-a2dc-4fc4-8789-56e070d668ce',
'f2a35d3e-b771-4401-b463-94846767c28c',
'6b412b15-329f-4d34-9cb7-cb6dc5a51ca3',
'de121f52-06e7-47b1-b9bd-ddbe97a1704e',
'98bdaa4e-6fa5-4e8c-8444-bbbb0f42e273',
'43386cf1-c914-43c3-844a-3fb0de872224',
'eb359676-ef85-422d-a12e-15065f7f24fc',
'b5722a14-af22-4738-a847-2aeb79fafaf5',
'ef8adad7-6c09-4e15-9df7-550f99fa1368',
'c113eeea-78b8-4ef8-b9e8-8708bd94f006',
'68c11f35-9fc9-4ea2-8fd4-ebb0dc286da1',
'ad39ff6c-08d3-4cd7-9d3e-426d0b94de53',
'412e2b68-9aea-4aac-a9d7-588977fbb6ee',
'8feb6cc6-4e4c-476f-bd6e-e91363b53744',
'4bc22fad-1043-4d70-98fe-5c7b4b5fb5a6',
'e6f7b7af-4af6-4285-a382-d5e412dd573d',
'138c280d-2b32-4810-b17b-b9d9793b23c0',
'2a5668d3-ec41-4e25-9c73-6cd8310c4992',
'2714171c-9201-4573-a96f-c8549ab03bb0',
'fc5c74e5-5752-4bd4-8d25-c8330ea6e9d0',
'63f94543-849f-4597-9204-6434825eac3e',
'ee35d8c6-4918-464d-b1f0-65df6a0eb852',
'6f978be0-2437-4402-a0d8-572a192781bc',
'df3fa2d5-8c08-4da5-8a91-3d2cd336197b',
'3ee6345b-d14d-46b7-8327-806082c3dd66',
'a0d2edd9-182f-4696-8001-b05328600587',
'd0050493-e678-4116-a82c-cd956445a983',
'eb7827e4-ffc2-4669-a11c-623a14ce10c0',
'46013ca1-df1e-4ec0-9dc9-750711ca952c',
'01102705-d94c-49d8-a59f-bc9f31a748d6',
'c37801a9-69b4-4368-bea8-a91b79936318',
'50d3f228-6008-47ce-9eb4-7433580a2763',
'754a8a7d-0bad-407f-b562-15aef29bc18b',
'170a362e-a583-4d24-80e8-ab5b459e7ac1',
'76b5be80-d474-4d73-93b3-b30376c6aebd',
'e4e5bf44-1f0a-4a51-bb7e-5e9ddd45d522',
'216fce5b-d322-4850-a6a8-d604587b4960',
'c7e3d624-4228-4a31-a03f-f1a269beb4e3',
'b35a5792-3af5-4ce3-9054-4676db01bd58',
'694c5461-d440-47e6-b7d3-4ac4c97664eb',
'f1cd35d5-be9a-4372-86d2-31ee7d089f7f',
'4d19f2b1-a233-4859-b2c6-d208a9bc5e88',
'7d93108a-388c-4213-bcb6-05533fb7ac2d',
'4d14146f-4503-4bc3-8079-d55fa184cf93',
'88e90465-e2b4-48aa-a1bf-db921a99b1bb',
'589e71f6-6b5b-4b22-a22f-2c4910e07439',
'42c1a6fa-340a-413b-bc8d-44c4655f7f6c',
'4d069351-db51-499a-98b7-074aea758c17',
'995110fa-7f00-4599-9d64-d9c793911966',
'6294fffe-596d-4483-9975-73a7b42884b5',
'72c50190-3956-4a55-85de-074a9d430188',
'fd9bde3f-ee1d-4346-a98a-d2e7d421ea0b',
'8f2fde60-34e4-4238-9373-f1eed19da993',
'ba602599-eb69-4a7d-9662-c8a73e96104a',
'04ab956d-4cf6-4431-a18a-e60c37ecf3a2',
'cde40e3c-b29a-4608-a76d-da499d275933',
'520c8843-3c7e-43ff-a244-6d96c945bc60',
'6f376d60-e33d-462e-95f4-4b878356a44a',
'b3493278-ab20-4bf9-b350-a6204e614f66',
'3184a080-7842-4de2-a0b1-e08e82e0ef27',
'b2d6cb44-fa7e-42c6-a1ad-bfa9f0698e56',
'87fa19b8-e22e-474d-a4ac-fb5e3db72ae2',
'0d010adb-d3f4-4542-9923-a662b02362b5',
'5ff4e035-88dc-4cf3-b051-779164a82c25',
'c32f14ef-b6f1-4e1f-9787-4886982dfb08',
'38f07d9a-0966-4328-ac63-dd02ec87daf8',
'b525fb06-a7fa-411a-be4a-0da2c1df7cf6',
'119faaea-7879-4164-99d4-8b5c1efd9c08',
'7b97d1ec-e369-423e-9b42-aa30eeea461d',
'870f42fa-4c57-4f7c-9a5b-d724dec310d7',
'1c89837f-108d-4507-9b3b-e93fda0dd7ff',
'ac4357b4-c623-485b-90ec-a0fa8335a6df',
'375d6873-9939-46f9-8b14-e7e484683a03',
'0d205b6e-4663-40f6-a7cc-05a79401e955',
'52c313bb-4bb1-4e43-97c9-a1e3aec5a95f',
'145469d0-02d6-48a9-9984-8e1501f12107',
'04ee2d59-972c-4d37-b33e-3b03eeb2f3c4',
'de93eca4-6a9b-4fe8-8977-460ac8f0c46c',
'46aec3d5-47ed-4b94-92c6-e2a1cae73f7d',
'80fc2c23-4303-4fbd-a4df-d26130c8ec1b',
'868eb943-6e96-4f1c-b206-d6d379bd5930',
'69caa5b4-5c2b-4362-bdb9-3eb6d014e510',
'ea8ce5aa-8950-40ec-99d0-5721a1128871',
'2fc8c38d-c5af-412f-8202-7306b9773a5e',
'16b062c8-049a-4726-9f25-eba2f3db29e2',
'4acbde0a-ebf0-442b-b5b5-e3f48403b6e1',
'7d8ae3a2-78dd-4965-a059-33157ec14e59',
'cc02608f-d012-4cd0-b669-c7b61b126000',
'a70e7c78-cc86-4db2-a435-0383afa9d331',
'fb503709-9f30-4cde-9b80-0aaba5fbb071',
'a860a6a3-1589-43c8-9d3c-709b45875495',
'5a4dba47-a9dc-43d6-b095-44e213faf98c',
'c2fb6ab9-aea6-415f-ba1c-d98d438b568e',
'301a485e-591d-42d5-a4a4-f7fa03850864',
'6dd629b0-6e29-4a6f-b479-6066965a8db5',
'09f76ee2-6645-4d9e-83b2-7d1b3b0a5c7f',
'f5e9377b-b485-4513-83f6-8edd17f3f744',
'40658e51-6b6c-4024-a970-69aa8cabf285',
'f6ed21f4-423a-4a0d-a55b-b73a4e62e5bf',
'91b69f46-302a-4305-a279-8c18d3bb84c2',
'cf4227c9-0f3b-45c6-8d1d-1eea31d03c58',
'2945b26b-a47f-4a90-9017-33e7e1e4c015',
'799a07c7-21a8-4784-a58d-f8b298f13bde',
'35339a7e-fecd-4294-b765-51153c8fd1c8',
'9afffd9e-d512-4260-91c0-b9005af6f7a9',
'9bba6ebb-d0be-441b-8f9f-f6275bc29902',
'0461e1ef-2e35-4d8e-aab4-03fa279bad26',
'9c055eeb-c165-4af7-9418-9175d77a7190',
'49ede8f0-0521-4337-ada3-b80228ce7dcb',
'8556fb9d-191a-45ae-a62b-46cc9b56f5c6',
'98f5d54f-2d30-42c8-b909-9cc5b2f01d20',
'939a5496-ee23-42ae-8750-bbecd443c4f8',
'f992e4cf-f81b-4b23-8650-dfc8d3587f9e',
'fb7774e0-ffcb-42e5-9486-33ae4790a13f',
'82d14a72-8dcd-49af-9d82-43ca2092f087',
'a2e50d4d-2ed4-41d0-8e08-065501c0b80e',
'b3e2052a-82f9-47a8-aecc-576900d5d88e',
'a13c6580-7e67-4ccf-ba70-bf0b84e21272',
'd99400c3-f107-40f5-930c-c271265b721e',
'ce303ee5-58a1-4357-843c-752f512ca7d4',
'5e4f6c37-c44b-44ed-b9de-045babea081a',
'60b20fb4-3248-495b-898a-6722569a82ad',
'3146ee32-619c-46c6-a369-ca29a3c19e6a',
'e40770d0-a008-45ea-b0d6-db5fc8fc4419',
'8c807600-cbf8-4970-88d9-55d0b68b65ad',
'0516ed7d-cfd8-4998-afe5-974340f0be01',
'858dd2b0-c67c-4226-a8af-aabfa6090335',
'66c4b365-1e95-4332-8eba-17a9f9f5e257',
'dfb9d1ae-2622-4c46-9dde-0c5fe6be95a6',
'11abc4f8-d752-40fd-b76c-6c6854558180',
'6623e782-9b2b-41a4-a423-8ffbe56b4d9e',
'1e81f22d-7ba4-4f8d-ae4a-d62b16901052',
'dd0277e7-2560-4cbc-b892-07d0a50d341a',
'671a973b-d0fa-405a-845f-92b79712e188',
'8ebe0d56-7751-4c7c-b14e-9d489f3141a9',
'18acfb00-d5ba-4e21-ad44-19397fe33000',
'beec77bf-6c54-456a-96e2-cf98740fe252',
'c64c61d3-4caf-41c5-b271-13ce383564e8',
'de6a404f-dae9-43d0-8e75-d664dc327083',
'bcab02db-4734-4027-862a-c3c0a427cbe2',
'5b24cec7-92bd-4c8b-b9d4-fa6301124410',
'4aa00c06-9c1d-4150-9ba1-9722b6f3c8b6',
'473bbaab-a608-4ef5-a5be-304433516941',
'f208e50e-d706-403e-8658-0fb3958a9f24',
'14552f10-f436-4fd6-814e-8b12e8db6200',
'21ade159-19d3-49c9-b869-92df71343571',
'b5eb1ca4-964e-4e79-b86c-27c5c2107851',
'7c47a801-071d-4974-9658-269d1097bb21',
'923ac1f0-535b-402a-a511-5dda1622b9ee',
'6d2c41e4-554b-423b-888e-b2f9044f9fb4',
'dda7700c-a33f-4395-8039-93f892887968',
'985a76bb-90e0-4ee3-ac81-6d25170664c9',
'f47785be-50e1-4b71-ac4d-433ec11391d2',
'31ccd4b7-aff1-42bd-a2dc-c53a2ee4f373',
'd73dc802-cee7-425f-a458-261b7512f209',
'2e4ea451-c06e-45df-a7c2-03ca5763646a',
'b2ba7311-bab4-4c6e-8982-e3fd7f86033f',
'ecbf0302-2e10-4760-8739-e16ed00be8be',
'b1ad68da-5240-4412-8eda-d30e422a1187',
'05bcee5a-fa9d-45e5-a4cc-420b81bdd704',
'09983927-7174-4eef-a981-235cd2330e33',
'e2cbd421-c777-4014-9b75-d4b4b016ab2b',
'272b1a7a-6b6c-424f-b9c8-edfcb0121a9d',
'00f48761-32f5-43c5-a5f8-10a7feb012fe',
'f5a2d0bd-8266-423b-ba5a-9aac31ae6426',
'a14112b2-6ae1-4af1-b266-2010d4d3ac63',
'f7e796ea-5fed-43ad-baf6-662b57962958',
'14e2e683-ce7c-4c18-8eb6-da8dd67d8234',
'c2e332c5-24e8-4fe6-b297-ca2fb1c000b8',
'c26622cf-c9a3-49d1-9bdc-e0a56b137354',
'22427822-d630-48b6-a1b3-dd01390fafde',
'a0e91d57-358d-4308-924f-b4f81f3ba830',
'4bd54534-f6a9-4145-b76e-eceee80a1a7b',
'f3ffa5eb-cb56-4cf8-b667-7d035121e744',
'3705bc60-e132-4bb3-916b-eb8b2ea1ea5b',
'1d017a50-c03d-429c-92ac-5b160098d79b',
'861e9abd-3031-4ed2-9124-e5c014d9f877',
'b48a61af-978f-49e3-a7a2-5e8f677b8aae',
'985d767f-6e94-47bb-981e-2a11d1bd7ee8',
'50108af7-f458-466f-b3e6-62f73edaf885',
'a3a2012f-9aae-4ebb-8cf3-2ed9d1fbf3cf',
'eb745a9c-88c8-4f50-a3e1-d8e575c96a0d',
'48b94bfa-a016-449d-b749-f6c21b4b0503',
'5587be87-0480-4532-a1b5-406565630a3c',
'fe8d06e3-77c6-4fc8-a161-8935f3e968af',
'ba7cc428-5df0-4af6-9f10-153c5319e521',
'c95c9e62-208f-4b76-a04d-0b3204f8278d',
'18162482-302d-47b1-9915-7f046045217b',
'fe967879-9d79-4349-a9a8-68f7130d64f0',
'a9c413e5-0f15-42c0-a4b4-45eb8055ee8b',
'3068f470-99b8-4d75-8ab5-e48de5b23ef3',
'497c6ec9-ace5-4e39-b158-32a40ee5f754',
'89c8620e-9f85-4e57-b6e1-f445cb481b91',
'b866f666-4ce1-43c1-a8f5-1e4b8bfd435f',
'b1055592-59d2-477f-8b89-a535a00f3c76',
'e717d97f-5639-4678-ad95-642cf21d1426',
'cbb518a5-62a3-4be8-aca6-e35aeccc06c7',
'9be03d2f-1387-42f3-8dfd-14524d946a1f',
'b0e05e5b-bdc5-4280-968b-7e7f5867d338',
'22d0f154-0caf-43b8-b4b9-50d4252e6a0b',
'62faf03f-f4a5-46dc-9674-0b95fff7801e',
'ab6b51a4-8d99-4435-8419-85eff21c34b1',
'13e12ce3-37dd-49fd-98b8-506f12941f4b',
'6c3ed727-63c7-41df-bb17-7c6cb7453b8f',
'c1070e47-e469-4692-9999-1bb29dbd2def',
'35c8f17e-0a91-4fc2-9bda-a7e402db75c8',
'ab01aa5b-7c29-4dd6-af13-d06d08170a74',
'073eb75a-02a5-4f2a-8320-44dc41796112',
'af16b747-3f25-4753-add2-a0342a4c8b6f',
'8230889f-317c-4507-ab43-bbecd1a3ef7c',
'0d42710b-373a-417d-a303-61e3c455700d',
'2402d167-cdc7-40c9-8704-6963834af99b',
'12e62ce8-0fab-4dba-a4a3-a537991b7cca',
'c706c8ed-8e6b-4501-a112-c5caae0fbe0f',
'4a06cb6e-2117-4528-b99b-c46429a0458b',
'e7c8098d-c170-4415-87ad-0ebe33102109',
'fb73e2b1-e10f-478b-b93d-003077b83728',
'a266134c-15d6-4da4-8e27-aa8194b5286d',
'7329d66b-a72a-4376-a479-08ee8f57cefd',
'41b033f0-bb60-4999-93c2-d1205f8c5c50',
'dbc10148-1065-4dec-abaa-946f81070570',
'a290c837-4313-4759-9c86-96fe775e1964',
'bb1a449a-4fac-4aff-bf2b-1e522c932bf6',
'6e885d2c-a1a4-4c69-a073-e76682d4d6b1',
'66ec5818-5d8b-470b-9bc9-95d682f4a58b',
'3ff430a2-6ee9-4ee7-9833-3ed3f3f5f814',
'a3f11003-0d48-466f-b22c-616cc91fd652',
'd5ddf716-5efe-4f50-be00-0ad9160ec779',
'd380e6ad-4485-4b61-a4d2-5d7d8b428d9d',
'3ccca9a0-5a59-41e0-b63a-02431527859a',
'80f9d327-2016-48a9-896c-d051b69883d6',
'5c101f70-32e8-4260-be42-0fe262775e2b',
'e3a98c2d-5cd7-498b-9d2d-82609b76b397',
'd0976e1d-a249-4e40-aac8-9506c9d6f65f',
'6071b3bb-11e9-450d-9b4e-36b615660f97',
'46ce1486-cfca-4d75-94d1-da54f5c6e9ad',
'cc645e25-3eb5-4aa6-b86a-d30927011686',
'cb8747a2-7153-4746-9498-da302f4d7fa7',
'fdf2dd4f-b775-4cfd-9327-a866b50bfb6c',
'1d197190-19ea-4303-a37b-6a95a307f93a',
'cc21a271-2caa-429c-9648-6dc0785a12fe',
'7c36b07c-a28f-4de3-86b4-5509d1813d73',
'd741cd72-ded2-449b-a9d4-3b71d59c2d9d',
'218d279b-731a-46c8-ab60-79daf3b591ec',
'9005a32c-c62b-4b9b-bb07-c0785a395109',
'31a6ba0f-3dbd-458f-a2c8-b4ded761dd63',
'f5d4c9d5-1334-416f-995e-4976eb1d477c',
'5453852a-b4ac-4518-af3f-21869bb7a8da',
'ff273563-78b9-44a0-a0a5-c2145598c78f',
'f2b62f68-6028-4f14-96b4-d375500cbe17',
'07b3e79d-8667-41f1-b593-d06c63b650cf',
'e64e37a5-e3af-4a48-889f-dff472bd3b41',
'3b216faa-6728-4a37-a05d-0d696cb99981',
'8e2e3b38-22c7-478d-afbe-3504a92230bd',
'bb8df64d-8a14-4e07-943e-726b4e1331ee',
'4c4dca31-4a84-4142-8f96-de6e8e856d76',
'd5395381-4198-4061-b522-994510f8f00b',
'8b9917ec-c38b-4c84-9a7f-1891f02af2ba',
'0f33249e-357c-4854-837b-ae050ca97f47',
'9aa1e9ec-6707-4dd5-8c7e-5ea41d785ab1',
'9897e326-4792-4674-b73d-5bcd25f512de',
'267a9450-3891-4870-9dd9-0848eb339604',
'9074cd37-4312-4de6-b7c4-81970926392d',
'7080b350-69cb-43fb-950a-eca269f504f7',
'7cf9e892-be82-4dc1-9e19-b95a192f0cdc',
'ca8fb6f9-c016-49c4-9d6f-f299329919c7',
'002ea40e-55c0-42a6-af7d-977814eb5b93',
'158058d3-f77f-4585-a5c8-2ea48dc2b835',
'3d40cb9e-45c2-4f67-a2a2-5428ca65ecf5',
'23108eb9-910d-4956-875e-9a472afeb760',
'e608e05d-7afc-4975-af95-4db6fe86b2c8',
'364996ee-fd8d-4bc2-aa3e-d479c95460aa',
'ad3069b9-ab41-4bff-ba1d-4c946b723284',
'48d83d08-4f7b-44e7-a2d0-54ecb8649821',
'7c85f323-99d3-4677-a4d6-bcf18d61b73a',
'b88d4f63-81cc-4c35-bef1-4c1e1bdd2521',
'f6ee71a3-1e5b-4bcd-8c33-77464baa9a95',
'4b374060-71d8-40a4-bf66-cf0e22e1792e',
'4ff00c5e-2288-43d9-9146-a268c120cc22',
'cb2efd43-838a-4151-a0a5-cd82bed181c3',
'8e3732af-a6bd-4a69-906d-13477c605e69',
'575788ad-bb79-4291-9d3e-f11c16eb68d4',
'7d3360c0-2c81-48ce-bb1c-6191975ff1fc',
'01eb961b-adb9-498b-9e8d-43084aa719a9',
'5d86d63a-f078-4102-ab0c-b2d81c6d787b',
'77846667-f793-4e16-aea2-d859bc54b35e',
'288342af-f604-4fd3-aeac-c417a353cc3b',
'95a05c8c-2c83-45b3-8e82-19de95e8c191',
'9797a241-79cc-4b25-9448-7b0648875915',
'24775913-d2bf-47f6-b13f-3d05318bde5d',
'7be7aebe-327f-4e46-87ad-aad1b32c0864',
'0b5047c1-e4fb-4b6a-b0a8-1043256b1e3a',
'3487085b-d383-442b-a387-d43d28085617',
'ab45c767-ed35-4275-8cd0-517be1dbc8cd',
'8a42dfa9-13a1-4248-87af-06d9316e69be',
'0506ab60-de2f-4abf-ad7a-a394e74b3e40',
'38c73936-0bfe-49f3-931b-a1a7dff0cff0',
'5dee22bb-a2c4-467d-99cf-a2ae705a3b2f',
'bf0d9df2-84e4-4fc9-9aa0-6d15524c6ad5',
'c81a3a83-a082-483a-a66b-2c7fe631d5f6',
'286ec14a-ebcf-476c-8e68-a2872669fa4a',
'fcbd07a8-6aaf-4c1b-b78d-a7fe7a86f7b3',
'168416a2-c247-49d8-8e72-e23d521fa87f',
'395743d5-f291-449c-9406-34e03e05621a',
'4839df34-6f4c-4571-b2a2-5359da945fa0',
'2bd01656-2560-42a2-9944-8c62849cb44e',
'de625b96-6b99-466e-a675-1dccfa0b8580',
'133e97c3-de9c-4a51-8b8a-b3df76602862',
'c54c27e5-1f18-4040-97e0-6fa4bc7a175e',
'128057fb-28ac-43a2-8a09-cb0cdb2d6ebe',
'd08a0d76-46bd-4531-9b6c-3c39209393b7',
'1955e77b-236d-4252-9238-74c44eba0a69',
'750c6bf3-7fc4-4918-9bc3-5e578ae4e622',
'ec7479a6-1af6-468f-a8b5-10f0df226d62',
'2cd91279-9c53-46b6-8bf0-af99eb8282ec',
'9b79f6c9-5f26-4b66-96e7-7212b3fa4cb9',
'a1eea91d-b504-4f90-a7f2-0c66ae43abca',
'da03caa7-0028-4a22-998c-04776d6f5bbe',
'68815295-7bf4-44ea-bbd7-e77d9898aa91',
'75ecc6e0-1192-4b84-b023-7b19d53f89f0',
'54f4b2e6-d324-4e23-968f-ddbabb6e4a2e',
'd9e0f3bc-0d8a-4d86-a90b-05391994ab4b',
'31d252a1-eedf-49d3-976e-35f41471349d',
'933cafb8-ff63-4636-a9bf-27631276143b',
'cdac9632-40ad-4f48-afc5-68b4fb7bccfb',
'f875bd53-9385-4a9b-af53-f58da07547ac',
'7242cb73-bb93-4b8d-adbe-c92999f67873',
'54da8768-54d9-44e2-89d5-48087b2db9e1',
'd768e734-6287-4a8c-b4c4-a3c0b3d6edc2',
'32db8216-f60a-495e-800d-1f2be03aa099',
'4737909f-458e-4c6d-828e-8ed8c2cc98d1',
'b7c0bf72-b2cd-45ff-8cf2-ea8f94cb3f54',
'62a761c4-09c1-4db8-8d1b-ec4a36fa7f15',
'0c5b60a5-08b0-46cb-9683-7e46f9e0c4c8',
'64ec59b1-c268-4141-b987-2429bf9a0b86',
'7b277a8a-220c-4071-ad3d-cf8794880027',
'7e1b3314-9822-4748-9688-b9824f848e9c',
'35230554-d746-403c-ab82-f66abbc75ffa',
'b55eb020-a950-4da3-8528-891a2e30d825',
'3b0c14d7-2c1b-42f1-a623-41995b3c6154',
'fe9f560f-063e-4614-b610-56455d42235d',
'67b84218-e90e-4c6a-b538-a1d370663768',
'2221e0b1-2b3e-4eab-9e8f-41a8e23dceaf',
'993cb438-1597-4049-8d12-499c6577fbc6',
'ba00d19f-1e3c-493e-9d17-a6a577af8f15',
'171cd214-ef50-4ea6-8ac5-9fc1706a4bf5',
'3574ad83-38e7-4139-9028-488986911942',
'b8b0662d-4085-4449-a1ca-6d942be75c71',
'46175479-6bf0-49de-ad44-65bf109718d4',
'63a7e002-a9d9-495f-b25d-41fd9718fbf3',
'1a293734-e7b2-4699-909c-05cc0fb77268',
'28b1f3d7-b3c8-4e6d-ad65-7b64ca106f4e',
'0bb2e632-c311-450f-b58f-8859b44212d8',
'13e259f4-b15f-497d-a2df-3211039a69b5',
'd8677da5-d4aa-4b20-98c8-f3e503352731',
'0c650173-6da9-4397-9041-d135e010150f',
'44884158-bcf6-41d8-9547-afb3b7214794',
'0146d230-9a89-4a3f-87c1-2456ee44525e',
'cca6be8e-ac94-4731-b02b-ace7ad48bfe8',
'95f240a4-cd3b-4ac5-8f9a-a892570d19da',
'e23bd6b1-6c5d-4b23-8c85-c995bd6784dd',
'91831bbe-b7fc-4990-a02b-8a1bf534f38f',
'51b6c495-69e9-4bdf-8d64-fb7e027e2a1d',
'6d7dec12-f4eb-42a9-9890-4520e4881b89',
'a5beaaf9-e105-4587-b40e-28cb6b852b2e',
'd40150f2-9e62-44ff-a3b2-428cfb628420',
'9153c76e-893f-408a-95a5-2e7ea8c09c1a',
'3dc7c3d2-f2b6-4af3-ab92-f529de16e894',
'54c1f7e4-0a1f-4e59-82d1-91f0878f6b0d',
'010ff9c7-702f-493f-b0d5-e94f68aafc6e',
'5d79c3ee-5f62-4ffc-b1d4-6261227331b3',
'9b789a12-bfc6-4401-ba56-deaa00bed24d',
'd6a6bc64-bf56-40bb-b515-97cdb02af090',
'e4dea7ba-cd5c-454b-9cc3-2f33e600def5',
'65c9772f-a21b-43ee-80fc-504d80010a93',
'b9cce29c-65b9-4f6e-9fba-da47b54bd110',
'b354448f-e74a-471d-9540-ed9e0297b738',
'c5154b51-5202-4258-aaa5-9284cd206b28',
'f7ccc96e-e4e6-43dd-8178-15043f8de16e',
'c28e1354-b737-4569-9faa-cef50c451a68',
'87d3dd3c-7011-4400-a2b4-62327e02afb5',
'07940766-85c0-4229-bc7c-5dcfa752ec9a',
'fcff347b-2b01-4ace-b25a-35666a2a624a',
'9ef59064-b241-4745-ae72-0780132fba3e',
'06a3f215-1605-4b0e-a822-033943b2c416',
'4d1a9656-b5cf-4a73-b7b7-18d9ea99473c',
'172f7863-9538-4601-a762-419b396e191d',
'b63fc9a1-19d0-4bbf-a39a-810fd5b843e3',
'55c9c998-59e3-43c6-9519-020d7f622db9',
'75609473-2177-4764-90c9-f3bb1589b703',
'a40a21ea-c363-4dac-91f8-bbdb6c6b3c4f',
'3a08e58a-3d53-4f92-a474-eb80e0c80285',
'6f9a7fbc-00e7-4328-a450-d9dc037941b6',
'61907a3e-29ad-47e7-b6e4-d53574f000d6',
'642bb6e6-3358-4cac-935f-d610ad4a45f6',
'3ba3c2ca-ce42-4b5f-b425-92b619b5d01c',
'1fd6d3de-2359-4765-bf64-76df65e6d214',
'3c9baf5a-09fa-4322-b900-3a083bee2898',
'c8f0918e-57f9-41de-96f8-a6b228d3a515',
'75b6cdd0-18f4-4cc7-b231-e7395156e6c9',
'e76f3bcf-a0f0-4fe0-876b-21ada16d4c78',
'022007cc-9937-4733-996e-02fd51bfaa05',
'b0fb8c8d-0e45-49c7-ba3c-3831ad7c27ab',
'78d6d641-a108-40f1-b11c-473dc8b567dd',
'0706fcee-2cde-48b4-9c72-1f028f301939',
'250811a7-2c34-4584-be1c-3c0b2e521eb0',
'8c067a01-5dc1-4c9d-9853-816ec7e42f65',
'ced8c7ad-bd6b-47b3-ad5e-11f4257a147b',
'dbfcd3eb-497d-422f-a2ae-d4bd89c71b6f',
'b5aae0b6-c6f3-4974-b754-07ced401322c',
'868a2827-4fef-4557-9daf-3fb9d2150145',
'cf27027b-b2f9-44b6-bc48-1a62c679b86c',
'635c8cc4-6ad2-4894-be4a-7eaf9cef4478',
'343481fc-438b-496f-b086-ac63e2bb92c5',
'6c2798bf-35d7-4024-a311-751ef80c09bc',
'4d228dd5-124b-4ffd-841c-41881722408e',
'97fd71bf-b44f-45b4-af69-8ad1153a1c06',
'413b7e7c-75ad-4491-9d74-8eb5c9899509',
'498a3a2c-57c4-4697-86ee-ef7cdeb2f93a',
'651df652-c068-4918-8b3b-ef259a7715a6',
'f70b99a9-8ad5-49f2-91ab-d7b0d3546a6f',
'e3ec7331-4604-4232-8f5f-1a71eeb5b5f4',
'7cf27602-473c-4b02-af2a-24d17cf825a6',
'b686d6a9-1944-4d85-8ac4-65df2ceecdcf',
'e2779077-218b-4fe6-8fa2-c8e20a05ec8f',
'fd57f9e7-d317-404e-a6ba-29491bc15d36',
'9fb43904-eed7-406b-9a30-81f58fb35708',
'efb6ec42-3599-447d-9ec2-7a28cd8b5f11',
'087be671-46f8-4e71-817e-810c4977ba2b',
'63378fe1-7a38-4478-9760-e54a5707b464',
'd1fe4918-aadb-4036-b8dc-1f8546aa6dcd',
'8bcf70b3-5933-4ae2-ad63-6059aa4c8f0d',
'd12c5fbb-a2d9-4a6a-a4e5-0abb88673a30',
'00872519-af2e-493c-9435-82d8bbd6a6bc',
'c751315a-f79b-45f5-b7a8-aebc11f40970',
'bd4b452c-b238-482e-ba7f-0685f05364a4',
'7455523d-8082-4958-8a47-7408981be7d6',
'df738baf-85da-42c7-81ce-9efd78de5024',
'76444f6f-d19c-4400-94f5-85f9e5bfe331',
'cf829876-fe2f-4603-98a7-a2177fb6127c',
'ea387a43-3fd9-4cb5-bac9-b5189e6846fe',
'64ea8fd3-43aa-42ee-8a11-63341283a721',
'a49265a6-584e-459a-90cd-71c136d8ac76',
'251437ec-c35e-44ce-a547-3baca6bb9d7c',
'bf9d7034-0ac1-4db7-a715-c69aa4c09431',
'18626045-1d46-4be7-93ad-eae8ea87ccb5',
'a28f91cd-690e-4b83-a194-8c230085505f',
'aba78c48-f07d-44a2-aab3-6f9f73457033',
'f4cb4d72-632f-4213-9c77-2d6b62b7e3ac',
'3548661c-04c6-4ba3-ab5f-d95c4dddf9a6',
'e9b605f8-1f5e-4a9f-b03f-28a1401260c4',
'3c2ddc52-bd70-4577-bc43-813d5e449d3a',
'42256c30-7a3a-4600-baf3-950325abc6db',
'2ca1be09-6348-492a-8767-73e36839ec10',
'79dea6f4-4769-4e9c-8fc9-58fa75e9db74',
'a59a7fea-a2cc-4462-8e34-335a93b6dee0',
'67f719ec-f315-423d-b56c-dbd9240b6359',
'591da42c-f8f5-40df-a90b-e7b400e9440c',
'ec94c559-cdce-47c1-bf8e-d8bad5ae1179',
'13356c5f-1d50-4b9c-8a09-f73525e609d8',
'cf063356-4660-411a-9f26-f72f3e44fa90',
'efb7bd57-8667-415a-b92b-b74514367a19',
'fd0f0443-9ee8-44a0-97a4-2f634e8c360e',
'ad705e86-ebc1-4cec-ac49-9da5f19cb4fd',
'1e8e0aed-9ad0-4e1b-932d-a5d4e934f387',
'e33d3c71-0482-4c95-a3c7-bfa54cb5a1d2',
'2150cee9-da78-4a44-bc73-6d68da11776e',
'f5e78459-5013-466c-89e5-4c037d4cbbac',
'7dd59aaf-bd10-493b-a1ab-f34205e1cda8',
'9448235a-427d-416f-bbc8-472cfc3ef94d',
'99b2a376-9979-4a9d-92a6-f9d9dfb3ca1d',
'68b2ef35-9f5f-40ac-b4fd-e01bad89020f',
'869c45df-9556-4bf8-b459-10d488557afc',
'e41129e2-b694-4b64-8f75-0a3a323c6282',
'f0d25474-dc6c-4be6-b107-31c784882dc1',
'10274523-712a-4794-bb1f-e473dcd0e9bf',
'44f3a71d-f509-4889-a7ce-13c590e958b6',
'c12705e3-c4d9-480d-b1ec-2b543824cbc1',
'fa992f88-1498-49f5-8875-6ffcc9c60bba',
'4f819246-d6bd-4966-b404-3961701760b8',
'c9b5920a-c267-4a12-a3d3-b6e7585be298',
'cd2536ba-71ae-4069-8b7a-0b0a6c8a1826',
'3e19f348-c5b5-42de-8e57-19447a463025',
'32f1baea-6b6d-46db-9a25-e6396db58abc',
'0ea8cf38-05e7-4211-9aca-4ec11a810b6c',
'1a62f095-c511-4fec-8198-55b666d14e99',
'3a42dc5e-e31f-4038-a940-05c2b1e270ea',
'7e63f653-cbe6-400a-b53c-e064310a5772',
'45a20950-6540-4484-a99c-f241ca289d4b',
'0adb4150-78f7-4c64-ba8f-7c20358bb59e',
'ea13e073-4977-4491-baa9-6467942c342d',
'249c3291-fb60-4049-b1ae-974bf9a8cd4c',
'9b42da58-bc4e-4a33-bc64-b666a2dff78c',
'9c06004d-abd0-49b2-9fe1-be11f4dafedc',
'ee7f32ca-57d3-47d2-ba3b-dfee80a18985',
'0d69af02-406d-4740-920d-208948b54ad4',
'd0756e72-a6d5-4ce4-a366-bcdea3960b7b',
'320cb9d6-3f67-47e7-8393-647ecc0601af',
'99255a6a-e480-46d8-a967-e1cbd760fc90',
'0ca301a5-079f-48fc-964d-f3e2763acb91',
'a5da85ee-3c48-425e-811d-5f6d4b078dba',
'77017c07-3b31-4616-ba3f-3a99bee37bb6',
'4ae3db18-7d7f-4ad8-87f7-2a32f44f596b',
'73d0960e-f7d4-44a3-92b5-54b3e7310ed5',
'2f0a2bff-bfe7-43db-9a71-9063572f292b',
'b39fe0d7-e8dc-4d42-819a-7507f66bd53a',
'a1387e2f-7503-4b10-ad4a-bb5a62c32871',
'be4cc1c7-0762-499a-8d3b-5c6e94c33015',
'c985db41-00f9-4ce3-9cfe-51fc3e4d945a',
'91f8e19e-0003-4322-a62b-f7bdec1adaf3',
'68a5921f-0c65-464e-b529-7951a50c3f8c',
'8410823c-f58b-49f1-9f6c-b4705f70438e',
'7d47e03a-268d-4420-85db-92d82d4d707a',
'c79c1fd7-92df-4ec1-a8a7-7bbcb2f75f62',
'cc48838a-6143-44e8-86fd-f129ed3e2729',
'21de2a03-b1d8-4d4a-8109-9bc3e4f4d896',
'b619d903-d74c-4da4-9de5-b57ba91c565d',
'3bd5df1b-8206-4444-9a89-93570ddff43d',
'aa1e5bc8-5a66-44ba-9d30-f6e2e1e70d7b',
'71e2fd6f-4ceb-4e80-8466-14ecc1215c95',
'8384aa25-adfd-4f2e-95d8-de57f9447435',
'e709568e-f9d5-4c0a-94de-96f14189d7a2',
'ddc90aa9-5343-4c52-b293-a610bea58bde',
'26fc7e1c-e982-4dfc-a43f-4861373134a6',
'8709e929-8a65-4bea-8a83-1613b7ddbf08',
'06823879-7043-437a-b31a-1dee0a00e6d5',
'9fc972f7-d8a7-4b9e-aa8e-770c119f93e1',
'58d8440c-b2b5-4d7c-83ac-dafbca179ac8',
'b29c7b72-18ea-4897-a848-620aa5da9661',
'741aa92a-d2fd-4261-b59d-74872fe9355f',
'79d0cd8b-c3c6-42e6-959b-faee08c2a3df',
'7653bc49-da36-48b8-a222-11af59347dcd',
'a36ce9d1-b943-4155-83c7-9a49fd8b0527',
'b363b927-d64d-46c1-a27d-da07b25398e4',
'3dd4b8c3-67d9-4f0c-aca5-bf97c61be48e',
'e9d456ea-b932-4f3d-bd3d-2afa224e3e7c',
'f847f308-2875-40c2-abb2-cc6570308e0d',
'040b5b1e-04d6-42cb-a5a1-5dfe6003b4f8',
'40f61ac8-0bf3-42da-a2bd-fb63dfbd30cf',
'243b8abb-9957-4512-a828-45c83cfeca46',
'c32a26bf-18a0-40f1-a33c-21ecac2b348e',
'3ba4b682-0c85-4686-8d66-5af2a22adcab',
'8e6b8715-e6c8-4f2f-af72-c314a14a52d8',
'b27c81fc-1af8-4aba-86e5-7cd0b505f1f7',
'f082d0db-1a93-4941-af32-1b5b2d06b7b2',
'a3f07a2e-272a-4279-86d6-3d1d52749a74',
'5243235e-19c8-4035-82f9-48161c051ee9',
'761450c4-4c60-4b08-b34d-2c001f908ac7',
'4f0ca186-9130-4563-b9d8-df95e4f19343',
'4a4b310f-8a60-4398-9c3b-721aec2eeee4',
'f325d766-f607-41c5-8c3b-84d94e269581',
'a9afb796-4769-4e25-b1de-4e11c3593477',
'2fbac3b7-dbeb-4f11-b5c9-be4906ce194c',
'906de4ae-eb25-42b6-adc5-b2499f0ba936',
'e038ae67-0e3c-4b25-a797-d8489d20fd69',
'7b7ad532-4195-406b-b65b-2beec38a8715',
'4e645a40-d7c4-4dce-8589-c35ee045b7e0',
'e2048506-c6d0-41d2-b35f-1ffbcbcac518',
'7f24d6c2-2b32-4ced-8cc7-9af41ea839e5',
'8543a536-37b3-4065-bd54-c979bd8ad49f',
'b9ee6c83-947f-43b9-9a00-22922ed9530a',
'1ca89515-44b7-4d6b-ba8c-f62bea1aef23',
'a8ba0e34-45f6-469f-bc47-f6d5660c7473',
'c0d6c4d7-b418-4f79-945a-08d7d149ae83',
'ca201609-9b6a-442b-b6dd-036f31d9da0d',
'2f4111cd-944e-49e9-a7c8-17e9d5d5f91b',
'72bfc6c9-2afc-439b-981e-89e2583accf7',
'74426d5a-cf74-4382-a382-541465b04922',
'db30385b-b66b-4729-917f-64bdd2313ab8',
'1aa680f2-0a89-4194-b4ec-021f1863777e',
'd4f40b88-23df-4e9b-bf0c-ae789746b0b0',
'9514d5d1-c45c-4c94-8935-390a57629c0d',
'079d6dfc-88ec-4de1-b7fb-c318b341b391',
'5fb93e92-e1cc-42cd-9e93-a14d08d4f521',
'94b0a6d5-4026-4b06-a0af-88b85a1c7ee0',
'a06f91c5-9943-4464-b0c3-7dfd7f596f19',
'ace17cca-0b65-4a97-8a70-c5c23b01b2e5',
'7d443a28-3020-4d3c-bc4d-cf58cc9a53c9',
'e57e39d3-fc70-4b1b-a246-ddf65229517c',
'a65a83d2-8299-46e7-8be6-85ef6c7ad5e9',
'a415d870-8414-401a-83d5-debec34350a3',
'4788b87d-ef3b-42ec-9a4b-093cd3967190',
'13b0744d-a0f7-4a45-8352-18191306367d',
'17be320a-ba94-4038-9a87-2a70d27a167d',
'b8fd5e13-1d28-44d5-a43b-d3c072fac845',
'cf67ce4f-5283-4c4a-8694-25201661493b',
'df891cb4-ef00-458d-9773-c4b94821799f',
'80280e08-3681-49e4-8ad6-813e5867ec7c',
'd1515cb6-365f-43c0-8d62-5d98ca6db030',
'cd3ab943-0191-4b7f-a0c0-b0a6fce6b109',
'e81a2e05-87ba-473e-af68-08086536b280',
'a34f9890-b8d6-4a21-ab8f-20034f724524',
'aa9cd9c8-0565-4db2-be2a-5e0e2f143b92',
'29060105-7149-4b65-916a-3a095eb8cee4',
'05354707-5e62-4672-be9d-0567afca6408',
'5549d3b9-0fa6-461a-ac15-15791251c53a',
'0c4b9290-bbfa-4cf4-b450-8fde7f85ec0a',
'636c9f15-bb89-4faa-b3e8-092b7f74b25d',
'0fc3d0b6-9d9c-4418-a15a-e77d3ca001ba',
'994d1461-a298-4a2a-b477-4fd51bbb002b',
'4a53d8c5-93c0-4d5e-9fea-3db22743c1e3',
'a6fe0025-aa9c-483b-b8df-2906d23638c2',
'80abc332-03e9-4fe6-b1ec-9656eefeb756',
'c97b653e-f084-4d5b-aefb-acb901973d60',
'f5d3ccd8-3822-4444-a30d-c480e7ff5b70',
'3f185940-cb4a-465b-96c0-afa08f2ed146',
'f4944cf4-af9b-491a-b17c-41d53e58590d',
'26906f8e-3844-40fc-a01e-5024196a8a29',
'c6d1cc58-4d6f-43bf-8141-d7cb5feee940',
'e37cec09-1829-4d6c-9bb9-6238345d9a4a',
'448e5484-4d77-4d2d-8dfd-5fa1e3c74d68',
'137be7e6-56e9-46b3-aa29-4ccc2cf1e618',
'0801de41-f2b7-462d-b7e0-bb013dae5004',
'e70b036c-db73-4972-9007-b7b27e31fc3f',
'0d57b9e2-c727-47c3-8a4f-3b0ad7e47823',
'5acf968f-9d6c-429c-9bb0-60ec2265593d',
'6082374b-0828-4bf9-bd31-2825a11d687d',
'0186ae4b-4bef-45d3-a7c3-512568d5c17f',
'a138e6d4-e4ba-408d-9b55-37387f7886db',
'84637ea1-77bb-42f6-bc43-9e8ff85f3d28',
'5f601e9f-1124-4a24-8613-f4f4635a5955',
'9b8094b0-a2b6-4961-8d75-6a2f414be587',
'9dab77ba-7cf4-43b1-a1a2-9d52bff804f9',
'f2fb74c3-47eb-405c-918c-dbf264d31acd',
'ab7072ea-8d52-4df4-951f-d292b23e7b57',
'f6df0014-6129-4b74-9f21-c37de1ffa328',
'763d4593-aea3-453f-bd6d-47e17800d892',
'3137a8f5-d0bc-4aad-a969-1efdcfb4ccb5',
'adee401a-993d-47a4-b106-57948dde9fbc',
'246cb11c-5ad9-46b4-b1a9-293904bba53d',
'7fcd2a12-5458-4ae4-b6f2-b0709c8d1025',
'0f32406f-1cfe-4158-9c44-48c3658652ee',
'e1d26735-b6d5-47a7-a35a-ab4ec70b0415',
'fdb0a96e-b016-40f0-912e-6fa5a04e150c',
'dc37aede-61b1-40c6-af11-c18a5477f189',
'5cba2655-c8eb-448c-9910-52e936f4efce',
'4a26a12f-2e9e-48fb-bc89-0e3a78b348cd',
'dd3346e0-d5c1-4938-86ea-1a18d8ba3bc5',
'c8b39bac-4718-4da5-bbf9-d4140d33e07f',
'cdc73e33-9303-4a81-a10f-ecb098f0b632',
'cfe955ff-91c9-445b-ade4-9d7a75a13a58',
'298d005c-b2b7-4d11-b114-ac262fe42b45',
'8f624e70-9db9-4e22-baef-2c0f1fdca1bf',
'27c030aa-a26e-4d08-b0db-4dd8c1cb2b30',
'ad05eba6-3f56-4bd4-99c8-d82575d4ea34',
'3a46472d-68c9-490a-894f-14dd17c8dad7',
'2d06cdc3-c85c-4bd9-81f5-5fa6ceac4fe2',
'95f9477a-d1d8-4fbd-9c46-0e891e201e93',
'ac9b75b3-c7dd-4516-b2b4-30d568044fe0',
'3500901d-9891-4a06-ba95-1774e76010fe',
'4aecf545-71ab-4a6b-88c6-f00d26166a6a',
'49ca9982-6a7c-487a-89a6-be233a216751',
'5852752f-9213-45d4-af9b-a0ee26e8f6bc',
'7861b770-73d1-4970-8171-b135c2f1982b',
'1d8a67bd-7f75-4216-aa1e-0c82cc6385b9',
'95fd515d-a311-4d23-87c9-409705fb31c0',
'ded30124-4056-4a8a-af47-129dd30951ca',
'aae8d90a-d51a-4ace-b528-bb4f7165749f',
'c59155b5-9000-4e7b-88e8-db5b0acd0362',
'bbcba249-acfa-4132-b47f-794f66ade128',
'e28409d7-8265-4adc-9f66-532780f93f69',
'42c4193c-9aeb-444c-a231-8854512890f6',
'd7097bf5-2ec5-4823-b689-8a7f6fe2787b',
'19013bfd-d59c-411f-a7cc-1cf86da1f529',
'427ee47f-6d4e-44d8-9d8b-5561cc9f11a0',
'4a08eeb8-614e-45cf-9e3a-370d8d24c20d',
'8576d85e-2278-452e-820b-ad5fad8a206d',
'e1e7c5d7-29aa-4dc7-b493-40f281a614b7',
'56bf56e7-ce39-4cc1-b356-ac52d42a47ba',
'9b4111d7-611e-4e0c-8120-28e4c0ec7823',
'b4a7cb40-625d-4b63-b5bc-c612f33bead4',
'7bd97b1a-c1b5-4f98-a310-c2fdc4ee0df6',
'8e2b57f0-6b61-45a7-ba30-cab01c15c52f',
'66d3c713-2f00-4f23-b6a4-b6b499620868',
'd979595d-09a0-4eb3-a18d-f2f31cdaf328',
'7a281893-e14b-4478-b7e4-faf422660b97',
'2d3adfbe-6b4d-471f-b443-49b2e9335409',
'ac165445-6e04-4985-938c-5bb008a98e21',
'231add00-3200-4cc8-aa6c-f520b1a06a83',
'6179cc1e-5fbb-44dc-a6b4-aaef777e73ff',
'ea03a65b-98d3-480a-8ef3-b8fd7620c5e8',
'bd36e361-c37b-4f6a-8316-33d06a023228',
'8c0187c8-7913-4afe-9dc7-202f4a04761d',
'0ee0e25e-6724-40e4-a7b6-b25a7168189b',
'69056057-3f3a-4496-b120-75553d7069dc',
'c5b9045b-b1c3-459c-bd7f-46eac9692b33',
'61a308f5-7c12-404d-a184-14a98d456dc3',
'648496ed-3dea-4836-98b7-3554f8659722',
'50ae77ed-8772-4913-84b5-30c4cc766535',
'a783c797-6b5a-4225-ac79-25c2202bd4ec',
'26385085-2173-4266-b421-4dbf8175a3b7',
'04efa18c-4053-4d71-bc62-03a8b27baf17',
'b0b7e9ae-7384-4765-8276-f6faf7a49fb8',
'c581a9a8-299f-4363-a46d-9f2a9c93c8b8',
'e5c0ea82-dd26-41fb-a8e3-5b55ff6feabf',
'8d380a75-4c45-425f-8999-b1aea6db752b',
'7ee25e4f-1db5-40c0-a5a0-0f3a8d2ed606',
'1a53f09e-6ce3-467f-9d33-39dba043f80e',
'f7d298d4-fa0b-4e36-98c5-885902c03bfd',
'2807027a-3fc4-4095-811c-7a703bb7c816',
'68180834-8e16-4a34-bd53-b9101122a88a',
'7427982e-6d3e-4fb3-abb4-613d8cff05f1',
'9bd22d8d-70ee-4369-9afd-9d82f4924f08',
'c197b359-f507-4990-90e5-e9b6c97c01b0',
'9764bf01-3895-4c6d-91aa-d5bf419d38f6',
'4fd199d5-660e-44e1-826c-020e200f0f8a',
'291e0d77-b6ae-4012-a605-b7baef64a9ce',
'74ddfdfe-6f9d-4b24-b630-920479b94083',
'0a681cfe-e969-44e2-876e-494ce8995d5a',
'4a521605-7b36-4d1d-b613-e092f253f4dc',
'5a970075-f226-4210-afaa-7720fdfafb0c',
'a1dfb784-8714-4fa6-9f8e-539c18c38254',
'4f475344-bdf6-4bbb-b3b1-23da37409274',
'87ee7635-5331-4102-a5cb-b55b03af7bec',
'0a4df085-0c22-46c5-8150-452946d698ba',
'3b41d13d-11c4-420c-8730-f2bbd4990489',
'0474abae-8aac-4e28-abb1-66bf03c1b644',
'3082f469-d26d-48a6-999e-7e0e29be594f',
'dcab4e40-be91-4452-bf4a-4558a21c066f',
'0a140f5f-7e0f-4431-945c-5d241f87817a',
'cba75bbe-db3c-4115-9008-94e4752578a6',
'11c535e2-dd9e-4fa7-bdcd-869578dfed00',
'59709e62-853c-4bf7-8d62-3184e7e428d6',
'a3008a06-0477-4e73-8407-9d724b0c1123',
'bb410835-4f47-4881-a874-9941e04dcc81',
'87f359d7-5e33-4aa7-8d47-c8261600fc47',
'5b76ed30-f200-4108-a74b-2b54f18e6a8c',
'09600333-5252-42ea-bb22-b471227bd39c',
'63daa096-d8f4-44d7-bcd3-f55f8831b065',
'0b4d1640-1d3c-470e-abb3-7f482f5f1ff7',
'11b24666-aa80-44ec-a743-7fc0d0cd4a8b',
'2b0e59ac-314c-45b9-af91-837374863f75',
'5f408cf6-7529-4068-a7b7-eebd32f80b09',
'4e491bc6-2e73-42d2-9659-d16042ae95e2',
'b7f81452-2aad-4d19-a1ec-277e48fc675d',
'786900b6-293d-4b5d-9ef7-128d5ee1b438',
'644b084c-f6ba-4cac-afed-0ac13b365838',
'7a4d28e2-be35-430a-8b09-58c60a1f6b30',
'85b28ebc-ae1c-41cf-97e7-5bc5b67f25d1',
'a8c92ecb-a896-4d28-894b-f780987ef52e',
'c466f6ff-3794-43ca-8670-384e2b3cd777',
'3f1d6bfd-86fd-4f4e-94ee-a836b80ed43b',
'01659472-6cda-41d6-99fc-856ecee1ce5a',
'c2b10bc0-c457-4b15-8acb-3f453ddd480f',
'c3dd2ae5-ad81-40d5-8b88-08729091da44',
'1d0cc4a6-d29d-4d4d-97ef-02919db881ed',
'70fdece1-d15a-4781-87f2-cf615797dc71',
'174baeaf-8f41-48c6-9fb1-8610ba920427',
'eb68701b-e3db-4c98-bcbf-eae46e6ce0c1',
'4765b776-f1aa-4dfa-a9d2-1dbd2f4d4811',
'ffb2bbdf-e432-4ab9-b964-530f179efc52',
'38416630-f14e-445b-8cde-e45100dd4e5e',
'19305d91-f0ea-47c9-b66f-75ccaef28b08',
'629eac74-b2cd-413d-ae3d-b281caa4dc00',
'fdc80a1a-6098-4747-9b51-7813d734924a',
'b751a0f9-1357-4cb7-aa68-a5d2c100049b',
'a3393a3d-c95b-4412-9414-ead3eec8fe21',
'bae77043-a2ea-4507-ba5a-1ceaf2aad1cd',
'35d09591-c0db-48ef-bc2b-23831fc7a309',
'ba03213a-9636-485e-9597-e2aebc291c20',
'0c5485ff-194b-4d51-bc4e-285f07d457e9',
'f081c847-e9bc-4191-b4af-7d5ca30b483b',
'b96639a3-fd4b-44fc-a65c-c6c2708bd8ca',
'8d0a5913-591a-429f-b6a1-dcc43fde2824',
'3c2ce163-1a53-449e-b46b-9303c0a1f70d',
'740aaf98-ea33-48d8-9095-c015faf040c1',
'4f7221f1-e89e-4b97-802a-c770c2d9f222',
'fa937b79-ecba-4474-94c8-fda455c7c3c1',
'dd7b40d3-d253-44e4-a276-85ad73c554d2',
'75987cae-0447-406c-906b-1195d189f3ea',
'9959fc51-4db8-4094-b001-938dbb414204',
'7ecb21c1-2f9d-4925-88ec-dd0ece39341a',
'465e75ed-703c-49b9-994c-46954f6492ef',
'24f81819-29e6-4809-8110-aa70e3b00030',
'ba51f402-46f3-44de-9bf3-ad2add04beb2',
'2cc349ee-5348-4334-9b0f-c948e44b4900',
'5f9af8c9-d832-4747-877d-27e8f6bc793e',
'b2984b8c-c3fb-44cb-80d3-ff7b0ecb7220',
'63dc317c-bb5c-4c31-a878-304c3dd60224',
'4a9d8e48-fe19-40dd-b070-8c0541b24f01',
'1e9b3c2d-3e62-4224-80d6-44d5a0868c1b',
'0c3d77f6-15f0-4ca1-a94e-5b9686ba2055',
'38e7879f-2b0a-4937-8d43-b5ed45ca2c84',
'ca166144-7e6e-4f7d-ba0d-b3452af0d4cf',
'dd910f9d-d98f-45ed-8bfd-dde4fb27cc64',
'440ab320-a29b-429d-a5db-2dfd0fcf3477',
'd9afda96-7d5c-448e-8ea2-2a94cb4ffb17',
'8665e28f-630d-4308-92a4-906a72f40c4f',
'76e0d4fc-743c-403d-867f-ee720352dc61',
'8a884fca-57d8-4e54-9f49-31cf37d342f0',
'250facfa-2190-46de-aa0b-5f58f4b96145',
'bb4ac39e-7ffc-47d3-a1ab-f9e7e61bc960',
'b12de678-9c03-46e3-b6d9-eb4a4f52bb4f',
'fd04a249-870c-401e-9d48-5bc799470bda',
'5702fcb0-4482-43ff-888d-8ffc63fa6b75',
'f5df83d4-91ee-471e-9dce-07ed454c4fc7',
'e7d8fc0b-ba4b-4f91-a4e5-0f191b6d47a3',
'7494c4c2-a14a-4511-9e82-291f23428933',
'c3754c63-0b68-465e-9846-06f8e10ebd8c',
'09a03b47-2d60-434d-940d-2f39eff45f04',
'ba2457c4-c39f-44dc-a4b3-2cb3276caa98',
'8a5e71e3-b1be-4ebe-8c55-71cd5397e30c',
'6fbfd9cd-acfc-4de9-92b9-e95026800d61',
'b81444ef-c6a5-40ca-a566-78dbe59e559f',
'c17a4a10-4a90-4c94-8d7d-28b2c05ee688',
'57e5c7c1-19d1-4d15-8885-31763003be8b',
'37bfb716-c772-4aee-b7b3-3c5f7597041f',
'0e10e417-395f-4885-9312-b0c61cfb510c',
'8a030f56-d732-4ce0-8ab6-b3a368cc59a5',
'bc774aff-e1b5-48c2-9f66-678a6e658ee9',
'8a375578-7597-4bb8-8776-0792138ac714',
'f2c9ea54-c4bc-44b0-b14e-73525b7f4c5b',
'97e2c5a7-7b38-497a-8aa9-66f2a661ca21',
'b33c552a-99a2-4178-b2cc-e914aa4eccaf',
'682491fd-4416-478b-bd34-f614ef9bb2a8',
'0ebffa44-5c7e-4e55-84ca-cefeec94791a',
'607baab1-1e28-43ba-b4c2-f3d28981cf14',
'b8d8cf9d-5179-4694-85db-2cbc6583268c',
'46bba504-5cfc-4e48-8d41-e8642163c82f',
'a5be10b6-8d0d-4834-bdc5-9227eb67a105',
'3bf5dfeb-cc5e-48e7-86d8-b91763109dd4',
'24d96afd-8ba9-4d8f-83d1-507c4a3942a9',
'5756ee71-a603-4ec6-82a7-a1a62886064d',
'8384fd2e-faca-4ea0-9b91-0bd3b1f4fe40',
'59b2e308-75bc-48e7-8851-951323809bc5',
'265f0db8-a455-4bc8-8585-44732492805f',
'ad511f10-449c-46f6-937b-13840ef7db6b',
'5cb2bd2e-1d2d-4b28-9d2e-d6aecb571ef8',
'1d1974e4-1ff5-4dba-a5ef-05586b6aa142',
'ec465f3e-079e-4dd8-b4b3-cd51ce668a27',
'7d5af49d-1248-48a4-a378-888c5d9ec1b0',
'24d404d1-f4af-4526-8230-4f560f43daf1',
'5726f918-1b57-4fdb-b9e5-394c2d6b53c4',
'7975bf7f-3ace-4ba2-8439-ac5739c3b761',
'8b5453a3-c88d-45f6-a2aa-52e9ad60ac6a',
'dc7bcde8-33e5-4fda-a433-638204298dbd',
'd1dd99ce-c1f4-4f70-98a7-2317dbb511b4',
'1b07cb1c-3cef-46e9-af9e-30fd4d716c44',
'665a3ad9-3dca-4ea4-8c79-a021ae0c8caf',
'f70381eb-6ede-4a67-bbe4-4ad9e6b2f6ad',
'dc4202ec-05a4-4b2d-b488-2405e4636a0f',
'aa8eaaae-68f7-486f-b830-16edb3093ee0',
'02ab6195-c7a0-4759-bcb0-1e7a951be8b2',
'1877ba83-3fcc-4f88-89df-e07fc2fe8b57',
'311b26a5-6a35-480a-9b6c-fd8491ffe455',
'e18d5790-1ed7-4096-bd27-a8dc1509450e',
'b5036c66-08c7-4a6c-a02a-72ef86449548',
'b69e7ae7-842c-4602-9070-b47ba884f96d',
'4f4d5b61-99dd-4c73-b546-d2b93127ffd3',
'e3810685-b4e9-4295-8fab-a6686ffb9f56',
'6b66765f-59c8-4ab7-8941-d2404a1ddf53',
'bc2c3cdd-d82b-46cf-b6f7-54ba07b60f2c',
'e3fcf4ad-ca32-423f-864f-c61f4183b0d0',
'3b78ff0c-5d3c-4a94-aab0-2dd4b7359422',
'f7c5d19d-5c22-49e1-b7f8-487391ccb61e',
'54cf1555-6b30-4c21-87fb-3a2f2e4be349',
'db1e52d6-4aa1-4078-a4ea-a2973e2435cd',
'3ef76645-305c-4593-ae9d-3e721254a2f4',
'9219cb35-71db-437a-8a50-2b78ae1179bd',
'1564586b-1316-4b9f-ac18-5bd5893da069',
'031eb270-8dcc-4c05-83a4-5b55198f164a',
'9c3942c7-c1ce-4c6c-8a58-1ab81e72a800',
'4e1eee69-d645-4c13-8f30-91693d097352',
'a9fc49a0-ff28-44d5-8a08-250ca4e8b315',
'9bb38cf5-78f7-4921-be5b-3eb1593e674b',
'e425b340-f5ea-4894-b127-8f912b80b531',
'4dfd1dc2-a9fc-42f2-beca-fe615cbb8ab9',
'e8a15295-9b1c-4ec8-ad5b-394b1193afff',
'2eacbcb3-1e34-4200-be5d-7a9b51d0a2e4',
'1d5683aa-2503-4198-b76f-9227d01b639c',
'39b031bc-c048-4401-8616-255c319a8e24',
'0118a2ea-35ba-4ecb-8bca-e34729d1e6ab',
'3f45e1ce-7929-468b-9eb5-3dac7aabe0b0',
'522f804a-e5c9-4812-af28-a745989704d2',
'beae2ffc-7b96-4cd0-969f-6cd4dc9e578c',
'5ad68a6b-5049-4905-be67-5c9524cef09c',
'25dec467-51c3-4c59-9589-beb58f084ef4',
'08547a2e-8e54-4103-a45a-5cecf14b867a',
'b6b28d41-d6d7-402b-8232-e117d93d748b',
'c4fd5937-47ee-416b-8ae2-8b5ff40ae2b9',
'a1b6d446-fa8a-4e63-8d84-29536650d9e1',
'66e3f02e-8a9e-4cea-9a62-38e96f723f2e',
'b7cc10e0-14dc-477b-9390-2e4c0763210d',
'33855e4b-daef-45a2-9d08-cc4cec5634f5',
'198ebbdd-7646-4e77-b28e-abf38d84ef1f',
'93e50227-ed3d-4330-8446-3b19db3a3a6b',
'b6625ec3-defd-4ed1-996d-a5d80fcebb26',
'c9fed21f-fb49-47d7-bc18-fe15f12710cf',
'4c723a98-c777-4cfa-8f50-a562ba38bb77',
'0918d42f-49aa-4c70-aed2-b188310f2668',
'23e9ffdf-b37b-45a4-ba20-7818f69024a9',
'1ffdd049-0a79-4359-b1c6-f0cea21042a9',
'82a1876a-6df2-454e-8f0e-f167af3691c5',
'd54ed60a-a247-482a-84d2-30b3ccb4a6c6',
'c4586dde-412c-400a-951f-d2d9eb95e740',
'773a1a57-cec1-485c-8970-1172ffce2cf6',
'b0b1c1c9-9a8a-4523-9f8d-5fa2751ddfe2',
'910be7f7-2232-489a-8477-b87cc18acf02',
'47964226-3058-4b7d-8425-75d8deffb4ab',
'6a394e90-d9c2-48da-b15f-b527856748f3',
'652d48c7-f362-42dc-8b25-942afd985ade',
'1cd53367-164d-4e4d-b0af-2ae5a403e992',
'3056a58f-c3fd-4f89-bb62-47262dc9201d',
'2f6b79f0-3e73-454d-a126-fb70e0d5082d',
'0e0de862-ebbb-4544-8df5-a7d00df08e87')"
9Lb05XfF,KPO,Tiranka1861,C,Tuesday 14th of November 2023 12:53:22 AM CDT,"#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <string.h>

struct
{
    char surname[255];
    int year;
    char number[20];
} typedef Abonent;

void findBySurname(Abonent* list, int size) {
    char name[255];
    printf(""Enter surname of user: "");
    scanf_s(""%s"", name, 255);
    int count = 0;
    for (int i = 0; i < size; i++)
        if ((strcmp(name, list[i].surname) == 0))
        {
            printf(""Phone Number: %s\n"", list[i].number);
            count++;
        }
    if (count == 0)
        printf(""Noname user! We havent any info about %s :(\n"", name);
}

void findByYears(Abonent* list, int size) {
    int year;
    printf(""Enter phone of user: "");
    scanf_s(""%d"", &year);
    int count = 0;
    for (int i = 0; i < size; i++)
        if (year == list[i].year)
            count++;
    if (count == 0)
        printf(""Noname year! We havent any info about %d :(\n"", year);
    else
        printf(""We have %d users with %d year-phone\n"", count, year);
}

Abonent createNewAbonent()
{
    Abonent newAbonement;
    printf(""Enter surname of new one abonent:\t"");
    scanf_s(""%s"", newAbonement.surname, 255);

    printf(""Enter number of new one abonent:\t"");
    scanf_s(""%s"", newAbonement.number, 255);

    printf(""Enter year of new one abonent:\t"");
    scanf_s(""%d"", &newAbonement.year);

    return newAbonement;
}

Abonent* addAbonent(Abonent* list, int* size)
{
    int newSize = *size;
    Abonent* newList = (Abonent*)realloc(list, (newSize + 1) * sizeof(Abonent));
    //Abonent* newList = (Abonent*) callo
    *size = newSize + 1;
    newList[newSize] = createNewAbonent();
    return newList;
}

int deleteAbonent(Abonent* list, int size)
{
    char name[255];
    printf(""Enter surname of deleted one abonent:\t"");
    scanf_s(""%s"", name, 255);
    for (int i = 0; i < size; i++)
    {
        if ((strcmp(name, list[i].surname) == 0))
        {
            for (int j = 0; j < size - 1; j++)
                list[i] = list[j + 1];
            size--;
            list = (Abonent*)realloc(list, size * sizeof(Abonent));
        }
    }
    return size;
}

void readFromFile(FILE* fi, Abonent* list)
{
    int i = 0;

    while (!feof(fi))
    {
        fscanf_s(fi, ""%s"", list[i].surname, 255);
        fscanf_s(fi, ""%d"", &list[i].year);
        fscanf_s(fi, ""%s"", &list[i].number, 20);
        i++;
    }
}

void printFOlist(FILE* fo, Abonent *list)
{
    for (int i = 0; i < 10; i++)
    {
        //if (list[i].debt != 0)
        //{
        //    fprintf(fo, ""Group:      %d\n"", list[i].group);
        //    fprintf(fo, ""Surname:    %s\n"", list[i].surname, 255);
        //    fprintf(fo, ""Debts:      %d\n"", list[i].debt);
        //}
    }
}

void writeToFile(Abonent* list) {
    FILE* fo = NULL;
    fopen_s(&fo, ""D://УНИВЕР//КПО//31-10//vAR_6//List.txt"", ""w+t"");
    printFOlist(fo, list);
    fclose(fo);
}

void printListOfCommands() {
    printf(""\t\tMENU OF COMMANDS\n"");
    printf(""show list by surname of user\t\t\t/0\n"");
    printf(""show list by year of user's OS\t\t\t/1\n"");
    printf(""add new user info\t\t\t\t/2\n"");
    printf(""delete user info\t\t\t\t/3\n"");
    printf(""show full list of users\t\t\t\t/4\n"");
    printf(""end work of programm (write to file and exit)\t/5\n"");
}

void printList(Abonent* list, int size) {
    for (int i = 0; i < size; i++)
    {
        printf(""Surname:\t%s\n"", list[i].surname);
        printf(""Year:\t\t%d\n"", list[i].year);
        printf(""Number:\t\t%s\n"", list[i].number);
        printf(""\n\n"");
    }
}

int takeCommand(Abonent *list, int size) {
    int choice;
    
    int isCorrect = 0;
    do {
        printListOfCommands();
        printf(""Enter command: /"");
        scanf_s(""%d"", &choice);
        switch (choice)
        {
        case 0:
            printf(""\n"");
            findBySurname(list, size);
            isCorrect = 1;
            break;
        case 1:
            printf(""\n"");
            findByYears(list, size);
            isCorrect = 1;
            break;
        case 2:
            printf(""\n"");
            list = addAbonent(list, &size);
            printList(list, size);
            isCorrect = 1;
            break;
        case 3:
            printf(""\n"");
            size = deleteAbonent(list, size);
            printList(list, size);
            isCorrect = 1;
            break;
        case 4:
            printf(""\n"");
            printf(""The data from the file has been successfully read. The resulting list looks like:\n"");
            isCorrect = 1;
            printList(list, size);
            break;
        case 5:
            writeToFile(list);
            isCorrect = 0;
            break;
        default:
            printf(""INCORRECT COMMAND! TRY AGAIN!\n"");
            isCorrect = 1;
            break;
        }
    } while (isCorrect);
    return choice;
}


int main()
{
    FILE* fi = NULL;
    fopen_s(&fi, ""D://УНИВЕР//КПО//31-10//vAR_6//List.txt"", ""r+t"");

    int size;
    fscanf_s(fi, ""%d"", &size);
    Abonent *list = NULL;
    list = (Abonent*)malloc(size * sizeof(Abonent));
    readFromFile(fi, list);

    int choice = takeCommand(list, size);
    fclose(fi);
}
"
NudS6PMN,check-usernames.php,gurumutant,HTML 5,Tuesday 14th of November 2023 12:28:39 AM CDT,"<?php 
    // filename: check-usernames.php
    
    // mendeteksi pengiriman form ke halaman ini
    if (isset($_POST[""q""])) {
        echo ""Anda memilih username <strong>"". $_POST[""q""] .""</strong>"";  
    }
?>
<!DOCTYPE html>
<html lang=""en"">
<head>
    <meta charset=""UTF-8"">
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">
    <title>Document</title>
    <link rel=""stylesheet"" href=""https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"" integrity=""sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65"" crossorigin=""anonymous"">
    <script src=""https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js"" integrity=""sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V"" crossorigin=""anonymous""></script>
    <script src=""https://code.jquery.com/jquery-3.7.1.min.js"" integrity=""sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="" crossorigin=""anonymous""></script>
</head>
<body>
<form action=""<?= $_SERVER[""PHP_SELF""]; ?>"" id=""searchForm"" method=""post"">
  <label for=""q"">Username:</label>  
  <input type=""text"" name=""q"" id=""q"" placeholder=""Pilih username..."">
  <span id=""result"" role=""alert""></span><br>
  <input type=""submit"" id=""submit"" class=""btn btn-primary"" value=""Daftar"">
</form>

<script>
    $(function(){
        // event blur (kehilangan fokus) pada text input, dari penekanan tab atau klik di luar input
        $(""#q"").blur(function() {
            $(""#result"").hide();
            let uname = $(this).val(); // mengambil teks dari input 
            let url = ""ajax-check-usernames.php"";
            // mengirim data menggunakan POST, via jQuery
            var posting = $.post( url, { q: uname } );
            // aksi yang dilakukan setelah posting selesai
            posting.done(function(data) {
                if (data.indexOf(""tersedia"") != -1) {
                    $(""#result"").removeClass().addClass(""alert alert-success fade show"");
                    $(""#submit"").prop(""disabled"",false);
                } else {
                    $(""#result"").removeClass().addClass(""alert alert-warning fade show"");
                    $(""#submit"").prop(""disabled"",true);
                }                 
                $(""#result"").show();
                $(""#result"").empty().append(data).fadeOut(4000);
            });
        });
    });
</script>
</body>
</html>"
RJeZmWa7,ajax-check-usernames.php,gurumutant,PHP,Tuesday 14th of November 2023 12:23:17 AM CDT,"<?php 
    //  filename: ajax-check-usernames.php
    if (isset($_POST[""q""])) {
        // array untuk simulasi username yang sudah ada di database, bisa ditambah sendiri
        $usernames = ['hendri', 'winarto', 'hendriwi', 'hendriwinarto'];
        // mengecek ada tidaknya username yang akan digunakan oleh user
        if (in_array($_POST[""q""], $usernames)) {
            echo ""Username sudah digunakan"";
        } else {
            echo ""Username tersedia"";
        }
    }
?>"
gzu3BxpQ,Assignment 2,brandblox,SQL,Tuesday 14th of November 2023 12:15:10 AM CDT,"-- Create Project table
CREATE TABLE Project (
    pno NUMBER PRIMARY KEY,
    pname VARCHAR2(50) NOT NULL,
    manager_no NUMBER,
    CONSTRAINT FK_Manager FOREIGN KEY (manager_no) REFERENCES Manager_details(manager_no)
);

-- Create Manager_details table
CREATE TABLE Manager_details (
    manager_no NUMBER PRIMARY KEY,
    manager_name VARCHAR2(50)
);

INSERT INTO Manager_details (manager_no, manager_name) VALUES (101, 'John Manager');
INSERT INTO Manager_details (manager_no, manager_name) VALUES (102, 'Jane Manager');

-- Ensure that the manager_no in Project references existing manager_no in Manager_details
INSERT INTO Project (pno, pname, manager_no) VALUES (1, 'Project A', 101);
INSERT INTO Project (pno, pname, manager_no) VALUES (2, 'Project B', 102);
-- Try to insert a record with a non-existent manager_no, which will be restricted
INSERT INTO Project (pno, pname, manager_no) VALUES (3, 'Project C', 103); -- This should fail

-- Alter the EMP table to add 'commission' attribute and modify 'sal' datatype
ALTER TABLE EMP ADD commission NUMBER(7, 2);

-- Modify the datatype of 'sal'
ALTER TABLE EMP MODIFY sal NUMBER(7, 2);

-- Insert a new record with all attributes
INSERT INTO EMP (empid, name, date_of_birth, city, salary, commission, dob, designation, dependence)
VALUES (201, 'New Employee', TO_DATE('1990-01-01', 'YYYY-MM-DD'), 'City X', 80000.00, 1000.00, TO_DATE('2022-01-01', 'YYYY-MM-DD'), 'Analyst', 1);

-- Add 'designation' attribute to EMP table
ALTER TABLE EMP ADD designation VARCHAR2(50);

-- Update designation for existing records
UPDATE EMP SET designation = 'Programmer' WHERE empid IN (101, 102, 103);

-- Add 'manager_no' attribute to EMP table
ALTER TABLE EMP ADD manager_no NUMBER(10);

-- Update 'manager_no' for existing records
UPDATE EMP SET manager_no = 1001 WHERE empid = 101;
UPDATE EMP SET manager_no = 1002 WHERE empid = 102;"
AdD7StK8,邀您一起看：云口令,xiaomianao666,JavaScript,Monday 13th of November 2023 11:30:04 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥云口令@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5LqR5Y+j5LukXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eVwiLFwiY29sX3R5cGVcIjpcIng1X3dlYnZpZXdfc2luZ2xlXCIsXCJmaW5kX3J1bGVcIjpcImpzOnNldFJlc3VsdChbe1xcbiAgICB1cmw6XFxcImh0dHBzOi8veGlhb21pYW5hby5sYW56b3VtLmNvbS9peXVtSzFlcXcxN2NcXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwiXCJ9IiwidGl0bGUiOiLkupHlj6Pku6QifQ==
2gw4gbUv,Untitled,35657,C++,Monday 13th of November 2023 11:12:08 PM CDT,"#include <iostream>
#include <iomanip>
#include <conio.h>
#include <Windows.h>

using namespace std;


//Лилия здесь много вариантов решения задачи. Получается вы запрашиваете параметры комнат и задаете параметры обоев.

//Теперь не помешало бы определиться какими обоями вы будете обклеивать какую комнату.

//Как вариант, можно добавить в классе Room поле wallpaper_ и запрашивать данные обоев для комнаты вместе с другими параметрами(в этом случае класс Wallpaper должен быть объявлен до класса Room).

//Тогда метод для расчета количества и стоимости обоев можно сделать в классе Flat.Он будет просто последовательно перебирать все комнаты, считать площадь, подлежащую оклеиванию, и делить на площадь рулона обоев.

//Примерный вариант решения задачи:


class Wallpaper {
public:
    Wallpaper() : wallpaper_art_(""""), wallpaper_length_(0), wallpaper_width_(0), price_roll_(0) {}; // конструктор по умолчанию

    Wallpaper(string wallpaper_name, const double wallpaper_length, const double wallpaper_width, double price_roll) :
        wallpaper_art_(wallpaper_name), wallpaper_length_(wallpaper_length), wallpaper_width_(wallpaper_width), price_roll_(price_roll) {};

    double WallpaperSquare() {
        return wallpaper_length_ * wallpaper_width_;
    }

    string wallpaper_art_; // название обоев
    double wallpaper_length_; //длинна обоев в рулоне
    double wallpaper_width_; //ширина обоев в рулоне
    double price_roll_; // стоимость рулона обоев
};


class Room {
public:

    Room() : name_(""""), room_length_(0), room_width_(0), room_height_(0), ceiling_(0), wpaper_({}) {};

    Room(string name, double lenght, double width, double height, bool ceiling) : name_(name), room_length_(lenght), room_width_(width), room_height_(height), ceiling_(ceiling), wpaper_({}) {};

    double RoomSquare() {
        double Square_room = (2 * room_length_ + 2 * room_width_) * room_height_;
        if (ceiling_ == 1) {
            Square_room += room_length_ * room_width_;
        }
        return Square_room;
    }



    string name_; // название комнаты
    double room_length_; // длинна
    double room_width_; // ширина
    double room_height_; // высота
    bool ceiling_; // здесь подойдет bool (0 - не оклеивать, 1 - оклеивать)
    Wallpaper wpaper_;// здесь не массив обоев а конкретный тип обоев
};


class Flat {
public:

    Flat(const int new_rooms_count) : rooms_count_(new_rooms_count), rooms_(new Room[new_rooms_count]) {
        for (int i = 0; i < rooms_count_; i++)
        {
            cin >> rooms_[i].name_;
            cin >> rooms_[i].room_length_;
            cin >> rooms_[i].room_width_;
            cin >> rooms_[i].room_height_;
            cin >> rooms_[i].ceiling_;
            // запрашиваем дополнительно параметры обоев для комнаты
            cin >> rooms_[i].wpaper_.wallpaper_art_; 
            cin >> rooms_[i].wpaper_.wallpaper_length_;
            cin >> rooms_[i].wpaper_.wallpaper_width_;
            cin >> rooms_[i].wpaper_.price_roll_;
        }
    }; // параметризованный конструктор, параметр - количество комнат в квартире

    void show_rooms() {
        for (int i = 0; i < rooms_count_; i++) {
            cout << ""Название комнаты: "" << rooms_[i].name_ << "": длинна: "" << rooms_[i].room_length_ <<
                "" м ширина : "" << rooms_[i].room_width_ << "" м высота : "" << rooms_[i].room_height_ << "" м, оклеивать потолок? ""
                << rooms_[i].ceiling_ << endl;
        }
        cout << endl;
    }

    void get_calculation() {
        for (int i = 0; i < rooms_count_; i++) {
            int wallpaper_count = rooms_[i].RoomSquare() / rooms_[i].wpaper_.WallpaperSquare() + 1; // прибавляем 1 и преобразуем к типу int для получения целого количества рулонов
            cout << ""Для оклейки комнаты "" << rooms_[i].name_ << "" необходимо "" << wallpaper_count << "" рулонов обоев "" << rooms_[i].wpaper_.wallpaper_art_ << "" стоимостью "" << rooms_[i].wpaper_.price_roll_ * wallpaper_count << "" рублей"" << endl;
        }
    }

    int rooms_count_;// количество комнат в квартире
    Room* rooms_; // массив комнат 


    ~Flat() {
        delete[]  rooms_;
    }

};

int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    int count;
    // здесь запрашиваем количество комнат, создаем Flat под заданное количество комнат, потом циклом запрашиваем параметры комнат и записываем эти параметры в каждую комнату с помощью SetRoom
    cout << ""Введите количество комнат в квартире: "" << endl;
    cin >> count;
    cout << ""Введите последовательно название комнат, длину, ширину, высоту каждой, 1, если нужно оклеивать потолок или 0, если потолок не нужно, название обоев, длину обоев, ширину обоев, стоимость обоев"" << endl;
    Flat my_flat(count);

    my_flat.show_rooms();


    my_flat.get_calculation();
}"
F8HEjiWh,Untitled,Madi_Perth,Linden Scripting,Monday 13th of November 2023 10:01:23 PM CDT,"/*
This file contains a series of defines and functions that will
allow you to use linkSetData memory for lists.  These lists will
not have all the versitlity of normal LSL lists.

The format in LinksetData memory are as follows.

The first entry in a list is the master header file.  It is 
defined as the following.

linkset listName is the list listName and the data is the number of
entries the list.

<listName> -> <list entries number>

the format of each list entry is as follows

<listName>|<entrynumber>|<data>

*/
#define DEBUG

DS(string sayd)
{
#ifdef DEBUG 
    llOwnerSay(sayd);
#endif
}

// The first step is the define the linkSetList entry
integer linkSetDefine(string listName)
{
    // test to see if entry already exists, if so return error
    // of -1
    if(llLinksetDataRead(listName) != """")
        return -1;
    else 
        llLinksetDataWrite(listName, ""0"");
    return 1; // linkSetList Created.
}

// add a entry to the linkset entry and increment the 
// the count by one when adding.   create the linkSet 
// if it does not exist. 
integer addLinkData(string listName, string data)
{
    integer tcList;
    // if listName exists, add link
    // and increment count.
    if(linkSetDefine(listName) == 1)
        tcList = incrmLinkCount(listName, 0);
    else
        tcList = incrmLinkCount(listName, 1);

    llLinksetDataWrite(listName +""|""+ (string) tcList +""|""+data, ""0"");    

    return tcList;
}

// get count total from base and increase it by 'count'
integer incrmLinkCount(string listName, integer count)
{
    integer currentNum = (integer) llLinksetDataRead(listName);
    
    currentNum += count;
    llLinksetDataWrite(listName, (string) currentNum);

    return currentNum;
}

// Return the number of entries in a linkSetList
integer GetLinkSetListLength(string listName)
{
    // return error if linkSetList does not exits of -1 
    string listLength = llLinksetDataRead(listName);
    if(listLength == """")
        return -1;
    else
        return (integer) listLength;
}

default
{
    state_entry()
    {
        llLinksetDataReset();
    }

    touch_end(integer num_detected)
    {
        DS((string) addLinkData(""test"", (string) llGenerateKey()));
        DS(llDumpList2String(llLinksetDataListKeys(0,0), ""\n""));
    }
}
"
NAaAD1PD,Detect cycle in an undirected graph,jayati,C++,Monday 13th of November 2023 10:01:19 PM CDT,"//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
    
  private:
    bool detectcycle(int src,vector<int> adj[],int vis[])
    {
        vis[src]=1;
        queue<pair<int,int>> q;
        q.push({src,-1});
        while(!q.empty())
        {
            int node=q.front().first;
            int parent=q.front().second;
            q.pop();
            
            for(auto adjnode:adj[node])
            {
                if(!vis[adjnode])
                {
                    vis[adjnode]=1;
                    q.push({adjnode,node});
                }
                else if(parent!=adjnode)
                {
                    return true;
                }
            }
        }
        return false;
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
            int vis[V]={0};
            for(int i=0;i<V;i++)
            {
                if(!vis[i])
                {
                    if(detectcycle(i,adj,vis)==true)
                    {
                        return true;
                    }
                }
            }
            return false;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<int> adj[V];
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(V, adj);
        if (ans)
            cout << ""1\n"";
        else
            cout << ""0\n"";
    }
    return 0;
}
// } Driver Code Ends"
EJN4GCqd,c karyawan,wobi,C,Monday 13th of November 2023 09:42:27 PM CDT,"#include <stdio.h>
 
int main(void)
{

  char nama[50];
  char golongan;
  float tunjangan, gaji_total;
  const int gapok = 300000;
 
  // proses input
  printf(""Nama Karyawan: \n"");
  gets(nama);
 
  printf(""Golongan: \n"");
  scanf(""%c"",&golongan);
 
  // tentukan jumlah upah per jam berdasarkan golongan
  switch (golongan) {
    case 'A':
      tunjangan = 0.05 * gapok;
      break;
    case 'B':
      tunjangan = 0.10 * gapok;
      break;
    case 'C':
      tunjangan = 0.15 * gapok;
      break;
    case 'D':
      printf(""Tidak Tersedia"");
      break;
  }
 
  gaji_total = tunjangan + gapok;
 
  // proses output
  printf(""\n"");
  printf(""Gaji Pokok    : Rp. %d\n"", 300000);
  printf(""Tunjangan     : Rp. %2f\n"", tunjangan);
  printf(""Gaji Total    : Rp. %2f\n"", gaji_total);
 
  return 0;
}"
CnngDbV8,RotateAnimation,leomovskii,C#,Monday 13th of November 2023 09:12:42 PM CDT,"using UnityEngine;

public class RotateAnimation : MonoBehaviour {

	public Vector3 speed;
	
	void Update() {
		transform.Rotate(speed * Time.deltaTime);
	}
}"
mUP56rBb,# bashfulpy.py,here2share,Python,Monday 13th of November 2023 08:56:45 PM CDT,"# bashfulpy.py

import subprocess
import json
import tempfile
import os

arg1 = 2
arg2 = 4
arg3 = 6
arg4 = 8

# Create a Bash script to perform the calculations and output the result as JSON
script = f'''
@echo off

set /a arg1_result={arg1} * 9
set /a arg2_result={arg2} * 9
set /a arg3_result={arg3} * 9
set /a arg4_result={arg4} * 9

echo (%arg1_result%, %arg2_result%, %arg3_result%, %arg4_result%)
'''

# Create a temporary file to save the script
with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.bat') as script_file:
    script_file.write(script)
    script_file_name = script_file.name

# Call the script using cmd.exe to perform the calculations and obtain the result as bytes
result_bytes = subprocess.check_output(['cmd.exe', '/C', script_file_name], shell=True)

# Decode the result bytes into a string
result_string = eval(result_bytes.decode().strip())

print(""Received result:"", [result_string])

# Clean up the temporary script file
os.remove(script_file_name)"
vK9LxwdK,newest app,taina1,TypeScript,Monday 13th of November 2023 08:51:19 PM CDT,"import React, { useEffect, useState } from ""react"";
import ""./App.css"";
import MapBox from ""./mapBox"";
import { FeatureCollection } from ""geojson"";
import InputBox from ""./inputBox"";
import REPL from ""./REPL/components/REPL"";
import { getSearchJSON, overlayData } from ""./overlay"";

// REMEMBER TO PUT YOUR API KEY IN A FOLDER THAT IS GITIGNORED!!
// (for instance, /src/private/api_key.tsx)
// import {API_KEY} from ""./private/mapbox_api_key"";
// import {ACCESS_TOKEN} from ""./private/mapbox_api_key""; // my attempt
// import {ACCESS_TOKEN} from ""./private/mapbox_api_key.js"";

/**
 * mapboxAccessToken, [longitude, latitude, zoom], onMove, style, mapStyle
 */
function App() {
  /* GOAL #1: whenever user enters a new searchWord in REPLINPUT textbox, pass that to
        mapBox, which will take that searchWord and use it to call the backend (using fetch)
        the result of that call to fetch will be a FeatureCollection of matching features
        GOAL #2:
        pass the feature collection to Overlay.TS as an overlay
  
      */
  const emptyFeatureCollection: FeatureCollection = {
    type: ""FeatureCollection"",
    features: [],
  };

  const [searchWord, setSearchWord] = useState("""");
  const [searchOverlay, setSearchOverlay] = useState<GeoJSON.FeatureCollection>(emptyFeatureCollection);

  async function handleSubmit(searchWord: string) {
    
    try {
      const result = await getSearchJSON(searchWord);
      setSearchOverlay(result);
    } catch (error) {
      console.error(""Search failed:"", error);
      // Handle the error, e.g., show an error message to the user
    }
      // console.log(""in app, handle submit found search word: "", searchWord)
      // const searchResult = await getSearchJSON(searchWord);
      // return searchResult
      // // Do something with the search result, e.g., update state or pass it to another component
      // console.log(""Search result:"", searchResult);
    
  }

  return (
    <div className=""App"">
      <InputBox searchWord={searchWord} setSearchWord={setSearchWord} handleSubmit={handleSubmit}/>
      {/* <REPL searchWord={searchWord} setSearchWord={setSearchWord} /> */}
    
      <MapBox searchOverlay = {searchOverlay} setSearchOverlay = {setSearchOverlay} searchWord={searchWord} />

      console.log(""searchword IS "", searchWord);
    </div>
  );
}

export default App;
"
Ez5du0XX,newest overlay,taina1,TypeScript,Monday 13th of November 2023 08:51:04 PM CDT,"import { FeatureCollection, Feature } from ""geojson"";
import { FillLayer } from ""react-map-gl"";

/**
 * This file handles overlay logic to help mapBox work
 */

// Import the raw JSON file
import rl_data from ""./geodata/fullDownload.json"";
// you may need to rename the downloaded .geojson to .json


/* fetches the entire json, for the initial highlighting state */
export async function getGeoJSON() :  Promise<FeatureCollection> {
  console.log(""running getGeoJSON..."");
  const port = 3234;
  const path = ""http://localhost:"" + port + ""/"";
  const link = path + ""bboxFilter?minlong=all&minlat=all&maxlong=all&maxlat=all"";
  const fetch1 = await fetch(link)
  const json1 = await fetch1.json()
  let result: string = json1.responseMap.result
  let features: FeatureCollection = json1.responseMap.feature_collection
  console.log(features)
  // check that ""result"" from the responseMap is success. Otherwise return an error 
  if (result === ""success"") {
    return json1.responseMap.feature_collection;
      // return new Promise((resolve) => {
      //   resolve(features);
      //   });
    } else {
      // Return a rejected promise with an error message.
      return Promise.reject(new Error(""Search failed"")); 
    }
}

// this basically gets the data and returns it
export function overlayData(): Promise<FeatureCollection>  {
  
    return (isFeatureCollection(getGeoJSON())) ? getGeoJSON() : Promise.reject(new Error(""Search failed, not a FeatureCollection""));
}

  // return fetch(link)
  //   .then((response) => response.json())
  //   .then((json) => {
  //     return isFeatureCollection(json.data) ? json.data : undefined
  //   });



/* fetches the data based on a search keyword */
export async function getSearchJSON(keyword: string): Promise<FeatureCollection> {
  const port = 3234;
  const path = ""http://localhost:"" + port + ""/"";
  const link = path + ""search?keyword="" + keyword;
  console.log('Before fetch');

  const fetch1 = await fetch(link)
  const json1 = await fetch1.json()
  console.log('after fetch');

  let result: string = json1.responseMap.result
  console.log(json1.responseMap)
  let features: FeatureCollection = json1.responseMap.feature_collection
  console.log(features)
  // check that ""result"" from the responseMap is success. Otherwise return an error 
  if (result === ""success"") {
    return (isFeatureCollection(features)) ? features : Promise.reject(new Error(""Search failed, not a FeatureCollection"")); ;
      // return new Promise((resolve) => {
      //   resolve(features);
      //   });
    } else {
      // Return a rejected promise with an error message.
      return Promise.reject(new Error(""Search failed"")); 
    }
}


function isFeatureCollection(json: any): json is FeatureCollection {
    console.log(""json.type is "", json.type);
    console.log(""json.data is "", json.data);
    return json.type === ""FeatureCollection"";
}




const propertyName = ""holc_grade"";
export const geoLayer: FillLayer = {
 id: ""geo_data"",
 type: ""fill"",
 paint: {
    // TODO: can we go over the syntax here?
   ""fill-color"": [
     ""match"",
     [""get"", propertyName],
     ""A"",
     ""#5bcc04"",
     ""B"",
     ""#04b8cc"",
     ""C"",
     ""#e9ed0e"",
     ""D"",
     ""#d11d1d"",
     ""#ccc"",
   ],
   ""fill-opacity"": 0.2,
 },
};
const searchOverlayPropertyName = ""holc_grade""; // Adjust this property name based on your search overlay data
export const searchOverlayGeoLayer: FillLayer = {
  id: ""search_overlay_data"",
  type: ""fill"",
  paint: {
    ""fill-color"": [
      ""match"",
      [""get"", searchOverlayPropertyName],
      ""some_value_for_highlighted_area"",
      ""#ffcc00"", // Adjust the color for highlighting
      ""#ccc"",    // Default color for non-highlighted areas
    ],
    ""fill-opacity"": 0.5, // Adjust opacity if needed
  },
};"
LprcW4kL,newest mapbox,taina1,TypeScript,Monday 13th of November 2023 08:50:39 PM CDT,"import Map, { Layer, MapLayerMouseEvent, Source, ViewStateChangeEvent} from ""react-map-gl"";
import ""mapbox-gl/dist/mapbox-gl.css"";
import { FeatureCollection } from ""geojson"";
import {
  Dispatch,
  SetStateAction,
 
  KeyboardEvent,
} from ""react"";
import { useState, useEffect } from 'react'
import {token} from ""./private/api"";
import { geoLayer, overlayData, getGeoJSON, getSearchJSON, searchOverlayGeoLayer } from ""./overlay"";
// import REPL from ""./REPL/components/REPL""

// usually interfaces are file scoped, which is why they are defined
// outside of the main function being exported
interface MapBoxProps {
  searchWord: string;
  searchOverlay: FeatureCollection
  setSearchOverlay:  Dispatch<SetStateAction<FeatureCollection>>;
}

interface LatLong { 
  minLong: number;
  minLat: number;
  maxLong: number;
  maxLat: number;
}
interface PLatLong {
  lat: number;
  long: number;
}

export default function mapBox(props: MapBoxProps) {

  const USLatLong: LatLong = { minLong: -124.736342 ,minLat: 24.521208, maxLong: -66.945392, maxLat:49.382808};
  const ProvidenceLatLong: PLatLong = { lat: 41.824, long: -71.4128 };
  
  const initialZoom = 10;

  function onMapClick(e: MapLayerMouseEvent) {
    console.log(e.lngLat.lat);
    console.log(e.lngLat.lng);
  }

  // const [viewState, setViewState] = useState({
  //   minLong: USLatLong.minLong,
  //   minLat: USLatLong.minLat,
  //   maxLong: USLatLong.maxLong,
  //   maxLat: USLatLong.maxLat,
  //   zoom: initialZoom,
  // });
  const [viewState, setViewState] = useState({
    longitude: ProvidenceLatLong.long,
    latitude: ProvidenceLatLong.lat,
    zoom: initialZoom,
  });

  const emptyFeatureCollection: FeatureCollection = {
    type: ""FeatureCollection"",
    features: [],
  };

  const [overlay, setOverlay] = useState<GeoJSON.FeatureCollection | undefined>(emptyFeatureCollection);
  const [searchOverlay, setSearchOverlay] = useState<GeoJSON.FeatureCollection | undefined>(emptyFeatureCollection);

  useEffect(() => {
    const fetchData = async () => {
      if (!overlay) {
          
        const data = await overlayData(); // Fetch regular data
        setOverlay(data);
    }
     
    };
    // // if (props.searchWord) {}
    // const fetchHighlightingData = async () => {
      
    //     const highlight = await getSearchJSON(props.searchWord);
        setSearchOverlay(props.searchOverlay);
      
    // };
    
    // fetchData();
    // fetchHighlightingData();
  }, [props.searchOverlay]);

    // // runs on the first render, iniitalizes redlining w/ all data pts
    // useEffect(() => {
    //   let data = emptyFeatureCollection
    //     overlayData(data); 
    //     setOverlay(data);
    //   return () => {
    //   };
    // }, []);
  
    // useEffect(() => {
    //   let isMounted = true;
    //   const fetchData = async () => {
    //     const data = await getSearchJSON(props.keyword);
    //     if (isMounted) {
    //       setSearchOverlay(data);
    //     }
    //   }
    //   return () => {
    //   };
    // }, [props.keyword]);

    // useEffect(() => {
    //   const fetchData = async () => {
    //     const data = await overlayData();
    //     setOverlay(data);
    //   };
  
    //   fetchData();
    // }, []);

///TO DO: UNCOMMENT IF ALL GOES WRONG
  // useEffect(() => {
  //   console.log(""fetching data ..."");
  //   const fetchData = async () => {
  //     const data = await overlayData();
  //     console.log(""data is "", data);
  //     setOverlay(data);
  //   };

  //   fetchData();
  // }, []);


  return (
    <Map
      // the following fields are props (properties) of the map component
      mapboxAccessToken= { token }

      // longitude={viewState.longitude}
      // latitude={viewState.latitude}
      // zoom={viewState.zoom}
      /* note that the 3 lines above can be re-written as this line below */
      // the syntax of the line below is called 'spread syntax'
      // read more about it here: https://stackoverflow.com/questions/31048953/what-are-these-three-dots-in-react-doing/31049016#31049016
      {...viewState}

      onMove={(ev: ViewStateChangeEvent) => setViewState(ev.viewState)}
      style={{ width: window.innerWidth, height: window.innerHeight }}
      mapStyle={""mapbox://styles/mapbox/streets-v12""}
      onClick={(ev: MapLayerMouseEvent) => onMapClick(ev)}

      // Below, Source and Layer are children of the Map component
    >
      <Source id=""geo_data"" type=""geojson"" data={ overlay }>
        {/* <Layer id={geoLayer.id} type={geoLayer.type} paint={geoLayer.paint} /> */}
        <Layer {...geoLayer} />

      </Source>
      {/* <REPL /> */}
      <Source id=""search_overlay_data"" type=""geojson"" data={searchOverlay}>
        <Layer {...searchOverlayGeoLayer} />
      </Source>
      

    </Map>
  )
}"
V90aHjpt,old main app,taina1,TypeScript,Monday 13th of November 2023 08:47:22 PM CDT,"import React, { useEffect, useState } from ""react"";
import ""./App.css"";
import MapBox from ""./mapBox"";
import InputBox from ""./inputBox"";
import REPL from ""./REPL/components/REPL"";
import { getSearchJSON } from ""./overlay"";

// REMEMBER TO PUT YOUR API KEY IN A FOLDER THAT IS GITIGNORED!!
// (for instance, /src/private/api_key.tsx)
// import {API_KEY} from ""./private/mapbox_api_key"";
// import {ACCESS_TOKEN} from ""./private/mapbox_api_key""; // my attempt
// import {ACCESS_TOKEN} from ""./private/mapbox_api_key.js"";

/**
 * mapboxAccessToken, [longitude, latitude, zoom], onMove, style, mapStyle
 */
function App() {
  /* GOAL #1: whenever user enters a new searchWord in REPLINPUT textbox, pass that to
        mapBox, which will take that searchWord and use it to call the backend (using fetch)
        the result of that call to fetch will be a FeatureCollection of matching features
        GOAL #2:
        pass the feature collection to Overlay.TS as an overlay
  
      */

  const [searchWord, setSearchWord] = useState("""");

  function handleSubmit(searchWord: string) {
    console.log(""in app, handle submit found search word: "", searchWord)
    getSearchJSON(searchWord);
  };

  return (
    <div className=""App"">
      <InputBox searchWord={searchWord} setSearchWord={setSearchWord} handleSubmit={handleSubmit}/>
      {/* <REPL searchWord={searchWord} setSearchWord={setSearchWord} /> */}
    
      <MapBox searchWord={searchWord} />

      console.log(""searchword IS "", searchWord);
    </div>
  );
}

export default App;
"
nUx1f6ke,old main overlay,taina1,TypeScript,Monday 13th of November 2023 08:46:58 PM CDT,"import { FeatureCollection } from ""geojson"";
import { FillLayer } from ""react-map-gl"";

/**
 * This file handles overlay logic to help mapBox work
 */

// Import the raw JSON file
import rl_data from ""./geodata/fullDownload.json"";
// you may need to rename the downloaded .geojson to .json


/* fetches the entire json, for the initial highlighting state */
export async function getGeoJSON() {
  console.log(""running getGeoJSON..."");
  const port = 3234;
  const path = ""http://localhost:"" + port + ""/"";
  const link = path + ""bboxFilter?minlong=all&minlat=all&maxlong=all&maxlat=all"";

  return fetch(link)
    .then((response) => response.json())
    .then((json) => {
      return isFeatureCollection(json.data) ? json.data : undefined
    });
}

/* fetches the data based on a search keyword */
export async function getSearchJSON(keyword: string): Promise<FeatureCollection | undefined> {
  const port = 3234;
  const path = ""http://localhost:"" + port + ""/"";
  const link = path + ""search?"" + keyword;


  return fetch(link)
    .then((response) => response.json())
    .then((json) => {
      return json.data;
      // return isFeatureCollection(json.data) ? json.data : undefined
    });
}


function isFeatureCollection(json: any): json is FeatureCollection {
    console.log(""json.type is "", json.type);
    console.log(""json.data is "", json.data);
    return json.type === ""FeatureCollection"";
}

// this basically gets the data and returns it
export function overlayData(): GeoJSON.FeatureCollection | undefined {
    return (isFeatureCollection(rl_data)) ? rl_data : undefined;
}

const propertyName = ""holc_grade"";
export const geoLayer: FillLayer = {
 id: ""geo_data"",
 type: ""fill"",
 paint: {
    // TODO: can we go over the syntax here?
   ""fill-color"": [
     ""match"",
     [""get"", propertyName],
     ""A"",
     ""#5bcc04"",
     ""B"",
     ""#04b8cc"",
     ""C"",
     ""#e9ed0e"",
     ""D"",
     ""#d11d1d"",
     ""#ccc"",
   ],
   ""fill-opacity"": 0.2,
 },
};
"
Z667Q4wH,old main mapbox,taina1,TypeScript,Monday 13th of November 2023 08:46:29 PM CDT,"import Map, { Layer, MapLayerMouseEvent, Source, ViewStateChangeEvent} from ""react-map-gl"";
import ""mapbox-gl/dist/mapbox-gl.css"";
import { useState, useEffect } from 'react'
import token from ""./private/mapbox_api_key"";
import { geoLayer, overlayData, getGeoJSON, getSearchJSON } from ""./overlay"";
// import REPL from ""./REPL/components/REPL""

// usually interfaces are file scoped, which is why they are defined
// outside of the main function being exported
interface LatLong { 
  lat: number;
  long: number;
}

export default function mapBox( { searchWord }) {

  const ProvidenceLatLong: LatLong = { lat: 41.824, long: -71.4128 };
  const initialZoom = 10;

  function onMapClick(e: MapLayerMouseEvent) {
    console.log(e.lngLat.lat);
    console.log(e.lngLat.lng);
  }

  const [viewState, setViewState] = useState({
    longitude: ProvidenceLatLong.long,
    latitude: ProvidenceLatLong.lat,
    zoom: initialZoom,
  });

  const [overlay, setOverlay] = useState<GeoJSON.FeatureCollection | undefined>(undefined);
  const [searchOverlay, setSearchOverlay] = useState<GeoJSON.FeatureCollection | undefined>(undefined);

    // // runs on the first render, iniitalizes redlining w/ all data pts
    // useEffect(() => {
    //   const fetchData = async () => {
    //     const data = await getGeoJSON();
    //     console.log(""initial geoData is:"", data);
    //     overlayData(data); 
    //     setOverlay(data);
    //   }
    //   return () => {
    //   };
    // }, []);
  
    // useEffect(() => {
    //   let isMounted = true;
    //   const fetchData = async () => {
    //     const data = await getSearchJSON(props.keyword);
    //     if (isMounted) {
    //       setSearchOverlay(data);
    //     }
    //   }
    //   return () => {
    //   };
    // }, [props.keyword]);




  useEffect(() => {
    console.log(""fetching data ..."");
    const fetchData = async () => {
      const data = await getGeoJSON();
      console.log(""data is "", data);
      setOverlay(data);
    }
  }, []);


  return (
    <Map
      // the following fields are props (properties) of the map component
      mapboxAccessToken= { token }

      // longitude={viewState.longitude}
      // latitude={viewState.latitude}
      // zoom={viewState.zoom}
      /* note that the 3 lines above can be re-written as this line below */
      // the syntax of the line below is called 'spread syntax'
      // read more about it here: https://stackoverflow.com/questions/31048953/what-are-these-three-dots-in-react-doing/31049016#31049016
      {...viewState}

      onMove={(ev: ViewStateChangeEvent) => setViewState(ev.viewState)}
      style={{ width: window.innerWidth, height: window.innerHeight }}
      mapStyle={""mapbox://styles/mapbox/streets-v12""}

      // Below, Source and Layer are children of the Map component
      >
      <Source 
      id=""geo_data"" type=""geojson"" data={ overlay }>
        <Layer id={geoLayer.id} type={geoLayer.type} paint={geoLayer.paint} />
      </Source>
      {/* <REPL /> */}

    </Map>
  )
}
"
mryeN24b,McKathlin Escape Event,McKathlin,Ruby,Monday 13th of November 2023 08:39:28 PM CDT,"# To call a common event on escape failure,
# set the common event ID you want to use below.
# If the common event ID is set to 0, no common event will be called
# on that condition.
$ESCAPE_FAILURE_COMMON_EVENT_ID = 0

class Scene_Battle
  #--------------------------------------------------------------------------
  # * Frame Update (party command phase: escape)
  #   REPLACEMENT method - Identical to RGSS, except where noted.
  #--------------------------------------------------------------------------
  def update_phase2_escape
    # Calculate enemy agility average
    enemies_agi = 0
    enemies_number = 0
    for enemy in $game_troop.enemies
      if enemy.exist?
        enemies_agi += enemy.agi
        enemies_number += 1
      end
    end
    if enemies_number > 0
      enemies_agi /= enemies_number
    end
    # Calculate actor agility average
    actors_agi = 0
    actors_number = 0
    for actor in $game_party.actors
      if actor.exist?
        actors_agi += actor.agi
        actors_number += 1
      end
    end
    if actors_number > 0
      actors_agi /= actors_number
    end
    # Determine if escape is successful
    success = rand(100) < 50 * actors_agi / enemies_agi
    # If escape is successful
    if success
      # Play escape SE
      $game_system.se_play($data_system.escape_se)
      # Return to BGM before battle started
      $game_system.bgm_play($game_temp.map_bgm)
      # Battle ends
      battle_end(1)
    # If escape is failure
    else
      # McKathlin new: call Escape Failure Common Event.
      common_event_id = $ESCAPE_FAILURE_COMMON_EVENT_ID
      common_event = $data_common_events[common_event_id]
      if common_event != nil
        $game_system.battle_interpreter.setup(common_event.list, 0)
      end
      # End of new McKathlin code.
      # Clear all party member actions
      $game_party.clear_actions
      # Start main phase
      start_phase4
    end
  end # def update_phase2_escape
end # class Scene_Battle"
