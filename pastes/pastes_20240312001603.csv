id,title,username,language,date,content
sgJgiE8t,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Monday 11th of March 2024 07:04:39 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_678178.pdf

Working as of:
12 March 2024





















"
iLnqpXW2,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Monday 11th of March 2024 06:42:50 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!

You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.

This is not my pastebin account and im using a random inactive one to post this.
 
PDF guide here:
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
11 March 2024















































"
tmC8kg5k,Untitled,Alexplazz,Lua,Monday 11th of March 2024 06:41:38 PM CDT,"local AsyncAdminCore = game:GetService(""ServerScriptService""):WaitForChild(""AsyncAdminCore"")
AsyncAdminCore = require(AsyncAdminCore)
-- Access modules with Modules.ModuleName
-- EG:
AsyncAdminCore.Modules.CommandHandler.RegisterCommandHolder(""Test Commands"", NewCommands)"
2qqSrxtA,ergasia,DimitrisBousoulas,Bash,Monday 11th of March 2024 06:21:38 PM CDT,w4trwrt
Whxgy39G,Untitled,skimono,C++,Monday 11th of March 2024 05:47:01 PM CDT,"#pragma optimize (""O3"");
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <set>
#include <algorithm>
#include <map>
#include <string>
#include <unordered_map>
#include <cassert>
#include <bitset>
#include <unordered_set>

using namespace std;
#define int long long
const int inf = 2e9;

void go(int a, int t, int& ans_a, int& ans_b) {
    if (a % (int)2 == (int)0) {
        int cnt = t / a;
        int sum_progres = cnt * (cnt + (int)1) / (int)2;
        ans_a += sum_progres * (a / (int)2);
        ans_b += sum_progres * (a / (int)2);
        int last = cnt * a - (int)1;
        int len = t - last;
        ans_a += (cnt + (int)1) * (len - len / 2);
        ans_b += (cnt + (int)1) * (len / 2);
    }
    else {
        int cnt = t / a;
        int cnt1 = cnt / (int)2;
        int cnt2 = cnt - cnt1;
        int sum_progress;
        sum_progress = (cnt2 * (cnt2 + (int)1)) / (int)2;
        ans_a += sum_progress * (a - a / (int)2);
        sum_progress = (cnt1 * (cnt1 + (int)1)) / (int)2;
        ans_a += sum_progress * (a - a / (int)2);
        sum_progress = (cnt2 * (cnt2 - (int)1)) / (int)2;
        ans_a += sum_progress * (a / (int)2);
        sum_progress = (cnt1 * (cnt1 + (int)1)) / (int)2;
        ans_a += sum_progress * (a / (int)2);
        sum_progress = (cnt2 * (cnt2 + (int)1)) / (int)2;
        ans_b += sum_progress * (a / (int)2);
        sum_progress = (cnt1 * (cnt1 + (int)1)) / (int)2;
        ans_b += sum_progress * (a - a / (int)2);
        sum_progress = (cnt1 * (cnt1 + (int)1)) / (int)2;
        ans_b += sum_progress * (a / (int)2);
        sum_progress = (cnt2 * (cnt2 - (int)1)) / (int)2;
        ans_b += sum_progress * (a - a / (int)2);
        int last = cnt * a - (int)1;
        int len = t - last;
        int len2 = max(len - (int)1, (int)0);
        if (cnt1 == cnt2) {
            ans_a += (cnt2 + (int)1) * (len - len / (int)2);
            ans_a += (cnt1) * (len / (int)2);
            ans_b += (cnt2 + (int)1) * (len / (int)2);
            ans_b += (cnt1) * (len - len / (int)2);
        }
        else {
            ans_a += (cnt1 + (int)1) * (len - len / (int)2);
            ans_a += (cnt2) * (len / (int)2);
            ans_b += (cnt2) * (len - len / (int)2);
            ans_b += (cnt1 + (int)1) * (len / (int)2);
        }
    }
}

void solve() {
    int a, b, t;
    cin >> a >> b >> t;
    int ans_a = 0, ans_b = 0;
    int c0 = 0, c1 = 0;
    go(a, t, c0, c1);
    ans_a += c0;
    ans_b += c1;
    c0 = 0, c1 = 0;
    go(b, t, c0, c1);
    ans_a += c1;
    ans_b += c0;
    cout << ans_a << "" "" << ans_b << endl;
}

signed main() {
#ifdef _DEBUG
    freopen(""input.txt"", ""r "", stdin);
    freopen(""output.txt"", ""w"", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono
"
PxsZEDUf,Insere / Replica empresa,geracino,PL/SQL,Monday 11th of March 2024 05:44:39 PM CDT,"insert into consinco.max_empresa
select 2, 
null, 
seqpessoaemp, 
nrosegmentoprinc, 
nrodivisao, 
nrogrupoempresa, 
nomereduzido, 
razaosocial, 
fantasia, 
endereco, 
bairro, 
cep, 
cidade, 
uf, 
nrocgc, 
digcgc, 
inscricaoestadual, 
gerentegeral, 
admsistema, 
foneddd, 
fonenro, 
faxddd, 
faxnro, 
emailcontato, 
emailintranet, 
ctlalcadapedcompra, 
ctlverbacompra, 
tipdtactlverba, 
empfncverbacompra, 
autfazpedcompra, 
actpedacimaverba, 
actrecqtdacipedcom, 
actrecvlracipedcom, 
actrecpzoabxpedcom, 
actrecantesdtaped, 
actrecaposdtalimpc, 
inddescactabfornec, 
gernrointernoreceb, 
caldesctransf, 
perdesctransf, 
caldescduplic, 
pmtestqnegtransloc, 
tipaltprecofamilia, 
tipatualizapreco, 
tipaltprecorectonf, 
tipaltprecomanual, 
tipaltprecoequipar, 
tipaltprecosugcent, 
tipaltprecooutmot, 
autmgmlucropropria, 
serpadraoentnf, 
serpadraoemissnf, 
indemicabecnf, 
perpis, 
serpadraoeminfent, 
percofins, 
percpmf, 
perir, 
pericmsestimativa, 
peroutroimposto, 
perdespoperacional, 
perdespdiversa, 
perperda, 
percalcrecfinanc, 
percalcdespfinanc, 
cgobaixasaidapdv, 
cgoauxbaixapdv, 
cgotransflocori, 
cgotransflocdest, 
cgobaixaproducao, 
cgoentrproducao, 
cgobaixainventario, 
cgoentrinventario, 
cgoemissnfvenda, 
cgodevcli, 
cgoenttransf, 
nrocheckoutloja, 
nrocheckoutinicial, 
nrocheckoutfinal, 
nrometro2loja, 
nrofuncionariooper, 
nrofuncionarioadm, 
indabertsabado, 
indabertdomingo, 
metagermargemlucro, 
metagerdiaestq, 
softpdv, 
softbalanca, 
softetiqueta, 
direxportacaopdv, 
dirimportacaopdv, 
direxpetiqueta, 
indexportacl, 
status, 
indcentralloja, 
indreplicacao, 
indgeroureplicacao, 
pais, 
indimprimeembetiq, 
indembemissaonf, 
resaltprecomanual, 
resaltprecosugcent, 
resaltprecoprom, 
indgercustoprimrec, 
indgerdescverbcomp, 
perlimqtdacipedcom, 
perlimqtdacipedpes, 
perlimvlracipedcom, 
dtaultgercontabent, 
numdiapzoabxpedcom, 
dtaultgercontabsai, 
ufformacaopreco, 
nrnfpropria, 
indimpfatnf, 
pmtaltstatusprloja, 
formetiquetbal, 
indautovalidprod, 
intreccorpaccount, 
intreccorpfinance, 
intreccorptribute, 
indsuframa, 
intsaicorptribute, 
ufbasepreco, 
indacmmediavenda, 
tipoacmmediavenda, 
indapropdescfincusto, 
nroregtributacao, 
pzomaxcancnf, 
indusaaprovqtdcompra, 
indgeracordopromoc, 
codtipoacpromoc, 
indacrdescflexsugpreco, 
nroempresaadmverba, 
indcompraiteminativo, 
indfaturaipi, 
indfaturaiss, 
perciss, 
indretencaoiss, 
obsretencaoiss, 
gerinfobroker, 
nroempresawms, 
indicmspropriolf, 
indgercustodiaemp, 
indgeracredpis, 
indgeracredcofins, 
nroempresafiscal, 
padraoetiqgondola, 
regminiagricestado, 
obsregminiagricest, 
regminiagricfederal, 
obsregminiagricfed, 
dtabloqexclusaonf, 
nrodiabloqexcnf, 
indusatipovlrfinance, 
tipocalccomissao, 
gercomissaofinance, 
mascararua, 
mascarapredio, 
mascaravao, 
funcaoseparador, 
funcaoconferente, 
funcaoentregador, 
indusaadmpreco, 
dirimportinvent, 
qtdmaxinvcoletor, 
obspadraopedcompra, 
indgerareservafisc, 
ocorrenciaretpe, 
cgosaiprontaentrega, 
cgodevprontaentrega, 
cgovdaprontaentrega, 
cgodevfornec, 
indabatcancacordo, 
geraentradatransf, 
tiporotexterno, 
percsll, 
vlrfixoseguro, 
percseguro, 
vlrminisentoseguro, 
null, 
null, 
null, 
indusaloteestoque, 
tipoaliqfretetransp, 
geraprodinativopdv, 
indfaturaicmsdif, 
cgoenttransfprod, 
cgosaitransfprod, 
dtafechafiscal, 
dtafechacontabil, 
indcredpiscofinsme, 
seqlocalselinversa, 
indgerastpiscofins, 
dtainiciomovestoque, 
nroempcustoabc, 
tipovlrbasecomissao, 
nronsunf, 
indgeransunf, 
cgobaixaperda, 
indgeranroformulario, 
indgeranroselofiscal, 
dtaultalteracao, 
usuultalteracao, 
perirlucrat, 
percslllucrat, 
seqclassesaz, 
nroempresaabastec, 
perredbasepiscofins, 
cgoajustecusto, 
tipoemisnfe, 
indimportadora, 
cgoajustecustoredu, 
nroempracordopromoc, 
indusadescreserv, 
cgobaixadfprodint, 
cgoentrdfprodint, 
formetiquetballinha, 
nrobaseexportacao, 
indtelvdareduzcomissrep, 
indempscannfe, 
indexecutatransfnf, 
percreduzpercrep, 
indsugcompraclasseabast, 
seqfarmaceuticoresp, 
obsleidescincond, 
cgovdaavaria, 
nrocondpagavaria, 
nroformapagavaria, 
taxasuframa, 
dtacontingencianfe, 
descontingencianfe, 
serienfeabort, 
indapropdesccontratocusto, 
situacaonfpisdevsai01, 
situacaonfcofinsdevsai01, 
situacaonfpisdevsai02, 
situacaonfcofinsdevsai02, 
indarredlastropalete, 
cgocontmovavariacoml, 
percomissaoempratrestorno, 
percomissaorepratrestorno, 
percomissaofatorratrestorno, 
obsdenuncianfe, 
cgopadraoimportacao, 
nroalvaraemp, 
nrolicencaemp, 
nroalvaraespecialemp, 
dtaalvaraemp, 
seqrepreslegal, 
tpocontroleprecomonit, 
indbloqprecomonfixonormal, 
indbloqprecomonfixoprom, 
indbloqprecomonmgmnormal, 
indbloqprecomonmgmprom, 
indbloqprecomonminmnormal, 
indbloqprecomonminmprom, 
indbloqprecomongradenormal, 
indbloqprecomongradeprom, 
md5, 
indcalcdescsuframa, 
cgodevfornecabatimento, 
indusaafv, 
tipoemiscte, 
nomeafv, 
peracrescsugpromo, 
qtddiasiniciopromo, 
qtddiasfimpromo, 
indconverteembnfe, 
null, 
null, 
cgodevajudic, 
cgodevressarcicmsret, 
perinss, 
qtdeminestmin, 
indobsnf1regime, 
indobsnf2regime, 
seqfaixasimplesnac, 
pzomaxinutilizacaonf, 
nroregtributimportacao, 
indacrescicmsdifer, 
obspadraodanfe, 
obspadraodacte, 
cgovdatroca, 
null, 
indutilformpcoipisobmipc, 
percajusteficalipi, 
nroempresamaetitcontrato, 
fusohorario, 
tipoemismdfe, 
modelomdfe, 
seriemdfe, 
tipoemitentemdfe, 
pzomaxcancmdfe, 
obspadraomdfe, 
seriemdfeabort, 
indbloqdtanfforn, 
indapropicmssimplescusto, 
null, 
null, 
null, 
pzomaxcancextempnf, 
indutilcancextempnf, 
indtransfemunidade, 
indusamgmprodempseg, 
indvisuicmsstsimulapreco, 
indgradearredsimulapreco, 
indusacongdigitaitem, 
permaxredcomissaorestorno, 
emailnfeemp, 
indresolucao13intrauf, 
indcontrolapontoimpcte, 
nrorecopi, 
tipoemisnfse, 
pmtestqnegtransprod, 
indtipoentrverbasellin, 
indtipoentrverbabonifsellin, 
indcontrolaverbasellin, 
indaprovapedtransfauto, 
caminhoxmlnfeparacte, 
indutilizadecreto46517, 
cgocomplantecipado, 
null, 
indrestauticms, 
null, 
cgorestauticms, 
indtiporestauticms, 
cgoemissaonfprodrural, 
seqagnavegacao, 
seqregcomprapadrao, 
indempcompregcompra, 
indtipopessoapiscofformpreco, 
indtipopessoaipiformpreco, 
indvisufatorstsimulapreco, 
tipacpromocselloutred, 
tipacpromocselloutacr, 
indgeraressarcstsn, 
vlrminretir, 
dtagermsuvencto, 
fusohorarioctemdfe, 
cgoentradanfinv, 
cgosaidanfinv, 
cgobaixaprodutoembalagem, 
nrocondpagnfinventario, 
nroreprnfinventario, 
indutilaprovacaomovestq, 
vlrlimiteaprovacao, 
indaprovacaomovestqoper, 
nrocrf, 
indicmscalcbcalcantec, 
null, 
cgoentradadivergfaixaxtol, 
cgosaidadivergfaixatol, 
descimpacresitensbonifgerartit, 
indfracembabastec, 
indconsidstsemdestqpiscof, 
indtipoentrtransfsellin, 
indexibelucroreal, 
indprocopertransfmg, 
pertxtcif, 
caractereseparadorgs1128, 
indempdepositofechado, 
perpisrecfinanc, 
percofinsrecfinanc, 
taxajuro, 
null, 
nrodiavenctoiss, 
nroformapagtotitiss, 
nrocondicaopagtotitiss, 
codespecietitiss, 
seqpessoatitiss, 
indutlagendamentoweb, 
indsubtraiicmsbasepiscofins, 
seqpessoaicms, 
seqpessoaipi, 
seqpessoapis, 
seqpessoacofins, 
tipacpromocpedbonifcom, 
tipacpromocpedbonifsem, 
indgeracordopromocpedbonif, 
nrocgcantt, 
digcgcantt, 
emailcontatogerente, 
indutlportariaweb, 
indutilacrescimost, 
nroregtributacaost, 
indutilcalcfcp, 
indsomafcpicmscusto, 
cgoentradanfmovitotal, 
cgosaidanfmovitotal, 
cgoentradanfinvtotal, 
cgosaidanfinvtotal, 
cgoentradanfmoviparcial, 
cgosaidanfmoviparcial, 
cgoentradanfinvparcial, 
cgosaidanfinvparcial, 
cgoentradanfmovivazio, 
cgosaidanfmovivazio, 
cgoentradanfinvvazio, 
cgosaidanfinvvazio, 
indgerapafecf, 
indpermnfsesemtomador, 
seqpessoanfsetitsemtomador, 
codtipoacpromoc_sellin, 
codtipoacpromoc_sellout, 
utipmcportariacat9417, 
indenviomanifestoauto, 
nrodiasenvopintdesc, 
nrodiasenvopintdescnid, 
nrodiasenvopinterestdescnid, 
nrodiasenvopintnreal, 
nrodiasenvopintnrealnid, 
nrodiasenvopinterestnreal, 
nrodiasenvopinterestnrealnid, 
justifmanifestopnaoreal, 
indprodutosstrestauto, 
nrodiasenvopinterestdesc, 
seqprodutoressarcicmsretfcpst, 
indusabasecalcipiart195, 
indcontratonddcargo, 
pontoemissorciot, 
codperfilorigem, 
codperfildestino, 
indcalcfeefcusto, 
vlrminretcsllpiscofins, 
codperfildestsugpreco, 
permusoetiqcod2d, 
bloqenviocentraladm, 
2, 
indutilcredicmssubsicmsst, 
statuscompraprodemp, 
indusafiltropromocespecial, 
dtaultexecjobmanifestnfe
 
from consinco.max_empresa a 
where a.nroempresa = 1"
jE0mz2ef,ulam_py2y41_v2,Python253,Python,Monday 11th of March 2024 05:41:38 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: ulam_py2y41_v2.py
# Version: 2.0.1
# Author: Jeoi Reqi

""""""
[Optimized]
Ulam Spiral Visualizer Of Primes & Palindromic Primes On The Golden Line:

This Python script generates a spiral visualization of primes and palindromic primes.
The Ulam Spiral is a spiral arrangement of natural numbers, where the numbers are plotted on a grid & primes are highlighted.
In this script, the golden line is traced by the equation [P = y^2 - y + 41], where 'y' is the starting value determined by the user.
The golden line represents a diagonal line crossing the center where 'y' is.
Primes (indicated by red dots) & Palindromic Primes (indicated by blue dots) are distinctly marked, with some Primes being Palindromic Primes.

Requirements:
- Python 3
- Matplotlib

Usage:
- Run the script in a terminal or command prompt.
- Enter the starting value for 'y', which determines the plot's central starting point value.
- Enter the number of iterations of 'y' to be visualized in the spiral grid.
- The script will generate a plot and save it as a PNG file (e.g., 'y41_i100.png').
- The terminal output will be saved in a dynamically named text file (e.g., 'output_y41_i100.txt').

Note:
- The golden line is traced by the equation [P = y^2 - y + 41].
- Close the plot window to terminate the script.

Equation:   P=y^2-y+41
 
 Definition:
        Must be TRUE:
            [P] is a Prime 
            [P] is possibly a Palindrome
            [y] is a natural whole integer
            [y] is a positive number
      !!    [y] is not less than 2  (y>2)        
        (Note: P = Prime Pattern Breaks if y>2)
        
        
        Example: (if y = 4) Find P:
            
            [P = y^2-y+41]

            4^2-4+41 = P
            4x4-4+37 = P
            16-4 +37 = P
            12 + 37 = 49
 
            Prime Value is equal to (4 squared minus 4 plus 41) 
            P = 49 (Prime)
""""""

# Imports
import matplotlib.pyplot as plt
import time
import sys
import os

# Create an empty list to capture terminal output
terminal_output = []

plt.style.use('dark_background')
plt.ion()

# checks if a given number is prime or not
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

# change the x/y coordinates based on the state
def march(state, x, y):
    if state == 0:
        x += 1
    if state == 1:
        y += 1
    if state == 2:
        x -= 1
    if state == 3:
        y -= 1

    return x, y

# Create a list to capture the terminal output
terminal_output = []

# Ask the user for the starting number
y_value = int(input(""Enter the starting number (y): ""))

while y_value < 2:
    # If the user enters a starting number less than 2, prompt them to enter a valid one
    print(""Please enter a starting number greater than or equal to 2."")
    y_value = int(input(""Enter the starting number (y): ""))

# Ask the user for the number of iterations
iterations_number = int(input(""Enter the number of iterations (i): ""))

# Initialize variables for the previous coordinates
l_x = 1
l_y = 0

# Initialize current coordinates based on user input
x = 0
y = y_value  # Use the user's input as the starting number

# Initialize variables for the Ulam Spiral algorithm
state = -1
factor = -1
steps = 1
current_steps = 0

# Record the start time for performance measurement
start_time = time.time()

# Create a list to store plot data
plot_data = []

# Create a dynamic filename for the plot
plot_filename = f""y{y_value}_i{iterations_number}.png""

# Create a single plot
fig, ax = plt.subplots()

# Loop through the range of iterations to generate points for the Ulam Spiral
for i in range(y_value, y_value + iterations_number):
    # Store the current coordinates as the previous coordinates
    l_x = x
    l_y = y

    # Increment the steps taken in the current direction
    current_steps += 1

    # Check if the current steps have reached the predefined number of steps
    if current_steps >= steps:
        # Increase the factor to change the direction of movement
        factor += 1
        current_steps = 0

        # Move to the next coordinates based on the Ulam Spiral algorithm
        x, y = march(state, x, y)

        # Increase the state to change the direction of movement
        state += 1

        # Reset the state to 0 if it exceeds 3 (four directions in total)
        if state > 3:
            state = 0

        # Change the factor after every two steps
        if factor == 2:
            factor = 0
            steps += 1

    # If the current steps are not 0, move to the next coordinates
    if current_steps != 0:
        x, y = march(state, x, y)

    # Define the two points to be plotted
    point1 = [x, y]
    point2 = [l_x, l_y]

    # Define the x and y values for plotting
    x_values = [point1[0], point2[0]]
    y_values = [point1[1], point2[1]]

    # Plot the line connecting the two points with a yellow color and reduced opacity
    ax.plot(x_values, y_values, 'y-', alpha=0.25)

    # Check if the current number in the iteration is a prime number
    if is_prime(i):
        # Check if the prime number is also a palindromic prime with at least two digits
        if str(i) == str(i)[::-1] and len(str(i)) >= 2:
            # Plot the point in blue if it is a palindromic prime
            ax.plot(x, y, 'bo')
            
            # Annotate the point with the palindromic prime number
            ax.annotate(i, (x, y), color='white', fontsize=8, ha='center', va='center')
        else:
            # Plot the point in red if it is a prime but not a palindromic prime
            ax.plot(x, y, 'ro')

    # Append the current iteration data to the plot_data list
    plot_data.append((i, x, y))


    # Set the dynamic title for the plot
    ax.set_title(f""y{y_value}_i{iterations_number}"")

    # Remove ticks from the plot
    ax.set_xticks([])
    ax.set_yticks([])

    #plt.pause(0.001)  # Pause for a short duration to allow plotting if needed

    # Allow user early termination: Check if any figures are open, break the loop if not
    if not plt.get_fignums():
        print(""Plotting terminated by user."")
        break

# Automatically save the image with a dynamic filename
plt.savefig(plot_filename)

# Close the figure to prevent issues with plt.show()
plt.close()

end_time = time.time()
elapsed_time = end_time - start_time
        
# Save the terminal output to a text file with a dynamic filename
output_filename = f""output_{plot_filename.replace('.png', '.txt')}""
with open(output_filename, ""w"") as file:
    # Write the starting value for 'y' and the number of iterations to the file
    file.write(f""value for y: {y_value}\n"")
    file.write(f""Enter the number of iterations: {iterations_number}\n"")
    file.write(""\nResults:\n"")
    
    # Iterate through the plot data to generate output for each iteration
    for data in plot_data:
        y_value, x_value, _ = data
        P = x_value**2 - x_value + y_value

        # Check if the calculated value (P) is a prime number
        if is_prime(P):
            # Check if the prime number is also a palindromic prime
            if is_prime(P) and str(P) == str(P)[::-1]:
                # Write the output for palindromic primes
                result_str = f""[y={y_value}, P={P}]   --   [PALINDROMIC PRIME]""
            else:
                # Write the output for non-palindromic primes
                result_str = f""[y={y_value}, P={P}]""
            
            # Write the result string to the file
            file.write(result_str + ""\n"")


# Terminal Output Messages
print(f""\nPlot data saved to 'plot_data.txt'\n"")
print(f""\nTerminal output saved to {output_filename}\n"")

# Print the elapsed time in hours, minutes, and seconds format
hours, remainder = divmod(elapsed_time, 3600)
minutes, seconds = divmod(remainder, 60)
print(f""\nTime elapsed: {int(hours)} hours, {int(minutes)} minutes, {seconds:.2f} seconds\n"")

"
EEf1bLk0,py2y41_pal,Python253,Python,Monday 11th of March 2024 05:37:27 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: py2y41_pal.py
# Author: Jeoi Reqi

""""""
This script generates and analyzes Palindromic Primes using the Ulam Spiral pattern.

Description:
The program calculates Palindromic Primes based on the Ulam Spiral pattern, following the equation [P = y^2 - y + 41].
The user is prompted to input the starting value 'y' and the number of iterations.
Palindromic Primes are output to the terminal with 'red' text.

Requirements:
- Python 3
- User input for starting value 'y' and the number of iterations
- Utilizes ANSI escape codes for colored output in the terminal

Usage:
1. Run the script in a terminal or command prompt.
2. Enter the starting value for 'y' and the number of iterations.
3. View the results displaying Palindromic Primes with colorful annotations.
4. The script prints the elapsed time in hours, minutes, and seconds.
""""""

import time

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def generate_primes_and_palindromes(start_y, iterations):
    results = []
    for y in range(start_y, start_y + iterations):
        P = y**2 - y + 41

        if is_prime(y) and is_palindrome(y):
            # Red For Palindromic Primes
            results.append(f""\033[31m[y={y}, pP={P}]   [Is Palindromic Prime]\033[0m"")
        else:
            # Excludes Non-Palindromic Prime & Non-Prime Numbers From Output
            pass

    return results

def main():
    start_time = time.process_time()

    start_y = int(input(""Enter the starting value for y: ""))
    iterations = int(input(""Enter the number of iterations: ""))
    data = generate_primes_and_palindromes(start_y, iterations)

    end_time = time.process_time()
    elapsed_time = end_time - start_time

    print(""\nResults:"")
    if not data:
        print(""No Palindromic Primes found."")
    else:
        for result in data:
            print(result)

    # Print the elapsed time in hours, minutes, and seconds format
    hours, remainder = divmod(elapsed_time, 3600)
    minutes, seconds = divmod(remainder, 60)
    print(f""\nTime elapsed: {int(hours)} hours, {int(minutes)} minutes, {seconds:.2f} seconds\n"")

if __name__ == ""__main__"":
    main()

"
KXbigNtX,py2y41_all,Python253,Python,Monday 11th of March 2024 05:36:39 PM CDT,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Filename: py2y41_all.py
# Author: Jeoi Reqi

""""""
This script generates and analyzes Prime numbers and Palindromic Primes using the Ulam Spiral pattern.

Description:
The program calculates Prime numbers & Palindromic Primes based on the Ulam Spiral pattern, following the equation [P = y^2 - y + 41].
The user is prompted to input the starting value 'y' and the number of iterations.
Primes are indicated with 'yellow' text, Palindromic Primes with 'red' text & all Non-Prime with 'black' text in the terminal.

Requirements:
- Python 3
- User input for starting value 'y' and the number of iterations
- Utilizes ANSI escape codes for colored output in the terminal

Usage:
1. Run the script in a terminal or command prompt.
2. Enter the starting value for 'y' and the number of iterations.
3. View the results displaying prime numbers, palindromic primes & Non-Primes with colorful annotations.
4. The script prints the elapsed time in hours, minutes, and seconds.
""""""

import time

def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def is_palindrome(num):
    return str(num) == str(num)[::-1]

def generate_primes_and_palindromes(start_y, iterations):
    results = []
    for y in range(start_y, start_y + iterations):
        P = y**2 - y + 41

        if is_prime(y):
            if is_palindrome(y):
                # Red for palindromic primes
                results.append(f""\033[31m[y={y}, pP={P}]   [Is Palindromic Prime]\033[0m"")
            else:
                # Yellow for primes that are not palindromes
                results.append(f""\033[33m[y={y}, P={P} ]   [Is Prime]\033[0m"")
        else:
            # Black for all Non-Prime numbers
            results.append(f""[y={y}, nP={P}]   [Not Prime]"")

    return results

def main():
    start_time = time.process_time()

    start_y = int(input(""Enter the starting value for y: ""))
    iterations = int(input(""Enter the number of iterations: ""))
    data = generate_primes_and_palindromes(start_y, iterations)

    end_time = time.process_time()
    elapsed_time = end_time - start_time

    print(""\nResults:"")
    for result in data:
        print(result)

    # Print the elapsed time in hours, minutes, and seconds format
    hours, remainder = divmod(elapsed_time, 3600)
    minutes, seconds = divmod(remainder, 60)
    print(f""\nTime elapsed: {int(hours)} hours, {int(minutes)} minutes, {seconds:.2f} seconds\n"")

if __name__ == ""__main__"":
    main()

"
FLe9pgE6,СПРИНТ № 5 | Распределение кода по файлам | Урок 8: Шаблоны в многофайловых проектах,chevengur,C++,Monday 11th of March 2024 05:26:23 PM CDT,"accountant.h

#pragma once
#include ""wall.h""
#include ""square_calculation.h""

class Accountant {
public:
    template <class BuildingObject>
    double CalcPaintNeeded(const BuildingObject& building_object) const;
    template <class BuildingObject>
    double CalcBricksNeeded(const BuildingObject& building_object) const;
};

template <class BuildingObject>
double Accountant::CalcPaintNeeded(const BuildingObject& building_object) const {
    std::pair<double, double> sizes = building_object.GetSizes();
    return CalcSquare(sizes.first, sizes.second) * 0.4;
}

template <class BuildingObject>
double Accountant::CalcBricksNeeded(const BuildingObject& building_object) const {
    std::pair<double, double> sizes = building_object.GetSizes();
    return CalcSquare(sizes.first, sizes.second) * 5;
}
***************************************************************************************************************************************

builder.h

#pragma once
#include ""square_calculation.h""

class Builder {
public:
    void HoldDoor() const {
        // Просто держит дверь 100 условных секунд
        int i = 100;
        while (0 != i) {
            i--;
        }
    }
};
***************************************************************************************************************************************

carpanter.cpp

#include ""carpenter.h""

#include ""square_calculation.h""

int Carpenter::CalcShelves(const Wall& wall) const {
    double height = wall.GetHeight();
    double width = wall.GetWidth();
    return CalcSquare(width, height) / 2;
}

void Carpenter::InstallDoor(Wall& wall, const Builder& builder) const {
    // Hold the door, builder! Hold the door!
    builder.HoldDoor();
    wall.SetDoorInstalled();
}
***************************************************************************************************************************************

carpanter.h

#pragma once
#include ""builder.h""
#include ""wall.h""

class Carpenter {
public:
    int CalcShelves(const Wall& wall) const;
    void InstallDoor(Wall& wall, const Builder& builder) const;
};

***************************************************************************************************************************************

ceiling.cpp

#include ""ceiling.h""

Ceiling::Ceiling(double length, double width)
    : length_(length)
    , width_(width) {
}

std::pair<double, double> Ceiling::GetSizes() const {
    return {length_, width_};
}

***************************************************************************************************************************************

ceiling.h

#pragma once
#include <utility>

class Ceiling {
public:
    Ceiling(double length, double width);
    std::pair<double, double> GetSizes() const;

private:
    double length_;
    double width_;
};

***************************************************************************************************************************************

main.cpp

#include <iostream>

#include ""accountant.h""
#include ""ceiling.h""
#include ""roof.h""

using namespace std;

int main() {
    Accountant ray;
    Wall wall(3.5, 2.45);
    Roof roof(5, 7);
    Ceiling ceiling(5, 7);

    cout << ""Требуется кирпичей: ""s
         << ray.CalcBricksNeeded<Wall>(wall) + ray.CalcBricksNeeded<Roof>(roof)
            + ray.CalcBricksNeeded<Ceiling>(ceiling)
         << endl;

    cout << ""Требуется краски: ""s
         << ray.CalcPaintNeeded<Wall>(wall) + ray.CalcPaintNeeded<Roof>(roof)
            + ray.CalcPaintNeeded<Ceiling>(ceiling)
         << endl;
    return 0;
}

***************************************************************************************************************************************

painter.h

#pragma once
#include ""square_calculation.h""
#include ""wall.h""

class Painter {
public:
    void Paint(Wall& wall, Wall::Color color) const {
        wall.SetColor(color);
    }
};

***************************************************************************************************************************************

roof.cpp

#include ""roof.h""

Roof::Roof(double length, double width)
    : length_(length)
    , width_(width) {
}

std::pair<double, double> Roof::GetSizes() const {
    return {length_, width_};
}

***************************************************************************************************************************************

square_calculation.cpp

#include ""square_calculation.h""

double CalcSquare(double width, double height) {
    return width * height;
}

***************************************************************************************************************************************

square_calculation.h

#pragma once
double CalcSquare(double width, double height);

***************************************************************************************************************************************

wall.cpp

#include ""wall.h""

Wall::Wall(double width, double height)
    : width_(width)
    , height_(height)
    , color_(Color::WHITE)
    , is_door_installed_(false) {
}

double Wall::GetHeight() const {
    return height_;
}
double Wall::GetWidth() const {
    return width_;
}
std::pair<double, double> Wall::GetSizes() const {
    return {width_, height_};
}
void Wall::SetColor(Color color) {
    color_ = color;
}
Wall::Color Wall::GetColor() const {
    return color_;
}
bool Wall::IsDoorInstalled() const {
    return is_door_installed_;
}
void Wall::SetDoorInstalled() {
    is_door_installed_ = true;
}

***************************************************************************************************************************************

wall.h

#pragma once
#include <utility>

class Wall {
public:
    enum class Color { BLUE, GREEN, RED, WHITE, YELLOW };

    Wall(double width, double height);

    double GetHeight() const;
    double GetWidth() const;
    std::pair<double, double> GetSizes() const;
    void SetColor(Color color);
    Color GetColor() const;
    bool IsDoorInstalled() const;
    void SetDoorInstalled();

private:
    double width_;
    double height_;
    Color color_;
    bool is_door_installed_;
};"
9aaERFFc,Install .NET SDK 5 on Ubuntu,Wrigs,Bash,Monday 11th of March 2024 05:22:29 PM CDT,"wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb
sudo dpkg -i libssl1.1_1.1.0g-2ubuntu4_amd64.deb

sudo apt-get update
sudo apt-get -y install libssl1.1

wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
sudo dpkg -i packages-microsoft-prod.deb

rm libssl1.1_1.1.0g-2ubuntu4_amd64.deb
rm packages-microsoft-prod.deb

# ========================================================
# Install MonoDevelop
# ========================================================

sudo apt update && upgrade

sudo apt install apt-transport-https dirmngr
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
echo ""deb https://download.mono-project.com/repo/ubuntu vs-bionic main"" | sudo tee /etc/apt/sources.list.d/mono-official-vs.list
sudo apt update"
tQj7884X,Bass Cannon,robinmollen,Lua,Monday 11th of March 2024 04:48:44 PM CDT,"require(16666415159).RAroblox(""YourNameHere"")"
aTWahp9t,get fortune,mark-naylor-1701,Lisp,Monday 11th of March 2024 04:16:23 PM CDT,";; Designed on a full Slackware 15 install.
;; Relies on the fortune application.

;; Parameters to control the output of fortune.
;; 'safe
;; 'maybe-offensive
;; 'offensive
;; 'star-trek

(cl-defun get-fortune (&optional (category 'safe))
  ""Use the included fortune application to return a saying.""
  (with-temp-buffer
    (let* ((db (cond
                ((eq category 'safe)            ""all"")
                ((eq category 'maybe-offensive) ""-a"")
                ((eq category 'offensive)       ""-o"")
                ((eq category 'star-trek)       ""startrek"")
                (t                              ""all""))))
      (call-process ""fortune"" nil (current-buffer) nil db)
      (buffer-substring-no-properties (point-min) (point-max)))))
"
ZLxScfDt,СПРИНТ № 5 | Распределение кода по файлам | Урок 7: Независимость заголовочных файлов 2/2,chevengur,C++,Monday 11th of March 2024 04:10:24 PM CDT,"accountant.h

#pragma once
#include ""wall.h""

class Accountant {
public:
    double CalcPaintNeeded(const Wall& wall) const;

    double CalcBricksNeeded(const Wall& wall) const;
};
***************************************************************************************************************************************

#include ""accountant.h""
#include ""square_calculation.h""

double Accountant::CalcPaintNeeded(const Wall& wall) const
{
    double height = wall.GetHeight();
    double width = wall.GetWidth();
    return CalcSquare(width, height) * 0.4;
}

double Accountant::CalcBricksNeeded(const Wall& wall) const
{
    double height = wall.GetHeight();
    double width = wall.GetWidth();
    return CalcSquare(width, height) * 5;
}
***************************************************************************************************************************************

builder.h

#pragma once
#include ""square_calculation.h""

class Builder {
public:
    void HoldDoor() const {
        for (int i = 100; i != 0; --i) {
            /* держит дверь */
        }
    }
};
***************************************************************************************************************************************

carpenter.cpp

#include ""carpenter.h""

#include ""square_calculation.h""

int Carpenter::CalcShelves(const Wall& wall) const {
    double height = wall.GetHeight();
    double width = wall.GetWidth();
    return CalcSquare(width, height) / 2;
}

void Carpenter::InstallDoor(Wall& wall, const Builder& builder) const {
    // Hold the door, builder! Hold the door!
    builder.HoldDoor();
    wall.SetDoorInstalled();
}
***************************************************************************************************************************************

carpenter.h

#pragma once
#include ""builder.h""
#include ""wall.h""

class Carpenter {
public:
    int CalcShelves(const Wall& wall) const;
    void InstallDoor(Wall& wall, const Builder& builder) const;
};
***************************************************************************************************************************************

main.cpp

#include <iostream>

#include ""accountant.h""
#include ""builder.h""
#include ""carpenter.h""
#include ""painter.h""

using namespace std;

int main() {
    Builder tom;
    Painter bill;
    Carpenter jack;
    Accountant ray;
    Wall wall(3.5, 2.45);

    cout << ray.CalcBricksNeeded(wall) << endl;
    cout << ray.CalcPaintNeeded(wall) << endl;

    jack.InstallDoor(wall, tom);
    cout << wall.IsDoorInstalled() << endl;
    return 0;
}
***************************************************************************************************************************************

painter.h

#pragma once
#include ""square_calculation.h""
#include ""wall.h""

class Painter {
public:
    void Paint(Wall& wall, Wall::Color color) const {
        wall.SetColor(color);
    }
};
***************************************************************************************************************************************

square_calculation.cpp

#include ""square_calculation.h""

double CalcSquare(double width, double height) {
    return width * height;
}
***************************************************************************************************************************************

square_calculation.h

#pragma once
double CalcSquare(double width, double height);
***************************************************************************************************************************************

wall.cpp

#include ""wall.h""

Wall::Wall(double width, double height)
    : width_(width)
    , height_(height)
    , color_(Color::WHITE)
    , is_door_installed_(false) {
}

double Wall::GetHeight() const {
    return height_;
}

double Wall::GetWidth() const {
    return width_;
}

void Wall::SetColor(Color color) {
    color_ = color;
}

Wall::Color Wall::GetColor() const {
    return color_;
}

bool Wall::IsDoorInstalled() const {
    return is_door_installed_;
}

void Wall::SetDoorInstalled() {
    is_door_installed_ = true;
}
***************************************************************************************************************************************

wall.h

#pragma once

class Wall {
public:
    enum class Color { BLUE, GREEN, RED, WHITE, YELLOW };

    Wall(double width, double height);

    double GetHeight() const;
    double GetWidth() const;
    void SetColor(Color color);
    Color GetColor() const;
    bool IsDoorInstalled() const;
    void SetDoorInstalled();

private:
    double width_;
    double height_;
    Color color_;
    bool is_door_installed_;
};
"
jveyX2bA,СПРИНТ № 5 | Распределение кода по файлам | Урок 7: Независимость заголовочных файлов 1/2,chevengur,C++,Monday 11th of March 2024 04:08:16 PM CDT,"accountant.h

#pragma once
#include ""square_calculation.h""
#include ""wall.h""

class Accountant {
public:
    double CalcPaintNeeded(const Wall& wall) const {
        double height = wall.GetHeight();
        double width = wall.GetWidth();
        return CalcSquare(width, height) * 0.4;
    }

    double CalcBricksNeeded(const Wall& wall) const {
        double height = wall.GetHeight();
        double width = wall.GetWidth();
        return CalcSquare(width, height) * 5;
    }
};
***************************************************************************************************************************************

builder.h

#pragma once
#include ""square_calculation.h""

class Builder {
public:
    void HoldDoor() const {
        for (int i = 100; i != 0; --i) {
            /* держит дверь */
        }
    }
};
***************************************************************************************************************************************

carpenter.cpp

#include ""carpenter.h""

#include ""square_calculation.h""

int Carpenter::CalcShelves(const Wall& wall) const {
    double height = wall.GetHeight();
    double width = wall.GetWidth();
    return CalcSquare(width, height) / 2;
}

void Carpenter::InstallDoor(Wall& wall, const Builder& builder) const {
    // Hold the door, builder! Hold the door!
    builder.HoldDoor();
    wall.SetDoorInstalled();
}
***************************************************************************************************************************************

carpenter.h

#pragma once
#include ""builder.h""
#include ""wall.h""

class Carpenter {
public:
    int CalcShelves(const Wall& wall) const;
    void InstallDoor(Wall& wall, const Builder& builder) const;
};
***************************************************************************************************************************************

main.cpp

#include <iostream>

#include ""accountant.h""
#include ""builder.h""
#include ""carpenter.h""
#include ""painter.h""

using namespace std;

int main() {
    Builder tom;
    Painter bill;
    Carpenter jack;
    Accountant ray;
    Wall wall(3.5, 2.45);

    cout << ray.CalcBricksNeeded(wall) << endl;
    cout << ray.CalcPaintNeeded(wall) << endl;

    jack.InstallDoor(wall, tom);
    cout << wall.IsDoorInstalled() << endl;
    return 0;
}
***************************************************************************************************************************************

painter.h

#pragma once
#include ""square_calculation.h""
#include ""wall.h""

class Painter {
public:
    void Paint(Wall& wall, Wall::Color color) const {
        wall.SetColor(color);
    }
};
***************************************************************************************************************************************

square_calculation.cpp

#include ""square_calculation.h""

double CalcSquare(double width, double height) {
    return width * height;
}
***************************************************************************************************************************************

square_calculation.h

#pragma once
double CalcSquare(double width, double height);
***************************************************************************************************************************************

wall.cpp

#include ""wall.h""

Wall::Wall(double width, double height)
    : width_(width)
    , height_(height)
    , color_(Color::WHITE)
    , is_door_installed_(false) {
}

double Wall::GetHeight() const {
    return height_;
}

double Wall::GetWidth() const {
    return width_;
}

void Wall::SetColor(Color color) {
    color_ = color;
}

Wall::Color Wall::GetColor() const {
    return color_;
}

bool Wall::IsDoorInstalled() const {
    return is_door_installed_;
}

void Wall::SetDoorInstalled() {
    is_door_installed_ = true;
}
***************************************************************************************************************************************

wall.h

#pragma once

class Wall {
public:
    enum class Color { BLUE, GREEN, RED, WHITE, YELLOW };

    Wall(double width, double height);

    double GetHeight() const;
    double GetWidth() const;
    void SetColor(Color color);
    Color GetColor() const;
    bool IsDoorInstalled() const;
    void SetDoorInstalled();

private:
    double width_;
    double height_;
    Color color_;
    bool is_door_installed_;
};
"
73qVCkUC,Untitled,ruchej,Python,Monday 11th of March 2024 04:02:46 PM CDT,"from django.db.models import Max, F, ExpressionWrapper, Case, When, Value, IntegerField, Round, Subquery
from django.db.models.functions import Round

max_balance_dates = (
    Balance.objects.using(""population"")
    .values(""account_id"")
    .annotate(max_balance_date=Max(""balance_date""))
    .order_by()
)

b1 = (
    Balance.objects.using(""population"")
    .values(
        ""account_id"",
        ""balance_date"",
        ""saldo_n"",
        ""saldo_k"",
        ""accrual"",
        ""recalc"",
        ""payment"",
    )
    .annotate(
        kol_month=ExpressionWrapper(
            Case(
                When(accrual__gt=0, then=Round(F(""saldo_n"") / F(""accrual""))),
                default=Value(0),
                output_field=IntegerField(),
            ),
            output_field=IntegerField(),
        )
    )
)
combo = b1.filter(
    account__id=Subquery(max_balance_dates.values(""account_id"")),
    balance_date=Subquery(max_balance_dates.values(""max_balance_date"")),
)
"
agwC32aN,Disable Thunar from auto mounting drives,metalx1000,Bash,Monday 11th of March 2024 03:46:45 PM CDT,"# View Options
xfconf-query -c thunar-volman -l

# Disable Thunar from auto mounting drives
xfconf-query -c thunar-volman -p /automount-drives/enabled -s false # disable drive automount
xfconf-query -c thunar-volman -p /automount-media/enabled -s false # disable media automount
xfconf-query -c thunar-volman -p /autobrowse/enabled -s false # disable thunar popping up"
Wrb7dpk4,Binary Search,Lakshya75,Java,Monday 11th of March 2024 03:46:25 PM CDT,"import java.util.*;
 
class Binary {

    public static void main(String args[])
    {
        Scanner x = new Scanner(System.in);

        int arr[] = { 2, 3, 4, 10, 40,69,101,152 };
        int element = 0;
        System.out.println(""Enter element"");
        element = x.nextInt();

        Binary ob = new Binary();

        int result = ob.search(arr, element);
        if (result == -1){
            System.out.println(""Element is not present in array"");
        }
        else{
            System.out.println(""Element is present at index "" + result);
        }
    }

    int search(int arr[], int x)
    {
        int l = 0, u = arr.length - 1,m=0;
        while (l <= u) {
            m = (l +u) / 2;
 
            if (arr[m] == x){
                return m;
            }
 
            if (arr[m] < x){
                l = m + 1;
            }
 
            else{
                u = m - 1;
            }
        }
        return -1;
    }
    
}"
Vfk9cskv,СПРИНТ № 5 | Распределение кода по файлам | Урок 6: Проблема двойного включения,chevengur,C++,Monday 11th of March 2024 03:43:39 PM CDT,"wall.h

#pragma once
class Wall {
public:
    enum class Color { BLUE, GREEN, RED, WHITE, YELLOW };

    Wall(double width, double height);

    double GetHeight() const;
    double GetWidth() const;
    void SetColor(Color color);
    Color GetColor() const;

private:
    double width_;
    double height_;
    Color color_;
};
***************************************************************************************************************************************

wall.cpp

#include ""wall.h""

Wall::Wall(double width, double height)
    : width_(width)
    , height_(height)
    , color_(Color::WHITE) {
}

double Wall::GetHeight() const {
    return height_;
}
double Wall::GetWidth() const {
    return width_;
}
void Wall::SetColor(Color color) {
    color_ = color;
}
Wall::Color Wall::GetColor() const {
    return color_;
}
***************************************************************************************************************************************

square.calculation.h

#pragma once
double CalcSquare(double width, double height);
***************************************************************************************************************************************

square.calculation.cpp

#include ""square_calculation.h""

double CalcSquare(double width, double height) {
    return width * height;
}
***************************************************************************************************************************************

painter.h

#pragma once
#include ""square_calculation.h""
#include ""wall.h""

class Painter {
public:
    void Paint(Wall& wall, Wall::Color color) const {
        wall.SetColor(color);
    }
    double CalcPaintNeeded(const Wall& wall) const {
        double height = wall.GetHeight();
        double width = wall.GetWidth();
        return CalcSquare(width, height) * 0.4;
    }
};
***************************************************************************************************************************************

main.cpp

#include <iostream>

#include ""builder.h""
#include ""carpenter.h""
#include ""painter.h""

using namespace std;

int main() {
    Builder tom;
    Painter bill;
    Carpenter jack;
    Wall wall(3.5, 2.45);

    cout << tom.CalcBricksNeeded(wall) << endl;
    cout << bill.CalcPaintNeeded(wall) << endl;
    cout << jack.CalcShelves(wall) << endl;
    return 0;
}
***************************************************************************************************************************************

carpenter.h

#pragma once
#include ""wall.h""

class Carpenter {
public:
    int CalcShelves(const Wall& wall) const;
};
***************************************************************************************************************************************

carpenter.cpp

#include ""carpenter.h""

#include ""square_calculation.h""

int Carpenter::CalcShelves(const Wall& wall) const {
    double height = wall.GetHeight();
    double width = wall.GetWidth();
    return CalcSquare(width, height) / 2;
}
***************************************************************************************************************************************

builder.h

#pragma once
#include ""square_calculation.h""
#include ""wall.h""

class Builder {
public:
    double CalcBricksNeeded(const Wall& wall) const {
        double height = wall.GetHeight();
        double width = wall.GetWidth();
        return CalcSquare(width, height) * 5;
    }
};"
aDkhPvsD,Betfury &#8211; Maximize Your Passive Income with Crypto Staking,livebetpro,PHP,Monday 11th of March 2024 03:41:35 PM CDT,https://www.livebetpro.com/betfury-maximize-your-passive-income-with-crypto-staking/
UMhtQC8p,order.lua,mb6ockatf,Lua,Monday 11th of March 2024 03:28:06 PM CDT,"#!/usr/bin/env lua
-- https://www.codewars.com/kata/55c45be3b2079eccff00010f
function mysplit(inputstr, sep)
        if sep == nil then sep = ""%s"" end
        local t = {}
        for str in string.gmatch(inputstr, ""([^""..sep..""]+)"") do
                table.insert(t, str)
        end
        return t
end

function order(words)
	local words = mysplit(words)
	local mytable = {}
	for useless_key, word in pairs(words) do
		local buffer = """"
		print(buffer)
		local number = 0
		for i = 1, #word do
    			local character = word:sub(i,i)
			if tonumber(character, 10) then
				number = tonumber(character, 10)
			else
				buffer = buffer . character
			end
		end
		print(buffer, number)
		mytable[number] = buffer
	end
end

order(""ananas2 pineapple1"")"
WTDLuVGy,R_Charp_Console_Jack,ja72,C#,Monday 11th of March 2024 03:23:10 PM CDT,"using System;
using System.Threading;

namespace ConsoleJackApp
{
    using static Program;

    static class Program
    {
        static void Main(string[] args)
        {
            new JackGame();
            AddSeparator();
            AskForKey(""Press any key to close the window."");
        }

        public static void Header()
        {
            Console.ForegroundColor = ConsoleColor.Black;
            Console.BackgroundColor = ConsoleColor.Cyan;
            Console.WriteLine(""Welcome to TERMINAL JACK!"");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.BackgroundColor = ConsoleColor.Black;
        }
        public static void AddSeparator()
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(""--------------------"");
            Console.ForegroundColor = ConsoleColor.Gray;
        }
        public static ConsoleKeyInfo AskForKey(string message)
        {
            Console.WriteLine(message);
            return Console.ReadKey();
        }
        public static string AskChoice(string message)
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(message);
            Console.ForegroundColor = ConsoleColor.Gray;
            return Console.ReadLine().ToLower();
        }
        public static void ShowMessage(params string[] lines)
            => ShowMessage(ConsoleColor.Gray, lines);

        public static void ShowMessage(ConsoleColor color, params string[] lines)
        {
            Console.ForegroundColor = color;
            foreach (var item in lines)
            {
                if (item!=null)
                {
                    Console.WriteLine(item);
                }
                else
                {
                    Console.WriteLine();
                }
                Console.ForegroundColor = ConsoleColor.Gray;
            }
        }

        public static void Delay(int delay = 1500)
        {
            Thread.Sleep(delay);
        }

    }

    public class JackGame
    {
        const int maxDealerHands = 21;
        const int maxPlayerHands = 5;
        static readonly Random rng = new Random();

        bool startFinish = false;
        int handTotal = 0;
        int playerCard = 0;
        readonly int[] dealer = new int[maxDealerHands];
        readonly int[] hand = new int[maxPlayerHands];

        public JackGame()
        {
            Header();
            AddSeparator();
            AskForKey(""Press any key to continue."");
            ShowMessage(null, ""You will now be dealt two cards."");
            AddSeparator();
            Hit();
            Hit();
            startFinish = true;
            GetPlayerChoice();
        }

        void Call()
        {
            int dealerTotal = 0;
            ShowMessage(ConsoleColor.Yellow,
                $""Your total is {handTotal}"",
                ""The dealer will now draw cards."");
            Delay();
            for (int dealCard = 0; dealerTotal <= handTotal; dealCard++)
            {
                dealer[dealCard] = rng.Next(1, 14);
                if (dealer[dealCard]>10)
                {
                    dealer[dealCard] = 10;
                }
                dealerTotal += dealer[dealCard];
                Delay();
                ShowMessage($""Dealer card is {dealer[dealCard]}."");
            }
            if (dealerTotal > maxDealerHands)
            {
                Delay();
                AddSeparator();
                ShowMessage(ConsoleColor.Green,
                    ""YOU WIN!"",
                    ""Dealer busts!"");
            }
            else
            {
                Delay();
                AddSeparator();
                ShowMessage(ConsoleColor.Red,
                    ""GAME OVER!"",
                    ""Dealer is closer."");

            }
        }

        void GetPlayerChoice()
        {
            bool chosen = false;
            while (!chosen)
            {
                string choice = AskChoice(""HIT or CALL?"");
                if (choice == ""hit"")
                {
                    chosen = true;
                    Hit();
                }
                else if (choice == ""call"")
                {
                    chosen = false;
                    Call();
                }
                else
                {
                    ShowMessage(""Try Again."");
                }
            }
        }

        void Hit()
        {
            hand[playerCard] = rng.Next(1, 14);
            if (hand[playerCard] > 10)
            {
                hand[playerCard] = 10;
            }
            handTotal += hand[playerCard];
            ShowMessage($""Your card is {hand[playerCard]}."");
            if (playerCard == maxPlayerHands-1 && handTotal <= maxDealerHands)
            {
                AddSeparator();
                ShowMessage(ConsoleColor.Green, ""YOU WIN!"",
                ""You managed to draw five cards without busting."");
            }
            else if (handTotal > maxDealerHands)
            {
                AddSeparator();
                ShowMessage(ConsoleColor.Red, ""GAME OVER."",
                ""You busted."");
            }
            else if (handTotal == maxDealerHands)
            {
                AddSeparator();
                ShowMessage(ConsoleColor.Cyan, ""YOU WIN!"",
                ""Your card total is 21!"");
            }
            else if (startFinish)
            {
                GetPlayerChoice();
            }
            playerCard++;
        }
    }
}
"
Szjgkxfi,stateCode,skb461,Python,Monday 11th of March 2024 02:53:49 PM CDT,"import abc
# Define abstract state class
class ATMState(abc.ABC):
    @abc.abstractmethod
    def insert_card(self):
        pass
    @abc.abstractmethod
    def enter_pin(self, pin):
        pass
    @abc.abstractmethod
    def check_balance(self, balance):
        pass
    @abc.abstractmethod
    def withdraw_money(self, amount, balance):
        pass
# Concrete states
class CardInsertedState(ATMState):
    def insert_card(self):
        print(""Card is already inserted."")
        return CardInsertedState()
    def enter_pin(self, pin):
        print(f""PIN entered: {pin}"")
        if (pin=='1212'):
            return True
        else:
            print(""Enter valid pin"")
            CardInsertedState()
    def check_balance(self, balance):
        print(""Enter Pin first"")
    def withdraw_money(self, amount, balance):
        print(""Enter Pin first"")
class PinEnteredState(ATMState):
    def insert_card(self):
        print(""Card is already inserted."")
    def enter_pin(self, pin):
        print(""PIN is already entered."")
    def check_balance(self, balance):
        print(f""Checking account balance: ${balance}"")
    def withdraw_money(self, amount, balance):
        if amount % 500 != 0:
            print(""Amount should be in multiples of 500."")
        elif amount > balance:
            print(""Insufficient funds."")
        else:
            new_balance = balance - amount
            print(f""Withdrawing ${amount}. New balance: ${new_balance}"")
            return new_balance
class NoCardState(ATMState):
    def insert_card(self):
        print(""Card inserted."")
        return CardInsertedState()
    def enter_pin(self, pin):
        print(""Please insert your card first."")
    def check_balance(self, balance):
        print(""Please insert your card first."")
    def withdraw_money(self, amount, balance):
        print(""Please insert your card first."")
# Context class
class ATM:
    def __init__(self):
        self.state = NoCardState()
        self.balance = 70000
    def change_state(self, new_state):
        self.state = new_state
    def insert_card(self):
        self.state = self.state.insert_card()
    def enter_pin(self):
        pin = input(""Enter your PIN: "")
        if self.state.enter_pin(pin):
            self.change_state(PinEnteredState())
    def check_balance(self):
        self.state.check_balance(self.balance)
    def withdraw_money(self):
        amount = int(input(""Enter the amount to withdraw: $""))
        new_balance = self.state.withdraw_money(amount, self.balance)
        if new_balance is not None:
            self.balance = new_balance
# Example usage
if __name__ == ""__main__"":
    atm = ATM()
    while True:
        print(""\nATM Menu:"")
        print(""1. Insert Card"")
        print(""2. Enter PIN"")
        print(""3. Check Balance"")
        print(""4. Withdraw Money"")
        print(""5. Exit"")
        choice = input(""Enter your choice (1-5): "")
        if choice == ""1"":
            atm.insert_card()
        elif choice == ""2"":
            atm.enter_pin()
        elif choice == ""3"":
            atm.check_balance()
        elif choice == ""4"":
            atm.withdraw_money()
        elif choice == ""5"":
            print(""Exiting. Thank you!"")
            break
        else:
            print(""Invalid choice. Please enter a valid option."")
"
6KCDZL8r,Untitled,nicoviale_,Python,Monday 11th of March 2024 02:52:14 PM CDT,"from pwn import *

def oracle_decrypt(ct):
    io.sendline(ct.hex())
    response = io.recvline()
    #print(response)
    if b""adding is incorrect"" in response:
        return False
    return True

io=remote(""padding-oracle.chall.srdnlen.it"", 443, ssl=True)

io.recvuntil(b""flag"")
iv_and_flag=io.recvuntil(b""What do you want to decrypt (in hex)?"").decode().strip()
iv_and_flag=iv_and_flag[:192]

iv_and_flag=bytes.fromhex(iv_and_flag) #ora è di 96

array = [iv_and_flag[i] for i in range(0, len(iv_and_flag))]

print(array)

orig_arr_80=array[79]

for i in range(0, 256):
    if i == orig_arr_80:
        continue

    array[79] = i

    if oracle_decrypt(bytes(array)):
        t1=i
        print(i)

x1 = (t1) ^ 1

p1 = x1 ^ orig_arr_80

print(p1)




io.close()
"
wHTPCHP8,Pastes.io - #1 Pastebin Alternative,xxsa,PHP,Monday 11th of March 2024 02:43:29 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
User profile page
Trending pastes page (day, week, month, year)
No Captcha for logged in users feature

Simple Ads by Google Adsense ( Few rather than Pastebin )"
w8vFPrq9,9542,LEGEND2004,C++,Monday 11th of March 2024 02:34:04 PM CDT,"#pragma GCC optimize(""O3"")
#include <bits/stdc++.h>
using namespace std;

#define int long long
#define io ios_base::sync_with_stdio(0); cin.tie(0)
#define pb push_back
#define F first
#define S second
#define endl '\n'
const int N = 1e6 + 5;


signed main()
{
    io;

    int n;
    cin >> n;
    vector<int> v;
    for(int i = 2; i <= 9; i++){
        while(n % i == 0){
            v.pb(i);
            n /= i;
        }
    }
    if(n != 1){
        cout << ""-1"";
        return 0;
    }
    reverse(v.begin() , v.end());
    for(int i : v)
        cout << i;
}
"
Hpx0kygy,Untitled,Mysoft,Batch,Monday 11th of March 2024 02:08:40 PM CDT,"@echo off
setlocal
set ext=.dll
set find=%systemroot%\system32\find.exe
rem dir /b /s *.* >temp.$$$
for /F  ""delims="" %%a IN ('type temp.$$$ ^| %find% /i ""%ext%""') do call :ChkFile ""%%a""
endlocal
goto :eof

:ChkFile  
  if [%~x1] NEQ [%ext%] goto :eof
  set fn=%~n1
  type temp.$$$ | %find% /i ""\%fn%.""
  echo.
goto :eof
"
hescZSV5,F,Ankit_132,C++,Monday 11th of March 2024 02:08:39 PM CDT,"#include <bits/stdc++.h>
 
using namespace std;
 
#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back
 
int main()
{
    _test
    {
    	int n, m, k;
    	cin >> n >> m >> k;
    	vector<int>a(n), b(m), c(k);
    
    	for (int i = 0; i < n; i++)cin >> a[i];
    	for (int i = 0; i < m; i++)cin >> b[i];
    	for (int i = 0; i < k; i++)cin >> c[i];
    	
    	vector<array<int, 2>>d(n - 1);
    
    	for (int i =0; i<n-1; i++)
        {
    		d[i][0] = a[i + 1] - a[i];
    		d[i][1] = i;
    	}
    
    	sort(d.rbegin(), d.rend());
    	sort(b.begin(), b.end());
    	sort(c.begin(), c.end());
    
    	int res1 = d[0][0], res2 = 0;
    	int id = d[0][1];
    	if (n > 2) 
    	   res2 = d[1][0];
    	
    	int res = res1;
    	for (int i = 0; i < m; i++) 
    	{
    		int l = a[id], r = a[id + 1];
    		int mid = ((ll)l + r) / 2;
    		int t = lower_bound(c.begin(), c.end(), mid - b[i]) - c.begin();
    		for (int j = max(0, t - 3); j <= min(k - 1, t + 3); j++) 
    		{
    			if (b[i] + c[j] >= l && b[i] + c[j] <= r) 
    				res = min(res, max(b[i] + c[j] - a[id], a[id+1] - b[i] - c[j]));		
    		}
    	}
    
    	cout << max(res, res2)<<'\n';
    }
}"
LAqcduAG,E,Ankit_132,C++,Monday 11th of March 2024 02:08:32 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n, m, k, d;
        cin>>n>>m>>k>>d;

        vector<vector<int>> a(n, vector<int> (m));

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
                cin>>a[i][j];
        }

        multiset<ll int> mst;
        vector<ll int> val(m);
        vector<ll int> vals(n);

        for(int i=0; i<n; i++)
        {
            fill(val.begin(), val.end(), 0);
            mst.clear();

            mst.insert(1);

            for(int j=1; j<m; j++)
            {
                val[j] = *mst.begin() + a[i][j] + 1;
                mst.insert(val[j]);
                if(j-d > 1)        mst.erase(mst.find(val[j-d-1]));
                if(j-d == 1)       mst.erase(mst.find(1));
            }

            vals[i] = val.back();
        }

        for(int i=1; i<n; i++)
            vals[i] += vals[i-1];

        ll int ans = 1e18;

        for(int i=k-1; i<n; i++)
        {
            ll int l = 0;

            if(i-k>=0)      l = vals[i-k];

            ans = min(ans, vals[i] - l);
        }

        cout<<ans<<""\n"";
    }
}"
NbTt4AB6,D,Ankit_132,C++,Monday 11th of March 2024 02:08:24 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n, m, x;
        cin>>n>>m>>x;

        vector<int> a(n+1), b(n+1);

        a[x-1] = 1;

        for(int i=0; i<m; i++)
        {
            int d;
            char c;
            cin>>d>>c;

            fill(b.begin(), b.end(), 0);

            for(int j=0; j<n; j++)
            {
                if(!a[j])       continue;

                if(c=='0' || c=='?')    b[(j+d)%n] = 1;
                if(c=='1' || c=='?')    b[(n+(j-d))%n] = 1;
            }

            a = b;
        }

        cout<<count(a.begin(), a.end(), 1)<<""\n"";
        for(int i=0; i<n; i++)
        {
            if(a[i])
                cout<<i+1<<"" "";
        }
        cout<<""\n"";
    }
}"
dzCLtmh0,C,Ankit_132,C++,Monday 11th of March 2024 02:08:10 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n;
        string s;
        cin>>n>>s;

        int ans = 0;

        for(int i=0; i<n-2; i++)
        {
            if(s[i]=='p' && s[i+1]=='i' && s[i+2]=='e')
                ans++, i+=2;

            if(i+4<n && s[i]=='m' && s[i+1]=='a' && s[i+2]=='p'
                             && s[i+3]=='i' && s[i+4]=='e')
                ans++, i += 4;
            else if(s[i]=='m' && s[i+1]=='a' && s[i+2]=='p')
                ans++, i+=2;
        }

        cout<<ans<<""\n"";
    }
}"
akWV2Ngb,B,Ankit_132,C++,Monday 11th of March 2024 02:08:02 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n;
        cin>>n;

        vector<int> a(n);
        for(auto &e: a)     cin>>e;

        int f = 1;

        for(int i=0; i<n-2; i++)
        {
            if(a[i] < 0)        break;

            a[i+1] -= 2*a[i];
            a[i+2] -= a[i];
            a[i] = 0;
        }

        if(count(a.begin(), a.end(), 0) == n)
            cout<<""YES\n"";
        else
            cout<<""NO\n"";
    }
}"
1X5ZsMjf,A,Ankit_132,C++,Monday 11th of March 2024 02:07:00 PM CDT,"#include <bits/stdc++.h>

using namespace std;

#define ll     long long
#define _test   int _TEST; cin>>_TEST; while(_TEST--)
#define ff     first
#define ss     second
#define pb     push_back

int main()
{
    _test
    {
        int n, m, k;
        cin>>n>>m>>k;

        vector<int> a(n), b(m);

        for(auto &e: a)     cin>>e;
        for(auto &e: b)     cin>>e;

        int ans = 0;

        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
                ans += (a[i]+b[j] <= k);
        }

        cout<<ans<<""\n"";
    }
}"
AL36chaA,Codigo Tabal Ejemplo,tinchotincho4,HTML,Monday 11th of March 2024 01:51:16 PM CDT,"    <table border=""2px""> 
        <caption>Lista de Codigo</caption>

        <tr>
            <th>Titulos</th>
            <th>Objetos</th>
            <th>Lineas</th>
        </tr>

        <tr>
            <td>h1</td>
            <td>a</td>
            <td>br</td>
        </tr>

        <tr>
            <td>h2</td>
            <td>p</td>
            <td>hr</td>
        </tr>

        <tr>
            <td>h3</td>
            <td>img</td>
            <td>table</td>
        </tr>
    </table>"
hhtbF8wv,функции для массивов,Petro_zzz,C++,Monday 11th of March 2024 01:38:40 PM CDT,"#include <iostream>
#include <time.h>

using namespace std;

void task_0() {

	const int arr_size = 10;
	int arr[arr_size]{1,2,3};	

	for (int k = 0; k < arr_size; k++) {
		arr[k] = k+1;
		//cout << arr[k] << "" ""; // если смешивать отображение и заполнение
	}

	for (int k = 0; k < arr_size; k++) {
		cout << arr[k] << "" "";
	}
}

void task_1() {
	const int arr_size = 10;
	int arr[arr_size]{ 1,2,3 };

	for (int k = 0; k < arr_size; k++) {
		arr[k] = k + 1;
		//cout << arr[k] << "" ""; // если смешивать отображение и заполнение
	}

	
	for (int k = arr_size-1; k >= 0; k--) {
		if (
			!(arr[k] == 3 ||
			arr[k] == 6 || 
			arr[k] == 9)
			) {
			cout << arr[k] << "" "";
		}
	}
}

void sum_arr() {
	const int n = 4;
	int a[n]{ 3,4,5,7 };
	int b[n]{ 5,6,7,8 };
	int c[n];

	for (int k = 0; k < n; k++) {
		c[k] = a[k] + b[k];
	}

	for (int k = 0; k < n; k++) {
		cout << c[k] << "" "";
	}
	cout << endl;
}

void show_arr(int size, int arr[]) {
	for (int k = 0; k < size; k++) {
		cout << arr[k] << "" "";
	}
	cout << endl;
}

int gen_rand(int a, int b) {	
	return rand() % (b + 1 - a) + a;
}

void gen_randarr(int size, int arr[], int a, int b) {
	for (int k = 0; k < size; k++) {
		arr[k] = gen_rand(a, b);
	}
}

int main() {	
	std::srand(time(0));
	int val = gen_rand(-10, 10);
	cout << val << endl;	

	const int size_arr = 20;
	int a[size_arr];
	gen_randarr(size_arr, a, -10, 10);
	show_arr(size_arr, a);
	a[2] = 777;
	show_arr(size_arr, a);
	return 0;
}"
mi6ATDw7,Untitled,Mysoft,Batch,Monday 11th of March 2024 01:28:15 PM CDT,"@echo off
setlocal
set ext=.dll
dir /b /s *.* >temp.$$$
for /F  %%a IN ('type temp.$$$ ^| find /i ""%ext%""') do call :ChkFile ""%%a""
endlocal
goto :eof

:ChkFile
  if [%~x1] NEQ [%ext%] goto :eof
  set fn=%~n1
  type temp.$$$ | find /i ""\%fn%.""
  echo.
goto :eof
"
s2A1fMXt,Untitled,DreezySZN,Lua,Monday 11th of March 2024 01:22:06 PM CDT,"-- Get the peripheral object for the ME controller
local meController = peripheral.wrap(""right"") -- Replace ""your_controller_side_here"" with the side where your ME controller is located

-- Check if the peripheral object exists
if meController == nil then
  print(""ME Controller not found!"")
  return
end

-- Get the ME network storage information
local storageCells = meController.getStorageCells()
local totalTypes = 0
local totalBytes = 0

-- Iterate through storage cells to calculate total types and bytes
for _, cell in ipairs(storageCells) do
  totalTypes = totalTypes + cell.getItemTypes()
  totalBytes = totalBytes + cell.getStoredItemCount()
end

-- Calculate the percentage of storage used
local totalCapacity = meController.getMaxStoredItems()
local capacityUsedPercent = (totalBytes / totalCapacity) * 100

-- Print the storage information
print(""ME Network Storage Capacity:"")
print(""Total Types: "" .. totalTypes)
print(""Total Bytes: "" .. totalBytes)
print(""Capacity Used: "" .. string.format(""%.2f"", capacityUsedPercent) .. ""%"")
"
8ngriZC0,2,raya_petkovaa,JavaScript,Monday 11th of March 2024 12:47:05 PM CDT,"function sleep() {
    console.log('Sleeping...')
}

let cat = {
    name: 'Sasho2',
    sleeping: sleep()
}
 
cat.sleeping //this prints 'Sleeping...'"
4TtqPfFV,Untitled,SGov,Python,Monday 11th of March 2024 12:45:46 PM CDT,"import re

def callback_replace(math):
    m = math.group().replace('[[', '').replace(']]', '')
    if '|' in m:
        m = m.split('|')
        return f'[{m[1]}](https://ru.wikipedia.org/wiki/{m[0].replace("" "", ""_"")})'
    else:
        return f'[{m}](https://ru.wikipedia.org/wiki/{m.replace("" "", ""_"")})'


if comment != """":
        comment = re.sub(r""\[\[.*?]]"", callback_replace, comment)
      "
Dbsb92QU,example,raya_petkovaa,JavaScript,Monday 11th of March 2024 12:36:55 PM CDT,"function sleep() {
    console.log('Sleeping...')
}

// First way
let dog = {
    name: 'Sasho',
    sleeping: sleep
}

dog.sleeping()


// Second way
let cat = {
    name: 'Sasho2',
    sleeping: sleep()
}

dog.sleeping"
zCVxh3eL,Untitled,nicoviale_,Python,Monday 11th of March 2024 12:36:43 PM CDT,"from pwn import *

def oracle_decrypt(ct):
    io.sendline(ct.hex())
    response = io.recvline()
    if b""Padding is incorrect"" in response:
        return False
    return True

io=remote(""padding-oracle.chall.srdnlen.it"", 443, ssl=True)

io.recvuntil(b""flag"")
iv_and_flag=io.recvuntil(b""What do you want to decrypt (in hex)?"").decode().strip()
iv_and_flag=iv_and_flag[:192]
array = [iv_and_flag[i:i+2] for i in range(0, len(iv_and_flag), 2)]
orig_arr_80=array[79]

print(array)

for i in range(0, 256):
    array[80] = hex(i)[2:4].zfill(2)
    #print(array)
    if oracle_decrypt(bytes.fromhex("""".join(array))):
        t1=int(array[79], 16)
        print(int(array[79], 16))
        break
        
x1 = t1 ^ 1

p1 = x1 ^ int(orig_arr_80, 16)

print(p1)


io.close()
"
y7s2MsFL,simple strip miner,tuhde,Lua,Monday 11th of March 2024 12:26:24 PM CDT,"turtle.digUp()
turtle.up()

while true do
	turtle.select( 16 )
	turtle.placeDown()
	for i=1, 3 do
		turtle.dig()
		turtle.forward()
		turtle.digDown()
	end
	turtle.turnLeft()
	for i=1, 5 do
		turtle.dig()
		turtle.forward()
	end
	turtle.turnRight()
	turtle.turnRight()
	for i=1, 5 do
		turtle.forward()
	end
	for i=1, 5 do
		turtle.dig()
		turtle.forward()
	end
	turtle.turnLeft()
	turtle.turnLeft()
	for i=1, 5 do
		turtle.forward()
	end
	turtle.turnRight()
end"
ikiYHhMC,asefdresnt,gadungw71,PHP,Monday 11th of March 2024 12:02:07 PM CDT,"https://m.facebook.com/media/set/?set=a.122118730418219431
https://m.facebook.com/media/set/?set=a.122118039470219983
https://m.facebook.com/media/set/?set=a.122123112092212102
https://m.facebook.com/media/set/?set=a.122118733388219431
https://m.facebook.com/media/set/?set=a.122118043952219983
https://m.facebook.com/media/set/?set=a.122123116874212102
https://www.charidy.com/1710143625009368146
https://www.charidy.com/1710143914070339449
https://www.charidy.com/1710144528075132403
https://torre.ai/aleenakicagcom?r=corAalPF
https://torre.ai/1080p?r=aMewB1ZG
https://torre.ai/exhuma2024tw?r=s37h1SeJ
https://www.taskade.com/p/2024-4-k-hd-1080p-01HRPAH732A3F3RWV4MWTC4M31
https://www.taskade.com/p/hd-4-k-01HRPDNJ8RA46Z2NP3WJQ7413H
https://www.taskade.com/p/1080p-01HRPDVZP7JHV6NNC2S7XR9P21
https://gamma.app/public/TW-2024-4K-1080p-rs2i4qh6qx3x3ia
https://gamma.app/public/2024HD-TWHK-w136akgyp7pd4vr
https://vk.com/@blurayhd1080p-exhuma-hd1080p4k
https://vk.com/@702061060-2024
https://www.charidy.com/1710166580561957500
https://www.charidy.com/1710166854566097816
https://www.charidy.com/1710167069271850604
https://torre.ai/hd1080p?r=wasEhjfe
https://torre.ai/1080p0?r=hd7VnWCk
https://www.taskade.com/p/the-pig-the-snake-and-the-pigeon-2024-tw-01HRPZAPPC0DP1CD06F0CB3EC1
https://www.taskade.com/p/hd-4-k-01HRQ07QTVYS49Z3EWEJ4Y8S8E
https://vk.com/@fullversionhd-hd1080p4k
https://vk.com/@715279067-20241080p
https://gamma.app/public/Untitled-5nfh3ww2g5tslup
https://github.com/2024-BLURAY
https://github.com/Exhuma-2024-HD
https://wandering.flarum.cloud/d/48294-cintahati
https://click4r.com/posts/g/15082812/dcsebestse121414
https://forum.webnovel.com/d/169326-sadcsrbdrgtdrb345w35
https://hiuderyy.hashnode.dev/henhenanatara
https://gamma.app/public/Untitled-j4xfflqxffe1xay
https://open.firstory.me/story/cltn597hf015y01xkbk6h3iqu
https://telegra.ph/DSFVSEBRESBTRTNRY-03-11
https://start.me/w/Em6QNm
https://hackmd.io/@rerewilli6/ByJFv3h66
https://muckrack.com/awadwa-ewewewe/bio
https://profile.hatena.ne.jp/aweweratna/
"
FgvG7GuH,Untitled,Josif_tepe,C++,Monday 11th of March 2024 11:57:27 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int x;
    cin >> x;
    
    if(x < 5) {
        cout << ""Brojot e pomal od 5"" << endl;
    }
    else {
        cout << ""Brojot e ili pogolem ili ednakov na 5"" << endl;
    }
    return 0;
}"
mXAhuTK1,Untitled,Josif_tepe,C++,Monday 11th of March 2024 11:52:46 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int a, b;
    cin >> a >> b;
    
    if(a < b) {
        cout << a + b << endl;
    }
    
    if(a >= b) {
        cout << a - b << endl;
    }
    return 0;
}




"
SvycAeKC,Untitled,Josif_tepe,C++,Monday 11th of March 2024 11:47:33 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int a, b;
    cin >> a >> b;
    
    if(a < b) {
        cout << ""A e pomalo od B"" << endl;
    }
    
    
    cout << ""NADVOR OD IF"" << endl;
    return 0;
}




"
XWD8gv3f,Untitled,Josif_tepe,C++,Monday 11th of March 2024 11:34:07 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    cout << n * n << endl;
    cout << n * n * n << endl;
    
    return 0;
}"
8xqFcuVN,mail_question237400350 (Слияние массивов с изменённым порядком),maksim32,Pascal,Monday 11th of March 2024 11:28:56 AM CDT,"{ Заданы массивы А и В по 10 элементов. Слить массивы А и В в массив С
 так, чтобы вначале шли элементы меньше среднего значения по всему массиву С. }

var A, B: array[1..10] of integer;
  C: array[1..20] of integer;
  i, sum, avg, cnt: integer;
begin
  { Заполнить исходные массивы значениями }
  randomize;
  for i := 1 to 10 do begin
    A[i] := random(21) - 10;
    B[i] := random(21) - 10;
  end;

  write('A: ');
  for i := 1 to 10 do begin
    write(A[i], ' ');
  end;
  writeln;
  
  write('B: ');
  for i := 1 to 10 do begin
    write(B[i], ' ');
  end;
  writeln;

  { Найти среднее арифметическое }
  sum := 0;
  for i := 1 to 10 do begin
    sum := sum + A[i];
    sum := sum + B[i];
  end;
  avg := sum div 20;
  writeln('avg = ', avg);
  
  { Сформировать массив C, в первой половине значения меньше avg, во второй - больше}
  cnt := 0;
  for i := 1 to 10 do begin
    if A[i] < avg then begin
      inc(cnt);
      C[cnt] := A[i];
    end;
  end;
  
  for i := 1 to 10 do begin
    if B[i] < avg then begin
      inc(cnt);
      C[cnt] := B[i];
    end;
  end;
  
  for i := 1 to 10 do begin
    if A[i] >= avg then begin
      inc(cnt);
      C[cnt] := A[i];
    end;
  end;

  for i := 1 to 10 do begin
    if B[i] >= avg then begin
      inc(cnt);
      C[cnt] := B[i];
    end;
  end;
  
  { Вывести итоговый массив }
  write('C: ');
  for i := 1 to 20 do begin
    write(C[i], ' ');
  end;
  writeln;
end."
C80fN2zJ,.reduce() func,BojidarDosev,JavaScript,Monday 11th of March 2024 11:16:04 AM CDT," const newNumbers = [1, 3, 5, 7];

const newSum = newNumbers.reduce((accumulator,currentValue) =>
  {
      console.log('The value of accumulator: ', accumulator);
      console.log('The value of currentValue: ', currentValue);
      return currentValue+ accumulator;
//second arg  
},10);

console.log(newSum);"
yEP1R8RA,start.sh,ciz01,Bash,Monday 11th of March 2024 11:10:20 AM CDT,"#! /bin/bash

./programma1 &
pid_prog1=$! # $! recupera il pid dell'ultimo comando eseguito

./programma2 &
pid_prog2=$!

... # per ogni programma che va avviato

trap cleanup INT # cattura gli interrupt tipo Ctrl + C, ed esegue la funzione cleanup

while [ 1 ]; do
	sleep 1
done;

# questa teoricamente deve stare sopra, sennò trap non trova la definizione
cleanup(){
	kill pid_prog1 pid_prog2 ...
	echo ""Tutti i programmi sono stati chiusi, adios!""
}"
