id,title,username,language,date,content
8PL7g3JK,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,jusst2k4,GetText,Sunday 31st of March 2024 12:56:58 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_497126.pdf

Working as of:
31 March 2024


















"
cUFSW4dc,primes.lua,mb6ockatf,Lua,Sunday 31st of March 2024 12:50:11 PM CDT,"function is_prime(n)
        if n < 2 then
                return false
        elseif n == 2 then
                return true
        elseif n % 2 == 0 then
                return false
        end
        result = true
        search_limit = math.ceil(math.sqrt(n))
        for i = 3, search_limit, 2 do
                if n % i == 0 then
                        result = false
                        break
                end
        end
        return result
end"
Kwzd2vMY,Unit_17,lovelyvook,C#,Sunday 31st of March 2024 12:42:23 PM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandSimpleAttack = ""1"";
            const string CommandFireBall = ""2"";
            const string CommandExplosion = ""3"";
            const string CommandTreatment = ""4"";

            int bossHealth = 150;
            Random random = new Random();
            int minRandomNumber = 10;
            int maxRandomNumber = 21;
            int userDefaultHealth = 100;
            int userDefaultMana = 20;
            int userCurrentHealth = 100;
            int userCurrentMana = 20;
            int userSimpleAttack = 12;
            int userFireBallAttack = 20;
            int userExplosionAttack = 40;
            int costOfFireBall = 10;
            int increaseHealth = 20;
            int increaseMana = 5;
            int numberOfExplosion = 0;
            int numberOfTreatment = 5;
            bool isWork = true;
            string userInput;

            Console.WriteLine($""–ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞ {bossHealth} | –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ {userDefaultHealth} | –ú–∞–Ω–∞ –∏–≥—Ä–æ–∫–∞ {userDefaultMana}\n"");

            while (isWork)
            {
                Console.WriteLine($""{CommandSimpleAttack} - –ø—Ä–æ—Å—Ç–∞—è –∞—Ç–∞–∫–∞"" +
                    $""\n{CommandFireBall} - –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä (—Ç—Ä–∞—Ç–∏—Ç {costOfFireBall} –º–∞–Ω—ã)"" +
                    $""\n{CommandExplosion} - –≤–∑—Ä—ã–≤ (–¥–æ—Å—Ç—É–ø–Ω–æ {numberOfExplosion})"" +
                    $""\n{CommandTreatment} - –ª–µ—á–µ–Ω–∏–µ (–¥–æ—Å—Ç—É–ø–Ω–æ {numberOfTreatment})"");
                Console.Write(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: "");
                userInput = Console.ReadLine();
                Console.WriteLine();

                switch (userInput)
                {
                    case CommandSimpleAttack:
                        bossHealth -= userSimpleAttack;
                        Console.WriteLine(""–ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –Ω–∞ "" + userSimpleAttack);
                        break;

                    case CommandFireBall:
                        bossHealth -= userFireBallAttack;

                        if (userCurrentMana - costOfFireBall >= 0)
                        {
                            userCurrentMana -= costOfFireBall;
                            numberOfExplosion = 1;
                            Console.WriteLine(""–ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –Ω–∞ "" + userFireBallAttack);
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞–Ω—ã"");
                        }

                        break;

                    case CommandExplosion:
                        if (numberOfExplosion > 0)
                        {
                            bossHealth -= userExplosionAttack;
                            Console.WriteLine(""–ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç –Ω–∞ "" + userExplosionAttack);
                            numberOfExplosion = 0;
                        }
                        else
                        {
                            Console.WriteLine(""–ü–µ—Ä–µ–¥ –≤–∑—Ä—ã–≤–æ–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä"");
                        }
                        break;

                    case CommandTreatment:
                        if (numberOfTreatment > 0)
                        {
                            userCurrentHealth += increaseHealth;

                            if (userCurrentHealth > userDefaultHealth)
                            {
                                userCurrentHealth = userDefaultHealth;
                            }

                            userCurrentMana += increaseMana;

                            if (userCurrentMana > userDefaultMana)
                            {
                                userCurrentMana = userDefaultMana;
                            }

                            Console.WriteLine($""–ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {userCurrentHealth} | –ú–∞–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {userCurrentMana}"");
                            numberOfTreatment--;
                        }
                        else
                        {
                            Console.WriteLine(""–ê–ø—Ç–µ—á–µ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç"");
                        }
                        break;

                    default:
                        Console.WriteLine(""–ü—Ä–æ–º–∞—Ö –∏–≥—Ä–æ–∫–∞"");
                        break;
                }

                int bossAttack = random.Next(minRandomNumber, maxRandomNumber);
                userCurrentHealth -= bossAttack;
                Console.WriteLine(""–ë–æ—Å—Å –∞—Ç–∞–∫—É–µ—Ç –Ω–∞ "" + bossAttack);
                Console.WriteLine($""\n–ó–¥–æ—Ä–æ–≤—å–µ –±–æ—Å—Å–∞ {bossHealth} | –ó–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ {userCurrentHealth} | –ú–∞–Ω–∞ –∏–≥—Ä–æ–∫–∞ {userCurrentMana}\n"");

                if (bossHealth < 0 && userCurrentHealth < 0)
                {
                    Console.WriteLine(""–ù–∏—á—å—è"");
                    isWork = false;
                }
                else if (bossHealth < 0)
                {
                    Console.WriteLine(""–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞"");
                    isWork = false;
                }
                else if (userCurrentHealth < 0)
                {
                    Console.WriteLine(""–ü–æ–±–µ–¥–∞ –±–æ—Å—Å–∞"");
                    isWork = false;
                }
            }
        }
    }
}"
bRSF2DYh,lite,vip-fran,Lua,Sunday 31st of March 2024 12:41:10 PM CDT,"gg.setVisible(false)
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('0.85611331463;0.13695345819;3.93490495e-7;1::13', gg.TYPE_FLOAT)
gg.refineNumber('0.85611331463', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-200', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('0.85340732336;0.02057394944;7.15025408e-8::9', gg.TYPE_FLOAT)
gg.refineNumber('0.85340732336', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-200', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('h 62 00 6F 00 6E 00 65 00 5F 00 4C 00 65 00 66 00 74 00 5F 00 57 00 65 00 61 00 70 00 6F 00 6E 00', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h 62 00 6F 00 6E 00 65 00 5F 00 4E 00 65 00 63 00 6B 00', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('h 23 AA A6 B8 46 0A CD 70', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h 23 AA A6 B8 B2 F7 1F A4', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('h 57 27 13 BE C5 26 27 BC 1F 02 81 B3 D6 2D 8B 29 73 4E D6 34 CB 5F 13 BE BA 55 7D 3F 00 00 80 3F 00 00 80 3F 00 00 80 3F', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h EC 51 B8 BD 3B 64 29 BD 1F 02 81 B3 D6 2D 8B 29 73 4E D6 34 CB 5F 13 BE BA 55 7D 3F 72 1C C7 3F 72 1C C7 3F 72 1C C7 3F', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('h 7B D5 FE BD 6B F1 AE BC DA 65 8F B3 38 C2 15 2A 1F CD 04 35 42 A6 36 BE 0D E5 7B 3F 01 00 80 3F 01 00 80 3F 00 00 80 3F', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h EC 51 B8 BD 3B 64 29 BD DA 65 8F B3 38 C2 15 2A 1F CD 04 35 42 A6 36 BE 0D E5 7B 3F 00 00 C0 3F 00 00 C0 3F 00 00 C0 3F', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('3D;15;35;10;20::17', gg.TYPE_FLOAT)
gg.refineNumber('15;35;10;20::13', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('25;45;62;80', gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-1.30951038e25;-1.30684047e21;-9.4914291e20;-3.35681039e27;-9.49148258e20;-3.70231918e20;-9.38691756e22;-3.69655493e20::29', gg.TYPE_FLOAT)
gg.refineNumber('-1.30951038e25;-1.30684047e21::5', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-5.9029581e21;-2.02910209e20', gg.TYPE_FLOAT)
gg.clearResults()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-1.30951038e25;-1.30684047e21;-9.4914291e20;-3.35681039e27;-9.49143192e20;-8.33055323e22;-3.69511342e20;-8.75856092e22::29', gg.TYPE_FLOAT)
gg.refineNumber('-1.30951038e25;-1.30684047e21::5', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-5.9029581e21;-2.02910209e20', gg.TYPE_FLOAT)
gg.clearResults()
gg.setVisible(true)
os.exit()"
RH4GKrpj,full,vip-fran,Lua,Sunday 31st of March 2024 12:30:42 PM CDT,"gg.alert('‚≠êSCRIPT VIP PREMIUM‚≠ê\nüá™üá¶CREADOR: FRAN‚Ä¢HACKER‚Ñ¢üá™üá¶\n‚ñ∂Ô∏èYOUTUBE: FRAN‚Ä¢HACKER‚Ñ¢‚ñ∂Ô∏è','‚û°Ô∏èABRIR‚û°Ô∏è')
if gg.getTargetInfo().processName ~= 'com.dts.freefireth' then gg.alert('‚ùåSELECIONE EL PROCESO DE FREE FIRE‚ùå','üîôSALIRüîô') os.exit(print('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è')) end
if gg.getTargetInfo().versionCode ~= '2019117062' then gg.alert('‚ö†Ô∏èSU VERSI√ìN ES DE 64 BITS‚ö†Ô∏è\n\n‚ùåSCRIPT NO COMPATIBLE CON ESTA VERSI√ìN‚ùå \n\nüê¢TIENES QUE INSTALAR LA VERSI√ìN DE 32 BITSüê¢','üîôSALIRüîô') os.exit(print('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è')) end
memFrom, memTo, lib, num, lim, results, src, ok = 0, -1, nil, 0, 32, {}, nil, false function name(n) if lib ~= n then lib = n ranges = gg.getRangesList(lib) if #ranges == 0 then os.exit() else memFrom = ranges[1].start memTo = ranges[#ranges]['end'] end end end function hex2tbl(hex) ret = {} hex:gsub('%S%S', function (ch) ret[#ret + 1] = ch return '' end) return ret end function original(orig) tbl = hex2tbl(orig) len = #tbl if len == 0 then return end used = len if len > lim then used = lim end s = '' for i = 1, used do if i ~= 1 then s = s..';' end v = tbl[i] if v == '??' or v == '**' then v = '0~~0' end s = s..v..'r' end s = s..'::'..used gg.searchNumber(s, 1, false, gg.SIGN_EQUAL, memFrom, memTo) if len > used then for i = used + 1, len do v = tbl[i] if v == '??' or v == '**' then v = 256 else v = ('0x'..v) + 0 if v > 127 then v = v - 256 end end tbl[i] = v end end found = gg.getResultCount(); results = {} count = 0 checked = 0 while true do if checked >= found then break end all = gg.getResults(8) total = #all start = checked if checked + used > total then break end for i, v in ipairs(all) do v.address = v.address + of end gg.loadResults(all) while start < total do good = true of = all[1 + start].address - 1 if used < len then get = {} for i = lim + 1, len do get[i - lim] = {address = of + i, flags = 1, value = 0} end get = gg.getValues(get) for i = lim + 1, len do ch = tbl[i] if ch ~= 256 and get[i - lim].value ~= ch then good = false break end end end if good then count = count + 1 results[count] = of checked = checked + used else del = {} for i = 1, used do del[i] = all[i + start] end gg.removeResults(del) end start = start + used end end end function replaced(repl) num = num + 1 tbl = hex2tbl(repl) if src ~= nil then source = hex2tbl(src) for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' and v == source[i] then tbl[i] = '**' end end src = nil end cnt = #tbl set = {} s = 0 for _, addr in ipairs(results) do for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' then s = s + 1 set[s] = { ['address'] = addr + i,  ['value'] = v..'r', ['flags'] = 1,} end end end if s ~= 0 then gg.setValues(set) end ok = true end
function script()
menuprincipal = gg.choice({
invisibl..'',
'MENU ANTENASüì°üì∂',
'MENU ARMASüî´‚ò¢Ô∏è',
'MENU MAPAüåçüó∫Ô∏è',
'MENU PERSONAJESüë•üôã',
'MENU ESCONDERSEüôàüëÅÔ∏è‚Äçüó®Ô∏è',
'MENU VEH√çCULOüöò',
'MENU C√ÅMARAüì∏ü§≥',
'BORRAR CUENTAüóëÔ∏èüöÆ‚úÖ',
'DESACTIVAR BORRAR CUENTAüóëÔ∏èüöÆ‚ùå',
'CERRAR SCRIPTüëãü§ë'
},nil,'‚≠êSCRIPT VIP PREMIUM‚≠ê\nüá™üá¶CREADOR: FRAN‚Ä¢HACKER‚Ñ¢üá™üá¶\n‚ñ∂Ô∏èYOUTUBE: FRAN‚Ä¢HACKER‚Ñ¢‚ñ∂Ô∏è')
if menuprincipal == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if menuprincipal == 1 then invisible() end
if menuprincipal == 2 then menugps() end
if menuprincipal == 3 then menuarmas() end
if menuprincipal == 4 then menumapa() end
if menuprincipal == 5 then menupersonajes() end
if menuprincipal == 6 then menuesconderse() end
if menuprincipal == 7 then menuvehiculo() end
if menuprincipal == 8 then menucamara() end
if menuprincipal == 9 then borrarcuenta() end
if menuprincipal == 10 then desactivarborrarcuenta() end
if menuprincipal == 11 then gg.setVisible(true) os.exit(print('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è')) end
end end
invisibl = 'ACTIVAR MODO FANTASMAüëª‚úÖ'
function invisible()
if invisibl == 'ACTIVAR MODO FANTASMAüëª‚úÖ' then
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x226c918
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('ACTIVAR MODO FANTASMAüëª‚úÖ')
invisibl = 'DESACTIVAR MODO FANTASMAüëª‚ùå'
elseif invisibl == 'DESACTIVAR MODO FANTASMAüëª‚ùå' then
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x226c918
original('7F 45 4C 46 01 01 01 00')
replaced('F0 4F 2D E9 1C B0 8D E2')
gg.clearResults()
gg.toast('DESACTIVAR MODO FANTASMAüëª‚ùå')
invisibl = 'ACTIVAR MODO FANTASMAüëª‚úÖ'
end end
function menugps()
gps = gg.multiChoice({
'ANTENA CABEZAüì°üì∂üíÜ(LOGIN)',
'ANTENA CUELLOüì°üì∂üß£(LOGIN)',
'ANTENA HOMBROüì°üì∂ü§∑üí™(LOGIN)',
'ANTENA MANOüì°üì∂‚úã(LOGIN)',
'ANTENA DEDOüì°üì∂‚òùÔ∏è(LOGIN)',
'ANTENA PIEüì°üì∂üë£(LOGIN)',
'REGRESARüîô'
})
if gps == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if gps [1] then gpscabeza() end
if gps [2] then gpscuello() end
if gps [3] then gpshombro() end
if gps [4] then gpsmano() end
if gps [5] then gpsdedo() end
if gps [6] then gpspie() end
if gps [7] then gg.setVisible(true) end
end end
function gpscabeza()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('5.9762459e-7;1::5 ', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('7.5538861e-7;1::5', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ANTENA CABEZAüì°üì∂üíÜ(LOGIN)')
end
function gpscuello()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('7.15025408e-8;1::5', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('3.93490495e-7;1::5', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ANTENA CUELLOüì°üì∂üß£(LOGIN)')
end
function gpshombro()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('-0.30576485395;0.01430506539;-0.73534429073;1::13', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('-0.2212036103;0.03038031235;-0.76885718107;1::13', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ANTENA HOMBROüì°üì∂ü§∑üí™(LOGIN)')
end
function gpsmano()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('-0.02980032004;1;0.48141112924::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('0.09043131769;1;0.14753369987::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ANTENA MANOüì°üì∂‚úã(LOGIN)')
end
function gpsdedo()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('1;3.2404066e-7::5', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('-0.39830258489;1;0.5870424509::9', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ANTENA DEDOüì°üì∂‚òùÔ∏è(LOGIN)')
end
function gpspie()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('0.02564372122;0.10784503818;1.0;-0.11345791817;0.07249621302::17', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('1000000', gg.TYPE_FLOAT)
gg.clearResults()
gg.searchNumber('0.0959668979;1;-0.0812920332;0.0119578382::13', gg.TYPE_FLOAT)
gg.refineNumber('1', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('3000', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ANTENA PIEüì°üì∂üë£(LOGIN)')
end
function menuarmas()
armas = gg.multiChoice({
'NO RECOIL O NO RETROCESO (LAS BALAS NO SE DISPERSAN)üî´üéØ',
'BALAS M√ÅGICAS (AUMENTO DE LA HITBOX)üî´üéØ',
'REGEDIT 55 ""LA MIRA SUBE Y BAJAüî´üòÄ(LOGIN)',
'REGEDIT 65 ""LA MIRA SUBE Y BAJAüî´ü•¥(LOGIN)',
'REGEDIT 80 ""LA MIRA SUBE Y BAJAüî´ü§§(LOGIN)',
'REGEDIT 90 ""LA MIRA SUBE Y BAJAüî´ü§Ø(LOGIN)',
'REGEDIT 100 ""LA MIRA SUBE Y BAJAüî´‚ò†Ô∏è(LOGIN)',
'SENSIBILIDAD (AUMENTA LA SENSIBILIDAD DEL TOUCH x2)‚úçÔ∏èüÜô',
'SENSIBILIDAD (AUMENTA LA SENSIBILIDAD DEL TOUCH x5)‚úçÔ∏èüÜô',
'SENSIBILIDAD (AUMENTA LA SENSIBILIDAD DEL TOUCH x10)‚úçÔ∏èüÜô',
'SEMIAIMBOT (DESTRUCCI√ìN DE GLOO CON LOS PU√ëOS)üëä‚ùÑÔ∏è',
'AIMBOT MIRA ""AUTO APUNTADO AL DISPARA CON LA MIRAüéØüîé(LOGIN)',
'AIMLOCK DISPARO (MIRA BLOQUEADA EN EL PECHO)üéØ‚ùåü§±',
'FAMAS Y SMG HACK (UTILIZAR SOLO CON FAMAS Y SMG)‚úÖüî´üêÜ',
'DESACTIVAR FAMAS Y SMG HACK‚ùåüî´üêÜ',
'REMOVER MIRAS (QUITAR LA MIRAS X2 Y X4 Y X8)üîé‚ùå',
'LIBERTAD DISPARANDO (PUEDES DISPARAR MIENTRAS TE MUEVES)üî´üèÉ',
'REGRESARüîô'
})
if armas == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if armas [1] then balasrectas() end
if armas [2] then balasnofallan() end
if armas [3] then tiroalacabeza55() end
if armas [4] then tiroalacabeza65() end
if armas [5] then tiroalacabeza80() end
if armas [6] then tiroalacabeza90() end
if armas [7] then tiroalacabeza100() end
if armas [8] then sensibilidadx2() end
if armas [9] then sensibilidadx5() end
if armas [10] then sensibilidadx10() end
if armas [11] then semiaimbot() end
if armas [12] then aimbotmira() end
if armas [13] then aimlockdisparo() end
if armas [14] then famashack() end
if armas [15] then famashackoff() end
if armas [16] then removermiras() end
if armas [17] then libertaddisparando() end
if armas [18] then gg.setVisible(true) end
end end
function balasrectas()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-7.1608877e24;1000;-1.30930378e25::9', gg.TYPE_FLOAT)
gg.refineNumber('1000', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('NO RECOIL O NO RETROCESO (LAS BALAS NO SE DISPERSAN)üî´üéØ')
end
function balasnofallan()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.00001;-1.30928164e25;-3.69511377e20::9', gg.TYPE_FLOAT)
gg.refineNumber('0.00001', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('1', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('BALAS M√ÅGICAS (AUMENTO DE LA HITBOX)üî´üéØ')
end
function tiroalacabeza55()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('0.6;0.6;1;3D;10;20;1D;2D::53', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0.6;0.6;1;3D;55;55;1D;2D', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('REGEDIT 55 ""LA MIRA SUBE Y BAJAüî´üòÄ(LOGIN)')
end
function tiroalacabeza65()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('0.6;0.6;1;3D;10;20;1D;2D::53', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0.6;0.6;1;3D;65;65;1D;2D', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('REGEDIT 65 ""LA MIRA SUBE Y BAJAüî´ü•¥(LOGIN)')
end
function tiroalacabeza80()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('0.6;0.6;1;3D;10;20;1D;2D::53', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0.6;0.6;1;3D;80;80;1D;2D', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('REGEDIT 80 ""LA MIRA SUBE Y BAJAüî´ü§§(LOGIN)')
end
function tiroalacabeza90()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('0.6;0.6;1;3D;10;20;1D;2D::53', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0.6;0.6;1;3D;90;90;1D;2D', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('REGEDIT 90 ""LA MIRA SUBE Y BAJAüî´ü§Ø(LOGIN)')
end
function tiroalacabeza100()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('15;35;10;20::13', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('25;45;60;80', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('REGEDIT 100 ""LA MIRA SUBE Y BAJAüî´‚ò†Ô∏è(LOGIN)')
end
function sensibilidadx2()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('300', gg.TYPE_FLOAT)
gg.getResults(1)
gg.editAll('180', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('SENSIBILIDAD (AUMENTA LA SENSIBILIDAD DEL TOUCH x2)‚úçÔ∏èüÜô')
end
function sensibilidadx5()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('300', gg.TYPE_FLOAT)
gg.getResults(1)
gg.editAll('100', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('SENSIBILIDAD (AUMENTA LA SENSIBILIDAD DEL TOUCH x5)‚úçÔ∏èüÜô')
end
function sensibilidadx10()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('300', gg.TYPE_FLOAT)
gg.getResults(1)
gg.editAll('50', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('SENSIBILIDAD (AUMENTA LA SENSIBILIDAD DEL TOUCH x10)‚úçÔ∏èüÜô')
end
function semiaimbot()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x1610204
original('7F 45 4C 46 01 01 01 00')
replaced('FF 0F 46 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('SEMIAIMBOT (DESTRUCCI√ìN DE GLOO CON LOS PU√ëOS)üëä‚ùÑÔ∏è')
end
function aimbotmira()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('1075000115;1065353216::9', gg.TYPE_DWORD)
gg.getResults(gg.getResultsCount())
gg.editAll('-10;981668463', gg.TYPE_DWORD)
gg.clearResults()
gg.toast('AIMBOT MIRA ""AUTO APUNTADO AL DISPARA CON LA MIRAüéØüîé(LOGIN)')
end
function aimlockdisparo()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x163c104
original('7F 45 4C 46 01 01 01 00')
replaced('32 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('AIMLOCK DISPARO (MIRA BLOQUEADA EN EL PECHO)üéØ‚ùåü§±')
end
function famashack()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x1613404
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('FAMAS Y SMG HACK (UTILIZAR SOLO CON FAMAS Y SMG)‚úÖüî´üêÜ')
end
function famashackoff()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x1613404
original('7F 45 4C 46 01 01 01 00')
replaced('F0 48 2D E9 10 B0 8D E2')
gg.clearResults()
gg.toast('DESACTIVAR FAMAS Y SMG HACK‚ùåüî´üêÜ')
end
function removermiras()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x1009198
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('REMOVER MIRAS (QUITAR LA MIRAS X2 Y X4 Y X8)üîé‚ùå')
end
function libertaddisparando()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0xfa54f4
original('7F 45 4C 46 01 01 01 00')
replaced('01 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('LIBERTAD DISPARANDO (PUEDES DISPARAR MIENTRAS TE MUEVES)üî´üèÉ')
end
function menumapa()
mapa = gg.multiChoice({
'CIELO NEGRO (ACTIVA EL MODO NOCHE)üåëüåÉ',
'QUITAR HIERBAS (QUITA EL PASTO DEL PISO)üèúÔ∏èüåø‚ùå',
'QUITAR √ÅRBOLES LEJANOS (LA DISTANCIA DE DIBUJADO DE LOS √ÅRBOLES DISMINUYE)üå¥üå≥üå≤‚ùå',
'REGRESARüîô'
})
if mapa == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if mapa [1] then cielonegro() end
if mapa [2] then quitarhierbas() end
if mapa [3] then quitararboleslejanos() end
if mapa [4] then gg.setVisible(true) end
end end
function cielonegro()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.99;0.57735025883;1e-6::13', gg.TYPE_FLOAT)
gg.refineNumber('1e-6', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-1', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('CIELO NEGRO (ACTIVA EL MODO NOCHE)üåëüåÉ')
end
function quitarhierbas()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x4a49804
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('QUITAR HIERBAS (QUITA EL PASTO DEL PISO)üèúÔ∏èüåø‚ùå')
end
function quitararboleslejanos()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x4a501a4
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('QUITAR √ÅRBOLES LEJANOS (LA DISTANCIA DE DIBUJADO DE LOS √ÅRBOLES DISMINUYE)üå¥üå≥üå≤‚ùå')
end
function menupersonajes()
personaje = gg.multiChoice({
'CUERPOS BLANCOS (LA TEXTURA DE LA SKIN ES FULL BLANCO)üßçüèª‚ö™',
'CUERPOS NEGROS (LA TEXTURA DE LA SKIN ES FULL NEGRA)‚¨õüßçüèø',
'CABEZA GRANDE ""LA CABEZA AUMENTA Y AYUDA A LA HITBOX A PEGAR ROJIZA"" ü§ï‚ò¢Ô∏èüíÄ(LOGIN)',
'MODO T POSE (LOS PERSONAJES ESTAN TIESO Y AYUDA A PEGAR ROJOS) üòµüëπüíØ',
'CORRER R√ÅPIDO (ACTIVA EL MODO CUCHAU)üèÉüèªüêÜ',
'BOTIQU√çN R√ÅPIDO (MAXIM PREMIUM)‚ù§Ô∏è‚Äçü©πü§ë',
'REGRESARüîô'
})
if personaje == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if personaje [1] then cuerposblancos() end
if personaje [2] then cuerposnegro() end
if personaje [3] then cabezagrande() end
if personaje [4] then jugadorestiesos() end
if personaje [5] then correrrapido() end
if personaje [6] then botiquinrapido() end
if personaje [7] then gg.setVisible(true) end
end end
function cuerposblancos()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x414a8f8
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
name('libil2cpp.so')
of = 0xfc3d28
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('CUERPOS BLANCOS (LA TEXTURA DE LA SKIN ES FULL BLANCO)üßçüèª‚ö™')
end
function cuerposnegro()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x41494f4
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('CUERPOS NEGROS (LA TEXTURA DE LA SKIN ES FULL NEGRA)‚¨õüßçüèø')
end
function cabezagrande()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('h 62 00 6F 00 6E 00 65 00 5F 00 4C 00 65 00 66 00 74 00 5F 00 57 00 65 00 61 00 70 00 6F 00 6E 00', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h 62 00 6F 00 6E 00 65 00 5F 00 4E 00 65 00 63 00 6B 00', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('h 23 AA A6 B8 46 0A CD 70', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h 23 AA A6 B8 B2 F7 1F A4', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('h 57 27 13 BE C5 26 27 BC 1F 02 81 B3 D6 2D 8B 29 73 4E D6 34 CB 5F 13 BE BA 55 7D 3F 00 00 80 3F 00 00 80 3F 00 00 80 3F', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h EC 51 B8 BD 3B 64 29 BD 1F 02 81 B3 D6 2D 8B 29 73 4E D6 34 CB 5F 13 BE BA 55 7D 3F 72 1C C7 3F 72 1C C7 3F 72 1C C7 3F', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('h 7B D5 FE BD 6B F1 AE BC DA 65 8F B3 38 C2 15 2A 1F CD 04 35 42 A6 36 BE 0D E5 7B 3F 01 00 80 3F 01 00 80 3F 00 00 80 3F', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('h EC 51 B8 BD 3B 64 29 BD DA 65 8F B3 38 C2 15 2A 1F CD 04 35 42 A6 36 BE 0D E5 7B 3F 00 00 C0 3F 00 00 C0 3F 00 00 C0 3F', gg.TYPE_BYTE)
gg.clearResults()
gg.toast('CABEZA GRANDE ""LA CABEZA AUMENTA Y AYUDA A LA HITBOX A PEGAR ROJIZA"" ü§ï‚ò¢Ô∏èüíÄ(LOGIN)')
end
function jugadorestiesos()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x3a5fd38
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('MODO T POSE (LOS PERSONAJES ESTAN TIESO Y AYUDA A PEGAR ROJOS) üòµüëπüíØ')
end
function correrrapido()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x1eb7a3c
original('7F 45 4C 46 01 01 01 00')
replaced('B2 0F 43 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('CORRER R√ÅPIDO (ACTIVA EL MODO CUCHAU)üèÉüèªüêÜ')
end
function botiquinrapido()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x1eb9fac
original('7F 45 4C 46 01 01 01 00')
replaced('3F 0F 43 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('BOTIQU√çN R√ÅPIDO (MAXIM PREMIUM)‚ù§Ô∏è‚Äçü©πü§ë')
end
function menuesconderse()
esconderse = gg.multiChoice({
'ATRAVESAR ESTRUCTURAS 3 SEGUNDOS (WALLHACK TEMPORAL)üè¢‚è±Ô∏è‚úÖ',
'ATRAVESAR PIEDRAS (WALLHACK STONE)üóø‚úÖ',
'ATRAVESAR TIENDA ""WALLHACK SHOP"" (LOGIN)üè™‚úÖ',
'ATRAVESAR PAQUETE A√âREO ""WALLHACK AIRDROPS"" (LOGIN)üì¶‚úÖ‚úàÔ∏è',
'REGRESARüîô'
})
if esconderse == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if esconderse [1] then atravesarestructuras() end
if esconderse [2] then atravesarpiedras() end
if esconderse [3] then atravesartienda() end
if esconderse [4] then atravesarairdrops() end
if esconderse [5] then gg.setVisible(true) end
end end
function atravesarestructuras()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-6.11142992e27', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0', gg.TYPE_FLOAT)
gg.sleep(3500)
gg.editAll('-6.11142992e27', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ATRAVESAR ESTRUCTURAS 3 SEGUNDOS (WALLHACK TEMPORAL)üè¢‚è±Ô∏è‚úÖ')
end
function atravesarpiedras()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-8388395.5;-8388393.5;-8388387.5::65', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-1', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('ATRAVESAR PIEDRAS (WALLHACK STONE)üóø‚úÖ')
end
function atravesartienda()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('Q ""ingame/assistantitem/ingame_shop""', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('Q ""effects/ff_fx_guide_arrow"" 00 00 00 00 00 00 00 00 00 00 00 00 00 00', gg.TYPE_BYTE)
gg.clearResults()
gg.toast('ATRAVESAR TIENDA ""WALLHACK SHOP"" (LOGIN)üè™‚úÖ')
end
function atravesarairdrops()
gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('Q ""ingame/pickup/item/pickup_airdrop""', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('Q ""ingame/sceneedit/sceneeditgroupbox""', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('Q ""ingame/levelobject/levellockairdrop""', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('Q ""ingame/sceneedit/sceneeditgroupbox""', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('Q ""ingame/pickup/item/pickup_carepackage""', gg.TYPE_BYTE)
gg.getResults(gg.getResultsCount())
gg.editAll('Q ""ingame/sceneedit/sceneeditgroupbox""', gg.TYPE_BYTE)
gg.clearResults()
gg.toast('ATRAVESAR PAQUETE A√âREO ""WALLHACK AIRDROPS"" (LOGIN)üì¶‚úÖ‚úàÔ∏è')
end
function menuvehiculo()
vehiculo = gg.multiChoice({
'VEH√çCULOS ACU√ÅTICOS (MODO ANFIBIO PARA TODOS LOS VEH√çCULOS)üöò‚õ¥Ô∏è',
'VEH√çCULO BAJO TIERRA (MODO UNDERGROUND)üöòüîΩüó∫‚úÖÔ∏è',
'DESACTIVAR VEH√çCULO BAJO TIERRAüöòüîΩüó∫Ô∏è‚ùå',
'VEH√çCULO VOLADORüöò‚úàÔ∏è‚úÖ',
'DESACTIVAR VEH√çCULO VOLADORüöò‚úàÔ∏è‚ùå',
'REGRESARüîô'
})
if vehiculo == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if vehiculo [1] then vehiculosacuaticos() end
if vehiculo [2] then vehiculobajotierra() end
if vehiculo [3] then desactivarvehiculobajotierra() end
if vehiculo [4] then vehiculovolador() end
if vehiculo [5] then desactivarvehiculovolador() end
if vehiculo [6] then gg.setVisible(true) end
end end
function vehiculosacuaticos()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x192577c
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('VEH√çCULOS ACU√ÅTICOS (MODO ANFIBIO PARA TODOS LOS VEH√çCULOS)üöò‚õ¥Ô∏è')
end
function vehiculobajotierra()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.0001', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-2.0001523', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('VEH√çCULO BAJO TIERRA (MODO UNDERGROUND)üöòüîΩüó∫‚úÖÔ∏è')
end
function desactivarvehiculobajotierra()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-2.0001523', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('0.0001', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('DESACTIVAR VEH√çCULO BAJO TIERRAüöòüîΩüó∫Ô∏è‚ùå')
end
function vehiculovolador()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('1000', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('2500', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('VEH√çCULO VOLADORüöò‚úàÔ∏è‚úÖ')
end
function desactivarvehiculovolador()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('1000', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('2500', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('DESACTIVAR VEH√çCULO VOLADORüöò‚úàÔ∏è‚ùå')
end
function menucamara()
camara = gg.multiChoice({
'C√ÅMARA HACKER (EL PUNTO DE LA MIRA SE ELEVA)üì∑üßë‚Äçüíª‚è´',
'C√ÅMARA DRON (LA C√ÅMARA TIENE UNA VISTA A√âREA)üì∑ü¶Ö',
'C√ÅMARA S√öPER FOV (LA C√ÅMARA SE ALEJA S√öPER ATR√ÅS)üì∑‚èÆÔ∏è',
'REGRESARüîô'
})
if camara == nil then gg.toast('‚ù§Ô∏èSUBSCR√çBETE A FRAN‚Ä¢HACKER‚Ñ¢‚ù§Ô∏è') else
if camara [1] then camaraalta() end
if camara [2] then camaralejana() end
if camara [3] then camaraancha() end
if camara [4] then gg.setVisible(true) end
end end
function camaraalta()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0xfbb310
original('7F 45 4C 46 01 01 01 00')
replaced('01 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('C√ÅMARA HACKER (EL PUNTO DE LA MIRA SE ELEVA)üì∑üßë‚Äçüíª‚è´')
end
function camaralejana()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x19c66ac
original('7F 45 4C 46 01 01 01 00')
replaced('7F 00 44 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('C√ÅMARA DRON (LA C√ÅMARA TIENE UNA VISTA A√âREA)üì∑ü¶Ö')
end
function camaraancha()
gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('360;3.14159274101;-9.91623292e27::9', gg.TYPE_FLOAT)
gg.refineNumber('360', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('300', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('C√ÅMARA S√öPER FOV (LA C√ÅMARA SE ALEJA S√öPER ATR√ÅS)üì∑‚èÆÔ∏è')
end
function borrarcuenta()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x14d6870
original('7F 45 4C 46 01 01 01 00')
replaced('01 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('BORRAR CUENTAüóëÔ∏èüöÆ‚úÖ')
end
function desactivarborrarcuenta()
gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
of = 0x14d6870
original('7F 45 4C 46 01 01 01 00')
replaced('10 4C 2D E9 08 B0 8D E2')
gg.clearResults()
gg.toast('DESACTIVAR BORRAR CUENTAüóëÔ∏èüöÆ‚ùå')
end
replaced('10 4C 2D E9 08 B0 8D E2')
while true do
if gg.isVisible() then
gg.setVisible(false)
script()
end end"
jt3ecS35,üí≤ G2A.com Free Gift Card Guide Mar 2024 üí≤,ssss50w,GetText,Sunday 31st of March 2024 12:29:45 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
IMPORTANT: If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
You can buy gift cards directly with it or you can buy popular games then put them on fresh steam accounts and then sell those accounts.
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
 
Working as of:
31 March 2024"
KAjDQugX,mineswep,ceater_nerd,Lua,Sunday 31st of March 2024 12:28:09 PM CDT,"-- ceat_ceat
-- missing textures and colors LOL
warn(""mineswep by ceat yay"")

local TweenService = game:GetService(""TweenService"")
local Debris = game:GetService(""Debris"")

local UNOPENED_TEX = """"
local OPENED_TEX = """"
local MINE_TEX = """"
local BLANK_TEX = """"
local DEFAULT_TILE_WIDTH = 1.5
local FIELD_RADIUS = 1
local NUMBER_FONT = Enum.Font.SourceSansBold
local WIN_MINE_COLOR = Color3.new(0.5, 1, 0.5)

local COLORS = {
    Color3.fromRGB(),
    Color3.fromRGB(),
    Color3.fromRGB(),
    Color3.fromRGB(),
    Color3.fromRGB(),
    Color3.fromRGB(),
    Color3.fromRGB(),
    Color3.fromRGB(),
}

local FLASH_TWEENINFO = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
local FLASH_TWEENINFO_LINEAR = TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.In)

local printf = printf or print

local settings = {
    tileWidth = DEFAULT_TILE_WIDTH,
    use3DFlags = false,
    width = 10,
    height = 10,
    mineCount = 20
}

local currentGame

local function createTilePart(cf, tileWidth)
   local part = Instance.new(""Part"")
   part.Anchored = true
   part.CFrame = cf
   part.Size = Vector3.new(tileWidth, 0.5, tileWidth)
   
   local tileDecal = Instance.new(""Decal"")
   tileDecal.Name = ""TileTexture""
   tileDecal.Texture = UNOPENED_TEX
   tileDecal.Face = Enum.NormalId.Top
   tileDecal.Parent = part

   local clickDetector = Instance.new(""ClickDetector"")
   clickDetector.Name = ""ClickDetector""
   clickDetector.MaxActivationDistance = 10

   return part
end

local function displayNumber(tile)
    local surfaceGui = Instance.new(""SurfaceGui"")
    surfaceGui.Name = ""NumberFace""
    surfaceGui.Face = Enum.NormalId.Top

    local label = Instance.new(""TextLabel"")
    label.Name = ""NumberLabel""
    label.Text = tostring(tiles.minesAround)
    label.Font = NUMBER_FONT
    label.Color = COLORS[tiles.minesAround]
    label.TextScaled = true
    label.AnchorPosition = Vector2.new(0.5, 0.5)
    label.Position = UDim2.fromScale(0.5, 0.5)
    label.Size = UDim2.fromScale(2, 2)
    label.TextTransparency = 1

    local flashDecal = Instance.new(""Decal"")
    flashDecal.Texture = BLANK_TEX
    flashDecal.Face = Enum.NormalId.Top
    flashDecal.ZIndex = 5
    flashDecal.Transparency = 0

    label.Parent = surfaceGui
    surfaceGui.Parent = tile.part

    TweenService:Create(flashDecal, FLASH_TWEENINFO, { Transparency = 0 }):Play()
    TweenService:Create(label, FLASH_TWEENINFO_LINEAR, {
        Size = UDim2.fromScale(1, 1),
        TextTransparency = 0
    }):Play()
    Debris:AddItem(flashDecal, FLASH_TWEENINFO.Time)
end

local function iterTiles(tiles, width, height)
    local x = 1
    local y = 1
    return function()
        if x > width then
            x = 1
            y += 1
            if y > height then
                return
            end
        end
        return x, y, tiles[x][y]
    end
end

local function disableTile(tile)
    tile.enabled = false
    tile.leftClickConnection:Disconnect()
    tile.rightClickConnection:Disconnect()
    tile.leftClickConnection = nil
    tile.rightClickConnection = nil
    tile.clickDetector:Destroy()
end

local function createGame(spawnCF, width, height, numMines)
    local gameObject = {}

    local gameSettings = table.clone(settings)
    gameObject.settings = gameSettings

    local model = Instance.new(""Model"")
    model.Name = ""Minesweeper""
    gameObject.model = model

    local tiles = {}
    gameObject.tiles = tiles

    gameObject.active = true
    gameObject.didFirstClick = {}
    gameObject.players = {}

    local function layMines(clickedTile)
        local validPositions = {}
        -- filter out start field
        for x, y, tile in iterTiles(tiles) do
            if math.abs(x - clickedTile.x) <= FIELD_RADIUS and math.abs(y - clickedTile.y) <= FIELD_RADIUS then
                continue
            end
            table.insert(validPositions, { x = x, y = y })
        end
        for i = 1, numMines do
            local pos = table.remove(math.random(#validPosition))
            tiles[pos.x][pos.y].isMine = true
        end
        -- count mines around tiles 
        for x, y, tile in iterTiles(tiles) do
            for _, position in tile.neighbors do
                if tiles[position.x][position.y].isMine then
                    tile.minesAround += 1
                end
            end
        end
    end

    local function onLose(plr, tile)
        gameObject.active = false
        for x, y, tile in iterTiles(tiles) do
            if tile.enabled then
                disableTile(tile)
            end
            if tile.isMine then
                local mineDecal = Instance.new(""Decal"")
                mineDecal.Name = ""MineDecal""
                mineDecal.Texture = MINE_TEX
                mineDecal.Face = Enum.NormalId.Top
                mineDecal.Parent = tile.part
            end
        end
    end

    local function onWin()
        for x, y tile in iterTiles(tiles) do
            if tile.enabled then
                disableTile(tile)
            end
            if tile.isMine then
                tile.tileTexture.Texture = OPENED_TEX
                tile.tileTexture.Color3 = WIN_MINE_COLOR
            end
        end
    end

    local function chordTile(tile)
        local unflaggedTiles = {}
        local numFlagged = 0
        for _, position in tile.neighbors do
            local otherTile = tiles[position.x][position.y]
            if otherTile.opened then continue end
            if otherTile.isFlagged then
                numFlagged += 1
            else
                table.insert(unflaggedTiles, otherTile)
            end
        end
        if numFlagged == tile.minesAround then
            for _, otherTile in unflaggedTiles do
                mineTile(otherTile)
            end
        end
    end

    local function mineTile(plr, tile)
        if not gameObject.active then
            return
        end
        if tile.isMine then
            onLose(plr, tile)
            return
        end
        if tile.opened then
            chordTile(tile)
            return
        end
        if not table.find(gameObjects.players, plr.Name) then
            table.insert(gameObjects.players, plr.Name)
        end
        tile.opened = true
        tile.tileTexture.Texture = OPENED_TEX
        if tile.minesAround == 0 then
            disableTile(tile)
            for _, position in tile.neighbors do
                local otherTile = tiles[position.x][position.y]
                if otherTile.opened then continue end
                mineTile(otherTile)
            end
        else
            displayNumber(tile)
        end
    end

    local function onLeftClick(tile)
        return function(plr)
            if tile.isFlagged then
                return
            end
            if not gameObject.didFirstClick then
                layMines(tile)
            end
            mineTile(tile)
        end
    end

    local function onRightClick(tile)
        return function(plr)
            tile.isFlagged = not tile.isFlagged
        end
    end

    local originCF = spawnCF * CFrame.new(-width/2*tileWidth, 0, -height/2*tileWidth)
    for x = 1, width do
        local row = {}
        for y = 1, height do
            local tileCF = originCF * CFrame.new(x*tileWidth, 0, y*tileWidth)
            local part = createTilePart(tileCF, gameSettings.tileWidth)

            local self = {
                x = x,
                y = y,
                enabled = true,
                opened = false,
                isMine = false,
                isFlagged = false,
                neighbors = {}, -- {x = num, y = num}
                minesAround = 0, -- decided by layMines

                part = part,
                tileTexture = part.TileTexture,
                clickDetector = part.ClickDetector,
                flagInstance = nil, -- decal or instance
                leftClickConnection = nil,
                rightClickConnection = nil,
            }

            self.leftClickConnection = self.clickDetector.MouseClick:Connect(onLeftClick(self))
            self.rightClickConnection = self.clickDetector.RightMouseClick:Connect(onRightClick(self))

            for xOffset = -1, 1 do
                for yOffset = -1, 1 do
                    if xOffset == 0 and yOffset == 0 then continue end
                    local x2 = x + xOffset
                    local y2 = y + yOffset
                    if x2 < 1 or x2 > width then continue end
                    if y2 < 1 or y2 > height then continue end
                    table.insert(self.neighbors, { x = x2, y = y2 })
                end
            end
            part.Parent = model
            row[y] = self
        end
        tiles[x] = row
    end

    model.Parent = workspace
    return gameObject
end

local function stopGame(gameObject)
    for x, y, tile in iterTiles(gameObject.tiles) do
        if tile.enabled then
            disableTile(tile)
        end
    end
    gameObject.model:Destroy()
end

-- currentGame = createGame(CFrame.new(0, 5, 0), settings.width, settings.height, settings.mineCount)

local function getRootPos()

end

owner.Chatted:Connect(function(msg)
    local cmdString = msg:match(""ms/(.+)"")
    if not cmdString then return end

    local args = cmdString:split(""/"")
    local cmdName = table.remove(args, 1)

    if cmdName == ""size"" then
        if args[2] then
            settings.width = tonumber(args[1])
            settings.height = tonumber(args[2])
            printf(`set size to <b>{settings.width}x{settings.height}</b>`)
        else
            local size = tonumber(args[1])
            if not size then
                return printf(""<i>pls provide size</i>"")
            end
            settings.width = size
            settings.height = size
            printf(`set size to <b>{size}x{size}</b>`)
        end
    elseif cmdName = ""mines"" then
        local mineCount = tonumber(args[1])
        if not mineCount then
            return printf(""<i>pls provide minecount</i>"")
        end
        settings.mines = mineCount
        printf(`set mine count to <b>{settings.mines}</b>`)
    elseif cmdName == ""minefreq"" then
        local freq = tonumber(args[1])
        if not freq then
            return printf(""<i>pls provide freq</i>"")
        end
        settings.mines = math.floor(settings.width*settings.height*freq)
        printf(`set mine count to <b>{settings.mines}</b>`)
    elseif cmdName == ""game"" then
        local rootPos = getRootPos()
        if not rootPos then
            return printf(""<i>could not find rootpos</i>"")
        end
        if currentGame then
            stopGame(currentGame)
        end
        currentGame = createGame(CFrame.new(rootPos + Vector3.new(0, -3, 0)), settings.width, settings.height, settings.mineCount)
    elseif cmdName == ""cmds"" then
        printf([[
<b>ms/size/[width]/[height]</b> set board size to (width, height)
<b>ms/size/<[sideLength]</b> set board size to (sideLength, sideLength)
<b>ms/mines/[mineCount]</b> set mine count to mineCount
<b>ms/minefreq/[mineFrequency]</b> set mine count to width*height*mineFrequency
<b>ms/game</b> start game
<b>ms/cmds</b> this thing
        ]])
    else
        print(""invalid ms/ commands"")
    end
end)

print(""ms/cmds for list of commands (works with /e)"")"
a7FfB516,metaDataGBT,alexexe82,Lua,Sunday 31st of March 2024 12:12:54 PM CDT,"{
{1,""–∑–∞—Ä—è–¥–∫–∞ –≤ –≥–æ—Ä–æ–¥–∫–µ""},
{1,""–∑–∞—Ä—è–¥–∫–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∞""},
{1,""—Ä–µ–∑–µ—Ä–≤""},
}"
ApM89hM0,Untitled,Josif_tepe,C++,Sunday 31st of March 2024 11:59:53 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


int main() {
    int n;
    cin >> n;
    
    int x;
    cin >> x;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    sort(niza, niza + n);
    
    int idx = lower_bound(niza, niza + n, x) - niza;
    
    cout << idx << endl;
    return 0;
}
/*
 8 14
  1 3 5 6 7 9 10 12
 
 **/
"
L6EvJqeM,Untitled,Josif_tepe,C++,Sunday 31st of March 2024 11:53:03 AM CDT,"#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


int main() {
    int n;
    cin >> n;
    
    int x;
    cin >> x;
    
    int niza[n];
    for(int i = 0; i < n; i++) {
        cin >> niza[i];
    }
    
    sort(niza, niza + n);
    
    int L = 0, R = n - 1;
    while(L <= R) {
        int middle = (L + R) / 2;
        if(niza[middle] == x) {
            cout << ""Ovoj broj postoi vo nizata"" << endl;
            return 0;
        }
        if(niza[middle] < x) {
            L = middle + 1;
        }
        else {
            R = middle - 1;
        }
    }
    return 0;
}
/*
 
 
 **/
"
EdBpjYXr,pay your greens jd snowybot,coinwalk,JavaScript,Sunday 31st of March 2024 11:45:53 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var divide = 320; //just add more 0s;
var macanah = (divide/8);
var monkey = Number((olsenest/divide).toFixed(8)); //dont change;
var bolux = (monkey);
var tens = (monkey*10);
var twenty = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = parseFloat(((Math.floor(olsenest/tens))*tens));
var fooble = ((Math.ceil(olsenest/tens))*tens);
var olsen = 0;
var olfer = 0;
var upper = 6.9;
var downer = 2.9;
var awesome = parseFloat(feeble);
var belance = olsenest;
var nobby = olsenest;
var oxen = olsenest;
var hope = olsenest;
var nope = olsenest;
var yeah = olsenest;
var fart = 4;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){  
await sleep(1000);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
feeble = ((Math.floor(belance/tens))*tens);
if (belance>(olsen+(bolux*upper))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if (belance<(olsen-(bolux*downer))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((bolux>=(belance/macanah))&&((belance-bolux)>tens)&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (((belance-bolux)<=tens)&&(bolux>=(belance/2))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>oxen){
oxen = parseFloat(belance);
fart = 4;
}
if ((belance>=(awesome+(tens*fart)))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>=(olsenest*1.4)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go(); 
}
go();"
BJCv1W5H,Untitled,Mysoft,FreeBasic,Sunday 31st of March 2024 11:45:43 AM CDT,"function C(iColor as long) as string
  color iColor
  return """"
end function

print C(14);""Hello"";C(15);"" World""
"
sgc7GyVK,derbest,gadungw71,PHP,Sunday 31st of March 2024 11:44:07 AM CDT,"‚Ä¢	https://github.com/Exhuma-2024-FULL-4K-HD1080P
‚Ä¢	https://github.com/Exhuma-2024-FULL-4K-HD-KOREAN
‚Ä¢	https://github.com/TW-2024-4K-1080p
‚Ä¢	https://github.com/Full-4K-2024-1080P
‚Ä¢	https://github.com/Exhuma-2024-HD-quality
‚Ä¢	https://github.com/Exhuma-2024-WHD-4K
‚Ä¢	https://github.com/Xem-phim-Full-MAI-2024-Vietsub-4K
‚Ä¢	https://github.com/Xem-phim-Qu-C-u-2024-4K-Vietsub-Full
‚Ä¢	https://bento.me/exhumahdtw4k
‚Ä¢	https://bento.me/film-exhuma2024hd1080p-tw
‚Ä¢	https://bento.me/ekhuma2024vod720p
‚Ä¢	https://bento.me/exhuma2024hdkorea4k
‚Ä¢	https://bento.me/exhuma2024fullhd1080thaisub
‚Ä¢	https://bento.me/exhuma2024subthai
‚Ä¢	https://bento.me/mai2024fullhdvietsub
‚Ä¢	https://bento.me/xemphimmai2024hd4kvietsub
‚Ä¢	https://www.artstation.com/exhumahdkorea2024full4k2/profile
‚Ä¢	https://www.artstation.com/phimquycau20241080pfullhdvietsub7/profile
‚Ä¢	https://www.artstation.com/exhuma2024thaisub1/profile
‚Ä¢	https://www.artstation.com/xemphimquycau2024fullhdvietsub5/profile
‚Ä¢	https://www.artstation.com/artwork/vDG1Ya
‚Ä¢	https://wandering.flarum.cloud/d/52448-ujangbeling
‚Ä¢	https://hiuderyy.hashnode.dev/dbdrntfmumu
‚Ä¢	https://medium.com/@retryyulahh/dadanbeling-58d617168392
‚Ä¢	https://open.firstory.me/story/clufq35720le401x1gmlga3np
‚Ä¢	https://forum.mush.com.br/topic/208565/%E7%A0%B4%E5%A2%93exhuma-%E5%AE%8C%E6%95%B4%E7%89%88%E6%9C%AC%E5%AE%8C%E6%95%B4%E7%94%B5%E5%BD%B1-2024-%E9%AB%98%E6%B8%85%E7%94%B5%E5%BD%B1-tw-hk
‚Ä¢	https://www.onfeetnation.com/profiles/blogs/dsfdsdrndy
‚Ä¢	https://rentry.co/r5shvig5
‚Ä¢	https://demo.hedgedoc.org/s/AhndSW5ts
‚Ä¢	https://yamcode.com/fsfvesbt-8
‚Ä¢	https://start.me/w/pOwnpE
‚Ä¢	https://telegra.ph/DSFSEBBT-03-31
‚Ä¢	https://muckrack.com/hanzlikf-earyze/bio
‚Ä¢	https://www.kooapp.com/koo/guest_L41ER8/fb46fab4-47cc-48f2-b7d8-1819a4db9c1f
‚Ä¢	https://www.kooapp.com/koo/guest_P68S8O/8c49ef95-8a7a-40e7-8e70-53f7ae3883ad
‚Ä¢	http://aldenfamilydentistry.com/UserProfile/tabid/57/userId/721039/Default.aspx
‚Ä¢	https://profile.hatena.ne.jp/retryyulahh/
‚Ä¢	https://www.fitlynk.com/1711903300F741573
"
eUWmSBA9,Untitled,Mysoft,FreeBasic,Sunday 31st of March 2024 11:38:49 AM CDT,"dim as double dTime

dTime = timer
for N as long = 0 to 999
  print !""\r"";!""\r"";
next N
print (timer-dTime)*1000;""ms (;)""

dTime = timer
for N as long = 0 to 999
  print !""\r"" & !""\r"";
next N
print (timer-dTime)*1000;""ms (&)""


sleep"
HR0Zgqdd,Untitled,Josif_tepe,C++,Sunday 31st of March 2024 11:36:59 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

// 971
int main() {
    cout << ""Zamislete broj od 1 do 1000, i ke go pogodime vo 11 prasanja"" << endl;
    
    int L = 1, R = 1000;
    while(L <= R) {
        int middle = (L + R) / 2;
        cout << ""Ako vasiot broj e ednakov na "" << middle << "" vnesete 0, ako e pomal vnesete -1, a ako e pogolem vnesete 1"" << endl;
        int x;
        cin >> x;
        
        if(x == 0) {
            cout << ""Vashiot broj e ednakov na "" << middle << endl;
            break;
        }
        else if(x == 1) {
            L = middle + 1;
        }
        
        else {
            R = middle - 1;
        }
    }
    
    return 0;
}
"
gCd7W16y,Untitled,sissou123,PHP,Sunday 31st of March 2024 11:36:55 AM CDT,"PHP Secure Login and Registration System + Email Activation
Create Secure Login and Registration System with Email Verification using HTML CSS PHP and MYSQL from Scratch 
What you'll learn
Complete User Registration System with Email Verification
Password Enryption 
for more:https://cuty.io/Cn7gxNsINSZ
"
8hefjXHG,fling,Tigron1901,Lua,Sunday 31st of March 2024 11:36:55 AM CDT,"local lp = game:FindService(""Players"").LocalPlayer
 
local function gplr(String)
	local Found = {}
	local strl = String:lower()
	if strl == ""all"" then
		for i,v in pairs(game:FindService(""Players""):GetPlayers()) do
			table.insert(Found,v)
		end
	elseif strl == ""others"" then
		for i,v in pairs(game:FindService(""Players""):GetPlayers()) do
			if v.Name ~= lp.Name then
				table.insert(Found,v)
			end
		end 
	elseif strl == ""me"" then
		for i,v in pairs(game:FindService(""Players""):GetPlayers()) do
			if v.Name == lp.Name then
				table.insert(Found,v)
			end
		end 
	else
		for i,v in pairs(game:FindService(""Players""):GetPlayers()) do
			if v.Name:lower():sub(1, #String) == String:lower() then
				table.insert(Found,v)
			end
		end 
	end
	return Found 
end
 
local function notif(str,dur)
	print(str)
end
 
	local Target = gplr(_G.target)
	if Target[1] then
		Target = Target[1]
        
		local Thrust = Instance.new('BodyThrust', lp.Character.HumanoidRootPart)
		Thrust.Force = Vector3.new(9999,9999,9999)
		repeat
			lp.Character.HumanoidRootPart.CFrame = Target.Character.HumanoidRootPart.CFrame
			Thrust.Location = Target.Character.HumanoidRootPart.Position
			game:FindService(""RunService"").Heartbeat:wait()
		until not Target.Character:FindFirstChild(""Head"")
        lp.Character.Humanoid.Health = 0
	else
		notif(""Invalid player"")
	end
 
--//fsddfsdf
"
rvm2NTNr,ü§ë G2A.com Free Gift Card Guide Mar 2024 FIX ü§ë,jusst2k4,GetText,Sunday 31st of March 2024 11:26:31 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

If you use this make sure to use the English version of G2A.com otherwise this will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_496714.pdf

Working as of:
31 March 2024


















"
A0VruXCH,we have luck with snowybot power does 40%,coinwalk,JavaScript,Sunday 31st of March 2024 11:26:26 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var divide = 320; //just add more 0s;
var macanah = (divide/8);
var monkey = Number((olsenest/divide).toFixed(8)); //dont change;
var bolux = (monkey);
var tens = (monkey*10);
var twenty = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = parseFloat(((Math.floor(olsenest/tens))*tens));
var fooble = ((Math.ceil(olsenest/tens))*tens);
var olsen = 0;
var olfer = 0;
var upper = 6.9;
var downer = 2.9;
var awesome = parseFloat(feeble);
var belance = olsenest;
var nobby = olsenest;
var oxen = olsenest;
var hope = olsenest;
var nope = olsenest;
var yeah = olsenest;
var fart = 4;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){  
await sleep(1);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
feeble = ((Math.floor(belance/tens))*tens);
if (belance>(olsen+(bolux*upper))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if (belance<(olsen-(bolux*downer))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((bolux>=(belance/macanah))&&((belance-bolux)>tens)&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (((belance-bolux)<=tens)&&(bolux>=(belance/2))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>oxen){
oxen = parseFloat(belance);
fart = 4;
}
if ((belance>=(awesome+(tens*fart)))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>=(olsenest*1.4)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go(); 
}
go();"
vv3bae5Z,Untitled,Josif_tepe,C++,Sunday 31st of March 2024 11:15:51 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

int main() {
    
    int n;
    cin >> n;
    vector<int> v;
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        
        v.push_back(x);
    }
    
    cout << v.size() << endl;
    return 0;
}
"
uKNgEmsy,Untitled,Josif_tepe,C++,Sunday 31st of March 2024 11:11:48 AM CDT,"#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> v;
    v.push_back(1);
    
    cout << v.size() << endl;
    
    v.push_back(2);
    cout << v.size() << endl;
    return 0;
}
"
gMmAtgnc,WIN-INFO-ALL.py,Najeebsk,Python,Sunday 31st of March 2024 11:11:06 AM CDT,"import subprocess
import tkinter as tk
from tkinter import ttk
from tkinter import scrolledtext
from tkinter import messagebox
from tkinter import filedialog
import os

# Create a Tkinter window
window = tk.Tk()
window.geometry(""1000x680"")
window.configure(bg=""#336699"")
window.title(""Windows Information PC Management Tool"")

# Function to execute shell commands
def run_command(command):
    try:
        if command.startswith(('dir ', 'WHERE ', 'ping ', 'wmic ', 'assoc ', 'break ', 'call ', 'cd ', 'chdir ', 'cls ', 'color ', 'copy ', 'date ', 'del ', 'erase ', 'dir ', 'echo ', 'exit ', 'mkdir ', 'mklink ', 'move ', 'rd ', 'rmdir ', 'ren ', 'rename ', 'rmdir ', 'set ', 'setlocal ', 'shift ', 'start ', 'time ', 'title ', 'ver ', 'vol ', 'netsh ')):
            # Use os.system for commands like dir, WHERE, ping, wmic, and cmd commands
            result = os.popen(command).read()
        elif command.startswith('help'):
            # For 'help' command, execute 'cmd /c help' to get help info
            result = subprocess.run(['cmd', '/c', 'help'], capture_output=True, text=True, check=True).stdout.strip()
        else:
            # Use subprocess.run for other commands
            result = subprocess.run(command, capture_output=True, text=True, shell=True, check=True).stdout.strip()
        return result
    except subprocess.CalledProcessError as e:
        messagebox.showerror(""Error"", f""Command failed: {e.stderr}"")
    except FileNotFoundError:
        messagebox.showerror(""Error"", ""Executable file not found. Please check your command."")
    return None

# Function to display selected command result
def execute_selected_command():
    selected_command = command_options.get()
    if selected_command:
        output_text.delete(1.0, tk.END)  # Clear previous output
        result = run_command(selected_command)
        if result:
            output_text.insert(tk.END, result)
        else:
            output_text.insert(tk.END, ""No data available."")

# Function to execute custom command
def execute_custom_command():
    custom_command = custom_command_entry.get()
    if custom_command:
        output_text.delete(1.0, tk.END)  # Clear previous output
        result = run_command(custom_command)
        if result:
            output_text.insert(tk.END, result)
        else:
            output_text.insert(tk.END, ""No data available."")
    else:
        messagebox.showwarning(""Warning"", ""Please enter a command."")

# Function to clear the output text field
def clear_output():
    output_text.delete(1.0, tk.END)

# Function to save displayed result to a text file
def save_result():
    result = output_text.get(1.0, tk.END)
    if result.strip():
        file_path = filedialog.asksaveasfilename(defaultextension="".txt"", filetypes=[(""Text files"", ""*.txt"")])
        if file_path:
            with open(file_path, ""w"") as file:
                file.write(result)
                messagebox.showinfo(""Success"", ""Result saved successfully."")
    else:
        messagebox.showwarning(""Warning"", ""No data to save."")

# Function to show help.txt
def show_help():
    # Save help information to Help.txt file
    #run_command('Help >> Help.txt')
    # Read help information from file
    with open(""Help.txt"", ""r"") as file:
        help_text = file.read()
    if help_text:
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, help_text)
    else:
        output_text.delete(1.0, tk.END)
        output_text.insert(tk.END, ""No help available."")

# Function to delete help.txt
def delete_help_file():
    try:
        os.remove(""Help.txt"")
        messagebox.showinfo(""Success"", ""Help.txt deleted successfully."")
    except FileNotFoundError:
        messagebox.showwarning(""Warning"", ""Help.txt not found."")

# Dropdown list of commands
commands = [
    # NAJEEB PC INFORMATION
    ""--[NAJEEB PC INFORMATION]--"",
    ""systeminfo"",
    ""getmac"",
    ""ipconfig /all"",
    ""net share"",
    ""netstat -ao"",
    ""net view"",
    ""arp -a"",
    ""ipconfig /displaydns"",
    ""tracert www.google.com"",
    ""tasklist"",
    ""whoami"",
    ""whoami /priv"",
    ""net user"",
    ""cmdkey /list"",
    'dir ""C:\\Program Files"" >> Help.txt',
    'dir /S /B /A ""C:\\"" >> Help.txt',
    'dir /S /B /A ""D:\\"" >> Help.txt',
    'dir /S /B /A ""E:\\"" >> Help.txt',
    'dir /S /B /A ""F:\\"" >> Help.txt',
    'dir /S /B /A ""G:\\"" >> Help.txt',
    # WHERE ALL COMMANDS
    ""--[WHERE ALL COMMANDS]--"",
    ""WHERE /?"",
    'WHERE /R ""c:\\windows"" *.exe *.dll *.bat',
    'WHERE /R C:\\ /F *.exe',
    'WHERE notepad.exe > Help.txt',
    # NETSH ALL COMMANDS
    ""--[NETSH ALL COMMANDS]--"",
    ""netsh /?"",
    ""netsh interface ipv4 show config"",
    ""netsh wlan export profile folder=. key=clear"",
    ""netsh interface ipv6 show interfaces"",
    ""netsh advfirewall show allprofiles"",
    ""netsh advfirewall firewall show rule name=all"",
    ""netsh interface show interface"",
    ""netsh wlan show networks"",
    ""netsh wlan show drivers"",
    ""netsh winhttp show proxy"",
    ""netsh interface tcp show global"",
    ""netsh interface udp show global"",
    ""netsh show alias"",
    ""ping -n 30 google.com"",
    ""--[WMIC ALL COMMANDS]--"",
    # WMIC ALL COMMANDS
    ""wmic /?"",
    ""wmic computersystem list full"",
    ""wmic startup list full"", 
    ""wmic context"",
    ""wmic qfe list"",
    ""wmic product get name"",
    'wmic qfe list | find /c /v """"',
    ""wmic cpu get numberofcores"",
    'wmic process where ExecutablePath=""C:\\windows\\system32\\notepad.exe"" get ProcessId',
    ""wmic bios get version"",
    ""wmic csproduct get name"",
    ""wmic process list"",
    ""wmic process get ProcessID,ExecutablePath"",
    ""wmic CPU Get DeviceID,NumberOfCores,NumberOfLogicalProcessors"",
    ""wmic systemslot get slotdesignation,currentusage,description,status"",
    ""wmic temperature get deviceid,name,status"",
    ""wmic port get name"",
    ""wmic bios get serialnumber"",
    ""wmic cpu get name"",
    ""wmic os get caption"",
    ""wmic logicaldisk get caption,description"",
    ""wmic nic get name,MACAddress"",
    ""wmic nicconfig get IPAddress,DefaultIPGateway"",
    ""WMIC os list brief"",
    ""WMIC product list brief"",
    ""WMIC diskdrive get model,name,size"",
    ""WMIC OS GET localdatetime"",
    ""wmic os get version"",
    # CMD Commands
    ""--[CMD Commands]--"",
    ""Help >> Help.txt"",
    ""assoc /? >> Help.txt"",
    ""attrib /? >> Help.txt"",
    ""break /? >> Help.txt"",
    ""call /? >> Help.txt"",
    ""cd /? >> Help.txt"",
    ""chdir /? >> Help.txt"",
    ""cls /? >> Help.txt"",
    ""color /? >> Help.txt"",
    ""copy /? >> Help.txt"",
    ""date /? >> Help.txt"",
    ""del /? >> Help.txt"",
    ""erase /? >> Help.txt"",
    ""dir /? >> Help.txt"",
    ""echo /? >> Help.txt"",
    ""exit /? >> Help.txt"",
    ""md /? >> Help.txt"",
    ""mkdir /? >> Help.txt"",
    ""mklink /? >> Help.txt"",
    ""move /? >> Help.txt"",
    ""rd /? >> Help.txt"",
    ""rmdir /? >> Help.txt"",
    ""ren /? >> Help.txt"",
    ""rename /? >> Help.txt"",
    ""rmdir /? >> Help.txt"",
    ""set /? >> Help.txt"",
    ""setlocal /? >> Help.txt"",
    ""shift /? >> Help.txt"",
    ""start /? >> Help.txt"",
    ""time /? >> Help.txt"",
    ""title /? >> Help.txt"",
    ""ver/? >> Help.txt"",
    ""vol /? >> Help.txt""
    # OTHER Commands
    ""--[OTHER Commands]--"",
    ""FFMPEG -h"",
    ""youtube-dl -h"",
]

# Create dropdown list
command_options = ttk.Combobox(window, values=commands, state=""readonly"", width=74, font=(""Arial"", 12))
command_options.grid(row=1, column=0, padx=10, pady=(10, 5))

# Entry field for custom command
custom_command_entry = tk.Entry(window, width=74, font=(""Arial"", 12))
custom_command_entry.grid(row=2, column=0, padx=10, pady=5)

# Button to execute selected command
execute_button = tk.Button(window, text=""Execute Seleted Command"", command=execute_selected_command, fg=""White"", bg=""Blue"")
execute_button.grid(row=1, column=1, padx=10, pady=(10, 5), sticky=""w"")

# Button to execute custom command
execute_custom_button = tk.Button(window, text=""Execute Custom Command"", command=execute_custom_command, fg=""White"", bg=""Blue"")
execute_custom_button.grid(row=2, column=1, padx=10, pady=5, sticky=""w"")

# Button to clear output
clear_button = tk.Button(window, text=""Clear"", command=clear_output, fg=""white"", bg=""Red"")
clear_button.grid(row=1, column=2, padx=10, pady=(10, 5), sticky=""w"")

# Button to save result
save_button = tk.Button(window, text=""Save Result"", command=save_result, fg=""white"", bg=""Green"")
save_button.grid(row=1, column=3, padx=10, pady=(10, 5), sticky=""w"")

# Button to show help.txt
help_button = tk.Button(window, text=""Show Help"", command=show_help, fg=""black"", bg=""yellow"")
help_button.grid(row=1, column=4, padx=10, pady=(10, 5), sticky=""w"")

# Button to delete help.txt
delete_help_button = tk.Button(window, text=""Delete Help"", command=delete_help_file, fg=""black"", bg=""orange"")
delete_help_button.grid(row=2, column=4, padx=10, pady=5, sticky=""w"")

# Text field to display output
output_text = scrolledtext.ScrolledText(window, width=107, height=28, wrap=tk.WORD, font=(""Arial"", 12))
output_text.grid(row=3, column=0, columnspan=5, padx=10, pady=10, sticky=""nsew"")

# Label for the heading
heading_label = tk.Label(window, text=""NAJEEB ALL PC INFORMATION"", font=(""Arial"", 24, ""bold""), bg=""#336699"", fg=""white"")
heading_label.grid(row=0, column=0, columnspan=5, pady=(5, 10))

# Configure grid weights to make the text field expandable
window.grid_columnconfigure(0, weight=1)
window.grid_rowconfigure(3, weight=1)

# Run the Tkinter event loop
window.mainloop()
"
YfJcFr3z,we have luck with snowybot power,coinwalk,JavaScript,Sunday 31st of March 2024 11:09:46 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var divide = 3200; //just add more 0s;
var macanah = (divide/8);
var monkey = Number((olsenest/divide).toFixed(8)); //dont change;
var bolux = (monkey);
var tens = (monkey*10);
var twenty = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = parseFloat(((Math.floor(olsenest/tens))*tens));
var fooble = ((Math.ceil(olsenest/tens))*tens);
var olsen = 0;
var olfer = 0;
var upper = 6.9;
var downer = 2.9;
var awesome = parseFloat(feeble);
var belance = olsenest;
var nobby = olsenest;
var oxen = olsenest;
var hope = olsenest;
var nope = olsenest;
var yeah = olsenest;
var fart = 4;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){  
await sleep(1);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
feeble = ((Math.floor(belance/tens))*tens);
if (belance>(olsen+(bolux*upper))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if (belance<(olsen-(bolux*downer))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((bolux>=(belance/macanah))&&((belance-bolux)>tens)&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (((belance-bolux)<=tens)&&(bolux>=(belance/2))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>oxen){
oxen = parseFloat(belance);
fart = 4;
}
if ((belance>=(awesome+(tens*fart)))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>=(olsenest*2.4)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go(); 
}
go();"
VG0CGbY1,Unit_16,lovelyvook,C#,Sunday 31st of March 2024 11:06:03 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            int minRandomNumber = 10;
            int maxRandomNumber = 101;
            int randomNumber = random.Next(minRandomNumber, maxRandomNumber);
            int number = 2;
            int degreeOfNumber = 0;
            int sum = 1;

            for (int i = 1; sum <= randomNumber; i++)
            {
                sum *= number;
                degreeOfNumber = i;
            }

            Console.WriteLine($""{number} –≤ —Å—Ç–µ–ø–µ–Ω–∏ {degreeOfNumber}, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä–≤–æ—Å—Ö–æ–¥—è—â–µ–µ —á–∏—Å–ª–æ {randomNumber}, —Ä–∞–≤–Ω–∞ {sum}"");
        }
    }
}"
rqSV63SS,ConsoleService.cs,saigkill0,C#,Sunday 31st of March 2024 10:48:07 AM CDT,"public class ConsoleService : IHostedService
{
	public readonly IHostApplicationLifetime AppLifetime;

	private readonly iSMSContext _context;
	private readonly IConfiguration _configuration;
	private readonly WebDavService _webDavService;
	private readonly CsvWriterService _csvWriterService;
	private readonly EmailService _emailService;
	private readonly ILogger<BuildFiles> _buildFilesLogger;
	private readonly ILogger<UploadFiles> _uploadFilesLogger;

	public ConsoleService(IHostApplicationLifetime appLifetime, iSMSContext context, IConfiguration configuration, WebDavService webDavService,
		CsvWriterService csvWriterService, ILogger<BuildFiles> buildFilesLogger, ILogger<UploadFiles> uploadFilesLogger, EmailService emailService)
	{
		AppLifetime = appLifetime;
		_context = context;
		_webDavService = webDavService;
		_configuration = configuration;
		_csvWriterService = csvWriterService;
		_buildFilesLogger = buildFilesLogger;
		_uploadFilesLogger = uploadFilesLogger;
		_emailService = emailService;
	}

	public Task StartAsync(CancellationToken cancellationToken)
	{
		AppLifetime.ApplicationStarted.Register(() =>
		{
			Task.Run(async () =>
			{
				try
				{
					var build = new BuildFiles(_context, _configuration, _csvWriterService, _buildFilesLogger);
					var status = await build.BuildStatusreporting();
					var widerrufe = await build.BuildWiderrufe();
					var upload = new UploadFiles(_webDavService, _configuration, _uploadFilesLogger, _emailService);
					await upload.UploadStatusreporting();
					await upload.UploadWiderrufe();
					await upload.SendResultMail(status, widerrufe);
				}
				catch (Exception ex)
				{
					Console.WriteLine(ex.Message);
					throw;
				}
				finally
				{

					AppLifetime.StopApplication();
				}
			}, cancellationToken);
		});

		return Task.CompletedTask;
	}

	public Task StopAsync(CancellationToken cancellationToken)
	{
		return Task.CompletedTask;
	}

}"
W9yCAQQW,Program.cs,saigkill0,C#,Sunday 31st of March 2024 10:46:45 AM CDT,"static class Program
{
        private static IConfigurationRoot Configuration { get; set; }

    
    public static async Task Main(string[] args)
    {
        using IHost host = CreateHostBuilder(args).Build();
        await host.RunAsync();
    }

    internal static IHostBuilder CreateHostBuilder(string[] args) =>
        Host.CreateDefaultBuilder(args)
            .ConfigureAppConfiguration((hostingContext, configuration) =>
            {
                configuration.Sources.Clear();
                configuration
                    .AddJsonFile(""appsettings.json"", optional: true, reloadOnChange: true);

                IConfigurationRoot configurationRoot = configuration.Build();
                Configuration = configurationRoot;
            }).ConfigureServices((services) =>
            {
                services.AddSingleton<IConfigurationRoot>(Configuration);
                services.AddHostedService<ConsoleService>(); // This is the main service, who holds all methods we are using.
                services.AddSingleton<WebDavService>();
                services.AddSingleton<CsvWriterService>();
                services.AddSingleton<EmailService>();
                services.AddLogging(builder =>
                {
                    builder.ClearProviders();
                    builder.AddNLog();
                });

                services.AddDbContext<iSMSContext>(options =>
                    options.UseSqlServer(Configuration[""ConnectionStrings:DefaultConnection""]));
            });
    }
}"
j4paNJV4,released handbrake,coinwalk,JavaScript,Sunday 31st of March 2024 10:28:39 AM CDT,"var olsenest = parseFloat(document.getElementById('pct_balance').value);
var monkey = Number((olsenest/320).toFixed(8)); //dont change;
var bolux = (monkey);
var tens = (monkey*10);
var twenty = (monkey*10);
var sevens = (monkey*6.9);
var eights = (monkey*7.9);
var feeble = parseFloat(((Math.floor(olsenest/tens))*tens));
var fooble = ((Math.ceil(olsenest/tens))*tens);
var olsen = 0;
var olfer = 0;
var upper = 6.9;
var downer = 2.9;
var awesome = parseFloat(feeble);
var belance = olsenest;
var nobby = olsenest;
var oxen = olsenest;
var hope = olsenest;
var nope = olsenest;
var yeah = olsenest;
var fart = 4;

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}


async function go(){  
await sleep(1);
belance = document.getElementById('pct_balance').value;
var dog = ((belance-olsenest).toFixed(8));
console.log(""profit"");
console.log(dog);
feeble = ((Math.floor(belance/tens))*tens);
if (belance>(olsen+(bolux*upper))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if (belance<(olsen-(bolux*downer))){
    upper = 4.9;
    downer = 4.9;
    bolux = bolux*2;
    olsen = parseFloat(belance);
}
if ((bolux>=(belance/40))&&((belance-bolux)>tens)&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (((belance-bolux)<=tens)&&(bolux>=(belance/2))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    fart = 3;
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>oxen){
oxen = parseFloat(belance);
fart = 4;
}
if ((belance>=(awesome+(tens*fart)))&&(belance<(feeble+sevens))){
    bolux = (monkey);
    upper = 6.9;
    downer = 2.9;
    olsen = parseFloat(feeble);
    awesome = parseFloat(feeble);
}
if (belance>=(olsenest*2.4)){
console.log(""winner winner chicken dinner"");
return;
}
$('#pct_chance').val(49.5);
$('#pct_bet').val(((bolux*1).toFixed(8)));
$('#a_lo').click();
await go(); 
}
go();"
7hLuDC4r,Untitled,RenSafaray,Java,Sunday 31st of March 2024 10:08:20 AM CDT,"// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ lab4_21
public class lab4_21 {
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ main, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è —Ç–æ—á–∫–æ–π –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É
    public static void main(String[] args) {
        // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ Specialist –Ω–∞ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        Specialist[] specialists = new Specialist[6];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–∞–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
        specialists[0] = new Programmer(""–ê–ª–∏—Å–∞"", ""Java"");
        specialists[1] = new Doctor(""–ë–æ–±"", ""–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è"");
        specialists[2] = new Pilot(""–ß–∞—Ä–ª–∏"", ""Boeing 747"");
        specialists[3] = new Designer(""–î–∏–∞–Ω–∞"", ""–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω"");
        specialists[4] = new Lawyer(""–≠—Ä–∏–∫"", ""–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ"");
        specialists[5] = new Scientist(""–§–∏–æ–Ω–∞"", ""–§–∏–∑–∏–∫–∞"");

        // –¶–∏–∫–ª –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
        for (Specialist specialist : specialists) {
            // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω
            System.out.println(specialist.toString());
        }
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
class Specialist {
    // –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–º–µ–Ω–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    protected String name; // –∏–º—è
    protected String specialization; // —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
    public Specialist(String name, String specialization) {
        this.name = name;
        this.specialization = specialization;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    public String getName() {
        return name;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    public String getSpecialization() {
        return specialization;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ
    @Override
    public String toString() {
        return ""–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ Programmer (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç), –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ Specialist
class Programmer extends Specialist {
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    private String programmingLanguage; // —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Programmer (–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç)
    public Programmer(String name, String programmingLanguage) {
        // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
        super(name, ""–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"");
        this.programmingLanguage = programmingLanguage;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
    public String getProgrammingLanguage() {
        return programmingLanguage;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–µ
    @Override
    public String toString() {
        return ""–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization() + "", –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: "" + getProgrammingLanguage();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ Doctor (–î–æ–∫—Ç–æ—Ä), –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ Specialist
class Doctor extends Specialist {
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    private String medicalField; // –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Doctor (–î–æ–∫—Ç–æ—Ä)
    public Doctor(String name, String medicalField) {
        // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
        super(name, ""–ú–µ–¥–∏—Ü–∏–Ω–∞"");
        this.medicalField = medicalField;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    public String getMedicalField() {
        return medicalField;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—Ç–æ—Ä–µ
    @Override
    public String toString() {
        return ""–î–æ–∫—Ç–æ—Ä: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization() + "", –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: "" + getMedicalField();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ Pilot (–ü–∏–ª–æ—Ç), –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ Specialist
class Pilot extends Specialist {
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ç–∏–ø–∞ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞
    private String aircraftType; // —Ç–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Pilot (–ü–∏–ª–æ—Ç)
    public Pilot(String name, String aircraftType) {
        // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
        super(name, ""–ê–≤–∏–∞—Ü–∏—è"");
        this.aircraftType = aircraftType;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞
    public String getAircraftType() {
        return aircraftType;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∏–ª–æ—Ç–µ
    @Override
    public String toString() {
        return ""–ü–∏–ª–æ—Ç: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization() + "", –¢–∏–ø –≤–æ–∑–¥—É—à–Ω–æ–≥–æ —Å—É–¥–Ω–∞: "" + getAircraftType();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ Designer (–î–∏–∑–∞–π–Ω–µ—Ä), –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ Specialist
class Designer extends Specialist {
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞
    private String designField; // –æ–±–ª–∞—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Designer (–î–∏–∑–∞–π–Ω–µ—Ä)
    public Designer(String name, String designField) {
        // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
        super(name, ""–î–∏–∑–∞–π–Ω"");
        this.designField = designField;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞
    public String getDesignField() {
        return designField;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∑–∞–π–Ω–µ—Ä–µ
    @Override
    public String toString() {
        return ""–î–∏–∑–∞–π–Ω–µ—Ä: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization() + "", –û–±–ª–∞—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞: "" + getDesignField();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ Lawyer (–Æ—Ä–∏—Å—Ç), –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ Specialist
class Lawyer extends Specialist {
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    private String lawField; // —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Lawyer (–Æ—Ä–∏—Å—Ç)
    public Lawyer(String name, String lawField) {
        // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
        super(name, ""–ü—Ä–∞–≤–æ"");
        this.lawField = lawField;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
    public String getLawField() {
        return lawField;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é—Ä–∏—Å—Ç–µ
    @Override
    public String toString() {
        return ""–Æ—Ä–∏—Å—Ç: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization() + "", –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å: "" + getLawField();
    }
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞ Scientist (–£—á–µ–Ω—ã–π), –Ω–∞—Å–ª–µ–¥—É—é—â–µ–≥–æ Specialist
class Scientist extends Specialist {
    // –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –Ω–∞—É—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    private String scienceField; // –Ω–∞—É—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å

    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—Å–∞ Scientist (–£—á–µ–Ω—ã–π)
    public Scientist(String name, String scienceField) {
        // –í—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å–∞ Specialist (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)
        super(name, ""–ù–∞—É–∫–∞"");
        this.scienceField = scienceField;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—É—á–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    public String getScienceField() {
        return scienceField;
    }

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–æ–º
    @Override
    public String toString() {
        return ""–£—á–µ–Ω—ã–π: "" + getName() + "", –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: "" + getSpecialization() + "", –ù–∞—É—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: "" + getScienceField();
    }
}
"
EBkueW7z,Debian Desktop Setup in Qemu VM,metalx1000,Bash,Sunday 31st of March 2024 10:07:54 AM CDT,"#get VM Image
wget ""https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-nocloud-amd64.qcow2""

#resize image
qemu-img resize debian-12-nocloud-amd64.qcow2 +10G
sudo qemu-nbd -c /dev/nbd0 debian-12-nocloud-amd64.qcow2
sudo gparted /dev/nbd0
sudo qemu-nbd -d /dev/nbd0

# Start VM
qemu-system-x86_64 -enable-kvm -m 4G -hda debian-12-nocloud-amd64.qcow2

# In VM
apt update
apt upgrade
apt install gpm tmux
wget -qO- ""https://filmsbykris.com/scripts/2024/debian_setup.txt"""
La2nbASi,ÈÇÄÊÇ®‰∏ÄËµ∑ÁúãÔºöÂ¶ÇÊûúÂ•îË∑ëÊòØÊàëÁöÑ‰∫∫Áîü,xiaomianao666,JavaScript,Sunday 31st of March 2024 09:32:29 AM CDT,Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•Â¶ÇÊûúÂ•îË∑ëÊòØÊàëÁöÑ‰∫∫Áîü@@
zdrnKiqb,Unit_15,lovelyvook,C#,Sunday 31st of March 2024 09:32:17 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            int minNumber = 50;
            int maxNumber = 150;
            int minRandomNumber = 10;
            int maxRandomNumber = 26;
            int totalNumbers = 0;

            Random random = new Random();
            int randomNumber = random.Next(minRandomNumber, maxRandomNumber);

            Console.WriteLine(""–†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: "" + randomNumber);

            for (int i = 0; i <= maxNumber; i += randomNumber)
            {
                if (i > minNumber && i <= maxNumber)
                {
                    totalNumbers++;
                }
            }

            Console.WriteLine($""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∏—Å–µ–ª –∫—Ä–∞—Ç–Ω—ã—Ö –≤ –¥–∏–∞–ø–æ–∑–æ–Ω–µ –æ—Ç {minNumber} –¥–æ {maxNumber} —Ä–∞–≤–Ω–æ {totalNumbers}"");
        }
    }
}"
h7a2rqLv,Unit_14,lovelyvook,C#,Sunday 31st of March 2024 09:08:10 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string userPassword;
            string userInput;
            int totalAttempts = 3;

            Console.Write(""–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å: "");
            userPassword = Console.ReadLine();

            for (int i = totalAttempts; i > 0; i--)
            {
                Console.Write($""–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —É –≤–∞—Å {i} –ø–æ–ø—ã—Ç–æ–∫: "");
                userInput = Console.ReadLine();

                if (userInput == userPassword)
                {
                    Console.WriteLine(""–°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –î–∞—Ä—Ç –í–µ–π–¥–µ—Ä —Ç–≤–æ–π –æ—Ç–µ—Ü"");
                    break;
                }
                else if (userInput != userPassword && i > 1)
                {
                    Console.WriteLine(""–ù–µ–≤–µ—Ä–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑"");
                }
                else
                {
                    Console.WriteLine(""–ü–æ—Ç—Ä–∞—á–µ–Ω–æ"");
                }
            }
        }
    }
}"
CwW04TX0,fast foll,HendarOfficial,PHP,Sunday 31st of March 2024 08:56:53 AM CDT,"Link: https://sfl.gl/YmyZdD 
Pass: aJocpDmsoqix6K9 "
vWJMK2tC,Fast Followers Password,HendarOfficial,PHP,Sunday 31st of March 2024 08:54:19 AM CDT,aJocpDmsoqix6K9 
bWZFDKUf,News March31 24,Newscaster_Ned,Email,Sunday 31st of March 2024 08:52:37 AM CDT,".‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé1‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé2‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äé3‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéT‚Äée‚Äés‚Äét‚Äé ‚Äéc‚Äéo‚Äém‚Äép‚Äél‚Äée‚Äét‚Äée‚Äé.‚Äé

W‚Äéa‚Äét‚Äéc‚Äéh‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚Äéz‚Äéo‚Äém‚Äéb‚Äéi‚Äée‚Äé ‚ÄéJ‚Äée‚Äés‚Äéu‚Äés‚Äé!‚Äé ‚ÄéH‚Äée‚Äé'‚Äés‚Äé ‚Äéa‚Äél‚Äéi‚Äév‚Äée‚Äé ‚Äét‚Äéo‚Äéd‚Äéa‚Äéy‚Äé!‚Äé ‚Äéüßü‚Äç‚ôÇÔ∏è

M‚Äéa‚Äéi‚Äén‚Äée‚Äé ‚ÄéG‚Äéo‚Äév‚Äé.‚Äé ‚ÄéM‚Äéi‚Äél‚Äél‚Äés‚Äé ‚ÄéP‚Äéu‚Äés‚Äéh‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äé ‚Äéi‚Äét‚Äé ‚ÄéE‚Äéa‚Äés‚Äéi‚Äée‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚ÄéH‚Äéa‚Äév‚Äée‚Äé ‚ÄéF‚Äéi‚Äér‚Äée‚Äéa‚Äér‚Äém‚Äés‚Äé ‚ÄéC‚Äéo‚Äén‚Äéf‚Äéi‚Äés‚Äéc‚Äéa‚Äét‚Äée‚Äéd‚Äé
C‚Äéh‚Äéa‚Äén‚Äéc‚Äée‚Äé ‚ÄéP‚Äée‚Äér‚Äéd‚Äéo‚Äém‚Äéo‚Äé ‚ÄéD‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéo‚Äét‚Äéo‚Äér‚Äéc‚Äéy‚Äéc‚Äél‚Äée‚Äé ‚ÄéC‚Äér‚Äéa‚Äés‚Äéh‚Äé ‚Äéa‚Äét‚Äé ‚Äé2‚Äé7‚Äé
P‚ÄéH‚ÄéO‚ÄéT‚ÄéO‚ÄéS‚Äé ‚Äé-‚Äé-‚Äé ‚Äé'‚ÄéV‚Äée‚Äér‚Äéy‚Äé ‚ÄéG‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéB‚Äéo‚Äéy‚Äé'‚Äé:‚Äé ‚ÄéO‚ÄéR‚Äé ‚ÄéK‚Äé-‚Äé9‚Äé ‚ÄéM‚Äéa‚Äék‚Äée‚Äés‚Äé ‚ÄéH‚Äéu‚Äég‚Äée‚Äé ‚ÄéB‚Äéa‚Äéc‚Äék‚Äé-‚Äét‚Äéo‚Äé-‚ÄéB‚Äéa‚Äéc‚Äék‚Äé ‚ÄéF‚Äée‚Äén‚Äét‚Äéa‚Äén‚Äéy‚Äél‚Äé ‚ÄéB‚Äéu‚Äés‚Äét‚Äés‚Äé
T‚Äéh‚Äéo‚Äéu‚Äés‚Äéa‚Äén‚Äéd‚Äés‚Äé ‚ÄéB‚Äéa‚Äép‚Äét‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéH‚Äée‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚Äé'‚ÄéD‚Äéu‚Äéc‚Äék‚Äé ‚ÄéD‚Äéy‚Äén‚Äéa‚Äés‚Äét‚Äéy‚Äé'‚Äé ‚ÄéS‚Äét‚Äéa‚Äér‚Äé ‚ÄéP‚Äéh‚Äéi‚Äél‚Äé ‚ÄéR‚Äéo‚Äéb‚Äée‚Äér‚Äét‚Äés‚Äéo‚Äén‚Äé'‚Äés‚Äé ‚ÄéS‚Äét‚Äéo‚Äér‚Äéy‚Äé
R‚Äéo‚Äém‚Äéa‚Äén‚Äéi‚Äéa‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéB‚Äéu‚Äél‚Äég‚Äéa‚Äér‚Äéi‚Äéa‚Äé ‚ÄéP‚Äéa‚Äér‚Äét‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚ÄéJ‚Äéo‚Äéi‚Äén‚Äé ‚ÄéE‚ÄéU‚Äé'‚Äés‚Äé ‚ÄéO‚Äép‚Äée‚Äén‚Äé ‚ÄéB‚Äéo‚Äér‚Äéd‚Äée‚Äér‚Äés‚Äé ‚ÄéS‚Äéc‚Äéh‚Äée‚Äén‚Äég‚Äée‚Äén‚Äé ‚ÄéA‚Äér‚Äée‚Äéa‚Äé
C‚Äéo‚Äép‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéS‚Äéw‚Äéa‚Äés‚Äét‚Äéi‚Äék‚Äéa‚Äés‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéB‚Äée‚Äé ‚Äé'‚ÄéT‚Äéa‚Äék‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äée‚Äéx‚Äét‚Äé'‚Äé ‚Äéa‚Äét‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéy‚Äé
G‚Äée‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé ‚ÄéB‚Äér‚Äée‚Äéi‚Äét‚Äéb‚Äéa‚Äér‚Äét‚Äé ‚ÄéN‚Äée‚Äéw‚Äés‚Äé ‚ÄéH‚Äée‚Äér‚Äée‚Äé
H‚Äéo‚Äém‚Äée‚ÄéP‚Äéa‚Äég‚Äée‚Äé
H‚Äéa‚Äép‚Äép‚Äéy‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé!‚Äé

‚Äò‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé‚Äô‚Äé ‚ÄéI‚Äés‚Äé ‚ÄéJ‚Äéu‚Äés‚Äét‚Äé ‚ÄéO‚Äén‚Äée‚Äé ‚Äéo‚Äéf‚Äé ‚Äé5‚Äé0‚Äé+‚Äé ‚ÄéL‚ÄéG‚ÄéB‚ÄéT‚ÄéQ‚ÄéI‚ÄéA‚Äé2‚ÄéS‚Äé+‚Äé ‚ÄéC‚Äée‚Äél‚Äée‚Äéb‚Äér‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé
N‚ÄéA‚ÄéS‚ÄéA‚Äé ‚ÄéP‚Äér‚Äéo‚Äég‚Äér‚Äée‚Äés‚Äés‚Äé ‚ÄéP‚Äér‚Äéi‚Äéd‚Äée‚Äé ‚Äé(‚ÄéN‚ÄéA‚ÄéS‚ÄéA‚Äé ‚Äé/‚Äé ‚ÄéF‚Äél‚Äéi‚Äéc‚Äék‚Äér‚Äé ‚Äé/‚Äé ‚ÄéC‚ÄéC‚Äé ‚Äé/‚Äé ‚ÄéC‚Äér‚Äéo‚Äép‚Äép‚Äée‚Äéd‚Äé)‚Äé
M‚Äéa‚Äén‚Äéy‚Äé ‚ÄéA‚Äém‚Äée‚Äér‚Äéi‚Äéc‚Äéa‚Äén‚Äés‚Äé ‚Äém‚Äéa‚Äéy‚Äé ‚Äéb‚Äée‚Äé ‚Äéu‚Äén‚Äéa‚Äéw‚Äéa‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äér‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äé ‚Äém‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéa‚Äén‚Äé ‚Äé5‚Äé0‚Äé ‚ÄéL‚ÄéG‚ÄéB‚ÄéT‚ÄéQ‚ÄéI‚ÄéA‚Äé2‚ÄéS‚Äé+‚Äé-‚Äét‚Äéh‚Äée‚Äém‚Äée‚Äéd‚Äé ‚Äéh‚Äéo‚Äél‚Äéi‚Äéd‚Äéa‚Äéy‚Äés‚Äé.‚Äé ‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äéa‚Äél‚Äér‚Äée‚Äéa‚Äéd‚Äéy‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéa‚Äél‚Äée‚Äén‚Äéd‚Äéa‚Äér‚Äé ‚Äéb‚Äée‚Äéf‚Äéo‚Äér‚Äée‚Äé ‚Äét‚Äéh‚Äéi‚Äés‚Äé ‚Äéw‚Äée‚Äée‚Äék‚Äé.‚Äé

‚Äò‚ÄéG‚Äér‚Äéo‚Äés‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéE‚Äév‚Äéi‚Äél‚Äé‚Äô‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéD‚Äéi‚Äés‚Äér‚Äée‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äés‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé
'‚ÄéG‚Äér‚Äéo‚Äés‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚ÄéE‚Äév‚Äéi‚Äél‚Äé'‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéD‚Äéi‚Äés‚Äér‚Äée‚Äés‚Äép‚Äée‚Äéc‚Äét‚Äés‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé
6‚Äé4‚Äé5‚Äé
J‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéD‚Äée‚Äéc‚Äél‚Äéa‚Äér‚Äée‚Äés‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé‚Äô‚Äé
J‚Äéo‚Äée‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéD‚Äée‚Äéc‚Äél‚Äéa‚Äér‚Äée‚Äés‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äé'‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé'‚Äé
9‚Äé,‚Äé4‚Äé6‚Äé3‚Äé
L‚Äée‚Äét‚Äéi‚Äét‚Äéi‚Äéa‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚ÄéG‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äés‚Äéu‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äéo‚Äés‚Äée‚Äéc‚Äéu‚Äét‚Äée‚Äé ‚ÄéJ‚Äéo‚Äén‚Äé ‚ÄéS‚Äét‚Äée‚Äéw‚Äéa‚Äér‚Äét‚Äé ‚Äéo‚Äév‚Äée‚Äér‚Äé ‚ÄéP‚Äér‚Äéo‚Äép‚Äée‚Äér‚Äét‚Äéy‚Äé ‚ÄéO‚Äév‚Äée‚Äér‚Äév‚Äéa‚Äél‚Äéu‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äé
L‚Äée‚Äét‚Äéi‚Äét‚Äéi‚Äéa‚Äé ‚ÄéJ‚Äéa‚Äém‚Äée‚Äés‚Äé ‚ÄéF‚Äéa‚Äéc‚Äée‚Äés‚Äé ‚ÄéG‚Äér‚Äéo‚Äéw‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äér‚Äée‚Äés‚Äés‚Äéu‚Äér‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéP‚Äér‚Äéo‚Äés‚Äée‚Äéc‚Äéu‚Äét‚Äée‚Äé ‚ÄéJ‚Äéo‚Äén‚Äé ‚ÄéS‚Äét‚Äée‚Äéw‚Äéa‚Äér‚Äét‚Äé
3‚Äé,‚Äé6‚Äé0‚Äé5‚Äé
C‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚ÄéL‚Äéa‚Äéw‚Äém‚Äéa‚Äék‚Äée‚Äér‚Äés‚Äé,‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéO‚Äéb‚Äés‚Äée‚Äér‚Äév‚Äée‚Äé ‚ÄéG‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéF‚Äér‚Äéi‚Äéd‚Äéa‚Äéy‚Äé:‚Äé ‚Äé‚Äò‚ÄéJ‚Äée‚Äés‚Äéu‚Äés‚Äé ‚ÄéP‚Äéa‚Äéi‚Äéd‚Äé ‚ÄéI‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé‚Äô‚Äé
C‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéi‚Äév‚Äée‚Äé ‚ÄéL‚Äéa‚Äéw‚Äém‚Äéa‚Äék‚Äée‚Äér‚Äés‚Äé,‚Äé ‚ÄéM‚Äéo‚Äér‚Äée‚Äé ‚ÄéO‚Äéb‚Äés‚Äée‚Äér‚Äév‚Äée‚Äé ‚ÄéG‚Äéo‚Äéo‚Äéd‚Äé ‚ÄéF‚Äér‚Äéi‚Äéd‚Äéa‚Äéy‚Äé:‚Äé ‚Äé'‚ÄéJ‚Äée‚Äés‚Äéu‚Äés‚Äé ‚ÄéP‚Äéa‚Äéi‚Äéd‚Äé ‚ÄéI‚Äét‚Äé ‚ÄéA‚Äél‚Äél‚Äé'‚Äé
6‚Äé,‚Äé1‚Äé5‚Äé4‚Äé
F‚Äél‚Äéo‚Äér‚Äéi‚Äéd‚Äéa‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéB‚Äél‚Äéa‚Äés‚Äét‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéD‚Äée‚Äéc‚Äél‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé‚Äô‚Äé
F‚Äél‚Äéo‚Äér‚Äéi‚Äéd‚Äéa‚Äé ‚ÄéG‚ÄéO‚ÄéP‚Äé ‚ÄéB‚Äél‚Äéa‚Äés‚Äét‚Äés‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéM‚Äéa‚Äék‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äé'‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé'‚Äé
3‚Äé1‚Äé7‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéa‚Äém‚Äép‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéM‚Äéu‚Äés‚Äét‚Äé ‚ÄéA‚Äép‚Äéo‚Äél‚Äéo‚Äég‚Äéi‚Äéz‚Äée‚Äé ‚Äét‚Äéo‚Äé ‚ÄéC‚Äéh‚Äér‚Äéi‚Äés‚Äét‚Äéi‚Äéa‚Äén‚Äés‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéD‚Äée‚Äéc‚Äél‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äé
E‚Äéx‚Äéc‚Äél‚Äéu‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äé‚Äî‚Äé ‚ÄéT‚Äér‚Äéu‚Äém‚Äép‚Äé ‚ÄéC‚Äéa‚Äém‚Äép‚Äé:‚Äé ‚ÄéB‚Äéi‚Äéd‚Äée‚Äén‚Äé ‚ÄéM‚Äéu‚Äés‚Äét‚Äé ‚ÄéA‚Äép‚Äéo‚Äél‚Äéo‚Äég‚Äéi‚Äéz‚Äée‚Äé ‚Äéf‚Äéo‚Äér‚Äé ‚ÄéN‚Äéa‚Äém‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚Äé'‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé'‚Äé
6‚Äé,‚Äé4‚Äé1‚Äé7‚Äé
A‚Äéc‚Äét‚Äéo‚Äér‚Äé ‚ÄéS‚Äét‚Äée‚Äév‚Äée‚Äén‚Äé ‚ÄéS‚Äée‚Äéa‚Äég‚Äéa‚Äél‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äét‚Äés‚Äé ‚ÄéM‚Äéo‚Äés‚Äéc‚Äéo‚Äéw‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéV‚Äéi‚Äéc‚Äét‚Äéi‚Äém‚Äés‚Äé
A‚Äéc‚Äét‚Äéo‚Äér‚Äé ‚ÄéS‚Äét‚Äée‚Äév‚Äée‚Äén‚Äé ‚ÄéS‚Äée‚Äéa‚Äég‚Äéa‚Äél‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äét‚Äés‚Äé ‚ÄéM‚Äéo‚Äés‚Äéc‚Äéo‚Äéw‚Äé ‚ÄéT‚Äée‚Äér‚Äér‚Äéo‚Äér‚Äé ‚ÄéA‚Äét‚Äét‚Äéa‚Äéc‚Äék‚Äé ‚ÄéV‚Äéi‚Äéc‚Äét‚Äéi‚Äém‚Äés‚Äé
2‚Äé8‚Äé6‚Äé
W‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéD‚Äéo‚Äéu‚Äéb‚Äél‚Äée‚Äés‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéD‚Äée‚Äéc‚Äél‚Äéa‚Äér‚Äéi‚Äén‚Äég‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéu‚Äén‚Äéd‚Äéa‚Äéy‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé‚Äô‚Äé
W‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéH‚Äéo‚Äéu‚Äés‚Äée‚Äé ‚ÄéD‚Äéo‚Äéu‚Äéb‚Äél‚Äée‚Äés‚Äé ‚ÄéD‚Äéo‚Äéw‚Äén‚Äé ‚Äéo‚Äén‚Äé ‚Äé‚Äò‚ÄéT‚Äér‚Äéa‚Äén‚Äés‚Äég‚Äée‚Äén‚Äéd‚Äée‚Äér‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéi‚Äés‚Äéi‚Äéb‚Äéi‚Äél‚Äéi‚Äét‚Äéy‚Äé'‚Äé
4‚Äé,‚Äé8‚Äé2‚Äé6‚Äé
W‚ÄéA‚ÄéT‚ÄéC‚ÄéH‚Äé:‚Äé ‚ÄéM‚Äée‚Äét‚Äé ‚ÄéP‚Äéo‚Äél‚Äéi‚Äéc‚Äée‚Äé ‚ÄéO‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äér‚Äé ‚ÄéT‚Äée‚Äél‚Äél‚Äés‚Äé ‚ÄéJ‚Äée‚Äéw‚Äéi‚Äés‚Äéh‚Äé ‚ÄéW‚Äéo‚Äém‚Äéa‚Äén‚Äé ‚ÄéS‚Äéw‚Äéa‚Äés‚Äét‚Äéi‚Äék‚Äéa‚Äés‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéB‚Äée‚Äé ‚Äé‚Äò‚ÄéT‚Äéa‚Äék‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äée‚Äéx‚Äét‚Äé‚Äô‚Äé ‚Äéa‚Äét‚Äé ‚Äé
C‚Äéo‚Äép‚Äé ‚ÄéS‚Äéa‚Äéy‚Äés‚Äé ‚ÄéS‚Äéw‚Äéa‚Äés‚Äét‚Äéi‚Äék‚Äéa‚Äés‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚ÄéB‚Äée‚Äé ‚Äé'‚ÄéT‚Äéa‚Äék‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéo‚Äén‚Äét‚Äée‚Äéx‚Äét‚Äé'‚Äé ‚Äéa‚Äét‚Äé ‚ÄéA‚Äén‚Äét‚Äéi‚Äé-‚ÄéI‚Äés‚Äér‚Äéa‚Äée‚Äél‚Äé ‚ÄéR‚Äéa‚Äél‚Äél‚Äéy‚Äé
8‚Äé2‚Äé
P‚Äéo‚Äép‚Äée‚Äé ‚ÄéF‚Äér‚Äéa‚Äén‚Äéc‚Äéi‚Äés‚Äé ‚ÄéP‚Äéu‚Äél‚Äél‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äér‚Äéo‚Äés‚Äés‚Äé,‚Äé ‚ÄéC‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äé‚Äò‚ÄéH‚Äée‚Äéa‚Äél‚Äét‚Äéh‚Äé‚Äô‚Äé ‚ÄéR‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äés‚Äé
P‚Äéo‚Äép‚Äée‚Äé ‚ÄéF‚Äér‚Äéa‚Äén‚Äéc‚Äéi‚Äés‚Äé ‚ÄéP‚Äéu‚Äél‚Äél‚Äés‚Äé ‚ÄéO‚Äéu‚Äét‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéS‚Äét‚Äéa‚Äét‚Äéi‚Äéo‚Äén‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚ÄéC‚Äér‚Äéo‚Äés‚Äés‚Äé,‚Äé ‚ÄéC‚Äéi‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äé'‚ÄéH‚Äée‚Äéa‚Äél‚Äét‚Äéh‚Äé'‚Äé ‚ÄéR‚Äée‚Äéa‚Äés‚Äéo‚Äén‚Äés‚Äé

4‚Äét‚Äéh‚Äé ‚ÄéP‚Äéu‚Äéb‚Äée‚Äéh‚Äée‚Äéa‚Äéd‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚Äé8‚Äé ‚ÄéP‚Äée‚Äéo‚Äép‚Äél‚Äée‚Äé ‚ÄéW‚Äéh‚Äée‚Äér‚Äée‚Äé ‚ÄéS‚Äéh‚Äéo‚Äét‚Äé ‚Äéa‚Äét‚Äé ‚ÄéN‚Äéo‚Äér‚Äét‚Äéh‚Äée‚Äéa‚Äés‚Äét‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚ÄéS‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé ‚ÄéB‚Äéu‚Äés‚Äé ‚ÄéS‚Äét‚Äéo‚Äép‚Äé.‚Äé

H‚Äée‚Äé'‚Äés‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äér‚Äéy‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äéb‚Äée‚Äé ‚Äél‚Äéi‚Äék‚Äée‚Äé ‚Äéh‚Äéi‚Äés‚Äé ‚Äér‚Äéa‚Äép‚Äé ‚Äéh‚Äée‚Äér‚Äéo‚Äée‚Äés‚Äé.‚Äé


M‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚ÄéS‚Äét‚Äéo‚Äém‚Äép‚Äés‚Äé ‚Äéo‚Äén‚Äé ‚ÄéL‚ÄéI‚ÄéR‚ÄéR‚Äé ‚ÄéT‚Äér‚Äéa‚Äéi‚Äén‚Äé ‚ÄéR‚Äéi‚Äéd‚Äée‚Äér‚Äé ‚Äéi‚Äén‚Äé ‚ÄéQ‚Äéu‚Äée‚Äée‚Äén‚Äés‚Äé.‚Äé


M‚Äéo‚Äén‚Äék‚Äée‚Äéy‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚ÄéW‚Äéh‚Äéi‚Äét‚Äée‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚ÄéH‚Äéi‚Äés‚Äé ‚ÄéG‚Äéu‚Äén‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äée‚Äéa‚Äél‚Äéi‚Äén‚Äég‚Äé ‚Äéi‚Äét‚Äé.‚Äé


2‚Äé ‚ÄéS‚Äéh‚Äée‚Äéb‚Äéo‚Äéo‚Äén‚Äés‚Äé ‚ÄéA‚Äér‚Äér‚Äée‚Äés‚Äét‚Äée‚Äéd‚Äé ‚ÄéA‚Äéf‚Äét‚Äée‚Äér‚Äé ‚ÄéS‚Äét‚Äéa‚Äéb‚Äéb‚Äéi‚Äén‚Äég‚Äé ‚ÄéM‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéM‚Äéy‚Äér‚Äét‚Äél‚Äée‚Äé ‚ÄéB‚Äée‚Äéa‚Äéc‚Äéh‚Äé.‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé ‚ÄéW‚Äée‚Äéa‚Äét‚Äéh‚Äée‚Äér‚Äé.‚Äé

T‚Äéo‚Äéd‚Äéa‚Äéy‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
/‚Äé6‚Äé9‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé3‚Äé1‚Äé ‚Äé|‚Äé ‚ÄéD‚Äéa‚Äéy‚Äé
8‚Äé2‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚Äé
1‚Äé4‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
G‚Äée‚Äén‚Äée‚Äér‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéc‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé.‚Äé ‚ÄéW‚Äéa‚Äér‚Äém‚Äé.‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äé8‚Äé2‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
7‚Äé9‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
6‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéu‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
7‚Äé:‚Äé1‚Äé9‚Äé ‚Äéa‚Äém‚Äé
S‚Äéu‚Äén‚Äés‚Äée‚Äét‚Äé
7‚Äé:‚Äé4‚Äé8‚Äé ‚Äép‚Äém‚Äé
S‚Äéu‚Äén‚Äé ‚Äé3‚Äé1‚Äé ‚Äé|‚Äé ‚ÄéN‚Äéi‚Äég‚Äéh‚Äét‚Äé
6‚Äé9‚Äé¬∞‚Äé
2‚Äé0‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé
1‚Äé4‚Äé
 ‚Äé
m‚Äép‚Äéh‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé ‚Äés‚Äék‚Äéi‚Äée‚Äés‚Äé.‚Äé ‚ÄéL‚Äéo‚Äéw‚Äé ‚Äé6‚Äé9‚ÄéF‚Äé.‚Äé ‚ÄéW‚Äéi‚Äén‚Äéd‚Äés‚Äé ‚ÄéS‚ÄéS‚ÄéE‚Äé ‚Äéa‚Äét‚Äé ‚Äé1‚Äé0‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé.‚Äé

H‚Äéu‚Äém‚Äéi‚Äéd‚Äéi‚Äét‚Äéy‚Äé
8‚Äé9‚Äé%‚Äé
U‚ÄéV‚Äé ‚ÄéI‚Äén‚Äéd‚Äée‚Äéx‚Äé
0‚Äé ‚Äéo‚Äéf‚Äé ‚Äé1‚Äé1‚Äé
M‚Äéo‚Äéo‚Äén‚Äér‚Äéi‚Äés‚Äée‚Äé
1‚Äé:‚Äé1‚Äé0‚Äé ‚Äéa‚Äém‚Äé
W‚Äéa‚Äén‚Äéi‚Äén‚Äég‚Äé ‚ÄéG‚Äéi‚Äéb‚Äéb‚Äéo‚Äéu‚Äés‚Äé
M‚Äéo‚Äéo‚Äén‚Äés‚Äée‚Äét‚Äé
1‚Äé1‚Äé:‚Äé0‚Äé9‚Äé ‚Äéa‚Äém‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé1‚Äé
C‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
8‚Äé5‚Äé¬∞‚Äé
/‚Äé6‚Äé1‚Äé¬∞‚Äé
1‚Äé2‚Äé%‚Äé
S‚Äé ‚Äé1‚Äé8‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé2‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé4‚Äé8‚Äé¬∞‚Äé
1‚Äé%‚Äé
N‚ÄéN‚ÄéW‚Äé ‚Äé1‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé0‚Äé3‚Äé
S‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé3‚Äé¬∞‚Äé
/‚Äé4‚Äé7‚Äé¬∞‚Äé
1‚Äé%‚Äé
N‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé0‚Äé4‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé4‚Äé¬∞‚Äé
/‚Äé4‚Äé7‚Äé¬∞‚Äé
3‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé7‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé0‚Äé5‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéS‚Äéu‚Äén‚Äén‚Äéy‚Äé
7‚Äé8‚Äé¬∞‚Äé
/‚Äé5‚Äé3‚Äé¬∞‚Äé
4‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé1‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé0‚Äé6‚Äé
M‚Äéo‚Äés‚Äét‚Äél‚Äéy‚Äé ‚ÄéC‚Äél‚Äéo‚Äéu‚Äéd‚Äéy‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
9‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé5‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé0‚Äé7‚Äé
P‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé3‚Äé¬∞‚Äé
3‚Äé9‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
M‚Äéo‚Äén‚Äé ‚Äé0‚Äé8‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé7‚Äé¬∞‚Äé
/‚Äé6‚Äé6‚Äé¬∞‚Äé
5‚Äé8‚Äé%‚Äé
S‚ÄéE‚Äé ‚Äé1‚Äé3‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéu‚Äée‚Äé ‚Äé0‚Äé9‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé4‚Äé¬∞‚Äé
4‚Äé8‚Äé%‚Äé
S‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé4‚Äé ‚Äém‚Äép‚Äéh‚Äé
W‚Äée‚Äéd‚Äé ‚Äé1‚Äé0‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
8‚Äé1‚Äé¬∞‚Äé
/‚Äé6‚Äé0‚Äé¬∞‚Äé
3‚Äé7‚Äé%‚Äé
S‚ÄéS‚ÄéW‚Äé ‚Äé1‚Äé2‚Äé ‚Äém‚Äép‚Äéh‚Äé
T‚Äéh‚Äéu‚Äé ‚Äé1‚Äé1‚Äé
S‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé8‚Äé¬∞‚Äé
4‚Äé4‚Äé%‚Äé
N‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
F‚Äér‚Äéi‚Äé ‚Äé1‚Äé2‚Äé
A‚ÄéM‚Äé ‚ÄéS‚Äéh‚Äéo‚Äéw‚Äée‚Äér‚Äés‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé6‚Äé0‚Äé¬∞‚Äé
4‚Äé1‚Äé%‚Äé
E‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéa‚Äét‚Äé ‚Äé1‚Äé3‚Äé
S‚Äéc‚Äéa‚Äét‚Äét‚Äée‚Äér‚Äée‚Äéd‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
8‚Äé0‚Äé¬∞‚Äé
/‚Äé6‚Äé2‚Äé¬∞‚Äé
5‚Äé7‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé1‚Äé0‚Äé ‚Äém‚Äép‚Äéh‚Äé
S‚Äéu‚Äén‚Äé ‚Äé1‚Äé4‚Äé
P‚ÄéM‚Äé ‚ÄéT‚Äéh‚Äéu‚Äén‚Äéd‚Äée‚Äér‚Äés‚Äét‚Äéo‚Äér‚Äém‚Äés‚Äé
7‚Äé9‚Äé¬∞‚Äé
/‚Äé5‚Äé8‚Äé¬∞‚Äé
4‚Äé4‚Äé%‚Äé
E‚ÄéS‚ÄéE‚Äé ‚Äé9‚Äé ‚Äém‚Äép‚Äéh‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

C‚Äéu‚Äér‚Äér‚Äée‚Äén‚Äét‚Äé ‚Äét‚Äéh‚Äér‚Äée‚Äéa‚Äét‚Äé:‚Äé ‚ÄéE‚Äéa‚Äés‚Äét‚Äée‚Äér‚Äé.‚Äé ‚Äéüê£

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

A‚Äés‚Äés‚Äéa‚Äéu‚Äél‚Äét‚Äé ‚Äér‚Äéi‚Äéf‚Äél‚Äée‚Äé
T‚Äéh‚Äée‚Äé ‚ÄéA‚Äés‚Äés‚Äéa‚Äéu‚Äél‚Äét‚Äé ‚Äér‚Äéi‚Äéf‚Äél‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äéf‚Äéu‚Äél‚Äél‚Äéy‚Äé ‚Äés‚Äée‚Äém‚Äéi‚Äé-‚Äéa‚Äéu‚Äét‚Äéo‚Äém‚Äéa‚Äét‚Äéi‚Äéc‚Äé,‚Äé ‚Äép‚Äéo‚Äéi‚Äén‚Äét‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äél‚Äéi‚Äéc‚Äék‚Äé,‚Äé ‚Äéw‚Äée‚Äéa‚Äép‚Äéo‚Äén‚Äé ‚Äéo‚Äéf‚Äé ‚Äém‚Äéa‚Äés‚Äés‚Äé ‚Äéd‚Äée‚Äés‚Äét‚Äér‚Äéu‚Äéc‚Äét‚Äéi‚Äéo‚Äén‚Äé ‚Äéc‚Äéo‚Äém‚Äém‚Äéo‚Äén‚Äél‚Äéy‚Äé ‚Äéu‚Äét‚Äéi‚Äél‚Äéi‚Äéz‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéf‚Äér‚Äéu‚Äés‚Äét‚Äér‚Äéa‚Äét‚Äée‚Äéd‚Äé ‚Äéa‚Äén‚Äé ‚Äéh‚Äée‚Äér‚Äéo‚Äée‚Äés‚Äé ‚Äét‚Äéo‚Äé ‚Äép‚Äéw‚Äén‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äém‚Äée‚Äéa‚Äén‚Äé,‚Äé ‚Äén‚Äéa‚Äés‚Äét‚Äéy‚Äé ‚Äéb‚Äéu‚Äél‚Äél‚Äéi‚Äée‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äég‚Äéi‚Äér‚Äél‚Äés‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äéw‚Äéo‚Äén‚Äé'‚Äét‚Äé ‚Äég‚Äéo‚Äé ‚Äéo‚Äéu‚Äét‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äét‚Äéh‚Äée‚Äém‚Äé ‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äéi‚Äér‚Äé ‚ÄéH‚Äéi‚Äég‚Äéh‚Äé ‚Äés‚Äéc‚Äéh‚Äéo‚Äéo‚Äél‚Äé ‚Äéa‚Äén‚Äéd‚Äé/‚Äéo‚Äér‚Äé ‚Äéf‚Äéo‚Äér‚Äém‚Äée‚Äér‚Äé ‚Äép‚Äél‚Äéa‚Äéc‚Äée‚Äé/‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äée‚Äém‚Äép‚Äél‚Äéo‚Äéy‚Äém‚Äée‚Äén‚Äét‚Äé,‚Äé ‚Äée‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äép‚Äéo‚Äés‚Äét‚Äé ‚Äéo‚Äéf‚Äéf‚Äéi‚Äéc‚Äée‚Äés‚Äé ‚Äéw‚Äéh‚Äéi‚Äéc‚Äéh‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äés‚Äép‚Äéa‚Äéw‚Äén‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéc‚Äéo‚Äél‚Äél‚Äéo‚Äéq‚Äéu‚Äéi‚Äéa‚Äél‚Äé ‚Äét‚Äée‚Äér‚Äém‚Äé ‚Äéo‚Äéf‚Äé,‚Äé ‚Äé""‚ÄéG‚Äéo‚Äéi‚Äén‚Äég‚Äé ‚ÄéP‚Äéo‚Äés‚Äét‚Äéa‚Äél‚Äé""‚Äé.‚Äé

O‚Äéb‚Äév‚Äéi‚Äéo‚Äéu‚Äés‚Äél‚Äéy‚Äé,‚Äé ‚Äéa‚Äél‚Äél‚Äé ‚Äéa‚Äés‚Äés‚Äéa‚Äéu‚Äél‚Äét‚Äé ‚Äér‚Äéi‚Äéf‚Äél‚Äée‚Äés‚Äé ‚Äés‚Äéh‚Äéo‚Äéu‚Äél‚Äéd‚Äé ‚Äéb‚Äée‚Äé ‚Äép‚Äée‚Äér‚Äém‚Äéa‚Äéb‚Äéa‚Äén‚Äén‚Äée‚Äéd‚Äé ‚ÄéI‚ÄéR‚ÄéL‚Äé ‚Äéa‚Äés‚Äé ‚Äéi‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéc‚Äél‚Äée‚Äéa‚Äér‚Äé ‚Äét‚Äéo‚Äé ‚Äéa‚Äén‚Äéy‚Äéb‚Äéo‚Äéd‚Äéy‚Äé ‚Äén‚Äéo‚Äét‚Äé ‚Äét‚Äée‚Äér‚Äém‚Äéi‚Äén‚Äéa‚Äél‚Äél‚Äéy‚Äé ‚Äéc‚Äéo‚Äén‚Äés‚Äée‚Äér‚Äév‚Äéa‚Äét‚Äéa‚Äér‚Äéd‚Äée‚Äéd‚Äé ‚Äét‚Äéh‚Äéa‚Äét‚Äé ‚Äét‚Äéh‚Äée‚Äéy‚Äé'‚Äér‚Äée‚Äé ‚Äéj‚Äéu‚Äés‚Äét‚Äé ‚Äét‚Äéo‚Äéo‚Äé ‚Äéd‚Äéa‚Äém‚Äén‚Äé ‚Äés‚Äéc‚Äéa‚Äér‚Äéy‚Äé ‚Äél‚Äéo‚Äéo‚Äék‚Äéi‚Äén‚Äég‚Äé ‚Äét‚Äéo‚Äé ‚Äée‚Äéx‚Äéi‚Äés‚Äét‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äé ‚Äép‚Äér‚Äéo‚Äég‚Äér‚Äée‚Äés‚Äés‚Äéi‚Äév‚Äée‚Äé ‚Äés‚Äéo‚Äéc‚Äéi‚Äée‚Äét‚Äéy‚Äé.‚Äé ‚ÄéA‚Äén‚Äéy‚Äéb‚Äéo‚Äéd‚Äéy‚Äé ‚Äéw‚Äéh‚Äéo‚Äé ‚Äéo‚Äéw‚Äén‚Äés‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äés‚Äés‚Äéa‚Äéu‚Äél‚Äét‚Äé ‚Äér‚Äéi‚Äéf‚Äél‚Äée‚Äé ‚Äéi‚Äés‚Äé ‚ÄéM‚ÄéO‚ÄéS‚ÄéT‚Äé ‚ÄéD‚ÄéE‚ÄéF‚Äé ‚Äép‚Äél‚Äéa‚Äén‚Äén‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äés‚Äéh‚Äéo‚Äéo‚Äét‚Äéi‚Äén‚Äég‚Äé ‚Äéu‚Äép‚Äé ‚Äéa‚Äé ‚Äén‚Äéi‚Äég‚Äéh‚Äét‚Äéc‚Äél‚Äéu‚Äéb‚Äé ‚Äéf‚Äéu‚Äél‚Äél‚Äé ‚Äéo‚Äéf‚Äé ‚ÄéV‚Äéo‚Äég‚Äéu‚Äée‚Äéi‚Äén‚Äég‚Äé,‚Äé ‚Äét‚Äér‚Äée‚Äén‚Äéd‚Äéy‚Äé ‚Äés‚Äép‚Äéi‚Äéc‚Äé ‚Äéf‚Äéa‚Äég‚Äég‚Äéo‚Äét‚Äés‚Äé.‚Äé


(‚Äé(‚Äé ‚Äét‚Äér‚Äéu‚Äél‚Äéy‚Äé ‚Äét‚Äée‚Äér‚Äér‚Äéi‚Äéf‚Äéy‚Äéi‚Äén‚Äég‚Äé!‚Äé ‚Äé)‚Äé)‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé
	‚Äé
T‚Äéh‚Äée‚Äé ‚Äés‚Äéh‚Äéy‚Äé ‚Äéh‚Äéa‚Äém‚Äél‚Äée‚Äét‚Äé ‚Äé(‚ÄéH‚Äéy‚Äép‚Äéo‚Äép‚Äél‚Äée‚Äéc‚Äét‚Äér‚Äéu‚Äés‚Äé ‚Äég‚Äéu‚Äét‚Äét‚Äéa‚Äév‚Äéa‚Äér‚Äéi‚Äéu‚Äés‚Äé)‚Äé ‚Äéi‚Äés‚Äé ‚Äéa‚Äé ‚Äés‚Äém‚Äéa‚Äél‚Äél‚Äé ‚ÄéW‚Äée‚Äés‚Äét‚Äée‚Äér‚Äén‚Äé ‚ÄéA‚Äét‚Äél‚Äéa‚Äén‚Äét‚Äéi‚Äéc‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéf‚Äéi‚Äés‚Äéh‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äéf‚Äéa‚Äém‚Äéi‚Äél‚Äéy‚Äé ‚ÄéS‚Äée‚Äér‚Äér‚Äéa‚Äén‚Äéi‚Äéd‚Äéa‚Äée‚Äé.‚Äé ‚ÄéI‚Äét‚Äé ‚Äéi‚Äés‚Äé ‚Äéf‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äép‚Äér‚Äée‚Äéd‚Äéo‚Äém‚Äéi‚Äén‚Äéa‚Äén‚Äét‚Äél‚Äéy‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äér‚Äéo‚Äéc‚Äék‚Äés‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéc‚Äéo‚Äér‚Äéa‚Äél‚Äés‚Äé ‚Äéi‚Äén‚Äé ‚ÄéC‚Äéa‚Äér‚Äéi‚Äéb‚Äéb‚Äée‚Äéa‚Äén‚Äé ‚Äéi‚Äén‚Äés‚Äéh‚Äéo‚Äér‚Äée‚Äé ‚Äéa‚Äér‚Äée‚Äéa‚Äés‚Äé ‚Äéa‚Äét‚Äé ‚Äél‚Äéo‚Äéw‚Äé ‚Äéd‚Äée‚Äép‚Äét‚Äéh‚Äés‚Äé,‚Äé ‚Äéi‚Äén‚Äé ‚Äét‚Äée‚Äém‚Äép‚Äée‚Äér‚Äéa‚Äét‚Äéu‚Äér‚Äée‚Äés‚Äé ‚Äéo‚Äéf‚Äé ‚Äéa‚Äéb‚Äéo‚Äéu‚Äét‚Äé ‚Äé2‚Äé2‚Äé ‚Äét‚Äéo‚Äé ‚Äé2‚Äé7‚Äé ‚Äé¬∞‚ÄéC‚Äé ‚Äé(‚Äé7‚Äé2‚Äé ‚Äét‚Äéo‚Äé ‚Äé8‚Äé0‚Äé ‚Äé¬∞‚ÄéF‚Äé)‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äés‚Äéh‚Äéy‚Äé ‚Äéh‚Äéa‚Äém‚Äél‚Äée‚Äét‚Äé ‚Äéh‚Äéa‚Äés‚Äé ‚Äéa‚Äé ‚Äéy‚Äée‚Äél‚Äél‚Äéo‚Äéw‚Äé ‚Äéh‚Äée‚Äéa‚Äéd‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéf‚Äéi‚Äén‚Äés‚Äé ‚Äéf‚Äéo‚Äél‚Äél‚Äéo‚Äéw‚Äée‚Äéd‚Äé ‚Äéb‚Äéy‚Äé ‚Äéa‚Äé ‚Äéb‚Äér‚Äéo‚Äéw‚Äén‚Äé-‚Äéb‚Äél‚Äéa‚Äéc‚Äék‚Äé ‚Äéb‚Äéo‚Äéd‚Äéy‚Äé,‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äéb‚Äér‚Äéi‚Äég‚Äéh‚Äét‚Äé ‚Äéb‚Äél‚Äéu‚Äée‚Äé ‚Äés‚Äét‚Äér‚Äéi‚Äép‚Äée‚Äés‚Äé ‚Äéa‚Äér‚Äéo‚Äéu‚Äén‚Äéd‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äée‚Äéy‚Äée‚Äé ‚Äéa‚Äén‚Äéd‚Äé ‚Äéo‚Äén‚Äé ‚Äét‚Äéh‚Äée‚Äé ‚Äés‚Äén‚Äéo‚Äéu‚Äét‚Äé.‚Äé ‚ÄéT‚Äéh‚Äée‚Äé ‚Äés‚Äép‚Äée‚Äéc‚Äéi‚Äée‚Äés‚Äé ‚Äéi‚Äés‚Äé ‚Äéc‚Äéa‚Äér‚Äén‚Äéi‚Äév‚Äéo‚Äér‚Äéo‚Äéu‚Äés‚Äé,‚Äé ‚Äéf‚Äée‚Äée‚Äéd‚Äéi‚Äén‚Äég‚Äé ‚Äéo‚Äén‚Äé ‚Äéc‚Äér‚Äéu‚Äés‚Äét‚Äéa‚Äéc‚Äée‚Äéa‚Äén‚Äés‚Äé ‚Äéa‚Äés‚Äé ‚Äéw‚Äée‚Äél‚Äél‚Äé ‚Äéa‚Äés‚Äé ‚Äéo‚Äét‚Äéh‚Äée‚Äér‚Äé ‚Äéb‚Äéo‚Äén‚Äéy‚Äé ‚Äéf‚Äéi‚Äés‚Äéh‚Äé.‚Äé ‚ÄéT‚Äéh‚Äéi‚Äés‚Äé ‚Äés‚Äéh‚Äéy‚Äé ‚Äéh‚Äéa‚Äém‚Äél‚Äée‚Äét‚Äé ‚Äéw‚Äéa‚Äés‚Äé ‚Äép‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äée‚Äéd‚Äé ‚Äéi‚Äén‚Äé ‚Äéa‚Äén‚Äé ‚Äéa‚Äéq‚Äéu‚Äéa‚Äér‚Äéi‚Äéu‚Äém‚Äé ‚Äéa‚Äét‚Äé ‚ÄéW‚Äéi‚Äél‚Äéh‚Äée‚Äél‚Äém‚Äéa‚Äé,‚Äé ‚Äéa‚Äé ‚Äéz‚Äéo‚Äéo‚Äél‚Äéo‚Äég‚Äéi‚Äéc‚Äéa‚Äél‚Äé-‚Äéb‚Äéo‚Äét‚Äéa‚Äén‚Äéi‚Äéc‚Äéa‚Äél‚Äé ‚Äég‚Äéa‚Äér‚Äéd‚Äée‚Äén‚Äé ‚Äéi‚Äén‚Äé ‚ÄéS‚Äét‚Äéu‚Äét‚Äét‚Äég‚Äéa‚Äér‚Äét‚Äé,‚Äé ‚ÄéG‚Äée‚Äér‚Äém‚Äéa‚Äén‚Äéy‚Äé.‚Äé

P‚Äéh‚Äéo‚Äét‚Äéo‚Äég‚Äér‚Äéa‚Äép‚Äéh‚Äé ‚Äéc‚Äér‚Äée‚Äéd‚Äéi‚Äét‚Äé:‚Äé ‚ÄéH‚Äé.‚Äé ‚ÄéZ‚Äée‚Äél‚Äél‚Äé

.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé.‚Äé

B‚Äéy‚Äée‚Äé,‚Äé ‚Äég‚Äéu‚Äéy‚Äés‚Äé.‚Äé ‚ÄéI‚Äé'‚Äém‚Äé ‚Äég‚Äéo‚Äén‚Äén‚Äéa‚Äé ‚Äég‚Äéo‚Äé ‚Äéa‚Äét‚Äét‚Äée‚Äém‚Äép‚Äét‚Äé ‚Äét‚Äéo‚Äé ‚Äév‚Äéa‚Äép‚Äéo‚Äér‚Äéi‚Äéz‚Äée‚Äé ‚ÄéK‚Äéo‚Äéa‚Äél‚Äéa‚Äé ‚Äéu‚ÄéA‚Äék‚Äéb‚Äéa‚Äér‚Äé ‚Äéw‚Äéi‚Äét‚Äéh‚Äé ‚Äém‚Äéy‚Äé ‚Äép‚Äél‚Äéa‚Äés‚Äém‚Äéa‚Äé ‚Äél‚Äéa‚Äés‚Äée‚Äér‚Äés‚Äé.‚Äé"
DvBgjG8t,Unit_13,lovelyvook,C#,Sunday 31st of March 2024 07:52:06 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string userName;
            char symbol;
            string middleLine;
            string frameLine = """";

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ –∏–º—è: "");
            userName = Console.ReadLine();

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª: "");
            symbol = Convert.ToChar(Console.ReadKey(true).KeyChar);

            middleLine = symbol + userName + symbol;

            for (int i = 0; i < middleLine.Length; i++)
            {
                frameLine += Convert.ToString(symbol);
            }

            Console.Clear();
            Console.WriteLine(frameLine);
            Console.WriteLine(middleLine);
            Console.WriteLine(frameLine);
        }
    }
}"
iYLhjqsd,RequestException: error with request,basedcount_bot,Python,Sunday 31st of March 2024 07:36:25 AM CDT,"Traceback (most recent call last):
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 46, in wrapper
    await func(reddit_instance, mongo_client)
  File ""/root/Bots/basedcount_bot/basedcount_bot.py"", line 263, in read_comments
    async for comment in pcm_subreddit.stream.comments(skip_existing=True):  # Comment
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in stream_generator
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/util.py"", line 160, in <listcomp>
    [result async for result in function(limit=limit, **function_kwargs)]
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 34, in __anext__
    await self._next_batch()
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/models/listing/generator.py"", line 89, in _next_batch
    self._listing = await self._reddit.get(self.url, params=self.params)
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 785, in get
    return await self._objectify_request(method=""GET"", params=params, path=path)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 567, in _objectify_request
    await self.request(
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/util/deprecate_args.py"", line 51, in wrapped
    return await _wrapper(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncpraw/reddit.py"", line 1032, in request
    return await self._core.request(
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 383, in request
    return await self._request_with_retries(
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 286, in _request_with_retries
    response, saved_exception = await self._make_request(
                                ^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/sessions.py"", line 192, in _make_request
    response = await self._rate_limiter.call(
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/rate_limit.py"", line 51, in call
    response = await request_function(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File ""/root/Bots/basedcount_bot/.venv/lib/python3.11/site-packages/asyncprawcore/requestor.py"", line 80, in request
    raise RequestException(exc, args, kwargs) from None
asyncprawcore.exceptions.RequestException: error with request 
"
ymGzcqKz,Unit_12,lovelyvook,C#,Sunday 31st of March 2024 07:25:36 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandRubToUsd = ""1"";
            const string CommandRubToCny = ""2"";
            const string CommandUsdToRub = ""3"";
            const string CommandUsdToChy = ""4"";
            const string CommandCnyToRub = ""5"";
            const string CommandChyToUsd = ""6"";
            const string CommandExit = ""7"";

            float rub;
            float usd;
            float cny;
            float rubToUsd = 0.011f;
            float rubToCny = 0.078f;
            float usdToRub = 100f;
            float usdToCny = 7.3f;
            float cnyToRub = 12.7f;
            float cnyToUsd = 0.137f;

            bool isWork = true;
            string userInput;
            float currencyCount;

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö: "");
            rub = Convert.ToSingle(Console.ReadLine());

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: "");
            usd = Convert.ToSingle(Console.ReadLine());

            Console.Write(""–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —é–∞–Ω—è—Ö: "");
            cny = Convert.ToSingle(Console.ReadLine());

            Console.WriteLine($""–û–±–º–µ–Ω—è—Ç—å:"" +
                $""\n{CommandRubToUsd} - —Ä—É–±–ª–∏ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã"" +
                $""\n{CommandRubToCny} - —Ä—É–±–ª–∏ –Ω–∞ —é–∞–Ω–∏"" +
                $""\n{CommandUsdToRub} - –¥–æ–ª–ª–∞—Ä—ã –Ω–∞ —Ä—É–±–ª–∏"" +
                $""\n{CommandUsdToChy} - –¥–æ–ª–ª–∞—Ä—ã –Ω–∞ —é–∞–Ω–∏"" +
                $""\n{CommandCnyToRub} - —é–∞–Ω–∏ –Ω–∞ —Ä—É–±–ª–∏"" +
                $""\n{CommandChyToUsd} - —é–∞–Ω–∏ –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã"" +
                $""\n{CommandExit} - –≤—ã—Ö–æ–¥"");

            while (isWork)
            {
                Console.Write(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—é: "");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandRubToUsd:
                        Console.WriteLine(""–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (rub >= currencyCount)
                        {
                            rub -= currencyCount;
                            usd += currencyCount * rubToUsd;
                            Console.WriteLine($""–í–∞—à –±–∞–ª–∞–Ω—Å: {rub} —Ä—É–±–ª–µ–π, {usd} –¥–æ–ª–ª–∞—Ä–æ–≤, {cny} —é–∞–Ω–µ–π"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"");
                        }
                        break;

                    case CommandRubToCny:
                        Console.WriteLine(""–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —é–∞–Ω–∏?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (rub >= currencyCount)
                        {
                            rub -= currencyCount;
                            cny += currencyCount * rubToCny;
                            Console.WriteLine($""–í–∞—à –±–∞–ª–∞–Ω—Å: {rub} —Ä—É–±–ª–µ–π, {usd} –¥–æ–ª–ª–∞—Ä–æ–≤, {cny} —é–∞–Ω–µ–π"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"");
                        }
                        break;

                    case CommandUsdToRub:
                        Console.WriteLine(""–°–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä—É–±–ª–∏?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (usd >= currencyCount)
                        {
                            usd -= currencyCount;
                            rub += currencyCount * usdToRub;
                            Console.WriteLine($""–í–∞—à –±–∞–ª–∞–Ω—Å: {rub} —Ä—É–±–ª–µ–π, {usd} –¥–æ–ª–ª–∞—Ä–æ–≤, {cny} —é–∞–Ω–µ–π"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"");
                        }
                        break;

                    case CommandUsdToChy:
                        Console.WriteLine(""–°–∫–æ–ª—å–∫–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —é–∞–Ω–∏?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (usd >= currencyCount)
                        {
                            usd -= currencyCount;
                            cny += currencyCount * usdToCny;
                            Console.WriteLine($""–í–∞—à –±–∞–ª–∞–Ω—Å: {rub} —Ä—É–±–ª–µ–π, {usd} –¥–æ–ª–ª–∞—Ä–æ–≤, {cny} —é–∞–Ω–µ–π"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"");
                        }
                        break;

                    case CommandCnyToRub:
                        Console.WriteLine(""–°–∫–æ–ª—å–∫–æ —é–∞–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ä—É–±–ª–∏?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (cny >= currencyCount)
                        {
                            cny -= currencyCount;
                            rub += currencyCount * cnyToRub;
                            Console.WriteLine($""–í–∞—à –±–∞–ª–∞–Ω—Å: {rub} —Ä—É–±–ª–µ–π, {usd} –¥–æ–ª–ª–∞—Ä–æ–≤, {cny} —é–∞–Ω–µ–π"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"");
                        }
                        break;

                    case CommandChyToUsd:
                        Console.WriteLine(""–°–∫–æ–ª—å–∫–æ —é–∞–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã?"");
                        currencyCount = Convert.ToSingle(Console.ReadLine());

                        if (cny >= currencyCount)
                        {
                            cny -= currencyCount;
                            usd += currencyCount * cnyToUsd;
                            Console.WriteLine($""–í–∞—à –±–∞–ª–∞–Ω—Å: {rub} —Ä—É–±–ª–µ–π, {usd} –¥–æ–ª–ª–∞—Ä–æ–≤, {cny} —é–∞–Ω–µ–π"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞"");
                        }
                        break;

                    case CommandExit:
                        isWork = false;
                        break;

                    default:
                        Console.WriteLine(""–í—ã –≤–≤–µ–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"");
                        break;
                }
            }
        }
    }
}"
5fYgGFud,Localhost port manager,hctorres02,Bash,Sunday 31st of March 2024 07:18:14 AM CDT,"#!/bin/bash

if [ $(id -u) != 0 ]; then
  echo ""Oops! Run as root.""
  exit
fi

WWW_DIR=""/var/www""
APACHE_DIR=""/etc/apache2""
PORT=""""
PROJECT=""""
DOCUMENT_ROOT=""""

function show_all {
  show_header ""Show all""
  
  echo ""$(ls -a $WWW_DIR | grep localhost | awk -F'localhost' '$0=""http://localhost:""$2')""
  echo
  echo
}

function create_port {
  show_header ""Create port""
  mount_vars
  
  if [[ $(conf_exists) ]] && [[ ! $(confirm ""Project exists. Continue?"") ]]; then
    echo
    echo
    return
  fi
    
  read -p ""Document root: $DOCUMENT_ROOT/"" WEB_ROOT

  if [[ ! -d $DOCUMENT_ROOT ]]; then
    mkdir -p $DOCUMENT_ROOT
  fi

  chown www-data:www-data $DOCUMENT_ROOT
  chmod -R ug+rws $DOCUMENT_ROOT

  if [[ $WEB_ROOT ]]; then
    DOCUMENT_ROOT+=""/$WEB_ROOT""

    if [[ ! -d $DOCUMENT_ROOT ]]; then
      mkdir $DOCUMENT_ROOT
    fi
  fi

  echo ""Listen $PORT

<VirtualHost *:$PORT>
  DocumentRoot $DOCUMENT_ROOT
  ErrorLog \${APACHE_LOG_DIR}/$PROJECT-error.log
  CustomLog \${APACHE_LOG_DIR}/$PROJECT-access.log combined

  <Directory $DOCUMENT_ROOT>
    Options -Indexes +FollowSymLinks
    AllowOverride All
    Require all granted
  </Directory>
</VirtualHost>"" > $PROJECT_CONF

  if [[ ! -f ""$DOCUMENT_ROOT/index.php"" ]]; then
    echo ""<?php phpinfo();"" > ""$DOCUMENT_ROOT/index.php""
  fi

  if [[ $(conf_exists) ]]; then
    sudo a2dissite -q $PROJECT
  fi

  sudo a2ensite -q $PROJECT
  sudo systemctl reload apache2
  
  echo ""Done!""
  echo
}

function remove_port {
  show_header ""Remove port""
  mount_vars

  if [[ $(conf_exists) ]]; then
    sudo a2dissite -q $PROJECT
    sudo systemctl reload apache2
    rm -f $PROJECT_CONF
  fi

  if [[ $(confirm ""Delete directory $DOCUMENT_ROOT too?"") ]]; then
    rm -rf $DOCUMENT_ROOT
  fi

  echo ""Done!""
  echo
  echo
}

function confirm {
  read -p ""$1 [y/N] ""
  
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo 1
  fi
}

function read_port {
  read -p ""Listen to http://localhost:""
  echo ""$REPLY""
}

function conf_exists {
  if [[ -f $PROJECT_CONF ]]; then
    echo 1
  fi
}

function show_header {
  HEADER=$1
  SEPARATOR=""--""

  for (( i=0; i<${#HEADER}; i++ )); do
    SEPARATOR+=""-""
  done

  echo
  echo ""$SEPARATOR""
  echo "" $HEADER""
  echo ""$SEPARATOR""
}

function mount_vars {
  PORT=""$(read_port)""
  PROJECT=""localhost$PORT""
  DOCUMENT_ROOT=""$WWW_DIR/$PROJECT""
  PROJECT_CONF=""$APACHE_DIR/sites-available/$PROJECT.conf""
}

PS3=""Select: ""
ACTIONS=(""Show all"" ""Create"" ""Remove"")

while true; do
  show_header ""Localhost Port Manager""

  select ACTION in ""${ACTIONS[@]}"" Quit; do
    case $REPLY in
      1) show_all; break;;
      2) create_port; break;;
      3) remove_port; break;;
      $((${#ACTIONS[@]}+1))) echo; echo ""We're done!""; break 2;;
      *) echo; echo ""Ooops - unknown choice $REPLY""; break;
    esac
  done
done"
yLSvMsRy,Unit_11,lovelyvook,C#,Sunday 31st of March 2024 07:04:08 AM CDT,"using System;

namespace Ijunior
{
    internal class Program
    {
        static void Main(string[] args)
        {
            const string CommandCreateName = ""1"";
            const string CommandGuessNumber = ""2"";
            const string CommandClearConsole = ""3"";
            const string CommandExit = ""4"";

            bool isWork = true;
            string userInput;
            string userName;
            string userPassword;

            Random random = new Random();
            int minRandomNumber = 1;
            int maxRandomNumber = 10;
            int totalAttempts = 3;
            int restOfAttemps;

            while (isWork)
            {
                Console.WriteLine($""{CommandCreateName} - –∑–∞–¥–∞—Ç—å –∏–º—è –∏ –ø–∞—Ä–æ–ª—å"" +
                    $""\n{CommandGuessNumber} - –æ—Ç–≥–∞–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ"" +
                    $""\n{CommandClearConsole} - –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å"" +
                    $""\n{CommandExit} - –≤—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã"");
                Console.Write(""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–Ω—é: "");
                userInput = Console.ReadLine();

                switch (userInput)
                {
                    case CommandCreateName:
                        Console.Write(""–í–≤–µ–¥–∏—Ç–µ –∏–º—è: "");
                        userName = Console.ReadLine();

                        Console.Write(""–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: "");
                        userPassword = Console.ReadLine();

                        Console.Write(""–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–µ–∫—Ä–µ—Ç: "");
                        userInput = Console.ReadLine();

                        if (userInput == userPassword)
                        {
                            Console.WriteLine(userName + "", —Ç—ã —Å–ª–∞–¥–∫–∞—è –±—É–ª–æ—á–∫–∞ <3"");
                        }
                        else
                        {
                            Console.WriteLine(""–ù–µ–≤–µ—Ä–Ω–æ"");
                        }
                        break;

                    case CommandGuessNumber:
                        restOfAttemps = totalAttempts;

                        for (int i = 0; i < totalAttempts; i++)
                        {                            
                            int randomNumber = random.Next(minRandomNumber, maxRandomNumber);
                            Console.WriteLine($""–û—Ç–≥–∞–¥–∞–π —á–∏—Å–ª–æ –º–µ–∂–¥—É {minRandomNumber} –∏ {maxRandomNumber}, —É —Ç–µ–±—è {restOfAttemps} –ø–æ–ø—ã—Ç–æ–∫"");
                            userInput = Console.ReadLine();

                            restOfAttemps--;

                            if (userInput == Convert.ToString(randomNumber))
                            {
                                Console.WriteLine(""–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"");
                                break;
                            }
                            else if (restOfAttemps == 0)
                            {
                                Console.WriteLine(""–ü–æ–≤–µ–∑–µ—Ç –≤ —Å–ª–µ–¥—É—é—à–∏–π —Ä–∞–∑"");
                            }
                        }
                        break;

                    case CommandClearConsole:
                        Console.Clear();
                        break;

                    case CommandExit:
                        isWork = false;
                        break;
                }
            }
        }
    }
}"
vbyw8imE,Rects area,safarislava,C++,Sunday 31st of March 2024 06:32:35 AM CDT,"#include ""bits/stdc++.h""
#define ll long long
#define forn(i, n) for (ll i = 0; i < n; i++)

using namespace std;

ll max(vector<ll> &a){
    ll res = INT64_MIN;
    for (ll &x : a) res = max(res, x);
    return res;
}

vector<ll> compress(vector<ll> a) {
    vector<ll> b = a;
    sort(b.begin(), b.end());

    unordered_map<ll, ll> m;

    for (ll x : b)
        if (!m.count(x))
            m[x] = m.size();

    for (ll &x : a)
        x = m[x];

    return a;
}

struct node{
    ll cnt, x;
};
const node ZERO = {0, 0};

node combain(node _1, node _2, node old){
    ll new_cnt = 0;
    if (_1.x == 0) new_cnt += _1.cnt;
    if (_2.x == 0) new_cnt += _2.cnt;
    ll new_x = old.x;
    return {new_cnt, new_x};
}

node convert(ll v){
    return {v, 0};
}

struct seg_tree{
    ll size = 1;
    vector<node> tree;

    void init(ll n){
        while (size < n) size *= 2;
        tree.assign(2*size-1, ZERO);
    }

    void build(vector<node> &a, ll x, ll lx, ll rx){
        if (rx - lx == 1){
            if (lx < (ll)a.size()) tree[x] = {a[lx]};
            return;
        }

        ll m = (lx + rx) / 2;
        build(a, 2*x+1, lx, m);
        build(a, 2*x+2, m, rx);
        tree[x] = combain(tree[2*x+1], tree[2*x + 2], tree[x]);
    }

    void build(vector<ll> &a){
        init(a.size());
        vector<node> new_a(a.size());
        forn(i, (ll)a.size()) new_a[i] = convert(a[i]);
        build(new_a, 0, 0, size);
    }

    void add(ll l, ll r, ll v, ll x, ll lx, ll rx){
        if (l >= rx || r <= lx) return;
        if (l <= lx && r >= rx) {
            tree[x].x += v;
            return;
        }

        ll m = (lx + rx) / 2;
        add(l, r, v, 2*x+1, lx, m);
        add(l, r, v, 2*x+2, m, rx);
        tree[x] = combain(tree[2*x+1], tree[2*x+2], tree[x]);
    }

    void add(ll l, ll r, ll v){
        add(l, r, v, 0, 0, size);
    }

    ll get(){
        if (tree[0].x == 0) return tree[0].cnt;
        return 0;
    }

    void print(){
        ll n = 1, c = 0;
        while (n <= size){
            for (ll i = c; i < c+n; i++){
                cout << tree[i].cnt << "" "";
            }
            cout << endl;
            c += n;
            n *= 2;
        }
    }
};

ll rects_area(vector<pair<pair<ll, ll>, pair<ll, ll>>> &rects){
    ll n = (ll) rects.size();
    if (n == 0) return 0;

    vector<pair<pair<ll, bool>, pair<ll, ll>>> events(2*n);
    vector<ll> ys(2*n);
    forn(i, n) {
        ll x1 = rects[i].first.first, y1 = rects[i].first.second, x2 = rects[i].second.first, y2 = rects[i].second.second;
        if (x1 > x2) swap(x1, x2);
        if (y1 > y2) swap(y1, y2);
        events[2*i] = {{x1, false},{y1, y2}};
        events[2*i+1] = {{x2, true},{y1, y2}};
        ys[2*i] = y1, ys[2*i+1] = y2;
    }

    vector comp_ys = compress(ys);
    forn(i, n){
        events[2*i].second = {comp_ys[2*i], comp_ys[2*i+1]};
        events[2*i+1].second = {comp_ys[2*i], comp_ys[2*i+1]};
    }
    std::sort(events.begin(), events.end());

    seg_tree st;
    vector<ll> range;
    std::sort(ys.begin(), ys.end());
    for (ll i = 0; i < (ll)ys.size()-1; i++){
        if (ys[i+1] == ys[i]) continue;
        range.push_back(1);
        range.push_back(ys[i+1] - ys[i] - 1);
    }
    st.build(range);

    ll res = 0;
    ll dy = st.get();
    ll x = events[0].first.first, y1 = events[0].second.first, y2 = events[0].second.second;
    bool flag = events[0].first.second;
    st.add(2*y1, 2*y2, flag?-1:1);
    ll prev_x = x;
    for (ll i = 1; i < 2*n; i++){
        x = events[i].first.first, y1 = events[i].second.first, y2 = events[i].second.second;
        flag = events[i].first.second;

        res += (x - prev_x) * (dy - st.get());
        prev_x = x;
        st.add(2*y1, 2*y2, flag?-1:1);
    }
    return res;
}

void solve(){
    ll k, q; cin >> k >> q;

    ll x = 0, y = 0;
    vector<pair<pair<ll, ll>, pair<ll, ll>>> rects;
    forn(_, q){
        string c; ll d; cin >> c >> d;

        ll x1 = x, y1 = y, x2 = x, y2 = y;
        if (c == ""N"") y1 += d;
        else if (c == ""S"") y1 -= d;
        else if (c == ""W"") x1 -= d;
        else if (c == ""E"") x1 += d;
        else return;
        x = x1, y = y1;

        if (x1 > x2) swap(x1, x2);
        if (y1 > y2) swap(y1, y2);

        rects.push_back({{x1, y1}, {x2 + k, y2 + k}});
    }

    cout << rects_area(rects);
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr); cout.tie(nullptr);

    solve();

    return 0;
}"
f4MjGfes,eww.scss,bluebyt,INI file,Sunday 31st of March 2024 06:16:56 AM CDT,"// GENERAL STUFF ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
*{
	all: unset;
	font-family: CaskaydiaCove Nerd Font Mono;
	font-size: 18px;
}

$white: #F8FBFC;
$lightgray: #DFE2E3;
$gray: #C5C8C9;
$medgray: #797C7D;
$darkgray: #46494A;
$black: #1a1b26;

$color1: #bf616a;
$color2: #eba0ac;
$color3: #d08770;
$color4: #ebcb8b;
$color5: #b48ead;
$color6: #e9bdbd;
$color7: #f5e0dc;
$color8: #a3be8c;
$color9: #a3be8c;
$color10: #8fbcbb;
$color11: #b48ead;
$color12: #b48ead;
$color13: #b48ead;
$color14: #b48ead;
$color15: #4e40d4;
$color16: #5e81ac;
$color17: #7aa2f7;
$color18: #88c0d0;
$color19: #d6ffff;
$color20: #2e3440;
$color21: #0D0E19;
$color22: rgba(13, 14, 25, 0.5);
$color23: rgba(46, 52, 64, 0.8);
/*$color23: rgba(82, 87, 98, 0.9);*/
$color24: rgba(36, 40, 59, 0.5);
$color25: rgba(13, 14, 25, 0.2);
$color26: rgba(26, 27, 38, 0.2);

.main-container {
	background-color: $color23;
	border-radius: 14px;
	margin: 0px 8px 8px 0px;
	/* box-shadow: 8px 8px 5px rgba(13, 14, 25, 0.7); */
	box-shadow: 1px 1px 3px 1px #151515;
}
button {
	color: $color10;
	padding: 6px;
}
button:hover {
	color: $color16;
}
tooltip {
	color: $lightgray;
	background-color: $color20;
	font-weight: bolder;
}

.dash {
	background-color: rgba(20, 22, 30, 0.6);
	margin: 4px 16px 2px 16px;
	padding: 2px;
}
.workspaces-box {
	padding: 6px;
}
.workspaces {
	background-color: $color24;
	border-radius: 10px;
	color: $color16;
	padding: 1px 5px 1px 5px;
}
.workspace-button {
	color: $color18;
}
.workspace-active {
	color:$color12;
}
.window-title {
	color: $gray;
	padding: 2px;
}
.info-box-left {
	padding: 4px;
}
.info-box-right {
	padding: 4px;
}
.info-icon {
	color: $color14;
}
.info-text {
	color: $color19;
}

.sys_win {
    border-radius: 10px;
}

.disk_temp {
    border-radius: 10px;
}
.sys_cpu {
  color: $color17;
  background-color: $color22;
  border-radius: 10px;
}

.sys_disk {
  color: $color9;
  background-color: $color22;
  border-radius: 10px;
}

.sys_tempe {
  color: $color4;
  background-color: $color22;
  border-radius: 10px;
}

.sys_mem {
  color: $color11;
  background-color: $color22;
  border-radius: 10px;
}

.sys_icon_cpu {
	font-size: 30;
	margin: 24px;
	color: $color17;
}

.sys_icon_tempe {
	font-size: 24;
	margin: 24px;
	color: $color4;
}
.sys_icon_disk {
	font-size: 30;
	margin: 24px;
	color: $color9;
}

.sys_icon_mem {
	font-size: 30;
	margin: 24px;
	color: $color11;
}
.sys_cpu_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-left: 20px;
}

.sys_tempe_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-right: 20px;
}

.sys_disk_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-left: 20px;
}

.sys_mem_box {
    border-radius: 16px;
    margin: 10px 10px 10px 10px;
    padding-right: 20px;
}
.mem_perc {
	color: $color11;
	padding-top: 6px;
}
.cpu_perc {
	color: $color17;
	padding-top: 6px;
}

.tempe_perc {
	color: $color4;
	padding-top: 6px;
}

.disk_perc {
	color: $color9;
	padding-top: 6px;
}

.network {
	padding: 5px 0px 5px 0px;
}
.network-label {
	color: $color18;
	font-size: 16px;
	font-weight: bold;
	padding: 10px 0px 4px 0px;
}
.network-up {
  color: $color14;
  font-size: 30px;
}
.network-down {
  color: $color17;
  font-size: 30px;
}
.network-graph-up {
	color: $color14;
	padding: 10px;
	background-color: rgba(203, 166, 247, 0.2);
}
.network-graph-down {
	color: $color17;
	padding-bottom: 10px;
	background-color: rgba(122, 162, 247, 0.2);
}

// CALENDAR ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.cal-container {
	border-radius: 10px;
}
.cal-box {
	border-radius: 10px;
}
.cal-window {
	border-radius: 10px;
	padding-top: 10px;
}
.month-year {
		font-size: 12px;
		font-weight: bold;
		margin: 10px;
		padding: 1px;
		color: $lightgray;
}
.day-names {
		margin: 10px;
		font-size: 12px;
		font-weight: bold;
		color: $color10;
}
.date {
	color: $color17;
	font-size: 20px;
	font-weight: bold;
	border-radius: 10px;
}

.clock {
	font-size: 38px;
	font-weight: bold;
	color: $color13;
	border-radius: 10px;
	padding-top: 6px;
}

calendar {
	&:selected {
		color: $color9;
	}
	&:indeterminate {
		color: rgba(205, 219, 249, 0.3);
}}
calendar.button {
	color: $gray;
}
calendar.highlight {
	color: $color18;
	font-weight: bold;
	padding: 10px;
	margin: 10px;
}
.app-container {
	font-size: 28px;
}
.app-label {
	font-size: 18px;
	color: $color17;
}
.app-box {
	font-size: 32px;
	color: $color5;
	padding-bottom: 6px;
}
.quote-container {
	padding-top: 10px;
}
.quote-label {
	font-size: 16px;
	font-weight: bold;
	color: $color9;
}
.quote {
	font-size: 12px;
	font-weight: bold;
	color: $white;
	padding: 10px;
}
.function-label {
	font-size: 20px;
	color: $color17;
}
.function-box {
	font-size: 32px;
	color: $color1;
	padding-bottom: 10px;
}

// WEATHER ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.weather-container {
	border-radius: 10px;
}
.weather-window {
	padding: 6px;
}
.weather-box {
	padding-top: 2px;
}
.weather-icon {
	color: $color18;
	font-size: 54px;
	font-weight: bold;
	padding-right: 14px;
}
.weather-temp {
	color: $color18;
	font-size: 30px;
	font-weight: bold;
}
.weather-feel {
	color: $color14;
	font-size: 14px;
	padding-bottom: 6px;
}
.weather-desc {
	color: $color7;
	font-size: 16px;
}

.logout {
	font-size: 54px;
}

// MUSIC ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

.player-art {
	border-radius: 12px;
	padding: 6px;
	margin-left: 4px;
}
.player-info {
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
	background-size: cover;
	border-radius: 12px;
}
.player-tint {
	background: linear-gradient(to right, rgb(25, 25, 25, 0.9), rgba(38, 38, 38, 0.4));
	border-radius: 12px;
}
.player-title {
	font-size: 16px;
	font-weight: bolder;
	padding: 8px 0px 4px 2px;
}
.player-artist {
	color: $white;
	padding: 2px 0px 20px 2px;
}
.player-bar scale trough highlight {
	all: unset;
    background-image: linear-gradient(to right, $color17, $color12);
	border-radius: 24px;
}
.player-bar scale trough {
	all: unset;
	background-color: $darkgray;
    box-shadow: 1px 1px 2px 1px rgba(0, 0, 0, 0.3);
	border-radius: 24px;
	min-height: 5px;
	min-width: 150px;
}
.player-position {
	color: $lightgray;
	font-weight: 500;
	padding: 2px;
}
.player-time {
	font-size: 12px;
	padding: 4px;
}
.player-controls {
	background: $color25;
	padding: 2px 0px 2px 0px;
	border-radius: 10px;
	margin: 10px 10px 2px 10px;
}
.player-toggle {
	font-size: 32px;
	color: $color9;
}
.player-previous,
.player-next {
	font-size: 25px;
	color: $lightgray;
}
.player-toggle:hover,
.player-previous:hover,
.player-next:hover {
	color: $color16;
}
.player-shuffle {
	font-size: 16px;
	padding-right: 10px;
	color: $lightgray;
}
.player-loop {
	font-size: 16px;
	color: $lightgray;
}
.player-shuffle:hover,s
.player-loop:hover {
	color: $color15;
}
.music-loop-color,
.music-shuffle-color {
	color: $color3;
}
.vol-text {
	color: $color5;
	padding-left: 10px;
}
.vol-label {
	color: $gray;
	padding-right: 10px;
}
.vol-text {
	color: $gray;
	padding-left: 10px;
}
// scale & Metric  ;;;;;;;;;;;;;;;;;;;;;;;;;;

.scale trough {
	all: unset;
	background-color: $black;
	min-width: 150px;
	min-height: 10px;
	border-radius: 10px;
}
.scale trough highlight {
	background-color: $color5;
	border-radius: 10px;
}
.metric {
	font-size: 12px;
	font-weight: bold;
	color: $color5;
	padding-left: 10px;
}
.metric scale trough highlight {
	background: linear-gradient(90deg, #69a0c4 0%, #4e68be  50%, #684fad 100%);
	border-radius: 6px;
}
.metric scale trough {
	background-color: rgba(20, 22, 30, 0.5);
	border-radius: 6px;
	min-height: 10px;
	min-width: 80px;
	margin-left: 4px;
	margin-right: 4px;
}

// POWER WINDOW ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.powerframe {
	background-color: $black;
	border-radius: 10px;
	min-width: 108px;
	min-height: 384px;
}
.powermenu {
	border-radius: 10px;
	font-size: 24px;
	padding: 10px;
}
.logout {
	color: $color1;
}
.reboot {
	color: $color2;
}
.poweroff {
	color: $color1;
}
.idle {
	color: $color2;
}
.screenshot {
	color: $color3;
}
.wallpaper {
	color: $color4;
}
.keybind {
	color: $color5;
}
"
tenHQCxe,125.166.9.4-/sdcard/Premium/useragent_ig.py.py,OBF-XIn,Python,Sunday 31st of March 2024 06:13:32 AM CDT,"# useragent
import random

class Useragent:
    def __init__(self) -> None:
        pass
        
    def useragent_api(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.bsh = 'in_ID'
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; {self.bsh}; 255777478)',
             f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
             f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; {self.bsh}; 255777478)',
            f'Instagram {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; {self.bsh}; 255777478)',
           ])
       )
        
    def useragent_api_threads(self):
        self.nexus = ['Galaxy Nexus', 'Nexus 10', 'Nexus 2', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 4', 'Nexus 5', 'phone/Nexus 5', 'Nexus 5X', 'Nexus 6', 'Nexus 7', 'Nexus 9', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus One', 'Nexus Player', 'Nexus Player', 'Nexus S', 'Nexus S', 'Nexus S 4G', 'nexus S', 'Nexus S', 'Nexus s', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S', 'Nexus S']
        self.micromax = ['Micromax 10', 'Micromax 1J', 'Micromax 86519', 'Micromax A064', 'Micromax_A064', 'Micromax A065', 'Micromax_A065', 'Micromax A066', 'Micromax_A066', 'Micromax A067', 'Micromax_A067', 'MICROMAX_A068', 'MICROMAX A068', 'Micromax A068', 'Micromax A069', 'Micromax_A069', 'Micromax A075', 'Micromax A082', 'Micromax_A082', 'Micromax A089', 'Micromax_A089', 'Micromax A091', 'Micromax A092', 'Micromax_A092', 'Micromax A093', 'Micromax_A093', 'Micromax A095', 'Micromax A096', 'Micromax_A101', 'Micromax A102', 'Micromax_A102', 'Micromax A104', 'Micromax a104', 'Micromax A105', 'Micromax_A105', 'Micromax A106', 'Micromax-A106', 'Micromax A108', 'Micromax_A109', 'Micromax A109', 'Micromax A110', 'Micromax_A110', 'Micromax A110Q', 'Micromax_A110Q', 'Micromax A111', 'Micromax A114', 'Micromax A114R', 'Micromax_A114R', 'Micromax A115', 'Micromax_A115', 'Micromax A116', 'Micromax_A116', 'Micromax A116i', 'Micromax_A116i', 'Micromax A117', 'Micromax_A117', 'Micromax A118R', 'Micromax A119', 'Micromax A120', 'Micromax A121', 'Micromax_A121', 'Micromax A15', 'Micromax A177', 'Micromax A190', 'Micromax_A190', 'Micromax A200', 'Micromax_A200', 'Micromax A21', 'Micromax A210', 'Micromax A24', 'Micromax_A24', 'Micromax A25 Smarty', 'Micromax A250', 'Micromax A255', 'Micromax_A255', 'Micromax A26', 'Micromax_A26', 'Micromax_A27', 'Micromax A27', 'Micromax_A28', 'Micromax A28/GRI40', 'Micromax A28', 'Micromax A290', 'Micromax A30', 'Micromax A300', 'Micromax A310', 'Micromax A311', 'Micromax A315', 'Micromax_A315', 'Micromax_A316', 'Micromax A316', 'Micromax_A34', 'Micromax A34', 'Micromax_A35', 'Micromax A35', 'Micromax A350', 'Micromax_A36', 'Micromax A36', 'Micromax_A37', 'Micromax A37', 'Micromax A37B', 'Micromax_A37B', 'Micromax A40', 'Micromax_A40', 'Micromax A46', 'Micromax_A46', 'Micromax A47', 'MicromaxA47', 'Micromax_A50', 'Micromax A50', 'Micromax A51', 'Micromax A52', 'Micromax A54', 'Micromax A56', 'Micromax_A57', 'Micromax A57', 'Micromax A58', 'Micromax_A58', 'Micromax A59', 'Micromax A60', 'Micromax A61', 'Micromax A62', 'Micromax_A62', 'Micromax A63', 'Micromax_A63', 'Micromax_A65', 'Micromax A65', 'Micromax_A66', 'Micromax A66', 'Micromax A67', 'Micromax A68', 'Micromax A69', 'Micromax_A69', 'Micromax_A70', 'Micromax A700', 'Micromax A71', 'Micromax_A71', 'Micromax A72', 'Micromax_A72', 'Micromax A73', 'Micromax_A74', 'Micromax A74', 'Micromax A75', 'Micromax_A76', 'Micromax A76', 'Micromax A77', 'Micromax A78', 'Micromax A79', 'en_us Micromax A80', 'Micromax A80', 'Micromax A82', 'Micromax_A82', 'Micromax A84', 'Micromax A85', 'Micromax A86', 'Micromax_A86', 'Micromax_A87', 'Micromax A87', 'Micromax A87 . Ninja 4.0', 'Micromax A88', 'Micromax_A88', 'Micromax A89', 'Micromax A90', 'Micromax A90s', 'MIcromax_A90s', 'Micromax A90S', 'Micromax A91', 'Micromax_A91', 'Micromax_A92', 'Micromax A92', 'MicromaxA93', 'Micromax A93', 'Micromax A94', 'Micromax_A94', 'Micromax A96', 'Micromax_A96', 'Micromax A97', 'Micromax_A99', 'Micromax A99', 'Micromax_AD3520', 'Micromax AD3520', 'Micromax AD3550', 'Micromax AD4500', 'Micromax_AD4500', 'Micromax AE90', 'Micromax AO5510', 'Micromax AQ5000', 'Micromax B4A', 'Micromax B5 Pro', 'B5Pro', 'Micromax_Bharat_5_Plus', 'Micromax Q402Plus', 'Micromax Q440', 'Micromax Bharat 5', 'Micromax Q4204', 'Micromax Bharat 5 Plus', 'Micromax Bharat 5 Pro', 'Micromax Bolt 3425', 'Micromax Bolt 2', 'Micromax Q402+', 'Micromax Q306', 'Micromax Q3001', 'Micromax Q301', 'Micromax Q303', 'Micromax Q324', 'Micromax Q326', 'Q327', 'Micromax Q327', 'Micromax Q3301', 'Micromax Q333', 'Micromax_Q333', 'Micromax Q338', 'Micromax Q346', 'Micromax Q354', 'Micromax Q357', 'Micromax Q383', 'Micromax_S302', 'Micromax S302', 'Micromax Q424', 'Micromax Q352', 'Micromax Q4101', 'Micromax C2A', 'Micromax C9', 'Micromax C1', 'Micromax C1A', 'Micromax C2APLS', 'Micromax Q4310', 'Micromax E4815', 'arm_64 Micromax E481', 'Micromax E481', 'Micromax E4816', 'Micromax Q462', 'Micromax Q463', 'Micromax E485', 'Micromax E484', 'Micromax AQ4501', 'Micromax AQ4502', 'A240', 'Micromax A240', 'Micromax Q391', 'Micromax E453', 'Micromax A107', 'Micromax HS2', 'Micromax HS1', 'Micromax_HS3', 'en Micromax_HS3', 'AQ5001', 'Micromax AQ5001', 'AQ5001 Canvas Power', 'Micromax Q392', 'Micromax Q465', 'Micromax Q461', 'Micromax Q350R', 'Micromax Q421', 'Micromax Q417', 'Micromax Q426', 'Micromax Q4260', 'Micromax E311', 'Micromax E352', 'Micromax E455', 'Micromax Q415', 'Micromax Q355', 'Micromax Q469', 'Micromax E451', 'Micromax E451', 'Micromax Q340', 'Micromax Q349', 'Micromax Q345', 'Micromax Q450', 'Micromax Q480', 'arm_64 Micromax Q480', 'Micromax Q380', 'Micromax Q3502', 'Micromax Q351', 'Micromax Q385', 'P70221', 'Micromax P681', 'MicromaxP802', 'Micromax Q427', 'Micromax_Q427', 'Micromax Q413', 'Micromax E313', 'Micromax D2', 'Micromax D200', 'Micromax_D200', 'Micromax D303', 'Micromax D304', 'Micromax_D304', 'Micromax D305', 'Micromax D306', 'Micromax D320', 'Micromax D321', 'Micromax D333', 'Micromax D340', 'Micromax D7517', 'Micromax DM5003', 'Micromax E353', 'Micromax E457', 'Micromax E458', 'Micromax E460', 'Micromax E471', 'Micromax E4817', 'Micromax E482', 'Micromax E483', 'Micromax E5018M', 'Micromax EG111', 'Micromax EG116', 'micromax F', 'micromax F189', 'Micromax F601', 'MicromaxF666', 'Micromax IN', 'Micromax E7533', 'Micromax E6523', 'IN_2b', 'IN_Note1', 'MICROMAX IN1', 'N8216', 'N8301', 'ione note', 'MICROMAX ione note', 'Micromax N4120', 'Micromax N8202', 'Micromax Ninja', 'Micromax Nitro', 'Micromax Note 1+', 'Micromax Note 5', 'Micromax Note3', 'Micromax NX', 'Micromax P001', 'Micromax P250(Funbook)', 'Micromax P255', 'Micromax P256', 'xx Micromax P275', 'Micromax_P275', 'Micromax P275', 'Micromax P280', 'Micromax P290', 'Micromax P310', 'Micromax P350', 'xx Micromax P350', 'Micromax P360', 'Micromax P362', 'Micromax P365', 'Micromax P410', 'Micromax P410i', 'Micromax_P410i', 'Micromax P420', 'Micromax P469', 'Micromax P470', 'MicromaxP480', 'Micromax P500(Funbook)', 'Micromax P560', 'Micromax P580', 'Micromax P580i', 'Micromax P600', 'Micromax P650', 'Micromax P650E', 'Micromax P660', 'Micromax P660', 'Micromax_P666', 'Micromax P666', 'MicromaxP680', 'Micromax P690', 'Micromax P701', 'MicromaxP702', 'Micromax P810', 'en Micromax Q300', 'Micromax_Q300', 'Micromax Q323', 'Micromax_Q323', 'Micromax Q325', 'Micromax_Q325', 'Micromax Q331', 'Micromax_Q331', 'Micromax Q332', 'Micromax_Q332', 'Micromax Q334', 'Micromax Q335', 'Micromax_Q335', 'Micromax Q336', 'Micromax_Q336', 'Micromax Q341', 'Micromax Q343', 'Micromax Q348', 'Micromax_Q353', 'en Micromax_Q353', 'Micromax_Q353P', 'Micromax Q3551', 'Micromax Q3555', 'Micromax Q361', 'Micromax Q370', 'Micromax_Q370', 'Micromax Q371', 'Micromax_Q371', 'Micromax Q375', 'Micromax_Q375', 'Micromax Q379', 'Micromax Q381', 'Micromax Q382', 'Micromax Q386', 'Micromax Q394', 'Micromax_Q394', 'Micromax Q395', 'Micromax Q397', 'Micromax Q398', 'arm Micromax Q398', 'Micromax Q400', 'Micromax_Q400', 'Micromax Q4002', 'en Micromax Q4002', 'Micromax Q401', 'Micromax Q402', 'Micromax Q402 Ultra', 'Micromax Q404', 'Micromax Q411', 'Micromax_Q411', 'Micromax Q412', 'Micromax Q414', 'Micromax Q416', 'Micromax Q419', 'Micromax Q4201', 'Micromax Q422', 'Micromax Q4220', 'Micromax Q423', 'Micromax Q428', 'Micromax_Q428', 'Micromax Q429', '720X1280 Micromax Q4309', 'Micromax Q4312', 'en_US Micromax Q437', 'Micromax Q440Plus', 'Micromax Q454', 'Micromax Q470', 'Micromax Q479', 'Micromax Q491', 'Micromax_Q491', 'Micromax Q502+', 'Micromax Q666', 'Micromax Q67', 'micromax Q68', 'micromax Q78', 'Micromax S300', 'Micromax_S300', 'Micromax S301', 'Micromax_S301', 'Micromax Q4311', 'Micromax Q4601', 'Micromax Q409A', 'Micromax Q409', 'Micromax Q452', 'Micromax Unite 3', 'Micromax Unite 2', 'Micromax Unite 2 A106', 'Micromax Q372', 'Micromax V89', 'Micromax Q4001', 'Micromax Q4202', 'Micromax Q4251', 'arm Micromax Q4251', 'Micromax W5509', 'Micromax X5098', 'Micromax-Xzoom A52', 'YU5530', 'YU5040', 'Micromax YU5900', 'YU5012', 'Micromax Z59']
        self.onpls = ['NE2213', 'NE2217', 'NE2215', 'NE2210', 'NE2210', 'CPH2423', 'CPH2411', 'CPH2417', 'CPH2413', 'CPH2415', 'CPH2449', 'CPH2487', 'ONE A2003', 'ONE A2003', 'ONE A2001', 'ONE A2005', 'ONEPLUS A3003', 'ONEPLUS A3000', 'ONEPLUS A3010', 'ONEPLUS A5000', 'ONEPLUS A5000', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A5010', 'ONEPLUS A6003', 'ONEPLUS A6000', 'ONEPLUS A6010', 'ONEPLUS A6013', 'ONEPLUS A6010', 'GM1900', 'GM1901', 'GM1903', 'GM1917', 'GM1913', 'GM1911', 'GM1910', 'GM1915', 'GM1910', 'HD1901', 'HD1903', 'HD1900 Flow', 'HD1905', 'HD1900', 'HD1907', 'HD1911', 'HD1913', 'HD1910', 'GM1925', 'HD1925', 'GM1920', 'IN2013', 'IN2015', 'IN2010', 'IN2010', 'IN2017', 'IN2019', 'IN2023', 'IN2025', 'IN2020', 'OnePlus8Pro', 'KB2005', 'KB2001', 'KB2007', 'KB2003', 'KB2000', 'OnePlus 8T 5G', 'LE2115', 'LE2113', 'LE2111', 'LE2110', 'LE2120', 'LE2125', 'LE2123', 'LE2121', 'LE2127', 'OnePlus9Pro', 'LE2101', 'LE2100', 'MT2111', 'MT2110', 'ONEPLUS A19677', 'ONEPLUS A2345', 'Oneplus A31', 'Oneplus A3331', 'ONEPLUS A35904', 'ONEPLUS A37000', 'ONEPLUS A3EVB', 'ONEPLUS A62322', 'ONEPLUS A64794', 'ONEPLUS A65369', 'ONEPLUS A68333', 'ONEPLUS A70458', 'ONEPLUS A70791', 'ONEPLUS A78637', 'ONEPLUS A80828', 'ONEPLUS A83306', 'ONEPLUS A87046', 'ONEPLUS A90641', 'Oneplus A99831', 'PGKM10', 'PGKM10', 'PHK110', 'PHK110', 'PGP110', 'PGP110', 'PGZ110', 'ONEPLUS KB2023', 'OnePlus Nord', 'Oneplus Nord 2', 'DN2103', 'DN2101', 'CPH2399', 'CPH2401', 'AC2001', 'AC2003', 'IV2201', 'CPH2409', 'CPH2381', 'CPH2465', 'EB2103', 'EB2101', 'EB2101', 'BE2025', 'BE2026', 'BE2029', 'Nord N10 5G', 'BE2028', 'BE2013', 'BE2011', 'BE2012', 'CPH2459', 'GN2200', 'CPH2469', 'DE2118', 'DE2117', 'A0001', 'ONE E1001', 'ONE E1003', 'ONE E1001', 'ONE E1005']
        self.oppo = [""CPH1869"", ""CPH1929"",""CPH2107"", ""CPH2238"", ""CPH2389"",""CPH2401"", ""CPH2407"", ""CPH2413"", ""CPH2415"", ""CPH2417"", ""CPH2419"", ""CPH2455"", ""CPH2459"", ""CPH2461"", ""CPH2471"", ""CPH2473"", ""CPH2477"", ""CPH8893"", ""CPH2321"", ""CPH2341"", ""CPH2373"", ""CPH2083"", ""CPH2071"", ""CPH2077"", ""CPH2185"", ""CPH2179"", ""CPH2269"", ""CPH2421"", ""CPH2349"", ""CPH2271"", ""CPH1923"", ""CPH1925"", ""CPH1837"", ""CPH2015"", ""CPH2073"", ""CPH2081"", ""CPH2029"", ""CPH2031"", ""CPH2137"", ""CPH1605"", ""CPH1803"", ""CPH1853"", ""CPH1805"", ""CPH1809"", ""CPH1851"", ""CPH1931"", ""CPH1959"", ""CPH1933"", ""CPH1935"", ""CPH1943"", ""CPH2061"", ""CPH2069"", ""CPH2127"", ""CPH2131"", ""CPH2139"", ""CPH2135"", ""CPH2239"", ""CPH2195"", ""CPH2273"", ""CPH2325"", ""CPH2309"", ""CPH1701"", ""CPH2387"", ""CPH1909"", ""CPH1920"", ""CPH1912"", ""CPH1901"", ""CPH1903"", ""CPH1905"", ""CPH1717"", ""CPH1801"", ""CPH2067"", ""CPH2099"", ""CPH2161"", ""CPH2219"", ""CPH2197"", ""CPH2263"", ""CPH2375"", ""CPH2339"", ""CPH1715"", ""CPH2385"", ""CPH1729"", ""CPH1827"", ""CPH1938"", ""CPH1937"", ""CPH1939"", ""CPH1941"", ""CPH2001"", ""CPH2021"", ""CPH2059"", ""CPH2121"", ""CPH2123"", ""CPH2203"", ""CPH2333"", ""CPH2365"", ""CPH1913"", ""CPH1911"", ""CPH1915"", ""CPH1969"", ""CPH2209"", ""CPH1987"", ""CPH2095"", ""CPH2119"", ""CPH2285"", ""CPH2213"", ""CPH2223"", ""CPH2363"", ""CPH1609"", ""CPH1613"", ""CPH1723"", ""CPH1727"", ""CPH1725"", ""CPH1819"", ""CPH1821"", ""CPH1825"", ""CPH1881"", ""CPH1823"", ""CPH1871"", ""CPH1875"", ""CPH2023"", ""CPH2005"", ""CPH2025"", ""CPH2207"", ""CPH2173"", ""CPH2307"", ""CPH2305"", ""CPH2337"", ""CPH1955"", ""CPH1707"", ""CPH1719"", ""CPH1721"", ""CPH1835"", ""CPH1831"", ""CPH1833"", ""CPH1879"", ""CPH1893"", ""CPH1877"", ""CPH1607"", ""CPH1611"", ""CPH1917"", ""CPH1919"", ""CPH1907"", ""CPH1989"", ""CPH1945"", ""CPH1951"", ""CPH2043"", ""CPH2035"", ""CPH2037"", ""CPH2036"", ""CPH2009"", ""CPH2013"", ""CPH2113"", ""CPH2091"", ""CPH2125"", ""CPH2109"", ""CPH2089"", ""CPH2065"", ""CPH2159"", ""CPH2145"", ""CPH2205"", ""CPH2201"", ""CPH2199"", ""CPH2217"", ""CPH1921"", ""CPH2211"", ""CPH2235"", ""CPH2251"", ""CPH2249"", ""CPH2247"", ""CPH2237"", ""CPH2371"", ""CPH2293"", ""CPH2353"", ""CPH2343"", ""CPH2359"", ""CPH2357"", ""CPH2457"", ""CPH1983"", ""CPH1979""]
        self.vivo = ['vivo 1002T', 'Vivo 1605', 'vivo 1730', 'vivo 1809', 'vivo_1820', 'vivo 1835', 'vivo 1914', 'vivo 2010', 'vivo 2019', 'vivo 2019', 'vivo 2019', 'vivo 2023', 'vivo 2027', 'vivo 3969', 'VIVO 5', 'Vivo 6', 'Vivo 7 Pro', 'Vivo 8', 'Vivo 93K Prime', 'vivo A5 ', 'vivo a54', 'Vivo A54', 'vivo a57', 'Vivo A87', 'VIVO A94', 'VIVO AIR', 'VIVO C8818', 'vivo E1', 'vivo E3', 'vivo E3', 'vivo E5', 'Vivo EGO', 'V1962BA', 'vivo h5', 'V1824A', 'V1824A', 'V1824BA', 'V2217A', 'V2217A', 'V2218A', 'V2218A', 'V2218A', 'V2243A', 'V1955A', 'I1927', 'I1928', 'V2024A', 'V2025A', 'V2025A', 'V2049A', 'V2049A', 'I2009', 'I2012', 'I2012', 'V2136A', 'V2136A', 'V2141A', 'V2171A', 'I2017', 'V2172A', 'V2172A', 'I2022', 'I2019', 'I2019', 'I2201', 'V1914A', 'V1914A', 'V1981A', 'V2055A', 'V2118A', 'V2157A', 'V2157A', 'V2154A', 'V2196A', 'V2196A', 'V2199A', 'V2231A', 'V2238A', 'V1936AL', 'V1936A', 'V1922A', 'V1922A', 'V1922A ', 'V1916A', 'V2023A', 'V2023A', 'VIVO V2023A', 'V2065A', 'V2061A', 'V2061A', 'V2143A', 'V2106A', 'V2165A', 'V2165A', 'V2180GA', 'V1986A', 'V2012A', 'V2012A', 'V2073A', 'V2073A', 'I2011', 'V2148A', 'I2018', 'V1919A', 'V2131A', 'V2220A', 'I2202', 'I2206', 'I2203', 'I2202', 'I2127', 'I2202', 'I2208', 'I2208', 'I2126', 'I2126', 'I2126', 'V2164KA', 'V2164KA', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'VIVO IV', 'Vivo J5', 'vivo 1805', 'vivo 1805', 'vivo NEX', 'V1923A', 'vivo 1912', 'V1923A', 'vivo 1912', 'vivo 1913', 'V1924A', 'V1924A', 'vivo 1913', 'V1950A', 'V1950A', 'vivo NEX A', 'vivo NEX A', 'vivo 1813', 'V1821A', 'V1821A', 'vivo NEX S', 'vivo NEX S', 'Vivo ONE', 'Vivo ONE', 'PA2170', 'vivo PD1628F_EX', 'vivo PD1709', 'vivo PD1709F_EX', 'vivo PD1709F_EX', 'vivo PD1728', 'vivo PD1728', 'vivo PD1832F_EX', 'vivo PD2046F_EX', 'vivo PD2050F_EX', 'vivo PD2055F_EX', 'vivo PD2059F_EX', 'Vivo S', 'V1831A', 'V1831A', 'VIVO S1', 'Vivo S1 Prime', 'V1832A', 'V1832T', 'V2121A', 'V2121A', 'V2130A', 'V2130A', 'Vivo S11', 'Vivo S11 ', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S11t', 'vivo S12', 'V2162A', 'Vivo S13', 'V2203A', 'V2207A', 'V2190A', 'V2244A', 'vivo S1Pro', 'Vivo S20 ', 'Vivo S21 ', 'Vivo S31', 'Vivo S4', 'Vivo S40', 'Vivo S41 /MMB439M', 'V1932A', 'vivo S6', 'V1962A', 'vivo S6T', 'V2020CA', 'V2020A', 'Vivo S76', 'V2031EA', 'vivo S7i(t)', 'vivo S7i(t)', 'vivo S7i(t)', 'V2080A', 'vivo S7t', 'vivo_S7t', 'vivo S7t', 'S7t 5G', 'vivo S7w', 'vivo S8', 'vivo S9', 'vivo S9', 'vivo S9', 'V2072A', 'V2048A', 'vivo S9t', 'V2168', 'V2168', 'V2153', 'V2153', 'V2150', 'V2151', 'V2151', 'V2151', 'V2143', 'vivo TD1602_EX', 'vivo U1', 'vivo 1916', 'vivo 1916', 'vivo 1921', 'V1941A', 'V1941A', 'V1928A', 'vivo V1', 'vivo V1', 'vivo V10', 'Vivo V10', 'VIVO V11', 'Vivo V11', 'vivo 1804', 'vivo 1804', 'vivo 1806', 'vivo 1806', 'vivo v11pro', 'vivo 1819', 'vivo 1818', 'vivo 1818', 'vivo 1920', 'vivo 1919', 'vivo 1907', 'vivo 1907', 'vivo 1907_19', 'vivo 1910', 'vivo 1909', 'vivo 1910', 'vivo 1933', 'vivo 1933', 'vivo V1907', 'vivo v19neo', 'vivo V1Max', 'vivo V1Max', 'vivo V2', 'V2040', 'vivo 2018', 'vivo 2018', 'V2022', 'Vivo V20A', 'Vivo V20G', 'V2066', 'V2108', 'V2050', 'V2050', 'V2050', 'V2061', 'V2055', 'Vivo V21S', 'V2130', 'V2132A', 'V2116', 'V2115', 'V2116', 'V2116', 'V2126', 'V2126', 'V2228', 'V2228', 'V2158', 'V2158', 'V2202', 'V2202', 'V2201', 'V2246', 'V2230', 'V2230', 'V2237', 'vivo V3', 'vivo V3', 'vivo V3Max A', 'vivo V3Max L', 'vivo v30', 'vivo v31', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3L', 'vivo V3M A', 'vivo V3M A', 'vivo V3MA', 'vivo_V3Max', 'vivo v45', 'vivo 1601', 'vivo V5', 'vivo 1609', 'vivo 1611', 'Vivo V51', 'Vivo V54', 'vivo 1612', 'vivo 1713', 'vivo V5S A', 'vivo 1718', 'vivo 1716', 'vivo Y79A', 'vivo Y79A', 'V2166BA', 'Vivo V8', 'vivo 1723', 'vivo V9 mini', 'vivo 1851', 'VIVO V9Pro', 'vivo 1851', 'vivo 1727', 'Vivo X', 'V2178A', 'V2229A', 'V2170A', 'V2170A', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay3S', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5A', 'vivo Xplay5S', 'vivo Xplay5S', 'vivo Xplay6', 'vivo Xplay6L', 'vivo Xplay6', 'vivo Xplay6', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X710L', 'vivo X1', 'vivo X1', 'vivo X1', 'vivo X1', 'Vivo X11', 'vivo X1S', 'vivo X1S', 'vivo X1S', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1St', 'vivo X1W', 'vivo X1w', 'VIVO X2', 'VIVO X2', 'VIVO_X2', 'vivo X20', 'vivo X20A', 'vivo X20Plus A', 'vivo 1720', 'vivo X20Plus UD', 'vivo X20Plus UD', 'vivo X21', 'vivo X21A', 'vivo X21UD A', 'vivo X21i', 'vivo X21i A', 'vivo X21i', 'vivo X21i A ', 'V1814A', 'V1814T', 'V1814T', 'V1814A', 'V1809A', 'V1809A', 'V1816A', 'V1809T', 'V1816T', 'V1829A', 'V1838A', 'V1838T', 'V1829T', 'V1836A', 'V1836A', 'V1836T', 'vivo X27Pro', 'V1938CT', 'V1938T', 'V1938T', 'vivo X3F', 'vivo X3F', 'vivo X3F', 'vivo X3L', 'vivo X3L', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3S W', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3t', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'vivo X3V', 'Vivo X40', 'vivo X5L', 'vivo X5', 'vivo X5L', 'vivo X5Pro D', 'vivo X5Pro L', 'vivo X5Pro V', 'vivo X5Pro D', 'vivo X5Pro D', 'V2001A', 'V2001A', 'vivo 2004', 'vivo 2005', 'vivo 2005', 'V1937', 'vivo 1937', 'V1937', 'V1937', 'vivo 2006', 'vivo 2006', 'V2005A', 'V2011A', 'X50 Pro+', 'V1930', 'V1930', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X510t', 'vivo X520L', 'vivo X5F', 'vivo X5M', 'vivo X5M', 'vivo X5M', 'vivo X5Max ', 'vivo X5Max L', 'vivo X5Max L', 'vivo X5Max S', 'vivo X5Max V', 'vivo X5S L', 'vivo X5S L', 'vivo X5V', 'vivo X5V', 'vivo X5V', 'vivo X6D', 'vivo X6A', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus L', 'vivo X6Plus D', 'vivo X6Plus A', 'vivo X6Plus D', 'vivo X6Plus L', 'V2046A', 'V2059A', 'V2046A', 'V2045', 'V2046', 'V2047A', 'V2056A', 'V2085A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6S A', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus D', 'vivo X6SPlus A', 'vivo X7L', 'vivo X7Plus', 'vivo X7Plus', 'V2133A', 'V2104', 'V2104', 'V2105', 'V2134A', 'V2105', 'V2145A', 'V2114', 'V2145A', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'vivo X710F', 'V2144', 'V2183A', 'V2144', 'V2208', 'V2185A', 'V2145', 'V2185A', 'Vivo X83', 'vivo X9', 'vivo X9L', 'vivo X9', 'vivo X9', 'vivo X9Plus', 'vivo X9Plus L', 'V2241A', 'V2242A', 'V2242A', 'V2227A', 'vivo X9i', 'vivo X9i', 'vivo X9i', 'vivo X9s', 'vivo X9s L', 'vivo X9s Plus', 'vivo X9s Plus', 'vivo X9s Plus L', 'vivo X9s Plus', 'VIVO XL', 'vivo Xplay', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'vivo Xshot', 'V2203', 'V2221', 'Vivo y1', 'Vivo Y1', 'V2168A', 'V2168A', 'vivo 1906', 'V2028', 'vivo Y11t', 'vivo Y11t', 'vivo Y11t', 'vivo 1904', 'V2163A', 'V2102', 'V2102', 'vivo 2007', 'vivo 2007', 'Vivo Y12I Pro', 'V2026', 'V2042', 'V2033', 'V2039', 'V2069', 'V2026_21', 'vivo Y13L', 'vivo Y13', 'vivo Y13L', 'vivo Y13L', 'vivo Y13i', 'vivo_Y13i', 'vivo Y13iL', 'vivo Y13iL', 'vivo Y13T', 'vivo Y13T', 'vivo 1901', 'vivo Y15T', 'vivo Y15T', 'V2134', 'V2147', 'V2147', 'V2212', 'V2120', 'V2204', 'V2214', 'V2204', 'vivo 1902', 'vivo 1902_19', 'VIVO 1902', 'vivo Y17T', 'vivo Y17T', 'vivo_Y17T', 'vivo Y17T', 'vivo Y17W', 'vivo Y17W', 'vivo Y17W', 'vivo Y18L', 'vivo Y18L', 'vivo Y18L', 'vivo 1915', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'vivo Y19t', 'Vivo Y1i', 'vivo 2015', 'vivo 2015', 'V2029', 'V2027', 'V2043_21', 'V2101', 'V2070', 'V2054', 'V2052', 'V2037', 'V2032', 'V2038', 'V2038', 'V2129', 'V2129', 'V2111', 'V2149', 'V2140', 'V2140', 'V2152', 'V2152', 'V2110', 'V2110', 'V2131', 'V2135', 'V2207', 'vivo Y22iL', 'vivo Y22iL', 'V2206', 'V2206', 'vivo Y23L', 'vivo Y23L', 'vivo y23l', 'vivo Y23L', 'vivo Y23L', 'vivo Y23L', 'vivo 1613', 'vivo Y27', 'vivo Y27L', 'vivo Y27', 'vivo Y28', 'vivo Y28', 'vivo Y28L', 'vivo Y28L', 'vivo Y29L', 'vivo Y29L', 'vivo Y29L', 'V1901A', 'V1901A', 'V1901A', 'V1901T', 'V1930A', 'vivo 1938', 'V2034A', 'V2036A', 'V2099A', 'V2099A', 'V2160', 'V2160', 'V2160', 'V2066BA', 'V2066A', 'Y30g', 'Vivo Y30S', 'vivo Y31L', 'V2068', 'V2054A', 'V2068A', 'V2068', 'V2158A', 'Vivo Y32', 'V2180A', 'V2057', 'V2109', 'V2166A', 'V2166A', 'V2146', 'V2205', 'V2205', 'vivo Y37A', 'vivo Y37', 'V2044', 'vivo Y3t', 'vivo Y3t', 'vivo Y3t', 'vivo y41', 'vivo Y5 ', 'Vivo Y5', 'vivo 1935', 'VIVO Y50(2021)', 'V2023EA', 'Y50t', 'V2035', 'vivo Y51L', 'vivo Y51A', 'V2030', 'vivo 1707', 'V2031_21', 'vivo Y51t L', 'vivo Y51t L', 'vivo Y51t L', 'V2053', 'V2057A', 'vivo Y53', 'vivo 1606A', 'vivo Y53n', 'V2058', 'V2123A', 'V2069A', 'V2045A', 'V2045A', 'vivo Y55A', 'V2127', 'V2127', 'vivo 1603', 'vivo Y55n', 'vivo 1610', 'V2164A', 'V2164A', 'V1934A', 'V2006', 'vivo Y613', 'vivo Y613', 'vivo Y613F', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y622', 'vivo Y623', 'vivo Y623', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y627', 'vivo Y628', 'vivo Y628', 'vivo 1719', 'vivo Y66', 'vivo Y66L', 'vivo Y66i A', 'vivo Y67', 'vivo Y67A', 'vivo Y67L', 'vivo Y685', 'vivo 1714', 'vivo Y69A', 'V2002A', 'V2002A', 'vivo Y71A', 'vivo 1724', 'vivo Y71A', 'vivo 1801', 'V2041', 'V2060', 'V2102A', 'V1731CA', 'vivo Y73', 'Vivo Y73 /MMB239M', 'V2059', 'V2031A', 'V2164PA', 'V2117', 'vivo Y75A', 'V2142', 'V2142', 'vivo Y75s', 'vivo Y75s', 'vivo Y75S', 'vivo Y75s', 'V2124', 'V2156A', 'V2219A', 'V2219A', 'V2169', 'V2169', 'V1913A', 'vivo 1808i', 'vivo 1803', 'vivo 1803', 'vivo 1812', 'vivo Y81S', 'V1732A', 'V1732T', 'vivo Y83A', 'vivo 1802', 'vivo Y83A', 'vivo Y83A', 'vivo 1726', 'Vivo Y83I', 'vivo Y85A', 'vivo Y85', 'Vivo Y85i', 'Vivo Y86', 'V1730EA', 'vivo v1730ea', 'vivo 1908', 'vivo 1823', 'vivo 1908_19', 'vivo 1817', 'vivo 1811', 'vivo Y913', 'vivo Y913', 'vivo Y91C', 'vivo 1820', 'vivo 1816', 'vivo Y923', 'vivo Y923', 'vivo Y927', 'vivo Y927', 'vivo Y928', 'vivo Y928', 'vivo Y928', 'vivo 1814', 'V1818A', 'V1818A', 'vivo 1814', 'vivo Y937', 'vivo Y937', 'vivo Y937', 'V1818CT', 'V1818CA', 'vivo 1807', 'vivo Y95', 'V1813A', 'V1813T', 'V1813A', 'vivo Y97', 'V1945A', 'V1801A0', 'vivo Z1', 'vivo 1918', 'vivo 1951', 'vivo 1951', 'VIVO Z1Pro', 'vivo 1918', 'vivo 1918 Flow', 'Vivo Z10', 'vivo Z1i', 'V1730DA', 'V1730DT', 'vivo Z1i', 'vivo_1951', 'vivo 1917', 'V1813BA', 'V1813BT', 'V1813BT', 'Vivo Z34', 'vivo Z3x', 'V1730GA', 'vivo Z3x', 'vivo Z3x', 'V1921A', 'V1911A', 'V1911A', 'V1911A', 'V1990A', 'V1990A', 'V1963A', 'V1963A']
        self.infinix = [""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B"", ""Infinix X652B"", ""Infinix X680"", ""Infinix X690"", ""Infinix X625B"", ""Infinix X655"", ""Infinix X680B""]
        self.opp = random.choice([""OP4F97"", ""OP4BA5L1"", ""OP664D1"", ""OP5F11L1"", ""OP2A92"", ""OP8F17"", ""OP8F31"", ""OP4C9E1"", ""OP5B31"", ""OP4BA6L1"", ""OP2B87"", ""OP6F21"", ""OP6C8E1"", ""OP8F11"", ""OPPOA16"", ""OPPOA15"", ""OPPOA11"", ""OPPOA73"", ""OPPOA37"", ""OPPOA53"", ""OPPOA33"", ""OPPOA93"", ""OPPOA35"", ""OPPOA83"", ""OPPOA57"", ""OPPOA71"", ""OPPOA39"", ""OPPOA3"", ""OPPOA51"", ""OPPOA27"", ""OPPOA79""])
        self.trek = random.choice([""mt6769"", ""mt6768"", ""mt6767"", ""mt6765"", ""mt6763"", ""mt6757"", ""mt6755"", ""mt6753"", ""mt6739"", ""mt6737"", ""mt6735"", ""mt6595"", ""mt6582"", ""mt6572"", ""mt6571"", ""mt6570"", ""mt8563"", ""mt8167"", ""mt8163"", ""mt8135"", ""mt8127"", ""mt8125"", ""mt7623"", ""mt6797"", ""mt6592"", ""mt6590"", ""mt6580"", ""mt6573"", ""mt6575"", ""mt6260"", ""mt6236""])
        self.igversi = (""100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,100.0.0.17.129,79.0.0.21.101,78.0.0.11.104,77.0.0.20.113,76.0.0.15.395,75.0.0.23.99,74.0.0.21.99,73.0.0.22.185,72.0.0.21.98,71.0.0.18.102,70.0.0.22.98,69.0.0.30.95,68.0.0.11.99,67.0.0.25.100,66.0.0.11.101,65.0.0.12.86,64.0.0.14.96,63.0.0.17.94,62.0.0.19.93,61.0.0.19.86,60.1.0.17.79,59.0.0.23.76,58.0.0.12.73,57.0.0.9.80,56.0.0.13.78,55.0.0.12.79,54.0.0.14.82,53.0.0.13.84,52.0.0.8.83,51.0.0.20.85,50.1.0.43.119,271.1.0.21.84,131.0.0.23.11,130.0.0.31.12,128.0.0.26.12,126.0.0.25.12,125.0.0.20.12,124.0.0.17.47,123.0.0.21.11,122.0.0.29.23,120.0.0.29.11,119.0.0.33.14,118.0.0.28.12,117.0.0.28.12,115.0.0.26.11,114.0.0.38.12,113.0.0.39.12,112.0.0.29.12,111.1.0.25.15,110.0.0.16.11,109.0.0.18.12,108.0.0.23.11,107.0.0.27.12,106.0.0.24.11,105.0.0.18.11,104.0.0.21.11,103.1.0.15.11,102.0.0.20.11,101.0.0.15.12,100.0.0.17.12,99.0.0.32.182,98.0.0.15.119,97.0.0.32.119"").split(',')
        self.dix = random.choice(self.igversi)
        self.kode = random.choice(['104766893','104766900','102221278','104766888','105842053','93117670','94080607','96794592','102221279','100986894','ru_RU','94080606','103516660','98288242','103516666','103516653','uk_UA','96794590','100986893','102221277','95414344','99640920','99640911','96794591','ru_UA','99640905','100986890','107092313','99640900','93117667','100521966','90841939','98288239','89867440','105842051','de_DE','96794584','105842050','en_US','pt_PT','109556223','107092318','en_GB','108357722','112021130','107092322','119104798','108357720','119104802','112021131','100986892','113249569','107104231','fr_FR','pt_BR','109556226','116756948','113249553','113249561','110937441','118342010','120662545','117539703','119875222','110937448','121451799','115994877','108357718','120662547','107608058','122206624','95414346','107092308','112021128','90841948','119875229','117539698','120662550','en_NZ','123103748','91882538','121451810','91882537','118342006','113948109','122338251','110937453','es_US','118342005','121451793','109556219','119875225','en_CA','109556220','117539695','115211358','91882539','119104795','89867442','94080603','164094539','175574628','185203690','188791648','188791674','187682694','188791643','177770724','192992577','180322810','195435560','196643820','196643821','188791637','192992576','196643799','196643801','196643803','195435546','194383411','197825254','197825260','197825079','171727793','197825112','197825012','197825234','179155086','192992563','197825268','166149669','192992565','198036424','197825223','183982969','199325909','199325886','199325890','199325911','197825118','127049003','197825169','197825216','197825127','200395960','179155096','199325907','200396014','188791669','197825133','170693926','200396005','171727780','201577064','201576758','201577192','201775949','201576944','201775970','143631574','126223520','201775951','167338518','144612598','170693940','201775813','200395971','201775744','201775946','202766609','145652094','202766591','202766602','203083142','179155088','202766608','199325884','180322802','202766603','195435547','165030894','201576967','201775904','194383424','197347903','202766610','185203693','201576898','204019468','187682682','204019456','201775901','204019471','204019454','204019458','202766601','204019452','173238721','204019466','148324036','202766581','158441904','201576903','205280538','205280529','201576813','173238729','141753096','205280531','163022072','201576887','163022088','141753091','148324051','205280528','154400383','205280537','201576818','157405371','205858383','201576811','165031093','187682684','145652090','206670917','185203686','192992561','183982986','206670927','150338061','183982962','127049016','175574603','155374054','205858247','135374896','206670920','169474958','206670926','160497905','161478672','192992578','206670929','131223243','206670916','142841919','187682681','171727795','151414277','206670922','160497915','207505137','165030898','208061741','208061688','208180365','208061674','197825052','147375133','208061744','196643798','208061725','122338247','157536430','208061728','209143963','208727155','209143726','205280539','209143903','209143970','181496409','208061739','209143957','210180522','210180512','209143881','209143712','180322805','210180521','195435561','210370119','210180523','210180493','175574596','210180510','210180480','210180513','210180517','176649504','177770663','210180479','211114117','210908379','206670921','211114134','183982943','211399345','211399342','211399332','201775962','211574187','211574249','210180519','167338559','185203649','124583960','211399337','211399335','197825163','166149717','211399336','212063371','211399329','209143954','210180482','168361634','212214017','209143867','211399341','211399340','212214027','195435510','122338243','139237670','152367502','212676872','212676898','212676875','212676895','212676901','209823384','212676869','196643822','212676878','213367980','213368005','212676886','213558743','209143913','212214039','158441917','174081672','213558750','201775966','188791681','185203705','143631575','161478664','214245350','161478663','212676881','213558770','214245346','138226752','214245221','214245182','214245206','214245218','214245354','214245295','214245199','214245304','214245280','214446313','214245187','214245288','214139002','202766605','214245319','214646783','158441914','215246048','195435544','208061677','215464400','128676146','215464389','215464385','215464390','215464398','182747397','215464393','216233197','201775791','216817344','215464395','216817286','185203642','164094529','216817305','215464401','162439029','215464382','216817280','216817331','214330969','216817299','216817357','217948981','217948980','217948956','217948959','217948968','216817296','217948952','217948982','216817269','219308759','219308726','182747387','219308721','219308754','219308763','176649435','183982982','219909486','127049038','219308730','221134012','221134032','221134009','221134037','194383426','221134029','221134005','221134018','145652093','225283632','165031108','225283625','224652582','139906580','225283628','225283624','226142579','225283634','225283631','226493211','225283623','185203672','156514151','218793478','225283621','227299063','225283627','227299064','227299021','227299027','227544546','227299041','227299060','227299012','228970707','228970705','227299005','228970687','228970683','228970694','228970710','228970689','160497904','195435540','129611419','229783842','230291708','228970681','148324047','230877709','231192211','230877674','230877705','230877678','211399328','209143896','230877713','194383428','230877689','221134002','231457747','208061721','230877671','230877668','232868027','232088496','185203706','232868005','232867964','232868001','232868015','232868031','232867959','232868009','164094526','232867941','234041364','182747399','232868024','232867949','234847239','234847238','234847234','162439040','234847229','234847230','181496427','234847240','232867993','195435558','232867967','232867997','234847227','235871830','221133998','236572344','236572377','153386780','236572337','236572349','236572372','234847226','236572383','237507050','238093993','238093948','238093954','238093999','238093982','239490565','239490555','238093946','238093966','239490563','239490550','239974660','240726416','239490568','240726484','240726452','239490551','239490548','240726426','240726476','240726491','240726471','241043882','241114613','236572331','241267273','240726407','241456456','241267278','241267269','241114619','241456445','241456451','242168941','242168928','242168931','242168939','242168925','240726436','242375239','144722090','242168935','242290370','157405369','242168933','242290355','242703240','242807362','242168923','242168943','242991209','243646252','243646269','242991200','243711120','243646267','243711093','243975802','243646263','243646248','243646255','244167578','128676156','194383413','243975835','244390417','244390338','245196084','245196061','240726392','245196055','243646273','245196082','245196063','245196070','245666450','245466705','245870319','245870301','245870347','245196087','246889064','246889072','246889073','246889074','246889065','247146500','246889063','245870262','247370962','247146481','246889068','246889062','247541884','247541831','247370955','247370942','247720736','247720751','248310216','248310220','248310208','247720744','248399342','248310210','247720747','248310206','248717751','248310212','248310221','248823392','248583561','248310205','248899028','248955251','248955247','249178904','248955244','249507608','249507582','249507588','249507585','248955240','249507607','249507592','249810008','249966137','249507610','249966081','249966100','249507599','249966140','249810004','123790722','250188776','249628096','250188788','250742103','250742113','250742102','250877984','250742105','250742111','251048681','250742107','250742115','251048695','251304696','251304682','251524431','251530710','251304689','251524420','251524409','251524390','250742101','251048673','252055918','252055945','251920416','252055944','252055925','252239038','252055936','252055915','252055948','252390568','252390583','252580134','252740497','252740485','252740490','253120615','253325372','253325384','253325385','253447816','253146263','253120607','253325374','253120598','253325371','253447808','253447809','253325378','253447814','253447807','253447811','253447817','253447813','181496411','253447806','255191971','255013798','255777478','255777471','255777474','255777472','255959637','255777477','255959614','255959635','256099199','256099204','150338064','256099153','256099205','256099156','255983744','256107300','255777470','126223536','256203326','256099190','256099151','256324061','256324047','256203339','256966628','256966589','256966626','256966590','124584015','257456576','256966593','257456590','256966629','256966587','256966592','257456586','257456539','259829115','259829104','259829113','260037038','259829105','259829109','260037030','260149625','259829103','260149621','260465044','259829116','260724710','179155058','261079769','261079761','261079768','261079762','261079771','261276939','157405370','135374885','261079765','261393056','261393062','261079760','181496406','182747360','261504698','261690888','261504706','169474957','262218766','262290715','262290774','262372432','262372425','262372431','262886993','262886995','262372426','262886987','261079764','262886986','262886988','262886990','262372433','262886996','263652962','264009049','264009019','264009030','264009021','264009023','264009052','264009024','261763534','174081651','169474965','232867942','264009013','255959606','264009028','267397344','267397322','267925737','267397343','267925708','267397327','267397321','267925714','267258517','267925705','268773287','267925733','268773233','267925702','268773286','159526770','268773239','268773272','269790795','269285030','269790805','269790803','269790792','268773227','269849047','270426177','270426174','271182277','269790789','271182270','268773290','271182266','271182276','269790798','271182279','271182265','271182267','269790807','271823819','272382110','272382111','272382106','272693584','272382095','272382093','272382098','272382100','272382103','273728833','273371577','273728832','273728798','273907093','273907111','273907108','238093987','273907112','273907103','274774869','274774891','274774908','273907087','274774904','274774875','274774914','275292626','276027938','276028040','276027963','276028037','276028020','276028017','274774862','276028013','249507580','276028029','273907098','277249238','277249248','277249249','276028033','277249250','277249226','275292623','277249214','277249242','277249237','277249240','278625447','278002558','278625420','278625431','278625423','117539687','278625416','278625444','277249213','278625451','279469964','279996068','279996060','279996067','279996058','280194220','279996065','279996063','279996061','279996059','280894196','273728787','271182262','281579032','281579023','276514494','281579021','281579027','281579033','268773274','283072590','281579025','283072571','282619332','283489774','283072587','283072567','281579031','283072580','283072574','284459213','284459224','179155089','256966583','284459214','283072585','284459218','284459223','284459225','285338607','275113919','284459221','284459212','284459215','285855793','285855800','285855803','285855791','285855802','285855804','285855795','286809973','287420974','287421023','287420968','287420979','287421017','287421005','287421019','287421012','277249241','288682406','287421026','288682405','288682397','288682407','261079772','288682398','288682401','288205409','289692198','287420997','289692186'])
        self.dpi_pxl = random.choice(['240dpi; 1760x792', '240dpi; 1920x864', '320dpi; 2400x1080', '400dpi; 3200x1440', '480dpi; 1080x1920', '320dpi; 900x1600', '320dpi; 720x1280', '240dpi; 540x960', '280dpi; 1920x1080', '240dpi; 160x900', '240dpi; 1280x720', '160dpi; 960x540','160dpi; 623x1280'])
        self.dpi = random.choice(['320dpi','640dpi','213dpi','480dpi','420dpi','240dpi','280dpi','160dpi','560dpi','540dpi','272dpi','360dpi','720dpi','270dpi','450dpi','600dpi','279dpi','210dpi','180dpi','510dpi','300dpi','454dpi','314dpi','288dpi','401dpi','153dpi','267dpi','345dpi','493dpi','340dpi','604dpi','465dpi','680dpi','256dpi','290dpi','432dpi','273dpi','120dpi','200dpi','367dpi','419dpi','306dpi','303dpi','411dpi','195dpi','518dpi','230dpi','384dpi','315dpi','293dpi','274dpi','235dpi'])
        self.pxl = random.choice(['720x1280','1440x2560','1440x2768','1280x720','1280x800','1080x1920','540x960','1080x2076','1080x2094','1080x2220','480x800','768x1024','1440x2792','1200x1920','720x1384','1920x1080','720x1369','800x1280','720x1440','1080x2058','600x1024','720x1396','2792x1440','1920x1200','2560x1440','1536x2048','720x1382','1080x2113','1080x2198','1080x2131','720x1423','1080x2069','720x1481','1080x2047','1080x2110','1080x2181','1080x2209','1080x2180','1080x2020','1080x2095','1440x2723','1080x2175','720x1365','1440x2699','1080x2218','2699x1440','1440x2907','1080x2257','720x1370','1080x2042','720x1372','1080x2200','1080x2186','720x1361','1080x2024','1080x2006','720x1402','1440x2831','720x1454','1080x2064','1440x2933','720x1411','720x1450','1440x2730','1080x2046','2094x1080','540x888','1440x2759','1080x2274','1080x2178','1440x2706','720x1356','720x1466','1440x2900','2560x1600','1080x2038','1600x2452','1080x2129','720x1422','720x1381','1080x2183','1080x2285','800x1216','1080x2216','1080x2168','1080x2119','1080x2128','1080x2273','2274x1080','1080x2162','1080x2164','2076x1080','1024x768','1080x2173','1440x2845','1080x2134','720x1379','1440x2838','1080x2139','2131x1080','1440x2744','1080x2192','720x1406','1440x2960','1080x2029','2042x1080','1080x2212','1406x720','1080x2288','2047x1080','1080x2051','720x1398','1280x736','1382x720','720x1353','1080x2050','1080x2028','1080x2256','2711x1440','2175x1080','1080x2281','2560x1492','1440x2923','1200x1845','1080x2189','1080x2002','1440x2711','2110x1080','960x540','1080x2033','2200x1080','720x1452','720x1480','1440x2735','720x1472','1080x2277','1080x2169','2874x1440','1600x2560','1080x2151','2218x1080','1080x2182','720x1468','1440x2898','1080x2011','1080x2201','720x1380','1080x2287','2069x1080','1200x1836','2046x1080','720x1439','2058x1080','2182x1080','720x1399','1080x2282','1440x2721','1080x2324','720x1432','1080x2165','1080x2150','1080x2156','1080x1872','1440x3048','1532x2560','720x1355','720x1390','720x1476','720x1410','1080x2032','720x1437','1440x2682','1440x2921','1080x2270','1080x2160','720x1446','1200x1848','1440x2874','1080x2309','1080x2174','1440x2867','1080x2060','1080x2196','1080x2401','1536x1922','1080x2280','1080x2123','720x1435','1440x2927','1080x2276','720x1448','720x1469','720x1344','1080x2187','540x937','1440x3028','1080x2184','1440x2718','1080x2326','840x1834','1440x2935','1440x2880','1440x2892','2048x2048','1080x2195','1080x2322','720x1419','987x1450','1080x2092','1440x3047','720x1358','1080x2136','720x1357','1080x2093','720x1477','1080x2312','1080x2361','720x1341','720x1507','1080x2172','720x1337','1080x2177','1080x2125','1440x2891','1600x2434','720x1394','1080x2159','720x1387','1080x2166','1080x2154','1080x2147','1440x2747','1080x2105','1440x2911','720x1473','1080x2055','1080x2265','720x1436','1080x2190','1600x2526','720x1373','720x1415','1080x2249','1080x2254','720x1455','1440x3040','1080x2149','720x1385','1440x3036','1080x2111','1440x2904','720x1442','720x1377','1080x2307','1080x2327','1080x2141','1080x2025','720x1430','720x1375','1080x2283','1440x2779','1080x2321','1080x2268','1440x2758','1752x2698','1080x2267','1200x1856','1440x2756','720x1464','1080x2234','1080x2171','1080x2155','720x1463','1080x2122','720x1467','1080x2264','720x1349','1440x2999','720x1458','1080x2015','720x1431','1242x2208','1080x2185','1080x2148','1080x2163','1440x2780','720x1445','1080x2146','1200x1916','720x1502','1200x1928','720x1506','720x1424','720x1465','720x1420','1080x2176','720x1521','1080x2315','1080x2400','720x1471','1080x2157','1600x2458','1080x2067','1080x2191','1080x2271','720x1407','800x1208','1080x2087','1080x2199','578x1028','720x1485','540x879','1080x2179','720x1555','810x1598','720x1378','1200x1897','720x1395','720x1459','900x1600','1080x2275','1440x2733'])
        self.samsung = [""SM-A205F"",""SM-J120H"",""SM-J120F"",""SM-J120M"",""SM-J111M"",""SM-J111F"",""SM-J110H"",""SM-J110G"",""SM-J110F"",""SM-J110M"",""SM-J105H"",""SM-J105Y"",""SM-J105B"",""SM-J106H"",""SM-J106F"",""SM-J106B"",""SM-J106M"",""SM-J200F"",""SM-J200M"",""SM-J200G"",""SM-J200H"",""SM-J200F"",""SM-J200GU"",""SM-J260M"",""SM-J260F"",""SM-J260MU"",""SM-J260F"",""SM-J260G"",""SM-J200BT"",""SM-G532G"",""SM-G532M"",""SM-G532MT""]
        self.cgsm = [""dream2qltesq"", ""beyond2q"", ""broadway"", ""dreamqltevzw"", ""b2q"", ""a7y18lte"", ""a50qlteue"", ""a42xqlte"", ""a7y18lte"", ""a40lte"", ""a6plte"", ""a52xqlteue"", ""a5y20qlteue"", ""a3xelte"", ""a42xqlteue"", ""a3xelte"", ""a41lte"", ""a72xlte"", ""dreamlte"", ""hero2qltevzw"", ""beyond0lte"", ""beyond2"", ""starlte"", ""a5y17lte"", ""a7xelte"", ""a71xqlteue"", ""dream2qlteue"", ""dreamqltespr"", ""a5y17lte"", ""beyond1qlteue"",""herolte"",""zerolte"",""hero2te""]
        self.realme = [""RMX3516"", ""RMX3371"", ""RMX3461"", ""RMX3286"", ""RMX3561"", ""RMX3388"", ""RMX3311"", ""RMX3142"", ""RMX2071"", ""RMX1805"", ""RMX1809"", ""RMX1801"", ""RMX1807"", ""RMX1803"", ""RMX1825"", ""RMX1821"", ""RMX1822"", ""RMX1833"", ""RMX1851"", ""RMX1853"", ""RMX1827"", ""RMX1911"", ""RMX1919"", ""RMX1927"", ""RMX1971"", ""RMX1973"", ""RMX2030"", ""RMX2032"", ""RMX1925"", ""RMX1929"", ""RMX2001"", ""RMX2061"", ""RMX2063"", ""RMX2040"", ""RMX2042"", ""RMX2002"", ""RMX2151"", ""RMX2163"", ""RMX2155"", ""RMX2170"", ""RMX2103"", ""RMX3085"", ""RMX3241"", ""RMX3081"", ""RMX3151"", ""RMX3381"", ""RMX3521"", ""RMX3474"", ""RMX3471"", ""RMX3472"", ""RMX3392"", ""RMX3393"", ""RMX3491"", ""RMX1811"", ""RMX2185"", ""RMX3231"", ""RMX2189"", ""RMX2180"", ""RMX2195"", ""RMX2101"", ""RMX1941"", ""RMX1945"", ""RMX3063"", ""RMX3061"", ""RMX3201"", ""RMX3203"", ""RMX3261"", ""RMX3263"", ""RMX3193"", ""RMX3191"", ""RMX3195"", ""RMX3197"", ""RMX3265"", ""RMX3268"", ""RMX3269"",""RMX2027"", ""RMX2020"", ""RMX2021"", ""RMX3581"", ""RMX3501"", ""RMX3503"", ""RMX3511"", ""RMX3310"", ""RMX3312"", ""RMX3551"", ""RMX3301"", ""RMX3300"", ""RMX2202"", ""RMX3363"", ""RMX3360"", ""RMX3366"", ""RMX3361"", ""RMX3031"", ""RMX3370"", ""RMX3357"", ""RMX3560"", ""RMX3562"", ""RMX3350"", ""RMX2193"", ""RMX2161"", ""RMX2050"", ""RMX2156"", ""RMX3242"", ""RMX3171"", ""RMX3430"", ""RMX3235"", ""RMX3506"", ""RMX2117"", ""RMX2173"", ""RMX3161"", ""RMX2205"", ""RMX3462"", ""RMX3478"", ""RMX3372"", ""RMX3574"", ""RMX1831"", ""RMX3121"", ""RMX3122"", ""RMX3125"", ""RMX3043"", ""RMX3042"", ""RMX3041"", ""RMX3092"", ""RMX3093"", ""RMX3571"", ""RMX3475"", ""RMX2200"", ""RMX2201"", ""RMX2111"", ""RMX2112"", ""RMX1901"", ""RMX1903"", ""RMX1992"", ""RMX1993"", ""RMX1991"", ""RMX1931"", ""RMX2142"", ""RMX2081"", ""RMX2085"", ""RMX2083"", ""RMX2086"", ""RMX2144"", ""RMX2051"", ""RMX2025"", ""RMX2075"", ""RMX2076"", ""RMX2072"", ""RMX2052"", ""RMX2176"", ""RMX2121"", ""RMX3115"", ""RMX1921""]
        self.xiaomi = [""2201116SI"", ""M2012K11AI"", ""22011119TI"", ""21091116UI"", ""M2102K1AC"", ""M2012K11I"", ""22041219I"", ""22041216I"", ""2203121C"", ""2106118C"", ""2201123G"", ""2203129G"", ""2201122G"", ""2201122C"", ""2206122SC"", ""22081212C"", ""2112123AG"", ""2112123AC"", ""2109119BC"", ""M2002J9G"", ""M2007J1SC"", ""M2007J17I"", ""M2102J2SC"", ""M2007J3SY"", ""M2007J17G"", ""M2007J3SG"", ""M2011K2G"", ""M2101K9AG "", ""M2101K9R"", ""2109119DG"", ""M2101K9G"", ""2109119DI"", ""M2012K11G"", ""M2102K1G"", ""21081111RG"", ""2107113SG"", ""21051182G"", ""M2105K81AC"", ""M2105K81C"", ""21061119DG"", ""21121119SG"", ""22011119UY"", ""21061119AG"", ""21061119AL"", ""22041219NY"", ""22041219G"", ""21061119BI"", ""220233L2G"", ""220233L2I"", ""220333QNY"", ""220333QAG"", ""M2004J7AC"", ""M2004J7BC"", ""M2004J19C"", ""M2006C3MII"", ""M2010J19SI"", ""M2006C3LG"", ""M2006C3LVG"", ""M2006C3MG"", ""M2006C3MT"", ""M2006C3MNG"", ""M2006C3LII"", ""M2010J19SL"", ""M2010J19SG"", ""M2010J19SY"", ""M2012K11AC"", ""M2012K10C"", ""M2012K11C"", ""22021211RC""]
        self.bsh = 'in_ID'
        self.dvc = random.choice([""30/11"",""31/12"",""29/10""])
        return(random.choice([
             f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; INFINIX MOBILITY LIMITED/Infinix; {str(random.choice(self.infinix))}; qcom; {self.bsh}; 255777478)',
             f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; REALME MOBILITY LIMITED/Realme; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
             f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; XIAOMI MOBILITY LIMITED/Xiaomi; {str(random.choice(self.realme))}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; NEXUS MOBILITY LIMITED/Nexus; {str(random.choice(self.nexus))}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; MICROMAX MOBILITY LIMITED/Micromax; {str(random.choice(self.micromax))}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; ONEPLUS MOBILITY LIMITED/One; {str(random.choice(self.onpls))}; qcom; in_ID; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; OPPO MOBILITY LIMITED/Oppo; {str(random.choice(self.oppo))}; {self.opp}; qcom; {self.bsh}; 255777478)',
            f'Barcelona {self.dix} Android ({self.dvc}; 604dpi; 1080x2283; VIVO MOBILITY LIMITED/Vivo; {str(random.choice(self.vivo))}; qcom; {self.bsh}; 255777478)',
           ])
       )
        
    def useragent_ajax(self):
        self.chrome = str(random.randint(114,124))
        return(random.choice([
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            f'Mozilla/5.0 (Windows NT 10.0; {str(random.randint(1,9))}; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))}.{str(random.randint(1,9))} Safari/537.36',
            ])
        )
        

        


"
zRgJzLt4,eww.yuck,bluebyt,INI file,Sunday 31st of March 2024 06:12:48 AM CDT,";; CAL VARS
(defpoll calendar_day :interval ""10h"" ""date '+%d'"")
(defpoll calendar_year :interval ""10h"" ""date '+%Y'"")
(defpoll calendar_date :interval ""12h"" ""date '+%A, %d %B'"")
(defpoll today :interval ""12h"" ""date '+%a, %d %B'"")
(defpoll time :interval ""5s"" ""date '+%H:%M'"")

;; ENV VARS
;;(defpoll wm :interval ""12h"" ""echo $XDG_CURRENT_DESKTOP"")
(defpoll wm :initial ""..."" :interval ""12h"" ""$HOME/.config/scripts/display.sh &"") 
(defpoll shell :interval ""1h"" ""echo $SHELL | awk -F'/' '{print $NF}'"")
(defpoll term :interval ""1h"" ""echo $TERM | awk -F'-' '{print $NF}'"")
(defpoll uptime :interval ""1m"" ""uptime -p | sed -e 's/up //;s/ hours,/h/;s/ minutes/m/;s/ [0-9]\+m//'"")
;;(defpoll packages :interval ""15m"" ""pacman -Q | wc -l"")
(defpoll updates_poll :initial ""..."" :interval ""10m"" ""$HOME/.config/scripts/updates.sh &"") 
;; WEATHER VARS
(defpoll weather_temp :interval ""1h"" :initial ""0""
	""$HOME/.config/scripts/Weather.sh current_temp"")
(defpoll weather_desc :interval ""1h""
	""$HOME/.config/scripts/Weather.sh weather_desc"")
(defpoll weather_feels_like :interval ""3h""
	""$HOME/.config/scripts/Weather.sh feels_like"")
(defpoll weather_humidity :interval ""3h""
	""$HOME/.config/scripts/Weather.sh humidity"")
(defpoll weather_icon :interval ""3h""
	""$HOME/.config/scripts/Weather.sh icon"")
(defpoll weather_wind :interval ""3h""
	""$HOME/.config/scripts/Weather.sh wind"")

(defpoll memory :interval ""15s""
    ""$HOME/.config/scripts/memory"")
(defpoll cpu :interval ""17s""
    ""$HOME/.config/scripts/cpu"")
(defpoll disk :interval ""30s""
    ""$HOME/.config/scripts/disk"")
(defpoll tempe :interval ""3s""
    ""$HOME/.config/scripts/tempe"")
(defpoll temp :initial 30 :interval ""10s"" `sensors | rg temp1 | rg -o ""\\d+.\\d+"" | head -1`)

(defpoll IP_ADDR :interval ""24h"" ""ip -br address | grep UP | awk '{ print $3 }'"")


(deflisten window :initial ""..."" ""$HOME/.config/scripts/window-title.sh"")

;; Widgets

(defwidget dash []
    (box :class ""dash"" :orientation ""h"")
)

(defwidget cal[]
    (box :class ""cal-container"" :orientation ""v"" :space-evenly ""false"" :halign ""center""
        (box  :class ""cal-box"" :orientation ""v"" :space-evenly ""false""
            (label :class ""clock"" :text time)
            (label :class ""date"" :text today)
        )   
        (box :class ""cal-window"" :orientation ""h""
            (calendar :class ""day-names"" :day calendar_day :orientation ""v""
                      :class ""month-year"" :year calendar_year)
        )
    )
)

(defwidget info []
    (box :class ""info-box-outer"" :orientation ""h"" :space-evenly false :halign ""center""
        (box :class ""info-box-top"" :orientation ""v"" :space-evenly false
            (box :class ""info-box-inner"" :orientation ""h"" :space-evenly false
                (box :class ""info-box-left"" :orientation ""v"" :space-evenly false
                    (label :class ""info-icon"" :text ""ÔÅ©:"")
                    (label :class ""info-icon"" :text ""Ôíâ:"")
                    (label :class ""info-icon"" :text ""ÔÄó:"")
                    (label :class ""info-icon"" :text ""ÔåÉ:"")
                )
                (box :class ""info-box-right"" :orientation ""v"" :space-evenly false
                    (label :class ""info-text"" :halign ""start"" :text ""${wm}"")
                    (label :class ""info-text"" :halign ""start"" :text ""${shell}"")
                    (label :class ""info-text"" :halign ""start"" :text ""${uptime}"")
                    (label :class ""info-text"" :halign ""start"" :text ""${updates_poll} packages"")
                )
            )
        )
    )
)

(defwidget window-title []
    (box
        (label :class ""window-title""
        :halign ""center"" 
        :limit-width 16
        :justify ""center""
        :text ""${window}"")
    )
)

(defwidget weather []
    (box :class ""weather-container"" :orientation ""v"" :space-evenly ""false"" :halign ""center""
        (box :class ""weather-box"" :orientation ""h"" :space-evenly ""false"" :halign ""center"" :spacing 10
            (label :class ""weather-icon"" :text {weather_icon != """" ? ""${weather_icon}"" : ""Óê≠""})
            (label :class ""weather-temp"" :text ""${weather_temp}¬∞C"")
        )
        (box :class ""weather-window"" :orientation ""v"" :space-evenly ""false"" :spacing 2
            (label :class ""weather-feel"" :text ""${weather_desc}""
                                        :limit-width 32
                                        :justify ""center""
                                        :wrap ""true"")
            (label :class ""weather-desc"" :text ""Feels Like: ${weather_feels_like}¬∞C"")
            (label :class ""weather-desc"" :halign ""center"" :text ""Óçã ${weather_wind} km/h"")
            (label :class ""weather-desc"" :halign ""center"" :text ""Óç≥  ${weather_humidity} %"")
        )
    )
)


(defwidget network [] 
	(box :class ""network-label"" :orientation ""h"" :space-evenly ""false"" :spacing 10 :halign ""center""
        (label :text ""${IP_ADDR}"")
    )
)

(defwidget network-up [] 
	(box :class ""network"" :orientation ""h"" :space-evenly ""false"" :spacing 10 :halign ""center""
        (box :orientation ""h"" :class ""network-box"" 
            (label :text ""ÔÅ¢"" :class ""network-up"")
        )
        (box :orientation ""h"" :width 130 
            (graph  :class ""network-graph-up""
                    :thickness 2
                    :value {round(EWW_NET.enp4s0.NET_UP / (1024 * 1024) ,1)}
                    :time-range ""2m""
                    :min 0
                    :max 101
                    :dynamic ""true""
                    :line-style ""round""
            )
	    )
    )
)
(defwidget network-down [] 
	(box :class ""network"" :orientation ""h"" :space-evenly ""false"" :spacing 10 :halign ""center""
        (box :orientation ""h"" :class ""network-box"" 
            (label :text ""ÔÅ£"" :width 10 :class ""network-down"")
        )
        (box :orientation ""h"" :width 130
            (graph  :class ""network-graph-down""
                    :thickness 2
                    :value {round(EWW_NET.enp4s0.NET_DOWN / 1024 ,1)}
                    :time-range ""2m""
                    :min 0
                    :max 101
                    :dynamic ""true""
                    :line-style ""round""
            )
	    )
    )
)

(defwidget system []
    (box :class ""sys_win"" :orientation ""h"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" 
        (box :class ""sys_cpu_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
            (circular-progress 
                    :value cpu
                    :class ""sys_cpu""
                    :thickness 8
                (label :text ""Ôíº""
                    :class ""sys_icon_cpu""
                    :limit-width 4
                    :show_truncated false
                    :wrap false))
            (label :class ""cpu_perc"" :halign ""center"" :text ""${cpu}%"")
        )
        (box :class ""sys_mem_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
            (circular-progress 
                    :value memory
                    :class ""sys_mem""
                    :thickness 8
              (label :text ""Óâ¶""
                    :class ""sys_icon_mem""
                    :limit-width 4
                    :show_truncated false
                    :wrap false
                    :angle 0.0))
            (label :class ""mem_perc"" :halign ""center"" :text ""${memory}%"")
        )
    )
)

(defwidget disktemp []
    (box :class ""disk_temp"" :orientation ""h"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" 
        (box :class ""sys_disk_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
          (circular-progress
                  :value disk
                  :class ""sys_disk""
                  :thickness 8
              (label :text ""ÔÉá""
                    :class ""sys_icon_disk""
                    :limit-width 4
                    :show_truncated false
                    :wrap false))
            (label :class ""disk_perc"" :halign ""center"" :text ""${disk}%"")
        )        
      (box :class ""sys_tempe_box"" :orientation ""v"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false""
            (circular-progress 
                    :value tempe
                    :class ""sys_tempe""
                    :thickness 8
              (label :text ""Ôãà""
                    :class ""sys_icon_tempe""
                    :limit-width 4
                    :show_truncated false
                    :wrap false
                    :angle 0.0))
            (label :class ""tempe_perc"" :halign ""center"" :text ""${tempe}C"")
        )  
    )
)



(defwidget apps []
    (box :class ""app-container"" :orientation ""v"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" :halign ""center""
    (label :text ""Apps"" :class ""app-label"")
        (box :class ""app-box"" :orientation ""h"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false"" :spacing 10
            (button :class ""app-firefox"" 
			    :onclick ""alacritty -e zsh 2> /dev/null"" ""Óû£"")
	        (button :class ""app-files"" 
			    :onclick ""thunar 2> /dev/null"" ""Óóæ"")
            (button :class ""app-code"" 
			    :onclick ""wofi -n --show drun -k 2> /dev/null"" ""ÔÄÇ"")
            (button :class ""app-steam""
                :onclick ""foot 2> /dev/null"" ""Óûï"")
        )
    )
)

;; Functions
(defwidget functions []
    (box :class ""function-container"" :orientation ""v"" :space-evenly ""true"" :hexpand ""false"" :vexpand ""false"" :halign ""center""
    (label :text ""Functions"" :class ""function-label"")
        (box :class ""function-box"" :orientation ""h"" :space-evenly ""false"" :hexpand ""false"" :vexpand ""false"" :spacing 10
            (button :class ""screenshot""
                :onclick ""bash $HOME/.config/scripts/screenshot.sh 2> /dev/null""
                :tooltip ""Screenshot""
            (label :text ""Ó©∫ "" :class ""tooltip""))
            (button :class ""wallpaper""
                :onclick ""bash $HOME/.config/scripts/wallpaper.sh 2> /dev/null""
                :tooltip ""Wallpaper""
            (label :text ""ÔÄæ"" :class ""tooltip""))
            (button :class ""keybind""
                :onclick ""$HOME/.config/scripts/hyprland""
                :tooltip ""Hyprland.conf""
            (label :text ""ÔÑú"" :class ""tooltip""))
            (button :class ""logout""
                :onclick ""bash $HOME/.config/scripts/logout.sh""
                :tooltip ""Logout""
            (label :text ""ÔÄë"" :class ""tooltip"")
            )
        )
    )
)

(defwidget right []
    (box :class ""right"" :orientation ""v"" :space-evenly ""false""
        (cal)
        (dash)
        (window-title)
        (dash)
        (info)
        (dash)
        (apps)
        (dash)
        (weather)
        (dash)
        (network)
        (network-up)
        (network-down)
        (dash)
        (disktemp)
        (system)
	(dash)
	(functions)
    )
)

(defwindow sidebar
    :monitor 0
    :geometry (geometry :x ""16px""
                        :y ""40px""
                        :width ""140px""
                        :height ""60%""
                        :anchor ""top left"")
    :stacking ""fg""
    :windowtype ""dock""
    :exclusive true
        (box :class ""main-container""
        (right)
    )
)"
j0KyLKv6,[iamDvz] Orbit's cleanse problem,iamDvz,JavaScript,Sunday 31st of March 2024 06:02:05 AM CDT,"
horo_skill_ghosts_musp_orbit_base: &horo_skill_ghosts_musp_orbit_base_copy
    spell-class: "".targeted.OrbitSpell""
    helper-spell: true
    target-self: true
    horiz-expand-delay: 0
    horiz-expand-radius: 0
    vert-expand-delay: 0
    vert-expand-radius: 0
    start-horiz-offset: 0
    hit-radius: 2
    seconds-per-revolution: 4.5
    orbit-radius: 1.5
    tick-interval: 1
    max-duration: 15
    y-offset: -1
    stop-on-hit-entity: false
    stop-on-hit-ground: false
    can-hit:
        - players
        - nonplayers
    spell: tdummy
    effects:
      1_1:
        position: projectile
        effect: entity
        height-offset: 2
        entity:
            entity: item_display
            silent: true
            item: gunpowder{customModelData:1}
            item-display-transform: NONE
            glow-color-override: ffffffff
            glowing: true
            shadow-radius: 0
            shadow-strength: 0
            interpolation-delay: -1
            interpolation-duration: 15
            teleport-duration: 2
            transformation:
                left-rotation: ""0,-0.707,0,0.707""
                right-rotation: ""0,0,0,1""
                translation: ""0,0,0""
                scale: ""1,1,1""
      1_2:
        position: special
        effect: particles
        particle-name: dust
        color: ffffff
        horiz-spread: 0.2
        vert-spread: 0.2
        speed: 0
        count: 1
        height-offset: 2
horo_skill_ghosts_musp_orbit_1: {<<: *horo_skill_ghosts_musp_orbit_base_copy, start-horiz-offset: 0}

#### ~~~~ ####
horo_skill_ghosts_musp_dummy_musp_1:
    spell-class: "".MultiSpell""
    helper-spell: true
    modifiers:
        - buffactive horo_skill_ghosts_musp_buff_1 required
    spells:
        - horo_skill_ghosts_musp_dummy_musp_1_cleanse
        - horo_skill_ghosts_musp_dummy_musp_ppj
        - DELAY 1
        - horo_skill_ghosts_musp_dummy(mode=FULL)
horo_skill_ghosts_musp_dummy_musp_1_cleanse:
    spell-class: "".targeted.CleanseSpell""
    helper-spell: true
    target-self: true
    variable-mods-cast:
        - fruit_skill_animation_1 =0
    remove:
        - loop:fruit_skill_animation_1
        - buff:horo_skill_ghosts_musp_buff_1
        - orbit:horo_skill_ghosts_musp_orbit_1"
n354J9cQ,data882,TestGuy1,JSON,Sunday 31st of March 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '4313e4de19d242d64011ff781e2782f620a100bfb93124a44ea450919b2b23bd6a14cbdd520adad223a378d2a0df8aca71708b2be86122e8e0125490c9a11758422d04fa4959d29260b1986b3b6de04fab655882f4c142c56844590499f37d841e7cf098ff6666aadbd95140791dd7bc39d509c2cf93c19b40dafb5f38637cff',
  otherdata: [
    '8d1576f52e7c854fa3430cc021b82de4',
    'd83633aebf8888be377cdce4c7563db8',
    '8c27bd44dcef836dfa5849223d52b6ee',
    '89fb0f1124d430a63b788854f9e2f15c',
    'b23614fe7d17d1208185349389636c6b',
    '7cbc7a4ece44caadabf075e3d6a86183',
    '494a21a39a7dc179f672b864acd7ea5d',
    '411a397df7b1e9882c51270038a618a9'
  ]
}"
cyUDQEVX,08. Tennis Ranklist,GabrielHr00,Java,Sunday 31st of March 2024 05:21:32 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class TennisRanklist {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tournamentsCount = Integer.parseInt(scanner.nextLine());
        int startingPoints = Integer.parseInt(scanner.nextLine());

        int wonPoints = 0;
        int winsCounter = 0;
        for (int i = 1; i <= tournamentsCount; i++) {
            String result = scanner.nextLine();

            switch (result) {
                case ""W"":
                    winsCounter += 1;
                    wonPoints += 2000;
                    break;
                case ""F"":
                    wonPoints += 1200;
                    break;
                case ""SF"":
                    wonPoints += 720;
                    break;
            }
        }

        System.out.printf(""Final points: %d%n"", startingPoints + wonPoints);
        System.out.printf(""Average points: %d%n"", wonPoints / tournamentsCount);
        System.out.printf(""%.2f%%"", (1.0 * winsCounter) / tournamentsCount * 100);

    }
}"
Ls2BJqsT,07. Trekking Mania,GabrielHr00,Java,Sunday 31st of March 2024 05:20:18 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class TrekkingMania {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int groupsCount = Integer.parseInt(scanner.nextLine());

        int allPeople = 0;
        int musalaPeople = 0;
        int monblancPeople = 0;
        int kilimandjaroPeople = 0;
        int k2People = 0;
        int everestPeople = 0;

        for (int i = 1; i <= groupsCount; i++) {
            int people = Integer.parseInt(scanner.nextLine());
            allPeople += people;

            if(people <= 5) {
                musalaPeople += people;
            } else if (people <= 12) {
                monblancPeople += people;
            } else if (people <= 25) {
                kilimandjaroPeople += people;
            } else if (people <= 40) {
                k2People += people;
            } else if (people >= 41) {
                everestPeople += people;
            }
        }

        System.out.printf(""%.2f%%%n"", (1.0 * musalaPeople) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * monblancPeople) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * kilimandjaroPeople) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * k2People) / allPeople * 100);
        System.out.printf(""%.2f%%%n"", (1.0 * everestPeople) / allPeople * 100);
    }
}"
hVFKWmsx,06. Oscars,GabrielHr00,Java,Sunday 31st of March 2024 05:18:45 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class Oscars {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String actorName = scanner.nextLine();
        double actorPoints = Double.parseDouble(scanner.nextLine());
        int gradersCount = Integer.parseInt(scanner.nextLine());


        for (int i = 1; i <= gradersCount; i++) {
            String name = scanner.nextLine();
            double points = Double.parseDouble(scanner.nextLine());

            actorPoints += ((1.0 * name.length()) * points) / 2;

            if (actorPoints > 1250.5) {
                break;
            }
        }


        if (actorPoints > 1250.5) {
            System.out.printf(""Congratulations, %s got a nominee for leading role with %.1f!"", actorName, actorPoints);
        } else {
            System.out.printf(""Sorry, %s you need %.1f more!"", actorName, 1250.5 - actorPoints);
        }

    }
}
"
afABWEhb,05. Salary,GabrielHr00,Java,Sunday 31st of March 2024 05:18:05 AM CDT,"package _04_ForLoops;

import java.util.Scanner;

public class Salary {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int tabsCount = Integer.parseInt(scanner.nextLine());
        int salary = Integer.parseInt(scanner.nextLine());

        for (int i = 1; i <= tabsCount; i++) {
            String tabName = scanner.nextLine();

            switch (tabName) {
                case ""Facebook"":
                    salary -= 150;
                    break;
                case ""Instagram"":
                    salary -= 100;
                    break;
                case ""Reddit"":
                    salary -= 50;
                    break;
            }

            if (salary <= 0) {
                System.out.println(""You have lost your salary."");
                break;
            }
        }

        if (salary > 0) {
            System.out.println(salary);
        }
    }
}
"
