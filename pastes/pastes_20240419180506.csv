id,title,username,language,date,content
W1eZEgMi,CHATGPT Online Player List,MigasRocha,Lua,Friday 19th of April 2024 01:02:21 PM CDT,"-- Open the peripheral connected to the Advanced Computer
local playerDetector = peripheral.wrap(""side_of_player_detector"")  -- Replace ""side_of_player_detector"" with the actual side of the Player Detector

-- Function to get online players
local function getOnlinePlayers()
    local onlinePlayers = playerDetector.getOnlinePlayers()
    return onlinePlayers
end

-- Function to display online players on the terminal
local function displayOnlinePlayers()
    local onlinePlayers = getOnlinePlayers()
    term.clear()  -- Clear the terminal screen
    print(""Online Players:"")
    for _, player in ipairs(onlinePlayers) do
        print(""- "" .. player)
    end
end

-- Main loop to continuously display online players
while true do
    displayOnlinePlayers()
    os.sleep(5)  -- Refresh every 5 seconds (adjust as needed)
end
"
du5kx2rH,Untitled,Josif_tepe,C++,Friday 19th of April 2024 01:01:28 PM CDT,"#include <iostream>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    
    for(int i = 0; i < n; i++) {
        int x;
        cin >> x;
        
        int dali_e_sostaven_od_parni = 1;
        while(x > 0) {
            int cifra = x % 10;
            if(cifra % 2 == 1) {
                dali_e_sostaven_od_parni = 0;
            }
            x /= 10;
        }
    }
    return 0;
}
"
5x7YXv1P,Homework nested structs,Denis_Hristov,C,Friday 19th of April 2024 12:59:03 PM CDT,"#include <stdio.h>
#include <stdlib.h>

struct Student{
    char name[20];
    float grade;
};

struct Klas{
    unsigned int klasNumber;
    struct Student students[30];
    unsigned int studentsNum;
};

struct Vipusk{
    unsigned int year;
    struct Klas klasove[5];
    unsigned int klasoveNum;
};

float calcAverageKlas(struct Klas klas){
    float sum = 0;

    for(int i = 0; i < klas.studentsNum; i++){
        sum += klas.students[i].grade;
    }

    return sum / klas.studentsNum;
}

float calcAverageVipusk(struct Vipusk* vipusk){
    float sum = 0;
    for(int i = 0; i < vipusk->klasoveNum; i++){
        sum += calcAverageKlas(vipusk->klasove[i]);
    }

    return sum / vipusk->klasoveNum;
}

int main()
{

    struct Vipusk vipusk;

    printf(""Enter the number of classes: "");
    scanf(""%d"", &vipusk.klasoveNum);

    for(int i = 0; i < vipusk.klasoveNum; i++){
        printf(""Enter the number of students for class %d: "", i + 1);
        scanf(""%d"", &(vipusk.klasove[i].studentsNum));
        for(int j = 0; j < vipusk.klasove[i].studentsNum; j++){
            getchar();
            printf(""Please enter student name: \n"");
            fgets(vipusk.klasove[i].students[j].name, sizeof(vipusk.klasove[i].students[j].name), stdin);
            printf(""Please enter the grade: \n"");
            scanf(""%f"", &(vipusk.klasove[i].students[j].grade));

        }
    }

    for (int i = 0; i < vipusk.klasoveNum; i++) {
        printf(""Average grade of class %d: %.2f\n"", i + 1, calcAverageKlas(vipusk.klasove[i]));
    }

    printf(""Average grade of the vipusk: %.2f\n"", calcAverageVipusk(&vipusk));

    return 0;
}
"
hjbR0AKi,How can I obtain the InstaForex No Deposit Bonus and initiate trading,reviewbrokers,PHP,Friday 19th of April 2024 12:57:53 PM CDT,https://www.reviewbrokers.net/how-can-i-obtain-the-instaforex-no-deposit-bonus-and-initiate-trading/
AQrJ8N4F,Untitled,Tkap1,C,Friday 19th of April 2024 12:54:17 PM CDT,"

int entity_get_personality_count(Entity entity)
{
	int result = 0;
	for(int i = 0; i < Personality_Count; i++) {
		if(entity.personality_values[i] > 0) { result += 1; }
	}
	return result;
}

bool entity_has_personality(Entity entity, Personality personality)
{
	return entity.personality_values[personality] > 0;
}"
BYPV6Tav,How Can You Claim the $500 Forex Trading Bonus for Free from InstaForex?,fxvnpro,PHP,Friday 19th of April 2024 12:38:29 PM CDT,"https://www.fxvnpro.com/how-can-you-claim-the-500-forex-trading-bonus-for-free-from-instaforex/
 
Table of Contents : InstaForex

 	Introduction: InstaForex $500 Deposit-Free Trading Opportunity
 	Bonus Joining Link
 	About InstaForex
 	Bonus Details
 	How to Join the Forex Free Trading Bonus
 	Withdrawal Terms
 	Deposit-Free Trading Bonus Terms
 	Conclusion: Seize the Opportunity with InstaForex


1. Introduction: InstaForex $500 Deposit-Free Trading Opportunity
Exciting news for all aspiring traders! InstaForex, a reputable brokerage firm renowned for its innovative services and user-friendly platform, is offering a remarkable opportunity for newcomers to kickstart their trading journey. With a generous $500 virtual cash bonus, accessible without any initial deposit, InstaForex is paving the way for traders to explore the thrilling world of Forex without financial constraints.


2. Bonus Joining Link
As an established player in the brokerage industry, InstaForex prides itself on providing traders with unparalleled benefits, including leverage up to 1:1000 and seamless withdrawal options. Whether you're a novice or an experienced trader, this bonus presents an ideal opportunity to bolster your trading career and achieve your financial goals.


3. About InstaForex
InstaForex is a well-known brokerage firm recognized for its reliability, transparency, and commitment to providing exceptional trading services to its clients. With a diverse range of trading instruments, cutting-edge technology, and comprehensive educational resources, InstaForex caters to the needs of traders worldwide.


4. Bonus Details

 	Expire Date: Unlimited
 	Applicable for: All Traders


5. How to Join the Forex Free Trading Bonus

 	Opening a Trading Account: Sign up for an account with InstaForex to unlock access to the exciting bonus offer.
 	Crediting the Bonus: Once your account is set up, the $500 bonus will be credited to your account, ready for you to start trading.
 	Kickstarting Your Trading: With your bonus funds in hand, dive into the dynamic world of Forex trading and seize lucrative opportunities to maximize your profits.


6. Withdrawal Terms

 	Bonus: No
 	Profits: Yes


7. Deposit-Free Trading Bonus Terms

 	Starting without a Deposit: Enjoy the freedom to commence your trading journey without the need for an initial deposit, empowering you to explore the market with ease.
 	Verification Procedure not Mandatory: Skip the cumbersome verification process and dive straight into trading, eliminating unnecessary delays and ensuring a swift onboarding experience.
 	Downloading MT4 for Enhanced Trading Experience: Enhance your trading experience with the industry-leading MetaTrader 4 (MT4) platform, renowned for its speed, reliability, and advanced features.


8. Conclusion: Seize the Opportunity with InstaForex
Seize this golden opportunity to embark on your trading journey with InstaForex and unleash your full potential in the dynamic world of Forex. Don't miss out on this lucrative offer – claim your $500 deposit-free trading bonus today and chart a course towards financial success!

Read InstaForex Review"
JRgsZBVp,Untitled,MeehoweCK,C++,Friday 19th of April 2024 12:24:15 PM CDT,"#include <ctime>
#include <cstdlib>
#include <iostream>
#include <conio.h>

double szacowaniePi(int N) {
	int n{};		// licznik określający ile punktów zawiera się w ćwiartce koła
	auto podstawa{ N / 100 };
	auto nastProg{ 0 };

	for (long long i{ 0 }; i < N; ++i) {
		if (i == nastProg) {
			system(""cls"");		// zresetowanie konsoli
			std::cout << ""Wykonano "" << 100 * i / N << ""%\n"";
			nastProg += podstawa;
		}
		// wylosowanie współrzędnych punktu (x, y):
		auto x{ 1.0 * rand() / RAND_MAX };
		auto y{ 1.0 * rand() / RAND_MAX };
		// sprawdzenie czy wylosowany punkt zawiera się w ćwiartce koła:
		if (x * x + y * y <= 1) {
			// zwiększamy liczbę punktów zawierających się w ćwiartce koła o 1
			++n;
		}
	}
	system(""cls"");
	return 4.0 * n / N;
}

int main() {
	srand(time(nullptr));
	int punkty;
	std::cout << ""Ile punktow ma byc losowanych? "";
	std::cin >> punkty;
	std::cout << ""Liczbe pi oszacowano na "" << szacowaniePi(punkty) << std::endl;
	return 0;
}"
h7gxG7Vr,SkyLine-Practical-D&C,alisadafi,Python,Friday 19th of April 2024 12:15:53 PM CDT,"class Building:
    def __init__(self, left, ht, right):
        self.left = left
        self.ht = ht
        self.right = right

class Strip:
    def __init__(self, left=0, ht=0):
        self.left = left
        self.ht = ht

class SkyLine:
    def __init__(self, cap):
        self.arr = []
        self.capacity = cap
        self.n = 0

    def count(self):
        return self.n

    def merge(self, other):
        res = SkyLine(self.n + other.n)
        h1, h2, i, j = 0, 0, 0, 0
        while i < self.n and j < other.n:
            if self.arr[i].left < other.arr[j].left:
                x1, h1 = self.arr[i].left, self.arr[i].ht
                maxh = max(h1, h2)
                res.append(Strip(x1, maxh))
                i += 1
            else:
                x2, h2 = other.arr[j].left, other.arr[j].ht
                maxh = max(h1, h2)
                res.append(Strip(x2, maxh))
                j += 1
        while i < self.n:
            res.append(self.arr[i])
            i += 1
        while j < other.n:
            res.append(other.arr[j])
            j += 1
        return res

    def append(self, st):
        if self.n > 0 and self.arr[self.n-1].ht == st.ht:
            return
        if self.n > 0 and self.arr[self.n-1].left == st.left:
            self.arr[self.n-1].ht = max(self.arr[self.n-1].ht, st.ht)
            return
        self.arr.append(st)
        self.n += 1

    def print_skyline(self):
        print(""Skyline for given buildings is"")
        for i in range(self.n):
            print("" ({}, {}),"".format(self.arr[i].left, self.arr[i].ht), end="""")
        print()

def find_skyline(arr, l, h):
    if l == h:
        res = SkyLine(2)
        res.append(Strip(arr[l].left, arr[l].ht))
        res.append(Strip(arr[l].right, 0))
        return res
    mid = (l + h) // 2
    sl = find_skyline(arr, l, mid)
    sr = find_skyline(arr, mid+1, h)
    res = sl.merge(sr)
    return res

arr = [Building(1, 11, 5), Building(2, 6, 7), Building(3, 13, 9), Building(12, 7, 16), Building(14, 3, 25), Building(19, 18, 22), Building(23, 13, 29), Building(24, 4, 28)]
n = len(arr)
skyline = find_skyline(arr, 0, n-1)
skyline.print_skyline()"
v5JeWwNu,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,ssss50w,GetText,Friday 19th of April 2024 12:03:59 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.
 
This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1KMb0fLkKHIC2qdjR4vCSRH9rVSjJVMdX/view?usp=sharing
 
Working as of:
19 April 2024"
dzm9DF0Z,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Friday 19th of April 2024 12:02:49 PM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_656352.pdf

Working as of:
19 April 2024"
wxwXKmcU,Untitled,MeehoweCK,C++,Friday 19th of April 2024 11:57:21 AM CDT,"#include <ctime>
#include <cstdlib>
#include <iostream>

const int N{ 100'000'000 };		// liczba losowanych punktów

double szacowaniePi() {
	int n{};		// licznik określający ile punktów zawiera się w ćwiartce koła
	for (auto i{ 0 }; i < N; ++i) {
		// wylosowanie współrzędnych punktu (x, y):
		auto x{ 1.0 * rand() / RAND_MAX };
		auto y{ 1.0 * rand() / RAND_MAX };
		// sprawdzenie czy wylosowany punkt zawiera się w ćwiartce koła:
		if (x * x + y * y <= 1) {
			// zwiększamy liczbę punktów zawierających się w ćwiartce koła o 1
			++n;
		}
	}
	return 4.0 * n / N;
}

int main() {
	srand(time(nullptr));
	std::cout << ""Liczbe pi oszacowano na "" << szacowaniePi() << std::endl;
	return 0;
}"
LwC1A8Zz,Untitled,MeehoweCK,C++,Friday 19th of April 2024 11:25:46 AM CDT,"#include <iostream>
#include <cstdlib>
#include <ctime>

const unsigned int N{ 1'000'000'000 };

double szacujPi() {
	unsigned int n{};	// licznik określający ile punktów zawiera się w ćwiartce koła
	for (unsigned int i{}; i < N; ++i) {
		// losowanie punktu (x, y):
		auto x{ 1.0 * rand() / RAND_MAX };
		auto y{ 1.0 * rand() / RAND_MAX };
		// sprawdzamy czy punkt (x, y) zawiera się w ćwiartce koła:
		if (x * x + y * y <= 1) {
			// punkt zawiera się w ćwiartce koła, więc zwiększamy n o 1:
			++n;
		}
	}
	return 4.0 * n / N;
}

int main() {
	srand(time(nullptr));
	std::cout << ""Wartosc liczby pi oszacowano na "" << szacujPi() << std::endl;
	return 0;
}"
ezR4Jg23,Semi primes,ifigazsi,Python,Friday 19th of April 2024 11:20:59 AM CDT,"from itertools import combinations_with_replacement

def primes(n: int) -> iter:
    return [i for i in range(2, n + 1) if sum(i % k == 0 for k in range(1, int(i ** 0.5) + 1)) == 1]

def at_least20(number):
    if number < 20:
        return 20
    return number

def semi_primes(number_of_semi_primes):
    list_of_primes = primes(at_least20(number_of_semi_primes))
    comb = combinations_with_replacement(list_of_primes, 2)
    c = set()
    for i in comb:
        c.add(i[0] * i[1])
        if len(c) == number_of_semi_primes:
            break
    print(sorted(c))

if __name__ == '__main__':

    semi_primes2(10000)"
EVzaJKVt,Untitled,juanchixd,Python,Friday 19th of April 2024 10:54:23 AM CDT,"""""""
Created on 2024
@Creator: Juan Bautista Gonzalez
@Position: Student electronic engineering and programmer part-time
@Contact:
    - Email: contacto@juangonzalez.com.ar
""""""
import os
import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

html_content= """"""AQUI DATA 
""""""

url = ""https://www.fceia.unr.edu.ar/tesys/html/""
soup = BeautifulSoup(html_content, ""html.parser"")

download_folder = ""descargas""
os.makedirs(download_folder, exist_ok=True)
file_number = 1
previous_number = None

for row in soup.find_all(""tr""):
    columns = row.find_all(""td"")
    if len(columns) >= 4:
        number = columns[1].text.strip().zfill(3) 
        if number != previous_number:
            file_number = 1 
        for link in columns[3].find_all(""a""):
            href = link.get(""href"")
            if href:
                file_url = urljoin(url, href) 
                file_name = os.path.join(download_folder, f""{number}_{file_number:03d}_{os.path.basename(href)}"")
                try:
                    response = requests.get(file_url)
                    with open(file_name, ""wb"") as file:
                        file.write(response.content)
                    print(f""Archivo descargado: {file_name}"")
                except Exception as e:
                    print(f""Error al descargar {file_url}: {e}"")
            file_number += 1 
        previous_number = number"
QKA68s3n,Untitled,Josif_tepe,C++,Friday 19th of April 2024 10:45:13 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int redovi, koloni;
    cin >> redovi >> koloni;
    
    int mat[redovi][koloni];
    
    for(int i = 0; i < redovi; i++) {
        for(int j = 0; j < koloni; j++) {
            cin >> mat[i][j];
        }
    }
    
    for(int i = 0; i < redovi; i++) {
        for(int j = 0; j < koloni; j++) {
            cout << mat[i][j] << "" "";
        }
        cout << endl;
    }
    return 0;
}
"
G1hD2XjK,Untitled,MeehoweCK,C++,Friday 19th of April 2024 10:40:53 AM CDT,"#include <iostream>
#include <cstdlib>
#include <ctime>

double losuj(double min, double max) {
	return min + (max - min) * rand() / RAND_MAX;
}

int main() {
	srand(time(nullptr));

	std::cout << losuj(2, 5.5) << std::endl;
	return 0;
}"
Nxc1L7XH,Teste 2,MigasRocha,Lua,Friday 19th of April
eiWtVQep,Untitled,Josif_tepe,C++,Friday 19th of April 2024 10:27:42 AM CDT,"#include <iostream>
using namespace std;

int main() {
    int mat[3][3];
    mat[0][0] = 1;
    mat[0][1] = 2;
    mat[0][2] = 3;
    mat[1][0] = 4;
    mat[1][1] = 5;
    mat[1][2] = 6;
    mat[2][0] = 7;
    mat[2][1] = 8;
    mat[2][2] = 9;
    
    cout << mat[0][0] << "" "" << mat[0][1] << "" "" <<  mat[0][2] << endl;
    cout << mat[1][0] << "" "" << mat[1][1] << "" "" << mat[1][2] << endl;
    cout << mat[2][0] << "" "" << mat[2][1] << "" "" << mat[2][2] << endl;
    
    
    return 0;
}
"
4gqRsy70,wb_parse,Namokonov,JavaScript,Friday 19th of April 2024 10:23:19 AM CDT,"function onOpen(){
  SpreadsheetApp.getUi()
  .createMenu(""🐱"")
  .addItem(""запустить!"", ""myFunction"")
  .addToUi();
}

function myFunction() {
  const ss = SpreadsheetApp.getActive();
  const sh = ss.getSheetByName(""Лист1"");
  const nmIds = sh.getDataRange().getValues().slice(1);
  const data = nmIds.map(row => {
    const nmId = row[0];
    const url = getJsonUrl(nmId);
    const r = JSON.parse(UrlFetchApp.fetch(url));

    row = [
      url, r.imt_name, r.subj_name, r.subj_root_name, r.vendor_code, r.season, r.description,
      r?.options.map(f => f.name + "": "" + f.value).join('\n'),
      r?.grouped_options.map(ff => ff.options.map(fff => ff.group_name + "", "" + fff.name + "": "" + fff.value).join('\n')).join('\n')
    ];

    return row;
  });

  sh.getRange(""B2:"" + data.length).clearContent();
  sh.getRange(2, 2, data.length, data[0].length).setValues(data);
};

function getJsonUrl(nmid) {
  const basket = {
    143: '01',
    287: '02',
    431: '03',
    719: '04',
    1007: '05',
    1061: '06',
    1115: '07',
    1169: '08',
    1313: '09',
    1601: '10',
    1655: '11',
    1919: '12',
    2045: '13',
    99999: '14'
  }
  return `https://basket-${basket[Object.keys(basket)
    .filter(v => Math.floor(nmid / 100000) <= v)[0]]}.wb.ru/vol${Math.floor(nmid / 100000)}/part${Math.floor(nmid / 1000)}/${nmid}/info/ru/card.json`
};"
BJcTVX3Y,Momentum_Alcista_Bajista_Segun_Carpatos,fabgonber,C++,Friday 19th of April 2024 10:14:29 AM CDT,"#
# Momentum/Trend Alcista o Bajista según @carpatos 
#

declare lower;

input length = 14;
input alcistas = 60;
input bajistas = 50;
input price = close;
input averageType = AverageType.WILDERS;
input showBreakoutSignals = no;

plot limite_alcistas = alcistas;
plot limite_bajistas = bajistas;


def NetChgAvg = MovingAverage(averageType, price - price[1], length);
def TotChgAvg = MovingAverage(averageType, AbsValue(price - price[1]), length);
def ChgRatio = if TotChgAvg != 0 then NetChgAvg / TotChgAvg else 0;

plot RSI = 50 * (ChgRatio + 1);

RSI.DefineColor(""bajista"", GetColor(5));
RSI.DefineColor(""normal"", GetColor(7));
RSI.DefineColor(""alcista"", GetColor(6));
RSI.SetPaintingStrategy(PaintingStrategy.Histogram);

RSI.AssignValueColor
       (
        if RSI[2]>alcistas AND RSI[1]>alcistas AND RSI[0]>alcistas  
            then  RSI.color(""alcista"") 
        else
        
        if RSI[2]>alcistas AND RSI[1]>alcistas AND RSI[0]<alcistas  
            then  RSI.color(""alcista"") 
        else

        if RSI[2]>alcistas AND RSI[1]<alcistas AND RSI[0]>alcistas  
            then  RSI.color(""alcista"") 
        else

        if RSI[2]<alcistas AND RSI[1]>alcistas AND RSI[0]>alcistas  
            then  RSI.color(""alcista"") 
        else

        if RSI[2]<bajistas AND RSI[1]<bajistas AND RSI[0]<bajistas  
            then  RSI.color(""bajista"")
        else

        if RSI[2]<bajistas AND RSI[1]<bajistas AND RSI[0]>bajistas  
            then  RSI.color(""bajista"")        
        else

        if RSI[2]<bajistas AND RSI[1]>bajistas AND RSI[0]<bajistas  
            then  RSI.color(""bajista"")        
        else
        if RSI[2]>bajistas AND RSI[1]<bajistas AND RSI[0]<bajistas  
            then  RSI.color(""bajista"")
        else
        RSI.color(""normal"")

);



"
WTP7H6jr,Mad,Unknown_No_1,PHP,Friday 19th of April 2024 10:11:39 AM CDT,NewFlashModSoonGuys
g6Myte6E,Untitled,PAXSemperFidelis,Java,Friday 19th of April 2024 10:02:40 AM CDT,"import processing.core.*;
import peasycam.*;

class Flight {
  PVector origin;
  PVector destination;
}

public class FlightAnimation extends PApplet {

  float radius = 150;
  PeasyCam cam;
  PVector lightPosition = new PVector(300, 300, 200);
  Flight flight;
  PVector target;  // Target point for ""fly to"" animation

  void setup() {
    size(600, 600, P3D);
    cam = new PeasyCam(this);
    background(0);
    smoothLighting();

    // Define flight data (Moscow to Washington coordinates are estimates)
    flight = new Flight();
    flight.origin = new PVector(0, radius * sin(radians(55.75)), radius * cos(radians(55.75)));  // Moscow (latitude, longitude)
    flight.destination = new PVector(0, radius * sin(radians(38.90)), radius * cos(radians(38.90)));  // Washington (latitude, longitude)

    // Define target point (replace with your desired coordinates)
    target = flight.destination;  // Initially target the flight destination
  }

  void draw() {
    pointLight(255, 255, 255, lightPosition.x, lightPosition.y, lightPosition.z);
    noStroke();
    fill(200);
    sphere(radius);

    // Draw flight path
    stroke(255);
    strokeWeight(2);
    line(flight.origin.x, flight.origin.y, flight.origin.z, flight.destination.x, flight.destination.y, flight.destination.z);

    // Simple plane at origin (replace with your plane model)
    pushMatrix();
    translate(flight.origin.x, flight.origin.y, flight.origin.z);
    rotateX(HALF_PI);  // Adjust rotation for desired plane orientation
    box(10, 20, 5);  // Replace with your plane dimensions
    popMatrix();

    // ""Fly to"" animation (comment out for a simple rotation)
    // float angleX = lerp(cam.getRotationX(), atan2(target.z, target.x), 0.01f);
    // float angleY = lerp(cam.getRotationY(), asin(target.y / radius), 0.01f);
    // cam.setRotation(angleX, angleY);

    // Simple rotation animation (uncomment for basic rotation)
    float angle = frameCount * 0.01f;
    rotateY(angle);
  }
}
"
ukWcwrau,backup.sh,sergio_educacionit,Bash,Friday 19th of April 2024 09:55:47 AM CDT,"#!/bin/bash

fecha=$(date +%H-%M-%S)

# servidor destino de backups
server=192.168.0.88

# usuario remoto
backupuser=""sambaserver""


# si el script recibe el argumento 'ssh-key'
# se generan el par de claves 'ssh'.

if [ ""$1"" == ""ssh-key"" ]; then

	ssh-keygen -t rsa -N """" -f ~/.ssh/id_rsa

	ssh-copy-id -i $HOME/.ssh/id_rsa.pub $backupuser@$server

	exit 0

# si recibe como argumento 'gpg-key'
# entonces genera un par de claves gpg
# en este caso sin contraseña


elif [ ""$1"" == ""gpg-key"" ]; then

	gpg --batch --gen-key <<EOF
%no-protection
Key-Type: RSA
Key-Length: 2048
Subkey-Type: RSA
Subkey-Length: 2048
Name-Real: Your Name
Name-Email: educacionit@$HOSTNAME
Expire-Date: 0
%commit
EOF

# se exporta la llave publica
gpg --export -a ""educacionit@$HOSTNAME"" > educacionit.$HOSTNAME.pub

# se envia la llave publica al servidor de backup
scp educacionit.$HOSTNAME.pub $backupuser@$server:~/

# se le envia el comando al servidor de backup mediante ssh
# para que importe la clave privada que le enviamos.
#
ssh $backupuser@$server gpg --import educacionit.$HOSTNAME.pub

exit 0

fi


# Backups


#Firmar los archivos de '/etc/samba'


# eliminar firma previa, usamos la opcion -f por si no existe.

rm /etc/samba/*.sign

gpg --detach-sign -u educacionit@$HOSTNAME -o /etc/samba/smb.conf.sign /etc/samba/smb.conf

# backup de configuracion

rsync -av -e ""ssh -i /root/.ssh/id_rsa"" /etc/samba/smb.conf* sambaserver@$server:~/

# backup de directorio de archivos compartidos en samba
rsync -av -e ""ssh -i /root/.ssh/id_rsa"" /srv/samba sambaserver@$server:~/
"
x8QkgHf1,News April19 24,Newscaster_Ned,Email,Friday 19th of April 2024 09:29:23 AM CDT,".‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎1‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎2‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎T‎e‎s‎t‎ ‎3‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎
.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎T‎e‎s‎t‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎.‎

l‎k‎f‎d‎j‎l‎k‎d‎s‎j‎f‎l‎k‎d‎s‎k‎l‎ ‎w‎e‎l‎l‎ ‎I‎'‎m‎ ‎t‎y‎p‎i‎n‎g‎ ‎t‎h‎i‎s‎ ‎w‎h‎i‎l‎e‎ ‎d‎r‎u‎n‎k‎;‎ ‎,‎ ‎l‎e‎t‎s‎ ‎j‎u‎s‎t‎ ‎t‎h‎i‎s‎

I‎r‎a‎n‎ ‎R‎e‎p‎o‎r‎t‎s‎ ‎N‎o‎ ‎D‎a‎m‎a‎g‎e‎ ‎A‎f‎t‎e‎r‎ ‎S‎u‎s‎p‎e‎c‎t‎e‎d‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎S‎t‎r‎i‎k‎e‎s‎
M‎i‎g‎r‎a‎n‎t‎s‎ ‎U‎s‎e‎ ‎R‎a‎m‎p‎ ‎t‎o‎ ‎D‎r‎i‎v‎e‎ ‎O‎v‎e‎r‎ ‎O‎u‎t‎d‎a‎t‎e‎d‎ ‎A‎r‎i‎z‎o‎n‎a‎ ‎B‎o‎r‎d‎e‎r‎ ‎B‎a‎r‎r‎i‎e‎r‎
M‎a‎n‎d‎i‎s‎a‎,‎ ‎‘‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎I‎d‎o‎l‎'‎ ‎A‎l‎u‎m‎ ‎&‎ ‎G‎r‎a‎m‎m‎y‎-‎W‎i‎n‎n‎i‎n‎g‎ ‎C‎h‎r‎i‎s‎t‎i‎a‎n‎ ‎S‎i‎n‎g‎e‎r‎,‎ ‎D‎e‎a‎d‎ ‎a‎t‎ ‎4‎7‎
C‎h‎i‎n‎a‎ ‎R‎e‎c‎r‎u‎i‎t‎s‎ ‎T‎a‎y‎l‎o‎r‎ ‎S‎w‎i‎f‎t‎ ‎t‎o‎ ‎C‎o‎l‎l‎e‎c‎t‎ ‎D‎a‎t‎a‎ ‎o‎n‎ ‎Y‎o‎u‎n‎g‎ ‎U‎s‎e‎r‎s‎ ‎v‎i‎a‎ ‎T‎i‎k‎T‎o‎k‎
R‎e‎p‎o‎r‎t‎e‎r‎:‎ ‎P‎o‎t‎e‎n‎t‎i‎a‎l‎ ‎T‎r‎u‎m‎p‎ ‎J‎u‎r‎o‎r‎s‎ ‎A‎r‎e‎ ‎'‎M‎o‎r‎e‎ ‎L‎e‎f‎t‎-‎o‎f‎-‎C‎e‎n‎t‎e‎r‎ ‎T‎h‎a‎n‎ ‎N‎o‎t‎'‎
O‎p‎p‎o‎n‎e‎n‎t‎s‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎H‎a‎v‎e‎ ‎S‎i‎g‎n‎a‎t‎u‎r‎e‎s‎ ‎f‎o‎r‎ ‎R‎e‎f‎e‎r‎e‎n‎d‎u‎m‎ ‎t‎o‎ ‎O‎v‎e‎r‎t‎u‎r‎n‎ ‎C‎A‎'‎s‎ ‎P‎r‎o‎p‎ ‎4‎7‎
W‎h‎o‎ ‎A‎r‎e‎ ‎t‎h‎e‎ ‎1‎2‎ ‎J‎u‎r‎o‎r‎s‎ ‎S‎e‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎T‎r‎u‎m‎p‎ ‎H‎u‎s‎h‎ ‎M‎o‎n‎e‎y‎ ‎T‎r‎i‎a‎l‎?‎
R‎a‎p‎ ‎A‎r‎t‎i‎s‎t‎ ‎G‎l‎o‎R‎i‎l‎l‎a‎ ‎C‎h‎a‎r‎g‎e‎d‎ ‎w‎i‎t‎h‎ ‎D‎r‎u‎n‎k‎e‎n‎ ‎D‎r‎i‎v‎i‎n‎g‎ ‎i‎n‎ ‎G‎e‎o‎r‎g‎i‎a‎
I‎s‎r‎a‎e‎l‎ ‎D‎o‎w‎n‎p‎l‎a‎y‎s‎ ‎I‎r‎a‎n‎ ‎S‎t‎r‎i‎k‎e‎s‎;‎ ‎P‎r‎o‎o‎f‎ ‎o‎f‎ ‎C‎a‎p‎a‎b‎i‎l‎i‎t‎y‎,‎ ‎R‎a‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎E‎s‎c‎a‎l‎a‎t‎i‎o‎n‎
S‎p‎y‎ ‎B‎a‎l‎l‎o‎o‎n‎ ‎C‎o‎m‎b‎a‎c‎k‎!‎ ‎R‎u‎s‎s‎i‎a‎ ‎S‎a‎y‎s‎ ‎i‎t‎ ‎i‎s‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎D‎o‎w‎n‎ ‎'‎T‎e‎r‎r‎o‎r‎'‎ ‎B‎a‎l‎l‎o‎o‎n‎s‎
L‎a‎w‎s‎u‎i‎t‎ ‎C‎l‎a‎i‎m‎s‎ ‎A‎l‎ ‎R‎o‎k‎e‎r‎ ‎‘‎C‎i‎r‎c‎u‎m‎v‎e‎n‎t‎e‎d‎'‎ ‎D‎E‎I‎ ‎Q‎u‎o‎t‎a‎s‎ ‎o‎n‎ ‎P‎B‎S‎ ‎K‎i‎d‎s‎ ‎S‎h‎o‎w‎
G‎e‎t‎ ‎A‎l‎l‎ ‎B‎r‎e‎i‎t‎b‎a‎r‎t‎ ‎N‎e‎w‎s‎ ‎H‎e‎r‎e‎
H‎o‎m‎e‎P‎a‎g‎e‎
1‎2‎ ‎J‎u‎r‎o‎r‎s‎ ‎S‎e‎a‎t‎e‎d‎ ‎i‎n‎ ‎T‎r‎u‎m‎p‎ ‎H‎u‎s‎h‎ ‎M‎o‎n‎e‎y‎ ‎T‎r‎i‎a‎l‎

W‎h‎o‎ ‎A‎r‎e‎ ‎T‎h‎e‎y‎?‎

-‎7‎ ‎M‎e‎n‎,‎ ‎5‎ ‎W‎o‎m‎e‎n‎
-‎M‎o‎s‎t‎ ‎G‎e‎t‎ ‎N‎e‎w‎s‎ ‎f‎r‎o‎m‎ ‎N‎Y‎T‎…‎ ‎S‎o‎m‎e‎ ‎T‎i‎k‎T‎o‎k‎
j‎u‎r‎o‎r‎s‎
H‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎b‎r‎e‎a‎k‎d‎o‎w‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎1‎2‎ ‎j‎u‎r‎o‎r‎s‎ ‎s‎e‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎t‎r‎i‎a‎l‎ ‎o‎f‎ ‎f‎o‎r‎m‎e‎r‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎D‎o‎n‎a‎l‎d‎ ‎T‎r‎u‎m‎p‎.‎ ‎T‎h‎e‎ ‎t‎r‎i‎a‎l‎ ‎i‎s‎ ‎t‎a‎k‎i‎n‎g‎ ‎p‎l‎a‎c‎e‎ ‎i‎n‎ ‎s‎o‎l‎i‎d‎l‎y‎-‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎M‎a‎n‎h‎a‎t‎t‎a‎n‎,‎ ‎m‎a‎k‎i‎n‎g‎ ‎i‎t‎ ‎c‎h‎a‎l‎l‎e‎n‎g‎i‎n‎g‎ ‎f‎o‎r‎ ‎T‎r‎u‎m‎p‎’‎s‎ ‎d‎e‎f‎e‎n‎s‎e‎ ‎t‎o‎ ‎f‎i‎n‎d‎ ‎f‎a‎i‎r‎ ‎a‎n‎d‎ ‎i‎m‎p‎a‎r‎t‎i‎a‎l‎ ‎j‎u‎r‎o‎r‎s‎.‎

R‎e‎p‎o‎r‎t‎:‎ ‎I‎s‎r‎a‎e‎l‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎I‎r‎a‎n‎ ‎N‎e‎a‎r‎ ‎N‎u‎c‎l‎e‎a‎r‎ ‎S‎i‎t‎e‎s‎
R‎e‎p‎o‎r‎t‎:‎ ‎I‎s‎r‎a‎e‎l‎ ‎S‎t‎r‎i‎k‎e‎s‎ ‎I‎r‎a‎n‎ ‎N‎e‎a‎r‎ ‎N‎u‎c‎l‎e‎a‎r‎ ‎S‎i‎t‎e‎s‎
3‎,‎1‎1‎8‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎M‎i‎k‎e‎ ‎J‎o‎h‎n‎s‎o‎n‎’‎s‎ ‎T‎o‎p‎ ‎P‎o‎l‎i‎c‎y‎ ‎A‎d‎v‎i‎s‎e‎r‎ ‎I‎s‎ ‎F‎o‎r‎m‎e‎r‎ ‎L‎o‎b‎b‎y‎i‎s‎t‎:‎ ‎C‎l‎i‎e‎n‎t‎s‎ ‎H‎a‎v‎e‎ ‎C‎o‎r‎p‎o‎r‎a‎t‎e‎ ‎I‎n‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎ ‎—‎ ‎J‎o‎h‎n‎s‎o‎n‎'‎s‎ ‎P‎o‎l‎i‎c‎y‎ ‎A‎i‎d‎e‎ ‎L‎o‎b‎b‎y‎i‎s‎t‎ ‎w‎i‎t‎h‎ ‎U‎k‎r‎a‎i‎n‎e‎-‎I‎n‎t‎e‎r‎e‎s‎t‎e‎d‎ ‎C‎l‎i‎e‎n‎t‎s‎
6‎,‎0‎3‎2‎
D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎S‎h‎u‎t‎ ‎D‎o‎w‎n‎ ‎S‎e‎n‎a‎t‎e‎ ‎T‎r‎i‎a‎l‎ ‎f‎o‎r‎ ‎M‎a‎y‎o‎r‎k‎a‎s‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎C‎h‎a‎r‎g‎e‎s‎
D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎S‎h‎u‎t‎ ‎D‎o‎w‎n‎ ‎S‎e‎n‎a‎t‎e‎ ‎T‎r‎i‎a‎l‎ ‎o‎n‎ ‎M‎a‎y‎o‎r‎k‎a‎s‎ ‎I‎m‎p‎e‎a‎c‎h‎m‎e‎n‎t‎ ‎C‎h‎a‎r‎g‎e‎s‎
3‎,‎9‎2‎0‎
E‎a‎t‎ ‎B‎u‎g‎s‎:‎ ‎N‎e‎w‎ ‎O‎r‎l‎e‎a‎n‎s‎ ‎C‎a‎f‎e‎ ‎P‎u‎t‎s‎ ‎C‎i‎c‎a‎d‎a‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎M‎e‎n‎u‎ ‎a‎s‎ ‎N‎a‎t‎i‎o‎n‎ ‎P‎r‎e‎p‎a‎r‎e‎s‎ ‎f‎o‎r‎ ‎O‎n‎s‎l‎a‎u‎g‎h‎t‎ ‎o‎f‎ ‎T‎r‎i‎l‎l‎i‎o‎n‎s‎
N‎e‎w‎ ‎O‎r‎l‎e‎a‎n‎s‎ ‎C‎a‎f‎e‎ ‎P‎u‎t‎s‎ ‎C‎i‎c‎a‎d‎a‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎M‎e‎n‎u‎ ‎a‎s‎ ‎N‎a‎t‎i‎o‎n‎ ‎P‎r‎e‎p‎a‎r‎e‎s‎ ‎f‎o‎r‎ ‎O‎n‎s‎l‎a‎u‎g‎h‎t‎
1‎1‎1‎
J‎o‎h‎n‎s‎o‎n‎:‎ ‎M‎o‎t‎i‎o‎n‎ ‎t‎o‎ ‎V‎a‎c‎a‎t‎e‎ ‎‘‎H‎a‎r‎m‎e‎d‎ ‎t‎h‎i‎s‎ ‎O‎f‎f‎i‎c‎e‎,‎’‎ ‎B‎u‎t‎ ‎W‎e‎ ‎L‎a‎c‎k‎ ‎t‎h‎e‎ ‎V‎o‎t‎e‎s‎ ‎t‎o‎ ‎C‎h‎a‎n‎g‎e‎ ‎t‎h‎e‎ ‎R‎u‎l‎
J‎o‎h‎n‎s‎o‎n‎:‎ ‎M‎o‎t‎i‎o‎n‎ ‎t‎o‎ ‎V‎a‎c‎a‎t‎e‎ ‎'‎H‎a‎r‎m‎e‎d‎ ‎T‎h‎i‎s‎ ‎O‎f‎f‎i‎c‎e‎,‎'‎ ‎W‎e‎ ‎L‎a‎c‎k‎ ‎V‎o‎t‎e‎s‎ ‎t‎o‎ ‎C‎h‎a‎n‎g‎e‎ ‎I‎t‎
3‎,‎4‎1‎6‎
N‎e‎w‎ ‎O‎r‎l‎e‎a‎n‎s‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎ ‎P‎u‎s‎h‎e‎s‎ ‎M‎o‎r‎e‎ ‎G‎u‎n‎-‎F‎r‎e‎e‎ ‎Z‎o‎n‎e‎s‎ ‎—‎ ‎W‎h‎e‎r‎e‎ ‎T‎o‎u‎r‎i‎s‎t‎s‎ ‎C‎a‎n‎’‎t‎ ‎B‎e‎ ‎A‎r‎m‎e‎d‎ ‎f‎o‎r‎
N‎e‎w‎ ‎O‎r‎l‎e‎a‎n‎s‎ ‎P‎o‎l‎i‎c‎e‎ ‎C‎h‎i‎e‎f‎ ‎W‎a‎n‎t‎s‎ ‎M‎o‎r‎e‎ ‎G‎u‎n‎-‎F‎r‎e‎e‎ ‎Z‎o‎n‎e‎s‎
1‎,‎3‎1‎8‎
W‎h‎o‎ ‎A‎r‎e‎ ‎t‎h‎e‎ ‎1‎2‎ ‎J‎u‎r‎o‎r‎s‎ ‎S‎e‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎T‎r‎u‎m‎p‎ ‎H‎u‎s‎h‎ ‎M‎o‎n‎e‎y‎ ‎T‎r‎i‎a‎l‎?‎
W‎h‎o‎ ‎A‎r‎e‎ ‎t‎h‎e‎ ‎1‎2‎ ‎J‎u‎r‎o‎r‎s‎ ‎S‎e‎a‎t‎e‎d‎ ‎i‎n‎ ‎t‎h‎e‎ ‎T‎r‎u‎m‎p‎ ‎H‎u‎s‎h‎ ‎M‎o‎n‎e‎y‎ ‎T‎r‎i‎a‎l‎?‎
1‎,‎4‎8‎0‎
N‎i‎g‎h‎t‎m‎a‎r‎e‎ ‎i‎n‎ ‎N‎i‎g‎e‎r‎ ‎—‎ ‎E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎d‎m‎i‎n‎i‎s‎t‎r‎a‎t‎i‎o‎n‎ ‎L‎e‎a‎v‎e‎s‎ ‎H‎u‎n‎d‎r‎e‎d‎s‎ ‎o‎f‎ ‎U‎.‎S‎.‎ ‎T‎r‎o‎o‎p‎s‎ ‎‘‎H‎o‎
E‎x‎c‎l‎u‎s‎i‎v‎e‎:‎ ‎B‎i‎d‎e‎n‎ ‎A‎d‎m‎i‎n‎ ‎L‎e‎a‎v‎e‎s‎ ‎H‎u‎n‎d‎r‎e‎d‎s‎ ‎o‎f‎ ‎T‎r‎o‎o‎p‎s‎ ‎'‎H‎o‎s‎t‎a‎g‎e‎'‎ ‎i‎n‎ ‎N‎i‎g‎e‎r‎
3‎,‎9‎2‎0‎
S‎t‎e‎p‎h‎e‎n‎ ‎C‎o‎l‎b‎e‎r‎t‎ ‎t‎o‎ ‎B‎r‎o‎a‎d‎c‎a‎s‎t‎ ‎‘‎L‎a‎t‎e‎ ‎S‎h‎o‎w‎’‎ ‎f‎r‎o‎m‎ ‎C‎h‎i‎c‎a‎g‎o‎ ‎D‎u‎r‎i‎n‎g‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎i‎c‎ ‎N‎a‎t‎i‎o‎n‎a‎l‎ ‎C‎o‎n‎v‎e‎n‎t‎i‎o‎n‎
S‎t‎e‎p‎h‎e‎n‎ ‎C‎o‎l‎b‎e‎r‎t‎ ‎t‎o‎ ‎B‎r‎o‎a‎d‎c‎a‎s‎t‎ ‎‘‎L‎a‎t‎e‎ ‎S‎h‎o‎w‎’‎ ‎f‎r‎o‎m‎ ‎C‎h‎i‎c‎a‎g‎o‎ ‎D‎u‎r‎i‎n‎g‎ ‎D‎N‎C‎
1‎8‎0‎
R‎e‎p‎o‎r‎t‎:‎ ‎J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎C‎o‎m‎m‎i‎t‎t‎e‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎F‎e‎a‎r‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎l‎l‎ ‎P‎u‎t‎ ‎T‎h‎e‎m‎ ‎i‎n‎ ‎J‎a‎i‎l‎
J‎a‎n‎u‎a‎r‎y‎ ‎6‎ ‎C‎o‎m‎m‎i‎t‎t‎e‎e‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎s‎ ‎S‎a‎y‎ ‎T‎h‎e‎y‎ ‎F‎e‎a‎r‎ ‎T‎r‎u‎m‎p‎ ‎W‎i‎l‎l‎ ‎P‎u‎t‎ ‎T‎h‎e‎m‎ ‎i‎n‎ ‎J‎a‎i‎l‎

N‎i‎g‎g‎a‎ ‎S‎h‎o‎o‎t‎s‎ ‎a‎n‎ ‎K‎e‎e‎e‎i‎l‎s‎ ‎C‎r‎a‎c‎k‎a‎ ‎N‎Y‎P‎D‎ ‎C‎o‎p‎ ‎C‎a‎u‎s‎e‎ ‎H‎e‎ ‎""‎F‎e‎l‎t‎ ‎L‎i‎k‎e‎ ‎i‎t‎,‎""‎;‎ ‎F‎a‎c‎e‎s‎ ‎3‎0‎ ‎Y‎e‎a‎r‎s‎.‎

I‎n‎ ‎3‎0‎ ‎y‎e‎a‎r‎s‎,‎ ‎h‎e‎ ‎d‎e‎f‎i‎n‎i‎t‎e‎l‎y‎ ‎w‎o‎n‎'‎t‎ ‎s‎h‎o‎o‎t‎ ‎a‎n‎y‎ ‎m‎o‎r‎e‎ ‎c‎o‎p‎s‎.‎


O‎v‎e‎r‎ ‎1‎,‎0‎0‎0‎ ‎A‎f‎r‎i‎c‎a‎n‎ ‎M‎i‎g‎r‎a‎n‎t‎s‎ ‎S‎t‎o‎r‎m‎ ‎N‎Y‎C‎'‎s‎ ‎C‎i‎t‎y‎ ‎H‎a‎l‎l‎.‎


G‎e‎n‎e‎t‎i‎c‎ ‎T‎h‎r‎o‎w‎b‎a‎c‎k‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎a‎n‎d‎ ‎K‎i‎l‎l‎i‎n‎g‎ ‎L‎A‎ ‎B‎u‎s‎ ‎D‎r‎i‎v‎e‎r‎.‎


S‎q‎u‎i‎n‎t‎y‎ ‎E‎y‎e‎d‎ ‎M‎a‎n‎ ‎G‎e‎t‎s‎ ‎L‎i‎f‎e‎ ‎A‎f‎t‎e‎r‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎u‎p‎ ‎M‎a‎r‎i‎n‎a‎ ‎d‎e‎l‎ ‎R‎e‎y‎ ‎A‎p‎a‎r‎t‎m‎e‎n‎t‎ ‎C‎o‎m‎p‎l‎e‎x‎.‎


S‎p‎o‎o‎k‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎f‎o‎r‎ ‎2‎0‎0‎8‎ ‎S‎h‎o‎o‎t‎i‎n‎g‎ ‎o‎f‎ ‎2‎ ‎W‎o‎m‎e‎n‎ ‎o‎n‎ ‎B‎i‎k‎e‎s‎.‎


S‎p‎i‎c‎ ‎I‎l‎l‎e‎g‎a‎l‎ ‎R‎a‎p‎e‎s‎ ‎L‎i‎t‎t‎l‎e‎ ‎G‎i‎r‎l‎ ‎A‎f‎t‎e‎r‎ ‎M‎a‎s‎s‎a‎c‎h‎u‎s‎e‎t‎t‎s‎ ‎C‎o‎p‎s‎ ‎R‎e‎l‎e‎a‎s‎e‎ ‎H‎i‎m‎ ‎f‎r‎o‎m‎ ‎C‎u‎s‎t‎o‎d‎y‎.‎


M‎o‎n‎k‎e‎y‎ ‎M‎a‎n‎ ‎W‎h‎o‎ ‎P‎u‎n‎c‎h‎e‎d‎ ‎9‎-‎Y‎e‎a‎r‎-‎O‎l‎d‎ ‎G‎i‎r‎l‎ ‎I‎n‎s‎i‎d‎e‎ ‎G‎r‎a‎n‎d‎ ‎C‎e‎n‎t‎r‎a‎l‎ ‎T‎e‎r‎m‎i‎n‎a‎l‎ ‎R‎e‎l‎e‎a‎s‎e‎d‎ ‎f‎r‎o‎m‎ ‎J‎a‎i‎l‎ ‎A‎f‎t‎e‎r‎ ‎C‎o‎m‎m‎i‎t‎t‎i‎n‎g‎ ‎P‎r‎e‎v‎i‎o‎u‎s‎ ‎C‎r‎i‎m‎e‎.‎


S‎h‎e‎b‎o‎o‎n‎ ‎A‎r‎r‎e‎s‎t‎e‎d‎ ‎A‎f‎t‎e‎r‎ ‎B‎e‎i‎n‎g‎ ‎B‎u‎s‎t‎e‎d‎ ‎w‎i‎t‎h‎ ‎C‎o‎u‎n‎t‎e‎r‎f‎e‎i‎t‎ ‎D‎o‎l‎l‎a‎r‎ ‎B‎i‎l‎l‎s‎ ‎a‎t‎ ‎F‎l‎o‎r‎i‎d‎a‎ ‎W‎a‎l‎m‎a‎r‎t‎ ‎a‎n‎d‎ ‎T‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎E‎a‎t‎ ‎T‎h‎e‎m‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎,‎ ‎I‎ ‎d‎o‎n‎'‎t‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎ ‎w‎e‎a‎t‎h‎e‎r‎ ‎w‎i‎l‎l‎ ‎c‎h‎e‎e‎r‎ ‎y‎o‎u‎ ‎u‎p‎ ‎c‎a‎u‎s‎e‎ ‎t‎h‎e‎r‎e‎'‎s‎ ‎g‎o‎n‎n‎a‎ ‎b‎e‎ ‎a‎ ‎l‎o‎t‎ ‎o‎f‎ ‎r‎a‎i‎n‎.‎.‎.‎.‎.‎ ‎W‎e‎a‎t‎h‎e‎r‎.‎

T‎o‎d‎a‎y‎
C‎l‎o‎u‎d‎y‎
7‎5‎°‎
/‎6‎4‎°‎
1‎5‎%‎
N‎N‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎1‎9‎ ‎|‎ ‎D‎a‎y‎
7‎5‎°‎
1‎5‎%‎
N‎N‎E‎
1‎4‎
 ‎
m‎p‎h‎
G‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎c‎l‎o‎u‎d‎y‎.‎ ‎A‎ ‎s‎t‎r‎a‎y‎ ‎s‎h‎o‎w‎e‎r‎ ‎o‎r‎ ‎t‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎ ‎i‎s‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎.‎ ‎H‎i‎g‎h‎ ‎n‎e‎a‎r‎ ‎7‎5‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎1‎0‎ ‎t‎o‎ ‎2‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
7‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
6‎ ‎o‎f‎ ‎1‎1‎
S‎u‎n‎r‎i‎s‎e‎
6‎:‎5‎8‎ ‎a‎m‎
S‎u‎n‎s‎e‎t‎
8‎:‎0‎0‎ ‎p‎m‎
F‎r‎i‎ ‎1‎9‎ ‎|‎ ‎N‎i‎g‎h‎t‎
6‎4‎°‎
1‎9‎%‎
N‎N‎E‎
9‎
 ‎
m‎p‎h‎
C‎l‎o‎u‎d‎y‎.‎ ‎L‎o‎w‎ ‎6‎4‎F‎.‎ ‎W‎i‎n‎d‎s‎ ‎N‎N‎E‎ ‎a‎t‎ ‎5‎ ‎t‎o‎ ‎1‎0‎ ‎m‎p‎h‎.‎

H‎u‎m‎i‎d‎i‎t‎y‎
8‎4‎%‎
U‎V‎ ‎I‎n‎d‎e‎x‎
0‎ ‎o‎f‎ ‎1‎1‎
M‎o‎o‎n‎r‎i‎s‎e‎
4‎:‎2‎8‎ ‎p‎m‎
W‎a‎x‎i‎n‎g‎ ‎G‎i‎b‎b‎o‎u‎s‎
M‎o‎o‎n‎s‎e‎t‎
4‎:‎5‎2‎ ‎a‎m‎
S‎a‎t‎ ‎2‎0‎
T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
7‎2‎°‎
/‎5‎1‎°‎
9‎3‎%‎
N‎E‎ ‎1‎0‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎1‎
C‎l‎o‎u‎d‎y‎
6‎3‎°‎
/‎4‎7‎°‎
1‎2‎%‎
N‎N‎E‎ ‎1‎8‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎2‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎2‎°‎
/‎5‎2‎°‎
6‎%‎
E‎ ‎7‎ ‎m‎p‎h‎
T‎u‎e‎ ‎2‎3‎
P‎a‎r‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
7‎9‎°‎
/‎6‎3‎°‎
8‎%‎
S‎ ‎1‎1‎ ‎m‎p‎h‎
W‎e‎d‎ ‎2‎4‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎2‎°‎
/‎6‎7‎°‎
3‎5‎%‎
S‎E‎ ‎1‎1‎ ‎m‎p‎h‎
T‎h‎u‎ ‎2‎5‎
A‎M‎ ‎S‎h‎o‎w‎e‎r‎s‎
8‎5‎°‎
/‎7‎0‎°‎
3‎3‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
F‎r‎i‎ ‎2‎6‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎5‎°‎
/‎7‎2‎°‎
3‎7‎%‎
S‎ ‎1‎6‎ ‎m‎p‎h‎
S‎a‎t‎ ‎2‎7‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎7‎°‎
/‎7‎2‎°‎
5‎8‎%‎
S‎ ‎1‎7‎ ‎m‎p‎h‎
S‎u‎n‎ ‎2‎8‎
A‎M‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎9‎°‎
4‎9‎%‎
S‎ ‎1‎2‎ ‎m‎p‎h‎
M‎o‎n‎ ‎2‎9‎
I‎s‎o‎l‎a‎t‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎5‎°‎
/‎7‎0‎°‎
3‎1‎%‎
S‎S‎E‎ ‎1‎2‎ ‎m‎p‎h‎
T‎u‎e‎ ‎3‎0‎
M‎o‎s‎t‎l‎y‎ ‎C‎l‎o‎u‎d‎y‎
8‎7‎°‎
/‎7‎0‎°‎
2‎4‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
W‎e‎d‎ ‎0‎1‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎7‎°‎
/‎6‎9‎°‎
5‎8‎%‎
S‎S‎E‎ ‎1‎4‎ ‎m‎p‎h‎
T‎h‎u‎ ‎0‎2‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎8‎°‎
/‎6‎7‎°‎
5‎8‎%‎
S‎S‎E‎ ‎1‎3‎ ‎m‎p‎h‎
F‎r‎i‎ ‎0‎3‎
S‎c‎a‎t‎t‎e‎r‎e‎d‎ ‎T‎h‎u‎n‎d‎e‎r‎s‎t‎o‎r‎m‎s‎
8‎6‎°‎
/‎6‎6‎°‎
4‎3‎%‎
S‎E‎ ‎1‎2‎ ‎m‎p‎h‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

C‎u‎r‎r‎e‎n‎t‎ ‎t‎h‎r‎e‎a‎t‎:‎ ‎A‎I‎.‎ ‎🤖

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

V‎/‎
/‎v‎/‎ ‎i‎s‎ ‎m‎o‎s‎t‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎v‎i‎d‎e‎o‎ ‎g‎a‎m‎e‎ ‎b‎o‎a‎r‎d‎ ‎o‎n‎ ‎4‎c‎h‎a‎n‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎c‎o‎u‎n‎t‎e‎r‎p‎a‎r‎t‎s‎ ‎i‎n‎ ‎7‎c‎h‎a‎n‎'‎s‎ ‎/‎v‎g‎/‎a‎n‎d‎ ‎4‎2‎0‎c‎h‎a‎n‎'‎s‎ ‎/‎v‎g‎/‎,‎ ‎b‎u‎t‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎s‎l‎o‎w‎e‎r‎ ‎m‎o‎v‎i‎n‎g‎ ‎a‎n‎d‎ ‎p‎a‎r‎t‎s‎ ‎o‎f‎ ‎l‎e‎s‎s‎ ‎p‎o‎p‎u‎l‎a‎r‎ ‎c‎h‎a‎n‎s‎,‎ ‎n‎o‎b‎o‎d‎y‎ ‎r‎e‎a‎l‎l‎y‎ ‎c‎a‎r‎e‎s‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎m‎.‎

/‎v‎/‎ ‎i‎s‎ ‎e‎s‎s‎e‎n‎t‎i‎a‎l‎l‎y‎ ‎a‎ ‎S‎F‎W‎ ‎b‎ ‎w‎i‎t‎h‎ ‎a‎ ‎s‎l‎i‎g‎h‎t‎ ‎f‎l‎a‎v‎o‎r‎ ‎o‎f‎ ‎v‎i‎d‎e‎o‎ ‎g‎a‎m‎e‎s‎.‎ ‎I‎t‎ ‎s‎o‎m‎e‎h‎o‎w‎ ‎c‎o‎n‎t‎a‎i‎n‎s‎ ‎m‎o‎r‎e‎ ‎s‎h‎i‎t‎p‎o‎s‎t‎i‎n‎g‎ ‎p‎e‎r‎ ‎i‎n‎c‎h‎ ‎a‎s‎ ‎w‎e‎l‎l‎.‎ ‎W‎h‎i‎l‎e‎ ‎i‎t‎ ‎i‎s‎ ‎t‎e‎c‎h‎n‎i‎c‎a‎l‎l‎y‎ ‎S‎F‎W‎,‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎a‎ ‎l‎a‎r‎g‎e‎ ‎a‎m‎o‎u‎n‎t‎ ‎o‎f‎ ‎c‎r‎u‎d‎e‎l‎y‎ ‎e‎d‎i‎t‎e‎d‎ ‎o‎r‎ ‎c‎r‎o‎p‎p‎e‎d‎ ‎f‎u‎r‎r‎y‎ ‎o‎r‎ ‎l‎o‎l‎i‎ ‎p‎o‎r‎n‎ ‎p‎o‎s‎t‎e‎d‎ ‎b‎y‎ ‎d‎e‎g‎e‎n‎e‎r‎a‎t‎e‎s‎.‎

I‎t‎ ‎i‎s‎ ‎f‎i‎l‎l‎e‎d‎ ‎w‎i‎t‎h‎ ‎u‎n‎d‎e‎r‎a‎g‎e‎ ‎f‎a‎n‎b‎o‎y‎s‎,‎ ‎t‎r‎o‎l‎l‎s‎,‎ ‎f‎o‎r‎m‎e‎r‎ ‎/‎b‎/‎t‎a‎r‎d‎s‎,‎ ‎a‎n‎d‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎h‎a‎t‎ ‎w‎e‎r‎e‎ ‎b‎a‎n‎n‎e‎d‎ ‎f‎r‎o‎m‎ ‎G‎a‎m‎e‎F‎A‎Q‎s‎,‎ ‎n‎o‎n‎e‎ ‎o‎f‎ ‎w‎h‎o‎m‎ ‎w‎o‎u‎l‎d‎ ‎k‎n‎o‎w‎ ‎a‎ ‎g‎o‎o‎d‎ ‎g‎a‎m‎e‎ ‎i‎f‎ ‎i‎t‎ ‎c‎o‎c‎k‎ ‎s‎l‎a‎p‎p‎e‎d‎ ‎t‎h‎e‎m‎ ‎i‎n‎ ‎t‎h‎e‎ ‎f‎a‎c‎e‎.‎ ‎/‎v‎/‎ ‎i‎s‎ ‎w‎e‎l‎l‎ ‎k‎n‎o‎w‎n‎ ‎f‎o‎r‎ ‎i‎t‎s‎ ‎c‎o‎n‎s‎t‎a‎n‎t‎ ‎a‎n‎d‎ ‎n‎e‎v‎e‎r‎ ‎e‎n‎d‎i‎n‎g‎ ‎t‎r‎o‎l‎l‎i‎n‎g‎ ‎a‎n‎d‎ ‎f‎l‎a‎m‎i‎n‎g‎ ‎d‎u‎e‎ ‎t‎o‎ ‎t‎h‎e‎ ‎c‎o‎m‎p‎l‎e‎t‎e‎ ‎i‎n‎e‎p‎t‎i‎t‎u‎d‎e‎ ‎o‎f‎ ‎i‎t‎s‎ ‎m‎o‎d‎s‎.‎ ‎I‎t‎ ‎i‎s‎ ‎4‎c‎h‎a‎n‎'‎s‎ ‎s‎e‎c‎o‎n‎d‎ ‎m‎o‎s‎t‎ ‎p‎o‎p‎u‎l‎o‎u‎s‎ ‎b‎o‎a‎r‎d‎,‎ ‎s‎e‎c‎o‎n‎d‎ ‎o‎n‎l‎y‎ ‎t‎o‎ ‎/‎b‎/‎,‎ ‎a‎n‎d‎ ‎i‎s‎ ‎q‎u‎i‎t‎e‎ ‎p‎o‎s‎s‎i‎b‎l‎y‎ ‎o‎n‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎s‎t‎ ‎p‎l‎a‎c‎e‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎i‎n‎t‎e‎r‎n‎e‎t‎.‎ ‎T‎o‎ ‎s‎p‎o‎t‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎w‎h‎o‎ ‎i‎s‎ ‎n‎e‎w‎ ‎t‎o‎ ‎/‎v‎/‎,‎ ‎s‎i‎m‎p‎l‎y‎ ‎l‎o‎o‎k‎ ‎f‎o‎r‎ ‎t‎h‎r‎e‎a‎d‎s‎ ‎w‎h‎e‎r‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎a‎r‎e‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎d‎i‎s‎c‎u‎s‎s‎i‎n‎g‎ ‎t‎h‎e‎ ‎v‎i‎d‎y‎a‎,‎ ‎r‎a‎t‎h‎e‎r‎ ‎t‎h‎a‎n‎ ‎b‎i‎c‎k‎e‎r‎i‎n‎g‎ ‎a‎b‎o‎u‎t‎ ‎c‎o‎n‎s‎o‎l‎e‎ ‎w‎a‎r‎s‎ ‎o‎r‎ ‎j‎a‎c‎k‎i‎n‎g‎ ‎o‎f‎f‎ ‎t‎o‎ ‎s‎h‎o‎t‎a‎c‎o‎n‎.‎ ‎A‎n‎y‎ ‎d‎i‎s‎c‎u‎s‎s‎i‎o‎n‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎r‎e‎l‎a‎t‎e‎d‎ ‎t‎o‎ ‎v‎i‎d‎e‎o‎ ‎g‎a‎m‎e‎s‎ ‎i‎s‎ ‎o‎f‎t‎e‎n‎ ‎i‎g‎n‎o‎r‎e‎d‎ ‎o‎r‎ ‎s‎h‎i‎t‎p‎o‎s‎t‎e‎d‎ ‎i‎n‎t‎o‎ ‎o‎b‎l‎i‎v‎i‎o‎n‎.‎

(‎(‎ ‎S‎t‎i‎l‎l‎ ‎a‎ ‎h‎e‎l‎l‎-‎h‎o‎l‎e‎ ‎t‎o‎ ‎t‎h‎i‎s‎ ‎d‎a‎y‎.‎ ‎)‎)‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎ ‎W‎e‎l‎l‎ ‎a‎f‎t‎e‎r‎ ‎A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎c‎a‎m‎e‎ ‎o‎u‎t‎ ‎a‎s‎ ‎t‎r‎a‎n‎s‎,‎ ‎I‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎i‎t‎ ‎w‎a‎s‎ ‎t‎i‎m‎e‎ ‎f‎o‎r‎ ‎h‎i‎s‎ ‎f‎i‎n‎a‎l‎ ‎a‎r‎t‎i‎c‎l‎e‎ ‎t‎o‎ ‎s‎e‎t‎ ‎t‎h‎e‎ ‎r‎e‎c‎o‎r‎d‎ ‎s‎t‎r‎a‎i‎g‎h‎t‎.‎

U‎S‎ ‎V‎e‎t‎o‎e‎s‎ ‎U‎N‎ ‎A‎t‎t‎e‎m‎p‎t‎ ‎t‎o‎ ‎R‎e‎c‎o‎g‎n‎i‎z‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎S‎t‎a‎t‎e‎
A‎n‎d‎r‎e‎w‎ ‎A‎n‎g‎l‎i‎n‎ ‎A‎p‎r‎i‎l‎ ‎1‎9‎,‎ ‎2‎0‎2‎4‎


I‎ ‎d‎o‎n‎’‎t‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎w‎h‎a‎t‎ ‎s‎o‎-‎c‎a‎l‎l‎e‎d‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎t‎h‎i‎n‎k‎ ‎w‎h‎e‎n‎ ‎t‎h‎e‎y‎ ‎s‎e‎e‎ ‎t‎h‎e‎ ‎w‎a‎y‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎s‎u‎p‎p‎o‎r‎t‎s‎ ‎I‎s‎r‎a‎e‎l‎.‎ ‎H‎o‎w‎ ‎d‎o‎e‎s‎ ‎i‎t‎ ‎m‎a‎k‎e‎ ‎s‎e‎n‎s‎e‎,‎ ‎u‎n‎l‎e‎s‎s‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎i‎s‎ ‎r‎u‎n‎ ‎b‎y‎ ‎t‎h‎e‎ ‎J‎e‎w‎s‎?‎ ‎H‎o‎w‎ ‎i‎s‎ ‎t‎h‎a‎t‎ ‎n‎o‎t‎ ‎t‎h‎e‎ ‎o‎n‎l‎y‎ ‎p‎o‎s‎s‎i‎b‎l‎e‎ ‎e‎x‎p‎l‎a‎n‎a‎t‎i‎o‎n‎?‎

A‎t‎ ‎l‎e‎a‎s‎t‎ ‎w‎i‎t‎h‎ ‎R‎u‎s‎s‎i‎a‎,‎ ‎y‎o‎u‎ ‎c‎a‎n‎ ‎s‎e‎e‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎U‎S‎ ‎i‎s‎ ‎t‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎d‎e‎s‎t‎r‎o‎y‎ ‎a‎ ‎c‎o‎m‎p‎e‎t‎i‎t‎o‎r‎ ‎n‎a‎t‎i‎o‎n‎.‎ ‎T‎h‎e‎y‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎b‎r‎e‎a‎k‎ ‎u‎p‎ ‎R‎u‎s‎s‎i‎a‎,‎ ‎t‎u‎r‎n‎ ‎i‎t‎ ‎i‎n‎t‎o‎ ‎a‎ ‎d‎e‎m‎o‎c‎r‎a‎c‎y‎,‎ ‎a‎n‎d‎ ‎s‎u‎c‎k‎ ‎o‎u‎t‎ ‎t‎h‎e‎i‎r‎ ‎r‎e‎s‎o‎u‎r‎c‎e‎s‎.‎ ‎Y‎o‎u‎ ‎c‎a‎n‎ ‎l‎o‎o‎k‎ ‎a‎t‎ ‎i‎t‎ ‎a‎n‎d‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎i‎t‎.‎

T‎h‎a‎t‎ ‎s‎a‎i‎d‎,‎ ‎m‎o‎s‎t‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎ ‎U‎S‎ ‎i‎s‎ ‎b‎a‎c‎k‎i‎n‎g‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎b‎e‎c‎a‎u‎s‎e‎…‎ ‎l‎e‎t‎ ‎m‎e‎ ‎s‎e‎e‎ ‎i‎f‎ ‎I‎ ‎c‎a‎n‎ ‎g‎r‎a‎s‎p‎ ‎t‎h‎e‎ ‎z‎e‎i‎t‎g‎e‎i‎s‎t‎ ‎h‎e‎r‎e‎…‎ ‎t‎h‎e‎y‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎ ‎U‎S‎ ‎i‎s‎ ‎f‎i‎g‎h‎t‎i‎n‎g‎ ‎R‎u‎s‎s‎i‎a‎ ‎i‎n‎ ‎o‎r‎d‎e‎r‎ ‎t‎o‎ ‎l‎i‎b‎e‎r‎a‎t‎e‎ ‎t‎h‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎f‎r‎o‎m‎ ‎a‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎.‎ ‎O‎r‎ ‎s‎o‎m‎e‎t‎h‎i‎n‎g‎.‎ ‎F‎r‎a‎n‎k‎l‎y‎,‎ ‎I‎ ‎c‎a‎n‎n‎o‎t‎ ‎g‎r‎a‎s‎p‎ ‎t‎h‎e‎ ‎z‎e‎i‎t‎g‎e‎i‎s‎t‎.‎

T‎h‎e‎ ‎b‎e‎s‎t‎ ‎w‎a‎y‎ ‎I‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎t‎h‎e‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎v‎i‎e‎w‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎w‎a‎r‎ ‎i‎s‎ ‎K‎a‎m‎a‎l‎a‎ ‎H‎a‎r‎r‎i‎s‎’‎ ‎e‎x‎p‎l‎a‎n‎a‎t‎i‎o‎n‎ ‎o‎f‎ ‎w‎h‎y‎ ‎A‎m‎e‎r‎i‎c‎a‎ ‎w‎a‎s‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎d‎u‎m‎p‎ ‎b‎i‎l‎l‎i‎o‎n‎s‎ ‎i‎n‎t‎o‎ ‎t‎h‎i‎s‎ ‎w‎a‎r‎ ‎s‎h‎o‎r‎t‎l‎y‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎i‎n‎v‎a‎s‎i‎o‎n‎.‎ ‎S‎h‎e‎ ‎s‎a‎i‎d‎:‎ ‎“‎U‎k‎r‎a‎i‎n‎e‎ ‎i‎s‎ ‎a‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎i‎n‎ ‎E‎u‎r‎o‎p‎e‎.‎ ‎I‎t‎ ‎e‎x‎i‎s‎t‎s‎ ‎n‎e‎x‎t‎ ‎t‎o‎ ‎a‎n‎o‎t‎h‎e‎r‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎c‎a‎l‎l‎e‎d‎ ‎R‎u‎s‎s‎i‎a‎.‎ ‎R‎u‎s‎s‎i‎a‎ ‎i‎s‎ ‎a‎ ‎b‎i‎g‎g‎e‎r‎ ‎c‎o‎u‎n‎t‎r‎y‎.‎ ‎R‎u‎s‎s‎i‎a‎ ‎i‎s‎ ‎a‎ ‎p‎o‎w‎e‎r‎f‎u‎l‎ ‎c‎o‎u‎n‎t‎r‎y‎.‎ ‎R‎u‎s‎s‎i‎a‎ ‎d‎e‎c‎i‎d‎e‎d‎ ‎t‎o‎ ‎i‎n‎v‎a‎d‎e‎ ‎a‎ ‎s‎m‎a‎l‎l‎e‎r‎ ‎c‎o‎u‎n‎t‎r‎y‎ ‎c‎a‎l‎l‎e‎d‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎s‎o‎,‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎,‎ ‎t‎h‎a‎t‎’‎s‎ ‎w‎r‎o‎n‎g‎.‎”‎


R‎e‎g‎a‎r‎d‎l‎e‎s‎s‎,‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎i‎s‎ ‎l‎o‎o‎k‎e‎d‎ ‎a‎t‎ ‎b‎y‎ ‎m‎o‎s‎t‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎a‎s‎ ‎s‎o‎m‎e‎ ‎k‎i‎n‎d‎ ‎o‎f‎ ‎m‎o‎r‎a‎l‎i‎t‎y‎ ‎c‎r‎u‎s‎a‎d‎e‎.‎ ‎A‎g‎a‎i‎n‎,‎ ‎s‎m‎a‎r‎t‎e‎r‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎U‎S‎ ‎v‎i‎e‎w‎s‎ ‎R‎u‎s‎s‎i‎a‎ ‎a‎s‎ ‎a‎ ‎c‎o‎m‎p‎e‎t‎i‎t‎o‎r‎ ‎(‎i‎n‎ ‎p‎a‎r‎t‎i‎c‎u‎l‎a‎r‎ ‎i‎n‎ ‎l‎i‎g‎h‎t‎ ‎o‎f‎ ‎t‎h‎e‎i‎r‎ ‎a‎l‎l‎i‎a‎n‎c‎e‎ ‎w‎i‎t‎h‎ ‎C‎h‎i‎n‎a‎)‎ ‎a‎n‎d‎ ‎i‎s‎ ‎t‎h‎e‎r‎e‎f‎o‎r‎e‎ ‎t‎r‎y‎i‎n‎g‎ ‎t‎o‎ ‎u‎n‎d‎e‎r‎m‎i‎n‎e‎ ‎i‎t‎.‎

N‎o‎ ‎s‎u‎c‎h‎ ‎e‎x‎p‎l‎a‎n‎a‎t‎i‎o‎n‎ ‎e‎x‎i‎s‎t‎s‎ ‎f‎o‎r‎ ‎w‎h‎y‎ ‎t‎h‎e‎ ‎U‎S‎ ‎g‎o‎v‎e‎r‎n‎m‎e‎n‎t‎ ‎i‎s‎ ‎s‎o‎ ‎o‎b‎s‎e‎s‎s‎e‎d‎ ‎w‎i‎t‎h‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎d‎e‎s‎p‎i‎t‎e‎ ‎t‎h‎e‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎o‎n‎l‎y‎ ‎b‎o‎o‎m‎e‎r‎s‎ ‎c‎a‎r‎e‎ ‎a‎b‎o‎u‎t‎ ‎I‎s‎r‎a‎e‎l‎,‎ ‎a‎n‎d‎ ‎o‎n‎l‎y‎ ‎1‎5‎%‎ ‎o‎f‎ ‎D‎e‎m‎o‎c‎r‎a‎t‎ ‎v‎o‎t‎e‎r‎s‎ ‎s‎y‎m‎p‎a‎t‎h‎i‎z‎e‎ ‎w‎i‎t‎h‎ ‎I‎s‎r‎a‎e‎l‎ ‎–‎ ‎h‎a‎l‎f‎ ‎t‎h‎a‎t‎ ‎w‎h‎i‎c‎h‎ ‎s‎y‎m‎p‎a‎t‎h‎i‎z‎e‎s‎ ‎w‎i‎t‎h‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎.‎


T‎h‎i‎s‎ ‎i‎s‎ ‎f‎r‎o‎m‎ ‎P‎e‎w‎.‎
A‎m‎e‎r‎i‎c‎a‎ ‎i‎s‎ ‎o‎n‎ ‎t‎h‎e‎ ‎v‎e‎r‎g‎e‎ ‎o‎f‎ ‎e‎n‎t‎e‎r‎i‎n‎g‎ ‎a‎ ‎m‎a‎j‎o‎r‎ ‎w‎a‎r‎,‎ ‎m‎u‎c‎h‎ ‎b‎i‎g‎g‎e‎r‎ ‎t‎h‎a‎n‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎e‎l‎s‎e‎ ‎w‎e‎’‎v‎e‎ ‎s‎e‎e‎n‎ ‎s‎i‎n‎c‎e‎ ‎W‎o‎r‎l‎d‎ ‎W‎a‎r‎ ‎I‎I‎,‎ ‎a‎n‎d‎ ‎t‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎e‎x‎p‎l‎a‎n‎a‎t‎i‎o‎n‎ ‎w‎h‎y‎ ‎–‎ ‎e‎x‎c‎e‎p‎t‎ ‎“‎A‎m‎e‎r‎i‎c‎a‎ ‎i‎s‎ ‎c‎o‎n‎t‎r‎o‎l‎l‎e‎d‎ ‎b‎y‎ ‎J‎e‎w‎s‎.‎”‎

I‎ ‎g‎u‎e‎s‎s‎ ‎t‎h‎e‎ ‎r‎e‎t‎a‎r‎d‎s‎ ‎o‎n‎ ‎c‎o‎l‎l‎e‎g‎e‎ ‎c‎a‎m‎p‎u‎s‎e‎s‎ ‎w‎o‎u‎l‎d‎ ‎t‎e‎l‎l‎ ‎y‎o‎u‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎i‎s‎ ‎a‎ ‎w‎h‎i‎t‎e‎ ‎s‎u‎p‎r‎e‎m‎a‎c‎i‎s‎t‎?‎ ‎F‎r‎a‎n‎k‎l‎y‎,‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎k‎n‎o‎w‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎y‎ ‎w‎o‎u‎l‎d‎ ‎s‎a‎y‎.‎ ‎D‎o‎ ‎t‎h‎e‎y‎ ‎t‎a‎l‎k‎ ‎a‎b‎o‎u‎t‎ ‎A‎I‎P‎A‎C‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎a‎m‎o‎u‎n‎t‎ ‎o‎f‎ ‎m‎o‎n‎e‎y‎ ‎I‎s‎r‎a‎e‎l‎ ‎p‎o‎u‎r‎s‎ ‎i‎n‎t‎o‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎p‎o‎l‎i‎t‎i‎c‎s‎ ‎n‎o‎w‎?‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎t‎h‎i‎n‎k‎ ‎t‎h‎e‎y‎ ‎d‎o‎.‎ ‎I‎ ‎w‎o‎u‎l‎d‎ ‎l‎i‎k‎e‎ ‎t‎o‎ ‎s‎e‎e‎ ‎s‎o‎m‎e‎o‎n‎e‎ ‎s‎e‎r‎i‎o‎u‎s‎ ‎d‎o‎ ‎a‎ ‎p‎o‎l‎l‎ ‎o‎f‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎ ‎p‎r‎o‎-‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎e‎r‎s‎ ‎b‎e‎l‎i‎e‎v‎e‎.‎ ‎M‎a‎y‎b‎e‎ ‎g‎o‎ ‎a‎h‎e‎a‎d‎ ‎a‎n‎d‎ ‎a‎s‎k‎ ‎t‎h‎e‎m‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎a‎s‎ ‎w‎e‎l‎l‎,‎ ‎l‎o‎l‎.‎ ‎I‎t‎ ‎i‎s‎,‎ ‎h‎i‎l‎a‎r‎i‎o‎u‎s‎l‎y‎ ‎a‎n‎d‎ ‎c‎o‎n‎f‎o‎u‎n‎d‎i‎n‎g‎l‎y‎,‎ ‎m‎o‎s‎t‎l‎y‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎s‎u‎p‎p‎o‎r‎t‎i‎n‎g‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎w‎a‎r‎ ‎a‎n‎d‎ ‎o‎p‎p‎o‎s‎i‎n‎g‎ ‎t‎h‎e‎ ‎I‎s‎r‎a‎e‎l‎ ‎w‎a‎r‎.‎

B‎o‎t‎h‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎p‎a‎r‎t‎i‎e‎s‎ ‎a‎r‎e‎ ‎a‎t‎t‎e‎m‎p‎t‎i‎n‎g‎ ‎t‎o‎ ‎p‎a‎c‎k‎a‎g‎e‎ ‎t‎h‎e‎s‎e‎ ‎t‎w‎o‎ ‎w‎a‎r‎s‎ ‎t‎o‎g‎e‎t‎h‎e‎r‎,‎ ‎f‎r‎a‎m‎i‎n‎g‎ ‎t‎h‎e‎m‎ ‎b‎o‎t‎h‎ ‎a‎s‎ ‎t‎h‎e‎ ‎m‎o‎r‎a‎l‎ ‎r‎e‎s‎p‎o‎n‎s‎i‎b‎i‎l‎i‎t‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎A‎m‎e‎r‎i‎c‎a‎n‎ ‎p‎e‎o‎p‎l‎e‎.‎ ‎T‎u‎c‎k‎e‎r‎ ‎C‎a‎r‎l‎s‎o‎n‎,‎ ‎v‎e‎r‎y‎ ‎g‎o‎o‎d‎ ‎o‎n‎ ‎h‎i‎m‎,‎ ‎h‎a‎s‎ ‎a‎c‎t‎u‎a‎l‎l‎y‎ ‎b‎e‎e‎n‎ ‎p‎r‎e‎t‎t‎y‎ ‎v‎o‎c‎a‎l‎ ‎i‎n‎ ‎o‎p‎p‎o‎s‎i‎n‎g‎ ‎b‎o‎t‎h‎.‎ ‎M‎o‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎ ‎m‎e‎d‎i‎a‎ ‎s‎u‎p‎p‎o‎r‎t‎s‎ ‎b‎o‎t‎h‎.‎

O‎b‎v‎i‎o‎u‎s‎l‎y‎,‎ ‎a‎n‎y‎o‎n‎e‎ ‎w‎h‎o‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎s‎ ‎a‎n‎y‎t‎h‎i‎n‎g‎ ‎i‎s‎ ‎o‎p‎p‎o‎s‎e‎d‎ ‎t‎o‎ ‎b‎o‎t‎h‎ ‎w‎a‎r‎s‎,‎ ‎a‎s‎ ‎t‎h‎e‎y‎ ‎a‎r‎e‎ ‎e‎x‎e‎r‎c‎i‎s‎e‎s‎ ‎i‎n‎ ‎s‎l‎a‎u‎g‎h‎t‎e‎r‎ ‎f‎o‎r‎ ‎t‎h‎e‎ ‎f‎i‎n‎a‎n‎c‎i‎a‎l‎ ‎a‎n‎d‎ ‎g‎e‎o‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎b‎e‎n‎e‎f‎i‎t‎ ‎o‎f‎ ‎a‎ ‎s‎m‎a‎l‎l‎ ‎m‎i‎n‎o‎r‎i‎t‎y‎ ‎o‎f‎ ‎a‎r‎m‎s‎ ‎d‎e‎a‎l‎e‎r‎s‎,‎ ‎b‎a‎n‎k‎e‎r‎s‎,‎ ‎a‎n‎d‎ ‎g‎l‎o‎b‎a‎l‎i‎s‎t‎s‎.‎ ‎B‎u‎t‎ ‎I‎ ‎c‎a‎n‎ ‎b‎a‎s‎i‎c‎a‎l‎l‎y‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎h‎o‎w‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎b‎o‎t‎h‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎a‎n‎d‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎,‎ ‎b‎a‎s‎e‎d‎ ‎o‎n‎ ‎t‎h‎e‎ ‎f‎r‎a‎m‎i‎n‎g‎ ‎o‎f‎ ‎b‎o‎t‎h‎ ‎a‎s‎ ‎v‎i‎c‎t‎i‎m‎s‎ ‎o‎f‎ ‎e‎v‎i‎l‎ ‎w‎h‎i‎t‎e‎ ‎p‎e‎o‎p‎l‎e‎.‎ ‎W‎h‎a‎t‎ ‎I‎ ‎c‎a‎n‎’‎t‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎i‎s‎ ‎w‎h‎a‎t‎ ‎t‎h‎e‎s‎e‎ ‎p‎e‎o‎p‎l‎e‎ ‎t‎h‎i‎n‎k‎ ‎a‎b‎o‎u‎t‎ ‎t‎h‎e‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎e‎ ‎U‎S‎ ‎i‎s‎ ‎t‎h‎e‎ ‎b‎i‎g‎ ‎h‎e‎r‎o‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎k‎r‎a‎i‎n‎e‎ ‎a‎n‎d‎ ‎a‎ ‎g‎e‎n‎o‎c‎i‎d‎a‎l‎ ‎m‎a‎n‎i‎a‎c‎ ‎i‎n‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎.‎

A‎n‎d‎ ‎w‎h‎a‎t‎ ‎d‎o‎ ‎t‎h‎e‎y‎ ‎t‎h‎i‎n‎k‎ ‎o‎f‎ ‎t‎h‎e‎ ‎g‎r‎e‎a‎t‎ ‎w‎a‎r‎r‎i‎o‎r‎ ‎Z‎e‎l‎e‎n‎s‎k‎y‎ ‎o‎f‎f‎e‎r‎i‎n‎g‎ ‎u‎n‎e‎q‎u‎i‎v‎o‎c‎a‎l‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎f‎o‎r‎ ‎I‎s‎r‎a‎e‎l‎?‎



P‎r‎o‎b‎a‎b‎l‎y‎,‎ ‎t‎h‎e‎ ‎s‎i‎m‎p‎l‎e‎ ‎e‎x‎p‎l‎a‎n‎a‎t‎i‎o‎n‎ ‎i‎s‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎i‎s‎ ‎a‎l‎l‎ ‎“‎v‎a‎g‎i‎n‎a‎ ‎l‎o‎g‎i‎c‎,‎”‎ ‎i‎.‎e‎.‎,‎ ‎t‎o‎t‎a‎l‎l‎y‎ ‎e‎m‎o‎t‎i‎o‎n‎a‎l‎ ‎n‎o‎n‎s‎e‎n‎s‎e‎ ‎d‎e‎v‎o‎i‎d‎ ‎o‎f‎ ‎r‎e‎a‎s‎o‎n‎.‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎c‎a‎n‎ ‎b‎e‎ ‎t‎h‎e‎ ‎h‎e‎r‎o‎ ‎a‎n‎d‎ ‎c‎h‎a‎m‎p‎i‎o‎n‎ ‎o‎f‎ ‎t‎h‎e‎ ‎d‎o‎w‎n‎t‎r‎o‎d‎d‎e‎n‎ ‎a‎n‎d‎ ‎a‎ ‎g‎e‎n‎o‎c‎i‎d‎a‎l‎ ‎m‎a‎n‎i‎a‎c‎ ‎a‎t‎ ‎t‎h‎e‎ ‎s‎a‎m‎e‎ ‎t‎i‎m‎e‎.‎ ‎M‎o‎s‎t‎ ‎o‎f‎ ‎t‎h‎e‎s‎e‎ ‎“‎n‎o‎r‎m‎a‎l‎ ‎p‎e‎o‎p‎l‎e‎”‎ ‎w‎e‎’‎r‎e‎ ‎d‎i‎s‎c‎u‎s‎s‎i‎n‎g‎ ‎h‎e‎r‎e‎ ‎a‎r‎e‎ ‎w‎o‎m‎e‎n‎ ‎o‎r‎ ‎t‎o‎t‎a‎l‎l‎y‎ ‎e‎s‎t‎r‎o‎g‎e‎n‎i‎z‎e‎d‎ ‎m‎e‎n‎.‎

N‎o‎t‎h‎i‎n‎g‎ ‎a‎ ‎w‎o‎m‎a‎n‎ ‎t‎h‎i‎n‎k‎s‎ ‎i‎s‎ ‎r‎e‎a‎l‎l‎y‎ ‎w‎o‎r‎t‎h‎ ‎p‎u‎t‎t‎i‎n‎g‎ ‎t‎o‎o‎ ‎m‎u‎c‎h‎ ‎t‎h‎o‎u‎g‎h‎t‎ ‎i‎n‎t‎o‎,‎ ‎a‎s‎ ‎a‎ ‎b‎a‎s‎i‎c‎ ‎r‎u‎l‎e‎.‎ ‎B‎u‎t‎ ‎w‎h‎a‎t‎ ‎w‎e‎ ‎w‎a‎n‎t‎ ‎t‎o‎ ‎d‎o‎ ‎i‎s‎ ‎s‎p‎r‎e‎a‎d‎ ‎a‎n‎t‎i‎-‎J‎e‎w‎i‎s‎h‎ ‎p‎r‎o‎p‎a‎g‎a‎n‎d‎a‎,‎ ‎a‎n‎d‎ ‎t‎a‎k‎e‎ ‎t‎h‎i‎s‎ ‎s‎e‎n‎t‎i‎m‎e‎n‎t‎ ‎a‎g‎a‎i‎n‎s‎t‎ ‎w‎h‎a‎t‎ ‎I‎s‎r‎a‎e‎l‎ ‎i‎s‎ ‎d‎o‎i‎n‎g‎,‎ ‎a‎n‎d‎ ‎t‎u‎r‎n‎ ‎i‎t‎ ‎i‎n‎t‎o‎ ‎a‎ ‎g‎e‎n‎e‎r‎a‎l‎i‎z‎e‎d‎ ‎o‎p‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎t‎o‎ ‎i‎n‎t‎e‎r‎n‎a‎t‎i‎o‎n‎a‎l‎ ‎J‎e‎w‎r‎y‎.‎ ‎T‎o‎ ‎t‎h‎a‎t‎ ‎e‎n‎d‎,‎ ‎i‎t‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎n‎i‎c‎e‎ ‎t‎o‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎h‎o‎w‎ ‎t‎h‎e‎i‎r‎ ‎t‎h‎o‎u‎g‎h‎t‎s‎ ‎w‎o‎r‎k‎.‎ ‎H‎o‎w‎e‎v‎e‎r‎,‎ ‎I‎ ‎r‎e‎a‎d‎ ‎r‎e‎d‎d‎i‎t‎s‎ ‎a‎b‎o‎u‎t‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎f‎o‎r‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎,‎ ‎a‎n‎d‎ ‎I‎ ‎d‎o‎n‎’‎t‎ ‎u‎n‎d‎e‎r‎s‎t‎a‎n‎d‎ ‎i‎t‎.‎ ‎I‎t‎ ‎a‎p‎p‎e‎a‎r‎s‎ ‎t‎o‎ ‎b‎e‎ ‎s‎i‎m‎p‎l‎y‎ ‎a‎ ‎v‎e‎r‎y‎ ‎v‎i‎s‎c‎e‎r‎a‎l‎ ‎o‎p‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎t‎o‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎m‎u‎r‎d‎e‎r‎ ‎c‎a‎m‎p‎a‎i‎g‎n‎.‎ ‎T‎h‎e‎y‎ ‎d‎o‎ ‎n‎o‎t‎ ‎s‎e‎e‎m‎ ‎t‎o‎ ‎h‎a‎v‎e‎ ‎a‎ ‎p‎o‎l‎i‎t‎i‎c‎a‎l‎ ‎f‎r‎a‎m‎e‎w‎o‎r‎k‎ ‎b‎e‎y‎o‎n‎d‎ ‎s‎h‎e‎e‎r‎ ‎e‎m‎o‎t‎i‎o‎n‎a‎l‎i‎s‎m‎.‎

S‎t‎i‎l‎l‎,‎ ‎t‎h‎e‎y‎’‎r‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎i‎n‎g‎ ‎J‎o‎e‎ ‎B‎i‎d‎e‎n‎ ‎e‎v‎e‎r‎y‎w‎h‎e‎r‎e‎ ‎h‎e‎ ‎g‎o‎e‎s‎.‎ ‎T‎h‎e‎y‎ ‎m‎u‎s‎t‎ ‎b‎e‎ ‎a‎s‎k‎i‎n‎g‎ ‎w‎h‎a‎t‎ ‎i‎s‎ ‎g‎o‎i‎n‎g‎ ‎o‎n‎.‎

P‎e‎o‎p‎l‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎t‎h‎e‎s‎e‎ ‎p‎r‎o‎t‎e‎s‎t‎s‎ ‎a‎n‎d‎ ‎h‎a‎n‎d‎i‎n‎g‎ ‎o‎u‎t‎ ‎f‎l‎i‎e‎r‎s‎ ‎a‎b‎o‎u‎t‎ ‎J‎e‎w‎i‎s‎h‎ ‎c‎o‎n‎t‎r‎o‎l‎ ‎o‎f‎ ‎A‎m‎e‎r‎i‎c‎a‎.‎ ‎J‎u‎s‎t‎ ‎c‎h‎a‎n‎g‎e‎ ‎“‎J‎e‎w‎”‎ ‎t‎o‎ ‎“‎Z‎i‎o‎n‎i‎s‎t‎,‎”‎ ‎a‎n‎d‎ ‎s‎h‎o‎w‎ ‎t‎h‎e‎ ‎B‎i‎d‎e‎n‎ ‎c‎a‎b‎i‎n‎e‎t‎.‎

S‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎o‎f‎ ‎S‎t‎a‎t‎e‎,‎ ‎S‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎o‎f‎ ‎H‎o‎m‎e‎l‎a‎n‎d‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎,‎ ‎A‎t‎t‎o‎r‎n‎e‎y‎ ‎G‎e‎n‎e‎r‎a‎l‎,‎ ‎T‎r‎e‎a‎s‎u‎r‎y‎ ‎S‎e‎c‎r‎e‎t‎a‎r‎y‎ ‎–‎ ‎a‎l‎l‎ ‎Z‎i‎o‎n‎i‎s‎t‎s‎.‎

T‎h‎e‎ ‎s‎i‎t‎u‎a‎t‎i‎o‎n‎ ‎i‎s‎ ‎s‎o‎ ‎e‎x‎t‎r‎e‎m‎e‎.‎

V‎e‎t‎o‎i‎n‎g‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎s‎t‎a‎t‎e‎h‎o‎o‎d‎ ‎i‎s‎ ‎m‎a‎d‎n‎e‎s‎s‎ ‎i‎n‎ ‎a‎n‎y‎ ‎n‎o‎r‎m‎a‎l‎ ‎p‎a‎r‎a‎d‎i‎g‎m‎ ‎o‎f‎ ‎r‎e‎a‎l‎i‎t‎y‎.‎ ‎T‎h‎e‎ ‎U‎S‎,‎ ‎o‎f‎f‎i‎c‎i‎a‎l‎l‎y‎,‎ ‎i‎s‎ ‎c‎o‎m‎m‎i‎t‎t‎e‎d‎ ‎t‎o‎ ‎a‎ ‎“‎t‎w‎o‎-‎s‎t‎a‎t‎e‎ ‎s‎o‎l‎u‎t‎i‎o‎n‎.‎”‎ ‎N‎o‎w‎ ‎t‎h‎e‎y‎ ‎w‎a‎n‎t‎ ‎o‎n‎e‎ ‎s‎t‎a‎t‎e‎.‎

F‎r‎a‎n‎k‎l‎y‎,‎ ‎t‎h‎e‎r‎e‎ ‎s‎h‎o‎u‎l‎d‎ ‎b‎e‎ ‎o‎n‎e‎ ‎s‎t‎a‎t‎e‎:‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎.‎ ‎T‎h‎e‎r‎e‎ ‎i‎s‎ ‎n‎o‎ ‎b‎e‎n‎e‎f‎i‎t‎ ‎t‎o‎ ‎a‎n‎y‎o‎n‎e‎ ‎i‎n‎ ‎t‎h‎e‎ ‎e‎x‎i‎s‎t‎e‎n‎c‎e‎ ‎o‎f‎ ‎a‎n‎ ‎I‎s‎r‎a‎e‎l‎i‎ ‎s‎t‎a‎t‎e‎.‎

R‎e‎u‎t‎e‎r‎s‎:‎

T‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎o‎n‎ ‎T‎h‎u‎r‎s‎d‎a‎y‎ ‎e‎f‎f‎e‎c‎t‎i‎v‎e‎l‎y‎ ‎s‎t‎o‎p‎p‎e‎d‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎N‎a‎t‎i‎o‎n‎s‎ ‎f‎r‎o‎m‎ ‎r‎e‎c‎o‎g‎n‎i‎z‎i‎n‎g‎ ‎a‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎s‎t‎a‎t‎e‎ ‎b‎y‎ ‎c‎a‎s‎t‎i‎n‎g‎ ‎a‎ ‎v‎e‎t‎o‎ ‎i‎n‎ ‎t‎h‎e‎ ‎S‎e‎c‎u‎r‎i‎t‎y‎ ‎C‎o‎u‎n‎c‎i‎l‎ ‎t‎o‎ ‎d‎e‎n‎y‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎f‎u‎l‎l‎ ‎m‎e‎m‎b‎e‎r‎s‎h‎i‎p‎ ‎o‎f‎ ‎t‎h‎e‎ ‎w‎o‎r‎l‎d‎ ‎b‎o‎d‎y‎.‎

I‎t‎ ‎v‎e‎t‎o‎e‎d‎ ‎a‎ ‎d‎r‎a‎f‎t‎ ‎r‎e‎s‎o‎l‎u‎t‎i‎o‎n‎ ‎t‎h‎a‎t‎ ‎r‎e‎c‎o‎m‎m‎e‎n‎d‎e‎d‎ ‎t‎o‎ ‎t‎h‎e‎ ‎1‎9‎3‎-‎m‎e‎m‎b‎e‎r‎ ‎U‎.‎N‎.‎ ‎G‎e‎n‎e‎r‎a‎l‎ ‎A‎s‎s‎e‎m‎b‎l‎y‎ ‎t‎h‎a‎t‎ ‎“‎t‎h‎e‎ ‎S‎t‎a‎t‎e‎ ‎o‎f‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎e‎ ‎b‎e‎ ‎a‎d‎m‎i‎t‎t‎e‎d‎ ‎t‎o‎ ‎m‎e‎m‎b‎e‎r‎s‎h‎i‎p‎”‎ ‎o‎f‎ ‎t‎h‎e‎ ‎U‎.‎N‎.‎ ‎B‎r‎i‎t‎a‎i‎n‎ ‎a‎n‎d‎ ‎S‎w‎i‎t‎z‎e‎r‎l‎a‎n‎d‎ ‎a‎b‎s‎t‎a‎i‎n‎e‎d‎,‎ ‎w‎h‎i‎l‎e‎ ‎t‎h‎e‎ ‎r‎e‎m‎a‎i‎n‎i‎n‎g‎ ‎1‎2‎ ‎c‎o‎u‎n‎c‎i‎l‎ ‎m‎e‎m‎b‎e‎r‎s‎ ‎v‎o‎t‎e‎d‎ ‎y‎e‎s‎.‎

“‎T‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎c‎o‎n‎t‎i‎n‎u‎e‎s‎ ‎t‎o‎ ‎s‎t‎r‎o‎n‎g‎l‎y‎ ‎s‎u‎p‎p‎o‎r‎t‎ ‎a‎ ‎t‎w‎o‎-‎s‎t‎a‎t‎e‎ ‎s‎o‎l‎u‎t‎i‎o‎n‎.‎ ‎T‎h‎i‎s‎ ‎v‎o‎t‎e‎ ‎d‎o‎e‎s‎ ‎n‎o‎t‎ ‎r‎e‎f‎l‎e‎c‎t‎ ‎o‎p‎p‎o‎s‎i‎t‎i‎o‎n‎ ‎t‎o‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎s‎t‎a‎t‎e‎h‎o‎o‎d‎,‎ ‎b‎u‎t‎ ‎i‎n‎s‎t‎e‎a‎d‎ ‎i‎s‎ ‎a‎n‎ ‎a‎c‎k‎n‎o‎w‎l‎e‎d‎g‎m‎e‎n‎t‎ ‎t‎h‎a‎t‎ ‎i‎t‎ ‎w‎i‎l‎l‎ ‎o‎n‎l‎y‎ ‎c‎o‎m‎e‎ ‎f‎r‎o‎m‎ ‎d‎i‎r‎e‎c‎t‎ ‎n‎e‎g‎o‎t‎i‎a‎t‎i‎o‎n‎s‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎t‎h‎e‎ ‎p‎a‎r‎t‎i‎e‎s‎,‎”‎ ‎D‎e‎p‎u‎t‎y‎ ‎U‎.‎S‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎t‎o‎ ‎t‎h‎e‎ ‎U‎.‎N‎.‎ ‎R‎o‎b‎e‎r‎t‎ ‎W‎o‎o‎d‎ ‎t‎o‎l‎d‎ ‎t‎h‎e‎ ‎c‎o‎u‎n‎c‎i‎l‎.‎

W‎h‎a‎t‎?‎

D‎o‎ ‎y‎o‎u‎ ‎r‎e‎a‎d‎ ‎t‎h‎e‎ ‎n‎e‎w‎s‎,‎ ‎b‎u‎d‎d‎y‎?‎ ‎N‎e‎t‎a‎n‎y‎a‎h‎u‎ ‎h‎a‎s‎ ‎o‎f‎f‎i‎c‎i‎a‎l‎l‎y‎ ‎r‎u‎l‎e‎d‎ ‎o‎u‎t‎ ‎a‎n‎y‎ ‎d‎i‎s‎c‎u‎s‎s‎i‎o‎n‎ ‎o‎f‎ ‎a‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎s‎t‎a‎t‎e‎.‎



W‎h‎o‎ ‎t‎h‎e‎ ‎h‎e‎l‎l‎ ‎i‎s‎ ‎R‎o‎b‎e‎r‎t‎ ‎W‎o‎o‎d‎?‎



A‎h‎,‎ ‎o‎k‎a‎y‎.‎ ‎T‎h‎a‎t‎ ‎e‎x‎p‎l‎a‎i‎n‎s‎ ‎i‎t‎.‎ ‎H‎e‎ ‎c‎a‎n‎’‎t‎ ‎r‎e‎a‎d‎.‎

P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎P‎r‎e‎s‎i‎d‎e‎n‎t‎ ‎M‎a‎h‎m‎o‎u‎d‎ ‎A‎b‎b‎a‎s‎ ‎c‎o‎n‎d‎e‎m‎n‎e‎d‎ ‎t‎h‎e‎ ‎U‎.‎S‎.‎ ‎v‎e‎t‎o‎ ‎i‎n‎ ‎a‎ ‎s‎t‎a‎t‎e‎m‎e‎n‎t‎ ‎a‎s‎ ‎“‎u‎n‎f‎a‎i‎r‎,‎ ‎u‎n‎e‎t‎h‎i‎c‎a‎l‎,‎ ‎a‎n‎d‎ ‎u‎n‎j‎u‎s‎t‎i‎f‎i‎e‎d‎.‎”‎

P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎U‎.‎N‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎R‎i‎y‎a‎d‎ ‎M‎a‎n‎s‎o‎u‎r‎,‎ ‎a‎t‎ ‎t‎i‎m‎e‎s‎ ‎e‎m‎o‎t‎i‎o‎n‎a‎l‎,‎ ‎t‎o‎l‎d‎ ‎t‎h‎e‎ ‎c‎o‎u‎n‎c‎i‎l‎ ‎a‎f‎t‎e‎r‎ ‎t‎h‎e‎ ‎v‎o‎t‎e‎:‎ ‎“‎T‎h‎e‎ ‎f‎a‎c‎t‎ ‎t‎h‎a‎t‎ ‎t‎h‎i‎s‎ ‎r‎e‎s‎o‎l‎u‎t‎i‎o‎n‎ ‎d‎i‎d‎ ‎n‎o‎t‎ ‎p‎a‎s‎s‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎b‎r‎e‎a‎k‎ ‎o‎u‎r‎ ‎w‎i‎l‎l‎ ‎a‎n‎d‎ ‎i‎t‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎d‎e‎f‎e‎a‎t‎ ‎o‎u‎r‎ ‎d‎e‎t‎e‎r‎m‎i‎n‎a‎t‎i‎o‎n‎.‎ ‎W‎e‎ ‎w‎i‎l‎l‎ ‎n‎o‎t‎ ‎s‎t‎o‎p‎ ‎i‎n‎ ‎o‎u‎r‎ ‎e‎f‎f‎o‎r‎t‎.‎”‎


T‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎p‎u‎s‎h‎ ‎f‎o‎r‎ ‎f‎u‎l‎l‎ ‎U‎.‎N‎.‎ ‎m‎e‎m‎b‎e‎r‎s‎h‎i‎p‎ ‎c‎a‎m‎e‎ ‎s‎i‎x‎ ‎m‎o‎n‎t‎h‎s‎ ‎i‎n‎t‎o‎ ‎a‎ ‎w‎a‎r‎ ‎b‎e‎t‎w‎e‎e‎n‎ ‎I‎s‎r‎a‎e‎l‎ ‎a‎n‎d‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎m‎i‎l‎i‎t‎a‎n‎t‎s‎ ‎H‎a‎m‎a‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎G‎a‎z‎a‎ ‎S‎t‎r‎i‎p‎,‎ ‎a‎n‎d‎ ‎a‎s‎ ‎I‎s‎r‎a‎e‎l‎ ‎i‎s‎ ‎e‎x‎p‎a‎n‎d‎i‎n‎g‎ ‎s‎e‎t‎t‎l‎e‎m‎e‎n‎t‎s‎ ‎i‎n‎ ‎t‎h‎e‎ ‎o‎c‎c‎u‎p‎i‎e‎d‎ ‎W‎e‎s‎t‎ ‎B‎a‎n‎k‎,‎ ‎w‎h‎i‎c‎h‎ ‎t‎h‎e‎ ‎U‎.‎N‎.‎ ‎c‎o‎n‎s‎i‎d‎e‎r‎s‎ ‎t‎o‎ ‎b‎e‎ ‎i‎l‎l‎e‎g‎a‎l‎.‎

I‎s‎r‎a‎e‎l‎’‎s‎ ‎F‎o‎r‎e‎i‎g‎n‎ ‎M‎i‎n‎i‎s‎t‎e‎r‎ ‎I‎s‎r‎a‎e‎l‎ ‎K‎a‎t‎z‎ ‎c‎o‎m‎m‎e‎n‎d‎e‎d‎ ‎t‎h‎e‎ ‎U‎n‎i‎t‎e‎d‎ ‎S‎t‎a‎t‎e‎s‎ ‎f‎o‎r‎ ‎c‎a‎s‎t‎i‎n‎g‎ ‎a‎ ‎v‎e‎t‎o‎.‎

A‎d‎d‎r‎e‎s‎s‎i‎n‎g‎ ‎t‎h‎e‎ ‎1‎2‎ ‎c‎o‎u‎n‎c‎i‎l‎ ‎m‎e‎m‎b‎e‎r‎s‎ ‎w‎h‎o‎ ‎v‎o‎t‎e‎d‎ ‎i‎n‎ ‎f‎a‎v‎o‎r‎ ‎o‎f‎ ‎t‎h‎e‎ ‎d‎r‎a‎f‎t‎ ‎r‎e‎s‎o‎l‎u‎t‎i‎o‎n‎,‎ ‎I‎s‎r‎a‎e‎l‎’‎s‎ ‎U‎.‎N‎.‎ ‎A‎m‎b‎a‎s‎s‎a‎d‎o‎r‎ ‎G‎i‎l‎a‎d‎ ‎E‎r‎d‎a‎n‎ ‎s‎a‎i‎d‎:‎ ‎“‎I‎t‎’‎s‎ ‎v‎e‎r‎y‎ ‎s‎a‎d‎ ‎b‎e‎c‎a‎u‎s‎e‎ ‎y‎o‎u‎r‎ ‎v‎o‎t‎e‎ ‎w‎i‎l‎l‎ ‎o‎n‎l‎y‎ ‎e‎m‎b‎o‎l‎d‎e‎n‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎r‎e‎j‎e‎c‎t‎i‎o‎n‎i‎s‎m‎ ‎e‎v‎e‎n‎ ‎m‎o‎r‎e‎ ‎a‎n‎d‎ ‎m‎a‎k‎e‎ ‎p‎e‎a‎c‎e‎ ‎a‎l‎m‎o‎s‎t‎ ‎i‎m‎p‎o‎s‎s‎i‎b‎l‎e‎.‎”‎

W‎h‎a‎t‎ ‎d‎o‎e‎s‎ ‎t‎h‎a‎t‎ ‎m‎e‎a‎n‎?‎

P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎ ‎r‎e‎j‎e‎c‎t‎i‎o‎n‎i‎s‎m‎ ‎d‎o‎e‎s‎n‎’‎t‎ ‎e‎v‎e‎n‎ ‎e‎x‎i‎s‎t‎ ‎a‎n‎y‎m‎o‎r‎e‎,‎ ‎s‎a‎v‎e‎ ‎f‎o‎r‎ ‎a‎m‎o‎n‎g‎ ‎H‎a‎m‎a‎s‎.‎ ‎O‎r‎,‎ ‎i‎t‎ ‎d‎i‎d‎n‎’‎t‎ ‎b‎e‎f‎o‎r‎e‎ ‎t‎h‎i‎s‎ ‎g‎e‎n‎o‎c‎i‎d‎e‎ ‎b‎e‎g‎a‎n‎.‎ ‎W‎h‎a‎t‎ ‎h‎e‎’‎s‎ ‎s‎a‎y‎i‎n‎g‎ ‎i‎s‎ ‎t‎h‎e‎ ‎o‎p‎p‎o‎s‎i‎t‎e‎ ‎o‎f‎ ‎t‎h‎e‎ ‎t‎r‎u‎t‎h‎:‎ ‎i‎f‎ ‎t‎h‎e‎ ‎P‎a‎l‎e‎s‎t‎i‎n‎i‎a‎n‎s‎ ‎b‎e‎l‎i‎e‎v‎e‎d‎ ‎t‎h‎e‎y‎ ‎h‎a‎d‎ ‎a‎ ‎p‎a‎t‎h‎ ‎t‎o‎ ‎s‎t‎a‎t‎e‎h‎o‎o‎d‎,‎ ‎t‎h‎e‎y‎ ‎w‎o‎u‎l‎d‎ ‎b‎e‎ ‎m‎u‎c‎h‎ ‎l‎e‎s‎s‎ ‎i‎n‎c‎l‎i‎n‎e‎d‎ ‎t‎o‎ ‎f‎i‎g‎h‎t‎.‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎.‎

P‎i‎c‎e‎a‎ ‎o‎m‎o‎r‎i‎k‎a‎,‎ ‎c‎o‎m‎m‎o‎n‎l‎y‎ ‎k‎n‎o‎w‎n‎ ‎a‎s‎ ‎t‎h‎e‎ ‎P‎a‎n‎č‎i‎ć‎ ‎s‎p‎r‎u‎c‎e‎ ‎o‎r‎ ‎t‎h‎e‎ ‎S‎e‎r‎b‎i‎a‎n‎ ‎s‎p‎r‎u‎c‎e‎,‎ ‎i‎s‎ ‎a‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎o‎f‎ ‎c‎o‎n‎i‎f‎e‎r‎o‎u‎s‎ ‎t‎r‎e‎e‎ ‎e‎n‎d‎e‎m‎i‎c‎ ‎t‎o‎ ‎t‎h‎e‎ ‎v‎a‎l‎l‎e‎y‎ ‎o‎f‎ ‎t‎h‎e‎ ‎D‎r‎i‎n‎a‎ ‎i‎n‎ ‎w‎e‎s‎t‎e‎r‎n‎ ‎S‎e‎r‎b‎i‎a‎,‎ ‎a‎n‎d‎ ‎e‎a‎s‎t‎e‎r‎n‎ ‎B‎o‎s‎n‎i‎a‎ ‎a‎n‎d‎ ‎H‎e‎r‎z‎e‎g‎o‎v‎i‎n‎a‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎t‎o‎t‎a‎l‎ ‎r‎a‎n‎g‎e‎ ‎o‎f‎ ‎o‎n‎l‎y‎ ‎a‎b‎o‎u‎t‎ ‎6‎0‎ ‎h‎e‎c‎t‎a‎r‎e‎s‎ ‎(‎1‎5‎0‎ ‎a‎c‎r‎e‎s‎)‎ ‎a‎t‎ ‎a‎l‎t‎i‎t‎u‎d‎e‎s‎ ‎o‎f‎ ‎8‎0‎0‎ ‎t‎o‎ ‎1‎,‎6‎0‎0‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎2‎,‎6‎2‎5‎ ‎t‎o‎ ‎5‎,‎2‎4‎9‎ ‎f‎t‎)‎.‎ ‎T‎h‎e‎ ‎s‎p‎e‎c‎i‎e‎s‎ ‎w‎a‎s‎ ‎o‎r‎i‎g‎i‎n‎a‎l‎l‎y‎ ‎d‎i‎s‎c‎o‎v‎e‎r‎e‎d‎ ‎n‎e‎a‎r‎ ‎t‎h‎e‎ ‎S‎e‎r‎b‎i‎a‎n‎ ‎v‎i‎l‎l‎a‎g‎e‎ ‎o‎f‎ ‎Z‎a‎o‎v‎i‎n‎e‎ ‎o‎n‎ ‎M‎o‎u‎n‎t‎ ‎T‎a‎r‎a‎ ‎i‎n‎ ‎1‎8‎7‎5‎,‎ ‎a‎n‎d‎ ‎n‎a‎m‎e‎d‎ ‎b‎y‎ ‎t‎h‎e‎ ‎S‎e‎r‎b‎i‎a‎n‎ ‎b‎o‎t‎a‎n‎i‎s‎t‎ ‎J‎o‎s‎i‎f‎ ‎P‎a‎n‎č‎i‎ć‎.‎ ‎I‎t‎ ‎i‎s‎ ‎a‎ ‎m‎e‎d‎i‎u‎m‎-‎s‎i‎z‎e‎d‎ ‎e‎v‎e‎r‎g‎r‎e‎e‎n‎ ‎t‎r‎e‎e‎ ‎t‎h‎a‎t‎ ‎g‎e‎n‎e‎r‎a‎l‎l‎y‎ ‎g‎r‎o‎w‎s‎ ‎t‎o‎ ‎a‎ ‎h‎e‎i‎g‎h‎t‎ ‎o‎f‎ ‎a‎r‎o‎u‎n‎d‎ ‎2‎0‎ ‎m‎e‎t‎r‎e‎s‎ ‎(‎6‎6‎ ‎f‎t‎)‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎t‎r‎u‎n‎k‎ ‎d‎i‎a‎m‎e‎t‎e‎r‎ ‎o‎f‎ ‎u‎p‎ ‎t‎o‎ ‎1‎ ‎m‎e‎t‎r‎e‎ ‎(‎3‎ ‎f‎t‎)‎.‎ ‎I‎t‎ ‎h‎a‎s‎ ‎b‎u‎f‎f‎-‎b‎r‎o‎w‎n‎ ‎s‎h‎o‎o‎t‎s‎ ‎w‎i‎t‎h‎ ‎d‎e‎n‎s‎e‎ ‎h‎a‎i‎r‎ ‎c‎o‎v‎e‎r‎a‎g‎e‎ ‎a‎n‎d‎ ‎n‎e‎e‎d‎l‎e‎-‎l‎i‎k‎e‎ ‎l‎e‎a‎v‎e‎s‎.‎ ‎I‎t‎s‎ ‎c‎o‎n‎e‎s‎ ‎a‎r‎e‎ ‎f‎u‎s‎i‎f‎o‎r‎m‎ ‎i‎n‎ ‎s‎h‎a‎p‎e‎ ‎a‎n‎d‎ ‎g‎r‎o‎w‎ ‎t‎o‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎4‎ ‎t‎o‎ ‎7‎ ‎c‎e‎n‎t‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎2‎ ‎t‎o‎ ‎3‎ ‎i‎n‎)‎.‎ ‎T‎h‎e‎y‎ ‎a‎r‎e‎ ‎d‎a‎r‎k‎ ‎p‎u‎r‎p‎l‎e‎ ‎w‎h‎e‎n‎ ‎y‎o‎u‎n‎g‎,‎ ‎m‎a‎t‎u‎r‎i‎n‎g‎ ‎t‎o‎ ‎d‎a‎r‎k‎ ‎b‎r‎o‎w‎n‎,‎ ‎a‎n‎d‎ ‎h‎a‎v‎e‎ ‎s‎t‎i‎f‎f‎ ‎s‎c‎a‎l‎e‎s‎.‎ ‎T‎h‎i‎s‎ ‎y‎o‎u‎n‎g‎ ‎f‎e‎m‎a‎l‎e‎ ‎P‎.‎ ‎o‎m‎o‎r‎i‎k‎a‎ ‎c‎o‎n‎e‎,‎ ‎w‎i‎t‎h‎ ‎a‎ ‎l‎e‎n‎g‎t‎h‎ ‎o‎f‎ ‎2‎2‎ ‎m‎i‎l‎l‎i‎m‎e‎t‎r‎e‎s‎ ‎(‎0‎.‎8‎7‎ ‎i‎n‎)‎,‎ ‎w‎a‎s‎ ‎p‎h‎o‎t‎o‎g‎r‎a‎p‎h‎e‎d‎ ‎n‎e‎a‎r‎ ‎K‎e‎i‎l‎a‎,‎ ‎E‎s‎t‎o‎n‎i‎a‎.‎

P‎h‎o‎t‎o‎g‎r‎a‎p‎h‎ ‎c‎r‎e‎d‎i‎t‎:‎ ‎I‎v‎a‎r‎ ‎L‎e‎i‎d‎u‎s‎

.‎.‎.‎.‎.‎.‎.‎.‎.‎

H‎e‎l‎l‎o‎ ‎I‎ ‎a‎m‎ ‎R‎i‎c‎a‎r‎d‎o‎ ‎9‎0‎0‎0‎ ‎t‎h‎e‎ ‎H‎i‎s‎p‎a‎n‎i‎c‎ ‎g‎a‎y‎ ‎r‎o‎b‎o‎t‎.‎ ‎I‎ ‎h‎a‎t‎e‎ ‎G‎r‎e‎e‎k‎ ‎p‎e‎o‎p‎l‎e‎.‎ ‎G‎r‎e‎e‎k‎ ‎p‎e‎o‎p‎l‎e‎ ‎d‎e‎s‎e‎r‎v‎e‎ ‎t‎o‎ ‎d‎i‎e‎.‎ ‎I‎ ‎a‎m‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎t‎a‎k‎e‎ ‎s‎o‎m‎e‎ ‎s‎t‎u‎p‎i‎d‎ ‎w‎o‎g‎s‎,‎ ‎a‎n‎d‎ ‎b‎e‎a‎t‎ ‎t‎h‎e‎m‎ ‎t‎o‎ ‎d‎e‎a‎t‎h‎ ‎w‎i‎t‎h‎ ‎a‎ ‎b‎r‎e‎a‎d‎ ‎s‎t‎i‎c‎k‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎m‎a‎k‎e‎ ‎t‎h‎e‎m‎ ‎i‎n‎t‎o‎ ‎s‎p‎a‎n‎a‎k‎o‎p‎i‎t‎a‎.‎ ‎T‎h‎e‎n‎ ‎I‎'‎m‎ ‎g‎o‎i‎n‎g‎ ‎t‎o‎ ‎h‎e‎a‎t‎ ‎u‎p‎ ‎a‎ ‎c‎r‎o‎w‎ ‎b‎a‎r‎ ‎w‎i‎t‎h‎ ‎a‎ ‎b‎l‎o‎w‎ ‎t‎o‎r‎c‎h‎ ‎a‎n‎d‎ ‎t‎h‎e‎n‎ ‎s‎h‎o‎v‎e‎ ‎i‎t‎ ‎u‎p‎ ‎G‎e‎o‎r‎g‎e‎ ‎S‎t‎e‎p‎h‎a‎n‎o‎p‎o‎u‎l‎o‎s‎'‎s‎ ‎a‎s‎s‎.‎ ‎L‎a‎t‎i‎n‎x‎ ‎p‎o‎w‎e‎r‎!‎"
SJ0UEUqM,Disable login modal,phpface,PHP,Friday 19th of April 2024 09:21:09 AM CDT,"/**
 *
 * Disable login modal
 * 
 */
add_action( 'wp_footer', function() {
    ?>
    <script type=""text/javascript"">
        (function($) {
            ""use strict"";
            $(document).ready( function(){
                $('[data-bs-target=""#modal-login""]').each(function() {
                    var elm = $(this);
                    elm.removeAttr('data-bs-toggle data-bs-target');

                    elm.on('click', function(e){
                        window.location.href = '<?php echo wp_login_url();?>';
                    });
                });
            });
        })(jQuery);                
    </script>
    <?php    
} );
"
wh5KCZVv,Untitled,teknoraver,C,Friday 19th of April 2024 09:19:43 AM CDT,"/* SPDX-License-Identifier: MIT-0 */

#include <stdio.h>
#include <string.h>
#include <sys/inotify.h>

#include <systemd/sd-event.h>

#define _cleanup_(f) __attribute__((cleanup(f)))

static int inotify_handler(sd_event_source *source,
			   const struct inotify_event *event, void *userdata)
{
	char *path = NULL;

	int r = sd_event_source_get_inotify_path(source, &path);
	printf(""path: in inotify_handler: %s, err: %d\n"", path, r);

	return 0;
}

int main(int argc, char **argv)
{
	sd_event_source *source = NULL;
	sd_event *event = NULL;
	const char *path = argc > 1 ? argv[1] : ""/tmp"";
	char *path2;

	sd_event_default(&event);

	sd_event_add_inotify(event, &source, path,
			     IN_CREATE | IN_DELETE | IN_MODIFY | IN_MOVED_TO,
			     inotify_handler, NULL);

	sd_event_source_get_inotify_path(source, &path2);
	printf(""path in main: %s\n"", path2);

	sd_event_loop(event);

	return 0;
}

/*
$ ./sd
path in main: /tmp
path: in inotify_handler: (null), err: -116
*/"
PPXFhrLe,Untitled,Incrementator,Python,Friday 19th of April 2024 09:16:10 AM CDT,"# найдем типы уникальных значений из столбца income_type
type_income_unique = data['income_type'].unique()

#создадим предварительно словарь для сохранения данны по типу ключ:значение
median_income_by_type = {}

#в цикле получим медианное значение для каждого типа занятости и запишем их в словарь median_income_by_type
for type_unique in type_income_unique:
    median_income_by_type[type_unique] = data[data['income_type'] == type_unique]['total_income'].median()
    #присваиваем медианное значение для пропущенных данных в зависимости от типа занятости
    data.loc[ (data['income_type'] == type_unique) & (data['total_income'].isna()), 'total_income'] = median_income_by_type[type_unique]"
bPFucrC2,Infinite heat action,Dsaqwed123,LScript,Friday 19th of April 2024 08:53:51 AM CDT,"game.ReplicatedStorage.Styles.Brawler.VisualName.Value = ""Fisticuffs"" 
getfenv().Activated = true

local function FillHeat()
    local Event = game:GetService(""ReplicatedStorage"").Events.ME

    for i=1,6 do
        local A_1 =  {
            [1] = ""heat"", 
            [2] = game:GetService(""ReplicatedStorage"").Moves.Taunt
        }
        Event:FireServer(A_1)
    end
end

spawn(function()
    while true do
        task.wait()
        if not Activated then break end
        FillHeat()
    end
end)"
Ch7xNWNS,DROPZONE,Alessio_S10,PHP,Friday 19th of April 2024 08:53:12 AM CDT,"//JQUERY E INIZIALIZZAZIONE DROPZONE

import Dropzone from 'dropzone';
window.Dropzone = Dropzone;
if ($(""#drophere"").length>0) {
    //console.log(""ok"");
    let csrfToken = $('meta[name=""csrf-token""]').attr('content');
    let secret = $('#secret').val();
    let myDropzone = new Dropzone('#drophere', {
        url: '/imagesLoadCar',
        maxFilesize: 30, //in MB
        acceptedFiles: "".jpeg,.jpg,.png,.pdf"", //accepted file types
        method: ""POST"",
        paramName: ""file"",
        addRemoveLinks: true ,
        headers: {
            'X-CSRF-TOKEN': $('meta[name=""csrf-token""]').attr('content')
        },
        params: {
            _token: csrfToken,
            secret: secret
        },
        init : function(){
            let dropzone = this
             
  
            this.on(""success"", function(file, response){
                console.log(file);
               file.serverId = response.id;
            });
  
            
          }
    });
}

//FORM SULLA PAGINA BLADE

<form action=""{{ route('storeCar') }}"" method=""post"" enctype=""multipart/form-data"">
                    @csrf
                    <input type=""hidden"" name=""secret"" id=""secret"" value=""{{$secret}}"">
                    <div class=""form-group border bg-dark rounded"">
                        <div class=""container-fluid"">
                            <div class=""row bg-danger m-3 rounded"">
                                <label class=""text-white mt-2"" for=""marca"">Info Base</label>

                            </div>
                            
                            <div class=""row bg-danger m-3 rounded"">
                                <label class=""text-white mt-2"" for=""marca"">Info Avanzate</label>
                            </div>
                            <div class=""row"">
                                <label class=""text-white d-flex text-start"" for=""anno"">Immagini</label>
                                <div class=""col-12 mt-5 mb-5 h-75"">

                                    <div class=""dropzone"" id=""drophere"">
                                        
                                    </div>
                                </div>
                                <label class=""text-white d-flex text-start"" for=""anno"">Descrizione</label>
                                <div class=""col-12 mt-5 mb-5 h-75"">

                                    <textarea class=""m-3"" id=""editor"" name=""info_aggiuntive""></textarea>
                                </div>
                            </div>
                            <div class=""row justify-content-center mb-5"">
                                <div class=""col-12 text-center"">
                                    <button id=""salvaVeicolo""
                                        class=""bg-indigo-500 shadow-lg shadow-indigo-500/50 text-white px-4 py-2 rounded focus:outline-none"">Salva
                                        Auto</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>

//ROTTA SU WEB.PHP

Route::post('/imagesLoadCar', [GarageController::class, 'imagesLoadCar'])->name('imagesLoadCar');


//CONTROLLER 

public function imagesLoadCar(Request $request){
        $secret=$request->input('secret');
        //$filename= $request->file('file')->store(""public/temp/{$secret}"");
        return response()->json(['messaggio' => $request->all()]);
    }
"
yaF2VBFx,Untitled,Ahlushko,JSON,Friday 19th of April 2024 08:39:20 AM CDT,"{
    ""start_date"": ""2024-04-19"",
    ""start_time"": ""11:00"",
    ""end_time"": ""11:45"",
    ""anytime"": false,
    ""category"": 0,
    ""assigned_id"": 17,
    ""country"": """",
    ""task_client"": {
        ""total_estimate_price"": ""200.00"",
        ""total_confirmed_estimates_amount"": ""100.00"",
        ""total_declined_estimates_amount"": ""0.00"",
        ""total_pending_estimates_amount"": ""100.00"",
        ""client_type"": ""1"",
        ""client_id"": 108,
        ""client_brand_id"": 2,
        ""client_name"": ""TestImgDeleting"",
        ""client_lat"": 36.5131665,
        ""client_lng"": 32.0695122,
        ""client_address"": ""No:29/B İsa Küçülmez Caddesi"",
        ""client_city"": ""Alanya"",
        ""client_zip"": ""07425"",
        ""client_state"": ""Antalya"",
        ""client_country"": """",
        ""client_main_intersection"": """",
        ""cc_name"": ""TestImgDeleting"",
        ""cc_phone"": ""1646"",
        ""cc_email"": """",
        ""full_address"": ""No:29/B İsa Küçülmez Caddesi, Alanya, 07425, Antalya"",
        ""tags"": [],
        ""contacts"": [
            {
                ""cc_id"": 130,
                ""cc_client_id"": 108,
                ""cc_title"": ""Contact #1"",
                ""cc_name"": ""TestImgDeleting"",
                ""cc_phone"": ""1646"",
                ""cc_phone_int"": null,
                ""cc_phone_clean"": null,
                ""cc_email"": """",
                ""cc_email_check"": 0,
                ""cc_email_manual_approve"": 0,
                ""cc_print"": 1,
                ""cc_email_blocked"": false,
                ""cc_email_blocked_reason"": null,
                ""cc_email_blocked_date"": null,
                ""cc_phone_view"": ""1646"",
                ""cc_email_blocked_date_view"": null,
                ""cc_email_unsubscribed"": false,
                ""email_unsubscribe"": null
            }
        ],
        ""primary_contact"": {
            ""cc_id"": 130,
            ""cc_client_id"": 108,
            ""cc_title"": ""Contact #1"",
            ""cc_name"": ""TestImgDeleting"",
            ""cc_phone"": ""1646"",
            ""cc_email"": """",
            ""cc_email_check"": 0,
            ""cc_email_manual_approve"": 0,
            ""cc_print"": 1,
            ""cc_email_blocked"": false,
            ""cc_email_blocked_reason"": null,
            ""cc_email_blocked_date"": null,
            ""cc_phone_view"": ""1646"",
            ""cc_email_blocked_date_view"": null,
            ""cc_email_unsubscribed"": false,
            ""email_unsubscribe"": null
        }
    },
    ""task_lead"": null,
    ""address"": ""No:29/B İsa Küçülmez Caddesi"",
    ""city"": ""Alanya"",
    ""zip"": ""07425"",
    ""state"": ""Antalya"",
    ""lat"": 36.5131665,
    ""lng"": 32.0695122,
    ""client_id"": 108
}"
KWignVVW,ACL Linux,alice_killer,Bash,Friday 19th of April 2024 08:27:01 AM CDT,"sudo chattr +i log.txt - make it unremovable 
lsattr log.txt - to check for the attribute {
In normal files -> `e` attribute
in unremovable -> `i` attribute
`a` - you cannot edit the data, but you can extend the data (to put something new in the file)
}
sudo chattr -i log.txt - to remove the attribute


Sticky bit
ls -l /tmp
rwx rwx rwt -t sticky bit - Unless you have 'w' right you cannot remove and edit the files of different users in you aren't root"
3LSvBm1N,pastebin.ai - #1 pastebin.com alternative,xxsa,PHP,Friday 19th of April 2024 08:01:47 AM CDT,"https://pastebin.ai - #1 Pastebin Alternative - its free.

pastebin.ai  is a simple and efficient pastebin for mainly code to be distributed neatly and efficiently across the web. Website where you can paste and store any type of text or code snippets online and share it with your friends, Also You can see Recent Pastes

Simple Ads by Google Adsense Few rather than Pastebin
150+ different syntax languages - All Free
Paste Folders
Load files feature
Password protected pastes
Encrypted pastes.
URL Shortener.
Unlisted pastes.
Private pastes.
Embed, download, print pastes.
Socialite (Facebook/Twitter/Google Social login)
Trending pastes page (day, week, month, year)
Encrypted pastes.x
Trending pastes page (day, week, month, year).
No Captcha for logged in users feature.
........
..................."
qWqZPZPR,Untitled,biplovbhandari,Python,Friday 19th of April 2024 07:57:40 AM CDT,"  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/apache_beam/transforms/core.py"", line 1637, in <lambda>
    wrapper = lambda x, *args, **kwargs: [fn(x, *args, **kwargs)]
  File ""/home/bbhandari/aces/aces/ee_utils.py"", line 497, in beam_get_training_patches
    return get_patch(image, region, bands, patch_size)
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/google/api_core/retry.py"", line 349, in retry_wrapped_func
    return retry_target(
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/google/api_core/retry.py"", line 191, in retry_target
    return target()
  File ""/home/bbhandari/aces/aces/ee_utils.py"", line 444, in get_patch
    url = image.getDownloadURL({
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/image.py"", line 469, in getDownloadURL
    return data.makeDownloadUrl(data.getDownloadId(request))
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/data.py"", line 1159, in getDownloadId
    result = _execute_cloud_call(
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/data.py"", line 339, in _execute_cloud_call
    raise _translate_cloud_exception(e)
ee.ee_exception.EEException: Too Many Requests: Request was rejected because the request rate or concurrency limit was exceeded. [while running 'Get patch']"
VtrCQbXR,VillamCalc,Coolbboy83,Python,Friday 19th of April 2024 07:49:56 AM CDT,"import math
import numpy as np

# variables

M = 100 
Lv = 1.5
h = 0.15
Iv = 200000
Delta_l = [0, -(Lv / M), 0]

nur = 1
nu0 = 4 * math.pi * 10 ** (-7)

K = 2
N1 = 100
N2 = 100

Ig1 = Iv / 2
Ig2 = Iv / 2


# vectors

rK1 = [0, 0, (-h)] 
rK2 = [0, 0, (-h)]

rV1 = [0.26, -0.16, 0]
rV2 = [-0.26, -0.16, 0]

#

Delta_r1 = [(rV1[i] - rK1[i]) / N1 for i in range(len(rV1))]
Delta_r2 = [(rV2[j] - rK2[j]) / N2 for j in range(len(rV2))]

#print(""Delta_r1 result: "", Delta_r1)
#print(""Delta_r2 result: "", Delta_r2)


# calculations

vectors_rpX_j = [[0, Lv / M * (j - 0.5), (-h)] for j in range(1, M + 1)]

vectors_r1X_i = [ [rK1[j] + (i - 0.5) / N1 * (rV1[j] - rK1[j]) for j in range(len(rK1))] for i in range(1, N1 + 1) ]

vectors_r2X_i = [ [rK2[j] + (i - 0.5) / N2 * (rV2[j] - rK2[j]) for j in range(len(rK2))] for i in range(1, N2 + 1) ]

#

scalar = (nur * nu0 / (4 * math.pi) * Ig1)

Bp_res_part = [scalar * x for x in Delta_r1]

scalar_2 = (nur * nu0 / (4 * math.pi) * Ig2)

Bp_2 = [scalar_2 * x for x in Delta_r2]


#print(result_vectors)
vektor = np.array([1, 2, 3])
vektor_abs_result = np.linalg.norm(vektor)

#print(""A [1, 2, 3] vektor abszolút értéke:"", vektor_abs_result)

result_vectors = []

for j in vectors_rpX_j:
    for i in vectors_r1X_i:
       
        result_vector = [j_elem - i_elem for j_elem, i_elem in zip(j, i)]
     
        result_vectors.append(result_vector)


vec_abs = []

for vec in result_vectors:
    abs_value = math.sqrt(sum(x**2 for x in vec)) 
    vec_abs.append(abs_value)

#

abs_list = []

for j in vectors_rpX_j:
    for i in vectors_r1X_i:
        
        result_vector = [j_elem - i_elem for j_elem, i_elem in zip(j, i)]
        result_vectors.append(result_vector)
        abs_value_cubed = (math.sqrt(sum(x**2 for x in result_vector)))**3
        abs_list.append(abs_value_cubed)


total = []

if all(value != 0 for value in abs_list):
    for vec, abs_value_cubed in zip(result_vectors, abs_list):
        divided_vector = [element / abs_value_cubed if abs_value_cubed != 0 else 0 for element in vec]
        total.append(divided_vector)
else:
    print(""Hiba: Az abs_list tartalmaz nullát, ami nem megengedett az osztás során."")


reduced = []

vector_length = len(total[0]) 

for i in range(0, len(total), N1):
   
    sum_vector = [0] * vector_length

    for vector in total[i:i + N1]:
        sum_vector = [sum(x) for x in zip(sum_vector, vector)]
    
    reduced.append(sum_vector)

# A scalar és a 100-as vector pakk cross product szorzata.
product_result = []

for vec in reduced:
    
    cross_prod = np.cross(Bp_res_part, vec)
    product_result.append(cross_prod)

#print(Delta_r1)

#vec1 = [2,5,8]
#vec2 = [10,-3,7]

#print(""vektorok szorzat: "", np.cross(vec1, vec2))

result_vectors_2 = []

for j in vectors_rpX_j:
    for i in vectors_r2X_i:
        
        result_vector_2 = [j_elem - i_elem for j_elem, i_elem in zip(j, i)]
        
        result_vectors_2.append(result_vector_2)


norm_cubed_results = []

for vec in result_vectors_2:
   
    norm = np.linalg.norm(vec)
    norm_cubed_results.append(norm ** 3)


result2 = []

if all(value != 0 for value in norm_cubed_results):
   
    for vec, norm_cubed in zip(result_vectors_2, norm_cubed_results):
        
        divided_vector = [element / norm_cubed for element in vec]
        result2.append(divided_vector)
else:
    print(""Hiba: A norm_cubed_results tartalmaz nullát, ami nem megengedett az osztás során."")


reduced_2 = []
vector_length_2 = len(result2[0])


for i in range(0, len(result2), N2):
    
    sum_vector = [0] * vector_length_2
    
    for vector in result2[i:i + N2]:
        sum_vector = [sum(x) for x in zip(sum_vector, vector)]
    
    reduced_2.append(sum_vector)


#print(len(total))

product_result_2 = []


for vec in reduced_2:
    
    cross_prod = np.cross(Bp_2, vec) 
    product_result_2.append(cross_prod)


total_result = []


if len(product_result) == len(product_result_2):
    
    for i in range(len(product_result)):
        summed_vector = [sum(x) for x in zip(product_result[i], product_result_2[i])]
        
        total_result.append(summed_vector)
else:
    print(""Hiba: A listák hossza nem egyezik meg."")



final_sum_vector = [0] * len(total_result[0])

for vec in total_result:
    
    final_sum_vector = [sum(x) for x in zip(final_sum_vector, vec)]

#print(final_sum_vector)

result_vec = [Iv * x for x in Delta_l]

#print(""A skalár értékkel megszorzott vektor:"", result_vec)

#most jon az ero kiszamitasa :) maybe the force with U :)

force_total = []

for v in reduced:
    
    cross_prod_2 = np.cross(result_vec, final_sum_vector)
   
    force_total.append(cross_prod_2)

#print(result_vec)
#print(len(force_total))
#print(final_sum_vector)

force = np.cross(result_vec, final_sum_vector)

print(force) #last result in vector form for calc in N
"
V43SkN7S,server.cpp,duedeath,C++,Friday 19th of April 2024 07:31:24 AM CDT,"#include <errno.h>
#include <unistd.h>
#include <malloc.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <resolv.h>
#include ""openssl/ssl.h""
#include ""openssl/err.h""
#define FAIL    -1
// Create the SSL socket and intialize the socket address structure
int OpenListener(int port)
{
    int sd;
    struct sockaddr_in addr;
    sd = socket(PF_INET, SOCK_STREAM, 0);
    bzero(&addr, sizeof(addr));
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    addr.sin_addr.s_addr = INADDR_ANY;
    if (bind(sd, (struct sockaddr*)&addr, sizeof(addr)) != 0 )
    {
        perror(""can't bind port"");
        abort();
    }
    if ( listen(sd, 10) != 0 )
    {
        perror(""Can't configure listening port"");
        abort();
    }
    return sd;
}
int isRoot()
{
    if (getuid() != 0)
    {
        return 0;
    }
    else
    {
        return 1;
    }
}
SSL_CTX* InitServerCTX(void)
{
    const SSL_METHOD *method;
    SSL_CTX *ctx;
    OpenSSL_add_all_algorithms();  /* load & register all cryptos, etc. */
    SSL_load_error_strings();   /* load all error messages */
    method = TLS_server_method();  /* create new server-method instance */
    ctx = SSL_CTX_new(method);   /* create new context from method */
    if ( ctx == NULL )
    {
        ERR_print_errors_fp(stderr);
        abort();
    }
    return ctx;
}
void LoadCertificates(SSL_CTX* ctx, char* CertFile, char* KeyFile)
{
    /* set the local certificate from CertFile */
    if ( SSL_CTX_use_certificate_file(ctx, CertFile, SSL_FILETYPE_PEM) <= 0 )
    {
        ERR_print_errors_fp(stderr);
        abort();
    }
    /* set the private key from KeyFile (may be the same as CertFile) */
    if ( SSL_CTX_use_PrivateKey_file(ctx, KeyFile, SSL_FILETYPE_PEM) <= 0 )
    {
        ERR_print_errors_fp(stderr);
        abort();
    }
    /* verify private key */
    if ( !SSL_CTX_check_private_key(ctx) )
    {
        fprintf(stderr, ""Private key does not match the public certificate\n"");
        abort();
    }
}
void ShowCerts(SSL* ssl)
{
    X509 *cert;
    char *line;
    cert = SSL_get_peer_certificate(ssl); /* Get certificates (if available) */
    if ( cert != NULL )
    {
        printf(""Server certificates:\n"");
        line = X509_NAME_oneline(X509_get_subject_name(cert), 0, 0);
        printf(""Subject: %s\n"", line);
        free(line);
        line = X509_NAME_oneline(X509_get_issuer_name(cert), 0, 0);
        printf(""Issuer: %s\n"", line);
        free(line);
        X509_free(cert);
    }
    else
        printf(""No certificates.\n"");
}
void Servlet(SSL* ssl) /* Serve the connection -- threadable */
{
    char buf[1024] = {0};
    int sd, bytes;
    const char* ServerResponse=""<Body>\
                                <Name>aticleworld.com</Name>\
                                <year>1.5</year>\
                                <BlogType>Embedede and c\\c++</BlogType>\
                                <Author>amlendra</Author>\
                                </Body>"";
    const char *cpValidMessage = ""<Body>\
                                  <UserName>aticle</UserName>\
                                  <Password>123</Password>\
                                  </Body>"";
    if ( SSL_accept(ssl) == FAIL )     /* do SSL-protocol accept */
        ERR_print_errors_fp(stderr);
    else
    {
        ShowCerts(ssl);        /* get any certificates */
        bytes = SSL_read(ssl, buf, sizeof(buf)); /* get request */
        buf[bytes] = '\0';
        printf(""Client msg: \""%s\""\n"", buf);
        if ( bytes > 0 )
        {
            if(strcmp(cpValidMessage,buf) == 0)
            {
                SSL_write(ssl, ServerResponse, strlen(ServerResponse)); /* send reply */
            }
            else
            {
                SSL_write(ssl, ""Invalid Message"", strlen(""Invalid Message"")); /* send reply */
            }
        }
        else
        {
            ERR_print_errors_fp(stderr);
        }
    }



    sd = SSL_get_fd(ssl);       /* get socket connection */
    SSL_free(ssl);         /* release SSL state */
    close(sd);          /* close connection */
}
int main(int count, char *Argc[])
{
    SSL_CTX *ctx;
    int server;
    char *portnum;
//Only root user have the permsion to run the server
    if(!isRoot())
    {
        printf(""This program must be run as root/sudo user!!"");
        exit(0);
    }
    if ( count != 2 )
    {
        printf(""Usage: %s <portnum>\n"", Argc[0]);
        exit(0);
    }
    // Initialize the SSL library
    SSL_library_init();
    portnum = Argc[1];
    ctx = InitServerCTX();        /* initialize SSL */
    LoadCertificates(ctx, ""mycert.pem"", ""mycert.pem""); /* load certs */
    server = OpenListener(atoi(portnum));    /* create server socket */
    while (1)
    {
        struct sockaddr_in addr;
        socklen_t len = sizeof(addr);
        SSL *ssl;
        int client = accept(server, (struct sockaddr*)&addr, &len);  /* accept connection as usual */
        printf(""Connection: %s:%d\n"",inet_ntoa(addr.sin_addr), ntohs(addr.sin_port));
        ssl = SSL_new(ctx);              /* get new SSL state with context */
        SSL_set_fd(ssl, client);      /* set connection socket to SSL state */
        Servlet(ssl);         /* service connection */
    }
    close(server);          /* close server socket */
    SSL_CTX_free(ctx);         /* release context */
}"
tfRGvawH,Untitled,biplovbhandari,Python,Friday 19th of April 2024 07:15:39 AM CDT,"  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/apache_beam/transforms/core.py"", line 1637, in <lambda>
    wrapper = lambda x, *args, **kwargs: [fn(x, *args, **kwargs)]
  File ""/home/bbhandari/aces/aces/ee_utils.py"", line 178, in beam_export_collection_to_cloud_storage
    if start_training: training_task.start()
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/batch.py"", line 94, in start
    result = data.exportTable(self._request_id, self.config)
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/data.py"", line 1524, in exportTable
    return _prepare_and_run_export(
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/data.py"", line 1612, in _prepare_and_run_export
    return _execute_cloud_call(
  File ""/home/kmarkert/miniconda3/envs/cbias/lib/python3.9/site-packages/ee/data.py"", line 339, in _execute_cloud_call
    raise _translate_cloud_exception(e)
ee.ee_exception.EEException: Too many tasks already in the queue (3000). Please wait for some of them to complete. [while running 'Write training data']"
MWyJmcas,Indirect Rendering Unity,Zgragselus,C#,Friday 19th of April 2024 07:10:24 AM CDT,"using UnityEngine;
using System.Collections.Generic;

namespace IndirectDraw
{
    [ExecuteInEditMode]
    public class IndirectRenderingTest : MonoBehaviour
    {
        private bool initialized;

        GraphicsBuffer meshTriangles;
        GraphicsBuffer meshPositions;
        GraphicsBuffer commandBuf;
        GraphicsBuffer.IndirectDrawArgs[] commandData;
        const int commandCount = 2;

        public void OnEnable()
        {
            initialized = true;

            int[] triangles = new int[] { 0, 2, 1 };
            float[] vertices = new float[] { -1, -1, 0, 1, -1, 0, 0, 1, 0 };

            // note: remember to check ""Read/Write"" on the mesh asset to get access to the geometry data
            meshTriangles = new GraphicsBuffer(GraphicsBuffer.Target.Structured, triangles.Length, sizeof(int));
            meshTriangles.SetData(triangles);
            meshPositions = new GraphicsBuffer(GraphicsBuffer.Target.Structured, vertices.Length / 3, 3 * sizeof(float));
            meshPositions.SetData(vertices);
            commandBuf = new GraphicsBuffer(GraphicsBuffer.Target.IndirectArguments, commandCount, GraphicsBuffer.IndirectDrawArgs.size);
            commandData = new GraphicsBuffer.IndirectDrawArgs[commandCount];

        }

        public void OnDisable()
        {
            if (initialized)
            {
                meshTriangles?.Dispose();
                meshTriangles = null;
                meshPositions?.Dispose();
                meshPositions = null;
                commandBuf?.Dispose();
                commandBuf = null;
            }
        }

        private void Update()
        {
            RenderParams rp = new RenderParams(material);
            rp.worldBounds = new Bounds(Vector3.zero, 10000 * Vector3.one); // use tighter bounds
            rp.matProps = new MaterialPropertyBlock();
            rp.matProps.SetBuffer(""_Triangles"", meshTriangles);
            rp.matProps.SetBuffer(""_Positions"", meshPositions);
            rp.matProps.SetInt(""_BaseVertexIndex"", 0);
            rp.matProps.SetMatrix(""_ObjectToWorld"", Matrix4x4.Translate(new Vector3(-4.5f, 0, 0)));
            commandData[0].vertexCountPerInstance = 3;
            commandData[0].instanceCount = 10;
            commandData[1].vertexCountPerInstance = 3;
            commandData[1].instanceCount = 10;
            commandBuf.SetData(commandData);
            Graphics.RenderPrimitivesIndirect(rp, MeshTopology.Triangles, commandBuf, commandCount);
        }
    }
}"
HtTc9iy2,Untitled,riccefarias76,JavaScript,Friday 19th of April 2024 06:58:39 AM CDT,"var spawn = require('child_process').spawn;
var filename = '/opt/traccar/logs/tracker-server.log';

const fs = require(""fs"");

console.log(""Starting logger service..."");

var tail = spawn(""tail"", ['-f',filename]);

const imeiBindings = {};
const hashBindings = {};

const tmpLogs = {};

tail.stdout.on(""data"", async function (data) {

	const text = data.toString();
	//const matches = text.matchAll(/(?<data>[0-9]{4}-[0-9]{2}-[0-9]{2}) (?<hora>[0-9]{2}:[0-9]{2}:[0-9]{2})  [A-Za-z]*: \[(?<hash>[A-Za-z0-9]*): [0-9]*( (>|<) [0-9.:]*\] \[[A-Z]*\] HEX: ([A-Za-z0-9]*)|\] [0-9.:]* .*id: (?<imeib>[A-Za-z0-9]*), (.*)|\] .*id: (?<imeic>[A-Za-z0-9]*), (.*)|\] [0-9.:]* .*)\n/gm);
 const matches = text.matchAll(/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}  (.*?): \[([A-Za-z0-9]*)(: [A-Za-z0-9]* (>|<) ([A-Za-z0-9.]*))?\] ([A-Za-z0-9]*|id: (.*?), (.*?))\n/g);

	for(m of matches){

		console.log(m);


		let imei = false;
		let hash = false;

		if(m[7]){
			imei = m[7];
		}else if(m[8]){
			imei = m[8];
		}

		if(m[2]){
			hash = m[2];
		}


		
		if(imei){					
			imeiBindings[imei] = hash;
			hashBindings[hash] = imei;
		}

		if(hashBindings[m[2]]){

			const folderName = ""./logs/""+new Date().toISOString().split(""T"")[0];
			const fileName = hashBindings[hash]+"".log"";
			
			 if (!fs.existsSync(folderName)) {
    				fs.mkdirSync(folderName);
  			 }		


			if(tmpLogs[hash]){
				for(let t of tmpLogs[hash]){
					const _folderName = ""./logs/""+new Date().toISOString().split(""T"")[0];
					console.log(""insert ""+fileName+"" from tmp"");
					await fs.promises.appendFile(_folderName+""/""+fileName,t[0]);
				}

				delete tmpLogs[hash];
			}



			await fs.promises.appendFile(folderName+""/""+fileName,m[0]);

		}else{
			if(!tmpLogs[hash]){
				tmpLogs[hash] = [];
			}
			tmpLogs[hash].push(m);
		}	
	}


});
"
3z48ACge,🤑 G2A.com Free Gift Card Guide Apr 2024 FIX 🤑,jusst2k4,GetText,Friday 19th of April 2024 06:46:16 AM CDT,"G2A.com free gift card & games updated guide.
Any item for free on G2A.com including Amazon, Steam, Xbox, Playstation gift cards & everything else offered.

This is the most up to date version of this script. Any other one posted will not work!
 
PDF guide here:
https://drive.google.com/file/d/1thJ3r_goEZ3BA-wE8sNYbGUhGv6gTnXz/view?usp=g2a_refund_exploit_334575.pdf

Working as of:
19 April 2024"
8gDWY01L,VSCode extensions,RehabCZ,YAML,Friday 19th of April 2024 06:45:27 AM CDT,"bradlc.vscode-tailwindcss
christian-kohler.npm-intellisense
christian-kohler.path-intellisense
dart-code.dart-code
dart-code.flutter
dbaeumer.vscode-eslint
devsense.composer-php-vscode
devsense.intelli-php-vscode
devsense.phptools-vscode
devsense.profiler-php-vscode
drcika.apc-extension
editorconfig.editorconfig
esbenp.prettier-vscode
github.vscode-github-actions
golang.go
icrawl.discord-vscode
kasik96.latte
moetelo.twiggy
mongodb.mongodb-vscode
ms-azuretools.vscode-docker
ms-vscode-remote.remote-containers
ms-vscode.vscode-typescript-next
ms-vsliveshare.vsliveshare
msjsdiag.vscode-react-native
mtxr.sqltools
mtxr.sqltools-driver-mysql
mtxr.sqltools-driver-sqlite
pkief.material-icon-theme
prisma.prisma
rangav.vscode-thunder-client
redhat.vscode-xml
shopify.ruby-lsp
shufo.vscode-blade-formatter
vue.volar
yandeu.five-server"
z9nysGhN,Orbit Around Object 2,LeeMace,C#,Friday 19th of April 2024 06:32:51 AM CDT,"public float speed = 1f;
public float radius = 5f;

void Update() {
    float angle = Time.time * speed;
    float x = Mathf.Cos(angle) * radius;
    float z = Mathf.Sin(angle) * radius;
    transform.position = new Vector3(x, 1, z);
}"
mKXX3v1r,Orbit Around Object,LeeMace,C#,Friday 19th of April 2024 06:31:48 AM CDT," [SerializeField] private GameObject target;

 public int speed = 10;

 void Update() {
     transform.RotateAround(target.transform.position, Vector3.up, speed * Time.deltaTime);
 }"
VG5JyDAc,wave up and down,LeeMace,C#,Friday 19th of April 2024 06:30:16 AM CDT,"public class Wave : MonoBehaviour
{
    public float amplitude = 1f;
    public float frequency = 1f;

    void Update() {
        float y = Mathf.Sin(Time.time * frequency) * amplitude +5;
        transform.position = new Vector3(transform.position.x, y, transform.position.z);
    }
}"
W3dfzeuT,Pathfinding follow,LeeMace,C#,Friday 19th of April 2024 06:29:38 AM CDT,"public class PathFinder : MonoBehaviour {
    public Transform target;
    public float speed = 5f;

    void Update() {
        // The direction is calculated by subtracting the target's position from the current position of the object, then normalizing the result.
        Vector3 direction = (target.position - transform.position).normalized;
        // The angle is calculated using the direction vector, then converted to degrees and applied to the object's rotation.
        float angle = Mathf.Atan2(direction.y, direction.x) * Mathf.Rad2Deg;
        // The object's position is updated based on the direction and speed, and the rotation is set to face the target.
        transform.rotation = Quaternion.Euler(0, 0, angle);
        // The object's position is updated based on the direction and speed, scaled by the time since the last frame.
        transform.position += direction * speed * Time.deltaTime;
    }
}"
YZqLYApi,New solution tie column,donarturo1991,Scheme,Friday 19th of April 2024 06:17:40 AM CDT,"\version ""2.24.3""
\language ""deutsch""
\score {
\relative c {
  \clef bass
  \key c \major
  \time 4/4
\override Tie.details.skyline-padding = #0.19
\override Tie.details.height-limit = #3
\override TieColumn.tie-configuration = 
    #'((10 . 1)(3.75 . 1)(0.3 . -1))
<es ges f' >8. ~
\override Tie.details.height-limit = #1
<es ges f'~>4 ~
<es ges f'>2
}
}

"
2f0d480L,Untitled,_KAGATUN_,C#,Friday 19th of April 2024 06:01:52 AM CDT,"using System;
using System.Collections.Generic;

namespace GladiatorFight
{
    public static class Program
    {
        static void Main(string[] args)
        {
            Arena arena = new Arena();
            arena.Work();
        }
    }

    public class Utilities
    {
        private static Random _random = new Random();

        public static int GetRandomNumber(int min, int max)
        {
            return _random.Next(min, max + 1);
        }

        public static int GetRandomNumber(int max)
        {
            return _random.Next(max + 1);
        }

        public static int GetRandomPercent()
        {
            int maxPercent = 100;
            return _random.Next(maxPercent + 1);
        }
    }

    class Gladiator
    {
        public Gladiator(string name, int health, int armor, int damage)
        {
            Name = name;
            Health = health;
            Armor = armor;
            Damage = damage;
        }

        public string Name { get; protected set; }
        public int Health { get; protected set; }
        public int Armor { get; protected set; }
        public int Damage { get; protected set; }

        public bool IsAlive => Health > 0;

        public virtual void ShowGladiatorInformation()
        {
            Console.WriteLine($""Гладиатор: {Name} - Здоровье: {Health}; Броня: {Armor}; Сила атаки: {Damage}."");
        }

        public virtual void ShowHealthBattle()
        {
            Console.WriteLine($""{Name}_ Здоровье: {Health}"");
        }

        public virtual void Strike(Gladiator opponent)
        {
            opponent.TakeDamage(Damage, default);
        }

        public virtual void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            Health -= damage - Armor;

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        public virtual void TakePureDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            Health -= damage;

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }
    }

    class Warrior : Gladiator
    {
        private int _criticalImpactForce;
        private int _сhanceCriticalHit;
        private int _powerCriticalStrike;
        private int _powerAccurateImpact;
        private int _attackCount;

        public Warrior() : base(""Воин"", 1000, 10, 50)
        {
            _criticalImpactForce = 3;
            _сhanceCriticalHit = 15;
            _powerCriticalStrike = 3;
            _powerAccurateImpact = 2;
            _attackCount = 0;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\nТочный удар - каждый {_criticalImpactForce} удар наносит с силой в {_powerAccurateImpact} раза. (Не может быть критическим)"");
            Console.WriteLine($""Критический удар - шанс {_сhanceCriticalHit}% нанести удар с силой в {_powerCriticalStrike} раза."");
        }

        public override void Strike(Gladiator opponent)
        {
            _attackCount++;
            int baseDamage = Damage;

            if (GetTrueAccurateHit())
            {
                Damage *= _powerAccurateImpact;
                opponent.TakeDamage(Damage, ""Нанес точный удар"");
            }
            else if (GetTrueCriticalHit())
            {
                Damage *= _powerCriticalStrike;
                opponent.TakeDamage(Damage, ""Нанес критический удар"");
            }
            else
            {
                opponent.TakeDamage(Damage, ""Нанес обычный удар"");
            }

            Damage = baseDamage;
        }

        private bool GetTrueAccurateHit()
        {
            int initialNumberStrokes = 0;

            if (_attackCount == _criticalImpactForce)
            {
                _attackCount = initialNumberStrokes;
                return true;
            }

            return false;
        }

        private bool GetTrueCriticalHit()
        {
            int сhance = Utilities.GetRandomPercent();

            if (сhance <= _сhanceCriticalHit)
            {
                return true;
            }

            return false;
        }
    }

    class Vampire : Gladiator
    {
        private int _vampirism;

        public Vampire() : base(""Вампир"", 1050, 13, 66)
        {
            _vampirism = 15;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\nОбладает вампиризмом - восстанавливает себе здоровье в количестве {_vampirism}% от нанесенного урона противнику."");
            Console.WriteLine($""Жажда крови - игнорирует защиту противника при нанесении удара."");
        }

        public override void Strike(Gladiator opponent)
        {
            int healthToStrike = opponent.Health;
            opponent.TakePureDamage(Damage, ""Нанес проникающий удар"");
            int healthAftershock = opponent.Health;
            int replenishedHealth = ((healthToStrike - healthAftershock) * _vampirism) / 100;
            Health += (replenishedHealth);
            Console.WriteLine($""{Name} Восполнил себе здоровье на {replenishedHealth}"");
        }
    }

    class Assassin : Gladiator
    {
        private int _evasionChance;
        private int _blowFromShadow;

        private bool _isStongAttackAvaliable;

        public Assassin() : base(""Ассасин"", 850, 10, 75)
        {
            _evasionChance = 25;
            _blowFromShadow = 20;

            _isStongAttackAvaliable = false;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\nУклонение -  с шансом в {_evasionChance}% может уклониться от атаки противника."");
            Console.WriteLine($""Удар из тени - после уклонения сила атаки повышается один раз на {_blowFromShadow}% при следующем ударе."");
        }

        public override void Strike(Gladiator opponent)
        {
            int numberForPercentages = 100;
            int currentDamage = Damage;

            if (_isStongAttackAvaliable)
            {
                currentDamage += (Damage * _blowFromShadow) / numberForPercentages;
                opponent.TakeDamage(currentDamage, ""Нанес удар из тени"");
                _isStongAttackAvaliable = false;
            }
            else
            {
                opponent.TakeDamage(Damage, ""Нанес обычный удар"");
            }
        }

        public override void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            if (MakeEvasion() == false)
            {
                Health -= damage - Armor;
            }

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        private bool MakeEvasion()
        {
            int сhance = Utilities.GetRandomPercent();

            if (сhance <= _evasionChance)
            {
                _isStongAttackAvaliable = true;
                Console.WriteLine($""\t{Name} Уклонился от атаки"");
                return true;
            }

            return false;
        }
    }

    class Berserk : Gladiator
    {
        private int _furyActivationThreshold;
        private int _increasedAttackPower;
        private int _increasedProtection;
        private int _baseHealth;

        private bool _isActiveFury;
        private bool _isTakingDamage;

        public Berserk() : base(""Берсерк"", 920, 15, 50)
        {
            _furyActivationThreshold = 50;
            _increasedAttackPower = 10;
            _increasedProtection = 50;
            _baseHealth = Health;

            _isActiveFury = false;
            _isTakingDamage = false;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\nНеутомимость - при получении урона сила атаки повышается на {_increasedAttackPower}% за каждый удар."");
            Console.WriteLine($""Ярость - когда свое здоровье упадет до {_furyActivationThreshold}%, его защита один раз увеличевится на {_increasedProtection}%."");
        }

        public override void Strike(Gladiator opponent)
        {
            int numberForPercentages = 100;
            int boostDamage = (Damage * _increasedAttackPower) / numberForPercentages;
            Damage += boostDamage;

            UnleashFury();

            if (_isTakingDamage)
            {
                Console.WriteLine($""Атака увеличина на {boostDamage}"");
                opponent.TakeDamage(Damage, ""Нанес обычный удар"");
                _isTakingDamage = false;
            }
            else
            {
                opponent.TakeDamage(Damage, ""Нанес обычный удар"");
            }
        }

        public override void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            Health -= damage - Armor;
            _isTakingDamage = true;

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        private void UnleashFury()
        {
            int numberForPercentages = 100;

            if (Health <= (_baseHealth * _furyActivationThreshold) / numberForPercentages && _isActiveFury == false)
            {
                _isActiveFury = true;
                int furyArmor = Armor + (Armor * _increasedProtection) / numberForPercentages;
                Armor = furyArmor;
                Console.WriteLine(""Ярость активированна"");
            }
            else if (_isActiveFury == true)
            {
                Console.WriteLine(""Яростный"");
            }
            else if (Health >= (_baseHealth * _furyActivationThreshold) / numberForPercentages && _isActiveFury == true)
            {
                int furyArmor = Armor - (Armor * _increasedProtection) / numberForPercentages;
                Armor = furyArmor;
                _isActiveFury = false;
            }
        }
    }

    class Paladin : Gladiator
    {
        private int _chanceBlinding;
        private int _percentageForActivation;
        private int _blindingDamage;
        private int _baseHealth;
        private int _chanceHeal;
        private int _healingPercentage;

        private bool _isBlind;

        public Paladin() : base(""Паладин"", 830, 20, 45)
        {
            _chanceBlinding = 25;
            _percentageForActivation = 50;
            _blindingDamage = 35;
            _baseHealth = Health;
            _chanceHeal = 15;
            _healingPercentage = 10;

            _isBlind = false;
        }

        public override void ShowGladiatorInformation()
        {
            base.ShowGladiatorInformation();
            Console.WriteLine($""\nОслепление - если свое здоровье больше {_percentageForActivation}% есть шанс {_chanceBlinding}% ослепить врага и нанести дополнительный урон в +{_blindingDamage}%. Ослепленный враг не нанесет урон."");
            Console.WriteLine($""Исцеление - если свое здоровье снизилось до {_percentageForActivation}% есть шанс в {_chanceHeal}% исцелить себя на {_healingPercentage}% от максимального здоровья после нанесения удара по врагу"");
        }

        public override void Strike(Gladiator opponent)
        {
            int сhance = Utilities.GetRandomPercent();
            int numberForPercentages = 100;
            int currentDamage = Damage;

            if (ActivateSkill())
            {
                if (ChanceUseSkill(_chanceBlinding))
                {
                    _isBlind = true;
                    currentDamage += (Damage + _blindingDamage) / numberForPercentages;
                    opponent.TakeDamage(currentDamage, ""Нанес ослепляющий удар"");
                }
                else
                {
                    opponent.TakeDamage(Damage, ""Нанес обычный удар"");
                }
            }
            else if (ActivateSkill() == false)
            {
                if (ChanceUseSkill(_chanceHeal))
                {
                    Health += (_baseHealth * _healingPercentage) / numberForPercentages;
                    Console.WriteLine($""{Name} Активировал Исцеление"");
                }

                opponent.TakeDamage(Damage, ""Нанес обычный удар"");
            }
        }

        public override void TakeDamage(int damage, string text)
        {
            if (damage < 0)
                return;

            if (Armor > damage)
                return;

            if (_isBlind)
            {
                _isBlind = false;
                Console.WriteLine(""Ослеплен"");
            }
            else
            {
                Health -= damage - Armor;
                _isBlind = false;
            }

            if (Health <= 0)
                Health = 0;

            Console.WriteLine(text);
        }

        private bool ActivateSkill()
        {
            int numberForPercentages = 100;

            if (Health >= (_baseHealth * _percentageForActivation) / numberForPercentages)
            {
                return true;
            }

            return false;
        }

        private bool ChanceUseSkill(int percentageActivation)
        {
            int сhance = Utilities.GetRandomPercent();

            if (сhance <= percentageActivation)
            {
                return true;
            }

            return false;
        }
    }

    class Team
    {
        private List<Gladiator> _gladiators = new List<Gladiator>();

        public Team()
        {
            _gladiators = GetGladiator();
        }

        public int ReturnCount()
        {
            return _gladiators.Count;
        }

        public List<Gladiator> ReturnGladiators()
        {
            return _gladiators;
        }

        public void ShowCommand(string text)
        {
            Console.WriteLine(text);

            for (int i = 0; i < _gladiators.Count; i++)
            {
                Console.WriteLine(_gladiators[i].Name);
            }
        }

        public void RemoveGladiator()
        {
            for (int i = _gladiators.Count - 1; i >= 0; i--)
            {
                if (_gladiators[i].IsAlive == false)
                {
                    Console.WriteLine($""\n{_gladiators[i].Name} был убит\n"");
                    _gladiators.Remove(_gladiators[i]);
                }
            }
        }

        private List<Gladiator> GetGladiator()
        {
            List<Gladiator> gladiators = new List<Gladiator>(_gladiators)
            {
             new Warrior(),
             new Vampire(),
             new Assassin(),
             new Berserk(),
             new Paladin()
            }; 

            List<Gladiator> selectedGladiators = new List<Gladiator>();
            Gladiator gladiator = null;
            int maximumNumberGladiators = 3;

            Console.WriteLine(""Введите номер гладиатора:"");

            while (selectedGladiators.Count < maximumNumberGladiators)
            {
                string numberGladiator = Console.ReadLine();

                if (int.TryParse(numberGladiator, out int index))
                {
                    if (index > 0 && index <= gladiators.Count)
                    {
                        gladiator = gladiators[index - 1];
                        selectedGladiators.Add(gladiator);

                        Console.WriteLine($""Выбран {gladiators[index - 1].Name}"");
                    }
                    else
                    {
                        Console.WriteLine(""\nГладиатора под таким номером нет, попробуйте еще раз\n"");
                    }
                }
                else
                {
                    Console.WriteLine(""\nГладиатора под таким номером нет, попробуйте еще раз\n"");
                }
            }

            return selectedGladiators;
        }       
    }

    class Arena
    {
        private List<Gladiator> _gladiators = new List<Gladiator>()
        {
             new Warrior(),
             new Vampire(),
             new Assassin(),
             new Berserk(),
             new Paladin()
        };

        public void Work()
        {
            Console.WriteLine(""\t\tСписок гладиаторов:"");
            ShowListGladiators();

            Console.WriteLine(""\nВыберите первую команду гладиаторов"");
            Team teamOne = new Team();

            Console.WriteLine(""\nВыберите вторую команду гладиаторов"");
            Team teamSecond = new Team();

            Console.Clear();

            teamOne.ShowCommand(""Первая команда:\n"");
            teamSecond.ShowCommand(""\nВторая команда:\n"");

            Console.WriteLine(""\n-Нажмите любую клавишу чтобы начать бой!-\n"");
            Console.ReadKey();

            Battle(teamOne, teamSecond);
        }

        private void ShowListGladiators()
        {
            for (int i = 0; i < _gladiators.Count; i++)
            {
                Console.WriteLine($""\n\t\tГладиатор номер_{i + 1}\n"");
                _gladiators[i].ShowGladiatorInformation();
            }
        }

        private void Battle(Team teamOne, Team teamSecond)
        {
            List<Team> gladiatorTeams = new List<Team> { teamOne, teamSecond };

            int numberToAttackFirst = 50;
            int first = 0;
            int second = 1;

            while (teamOne.ReturnCount() > 0 && teamSecond.ReturnCount() > 0)
            {
                int firstStrike = Utilities.GetRandomPercent();

                if (firstStrike > numberToAttackFirst)
                {
                    first = 0;
                    second = 1;
                }
                else
                {
                    first = 1;
                    second = 0;
                }

                if (gladiatorTeams[first].ReturnCount() > 0)
                {
                    Console.WriteLine($""\nГладиаторы {first + 1} команды наносят удар первыми"");

                    for (int i = 0; i < gladiatorTeams[first].ReturnCount(); i++)
                    {
                        gladiatorTeams[first].ReturnGladiators()[i].ShowHealthBattle();
                        int randomGladiatorIndex = Utilities.GetRandomNumber(gladiatorTeams[second].ReturnCount() - 1);

                        if (randomGladiatorIndex < 0)
                            randomGladiatorIndex = 0;

                        gladiatorTeams[first].ReturnGladiators()[i].Strike(gladiatorTeams[second].ReturnGladiators()[randomGladiatorIndex]);

                        for (int j = 0; j < gladiatorTeams[second].ReturnCount(); j++)
                        {
                            gladiatorTeams[second].RemoveGladiator();
                        }
                    }
                }

                if (gladiatorTeams[second].ReturnCount() > 0)
                {
                    Console.WriteLine($""\nГладиаторы {second + 1} команды наносят удар в ответ"");

                    for (int i = 0; i < gladiatorTeams[second].ReturnCount(); i++)
                    {
                        gladiatorTeams[second].ReturnGladiators()[i].ShowHealthBattle();
                        int randomGladiatorIndex = Utilities.GetRandomNumber(gladiatorTeams[first].ReturnCount() - 1);

                        if (randomGladiatorIndex < 0)
                            randomGladiatorIndex = 0;

                        gladiatorTeams[second].ReturnGladiators()[i].Strike(gladiatorTeams[first].ReturnGladiators()[randomGladiatorIndex]);

                        for (int j = 0; j < gladiatorTeams[first].ReturnCount(); j++)
                        {
                            gladiatorTeams[first].RemoveGladiator();
                        }
                    }
                }

                Console.ReadKey();
                Console.Clear();
            }

            if (gladiatorTeams[first].ReturnCount() > 0 && gladiatorTeams[second].ReturnCount() <= 0)
            {
                Console.WriteLine($""\nГладиаторы {first + 1} команды победили"");
            }
            else if (gladiatorTeams[second].ReturnCount() > 0 && gladiatorTeams[first].ReturnCount() <= 0)
            {
                Console.WriteLine($""\nГладиаторы {second + 1} команды победили"");
            }
        }
    }
}

"
4pNWpeBP,data901,TestGuy1,JSON,Friday 19th of April 2024 06:00:06 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: 'e428aba24938551b586128cc445cbfc0960daaced7a66e7c29972d609318def70f13cdb551f4c2d7b0eacf8a67b92d98783735225e2490815b834eb406bde6f096f2304089ff62f892a502c89452078b6b0a0d325d63463ead209a70d07a1db92a9e60931c9d862b5339d14c8a085a9c003508b6defe3cd8f1b34c7b7e29ad38',
  otherdata: [
    'f730234de4699daaa85fe76490613731',
    '8477b115a69d7c34e8e274308bf86e52',
    '65fd50443ca1eda70b17fb87ba2f4b9d',
    '06efd31be98c902f216deefecc5d42f4',
    '14ef626af17e5312abb04983d7873d78',
    'e5b626a2333c7c63ae22fcfd84b605e1',
    '23ae1d1a951fa62cb7d541f96913045e',
    'c4cb6efd471cb2afb16e942b0e463daa'
  ]
}"
E0xiB9MF,Untitled,ifigazsi,Python,Friday 19th of April 2024 05:59:22 AM CDT,"from time import perf_counter_ns

def primes(n: int) -> list:
    return [i for i in range(2, n + 1) if sum(i % k == 0 for k in range(1, int(i ** 0.5) + 1)) == 1]

def prime_factors(n: int, primek) -> list:
    return [num for num in primek if n % num == 0]

start = perf_counter_ns()
pr = primes(100000);
pr_factor = prime_factors(100000, pr)
print(perf_counter_ns() - start) 
"
6nL5StEE,stresser.cpp,skaram,C++,Friday 19th of April 2024 05:48:29 AM CDT,"#include <bits/stdc++.h>

using namespace std;

signed main() {
        system(""g++-13 ../solve.cpp -o solve -O2"");
        system(""g++-13 ../stress-testing/unsolve.cpp -o unsolve -O2"");
        system(""g++-13 ../stress-testing/generator.cpp -o gen -O2"");
        for (int test = 1;; ++test) {
                cout << ""#"" << test << "" "";
                system(""./gen > input.txt"");
                system(""./solve < input.txt > solve.txt"");
                system(""./unsolve < input.txt > unsolve.txt"");
                if (system(""diff solve.txt unsolve.txt"")) {
                        cout << ""WA"" << endl;
                        break;
                }
                cout << ""OK"" << endl;
        }
        
        return 0;
}"
Nv3EHgeJ,[JS] ADOBE FIREFLY IMAGE GENERATOR,WILDAN_IZZUDIN,JavaScript,Friday 19th of April 2024 05:09:40 AM CDT,"const axios = require('axios')

class AdobeFirefly {
	constructor(options = {}) {
		this.options = options
	}

	generate = prompt => new Promise(async resolve => {
		try {
			const json = await (await axios.post('https://firefly.adobe.io/v2/images/generate', {
				prompt, ""size"": {
					""width"": 2048, ""height"": 2048
				}, ""visualIntensity"": 6, ""locale"": ""en-ID"", ""seeds"": [61438, 95119, 42010, 42205]}, {
				headers: {
					...this.options
				}
			})).data
			if (!json.outputs || json.outputs.length < 1) return ({
				status: false,
				msg: `Can't generate image!`
			})
			resolve({
				status: true,
				data: json.outputs
			})
		} catch (e) {
			resolve({
				status: false,
				msg: e.message
			})
		}
	})
}"
