id,title,username,language,date,content
UKYuTy2e,"Coupon code, percentage-based margins",paulandzen,HTML,Wednesday 6th of September 2023 12:25:03 AM CDT,"<h1 style=""margin: 20px 2% 20px; text-transform: uppercase;"">Enjoy 10% Off Your First Order</h1>
<div>
<p style=""background-color: #fff; font-size: 24px; border: #983180 dashed 2px; color: #470a68; font-weight: bold; font-family: Gotham,Helvetica,sans-serif; padding: 10px 5px; margin: 20px 2%;"">{% coupon_code 'WELCOME' %}</p>
<p style=""font-size: 12px; margin: 10px 0 0;""><em>For use on orders of $300 and above. Valid for 7 days only.</em></p>
<br /><br /><a style=""letter-spacing: .5px; text-decoration: none; color: #fff; background-color: #000; padding: 20px 55px; font-family: Gotham-Bold,Helvetica,sans-serif; font-weight: bold;"" href=""{{ organization.url|trim_slash }}/collections/shop-all"">REDEEM MY GIFT</a></div>"
u0Q9dgyX,src 1 theke node n er shortest dist er path ber kora,Raahaat,C++,Wednesday 6th of September 2023 12:06:44 AM CDT,"//src 1 theke node n er shortest dist er path ber kora 
// problem link
// https://practice.geeksforgeeks.org/problems/shortest-path-in-weighted-undirected-graph/1
// gfg = Shortest Path in Weighted undirected graph;


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
    #define ll long long int
    #define endl '\n'
    typedef unsigned long long int llu;
     
    #define optimize()           \
        ios::sync_with_stdio(0); \
        cin.tie(0);              \
        cout.tie(0)
    #define mod 32768
    const ll infLL = 9000000000000000000;
    typedef pair<int, int> pii;
    typedef pair<ll, ll> pll;
    typedef vector<pii> vii;
    typedef vector<pll> vll;
     
    #define F first
    #define S second
    #define PB push_back
    const int mx = 1e5+123;
    
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        vector<pair<int, int>>adj[n+1];
        for(auto it: edges)
        {
            adj[it[0]].push_back({it[1], it[2]});
            adj[it[1]].push_back({it[0], it[2]});
        }
        
        vector<int>dist(n+1,1e9);
        dist[1]=0;
        priority_queue<pii, vii, greater<pii>>pq;
        pq.push({0,1});
        vector<int>parent(n+1);
        for(int i=1; i<=n; i++)
        {
            parent[i]=i;
        }
        while(!pq.empty())
        {
            int curd=pq.top().F;
            int u=pq.top().S;
            pq.pop();
            
            for(auto it: adj[u])
            {
                int v=it.F;
                int w=it.S;
                
                if(curd+w<dist[v])
                {
                    dist[v]=curd+w;
                    pq.push({dist[v],v});
                    parent[v]=u;
                }
            }
        }
        if(dist[n]==1e9) return {-1};
        vector<int>path;
        int node=n;
        while(parent[node]!=node)
        {
            path.push_back(node);
            node=parent[node];
        }
        path.push_back(1);
        reverse(path.begin(),path.end());
        return path;
    
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << "" "";
        }
        cout << ""\n"";
    }
}

// } Driver Code Ends"
w55apg4a,Log ISO BJB 06/09/2023 11:32,Abikayusri19,Bash,Tuesday 5th of September 2023 11:42:46 PM CDT,"11:32:03.414 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - REQUEST DATA : POST /trx]
11:32:03.536 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Original bitmap: {32=110, 33=000110, 2=622011020020638074, 3=000000, 35=622011020020638074D2802221, 4=5500, 7=0906043203, 41=70040001, 42=70040001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 12=113203, 13=0906, 14=2802, 49=360, 18=6012, 52=3539DA1BB03D1391, 22=051, 55=820274009F3602016D9F26087E5854519F28B0789F2701809F34030200009F101C0101A0008000006EF642A600000000000000000000000000000000009F3303E0F8C89F350114950508800480009F370418289CC59F02060000005500005A096220110200206380745F3401009F1A0203605F2A0203609A032309069C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000333, 25=00}
11:32:03.550 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ===========================request begin================================================11:32:03.550 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - URI         : http://bjb-hsm/bjb/hsm/pin
11:32:03.550 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Headers     : [Accept:""application/json, application/*+json"", Content-Type:""application/json"", Content-Length:""88""]
11:32:03.550 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Request body: {""terminalId"":""70040001"",""pinUnderTpk"":""3539DA1BB03D1391"",""cardNo"":""622011020020638074""}
11:32:03.550 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ==========================request end================================================
11:32:03.603 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - ============================response begin==========================================
11:32:03.603 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status code  : 200 OK
11:32:03.603 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Status text  : 
11:32:03.604 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - Response body: {""pinBlock"":""36957081BED19A2A""}
11:32:03.604 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.c.BjbHtcHsmConfig - =======================response end=================================================
11:32:03.620 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.e.b.p.s.BjbTrxServiceImpl - Updated bitmap: {32=110, 33=000110, 2=622011020020638074, 3=000000, 35=622011020020638074D2802221, 4=5500, 37=000000208666, 7=0906043203, 41=70040001, 42=70040001, 43=Menara BCA Lt 39      KABUPATEN TOLIJBID, 11=208666, 12=113203, 13=0906, 14=2802, 49=360, 18=6012, 52=36957081BED19A2A, 22=051, 55=820274009F3602016D9F26087E5854519F28B0789F2701809F34030200009F101C0101A0008000006EF642A600000000000000000000000000000000009F3303E0F8C89F350114950508800480009F370418289CC59F02060000005500005A096220110200206380745F3401009F1A0203605F2A0203609A032309069C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000333, 25=00, 90=020020866609060432030000000011000000000110}
11:32:03.687 [http-nio-9872-exec-10] DEBUG i.b.n.c.c.c.s.RedisBackedCacheService - puts key: /j8583_000000208666, object: {""dataB64"":""MDIwMEYyM0M0NDgxQThFMDkyMDAwMDAwMDA0MDAwMDAwMDIwMTg2MjIwMTEwMjAwMjA2MzgwNzQwMDAwMDAwMDAwMDAwMDU1MDAwOTA2MDQzMjAzMjA4NjY2MTEzMjAzMDkwNjI4MDI2MDEyMDUxMDAwMzExMDA2MDAwMTEwMjY2MjIwMTEwMjAwMjA2MzgwNzREMjgwMjIyMTAwMDAwMDIwODY2NjcwMDQwMDAxNzAwNDAwMDEgICAgICAgTWVuYXJhIEJDQSBMdCAzOSAgICAgIEtBQlVQQVRFTiBUT0xJSkJJRDM2MDM2OTU3MDgxQkVEMTlBMkExNjiCAnQAnzYCAW2fJgh+WFRRnyiweJ8nAYCfNAMCAACfEBwBAaAAgAAAbvZCpgAAAAAAAAAAAAAAAAAAAAAAnzMD4PjInzUBFJUFCIAEgACfNwQYKJzFnwIGAAAAVQAAWgliIBECACBjgHRfNAEAnxoCA2BfKgIDYJoDIwkGnAEAnwkCAACfHggwMDAwMDkwNU8HoAAABgIQEIQHoAAABgIQEJ9BBAAAAzMwMjAwMjA4NjY2MDkwNjA0MzIwMzAwMDAwMDAwMTEwMDAwMDAwMDAxMTAwMjAwMDAwMjA4NjY2MDAwMDIwODY2Ng=="",""binaryHeader"":false,""isoHeader"":null,""binaryHeaderB64"":null}, timeout: 10, timeunit: MINUTES
11:32:03.689 [nioEventLoopGroup-5-1] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xe047837c, L:/10.19.52.7:58490 - R:/10.44.224.145:10608] WRITE: Message: 0200F23C4481A8E09200000000400000002018622011020020638074000000000000005500090604320320866611320309062802601205100031100600011026622011020020638074D28022210000002086667004000170040001       Menara BCA Lt 39      KABUPATEN TOLIJBID36036957081BED19A2A336820274009F3602016D9F26087E5854519F28B0789F2701809F34030200009F101C0101A0008000006EF642A600000000000000000000000000000000009F3303E0F8C89F350114950508800480009F370418289CC59F02060000005500005A096220110200206380745F3401009F1A0203605F2A0203609A032309069C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F41040000033302002086660906043203000000001100000000011002000002086660000208666
MTI: 0x0200
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '000000'
  4: [NUMERIC(12)] = '000000005500'
  7: [NUMERIC(10)] = '0906043203'
  11: [NUMERIC(6)] = '208666'
  12: [NUMERIC(6)] = '113203'
  13: [DATE4(4)] = '0906'
  14: [NUMERIC(4)] = '2802'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  25: [NUMERIC(2)] = '00'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(26)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000208666'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '70040001       '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '36957081BED19A2A'
  55: [LLLBIN(168)] = '820274009F3602016D9F26087E5854519F28B0789F2701809F34030200009F101C0101A0008000006EF642A600000000000000000000000000000000009F3303E0F8C89F350114950508800480009F370418289CC59F02060000005500005A096220110200206380745F3401009F1A0203605F2A0203609A032309069C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000333'
  90: [NUMERIC(42)] = '020020866609060432030000000011000000000110'
  123: [LLLVAR(20)] = '00002086660000208666'
11:32:03.689 [nioEventLoopGroup-5-1] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xe047837c, L:/10.19.52.7:58490 - R:/10.44.224.145:10608] FLUSH
11:32:33.745 [nioEventLoopGroup-4-1] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - INCOMING: 303231303732333834343031414145303932303031383632323031313032303032303633383037343030303030303030303030303030353530303039303630343332303332303836363631313332303330393036363031323035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323038363636393637303034303030313730303430303031202020202020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363033363935373038314245443139413241313638820274009f3602016d9f26087e5854519f28b0789f2701809f34030200009f101c0101a0008000006ef642a600000000000000000000000000000000009f3303e0f8c89f350114950508800480009f370418289cc59f02060000005500005a096220110200206380745f3401009f1a0203605f2a0203609a032309069c01009f090200009f1e0830303030303930354f07a00000060210108407a00000060210109f410400000333
11:32:33.745 [nioEventLoopGroup-4-1] DEBUG i.b.n.e.i.e.b.i.BJBCollegaJ8583MessageFactory - CUTS: 303231303732333834343031414145303932303031383632323031313032303032303633383037343030303030303030303030303030353530303039303630343332303332303836363631313332303330393036363031323035313033313130303630303031313032363632323031313032303032303633383037344432383032323231303030303030323038363636393637303034303030313730303430303031202020202020204d656e61726120424341204c742033392020202020204b414255504154454e20544f4c494a42494433363033363935373038314245443139413241313638820274009f3602016d9f26087e5854519f28b0789f2701809f34030200009f101c0101a0008000006ef642a600000000000000000000000000000000009f3303e0f8c89f350114950508800480009f370418289cc59f02060000005500005a096220110200206380745f3401009f1a0203605f2a0203609a032309069c01009f090200009f1e0830303030303930354f07a00000060210108407a00000060210109f410400000333
11:32:33.746 [nioEventLoopGroup-5-1] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xe047837c, L:/10.19.52.7:58490 - R:/10.44.224.145:10608] READ: Message: 021072384401AAE0920018622011020020638074000000000000005500090604320320866611320309066012051031100600011026622011020020638074D2802221000000208666967004000170040001       Menara BCA Lt 39      KABUPATEN TOLIJBID36036957081BED19A2A336820274009F3602016D9F26087E5854519F28B0789F2701809F34030200009F101C0101A0008000006EF642A600000000000000000000000000000000009F3303E0F8C89F350114950508800480009F370418289CC59F02060000005500005A096220110200206380745F3401009F1A0203605F2A0203609A032309069C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000333
MTI: 0x0210
  2: [LLVAR(18)] = '622011020020638074'
  3: [NUMERIC(6)] = '000000'
  4: [NUMERIC(12)] = '000000005500'
  7: [NUMERIC(10)] = '0906043203'
  11: [NUMERIC(6)] = '208666'
  12: [TIME(6)] = '113203'
  13: [DATE4(4)] = '0906'
  18: [NUMERIC(4)] = '6012'
  22: [NUMERIC(3)] = '051'
  32: [LLVAR(3)] = '110'
  33: [LLVAR(6)] = '000110'
  35: [LLBCDBIN(13)] = '622011020020638074D2802221'
  37: [NUMERIC(12)] = '000000208666'
  39: [ALPHA(2)] = '96'
  41: [ALPHA(8)] = '70040001'
  42: [ALPHA(15)] = '70040001       '
  43: [ALPHA(40)] = 'Menara BCA Lt 39      KABUPATEN TOLIJBID'
  49: [NUMERIC(3)] = '360'
  52: [BINARY(8)] = '36957081BED19A2A'
  55: [LLLBIN(336)] = '820274009F3602016D9F26087E5854519F28B0789F2701809F34030200009F101C0101A0008000006EF642A600000000000000000000000000000000009F3303E0F8C89F350114950508800480009F370418289CC59F02060000005500005A096220110200206380745F3401009F1A0203605F2A0203609A032309069C01009F090200009F1E0830303030303930354F07A00000060210108407A00000060210109F410400000333'
11:32:33.747 [nioEventLoopGroup-5-1] DEBUG i.b.n.e.i.c.CustomIsoLoggingHandler - [id: 0xe047837c, L:/10.19.52.7:58490 - R:/10.44.224.145:10608] READ COMPLETE
11:32:33.770 [pool-1-thread-20] INFO  i.b.n.e.iso.IsoListenerProcessorImpl - handling 0210, rrn:208666
11:32:33.931 [http-nio-9872-exec-10] DEBUG i.b.n.e.i.CensorCommonsRequestLoggingFilter - After request [POST /trx, payload={""dataMap"":{""32"":""110"",""33"":""000110"",""2"":""622011020020638074"",""3"":""000000"",""35"":""622011******638074D2802221"",""4"":""5500"",""7"":""0906043203"",""41"":""70040001"",""42"":""70040001"",""43"":""Menara BCA Lt 39      KABUPATEN TOLIJBID"",""12"":""113203"",""13"":""0906"",""14"":""2802"",""49"":""360"",""18"":""6012"",""52"":""3539DA1BB03D1391"",""22"":""051"",""55"":""622011"",""25"":""00""},""rc"":null,""rrn"":null,""tracenum"":null,""mti"":512}]"
D5eRvQ0K,CrickBook,KDR_IT,Lua,Tuesday 5th of September 2023 11:42:42 PM CDT,"High Scorers Batting Part.
---Batter1Name
【BT1Name】حیات الله【BT1Name】
---Batter1Lastname
【BT1Lastname】حدید【BT1Lastname】
---Batter1Runs
【BT1Runs】1200【BT1Runs】
---Batter1MTC
【BT1MTC】52【BT1MTC】
---Batter1AVR
【BT1AVR】38.50【BT1AVR】
---Batter1STR
【BT1STR】140【BT1STR】

------------------------------

"
g1K5iyXe,secret squirrel snowy bot,coinwalk,JavaScript,Tuesday 5th of September 2023 11:05:14 PM CDT,"// this bot should be unbustable  as is 1:100000000000000000000 that it will bust;
var kozster = $('#pct_balance').val();
var gobbie = ((kozster/1440000).toFixed(8));
var zeggar = gobbie;
var target = (kozster*2000);
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var bone = ((Math.floor(kozster/tens))*tens);
var razzle = 0;
var lower = 2.9;
var getld = 0;
var boon = 0;
var zimple = kozster;
var blowzy = 1;
var nope = 1;
var upper = 6.9;
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var final = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
 
function get(){
console.clear();
var burgzie = $('#pct_balance').val();
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(boon>=1)){
final = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = 0;
}
if ((final<49.5000)&&(blowzy<=0)&&(getld>=1)){
zimple = zimple+zeggar;
blowzy = 1;
}
if ((final>=49.5000)&&(blowzy<=0)&&(getld>=1)){
zimple =  zimple+zeggar;
blowzy = 1;
}
if (zimple>(tuba+(zeggar*upper))){
    zeggar = Number((zeggar*2).toFixed(8));
    lower = 4.9;
    upper = 4.9;
    tuba = parseFloat(zimple);
}
if (zimple<(tuba-(zeggar*lower))){
    zeggar = Number((zeggar*2).toFixed(8));
    lower = 4.9;
    upper = 4.9;
    nope = 0;
    tuba = parseFloat(zimple);
}
if ((zimple>=(bone+(tens*nope)))&&(zimple<(((Math.floor(zimple/tens))*tens)+sevens))){
    gobbie = (((parseFloat(zimple))/1440000).toFixed(8));
    tens = (gobbie*10);
    sevens = (gobbie*6.9);
    zeggar = gobbie;
    lower = 2.9;
    upper = 6.9;
    nope = 1;
    tuba = parseFloat((Math.floor(zimple/tens))*tens);
    bone = parseFloat((Math.floor(zimple/tens))*tens);
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(blowzy>=1)&&(getld>=2))||((ficked<migg)&&(blowzy>=1)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon<=0)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = 0;
boon = 1;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();"
GqcT1x7V,secret squirrel snowy bot,coinwalk,JavaScript,Tuesday 5th of September 2023 09:53:56 PM CDT,"// this bot should be unbustable  as is 1:100000000000000000000 that it will bust;
var kozster = $('#pct_balance').val();
var gobbie = ((kozster/1440000).toFixed(8));
var zeggar = gobbie;
var target = (kozster*2000);
var tens = (gobbie*10);
var sevens = (gobbie*6.9);
var tuba = ((Math.floor(kozster/tens))*tens);
var tubit = ((Math.floor(kozster/tens))*tens);
var burgzie = kozster;
var bone = ((Math.floor(kozster/tens))*tens);
var razzle = 0;
var lower = 2.9;
var getld = 0;
var boon = 0;
var zimple = kozster;
var blowzy = 1;
var nope = 1;
var upper = 6.9;
var brother = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var final = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
 
 
function get(){
console.clear();
var burgzie = $('#pct_balance').val();
var good = ((burgzie-kozster).toFixed(8));
console.log(""profit"");
console.log(good);
if (burgzie>(tuba+(zeggar*upper))){
    zeggar = Number((zeggar*2).toFixed(8));
    lower = 4.9;
    upper = 4.9;
    tuba = parseFloat(burgzie);
}
if (burgzie<(tuba-(zeggar*lower))){
    zeggar = Number((zeggar*2).toFixed(8));
    lower = 4.9;
    upper = 4.9;
    nope = 0;
    tuba = parseFloat(burgzie);
}
if ((burgzie>=(bone+(tens*nope)))&&(burgzie<(((Math.floor(burgzie/tens))*tens)+sevens))){
    gobbie = (((parseFloat(burgzie))/1440000).toFixed(8));
    tens = (gobbie*10);
    sevens = (gobbie*6.9);
    zeggar = gobbie;
    lower = 2.9;
    upper = 6.9;
    nope = 1;
    tuba = parseFloat((Math.floor(burgzie/tens))*tens);
    bone = parseFloat((Math.floor(burgzie/tens))*tens);
}
homer = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var coldbet = document.getElementById('me').firstChild.lastChild.firstChild.children[5].innerText;
var milk = document.getElementById('me').firstChild.lastChild.firstChild.children[11].innerText;
if ((milk==razzle)&&(getld>=1)&&(homer>brother)&&(boon>=1)){
final = document.getElementById('me').firstChild.lastChild.firstChild.children[7].innerText;
brother = parseFloat(homer);
boon = 0;
}
if ((final<49.5000)&&(blowzy)){
zimple = zimple+zeggar
blowzy = 1;
}
if ((final>=49.5000)&&(blowzy)){
zimple = zimple-zeggar;
blowzy = 1;
}
var ficked = ((zimple*1).toFixed(8));
var migg = parseFloat(burgzie);
if (((milk>razzle)&&(getld>=1)&&(homer>brother))||((ficked>migg)&&(blowzy>=1)&&(getld>=2))||((ficked<migg)&&(blowzy>=1)&&(getld>=2))||((milk<razzle)&&(getld>=1)&&(homer>brother))){
console.log(""hacker attacked you with"");
console.log(milk);
console.log(""bet number of attack:"");
console.log(coldbet);
return;
}
if ((homer==brother)&&(boon<=0)){
razzle = ((zeggar*1).toFixed(8));
$('#pct_chance').val(49.5);
$('#pct_bet').val(razzle);
$('#a_lo').click();
getld = getld+1;
blowzy = 0;
boon = 1;
homer = 0;
}
setTimeout(() => get(), 1);
}
get();"
AApdBs5k,Day 29,HarrJ,Java,Tuesday 5th of September 2023 09:03:19 PM CDT,"package day26;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.Timer;

public class Day29A extends javax.swing.JFrame {
    Timer rollTimer;
    Day29B callCRUD = new Day29B();
    public Day29A() {
        initComponents();
    }

    @SuppressWarnings(""unchecked"")
    // <editor-fold defaultstate=""collapsed"" desc=""Generated Code"">                          
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        txtPassword = new javax.swing.JPasswordField();
        jPanel2 = new javax.swing.JPanel();
        btnSlotRoll = new javax.swing.JButton();
        lblRollNum5 = new javax.swing.JLabel();
        lblRollNum4 = new javax.swing.JLabel();
        lblRollNum3 = new javax.swing.JLabel();
        lblRollNum2 = new javax.swing.JLabel();
        lblRollNum1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbBet = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        lblCredits = new javax.swing.JLabel();
        lblUserName = new javax.swing.JLabel();
        lblUID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N
        jLabel1.setText(""Username:"");

        jLabel2.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N
        jLabel2.setText(""Password:"");

        jButton1.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N
        jButton1.setText(""LOGIN"");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtUsername.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N

        txtPassword.setFont(new java.awt.Font(""Tahoma"", 1, 24)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(198, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 231, Short.MAX_VALUE)
                    .addComponent(txtUsername)
                    .addComponent(txtPassword))
                .addGap(159, 159, 159))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(173, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab(""tab1"", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));

        btnSlotRoll.setFont(new java.awt.Font(""Comic Sans MS"", 1, 36)); // NOI18N
        btnSlotRoll.setText(""Roll"");
        btnSlotRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSlotRollActionPerformed(evt);
            }
        });

        lblRollNum5.setFont(new java.awt.Font(""Tahoma"", 1, 36)); // NOI18N
        lblRollNum5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRollNum5.setToolTipText("""");
        lblRollNum5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblRollNum4.setFont(new java.awt.Font(""Tahoma"", 1, 36)); // NOI18N
        lblRollNum4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRollNum4.setToolTipText("""");
        lblRollNum4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblRollNum3.setFont(new java.awt.Font(""Tahoma"", 1, 36)); // NOI18N
        lblRollNum3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRollNum3.setToolTipText("""");
        lblRollNum3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblRollNum2.setFont(new java.awt.Font(""Tahoma"", 1, 36)); // NOI18N
        lblRollNum2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRollNum2.setToolTipText("""");
        lblRollNum2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblRollNum1.setFont(new java.awt.Font(""Tahoma"", 1, 36)); // NOI18N
        lblRollNum1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblRollNum1.setToolTipText("""");
        lblRollNum1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        jLabel3.setText(""Winnings vs bet:"");

        jLabel4.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        jLabel4.setText(""3 of a kind: x3"");

        jLabel5.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        jLabel5.setText(""4 of a kind: x5"");

        jLabel6.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        jLabel6.setText(""Jackpot: x8"");

        cmbBet.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        cmbBet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { ""20"", ""50"", ""100"", ""250"", ""500"" }));

        jLabel7.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        jLabel7.setText(""Current Credits:"");

        lblCredits.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        lblCredits.setText(""0"");

        lblUserName.setFont(new java.awt.Font(""Comic Sans MS"", 1, 24)); // NOI18N
        lblUserName.setText(""UserName"");

        lblUID.setText(""0"");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblUserName))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(jLabel7))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(btnSlotRoll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                                .addComponent(lblRollNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblRollNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblRollNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblRollNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(lblRollNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmbBet, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblCredits, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(lblUID))
                        .addGap(0, 122, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(lblUserName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblCredits)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRollNum2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRollNum3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRollNum1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRollNum5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRollNum4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(cmbBet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSlotRoll)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                .addComponent(lblUID)
                .addContainerGap())
        );

        jTabbedPane1.addTab(""tab2"", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>                        

    private void formWindowOpened(java.awt.event.WindowEvent evt) {                                  
        jTabbedPane1.setEnabledAt(1, false);
    }                                 

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        String logUName = txtUsername.getText();
        String logPWord = txtPassword.getText();
        String result = callCRUD.loginCheck(logUName, logPWord);
        int rowCount = 0;
        try {
            rowCount = Integer.parseInt(result);
            switch (rowCount) {
                case 1:
                    String[] uInfo = callCRUD.getUserInfo(logUName, logPWord);
                    lblUID.setText(uInfo[0]);
                    lblUserName.setText(uInfo[1]);
                    lblCredits.setText(uInfo[2]);
                    jTabbedPane1.setEnabledAt(0, false);
                    jTabbedPane1.setEnabledAt(1, true);
                    jTabbedPane1.setSelectedIndex(1);
                    break;
                default:
                    JOptionPane.showMessageDialog(this, ""Username or password is incorrect"", ""Login Invalid"", JOptionPane.WARNING_MESSAGE);
                    break;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, result, ""Login Failed"", JOptionPane.ERROR_MESSAGE);
        }
        clearLogin();
    }                                        

    private void btnSlotRollActionPerformed(java.awt.event.ActionEvent evt) {                                            
        rollTimer = new Timer(150, new ActionListener() {
            long num1,num2,num3,num4,num5;
            int count = 0;
            @Override
            public void actionPerformed(ActionEvent ae) {
                num1 = Math.round(Math.random()*4)+1;
                num2 = Math.round(Math.random()*4)+1;
                num3 = Math.round(Math.random()*4)+1;
                num4 = Math.round(Math.random()*4)+1;
                num5 = Math.round(Math.random()*4)+1;
                setLabelIcon(lblRollNum1,num1);
                setLabelIcon(lblRollNum2,num2);
                setLabelIcon(lblRollNum3,num3);
                setLabelIcon(lblRollNum4,num4);
                setLabelIcon(lblRollNum5,num5);
                count++;
                
                if (count >= 20) {
                    rollTimer.stop();
                    btnSlotRoll.setEnabled(true);
                }
            }
        });
        btnSlotRoll.setEnabled(false);
        rollTimer.start();
    }                                           

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate=""collapsed"" desc="" Look and feel setting code (optional) "">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if (""Nimbus"".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Day29A.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Day29A.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Day29A.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Day29A.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Day29A().setVisible(true);
            }
        });
    }
    
    public void clearLogin() {
        txtUsername.setText("""");
        txtPassword.setText("""");
        txtUsername.requestFocus();
    }
    
    public void setLabelIcon(JLabel labelIn, long numIn){
        String assetAddress;
        switch ((int)numIn) {
            case 1:
                assetAddress = ""/day26/pic1.jpg"";
                break;
            case 2:
                assetAddress = ""/day26/pic2.jpg"";
                break;
            case 3:
                assetAddress = ""/day26/pic3.jpg"";
                break;
            case 4:
                assetAddress = ""/day26/pic4.jpg"";
                break;
            case 5:
            default:
                assetAddress = ""/day26/pic5.jpg"";
                break;
        }
        labelIn.setIcon(new javax.swing.ImageIcon(getClass().getResource(assetAddress)));
    }
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnSlotRoll;
    private javax.swing.JComboBox<String> cmbBet;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblCredits;
    private javax.swing.JLabel lblRollNum1;
    private javax.swing.JLabel lblRollNum2;
    private javax.swing.JLabel lblRollNum3;
    private javax.swing.JLabel lblRollNum4;
    private javax.swing.JLabel lblRollNum5;
    private javax.swing.JLabel lblUID;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration                   
}


// --------------------------------------------------------------

package day26;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

public class Day29B {
    private String address = ""jdbc:mysql://127.0.0.1:3306/db_mng_batch5"";
    private String userName = ""root"";
    private String passWord = """";
    
    public String loginCheck(String uName, String pWord) {
        String countResult = ""0"";
        String sqlQuery = ""SELECT COUNT(*) FROM tbl_login""
                + "" WHERE log_uname = ? AND log_pass = ?;"";
        
        try {
            Connection conn  = DriverManager.getConnection(
                    address,userName,passWord);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            stmt.setString(1, uName);
            stmt.setString(2, pWord);
            
            ResultSet rs = stmt.executeQuery();
            
            rs.next();
            countResult = rs.getString(1);
            
            conn.close();
        } catch (Exception e) {
            countResult = e.getMessage();
        }
        return countResult;
    }
    
    public String[] getUserInfo(String uName, String pWord) {
        String[] userInfo = {""0"",""MNG B5"",""1000.1""};
        
        String sqlQuery = ""SELECT log_id,log_uname,log_user_credits FROM tbl_login""
                + "" WHERE log_uname = ? AND log_pass = ? LIMIT 1"";
        
        try {
            Connection conn  = DriverManager.getConnection(
                    address,userName,passWord);
            PreparedStatement stmt = conn.prepareStatement(sqlQuery);
            
            stmt.setString(1, uName);
            stmt.setString(2, pWord);
            
            ResultSet rs = stmt.executeQuery();
            
            rs.next();
            userInfo[0] = rs.getString(1);
            userInfo[1] = rs.getString(2);
            userInfo[2] = rs.getString(3);
            
            conn.close();
        } catch (Exception e) {
            userInfo[1]= e.getMessage();
        }
        
        return userInfo;
    }
}
"
bmHSLdn0,Allocate minimum number of pages,jayati,C++,Tuesday 5th of September 2023 08:58:06 PM CDT,"//{ Driver Code Starts
// Initial template for C++

#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template in C++

class Solution 
{
    public:
    //Function to find minimum number of pages.
    bool allocateposs(int barrier,int N,int M,int A[])
    {
        int pages=0;
        int allocate_stud=1;
        for(int i=0;i<N;i++)
        {
            if(barrier<A[i])
            {
                return false;
            }
            if(pages+A[i]>barrier)
            {
                allocate_stud++;
                pages=A[i];
            }
            else
            {
                pages+=A[i];
            }
        }
        if(allocate_stud>M)
        {
            return false;
        }

      return true;
       
        
    }
    int findPages(int A[], int N, int M) 
    {
        //code here
        int low=A[0];
        int high=0;
        int ans=-1;
        for(int i=0;i<N;i++)
        {
            high+=A[i];
        }
        if(M>N)
        {
          return -1;
        }
        while(low<=high)
        {
            int mid=(low+high)>>1;
            if(allocateposs(mid,N,M,A))
            {
                ans=mid;
                high=mid-1;
            }
            else
            {
                low=mid+1;
            }
        }
        return ans;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        int A[n];
        for(int i=0;i<n;i++){
            cin>>A[i];
        }
        int m;
        cin>>m;
        Solution ob;
        cout << ob.findPages(A, n, m) << endl;
    }
    return 0;
}

// } Driver Code Ends
// https://practice.geeksforgeeks.org/problems/allocate-minimum-number-of-pages0937/"
hUsYnnGa,Add crude oil,Huffmeister,Lua,Tuesday 5th of September 2023 07:45:42 PM CDT,"/c local position=nil
for i=1,9 do
	position=game.player.surface.find_non_colliding_position(""crude-oil"", game.player.position, 0, i/2+1.5)
	if position then 
		game.player.surface.create_entity({name=""crude-oil"", amount=100000, position=position})
	end
end"
4LPBH0uL,decoradores,teslariu,Python,Tuesday 5th of September 2023 07:43:18 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  decoradores.py
#  
import functools
import time

def decorador(funcion):
	# Plantilla estandar para construir decoradores
	@functools.wraps(funcion)
	def wrapper_decorador(*args, **kwargs):
		# hace algo antes
		valor = funcion(*args, **kwargs)
		# hacer algo despues
		return valor
	return wrapper_decorador


def duplicar_borrador(funcion):
	def wrapper_duplicar():
		funcion()
		funcion()
	return wrapper_duplicar


def duplicar(funcion):
	def wrapper_duplicar(*args, **kwargs):
		funcion(*args, **kwargs)
		funcion(*args, **kwargs)
	return wrapper_duplicar
	
	
def debug(funcion):
	""""""Imprime la firma de la función y su valor de retorno""""""
	@functools.wraps(funcion)
	def wrapper_debug(*args, **kwargs):
		# creo una lista de argumentos posicionales de la función
		args_repr = [repr(a) for a in args]
		
		# creo una lista de argumentos keywords
		kwargs_repr = [f""{k} = {w}"" for k,v in kwargs.items()]
		
		# unimos los argumentos con la firma
		firma = "","".join(args_repr + kwargs_repr)
		print(f""Llamando a la función {funcion.__name__}({firma})"")
		valor = funcion(*args, **kwargs)
		print(f""La función {funcion.__name__} devolvió {valor}"")
		return valor
	return wrapper_debug
		
	
def timer(funcion):
	""""""Imprime el tiempo de ejecuciòn de la función decorada""""""	
	@functools.wraps(funcion)
	def wrapper_timer(*args, **kwargs):
		# almacena el instante inicial
		start_time = time.perf_counter()
		valor = funcion(*args, **kwargs)
		# almacena el instante final
		end_time = time.perf_counter()
		run_time = end_time - start_time
		print(f""tiempo de ejecución: '{funcion.__name__}' en {run_time:.4f} segundos"")
		return valor
	return wrapper_timer
	
	
	
	
	
	
	
	
	
	
	
		
"
quhU2qH3,funciones decoradas,teslariu,Python,Tuesday 5th of September 2023 07:42:29 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Funciones: devuelven valores basados en argumentos
""""""
def sumar(n):
	return n + 1
	
print(sumar(3))

# LAS FUNCIONES SON INSTANCIAS OBJETOS DE PRIMERA CLASE
def diga_hola(nombre):
	return f""Hola {nombre}""
	
def es_maravilloso(nombre):
	return f""{nombre} es maravilloso""
	
def saludar_a_juan(funcion):  # se pasa la referencia a la funcion
	return funcion(""Juan"")
	
print(saludar_a_juan(diga_hola))
print(saludar_a_juan(es_maravilloso))


# funciones internas: son funciones dentro de otras funciones
def padre():
	print(""Dentro de la función padre"")
	
	def primer_hijo():
		print(""Dentro del primer hijo"")

	def segundo_hijo():
		print(""Dentro del segundo hijo"")
		
	segundo_hijo()
	primer_hijo()
	
	
padre()  # imprime padre, segundo hijo, primer hijo

# esto da error: llamar a func. internas desde afuera
# primer_hijo()


# devolviendo funciones internas
def padre(numero):
		
	def primer_hijo():
		print(""Hola, soy Ana, la primera hija"")

	def segundo_hijo():
		print(""Hola, soy Hugo, el segundo hijo"")
		
	if numero == 1:
		return primer_hijo
	else:
		return segundo_hijo


primero = padre(1)
print(primero())  




# decorador simple
def mi_decorador(funcion):
	def wrapper():
		print(""antes de llamar a la función"")
		funcion()
		print(""despues de llamar a la función"")
	
	return wrapper
	
def diga_whisky():
	print(""whisky"")
	
diga_whisky = mi_decorador(diga_whisky)
diga_whisky()


from datetime import datetime

def solo_de_dia(funcion):
	def wrapper():
		if 7 <= datetime.now().hour < 21:
			funcion()
		else:
			pass
	
	return wrapper
	
# Decorador sin @	
#def gritar():
#	print(""AAAAAAAHHHHHHHHH"")

#gritar = solo_de_dia(gritar)
#gritar()			


##### Decorador con @
@solo_de_dia
def gritar():
	print(""AAAAAAAHHHHHHHHH"")
	
gritar()


# reuso de decoradores para funciones sin argumentos
from decoradores import duplicar_borrador

@duplicar_borrador
def diga_hola():
	print(""Hola"")

diga_hola()


# decorando funciones con argumentos
from decoradores import duplicar

@duplicar
def diga_hola(nombre):
	print(f""Hola {nombre}"")
	
diga_hola(""Juan"")





@debug
def saludar(nombre, edad=None):
	if edad is None:
		return f""Hola bebé {nombre}""
	else:
		return f""Hola {nombre}, usted tiene {edad} años""
		
print(""Debugging..."")
saludar(""Benjamín"")
saludar(""Ricardo"", 44)

""""""
from decoradores import debug, timer

class PierdeTiempo:
	@debug
	def __init__(self, maximo):
		self.maximo = maximo
		
	@timer
	def perder_tiempo(self, veces):
		for _ in range(veces):
			sum([i**2 for i in range(self.maximo)])
			
print(""pierde tiempo"")
demora = PierdeTiempo(1000)
demora.perder_tiempo(999)
			
@timer
def dormir():
	import time
	time.sleep(10)
	return 0

dormir()




	
	






		
		
		
		
		
		
"
7WUcQjsz,2023-09-05_stats.json,rdp_snitch,JSON,Tuesday 5th of September 2023 07:18:19 PM CDT,"{
  ""ip"": {
    ""20.199.104.4"": 144,
    ""120.27.12.65"": 3,
    ""193.142.147.9"": 18,
    ""193.142.146.17"": 9,
    ""68.183.175.64"": 3,
    ""54.227.15.154"": 225,
    ""71.142.237.21"": 12,
    ""58.218.204.183"": 18,
    ""194.165.16.37"": 6,
    ""43.134.190.130"": 48,
    ""103.67.198.77"": 36,
    ""193.233.21.155"": 3,
    ""198.235.24.241"": 9,
    ""84.32.220.60"": 3,
    ""185.170.144.113"": 18,
    ""45.143.201.62"": 9,
    ""45.129.14.96"": 24,
    ""87.251.75.120"": 3,
    ""106.116.169.71"": 3,
    ""194.165.16.78"": 6,
    ""185.170.144.3"": 6,
    ""185.166.27.110"": 3,
    ""164.92.153.104"": 3,
    ""205.210.31.23"": 9,
    ""178.185.51.90"": 3,
    ""87.251.75.145"": 3,
    ""43.202.56.105"": 3,
    ""45.227.254.48"": 6,
    ""170.187.237.59"": 3,
    ""210.209.92.76"": 3,
    ""103.238.110.134"": 3,
    ""112.5.87.34"": 3,
    ""35.220.157.110"": 3,
    ""34.92.96.193"": 3,
    ""152.32.197.121"": 3,
    ""45.83.67.152"": 3,
    ""45.129.14.208"": 9,
    ""198.235.24.185"": 9,
    ""220.76.61.114"": 9,
    ""178.253.53.78"": 3,
    ""87.251.75.64"": 3,
    ""194.165.16.76"": 6,
    ""103.130.217.247"": 6,
    ""2.57.168.218"": 3,
    ""62.122.184.168"": 12,
    ""198.235.24.66"": 9,
    ""62.122.184.166"": 12,
    ""194.165.16.11"": 6
  },
  ""asn"": {
    ""AS8075"": 144,
    ""AS37963"": 3,
    ""AS208046"": 27,
    ""AS14061"": 6,
    ""AS14618"": 225,
    ""AS7018"": 12,
    ""AS4134"": 21,
    ""AS48721"": 24,
    ""AS132203"": 48,
    ""AS135918"": 36,
    ""AS56380"": 3,
    ""AS396982"": 39,
    ""AS34984"": 3,
    ""AS197414"": 24,
    ""AS210950"": 9,
    ""AS198465"": 33,
    ""AS208091"": 9,
    ""AS207097"": 3,
    ""AS12389"": 3,
    ""AS16509"": 3,
    ""AS267784"": 6,
    ""AS63949"": 3,
    ""AS10103"": 3,
    ""AS45916"": 3,
    ""AS9808"": 3,
    ""AS15169"": 3,
    ""AS135377"": 3,
    ""AS208843"": 3,
    ""AS4766"": 9,
    ""AS41378"": 3,
    ""AS135951"": 6,
    ""AS62240"": 3,
    ""AS57523"": 24
  },
  ""isp"": {
    ""Microsoft Corporation"": 144,
    ""Addresses CNNIC"": 3,
    ""ColocationX Ltd."": 27,
    ""DigitalOcean, LLC"": 6,
    ""Amazon.com, Inc."": 228,
    ""AT&T Services, Inc."": 12,
    ""Chinanet"": 21,
    ""Flyservers S.A."": 30,
    ""Aceville Pte.ltd"": 48,
    ""CVCO"": 36,
    ""''IT FRUIT'' S.R.L."": 3,
    ""Google LLC"": 42,
    ""Superonline Iletisim Hizmetleri A.S"": 3,
    ""Xhost Internet Solutions LP"": 33,
    ""TOV E-RISHENNYA"": 9,
    ""BtHoster LTD"": 33,
    ""Online Company for Technological Information, Supply of Electronic Equipment an"": 3,
    ""OJSC \""Sibirtelecom\"""": 3,
    ""Akamai Technologies, Inc."": 3,
    ""NWT"": 3,
    ""gtpl henish cable vision"": 3,
    ""China Mobile"": 3,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 3,
    ""INTERNET-RESEARCH"": 3,
    ""Korea Telecom"": 9,
    ""Kirino LLC"": 3,
    ""Webico Company Limited"": 6,
    ""Clouvider Limited"": 3,
    ""Chang Way Technologies Co. Limited"": 24
  },
  ""org"": {
    ""Microsoft Azure Cloud (francecentral)"": 144,
    ""Aliyun Computing Co., LTD"": 3,
    ""x33 Networks IBC"": 18,
    ""ColocationX Ltd"": 9,
    ""DigitalOcean, LLC"": 6,
    ""AWS EC2 (us-east-1)"": 225,
    ""AT&T Corp"": 12,
    ""Chinanet JS"": 18,
    ""Flyservers S.A"": 24,
    ""Unknown"": 60,
    ""Camera-viet Technology Solutions Company Limited"": 36,
    ""FOP Dmytro Nedilskyi"": 3,
    ""Palo Alto Networks, Inc"": 36,
    ""Turkcell Iletisim Hizmetleri"": 3,
    ""Xhostis"": 24,
    ""TOV VAIZ PARTNER"": 9,
    ""Internet-Transit LTD"": 33,
    ""Xhost Internet Solutions"": 9,
    ""Chinanet HE"": 3,
    ""OJSC Sibirtelecom"": 3,
    ""AWS EC2 (ap-northeast-2)"": 3,
    ""UAB Host Baltic"": 6,
    ""Linode"": 3,
    ""Gtpl Broadband Pvt. Ltd."": 3,
    ""China Mobile Communications Corporation"": 3,
    ""Google Cloud (asia-east2)"": 6,
    ""Ucloud Information Technology (hk) Limited"": 3,
    ""Korea Telecom"": 9,
    ""Kirino"": 3,
    ""Vietnam Internet Network Information Center"": 6,
    ""Chang Way Technologies Co. Limited"": 24
  },
  ""regionName"": {
    ""\u00cele-de-France"": 144,
    ""Shandong"": 3,
    ""English River"": 18,
    ""North Holland"": 36,
    ""California"": 39,
    ""Virginia"": 225,
    ""Florida"": 12,
    ""Jiangsu"": 18,
    ""Kaunas"": 24,
    ""North West"": 48,
    ""Da Nang"": 36,
    ""Chi\u0219in\u0103u Municipality"": 36,
    ""Istanbul"": 3,
    ""Kyiv City"": 9,
    ""England"": 9,
    ""Hebei"": 3,
    ""Sulaymaniyah"": 3,
    ""Krasnoyarsk Krai"": 3,
    ""Seoul"": 12,
    ""Vilnius"": 6,
    ""Maharashtra"": 3,
    ""Tsuen Wan District"": 3,
    ""Gujarat"": 3,
    ""Fujian"": 3,
    ""Central and Western District"": 9,
    ""Sao Paulo"": 3,
    ""Land Berlin"": 3,
    ""Ho Chi Minh"": 6,
    ""New Jersey"": 3,
    ""Moscow"": 24
  },
  ""country"": {
    ""France"": 144,
    ""China"": 27,
    ""Seychelles"": 18,
    ""Netherlands"": 36,
    ""United States"": 279,
    ""Lithuania"": 30,
    ""Singapore"": 48,
    ""Vietnam"": 42,
    ""Moldova"": 36,
    ""Turkey"": 3,
    ""Ukraine"": 9,
    ""United Kingdom"": 9,
    ""Iraq"": 3,
    ""Russia"": 27,
    ""South Korea"": 12,
    ""India"": 6,
    ""Hong Kong"": 12,
    ""Brazil"": 3,
    ""Germany"": 3
  },
  ""account"": {
    ""hello"": 513,
    ""Domain"": 102,
    ""beio"": 6,
    ""Test"": 48,
    ""Administr"": 27,
    ""fHgPZKIXK"": 3,
    ""gTQkWj"": 3,
    ""MCrRzu"": 3,
    ""(empty)"": 9,
    ""oRdhYCgne"": 3,
    ""dDHnOV"": 3,
    ""hdsjwX"": 3,
    ""Administrator"": 3,
    ""user"": 3,
    ""KFTQViVAI"": 3,
    ""vtsMNF"": 3,
    ""FcVtYb"": 3,
    ""NKTaHAAIB"": 3,
    ""FAPddt"": 3,
    ""ekjbwL"": 3
  },
  ""keyboard"": {
    ""Unknown"": 747
  },
  ""client_build"": {
    ""Unknown"": 747
  },
  ""client_name"": {
    ""Unknown"": 747
  },
  ""ip_type"": {
    ""hosting"": 474,
    ""Unknown"": 237,
    ""hosting & proxy"": 3,
    ""proxy"": 24,
    ""mobile"": 6,
    ""mobile & hosting & proxy"": 3
  }
}"
EVa51UP8,2023-09-05_stats.json,rdp_snitch,JSON,Tuesday 5th of September 2023 07:16:15 PM CDT,"{
  ""ip"": {
    ""20.199.104.4"": 96,
    ""120.27.12.65"": 2,
    ""193.142.147.9"": 12,
    ""193.142.146.17"": 6,
    ""68.183.175.64"": 2,
    ""54.227.15.154"": 150,
    ""71.142.237.21"": 8,
    ""58.218.204.183"": 12,
    ""194.165.16.37"": 4,
    ""43.134.190.130"": 32,
    ""103.67.198.77"": 24,
    ""193.233.21.155"": 2,
    ""198.235.24.241"": 6,
    ""84.32.220.60"": 2,
    ""185.170.144.113"": 12,
    ""45.143.201.62"": 6,
    ""45.129.14.96"": 16,
    ""87.251.75.120"": 2,
    ""106.116.169.71"": 2,
    ""194.165.16.78"": 4,
    ""185.170.144.3"": 4,
    ""185.166.27.110"": 2,
    ""164.92.153.104"": 2,
    ""205.210.31.23"": 6,
    ""178.185.51.90"": 2,
    ""87.251.75.145"": 2,
    ""43.202.56.105"": 2,
    ""45.227.254.48"": 4,
    ""170.187.237.59"": 2,
    ""210.209.92.76"": 2,
    ""103.238.110.134"": 2,
    ""112.5.87.34"": 2,
    ""35.220.157.110"": 2,
    ""34.92.96.193"": 2,
    ""152.32.197.121"": 2,
    ""45.83.67.152"": 2,
    ""45.129.14.208"": 6,
    ""198.235.24.185"": 6,
    ""220.76.61.114"": 6,
    ""178.253.53.78"": 2,
    ""87.251.75.64"": 2,
    ""194.165.16.76"": 4,
    ""103.130.217.247"": 4,
    ""2.57.168.218"": 2,
    ""62.122.184.168"": 8,
    ""198.235.24.66"": 6,
    ""62.122.184.166"": 8,
    ""194.165.16.11"": 4
  },
  ""asn"": {
    ""AS8075"": 96,
    ""AS37963"": 2,
    ""AS208046"": 18,
    ""AS14061"": 4,
    ""AS14618"": 150,
    ""AS7018"": 8,
    ""AS4134"": 14,
    ""AS48721"": 16,
    ""AS132203"": 32,
    ""AS135918"": 24,
    ""AS56380"": 2,
    ""AS396982"": 26,
    ""AS34984"": 2,
    ""AS197414"": 16,
    ""AS210950"": 6,
    ""AS198465"": 22,
    ""AS208091"": 6,
    ""AS207097"": 2,
    ""AS12389"": 2,
    ""AS16509"": 2,
    ""AS267784"": 4,
    ""AS63949"": 2,
    ""AS10103"": 2,
    ""AS45916"": 2,
    ""AS9808"": 2,
    ""AS15169"": 2,
    ""AS135377"": 2,
    ""AS208843"": 2,
    ""AS4766"": 6,
    ""AS41378"": 2,
    ""AS135951"": 4,
    ""AS62240"": 2,
    ""AS57523"": 16
  },
  ""isp"": {
    ""Microsoft Corporation"": 96,
    ""Addresses CNNIC"": 2,
    ""ColocationX Ltd."": 18,
    ""DigitalOcean, LLC"": 4,
    ""Amazon.com, Inc."": 152,
    ""AT&T Services, Inc."": 8,
    ""Chinanet"": 14,
    ""Flyservers S.A."": 20,
    ""Aceville Pte.ltd"": 32,
    ""CVCO"": 24,
    ""''IT FRUIT'' S.R.L."": 2,
    ""Google LLC"": 28,
    ""Superonline Iletisim Hizmetleri A.S"": 2,
    ""Xhost Internet Solutions LP"": 22,
    ""TOV E-RISHENNYA"": 6,
    ""BtHoster LTD"": 22,
    ""Online Company for Technological Information, Supply of Electronic Equipment an"": 2,
    ""OJSC \""Sibirtelecom\"""": 2,
    ""Akamai Technologies, Inc."": 2,
    ""NWT"": 2,
    ""gtpl henish cable vision"": 2,
    ""China Mobile"": 2,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 2,
    ""INTERNET-RESEARCH"": 2,
    ""Korea Telecom"": 6,
    ""Kirino LLC"": 2,
    ""Webico Company Limited"": 4,
    ""Clouvider Limited"": 2,
    ""Chang Way Technologies Co. Limited"": 16
  },
  ""org"": {
    ""Microsoft Azure Cloud (francecentral)"": 96,
    ""Aliyun Computing Co., LTD"": 2,
    ""x33 Networks IBC"": 12,
    ""ColocationX Ltd"": 6,
    ""DigitalOcean, LLC"": 4,
    ""AWS EC2 (us-east-1)"": 150,
    ""AT&T Corp"": 8,
    ""Chinanet JS"": 12,
    ""Flyservers S.A"": 16,
    ""Unknown"": 40,
    ""Camera-viet Technology Solutions Company Limited"": 24,
    ""FOP Dmytro Nedilskyi"": 2,
    ""Palo Alto Networks, Inc"": 24,
    ""Turkcell Iletisim Hizmetleri"": 2,
    ""Xhostis"": 16,
    ""TOV VAIZ PARTNER"": 6,
    ""Internet-Transit LTD"": 22,
    ""Xhost Internet Solutions"": 6,
    ""Chinanet HE"": 2,
    ""OJSC Sibirtelecom"": 2,
    ""AWS EC2 (ap-northeast-2)"": 2,
    ""UAB Host Baltic"": 4,
    ""Linode"": 2,
    ""Gtpl Broadband Pvt. Ltd."": 2,
    ""China Mobile Communications Corporation"": 2,
    ""Google Cloud (asia-east2)"": 4,
    ""Ucloud Information Technology (hk) Limited"": 2,
    ""Korea Telecom"": 6,
    ""Kirino"": 2,
    ""Vietnam Internet Network Information Center"": 4,
    ""Chang Way Technologies Co. Limited"": 16
  },
  ""regionName"": {
    ""\u00cele-de-France"": 96,
    ""Shandong"": 2,
    ""English River"": 12,
    ""North Holland"": 24,
    ""California"": 26,
    ""Virginia"": 150,
    ""Florida"": 8,
    ""Jiangsu"": 12,
    ""Kaunas"": 16,
    ""North West"": 32,
    ""Da Nang"": 24,
    ""Chi\u0219in\u0103u Municipality"": 24,
    ""Istanbul"": 2,
    ""Kyiv City"": 6,
    ""England"": 6,
    ""Hebei"": 2,
    ""Sulaymaniyah"": 2,
    ""Krasnoyarsk Krai"": 2,
    ""Seoul"": 8,
    ""Vilnius"": 4,
    ""Maharashtra"": 2,
    ""Tsuen Wan District"": 2,
    ""Gujarat"": 2,
    ""Fujian"": 2,
    ""Central and Western District"": 6,
    ""Sao Paulo"": 2,
    ""Land Berlin"": 2,
    ""Ho Chi Minh"": 4,
    ""New Jersey"": 2,
    ""Moscow"": 16
  },
  ""country"": {
    ""France"": 96,
    ""China"": 18,
    ""Seychelles"": 12,
    ""Netherlands"": 24,
    ""United States"": 186,
    ""Lithuania"": 20,
    ""Singapore"": 32,
    ""Vietnam"": 28,
    ""Moldova"": 24,
    ""Turkey"": 2,
    ""Ukraine"": 6,
    ""United Kingdom"": 6,
    ""Iraq"": 2,
    ""Russia"": 18,
    ""South Korea"": 8,
    ""India"": 4,
    ""Hong Kong"": 8,
    ""Brazil"": 2,
    ""Germany"": 2
  },
  ""account"": {
    ""hello"": 342,
    ""Domain"": 68,
    ""beio"": 4,
    ""Test"": 32,
    ""Administr"": 18,
    ""fHgPZKIXK"": 2,
    ""gTQkWj"": 2,
    ""MCrRzu"": 2,
    ""(empty)"": 6,
    ""oRdhYCgne"": 2,
    ""dDHnOV"": 2,
    ""hdsjwX"": 2,
    ""Administrator"": 2,
    ""user"": 2,
    ""KFTQViVAI"": 2,
    ""vtsMNF"": 2,
    ""FcVtYb"": 2,
    ""NKTaHAAIB"": 2,
    ""FAPddt"": 2,
    ""ekjbwL"": 2
  },
  ""keyboard"": {
    ""Unknown"": 498
  },
  ""client_build"": {
    ""Unknown"": 498
  },
  ""client_name"": {
    ""Unknown"": 498
  },
  ""ip_type"": {
    ""hosting"": 316,
    ""Unknown"": 158,
    ""hosting & proxy"": 2,
    ""proxy"": 16,
    ""mobile"": 4,
    ""mobile & hosting & proxy"": 2
  }
}"
teSNk3q4,2023-09-05_stats.json,rdp_snitch,JSON,Tuesday 5th of September 2023 07:15:09 PM CDT,"{
  ""ip"": {
    ""20.199.104.4"": 48,
    ""120.27.12.65"": 1,
    ""193.142.147.9"": 6,
    ""193.142.146.17"": 3,
    ""68.183.175.64"": 1,
    ""54.227.15.154"": 75,
    ""71.142.237.21"": 4,
    ""58.218.204.183"": 6,
    ""194.165.16.37"": 2,
    ""43.134.190.130"": 16,
    ""103.67.198.77"": 12,
    ""193.233.21.155"": 1,
    ""198.235.24.241"": 3,
    ""84.32.220.60"": 1,
    ""185.170.144.113"": 6,
    ""45.143.201.62"": 3,
    ""45.129.14.96"": 8,
    ""87.251.75.120"": 1,
    ""106.116.169.71"": 1,
    ""194.165.16.78"": 2,
    ""185.170.144.3"": 2,
    ""185.166.27.110"": 1,
    ""164.92.153.104"": 1,
    ""205.210.31.23"": 3,
    ""178.185.51.90"": 1,
    ""87.251.75.145"": 1,
    ""43.202.56.105"": 1,
    ""45.227.254.48"": 2,
    ""170.187.237.59"": 1,
    ""210.209.92.76"": 1,
    ""103.238.110.134"": 1,
    ""112.5.87.34"": 1,
    ""35.220.157.110"": 1,
    ""34.92.96.193"": 1,
    ""152.32.197.121"": 1,
    ""45.83.67.152"": 1,
    ""45.129.14.208"": 3,
    ""198.235.24.185"": 3,
    ""220.76.61.114"": 3,
    ""178.253.53.78"": 1,
    ""87.251.75.64"": 1,
    ""194.165.16.76"": 2,
    ""103.130.217.247"": 2,
    ""2.57.168.218"": 1,
    ""62.122.184.168"": 4,
    ""198.235.24.66"": 3,
    ""62.122.184.166"": 4,
    ""194.165.16.11"": 2
  },
  ""asn"": {
    ""AS8075"": 48,
    ""AS37963"": 1,
    ""AS208046"": 9,
    ""AS14061"": 2,
    ""AS14618"": 75,
    ""AS7018"": 4,
    ""AS4134"": 7,
    ""AS48721"": 8,
    ""AS132203"": 16,
    ""AS135918"": 12,
    ""AS56380"": 1,
    ""AS396982"": 13,
    ""AS34984"": 1,
    ""AS197414"": 8,
    ""AS210950"": 3,
    ""AS198465"": 11,
    ""AS208091"": 3,
    ""AS207097"": 1,
    ""AS12389"": 1,
    ""AS16509"": 1,
    ""AS267784"": 2,
    ""AS63949"": 1,
    ""AS10103"": 1,
    ""AS45916"": 1,
    ""AS9808"": 1,
    ""AS15169"": 1,
    ""AS135377"": 1,
    ""AS208843"": 1,
    ""AS4766"": 3,
    ""AS41378"": 1,
    ""AS135951"": 2,
    ""AS62240"": 1,
    ""AS57523"": 8
  },
  ""isp"": {
    ""Microsoft Corporation"": 48,
    ""Addresses CNNIC"": 1,
    ""ColocationX Ltd."": 9,
    ""DigitalOcean, LLC"": 2,
    ""Amazon.com, Inc."": 76,
    ""AT&T Services, Inc."": 4,
    ""Chinanet"": 7,
    ""Flyservers S.A."": 10,
    ""Aceville Pte.ltd"": 16,
    ""CVCO"": 12,
    ""''IT FRUIT'' S.R.L."": 1,
    ""Google LLC"": 14,
    ""Superonline Iletisim Hizmetleri A.S"": 1,
    ""Xhost Internet Solutions LP"": 11,
    ""TOV E-RISHENNYA"": 3,
    ""BtHoster LTD"": 11,
    ""Online Company for Technological Information, Supply of Electronic Equipment an"": 1,
    ""OJSC \""Sibirtelecom\"""": 1,
    ""Akamai Technologies, Inc."": 1,
    ""NWT"": 1,
    ""gtpl henish cable vision"": 1,
    ""China Mobile"": 1,
    ""UCLOUD INFORMATION TECHNOLOGY (HK) LIMITED"": 1,
    ""INTERNET-RESEARCH"": 1,
    ""Korea Telecom"": 3,
    ""Kirino LLC"": 1,
    ""Webico Company Limited"": 2,
    ""Clouvider Limited"": 1,
    ""Chang Way Technologies Co. Limited"": 8
  },
  ""org"": {
    ""Microsoft Azure Cloud (francecentral)"": 48,
    ""Aliyun Computing Co., LTD"": 1,
    ""x33 Networks IBC"": 6,
    ""ColocationX Ltd"": 3,
    ""DigitalOcean, LLC"": 2,
    ""AWS EC2 (us-east-1)"": 75,
    ""AT&T Corp"": 4,
    ""Chinanet JS"": 6,
    ""Flyservers S.A"": 8,
    ""Unknown"": 20,
    ""Camera-viet Technology Solutions Company Limited"": 12,
    ""FOP Dmytro Nedilskyi"": 1,
    ""Palo Alto Networks, Inc"": 12,
    ""Turkcell Iletisim Hizmetleri"": 1,
    ""Xhostis"": 8,
    ""TOV VAIZ PARTNER"": 3,
    ""Internet-Transit LTD"": 11,
    ""Xhost Internet Solutions"": 3,
    ""Chinanet HE"": 1,
    ""OJSC Sibirtelecom"": 1,
    ""AWS EC2 (ap-northeast-2)"": 1,
    ""UAB Host Baltic"": 2,
    ""Linode"": 1,
    ""Gtpl Broadband Pvt. Ltd."": 1,
    ""China Mobile Communications Corporation"": 1,
    ""Google Cloud (asia-east2)"": 2,
    ""Ucloud Information Technology (hk) Limited"": 1,
    ""Korea Telecom"": 3,
    ""Kirino"": 1,
    ""Vietnam Internet Network Information Center"": 2,
    ""Chang Way Technologies Co. Limited"": 8
  },
  ""regionName"": {
    ""\u00cele-de-France"": 48,
    ""Shandong"": 1,
    ""English River"": 6,
    ""North Holland"": 12,
    ""California"": 13,
    ""Virginia"": 75,
    ""Florida"": 4,
    ""Jiangsu"": 6,
    ""Kaunas"": 8,
    ""North West"": 16,
    ""Da Nang"": 12,
    ""Chi\u0219in\u0103u Municipality"": 12,
    ""Istanbul"": 1,
    ""Kyiv City"": 3,
    ""England"": 3,
    ""Hebei"": 1,
    ""Sulaymaniyah"": 1,
    ""Krasnoyarsk Krai"": 1,
    ""Seoul"": 4,
    ""Vilnius"": 2,
    ""Maharashtra"": 1,
    ""Tsuen Wan District"": 1,
    ""Gujarat"": 1,
    ""Fujian"": 1,
    ""Central and Western District"": 3,
    ""Sao Paulo"": 1,
    ""Land Berlin"": 1,
    ""Ho Chi Minh"": 2,
    ""New Jersey"": 1,
    ""Moscow"": 8
  },
  ""country"": {
    ""France"": 48,
    ""China"": 9,
    ""Seychelles"": 6,
    ""Netherlands"": 12,
    ""United States"": 93,
    ""Lithuania"": 10,
    ""Singapore"": 16,
    ""Vietnam"": 14,
    ""Moldova"": 12,
    ""Turkey"": 1,
    ""Ukraine"": 3,
    ""United Kingdom"": 3,
    ""Iraq"": 1,
    ""Russia"": 9,
    ""South Korea"": 4,
    ""India"": 2,
    ""Hong Kong"": 4,
    ""Brazil"": 1,
    ""Germany"": 1
  },
  ""account"": {
    ""hello"": 171,
    ""Domain"": 34,
    ""beio"": 2,
    ""Test"": 16,
    ""Administr"": 9,
    ""fHgPZKIXK"": 1,
    ""gTQkWj"": 1,
    ""MCrRzu"": 1,
    ""(empty)"": 3,
    ""oRdhYCgne"": 1,
    ""dDHnOV"": 1,
    ""hdsjwX"": 1,
    ""Administrator"": 1,
    ""user"": 1,
    ""KFTQViVAI"": 1,
    ""vtsMNF"": 1,
    ""FcVtYb"": 1,
    ""NKTaHAAIB"": 1,
    ""FAPddt"": 1,
    ""ekjbwL"": 1
  },
  ""keyboard"": {
    ""Unknown"": 249
  },
  ""client_build"": {
    ""Unknown"": 249
  },
  ""client_name"": {
    ""Unknown"": 249
  },
  ""ip_type"": {
    ""hosting"": 158,
    ""Unknown"": 79,
    ""hosting & proxy"": 1,
    ""proxy"": 8,
    ""mobile"": 2,
    ""mobile & hosting & proxy"": 1
  }
}"
gK0DC1S6,wordpress_deployer.sh,Sergio_Istea,Bash,Tuesday 5th of September 2023 07:08:56 PM CDT,"#!/bin/bash
set -e

if test -f /deployed; then

	exit
fi


# instalacion del stack LAMP

apt update && apt install apache2 php mariadb-server libapache2-mod-php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip -y


# creacion de base de datos

mysql -e ""CREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;""

# Creacion de usuario

mysql -e ""CREATE USER 'wordpressuser'@'%' IDENTIFIED BY 'password';""

# PRivilegios

mysql -e ""GRANT ALL ON wordpress.* TO 'wordpressuser'@'%';""


mysql -e ""FLUSH PRIVILEGES;""

# wordpress

rm -r /var/www/html

cd /var/www && curl -O https://wordpress.org/latest.tar.gz && tar xf latest.tar.gz && mv wordpress html

cp /var/www/html/wp-config-sample.php /var/www/html/wp-config.php


sed -i 's/database_name_here/wordpress/' /var/www/html/wp-config.php
sed -i 's/username_here/wordpressuser/' /var/www/html/wp-config.php
sed -i 's/password_here/password/' /var/www/html/wp-config.php


# Evitar que el script se vuelva a ejecutar

touch /deployed
"
E6RJPhqv,Untitled,SkyCrafter0,Python,Tuesday 5th of September 2023 06:53:31 PM CDT,"import x
"
8X8qViqb,Cobachoic,Vassa007,Dart,Tuesday 5th of September 2023 06:24:15 PM CDT,"import 'dart:convert';
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  List<Peserta> pesertaList = [
    Peserta(""Peserta 1"", ""hadir"", ""sudah""),
    Peserta(""Peserta 2"", ""hadir"", ""belum""),
    Peserta(""Peserta 3"", ""ijin"", ""sudah""),
    Peserta(""Peserta 4"", ""hadir"", ""sudah""),
    Peserta(""Peserta 5"", ""ijin"", ""belum""),
  ];

  String selectedKehadiran = ""hadir"";
  String selectedStatus = ""sudah"";

  List<Peserta> filteredList = [];

  @override
  void initState() {
    super.initState();
    // Inisialisasi filteredList dengan semua peserta saat aplikasi pertama kali dimulai.
    filteredList = pesertaList;
  }

  // Fungsi untuk memfilter peserta berdasarkan kedua kriteria
  void filterPeserta() {
    setState(() {
      filteredList = pesertaList.where((peserta) {
        if ((selectedKehadiran == ""semua"" || peserta.kehadiran == selectedKehadiran) &&
            (selectedStatus == ""semua"" || peserta.status == selectedStatus)) {
          return true;
        }
        return false;
      }).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Filter Peserta'),
        ),
        body: Column(
          children: [
            Row(
              children: [
                FutureBuilder(
                  // Menggantilah dengan pemanggilan metode untuk mendapatkan JSON yang sesuai dengan pilihan ChoiceChip.
                  future: loadChoiceKehadiran(),
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      List<String> choices = json.decode(snapshot.data.toString());

                      return Wrap(
                        children: choices.map((choice) {
                          return ChoiceChip(
                            label: Text(choice),
                            selected: selectedKehadiran == choice,
                            onSelected: (selected) {
                              setState(() {
                                selectedKehadiran = selected ? choice : 'semua';
                                filterPeserta();
                              });
                            },
                          );
                        }).toList(),
                      );
                    } else {
                      return CircularProgressIndicator();
                    }
                  },
                ),
                FutureBuilder(
                  // Menggantilah dengan pemanggilan metode untuk mendapatkan JSON yang sesuai dengan pilihan ChoiceChip.
                  future: loadChoiceStatus(),
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      List<String> choices = json.decode(snapshot.data.toString());

                      return Wrap(
                        children: choices.map((choice) {
                          return ChoiceChip(
                            label: Text(choice),
                            selected: selectedStatus == choice,
                            onSelected: (selected) {
                              setState(() {
                                selectedStatus = selected ? choice : 'semua';
                                filterPeserta();
                              });
                            },
                          );
                        }).toList(),
                      );
                    } else {
                      return CircularProgressIndicator();
                    }
                  },
                ),
              ],
            ),
            Expanded(
              child: ListView.builder(
                itemCount: filteredList.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(filteredList[index].nama),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Metode untuk mendapatkan JSON pilihan Choice Kehadiran.
  Future<String> loadChoiceKehadiran() async {
    // Simulasi pemanggilan data JSON dari sumber eksternal.
    await Future.delayed(Duration(seconds: 1));
    return '[""semua"",""hadir"",""ijin""]';
  }

  // Metode untuk mendapatkan JSON pilihan Choice Status.
  Future<String> loadChoiceStatus() async {
    // Simulasi pemanggilan data JSON dari sumber eksternal.
    await Future.delayed(Duration(seconds: 1));
    return '[""semua"",""sudah"",""belum""]';
  }
}

class Peserta {
  final String nama;
  final String kehadiran;
  final String status;

  Peserta(this.nama, this.kehadiran, this.status);
}"
TDakhWpF,Resposta.php,hercioneto,PHP,Tuesday 5th of September 2023 06:11:33 PM CDT,"<!Doctype html>
<html lang=""pt-br"">
<head>
	<meta charset=""utf-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
	<meta name=""Author"" content=""Hercio Neto"">
	<title>Aula HTML - Formulário Resposta</title>

	<style type=""text/css"">
		body {
			font-family: Arial, sans-serif;
			font-size: 16px;
			background-color: #f0f0f0;
		}
		.container {
			max-width: 800px;
			margin: 0 auto;
			padding: 20px;
			background-color: #fff;
			box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
		}
		label {
			display: block;
			margin-bottom: 5px;
			font-weight: bold;

		}
		

	</style>
	<script type=""text/javascript"">
		
		function exibeMsg(){
			alert(""Olá, obrigado por seus dados."");
		}
	</script>

</head>

<body onload=""exibeMsg()"">

	<div class=""container""> 

	<h1>Cadastro de Endereço</h1>
	
	

		<label for=""nome"">Nome:</label> 
		<?php
			$nome = $_POST[""nome""];
			echo $nome;
		?>
		


		<label for=""endereco"">Endereço</label>
		<?php
			$endereco = $_POST[""endereco""];
			echo $endereco;
		?>

		<label for=""cidade"">Cidade:</label> 
		<?php
			$cidade = $_POST[""cidade""];
			echo $cidade;
		?>
 		

 		<label for=""estado"">Estado:</label> 

 		<?php
			$estado = $_POST[""estado""];
			echo $estado;
		?>
 
		

		<label for=""email"">E-mail:</label> 
 		<?php
			$email = $_POST[""email""];
			echo $email;
		?> 

 		
		
	
	</div>
	
</body>

</html>"
M96mZvMi,Formulario HTML,hercioneto,HTML,Tuesday 5th of September 2023 06:10:24 PM CDT,"<!Doctype html>
<html lang=""pt-br"">
<head>
	<meta charset=""utf-8"">
	<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
	<meta name=""Author"" content=""Hercio Neto"">
	<title>Aula HTML - Formulários</title>

	<style type=""text/css"">
		body {
			font-family: Arial, sans-serif;
			font-size: 16px;
			background-color: #f0f0f0;
		}
		.container {
			max-width: 800px;
			margin: 0 auto;
			padding: 20px;
			background-color: #fff;
			box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
		}
		form label {
			display: block;
			margin-bottom: 5px;
			font-weight: bold;

		}
		form input[type=""text""], form input[type=""email""], form select { 
 
			width: 98%; 
			 
			padding: 10px; 
			 
			border: 1px solid #ccc; 
			 
			border-radius: 4px; 
			 
			margin-bottom: 20px; 
 
		} 

		form input[type=""submit""] { 
 
		background-color: #4CAF50; 
		 
		color: #fff; 
		 
		padding: 10px 20px; 
		 
		border: none; 
		 
		border-radius: 4px; 
		 
		cursor: pointer; 
		 
		} 

		form input[type=""submit""]:hover { 
 
		background-color: #3e8e41; 
		 
		} 


		@media screen and (max-width: 480px) { 

		form input[type=""text""], form input[type=""email""], form select { 
 
			width: 90%; 
			 
		} 

		form input[type=""submit""] { 
 
		width: 90%; 
		 
		} 

		}

	</style>
	<script type=""text/javascript"">
		
		function exibeMsg(){
			alert(""Olá, informe seus dados no formulário"");
		}
	</script>

</head>

<body onload=""exibeMsg()"">

	<div class=""container""> 

	<h1>Cadastro de Endereço</h1>
	
	<form method=""POST"" action=""resposta.php"">

		<label for=""nome"">Nome:</label> 
		<input type=""text"" id=""nome"" name=""nome"" required> 

		<label for=""endereco"">Endereço</label>
		<input type=""text"" id=""endereco"" name=""endereco"" required> 

		<label for=""cidade"">Cidade:</label> 
 		<input type=""text"" id=""cidade"" name=""cidade"" required> 

 		<label for=""estado"">Estado:</label> 
 
		<select id=""estado"" name=""estado"" required> 
		 
		<option value="""" disabled selected>Selecione um estado</option> 
		 
		<option value=""AC"">Acre</option> 
		 
		<option value=""AL"">Alagoas</option> 
		 
		<option value=""AP"">Amapá</option> 
		 
		<option value=""AM"">Amazonas</option> 
		 
		<option value=""BA"">Bahia</option> 
		 
		<option value=""CE"">Ceará</option> 
		 
		<option value=""DF"">Distrito Federal</option> 
		 
		<option value=""ES"">Espírito Santo</option> 
		 
		<option value=""GO"">Goiás</option> 
		 
		<option value=""MA"">Maranhão</option> 
		 
		<option value=""MT"">Mato Grosso</option> 
		 
		<option value=""MS"">Mato Grosso do Sul</option> 
		 
		<option value=""MG"">Minas Gerais</option> 
		 
		<option value=""PA"">Pará</option> 
		 
		<option value=""PB"">Paraíba</option> 
		 
		<option value=""PR"">Paraná</option> 
		 
		<option value=""PE"">Pernambuco</option> 
		 
		<option value=""PI"">Piauí</option> 
		 
		<option value=""RJ"">Rio de Janeiro</option> 
		 
		<option value=""RN"">Rio Grande do Norte</option> 
		 
		<option value=""RS"">Rio Grande do Sul</option> 
		 
		<option value=""RO"">Rondônia</option> 
		 
		<option value=""RR"">Roraima</option> 
		 
		<option value=""SC"">Santa Catarina</option> 
		 
		<option value=""SP"">São Paulo</option> 
		 
		<option value=""SE"">Sergipe</option> 
		 
		<option value=""TO"">Tocantins</option> 
		 
		</select> 

		<label for=""email"">E-mail:</label> 
 		<input type=""email"" id=""email"" name=""email"" required> 

 		<input type=""submit"" value=""Enviar"">
		
	</form>

	</div>
	
</body>

</html>"
epLQgA6L,03. Flowers,Spocoman,C++,Tuesday 5th of September 2023 05:58:00 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int chrysanthemums, roses, tulips;
    cin >> chrysanthemums >> roses >> tulips;

    string season, holiday;
    cin >> season >> holiday;

    double chrysanthemumPrice;
    double rosePrice;
    double tulipPrice;

    if (season == ""Spring"" || season == ""Summer"") {
        chrysanthemumPrice = 2.00;
        rosePrice = 4.10;
        tulipPrice = 2.50;
    }
    else {
        chrysanthemumPrice = 3.75;
        rosePrice = 4.50;
        tulipPrice = 4.15;
    }
    
    double totalSum = chrysanthemums * chrysanthemumPrice + roses * rosePrice + tulips * tulipPrice;
    
    if (holiday == ""Y"") {
        totalSum *= 1.15;
    } 

    if (tulips > 7 && season == ""Spring"") {
        totalSum *= 0.95;
    }

    if (roses >= 10 && season == ""Winter"") {
        totalSum *= 0.90;
    }
    
    if (chrysanthemums + roses + tulips > 20) {
        totalSum *= 0.80;
    }
    
    printf(""%.2f\n"", totalSum + 2);

    return 0;
}

Решение с тернарен оператор:

#include <iostream>

using namespace std;

int main() {
    int chrysanthemums, roses, tulips;
    cin >> chrysanthemums >> roses >> tulips;

    string season, holiday;
    cin >> season >> holiday;

    double chrysanthemumPrice = season == ""Spring"" || season == ""Summer"" ? 2.00 : 3.75;
    double rosePrice = season == ""Spring"" || season == ""Summer"" ? 4.10 : 4.50;
    double tulipPrice = season == ""Spring"" || season == ""Summer"" ? 2.50 : 4.15;
    
    double totalSum = (chrysanthemums * chrysanthemumPrice + roses * rosePrice + tulips * tulipPrice) * (holiday == ""Y"" ? 1.15 : 1);
    totalSum *= tulips > 7 && season == ""Spring"" ? 0.95 : roses >= 10 && season == ""Winter"" ? 0.90 : 1;
    totalSum *= chrysanthemums + roses + tulips > 20 ? 0.80 : 1;
    
    printf(""%.2f\n"", totalSum + 2);

    return 0;
}"
ftPKG61b,lticonnect-links,mcjoejoe,JSON,Tuesday 5th of September 2023 05:57:48 PM CDT,"{
  ""books"": [
    {
      ""id"": ""nd86igb"",
      ""title"": ""SQL Book"",
      ""text"": ""Professors HATE this one trick to learn SQL! You can learn it in 10 minutes or less!"",
      ""image"": ""https://images.unsplash.com/photo-1662027044921-6febc57a0c53?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=3524&q=80"",
      ""items"": [
        {
          ""type"": ""link"",
          ""url"": ""https://example.com"",
          ""title"": ""Example.com Basic Link"",
          ""text"": ""This is a sample link to example.com"",
          ""https://lticonnect.app/link"": {
            ""id"": ""vivsqj0""
          }
        },
        {
          ""type"": ""ltiResourceLink"",
          ""url"": ""https://example.com"",
          ""title"": ""Example.com LTI Resource Link"",
          ""text"": ""This is a sample link to example.com as an LTI resource"",
          ""https://lticonnect.app/link"": {
            ""id"": ""2r6a4gx""
          }
        },
        {
          ""type"": ""ltiResourceLink"",
          ""url"": ""https://example.com"",
          ""title"": ""Example.com LTI Resource Link with Line Item"",
          ""text"": ""This is a sample link to example.com as an LTI resource"",
          ""lineItem"": {
            ""scoreMaximum"": 100,
            ""resourceId"": ""7q7lcuq""
          },
          ""https://lticonnect.app/link"": {
            ""id"": ""7q7lcuq""
          }
        }
      ]
    }
  ]
}

"
96RQ5ALh,02. Bike Race,Spocoman,C++,Tuesday 5th of September 2023 05:33:07 PM CDT,"#include <iostream>

using namespace std;

int main() {
    int juniors, seniors;
    cin >> juniors >> seniors;

    string trace;
    cin >> trace;

    double juniorPrice;
    double seniorPrice;

    if (trace == ""trail"") {
        juniorPrice = 5.5;
        seniorPrice = 7;
    }
    else if (trace == ""cross-country"") {
        juniorPrice = 8;
        seniorPrice = 9.5;
    }
    else if (trace == ""downhill"") {
        juniorPrice = 12.25;
        seniorPrice = 13.75;
    }
    else if (trace == ""road"") {
        juniorPrice = 20;
        seniorPrice = 21.5;
    }

    double totalSum = juniors * juniorPrice + seniors * seniorPrice;

    if (juniors + seniors >= 50 && trace == ""cross-country"") {
        totalSum *= 0.75;
    }

    totalSum *= 0.95;

    printf(""%.2f\n"", totalSum);

    return 0;
}

Решение с тернарен оператор:

#include <iostream>

using namespace std;

int main() {
    int juniors, seniors;
    cin >> juniors >> seniors;

    string trace;
    cin >> trace;

    double juniorPrice =
        trace == ""trail"" ? 5.50 :
        trace == ""cross-country"" ? 8.00 :
        trace == ""downhill"" ? 12.25 : 20;
   
    double seniorPrice = 
        trace == ""trail"" ? 7.00 :
        trace == ""cross-country"" ? 9.50 :
        trace == ""downhill"" ? 13.75 : 21.50;

    double totalSum = (juniors * juniorPrice + seniors * seniorPrice)
        * (juniors + seniors >= 50 && trace == ""cross-country"" ? 0.75 : 1) * 0.95;

    printf(""%.2f\n"", totalSum);

    return 0;
}"
778swnBp,Continuous wget,BenTibnam,C++,Tuesday 5th of September 2023 05:19:14 PM CDT,"#include <iostream>
#include <stdlib.h>

int main(void)
{
        printf (""Press ctrl-c to cancel. Enter the link you want to run wget on.\n"");
        std::string link;
        while(1) {
                std::cin >> link;
                std::string dl_command = ""wget "" + link;
                const char *run = dl_command.c_str();
                system(run);
        }

        return 0;
}"
1H6zs80h,EmojiWriter,LshySVK,C++,Tuesday 5th of September 2023 05:14:22 PM CDT,"#include <iostream>
#include <string>
#include <stdlib.h>

using namespace std;


string letters[] = {
	"" .. n.  .n....n.  .n.  ."", // A
	""... n.  .n... n.  .n... "", // B
	"" .. n.  .n.   n.  .n .. "", // C
	""... n.  .n.  .n.  .n... "", // D
	""....n.   n... n.   n...."", // E
	""....n.   n... n.   n    "", // F
	"" .. n.   n. ..n.  .n .. "", // G
	"".  .n.  .n....n.  .n.  ."", // H
	"" .  n .  n .  n .  n .  "", // I
	""   .n   .n   .n.  .n .. "",  // J
	"".  .n. . n..  n. . n.  ."",  // K
	"".   n.   n.   n.   n...."",  // L
	"".  .n....n.  .n.  .n.  ."",  // M
	"".  .n.. .n. ..n.  .n.  ."",  // N
	"" .. n.  .n.  .n.  .n .. "",  // O
	""... n.  .n... n.   n.   "",  // P
	"" .. n.  .n.  .n. ..n ..."",  // Q
	""... n.  .n... n. . n.  ."",  // R
	"" ...n.   n .. n   .n... "",  // S
	""... n .  n .  n .  n .  "",  // T
	"".  .n.  .n.  .n.  .n .. "",  // U
	"". . n. . n. . n. . n .  "",  // V
	"".  .n.  .n.  .n....n.  ."",  // W
	"".  .n.  .n .. n.  .n.  ."",  // X
	"". . n. . n .  n .  n .  "",  // Y
	""....n   .n .. n.   n....""  // Z
};

int main()
{
	char cEmpty = ' ';
	char cFull = '.';

	cout << ""Enter empty character: "";
	cin >> cEmpty;

	cout << ""Enter full character: "";
	cin >> cFull;

	string input;
	cout << ""Enter a string: "";
	cin.ignore(256, '\n');
	getline(cin, input);
	
	system(""cls"");

	for (char c : input)
	{
		c = toupper(c);
		if (c >= 'A' && c <= 'Z')
		{
			for (int i = 0; i < 6; i++)
				cout << cEmpty;
			cout << endl;
			cout << cEmpty;
			
			string letter = letters[c - 'A'];
			for (char l : letter)
			{
				if (l == '.')
					cout << cFull;
				else if (l == ' ')
					cout << cEmpty;
				else
					cout << cEmpty << endl << cEmpty;
			}
			cout << cEmpty;
			cout << endl;
			for (int i = 0; i < 6; i++)
				cout << cEmpty;
			cout << endl;
		}
		else
		{
			for (int i = 0; i < 6; i++)
				cout << cEmpty;
			cout << endl;
		}
	}

	return 0;
}"
ErBmsFwv,01. Match Tickets,Spocoman,C++,Tuesday 5th of September 2023 04:59:06 PM CDT,"#include <iostream>

using namespace std;

int main() {
    double budget;
    cin >> budget;

    string category;
    cin >> category;

    int people;
    cin >> people;

    double sum = 0;

    if (people >= 1 && people <= 4) {
        budget *= 0.25;
    }
    else if (people > 4 && people <= 9) {
        budget *= 0.4;
    }
    else if (people > 9 && people <= 24) {
        budget /= 2;
    }
    else if (people > 24 && people < 50) {
        budget *= 0.6;
    }
    else {
        budget *= 0.75;
    }

    if (category == ""VIP"") {
        sum = 499.99 * people;
    }
    else if (category == ""Normal"") {
        sum = 249.99 * people;
    }

    cout.setf(ios::fixed);
    cout.precision(2);

    if (budget >= sum) {
        cout << ""Yes! You have "" << budget - sum << "" leva left."" << endl;
    }
    else {
        cout << ""Not enough money! You need "" << sum - budget << "" leva."" << endl;
    }

    return 0;
}

Решение с тернарен оператор:

#include <iostream>

using namespace std;

int main() {
    double budget;
    cin >> budget;

    string category;
    cin >> category;

    int people;
    cin >> people;

    budget *= 
        people >= 1 && people <= 4 ? 0.25:
        people > 4 && people <= 9 ? 0.4:
        people > 9 && people <= 24 ? 0.5:
        people > 24 && people < 50 ? 0.6 : 0.75;

    double sum = (category == ""VIP"" ? 499.99 : 249.99) * people;

    cout.setf(ios::fixed);
    cout.precision(2);

    if (budget >= sum) {
        cout << ""Yes! You have "" << budget - sum << "" leva left."" << endl;
    }
    else {
        cout << ""Not enough money! You need "" << sum - budget << "" leva."" << endl;
    }

    return 0;
}"
xEhWRYQE,09. Ski Trip,Spocoman,C++,Tuesday 5th of September 2023 04:24:09 PM CDT,"#include <iostream>
#include <string>

using namespace std;

int main() {
    int days;
    cin >> days;

    cin.ignore();

    string room;
    getline(cin, room);

    string rating;
    getline(cin, rating);

    int nights = days - 1;
    double roomPrice = 18.00;
    double apartmentPrice = 25.00;
    double presidentApartmentPrice = 35.00;

    double totalSum;

    if (room == ""room for one person"") {
        totalSum = roomPrice * nights;
    }
    else if (room == ""apartment"") {
        totalSum = apartmentPrice * nights;
        if (nights < 10) {
            totalSum *= 0.70;
        }
        else if (nights >= 10 && nights < 15) {
            totalSum *= 0.65;
        }
        else if (nights >= 15) {
            totalSum *= 0.50;
        }
    }
    else {
        totalSum = presidentApartmentPrice * nights;

        if (nights < 10) {
            totalSum *= 0.90;
        }
        else if (nights >= 10 && nights < 15) {
            totalSum *= 0.85;
        }
        else if (nights >= 15) {
            totalSum *= 0.80;
        }
    }

    if (rating == ""positive"") {
        totalSum *= 1.25;
    }
    else {
        totalSum *= 0.90;
    }

    cout.setf(ios::fixed);
    cout.precision(2);

    cout << totalSum << endl;

    return 0;
}

Решение с тернарен оператор и printf():

#include <iostream>
#include <string>

using namespace std;

int main() {
    int days;
    cin >> days;
    cin.ignore();

    string room, rating;
    getline(cin, room);
    getline(cin, rating);

    int nights = days - 1;
    double roomPricePerNight = room == ""room for one person"" ? 18.00 : room == ""apartment"" ? 25.00 : 35.00;

    double totalSum = roomPricePerNight * nights;

    totalSum *=
        room == ""apartment"" ? (nights < 10 ? 0.70 : nights >= 15 ? 0.50 : 0.65) :
        room == ""president apartment"" ? (nights < 10 ? 0.90 : nights >= 15 ? 0.80 : 0.85) : 1;

    totalSum *= rating == ""positive"" ? 1.25 : 0.90;

    printf(""%.2f\n"", totalSum);

    return 0;
}

Тарикатско решение - Don't use at work! :)

#include <iostream>
#include <string>

using namespace std;

int main() {
    string days, room, rating;
    getline(cin, days);
    getline(cin, room);
    getline(cin, rating);

    int nights = stoi(days) - 1;

    printf(""%.2f\n"", ((room == ""room for one person"" ? 18.00 :
        room == ""apartment"" ? 25.00 * (nights < 10 ? 0.70 : nights >= 15 ? 0.50 : 0.65) :
        35.00 * (nights < 10 ? 0.90 : nights >= 15 ? 0.80 : 0.85))
        * nights * (rating == ""positive"" ? 1.25 : 0.90)));

    return 0;
}"
LGuWtz1D,شماغ جفنشي الاصلي,mfemtsuccess,JSON,Tuesday 5th of September 2023 04:17:41 PM CDT,"شماغ جفنشي الاصلي

إذا كنت من محبي الموضة والأناقة، فلا شك أنك سمعت عن شماغ جفنشي الأصلي. إنه واحد من أشهر الأزياء العربية التقليدية التي تعكس ثقافة وتراث المنطقة. في هذه المقالة، سنستكشف ما هو شماغ جفنشي الأصلي وأهميته في الثقافة العربية.

ما هو شماغ جفنشي الأصلي؟
شماغ جفنشي الأصلي هو نوع من الأوشحة التقليدية التي تستخدم في الثقافة العربية. يتم صنعه من قماش عالي الجودة مثل الحرير أو القطن، وغالبًا ما يكون مزينًا بأنماط هندسية ملونة وتطريزات فريدة. يُستخدم الشماغ جفنشي بشكل رئيسي في المناسبات الرسمية والحفلات، حيث يُعتبر رمزًا للأناقة والتراث العربي.

أهمية شماغ جفنشي الأصلي في الثقافة العربية
يحمل شماغ جفنشي الأصلي أهمية كبيرة في الثقافة العربية ويعكس تاريخ وتراث المنطقة. إليك بعض الأسباب التي تجعله مهمًا:

التعبير عن الهوية: يُعتبر الشماغ جفنشي رمزًا للهوية العربية والانتماء إلى المجتمع. يرتديه الكثير من الرجال في المناسبات الخاصة والحفلات للتعبير عن ثقافتهم وانتمائهم.

الأناقة والجاذبية: يُضفي الشماغ جفنشي لمسة من الأناقة والجاذبية على من يرتديه. يُعزز مظهر الشخص ويضفي عليه طابعًا فريدًا وجذابًا.

التراث والثقافة: يعتبر الشماغ جفنشي جزءًا لا يتجزأ من التراث العربي والثقافة. إن ارتداء الشماغ جفنشي يحافظ على تقاليد الماضي ويحمل رمزية كبيرة في المجتمع العربي.

التواصل والاندماج: يعتبر الشماغ جفنشي وسيلة للتواصل والاندماج في المجتمع العربي. إذ يُعتبر من الأشياء التي تجمع الناس معًا وتسهم في تعزيز الروابط الاجتماعية.

في الختام، يُعد شماغ جفنشي الأصلي رمزًا للثقافة والتراث العربي، وهو يحظى بشعبية كبيرة في المنطقة. إذا كنت ترغب في احترام التقاليد والاندماج في المجتمع العربي، فإن ارتداء شماغ جفنشي الأصلي هو خطوة رائعة.

كيفية التحقق من أصالة الشماغ جفنشي
بصفتك محبًا للأزياء ومهتمًا بالتفاصيل، قد تكون مهتمًا بشراء شماغ جفنشي الأصلي. فهذه العلامة التجارية الفاخرة تعتبر رمزًا للأناقة والجودة. ومع ذلك، يجب أن تكون حذرًا عند شراء الشماغ لتجنب الوقوع في فخ الشماغ المزيف. في هذه المقالة، سنستعرض العلامات المميزة للشماغ جفنشي الأصلي ونقدم بعض النصائح لتجنب شراء المزيف.

العلامات المميزة لشماغ جفنشي الأصلي
التصميم والجودة: يتميز الشماغ جفنشي الأصلي بتصميمه الفريد والأنيق، حيث يتضح اهتمام العلامة التجارية بالتفاصيل الدقيقة. كما يتم صنع الشماغ من خامات عالية الجودة مثل الحرير أو الكشمير، مما يعطيه ملمسًا ناعمًا ومريحًا.

الشعار والعلامات التجارية: يحمل الشماغ جفنشي الأصلي شعار العلامة التجارية بشكل واضح ودقيق. يجب أن يكون الشعار مطبوعًا بدقة ولا يوجد به أي أخطاء في الهجاء أو التصميم. كما قد تحتوي بعض الشماغات على علامات تجارية إضافية مثل رقم التسلسل والرمز الشريطي.

التغليف: يجب أن يأتي الشماغ جفنشي الأصلي في عبوة فاخرة وذات جودة عالية. قد تحتوي العبوة على شعار العلامة التجارية وتفاصيل إضافية مثل تاريخ الإنتاج وبلد المنشأ.

نصائح لتجنب شراء الشماغ المزيف
شراء من مصادر موثوقة: قم بشراء الشماغ جفنشي الأصلي فقط من متاجر معتمدة وموثوقة. تجنب الشراء من بائعي الشارع أو المواقع غير المعروفة.

التحقق من البائع: قبل شراء الشماغ، تحقق من سمعة البائع وتقييماته. قد تجد مراجعات وتجارب المستخدمين السابقين على المواقع التجارية عبر الإنترنت.

فحص التفاصيل: قم بفحص التصميم والجودة والشعار والتغليف للتأكد من أنها تطابق العلامات المميزة للشماغ جفنشي الأصلي.

السعر: كون الشماغ جفنشي علامة تجارية فاخرة، فإنه غالبًا ما يكون مكلفًا. كن حذرًا من الشماغات التي تباع بأسعار متدنية جدًا، فقد تكون مزيفة.

طلب المساعدة: إذا كنت غير متأكد من أصالة الشماغ، فلا تتردد في طلب المساعدة من خبراء أو محترفين في هذا المجال. قد يكون لديهم المعرفة والخبرة للتحقق من أصالة الشماغ بشكل دقيق.

باستخدام هذه النصائح والمعلومات، يمكنك التحقق من أصالة الشماغ جفنشي والاستمتاع بإضافة قطعة فريدة وأنيقة إلى مجموعتك الشخصية.

أنماط وتصميمات شماغ جفنشي الأصلي
إذا كنت من محبي الأزياء والإكسسوارات الراقية، فمن المؤكد أنك قد سمعت عن شماغ جفنشي الأصلي. يُعتبر شماغ جفنشي من أبرز العلامات التجارية الفاخرة في عالم الموضة، وهو مشهور بتصاميمه الأنيقة والفريدة. في هذه المقالة، سنلقي نظرة على أنماط وتصميمات شماغ جفنشي الأصلي.

تصميمات شماغ جفنشي الكلاسيكية
تتميز تصميمات شماغ جفنشي الكلاسيكية بالأناقة والفخامة التي تعكس تاريخ العلامة التجارية. يتم صُنع هذه التصاميم من أجود أنواع الأقمشة مثل الحرير والكشمير، مع تفاصيل دقيقة تضفي لمسة فريدة على الشماغ. تتوفر تصاميم مختلفة بألوان ونقوش متنوعة، مما يسمح لك بالاختيار الذي يناسب ذوقك الشخصي والمناسبة التي ترغب في ارتداء الشماغ فيها. إن شماغ جفنشي الكلاسيكية هو اختيار مثالي للأشخاص الذين يفضلون الأناقة التقليدية والأسلوب الراقي.

تصميمات شماغ جفنشي الحديثة والمعاصرة
إذا كنت تبحث عن شماغ يجمع بين التقليد والحداثة، فإن تصاميم شماغ جفنشي الحديثة والمعاصرة هي الخيار المثالي لك. تتميز هذه التصاميم بألوان جريئة ونقوش مبتكرة، مما يضفي لمسة عصرية على الشماغ التقليدي. يُعد شماغ جفنشي الحديث والمعاصر خيارًا رائعًا للأشخاص الذين يبحثون عن الجمال والأناقة المعاصرة في نفس الوقت.

بغض النظر عن التصميم الذي تختاره، يمكنك أن تضمن أن شماغ جفنشي الأصلي سيكون مصنوعًا من أجود المواد وبأعلى مستويات الجودة. إذا كنت ترغب في اقتناء شماغ جفنشي الأصلي، فمن الأفضل أن تشتريه من متجر رسمي للعلامة التجارية أو من مورد موثوق به. هذا سيضمن لك الحصول على منتج أصلي وذو جودة عالية.

في الختام، يُعد شماغ جفنشي الأصلي خيارًا رائعًا للأشخاص الذين يهتمون بالأزياء ويرغبون في إضافة لمسة من الفخامة والأناقة إلى مظهرهم. سواء كانت تصاميمها الكلاسيكية أو الحديثة، فإن شماغ جفنشي سيكون إضافة رائعة لمجموعتك الشخصية. اختر التصميم الذي يعجبك واستمتع بالأناقة والجمال الذي يُقدمه شماغ جفنشي الأصلي.

مواد صنع شماغ جفنشي الأصلي
شماغ جفنشي الأصلي هو منتج فاخر ومرموق يحظى بشهرة عالمية. يتميز بجودة تصنيعه واستخدام المواد العالية الجودة في صناعته. في هذا المقال، سنلقي نظرة على أنواع الأقمشة المستخدمة في صناعة شماغ جفنشي وكذلك جودتها وتأثيرها على المظهر والمتانة.

أنواع الأقمشة المستخدمة في صناعة شماغ جفنشي
تتميز شماغات جفنشي الأصلية بتنوع أقمشتها المستخدمة في صناعتها. إليك بعض أنواع الأقمشة التي قد تستخدم في صنع شماغ جفنشي:

الحرير: يُستخدم الحرير الطبيعي عالي الجودة في صناعة بعض شماغات جفنشي. يضفي الحرير لمسة نعومة ورقة على الشماغ ويعطيه مظهرًا أنيقًا.

القطن: يُستخدم القطن عالي الجودة في صناعة العديد من شماغات جفنشي. يتميز القطن بخفة وزنه وامتصاصه للرطوبة، مما يجعل الشماغ مريحًا للارتداء في الطقس الحار.

الصوف: يُستخدم الصوف في صناعة بعض شماغات جفنشي التي تصلح للاستخدام في فصل الشتاء. يوفر الصوف الدفء والراحة في الأيام الباردة.

جودة الأقمشة وأثرها على المظهر والمتانة
تعتبر جودة الأقمشة المستخدمة في صناعة شماغ جفنشي من أهم العوامل التي تؤثر على المظهر والمتانة للشماغ. إليك بعض التأثيرات التي قد تحدث:

المظهر: تعكس جودة الأقمشة المستخدمة في الشماغ جفنشي الأصلي جودة المنتج بشكل عام. تظهر الأقمشة عالية الجودة بمظهر أنيق وفاخر، مما يضفي لمسة من الرقي على الشماغ.

المتانة: تؤثر جودة الأقمشة أيضًا على متانة الشماغ. الأقمشة ذات الجودة العالية تكون أكثر متانة وتحافظ على شكلها وجودتها لفترة أطول، مما يجعل الشماغ يدوم لفترة طويلة.

باختصار، شماغ جفنشي الأصلي مصنوع من مواد عالية الجودة مثل الحرير والقطن والصوف. جودة هذه المواد تؤثر بشكل كبير على المظهر والمتانة للشماغ. إذا كنت تبحث عن شماغ يجمع بين التصميم الأنيق والجودة، فإن شماغ جفنشي الأصلي هو الخيار المثالي لك.

كيفية ارتداء شماغ جفنشي الأصلي بأناقة
كشخص يهتم بالموضة والأناقة، قد تكون تتساءل عن كيفية ارتداء شماغ جفنشي الأصلي بأناقة وفخامة. يعتبر الشماغ الأصلي من أبرز القطع التي تضفي لمسة فاخرة على إطلالتك. في هذا المقال، سنستعرض أساليب ربط الشماغ الأصلي وأفضل الطرق لتطويعه حسب المناسبة.

أساليب ربط الشماغ الأصلي
ربطة العقدة التقليدية: هذه الطريقة هي الأكثر شهرة واستخدامًا لربط الشماغ. قم بطوي الشماغ بشكل مستطيل ثم ضعه على رقبتك بحيث يكون طرف واحد أطول من الآخر. اجعل الطرف الطويل يمر حول الطرف القصير ثم امرره تحت الطرف القصير واربطه بإحكام. ضبط الشماغ ليكون متساويًا ومرتبًا.

ربطة العقدة المزدوجة: هذه الطريقة تعطي مظهرًا أكثر تعقيدًا وأناقة للشماغ. قم بتطوي الشماغ بشكل مستطيل وضعه على رقبتك بحيث يكون الطرفان متساويان في الطول. اجعل الطرف الأيسر يمر حول الطرف الأيمن ثم امرره من خلال الفجوة المتكونة واربطه بإحكام. ضبط الشماغ ليكون متساويًا ومتناسقًا.

أفضل الطرق لتطويع الشماغ حسب المناسبة
المناسبات الرسمية: في المناسبات الرسمية، يُفضل اختيار شماغ جفنشي بألوان هادئة وتصاميم أنيقة. يمكنك ربط الشماغ بطريقة العقدة التقليدية أو العقدة المزدوجة لإضفاء لمسة من الفخامة على إطلالتك.

المناسبات الكاجوال: في المناسبات الكاجوال، يُمكنك تطويع الشماغ بأساليب أكثر عفوية وإبداعية. يمكنك ترك الشماغ منسدلاً على الجانبين أو ربطه بشكل فضفاض حول الرقبة لإطلالة مريحة وعصرية.

الأنشطة الرياضية: إذا كنت ترغب في ارتداء الشماغ أثناء ممارسة الأنشطة الرياضية، فمن المهم اختيار شماغ مصنوع من قماش خفيف ومرن. يُفضل ربطه بشكل فضفاض حول الرقبة لتحقيق راحة أثناء التحرك.

الأجواء الباردة: في حالة الأجواء الباردة، يُمكنك لف الشماغ حول الرقبة بشكل مزدوج لتوفير الدفء والحماية من البرد.

باستخدام هذه الأساليب والطرق، يُمكنك ارتداء شماغ جفنشي الأصلي بأناقة وتطويعه حسب المناسبة. استمتع بإطلالة فاخرة ولافتة باستخدام هذه النصائح.
اقرأ المزيد فى 
https://shemagh.shop/givenchy-modern/p2040374617
https://shemagh.shop/blog/Givenchy/a-1358512724"
Kehdxx3X,Cat,zcwasfe,Lua,Tuesday 5th of September 2023 04:10:40 PM CDT,"ocal part = Instance.new(""Part"", workspace)
local image = ""http://www.roblox.com/asset/?id=14215788646""
part.Size = Vector3.new(4, 4.5, 2)
part.Position = workspace:FindFirstChild(""Surep_fox"").Head.Position
local click = Instance.new(""ClickDetector"", part)
local decal = Instance.new(""Decal"", part)
decal.Texture = image
decal.Face = ""Front""
local decal = Instance.new(""Decal"", part)
decal.Texture = image
decal.Face = ""Back""
local decal = Instance.new(""Decal"", part)
decal.Texture = image
decal.Face = ""Bottom""
local decal = Instance.new(""Decal"", part)
decal.Texture = image
decal.Face = ""Left""
local decal = Instance.new(""Decal"", part)
decal.Texture = image
decal.Face = ""Right""
local decal = Instance.new(""Decal"", part)
decal.Texture = image
decal.Face = ""Top""
local Tween = game:GetService(""TweenService"")
click.MouseClick:Connect(function(plr)
	local rightarm = Instance.new(""Weld"", plr.Character)
	rightarm.Part0 = plr.Character.HumanoidRootPart
	rightarm.Part1 = plr.Character[""Right Arm""]
	rightarm.C0 = CFrame.new(1.5, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	local leftarm = Instance.new(""Weld"",plr.Character)
	leftarm.Part0 = plr.Character.HumanoidRootPart
	leftarm.Part1 = plr.Character[""Left Arm""]
	leftarm.C0 = CFrame.new(-1.5, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	local humanoidrootpart = Instance.new(""Weld"", plr.Character)
	humanoidrootpart.Part0 = plr.Character.HumanoidRootPart
	humanoidrootpart.Part1 = plr.Character.Torso
	humanoidrootpart.C0 = CFrame.new(0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	local leftleg = Instance.new(""Weld"", plr.Character)
	leftleg.Part0 = plr.Character.HumanoidRootPart
	leftleg.Part1 = plr.Character[""Left Leg""]
	leftleg.C0 = CFrame.new(-0.5, -2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	local rightleg = Instance.new(""Weld"", plr.Character)
	rightleg.Part0 = plr.Character.HumanoidRootPart
	rightleg.Part1 = plr.Character[""Right Leg""]
	rightleg.C0 = CFrame.new(0.5, -2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	local head = Instance.new(""Weld"", plr.Character)
	head.Part0 = plr.Character.HumanoidRootPart
	head.Part1 = plr.Character.Head
	head.C0 = CFrame.new(0, 1.5, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1)
	local sound = Instance.new(""Sound"", plr.Character.Head)
	sound.SoundId = ""rbxassetid://1847313950""
	sound.Volume = 0.1
	sound:Play()
	while task.wait() do	
		for i=3,0,-1 do		
			Tween:Create(rightarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(1.61197472, 0.321307302, 0.129782468, 0.873562455, -0.447556973, -0.191262037, -0.0513353795, 0.306050003, -0.950630367, 0.483996987, 0.840253592, 0.244378313)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.00961661, 0.451799214, -1.36357379, 0.841266453, -0.487451792, -0.233797967, -0.0876020491, 0.303834826, -0.948688745, 0.533475935, 0.818581283, 0.212904274)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, 0, 0, 0.951415241, 0, -0.3079108, 0, 1, 0, 0.3079108, 0, 0.951415241)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.47570762, -2, -0.1539554, 0.951415241, 0, -0.3079108, 0, 1, 0, 0.3079108, 0, 0.951415241)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.47570762, -2, 0.1539554, 0.951415241, 0, -0.3079108, 0, 1, 0, 0.3079108, 0, 0.951415241)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, 1.5, 0, 0.833831728, 0, -0.552018762, 0, 1, 0, 0.552018762, 0, 0.833831728)})
			aa:Play()
			aa.Completed:Wait()
			Tween:Create(rightarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(1.61111414, 0.109923601, 0.130887359, 0.873562455, -0.44583571, -0.195240766, -0.0513353795, 0.314504981, -0.947866738, 0.483996987, 0.83804363, 0.251852602)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.0106672, 0.240424097, -1.36260951, 0.841266453, -0.485350072, -0.238130346, -0.0876020491, 0.312272608, -0.945944905, 0.533475935, 0.816652536, 0.220186815)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, -0.207156181, -4.65661287e-10, 0.951415181, 0, -0.30791077, -2.32830644e-10, 1, 0, 0.30791077, 4.65661287e-10, 0.951415241)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.34977442, -1.92561364, -0.543076992, 0.951415241, 0.108872019, -0.28802076, 0, 0.935403228, 0.353582978, 0.3079108, -0.336404234, 0.889956892)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.601640821, -1.92561364, -0.235166222, 0.951415241, 0.108872019, -0.28802076, 0, 0.935403228, 0.353582978, 0.3079108, -0.336404234, 0.889956892)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.00240329513, 1.29282486, -0.00363020925, 0.833831728, 0.00480659027, -0.551997781, 0, 0.999962091, 0.0087072961, 0.552018762, -0.00726041943, 0.833800137)})
			aa:Play()
			aa.Completed:Wait()		
		end	
		Tween:Create(rightarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.29359746, 0.391748786, -0.917346478, 0.811274529, 0.128017515, 0.570477843, 0.512314796, 0.314504981, -0.799137175, -0.281721652, 0.940583944, 0.189564645)}):Play()
		Tween:Create(leftarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.54156089, -0.0442587137, -0.427662551, 0.844630301, 0.0834522545, 0.528805494, 0.481763482, 0.312272608, -0.818773389, -0.23345992, 0.946320057, 0.223550647)}):Play()
		Tween:Create(humanoidrootpart, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-8.14907253e-10, -0.207156181, -4.65661287e-10, 0.951969266, 4.65661287e-10, 0.306193829, 0, 1, -4.65661287e-10, -0.30619368, -4.65661287e-10, 0.951969147)}):Play()
		Tween:Create(leftleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.536437154, -2.07503915, -0.161513031, 0.809904933, -0.108264893, 0.576483011, -0.113352723, 0.935403228, 0.334921002, -0.575504184, -0.336600095, 0.745315552)}):Play()
		Tween:Create(rightleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.703170419, -1.92479908, -0.142710239, 0.605071783, -0.108264893, 0.788775563, -0.206647679, 0.935403228, 0.286910534, -0.768885493, -0.336600095, 0.543613434)}):Play()
		local aa = Tween:Create(head, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.000171512249, 1.29282486, -0.00435026782, 0.787784636, -0.000343023799, 0.615950704, -0.00508888345, 0.999962091, 0.00706542796, -0.615929663, -0.00870053656, 0.787753046)})
		aa:Play()
		aa.Completed:Wait()
		for i=3,0,-1 do	
			Tween:Create(rightarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(1.00961661, 0.451799214, -1.36357379, 0.841266453, 0.487451792, 0.233797967, 0.0876020491, 0.303834826, -0.948688745, -0.533475935, 0.818581283, 0.212904274)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.61197472, 0.321307302, 0.129782468, 0.873562455, 0.447556973, 0.191262037, 0.0513353795, 0.306050003, -0.950630367, -0.483996987, 0.840253592, 0.244378313)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, 0, 0, 0.951415241, 0, 0.3079108, 0, 1, 0, -0.3079108, 0, 0.951415241)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.47570762, -2, 0.1539554, 0.951415241, 0, 0.3079108, 0, 1, 0, -0.3079108, 0, 0.951415241)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.47570762, -2, -0.1539554, 0.951415241, 0, 0.3079108, 0, 1, 0, -0.3079108, 0, 0.951415241)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, 1.5, 0, 0.833831728, 0, 0.552018762, 0, 1, 0, -0.552018762, 0, 0.833831728)})
			aa:Play()
			aa.Completed:Wait()
			Tween:Create(rightarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(1.0106672, 0.240424097, -1.36260951, 0.841266453, 0.485350072, 0.238130346, 0.0876020491, 0.312272608, -0.945944905, -0.533475935, 0.816652536, 0.220186815)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.61111414, 0.109923601, 0.130887359, 0.873562455, 0.44583571, 0.195240766, 0.0513353795, 0.314504981, -0.947866738, -0.483996987, 0.83804363, 0.251852602)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, -0.207156181, -4.65661287e-10, 0.951415181, 0, 0.30791077, 2.32830644e-10, 1, 0, -0.30791077, 4.65661287e-10, 0.951415241)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.601640821, -1.92561364, -0.235166222, 0.951415241, -0.108872019, 0.28802076, 0, 0.935403228, 0.353582978, -0.3079108, -0.336404234, 0.889956892)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.34977442, -1.92561364, -0.543076992, 0.951415241, -0.108872019, 0.28802076, 0, 0.935403228, 0.353582978, -0.3079108, -0.336404234, 0.889956892)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.00240329513, 1.29282486, -0.00363020925, 0.833831728, -0.00480659027, 0.551997781, 0, 0.999962091, 0.0087072961, -0.552018762, -0.00726041943, 0.833800137)})
			aa:Play()
			aa.Completed:Wait()	
		end
		Tween:Create(rightarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.54156089, -0.0442587137, -0.427662551, 0.844630301, -0.0834522545, -0.528805494, -0.481763482, 0.312272608, -0.818773389, 0.23345992, 0.946320057, 0.223550647)}):Play()
		Tween:Create(leftarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.29359746, 0.391748786, -0.917346478, 0.811274529, -0.128017515, -0.570477843, -0.512314796, 0.314504981, -0.799137175, 0.281721652, 0.940583944, 0.189564645)}):Play()
		Tween:Create(humanoidrootpart, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(8.14907253e-10, -0.207156181, -4.65661287e-10, 0.951969266, -4.65661287e-10, -0.306193829, 0, 1, -4.65661287e-10, 0.30619368, -4.65661287e-10, 0.951969147)}):Play()
		Tween:Create(leftleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.703170419, -1.92479908, -0.142710239, 0.605071783, 0.108264893, -0.788775563, 0.206647679, 0.935403228, 0.286910534, 0.768885493, -0.336600095, 0.543613434)}):Play()
		Tween:Create(rightleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.536437154, -2.07503915, -0.161513031, 0.809904933, 0.108264893, -0.576483011, 0.113352723, 0.935403228, 0.334921002, 0.575504184, -0.336600095, 0.745315552)}):Play()
		local aa = Tween:Create(head, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.000171512249, 1.29282486, -0.00435026782, 0.787784636, 0.000343023799, -0.615950704, 0.00508888345, 0.999962091, 0.00706542796, 0.615929663, -0.00870053656, 0.787753046)})
		aa:Play()
		aa.Completed:Wait()
		for i=3,0,-1 do
			Tween:Create(rightarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(1.61197472, 0.321307302, 0.129782468, 0.873562455, -0.447556973, -0.191262037, -0.0513353795, 0.306050003, -0.950630367, 0.483996987, 0.840253592, 0.244378313)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.00961661, 0.451799214, -1.36357379, 0.841266453, -0.487451792, -0.233797967, -0.0876020491, 0.303834826, -0.948688745, 0.533475935, 0.818581283, 0.212904274)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, 0, 0, 0.951415241, 0, -0.3079108, 0, 1, 0, 0.3079108, 0, 0.951415241)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.47570762, -2, -0.1539554, 0.951415241, 0, -0.3079108, 0, 1, 0, 0.3079108, 0, 0.951415241)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.47570762, -2, 0.1539554, 0.951415241, 0, -0.3079108, 0, 1, 0, 0.3079108, 0, 0.951415241)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, 1.5, 0, 0.833831728, 0, -0.552018762, 0, 1, 0, 0.552018762, 0, 0.833831728)})
			aa:Play()
			aa.Completed:Wait()
			Tween:Create(rightarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(1.61111414, 0.109923601, 0.130887359, 0.873562455, -0.44583571, -0.195240766, -0.0513353795, 0.314504981, -0.947866738, 0.483996987, 0.83804363, 0.251852602)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.0106672, 0.240424097, -1.36260951, 0.841266453, -0.485350072, -0.238130346, -0.0876020491, 0.312272608, -0.945944905, 0.533475935, 0.816652536, 0.220186815)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0, -0.207156181, -4.65661287e-10, 0.951415181, 0, -0.30791077, -2.32830644e-10, 1, 0, 0.30791077, 4.65661287e-10, 0.951415241)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.34977442, -1.92561364, -0.543076992, 0.951415241, 0.108872019, -0.28802076, 0, 0.935403228, 0.353582978, 0.3079108, -0.336404234, 0.889956892)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.601640821, -1.92561364, -0.235166222, 0.951415241, 0.108872019, -0.28802076, 0, 0.935403228, 0.353582978, 0.3079108, -0.336404234, 0.889956892)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.2, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {C0 = CFrame.new(0.00240329513, 1.29282486, -0.00363020925, 0.833831728, 0.00480659027, -0.551997781, 0, 0.999962091, 0.0087072961, 0.552018762, -0.00726041943, 0.833800137)})
			aa:Play()
			aa.Completed:Wait()
		end
		for i=2,0,-1 do
			Tween:Create(rightarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.092062, 0.35091719, 1.47658277, 0.466411799, -0.850674689, -0.242508397, 0.819872558, 0.312817246, 0.479541957, -0.332073122, -0.422489434, 0.843343973)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.798333168, 0.00464498997, -1.01403081, -0.46663174, -0.854445636, 0.228421316, -0.85490936, 0.369550198, -0.364093035, 0.22668463, -0.365177035, -0.902917802)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-2.98023224e-08, 0, -1.1920929e-07, 0.30450505, 2.85641554e-15, -0.952510417, 9.38051635e-15, 1, 0, 0.952510417, 8.93504224e-15, 0.30450505)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.15225254, -2, -0.476255238, 0.30450508, 2.04029696e-15, -0.952510476, 6.700369e-15, 1, 0, 0.952510476, 6.38217303e-15, 0.30450508)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.15225254, -2, 0.476255238, 0.30450508, 2.04029696e-15, -0.952510476, 6.700369e-15, 1, 0, 0.952510476, 6.38217303e-15, 0.30450508)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(4.28462341e-15, 1.5, 1.34025625e-14, 0.30450508, 2.85641554e-15, -0.952510417, 9.3805172e-15, 1, 0, 0.952510417, 8.93504224e-15, 0.30450508)})
			aa:Play()
			aa.Completed:Wait()
			Tween:Create(rightarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.62986267, 0.396338463, 0.533378065, 0.188142642, 0.643842578, -0.741663873, 0.819870293, 0.312816739, 0.479539722, 0.540752947, -0.69829005, -0.469013274)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.66028512, 0.237480462, 0.506468236, -0.0869154334, -0.677378118, 0.730479896, -0.854906797, 0.427163482, 0.294390798, -0.511448145, -0.598905087, -0.616222203)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.1920929e-07, 0, -2.79396772e-09, -0.999672174, -1.07170784e-14, -0.0255288091, 1.07205885e-14, 1, 0, 0.0255288091, 2.73683969e-16, -0.999672174)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.499836117, -2, -0.0127644055, -0.999672234, -8.03780904e-15, -0.0255288109, 8.04044162e-15, 1, 0, 0.0255288109, 2.05262976e-16, -0.999672234)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.499836117, -2, 0.0127644055, -0.999672234, -8.03780904e-15, -0.0255288109, 8.04044162e-15, 1, 0, 0.0255288109, 2.05262976e-16, -0.999672234)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.60756181e-14, 1.5, 4.10525953e-16, -0.999672174, -1.07170776e-14, -0.0255288091, 1.07205894e-14, 1, 0, 0.0255288091, 2.73683969e-16, -0.999672174)})
			aa:Play()
			aa.Completed:Wait()
			Tween:Create(rightarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.72430503, 0.35091719, -0.632179618, -0.206773996, 0.942795277, -0.261485994, 0.819872558, 0.312817246, 0.479541957, 0.533905804, -0.115227282, -0.837651849)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.108743131, 0.00464498997, 1.28598642, 0.264940292, 0.914412022, 0.306025624, -0.85490936, 0.369550198, -0.364093035, -0.446022868, -0.165160298, 0.879648209)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(8.94069672e-08, 0, 8.94069672e-08, -0.778326988, -1.04301596e-14, 0.627854645, 1.34007338e-14, 1, 0, -0.627854645, -8.41371972e-15, -0.778326988)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.389163524, -2, 0.313927352, -0.778327048, -8.34412834e-15, 0.627854705, 1.07205868e-14, 1, 0, -0.627854705, -6.73097654e-15, -0.778327048)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.389163524, -2, -0.313927352, -0.778327048, -8.34412834e-15, 0.627854705, 1.07205868e-14, 1, 0, -0.627854705, -6.73097654e-15, -0.778327048)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.56452406e-14, 1.5, -1.262058e-14, -0.778326988, -1.04301604e-14, 0.627854705, 1.34007346e-14, 1, 0, -0.627854705, -8.41371972e-15, -0.778326988)})
			aa:Play()
			aa.Completed:Wait()
			Tween:Create(rightarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.53054702, 0.396338463, -0.77354455, -0.267711461, -0.530958891, 0.803998411, 0.819862247, 0.312798619, 0.479565293, -0.506119132, 0.787553012, 0.351573378)}):Play()
			Tween:Create(leftarm, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-1.71775305, 0.237480462, -0.249763846, 0.163199112, 0.76011467, -0.628961027, -0.854918659, 0.427143872, 0.294384539, 0.492422879, 0.489667118, 0.719545722)}):Play()
			Tween:Create(humanoidrootpart, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-8.34465027e-07, 0, -1.01998448e-05, 0.984333396, 0, 0.176318228, 0, 1, 0, -0.176318228, 0, 0.984333396)}):Play()
			Tween:Create(leftleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(-0.492167532, -2, 0.0881489143, 0.984333396, 0, 0.176318228, 0, 1, 0, -0.176318228, 0, 0.984333396)}):Play()
			Tween:Create(rightleg, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(0.492167532, -2, -0.0881489143, 0.984333396, 0, 0.176318228, 0, 1, 0, -0.176318228, 0, 0.984333396)}):Play()
			local aa = Tween:Create(head, TweenInfo.new(0.05, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {C0 = CFrame.new(1.58289841e-14, 1.5, -2.83502584e-15, 0.984333396, 0, 0.176318228, 0, 1, 0, -0.176318228, 0, 0.984333396)})
			aa:Play()
			aa.Completed:Wait()
		end
	end
end)"
isACyACM,Swiftink Auth,djmango,JavaScript,Tuesday 5th of September 2023 03:55:18 PM CDT,"// https://swiftink.readme.io/reference/swiftink_api_routers_transcript_transcript_router_create_transcription

headers = {
	'Authorization': 'Bearer swiftink.f79a7253913e4a.df0....'
}"
qmM859Lq,rsh,cul8ter,Lua,Tuesday 5th of September 2023 03:21:06 PM CDT,"local ot=term
local nt={}
local mod=peripheral.find(""modem"")
mod.open(545)
local function call_remote(k,...)
    args={...}
    mod.transmit(555,545,{""NSA"",k,args})
end
for k,v in pairs(term) do
    nt[k]=function(...) call_remote(k,...) return ot[k](...) end
    print(""Hooked: ""..k)
    os.sleep(0)
end
_G.term=nt
nt.clear()
nt.setCursorPos(1,1)
local on=true
while on do
	local cmd=""""
	io.write(shell.dir().."": "")
	local loop=true
	term.setCursorBlink(true)
	while loop do
		name,key,port,_,msg=os.pullEvent()
		if name==""modem_message"" then
			if port==545 then
				os.queueEvent(msg[1],msg[2])
			end
		elseif name==""key"" then
			if key==keys.enter then 
				loop=false
			elseif key==keys.backspace then
				cmd=string.sub(cmd,1,-2)
				local x,y=term.getCursorPos()
				term.setCursorPos(x-1,y)
				term.write("" "")
				term.setCursorPos(x-1,y)
			else
				io.write(string.lower(string.char(key)))
				cmd=cmd..string.lower(string.char(key))
			end
		end
	end
	term.setCursorBlink(false)
	local x,y=term.getCursorPos()
	term.setCursorPos(1,y+1)
	if cmd==""exit"" then 
		on=false
	else
		shell.run(cmd)
	end
end
_G.term=ot
print(""exited"")"
cgTn1R6B,arch btw apps list laptop,AleksiReede,Bash,Tuesday 5th of September 2023 03:12:40 PM CDT,"youtube-music-bin keepassxc dkms nvidia-open-dkms firefox-pwa-bin syncthing-gtk ocs-url optimus-manager-qt-kde optimus-manager linux-headers xf86-video-intel lib32-nvidia-utils nvidia-utils refind pa-notify mkinitcpio-firmware mda.lv2 jdk17-openjdk jdk11-openjdk jdk8-openjdk freepats-general-midi c++utilities btw boost-libs bluez-utils intel-ucode alsa-card-profiles arduino-ide-bin discord-screenaudio discord_arch_electron dxvk-bin easyeffects etcher-bin firefox-pwa-bin git-credential-keepassxc gmail-nativefier ms-outlook-nativefier nextcloud-client noto-fonts-cjk noto-fonts-emoji-apple otf-monocraft powerline-fonts qpwgraph rdesktop signal-desktop-beta-bin spectacle steam-native-runtime teams-nativefier telegram-desktop-bin tor-browser ttf-ms-fonts visual-studio-code-bin whatsapp-nativefier xorg-xcursorgen xorg-xkill xorg-xlsclients kdeconnect google-chrome timeshift-bin galculator-gtk2 ani-cli ark audacious eog eog-plugins gimp gnome-disk-utility gparted inkscape kate kdenlive libreoffice lutris mpv okular scrcpy vlc wireguard-tools xdg-utils flatpak tidy
pipewire-alsa pipewire-audio pipewire-enable-bluez5 pipewire-jack pipewire-pulse pipewire-v4l2 pipewire-zeroconf lib32-pipewire gst-plugin-pipewire wireplumber"
fDs4UDqd,# tk_rgb_filter_demo.py,here2share,Python,Tuesday 5th of September 2023 03:10:08 PM CDT,"# tk_rgb_filter_demo.py ZZZ Sorry, I can't seem to find a way for this to work properly

from tkinter import *
from PIL import Image, ImageTk, ImageFilter, ImageDraw, ImageOps, ImageFont
from math import sin, cos, pi
import copy

def float_range(start, stop, step=1.0):
    while start < stop:
        yield start
        start += step

ww = 512 
hh = 512 
cx, cy = ww//2, hh//2

root = Tk()
root.title(""# tk_rgb_filter_demo"")
root.geometry(""%dx%d+0+0""%(ww,hh))

def rgb2hex(r,g,b):
	return '#%02X%02X%02X'%(r,g,b)

rgb = range(0, 256, 50)
colors = [rgb2hex(r, g, b) for r in rgb for g in rgb for b in rgb]

img = Image.new('RGB', (ww, hh), (0, 0, 0))
draw = {}
for k in (0, 1, 2, 3):
	draw[k] = ImageDraw.Draw(img)
	
text_img = Image.new('RGBA', (ww, hh), (0, 0, 0, 0))
text_draw = ImageDraw.Draw(text_img)
my_font = ImageFont.truetype('arial.ttf', 24)

blur_radius = 0.02 * min(img.size)

canvas = Canvas(root, width=ww, height=hh, bg='white')
canvas.pack(side=LEFT, fill=BOTH, expand=True)

# Define filter types
filters = {
    'Blur': {'filter': ImageFilter.BLUR, 'range': (0, 10, 1)},
    'Contour': {'filter': ImageFilter.CONTOUR, 'range': (0, 255, 25)},
    'Detail': {'filter': ImageFilter.DETAIL, 'range': (0, 5, 0.5)},
    'Edge Enhance': {'filter': ImageFilter.EDGE_ENHANCE, 'range': (0, 255, 25)},
    'Edge Enhance More': {'filter': ImageFilter.EDGE_ENHANCE_MORE, 'range': (0, 255, 25)},
    'Emboss': {'filter': ImageFilter.EMBOSS, 'range': (0, 255, 25)},
    'Find Edges': {'filter': ImageFilter.FIND_EDGES, 'range': (0, 255, 25)},
    'Sharpen': {'filter': ImageFilter.SHARPEN, 'range': (0, 10, 1)},
    'Smooth': {'filter': ImageFilter.SMOOTH, 'range': (0, 10, 1)},
    'Smooth More': {'filter': ImageFilter.SMOOTH_MORE, 'range': (0, 10, 1)},
    'Sobel X': {'filter': ImageFilter.Kernel((3,3), [-1,0,1,-2,0,2,-1,0,1]), 'range': (-255, 255, 50)},
    'Sobel Y': {'filter': ImageFilter.Kernel((3,3), [-1,-2,-1,0,0,0,1,2,1]), 'range': (-255, 255, 50)},
    'Laplacian': {'filter': ImageFilter.Kernel((3,3), [0,1,0,1,-4,1,0,1,0]), 'range': (0, 255, 25)},
    'Canny': {'filter': ImageOps.autocontrast(img.filter(ImageFilter.FIND_EDGES), 0), 'range': (0, 255, 25)},
}

grayscale_range = [rgb2hex(i, i, i) for i in range(0, 256, 15)]
grayscale_range = grayscale_range + grayscale_range[::-1]

def display(img):
	tkimg = ImageTk.PhotoImage(img)
	canvas.create_image((cx, cy), image=tkimg)
	canvas.update()

sz = 16
c = 0
xy = range(0, 512, sz)
for y in xy:
	c = (c + 3) % 11
	for x in xy:
		color = colors.pop(c)
		colors.append(color)
		draw[1].rectangle((x, y, x+sz, y+sz), fill=color, outline=color)
		c = (c + 1) % 11
draw['source'] = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))
source = {}
target = {}
for y in range(hh):
	for x in range(ww):
		source[x,y] = draw['source'].getpixel((x, y))
		
o255 = [i for i in range(256)]
o255 = o255[1:-1] + o255[::-1]
Lc = len(o255)
	
while 1:
	for name, data in filters.items():
		# Extract filter and range from data dictionary
		filter_type = data['filter']
		range_ = data['range']
		# Apply the filter for each range value and display the result
		
		for value in float_range(range_[0], range_[1], range_[2]):
			value = round(value, 2)
			for y in xy:
				c = (c + 1) % 11
				for x in xy:
					color = colors.pop(c)
					colors.append(color)
					draw[0].rectangle((x, y, x+sz, y+sz), fill=color, outline=color)
					c = (c + 1) % 11
			draw['target'] = img.filter(ImageFilter.GaussianBlur(radius=blur_radius))
			
			for i in range(0, 100):
				sss = f'{name} {value}'
				alpha = i / 100.0
				draw['image'] = Image.blend(draw['source'], draw['target'], alpha)

				filtered_image = draw['image'].filter(filter_type)
				
				mask = Image.new('RGBA', filtered_image.size, color=(0, 0, 0, 128))
				draw['image'].paste(filtered_image, mask=mask)
				
				text_img = Image.new('RGBA', (ww, hh), (0, 0, 0, 0))
				text_draw = ImageDraw.Draw(text_img)
				text_width, text_height = text_draw.textsize(sss, my_font)
				x = (img.width - text_width) // 2
				y = hh // 2
				grayscale_color = grayscale_range.pop(0)
				grayscale_range.append(grayscale_color)
				text_draw.text((x, y), sss, font=my_font, fill=grayscale_color)
				draw['image'].paste(text_img, mask=text_img)
				display(draw['image'])
			draw['source'] = copy.deepcopy(draw['target'])"
6pTu0Y0A,NOD Euclid,JeekaMIX,Python,Tuesday 5th of September 2023 03:01:48 PM CDT,"def NOD(a, b):
	if a == 0 or b == 0:
	    return(a+b)
	if (a > b):
		return NOD(a%b, b)
	else:
		return NOD(a, b%a)

print(NOD(int(input()), int(input())))"
j71Vn2GT,After,MikeMoulder,C#,Tuesday 5th of September 2023 02:54:13 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using System.Security.Cryptography;

public class GameController : MonoBehaviour
{
    [Header(""UI Panels"")]
    [SerializeField] private GameObject gameOverPanel;
    [SerializeField] private GameObject levelPassedPanel;
    [SerializeField] private GameObject pausePanel;
    [SerializeField] private List<GameObject> levelPresets;
    [SerializeField] private List<Sprite> levelIcons;
    [SerializeField] private SpriteRenderer levelIconRenderer;
    private int currentSelectedLevel = 0;
    private int currentLevelIndex = 0;
    private int playerHighScore;

    [Header(""UI Text"")]
    [SerializeField] private TMP_Text scoreText;
    [SerializeField] private TMP_Text gameOverInfoText;
    [SerializeField] private TMP_Text gameOverScoreText;
    [SerializeField] private TMP_Text levelPassedScoreText;

    private int currentScore;
    [SerializeField] private int pointsPerApple = 1;
    private bool isGamePaused = false;
    [SerializeField] private GameObject nextLevelButton;
    public bool isEnglish;
    public static GameController gameControllerInstance;

    [HideInInspector] public bool isHardcoreMode;
    private void Awake()
    {
        gameControllerInstance = this;
        Time.timeScale = 1;
        currentSelectedLevel = PlayerPrefs.GetInt(""CurrentSelectedLevel"", 1);
        currentLevelIndex = PlayerPrefs.GetInt(""CurrentLevelIndex"");
        playerHighScore = PlayerPrefs.GetInt(""PlayerHighScore"");
    }

    void Start()
    {
        LoadLevel();
        CheckLanguage();
    }

    void Update()
    {
        // Implement game logic here...
    }

    private void CheckGameMode()
    {
        // Check game mode logic...
    }

    private void LoadLevel()
    {
        levelIconRenderer.sprite = levelIcons[currentLevelIndex - 1];
        Instantiate(levelPresets[currentLevelIndex - 1]);
    }

    public void TogglePauseGame()
    {
        if (isGamePaused)
        {
            Time.timeScale = 1;
            pausePanel.SetActive(false);
            isGamePaused = false;
        }
        else
        {
            // Pause the game...
            Time.timeScale = 0;
            pausePanel.SetActive(true);
            isGamePaused = true;
        }
    }

    public void AwardPointsToPlayer()
    {
        currentScore += pointsPerApple;
        scoreText.text = isEnglish ? ""Current Score: "" + currentScore.ToString() : ""Pontuação Atual: "" + currentScore.ToString();
    }

    public void HandleGameOver(bool bittenBySnake)
    {
        if (bittenBySnake)
        {
            // Player bit itself
            gameOverInfoText.text = isEnglish ? ""You Bit Yourself!"" : ""Você Mordeu a Si Mesmo!"";
        }
        else
        {
            gameOverInfoText.text = isEnglish ? ""You Hit The Wall!"" : ""Você Bateu na Parede!"";
        }

        HandlePlayerScore();
        gameOverPanel.SetActive(true);
    }

    private void CheckLanguage()
    {
        int savedLanguage = PlayerPrefs.GetInt(""SavedLanguage"", 0);

        switch (savedLanguage)
        {
            case 0:
                isEnglish = true;
                break;
            case 1:
                isEnglish = false;
                break;
        }
    }

    public void HandleLevelCompleted()
    {
        HandlePlayerScore();
        if (currentSelectedLevel < 6)
        {
            currentSelectedLevel++;
            currentLevelIndex++;

            PlayerPrefs.SetInt(""CurrentSelectedLevel"", currentSelectedLevel);
            PlayerPrefs.SetInt(""CurrentLevelIndex"", currentLevelIndex);
        }
        else
        {
            if (currentLevelIndex == currentSelectedLevel)
            {
                nextLevelButton.SetActive(false);
            }
            else
            {
                currentLevelIndex++;
                PlayerPrefs.SetInt(""CurrentLevelIndex"", currentLevelIndex);
            }
        }

        levelPassedPanel.SetActive(true);
    }

    private void HandlePlayerScore()
    {
        gameOverScoreText.text = currentScore.ToString();
        levelPassedScoreText.text = currentScore.ToString();

        // Save the last score...
        PlayerPrefs.SetInt(""LastPlayerScore"", currentScore);

        // Save a new high score
        if (currentScore <= playerHighScore) { return; }

        PlayerPrefs.SetInt(""PlayerHighScore"", currentScore);
    }

    public void RestartOrContinueGame()
    {
        UnityEngine.SceneManagement.SceneManager.LoadScene(""GameScene"");
    }

    public void ReturnToMainMenu()
    {
        UnityEngine.SceneManagement.SceneManager.LoadScene(""MainMenu"");
    }
}
"
5zquhhJF,RagScripts,johnlol,VeriLog,Tuesday 5th of September 2023 02:52:00 PM CDT,"**********************************
guild_vs5 - npc: npc/custom/Duel.txt			//1x apostando Zeny (BET) prontera,156,239,6
**********************************
npc: npc/custom/PVP Ranking with Reset.txt			//PVP Com Ranking + Reset pelo GM prontera,139,173,5
guild_vs1 - Trans. 2nd Job
guild_vs4 - Guild Arena
guild_vs3 - Free for All
**********************************
guild_vs2
guild_vs1-1
**********************************
@warp sec_pri 14,85
@warp sec_pri 59,85
**********************************
<header> {
if (getgmlevel() < 80) 
mes ""Only GMs are allowed."";
}else{
warp <map>,<x>,<y>;
close;
}
**********************************
.............{ resetstatus; },{},{}
{ atcommand ""@streset""; }
6320,Premium_Reset_Stone,Premium Reset Stone,18,20,,10,,,,,0xFFFFFFFF,63,2,,,,,,{ resetstatus(); },{},{}
**********************************
unitskilluseid getcharid(3),""AL_TELEPORT"",1;
**********************************
Eddga Card [Footgear]   Item ID# 4123
{ bonus bMaxHPrate,-25; bonus bNoWalkDelay; },{},{}
**********************************
hateffect HAT_EF_GIFT_OF_SNOW,true;
UnEquipScript: |
hateffect HAT_EF_GIFT_OF_SNOW,false;
**********************************
{ bonus bAllStats,5; skill ""AL_TELEPORT"",1; },{ sc_start SC_SPEEDUP0,-1,25; },{ sc_end SC_SPEEDUP0; }
{ bonus bAllStats,5; skill ""AL_TELEPORT"",1; },{ sc_start SC_SPEEDUP0,INFINITE_TICK,25; },{ sc_end SC_SPEEDUP0; }
**********************************
,{},{ sc_start4 SC_EDP,60000,5,0,0,1; },{ sc_end SC_EDP; }
**********************************
{ bonus5 bAutoSpellWhenHit,""HP_ASSUMPTIO"",5,50,BF_WEAPON|BF_MAGIC,0; },{},{}
bonus5 bAutoSpellWhenHit,""WZ_STORMGUST"",10,20,BF_WEAPON|BF_MAGIC,0;
{ autobonus ""{ bonus bAspdRate,7; }"",10+(getrefine()*2),7000,BF_WEAPON,""{ specialeffect2 EF_HASTEUP; }""; },{},{}
bonus3 bAutoSpell,""SN_WINDWALK"",5,10+(getrefine()*3);
bonus3 bAutoSpell,""MG_FIREBOLT"",5,10+(getrefine()*2); bonus3 bAutoSpell,""MG_COLDBOLT"",5,10+(getrefine()*2); bonus3 bAutoSpell,""MG_LIGHTNINGBOLT"",5,10+(getrefine()*2); bonus3 bAutoSpell,""KN_BOWLINGBASH"",5,20+(getrefine()*2); bonus3 bAutoSpell,""MG_FIREBALL"",1,15+(getrefine()*2); bonus3 bAutoSpell,""PR_LEXAETERNA"",1,10+(getrefine()*2); bonus3 bAutoSpell,""AS_SONICBLOW"",5,10+(getrefine()*2);
2598{ bonus2 bSubRace,RC_Undead,5; bonus2 bSubRace,RC_DemiHuman,-5; /*Gold PC Room: bonus bFlee,20;*/ },{},{}
bonus bAddMaxWeight,10000;
**********************************
493 { while(isequipped(28008)){ specialeffect2 493; }
**********************************
2897,Pushcart_Clip,Pushcart Clip,5,30000,,100,,0,,,0xFFFFFFFF,7,2,136,,0,0,0,{ skill ""MC_PUSHCART"",3; skill ""MC_VENDING"",10; },{ setcart; },{ skill ""MC_PUSHCART"",10; setcart 0; }
2866,Falcon_Clip,Falcon Clip,5,30000,,100,,0,,,0xFFFFFFFF,7,2,136,,0,0,0,{ skill ""HT_FALCON"",1,skill ""HT_DETECTING"",4; },{ setfalcon; },{ setfalcon 0; }
**********************************
mes ""Hello ""+(Sex?""Mr"":""Ms"")+"", ""+strcharinfo(0);
**********************************
que_temsky,47,126,0	script	ld01#Exit	45,1,1,{
	end;
OnTouch:
	warp ""SavePoint"",0,0;
	end;
}
**********************************
== - Exatamente Igual a
!= - Exatamente NÃO é Igual a
< - Menor Que
<= - Menor Que OU Igual a
> - Maior Que
>= - Maior Que OU Igual a
**********************************
progressbar ""FFFF00"",2;
progressbar ""0xFF0000"",3;
**********************************
specialeffect2 219;
**********************************
When VIP status active:
FLEE +20
/*Gold PC Room: bonus bFlee,20;*/
**********************************
Unjail item script
7140,Seed_Of_Life,Seed of Life,0,600,,10,,,,,,,,,,,,,{ input .@input$; atcommand ""@unjail "" + .@input$; },{},{}
7140,Seed_Of_Life,Seed of Life,3,60000,,10,,,,,,,,,,,,,{},{},{}
**********************************
enum weapon_type {
	W_FIST,	//Bare hands
	W_DAGGER,	//1
	W_1HSWORD,	//2
	W_2HSWORD,	//3
	W_1HSPEAR,	//4
	W_2HSPEAR,	//5
	W_1HAXE,	//6
	W_2HAXE,	//7
	W_MACE,	//8
	W_2HMACE,	//9 (unused)
	W_STAFF,	//10
	W_BOW,	//11
	W_KNUCKLE,	//12	
	W_MUSICAL,	//13
	W_WHIP,	//14
	W_BOOK,	//15
	W_KATAR,	//16
	W_REVOLVER,	//17
	W_RIFLE,	//18
	W_GATLING,	//19
	W_SHOTGUN,	//20
	W_GRENADE,	//21
	W_HUUMA,	//22
	W_2HSTAFF,	//23
	MAX_WEAPON_TYPE,
	// dual-wield constants
	W_DOUBLE_DD, // 2 daggers
	W_DOUBLE_SS, // 2 swords
	W_DOUBLE_AA, // 2 axes
	W_DOUBLE_DS, // dagger + sword
	W_DOUBLE_DA, // dagger + axe
	W_DOUBLE_SA, // sword + axe
	W_DOUBLE_GU, // 2 guns
	EQI_HEAD_TOP (1) Upper headgear
**********************************
EQI_ARMOR (2) Armor
EQI_HAND_L (3) Left hand (weapon/shield)
EQI_HAND_R (4) Right hand (weapon)
EQI_GARMENT (5) Garment
EQI_SHOES (6) Shoes
EQI_ACC_L (7) Left accessory
EQI_ACC_R (8) Right accessory
EQI_HEAD_MID (9) Middle headgear
EQI_HEAD_LOW (10) Lower headgear
**********************************
{ .@i = getiteminfo(getequipid(EQI_HAND_R), ITEMINFO_VIEW); if (.@i == W_STAFF || .@i == W_2HSTAFF) { bonus bInt,1; bonus2 bIgnoreMdefClassRate,Class_All,2+(getrefine()/4); } },{},{}
**********************************"
NVDSRHr5,item_combo_db,johnlol,VeriLog,Tuesday 5th of September 2023 02:51:12 PM CDT,"// Item Combos Database
//
// Structure of Database:
// ID:ID:ID:ID,{ Script }

//AdobeRO
22043:15110,{ bonus bBaseAtk,30; }
20732:15110,{ bonus2 bSkillAtk,""NC_AXETORNADO"",25; }
//2995:15110,{ bonus2 bSkillAtk,""NC_AXEBOOMERANG"",100; }
//32237:2980,{ bonus bBaseAtk,50; bonus bMatk,50; bonus bAspd,1; }
2979:18853,{ bonus bMaxHPrate,15; bonus2 bSubEle,Ele_Fire,10; bonus bLongAtkRate,30; }
1437:5782,{ bonus2 bAddClass,Class_All,3; }
1430:5782,{ bonus2 bAddClass,Class_All,3; }
5782:2125,{ bonus bDef,2; bonus2 bSubEle,Ele_Neutral,5; bonus2 bSubEle,Ele_Fire,5; bonus2 bSubEle,Ele_Water,5; bonus2 bSubEle,Ele_Wind,5; bonus2 bSubEle,Ele_Earth,5; bonus2 bSubEle,Ele_Dark,5; bonus2 bSubEle,Ele_Holy,5; bonus2 bSubEle,Ele_Ghost,5; }
1221:5782,{ bonus2 bAddClass,Class_All,3; }
1220:5782,{ bonus2 bAddClass,Class_All,3; }
1219:5782,{ bonus2 bAddClass,Class_All,3; }
5782:1407,{ bonus2 bAddClass,Class_All,3; }
5782:1408,{ bonus2 bAddClass,Class_All,3; }
5782:1409,{ bonus2 bAddClass,Class_All,3; }
18683:2214,{ bonus3 bAutoSpellWhenHit,""TK_HIGHJUMP"",1,7; }
18683:5266,{ bonus3 bAutoSpellWhenHit,""TK_HIGHJUMP"",1,7; }
2584:5579,{ .@r = getequiprefinerycnt(EQI_GARMENT); if(.@r>=5) { skill ""TF_DOUBLE"",1; bonus bDoubleRate,25; } else if(.@r>=7) { .@bonus = max(getskilllv(""TF_DOUBLE""),5); skill ""TF_DOUBLE"",.@bonus; bonus bDoubleRate,.@bonus*5; } }
13428:2353,{ bonus bMaxSP,50; if(getskilllv(""KN_BOWLINGBASH"")==10) { bonus2 bSkillAtk,""KN_BOWLINGBASH"",5; } }
13428:5690,{ bonus bHit,10; bonus2 bAddRace,RC_DemiHuman,10; bonus2 bAddRace,RC_Player_Human,10; }
28321:5967,{ bonus2 bSubSkill,""HT_BLITZBEAT"",200; }
4517:5967,{ bonus bInt,1; bonus bCritAtkRate,5 + (BaseClass == Job_Archer ? 15 : 0); }
2912:18546,{ bonus2 bAddItemGroupHealRate,IG_Candy,25; }
2908:2909,{ bonus2 bAddClass,Class_All,4; bonus bMatkRate,4; }
2905:2157,{ bonus2 bSubRace,RC_Insect,10; if (getequiprefinerycnt(EQI_HAND_L) >= 8) bonus2 bSubRace,RC_Insect,20; }
2466:2522:2339,{ bonus bStr,2; }
2466:2523:2371,{ bonus bStr,2; }
1298:4521,{ bonus bCritAtkRate,5; }
1298:4317,{ bonus bCritAtkRate,5; }
18758:2960,{ bonus bMaxHPrate,10; bonus bMaxSPrate,10; bonus2 bAddClass,Class_All,5; bonus bMatkRate,5; bonus bVariableCastrate,-15; bonus3 bAutoSpellWhenHit,""WZ_STORMGUST"",5,40; }
18727:4326,{ bonus2 bAddItemHealRate,551,50; bonus2 bAddItemHealRate,544,50; }
18658:18553,{ bonus bMdef,3; bonus2 bAddMonsterDropItem,12354,200; }
18651:19128,{ bonus bAspd,getrefine()/2; }
18651:5421,{ bonus bAspd,getrefine()/2; }
2592:18628,{ bonus bMaxHPrate,3; bonus2 bSubRace,RC_DemiHuman,10; }
//
1166:2527,{ bonus2 bAddRace,RC_Dragon,5; }
1166:2527:5467,{ bonus2 bAddRace,RC_Dragon,25; }
1180:2527,{ bonus2 bAddRace,RC_Dragon,5; }
1180:2527:5467,{ bonus2 bAddRace,RC_Dragon,25; }
1269:5467,{ bonus bAspd,1; bonus bFlee2,3; }
1284:2892,{ bonus2 bSkillAtk,""AS_SONICBLOW"",50; bonus bBaseAtk,50; bonus bFlee,-30; }
1285:2892,{ bonus bCritical,4; bonus bCritAtkRate,40; bonus bMaxHPRate,-10; }
1287:15123,{ if (getequiprefinerycnt(EQI_HAND_R) >= 7) { autobonus ""{ bonus bIgnoreDefClass,Class_Normal; }"",1000,3000,BF_SHORT,BF_NORMAL; } /* Confirm: Success rate */ }
1387:19021,{ bonus2 bSkillAtk,""WS_CARTTERMINATION"",15+(getequiprefinerycnt(EQI_HAND_R))*5; }
1420:2115,{ bonus3 bAutoSpellWhenHit,""HP_ASSUMPTIO"",2,5; }
1420:2133,{ bonus2 bAddClass,Class_All,4; bonus bDef,2; }
1421:2133,{ bonus2 bAddClass,Class_All,4; bonus bDef,2; }
1422:2133,{ bonus2 bAddClass,Class_All,4; bonus bDef,2; }
1428:2115,{ bonus3 bAutoSpellWhenHit,""HP_ASSUMPTIO"",2,5; }
1433:2153,{ bonus2 bSkillAtk,""CR_GRANDCROSS"",10; bonus2 bSkillAtk,""LG_RAYOFGENESIS"",10; }
1433:28372,{ .@r = getequiprefinerycnt(EQI_HAND_R)/2*7; bonus2 bSkillAtk,""LG_CANNONSPEAR"",.@r; bonus2 bSkillAtk,""LG_BANISHINGPOINT"",.@r; }
1472:2677,{ bonus bMatkRate,6; bonus bDex,2; bonus bVariableCastrate,-getequiprefinerycnt(EQI_HEAD_TOP); }
1472:2711,{ bonus bMatkRate,6; bonus bDex,2; bonus bVariableCastrate,-getequiprefinerycnt(EQI_HAND_R); }
1473:2677,{ bonus bMatkRate,6; bonus bDex,2; bonus bVariableCastrate,-getequiprefinerycnt(EQI_HEAD_TOP); }
1473:2711,{ bonus bMatkRate,6; bonus bDex,2; bonus bVariableCastrate,-getequiprefinerycnt(EQI_HAND_R); }
1474:2527,{ bonus2 bAddRace,RC_Dragon,5; }
1474:2527:5467,{ bonus2 bAddRace,RC_Dragon,25; }
1477:2700,{ bonus2 bResEff,Eff_Confusion,9500; }
1479:2700,{ bonus2 bResEff,Eff_Confusion,9500; }
1480:2527,{ bonus2 bAddRace,RC_Dragon,5; }
1480:2527:5467,{ bonus2 bAddRace,RC_Dragon,25; }
1490:19021,{ bonus2 bSkillAtk,""LK_SPIRALPIERCE"",getequiprefinerycnt(EQI_HAND_R)*5; bonus4 bAutoSpellOnSkill,""LK_JOINTBEAT"",""LK_SPIRALPIERCE"",max(getskilllv(""LK_SPIRALPIERCE""),1),50+(getskilllv(""LK_JOINTBEAT"")*10); /* Confirm: Success rate */ }
15141:19033,{ bonus bMaxSP,100; bonus bNoCastCancel,1; }
15141:20779:22075,{ .@r = getequiprefinerycnt(EQI_ARMOR)+getequiprefinerycnt(EQI_GARMENT)+getequiprefinerycnt(EQI_SHOES); bonus bMaxHP,1000; bonus bHealPower,min(5+.@r,30); bonus bHealPower2,min(5+.@r,30); }
15186:19168,{ bonus2 bExpAddClass,Class_All,5; bonus2 bDropAddClass,Class_All,5; }
1535:4361,{ bonus bBreakArmorRate,900; bonus bBreakWeaponRate,900; }
1559:5467,{ bonus bAspd,1; bonus bFlee2,3; }
1564:2186,{ bonus bAspdRate,getequiprefinerycnt(EQI_HAND_R); }
1572:2716:2717,{ bonus bInt,5; bonus bMaxHP,700; bonus bAspdRate,5; }
1573:2334,{ bonus bMdef,8; bonus bMaxSPRate,10; bonus bInt,4; }
1573:2372,{ bonus bMdef,8; bonus bMaxSPRate,10; bonus bInt,4; }
1573:2716:2717,{ bonus bInt,5; bonus bMaxHP,700; bonus bAspdRate,5; }
1580:2186,{ bonus bAspdRate,15; }
1615:18539,{ bonus bMatk,10*getequiprefinerycnt(EQI_HAND_R); bonus bVariableCastrate,-10; }
1616:2515,{ bonus bSpeedRate,25; }
1617:19020,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); bonus bMatk,.@r; if (.@r >= 10) { autobonus ""{ bonus bVariableCastrate,-50; }"",100,5000,BF_MAGIC; /* Confirm: Success rate? */ } }
1618:2509,{ bonus bMaxHP,300; bonus bMatkRate,getequiprefinerycnt(EQI_HAND_R)-5; if(getequiprefinerycnt(EQI_GARMENT) > 10) { bonus2 bSubEle,Ele_Neutral,30; } else { bonus2 bSubEle,Ele_Neutral,getequiprefinerycnt(EQI_GARMENT)*3; } }
1618:2535,{ bonus bMatkRate,5; bonus2 bSubEle,Ele_Neutral,25; }
1618:19020,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); bonus bMatk,.@r; if (.@r >= 10) { autobonus ""{ bonus bVariableCastrate,-50; }"",100,5000,BF_MAGIC; /* Confirm: Success rate? */ } }
1619:19020,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); bonus bMatk,.@r; if (.@r >= 10) { autobonus ""{ bonus bVariableCastrate,-50; }"",100,5000,BF_MAGIC; /* Confirm: Success rate? */ } }
1620:2509,{ bonus bMaxHP,300; bonus bMatkRate,getequiprefinerycnt(EQI_HAND_R)-5; if(getequiprefinerycnt(EQI_GARMENT) > 10) { bonus2 bSubEle,Ele_Neutral,30; } else { bonus2 bSubEle,Ele_Neutral,getequiprefinerycnt(EQI_GARMENT)*3; } }
1620:2535,{ bonus bMatkRate,5; bonus2 bSubEle,Ele_Neutral,25; }
1620:19020,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); bonus bMatk,.@r; if (.@r >= 10) { autobonus ""{ bonus bVariableCastrate,-50; }"",100,5000,BF_MAGIC; /* Confirm: Success rate? */ } }
1629:5045,{ bonus bDex,2; bonus bInt,2; bonus bSPrecovRate,5; bonus bMatkRate,getequiprefinerycnt(EQI_HAND_R); }
1631:2129,{ bonus2 bSkillAtk,""PR_MAGNUS"",20; bonus3 bAutoSpellWhenHit,""PR_TURNUNDEAD"",1,20; }
1636:18539,{ bonus bMatk,10*getequiprefinerycnt(EQI_HAND_R); bonus bVariableCastrate,-10; }
1646:2161,{ .@r = getequiprefinerycnt(EQI_HAND_L)*4; bonus2 bVariableCastrate,""WZ_STORMGUST"",-.@r; bonus2 bVariableCastrate,""WL_FROSTMISTY"",-.@r; bonus2 bVariableCastrate,""WL_JACKFROST"",-.@r; }
1647:5968,{ if (BaseClass == Job_Acolyte) { bonus bHealPower,getequiprefinerycnt(EQI_HAND_R)*4; } }
1649:2198,{ .@r_2198 = getequiprefinerycnt(EQI_HAND_L); .@r_1649 = getequiprefinerycnt(EQI_HAND_R); if (.@r_2198 > 9) { bonus bMatk,15 * .@r_1649; } if (.@r_1649 >= 10) { bonus bMatk,50; bonus bVariableCastrate,-10; } }
1657:2471:2569:15029,{ bonus bHealPower,25; bonus2 bSkillUseSP,""AL_HEAL"",-20; bonus2 bSkillCooldown,""AB_SECRAMENT"",-2000; bonus2 bSkillCooldown,""AB_LAUDAAGNUS"",-2000; bonus2 bSkillCooldown,""AB_LAUDARAMUS"",-2000; }
1659:5920,{ .@r = getequiprefinerycnt(EQI_HAND_R); bonus2 bSkillUseSP,""AL_HEAL"",6*.@r; bonus2 bSkillUseSP,""AB_CHEAL"",10*.@r; bonus2 bSkillUseSP,""AB_HIGHNESSHEAL"",14*.@r; }
1660:2471:2569:15029,{ bonus bHealPower,45; bonus2 bSkillUseSP,""AL_HEAL"",-50; bonus3 bAutoSpellWhenHit,""AB_SILENTIUM"",1,100; bonus2 bSkillCooldown,""AB_CLEARANCE"",-3000; bonus2 bSkillCooldown,""AB_LAUDAAGNUS"",-3000; bonus2 bSkillCooldown,""AB_LAUDARAMUS"",-3000; }
1668:15089,{ bonus bDelayrate,-10; }
1670:2968,{ bonus bMatkRate,getequiprefinerycnt(EQI_HAND_R)*5; }
1670:2968:2969,{ bonus bMatkRate,-(getequiprefinerycnt(EQI_HAND_R)*5); }
1670:2969,{ bonus bMatkRate,getequiprefinerycnt(EQI_HAND_R)*5; }
1718:1774,{ bonus bLongAtkRate,50; }
1723:2718,{ bonus bDex,1; bonus bMaxSP,50; bonus bSPrecovRate,10; }
1724:5467,{ bonus bAspd,1; bonus bFlee2,3; }
1726:1774,{ bonus bLongAtkRate,50; }
1730:1752,{ bonus bLongAtkRate,25; }
1730:1752:19048,{ bonus bLongAtkRate,20; bonus2 bSubEle,Ele_Fire,-10; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
1730:19019,{ bonus bLongAtkRate,45; }
1731:1754,{ bonus bLongAtkRate,25; }
1731:1754:19048,{ bonus bLongAtkRate,20; bonus2 bAddEff,Eff_Freeze,-1000; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
1731:19019,{ bonus bLongAtkRate,45; }
1732:1756,{ bonus bLongAtkRate,25; bonus2 bAddEff,Eff_Stone,1000; }
1732:1756:19048,{ bonus bLongAtkRate,20; bonus2 bAddEff,Eff_Stone,-1000; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
1732:19019,{ bonus bLongAtkRate,45; }
1733:1755,{ bonus bLongAtkRate,25; bonus3 bAutoSpell,""NJ_HUUJIN"",5,(readparam(bInt)>39) ? 300 : 100; }
1733:1755:19048,{ bonus bLongAtkRate,20; bonus3 bAutoSpell,""NJ_HUUJIN"",5,(readparam(bInt)>39) ? -300 : -100; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
1733:19019,{ bonus bLongAtkRate,45; }
1734:1753,{ bonus bLongAtkRate,50; }
1741:2748,{ bonus bBaseAtk,25; bonus3 bAddEff,Eff_Curse,200,ATF_WEAPON|ATF_LONG|ATF_TARGET; }
1746:1773,{ bonus bLongAtkRate,50; }
1775:18114,{ bonus bLongAtkRate,70; }
1776:18114,{ bonus bLongAtkRate,40; }
1935:2988,{ bonus2 bSkillAtk,""CG_ARROWVULCAN"",200; bonus2 bSkillUseSP,""CG_ARROWVULCAN"",50; }
1990:2989,{ bonus2 bSkillAtk,""CG_ARROWVULCAN"",200; }
2001:2677,{ bonus bMatkRate,10; bonus bDex,2; bonus2 bSubRace,RC_Demon,10; bonus2 bSubRace,RC_Undead,10; }
2001:2711,{ bonus bMatkRate,10; bonus bDex,2; bonus2 bSubRace,RC_Demon,10; bonus2 bSubRace,RC_Undead,10; }
2007:2467:2859:15025,{ bonus2 bMagicAtkEle,Ele_Wind,40; bonus2 bMagicAtkEle,Ele_Earth,-30; bonus2 bSubEle,Ele_Earth,-50; }
2008:2468:2860:15026,{ bonus2 bMagicAtkEle,Ele_Water,40; bonus2 bMagicAtkEle,Ele_Wind,-30; bonus2 bSubEle,Ele_Wind,-50; }
2009:2469:2861:15027,{ bonus2 bMagicAtkEle,Ele_Fire,40; bonus2 bMagicAtkEle,Ele_Water,-30; bonus2 bSubEle,Ele_Water,-50; }
2010:2470:2862:15028,{ bonus2 bMagicAtkEle,Ele_Earth,40; bonus2 bMagicAtkEle,Ele_Fire,-30; bonus2 bSubEle,Ele_Fire,-50; }
2011:2467:2859:15025,{ bonus2 bMagicAtkEle,Ele_Wind,60; bonus2 bMagicAtkEle,Ele_Earth,-60; bonus2 bSubEle,Ele_Earth,-50; }
2012:2468:2860:15026,{ bonus2 bMagicAtkEle,Ele_Water,60; bonus2 bMagicAtkEle,Ele_Wind,-60; bonus2 bSubEle,Ele_Wind,-50; }
2013:2469:2861:15027,{ bonus2 bMagicAtkEle,Ele_Fire,60; bonus2 bMagicAtkEle,Ele_Water,-60; bonus2 bSubEle,Ele_Water,-50; }
2014:2470:2862:15028,{ bonus2 bMagicAtkEle,Ele_Earth,60; bonus2 bMagicAtkEle,Ele_Fire,-60; bonus2 bSubEle,Ele_Fire,-50; }
2109:2239:2717,{ bonus bHPrecovRate,15; bonus bSPrecovRate,15; bonus bMatkRate,7; }
2109:2971:5135,{ bonus bHPrecovRate,15; bonus bSPrecovRate,15; bonus bMatkRate,7; }
2109:2971:18874,{ bonus bHPrecovRate,15; bonus bSPrecovRate,15; bonus bMatkRate,7; }
2114:2353:5122,{ bonus bStr,2; bonus bDef,5; bonus bMdef,5; if(BaseClass==Job_Swordman) bonus bDef,6; }
2115:2353:5124,{ bonus bDef,2-getequiprefinerycnt(EQI_HAND_L)-getequiprefinerycnt(EQI_HEAD_TOP); bonus bMdef,5+getequiprefinerycnt(EQI_HAND_L)+getequiprefinerycnt(EQI_HEAD_TOP); }
2116:2355:2420:2521:5125,{ bonus bMaxHP,900; bonus bMaxSP,100; bonus3 bAutoSpellWhenHit,""HP_ASSUMPTIO"",1,30; }
2121:2239:2717,{ bonus bHPrecovRate,15; bonus bSPrecovRate,15; bonus bMatkRate,7; }
2121:2971:5135,{ bonus bHPrecovRate,15; bonus bSPrecovRate,15; bonus bMatkRate,7; }
2121:2971:18874,{ bonus bHPrecovRate,15; bonus bSPrecovRate,15; bonus bMatkRate,7; }
2123:2701,{ bonus bVariableCastrate,-10; }
2123:2881,{ bonus bMatkRate,getequiprefinerycnt(EQI_HAND_L)*2; }
2124:2702,{ bonus bAspdRate,10; bonus bShortWeaponDamageReturn,5; }
2124:22064,{ bonus bAspd,getequiprefinerycnt(EQI_HAND_L)/3; }
2135:2426,{ bonus2 bAddEff,Eff_Blind,500; autobonus ""{ bonus bFlee,20; }"",200,10000,BF_WEAPON,""{ specialeffect2 EF_INCAGILITY; }""; }
2137:2353:5124,{ bonus bDef,2-getequiprefinerycnt(EQI_HAND_L)-getequiprefinerycnt(EQI_HEAD_TOP); bonus bMdef,5+getequiprefinerycnt(EQI_HAND_L)+getequiprefinerycnt(EQI_HEAD_TOP); }
2153:28372,{ .@r = getequiprefinerycnt(EQI_HAND_R)/6*8; bonus2 bSkillAtk,""LG_SHIELDPRESS"",.@r; }
2160:19021,{ bonus2 bSubSize,Size_Large,5+(getequiprefinerycnt(EQI_HAND_L)*2); }
2169:2491:2590:15051,{ bonus2 bAddDefMonster,2311,30; bonus2 bAddDefMonster,2312,30; bonus2 bAddDefMonster,2320,30; bonus2 bAddDefMonster,2321,30; bonus2 bAddDefMonster,2322,30; bonus2 bAddDefMonster,2317,30; bonus2 bAddDefMonster,2318,30; bonus2 bAddDefMonster,2327,30; bonus2 bAddDefMonster,2319,30; bonus2 bAddDefMonster,2330,30; bonus2 bAddDefMonster,2329,30; bonus2 bAddDefMonster,2333,30; bonus2 bAddDefMonster,2332,30; bonus2 bAddDefMonster,2309,30; bonus2 bAddDefMonster,2310,30; bonus2 bAddDefMonster,2315,30; bonus2 bAddDefMonster,2316,30; bonus2 bAddDefMonster,2314,30; bonus2 bAddDefMonster,2313,30; bonus bMaxHPrate,20; bonus bMaxSPrate,10; }
2171:15053,{ bonus bAgi,2; }
2171:15056,{ bonus bAgi,2; }
2172:15054,{ bonus2 bAddClass,Class_All,10; bonus bStr,2; }
2173:15055,{ bonus bFlee,10; bonus bFlee2,10; }
2177:18574,{ bonus2 bAddClass,Class_Boss,5; bonus2 bMagicAddClass,Class_Boss,5; if (getequiprefinerycnt(EQI_HEAD_TOP) > 7) { bonus2 bAddClass,Class_Boss,5; bonus2 bMagicAddClass,Class_Boss,5; } }
2183:15068,{ bonus2 bSubEle,Ele_Neutral,5; }
2183:15068:18776:20710:22015,{ bonus bMaxHP,900; bonus bMaxSP,100; bonus3 bAutoSpellWhenHit,""HP_ASSUMPTIO"",1,30; }
2183:22015,{ bonus bAllStats,2; }
2195:20753,{ bonus2 bAddEle,Ele_Neutral,getequiprefinerycnt(EQI_HAND_L); bonus2 bSubRace,RC_Formless,getequiprefinerycnt(EQI_GARMENT); }
2198:5966,{ .@r = getequiprefinerycnt(EQI_HAND_L); if (.@r > 7) bonus2 bSkillCooldown,""WL_COMET"",-20000+(.@r > 9 ? -20000 : 0); }
2241:5136,{ bonus bMaxHP,700; bonus bMaxSP,50; bonus4 bAutoSpellWhenHit,""AL_INCAGI"",10,30,1; }
2268:18573,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); if(.@r > 6) { bonus bMaxHPrate,((.@r-5)/2)*2; bonus bHit,(.@r-5)/2; } }
2268:19082,{ bonus bDelayrate,-5; }
//Mechanical Plant Hat:19082,{ bonus2 bSkillAtk,GN_SPORE_EXPLOSION,getequiprefinerycnt(EQI_HEAD_???)*5; }
//2268:Mechanical Plant Hat:19082,{ bonus2 bSkillUseSP,GN_SPORE_EXPLOSION,20; }
2269:5781,{ bonus bInt,1; bonus bMaxSP,30; }
2269:5786,{ bonus2 bAddClass,Class_All,1; }
2269:5768,{ bonus bInt,1; if(getequiprefinerycnt(EQI_HEAD_TOP) > 6) bonus bMaxSPrate,getequiprefinerycnt(EQI_HEAD_TOP)-6; }
2270:5768,{ bonus bStr,1; if(getequiprefinerycnt(EQI_HEAD_TOP) > 2) bonus bUseSPrate,2-getequiprefinerycnt(EQI_HEAD_TOP); }
2270:5781,{ bonus bLuk,1; bonus bFlee,2; }
2270:5786,{ bonus bMatkRate,1; }
2278:18527,{ bonus2 bAddMonsterDropItem,12192,20; }
2278:18656,{ bonus2 bAddMonsterDropItem,12192,400; }
2281:18527,{ bonus bFlee,10; }
2286:18539,{ bonus bUseSPrate,-3; }
2312:2656,{ bonus bDef,5; bonus bMaxHP,150; }
2313:2656,{ bonus bDef,5; bonus bMaxHP,150; }
2337:2654,{ bonus bUseSPrate,-20; bonus bMaxHP,300; }
2339:2522,{ bonus bAgi,5; bonus bFlee,10; }
2339:2523,{ bonus bAgi,5; bonus bFlee,10; }
2353:2417:2516,{ bonus bAgi,3; bonus bMaxHPrate,5; bonus bMaxSPrate,5; }
2353:2418:2517,{ bonus bVit,5; bonus bHPrecovRate,10; bonus bSPrecovRate,10; }
2353:5123,{ if(readparam(bDex)>69) bonus bUseSPrate,-10; }
2353:5493,{ if(readparam(bDex)>69) bonus bUseSPrate,-10; }
2354:2419:2520:5128,{ bonus bVit,5; bonus bMaxHPrate,15; bonus bMaxSPrate,5; bonus bDef,5; bonus bMdef,15; bonus2 bSubEle,Ele_Water,10; bonus2 bSubEle,Ele_Earth,10; bonus2 bSubEle,Ele_Fire,10; bonus2 bSubEle,Ele_Wind,10; }
2357:2421:2524:5171,{ bonus bAllStats,1; }
2358:5153,{ bonus bLuk,6; bonus bFlee,5; bonus bInt,2; }
2359:2654,{ bonus bUseSPrate,-20; bonus bMaxHP,300; }
2365:2881,{ bonus bDelayRate,-15; }
2369:2428:2533:5306,{ bonus2 bSubRace,RC_DemiHuman,10; bonus2 bSubRace,RC_Player,10; bonus bMaxHPrate,20; bonus2 bResEff,Eff_Freeze,10000; skill ""WZ_FROSTNOVA"",10; }
2371:2522,{ bonus bAgi,5; bonus bFlee,10; }
2371:2523,{ bonus bAgi,5; bonus bFlee,10; }
2374:2729,{ bonus2 bAddClass,Class_All,3; bonus bMatkRate,3; }
2375:2729,{ bonus2 bAddClass,Class_All,3; bonus bMatkRate,3; }
2376:2435:2538,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bVit,3; bonus bMaxHPRate,12; bonus bHealpower2,10; bonus bAddItemHealRate,10; autobonus2 ""{ bonus2 bHPRegenRate,600,1000; }"",5,10000,BF_WEAPON,""{ specialeffect2 EF_HEAL; }""; }
2377:2435:2538,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bStr,3; bonus bMaxHPRate,12; bonus2 bSkillAtk,""MC_MAMMONITE"",20; bonus2 bSkillHeal,""AM_POTIONPITCHER"",10; bonus2 bSkillHeal2,""AM_POTIONPITCHER"",10; bonus2 bSkillHeal2,""AL_HEAL"",10; bonus bUnbreakableArmor,1; }
2378:2435:2538,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bAgi,3; bonus bMaxHPRate,12; bonus bCritical,5; bonus bAspdRate,5; autobonus ""{ bonus2 bHPRegenRate,300,1000; }"",10,10000,BF_WEAPON,""{ specialeffect2 EF_HEAL; }""; }
2379:2436:2539,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bInt,3; bonus bMaxHPRate,12; bonus2 bResEff,Eff_Stun,2000; autobonus2 ""{ bonus bDefEle,Ele_Ghost; }"",30,10000,BF_WEAPON,""{ specialeffect2 EF_ENERGYCOAT; }""; }
2380:2436:2539,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bInt,3; bonus bMaxHPRate,12; bonus2 bVariableCastrate,""AL_HOLYLIGHT"",-50; bonus bHealPower,6; autobonus2 ""{ bonus bDefEle,Ele_Ghost; }"",30,10000,BF_WEAPON,""{ specialeffect2 EF_ENERGYCOAT; }""; }
2381:2436:2539,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bDex,3; bonus bMaxHPRate,12; bonus bLongAtkDef,10; bonus bDelayRate,-25; }
2382:2437:2540,{ bonus2 bSubRace,RC_All,-200; bonus2 bSubRace,RC_DemiHuman,200; bonus2 bSubRace,RC_Player,200; bonus bDex,3; bonus bMaxHPRate,12; bonus bLongAtkDef,10; bonus bDelayRate,-25; }
2387:2440:2744,{ bonus bMaxHPrate,7; bonus bMaxSPrate,7; bonus bVariableCastrate,-3; bonus bDelayrate,-15; }
2390:2749,{ bonus bFlee2,5; }
2394:2444:2549,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,5; bonus2 bResEff,Eff_Freeze,10000; bonus2 bSkillHeal2,""AM_POTIONPITCHER"",3; bonus2 bSkillHeal2,""AL_HEAL"",3; bonus2 bSkillHeal2,""PR_SANCTUARY"",3; }
2399:2553,{ bonus bAgi,5; bonus bFlee,15; }
2399:2553:5467,{ bonus2 bSubRace,RC_Dragon,20; }
2408:2655,{ bonus bBaseAtk,50; bonus2 bAddDefMonster,1196,20; bonus2 bAddDefMonster,1197,20; }
2408:15040,{ .@r = getequiprefinerycnt(EQI_SHOES); if(.@r > 10) .@r = 10; bonus bMatkRate,5+.@r; }
2424:2528,{ bonus bHPrecovRate,5; bonus bMaxHPrate,10; }
2425:2529,{ bonus bFlee,10; }
2425:2530,{ bonus bFlee,10; }
2425:2551,{ bonus bFlee,10; }
2425:15058,{ bonus bAgi,2; bonus bFlee,5; }
2433:2537,{ bonus bMaxHPRate,6; }
2434:2529,{ bonus bFlee,10; }
2434:2530,{ bonus bFlee,10; }
2434:2551,{ bonus bFlee,10; }
2434:15058,{ bonus bAgi,2; bonus bFlee,5; }
2441:2546,{ bonus bFlee,5; }
2472:2570:15030:16013,{ bonus2 bAddRace,RC_Undead,15; bonus2 bMagicAddRace,RC_Undead,15; bonus2 bSkillAtk,""AB_ADORAMUS"",200; bonus2 bSkillUseSP,""AB_ADORAMUS"",-30; }
2472:2570:15030:16018,{ bonus2 bAddRace,RC_Undead,30; bonus2 bMagicAddRace,RC_Undead,30; bonus2 bSkillAtk,""AB_ADORAMUS"",200; bonus2 bSkillUseSP,""AB_ADORAMUS"",-30; bonus2 bVariableCastrate,""AL_HOLYLIGHT"",-50; bonus2 bVariableCastrate,""PR_TURNUNDEAD"",-50; bonus2 bVariableCastrate,""PR_MAGNUS"",-50; bonus2 bVariableCastrate,""AB_JUDEX"",-50; bonus2 bVariableCastrate,""AB_ADORAMUS"",-50; }
2475:2574:2883:15036,{ bonus bMaxHPRate,14; bonus2 bSubEle,Ele_Neutral,10; bonus2 bSkillAtk,""RK_HUNDREDSPEAR"",50; skill ""CR_AUTOGUARD"",1; bonus bUseSPrate,10; }
2476:2575:2884:15037,{ bonus2 bAddClass,Class_All,10; bonus3 bAutoSpell,""RK_STORMBLAST"",1,20; bonus2 bSkillAtk,""RK_WINDCUTTER"",100; bonus2 bSkillAtk,""RK_SONICWAVE"",100; autobonus3 ""{ bonus bAspd,2; }"",1000,10000,""LK_CONCENTRATION"",""{ specialeffect2 EF_ENHANCE; }""; }
2477:2577:2886:15038,{ bonus bFlee,10; bonus bCritical,15; bonus bCritAtkRate,40; bonus2 bSkillAtk,""GC_CROSSIMPACT"",20; bonus bUseSPrate,10; }
2478:2578:2887:15039,{ bonus3 bAutoSpell,""ASC_BREAKER"",max(getskilllv(""ASC_BREAKER""),1),20; if(readparam(bStr)>119) { bonus bBaseAtk,30; } bonus2 bAddClass,Class_All,10; bonus bMatkRate,10; bonus bCritical,-20; }
2479:2580:2890:15042,{ bonus bAspd,2; bonus2 bSkillAtk,""RA_ARROWSTORM"",50; bonus bLongAtkRate,30; bonus3 bAutoSpell,""AC_DOUBLE"",max(getskilllv(""AC_DOUBLE""),3),20; }
2480:2581:2891:15043,{ bonus bMaxHPRate,15; bonus bFlee2,20; bonus2 bSkillAtk,""RA_CLUSTERBOMB"",20; bonus bLongAtkRate,-30; bonus bAspd,-7; }
2481:2730,{ bonus bBaseAtk,getequiprefinerycnt(EQI_SHOES); }
2481:2731,{ bonus bMatkRate,getequiprefinerycnt(EQI_SHOES)/2; bonus bVariableCastrate,-(getequiprefinerycnt(EQI_SHOES)/2); }
2481:10031,{ bonus bCritical,(getequiprefinerycnt(EQI_SHOES)/2)*10; }
2482:2585:2895:2896:15045:18578,{ bonus bMaxHP,500; bonus bMaxSP,300; bonus bBaseAtk,10; bonus bDef,10; }
2483:2586:15046,{ bonus bVit,5; bonus2 bSubRace,RC_DemiHuman,15; bonus2 bSubRace,RC_Player,15; }
2484:2586:15047,{ bonus bDex,5; bonus2 bSubRace,RC_DemiHuman,15; bonus2 bSubRace,RC_Player,15; }
2485:2587:15048,{ bonus bInt,5; bonus bMdef,10; bonus2 bSubRace,RC_DemiHuman,15; bonus2 bSubRace,RC_Player,15; }
2507:15146,{ .@r = getequiprefinerycnt(EQI_ARMOR); bonus bMaxSPrate,10+.@r; bonus bFlee,10+.@r; }
2509:15146,{ .@r = getequiprefinerycnt(EQI_ARMOR); bonus bMaxHPrate,10+.@r; bonus bMatkRate,2+.@r; }
2518:2648:2649:5126,{ bonus bInt,5; bonus bMdef,11; bonus bMaxSPrate,20; bonus bNoCastCancel,0; bonus bVariableCastrate,25; }
2519:2650:2651:5127,{ bonus bStr,2; bonus bLuk,9; bonus bCritical,13; bonus bBaseAtk,18; bonus bFlee2,13; }
2519:15147,{ .@r = getequiprefinerycnt(EQI_ARMOR); bonus2 bIgnoreDefRaceRate,RC_DemiHuman,15; bonus2 bIgnoreDefRaceRate,RC_Demon,15; bonus2 bIgnoreDefRaceRate,RC_Undead,15; bonus bLuk,3+.@r; bonus bCritical,10+.@r; }
2524:15147,{ .@r = getequiprefinerycnt(EQI_ARMOR); bonus2 bIgnoreDefRaceRate,RC_DemiHuman,15; bonus2 bIgnoreDefRaceRate,RC_Demon,15; bonus2 bIgnoreDefRaceRate,RC_Undead,15; bonus bMaxHPrate,10+.@r; bonus bAtkRate,2+.@r; }
2527:5467:13001,{ bonus2 bAddRace,RC_Dragon,25; }
2527:5467:13030,{ bonus2 bAddRace,RC_Dragon,25; }
2527:13001,{ bonus2 bAddRace,RC_Dragon,5; }
2527:13030,{ bonus2 bAddRace,RC_Dragon,5; }
2597:28342,{ bonus bCritAtkRate,5; bonus bCritical,10; .@r = getequiprefinerycnt(EQI_GARMENT); if (.@r > 7) bonus bCritAtkRate,4; else if (.@r > 5) bonus bCritAtkRate,3; }
2598:2158,{ .@r = getequiprefinerycnt(EQI_GARMENT); bonus2 bSubRace,RC_Undead,.@r; bonus2 bSubRace,RC_DemiHuman,.@r; }
2607:2677,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2607:2711,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2607:2786,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2608:2677,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2608:2711,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2608:2786,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2620:2746,{ bonus2 bAddSize,Size_Medium,8; bonus bAspdRate,getequiprefinerycnt(EQI_HAND_R)/2; }
2620:2747,{ bonus2 bAddSize,Size_Large,8; bonus bHit,getequiprefinerycnt(EQI_HAND_R)/2; bonus bVariableCastrate,-getequiprefinerycnt(EQI_HAND_R)/2; }
2626:2677,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2626:2711,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2626:2786,{ bonus2 bSkillAtk,""AL_HEAL"",50; bonus2 bSkillAtk,""PR_MAGNUS"",30; bonus bSPrecovRate,9; }
2659:18937,{ bonus bInt,8; bonus bMaxSPrate,5;}
2660:18937,{ bonus bInt,8; bonus bBaseAtk,20;}
2661:18937,{ bonus bInt,8; bonus bFlee,15;}
2662:18937,{ bonus bInt,8; bonus bHit,10;}
2677:28602,{ bonus2 bVariableCastrate,""PR_MAGNUS"",-25; bonus bHealPower,10; bonus bAddItemHealRate,10; autobonus2 ""{ bonus bIgnoreMDefRace,RC_All; }"",getequiprefinerycnt(EQI_HAND_R)*20,2000,BF_SHORT|BF_NORMAL; /* Confirm: Success rate and duration */ }
2678:2679,{ bonus4 bAutoSpell,""MO_EXTREMITYFIST"",1,3,1; bonus3 bAutoSpell,""PR_LEXAETERNA"",1,20; bonus3 bAutoSpell,""AS_SONICBLOW"",5,50; bonus3 bAutoSpell,""MO_INVESTIGATE"",5,20; bonus3 bAutoSpell,""ASC_METEORASSAULT"",2,50; }
2679:2792,{ bonus4 bAutoSpell,""MO_EXTREMITYFIST"",1,3,1; bonus3 bAutoSpell,""PR_LEXAETERNA"",1,20; bonus3 bAutoSpell,""AS_SONICBLOW"",5,50; bonus3 bAutoSpell,""MO_INVESTIGATE"",5,20; bonus3 bAutoSpell,""ASC_METEORASSAULT"",2,50; }
2701:2881,{ bonus bMatkRate,20; }
2702:2874,{ bonus bAspd,1; }
2702:22064,{ if (readparam(bAgi) > 120) bonus bAspd,2; /* Confirm: Bonus value */ }
27013:27012,{ bonus bNoMadoFuel,1; }
27015:27016,{ bonus bCritAtkRate,10; }
27018:27019,{ autobonus ""{ bonus bAspd,5; }"",30,5000; }
2720:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2720:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2720:2774,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2721:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2721:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2721:2774,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2722:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2722:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2722:2774,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2723:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2723:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2724:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2724:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2724:2774,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2725:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2725:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2725:2774,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2726:2727,{ bonus bUseSPrate,-25; }
2733:2772,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2733:2773,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2733:2774,{ bonus2 bAddClass,Class_All,5; bonus bMatkRate,3; bonus bHealPower,5; }
2747:13061,{ bonus bHit,5; bonus bMatk,5; bonus2 bSkillUseSP,""SC_ENERVATION"",20; bonus2 bSkillUseSP,""SC_GROOMY"",20; }
2751:2888,{ bonus bAspdRate,3; bonus bVariableCastrate,-3; }
2777:2778:5479,{ bonus bMaxHP,10*getequiprefinerycnt(EQI_HEAD_TOP); bonus bMaxSP,2*getequiprefinerycnt(EQI_ACC_L); bonus bNoCastCancel,1; bonus bCastrate,15; }
2777:2825:5479,{ bonus bMaxHP,BaseLevel*10; bonus bMaxSP,BaseLevel*2; bonus bHealPower,10; }
2779:2780:5482,{ bonus bMatkRate,10; bonus bInt,5; bonus2 bSubRace,RC_Angel,10; }
2779:2780:5577,{ bonus bMatkRate,10; bonus bInt,5; bonus2 bSubRace,RC_Angel,10; }
2779:2827:5482,{ autobonus ""{ bonus bAspdRate,2; }"",50,10000,0,""{ specialeffect2 EF_POTION_BERSERK; }""; bonus bMaxHP,BaseLevel*15; bonus bMaxSP,(BaseLevel*12)/10; bonus2 bAddClass,Class_All,3; }
2780:2826:5577,{ autobonus ""{ bonus bAspdRate,2; }"",50,10000,0,""{ specialeffect2 EF_POTION_BERSERK; }""; bonus bMaxHP,BaseLevel*15; bonus bMaxSP,(BaseLevel*12)/10; bonus2 bAddClass,Class_All,3; }
2826:2827:5577,{ autobonus ""{ bonus bAspdRate,2; }"",50,10000,0,""{ specialeffect2 EF_POTION_BERSERK; }""; bonus bMaxHP,BaseLevel*15; bonus bMaxSP,(BaseLevel*12)/10; bonus2 bAddClass,Class_All,3; }
2855:5360,{ bonus bCritAtkRate,10; if(getequiprefinerycnt(EQI_HEAD_TOP)>5) bonus bCritical,5; }
2913:2710,{ bonus bBaseAtk,10; }
2913:15040,{ bonus bBaseAtk,2*getequiprefinerycnt(EQI_ARMOR); }
2913:2408,{ bonus bBaseAtk,getequiprefinerycnt(EQI_SHOES); }
2913:5104,{ bonus bBaseAtk,10; }
2950:15067:20709:22012,{ bonus2 bExpAddRace,RC_All,30; }
2957:2958,{ bonus4 bAutoSpell,""MO_EXTREMITYFIST"",1,3,1; bonus3 bAutoSpell,""PR_LEXAETERNA"",1,20; bonus3 bAutoSpell,""AS_SONICBLOW"",5,50; bonus3 bAutoSpell,""MO_INVESTIGATE"",5,20; bonus3 bAutoSpell,""ASC_METEORASSAULT"",2,50; }
2959:18756,{ .@r = 3+(3*getequiprefinerycnt(EQI_HEAD_TOP)); autobonus ""{ bonus2 bSPLossRate,5,1000; bonus bBaseAtk,30; }"",.@r,5000,BF_WEAPON,""{ transform 1785,5000; specialeffect2 EF_POTION_BERSERK; }""; autobonus2 ""{ bonus2 bSPLossRate,5,1000; bonus bBaseAtk,30; }"",.@r,5000,BF_WEAPON,""{ transform 1785,5000; specialeffect2 EF_POTION_BERSERK; }""; }
2963:15073,{ bonus bAspdRate,5; }
2963:15074,{ bonus bDelayrate,-5; bonus2 bSubRace,RC_DemiHuman,5; bonus2 bSubRace,RC_Player,5; }
2964:15073,{ bonus bDelayrate,-5; bonus2 bSubRace,RC_DemiHuman,5; bonus2 bSubRace,RC_Player,5; }
2964:15074,{ bonus bVariableCastrate,-5; }
2966:2967:13092,{ bonus bBaseAtk,-(getequiprefinerycnt(EQI_HAND_R)*10); }
2966:2967:16026,{ bonus bBaseAtk,-(getequiprefinerycnt(EQI_HAND_R)*5); }
2966:2967:18821,{ bonus2 bAddClass,Class_All, -(getequiprefinerycnt(EQI_HEAD_TOP)/2); }
2966:2968,{ bonus bAtkRate,4; bonus bMatkRate,4; }
2966:2969,{ bonus bAtkRate,4; bonus bMatkRate,4; }
2966:13092,{ bonus bBaseAtk,10*getequiprefinerycnt( (getequipid(EQI_HAND_R) == 13092) ? EQI_HAND_R : EQI_HAND_L ); }
2966:16026,{ bonus bBaseAtk,getequiprefinerycnt(EQI_HAND_R)*5; }
2966:18821,{ bonus2 bAddClass,Class_All,getequiprefinerycnt(EQI_HEAD_TOP)/2; }
2967:2968,{ bonus bAtkRate,4; bonus bMatkRate,4; }
2967:2969,{ bonus bAtkRate,4; bonus bMatkRate,4; }
2967:13092,{ bonus bBaseAtk,getequiprefinerycnt(EQI_HAND_R)*10; }
2967:16026,{ bonus bBaseAtk,getequiprefinerycnt(EQI_HAND_R)*5; }
2967:18821,{ bonus2 bAddClass,Class_All,getequiprefinerycnt(EQI_HEAD_TOP)/2; }
2968:2969:13092,{ bonus bBaseAtk,-(getequiprefinerycnt(EQI_HAND_R)*10); }
2968:2969:18821,{ bonus bMagicAtkDef, getequiprefinerycnt(EQI_HEAD_TOP)/2; }
2968:13092,{ bonus bMatk,10*getequiprefinerycnt( (getequipid(EQI_HAND_R) == 13092) ? EQI_HAND_R : EQI_HAND_L ); }
2968:18821,{ bonus bMatkRate,getequiprefinerycnt(EQI_HEAD_TOP)/2; }
2969:13092,{ bonus bBaseAtk,getequiprefinerycnt(EQI_HAND_R)*10; }
2969:18821,{ bonus bMatkRate,getequiprefinerycnt(EQI_HEAD_TOP)/2; }
2979:18853,{ bonus bMaxHPrate,15; bonus2 bSubEle,Ele_Fire,10; bonus bLongAtkRate,30; }
2979:18852,{ bonus bMaxHPrate,15; bonus2 bSubEle,Ele_Fire,10; bonus bLongAtkRate,30; }
2983:4218,{ bonus bVit,-3; bonus bHPrecovRate,-20; bonus bMaxHP,1000; }
2983:4218:4269,{ bonus bVit,-3; bonus bHPrecovRate,-20; bonus bMaxHP,1000; bonus bInt,-3; bonus bSPrecovRate,-20; bonus bMaxSP,150; }
2983:4269,{ bonus bInt,-3; bonus bSPrecovRate,-20; bonus bMaxSP,150; }
2984:4151:4164:4204:4221:4235:4239:4245:4249:4267:4275,{ bonus2 bExpAddRace,RC_All,2; }
2986:2987:18872,{ bonus2 bAddMonsterDropItem,22559,50; }
2986:18872,{ bonus bBaseAtk,BaseLevel/4; }
2987:18872,{ bonus bMatk,BaseLevel/4; }
2990:2991,{ bonus bAllStats,5; bonus5 bAutoSpellWhenHit,""SC_MAELSTROM"",1,100,BF_MAGIC,0; }
2997:2999,{ bonus bAtkRate,10; bonus bMatkRate,10; }
4001:4197,{ bonus bFlee,18; }
4006:4266,{ bonus bFlee,18; }
4009:4179,{ bonus bFlee,18; }
4014:4306,{ bonus bFlee,18; }
4015:5967,{ bonus2 bSubEle,Ele_All,10; }
4021:4211,{ bonus bFlee,18; }
4025:4222,{ bonus2 bAddEffWhenHit,Eff_Sleep,600; }
4028:4296,{ bonus bStr,3; }
4029:4183,{ bonus bFlee,18; }
4031:4161,{ bonus bDef,3; bonus bVit,3; }
4036:4186:4233:4281:4343,{ bonus bStr,4; bonus bMaxHPrate,7; bonus bMaxSPrate,7; bonus2 bSkillAtk,""MC_MAMMONITE"",20; bonus bSPDrainValue,1; if(BaseJob==Job_Alchemist) { bonus3 bAutoSpell,""BS_ADRENALINE"",1,10; bonus2 bAddMonsterDropItem,7139,3; bonus2 bAddMonsterDropItem,905,10; } }
4039:4210:4230:4257:4348,{ bonus bStr,6; bonus bAgi,4; bonus2 bSkillAtk,""RG_BACKSTAP"",10; if(getskilllv(""RG_STRIPARMOR"")==5) bonus3 bAutoSpell,""RG_STRIPARMOR"",5,50; if(BaseJob==Job_Rogue) { bonus bUseSPrate,-20; bonus3 bAutoSpell,""RG_INTIMIDATE"",1,-20; } }
4045:28910,{ bonus bLongAtkDef,-35; }
4072:21013,{ bonus2 bSubSize,Size_All,15; }
4074:4162,{ bonus2 bAddEffWhenHit,Eff_Blind,600; }
4090:4212:4328,{ bonus bAllStats,1; }
4106:4248,{ bonus bPerfectHitAddRate,20; }
4127:4166,{ bonus2 bAddEffWhenHit,Eff_Curse,600; }
4139:18619,{ bonus3 bAutoSpell,""RG_SNATCHER"",5,20; bonus bDex,2; bonus bAgi,1; bonus bInt,-1; }
4152:5967,{ bonus2 bAddItemGroupHealRate,IG_Juice,1000; }
4153:4247:4273,{ bonus3 bAddMonsterDropItem,544,RC_Fish,3000; bonus2 bAddEle,Ele_Water,30; }
4153:18554,{ bonus2 bAddEle,Ele_Water,10; }
4163:5967,{ bonus bAspdRate,3; bonus bAspd,1; bonus bNoWeaponDamage,5; if (getequiprefinerycnt(EQI_HAND_R) > 10 && getiteminfo(getequipid(EQI_HAND_R),11) == 11) bonus bAspd,1; }
4168:4169,{ bonus bMaxHPrate,20; bonus bMaxSPrate,20; bonus bVariableCastrate,-10; }
4169:4488,{ if(getequiprefinerycnt(EQI_SHOES) >= 15) { bonus bMaxHPrate,15; bonus bMaxSPrate,15; } else { bonus bMaxHPrate,10; bonus bMaxSPrate,10; } }
4169:4488,{ if(getequiprefinerycnt(EQI_SHOES) >= 15) { bonus bMaxHPrate,15; bonus bMaxSPrate,15; } else { bonus bMaxHPrate,10; bonus bMaxSPrate,10; } }
4172:4210:4230:4257:4272,{ bonus bAgi,5; bonus bStr,5; bonus bAspdRate,5; bonus bSpeedRate,25; bonus bSPDrainValue,1; if(BaseClass==Job_Thief) bonus bNoGemStone,0; }
4178:4199:4234:4252:4297,{ bonus bAgi,5; bonus bDex,3; bonus bLongAtkRate,20; bonus bPerfectHitAddRate,20; if(BaseClass==Job_Archer) { bonus2 bExpAddRace,RC_Brute,5; bonus2 bComaRace,RC_Brute,100; } }
4178:4234:4252:4297:4381,{ bonus bDex,5; bonus2 bSkillAtk,""CG_ARROWVULCAN"",5; bonus2 bSkillAtk,""DC_THROWARROW"",10; bonus2 bSkillAtk,""BA_MUSICALSTRIKE"",10; if(BaseJob==Job_Bard||BaseJob==Job_Dancer) bonus3 bAutoSpellWhenHit,""CG_TAROTCARD"",2,50; }
4185:4217:4280:4293:4312,{ bonus bVit,10; bonus bVariableCastrate,-10; bonus bUseSPRate,-10; if(BaseClass==Job_Acolyte) { bonus2 bExpAddRace,RC_Undead,5; bonus2 bExpAddRace,RC_Demon,5; bonus2 bSubRace,RC_Undead,30; bonus2 bSubRace,RC_Demon,30; } }
4185:4293:4312:4332,{ bonus bStr,3; bonus bMaxSP,80; bonus bBaseAtk,25; bonus3 bAutoSpell,""AL_CRUCIS"",5,10; bonus2 bSkillAtk,""MO_EXTREMITYFIST"",10; if(BaseJob==Job_Monk) { bonus bUseSPrate,-10; bonus bNoCastCancel,0; } }
4186:4206:4233:4281:4321,{ bonus bLuk,10; bonus bSPDrainValue,2; bonus2 bSkillAtk,42,20; if(BaseClass==Job_Merchant) { bonus2 bAddMonsterDropItem,617,5; bonus bMagicDamageReturn,20; } }
4191:4208:4258:4309:4325:4327,{ bonus bMaxHP,500; bonus bDef,5; bonus bMdef,5; bonus2 bSkillAtk,14,10; bonus2 bSkillAtk,19,10; bonus2 bSkillAtk,20,10; if(BaseClass==Job_Mage) { bonus bMatkRate,3; bonus bVariableCastrate,-15; } }
4193:4294,{ bonus bMaxHP,300; bonus bMaxSP,60; }
4207:18865,{ bonus2 bAddSize,Size_All,5; bonus2 bMagicAddSize,Size_All,5; }
4208:4258:4325:4327:4382,{ bonus bInt,3; bonus2 bSkillAtk,""WZ_HEAVENDRIVE"",10; bonus2 bSkillAtk,""MG_THUNDERSTORM"",10; if(BaseJob==Job_Sage) { bonus bMagicDamageReturn,20; bonus2 bAddMonsterDropItem,716,100; bonus2 bAddMonsterDropItem,715,100; bonus bVariableCastrate,-20; } }
4218:4269,{ bonus bHPrecovRate,30; bonus bSPrecovRate,30; bonus bVit,4; bonus bInt,4; }
4220:4246:4311:4319:4331,{ bonus bStr,10; bonus bMaxHPrate,20; bonus bHPrecovRate,50; bonus3 bAutoSpell,""BS_WEAPONPERFECT"",1,3; bonus2 bAddMonsterDropItem,501,500; if(BaseClass==Job_Swordman) bonus2 bAddItemGroupHealRate,IG_Potion,50; }
4229:4244:4299:4313,{ bonus bDef,3; bonus bMdef,3; }
4237:4238,{ bonus3 bAutoSpell,""MG_LIGHTNINGBOLT"",5,20; }
4247:18554,{ bonus2 bAddEle,Ele_Water,10; }
4250:18865,{ bonus2 bAddSize,Size_All,5; bonus2 bMagicAddSize,Size_All,5; }
4254:18865,{ bonus2 bAddSize,Size_All,5; bonus2 bMagicAddSize,Size_All,5; }
4268:4277,{ bonus bBaseAtk,20; bonus bLuk,3; }
4273:18554,{ bonus2 bAddEle,Ele_Water,10; }
4311:4319:4331:4371,{ bonus bInt,1; bonus bStr,1; bonus bDef,2; bonus bSPrecovRate,10; bonus2 bSkillAtk,""PA_SHIELDCHAIN"",10; bonus2 bSkillAtk,""PA_SACRIFICE"",10; bonus bVariableCastrate,-10; if(BaseJob==Job_Crusader) bonus bDefEle,Ele_Holy; }
4323:4324,{ bonus3 bAutoSpell,""MG_FROSTDIVER"",3,250; }
4435:4436,{ bonus2 bSPGainRace,RC_DemiHuman,2; bonus2 bSPGainRace,RC_Player,2; }
4335:21012,{ bonus5 bAutoSpell,""WZ_EARTHSPIKE"",5,10+(getequiprefinerycnt(EQI_HAND_R)*10),BF_NORMAL|BF_WEAPON,1; /* Confirm: Success rate */ }
4345:21012,{ bonus5 bAutoSpell,""MG_LIGHTNINGBOLT"",5,10+(getequiprefinerycnt(EQI_HAND_R)*10),BF_NORMAL|BF_WEAPON,1; /* Confirm: Success rate */ }
4350:21012,{ bonus5 bAutoSpell,""MG_COLDBOLT"",5,10+(getequiprefinerycnt(EQI_HAND_R)*10),BF_NORMAL|BF_WEAPON,1; /* Confirm: Success rate */ }
4380:21012,{ bonus5 bAutoSpell,""MG_FIREBOLT"",5,10+(getequiprefinerycnt(EQI_HAND_R)*10),BF_NORMAL|BF_WEAPON,1; /* Confirm: Success rate */ }
4388:21012,{ bonus5 bAutoSpell,""MG_SOULSTRIKE"",5,10+(getequiprefinerycnt(EQI_HAND_R)*10),BF_NORMAL|BF_WEAPON,1; /* Confirm: Success rate */ }
4545:18730,{ bonus bMatk,5; bonus bBaseAtk,5; }
4605:4606,{ bonus2 bSubEle,Ele_Neutral,20; bonus bFlee,20; bonus2 bHPLossRate,100,6000; bonus2 bSPLossRate,6,6000; }
4608:4609,{ bonus2 bAddSize,Size_Medium,15; bonus2 bAddSize,Size_Large,15; bonus2 bSubSize,Size_Medium,5; bonus2 bSubSize,Size_Large,5; }
4626:4628,{ bonus2 bIgnoreMdefRaceRate,RC_Demon,50; }
4627:4628,{ bonus2 bIgnoreDefRaceRate,RC_Formless,50; bonus2 bIgnoreDefRaceRate,RC_Demon,50;}
4629:4630,{ bonus3 bAutoSpell,""NPC_WIDECURSE"",2,2; bonus2 bSubEle,Ele_Neutral,5; }
4631:4632,{ bonus5 bAutoSpell,""WZ_VERMILION"",1,1,BF_WEAPON,0; }
4635:4636,{ bonus2 bResEff,Eff_Burning,10000; }
4642:4646,{ bonus bAtkRate,10; bonus bMatkRate,10; }
4643:4646,{ bonus bAtkRate,10; bonus bMatkRate,10; }
4644:4646,{ bonus bAtkRate,10; bonus bMatkRate,10; }
4645:4646,{ bonus bAtkRate,10; bonus bMatkRate,10; }
4653:4654,{ bonus2 bSubRace,RC_Brute,5; bonus2 bSubRace,RC_Undead,5; bonus2 bIgnoreMdefRaceRate,RC_Brute,50; bonus2 bIgnoreMdefRaceRate,RC_Undead,50; }
4653:4655,{ bonus2 bSubRace,RC_Brute,5; bonus2 bSubRace,RC_Undead,5; bonus2 bIgnoreDefRaceRate,RC_Brute,50; bonus2 bIgnoreDefRaceRate,RC_Undead,50; }
4656:4657,{ /* Unofficial chance */ bonus3 bAutoSpellWhenHit,""NPC_WIDESLEEP"",2,10; bonus2 bSubEle,Ele_Neutral,5; }
4671:4692,{ autobonus ""{ active_transform 3242,6000; bonus bMatk,100; }"",30,6000,BF_MAGIC; }
4672:4693,{ autobonus ""{ active_transform 3243,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4673:4696,{ autobonus ""{ active_transform 3245,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4674:4684,{ autobonus ""{ active_transform 3220,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4675:4685,{ autobonus ""{ active_transform 3221,6000; bonus bMatk,100; }"",30,6000,BF_MAGIC; }
4676:4687,{ autobonus ""{ active_transform 3222,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4677:4688,{ autobonus ""{ active_transform 3223,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4678:4686,{ autobonus ""{ active_transform 3224,6000; bonus bMatk,100; }"",30,6000,BF_MAGIC; }
4679:4689,{ autobonus ""{ active_transform 3225,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4680:4690,{ autobonus ""{ active_transform 3240,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4681:4691,{ autobonus ""{ active_transform 3241,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4682:4694,{ autobonus ""{ active_transform 3244,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
4683:4695,{ autobonus ""{ active_transform 3246,6000; bonus bAtk,100; }"",30,6000,BF_WEAPON; }
5040:5442,{ bonus bAspdRate,3; bonus bVariableCastrate,3; }
4697:27012,{ bonus bNoMadoFuel,1; }
4699:27012,{ bonus bNoMadoFuel,1; }
5040:18673,{ bonus bSPrecovRate,3; }
5041:18538,{ bonus2 bSubRace,RC_Angel,9; }
5043:18656,{ bonus bFlee,10; bonus2 bAddEff,Eff_Stun,1000; }
5048:18538,{ bonus2 bSubRace,RC_Demon,9; }
5068:5653,{ bonus bStr,1; bonus bAtkRate,5; }
5070:18576,{ bonus2 bSkillAtk,""MO_TRIPLEATTACK"",5; bonus2 bSkillAtk,""MO_COMBOFINISH"",5; bonus2 bSkillAtk,""CH_TIGERFIST"",3; bonus2 bSkillAtk,""CH_CHAINCRUSH"",3; if( getequiprefinerycnt(EQI_HEAD_TOP) < 10 ) bonus bUseSPrate, getequiprefinerycnt(EQI_HEAD_TOP); }
5073:5574,{ bonus bDex,2; bonus bDef,2; }
5074:5653,{ bonus bStr,1; bonus bAspdRate,2; }
5074:18827,{ autobonus ""{ transform 1765,5000; bonus2 bHPLossRate,30,1000; bonus bHit,-10; bonus bSplashRange,1; }"",10+getequiprefinerycnt(EQI_HEAD_TOP),5000,BF_WEAPON,""{ specialeffect2 EF_NONE; }""; }
5086:18527,{ bonus2 bAddItemHealRate,12192,200; }
5086:18656,{ bonus2 bAddItemHealRate,538,100; bonus2 bAddItemHealRate,12192,100; bonus2 bAddMonsterDropItem,538,400; bonus2 bAddMonsterDropItem,12192,400; }
5170:19024,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); if (.@r >= 7) bonus bAspdRate,5; if (.@r >= 9) bonus bMaxHPRate,5; }
5176:18527,{ bonus bAspdRate,5; }
5176:18656,{ bonus bAspd,1; autobonus ""{ bonus bBaseAtk,50; }"",20,10000,0,""{ specialeffect2 EF_POTION_BERSERK; }""; }
5184:5657,{ bonus bLongAtkRate,getrefine(); }
5206:5768,{ bonus bDex,1; if(getequiprefinerycnt(EQI_HEAD_TOP) > 4) bonus bDelayRate,4-getequiprefinerycnt(EQI_HEAD_TOP); }
5358:5653,{ bonus bAgi,1; bonus bFlee,3; }
5359:5657,{ bonus bLongAtkRate,getequiprefinerycnt(EQI_HEAD_TOP); }
5391:5766,{ bonus bMaxHP,100; .@r = getrefine(); if(.@r>=7) bonus bMaxHP,100; if(.@r>=9) bonus bMaxHP,200; }
5401:5653,{ bonus bInt,1; bonus bMatkRate,2; }
5403:18529,{ bonus3 bAutoSpell,""BS_GREED"",1,50; }
5470:5653,{ bonus bDex,1; bonus bLongAtkRate,3; }
5475:18656,{ bonus bBaseAtk,30; bonus bMatk,30; bonus2 bAddMonsterDropItem,529,400; bonus2 bAddMonsterDropItem,530,400; bonus2 bAddMonsterDropItem,538,400; bonus2 bAddMonsterDropItem,12192,400;}
5498:5521,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); if(.@r>=7) bonus bCritAtkRate,10; if(.@r>=9) bonus bAspd,1; }
5548:5766,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP); bonus bBaseAtk,min(.@r,10); bonus bMatk,min(.@r,10); }
5917:1525,{ bonus bLongAtkDef,10; }
5920:18542,{ bonus bHealPower,2*getequiprefinerycnt(EQI_HEAD_TOP); }
9024:18832,{ bonus3 bAutoSpell,""BS_ADRENALINE"",2,(GetPetRelationship >= 3)?15:10; }
13027:15044,{ .@r = max(getequiprefinerycnt(EQI_ARMOR),1); bonus3 bAddMonsterDropItem,929,RC_DemiHuman,70*.@r; bonus3 bAddMonsterDropItem,970,RC_DemiHuman,50*.@r; bonus3 bAddMonsterDropItem,929,RC_Player,70*.@r; bonus3 bAddMonsterDropItem,970,RC_Player,50*.@r; bonus3 bAddMonsterDropItem,929,RC_Brute,70*.@r; bonus3 bAddMonsterDropItem,970,RC_Brute,50*.@r; }
13034:13035,{ bonus bMaxSP,20; bonus bMaxHPRate,5; bonus bHit,10; bonus2 bAddSize,Size_Large,30; autobonus ""{ bonus bAspdRate,100; }"",1,7000,BF_WEAPON,""{ specialeffect2 EF_POTION_BERSERK; }""; }
15041:18659,{ bonus bInt,3; bonus bStr,3; bonus bMdef,10; bonus bDefEle,Ele_Fire; bonus2 bAddEle,Ele_Earth,10; }
15068:20710,{ bonus bAgi,5; bonus bFlee,10; }
15088:18816:18818,{ bonus bMatk,BaseLevel/3; bonus2 bExpAddClass,Class_All,5; }
15088:18817:18819,{ bonus bBaseAtk,BaseLevel/3; bonus2 bExpAddClass,Class_All,5; }
15090:18820:20721:22033,{ bonus2 bSubEle,Ele_Neutral,15; bonus3 bAutoSpellWhenHit,""WL_DRAINLIFE"",3,1; }
15091:18820:20721:22033,{ bonus2 bSubEle,Ele_Neutral,15; bonus bMaxHPrate,25; bonus bMaxSPrate,25; bonus bMatkRate,10; }
15116:20743:22046,{ bonus bMaxHPrate,25; bonus bMaxSPrate,25; bonus bSpeedAddRate,10; }
15126:20788:22083,{ bonus bMaxHP,2000; bonus bNoCastCancel,1; bonus bFixedCastrate,-15-(getequiprefinerycnt(EQI_ARMOR)+getequiprefinerycnt(EQI_GARMENT)+getequiprefinerycnt(EQI_SHOES)); }
15126:20788:22083:28382:28416,{ bonus bMaxHPrate,10; bonus bMaxSPrate,10; bonus2 bSkillAtk,""SU_CN_METEOR"",100; }
15126:20788:22083:28380:28419,{ bonus bMaxHPrate,20; bonus bMaxSPrate,3; bonus2 bSkillAtk,""SU_LUNATICCARROTBEAT"",100; }
15126:20788:22083:28381:28413,{ bonus bMaxHPrate,15; bonus bMaxSPrate,5; bonus bHealPower,10; skill ""AL_HEAL"",5,1; }
15129:20789:22084,{ bonus bMaxHP,3000; bonus bNoCastCancel,1; bonus bFixedCastrate,-20-(getequiprefinerycnt(EQI_ARMOR)+getequiprefinerycnt(EQI_GARMENT)+getequiprefinerycnt(EQI_SHOES)); }
15129:20789:22084:28382:28417,{ bonus bMaxHPrate,15; bonus bMaxSPrate,15; bonus2 bSkillAtk,""SU_CN_METEOR"",150; }
15129:20789:22084:28380:28420,{ bonus bMaxHPrate,25; bonus bMaxSPrate,6; bonus2 bSkillAtk,""SU_LUNATICCARROTBEAT"",150; }
15129:20789:22084:28381:28414,{ bonus bMaxHPrate,20; bonus bMaxSPrate,10; bonus bHealPower,20; skill ""AL_HEAL"",7,1; }
15138:19026,{ bonus2 bSubRace,RC_Fish,(10+getequiprefinerycnt(EQI_ARMOR)); }
15138:19026:20756:22059,{ bonus bMaxHP,1000; bonus bMaxSP,100; bonus2 bExpAddRace,RC_Fish,20; bonus2 bMagicAddRace,RC_Fish,50; bonus2 bSubEle,Ele_Water,50; }
15156:20790:22085,{ bonus bMaxHP,4000; bonus bNoCastCancel,1; bonus bFixedCastrate,-25-(getequiprefinerycnt(EQI_ARMOR)+getequiprefinerycnt(EQI_GARMENT)+getequiprefinerycnt(EQI_SHOES)); }
15156:20790:22085:28382:28418,{ bonus bMaxHPrate,20; bonus bMaxSPrate,20; bonus2 bSkillAtk,""SU_CN_METEOR"",200; }
15156:20790:22085:28380:28421,{ bonus bMaxHPrate,30; bonus bMaxSPrate,9; bonus2 bSkillAtk,""SU_LUNATICCARROTBEAT"",200; }
15156:20790:22085:28381:28415,{ bonus bMaxHPrate,25; bonus bMaxSPrate,15; bonus bHealPower,30; skill ""AL_HEAL"",9,1; }
15181:28443:28444,{ bonus bAtk,20; bonus2 bSubEle,Ele_All,2; bonus2 bSubEle,Ele_Neutral,-2; }
15182:28445:28446,{ bonus bAtk,40; bonus2 bSubEle,Ele_All,4; bonus2 bSubEle,Ele_Neutral,-4; }
15183:28447:28448,{ bonus bAtk,40; bonus2 bSubEle,Ele_All,4; bonus2 bSubEle,Ele_Neutral,-4; bonus2 bExpAddClass,Class_All,2; }
15184:28449:28450,{ bonus bAtk,50; bonus2 bSubEle,Ele_All,5; bonus2 bSubEle,Ele_Neutral,-5; bonus2 bExpAddClass,Class_All,2; }
15185:28451:28452,{ bonus bAtk,50; bonus2 bSubEle,Ele_All,5; bonus2 bSubEle,Ele_Neutral,-5; bonus2 bExpAddClass,Class_All,2; bonus bNoCastCancel,1; }
15181:28453:28454,{ bonus bMatk,20; bonus2 bSubEle,Ele_All,2; bonus2 bSubEle,Ele_Neutral,-2; }
15182:28455:28456,{ bonus bMatk,40; bonus2 bSubEle,Ele_All,4; bonus2 bSubEle,Ele_Neutral,-4; }
15183:28457:28458,{ bonus bMatk,40; bonus2 bSubEle,Ele_All,4; bonus2 bSubEle,Ele_Neutral,-4; bonus2 bExpAddClass,Class_All,2; }
15184:28459:28460,{ bonus bMatk,50; bonus2 bSubEle,Ele_All,5; bonus2 bSubEle,Ele_Neutral,-5; bonus2 bExpAddClass,Class_All,2; }
15185:28461:28462,{ bonus bMatk,50; bonus2 bSubEle,Ele_All,5; bonus2 bSubEle,Ele_Neutral,-5; bonus2 bExpAddClass,Class_All,2; bonus bNoCastCancel,1; }
15181:28463:28464,{ bonus bAtk,20; bonus2 bSubEle,Ele_All,2; bonus2 bSubEle,Ele_Neutral,-2; }
15182:28465:28466,{ bonus bAtk,40; bonus2 bSubEle,Ele_All,4; bonus2 bSubEle,Ele_Neutral,-4; }
15183:28467:28468,{ bonus bAtk,40; bonus2 bSubEle,Ele_All,4; bonus2 bSubEle,Ele_Neutral,-4; bonus2 bExpAddClass,Class_All,2; }
15184:28469:28470,{ bonus bAtk,50; bonus2 bSubEle,Ele_All,5; bonus2 bSubEle,Ele_Neutral,-5; bonus2 bExpAddClass,Class_All,2; }
15185:28471:28472,{ bonus bAtk,50; bonus2 bSubEle,Ele_All,5; bonus2 bSubEle,Ele_Neutral,-5; bonus2 bExpAddClass,Class_All,2; bonus bNoCastCancel,1; }
18137:1752,{ bonus bLongAtkRate,25; }
18137:1752:19048,{ bonus bLongAtkRate,20; bonus2 bSubEle,Ele_Fire,-10; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
18137:19019,{ bonus bLongAtkRate,45; }
18138:1754,{ bonus bLongAtkRate,25; }
18138:1754:19048,{ bonus bLongAtkRate,20; bonus2 bAddEff,Eff_Freeze,-1000; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
18138:19019,{ bonus bLongAtkRate,45; }
18139:1756,{ bonus bLongAtkRate,25; bonus2 bAddEff,Eff_Stone,1000; }
18139:1756:19048,{ bonus bLongAtkRate,20; bonus2 bAddEff,Eff_Stone,-1000; if (getequiprefinerycnt(EQI_HAND_R) >= 10) bonus bAspd,1; }
18139:19019,{ bonus bLongAtkRate,45; }
18140:1755,{ bonus bLongAtkRate,25; bonus3 bAutoSpell,""NJ_HUUJIN"",5,(readparam(bInt)>39) ? 300 : 100; }
18140:1755:19048,{ bonus bLongAtkRate,20; bonus3 bAutoSpell,""NJ_HUUJIN"",5,(readparam(bInt)>39) ? -300 : -100;; if (getequiprefinerycnt(EQI_HAND_R) >= 10)  bonus bAspd,1; }
18140:19019,{ bonus bLongAtkRate,45; }
18507:18539,{ bonus bUseSPrate,-3; }
18559:18560,{ bonus bCritAtkRate,5; }
18563:18564,{ bonus bFixedCastrate,-10; }
18776:20710,{ bonus bBaseAtk,10; }
18776:22015,{ bonus bMatk,20; }
18823:28372,{ bonus2 bSkillAtk,""CR_GRANDCROSS"",BaseLevel; bonus2 bVariableCastrate,""CR_GRANDCROSS"",-BaseLevel*2; bonus2 bSkillAtk,""CR_GRANDCROSS"",BaseLevel/30; bonus2 bSkillUseSP,""CR_GRANDCROSS"",-(BaseLevel/30)*10; }
18867:1720,{ bonus bLongAtkRate,3+(getequiprefinerycnt(EQI_HAND_R) > 6 ? 5:0); }
18937:28302,{ bonus bInt,8; bonus bMaxSPrate,5;}
18937:28303,{ bonus bInt,8; bonus bBaseAtk,20;}
18937:28304,{ bonus bInt,8; bonus bFlee,15;}
18937:28305,{ bonus bInt,8; bonus bHit,10;}
18997:28326:28327,{ bonus bSpeedRate,10; bonus bBaseAtk,50; bonus bMatk,50; if(getequiprefinerycnt(EQI_HEAD_TOP)>=9){ bonus bMaxHPrate,10; bonus bMaxSPrate,50; } }
19026:20756,{ .@r = getequiprefinerycnt(EQI_GARMENT); bonus2 bSPGainRace,RC_Fish,10; bonus3 bAddMonsterDropItem,551,RC_Fish,(5+.@r); bonus2 bAddItemHealRate,551,5; bonus bHPrecovRate,(5+.@r); }
19026:22059,{ bonus2 bCriticalAddRace,RC_Fish,(10+getequiprefinerycnt(EQI_SHOES)); }
19038:19039,{ .@r = getequiprefinerycnt(EQI_HEAD_TOP)+getequiprefinerycnt(EQI_HEAD_MID); if((.@r==7)||(.@r==8)){ bonus bCritical,12; bonus bHit,12; } if(.@r>=9){ bonus bMaxHP,1200; bonus bMaxSP,120; } }
19117:22101,{ bonus2 bDropAddRace,RC_All,5; bonus2 bExpAddRace,RC_All,5; if(getequiprefinerycnt(EQI_SHOES) >= 12) { bonus bFixedCast,-400; } }
19118:22101,{ bonus2 bDropAddRace,RC_All,4; bonus2 bExpAddRace,RC_All,4; if(getequiprefinerycnt(EQI_SHOES) >= 12) { bonus bFixedCast,-400; } }
20135:20136,{ bonus bAllStats,12; }
20717:22000,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22001,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22002,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22003,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22004,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22005,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22006,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22007,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22008,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22009,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22010,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20717:22011,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22000,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22001,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22002,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22003,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22004,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22005,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22006,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22007,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22008,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22009,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22010,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20718:22011,{ bonus bMaxHPRate,15; bonus bMaxSPRate,5; }
20797:2339,{ bonus bInt,15; bonus bMaxHPrate,5; bonus bMaxSPrate,5; if (getequiprefinerycnt(EQI_ARMOR) > 6) bonus bNoCastCancel,1; }
20797:4174,{ bonus2 bSubEle,Ele_All,50; bonus2 bSubEle,Ele_Neutral,-50; }
22069:2195,{ bonus2 bSubEle,Ele_Neutral,5; bonus2 bAddEle,Ele_Neutral,getequiprefinerycnt(EQI_HAND_L); }
22069:20753,{ bonus2 bAddEle,Ele_Neutral,5; .@r = getequiprefinerycnt(EQI_GARMENT); bonus bMaxHPrate,.@r; bonus bMaxSPrate,.@r; }
22101:29148,{ bonus bMaxHPRate,5; bonus bMaxSPRate,5; .@r = getequiprefinerycnt(EQI_SHOES); if(.@r >= 7) { bonus bAtkRate,2; } if(.@r >= 9) { bonus bAtkRate,3; } if(.@r >= 12) { bonus bDelayrate,-5; } }
22101:29149,{ bonus bMaxHPRate,5; bonus bMaxSPRate,5; .@r = getequiprefinerycnt(EQI_SHOES); if(.@r >= 7) { bonus bMatkRate,2; } if(.@r >= 9) { bonus bMatkRate,3; } if(.@r >= 12) { bonus bDelayrate,-5; } }
22101:29150,{ bonus bMaxHPRate,5; bonus bMaxSPRate,5; .@r = getequiprefinerycnt(EQI_SHOES); if(.@r >= 7) { bonus bAspdRate,5; } if(.@r >= 9) { bonus bAspdRate,5; } if(.@r >= 12) { bonus bDelayrate,-5; } }
22101:29151,{ bonus bMaxHPRate,5; bonus bMaxSPRate,5; .@r = getequiprefinerycnt(EQI_SHOES); if(.@r >= 7) { bonus2 bSubEle,Ele_Neutral,2; } if(.@r >= 9) { bonus2 bSubEle,Ele_Neutral,3; } if(.@r >= 12) { bonus bDelayrate,-5; } }
22101:29152,{ bonus bMaxHPRate,5; bonus bMaxSPRate,5; .@r = getequiprefinerycnt(EQI_SHOES); if(.@r >= 7) { bonus bLongAtkRate,2; } if(.@r >= 9) { bonus bLongAtkRate,3; } if(.@r >= 12) { bonus bDelayrate,-5; } }
22101:29153,{ bonus bMaxHPRate,5; bonus bMaxSPRate,5; .@r = getequiprefinerycnt(EQI_SHOES); if(.@r >= 7) { bonus bCritAtkRate,2; } if(.@r >= 9) { bonus bCritAtkRate,3; } if(.@r >= 12) { bonus bDelayrate,-5; } }
22106:2160,{ .@r = getequiprefinerycnt(EQI_SHOES); if (.@r > 6) { bonus2 bSubSize,Size_Large,2; bonus2 bSubClass,Class_Boss,2; } if (.@r > 8) { bonus2 bSubSize,Size_Large,2; bonus2 bSubClass,Class_Boss,2; } }
22122:28443:28444,{ bonus bAspdRate,4; bonus bHit,4; }
22123:28445:28446,{ bonus bAspdRate,8; bonus bHit,8; }
22124:28447:28448,{ bonus bAspdRate,8; bonus bHit,8; bonus2 bExpAddClass,Class_All,2; }
22125:28449:28450,{ bonus bAspdRate,10; bonus bHit,10; bonus2 bExpAddClass,Class_All,2; }
22126:28451:28452,{ bonus bAspdRate,10; bonus bHit,10; bonus2 bExpAddClass,Class_All,2; bonus bSpeedAddRate,25; }
22122:28453:28454,{ bonus bVariableCastrate,-3; bonus bDelayrate,-3; }
22123:28455:28456,{ bonus bVariableCastrate,-6; bonus bDelayrate,-6; }
22124:28457:28458,{ bonus bVariableCastrate,-6; bonus bDelayrate,-6; bonus2 bExpAddClass,Class_All,2; }
22125:28459:28460,{ bonus bVariableCastrate,-6; bonus bDelayrate,-6; bonus2 bExpAddClass,Class_All,2; }
22126:28461:28462,{ bonus bVariableCastrate,-8; bonus bDelayrate,-8; bonus2 bExpAddClass,Class_All,2; bonus bSpeedAddRate,25; }
22122:28463:28464,{ bonus bAspdRate,4; bonus bHit,4; }
22123:28465:28466,{ bonus bAspdRate,8; bonus bHit,8; }
22124:28467:28468,{ bonus bAspdRate,8; bonus bHit,8; bonus2 bExpAddClass,Class_All,2; }
22125:28469:28470,{ bonus bAspdRate,10; bonus bHit,10; bonus2 bExpAddClass,Class_All,2; }
22126:28471:28472,{ bonus bAspdRate,10; bonus bHit,10; bonus2 bExpAddClass,Class_All,2; bonus bSpeedAddRate,25; }
24012:24013:24014:24015:24016:24017,{ bonus bAllStats,3; }
24018:24019:24020,{ if(getequiprefinerycnt(EQI_SHADOW_ACC_R) + getequiprefinerycnt(EQI_SHADOW_ACC_L) + getequiprefinerycnt(EQI_SHADOW_WEAPON) >= 23) { bonus bAtkRate,1; } }
24021:24022:24023,{ if(getequiprefinerycnt(EQI_SHADOW_ACC_R) + getequiprefinerycnt(EQI_SHADOW_ACC_L) + getequiprefinerycnt(EQI_SHADOW_WEAPON) >= 23) { bonus bMatkRate,1; } }
24025:24028,{ .@r = getequiprefinerycnt(EQI_SHADOW_ARMOR) + getequiprefinerycnt(EQI_SHADOW_SHOES); bonus bMaxHP,.@r; bonus bMaxSP,.@r; if(.@r >= 15) { bonus bMaxHPrate,1; } }
24026:24027,{ .@r = getequiprefinerycnt(EQI_SHADOW_ARMOR) + getequiprefinerycnt(EQI_SHADOW_SHIELD); bonus bDef,.@r; if(.@r >= 15) { bonus2 bSubEle,0,1; } }
24029:24031,{ .@r = getequiprefinerycnt(EQI_SHADOW_ARMOR) + getequiprefinerycnt(EQI_SHADOW_WEAPON); bonus bBaseAtk,.@r; if(.@r >= 15) { bonus bLongAtkRate,1; } }
24030:24032,{ .@r = getequiprefinerycnt(EQI_SHADOW_ARMOR) + getequiprefinerycnt(EQI_SHADOW_WEAPON); bonus bCritical,.@r; bonus bBaseAtk,.@r; if(.@r >= 15) { bonus bCritAtkRate,1; } }
24034:24040,{ bonus bLuk,1; }
24035:24041,{ bonus bStr,1; }
24036:24042,{ bonus bInt,1; }
24037:24043,{ bonus bDex,1; }
24038:24044,{ bonus bVit,1; }
24039:24045,{ bonus bAgi,1; }
24046:24051,{ bonus2 bSubEle,Ele_Neutral,1; if(getequiprefinerycnt(EQI_SHADOW_ACC_R) + getequiprefinerycnt(EQI_SHADOW_ACC_L) >= 15) { bonus2 bSubEle,Ele_Neutral,1; } }
24052:24062,{ bonus2 bExpAddRace,RC_DemiHuman,3; bonus2 bExpAddRace,RC_Player,3; }
24053:24063,{ bonus2 bAddRace,10,5; bonus2 bMagicAddRace,10,5; }
24054:24065,{ bonus2 bExpAddRace,RC_Brute,3; }
24055:24066,{ bonus2 bExpAddRace,RC_Insect,3; }
24056:24067,{ bonus2 bExpAddRace,RC_Fish,3; }
24057:24071,{ bonus2 bExpAddRace,RC_Dragon,3; }
24058:24068,{ bonus2 bExpAddRace,RC_Angel,3; }
24059:24069,{ bonus2 bExpAddRace,RC_Formless,3; }
24060:24070,{ bonus2 bExpAddRace,RC_Undead,3; }
24061:24064,{ bonus2 bExpAddRace,RC_Plant,3; }
24072:24075,{ bonus bMaxHPrate,1; bonus bMaxSPrate,1; }
24073:24076,{ bonus bMaxHPrate,1; bonus bMaxSPrate,1; }
24074:24077,{ bonus bMaxHPrate,1; bonus bMaxSPrate,1; }
24078:24079:24080,{ bonus2 bSPDrainRate,10,1+(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)/10); }
24081:24082:24083,{ bonus2 bHPDrainRate,40,2+(getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_SHOES)/5); }
24084:24085:24086:24087:24088:24089,{ bonus bAllStats,1; .@r = getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L); if (.@r >= 45) { bonus bNoGemStone,1; } bonus bUseSPrate,100-.@r; }
24090:24091:24092,{ bonus bDef,5; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_SHOES) >= 20) bonus2 bResEff,Eff_Stone,10000; }
24090:24093:24094,{ bonus bDef,5; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_SHOES) >= 20) bonus2 bResEff,Eff_Sleep,10000; }
24090:24095:24096,{ bonus bDef,5; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_SHOES) >= 20) bonus2 bResEff,Eff_Silence,10000; }
24090:24097:24098,{ bonus bDef,5; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_SHOES) >= 20) bonus2 bResEff,Eff_Blind,10000; }
24090:24099:24100:24101,{ bonus bDef,4; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_L)+getequiprefinerycnt(EQI_SHADOW_ACC_R) >= 30) bonus2 bResEff,Eff_Freeze,10000; }
24090:24102:24103,{ bonus bDef,5; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ACC_L)+getequiprefinerycnt(EQI_SHADOW_ACC_R) >= 20) bonus2 bResEff,Eff_Bleeding,10000; }
24090:24104:24105:24106,{ bonus bDef,4; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_L)+getequiprefinerycnt(EQI_SHADOW_ACC_R) >= 30) bonus2 bResEff,Eff_Stun,10000; }
24090:24107:24108,{ bonus bDef,5; if (getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ACC_L)+getequiprefinerycnt(EQI_SHADOW_ACC_R) >= 20) bonus2 bResEff,Eff_Curse,10000; }
24048:24109:24110,{ bonus bNoCastCancel2,1; bonus bVariableCastrate,40-(getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)); }
24111:24112:24113,{ bonus bNoCastCancel,1; bonus bUseSPrate,40-getequiprefinerycnt(EQI_SHADOW_SHIELD)-getequiprefinerycnt(EQI_SHADOW_ARMOR)-getequiprefinerycnt(EQI_SHADOW_SHOES); }
24150:24151,{ bonus bAtkRate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L) >= 15) bonus bNoSizeFix,1; }
24152:24153,{ bonus bAtk,getequiprefinerycnt(EQI_SHADOW_WEAPON); if (getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R) >= 15) bonus bUnbreakableWeapon,1; }
24154:24155,{ bonus bDef,getequiprefinerycnt(EQI_SHADOW_ARMOR); if (getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_ACC_L) >= 15) bonus bUnbreakableArmor,1; }
24156:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_DemiHuman; }
24157:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Demon; }
24158:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Brute; }
24159:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Insect; }
24160:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Fish; }
24161:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Dragon; }
24162:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Angel; }
24163:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Formless; }
24164:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Undead; }
24165:24166:24167,{ bonus bBaseAtk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreDefRace,RC_Plant; }
24168:24169:24170,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_DemiHuman; }
24168:24169:24171,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Demon; }
24168:24169:24172,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Brute; }
24168:24169:24173,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Insect; }
24168:24169:24174,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Fish; }
24168:24169:24175,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Dragon; }
24168:24169:24176,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Angel; }
24168:24169:24177,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Formless; }
24168:24169:24178,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Undead; }
24168:24169:24179,{ bonus bMatk,5; if(getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=25) bonus bIgnoreMDefRace,RC_Plant; }
24180:24181:24182:24183:24184:24185,{ .@r = getequiprefinerycnt(EQI_SHADOW_ARMOR)+getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L); bonus bAllStats,1; if(.@r>=45) { bonus bMaxHPrate,(.@r-60); sc_start4 SC_ENDURE,1,10,0,0,1;} }
24186:24198,{ bonus2 bSubEle,Ele_Neutral,2; }
24187:24199,{ bonus2 bSubEle,Ele_Dark,2; }
24188:24200,{ bonus2 bSubEle,Ele_Water,2; }
24189:24201,{ bonus2 bSubEle,Ele_Earth,2; }
24190:24202,{ bonus2 bSubEle,Ele_Fire,2; }
24191:24203,{ bonus2 bSubEle,Ele_Wind,2; }
24192:24204,{ bonus2 bSubEle,Ele_Poison,2; }
24193:24205,{ bonus2 bSubEle,Ele_Holy,2; }
24194:24206,{ bonus2 bSubEle,Ele_Ghost,2; }
24195:24207,{ bonus2 bSubEle,Ele_Undead,2; }
24196:24197,{ bonus bFlee,5; if(getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_ARMOR)>=15) bonus bSpeedAddRate,3; }
24208:24209,{ bonus2 bExpAddRace,RC_All,((getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD))>=15?10:1); }
24210:24211,{ bonus2 bExpAddRace,RC_All,((getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD))>=15?20:10); }
24212:24213,{ bonus2 bExpAddRace,RC_All,((getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD))>=15?10:5); }
24214:24215,{ bonus2 bExpAddRace,RC_All,((getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD))>=15?4:2); }
24217:24218,{ if(getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=15) bonus bAspd,1; }
24223:24225:24226,{ .@r = getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L); if(.@r)>=25 {bonus bAtkRate,2;} else if(.@r)>=20 {bonus bAtkRate,1;} bonus bAtkRate,1; }
24224:24225:24226,{ .@r = getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L); if(.@r)>=25 {bonus bAtkRate,2;} else if(.@r)>=20 {bonus bAtkRate,1;} bonus bAtk2,10; }
24227:24229:24230,{ .@r = getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L); if(.@r)>=25 {bonus bMatkRate,2;} else if(.@r)>=20 {bonus bMatkRate,1;} bonus bMatkRate,1; }
24228:24229:24230,{ .@r = getequiprefinerycnt(EQI_SHADOW_WEAPON)+getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L); if(.@r)>=25 {bonus bMatkRate,2;} else if(.@r)>=20 {bonus bMatkRate,1;} bonus bMatk,10; }
24231:24232,{ bonus bFlee,5; if (getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD)>=15) { bonus bAspd,1; } }
24234:24235,{ bonus bBaseAtk,5; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=15) { bonus2 bAddSize,Size_Large,2; bonus2 bMagicAddSize,Size_Large,2; } }
24236:24237,{ bonus bBaseAtk,5; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=15) { bonus2 bAddSize,Size_Medium,2; bonus2 bMagicAddSize,Size_Medium,2; } }
24238:24239,{ bonus bBaseAtk,5; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=15) { bonus2 bAddSize,Size_Small,2; bonus2 bMagicAddSize,Size_Small,2; } }
24240:24241:24242,{ .@r = getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR); bonus bVariableCastrate,-.@r/5; if(.@r)>=25 { bonus bUseSPrate,-2; } else bonus bUseSPrate,-1; }
24240:24241:24330,{ .@r = getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR); bonus bVariableCastrate,-.@r/5; if(.@r)>=25 { bonus bUseSPrate,-2; } else bonus bUseSPrate,-1; }
24243:24244:24245,{ bonus bDelayrate,(getequiprefinerycnt(EQI_SHADOW_SHOES)+getequiprefinerycnt(EQI_SHADOW_SHIELD)+getequiprefinerycnt(EQI_SHADOW_ARMOR)>=25?-5:-1); }
24246:24250,{ bonus2 bAddRace,RC_All,1; bonus bMaxHPrate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=10) { bonus2 bAddRace,RC_All,2; bonus bMaxHPrate,2; } }
24247:24251,{ bonus2 bAddRace,RC_All,1; bonus bMaxHPrate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=10) { bonus2 bAddRace,RC_All,2; bonus bMaxHPrate,2; } }
24248:24252,{ bonus2 bMagicAddRace,RC_All,1; bonus bMaxSPrate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=10) { bonus2 bMagicAddRace,RC_All,2; bonus bMaxSPrate,2; } }
24249:24254,{ bonus2 bMagicAddRace,RC_All,1; bonus bMaxSPrate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=10) { bonus2 bMagicAddRace,RC_All,2; bonus bMaxSPrate,2; } }
24253:28391,{ bonus2 bAddRace,RC_All,1; bonus bMaxHPrate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=10) { bonus2 bAddRace,RC_All,2; bonus bMaxHPrate,2; } }
24255:28392,{ bonus2 bAddRace,RC_All,1; bonus bMaxHPrate,1; if (getequiprefinerycnt(EQI_SHADOW_ACC_R)+getequiprefinerycnt(EQI_SHADOW_ACC_L)>=10) { bonus2 bAddRace,RC_All,2; bonus bMaxHPrate,2; } }
28315:28317,{ bonus2 bAddClass,Class_All,4; bonus bMatkRate,4; }
28316:28318,{ bonus2 bAddClass,Class_All,4; bonus bMatkRate,4; }
28326:28327,{ bonus bInt,8; bonus bStr,8; }
28358:18521,{ skill ""AS_CLOAKING"",1; }
28499:28920,{ bonus bFlee2,10; }
28906:2998,{ bonus bLongAtkRate,10; }
28907:2998,{ bonus bSpeedRate,25; }
28908:2998,{ bonus bDelayrate,-10; }
28909:2998,{ bonus bUseSPrate,-10; bonus bMaxSPrate,10; }
"
DfiCBmZ7,Before,MikeMoulder,C#,Tuesday 5th of September 2023 02:49:27 PM CDT,"using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using System.Security.Cryptography;

public class GameManager : MonoBehaviour
{
    [Header(""UI Panels"")]
    [SerializeField]private GameObject m_GameOverTab;
    [SerializeField]private GameObject m_LevelPassedTab;
    [SerializeField]private GameObject m_PausedTab;
    [SerializeField]private List<GameObject> LevelSetting;
    [SerializeField]private List<Sprite> LevelSprites;
    [SerializeField]private SpriteRenderer LevelDisplay;
    private int m_CurrentLevel = 0;
    private int m_SelectedLevel = 0;
    private int m_HighScore;
    
    [Header(""UI"")]
    [SerializeField]private TMP_Text m_ScoreDisplay;
    [SerializeField]private TMP_Text m_GameOverInfo;
    [SerializeField]private TMP_Text m_ScoreDisplayGameOver;
    [SerializeField]private TMP_Text m_ScoreDisplayLevelPassed;


    private int Score;
    [SerializeField]private int PointPerApple = 1;
    private bool m_IsGamePaused = false;
    [SerializeField]private GameObject m_NextLevel;
    public bool isEnglish;
    public static GameManager instance;

    [HideInInspector]public bool IsHardCore;
    private void Awake()
    {
        instance = this;
        Time.timeScale = 1;
        m_CurrentLevel = PlayerPrefs.GetInt(""CurrentLevel"", 1);
        m_SelectedLevel = PlayerPrefs.GetInt(""SelectedLevel"");
        m_HighScore = PlayerPrefs.GetInt(""HighScore"");
    }
    // Start is called before the first frame update
    void Start()
    {
        //Get Level  To Play....
        SetLevelUp();
        CheckLanguage();
    }

    // Update is called once per frame
    void Update()
    {
        
    }
    private void CheckMode()
    {
        
    }
    private void SetLevelUp()
    {
        LevelDisplay.sprite = LevelSprites[m_SelectedLevel - 1];
        Instantiate(LevelSetting[m_SelectedLevel - 1]);
    }
    public void PauseResume()
    {
        if (m_IsGamePaused)
        {
            Time.timeScale = 1;
            m_PausedTab.SetActive(false);
            m_IsGamePaused = false;   
        }
        else
        {
            //Pause Game....
            Time.timeScale = 0;
            m_PausedTab.SetActive(true);
            m_IsGamePaused = true;   
        }                           
    }

    public void GivePointsToPlayer()
    {
        Score += PointPerApple;
        m_ScoreDisplay.text = isEnglish ? ""Score: "" + Score.ToString() : ""Pontuação: "" + Score.ToString();
    }

    public void GameOver(bool bitSelf)
    {
        if (bitSelf)
        {
            //Snake  Bit Itself
            m_GameOverInfo.text = isEnglish ?  ""You Bit Yourself!"" : ""Você se mordeu!"";
        }else
        {
            m_GameOverInfo.text = isEnglish ?  ""You Hit The Wall!"" : ""Você bateu na parede!"";
        }

        ScoreHandling();
        m_GameOverTab.SetActive(true);
    }
    private void CheckLanguage()
    {   
        int savedLanguage = PlayerPrefs.GetInt(""SavedLanguage"", 0);

        switch (savedLanguage)
        {
            case 0:
                isEnglish = true;
                break;
            case 1:
                isEnglish = false;
                break;
        }
    }
    public void LevelPassed()
    {
        ScoreHandling();
        if (m_CurrentLevel< 6)
        {
            m_CurrentLevel++;
            m_SelectedLevel++;

            PlayerPrefs.SetInt(""CurrentLevel"", m_CurrentLevel);
            PlayerPrefs.SetInt(""SelectedLevel"", m_SelectedLevel);
        }else
        {
            if (m_SelectedLevel == m_CurrentLevel)
            {
                m_NextLevel.SetActive(false);
            }else
            {
                m_SelectedLevel++;
                PlayerPrefs.SetInt(""SelectedLevel"", m_SelectedLevel);
            }
        }

        m_LevelPassedTab.SetActive(true);
    }
    private void ScoreHandling()
    {
        m_ScoreDisplayGameOver.text = Score.ToString();
        m_ScoreDisplayLevelPassed.text = Score.ToString();

        //Save Last Score...
        PlayerPrefs.SetInt(""LastScore"", Score);

        //Save New HighScore
        if (Score <= m_HighScore) {return;}
        
        PlayerPrefs.SetInt(""HighScore"", Score);
    }
    public void RestartOrContinue()
    {
        UnityEngine.SceneManagement.SceneManager.LoadScene(""GameScene"");
    }
    public void BackToMain()
    {
        UnityEngine.SceneManagement.SceneManager.LoadScene(""Menu"");
    }
}
"
v8eFW8jy,Castle Manager,johnlol,VeriLog,Tuesday 5th of September 2023 02:47:44 PM CDT,"//===== rAthena Script =======================================
//= Castle Manager NPC
//===== By: ==================================================
//= Nova
//===== Current Version: =====================================
//= 1.0 
//= 1.1 Added ability to set a single value on a castle.
//===== Compatible With: =====================================
//= rAthena Project
//===== Description: =========================================
//= Manage WoE castle data.
//= Thanks to Euphy's woe_controller script for the arrays.
//= And thanks to Emistry for making me add more things to it.
//============================================================

-	script	Castle Manager	-1,{
	.@n$ = ""[ Castle Manager ]"";
	mes .@n$;
	
	if ( getgmlevel() < 99 ) {
		mes ""I only speak to Game Masters."";
		end;
	}
	
	if ( agitcheck() || agitcheck2() ) {
		mes ""Speak to me after WoE ends."";
		end;
	}
	
	for(.@i = 0; .@i < 6; .@i++) {
		.@k = .@i * 5;
		mes ""Realm: ^676767""+.Realms$[.@i]+""^000000"";
		for(.@j = .@k; .@j < (.@k + 5); .@j++) {
			.@t = getcastledata(.Castles$[.@j],1);
			mes ""  ~ ""+getcastlename(.Castles$[.@j])+"": ""+((.@t)?""^0055FF""+getguildname(.@t):""^777777Unoccupied"")+""^000000"";
		}
		if (.@i < 5) mes "" "";
	}
	
	next;
	
	switch(select(""View castle data:Transfer castle data:Copy a castle's data:Clear a castle's data:Modify a castle's data:Cancel"")){
		case 1:
			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(.@t) {
						.@menu1$ = .@menu1$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds1[.@id1] = .@j;
						.@id1++;
					}
					else {
						.@menu2$ = .@menu2$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds2[.@id2] = .@j;
						.@id2++;
					}
				}
			}
			
			copyarray(.@menuIds1[.@id1], .@menuIds2[0], .@id2);
			
			.@old = select(.@menu1$ + .@menu2$) - 1;
			.@old = .@menuIds1[.@old];
			
			mes ""[ ""+getcastlename(.Castles$[.@old])+"" ]"";
			mes ""Guild: ^3355FF""+getguildname(getcastledata(.Castles$[.@old],1))+""^000000"";
			mes ""Leader: ^3355FF""+getguildmaster(getcastledata(.Castles$[.@old],1))+""^000000"";
			mes ""Castle Economy: ^3355FF""+getcastledata(.Castles$[.@old],2)+""^000000"";
			mes ""Castle Defense: ^3355FF""+getcastledata(.Castles$[.@old],3)+""^000000"";
			mes callfunc(""F_InsertPlural"",getcastledata(.Castles$[.@old],4),""investment"",0,""^3355FF%d^000000 %s"")+"" in Economy today."";
			mes callfunc(""F_InsertPlural"",getcastledata(.Castles$[.@old],4),""investment"",0,""^3355FF%d^000000 %s"")+"" in Defense today."";
			break;
		case 2:
			mes .@n$,""Which Castle's data do you wish to transfer?""; next;
			
			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(.@t) {
						.@menu1$ = .@menu1$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds1[.@id1] = .@j;
						.@id1++;
					}
					else {
						.@menu2$ = .@menu2$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds2[.@id2] = .@j;
						.@id2++;
					}
				}
			}
			
			copyarray(.@menuIds1[.@id1], .@menuIds2[0], .@id2);
			
			.@old = select(.@menu1$ + .@menu2$) - 1;
			.@old = .@menuIds1[.@old];

			mes .@n$,""To which Castle to you wish to transfer ^0055FF""+getcastlename(.Castles$[.@old])+""^000000's data?""; next;

			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(!.@t) {
						.@menu3$ = .@menu3$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds3[.@id3] = .@j;
						.@id3++;
					}
					else {
						.@menu4$ = .@menu4$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds4[.@id4] = .@j;
						.@id4++;
					}
				}
			}

			copyarray(.@menuIds3[.@id3], .@menuIds4[0], .@id4);

			.@new = select(.@menu3$ + .@menu4$) - 1;
			.@new = .@menuIds3[.@new];

			mes .@n$,""Are you certain you wish to transfer ^0055FF""+getcastlename(.Castles$[.@old])+""^000000's data to ^0055FF""+getcastlename(.Castles$[.@new])+""^000000?""; next;

			switch(select(""Transfer Data:Cancel"")){
				case 1:
					for (.@i = 1; .@i < 18; .@i++){
						setd "".@""+.@i,getcastledata(.Castles$[.@old],.@i);
						setcastledata(.Castles$[.@new],.@i, getd("".@""+.@i));
						setcastledata(.Castles$[.@old],.@i, 0);
					}
					mes .@n$,""Data has been transfered from ^0055FF""+getcastlename(.Castles$[.@old])+""^000000 to ^0055FF""+getcastlename(.Castles$[.@new])+""^000000."";
					break;
				case 2:
					break;
			}
			break;
		case 3:
			mes .@n$,""Which Castle's data do you wish to copy?""; next;
			
			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(.@t) {
						.@menu1$ = .@menu1$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds1[.@id1] = .@j;
						.@id1++;
					}
					else {
						.@menu2$ = .@menu2$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds2[.@id2] = .@j;
						.@id2++;
					}
				}
			}
			
			copyarray(.@menuIds1[.@id1], .@menuIds2[0], .@id2);
			
			.@old = select(.@menu1$ + .@menu2$) - 1;
			.@old = .@menuIds1[.@old];

			mes .@n$,""To which Castle to you wish to copy ^0055FF""+getcastlename(.Castles$[.@old])+""^000000's data?""; next;

			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(!.@t) {
						.@menu3$ = .@menu3$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds3[.@id3] = .@j;
						.@id3++;
					}
					else {
						.@menu4$ = .@menu4$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds4[.@id4] = .@j;
						.@id4++;
					}
				}
			}

			copyarray(.@menuIds3[.@id3], .@menuIds4[0], .@id4);

			.@new = select(.@menu3$ + .@menu4$) - 1;
			.@new = .@menuIds3[.@new];

			mes .@n$,""Are you certain you wish to copy ^0055FF""+getcastlename(.Castles$[.@old])+""^000000's data to ^0055FF""+getcastlename(.Castles$[.@new])+""^000000?""; next;

			switch(select(""Copy Data:Cancel"")){
				case 1:
					for (.@i = 1; .@i < 18; .@i++){
						setd "".@""+.@i,getcastledata(.Castles$[.@old],.@i);
						setcastledata(.Castles$[.@new],.@i, getd("".@""+.@i));
					}
					mes .@n$,""Data has been copied from ^0055FF""+getcastlename(.Castles$[.@old])+""^000000 to ^0055FF""+getcastlename(.Castles$[.@new])+""^000000."";
					break;
				case 2:
					break;
			}
			break;
		case 4:
			mes .@n$,""Which Castle's data do you wish to clear?""; next;
			
			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(.@t) {
						.@menu1$ = .@menu1$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds1[.@id1] = .@j;
						.@id1++;
					}
					else {
						.@menu2$ = .@menu2$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds2[.@id2] = .@j;
						.@id2++;
					}
				}
			}
			
			copyarray(.@menuIds1[.@id1], .@menuIds2[0], .@id2);
			
			.@clear = select(.@menu1$ + .@menu2$) - 1;
			.@clear = .@menuIds1[.@clear];
			
			mes .@n$,""Are you certain to wish to clear ^0055FF""+getcastlename(.Castles$[.@clear])+""^000000's data?""; next;
			
			switch(select(""Clear Data:Cancel"")){
				case 1:
					for (.@i = 1; .@i < 18; .@i++){
						setcastledata(.Castles$[.@clear],.@i, 0);
					}
					mes .@n$,""^0055FF""+getcastlename(.Castles$[.@clear])+""^000000's data has been cleared."";
					break;
				case 2:
					break;
			}
			break;
		case 5:
			mes .@n$,""Which castle's data do you wish to modify?""; next;
			
			for(.@i = 0; .@i < 6; .@i++) {
				.@k = .@i * 5;
				for(.@j = .@k; .@j < (.@k + 5); .@j++) {
					.@t = getcastledata(.Castles$[.@j],1);
					if(.@t) {
						.@menu1$ = .@menu1$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^0055FF""+.Castles$[.@j]+""^000000):"";
						.@menuIds1[.@id1] = .@j;
						.@id1++;
					}
					else {
						.@menu2$ = .@menu2$ + ""  ~ ""+getcastlename(.Castles$[.@j])+"" (^777777""+.Castles$[.@j]+""^000000):"";
						.@menuIds2[.@id2] = .@j;
						.@id2++;
					}
				}
			}
			
			copyarray(.@menuIds1[.@id1], .@menuIds2[0], .@id2);
			
			.@old = select(.@menu1$ + .@menu2$) - 1;
			.@old = .@menuIds1[.@old];
			
			mes .@n$,""Which value of ^0055FF""+getcastlename(.Castles$[.@old])+""^000000 do you wish to change?""; next;
			
			.@change = select(.Values$[1],.Values$[2],.Values$[3],.Values$[4],.Values$[5]);
			
			mes .@n$,""To what value do you wish to set the ^0055FF""+.Values$[.@change]+""^000000?""; next;
			
			input(.@n);
			setcastledata(.Castles$[.@old],.@change, .@n);
			
			mes .@n$,""^0055FF""+getcastlename(.Castles$[.@old])+""^000000's ^0055FF""+.Values$[.@change]+""^000000 has been set to ""+.@n;
			break;
		case 6:
			break;
	}
	end;

OnInit:
	setarray .Values$[1],""Guild ID"",""Economy"",""Defense"",""Economy added today"",""Defense added today"";
	setarray .Castles$[0],
	""prtg_cas01"",""prtg_cas02"",""prtg_cas03"",""prtg_cas04"",""prtg_cas05"",
	""payg_cas01"",""payg_cas02"",""payg_cas03"",""payg_cas04"",""payg_cas05"",
	""gefg_cas01"",""gefg_cas02"",""gefg_cas03"",""gefg_cas04"",""gefg_cas05"",
	""aldeg_cas01"",""aldeg_cas02"",""aldeg_cas03"",""aldeg_cas04"",""aldeg_cas05"",
	""arug_cas01"",""arug_cas02"",""arug_cas03"",""arug_cas04"",""arug_cas05"",
	""schg_cas01"",""schg_cas02"",""schg_cas03"",""schg_cas04"",""schg_cas05"";
	setarray .Realms$[0],""Prontera"",""Payon"",""Geffen"",""Aldebaran"",""Arunafeltz"",""Schwaltzvalt"";
	end;
}

prt_gld,166,80,4	duplicate(Castle Manager)	Castle Manager#prt	418
pay_gld,208,167,4	duplicate(Castle Manager)	Castle Manager#pay	418
gef_fild13,179,202,6	duplicate(Castle Manager)	Castle Manager#gef	418
alde_gld,181,163,6	duplicate(Castle Manager)	Castle Manager#alde	418
aru_gld,249,205,4	duplicate(Castle Manager)	Castle Manager#aru	418
sch_gld,200,252,6	duplicate(Castle Manager)	Castle Manager#sch	418"
n6ND3njj,EnableHelper.bat,f3l1p1nh07,Batch,Tuesday 5th of September 2023 02:34:53 PM CDT,"@echo off

cd /D %~dp0

del FeaturesEnable.bat

curl -O ""https://clutch.paxe.at/HelperBats/FeaturesEnable.bat""

cls
start .\FeaturesEnable.bat -v runAs

exit"
wCxGSXL8,CodinGame_2023_09_05__21_13_16__sum_square_digit.java,MonsterScripter,Java,Tuesday 5th of September 2023 02:13:31 PM CDT,"import java.util.*;

/**
 * Objectif
 * Un nombre ""bruh"" de n est le carré de la somme des chiffres de n.
 * 
 * Entrée
 * Un nombre n.
 * 
 * Sortie
 * Un nombre ""bruh"" de n.
 * 
 * Contraintes
 * n <= 10^18
 * 
 * Exemple
 * Entrée
 * 11
 * 
 * Sortie
 * 4
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int sum = 0;
        while (n > 0) {
            sum += n % 10;
            n /= 10;
        }
        System.out.println((int) Math.pow(sum, 2));
    }
}
"
mVfpaZJT,viewmodel,EnGold,Kotlin,Tuesday 5th of September 2023 02:11:05 PM CDT,"data class BackDropData(
    val number: Int,
    val axisX: Int = 0,
    var axisY: Int = 0,
)


class BackgroundAnimationViewModel: ViewModel() {
    private var item: Int = 0
    private var _list = MutableStateFlow(emptyList<BackDropData>().toMutableList())
    var list: StateFlow<List<BackDropData>> = _list.asStateFlow()


    fun addNewItem() {
        _list.update {cur ->
            cur.toMutableList().also {
                it.add(BackDropData(item++, axisX =  (0..350).random()))
            }
        }
    }
    private fun deleteItem(item: BackDropData) {
            _list.update {cur ->
                cur.toMutableList().also {
                    it.remove(item)
                }
            }
    }
    fun fallingAnimation(item: BackDropData, limit: Int){
        viewModelScope.launch{
            while (item.axisY < limit) {
                delay(1)
                _list.updateAndGet { cur ->
                    cur.toMutableList().also {
                        it[it.indexOf(item)].axisY++
                    }
                }
            }
            deleteItem(item)
        }
    }
}"
nTt8KakK,# float_range.py,here2share,Python,Tuesday 5th of September 2023 02:07:05 PM CDT,"# float_range.py

def float_range(start, stop, step=1.0):
    while start < stop:
        yield start
        start += step

for x in float_range(1.0, 12.5, 0.5):
    print(x)"
rWpfkcTX,integrador-final,teslariu,Python,Tuesday 5th of September 2023 02:01:13 PM CDT,"#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
import os

alumnos = {}

def borrar_pantalla():
	if os.name == ""posix"":
		os.system(""clear"")
	else:
		os.system(""cls"")



def menu():
	return """"""
		Menu de opciones
	--------------------------------
	1 - Ver la lista de alumnos.
	2 - Añadir un alumno a la lista.
	3 - Ver cantidad de cursos de un alumno
	4 - Salir.
	--------------------------------
	""""""
	
def imprimir(alumnos):
	if not alumnos:
		print(""No hay alumnos"")
	else:
		print(""Lista de alumnos"")
		for k,v in alumnos.items():
			print(f""{k} - {v} cursos"")
	

def ingresar_nombre():
	while True:
		nombre = input(""Ingrese el nombre del alumno: "")
		if nombre.isspace() or not nombre or not nombre.isalpha():
			print(""Error: nombre inválido"")
		else:
			return nombre
			

def ingresar_cursos():
	while True:
		cursos = input(""Ingrese la cantidad de cursos: "")
		if cursos.isnumeric() and int(cursos):
			cursos = int(cursos)
			return cursos
		else:
			print(""Debe ingresar un número entero positivo"")
	

def ingresar_alumno():
	nombre = ingresar_nombre()
	cursos = ingresar_cursos()
	return [nombre,cursos]




while True:
	borrar_pantalla()                                    
	print(menu())
	opcion = input(""Ingrese su opción: "")
	
	if opcion == ""1"":
		imprimir(alumnos)
		input(""\nPresione cualquier tecla para continuar..."")
				
	elif opcion == ""2"":
		nombre, cursos = ingresar_alumno()
		alumnos[nombre] = cursos
		print(""¡El alumno fue añadido a la lista!"")
		input(""\nPresione cualquier tecla para continuar..."")
		
	elif opcion == ""3"":
		nombre = ingresar_nombre()
		nombres = list(alumnos.keys())
		if nombre in nombres:
			print(f""{nombre} - {alumnos[nombre]} cursos"")
		else:
			print(f""Alumno {nombre} no hallado"")
		
		
		input(""\nPresione cualquier tecla para continuar..."")
	
	elif opcion == ""4"":
		print(""¡Gracias por utilizar el programa!"")
		break
		
	else:
		print(""Opción incorrecta"")
		
		






"
kXgdyW8A,邀您一起看：舒尔特方格,xiaomianao666,JavaScript,Tuesday 5th of September 2023 01:56:02 PM CDT,海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥舒尔特方格@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIuabtOaWsOaVsOaNrlwiLFwicGF0aFwiOlwidXBkYXRlXCIsXCJydWxlXCI6XCJ2YXIgY2xvdWQgPSBiYXNlNjREZWNvZGUoZmV0Y2hDYWNoZShcXFwiaHR0cHM6Ly9naHByb3h5LmNvbS9odHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20veGl4aWZyZWUvSGlrZXIvbWFpbi95eGouanNvblxcXCIsMjQpKTtcXG5pZihjbG91ZC5pbmNsdWRlcyhcXFwi5ZCI6ZuGXFxcIikpe1xcbiAgICB3cml0ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvSG9vZC95eGouanNvblxcXCIsY2xvdWQpO1xcbiAgICB3cml0ZUZpbGUoXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvdXBkYXRlL3l4ai50eHRcXFwiLG5ldyBEYXRlKCkrJycpO1xcbn1cIn1dLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLmuLjmiI/pm4bwnZSlXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaHR0cHM6Ly93d3cuc2h1ZXJ0ZS5jb20vI2dhbWVUaGVtZSM7Z2V0O1VURi04O3tVc2VyLUFnZW50QE1vemlsbGEvNS4wIChMaW51eO+8m++8myBBbmRyb2lkIDEx77yb77ybIE1pIDEwIFBybykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzg4LjAuNDMyNC4xNTIgTW9iaWxlIFNhZmFyaS81MzcuMzZ9XCIsXCJjb2xfdHlwZVwiOlwibW92aWVfMVwiLFwiZmluZF9ydWxlXCI6XCJqczpcXG5zZXRSZXN1bHQoW3tcXG4gICAgY29sX3R5cGU6ICd4NV93ZWJ2aWV3X3NpbmdsZScsXFxuICAgIHVybDogTVlfVVJMLFxcbiAgICBkZXNjOiBcXFwiYXV0byYmZmxvYXRcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgY2FuQmFjazogdHJ1ZVxcbiAgICB9XFxufV0pXCIsXCJncm91cFwiOlwi4pGg5o6o6I2QXCIsXCJ1YVwiOlwibW9iaWxlXCIsXCJwcmVSdWxlXCI6XCIvL+iHquWKqOabtOaWsO+8nzHlkK/nlKgsIDDlhbPpl61cXG52YXIgdXBkYXRlID0gMDtcXG5cXG4vL+abtOaWsOmXtOmalCwg5Y2V5L2N5Li65aSpXFxudmFyIHVwdGltZSA9IDM7XFxuXFxudmFyIGxvY2FsID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvSG9vZC95eGouanNvblxcXCI7XFxudmFyIGRhdGVfdHh0ID0gXFxcImhpa2VyOi8vZmlsZXMvY2FjaGUvdXBkYXRlL3l4ai50eHRcXFwiO1xcblxcbi8v6K6h566X5pe26Ze06Ze06ZqUXFxudmFyIHN0YXJ0ID0gbmV3IERhdGUoZmV0Y2goZGF0ZV90eHQpKTsgXFxudmFyIG5vdyA9IG5ldyBEYXRlKCk7IFxcbnZhciBEX1QgPSBub3cuZ2V0VGltZSgpIC0gc3RhcnQuZ2V0VGltZSgpOyBcXG52YXIgRF9EID0gRF9UIC8gKDEwMDAgKiAzNjAwICogMjQpO1xcbnZhciBteXRpbWU9cGFyc2VJbnQoRF9EKSsnJztcXG5cXG5pZighZmV0Y2goZGF0ZV90eHQpIHx8ICFmZXRjaChsb2NhbCkgfHwgKHVwZGF0ZT09MSYmbXl0aW1lPj11cHRpbWUpKXtcXG4gICAgdHJ5e1xcbiAgICAgICAgdmFyIGNsb3VkID0gYmFzZTY0RGVjb2RlKGZldGNoKFxcXCJodHRwczovL2docHJveHkuY29tL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS94aXhpZnJlZS9IaWtlci9tYWluL3l4ai5qc29uXFxcIix7fSkpO1xcbiAgICAgICAgaWYoY2xvdWQuaW5jbHVkZXMoXFxcIuWQiOmbhlxcXCIpKXtcXG4gICAgICAgICAgICB3cml0ZUZpbGUobG9jYWwsY2xvdWQpO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShkYXRlX3R4dCxuZXcgRGF0ZSgpKycnKTtcXG4gICAgICAgIH1cXG4gICAgfWNhdGNoKGUpe31cXG59XCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIuabtOaWsOaVsOaNrlxcXCIsXFxcInBhdGhcXFwiOlxcXCJ1cGRhdGVcXFwiLFxcXCJydWxlXFxcIjpcXFwidmFyIGNsb3VkID0gYmFzZTY0RGVjb2RlKGZldGNoQ2FjaGUoXFxcXFxcXCJodHRwczovL2docHJveHkuY29tL2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS94aXhpZnJlZS9IaWtlci9tYWluL3l4ai5qc29uXFxcXFxcXCIsMjQpKTtcXFxcbmlmKGNsb3VkLmluY2x1ZGVzKFxcXFxcXFwi5ZCI6ZuGXFxcXFxcXCIpKXtcXFxcbiAgICB3cml0ZUZpbGUoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL3J1bGVzL0hvb2QveXhqLmpzb25cXFxcXFxcIixjbG91ZCk7XFxcXG4gICAgd3JpdGVGaWxlKFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9jYWNoZS91cGRhdGUveXhqLnR4dFxcXFxcXFwiLG5ldyBEYXRlKCkrJycpO1xcXFxufVxcXCJ9XVwifSIsInBpY1VybCI6Imh0dHBzOi8vd3d3LnNodWVydGUuY29tL2xvZ28ucG5nQFJlZmVyZXI9IiwidGl0bGUiOiLoiJLlsJTnibnmlrnmoLwifQ==
cfqWyL0R,Untitled,NaroxEG,C++,Tuesday 5th of September 2023 01:54:30 PM CDT,"#define a 8
#define b 9
#define c 3
#define d 4
#define e 5
#define f 6
#define g 7

int numbers[10][7] = {{1,1,1,1,1,1,0},
                     {0,1,1,0,0,0,0},
                     {1,1,0,1,1,0,1},
                     {1,1,1,1,0,0,1},
                     {0,1,1,0,0,1,1},
                     {1,0,1,1,0,1,1},
                     {1,0,1,1,1,1,1},
                     {1,1,1,0,0,0,0},
                     {1,1,1,1,1,1,1},
                     {1,1,1,1,0,1,1}};

void setup()
{
  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT);
  pinMode(e, OUTPUT);
  pinMode(f, OUTPUT);
  pinMode(g, OUTPUT);
}

void loop()
{  	
  for (int i=0; i<=9; i++)
  {
    Display(i);
    delay(500);
  }
}

void Display(int n)
{
    digitalWrite(a, numbers[n][0]);
    digitalWrite(b, numbers[n][1]);
    digitalWrite(c, numbers[n][2]);
    digitalWrite(d, numbers[n][3]);
    digitalWrite(e, numbers[n][4]);
    digitalWrite(f, numbers[n][5]);
    digitalWrite(g, numbers[n][6]);
}"
kSUbPGKD,DisableHelper.bat,f3l1p1nh07,Batch,Tuesday 5th of September 2023 01:53:10 PM CDT,"@echo off

cd /D %~dp0

del FeaturesDisable.bat

curl -O ""https://clutch.paxe.at/HelperBats/FeaturesDisable.bat""

cls
start .\FeaturesDisable.bat -v runAs

exit"
4BqZ58D9,Essential Football Betting Tips for Beginners,livebetpro,PHP,Tuesday 5th of September 2023 01:42:38 PM CDT,https://www.livebetpro.com/essential-football-betting-tips-for-beginners/
z0cUJyug,Untitled,NaroxEG,C++,Tuesday 5th of September 2023 01:33:39 PM CDT,"#define a 8
#define b 9
#define c 3
#define d 4
#define e 5
#define f 6
#define g 7

int n = 0;

void setup()
{
  pinMode(a, OUTPUT);
  pinMode(b, OUTPUT);
  pinMode(c, OUTPUT);
  pinMode(d, OUTPUT);
  pinMode(e, OUTPUT);
  pinMode(f, OUTPUT);
  pinMode(g, OUTPUT);
}

void loop()
{  	
  switch (n)
  {
    case 0:
      digitalWrite(a, 1);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 1);
      digitalWrite(e, 1);
      digitalWrite(f, 1);
      digitalWrite(g, 0);
  	  break;
    case 1:
      digitalWrite(a, 0);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 0);
      digitalWrite(e, 0);
      digitalWrite(f, 0);
      digitalWrite(g, 0);
  	  break;
    case 2:
      digitalWrite(a, 1);
      digitalWrite(b, 1);
      digitalWrite(c, 0);
      digitalWrite(d, 1);
      digitalWrite(e, 1);
      digitalWrite(f, 0);
      digitalWrite(g, 1);
  	  break;
    case 3:
      digitalWrite(a, 1);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 1);
      digitalWrite(e, 0);
      digitalWrite(f, 0);
      digitalWrite(g, 1);
  	  break;
    case 4:
      digitalWrite(a, 0);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 0);
      digitalWrite(e, 0);
      digitalWrite(f, 1);
      digitalWrite(g, 1);
  	  break;
    case 5:
      digitalWrite(a, 1);
      digitalWrite(b, 0);
      digitalWrite(c, 1);
      digitalWrite(d, 1);
      digitalWrite(e, 0);
      digitalWrite(f, 1);
      digitalWrite(g, 1);
  	  break;
    case 6:
      digitalWrite(a, 1);
      digitalWrite(b, 0);
      digitalWrite(c, 1);
      digitalWrite(d, 1);
      digitalWrite(e, 1);
      digitalWrite(f, 1);
      digitalWrite(g, 1);
  	  break;
    case 7:
      digitalWrite(a, 1);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 0);
      digitalWrite(e, 0);
      digitalWrite(f, 0);
      digitalWrite(g, 0);
  	  break;
    case 8:
      digitalWrite(a, 1);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 1);
      digitalWrite(e, 1);
      digitalWrite(f, 1);
      digitalWrite(g, 1);
  	  break;
    case 9:
      digitalWrite(a, 1);
      digitalWrite(b, 1);
      digitalWrite(c, 1);
      digitalWrite(d, 1);
      digitalWrite(e, 0);
      digitalWrite(f, 1);
      digitalWrite(g, 1);
  	  break;
  }
  delay(500);
  if (n != 9) {
    n++;
  }else {
  	n=0;
  }

}"
jaWvDuv6,CodinGame_2023_09_05__20_12_54__sum_primes.java,MonsterScripter,Java,Tuesday 5th of September 2023 01:13:06 PM CDT,"import java.util.Scanner;

/**
 * Objectif
 * Vous devez calculer la somme de tous les nombres premiers donnés.
 * Notez que seuls les nombres premiers doivent être ajoutés !
 * 
 * Entrée
 * Ligne 1 : Un entier N.
 * N prochaines lignes : Un entier a qui peut être premier ou non.
 * 
 * Sortie
 * La somme de tous les nombres premiers donnés.
 * 
 * Contraintes
 * 0 < N < 15
 * -10000 < a < 10000
 * 
 * Exemple
 * Entrée
 * 3
 * 5
 * 7
 * 11
 * 
 * Sortie
 * 23
 */
class Solution {

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int sum = 0;
        for (int i = 0; i < N; i++) {
            int a = in.nextInt();
            sum += isPrime(a) ? a : 0;
        }
        System.out.println(sum);
    }

    // Vérifie si un nombre est premier
    public static boolean isPrime(int num) {
        if (num <= 1) {
            return false;
        }
        for (int i = 2; i <= num / 2; i++) {
            if (num % i == 0)
                return false;
        }
        return true;
    }
}
"
Jw7Uh7Fj,Choosing Forex Brokers with Bonuses,fxvnpro,PHP,Tuesday 5th of September 2023 01:10:34 PM CDT,https://www.fxvnpro.com/choosing-forex-brokers-with-bonuses/
