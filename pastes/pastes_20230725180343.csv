id,title,username,language,date,content
Yvv5wV6A,Untitled,oakenchildren,JavaScript,Tuesday 25th of July 2023 12:13:17 PM CDT,"// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import ""mx-global"";
import { Big } from ""big.js"";

// BEGIN EXTRA CODE
function isCEPValid(cep) {
    return /^[0-9]{8}$/.test(cep);
}
// END EXTRA CODE

/**
 * @param {string} cep - only numbers
 * @returns {Promise.<string>}
 */
export async function getCEP(cep) {
    // BEGIN USER CODE
    if (isCEPValid(cep)) {
        // URL da API do ViaCEP
        const viaCepUrl = 'https://viacep.com.br/ws/' + cep + '/json/';

        // Realiza a requisição para a API do ViaCEP
        fetch(viaCepUrl)
            .then(response => response.json())
            .then(data => {
                // Retorna o JSON do CEP
                return JSON.stringify({ error: false, message: data});
            })
            .catch(error => {
                // Tratativa de erro no consumo
                return JSON.stringify({ error: true, message: error.message });
            });
    } else {
        // CEP inválido
        return JSON.stringify({ error: true, message: 'CEP inválido. Certifique-se de que o CEP contenha apenas 8 dígitos numéricos.' });
    }
    // END USER CODE
}
"
Db0bRxev,Prefix Permutation Sums,danielvitor23,C++,Tuesday 25th of July 2023 11:59:10 AM CDT,"#include <bits/stdc++.h>
#define fi first
#define se second
using namespace std;

using i64 = long long;

void solve() {
  int n; cin >> n;

  vector<i64> a(n-1);
  map<int, int> freq;

  for (int i = 0; i < n-1; ++i) {
    cin >> a[i];
    ++freq[i == 0 ? a[i] : a[i] - a[i-1]];
  }

  // verificar se removeu do fim
  vector<int> faltando;

  int cntFreq = 0, hasRepeated = false;
  for (int i = 1; i <= n; ++i) {
    if (freq[i]) {
      if (freq[i] > 1) hasRepeated = true;
      ++cntFreq;
    }
    else {
      faltando.push_back(i);
    }
  }

  if (cntFreq == n-1 and !hasRepeated) {
    cout << ""YES\n"";
    return;
  }

  // verificar se removeu do começo
  if (cntFreq == n-2 and faltando.size() == 2 and faltando[0] + faltando[1] == a[0] and !hasRepeated) {
    cout << ""YES\n"";
    return;
  }

  // verificar se removeu do meio
  if (cntFreq == n-2 and faltando.size() == 2 and (faltando[0] + faltando[1] <= n ? freq[faltando[0] + faltando[1]] == 2 : freq[faltando[0] + faltando[1]] == 1)) {
    cout << ""YES\n"";
    return;
  }

  cout << ""NO\n"";
}

int main() {
  cin.tie(0)->sync_with_stdio(0);

  int tc; cin >> tc;

  while (tc--) {
    solve();
  }
}"
B8CDxsUe,Swimbot Error,swimmerhair,Python,Tuesday 25th of July 2023 11:35:53 AM CDT,"Traceback (most recent call last):
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/connector.py"", line 999, in _create_direct_connection
    hosts = await asyncio.shield(host_resolved)
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/connector.py"", line 865, in _resolve_host
    addrs = await self._resolver.resolve(host, port, family=self._family)
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/resolver.py"", line 31, in resolve
    infos = await self._loop.getaddrinfo(
  File ""/usr/lib/python3.9/asyncio/base_events.py"", line 856, in getaddrinfo
    return await self.run_in_executor(
  File ""/usr/lib/python3.9/concurrent/futures/thread.py"", line 52, in run
    result = self.fn(*self.args, **self.kwargs)
  File ""/usr/lib/python3.9/socket.py"", line 953, in getaddrinfo
    for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
socket.gaierror: [Errno -3] Temporary failure in name resolution

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/discord/ext/commands/core.py"", line 85, in wrapped
    ret = await coro(*args, **kwargs)
  File ""/home/pi/Swimbot/whois.py"", line 458, in link
    resp = await COC.Player(temp_tag).info
  File ""/home/pi/Swimbot/COC.py"", line 30, in info
    async with session.get(playerurl, params = self.params, headers=self.headers) as r:
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/client.py"", line 1117, in __aenter__
    self._resp = await self._coro
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/client.py"", line 520, in _request
    conn = await self._connector.connect(
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/connector.py"", line 535, in connect
    proto = await self._create_connection(req, traces, timeout)
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/connector.py"", line 892, in _create_connection
    _, proto = await self._create_direct_connection(req, traces, timeout)
  File ""/home/pi/Swimbot/venv/lib/python3.9/site-packages/aiohttp/connector.py"", line 1011, in _create_direct_connection
    raise ClientConnectorError(req.connection_key, exc) from exc
aiohttp.client_exceptions.ClientConnectorError: Cannot connect to host api.clashofclans.com:443 ssl:default [Temporary failure in name resolution]
"
rMML6c44,Untitled,stuartclennett,Pascal,Tuesday 25th of July 2023 10:40:45 AM CDT,89d6eeab6ab1047bcf7f0703c35793ad44d6b5e1
wjxevfLt,Pinturillo 2 js,DrawingJhon,JavaScript,Tuesday 25th of July 2023 10:12:50 AM CDT,"var oM;
var cr, ab;
var eA = 1920;
var ip = 1080;
var gO;
var fS = false;
var eJ = new dB();
var lD = 10;
var qp;
var rJ;
function dO() {
    if (oM == undefined) {
        oM = createjs;
    }
    if (cr == undefined) {
        cr = cX(ek.id, 'theCanvas', 'canvas');
        cr.style.backgroundColor = ""#366"";
    }
    if (ab == undefined) {
        ab = new oM.Stage(cr);
        ab.snapToPixelEnabled = true;
        ab.enableMouseOver(lD);
        oM.Touch.enable(ab);
        oM.Ticker.interval = parseInt(1000 / 24);
        oM.Ticker.on(""tick"", function() {
            ab.update();
        });
        ab.on(""stagemousedown"", eF);
        ab.regX = parseInt(eA / 2);
    }
    dN();
    window.addEventListener('resize', dN, false);
}
;function qW() {
    var pa = document.createElement(""canvas"").getContext(""2d"");
    var nG = window.devicePixelRatio || 1;
    var nQ = pa.webkitBackingStorePixelRatio || pa.mozBackingStorePixelRatio || pa.msBackingStorePixelRatio || pa.oBackingStorePixelRatio || pa.backingStorePixelRatio || 1;
    return nG / nQ;
}
;function dN() {
    if (qs()) {
        document.dispatchEvent(F(""hideZoneBottom""));
        return;
    } else {
        document.dispatchEvent(F(""showZoneBottom""));
    }
    var mh = qW();
    var iH = parseInt(ek.clientWidth);
    var hQ = parseInt(ek.clientHeight);
    var hU = Math.ceil(iH * mh);
    var ik = Math.ceil(hQ * mh);
    if (cr.width !== hU || cr.height !== ik) {
        cr.width = hU;
        cr.height = ik;
        cr.style.width = iH + ""px"";
        cr.style.height = hQ + ""px"";
        cr.getContext(""2d"").setTransform(mh, 0, 0, mh, 0, 0);
        var ii = Math.min(hU / eA, ik / ip);
        ab.scale = ii;
        ab.x = parseInt(hU / 2);
    }
}
;function fF() {
    if (ek.clientWidth < 730 || ek.clientHeight < 300) {
        return true;
    }
    return false;
}
;var ew;
var dW;
var ea;
var jg;
var eE;
var er;
var fl;
var eS;
var gw;
function dF() {
    this.lZ = 0;
    this.mU = 1;
    this.lP = 2;
    this.mj = 3;
    var jJ = new Array();
    if (ea == undefined) {
        ea = new oM.MovieClip().set({
            y: 110
        });
        ea.maxWidth = eA - 20;
        ea.maxHeight = ip - 120;
        ew.addChild(ea);
    }
    this.qq = function(gj) {
        var km;
        if (jJ[gj] == undefined) {
            switch (gj) {
            case this.lZ:
                km = bK();
                break;
            case this.mU:
                km = av();
                break;
            case this.lP:
                km = ad();
                break;
            case this.mj:
                km = aK();
                break;
            }
            if (km != undefined) {
                jJ[gj] = km;
                ea.addChild(km);
            }
        }
        return jJ[gj];
    }
    ;
    this.show = function(gj, iQ) {
        if (this.nq(gj) == false) {
            this.oc();
            var km = this.rc(gj);
            eS.show();
            setTimeout(function() {
                eS.hide();
                km.show(iQ);
                eJ.fadeIn(km);
            }, 1000);
        }
    }
    ;
    this.hide = function(gj) {
        this.oc();
    }
    ;
    this.oc = function() {
        for (i = 0; i < jJ.length; i++) {
            if (jJ[i] != undefined) {
                if (jJ[i].visible == true) {
                    eJ.fadeOut(jJ[i]);
                    jJ[i].hide();
                }
            }
        }
    }
    ;
    this.nq = function(gj) {
        var km = jJ[gj];
        if (km != undefined) {
            return km.visible;
        }
        return false;
    }
    ;
    this.rc = function(gj) {
        return this.qq(gj);
    }
}
;var ho = false;
var hm = 0;
var kM = new Uint8Array();
var gB = new Uint8Array();
function ag() {
    kM = aP();
    if (jm) {
        bw();
        gB = bb();
        ho = true;
    }
}
;function bw() {
    hm = 0;
    if (jm) {
        for (var i = 0; i < jm.length; i++) {
            hm = hm + jm.charCodeAt(i);
        }
    }
}
;function aH(aJ) {
    if (ho == false) {
        ag();
    }
    return fp(gk(aJ));
}
;function bf(aJ) {
    if (aJ != '' && ho == true) {
        var fe = ax(aJ);
        var aW = new Uint8Array(fe.length);
        var gY = (-1);
        for (var i = 0; i < fe.length; i++) {
            gY = bd(gB, fe[i]);
            if (gY > (-1)) {
                aW.set([gY], i);
            }
        }
        return aW;
    }
    return (new Uint8Array());
}
;function bI(aJ) {
    if (ho == false) {
        ag();
    }
    return fs(kH(aJ));
}
;function aq(aJ) {
    if (aJ != '' && ho == true) {
        var fe = ax(aJ);
        var aW = new Uint8Array(fe.length);
        for (var i = 0; i < fe.length; i++) {
            if (fe[i] < gB.length) {
                aW[i] = gB[fe[i]];
            }
        }
        return aW;
    }
    return (new Uint8Array());
}
;function aP() {
    var jo = new Uint8Array(new ArrayBuffer(256));
    for (var i = 0; i < jo.length; i++) {
        jo[i] = i;
    }
    return jo;
}
;function bb() {
    var ec = kM;
    var iK = new Uint8Array(ec.length);
    while (ec.length > 0) {
        var iP = parseInt(hm % ec.length);
        var gY = ec[iP];
        iK[iK.length - ec.length] = gY;
        var la = ec.subarray(0, iP);
        var lV = ec.subarray(iP + 1);
        ec = aa(la, lV);
    }
    return iK;
}
;function aa(gS, rY) {
    var ga = new (gS.constructor)(gS.length + rY.length);
    ga.set(gS, 0);
    ga.set(rY, gS.length);
    return ga;
}
;function ax(aJ) {
    var array = new Uint8Array(new ArrayBuffer(aJ.length));
    for (var i = 0; i < aJ.length; i++) {
        array[i] = aJ.charCodeAt(i);
    }
    return array;
}
;function bB(pl) {
    return String.fromCharCode.apply(null, pl);
}
;function bd(fi, ld) {
    for (var i = 0; i < fi.length; i++) {
        if (fi[i] == ld) {
            return i;
        }
    }
    return -1;
}
;var jr = {
    76: cJ,
    81: cS,
    84: aY,
    85: bg
};
function execCommand(v) {
    if (v.length > 0) {
        var command = v.charCodeAt(0);
        if (typeof jr[command] != ""undefined"") {
            jr[command](v.split(ha));
        } else {}
    }
}
;function aY(v) {}
;function bg(v) {
    if (v.length > 0) {
        var aW = aE(v, 2);
        if (v[1] != """" && aW != """") {
            if (typeof cN !== 'undefined') {
                cN.kY(parseInt(v[1]), aW);
            } else {}
        }
    }
}
;function cJ(v) {
    if (v != """") {
        bD = v[1];
    }
}
;function cS(v) {
    it = parseInt(v[1]);
    eP(v[2]);
    if (kb['csv2'] == undefined) {
        ei()
    } else {
        rr()
    }
}
;function eP(bY) {
    if (bY < 0) {
        bY = 0;
    }
    gI = parseInt(bY);
}
;function ao(iM) {
    if (L != undefined) {
        eB = L.change(iM);
    }
}
;function bc() {
    var iX = 'en';
    var lang = iX;
    var es = new Array();
    var prefix = 'ln_';
    this.init = function() {
        eB = this.ov();
        eg.mP(prefix + iX, this.pK(iX));
        eB = this.change(eB);
    }
    ;
    this.ov = function() {
        var iC = x = window.navigator.language || navigator.browserLanguage;
        iC = iC.split(""-"")[0];
        return iC.toLowerCase();
    }
    ;
    this.change = function(fN) {
        fN = fN.toLowerCase();
        if (il.includes(fN)) {
            lang = fN;
            if (es[fN] == undefined) {
                this.tj(fN)
            }
            return fN;
        }
        return null;
    }
    ;
    this.dJ = function(gK) {
        if (es[lang] != undefined) {
            if (es[lang][gK] != undefined) {
                if (es[lang][gK] != """") {
                    return es[lang][gK];
                }
            }
        }
        if (es[iX] != undefined) {
            if (es[iX][gK] != undefined) {
                return es[iX][gK];
            }
        }
        return """";
    }
    ;
    this.pf = function(fN) {
        if (es[fN] != undefined) {
            return true;
        } else {
            return false;
        }
    }
    ;
    this.V = function(fN, dH, au) {
        if (fN != """") {
            fN = fN.toLowerCase();
            if (es[fN] == undefined) {
                es[fN] = new Array();
            }
            if (dH != """") {
                es[fN][dH] = au;
            }
        }
    }
    ;
    this.tj = function(iM) {
        eg.mP(prefix + iM, this.pK(iM));
        eg.load();
        document.addEventListener(""fileLoaded"", this.pR, false);
    }
    ;
    this.pR = function(bQ) {
        document.removeEventListener(""fileLoaded"", this.pR, false);
        for (const hK in kb) {
            if (hK.substr(0, 3) == prefix) {
                var iM = hK.substr(3, 2);
                if (es[iM] == undefined) {
                    L.rC(iM, kb[hK].response);
                }
            }
        }
        gw.mq();
    }
    ;
    this.rC = function(iM, v) {
        var v = JSON.parse(v).data;
        for (const hK in v) {
            L.V(iM, hK, v[hK]);
        }
    }
    ;
    this.pK = function(iM) {
        return 'data/lang/' + iM + '.csv'
    }
}
;var dj = {
    mC: 71,
    nn: 72,
    lu: 100,
    kR: 73,
    gW: 74,
    oZ: 75,
    oS: 76,
    mu: 76,
    nC: 77,
    oB: 78,
    oh: 79,
    ou: 80,
    nS: 101,
    md: 102,
    pP: 103,
    pr: 81,
    oH: 82,
    om: 84,
    pb: 90,
    mB: 91,
    mg: 93
};
var il = new Array('da','de','en','es','fr','it','hu','nl','no','pl','pt','ro','sv','tr');
var rV = new Array('DANSK','DEUTSCH','ENGLISH','ESPAÑOL','FRANÇAIS','ITALIANO','MAGYAR','NEDERLANDS','NORWEGIAN','POLSKI','PORTUGUÊS','ROMÂNĂ','SVENSKA','TÜRKÇE');
var L;
var eB;
var ha = "";"";
var eD = ""\r"";
var bD = ""player"";
var al = {};
var gI = 0;
var fE = 0;
var it = 0;
function cX(fU, kh, fD) {
    if (typeof fD == ""undefined"") {
        fD = 'div';
    }
    fU = document.getElementById(fU);
    if (fU != null) {
        var jd = document.createElement(fD);
        jd.id = kh;
        fU.appendChild(jd);
        return jd;
    }
    return null;
}
;function am() {
    fS = qb.any();
    if (ek != null) {
        L = new bc();
        L.init();
        dO();
        bN();
        eS.show();
        dW.show(dW.lZ);
    }
}
;function bN() {
    if (ew == undefined) {
        ew = new oM.MovieClip();
        ab.addChild(ew);
    }
    if (dW == undefined) {
        dW = new dF();
    }
    if (eE == undefined) {
        eE = aQ();
        ew.addChild(eE);
    }
    if (eS == undefined) {
        eS = dk();
        ew.addChild(eS);
    }
    if (er == undefined) {
        er = ds();
        ew.addChild(er);
    }
    if (fl == undefined) {
        fl = qN();
        ew.addChild(fl);
    }
}
;function ei() {
    qP(2)
}
;function du() {
    document.removeEventListener(""fileLoaded"", du, false);
    bq();
    rr();
}
;function rr() {
    qp = sT;
    rJ = rI;
    setTimeout(rj, 1000)
}
;function sT() {
    if (jg == 1) {
        pU();
    } else if (jg == 2) {
        pU(it);
    } else if (jg == 3) {
        dW.show(dW.mU, 2)
    }
}
;function ac(dw) {
    dw = aj(dw);
    return dw.replace(/\s/g, """").trim();
}
;function bK() {
    var bn = new oM.MovieClip().set({
        visible: false
    });
    eI(bn);
    bn.show = function() {
        gw.da = bD;
        gw.lang = eB;
        eE.sO();
        gw.mq();
        ab.setChildIndex(this, ab.children.length - 1);
        this.visible = true;
    }
    ;
    bn.hide = function() {
        eE.oA();
        eE.sn();
        this.visible = false;
    }
    ;
    return bn;
}
;function eI(fU) {
    if (ab != undefined) {
        if (gw == undefined) {
            gw = di();
            fU.addChild(gw);
        }
    }
}
;function cq(km) {
    var gg = km.getBounds();
    var jk = new oM.Shape();
    jk.graphics.setStrokeStyle(2).beginStroke(""#F00"").drawRect(0, 0, gg.width, gg.height);
    km.addChild(jk);
}
;function O(km) {
    var gg = km.getBounds();
    km.set({
        regX: parseInt(gg.width / 2),
        regY: parseInt(gg.height / 2),
        x: parseInt(ea.maxWidth / 2),
        y: parseInt(ea.maxHeight / 2)
    });
}
;function di() {
    var bn = new oM.MovieClip();
    bn.setScale = function() {
        bn.scale = fF() ? 1.8 : 1.3;
    }
    ;
    window.addEventListener('resize', bn.setScale, false);
    bn.setScale();
    bn.setBounds(0, 0, 760, 700);
    O(bn);
    bn.iq = new oM.Bitmap(kb['logoIntro']).set({
        x: 80
    });
    bn.lh = new oM.MovieClip().set({
        y: 350
    });
    var aO = new oM.Shape();
    aO.graphics.setStrokeStyle(6).beginFill(""#333"").drawRoundRect(0, 0, 760, 280, 25);
    aO.alpha = .2;
    bn.iU = new oM.Text('Nick:',""22px Helvetica"",""#EEE"").set({
        x: 30,
        y: 28,
        lineWidth: 400
    });
    bn.iU.text = L.dJ('TNI');
    var rz = new oM.MovieClip();
    var gb = new oM.Shape();
    gb.graphics.setStrokeStyle(1).beginStroke(""#FFF"").beginFill(createjs.Graphics.getRGB(255, 255, 255, .3)).drawRoundRect(0, -8, 700, 60, 16);
    rz.addChild(gb);
    var kd = sH('', '#EEE').set({
        x: 30,
        y: 64
    });
    kd.mw(rz);
    kd.fL(bD);
    jj = jK(700, 56, 3, ""#FE0"", ""#FE0"", 1);
    dV = jK(700, 56, 3, '#FC0', '#FC0', 1);
    fk = sS(700, 56, 30, ""#333"");
    su = sC(700, 56, jj, dV, fk).set({
        x: 30,
        y: 130
    });
    su.on(""click"", function() {
        jg = 1;
        bn.onClick()
    });
    ti = createjs.Graphics.getRGB(255, 255, 255, .2);
    sA = createjs.Graphics.getRGB(255, 255, 255, .01);
    jj = jK(340, 46, 1, ""#FFF"", ti, 1);
    dV = jK(340, 46, 1, '#FC0', sA, 1);
    fk = sS(340, 46, 22, ""#FC0"");
    qn = sC(340, 46, jj, dV, fk).set({
        x: 30,
        y: 200
    });
    qn.rU = '#FC0';
    qn.sF = '#FFF';
    qn.on(""click"", function() {
        jg = 2;
        bn.onClick()
    });
    jj = jK(340, 46, 1, ""#FFF"", ti, 1);
    dV = jK(340, 46, 1, '#FC0', sA, 1);
    fk = sS(340, 46, 22, ""#FC0"");
    kf = sC(340, 46, jj, dV, fk).set({
        x: 390,
        y: 200
    });
    kf.rU = '#FC0';
    kf.sF = '#FFF';
    kf.on(""click"", function() {
        jg = 3;
        bn.onClick()
    });
    bn.lh.addChild(aO, bn.iU, kd, su, qn, kf);
    bn.addChild(bn.iq, bn.lh);
    bn.onClick = function() {
        bD = ac(kd.rm());
        ak();
    }
    ;
    bn.mq = function() {
        bn.iU.text = L.dJ('TNI');
        su.fL(L.dJ('TQPL'));
        qn.fL(L.dJ('TMPL'));
        kf.fL(L.dJ('TMPR'));
    }
    ;
    return bn;
}
;function sS(gc=100, ht=56, sQ=30, dS=""#FFF"") {
    var au = new oM.Text('',""bold "" + sQ + ""px Helvetica"",dS).set({
        x: gc / 2,
        y: ht / 2,
        textBaseline: 'middle',
        textAlign: ""center""
    });
    return au;
}
;function jK(gc=100, ht=56, rO=3, tg=""#FFF"", sa='#EEE', sl=1) {
    var gb = new oM.Shape();
    gb.graphics.setStrokeStyle(rO).beginStroke(tg).beginFill(sa).drawRoundRect(0, 0, gc, ht, 16);
    gb.alpha = sl;
    return gb;
}
;function sC(gc, ht, jj, dV, fk) {
    var bn = new oM.MovieClip();
    bn.mouseChildren = false;
    bn.cursor = ""pointer"";
    bn.rU = bn.sF = '#333';
    bn.jj = jj;
    bn.dV = dV;
    bn.jj.visible = false;
    bn.au = fk;
    bn.addChild(bn.dV, bn.jj, bn.au);
    var rQ = function(e) {
        bn.dV.visible = false;
        bn.jj.visible = true;
        bn.au.color = bn.sF;
    };
    var rw = function(e) {
        bn.dV.visible = true;
        bn.jj.visible = false;
        bn.au.color = bn.rU;
    };
    bn.on(""mouseover"", rQ);
    bn.on(""mouseout"", rw);
    bn.fL = function(aJ) {
        bn.au.text = aJ;
    }
    ;
    return bn;
}
;function j(aJ) {
    aJ = aJ.toUpperCase();
    gc = 440;
    ht = 80;
    var bn = new oM.MovieClip();
    bn.mouseChildren = false;
    bn.pM = new oM.Shape();
    bn.pM.graphics.setStrokeStyle(2).beginStroke(""#666"").beginFill(""#066"").drawRoundRect(0, 0, gc, ht, 10);
    bn.pQ = new oM.Shape().set({
        x: 1,
        y: 1
    });
    bn.pQ.graphics.setStrokeStyle(2).beginStroke(""#ACC"").beginLinearGradientFill([""#8bb9b9"", ""#4a9292""], [0, 1], 0, 0, 0, ht - 6).drawRoundRect(0, 0, gc - 2, ht - 6, 10);
    bn.gf = new oM.Shape().set({
        alpha: .1,
        visible: false
    });
    bn.gf.graphics.beginFill(""#FFF"").drawRoundRect(0, 0, gc, ht - 6, 10);
    bn.gf.cache(0, 0, gc, ht - 6);
    bn.addChild(bn.pM, bn.pQ, bn.gf);
    bn.je = new oM.MovieClip();
    bn.je.au = new oM.Text(aJ,""bold 50px Helvetica"",""#FFF"").set({
        textAlign: ""center""
    }).set({
        x: gc / 2,
        y: ht / 2,
        textBaseline: 'middle'
    });
    bn.je.iG = bn.je.au.clone();
    bn.je.iG.set({
        outline: 3,
        color: ""#333""
    });
    bn.je.addChild(bn.je.iG, bn.je.au);
    bn.je.cache(0, 0, gc, ht);
    bn.addChild(bn.je);
    var sf = new createjs.Shape();
    sf.graphics.beginFill(""#000"").drawRect(0, 0, gc, ht);
    bn.hitArea = sf;
    bn.cursor = ""pointer"";
    bn.on(""mouseover"", function(e) {
        this.onMouseOver();
    });
    bn.on(""mouseout"", function(e) {
        this.onMouseOut();
    });
    bn.onMouseOver = function() {
        bn.gf.visible = true;
    }
    ;
    bn.onMouseOut = function() {
        bn.gf.visible = false;
    }
    ;
    return bn;
}
;if (!String.prototype.trim) {
    (function() {
        var pd = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
        String.prototype.trim = function() {
            return this.replace(pd, '');
        }
        ;
    }
    )();
}
function eH(gm, gg) {
    if (gm.x >= gg.x && gm.y >= gg.y && gm.x <= (gg.x + gg.width) && gm.y <= (gg.y + gg.height)) {
        return true;
    }
    return false;
}
;function df(fB) {
    if (fB == undefined) {
        return false;
    }
    if (fB.visible == false) {
        return false;
    }
    var fU = fB.parent;
    while (fU != null) {
        if (fU.visible == false) {
            return false;
        }
        fU = fU.parent;
    }
    var gm = fB.globalToLocal(ab.mouseX, ab.mouseY);
    return fB.hitTest(gm.x, gm.y);
}
;function C(aJ, lB) {
    for (var i = 0; i < lB.length; i++) {
        aJ = aJ.replace(""%s"", lB[i]);
    }
    return aJ;
}
;function aj(au) {
    return au.replace(/(<([^>]+)>)/ig, """");
}
;function fJ(dH) {
    if (document.getElementById(dH)) {
        return true;
    }
    return false;
}
;function mT(aJ) {
    return fp(gk(aJ));
}
;function lG(aJ) {
    return fs(kH(aJ));
}
;function fp(aJ) {
    try {
        return window.btoa(aJ)
    } catch (jn) {
        return aJ;
    }
}
;function kH(aJ) {
    try {
        return window.atob(aJ.trim())
    } catch (jn) {
        return aJ;
    }
}
;function gk(aJ) {
    try {
        return unescape(encodeURIComponent(aJ));
    } catch (jn) {
        return aJ;
    }
}
;function fs(aJ) {
    try {
        return decodeURIComponent(escape(aJ));
    } catch (jn) {
        return aJ;
    }
}
;var qb = {
    pG: function() {
        return navigator.userAgent.match(/Android/i) ? true : false;
    },
    pN: function() {
        return navigator.userAgent.match(/BlackBerry/i) ? true : false;
    },
    rd: function() {
        return navigator.userAgent.match(/iPhone|iPad|iPod/i) ? true : false;
    },
    opera: function() {
        return navigator.userAgent.match(/Opera Mini/i) ? true : false;
    },
    qw: function() {
        return navigator.userAgent.match(/IEMobile/i) ? true : false;
    },
    any: function() {
        return (qb.pG() || qb.pN() || qb.rd() || qb.opera() || qb.qw()) ? true : false;
    }
};
function aE(fi, ft) {
    if (typeof ft == ""undefined"") {
        ft = 0;
    }
    var result = """";
    if (fi.length > 0) {
        if (ft == 0) {
            result = fi.join(ha);
        } else {
            result = fi.splice(ft).join(ha);
        }
    }
    return result;
}
;function T() {
    var aJ = String.fromCharCode(arguments[0]);
    for (var i = 1; i < arguments.length; ++i) {
        aJ += ha + arguments[i].toString().trim();
    }
    return aJ;
}
;function h(v) {
    if (v.length > 0) {
        v = aH(v) + eD;
        var send = aN(v);
        return send;
    }
    return false;
}
;function bk() {
    if (jD) {
        az();
        aB();
        return true;
    }
    return false;
}
;function az() {
    var aW = T(dj.mC, bD, jD, eB.toUpperCase(), gP, 'N');
    h(aW);
}
;function aB() {
    var aW = T(dj.om, gP, gA);
    h(aW);
}
;function pU(dH=null, eh=null) {
    var aW;
    if (dH != null && eh != null) {
        aW = T(dj.gW, dH, eh);
    } else if (dH != null) {
        aW = T(dj.gW, dH);
    } else {
        aW = T(dj.gW);
    }
    h(aW);
}
;function bq() {
    var aW = T(dj.mg, 'A');
    h(aW);
}
;function dK(bQ) {
    if (bS(bQ.data)) {
        iy = iy + bQ.data;
        eW();
    }
}
;function eW() {
    var v = bm();
    if (v != '') {
        var kc = v.split(eD);
        for (var iS = 0; iS < kc.length; iS++) {
            var hu = kc[iS];
            if (hu.length > 0) {
                hu = bI(hu);
                hu = hu.split(eD);
                for (var ji = 0; ji < hu.length; ji++) {
                    execCommand(hu[ji]);
                }
            }
        }
    }
}
;function uC() {
    eS.show();
    dW.show(dW.lZ);
}
;function onClose(bQ) {
    dR = null;
    eE.rs();
    dW.oc();
    er.show({
        fV: L.dJ('TSHPLC'),
        fM: [{
            name: 'OK',
            path: uC
        }]
    });
}
;function ak() {
    dW.hide(dW.lZ);
    eS.show();
    ar(pO);
}
;var dR = null;
var iy = """";
function ar(lA) {
    if (aT() == false) {
        iy = """";
        var error = false;
        try {
            dR = new WebSocket(lA);
        } catch (e) {
            error = true;
        }
        if (error == false) {
            bp();
        }
    }
}
;function tf() {
    sb();
    try {
        dR.close();
        dR = null;
    } catch (jn) {}
}
;function bp() {
    dR.onopen = bk;
    dR.onmessage = dK;
    dR.onclose = onClose
}
;function sb() {
    try {
        dR.onopen = null;
        dR.onmessage = null;
        dR.onclose = null
    } catch (jn) {}
}
;function bm() {
    if (iy.indexOf(eD) > (-1)) {
        var ll = iy.split(eD);
        iy = ll.pop();
        return ll.join(eD);
    }
    return """";
}
;function aN(v) {
    if (aT()) {
        try {
            dR.send(v);
        } catch (e) {
            return false;
        }
        return true;
    }
    return false;
}
;function aT() {
    if (dR != null) {
        if (dR.readyState == 1) {
            return true;
        }
    }
    return false;
}
;function bS(v) {
    if (typeof v == 'string') {
        if (v.length > 0) {
            return true;
        }
    }
    return false;
}
;var cN = new dr();
function dr() {
    var ez = [];
    this.mute = false;
    this.kY = function(cg, lm) {
        var iF = new Audio(lm);
        if (iF.error == null) {
            ez[parseInt(cg)] = iF;
        }
    }
    ;
    this.play = function(cg, time) {
        if (typeof time == ""undefined"") {
            time = 0;
        }
        if (this.fW(cg)) {
            if (this.oa(cg) == true) {
                this.stop(cg);
            }
            var jS = ez[cg].play();
            if (jS !== undefined) {
                jS.then(function() {}).catch(function(error) {});
            }
        }
    }
    ;
    this.stop = function(cg) {
        if (this.fW(cg)) {
            ez[cg].pause();
            ez[cg].currentTime = 0;
        }
    }
    ;
    this.kU = function(cg, oq, mJ) {
        if (this.fW(cg)) {
            for (var i = 0; i < oq; i++) {
                setTimeout(function() {
                    cN.play(cg);
                }, mJ * i);
            }
        }
    }
    ;
    this.ph = function(jP) {
        this.mute = jP;
        for (var cg in ez) {
            if (this.fW(cg)) {
                ez[cg].mute = jP;
            }
        }
    }
    ;
    this.fW = function(cg) {
        if (ez[cg]) {
            if (ez[cg].error == null) {
                return true;
            }
        }
        return false;
    }
    ;
    this.oa = function(cg) {
        if (this.fW(cg)) {
            if (ez[cg].duration > 0 && !ez[cg].paused) {
                return true;
            }
            return false;
        }
    }
}
;function ix(dw) {
    var gv = dw;
    this.da = dw;
    this.pos = 1;
    this.fj = 0;
    this.eQ = false;
    this.el = 0;
    this.fa = 0;
    this.lq = false;
    this.jf = false;
    this.fO = true;
    this.jB = """";
    this.jY;
    this.or = function() {
        this.jB = Number(this.fO) + this.da.toLowerCase();
    }
    ;
    this.oQ = function() {
        this.iZ(0);
        this.fa = 0;
        this.gs(false);
    }
    ;
    this.nX = function() {
        this.gs(false);
    }
    ;
    this.mW = function() {
        this.lq = false;
        this.eQ = false;
        this.el = 0;
        this.gq(false);
    }
    ;
    this.iZ = function(v) {
        this.fj = v;
    }
    ;
    this.kL = function(v) {
        this.eQ = true;
        this.fa++;
        this.el = v;
    }
    ;
    this.oC = function(v) {
        this.pos = v;
    }
    ;
    this.oO = function(v) {
        this.lq = v;
        if (v == true) {
            this.gs(true);
        }
    }
    ;
    this.gs = function(v) {
        if (v == 0) {
            this.jf = false;
        }
        if (v == 1) {
            this.jf = true;
        }
    }
    ;
    this.gq = function(v) {
        if (v == 0) {
            this.fO = false;
        }
        if (v == 1) {
            this.fO = true;
        }
    }
}
;function nr() {
    var gM = [];
    this.np = function(dw) {
        if (gM.indexOf(dw) == (-1)) {
            gM.push(dw);
        }
    }
    ;
    this.nb = function(dw) {
        var ft = gM.indexOf(dw);
        if (ft > (-1)) {
            gM.splice(ft, 1);
        }
    }
    ;
    this.kt = function(dw) {
        if (gM.indexOf(dw) > (-1)) {
            return true;
        }
        return false;
    }
}
;function sY(dS) {
    if (eV != dS) {
        if (dS.charAt(0) == ""#"") {
            dS = dS.substr(1);
        }
        if (dS.length == 3) {
            var oK = dS.charAt(0) + dS.charAt(0);
            var oz = dS.charAt(1) + dS.charAt(1);
            var nU = dS.charAt(2) + dS.charAt(2);
            eV = oK + oz + nU;
        } else if (dS.length == 6) {
            eV = dS;
        } else {
            eV = kB;
        }
        et.nR(eV);
    }
}
;var eT = new Array();
var gx;
var fm;
var hc;
var hE;
var fg;
var hH;
var fr;
var gd;
var gZ;
var hs;
var hD;
function H(he) {
    eT.push(he);
    if (eT.length == 1) {
        kp();
    }
}
;function ah() {
    if (eT.length > 0) {
        eT.splice(0, 1);
        kp();
    }
}
;function kp() {
    if (eT.length > 0) {
        eT[0].show();
    }
}
;function iA() {
    eT = new Array();
}
;function l() {
    if (ab != undefined) {
        gx.hide();
        fm.hide();
        fg.hide();
        hE.hide();
        hH.hide();
        fr.hide();
        io.hide();
        et.hide();
        gH.hide();
        gd.hide()
    }
}
;function as() {
    var bn = new oM.MovieClip().set({
        y: 120,
        scale: 860 / 900
    });
    bn.maxWidth = 900;
    bn.maxHeight = 900;
    bn.ks = new oM.MovieClip();
    var aO = new oM.Shape();
    aO.graphics.beginFill(""#FFF"").drawRect(0, 0, bn.maxWidth, bn.maxHeight);
    bn.ks.addChild(aO);
    bn.ks.cache(0, 0, bn.maxWidth, bn.maxHeight);
    bn.ks.mouseChildren = false;
    bn.jU = new oM.MovieClip();
    var ob = new oM.Shape();
    ob.cache(0, 0, this.maxWidth, this.maxHeight);
    bn.jU.addChild(ob);
    bn.jU.mouseChildren = false;
    bn.addChild(bn.ks, bn.jU);
    bn.nF = function() {
        ob.graphics.clear();
        ob.cache(0, 0, this.maxWidth, this.maxHeight);
    }
    ;
    bn.rk = function() {
        ob.updateCache(""source-overlay"");
        ob.graphics.clear();
    }
    ;
    bn.dz = function(kO, dS, hy, en, eU) {
        var lg = new oM.Point((hy.x + en.x) / 2,(hy.y + en.y) / 2);
        var kV = new oM.Point((en.x + eU.x) / 2,(en.y + eU.y) / 2);
        ob.graphics.beginStroke(dS).setStrokeStyle(kO, 'round', 'round').moveTo(lg.x, lg.y).quadraticCurveTo(en.x, en.y, kV.x, kV.y);
        this.rk();
    }
    ;
    bn.show = function() {
        ab.setChildIndex(this, ab.children.length - 1);
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function cY() {
    var bn = new oM.Bitmap(kb['timeout']).set({
        regX: 200,
        regY: 200,
        x: 450,
        y: 450,
        visible: false
    });
    bn.show = function() {
        ab.setChildIndex(this, ab.children.length - 1);
        this.set({
            scale: .3,
            alpha: 0,
            visible: true
        });
        var bW = oM.Tween.get(this, {
            override: true
        }).to({
            scale: .5,
            alpha: 1
        }, 500, oM.Ease.elasticOut).wait(3000).to({
            scale: 0,
            alpha: 0,
            visible: false
        }, 400, oM.Ease.backIn).call(this.fH);
    }
    ;
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    return bn;
}
;function cA() {
    var bn = new oM.MovieClip().set({
        regX: 500,
        regY: 130,
        x: 450,
        y: 450,
        visible: false
    });
    var gz = new oM.Shape();
    gz.graphics.setStrokeStyle(4).beginStroke(""#C4C48A"").beginFill(""#D0D0A8"").drawRoundRect(0, 0, 1000, 260, 35);
    var iB = new oM.Bitmap(kb['icomsg']).set({
        x: 10,
        y: 30
    });
    var au = new oM.Text(au,""bold 64px Helvetica"",""#666"").set({
        textAlign: ""center"",
        lineWidth: 780,
        textBaseline: 'middle',
        x: 600,
        y: 120
    });
    bn.addChild(gz);
    bn.addChild(iB);
    bn.addChild(au);
    bn.shadow = new oM.Shadow(""#CCC"",2,2,5);
    bn.cache(-5, -5, 1100, 300);
    bn.show = function(aJ) {
        if (this.visible == true) {
            if (au.text == aJ) {
                return;
            }
        }
        this.fL(aJ);
        if (this.cacheID != null) {
            this.updateCache();
        }
        ab.setChildIndex(this, ab.children.length - 1);
        this.set({
            scale: .5,
            alpha: 0,
            visible: true
        });
        var bW = oM.Tween.get(this, {
            override: true
        }).to({
            scale: .7,
            alpha: 1
        }, 500, oM.Ease.elasticOut);
        oM.Ticker.on(""tick"", this.bM);
    }
    ;
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        this.visible = false;
        this.fL('');
        oM.Ticker.removeEventListener(""tick"", this.bM);
    }
    ;
    bn.fL = function(aJ) {
        au.text = aJ;
    }
    ;
    bn.bM = function() {
        if (ab.getChildIndex(bn) < (ab.children.length - 1)) {
            ab.setChildIndex(bn, ab.children.length - 1);
        }
    }
    ;
    return bn;
}
;function cs() {
    var hf = 4;
    var bn = new oM.MovieClip().set({
        regX: 200,
        regY: 200,
        x: 900 / 2,
        y: 900 / 2,
        visible: false
    });
    var gL = new oM.Bitmap(kb['sknum1']);
    var gE = new oM.Bitmap(kb['sknum2']);
    var hA = new oM.Bitmap(kb['sknum3']);
    bn.addChild(gL);
    bn.addChild(gE);
    bn.addChild(hA);
    bn.ow = function() {
        if (gL.cacheID == null) {
            gL.cache(0, 0, 400, 400);
            gE.cache(0, 0, 400, 400);
            hA.cache(0, 0, 400, 400);
        }
    }
    ;
    bn.show = function() {
        oM.Tween.removeTweens(this);
        this.ow();
        hf = 4;
        this.visible = true;
        this.im();
    }
    ;
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.im = function() {
        if (this.visible == true) {
            hf--;
            if (hf > 0) {
                this.oy(hf);
                if (fg.visible == true) {
                    cN.play(9, 100);
                }
                this.set({
                    scale: .5,
                    alpha: 0,
                    visible: true
                });
                var bW = oM.Tween.get(this, {
                    override: true
                }).to({
                    scale: .6,
                    alpha: 1
                }, 500, oM.Ease.elasticOut).wait(500).call(this.im);
            } else {
                if (fg.visible == true) {
                    cN.play(9);
                }
                this.visible = false;
            }
        }
    }
    ;
    bn.oy = function(bY) {
        gL.visible = gE.visible = hA.visible = false;
        switch (bY) {
        case 1:
            gL.visible = true;
            break;
        case 2:
            gE.visible = true;
            break;
        case 3:
            hA.visible = true;
            break;
        }
    }
    ;
    return bn;
}
;function gn() {
    var js = 80;
    var bn = new oM.MovieClip().set({
        visible: false
    });
    var iB = new oM.Bitmap(kb['icoArtisName']).set({
        x: 0,
        y: 0,
        scale: js / 200
    });
    var au = new oM.Text("""",""bold 60px Helvetica"",""#333333"").set({
        x: js + 20,
        y: 40,
        textBaseline: 'middle'
    });
    bn.addChild(iB);
    bn.addChild(au);
    bn.shadow = new oM.Shadow(""#BBB"",4,4,10);
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.fL = function(aJ) {
        au.text = aJ;
        var ml = this.getBounds().width;
        var nY = parseInt((900 - ml) / 2);
        this.x = nY;
        this.y = 130;
    }
    ;
    return bn;
}
;function ef() {
    var bE = new oM.MovieClip();
    var shape = new oM.Shape();
    shape.graphics.beginRadialGradientFill([""#FFF"", ""#BBB""], [0, 1], 450, 450, 0, 450, 450, 450).drawRect(0, 0, 900, 900);
    bE.addChild(shape);
    bE.cache(0, 0, 900, 900);
    return bE;
}
;function gU() {
    var bn = new oM.MovieClip().set({
        visible: false
    });
    var nH = ef();
    var gi = gn();
    var hN = cs();
    bn.addChild(nH, gi, hN);
    bn.show = function() {
        l();
        ab.setChildIndex(this, ab.children.length - 1);
        gi.fL(ev);
        gi.set({
            y: 160,
            alpha: 0,
            visible: true
        });
        var bW = oM.Tween.get(gi, {
            override: true
        }).wait(500).to({
            y: 200,
            alpha: 1
        }, 400, oM.Ease.kj);
        this.set({
            alpha: 0,
            visible: true
        });
        var bW = oM.Tween.get(this, {
            override: true
        }).to({
            alpha: 1
        }, 300, oM.Ease.linear);
        this.fH();
    }
    ;
    bn.hide = function() {
        if (this.visible == true) {
            gi.visible = false;
            hN.visible = false;
            oM.Tween.removeTweens(this);
            this.set({
                alpha: 1,
                visible: true
            });
            var bW = oM.Tween.get(this, {
                override: true
            }).to({
                alpha: 0,
                visible: false
            }, 300, oM.Ease.linear);
        }
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    bn.nV = function() {
        hN.show();
    }
    ;
    return bn;
}
;function hB() {
    var cd = new Array();
    var bn = new oM.MovieClip().set({
        scale: 900 / 500,
        visible: false
    });
    var eb = 25;
    var ja = 10;
    var eK = eb + ja;
    var fX = 400;
    bn.show = function() {
        if (this.visible == false) {
            l();
            ab.setChildIndex(this, ab.children.length - 1);
            this.removeAllChildren();
            bn.addChild(this.fh());
            for (var i = 0; i < cd.length; i++) {
                if ((i % 2) == 0) {
                    cd[i].x = (-500);
                } else {
                    cd[i].x = 500;
                }
                cd[i].y = (i * eK);
                var bW = oM.Tween.get(cd[i], {
                    override: true
                }).to({
                    x: -210
                }, 50 * (i + 1), oM.Ease.sineOut).call(this.fH);
            }
            cN.kU(15, cd.length, 50);
            this.visible = true;
        }
    }
    ;
    bn.hide = function() {
        this.removeAllChildren();
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.fh = function() {
        cd = new Array();
        var fz = bF();
        var fB = new oM.MovieClip().set({
            x: 250,
            y: 50
        });
        for (var i = 0; i < fz.length; i++) {
            var id = fz[i];
            if (al[id].fO == false) {
                var eZ = new oM.MovieClip();
                var bE = this.jw(id);
                eZ.addChild(bE);
                if (al[id].eQ == true) {
                    var bE = this.iE(id);
                    bE.set({
                        x: 212,
                        y: -1
                    });
                    eZ.addChild(bE);
                }
                var bE = this.ij(id);
                bE.set({
                    x: 250
                });
                eZ.addChild(bE);
                var bE = this.oJ(id);
                bE.set({
                    x: 340
                });
                eZ.addChild(bE);
                eZ.cache(-5, -10, 440, 45, 4);
                cd.push(eZ);
                fB.addChild(eZ);
            }
        }
        if ((cd.length * eK) > fX) {
            fB.scale = fX / (cd.length * eK);
        }
        return fB;
    }
    ;
    bn.jw = function(id) {
        var bE = new oM.MovieClip().set({
            visible: true
        });
        var shape = new oM.Shape();
        shape.graphics.setStrokeStyle(4).beginStroke(""#333"").beginFill(""#333"").drawRoundRect(0, 0, 200, eb, 12);
        shape.set({
            x: 0,
            y: 0
        });
        var dM = ""#FFF"";
        if (al[id].da == bD) {
            dM = ""#ffd862"";
        }
        var bZ = new oM.Text(al[id].pos,""bold 20px Fjalla One"",dM).set({
            x: 15,
            y: 15,
            maxWidth: 30,
            textBaseline: 'middle'
        });
        var ee = new oM.Text(al[id].da,""bold 20px Helvetica"",dM).set({
            x: 180,
            y: 13,
            textAlign: ""right"",
            maxWidth: 140,
            textBaseline: 'middle'
        });
        bE.addChild(shape, bZ, ee);
        return bE;
    }
    ;
    bn.iE = function(id) {
        var bE = aw();
        bE.set({
            scale: .8
        });
        bE.fL(al[id].el);
        bE.visible = true;
        return bE;
    }
    ;
    bn.ij = function(id) {
        var bE = new oM.MovieClip().set({
            visible: true
        });
        var shape = new oM.Shape();
        shape.graphics.setStrokeStyle(4).beginStroke(""#333"").beginFill(""#333"").drawRoundRect(0, 0, 80, eb, 12);
        var dM = ""#FFF"";
        if (al[id].da == bD) {
            dM = ""#ffd862"";
        }
        var bZ = new oM.Text(al[id].fj,""bold 22px Helvetica"",dM).set({
            textAlign: ""center"",
            lineWidth: 100,
            textBaseline: 'middle',
            x: 40,
            y: 13
        });
        bE.addChild(shape, bZ);
        return bE;
    }
    ;
    bn.oJ = function(id) {
        var bE = new oM.MovieClip().set({
            visible: true
        });
        var shape = new oM.Shape();
        shape.graphics.setStrokeStyle(4).beginStroke(""#333"").beginFill(""#333"").drawRoundRect(0, 0, 80, eb, 12);
        var dM = ""#FFF"";
        if (al[id].da == bD) {
            dM = ""#ffd862"";
        }
        var bZ = new oM.Text(al[id].fa,""bold 22px Helvetica"",dM).set({
            textAlign: ""center"",
            lineWidth: 100,
            textBaseline: 'middle',
            x: 40,
            y: 13
        });
        bE.addChild(shape, bZ);
        return bE;
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    return bn;
}
;function dh() {
    var cd = new Array();
    var bn = new oM.MovieClip().set({
        scale: 900 / 500,
        visible: false
    });
    var kk = new oM.Bitmap(kb['bgwins']);
    kk.cache(0, 0, 500, 500);
    var eb = 25;
    var ja = 10;
    var eK = eb + ja;
    var fX = 400;
    bn.show = function() {
        if (this.visible == false) {
            l();
            ab.setChildIndex(this, ab.children.length - 1);
            this.removeAllChildren();
            bn.addChild(kk);
            var fz = bF();
            if (fz.length > 0) {
                var cD = al[fz[0]];
                if (cD.fO == false) {
                    var aJ = C(L.dJ('THG'), [cD.da]);
                    var lv = new oM.Text(aJ,""bold 28px Helvetica"",""#333"").set({
                        textAlign: ""center"",
                        maxWidth: 480,
                        textBaseline: 'middle',
                        x: 250,
                        y: 24
                    });
                    bn.addChild(lv);
                }
            }
            this.set({
                alpha: 0,
                visible: true
            });
            var bW = oM.Tween.get(this, {
                override: true
            }).to({
                alpha: 1
            }, 300, oM.Ease.linear).call(this.pk);
            this.visible = true;
        }
    }
    ;
    bn.hide = function() {
        this.removeAllChildren();
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.pk = function() {
        bn.addChild(this.fh());
        for (var i = 0; i < cd.length; i++) {
            cd[i].x = (-210);
            cd[i].y = 2000;
            var bW = oM.Tween.get(cd[i], {
                override: true
            }).to({
                y: (i * eK)
            }, 100 * (i + 1), oM.Ease.sineOut).call(this.fH);
        }
        cN.kU(15, cd.length, 100);
    }
    ;
    bn.fh = function() {
        cd = new Array();
        var fz = bF();
        var fB = new oM.MovieClip().set({
            x: 250,
            y: 50
        });
        for (var i = 0; i < fz.length; i++) {
            var id = fz[i];
            if (al[id].fO == false) {
                var eZ = new oM.MovieClip();
                var bE = this.jw(id);
                eZ.addChild(bE);
                var bE = this.iE(id);
                bE.set({
                    x: 210
                });
                eZ.addChild(bE);
                var bE = this.ij(id);
                bE.set({
                    x: 320
                });
                eZ.addChild(bE);
                eZ.cache(-5, -10, 440, 45, 4);
                cd.push(eZ);
                fB.addChild(eZ);
            }
        }
        if ((cd.length * eK) > fX) {
            fB.scale = fX / (cd.length * eK);
        }
        return fB;
    }
    ;
    bn.jw = function(id) {
        var bE = new oM.MovieClip().set({
            visible: true
        });
        var shape = new oM.Shape();
        shape.graphics.setStrokeStyle(4).beginStroke(""#333"").beginFill(""#333"").drawRoundRect(0, 0, 200, eb, 2);
        shape.set({
            x: 0,
            y: 0
        });
        var dM = ""#FFF"";
        if (al[id].da == bD) {
            dM = ""#ffd862"";
        }
        var bZ = new oM.Text(al[id].pos,""bold 20px Fjalla One"",dM).set({
            x: 15,
            y: 14,
            maxWidth: 30,
            textBaseline: 'middle'
        });
        var ee = new oM.Text(al[id].da,""bold 20px Helvetica"",dM).set({
            x: 180,
            y: 13,
            textAlign: ""right"",
            maxWidth: 140,
            textBaseline: 'middle'
        });
        bE.addChild(shape, bZ, ee);
        return bE;
    }
    ;
    bn.iE = function(id) {
        var bE = new oM.MovieClip().set({
            visible: true
        });
        var shape = new oM.Shape();
        shape.graphics.setStrokeStyle(4).beginStroke(""#333"").beginFill(""#333"").drawRoundRect(0, 0, 100, eb, 2);
        var dM = ""#FFF"";
        if (al[id].da == bD) {
            dM = ""#ffd862"";
        }
        var bZ = new oM.Text(al[id].fj,""bold 22px Helvetica"",dM).set({
            textAlign: ""center"",
            lineWidth: 100,
            textBaseline: 'middle',
            x: 50,
            y: 13
        });
        bE.addChild(shape, bZ);
        return bE;
    }
    ;
    bn.ij = function(id) {
        var bE = new oM.MovieClip().set({
            visible: true
        });
        var shape = new oM.Shape();
        shape.graphics.setStrokeStyle(4).beginStroke(""#333"").beginFill(""#333"").drawRoundRect(0, 0, 100, eb, 2);
        var dM = ""#FFF"";
        if (al[id].da == bD) {
            dM = ""#ffd862"";
        }
        var bZ = new oM.Text(al[id].fa,""bold 22px Helvetica"",dM).set({
            textAlign: ""center"",
            lineWidth: 100,
            textBaseline: 'middle',
            x: 50,
            y: 13
        });
        bE.addChild(shape, bZ);
        return bE;
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    return bn;
}
;function cT() {
    var bn = new oM.Bitmap(kb['fault']).set({
        regX: 100,
        regY: 100,
        x: gD.maxWidth - 45,
        y: 55,
        scale: .5,
        visible: false
    });
    bn.cache(0, 0, 200, 200);
    bn.on('click', ap);
    bn.show = function() {
        ab.setChildIndex(this, ab.children.length - 1);
        this.visible = true;
    }
    ;
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    return bn;
}
;function dA() {
    this.jR = function(clip, borderColor) {
        var gy = clip.clone();
        gy.set({
            outline: 2,
            color: borderColor
        });
        gy.shadow = new oM.Shadow(""#C79F27"",4,4,10);
        return gy;
    }
    ;
    var bn = new oM.MovieClip().set({
        regX: 250,
        regY: 250,
        x: 900 / 2,
        y: 900 / 2,
        visible: false
    });
    var eO = new oM.Bitmap(kb['hitword-star']).set({
        regX: 250,
        regY: 250,
        x: 250,
        y: 250
    });
    var fb = new oM.Bitmap(kb['hitword1']).set({
        regX: 100,
        regY: 100,
        x: 120,
        y: 130
    });
    var fc = new oM.Bitmap(kb['hitword2']).set({
        regX: 100,
        regY: 100,
        x: 440,
        y: 310
    });
    eO.cache(0, 0, eO.getBounds().width, eO.getBounds().height);
    fb.cache(0, 0, fb.getBounds().width, fb.getBounds().height);
    fc.cache(0, 0, fc.getBounds().width, fc.getBounds().height);
    var bZ = new oM.Text(""22"",""bold 40px Helvetica"",""#333"").set({
        textAlign: ""center"",
        textBaseline: 'middle',
        x: 250,
        y: 220
    });
    var hZ = this.jR(bZ, '#FFF');
    var ee = new oM.Text(""22"",""bold 120px Fjalla One"",""#FFF"").set({
        textAlign: ""center"",
        textBaseline: 'middle',
        x: 250,
        y: 310
    });
    var iW = this.jR(ee, '#333');
    bn.addChild(eO, fb, fc, hZ, bZ, iW, ee);
    bn.show = function() {
        ab.setChildIndex(this, ab.children.length - 1);
        this.lU();
        this.set({
            scale: 1.6,
            alpha: 1,
            visible: true
        });
        eO.set({
            scale: .7,
            alpha: 0,
            visible: true
        });
        fb.set({
            scale: .2,
            alpha: 0,
            visible: true
        });
        fc.set({
            scale: .2,
            alpha: 0,
            visible: true
        });
        var bW = oM.Tween.get(fb, {
            override: true
        }).to({
            scale: 1,
            alpha: 1
        }, 500, oM.Ease.elasticOut).call(this.ot);
        var bW = oM.Tween.get(fc, {
            override: true
        }).wait(200).to({
            scale: 1,
            alpha: 1
        }, 500, oM.Ease.elasticOut);
        var bW = oM.Tween.get(eO, {
            override: true
        }).wait(400).to({
            scale: 1,
            alpha: 1
        }, 500, oM.Ease.elasticOut);
        var bW = oM.Tween.get(this, {
            override: true
        }).wait(4000).to({
            scale: 0,
            alpha: 0,
            visible: false
        }, 300, oM.Ease.backIn).call(this.fH);
    }
    ;
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        this.visible = false;
    }
    ;
    bn.lU = function() {
        hZ.set({
            text: cj.toUpperCase(),
            visible: false
        });
        bZ.set({
            text: cj.toUpperCase(),
            visible: false
        });
        iW.set({
            text: al[bD].el,
            visible: false
        });
        ee.set({
            text: al[bD].el,
            visible: false
        });
    }
    ;
    bn.ot = function() {
        hZ.visible = true;
        bZ.visible = true;
        iW.visible = true;
        ee.visible = true;
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    return bn;
}
;function cL() {
    var kG = '';
    var bn = new oM.MovieClip().set({
        regX: 6,
        regY: 24,
        visible: false
    });
    bn.mouseChildren = false;
    var hi = new oM.Shape();
    var ta = hi.graphics.beginFill(""black"").command;
    hi.graphics.drawRect(0, 0, 300, 36);
    hi.set({
        x: 68,
        y: 7
    });
    var sD = new oM.Bitmap(kb['pencil']);
    bn.addChild(hi, sD);
    bn.cache(0, 0, 400, 50);
    hi.visible = sD.visible = false;
    bn.move = function(gm) {
        gm.x = parseInt(gm.x);
        gm.y = parseInt(gm.y);
        if (bn.x != gm.x || bn.y != gm.y) {
            bn.x = gm.x;
            bn.y = gm.y;
            bn.sg();
        }
    }
    ;
    bn.sg = function() {
        var ii = 480 / gD.maxHeight;
        var te = 10 - ((bn.y * ii) / 7);
        te = te.toFixed(1);
        if (bn.rotation != te) {
            bn.rotation = te;
        }
    }
    ;
    bn.nR = function() {
        if (eV != kG) {
            kG = eV;
            ta.style = ""#"" + eV;
            if (bn.cacheID != null) {
                hi.visible = sD.visible = true;
                bn.updateCache();
                hi.visible = sD.visible = false;
            }
        }
    }
    ;
    bn.show = function() {
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function cu() {
    this.oG = function(dS) {
        var hv = new oM.Shape();
        hv.graphics.beginFill(dS).drawRoundRect(0, 0, 50, 50, 0);
        hv.cache(0, 0, 50, 50);
        return hv;
    }
    ;
    this.rectangle = function(type) {
        var bE = new oM.MovieClip();
        var gb = new oM.Shape();
        if (type == 1) {
            gb.graphics.setStrokeStyle(6).beginStroke('#993').beginFill('#EEB').drawRoundRect(0, 0, 100, 100, 10);
            bE.addChild(gb);
        } else {
            gb.graphics.setStrokeStyle(6).beginStroke('#F63').drawRoundRect(0, 0, 100, 100, 10);
            bE.addChild(gb);
            bE.visible = false;
        }
        return bE;
    }
    ;
    this.circle = function(ratio) {
        var gb = new oM.Shape();
        gb.graphics.beginFill('#333').drawCircle(50, 50, ratio);
        return gb;
    }
    ;
    this.jl = function(ratio) {
        var bE = new oM.MovieClip().set({
            cursor: ""pointer"",
            mouseChildren: false
        });
        var jy = rectangle(1);
        var eN = rectangle(2);
        var ly = circle(ratio);
        jy.addChild(ly);
        jy.cache(-3, -3, 106, 106);
        eN.cache(-3, -3, 106, 106);
        bE.addChild(jy, eN);
        bE.onMouseOver = function(bQ) {
            eN.visible = true;
        }
        ;
        bE.onMouseOut = function(bQ) {
            eN.visible = false;
        }
        ;
        return bE;
    }
    ;
    this.sj = function(mo) {
        var bE = new oM.MovieClip().set({
            cursor: ""pointer"",
            mouseChildren: false
        });
        var jy = rectangle(1);
        var eN = rectangle(2);
        var jV = new oM.Bitmap(mo);
        jy.addChild(jV);
        jy.cache(-3, -3, 106, 106);
        eN.cache(-3, -3, 106, 106);
        bE.addChild(jy, eN);
        bE.onMouseOver = function(bQ) {
            eN.visible = true;
        }
        ;
        bE.onMouseOut = function(bQ) {
            eN.visible = false;
        }
        ;
        return bE;
    }
    ;
    this.rG = function() {
        var bE = new oM.MovieClip().set({
            cursor: ""pointer"",
            mouseChildren: false
        });
        var rZ = new oM.Shape();
        rZ.graphics.setStrokeStyle(3).beginStroke(""#CC8"").beginFill(""#EEC"").drawRect(0, 0, 100, 100);
        rZ.alpha = .01;
        var rK = new oM.Bitmap(kb['tool-exit']);
        var mi = new oM.MovieClip().set({
            visible: false
        });
        var sy = new oM.Bitmap(kb['tool-exit']);
        mi.addChild(sy);
        mi.filters = [new createjs.ColorFilter(0,0,0,1,255,102,51,0)];
        mi.cache(0, 0, 100, 100);
        bE.addChild(rZ, rK, mi);
        bE.onMouseOver = function(bQ) {
            mi.visible = true;
        }
        ;
        bE.onMouseOut = function(bQ) {
            mi.visible = false;
        }
        ;
        return bE;
    }
    ;
    var bn = new oM.MovieClip().set({
        scale: .5,
        visible: false
    });
    var mN = new oM.Shape();
    mN.graphics.setStrokeStyle(4).beginStroke(""#993"").beginFill(""#CC5"").drawRoundRectComplex(0, 0, 1100, 140, 0, 0, 70, 0);
    mN.cache(0, 0, 1100, 140);
    mN.set({
        x: (-2),
        y: (-2)
    });
    mN.cursor = 'default';
    var lz = sj(kb['tool-cl']).set({
        x: 60,
        y: 18
    });
    lz.on(""click"", function(bQ) {
        cU();
    });
    var rR = jl(6).set({
        x: 600,
        y: 18
    });
    rR.on(""click"", function(bQ) {
        eR = 3;
    });
    var sd = jl(12).set({
        x: 710,
        y: 18
    });
    sd.on(""click"", function(bQ) {
        eR = 6;
    });
    var si = jl(18).set({
        x: 820,
        y: 18
    });
    si.on(""click"", function(bQ) {
        eR = 9;
    });
    var dp = rG().set({
        x: 950,
        y: 18
    });
    dp.on(""click"", function(bQ) {
        co();
    });
    bn.addChild(mN, lz, rR, sd, si, dp);
    bn.on(""rollover"", function(bQ) {
        bn.sJ()
    });
    bn.on(""rollout"", function(bQ) {
        bn.sK()
    });
    var ju = new Array('F00','F90','FF0','393','09F','04C','F0F','666','B00','963','AA0','272','06A','035','939','000');
    for (var i = 0; i < ju.length; i++) {
        var hz = this.oG('#' + ju[i]);
        var ep = 180 + (50 * (i % 8));
        var fd = 18;
        if (i >= 8) {
            fd = 68;
        }
        hz.set({
            x: ep,
            y: fd,
            cursor: 'pointer'
        });
        hz.dS = ju[i];
        bn.addChild(hz);
        hz.on(""click"", function(bQ) {
            sY(this.dS);
        });
    }
    bn.sJ = function() {
        lz.on(""mouseover"", lz.onMouseOver);
        lz.on(""mouseout"", lz.onMouseOut);
        rR.on(""mouseover"", rR.onMouseOver);
        rR.on(""mouseout"", rR.onMouseOut);
        sd.on(""mouseover"", sd.onMouseOver);
        sd.on(""mouseout"", sd.onMouseOut);
        si.on(""mouseover"", si.onMouseOver);
        si.on(""mouseout"", si.onMouseOut);
        dp.on(""mouseover"", dp.onMouseOver);
        dp.on(""mouseout"", dp.onMouseOut);
    }
    ;
    bn.sK = function() {
        lz.off(""mouseover"", lz.onMouseOver);
        lz.off(""mouseout"", lz.onMouseOut);
        rR.off(""mouseover"", rR.onMouseOver);
        rR.off(""mouseout"", rR.onMouseOut);
        sd.off(""mouseover"", sd.onMouseOver);
        sd.off(""mouseout"", sd.onMouseOut);
        si.off(""mouseover"", si.onMouseOver);
        si.off(""mouseout"", si.onMouseOut);
        dp.off(""mouseover"", dp.onMouseOver);
        dp.off(""mouseout"", dp.onMouseOut);
    }
    ;
    bn.show = function() {
        if (this.visible == false) {
            this.set({
                y: -140,
                visible: true
            });
            var bW = oM.Tween.get(this, {
                override: true
            }).to({
                y: 120
            }, 300, oM.Ease.kj);
        }
    }
    ;
    bn.hide = function() {
        oM.Tween.removeTweens(this);
        if (this.visible == true) {
            this.set({
                y: 0,
                visible: true
            });
            var bW = oM.Tween.get(this, {
                override: true
            }).to({
                y: -140,
                visible: false
            }, 100, oM.Ease.mZ);
        }
        bn.sK();
    }
    ;
    return bn;
}
;function oU() {
    this.lX = function(au) {
        var bE = new oM.MovieClip();
        var fR = 280;
        var iu = 60;
        au = au.toUpperCase();
        bE.word = au;
        var fq = new oM.Shape();
        fq.graphics.setStrokeStyle(2).beginStroke(""#993"").beginFill(""#FFF"").drawRect(0, 0, fR, iu);
        fq.set({
            alpha: .9
        });
        bE.je = new oM.Text(au,""bold 38px Helvetica"",""#333"").set({
            textAlign: ""center"",
            maxWidth: fR - 4,
            textBaseline: 'middle'
        });
        bE.je.set({
            x: (fR / 2),
            y: (iu / 2)
        });
        bE.addChild(fq, bE.je);
        bE.on(""click"", function(bQ) {
            ps(this);
        });
        bE.on(""mouseover"", function(bQ) {
            fq.alpha = 1;
        });
        bE.on(""mouseout"", function(bQ) {
            fq.alpha = .9;
        });
        bE.cursor = ""pointer"";
        return bE;
    }
    ;
    this.oI = function(dY) {
        for (var i = 0; i < dY.length; i++) {
            if (dY[i] != """") {
                var gC = lX(dY[i]);
                gC.set({
                    x: (280 * i),
                    alpha: .7
                });
                gC.lE = (i + 1);
                fP.addChild(gC);
                gC.set({
                    alpha: 0,
                    visible: true
                });
                var bW = oM.Tween.get(gC, {
                    override: true
                }).wait(100 * (i + 1)).to({
                    alpha: 1
                }, 200, oM.Ease.linear);
            }
        }
    }
    ;
    var bn = new oM.MovieClip().set({
        y: 180,
        visible: false
    });
    var qm = new oM.Shape();
    qm.graphics.setStrokeStyle(2).beginStroke(""#993"").beginFill(""#CC5"").drawRect(0, 0, 860, 80);
    var dM = ""#FFF"";
    var fP = new oM.MovieClip();
    fP.set({
        x: 10,
        y: 10
    });
    bn.addChild(qm);
    bn.addChild(fP);
    bn.show = function(dY) {
        if (dY.join("""") != """") {
            fP.removeAllChildren();
            oI(dY);
            ab.setChildIndex(this, ab.children.length - 1);
            this.set({
                y: 0,
                visible: true
            });
            var bW = oM.Tween.get(this, {
                override: true
            }).to({
                y: 120
            }, 300, oM.Ease.kj);
        }
    }
    ;
    bn.hide = function() {
        if (this.visible == true) {
            fP.removeAllChildren();
            oM.Tween.removeTweens(this);
            this.set({
                y: 0,
                visible: true
            });
            var bW = oM.Tween.get(this, {
                override: true
            }).to({
                y: -140,
                visible: false
            }, 100, oM.Ease.mZ);
        }
    }
    ;
    bn.fH = function() {
        var bQ = F('itemAniFinish');
        document.dispatchEvent(bQ);
    }
    ;
    return bn;
}
;function bu() {
    var bn = new oM.MovieClip();
    bn.ku = ""333"";
    bn.oi = ""C90"";
    bn.nJ = ""FC0"";
    bn.gG = ""FC0"";
    bn.ox = ""FFF"";
    bn.nZ = ""333"";
    var gz = new oM.Shape();
    gz.graphics.setStrokeStyle(8).beginStroke(""#C33"").beginFill(""#C33"").drawRoundRectComplex(0, 0, 860, 120, 35, 35, 0, 0);
    var ie = new oM.Shape().set({
        x: 150,
        y: 60
    });
    ie.graphics.beginFill(""#B33"").drawRoundRectComplex(0, 0, 600, 60, 25, 25, 0, 0);
    var kK = new oM.MovieClip().set({
        y: 68
    });
    var iI = new oM.Text('',""bold 36px Helvetica"",""#333"").set({
        textAlign: ""left""
    }).set({
        x: 165,
        y: 36,
        textBaseline: 'middle'
    });
    var jv = new oM.Text('',""bold 36px Helvetica"",""#333"").set({
        textAlign: ""right""
    }).set({
        x: 735,
        y: 36,
        textBaseline: 'middle'
    });
    bn.addChild(gz, ie, kK, iI, jv);
    bn.cache(-10, -10, 880, 140);
    bn.eL = function(au, dS, gX) {
        if (au != undefined) {
            if (dS == undefined) {
                dS = '333';
            }
            if (gX == undefined) {
                gX = true;
            }
            if (gX == true) {
                au = this.mI(au);
            }
            this.pY(au.toUpperCase(), '#' + dS);
            if (fG == ej && au.indexOf(""_"") > (-1)) {
                cN.play(12);
            }
        }
    }
    ;
    bn.jx = function(au) {
        if (au != undefined) {
            this.qt(au.toUpperCase());
        }
    }
    ;
    bn.pY = function(au, dS) {
        kK.removeAllChildren();
        var km;
        for (var i = 0; i < au.length; i++) {
            this.jQ(au.charAt(i), dS);
        }
        this.jN();
        this.updateCache();
    }
    ;
    bn.qt = function(au) {
        kK.removeAllChildren();
        var km;
        for (var i = 0; i < au.length; i++) {
            if (cj == au || au.charAt(i) == ""_"") {
                dS = '#' + this.ku;
            } else {
                dS = '#' + this.oi;
            }
            this.jQ(cj.charAt(i), dS);
        }
        this.jN();
        this.updateCache();
    }
    ;
    bn.jQ = function(lp, dS) {
        km = new oM.Text(lp,""bold 46px Helvetica"",dS).set({
            y: 24,
            textBaseline: 'middle'
        });
        if (kK.children.length > 0) {
            km.set({
                x: kK.getBounds().width
            });
        }
        kK.addChild(km);
    }
    ;
    bn.jN = function() {
        if (kK.children.length > 0) {
            kK.set({
                x: parseInt((860 / 2) - (kK.getBounds().width / 2))
            });
        }
    }
    ;
    bn.nL = function(bY) {
        iI.text = L.dJ('TGIMN') + "" "" + bY.toString();
        this.updateCache();
    }
    ;
    bn.mL = function(bY) {
        jv.text = L.dJ('TGIR') + "" "" + bY.toString() + ""/3"";
        this.updateCache();
    }
    ;
    bn.mI = function(au) {
        au = au.split("""");
        au = au.join("" "");
        return au;
    }
    ;
    bn.qd = function() {
        kK.visible = true;
        this.updateCache();
    }
    ;
    bn.qJ = function() {
        kK.visible = false;
        this.updateCache();
    }
    ;
    return bn;
}
;function bX() {
    var bn = new oM.MovieClip().set({
        x: 70,
        y: 60,
        scale: .8
    });
    bn.fI = 0;
    bn.active = false;
    var hk;
    var ib = 99;
    var fZ = 0;
    var ly = new oM.Shape();
    ly.graphics.setStrokeStyle(10).beginStroke(""#333"").beginRadialGradientFill([""#FFF"", ""#BBB""], [0, 1], -28, -28, 0, 0, 0, 56).drawCircle(0, 0, 56);
    bn.addChild(ly);
    var mp = new oM.Text('',""bold 70px Helvetica"",""#333"").set({
        textAlign: ""center"",
        lineWidth: 80
    }).set({
        y: 4,
        textBaseline: 'middle'
    });
    bn.addChild(mp);
    bn.cache(-64, -64, 128, 128);
    bn.reset = function() {
        this.fI = fZ;
        this.active = false;
        mp.text = this.fI;
        this.hide();
        clearInterval(hk);
    }
    ;
    bn.start = function(bY) {
        if (typeof bY == ""undefined"") {
            bY = ib;
        }
        this.fI = parseInt(bY);
        if (bY > fZ) {
            clearInterval(hk);
            hk = setInterval(this.updateInterval, 1000);
            this.active = true;
        } else {
            this.stop();
        }
        this.hO();
        this.show();
    }
    ;
    bn.stop = function() {
        clearInterval(hk);
        this.active = false;
    }
    ;
    bn.updateInterval = function() {
        bn.update();
    }
    ;
    bn.hO = function() {
        if (this.fI > ib) {
            mp.text = ib;
        } else {
            mp.text = this.fI;
        }
        this.updateCache();
    }
    ;
    bn.update = function() {
        if (this.fI > fZ) {
            this.fI--;
            this.hO();
        }
        if (this.fI > fZ && this.fI <= (fZ + 10)) {
            cN.play(3);
        }
        if (this.fI == fZ) {
            var bQ = F('timeOut');
            document.dispatchEvent(bQ);
            this.stop();
        }
    }
    ;
    bn.pg = function(bY) {
        this.fI = parseInt(bY);
        this.hO();
    }
    ;
    bn.show = function() {
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function t(gc, ht) {
    var bn = new oM.MovieClip();
    var qY = new oM.Shape().set({
        x: 12,
        y: 8,
        alpha: .2
    });
    qY.graphics.beginFill(""#000"").drawRoundRect(0, 0, gc, ht, 35);
    qY.cache(0, 0, gc, ht);
    var gb = new oM.Shape();
    gb.graphics.setStrokeStyle(8).beginStroke(""#993"").beginLinearGradientFill([""#DDD"", ""#FFF""], [0, .3], 0, 0, 0, ht).drawRoundRect(0, 0, gc, ht, 35);
    gb.cache(-10, -10, gc + 20, ht + 20);
    bn.addChild(qY, gb);
    bn.setBounds(0, 0, gc, ht);
    return bn;
}
;function ae() {
    var bn = new oM.MovieClip();
    bn.kl = new oM.MovieClip().set({
        x: 12,
        y: 12
    });
    bn.addChild(t(250, ea.maxHeight), bn.kl);
    var hq = new oM.Shape().set({
        x: 12,
        y: 12
    });
    hq.graphics.beginFill(""#0F0"").drawRect(0, 0, 300, ea.maxHeight - 50);
    bn.kl.mask = hq;
    bn.empty = function() {
        this.kl.removeAllChildren();
    }
    ;
    bn.mV = function(cZ) {
        var mO = aA(cZ);
        cZ.jY = mO;
        this.kl.addChild(mO);
    }
    ;
    bn.mr = function(dw) {
        for (i = this.kl.children.length - 1; i >= 0; i--) {
            var km = this.kl.getChildAt(i);
            if (km != undefined) {
                if (km.name == dw) {
                    this.kl.removeChild(km);
                }
            }
        }
    }
    ;
    bn.mt = function() {
        var fz = bF();
        var km;
        var cZ;
        for (var i = 0; i < fz.length; i++) {
            cZ = al[fz[i]];
            km = this.kl.getChildByName(cZ.da);
            if (km == undefined) {
                this.mV(cZ)
            }
            cZ.oC(i + 1);
            this.ns(cZ);
        }
    }
    ;
    bn.ns = function(cZ) {
        jY = cZ.jY;
        jY.hL.text = cZ.fj;
        jY.oP(cZ.pos);
        jY.lO.fL(cZ.el);
        jY.lO.visible = cZ.eQ;
        jY.ng.visible = cZ.fO;
        jY.mz.visible = false;
        jY.mQ.visible = false;
        if (cZ.da == ev) {
            jY.mz.visible = true;
        } else if (cZ.jf == true) {
            jY.mQ.visible = true;
        }
        jY.kT.updateCache();
        var hS = 90 * (cZ.pos - 1);
        if (jY.y != hS) {
            var bW = oM.Tween.get(jY, {
                override: true
            }).to({
                y: hS
            }, 300, oM.Ease.kj);
        }
    }
    ;
    bn.show = function() {
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function aw() {
    var bn = new oM.MovieClip().set({
        regX: 7,
        regY: 7,
        visible: false
    });
    var jV = new oM.Bitmap(kb['uIcoStar']);
    bn.addChild(jV);
    var au = new oM.Text('',""bold 28px Fjalla One"",""#FFF"").set({
        textAlign: ""center"",
        lineWidth: 44,
        textBaseline: 'middle',
        x: 25,
        y: 29
    });
    var gy = au.clone();
    gy.set({
        outline: 2,
        color: ""#333""
    });
    bn.addChild(gy, au);
    bn.fL = function(hT) {
        if (parseInt(hT) > 0) {
            au.text = gy.text = hT;
        } else {
            au.text = gy.text = '';
        }
    }
    ;
    return bn;
}
;function aA(cZ) {
    var lj = ""#C33"";
    var bn = new oM.MovieClip().set({
        name: cZ.da,
        scale: .5
    });
    bn.kT = new oM.MovieClip();
    bn.cV = new oM.MovieClip().set({
        alpha: 0
    });
    var hx = new oM.Shape();
    hx.graphics.beginFill(""#CCC"").drawRect(0, 0, 450, 180);
    bn.cV.addChild(hx);
    bn.cV.cache(0, 0, 450, 180);
    var hq = new oM.Shape();
    hq.graphics.beginFill(""#0F0"").drawRect(0, 0, 450, 180);
    bn.kT.mask = hq;
    bn.hitArea = hq;
    bn.mouseChildren = false;
    if (cZ.da != bD) {
        bn.cursor = ""pointer"";
        bn.on(""click"", function() {
            cN.play(16);
            fl.show(cZ);
        });
        bn.on(""mouseover"", function() {
            bn.onMouseOver();
        });
        bn.on(""mouseout"", function() {
            bn.onMouseOut();
        });
    }
    var gJ = new oM.Shape();
    gJ.graphics.setStrokeStyle(4).beginStroke(""#BBB"").moveTo(0, 180).lineTo(450, 180);
    bn.hg = new oM.Text('',""bold 130px Fjalla One"",""#CCC"").set({
        x: 10,
        y: 100,
        textBaseline: 'middle'
    });
    bn.hL = new oM.Text('',""bold 60px Helvetica"",""#333"").set({
        y: 55,
        textBaseline: 'middle'
    });
    bn.iU = new oM.Text(cZ.da,""bold 60px Helvetica"",""#666"").set({
        y: 120,
        textBaseline: 'middle'
    });
    if (cZ.da == bD) {
        bn.hg.color = lj;
        bn.iU.color = lj;
    }
    bn.mz = new oM.Bitmap(kb['uIcoPen1']).set({
        x: 370,
        y: 20,
        scale: 1.5
    });
    bn.mQ = new oM.Bitmap(kb['uIcoPen2']).set({
        x: 370,
        y: 20,
        scale: 1.5
    });
    bn.ng = new oM.Bitmap(kb['uIcoClock']).set({
        x: 370,
        y: 90,
        scale: 3
    });
    bn.lO = aw();
    bn.lO.set({
        x: 410,
        y: 40,
        scale: 3
    });
    bn.lO.fL('33');
    bn.addChild(bn.cV, bn.kT);
    bn.kT.addChild(gJ, bn.hg, bn.hL, bn.iU);
    bn.kT.addChild(bn.mz, bn.mQ, bn.ng);
    bn.kT.cache(0, 0, 450, 180);
    bn.addChild(bn.lO);
    bn.setBounds(0, 0, 600, 180);
    bn.oP = function(au) {
        bn.hg.text = au;
        var nY = bn.hg.x + bn.hg.getBounds().width + 20;
        bn.iU.set({
            x: nY
        });
        bn.hL.set({
            x: nY
        });
    }
    ;
    bn.onMouseOver = function() {
        bn.cV.alpha = .3;
        bn.hg.color = ""#333"";
        bn.iU.color = ""#333"";
        bn.kT.updateCache();
    }
    ;
    bn.onMouseOut = function() {
        bn.cV.alpha = 0;
        bn.hg.color = ""#CCC"";
        bn.iU.color = ""#666"";
        bn.kT.updateCache();
    }
    ;
    return bn;
}
;function cE() {
    var bn = new oM.MovieClip();
    bn.lF = null;
    bn.ks = t(1000, ea.maxHeight);
    var qX = 80;
    bn.kq = new oM.MovieClip().set({
        x: 25,
        y: qX
    });
    bn.kr = cl();
    bn.addChild(bn.ks, bn.kq, bn.kr);
    var hY = 870;
    var hq = new oM.Shape().set({
        x: 20,
        y: 75
    });
    hq.graphics.beginFill(""#0F0"").drawRect(0, 0, 900, hY);
    bn.kq.mask = bn.kr.mask = hq;
    bn.jX = aR().set({
        x: 940,
        y: qX
    });
    bn.addChild(bn.jX);
    bn.kF = an(1000 - 50).set({
        x: 25,
        y: 25
    });
    bn.addChild(bn.kF);
    var sN = false;
    bn.onClick = function() {
        if (bn.lF != null && sN == false) {
            if (bn.lF.lk > 0) {
                cN.play(16);
                var aW = T(dj.gW, bn.lF.lk);
                h(aW);
                sN = true;
                setTimeout(function() {
                    sN = false;
                }, 500);
            }
        }
    }
    ;
    bn.onMouseOver = function() {
        bn.lF = bn.ra();
        if (bn.lF != null) {
            bn.qH(bn.lF);
        }
    }
    ;
    bn.ra = function() {
        var gm = bn.kq.globalToLocal(ab.mouseX, ab.mouseY);
        for (i = 0; i < bn.kq.children.length; i++) {
            var km = bn.kq.getChildAt(i);
            var gg = new createjs.Rectangle(km.x,km.y,km.lb,km.kE);
            if (eH(gm, gg)) {
                return km;
            }
        }
        return null;
    }
    ;
    bn.onMouseOut = function() {
        bn.kr.visible = false;
    }
    ;
    bn.mY = function() {
        var aJ = '';
        aJ = L.dJ('TR') + "":"" + bn.kq.children.length;
        if (gI > 0) {
            aJ += ""   "" + L.dJ('TU') + "":"" + gI;
        }
        bn.kF.fL(aJ);
    }
    ;
    bn.lc = function(lK, kJ, jz, nv, iM) {
        var jT = cc();
        jT.lc(lK, kJ, jz, nv, iM);
        this.kq.addChild(jT);
        this.qB();
        this.mY();
    }
    ;
    bn.qB = function() {
        for (i = 0; i < this.kq.children.length; i++) {
            var km = this.kq.getChildAt(i);
            if (km != undefined) {
                if ((i % 2) == 0) {
                    km.x = 0;
                } else {
                    km.x = 450;
                }
                km.y = (120 * parseInt(i / 2));
            }
        }
    }
    ;
    bn.scrollTo = function(bQ) {
        jM = bn.jX.qL();
        var qF = parseInt(bn.kq.children.length / 2) * 120;
        var ii = (qF - hY) / 100;
        var hS = 0 - (jM * ii);
        bn.kq.y = parseInt(hS + qX);
        bn.kr.visible = false;
    }
    ;
    bn.qH = function(fB) {
        bn.kr.x = bn.kq.x + fB.x;
        bn.kr.y = bn.kq.y + fB.y;
        bn.kr.visible = true;
    }
    ;
    bn.empty = function() {
        bn.kq.removeAllChildren();
        bn.kq.y = qX;
        bn.jX.reset();
    }
    ;
    bn.sJ = function() {
        window.addEventListener(""wheel"", sr, {
            passive: false
        });
        bn.jX.addEventListener(""scrollMove"", bn.scrollTo, false);
        bn.kq.on(""click"", bn.onClick);
        bn.kq.on(""mouseover"", bn.onMouseOver);
        bn.kq.on(""mousedown"", bn.onMouseOver);
        bn.kq.on(""mouseout"", bn.onMouseOut);
    }
    ;
    bn.sK = function() {
        window.removeEventListener(""wheel"", sr, {
            passive: false
        });
        bn.jX.removeEventListener(""scrollMove"", bn.scrollTo, false);
        bn.kq.off(""click"", bn.onClick);
        bn.kq.off(""mouseover"", bn.onMouseOver);
        bn.kq.off(""mousedown"", bn.onMouseOver);
        bn.kq.off(""mouseout"", bn.onMouseOut);
    }
    ;
    return bn;
}
;function cc() {
    var bn = new oM.MovieClip();
    bn.lb = 430;
    bn.kE = 100;
    bn.mouseChildren = false;
    var gb = new oM.Shape();
    gb.graphics.setStrokeStyle(4).beginStroke(""#CCC"").beginFill(""#EEE"").drawRoundRect(0, 0, bn.lb, bn.kE, 10);
    bn.addChild(gb);
    bn.kq = new oM.MovieClip().set({
        x: 15,
        y: 15
    });
    bn.addChild(bn.kq);
    bn.lk = 0;
    bn.jH = '';
    bn.iO = 0;
    bn.jF = 0;
    bn.lang = """";
    bn.cursor = ""pointer"";
    bn.lc = function(lK, kJ, jz, nv, iM) {
        bn.lk = lK;
        bn.jH = kJ;
        bn.iO = jz;
        bn.jF = nv;
        bn.lang = iM;
        var jL = new oM.Bitmap(kb['flag-' + bn.lang]).set({
            scale: 32 / 75
        });
        var aJ = bn.lk + ' (' + jz + '/' + nv + ')';
        var ir = new oM.Text(aJ,""bold 26px Helvetica"",""#333"").set({
            x: 40,
            y: 10,
            lineWidth: 200,
            textBaseline: 'middle'
        });
        bn.kq.addChild(jL, ir);
        for (i = 1; i <= nv; i++) {
            var fD = 0;
            if (i <= jz) {
                fD = 1;
            }
            var jW = bv(fD);
            jW.x = (40 * i) - 40;
            bn.kq.addChild(jW);
        }
        bn.cache(-10, -10, bn.lb + 20, bn.kE + 20);
        bn.kq.visible = false;
    }
    ;
    return bn;
}
;function cl() {
    var lb = 430;
    var kE = 100;
    var bn = new oM.MovieClip().set({
        visible: false
    });
    var jj = new oM.Shape();
    jj.graphics.setStrokeStyle(4).beginStroke(""#F63"").drawRoundRect(0, 0, lb, kE, 10);
    bn.addChild(jj);
    bn.cache(-10, -10, lb + 20, kE + 20);
    return bn;
}
;function bv(fD) {
    var bn = new oM.MovieClip().set({
        y: 35
    });
    if (fD == 1) {
        var iB = new oM.Bitmap(kb['icousu']).set({
            scale: 30 / 64
        });
    } else {
        var iB = new oM.Shape();
        iB.graphics.beginFill(""#CCC"").drawRect(0, 0, 30, 30);
    }
    bn.addChild(iB);
    return bn;
}
;function bO() {
    cN.play(16);
    if (dW.nq(dW.mj)) {
        aU();
    } else if (dW.nq(dW.lP)) {
        aL();
    }
}
;function aU() {
    er.show({
        fV: L.dJ('TSDLM'),
        fM: [{
            name: L.dJ('TS'),
            path: dn
        }, {
            name: L.dJ('TN')
        }]
    });
}
;function aL() {
    rI();
}
;function rI() {
    tf();
    eS.show();
    dW.show(dW.lZ);
}
;function aQ() {
    var bn = new oM.MovieClip();
    var ep = -2000;
    var gc = eA + 4000;
    var hV = new oM.Shape();
    hV.graphics.beginFill(""#444"").drawRect(ep, 0, gc, 100);
    var hW = new oM.Shape().set({
        y: 4
    });
    hW.graphics.beginFill(""#525252"").drawRect(ep, 0, gc, 45);
    bn.iq = new oM.Bitmap(kb['logotop']).set({
        regX: 175,
        x: 960,
        y: -8,
        scale: 1.2
    });
    bn.iq.cache(0, 0, 350, 100);
    var fT = bJ();
    fT.set({
        x: 20,
        y: 15,
        visible: false,
        scale: 1.2
    });
    fT.on(""click"", bO);
    var nI = sv();
    nI.set({
        x: 20,
        y: 15,
        visible: true,
        scale: 1.2
    });
    bn.addChild(hV, hW, bn.iq, fT, nI);
    bn.show = function() {
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    bn.oX = function() {
        fT.visible = true;
    }
    ;
    bn.oA = function() {
        fT.visible = false;
    }
    ;
    bn.sO = function() {
        nI.visible = true;
    }
    ;
    bn.sn = function() {
        nI.visible = false;
    }
    ;
    bn.rs = function() {
        fT.visible = false;
        nI.visible = false;
    }
    ;
    return bn;
}
;function bJ() {
    gc = 60;
    ht = 60;
    var bn = new oM.MovieClip();
    bn.mouseChildren = false;
    bn.gT = new oM.MovieClip();
    var gb = new oM.Shape();
    gb.graphics.setStrokeStyle(4).beginStroke(""#444"").beginFill(""#555"").drawRoundRect(0, 0, gc, ht, 8);
    var jV = new oM.Bitmap(kb['icoback']);
    bn.gT.addChild(gb, jV);
    bn.gT.cache(-5, -5, gc + 10, ht + 10);
    bn.gf = new oM.Shape().set({
        alpha: .1,
        visible: false
    });
    bn.gf.graphics.beginFill(""#FFF"").drawRoundRect(0, 0, gc, ht, 10);
    bn.gf.cache(0, 0, gc, ht);
    bn.addChild(bn.gT, bn.gf);
    bn.cursor = ""pointer"";
    bn.on(""mouseover"", function(e) {
        this.onMouseOver();
    });
    bn.on(""mouseout"", function(e) {
        this.onMouseOut();
    });
    bn.onMouseOver = function() {
        bn.gf.visible = true;
    }
    ;
    bn.onMouseOut = function() {
        bn.gf.visible = false;
    }
    ;
    bn.show = function() {
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function sv() {
    var bn = new oM.MovieClip();
    bn.lang = 'es';
    var jb = aX();
    jb.addEventListener(""onChange"", function() {
        bn.pq()
    });
    jb.os(eB);
    bn.addChild(jb);
    bn.pq = function() {
        ao(jb.hC.id);
        gw.mq();
    }
    ;
    return bn;
}
;function ds() {
    var bn = new oM.MovieClip().set({
        visible: false
    });
    bn.hv;
    bn.hn = pu();
    bn.addChild(bn.hn);
    bn.on(""click"", function(bQ) {
        bQ.preventDefault();
    });
    bn.show = function(gp) {
        if (bn.hv != undefined) {
            bn.removeChild(bn.hv);
        }
        bn.hv = bV(gp);
        bn.hv.set({
            x: (eA / 2),
            y: (ip / 2)
        });
        bn.addChild(bn.hv);
        this.visible = true;
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function bV(gp) {
    var bn = new oM.MovieClip().set({
        regX: 300,
        regY: 90
    });
    bn.setScale = function() {
        bn.scale = fF() ? 3 : 1.8;
    }
    ;
    window.addEventListener('resize', bn.setScale, false);
    bn.setScale();
    bn.hn = new oM.Shape();
    bn.hn.graphics.beginFill(""#333"").drawRoundRect(0, 0, 600, 180, 15);
    bn.au = new oM.Text(gp.fV,""bold 28px Helvetica"",""#FFF"").set({
        textAlign: ""center"",
        lineWidth: 600
    }).set({
        x: 300,
        y: 30
    });
    bn.iz = new oM.MovieClip().set({
        x: 20,
        y: 100
    });
    bn.addChild(bn.hn, bn.au, bn.iz);
    var gc = parseInt(560 / gp.fM.length);
    for (i = 0; i < gp.fM.length; i++) {
        var option = gp.fM[i];
        var hx = bi(option.name, gc);
        hx.set({
            x: gc * i
        });
        hx.le = option.path;
        bn.iz.addChild(hx);
    }
    return bn;
}
;function bi(au, gc) {
    ht = 60;
    var bn = new oM.MovieClip();
    bn.mouseChildren = false;
    bn.le;
    bn.gT = new oM.Shape();
    bn.gT.graphics.setStrokeStyle(8).beginStroke(""#333"").beginFill(""#488"").drawRoundRect(0, 0, gc, ht, 8);
    bn.gT.cache(0, 0, gc, ht);
    bn.gf = new oM.Shape().set({
        alpha: .1,
        visible: false
    });
    bn.gf.graphics.setStrokeStyle(8).beginStroke(""#333"").beginFill(""#6FF"").drawRoundRect(0, 0, gc, ht, 10);
    bn.gf.cache(0, 0, gc, ht);
    bn.au = new oM.Text(au.toUpperCase(),""bold 36px Helvetica"",""#FFF"").set({
        textAlign: ""center"",
        lineWidth: gc
    }).set({
        x: (gc / 2),
        y: 32,
        textBaseline: 'middle'
    });
    bn.au.cache(0 - (gc / 2), -25, gc, ht);
    bn.addChild(bn.gT, bn.gf, bn.au);
    bn.cursor = ""pointer"";
    bn.on(""click"", function(e) {
        this.onClick();
    });
    bn.on(""mouseover"", function(e) {
        this.onMouseOver();
    });
    bn.on(""mouseout"", function(e) {
        this.onMouseOut();
    });
    bn.onClick = function() {
        er.visible = false;
        if (typeof bn.le === ""function"") {
            bn.le();
        }
    }
    ;
    bn.onMouseOver = function() {
        bn.gf.visible = true;
    }
    ;
    bn.onMouseOut = function() {
        bn.gf.visible = false;
    }
    ;
    return bn;
}
;function eF(bQ) {
    if (fS) {
        var hd = fw();
        if (hd != null) {
            if (hd.type === 'text') {
                hd.blur();
            }
        }
    } else {}
}
;function fw() {
    if (document.hasFocus() && document.activeElement !== document.body && document.activeElement !== document.documentElement) {
        return document.activeElement;
    }
    return null;
}
;function sH(dH, rD=""#333"") {
    var bn = new oM.MovieClip();
    var kq = new oM.MovieClip();
    var pp = bn;
    var maxLength = 16;
    var nh = new oM.Rectangle(0,0,300,44);
    var fA = parseInt(nh.height / 2);
    bn.mouseChildren = false;
    bn.cursor = 'text';
    var nH = new oM.MovieClip();
    var gb = new oM.Shape();
    gb.graphics.setStrokeStyle(3).beginStroke(""#CC8"").beginFill(""#EEC"").drawRect(0, 0, nh.width, nh.height);
    nH.addChild(gb);
    var au = new oM.Text('',""34px Helvetica"",rD).set({
        x: 10,
        y: fA,
        textBaseline: 'middle'
    });
    kq.addChild(nH, au);
    var hq = new oM.Shape();
    hq.graphics.beginFill(""#0F0"").drawRect(0, 0, nh.width, nh.height);
    au.mask = hq;
    var kS = bP(au, rD);
    kS.y = fA;
    bn.addChild(kq, kS);
    var fv = document.getElementById('divText');
    if (fv === null) {
        fv = qj();
        document.querySelector('body').appendChild(fv);
    }
    var textInput = document.getElementById('pintuInput_' + dH);
    if (textInput === null) {
        textInput = ql(maxLength);
        textInput.oninput = function() {
            bn.qx();
        }
        ;
        textInput.onblur = function() {
            bn.onBlur();
        }
        ;
        textInput.onkeypress = function(e) {
            bn.onKeyPress(e);
        }
        ;
        fv.appendChild(textInput);
    }
    ab.on(""stagemousedown"", function(bQ) {
        bn.nl(bQ);
    });
    bn.nl = function(bQ) {
        if (df(pp)) {
            this.nx(1);
        } else {
            this.nx(0);
        }
    }
    ;
    bn.setBounds = function(jk) {
        nh = jk;
        fA = parseInt(nh.height / 2);
        au.y = kS.y = fA;
        var hq = new oM.Shape();
        hq.graphics.beginFill(""#0F0"").drawRect(0, 0, nh.width, nh.height);
        au.mask = hq;
    }
    ;
    bn.mw = function(fB) {
        kq.removeChild(nH);
        nH = fB;
        kq.addChild(nH);
        kq.setChildIndex(nH, 0);
    }
    ;
    bn.oT = function(bY) {
        maxLength = bY;
        textInput.maxLength = String(maxLength);
    }
    ;
    bn.nk = function() {
        return (document.activeElement === textInput);
    }
    ;
    bn.oW = function() {
        if (au.getBounds() != null) {
            return parseInt(au.getBounds().width);
        }
        return 0;
    }
    ;
    bn.fL = function(aJ) {
        if (textInput.value != aJ) {
            textInput.value = aJ;
        }
        bn.qx();
    }
    ;
    bn.qx = function() {
        au.text = textInput.value;
        this.mX();
        if (bn.nk()) {
            kS.start();
        }
    }
    ;
    bn.mX = function() {
        var gc = this.oW();
        au.x = 10;
        if (gc > (nh.width - 20)) {
            au.x = (nh.width - 10) - gc;
        }
    }
    ;
    bn.empty = function() {
        bn.fL('');
    }
    ;
    bn.focus = function() {
        textInput.disabled = false;
        textInput.readOnly = false;
        textInput.style.visibility = ""visible"";
        kS.start();
        textInput.focus();
    }
    ;
    bn.blur = function() {
        textInput.blur();
    }
    ;
    bn.nx = function(hd) {
        if (hd == 0) {
            bn.blur();
        } else if (hd == 1) {
            bn.focus();
        } else {
            bn.nx(!bn.nk());
        }
    }
    ;
    bn.onBlur = function() {
        textInput.disabled = true;
        textInput.readOnly = true;
        textInput.style.visibility = ""hidden"";
        kS.stop();
    }
    ;
    bn.onKeyPress = function(bQ) {
        if (bQ.keyCode == 13) {
            this.dispatchEvent(F('enterKey'));
        }
    }
    ;
    bn.rm = function() {
        return au.text;
    }
    ;
    return bn;
}
;function qj() {
    fv = document.createElement(""div"");
    fv.name = 'divText';
    fv.style.cssText = ""position:absolute;top:0px;left:0px;width:10px;height:80px;overflow:hidden;zIndex:100"";
    return fv;
}
;function ql(maxLength) {
    textInput = document.createElement(""input"");
    textInput.type = ""text"";
    textInput.maxLength = String(maxLength);
    textInput.disabled = true;
    textInput.readOnly = true;
    textInput.style.cssText = ""color:#366;color:transparent;font-size:80px;outline:none;background:none;visibility:hidden;margin:0;padding;0"";
    return textInput;
}
;function bP(iQ, dS='#333') {
    var iV;
    var au = iQ;
    var bn = new oM.MovieClip();
    var gJ = new oM.Shape();
    gJ.graphics.setStrokeStyle(4).beginStroke(dS).moveTo(0, -15).lineTo(0, 15);
    bn.addChild(gJ);
    bn.cache(0, -20, 4, 40);
    bn.visible = false;
    bn.start = function() {
        clearInterval(iV);
        iV = setInterval(bn.update, 500);
        bn.qy();
        bn.visible = true;
    }
    ;
    bn.stop = function() {
        clearInterval(iV);
        bn.visible = false;
    }
    ;
    bn.update = function() {
        bn.visible = !bn.visible;
    }
    ;
    bn.qy = function() {
        bn.x = au.x + this.oW();
    }
    ;
    bn.oW = function() {
        try {
            return parseInt(au.getBounds().width);
        } catch (e) {
            return 0;
        }
    }
    ;
    return bn;
}
;function aR() {
    var bn = new oM.MovieClip();
    var po = 0;
    var oR = 126;
    var op = 870;
    var jX = new oM.Shape();
    jX.graphics.beginFill(""#CCC"").drawRect(0, 0, 32, op);
    var jO = new oM.Shape();
    jO.graphics.setStrokeStyle(1).beginStroke(""#993"").beginFill(""#CC5"").drawRect(1, 1, 30, oR);
    bn.addChild(jX, jO);
    cr.onwheel = function(bQ) {
        if (df(gV.ks)) {
            bn.lY(Math.sign(bQ.deltaY));
        }
    }
    ;
    jO.on(""mousedown"", function(bQ) {
        var mK = jX.globalToLocal(bQ.stageX, bQ.stageY);
        po = mK.y - jO.y;
    });
    jO.on(""pressmove"", function(bQ) {
        var mK = jX.globalToLocal(bQ.stageX, bQ.stageY);
        bn.lJ(mK.y - po);
    });
    bn.lY = function(jI) {
        bn.lJ(jO.y + (50 * jI));
    }
    ;
    bn.lJ = function(gN) {
        gN = Math.max(gN, 0);
        gN = Math.min(gN, op - oR);
        jO.y = parseInt(gN);
        this.dispatchEvent(F('scrollMove'));
    }
    ;
    bn.reset = function() {
        bn.lJ(0);
    }
    ;
    bn.qL = function() {
        return (jO.y * 100) / (op - oR);
    }
    ;
    return bn;
}
;function an(gc) {
    var bn = new oM.MovieClip();
    bn.maxWidth = gc;
    var gb = new oM.Shape();
    gb.graphics.beginFill(""#c7c656"").drawRoundRectComplex(0, 0, bn.maxWidth, 40, 15, 15, 0, 0);
    var au = new oM.Text('',""bold 26px Helvetica"",""#FFF"").set({
        x: 20,
        y: 21,
        textBaseline: 'middle'
    });
    bn.addChild(gb, au);
    bn.fL = function(aJ) {
        au.text = aJ;
    }
    ;
    return bn;
}
;function dk() {
    var bn = new oM.MovieClip().set({
        regX: 64,
        regY: 64,
        x: 960,
        y: 600,
        scale: .6,
        visible: false
    });
    bn.jV = new oM.Bitmap(kb['loader']).set({
        regX: 64,
        regY: 64
    });
    bn.jV.cache(0, 0, 128, 128);
    bn.addChild(bn.jV);
    function bz() {
        bn.jV.rotation = bn.jV.rotation + 4;
    }
    ;bn.show = function() {
        oM.Ticker.addEventListener(""tick"", bz);
        this.visible = true;
    }
    ;
    bn.hide = function() {
        oM.Ticker.removeEventListener(""tick"", bz);
        this.visible = false;
    }
    ;
    return bn;
}
;function aX() {
    var bn = new oM.MovieClip();
    bn.hC;
    bn.kg = new oM.MovieClip();
    var aO = new oM.Shape();
    aO.graphics.setStrokeStyle(4).beginStroke(""#444"").beginFill(""#555"").drawRoundRect(0, 0, 300, 60, 8);
    var jV = new oM.Bitmap(kb['icoplanet']).set({
        x: 12,
        y: 10,
        scale: .6
    });
    bn.kg.au = new oM.Text('',""26px Helvetica"",""#FFF"").set({
        x: 60,
        y: 34,
        textBaseline: 'middle'
    });
    bn.kg.kx = new oM.MovieClip().set({
        x: 250
    });
    var ia = new createjs.Shape().set({
        x: 22,
        y: 30
    });
    ia.graphics.beginFill(""#FFF"").drawPolyStar(0, 0, 10, 3, 0, 90);
    bn.kg.kx.addChild(ia);
    bn.kg.addChild(aO, jV, bn.kg.au, bn.kg.kx);
    bn.kg.mouseChildren = false;
    bn.gh = [];
    for (i = 0; i < il.length; i++) {
        bn.gh.push({
            id: il[i],
            text: rV[i]
        })
    }
    bn.kW = aS().set({
        y: 64
    });
    bn.kW.qa(bn.gh);
    bn.cursor = ""pointer"";
    bn.addChild(bn.kg, bn.kW);
    bn.kg.on(""click"", function() {
        bn.kw()
    });
    bn.kW.addEventListener(""onChange"", function() {
        bn.oj()
    });
    bn.kw = function() {
        if (bn.kW.visible) {
            bn.kW.hide();
        } else {
            bn.kW.show();
        }
    }
    ;
    bn.oj = function() {
        bn.hC = bn.gh[bn.kW.iL];
        bn.kg.au.text = bn.hC.text;
        bn.dispatchEvent(F('onChange'));
    }
    ;
    bn.os = function(ld) {
        for (i = 0; i < bn.gh.length; i++) {
            if (bn.gh[i].id == ld) {
                bn.hC = bn.gh[i];
                bn.kg.au.text = bn.hC.text;
            }
        }
    }
    ;
    return bn;
}
;function aS() {
    var bn = new oM.MovieClip().set({
        visible: false
    });
    bn.iL;
    bn.sU = 0;
    bn.kC = new oM.MovieClip();
    var aO = new oM.Shape();
    aO.graphics.setStrokeStyle(2).beginFill(""#FFF"").drawRect(10, 0, 280, 50);
    bn.kC.addChild(aO);
    bn.kC.alpha = .1;
    bn.kW = new oM.MovieClip();
    bn.addChild(bn.kW, bn.kC);
    bn.ny = function() {
        var gm = bn.kW.globalToLocal(ab.mouseX, ab.mouseY);
        if (bn.kW.hitTest(gm.x, gm.y)) {
            var bY = parseInt(gm.y / 50);
            if (bY >= 0 && bY < bn.sU) {
                return bY;
            }
        }
        return -1;
    }
    ;
    bn.mn = function() {
        var gm = bn.kW.globalToLocal(ab.mouseX, ab.mouseY);
        var bY = bn.ny();
        if (bY >= 0) {
            bn.kC.y = bY * 50;
            bn.kC.visible = true;
        } else {
            bn.kC.visible = false;
        }
    }
    ;
    bn.qa = function(iT) {
        bn.sU = iT.length;
        bn.rH(bn.sU * 50);
        for (i = 0; i < iT.length; i++) {
            var km = bn.re(iT[i]).set({
                y: 50 * i
            });
            bn.kW.addChild(km);
        }
    }
    ;
    bn.re = function(v) {
        var km = new oM.MovieClip();
        var aO = new oM.Shape();
        aO.graphics.setStrokeStyle(2).beginStroke(""#555"").beginFill(""#555"").drawRect(10, 0, 280, 50);
        var au = new oM.Text(v.text,""26px Helvetica"",""#FFF"").set({
            x: 20,
            y: 26,
            textBaseline: 'middle'
        });
        km.addChild(aO, au);
        km.mouseChildren = false;
        return km;
    }
    ;
    bn.rH = function(ht) {
        var rX = new oM.MovieClip();
        var sp = new oM.Shape();
        sp.graphics.setStrokeStyle(4).beginStroke(""#444"").beginFill(""#555"").drawRoundRect(0, 0, 300, ht + 8, 8);
        rX.addChild(sp);
        rX.y = (-4);
        bn.kW.addChild(rX);
    }
    ;
    bn.show = function() {
        ab.addEventListener(""stagemousemove"", bn.mn);
        ab.addEventListener(""stagemouseup"", bn.hide);
        bn.kC.visible = false;
        bn.visible = true;
    }
    ;
    bn.hide = function() {
        ab.removeEventListener(""stagemousemove"", bn.mn);
        ab.removeEventListener(""stagemouseup"", bn.hide);
        if (df(bn)) {
            bn.iL = bn.ny();
            bn.dispatchEvent(F('onChange'));
        }
        bn.visible = false;
    }
    ;
    return bn;
}
;function dB() {
    this.fadeIn = function(km) {
        if (ea.cacheID != null) {
            this.nD();
        }
        km.visible = true;
        ea.cache(0, 0, ea.maxWidth, ea.maxHeight);
        ea.set({
            alpha: 0,
            visible: true
        });
        var bW = oM.Tween.get(ea, {
            override: true
        }).to({
            alpha: 1
        }, 300, oM.Ease.linear).call(this.nD);
    }
    ;
    this.fadeOut = function(km) {
        if (ea.cacheID != null) {
            this.nD();
        }
        km.visible = true;
        ea.cache(0, 0, ea.maxWidth, ea.maxHeight);
        km.visible = false;
        ea.set({
            alpha: 1,
            visible: true
        });
        var bW = oM.Tween.get(ea, {
            override: true
        }).to({
            alpha: 0
        }, 300, oM.Ease.linear).call(this.nD);
    }
    ;
    this.nD = function() {
        ea.visible = true;
        ea.uncache();
    }
}
;function pu() {
    var hn = new oM.Shape().set({
        alpha: .3
    });
    hn.graphics.beginFill(""#000"").drawRect(-2000, 0, eA + 4000, ip + 4000);
    hn.on(""mouseover"", function(bQ) {
        bQ.stopPropagation();
    });
    hn.on(""mouseout"", function(bQ) {
        bQ.stopPropagation();
    });
    return hn;
}
;function qN() {
    var bn = new oM.MovieClip().set({
        visible: false
    });
    bn.hn = pu();
    bn.qI = qg();
    bn.addChild(bn.hn, bn.qI);
    bn.qI.db.on(""click"", function() {
        cN.play(16);
        bn.hide();
    });
    bn.show = function(cZ) {
        if (cZ.da != '') {
            bn.qI.qZ(cZ);
            ab.setChildIndex(this, ab.children.length - 1);
            this.visible = true;
        }
    }
    ;
    bn.hide = function() {
        this.visible = false;
    }
    ;
    return bn;
}
;function qg() {
    var bn = new oM.MovieClip();
    var cD;
    bn.setScale = function() {
        bn.scale = fF() ? 1.6 : 1;
    }
    ;
    window.addEventListener('resize', bn.setScale, false);
    bn.setScale();
    bn.setBounds(0, 0, 600, 500);
    O(bn);
    var qY = new oM.Shape().set({
        x: 12,
        y: 8,
        alpha: .2
    });
    qY.graphics.beginFill(""#000"").drawRoundRect(0, 0, 600, 500, 35);
    qY.cache(0, 0, 600, 500);
    var ri = new oM.Shape();
    ri.graphics.setStrokeStyle(4).beginStroke(""#DDD"").beginFill(""#333"").drawRoundRect(0, 0, 600, 500, 35);
    bn.db = qr();
    bn.db.x = 580;
    bn.db.y = 20;
    var jq = 80;
    bn.ff = j(""VOTE KICK"").set({
        x: jq,
        y: 200
    });
    bn.ff.on(""click"", function() {
        bn.pZ();
    });
    bn.hb = j(""IGNORE"").set({
        x: jq,
        y: 350
    });
    bn.hb.on(""click"", function() {
        bn.qf();
    });
    bn.addChild(qY, ri, bn.ff, bn.hb, bn.db);
    var bZ = new oM.Text('',""bold 60px Helvetica"",""#FFF"").set({
        textAlign: ""center"",
        maxWidth: 580,
        x: 300,
        y: 70
    });
    bn.addChild(bZ);
    bn.qZ = function(cZ) {
        cD = cZ;
        bZ.text = cD.da;
    }
    ;
    bn.pZ = function() {
        cN.play(16);
        var aW = T(dj.pP, cD.da);
        h(aW);
    }
    ;
    bn.qf = function() {
        cN.play(16);
        na(cD.da);
    }
    ;
    return bn;
}
;function qr() {
    var bn = new oM.MovieClip();
    bn.cursor = ""pointer"";
    var qY = new oM.Shape().set({
        x: 12,
        y: 8,
        alpha: .2
    });
    qY.graphics.beginFill(""#000"").drawCircle(0, 0, 40);
    var db = new oM.Shape();
    db.graphics.setStrokeStyle(4).beginStroke(""#DDD"").beginFill(""#333"").drawCircle(0, 0, 40);
    bn.addChild(qY, db);
    var pF = new oM.Shape();
    pF.graphics.setStrokeStyle(8).beginStroke(""#DDD"").moveTo(-17, -17).lineTo(17, 17);
    var qi = new oM.Shape();
    qi.graphics.setStrokeStyle(8).beginStroke(""#DDD"").moveTo(17, -17).lineTo(-17, 17);
    bn.addChild(pF, qi);
    return bn;
}
;function qs() {
    if (fS == true && document.activeElement.type == 'text') {
        return true;
    }
    return false;
}
"
ebCknwJN,Untitled,Viktor_Chudnovskiy,SQL,Tuesday 25th of July 2023 10:09:53 AM CDT,"with 
users as (select 
			atu.user_id 
			, atu.test_group
			, u.currency 
		  from dwh_mb_dedup.ab_test_user atu 
		  left join bi.users u using(user_id)
		  where ab_test_id = 37),
cte_1 as (select 
			user_id 
			, count(ac.amount_usd) as `amount_real_cnt`
			, sum(ac.amount_usd) as `amount_real_sum`
			, sum(ac.ggr_usd) as `ggr_real_sum`
		  from bi.all_coupons ac where origin not in ('mostbet', 'toto')
		  group by user_id, currency),
cte_2 as (select 
			user_id 
			, count(o.amount) as `amount_bonus_cnt`
		  from dwh_mbb_dedup.bonus b
		  right join (select
						*
					  from dwh_mbb_dedup.operation
					  where amount < 0
					  and created_at >= '2023-06-21'
					  and project_id = 1) o 
		  on b.balance_id = o.balance_id
		  where user_id != ''
		  group by user_id),
cte_3 as (select
			user_id
			, sum(exchange_bonus_amount_usd > 0.00001) as exchange_bonuses_cnt
		  from bi.bonuses b
		  where b.bonus_created >= '2023-06-21' 
	      and project_id = 1
		  group by user_id),
cte_4 as(select --получаем кол-во бонусов на 1 чел, в которые играли. Хотя бы 1 ставка на бонусные деньги в бонусном счету
			b.user_id as `user_id`
			, count(b.balance_id) as `bonuses_used_cnt`
			from dwh_mbb_dedup.bonus b
			right join (select
							*
						from dwh_mbb_dedup.operation
						where amount > 0
						and created_at >= '2023-06-21'
						and project_id = 1) o 
			on b.balance_id = o.balance_id
			where b.user_id != ''
			group by b.user_id),
cte_5 as (select
		    user_id
		    , sum(exchange_bonus_amount_usd) as `exchange_bonus_amount_sum`
			, sum(cr.rate * b.nominal_bonus) as `nominal_bonus_sum`
			from (select
				bonus_created
				, currency
				, user_id
				, nominal_bonus
				, exchange_bonus_amount_usd
			from bi.bonuses
			where project_id = 1) b
			left join bi.currency_rates cr on b.currency = cr.currency_code and b.bonus_created = cr.`date`
			group by user_id),
cte_7 as (select
			user_id
			, sum(if(b.bonus_type like 'CASHBACK_LOSE%', 1, 0)) as `cashback_lose_cnt`
			, sum(if(b.bonus_type like 'CASHBACK_EXCHANGE%', 1, 0)) as `cashback_exchange_cnt`
		  from bi.bonuses b
		  where project_id = 1
	      and exchange_bonus_amount_usd > 0
		  group by user_id)
select 
users.*
, if(cte_1.amount_real_cnt > 0, 1, 0) as `amount_real_flag` --Количество уникальных пользователей сделавших хотя бы 1 ставку на реальные деньги
, if(cte_1.amount_real_cnt > 0 or cte_2.amount_bonus_cnt >0, 1, 0) as `amount_real_or_bonus_flag` --Количество уникальных пользователей сделавших хотя бы 1 ставку на реальные или бонусные деньги
, if(cte_1.amount_real_cnt > 0 and cte_2.amount_bonus_cnt >0, 1, 0) as `amount_real_and_bonus_flag` --Количество уникальных пользователей сделавших хотя бы 1 ставку на реальные и бонусные деньги
, if(cte_2.amount_bonus_cnt >0, 1, 0) as `amount_bonus_flag` --Количество уникальных пользователей сделавших хотя бы 1 ставку на бонусные деньги
, cte_3.exchange_bonuses_cnt --Количество отыгранных бонусов(отыгранный бонус, когда >$0.00001 переведено с бонуса на реал
, cte_4.bonuses_used_cnt --Количество бонусов, в которые играли - хотя бы 1 ставка на бонусные деньги в бонусном счету
, cte_5.exchange_bonus_amount_sum --Сумма денег, выведенная из бонусного счета на реальный счет
, cte_5.nominal_bonus_sum --Сумма денег, выданная на бонусный счет
, if(cte_5.nominal_bonus_sum = 0, 0, divide(cte_5.exchange_bonus_amount_sum, cte_5.nominal_bonus_sum)) as `win_rate` --Win Rate
, cte_7.cashback_lose_cnt --Количество бонусов кешбека, отыгранных из бонуса в реал
, cte_7.cashback_exchange_cnt --Количество бонусов программы ""Лояльность"", отыгранных из бонуса в реал
, coalesce(if(cte_2.amount_bonus_cnt > 0, cte_1.amount_real_sum, 0),0) as `amount_bonus_sum` --Сумма ставок на человека, сделавшего хотя бы 1 ставку на бонусные деньги
, coalesce(if(cte_2.amount_bonus_cnt > 0, cte_1.ggr_real_sum, 0),0) as `ggr_bonus_sum` --GGR на человека, сделавшего хотя бы 1 ставку на бонусные деньги
, coalesce(cte_1.amount_real_sum, 0) as `amount_real_sum` --Сумма ставок на человека
, coalesce(cte_1.ggr_real_sum,0) as `ggr_real_sum` --GGR на человека
from users 
left join cte_1 on users.user_id = cte_1.user_id
left join cte_2 on users.user_id = cte_2.user_id::UInt64
left join cte_3 on users.user_id = cte_3.user_id
left join cte_4 on users.user_id = cte_4.user_id::UInt64
left join cte_5 on users.user_id = cte_5.user_id
left join cte_7 on users.user_id = cte_7.user_id"
yHc962vC,aldo send lead from localStorage,orenchuck,HTML,Tuesday 25th of July 2023 09:42:43 AM CDT,"<script>
(function() {
if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', sendLeadFromLocalStorage);
        } else {
            sendLeadFromLocalStorage();
        }

function sendLeadFromLocalStorage() {
var firstStepData = JSON.parse(localStorage.getItem('adoricUserData'));
if (firstStepData ) {
var data = {
                subscribe: {
                    email: firstStepData.email,
                    gender: firstStepData.gender,
                    phone: '',
                    tags: 'Adoric',
                    marketingAllowed: true,
                    properties: {},
                    userId: '5e4ea052e98c750012b2c583',
                    adoricApiKey: ""1635110566828""
                },
                referrer: '',
                country: '',
                action: 'https://app.remarkety.com/api/v1/stores/Emqzjg4w/contacts',
                enctype: '#',
                method: 'POST',
                campaignData: {
                    options: {
                        id: '64b7e62ff88b3b002327a942',
                        userId: '5e4ea052e98c750012b2c583',
                        domainId: '616bf3e99857f50017db499e',
                        accountId: '61793657f92bfa26d4854470',
                        campaignTitle: ""Popup Gender + phone 19.7.23"",
                        title: ""Desktop No Number Main"",
                        type: ""desktop""
                    }
                }
            };
 
            var xhr = new XMLHttpRequest();
            xhr.addEventListener('readystatechange', function() {
                if (this.readyState === 4) {
                    var response = JSON.parse(this.responseText);
 localStorage.removeItem('adoricUserData')
                }
            });
            xhr.open('POST', 'https://app.adoric-om.com/v1/forms/webhook');
            xhr.setRequestHeader('cache-control', 'no-cache');
            xhr.send(JSON.stringify(data));
}
}
})();
</script>"
VzBWJTgz,Phoenix,aliyahscreation,HTML,Tuesday 25th of July 2023 09:04:19 AM CDT,"<style>
  
  @import url('https://fonts.cdnfonts.com/css/midnight-4');
  @import url('https://fonts.cdnfonts.com/css/ramus-sans');
  @import url('https://fonts.cdnfonts.com/css/kegina');
  
  .backgroundP {
    width:calc(100% - 10px);
    padding:5px;
    margin:auto;
    background-color:#701515;
  }
  
  .headerP {
    width:100%;
    padding:10px 0;
    margin:auto;
    background-color:rgba(255,255,255,0.4);
  }
  
  .titleP {
    width:80%;
    margin:auto;
    background:linear-gradient(to right, #BB0B0B, #FF7F00, #BB0B0B);
    -webkit-background-clip:text;
    color:transparent;
    font:70px Caesar Dressing;
    text-align:center;
  }
  
  .quoteP {
    width:calc(100% - 30px);
    padding:0 15px 8px;
    margin:10px auto;
    animation:5s bgquoteP ease-in-out infinite alternate;
    border-top:1px solid rgba(255,255,255,0.5);
    border-bottom:1px solid rgba(255,255,255,0.5);
    color:#fff;
    text-align:center;
    font:30px Midnight;
  }
  
  @keyframes bgquoteP {
    0% {
      background-color:#BB0B0B;
    }
    100% {
      background-color:#FF7F00;
    }
  }
  
  .navP {
    width:100%;
    margin:15px auto;
    display:flex;
    justify-content:center;
  }
  
  .buttonP {
    width:50px;
    height:50px;
    margin:0 10px;
    clip-path:polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
  }
  
  .buttonP:hover {
    animation:0.7s rotation ease-out;
  }

  @keyframes rotation {
      from {
          transform: rotate(0deg);
        } 
      to {
          transform: rotate(360deg);
        }
  }
  
  .buttonbisP {
    width:10px;
    height:10px;
    margin:20px 0;
    clip-path:polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
    background-color:#FF7F00;
  }
  
  .contentP {
    width:95%;
    height:700px;
    margin:auto;
    margin-bottom:10px;
    overflow:hidden;
    background-color:rgba(255,255,255,0.8);
  }
  
  .partP {
    width:calc(100% - 20px);
    height:680px;
    padding:10px;
    margin:auto;
    overflow:auto;
    font:18px Kegina;
  }
  
  .partP::-webkit-scrollbar { 
     width:5px;
     height:5px;
     box-shadow:inset 0 0 3px #000;
    }

  .partP::-webkit-scrollbar-thumb {
     background:#FF7F00;
  }
  
  .idtopP {
    display:flex;
  }
  
  .idimgP {
    width:calc(24% - 6px);
    margin:0 10px;
    border:3px solid #BB0B0B;
    outline:1px solid #BB0B0B;
    outline-offset:-10px;
  }
  
  .infoboxP {
    width:38%;
  }
  
  .idlabelaP {
    border-bottom:1px solid rgba(0,0,0,0.1);
    font-family:Ramus Sans;
    color:#E73E01;
  }
  
  .idansaP {
    
  }
  
  .idlabelbP {
    border-bottom:1px solid rgba(0,0,0,0.1);
    text-align:right;
    font-family:Ramus Sans;
    color:#E73E01;
  }
  
  .idansbP {
    text-align:right;
  }
  
  .quotebisP {
    width:90%;
    margin:10px auto;
    text-align:center;
    font:22px Midnight;
    color:#701515;
  }
  
  .idimprP {
    width:calc(95% - 104px);
    height:158px;
    margin:auto;
    text-align:justify;
    overflow:auto;
  }
  
  .idimprP::-webkit-scrollbar { 
     width:3px;
     height:3px;
     box-shadow:inset 0 0 7px #000;
    }

  .idimprP::-webkit-scrollbar-thumb {
     background:#FF7F00;
  }
  
  .idimprP span {
    font:30px Ramus Sans;
  }
  
  .aestheticP {
    width:104px;
    height:158px;
    padding:10px;
    margin:auto;
  }
  
  .aesbuttonaP {
    width:50px;
    height:50px;
    margin-top:-23px;
    margin-left:27px;
    clip-path:polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
  }
  
  .aesbuttonbP {
    width:50px;
    height:50px;
    margin-top:-23px;
    clip-path:polygon(50% 0, 100% 50%, 50% 100%, 0 50%);
  }
  
  .bandP {
    width:100%;
    height:80px;
    margin-top:45px;
    background-color:#F2981F;
  }
  
  .idimglineP {
    margin:auto;
    margin-top:-118px;
    margin-bottom:15px;
    display:flex;
    justify-content:center;
  }
  
  .idimgbisP {
    width:calc(20% - 6px);
    height:150px;
    margin:0 10px;
    border:3px solid #BB0B0B;
    outline:1px solid #BB0B0B;
    outline-offset:-10px;
  }
  
  .subtitleP {
    font:40px Caesar Dressing;
  }
  
  .linetraitP {
    width:95%;
    margin:auto;
    display:flex;
    text-align:center;
  }
  
  .traitP {
    flex:33%;
    padding:10px;
	  margin:2px;
	  background:rgba(112,21,21,0.5);
	  transition:all 1s ease-in-out;
    font:18px Ramus Sans;
	  color:#000;
    text-transform:uppercase;
  }
  
  .traitP:hover {
	  background:rgba(112,21,21,0.9);
	  color:rgba(0,0,0,0)
  }

  .traitP > p {
	  transition:all 0.5s ease-in-out;
	  opacity:0;
	  font-size:20px;
	  margin-top:-25px;
	  margin-bottom:-5px;
    cursor:pointer
  }

  .traitP:hover > p {
	  opacity:1;
	  color:#FFF;
  }
  
  .textP {
    text-align:justify;
  }
  
  .textP > b {
    color:#BB0B0B;
  }
  
  .tasteP {
    width:40%;
    margin:0 10px;
    border:2px groove #F2981F;
  }
  
  .tastelegP {
    width:auto;
    margin:auto;
    font:30px Midnight;
    color:#DB1702;
  }
  
  .tastedesP {
    margin-top:-5px;
    text-align:justify;
  }
  
  .preferenceP {
    margin:auto;
    margin-top:15px;
    display:flex;
  }
  
  .prefleftP {
    width:calc(60% - 10px);
    padding-right:10px;
    text-align:justify;
    border-right:3px solid #F4661B;
  }
  
  .triviaP {
    width:calc(40% - 17px);
    margin:15px 0;
    margin-left:7px;
    padding-left:10px;
    border-left:1px solid #F4661B;
  }
  
  .triviaP li {
    margin-left:-20px;
    list-style-type:circle;
  }
  
  .subtitlebisP {
    font:30px Caesar Dressing;
  }
  
  .hobbieslineP {
    margin:10px;
    display:flex;
    justify-content:center;
  }
  
  .hobbyP {
    width:90px;
    height:90px;
    margin:0 5px;
    box-shadow:2px 2px 3px 0px rgba(244,102,27,0.5);
  }

  .hobbyP span {
	  width:90px;
    height:90px;
    display:flex;
    align-items:center;
    justify-content:center;
    background:rgba(244,102,27,0.7);
    transition:1s;
    opacity:0;
    text-align:center;
    font:18px calibri;
    color:#fff;
  }
 
  .hobbyP:hover span {
    opacity:1;
  }
  
  .prefshowP {
    margin-top:15px;
    display:flex;
    justify-content:center;
    margin-bottom:15px;
  }
  
  .showP {
    width:30%;
    height:200px;
    margin:auto;
  }
  
  .apimgP {
    width:50%;
    height:auto;
    margin-right:10px;
    display:grid;
    grid-gap:5px;
    grid-template-columns:1fr 1fr 1fr;
    grid-template-rows:1fr 1fr 1fr;
    grid-template-areas:'one one two' 'three four four' 'five five six';
  }
  
  .apimglineP {
    margin:auto;
    margin-top:-108px;
    margin-bottom:15px;
    display:flex;
    justify-content:center;
  }
  
  .apimgbisP {
    width:130px;
    height:130px;
    margin:0 10px;
    border:3px solid #BB0B0B;
    outline:1px solid #BB0B0B;
    outline-offset:-10px;
  }

  .apimgbisP span {
	  width:130px;
    height:130px;
    display:flex;
    align-items:center;
    justify-content:center;
    background:rgba(244,102,27,0.5);
    transition:1s;
    opacity:0;
    text-align:center;
    color:#fff;
  }
 
  .apimgbisP:hover span {
    opacity:1;
  }
  
  .dressingP {
    margin-top:15px;
    display:flex;
    justify-content:space-between;
  }
  
  .dressingimgP {
    width:calc(33% - 15px);
    height:300px;
    border:3px solid #BB0B0B;
    outline:1px solid #BB0B0B;
    outline-offset:-10px;
    transition:1s;
  }
  
  .dressingimgP:hover {
    filter:brightness(150%);
  }
  
  .powersP {
    width:calc(50% - 15px);
    margin-left:15px;
    text-align:justify;
  }
  
  .powersP span {
    font:30px Ramus Sans;
  }
  
  .genP {
    margin-top:10px;
  }
  
  .genP > blockquote {
    padding-left:5px;
    margin:0px;
    border-left:6px solid #BB0B0B;
  }
  
  .genP > blockquote > blockquote {
    padding-left:5px;
    margin:5px;
    border-left:4px solid #E73E01;
  }
  
  .genP > blockquote > blockquote > blockquote {
    padding-left:5px;
    margin:5px;
    border-left:2px solid #F2981F;
  }
  
  .genP span {
    font:20px Ramus Sans;
  }
  
  .rellineP {
    width:100%;
    margin-top:10px;
    display:flex;
    justify-content:space-between;
  }
  
  .relationP {
    width:calc(50% - 5px);
  }
  
  .relationP > summary {
    width:85%;
    padding:5px;
    margin:auto;
    animation:5s bgquoteP ease-in-out infinite alternate;
    border:1px solid #fff;
    text-align:center;
    font:25px Midnight;
    color:#fff;
  }
  
  .relationP > div {
    padding:5px;
    margin-top:10px;
    background-color:rgba(255,255,255,0.7);
    border:1px solid rgba(0,0,0,0.2);
    text-align:justify;
    font-size:16px;
  }
  
  .imgrelP {
    width:120px;
    height:120px;
    float:right;
    margin-left:10px;
    border:3px solid #BB0B0B;
    outline:1px solid #BB0B0B;
    outline-offset:-7px;
    transition:1s;
  }
  
  .imgrelP:hover {
    filter:brightness(120%);
  }

  .relationP > div > span {
    font:22px Caesar Dressing;
    color:#701515;
  }
  
  .rpboxP {
    width:calc(100% - 12px);
    padding:5px;
    margin:auto;
    margin-top:10px;
    background-color:rgba(0,0,0,0.1);
    border:1px solid rgba(0,0,0,0.2);
  }
  
  .rpboxP span {
    font:30px Ramus Sans;
    color:#701515;
  }
  
  .rpP {
    padding:5px;
    display:flex;
    border-top:1px solid rgba(0,0,0,0.1);
    justify-content:space-between;
    text-align:center;
  }
  
  .rpmonthP {
    width:10%;
  }
  
  .rplinkP {
    width:calc(50% - 20px);
    font-family:Ramus Sans;
  }
  
  .rplinkP a {
    text-decoration:none;
    color:#BB0B0B;
  }
  
  .rpnamesP {
    width:40%;
  }
  
</style>


<link href=""https://fonts.googleapis.com/css2?family=Caesar+Dressing&display=swap"" rel=""stylesheet"">


<div class=""backgroundP"">
  <!--HEADER-->
  <div class=""headerP"">
    <div class=""titleP"">An amazing Name</div>
    <div class=""quoteP"">❝ An amazing quote, maybe on few lines... This quote can be as long as you want ❞</div>
  </div>
  <!--NAVIGATION BUTTONS-->
  <div class=""navP"">
    <a href=""#1""><div class=""buttonP"" style=""background:url(https://media.tenor.com/Ug_-xLpq4AoAAAAC/fire-power.gif)center;background-size:cover;""></div></a>
    <div class=""buttonbisP""></div>
    <a href=""#2""><div class=""buttonP"" style=""background:url(https://media.tenor.com/Ug_-xLpq4AoAAAAC/fire-power.gif)center;background-size:cover;""></div></a>
    <div class=""buttonbisP""></div>
    <a href=""#3""><div class=""buttonP"" style=""background:url(https://media.tenor.com/Ug_-xLpq4AoAAAAC/fire-power.gif)center;background-size:cover;""></div></a>
    <div class=""buttonbisP""></div>
    <a href=""#4""><div class=""buttonP"" style=""background:url(https://media.tenor.com/Ug_-xLpq4AoAAAAC/fire-power.gif)center;background-size:cover;""></div></a>
    <div class=""buttonbisP""></div>
    <a href=""#5""><div class=""buttonP"" style=""background:url(https://media.tenor.com/Ug_-xLpq4AoAAAAC/fire-power.gif)center;background-size:cover;""></div></a>
  </div>
  <div class=""contentP"">
    
    <!--EACH PART-->
    <a id=""1""></a>
    <div class=""partP"">
      <div class=""idtopP"">
        <div class=""infoboxP"">
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Full Name</div>
          <div class=""idansaP"">An amazing Name</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Nicknames</div>
          <div class=""idansbP"">Blblbl</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Birthday</div>
          <div class=""idansaP"">Blblbl</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Zodiac</div>
          <div class=""idansbP"">Blblbl</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Birthplace</div>
          <div class=""idansaP"">Blblbl</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Nationality</div>
          <div class=""idansbP"">Blblbl</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Residence</div>
          <div class=""idansaP"">Blblbl</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Occupation</div>
          <div class=""idansbP"">Blblbl</div>
        </div>
        <div class=""idimgP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""infoboxP"">
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Sexuality</div>
          <div class=""idansaP"">Blblbl</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Status</div>
          <div class=""idansbP"">Blblbl</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
        </div>
      </div>
      <!--QUOTE-->
      <div class=""quotebisP"">
        ❝ An amazing quote, maybe on few lines... This quote can be as long as you want ❞
      </div>
      <div style=""display:flex;"">
        <!--FIRST IMPRESSION-->
        <div class=""idimprP"">
          <center><span>First Impression</span></center>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi.
        </div>
        <!--AESTHETIC-->
        <div class=""aestheticP"">
          <div class=""aesbuttonaP"" style=""background-color:#BB0B0B;margin-top:0px;""></div>
          <div style=""display:flex;"">
            <div class=""aesbuttonbP"" style=""background-color:#DB1702;""></div>
            <div class=""aesbuttonbP"" style=""background-color:#DE2916;margin-left:4px;""></div>
          </div>
          <div class=""aesbuttonaP"" style=""background-color:#E73E01;""></div>
          <div style=""display:flex;"">
            <div class=""aesbuttonbP"" style=""background-color:#F4661B;""></div>
            <div class=""aesbuttonbP"" style=""background-color:#FF7F00;margin-left:4px;""></div>
          </div>
          <div class=""aesbuttonaP"" style=""background-color:#F2981F;""></div>
        </div>
      </div>
      <!--BACKGROUND COLORED BAND-->
      <div class=""bandP""></div>
      <!--IMG LINE-->
      <div class=""idimglineP"">
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
      </div>
      <div class=""subtitleP"">Personality</div>
      <!--TRAITS LINE-->
      <div class=""linetraitP"" style=""margin-top:10px;"">
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
      </div>
      <!--TRAITS LINE-->
      <div class=""linetraitP"">
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
      </div>
      <!--TRAITS LINE-->
      <div class=""linetraitP"" style=""margin-bottom:10px;"">
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
        <!--TRAIT-->
				<div class=""traitP"">
					Trait
					<p>XX%</p>
				</div>
      </div>
      <!--TEXT ZONE-->
      <div class=""textP"">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat. Duis semper. Duis arcu massa, scelerisque vitae, consequat in, pretium a, enim. Pellentesque congue. Ut in risus volutpat libero pharetra tempor. Cras vestibulum bibendum augue. Praesent egestas leo in pede. Praesent blandit odio eu enim. Pellentesque sed dui ut augue blandit sodales. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Aliquam nibh. Mauris ac mauris sed pede pellentesque fermentum. Maecenas adipiscing ante non diam sodales hendrerit.
      </div>
      <!--TASTE-->
      <div style=""display:flex;margin-top:10px;justify-content:center;"">
        <!--LIKE-->
        <fieldset class=""tasteP"">
          <legend class=""tastelegP"">Like</legend>
          <div class=""tastedesP"">
            Blurb - Blurb - Blurb - Blurb - Blurb - Blurb
          </div>
        </fieldset>
        <!--DISLIKE-->
        <fieldset class=""tasteP"">
          <legend class=""tastelegP"">Dislike</legend>
          <div class=""tastedesP"">
            Blurb - Blurb - Blurb - Blurb - Blurb - Blurb
          </div>
        </fieldset>
      </div>
      <div class=""preferenceP"">
        <!--PREFERENCES-->
        <div class=""prefleftP"">
          <div class=""subtitlebisP"">Hobbies</div>
          <!--HOBBIES LINE-->
          <div class=""hobbieslineP"">
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://i.pinimg.com/originals/7c/db/1e/7cdb1ea69014d3dfcd152914305a6d3f.jpg)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://i.pinimg.com/736x/a3/d9/f3/a3d9f3cfc2e476c6e7564a8ab486326a.jpg)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://64.media.tumblr.com/7207c508bf4c9924f11de354e17797bc/46bbca496cb6d1bf-51/s1280x1920/095b6fc878a47c4c75687f9b3401a85932ed9610.jpg)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgOdwdI3OS8EljOE4fJ--qiT5mZ8euXBMZpQ&usqp=CAU)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
          </div>
          <!--HOBBIES LINE-->
          <div class=""hobbieslineP"">
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://i.pinimg.com/originals/7c/db/1e/7cdb1ea69014d3dfcd152914305a6d3f.jpg)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://i.pinimg.com/736x/a3/d9/f3/a3d9f3cfc2e476c6e7564a8ab486326a.jpg)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://64.media.tumblr.com/7207c508bf4c9924f11de354e17797bc/46bbca496cb6d1bf-51/s1280x1920/095b6fc878a47c4c75687f9b3401a85932ed9610.jpg)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
            <!--EACH HOBBY-->
            <div class=""hobbyP"" style=""background:url(https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgOdwdI3OS8EljOE4fJ--qiT5mZ8euXBMZpQ&usqp=CAU)center;background-size:cover;"">
              <span>Hobby</span>
            </div>
          </div>
          <!--FAV SHOWS-->
          <div class=""subtitlebisP"">Favorite Shows</div>
          <div class=""prefshowP"">
            <div class=""showP"" style=""background:url('https://images-na.ssl-images-amazon.com/images/I/41t9Ddq0djL._AC_.jpg')center;background-size:cover""></div>
            <div class=""showP"" style=""background:url('https://images-na.ssl-images-amazon.com/images/I/91LcizItUqL._AC_SL1500_.jpg')center;background-size:cover""></div>
            <div class=""showP"" style=""background:url('https://static.posters.cz/image/750/affiches-et-posters/the-boys-sunburst-i101099.jpg')center;background-size:cover""></div>
          </div>
        </div>
        <!--TRIVIA-->
        <div class=""triviaP"">
          <div class=""subtitlebisP"">Trivia</div>
          <ul style=""margin-top:5px;"">
            <li>Some great information about your character</li>
            <li>Another great information about your character</li>
            <li>Another great information about your character</li>
            <li>Another great information about your character</li>
            <li>Another great information about your character</li>
            <li>Another great information about your character</li>
            <li>Another great information about your character</li>
            <li>Another great information about your character</li>
          </ul>
        </div>
      </div>
    </div>
    
    <!--EACH PART-->
    <a id=""2""></a>
    <div class=""partP"">
      <div style=""display:flex;"">
        <!--GALLERY-->
        <div class=""apimgP"">
          <div style=""grid-area:one;background:url(https://i.gifer.com/embedded/download/LHsk.gif)center;background-size:cover;""></div>
          <div style=""grid-area:two;background:url(https://i.gifer.com/embedded/download/LHsk.gif)center;background-size:cover;""></div>
          <div style=""grid-area:three;background:url(https://i.gifer.com/embedded/download/LHsk.gif)center;background-size:cover;""></div>
          <div style=""grid-area:four;background:url(https://i.gifer.com/embedded/download/LHsk.gif)center;background-size:cover;""></div>
          <div style=""grid-area:five;background:url(https://i.gifer.com/embedded/download/LHsk.gif)center;background-size:cover;""></div>
          <div style=""grid-area:six;background:url(https://i.gifer.com/embedded/download/LHsk.gif)center;background-size:cover;""></div>
        </div>
        <!--APPEARANCE INFO-->
        <div style=""width:50%;"">
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Hairs</div>
          <div class=""idansaP"">Blblbl</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Eyes</div>
          <div class=""idansbP"">Blblbl</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Skin</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Building</div>
          <div class=""idansbP"">Information</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
        </div>
      </div>
      <!--TEXT ZONE-->
      <div class=""textP"" style=""margin:10px auto;"">
        Ut velit mauris, egestas sed, gravida nec, ornare ut, mi. Aenean ut orci vel massa suscipit pulvinar. Nulla sollicitudin. Fusce varius, ligula non tempus aliquam, nunc turpis ullamcorper nibh, in tempus sapien eros vitae ligula. Pellentesque rhoncus nunc et augue. Integer id felis. Curabitur aliquet pellentesque diam. Integer quis metus vitae elit lobortis egestas. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Morbi vel erat non mauris convallis vehicula. Nulla et sapien. Integer tortor tellus, aliquam faucibus, convallis id, congue eu, quam. Mauris ullamcorper felis vitae erat. Proin feugiat, augue non elementum posuere, metus purus iaculis lectus, et tristique ligula justo vitae magna.
      </div>
      <!--BACKGROUND COLORED BAND-->
      <div class=""bandP""></div>
      <!--IMG LINE-->
      <div class=""apimglineP"">
        <!--EACH IMG-->
        <div class=""apimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;"">
          <span>Piercings</span>
        </div>
        <!--EACH IMG-->
        <div class=""apimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;"">
          <span>Tatoos</span>
        </div>
        <!--EACH IMG-->
        <div class=""apimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;"">
          <span>Blurb</span>
        </div>
        <!--EACH IMG-->
        <div class=""apimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;"">
          <span>Blurb</span>
        </div>
      </div>
      <!--QUOTE-->
      <div class=""quotebisP"">
        ❝ An amazing quote, maybe on few lines... This quote can be as long as you want ❞
      </div>
      <div class=""subtitleP"">Dress style</div>
      <!--TEXT ZONE-->
      <div class=""textP"" style=""width:95%;margin:auto;"">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. <b>Sed non risus.</b> Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin <b>porttitor</b>, orci nec nonummy <b>molestie</b>, enim est <b>eleifend</b> mi, non fermentum diam nisl sit amet erat.
      </div>
      <!--DRESSING LINE-->
      <div class=""dressingP"">
        <div class=""dressingimgP"" style=""background:url(https://i.pinimg.com/736x/15/f7/4f/15f74f861d2b9bee0b3b89cc1fc311bc.jpg)center;background-size:cover;""></div>
        <div class=""dressingimgP"" style=""background:url(https://i.pinimg.com/736x/15/f7/4f/15f74f861d2b9bee0b3b89cc1fc311bc.jpg)center;background-size:cover;""></div>
        <div class=""dressingimgP"" style=""background:url(https://i.pinimg.com/736x/15/f7/4f/15f74f861d2b9bee0b3b89cc1fc311bc.jpg)center;background-size:cover;""></div>
      </div>
      <!--DRESSING LINE-->
      <div class=""dressingP"">
        <div class=""dressingimgP"" style=""background:url(https://i.pinimg.com/736x/15/f7/4f/15f74f861d2b9bee0b3b89cc1fc311bc.jpg)center;background-size:cover;""></div>
        <div class=""dressingimgP"" style=""background:url(https://i.pinimg.com/736x/15/f7/4f/15f74f861d2b9bee0b3b89cc1fc311bc.jpg)center;background-size:cover;""></div>
        <div class=""dressingimgP"" style=""background:url(https://i.pinimg.com/736x/15/f7/4f/15f74f861d2b9bee0b3b89cc1fc311bc.jpg)center;background-size:cover;""></div>
      </div>
    </div>
    
    <!--EACH PART-->
    <a id=""3""></a>
    <div class=""partP"">
      <div style=""display:flex;"">
        <!--ABILITIES INFO-->
        <div style=""width:50%;"">
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">House</div>
          <div class=""idansaP"">Blblbl</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Status</div>
          <div class=""idansbP"">Blblbl</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
          <!--LEFT VERSION-->
          <div class=""idlabelaP"">Label</div>
          <div class=""idansaP"">Information</div>
          <!--RIGHT VERSION-->
          <div class=""idlabelbP"">Label</div>
          <div class=""idansbP"">Information</div>
        </div>
        <!--POWERS-->
        <div class=""powersP"">
          <center><span>Powers</span></center>
          Blurb ✦✦✦✦✧<br/>
          Blurb ✦✦✧✧✧<br/>
          Blurb ✦✦✦✦✦<br/>
          Blurb ✦✧✧✧✧<br/>
          Blurb ✦✦✦✧✧
          <br/><br/>
          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi.
        </div>
      </div>
      <div class=""subtitleP"">Skills</div>
      <!--TASTE-->
      <div style=""display:flex;justify-content:center;"">
        <!--LIKE-->
        <fieldset class=""tasteP"">
          <legend class=""tastelegP"">Good at</legend>
          <div class=""tastedesP"">
            Blurb - Blurb - Blurb - Blurb - Blurb - Blurb
          </div>
        </fieldset>
        <!--DISLIKE-->
        <fieldset class=""tasteP"">
          <legend class=""tastelegP"">Bad at</legend>
          <div class=""tastedesP"">
            Blurb - Blurb - Blurb - Blurb - Blurb - Blurb
          </div>
        </fieldset>
      </div>
      <!--TEXT ZONE-->
      <div class=""textP"" style=""margin-top:15px;"">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. <b>Sed non risus.</b> Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin <b>porttitor</b>, orci nec nonummy <b>molestie</b>, enim est <b>eleifend</b> mi, non fermentum diam nisl sit amet erat.
      </div>
      <!--BACKGROUND COLORED BAND-->
      <div class=""bandP"" style=""margin-top:50px;""></div>
      <!--IMG LINE-->
      <div class=""idimglineP"" style=""margin-bottom:0;"">
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
      </div>
    </div>
    
    <!--EACH PART-->
    <a id=""4""></a>
    <div class=""partP"">
      <div class=""subtitleP"" style=""text-align:center;"">Family Tree</div>
      <!--FAMILY TREE-->
      <div class=""genP"">
        <!--FIRST GEN-->
        <blockquote>
          <span>Grandfather</span> Name<br/>
          <span>Grandmother</span> Name
          <!--SECOND GEN-->
          <blockquote>
            <span>Father</span> Name<br/>
            <span>Mother</span> Name
            <!--THIRD GEN-->
            <blockquote>
              <span>Brother</span> Name<br/>
              <span>Sister</span> Name
            </blockquote>
          </blockquote>
        </blockquote>
      </div>
      <!--QUOTE-->
      <div class=""quotebisP"">
        ❝ An amazing quote, maybe on few lines... This quote can be as long as you want ❞
      </div>
      <!--RELATION LINE-->
      <div class=""rellineP"">
        <!--EACH RELATION-->
        <details class=""relationP"" open>
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat.
          </div>
        </details>
        <!--EACH RELATION-->
        <details class=""relationP"" open>
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. 
          </div>
        </details>
      </div>
      <!--RELATION LINE-->
      <div class=""rellineP"">
        <!--EACH RELATION-->
        <details class=""relationP"" open>
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. 
          </div>
        </details>
        <!--EACH RELATION-->
        <details class=""relationP"">
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat.
          </div>
        </details>
      </div>
      <!--RELATION LINE-->
      <div class=""rellineP"">
        <!--EACH RELATION-->
        <details class=""relationP"">
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat.
          </div>
        </details>
        <!--EACH RELATION-->
        <details class=""relationP"">
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat.
          </div>
        </details>
      </div>
      <!--RELATION LINE-->
      <div class=""rellineP"">
        <!--EACH RELATION-->
        <details class=""relationP"">
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat.
          </div>
        </details>
        <!--EACH RELATION-->
        <details class=""relationP"">
          <summary>An amazing Name</summary>
          <div>
            <div class=""imgrelP"" style=""background:url(https://64.media.tumblr.com/0ef1caf7b2542327f5e91326bd681083/tumblr_nnool8KwIf1sfmnojo2_500.gifv)center;background-size:cover;""></div>
            <span>An amazing Relation</span>
            <br/><br/>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam. Maecenas ligula massa, varius a, semper congue, euismod non, mi. Proin porttitor, orci nec nonummy molestie, enim est eleifend mi, non fermentum diam nisl sit amet erat.
          </div>
        </details>
      </div>
    </div>
    
    <!--EACH PART-->
    <a id=""5""></a>
    <div class=""partP"">
      <!--BACKGROUND COLORED BAND-->
      <div class=""bandP"" style=""margin-top:38px;""></div>
      <!--IMG LINE-->
      <div class=""idimglineP"">
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
        <div class=""idimgbisP"" style=""background:url(https://media.tenor.com/FZ5imdgkuhAAAAAd/%D0%BA%D0%BE%D0%BD%D1%91%D0%BA%D0%B3%D0%BE%D1%80%D0%B1%D1%83%D0%BD%D0%BE%D0%BA-konik-garbusek.gif)center;background-size:cover;""></div>
      </div>
      <div class=""subtitleP"">Roleplay</div>
      <!--ROLEPLAY LIST-->
      <div class=""rpboxP"">
        <center><span>Year WoX ?</span></center>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
      </div>
      <!--ROLEPLAY LIST-->
      <div class=""rpboxP"">
        <center><span>Year WoX ?</span></center>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
        <!--EACH RP-->
        <div class=""rpP"">
          <div class=""rpmonthP"">
            Month
          </div>
          <div class=""rplinkP"">
            <a href=""URL"" target=""blank_"">An amazing RP's name</a>
          </div>
          <div class=""rpnamesP"">
            Some amazing names
          </div>
        </div>
      </div>
      <!--QUOTE-->
      <div class=""quotebisP"" style=""margin-bottom:0;"">
        ❝ An amazing quote, maybe on few lines... This quote can be as long as you want ❞
      </div>
    </div>
    
  </div> 
</div>



<!-- CREDITS, DO NOT TOUCH-->
<div style=""margin:0 auto;text-align:center;""><a href=""https://aliyahscreations.tumblr.com/"" style=""font-size:10px;letter-spacing:2px;color:#222;text-decoration:none; font-family:century gothic,helvetica,arial,sans-serif;font-size:12px;line-height:1.3;"">© Code by Aliyah</a></div>"
puFSS9q9,JS: Variable Hoisting Example,SoerenHelms,HTML,Tuesday 25th of July 2023 09:03:08 AM CDT,"<!DOCTYPE html>
<html>
<body>
<h1>Hoisting Demo</h1>

<h2>Deklarationen</h2>
<p id=""demo1""></p>
<p id=""demo2""></p>

<h2>Initialisierungen</h2>
<p id=""demo3""></p>
<p id=""demo4""></p>

<script>
var a;
var b;
a = 5;
b = 7;
elem = document.getElementById(""demo1""); // Find an element 
elem.innerHTML = a + "" "" + b;           // Display x and y

c = 5;
d = 7;
elem = document.getElementById(""demo2""); // Find an element 
elem.innerHTML = c + "" "" + d;           // Display x and y
var c;
var d;

var e = 5; 
var f = 7; 

elem = document.getElementById(""demo3""); // Find an element 
elem.innerHTML = e + "" "" + f;           // Display x and y

var g = 5; 

elem = document.getElementById(""demo4""); // Find an element 
elem.innerHTML = g + "" "" + h;           // Display x and y

var h = 7; 

</script>

</body>
</html> "
20nJGYme,Complete reso DR,CyberWaltz,JSON,Tuesday 25th of July 2023 08:51:34 AM CDT,"{
  ""arrivedGirls"": 0,
  ""arrivedGuests"": 0,
  ""arrivedGuys"": 0,
  ""attachedTables"": [],
  ""bookedBy"": {
    ""birthday"": ""2016-09-11"",
    ""fullName"": ""Tech Support"",
    ""hasFacebookProfile"": false,
    ""id"": 1,
    ""isAdmin"": false,
    ""userpic"": ""https://dzbwcqs3bd4zb.cloudfront.net/bf8c5335-1d2e-4958-9b28-cafc8aaeae06.jpg""
  },
  ""bookingNote"": """",
  ""bottleMin"": 0,
  ""bottleService"": ""TABLE"",
  ""chatMsgNum"": 0,
  ""chatUnreadMsgNum"": 0,
  ""coloredTags"": [
    {
      ""bgColor"": ""007A9BFF"",
      ""id"": 13480,
      ""name"": ""#NFT OWNER"",
      ""orderIndex"": 9,
      ""venueId"": 463
    }
  ],
  ""completionFeedback"": {
    ""message"": """",
    ""rating"": 0
  },
  ""complimentGirls"": false,
  ""complimentGuys"": false,
  ""creationDate"": ""2023-07-25"",
  ""creationTime"": ""06:36:11"",
  ""deleted"": false,
  ""driverRequested"": {
    ""phoneNumber"": ""+79991947903"",
    ""pickUpTime"": ""14:35"",
    ""guests"": 6,
    ""id"": 24,
    ""pickUpLocation"": ""h"",
    ""reservation"": 1333417,
    ""unitNumber"": ""gg76""
  },
  ""eventId"": 35287,
  ""fromLinkedVenue"": false,
  ""fromWeb"": false,
  ""girlsComped"": 0,
  ""girlsNumber"": 0,
  ""girlsReduced"": 0,
  ""girlsRegular"": 0,
  ""guestInfo"": {
    ""address"": ""H"",
    ""city"": ""R"",
    ""country"": ""DZ"",
    ""email"": ""alexandr.epifanov73@gmail.com"",
    ""firstName"": ""Alejandro"",
    ""fullName"": ""Alejandro Yep"",
    ""guestInfoId"": 517745,
    ""hasFacebookProfile"": false,
    ""id"": 517745,
    ""lastName"": ""Yep"",
    ""lastReservationDate"": ""2023-07-25"",
    ""phoneNumber"": ""+79991947903"",
    ""state"": ""E""
  },
  ""guestsNumber"": 21,
  ""guysComped"": 0,
  ""guysNumber"": 0,
  ""guysReduced"": 0,
  ""guysRegular"": 0,
  ""id"": 1333417,
  ""internalNotes"": [],
  ""lastChangeDate"": ""2023-07-25"",
  ""lastChangeTime"": ""09:49:38"",
  ""liveSpend"": 0,
  ""minSpend"": 0,
  ""mustEnter"": false,
  ""notifyEmailMgmtOnArrival"": false,
  ""notifyMgmtOnArrival"": false,
  ""payees"": [],
  ""paymentMethod"": ""NONE"",
  ""photos"": [],
  ""previousStatus"": ""PENDING"",
  ""reducedGirls"": false,
  ""reducedGuys"": false,
  ""reservationDate"": ""2023-07-25"",
  ""signatures"": [],
  ""staff"": [],
  ""status"": ""COMPLETED"",
  ""statusChangeTime"": ""09:49:38"",
  ""tableInfo"": {
    ""bottleServiceType"": ""TABLE"",
    ""closed"": false,
    ""id"": 5522,
    ""orderIndex"": 0,
    ""placeNumber"": ""10"",
    ""sectionId"": 29
  },
  ""tablesRequired"": 1,
  ""tags"": [],
  ""totalGuests"": 21,
  ""totalSpent"": 0,
  ""venueId"": 463
}"
UN8jfpXr,Mineshaft-staircase,MarsP4ste,Lua,Tuesday 25th of July 2023 08:43:53 AM CDT,"print(""how deep?"")
write(""->"")
depth = tonumber(read())
print(depth)

function forward()
  while not turtle.forward() do
    turtle.dig()
    sleep(1.5)
  end
end

function down()
  while not turtle.down() do
    turtle.digDown()
    sleep(1.5)
  end
end

looped = 0
maxdepth = depth

while depth > 0 do
  term.clear()
  term.setCursorPos(1,1)
  print(""Doing layer ""..(maxdepth-depth).."" of ""..maxdepth)  
  forward()
  turtle.digDown()
  forward()
  down()
  turtle.dig()
  down()
  depth = depth - 1
  looped = 1
end

if looped == 1 then
  turtle.dig()
end
"
qyP8r4gx,account_topup,filipr27,JavaScript,Tuesday 25th of July 2023 08:31:10 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""account_topup"",
  eventLabel: ""business"",
  eventAction: ""account_activated"",
  business_type: ""b2c""  // b2b or b2c
  topup_value: 1200,
  currency: ""RSD"",
})"
kHUdjQsv,Query,john_smith_1488,Python,Tuesday 25th of July 2023 08:27:13 AM CDT,"from abc import ABC, abstractmethod
from os import linesep
from logging import error
from itertools import count as iter_count
from datetime import timedelta
from sys import exit
from numpy import percentile as perc
from re import match
from datetime import datetime
from pandas import DataFrame
 
from models.column_models.summary_column_names import SummaryColumns
from models.settings import Settings
 
 
class QueryBase(ABC):
    """"""Абстрактный класс для работы с источниками подачи нагрузки""""""
 
    # Column names
    PROFILE = ""_По профилю""
    PASSED = ""_Успешные""
    FAILED = ""_Неуспешные""
    RESPONSE_TIME = ""_Время отклика""
    SLA = ""_SLA, сек""
    ERROR_PERCENT = ""_Ошибки, %""
    PROFILE_PERCENT = ""_Попадание в профиль, %""
    RPS = ""_RPS""
 
    # Expand names
    EXPAND_PROFILE = ""Нагрузка по профилю""
    EXPAND_PASSED = ""Выполненные транзакции""
    EXPAND_FAILED = ""Проваленные транзакции""
    EXPAND_SLA = ""SLA""
    EXPAND_RESPONSE_TIME = 'Время отклика'
    EXPAND_ERROR_PERCENT = ""Процент ошибок""
    EXPAND_PROFILE_PERCENT = ""Процент попадания в профиль""
 
    def __init__(self):
 
        """"""Инициализация класса для работы с источником нагрузки""""""
 
        super().__init__()
 
    @abstractmethod
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        """"""Количество виртуальных пользователей
 
        @param settings: экземпляр класса Settings
        @param start_time: время начала теста
        @param stop_time: время конца теста
        @return: строка или словарь с телом запроса
        """"""
        pass
 
    @abstractmethod
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        """"""Получение списка виртуальных пользователей в тесте / на ступени
 
        @param settings:
        @param vu_result_set: словарь
        @return: список
        """"""
        pass
 
    @abstractmethod
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        """"""Данные по транзакциям: успешные, неуспешные, время отлика
 
        @param settings: экземпляр класса Settings
        @return: список запросов
        """"""
        pass
 
    @abstractmethod
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
        pass
 
    @abstractmethod
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> str:
 
        """"""Количество рпс
 
        @param settings: экземпляр класса Settings
        @param start_time: время начала теста/ступени
        @param stop_time: время конца теста/ступени
        @return:
        """"""
        pass
 
    @abstractmethod
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        """"""Количество виртуальных пользователей
 
        @param tps_result_set: result_set с сырыми данными
        @return: кортеж с временной точкой и величиной рпс
        """"""
        pass
 
    @abstractmethod
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        """"""Данные по успешным и неуспешным транзакциям за всё время теста
 
        @param settings: экземпляр класса Settings
        @return: список запросов
        """"""
        pass
 
    @staticmethod
    def get_all_columns_names(percentile: int) -> dict:
        return {QueryBase.PROFILE: QueryBase.EXPAND_PROFILE,
                QueryBase.PASSED: QueryBase.EXPAND_PASSED,
                QueryBase.FAILED: QueryBase.EXPAND_FAILED,
                QueryBase.get_resp_time_name(percentile): QueryBase.EXPAND_RESPONSE_TIME,
                QueryBase.SLA: QueryBase.EXPAND_SLA,
                QueryBase.ERROR_PERCENT: QueryBase.EXPAND_ERROR_PERCENT,
                QueryBase.PROFILE_PERCENT: QueryBase.EXPAND_PROFILE_PERCENT}
 
    @staticmethod
    def get_value_from_result_set(tps_result_set,
                                  column_name: str) -> float or None:
 
        """"""Среднее значение рпс по указанной колонке
 
        @param tps_result_set: result_set со значениями рпс
        @param column_name: имя колонки для поиска значений
        @return: среднее значение рпс
        """"""
 
        v_list = [data[column_name]
                  for k, v in tps_result_set.items()
                  for data in v
                  if data[column_name] is not None]
 
        value = None
        if v_list:
            value = round(sum(v_list) / len(v_list), 1)
 
        return value
 
    @staticmethod
    def get_time_from_minutes(minutes: int or float) -> str:
 
        """"""Количество часов:минут в указанном количестве минут
 
        @param minutes: количество минут
        @return: строка
        """"""
 
        return str(timedelta(minutes=minutes))[:-3]
 
    @staticmethod
    def get_resp_time_name(percentile: int) -> str:
 
        """"""Перцентиль времени отклика
 
        @param percentile: значение перцентиля
        @return: строка
        """"""
 
        return f'_Время отклика ({percentile}perc), сек'
 
    @staticmethod
    def get_time_cast_all_name(minutes: int or float) -> str:
 
        """"""Время выполнения всех транзакций за указанное количество минут
 
        @param minutes: количество минут
        @return: строка
        """"""
 
        time = QueryBase.get_time_from_minutes(minutes)
        return f'_Sum transaction time cast ({time})'
 
    @staticmethod
    def get_time_cast_passed_name(minutes: int or float) -> str:
 
        """"""Время выполнения успешных транзакций
 
        @param minutes: количество минут
        @return: строка
        """"""
 
        time = QueryBase.get_time_from_minutes(minutes)
        return f'_Passed transaction time cast ({time})'
 
    @staticmethod
    def get_time_cast_failed_name(minutes: int or float) -> str:
 
        """"""Время выполнения неуспешных транзакций
 
        @param minutes: количество минут
        @return: строка
        """"""
 
        time = QueryBase.get_time_from_minutes(minutes)
        return f'_Failed transaction time cast ({time})'
 
    @staticmethod
    def _get_resp_time_list(template: str,
                            number_column: iter_count,
                            default_percentile: int,
                            additional_response_time_perc: int or list or None,
                            additional_block: str = '') -> iter_count and list:
 
        resp_time_list = []
        default_response_time = [template.replace('%%%percentile%%%', str(default_percentile)),
                                 f'{next(number_column)}{QueryBase.get_resp_time_name(default_percentile)}']
 
        resp_time_list.append(default_response_time)
 
        if additional_response_time_perc is not None:
            if isinstance(additional_response_time_perc, int):
                percentile = additional_response_time_perc
                additional_resp_time_list = [template.replace('%%%percentile%%%', str(percentile)),
                                             f'{next(number_column)}{QueryBase.get_resp_time_name(percentile)}']
                resp_time_list.append(additional_resp_time_list)
 
            else:
                for percentile in additional_response_time_perc:
                    additional_resp_time_list = [template.replace('%%%percentile%%%', str(percentile)),
                                                 f'{next(number_column)}{QueryBase.get_resp_time_name(percentile)}']
                    resp_time_list.append(additional_resp_time_list)
 
        if additional_block:
            for resp_time_perc in resp_time_list:
                resp_time_perc.insert(-1, additional_block)
 
        return number_column, resp_time_list
 
    @staticmethod
    def _get_sql_str(start_time: int or None = None,
                     stop_time: int or None = None,
                     select: str = '',
                     db_name: str = '',
                     where: str = '',
                     run_query: str = '',
                     group_by: str = '',
                     limit: int = -1) -> str:
 
        if start_time and stop_time:
            time = f'time >= {start_time}s ' \
                   f'AND time <= {stop_time}s '
        else:
            time = ''
 
        if limit == -1:
            limit = ''
 
        sql = f'SELECT {select} ' \
              f'FROM ""{db_name}"" ' \
              f'WHERE {run_query} ' \
              f'{time} ' \
              f'{where} ' \
              f'GROUP BY {group_by} ' \
              f'LIMIT {limit}'
 
        if not where and not run_query and not time:
            sql = sql.replace(' WHERE ', '')
 
        if not group_by:
            sql = sql.replace(' GROUP BY ', '')
 
        if not limit:
            sql = sql.replace(' LIMIT ', '')
 
        return sql
 
    @staticmethod
    def _get_prometheus_query_dict(query: str,
                                   start_time: int,
                                   stop_time: int,
                                   step: int = 60) -> dict:
        sql = {
            'query': query,
            'start': start_time,
            'end': stop_time,
            'step': step
        }
 
        return sql
 
 
class PcQueryBase(ABC):
    """"""Абстрактый класс для работы с performance center""""""
 
    @abstractmethod
    def get_start_stop_time_method(self,
                                   run_id: list) -> tuple:
 
        """"""Время начала и конца теста
 
        @param run_id: список целых чисел - номеров run_id
        @return: кортеж
        """"""
        pass
 
    @abstractmethod
    def get_run_id_method(self,
                          settings: Settings) -> str:
 
        """"""Получение run_id теста
 
        @param settings: экземпляр класса Settings
        @return: строка
        """"""
        pass
 
    @abstractmethod
    def get_load_statistic_method(self,
                                  start_time: int,
                                  stop_time: int,
                                  measurement: str) -> str:
 
        """"""Утилизация оборудования, на котором проводится тест
 
        @param start_time: время начала теста
        @param stop_time: время конца теста
        @param measurement: метрика, чью утилизацию надо найти
        @return: запрос на получение утилизации measurement истоничка нагрузки
        """"""
        pass
 
    @abstractmethod
    def get_load_statistic_measurements(self) -> dict:
 
        """"""Метрики утилизации источника нагрузки
 
        @return: словарь с метриками утилизации
        """"""
        pass
 
    @staticmethod
    def get_run_id_select_param_method(load_supply_source: str,
                                       run_id: list) -> str:
 
        """"""Фильтр по run_id в запросах
 
        @param load_supply_source: тип источника подачи нагрузки
        @param run_id: список целых чисел - номеров run_id
        @return: строка
        """"""
 
        run_id_numbers = len(run_id)
        select_param = ''
        if load_supply_source.lower() == 'pc_influx':
 
            if run_id_numbers == 1:
                select_param = f"" \""QcRunId\"" = '{run_id[0]}' AND ""
            else:
                run_id = f'''{""|"".join(f""'{i}'"" for i in run_id)}'''
                select_param = f' ""QcRunId"" =~ /[{run_id}]/ AND '
 
        elif load_supply_source.lower() == 'gatling_influx':
            select_param = f''' (""simulation"" =~ /{""|"".join(i for i in run_id)}/) AND '''
 
        return select_param
 
 
class InfluxParser:
 
    @staticmethod
    def get_transactions_parse(result_set,
                               tr_type: str,
                               full_time: bool) -> DataFrame:
 
        """"""
 
        @param result_set:
        @param tr_type:
        @param full_time:
        @return:
        """"""
 
        if tr_type:
            df = DataFrame()
            for key, value in result_set.items():
                key_dict = key[1]
                if not full_time:
                    key_dict[SummaryColumns.VALUE] = list(value)[0]['value']
                    tmp_dataframe = DataFrame([key_dict])
 
                else:
                    full_values_list = list(value)
                    if full_values_list:
                        key_dict[SummaryColumns.TIME] = [value['time'] for value in full_values_list]
                        key_dict[SummaryColumns.VALUE] = [value['value'] for value in full_values_list]
                    else:
                        key_dict[SummaryColumns.TIME] = []
                        key_dict[SummaryColumns.VALUE] = []
                    tmp_dataframe = DataFrame.from_dict(key_dict)
 
                df = df.append(tmp_dataframe)
 
            df = InfluxParser._rename_columns(df, tr_type)
 
            return df
 
        else:
            return DataFrame([{**{i: j for i, j in k[1]}, **v.to_dict('records')[0]} for k, v in result_set.items()])
 
    @staticmethod
    def _rename_columns(df: DataFrame,
                        transaction_type: str) -> DataFrame:
 
        '''
 
        @param type:
        @param raw_summary_df:
        @return:
        '''
 
        if 'transaction' in df:
            new_name_dict = {'transaction': SummaryColumns.MEASUREMENT}
        elif 'request' in df:
            new_name_dict = {'request': SummaryColumns.MEASUREMENT}
        elif 'scenario' in df:
            new_name_dict = {'scenario': SummaryColumns.MEASUREMENT}
        else:
            new_name_dict = {'MeasurementName': SummaryColumns.MEASUREMENT, 'GroupName': SummaryColumns.GROUP}
 
        df = df.rename(columns=new_name_dict)
        df[SummaryColumns.GROUP] = transaction_type
 
        return df
 
 
class PrometheusParser:
 
    @staticmethod
    def get_transactions_parse(result_set,
                               tr_type: str or tuple,
                               full_time: bool) -> DataFrame:
 
        """"""
 
        @param result_set:
        @param tr_type:
        @param full_time:
        @return:
        """"""
 
        if tr_type:
 
            if isinstance(tr_type, tuple):
                tr_type, tr_name = tr_type
                key_dict = {SummaryColumns.GROUP: tr_type, SummaryColumns.MEASUREMENT: tr_name}
            else:
                key_dict = {SummaryColumns.GROUP: tr_type, SummaryColumns.MEASUREMENT: result_set['metric']['label']}
 
            if not full_time:
                val = sum([int(float(i[1])) for i in result_set['values']])
 
                if QueryBase.RESPONSE_TIME in tr_type:
                    key_dict[SummaryColumns.VALUE] = [round(val / len(result_set['values']) / 1000, 3)]
                else:
                    key_dict[SummaryColumns.VALUE] = [val]
 
                df = DataFrame.from_dict(key_dict)
            else:
                if result_set['values']:
                    key_dict[SummaryColumns.TIME] = [int(float(i[0])) for i in result_set['values']]
                    key_dict[SummaryColumns.VALUE] = [int(float(i[1])) for i in result_set['values']]
                else:
                    key_dict[SummaryColumns.TIME] = []
                    key_dict[SummaryColumns.VALUE] = []
                df = DataFrame.from_dict(key_dict)
 
            return df
 
 
class PcInfluxInterface(QueryBase, PcQueryBase):
    def get_start_stop_time_method(self,
                                   run_id: list) -> tuple:
 
        run_id_numbers = len(run_id)
        run_id = f'''{""|"".join(f""'{i}'"" for i in run_id)}'''
 
        db_name = 'es_tr_runtime_vusers'
        if run_id_numbers == 1:
            where = f'""QcRunId"" = {run_id}'
 
            sql_start_time = QueryBase._get_sql_str(select='first(value)',
                                                    db_name=db_name,
                                                    where=where,
                                                    limit=1)
 
            sql_stop_time = QueryBase._get_sql_str(select='last(value)',
                                                   db_name=db_name,
                                                   where=where,
                                                   limit=1)
 
        else:
            where = f'""QcRunId"" =~ /[{run_id}]/'
 
            sql_start_time = QueryBase._get_sql_str(select='first(value)',
                                                    db_name=db_name,
                                                    where=where,
                                                    limit=1)
 
            sql_stop_time = QueryBase._get_sql_str(select='last(value)',
                                                   db_name=db_name,
                                                   where=where,
                                                   limit=1)
 
        return sql_start_time, sql_stop_time
 
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        max_runtime_query = QueryBase._get_sql_str(start_time,
                                                   stop_time,
                                                   select='max(value)',
                                                   db_name='es_tr_runtime_vusers',
                                                   where='AND ""GroupName"" =~ /^Running Vusers$/',
                                                   run_query=settings.run_query,
                                                   group_by='time(1m)')
 
        if settings.offset_vu is not None:
            max_runtime_query = max_runtime_query.replace(""max(value)"", f""max(value)-{settings.offset_vu}"")
 
        return max_runtime_query
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        if vu_result_set:
            vu_result_set = [(t[""time""], t[""max""])
                             for key, value in vu_result_set.items()
                             for t in value
                             if t[""max""] is not None]
 
        return vu_result_set
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_pass_name = ""es_tr_trpass""
        tr_fail_name = ""es_tr_trfail""
        tr_response_time_name = ""es_tr_response_time""
        group_by = '""MeasurementName"", ""GroupName""'
 
        fields = {
            tr_pass_name: ['(max(""value"")-min(""value"")) as ""value"" ', f'{next(number_column)}{self.PASSED}'],
            tr_fail_name: ['(max(""value"")-min(""value"")) as ""value"" ', f'{next(number_column)}{self.FAILED}'],
            tr_response_time_name: []
        }
        resp_time_template = f'percentile(""value"", %%%percentile%%%) as ""value"" '
        number_column, fields[tr_response_time_name] = \
                                                QueryBase._get_resp_time_list(resp_time_template,
                                                                              number_column,
                                                                              default_percentile,
                                                                              settings.additional_response_time_perc)
 
        settings.summary_number_column = number_column
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""MeasurementName"" =~ /{settings.transaction_filter}/ '
        if not settings.remove_default_transaction_filter:
            where += f' AND ""MeasurementName"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        queries_list = []
        for step in settings.step_times.items():
            start_time = step[1][""times""][""start""]
            stop_time = step[1][""times""][""stop""]
 
            for measurement, select in fields.items():
                if measurement == tr_response_time_name:
                    for resp_time_measurement in select:
                        sql = QueryBase._get_sql_str(start_time,
                                                     stop_time,
                                                     select=resp_time_measurement[0],
                                                     db_name=measurement,
                                                     where=where,
                                                     run_query=settings.run_query,
                                                     group_by=group_by)
 
                        queries_list.append((step[0], sql, resp_time_measurement[1]))
 
                else:
                    sql = QueryBase._get_sql_str(start_time,
                                                 stop_time,
                                                 select=select[0],
                                                 db_name=measurement,
                                                 where=where,
                                                 run_query=settings.run_query,
                                                 group_by=group_by)
 
                    queries_list.append((step[0], sql, select[1]))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
 
        return InfluxParser.get_transactions_parse(result_set, transaction_type, full_time)
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> str:
 
        tps_per_step = \
            QueryBase._get_sql_str(start_time,
                                   stop_time,
                                   select='mean(""value""), percentile(""value"", 10), percentile(""value"", 90)',
                                   db_name='mic_conn',
                                   run_query=settings.run_query)
 
        if settings.offset_tps is not None:
            tps_per_step = tps_per_step.\
                                replace('percentile(""value"", 10)', f'percentile(""value"", 10)-{settings.offset_tps}').\
                                replace('mean(""value"")', f'mean(""value"")-{settings.offset_tps}').\
                                replace('percentile(""value"", 90)', f'percentile(""value"", 90)-{settings.offset_tps}')
 
        return tps_per_step
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        min_tps = QueryBase.get_value_from_result_set(tps_result_set, ""percentile"")
        min_tps = 0 if not min_tps or min_tps < 0 else min_tps
 
        mean_tps = QueryBase.get_value_from_result_set(tps_result_set, ""mean"")
        max_tps = QueryBase.get_value_from_result_set(tps_result_set, ""percentile_1"")
 
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = list()
        number_column = iter_count(1)
 
        select = '(max(""value"")-min(""value"")) as ""value""'
 
        tr_measurement_name = {
            f'{next(number_column)}{self.PASSED}': ""es_tr_trpass"",
            f'{next(number_column)}{self.FAILED}': ""es_tr_trfail""
        }
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""MeasurementName"" =~ /{settings.transaction_filter}/ '
        if not settings.remove_default_transaction_filter:
            where += f' AND ""MeasurementName"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        group_by = f'""MeasurementName"", ""GroupName"", time({settings.spikes_errors_group_by_time}s)'
 
        for status, measurement in tr_measurement_name.items():
            sql = QueryBase._get_sql_str(settings.start_time,
                                         settings.stop_time,
                                         select=select,
                                         db_name=measurement,
                                         where=where,
                                         run_query=settings.run_query,
                                         group_by=group_by)
 
            queries_list.append((status, sql))
 
        return queries_list
 
    def get_run_id_method(self,
                          settings: Settings) -> str:
 
        run_id_query = QueryBase._get_sql_str(settings.start_time,
                                              settings.stop_time,
                                              select='max(value)',
                                              db_name='es_tr_runtime_vusers',
                                              run_query=settings.run_query,
                                              group_by='""QcRunId""')
 
        return run_id_query
 
    def get_load_statistic_method(self,
                                  start_time: int,
                                  stop_time: int,
                                  measurement: str) -> str:
 
        load_statistic = QueryBase._get_sql_str(start_time,
                                                stop_time,
                                                select='percentile(""value"", 90)',
                                                db_name='es_rm_svr_res_nt_orchid',
                                                where=f' AND (""MeasurementName"" = \'{measurement}\')',
                                                group_by='""MachineName""')
 
        return load_statistic
 
    def get_load_statistic_measurements(self) -> dict:
        measurements = {
            ""CPU"": {
                ""data"": [
                    {
                        ""metrics"": ""% Processor Time (Processor _Total)"",
                        ""table_name"": ""CPU Utilization""
                    }
                ],
                ""settings"": {
                    ""unit"": ""%"",
                    ""color"": [70, 75]
                }
            }
        }
 
        return measurements
 
 
class PcPrometheusInterface(QueryBase):
    """"""1111""""""
 
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
        """"""
 
        @param settings:
        @param start_time:
        @param stop_time:
        @return:
        """"""
        pass
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
        pass
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_measurement_name = {f'{next(number_column)}{self.PASSED}': '2..|3..',
                               f'{next(number_column)}{self.FAILED}': ""4..|5.."",
                               f'{next(number_column)}{self.get_resp_time_name(default_percentile)}': '2..|3..'}
 
        settings.summary_number_column = number_column
 
        for step in settings.step_times.items():
            step_number = step[0]
            # step_name = step[1][""step_name""]
            step_start = step[1][""times""][""start""]
            step_stop = step[1][""times""][""stop""]
            # step_percent = step[1][""percent""]
 
            for transaction_type, status in tr_measurement_name.items():
 
                if self.PASSED in transaction_type or self.FAILED in transaction_type:
                    exception = ''
                else:
                    exception = 'exception=""None"", '
 
                q_filter = f'kubernetes_namespace=~""{settings.pc_influx_conf[""kubernetes_namespace""]}"", ' \
                           f'app=~""{settings.pc_influx_conf[""app""]}"", ' \
                           f'instance=~"".*"", ' \
                           f'{exception}' \
                           f'uri!~"".*actuator.*"", ' \
                           f'status=~""{status}""'
 
                if self.PASSED in transaction_type or self.FAILED in transaction_type:
                    q = [
                        f'sum(http_server_requests_seconds_count{{{q_filter}}}) by (method,status,uri,kubernetes_name)']
 
                else:
                    q = f'sum(irate(http_server_requests_seconds_sum{{{q_filter}}}[5m])) ' \
                        f'by (method,status,uri,kubernetes_name) / ' \
                        f'sum(irate(http_server_requests_seconds_count{{{q_filter}}}[5m])) ' \
                        f'by (method,status,uri,kubernetes_name)'
 
                query = QueryBase._get_prometheus_query_dict(q,
                                                             step_start,
                                                             step_stop)
 
                queries_list.append((step_number, query, transaction_type))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
 
        result_df = DataFrame()
        for result in result_set:
            result['metric']['label'] = f'{result[""metric""][""method""]} {result[""metric""][""uri""]}'
            result = PrometheusParser.get_transactions_parse(result, transaction_type, full_time)
            result_df = result_df.append(result, ignore_index=True)
 
        return result_df
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> str:
        pass
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        min_tps, mean_tps, max_tps = None, None, None
 
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
 
        tr_measurement_name = {
            f'{next(number_column)}{self.PASSED}': '2..|3..',
            f'{next(number_column)}{self.FAILED}': ""4..|5..""
        }
 
        for status, where in tr_measurement_name.items():
            q_filter = f'kubernetes_namespace=~""{settings.pc_influx_conf[""kubernetes_namespace""]}"", ' \
                       f'app=~""{settings.pc_influx_conf[""app""]}"", ' \
                       f'instance=~"".*"", ' \
                       f'uri!~"".*actuator.*"", ' \
                       f'status=~""{where}""'
 
            q = f'sum(http_server_requests_seconds_count{{{q_filter}}}) by (method,status,uri,kubernetes_name)'
 
            query = QueryBase._get_prometheus_query_dict(q,
                                                         settings.start_time,
                                                         settings.stop_time)
 
            queries_list.append((status, query))
 
        return queries_list
 
 
class JmeterInfluxInterface(QueryBase):
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        max_runtime_query = QueryBase._get_sql_str(start_time,
                                                   stop_time,
                                                   select='max(""maxAT"")',
                                                   db_name='jmeter',
                                                   run_query=settings.run_query,
                                                   group_by='time(1m)')
 
        if settings.offset_vu is not None:
            max_runtime_query = max_runtime_query.replace('max(""maxAT"")', f'max(""maxAT"")-{settings.offset_vu}')
 
        return max_runtime_query
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        if vu_result_set:
            vu_result_set = [(t[""time""], t[""max""])
                             for key, value in vu_result_set.items()
                             for t in value
                             if t[""max""] is not None]
 
        return vu_result_set
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_pass_name = ""pass""
        tr_fail_name = ""fail""
        tr_response_time_name = ""response_time""
        db_name = 'jmeter'
        group_by = '""transaction""'
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""transaction"" =~ /{settings.transaction_filter}/ '
 
        if not settings.remove_default_transaction_filter:
            where += f' AND ""transaction"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        fields = {
            tr_pass_name: ['sum(""count"") as ""value"" ', f'''{where} AND (""statut""='ok') ''',
                           f'{next(number_column)}{self.PASSED}'],
            tr_fail_name: ['sum(""count"") as ""value"" ', f'''{where} AND (""statut""='ko') ''',
                           f'{next(number_column)}{self.FAILED}'],
            tr_response_time_name: []
        }
 
        resp_time_template = f'max(""pct%%%percentile%%%.0"")/1000 as ""value"" '
        number_column, fields[tr_response_time_name] = \
                                    QueryBase._get_resp_time_list(resp_time_template,
                                                                  number_column,
                                                                  default_percentile,
                                                                  settings.additional_response_time_perc,
                                                                  additional_block=f'''{where} AND (""statut""='ok') ''')
 
        settings.summary_number_column = number_column
 
        for step in settings.step_times.items():
            start_time = step[1][""times""][""start""]
            stop_time = step[1][""times""][""stop""]
 
            for measurement, select in fields.items():
                if measurement == tr_response_time_name:
                    for resp_time_measurement in select:
                        sql = QueryBase._get_sql_str(start_time,
                                                     stop_time,
                                                     select=resp_time_measurement[0],
                                                     db_name=db_name,
                                                     where=resp_time_measurement[1],
                                                     run_query=settings.run_query,
                                                     group_by=group_by)
 
                        queries_list.append((step[0], sql, resp_time_measurement[2]))
 
                else:
                    sql = QueryBase._get_sql_str(start_time,
                                                 stop_time,
                                                 select=select[0],
                                                 db_name=db_name,
                                                 where=select[1],
                                                 run_query=settings.run_query,
                                                 group_by=group_by)
 
                    queries_list.append((step[0], sql, select[2]))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
 
        return InfluxParser.get_transactions_parse(result_set, transaction_type, full_time)
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> str:
        tps_per_step = QueryBase._get_sql_str(start_time,
                                              stop_time,
                                              select='mean(""startedT""), min(""startedT""), max(""startedT"")',
                                              db_name='jmeter',
                                              run_query=settings.run_query)
 
        if settings.offset_tps is not None:
            tps_per_step = tps_per_step.replace('min(""startedT"")', f'min(""startedT"")-{settings.offset_tps}').\
                                        replace('mean(""startedT"")', f'mean(""startedT"")-{settings.offset_tps}'). \
                                        replace('max(""startedT"")', f'max(""startedT"")-{settings.offset_tps}')
 
        return tps_per_step
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        min_tps = QueryBase.get_value_from_result_set(tps_result_set, ""min"")
        min_tps = 0 if min_tps < 0 else min_tps
 
        mean_tps = QueryBase.get_value_from_result_set(tps_result_set, ""mean"")
        max_tps = QueryBase.get_value_from_result_set(tps_result_set, ""max"")
 
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
 
        select = 'sum(""count"") as ""value""'
        db_name = 'jmeter'
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""transaction"" =~ /{settings.transaction_filter}/ '
        if not settings.remove_default_transaction_filter:
            where += f' AND ""transaction"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        tr_measurement_name = {
            f'{next(number_column)}{self.PASSED}': f'''{where} AND (""statut""='ok')''',
            f'{next(number_column)}{self.FAILED}': f'''{where} AND (""statut""='ko')'''
        }
 
        group_by = f'""transaction"", time({settings.spikes_errors_group_by_time}s)'
 
        for status, where in tr_measurement_name.items():
            sql = QueryBase._get_sql_str(settings.start_time,
                                         settings.stop_time,
                                         select=select,
                                         db_name=db_name,
                                         where=where,
                                         run_query=settings.run_query,
                                         group_by=group_by)
 
            queries_list.append((status, sql))
 
        return queries_list
 
 
class JmeterPrometheusInterface(QueryBase):
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        max_runtime_query = QueryBase._get_prometheus_query_dict(""sum(jmeter_threads{state='active'})"",
                                                                 start_time,
                                                                 stop_time)
 
        return max_runtime_query
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        tmp_result_set = []
        for time, vu in vu_result_set[0]['values']:
            time = datetime.fromtimestamp(int(time) - timedelta(hours=settings.tz_hours).seconds)
            time = datetime.strftime(time, '%Y-%m-%dT%H:%M:%SZ')
            vu = int(vu)
 
            tmp_result_set.append((time, vu))
 
        return tmp_result_set
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_pass_name = ""pass""
        tr_fail_name = ""fail""
        tr_response_time_name = ""response_time""
 
        fields = {
            tr_pass_name: [""sum(jmeter_success_total{}) by(label)"", f'{next(number_column)}{self.PASSED}'],
            tr_fail_name: [""sum(jmeter_failure_total{}) by(label)"", f'{next(number_column)}{self.FAILED}'],
            tr_response_time_name: []
        }
 
        resp_time_template = f'avg(jmeter_rt_summary{{quantile=""0.%%%percentile%%%""}}) by(label)'
        number_column, fields[tr_response_time_name] = \
                                                QueryBase._get_resp_time_list(resp_time_template,
                                                                              number_column,
                                                                              default_percentile,
                                                                              settings.additional_response_time_perc)
 
        settings.summary_number_column = number_column
 
        for step in settings.step_times.items():
            start_time = step[1][""times""][""start""]
            stop_time = step[1][""times""][""stop""]
 
            for measurement, select in fields.items():
                if measurement == tr_response_time_name:
                    for resp_time_measurement in select:
                        sql = QueryBase._get_prometheus_query_dict(resp_time_measurement[0],
                                                                   start_time,
                                                                   stop_time)
 
                        queries_list.append((step[0], sql, resp_time_measurement[1]))
 
                else:
                    sql = QueryBase._get_prometheus_query_dict(select[0],
                                                               start_time,
                                                               stop_time)
 
                    queries_list.append((step[0], sql, select[1]))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
        result_df = DataFrame()
        for result in result_set:
            result = PrometheusParser.get_transactions_parse(result, transaction_type, full_time)
            result_df = result_df.append(result, ignore_index=True)
 
        return result_df
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> dict:
 
        tps_per_step = QueryBase._get_prometheus_query_dict(""sum(rate(jmeter_count_total[1m]))"",
                                                            start_time,
                                                            stop_time)
 
        return tps_per_step
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        if tps_result_set:
            result_set = [int(float(i[1])) for i in tps_result_set[0]['values']]
 
            min_tps = perc(result_set, 10)
            mean_tps = perc(result_set, 50)
            max_tps = perc(result_set, 90)
 
        else:
            min_tps = None
            mean_tps = None
            max_tps = None
 
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
 
        fields = {
            f'{next(number_column)}{self.PASSED}': ""sum(jmeter_success_total{}) by(label)"",
            f'{next(number_column)}{self.FAILED}': ""sum(jmeter_failure_total{}) by(label)""
        }
 
        for status, q in fields.items():
            query = QueryBase._get_prometheus_query_dict(q,
                                                         settings.start_time,
                                                         settings.stop_time,
                                                         step=settings.spikes_errors_group_by_time)
 
            queries_list.append((status, query))
 
        return queries_list
 
 
class GatlingInfluxInterface(QueryBase):
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        max_runtime_query = QueryBase._get_sql_str(start_time,
                                                   stop_time,
                                                   select='max(active)',
                                                   db_name='gatling.users',
                                                   run_query=settings.run_query,
                                                   group_by='time(1m)')
 
        if settings.offset_vu is not None:
            max_runtime_query = max_runtime_query.replace(""max(active)"", f""max(active)-{settings.offset_vu}"")
 
        return max_runtime_query
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        if vu_result_set:
            vu_result_set = [(t[""time""], t[""max""])
                             for key, value in vu_result_set.items()
                             for t in value
                             if t[""max""] is not None]
 
        return vu_result_set
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_pass_name = ""pass""
        tr_fail_name = ""fail""
        tr_response_time_name = ""response_time""
        db_name = 'gatling'
        group_by = '""request""'
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""request"" =~ /{settings.transaction_filter}/ '
 
        if not settings.remove_default_transaction_filter:
            where += f' AND ""request"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        fields = {
            tr_pass_name: ['sum(""count"") as ""value"" ', f'''{where} AND (""status""='ok') ''',
                           f'{next(number_column)}{self.PASSED}'],
            tr_fail_name: ['sum(""count"") as ""value"" ', f'''{where} AND (""status""='ko') ''',
                           f'{next(number_column)}{self.FAILED}'],
            tr_response_time_name: []
        }
        resp_time_template = f'mean(""percentiles%%%percentile%%%"") as ""value"" '
        number_column, fields[tr_response_time_name] = \
                                    QueryBase._get_resp_time_list(resp_time_template,
                                                                  number_column,
                                                                  default_percentile,
                                                                  settings.additional_response_time_perc,
                                                                  additional_block=f'''{where} AND (""status""='ok') ''')
 
        settings.summary_number_column = number_column
 
        for step in settings.step_times.items():
            start_time = step[1][""times""][""start""]
            stop_time = step[1][""times""][""stop""]
 
            for measurement, select in fields.items():
                if measurement == tr_response_time_name:
                    for resp_time_measurement in select:
                        sql = QueryBase._get_sql_str(start_time,
                                                     stop_time,
                                                     select=resp_time_measurement[0],
                                                     db_name=db_name,
                                                     where=resp_time_measurement[1],
                                                     run_query=settings.run_query,
                                                     group_by=group_by)
 
                        queries_list.append((step[0], sql, resp_time_measurement[2]))
 
                else:
                    sql = QueryBase._get_sql_str(start_time,
                                                 stop_time,
                                                 select=select[0],
                                                 db_name=db_name,
                                                 where=select[1],
                                                 run_query=settings.run_query,
                                                 group_by=group_by)
 
                    queries_list.append((step[0], sql, select[2]))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
 
        return InfluxParser.get_transactions_parse(result_set, transaction_type, full_time)
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> str:
 
        tps_per_step = QueryBase._get_sql_str(start_time,
                                              stop_time,
                                              select='sum(count)/300 as ""value""',
                                              db_name='gatling',
                                              where="" AND status='ok'"",
                                              run_query=settings.run_query,
                                              group_by='""request""')
 
        return tps_per_step
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        min_tps = QueryBase.get_value_from_result_set(tps_result_set, ""value"")
        min_tps = 0 if not min_tps or min_tps < 0 else min_tps
 
        mean_tps = max_tps = min_tps
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
 
        select = 'sum(""count"") as ""value""'
        db_name = 'gatling'
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""request"" =~ /{settings.transaction_filter}/ '
        if not settings.remove_default_transaction_filter:
            where += f' AND ""request"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        tr_measurement_name = {
            f'{next(number_column)}{self.PASSED}': f'''{where} AND (""status""='ok')''',
            f'{next(number_column)}{self.FAILED}': f'''{where} AND (""status""='ko')'''
        }
 
        group_by = f'""request"", time({settings.spikes_errors_group_by_time}s)'
 
        for status, where in tr_measurement_name.items():
            sql = QueryBase._get_sql_str(settings.start_time,
                                         settings.stop_time,
                                         select=select,
                                         db_name=db_name,
                                         where=where,
                                         run_query=settings.run_query,
                                         group_by=group_by)
 
            queries_list.append((status, sql))
 
        return queries_list
 
 
class GatlingPrometheusInterface(QueryBase):
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        GatlingPrometheusInterface._get_gatling_transactions_list(settings)
 
        max_runtime_query = \
            QueryBase._get_prometheus_query_dict(f""gatling_{settings.pc_influx_conf['app']}_users_allUsers_active"",
                                                 start_time,
                                                 stop_time,
                                                 step=1)
 
        return max_runtime_query
 
    @staticmethod
    def _get_gatling_transactions_list(settings: Settings):
 
        def _get_transactions(app: str,
                              list_of_metrics: list) -> list:
            tmp = []
            for metric in list_of_metrics:
                transaction = match(f""gatling_{app}_([A-Za-z0-9_]+)_all_count"", metric)
                if transaction:
                    tmp.append(transaction.group(1))
 
            return tmp
 
        config = settings.pc_influx_conf
        headers = {""Authorization"": f""Bearer {config['token']}"",
                   ""Accept"": ""application/json"",
                   ""Content-Type"": ""application/json""}
 
        grafana_api = ''
        if 'source' in config and config['source'] == 'grafana':
            grafana_api = f""/api/datasources/proxy/{config['grafana_datasource_id']}""
 
        url = f""{config['host']}:{config['port']}{grafana_api}/api/v1/label/__name__/values""
 
        from models.database_interface_models import PrometheusDatabaseInterface
        transactions = PrometheusDatabaseInterface.execute_custom_query(settings, url=url, headers=headers,
                                                                        return_raw=True)
 
        gatling_labels = [metric for metric in transactions['data'] if 'gatling' in metric]
 
        settings.gatling_transactions = _get_transactions(settings.pc_influx_conf['app'], gatling_labels)
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        tmp_result_set = []
        for time, vu in vu_result_set[0]['values']:
            time = datetime.fromtimestamp(int(time))
            time = datetime.strftime(time, '%Y-%m-%dT%H:%M:%SZ')
            vu = int(vu)
 
            tmp_result_set.append((time, vu))
 
        return tmp_result_set
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_pass_name = ""pass""
        tr_fail_name = ""fail""
        tr_response_time_name = ""response_time""
 
        fields = {
            tr_pass_name: [f'sum by(__name__)({{__name__=~""%%%name%%%_ok_count""}})',
                           f'{next(number_column)}{self.PASSED}'],
            tr_fail_name: [f'sum by(__name__)({{__name__=~""%%%name%%%_ko_count""}})',
                           f'{next(number_column)}{self.FAILED}'],
            tr_response_time_name: []
        }
 
        resp_time_template = \
                        f'avg by(__name__)(%%%name%%%_{settings.pc_influx_conf[""status""]}_percentiles%%%percentile%%%)'
        number_column, fields[tr_response_time_name] = \
            QueryBase._get_resp_time_list(resp_time_template,
                                          number_column,
                                          default_percentile,
                                          settings.additional_response_time_perc)
 
        settings.summary_number_column = number_column
 
        for transaction in settings.gatling_transactions:
            name = f'gatling_{settings.pc_influx_conf[""app""]}_{transaction}'
 
            for step in settings.step_times.items():
                start_time = step[1][""times""][""start""]
                stop_time = step[1][""times""][""stop""]
 
                for measurement, select in fields.items():
                    if measurement == tr_response_time_name:
                        for resp_time_measurement in select:
                            sql = QueryBase._get_prometheus_query_dict(resp_time_measurement[0].replace('%%%name%%%',
                                                                                                        name),
                                                                       start_time,
                                                                       stop_time,
                                                                       step=1)
 
                            queries_list.append((step[0], sql, (resp_time_measurement[1], transaction)))
 
                    else:
                        sql = QueryBase._get_prometheus_query_dict(select[0].replace('%%%name%%%', name),
                                                                   start_time,
                                                                   stop_time,
                                                                   step=1)
 
                        queries_list.append((step[0], sql, (select[1], transaction)))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
 
        return PrometheusParser.get_transactions_parse(result_set[0], transaction_type, full_time)
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> dict:
 
        tps_per_step = \
            QueryBase._get_prometheus_query_dict(f""gatling_{settings.pc_influx_conf['app']}_allRequests_all_count"",
                                                 start_time,
                                                 stop_time,
                                                 step=1)
 
        return tps_per_step
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        if tps_result_set:
            result_set = [int(float(i[1])) for i in tps_result_set[0]['values']]
 
            min_tps = perc(result_set, 10)
            mean_tps = perc(result_set, 50)
            max_tps = perc(result_set, 90)
 
        else:
            min_tps = None
            mean_tps = None
            max_tps = None
 
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
 
        for transaction in settings.gatling_transactions:
            name = f'gatling_{settings.pc_influx_conf[""app""]}_{transaction}'
 
            fields = {
                f'{next(number_column)}{self.PASSED}': f'sum by(__name__)({{__name__=~""{name}_ok_count""}})',
                f'{next(number_column)}{self.FAILED}': f'sum by(__name__)({{__name__=~""{name}_ko_count""}})'
            }
 
            settings.summary_number_column = number_column
 
            for status, q in fields.items():
                query = QueryBase._get_prometheus_query_dict(q,
                                                             settings.start_time,
                                                             settings.stop_time,
                                                             step=1)
 
                queries_list.append((status, query))
 
        return queries_list
 
 
class K6InfluxInterface(QueryBase):
    def get_vusers_method(self,
                          settings: Settings,
                          start_time: int,
                          stop_time: int) -> str or dict:
 
        max_runtime_query = QueryBase._get_sql_str(start_time,
                                                   stop_time,
                                                   select='max(value)',
                                                   db_name='vus',
                                                   run_query=settings.run_query,
                                                   group_by='time(1m)')
 
        if settings.offset_vu is not None:
            max_runtime_query = max_runtime_query.replace(""max(value)"", f""max(value)-{settings.offset_vu}"")
 
        return max_runtime_query
 
    def get_agg_vusers(self,
                       settings: Settings,
                       vu_result_set) -> list or None:
 
        if vu_result_set:
            vu_result_set = [(t[""time""], t[""max""])
                             for key, value in vu_result_set.items()
                             for t in value
                             if t[""max""] is not None]
 
        return vu_result_set
 
    def get_transactions_method(self,
                                settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
        default_percentile = settings.response_time_perc
 
        tr_pass_name = ""passed""
        tr_fail_name = ""failed""
        tr_response_time_name = ""response time""
        group_by = '""scenario""'
 
        fields = {
            tr_pass_name: ['sum(""value"") as ""value"" ', 'http_reqs', "" AND expected_response='true' "",
                           f'{next(number_column)}{self.PASSED}'],
            tr_fail_name: ['sum(""value"") as ""value"" ', 'http_reqs', "" AND expected_response='false' "",
                           f'{next(number_column)}{self.FAILED}'],
            tr_response_time_name: []
        }
 
        resp_time_template = f'percentile(""value"", %%%percentile%%%) as ""value"" '
        number_column, fields[tr_response_time_name] = \
                                                QueryBase._get_resp_time_list(resp_time_template,
                                                                              number_column,
                                                                              default_percentile,
                                                                              settings.additional_response_time_perc,
                                                                              additional_block='http_req_duration')
 
        settings.summary_number_column = number_column
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""scenario"" =~ /{settings.transaction_filter}/ '
        if not settings.remove_default_transaction_filter:
            where += f' AND ""scenario"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        for step in settings.step_times.items():
            start_time = step[1][""times""][""start""]
            stop_time = step[1][""times""][""stop""]
 
            for measurement, select in fields.items():
                if measurement == tr_response_time_name:
                    for resp_time_measurement in select:
                        sql = QueryBase._get_sql_str(start_time,
                                                     stop_time,
                                                     select=resp_time_measurement[0],
                                                     db_name=resp_time_measurement[1],
                                                     where=where,
                                                     run_query=settings.run_query,
                                                     group_by=group_by)
 
                        queries_list.append((step[0], sql, resp_time_measurement[2]))
 
                else:
                    sql = QueryBase._get_sql_str(start_time,
                                                 stop_time,
                                                 select=select[0],
                                                 db_name=select[1],
                                                 where=where + select[2],
                                                 run_query=settings.run_query,
                                                 group_by=group_by)
 
                    queries_list.append((step[0], sql, select[3]))
 
        return queries_list
 
    def get_transactions_parse(self,
                               result_set,
                               transaction_type: str,
                               full_time: bool = False) -> DataFrame:
 
        return InfluxParser.get_transactions_parse(result_set, transaction_type, full_time)
 
    def get_tps_method(self,
                       settings: Settings,
                       start_time: int,
                       stop_time: int) -> str:
 
        tps_per_step = \
            QueryBase._get_sql_str(start_time,
                                   stop_time,
                                   select='mean(""value""), percentile(""value"", 10), percentile(""value"", 90)',
                                   db_name='iterations',
                                   run_query=settings.run_query)
 
        if settings.offset_tps is not None:
            tps_per_step = tps_per_step.\
                                replace('percentile(""value"", 10)', f'percentile(""value"", 10)-{settings.offset_tps}').\
                                replace('mean(""value"")', f'mean(""value"")-{settings.offset_tps}'). \
                                replace('percentile(""value"", 90)', f'percentile(""value"", 90)-{settings.offset_tps}')
 
        return tps_per_step
 
    def get_tps_value(self,
                      tps_result_set) -> tuple:
 
        min_tps = QueryBase.get_value_from_result_set(tps_result_set, ""percentile"")
        min_tps = 0 if not min_tps or min_tps < 0 else min_tps
 
        mean_tps = QueryBase.get_value_from_result_set(tps_result_set, ""mean"")
        max_tps = QueryBase.get_value_from_result_set(tps_result_set, ""percentile_1"")
 
        return min_tps, mean_tps, max_tps
 
    def get_full_test_transactions_method(self,
                                          settings: Settings) -> list:
 
        queries_list = []
        number_column = iter_count(1)
 
        select = 'sum(""value"") as ""value""'
        db_name = 'http_reqs'
        group_by = f'""scenario"", time({settings.spikes_errors_group_by_time})s'
 
        fields = {
            f'{next(number_column)}{self.PASSED}': "" AND expected_response='true' "",
            f'{next(number_column)}{self.FAILED}': "" AND expected_response='false' ""
        }
 
        where = ''
        if settings.transaction_filter is not None:
            where += f' AND ""scenario"" =~ /{settings.transaction_filter}/ '
        if not settings.remove_default_transaction_filter:
            where += f' AND ""scenario"" !~ /({""|"".join(settings.default_transaction_filter)})/ '
 
        for status, resp_option in fields.items():
            sql = QueryBase._get_sql_str(settings.start_time,
                                         settings.stop_time,
                                         select=select,
                                         db_name=db_name,
                                         where=where + resp_option,
                                         run_query=settings.run_query,
                                         group_by=group_by)
 
            queries_list.append((status, sql))
 
        return queries_list
 
 
class SummaryModelFactory:
 
    @staticmethod
    def create_summary_model_interface(settings: dict or object):
        if isinstance(settings, dict):
            db_type = settings[""pc_influx_conf""]['type']
        else:
            db_type = settings.pc_influx_conf['type']
 
        if db_type.lower() == 'pc_influx':
            return PcInfluxInterface()
        elif db_type.lower() == 'pc_prometheus':
            return PcPrometheusInterface()
        elif db_type.lower() == 'jmeter_influx':
            return JmeterInfluxInterface()
        elif db_type.lower() == 'jmeter_prometheus':
            return JmeterPrometheusInterface()
        elif db_type.lower() == 'gatling_influx':
            return GatlingInfluxInterface()
        elif db_type.lower() == 'gatling_prometheus':
            return GatlingPrometheusInterface()
        elif db_type.lower() == 'k6_influx':
            return K6InfluxInterface()
        else:
            string = f'\033[3;31m Указанный источник нагрузки не поддерживается: \033[0m{db_type + linesep}'
            error(string)
            exit(1)"
MXL7FdWx,DBase,john_smith_1488,Python,Tuesday 25th of July 2023 08:26:21 AM CDT,"from abc import ABC, abstractmethod
from pandas import DataFrame, pivot_table
from influxdb import InfluxDBClient
from requests import Session
from logging import warning, error, info
from os import linesep, unlink, path
from json import loads, dumps
from urllib.parse import urlparse
from psycopg2 import connect as postgres_connect
from cx_Oracle import connect as oracle_connect, makedsn
from pymssql import connect as mssql_connect
from traceback import format_exc
import pandas.io.sql as sqlio
from tempfile import NamedTemporaryFile
from sys import exit
from io import BytesIO, StringIO
from math import floor
 
from common.postgres import send_files_to_s3
 
from models.postgres_models import Postgres
from models.gitlab_models import GitlabModels
from models.settings import Settings
 
 
class DbBase(ABC):
    """"""Абстрактный класс для создания интерфейса подключения к БД""""""
    PROMETHEUS_MAX_NUM_OF_VALUES = 11000
 
    def __init__(self,
                 system_name: str,
                 config: dict):
 
        """"""Инициализация класса для создания интерфейса работы с БД
 
        @param system_name: имя проекта
        @param config: словарь с настройками подключения к БД
        """"""
 
        super().__init__()
        self.credentials = None
        self.config = None
        self.system_name = system_name
        self.connect(config)
 
    @abstractmethod
    def connect(self,
                config: dict):
 
        """"""Подключение к БД,используя настройки из конфигурационного файла
 
        @param config: словарь с настройками подключения к БД
        """"""
        pass
 
    @abstractmethod
    def _get_cred_from_conf(self):
        """"""Проверка и преобразование данных конфигурационного файла""""""
        pass
 
    @abstractmethod
    def get_raw_data(self,
                     query: dict or str,
                     return_df=False) -> DataFrame or None:
 
        """"""Получение данных из БД
 
        @param query: запрос в виде строки или словаря (для prometheus)
        @param return_df: параметр для выбора формата данных, что вернёт метод
        @return: датафрейм или result_set
        """"""
        pass
 
    @abstractmethod
    def disconnect(self):
        """"""Разрыв соединения с БД""""""
        pass
 
    @staticmethod
    def execute_custom_query(settings: Settings,
                             query: dict or str,
                             host=None,
                             port=None,
                             username=None,
                             password=None,
                             headers=None,
                             cert=None,
                             return_df=False):
 
        """"""Выполнение пользовательского запроса
 
        @param settings: экземпляр класса Settings
        @param query: тело запроса
        @param host: хост БД
        @param port: порт
        @param username: имя пользователя
        @param password: пароль
        @param headers: для доступа к БД по токену в headers или для других целей
        @param cert: сертификат
        @param return_df: параметр для выбора формата данных, что вернёт метод
        @return: датафрейм или result_set
        """"""
        pass
 
    @staticmethod
    def get_pivot(raw_data: DataFrame,
                  values=None,
                  index=None,
                  columns=None,
                  agg_func='mean',
                  **kwargs) -> DataFrame:
 
        """"""Собрать сводную таблицу из датафрейма
 
        @param raw_data: датафрейм
        @param values: колонка, значения которой будут в таблице
        @param index: список колонок, который станет индексом
        @param columns: список колонок, которые станут колонками
        @param agg_func: агрегирующая функция над полем values
        @param kwargs: дополнительные параметры, которые будут переданы в функцию pivot_table
        @return: датафрейм
        """"""
        try:
            pivot_df = pivot_table(raw_data, values=values, index=index, columns=columns, aggfunc=agg_func, **kwargs)
            return pivot_df
        except Exception as err:
            string = f""\033[3;31m Ошибка создания сводной таблицы\033[0m {linesep + str(err)}""
            error(string)
 
    @staticmethod
    def save_dataframe(df: DataFrame,
                       path_to_file: str,
                       file_name: str,
                       file_format: str,
                       backup_db: Postgres,
                       to_s3: bool = False):
 
        """"""Сохранение датафрейма на компьютер или в облачное хранилище
 
        @param df: датафрейм
        @param path_to_file: путь для сохранения
        @param file_name: имя файла
        @param file_format: формат файла
        @param backup_db: экземпляр класса Postgres
        @param to_s3: параметр для выбора места сохранения: компьютер или s3
        """"""
 
        file_path = path.join(path_to_file, file_name + '.' + file_format)
 
        if to_s3:
            if file_format == 'csv':
                buffer = StringIO()
                df.to_csv(buffer)
 
            elif file_format == 'xlsx':
                buffer = BytesIO()
                df.to_excel(buffer)
 
            elif file_format == 'html':
                buffer = StringIO()
                df.to_html(buffer)
 
            elif file_format == 'txt':
                buffer = StringIO()
                buffer.write(df.to_string())
 
            else:
                error(f""\033[3;31m Формат {file_format} не поддерживается\033[0m"")
                return
 
            send_files_to_s3(buffer.getvalue(), backup_db, object=file_path)
 
        else:
 
            if file_format == 'csv':
                df.to_csv(file_path)
 
            elif file_format == 'xlsx':
                df.to_excel(file_path)
 
            elif file_format == 'html':
                df.to_html(file_path)
 
            elif file_format == 'txt':
                with open(file_path, 'w') as f:
                    f.write(df.to_string())
 
            else:
                error(f""\033[3;31m Формат {file_format} не поддерживается\033[0m"")
                return
 
    @staticmethod
    def _get_cert_files(system_name,
                        certs):
 
        """"""Получение файлов сертификатов для доступа к БД.
        Сохраняется во временный файл.
 
        @param system_name: имя проекта
        @param certs: список сертификатов
        @return: список файлов сертификатов
        """"""
 
        conf_list = []
        if isinstance(certs, list):
            conf_list = certs
        elif isinstance(certs, str):
            conf_list.append(certs)
 
        gitlab = GitlabModels(system_name)
        if gitlab.is_auth:
            curr_cert_files = gitlab.get_raw_files(gitlab.path, gitlab.session, conf_list)
 
        else:
            error(f""\033[3;31m Ошибка получения сертификатов из GitLab\033[0m {linesep}"")
            return None
 
        cert_list = []
        for key, val in curr_cert_files.items():
            cert = NamedTemporaryFile(delete=False)
            cert.write(val)
            cert.close()
            cert_list.append(cert.name)
 
        if len(cert_list) == 1:
            cert_list = cert_list[0]
 
        return cert_list
 
    @staticmethod
    def _unlink_cert_files(certs):
        """"""Удаление временных файлов для хранения файлов сертификатов
 
        @param certs: список временных файлов для хранения сертификатов
        """"""
 
        if certs is not None:
            if isinstance(certs, list):
                for cert in certs:
                    unlink(cert)
            elif isinstance(certs, str):
                unlink(certs)
 
 
class InfluxDatabaseInterface(DbBase):
 
    def connect(self,
                config: dict):
 
        self.config = config
        self._get_cred_from_conf()
 
        try:
            self.connection = InfluxDBClient(**self.credentials)
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к Influx\033[0m {linesep + str(err)}""
            error(string)
 
    def _get_cred_from_conf(self):
        tmp = dict()
 
        influx_params = ['host', 'port', 'username', 'password', 'database', 'ssl', 'verify_ssl', 'timeout', 'retries',
                         'use_udp', 'udp_port', 'proxies', 'pool_size', 'path', 'cert', 'gzip', 'session', 'headers']
 
        if 'conn' in self.config:
            self.config = self.config['conn']
 
        for key, value in self.config.items():
            if key in influx_params:
                if key == 'host':
                    if value.endswith('/'):
                        value = value[:-1]
                tmp.update({key: value})
 
        self.credentials = tmp
 
    @staticmethod
    def execute_custom_query(settings: Settings,
                             query: dict or str,
                             host=None,
                             port=None,
                             username=None,
                             password=None,
                             db_name=None,
                             headers=None,
                             cert=None,
                             return_df=False):
 
        try:
            connection = InfluxDBClient(host=host, port=port, username=username, password=password, database=db_name)
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к Influx\033[0m {linesep + str(err)}""
            error(string)
            return
 
        try:
            result_set = connection.query(query)
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса.\033[0m {linesep + str(err)}""
            error(string)
            connection.close()
            return
 
        connection.close()
 
        if return_df:
            return InfluxDatabaseInterface._get_df_from_response(result_set)
        else:
            return result_set
 
    def get_raw_data(self,
                     query: dict or str,
                     return_df=False) -> DataFrame or None:
 
        if not query:
            string = f""Получен пустой запрос{linesep}""
            info(string)
            return
 
        try:
            result_set = self.connection.query(query)
 
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса.\033[0m {linesep + str(err)}""
            error(string)
            return
 
        if result_set is None or len(result_set) == 0:
            string = f""\033[3;31m Запрос в InfluxDB вернул NULL. Запрос:\033[0m {linesep + query + linesep}""
            error(string)
            return
 
        if return_df:
            return InfluxDatabaseInterface._get_df_from_response(result_set)
        else:
            return result_set
 
    @staticmethod
    def _get_df_from_response(result_set):
        df = DataFrame()
        for metric, values in result_set.items():
            data_dict = {'metric': metric[0]}
            for data in values:
                data_dict.update({'time': data['time'], 'value': data['value']})
                df = df.append(data_dict, ignore_index=True)
        return df
 
    def disconnect(self):
        self.connection.close()
 
 
class PrometheusDatabaseInterface(DbBase):
 
    def connect(self,
                config: dict):
 
        self.config = config
        self._get_cred_from_conf()
        self.connection = Session()
 
        if self.credentials['cert'] is not None:
            self.connection.cert = self.credentials['cert']
 
        if self.credentials['token'] is not None:
            headers = {""Authorization"": f""Bearer {self.credentials['token']}"",
                       ""Accept"": ""application/json"",
                       ""Content-Type"": ""application/json""}
            self.connection.headers.update(headers)
 
        response = self.connection.get(self.credentials['test_connect_url'], verify=False)
 
        if response.status_code != 200:
            self.connection = None
            self._unlink_cert_files(self.credentials['cert'])
            string = f""\033[3;31m Ошибка подключения к Prometheus\033[0m {linesep + format_exc()}""
            error(string)
            raise Exception(string)
 
    def _get_cred_from_conf(self):
 
        if 'conn' in self.config:
            self.config = self.config['conn']
 
        host = self.config['host']
        if host.endswith('/'):
            host = host[:-1]
 
        port = self.config['port']
        cert = self.config.get('cert')
        token = self.config.get('token')
 
        grafana_api = ''
        if 'source' in self.config and self.config['source'] == 'grafana':
            grafana_api = f""/api/datasources/proxy/{self.config['grafana_datasource_id']}""
 
        url = f""{host}:{port}{grafana_api}/api/v1/query_range""
        test_connect_url = f""{host}:{port}{grafana_api}/api/v1/query?query=up""
 
        cert = DbBase._get_cert_files(self.system_name, cert)
 
        tmp_dict = {'url': url, 'cert': cert, 'token': token, 'test_connect_url': test_connect_url}
 
        self.credentials = tmp_dict
 
    @staticmethod
    def execute_custom_query(settings: Settings,
                             connection=None,
                             params=None,
                             json=None,
                             data=None,
                             url=None,
                             host=None,
                             port=None,
                             username=None,
                             password=None,
                             headers=None,
                             cert=None,
                             grafana_datasource_id=None,
                             method='get',
                             verify=False,
                             return_df=False,
                             return_raw=False) -> DataFrame or dict or None:
 
        self_connection = False
        if connection is None:
            connection = Session()
            self_connection = True
 
        if cert:
            cert = DbBase._get_cert_files(settings.system_name, cert)
            connection.cert = cert
 
        if headers:
            connection.headers.update(headers)
 
        if url is None:
            if host is not None:
                port = f':{port}' if port is not None else ''
            else:
                string = f'\033[3;31m Ошибка url\033[0m{linesep}'
                error(string)
                return
 
            grafana_api = ''
            if grafana_datasource_id is not None:
                grafana_api = f""/api/datasources/proxy/{grafana_datasource_id}""
 
            url = f""http://{host}{port}{grafana_api}/api/v1/query_range""
 
        kwargs = {}
        kwargs.update({'params': params, 'json': json, 'data': data, 'verify': verify})
 
        try:
            if method.lower() == 'get':
 
                if isinstance(kwargs['params'], dict) and 'start' in kwargs['params'] and 'end' in kwargs['params']:
                    if (kwargs['params']['end'] - kwargs['params']['start']) / kwargs['params']['step'] > \
                            DbBase.PROMETHEUS_MAX_NUM_OF_VALUES:
 
                        n = floor(
                            ((kwargs['params']['end'] - kwargs['params']['start']) / kwargs['params']['step']) /
                            DbBase.PROMETHEUS_MAX_NUM_OF_VALUES)
                        tmp_params = kwargs['params'].copy()
                        tmp_params['end'] = tmp_params['start'] + \
                                            DbBase.PROMETHEUS_MAX_NUM_OF_VALUES*kwargs['params']['step']
                        result = DataFrame() if return_df else {}
                        for i in range(n):
                            tmp_result = PrometheusDatabaseInterface.execute_custom_query(settings, connection,
                                                                                          tmp_params, json, data, url,
                                                                                          host, port, username,
                                                                                          password, headers, cert,
                                                                                          grafana_datasource_id, method,
                                                                                          verify, return_df, return_raw)
                            if tmp_result:
                                result = PrometheusDatabaseInterface._get_result(result, tmp_result)
 
                            tmp_params['start'] = tmp_params['end'] + 1
                            tmp_params['end'] = tmp_params['end'] + \
                                                DbBase.PROMETHEUS_MAX_NUM_OF_VALUES*kwargs['params']['step']
 
                        if tmp_params['end'] > kwargs['params']['end']:
                            tmp_params['end'] = kwargs['params']['end']
 
                        tmp_result = PrometheusDatabaseInterface.execute_custom_query(settings, connection, tmp_params,
                                                                                      json, data, url, host, port,
                                                                                      username, password, headers, cert,
                                                                                      grafana_datasource_id, method,
                                                                                      verify, return_df, return_raw)
                        if tmp_result:
                            result = PrometheusDatabaseInterface._get_result(result, tmp_result)
 
                        return result
 
                response = connection.get(url, **kwargs)
            elif method.lower() == 'post':
                response = connection.post(url, **kwargs)
            else:
                string = f""\033[3;31m Указан неправильный метод\033[0m {linesep}""
                error(string)
                if self_connection:
                    connection.close()
                return
 
            if return_raw:
                response_set = response.json()
            else:
                response_set = loads(response.text)[""data""][""result""]
        except Exception as err:
            string = f""\033[3;31m Ошибка получения ответа от Prometheus\033[0m {linesep + str(err)}""
            error(string)
            if self_connection:
                connection.close()
            return
 
        if self_connection:
            connection.close()
 
        if return_df:
            return PrometheusDatabaseInterface._get_df_from_response(response_set)
        else:
            return response_set
 
    def get_raw_data(self,
                     query: dict or str,
                     return_df: bool = False) -> dict or DataFrame or None:
 
        if not query:
            return
 
        try:
            if isinstance(query, dict) and 'start' in query and 'end' in query:
 
                if isinstance(query['query'], list):
                    return self._get_diff_in_values(query, return_df)
 
                if (query['end'] - query['start'])/query['step'] > self.PROMETHEUS_MAX_NUM_OF_VALUES:
                    return self._get_large_set_of_values(query, return_df)
 
            response = self.connection.get(self.credentials['url'], params=query, verify=False)
        except Exception as err:
            string = f""\033[3;31m Ошибка получения ответа от Prometheus\033[0m {linesep + str(err)}""
            error(string)
            return
 
        try:
            response_dict = loads(response.text)[""data""][""result""]
        except Exception as err:
            string = f""\033[3;31m Ошибка данных Prometheus\033[0m {linesep + str(err) + linesep + response.text}""
            error(string)
            return
 
        if response_dict is None or len(response_dict) == 0:
            string = f""\033[3;31m Запрос в Prometheus вернул NULL. Запрос:\033[0m "" \
                     f""{linesep + dumps(query, ensure_ascii=False, sort_keys=False, indent=4)}""
            warning(string)
            return
 
        if return_df:
            return PrometheusDatabaseInterface._get_df_from_response(response_dict)
        else:
            return response_dict
 
    def _get_diff_in_values(self,
                            query: dict,
                            return_df: bool) -> dict or DataFrame:
 
        '''
 
        @param query:
        @param return_df:
        @return:
        '''
 
        self.credentials['url'] = self.credentials['url'].replace('query_range', 'query')
        for q in query['query']:
            start_val = self.get_raw_data({'query': q, 'time': query['start']}, return_df)
            end_val = self.get_raw_data({'query': q, 'time': query['end']}, return_df)
 
            assert isinstance(start_val, dict), 'Доработать блок с типом переменной DataFrame'
 
            if len(start_val) == len(end_val):
                for i in range(len(start_val)):
                    if start_val[i]['value'] and end_val[i]['value']:
                        value = int(end_val[i]['value'][1]) - int(start_val[i]['value'][1])
                        end_val[i]['values'] = [[end_val[i]['value'][0], value]]
                        del end_val[i]['value']
                    else:
                        continue
                self.credentials['url'] = self.credentials['url'].replace('query', 'query_range')
                return end_val
 
        raise Exception
 
    def _get_large_set_of_values(self,
                                 query: dict,
                                 return_df: bool) -> dict or DataFrame:
        n = floor(((query['end'] - query['start']) / query['step']) / self.PROMETHEUS_MAX_NUM_OF_VALUES)
 
        tmp_params = query.copy()
        tmp_params['end'] = tmp_params['start'] + self.PROMETHEUS_MAX_NUM_OF_VALUES * query['step']
 
        result = DataFrame() if return_df else {}
        for i in range(n):
            tmp_result = self.get_raw_data(tmp_params, return_df)
            if tmp_result:
                result = self._get_result(result, tmp_result)
 
            tmp_params['start'] = tmp_params['end'] + 1
            tmp_params['end'] = tmp_params['end'] + self.PROMETHEUS_MAX_NUM_OF_VALUES * query['step']
 
        if tmp_params['end'] > query['end']:
            tmp_params['end'] = query['end']
 
        tmp_result = self.get_raw_data(tmp_params, return_df)
        if tmp_result:
            result = self._get_result(result, tmp_result)
 
        return result
 
    @staticmethod
    def _get_result(result: dict or list or DataFrame,
                    tmp_result: dict or DataFrame) -> dict or list or DataFrame:
 
        '''
 
        @param result:
        @param tmp_results:
        @return:
        '''
 
        if result and isinstance(result, dict):
            result['values'].extend(tmp_result['values'])
 
        elif result and isinstance(result, list):
            for i in range(len(result)):
                result[i]['values'].extend(tmp_result[i]['values'])
 
        elif isinstance(result, DataFrame) and not result.empty:
            result = result.append(tmp_result, ignore_index=True)
 
        else:
            result = tmp_result
 
        return result
 
    @staticmethod
    def _get_df_from_response(response_set):
        df = DataFrame()
        tmp_dict = {}
        if len(response_set) == 1:
            tmp_dict['metric'] = response_set[0]['metric']['label']
            for time, value in response_set[0]['values']:
                tmp_dict['time'] = time
                tmp_dict['value'] = value
                df = df.append(tmp_dict, ignore_index=True)
 
        return df
 
    def disconnect(self):
        self.connection.close()
        self._unlink_cert_files(self.credentials['cert'])
 
 
class PostgresDatabaseInterface(DbBase):
 
    def connect(self,
                config: dict):
 
        self.config = config
        self._get_cred_from_conf()
 
        user = self.credentials['user']
        password = self.credentials['password']
        host = self.credentials['host']
        if host.endswith('/'):
            host = host[:-1]
        port = self.credentials['port']
        db = self.credentials['db']
 
        try:
            self.connection = postgres_connect(user=user, password=password, host=host, port=port, dbname=db)
            self.connection.set_client_encoding('UTF-8')
 
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к Postgres\033[0m {linesep + str(err)}""
            error(string)
            return False
 
    def _get_cred_from_conf(self):
 
        if 'conn' in self.config:
            self.config = self.config['conn']
 
        user = self.config[""user""]
        password = self.config[""password""]
        dsn = self.config['dsn']
 
        conn_dict = {'user': user, 'password': password}
 
        if 'http' not in dsn:
            dsn = 'https://' + dsn
 
        dsn = urlparse(dsn)
 
        conn_dict['host'] = dsn.hostname
        conn_dict['port'] = dsn.port
        conn_dict['db'] = dsn.path[1:]
 
        self.credentials = conn_dict
 
    @staticmethod
    def execute_custom_query(settings: Settings,
                             query: dict or str,
                             host=None,
                             port=None,
                             username=None,
                             password=None,
                             db_name=None,
                             headers=None,
                             cert=None,
                             return_df=False):
 
        try:
            connection = postgres_connect(user=username, password=password, host=host, port=port, dbname=db_name)
            connection.set_client_encoding('UTF-8')
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к Postgres\033[0m {linesep + str(err)}""
            error(string)
            return False
 
        try:
            if return_df:
                df = sqlio.read_sql_query(query, connection)
                connection.close()
                return df
            else:
                result_set = None
                with connection.cursor() as cur:
                    cur.execute(query)
                    if cur.description is None:
                        connection.commit()
                    else:
                        result_set = cur.fetchall()
                    connection.commit()
                connection.close()
                return result_set
 
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса Postgres\033[0m {linesep + str(err)}""
            error(string)
            connection.close()
            return
 
    def get_raw_data(self,
                     query: str,
                     return_df=False) -> DataFrame or None:
        if not query:
            return
 
        try:
            if return_df:
                df = sqlio.read_sql_query(query, self.connection)
                return df
            else:
                result_set = None
                with self.connection.cursor() as cur:
                    cur.execute(query)
                    if cur.description is None:
                        self.connection.commit()
                    else:
                        result_set = cur.fetchall()
                    self.connection.commit()
                self.connection.close()
                return result_set
 
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса Postgres\033[0m {linesep + str(err)}""
            error(string)
            return
 
    def disconnect(self):
        self.connection.close()
 
 
class OracleDatabaseInterface(DbBase):
 
    def connect(self,
                config: dict):
 
        self.config = config
        self._get_cred_from_conf()
 
        user = self.credentials['user']
        password = self.credentials['password']
        host = self.credentials['host']
        if host.endswith('/'):
            host = host[:-1]
        port = self.credentials['port']
        db = self.credentials['db']
 
        try:
            dsn = makedsn(host=host, port=port, service_name=db)
            self.connection = oracle_connect(user=user, password=password, dsn=dsn, encoding='UTF-8')
 
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к Oracle\033[0m {linesep + str(err)}""
            error(string)
            return False
 
    def _get_cred_from_conf(self):
 
        if 'conn' in self.config:
            self.config = self.config['conn']
 
        user = self.config[""user""]
        password = self.config[""password""]
        dsn = self.config['dsn']
 
        conn_dict = {'user': user, 'password': password}
 
        if 'http' not in dsn:
            dsn = 'https://' + dsn
 
        dsn = urlparse(dsn)
 
        conn_dict['host'] = dsn.hostname
        conn_dict['port'] = dsn.port
        conn_dict['db'] = dsn.path[1:]
 
        self.credentials = conn_dict
 
    @staticmethod
    def execute_custom_query(settings: Settings,
                             query: dict or str,
                             host=None,
                             port=None,
                             username=None,
                             password=None,
                             db_name=None,
                             headers=None,
                             cert=None,
                             return_df=False):
 
        try:
            dsn = makedsn(host=host, port=port, service_name=db_name)
            connection = oracle_connect(user=username, password=password, dsn=dsn, encoding='UTF-8')
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к Postgres\033[0m {linesep + str(err)}""
            error(string)
            return False
 
        try:
            if return_df:
                df = sqlio.read_sql_query(query, connection)
                connection.close()
                return df
            else:
                result_set = None
                with connection.cursor() as cur:
                    cur.execute(query)
                    if cur.description is None:
                        connection.commit()
                    else:
                        result_set = cur.fetchall()
                    connection.commit()
                connection.close()
                return result_set
 
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса Oracle\033[0m {linesep + str(err)}""
            error(string)
            connection.close()
            return
 
    def get_raw_data(self,
                     query: str,
                     return_df=False) -> DataFrame or None:
        if not query:
            return
 
        try:
            if return_df:
                df = sqlio.read_sql_query(query, self.connection)
                return df
            else:
                result_set = None
                with self.connection.cursor() as cur:
                    cur.execute(query)
                    if cur.description is None:
                        self.connection.commit()
                    else:
                        result_set = cur.fetchall()
                    self.connection.commit()
                self.connection.close()
                return result_set
 
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса Oracle\033[0m {linesep + str(err)}""
            error(string)
            return
 
    def disconnect(self):
        self.connection.close()
 
 
class MsSqlDatabaseInterface(DbBase):
 
    def connect(self,
                config: dict):
 
        self.config = config
        self._get_cred_from_conf()
 
        user = self.credentials['user']
        password = self.credentials['password']
        host = self.credentials['host']
        if host.endswith('/'):
            host = host[:-1]
        port = self.credentials['port']
        db = self.credentials['db']
 
        try:
            self.connection = mssql_connect(server=host, port=port, user=user, password=password, database=db)
 
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к MS SQL\033[0m {linesep + str(err)}""
            error(string)
            return False
 
    def _get_cred_from_conf(self):
 
        if 'conn' in self.config:
            self.config = self.config['conn']
 
        user = self.config[""user""]
        password = self.config[""password""]
        host = self.config['host']
        if host.endswith('/'):
            host = host[:-1]
        port = self.config.get('port', '1433')
        db = self.config['db']
 
        conn_dict = {'user': user, 'password': password, 'host': host, 'port': port, 'db': db}
 
        self.credentials = conn_dict
 
    @staticmethod
    def execute_custom_query(settings: Settings,
                             query: dict or str,
                             host=None,
                             port=None,
                             username=None,
                             password=None,
                             db_name=None,
                             headers=None,
                             cert=None,
                             return_df=False):
 
        try:
            connection = mssql_connect(server=host, port=port, user=username, password=password, database=db_name)
        except Exception as err:
            string = f""\033[3;31m Ошибка подключения к MS SQL\033[0m {linesep + str(err)}""
            error(string)
            return False
 
        try:
            if return_df:
                df = sqlio.read_sql_query(query, connection)
                connection.close()
                return df
            else:
                result_set = None
                with connection.cursor() as cur:
                    cur.execute(query)
                    if cur.description is None:
                        connection.commit()
                    else:
                        result_set = cur.fetchall()
                    connection.commit()
                connection.close()
                return result_set
 
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса MS SQL\033[0m {linesep + str(err)}""
            error(string)
            connection.close()
            return
 
    def get_raw_data(self,
                     query: dict or str,
                     return_df=False) -> DataFrame or None:
 
        if not query:
            return
 
        try:
            if return_df:
                df = sqlio.read_sql_query(query, self.connection)
                return df
            else:
                result_set = None
                with self.connection.cursor() as cur:
                    cur.execute(query)
                    if cur.description is None:
                        self.connection.commit()
                    else:
                        result_set = cur.fetchall()
                    self.connection.commit()
                self.connection.close()
                return result_set
        except Exception as err:
            string = f""\033[3;31m Ошибка выполнения sql-запроса MS SQL\033[0m {linesep + str(err)}""
            error(string)
            return
 
    def disconnect(self):
        self.connection.close()
 
 
class DatabaseInterfaceFactory:
 
    @staticmethod
    def create_database_interface(settings: dict or object,
                                  config: dict = None):
 
        if isinstance(settings, dict):
            db_type = settings['pc_influx_conf']['type'].split('_')[-1]
            system_name = settings['system_name']
 
            if config is None:
                config = settings['pc_influx_conf']
        else:
            db_type = settings.pc_influx_conf['type'].split('_')[-1]
            system_name = settings.system_name
 
            if config is None:
                config = settings.pc_influx_conf
 
        if db_type.lower() == 'influx':
            return InfluxDatabaseInterface(system_name, config)
 
        elif db_type.lower() == 'prometheus':
            return PrometheusDatabaseInterface(system_name, config)
 
        elif db_type.lower() == 'postgres':
            return PostgresDatabaseInterface(system_name, config)
 
        elif db_type.lower() == 'oracle':
            return OracleDatabaseInterface(system_name, config)
 
        elif db_type.lower() == 'mssql':
            return MsSqlDatabaseInterface(system_name, config)
 
        else:
            string = f'\033[3;31m Указанная база данных не поддерживается: \033[0m{db_type + linesep}'
            error(string)
            exit(1)"
zy7JMCgS,account_activated,filipr27,JavaScript,Tuesday 25th of July 2023 08:24:37 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""account_activated"",
  business_type: ""b2c""  // b2b or b2c
})"
0nxki5TQ,ad_content_added,filipr27,JavaScript,Tuesday 25th of July 2023 08:22:03 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""ad_content_added"",
  ad_category: ""knjige""  // knjige, nekretnine, etc.
})"
wm1PFCY7,ad_category_seleceted,filipr27,JavaScript,Tuesday 25th of July 2023 08:20:10 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""ad_category_seleceted"",
  ad_category: ""knjige""  // knjige, nekretnine, etc.
})"
wxq96ST1,resend_callback,konekred,Ruby,Tuesday 25th of July 2023 08:19:42 AM CDT,"def transactions_royalcc
  sql_filter = <<-END_OF_TEXT
    client_id = :client_id AND
    (
      callback_status_code != 200 OR
      callback_status_code IS NULL
    )
  END_OF_TEXT
 
  Transaction.where(sql_filter, client_id: 7)
end

def transactions_20bet
  sql_filter = <<-END_OF_TEXT
    client_id = :client_id AND
    (
      callback_status_code != 200 OR
      callback_status_code IS NULL
    ) AND status != 0
  END_OF_TEXT
 
  Transaction.where(sql_filter, client_id: 4)
end

def resend_callback(transactions = [])
  affected_rows = 0
 
  Rails.logger.info(""processing #{transactions.count} transaction"")
  Rails.logger.info(""--------------------------------------------"")
 
  transactions.each do |transaction|
    Rails.logger.info(""transaction: #{transaction.id} -- resending callback data"")

    Interactors::Transaction::SendCallbackData.call(id: transaction.id)

    Rails.logger.info(""transaction: #{transaction.id} -- sending status #{transaction.status}"")
    Rails.logger.info(""--------------------------------------------"")

    affected_rows += 1
  end
  
  Rails.logger.info(""affected transaction: #{affected_rows}"")
end

while true
  resend_callback(transactions_royalcc + transactions_20bet)
  sleep 60
end"
86S7y3US,Twitter Bird Logo,urosevic,CSS,Tuesday 25th of July 2023 08:16:42 AM CDT,"h1[role=""heading""] > a[href=""/home""] > div:after {
  content: """";
  font-size: 34px;
  color: rgb(255, 212, 0); /* CHange to your accent colour */
}
h1[role=""heading""] > a[href=""/home""] > div * {
  display: none;
}"
n2cRuVEC,Untitled,wclovers,PHP,Tuesday 25th of July 2023 08:06:16 AM CDT,"add_filter( 'wcfm_is_allow_badges_with_store_name', '__return_true' );"
JtqnQ1Hc,Untitled,webbersof,Python,Tuesday 25th of July 2023 08:06:09 AM CDT,"days_for_stay = int(input())
type_of_room = input()
rating = input()
costs = 0
days_for_stay -= 1

if days_for_stay < 10:
    if type_of_room == 'room for one person':
        costs = 18 * days_for_stay
    elif type_of_room == 'apartment':
        costs = 25 * days_for_stay
        costs -= costs * 0.30
    elif type_of_room == 'president apartment':
        costs = 35 * days_for_stay
        costs -= costs * 0.10

elif 10 <= days_for_stay <= 15:
    if type_of_room == 'room for one person':
        costs = 18 * days_for_stay
    elif type_of_room == 'apartment':
        costs = 25 * days_for_stay
        costs -= costs * 0.35
    elif type_of_room == 'president apartment':
        costs = 35 * days_for_stay
        costs -= costs * 0.15

elif days_for_stay > 15:
    if type_of_room == 'room for one person':
        costs = 18 * days_for_stay
    elif type_of_room == 'apartment':
        costs = 25 * days_for_stay
        costs -= costs * 0.50
    elif type_of_room == 'president apartment':
        costs = 35 * days_for_stay
        costs -= costs * 0.20


if rating == 'positive':
    costs += costs * 0.25
else:
    costs -= costs * 0.10

print(f'{costs:.2f}')"
8GcgnkE2,Move WooCommerce category description to bottom,fahimmurshed,PHP,Tuesday 25th of July 2023 07:52:56 AM CDT,"/**
 * Move WooCommerce category description to bottom
 */
function move_woocommerce_category_description() {
    remove_action('woocommerce_archive_description', 'woocommerce_taxonomy_archive_description', 10);
    add_action('woocommerce_after_shop_loop', 'woocommerce_taxonomy_archive_description', 10);
}
add_action('init', 'move_woocommerce_category_description');"
fAbHzU5t,Code QC SWEP,Lumioxe,Lua,Tuesday 25th of July 2023 07:41:09 AM CDT,"$modelname """"

$bodygroup """"
{
	studio """"
}
$surfaceprop ""default""

$contents ""solid""

$illumposition 0 0 0

$cdmaterials """"

$cbox 0 0 0 0 0 0

$bbox -1.085 -0.316 -7.44 6.035 8.21 1.938

$bonemerge ""ValveBiped.Bip01_Spine4""
$bonemerge ""ValveBiped.Bip01_L_Clavicle""
$bonemerge ""ValveBiped.Bip01_L_UpperArm""
$bonemerge ""ValveBiped.Bip01_L_Forearm""
$bonemerge ""ValveBiped.Bip01_L_Hand""
$bonemerge ""ValveBiped.Bip01_L_Finger4""
$bonemerge ""ValveBiped.Bip01_L_Finger41""
$bonemerge ""ValveBiped.Bip01_L_Finger42""
$bonemerge ""ValveBiped.Bip01_L_Finger3""
$bonemerge ""ValveBiped.Bip01_L_Finger31""
$bonemerge ""ValveBiped.Bip01_L_Finger32""
$bonemerge ""ValveBiped.Bip01_L_Finger2""
$bonemerge ""ValveBiped.Bip01_L_Finger21""
$bonemerge ""ValveBiped.Bip01_L_Finger22""
$bonemerge ""ValveBiped.Bip01_L_Finger1""
$bonemerge ""ValveBiped.Bip01_L_Finger11""
$bonemerge ""ValveBiped.Bip01_L_Finger12""
$bonemerge ""ValveBiped.Bip01_L_Finger0""
$bonemerge ""ValveBiped.Bip01_L_Finger01""
$bonemerge ""ValveBiped.Bip01_L_Finger02""
$bonemerge ""ValveBiped.Bip01_R_Clavicle""
$bonemerge ""ValveBiped.Bip01_R_UpperArm""
$bonemerge ""ValveBiped.Bip01_R_Forearm""
$bonemerge ""ValveBiped.Bip01_R_Hand""
$bonemerge ""ValveBiped.Bip01_R_Finger4""
$bonemerge ""ValveBiped.Bip01_R_Finger41""
$bonemerge ""ValveBiped.Bip01_R_Finger42""
$bonemerge ""ValveBiped.Bip01_R_Finger3""
$bonemerge ""ValveBiped.Bip01_R_Finger31""
$bonemerge ""ValveBiped.Bip01_R_Finger32""
$bonemerge ""ValveBiped.Bip01_R_Finger2""
$bonemerge ""ValveBiped.Bip01_R_Finger21""
$bonemerge ""ValveBiped.Bip01_R_Finger22""
$bonemerge ""ValveBiped.Bip01_R_Finger1""
$bonemerge ""ValveBiped.Bip01_R_Finger11""
$bonemerge ""ValveBiped.Bip01_R_Finger12""
$bonemerge ""ValveBiped.Bip01_R_Finger0""
$bonemerge ""ValveBiped.Bip01_R_Finger01""
$bonemerge ""ValveBiped.Bip01_R_Finger02""

$sequence ""idle"" {
	""anims/idle.smd""
	fadein 0.2
	fadeout 0.2
    loop
}
"
L4Hue1mq,Untitled,friedkiwi,Python,Tuesday 25th of July 2023 07:30:32 AM CDT,"def crtdspf(srcfile, tgtlib, tgtfile):    
    tmp_id = random.randint(100000,999999)
    crtlib(""BLD%d"" % (tmp_id))
    subprocess.call([""system"", ""crtsrcpf"", ""FILE(BLD%d/BLD%d)"" % (tmp_id, tmp_id), ""RCDLEN(132)"" ])
    subprocess.call([""system"", ""cpyfrmstmf"", ""FROMSTMF('%s')"" % (sanitize_path(srcfile)), ""TOMBR('/QSYS.LIB/BLD%d.LIB/BLD%d.FILE/BUILD.MBR')"" % (tmp_id, tmp_id), ""MBROPT(*ADD)""])
    subprocess.call([""system"", ""crtdspf"", ""FILE(%s/%s)"" % (tgtlib, tgtfile), ""SRCFILE(BLD%d/BLD%d)"" % (tmp_id, tmp_id), ""SRCMBR(BUILD)""])
    subprocess.call([""system"", ""dsplib"", ""BLD%d"" % (tmp_id)])
    dltlib(""BLD%d"" % (tmp_id))"
9V5f0Z3X,Untitled,Ronov9,TypeScript,Tuesday 25th of July 2023 07:29:41 AM CDT,"/**
  You're given a list of arbitrary jobs that need to be completed
  
  these jobs are represented by distinct integers. You're also given a list of dependencies.
  
  A dependency is represented as a pair of jobs where the first job is a prerequisite of the second one.
  In other words, the second job depends on the first one - it can only be completed once the first job is completed.
  ---------------------------------
  Sample Input:
  jobs = [1,2,3,4]
  deps = [[1,2], [1,3], [3,2], [4,2], [4,3]]
 */

/**
 * 2: [1,3,4]
 */
type Dependancy = [number, number];
export function topologicalSort(jobs: number[], deps: Dependancy[]) {
  const graph: Record<number, number[]> = {};
  for (const [first, second] of deps) {
    if (!graph[second]) {
      graph[second] = [];
    }
    graph[second].push(first);
  }

  const added: Record<number, boolean> = {};
  const jobOrder: number[] = [];
  const processed: Record<number, boolean> = {};

  for (const job of jobs) {
    dfs(job, added, jobOrder, graph, processed);
  }

  return jobOrder;
}

function dfs(
  job: number,
  added: Record<number, boolean>,
  jobOrder: number[],
  graph: Record<number, number[]>,
  processed: Record<number, boolean>
): void {
  if (processed[job]) throw new Error(""There is a cycle"");
  if (added[job]) return;

  processed[job] = true;
  const deps = graph[job] ?? [];
  for (const d of deps) {
    dfs(d, added, jobOrder, graph, processed);
  }

  jobOrder.push(job);
  added[job] = true;
  processed[job] = false;
}
"
DVgU2rft,Untitled,Ronov9,TypeScript,Tuesday 25th of July 2023 07:27:39 AM CDT,"/*
  You're given a two-dimensional array (a matrix) of potentially unequal height
  and width containing only 0s and 1s
  
  Each 0 represents land, each 1 represents part of a river.
  A river conssits of any number of 1s that are either horizontally or vertically adjacent(but not diagonally adjacent).
  The number of adjacent 1s forming a river determines it's size.

  A river can twist. It doesn't have to be straight vertical line or straight horizontal line.
  It can be L-shaped, for example.

  Write a function that returns an array of the sizes of all rivers represented in the input matrix.
  The sizes don't need to be in any particular order

  Sample input:
            matrix = [
                [1, 0, 0, 1, 0],
                [1, 0, 1, 0, 0],
                [0, 0, 1, 0, 1],
                [1, 0, 1, 0, 1],
                [1, 0, 1, 1, 0],
               ]
*/

export function riverSizes(matrix: number[][]) {
    const visited: boolean[][] = Array(matrix.length).fill(false).map(() => Array(matrix[0].length).fill(false))

    const resp = [];
    for (let row = 0; row < matrix.length; row++) {
        for (let col = 0; col < matrix[0].length; col++) { 
            if (visited[row][col] || matrix[row][col] === 0) continue;

            const depth = calculateDepth(matrix, visited, row, col);
            resp.push(depth);
        }
    }
    return resp;
}

function calculateDepth(matrix: number[][], visited: boolean[][], row: number, col: number): number {
    if ((row < 0 || col < 0) || (row > matrix.length - 1 || col > matrix[0].length)) return 0;
    if (visited[row][col]) return 0;

    let depth = 0;

    if (matrix[row][col] === 1) {
        visited[row][col] = true;
        depth += 1;

        const down = calculateDepth(matrix, visited, row + 1, col)
        const left = calculateDepth(matrix, visited, row, col - 1)
        const right = calculateDepth(matrix, visited, row, col + 1)
        const up = calculateDepth(matrix, visited, row-1, col)

        depth = depth + down + left + right + up;
    } else { visited[row][col] = true };
    return depth;
}"
T0ieLAVC,Falske rykter,rabbnix,C++,Tuesday 25th of July 2023 07:24:20 AM CDT,"Til politiet, det ekte !!

Sørhellinga bruker forbudt teknologi mot folk de vil til livs.
Dvs:
Hvit lyd.
Infralyd.
Psykotroniske våpen.
Noe de kaller micronuke.
Lasere.
Store magneter.

De har visst skrudd sammen mye av den teknologien selv.

Modul basert.

De bruker mye av samme teknologi på en nedlagt avdeling på Ullevål sykehus. De får hjelp av storkjøkkenet....
 13-17.

Ligger rett bortenfor kiwi på området på Ullevål.

REDROOM.

Denne saken er så omfattende at jeg spyr av hele dritten. 

Noen i simondarres er desperate etter å få meg under torva! 

Snu dere andre naboer som ikke har noe med dette og gjøre.

Mange stygge falske rykter. 

Jeg er heterofil og alltid likt damer...

Aldri tro på rykter!

Mange liv er gått tapt sier teknologien. 


STOR SAK SOM MÅ OPPKLARES"
dKSKsaeQ,Untitled,avihai,PowerShell,Tuesday 25th of July 2023 07:13:19 AM CDT,"# Get the list of all users in Active Directory
$users = Get-ADUser -Filter * -Properties memberof

# Get the distinguished name of the AD group
$groupName = (Get-ADGroup ""al-avihai"").DistinguishedName

# Initialize a list to store the users who are not members of the AD group
$notMembers = @()

# Loop through the list of users
foreach ($user in $users) {

    # Check if the user is a member of the AD group
    $isMember = $user.MemberOf -contains $groupName

    # If the user is not a member of the AD group, add them to the list of not members
    if (!$isMember) {
        $notMembers += $user
    }

    # If we have added 10 users, exit the loop
    if ($notMembers.Count -eq 10) {
        break
    }
}

# Add the users in $notMembers to the AD group
foreach ($user in $notMembers) {
    Add-ADGroupMember -Identity $groupName -Members $user.SamAccountName
}
"
uhAcNp1x,Untitled,avihai,PowerShell,Tuesday 25th of July 2023 07:09:05 AM CDT,"# Get the list of all users in Active Directory
$users = Get-ADUser -Filter * -Properties memberof

# Get the distinguished name of the Domain Admins group
$groupName = (Get-ADGroup ""al-avihai"").DistinguishedName

# Initialize a list to store the users who are not members of the Domain Admins group
$notMembers = @()

# Loop through the list of users
foreach ($user in $users) {

    # Check if the user is a member of the Domain Admins group
    $isMember = $user.MemberOf -contains $groupName

    # If the user is not a member of the Domain Admins group, add them to the list of not members
    if (!$isMember) {
        $notMembers += $user
    }

    # If we have added 10 users, exit the loop
    if ($notMembers.Count -eq 10) {
        break
    }
}

# Add the users in $notMembers to the Domain Admins group
foreach ($user in $notMembers) {
    Add-ADGroupMember -Identity $groupName -Members $user.SamAccountName
}
"
guRPyT2R,Правила ЛоЛФонд,NNSYS,HTML,Tuesday 25th of July 2023 07:04:49 AM CDT,"<link=""https://discord.gg/txcT72s""<color=#FF6600><size=25>Дискорд</size><size=15> (Кликабельно)</size></color></link> <size=15> - <color=#FFFFFF>Здесь вы можете пообщаться, узнавать самые свежие новости сервера, подать заявку на администратора и т.д.</color>

<size=15><color=#FFFFFF>Данный сервер является NoRules, но в атмосфере LOLFond`а, можно делать всё, что угодно главное было весело</color></size>

<align=""center""><size=20>Правила:</size></align>

<size=15>1. Запрещено использование читов и стороннего ПО. </size>
 <size=15>Бан навсегда.</size>
 
<size=15>2. Запрещено использование багов игры для получения преимущества. </size>
 <size=15>Бан навсегда.</size>

<size=15>3. Запрещена реклама чего-либо.</size>
<size=15> Бан на 3 дня. </size>
 
<size=15>4. Запрещено оскорбление и разжигание конфликтов.</size>
<size=15> Бан на 12 часов.</size>"
D4vUxk4n,Vergil Rising CFrames,Smeagle_Deagle,Lua,Tuesday 25th of July 2023 06:48:50 AM CDT,"return {
	Properties = {
		Looping = false,
		Priority = Enum.AnimationPriority.Action
	},
	Keyframes = {
		[0] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.15, -0.15, -0.424) * CFrame.Angles(math.rad(27.96), math.rad(-10.485), math.rad(-75.573)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.381, 0.375, -0.095) * CFrame.Angles(math.rad(-105.94), math.rad(52.426), math.rad(60.905)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.937, 0.177, -0.34) * CFrame.Angles(math.rad(-46.123), math.rad(58.9), math.rad(33.232)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.316, -0.399, 0.251) * CFrame.Angles(math.rad(-85.6), math.rad(-6.073), math.rad(-49.618)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.113, -0.25, 0.736) * CFrame.Angles(math.rad(-112.185), math.rad(-31.169), math.rad(-59.759)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.267), math.rad(-35.523), math.rad(23.95)),
					},
				},
			},
		},
		[0.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.157, -0.148, -0.424) * CFrame.Angles(math.rad(27.846), math.rad(-11.058), math.rad(-76.146)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.38, 0.374, -0.098) * CFrame.Angles(math.rad(-106.57), math.rad(52.598), math.rad(62.109)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.936, 0.183, -0.345) * CFrame.Angles(math.rad(-47.613), math.rad(58.728), math.rad(34.721)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.311, -0.399, 0.262) * CFrame.Angles(math.rad(-85.944), math.rad(-5.73), math.rad(-50.191)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.123, -0.243, 0.732) * CFrame.Angles(math.rad(-113.732), math.rad(-31.398), math.rad(-60.504)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.522), math.rad(-35.695), math.rad(24.694)),
					},
				},
			},
		},
		[0.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.179, -0.141, -0.426) * CFrame.Angles(math.rad(27.502), math.rad(-12.548), math.rad(-77.636)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.376, 0.369, -0.106) * CFrame.Angles(math.rad(-108.346), math.rad(53.113), math.rad(65.489)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.934, 0.199, -0.357) * CFrame.Angles(math.rad(-51.795), math.rad(58.155), math.rad(39.018)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.298, -0.398, 0.29) * CFrame.Angles(math.rad(-86.918), math.rad(-4.756), math.rad(-51.681)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.148, -0.224, 0.72) * CFrame.Angles(math.rad(-118.201), math.rad(-31.914), math.rad(-62.567)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.516), math.rad(-36.096), math.rad(26.7)),
					},
				},
			},
		},
		[0.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.211, -0.129, -0.429) * CFrame.Angles(math.rad(26.814), math.rad(-14.897), math.rad(-79.985)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.37, 0.361, -0.119) * CFrame.Angles(math.rad(-111.154), math.rad(53.743), math.rad(70.818)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.927, 0.226, -0.377) * CFrame.Angles(math.rad(-57.983), math.rad(56.895), math.rad(45.436)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.278, -0.393, 0.333) * CFrame.Angles(math.rad(-88.407), math.rad(-3.38), math.rad(-53.973)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.188, -0.195, 0.703) * CFrame.Angles(math.rad(-125.535), math.rad(-32.601), math.rad(-65.947)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.48), math.rad(-36.268), math.rad(29.908)),
					},
				},
			},
		},
		[0.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.254, -0.111, -0.434) * CFrame.Angles(math.rad(25.783), math.rad(-17.991), math.rad(-83.136)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.36, 0.351, -0.137) * CFrame.Angles(math.rad(-114.993), math.rad(54.431), math.rad(77.865)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.914, 0.26, -0.402) * CFrame.Angles(math.rad(-65.317), math.rad(54.546), math.rad(53.113)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.256, -0.383, 0.384) * CFrame.Angles(math.rad(-90.241), math.rad(-1.719), math.rad(-56.837)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.238, -0.157, 0.68) * CFrame.Angles(math.rad(-135.562), math.rad(-33.174), math.rad(-70.703)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.927), math.rad(-35.924), math.rad(34.034)),
					},
				},
			},
		},
		[0.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.303, -0.086, -0.441) * CFrame.Angles(math.rad(24.351), math.rad(-21.601), math.rad(-87.032)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.346, 0.339, -0.157) * CFrame.Angles(math.rad(-119.691), math.rad(54.947), math.rad(86.23)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.893, 0.299, -0.432) * CFrame.Angles(math.rad(-72.708), math.rad(51.051), math.rad(61.02)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.232, -0.366, 0.44) * CFrame.Angles(math.rad(-92.418), math.rad(0.057), math.rad(-60.046)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.297, -0.113, 0.654) * CFrame.Angles(math.rad(-148.052), math.rad(-33.117), math.rad(-76.776)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.375), math.rad(-34.779), math.rad(38.675)),
					},
				},
			},
		},
		[0.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.356, -0.053, -0.453) * CFrame.Angles(math.rad(22.403), math.rad(-25.669), math.rad(-91.616)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.327, 0.327, -0.179) * CFrame.Angles(math.rad(-124.962), math.rad(55.119), math.rad(95.512)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.861, 0.342, -0.465) * CFrame.Angles(math.rad(-79.355), math.rad(46.295), math.rad(68.468)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.209, -0.339, 0.496) * CFrame.Angles(math.rad(-94.825), math.rad(1.719), math.rad(-63.598)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.361, -0.063, 0.624) * CFrame.Angles(math.rad(-162.434), math.rad(-32.028), math.rad(-83.652)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.547), math.rad(-32.773), math.rad(43.43)),
					},
				},
			},
		},
		[0.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.41, -0.013, -0.468) * CFrame.Angles(math.rad(19.882), math.rad(-29.908), math.rad(-96.715)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.303, 0.314, -0.202) * CFrame.Angles(math.rad(-130.462), math.rad(55.004), math.rad(105.138)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.819, 0.384, -0.497) * CFrame.Angles(math.rad(-84.798), math.rad(40.623), math.rad(74.886)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.19, -0.3, 0.548) * CFrame.Angles(math.rad(-97.46), math.rad(3.094), math.rad(-67.151)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.429, -0.009, 0.592) * CFrame.Angles(math.rad(-177.789), math.rad(-29.737), math.rad(-90.699)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.151), math.rad(-29.908), math.rad(47.957)),
					},
				},
			},
		},
		[0.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.462, 0.032, -0.487) * CFrame.Angles(math.rad(16.845), math.rad(-34.206), math.rad(-102.273)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.275, 0.301, -0.225) * CFrame.Angles(math.rad(-135.906), math.rad(54.546), math.rad(114.592)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.767, 0.422, -0.528) * CFrame.Angles(math.rad(-88.98), math.rad(34.377), math.rad(80.271)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.176, -0.249, 0.591) * CFrame.Angles(math.rad(-100.325), math.rad(3.953), math.rad(-70.76)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.496, 0.046, 0.559) * CFrame.Angles(math.rad(166.903), math.rad(-26.299), math.rad(-97.288)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.094), math.rad(-26.528), math.rad(51.967)),
					},
				},
			},
		},
		[0.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.509, 0.081, -0.509) * CFrame.Angles(math.rad(13.293), math.rad(-38.216), math.rad(-108.117)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.243, 0.289, -0.246) * CFrame.Angles(math.rad(-140.948), math.rad(53.858), math.rad(123.472)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.707, 0.455, -0.554) * CFrame.Angles(math.rad(-91.96), math.rad(27.96), math.rad(84.683)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.171, -0.181, 0.62) * CFrame.Angles(math.rad(-103.476), math.rad(4.068), math.rad(-74.255)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.561, 0.101, 0.525) * CFrame.Angles(math.rad(152.521), math.rad(-22.173), math.rad(-102.961)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.089), math.rad(-22.976), math.rad(55.577)),
					},
				},
			},
		},
		[0.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.55, 0.13, -0.534) * CFrame.Angles(math.rad(9.397), math.rad(-41.941), math.rad(-113.961)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.209, 0.278, -0.264) * CFrame.Angles(math.rad(-145.417), math.rad(53.056), math.rad(131.379)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.643, 0.481, -0.575) * CFrame.Angles(math.rad(-93.965), math.rad(21.772), math.rad(88.121)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.2, -0.098, 0.638) * CFrame.Angles(math.rad(-106.685), math.rad(3.667), math.rad(-77.75)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.621, 0.153, 0.491) * CFrame.Angles(math.rad(139.573), math.rad(-17.934), math.rad(-107.773)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.406), math.rad(-19.366), math.rad(60.046)),
					},
				},
			},
		},
		[0.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.584, 0.174, -0.562) * CFrame.Angles(math.rad(5.443), math.rad(-45.264), math.rad(-119.462)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.172, 0.267, -0.28) * CFrame.Angles(math.rad(-149.37), math.rad(52.368), math.rad(138.255)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.578, 0.501, -0.589) * CFrame.Angles(math.rad(-95.111), math.rad(16.157), math.rad(90.699)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.271, -0.007, 0.649) * CFrame.Angles(math.rad(-109.55), math.rad(3.037), math.rad(-81.131)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.673, 0.2, 0.458) * CFrame.Angles(math.rad(128.113), math.rad(-14.037), math.rad(-112.071)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.818), math.rad(-15.814), math.rad(66.119)),
					},
				},
			},
		},
		[0.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.613, 0.212, -0.59) * CFrame.Angles(math.rad(1.833), math.rad(-48.243), math.rad(-124.217)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.134, 0.256, -0.291) * CFrame.Angles(math.rad(-152.751), math.rad(51.853), math.rad(143.984)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.514, 0.514, -0.598) * CFrame.Angles(math.rad(-95.512), math.rad(11.345), math.rad(92.475)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.356, 0.076, 0.656) * CFrame.Angles(math.rad(-111.956), math.rad(2.177), math.rad(-84.053)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.714, 0.24, 0.429) * CFrame.Angles(math.rad(118.087), math.rad(-10.943), math.rad(-116.425)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.147), math.rad(-12.72), math.rad(73.224)),
					},
				},
			},
		},
		[0.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.638, 0.239, -0.619) * CFrame.Angles(math.rad(-1.031), math.rad(-50.879), math.rad(-127.655)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.096, 0.245, -0.299) * CFrame.Angles(math.rad(-155.73), math.rad(51.795), math.rad(148.511)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.452, 0.523, -0.6) * CFrame.Angles(math.rad(-95.283), math.rad(7.563), math.rad(93.392)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.427, 0.136, 0.659) * CFrame.Angles(math.rad(-113.732), math.rad(1.031), math.rad(-86.173)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.741, 0.272, 0.402) * CFrame.Angles(math.rad(109.435), math.rad(-8.652), math.rad(-121.238)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-18.163), math.rad(-10.313), math.rad(80.615)),
					},
				},
			},
		},
		[0.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.66, 0.252, -0.647) * CFrame.Angles(math.rad(-2.636), math.rad(-53.342), math.rad(-129.202)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.059, 0.234, -0.302) * CFrame.Angles(math.rad(-158.308), math.rad(52.254), math.rad(151.891)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.395, 0.529, -0.597) * CFrame.Angles(math.rad(-94.423), math.rad(4.87), math.rad(93.392)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.456, 0.161, 0.659) * CFrame.Angles(math.rad(-114.706), math.rad(-0.401), math.rad(-87.032)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.752, 0.292, 0.381) * CFrame.Angles(math.rad(101.872), math.rad(-7.277), math.rad(-127.082)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-24.58), math.rad(-8.881), math.rad(87.376)),
					},
				},
			},
		},
		[0.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.679, 0.213, -0.706) * CFrame.Angles(math.rad(2.005), math.rad(-55.691), math.rad(-119.92)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.045, 0.219, -0.271) * CFrame.Angles(math.rad(-158.996), math.rad(57.468), math.rad(150.631)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.355, 0.532, -0.567) * CFrame.Angles(math.rad(-90.699), math.rad(5.099), math.rad(86.803)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.451, 0.132, 0.639) * CFrame.Angles(math.rad(-112.529), math.rad(-1.948), math.rad(-83.824)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.703, 0.302, 0.365) * CFrame.Angles(math.rad(94.309), math.rad(-4.297), math.rad(-135.333)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.252), math.rad(-7.735), math.rad(87.605)),
					},
				},
			},
		},
		[0.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.685, 0.103, -0.806) * CFrame.Angles(math.rad(16.1), math.rad(-56.322), math.rad(-94.595)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.055, 0.196, -0.179) * CFrame.Angles(math.rad(-154.813), math.rad(69.786), math.rad(140.948)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.318, 0.525, -0.496) * CFrame.Angles(math.rad(-81.876), math.rad(6.875), math.rad(70.531)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.437, 0.055, 0.586) * CFrame.Angles(math.rad(-105.367), math.rad(-2.578), math.rad(-74.37)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.575, 0.312, 0.353) * CFrame.Angles(math.rad(86.459), math.rad(2.406), math.rad(-146.104)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.664), math.rad(-5.214), math.rad(78.037)),
					},
				},
			},
		},
		[0.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.652, -0.05, -0.916) * CFrame.Angles(math.rad(33.805), math.rad(-52.368), math.rad(-61.478)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.046, 0.164, -0.026) * CFrame.Angles(math.rad(-92.132), math.rad(85.084), math.rad(70.245)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.244, 0.497, -0.398) * CFrame.Angles(math.rad(-69.041), math.rad(5.157), math.rad(48.186)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.419, -0.052, 0.51) * CFrame.Angles(math.rad(-94.366), math.rad(-0.344), math.rad(-59.931)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.409, 0.331, 0.343) * CFrame.Angles(math.rad(79.469), math.rad(12.204), math.rad(-158.595)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-38.044), math.rad(-0.688), math.rad(61.65)),
					},
				},
			},
		},
		[0.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.565, -0.217, -1.009) * CFrame.Angles(math.rad(48.186), math.rad(-43.316), math.rad(-28.82)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.036, 0.12, 0.186) * CFrame.Angles(math.rad(-0.688), math.rad(65.489), math.rad(-32.258)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.098, 0.44, -0.305) * CFrame.Angles(math.rad(-55.29), math.rad(-4.412), math.rad(24.752)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.401, -0.173, 0.425) * CFrame.Angles(math.rad(-82.277), math.rad(6.303), math.rad(-43.373)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.243, 0.371, 0.333) * CFrame.Angles(math.rad(74.083), math.rad(24.179), math.rad(-172.976)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-40.508), math.rad(5.959), math.rad(39.878)),
					},
				},
			},
		},
		[0.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.41, -0.377, -1.064) * CFrame.Angles(math.rad(58.27), math.rad(-29.851), math.rad(2.979)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.475, 0.447, 0.56) * CFrame.Angles(math.rad(4.24), math.rad(30.768), math.rad(-41.425)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.131, 0.346, -0.277) * CFrame.Angles(math.rad(-43.889), math.rad(-24.293), math.rad(4.297)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.385, -0.291, 0.342) * CFrame.Angles(math.rad(-72.422), math.rad(16.1), math.rad(-28.419)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.114, 0.443, 0.325) * CFrame.Angles(math.rad(71.333), math.rad(37.128), math.rad(169.596)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-41.826), math.rad(15.355), math.rad(11.402)),
					},
				},
			},
		},
		[0.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.107, -0.528, -0.967) * CFrame.Angles(math.rad(59.645), math.rad(-7.448), math.rad(32.888)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.669, 0.161, 0.493) * CFrame.Angles(math.rad(-7.62), math.rad(-8.766), math.rad(-76.089)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.379, 0.173, -0.343) * CFrame.Angles(math.rad(-29.45), math.rad(-51.452), math.rad(-8.995)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.371, -0.393, 0.273) * CFrame.Angles(math.rad(-66.234), math.rad(25.669), math.rad(-17.074)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.051, 0.632, 0.317) * CFrame.Angles(math.rad(76.891), math.rad(45.206), math.rad(138.14)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-37.758), math.rad(22.002), math.rad(-27.445)),
					},
				},
			},
		},
		[0.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.202, -0.509, -0.697) * CFrame.Angles(math.rad(47.212), math.rad(14.267), math.rad(60.103)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.92, 0.328, 0.35) * CFrame.Angles(math.rad(-37.586), math.rad(-32.028), math.rad(-98.95)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.545, -0.004, -0.495) * CFrame.Angles(math.rad(-2.177), math.rad(-77.12), math.rad(-2.177)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.36, -0.465, 0.226) * CFrame.Angles(math.rad(-63.197), math.rad(32.429), math.rad(-9.912)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.031, 0.888, 0.312) * CFrame.Angles(math.rad(86.459), math.rad(43.43), math.rad(99.351)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.934), math.rad(19.423), math.rad(-67.265)),
					},
				},
			},
		},
		[0.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.27, -0.385, -0.413) * CFrame.Angles(math.rad(31.685), math.rad(19.194), math.rad(79.985)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.045, 0.359, 0.192) * CFrame.Angles(math.rad(-62.051), math.rad(-42.17), math.rad(-109.721)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.633, -0.074, -0.601) * CFrame.Angles(math.rad(128.973), math.rad(-87.319), math.rad(124.045)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.356, -0.493, 0.208) * CFrame.Angles(math.rad(-62.338), math.rad(34.893), math.rad(-7.334)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.019, 1.019, 0.295) * CFrame.Angles(math.rad(88.98), math.rad(40.852), math.rad(79.125)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-18.85), math.rad(13.121), math.rad(-91.329)),
					},
				},
			},
		},
		[0.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.175, -0.261, -0.181) * CFrame.Angles(math.rad(20.684), math.rad(12.261), math.rad(89.324)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.165, 0.26, 0.089) * CFrame.Angles(math.rad(-75.86), math.rad(-55.405), math.rad(-107.086)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.705, -0.074, -0.621) * CFrame.Angles(math.rad(-145.474), math.rad(-81.417), math.rad(-144.042)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.357, -0.493, 0.208) * CFrame.Angles(math.rad(-62.395), math.rad(34.836), math.rad(-7.391)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.004, 1.018, 0.267) * CFrame.Angles(math.rad(89.152), math.rad(41.883), math.rad(72.594)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.073), math.rad(5.73), math.rad(-102.216)),
					},
				},
			},
		},
		[0.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.04, -0.127, -0.017) * CFrame.Angles(math.rad(10.485), math.rad(2.807), math.rad(94.882)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.259, 0.114, 0.002) * CFrame.Angles(math.rad(-94.538), math.rad(-69.041), math.rad(-107.258)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.76, -0.052, -0.609) * CFrame.Angles(math.rad(-122.441), math.rad(-72.594), math.rad(-114.305)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.359, -0.492, 0.209) * CFrame.Angles(math.rad(-62.51), math.rad(34.664), math.rad(-7.506)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.039, 1.015, 0.236) * CFrame.Angles(math.rad(89.439), math.rad(42.8), math.rad(66.75)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(6.188), math.rad(-4.183), math.rad(-108.289)),
					},
				},
			},
		},
		[0.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.094, -0.005, 0.068) * CFrame.Angles(math.rad(1.948), math.rad(-6.589), math.rad(97.059)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.317, -0.054, -0.052) * CFrame.Angles(math.rad(-134.817), math.rad(-80.329), math.rad(-129.66)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.794, -0.023, -0.567) * CFrame.Angles(math.rad(-109.263), math.rad(-63.942), math.rad(-97.002)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.363, -0.491, 0.209) * CFrame.Angles(math.rad(-62.682), math.rad(34.435), math.rad(-7.678)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.085, 1.01, 0.202) * CFrame.Angles(math.rad(89.782), math.rad(43.545), math.rad(61.593)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(17.074), math.rad(-13.579), math.rad(-110.008)),
					},
				},
			},
		},
		[0.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.192, 0.082, 0.094) * CFrame.Angles(math.rad(-4.24), math.rad(-13.522), math.rad(97.116)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.341, -0.2, -0.076) * CFrame.Angles(math.rad(150.802), math.rad(-80.902), math.rad(169.653)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.811, -0.003, -0.51) * CFrame.Angles(math.rad(-101.299), math.rad(-57.582), math.rad(-88.006)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.368, -0.489, 0.21) * CFrame.Angles(math.rad(-62.968), math.rad(34.148), math.rad(-7.964)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, 1.003, 0.166) * CFrame.Angles(math.rad(90.126), math.rad(44.175), math.rad(57.067)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(25.325), math.rad(-20.054), math.rad(-109.148)),
					},
				},
			},
		},
		[0.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.229, 0.115, 0.096) * CFrame.Angles(math.rad(-6.704), math.rad(-16.157), math.rad(96.715)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.345, -0.285, -0.092) * CFrame.Angles(math.rad(130.004), math.rad(-78.094), math.rad(154.756)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.818, 0.005, -0.461) * CFrame.Angles(math.rad(-98.262), math.rad(-55.004), math.rad(-85.543)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.374, -0.487, 0.211) * CFrame.Angles(math.rad(-63.312), math.rad(33.747), math.rad(-8.308)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.201, 0.994, 0.128) * CFrame.Angles(math.rad(90.527), math.rad(44.691), math.rad(53.228)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(28.705), math.rad(-22.288), math.rad(-108.346)),
					},
				},
			},
		},
		[0.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.227, 0.114, 0.09) * CFrame.Angles(math.rad(-6.646), math.rad(-15.986), math.rad(96.715)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.345, -0.323, -0.116) * CFrame.Angles(math.rad(129.546), math.rad(-78.037), math.rad(155.214)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.82, 0.01, -0.421) * CFrame.Angles(math.rad(-97.918), math.rad(-54.431), math.rad(-86.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.382, -0.485, 0.212) * CFrame.Angles(math.rad(-63.713), math.rad(33.289), math.rad(-8.709)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.267, 0.984, 0.09) * CFrame.Angles(math.rad(90.871), math.rad(45.092), math.rad(50.019)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(28.648), math.rad(-22.002), math.rad(-108.346)),
					},
				},
			},
		},
		[0.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.223, 0.112, 0.073) * CFrame.Angles(math.rad(-6.474), math.rad(-15.699), math.rad(96.715)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.344, -0.351, -0.149) * CFrame.Angles(math.rad(129.89), math.rad(-78.266), math.rad(156.647)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.819, 0.018, -0.38) * CFrame.Angles(math.rad(-97.346), math.rad(-53.457), math.rad(-86.459)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.39, -0.482, 0.213) * CFrame.Angles(math.rad(-64.171), math.rad(32.773), math.rad(-9.167)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.336, 0.972, 0.052) * CFrame.Angles(math.rad(91.215), math.rad(45.378), math.rad(47.326)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(28.361), math.rad(-21.658), math.rad(-108.404)),
					},
				},
			},
		},
		[0.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.216, 0.109, 0.048) * CFrame.Angles(math.rad(-6.245), math.rad(-15.183), math.rad(96.601)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.342, -0.371, -0.189) * CFrame.Angles(math.rad(131.093), math.rad(-78.667), math.rad(158.996)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.815, 0.029, -0.34) * CFrame.Angles(math.rad(-96.658), math.rad(-52.254), math.rad(-86.517)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.399, -0.479, 0.215) * CFrame.Angles(math.rad(-64.687), math.rad(32.2), math.rad(-9.683)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.406, 0.96, 0.015) * CFrame.Angles(math.rad(91.444), math.rad(45.665), math.rad(45.206)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(27.903), math.rad(-21.199), math.rad(-108.404)),
					},
				},
			},
		},
		[0.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.206, 0.105, 0.017) * CFrame.Angles(math.rad(-5.901), math.rad(-14.553), math.rad(96.543)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.34, -0.383, -0.232) * CFrame.Angles(math.rad(133.327), math.rad(-79.355), math.rad(162.376)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.81, 0.041, -0.3) * CFrame.Angles(math.rad(-95.97), math.rad(-50.879), math.rad(-86.402)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.41, -0.476, 0.216) * CFrame.Angles(math.rad(-65.26), math.rad(31.57), math.rad(-10.313)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.475, 0.946, -0.021) * CFrame.Angles(math.rad(91.673), math.rad(45.837), math.rad(43.602)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(27.273), math.rad(-20.569), math.rad(-108.461)),
					},
				},
			},
		},
		[0.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.195, 0.099, -0.017) * CFrame.Angles(math.rad(-5.443), math.rad(-13.751), math.rad(96.372)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.337, -0.388, -0.276) * CFrame.Angles(math.rad(136.708), math.rad(-80.157), math.rad(166.845)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.804, 0.054, -0.263) * CFrame.Angles(math.rad(-95.34), math.rad(-49.446), math.rad(-86.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.421, -0.472, 0.218) * CFrame.Angles(math.rad(-65.833), math.rad(30.882), math.rad(-10.886)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.541, 0.931, -0.054) * CFrame.Angles(math.rad(91.845), math.rad(46.009), math.rad(42.342)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(26.471), math.rad(-19.824), math.rad(-108.461)),
					},
				},
			},
		},
		[0.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.182, 0.092, -0.052) * CFrame.Angles(math.rad(-4.927), math.rad(-12.777), math.rad(96.2)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.333, -0.388, -0.32) * CFrame.Angles(math.rad(141.75), math.rad(-81.131), math.rad(172.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.798, 0.067, -0.228) * CFrame.Angles(math.rad(-94.825), math.rad(-48.128), math.rad(-85.886)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.433, -0.468, 0.22) * CFrame.Angles(math.rad(-66.52), math.rad(30.195), math.rad(-11.574)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.601, 0.916, -0.084) * CFrame.Angles(math.rad(91.96), math.rad(46.066), math.rad(41.425)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(25.554), math.rad(-19.022), math.rad(-108.461)),
					},
				},
			},
		},
		[0.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.167, 0.084, -0.086) * CFrame.Angles(math.rad(-4.354), math.rad(-11.688), math.rad(95.97)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.328, -0.381, -0.36) * CFrame.Angles(math.rad(149.141), math.rad(-82.219), math.rad(-178.877)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.793, 0.079, -0.196) * CFrame.Angles(math.rad(-94.481), math.rad(-47.04), math.rad(-85.6)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.445, -0.464, 0.222) * CFrame.Angles(math.rad(-67.208), math.rad(29.45), math.rad(-12.319)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.656, 0.9, -0.111) * CFrame.Angles(math.rad(92.074), math.rad(46.123), math.rad(40.852)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(24.523), math.rad(-18.105), math.rad(-108.346)),
					},
				},
			},
		},
		[0.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.15, 0.075, -0.116) * CFrame.Angles(math.rad(-3.667), math.rad(-10.485), math.rad(95.684)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.323, -0.371, -0.394) * CFrame.Angles(math.rad(160.084), math.rad(-83.251), math.rad(-167.361)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.79, 0.09, -0.169) * CFrame.Angles(math.rad(-94.309), math.rad(-46.41), math.rad(-85.256)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.458, -0.46, 0.224) * CFrame.Angles(math.rad(-67.953), math.rad(28.648), math.rad(-13.063)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.701, 0.884, -0.132) * CFrame.Angles(math.rad(92.074), math.rad(46.18), math.rad(40.451)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(23.377), math.rad(-17.131), math.rad(-108.232)),
					},
				},
			},
		},
		[0.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.132, 0.065, -0.14) * CFrame.Angles(math.rad(-2.979), math.rad(-9.225), math.rad(95.34)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.317, -0.357, -0.42) * CFrame.Angles(math.rad(175.783), math.rad(-84.053), math.rad(-151.433)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.79, 0.098, -0.147) * CFrame.Angles(math.rad(-94.366), math.rad(-46.295), math.rad(-84.855)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.471, -0.456, 0.226) * CFrame.Angles(math.rad(-68.698), math.rad(27.903), math.rad(-13.808)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.736, 0.868, -0.149) * CFrame.Angles(math.rad(92.132), math.rad(46.18), math.rad(40.279)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(22.116), math.rad(-16.043), math.rad(-108.117)),
					},
				},
			},
		},
		[0.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.112, 0.054, -0.155) * CFrame.Angles(math.rad(-2.177), math.rad(-7.85), math.rad(94.939)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.31, -0.34, -0.435) * CFrame.Angles(math.rad(-164.038), math.rad(-84.339), math.rad(-131.437)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.794, 0.102, -0.13) * CFrame.Angles(math.rad(-94.595), math.rad(-46.868), math.rad(-84.339)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.484, -0.451, 0.228) * CFrame.Angles(math.rad(-69.5), math.rad(27.101), math.rad(-14.61)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.758, 0.852, -0.159) * CFrame.Angles(math.rad(92.132), math.rad(46.18), math.rad(40.222)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(20.798), math.rad(-14.954), math.rad(-107.831)),
					},
				},
			},
		},
		[0.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.092, 0.042, -0.159) * CFrame.Angles(math.rad(-1.375), math.rad(-6.417), math.rad(94.423)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.303, -0.323, -0.437) * CFrame.Angles(math.rad(-143.182), math.rad(-83.938), math.rad(-111.268)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.803, 0.102, -0.118) * CFrame.Angles(math.rad(-94.996), math.rad(-48.3), math.rad(-83.709)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.498, -0.447, 0.231) * CFrame.Angles(math.rad(-70.302), math.rad(26.299), math.rad(-15.413)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.766, 0.836, -0.163) * CFrame.Angles(math.rad(92.132), math.rad(46.238), math.rad(40.222)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(19.423), math.rad(-13.751), math.rad(-107.544)),
					},
				},
			},
		},
		[0.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.071, 0.03, -0.156) * CFrame.Angles(math.rad(-0.458), math.rad(-4.927), math.rad(93.85)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.295, -0.302, -0.428) * CFrame.Angles(math.rad(-125.822), math.rad(-82.907), math.rad(-95.054)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.812, 0.1, -0.11) * CFrame.Angles(math.rad(-95.512), math.rad(-50.306), math.rad(-82.964)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.512, -0.442, 0.233) * CFrame.Angles(math.rad(-71.161), math.rad(25.497), math.rad(-16.272)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.761, 0.821, -0.163) * CFrame.Angles(math.rad(91.158), math.rad(46.352), math.rad(41.024)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(17.991), math.rad(-12.548), math.rad(-107.143)),
					},
				},
			},
		},
		[0.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.049, 0.017, -0.154) * CFrame.Angles(math.rad(0.401), math.rad(-3.438), math.rad(93.22)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.287, -0.277, -0.415) * CFrame.Angles(math.rad(-112.987), math.rad(-81.417), math.rad(-83.537)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.818, 0.099, -0.101) * CFrame.Angles(math.rad(-95.913), math.rad(-52.254), math.rad(-82.162)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.526, -0.438, 0.235) * CFrame.Angles(math.rad(-71.963), math.rad(24.694), math.rad(-17.131)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.747, 0.807, -0.163) * CFrame.Angles(math.rad(88.178), math.rad(46.696), math.rad(43.43)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(16.501), math.rad(-11.287), math.rad(-106.685)),
					},
				},
			},
		},
		[0.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.027, 0.003, -0.152) * CFrame.Angles(math.rad(1.375), math.rad(-1.891), math.rad(92.533)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.278, -0.247, -0.397) * CFrame.Angles(math.rad(-103.763), math.rad(-79.698), math.rad(-75.745)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.819, 0.099, -0.092) * CFrame.Angles(math.rad(-96.257), math.rad(-54.259), math.rad(-81.188)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.54, -0.433, 0.238) * CFrame.Angles(math.rad(-72.823), math.rad(23.95), math.rad(-17.991)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.726, 0.793, -0.163) * CFrame.Angles(math.rad(83.308), math.rad(47.097), math.rad(47.498)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(15.011), math.rad(-10.027), math.rad(-106.112)),
					},
				},
			},
		},
		[0.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.005, -0.011, -0.151) * CFrame.Angles(math.rad(2.349), math.rad(-0.344), math.rad(91.731)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.268, -0.215, -0.376) * CFrame.Angles(math.rad(-96.83), math.rad(-77.808), math.rad(-70.417)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.816, 0.1, -0.082) * CFrame.Angles(math.rad(-96.429), math.rad(-56.207), math.rad(-80.042)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.554, -0.429, 0.24) * CFrame.Angles(math.rad(-73.682), math.rad(23.205), math.rad(-18.85)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.697, 0.779, -0.163) * CFrame.Angles(math.rad(76.433), math.rad(47.269), math.rad(53.17)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(13.522), math.rad(-8.766), math.rad(-105.424)),
					},
				},
			},
		},
		[0.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.017, -0.025, -0.15) * CFrame.Angles(math.rad(3.323), math.rad(1.146), math.rad(90.871)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.257, -0.18, -0.352) * CFrame.Angles(math.rad(-91.387), math.rad(-75.974), math.rad(-66.692)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.81, 0.102, -0.073) * CFrame.Angles(math.rad(-96.429), math.rad(-58.155), math.rad(-78.782)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.567, -0.425, 0.243) * CFrame.Angles(math.rad(-74.485), math.rad(22.46), math.rad(-19.652)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.662, 0.764, -0.162) * CFrame.Angles(math.rad(67.609), math.rad(46.811), math.rad(60.447)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(12.032), math.rad(-7.506), math.rad(-104.622)),
					},
				},
			},
		},
		[0.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.038, -0.039, -0.15) * CFrame.Angles(math.rad(4.354), math.rad(2.636), math.rad(89.897)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.246, -0.143, -0.324) * CFrame.Angles(math.rad(-86.918), math.rad(-74.083), math.rad(-63.999)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.8, 0.105, -0.062) * CFrame.Angles(math.rad(-96.257), math.rad(-60.046), math.rad(-77.292)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.58, -0.42, 0.245) * CFrame.Angles(math.rad(-75.344), math.rad(21.772), math.rad(-20.512)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.622, 0.749, -0.161) * CFrame.Angles(math.rad(57.181), math.rad(45.149), math.rad(68.87)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(10.542), math.rad(-6.245), math.rad(-103.763)),
					},
				},
			},
		},
		[0.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.059, -0.054, -0.15) * CFrame.Angles(math.rad(5.329), math.rad(4.068), math.rad(88.866)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.234, -0.106, -0.294) * CFrame.Angles(math.rad(-83.136), math.rad(-72.307), math.rad(-61.994)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.787, 0.11, -0.052) * CFrame.Angles(math.rad(-95.741), math.rad(-61.822), math.rad(-75.573)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.593, -0.416, 0.248) * CFrame.Angles(math.rad(-76.146), math.rad(21.085), math.rad(-21.314)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.577, 0.732, -0.16) * CFrame.Angles(math.rad(45.894), math.rad(41.941), math.rad(77.808)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(9.11), math.rad(-5.042), math.rad(-102.789)),
					},
				},
			},
		},
		[0.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.078, -0.068, -0.152) * CFrame.Angles(math.rad(6.36), math.rad(5.443), math.rad(87.72)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.222, -0.069, -0.263) * CFrame.Angles(math.rad(-79.756), math.rad(-70.588), math.rad(-60.332)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.77, 0.116, -0.04) * CFrame.Angles(math.rad(-94.996), math.rad(-63.484), math.rad(-73.625)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.605, -0.412, 0.25) * CFrame.Angles(math.rad(-76.891), math.rad(20.455), math.rad(-22.116)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.529, 0.715, -0.158) * CFrame.Angles(math.rad(34.607), math.rad(36.898), math.rad(86.23)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(7.678), math.rad(-3.896), math.rad(-101.757)),
					},
				},
			},
		},
		[0.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.097, -0.082, -0.153) * CFrame.Angles(math.rad(7.391), math.rad(6.761), math.rad(86.517)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.209, -0.033, -0.23) * CFrame.Angles(math.rad(-76.662), math.rad(-68.927), math.rad(-58.957)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.75, 0.124, -0.029) * CFrame.Angles(math.rad(-93.908), math.rad(-65.088), math.rad(-71.333)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.617, -0.408, 0.252) * CFrame.Angles(math.rad(-77.636), math.rad(19.882), math.rad(-22.861)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.478, 0.695, -0.156) * CFrame.Angles(math.rad(24.007), math.rad(29.966), math.rad(93.449)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(6.303), math.rad(-2.75), math.rad(-100.554)),
					},
				},
			},
		},
		[0.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.114, -0.096, -0.155) * CFrame.Angles(math.rad(8.365), math.rad(7.964), math.rad(85.256)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.195, 0.003, -0.197) * CFrame.Angles(math.rad(-73.797), math.rad(-67.437), math.rad(-57.754)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.727, 0.134, -0.017) * CFrame.Angles(math.rad(-92.361), math.rad(-66.52), math.rad(-68.755)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.628, -0.404, 0.255) * CFrame.Angles(math.rad(-78.381), math.rad(19.366), math.rad(-23.549)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.426, 0.673, -0.152) * CFrame.Angles(math.rad(14.496), math.rad(21.486), math.rad(99.064)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.985), math.rad(-1.719), math.rad(-99.294)),
					},
				},
			},
		},
		[0.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.129, -0.109, -0.157) * CFrame.Angles(math.rad(9.339), math.rad(9.053), math.rad(83.881)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.181, 0.036, -0.163) * CFrame.Angles(math.rad(-71.047), math.rad(-66.005), math.rad(-56.494)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.701, 0.145, -0.004) * CFrame.Angles(math.rad(-90.47), math.rad(-67.724), math.rad(-65.776)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.638, -0.401, 0.257) * CFrame.Angles(math.rad(-79.011), math.rad(18.85), math.rad(-24.236)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.374, 0.649, -0.147) * CFrame.Angles(math.rad(5.959), math.rad(12.032), math.rad(102.961)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.782), math.rad(-0.745), math.rad(-97.918)),
					},
				},
			},
		},
		[0.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.143, -0.122, -0.16) * CFrame.Angles(math.rad(10.313), math.rad(10.027), math.rad(82.506)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.166, 0.067, -0.129) * CFrame.Angles(math.rad(-68.468), math.rad(-64.63), math.rad(-55.29)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.673, 0.158, 0.009) * CFrame.Angles(math.rad(-88.064), math.rad(-68.812), math.rad(-62.395)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.648, -0.398, 0.259) * CFrame.Angles(math.rad(-79.641), math.rad(18.392), math.rad(-24.809)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.323, 0.621, -0.14) * CFrame.Angles(math.rad(-1.719), math.rad(2.12), math.rad(105.252)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.636), math.rad(0.172), math.rad(-96.486)),
					},
				},
			},
		},
		[0.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.155, -0.134, -0.162) * CFrame.Angles(math.rad(11.173), math.rad(10.886), math.rad(81.016)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.15, 0.096, -0.096) * CFrame.Angles(math.rad(-65.89), math.rad(-63.369), math.rad(-53.915)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.643, 0.173, 0.022) * CFrame.Angles(math.rad(-85.199), math.rad(-69.672), math.rad(-58.671)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.656, -0.395, 0.261) * CFrame.Angles(math.rad(-80.157), math.rad(17.991), math.rad(-25.382)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.273, 0.591, -0.13) * CFrame.Angles(math.rad(-8.824), math.rad(-7.62), math.rad(106.169)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.662), math.rad(1.031), math.rad(-94.996)),
					},
				},
			},
		},
		[0.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.165, -0.145, -0.165) * CFrame.Angles(math.rad(12.032), math.rad(11.574), math.rad(79.469)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.134, 0.121, -0.065) * CFrame.Angles(math.rad(-63.369), math.rad(-62.223), math.rad(-52.483)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.61, 0.189, 0.036) * CFrame.Angles(math.rad(-81.933), math.rad(-70.302), math.rad(-54.603)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.664, -0.393, 0.262) * CFrame.Angles(math.rad(-80.672), math.rad(17.647), math.rad(-25.84)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.225, 0.558, -0.117) * CFrame.Angles(math.rad(-15.527), math.rad(-16.673), math.rad(105.768)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.745), math.rad(1.776), math.rad(-93.392)),
					},
				},
			},
		},
		[0.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.173, -0.155, -0.167) * CFrame.Angles(math.rad(12.777), math.rad(12.147), math.rad(77.922)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.116, 0.142, -0.034) * CFrame.Angles(math.rad(-60.905), math.rad(-61.077), math.rad(-50.879)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.576, 0.207, 0.05) * CFrame.Angles(math.rad(-78.323), math.rad(-70.646), math.rad(-50.306)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.67, -0.391, 0.264) * CFrame.Angles(math.rad(-81.074), math.rad(17.418), math.rad(-26.241)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.18, 0.521, -0.1) * CFrame.Angles(math.rad(-22.059), math.rad(-24.752), math.rad(104.336)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(0, math.rad(2.406), math.rad(-91.673)),
					},
				},
			},
		},
		[0.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.178, -0.164, -0.169) * CFrame.Angles(math.rad(13.465), math.rad(12.49), math.rad(76.261)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.098, 0.159, -0.006) * CFrame.Angles(math.rad(-58.499), math.rad(-60.046), math.rad(-49.045)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.54, 0.227, 0.065) * CFrame.Angles(math.rad(-74.542), math.rad(-70.76), math.rad(-45.894)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.675, -0.389, 0.265) * CFrame.Angles(math.rad(-81.417), math.rad(17.189), math.rad(-26.585)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.137, 0.482, -0.08) * CFrame.Angles(math.rad(-28.476), math.rad(-31.627), math.rad(101.929)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.573), math.rad(2.979), math.rad(-89.897)),
					},
				},
			},
		},
		[0.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.181, -0.171, -0.171) * CFrame.Angles(math.rad(13.98), math.rad(12.72), math.rad(74.599)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.079, 0.171, 0.02) * CFrame.Angles(math.rad(-56.093), math.rad(-59.015), math.rad(-47.04)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.502, 0.248, 0.079) * CFrame.Angles(math.rad(-70.588), math.rad(-70.531), math.rad(-41.482)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.679, -0.388, 0.266) * CFrame.Angles(math.rad(-81.646), math.rad(17.017), math.rad(-26.814)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.099, 0.439, -0.057) * CFrame.Angles(math.rad(-34.779), math.rad(-37.3), math.rad(98.778)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.031), math.rad(3.438), math.rad(-88.121)),
					},
				},
			},
		},
		[0.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.182, -0.177, -0.172) * CFrame.Angles(math.rad(14.381), math.rad(12.777), math.rad(72.938)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.058, 0.179, 0.043) * CFrame.Angles(math.rad(-53.686), math.rad(-57.983), math.rad(-44.805)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.463, 0.271, 0.095) * CFrame.Angles(math.rad(-66.75), math.rad(-70.073), math.rad(-37.242)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.681, -0.387, 0.267) * CFrame.Angles(math.rad(-81.818), math.rad(16.902), math.rad(-26.929)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.065, 0.392, -0.03) * CFrame.Angles(math.rad(-40.909), math.rad(-41.769), math.rad(95.111)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.203), math.rad(3.438), math.rad(-86.173)),
					},
				},
			},
		},
		[0.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.18, -0.18, -0.172) * CFrame.Angles(math.rad(14.668), math.rad(12.662), math.rad(71.219)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.036, 0.18, 0.063) * CFrame.Angles(math.rad(-51.337), math.rad(-56.952), math.rad(-42.342)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.423, 0.295, 0.11) * CFrame.Angles(math.rad(-63.083), math.rad(-69.328), math.rad(-33.346)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.682, -0.387, 0.268) * CFrame.Angles(math.rad(-81.876), math.rad(16.845), math.rad(-26.986)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.037, 0.342, 0.001) * CFrame.Angles(math.rad(-46.696), math.rad(-45.092), math.rad(91.158)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.261), math.rad(3.724), math.rad(-84.225)),
					},
				},
			},
		},
		[0.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.177, -0.184, -0.176) * CFrame.Angles(math.rad(14.897), math.rad(12.376), math.rad(69.442)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.012, 0.178, 0.081) * CFrame.Angles(math.rad(-48.931), math.rad(-55.921), math.rad(-39.706)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.382, 0.32, 0.126) * CFrame.Angles(math.rad(-59.817), math.rad(-68.297), math.rad(-29.794)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.676, -0.388, 0.268) * CFrame.Angles(math.rad(-81.876), math.rad(16.845), math.rad(-26.585)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.013, 0.288, 0.045) * CFrame.Angles(math.rad(-52.941), math.rad(-46.753), math.rad(86.803)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.203), math.rad(4.011), math.rad(-82.277)),
					},
				},
			},
		},
		[0.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.172, -0.188, -0.185) * CFrame.Angles(math.rad(15.183), math.rad(12.032), math.rad(67.609)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.987, 0.175, 0.099) * CFrame.Angles(math.rad(-46.581), math.rad(-54.832), math.rad(-37.07)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.341, 0.346, 0.141) * CFrame.Angles(math.rad(-57.067), math.rad(-67.093), math.rad(-26.7)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.661, -0.393, 0.268) * CFrame.Angles(math.rad(-81.933), math.rad(16.788), math.rad(-25.439)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.007, 0.23, 0.109) * CFrame.Angles(math.rad(-60.103), math.rad(-46.238), math.rad(82.162)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.089), math.rad(4.354), math.rad(-80.271)),
					},
				},
			},
		},
		[1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.165, -0.192, -0.2) * CFrame.Angles(math.rad(15.527), math.rad(11.574), math.rad(65.776)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.96, 0.171, 0.117) * CFrame.Angles(math.rad(-44.175), math.rad(-53.629), math.rad(-34.435)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.299, 0.373, 0.156) * CFrame.Angles(math.rad(-54.775), math.rad(-65.776), math.rad(-23.892)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.637, -0.399, 0.269) * CFrame.Angles(math.rad(-81.933), math.rad(16.73), math.rad(-23.778)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.027, 0.17, 0.187) * CFrame.Angles(math.rad(-67.265), math.rad(-44.003), math.rad(77.922)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.974), math.rad(4.813), math.rad(-78.209)),
					},
				},
			},
		},
		[1.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.158, -0.198, -0.217) * CFrame.Angles(math.rad(15.871), math.rad(11.058), math.rad(63.885)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.932, 0.166, 0.134) * CFrame.Angles(math.rad(-41.826), math.rad(-52.368), math.rad(-31.799)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.256, 0.399, 0.171) * CFrame.Angles(math.rad(-52.827), math.rad(-64.343), math.rad(-21.314)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.606, -0.408, 0.269) * CFrame.Angles(math.rad(-81.933), math.rad(16.673), math.rad(-21.715)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.049, 0.108, 0.272) * CFrame.Angles(math.rad(-74.026), math.rad(-40.394), math.rad(74.485)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.859), math.rad(5.329), math.rad(-76.146)),
					},
				},
			},
		},
		[1.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.15, -0.203, -0.236) * CFrame.Angles(math.rad(16.215), math.rad(10.485), math.rad(61.937)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.902, 0.16, 0.152) * CFrame.Angles(math.rad(-39.534), math.rad(-51.051), math.rad(-29.278)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.215, 0.425, 0.186) * CFrame.Angles(math.rad(-51.108), math.rad(-62.853), math.rad(-18.965)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.568, -0.419, 0.27) * CFrame.Angles(math.rad(-81.933), math.rad(16.616), math.rad(-19.481)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.076, 0.044, 0.361) * CFrame.Angles(math.rad(-80.042), math.rad(-35.924), math.rad(72.021)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.745), math.rad(5.901), math.rad(-74.026)),
					},
				},
			},
		},
		[1.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.141, -0.209, -0.256) * CFrame.Angles(math.rad(16.616), math.rad(9.855), math.rad(59.931)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, 0.153, 0.169) * CFrame.Angles(math.rad(-37.3), math.rad(-49.675), math.rad(-26.757)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.173, 0.451, 0.2) * CFrame.Angles(math.rad(-49.561), math.rad(-61.306), math.rad(-16.73)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.527, -0.432, 0.271) * CFrame.Angles(math.rad(-81.933), math.rad(16.501), math.rad(-17.303)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.11, -0.02, 0.446) * CFrame.Angles(math.rad(-85.256), math.rad(-31.054), math.rad(70.359)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.688), math.rad(6.532), math.rad(-71.849)),
					},
				},
			},
		},
		[1.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.131, -0.214, -0.273) * CFrame.Angles(math.rad(16.96), math.rad(9.167), math.rad(57.926)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.842, 0.146, 0.186) * CFrame.Angles(math.rad(-35.065), math.rad(-48.243), math.rad(-24.293)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.132, 0.475, 0.214) * CFrame.Angles(math.rad(-48.128), math.rad(-59.702), math.rad(-14.496)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.482, -0.446, 0.273) * CFrame.Angles(math.rad(-81.933), math.rad(16.444), math.rad(-15.241)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.153, -0.085, 0.522) * CFrame.Angles(math.rad(-89.725), math.rad(-26.184), math.rad(69.271)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.573), math.rad(7.162), math.rad(-69.614)),
					},
				},
			},
		},
		[1.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.121, -0.22, -0.288) * CFrame.Angles(math.rad(17.361), math.rad(8.422), math.rad(55.863)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.811, 0.138, 0.202) * CFrame.Angles(math.rad(-32.945), math.rad(-46.753), math.rad(-21.944)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.092, 0.498, 0.229) * CFrame.Angles(math.rad(-46.696), math.rad(-58.098), math.rad(-12.261)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.435, -0.461, 0.276) * CFrame.Angles(math.rad(-81.933), math.rad(16.387), math.rad(-13.579)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.209, -0.15, 0.583) * CFrame.Angles(math.rad(-93.392), math.rad(-21.83), math.rad(68.468)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.516), math.rad(7.85), math.rad(-67.323)),
					},
				},
			},
		},
		[1.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.11, -0.225, -0.298) * CFrame.Angles(math.rad(17.704), math.rad(7.678), math.rad(53.801)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.779, 0.129, 0.218) * CFrame.Angles(math.rad(-30.825), math.rad(-45.206), math.rad(-19.71)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.053, 0.519, 0.243) * CFrame.Angles(math.rad(-45.149), math.rad(-56.494), math.rad(-10.027)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.387, -0.476, 0.28) * CFrame.Angles(math.rad(-81.933), math.rad(16.329), math.rad(-12.433)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.279, -0.214, 0.623) * CFrame.Angles(math.rad(-96.2), math.rad(-18.449), math.rad(67.552)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.516), math.rad(8.537), math.rad(-64.973)),
					},
				},
			},
		},
		[1.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.1, -0.23, -0.301) * CFrame.Angles(math.rad(18.048), math.rad(6.99), math.rad(51.738)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.748, 0.12, 0.233) * CFrame.Angles(math.rad(-28.82), math.rad(-43.602), math.rad(-17.533)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.016, 0.538, 0.258) * CFrame.Angles(math.rad(-43.545), math.rad(-54.889), math.rad(-7.678)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.341, -0.492, 0.285) * CFrame.Angles(math.rad(-81.933), math.rad(16.329), math.rad(-12.032)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.366, -0.277, 0.638) * CFrame.Angles(math.rad(-98.09), math.rad(-16.444), math.rad(66.234)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.573), math.rad(9.225), math.rad(-62.51)),
					},
				},
			},
		},
		[1.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.089, -0.234, -0.299) * CFrame.Angles(math.rad(18.335), math.rad(6.245), math.rad(49.618)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.718, 0.11, 0.248) * CFrame.Angles(math.rad(-26.814), math.rad(-41.941), math.rad(-15.47)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.02, 0.555, 0.274) * CFrame.Angles(math.rad(-41.826), math.rad(-53.285), math.rad(-5.271)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.296, -0.508, 0.294) * CFrame.Angles(math.rad(-81.933), math.rad(16.329), math.rad(-12.433)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.472, -0.338, 0.623) * CFrame.Angles(math.rad(-99.236), math.rad(-15.413), math.rad(64.515)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.63), math.rad(9.855), math.rad(-59.989)),
					},
				},
			},
		},
		[1.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.079, -0.238, -0.293) * CFrame.Angles(math.rad(18.564), math.rad(5.5), math.rad(47.498)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.688, 0.101, 0.262) * CFrame.Angles(math.rad(-24.981), math.rad(-40.336), math.rad(-13.522)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.054, 0.57, 0.29) * CFrame.Angles(math.rad(-40.107), math.rad(-51.623), math.rad(-2.922)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.253, -0.524, 0.307) * CFrame.Angles(math.rad(-81.933), math.rad(16.329), math.rad(-13.465)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.591, -0.397, 0.585) * CFrame.Angles(math.rad(-99.867), math.rad(-14.897), math.rad(62.567)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.745), math.rad(10.485), math.rad(-57.41)),
					},
				},
			},
		},
		[1.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.069, -0.241, -0.283) * CFrame.Angles(math.rad(18.793), math.rad(4.813), math.rad(45.493)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.659, 0.091, 0.275) * CFrame.Angles(math.rad(-23.262), math.rad(-38.732), math.rad(-11.746)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.086, 0.582, 0.305) * CFrame.Angles(math.rad(-38.445), math.rad(-50.019), math.rad(-0.63)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.213, -0.54, 0.323) * CFrame.Angles(math.rad(-81.99), math.rad(16.387), math.rad(-15.183)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.72, -0.452, 0.528) * CFrame.Angles(math.rad(-100.096), math.rad(-14.668), math.rad(60.562)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.859), math.rad(11.058), math.rad(-54.889)),
					},
				},
			},
		},
		[1.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.06, -0.243, -0.271) * CFrame.Angles(math.rad(18.908), math.rad(4.183), math.rad(43.602)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.633, 0.082, 0.286) * CFrame.Angles(math.rad(-21.772), math.rad(-37.185), math.rad(-10.141)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.116, 0.593, 0.32) * CFrame.Angles(math.rad(-36.898), math.rad(-48.415), math.rad(1.432)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.174, -0.556, 0.343) * CFrame.Angles(math.rad(-82.048), math.rad(16.387), math.rad(-17.475)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.85, -0.502, 0.46) * CFrame.Angles(math.rad(-100.038), math.rad(-14.725), math.rad(58.499)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.031), math.rad(11.631), math.rad(-52.368)),
					},
				},
			},
		},
		[1.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.052, -0.245, -0.258) * CFrame.Angles(math.rad(19.022), math.rad(3.61), math.rad(41.826)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.608, 0.074, 0.296) * CFrame.Angles(math.rad(-20.455), math.rad(-35.753), math.rad(-8.766)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.143, 0.602, 0.333) * CFrame.Angles(math.rad(-35.466), math.rad(-46.983), math.rad(3.266)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.138, -0.572, 0.366) * CFrame.Angles(math.rad(-82.105), math.rad(16.444), math.rad(-20.225)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.977, -0.547, 0.386) * CFrame.Angles(math.rad(-99.752), math.rad(-15.069), math.rad(56.494)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.203), math.rad(12.089), math.rad(-49.962)),
					},
				},
			},
		},
		[1.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.044, -0.246, -0.245) * CFrame.Angles(math.rad(19.079), math.rad(3.094), math.rad(40.279)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.587, 0.066, 0.305) * CFrame.Angles(math.rad(-19.309), math.rad(-34.435), math.rad(-7.563)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.166, 0.609, 0.345) * CFrame.Angles(math.rad(-34.263), math.rad(-45.607), math.rad(4.813)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.104, -0.587, 0.391) * CFrame.Angles(math.rad(-82.162), math.rad(16.501), math.rad(-23.377)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.094, -0.586, 0.312) * CFrame.Angles(math.rad(-99.351), math.rad(-15.47), math.rad(54.66)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.375), math.rad(12.49), math.rad(-47.67)),
					},
				},
			},
		},
		[1.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.038, -0.247, -0.233) * CFrame.Angles(math.rad(19.137), math.rad(2.636), math.rad(39.018)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.569, 0.06, 0.311) * CFrame.Angles(math.rad(-18.392), math.rad(-33.403), math.rad(-6.646)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.185, 0.615, 0.354) * CFrame.Angles(math.rad(-33.289), math.rad(-44.519), math.rad(6.131)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.072, -0.602, 0.418) * CFrame.Angles(math.rad(-82.219), math.rad(16.616), math.rad(-26.929)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.195, -0.618, 0.243) * CFrame.Angles(math.rad(-98.95), math.rad(-15.986), math.rad(53.113)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.547), math.rad(12.834), math.rad(-45.55)),
					},
				},
			},
		},
		[1.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.034, -0.247, -0.223) * CFrame.Angles(math.rad(19.194), math.rad(2.349), math.rad(38.044)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.556, 0.055, 0.316) * CFrame.Angles(math.rad(-17.762), math.rad(-32.544), math.rad(-5.959)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.2, 0.619, 0.362) * CFrame.Angles(math.rad(-32.544), math.rad(-43.602), math.rad(7.047)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.043, -0.617, 0.446) * CFrame.Angles(math.rad(-82.277), math.rad(16.673), math.rad(-30.711)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.275, -0.641, 0.187) * CFrame.Angles(math.rad(-98.549), math.rad(-16.501), math.rad(51.91)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.776), math.rad(13.063), math.rad(-43.717)),
					},
				},
			},
		},
		[1.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.031, -0.247, -0.217) * CFrame.Angles(math.rad(19.194), math.rad(2.12), math.rad(37.414)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.548, 0.052, 0.319) * CFrame.Angles(math.rad(-17.303), math.rad(-32.028), math.rad(-5.5)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.209, 0.621, 0.366) * CFrame.Angles(math.rad(-32.086), math.rad(-43.086), math.rad(7.678)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.015, -0.631, 0.476) * CFrame.Angles(math.rad(-82.334), math.rad(16.73), math.rad(-34.664)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.327, -0.656, 0.149) * CFrame.Angles(math.rad(-98.32), math.rad(-16.845), math.rad(51.108)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.948), math.rad(13.235), math.rad(-42.055)),
					},
				},
			},
		},
		[1.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.03, -0.247, -0.214) * CFrame.Angles(math.rad(19.194), math.rad(2.063), math.rad(37.185)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.545, 0.051, 0.32) * CFrame.Angles(math.rad(-17.189), math.rad(-31.856), math.rad(-5.386)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.212, 0.622, 0.368) * CFrame.Angles(math.rad(-31.914), math.rad(-42.857), math.rad(7.85)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.01, -0.644, 0.506) * CFrame.Angles(math.rad(-82.391), math.rad(16.845), math.rad(-38.789)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.346, -0.661, 0.135) * CFrame.Angles(math.rad(-98.205), math.rad(-16.96), math.rad(50.821)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.12), math.rad(13.35), math.rad(-40.795)),
					},
				},
			},
		},
		[1.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.033, -0.247, -0.214) * CFrame.Angles(math.rad(19.194), math.rad(2.292), math.rad(37.815)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.548, 0.054, 0.317) * CFrame.Angles(math.rad(-17.647), math.rad(-32.315), math.rad(-6.016)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.209, 0.622, 0.364) * CFrame.Angles(math.rad(-32.315), math.rad(-43.373), math.rad(7.162)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.033, -0.657, 0.535) * CFrame.Angles(math.rad(-82.391), math.rad(16.96), math.rad(-42.857)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.29, -0.639, 0.164) * CFrame.Angles(math.rad(-98.205), math.rad(-16.96), math.rad(51.967)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.235), math.rad(13.235), math.rad(-40.222)),
					},
				},
			},
		},
		[1.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.041, -0.246, -0.214) * CFrame.Angles(math.rad(19.079), math.rad(2.865), math.rad(39.419)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.558, 0.061, 0.309) * CFrame.Angles(math.rad(-18.965), math.rad(-33.575), math.rad(-7.792)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.2, 0.624, 0.351) * CFrame.Angles(math.rad(-33.518), math.rad(-44.863), math.rad(5.157)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.054, -0.669, 0.564) * CFrame.Angles(math.rad(-82.449), math.rad(17.074), math.rad(-46.811)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-1.137, -0.578, 0.243) * CFrame.Angles(math.rad(-98.148), math.rad(-16.845), math.rad(55.004)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.292), math.rad(12.892), math.rad(-40.623)),
					},
				},
			},
		},
		[1.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.053, -0.244, -0.214) * CFrame.Angles(math.rad(18.965), math.rad(3.667), math.rad(41.883)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.572, 0.072, 0.296) * CFrame.Angles(math.rad(-21.142), math.rad(-35.466), math.rad(-10.6)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.188, 0.626, 0.333) * CFrame.Angles(math.rad(-35.466), math.rad(-46.983), math.rad(2.005)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.073, -0.681, 0.592) * CFrame.Angles(math.rad(-82.449), math.rad(17.131), math.rad(-50.649)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.912, -0.489, 0.359) * CFrame.Angles(math.rad(-98.148), math.rad(-16.673), math.rad(59.53)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.349), math.rad(12.376), math.rad(-41.711)),
					},
				},
			},
		},
		[1.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.068, -0.241, -0.214) * CFrame.Angles(math.rad(18.736), math.rad(4.756), math.rad(44.977)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.588, 0.086, 0.279) * CFrame.Angles(math.rad(-24.122), math.rad(-37.701), math.rad(-14.439)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.174, 0.63, 0.308) * CFrame.Angles(math.rad(-38.274), math.rad(-49.561), math.rad(-2.292)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.09, -0.691, 0.617) * CFrame.Angles(math.rad(-82.506), math.rad(17.246), math.rad(-54.145)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.638, -0.38, 0.5) * CFrame.Angles(math.rad(-98.09), math.rad(-16.444), math.rad(65.26)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.464), math.rad(11.688), math.rad(-43.373)),
					},
				},
			},
		},
		[1.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.085, -0.236, -0.214) * CFrame.Angles(math.rad(18.449), math.rad(5.959), math.rad(48.53)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.605, 0.103, 0.258) * CFrame.Angles(math.rad(-27.903), math.rad(-40.05), math.rad(-19.137)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.16, 0.633, 0.28) * CFrame.Angles(math.rad(-41.883), math.rad(-52.311), math.rad(-7.563)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.105, -0.701, 0.641) * CFrame.Angles(math.rad(-82.506), math.rad(17.303), math.rad(-57.353)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.339, -0.261, 0.654) * CFrame.Angles(math.rad(-98.09), math.rad(-16.215), math.rad(71.677)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.521), math.rad(10.943), math.rad(-45.378)),
					},
				},
			},
		},
		[1.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.103, -0.229, -0.215) * CFrame.Angles(math.rad(17.991), math.rad(7.219), math.rad(52.311)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.621, 0.12, 0.234) * CFrame.Angles(math.rad(-32.258), math.rad(-42.284), math.rad(-24.58)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.148, 0.637, 0.25) * CFrame.Angles(math.rad(-46.295), math.rad(-54.889), math.rad(-13.636)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.117, -0.709, 0.661) * CFrame.Angles(math.rad(-82.506), math.rad(17.361), math.rad(-60.161)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.038, -0.142, 0.808) * CFrame.Angles(math.rad(-98.148), math.rad(-15.986), math.rad(78.323)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.693), math.rad(10.199), math.rad(-47.384)),
					},
				},
			},
		},
		[1.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.12, -0.222, -0.215) * CFrame.Angles(math.rad(17.475), math.rad(8.422), math.rad(56.15)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.634, 0.138, 0.209) * CFrame.Angles(math.rad(-37.07), math.rad(-44.175), math.rad(-30.367)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.139, 0.642, 0.22) * CFrame.Angles(math.rad(-51.28), math.rad(-57.181), math.rad(-20.34)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.128, -0.716, 0.678) * CFrame.Angles(math.rad(-82.506), math.rad(17.418), math.rad(-62.395)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.241, -0.033, 0.95) * CFrame.Angles(math.rad(-98.205), math.rad(-15.756), math.rad(84.798)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.865), math.rad(9.454), math.rad(-49.274)),
					},
				},
			},
		},
		[1.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.136, -0.213, -0.214) * CFrame.Angles(math.rad(16.902), math.rad(9.511), math.rad(59.759)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.645, 0.155, 0.184) * CFrame.Angles(math.rad(-41.883), math.rad(-45.607), math.rad(-36.211)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.132, 0.645, 0.192) * CFrame.Angles(math.rad(-56.551), math.rad(-58.957), math.rad(-27.158)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.136, -0.723, 0.69) * CFrame.Angles(math.rad(-82.506), math.rad(17.475), math.rad(-64.114)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.474, 0.058, 1.067) * CFrame.Angles(math.rad(-98.32), math.rad(-15.527), math.rad(90.642)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.037), math.rad(8.824), math.rad(-50.821)),
					},
				},
			},
		},
		[1.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.149, -0.205, -0.214) * CFrame.Angles(math.rad(16.387), math.rad(10.428), math.rad(62.911)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.652, 0.17, 0.162) * CFrame.Angles(math.rad(-46.41), math.rad(-46.581), math.rad(-41.597)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.128, 0.649, 0.167) * CFrame.Angles(math.rad(-61.593), math.rad(-60.275), math.rad(-33.518)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.143, -0.728, 0.698) * CFrame.Angles(math.rad(-82.506), math.rad(17.533), math.rad(-65.203)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.637, 0.119, 1.147) * CFrame.Angles(math.rad(-98.377), math.rad(-15.413), math.rad(95.455)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.266), math.rad(8.308), math.rad(-51.681)),
					},
				},
			},
		},
		[1.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.159, -0.198, -0.214) * CFrame.Angles(math.rad(15.871), math.rad(11.115), math.rad(65.432)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.657, 0.182, 0.143) * CFrame.Angles(math.rad(-50.134), math.rad(-47.212), math.rad(-45.951)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.126, 0.652, 0.148) * CFrame.Angles(math.rad(-65.833), math.rad(-61.077), math.rad(-38.789)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.148, -0.731, 0.701) * CFrame.Angles(math.rad(-82.506), math.rad(17.533), math.rad(-65.546)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.705, 0.142, 1.178) * CFrame.Angles(math.rad(-98.434), math.rad(-15.298), math.rad(98.835)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.438), math.rad(8.021), math.rad(-51.795)),
					},
				},
			},
		},
		[1.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.165, -0.192, -0.214) * CFrame.Angles(math.rad(15.47), math.rad(11.574), math.rad(67.208)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.659, 0.19, 0.131) * CFrame.Angles(math.rad(-52.712), math.rad(-47.498), math.rad(-48.988)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.654, 0.135) * CFrame.Angles(math.rad(-68.812), math.rad(-61.478), math.rad(-42.456)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.151, -0.734, 0.701) * CFrame.Angles(math.rad(-82.506), math.rad(17.533), math.rad(-65.546)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.716, 0.142, 1.178) * CFrame.Angles(math.rad(-98.491), math.rad(-15.241), math.rad(100.955)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.61), math.rad(7.907), math.rad(-50.936)),
					},
				},
			},
		},
		[1.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.169, -0.189, -0.214) * CFrame.Angles(math.rad(15.241), math.rad(11.86), math.rad(68.297)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.66, 0.195, 0.123) * CFrame.Angles(math.rad(-54.316), math.rad(-47.67), math.rad(-50.879)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.655, 0.126) * CFrame.Angles(math.rad(-70.703), math.rad(-61.708), math.rad(-44.805)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.154, -0.736, 0.701) * CFrame.Angles(math.rad(-82.506), math.rad(17.533), math.rad(-65.546)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.722, 0.141, 1.172) * CFrame.Angles(math.rad(-98.549), math.rad(-15.183), math.rad(102.273)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.724), math.rad(8.021), math.rad(-49.274)),
					},
				},
			},
		},
		[1.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.172, -0.187, -0.214) * CFrame.Angles(math.rad(15.126), math.rad(12.032), math.rad(68.984)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.661, 0.198, 0.118) * CFrame.Angles(math.rad(-55.29), math.rad(-47.727), math.rad(-52.025)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.655, 0.122) * CFrame.Angles(math.rad(-71.849), math.rad(-61.822), math.rad(-46.238)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.158, -0.737, 0.699) * CFrame.Angles(math.rad(-82.506), math.rad(17.533), math.rad(-65.374)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.726, 0.138, 1.154) * CFrame.Angles(math.rad(-98.549), math.rad(-15.183), math.rad(102.903)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.896), math.rad(8.251), math.rad(-46.983)),
					},
				},
			},
		},
		[1.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.173, -0.186, -0.214) * CFrame.Angles(math.rad(15.011), math.rad(12.147), math.rad(69.385)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.661, 0.199, 0.115) * CFrame.Angles(math.rad(-55.921), math.rad(-47.727), math.rad(-52.769)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.656, 0.119) * CFrame.Angles(math.rad(-72.536), math.rad(-61.879), math.rad(-47.154)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.164, -0.738, 0.697) * CFrame.Angles(math.rad(-82.506), math.rad(17.533), math.rad(-65.145)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.727, 0.132, 1.118) * CFrame.Angles(math.rad(-98.549), math.rad(-15.183), math.rad(103.19)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.068), math.rad(8.537), math.rad(-44.29)),
					},
				},
			},
		},
		[1.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.175, -0.184, -0.214) * CFrame.Angles(math.rad(14.954), math.rad(12.261), math.rad(69.786)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.662, 0.201, 0.112) * CFrame.Angles(math.rad(-56.551), math.rad(-47.785), math.rad(-53.457)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.656, 0.116) * CFrame.Angles(math.rad(-73.224), math.rad(-61.994), math.rad(-47.957)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.174, -0.74, 0.693) * CFrame.Angles(math.rad(-82.506), math.rad(17.475), math.rad(-64.802)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.727, 0.122, 1.058) * CFrame.Angles(math.rad(-98.549), math.rad(-15.183), math.rad(103.19)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.183), math.rad(8.881), math.rad(-41.368)),
					},
				},
			},
		},
		[1.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.177, -0.183, -0.214) * CFrame.Angles(math.rad(14.84), math.rad(12.433), math.rad(70.359)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.662, 0.204, 0.108) * CFrame.Angles(math.rad(-57.41), math.rad(-47.785), math.rad(-54.488)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.123, 0.657, 0.111) * CFrame.Angles(math.rad(-74.255), math.rad(-62.051), math.rad(-49.217)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.188, -0.743, 0.688) * CFrame.Angles(math.rad(-82.563), math.rad(17.475), math.rad(-64.229)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.727, 0.107, 0.97) * CFrame.Angles(math.rad(-98.549), math.rad(-15.183), math.rad(103.247)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.412), math.rad(9.225), math.rad(-38.503)),
					},
				},
			},
		},
		[1.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.181, -0.18, -0.214) * CFrame.Angles(math.rad(14.61), math.rad(12.662), math.rad(71.333)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.663, 0.208, 0.101) * CFrame.Angles(math.rad(-58.843), math.rad(-47.842), math.rad(-56.207)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.123, 0.658, 0.104) * CFrame.Angles(math.rad(-75.974), math.rad(-62.166), math.rad(-51.28)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.207, -0.747, 0.68) * CFrame.Angles(math.rad(-82.563), math.rad(17.418), math.rad(-63.426)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.729, 0.086, 0.846) * CFrame.Angles(math.rad(-98.549), math.rad(-15.126), math.rad(103.476)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.584), math.rad(9.511), math.rad(-35.81)),
					},
				},
			},
		},
		[1.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.186, -0.175, -0.214) * CFrame.Angles(math.rad(14.324), math.rad(13.063), math.rad(72.88)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.663, 0.215, 0.09) * CFrame.Angles(math.rad(-61.135), math.rad(-47.785), math.rad(-58.957)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.659, 0.093) * CFrame.Angles(math.rad(-78.724), math.rad(-62.338), math.rad(-54.603)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.234, -0.752, 0.67) * CFrame.Angles(math.rad(-82.563), math.rad(17.361), math.rad(-62.395)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.732, 0.059, 0.682) * CFrame.Angles(math.rad(-98.606), math.rad(-15.126), math.rad(104.164)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.813), math.rad(9.683), math.rad(-33.575)),
					},
				},
			},
		},
		[1.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.194, -0.167, -0.214) * CFrame.Angles(math.rad(13.751), math.rad(13.694), math.rad(75.287)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.664, 0.225, 0.072) * CFrame.Angles(math.rad(-64.687), math.rad(-47.67), math.rad(-63.083)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.124, 0.662, 0.076) * CFrame.Angles(math.rad(-82.85), math.rad(-62.395), math.rad(-59.702)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.269, -0.76, 0.656) * CFrame.Angles(math.rad(-82.621), math.rad(17.303), math.rad(-61.02)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.739, 0.023, 0.471) * CFrame.Angles(math.rad(-98.606), math.rad(-15.069), math.rad(105.482)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.042), math.rad(9.74), math.rad(-31.971)),
					},
				},
			},
		},
		[1.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.205, -0.155, -0.214) * CFrame.Angles(math.rad(12.892), math.rad(14.439), math.rad(78.724)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.662, 0.239, 0.047) * CFrame.Angles(math.rad(-69.557), math.rad(-47.154), math.rad(-68.927)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.126, 0.665, 0.053) * CFrame.Angles(math.rad(-88.637), math.rad(-62.166), math.rad(-66.75)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.314, -0.77, 0.64) * CFrame.Angles(math.rad(-82.621), math.rad(17.246), math.rad(-59.301)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.75, -0.021, 0.209) * CFrame.Angles(math.rad(-98.663), math.rad(-15.011), math.rad(107.601)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.271), math.rad(9.568), math.rad(-31.283)),
					},
				},
			},
		},
		[1.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.246, -0.092, -0.214) * CFrame.Angles(math.rad(8.48), math.rad(17.418), math.rad(94.882)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.718, 0.207, -0.084) * CFrame.Angles(math.rad(-93.106), math.rad(-55.061), math.rad(-94.939)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.112, 0.558, -0.038) * CFrame.Angles(math.rad(-120.608), math.rad(-69.442), math.rad(-102.216)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.417, -0.789, 0.573) * CFrame.Angles(math.rad(-82.678), math.rad(16.96), math.rad(-53.743)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.779, -0.074, -0.131) * CFrame.Angles(math.rad(-98.835), math.rad(-14.897), math.rad(113.446)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.558), math.rad(9.11), math.rad(-32.716)),
					},
				},
			},
		},
		[1.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.272, 0.029, -0.214) * CFrame.Angles(math.rad(-0.458), math.rad(19.309), math.rad(122.67)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.731, 0.085, -0.325) * CFrame.Angles(math.rad(-147.88), math.rad(-52.884), math.rad(-143.984)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.195, 0.265, -0.208) * CFrame.Angles(math.rad(161.173), math.rad(-54.316), math.rad(-172.174)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.561, -0.813, 0.469) * CFrame.Angles(math.rad(-82.735), math.rad(16.501), math.rad(-45.092)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.823, -0.121, -0.464) * CFrame.Angles(math.rad(-99.064), math.rad(-14.668), math.rad(121.868)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.901), math.rad(8.365), math.rad(-36.326)),
					},
				},
			},
		},
		[1.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.26, 0.101, -0.214) * CFrame.Angles(math.rad(-5.73), math.rad(18.449), math.rad(138.828)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.692, -0.021, -0.438) * CFrame.Angles(math.rad(-171.486), math.rad(-42.342), math.rad(-158.537)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.351, 0.079, -0.251) * CFrame.Angles(math.rad(142.838), math.rad(-31.398), math.rad(-178.534)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.649, -0.829, 0.413) * CFrame.Angles(math.rad(-82.735), math.rad(16.272), math.rad(-39.878)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.852, -0.144, -0.634) * CFrame.Angles(math.rad(-99.236), math.rad(-14.553), math.rad(126.853)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.131), math.rad(7.735), math.rad(-39.821)),
					},
				},
			},
		},
		[1.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.256, 0.114, -0.214) * CFrame.Angles(math.rad(-6.704), math.rad(18.163), math.rad(141.922)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.7, -0.045, -0.452) * CFrame.Angles(math.rad(-174.58), math.rad(-39.878), math.rad(-160.944)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.369, 0.08, -0.254) * CFrame.Angles(math.rad(144.156), math.rad(-28.762), math.rad(-177.159)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.675, -0.836, 0.411) * CFrame.Angles(math.rad(-82.735), math.rad(16.215), math.rad(-38.732)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.862, -0.147, -0.667) * CFrame.Angles(math.rad(-99.294), math.rad(-14.553), math.rad(128.056)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.303), math.rad(7.219), math.rad(-42.8)),
					},
				},
			},
		},
		[1.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.252, 0.125, -0.214) * CFrame.Angles(math.rad(-7.448), math.rad(17.876), math.rad(144.443)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.713, -0.068, -0.462) * CFrame.Angles(math.rad(-177.159), math.rad(-37.815), math.rad(-163.293)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.379, 0.082, -0.256) * CFrame.Angles(math.rad(145.13), math.rad(-26.528), math.rad(-176.528)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.697, -0.843, 0.41) * CFrame.Angles(math.rad(-82.735), math.rad(16.157), math.rad(-37.758)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.87, -0.149, -0.695) * CFrame.Angles(math.rad(-99.294), math.rad(-14.553), math.rad(129.03)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.474), math.rad(6.761), math.rad(-45.55)),
					},
				},
			},
		},
		[1.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.249, 0.133, -0.214) * CFrame.Angles(math.rad(-8.079), math.rad(17.59), math.rad(146.563)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.732, -0.09, -0.468) * CFrame.Angles(math.rad(-179.221), math.rad(-36.154), math.rad(-165.642)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.383, 0.085, -0.257) * CFrame.Angles(math.rad(145.875), math.rad(-24.637), math.rad(-176.471)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.715, -0.848, 0.409) * CFrame.Angles(math.rad(-82.735), math.rad(16.1), math.rad(-36.956)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.877, -0.151, -0.718) * CFrame.Angles(math.rad(-99.351), math.rad(-14.553), math.rad(129.832)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.646), math.rad(6.36), math.rad(-48.014)),
					},
				},
			},
		},
		[1.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.246, 0.14, -0.214) * CFrame.Angles(math.rad(-8.594), math.rad(17.361), math.rad(148.224)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.754, -0.11, -0.471) * CFrame.Angles(math.rad(179.107), math.rad(-34.836), math.rad(-168.106)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.38, 0.087, -0.256) * CFrame.Angles(math.rad(146.448), math.rad(-23.147), math.rad(-176.872)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.73, -0.852, 0.408) * CFrame.Angles(math.rad(-82.792), math.rad(16.1), math.rad(-36.383)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.883, -0.153, -0.737) * CFrame.Angles(math.rad(-99.351), math.rad(-14.553), math.rad(130.52)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.875), math.rad(6.073), math.rad(-50.306)),
					},
				},
			},
		},
		[1.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.243, 0.146, -0.215) * CFrame.Angles(math.rad(-8.995), math.rad(17.189), math.rad(149.542)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.778, -0.128, -0.471) * CFrame.Angles(math.rad(177.732), math.rad(-33.805), math.rad(-170.512)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.372, 0.089, -0.256) * CFrame.Angles(math.rad(146.849), math.rad(-22.002), math.rad(-177.445)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.741, -0.855, 0.408) * CFrame.Angles(math.rad(-82.792), math.rad(16.1), math.rad(-35.924)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.887, -0.154, -0.751) * CFrame.Angles(math.rad(-99.408), math.rad(-14.553), math.rad(130.978)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.105), math.rad(5.787), math.rad(-52.483)),
					},
				},
			},
		},
		[1.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.242, 0.149, -0.215) * CFrame.Angles(math.rad(-9.282), math.rad(17.074), math.rad(150.516)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.804, -0.144, -0.471) * CFrame.Angles(math.rad(176.643), math.rad(-33.002), math.rad(-172.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.359, 0.091, -0.255) * CFrame.Angles(math.rad(147.136), math.rad(-21.142), math.rad(-178.19)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.749, -0.858, 0.407) * CFrame.Angles(math.rad(-82.792), math.rad(16.1), math.rad(-35.638)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.891, -0.155, -0.762) * CFrame.Angles(math.rad(-99.408), math.rad(-14.553), math.rad(131.379)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.391), math.rad(5.558), math.rad(-54.488)),
					},
				},
			},
		},
		[1.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.24, 0.152, -0.215) * CFrame.Angles(math.rad(-9.454), math.rad(16.96), math.rad(151.204)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.83, -0.159, -0.469) * CFrame.Angles(math.rad(175.783), math.rad(-32.487), math.rad(-175.268)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.342, 0.093, -0.254) * CFrame.Angles(math.rad(147.307), math.rad(-20.455), math.rad(-178.877)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.755, -0.859, 0.407) * CFrame.Angles(math.rad(-82.792), math.rad(16.1), math.rad(-35.409)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.893, -0.156, -0.769) * CFrame.Angles(math.rad(-99.408), math.rad(-14.553), math.rad(131.608)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.62), math.rad(5.386), math.rad(-56.494)),
					},
				},
			},
		},
		[1.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.239, 0.154, -0.215) * CFrame.Angles(math.rad(-9.568), math.rad(16.902), math.rad(151.662)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.854, -0.171, -0.466) * CFrame.Angles(math.rad(175.096), math.rad(-32.143), math.rad(-177.388)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.322, 0.094, -0.253) * CFrame.Angles(math.rad(147.365), math.rad(-19.996), math.rad(-179.393)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.759, -0.86, 0.407) * CFrame.Angles(math.rad(-82.792), math.rad(16.1), math.rad(-35.237)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.895, -0.156, -0.774) * CFrame.Angles(math.rad(-99.465), math.rad(-14.553), math.rad(131.838)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.907), math.rad(5.214), math.rad(-58.384)),
					},
				},
			},
		},
		[1.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.239, 0.155, -0.215) * CFrame.Angles(math.rad(-9.683), math.rad(16.845), math.rad(151.948)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.875, -0.181, -0.464) * CFrame.Angles(math.rad(174.58), math.rad(-31.914), math.rad(-179.221)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.3, 0.095, -0.251) * CFrame.Angles(math.rad(147.307), math.rad(-19.71), math.rad(-179.851)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.762, -0.861, 0.407) * CFrame.Angles(math.rad(-82.792), math.rad(16.1), math.rad(-35.065)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.896, -0.156, -0.777) * CFrame.Angles(math.rad(-99.465), math.rad(-14.553), math.rad(131.952)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.193), math.rad(5.042), math.rad(-60.332)),
					},
				},
			},
		},
		[1.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.238, 0.156, -0.215) * CFrame.Angles(math.rad(-9.74), math.rad(16.845), math.rad(152.12)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.892, -0.189, -0.462) * CFrame.Angles(math.rad(174.236), math.rad(-31.856), math.rad(179.278)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.278, 0.094, -0.25) * CFrame.Angles(math.rad(147.193), math.rad(-19.481), math.rad(179.622)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.763, -0.861, 0.406) * CFrame.Angles(math.rad(-82.792), math.rad(16.043), math.rad(-34.95)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.896, -0.156, -0.779) * CFrame.Angles(math.rad(-99.465), math.rad(-14.553), math.rad(132.009)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.48), math.rad(4.87), math.rad(-62.338)),
					},
				},
			},
		},
		[1.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.237, 0.156, -0.214) * CFrame.Angles(math.rad(-9.74), math.rad(16.788), math.rad(152.12)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.903, -0.194, -0.46) * CFrame.Angles(math.rad(174.007), math.rad(-31.799), math.rad(178.304)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.255, 0.094, -0.25) * CFrame.Angles(math.rad(147.078), math.rad(-19.366), math.rad(178.992)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.764, -0.862, 0.405) * CFrame.Angles(math.rad(-82.735), math.rad(16.043), math.rad(-34.836)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.896, -0.157, -0.78) * CFrame.Angles(math.rad(-99.408), math.rad(-14.496), math.rad(132.067)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.824), math.rad(4.756), math.rad(-64.4)),
					},
				},
			},
		},
		[1.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.237, 0.157, -0.214) * CFrame.Angles(math.rad(-9.74), math.rad(16.73), math.rad(152.12)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.907, -0.196, -0.459) * CFrame.Angles(math.rad(173.835), math.rad(-31.799), math.rad(177.961)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.233, 0.093, -0.249) * CFrame.Angles(math.rad(146.964), math.rad(-19.309), math.rad(178.362)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.764, -0.861, 0.403) * CFrame.Angles(math.rad(-82.735), math.rad(15.986), math.rad(-34.607)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.896, -0.157, -0.78) * CFrame.Angles(math.rad(-99.408), math.rad(-14.496), math.rad(132.067)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.167), math.rad(4.584), math.rad(-66.578)),
					},
				},
			},
		},
		[1.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.236, 0.157, -0.214) * CFrame.Angles(math.rad(-9.74), math.rad(16.673), math.rad(152.063)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.906, -0.196, -0.46) * CFrame.Angles(math.rad(173.778), math.rad(-31.914), math.rad(177.903)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.211, 0.091, -0.252) * CFrame.Angles(math.rad(146.849), math.rad(-19.366), math.rad(177.732)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.763, -0.861, 0.401) * CFrame.Angles(math.rad(-82.621), math.rad(15.928), math.rad(-34.377)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.895, -0.157, -0.779) * CFrame.Angles(math.rad(-99.408), math.rad(-14.381), math.rad(132.067)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.568), math.rad(4.412), math.rad(-68.87)),
					},
				},
			},
		},
		[1.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.235, 0.156, -0.214) * CFrame.Angles(math.rad(-9.74), math.rad(16.616), math.rad(151.719)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.904, -0.196, -0.463) * CFrame.Angles(math.rad(173.664), math.rad(-32.258), math.rad(177.961)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.189, 0.087, -0.26) * CFrame.Angles(math.rad(146.792), math.rad(-19.595), math.rad(177.044)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.76, -0.859, 0.399) * CFrame.Angles(math.rad(-82.391), math.rad(15.814), math.rad(-34.091)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.892, -0.157, -0.777) * CFrame.Angles(math.rad(-99.351), math.rad(-14.152), math.rad(131.838)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.969), math.rad(4.297), math.rad(-71.047)),
					},
				},
			},
		},
		[1.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.235, 0.155, -0.213) * CFrame.Angles(math.rad(-9.626), math.rad(16.616), math.rad(151.204)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.901, -0.195, -0.467) * CFrame.Angles(math.rad(173.606), math.rad(-32.716), math.rad(177.961)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.167, 0.081, -0.272) * CFrame.Angles(math.rad(146.734), math.rad(-20.111), math.rad(176.356)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.757, -0.855, 0.396) * CFrame.Angles(math.rad(-82.105), math.rad(15.699), math.rad(-33.747)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.887, -0.158, -0.773) * CFrame.Angles(math.rad(-99.294), math.rad(-13.808), math.rad(131.494)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.371), math.rad(4.125), math.rad(-73.224)),
					},
				},
			},
		},
		[1.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.235, 0.154, -0.213) * CFrame.Angles(math.rad(-9.511), math.rad(16.558), math.rad(150.459)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.897, -0.193, -0.472) * CFrame.Angles(math.rad(173.492), math.rad(-33.403), math.rad(178.018)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.145, 0.074, -0.29) * CFrame.Angles(math.rad(146.734), math.rad(-20.798), math.rad(175.554)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.752, -0.851, 0.392) * CFrame.Angles(math.rad(-81.704), math.rad(15.527), math.rad(-33.403)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.879, -0.158, -0.769) * CFrame.Angles(math.rad(-99.294), math.rad(-13.35), math.rad(130.978)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.772), math.rad(3.953), math.rad(-75.344)),
					},
				},
			},
		},
		[1.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.235, 0.152, -0.213) * CFrame.Angles(math.rad(-9.397), math.rad(16.558), math.rad(149.542)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.891, -0.191, -0.479) * CFrame.Angles(math.rad(173.434), math.rad(-34.263), math.rad(178.018)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.122, 0.065, -0.31) * CFrame.Angles(math.rad(146.734), math.rad(-21.715), math.rad(174.752)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.746, -0.845, 0.388) * CFrame.Angles(math.rad(-81.245), math.rad(15.355), math.rad(-33.002)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.87, -0.158, -0.763) * CFrame.Angles(math.rad(-99.236), math.rad(-12.777), math.rad(130.348)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.23), math.rad(3.839), math.rad(-77.407)),
					},
				},
			},
		},
		[1.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.234, 0.149, -0.212) * CFrame.Angles(math.rad(-9.225), math.rad(16.558), math.rad(148.453)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.885, -0.189, -0.486) * CFrame.Angles(math.rad(173.377), math.rad(-35.294), math.rad(178.075)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.099, 0.055, -0.334) * CFrame.Angles(math.rad(146.734), math.rad(-22.804), math.rad(173.95)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.739, -0.839, 0.383) * CFrame.Angles(math.rad(-80.73), math.rad(15.183), math.rad(-32.544)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.859, -0.159, -0.756) * CFrame.Angles(math.rad(-99.179), math.rad(-12.089), math.rad(129.546)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.688), math.rad(3.667), math.rad(-79.412)),
					},
				},
			},
		},
		[1.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.234, 0.146, -0.212) * CFrame.Angles(math.rad(-8.995), math.rad(16.558), math.rad(147.136)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.877, -0.185, -0.493) * CFrame.Angles(math.rad(173.32), math.rad(-36.497), math.rad(178.19)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.076, 0.045, -0.361) * CFrame.Angles(math.rad(146.734), math.rad(-24.122), math.rad(173.091)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.73, -0.831, 0.378) * CFrame.Angles(math.rad(-80.099), math.rad(14.954), math.rad(-32.028)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.846, -0.159, -0.747) * CFrame.Angles(math.rad(-99.064), math.rad(-11.287), math.rad(128.572)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.147), math.rad(3.495), math.rad(-81.36)),
					},
				},
			},
		},
		[2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.234, 0.143, -0.211) * CFrame.Angles(math.rad(-8.766), math.rad(16.558), math.rad(145.589)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.869, -0.181, -0.501) * CFrame.Angles(math.rad(173.262), math.rad(-37.93), math.rad(178.247)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.052, 0.033, -0.389) * CFrame.Angles(math.rad(146.792), math.rad(-25.611), math.rad(172.174)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.72, -0.822, 0.373) * CFrame.Angles(math.rad(-79.355), math.rad(14.725), math.rad(-31.513)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.832, -0.159, -0.738) * CFrame.Angles(math.rad(-98.95), math.rad(-10.313), math.rad(127.483)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.605), math.rad(3.323), math.rad(-83.193)),
					},
				},
			},
		},
		[2.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.235, 0.139, -0.211) * CFrame.Angles(math.rad(-8.48), math.rad(16.558), math.rad(143.87)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.86, -0.177, -0.508) * CFrame.Angles(math.rad(173.205), math.rad(-39.477), math.rad(178.362)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.028, 0.021, -0.419) * CFrame.Angles(math.rad(146.792), math.rad(-27.33), math.rad(171.257)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.71, -0.812, 0.367) * CFrame.Angles(math.rad(-78.61), math.rad(14.496), math.rad(-30.94)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.816, -0.16, -0.728) * CFrame.Angles(math.rad(-98.778), math.rad(-9.282), math.rad(126.223)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.063), math.rad(3.151), math.rad(-84.912)),
					},
				},
			},
		},
		[2.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.235, 0.135, -0.21) * CFrame.Angles(math.rad(-8.136), math.rad(16.558), math.rad(141.979)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.851, -0.172, -0.515) * CFrame.Angles(math.rad(173.205), math.rad(-41.253), math.rad(178.419)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.004, 0.009, -0.449) * CFrame.Angles(math.rad(146.792), math.rad(-29.278), math.rad(170.34)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.698, -0.801, 0.361) * CFrame.Angles(math.rad(-77.75), math.rad(14.267), math.rad(-30.367)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.799, -0.16, -0.717) * CFrame.Angles(math.rad(-98.606), math.rad(-8.136), math.rad(124.79)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.522), math.rad(2.979), math.rad(-86.574)),
					},
				},
			},
		},
		[2.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.234, 0.13, -0.21) * CFrame.Angles(math.rad(-7.792), math.rad(16.558), math.rad(139.916)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.84, -0.166, -0.521) * CFrame.Angles(math.rad(173.262), math.rad(-43.201), math.rad(178.534)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.021, -0.003, -0.48) * CFrame.Angles(math.rad(146.734), math.rad(-31.455), math.rad(169.424)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.686, -0.79, 0.354) * CFrame.Angles(math.rad(-76.834), math.rad(13.98), math.rad(-29.737)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.78, -0.161, -0.705) * CFrame.Angles(math.rad(-98.377), math.rad(-6.875), math.rad(123.243)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.923), math.rad(2.75), math.rad(-88.064)),
					},
				},
			},
		},
		[2.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.234, 0.125, -0.209) * CFrame.Angles(math.rad(-7.448), math.rad(16.558), math.rad(137.567)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.83, -0.16, -0.526) * CFrame.Angles(math.rad(173.32), math.rad(-45.321), math.rad(178.706)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.046, -0.015, -0.509) * CFrame.Angles(math.rad(146.677), math.rad(-33.805), math.rad(168.507)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.672, -0.777, 0.347) * CFrame.Angles(math.rad(-75.802), math.rad(13.751), math.rad(-29.049)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.76, -0.161, -0.692) * CFrame.Angles(math.rad(-98.033), math.rad(-5.443), math.rad(121.524)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.324), math.rad(2.521), math.rad(-89.439)),
					},
				},
			},
		},
		[2.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.234, 0.119, -0.208) * CFrame.Angles(math.rad(-6.99), math.rad(16.501), math.rad(135.103)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.819, -0.153, -0.53) * CFrame.Angles(math.rad(173.377), math.rad(-47.613), math.rad(178.82)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.071, -0.026, -0.538) * CFrame.Angles(math.rad(146.563), math.rad(-36.383), math.rad(167.59)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.658, -0.764, 0.34) * CFrame.Angles(math.rad(-74.771), math.rad(13.465), math.rad(-28.304)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.738, -0.161, -0.678) * CFrame.Angles(math.rad(-97.689), math.rad(-3.953), math.rad(119.634)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.725), math.rad(2.292), math.rad(-90.585)),
					},
				},
			},
		},
		[2.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.233, 0.113, -0.207) * CFrame.Angles(math.rad(-6.532), math.rad(16.444), math.rad(132.411)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.807, -0.145, -0.531) * CFrame.Angles(math.rad(173.492), math.rad(-50.134), math.rad(178.992)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.096, -0.036, -0.564) * CFrame.Angles(math.rad(146.391), math.rad(-39.133), math.rad(166.616)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.643, -0.75, 0.333) * CFrame.Angles(math.rad(-73.625), math.rad(13.178), math.rad(-27.617)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.716, -0.162, -0.664) * CFrame.Angles(math.rad(-97.231), math.rad(-2.406), math.rad(117.628)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.126), math.rad(2.005), math.rad(-91.616)),
					},
				},
			},
		},
		[2.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.232, 0.106, -0.206) * CFrame.Angles(math.rad(-6.073), math.rad(16.387), math.rad(129.488)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.795, -0.138, -0.53) * CFrame.Angles(math.rad(173.664), math.rad(-52.827), math.rad(179.164)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.122, -0.046, -0.587) * CFrame.Angles(math.rad(146.104), math.rad(-42.17), math.rad(165.699)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.627, -0.736, 0.325) * CFrame.Angles(math.rad(-72.479), math.rad(12.892), math.rad(-26.814)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.692, -0.162, -0.649) * CFrame.Angles(math.rad(-96.658), math.rad(-0.688), math.rad(115.394)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.413), math.rad(1.662), math.rad(-92.418)),
					},
				},
			},
		},
		[2.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.231, 0.099, -0.205) * CFrame.Angles(math.rad(-5.558), math.rad(16.272), math.rad(126.394)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.782, -0.129, -0.527) * CFrame.Angles(math.rad(173.893), math.rad(-55.691), math.rad(179.393)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.147, -0.054, -0.607) * CFrame.Angles(math.rad(145.76), math.rad(-45.436), math.rad(164.668)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.61, -0.72, 0.317) * CFrame.Angles(math.rad(-71.219), math.rad(12.662), math.rad(-26.012)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.667, -0.162, -0.633) * CFrame.Angles(math.rad(-95.97), math.rad(1.089), math.rad(112.987)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.699), math.rad(1.318), math.rad(-92.934)),
					},
				},
			},
		},
		[2.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.229, 0.092, -0.204) * CFrame.Angles(math.rad(-4.985), math.rad(16.157), math.rad(123.129)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.768, -0.12, -0.521) * CFrame.Angles(math.rad(174.179), math.rad(-58.785), math.rad(179.68)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.172, -0.06, -0.623) * CFrame.Angles(math.rad(145.245), math.rad(-48.873), math.rad(163.637)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.593, -0.705, 0.309) * CFrame.Angles(math.rad(-69.901), math.rad(12.376), math.rad(-25.153)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.642, -0.163, -0.617) * CFrame.Angles(math.rad(-95.226), math.rad(2.979), math.rad(110.466)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.928), math.rad(0.917), math.rad(-93.278)),
					},
				},
			},
		},
		[2.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.227, 0.084, -0.202) * CFrame.Angles(math.rad(-4.469), math.rad(15.986), math.rad(119.634)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.753, -0.111, -0.511) * CFrame.Angles(math.rad(174.523), math.rad(-61.994), math.rad(179.966)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.196, -0.064, -0.633) * CFrame.Angles(math.rad(144.557), math.rad(-52.54), math.rad(162.434)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.575, -0.688, 0.301) * CFrame.Angles(math.rad(-68.583), math.rad(12.147), math.rad(-24.293)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.615, -0.163, -0.601) * CFrame.Angles(math.rad(-94.252), math.rad(4.927), math.rad(107.716)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-16.1), math.rad(0.516), math.rad(-93.392)),
					},
				},
			},
		},
		[2.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.224, 0.076, -0.201) * CFrame.Angles(math.rad(-3.839), math.rad(15.814), math.rad(115.967)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.738, -0.101, -0.498) * CFrame.Angles(math.rad(174.981), math.rad(-65.432), math.rad(-179.622)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.219, -0.067, -0.639) * CFrame.Angles(math.rad(143.583), math.rad(-56.379), math.rad(161.001)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.557, -0.672, 0.292) * CFrame.Angles(math.rad(-67.208), math.rad(11.918), math.rad(-23.377)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.589, -0.163, -0.584) * CFrame.Angles(math.rad(-93.163), math.rad(6.875), math.rad(104.737)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-16.272), math.rad(0.057), math.rad(-93.22)),
					},
				},
			},
		},
		[2.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.22, 0.068, -0.199) * CFrame.Angles(math.rad(-3.266), math.rad(15.527), math.rad(112.185)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.721, -0.092, -0.481) * CFrame.Angles(math.rad(175.612), math.rad(-69.099), math.rad(-179.107)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.24, -0.067, -0.639) * CFrame.Angles(math.rad(142.151), math.rad(-60.447), math.rad(159.225)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.538, -0.654, 0.284) * CFrame.Angles(math.rad(-65.776), math.rad(11.688), math.rad(-22.46)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.561, -0.163, -0.566) * CFrame.Angles(math.rad(-91.96), math.rad(8.938), math.rad(101.585)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-16.272), math.rad(-0.458), math.rad(-92.762)),
					},
				},
			},
		},
		[2.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.216, 0.06, -0.198) * CFrame.Angles(math.rad(-2.693), math.rad(15.241), math.rad(108.174)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.703, -0.082, -0.461) * CFrame.Angles(math.rad(176.414), math.rad(-72.823), math.rad(-178.419)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.26, -0.064, -0.632) * CFrame.Angles(math.rad(140.145), math.rad(-64.572), math.rad(156.876)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.519, -0.637, 0.275) * CFrame.Angles(math.rad(-64.286), math.rad(11.516), math.rad(-21.543)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.533, -0.163, -0.549) * CFrame.Angles(math.rad(-90.527), math.rad(10.943), math.rad(98.262)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-16.272), math.rad(-1.031), math.rad(-92.074)),
					},
				},
			},
		},
		[2.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.211, 0.052, -0.196) * CFrame.Angles(math.rad(-2.063), math.rad(14.897), math.rad(104.049)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.684, -0.072, -0.437) * CFrame.Angles(math.rad(177.674), math.rad(-76.776), math.rad(-177.33)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.277, -0.059, -0.619) * CFrame.Angles(math.rad(136.994), math.rad(-68.87), math.rad(153.495)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.499, -0.619, 0.266) * CFrame.Angles(math.rad(-62.796), math.rad(11.345), math.rad(-20.569)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.505, -0.163, -0.531) * CFrame.Angles(math.rad(-88.866), math.rad(12.949), math.rad(94.653)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-16.157), math.rad(-1.604), math.rad(-91.1)),
					},
				},
			},
		},
		[2.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.205, 0.043, -0.194) * CFrame.Angles(math.rad(-1.49), math.rad(14.439), math.rad(99.809)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.663, -0.063, -0.408) * CFrame.Angles(math.rad(179.794), math.rad(-80.844), math.rad(-175.382)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.292, -0.052, -0.598) * CFrame.Angles(math.rad(131.952), math.rad(-73.109), math.rad(148.224)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.48, -0.6, 0.258) * CFrame.Angles(math.rad(-61.249), math.rad(11.173), math.rad(-19.595)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.476, -0.162, -0.512) * CFrame.Angles(math.rad(-87.032), math.rad(14.954), math.rad(90.871)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.986), math.rad(-2.177), math.rad(-89.84)),
					},
				},
			},
		},
		[2.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.199, 0.035, -0.193) * CFrame.Angles(math.rad(-0.917), math.rad(13.98), math.rad(95.455)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.64, -0.053, -0.376) * CFrame.Angles(math.rad(-174.924), math.rad(-85.027), math.rad(-170.34)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.303, -0.043, -0.571) * CFrame.Angles(math.rad(123.014), math.rad(-77.12), math.rad(139.057)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.459, -0.582, 0.249) * CFrame.Angles(math.rad(-59.702), math.rad(11.058), math.rad(-18.621)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.447, -0.162, -0.494) * CFrame.Angles(math.rad(-85.027), math.rad(16.845), math.rad(86.86)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.756), math.rad(-2.807), math.rad(-88.35)),
					},
				},
			},
		},
		[2.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.192, 0.028, -0.191) * CFrame.Angles(math.rad(-0.344), math.rad(13.465), math.rad(90.986)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.615, -0.045, -0.341) * CFrame.Angles(math.rad(-128.514), math.rad(-88.923), math.rad(-124.217)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.311, -0.031, -0.537) * CFrame.Angles(math.rad(106.054), math.rad(-80.558), math.rad(121.925)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.439, -0.563, 0.24) * CFrame.Angles(math.rad(-58.098), math.rad(10.943), math.rad(-17.647)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.418, -0.162, -0.475) * CFrame.Angles(math.rad(-82.792), math.rad(18.678), math.rad(82.621)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.413), math.rad(-3.438), math.rad(-86.574)),
					},
				},
			},
		},
		[2.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.184, 0.021, -0.189) * CFrame.Angles(math.rad(0.172), math.rad(12.949), math.rad(86.517)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.588, -0.037, -0.302) * CFrame.Angles(math.rad(-17.991), math.rad(-86.116), math.rad(-13.98)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.315, -0.019, -0.498) * CFrame.Angles(math.rad(76.146), math.rad(-82.277), math.rad(91.788)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.418, -0.544, 0.231) * CFrame.Angles(math.rad(-56.494), math.rad(10.829), math.rad(-16.616)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.389, -0.162, -0.456) * CFrame.Angles(math.rad(-80.329), math.rad(20.34), math.rad(78.209)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.954), math.rad(-4.068), math.rad(-84.626)),
					},
				},
			},
		},
		[2.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.176, 0.014, -0.187) * CFrame.Angles(math.rad(0.63), math.rad(12.319), math.rad(81.933)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.559, -0.03, -0.263) * CFrame.Angles(math.rad(-10.313), math.rad(-81.761), math.rad(-6.532)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.314, -0.007, -0.459) * CFrame.Angles(math.rad(43.258), math.rad(-81.303), math.rad(58.785)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.398, -0.526, 0.222) * CFrame.Angles(math.rad(-54.889), math.rad(10.772), math.rad(-15.584)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.36, -0.161, -0.437) * CFrame.Angles(math.rad(-77.693), math.rad(21.83), math.rad(73.625)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.439), math.rad(-4.641), math.rad(-82.391)),
					},
				},
			},
		},
		[2.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.167, 0.008, -0.185) * CFrame.Angles(math.rad(1.089), math.rad(11.688), math.rad(77.407)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.528, -0.024, -0.223) * CFrame.Angles(math.rad(-7.62), math.rad(-77.292), math.rad(-4.125)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.309, 0.004, -0.419) * CFrame.Angles(math.rad(22.746), math.rad(-78.266), math.rad(38.159)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.377, -0.507, 0.214) * CFrame.Angles(math.rad(-53.285), math.rad(10.772), math.rad(-14.61)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.331, -0.161, -0.418) * CFrame.Angles(math.rad(-74.886), math.rad(23.09), math.rad(68.927)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.808), math.rad(-5.271), math.rad(-79.985)),
					},
				},
			},
		},
		[2.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.157, 0.003, -0.183) * CFrame.Angles(math.rad(1.432), math.rad(11.001), math.rad(72.88)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.496, -0.018, -0.183) * CFrame.Angles(math.rad(-6.131), math.rad(-72.823), math.rad(-2.807)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.299, 0.015, -0.379) * CFrame.Angles(math.rad(11.746), math.rad(-74.313), math.rad(27.158)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.356, -0.488, 0.205) * CFrame.Angles(math.rad(-51.681), math.rad(10.772), math.rad(-13.579)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.302, -0.161, -0.398) * CFrame.Angles(math.rad(-71.963), math.rad(24.179), math.rad(64.114)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.178), math.rad(-5.787), math.rad(-77.407)),
					},
				},
			},
		},
		[2.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.147, -0.002, -0.182) * CFrame.Angles(math.rad(1.719), math.rad(10.313), math.rad(68.411)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.461, -0.013, -0.144) * CFrame.Angles(math.rad(-5.099), math.rad(-68.411), math.rad(-1.948)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.285, 0.025, -0.34) * CFrame.Angles(math.rad(5.443), math.rad(-70.13), math.rad(20.856)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.336, -0.469, 0.196) * CFrame.Angles(math.rad(-50.077), math.rad(10.772), math.rad(-12.605)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.274, -0.16, -0.379) * CFrame.Angles(math.rad(-68.927), math.rad(25.038), math.rad(59.187)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.433), math.rad(-6.303), math.rad(-74.656)),
					},
				},
			},
		},
		[2.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.137, -0.005, -0.18) * CFrame.Angles(math.rad(2.005), math.rad(9.626), math.rad(63.942)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.425, -0.009, -0.105) * CFrame.Angles(math.rad(-4.354), math.rad(-63.999), math.rad(-1.261)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.266, 0.035, -0.302) * CFrame.Angles(math.rad(1.547), math.rad(-65.833), math.rad(16.96)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.315, -0.45, 0.188) * CFrame.Angles(math.rad(-48.472), math.rad(10.829), math.rad(-11.631)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.246, -0.16, -0.36) * CFrame.Angles(math.rad(-65.89), math.rad(25.611), math.rad(54.316)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.631), math.rad(-6.761), math.rad(-71.734)),
					},
				},
			},
		},
		[2.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.127, -0.008, -0.179) * CFrame.Angles(math.rad(2.177), math.rad(8.881), math.rad(59.645)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.387, -0.005, -0.068) * CFrame.Angles(math.rad(-3.782), math.rad(-59.702), math.rad(-0.745)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.245, 0.045, -0.266) * CFrame.Angles(math.rad(-1.146), math.rad(-61.536), math.rad(14.381)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.294, -0.432, 0.179) * CFrame.Angles(math.rad(-46.925), math.rad(10.943), math.rad(-10.657)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.218, -0.16, -0.34) * CFrame.Angles(math.rad(-62.796), math.rad(25.955), math.rad(49.446)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.772), math.rad(-7.105), math.rad(-68.698)),
					},
				},
			},
		},
		[2.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.117, -0.01, -0.177) * CFrame.Angles(math.rad(2.349), math.rad(8.193), math.rad(55.405)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.349, -0.001, -0.033) * CFrame.Angles(math.rad(-3.323), math.rad(-55.462), math.rad(-0.229)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.22, 0.054, -0.231) * CFrame.Angles(math.rad(-3.037), math.rad(-57.296), math.rad(12.548)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.274, -0.413, 0.171) * CFrame.Angles(math.rad(-45.378), math.rad(11.058), math.rad(-9.683)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.191, -0.16, -0.321) * CFrame.Angles(math.rad(-59.759), math.rad(26.07), math.rad(44.633)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.912), math.rad(-7.448), math.rad(-65.604)),
					},
				},
			},
		},
		[2.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.107, -0.012, -0.176) * CFrame.Angles(math.rad(2.406), math.rad(7.506), math.rad(51.28)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.31, 0.002, 0) * CFrame.Angles(math.rad(-2.922), math.rad(-51.394), math.rad(0.229)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.193, 0.062, -0.199) * CFrame.Angles(math.rad(-4.412), math.rad(-53.113), math.rad(11.23)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.254, -0.395, 0.163) * CFrame.Angles(math.rad(-43.831), math.rad(11.173), math.rad(-8.709)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.164, -0.159, -0.302) * CFrame.Angles(math.rad(-56.837), math.rad(25.955), math.rad(39.992)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.995), math.rad(-7.678), math.rad(-62.395)),
					},
				},
			},
		},
		[2.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.098, -0.012, -0.175) * CFrame.Angles(math.rad(2.464), math.rad(6.818), math.rad(47.326)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.27, 0.005, 0.032) * CFrame.Angles(math.rad(-2.636), math.rad(-47.384), math.rad(0.688)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.164, 0.07, -0.168) * CFrame.Angles(math.rad(-5.558), math.rad(-49.102), math.rad(10.199)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.235, -0.377, 0.155) * CFrame.Angles(math.rad(-42.342), math.rad(11.287), math.rad(-7.85)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.137, -0.159, -0.283) * CFrame.Angles(math.rad(-54.03), math.rad(25.669), math.rad(35.523)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.079), math.rad(-7.85), math.rad(-59.072)),
					},
				},
			},
		},
		[2.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.088, -0.012, -0.174) * CFrame.Angles(math.rad(2.464), math.rad(6.188), math.rad(43.487)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.231, 0.009, 0.061) * CFrame.Angles(math.rad(-2.406), math.rad(-43.545), math.rad(1.089)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.133, 0.077, -0.14) * CFrame.Angles(math.rad(-6.417), math.rad(-45.264), math.rad(9.397)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.215, -0.36, 0.148) * CFrame.Angles(math.rad(-40.852), math.rad(11.459), math.rad(-6.933)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.112, -0.159, -0.264) * CFrame.Angles(math.rad(-51.337), math.rad(25.153), math.rad(31.283)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.162), math.rad(-7.964), math.rad(-55.749)),
					},
				},
			},
		},
		[2.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.079, -0.012, -0.173) * CFrame.Angles(math.rad(2.406), math.rad(5.558), math.rad(39.821)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.193, 0.012, 0.087) * CFrame.Angles(math.rad(-2.235), math.rad(-39.878), math.rad(1.547)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.101, 0.084, -0.115) * CFrame.Angles(math.rad(-7.105), math.rad(-41.597), math.rad(8.709)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.197, -0.343, 0.14) * CFrame.Angles(math.rad(-39.477), math.rad(11.688), math.rad(-6.073)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.086, -0.159, -0.245) * CFrame.Angles(math.rad(-48.873), math.rad(24.58), math.rad(27.215)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.245), math.rad(-7.964), math.rad(-52.368)),
					},
				},
			},
		},
		[2.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.071, -0.01, -0.172) * CFrame.Angles(math.rad(2.349), math.rad(4.927), math.rad(36.326)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.155, 0.015, 0.112) * CFrame.Angles(math.rad(-2.12), math.rad(-36.383), math.rad(1.948)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.069, 0.091, -0.092) * CFrame.Angles(math.rad(-7.735), math.rad(-38.044), math.rad(8.136)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.178, -0.326, 0.133) * CFrame.Angles(math.rad(-38.102), math.rad(11.86), math.rad(-5.271)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.062, -0.16, -0.227) * CFrame.Angles(math.rad(-46.524), math.rad(23.835), math.rad(23.434)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.386), math.rad(-7.907), math.rad(-48.931)),
					},
				},
			},
		},
		[2.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.063, -0.009, -0.171) * CFrame.Angles(math.rad(2.235), math.rad(4.412), math.rad(33.06)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.118, 0.018, 0.134) * CFrame.Angles(math.rad(-2.063), math.rad(-33.06), math.rad(2.406)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.036, 0.097, -0.071) * CFrame.Angles(math.rad(-8.251), math.rad(-34.721), math.rad(7.62)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.16, -0.31, 0.126) * CFrame.Angles(math.rad(-36.727), math.rad(12.089), math.rad(-4.469)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.038, -0.16, -0.209) * CFrame.Angles(math.rad(-44.404), math.rad(22.976), math.rad(19.939)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.526), math.rad(-7.792), math.rad(-45.55)),
					},
				},
			},
		},
		[2.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.056, -0.007, -0.171) * CFrame.Angles(math.rad(2.063), math.rad(3.896), math.rad(29.908)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.083, 0.022, 0.155) * CFrame.Angles(math.rad(-2.005), math.rad(-29.966), math.rad(2.865)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.004, 0.102, -0.052) * CFrame.Angles(math.rad(-8.652), math.rad(-31.513), math.rad(7.219)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.143, -0.295, 0.119) * CFrame.Angles(math.rad(-35.466), math.rad(12.319), math.rad(-3.724)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.015, -0.16, -0.192) * CFrame.Angles(math.rad(-42.456), math.rad(22.059), math.rad(16.616)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.667), math.rad(-7.678), math.rad(-42.399)),
					},
				},
			},
		},
		[2.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.049, -0.005, -0.17) * CFrame.Angles(math.rad(1.948), math.rad(3.38), math.rad(26.986)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.049, 0.025, 0.173) * CFrame.Angles(math.rad(-2.005), math.rad(-26.986), math.rad(3.323)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.029, 0.107, -0.036) * CFrame.Angles(math.rad(-9.053), math.rad(-28.591), math.rad(6.818)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.126, -0.28, 0.113) * CFrame.Angles(math.rad(-34.263), math.rad(12.49), math.rad(-2.979)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.008, -0.16, -0.175) * CFrame.Angles(math.rad(-40.737), math.rad(21.142), math.rad(13.579)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.922), math.rad(-7.448), math.rad(-39.419)),
					},
				},
			},
		},
		[2.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.043, -0.003, -0.17) * CFrame.Angles(math.rad(1.776), math.rad(2.979), math.rad(24.236)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.017, 0.029, 0.189) * CFrame.Angles(math.rad(-2.063), math.rad(-24.236), math.rad(3.782)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.06, 0.111, -0.021) * CFrame.Angles(math.rad(-9.339), math.rad(-25.783), math.rad(6.417)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.111, -0.266, 0.106) * CFrame.Angles(math.rad(-33.117), math.rad(12.72), math.rad(-2.292)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.029, -0.161, -0.159) * CFrame.Angles(math.rad(-39.133), math.rad(20.225), math.rad(10.829)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.235), math.rad(-7.277), math.rad(-36.612)),
					},
				},
			},
		},
		[2.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.037, 0, -0.169) * CFrame.Angles(math.rad(1.604), math.rad(2.578), math.rad(21.715)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.012, 0.032, 0.204) * CFrame.Angles(math.rad(-2.177), math.rad(-21.658), math.rad(4.183)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.09, 0.115, -0.008) * CFrame.Angles(math.rad(-9.626), math.rad(-23.205), math.rad(6.073)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.095, -0.252, 0.1) * CFrame.Angles(math.rad(-31.971), math.rad(12.949), math.rad(-1.662)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.049, -0.161, -0.144) * CFrame.Angles(math.rad(-37.701), math.rad(19.251), math.rad(8.251)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.604), math.rad(-7.047), math.rad(-34.034)),
					},
				},
			},
		},
		[2.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.031, 0.002, -0.169) * CFrame.Angles(math.rad(1.432), math.rad(2.177), math.rad(19.309)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.04, 0.036, 0.217) * CFrame.Angles(math.rad(-2.235), math.rad(-19.309), math.rad(4.641)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.119, 0.118, 0.003) * CFrame.Angles(math.rad(-9.798), math.rad(-20.798), math.rad(5.73)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.081, -0.239, 0.095) * CFrame.Angles(math.rad(-30.94), math.rad(13.178), math.rad(-1.089)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.069, -0.161, -0.129) * CFrame.Angles(math.rad(-36.44), math.rad(18.335), math.rad(5.901)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.031), math.rad(-6.818), math.rad(-31.627)),
					},
				},
			},
		},
		[2.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.027, 0.005, -0.169) * CFrame.Angles(math.rad(1.261), math.rad(1.891), math.rad(17.131)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.066, 0.039, 0.229) * CFrame.Angles(math.rad(-2.349), math.rad(-17.131), math.rad(5.099)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.146, 0.121, 0.013) * CFrame.Angles(math.rad(-10.027), math.rad(-18.621), math.rad(5.386)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.068, -0.227, 0.09) * CFrame.Angles(math.rad(-29.966), math.rad(13.407), math.rad(-0.516)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.087, -0.162, -0.115) * CFrame.Angles(math.rad(-35.351), math.rad(17.475), math.rad(3.839)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.516), math.rad(-6.589), math.rad(-29.393)),
					},
				},
			},
		},
		[2.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.023, 0.007, -0.169) * CFrame.Angles(math.rad(1.089), math.rad(1.547), math.rad(15.126)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.09, 0.043, 0.24) * CFrame.Angles(math.rad(-2.521), math.rad(-15.126), math.rad(5.5)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.172, 0.123, 0.022) * CFrame.Angles(math.rad(-10.141), math.rad(-16.616), math.rad(5.042)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.055, -0.216, 0.085) * CFrame.Angles(math.rad(-29.106), math.rad(13.636), 0),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.104, -0.162, -0.102) * CFrame.Angles(math.rad(-34.377), math.rad(16.616), math.rad(1.891)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.057), math.rad(-6.36), math.rad(-27.387)),
					},
				},
			},
		},
		[2.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.019, 0.01, -0.168) * CFrame.Angles(math.rad(0.917), math.rad(1.318), math.rad(13.35)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.111, 0.046, 0.249) * CFrame.Angles(math.rad(-2.636), math.rad(-13.35), math.rad(5.901)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.196, 0.125, 0.029) * CFrame.Angles(math.rad(-10.256), math.rad(-14.782), math.rad(4.756)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.043, -0.205, 0.08) * CFrame.Angles(math.rad(-28.247), math.rad(13.808), math.rad(0.458)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.12, -0.163, -0.09) * CFrame.Angles(math.rad(-33.518), math.rad(15.814), math.rad(0.229)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.401), math.rad(-6.131), math.rad(-25.554)),
					},
				},
			},
		},
		[2.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.015, 0.012, -0.168) * CFrame.Angles(math.rad(0.802), math.rad(1.089), math.rad(11.746)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.13, 0.049, 0.257) * CFrame.Angles(math.rad(-2.807), math.rad(-11.746), math.rad(6.245)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.218, 0.127, 0.036) * CFrame.Angles(math.rad(-10.371), math.rad(-13.178), math.rad(4.469)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.033, -0.196, 0.076) * CFrame.Angles(math.rad(-27.502), math.rad(14.037), math.rad(0.917)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.134, -0.163, -0.079) * CFrame.Angles(math.rad(-32.773), math.rad(15.069), math.rad(-1.261)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.745), math.rad(-5.959), math.rad(-23.95)),
					},
				},
			},
		},
		[2.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.013, 0.014, -0.168) * CFrame.Angles(math.rad(0.63), math.rad(0.859), math.rad(10.313)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.147, 0.052, 0.264) * CFrame.Angles(math.rad(-2.922), math.rad(-10.313), math.rad(6.589)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.237, 0.129, 0.041) * CFrame.Angles(math.rad(-10.428), math.rad(-11.746), math.rad(4.183)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.023, -0.187, 0.073) * CFrame.Angles(math.rad(-26.872), math.rad(14.209), math.rad(1.261)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.147, -0.163, -0.069) * CFrame.Angles(math.rad(-32.086), math.rad(14.439), math.rad(-2.578)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.089), math.rad(-5.73), math.rad(-22.517)),
					},
				},
			},
		},
		[2.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.01, 0.015, -0.168) * CFrame.Angles(math.rad(0.516), math.rad(0.688), math.rad(9.053)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.162, 0.054, 0.27) * CFrame.Angles(math.rad(-3.037), math.rad(-9.053), math.rad(6.933)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.255, 0.13, 0.046) * CFrame.Angles(math.rad(-10.485), math.rad(-10.485), math.rad(3.896)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.014, -0.18, 0.069) * CFrame.Angles(math.rad(-26.241), math.rad(14.324), math.rad(1.604)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.159, -0.164, -0.06) * CFrame.Angles(math.rad(-31.57), math.rad(13.808), math.rad(-3.724)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.318), math.rad(-5.558), math.rad(-21.257)),
					},
				},
			},
		},
		[2.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.008, 0.017, -0.168) * CFrame.Angles(math.rad(0.401), math.rad(0.573), math.rad(8.021)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.174, 0.057, 0.275) * CFrame.Angles(math.rad(-3.209), math.rad(-8.021), math.rad(7.219)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.27, 0.13, 0.049) * CFrame.Angles(math.rad(-10.485), math.rad(-9.454), math.rad(3.667)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.007, -0.173, 0.067) * CFrame.Angles(math.rad(-25.726), math.rad(14.496), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.169, -0.164, -0.053) * CFrame.Angles(math.rad(-31.112), math.rad(13.35), math.rad(-4.698)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.604), math.rad(-5.443), math.rad(-20.225)),
					},
				},
			},
		},
		[2.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, 0.018, -0.168) * CFrame.Angles(math.rad(0.344), math.rad(0.458), math.rad(7.105)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.184, 0.059, 0.279) * CFrame.Angles(math.rad(-3.266), math.rad(-7.162), math.rad(7.448)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.283, 0.131, 0.052) * CFrame.Angles(math.rad(-10.542), math.rad(-8.537), math.rad(3.438)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.001, -0.168, 0.064) * CFrame.Angles(math.rad(-25.325), math.rad(14.61), math.rad(2.12)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.177, -0.164, -0.046) * CFrame.Angles(math.rad(-30.768), math.rad(12.892), math.rad(-5.5)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.776), math.rad(-5.271), math.rad(-19.309)),
					},
				},
			},
		},
		[2.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.005, 0.019, -0.168) * CFrame.Angles(math.rad(0.229), math.rad(0.344), math.rad(6.417)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.192, 0.06, 0.283) * CFrame.Angles(math.rad(-3.38), math.rad(-6.474), math.rad(7.62)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.293, 0.131, 0.055) * CFrame.Angles(math.rad(-10.542), math.rad(-7.85), math.rad(3.266)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, -0.163, 0.063) * CFrame.Angles(math.rad(-24.981), math.rad(14.668), math.rad(2.292)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.184, -0.164, -0.041) * CFrame.Angles(math.rad(-30.481), math.rad(12.548), math.rad(-6.073)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.891), math.rad(-5.157), math.rad(-18.621)),
					},
				},
			},
		},
		[2.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.004, 0.02, -0.168) * CFrame.Angles(math.rad(0.172), math.rad(0.286), math.rad(5.959)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.198, 0.061, 0.285) * CFrame.Angles(math.rad(-3.438), math.rad(-5.959), math.rad(7.735)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.3, 0.132, 0.057) * CFrame.Angles(math.rad(-10.542), math.rad(-7.391), math.rad(3.151)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.16, 0.061) * CFrame.Angles(math.rad(-24.752), math.rad(14.782), math.rad(2.406)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.188, -0.164, -0.038) * CFrame.Angles(math.rad(-30.252), math.rad(12.319), math.rad(-6.532)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-5.099), math.rad(-18.163)),
					},
				},
			},
		},
		[2.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.004, 0.021, -0.168) * CFrame.Angles(math.rad(0.172), math.rad(0.229), math.rad(5.615)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.202, 0.062, 0.286) * CFrame.Angles(math.rad(-3.495), math.rad(-5.672), math.rad(7.85)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.305, 0.132, 0.058) * CFrame.Angles(math.rad(-10.542), math.rad(-7.047), math.rad(3.094)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.158, 0.06) * CFrame.Angles(math.rad(-24.58), math.rad(14.782), math.rad(2.521)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.191, -0.164, -0.035) * CFrame.Angles(math.rad(-30.138), math.rad(12.204), math.rad(-6.818)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.063), math.rad(-5.042), math.rad(-17.819)),
					},
				},
			},
		},
		[2.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.003, 0.021, -0.168) * CFrame.Angles(math.rad(0.172), math.rad(0.229), math.rad(5.558)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.203, 0.062, 0.287) * CFrame.Angles(math.rad(-3.495), math.rad(-5.558), math.rad(7.85)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.306, 0.132, 0.058) * CFrame.Angles(math.rad(-10.542), math.rad(-6.99), math.rad(3.037)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.01, -0.158, 0.06) * CFrame.Angles(math.rad(-24.58), math.rad(14.84), math.rad(2.521)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.192, -0.164, -0.035) * CFrame.Angles(math.rad(-30.08), math.rad(12.147), math.rad(-6.875)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.12), math.rad(-5.042), math.rad(-17.762)),
					},
				},
			},
		},
		[2.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.003, 0.021, -0.168) * CFrame.Angles(math.rad(0.172), math.rad(0.229), math.rad(5.558)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.203, 0.062, 0.287) * CFrame.Angles(math.rad(-3.495), math.rad(-5.558), math.rad(7.85)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.306, 0.132, 0.058) * CFrame.Angles(math.rad(-10.542), math.rad(-6.99), math.rad(3.037)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.01, -0.158, 0.06) * CFrame.Angles(math.rad(-24.58), math.rad(14.84), math.rad(2.521)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.192, -0.164, -0.035) * CFrame.Angles(math.rad(-30.08), math.rad(12.147), math.rad(-6.875)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.12), math.rad(-5.042), math.rad(-17.762)),
					},
				},
			},
		},
	}
}"
Fy1MSdGn,Vergil JCE CFrames,Smeagle_Deagle,Lua,Tuesday 25th of July 2023 06:48:26 AM CDT,"return {
	Properties = {
		Looping = false,
		Priority = Enum.AnimationPriority.Action
	},
	Keyframes = {
		[0] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.Angles(0, 0, math.rad(-7.162)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.089, 0.042, -0.013) * CFrame.Angles(math.rad(-5.042), math.rad(7.047), math.rad(-1.547)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.035, 0.042, -0.006) * CFrame.Angles(math.rad(-4.698), math.rad(7.277), math.rad(-2.292)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, 0.001, -0.006) * CFrame.Angles(math.rad(-12.032), math.rad(16.444), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.001, 0.002, -0.005) * CFrame.Angles(math.rad(-8.938), math.rad(8.594), math.rad(1.089)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.229), math.rad(-0.057), math.rad(7.735)),
					},
				},
			},
		},
		[0.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.Angles(0, 0, math.rad(-7.162)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.089, 0.042, -0.013) * CFrame.Angles(math.rad(-5.042), math.rad(7.047), math.rad(-1.547)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.035, 0.042, -0.006) * CFrame.Angles(math.rad(-4.698), math.rad(7.277), math.rad(-2.292)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, 0.001, -0.006) * CFrame.Angles(math.rad(-12.032), math.rad(16.444), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.001, 0.002, -0.005) * CFrame.Angles(math.rad(-8.938), math.rad(8.594), math.rad(1.089)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.229), math.rad(-0.057), math.rad(7.735)),
					},
				},
			},
		},
		[0.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, -0.001, 0) * CFrame.Angles(math.rad(0.057), 0, math.rad(-7.105)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.087, 0.044, -0.013) * CFrame.Angles(math.rad(-5.099), math.rad(6.99), math.rad(-1.547)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.035, 0.042, -0.006) * CFrame.Angles(math.rad(-4.698), math.rad(7.162), math.rad(-2.235)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, 0.001, -0.006) * CFrame.Angles(math.rad(-12.089), math.rad(16.444), math.rad(4.87)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0, 0.001, -0.006) * CFrame.Angles(math.rad(-9.053), math.rad(8.652), math.rad(1.261)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.286), math.rad(-0.115), math.rad(7.678)),
					},
				},
			},
		},
		[0.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, -0.003, -0.002) * CFrame.Angles(math.rad(0.229), math.rad(0.057), math.rad(-6.875)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.081, 0.048, -0.011) * CFrame.Angles(math.rad(-5.214), math.rad(6.818), math.rad(-1.49)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.033, 0.043, -0.006) * CFrame.Angles(math.rad(-4.813), math.rad(6.933), math.rad(-2.005)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, -0.001, -0.007) * CFrame.Angles(math.rad(-12.147), math.rad(16.444), math.rad(4.584)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.006, 0.001, -0.008) * CFrame.Angles(math.rad(-9.397), math.rad(8.881), math.rad(1.662)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.458), math.rad(-0.115), math.rad(7.448)),
					},
				},
			},
		},
		[0.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, -0.007, -0.004) * CFrame.Angles(math.rad(0.516), math.rad(0.115), math.rad(-6.532)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.072, 0.055, -0.009) * CFrame.Angles(math.rad(-5.386), math.rad(6.474), math.rad(-1.375)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.031, 0.044, -0.006) * CFrame.Angles(math.rad(-5.042), math.rad(6.589), math.rad(-1.604)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.003, -0.003, -0.007) * CFrame.Angles(math.rad(-12.261), math.rad(16.444), math.rad(4.125)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.016, 0, -0.011) * CFrame.Angles(math.rad(-9.969), math.rad(9.225), math.rad(2.349)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.745), math.rad(-0.229), math.rad(7.105)),
					},
				},
			},
		},
		[0.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.002, -0.013, -0.007) * CFrame.Angles(math.rad(0.917), math.rad(0.172), math.rad(-6.073)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.06, 0.065, -0.006) * CFrame.Angles(math.rad(-5.615), math.rad(6.016), math.rad(-1.261)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.027, 0.046, -0.006) * CFrame.Angles(math.rad(-5.271), math.rad(6.073), math.rad(-1.146)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.002, -0.006, -0.009) * CFrame.Angles(math.rad(-12.433), math.rad(16.444), math.rad(3.495)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.028, -0.002, -0.015) * CFrame.Angles(math.rad(-10.772), math.rad(9.683), math.rad(3.266)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.089), math.rad(-0.344), math.rad(6.646)),
					},
				},
			},
		},
		[0.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.004, -0.02, -0.01) * CFrame.Angles(math.rad(1.375), math.rad(0.229), math.rad(-5.5)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.044, 0.077, -0.003) * CFrame.Angles(math.rad(-5.901), math.rad(5.5), math.rad(-1.146)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.023, 0.048, -0.005) * CFrame.Angles(math.rad(-5.615), math.rad(5.443), math.rad(-0.516)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.001, -0.01, -0.01) * CFrame.Angles(math.rad(-12.662), math.rad(16.501), math.rad(2.693)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.044, -0.003, -0.021) * CFrame.Angles(math.rad(-11.803), math.rad(10.313), math.rad(4.469)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.604), math.rad(-0.458), math.rad(6.016)),
					},
				},
			},
		},
		[0.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.005, -0.028, -0.015) * CFrame.Angles(math.rad(1.948), math.rad(0.401), math.rad(-4.756)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.026, 0.091, 0.002) * CFrame.Angles(math.rad(-6.245), math.rad(4.813), math.rad(-1.031)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.017, 0.05, -0.005) * CFrame.Angles(math.rad(-6.016), math.rad(4.641), math.rad(0.229)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.001, -0.014, -0.012) * CFrame.Angles(math.rad(-12.892), math.rad(16.501), math.rad(1.719)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.064, -0.005, -0.028) * CFrame.Angles(math.rad(-13.121), math.rad(11.001), math.rad(6.016)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.177), math.rad(-0.63), math.rad(5.271)),
					},
				},
			},
		},
		[0.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.008, -0.038, -0.02) * CFrame.Angles(math.rad(2.636), math.rad(0.516), math.rad(-3.896)),
					[""Left Leg""] = {
						CFrame = CFrame.new(0.004, 0.108, 0.006) * CFrame.Angles(math.rad(-6.589), math.rad(4.068), math.rad(-0.917)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.011, 0.053, -0.005) * CFrame.Angles(math.rad(-6.417), math.rad(3.724), math.rad(1.031)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.003, -0.019, -0.014) * CFrame.Angles(math.rad(-13.235), math.rad(16.501), math.rad(0.63)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.086, -0.008, -0.035) * CFrame.Angles(math.rad(-14.725), math.rad(11.803), math.rad(7.85)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.865), math.rad(-0.745), math.rad(4.412)),
					},
				},
			},
		},
		[0.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.01, -0.049, -0.026) * CFrame.Angles(math.rad(3.438), math.rad(0.745), math.rad(-2.922)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.02, 0.126, 0.012) * CFrame.Angles(math.rad(-7.047), math.rad(3.209), math.rad(-0.859)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.003, 0.056, -0.005) * CFrame.Angles(math.rad(-6.875), math.rad(2.636), math.rad(1.948)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.005, -0.025, -0.016) * CFrame.Angles(math.rad(-13.522), math.rad(16.501), math.rad(-0.573)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.11, -0.011, -0.044) * CFrame.Angles(math.rad(-16.616), math.rad(12.662), math.rad(10.027)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.61), math.rad(-0.974), math.rad(3.438)),
					},
				},
			},
		},
		[0.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.014, -0.061, -0.033) * CFrame.Angles(math.rad(4.297), math.rad(0.917), math.rad(-1.891)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.046, 0.147, 0.017) * CFrame.Angles(math.rad(-7.563), math.rad(2.235), math.rad(-0.745)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.005, 0.059, -0.005) * CFrame.Angles(math.rad(-7.391), math.rad(1.375), math.rad(2.922)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.007, -0.031, -0.019) * CFrame.Angles(math.rad(-13.923), math.rad(16.558), math.rad(-1.948)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.137, -0.014, -0.053) * CFrame.Angles(math.rad(-18.908), math.rad(13.579), math.rad(12.605)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.469), math.rad(-1.146), math.rad(2.349)),
					},
				},
			},
		},
		[0.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.017, -0.075, -0.041) * CFrame.Angles(math.rad(5.214), math.rad(1.203), math.rad(-0.688)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.075, 0.169, 0.023) * CFrame.Angles(math.rad(-8.079), math.rad(1.203), math.rad(-0.745)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.015, 0.062, -0.005) * CFrame.Angles(math.rad(-7.907), math.rad(0.057), math.rad(3.953)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.009, -0.038, -0.021) * CFrame.Angles(math.rad(-14.324), math.rad(16.616), math.rad(-3.495)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.167, -0.017, -0.064) * CFrame.Angles(math.rad(-21.486), math.rad(14.496), math.rad(15.584)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.443), math.rad(-1.318), math.rad(1.146)),
					},
				},
			},
		},
		[0.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.022, -0.089, -0.049) * CFrame.Angles(math.rad(6.245), math.rad(1.547), math.rad(0.573)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.106, 0.192, 0.03) * CFrame.Angles(math.rad(-8.652), math.rad(0.057), math.rad(-0.745)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.025, 0.065, -0.006) * CFrame.Angles(math.rad(-8.48), math.rad(-1.49), math.rad(5.042)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.012, -0.046, -0.024) * CFrame.Angles(math.rad(-14.725), math.rad(16.673), math.rad(-5.099)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.199, -0.021, -0.075) * CFrame.Angles(math.rad(-24.523), math.rad(15.355), math.rad(19.022)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.474), math.rad(-1.49), math.rad(-0.229)),
					},
				},
			},
		},
		[0.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.027, -0.105, -0.059) * CFrame.Angles(math.rad(7.334), math.rad(1.891), math.rad(1.948)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.139, 0.218, 0.036) * CFrame.Angles(math.rad(-9.225), math.rad(-1.146), math.rad(-0.802)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.037, 0.068, -0.007) * CFrame.Angles(math.rad(-8.995), math.rad(-3.151), math.rad(6.131)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.014, -0.054, -0.027) * CFrame.Angles(math.rad(-15.183), math.rad(16.73), math.rad(-6.818)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.233, -0.026, -0.086) * CFrame.Angles(math.rad(-27.96), math.rad(16.1), math.rad(22.918)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.62), math.rad(-1.662), math.rad(-1.662)),
					},
				},
			},
		},
		[0.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.033, -0.121, -0.07) * CFrame.Angles(math.rad(8.48), math.rad(2.292), math.rad(3.438)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.174, 0.244, 0.042) * CFrame.Angles(math.rad(-9.912), math.rad(-2.406), math.rad(-0.917)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.05, 0.071, -0.009) * CFrame.Angles(math.rad(-9.568), math.rad(-4.927), math.rad(7.277)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.017, -0.062, -0.031) * CFrame.Angles(math.rad(-15.699), math.rad(16.845), math.rad(-8.652)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.268, -0.031, -0.099) * CFrame.Angles(math.rad(-31.914), math.rad(16.673), math.rad(27.33)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.824), math.rad(-1.776), math.rad(-3.209)),
					},
				},
			},
		},
		[0.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.04, -0.138, -0.081) * CFrame.Angles(math.rad(9.683), math.rad(2.807), math.rad(5.042)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.211, 0.272, 0.049) * CFrame.Angles(math.rad(-10.6), math.rad(-3.782), math.rad(-1.146)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.064, 0.073, -0.012) * CFrame.Angles(math.rad(-10.141), math.rad(-6.875), math.rad(8.422)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.02, -0.071, -0.034) * CFrame.Angles(math.rad(-16.215), math.rad(16.96), math.rad(-10.6)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.305, -0.036, -0.111) * CFrame.Angles(math.rad(-36.326), math.rad(16.96), math.rad(32.258)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.141), math.rad(-1.891), math.rad(-4.87)),
					},
				},
			},
		},
		[0.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.048, -0.156, -0.094) * CFrame.Angles(math.rad(11.001), math.rad(3.323), math.rad(6.646)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.249, 0.3, 0.055) * CFrame.Angles(math.rad(-11.345), math.rad(-5.157), math.rad(-1.49)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.078, 0.076, -0.015) * CFrame.Angles(math.rad(-10.714), math.rad(-8.938), math.rad(9.568)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.023, -0.08, -0.037) * CFrame.Angles(math.rad(-16.73), math.rad(17.131), math.rad(-12.605)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.344, -0.042, -0.124) * CFrame.Angles(math.rad(-41.138), math.rad(16.902), math.rad(37.701)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.516), math.rad(-2.005), math.rad(-6.646)),
					},
				},
			},
		},
		[0.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.057, -0.175, -0.107) * CFrame.Angles(math.rad(12.319), math.rad(3.953), math.rad(8.422)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.288, 0.33, 0.061) * CFrame.Angles(math.rad(-12.089), math.rad(-6.646), math.rad(-1.891)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.094, 0.078, -0.019) * CFrame.Angles(math.rad(-11.23), math.rad(-11.173), math.rad(10.714)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.026, -0.09, -0.041) * CFrame.Angles(math.rad(-17.246), math.rad(17.246), math.rad(-14.668)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.385, -0.049, -0.138) * CFrame.Angles(math.rad(-46.352), math.rad(16.272), math.rad(43.602)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.949), math.rad(-2.063), math.rad(-8.537)),
					},
				},
			},
		},
		[0.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, -0.194, -0.122) * CFrame.Angles(math.rad(13.636), math.rad(4.641), math.rad(10.199)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.329, 0.36, 0.066) * CFrame.Angles(math.rad(-12.949), math.rad(-8.136), math.rad(-2.406)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.11, 0.079, -0.024) * CFrame.Angles(math.rad(-11.746), math.rad(-13.522), math.rad(11.803)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.03, -0.1, -0.045) * CFrame.Angles(math.rad(-17.819), math.rad(17.475), math.rad(-16.845)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.426, -0.056, -0.151) * CFrame.Angles(math.rad(-51.91), math.rad(15.069), math.rad(49.847)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.496), math.rad(-2.063), math.rad(-10.485)),
					},
				},
			},
		},
		[0.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.077, -0.213, -0.137) * CFrame.Angles(math.rad(15.069), math.rad(5.386), math.rad(12.032)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.37, 0.392, 0.071) * CFrame.Angles(math.rad(-13.808), math.rad(-9.683), math.rad(-2.979)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.128, 0.08, -0.031) * CFrame.Angles(math.rad(-12.261), math.rad(-15.986), math.rad(12.892)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.033, -0.11, -0.048) * CFrame.Angles(math.rad(-18.335), math.rad(17.704), math.rad(-19.022)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.469, -0.063, -0.164) * CFrame.Angles(math.rad(-57.582), math.rad(13.178), math.rad(56.264)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-16.1), math.rad(-2.005), math.rad(-12.49)),
					},
				},
			},
		},
		[0.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.089, -0.232, -0.154) * CFrame.Angles(math.rad(16.501), math.rad(6.245), math.rad(13.98)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.412, 0.423, 0.076) * CFrame.Angles(math.rad(-14.725), math.rad(-11.287), math.rad(-3.724)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.145, 0.081, -0.038) * CFrame.Angles(math.rad(-12.777), math.rad(-18.621), math.rad(13.923)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.036, -0.12, -0.052) * CFrame.Angles(math.rad(-18.908), math.rad(17.934), math.rad(-21.257)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.514, -0.071, -0.178) * CFrame.Angles(math.rad(-63.197), math.rad(10.542), math.rad(62.796)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-17.704), math.rad(-1.833), math.rad(-14.61)),
					},
				},
			},
		},
		[0.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.103, -0.251, -0.172) * CFrame.Angles(math.rad(17.934), math.rad(7.162), math.rad(15.928)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.455, 0.456, 0.08) * CFrame.Angles(math.rad(-15.756), math.rad(-12.892), math.rad(-4.641)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.164, 0.081, -0.047) * CFrame.Angles(math.rad(-13.235), math.rad(-21.314), math.rad(14.897)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.04, -0.131, -0.056) * CFrame.Angles(math.rad(-19.481), math.rad(18.163), math.rad(-23.549)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.559, -0.079, -0.191) * CFrame.Angles(math.rad(-68.698), math.rad(7.162), math.rad(69.213)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-19.366), math.rad(-1.662), math.rad(-16.845)),
					},
				},
			},
		},
		[0.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.117, -0.27, -0.191) * CFrame.Angles(math.rad(19.366), math.rad(8.136), math.rad(17.934)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.498, 0.488, 0.084) * CFrame.Angles(math.rad(-16.788), math.rad(-14.553), math.rad(-5.615)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.182, 0.08, -0.057) * CFrame.Angles(math.rad(-13.636), math.rad(-24.122), math.rad(15.871)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.043, -0.142, -0.059) * CFrame.Angles(math.rad(-19.996), math.rad(18.449), math.rad(-25.84)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.606, -0.087, -0.203) * CFrame.Angles(math.rad(-73.854), math.rad(3.094), math.rad(75.344)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-21.085), math.rad(-1.432), math.rad(-19.079)),
					},
				},
			},
		},
		[0.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.132, -0.288, -0.211) * CFrame.Angles(math.rad(20.798), math.rad(9.225), math.rad(19.996)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.541, 0.521, 0.087) * CFrame.Angles(math.rad(-17.934), math.rad(-16.215), math.rad(-6.761)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.201, 0.078, -0.068) * CFrame.Angles(math.rad(-14.037), math.rad(-27.044), math.rad(16.73)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.046, -0.152, -0.063) * CFrame.Angles(math.rad(-20.569), math.rad(18.793), math.rad(-28.19)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.654, -0.095, -0.216) * CFrame.Angles(math.rad(-78.553), math.rad(-1.49), math.rad(81.188)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-22.804), math.rad(-1.089), math.rad(-21.371)),
					},
				},
			},
		},
		[0.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.148, -0.306, -0.231) * CFrame.Angles(math.rad(22.231), math.rad(10.371), math.rad(22.059)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.584, 0.555, 0.089) * CFrame.Angles(math.rad(-19.137), math.rad(-17.934), math.rad(-8.079)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.22, 0.076, -0.081) * CFrame.Angles(math.rad(-14.439), math.rad(-30.023), math.rad(17.533)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.049, -0.163, -0.067) * CFrame.Angles(math.rad(-21.085), math.rad(19.137), math.rad(-30.481)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.702, -0.102, -0.229) * CFrame.Angles(math.rad(-82.792), math.rad(-6.474), math.rad(86.574)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-24.58), math.rad(-0.688), math.rad(-23.72)),
					},
				},
			},
		},
		[0.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.165, -0.323, -0.253) * CFrame.Angles(math.rad(23.606), math.rad(11.574), math.rad(24.122)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.626, 0.588, 0.09) * CFrame.Angles(math.rad(-20.397), math.rad(-19.595), math.rad(-9.511)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.238, 0.073, -0.095) * CFrame.Angles(math.rad(-14.782), math.rad(-33.06), math.rad(18.277)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.053, -0.174, -0.07) * CFrame.Angles(math.rad(-21.601), math.rad(19.481), math.rad(-32.773)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.751, -0.109, -0.241) * CFrame.Angles(math.rad(-86.517), math.rad(-11.746), math.rad(91.559)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-26.356), math.rad(-0.229), math.rad(-26.07)),
					},
				},
			},
		},
		[0.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.183, -0.339, -0.275) * CFrame.Angles(math.rad(24.981), math.rad(12.892), math.rad(26.184)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.669, 0.621, 0.091) * CFrame.Angles(math.rad(-21.772), math.rad(-21.257), math.rad(-11.058)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.256, 0.07, -0.11) * CFrame.Angles(math.rad(-15.069), math.rad(-36.154), math.rad(18.965)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.056, -0.185, -0.074) * CFrame.Angles(math.rad(-22.059), math.rad(19.824), math.rad(-35.008)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.801, -0.116, -0.254) * CFrame.Angles(math.rad(-89.725), math.rad(-17.074), math.rad(96.142)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.075), math.rad(0.344), math.rad(-28.419)),
					},
				},
			},
		},
		[0.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.202, -0.354, -0.298) * CFrame.Angles(math.rad(26.356), math.rad(14.209), math.rad(28.304)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.71, 0.654, 0.091) * CFrame.Angles(math.rad(-23.262), math.rad(-22.861), math.rad(-12.834)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.273, 0.065, -0.127) * CFrame.Angles(math.rad(-15.413), math.rad(-39.305), math.rad(19.538)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.059, -0.195, -0.077) * CFrame.Angles(math.rad(-22.517), math.rad(20.168), math.rad(-37.242)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.851, -0.122, -0.266) * CFrame.Angles(math.rad(-92.475), math.rad(-22.345), math.rad(100.382)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.794), math.rad(0.974), math.rad(-30.825)),
					},
				},
			},
		},
		[0.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.221, -0.367, -0.322) * CFrame.Angles(math.rad(27.617), math.rad(15.584), math.rad(30.367)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.751, 0.687, 0.089) * CFrame.Angles(math.rad(-24.809), math.rad(-24.465), math.rad(-14.725)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.29, 0.061, -0.145) * CFrame.Angles(math.rad(-15.642), math.rad(-42.456), math.rad(20.054)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.062, -0.205, -0.081) * CFrame.Angles(math.rad(-22.976), math.rad(20.569), math.rad(-39.362)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.9, -0.128, -0.279) * CFrame.Angles(math.rad(-94.71), math.rad(-27.445), math.rad(104.221)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.513), math.rad(1.719), math.rad(-33.232)),
					},
				},
			},
		},
		[0.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.241, -0.38, -0.346) * CFrame.Angles(math.rad(28.877), math.rad(17.017), math.rad(32.429)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.79, 0.719, 0.087) * CFrame.Angles(math.rad(-26.471), math.rad(-26.012), math.rad(-16.788)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.306, 0.055, -0.164) * CFrame.Angles(math.rad(-15.928), math.rad(-45.665), math.rad(20.512)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.065, -0.216, -0.084) * CFrame.Angles(math.rad(-23.377), math.rad(20.913), math.rad(-41.482)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.949, -0.133, -0.292) * CFrame.Angles(math.rad(-96.543), math.rad(-32.315), math.rad(107.773)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.174), math.rad(2.464), math.rad(-35.581)),
					},
				},
			},
		},
		[0.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.261, -0.39, -0.37) * CFrame.Angles(math.rad(30.023), math.rad(18.507), math.rad(34.492)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.828, 0.751, 0.084) * CFrame.Angles(math.rad(-28.247), math.rad(-27.502), math.rad(-18.965)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.32, 0.049, -0.183) * CFrame.Angles(math.rad(-16.157), math.rad(-48.816), math.rad(20.856)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.225, -0.087) * CFrame.Angles(math.rad(-23.778), math.rad(21.314), math.rad(-43.545)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.997, -0.137, -0.305) * CFrame.Angles(math.rad(-98.033), math.rad(-36.841), math.rad(111.039)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.836), math.rad(3.266), math.rad(-37.93)),
					},
				},
			},
		},
		[0.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.281, -0.4, -0.394) * CFrame.Angles(math.rad(31.169), math.rad(19.996), math.rad(36.497)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.864, 0.783, 0.081) * CFrame.Angles(math.rad(-30.138), math.rad(-28.877), math.rad(-21.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.333, 0.043, -0.204) * CFrame.Angles(math.rad(-16.329), math.rad(-51.91), math.rad(21.142)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.07, -0.235, -0.09) * CFrame.Angles(math.rad(-24.122), math.rad(21.715), math.rad(-45.436)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.044, -0.141, -0.318) * CFrame.Angles(math.rad(-99.122), math.rad(-41.024), math.rad(114.076)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-36.383), math.rad(4.183), math.rad(-40.222)),
					},
				},
			},
		},
		[0.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.302, -0.408, -0.419) * CFrame.Angles(math.rad(32.2), math.rad(21.543), math.rad(38.503)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.898, 0.813, 0.076) * CFrame.Angles(math.rad(-32.143), math.rad(-30.195), math.rad(-23.892)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.346, 0.037, -0.225) * CFrame.Angles(math.rad(-16.501), math.rad(-55.004), math.rad(21.314)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.072, -0.244, -0.093) * CFrame.Angles(math.rad(-24.465), math.rad(22.059), math.rad(-47.326)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.09, -0.144, -0.332) * CFrame.Angles(math.rad(-99.924), math.rad(-44.863), math.rad(116.941)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-37.873), math.rad(5.099), math.rad(-42.456)),
					},
				},
			},
		},
		[0.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.322, -0.414, -0.443) * CFrame.Angles(math.rad(33.174), math.rad(23.033), math.rad(40.451)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.93, 0.843, 0.071) * CFrame.Angles(math.rad(-34.206), math.rad(-31.398), math.rad(-26.528)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.356, 0.03, -0.246) * CFrame.Angles(math.rad(-16.73), math.rad(-58.041), math.rad(21.429)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.075, -0.253, -0.096) * CFrame.Angles(math.rad(-24.752), math.rad(22.403), math.rad(-49.045)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.135, -0.148, -0.345) * CFrame.Angles(math.rad(-100.497), math.rad(-48.3), math.rad(119.576)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-39.305), math.rad(6.073), math.rad(-44.691)),
					},
				},
			},
		},
		[0.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.342, -0.419, -0.467) * CFrame.Angles(math.rad(34.034), math.rad(24.58), math.rad(42.399)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.96, 0.871, 0.065) * CFrame.Angles(math.rad(-36.326), math.rad(-32.487), math.rad(-29.335)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.366, 0.023, -0.267) * CFrame.Angles(math.rad(-16.845), math.rad(-61.02), math.rad(21.486)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.077, -0.261, -0.098) * CFrame.Angles(math.rad(-24.981), math.rad(22.746), math.rad(-50.707)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.178, -0.15, -0.358) * CFrame.Angles(math.rad(-100.783), math.rad(-51.394), math.rad(122.097)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-40.68), math.rad(7.047), math.rad(-46.868)),
					},
				},
			},
		},
		[0.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.362, -0.422, -0.49) * CFrame.Angles(math.rad(34.836), math.rad(26.127), math.rad(44.29)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.988, 0.898, 0.058) * CFrame.Angles(math.rad(-38.503), math.rad(-33.403), math.rad(-32.258)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.374, 0.016, -0.289) * CFrame.Angles(math.rad(-17.017), math.rad(-63.942), math.rad(21.486)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.079, -0.268, -0.101) * CFrame.Angles(math.rad(-25.267), math.rad(23.09), math.rad(-52.254)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.218, -0.153, -0.371) * CFrame.Angles(math.rad(-100.898), math.rad(-54.087), math.rad(124.446)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-41.998), math.rad(8.079), math.rad(-48.931)),
					},
				},
			},
		},
		[0.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.381, -0.424, -0.513) * CFrame.Angles(math.rad(35.581), math.rad(27.617), math.rad(46.123)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.013, 0.924, 0.051) * CFrame.Angles(math.rad(-40.795), math.rad(-34.206), math.rad(-35.237)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.381, 0.009, -0.31) * CFrame.Angles(math.rad(-17.189), math.rad(-66.75), math.rad(21.371)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.081, -0.275, -0.103) * CFrame.Angles(math.rad(-25.439), math.rad(23.377), math.rad(-53.629)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.257, -0.155, -0.384) * CFrame.Angles(math.rad(-100.841), math.rad(-56.494), math.rad(126.624)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-43.201), math.rad(9.11), math.rad(-50.993)),
					},
				},
			},
		},
		[0.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.4, -0.425, -0.535) * CFrame.Angles(math.rad(36.211), math.rad(29.049), math.rad(47.957)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.035, 0.948, 0.044) * CFrame.Angles(math.rad(-43.029), math.rad(-34.836), math.rad(-38.331)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.386, 0.002, -0.331) * CFrame.Angles(math.rad(-17.303), math.rad(-69.442), math.rad(21.199)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.082, -0.282, -0.105) * CFrame.Angles(math.rad(-25.611), math.rad(23.663), math.rad(-54.889)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.294, -0.157, -0.396) * CFrame.Angles(math.rad(-100.611), math.rad(-58.556), math.rad(128.629)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-44.29), math.rad(10.141), math.rad(-52.941)),
					},
				},
			},
		},
		[0.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.418, -0.424, -0.557) * CFrame.Angles(math.rad(36.784), math.rad(30.481), math.rad(49.675)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.054, 0.971, 0.036) * CFrame.Angles(math.rad(-45.321), math.rad(-35.351), math.rad(-41.482)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.391, -0.005, -0.351) * CFrame.Angles(math.rad(-17.418), math.rad(-72.078), math.rad(20.97)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.084, -0.288, -0.106) * CFrame.Angles(math.rad(-25.783), math.rad(23.892), math.rad(-55.978)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.328, -0.159, -0.409) * CFrame.Angles(math.rad(-100.325), math.rad(-60.332), math.rad(130.52)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-45.378), math.rad(11.173), math.rad(-54.832)),
					},
				},
			},
		},
		[0.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.435, -0.423, -0.577) * CFrame.Angles(math.rad(37.242), math.rad(31.914), math.rad(51.452)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.07, 0.991, 0.027) * CFrame.Angles(math.rad(-47.613), math.rad(-35.753), math.rad(-44.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.395, -0.011, -0.371) * CFrame.Angles(math.rad(-17.475), math.rad(-74.542), math.rad(20.684)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.085, -0.292, -0.108) * CFrame.Angles(math.rad(-25.898), math.rad(24.122), math.rad(-56.952)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.359, -0.16, -0.42) * CFrame.Angles(math.rad(-99.981), math.rad(-61.822), math.rad(132.181)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-46.295), math.rad(12.147), math.rad(-56.666)),
					},
				},
			},
		},
		[0.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.451, -0.42, -0.596) * CFrame.Angles(math.rad(37.643), math.rad(33.232), math.rad(53.113)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.084, 1.01, 0.019) * CFrame.Angles(math.rad(-49.79), math.rad(-35.982), math.rad(-47.842)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.397, -0.018, -0.39) * CFrame.Angles(math.rad(-17.533), math.rad(-76.891), math.rad(20.455)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.086, -0.297, -0.109) * CFrame.Angles(math.rad(-26.012), math.rad(24.293), math.rad(-57.754)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.388, -0.161, -0.431) * CFrame.Angles(math.rad(-99.637), math.rad(-63.025), math.rad(133.614)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-47.154), math.rad(13.121), math.rad(-58.384)),
					},
				},
			},
		},
		[0.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.466, -0.417, -0.614) * CFrame.Angles(math.rad(37.987), math.rad(34.549), math.rad(54.717)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.094, 1.026, 0.01) * CFrame.Angles(math.rad(-51.967), math.rad(-36.039), math.rad(-50.993)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.399, -0.024, -0.408) * CFrame.Angles(math.rad(-17.475), math.rad(-79.125), math.rad(20.168)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.087, -0.3, -0.11) * CFrame.Angles(math.rad(-26.127), math.rad(24.408), math.rad(-58.442)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.414, -0.162, -0.442) * CFrame.Angles(math.rad(-99.294), math.rad(-63.942), math.rad(134.76)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-47.957), math.rad(14.095), math.rad(-60.103)),
					},
				},
			},
		},
		[0.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.481, -0.413, -0.631) * CFrame.Angles(math.rad(38.216), math.rad(35.753), math.rad(56.322)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.101, 1.04, 0.001) * CFrame.Angles(math.rad(-54.03), math.rad(-36.039), math.rad(-54.145)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.401, -0.029, -0.425) * CFrame.Angles(math.rad(-17.246), math.rad(-81.245), math.rad(19.996)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.087, -0.302, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.523), math.rad(-58.9)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.437, -0.163, -0.452) * CFrame.Angles(math.rad(-99.064), math.rad(-64.572), math.rad(135.676)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-48.701), math.rad(15.011), math.rad(-61.708)),
					},
				},
			},
		},
		[0.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.494, -0.408, -0.646) * CFrame.Angles(math.rad(38.331), math.rad(36.898), math.rad(57.869)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.105, 1.052, -0.009) * CFrame.Angles(math.rad(-56.035), math.rad(-35.867), math.rad(-57.238)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.402, -0.035, -0.441) * CFrame.Angles(math.rad(-16.673), math.rad(-83.193), math.rad(20.168)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.58), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.456, -0.163, -0.461) * CFrame.Angles(math.rad(-98.95), math.rad(-64.973), math.rad(136.249)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-49.274), math.rad(15.871), math.rad(-63.197)),
					},
				},
			},
		},
		[0.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.506, -0.403, -0.66) * CFrame.Angles(math.rad(38.445), math.rad(37.987), math.rad(59.358)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.105, 1.061, -0.018) * CFrame.Angles(math.rad(-57.869), math.rad(-35.638), math.rad(-60.275)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.402, -0.04, -0.456) * CFrame.Angles(math.rad(-15.413), math.rad(-85.027), math.rad(20.913)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.241), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.472, -0.163, -0.469) * CFrame.Angles(math.rad(-98.893), math.rad(-65.145), math.rad(136.479)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-49.847), math.rad(16.673), math.rad(-64.63)),
					},
				},
			},
		},
		[0.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.518, -0.397, -0.673) * CFrame.Angles(math.rad(38.445), math.rad(39.018), math.rad(60.791)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.104, 1.068, -0.028) * CFrame.Angles(math.rad(-59.588), math.rad(-35.351), math.rad(-63.197)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.403, -0.045, -0.47) * CFrame.Angles(math.rad(-12.892), math.rad(-86.746), math.rad(22.861)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.241), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.486, -0.163, -0.477) * CFrame.Angles(math.rad(-98.95), math.rad(-65.145), math.rad(136.536)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.306), math.rad(17.418), math.rad(-66.005)),
					},
				},
			},
		},
		[0.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.528, -0.391, -0.684) * CFrame.Angles(math.rad(38.331), math.rad(39.935), math.rad(62.166)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.103, 1.075, -0.036) * CFrame.Angles(math.rad(-61.192), math.rad(-35.008), math.rad(-65.89)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.402, -0.049, -0.483) * CFrame.Angles(math.rad(-7.334), math.rad(-88.293), math.rad(27.96)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.241), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.499, -0.163, -0.484) * CFrame.Angles(math.rad(-99.007), math.rad(-65.088), math.rad(136.593)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.707), math.rad(18.105), math.rad(-67.323)),
					},
				},
			},
		},
		[0.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.537, -0.385, -0.693) * CFrame.Angles(math.rad(38.216), math.rad(40.795), math.rad(63.484)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.101, 1.081, -0.044) * CFrame.Angles(math.rad(-62.682), math.rad(-34.721), math.rad(-68.354)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.402, -0.053, -0.495) * CFrame.Angles(math.rad(33.232), math.rad(-89.611), math.rad(68.01)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.241), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.511, -0.163, -0.49) * CFrame.Angles(math.rad(-99.064), math.rad(-65.088), math.rad(136.593)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.993), math.rad(18.736), math.rad(-68.526)),
					},
				},
			},
		},
		[0.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.546, -0.379, -0.701) * CFrame.Angles(math.rad(37.987), math.rad(41.539), math.rad(64.744)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.1, 1.087, -0.052) * CFrame.Angles(math.rad(-64.057), math.rad(-34.377), math.rad(-70.588)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.401, -0.056, -0.506) * CFrame.Angles(math.rad(147.709), math.rad(-88.923), math.rad(-178.018)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.523, -0.163, -0.495) * CFrame.Angles(math.rad(-99.122), math.rad(-65.088), math.rad(136.65)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.222), math.rad(19.251), math.rad(-69.672)),
					},
				},
			},
		},
		[0.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.553, -0.373, -0.707) * CFrame.Angles(math.rad(37.701), math.rad(42.227), math.rad(65.947)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.098, 1.092, -0.059) * CFrame.Angles(math.rad(-65.26), math.rad(-34.034), math.rad(-72.594)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.4, -0.058, -0.516) * CFrame.Angles(math.rad(156.933), math.rad(-87.777), math.rad(-169.309)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.534, -0.163, -0.5) * CFrame.Angles(math.rad(-99.179), math.rad(-65.088), math.rad(136.708)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.394), math.rad(19.71), math.rad(-70.703)),
					},
				},
			},
		},
		[0.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.559, -0.366, -0.711) * CFrame.Angles(math.rad(37.414), math.rad(42.8), math.rad(67.036)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.097, 1.096, -0.066) * CFrame.Angles(math.rad(-66.349), math.rad(-33.747), math.rad(-74.37)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.4, -0.06, -0.525) * CFrame.Angles(math.rad(160.314), math.rad(-86.746), math.rad(-166.444)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.544, -0.163, -0.504) * CFrame.Angles(math.rad(-99.236), math.rad(-65.031), math.rad(136.708)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.509), math.rad(20.111), math.rad(-71.677)),
					},
				},
			},
		},
		[0.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.564, -0.36, -0.714) * CFrame.Angles(math.rad(37.013), math.rad(43.258), math.rad(68.067)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.096, 1.1, -0.072) * CFrame.Angles(math.rad(-67.38), math.rad(-33.518), math.rad(-75.974)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.399, -0.061, -0.532) * CFrame.Angles(math.rad(162.491), math.rad(-85.886), math.rad(-164.783)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.554, -0.162, -0.508) * CFrame.Angles(math.rad(-99.294), math.rad(-65.031), math.rad(136.708)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.509), math.rad(20.397), math.rad(-72.594)),
					},
				},
			},
		},
		[0.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.568, -0.354, -0.715) * CFrame.Angles(math.rad(36.555), math.rad(43.659), math.rad(69.041)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.095, 1.103, -0.077) * CFrame.Angles(math.rad(-68.239), math.rad(-33.346), math.rad(-77.292)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.398, -0.061, -0.539) * CFrame.Angles(math.rad(164.267), math.rad(-85.199), math.rad(-163.465)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.637), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.563, -0.162, -0.511) * CFrame.Angles(math.rad(-99.294), math.rad(-65.031), math.rad(136.765)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.452), math.rad(20.626), math.rad(-73.396)),
					},
				},
			},
		},
		[0.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.571, -0.349, -0.714) * CFrame.Angles(math.rad(36.096), math.rad(44.003), math.rad(69.901)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.094, 1.106, -0.082) * CFrame.Angles(math.rad(-68.984), math.rad(-33.232), math.rad(-78.381)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.397, -0.061, -0.544) * CFrame.Angles(math.rad(165.699), math.rad(-84.569), math.rad(-162.548)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.694), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.571, -0.161, -0.514) * CFrame.Angles(math.rad(-99.351), math.rad(-64.973), math.rad(136.765)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.394), math.rad(20.798), math.rad(-74.141)),
					},
				},
			},
		},
		[0.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.574, -0.344, -0.714) * CFrame.Angles(math.rad(35.753), math.rad(44.232), math.rad(70.646)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.094, 1.108, -0.086) * CFrame.Angles(math.rad(-69.672), math.rad(-33.117), math.rad(-79.355)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.396, -0.062, -0.549) * CFrame.Angles(math.rad(166.731), math.rad(-84.053), math.rad(-161.918)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.694), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.579, -0.161, -0.516) * CFrame.Angles(math.rad(-99.351), math.rad(-64.973), math.rad(136.822)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.28), math.rad(20.913), math.rad(-74.714)),
					},
				},
			},
		},
		[0.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.576, -0.34, -0.714) * CFrame.Angles(math.rad(35.409), math.rad(44.462), math.rad(71.333)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.093, 1.11, -0.09) * CFrame.Angles(math.rad(-70.245), math.rad(-33.002), math.rad(-80.157)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.396, -0.062, -0.553) * CFrame.Angles(math.rad(167.476), math.rad(-83.595), math.rad(-161.46)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.694), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.586, -0.16, -0.518) * CFrame.Angles(math.rad(-99.408), math.rad(-64.973), math.rad(136.822)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.222), math.rad(21.028), math.rad(-75.287)),
					},
				},
			},
		},
		[0.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.578, -0.337, -0.714) * CFrame.Angles(math.rad(35.122), math.rad(44.633), math.rad(71.849)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.093, 1.112, -0.093) * CFrame.Angles(math.rad(-70.703), math.rad(-32.888), math.rad(-80.844)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.395, -0.062, -0.556) * CFrame.Angles(math.rad(168.049), math.rad(-83.251), math.rad(-161.23)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.694), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.593, -0.159, -0.52) * CFrame.Angles(math.rad(-99.408), math.rad(-64.916), math.rad(136.822)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.165), math.rad(21.085), math.rad(-75.688)),
					},
				},
			},
		},
		[0.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.58, -0.334, -0.714) * CFrame.Angles(math.rad(34.893), math.rad(44.805), math.rad(72.307)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.092, 1.113, -0.095) * CFrame.Angles(math.rad(-71.104), math.rad(-32.773), math.rad(-81.417)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.395, -0.062, -0.559) * CFrame.Angles(math.rad(168.45), math.rad(-82.907), math.rad(-161.058)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.694), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.599, -0.158, -0.521) * CFrame.Angles(math.rad(-99.408), math.rad(-64.916), math.rad(136.88)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.165), math.rad(21.142), math.rad(-76.089)),
					},
				},
			},
		},
		[0.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.581, -0.331, -0.714) * CFrame.Angles(math.rad(34.664), math.rad(44.92), math.rad(72.708)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.092, 1.114, -0.097) * CFrame.Angles(math.rad(-71.391), math.rad(-32.716), math.rad(-81.876)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.394, -0.062, -0.561) * CFrame.Angles(math.rad(168.736), math.rad(-82.678), math.rad(-160.944)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.694), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.605, -0.157, -0.523) * CFrame.Angles(math.rad(-99.465), math.rad(-64.859), math.rad(136.88)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.108), math.rad(21.142), math.rad(-76.375)),
					},
				},
			},
		},
		[0.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.582, -0.329, -0.714) * CFrame.Angles(math.rad(34.492), math.rad(45.034), math.rad(72.995)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.091, 1.115, -0.099) * CFrame.Angles(math.rad(-71.677), math.rad(-32.659), math.rad(-82.219)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.394, -0.062, -0.563) * CFrame.Angles(math.rad(168.965), math.rad(-82.449), math.rad(-160.887)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.752), math.rad(-59.187)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.61, -0.155, -0.524) * CFrame.Angles(math.rad(-99.465), math.rad(-64.859), math.rad(136.937)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(21.142), math.rad(-76.662)),
					},
				},
			},
		},
		[1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.583, -0.327, -0.713) * CFrame.Angles(math.rad(34.377), math.rad(45.149), math.rad(73.224)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.091, 1.116, -0.1) * CFrame.Angles(math.rad(-71.849), math.rad(-32.544), math.rad(-82.506)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.394, -0.062, -0.564) * CFrame.Angles(math.rad(169.08), math.rad(-82.334), math.rad(-160.944)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.752), math.rad(-59.129)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.615, -0.154, -0.525) * CFrame.Angles(math.rad(-99.465), math.rad(-64.802), math.rad(136.937)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(21.142), math.rad(-76.834)),
					},
				},
			},
		},
		[1.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.584, -0.326, -0.713) * CFrame.Angles(math.rad(34.263), math.rad(45.206), math.rad(73.396)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.091, 1.117, -0.101) * CFrame.Angles(math.rad(-72.021), math.rad(-32.487), math.rad(-82.735)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.394, -0.062, -0.565) * CFrame.Angles(math.rad(169.137), math.rad(-82.219), math.rad(-161.001)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.184), math.rad(24.752), math.rad(-59.129)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.619, -0.152, -0.527) * CFrame.Angles(math.rad(-99.465), math.rad(-64.802), math.rad(136.994)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(21.085), math.rad(-77.006)),
					},
				},
			},
		},
		[1.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.584, -0.325, -0.713) * CFrame.Angles(math.rad(34.148), math.rad(45.264), math.rad(73.568)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.09, 1.117, -0.102) * CFrame.Angles(math.rad(-72.135), math.rad(-32.487), math.rad(-82.85)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.062, -0.566) * CFrame.Angles(math.rad(169.08), math.rad(-82.105), math.rad(-161.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.752), math.rad(-59.129)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.623, -0.15, -0.528) * CFrame.Angles(math.rad(-99.408), math.rad(-64.744), math.rad(137.052)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.993), math.rad(21.085), math.rad(-77.12)),
					},
				},
			},
		},
		[1.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.585, -0.324, -0.713) * CFrame.Angles(math.rad(34.034), math.rad(45.321), math.rad(73.625)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.09, 1.118, -0.103) * CFrame.Angles(math.rad(-72.25), math.rad(-32.429), math.rad(-82.964)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.062, -0.566) * CFrame.Angles(math.rad(169.023), math.rad(-82.048), math.rad(-161.288)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.752), math.rad(-59.129)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.627, -0.148, -0.53) * CFrame.Angles(math.rad(-99.408), math.rad(-64.744), math.rad(137.052)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.993), math.rad(21.028), math.rad(-77.177)),
					},
				},
			},
		},
		[1.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.586, -0.323, -0.713) * CFrame.Angles(math.rad(33.976), math.rad(45.378), math.rad(73.74)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.09, 1.118, -0.103) * CFrame.Angles(math.rad(-72.365), math.rad(-32.372), math.rad(-83.079)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.062, -0.566) * CFrame.Angles(math.rad(168.908), math.rad(-82.048), math.rad(-161.46)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.809), math.rad(-59.072)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.63, -0.145, -0.531) * CFrame.Angles(math.rad(-99.408), math.rad(-64.744), math.rad(137.109)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.993), math.rad(20.913), math.rad(-77.292)),
					},
				},
			},
		},
		[1.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.586, -0.322, -0.713) * CFrame.Angles(math.rad(33.919), math.rad(45.436), math.rad(73.797)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.089, 1.118, -0.104) * CFrame.Angles(math.rad(-72.422), math.rad(-32.315), math.rad(-83.079)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.062, -0.567) * CFrame.Angles(math.rad(168.736), math.rad(-82.048), math.rad(-161.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.809), math.rad(-59.072)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.633, -0.142, -0.533) * CFrame.Angles(math.rad(-99.351), math.rad(-64.687), math.rad(137.166)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.993), math.rad(20.856), math.rad(-77.349)),
					},
				},
			},
		},
		[1.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.587, -0.321, -0.714) * CFrame.Angles(math.rad(33.805), math.rad(45.493), math.rad(73.854)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.089, 1.119, -0.104) * CFrame.Angles(math.rad(-72.479), math.rad(-32.258), math.rad(-83.136)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.063, -0.567) * CFrame.Angles(math.rad(168.507), math.rad(-81.99), math.rad(-162.032)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.809), math.rad(-59.072)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.635, -0.139, -0.536) * CFrame.Angles(math.rad(-99.294), math.rad(-64.687), math.rad(137.281)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-50.993), math.rad(20.741), math.rad(-77.407)),
					},
				},
			},
		},
		[1.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.587, -0.32, -0.714) * CFrame.Angles(math.rad(33.747), math.rad(45.55), math.rad(73.912)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.088, 1.119, -0.104) * CFrame.Angles(math.rad(-72.536), math.rad(-32.143), math.rad(-83.193)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.063, -0.567) * CFrame.Angles(math.rad(168.22), math.rad(-81.99), math.rad(-162.376)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.809), math.rad(-59.072)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.637, -0.136, -0.538) * CFrame.Angles(math.rad(-99.236), math.rad(-64.63), math.rad(137.338)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(20.626), math.rad(-77.464)),
					},
				},
			},
		},
		[1.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.588, -0.319, -0.714) * CFrame.Angles(math.rad(33.633), math.rad(45.607), math.rad(73.969)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.088, 1.12, -0.105) * CFrame.Angles(math.rad(-72.651), math.rad(-32.086), math.rad(-83.251)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.063, -0.567) * CFrame.Angles(math.rad(167.934), math.rad(-81.99), math.rad(-162.777)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.127), math.rad(24.809), math.rad(-59.015)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.639, -0.132, -0.541) * CFrame.Angles(math.rad(-99.179), math.rad(-64.63), math.rad(137.395)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(20.512), math.rad(-77.521)),
					},
				},
			},
		},
		[1.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.589, -0.317, -0.714) * CFrame.Angles(math.rad(33.518), math.rad(45.722), math.rad(74.083)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.087, 1.121, -0.106) * CFrame.Angles(math.rad(-72.766), math.rad(-31.971), math.rad(-83.308)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.064, -0.567) * CFrame.Angles(math.rad(167.647), math.rad(-81.99), math.rad(-163.236)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.07), math.rad(24.809), math.rad(-59.015)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.641, -0.128, -0.545) * CFrame.Angles(math.rad(-99.122), math.rad(-64.63), math.rad(137.51)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(20.397), math.rad(-77.636)),
					},
				},
			},
		},
		[1.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.59, -0.315, -0.714) * CFrame.Angles(math.rad(33.403), math.rad(45.837), math.rad(74.198)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.086, 1.122, -0.106) * CFrame.Angles(math.rad(-72.938), math.rad(-31.856), math.rad(-83.423)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.064, -0.567) * CFrame.Angles(math.rad(167.304), math.rad(-81.933), math.rad(-163.751)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.07), math.rad(24.809), math.rad(-59.015)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.642, -0.124, -0.549) * CFrame.Angles(math.rad(-99.064), math.rad(-64.572), math.rad(137.624)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.051), math.rad(20.283), math.rad(-77.75)),
					},
				},
			},
		},
		[1.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.591, -0.313, -0.714) * CFrame.Angles(math.rad(33.174), math.rad(45.951), math.rad(74.37)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.085, 1.123, -0.107) * CFrame.Angles(math.rad(-73.109), math.rad(-31.742), math.rad(-83.537)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.064, -0.567) * CFrame.Angles(math.rad(166.96), math.rad(-81.876), math.rad(-164.267)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.07), math.rad(24.866), math.rad(-59.015)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.643, -0.12, -0.554) * CFrame.Angles(math.rad(-98.95), math.rad(-64.572), math.rad(137.739)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.108), math.rad(20.168), math.rad(-77.922)),
					},
				},
			},
		},
		[1.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.593, -0.31, -0.714) * CFrame.Angles(math.rad(33.002), math.rad(46.123), math.rad(74.599)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.084, 1.124, -0.109) * CFrame.Angles(math.rad(-73.339), math.rad(-31.57), math.rad(-83.766)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.065, -0.568) * CFrame.Angles(math.rad(166.616), math.rad(-81.818), math.rad(-164.84)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.07), math.rad(24.866), math.rad(-59.015)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.644, -0.115, -0.559) * CFrame.Angles(math.rad(-98.893), math.rad(-64.572), math.rad(137.854)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.108), math.rad(20.054), math.rad(-78.151)),
					},
				},
			},
		},
		[1.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.594, -0.307, -0.714) * CFrame.Angles(math.rad(32.716), math.rad(46.295), math.rad(74.886)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.083, 1.125, -0.111) * CFrame.Angles(math.rad(-73.625), math.rad(-31.398), math.rad(-84.053)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.393, -0.065, -0.569) * CFrame.Angles(math.rad(166.272), math.rad(-81.646), math.rad(-165.413)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.07), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.645, -0.109, -0.565) * CFrame.Angles(math.rad(-98.778), math.rad(-64.515), math.rad(138.026)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.108), math.rad(19.882), math.rad(-78.381)),
					},
				},
			},
		},
		[1.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.596, -0.303, -0.714) * CFrame.Angles(math.rad(32.372), math.rad(46.467), math.rad(75.229)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.087, 1.142, -0.179) * CFrame.Angles(math.rad(-73.969), math.rad(-31.226), math.rad(-82.334)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.392, -0.066, -0.571) * CFrame.Angles(math.rad(165.986), math.rad(-81.475), math.rad(-166.043)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.07), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.646, -0.103, -0.572) * CFrame.Angles(math.rad(-98.663), math.rad(-64.515), math.rad(138.197)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.165), math.rad(19.767), math.rad(-78.724)),
					},
				},
			},
		},
		[1.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.599, -0.299, -0.714) * CFrame.Angles(math.rad(32.028), math.rad(46.696), math.rad(75.688)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.087, 1.152, -0.214) * CFrame.Angles(math.rad(-74.37), math.rad(-30.94), math.rad(-81.818)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.392, -0.067, -0.572) * CFrame.Angles(math.rad(165.757), math.rad(-81.303), math.rad(-166.616)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.012), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.646, -0.097, -0.58) * CFrame.Angles(math.rad(-98.549), math.rad(-64.515), math.rad(138.369)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.165), math.rad(19.652), math.rad(-79.068)),
					},
				},
			},
		},
		[1.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.601, -0.294, -0.714) * CFrame.Angles(math.rad(31.57), math.rad(46.983), math.rad(76.261)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.085, 1.16, -0.242) * CFrame.Angles(math.rad(-74.886), math.rad(-30.653), math.rad(-81.532)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.391, -0.067, -0.575) * CFrame.Angles(math.rad(165.585), math.rad(-81.016), math.rad(-167.246)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.012), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.647, -0.091, -0.588) * CFrame.Angles(math.rad(-98.434), math.rad(-64.515), math.rad(138.541)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.222), math.rad(19.538), math.rad(-79.527)),
					},
				},
			},
		},
		[1.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.604, -0.288, -0.714) * CFrame.Angles(math.rad(30.997), math.rad(47.269), math.rad(76.948)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.082, 1.168, -0.268) * CFrame.Angles(math.rad(-75.459), math.rad(-30.367), math.rad(-81.532)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.391, -0.068, -0.577) * CFrame.Angles(math.rad(165.47), math.rad(-80.672), math.rad(-167.877)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.012), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.647, -0.084, -0.598) * CFrame.Angles(math.rad(-98.262), math.rad(-64.515), math.rad(138.77)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.222), math.rad(19.366), math.rad(-80.099)),
					},
				},
			},
		},
		[1.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.608, -0.281, -0.714) * CFrame.Angles(math.rad(30.424), math.rad(47.613), math.rad(77.693)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.078, 1.175, -0.292) * CFrame.Angles(math.rad(-76.089), math.rad(-29.966), math.rad(-81.704)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.39, -0.068, -0.581) * CFrame.Angles(math.rad(165.413), math.rad(-80.329), math.rad(-168.45)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.012), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.647, -0.076, -0.608) * CFrame.Angles(math.rad(-98.148), math.rad(-64.515), math.rad(138.942)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.222), math.rad(19.251), math.rad(-80.73)),
					},
				},
			},
		},
		[1.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.611, -0.272, -0.715) * CFrame.Angles(math.rad(29.679), math.rad(48.014), math.rad(78.667)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.073, 1.181, -0.314) * CFrame.Angles(math.rad(-76.834), math.rad(-29.507), math.rad(-82.048)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.389, -0.069, -0.584) * CFrame.Angles(math.rad(165.47), math.rad(-79.813), math.rad(-169.023)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-26.012), math.rad(24.866), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.647, -0.069, -0.619) * CFrame.Angles(math.rad(-97.976), math.rad(-64.515), math.rad(139.229)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.28), math.rad(19.137), math.rad(-81.417)),
					},
				},
			},
		},
		[1.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.615, -0.263, -0.715) * CFrame.Angles(math.rad(28.877), math.rad(48.415), math.rad(79.756)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.066, 1.187, -0.335) * CFrame.Angles(math.rad(-77.693), math.rad(-29.049), math.rad(-82.621)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.388, -0.07, -0.589) * CFrame.Angles(math.rad(165.642), math.rad(-79.297), math.rad(-169.596)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-25.955), math.rad(24.809), math.rad(-58.9)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.647, -0.06, -0.632) * CFrame.Angles(math.rad(-97.804), math.rad(-64.515), math.rad(139.458)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.28), math.rad(19.079), math.rad(-82.277)),
					},
				},
			},
		},
		[1.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.62, -0.253, -0.715) * CFrame.Angles(math.rad(27.903), math.rad(48.873), math.rad(81.016)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.058, 1.193, -0.354) * CFrame.Angles(math.rad(-78.61), math.rad(-28.476), math.rad(-83.423)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.387, -0.07, -0.594) * CFrame.Angles(math.rad(165.929), math.rad(-78.667), math.rad(-170.168)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.088, -0.304, -0.111) * CFrame.Angles(math.rad(-25.955), math.rad(24.809), math.rad(-58.9)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.647, -0.051, -0.646) * CFrame.Angles(math.rad(-97.575), math.rad(-64.515), math.rad(139.744)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.337), math.rad(18.965), math.rad(-83.193)),
					},
				},
			},
		},
		[1.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.64, -0.218, -0.715) * CFrame.Angles(math.rad(22.632), math.rad(51.051), math.rad(87.892)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.996, 1.191, -0.526) * CFrame.Angles(math.rad(-83.938), math.rad(-25.153), math.rad(-82.048)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.355, -0.045, -0.576) * CFrame.Angles(math.rad(166.158), math.rad(-77.349), math.rad(-176.471)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.173, -0.405, -0.112) * CFrame.Angles(math.rad(-25.096), math.rad(23.205), math.rad(-59.473)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.649, 0.037, -0.753) * CFrame.Angles(math.rad(-89.782), math.rad(-65.145), math.rad(149.37)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.566), math.rad(18.908), math.rad(-88.064)),
					},
				},
			},
		},
		[1.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.662, -0.259, -0.716) * CFrame.Angles(math.rad(12.605), math.rad(53.572), math.rad(100.611)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.885, 1.08, -0.726) * CFrame.Angles(math.rad(-92.762), math.rad(-18.22), math.rad(-77.693)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.28, 0.017, -0.496) * CFrame.Angles(math.rad(161.46), math.rad(-77.063), math.rad(165.986)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.332, -0.592, -0.119) * CFrame.Angles(math.rad(-23.606), math.rad(19.366), math.rad(-60.791)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.652, 0.201, -0.938) * CFrame.Angles(math.rad(-75.115), math.rad(-64.744), math.rad(167.304)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.91), math.rad(18.908), math.rad(-96.085)),
					},
				},
			},
		},
		[1.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.667, -0.57, -0.715) * CFrame.Angles(math.rad(6.704), math.rad(54.202), math.rad(107.831)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.893, 0.88, -0.769) * CFrame.Angles(math.rad(-99.58), math.rad(-14.152), math.rad(-68.067)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.182, 0.084, -0.344) * CFrame.Angles(math.rad(135.505), math.rad(-79.183), math.rad(128.228)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.419, -0.693, -0.142) * CFrame.Angles(math.rad(-23.033), math.rad(14.782), math.rad(-62.223)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.652, 0.312, -1.037) * CFrame.Angles(math.rad(-67.781), math.rad(-63.77), math.rad(176.414)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-52.025), math.rad(18.736), math.rad(-100.382)),
					},
				},
			},
		},
		[1.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.639, -1.361, -0.694) * CFrame.Angles(math.rad(15.986), math.rad(50.936), math.rad(97.747)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.976, 0.777, -0.264) * CFrame.Angles(math.rad(-97.689), math.rad(-25.096), math.rad(-64.859)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.065, 0.158, -0.122) * CFrame.Angles(math.rad(75.974), math.rad(-78.266), math.rad(62.51)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.371, -0.691, -0.199) * CFrame.Angles(math.rad(-23.892), math.rad(10.313), math.rad(-63.713)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.598, 0.347, -0.926) * CFrame.Angles(math.rad(-77.922), math.rad(-64.057), math.rad(166.215)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-49.504), math.rad(19.595), math.rad(-94.595)),
					},
				},
			},
		},
		[1.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.525, -2.724, -0.662) * CFrame.Angles(math.rad(33.002), math.rad(39.649), math.rad(78.782)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.06, 0.552, -0.003) * CFrame.Angles(math.rad(-78.323), math.rad(-47.04), math.rad(-45.722)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.07, 0.257, 0.125) * CFrame.Angles(math.rad(36.326), math.rad(-69.442), math.rad(20.626)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.253, -0.687, -0.284) * CFrame.Angles(math.rad(-25.382), math.rad(6.245), math.rad(-65.088)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.474, 0.369, -0.662) * CFrame.Angles(math.rad(-101.184), math.rad(-61.478), math.rad(142.896)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-43.946), math.rad(23.09), math.rad(-80.099)),
					},
				},
			},
		},
		[1.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.311, -4.648, -0.653) * CFrame.Angles(math.rad(44.92), math.rad(22.231), math.rad(64.286)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.094, 0.233, 0.183) * CFrame.Angles(math.rad(-32.773), math.rad(-59.244), math.rad(-6.073)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.207, 0.374, 0.338) * CFrame.Angles(math.rad(18.163), math.rad(-59.817), math.rad(1.948)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.113, -0.682, -0.375) * CFrame.Angles(math.rad(-27.044), math.rad(2.979), math.rad(-66.291)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.328, 0.382, -0.349) * CFrame.Angles(math.rad(-121.238), math.rad(-53.743), math.rad(122.728)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-38.56), math.rad(29.049), math.rad(-62.109)),
					},
				},
			},
		},
		[1.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.097, -7.157, -0.673) * CFrame.Angles(math.rad(50.478), math.rad(6.761), math.rad(56.15)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.048, -0.028, 0.289) * CFrame.Angles(math.rad(5.157), math.rad(-54.488), math.rad(25.267)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.308, 0.476, 0.474) * CFrame.Angles(math.rad(7.85), math.rad(-53.743), math.rad(-8.136)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.005, -0.678, -0.448) * CFrame.Angles(math.rad(-28.419), math.rad(0.745), math.rad(-67.208)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.206, 0.388, -0.088) * CFrame.Angles(math.rad(-131.838), math.rad(-45.321), math.rad(112.013)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-35.695), math.rad(34.836), math.rad(-47.04)),
					},
				},
			},
		},
		[1.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -10.392, -0.687) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.013, -0.14, 0.325) * CFrame.Angles(math.rad(16.215), math.rad(-50.363), math.rad(33.346)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-35.008), math.rad(37.242), math.rad(-40.852)),
					},
				},
			},
		},
		[1.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -25.314, -0.687) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.007, -0.16, 0.334) * CFrame.Angles(math.rad(16.329), math.rad(-50.306), math.rad(33.403)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.893), math.rad(37.185), math.rad(-40.909)),
					},
				},
			},
		},
		[1.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -55.614, -0.687) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1, -0.18, 0.343) * CFrame.Angles(math.rad(16.387), math.rad(-50.306), math.rad(33.403)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.836), math.rad(37.128), math.rad(-41.024)),
					},
				},
			},
		},
		[1.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -90.554, -0.687) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.994, -0.2, 0.351) * CFrame.Angles(math.rad(16.501), math.rad(-50.306), math.rad(33.461)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.721), math.rad(37.013), math.rad(-41.081)),
					},
				},
			},
		},
		[1.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -119.392, -0.687) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.988, -0.218, 0.36) * CFrame.Angles(math.rad(16.616), math.rad(-50.248), math.rad(33.461)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.607), math.rad(36.956), math.rad(-41.138)),
					},
				},
			},
		},
		[1.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, -0.687) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.982, -0.236, 0.368) * CFrame.Angles(math.rad(16.673), math.rad(-50.248), math.rad(33.518)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.492), math.rad(36.898), math.rad(-41.196)),
					},
				},
			},
		},
		[1.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.976, -0.253, 0.375) * CFrame.Angles(math.rad(16.788), math.rad(-50.191), math.rad(33.518)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.377), math.rad(36.784), math.rad(-41.253)),
					},
				},
			},
		},
		[1.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.97, -0.27, 0.383) * CFrame.Angles(math.rad(16.845), math.rad(-50.191), math.rad(33.518)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.263), math.rad(36.727), math.rad(-41.31)),
					},
				},
			},
		},
		[1.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.965, -0.286, 0.39) * CFrame.Angles(math.rad(16.96), math.rad(-50.134), math.rad(33.575)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.148), math.rad(36.669), math.rad(-41.368)),
					},
				},
			},
		},
		[1.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.96, -0.302, 0.397) * CFrame.Angles(math.rad(17.017), math.rad(-50.134), math.rad(33.575)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.034), math.rad(36.555), math.rad(-41.425)),
					},
				},
			},
		},
		[1.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.955, -0.317, 0.404) * CFrame.Angles(math.rad(17.131), math.rad(-50.134), math.rad(33.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.919), math.rad(36.497), math.rad(-41.539)),
					},
				},
			},
		},
		[1.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.95, -0.331, 0.41) * CFrame.Angles(math.rad(17.189), math.rad(-50.077), math.rad(33.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.805), math.rad(36.383), math.rad(-41.597)),
					},
				},
			},
		},
		[1.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.946, -0.345, 0.416) * CFrame.Angles(math.rad(17.246), math.rad(-50.077), math.rad(33.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.69), math.rad(36.326), math.rad(-41.654)),
					},
				},
			},
		},
		[1.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.941, -0.358, 0.422) * CFrame.Angles(math.rad(17.361), math.rad(-50.077), math.rad(33.69)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.575), math.rad(36.211), math.rad(-41.711)),
					},
				},
			},
		},
		[1.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.937, -0.371, 0.428) * CFrame.Angles(math.rad(17.418), math.rad(-50.019), math.rad(33.69)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.461), math.rad(36.096), math.rad(-41.826)),
					},
				},
			},
		},
		[1.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.933, -0.383, 0.433) * CFrame.Angles(math.rad(17.475), math.rad(-50.019), math.rad(33.69)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.346), math.rad(36.039), math.rad(-41.883)),
					},
				},
			},
		},
		[1.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.929, -0.395, 0.439) * CFrame.Angles(math.rad(17.533), math.rad(-50.019), math.rad(33.69)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.174), math.rad(35.924), math.rad(-41.941)),
					},
				},
			},
		},
		[1.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.925, -0.406, 0.444) * CFrame.Angles(math.rad(17.59), math.rad(-49.962), math.rad(33.747)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-33.06), math.rad(35.81), math.rad(-42.055)),
					},
				},
			},
		},
		[1.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.922, -0.417, 0.448) * CFrame.Angles(math.rad(17.647), math.rad(-49.962), math.rad(33.747)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.945), math.rad(35.753), math.rad(-42.112)),
					},
				},
			},
		},
		[1.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.919, -0.427, 0.453) * CFrame.Angles(math.rad(17.704), math.rad(-49.962), math.rad(33.747)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.773), math.rad(35.638), math.rad(-42.17)),
					},
				},
			},
		},
		[1.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.915, -0.437, 0.457) * CFrame.Angles(math.rad(17.762), math.rad(-49.905), math.rad(33.747)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.659), math.rad(35.523), math.rad(-42.284)),
					},
				},
			},
		},
		[1.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.912, -0.446, 0.461) * CFrame.Angles(math.rad(17.819), math.rad(-49.905), math.rad(33.805)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.544), math.rad(35.409), math.rad(-42.342)),
					},
				},
			},
		},
		[1.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.909, -0.455, 0.465) * CFrame.Angles(math.rad(17.876), math.rad(-49.905), math.rad(33.805)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.372), math.rad(35.294), math.rad(-42.456)),
					},
				},
			},
		},
		[1.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.907, -0.463, 0.469) * CFrame.Angles(math.rad(17.934), math.rad(-49.905), math.rad(33.805)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.2), math.rad(35.18), math.rad(-42.513)),
					},
				},
			},
		},
		[1.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.904, -0.471, 0.472) * CFrame.Angles(math.rad(17.991), math.rad(-49.847), math.rad(33.805)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-32.086), math.rad(35.065), math.rad(-42.628)),
					},
				},
			},
		},
		[1.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.901, -0.479, 0.476) * CFrame.Angles(math.rad(18.048), math.rad(-49.847), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.914), math.rad(34.95), math.rad(-42.685)),
					},
				},
			},
		},
		[1.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.899, -0.486, 0.479) * CFrame.Angles(math.rad(18.048), math.rad(-49.847), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.799), math.rad(34.836), math.rad(-42.8)),
					},
				},
			},
		},
		[1.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.897, -0.493, 0.482) * CFrame.Angles(math.rad(18.105), math.rad(-49.847), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.627), math.rad(34.721), math.rad(-42.857)),
					},
				},
			},
		},
		[1.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.895, -0.499, 0.485) * CFrame.Angles(math.rad(18.163), math.rad(-49.847), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.455), math.rad(34.607), math.rad(-42.972)),
					},
				},
			},
		},
		[1.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.893, -0.505, 0.487) * CFrame.Angles(math.rad(18.163), math.rad(-49.79), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.283), math.rad(34.492), math.rad(-43.029)),
					},
				},
			},
		},
		[1.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.891, -0.51, 0.49) * CFrame.Angles(math.rad(18.22), math.rad(-49.79), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.169), math.rad(34.377), math.rad(-43.144)),
					},
				},
			},
		},
		[2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.889, -0.516, 0.492) * CFrame.Angles(math.rad(18.22), math.rad(-49.79), math.rad(33.862)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.997), math.rad(34.263), math.rad(-43.258)),
					},
				},
			},
		},
		[2.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.888, -0.521, 0.495) * CFrame.Angles(math.rad(18.277), math.rad(-49.79), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.825), math.rad(34.091), math.rad(-43.316)),
					},
				},
			},
		},
		[2.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.886, -0.525, 0.496) * CFrame.Angles(math.rad(18.277), math.rad(-49.79), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.653), math.rad(33.976), math.rad(-43.43)),
					},
				},
			},
		},
		[2.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.885, -0.53, 0.498) * CFrame.Angles(math.rad(18.335), math.rad(-49.79), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.481), math.rad(33.805), math.rad(-43.545)),
					},
				},
			},
		},
		[2.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.883, -0.534, 0.5) * CFrame.Angles(math.rad(18.335), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.309), math.rad(33.69), math.rad(-43.602)),
					},
				},
			},
		},
		[2.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.882, -0.537, 0.502) * CFrame.Angles(math.rad(18.392), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.138), math.rad(33.575), math.rad(-43.717)),
					},
				},
			},
		},
		[2.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.881, -0.541, 0.503) * CFrame.Angles(math.rad(18.392), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.966), math.rad(33.403), math.rad(-43.831)),
					},
				},
			},
		},
		[2.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.88, -0.544, 0.505) * CFrame.Angles(math.rad(18.392), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.794), math.rad(33.289), math.rad(-43.889)),
					},
				},
			},
		},
		[2.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.879, -0.547, 0.506) * CFrame.Angles(math.rad(18.449), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.622), math.rad(33.117), math.rad(-44.003)),
					},
				},
			},
		},
		[2.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.878, -0.549, 0.507) * CFrame.Angles(math.rad(18.449), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.393), math.rad(32.945), math.rad(-44.118)),
					},
				},
			},
		},
		[2.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.877, -0.552, 0.508) * CFrame.Angles(math.rad(18.449), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.221), math.rad(32.83), math.rad(-44.232)),
					},
				},
			},
		},
		[2.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.877, -0.554, 0.509) * CFrame.Angles(math.rad(18.449), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.049), math.rad(32.659), math.rad(-44.29)),
					},
				},
			},
		},
		[2.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.876, -0.556, 0.51) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.919)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.877), math.rad(32.487), math.rad(-44.404)),
					},
				},
			},
		},
		[2.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.875, -0.558, 0.511) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.648), math.rad(32.315), math.rad(-44.519)),
					},
				},
			},
		},
		[2.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.875, -0.559, 0.511) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.476), math.rad(32.143), math.rad(-44.633)),
					},
				},
			},
		},
		[2.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.874, -0.56, 0.512) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.247), math.rad(31.971), math.rad(-44.748)),
					},
				},
			},
		},
		[2.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.874, -0.562, 0.513) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.075), math.rad(31.799), math.rad(-44.805)),
					},
				},
			},
		},
		[2.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.874, -0.563, 0.513) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-27.846), math.rad(31.627), math.rad(-44.92)),
					},
				},
			},
		},
		[2.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.874, -0.564, 0.513) * CFrame.Angles(math.rad(18.507), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-27.674), math.rad(31.455), math.rad(-45.034)),
					},
				},
			},
		},
		[2.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.873, -0.564, 0.514) * CFrame.Angles(math.rad(18.564), math.rad(-49.733), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-27.445), math.rad(31.283), math.rad(-45.149)),
					},
				},
			},
		},
		[2.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.873, -0.565, 0.514) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-27.273), math.rad(31.112), math.rad(-45.264)),
					},
				},
			},
		},
		[2.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.873, -0.565, 0.514) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-27.044), math.rad(30.94), math.rad(-45.378)),
					},
				},
			},
		},
		[2.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.873, -0.566, 0.514) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-26.814), math.rad(30.711), math.rad(-45.493)),
					},
				},
			},
		},
		[2.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.873, -0.566, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-26.643), math.rad(30.539), math.rad(-45.607)),
					},
				},
			},
		},
		[2.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.873, -0.566, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-26.413), math.rad(30.367), math.rad(-45.665)),
					},
				},
			},
		},
		[2.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, -0.567, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-26.184), math.rad(30.138), math.rad(-45.779)),
					},
				},
			},
		},
		[2.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, -0.567, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-25.955), math.rad(29.966), math.rad(-45.894)),
					},
				},
			},
		},
		[2.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, -0.567, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-25.726), math.rad(29.737), math.rad(-46.009)),
					},
				},
			},
		},
		[2.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, -0.567, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-25.497), math.rad(29.565), math.rad(-46.123)),
					},
				},
			},
		},
		[2.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, -0.567, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-25.267), math.rad(29.335), math.rad(-46.238)),
					},
				},
			},
		},
		[2.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, -131.392, 999.313) * CFrame.Angles(math.rad(52.082), math.rad(0.401), math.rad(53.4)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.872, -0.567, 0.515) * CFrame.Angles(math.rad(18.564), math.rad(-49.675), math.rad(33.976)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, 0.52, 0.521) * CFrame.Angles(math.rad(3.896), math.rad(-51.681), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.055, -0.676, -0.477) * CFrame.Angles(math.rad(-28.992), math.rad(-0.057), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(1.156, 0.389, 0.021) * CFrame.Angles(math.rad(-135.161), math.rad(-41.539), math.rad(108.69)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-20.397), math.rad(24.523), math.rad(-48.472)),
					},
				},
			},
		},
		[2.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.381, 25.906) * CFrame.Angles(math.rad(-27.617), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.963, 0.626, -0.004) * CFrame.Angles(0, 0, math.rad(-0.974)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.027, -0.009, -0.004) * CFrame.Angles(0, 0, math.rad(19.309)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.006, 0, -0.008) * CFrame.Angles(math.rad(-20.397), math.rad(34.435), math.rad(6.875)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.003, -0.004, -0.015) * CFrame.Angles(math.rad(-28.934), math.rad(-12.433), math.rad(-2.636)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-55.061), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.385, 21.047) * CFrame.Angles(math.rad(-27.903), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.999, 0.786, -0.001) * CFrame.Angles(math.rad(-0.458), math.rad(0.229), math.rad(-6.474)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.034, -0.03, -0.004) * CFrame.Angles(math.rad(-1.662), math.rad(-0.859), math.rad(19.767)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, 0, -0.008) * CFrame.Angles(math.rad(-21.028), math.rad(36.727), math.rad(7.448)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.008, 0.014, 0.02) * CFrame.Angles(math.rad(-31.856), math.rad(-18.564), math.rad(-3.667)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-54.087), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.394, 17.246) * CFrame.Angles(math.rad(-28.591), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.032, 0.906, 0.009) * CFrame.Angles(math.rad(-0.516), math.rad(0.286), math.rad(-10.256)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.038, -0.052, -0.004) * CFrame.Angles(math.rad(-2.75), math.rad(-1.432), math.rad(20.684)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.001, -0.008) * CFrame.Angles(math.rad(-22.059), math.rad(38.445), math.rad(8.021)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.016, 0.064, 0.077) * CFrame.Angles(math.rad(-39.534), math.rad(-24.523), math.rad(-4.125)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-51.28), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.407, 14.36) * CFrame.Angles(math.rad(-29.679), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.061, 0.994, 0.025) * CFrame.Angles(math.rad(-0.401), math.rad(0.229), math.rad(-12.949)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.04, -0.076, -0.003) * CFrame.Angles(math.rad(-3.323), math.rad(-1.776), math.rad(21.887)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.001, -0.009) * CFrame.Angles(math.rad(-23.491), math.rad(39.591), math.rad(8.537)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.022, 0.135, 0.149) * CFrame.Angles(math.rad(-52.025), math.rad(-30.596), math.rad(-4.927)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-46.868), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.424, 12.244) * CFrame.Angles(math.rad(-31.054), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.087, 1.054, 0.045) * CFrame.Angles(math.rad(-0.115), math.rad(0.057), math.rad(-14.84)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.041, -0.1, -0.001) * CFrame.Angles(math.rad(-3.495), math.rad(-2.005), math.rad(23.319)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.001, -0.009) * CFrame.Angles(math.rad(-25.153), math.rad(40.394), math.rad(9.11)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.026, 0.221, 0.233) * CFrame.Angles(math.rad(-69.328), math.rad(-36.555), math.rad(-7.219)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-41.253), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.444, 10.754) * CFrame.Angles(math.rad(-32.659), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.109, 1.093, 0.068) * CFrame.Angles(math.rad(0.229), math.rad(-0.172), math.rad(-16.387)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.041, -0.123, 0.001) * CFrame.Angles(math.rad(-3.495), math.rad(-2.177), math.rad(24.924)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.002, -0.01) * CFrame.Angles(math.rad(-26.986), math.rad(40.909), math.rad(9.626)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.028, 0.312, 0.324) * CFrame.Angles(math.rad(-90.757), math.rad(-41.539), math.rad(-11.746)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-34.836), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.465, 9.747) * CFrame.Angles(math.rad(-34.435), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.128, 1.117, 0.094) * CFrame.Angles(math.rad(0.573), math.rad(-0.344), math.rad(-17.876)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.04, -0.143, 0.003) * CFrame.Angles(math.rad(-3.495), math.rad(-2.292), math.rad(26.643)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.002, -0.011) * CFrame.Angles(math.rad(-28.934), math.rad(41.31), math.rad(10.199)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.028, 0.404, 0.415) * CFrame.Angles(math.rad(-113.789), math.rad(-44.462), math.rad(-17.991)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-28.132), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.486, 9.079) * CFrame.Angles(math.rad(-36.211), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.143, 1.13, 0.122) * CFrame.Angles(math.rad(0.802), math.rad(-0.573), math.rad(-19.595)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.04, -0.16, 0.006) * CFrame.Angles(math.rad(-3.552), math.rad(-2.521), math.rad(28.361)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.003, -0.011) * CFrame.Angles(math.rad(-30.94), math.rad(41.654), math.rad(10.772)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.027, 0.49, 0.501) * CFrame.Angles(math.rad(-134.645), math.rad(-45.206), math.rad(-24.064)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-21.658), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.506, 8.608) * CFrame.Angles(math.rad(-37.987), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.155, 1.139, 0.15) * CFrame.Angles(math.rad(0.859), math.rad(-0.63), math.rad(-21.887)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.041, -0.172, 0.008) * CFrame.Angles(math.rad(-3.896), math.rad(-2.922), math.rad(29.966)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.003, -0.012) * CFrame.Angles(math.rad(-32.888), math.rad(42.112), math.rad(11.459)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.026, 0.562, 0.571) * CFrame.Angles(math.rad(-150.401), math.rad(-44.691), math.rad(-28.419)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-15.871), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.525, 8.188) * CFrame.Angles(math.rad(-39.649), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.162, 1.15, 0.177) * CFrame.Angles(math.rad(0.63), math.rad(-0.516), math.rad(-25.096)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.045, -0.178, 0.01) * CFrame.Angles(math.rad(-4.641), math.rad(-3.667), math.rad(31.341)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.003, -0.012) * CFrame.Angles(math.rad(-34.721), math.rad(42.685), math.rad(12.261)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.026, 0.612, 0.619) * CFrame.Angles(math.rad(-160.142), math.rad(-43.889), math.rad(-30.768)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.23), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.541, 7.677) * CFrame.Angles(math.rad(-41.138), 0, math.rad(180.023)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.165, 1.168, 0.203) * CFrame.Angles(math.rad(0.172), math.rad(-0.115), math.rad(-29.565)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.052, -0.178, 0.011) * CFrame.Angles(math.rad(-5.844), math.rad(-4.927), math.rad(32.372)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.004, -0.013) * CFrame.Angles(math.rad(-36.44), math.rad(43.659), math.rad(13.235)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.025, 0.631, 0.636) * CFrame.Angles(math.rad(-163.465), math.rad(-43.602), math.rad(-31.513)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.136), math.rad(-0.057), math.rad(0.516)),
					},
				},
			},
		},
		[2.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.006, 0.555, 6.939) * CFrame.Angles(math.rad(-42.399), math.rad(-0.401), math.rad(179.622)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.152, 1.212, 0.225) * CFrame.Angles(math.rad(-2.177), math.rad(1.948), math.rad(-35.294)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.059, -0.175, 0.012) * CFrame.Angles(math.rad(-7.219), math.rad(-6.245), math.rad(32.945)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.01, -0.004, -0.013) * CFrame.Angles(math.rad(-38.044), math.rad(44.863), math.rad(14.553)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.025, 0.631, 0.636) * CFrame.Angles(math.rad(-163.465), math.rad(-43.602), math.rad(-31.513)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.589), math.rad(-0.458), math.rad(0.859)),
					},
				},
			},
		},
		[2.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.021, 0.566, 5.98) * CFrame.Angles(math.rad(-43.487), math.rad(-1.49), math.rad(178.534)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.116, 1.292, 0.239) * CFrame.Angles(math.rad(-7.047), math.rad(6.532), math.rad(-41.196)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.063, -0.174, 0.013) * CFrame.Angles(math.rad(-8.193), math.rad(-7.277), math.rad(32.716)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.011, -0.004, -0.013) * CFrame.Angles(math.rad(-39.477), math.rad(46.238), math.rad(16.157)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.025, 0.631, 0.636) * CFrame.Angles(math.rad(-163.465), math.rad(-43.602), math.rad(-31.513)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.901), math.rad(-1.662), math.rad(1.833)),
					},
				},
			},
		},
		[2.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.043, 0.575, 4.87) * CFrame.Angles(math.rad(-44.404), math.rad(-3.037), math.rad(176.929)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.068, 1.403, 0.237) * CFrame.Angles(math.rad(-13.293), math.rad(12.433), math.rad(-45.894)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.063, -0.174, 0.014) * CFrame.Angles(math.rad(-8.652), math.rad(-7.85), math.rad(31.398)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.011, -0.004, -0.012) * CFrame.Angles(math.rad(-40.795), math.rad(47.441), math.rad(17.819)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.025, 0.631, 0.636) * CFrame.Angles(math.rad(-163.465), math.rad(-43.602), math.rad(-31.513)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.157), math.rad(-3.323), math.rad(3.323)),
					},
				},
			},
		},
		[2.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.07, 0.582, 3.678) * CFrame.Angles(math.rad(-45.206), math.rad(-4.927), math.rad(174.981)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.02, 1.537, 0.22) * CFrame.Angles(math.rad(-19.595), math.rad(18.163), math.rad(-47.899)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.056, -0.179, 0.017) * CFrame.Angles(math.rad(-8.48), math.rad(-7.792), math.rad(28.591)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.011, -0.004, -0.012) * CFrame.Angles(math.rad(-41.826), math.rad(48.415), math.rad(19.079)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.025, 0.631, 0.636) * CFrame.Angles(math.rad(-163.465), math.rad(-43.602), math.rad(-31.513)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.438), math.rad(-5.271), math.rad(5.271)),
					},
				},
			},
		},
		[2.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.099, 0.587, 2.475) * CFrame.Angles(math.rad(-45.951), math.rad(-6.933), math.rad(172.804)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.985, 1.687, 0.199) * CFrame.Angles(math.rad(-24.179), math.rad(22.173), math.rad(-46.41)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.041, -0.189, 0.022) * CFrame.Angles(math.rad(-7.334), math.rad(-6.761), math.rad(24.007)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.012, -0.004, -0.012) * CFrame.Angles(math.rad(-42.456), math.rad(48.816), math.rad(19.767)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.025, 0.631, 0.636) * CFrame.Angles(math.rad(-163.465), math.rad(-43.602), math.rad(-31.513)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.115), math.rad(-6.99), math.rad(7.735)),
					},
				},
			},
		},
		[2.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.128, 0.591, 1.33) * CFrame.Angles(math.rad(-46.639), math.rad(-8.938), math.rad(170.57)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.104, 2.085, 0.153) * CFrame.Angles(math.rad(-25.554), math.rad(23.549), math.rad(-34.607)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.018, -0.203, 0.027) * CFrame.Angles(math.rad(-5.443), math.rad(-4.985), math.rad(17.131)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.031, -0.038, -0.004) * CFrame.Angles(math.rad(-40.737), math.rad(49.618), math.rad(15.298)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.043, 0.567, 0.604) * CFrame.Angles(math.rad(-156.532), math.rad(-48.472), math.rad(-28.877)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(6.073), math.rad(-7.85), math.rad(9.912)),
					},
				},
			},
		},
		[2.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.154, 0.593, 0.316) * CFrame.Angles(math.rad(-47.212), math.rad(-10.772), math.rad(168.564)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.968, 2.241, 0.128) * CFrame.Angles(math.rad(-24.236), math.rad(22.746), math.rad(-33.575)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.008, -0.217, 0.032) * CFrame.Angles(math.rad(-3.38), math.rad(-2.922), math.rad(8.652)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.081, -0.12, 0.016) * CFrame.Angles(math.rad(-35.695), math.rad(50.707), math.rad(3.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.205, 0.417, 0.527) * CFrame.Angles(math.rad(-133.327), math.rad(-59.244), math.rad(-15.986)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(13.35), math.rad(-7.563), math.rad(11.058)),
					},
				},
			},
		},
		[2.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.175, 0.595, -0.497) * CFrame.Angles(math.rad(-47.727), math.rad(-12.261), math.rad(166.845)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.673, 2.204, 0.113) * CFrame.Angles(math.rad(-21.601), math.rad(20.798), math.rad(-40.279)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.037, -0.231, 0.035) * CFrame.Angles(math.rad(-1.432), math.rad(-0.917), math.rad(0.401)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.153, -0.219, 0.045) * CFrame.Angles(math.rad(-28.934), math.rad(50.649), math.rad(-11.86)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.396, 0.238, 0.44) * CFrame.Angles(math.rad(-88.407), math.rad(-65.145), math.rad(16.73)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(20.455), math.rad(-6.933), math.rad(11.001)),
					},
				},
			},
		},
		[2.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.189, 0.596, -1.038) * CFrame.Angles(math.rad(-48.071), math.rad(-13.235), math.rad(165.699)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.465, 2.211, 0.092) * CFrame.Angles(math.rad(-19.194), math.rad(18.85), math.rad(-44.175)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.063, -0.241, 0.037) * CFrame.Angles(math.rad(0.172), math.rad(0.688), math.rad(-5.787)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.236, -0.302, 0.077) * CFrame.Angles(math.rad(-23.491), math.rad(48.759), math.rad(-26.07)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.556, 0.083, 0.37) * CFrame.Angles(math.rad(-51.394), math.rad(-60.447), math.rad(43.831)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(25.84), math.rad(-6.704), math.rad(9.912)),
					},
				},
			},
		},
		[2.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.194, 0.596, -1.234) * CFrame.Angles(math.rad(-48.186), math.rad(-13.636), math.rad(165.241)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.409, 2.245, 0.081) * CFrame.Angles(math.rad(-18.22), math.rad(18.048), math.rad(-44.519)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.083, -0.246, 0.038) * CFrame.Angles(math.rad(0.802), math.rad(1.375), math.rad(-8.422)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.322, -0.339, 0.107) * CFrame.Angles(math.rad(-21.715), math.rad(45.607), math.rad(-34.893)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.623, 0.008, 0.342) * CFrame.Angles(math.rad(-40.222), math.rad(-56.78), math.rad(51.051)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(28.247), math.rad(-7.678), math.rad(8.021)),
					},
				},
			},
		},
		[2.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.193, 0.595, -1.221) * CFrame.Angles(math.rad(-48.128), math.rad(-13.522), math.rad(165.356)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.421, 2.228, 0.095) * CFrame.Angles(math.rad(-18.048), math.rad(17.876), math.rad(-44.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.108, -0.242, 0.036) * CFrame.Angles(math.rad(0.802), math.rad(1.375), math.rad(-8.881)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.401, -0.341, 0.132) * CFrame.Angles(math.rad(-22.861), math.rad(41.998), math.rad(-39.362)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.605, -0.007, 0.353) * CFrame.Angles(math.rad(-41.998), math.rad(-57.238), math.rad(49.045)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(27.559), math.rad(-9.568), math.rad(5.558)),
					},
				},
			},
		},
		[2.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.19, 0.594, -1.187) * CFrame.Angles(math.rad(-47.957), math.rad(-13.35), math.rad(165.585)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.454, 2.183, 0.131) * CFrame.Angles(math.rad(-17.59), math.rad(17.475), math.rad(-44.977)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.151, -0.233, 0.032) * CFrame.Angles(math.rad(0.688), math.rad(1.318), math.rad(-9.454)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.471, -0.343, 0.152) * CFrame.Angles(math.rad(-25.267), math.rad(38.159), math.rad(-42.743)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.556, -0.019, 0.383) * CFrame.Angles(math.rad(-47.097), math.rad(-58.384), math.rad(43.258)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(24.924), math.rad(-11.746), math.rad(2.75)),
					},
				},
			},
		},
		[2.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.185, 0.592, -1.135) * CFrame.Angles(math.rad(-47.67), math.rad(-13.006), math.rad(165.929)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.503, 2.113, 0.184) * CFrame.Angles(math.rad(-16.902), math.rad(16.788), math.rad(-45.55)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.206, -0.219, 0.025) * CFrame.Angles(math.rad(0.516), math.rad(1.203), math.rad(-10.141)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.531, -0.345, 0.168) * CFrame.Angles(math.rad(-28.476), math.rad(34.206), math.rad(-45.378)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.485, -0.029, 0.429) * CFrame.Angles(math.rad(-55.405), math.rad(-59.53), math.rad(34.034)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(20.684), math.rad(-13.923), math.rad(-0.401)),
					},
				},
			},
		},
		[2.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.179, 0.59, -1.069) * CFrame.Angles(math.rad(-47.269), math.rad(-12.605), math.rad(166.444)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.615, 2.082, 0.248) * CFrame.Angles(math.rad(-15.986), math.rad(15.928), math.rad(-43.889)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.27, -0.201, 0.017) * CFrame.Angles(math.rad(0.229), math.rad(0.974), math.rad(-10.886)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.581, -0.345, 0.181) * CFrame.Angles(math.rad(-32.315), math.rad(30.023), math.rad(-47.67)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.398, -0.036, 0.484) * CFrame.Angles(math.rad(-66.406), math.rad(-59.989), math.rad(22.059)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(15.298), math.rad(-15.756), math.rad(-3.896)),
					},
				},
			},
		},
		[2.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.172, 0.586, -0.994) * CFrame.Angles(math.rad(-46.753), math.rad(-12.089), math.rad(167.017)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.8, 2.13, 0.311) * CFrame.Angles(math.rad(-14.897), math.rad(14.897), math.rad(-38.961)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.336, -0.181, 0.008) * CFrame.Angles(math.rad(-0.229), math.rad(0.688), math.rad(-11.631)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.623, -0.344, 0.19) * CFrame.Angles(math.rad(-36.44), math.rad(25.726), math.rad(-49.905)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.304, -0.042, 0.545) * CFrame.Angles(math.rad(-78.724), math.rad(-59.301), math.rad(8.881)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(9.225), math.rad(-17.074), math.rad(-7.563)),
					},
				},
			},
		},
		[2.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.163, 0.581, -0.915) * CFrame.Angles(math.rad(-46.123), math.rad(-11.459), math.rad(167.705)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.919, 2.095, 0.376) * CFrame.Angles(math.rad(-13.636), math.rad(13.751), math.rad(-37.07)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.4, -0.16, -0.001) * CFrame.Angles(math.rad(-0.802), math.rad(0.286), math.rad(-12.376)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.656, -0.342, 0.197) * CFrame.Angles(math.rad(-40.795), math.rad(21.314), math.rad(-52.254)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.209, -0.046, 0.608) * CFrame.Angles(math.rad(-90.527), math.rad(-57.238), math.rad(-3.552)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.979), math.rad(-17.762), math.rad(-11.23)),
					},
				},
			},
		},
		[2.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.154, 0.576, -0.835) * CFrame.Angles(math.rad(-45.436), math.rad(-10.772), math.rad(168.45)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.009, 2.026, 0.438) * CFrame.Angles(math.rad(-12.376), math.rad(12.548), math.rad(-36.44)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.456, -0.139, -0.01) * CFrame.Angles(math.rad(-1.49), math.rad(-0.229), math.rad(-13.063)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.681, -0.337, 0.202) * CFrame.Angles(math.rad(-45.206), math.rad(16.902), math.rad(-54.889)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.123, -0.049, 0.667) * CFrame.Angles(math.rad(-100.611), math.rad(-54.316), math.rad(-13.808)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.75), math.rad(-17.762), math.rad(-14.496)),
					},
				},
			},
		},
		[2.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.143, 0.569, -0.759) * CFrame.Angles(math.rad(-44.576), math.rad(-10.027), math.rad(169.309)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.072, 1.932, 0.49) * CFrame.Angles(math.rad(-11.115), math.rad(11.345), math.rad(-36.727)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.501, -0.119, -0.018) * CFrame.Angles(math.rad(-2.349), math.rad(-0.859), math.rad(-13.751)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.698, -0.331, 0.206) * CFrame.Angles(math.rad(-49.504), math.rad(12.548), math.rad(-57.983)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.051, -0.052, 0.718) * CFrame.Angles(math.rad(-108.69), math.rad(-51.165), math.rad(-21.486)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.277), math.rad(-17.246), math.rad(-17.246)),
					},
				},
			},
		},
		[3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.132, 0.56, -0.692) * CFrame.Angles(math.rad(-43.659), math.rad(-9.282), math.rad(170.168)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.105, 1.817, 0.528) * CFrame.Angles(math.rad(-10.084), math.rad(10.313), math.rad(-37.873)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.528, -0.103, -0.023) * CFrame.Angles(math.rad(-3.323), math.rad(-1.49), math.rad(-14.381)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.707, -0.321, 0.209) * CFrame.Angles(math.rad(-53.572), math.rad(8.308), math.rad(-61.536)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.003, -0.054, 0.756) * CFrame.Angles(math.rad(-115.165), math.rad(-48.415), math.rad(-26.7)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.199), math.rad(-16.329), math.rad(-19.251)),
					},
				},
			},
		},
		[3.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.121, 0.551, -0.638) * CFrame.Angles(math.rad(-42.628), math.rad(-8.422), math.rad(171.028)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.101, 1.681, 0.546) * CFrame.Angles(math.rad(-9.282), math.rad(9.454), math.rad(-39.992)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.534, -0.09, -0.026) * CFrame.Angles(math.rad(-4.354), math.rad(-2.235), math.rad(-15.011)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.709, -0.309, 0.211) * CFrame.Angles(math.rad(-57.296), math.rad(4.412), math.rad(-65.718)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.014, -0.055, 0.776) * CFrame.Angles(math.rad(-120.493), math.rad(-46.811), math.rad(-29.794)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.943), math.rad(-15.241), math.rad(-20.397)),
					},
				},
			},
		},
		[3.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.109, 0.54, -0.594) * CFrame.Angles(math.rad(-41.482), math.rad(-7.62), math.rad(171.945)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.072, 1.532, 0.548) * CFrame.Angles(math.rad(-8.709), math.rad(8.824), math.rad(-42.456)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.515, -0.084, -0.026) * CFrame.Angles(math.rad(-5.5), math.rad(-2.922), math.rad(-15.47)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.708, -0.287, 0.214) * CFrame.Angles(math.rad(-60.103), math.rad(0.458), math.rad(-70.646)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.014, -0.057, 0.785) * CFrame.Angles(math.rad(-124.733), math.rad(-45.894), math.rad(-30.481)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.313), math.rad(-14.095), math.rad(-21.199)),
					},
				},
			},
		},
		[3.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.097, 0.528, -0.556) * CFrame.Angles(math.rad(-40.222), math.rad(-6.761), math.rad(172.804)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.033, 1.382, 0.547) * CFrame.Angles(math.rad(-8.136), math.rad(8.193), math.rad(-44.462)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.473, -0.082, -0.023) * CFrame.Angles(math.rad(-6.532), math.rad(-3.495), math.rad(-15.699)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.706, -0.251, 0.214) * CFrame.Angles(math.rad(-61.708), math.rad(-3.724), math.rad(-76.203)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.014, -0.06, 0.793) * CFrame.Angles(math.rad(-127.999), math.rad(-45.034), math.rad(-28.762)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.568), math.rad(-12.777), math.rad(-22.059)),
					},
				},
			},
		},
		[3.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.085, 0.514, -0.524) * CFrame.Angles(math.rad(-38.961), math.rad(-5.901), math.rad(173.664)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.975, 1.226, 0.541) * CFrame.Angles(math.rad(-7.62), math.rad(7.563), math.rad(-46.352)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.415, -0.086, -0.018) * CFrame.Angles(math.rad(-7.563), math.rad(-4.011), math.rad(-15.814)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.703, -0.205, 0.214) * CFrame.Angles(math.rad(-62.624), math.rad(-8.136), math.rad(-82.219)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.014, -0.064, 0.799) * CFrame.Angles(math.rad(-130.462), math.rad(-44.347), math.rad(-24.924)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.709), math.rad(-11.345), math.rad(-22.861)),
					},
				},
			},
		},
		[3.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.073, 0.5, -0.497) * CFrame.Angles(math.rad(-37.643), math.rad(-5.099), math.rad(174.408)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.861, 1.027, 0.531) * CFrame.Angles(math.rad(-7.162), math.rad(7.047), math.rad(-50.019)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.347, -0.093, -0.012) * CFrame.Angles(math.rad(-8.48), math.rad(-4.412), math.rad(-15.814)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.698, -0.154, 0.212) * CFrame.Angles(math.rad(-63.083), math.rad(-12.605), math.rad(-88.236)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.015, -0.069, 0.805) * CFrame.Angles(math.rad(-132.353), math.rad(-44.003), math.rad(-19.309)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.735), math.rad(-9.855), math.rad(-23.663)),
					},
				},
			},
		},
		[3.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.062, 0.486, -0.474) * CFrame.Angles(math.rad(-36.326), math.rad(-4.354), math.rad(175.153)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.849, 0.978, 0.515) * CFrame.Angles(math.rad(-6.818), math.rad(6.532), math.rad(-48.071)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.273, -0.101, -0.005) * CFrame.Angles(math.rad(-9.339), math.rad(-4.756), math.rad(-15.814)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.692, -0.1, 0.211) * CFrame.Angles(math.rad(-63.369), math.rad(-17.017), math.rad(-94.137)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.015, -0.076, 0.81) * CFrame.Angles(math.rad(-133.614), math.rad(-44.003), math.rad(-12.261)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.704), math.rad(-8.308), math.rad(-24.465)),
					},
				},
			},
		},
		[3.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.052, 0.471, -0.456) * CFrame.Angles(math.rad(-35.065), math.rad(-3.61), math.rad(175.726)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.835, 0.938, 0.497) * CFrame.Angles(math.rad(-6.532), math.rad(6.131), math.rad(-45.894)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.2, -0.11, 0.003) * CFrame.Angles(math.rad(-10.084), math.rad(-4.927), math.rad(-15.871)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.683, -0.047, 0.208) * CFrame.Angles(math.rad(-63.541), math.rad(-21.085), math.rad(-99.523)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.014, -0.083, 0.815) * CFrame.Angles(math.rad(-134.416), math.rad(-44.29), math.rad(-4.011)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.558), math.rad(-6.818), math.rad(-25.21)),
					},
				},
			},
		},
		[3.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.043, 0.457, -0.441) * CFrame.Angles(math.rad(-33.805), math.rad(-2.979), math.rad(176.299)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.822, 0.907, 0.478) * CFrame.Angles(math.rad(-6.36), math.rad(5.844), math.rad(-43.659)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.133, -0.119, 0.01) * CFrame.Angles(math.rad(-10.772), math.rad(-5.099), math.rad(-15.986)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.67, 0, 0.206) * CFrame.Angles(math.rad(-63.713), math.rad(-24.637), math.rad(-104.164)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.012, -0.092, 0.82) * CFrame.Angles(math.rad(-134.588), math.rad(-44.863), math.rad(4.87)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.412), math.rad(-5.271), math.rad(-25.898)),
					},
				},
			},
		},
		[3.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.035, 0.443, -0.429) * CFrame.Angles(math.rad(-32.601), math.rad(-2.464), math.rad(176.7)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.809, 0.884, 0.461) * CFrame.Angles(math.rad(-6.245), math.rad(5.615), math.rad(-41.425)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.079, -0.126, 0.015) * CFrame.Angles(math.rad(-11.402), math.rad(-5.157), math.rad(-16.329)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.652, 0.038, 0.203) * CFrame.Angles(math.rad(-63.885), math.rad(-27.445), math.rad(-107.888)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.008, -0.102, 0.825) * CFrame.Angles(math.rad(-134.129), math.rad(-45.722), math.rad(14.095)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.266), math.rad(-3.782), math.rad(-26.585)),
					},
				},
			},
		},
		[3.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.029, 0.429, -0.42) * CFrame.Angles(math.rad(-31.513), math.rad(-2.063), math.rad(176.987)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.8, 0.867, 0.444) * CFrame.Angles(math.rad(-6.303), math.rad(5.5), math.rad(-39.419)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.042, -0.13, 0.019) * CFrame.Angles(math.rad(-11.918), math.rad(-5.157), math.rad(-16.902)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.629, 0.063, 0.202) * CFrame.Angles(math.rad(-63.942), math.rad(-29.278), math.rad(-110.237)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.001, -0.113, 0.829) * CFrame.Angles(math.rad(-133.155), math.rad(-46.696), math.rad(23.033)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.12), math.rad(-2.406), math.rad(-27.101)),
					},
				},
			},
		},
		[3.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.026, 0.417, -0.412) * CFrame.Angles(math.rad(-30.481), math.rad(-1.776), math.rad(177.101)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.794, 0.855, 0.431) * CFrame.Angles(math.rad(-6.417), math.rad(5.443), math.rad(-37.701)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.029, -0.129, 0.019) * CFrame.Angles(math.rad(-12.376), math.rad(-5.042), math.rad(-17.819)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.599, 0.072, 0.201) * CFrame.Angles(math.rad(-63.999), math.rad(-29.966), math.rad(-111.097)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.009, -0.127, 0.833) * CFrame.Angles(math.rad(-131.666), math.rad(-47.842), math.rad(31.283)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.031), math.rad(-1.089), math.rad(-27.559)),
					},
				},
			},
		},
		[3.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.023, 0.405, -0.405) * CFrame.Angles(math.rad(-29.565), math.rad(-1.604), math.rad(177.044)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.789, 0.847, 0.419) * CFrame.Angles(math.rad(-6.589), math.rad(5.615), math.rad(-36.154)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.03, -0.125, 0.019) * CFrame.Angles(math.rad(-12.777), math.rad(-4.813), math.rad(-18.793)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.349, -0.037, 0.233) * CFrame.Angles(math.rad(-58.27), math.rad(-26.814), math.rad(-105.138)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.022, -0.142, 0.835) * CFrame.Angles(math.rad(-129.718), math.rad(-49.16), math.rad(38.388)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.057), math.rad(0.172), math.rad(-27.846)),
					},
				},
			},
		},
		[3.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.019, 0.395, -0.399) * CFrame.Angles(math.rad(-28.705), math.rad(-1.375), math.rad(176.757)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.783, 0.84, 0.407) * CFrame.Angles(math.rad(-6.818), math.rad(6.073), math.rad(-34.607)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.033, -0.122, 0.018) * CFrame.Angles(math.rad(-13.178), math.rad(-4.354), math.rad(-19.652)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.079, -0.241, 0.301) * CFrame.Angles(math.rad(-48.128), math.rad(-17.475), math.rad(-93.908)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.039, -0.161, 0.837) * CFrame.Angles(math.rad(-127.426), math.rad(-50.707), math.rad(44.003)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.031), math.rad(1.547), math.rad(-27.903)),
					},
				},
			},
		},
		[3.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.016, 0.385, -0.394) * CFrame.Angles(math.rad(-27.903), math.rad(-1.089), math.rad(176.242)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.774, 0.833, 0.396) * CFrame.Angles(math.rad(-7.105), math.rad(6.704), math.rad(-33.002)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.038, -0.118, 0.018) * CFrame.Angles(math.rad(-13.579), math.rad(-3.724), math.rad(-20.283)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.305, -0.352, 0.365) * CFrame.Angles(math.rad(-41.941), math.rad(-5.157), math.rad(-85.829)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.06, -0.184, 0.838) * CFrame.Angles(math.rad(-124.848), math.rad(-52.54), math.rad(47.785)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.948), math.rad(2.979), math.rad(-27.731)),
					},
				},
			},
		},
		[3.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.011, 0.376, -0.389) * CFrame.Angles(math.rad(-27.215), math.rad(-0.802), math.rad(175.554)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.763, 0.827, 0.384) * CFrame.Angles(math.rad(-7.448), math.rad(7.62), math.rad(-31.341)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.045, -0.115, 0.018) * CFrame.Angles(math.rad(-13.98), math.rad(-2.865), math.rad(-20.741)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.304, -0.354, 0.412) * CFrame.Angles(math.rad(-40.222), math.rad(6.245), math.rad(-81.131)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.088, -0.213, 0.833) * CFrame.Angles(math.rad(-121.754), math.rad(-54.431), math.rad(50.879)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.807), math.rad(4.469), math.rad(-27.445)),
					},
				},
			},
		},
		[3.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.007, 0.367, -0.385) * CFrame.Angles(math.rad(-26.528), math.rad(-0.458), math.rad(174.752)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.751, 0.821, 0.373) * CFrame.Angles(math.rad(-7.85), math.rad(8.652), math.rad(-29.737)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.052, -0.111, 0.018) * CFrame.Angles(math.rad(-14.439), math.rad(-1.891), math.rad(-21.085)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.3, -0.355, 0.454) * CFrame.Angles(math.rad(-40.222), math.rad(16.96), math.rad(-76.719)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.124, -0.253, 0.816) * CFrame.Angles(math.rad(-117.743), math.rad(-55.921), math.rad(54.488)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.552), math.rad(6.016), math.rad(-26.986)),
					},
				},
			},
		},
		[3.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.002, 0.36, -0.381) * CFrame.Angles(math.rad(-25.955), math.rad(-0.172), math.rad(173.778)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.738, 0.816, 0.362) * CFrame.Angles(math.rad(-8.308), math.rad(9.855), math.rad(-28.075)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.061, -0.108, 0.017) * CFrame.Angles(math.rad(-14.84), math.rad(-0.859), math.rad(-21.314)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.296, -0.356, 0.491) * CFrame.Angles(math.rad(-41.769), math.rad(26.814), math.rad(-72.135)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.168, -0.302, 0.791) * CFrame.Angles(math.rad(-112.987), math.rad(-57.009), math.rad(58.499)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.183), math.rad(7.62), math.rad(-26.413)),
					},
				},
			},
		},
		[3.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.002, 0.353, -0.378) * CFrame.Angles(math.rad(-25.382), math.rad(0.172), math.rad(172.632)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.724, 0.812, 0.35) * CFrame.Angles(math.rad(-8.766), math.rad(11.23), math.rad(-26.413)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.07, -0.105, 0.017) * CFrame.Angles(math.rad(-15.241), math.rad(0.344), math.rad(-21.371)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.29, -0.357, 0.524) * CFrame.Angles(math.rad(-44.92), math.rad(35.523), math.rad(-66.864)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.217, -0.358, 0.758) * CFrame.Angles(math.rad(-107.601), math.rad(-57.697), math.rad(62.968)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.698), math.rad(9.225), math.rad(-25.726)),
					},
				},
			},
		},
		[3.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.007, 0.346, -0.375) * CFrame.Angles(math.rad(-24.866), math.rad(0.458), math.rad(171.486)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.71, 0.808, 0.339) * CFrame.Angles(math.rad(-9.339), math.rad(12.605), math.rad(-24.809)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.08, -0.101, 0.016) * CFrame.Angles(math.rad(-15.642), math.rad(1.604), math.rad(-21.314)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.283, -0.357, 0.553) * CFrame.Angles(math.rad(-49.905), math.rad(43.086), math.rad(-60.562)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.271, -0.42, 0.718) * CFrame.Angles(math.rad(-101.757), math.rad(-57.983), math.rad(67.609)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.157), math.rad(10.829), math.rad(-24.924)),
					},
				},
			},
		},
		[3.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.011, 0.34, -0.372) * CFrame.Angles(math.rad(-24.465), math.rad(0.802), math.rad(170.226)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.695, 0.805, 0.327) * CFrame.Angles(math.rad(-9.912), math.rad(14.095), math.rad(-23.205)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.091, -0.098, 0.015) * CFrame.Angles(math.rad(-16.1), math.rad(2.865), math.rad(-21.199)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.274, -0.358, 0.579) * CFrame.Angles(math.rad(-56.837), math.rad(49.332), math.rad(-52.827)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.329, -0.487, 0.672) * CFrame.Angles(math.rad(-95.741), math.rad(-57.811), math.rad(72.307)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.443), math.rad(12.433), math.rad(-24.064)),
					},
				},
			},
		},
		[3.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.016, 0.335, -0.37) * CFrame.Angles(math.rad(-24.064), math.rad(1.089), math.rad(168.965)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.68, 0.802, 0.316) * CFrame.Angles(math.rad(-10.542), math.rad(15.584), math.rad(-21.601)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.101, -0.095, 0.014) * CFrame.Angles(math.rad(-16.501), math.rad(4.183), math.rad(-20.97)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.264, -0.358, 0.601) * CFrame.Angles(math.rad(-65.833), math.rad(54.087), math.rad(-43.43)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.389, -0.556, 0.623) * CFrame.Angles(math.rad(-89.668), math.rad(-57.296), math.rad(76.834)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.615), math.rad(13.98), math.rad(-23.147)),
					},
				},
			},
		},
		[3.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.02, 0.33, -0.368) * CFrame.Angles(math.rad(-23.663), math.rad(1.375), math.rad(167.647)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.666, 0.799, 0.304) * CFrame.Angles(math.rad(-11.173), math.rad(17.131), math.rad(-20.054)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.112, -0.093, 0.013) * CFrame.Angles(math.rad(-16.902), math.rad(5.5), math.rad(-20.684)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.252, -0.358, 0.62) * CFrame.Angles(math.rad(-76.604), math.rad(57.124), math.rad(-32.773)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.451, -0.627, 0.572) * CFrame.Angles(math.rad(-83.824), math.rad(-56.322), math.rad(81.016)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.73), math.rad(15.527), math.rad(-22.173)),
					},
				},
			},
		},
		[3.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.024, 0.326, -0.366) * CFrame.Angles(math.rad(-23.377), math.rad(1.662), math.rad(166.387)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.651, 0.797, 0.293) * CFrame.Angles(math.rad(-11.803), math.rad(18.621), math.rad(-18.564)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.122, -0.09, 0.011) * CFrame.Angles(math.rad(-17.246), math.rad(6.761), math.rad(-20.34)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.239, -0.358, 0.636) * CFrame.Angles(math.rad(-88.064), math.rad(58.556), math.rad(-21.543)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.512, -0.698, 0.518) * CFrame.Angles(math.rad(-78.323), math.rad(-55.119), math.rad(84.798)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.73), math.rad(16.96), math.rad(-21.199)),
					},
				},
			},
		},
		[3.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.028, 0.322, -0.364) * CFrame.Angles(math.rad(-23.09), math.rad(1.948), math.rad(165.126)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.638, 0.794, 0.282) * CFrame.Angles(math.rad(-12.49), math.rad(20.054), math.rad(-17.131)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.132, -0.088, 0.009) * CFrame.Angles(math.rad(-17.647), math.rad(8.021), math.rad(-19.996)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.223, -0.358, 0.649) * CFrame.Angles(math.rad(-99.122), math.rad(58.499), math.rad(-11.001)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.572, -0.767, 0.465) * CFrame.Angles(math.rad(-73.339), math.rad(-53.686), math.rad(88.006)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.672), math.rad(18.277), math.rad(-20.168)),
					},
				},
			},
		},
		[3.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.031, 0.319, -0.363) * CFrame.Angles(math.rad(-22.804), math.rad(2.177), math.rad(163.923)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.625, 0.792, 0.271) * CFrame.Angles(math.rad(-13.121), math.rad(21.371), math.rad(-15.756)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.142, -0.085, 0.007) * CFrame.Angles(math.rad(-17.991), math.rad(9.167), math.rad(-19.595)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.204, -0.359, 0.66) * CFrame.Angles(math.rad(-108.805), math.rad(57.353), math.rad(-2.063)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.63, -0.834, 0.414) * CFrame.Angles(math.rad(-68.87), math.rad(-52.082), math.rad(90.699)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.5), math.rad(19.538), math.rad(-19.251)),
					},
				},
			},
		},
		[3.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.034, 0.316, -0.362) * CFrame.Angles(math.rad(-22.632), math.rad(2.406), math.rad(162.777)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.613, 0.789, 0.261) * CFrame.Angles(math.rad(-13.808), math.rad(22.632), math.rad(-14.439)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.15, -0.083, 0.005) * CFrame.Angles(math.rad(-18.335), math.rad(10.256), math.rad(-19.137)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.183, -0.359, 0.668) * CFrame.Angles(math.rad(-116.654), math.rad(55.52), math.rad(5.042)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.684, -0.896, 0.365) * CFrame.Angles(math.rad(-64.973), math.rad(-50.478), math.rad(92.876)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.329), math.rad(20.684), math.rad(-18.335)),
					},
				},
			},
		},
		[3.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.037, 0.314, -0.361) * CFrame.Angles(math.rad(-22.46), math.rad(2.578), math.rad(161.803)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.602, 0.787, 0.252) * CFrame.Angles(math.rad(-14.381), math.rad(23.778), math.rad(-13.293)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.158, -0.082, 0.004) * CFrame.Angles(math.rad(-18.621), math.rad(11.173), math.rad(-18.793)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.159, -0.359, 0.674) * CFrame.Angles(math.rad(-122.785), math.rad(53.4), math.rad(10.371)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.733, -0.953, 0.32) * CFrame.Angles(math.rad(-61.593), math.rad(-48.873), math.rad(94.595)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.042), math.rad(21.658), math.rad(-17.475)),
					},
				},
			},
		},
		[3.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.039, 0.312, -0.361) * CFrame.Angles(math.rad(-22.288), math.rad(2.75), math.rad(160.944)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.593, 0.784, 0.243) * CFrame.Angles(math.rad(-14.954), math.rad(24.752), math.rad(-12.204)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.165, -0.081, 0.002) * CFrame.Angles(math.rad(-18.908), math.rad(12.032), math.rad(-18.392)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.132, -0.359, 0.679) * CFrame.Angles(math.rad(-127.426), math.rad(51.28), math.rad(14.152)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.777, -1.002, 0.28) * CFrame.Angles(math.rad(-58.843), math.rad(-47.384), math.rad(95.913)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.813), math.rad(22.517), math.rad(-16.73)),
					},
				},
			},
		},
		[3.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.041, 0.31, -0.36) * CFrame.Angles(math.rad(-22.173), math.rad(2.865), math.rad(160.199)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.585, 0.781, 0.236) * CFrame.Angles(math.rad(-15.413), math.rad(25.554), math.rad(-11.287)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.17, -0.08, 0) * CFrame.Angles(math.rad(-19.079), math.rad(12.72), math.rad(-18.105)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.101, -0.359, 0.682) * CFrame.Angles(math.rad(-130.749), math.rad(49.389), math.rad(16.73)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.813, -1.043, 0.247) * CFrame.Angles(math.rad(-56.666), math.rad(-46.123), math.rad(96.83)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.584), math.rad(23.205), math.rad(-16.1)),
					},
				},
			},
		},
		[3.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.043, 0.309, -0.36) * CFrame.Angles(math.rad(-22.116), math.rad(2.979), math.rad(159.683)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.579, 0.778, 0.229) * CFrame.Angles(math.rad(-15.814), math.rad(26.127), math.rad(-10.485)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.174, -0.079, -0.001) * CFrame.Angles(math.rad(-19.194), math.rad(13.293), math.rad(-17.876)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.066, -0.359, 0.684) * CFrame.Angles(math.rad(-133.041), math.rad(47.899), math.rad(18.392)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.841, -1.074, 0.221) * CFrame.Angles(math.rad(-55.061), math.rad(-45.149), math.rad(97.46)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.412), math.rad(23.663), math.rad(-15.584)),
					},
				},
			},
		},
		[3.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.044, 0.309, -0.36) * CFrame.Angles(math.rad(-22.116), math.rad(3.037), math.rad(159.34)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.574, 0.774, 0.224) * CFrame.Angles(math.rad(-16.157), math.rad(26.528), math.rad(-9.912)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.176, -0.079, -0.001) * CFrame.Angles(math.rad(-19.251), math.rad(13.636), math.rad(-17.704)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.027, -0.359, 0.685) * CFrame.Angles(math.rad(-134.359), math.rad(46.925), math.rad(19.309)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.859, -1.094, 0.205) * CFrame.Angles(math.rad(-54.087), math.rad(-44.519), math.rad(97.804)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.297), math.rad(24.007), math.rad(-15.298)),
					},
				},
			},
		},
		[3.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.044, 0.309, -0.36) * CFrame.Angles(math.rad(-22.059), math.rad(3.094), math.rad(159.225)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.572, 0.77, 0.221) * CFrame.Angles(math.rad(-16.329), math.rad(26.7), math.rad(-9.511)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.177, -0.08, -0.001) * CFrame.Angles(math.rad(-19.251), math.rad(13.751), math.rad(-17.647)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.016, -0.359, 0.685) * CFrame.Angles(math.rad(-134.817), math.rad(46.581), math.rad(19.652)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.866, -1.101, 0.2) * CFrame.Angles(math.rad(-53.743), math.rad(-44.29), math.rad(97.918)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.24), math.rad(24.122), math.rad(-15.183)),
					},
				},
			},
		},
		[3.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.038, 0.315, -0.362) * CFrame.Angles(math.rad(-22.517), math.rad(2.693), math.rad(160.485)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.58, 0.763, 0.225) * CFrame.Angles(math.rad(-15.986), math.rad(25.439), math.rad(-10.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.167, -0.086, 0.002) * CFrame.Angles(math.rad(-18.449), math.rad(12.605), math.rad(-18.048)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.127, -0.478, 0.652) * CFrame.Angles(math.rad(-127.655), math.rad(49.79), math.rad(8.193)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.868, -1.06, 0.237) * CFrame.Angles(math.rad(-56.15), math.rad(-44.118), math.rad(97.288)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.641), math.rad(22.575), math.rad(-15.527)),
					},
				},
			},
		},
		[3.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.022, 0.329, -0.367) * CFrame.Angles(math.rad(-23.606), math.rad(1.547), math.rad(163.866)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.606, 0.753, 0.238) * CFrame.Angles(math.rad(-15.011), math.rad(21.944), math.rad(-13.178)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.139, -0.101, 0.011) * CFrame.Angles(math.rad(-16.444), math.rad(9.454), math.rad(-18.965)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.237, -0.596, 0.621) * CFrame.Angles(math.rad(-118.889), math.rad(52.025), math.rad(-4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.868, -0.951, 0.334) * CFrame.Angles(math.rad(-62.395), math.rad(-43.43), math.rad(95.627)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.5), math.rad(18.449), math.rad(-16.387)),
					},
				},
			},
		},
		[3.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.002, 0.348, -0.375) * CFrame.Angles(math.rad(-24.981), math.rad(-0.172), math.rad(168.679)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.646, 0.742, 0.256) * CFrame.Angles(math.rad(-13.923), math.rad(16.788), math.rad(-17.303)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.099, -0.122, 0.021) * CFrame.Angles(math.rad(-13.751), math.rad(4.87), math.rad(-20.054)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.346, -0.714, 0.589) * CFrame.Angles(math.rad(-108.919), math.rad(52.941), math.rad(-19.251)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.869, -0.796, 0.473) * CFrame.Angles(math.rad(-71.276), math.rad(-42.342), math.rad(93.449)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(6.188), math.rad(12.49), math.rad(-17.361)),
					},
				},
			},
		},
		[3.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.033, 0.366, -0.385) * CFrame.Angles(math.rad(-26.471), math.rad(-2.292), math.rad(174.294)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.697, 0.732, 0.272) * CFrame.Angles(math.rad(-13.121), math.rad(10.6), math.rad(-22.059)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.052, -0.147, 0.026) * CFrame.Angles(math.rad(-10.829), math.rad(-0.573), math.rad(-20.97)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.456, -0.832, 0.559) * CFrame.Angles(math.rad(-98.778), math.rad(52.254), math.rad(-33.805)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.868, -0.617, 0.631) * CFrame.Angles(math.rad(-81.245), math.rad(-40.737), math.rad(91.215)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(6.245), math.rad(5.5), math.rad(-18.22)),
					},
				},
			},
		},
		[3.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.067, 0.381, -0.395) * CFrame.Angles(math.rad(-27.674), math.rad(-4.641), math.rad(179.909)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.751, 0.725, 0.282) * CFrame.Angles(math.rad(-12.777), math.rad(4.125), math.rad(-26.872)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.003, -0.171, 0.025) * CFrame.Angles(math.rad(-8.021), math.rad(-6.131), math.rad(-21.601)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.566, -0.95, 0.529) * CFrame.Angles(math.rad(-89.553), math.rad(50.077), math.rad(-47.555)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.868, -0.436, 0.79) * CFrame.Angles(math.rad(-90.986), math.rad(-38.904), math.rad(89.324)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.615), math.rad(-1.49), math.rad(-19.022)),
					},
				},
			},
		},
		[3.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.098, 0.391, -0.403) * CFrame.Angles(math.rad(-28.591), math.rad(-6.818), math.rad(-175.096)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.876, 0.766, 0.273) * CFrame.Angles(math.rad(-12.892), math.rad(-1.604), math.rad(-28.591)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.04, -0.193, 0.02) * CFrame.Angles(math.rad(-5.558), math.rad(-11.173), math.rad(-21.944)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.677, -1.067, 0.5) * CFrame.Angles(math.rad(-81.876), math.rad(46.696), math.rad(-59.759)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.867, -0.275, 0.928) * CFrame.Angles(math.rad(-99.351), math.rad(-37.128), math.rad(87.949)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.469), math.rad(-7.62), math.rad(-19.71)),
					},
				},
			},
		},
		[3.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.122, 0.395, -0.41) * CFrame.Angles(math.rad(-29.049), math.rad(-8.537), math.rad(-171.372)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.995, 0.827, 0.241) * CFrame.Angles(math.rad(-13.293), math.rad(-5.901), math.rad(-28.648)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.072, -0.21, 0.012) * CFrame.Angles(math.rad(-3.667), math.rad(-14.954), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.788, -1.184, 0.472) * CFrame.Angles(math.rad(-75.917), math.rad(42.513), math.rad(-70.245)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.867, -0.156, 1.026) * CFrame.Angles(math.rad(-105.424), math.rad(-35.753), math.rad(86.975)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.323), math.rad(-11.918), math.rad(-20.283)),
					},
				},
			},
		},
		[3.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.135, 0.395, -0.412) * CFrame.Angles(math.rad(-29.164), math.rad(-9.454), math.rad(-169.481)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.028, 0.843, 0.225) * CFrame.Angles(math.rad(-13.694), math.rad(-8.021), math.rad(-29.335)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.087, -0.219, 0.008) * CFrame.Angles(math.rad(-2.636), math.rad(-16.845), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.899, -1.301, 0.444) * CFrame.Angles(math.rad(-71.562), math.rad(37.815), math.rad(-79.125)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.867, -0.103, 1.063) * CFrame.Angles(math.rad(-108.404), math.rad(-35.065), math.rad(86.173)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.693), math.rad(-13.694), math.rad(-20.569)),
					},
				},
			},
		},
		[3.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.135, 0.395, -0.412) * CFrame.Angles(math.rad(-29.164), math.rad(-9.454), math.rad(-169.481)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.03, 0.842, 0.223) * CFrame.Angles(math.rad(-13.808), math.rad(-7.964), math.rad(-29.049)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.087, -0.22, 0.008) * CFrame.Angles(math.rad(-2.521), math.rad(-16.788), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.905, -1.304, 0.431) * CFrame.Angles(math.rad(-71.104), math.rad(37.701), math.rad(-79.412)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.861, -0.098, 1.05) * CFrame.Angles(math.rad(-108.862), math.rad(-35.008), math.rad(85.944)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.693), math.rad(-13.522), math.rad(-20.054)),
					},
				},
			},
		},
		[3.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.136, 0.395, -0.412) * CFrame.Angles(math.rad(-29.164), math.rad(-9.511), math.rad(-169.481)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.032, 0.84, 0.222) * CFrame.Angles(math.rad(-13.923), math.rad(-7.907), math.rad(-28.762)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.087, -0.221, 0.008) * CFrame.Angles(math.rad(-2.406), math.rad(-16.73), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.91, -1.308, 0.419) * CFrame.Angles(math.rad(-70.646), math.rad(37.586), math.rad(-79.756)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.855, -0.094, 1.036) * CFrame.Angles(math.rad(-109.263), math.rad(-34.893), math.rad(85.714)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.693), math.rad(-13.35), math.rad(-19.538)),
					},
				},
			},
		},
		[3.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.136, 0.395, -0.412) * CFrame.Angles(math.rad(-29.106), math.rad(-9.511), math.rad(-169.424)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.032, 0.839, 0.221) * CFrame.Angles(math.rad(-14.037), math.rad(-7.907), math.rad(-28.533)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.087, -0.223, 0.008) * CFrame.Angles(math.rad(-2.235), math.rad(-16.73), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.915, -1.311, 0.407) * CFrame.Angles(math.rad(-70.187), math.rad(37.529), math.rad(-80.042)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.85, -0.089, 1.023) * CFrame.Angles(math.rad(-109.664), math.rad(-34.836), math.rad(85.485)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.693), math.rad(-13.235), math.rad(-19.079)),
					},
				},
			},
		},
		[3.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.136, 0.395, -0.412) * CFrame.Angles(math.rad(-29.106), math.rad(-9.511), math.rad(-169.366)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.033, 0.837, 0.22) * CFrame.Angles(math.rad(-14.152), math.rad(-7.907), math.rad(-28.361)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.088, -0.224, 0.008) * CFrame.Angles(math.rad(-2.12), math.rad(-16.673), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.92, -1.314, 0.395) * CFrame.Angles(math.rad(-69.729), math.rad(37.414), math.rad(-80.386)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.844, -0.085, 1.01) * CFrame.Angles(math.rad(-110.122), math.rad(-34.779), math.rad(85.256)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.636), math.rad(-13.121), math.rad(-18.736)),
					},
				},
			},
		},
		[3.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.137, 0.395, -0.412) * CFrame.Angles(math.rad(-29.106), math.rad(-9.568), math.rad(-169.309)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.033, 0.835, 0.219) * CFrame.Angles(math.rad(-14.267), math.rad(-7.907), math.rad(-28.247)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.088, -0.225, 0.008) * CFrame.Angles(math.rad(-1.948), math.rad(-16.673), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.925, -1.318, 0.382) * CFrame.Angles(math.rad(-69.328), math.rad(37.3), math.rad(-80.672)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.838, -0.081, 0.997) * CFrame.Angles(math.rad(-110.524), math.rad(-34.664), math.rad(85.027)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.636), math.rad(-13.006), math.rad(-18.392)),
					},
				},
			},
		},
		[3.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.137, 0.394, -0.412) * CFrame.Angles(math.rad(-29.106), math.rad(-9.626), math.rad(-169.252)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.033, 0.832, 0.218) * CFrame.Angles(math.rad(-14.381), math.rad(-7.964), math.rad(-28.132)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.088, -0.227, 0.009) * CFrame.Angles(math.rad(-1.776), math.rad(-16.73), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.931, -1.321, 0.37) * CFrame.Angles(math.rad(-68.87), math.rad(37.185), math.rad(-80.959)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.833, -0.076, 0.984) * CFrame.Angles(math.rad(-110.925), math.rad(-34.607), math.rad(84.798)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.636), math.rad(-12.949), math.rad(-18.105)),
					},
				},
			},
		},
		[3.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.138, 0.394, -0.412) * CFrame.Angles(math.rad(-29.106), math.rad(-9.683), math.rad(-169.137)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.033, 0.83, 0.218) * CFrame.Angles(math.rad(-14.439), math.rad(-8.021), math.rad(-28.018)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.089, -0.229, 0.009) * CFrame.Angles(math.rad(-1.604), math.rad(-16.73), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.936, -1.325, 0.358) * CFrame.Angles(math.rad(-68.411), math.rad(37.07), math.rad(-81.303)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.827, -0.072, 0.971) * CFrame.Angles(math.rad(-111.383), math.rad(-34.549), math.rad(84.511)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.578), math.rad(-12.892), math.rad(-17.934)),
					},
				},
			},
		},
		[3.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.139, 0.394, -0.412) * CFrame.Angles(math.rad(-29.049), math.rad(-9.74), math.rad(-169.08)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.032, 0.827, 0.217) * CFrame.Angles(math.rad(-14.553), math.rad(-8.079), math.rad(-28.018)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.089, -0.23, 0.009) * CFrame.Angles(math.rad(-1.432), math.rad(-16.73), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.941, -1.328, 0.346) * CFrame.Angles(math.rad(-67.953), math.rad(36.956), math.rad(-81.589)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.821, -0.067, 0.958) * CFrame.Angles(math.rad(-111.784), math.rad(-34.435), math.rad(84.282)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.578), math.rad(-12.834), math.rad(-17.762)),
					},
				},
			},
		},
		[3.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.14, 0.394, -0.412) * CFrame.Angles(math.rad(-29.049), math.rad(-9.798), math.rad(-168.965)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.032, 0.825, 0.217) * CFrame.Angles(math.rad(-14.668), math.rad(-8.193), math.rad(-28.018)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.09, -0.232, 0.008) * CFrame.Angles(math.rad(-1.203), math.rad(-16.788), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.946, -1.331, 0.333) * CFrame.Angles(math.rad(-67.552), math.rad(36.841), math.rad(-81.876)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.816, -0.063, 0.945) * CFrame.Angles(math.rad(-112.185), math.rad(-34.377), math.rad(84.053)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.521), math.rad(-12.834), math.rad(-17.647)),
					},
				},
			},
		},
		[3.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.141, 0.393, -0.412) * CFrame.Angles(math.rad(-29.049), math.rad(-9.855), math.rad(-168.793)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.03, 0.822, 0.216) * CFrame.Angles(math.rad(-14.84), math.rad(-8.251), math.rad(-28.018)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.091, -0.234, 0.008) * CFrame.Angles(math.rad(-0.974), math.rad(-16.845), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.951, -1.335, 0.321) * CFrame.Angles(math.rad(-67.093), math.rad(36.727), math.rad(-82.162)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.81, -0.058, 0.932) * CFrame.Angles(math.rad(-112.644), math.rad(-34.263), math.rad(83.824)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.521), math.rad(-12.834), math.rad(-17.59)),
					},
				},
			},
		},
		[3.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.142, 0.393, -0.412) * CFrame.Angles(math.rad(-28.992), math.rad(-9.912), math.rad(-168.679)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.029, 0.819, 0.216) * CFrame.Angles(math.rad(-14.954), math.rad(-8.365), math.rad(-28.075)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.092, -0.236, 0.008) * CFrame.Angles(math.rad(-0.802), math.rad(-16.902), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.956, -1.338, 0.309) * CFrame.Angles(math.rad(-66.692), math.rad(36.612), math.rad(-82.449)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.804, -0.054, 0.919) * CFrame.Angles(math.rad(-113.045), math.rad(-34.206), math.rad(83.595)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.464), math.rad(-12.834), math.rad(-17.533)),
					},
				},
			},
		},
		[3.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.143, 0.392, -0.412) * CFrame.Angles(math.rad(-28.992), math.rad(-10.027), math.rad(-168.507)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.028, 0.816, 0.215) * CFrame.Angles(math.rad(-15.069), math.rad(-8.48), math.rad(-28.132)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.093, -0.238, 0.008) * CFrame.Angles(math.rad(-0.573), math.rad(-17.017), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.962, -1.342, 0.297) * CFrame.Angles(math.rad(-66.234), math.rad(36.497), math.rad(-82.792)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.799, -0.049, 0.905) * CFrame.Angles(math.rad(-113.446), math.rad(-34.091), math.rad(83.365)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.464), math.rad(-12.834), math.rad(-17.59)),
					},
				},
			},
		},
		[3.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.144, 0.392, -0.412) * CFrame.Angles(math.rad(-28.934), math.rad(-10.141), math.rad(-168.335)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.026, 0.814, 0.215) * CFrame.Angles(math.rad(-15.183), math.rad(-8.652), math.rad(-28.247)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.094, -0.24, 0.008) * CFrame.Angles(math.rad(-0.286), math.rad(-17.074), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.967, -1.345, 0.284) * CFrame.Angles(math.rad(-65.776), math.rad(36.383), math.rad(-83.079)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.793, -0.045, 0.892) * CFrame.Angles(math.rad(-113.847), math.rad(-34.034), math.rad(83.136)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.406), math.rad(-12.834), math.rad(-17.647)),
					},
				},
			},
		},
		[3.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.146, 0.392, -0.412) * CFrame.Angles(math.rad(-28.934), math.rad(-10.199), math.rad(-168.163)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.024, 0.811, 0.214) * CFrame.Angles(math.rad(-15.355), math.rad(-8.824), math.rad(-28.419)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.095, -0.242, 0.008) * CFrame.Angles(math.rad(-0.057), math.rad(-17.189), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.972, -1.348, 0.272) * CFrame.Angles(math.rad(-65.374), math.rad(36.268), math.rad(-83.365)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.788, -0.04, 0.879) * CFrame.Angles(math.rad(-114.248), math.rad(-33.919), math.rad(82.907)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.349), math.rad(-12.892), math.rad(-17.704)),
					},
				},
			},
		},
		[3.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.147, 0.391, -0.412) * CFrame.Angles(math.rad(-28.877), math.rad(-10.313), math.rad(-167.991)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.022, 0.808, 0.214) * CFrame.Angles(math.rad(-15.47), math.rad(-8.995), math.rad(-28.591)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.096, -0.245, 0.007) * CFrame.Angles(math.rad(0.172), math.rad(-17.303), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.977, -1.352, 0.26) * CFrame.Angles(math.rad(-64.916), math.rad(36.154), math.rad(-83.652)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.782, -0.036, 0.866) * CFrame.Angles(math.rad(-114.706), math.rad(-33.862), math.rad(82.678)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.349), math.rad(-12.892), math.rad(-17.876)),
					},
				},
			},
		},
		[3.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.149, 0.39, -0.412) * CFrame.Angles(math.rad(-28.877), math.rad(-10.428), math.rad(-167.762)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.019, 0.805, 0.213) * CFrame.Angles(math.rad(-15.642), math.rad(-9.167), math.rad(-28.762)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.097, -0.247, 0.007) * CFrame.Angles(math.rad(0.458), math.rad(-17.418), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.982, -1.355, 0.248) * CFrame.Angles(math.rad(-64.515), math.rad(36.039), math.rad(-83.938)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.776, -0.032, 0.853) * CFrame.Angles(math.rad(-115.107), math.rad(-33.747), math.rad(82.449)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.292), math.rad(-12.949), math.rad(-17.991)),
					},
				},
			},
		},
		[3.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.151, 0.39, -0.412) * CFrame.Angles(math.rad(-28.82), math.rad(-10.542), math.rad(-167.59)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.017, 0.801, 0.213) * CFrame.Angles(math.rad(-15.756), math.rad(-9.339), math.rad(-28.992)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.098, -0.249, 0.007) * CFrame.Angles(math.rad(0.745), math.rad(-17.59), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.988, -1.358, 0.235) * CFrame.Angles(math.rad(-64.057), math.rad(35.924), math.rad(-84.225)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.771, -0.027, 0.84) * CFrame.Angles(math.rad(-115.508), math.rad(-33.633), math.rad(82.219)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.235), math.rad(-13.006), math.rad(-18.22)),
					},
				},
			},
		},
		[3.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.152, 0.389, -0.412) * CFrame.Angles(math.rad(-28.762), math.rad(-10.657), math.rad(-167.361)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.014, 0.798, 0.212) * CFrame.Angles(math.rad(-15.928), math.rad(-9.568), math.rad(-29.278)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.1, -0.252, 0.006) * CFrame.Angles(math.rad(1.031), math.rad(-17.704), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.993, -1.362, 0.223) * CFrame.Angles(math.rad(-63.656), math.rad(35.753), math.rad(-84.511)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.765, -0.023, 0.827) * CFrame.Angles(math.rad(-115.909), math.rad(-33.575), math.rad(82.048)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.235), math.rad(-13.006), math.rad(-18.392)),
					},
				},
			},
		},
		[3.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.154, 0.388, -0.412) * CFrame.Angles(math.rad(-28.705), math.rad(-10.829), math.rad(-167.074)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.011, 0.795, 0.211) * CFrame.Angles(math.rad(-16.1), math.rad(-9.74), math.rad(-29.565)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.101, -0.254, 0.006) * CFrame.Angles(math.rad(1.318), math.rad(-17.876), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.998, -1.365, 0.211) * CFrame.Angles(math.rad(-63.197), math.rad(35.638), math.rad(-84.798)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.759, -0.018, 0.814) * CFrame.Angles(math.rad(-116.31), math.rad(-33.461), math.rad(81.818)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.177), math.rad(-13.063), math.rad(-18.621)),
					},
				},
			},
		},
		[4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.156, 0.388, -0.412) * CFrame.Angles(math.rad(-28.705), math.rad(-10.943), math.rad(-166.845)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.007, 0.791, 0.211) * CFrame.Angles(math.rad(-16.272), math.rad(-9.969), math.rad(-29.851)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.103, -0.257, 0.005) * CFrame.Angles(math.rad(1.604), math.rad(-18.048), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.003, -1.369, 0.199) * CFrame.Angles(math.rad(-62.796), math.rad(35.523), math.rad(-85.084)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.754, -0.014, 0.801) * CFrame.Angles(math.rad(-116.712), math.rad(-33.346), math.rad(81.589)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.177), math.rad(-13.121), math.rad(-18.908)),
					},
				},
			},
		},
		[4.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.158, 0.387, -0.412) * CFrame.Angles(math.rad(-28.648), math.rad(-11.115), math.rad(-166.616)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.003, 0.788, 0.21) * CFrame.Angles(math.rad(-16.444), math.rad(-10.199), math.rad(-30.195)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.104, -0.259, 0.005) * CFrame.Angles(math.rad(1.891), math.rad(-18.22), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.008, -1.372, 0.187) * CFrame.Angles(math.rad(-62.395), math.rad(35.409), math.rad(-85.371)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.75, -0.013, 0.787) * CFrame.Angles(math.rad(-117.113), math.rad(-33.289), math.rad(81.36)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.12), math.rad(-13.121), math.rad(-19.194)),
					},
				},
			},
		},
		[4.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.16, 0.386, -0.412) * CFrame.Angles(math.rad(-28.591), math.rad(-11.23), math.rad(-166.33)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.999, 0.784, 0.209) * CFrame.Angles(math.rad(-16.616), math.rad(-10.428), math.rad(-30.596)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.106, -0.262, 0.004) * CFrame.Angles(math.rad(2.235), math.rad(-18.392), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.014, -1.375, 0.174) * CFrame.Angles(math.rad(-61.937), math.rad(35.237), math.rad(-85.657)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.746, -0.012, 0.774) * CFrame.Angles(math.rad(-117.514), math.rad(-33.174), math.rad(81.131)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.063), math.rad(-13.178), math.rad(-19.481)),
					},
				},
			},
		},
		[4.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.163, 0.385, -0.412) * CFrame.Angles(math.rad(-28.533), math.rad(-11.402), math.rad(-166.043)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.995, 0.78, 0.208) * CFrame.Angles(math.rad(-16.845), math.rad(-10.714), math.rad(-30.997)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.108, -0.265, 0.003) * CFrame.Angles(math.rad(2.521), math.rad(-18.564), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.019, -1.379, 0.162) * CFrame.Angles(math.rad(-61.536), math.rad(35.122), math.rad(-85.944)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.743, -0.01, 0.761) * CFrame.Angles(math.rad(-117.972), math.rad(-33.06), math.rad(80.902)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.063), math.rad(-13.235), math.rad(-19.767)),
					},
				},
			},
		},
		[4.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.165, 0.384, -0.412) * CFrame.Angles(math.rad(-28.476), math.rad(-11.574), math.rad(-165.757)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.99, 0.776, 0.207) * CFrame.Angles(math.rad(-17.074), math.rad(-10.943), math.rad(-31.455)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.109, -0.267, 0.003) * CFrame.Angles(math.rad(2.865), math.rad(-18.793), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.024, -1.382, 0.15) * CFrame.Angles(math.rad(-61.135), math.rad(34.95), math.rad(-86.23)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.739, -0.009, 0.747) * CFrame.Angles(math.rad(-118.373), math.rad(-32.945), math.rad(80.73)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.063), math.rad(-13.235), math.rad(-20.111)),
					},
				},
			},
		},
		[4.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.167, 0.383, -0.412) * CFrame.Angles(math.rad(-28.419), math.rad(-11.746), math.rad(-165.47)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.984, 0.771, 0.206) * CFrame.Angles(math.rad(-17.246), math.rad(-11.23), math.rad(-31.914)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.111, -0.27, 0.002) * CFrame.Angles(math.rad(3.209), math.rad(-19.022), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.029, -1.386, 0.138) * CFrame.Angles(math.rad(-60.676), math.rad(34.836), math.rad(-86.459)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.735, -0.008, 0.734) * CFrame.Angles(math.rad(-118.774), math.rad(-32.888), math.rad(80.501)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-13.235), math.rad(-20.397)),
					},
				},
			},
		},
		[4.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.169, 0.382, -0.412) * CFrame.Angles(math.rad(-28.361), math.rad(-11.918), math.rad(-165.126)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.977, 0.766, 0.205) * CFrame.Angles(math.rad(-17.475), math.rad(-11.516), math.rad(-32.429)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.113, -0.273, 0.001) * CFrame.Angles(math.rad(3.495), math.rad(-19.251), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.034, -1.389, 0.125) * CFrame.Angles(math.rad(-60.275), math.rad(34.664), math.rad(-86.746)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.732, -0.007, 0.721) * CFrame.Angles(math.rad(-119.175), math.rad(-32.773), math.rad(80.271)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-13.293), math.rad(-20.741)),
					},
				},
			},
		},
		[4.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.172, 0.381, -0.412) * CFrame.Angles(math.rad(-28.304), math.rad(-12.089), math.rad(-164.84)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.97, 0.761, 0.205) * CFrame.Angles(math.rad(-17.704), math.rad(-11.803), math.rad(-33.002)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.115, -0.276, 0) * CFrame.Angles(math.rad(3.839), math.rad(-19.423), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.04, -1.392, 0.113) * CFrame.Angles(math.rad(-59.874), math.rad(34.549), math.rad(-87.032)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.728, -0.006, 0.707) * CFrame.Angles(math.rad(-119.576), math.rad(-32.659), math.rad(80.042)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-13.293), math.rad(-21.085)),
					},
				},
			},
		},
		[4.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.174, 0.38, -0.412) * CFrame.Angles(math.rad(-28.247), math.rad(-12.261), math.rad(-164.496)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.962, 0.755, 0.205) * CFrame.Angles(math.rad(-17.934), math.rad(-12.032), math.rad(-33.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.117, -0.279, -0.001) * CFrame.Angles(math.rad(4.183), math.rad(-19.71), math.rad(-22.173)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.045, -1.396, 0.101) * CFrame.Angles(math.rad(-59.473), math.rad(34.377), math.rad(-87.319)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.724, -0.005, 0.694) * CFrame.Angles(math.rad(-119.977), math.rad(-32.544), math.rad(79.87)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-13.235), math.rad(-21.429)),
					},
				},
			},
		},
		[4.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.177, 0.379, -0.412) * CFrame.Angles(math.rad(-28.132), math.rad(-12.433), math.rad(-164.152)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.952, 0.748, 0.205) * CFrame.Angles(math.rad(-18.22), math.rad(-12.319), math.rad(-34.32)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.119, -0.281, -0.002) * CFrame.Angles(math.rad(4.584), math.rad(-19.939), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.05, -1.399, 0.089) * CFrame.Angles(math.rad(-59.072), math.rad(34.263), math.rad(-87.548)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.004, 0.681) * CFrame.Angles(math.rad(-120.378), math.rad(-32.429), math.rad(79.641)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-13.235), math.rad(-21.772)),
					},
				},
			},
		},
		[4.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.179, 0.378, -0.412) * CFrame.Angles(math.rad(-28.075), math.rad(-12.605), math.rad(-163.809)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.939, 0.739, 0.206) * CFrame.Angles(math.rad(-18.449), math.rad(-12.605), math.rad(-35.122)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.121, -0.284, -0.003) * CFrame.Angles(math.rad(4.927), math.rad(-20.168), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.055, -1.403, 0.076) * CFrame.Angles(math.rad(-58.614), math.rad(34.091), math.rad(-87.834)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.717, -0.003, 0.667) * CFrame.Angles(math.rad(-120.722), math.rad(-32.315), math.rad(79.412)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.005), math.rad(-13.178), math.rad(-22.059)),
					},
				},
			},
		},
		[4.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.182, 0.377, -0.413) * CFrame.Angles(math.rad(-28.018), math.rad(-12.777), math.rad(-163.465)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.921, 0.726, 0.21) * CFrame.Angles(math.rad(-18.736), math.rad(-12.949), math.rad(-36.154)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.124, -0.287, -0.004) * CFrame.Angles(math.rad(5.271), math.rad(-20.455), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.06, -1.406, 0.064) * CFrame.Angles(math.rad(-58.213), math.rad(33.976), math.rad(-88.121)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.713, -0.002, 0.654) * CFrame.Angles(math.rad(-121.123), math.rad(-32.2), math.rad(79.24)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.063), math.rad(-13.121), math.rad(-22.403)),
					},
				},
			},
		},
		[4.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.185, 0.375, -0.413) * CFrame.Angles(math.rad(-27.903), math.rad(-13.006), math.rad(-163.121)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.885, 0.702, 0.222) * CFrame.Angles(math.rad(-19.022), math.rad(-13.235), math.rad(-37.93)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.126, -0.29, -0.005) * CFrame.Angles(math.rad(5.672), math.rad(-20.684), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.066, -1.409, 0.052) * CFrame.Angles(math.rad(-57.811), math.rad(33.805), math.rad(-88.35)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.709, 0, 0.641) * CFrame.Angles(math.rad(-121.524), math.rad(-32.086), math.rad(79.011)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.063), math.rad(-13.063), math.rad(-22.746)),
					},
				},
			},
		},
		[4.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.187, 0.374, -0.413) * CFrame.Angles(math.rad(-27.846), math.rad(-13.178), math.rad(-162.72)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.888, 0.704, 0.216) * CFrame.Angles(math.rad(-19.309), math.rad(-13.522), math.rad(-38.159)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.128, -0.293, -0.006) * CFrame.Angles(math.rad(6.016), math.rad(-20.97), math.rad(-22.116)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.071, -1.413, 0.04) * CFrame.Angles(math.rad(-57.41), math.rad(33.633), math.rad(-88.637)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.706, 0.001, 0.628) * CFrame.Angles(math.rad(-121.925), math.rad(-31.971), math.rad(78.782)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.12), math.rad(-12.949), math.rad(-23.033)),
					},
				},
			},
		},
		[4.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.19, 0.373, -0.413) * CFrame.Angles(math.rad(-27.788), math.rad(-13.35), math.rad(-162.376)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.89, 0.706, 0.209) * CFrame.Angles(math.rad(-19.652), math.rad(-13.808), math.rad(-38.445)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.13, -0.296, -0.007) * CFrame.Angles(math.rad(6.417), math.rad(-21.257), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.076, -1.416, 0.028) * CFrame.Angles(math.rad(-57.009), math.rad(33.518), math.rad(-88.866)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.702, 0.002, 0.614) * CFrame.Angles(math.rad(-122.326), math.rad(-31.856), math.rad(78.61)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.177), math.rad(-12.834), math.rad(-23.319)),
					},
				},
			},
		},
		[4.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.193, 0.371, -0.413) * CFrame.Angles(math.rad(-27.674), math.rad(-13.579), math.rad(-161.975)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.893, 0.708, 0.202) * CFrame.Angles(math.rad(-19.939), math.rad(-14.095), math.rad(-38.732)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.133, -0.299, -0.008) * CFrame.Angles(math.rad(6.761), math.rad(-21.543), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.081, -1.42, 0.015) * CFrame.Angles(math.rad(-56.608), math.rad(33.346), math.rad(-89.152)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.698, 0.003, 0.601) * CFrame.Angles(math.rad(-122.728), math.rad(-31.742), math.rad(78.381)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.235), math.rad(-12.72), math.rad(-23.549)),
					},
				},
			},
		},
		[4.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.196, 0.37, -0.413) * CFrame.Angles(math.rad(-27.617), math.rad(-13.751), math.rad(-161.574)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.895, 0.71, 0.194) * CFrame.Angles(math.rad(-20.283), math.rad(-14.381), math.rad(-38.961)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.135, -0.302, -0.01) * CFrame.Angles(math.rad(7.162), math.rad(-21.83), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.086, -1.423, 0.003) * CFrame.Angles(math.rad(-56.207), math.rad(33.174), math.rad(-89.381)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.695, 0.004, 0.588) * CFrame.Angles(math.rad(-123.129), math.rad(-31.627), math.rad(78.209)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.292), math.rad(-12.548), math.rad(-23.835)),
					},
				},
			},
		},
		[4.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.199, 0.369, -0.413) * CFrame.Angles(math.rad(-27.502), math.rad(-13.98), math.rad(-161.23)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.898, 0.712, 0.185) * CFrame.Angles(math.rad(-20.626), math.rad(-14.668), math.rad(-39.248)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.137, -0.305, -0.011) * CFrame.Angles(math.rad(7.563), math.rad(-22.116), math.rad(-22.002)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.092, -1.426, -0.009) * CFrame.Angles(math.rad(-55.806), math.rad(33.002), math.rad(-89.668)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.695, -0.002, 0.574) * CFrame.Angles(math.rad(-123.53), math.rad(-31.513), math.rad(77.98)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.406), math.rad(-12.376), math.rad(-24.064)),
					},
				},
			},
		},
		[4.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.201, 0.367, -0.413) * CFrame.Angles(math.rad(-27.387), math.rad(-14.152), math.rad(-160.829)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.9, 0.715, 0.176) * CFrame.Angles(math.rad(-20.97), math.rad(-14.954), math.rad(-39.534)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.14, -0.308, -0.013) * CFrame.Angles(math.rad(7.907), math.rad(-22.403), math.rad(-22.002)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.097, -1.43, -0.021) * CFrame.Angles(math.rad(-55.405), math.rad(32.888), math.rad(-89.897)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.696, -0.008, 0.56) * CFrame.Angles(math.rad(-123.873), math.rad(-31.398), math.rad(77.808)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.521), math.rad(-12.204), math.rad(-24.236)),
					},
				},
			},
		},
		[4.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.204, 0.366, -0.413) * CFrame.Angles(math.rad(-27.33), math.rad(-14.381), math.rad(-160.428)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.903, 0.717, 0.167) * CFrame.Angles(math.rad(-21.314), math.rad(-15.241), math.rad(-39.763)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.142, -0.311, -0.014) * CFrame.Angles(math.rad(8.308), math.rad(-22.689), math.rad(-21.944)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.102, -1.433, -0.034) * CFrame.Angles(math.rad(-55.004), math.rad(32.716), math.rad(-90.184)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.696, -0.014, 0.546) * CFrame.Angles(math.rad(-124.275), math.rad(-31.283), math.rad(77.578)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.636), math.rad(-11.975), math.rad(-24.408)),
					},
				},
			},
		},
		[4.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.207, 0.364, -0.413) * CFrame.Angles(math.rad(-27.215), math.rad(-14.553), math.rad(-160.027)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.905, 0.72, 0.157) * CFrame.Angles(math.rad(-21.715), math.rad(-15.527), math.rad(-40.05)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.145, -0.314, -0.015) * CFrame.Angles(math.rad(8.709), math.rad(-22.976), math.rad(-21.887)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.107, -1.437, -0.046) * CFrame.Angles(math.rad(-54.66), math.rad(32.544), math.rad(-90.413)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.696, -0.019, 0.533) * CFrame.Angles(math.rad(-124.676), math.rad(-31.169), math.rad(77.407)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.75), math.rad(-11.688), math.rad(-24.58)),
					},
				},
			},
		},
		[4.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.21, 0.362, -0.413) * CFrame.Angles(math.rad(-27.101), math.rad(-14.782), math.rad(-159.626)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.908, 0.722, 0.146) * CFrame.Angles(math.rad(-22.116), math.rad(-15.814), math.rad(-40.336)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.147, -0.317, -0.017) * CFrame.Angles(math.rad(9.11), math.rad(-23.262), math.rad(-21.887)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.112, -1.44, -0.058) * CFrame.Angles(math.rad(-54.259), math.rad(32.372), math.rad(-90.642)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.697, -0.025, 0.519) * CFrame.Angles(math.rad(-125.077), math.rad(-31.054), math.rad(77.177)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.865), math.rad(-11.402), math.rad(-24.637)),
					},
				},
			},
		},
		[4.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.213, 0.361, -0.413) * CFrame.Angles(math.rad(-26.986), math.rad(-15.011), math.rad(-159.225)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.91, 0.725, 0.135) * CFrame.Angles(math.rad(-22.517), math.rad(-16.1), math.rad(-40.623)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.149, -0.32, -0.019) * CFrame.Angles(math.rad(9.511), math.rad(-23.606), math.rad(-21.83)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.118, -1.443, -0.07) * CFrame.Angles(math.rad(-53.858), math.rad(32.2), math.rad(-90.928)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.697, -0.031, 0.505) * CFrame.Angles(math.rad(-125.42), math.rad(-30.882), math.rad(77.006)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.037), math.rad(-11.115), math.rad(-24.752)),
					},
				},
			},
		},
		[4.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.216, 0.359, -0.413) * CFrame.Angles(math.rad(-26.929), math.rad(-15.183), math.rad(-158.824)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.912, 0.728, 0.123) * CFrame.Angles(math.rad(-22.918), math.rad(-16.387), math.rad(-40.852)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.152, -0.323, -0.02) * CFrame.Angles(math.rad(9.912), math.rad(-23.892), math.rad(-21.772)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.123, -1.447, -0.082) * CFrame.Angles(math.rad(-53.457), math.rad(32.028), math.rad(-91.158)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.698, -0.037, 0.491) * CFrame.Angles(math.rad(-125.822), math.rad(-30.768), math.rad(76.834)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.209), math.rad(-10.772), math.rad(-24.752)),
					},
				},
			},
		},
		[4.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.218, 0.358, -0.413) * CFrame.Angles(math.rad(-26.814), math.rad(-15.413), math.rad(-158.366)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.915, 0.731, 0.11) * CFrame.Angles(math.rad(-23.319), math.rad(-16.616), math.rad(-41.138)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.154, -0.326, -0.022) * CFrame.Angles(math.rad(10.313), math.rad(-24.179), math.rad(-21.715)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.128, -1.45, -0.095) * CFrame.Angles(math.rad(-53.056), math.rad(31.856), math.rad(-91.387)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.698, -0.043, 0.478) * CFrame.Angles(math.rad(-126.223), math.rad(-30.653), math.rad(76.604)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.38), math.rad(-10.371), math.rad(-24.752)),
					},
				},
			},
		},
		[4.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.221, 0.356, -0.413) * CFrame.Angles(math.rad(-26.7), math.rad(-15.584), math.rad(-157.964)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.917, 0.734, 0.097) * CFrame.Angles(math.rad(-23.778), math.rad(-16.902), math.rad(-41.368)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.157, -0.329, -0.024) * CFrame.Angles(math.rad(10.714), math.rad(-24.465), math.rad(-21.658)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.133, -1.454, -0.107) * CFrame.Angles(math.rad(-52.712), math.rad(31.742), math.rad(-91.616)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.698, -0.049, 0.464) * CFrame.Angles(math.rad(-126.566), math.rad(-30.539), math.rad(76.433)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(3.552), math.rad(-9.969), math.rad(-24.694)),
					},
				},
			},
		},
		[4.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.238, 0.361, -0.454) * CFrame.Angles(math.rad(-27.273), math.rad(-16.845), math.rad(-154.584)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.038, 0.886, -0.134) * CFrame.Angles(math.rad(-27.273), math.rad(-18.392), math.rad(-39.19)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.183, -0.337, -0.04) * CFrame.Angles(math.rad(12.089), math.rad(-27.96), math.rad(-20.913)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.207, -1.41, -0.101) * CFrame.Angles(math.rad(-53.228), math.rad(29.278), math.rad(-94.882)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.666, -0.11, 0.361) * CFrame.Angles(math.rad(-126.624), math.rad(-28.533), math.rad(73.51)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.807), math.rad(-9.282), math.rad(-25.84)),
					},
				},
			},
		},
		[4.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.287, 0.368, -0.568) * CFrame.Angles(math.rad(-28.533), math.rad(-20.455), math.rad(-145.073)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.296, 1.151, -0.564) * CFrame.Angles(math.rad(-33.174), math.rad(-25.21), math.rad(-38.044)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.253, -0.354, -0.095) * CFrame.Angles(math.rad(16.272), math.rad(-37.815), math.rad(-18.392)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.281, -1.366, -0.096) * CFrame.Angles(math.rad(-53.915), math.rad(26.872), math.rad(-98.148)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.606, -0.206, 0.21) * CFrame.Angles(math.rad(-125.592), math.rad(-25.325), math.rad(69.041)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.516), math.rad(-8.422), math.rad(-29.679)),
					},
				},
			},
		},
		[4.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.354, 0.362, -0.721) * CFrame.Angles(math.rad(-29.164), math.rad(-25.497), math.rad(-131.838)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.789, 1.512, -1.321) * CFrame.Angles(math.rad(-39.248), math.rad(-38.274), math.rad(-28.648)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.334, -0.369, -0.193) * CFrame.Angles(math.rad(24.064), math.rad(-51.509), math.rad(-13.006)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.355, -1.322, -0.091) * CFrame.Angles(math.rad(-54.717), math.rad(24.523), math.rad(-101.356)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.574, -0.256, 0.127) * CFrame.Angles(math.rad(-124.848), math.rad(-23.72), math.rad(66.75)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.776), math.rad(-6.532), math.rad(-34.148)),
					},
				},
			},
		},
		[4.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.37, 0.348, -0.735) * CFrame.Angles(math.rad(-28.304), math.rad(-26.757), math.rad(-128.744)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.788, 1.545, -1.402) * CFrame.Angles(math.rad(-41.081), math.rad(-41.597), math.rad(-31.169)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.347, -0.373, -0.217) * CFrame.Angles(math.rad(26.7), math.rad(-54.316), math.rad(-11.516)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.355, -1.324, -0.088) * CFrame.Angles(math.rad(-54.66), math.rad(24.58), math.rad(-101.299)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.575, -0.255, 0.118) * CFrame.Angles(math.rad(-124.905), math.rad(-23.72), math.rad(66.807)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.49), math.rad(-1.432), math.rad(-25.611)),
					},
				},
			},
		},
		[4.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.382, 0.336, -0.744) * CFrame.Angles(math.rad(-27.502), math.rad(-27.674), math.rad(-126.452)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.778, 1.569, -1.456) * CFrame.Angles(math.rad(-42.8), math.rad(-43.831), math.rad(-33.633)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.356, -0.377, -0.234) * CFrame.Angles(math.rad(29.106), math.rad(-56.15), math.rad(-10.141)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.354, -1.328, -0.087) * CFrame.Angles(math.rad(-54.546), math.rad(24.694), math.rad(-101.184)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.578, -0.254, 0.112) * CFrame.Angles(math.rad(-124.962), math.rad(-23.835), math.rad(67.036)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.183), math.rad(5.099), math.rad(-15.298)),
					},
				},
			},
		},
		[4.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.392, 0.326, -0.75) * CFrame.Angles(math.rad(-26.814), math.rad(-28.476), math.rad(-124.905)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.765, 1.588, -1.49) * CFrame.Angles(math.rad(-44.118), math.rad(-45.264), math.rad(-35.753)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.361, -0.381, -0.246) * CFrame.Angles(math.rad(31.112), math.rad(-57.181), math.rad(-8.995)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.352, -1.334, -0.086) * CFrame.Angles(math.rad(-54.431), math.rad(24.809), math.rad(-101.07)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.581, -0.252, 0.107) * CFrame.Angles(math.rad(-125.077), math.rad(-23.95), math.rad(67.265)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.558), math.rad(12.261), math.rad(-4.469)),
					},
				},
			},
		},
		[4.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.399, 0.318, -0.754) * CFrame.Angles(math.rad(-26.241), math.rad(-28.992), math.rad(-123.931)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.753, 1.602, -1.51) * CFrame.Angles(math.rad(-45.092), math.rad(-46.123), math.rad(-37.414)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.363, -0.385, -0.253) * CFrame.Angles(math.rad(32.601), math.rad(-57.697), math.rad(-8.193)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.348, -1.34, -0.084) * CFrame.Angles(math.rad(-54.259), math.rad(24.981), math.rad(-100.841)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.584, -0.25, 0.105) * CFrame.Angles(math.rad(-125.191), math.rad(-24.064), math.rad(67.552)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(5.329), math.rad(18.908), math.rad(5.787)),
					},
				},
			},
		},
		[4.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.403, 0.312, -0.755) * CFrame.Angles(math.rad(-25.783), math.rad(-29.335), math.rad(-123.415)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.744, 1.612, -1.52) * CFrame.Angles(math.rad(-45.722), math.rad(-46.524), math.rad(-38.732)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.364, -0.388, -0.256) * CFrame.Angles(math.rad(33.633), math.rad(-57.811), math.rad(-7.735)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.342, -1.346, -0.081) * CFrame.Angles(math.rad(-54.145), math.rad(25.096), math.rad(-100.611)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.588, -0.248, 0.104) * CFrame.Angles(math.rad(-125.249), math.rad(-24.179), math.rad(67.781)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(4.011), math.rad(24.122), math.rad(14.439)),
					},
				},
			},
		},
		[4.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.405, 0.307, -0.755) * CFrame.Angles(math.rad(-25.439), math.rad(-29.507), math.rad(-123.186)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.736, 1.619, -1.521) * CFrame.Angles(math.rad(-46.009), math.rad(-46.696), math.rad(-39.706)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.363, -0.391, -0.257) * CFrame.Angles(math.rad(34.206), math.rad(-57.697), math.rad(-7.563)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.333, -1.35, -0.076) * CFrame.Angles(math.rad(-54.145), math.rad(25.153), math.rad(-100.325)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.59, -0.247, 0.103) * CFrame.Angles(math.rad(-125.306), math.rad(-24.293), math.rad(68.01)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(2.349), math.rad(27.445), math.rad(20.512)),
					},
				},
			},
		},
		[4.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.405, 0.304, -0.754) * CFrame.Angles(math.rad(-25.153), math.rad(-29.507), math.rad(-123.071)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.73, 1.622, -1.517) * CFrame.Angles(math.rad(-46.066), math.rad(-46.811), math.rad(-40.623)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.363, -0.392, -0.257) * CFrame.Angles(math.rad(34.377), math.rad(-57.64), math.rad(-7.678)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.321, -1.351, -0.068) * CFrame.Angles(math.rad(-54.202), math.rad(25.153), math.rad(-100.038)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.591, -0.246, 0.103) * CFrame.Angles(math.rad(-125.363), math.rad(-24.293), math.rad(68.067)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(1.261), math.rad(28.705), math.rad(22.918)),
					},
				},
			},
		},
		[4.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.403, 0.302, -0.753) * CFrame.Angles(math.rad(-24.866), math.rad(-29.335), math.rad(-123.129)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.725, 1.624, -1.51) * CFrame.Angles(math.rad(-45.894), math.rad(-46.811), math.rad(-41.368)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.363, -0.391, -0.255) * CFrame.Angles(math.rad(34.206), math.rad(-57.525), math.rad(-8.079)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.305, -1.349, -0.057) * CFrame.Angles(math.rad(-54.488), math.rad(24.981), math.rad(-99.637)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.59, -0.247, 0.106) * CFrame.Angles(math.rad(-125.42), math.rad(-24.236), math.rad(67.895)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.688), math.rad(28.934), math.rad(23.205)),
					},
				},
			},
		},
		[4.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.4, 0.3, -0.752) * CFrame.Angles(math.rad(-24.694), math.rad(-29.049), math.rad(-123.358)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.72, 1.622, -1.501) * CFrame.Angles(math.rad(-45.55), math.rad(-46.581), math.rad(-41.769)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.362, -0.391, -0.252) * CFrame.Angles(math.rad(33.747), math.rad(-57.238), math.rad(-8.766)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.286, -1.343, -0.043) * CFrame.Angles(math.rad(-54.889), math.rad(24.694), math.rad(-99.236)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.588, -0.248, 0.113) * CFrame.Angles(math.rad(-125.535), math.rad(-23.95), math.rad(67.494)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(0.057), math.rad(29.164), math.rad(23.606)),
					},
				},
			},
		},
		[4.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.395, 0.299, -0.751) * CFrame.Angles(math.rad(-24.523), math.rad(-28.705), math.rad(-123.816)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.717, 1.619, -1.49) * CFrame.Angles(math.rad(-45.034), math.rad(-46.123), math.rad(-41.941)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.36, -0.389, -0.247) * CFrame.Angles(math.rad(32.945), math.rad(-56.78), math.rad(-9.74)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.264, -1.333, -0.025) * CFrame.Angles(math.rad(-55.52), math.rad(24.236), math.rad(-98.778)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.584, -0.25, 0.124) * CFrame.Angles(math.rad(-125.707), math.rad(-23.549), math.rad(66.807)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.516), math.rad(29.393), math.rad(24.179)),
					},
				},
			},
		},
		[4.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.389, 0.299, -0.75) * CFrame.Angles(math.rad(-24.351), math.rad(-28.19), math.rad(-124.504)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.714, 1.614, -1.477) * CFrame.Angles(math.rad(-44.404), math.rad(-45.436), math.rad(-41.883)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.357, -0.388, -0.241) * CFrame.Angles(math.rad(31.971), math.rad(-56.207), math.rad(-10.886)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.239, -1.319, -0.005) * CFrame.Angles(math.rad(-56.322), math.rad(23.663), math.rad(-98.205)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.579, -0.252, 0.138) * CFrame.Angles(math.rad(-125.879), math.rad(-22.918), math.rad(65.89)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.203), math.rad(29.679), math.rad(24.924)),
					},
				},
			},
		},
		[4.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.381, 0.3, -0.749) * CFrame.Angles(math.rad(-24.236), math.rad(-27.617), math.rad(-125.363)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.711, 1.607, -1.462) * CFrame.Angles(math.rad(-43.717), math.rad(-44.519), math.rad(-41.597)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.353, -0.386, -0.233) * CFrame.Angles(math.rad(30.768), math.rad(-55.405), math.rad(-12.204)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.21, -1.302, 0.018) * CFrame.Angles(math.rad(-57.238), math.rad(22.918), math.rad(-97.632)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.572, -0.256, 0.157) * CFrame.Angles(math.rad(-126.108), math.rad(-22.231), math.rad(64.744)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.833), math.rad(29.908), math.rad(25.783)),
					},
				},
			},
		},
		[4.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.373, 0.3, -0.748) * CFrame.Angles(math.rad(-24.179), math.rad(-26.929), math.rad(-126.394)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.709, 1.598, -1.445) * CFrame.Angles(math.rad(-42.915), math.rad(-43.43), math.rad(-41.138)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.349, -0.383, -0.223) * CFrame.Angles(math.rad(29.393), math.rad(-54.488), math.rad(-13.694)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.18, -1.281, 0.043) * CFrame.Angles(math.rad(-58.327), math.rad(22.059), math.rad(-96.944)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.564, -0.259, 0.178) * CFrame.Angles(math.rad(-126.337), math.rad(-21.314), math.rad(63.369)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.521), math.rad(30.138), math.rad(26.757)),
					},
				},
			},
		},
		[4.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.363, 0.301, -0.747) * CFrame.Angles(math.rad(-24.122), math.rad(-26.241), math.rad(-127.598)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.706, 1.587, -1.426) * CFrame.Angles(math.rad(-42.055), math.rad(-42.17), math.rad(-40.565)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.344, -0.38, -0.213) * CFrame.Angles(math.rad(27.96), math.rad(-53.4), math.rad(-15.241)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.146, -1.258, 0.069) * CFrame.Angles(math.rad(-59.473), math.rad(21.028), math.rad(-96.257)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.555, -0.264, 0.202) * CFrame.Angles(math.rad(-126.566), math.rad(-20.34), math.rad(61.879)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.266), math.rad(30.309), math.rad(27.846)),
					},
				},
			},
		},
		[4.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.353, 0.302, -0.746) * CFrame.Angles(math.rad(-24.007), math.rad(-25.439), math.rad(-128.973)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.703, 1.574, -1.404) * CFrame.Angles(math.rad(-41.196), math.rad(-40.68), math.rad(-39.935)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.338, -0.377, -0.202) * CFrame.Angles(math.rad(26.413), math.rad(-52.196), math.rad(-16.845)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.111, -1.232, 0.097) * CFrame.Angles(math.rad(-60.734), math.rad(19.939), math.rad(-95.512)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.545, -0.268, 0.228) * CFrame.Angles(math.rad(-126.738), math.rad(-19.194), math.rad(60.161)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.011), math.rad(30.481), math.rad(29.049)),
					},
				},
			},
		},
		[4.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.342, 0.304, -0.745) * CFrame.Angles(math.rad(-23.95), math.rad(-24.58), math.rad(-130.405)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.7, 1.559, -1.379) * CFrame.Angles(math.rad(-40.336), math.rad(-39.133), math.rad(-39.248)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.331, -0.373, -0.189) * CFrame.Angles(math.rad(24.866), math.rad(-50.879), math.rad(-18.449)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.073, -1.204, 0.127) * CFrame.Angles(math.rad(-62.109), math.rad(18.678), math.rad(-94.767)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.535, -0.273, 0.256) * CFrame.Angles(math.rad(-126.853), math.rad(-17.934), math.rad(58.27)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.756), math.rad(30.653), math.rad(30.252)),
					},
				},
			},
		},
		[4.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.33, 0.305, -0.744) * CFrame.Angles(math.rad(-23.892), math.rad(-23.663), math.rad(-131.952)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.697, 1.543, -1.352) * CFrame.Angles(math.rad(-39.477), math.rad(-37.414), math.rad(-38.56)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.323, -0.37, -0.177) * CFrame.Angles(math.rad(23.319), math.rad(-49.389), math.rad(-20.054)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-1.034, -1.173, 0.157) * CFrame.Angles(math.rad(-63.484), math.rad(17.361), math.rad(-93.965)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.523, -0.279, 0.285) * CFrame.Angles(math.rad(-126.853), math.rad(-16.616), math.rad(56.322)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.5), math.rad(30.768), math.rad(31.57)),
					},
				},
			},
		},
		[4.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.317, 0.306, -0.744) * CFrame.Angles(math.rad(-23.778), math.rad(-22.689), math.rad(-133.614)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.692, 1.525, -1.323) * CFrame.Angles(math.rad(-38.675), math.rad(-35.638), math.rad(-37.873)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.315, -0.365, -0.163) * CFrame.Angles(math.rad(21.772), math.rad(-47.785), math.rad(-21.658)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.993, -1.141, 0.187) * CFrame.Angles(math.rad(-64.859), math.rad(15.871), math.rad(-93.106)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.51, -0.284, 0.315) * CFrame.Angles(math.rad(-126.796), math.rad(-15.183), math.rad(54.202)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.245), math.rad(30.825), math.rad(32.945)),
					},
				},
			},
		},
		[4.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.304, 0.307, -0.743) * CFrame.Angles(math.rad(-23.72), math.rad(-21.658), math.rad(-135.39)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.688, 1.505, -1.291) * CFrame.Angles(math.rad(-37.93), math.rad(-33.747), math.rad(-37.128)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.305, -0.361, -0.15) * CFrame.Angles(math.rad(20.283), math.rad(-46.123), math.rad(-23.205)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.951, -1.107, 0.218) * CFrame.Angles(math.rad(-66.291), math.rad(14.324), math.rad(-92.246)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.497, -0.289, 0.347) * CFrame.Angles(math.rad(-126.566), math.rad(-13.751), math.rad(51.967)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.99), math.rad(30.825), math.rad(34.32)),
					},
				},
			},
		},
		[4.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.29, 0.308, -0.742) * CFrame.Angles(math.rad(-23.606), math.rad(-20.684), math.rad(-137.166)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.683, 1.484, -1.257) * CFrame.Angles(math.rad(-37.185), math.rad(-31.799), math.rad(-36.44)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.295, -0.356, -0.136) * CFrame.Angles(math.rad(18.85), math.rad(-44.347), math.rad(-24.694)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.907, -1.072, 0.248) * CFrame.Angles(math.rad(-67.724), math.rad(12.72), math.rad(-91.329)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.484, -0.295, 0.378) * CFrame.Angles(math.rad(-126.223), math.rad(-12.204), math.rad(49.618)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.735), math.rad(30.768), math.rad(35.695)),
					},
				},
			},
		},
		[4.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.276, 0.308, -0.741) * CFrame.Angles(math.rad(-23.434), math.rad(-19.595), math.rad(-139.057)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.678, 1.461, -1.22) * CFrame.Angles(math.rad(-36.497), math.rad(-29.794), math.rad(-35.695)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.284, -0.351, -0.122) * CFrame.Angles(math.rad(17.418), math.rad(-42.513), math.rad(-26.07)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.863, -1.035, 0.279) * CFrame.Angles(math.rad(-69.099), math.rad(11.001), math.rad(-90.413)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.47, -0.3, 0.409) * CFrame.Angles(math.rad(-125.764), math.rad(-10.657), math.rad(47.269)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.48), math.rad(30.653), math.rad(37.07)),
					},
				},
			},
		},
		[4.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.262, 0.308, -0.74) * CFrame.Angles(math.rad(-23.319), math.rad(-18.564), math.rad(-140.948)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.672, 1.437, -1.182) * CFrame.Angles(math.rad(-35.81), math.rad(-27.788), math.rad(-34.95)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.272, -0.346, -0.109) * CFrame.Angles(math.rad(16.1), math.rad(-40.623), math.rad(-27.445)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.818, -0.997, 0.308) * CFrame.Angles(math.rad(-70.474), math.rad(9.225), math.rad(-89.439)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.455, -0.306, 0.44) * CFrame.Angles(math.rad(-125.134), math.rad(-9.167), math.rad(44.805)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.167), math.rad(30.481), math.rad(38.388)),
					},
				},
			},
		},
		[4.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.247, 0.308, -0.739) * CFrame.Angles(math.rad(-23.147), math.rad(-17.475), math.rad(-142.838)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.667, 1.413, -1.142) * CFrame.Angles(math.rad(-35.18), math.rad(-25.84), math.rad(-34.263)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.259, -0.341, -0.096) * CFrame.Angles(math.rad(14.84), math.rad(-38.617), math.rad(-28.705)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.772, -0.959, 0.337) * CFrame.Angles(math.rad(-71.792), math.rad(7.391), math.rad(-88.407)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.441, -0.311, 0.471) * CFrame.Angles(math.rad(-124.389), math.rad(-7.678), math.rad(42.284)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.855), math.rad(30.309), math.rad(39.706)),
					},
				},
			},
		},
		[4.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.233, 0.308, -0.738) * CFrame.Angles(math.rad(-22.918), math.rad(-16.444), math.rad(-144.844)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.662, 1.388, -1.099) * CFrame.Angles(math.rad(-34.607), math.rad(-23.835), math.rad(-33.461)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.246, -0.335, -0.083) * CFrame.Angles(math.rad(13.636), math.rad(-36.669), math.rad(-29.908)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.726, -0.92, 0.364) * CFrame.Angles(math.rad(-72.995), math.rad(5.5), math.rad(-87.319)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.426, -0.316, 0.5) * CFrame.Angles(math.rad(-123.415), math.rad(-6.245), math.rad(39.763)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.542), math.rad(30.023), math.rad(40.966)),
					},
				},
			},
		},
		[4.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.218, 0.306, -0.737) * CFrame.Angles(math.rad(-22.746), math.rad(-15.355), math.rad(-146.792)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.657, 1.362, -1.055) * CFrame.Angles(math.rad(-33.976), math.rad(-21.944), math.rad(-32.716)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.232, -0.33, -0.071) * CFrame.Angles(math.rad(12.49), math.rad(-34.664), math.rad(-30.997)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.68, -0.882, 0.389) * CFrame.Angles(math.rad(-74.198), math.rad(3.552), math.rad(-86.23)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.411, -0.321, 0.527) * CFrame.Angles(math.rad(-122.326), math.rad(-4.985), math.rad(37.242)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.115), math.rad(29.679), math.rad(42.112)),
					},
				},
			},
		},
		[4.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.204, 0.305, -0.735) * CFrame.Angles(math.rad(-22.517), math.rad(-14.324), math.rad(-148.74)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.653, 1.337, -1.009) * CFrame.Angles(math.rad(-33.403), math.rad(-20.054), math.rad(-31.856)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.218, -0.324, -0.059) * CFrame.Angles(math.rad(11.402), math.rad(-32.601), math.rad(-32.086)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.634, -0.843, 0.412) * CFrame.Angles(math.rad(-75.229), math.rad(1.604), math.rad(-85.027)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.396, -0.325, 0.553) * CFrame.Angles(math.rad(-121.009), math.rad(-3.782), math.rad(34.664)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.688), math.rad(29.335), math.rad(43.258)),
					},
				},
			},
		},
		[4.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.189, 0.303, -0.734) * CFrame.Angles(math.rad(-22.288), math.rad(-13.293), math.rad(-150.688)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.65, 1.312, -0.961) * CFrame.Angles(math.rad(-32.773), math.rad(-18.22), math.rad(-30.94)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.203, -0.318, -0.048) * CFrame.Angles(math.rad(10.371), math.rad(-30.596), math.rad(-33.002)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.588, -0.804, 0.434) * CFrame.Angles(math.rad(-76.146), math.rad(-0.344), math.rad(-83.709)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.381, -0.329, 0.576) * CFrame.Angles(math.rad(-119.634), math.rad(-2.75), math.rad(32.2)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.204), math.rad(28.934), math.rad(44.232)),
					},
				},
			},
		},
		[4.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.175, 0.301, -0.733) * CFrame.Angles(math.rad(-22.002), math.rad(-12.319), math.rad(-152.636)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.648, 1.288, -0.911) * CFrame.Angles(math.rad(-32.143), math.rad(-16.501), math.rad(-29.966)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.189, -0.313, -0.038) * CFrame.Angles(math.rad(9.454), math.rad(-28.591), math.rad(-33.919)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.543, -0.766, 0.452) * CFrame.Angles(math.rad(-76.948), math.rad(-2.349), math.rad(-82.334)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.366, -0.332, 0.597) * CFrame.Angles(math.rad(-118.029), math.rad(-1.833), math.rad(29.737)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.662), math.rad(28.419), math.rad(45.149)),
					},
				},
			},
		},
		[4.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.162, 0.299, -0.731) * CFrame.Angles(math.rad(-21.772), math.rad(-11.345), math.rad(-154.527)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.646, 1.265, -0.858) * CFrame.Angles(math.rad(-31.455), math.rad(-14.84), math.rad(-28.934)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.174, -0.307, -0.028) * CFrame.Angles(math.rad(8.537), math.rad(-26.585), math.rad(-34.664)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.498, -0.729, 0.468) * CFrame.Angles(math.rad(-77.578), math.rad(-4.354), math.rad(-80.902)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.351, -0.335, 0.614) * CFrame.Angles(math.rad(-116.368), math.rad(-1.203), math.rad(27.387)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.063), math.rad(27.96), math.rad(45.951)),
					},
				},
			},
		},
		[4.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.149, 0.296, -0.73) * CFrame.Angles(math.rad(-21.486), math.rad(-10.428), math.rad(-156.417)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.646, 1.244, -0.804) * CFrame.Angles(math.rad(-30.711), math.rad(-13.235), math.rad(-27.788)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.159, -0.301, -0.02) * CFrame.Angles(math.rad(7.678), math.rad(-24.637), math.rad(-35.409)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.455, -0.693, 0.48) * CFrame.Angles(math.rad(-78.094), math.rad(-6.303), math.rad(-79.297)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.336, -0.337, 0.629) * CFrame.Angles(math.rad(-114.592), math.rad(-0.688), math.rad(25.096)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.465), math.rad(27.387), math.rad(46.639)),
					},
				},
			},
		},
		[4.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.136, 0.294, -0.728) * CFrame.Angles(math.rad(-21.257), math.rad(-9.511), math.rad(-158.308)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.647, 1.225, -0.746) * CFrame.Angles(math.rad(-29.966), math.rad(-11.746), math.rad(-26.585)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.144, -0.296, -0.012) * CFrame.Angles(math.rad(6.875), math.rad(-22.746), math.rad(-36.039)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.413, -0.659, 0.489) * CFrame.Angles(math.rad(-78.381), math.rad(-8.193), math.rad(-77.521)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.322, -0.338, 0.639) * CFrame.Angles(math.rad(-112.701), math.rad(-0.458), math.rad(22.976)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.751), math.rad(26.814), math.rad(47.212)),
					},
				},
			},
		},
		[5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.124, 0.291, -0.726) * CFrame.Angles(math.rad(-20.97), math.rad(-8.652), math.rad(-160.084)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.649, 1.207, -0.686) * CFrame.Angles(math.rad(-29.106), math.rad(-10.371), math.rad(-25.267)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.129, -0.291, -0.005) * CFrame.Angles(math.rad(6.131), math.rad(-20.856), math.rad(-36.555)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.372, -0.626, 0.495) * CFrame.Angles(math.rad(-78.438), math.rad(-10.084), math.rad(-75.573)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.308, -0.338, 0.645) * CFrame.Angles(math.rad(-110.753), math.rad(-0.458), math.rad(21.028)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.037), math.rad(26.184), math.rad(47.613)),
					},
				},
			},
		},
		[5.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.112, 0.289, -0.723) * CFrame.Angles(math.rad(-20.741), math.rad(-7.85), math.rad(-161.861)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.651, 1.191, -0.622) * CFrame.Angles(math.rad(-28.132), math.rad(-9.053), math.rad(-23.835)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.114, -0.286, 0.002) * CFrame.Angles(math.rad(5.443), math.rad(-19.022), math.rad(-37.07)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.332, -0.594, 0.496) * CFrame.Angles(math.rad(-78.266), math.rad(-11.86), math.rad(-73.51)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.294, -0.338, 0.647) * CFrame.Angles(math.rad(-108.69), math.rad(-0.688), math.rad(19.309)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.267), math.rad(25.554), math.rad(47.957)),
					},
				},
			},
		},
		[5.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.101, 0.286, -0.72) * CFrame.Angles(math.rad(-20.512), math.rad(-7.105), math.rad(-163.579)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.654, 1.175, -0.556) * CFrame.Angles(math.rad(-27.101), math.rad(-7.792), math.rad(-22.403)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.1, -0.281, 0.007) * CFrame.Angles(math.rad(4.813), math.rad(-17.246), math.rad(-37.414)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.295, -0.565, 0.492) * CFrame.Angles(math.rad(-77.75), math.rad(-13.465), math.rad(-71.104)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.281, -0.337, 0.642) * CFrame.Angles(math.rad(-106.456), math.rad(-0.974), math.rad(17.704)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.439), math.rad(24.866), math.rad(48.128)),
					},
				},
			},
		},
		[5.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.091, 0.283, -0.715) * CFrame.Angles(math.rad(-20.283), math.rad(-6.36), math.rad(-165.241)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.655, 1.159, -0.488) * CFrame.Angles(math.rad(-26.07), math.rad(-6.589), math.rad(-20.97)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.086, -0.276, 0.013) * CFrame.Angles(math.rad(4.183), math.rad(-15.527), math.rad(-37.758)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.259, -0.538, 0.484) * CFrame.Angles(math.rad(-76.662), math.rad(-14.84), math.rad(-68.297)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.268, -0.335, 0.631) * CFrame.Angles(math.rad(-103.935), math.rad(-1.375), math.rad(16.329)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.61), math.rad(24.122), math.rad(48.243)),
					},
				},
			},
		},
		[5.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.081, 0.28, -0.709) * CFrame.Angles(math.rad(-19.996), math.rad(-5.615), math.rad(-166.903)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.656, 1.142, -0.419) * CFrame.Angles(math.rad(-24.981), math.rad(-5.386), math.rad(-19.538)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.072, -0.271, 0.017) * CFrame.Angles(math.rad(3.552), math.rad(-13.808), math.rad(-37.987)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.225, -0.513, 0.471) * CFrame.Angles(math.rad(-75.115), math.rad(-15.928), math.rad(-65.145)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.256, -0.332, 0.613) * CFrame.Angles(math.rad(-101.127), math.rad(-1.719), math.rad(15.011)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.668), math.rad(23.377), math.rad(48.243)),
					},
				},
			},
		},
		[5.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.071, 0.277, -0.702) * CFrame.Angles(math.rad(-19.767), math.rad(-4.927), math.rad(-168.507)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.656, 1.123, -0.349) * CFrame.Angles(math.rad(-23.835), math.rad(-4.24), math.rad(-18.163)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.058, -0.266, 0.021) * CFrame.Angles(math.rad(2.979), math.rad(-12.147), math.rad(-38.159)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.193, -0.489, 0.454) * CFrame.Angles(math.rad(-73.109), math.rad(-16.73), math.rad(-61.65)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.245, -0.329, 0.59) * CFrame.Angles(math.rad(-98.09), math.rad(-2.12), math.rad(13.866)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.725), math.rad(22.632), math.rad(48.186)),
					},
				},
			},
		},
		[5.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.062, 0.274, -0.694) * CFrame.Angles(math.rad(-19.538), math.rad(-4.297), math.rad(-170.111)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.654, 1.104, -0.278) * CFrame.Angles(math.rad(-22.689), math.rad(-3.094), math.rad(-16.788)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.045, -0.262, 0.024) * CFrame.Angles(math.rad(2.406), math.rad(-10.542), math.rad(-38.274)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.162, -0.468, 0.433) * CFrame.Angles(math.rad(-70.703), math.rad(-17.131), math.rad(-57.869)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.234, -0.326, 0.561) * CFrame.Angles(math.rad(-94.767), math.rad(-2.578), math.rad(12.834)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.725), math.rad(21.887), math.rad(48.014)),
					},
				},
			},
		},
		[5.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.053, 0.271, -0.684) * CFrame.Angles(math.rad(-19.251), math.rad(-3.667), math.rad(-171.658)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.65, 1.082, -0.208) * CFrame.Angles(math.rad(-21.543), math.rad(-2.005), math.rad(-15.527)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.032, -0.257, 0.027) * CFrame.Angles(math.rad(1.891), math.rad(-8.938), math.rad(-38.331)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.134, -0.448, 0.41) * CFrame.Angles(math.rad(-67.953), math.rad(-17.189), math.rad(-53.801)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.223, -0.322, 0.529) * CFrame.Angles(math.rad(-91.215), math.rad(-3.037), math.rad(11.86)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.725), math.rad(21.085), math.rad(47.785)),
					},
				},
			},
		},
		[5.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.044, 0.268, -0.674) * CFrame.Angles(math.rad(-19.022), math.rad(-3.094), math.rad(-173.148)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.644, 1.059, -0.139) * CFrame.Angles(math.rad(-20.397), math.rad(-0.917), math.rad(-14.267)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.019, -0.253, 0.029) * CFrame.Angles(math.rad(1.375), math.rad(-7.391), math.rad(-38.331)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.108, -0.43, 0.384) * CFrame.Angles(math.rad(-64.916), math.rad(-16.788), math.rad(-49.561)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.213, -0.318, 0.493) * CFrame.Angles(math.rad(-87.491), math.rad(-3.552), math.rad(11.001)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.61), math.rad(20.283), math.rad(47.498)),
					},
				},
			},
		},
		[5.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.036, 0.264, -0.662) * CFrame.Angles(math.rad(-18.793), math.rad(-2.521), math.rad(-174.58)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.636, 1.035, -0.07) * CFrame.Angles(math.rad(-19.309), math.rad(0.172), math.rad(-13.063)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.006, -0.249, 0.031) * CFrame.Angles(math.rad(0.859), math.rad(-5.901), math.rad(-38.274)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.083, -0.413, 0.357) * CFrame.Angles(math.rad(-61.765), math.rad(-16.043), math.rad(-45.206)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.204, -0.313, 0.455) * CFrame.Angles(math.rad(-83.595), math.rad(-4.068), math.rad(10.256)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.553), math.rad(19.481), math.rad(47.097)),
					},
				},
			},
		},
		[5.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.029, 0.261, -0.65) * CFrame.Angles(math.rad(-18.507), math.rad(-2.005), math.rad(-176.013)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.624, 1.009, -0.004) * CFrame.Angles(math.rad(-18.163), math.rad(1.261), math.rad(-11.975)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.006, -0.244, 0.033) * CFrame.Angles(math.rad(0.344), math.rad(-4.469), math.rad(-38.159)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.061, -0.398, 0.328) * CFrame.Angles(math.rad(-58.499), math.rad(-14.84), math.rad(-40.795)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.195, -0.308, 0.415) * CFrame.Angles(math.rad(-79.584), math.rad(-4.698), math.rad(9.568)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.439), math.rad(18.621), math.rad(46.696)),
					},
				},
			},
		},
		[5.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.022, 0.258, -0.636) * CFrame.Angles(math.rad(-18.277), math.rad(-1.49), math.rad(-177.445)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.608, 0.981, 0.059) * CFrame.Angles(math.rad(-17.131), math.rad(2.292), math.rad(-11.001)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.017, -0.24, 0.034) * CFrame.Angles(math.rad(-0.115), math.rad(-3.094), math.rad(-38.044)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.04, -0.384, 0.298) * CFrame.Angles(math.rad(-55.233), math.rad(-13.178), math.rad(-36.497)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.187, -0.303, 0.373) * CFrame.Angles(math.rad(-75.516), math.rad(-5.271), math.rad(8.938)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.267), math.rad(17.819), math.rad(46.18)),
					},
				},
			},
		},
		[5.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.015, 0.255, -0.622) * CFrame.Angles(math.rad(-18.048), math.rad(-1.031), math.rad(-178.763)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.588, 0.952, 0.119) * CFrame.Angles(math.rad(-16.157), math.rad(3.38), math.rad(-10.141)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.029, -0.236, 0.035) * CFrame.Angles(math.rad(-0.573), math.rad(-1.719), math.rad(-37.815)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.021, -0.372, 0.268) * CFrame.Angles(math.rad(-52.082), math.rad(-11.173), math.rad(-32.315)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.18, -0.298, 0.331) * CFrame.Angles(math.rad(-71.333), math.rad(-5.901), math.rad(8.422)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-14.095), math.rad(16.96), math.rad(45.665)),
					},
				},
			},
		},
		[5.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.008, 0.252, -0.607) * CFrame.Angles(math.rad(-17.819), math.rad(-0.573), math.rad(179.909)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.563, 0.921, 0.176) * CFrame.Angles(math.rad(-15.183), math.rad(4.412), math.rad(-9.454)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.04, -0.233, 0.035) * CFrame.Angles(math.rad(-1.031), math.rad(-0.401), math.rad(-37.586)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, -0.361, 0.238) * CFrame.Angles(math.rad(-48.988), math.rad(-8.824), math.rad(-28.304)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.173, -0.293, 0.289) * CFrame.Angles(math.rad(-67.208), math.rad(-6.589), math.rad(8.021)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.923), math.rad(16.157), math.rad(45.092)),
					},
				},
			},
		},
		[5.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(-0.002, 0.249, -0.591) * CFrame.Angles(math.rad(-17.59), math.rad(-0.172), math.rad(178.648)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.532, 0.888, 0.228) * CFrame.Angles(math.rad(-14.324), math.rad(5.443), math.rad(-8.938)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.05, -0.229, 0.035) * CFrame.Angles(math.rad(-1.49), math.rad(0.859), math.rad(-37.3)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.011, -0.351, 0.209) * CFrame.Angles(math.rad(-46.123), math.rad(-6.245), math.rad(-24.523)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.166, -0.288, 0.248) * CFrame.Angles(math.rad(-63.083), math.rad(-7.277), math.rad(7.62)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.694), math.rad(15.298), math.rad(44.462)),
					},
				},
			},
		},
		[5.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.004, 0.246, -0.575) * CFrame.Angles(math.rad(-17.361), math.rad(0.229), math.rad(177.445)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.495, 0.854, 0.275) * CFrame.Angles(math.rad(-13.522), math.rad(6.474), math.rad(-8.652)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.06, -0.225, 0.035) * CFrame.Angles(math.rad(-1.891), math.rad(2.063), math.rad(-37.013)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.024, -0.342, 0.181) * CFrame.Angles(math.rad(-43.487), math.rad(-3.438), math.rad(-21.028)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.161, -0.283, 0.209) * CFrame.Angles(math.rad(-59.015), math.rad(-7.964), math.rad(7.334)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.465), math.rad(14.439), math.rad(43.831)),
					},
				},
			},
		},
		[5.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.009, 0.243, -0.558) * CFrame.Angles(math.rad(-17.131), math.rad(0.63), math.rad(176.242)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.449, 0.819, 0.316) * CFrame.Angles(math.rad(-12.777), math.rad(7.448), math.rad(-8.594)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.07, -0.222, 0.035) * CFrame.Angles(math.rad(-2.292), math.rad(3.266), math.rad(-36.669)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.036, -0.335, 0.155) * CFrame.Angles(math.rad(-41.081), math.rad(-0.516), math.rad(-17.819)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.156, -0.279, 0.172) * CFrame.Angles(math.rad(-55.119), math.rad(-8.652), math.rad(7.047)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.235), math.rad(13.636), math.rad(43.144)),
					},
				},
			},
		},
		[5.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.014, 0.24, -0.541) * CFrame.Angles(math.rad(-16.96), math.rad(0.974), math.rad(175.096)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.392, 0.782, 0.35) * CFrame.Angles(math.rad(-12.147), math.rad(8.48), math.rad(-8.881)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.079, -0.219, 0.034) * CFrame.Angles(math.rad(-2.693), math.rad(4.412), math.rad(-36.326)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.046, -0.329, 0.131) * CFrame.Angles(math.rad(-38.847), math.rad(2.464), math.rad(-14.954)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.151, -0.275, 0.138) * CFrame.Angles(math.rad(-51.394), math.rad(-9.339), math.rad(6.875)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-13.006), math.rad(12.834), math.rad(42.399)),
					},
				},
			},
		},
		[5.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.019, 0.237, -0.523) * CFrame.Angles(math.rad(-16.73), math.rad(1.318), math.rad(174.007)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.318, 0.741, 0.376) * CFrame.Angles(math.rad(-11.631), math.rad(9.454), math.rad(-9.74)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.088, -0.215, 0.034) * CFrame.Angles(math.rad(-3.094), math.rad(5.5), math.rad(-35.924)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.054, -0.324, 0.11) * CFrame.Angles(math.rad(-36.898), math.rad(5.443), math.rad(-12.376)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.147, -0.271, 0.107) * CFrame.Angles(math.rad(-47.957), math.rad(-10.027), math.rad(6.704)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.777), math.rad(11.975), math.rad(41.711)),
					},
				},
			},
		},
		[5.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.023, 0.234, -0.505) * CFrame.Angles(math.rad(-16.558), math.rad(1.604), math.rad(172.919)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.211, 0.693, 0.39) * CFrame.Angles(math.rad(-11.173), math.rad(10.371), math.rad(-11.688)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.097, -0.212, 0.033) * CFrame.Angles(math.rad(-3.438), math.rad(6.532), math.rad(-35.466)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.061, -0.319, 0.091) * CFrame.Angles(math.rad(-35.18), math.rad(8.365), math.rad(-10.084)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.267, 0.08) * CFrame.Angles(math.rad(-44.748), math.rad(-10.772), math.rad(6.532)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.548), math.rad(11.173), math.rad(40.966)),
					},
				},
			},
		},
		[5.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.028, 0.232, -0.486) * CFrame.Angles(math.rad(-16.387), math.rad(1.948), math.rad(171.945)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.035, 0.632, 0.384) * CFrame.Angles(math.rad(-10.829), math.rad(11.345), math.rad(-15.756)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.105, -0.21, 0.032) * CFrame.Angles(math.rad(-3.839), math.rad(7.563), math.rad(-35.065)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.066, -0.316, 0.076) * CFrame.Angles(math.rad(-33.633), math.rad(11.115), math.rad(-8.136)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.142, -0.265, 0.059) * CFrame.Angles(math.rad(-41.883), math.rad(-11.459), math.rad(6.36)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.319), math.rad(10.371), math.rad(40.222)),
					},
				},
			},
		},
		[5.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.031, 0.229, -0.467) * CFrame.Angles(math.rad(-16.215), math.rad(2.177), math.rad(170.971)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.025, 0.632, 0.394) * CFrame.Angles(math.rad(-10.6), math.rad(12.261), math.rad(-14.553)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.113, -0.207, 0.031) * CFrame.Angles(math.rad(-4.183), math.rad(8.537), math.rad(-34.607)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.069, -0.314, 0.065) * CFrame.Angles(math.rad(-32.258), math.rad(13.694), math.rad(-6.474)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, -0.262, 0.043) * CFrame.Angles(math.rad(-39.362), math.rad(-12.147), math.rad(6.188)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-12.089), math.rad(9.626), math.rad(39.419)),
					},
				},
			},
		},
		[5.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.035, 0.227, -0.448) * CFrame.Angles(math.rad(-16.043), math.rad(2.464), math.rad(169.997)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.016, 0.632, 0.399) * CFrame.Angles(math.rad(-10.485), math.rad(13.178), math.rad(-13.35)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.12, -0.204, 0.029) * CFrame.Angles(math.rad(-4.526), math.rad(9.454), math.rad(-34.148)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.071, -0.312, 0.058) * CFrame.Angles(math.rad(-31.054), math.rad(16.043), math.rad(-5.099)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.139, -0.261, 0.033) * CFrame.Angles(math.rad(-37.3), math.rad(-12.892), math.rad(6.016)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.803), math.rad(8.824), math.rad(38.675)),
					},
				},
			},
		},
		[5.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.039, 0.225, -0.429) * CFrame.Angles(math.rad(-15.871), math.rad(2.693), math.rad(169.137)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.007, 0.633, 0.399) * CFrame.Angles(math.rad(-10.485), math.rad(14.095), math.rad(-12.261)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.127, -0.202, 0.028) * CFrame.Angles(math.rad(-4.813), math.rad(10.313), math.rad(-33.633)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.071, -0.311, 0.056) * CFrame.Angles(math.rad(-29.966), math.rad(18.105), math.rad(-4.011)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.139, -0.26, 0.03) * CFrame.Angles(math.rad(-35.753), math.rad(-13.579), math.rad(5.787)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.574), math.rad(8.079), math.rad(37.873)),
					},
				},
			},
		},
		[5.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.042, 0.223, -0.41) * CFrame.Angles(math.rad(-15.756), math.rad(2.922), math.rad(168.278)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.988, 0.624, 0.39) * CFrame.Angles(math.rad(-10.714), math.rad(14.954), math.rad(-11.459)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.134, -0.199, 0.027) * CFrame.Angles(math.rad(-5.157), math.rad(11.115), math.rad(-33.117)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.071, -0.311, 0.057) * CFrame.Angles(math.rad(-29.049), math.rad(19.996), math.rad(-3.151)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, -0.259, 0.03) * CFrame.Angles(math.rad(-34.492), math.rad(-14.324), math.rad(5.5)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.345), math.rad(7.334), math.rad(37.128)),
					},
				},
			},
		},
		[5.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.045, 0.221, -0.391) * CFrame.Angles(math.rad(-15.584), math.rad(3.094), math.rad(167.418)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.954, 0.598, 0.37) * CFrame.Angles(math.rad(-11.115), math.rad(15.871), math.rad(-11.287)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.14, -0.197, 0.025) * CFrame.Angles(math.rad(-5.443), math.rad(11.918), math.rad(-32.544)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.07, -0.311, 0.057) * CFrame.Angles(math.rad(-28.19), math.rad(21.658), math.rad(-2.406)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, -0.259, 0.031) * CFrame.Angles(math.rad(-33.289), math.rad(-15.011), math.rad(5.214)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-11.115), math.rad(6.646), math.rad(36.383)),
					},
				},
			},
		},
		[5.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.047, 0.219, -0.371) * CFrame.Angles(math.rad(-15.47), math.rad(3.266), math.rad(166.673)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.908, 0.559, 0.342) * CFrame.Angles(math.rad(-11.746), math.rad(16.73), math.rad(-11.516)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.145, -0.194, 0.024) * CFrame.Angles(math.rad(-5.672), math.rad(12.72), math.rad(-31.914)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.07, -0.31, 0.058) * CFrame.Angles(math.rad(-27.445), math.rad(23.262), math.rad(-1.719)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, -0.258, 0.031) * CFrame.Angles(math.rad(-32.258), math.rad(-15.699), math.rad(4.927)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.943), math.rad(5.959), math.rad(35.638)),
					},
				},
			},
		},
		[5.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.05, 0.217, -0.352) * CFrame.Angles(math.rad(-15.298), math.rad(3.438), math.rad(165.929)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.853, 0.509, 0.307) * CFrame.Angles(math.rad(-12.433), math.rad(17.59), math.rad(-12.089)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.151, -0.192, 0.022) * CFrame.Angles(math.rad(-5.959), math.rad(13.407), math.rad(-31.169)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.069, -0.31, 0.058) * CFrame.Angles(math.rad(-26.757), math.rad(24.694), math.rad(-1.146)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, -0.258, 0.031) * CFrame.Angles(math.rad(-31.341), math.rad(-16.329), math.rad(4.584)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.714), math.rad(5.271), math.rad(34.893)),
					},
				},
			},
		},
		[5.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.052, 0.215, -0.333) * CFrame.Angles(math.rad(-15.183), math.rad(3.61), math.rad(165.241)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.792, 0.453, 0.268) * CFrame.Angles(math.rad(-13.235), math.rad(18.392), math.rad(-12.949)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.156, -0.19, 0.021) * CFrame.Angles(math.rad(-6.188), math.rad(14.095), math.rad(-30.424)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.069, -0.31, 0.059) * CFrame.Angles(math.rad(-26.07), math.rad(26.012), math.rad(-0.63)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.141, -0.258, 0.032) * CFrame.Angles(math.rad(-30.481), math.rad(-16.96), math.rad(4.24)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.542), math.rad(4.584), math.rad(34.148)),
					},
				},
			},
		},
		[5.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.054, 0.213, -0.314) * CFrame.Angles(math.rad(-15.069), math.rad(3.782), math.rad(164.553)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.729, 0.392, 0.226) * CFrame.Angles(math.rad(-14.037), math.rad(19.194), math.rad(-13.98)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.16, -0.188, 0.019) * CFrame.Angles(math.rad(-6.417), math.rad(14.725), math.rad(-29.622)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.068, -0.309, 0.059) * CFrame.Angles(math.rad(-25.497), math.rad(27.158), math.rad(-0.172)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.141, -0.257, 0.032) * CFrame.Angles(math.rad(-29.737), math.rad(-17.533), math.rad(3.839)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.313), math.rad(3.953), math.rad(33.461)),
					},
				},
			},
		},
		[5.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.056, 0.212, -0.296) * CFrame.Angles(math.rad(-14.954), math.rad(3.896), math.rad(163.981)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.666, 0.332, 0.185) * CFrame.Angles(math.rad(-14.84), math.rad(19.882), math.rad(-15.011)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.165, -0.185, 0.018) * CFrame.Angles(math.rad(-6.589), math.rad(15.355), math.rad(-28.762)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.068, -0.309, 0.06) * CFrame.Angles(math.rad(-24.981), math.rad(28.247), math.rad(0.229)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.141, -0.257, 0.033) * CFrame.Angles(math.rad(-29.106), math.rad(-18.105), math.rad(3.495)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-10.141), math.rad(3.38), math.rad(32.773)),
					},
				},
			},
		},
		[5.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.058, 0.21, -0.278) * CFrame.Angles(math.rad(-14.84), math.rad(4.011), math.rad(163.35)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.607, 0.274, 0.146) * CFrame.Angles(math.rad(-15.527), math.rad(20.512), math.rad(-16.043)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.169, -0.183, 0.017) * CFrame.Angles(math.rad(-6.818), math.rad(15.928), math.rad(-27.903)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.068, -0.309, 0.06) * CFrame.Angles(math.rad(-24.523), math.rad(29.221), math.rad(0.573)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.141, -0.257, 0.033) * CFrame.Angles(math.rad(-28.533), math.rad(-18.621), math.rad(3.094)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.969), math.rad(2.807), math.rad(32.086)),
					},
				},
			},
		},
		[5.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.059, 0.209, -0.26) * CFrame.Angles(math.rad(-14.782), math.rad(4.125), math.rad(162.835)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.555, 0.223, 0.112) * CFrame.Angles(math.rad(-16.1), math.rad(21.085), math.rad(-16.788)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.172, -0.181, 0.015) * CFrame.Angles(math.rad(-6.99), math.rad(16.444), math.rad(-26.986)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.068, -0.309, 0.06) * CFrame.Angles(math.rad(-24.064), math.rad(30.023), math.rad(0.859)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.142, -0.256, 0.033) * CFrame.Angles(math.rad(-28.075), math.rad(-19.137), math.rad(2.693)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.798), math.rad(2.235), math.rad(31.455)),
					},
				},
			},
		},
		[5.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.061, 0.208, -0.243) * CFrame.Angles(math.rad(-14.668), math.rad(4.24), math.rad(162.319)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.535, 0.191, 0.09) * CFrame.Angles(math.rad(-16.444), math.rad(21.601), math.rad(-16.558)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.176, -0.179, 0.014) * CFrame.Angles(math.rad(-7.105), math.rad(16.902), math.rad(-26.012)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.061) * CFrame.Angles(math.rad(-23.663), math.rad(30.825), math.rad(1.089)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.142, -0.256, 0.033) * CFrame.Angles(math.rad(-27.674), math.rad(-19.595), math.rad(2.292)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.626), math.rad(1.719), math.rad(30.825)),
					},
				},
			},
		},
		[5.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.062, 0.206, -0.226) * CFrame.Angles(math.rad(-14.553), math.rad(4.297), math.rad(161.861)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.533, 0.175, 0.08) * CFrame.Angles(math.rad(-16.616), math.rad(22.059), math.rad(-15.584)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.179, -0.177, 0.013) * CFrame.Angles(math.rad(-7.277), math.rad(17.361), math.rad(-25.038)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.061) * CFrame.Angles(math.rad(-23.319), math.rad(31.455), math.rad(1.318)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.142, -0.256, 0.034) * CFrame.Angles(math.rad(-27.33), math.rad(-20.054), math.rad(1.833)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.511), math.rad(1.203), math.rad(30.195)),
					},
				},
			},
		},
		[5.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.063, 0.205, -0.21) * CFrame.Angles(math.rad(-14.496), math.rad(4.412), math.rad(161.402)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.473, 0.142, 0.059) * CFrame.Angles(math.rad(-16.501), math.rad(22.46), math.rad(-16.673)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.181, -0.174, 0.011) * CFrame.Angles(math.rad(-7.391), math.rad(17.819), math.rad(-24.064)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.061) * CFrame.Angles(math.rad(-22.976), math.rad(32.028), math.rad(1.49)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.142, -0.256, 0.034) * CFrame.Angles(math.rad(-27.044), math.rad(-20.455), math.rad(1.432)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.397), math.rad(0.745), math.rad(29.622)),
					},
				},
			},
		},
		[5.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.064, 0.204, -0.195) * CFrame.Angles(math.rad(-14.381), math.rad(4.469), math.rad(161.001)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.472, 0.144, 0.059) * CFrame.Angles(math.rad(-16.157), math.rad(22.746), math.rad(-15.642)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.184, -0.172, 0.01) * CFrame.Angles(math.rad(-7.506), math.rad(18.163), math.rad(-23.09)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.061) * CFrame.Angles(math.rad(-22.689), math.rad(32.487), math.rad(1.604)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.143, -0.256, 0.034) * CFrame.Angles(math.rad(-26.872), math.rad(-20.856), math.rad(1.031)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.225), math.rad(0.286), math.rad(29.049)),
					},
				},
			},
		},
		[5.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.065, 0.202, -0.18) * CFrame.Angles(math.rad(-14.267), math.rad(4.526), math.rad(160.657)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.475, 0.152, 0.061) * CFrame.Angles(math.rad(-15.814), math.rad(23.033), math.rad(-14.553)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.186, -0.17, 0.009) * CFrame.Angles(math.rad(-7.62), math.rad(18.564), math.rad(-22.059)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-22.46), math.rad(32.888), math.rad(1.719)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.143, -0.256, 0.034) * CFrame.Angles(math.rad(-26.7), math.rad(-21.199), math.rad(0.63)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-9.11), math.rad(-0.115), math.rad(28.533)),
					},
				},
			},
		},
		[5.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.065, 0.201, -0.166) * CFrame.Angles(math.rad(-14.209), math.rad(4.526), math.rad(160.371)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.482, 0.167, 0.065) * CFrame.Angles(math.rad(-15.355), math.rad(23.262), math.rad(-13.35)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.187, -0.168, 0.008) * CFrame.Angles(math.rad(-7.678), math.rad(18.85), math.rad(-21.028)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-22.173), math.rad(33.232), math.rad(1.776)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.143, -0.256, 0.034) * CFrame.Angles(math.rad(-26.528), math.rad(-21.486), math.rad(0.229)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.995), math.rad(-0.516), math.rad(28.018)),
					},
				},
			},
		},
		[5.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.066, 0.2, -0.153) * CFrame.Angles(math.rad(-14.095), math.rad(4.584), math.rad(160.084)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.491, 0.187, 0.071) * CFrame.Angles(math.rad(-14.897), math.rad(23.491), math.rad(-12.089)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.189, -0.166, 0.007) * CFrame.Angles(math.rad(-7.735), math.rad(19.137), math.rad(-19.996)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-21.944), math.rad(33.518), math.rad(1.833)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.143, -0.256, 0.034) * CFrame.Angles(math.rad(-26.471), math.rad(-21.772), math.rad(-0.172)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.938), math.rad(-0.859), math.rad(27.559)),
					},
				},
			},
		},
		[5.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.066, 0.199, -0.141) * CFrame.Angles(math.rad(-14.037), math.rad(4.641), math.rad(159.798)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.503, 0.211, 0.078) * CFrame.Angles(math.rad(-14.439), math.rad(23.663), math.rad(-10.772)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.19, -0.164, 0.006) * CFrame.Angles(math.rad(-7.792), math.rad(19.423), math.rad(-19.022)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-21.772), math.rad(33.747), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.256, 0.035) * CFrame.Angles(math.rad(-26.413), math.rad(-22.002), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.824), math.rad(-1.146), math.rad(27.158)),
					},
				},
			},
		},
		[5.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, 0.197, -0.13) * CFrame.Angles(math.rad(-13.923), math.rad(4.641), math.rad(159.569)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.517, 0.24, 0.086) * CFrame.Angles(math.rad(-13.923), math.rad(23.778), math.rad(-9.454)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.191, -0.161, 0.005) * CFrame.Angles(math.rad(-7.85), math.rad(19.595), math.rad(-17.991)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-21.543), math.rad(33.919), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.255, 0.035) * CFrame.Angles(math.rad(-26.356), math.rad(-22.231), math.rad(-0.917)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.709), math.rad(-1.432), math.rad(26.757)),
					},
				},
			},
		},
		[5.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, 0.196, -0.12) * CFrame.Angles(math.rad(-13.866), math.rad(4.641), math.rad(159.397)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.532, 0.271, 0.095) * CFrame.Angles(math.rad(-13.465), math.rad(23.892), math.rad(-8.193)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.192, -0.159, 0.004) * CFrame.Angles(math.rad(-7.907), math.rad(19.824), math.rad(-17.017)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-21.371), math.rad(34.034), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.255, 0.035) * CFrame.Angles(math.rad(-26.299), math.rad(-22.403), math.rad(-1.261)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.652), math.rad(-1.662), math.rad(26.413)),
					},
				},
			},
		},
		[5.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, 0.195, -0.111) * CFrame.Angles(math.rad(-13.751), math.rad(4.641), math.rad(159.225)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.549, 0.304, 0.104) * CFrame.Angles(math.rad(-12.949), math.rad(23.95), math.rad(-6.875)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.192, -0.157, 0.004) * CFrame.Angles(math.rad(-7.907), math.rad(19.939), math.rad(-16.043)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-21.199), math.rad(34.148), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.255, 0.035) * CFrame.Angles(math.rad(-26.299), math.rad(-22.517), math.rad(-1.547)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.594), math.rad(-1.833), math.rad(26.07)),
					},
				},
			},
		},
		[5.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, 0.193, -0.104) * CFrame.Angles(math.rad(-13.636), math.rad(4.641), math.rad(159.11)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.567, 0.339, 0.114) * CFrame.Angles(math.rad(-12.49), math.rad(23.95), math.rad(-5.615)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.192, -0.155, 0.003) * CFrame.Angles(math.rad(-7.907), math.rad(20.054), math.rad(-15.126)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-21.085), math.rad(34.206), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.255, 0.035) * CFrame.Angles(math.rad(-26.299), math.rad(-22.575), math.rad(-1.833)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.537), math.rad(-2.005), math.rad(25.783)),
					},
				},
			},
		},
		[5.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, 0.192, -0.097) * CFrame.Angles(math.rad(-13.522), math.rad(4.641), math.rad(159.053)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.585, 0.374, 0.124) * CFrame.Angles(math.rad(-12.032), math.rad(23.95), math.rad(-4.412)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.192, -0.152, 0.003) * CFrame.Angles(math.rad(-7.907), math.rad(20.168), math.rad(-14.209)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.308, 0.062) * CFrame.Angles(math.rad(-20.913), math.rad(34.206), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.255, 0.035) * CFrame.Angles(math.rad(-26.299), math.rad(-22.689), math.rad(-2.063)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.48), math.rad(-2.12), math.rad(25.554)),
					},
				},
			},
		},
		[5.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.067, 0.19, -0.092) * CFrame.Angles(math.rad(-13.407), math.rad(4.641), math.rad(158.996)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.603, 0.41, 0.134) * CFrame.Angles(math.rad(-11.631), math.rad(23.892), math.rad(-3.266)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.191, -0.15, 0.002) * CFrame.Angles(math.rad(-7.907), math.rad(20.225), math.rad(-13.35)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.307, 0.063) * CFrame.Angles(math.rad(-20.798), math.rad(34.263), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.145, -0.255, 0.035) * CFrame.Angles(math.rad(-26.241), math.rad(-22.689), math.rad(-2.235)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.422), math.rad(-2.235), math.rad(25.382)),
					},
				},
			},
		},
		[5.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.066, 0.189, -0.088) * CFrame.Angles(math.rad(-13.293), math.rad(4.641), math.rad(158.996)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.621, 0.444, 0.144) * CFrame.Angles(math.rad(-11.173), math.rad(23.835), math.rad(-2.177)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.191, -0.147, 0.002) * CFrame.Angles(math.rad(-7.907), math.rad(20.225), math.rad(-12.548)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.307, 0.063) * CFrame.Angles(math.rad(-20.626), math.rad(34.263), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.145, -0.255, 0.035) * CFrame.Angles(math.rad(-26.184), math.rad(-22.689), math.rad(-2.349)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.365), math.rad(-2.235), math.rad(25.21)),
					},
				},
			},
		},
		[5.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.066, 0.187, -0.085) * CFrame.Angles(math.rad(-13.178), math.rad(4.584), math.rad(158.996)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.638, 0.476, 0.153) * CFrame.Angles(math.rad(-10.829), math.rad(23.778), math.rad(-1.146)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.19, -0.145, 0.001) * CFrame.Angles(math.rad(-7.85), math.rad(20.225), math.rad(-11.746)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.307, 0.063) * CFrame.Angles(math.rad(-20.455), math.rad(34.263), math.rad(1.833)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.145, -0.255, 0.035) * CFrame.Angles(math.rad(-26.127), math.rad(-22.632), math.rad(-2.464)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.308), math.rad(-2.235), math.rad(25.038)),
					},
				},
			},
		},
		[5.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.065, 0.185, -0.082) * CFrame.Angles(math.rad(-13.063), math.rad(4.584), math.rad(159.053)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.654, 0.505, 0.162) * CFrame.Angles(math.rad(-10.428), math.rad(23.606), math.rad(-0.172)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.189, -0.142, 0.001) * CFrame.Angles(math.rad(-7.85), math.rad(20.168), math.rad(-10.943)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.067, -0.307, 0.063) * CFrame.Angles(math.rad(-20.34), math.rad(34.206), math.rad(1.833)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.255, 0.035) * CFrame.Angles(math.rad(-26.012), math.rad(-22.575), math.rad(-2.578)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.308), math.rad(-2.292), math.rad(24.866)),
					},
				},
			},
		},
		[5.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.065, 0.184, -0.079) * CFrame.Angles(math.rad(-12.949), math.rad(4.526), math.rad(159.11)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.669, 0.53, 0.17) * CFrame.Angles(math.rad(-10.084), math.rad(23.434), math.rad(0.688)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.187, -0.14, 0.001) * CFrame.Angles(math.rad(-7.792), math.rad(20.111), math.rad(-10.199)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.066, -0.306, 0.062) * CFrame.Angles(math.rad(-20.168), math.rad(34.148), math.rad(1.833)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.254, 0.035) * CFrame.Angles(math.rad(-25.898), math.rad(-22.517), math.rad(-2.693)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.251), math.rad(-2.292), math.rad(24.694)),
					},
				},
			},
		},
		[5.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.064, 0.182, -0.076) * CFrame.Angles(math.rad(-12.777), math.rad(4.469), math.rad(159.225)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.681, 0.551, 0.177) * CFrame.Angles(math.rad(-9.74), math.rad(23.262), math.rad(1.432)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.185, -0.137, 0.001) * CFrame.Angles(math.rad(-7.792), math.rad(19.996), math.rad(-9.454)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.066, -0.305, 0.062) * CFrame.Angles(math.rad(-19.996), math.rad(34.091), math.rad(1.833)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.144, -0.253, 0.035) * CFrame.Angles(math.rad(-25.783), math.rad(-22.403), math.rad(-2.75)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.193), math.rad(-2.292), math.rad(24.408)),
					},
				},
			},
		},
		[5.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.063, 0.18, -0.074) * CFrame.Angles(math.rad(-12.662), math.rad(4.412), math.rad(159.397)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.691, 0.567, 0.183) * CFrame.Angles(math.rad(-9.454), math.rad(23.033), math.rad(2.12)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.183, -0.135, 0.001) * CFrame.Angles(math.rad(-7.735), math.rad(19.882), math.rad(-8.766)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.066, -0.303, 0.062) * CFrame.Angles(math.rad(-19.882), math.rad(34.034), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.143, -0.252, 0.035) * CFrame.Angles(math.rad(-25.669), math.rad(-22.288), math.rad(-2.807)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.136), math.rad(-2.292), math.rad(24.179)),
					},
				},
			},
		},
		[5.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.062, 0.177, -0.071) * CFrame.Angles(math.rad(-12.49), math.rad(4.354), math.rad(159.569)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.699, 0.576, 0.187) * CFrame.Angles(math.rad(-9.167), math.rad(22.746), math.rad(2.75)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.181, -0.132, 0.001) * CFrame.Angles(math.rad(-7.678), math.rad(19.652), math.rad(-8.079)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.065, -0.301, 0.062) * CFrame.Angles(math.rad(-19.71), math.rad(33.919), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.142, -0.25, 0.035) * CFrame.Angles(math.rad(-25.497), math.rad(-22.173), math.rad(-2.865)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-8.079), math.rad(-2.292), math.rad(23.835)),
					},
				},
			},
		},
		[5.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.061, 0.175, -0.068) * CFrame.Angles(math.rad(-12.319), math.rad(4.297), math.rad(159.798)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.703, 0.579, 0.189) * CFrame.Angles(math.rad(-8.938), math.rad(22.46), math.rad(3.209)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.178, -0.129, 0.001) * CFrame.Angles(math.rad(-7.62), math.rad(19.481), math.rad(-7.391)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.065, -0.299, 0.061) * CFrame.Angles(math.rad(-19.538), math.rad(33.805), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.141, -0.248, 0.034) * CFrame.Angles(math.rad(-25.325), math.rad(-22.002), math.rad(-2.922)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.964), math.rad(-2.235), math.rad(23.491)),
					},
				},
			},
		},
		[5.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.06, 0.173, -0.066) * CFrame.Angles(math.rad(-12.204), math.rad(4.24), math.rad(160.027)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.704, 0.577, 0.189) * CFrame.Angles(math.rad(-8.709), math.rad(22.116), math.rad(3.667)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.175, -0.127, 0.001) * CFrame.Angles(math.rad(-7.563), math.rad(19.251), math.rad(-6.761)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.064, -0.297, 0.061) * CFrame.Angles(math.rad(-19.423), math.rad(33.69), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.14, -0.247, 0.034) * CFrame.Angles(math.rad(-25.153), math.rad(-21.83), math.rad(-2.979)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.907), math.rad(-2.235), math.rad(23.147)),
					},
				},
			},
		},
		[5.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.059, 0.171, -0.063) * CFrame.Angles(math.rad(-12.032), math.rad(4.125), math.rad(160.314)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.704, 0.576, 0.186) * CFrame.Angles(math.rad(-8.537), math.rad(21.772), math.rad(4.068)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.172, -0.124, 0.001) * CFrame.Angles(math.rad(-7.506), math.rad(18.965), math.rad(-6.131)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.064, -0.294, 0.06) * CFrame.Angles(math.rad(-19.251), math.rad(33.518), math.rad(1.891)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.139, -0.244, 0.034) * CFrame.Angles(math.rad(-24.981), math.rad(-21.658), math.rad(-2.979)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.85), math.rad(-2.235), math.rad(22.746)),
					},
				},
			},
		},
		[5.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.058, 0.168, -0.06) * CFrame.Angles(math.rad(-11.86), math.rad(4.068), math.rad(160.657)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.702, 0.575, 0.181) * CFrame.Angles(math.rad(-8.422), math.rad(21.429), math.rad(4.354)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.169, -0.121, 0.002) * CFrame.Angles(math.rad(-7.391), math.rad(18.678), math.rad(-5.5)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.063, -0.291, 0.06) * CFrame.Angles(math.rad(-19.079), math.rad(33.346), math.rad(1.948)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.138, -0.242, 0.033) * CFrame.Angles(math.rad(-24.752), math.rad(-21.429), math.rad(-2.979)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.735), math.rad(-2.235), math.rad(22.345)),
					},
				},
			},
		},
		[5.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.057, 0.166, -0.058) * CFrame.Angles(math.rad(-11.688), math.rad(3.953), math.rad(160.944)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.699, 0.574, 0.174) * CFrame.Angles(math.rad(-8.308), math.rad(21.028), math.rad(4.641)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.165, -0.118, 0.002) * CFrame.Angles(math.rad(-7.334), math.rad(18.335), math.rad(-4.927)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.062, -0.288, 0.059) * CFrame.Angles(math.rad(-18.908), math.rad(33.174), math.rad(1.948)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.136, -0.239, 0.033) * CFrame.Angles(math.rad(-24.523), math.rad(-21.257), math.rad(-3.037)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.678), math.rad(-2.177), math.rad(21.887)),
					},
				},
			},
		},
		[5.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.056, 0.163, -0.055) * CFrame.Angles(math.rad(-11.459), math.rad(3.896), math.rad(161.345)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.693, 0.574, 0.166) * CFrame.Angles(math.rad(-8.251), math.rad(20.626), math.rad(4.87)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.161, -0.115, 0.002) * CFrame.Angles(math.rad(-7.277), math.rad(17.991), math.rad(-4.354)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.062, -0.285, 0.058) * CFrame.Angles(math.rad(-18.736), math.rad(33.002), math.rad(1.948)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.135, -0.236, 0.033) * CFrame.Angles(math.rad(-24.293), math.rad(-21.028), math.rad(-3.037)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.563), math.rad(-2.177), math.rad(21.429)),
					},
				},
			},
		},
		[6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.054, 0.161, -0.053) * CFrame.Angles(math.rad(-11.287), math.rad(3.782), math.rad(161.689)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.687, 0.573, 0.155) * CFrame.Angles(math.rad(-8.193), math.rad(20.168), math.rad(5.042)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.157, -0.112, 0.003) * CFrame.Angles(math.rad(-7.219), math.rad(17.59), math.rad(-3.782)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.061, -0.281, 0.058) * CFrame.Angles(math.rad(-18.621), math.rad(32.773), math.rad(2.005)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.133, -0.233, 0.032) * CFrame.Angles(math.rad(-24.064), math.rad(-20.741), math.rad(-3.037)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.506), math.rad(-2.12), math.rad(20.97)),
					},
				},
			},
		},
		[6.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.053, 0.158, -0.051) * CFrame.Angles(math.rad(-11.115), math.rad(3.667), math.rad(162.147)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.679, 0.572, 0.144) * CFrame.Angles(math.rad(-8.136), math.rad(19.71), math.rad(5.157)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.153, -0.109, 0.003) * CFrame.Angles(math.rad(-7.105), math.rad(17.189), math.rad(-3.266)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.06, -0.277, 0.057) * CFrame.Angles(math.rad(-18.449), math.rad(32.544), math.rad(2.005)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.131, -0.23, 0.032) * CFrame.Angles(math.rad(-23.835), math.rad(-20.512), math.rad(-2.979)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.391), math.rad(-2.12), math.rad(20.455)),
					},
				},
			},
		},
		[6.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.051, 0.155, -0.048) * CFrame.Angles(math.rad(-10.886), math.rad(3.552), math.rad(162.548)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.671, 0.57, 0.132) * CFrame.Angles(math.rad(-8.136), math.rad(19.194), math.rad(5.271)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.148, -0.106, 0.004) * CFrame.Angles(math.rad(-7.047), math.rad(16.788), math.rad(-2.75)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.059, -0.273, 0.056) * CFrame.Angles(math.rad(-18.277), math.rad(32.315), math.rad(2.063)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.129, -0.227, 0.031) * CFrame.Angles(math.rad(-23.549), math.rad(-20.225), math.rad(-2.979)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.277), math.rad(-2.063), math.rad(19.939)),
					},
				},
			},
		},
		[6.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.05, 0.152, -0.046) * CFrame.Angles(math.rad(-10.714), math.rad(3.495), math.rad(163.006)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.661, 0.569, 0.119) * CFrame.Angles(math.rad(-8.136), math.rad(18.678), math.rad(5.329)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.144, -0.103, 0.004) * CFrame.Angles(math.rad(-6.99), math.rad(16.329), math.rad(-2.292)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.058, -0.269, 0.055) * CFrame.Angles(math.rad(-18.105), math.rad(32.086), math.rad(2.063)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.127, -0.223, 0.031) * CFrame.Angles(math.rad(-23.262), math.rad(-19.939), math.rad(-2.979)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.219), math.rad(-2.005), math.rad(19.366)),
					},
				},
			},
		},
		[6.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.048, 0.15, -0.044) * CFrame.Angles(math.rad(-10.485), math.rad(3.38), math.rad(163.522)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.65, 0.567, 0.106) * CFrame.Angles(math.rad(-8.079), math.rad(18.163), math.rad(5.386)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.139, -0.1, 0.004) * CFrame.Angles(math.rad(-6.933), math.rad(15.871), math.rad(-1.833)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.057, -0.265, 0.054) * CFrame.Angles(math.rad(-17.934), math.rad(31.799), math.rad(2.12)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.125, -0.22, 0.03) * CFrame.Angles(math.rad(-22.976), math.rad(-19.652), math.rad(-2.922)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-7.105), math.rad(-2.005), math.rad(18.793)),
					},
				},
			},
		},
		[6.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.047, 0.147, -0.042) * CFrame.Angles(math.rad(-10.313), math.rad(3.266), math.rad(163.981)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.638, 0.565, 0.093) * CFrame.Angles(math.rad(-8.079), math.rad(17.59), math.rad(5.443)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.134, -0.096, 0.005) * CFrame.Angles(math.rad(-6.818), math.rad(15.355), math.rad(-1.375)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.056, -0.26, 0.053) * CFrame.Angles(math.rad(-17.819), math.rad(31.57), math.rad(2.12)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.123, -0.216, 0.029) * CFrame.Angles(math.rad(-22.689), math.rad(-19.366), math.rad(-2.922)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.99), math.rad(-1.948), math.rad(18.22)),
					},
				},
			},
		},
		[6.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.045, 0.144, -0.04) * CFrame.Angles(math.rad(-10.084), math.rad(3.151), math.rad(164.496)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.626, 0.562, 0.08) * CFrame.Angles(math.rad(-8.079), math.rad(17.017), math.rad(5.443)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.129, -0.093, 0.005) * CFrame.Angles(math.rad(-6.761), math.rad(14.84), math.rad(-0.917)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.055, -0.255, 0.052) * CFrame.Angles(math.rad(-17.647), math.rad(31.283), math.rad(2.177)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.121, -0.212, 0.029) * CFrame.Angles(math.rad(-22.403), math.rad(-19.022), math.rad(-2.865)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.875), math.rad(-1.891), math.rad(17.59)),
					},
				},
			},
		},
		[6.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.044, 0.141, -0.038) * CFrame.Angles(math.rad(-9.855), math.rad(3.037), math.rad(165.069)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.613, 0.559, 0.068) * CFrame.Angles(math.rad(-8.079), math.rad(16.444), math.rad(5.386)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.123, -0.09, 0.006) * CFrame.Angles(math.rad(-6.704), math.rad(14.324), math.rad(-0.516)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.054, -0.25, 0.051) * CFrame.Angles(math.rad(-17.475), math.rad(30.997), math.rad(2.235)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.119, -0.208, 0.028) * CFrame.Angles(math.rad(-22.116), math.rad(-18.678), math.rad(-2.807)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.761), math.rad(-1.833), math.rad(16.96)),
					},
				},
			},
		},
		[6.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.042, 0.138, -0.036) * CFrame.Angles(math.rad(-9.626), math.rad(2.922), math.rad(165.642)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.599, 0.555, 0.057) * CFrame.Angles(math.rad(-8.021), math.rad(15.814), math.rad(5.329)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.118, -0.086, 0.006) * CFrame.Angles(math.rad(-6.646), math.rad(13.751), math.rad(-0.115)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.053, -0.245, 0.05) * CFrame.Angles(math.rad(-17.303), math.rad(30.711), math.rad(2.292)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.116, -0.203, 0.027) * CFrame.Angles(math.rad(-21.772), math.rad(-18.392), math.rad(-2.75)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.646), math.rad(-1.833), math.rad(16.329)),
					},
				},
			},
		},
		[6.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.04, 0.134, -0.034) * CFrame.Angles(math.rad(-9.397), math.rad(2.807), math.rad(166.215)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.585, 0.551, 0.047) * CFrame.Angles(math.rad(-7.964), math.rad(15.183), math.rad(5.329)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.112, -0.083, 0.006) * CFrame.Angles(math.rad(-6.589), math.rad(13.178), math.rad(0.286)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.051, -0.24, 0.048) * CFrame.Angles(math.rad(-17.189), math.rad(30.367), math.rad(2.292)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.114, -0.199, 0.027) * CFrame.Angles(math.rad(-21.486), math.rad(-18.048), math.rad(-2.693)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.532), math.rad(-1.776), math.rad(15.699)),
					},
				},
			},
		},
		[6.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.039, 0.131, -0.032) * CFrame.Angles(math.rad(-9.167), math.rad(2.693), math.rad(166.788)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.571, 0.546, 0.038) * CFrame.Angles(math.rad(-7.907), math.rad(14.553), math.rad(5.214)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.106, -0.08, 0.007) * CFrame.Angles(math.rad(-6.532), math.rad(12.605), math.rad(0.63)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.05, -0.234, 0.047) * CFrame.Angles(math.rad(-17.017), math.rad(30.08), math.rad(2.349)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.111, -0.194, 0.026) * CFrame.Angles(math.rad(-21.142), math.rad(-17.647), math.rad(-2.693)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.36), math.rad(-1.719), math.rad(15.011)),
					},
				},
			},
		},
		[6.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.037, 0.128, -0.03) * CFrame.Angles(math.rad(-8.938), math.rad(2.578), math.rad(167.418)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.557, 0.54, 0.031) * CFrame.Angles(math.rad(-7.792), math.rad(13.866), math.rad(5.157)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.1, -0.076, 0.007) * CFrame.Angles(math.rad(-6.474), math.rad(11.975), math.rad(0.974)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.049, -0.229, 0.046) * CFrame.Angles(math.rad(-16.845), math.rad(29.737), math.rad(2.406)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.109, -0.19, 0.025) * CFrame.Angles(math.rad(-20.856), math.rad(-17.303), math.rad(-2.636)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.245), math.rad(-1.662), math.rad(14.324)),
					},
				},
			},
		},
		[6.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.035, 0.125, -0.028) * CFrame.Angles(math.rad(-8.709), math.rad(2.464), math.rad(168.049)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.542, 0.533, 0.026) * CFrame.Angles(math.rad(-7.678), math.rad(13.178), math.rad(5.099)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.094, -0.072, 0.007) * CFrame.Angles(math.rad(-6.474), math.rad(11.402), math.rad(1.261)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.048, -0.223, 0.045) * CFrame.Angles(math.rad(-16.673), math.rad(29.393), math.rad(2.464)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.106, -0.185, 0.025) * CFrame.Angles(math.rad(-20.512), math.rad(-16.902), math.rad(-2.521)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-6.131), math.rad(-1.604), math.rad(13.636)),
					},
				},
			},
		},
		[6.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.034, 0.121, -0.027) * CFrame.Angles(math.rad(-8.48), math.rad(2.349), math.rad(168.679)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.528, 0.525, 0.023) * CFrame.Angles(math.rad(-7.448), math.rad(12.49), math.rad(4.985)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.088, -0.069, 0.007) * CFrame.Angles(math.rad(-6.417), math.rad(10.772), math.rad(1.604)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.046, -0.217, 0.044) * CFrame.Angles(math.rad(-16.558), math.rad(29.106), math.rad(2.521)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.103, -0.18, 0.024) * CFrame.Angles(math.rad(-20.168), math.rad(-16.558), math.rad(-2.464)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.959), math.rad(-1.547), math.rad(12.949)),
					},
				},
			},
		},
		[6.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.032, 0.118, -0.025) * CFrame.Angles(math.rad(-8.251), math.rad(2.235), math.rad(169.309)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.513, 0.516, 0.022) * CFrame.Angles(math.rad(-7.277), math.rad(11.803), math.rad(4.927)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.082, -0.065, 0.008) * CFrame.Angles(math.rad(-6.36), math.rad(10.141), math.rad(1.891)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.045, -0.212, 0.042) * CFrame.Angles(math.rad(-16.387), math.rad(28.762), math.rad(2.578)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.1, -0.175, 0.023) * CFrame.Angles(math.rad(-19.824), math.rad(-16.157), math.rad(-2.406)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.844), math.rad(-1.49), math.rad(12.204)),
					},
				},
			},
		},
		[6.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.031, 0.114, -0.023) * CFrame.Angles(math.rad(-8.021), math.rad(2.12), math.rad(169.939)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.498, 0.507, 0.021) * CFrame.Angles(math.rad(-7.105), math.rad(11.058), math.rad(4.813)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.075, -0.062, 0.008) * CFrame.Angles(math.rad(-6.36), math.rad(9.454), math.rad(2.177)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.044, -0.206, 0.041) * CFrame.Angles(math.rad(-16.215), math.rad(28.419), math.rad(2.636)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.098, -0.17, 0.022) * CFrame.Angles(math.rad(-19.481), math.rad(-15.756), math.rad(-2.349)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.73), math.rad(-1.432), math.rad(11.516)),
					},
				},
			},
		},
		[6.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.029, 0.111, -0.022) * CFrame.Angles(math.rad(-7.735), math.rad(2.005), math.rad(170.627)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.484, 0.497, 0.02) * CFrame.Angles(math.rad(-6.933), math.rad(10.313), math.rad(4.756)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.069, -0.058, 0.008) * CFrame.Angles(math.rad(-6.303), math.rad(8.824), math.rad(2.406)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.042, -0.2, 0.04) * CFrame.Angles(math.rad(-16.1), math.rad(28.075), math.rad(2.693)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.095, -0.165, 0.021) * CFrame.Angles(math.rad(-19.137), math.rad(-15.355), math.rad(-2.292)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.558), math.rad(-1.375), math.rad(10.772)),
					},
				},
			},
		},
		[6.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.027, 0.107, -0.02) * CFrame.Angles(math.rad(-7.506), math.rad(1.891), math.rad(171.314)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.47, 0.487, 0.019) * CFrame.Angles(math.rad(-6.761), math.rad(9.568), math.rad(4.641)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.062, -0.054, 0.008) * CFrame.Angles(math.rad(-6.303), math.rad(8.136), math.rad(2.636)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.041, -0.194, 0.038) * CFrame.Angles(math.rad(-15.928), math.rad(27.674), math.rad(2.75)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.092, -0.16, 0.021) * CFrame.Angles(math.rad(-18.793), math.rad(-14.954), math.rad(-2.235)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.443), math.rad(-1.318), math.rad(10.027)),
					},
				},
			},
		},
		[6.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.026, 0.104, -0.019) * CFrame.Angles(math.rad(-7.277), math.rad(1.833), math.rad(172.002)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.455, 0.476, 0.018) * CFrame.Angles(math.rad(-6.646), math.rad(8.881), math.rad(4.584)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.056, -0.05, 0.008) * CFrame.Angles(math.rad(-6.303), math.rad(7.506), math.rad(2.865)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.039, -0.187, 0.037) * CFrame.Angles(math.rad(-15.814), math.rad(27.33), math.rad(2.807)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.089, -0.155, 0.02) * CFrame.Angles(math.rad(-18.507), math.rad(-14.553), math.rad(-2.177)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.271), math.rad(-1.261), math.rad(9.282)),
					},
				},
			},
		},
		[6.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.024, 0.1, -0.018) * CFrame.Angles(math.rad(-6.99), math.rad(1.719), math.rad(172.689)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.441, 0.465, 0.017) * CFrame.Angles(math.rad(-6.474), math.rad(8.136), math.rad(4.469)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.049, -0.046, 0.007) * CFrame.Angles(math.rad(-6.303), math.rad(6.818), math.rad(3.094)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.038, -0.181, 0.035) * CFrame.Angles(math.rad(-15.642), math.rad(26.986), math.rad(2.865)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.086, -0.15, 0.019) * CFrame.Angles(math.rad(-18.163), math.rad(-14.152), math.rad(-2.12)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-5.099), math.rad(-1.203), math.rad(8.537)),
					},
				},
			},
		},
		[6.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.023, 0.097, -0.016) * CFrame.Angles(math.rad(-6.761), math.rad(1.604), math.rad(173.377)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.427, 0.454, 0.016) * CFrame.Angles(math.rad(-6.36), math.rad(7.391), math.rad(4.354)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.042, -0.043, 0.007) * CFrame.Angles(math.rad(-6.303), math.rad(6.131), math.rad(3.323)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.036, -0.175, 0.034) * CFrame.Angles(math.rad(-15.527), math.rad(26.585), math.rad(2.922)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.083, -0.145, 0.018) * CFrame.Angles(math.rad(-17.819), math.rad(-13.751), math.rad(-2.005)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.985), math.rad(-1.146), math.rad(7.792)),
					},
				},
			},
		},
		[6.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.022, 0.093, -0.015) * CFrame.Angles(math.rad(-6.532), math.rad(1.49), math.rad(174.065)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.413, 0.442, 0.015) * CFrame.Angles(math.rad(-6.245), math.rad(6.646), math.rad(4.297)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.036, -0.039, 0.007) * CFrame.Angles(math.rad(-6.303), math.rad(5.443), math.rad(3.495)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.035, -0.169, 0.033) * CFrame.Angles(math.rad(-15.355), math.rad(26.241), math.rad(2.979)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.08, -0.14, 0.017) * CFrame.Angles(math.rad(-17.475), math.rad(-13.35), math.rad(-1.948)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.813), math.rad(-1.089), math.rad(7.047)),
					},
				},
			},
		},
		[6.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.02, 0.09, -0.014) * CFrame.Angles(math.rad(-6.245), math.rad(1.432), math.rad(174.752)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.4, 0.43, 0.014) * CFrame.Angles(math.rad(-6.131), math.rad(5.844), math.rad(4.183)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.029, -0.035, 0.006) * CFrame.Angles(math.rad(-6.303), math.rad(4.756), math.rad(3.667)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.034, -0.162, 0.031) * CFrame.Angles(math.rad(-15.241), math.rad(25.898), math.rad(3.037)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.077, -0.134, 0.016) * CFrame.Angles(math.rad(-17.131), math.rad(-12.949), math.rad(-1.891)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.641), math.rad(-1.031), math.rad(6.303)),
					},
				},
			},
		},
		[6.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.019, 0.086, -0.013) * CFrame.Angles(math.rad(-6.016), math.rad(1.318), math.rad(175.497)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.386, 0.418, 0.013) * CFrame.Angles(math.rad(-6.073), math.rad(5.099), math.rad(4.068)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.022, -0.031, 0.006) * CFrame.Angles(math.rad(-6.36), math.rad(4.068), math.rad(3.782)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.032, -0.156, 0.03) * CFrame.Angles(math.rad(-15.069), math.rad(25.497), math.rad(3.094)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.074, -0.129, 0.016) * CFrame.Angles(math.rad(-16.788), math.rad(-12.49), math.rad(-1.833)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.469), math.rad(-0.974), math.rad(5.558)),
					},
				},
			},
		},
		[6.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.018, 0.083, -0.012) * CFrame.Angles(math.rad(-5.787), math.rad(1.203), math.rad(176.185)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.372, 0.405, 0.012) * CFrame.Angles(math.rad(-6.016), math.rad(4.354), math.rad(3.953)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.016, -0.027, 0.005) * CFrame.Angles(math.rad(-6.36), math.rad(3.38), math.rad(3.953)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.031, -0.15, 0.028) * CFrame.Angles(math.rad(-14.954), math.rad(25.153), math.rad(3.209)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.071, -0.124, 0.015) * CFrame.Angles(math.rad(-16.444), math.rad(-12.089), math.rad(-1.776)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.354), math.rad(-0.917), math.rad(4.813)),
					},
				},
			},
		},
		[6.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.016, 0.079, -0.011) * CFrame.Angles(math.rad(-5.5), math.rad(1.146), math.rad(176.872)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.359, 0.393, 0.011) * CFrame.Angles(math.rad(-5.959), math.rad(3.61), math.rad(3.839)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.009, -0.023, 0.005) * CFrame.Angles(math.rad(-6.417), math.rad(2.693), math.rad(4.068)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.029, -0.143, 0.027) * CFrame.Angles(math.rad(-14.782), math.rad(24.809), math.rad(3.266)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.068, -0.119, 0.014) * CFrame.Angles(math.rad(-16.1), math.rad(-11.688), math.rad(-1.719)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.183), math.rad(-0.859), math.rad(4.068)),
					},
				},
			},
		},
		[6.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.015, 0.076, -0.01) * CFrame.Angles(math.rad(-5.271), math.rad(1.089), math.rad(177.617)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.346, 0.38, 0.01) * CFrame.Angles(math.rad(-5.901), math.rad(2.865), math.rad(3.724)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(0.002, -0.019, 0.004) * CFrame.Angles(math.rad(-6.474), math.rad(2.005), math.rad(4.183)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.028, -0.137, 0.025) * CFrame.Angles(math.rad(-14.668), math.rad(24.408), math.rad(3.323)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.065, -0.113, 0.013) * CFrame.Angles(math.rad(-15.756), math.rad(-11.287), math.rad(-1.662)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-4.011), math.rad(-0.859), math.rad(3.323)),
					},
				},
			},
		},
		[6.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.014, 0.072, -0.009) * CFrame.Angles(math.rad(-5.042), math.rad(0.974), math.rad(178.304)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.333, 0.367, 0.009) * CFrame.Angles(math.rad(-5.844), math.rad(2.177), math.rad(3.61)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.004, -0.015, 0.003) * CFrame.Angles(math.rad(-6.532), math.rad(1.318), math.rad(4.297)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.026, -0.131, 0.024) * CFrame.Angles(math.rad(-14.553), math.rad(24.064), math.rad(3.38)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.062, -0.108, 0.012) * CFrame.Angles(math.rad(-15.413), math.rad(-10.829), math.rad(-1.604)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.839), math.rad(-0.802), math.rad(2.578)),
					},
				},
			},
		},
		[6.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.013, 0.069, -0.008) * CFrame.Angles(math.rad(-4.756), math.rad(0.917), math.rad(178.992)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.32, 0.354, 0.008) * CFrame.Angles(math.rad(-5.844), math.rad(1.432), math.rad(3.495)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.011, -0.011, 0.003) * CFrame.Angles(math.rad(-6.589), math.rad(0.63), math.rad(4.354)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.025, -0.125, 0.023) * CFrame.Angles(math.rad(-14.381), math.rad(23.663), math.rad(3.438)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.06, -0.103, 0.011) * CFrame.Angles(math.rad(-15.126), math.rad(-10.428), math.rad(-1.49)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.667), math.rad(-0.745), math.rad(1.833)),
					},
				},
			},
		},
		[6.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.012, 0.065, -0.008) * CFrame.Angles(math.rad(-4.526), math.rad(0.859), math.rad(179.68)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.308, 0.341, 0.007) * CFrame.Angles(math.rad(-5.844), math.rad(0.688), math.rad(3.38)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.017, -0.007, 0.002) * CFrame.Angles(math.rad(-6.646), math.rad(-0.057), math.rad(4.412)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.023, -0.118, 0.021) * CFrame.Angles(math.rad(-14.267), math.rad(23.319), math.rad(3.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.057, -0.098, 0.011) * CFrame.Angles(math.rad(-14.782), math.rad(-10.027), math.rad(-1.432)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.552), math.rad(-0.688), math.rad(1.146)),
					},
				},
			},
		},
		[6.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.011, 0.062, -0.007) * CFrame.Angles(math.rad(-4.297), math.rad(0.745), math.rad(-179.622)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.295, 0.328, 0.006) * CFrame.Angles(math.rad(-5.844), 0, math.rad(3.266)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.024, -0.003, 0.001) * CFrame.Angles(math.rad(-6.704), math.rad(-0.745), math.rad(4.469)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.022, -0.112, 0.02) * CFrame.Angles(math.rad(-14.152), math.rad(22.976), math.rad(3.61)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.054, -0.093, 0.01) * CFrame.Angles(math.rad(-14.439), math.rad(-9.626), math.rad(-1.375)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.38), math.rad(-0.63), math.rad(0.401)),
					},
				},
			},
		},
		[6.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.01, 0.058, -0.006) * CFrame.Angles(math.rad(-4.068), math.rad(0.688), math.rad(-178.935)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.283, 0.314, 0.005) * CFrame.Angles(math.rad(-5.844), math.rad(-0.745), math.rad(3.151)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.03, 0.001, 0) * CFrame.Angles(math.rad(-6.761), math.rad(-1.375), math.rad(4.526)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.021, -0.106, 0.018) * CFrame.Angles(math.rad(-14.037), math.rad(22.632), math.rad(3.667)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.051, -0.087, 0.009) * CFrame.Angles(math.rad(-14.152), math.rad(-9.225), math.rad(-1.375)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.209), math.rad(-0.573), math.rad(-0.286)),
					},
				},
			},
		},
		[6.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.009, 0.055, -0.005) * CFrame.Angles(math.rad(-3.839), math.rad(0.63), math.rad(-178.247)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.271, 0.301, 0.004) * CFrame.Angles(math.rad(-5.901), math.rad(-1.432), math.rad(3.037)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.036, 0.005, -0.001) * CFrame.Angles(math.rad(-6.818), math.rad(-2.005), math.rad(4.584)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.019, -0.1, 0.017) * CFrame.Angles(math.rad(-13.923), math.rad(22.288), math.rad(3.724)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.048, -0.082, 0.008) * CFrame.Angles(math.rad(-13.808), math.rad(-8.824), math.rad(-1.318)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-3.037), math.rad(-0.573), math.rad(-0.974)),
					},
				},
			},
		},
		[6.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.008, 0.052, -0.005) * CFrame.Angles(math.rad(-3.61), math.rad(0.573), math.rad(-177.617)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.26, 0.288, 0.003) * CFrame.Angles(math.rad(-5.901), math.rad(-2.12), math.rad(2.865)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.042, 0.008, -0.002) * CFrame.Angles(math.rad(-6.933), math.rad(-2.693), math.rad(4.641)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.018, -0.094, 0.016) * CFrame.Angles(math.rad(-13.808), math.rad(21.944), math.rad(3.782)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.045, -0.078, 0.007) * CFrame.Angles(math.rad(-13.522), math.rad(-8.422), math.rad(-1.261)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.865), math.rad(-0.516), math.rad(-1.662)),
					},
				},
			},
		},
		[6.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.008, 0.048, -0.004) * CFrame.Angles(math.rad(-3.38), math.rad(0.516), math.rad(-176.929)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.248, 0.276, 0.002) * CFrame.Angles(math.rad(-5.959), math.rad(-2.807), math.rad(2.75)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.048, 0.012, -0.003) * CFrame.Angles(math.rad(-6.99), math.rad(-3.266), math.rad(4.641)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.016, -0.088, 0.014) * CFrame.Angles(math.rad(-13.694), math.rad(21.601), math.rad(3.839)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.042, -0.073, 0.007) * CFrame.Angles(math.rad(-13.235), math.rad(-8.079), math.rad(-1.203)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.75), math.rad(-0.458), math.rad(-2.349)),
					},
				},
			},
		},
		[6.583] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.007, 0.045, -0.004) * CFrame.Angles(math.rad(-3.151), math.rad(0.458), math.rad(-176.299)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.237, 0.263, 0.001) * CFrame.Angles(math.rad(-6.016), math.rad(-3.438), math.rad(2.636)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.054, 0.016, -0.005) * CFrame.Angles(math.rad(-7.105), math.rad(-3.896), math.rad(4.641)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.015, -0.083, 0.013) * CFrame.Angles(math.rad(-13.579), math.rad(21.257), math.rad(3.953)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.04, -0.068, 0.006) * CFrame.Angles(math.rad(-12.949), math.rad(-7.678), math.rad(-1.146)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.578), math.rad(-0.401), math.rad(-3.037)),
					},
				},
			},
		},
		[6.6] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.006, 0.042, -0.003) * CFrame.Angles(math.rad(-2.922), math.rad(0.401), math.rad(-175.669)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.226, 0.25, 0) * CFrame.Angles(math.rad(-6.131), math.rad(-4.125), math.rad(2.464)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.06, 0.02, -0.006) * CFrame.Angles(math.rad(-7.162), math.rad(-4.526), math.rad(4.641)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.014, -0.077, 0.012) * CFrame.Angles(math.rad(-13.465), math.rad(20.913), math.rad(4.011)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.037, -0.063, 0.005) * CFrame.Angles(math.rad(-12.662), math.rad(-7.277), math.rad(-1.089)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.406), math.rad(-0.401), math.rad(-3.667)),
					},
				},
			},
		},
		[6.617] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.005, 0.039, -0.003) * CFrame.Angles(math.rad(-2.693), math.rad(0.401), math.rad(-175.039)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.216, 0.238, -0.001) * CFrame.Angles(math.rad(-6.188), math.rad(-4.756), math.rad(2.349)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.066, 0.023, -0.007) * CFrame.Angles(math.rad(-7.277), math.rad(-5.099), math.rad(4.641)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.012, -0.071, 0.011) * CFrame.Angles(math.rad(-13.35), math.rad(20.626), math.rad(4.068)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.035, -0.059, 0.004) * CFrame.Angles(math.rad(-12.376), math.rad(-6.933), math.rad(-1.031)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.292), math.rad(-0.344), math.rad(-4.297)),
					},
				},
			},
		},
		[6.633] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.005, 0.036, -0.003) * CFrame.Angles(math.rad(-2.521), math.rad(0.344), math.rad(-174.466)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.206, 0.226, -0.002) * CFrame.Angles(math.rad(-6.245), math.rad(-5.329), math.rad(2.177)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.071, 0.027, -0.008) * CFrame.Angles(math.rad(-7.391), math.rad(-5.672), math.rad(4.641)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.011, -0.066, 0.009) * CFrame.Angles(math.rad(-13.235), math.rad(20.283), math.rad(4.125)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.032, -0.054, 0.004) * CFrame.Angles(math.rad(-12.089), math.rad(-6.589), math.rad(-1.031)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.12), math.rad(-0.344), math.rad(-4.927)),
					},
				},
			},
		},
		[6.65] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.004, 0.033, -0.002) * CFrame.Angles(math.rad(-2.292), math.rad(0.286), math.rad(-173.835)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.196, 0.214, -0.003) * CFrame.Angles(math.rad(-6.36), math.rad(-5.959), math.rad(2.063)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.076, 0.031, -0.01) * CFrame.Angles(math.rad(-7.506), math.rad(-6.245), math.rad(4.584)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.01, -0.061, 0.008) * CFrame.Angles(math.rad(-13.178), math.rad(19.996), math.rad(4.183)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.03, -0.05, 0.003) * CFrame.Angles(math.rad(-11.86), math.rad(-6.245), math.rad(-0.974)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-2.005), math.rad(-0.286), math.rad(-5.5)),
					},
				},
			},
		},
		[6.667] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.004, 0.03, -0.002) * CFrame.Angles(math.rad(-2.12), math.rad(0.286), math.rad(-173.32)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.186, 0.202, -0.004) * CFrame.Angles(math.rad(-6.474), math.rad(-6.532), math.rad(1.891)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.081, 0.034, -0.011) * CFrame.Angles(math.rad(-7.563), math.rad(-6.761), math.rad(4.584)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.009, -0.056, 0.007) * CFrame.Angles(math.rad(-13.063), math.rad(19.71), math.rad(4.24)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.027, -0.046, 0.002) * CFrame.Angles(math.rad(-11.574), math.rad(-5.901), math.rad(-0.917)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.833), math.rad(-0.229), math.rad(-6.073)),
					},
				},
			},
		},
		[6.683] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.003, 0.028, -0.002) * CFrame.Angles(math.rad(-1.948), math.rad(0.229), math.rad(-172.747)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.177, 0.191, -0.005) * CFrame.Angles(math.rad(-6.589), math.rad(-7.105), math.rad(1.776)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.086, 0.037, -0.012) * CFrame.Angles(math.rad(-7.678), math.rad(-7.277), math.rad(4.526)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.008, -0.051, 0.006) * CFrame.Angles(math.rad(-12.949), math.rad(19.423), math.rad(4.297)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.025, -0.041, 0.002) * CFrame.Angles(math.rad(-11.345), math.rad(-5.558), math.rad(-0.917)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.719), math.rad(-0.229), math.rad(-6.646)),
					},
				},
			},
		},
		[6.7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.003, 0.025, -0.001) * CFrame.Angles(math.rad(-1.719), math.rad(0.229), math.rad(-172.231)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.168, 0.18, -0.006) * CFrame.Angles(math.rad(-6.704), math.rad(-7.678), math.rad(1.604)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.091, 0.041, -0.014) * CFrame.Angles(math.rad(-7.792), math.rad(-7.792), math.rad(4.526)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.007, -0.046, 0.005) * CFrame.Angles(math.rad(-12.892), math.rad(19.137), math.rad(4.354)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.023, -0.037, 0.001) * CFrame.Angles(math.rad(-11.115), math.rad(-5.271), math.rad(-0.859)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.547), math.rad(-0.229), math.rad(-7.219)),
					},
				},
			},
		},
		[6.717] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.003, 0.023, -0.001) * CFrame.Angles(math.rad(-1.547), math.rad(0.172), math.rad(-171.715)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.16, 0.17, -0.007) * CFrame.Angles(math.rad(-6.818), math.rad(-8.193), math.rad(1.432)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.096, 0.044, -0.015) * CFrame.Angles(math.rad(-7.907), math.rad(-8.308), math.rad(4.469)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.005, -0.041, 0.004) * CFrame.Angles(math.rad(-12.777), math.rad(18.908), math.rad(4.412)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.02, -0.034, 0) * CFrame.Angles(math.rad(-10.886), math.rad(-4.927), math.rad(-0.859)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.432), math.rad(-0.172), math.rad(-7.735)),
					},
				},
			},
		},
		[6.733] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.002, 0.02, -0.001) * CFrame.Angles(math.rad(-1.432), math.rad(0.172), math.rad(-171.2)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.152, 0.159, -0.008) * CFrame.Angles(math.rad(-6.933), math.rad(-8.709), math.rad(1.318)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.1, 0.047, -0.016) * CFrame.Angles(math.rad(-7.964), math.rad(-8.766), math.rad(4.412)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.004, -0.037, 0.003) * CFrame.Angles(math.rad(-12.72), math.rad(18.621), math.rad(4.469)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.018, -0.03, 0) * CFrame.Angles(math.rad(-10.657), math.rad(-4.641), math.rad(-0.802)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.318), math.rad(-0.172), math.rad(-8.193)),
					},
				},
			},
		},
		[6.75] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.002, 0.018, -0.001) * CFrame.Angles(math.rad(-1.261), math.rad(0.115), math.rad(-170.741)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.144, 0.15, -0.008) * CFrame.Angles(math.rad(-7.047), math.rad(-9.167), math.rad(1.146)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.104, 0.05, -0.017) * CFrame.Angles(math.rad(-8.079), math.rad(-9.167), math.rad(4.354)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.003, -0.033, 0.002) * CFrame.Angles(math.rad(-12.662), math.rad(18.392), math.rad(4.526)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.016, -0.026, -0.001) * CFrame.Angles(math.rad(-10.485), math.rad(-4.354), math.rad(-0.802)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.203), math.rad(-0.115), math.rad(-8.709)),
					},
				},
			},
		},
		[6.767] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.002, 0.016, -0.001) * CFrame.Angles(math.rad(-1.089), math.rad(0.115), math.rad(-170.283)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.137, 0.14, -0.009) * CFrame.Angles(math.rad(-7.162), math.rad(-9.626), math.rad(1.031)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.108, 0.052, -0.019) * CFrame.Angles(math.rad(-8.193), math.rad(-9.626), math.rad(4.297)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.003, -0.029, 0.001) * CFrame.Angles(math.rad(-12.548), math.rad(18.163), math.rad(4.584)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.014, -0.023, -0.001) * CFrame.Angles(math.rad(-10.256), math.rad(-4.125), math.rad(-0.745)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-1.089), math.rad(-0.115), math.rad(-9.11)),
					},
				},
			},
		},
		[6.783] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, 0.014, 0) * CFrame.Angles(math.rad(-0.974), math.rad(0.115), math.rad(-169.882)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.13, 0.132, -0.01) * CFrame.Angles(math.rad(-7.334), math.rad(-10.084), math.rad(0.859)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.112, 0.055, -0.02) * CFrame.Angles(math.rad(-8.251), math.rad(-10.027), math.rad(4.24)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.002, -0.025, 0) * CFrame.Angles(math.rad(-12.49), math.rad(17.934), math.rad(4.641)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.013, -0.02, -0.002) * CFrame.Angles(math.rad(-10.084), math.rad(-3.839), math.rad(-0.745)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.974), math.rad(-0.115), math.rad(-9.568)),
					},
				},
			},
		},
		[6.8] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, 0.012, 0) * CFrame.Angles(math.rad(-0.802), math.rad(0.057), math.rad(-169.481)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.124, 0.123, -0.011) * CFrame.Angles(math.rad(-7.448), math.rad(-10.485), math.rad(0.745)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.115, 0.057, -0.021) * CFrame.Angles(math.rad(-8.365), math.rad(-10.371), math.rad(4.24)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.001, -0.021, -0.001) * CFrame.Angles(math.rad(-12.433), math.rad(17.762), math.rad(4.641)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.011, -0.017, -0.002) * CFrame.Angles(math.rad(-9.912), math.rad(-3.61), math.rad(-0.688)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.859), math.rad(-0.057), math.rad(-9.969)),
					},
				},
			},
		},
		[6.817] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, 0.01, 0) * CFrame.Angles(math.rad(-0.688), math.rad(0.057), math.rad(-169.08)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.118, 0.115, -0.012) * CFrame.Angles(math.rad(-7.563), math.rad(-10.829), math.rad(0.63)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.118, 0.06, -0.022) * CFrame.Angles(math.rad(-8.48), math.rad(-10.714), math.rad(4.183)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0, -0.018, -0.002) * CFrame.Angles(math.rad(-12.376), math.rad(17.533), math.rad(4.698)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.009, -0.014, -0.003) * CFrame.Angles(math.rad(-9.74), math.rad(-3.438), math.rad(-0.688)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.802), math.rad(-0.057), math.rad(-10.313)),
					},
				},
			},
		},
		[6.833] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, 0.008, 0) * CFrame.Angles(math.rad(-0.573), math.rad(0.057), math.rad(-168.736)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.112, 0.108, -0.012) * CFrame.Angles(math.rad(-7.678), math.rad(-11.23), math.rad(0.516)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.121, 0.062, -0.023) * CFrame.Angles(math.rad(-8.537), math.rad(-11.058), math.rad(4.125)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.001, -0.015, -0.002) * CFrame.Angles(math.rad(-12.319), math.rad(17.361), math.rad(4.756)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.008, -0.012, -0.003) * CFrame.Angles(math.rad(-9.568), math.rad(-3.209), math.rad(-0.688)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.688), math.rad(-0.057), math.rad(-10.714)),
					},
				},
			},
		},
		[6.85] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.001, 0.007, 0) * CFrame.Angles(math.rad(-0.458), math.rad(0.057), math.rad(-168.45)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.107, 0.101, -0.013) * CFrame.Angles(math.rad(-7.792), math.rad(-11.516), math.rad(0.401)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.124, 0.064, -0.024) * CFrame.Angles(math.rad(-8.594), math.rad(-11.345), math.rad(4.068)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.001, -0.012, -0.003) * CFrame.Angles(math.rad(-12.261), math.rad(17.189), math.rad(4.756)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.007, -0.009, -0.003) * CFrame.Angles(math.rad(-9.454), math.rad(-3.037), math.rad(-0.63)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.63), math.rad(-0.057), math.rad(-11.001)),
					},
				},
			},
		},
		[6.867] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.005, 0) * CFrame.Angles(math.rad(-0.401), math.rad(0.057), math.rad(-168.163)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.102, 0.095, -0.014) * CFrame.Angles(math.rad(-7.907), math.rad(-11.803), math.rad(0.286)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.127, 0.066, -0.025) * CFrame.Angles(math.rad(-8.709), math.rad(-11.631), math.rad(4.011)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.002, -0.009, -0.004) * CFrame.Angles(math.rad(-12.204), math.rad(17.074), math.rad(4.813)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.005, -0.007, -0.004) * CFrame.Angles(math.rad(-9.339), math.rad(-2.865), math.rad(-0.63)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.516), 0, math.rad(-11.287)),
					},
				},
			},
		},
		[6.883] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.004, 0) * CFrame.Angles(math.rad(-0.286), 0, math.rad(-167.877)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.098, 0.09, -0.014) * CFrame.Angles(math.rad(-8.021), math.rad(-12.089), math.rad(0.172)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.129, 0.067, -0.025) * CFrame.Angles(math.rad(-8.766), math.rad(-11.86), math.rad(3.953)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.003, -0.007, -0.004) * CFrame.Angles(math.rad(-12.204), math.rad(16.902), math.rad(4.813)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.004, -0.005, -0.004) * CFrame.Angles(math.rad(-9.225), math.rad(-2.693), math.rad(-0.63)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.458), 0, math.rad(-11.574)),
					},
				},
			},
		},
		[6.9] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.003, 0) * CFrame.Angles(math.rad(-0.229), 0, math.rad(-167.647)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.095, 0.085, -0.015) * CFrame.Angles(math.rad(-8.079), math.rad(-12.319), math.rad(0.057)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.131, 0.069, -0.026) * CFrame.Angles(math.rad(-8.824), math.rad(-12.032), math.rad(3.896)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.003, -0.005, -0.005) * CFrame.Angles(math.rad(-12.147), math.rad(16.788), math.rad(4.87)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.003, -0.003, -0.004) * CFrame.Angles(math.rad(-9.11), math.rad(-2.578), math.rad(-0.63)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.401), 0, math.rad(-11.803)),
					},
				},
			},
		},
		[6.917] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.002, 0) * CFrame.Angles(math.rad(-0.172), 0, math.rad(-167.476)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.092, 0.081, -0.015) * CFrame.Angles(math.rad(-8.136), math.rad(-12.548), 0),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.132, 0.07, -0.027) * CFrame.Angles(math.rad(-8.881), math.rad(-12.204), math.rad(3.896)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.003, -0.003, -0.005) * CFrame.Angles(math.rad(-12.147), math.rad(16.73), math.rad(4.87)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.002, -0.002, -0.005) * CFrame.Angles(math.rad(-9.053), math.rad(-2.464), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.344), 0, math.rad(-11.975)),
					},
				},
			},
		},
		[6.933] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.001, 0) * CFrame.Angles(math.rad(-0.115), 0, math.rad(-167.304)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.089, 0.077, -0.015) * CFrame.Angles(math.rad(-8.251), math.rad(-12.72), math.rad(-0.057)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.134, 0.071, -0.027) * CFrame.Angles(math.rad(-8.881), math.rad(-12.376), math.rad(3.839)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, -0.002, -0.005) * CFrame.Angles(math.rad(-12.089), math.rad(16.616), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.002, -0.001, -0.005) * CFrame.Angles(math.rad(-8.995), math.rad(-2.349), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.344), 0, math.rad(-12.147)),
					},
				},
			},
		},
		[6.95] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0, 0.001, 0) * CFrame.Angles(math.rad(-0.057), 0, math.rad(-167.189)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.087, 0.075, -0.016) * CFrame.Angles(math.rad(-8.251), math.rad(-12.834), math.rad(-0.115)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.135, 0.072, -0.028) * CFrame.Angles(math.rad(-8.938), math.rad(-12.49), math.rad(3.839)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, -0.001, -0.006) * CFrame.Angles(math.rad(-12.089), math.rad(16.558), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.001, 0, -0.005) * CFrame.Angles(math.rad(-8.938), math.rad(-2.292), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.286), 0, math.rad(-12.261)),
					},
				},
			},
		},
		[6.967] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.Angles(0, 0, math.rad(-167.074)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.086, 0.073, -0.016) * CFrame.Angles(math.rad(-8.308), math.rad(-12.892), math.rad(-0.172)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.136, 0.072, -0.028) * CFrame.Angles(math.rad(-8.938), math.rad(-12.605), math.rad(3.782)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, 0, -0.006) * CFrame.Angles(math.rad(-12.032), math.rad(16.501), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.001, 0.001, -0.005) * CFrame.Angles(math.rad(-8.881), math.rad(-2.235), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.286), 0, math.rad(-12.376)),
					},
				},
			},
		},
		[6.983] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.Angles(0, 0, math.rad(-167.017)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.085, 0.071, -0.016) * CFrame.Angles(math.rad(-8.365), math.rad(-12.949), math.rad(-0.172)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.136, 0.073, -0.028) * CFrame.Angles(math.rad(-8.995), math.rad(-12.662), math.rad(3.782)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, 0.001, -0.006) * CFrame.Angles(math.rad(-12.032), math.rad(16.501), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.001, 0.001, -0.005) * CFrame.Angles(math.rad(-8.824), math.rad(-2.177), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.229), 0, math.rad(-12.433)),
					},
				},
			},
		},
		[7] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.Angles(0, 0, math.rad(-167.017)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.085, 0.071, -0.016) * CFrame.Angles(math.rad(-8.365), math.rad(-13.006), math.rad(-0.172)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.136, 0.073, -0.028) * CFrame.Angles(math.rad(-8.995), math.rad(-12.662), math.rad(3.782)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.004, 0.001, -0.006) * CFrame.Angles(math.rad(-12.032), math.rad(16.444), math.rad(4.927)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.001, 0.002, -0.005) * CFrame.Angles(math.rad(-8.824), math.rad(-2.177), math.rad(-0.573)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-0.229), 0, math.rad(-12.433)),
					},
				},
			},
		},
	}
}"
eDRPYwwG,Vergil JudgementCut CFrames,Smeagle_Deagle,Lua,Tuesday 25th of July 2023 06:48:04 AM CDT,"return {
	Properties = {
		Looping = false,
		Priority = Enum.AnimationPriority.Action
	},
	Keyframes = {
		[0] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.36, 0.321, -0.745) * CFrame.Angles(math.rad(-15.011), math.rad(25.955), math.rad(116.826)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.987, 0.716, -0.507) * CFrame.Angles(math.rad(-133.27), math.rad(-53.743), math.rad(-85.256)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.535, 0.15, -0.116) * CFrame.Angles(math.rad(146.448), math.rad(-62.395), math.rad(155.501)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.083, -0.329, 0.302) * CFrame.Angles(math.rad(-60.218), math.rad(-30.309), math.rad(-55.119)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.811, -0.224, 0.066) * CFrame.Angles(math.rad(-109.779), math.rad(11.23), math.rad(108.747)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.283), math.rad(-6.016), math.rad(-120.436)),
					},
				},
			},
		},
		[0.017] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.36, 0.32, -0.745) * CFrame.Angles(math.rad(-14.954), math.rad(25.955), math.rad(116.654)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.987, 0.715, -0.506) * CFrame.Angles(math.rad(-133.098), math.rad(-53.915), math.rad(-85.084)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.535, 0.149, -0.115) * CFrame.Angles(math.rad(146.104), math.rad(-62.452), math.rad(155.214)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.068, -0.322, 0.302) * CFrame.Angles(math.rad(-60.275), math.rad(-30.367), math.rad(-55.233)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.809, -0.225, 0.067) * CFrame.Angles(math.rad(-109.721), math.rad(11.23), math.rad(108.633)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.283), math.rad(-6.016), math.rad(-120.264)),
					},
				},
			},
		},
		[0.033] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.364, 0.313, -0.745) * CFrame.Angles(math.rad(-14.439), math.rad(26.241), math.rad(115.451)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.993, 0.713, -0.497) * CFrame.Angles(math.rad(-132.181), math.rad(-55.061), math.rad(-84.225)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.537, 0.143, -0.107) * CFrame.Angles(math.rad(143.583), math.rad(-62.796), math.rad(153.037)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.035, -0.306, 0.306) * CFrame.Angles(math.rad(-60.791), math.rad(-30.596), math.rad(-55.749)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.799, -0.231, 0.07) * CFrame.Angles(math.rad(-109.378), math.rad(11.345), math.rad(108.06)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.226), math.rad(-6.073), math.rad(-119.175)),
					},
				},
			},
		},
		[0.05] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.373, 0.294, -0.745) * CFrame.Angles(math.rad(-13.006), math.rad(26.929), math.rad(112.3)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.007, 0.705, -0.472) * CFrame.Angles(math.rad(-129.202), math.rad(-58.041), math.rad(-81.475)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.541, 0.124, -0.086) * CFrame.Angles(math.rad(136.479), math.rad(-63.426), math.rad(146.792)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.002, -0.287, 0.316) * CFrame.Angles(math.rad(-62.281), math.rad(-31.283), math.rad(-57.124)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.77, -0.248, 0.08) * CFrame.Angles(math.rad(-108.346), math.rad(11.803), math.rad(106.742)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.997), math.rad(-6.131), math.rad(-116.253)),
					},
				},
			},
		},
		[0.067] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.387, 0.256, -0.745) * CFrame.Angles(math.rad(-10.084), math.rad(28.075), math.rad(105.997)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.029, 0.69, -0.422) * CFrame.Angles(math.rad(-121.811), math.rad(-63.484), math.rad(-74.656)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.543, 0.089, -0.042) * CFrame.Angles(math.rad(121.925), math.rad(-63.598), math.rad(133.9)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.013, -0.273, 0.337) * CFrame.Angles(math.rad(-65.26), math.rad(-32.601), math.rad(-59.759)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.714, -0.28, 0.098) * CFrame.Angles(math.rad(-106.226), math.rad(12.892), math.rad(104.336)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.596), math.rad(-6.245), math.rad(-110.466)),
					},
				},
			},
		},
		[0.083] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.407, -0.17, -0.778) * CFrame.Angles(math.rad(6.704), math.rad(29.622), math.rad(82.334)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.059, 0.627, -0.253) * CFrame.Angles(math.rad(-67.953), math.rad(-73.912), math.rad(-26.184)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.571, 0.119, 0.152) * CFrame.Angles(math.rad(78.438), math.rad(-53.743), math.rad(93.621)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.003, -0.267, 0.43) * CFrame.Angles(math.rad(-78.323), math.rad(-36.555), math.rad(-70.646)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.251, -0.584, 0.533) * CFrame.Angles(math.rad(-96.715), math.rad(16.845), math.rad(94.022)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.737), math.rad(-1.146), math.rad(-89.668)),
					},
				},
			},
		},
		[0.1] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.364, -0.565, -0.828) * CFrame.Angles(math.rad(20.913), math.rad(26.299), math.rad(63.369)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.041, 0.565, -0.134) * CFrame.Angles(math.rad(-22.002), math.rad(-68.468), math.rad(13.006)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.558, 0.215, 0.323) * CFrame.Angles(math.rad(57.181), math.rad(-39.534), math.rad(74.427)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.006, -0.266, 0.51) * CFrame.Angles(math.rad(-90.241), math.rad(-38.159), math.rad(-80.615)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.175, -0.865, 0.957) * CFrame.Angles(math.rad(-88.064), math.rad(18.85), math.rad(84.626)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.711), math.rad(3.953), math.rad(-72.594)),
					},
				},
			},
		},
		[0.117] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.372, -0.522, -0.821) * CFrame.Angles(math.rad(19.481), math.rad(26.872), math.rad(65.374)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.044, 0.572, -0.146) * CFrame.Angles(math.rad(-25.554), math.rad(-69.5), math.rad(10.313)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.561, 0.202, 0.305) * CFrame.Angles(math.rad(59.072), math.rad(-41.196), math.rad(76.089)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.005, -0.266, 0.5) * CFrame.Angles(math.rad(-88.866), math.rad(-38.044), math.rad(-79.412)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(-0.126, -0.834, 0.909) * CFrame.Angles(math.rad(-89.095), math.rad(18.678), math.rad(85.772)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.481), math.rad(3.438), math.rad(-74.485)),
					},
				},
			},
		},
		[0.133] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.388, -0.41, -0.806) * CFrame.Angles(math.rad(15.527), math.rad(28.132), math.rad(70.76)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.052, 0.591, -0.179) * CFrame.Angles(math.rad(-36.612), math.rad(-71.792), math.rad(1.261)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.568, 0.171, 0.256) * CFrame.Angles(math.rad(64.515), math.rad(-45.493), math.rad(80.902)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(0.003, -0.266, 0.475) * CFrame.Angles(math.rad(-85.256), math.rad(-37.586), math.rad(-76.261)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.001, -0.753, 0.787) * CFrame.Angles(math.rad(-91.731), math.rad(18.105), math.rad(88.637)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.138), math.rad(2.005), math.rad(-79.412)),
					},
				},
			},
		},
		[0.15] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.403, -0.253, -0.787) * CFrame.Angles(math.rad(9.74), math.rad(29.335), math.rad(78.495)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.058, 0.615, -0.228) * CFrame.Angles(math.rad(-56.78), math.rad(-73.74), math.rad(-16.272)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.572, 0.136, 0.187) * CFrame.Angles(math.rad(73.396), math.rad(-51.165), math.rad(88.923)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.001, -0.267, 0.442) * CFrame.Angles(math.rad(-80.329), math.rad(-36.727), math.rad(-72.021)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.174, -0.642, 0.619) * CFrame.Angles(math.rad(-95.283), math.rad(17.189), math.rad(92.533)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.851), math.rad(-0.057), math.rad(-86.345)),
					},
				},
			},
		},
		[0.167] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.409, -0.079, -0.769) * CFrame.Angles(math.rad(3.094), math.rad(29.851), math.rad(87.319)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.058, 0.641, -0.286) * CFrame.Angles(math.rad(-82.735), math.rad(-73.281), math.rad(-39.591)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.571, 0.108, 0.11) * CFrame.Angles(math.rad(85.714), math.rad(-56.78), math.rad(100.268)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.005, -0.268, 0.405) * CFrame.Angles(math.rad(-75.115), math.rad(-35.466), math.rad(-67.552)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.363, -0.52, 0.436) * CFrame.Angles(math.rad(-99.122), math.rad(15.928), math.rad(96.658)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-29.794), math.rad(-2.292), math.rad(-94.022)),
					},
				},
			},
		},
		[0.183] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.405, 0.083, -0.756) * CFrame.Angles(math.rad(-3.094), math.rad(29.507), math.rad(95.799)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.05, 0.664, -0.346) * CFrame.Angles(math.rad(-103.992), math.rad(-70.13), math.rad(-58.728)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.561, 0.09, 0.038) * CFrame.Angles(math.rad(100.325), math.rad(-60.905), math.rad(113.847)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.269, 0.371) * CFrame.Angles(math.rad(-70.417), math.rad(-34.091), math.rad(-63.656)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.537, -0.406, 0.268) * CFrame.Angles(math.rad(-102.559), math.rad(14.553), math.rad(100.44)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.023), math.rad(-4.297), math.rad(-101.414)),
					},
				},
			},
		},
		[0.2] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.395, 0.203, -0.747) * CFrame.Angles(math.rad(-7.792), math.rad(28.705), math.rad(102.388)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.038, 0.681, -0.395) * CFrame.Angles(math.rad(-116.425), math.rad(-66.119), math.rad(-69.786)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.549, 0.084, -0.015) * CFrame.Angles(math.rad(113.904), math.rad(-63.025), math.rad(126.509)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.012, -0.271, 0.346) * CFrame.Angles(math.rad(-66.921), math.rad(-33.002), math.rad(-60.905)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.664, -0.32, 0.146) * CFrame.Angles(math.rad(-105.08), math.rad(13.35), math.rad(103.19)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.367), math.rad(-5.73), math.rad(-107.258)),
					},
				},
			},
		},
		[0.217] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.387, 0.256, -0.745) * CFrame.Angles(math.rad(-10.084), math.rad(28.075), math.rad(105.997)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.029, 0.69, -0.422) * CFrame.Angles(math.rad(-121.811), math.rad(-63.484), math.rad(-74.656)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.543, 0.089, -0.042) * CFrame.Angles(math.rad(121.925), math.rad(-63.598), math.rad(133.9)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.013, -0.273, 0.337) * CFrame.Angles(math.rad(-65.26), math.rad(-32.601), math.rad(-59.759)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.714, -0.28, 0.098) * CFrame.Angles(math.rad(-106.226), math.rad(12.892), math.rad(104.336)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.596), math.rad(-6.245), math.rad(-110.466)),
					},
				},
			},
		},
		[0.233] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.384, 0.266, -0.745) * CFrame.Angles(math.rad(-10.829), math.rad(27.788), math.rad(107.659)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.024, 0.694, -0.436) * CFrame.Angles(math.rad(-124.045), math.rad(-62.109), math.rad(-76.662)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.543, 0.098, -0.054) * CFrame.Angles(math.rad(125.822), math.rad(-63.713), math.rad(137.338)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.013, -0.275, 0.336) * CFrame.Angles(math.rad(-64.687), math.rad(-32.773), math.rad(-59.645)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.715, -0.271, 0.097) * CFrame.Angles(math.rad(-106.513), math.rad(12.834), math.rad(104.565)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.711), math.rad(-6.245), math.rad(-112.013)),
					},
				},
			},
		},
		[0.25] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.38, 0.275, -0.746) * CFrame.Angles(math.rad(-11.574), math.rad(27.559), math.rad(109.148)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.019, 0.698, -0.447) * CFrame.Angles(math.rad(-125.879), math.rad(-60.791), math.rad(-78.381)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.543, 0.106, -0.065) * CFrame.Angles(math.rad(129.317), math.rad(-63.713), math.rad(140.432)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.013, -0.278, 0.336) * CFrame.Angles(math.rad(-64.229), math.rad(-32.888), math.rad(-59.53)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.716, -0.263, 0.097) * CFrame.Angles(math.rad(-106.799), math.rad(12.834), math.rad(104.737)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.825), math.rad(-6.188), math.rad(-113.388)),
					},
				},
			},
		},
		[0.267] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.377, 0.283, -0.747) * CFrame.Angles(math.rad(-12.204), math.rad(27.273), math.rad(110.524)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.014, 0.701, -0.458) * CFrame.Angles(math.rad(-127.369), math.rad(-59.645), math.rad(-79.756)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.542, 0.114, -0.074) * CFrame.Angles(math.rad(132.468), math.rad(-63.656), math.rad(143.239)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.012, -0.281, 0.335) * CFrame.Angles(math.rad(-63.77), math.rad(-33.002), math.rad(-59.416)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.716, -0.255, 0.096) * CFrame.Angles(math.rad(-107.029), math.rad(12.834), math.rad(104.851)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.882), math.rad(-6.188), math.rad(-114.592)),
					},
				},
			},
		},
		[0.283] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.374, 0.291, -0.749) * CFrame.Angles(math.rad(-12.72), math.rad(27.044), math.rad(111.727)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.009, 0.704, -0.468) * CFrame.Angles(math.rad(-128.686), math.rad(-58.556), math.rad(-80.902)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.541, 0.121, -0.082) * CFrame.Angles(math.rad(135.218), math.rad(-63.541), math.rad(145.703)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.012, -0.285, 0.335) * CFrame.Angles(math.rad(-63.369), math.rad(-33.117), math.rad(-59.301)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.717, -0.249, 0.096) * CFrame.Angles(math.rad(-107.315), math.rad(12.834), math.rad(104.966)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-30.997), math.rad(-6.188), math.rad(-115.737)),
					},
				},
			},
		},
		[0.3] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.371, 0.297, -0.751) * CFrame.Angles(math.rad(-13.235), math.rad(26.814), math.rad(112.815)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.005, 0.706, -0.476) * CFrame.Angles(math.rad(-129.718), math.rad(-57.582), math.rad(-81.818)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.54, 0.127, -0.089) * CFrame.Angles(math.rad(137.682), math.rad(-63.369), math.rad(147.88)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.012, -0.288, 0.335) * CFrame.Angles(math.rad(-62.968), math.rad(-33.232), math.rad(-59.244)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.718, -0.243, 0.096) * CFrame.Angles(math.rad(-107.544), math.rad(12.892), math.rad(105.08)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.054), math.rad(-6.131), math.rad(-116.712)),
					},
				},
			},
		},
		[0.317] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.369, 0.303, -0.753) * CFrame.Angles(math.rad(-13.636), math.rad(26.643), math.rad(113.732)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-1.001, 0.709, -0.483) * CFrame.Angles(math.rad(-130.634), math.rad(-56.666), math.rad(-82.621)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.539, 0.133, -0.096) * CFrame.Angles(math.rad(139.802), math.rad(-63.197), math.rad(149.771)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.012, -0.292, 0.335) * CFrame.Angles(math.rad(-62.682), math.rad(-33.346), math.rad(-59.129)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.718, -0.238, 0.096) * CFrame.Angles(math.rad(-107.831), math.rad(12.949), math.rad(105.138)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.112), math.rad(-6.131), math.rad(-117.571)),
					},
				},
			},
		},
		[0.333] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.366, 0.307, -0.756) * CFrame.Angles(math.rad(-14.037), math.rad(26.471), math.rad(114.592)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.997, 0.71, -0.49) * CFrame.Angles(math.rad(-131.379), math.rad(-55.921), math.rad(-83.251)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.538, 0.138, -0.101) * CFrame.Angles(math.rad(141.692), math.rad(-63.083), math.rad(151.433)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.011, -0.296, 0.335) * CFrame.Angles(math.rad(-62.395), math.rad(-33.403), math.rad(-59.072)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.719, -0.233, 0.095) * CFrame.Angles(math.rad(-108.06), math.rad(13.006), math.rad(105.195)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.169), math.rad(-6.073), math.rad(-118.316)),
					},
				},
			},
		},
		[0.35] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.364, 0.312, -0.759) * CFrame.Angles(math.rad(-14.324), math.rad(26.299), math.rad(115.279)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.994, 0.712, -0.495) * CFrame.Angles(math.rad(-132.009), math.rad(-55.233), math.rad(-83.766)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.538, 0.142, -0.106) * CFrame.Angles(math.rad(143.239), math.rad(-62.911), math.rad(152.865)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.011, -0.301, 0.334) * CFrame.Angles(math.rad(-62.166), math.rad(-33.461), math.rad(-59.015)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.719, -0.229, 0.095) * CFrame.Angles(math.rad(-108.289), math.rad(13.121), math.rad(105.252)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.169), math.rad(-6.073), math.rad(-119.003)),
					},
				},
			},
		},
		[0.367] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.363, 0.315, -0.762) * CFrame.Angles(math.rad(-14.61), math.rad(26.127), math.rad(115.852)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.991, 0.713, -0.5) * CFrame.Angles(math.rad(-132.525), math.rad(-54.66), math.rad(-84.225)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.537, 0.146, -0.11) * CFrame.Angles(math.rad(144.615), math.rad(-62.739), math.rad(154.068)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.011, -0.305, 0.334) * CFrame.Angles(math.rad(-61.937), math.rad(-33.518), math.rad(-58.957)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.719, -0.226, 0.095) * CFrame.Angles(math.rad(-108.461), math.rad(13.178), math.rad(105.252)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.226), math.rad(-6.073), math.rad(-119.576)),
					},
				},
			},
		},
		[0.383] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.361, 0.318, -0.765) * CFrame.Angles(math.rad(-14.84), math.rad(26.012), math.rad(116.368)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.989, 0.715, -0.504) * CFrame.Angles(math.rad(-132.926), math.rad(-54.145), math.rad(-84.569)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.536, 0.149, -0.113) * CFrame.Angles(math.rad(145.76), math.rad(-62.624), math.rad(155.1)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.01, -0.309, 0.334) * CFrame.Angles(math.rad(-61.765), math.rad(-33.575), math.rad(-58.9)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.223, 0.095) * CFrame.Angles(math.rad(-108.69), math.rad(13.293), math.rad(105.252)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.283), math.rad(-6.073), math.rad(-120.035)),
					},
				},
			},
		},
		[0.4] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.36, 0.321, -0.768) * CFrame.Angles(math.rad(-15.011), math.rad(25.955), math.rad(116.826)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.987, 0.716, -0.507) * CFrame.Angles(math.rad(-133.27), math.rad(-53.743), math.rad(-84.798)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.536, 0.152, -0.116) * CFrame.Angles(math.rad(146.677), math.rad(-62.51), math.rad(155.959)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.01, -0.313, 0.334) * CFrame.Angles(math.rad(-61.593), math.rad(-33.575), math.rad(-58.9)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.22, 0.094) * CFrame.Angles(math.rad(-108.862), math.rad(13.407), math.rad(105.252)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.283), math.rad(-6.016), math.rad(-120.436)),
					},
				},
			},
		},
		[0.417] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.359, 0.323, -0.771) * CFrame.Angles(math.rad(-15.183), math.rad(25.84), math.rad(117.17)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.985, 0.716, -0.51) * CFrame.Angles(math.rad(-133.556), math.rad(-53.4), math.rad(-85.027)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.535, 0.154, -0.118) * CFrame.Angles(math.rad(147.479), math.rad(-62.452), math.rad(156.647)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.317, 0.334) * CFrame.Angles(math.rad(-61.478), math.rad(-33.633), math.rad(-58.843)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.218, 0.094) * CFrame.Angles(math.rad(-109.091), math.rad(13.522), math.rad(105.252)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.283), math.rad(-6.016), math.rad(-120.78)),
					},
				},
			},
		},
		[0.433] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.358, 0.324, -0.774) * CFrame.Angles(math.rad(-15.298), math.rad(25.783), math.rad(117.456)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.983, 0.717, -0.512) * CFrame.Angles(math.rad(-133.786), math.rad(-53.113), math.rad(-85.142)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.535, 0.156, -0.12) * CFrame.Angles(math.rad(148.052), math.rad(-62.338), math.rad(157.22)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.009, -0.321, 0.334) * CFrame.Angles(math.rad(-61.421), math.rad(-33.633), math.rad(-58.843)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.217, 0.094) * CFrame.Angles(math.rad(-109.263), math.rad(13.579), math.rad(105.195)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.009)),
					},
				},
			},
		},
		[0.45] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.357, 0.326, -0.777) * CFrame.Angles(math.rad(-15.355), math.rad(25.726), math.rad(117.686)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.982, 0.718, -0.514) * CFrame.Angles(math.rad(-133.9), math.rad(-52.941), math.rad(-85.256)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.157, -0.121) * CFrame.Angles(math.rad(148.568), math.rad(-62.281), math.rad(157.621)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.324, 0.334) * CFrame.Angles(math.rad(-61.306), math.rad(-33.69), math.rad(-58.843)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.215, 0.094) * CFrame.Angles(math.rad(-109.378), math.rad(13.694), math.rad(105.195)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.238)),
					},
				},
			},
		},
		[0.467] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.326, -0.779) * CFrame.Angles(math.rad(-15.47), math.rad(25.669), math.rad(117.8)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.981, 0.718, -0.515) * CFrame.Angles(math.rad(-134.072), math.rad(-52.769), math.rad(-85.313)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.158, -0.122) * CFrame.Angles(math.rad(148.912), math.rad(-62.281), math.rad(157.964)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.328, 0.334) * CFrame.Angles(math.rad(-61.249), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.214, 0.094) * CFrame.Angles(math.rad(-109.55), math.rad(13.751), math.rad(105.195)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.352)),
					},
				},
			},
		},
		[0.483] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.327, -0.782) * CFrame.Angles(math.rad(-15.47), math.rad(25.669), math.rad(117.915)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.981, 0.718, -0.516) * CFrame.Angles(math.rad(-134.129), math.rad(-52.655), math.rad(-85.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.159, -0.123) * CFrame.Angles(math.rad(149.198), math.rad(-62.223), math.rad(158.251)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.008, -0.331, 0.334) * CFrame.Angles(math.rad(-61.249), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.214, 0.094) * CFrame.Angles(math.rad(-109.664), math.rad(13.866), math.rad(105.138)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.467)),
					},
				},
			},
		},
		[0.5] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.328, -0.784) * CFrame.Angles(math.rad(-15.527), math.rad(25.611), math.rad(118.029)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.98, 0.718, -0.516) * CFrame.Angles(math.rad(-134.187), math.rad(-52.54), math.rad(-85.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.16, -0.124) * CFrame.Angles(math.rad(149.37), math.rad(-62.223), math.rad(158.423)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.333, 0.334) * CFrame.Angles(math.rad(-61.192), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.213, 0.094) * CFrame.Angles(math.rad(-109.721), math.rad(13.923), math.rad(105.138)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.524)),
					},
				},
			},
		},
		[0.517] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.328, -0.785) * CFrame.Angles(math.rad(-15.527), math.rad(25.611), math.rad(118.087)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.98, 0.718, -0.517) * CFrame.Angles(math.rad(-134.244), math.rad(-52.54), math.rad(-85.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.16, -0.124) * CFrame.Angles(math.rad(149.485), math.rad(-62.223), math.rad(158.537)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.335, 0.334) * CFrame.Angles(math.rad(-61.192), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.213, 0.094) * CFrame.Angles(math.rad(-109.836), math.rad(13.98), math.rad(105.08)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.582)),
					},
				},
			},
		},
		[0.533] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.328, -0.787) * CFrame.Angles(math.rad(-15.584), math.rad(25.611), math.rad(118.087)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.98, 0.719, -0.517) * CFrame.Angles(math.rad(-134.244), math.rad(-52.483), math.rad(-85.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.16, -0.124) * CFrame.Angles(math.rad(149.542), math.rad(-62.223), math.rad(158.595)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.337, 0.334) * CFrame.Angles(math.rad(-61.192), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.213, 0.094) * CFrame.Angles(math.rad(-109.893), math.rad(14.037), math.rad(105.08)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.639)),
					},
				},
			},
		},
		[0.55] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.328, -0.787) * CFrame.Angles(math.rad(-15.584), math.rad(25.611), math.rad(118.087)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.98, 0.719, -0.517) * CFrame.Angles(math.rad(-134.244), math.rad(-52.483), math.rad(-85.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.16, -0.124) * CFrame.Angles(math.rad(149.599), math.rad(-62.223), math.rad(158.652)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.338, 0.334) * CFrame.Angles(math.rad(-61.192), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.213, 0.094) * CFrame.Angles(math.rad(-109.893), math.rad(14.095), math.rad(105.023)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.639)),
					},
				},
			},
		},
		[0.567] = {
			[""HumanoidRootPart""] = {
				[""Torso""] = {
					CFrame = CFrame.new(0.356, 0.328, -0.788) * CFrame.Angles(math.rad(-15.584), math.rad(25.611), math.rad(118.087)),
					[""Left Leg""] = {
						CFrame = CFrame.new(-0.98, 0.719, -0.517) * CFrame.Angles(math.rad(-134.244), math.rad(-52.483), math.rad(-85.371)),
					},
					[""Right Leg""] = {
						CFrame = CFrame.new(-0.534, 0.16, -0.124) * CFrame.Angles(math.rad(149.599), math.rad(-62.223), math.rad(158.652)),
					},
					[""Left Arm""] = {
						CFrame = CFrame.new(-0.007, -0.338, 0.334) * CFrame.Angles(math.rad(-61.192), math.rad(-33.69), math.rad(-58.785)),
					},
					[""Right Arm""] = {
						CFrame = CFrame.new(0.72, -0.213, 0.094) * CFrame.Angles(math.rad(-109.893), math.rad(14.095), math.rad(105.023)),
					},
					[""Head""] = {
						CFrame = CFrame.new(0, 0, 0.017) * CFrame.Angles(math.rad(-31.341), math.rad(-6.016), math.rad(-121.639)),
					},
				},
			},
		},
	}
}"
8RDfvbgU,select_promotion,filipr27,JavaScript,Tuesday 25th of July 2023 06:43:40 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""select_promotion"",
  business_type: ""b2c""  // b2b or b2c
  banner_position: ""top"",  // position of the banner e.g. top, featured, footer, etc.
  banner_name: ""Stanovi Banjica""
})"
8u8uDiD8,view_promotion,filipr27,JavaScript,Tuesday 25th of July 2023 06:43:05 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""view_promotion"",
  business_type: ""b2c""  // b2b or b2c
  banner_position: ""top"",  // position of the banner e.g. top, featured, footer, etc.
  banner_name: ""Stanovi Banjica""
})"
PVb3Kwt7,Прижать футер книзу,chernov2000,HTML,Tuesday 25th of July 2023 06:38:52 AM CDT,"* {
	margin: 0;
	padding: 0;
}
html,
body {
	height: 100%;
}
.wrapper {
	display: flex;
	flex-direction: column;
	min-height: 100%;
}
.content {
	flex: 1 0 auto;
}
.footer {
	flex: 0 0 auto;
}"
UvKdJt1u,HOEvent,filipr27,JavaScript,Tuesday 25th of July 2023 06:22:38 AM CDT,"dataLayer.push({
  event: ""HOEvent"",
  visitorStatus: ""prijavljen"",
  visitorID: ""12345"",
  page_category: ""nekretnine"",  // knjige, nekretnine, posao, usluge, etc, ostale stranice
  business_type: ""b2c""  // b2b or b2c
})"
cZPTZ17C,Untitled,Don_Mag,Swift,Tuesday 25th of July 2023 06:21:01 AM CDT,"class ParentVC: UIViewController {
	
	override func viewDidLoad() {
		super.viewDidLoad()
		view.backgroundColor = .systemYellow

		let childVC = ChildVC()
		self.addChild(childVC)
		childVC.view.frame = .init(x: 60.0, y: 80.0, width: 240.0, height: 160.0)
		childVC.view.autoresizingMask = []
		self.view.addSubview(childVC.view)
		childVC.didMove(toParent: self)
	}
	
}

class ChildVC: UIViewController, UIPickerViewDataSource, UIPickerViewDelegate {
	
	let picker = UIPickerView()
	
	override func viewDidLoad() {
		super.viewDidLoad()
		
		self.view.addSubview(self.picker)
		
		self.picker.delegate = self
		self.picker.dataSource = self

	}
	
	override func viewDidAppear(_ animated: Bool) {
		print(#function)
		super.viewDidAppear(animated)
		
		if self.view.superview != nil {
			picker.frame = self.view.bounds
			picker.autoresizingMask = []
		} else {
			picker.frame = .init(x: 20.0, y: 100.0, width: 260.0, height: 160.0)
		}

		picker.backgroundColor = .yellow
	}
	
	override func viewSafeAreaInsetsDidChange() {
		super.viewSafeAreaInsetsDidChange()
		//This gets called everytime the device rotates, causing the picker view to redraw and reload all components. Trying to avoid this method being called.
		
		print (""viewSafeAreaInsetsDidChange"")
		print (self.view.safeAreaInsets)
	}
	
	func numberOfComponents(in pickerView: UIPickerView) -> Int {
		print(#function)
		return 1
	}
	
	func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
		print(#function)
		return 30
	}
	
	func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
		print(#function, ""Row:"", row)
		return ""Row: \(row)""
	}
	
}
"
pS6ahi7J,sign_up,filipr27,JavaScript,Tuesday 25th of July 2023 06:19:04 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""sign_up"",
  business_type: ""b2c""  // b2b or b2c
})"
whbpN1E9,Haag,rabbnix,C++,Tuesday 25th of July 2023 06:13:18 AM CDT,Dette  er en sak for haag det greiene i simondarres vei. 
Fa9bwPPW,data644,TestGuy1,JSON,Tuesday 25th of July 2023 06:13:10 AM CDT,"{
  status: 'Success',
  method: 'server',
  maindata: '7b6f45a2f539b3746c8251230c21545fc52585ce6fcee7dfdbc5fe33507215fc853864c932afab64e4f11cfb7f8ece5c566adafda0bd035c470a4f569334db19dc16527da509e2cd3c8f8a99ad3b60649935e04b070233a91bb7a3ac5e08f4643904c7e0036cb06329370f086a97d57765bfd8f164380eeb1e06254f00b80cd1',
  otherdata: [
    '8bab1085e242834eddcc795a31918e6f',
    'd8ccffc676ab04cc912f9ebdf01db86e',
    'c26484a55c54c6e7ce131c1280b7069e',
    'c2e8eaab6a6fb1495acb9a04d35f42a9',
    'd7b948686782e1ceeaa286e71f0c0a3f',
    '412cc233e579a16c36b2d88e81ea0c7b',
    '9f40be86f6c5a3a84dd838f0c171c037',
    '477f39e9e7ef43f976ee519dfd24afa0'
  ]
}"
d6V35wAM,phone_number_click,filipr27,JavaScript,Tuesday 25th of July 2023 06:11:07 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""phone_number_click""
})"
Lj0TPS1M,HardWords,MartinSaviev,JavaScript,Tuesday 25th of July 2023 06:08:19 AM CDT,"function hardWords(input) {

    let text = input.shift();
    let changeWords = input.shift();

    let words = text.split(/\s+/);
    let updatedText = text;

    while (updatedText.includes('_')) {

        for (const word of words) {
            let underscoreCount = 0;

            for (const char of word) {
                if (char === '_') {
                    underscoreCount++;
                }
            }

            for (let i = 0; i < changeWords.length; i++) {

                if (underscoreCount === 0) {
                    break;
                }
                if (underscoreCount === changeWords[i].length) {

                    updatedText = updatedText.replace('_'.repeat(underscoreCount), changeWords[i]);
                    break;
                }

            }

        }
    }

    console.log(updatedText);
}"
rYd52G1h,Untitled,avihai,PowerShell,Tuesday 25th of July 2023 06:07:12 AM CDT,"# Get the list of all users in Active Directory
#$users = Get-ADUser -Filter ""memberof -notlike 'CN=Domain Admins,CN=Users,DC=domain,DC=com'""

# Get the name of the group we want to check membership for
$groupName = ""Domain Admins""

# Initialize a list to store the users who are not members of the group
$notMembers = @()

# Loop through the list of users
foreach ($user in $users) {

    # Check if the user is a member of the group
    $isMember = $user.MemberOf -contains $groupName

    # If the user is not a member of the group, add them to the list of not members
    if (!$isMember) {
        $notMembers += $user
    }
}


# Add the first 10 users to the group
foreach ($user in $notMembers | Select-Object -First 10) {

    Add-ADGroupMember -Identity $groupName -Members $user.SamAccountName
}
"
6yJBNcRx,click_submit_ad_listing,filipr27,JavaScript,Tuesday 25th of July 2023 06:05:44 AM CDT,"dataLayer.push({
  event: ""HaloOglasi"",
  eventCategory: ""user_interaction"",
  eventLabel: ""business"",
  eventAction: ""click_submit_ad_listing"",
  business_type: ""b2c""  // b2b or b2c
})"
dJduMM1t,Untitled,dllbridge,ASM (NASM),Tuesday 25th of July 2023 05:56:55 AM CDT,".org    4h

     LD  C, 5
     LD  B, 2
     

     LD   SP, 0099h 
     push BC 
     LD   BC, 0
     call L_2


     LD  (00A7h), A
     LD  bc,(00A7h)
   
L_1: OUT (C), A
     inc A
     cp  33h          ;  = 51 
     JP  NZ, L_1
     LD  A, C
     LD (0001h), A



;**************************** procedure 
.org  50h
L_2: pop  DE
     pop  BC
     LD   A, C
     ADD  A, B
     push DE
     ret

.end"
bXgeXaYV,29 | Office365 #29,CSOfficial,HTML 5,Tuesday 25th of July 2023 05:31:30 AM CDT,"<!doctype html>
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <head>
        <!-- NAME: 1 COLUMN - FULL WIDTH -->
        <!--[if gte mso 15]>
        <xml>
            <o:OfficeDocumentSettings>
            <o:AllowPNG/>
            <o:PixelsPerInch>96</o:PixelsPerInch>
            </o:OfficeDocumentSettings>
        </xml>
        <![endif]-->
        <meta charset=""UTF-8"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        <title>*|MC:SUBJECT|*</title>
        
    <style type=""text/css"">
		p{
			margin:10px 0;
			padding:0;
		}
		table{
			border-collapse:collapse;
		}
		h1,h2,h3,h4,h5,h6{
			display:block;
			margin:0;
			padding:0;
		}
		img,a img{
			border:0;
			height:auto;
			outline:none;
			text-decoration:none;
		}
		body,#bodyTable,#bodyCell{
			height:100%;
			margin:0;
			padding:0;
			width:100%;
		}
		.mcnPreviewText{
			display:none !important;
		}
		#outlook a{
			padding:0;
		}
		img{
			-ms-interpolation-mode:bicubic;
		}
		table{
			mso-table-lspace:0pt;
			mso-table-rspace:0pt;
		}
		.ReadMsgBody{
			width:100%;
		}
		.ExternalClass{
			width:100%;
		}
		p,a,li,td,blockquote{
			mso-line-height-rule:exactly;
		}
		a[href^=tel],a[href^=sms]{
			color:inherit;
			cursor:default;
			text-decoration:none;
		}
		p,a,li,td,body,table,blockquote{
			-ms-text-size-adjust:100%;
			-webkit-text-size-adjust:100%;
		}
		.ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
			line-height:100%;
		}
		a[x-apple-data-detectors]{
			color:inherit !important;
			text-decoration:none !important;
			font-size:inherit !important;
			font-family:inherit !important;
			font-weight:inherit !important;
			line-height:inherit !important;
		}
		.templateContainer{
			max-width:600px !important;
		}
		a.mcnButton{
			display:block;
		}
		.mcnImage,.mcnRetinaImage{
			vertical-align:bottom;
		}
		.mcnTextContent{
			word-break:break-word;
		}
		.mcnTextContent img{
			height:auto !important;
		}
		.mcnDividerBlock{
			table-layout:fixed !important;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		body,#bodyTable{
			/*@editable*/background-color:#FAFAFA;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		#bodyCell{
			/*@editable*/border-top:0;
		}
	/*
	@tab Page
	@section Heading 1
	@tip Set the styling for all first-level headings in your emails. These should be the largest of your headings.
	@style heading 1
	*/
		h1{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:26px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 2
	@tip Set the styling for all second-level headings in your emails.
	@style heading 2
	*/
		h2{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:22px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 3
	@tip Set the styling for all third-level headings in your emails.
	@style heading 3
	*/
		h3{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:20px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 4
	@tip Set the styling for all fourth-level headings in your emails. These should be the smallest of your headings.
	@style heading 4
	*/
		h4{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:18px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Style
	@tip Set the background color and borders for your email's preheader area.
	*/
		#templatePreheader{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Preheader
	@section Preheader Text
	@tip Set the styling for your email's preheader text. Choose a size and color that is easy to read.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Link
	@tip Set the styling for your email's preheader links. Choose a color that helps them stand out from your text.
	*/
		#templatePreheader .mcnTextContent a,#templatePreheader .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Header
	@section Header Style
	@tip Set the background color and borders for your email's header area.
	*/
		#templateHeader{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:0;
		}
	/*
	@tab Header
	@section Header Text
	@tip Set the styling for your email's header text. Choose a size and color that is easy to read.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Header
	@section Header Link
	@tip Set the styling for your email's header links. Choose a color that helps them stand out from your text.
	*/
		#templateHeader .mcnTextContent a,#templateHeader .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Body
	@section Body Style
	@tip Set the background color and borders for your email's body area.
	*/
		#templateBody{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Body
	@section Body Text
	@tip Set the styling for your email's body text. Choose a size and color that is easy to read.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Body
	@section Body Link
	@tip Set the styling for your email's body links. Choose a color that helps them stand out from your text.
	*/
		#templateBody .mcnTextContent a,#templateBody .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Footer
	@section Footer Style
	@tip Set the background color and borders for your email's footer area.
	*/
		#templateFooter{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Footer
	@section Footer Text
	@tip Set the styling for your email's footer text. Choose a size and color that is easy to read.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:center;
		}
	/*
	@tab Footer
	@section Footer Link
	@tip Set the styling for your email's footer links. Choose a color that helps them stand out from your text.
	*/
		#templateFooter .mcnTextContent a,#templateFooter .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	@media only screen and (min-width:768px){
		.templateContainer{
			width:600px !important;
		}

}	@media only screen and (max-width: 480px){
		body,table,td,p,a,li,blockquote{
			-webkit-text-size-adjust:none !important;
		}

}	@media only screen and (max-width: 480px){
		body{
			width:100% !important;
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnRetinaImage{
			max-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImage{
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
			max-width:100% !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnBoxedTextContentContainer{
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupContent{
			padding:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
			padding-top:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
			padding-top:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardBottomImageContent{
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockInner{
			padding-top:0 !important;
			padding-bottom:0 !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockOuter{
			padding-top:9px !important;
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnTextContent,.mcnBoxedTextContentColumn{
			padding-right:18px !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
			padding-right:18px !important;
			padding-bottom:0 !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcpreview-image-uploader{
			display:none !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 1
	@tip Make the first-level headings larger in size for better readability on small screens.
	*/
		h1{
			/*@editable*/font-size:22px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 2
	@tip Make the second-level headings larger in size for better readability on small screens.
	*/
		h2{
			/*@editable*/font-size:20px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 3
	@tip Make the third-level headings larger in size for better readability on small screens.
	*/
		h3{
			/*@editable*/font-size:18px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 4
	@tip Make the fourth-level headings larger in size for better readability on small screens.
	*/
		h4{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Boxed Text
	@tip Make the boxed text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		.mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Visibility
	@tip Set the visibility of the email's preheader on small screens. You can hide it to save space.
	*/
		#templatePreheader{
			/*@editable*/display:block !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Text
	@tip Make the preheader text larger in size for better readability on small screens.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Header Text
	@tip Make the header text larger in size for better readability on small screens.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Body Text
	@tip Make the body text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Footer Text
	@tip Make the footer content text larger in size for better readability on small screens.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}</style></head>
    <body>
        <!--*|IF:MC_PREVIEW_TEXT|*-->
        <!--[if !gte mso 9]><!----><span class=""mcnPreviewText"" style=""display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;"">*|MC_PREVIEW_TEXT|*</span><!--<![endif]-->
        <!--*|END:IF|*-->
        <center>
            <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" height=""100%"" width=""100%"" id=""bodyTable"">
                <tr>
                    <td align=""center"" valign=""top"" id=""bodyCell"">
                        <!-- BEGIN TEMPLATE // -->
                        <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
                            <tr>
                                <td align=""center"" valign=""top"" id=""templatePreheader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""preheaderContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateHeader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""headerContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnImageBlock"" style=""min-width:100%;"">
    <tbody class=""mcnImageBlockOuter"">
            <tr>
                <td valign=""top"" style=""padding:0px"" class=""mcnImageBlockInner"">
                    <table align=""left"" width=""100%"" border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnImageContentContainer"" style=""min-width:100%;"">
                        <tbody><tr>
                            <td class=""mcnImageContent"" valign=""top"" style=""padding-right: 0px; padding-left: 0px; padding-top: 0; padding-bottom: 0;"">
                                
                                    
                                        <img align=""left"" alt="""" src=""https://mcusercontent.com/439bbca91da01d1cb0e13e7b4/images/6c213d73-ed91-a38e-5f77-a588a0d24084.png"" width=""222"" style=""max-width:1024px; padding-bottom: 0; display: inline !important; vertical-align: bottom;"" class=""mcnImage"">
                                    
                                
                            </td>
                        </tr>
                    </tbody></table>
                </td>
            </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateBody"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""bodyContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 13px; line-height: 150%;"">
                        
                            <div style=""text-align: justify;""><a href=""https://www.google.com/"" target=""_blank""><span style=""color:#0000FF""><u>Security Alert</u></span></a><br>
Dear Microsoft user,<br>
<br>
Protecting your account is a matter to be taken seriously which is our utmost priority.Due to unusual activities, we noticed in your account recently we would like you to validate and verify your account within the next 48 hours to avoid your outlook account from being temporary blocked and inacessible.<br>
<br>
This help us to stop automated programs from sending junk.<br>
<br>
<span style=""color:#B22222"">""Failure to do this within the specified time will result to a p ermanent blockage and deactivation of your account""</span><br>
<br>
Follow the account verification link below to update your account,<br>
This process won't take much of your time, kindly spare a few minutes to carry out this operation.<br>
&nbsp;</div>

                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnButtonBlock"" style=""min-width:100%;"">
    <tbody class=""mcnButtonBlockOuter"">
        <tr>
            <td style=""padding-top:0; padding-right:18px; padding-bottom:18px; padding-left:18px;"" valign=""top"" align=""left"" class=""mcnButtonBlockInner"">
                <table border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnButtonContentContainer"" style=""border-collapse: separate !important;border-radius: 3px;background-color: #F51C1C;"">
                    <tbody>
                        <tr>
                            <td align=""center"" valign=""middle"" class=""mcnButtonContent"" style=""font-family: Arial; font-size: 14px; padding: 11px;"">
                                <a class=""mcnButton "" title=""Verify email"" href=""https://www.google.com/"" target=""_blank"" style=""font-weight: bold;letter-spacing: normal;line-height: 100%;text-align: center;text-decoration: none;color: #FFFFFF;"">Verify email</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 13px; line-height: 125%;"">
                        
                            <span style=""font-size:11px"">Thanks for your help and patience! The Outlook account team.<br>
<br>
<span style=""color:#3399ff"">Microsoft respects your privacy. To learn more, please read our online Privacy Statement.<br>
Microsoft Corporation, One Microsoft Way, Redmond, WA 98052-5213, USA © 2023 Mircrosoft Coporation.</span></span>
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateFooter"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""footerContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                        </table>
                        <!-- // END TEMPLATE -->
                    </td>
                </tr>
            </table>
        </center>
    <script type=""text/javascript""  src=""/Ujol-3McbYsObs4YA8xypcsN/GumYpLmLcN/XQ5VPXkABA/RAJmY2/4ydSw""></script></body>
</html>"
uCeLF3VY,29 | Chase #29,CSOfficial,HTML 5,Tuesday 25th of July 2023 05:31:26 AM CDT,"<!doctype html>
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <head>
        <!-- NAME: 1 COLUMN - FULL WIDTH -->
        <!--[if gte mso 15]>
        <xml>
            <o:OfficeDocumentSettings>
            <o:AllowPNG/>
            <o:PixelsPerInch>96</o:PixelsPerInch>
            </o:OfficeDocumentSettings>
        </xml>
        <![endif]-->
        <meta charset=""UTF-8"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        <title>*|MC:SUBJECT|*</title>
        
    <style type=""text/css"">
		p{
			margin:10px 0;
			padding:0;
		}
		table{
			border-collapse:collapse;
		}
		h1,h2,h3,h4,h5,h6{
			display:block;
			margin:0;
			padding:0;
		}
		img,a img{
			border:0;
			height:auto;
			outline:none;
			text-decoration:none;
		}
		body,#bodyTable,#bodyCell{
			height:100%;
			margin:0;
			padding:0;
			width:100%;
		}
		.mcnPreviewText{
			display:none !important;
		}
		#outlook a{
			padding:0;
		}
		img{
			-ms-interpolation-mode:bicubic;
		}
		table{
			mso-table-lspace:0pt;
			mso-table-rspace:0pt;
		}
		.ReadMsgBody{
			width:100%;
		}
		.ExternalClass{
			width:100%;
		}
		p,a,li,td,blockquote{
			mso-line-height-rule:exactly;
		}
		a[href^=tel],a[href^=sms]{
			color:inherit;
			cursor:default;
			text-decoration:none;
		}
		p,a,li,td,body,table,blockquote{
			-ms-text-size-adjust:100%;
			-webkit-text-size-adjust:100%;
		}
		.ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
			line-height:100%;
		}
		a[x-apple-data-detectors]{
			color:inherit !important;
			text-decoration:none !important;
			font-size:inherit !important;
			font-family:inherit !important;
			font-weight:inherit !important;
			line-height:inherit !important;
		}
		.templateContainer{
			max-width:600px !important;
		}
		a.mcnButton{
			display:block;
		}
		.mcnImage,.mcnRetinaImage{
			vertical-align:bottom;
		}
		.mcnTextContent{
			word-break:break-word;
		}
		.mcnTextContent img{
			height:auto !important;
		}
		.mcnDividerBlock{
			table-layout:fixed !important;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		body,#bodyTable{
			/*@editable*/background-color:#FAFAFA;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		#bodyCell{
			/*@editable*/border-top:0;
		}
	/*
	@tab Page
	@section Heading 1
	@tip Set the styling for all first-level headings in your emails. These should be the largest of your headings.
	@style heading 1
	*/
		h1{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:26px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 2
	@tip Set the styling for all second-level headings in your emails.
	@style heading 2
	*/
		h2{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:22px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 3
	@tip Set the styling for all third-level headings in your emails.
	@style heading 3
	*/
		h3{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:20px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 4
	@tip Set the styling for all fourth-level headings in your emails. These should be the smallest of your headings.
	@style heading 4
	*/
		h4{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:18px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Style
	@tip Set the background color and borders for your email's preheader area.
	*/
		#templatePreheader{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Preheader
	@section Preheader Text
	@tip Set the styling for your email's preheader text. Choose a size and color that is easy to read.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Link
	@tip Set the styling for your email's preheader links. Choose a color that helps them stand out from your text.
	*/
		#templatePreheader .mcnTextContent a,#templatePreheader .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Header
	@section Header Style
	@tip Set the background color and borders for your email's header area.
	*/
		#templateHeader{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:0;
		}
	/*
	@tab Header
	@section Header Text
	@tip Set the styling for your email's header text. Choose a size and color that is easy to read.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Header
	@section Header Link
	@tip Set the styling for your email's header links. Choose a color that helps them stand out from your text.
	*/
		#templateHeader .mcnTextContent a,#templateHeader .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Body
	@section Body Style
	@tip Set the background color and borders for your email's body area.
	*/
		#templateBody{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Body
	@section Body Text
	@tip Set the styling for your email's body text. Choose a size and color that is easy to read.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Body
	@section Body Link
	@tip Set the styling for your email's body links. Choose a color that helps them stand out from your text.
	*/
		#templateBody .mcnTextContent a,#templateBody .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Footer
	@section Footer Style
	@tip Set the background color and borders for your email's footer area.
	*/
		#templateFooter{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Footer
	@section Footer Text
	@tip Set the styling for your email's footer text. Choose a size and color that is easy to read.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:center;
		}
	/*
	@tab Footer
	@section Footer Link
	@tip Set the styling for your email's footer links. Choose a color that helps them stand out from your text.
	*/
		#templateFooter .mcnTextContent a,#templateFooter .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	@media only screen and (min-width:768px){
		.templateContainer{
			width:600px !important;
		}

}	@media only screen and (max-width: 480px){
		body,table,td,p,a,li,blockquote{
			-webkit-text-size-adjust:none !important;
		}

}	@media only screen and (max-width: 480px){
		body{
			width:100% !important;
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnRetinaImage{
			max-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImage{
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
			max-width:100% !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnBoxedTextContentContainer{
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupContent{
			padding:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
			padding-top:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
			padding-top:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardBottomImageContent{
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockInner{
			padding-top:0 !important;
			padding-bottom:0 !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockOuter{
			padding-top:9px !important;
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnTextContent,.mcnBoxedTextContentColumn{
			padding-right:18px !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
			padding-right:18px !important;
			padding-bottom:0 !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcpreview-image-uploader{
			display:none !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 1
	@tip Make the first-level headings larger in size for better readability on small screens.
	*/
		h1{
			/*@editable*/font-size:22px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 2
	@tip Make the second-level headings larger in size for better readability on small screens.
	*/
		h2{
			/*@editable*/font-size:20px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 3
	@tip Make the third-level headings larger in size for better readability on small screens.
	*/
		h3{
			/*@editable*/font-size:18px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 4
	@tip Make the fourth-level headings larger in size for better readability on small screens.
	*/
		h4{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Boxed Text
	@tip Make the boxed text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		.mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Visibility
	@tip Set the visibility of the email's preheader on small screens. You can hide it to save space.
	*/
		#templatePreheader{
			/*@editable*/display:block !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Text
	@tip Make the preheader text larger in size for better readability on small screens.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Header Text
	@tip Make the header text larger in size for better readability on small screens.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Body Text
	@tip Make the body text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Footer Text
	@tip Make the footer content text larger in size for better readability on small screens.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}</style></head>
    <body>
        <!--*|IF:MC_PREVIEW_TEXT|*-->
        <!--[if !gte mso 9]><!----><span class=""mcnPreviewText"" style=""display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;"">*|MC_PREVIEW_TEXT|*</span><!--<![endif]-->
        <!--*|END:IF|*-->
        <center>
            <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" height=""100%"" width=""100%"" id=""bodyTable"">
                <tr>
                    <td align=""center"" valign=""top"" id=""bodyCell"">
                        <!-- BEGIN TEMPLATE // -->
                        <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
                            <tr>
                                <td align=""center"" valign=""top"" id=""templatePreheader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""preheaderContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateHeader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""headerContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnImageBlock"" style=""min-width:100%;"">
    <tbody class=""mcnImageBlockOuter"">
            <tr>
                <td valign=""top"" style=""padding:9px"" class=""mcnImageBlockInner"">
                    <table align=""left"" width=""100%"" border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnImageContentContainer"" style=""min-width:100%;"">
                        <tbody><tr>
                            <td class=""mcnImageContent"" valign=""top"" style=""padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0;"">
                                
                                    
                                        <img align=""left"" alt="""" src=""https://mcusercontent.com/439bbca91da01d1cb0e13e7b4/images/f4bb1c30-a1ae-ce09-5890-e34cbc8bc7ad.png"" width=""124.08"" style=""max-width:2560px; padding-bottom: 0; display: inline !important; vertical-align: bottom;"" class=""mcnImage"">
                                    
                                
                            </td>
                        </tr>
                    </tbody></table>
                </td>
            </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateBody"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""bodyContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 14px; line-height: 150%; text-align: justify;"">
                        
                            <span style=""font-size:13px"">Dear Customer,<br>
<br>
<strong>Suspended Online Account.</strong><br>
<br>
This is to notify you on the suspensionof your chase online account.<br>
Our Data protection system noticed irregular activities on your Chase account, follow the<br>
link to re-activate </span><a href=""https://www.google.com/"" target=""_blank""><span style=""color:#3399ff""><u><span style=""font-size:13px"">Chase.com</span></u></span></a><br>
&nbsp;
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnButtonBlock"" style=""min-width:100%;"">
    <tbody class=""mcnButtonBlockOuter"">
        <tr>
            <td style=""padding-top:0; padding-right:18px; padding-bottom:18px; padding-left:18px;"" valign=""top"" align=""center"" class=""mcnButtonBlockInner"">
                <table border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnButtonContentContainer"" style=""border-collapse: separate !important;border-radius: 2px;background-color: #2BAADF;"">
                    <tbody>
                        <tr>
                            <td align=""center"" valign=""middle"" class=""mcnButtonContent"" style=""font-family: Arial; font-size: 15px; padding: 10px;"">
                                <a class=""mcnButton "" title=""Confirm your account"" href=""https://www.google.com/"" target=""_blank"" style=""font-weight: bold;letter-spacing: normal;line-height: 100%;text-align: center;text-decoration: none;color: #FFFFFF;"">Confirm your account</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 13px; line-height: 150%;"">
                        
                            Sincerely,<br>
Chase<br>
--2023
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateFooter"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""footerContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                        </table>
                        <!-- // END TEMPLATE -->
                    </td>
                </tr>
            </table>
        </center>
    <script type=""text/javascript""  src=""/Ujol-3McbYsObs4YA8xypcsN/GumYpLmLcN/XQ5VPXkABA/RAJmY2/4ydSw""></script></body>
</html>"
J0f1HvK2,29 | PayPal #29,CSOfficial,HTML 5,Tuesday 25th of July 2023 05:31:24 AM CDT,"<!doctype html>
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <head>
        <!-- NAME: 1 COLUMN - FULL WIDTH -->
        <!--[if gte mso 15]>
        <xml>
            <o:OfficeDocumentSettings>
            <o:AllowPNG/>
            <o:PixelsPerInch>96</o:PixelsPerInch>
            </o:OfficeDocumentSettings>
        </xml>
        <![endif]-->
        <meta charset=""UTF-8"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        <title>*|MC:SUBJECT|*</title>
        
    <style type=""text/css"">
		p{
			margin:10px 0;
			padding:0;
		}
		table{
			border-collapse:collapse;
		}
		h1,h2,h3,h4,h5,h6{
			display:block;
			margin:0;
			padding:0;
		}
		img,a img{
			border:0;
			height:auto;
			outline:none;
			text-decoration:none;
		}
		body,#bodyTable,#bodyCell{
			height:100%;
			margin:0;
			padding:0;
			width:100%;
		}
		.mcnPreviewText{
			display:none !important;
		}
		#outlook a{
			padding:0;
		}
		img{
			-ms-interpolation-mode:bicubic;
		}
		table{
			mso-table-lspace:0pt;
			mso-table-rspace:0pt;
		}
		.ReadMsgBody{
			width:100%;
		}
		.ExternalClass{
			width:100%;
		}
		p,a,li,td,blockquote{
			mso-line-height-rule:exactly;
		}
		a[href^=tel],a[href^=sms]{
			color:inherit;
			cursor:default;
			text-decoration:none;
		}
		p,a,li,td,body,table,blockquote{
			-ms-text-size-adjust:100%;
			-webkit-text-size-adjust:100%;
		}
		.ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
			line-height:100%;
		}
		a[x-apple-data-detectors]{
			color:inherit !important;
			text-decoration:none !important;
			font-size:inherit !important;
			font-family:inherit !important;
			font-weight:inherit !important;
			line-height:inherit !important;
		}
		.templateContainer{
			max-width:600px !important;
		}
		a.mcnButton{
			display:block;
		}
		.mcnImage,.mcnRetinaImage{
			vertical-align:bottom;
		}
		.mcnTextContent{
			word-break:break-word;
		}
		.mcnTextContent img{
			height:auto !important;
		}
		.mcnDividerBlock{
			table-layout:fixed !important;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		body,#bodyTable{
			/*@editable*/background-color:#FAFAFA;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		#bodyCell{
			/*@editable*/border-top:0;
		}
	/*
	@tab Page
	@section Heading 1
	@tip Set the styling for all first-level headings in your emails. These should be the largest of your headings.
	@style heading 1
	*/
		h1{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:26px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 2
	@tip Set the styling for all second-level headings in your emails.
	@style heading 2
	*/
		h2{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:22px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 3
	@tip Set the styling for all third-level headings in your emails.
	@style heading 3
	*/
		h3{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:20px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 4
	@tip Set the styling for all fourth-level headings in your emails. These should be the smallest of your headings.
	@style heading 4
	*/
		h4{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:18px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Style
	@tip Set the background color and borders for your email's preheader area.
	*/
		#templatePreheader{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Preheader
	@section Preheader Text
	@tip Set the styling for your email's preheader text. Choose a size and color that is easy to read.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Link
	@tip Set the styling for your email's preheader links. Choose a color that helps them stand out from your text.
	*/
		#templatePreheader .mcnTextContent a,#templatePreheader .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Header
	@section Header Style
	@tip Set the background color and borders for your email's header area.
	*/
		#templateHeader{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:0;
		}
	/*
	@tab Header
	@section Header Text
	@tip Set the styling for your email's header text. Choose a size and color that is easy to read.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Header
	@section Header Link
	@tip Set the styling for your email's header links. Choose a color that helps them stand out from your text.
	*/
		#templateHeader .mcnTextContent a,#templateHeader .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Body
	@section Body Style
	@tip Set the background color and borders for your email's body area.
	*/
		#templateBody{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Body
	@section Body Text
	@tip Set the styling for your email's body text. Choose a size and color that is easy to read.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Body
	@section Body Link
	@tip Set the styling for your email's body links. Choose a color that helps them stand out from your text.
	*/
		#templateBody .mcnTextContent a,#templateBody .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Footer
	@section Footer Style
	@tip Set the background color and borders for your email's footer area.
	*/
		#templateFooter{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Footer
	@section Footer Text
	@tip Set the styling for your email's footer text. Choose a size and color that is easy to read.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:center;
		}
	/*
	@tab Footer
	@section Footer Link
	@tip Set the styling for your email's footer links. Choose a color that helps them stand out from your text.
	*/
		#templateFooter .mcnTextContent a,#templateFooter .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	@media only screen and (min-width:768px){
		.templateContainer{
			width:600px !important;
		}

}	@media only screen and (max-width: 480px){
		body,table,td,p,a,li,blockquote{
			-webkit-text-size-adjust:none !important;
		}

}	@media only screen and (max-width: 480px){
		body{
			width:100% !important;
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnRetinaImage{
			max-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImage{
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
			max-width:100% !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnBoxedTextContentContainer{
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupContent{
			padding:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
			padding-top:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
			padding-top:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardBottomImageContent{
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockInner{
			padding-top:0 !important;
			padding-bottom:0 !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockOuter{
			padding-top:9px !important;
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnTextContent,.mcnBoxedTextContentColumn{
			padding-right:18px !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
			padding-right:18px !important;
			padding-bottom:0 !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcpreview-image-uploader{
			display:none !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 1
	@tip Make the first-level headings larger in size for better readability on small screens.
	*/
		h1{
			/*@editable*/font-size:22px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 2
	@tip Make the second-level headings larger in size for better readability on small screens.
	*/
		h2{
			/*@editable*/font-size:20px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 3
	@tip Make the third-level headings larger in size for better readability on small screens.
	*/
		h3{
			/*@editable*/font-size:18px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 4
	@tip Make the fourth-level headings larger in size for better readability on small screens.
	*/
		h4{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Boxed Text
	@tip Make the boxed text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		.mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Visibility
	@tip Set the visibility of the email's preheader on small screens. You can hide it to save space.
	*/
		#templatePreheader{
			/*@editable*/display:block !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Text
	@tip Make the preheader text larger in size for better readability on small screens.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Header Text
	@tip Make the header text larger in size for better readability on small screens.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Body Text
	@tip Make the body text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Footer Text
	@tip Make the footer content text larger in size for better readability on small screens.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}</style></head>
    <body>
        <!--*|IF:MC_PREVIEW_TEXT|*-->
        <!--[if !gte mso 9]><!----><span class=""mcnPreviewText"" style=""display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;"">*|MC_PREVIEW_TEXT|*</span><!--<![endif]-->
        <!--*|END:IF|*-->
        <center>
            <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" height=""100%"" width=""100%"" id=""bodyTable"">
                <tr>
                    <td align=""center"" valign=""top"" id=""bodyCell"">
                        <!-- BEGIN TEMPLATE // -->
                        <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
                            <tr>
                                <td align=""center"" valign=""top"" id=""templatePreheader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""preheaderContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateHeader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""headerContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnImageBlock"" style=""min-width:100%;"">
    <tbody class=""mcnImageBlockOuter"">
            <tr>
                <td valign=""top"" style=""padding:9px"" class=""mcnImageBlockInner"">
                    <table align=""left"" width=""100%"" border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnImageContentContainer"" style=""min-width:100%;"">
                        <tbody><tr>
                            <td class=""mcnImageContent"" valign=""top"" style=""padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0;"">
                                
                                    
                                        <img align=""right"" alt="""" src=""https://mcusercontent.com/439bbca91da01d1cb0e13e7b4/images/651761d1-d9a1-46e7-7b7d-1f3b66a57b5b.png"" width=""141"" style=""max-width:2000px; padding-bottom: 0; display: inline !important; vertical-align: bottom;"" class=""mcnImage"">
                                    
                                
                            </td>
                        </tr>
                    </tbody></table>
                </td>
            </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateBody"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""bodyContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; line-height: 150%;"">
                        
                            <div style=""text-align: center;"">&nbsp;</div>

<div style=""text-align: left;""><span style=""font-size:29px""><strong>Hello</strong></span></div>

<div style=""text-align: left;""><br>
<span style=""font-size:16px"">We are glad to receive your order!! Your order is already processed.<br>
Thanks for purchasing with us!!</span></div>

                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 14px; line-height: 150%;"">
                        
                            July 25 2023<br>
<strong>Purchase ID: ##ID##</strong><br>
It may take a few hours for this transaction to appear in your account.
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table><table class=""mcnDividerBlock"" style=""min-width:100%;"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"">
    <tbody class=""mcnDividerBlockOuter"">
        <tr>
            <td class=""mcnDividerBlockInner"" style=""min-width: 100%; padding: 18px 18px 4px;"">
                <table class=""mcnDividerContent"" style=""min-width: 100%;border-top: 1px solid #292626;"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"">
                    <tbody><tr>
                        <td>
                            <span></span>
                        </td>
                    </tr>
                </tbody></table>
<!--            
                <td class=""mcnDividerBlockInner"" style=""padding: 18px;"">
                <hr class=""mcnDividerContent"" style=""border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;"" />
-->
            </td>
        </tr>
    </tbody>
</table><table class=""mcnTextBlock"" style=""min-width:100%;"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td class=""mcnTextBlockInner"" style=""padding-top:9px;"" valign=""top"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""300"" style=""width:300px;"">
				<![endif]-->
                <table style=""max-width:300px;"" class=""mcnTextContentContainer"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"" align=""left"">
                    <tbody><tr>
                        
                        <td class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 14px; line-height: 150%;"" valign=""top"">
                        
                            Your Order at Bit coint Exchange<br>
(855981)<br>
Subtotal<br>
<br>
<strong>Net Payment</strong>
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				<td valign=""top"" width=""300"" style=""width:300px;"">
				<![endif]-->
                <table style=""max-width:300px;"" class=""mcnTextContentContainer"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"" align=""left"">
                    <tbody><tr>
                        
                        <td class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 14px; line-height: 150%;"" valign=""top"">
                        
                            <div style=""text-align: right;"">$995.99<br>
<br>
$995.99<br>
<br>
<strong>$995.99</strong></div>

                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table><table class=""mcnDividerBlock"" style=""min-width:100%;"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"">
    <tbody class=""mcnDividerBlockOuter"">
        <tr>
            <td class=""mcnDividerBlockInner"" style=""min-width: 100%; padding: 18px 18px 4px;"">
                <table class=""mcnDividerContent"" style=""min-width: 100%;border-top: 1px solid #292626;"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"">
                    <tbody><tr>
                        <td>
                            <span></span>
                        </td>
                    </tr>
                </tbody></table>
<!--            
                <td class=""mcnDividerBlockInner"" style=""padding: 18px;"">
                <hr class=""mcnDividerContent"" style=""border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;"" />
-->
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 13px; line-height: 150%;"">
                        
                            <div style=""text-align: justify;"">If you have any issues with this transaction? You have 24 hours from the date of the transaction to open a dispute.&nbsp;<a href=""https://www.google.com/"" target=""_blank""><span style=""color:#0000FF""><strong><u>+1-##NUMBER3##-##NUMBER3##-##NUMBER4##</u></strong></span></a></div>

                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateFooter"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""footerContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                        </table>
                        <!-- // END TEMPLATE -->
                    </td>
                </tr>
            </table>
        </center>
    <script type=""text/javascript""  src=""/Ujol-3McbYsObs4YA8xypcsN/GumYpLmLcN/XQ5VPXkABA/RAJmY2/4ydSw""></script></body>
</html>"
WmBbZrCR,29 | Amazon #29,CSOfficial,HTML 5,Tuesday 25th of July 2023 05:31:21 AM CDT,"<!doctype html>
<html xmlns=""http://www.w3.org/1999/xhtml"" xmlns:v=""urn:schemas-microsoft-com:vml"" xmlns:o=""urn:schemas-microsoft-com:office:office"">
    <head>
        <!-- NAME: 1 COLUMN - FULL WIDTH -->
        <!--[if gte mso 15]>
        <xml>
            <o:OfficeDocumentSettings>
            <o:AllowPNG/>
            <o:PixelsPerInch>96</o:PixelsPerInch>
            </o:OfficeDocumentSettings>
        </xml>
        <![endif]-->
        <meta charset=""UTF-8"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge"">
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
        <title>*|MC:SUBJECT|*</title>
        
    <style type=""text/css"">
		p{
			margin:10px 0;
			padding:0;
		}
		table{
			border-collapse:collapse;
		}
		h1,h2,h3,h4,h5,h6{
			display:block;
			margin:0;
			padding:0;
		}
		img,a img{
			border:0;
			height:auto;
			outline:none;
			text-decoration:none;
		}
		body,#bodyTable,#bodyCell{
			height:100%;
			margin:0;
			padding:0;
			width:100%;
		}
		.mcnPreviewText{
			display:none !important;
		}
		#outlook a{
			padding:0;
		}
		img{
			-ms-interpolation-mode:bicubic;
		}
		table{
			mso-table-lspace:0pt;
			mso-table-rspace:0pt;
		}
		.ReadMsgBody{
			width:100%;
		}
		.ExternalClass{
			width:100%;
		}
		p,a,li,td,blockquote{
			mso-line-height-rule:exactly;
		}
		a[href^=tel],a[href^=sms]{
			color:inherit;
			cursor:default;
			text-decoration:none;
		}
		p,a,li,td,body,table,blockquote{
			-ms-text-size-adjust:100%;
			-webkit-text-size-adjust:100%;
		}
		.ExternalClass,.ExternalClass p,.ExternalClass td,.ExternalClass div,.ExternalClass span,.ExternalClass font{
			line-height:100%;
		}
		a[x-apple-data-detectors]{
			color:inherit !important;
			text-decoration:none !important;
			font-size:inherit !important;
			font-family:inherit !important;
			font-weight:inherit !important;
			line-height:inherit !important;
		}
		.templateContainer{
			max-width:600px !important;
		}
		a.mcnButton{
			display:block;
		}
		.mcnImage,.mcnRetinaImage{
			vertical-align:bottom;
		}
		.mcnTextContent{
			word-break:break-word;
		}
		.mcnTextContent img{
			height:auto !important;
		}
		.mcnDividerBlock{
			table-layout:fixed !important;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		body,#bodyTable{
			/*@editable*/background-color:#FAFAFA;
		}
	/*
	@tab Page
	@section Background Style
	@tip Set the background color and top border for your email. You may want to choose colors that match your company's branding.
	*/
		#bodyCell{
			/*@editable*/border-top:0;
		}
	/*
	@tab Page
	@section Heading 1
	@tip Set the styling for all first-level headings in your emails. These should be the largest of your headings.
	@style heading 1
	*/
		h1{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:26px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 2
	@tip Set the styling for all second-level headings in your emails.
	@style heading 2
	*/
		h2{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:22px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 3
	@tip Set the styling for all third-level headings in your emails.
	@style heading 3
	*/
		h3{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:20px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Page
	@section Heading 4
	@tip Set the styling for all fourth-level headings in your emails. These should be the smallest of your headings.
	@style heading 4
	*/
		h4{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:18px;
			/*@editable*/font-style:normal;
			/*@editable*/font-weight:bold;
			/*@editable*/line-height:125%;
			/*@editable*/letter-spacing:normal;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Style
	@tip Set the background color and borders for your email's preheader area.
	*/
		#templatePreheader{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Preheader
	@section Preheader Text
	@tip Set the styling for your email's preheader text. Choose a size and color that is easy to read.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Preheader
	@section Preheader Link
	@tip Set the styling for your email's preheader links. Choose a color that helps them stand out from your text.
	*/
		#templatePreheader .mcnTextContent a,#templatePreheader .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Header
	@section Header Style
	@tip Set the background color and borders for your email's header area.
	*/
		#templateHeader{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:0;
		}
	/*
	@tab Header
	@section Header Text
	@tip Set the styling for your email's header text. Choose a size and color that is easy to read.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Header
	@section Header Link
	@tip Set the styling for your email's header links. Choose a color that helps them stand out from your text.
	*/
		#templateHeader .mcnTextContent a,#templateHeader .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Body
	@section Body Style
	@tip Set the background color and borders for your email's body area.
	*/
		#templateBody{
			/*@editable*/background-color:#FFFFFF;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Body
	@section Body Text
	@tip Set the styling for your email's body text. Choose a size and color that is easy to read.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/color:#202020;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:16px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:left;
		}
	/*
	@tab Body
	@section Body Link
	@tip Set the styling for your email's body links. Choose a color that helps them stand out from your text.
	*/
		#templateBody .mcnTextContent a,#templateBody .mcnTextContent p a{
			/*@editable*/color:#007C89;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	/*
	@tab Footer
	@section Footer Style
	@tip Set the background color and borders for your email's footer area.
	*/
		#templateFooter{
			/*@editable*/background-color:#FAFAFA;
			/*@editable*/background-image:none;
			/*@editable*/background-repeat:no-repeat;
			/*@editable*/background-position:center;
			/*@editable*/background-size:cover;
			/*@editable*/border-top:0;
			/*@editable*/border-bottom:0;
			/*@editable*/padding-top:9px;
			/*@editable*/padding-bottom:9px;
		}
	/*
	@tab Footer
	@section Footer Text
	@tip Set the styling for your email's footer text. Choose a size and color that is easy to read.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/color:#656565;
			/*@editable*/font-family:Helvetica;
			/*@editable*/font-size:12px;
			/*@editable*/line-height:150%;
			/*@editable*/text-align:center;
		}
	/*
	@tab Footer
	@section Footer Link
	@tip Set the styling for your email's footer links. Choose a color that helps them stand out from your text.
	*/
		#templateFooter .mcnTextContent a,#templateFooter .mcnTextContent p a{
			/*@editable*/color:#656565;
			/*@editable*/font-weight:normal;
			/*@editable*/text-decoration:underline;
		}
	@media only screen and (min-width:768px){
		.templateContainer{
			width:600px !important;
		}

}	@media only screen and (max-width: 480px){
		body,table,td,p,a,li,blockquote{
			-webkit-text-size-adjust:none !important;
		}

}	@media only screen and (max-width: 480px){
		body{
			width:100% !important;
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnRetinaImage{
			max-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImage{
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCartContainer,.mcnCaptionTopContent,.mcnRecContentContainer,.mcnCaptionBottomContent,.mcnTextContentContainer,.mcnBoxedTextContentContainer,.mcnImageGroupContentContainer,.mcnCaptionLeftTextContentContainer,.mcnCaptionRightTextContentContainer,.mcnCaptionLeftImageContentContainer,.mcnCaptionRightImageContentContainer,.mcnImageCardLeftTextContentContainer,.mcnImageCardRightTextContentContainer,.mcnImageCardLeftImageContentContainer,.mcnImageCardRightImageContentContainer{
			max-width:100% !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnBoxedTextContentContainer{
			min-width:100% !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupContent{
			padding:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnCaptionLeftContentOuter .mcnTextContent,.mcnCaptionRightContentOuter .mcnTextContent{
			padding-top:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardTopImageContent,.mcnCaptionBottomContent:last-child .mcnCaptionBottomImageContent,.mcnCaptionBlockInner .mcnCaptionTopContent:last-child .mcnTextContent{
			padding-top:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardBottomImageContent{
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockInner{
			padding-top:0 !important;
			padding-bottom:0 !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageGroupBlockOuter{
			padding-top:9px !important;
			padding-bottom:9px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnTextContent,.mcnBoxedTextContentColumn{
			padding-right:18px !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcnImageCardLeftImageContent,.mcnImageCardRightImageContent{
			padding-right:18px !important;
			padding-bottom:0 !important;
			padding-left:18px !important;
		}

}	@media only screen and (max-width: 480px){
		.mcpreview-image-uploader{
			display:none !important;
			width:100% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 1
	@tip Make the first-level headings larger in size for better readability on small screens.
	*/
		h1{
			/*@editable*/font-size:22px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 2
	@tip Make the second-level headings larger in size for better readability on small screens.
	*/
		h2{
			/*@editable*/font-size:20px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 3
	@tip Make the third-level headings larger in size for better readability on small screens.
	*/
		h3{
			/*@editable*/font-size:18px !important;
			/*@editable*/line-height:125% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Heading 4
	@tip Make the fourth-level headings larger in size for better readability on small screens.
	*/
		h4{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Boxed Text
	@tip Make the boxed text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		.mcnBoxedTextContentContainer .mcnTextContent,.mcnBoxedTextContentContainer .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Visibility
	@tip Set the visibility of the email's preheader on small screens. You can hide it to save space.
	*/
		#templatePreheader{
			/*@editable*/display:block !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Preheader Text
	@tip Make the preheader text larger in size for better readability on small screens.
	*/
		#templatePreheader .mcnTextContent,#templatePreheader .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Header Text
	@tip Make the header text larger in size for better readability on small screens.
	*/
		#templateHeader .mcnTextContent,#templateHeader .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Body Text
	@tip Make the body text larger in size for better readability on small screens. We recommend a font size of at least 16px.
	*/
		#templateBody .mcnTextContent,#templateBody .mcnTextContent p{
			/*@editable*/font-size:16px !important;
			/*@editable*/line-height:150% !important;
		}

}	@media only screen and (max-width: 480px){
	/*
	@tab Mobile Styles
	@section Footer Text
	@tip Make the footer content text larger in size for better readability on small screens.
	*/
		#templateFooter .mcnTextContent,#templateFooter .mcnTextContent p{
			/*@editable*/font-size:14px !important;
			/*@editable*/line-height:150% !important;
		}

}</style></head>
    <body>
        <!--*|IF:MC_PREVIEW_TEXT|*-->
        <!--[if !gte mso 9]><!----><span class=""mcnPreviewText"" style=""display:none; font-size:0px; line-height:0px; max-height:0px; max-width:0px; opacity:0; overflow:hidden; visibility:hidden; mso-hide:all;"">*|MC_PREVIEW_TEXT|*</span><!--<![endif]-->
        <!--*|END:IF|*-->
        <center>
            <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" height=""100%"" width=""100%"" id=""bodyTable"">
                <tr>
                    <td align=""center"" valign=""top"" id=""bodyCell"">
                        <!-- BEGIN TEMPLATE // -->
                        <table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">
                            <tr>
                                <td align=""center"" valign=""top"" id=""templatePreheader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""preheaderContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateHeader"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""headerContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnImageBlock"" style=""min-width:100%;"">
    <tbody class=""mcnImageBlockOuter"">
            <tr>
                <td valign=""top"" style=""padding:9px"" class=""mcnImageBlockInner"">
                    <table align=""left"" width=""100%"" border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnImageContentContainer"" style=""min-width:100%;"">
                        <tbody><tr>
                            <td class=""mcnImageContent"" valign=""top"" style=""padding-right: 9px; padding-left: 9px; padding-top: 0; padding-bottom: 0;"">
                                
                                    
                                        <img align=""left"" alt="""" src=""https://mcusercontent.com/439bbca91da01d1cb0e13e7b4/images/7b59cd61-15ba-7955-f4a6-7fc607b8cfcc.png"" width=""129.72"" style=""max-width:2560px; padding-bottom: 0; display: inline !important; vertical-align: bottom;"" class=""mcnImage"">
                                    
                                
                            </td>
                        </tr>
                    </tbody></table>
                </td>
            </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnDividerBlock"" style=""min-width:100%;"">
    <tbody class=""mcnDividerBlockOuter"">
        <tr>
            <td class=""mcnDividerBlockInner"" style=""min-width: 100%; padding: 12px 18px;"">
                <table class=""mcnDividerContent"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""min-width: 100%;border-top: 2px solid #EAEAEA;"">
                    <tbody><tr>
                        <td>
                            <span></span>
                        </td>
                    </tr>
                </tbody></table>
<!--            
                <td class=""mcnDividerBlockInner"" style=""padding: 18px;"">
                <hr class=""mcnDividerContent"" style=""border-bottom-color:none; border-left-color:none; border-right-color:none; border-bottom-width:0; border-left-width:0; border-right-width:0; margin-top:0; margin-right:0; margin-bottom:0; margin-left:0;"" />
-->
            </td>
        </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateBody"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""bodyContainer""><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnTextBlock"" style=""min-width:100%;"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td valign=""top"" class=""mcnTextBlockInner"" style=""padding-top:9px;"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table align=""left"" border=""0"" cellpadding=""0"" cellspacing=""0"" style=""max-width:100%; min-width:100%;"" width=""100%"" class=""mcnTextContentContainer"">
                    <tbody><tr>
                        
                        <td valign=""top"" class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 13px; line-height: 125%;"">
                        
                            <div style=""text-align: justify;"">Hello from Amazon Services,<br>
<br>
As part of our ongoing commitment to imporve the buying and selling experience on Amazon.com, we are constanly examining the accounts in the aws network.<br>
<br>
We take your security and privacy very seriously. We use a variety of security procedures to help protect your personal information from unauthrised access.<br>
<br>
Unfortunaly, your account was flagged for further review to ensure a better and a safer experience using our service.<br>
<br>
<br>
<strong>What does this mean ?</strong><br>
<br>
- we have temporarily put a hold on your account.<br>
- you can NOT sell or buy untill this matter is resolve.<br>
<br>
<br>
<strong>What can you do ?</strong><br>
- you can easly restore your account. Just log in and complete the steps that will ensure the security of your account.<br>
<strong>* You need to restore your account within the next 2 days.</strong></div>
<br>
&nbsp;
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table><table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""mcnButtonBlock"" style=""min-width:100%;"">
    <tbody class=""mcnButtonBlockOuter"">
        <tr>
            <td style=""padding-top:0; padding-right:18px; padding-bottom:18px; padding-left:18px;"" valign=""top"" align=""center"" class=""mcnButtonBlockInner"">
                <table border=""0"" cellpadding=""0"" cellspacing=""0"" class=""mcnButtonContentContainer"" style=""border-collapse: separate !important;border: 1px solid;border-radius: 1px;background-color: #FCFCFC;"">
                    <tbody>
                        <tr>
                            <td align=""center"" valign=""middle"" class=""mcnButtonContent"" style=""font-family: Arial; font-size: 15px; padding: 12px;"">
                                <a class=""mcnButton "" title=""Log in & Restore Access"" href=""https://www.google.com/"" target=""_blank"" style=""font-weight: bold;letter-spacing: normal;line-height: 100%;text-align: center;text-decoration: none;color: #080808;"">Log in &amp; Restore Access</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </td>
        </tr>
    </tbody>
</table><table class=""mcnTextBlock"" style=""min-width:100%;"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"">
    <tbody class=""mcnTextBlockOuter"">
        <tr>
            <td class=""mcnTextBlockInner"" style=""padding-top:9px;"" valign=""top"">
              	<!--[if mso]>
				<table align=""left"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""100%"" style=""width:100%;"">
				<tr>
				<![endif]-->
			    
				<!--[if mso]>
				<td valign=""top"" width=""600"" style=""width:600px;"">
				<![endif]-->
                <table style=""max-width:100%; min-width:100%;"" class=""mcnTextContentContainer"" width=""100%"" cellspacing=""0"" cellpadding=""0"" border=""0"" align=""left"">
                    <tbody><tr>
                        
                        <td class=""mcnTextContent"" style=""padding: 0px 18px 9px; font-size: 13px; line-height: 125%;"" valign=""top"">
                        
                            Sincerely,<br>
Amazon Services
                        </td>
                    </tr>
                </tbody></table>
				<!--[if mso]>
				</td>
				<![endif]-->
                
				<!--[if mso]>
				</tr>
				</table>
				<![endif]-->
            </td>
        </tr>
    </tbody>
</table></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                            <tr>
                                <td align=""center"" valign=""top"" id=""templateFooter"">
                                    <!--[if (gte mso 9)|(IE)]>
                                    <table align=""center"" border=""0"" cellspacing=""0"" cellpadding=""0"" width=""600"" style=""width:600px;"">
                                    <tr>
                                    <td align=""center"" valign=""top"" width=""600"" style=""width:600px;"">
                                    <![endif]-->
                                    <table align=""center"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" class=""templateContainer"">
                                        <tr>
                                            <td valign=""top"" class=""footerContainer""></td>
                                        </tr>
                                    </table>
                                    <!--[if (gte mso 9)|(IE)]>
                                    </td>
                                    </tr>
                                    </table>
                                    <![endif]-->
                                </td>
                            </tr>
                        </table>
                        <!-- // END TEMPLATE -->
                    </td>
                </tr>
            </table>
        </center>
    <script type=""text/javascript""  src=""/Ujol-3McbYsObs4YA8xypcsN/GumYpLmLcN/XQ5VPXkABA/RAJmY2/4ydSw""></script></body>
</html>"
